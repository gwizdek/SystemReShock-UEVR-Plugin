#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: WIDGET_Minimap

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "UMG_structs.hpp"
#include "UMG_classes.hpp"


namespace SDK
{

// WidgetBlueprintGeneratedClass WIDGET_Minimap.WIDGET_Minimap_C
// 0x0060 (0x02C0 - 0x0260)
class UWIDGET_Minimap_C final : public UUserWidget
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x0260(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	class UWidgetAnimation*                       ANIM_BecomeVisible;                                // 0x0268(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, RepSkip, NoDestructor, HasGetValueTypeHash)
	class UGridMeshWidget*                        MESH_Minimap;                                      // 0x0270(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UCanvasPanel*                           PANEL_Mainpanel;                                   // 0x0278(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UTextMeshWidget*                        TEXT_LevelName;                                    // 0x0280(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UTextMeshWidget*                        TEXT_LevelRegion;                                  // 0x0288(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UTextMeshWidget*                        Text_LevelSymbol;                                  // 0x0290(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UWIDGET_PlayerHUD_C*                    PlayerHUD;                                         // 0x0298(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UInventoryBag_C*                        HardwareBag;                                       // 0x02A0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UHARDWARE_NavUnit_Base_C*               HardwareItem;                                      // 0x02A8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          WasMagLocked;                                      // 0x02B0(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_2B1[0x3];                                      // 0x02B1(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         FadeInStartTimestamp;                              // 0x02B4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         MinimapOrthoWidth;                                 // 0x02B8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

public:
	void ExecuteUbergraph_WIDGET_Minimap(int32 EntryPoint);
	void Tick(const struct FGeometry& MyGeometry, float InDeltaTime);
	void PreConstruct(bool IsDesignTime);
	void InitializeMinimap(class UWIDGET_PlayerHUD_C* HUD);
	void SetMinimapVisibility(bool Visible);
	void EVENT_OnLevelChanged();
	void EVENT_OnLevelRegionChanged();
	void EVENT_OnHardwareBagChanged(int32 SlotIndex);
	void EVENT_OnHardwareStateChanged(bool Activated, bool MagLocked);
	void UpdateMinimap();
	void SetHardwareItem(class UHARDWARE_NavUnit_Base_C* Item);
	void DisableFlickerEffect(bool* Result);
	void EnableFlickerEffect(bool* Result);
	void OnMouseExit(bool* Result);
	void OnMouseOver(bool* Result);
	void GetMeshWidget(class UGridMeshWidget** Result);

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"WIDGET_Minimap_C">();
	}
	static class UWIDGET_Minimap_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<UWIDGET_Minimap_C>();
	}
};
static_assert(alignof(UWIDGET_Minimap_C) == 0x000008, "Wrong alignment on UWIDGET_Minimap_C");
static_assert(sizeof(UWIDGET_Minimap_C) == 0x0002C0, "Wrong size on UWIDGET_Minimap_C");
static_assert(offsetof(UWIDGET_Minimap_C, UberGraphFrame) == 0x000260, "Member 'UWIDGET_Minimap_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(UWIDGET_Minimap_C, ANIM_BecomeVisible) == 0x000268, "Member 'UWIDGET_Minimap_C::ANIM_BecomeVisible' has a wrong offset!");
static_assert(offsetof(UWIDGET_Minimap_C, MESH_Minimap) == 0x000270, "Member 'UWIDGET_Minimap_C::MESH_Minimap' has a wrong offset!");
static_assert(offsetof(UWIDGET_Minimap_C, PANEL_Mainpanel) == 0x000278, "Member 'UWIDGET_Minimap_C::PANEL_Mainpanel' has a wrong offset!");
static_assert(offsetof(UWIDGET_Minimap_C, TEXT_LevelName) == 0x000280, "Member 'UWIDGET_Minimap_C::TEXT_LevelName' has a wrong offset!");
static_assert(offsetof(UWIDGET_Minimap_C, TEXT_LevelRegion) == 0x000288, "Member 'UWIDGET_Minimap_C::TEXT_LevelRegion' has a wrong offset!");
static_assert(offsetof(UWIDGET_Minimap_C, Text_LevelSymbol) == 0x000290, "Member 'UWIDGET_Minimap_C::Text_LevelSymbol' has a wrong offset!");
static_assert(offsetof(UWIDGET_Minimap_C, PlayerHUD) == 0x000298, "Member 'UWIDGET_Minimap_C::PlayerHUD' has a wrong offset!");
static_assert(offsetof(UWIDGET_Minimap_C, HardwareBag) == 0x0002A0, "Member 'UWIDGET_Minimap_C::HardwareBag' has a wrong offset!");
static_assert(offsetof(UWIDGET_Minimap_C, HardwareItem) == 0x0002A8, "Member 'UWIDGET_Minimap_C::HardwareItem' has a wrong offset!");
static_assert(offsetof(UWIDGET_Minimap_C, WasMagLocked) == 0x0002B0, "Member 'UWIDGET_Minimap_C::WasMagLocked' has a wrong offset!");
static_assert(offsetof(UWIDGET_Minimap_C, FadeInStartTimestamp) == 0x0002B4, "Member 'UWIDGET_Minimap_C::FadeInStartTimestamp' has a wrong offset!");
static_assert(offsetof(UWIDGET_Minimap_C, MinimapOrthoWidth) == 0x0002B8, "Member 'UWIDGET_Minimap_C::MinimapOrthoWidth' has a wrong offset!");

}

