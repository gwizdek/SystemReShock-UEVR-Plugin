#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: FUNCLIB_IntVector

#include "Basic.hpp"

#include "FUNCLIB_IntVector_classes.hpp"
#include "FUNCLIB_IntVector_parameters.hpp"


namespace SDK
{

// Function FUNCLIB_IntVector.FUNCLIB_IntVector_C.IsEqual
// (Static, Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// struct FIntVector                       A                                                      (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FIntVector                       B                                                      (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class UObject*                          __WorldContext                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    Equal                                                  (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void UFUNCLIB_IntVector_C::IsEqual(const struct FIntVector& A, const struct FIntVector& B, class UObject* __WorldContext, bool* Equal)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("FUNCLIB_IntVector_C", "IsEqual");

	Params::FUNCLIB_IntVector_C_IsEqual Parms{};

	Parms.A = std::move(A);
	Parms.B = std::move(B);
	Parms.__WorldContext = __WorldContext;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	if (Equal != nullptr)
		*Equal = Parms.Equal;
}


// Function FUNCLIB_IntVector.FUNCLIB_IntVector_C.IsNotEqual
// (Static, Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// struct FIntVector                       A                                                      (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FIntVector                       B                                                      (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class UObject*                          __WorldContext                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    Result                                                 (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void UFUNCLIB_IntVector_C::IsNotEqual(const struct FIntVector& A, const struct FIntVector& B, class UObject* __WorldContext, bool* Result)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("FUNCLIB_IntVector_C", "IsNotEqual");

	Params::FUNCLIB_IntVector_C_IsNotEqual Parms{};

	Parms.A = std::move(A);
	Parms.B = std::move(B);
	Parms.__WorldContext = __WorldContext;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	if (Result != nullptr)
		*Result = Parms.Result;
}


// Function FUNCLIB_IntVector.FUNCLIB_IntVector_C.AddIntVectors
// (Static, Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// struct FIntVector                       A                                                      (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FIntVector                       B                                                      (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class UObject*                          __WorldContext                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FIntVector                       Result                                                 (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UFUNCLIB_IntVector_C::AddIntVectors(const struct FIntVector& A, const struct FIntVector& B, class UObject* __WorldContext, struct FIntVector* Result)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("FUNCLIB_IntVector_C", "AddIntVectors");

	Params::FUNCLIB_IntVector_C_AddIntVectors Parms{};

	Parms.A = std::move(A);
	Parms.B = std::move(B);
	Parms.__WorldContext = __WorldContext;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	if (Result != nullptr)
		*Result = std::move(Parms.Result);
}


// Function FUNCLIB_IntVector.FUNCLIB_IntVector_C.SubtractIntVectors
// (Static, Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// struct FIntVector                       A                                                      (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FIntVector                       B                                                      (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class UObject*                          __WorldContext                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FIntVector                       Result                                                 (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UFUNCLIB_IntVector_C::SubtractIntVectors(const struct FIntVector& A, const struct FIntVector& B, class UObject* __WorldContext, struct FIntVector* Result)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("FUNCLIB_IntVector_C", "SubtractIntVectors");

	Params::FUNCLIB_IntVector_C_SubtractIntVectors Parms{};

	Parms.A = std::move(A);
	Parms.B = std::move(B);
	Parms.__WorldContext = __WorldContext;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	if (Result != nullptr)
		*Result = std::move(Parms.Result);
}


// Function FUNCLIB_IntVector.FUNCLIB_IntVector_C.GetUnitIntVectorFromVectorAxis
// (Static, Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// struct FVector                          Vector                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// ENUM_Axis                               Axis                                                   (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class UObject*                          __WorldContext                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FIntVector                       Result                                                 (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UFUNCLIB_IntVector_C::GetUnitIntVectorFromVectorAxis(const struct FVector& Vector, ENUM_Axis Axis, class UObject* __WorldContext, struct FIntVector* Result)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("FUNCLIB_IntVector_C", "GetUnitIntVectorFromVectorAxis");

	Params::FUNCLIB_IntVector_C_GetUnitIntVectorFromVectorAxis Parms{};

	Parms.Vector = std::move(Vector);
	Parms.Axis = Axis;
	Parms.__WorldContext = __WorldContext;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	if (Result != nullptr)
		*Result = std::move(Parms.Result);
}

}

