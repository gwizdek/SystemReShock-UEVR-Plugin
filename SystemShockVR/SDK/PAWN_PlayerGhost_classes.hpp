#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: PAWN_PlayerGhost

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "Engine_classes.hpp"


namespace SDK
{

// BlueprintGeneratedClass PAWN_PlayerGhost.PAWN_PlayerGhost_C
// 0x0068 (0x02E8 - 0x0280)
class APAWN_PlayerGhost_C final : public APawn
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x0280(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	class UMediaSoundComponent*                   MediaSound;                                        // 0x0288(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UCameraComponent*                       Camera;                                            // 0x0290(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USceneComponent*                        DefaultSceneRoot;                                  // 0x0298(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UWIDGET_PreGameScreen_C*                PreGameScreenWidget;                               // 0x02A0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UWIDGET_LoadingScreen_C*                LoadingScreenWidget;                               // 0x02A8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	FMulticastInlineDelegateProperty_             RequestSkipSequence;                               // 0x02B0(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)
	bool                                          IsHoldingUp;                                       // 0x02C0(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          IsHoldingDown;                                     // 0x02C1(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          IsHoldingLeft;                                     // 0x02C2(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          IsHoldingRight;                                    // 0x02C3(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          IsHoldingAccept;                                   // 0x02C4(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          IsHoldingBack;                                     // 0x02C5(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          IsHoldingSecretCodeA;                              // 0x02C6(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          IsHoldingSecretCodeB;                              // 0x02C7(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          IsHoldingSecretCodeStart;                          // 0x02C8(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          IsHoldingAlt1;                                     // 0x02C9(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          IsHoldingAlt2;                                     // 0x02CA(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          IsHoldingTabLeft;                                  // 0x02CB(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          IsHoldingTabRight;                                 // 0x02CC(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_2CD[0x3];                                      // 0x02CD(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class UWIDGET_GameOverScreen_C*               GameOverScreenWidget;                              // 0x02D0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	FMulticastInlineDelegateProperty_             CancelSkipSequence;                                // 0x02D8(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)

public:
	void RequestSkipSequence__DelegateSignature();
	void CancelSkipSequence__DelegateSignature();
	void ExecuteUbergraph_PAWN_PlayerGhost(int32 EntryPoint);
	void ReceivePossessed(class AController* NewController);
	void ReceiveUnpossessed(class AController* OldController);
	void InpAxisEvt_MenuNavAxis_Y_K2Node_InputAxisEvent_17(float AxisValue);
	void InpAxisEvt_MenuNavAxis_X_K2Node_InputAxisEvent_16(float AxisValue);
	void InpActEvt_MenuNav_Down_K2Node_InputActionEvent_0(const struct FKey& Key);
	void InpActEvt_MenuNav_Down_K2Node_InputActionEvent_1(const struct FKey& Key);
	void InpActEvt_MenuNav_Up_K2Node_InputActionEvent_2(const struct FKey& Key);
	void InpActEvt_MenuNav_Up_K2Node_InputActionEvent_3(const struct FKey& Key);
	void InpActEvt_MenuNav_Right_K2Node_InputActionEvent_4(const struct FKey& Key);
	void InpActEvt_MenuNav_Right_K2Node_InputActionEvent_5(const struct FKey& Key);
	void InpActEvt_MenuNav_Left_K2Node_InputActionEvent_6(const struct FKey& Key);
	void InpActEvt_MenuNav_Left_K2Node_InputActionEvent_7(const struct FKey& Key);
	void InpActEvt_MenuNav_Alt2_K2Node_InputActionEvent_8(const struct FKey& Key);
	void InpActEvt_MenuNav_Alt2_K2Node_InputActionEvent_9(const struct FKey& Key);
	void InpActEvt_MenuNav_Alt1_K2Node_InputActionEvent_10(const struct FKey& Key);
	void InpActEvt_MenuNav_Alt1_K2Node_InputActionEvent_11(const struct FKey& Key);
	void InpActEvt_Gamepad_RightThumbstick_K2Node_InputKeyEvent_0(const struct FKey& Key);
	void InpActEvt_Home_K2Node_InputKeyEvent_1(const struct FKey& Key);
	void InpActEvt_Gamepad_Escape_K2Node_InputActionEvent_12(const struct FKey& Key);
	void InpActEvt_Gamepad_Escape_K2Node_InputActionEvent_13(const struct FKey& Key);
	void InpActEvt_Gamepad_MenuNav_Back_K2Node_InputActionEvent_14(const struct FKey& Key);
	void InpActEvt_Gamepad_MenuNav_Back_K2Node_InputActionEvent_15(const struct FKey& Key);
	void InpActEvt_Gamepad_MenuNav_Accept_K2Node_InputActionEvent_16(const struct FKey& Key);
	void InpActEvt_Gamepad_MenuNav_Accept_K2Node_InputActionEvent_17(const struct FKey& Key);
	void InpActEvt_MenuNav_Accept_K2Node_InputActionEvent_18(const struct FKey& Key);
	void InpActEvt_MenuNav_Accept_K2Node_InputActionEvent_19(const struct FKey& Key);
	void InpActEvt_Gamepad_MenuNav_Alt1_K2Node_InputActionEvent_20(const struct FKey& Key);
	void InpActEvt_Gamepad_MenuNav_Alt1_K2Node_InputActionEvent_21(const struct FKey& Key);
	void InpActEvt_Gamepad_MenuNav_Alt2_K2Node_InputActionEvent_22(const struct FKey& Key);
	void InpActEvt_Gamepad_MenuNav_Alt2_K2Node_InputActionEvent_23(const struct FKey& Key);
	void InpActEvt_Gamepad_MenuNav_TabLeft_K2Node_InputActionEvent_24(const struct FKey& Key);
	void InpActEvt_Gamepad_MenuNav_TabLeft_K2Node_InputActionEvent_25(const struct FKey& Key);
	void InpActEvt_Gamepad_MenuNav_TabRight_K2Node_InputActionEvent_26(const struct FKey& Key);
	void InpActEvt_Gamepad_MenuNav_TabRight_K2Node_InputActionEvent_27(const struct FKey& Key);
	void InpActEvt_Locked_Escape_K2Node_InputActionEvent_28(const struct FKey& Key);
	void InpActEvt_Locked_Escape_K2Node_InputActionEvent_29(const struct FKey& Key);
	void InpActEvt_MenuNav_Back_K2Node_InputActionEvent_30(const struct FKey& Key);
	void InpActEvt_MenuNav_Back_K2Node_InputActionEvent_31(const struct FKey& Key);
	void InpActEvt_AnyKey_K2Node_InputKeyEvent_2(const struct FKey& Key);
	void EVENT_OnStartingLevelFinishedLoading();
	void HandleMenuNavUp(bool ButtonDown);
	void HandleMenuNavDown(bool ButtonDown);
	void HandleMenuNavLeft(bool ButtonDown);
	void HandleMenuNavRight(bool ButtonDown);
	void HandleMenuNavAccept(bool ButtonDown);
	void HandleMenuNavBack(bool ButtonDown);
	void HandleMenuNavAlt1(bool ButtonDown);
	void HandleMenuNavAlt2(bool ButtonDown);
	void HandleMenuNavTabLeft(bool ButtonDown);
	void HandleMenuNavTabRight(bool ButtonDown);
	void HandleSecretCodeA(bool ButtonDown);
	void HandleSecretCodeB(bool ButtonDown);
	void HandleSecretCodeStart(bool ButtonDown);

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"PAWN_PlayerGhost_C">();
	}
	static class APAWN_PlayerGhost_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<APAWN_PlayerGhost_C>();
	}
};
static_assert(alignof(APAWN_PlayerGhost_C) == 0x000008, "Wrong alignment on APAWN_PlayerGhost_C");
static_assert(sizeof(APAWN_PlayerGhost_C) == 0x0002E8, "Wrong size on APAWN_PlayerGhost_C");
static_assert(offsetof(APAWN_PlayerGhost_C, UberGraphFrame) == 0x000280, "Member 'APAWN_PlayerGhost_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(APAWN_PlayerGhost_C, MediaSound) == 0x000288, "Member 'APAWN_PlayerGhost_C::MediaSound' has a wrong offset!");
static_assert(offsetof(APAWN_PlayerGhost_C, Camera) == 0x000290, "Member 'APAWN_PlayerGhost_C::Camera' has a wrong offset!");
static_assert(offsetof(APAWN_PlayerGhost_C, DefaultSceneRoot) == 0x000298, "Member 'APAWN_PlayerGhost_C::DefaultSceneRoot' has a wrong offset!");
static_assert(offsetof(APAWN_PlayerGhost_C, PreGameScreenWidget) == 0x0002A0, "Member 'APAWN_PlayerGhost_C::PreGameScreenWidget' has a wrong offset!");
static_assert(offsetof(APAWN_PlayerGhost_C, LoadingScreenWidget) == 0x0002A8, "Member 'APAWN_PlayerGhost_C::LoadingScreenWidget' has a wrong offset!");
static_assert(offsetof(APAWN_PlayerGhost_C, RequestSkipSequence) == 0x0002B0, "Member 'APAWN_PlayerGhost_C::RequestSkipSequence' has a wrong offset!");
static_assert(offsetof(APAWN_PlayerGhost_C, IsHoldingUp) == 0x0002C0, "Member 'APAWN_PlayerGhost_C::IsHoldingUp' has a wrong offset!");
static_assert(offsetof(APAWN_PlayerGhost_C, IsHoldingDown) == 0x0002C1, "Member 'APAWN_PlayerGhost_C::IsHoldingDown' has a wrong offset!");
static_assert(offsetof(APAWN_PlayerGhost_C, IsHoldingLeft) == 0x0002C2, "Member 'APAWN_PlayerGhost_C::IsHoldingLeft' has a wrong offset!");
static_assert(offsetof(APAWN_PlayerGhost_C, IsHoldingRight) == 0x0002C3, "Member 'APAWN_PlayerGhost_C::IsHoldingRight' has a wrong offset!");
static_assert(offsetof(APAWN_PlayerGhost_C, IsHoldingAccept) == 0x0002C4, "Member 'APAWN_PlayerGhost_C::IsHoldingAccept' has a wrong offset!");
static_assert(offsetof(APAWN_PlayerGhost_C, IsHoldingBack) == 0x0002C5, "Member 'APAWN_PlayerGhost_C::IsHoldingBack' has a wrong offset!");
static_assert(offsetof(APAWN_PlayerGhost_C, IsHoldingSecretCodeA) == 0x0002C6, "Member 'APAWN_PlayerGhost_C::IsHoldingSecretCodeA' has a wrong offset!");
static_assert(offsetof(APAWN_PlayerGhost_C, IsHoldingSecretCodeB) == 0x0002C7, "Member 'APAWN_PlayerGhost_C::IsHoldingSecretCodeB' has a wrong offset!");
static_assert(offsetof(APAWN_PlayerGhost_C, IsHoldingSecretCodeStart) == 0x0002C8, "Member 'APAWN_PlayerGhost_C::IsHoldingSecretCodeStart' has a wrong offset!");
static_assert(offsetof(APAWN_PlayerGhost_C, IsHoldingAlt1) == 0x0002C9, "Member 'APAWN_PlayerGhost_C::IsHoldingAlt1' has a wrong offset!");
static_assert(offsetof(APAWN_PlayerGhost_C, IsHoldingAlt2) == 0x0002CA, "Member 'APAWN_PlayerGhost_C::IsHoldingAlt2' has a wrong offset!");
static_assert(offsetof(APAWN_PlayerGhost_C, IsHoldingTabLeft) == 0x0002CB, "Member 'APAWN_PlayerGhost_C::IsHoldingTabLeft' has a wrong offset!");
static_assert(offsetof(APAWN_PlayerGhost_C, IsHoldingTabRight) == 0x0002CC, "Member 'APAWN_PlayerGhost_C::IsHoldingTabRight' has a wrong offset!");
static_assert(offsetof(APAWN_PlayerGhost_C, GameOverScreenWidget) == 0x0002D0, "Member 'APAWN_PlayerGhost_C::GameOverScreenWidget' has a wrong offset!");
static_assert(offsetof(APAWN_PlayerGhost_C, CancelSkipSequence) == 0x0002D8, "Member 'APAWN_PlayerGhost_C::CancelSkipSequence' has a wrong offset!");

}

