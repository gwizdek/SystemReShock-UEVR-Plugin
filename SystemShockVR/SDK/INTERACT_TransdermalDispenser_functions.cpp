#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: INTERACT_TransdermalDispenser

#include "Basic.hpp"

#include "INTERACT_TransdermalDispenser_classes.hpp"
#include "INTERACT_TransdermalDispenser_parameters.hpp"


namespace SDK
{

// Function INTERACT_TransdermalDispenser.INTERACT_TransdermalDispenser_C.ExecuteUbergraph_INTERACT_TransdermalDispenser
// (Final, UbergraphFunction)
// Parameters:
// int32                                   EntryPoint                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void AINTERACT_TransdermalDispenser_C::ExecuteUbergraph_INTERACT_TransdermalDispenser(int32 EntryPoint)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("INTERACT_TransdermalDispenser_C", "ExecuteUbergraph_INTERACT_TransdermalDispenser");

	Params::INTERACT_TransdermalDispenser_C_ExecuteUbergraph_INTERACT_TransdermalDispenser Parms{};

	Parms.EntryPoint = EntryPoint;

	UObject::ProcessEvent(Func, &Parms);
}


// Function INTERACT_TransdermalDispenser.INTERACT_TransdermalDispenser_C.BndEvt__INTERACT_TransdermalDispenser_COMP_VoxelCullable_K2Node_ComponentBoundEvent_0_CullableVisibilitySignature__DelegateSignature
// (BlueprintEvent)
// Parameters:
// bool                                    bVisibleState                                          (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)

void AINTERACT_TransdermalDispenser_C::BndEvt__INTERACT_TransdermalDispenser_COMP_VoxelCullable_K2Node_ComponentBoundEvent_0_CullableVisibilitySignature__DelegateSignature(bool bVisibleState)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("INTERACT_TransdermalDispenser_C", "BndEvt__INTERACT_TransdermalDispenser_COMP_VoxelCullable_K2Node_ComponentBoundEvent_0_CullableVisibilitySignature__DelegateSignature");

	Params::INTERACT_TransdermalDispenser_C_BndEvt__INTERACT_TransdermalDispenser_COMP_VoxelCullable_K2Node_ComponentBoundEvent_0_CullableVisibilitySignature__DelegateSignature Parms{};

	Parms.bVisibleState = bVisibleState;

	UObject::ProcessEvent(Func, &Parms);
}


// Function INTERACT_TransdermalDispenser.INTERACT_TransdermalDispenser_C.ReceiveBeginPlay
// (Event, Protected, BlueprintEvent)

void AINTERACT_TransdermalDispenser_C::ReceiveBeginPlay()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("INTERACT_TransdermalDispenser_C", "ReceiveBeginPlay");

	UObject::ProcessEvent(Func, nullptr);
}


// Function INTERACT_TransdermalDispenser.INTERACT_TransdermalDispenser_C.UserConstructionScript
// (Event, Public, BlueprintCallable, BlueprintEvent)

void AINTERACT_TransdermalDispenser_C::UserConstructionScript()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("INTERACT_TransdermalDispenser_C", "UserConstructionScript");

	UObject::ProcessEvent(Func, nullptr);
}


// Function INTERACT_TransdermalDispenser.INTERACT_TransdermalDispenser_C.GetTargetShape
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// class UPrimitiveComponent*              CursorPrimitive                                        (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class UShapeComponent*                  ShapeComponent                                         (Parm, OutParm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void AINTERACT_TransdermalDispenser_C::GetTargetShape(class UPrimitiveComponent* CursorPrimitive, class UShapeComponent** ShapeComponent)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("INTERACT_TransdermalDispenser_C", "GetTargetShape");

	Params::INTERACT_TransdermalDispenser_C_GetTargetShape Parms{};

	Parms.CursorPrimitive = CursorPrimitive;

	UObject::ProcessEvent(Func, &Parms);

	if (ShapeComponent != nullptr)
		*ShapeComponent = Parms.ShapeComponent;
}


// Function INTERACT_TransdermalDispenser.INTERACT_TransdermalDispenser_C.TryInteract
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// class AActor*                           SourceActor                                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class UPrimitiveComponent*              CursorPrimitive                                        (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// ENUM_InteractionType                    InteractionType                                        (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FSTRUCT_InteractResults          InteractResults                                        (Parm, OutParm, HasGetValueTypeHash)

void AINTERACT_TransdermalDispenser_C::TryInteract(class AActor* SourceActor, class UPrimitiveComponent* CursorPrimitive, ENUM_InteractionType InteractionType, struct FSTRUCT_InteractResults* InteractResults)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("INTERACT_TransdermalDispenser_C", "TryInteract");

	Params::INTERACT_TransdermalDispenser_C_TryInteract Parms{};

	Parms.SourceActor = SourceActor;
	Parms.CursorPrimitive = CursorPrimitive;
	Parms.InteractionType = InteractionType;

	UObject::ProcessEvent(Func, &Parms);

	if (InteractResults != nullptr)
		*InteractResults = std::move(Parms.InteractResults);
}


// Function INTERACT_TransdermalDispenser.INTERACT_TransdermalDispenser_C.InitializeTransdermalDispenser
// (Protected, HasDefaults, BlueprintCallable, BlueprintEvent)

void AINTERACT_TransdermalDispenser_C::InitializeTransdermalDispenser()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("INTERACT_TransdermalDispenser_C", "InitializeTransdermalDispenser");

	UObject::ProcessEvent(Func, nullptr);
}


// Function INTERACT_TransdermalDispenser.INTERACT_TransdermalDispenser_C.InitializeKeypadComponents
// (Protected, HasDefaults, BlueprintCallable, BlueprintEvent)

void AINTERACT_TransdermalDispenser_C::InitializeKeypadComponents()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("INTERACT_TransdermalDispenser_C", "InitializeKeypadComponents");

	UObject::ProcessEvent(Func, nullptr);
}


// Function INTERACT_TransdermalDispenser.INTERACT_TransdermalDispenser_C.InitializeAttributes
// (Protected, BlueprintCallable, BlueprintEvent)

void AINTERACT_TransdermalDispenser_C::InitializeAttributes()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("INTERACT_TransdermalDispenser_C", "InitializeAttributes");

	UObject::ProcessEvent(Func, nullptr);
}


// Function INTERACT_TransdermalDispenser.INTERACT_TransdermalDispenser_C.UpdateEmissiveStrength
// (Protected, BlueprintCallable, BlueprintEvent)
// Parameters:
// float                                   Scale                                                  (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void AINTERACT_TransdermalDispenser_C::UpdateEmissiveStrength(float Scale)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("INTERACT_TransdermalDispenser_C", "UpdateEmissiveStrength");

	Params::INTERACT_TransdermalDispenser_C_UpdateEmissiveStrength Parms{};

	Parms.Scale = Scale;

	UObject::ProcessEvent(Func, &Parms);
}


// Function INTERACT_TransdermalDispenser.INTERACT_TransdermalDispenser_C.GenerateInitialStock
// (Protected, HasDefaults, BlueprintCallable, BlueprintEvent)

void AINTERACT_TransdermalDispenser_C::GenerateInitialStock()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("INTERACT_TransdermalDispenser_C", "GenerateInitialStock");

	UObject::ProcessEvent(Func, nullptr);
}


// Function INTERACT_TransdermalDispenser.INTERACT_TransdermalDispenser_C.OnPaidCost
// (Protected, HasDefaults, BlueprintCallable, BlueprintEvent)

void AINTERACT_TransdermalDispenser_C::OnPaidCost()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("INTERACT_TransdermalDispenser_C", "OnPaidCost");

	UObject::ProcessEvent(Func, nullptr);
}


// Function INTERACT_TransdermalDispenser.INTERACT_TransdermalDispenser_C.TryMakePayment
// (Protected, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// class APAWN_SystemShockCharacter_C*     Character                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// uint8                                   CostToPay                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    Result                                                 (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void AINTERACT_TransdermalDispenser_C::TryMakePayment(class APAWN_SystemShockCharacter_C* Character, uint8 CostToPay, bool* Result)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("INTERACT_TransdermalDispenser_C", "TryMakePayment");

	Params::INTERACT_TransdermalDispenser_C_TryMakePayment Parms{};

	Parms.Character = Character;
	Parms.CostToPay = CostToPay;

	UObject::ProcessEvent(Func, &Parms);

	if (Result != nullptr)
		*Result = Parms.Result;
}


// Function INTERACT_TransdermalDispenser.INTERACT_TransdermalDispenser_C.TryRefundPayment
// (Protected, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// class APAWN_SystemShockCharacter_C*     Character                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    Result                                                 (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void AINTERACT_TransdermalDispenser_C::TryRefundPayment(class APAWN_SystemShockCharacter_C* Character, bool* Result)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("INTERACT_TransdermalDispenser_C", "TryRefundPayment");

	Params::INTERACT_TransdermalDispenser_C_TryRefundPayment Parms{};

	Parms.Character = Character;

	UObject::ProcessEvent(Func, &Parms);

	if (Result != nullptr)
		*Result = Parms.Result;
}


// Function INTERACT_TransdermalDispenser.INTERACT_TransdermalDispenser_C.IsDispenserFunctional
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// bool                                    Result                                                 (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void AINTERACT_TransdermalDispenser_C::IsDispenserFunctional(bool* Result)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("INTERACT_TransdermalDispenser_C", "IsDispenserFunctional");

	Params::INTERACT_TransdermalDispenser_C_IsDispenserFunctional Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (Result != nullptr)
		*Result = Parms.Result;
}


// Function INTERACT_TransdermalDispenser.INTERACT_TransdermalDispenser_C.HasAnyPatchesInStock
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// bool                                    Result                                                 (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void AINTERACT_TransdermalDispenser_C::HasAnyPatchesInStock(bool* Result)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("INTERACT_TransdermalDispenser_C", "HasAnyPatchesInStock");

	Params::INTERACT_TransdermalDispenser_C_HasAnyPatchesInStock Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (Result != nullptr)
		*Result = Parms.Result;
}


// Function INTERACT_TransdermalDispenser.INTERACT_TransdermalDispenser_C.GetPatchStockCountAtIndex
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// int32                                   PatchIndex                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// uint8                                   Result                                                 (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void AINTERACT_TransdermalDispenser_C::GetPatchStockCountAtIndex(int32 PatchIndex, uint8* Result)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("INTERACT_TransdermalDispenser_C", "GetPatchStockCountAtIndex");

	Params::INTERACT_TransdermalDispenser_C_GetPatchStockCountAtIndex Parms{};

	Parms.PatchIndex = PatchIndex;

	UObject::ProcessEvent(Func, &Parms);

	if (Result != nullptr)
		*Result = Parms.Result;
}


// Function INTERACT_TransdermalDispenser.INTERACT_TransdermalDispenser_C.GetPatchClassAtIndex
// (Protected, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// int32                                   PatchIndex                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// TSoftClassPtr<class UClass>             Result                                                 (Parm, OutParm, HasGetValueTypeHash)

void AINTERACT_TransdermalDispenser_C::GetPatchClassAtIndex(int32 PatchIndex, TSoftClassPtr<class UClass>* Result)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("INTERACT_TransdermalDispenser_C", "GetPatchClassAtIndex");

	Params::INTERACT_TransdermalDispenser_C_GetPatchClassAtIndex Parms{};

	Parms.PatchIndex = PatchIndex;

	UObject::ProcessEvent(Func, &Parms);

	if (Result != nullptr)
		*Result = Parms.Result;
}


// Function INTERACT_TransdermalDispenser.INTERACT_TransdermalDispenser_C.GetBestCostIncrement
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// uint8                                   MaxSpend                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// uint8                                   Result                                                 (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void AINTERACT_TransdermalDispenser_C::GetBestCostIncrement(uint8 MaxSpend, uint8* Result)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("INTERACT_TransdermalDispenser_C", "GetBestCostIncrement");

	Params::INTERACT_TransdermalDispenser_C_GetBestCostIncrement Parms{};

	Parms.MaxSpend = MaxSpend;

	UObject::ProcessEvent(Func, &Parms);

	if (Result != nullptr)
		*Result = Parms.Result;
}


// Function INTERACT_TransdermalDispenser.INTERACT_TransdermalDispenser_C.TryPurchasePatch
// (Protected, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// class APAWN_SystemShockCharacter_C*     Character                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class UPrimitiveComponent*              PrimitiveComponent                                     (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    Result                                                 (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
// class FText                             FailedText                                             (Parm, OutParm)

void AINTERACT_TransdermalDispenser_C::TryPurchasePatch(class APAWN_SystemShockCharacter_C* Character, class UPrimitiveComponent* PrimitiveComponent, bool* Result, class FText* FailedText)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("INTERACT_TransdermalDispenser_C", "TryPurchasePatch");

	Params::INTERACT_TransdermalDispenser_C_TryPurchasePatch Parms{};

	Parms.Character = Character;
	Parms.PrimitiveComponent = PrimitiveComponent;

	UObject::ProcessEvent(Func, &Parms);

	if (Result != nullptr)
		*Result = Parms.Result;

	if (FailedText != nullptr)
		*FailedText = std::move(Parms.FailedText);
}


// Function INTERACT_TransdermalDispenser.INTERACT_TransdermalDispenser_C.TryCompleteGameEventOnInteract
// (Protected, BlueprintCallable, BlueprintEvent)

void AINTERACT_TransdermalDispenser_C::TryCompleteGameEventOnInteract()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("INTERACT_TransdermalDispenser_C", "TryCompleteGameEventOnInteract");

	UObject::ProcessEvent(Func, nullptr);
}


// Function INTERACT_TransdermalDispenser.INTERACT_TransdermalDispenser_C.PlayKeypadErrorSound
// (Protected, BlueprintCallable, BlueprintEvent)
// Parameters:
// class UPrimitiveComponent*              PrimitiveComponent                                     (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void AINTERACT_TransdermalDispenser_C::PlayKeypadErrorSound(class UPrimitiveComponent* PrimitiveComponent)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("INTERACT_TransdermalDispenser_C", "PlayKeypadErrorSound");

	Params::INTERACT_TransdermalDispenser_C_PlayKeypadErrorSound Parms{};

	Parms.PrimitiveComponent = PrimitiveComponent;

	UObject::ProcessEvent(Func, &Parms);
}


// Function INTERACT_TransdermalDispenser.INTERACT_TransdermalDispenser_C.ModifyPatchStock
// (Protected, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// int32                                   PatchIndex                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// int32                                   StockChange                                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// uint8                                   NewCount                                               (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void AINTERACT_TransdermalDispenser_C::ModifyPatchStock(int32 PatchIndex, int32 StockChange, uint8* NewCount)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("INTERACT_TransdermalDispenser_C", "ModifyPatchStock");

	Params::INTERACT_TransdermalDispenser_C_ModifyPatchStock Parms{};

	Parms.PatchIndex = PatchIndex;
	Parms.StockChange = StockChange;

	UObject::ProcessEvent(Func, &Parms);

	if (NewCount != nullptr)
		*NewCount = Parms.NewCount;
}


// Function INTERACT_TransdermalDispenser.INTERACT_TransdermalDispenser_C.UpdatePatchSelectionScreen
// (Protected, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// int32                                   PatchIndex                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// uint8                                   StockCount                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void AINTERACT_TransdermalDispenser_C::UpdatePatchSelectionScreen(int32 PatchIndex, uint8 StockCount)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("INTERACT_TransdermalDispenser_C", "UpdatePatchSelectionScreen");

	Params::INTERACT_TransdermalDispenser_C_UpdatePatchSelectionScreen Parms{};

	Parms.PatchIndex = PatchIndex;
	Parms.StockCount = StockCount;

	UObject::ProcessEvent(Func, &Parms);
}


// Function INTERACT_TransdermalDispenser.INTERACT_TransdermalDispenser_C.UpdatePatchSelectionScreens
// (Protected, BlueprintCallable, BlueprintEvent)

void AINTERACT_TransdermalDispenser_C::UpdatePatchSelectionScreens()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("INTERACT_TransdermalDispenser_C", "UpdatePatchSelectionScreens");

	UObject::ProcessEvent(Func, nullptr);
}


// Function INTERACT_TransdermalDispenser.INTERACT_TransdermalDispenser_C.GetFocusWorldTransform
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// struct FTransform                       Transform                                              (Parm, OutParm, IsPlainOldData, NoDestructor)

void AINTERACT_TransdermalDispenser_C::GetFocusWorldTransform(struct FTransform* Transform)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("INTERACT_TransdermalDispenser_C", "GetFocusWorldTransform");

	Params::INTERACT_TransdermalDispenser_C_GetFocusWorldTransform Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (Transform != nullptr)
		*Transform = std::move(Parms.Transform);
}


// Function INTERACT_TransdermalDispenser.INTERACT_TransdermalDispenser_C.CycleFocusedPrimitiveComponent
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// class UPrimitiveComponent*              CursorPrimitive                                        (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    Vertical                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// bool                                    Previous                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)

void AINTERACT_TransdermalDispenser_C::CycleFocusedPrimitiveComponent(class UPrimitiveComponent* CursorPrimitive, bool Vertical, bool Previous)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("INTERACT_TransdermalDispenser_C", "CycleFocusedPrimitiveComponent");

	Params::INTERACT_TransdermalDispenser_C_CycleFocusedPrimitiveComponent Parms{};

	Parms.CursorPrimitive = CursorPrimitive;
	Parms.Vertical = Vertical;
	Parms.Previous = Previous;

	UObject::ProcessEvent(Func, &Parms);
}


// Function INTERACT_TransdermalDispenser.INTERACT_TransdermalDispenser_C.OnFinishedFocusing
// (Protected, BlueprintCallable, BlueprintEvent)

void AINTERACT_TransdermalDispenser_C::OnFinishedFocusing()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("INTERACT_TransdermalDispenser_C", "OnFinishedFocusing");

	UObject::ProcessEvent(Func, nullptr);
}


// Function INTERACT_TransdermalDispenser.INTERACT_TransdermalDispenser_C.UpdateCreditsScreen
// (Protected, HasDefaults, BlueprintCallable, BlueprintEvent)

void AINTERACT_TransdermalDispenser_C::UpdateCreditsScreen()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("INTERACT_TransdermalDispenser_C", "UpdateCreditsScreen");

	UObject::ProcessEvent(Func, nullptr);
}


// Function INTERACT_TransdermalDispenser.INTERACT_TransdermalDispenser_C.CanReceiveItem
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// class UITEM_Base_C*                     Item                                                   (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    Result                                                 (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void AINTERACT_TransdermalDispenser_C::CanReceiveItem(class UITEM_Base_C* Item, bool* Result)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("INTERACT_TransdermalDispenser_C", "CanReceiveItem");

	Params::INTERACT_TransdermalDispenser_C_CanReceiveItem Parms{};

	Parms.Item = Item;

	UObject::ProcessEvent(Func, &Parms);

	if (Result != nullptr)
		*Result = Parms.Result;
}


// Function INTERACT_TransdermalDispenser.INTERACT_TransdermalDispenser_C.TryReceiveItem
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// class UITEM_Base_C*                     Item                                                   (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    Result                                                 (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void AINTERACT_TransdermalDispenser_C::TryReceiveItem(class UITEM_Base_C* Item, bool* Result)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("INTERACT_TransdermalDispenser_C", "TryReceiveItem");

	Params::INTERACT_TransdermalDispenser_C_TryReceiveItem Parms{};

	Parms.Item = Item;

	UObject::ProcessEvent(Func, &Parms);

	if (Result != nullptr)
		*Result = Parms.Result;
}


// Function INTERACT_TransdermalDispenser.INTERACT_TransdermalDispenser_C.EVENT_OnDispensePatch
// (Private, BlueprintCallable, BlueprintEvent)

void AINTERACT_TransdermalDispenser_C::EVENT_OnDispensePatch()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("INTERACT_TransdermalDispenser_C", "EVENT_OnDispensePatch");

	UObject::ProcessEvent(Func, nullptr);
}


// Function INTERACT_TransdermalDispenser.INTERACT_TransdermalDispenser_C.UpdateDispenserVisibility
// (Protected, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    VisibilityState                                        (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)

void AINTERACT_TransdermalDispenser_C::UpdateDispenserVisibility(bool VisibilityState)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("INTERACT_TransdermalDispenser_C", "UpdateDispenserVisibility");

	Params::INTERACT_TransdermalDispenser_C_UpdateDispenserVisibility Parms{};

	Parms.VisibilityState = VisibilityState;

	UObject::ProcessEvent(Func, &Parms);
}


// Function INTERACT_TransdermalDispenser.INTERACT_TransdermalDispenser_C.GetMinCostIncrement
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// uint8                                   Result                                                 (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void AINTERACT_TransdermalDispenser_C::GetMinCostIncrement(uint8* Result)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("INTERACT_TransdermalDispenser_C", "GetMinCostIncrement");

	Params::INTERACT_TransdermalDispenser_C_GetMinCostIncrement Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (Result != nullptr)
		*Result = Parms.Result;
}


// Function INTERACT_TransdermalDispenser.INTERACT_TransdermalDispenser_C.EVENT_OnDisableAttribChanged
// (Private, BlueprintCallable, BlueprintEvent)
// Parameters:
// float                                   CurrValue                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// float                                   LastValue                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void AINTERACT_TransdermalDispenser_C::EVENT_OnDisableAttribChanged(float CurrValue, float LastValue)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("INTERACT_TransdermalDispenser_C", "EVENT_OnDisableAttribChanged");

	Params::INTERACT_TransdermalDispenser_C_EVENT_OnDisableAttribChanged Parms{};

	Parms.CurrValue = CurrValue;
	Parms.LastValue = LastValue;

	UObject::ProcessEvent(Func, &Parms);
}

}

