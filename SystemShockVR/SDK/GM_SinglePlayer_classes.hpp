#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: GM_SinglePlayer

#include "Basic.hpp"

#include "StreamingSaveGameSystem_classes.hpp"
#include "STRUCT_DebrisFragmentInstance_structs.hpp"
#include "Engine_structs.hpp"
#include "AttributeSystem_structs.hpp"
#include "ENUM_Axis_structs.hpp"


namespace SDK
{

// BlueprintGeneratedClass GM_SinglePlayer.GM_SinglePlayer_C
// 0x0108 (0x03E8 - 0x02E0)
class AGM_SinglePlayer_C : public ASingleplayerGameMode
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x02E0(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	class USceneComponent*                        DefaultSceneRoot;                                  // 0x02E8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	struct FAttribModApplyData                    KillAllMod;                                        // 0x02F0(0x00A0)(Edit, BlueprintVisible, DisableEditOnInstance)
	class UCyberspaceLifeSimulation_C*            CyberspaceLifeSimulation;                          // 0x0390(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UBatchedLevelVoxelization*              CyberspaceBatchedVoxelData;                        // 0x0398(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         GameOfLifeUpdateRate;                              // 0x03A0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         GameOfLifeAccumTime;                               // 0x03A4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CyberBehaviorCullUpdateRate;                       // 0x03A8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CyberBehaviorCullAccumTime;                        // 0x03AC(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CyberBehaviorCullDistance;                         // 0x03B0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CurrentCyberActorIndex;                            // 0x03B4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          DebugGameOfLifeNeighborCounts;                     // 0x03B8(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          IsLoading;                                         // 0x03B9(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          DebugGameOfLifeIslandBounds;                       // 0x03BA(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_3BB[0x5];                                      // 0x03BB(0x0005)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class AActor*>                         CyberActors;                                       // 0x03C0(0x0010)(Edit, BlueprintVisible, DisableEditOnTemplate, DisableEditOnInstance)
	struct FTimerHandle                           DebrisCleanupTimerHandle;                          // 0x03D0(0x0008)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	TArray<struct FSTRUCT_DebrisFragmentInstance> DebrisFragmentInstances;                           // 0x03D8(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance, ContainsInstancedReference)

public:
	void ExecuteUbergraph_GM_SinglePlayer(int32 EntryPoint);
	void K2_PostLogin(class APlayerController* NewPlayer);
	void K2_OnLogout(class AController* ExitingController);
	void HandleStartingNewPlayer(class APlayerController* NewPlayer);
	void ReceiveTick(float DeltaSeconds);
	void ReceiveBeginPlay();
	void CmdEnableDamageLog(bool Enable);
	void CmdPlayMusicForlevel(const class FString& LevelName);
	void CmdKillCameras();
	void CmdKillEnemies();
	void CmdRefillVitals();
	void CmdRoomCulling(bool Enable);
	void CmdGodMode(bool State);
	void CmdDetectable(bool State);
	void CmdDestroyComputerNodes();
	void CmdCompleteQuest(const class FString& Name_0);
	void CmdGrantItem(const class FString& ItemWithCount);
	void CmdGrantLoadout(const class FString& LoadoutName);
	void OnSuccess_64CD9C604309A4B08B9E89B0560E87C2();
	void OnFailure_64CD9C604309A4B08B9E89B0560E87C2();
	void AcquireAndPossessPawn(class UClass* PawnClass, class APawn** PossessedPawn);
	void TickCyberspace(float DeltaSeconds);
	void TickGameOfLife(class APAWN_SystemShockCharacter_C* PlayerPawn, float DeltaSeconds);
	void TickCyberBehaviorCulling(class APAWN_SystemShockCharacter_C* PlayerPawn, float DeltaSeconds);
	void UpdateCyberBehaviorCullState(class APAWN_SystemShockCharacter_C* PlayerPawn, class AActor* Actor);
	void ActivateGameOfLifeCell(const struct FVoxelWallLocation& WallLocation, float MinCellLifetime, bool* Result);
	void ActivateGameOfLifeCellFromRaycast(const struct FHitResult& RayHitResult);
	void GetBestWallLocationFromHitResult(const struct FHitResult& HitResult, bool* Result, struct FVoxelWallLocation* WallLocation);
	void DebugDrawAllNeighborCounts();
	void DebugDrawCellNeighborCounts(const struct FVoxelWallLocation& WallLocation, float Duration);
	void UpdateCurrentLevelData();
	void DebugDrawIslandBounds();
	void RegisterCyberActorWithBehavior(class AActor* Actor);
	void UnregisterCyberActorWithBehavior(class AActor* Actor);
	void GetCyberActorsInSphere(const struct FVector& Location, float Radius, TArray<class AActor*>* Result);
	void AddManagedDebrisFragment(class UStaticMeshComponent* DebrisFragment);
	void TryStartManagedDebrisFragmentTick();
	void OnTickDebrisFragmentCleanup();

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"GM_SinglePlayer_C">();
	}
	static class AGM_SinglePlayer_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<AGM_SinglePlayer_C>();
	}
};
static_assert(alignof(AGM_SinglePlayer_C) == 0x000008, "Wrong alignment on AGM_SinglePlayer_C");
static_assert(sizeof(AGM_SinglePlayer_C) == 0x0003E8, "Wrong size on AGM_SinglePlayer_C");
static_assert(offsetof(AGM_SinglePlayer_C, UberGraphFrame) == 0x0002E0, "Member 'AGM_SinglePlayer_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(AGM_SinglePlayer_C, DefaultSceneRoot) == 0x0002E8, "Member 'AGM_SinglePlayer_C::DefaultSceneRoot' has a wrong offset!");
static_assert(offsetof(AGM_SinglePlayer_C, KillAllMod) == 0x0002F0, "Member 'AGM_SinglePlayer_C::KillAllMod' has a wrong offset!");
static_assert(offsetof(AGM_SinglePlayer_C, CyberspaceLifeSimulation) == 0x000390, "Member 'AGM_SinglePlayer_C::CyberspaceLifeSimulation' has a wrong offset!");
static_assert(offsetof(AGM_SinglePlayer_C, CyberspaceBatchedVoxelData) == 0x000398, "Member 'AGM_SinglePlayer_C::CyberspaceBatchedVoxelData' has a wrong offset!");
static_assert(offsetof(AGM_SinglePlayer_C, GameOfLifeUpdateRate) == 0x0003A0, "Member 'AGM_SinglePlayer_C::GameOfLifeUpdateRate' has a wrong offset!");
static_assert(offsetof(AGM_SinglePlayer_C, GameOfLifeAccumTime) == 0x0003A4, "Member 'AGM_SinglePlayer_C::GameOfLifeAccumTime' has a wrong offset!");
static_assert(offsetof(AGM_SinglePlayer_C, CyberBehaviorCullUpdateRate) == 0x0003A8, "Member 'AGM_SinglePlayer_C::CyberBehaviorCullUpdateRate' has a wrong offset!");
static_assert(offsetof(AGM_SinglePlayer_C, CyberBehaviorCullAccumTime) == 0x0003AC, "Member 'AGM_SinglePlayer_C::CyberBehaviorCullAccumTime' has a wrong offset!");
static_assert(offsetof(AGM_SinglePlayer_C, CyberBehaviorCullDistance) == 0x0003B0, "Member 'AGM_SinglePlayer_C::CyberBehaviorCullDistance' has a wrong offset!");
static_assert(offsetof(AGM_SinglePlayer_C, CurrentCyberActorIndex) == 0x0003B4, "Member 'AGM_SinglePlayer_C::CurrentCyberActorIndex' has a wrong offset!");
static_assert(offsetof(AGM_SinglePlayer_C, DebugGameOfLifeNeighborCounts) == 0x0003B8, "Member 'AGM_SinglePlayer_C::DebugGameOfLifeNeighborCounts' has a wrong offset!");
static_assert(offsetof(AGM_SinglePlayer_C, IsLoading) == 0x0003B9, "Member 'AGM_SinglePlayer_C::IsLoading' has a wrong offset!");
static_assert(offsetof(AGM_SinglePlayer_C, DebugGameOfLifeIslandBounds) == 0x0003BA, "Member 'AGM_SinglePlayer_C::DebugGameOfLifeIslandBounds' has a wrong offset!");
static_assert(offsetof(AGM_SinglePlayer_C, CyberActors) == 0x0003C0, "Member 'AGM_SinglePlayer_C::CyberActors' has a wrong offset!");
static_assert(offsetof(AGM_SinglePlayer_C, DebrisCleanupTimerHandle) == 0x0003D0, "Member 'AGM_SinglePlayer_C::DebrisCleanupTimerHandle' has a wrong offset!");
static_assert(offsetof(AGM_SinglePlayer_C, DebrisFragmentInstances) == 0x0003D8, "Member 'AGM_SinglePlayer_C::DebrisFragmentInstances' has a wrong offset!");

}

