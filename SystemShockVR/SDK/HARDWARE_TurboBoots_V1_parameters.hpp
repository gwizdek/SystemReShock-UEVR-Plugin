#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: HARDWARE_TurboBoots_V1

#include "Basic.hpp"

#include "CoreUObject_structs.hpp"


namespace SDK::Params
{

// Function HARDWARE_TurboBoots_V1.HARDWARE_TurboBoots_V1_C.ExecuteUbergraph_HARDWARE_TurboBoots_V1
// 0x0098 (0x0098 - 0x0000)
struct HARDWARE_TurboBoots_V1_C_ExecuteUbergraph_HARDWARE_TurboBoots_V1 final
{
public:
	int32                                         EntryPoint;                                        // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TDelegate<void(class UObject* Loaded)>        K2Node_CreateDelegate_OutputDelegate;              // 0x0004(0x0010)(ZeroConstructor, NoDestructor)
	TDelegate<void(class UObject* Loaded)>        K2Node_CreateDelegate_OutputDelegate_1;            // 0x0014(0x0010)(ZeroConstructor, NoDestructor)
	uint8                                         Pad_24[0x4];                                       // 0x0024(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UObject*                                K2Node_CustomEvent_Loaded_2;                       // 0x0028(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UObject*                                Temp_object_Variable;                              // 0x0030(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class USoundCue*                              K2Node_DynamicCast_AsSound_Cue;                    // 0x0038(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0040(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_41[0x7];                                       // 0x0041(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UObject*                                K2Node_CustomEvent_Loaded_1;                       // 0x0048(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UObject*                                Temp_object_Variable_1;                            // 0x0050(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class USoundCue*                              K2Node_DynamicCast_AsSound_Cue_1;                  // 0x0058(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess_1;                     // 0x0060(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_61[0x7];                                       // 0x0061(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UObject*                                K2Node_CustomEvent_Loaded;                         // 0x0068(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UObject*                                Temp_object_Variable_2;                            // 0x0070(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class USoundCue*                              K2Node_DynamicCast_AsSound_Cue_2;                  // 0x0078(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess_2;                     // 0x0080(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_81[0x3];                                       // 0x0081(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	TDelegate<void(class UObject* Loaded)>        K2Node_CreateDelegate_OutputDelegate_2;            // 0x0084(0x0010)(ZeroConstructor, NoDestructor)
};
static_assert(alignof(HARDWARE_TurboBoots_V1_C_ExecuteUbergraph_HARDWARE_TurboBoots_V1) == 0x000008, "Wrong alignment on HARDWARE_TurboBoots_V1_C_ExecuteUbergraph_HARDWARE_TurboBoots_V1");
static_assert(sizeof(HARDWARE_TurboBoots_V1_C_ExecuteUbergraph_HARDWARE_TurboBoots_V1) == 0x000098, "Wrong size on HARDWARE_TurboBoots_V1_C_ExecuteUbergraph_HARDWARE_TurboBoots_V1");
static_assert(offsetof(HARDWARE_TurboBoots_V1_C_ExecuteUbergraph_HARDWARE_TurboBoots_V1, EntryPoint) == 0x000000, "Member 'HARDWARE_TurboBoots_V1_C_ExecuteUbergraph_HARDWARE_TurboBoots_V1::EntryPoint' has a wrong offset!");
static_assert(offsetof(HARDWARE_TurboBoots_V1_C_ExecuteUbergraph_HARDWARE_TurboBoots_V1, K2Node_CreateDelegate_OutputDelegate) == 0x000004, "Member 'HARDWARE_TurboBoots_V1_C_ExecuteUbergraph_HARDWARE_TurboBoots_V1::K2Node_CreateDelegate_OutputDelegate' has a wrong offset!");
static_assert(offsetof(HARDWARE_TurboBoots_V1_C_ExecuteUbergraph_HARDWARE_TurboBoots_V1, K2Node_CreateDelegate_OutputDelegate_1) == 0x000014, "Member 'HARDWARE_TurboBoots_V1_C_ExecuteUbergraph_HARDWARE_TurboBoots_V1::K2Node_CreateDelegate_OutputDelegate_1' has a wrong offset!");
static_assert(offsetof(HARDWARE_TurboBoots_V1_C_ExecuteUbergraph_HARDWARE_TurboBoots_V1, K2Node_CustomEvent_Loaded_2) == 0x000028, "Member 'HARDWARE_TurboBoots_V1_C_ExecuteUbergraph_HARDWARE_TurboBoots_V1::K2Node_CustomEvent_Loaded_2' has a wrong offset!");
static_assert(offsetof(HARDWARE_TurboBoots_V1_C_ExecuteUbergraph_HARDWARE_TurboBoots_V1, Temp_object_Variable) == 0x000030, "Member 'HARDWARE_TurboBoots_V1_C_ExecuteUbergraph_HARDWARE_TurboBoots_V1::Temp_object_Variable' has a wrong offset!");
static_assert(offsetof(HARDWARE_TurboBoots_V1_C_ExecuteUbergraph_HARDWARE_TurboBoots_V1, K2Node_DynamicCast_AsSound_Cue) == 0x000038, "Member 'HARDWARE_TurboBoots_V1_C_ExecuteUbergraph_HARDWARE_TurboBoots_V1::K2Node_DynamicCast_AsSound_Cue' has a wrong offset!");
static_assert(offsetof(HARDWARE_TurboBoots_V1_C_ExecuteUbergraph_HARDWARE_TurboBoots_V1, K2Node_DynamicCast_bSuccess) == 0x000040, "Member 'HARDWARE_TurboBoots_V1_C_ExecuteUbergraph_HARDWARE_TurboBoots_V1::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(HARDWARE_TurboBoots_V1_C_ExecuteUbergraph_HARDWARE_TurboBoots_V1, K2Node_CustomEvent_Loaded_1) == 0x000048, "Member 'HARDWARE_TurboBoots_V1_C_ExecuteUbergraph_HARDWARE_TurboBoots_V1::K2Node_CustomEvent_Loaded_1' has a wrong offset!");
static_assert(offsetof(HARDWARE_TurboBoots_V1_C_ExecuteUbergraph_HARDWARE_TurboBoots_V1, Temp_object_Variable_1) == 0x000050, "Member 'HARDWARE_TurboBoots_V1_C_ExecuteUbergraph_HARDWARE_TurboBoots_V1::Temp_object_Variable_1' has a wrong offset!");
static_assert(offsetof(HARDWARE_TurboBoots_V1_C_ExecuteUbergraph_HARDWARE_TurboBoots_V1, K2Node_DynamicCast_AsSound_Cue_1) == 0x000058, "Member 'HARDWARE_TurboBoots_V1_C_ExecuteUbergraph_HARDWARE_TurboBoots_V1::K2Node_DynamicCast_AsSound_Cue_1' has a wrong offset!");
static_assert(offsetof(HARDWARE_TurboBoots_V1_C_ExecuteUbergraph_HARDWARE_TurboBoots_V1, K2Node_DynamicCast_bSuccess_1) == 0x000060, "Member 'HARDWARE_TurboBoots_V1_C_ExecuteUbergraph_HARDWARE_TurboBoots_V1::K2Node_DynamicCast_bSuccess_1' has a wrong offset!");
static_assert(offsetof(HARDWARE_TurboBoots_V1_C_ExecuteUbergraph_HARDWARE_TurboBoots_V1, K2Node_CustomEvent_Loaded) == 0x000068, "Member 'HARDWARE_TurboBoots_V1_C_ExecuteUbergraph_HARDWARE_TurboBoots_V1::K2Node_CustomEvent_Loaded' has a wrong offset!");
static_assert(offsetof(HARDWARE_TurboBoots_V1_C_ExecuteUbergraph_HARDWARE_TurboBoots_V1, Temp_object_Variable_2) == 0x000070, "Member 'HARDWARE_TurboBoots_V1_C_ExecuteUbergraph_HARDWARE_TurboBoots_V1::Temp_object_Variable_2' has a wrong offset!");
static_assert(offsetof(HARDWARE_TurboBoots_V1_C_ExecuteUbergraph_HARDWARE_TurboBoots_V1, K2Node_DynamicCast_AsSound_Cue_2) == 0x000078, "Member 'HARDWARE_TurboBoots_V1_C_ExecuteUbergraph_HARDWARE_TurboBoots_V1::K2Node_DynamicCast_AsSound_Cue_2' has a wrong offset!");
static_assert(offsetof(HARDWARE_TurboBoots_V1_C_ExecuteUbergraph_HARDWARE_TurboBoots_V1, K2Node_DynamicCast_bSuccess_2) == 0x000080, "Member 'HARDWARE_TurboBoots_V1_C_ExecuteUbergraph_HARDWARE_TurboBoots_V1::K2Node_DynamicCast_bSuccess_2' has a wrong offset!");
static_assert(offsetof(HARDWARE_TurboBoots_V1_C_ExecuteUbergraph_HARDWARE_TurboBoots_V1, K2Node_CreateDelegate_OutputDelegate_2) == 0x000084, "Member 'HARDWARE_TurboBoots_V1_C_ExecuteUbergraph_HARDWARE_TurboBoots_V1::K2Node_CreateDelegate_OutputDelegate_2' has a wrong offset!");

// Function HARDWARE_TurboBoots_V1.HARDWARE_TurboBoots_V1_C.OnLoaded_1A73183248707E4A29F9079B9C66D522
// 0x0008 (0x0008 - 0x0000)
struct HARDWARE_TurboBoots_V1_C_OnLoaded_1A73183248707E4A29F9079B9C66D522 final
{
public:
	class UObject*                                Loaded;                                            // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(HARDWARE_TurboBoots_V1_C_OnLoaded_1A73183248707E4A29F9079B9C66D522) == 0x000008, "Wrong alignment on HARDWARE_TurboBoots_V1_C_OnLoaded_1A73183248707E4A29F9079B9C66D522");
static_assert(sizeof(HARDWARE_TurboBoots_V1_C_OnLoaded_1A73183248707E4A29F9079B9C66D522) == 0x000008, "Wrong size on HARDWARE_TurboBoots_V1_C_OnLoaded_1A73183248707E4A29F9079B9C66D522");
static_assert(offsetof(HARDWARE_TurboBoots_V1_C_OnLoaded_1A73183248707E4A29F9079B9C66D522, Loaded) == 0x000000, "Member 'HARDWARE_TurboBoots_V1_C_OnLoaded_1A73183248707E4A29F9079B9C66D522::Loaded' has a wrong offset!");

// Function HARDWARE_TurboBoots_V1.HARDWARE_TurboBoots_V1_C.OnLoaded_1928F5A24E7107BF538A57B42B1B8166
// 0x0008 (0x0008 - 0x0000)
struct HARDWARE_TurboBoots_V1_C_OnLoaded_1928F5A24E7107BF538A57B42B1B8166 final
{
public:
	class UObject*                                Loaded;                                            // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(HARDWARE_TurboBoots_V1_C_OnLoaded_1928F5A24E7107BF538A57B42B1B8166) == 0x000008, "Wrong alignment on HARDWARE_TurboBoots_V1_C_OnLoaded_1928F5A24E7107BF538A57B42B1B8166");
static_assert(sizeof(HARDWARE_TurboBoots_V1_C_OnLoaded_1928F5A24E7107BF538A57B42B1B8166) == 0x000008, "Wrong size on HARDWARE_TurboBoots_V1_C_OnLoaded_1928F5A24E7107BF538A57B42B1B8166");
static_assert(offsetof(HARDWARE_TurboBoots_V1_C_OnLoaded_1928F5A24E7107BF538A57B42B1B8166, Loaded) == 0x000000, "Member 'HARDWARE_TurboBoots_V1_C_OnLoaded_1928F5A24E7107BF538A57B42B1B8166::Loaded' has a wrong offset!");

// Function HARDWARE_TurboBoots_V1.HARDWARE_TurboBoots_V1_C.OnLoaded_C8C2481045482C986540308F248F6B4F
// 0x0008 (0x0008 - 0x0000)
struct HARDWARE_TurboBoots_V1_C_OnLoaded_C8C2481045482C986540308F248F6B4F final
{
public:
	class UObject*                                Loaded;                                            // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(HARDWARE_TurboBoots_V1_C_OnLoaded_C8C2481045482C986540308F248F6B4F) == 0x000008, "Wrong alignment on HARDWARE_TurboBoots_V1_C_OnLoaded_C8C2481045482C986540308F248F6B4F");
static_assert(sizeof(HARDWARE_TurboBoots_V1_C_OnLoaded_C8C2481045482C986540308F248F6B4F) == 0x000008, "Wrong size on HARDWARE_TurboBoots_V1_C_OnLoaded_C8C2481045482C986540308F248F6B4F");
static_assert(offsetof(HARDWARE_TurboBoots_V1_C_OnLoaded_C8C2481045482C986540308F248F6B4F, Loaded) == 0x000000, "Member 'HARDWARE_TurboBoots_V1_C_OnLoaded_C8C2481045482C986540308F248F6B4F::Loaded' has a wrong offset!");

// Function HARDWARE_TurboBoots_V1.HARDWARE_TurboBoots_V1_C.OnTurboMechanismActivated
// 0x0008 (0x0008 - 0x0000)
struct HARDWARE_TurboBoots_V1_C_OnTurboMechanismActivated final
{
public:
	int32                                         VersionNumber;                                     // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Handled;                                           // 0x0004(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_EqualEqual_IntInt_ReturnValue;            // 0x0005(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(HARDWARE_TurboBoots_V1_C_OnTurboMechanismActivated) == 0x000004, "Wrong alignment on HARDWARE_TurboBoots_V1_C_OnTurboMechanismActivated");
static_assert(sizeof(HARDWARE_TurboBoots_V1_C_OnTurboMechanismActivated) == 0x000008, "Wrong size on HARDWARE_TurboBoots_V1_C_OnTurboMechanismActivated");
static_assert(offsetof(HARDWARE_TurboBoots_V1_C_OnTurboMechanismActivated, VersionNumber) == 0x000000, "Member 'HARDWARE_TurboBoots_V1_C_OnTurboMechanismActivated::VersionNumber' has a wrong offset!");
static_assert(offsetof(HARDWARE_TurboBoots_V1_C_OnTurboMechanismActivated, Handled) == 0x000004, "Member 'HARDWARE_TurboBoots_V1_C_OnTurboMechanismActivated::Handled' has a wrong offset!");
static_assert(offsetof(HARDWARE_TurboBoots_V1_C_OnTurboMechanismActivated, CallFunc_EqualEqual_IntInt_ReturnValue) == 0x000005, "Member 'HARDWARE_TurboBoots_V1_C_OnTurboMechanismActivated::CallFunc_EqualEqual_IntInt_ReturnValue' has a wrong offset!");

// Function HARDWARE_TurboBoots_V1.HARDWARE_TurboBoots_V1_C.OnTurboMechanismDeactivated
// 0x0008 (0x0008 - 0x0000)
struct HARDWARE_TurboBoots_V1_C_OnTurboMechanismDeactivated final
{
public:
	int32                                         VersionNumber;                                     // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Handled;                                           // 0x0004(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_EqualEqual_IntInt_ReturnValue;            // 0x0005(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(HARDWARE_TurboBoots_V1_C_OnTurboMechanismDeactivated) == 0x000004, "Wrong alignment on HARDWARE_TurboBoots_V1_C_OnTurboMechanismDeactivated");
static_assert(sizeof(HARDWARE_TurboBoots_V1_C_OnTurboMechanismDeactivated) == 0x000008, "Wrong size on HARDWARE_TurboBoots_V1_C_OnTurboMechanismDeactivated");
static_assert(offsetof(HARDWARE_TurboBoots_V1_C_OnTurboMechanismDeactivated, VersionNumber) == 0x000000, "Member 'HARDWARE_TurboBoots_V1_C_OnTurboMechanismDeactivated::VersionNumber' has a wrong offset!");
static_assert(offsetof(HARDWARE_TurboBoots_V1_C_OnTurboMechanismDeactivated, Handled) == 0x000004, "Member 'HARDWARE_TurboBoots_V1_C_OnTurboMechanismDeactivated::Handled' has a wrong offset!");
static_assert(offsetof(HARDWARE_TurboBoots_V1_C_OnTurboMechanismDeactivated, CallFunc_EqualEqual_IntInt_ReturnValue) == 0x000005, "Member 'HARDWARE_TurboBoots_V1_C_OnTurboMechanismDeactivated::CallFunc_EqualEqual_IntInt_ReturnValue' has a wrong offset!");

// Function HARDWARE_TurboBoots_V1.HARDWARE_TurboBoots_V1_C.OnTurboSkateStateChanged
// 0x00F0 (0x00F0 - 0x0000)
struct HARDWARE_TurboBoots_V1_C_OnTurboSkateStateChanged final
{
public:
	bool                                          State;                                             // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class APAWN_SystemShockCharacter_C*           CharacterOwner;                                    // 0x0008(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UAttribMod*                             CallFunc_ApplyMod_ReturnValue;                     // 0x0010(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_ComputeSurfaceMoveScale_Result;           // 0x0018(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1C[0x4];                                       // 0x001C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UAttribMod*                             CallFunc_ApplyMod_ReturnValue_1;                   // 0x0020(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsFalling_ReturnValue;                    // 0x0028(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Not_PreBool_ReturnValue;                  // 0x0029(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BreakHitResult_bBlockingHit;              // 0x002A(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BreakHitResult_bInitialOverlap;           // 0x002B(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                         CallFunc_BreakHitResult_Time;                      // 0x002C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakHitResult_Distance;                  // 0x0030(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakHitResult_Location;                  // 0x0034(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakHitResult_ImpactPoint;               // 0x0040(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakHitResult_Normal;                    // 0x004C(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakHitResult_ImpactNormal;              // 0x0058(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_64[0x4];                                       // 0x0064(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UPhysicalMaterial*                      CallFunc_BreakHitResult_PhysMat;                   // 0x0068(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 CallFunc_BreakHitResult_HitActor;                  // 0x0070(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UPrimitiveComponent*                    CallFunc_BreakHitResult_HitComponent;              // 0x0078(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FName                                   CallFunc_BreakHitResult_HitBoneName;               // 0x0080(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_BreakHitResult_HitItem;                   // 0x0088(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_BreakHitResult_ElementIndex;              // 0x008C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_BreakHitResult_FaceIndex;                 // 0x0090(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakHitResult_TraceStart;                // 0x0094(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakHitResult_TraceEnd;                  // 0x00A0(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_K2_GetActorLocation_ReturnValue;          // 0x00AC(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_ExpireModsWithCategory_ReturnValue;       // 0x00B8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_BC[0x4];                                       // 0x00BC(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class AActor*                                 CallFunc_GetOwnerActor_Actor;                      // 0x00C0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class APAWN_SystemShockCharacter_C*           CallFunc_GetOwnerCharacter_Character;              // 0x00C8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class APAWN_SystemShockCharacter_C*           K2Node_DynamicCast_AsPAWN_System_Shock_Character;  // 0x00D0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x00D8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_D9[0x7];                                       // 0x00D9(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UAttribMod*                             CallFunc_ApplyMod_ReturnValue_2;                   // 0x00E0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UAttribMod*                             CallFunc_ApplyMod_ReturnValue_3;                   // 0x00E8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(HARDWARE_TurboBoots_V1_C_OnTurboSkateStateChanged) == 0x000008, "Wrong alignment on HARDWARE_TurboBoots_V1_C_OnTurboSkateStateChanged");
static_assert(sizeof(HARDWARE_TurboBoots_V1_C_OnTurboSkateStateChanged) == 0x0000F0, "Wrong size on HARDWARE_TurboBoots_V1_C_OnTurboSkateStateChanged");
static_assert(offsetof(HARDWARE_TurboBoots_V1_C_OnTurboSkateStateChanged, State) == 0x000000, "Member 'HARDWARE_TurboBoots_V1_C_OnTurboSkateStateChanged::State' has a wrong offset!");
static_assert(offsetof(HARDWARE_TurboBoots_V1_C_OnTurboSkateStateChanged, CharacterOwner) == 0x000008, "Member 'HARDWARE_TurboBoots_V1_C_OnTurboSkateStateChanged::CharacterOwner' has a wrong offset!");
static_assert(offsetof(HARDWARE_TurboBoots_V1_C_OnTurboSkateStateChanged, CallFunc_ApplyMod_ReturnValue) == 0x000010, "Member 'HARDWARE_TurboBoots_V1_C_OnTurboSkateStateChanged::CallFunc_ApplyMod_ReturnValue' has a wrong offset!");
static_assert(offsetof(HARDWARE_TurboBoots_V1_C_OnTurboSkateStateChanged, CallFunc_ComputeSurfaceMoveScale_Result) == 0x000018, "Member 'HARDWARE_TurboBoots_V1_C_OnTurboSkateStateChanged::CallFunc_ComputeSurfaceMoveScale_Result' has a wrong offset!");
static_assert(offsetof(HARDWARE_TurboBoots_V1_C_OnTurboSkateStateChanged, CallFunc_ApplyMod_ReturnValue_1) == 0x000020, "Member 'HARDWARE_TurboBoots_V1_C_OnTurboSkateStateChanged::CallFunc_ApplyMod_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(HARDWARE_TurboBoots_V1_C_OnTurboSkateStateChanged, CallFunc_IsFalling_ReturnValue) == 0x000028, "Member 'HARDWARE_TurboBoots_V1_C_OnTurboSkateStateChanged::CallFunc_IsFalling_ReturnValue' has a wrong offset!");
static_assert(offsetof(HARDWARE_TurboBoots_V1_C_OnTurboSkateStateChanged, CallFunc_Not_PreBool_ReturnValue) == 0x000029, "Member 'HARDWARE_TurboBoots_V1_C_OnTurboSkateStateChanged::CallFunc_Not_PreBool_ReturnValue' has a wrong offset!");
static_assert(offsetof(HARDWARE_TurboBoots_V1_C_OnTurboSkateStateChanged, CallFunc_BreakHitResult_bBlockingHit) == 0x00002A, "Member 'HARDWARE_TurboBoots_V1_C_OnTurboSkateStateChanged::CallFunc_BreakHitResult_bBlockingHit' has a wrong offset!");
static_assert(offsetof(HARDWARE_TurboBoots_V1_C_OnTurboSkateStateChanged, CallFunc_BreakHitResult_bInitialOverlap) == 0x00002B, "Member 'HARDWARE_TurboBoots_V1_C_OnTurboSkateStateChanged::CallFunc_BreakHitResult_bInitialOverlap' has a wrong offset!");
static_assert(offsetof(HARDWARE_TurboBoots_V1_C_OnTurboSkateStateChanged, CallFunc_BreakHitResult_Time) == 0x00002C, "Member 'HARDWARE_TurboBoots_V1_C_OnTurboSkateStateChanged::CallFunc_BreakHitResult_Time' has a wrong offset!");
static_assert(offsetof(HARDWARE_TurboBoots_V1_C_OnTurboSkateStateChanged, CallFunc_BreakHitResult_Distance) == 0x000030, "Member 'HARDWARE_TurboBoots_V1_C_OnTurboSkateStateChanged::CallFunc_BreakHitResult_Distance' has a wrong offset!");
static_assert(offsetof(HARDWARE_TurboBoots_V1_C_OnTurboSkateStateChanged, CallFunc_BreakHitResult_Location) == 0x000034, "Member 'HARDWARE_TurboBoots_V1_C_OnTurboSkateStateChanged::CallFunc_BreakHitResult_Location' has a wrong offset!");
static_assert(offsetof(HARDWARE_TurboBoots_V1_C_OnTurboSkateStateChanged, CallFunc_BreakHitResult_ImpactPoint) == 0x000040, "Member 'HARDWARE_TurboBoots_V1_C_OnTurboSkateStateChanged::CallFunc_BreakHitResult_ImpactPoint' has a wrong offset!");
static_assert(offsetof(HARDWARE_TurboBoots_V1_C_OnTurboSkateStateChanged, CallFunc_BreakHitResult_Normal) == 0x00004C, "Member 'HARDWARE_TurboBoots_V1_C_OnTurboSkateStateChanged::CallFunc_BreakHitResult_Normal' has a wrong offset!");
static_assert(offsetof(HARDWARE_TurboBoots_V1_C_OnTurboSkateStateChanged, CallFunc_BreakHitResult_ImpactNormal) == 0x000058, "Member 'HARDWARE_TurboBoots_V1_C_OnTurboSkateStateChanged::CallFunc_BreakHitResult_ImpactNormal' has a wrong offset!");
static_assert(offsetof(HARDWARE_TurboBoots_V1_C_OnTurboSkateStateChanged, CallFunc_BreakHitResult_PhysMat) == 0x000068, "Member 'HARDWARE_TurboBoots_V1_C_OnTurboSkateStateChanged::CallFunc_BreakHitResult_PhysMat' has a wrong offset!");
static_assert(offsetof(HARDWARE_TurboBoots_V1_C_OnTurboSkateStateChanged, CallFunc_BreakHitResult_HitActor) == 0x000070, "Member 'HARDWARE_TurboBoots_V1_C_OnTurboSkateStateChanged::CallFunc_BreakHitResult_HitActor' has a wrong offset!");
static_assert(offsetof(HARDWARE_TurboBoots_V1_C_OnTurboSkateStateChanged, CallFunc_BreakHitResult_HitComponent) == 0x000078, "Member 'HARDWARE_TurboBoots_V1_C_OnTurboSkateStateChanged::CallFunc_BreakHitResult_HitComponent' has a wrong offset!");
static_assert(offsetof(HARDWARE_TurboBoots_V1_C_OnTurboSkateStateChanged, CallFunc_BreakHitResult_HitBoneName) == 0x000080, "Member 'HARDWARE_TurboBoots_V1_C_OnTurboSkateStateChanged::CallFunc_BreakHitResult_HitBoneName' has a wrong offset!");
static_assert(offsetof(HARDWARE_TurboBoots_V1_C_OnTurboSkateStateChanged, CallFunc_BreakHitResult_HitItem) == 0x000088, "Member 'HARDWARE_TurboBoots_V1_C_OnTurboSkateStateChanged::CallFunc_BreakHitResult_HitItem' has a wrong offset!");
static_assert(offsetof(HARDWARE_TurboBoots_V1_C_OnTurboSkateStateChanged, CallFunc_BreakHitResult_ElementIndex) == 0x00008C, "Member 'HARDWARE_TurboBoots_V1_C_OnTurboSkateStateChanged::CallFunc_BreakHitResult_ElementIndex' has a wrong offset!");
static_assert(offsetof(HARDWARE_TurboBoots_V1_C_OnTurboSkateStateChanged, CallFunc_BreakHitResult_FaceIndex) == 0x000090, "Member 'HARDWARE_TurboBoots_V1_C_OnTurboSkateStateChanged::CallFunc_BreakHitResult_FaceIndex' has a wrong offset!");
static_assert(offsetof(HARDWARE_TurboBoots_V1_C_OnTurboSkateStateChanged, CallFunc_BreakHitResult_TraceStart) == 0x000094, "Member 'HARDWARE_TurboBoots_V1_C_OnTurboSkateStateChanged::CallFunc_BreakHitResult_TraceStart' has a wrong offset!");
static_assert(offsetof(HARDWARE_TurboBoots_V1_C_OnTurboSkateStateChanged, CallFunc_BreakHitResult_TraceEnd) == 0x0000A0, "Member 'HARDWARE_TurboBoots_V1_C_OnTurboSkateStateChanged::CallFunc_BreakHitResult_TraceEnd' has a wrong offset!");
static_assert(offsetof(HARDWARE_TurboBoots_V1_C_OnTurboSkateStateChanged, CallFunc_K2_GetActorLocation_ReturnValue) == 0x0000AC, "Member 'HARDWARE_TurboBoots_V1_C_OnTurboSkateStateChanged::CallFunc_K2_GetActorLocation_ReturnValue' has a wrong offset!");
static_assert(offsetof(HARDWARE_TurboBoots_V1_C_OnTurboSkateStateChanged, CallFunc_ExpireModsWithCategory_ReturnValue) == 0x0000B8, "Member 'HARDWARE_TurboBoots_V1_C_OnTurboSkateStateChanged::CallFunc_ExpireModsWithCategory_ReturnValue' has a wrong offset!");
static_assert(offsetof(HARDWARE_TurboBoots_V1_C_OnTurboSkateStateChanged, CallFunc_GetOwnerActor_Actor) == 0x0000C0, "Member 'HARDWARE_TurboBoots_V1_C_OnTurboSkateStateChanged::CallFunc_GetOwnerActor_Actor' has a wrong offset!");
static_assert(offsetof(HARDWARE_TurboBoots_V1_C_OnTurboSkateStateChanged, CallFunc_GetOwnerCharacter_Character) == 0x0000C8, "Member 'HARDWARE_TurboBoots_V1_C_OnTurboSkateStateChanged::CallFunc_GetOwnerCharacter_Character' has a wrong offset!");
static_assert(offsetof(HARDWARE_TurboBoots_V1_C_OnTurboSkateStateChanged, K2Node_DynamicCast_AsPAWN_System_Shock_Character) == 0x0000D0, "Member 'HARDWARE_TurboBoots_V1_C_OnTurboSkateStateChanged::K2Node_DynamicCast_AsPAWN_System_Shock_Character' has a wrong offset!");
static_assert(offsetof(HARDWARE_TurboBoots_V1_C_OnTurboSkateStateChanged, K2Node_DynamicCast_bSuccess) == 0x0000D8, "Member 'HARDWARE_TurboBoots_V1_C_OnTurboSkateStateChanged::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(HARDWARE_TurboBoots_V1_C_OnTurboSkateStateChanged, CallFunc_ApplyMod_ReturnValue_2) == 0x0000E0, "Member 'HARDWARE_TurboBoots_V1_C_OnTurboSkateStateChanged::CallFunc_ApplyMod_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(HARDWARE_TurboBoots_V1_C_OnTurboSkateStateChanged, CallFunc_ApplyMod_ReturnValue_3) == 0x0000E8, "Member 'HARDWARE_TurboBoots_V1_C_OnTurboSkateStateChanged::CallFunc_ApplyMod_ReturnValue_3' has a wrong offset!");

// Function HARDWARE_TurboBoots_V1.HARDWARE_TurboBoots_V1_C.OnTurboBootTick
// 0x0160 (0x0160 - 0x0000)
struct HARDWARE_TurboBoots_V1_C_OnTurboBootTick final
{
public:
	float                                         DeltaTime;                                         // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         TurboElapsedTime_0;                                // 0x0004(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         SurfaceDampingFactor;                              // 0x0008(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CurrentLocation;                                   // 0x000C(0x000C)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CurrentFloorNormal;                                // 0x0018(0x000C)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          IsStandingOnGround;                                // 0x0024(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_25[0x3];                                       // 0x0025(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class APAWN_SystemShockCharacter_C*           CharacterOwner;                                    // 0x0028(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0030(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_31[0x3];                                       // 0x0031(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                CallFunc_Normal_ReturnValue;                       // 0x0034(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Dot_VectorVector_ReturnValue;             // 0x0040(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_VSize_ReturnValue;                        // 0x0044(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_ProjectVectorOnToPlane_ReturnValue;       // 0x0048(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Normal_ReturnValue_1;                     // 0x0054(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BooleanAND_ReturnValue;                   // 0x0060(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_61[0x3];                                       // 0x0061(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                CallFunc_Multiply_VectorFloat_ReturnValue;         // 0x0064(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector_X;                            // 0x0070(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector_Y;                            // 0x0074(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector_Z;                            // 0x0078(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Abs_ReturnValue;                          // 0x007C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector_X_1;                          // 0x0080(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector_Y_1;                          // 0x0084(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector_Z_1;                          // 0x0088(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Abs_ReturnValue_1;                        // 0x008C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_NearlyEqual_FloatFloat_ReturnValue;       // 0x0090(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Not_PreBool_ReturnValue;                  // 0x0091(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_92[0x2];                                       // 0x0092(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_BreakVector_X_2;                          // 0x0094(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector_Y_2;                          // 0x0098(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector_Z_2;                          // 0x009C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Add_FloatFloat_ReturnValue;               // 0x00A0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector_X_3;                          // 0x00A4(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector_Y_3;                          // 0x00A8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector_Z_3;                          // 0x00AC(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Greater_FloatFloat_ReturnValue;           // 0x00B0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BooleanAND_ReturnValue_1;                 // 0x00B1(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_B2[0x2];                                       // 0x00B2(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                CallFunc_K2_GetActorLocation_ReturnValue;          // 0x00B4(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BreakHitResult_bBlockingHit;              // 0x00C0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BreakHitResult_bInitialOverlap;           // 0x00C1(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_C2[0x2];                                       // 0x00C2(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_BreakHitResult_Time;                      // 0x00C4(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakHitResult_Distance;                  // 0x00C8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakHitResult_Location;                  // 0x00CC(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakHitResult_ImpactPoint;               // 0x00D8(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakHitResult_Normal;                    // 0x00E4(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakHitResult_ImpactNormal;              // 0x00F0(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_FC[0x4];                                       // 0x00FC(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UPhysicalMaterial*                      CallFunc_BreakHitResult_PhysMat;                   // 0x0100(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 CallFunc_BreakHitResult_HitActor;                  // 0x0108(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UPrimitiveComponent*                    CallFunc_BreakHitResult_HitComponent;              // 0x0110(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FName                                   CallFunc_BreakHitResult_HitBoneName;               // 0x0118(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_BreakHitResult_HitItem;                   // 0x0120(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_BreakHitResult_ElementIndex;              // 0x0124(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_BreakHitResult_FaceIndex;                 // 0x0128(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakHitResult_TraceStart;                // 0x012C(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakHitResult_TraceEnd;                  // 0x0138(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsFalling_ReturnValue;                    // 0x0144(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Not_PreBool_ReturnValue_1;                // 0x0145(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_146[0x2];                                      // 0x0146(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_ComputeSurfaceMoveScale_Result;           // 0x0148(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_14C[0x4];                                      // 0x014C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class APAWN_SystemShockCharacter_C*           CallFunc_GetOwnerCharacter_Character;              // 0x0150(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_GetActiveVersionNumber_VersionNumber;     // 0x0158(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_IntInt_ReturnValue;            // 0x015C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(HARDWARE_TurboBoots_V1_C_OnTurboBootTick) == 0x000008, "Wrong alignment on HARDWARE_TurboBoots_V1_C_OnTurboBootTick");
static_assert(sizeof(HARDWARE_TurboBoots_V1_C_OnTurboBootTick) == 0x000160, "Wrong size on HARDWARE_TurboBoots_V1_C_OnTurboBootTick");
static_assert(offsetof(HARDWARE_TurboBoots_V1_C_OnTurboBootTick, DeltaTime) == 0x000000, "Member 'HARDWARE_TurboBoots_V1_C_OnTurboBootTick::DeltaTime' has a wrong offset!");
static_assert(offsetof(HARDWARE_TurboBoots_V1_C_OnTurboBootTick, TurboElapsedTime_0) == 0x000004, "Member 'HARDWARE_TurboBoots_V1_C_OnTurboBootTick::TurboElapsedTime_0' has a wrong offset!");
static_assert(offsetof(HARDWARE_TurboBoots_V1_C_OnTurboBootTick, SurfaceDampingFactor) == 0x000008, "Member 'HARDWARE_TurboBoots_V1_C_OnTurboBootTick::SurfaceDampingFactor' has a wrong offset!");
static_assert(offsetof(HARDWARE_TurboBoots_V1_C_OnTurboBootTick, CurrentLocation) == 0x00000C, "Member 'HARDWARE_TurboBoots_V1_C_OnTurboBootTick::CurrentLocation' has a wrong offset!");
static_assert(offsetof(HARDWARE_TurboBoots_V1_C_OnTurboBootTick, CurrentFloorNormal) == 0x000018, "Member 'HARDWARE_TurboBoots_V1_C_OnTurboBootTick::CurrentFloorNormal' has a wrong offset!");
static_assert(offsetof(HARDWARE_TurboBoots_V1_C_OnTurboBootTick, IsStandingOnGround) == 0x000024, "Member 'HARDWARE_TurboBoots_V1_C_OnTurboBootTick::IsStandingOnGround' has a wrong offset!");
static_assert(offsetof(HARDWARE_TurboBoots_V1_C_OnTurboBootTick, CharacterOwner) == 0x000028, "Member 'HARDWARE_TurboBoots_V1_C_OnTurboBootTick::CharacterOwner' has a wrong offset!");
static_assert(offsetof(HARDWARE_TurboBoots_V1_C_OnTurboBootTick, CallFunc_IsValid_ReturnValue) == 0x000030, "Member 'HARDWARE_TurboBoots_V1_C_OnTurboBootTick::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(HARDWARE_TurboBoots_V1_C_OnTurboBootTick, CallFunc_Normal_ReturnValue) == 0x000034, "Member 'HARDWARE_TurboBoots_V1_C_OnTurboBootTick::CallFunc_Normal_ReturnValue' has a wrong offset!");
static_assert(offsetof(HARDWARE_TurboBoots_V1_C_OnTurboBootTick, CallFunc_Dot_VectorVector_ReturnValue) == 0x000040, "Member 'HARDWARE_TurboBoots_V1_C_OnTurboBootTick::CallFunc_Dot_VectorVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(HARDWARE_TurboBoots_V1_C_OnTurboBootTick, CallFunc_VSize_ReturnValue) == 0x000044, "Member 'HARDWARE_TurboBoots_V1_C_OnTurboBootTick::CallFunc_VSize_ReturnValue' has a wrong offset!");
static_assert(offsetof(HARDWARE_TurboBoots_V1_C_OnTurboBootTick, CallFunc_ProjectVectorOnToPlane_ReturnValue) == 0x000048, "Member 'HARDWARE_TurboBoots_V1_C_OnTurboBootTick::CallFunc_ProjectVectorOnToPlane_ReturnValue' has a wrong offset!");
static_assert(offsetof(HARDWARE_TurboBoots_V1_C_OnTurboBootTick, CallFunc_Normal_ReturnValue_1) == 0x000054, "Member 'HARDWARE_TurboBoots_V1_C_OnTurboBootTick::CallFunc_Normal_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(HARDWARE_TurboBoots_V1_C_OnTurboBootTick, CallFunc_BooleanAND_ReturnValue) == 0x000060, "Member 'HARDWARE_TurboBoots_V1_C_OnTurboBootTick::CallFunc_BooleanAND_ReturnValue' has a wrong offset!");
static_assert(offsetof(HARDWARE_TurboBoots_V1_C_OnTurboBootTick, CallFunc_Multiply_VectorFloat_ReturnValue) == 0x000064, "Member 'HARDWARE_TurboBoots_V1_C_OnTurboBootTick::CallFunc_Multiply_VectorFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(HARDWARE_TurboBoots_V1_C_OnTurboBootTick, CallFunc_BreakVector_X) == 0x000070, "Member 'HARDWARE_TurboBoots_V1_C_OnTurboBootTick::CallFunc_BreakVector_X' has a wrong offset!");
static_assert(offsetof(HARDWARE_TurboBoots_V1_C_OnTurboBootTick, CallFunc_BreakVector_Y) == 0x000074, "Member 'HARDWARE_TurboBoots_V1_C_OnTurboBootTick::CallFunc_BreakVector_Y' has a wrong offset!");
static_assert(offsetof(HARDWARE_TurboBoots_V1_C_OnTurboBootTick, CallFunc_BreakVector_Z) == 0x000078, "Member 'HARDWARE_TurboBoots_V1_C_OnTurboBootTick::CallFunc_BreakVector_Z' has a wrong offset!");
static_assert(offsetof(HARDWARE_TurboBoots_V1_C_OnTurboBootTick, CallFunc_Abs_ReturnValue) == 0x00007C, "Member 'HARDWARE_TurboBoots_V1_C_OnTurboBootTick::CallFunc_Abs_ReturnValue' has a wrong offset!");
static_assert(offsetof(HARDWARE_TurboBoots_V1_C_OnTurboBootTick, CallFunc_BreakVector_X_1) == 0x000080, "Member 'HARDWARE_TurboBoots_V1_C_OnTurboBootTick::CallFunc_BreakVector_X_1' has a wrong offset!");
static_assert(offsetof(HARDWARE_TurboBoots_V1_C_OnTurboBootTick, CallFunc_BreakVector_Y_1) == 0x000084, "Member 'HARDWARE_TurboBoots_V1_C_OnTurboBootTick::CallFunc_BreakVector_Y_1' has a wrong offset!");
static_assert(offsetof(HARDWARE_TurboBoots_V1_C_OnTurboBootTick, CallFunc_BreakVector_Z_1) == 0x000088, "Member 'HARDWARE_TurboBoots_V1_C_OnTurboBootTick::CallFunc_BreakVector_Z_1' has a wrong offset!");
static_assert(offsetof(HARDWARE_TurboBoots_V1_C_OnTurboBootTick, CallFunc_Abs_ReturnValue_1) == 0x00008C, "Member 'HARDWARE_TurboBoots_V1_C_OnTurboBootTick::CallFunc_Abs_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(HARDWARE_TurboBoots_V1_C_OnTurboBootTick, CallFunc_NearlyEqual_FloatFloat_ReturnValue) == 0x000090, "Member 'HARDWARE_TurboBoots_V1_C_OnTurboBootTick::CallFunc_NearlyEqual_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(HARDWARE_TurboBoots_V1_C_OnTurboBootTick, CallFunc_Not_PreBool_ReturnValue) == 0x000091, "Member 'HARDWARE_TurboBoots_V1_C_OnTurboBootTick::CallFunc_Not_PreBool_ReturnValue' has a wrong offset!");
static_assert(offsetof(HARDWARE_TurboBoots_V1_C_OnTurboBootTick, CallFunc_BreakVector_X_2) == 0x000094, "Member 'HARDWARE_TurboBoots_V1_C_OnTurboBootTick::CallFunc_BreakVector_X_2' has a wrong offset!");
static_assert(offsetof(HARDWARE_TurboBoots_V1_C_OnTurboBootTick, CallFunc_BreakVector_Y_2) == 0x000098, "Member 'HARDWARE_TurboBoots_V1_C_OnTurboBootTick::CallFunc_BreakVector_Y_2' has a wrong offset!");
static_assert(offsetof(HARDWARE_TurboBoots_V1_C_OnTurboBootTick, CallFunc_BreakVector_Z_2) == 0x00009C, "Member 'HARDWARE_TurboBoots_V1_C_OnTurboBootTick::CallFunc_BreakVector_Z_2' has a wrong offset!");
static_assert(offsetof(HARDWARE_TurboBoots_V1_C_OnTurboBootTick, CallFunc_Add_FloatFloat_ReturnValue) == 0x0000A0, "Member 'HARDWARE_TurboBoots_V1_C_OnTurboBootTick::CallFunc_Add_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(HARDWARE_TurboBoots_V1_C_OnTurboBootTick, CallFunc_BreakVector_X_3) == 0x0000A4, "Member 'HARDWARE_TurboBoots_V1_C_OnTurboBootTick::CallFunc_BreakVector_X_3' has a wrong offset!");
static_assert(offsetof(HARDWARE_TurboBoots_V1_C_OnTurboBootTick, CallFunc_BreakVector_Y_3) == 0x0000A8, "Member 'HARDWARE_TurboBoots_V1_C_OnTurboBootTick::CallFunc_BreakVector_Y_3' has a wrong offset!");
static_assert(offsetof(HARDWARE_TurboBoots_V1_C_OnTurboBootTick, CallFunc_BreakVector_Z_3) == 0x0000AC, "Member 'HARDWARE_TurboBoots_V1_C_OnTurboBootTick::CallFunc_BreakVector_Z_3' has a wrong offset!");
static_assert(offsetof(HARDWARE_TurboBoots_V1_C_OnTurboBootTick, CallFunc_Greater_FloatFloat_ReturnValue) == 0x0000B0, "Member 'HARDWARE_TurboBoots_V1_C_OnTurboBootTick::CallFunc_Greater_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(HARDWARE_TurboBoots_V1_C_OnTurboBootTick, CallFunc_BooleanAND_ReturnValue_1) == 0x0000B1, "Member 'HARDWARE_TurboBoots_V1_C_OnTurboBootTick::CallFunc_BooleanAND_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(HARDWARE_TurboBoots_V1_C_OnTurboBootTick, CallFunc_K2_GetActorLocation_ReturnValue) == 0x0000B4, "Member 'HARDWARE_TurboBoots_V1_C_OnTurboBootTick::CallFunc_K2_GetActorLocation_ReturnValue' has a wrong offset!");
static_assert(offsetof(HARDWARE_TurboBoots_V1_C_OnTurboBootTick, CallFunc_BreakHitResult_bBlockingHit) == 0x0000C0, "Member 'HARDWARE_TurboBoots_V1_C_OnTurboBootTick::CallFunc_BreakHitResult_bBlockingHit' has a wrong offset!");
static_assert(offsetof(HARDWARE_TurboBoots_V1_C_OnTurboBootTick, CallFunc_BreakHitResult_bInitialOverlap) == 0x0000C1, "Member 'HARDWARE_TurboBoots_V1_C_OnTurboBootTick::CallFunc_BreakHitResult_bInitialOverlap' has a wrong offset!");
static_assert(offsetof(HARDWARE_TurboBoots_V1_C_OnTurboBootTick, CallFunc_BreakHitResult_Time) == 0x0000C4, "Member 'HARDWARE_TurboBoots_V1_C_OnTurboBootTick::CallFunc_BreakHitResult_Time' has a wrong offset!");
static_assert(offsetof(HARDWARE_TurboBoots_V1_C_OnTurboBootTick, CallFunc_BreakHitResult_Distance) == 0x0000C8, "Member 'HARDWARE_TurboBoots_V1_C_OnTurboBootTick::CallFunc_BreakHitResult_Distance' has a wrong offset!");
static_assert(offsetof(HARDWARE_TurboBoots_V1_C_OnTurboBootTick, CallFunc_BreakHitResult_Location) == 0x0000CC, "Member 'HARDWARE_TurboBoots_V1_C_OnTurboBootTick::CallFunc_BreakHitResult_Location' has a wrong offset!");
static_assert(offsetof(HARDWARE_TurboBoots_V1_C_OnTurboBootTick, CallFunc_BreakHitResult_ImpactPoint) == 0x0000D8, "Member 'HARDWARE_TurboBoots_V1_C_OnTurboBootTick::CallFunc_BreakHitResult_ImpactPoint' has a wrong offset!");
static_assert(offsetof(HARDWARE_TurboBoots_V1_C_OnTurboBootTick, CallFunc_BreakHitResult_Normal) == 0x0000E4, "Member 'HARDWARE_TurboBoots_V1_C_OnTurboBootTick::CallFunc_BreakHitResult_Normal' has a wrong offset!");
static_assert(offsetof(HARDWARE_TurboBoots_V1_C_OnTurboBootTick, CallFunc_BreakHitResult_ImpactNormal) == 0x0000F0, "Member 'HARDWARE_TurboBoots_V1_C_OnTurboBootTick::CallFunc_BreakHitResult_ImpactNormal' has a wrong offset!");
static_assert(offsetof(HARDWARE_TurboBoots_V1_C_OnTurboBootTick, CallFunc_BreakHitResult_PhysMat) == 0x000100, "Member 'HARDWARE_TurboBoots_V1_C_OnTurboBootTick::CallFunc_BreakHitResult_PhysMat' has a wrong offset!");
static_assert(offsetof(HARDWARE_TurboBoots_V1_C_OnTurboBootTick, CallFunc_BreakHitResult_HitActor) == 0x000108, "Member 'HARDWARE_TurboBoots_V1_C_OnTurboBootTick::CallFunc_BreakHitResult_HitActor' has a wrong offset!");
static_assert(offsetof(HARDWARE_TurboBoots_V1_C_OnTurboBootTick, CallFunc_BreakHitResult_HitComponent) == 0x000110, "Member 'HARDWARE_TurboBoots_V1_C_OnTurboBootTick::CallFunc_BreakHitResult_HitComponent' has a wrong offset!");
static_assert(offsetof(HARDWARE_TurboBoots_V1_C_OnTurboBootTick, CallFunc_BreakHitResult_HitBoneName) == 0x000118, "Member 'HARDWARE_TurboBoots_V1_C_OnTurboBootTick::CallFunc_BreakHitResult_HitBoneName' has a wrong offset!");
static_assert(offsetof(HARDWARE_TurboBoots_V1_C_OnTurboBootTick, CallFunc_BreakHitResult_HitItem) == 0x000120, "Member 'HARDWARE_TurboBoots_V1_C_OnTurboBootTick::CallFunc_BreakHitResult_HitItem' has a wrong offset!");
static_assert(offsetof(HARDWARE_TurboBoots_V1_C_OnTurboBootTick, CallFunc_BreakHitResult_ElementIndex) == 0x000124, "Member 'HARDWARE_TurboBoots_V1_C_OnTurboBootTick::CallFunc_BreakHitResult_ElementIndex' has a wrong offset!");
static_assert(offsetof(HARDWARE_TurboBoots_V1_C_OnTurboBootTick, CallFunc_BreakHitResult_FaceIndex) == 0x000128, "Member 'HARDWARE_TurboBoots_V1_C_OnTurboBootTick::CallFunc_BreakHitResult_FaceIndex' has a wrong offset!");
static_assert(offsetof(HARDWARE_TurboBoots_V1_C_OnTurboBootTick, CallFunc_BreakHitResult_TraceStart) == 0x00012C, "Member 'HARDWARE_TurboBoots_V1_C_OnTurboBootTick::CallFunc_BreakHitResult_TraceStart' has a wrong offset!");
static_assert(offsetof(HARDWARE_TurboBoots_V1_C_OnTurboBootTick, CallFunc_BreakHitResult_TraceEnd) == 0x000138, "Member 'HARDWARE_TurboBoots_V1_C_OnTurboBootTick::CallFunc_BreakHitResult_TraceEnd' has a wrong offset!");
static_assert(offsetof(HARDWARE_TurboBoots_V1_C_OnTurboBootTick, CallFunc_IsFalling_ReturnValue) == 0x000144, "Member 'HARDWARE_TurboBoots_V1_C_OnTurboBootTick::CallFunc_IsFalling_ReturnValue' has a wrong offset!");
static_assert(offsetof(HARDWARE_TurboBoots_V1_C_OnTurboBootTick, CallFunc_Not_PreBool_ReturnValue_1) == 0x000145, "Member 'HARDWARE_TurboBoots_V1_C_OnTurboBootTick::CallFunc_Not_PreBool_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(HARDWARE_TurboBoots_V1_C_OnTurboBootTick, CallFunc_ComputeSurfaceMoveScale_Result) == 0x000148, "Member 'HARDWARE_TurboBoots_V1_C_OnTurboBootTick::CallFunc_ComputeSurfaceMoveScale_Result' has a wrong offset!");
static_assert(offsetof(HARDWARE_TurboBoots_V1_C_OnTurboBootTick, CallFunc_GetOwnerCharacter_Character) == 0x000150, "Member 'HARDWARE_TurboBoots_V1_C_OnTurboBootTick::CallFunc_GetOwnerCharacter_Character' has a wrong offset!");
static_assert(offsetof(HARDWARE_TurboBoots_V1_C_OnTurboBootTick, CallFunc_GetActiveVersionNumber_VersionNumber) == 0x000158, "Member 'HARDWARE_TurboBoots_V1_C_OnTurboBootTick::CallFunc_GetActiveVersionNumber_VersionNumber' has a wrong offset!");
static_assert(offsetof(HARDWARE_TurboBoots_V1_C_OnTurboBootTick, CallFunc_EqualEqual_IntInt_ReturnValue) == 0x00015C, "Member 'HARDWARE_TurboBoots_V1_C_OnTurboBootTick::CallFunc_EqualEqual_IntInt_ReturnValue' has a wrong offset!");

// Function HARDWARE_TurboBoots_V1.HARDWARE_TurboBoots_V1_C.SetWasStandingOnGround
// 0x0001 (0x0001 - 0x0000)
struct HARDWARE_TurboBoots_V1_C_SetWasStandingOnGround final
{
public:
	bool                                          State;                                             // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(HARDWARE_TurboBoots_V1_C_SetWasStandingOnGround) == 0x000001, "Wrong alignment on HARDWARE_TurboBoots_V1_C_SetWasStandingOnGround");
static_assert(sizeof(HARDWARE_TurboBoots_V1_C_SetWasStandingOnGround) == 0x000001, "Wrong size on HARDWARE_TurboBoots_V1_C_SetWasStandingOnGround");
static_assert(offsetof(HARDWARE_TurboBoots_V1_C_SetWasStandingOnGround, State) == 0x000000, "Member 'HARDWARE_TurboBoots_V1_C_SetWasStandingOnGround::State' has a wrong offset!");

// Function HARDWARE_TurboBoots_V1.HARDWARE_TurboBoots_V1_C.GetWasStandingOnGround
// 0x0001 (0x0001 - 0x0000)
struct HARDWARE_TurboBoots_V1_C_GetWasStandingOnGround final
{
public:
	bool                                          Result;                                            // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(HARDWARE_TurboBoots_V1_C_GetWasStandingOnGround) == 0x000001, "Wrong alignment on HARDWARE_TurboBoots_V1_C_GetWasStandingOnGround");
static_assert(sizeof(HARDWARE_TurboBoots_V1_C_GetWasStandingOnGround) == 0x000001, "Wrong size on HARDWARE_TurboBoots_V1_C_GetWasStandingOnGround");
static_assert(offsetof(HARDWARE_TurboBoots_V1_C_GetWasStandingOnGround, Result) == 0x000000, "Member 'HARDWARE_TurboBoots_V1_C_GetWasStandingOnGround::Result' has a wrong offset!");

// Function HARDWARE_TurboBoots_V1.HARDWARE_TurboBoots_V1_C.ComputeSurfaceMoveScale
// 0x0028 (0x0028 - 0x0000)
struct HARDWARE_TurboBoots_V1_C_ComputeSurfaceMoveScale final
{
public:
	float                                         DampingFactor;                                     // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Result;                                            // 0x0004(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         ScaledDampingFactor;                               // 0x0008(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_SignOfFloat_ReturnValue;                  // 0x000C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Abs_ReturnValue;                          // 0x0010(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Ease_ReturnValue;                         // 0x0014(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_MapRangeClamped_ReturnValue;              // 0x0018(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Multiply_FloatFloat_ReturnValue;          // 0x001C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_MapRangeClamped_ReturnValue_1;            // 0x0020(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_FloatFloat_ReturnValue;              // 0x0024(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(HARDWARE_TurboBoots_V1_C_ComputeSurfaceMoveScale) == 0x000004, "Wrong alignment on HARDWARE_TurboBoots_V1_C_ComputeSurfaceMoveScale");
static_assert(sizeof(HARDWARE_TurboBoots_V1_C_ComputeSurfaceMoveScale) == 0x000028, "Wrong size on HARDWARE_TurboBoots_V1_C_ComputeSurfaceMoveScale");
static_assert(offsetof(HARDWARE_TurboBoots_V1_C_ComputeSurfaceMoveScale, DampingFactor) == 0x000000, "Member 'HARDWARE_TurboBoots_V1_C_ComputeSurfaceMoveScale::DampingFactor' has a wrong offset!");
static_assert(offsetof(HARDWARE_TurboBoots_V1_C_ComputeSurfaceMoveScale, Result) == 0x000004, "Member 'HARDWARE_TurboBoots_V1_C_ComputeSurfaceMoveScale::Result' has a wrong offset!");
static_assert(offsetof(HARDWARE_TurboBoots_V1_C_ComputeSurfaceMoveScale, ScaledDampingFactor) == 0x000008, "Member 'HARDWARE_TurboBoots_V1_C_ComputeSurfaceMoveScale::ScaledDampingFactor' has a wrong offset!");
static_assert(offsetof(HARDWARE_TurboBoots_V1_C_ComputeSurfaceMoveScale, CallFunc_SignOfFloat_ReturnValue) == 0x00000C, "Member 'HARDWARE_TurboBoots_V1_C_ComputeSurfaceMoveScale::CallFunc_SignOfFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(HARDWARE_TurboBoots_V1_C_ComputeSurfaceMoveScale, CallFunc_Abs_ReturnValue) == 0x000010, "Member 'HARDWARE_TurboBoots_V1_C_ComputeSurfaceMoveScale::CallFunc_Abs_ReturnValue' has a wrong offset!");
static_assert(offsetof(HARDWARE_TurboBoots_V1_C_ComputeSurfaceMoveScale, CallFunc_Ease_ReturnValue) == 0x000014, "Member 'HARDWARE_TurboBoots_V1_C_ComputeSurfaceMoveScale::CallFunc_Ease_ReturnValue' has a wrong offset!");
static_assert(offsetof(HARDWARE_TurboBoots_V1_C_ComputeSurfaceMoveScale, CallFunc_MapRangeClamped_ReturnValue) == 0x000018, "Member 'HARDWARE_TurboBoots_V1_C_ComputeSurfaceMoveScale::CallFunc_MapRangeClamped_ReturnValue' has a wrong offset!");
static_assert(offsetof(HARDWARE_TurboBoots_V1_C_ComputeSurfaceMoveScale, CallFunc_Multiply_FloatFloat_ReturnValue) == 0x00001C, "Member 'HARDWARE_TurboBoots_V1_C_ComputeSurfaceMoveScale::CallFunc_Multiply_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(HARDWARE_TurboBoots_V1_C_ComputeSurfaceMoveScale, CallFunc_MapRangeClamped_ReturnValue_1) == 0x000020, "Member 'HARDWARE_TurboBoots_V1_C_ComputeSurfaceMoveScale::CallFunc_MapRangeClamped_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(HARDWARE_TurboBoots_V1_C_ComputeSurfaceMoveScale, CallFunc_Less_FloatFloat_ReturnValue) == 0x000024, "Member 'HARDWARE_TurboBoots_V1_C_ComputeSurfaceMoveScale::CallFunc_Less_FloatFloat_ReturnValue' has a wrong offset!");

// Function HARDWARE_TurboBoots_V1.HARDWARE_TurboBoots_V1_C.GetLastSurfaceMoveScale
// 0x0004 (0x0004 - 0x0000)
struct HARDWARE_TurboBoots_V1_C_GetLastSurfaceMoveScale final
{
public:
	float                                         Result;                                            // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(HARDWARE_TurboBoots_V1_C_GetLastSurfaceMoveScale) == 0x000004, "Wrong alignment on HARDWARE_TurboBoots_V1_C_GetLastSurfaceMoveScale");
static_assert(sizeof(HARDWARE_TurboBoots_V1_C_GetLastSurfaceMoveScale) == 0x000004, "Wrong size on HARDWARE_TurboBoots_V1_C_GetLastSurfaceMoveScale");
static_assert(offsetof(HARDWARE_TurboBoots_V1_C_GetLastSurfaceMoveScale, Result) == 0x000000, "Member 'HARDWARE_TurboBoots_V1_C_GetLastSurfaceMoveScale::Result' has a wrong offset!");

// Function HARDWARE_TurboBoots_V1.HARDWARE_TurboBoots_V1_C.GetEnergyDrainTickRate
// 0x0010 (0x0010 - 0x0000)
struct HARDWARE_TurboBoots_V1_C_GetEnergyDrainTickRate final
{
public:
	int32                                         VersionNumber;                                     // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Result;                                            // 0x0004(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_IntInt_ReturnValue;            // 0x0008(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_GetEnergyDrainTickRate_Result;            // 0x000C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(HARDWARE_TurboBoots_V1_C_GetEnergyDrainTickRate) == 0x000004, "Wrong alignment on HARDWARE_TurboBoots_V1_C_GetEnergyDrainTickRate");
static_assert(sizeof(HARDWARE_TurboBoots_V1_C_GetEnergyDrainTickRate) == 0x000010, "Wrong size on HARDWARE_TurboBoots_V1_C_GetEnergyDrainTickRate");
static_assert(offsetof(HARDWARE_TurboBoots_V1_C_GetEnergyDrainTickRate, VersionNumber) == 0x000000, "Member 'HARDWARE_TurboBoots_V1_C_GetEnergyDrainTickRate::VersionNumber' has a wrong offset!");
static_assert(offsetof(HARDWARE_TurboBoots_V1_C_GetEnergyDrainTickRate, Result) == 0x000004, "Member 'HARDWARE_TurboBoots_V1_C_GetEnergyDrainTickRate::Result' has a wrong offset!");
static_assert(offsetof(HARDWARE_TurboBoots_V1_C_GetEnergyDrainTickRate, CallFunc_EqualEqual_IntInt_ReturnValue) == 0x000008, "Member 'HARDWARE_TurboBoots_V1_C_GetEnergyDrainTickRate::CallFunc_EqualEqual_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(HARDWARE_TurboBoots_V1_C_GetEnergyDrainTickRate, CallFunc_GetEnergyDrainTickRate_Result) == 0x00000C, "Member 'HARDWARE_TurboBoots_V1_C_GetEnergyDrainTickRate::CallFunc_GetEnergyDrainTickRate_Result' has a wrong offset!");

}

