#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: CharacterAction

#include "Basic.hpp"

#include "ENUM_ActionPriority_structs.hpp"


namespace SDK::Params
{

// Function CharacterAction.CharacterAction_C.InitializeAction
// 0x0010 (0x0010 - 0x0000)
struct CharacterAction_C_InitializeAction final
{
public:
	class UCOMP_ActionManager_C*                  Manager;                                           // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class APAWN_SystemShockCharacter_C*           Owner;                                             // 0x0008(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(CharacterAction_C_InitializeAction) == 0x000008, "Wrong alignment on CharacterAction_C_InitializeAction");
static_assert(sizeof(CharacterAction_C_InitializeAction) == 0x000010, "Wrong size on CharacterAction_C_InitializeAction");
static_assert(offsetof(CharacterAction_C_InitializeAction, Manager) == 0x000000, "Member 'CharacterAction_C_InitializeAction::Manager' has a wrong offset!");
static_assert(offsetof(CharacterAction_C_InitializeAction, Owner) == 0x000008, "Member 'CharacterAction_C_InitializeAction::Owner' has a wrong offset!");

// Function CharacterAction.CharacterAction_C.IsInterruptibleAtPriority
// 0x0003 (0x0003 - 0x0000)
struct CharacterAction_C_IsInterruptibleAtPriority final
{
public:
	ENUM_ActionPriority                           InterruptPriority;                                 // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Result;                                            // 0x0001(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Greater_ByteByte_ReturnValue;             // 0x0002(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(CharacterAction_C_IsInterruptibleAtPriority) == 0x000001, "Wrong alignment on CharacterAction_C_IsInterruptibleAtPriority");
static_assert(sizeof(CharacterAction_C_IsInterruptibleAtPriority) == 0x000003, "Wrong size on CharacterAction_C_IsInterruptibleAtPriority");
static_assert(offsetof(CharacterAction_C_IsInterruptibleAtPriority, InterruptPriority) == 0x000000, "Member 'CharacterAction_C_IsInterruptibleAtPriority::InterruptPriority' has a wrong offset!");
static_assert(offsetof(CharacterAction_C_IsInterruptibleAtPriority, Result) == 0x000001, "Member 'CharacterAction_C_IsInterruptibleAtPriority::Result' has a wrong offset!");
static_assert(offsetof(CharacterAction_C_IsInterruptibleAtPriority, CallFunc_Greater_ByteByte_ReturnValue) == 0x000002, "Member 'CharacterAction_C_IsInterruptibleAtPriority::CallFunc_Greater_ByteByte_ReturnValue' has a wrong offset!");

// Function CharacterAction.CharacterAction_C.PlayMontage
// 0x0020 (0x0020 - 0x0000)
struct CharacterAction_C_PlayMontage final
{
public:
	float                                         PlayRate;                                          // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         MontageDuration_0;                                 // 0x0004(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class USkeletalMeshComponent*                 CallFunc_GetActionMeshComponent_SkeletalMeshComponent; // 0x0008(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UAnimInstance*                          CallFunc_GetAnimInstance_ReturnValue;              // 0x0010(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Montage_Play_ReturnValue;                 // 0x0018(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x001C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(CharacterAction_C_PlayMontage) == 0x000008, "Wrong alignment on CharacterAction_C_PlayMontage");
static_assert(sizeof(CharacterAction_C_PlayMontage) == 0x000020, "Wrong size on CharacterAction_C_PlayMontage");
static_assert(offsetof(CharacterAction_C_PlayMontage, PlayRate) == 0x000000, "Member 'CharacterAction_C_PlayMontage::PlayRate' has a wrong offset!");
static_assert(offsetof(CharacterAction_C_PlayMontage, MontageDuration_0) == 0x000004, "Member 'CharacterAction_C_PlayMontage::MontageDuration_0' has a wrong offset!");
static_assert(offsetof(CharacterAction_C_PlayMontage, CallFunc_GetActionMeshComponent_SkeletalMeshComponent) == 0x000008, "Member 'CharacterAction_C_PlayMontage::CallFunc_GetActionMeshComponent_SkeletalMeshComponent' has a wrong offset!");
static_assert(offsetof(CharacterAction_C_PlayMontage, CallFunc_GetAnimInstance_ReturnValue) == 0x000010, "Member 'CharacterAction_C_PlayMontage::CallFunc_GetAnimInstance_ReturnValue' has a wrong offset!");
static_assert(offsetof(CharacterAction_C_PlayMontage, CallFunc_Montage_Play_ReturnValue) == 0x000018, "Member 'CharacterAction_C_PlayMontage::CallFunc_Montage_Play_ReturnValue' has a wrong offset!");
static_assert(offsetof(CharacterAction_C_PlayMontage, CallFunc_IsValid_ReturnValue) == 0x00001C, "Member 'CharacterAction_C_PlayMontage::CallFunc_IsValid_ReturnValue' has a wrong offset!");

// Function CharacterAction.CharacterAction_C.ResumeMontage
// 0x0040 (0x0040 - 0x0000)
struct CharacterAction_C_ResumeMontage final
{
public:
	float                                         PlayRate;                                          // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         MontageDuration_0;                                 // 0x0004(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         StartTime;                                         // 0x0008(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UAnimInstance*                          AnimInstance;                                      // 0x0010(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0018(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_GreaterEqual_FloatFloat_ReturnValue;      // 0x0019(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_1A[0x2];                                       // 0x001A(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_GetElapsedPlayTime_Result;                // 0x001C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Montage_Play_ReturnValue;                 // 0x0020(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Montage_IsPlaying_ReturnValue;            // 0x0024(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsValid_ReturnValue_1;                    // 0x0025(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Not_PreBool_ReturnValue;                  // 0x0026(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_27[0x1];                                       // 0x0027(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_Subtract_FloatFloat_ReturnValue;          // 0x0028(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_2C[0x4];                                       // 0x002C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class USkeletalMeshComponent*                 CallFunc_GetActionMeshComponent_SkeletalMeshComponent; // 0x0030(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UAnimInstance*                          CallFunc_GetAnimInstance_ReturnValue;              // 0x0038(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(CharacterAction_C_ResumeMontage) == 0x000008, "Wrong alignment on CharacterAction_C_ResumeMontage");
static_assert(sizeof(CharacterAction_C_ResumeMontage) == 0x000040, "Wrong size on CharacterAction_C_ResumeMontage");
static_assert(offsetof(CharacterAction_C_ResumeMontage, PlayRate) == 0x000000, "Member 'CharacterAction_C_ResumeMontage::PlayRate' has a wrong offset!");
static_assert(offsetof(CharacterAction_C_ResumeMontage, MontageDuration_0) == 0x000004, "Member 'CharacterAction_C_ResumeMontage::MontageDuration_0' has a wrong offset!");
static_assert(offsetof(CharacterAction_C_ResumeMontage, StartTime) == 0x000008, "Member 'CharacterAction_C_ResumeMontage::StartTime' has a wrong offset!");
static_assert(offsetof(CharacterAction_C_ResumeMontage, AnimInstance) == 0x000010, "Member 'CharacterAction_C_ResumeMontage::AnimInstance' has a wrong offset!");
static_assert(offsetof(CharacterAction_C_ResumeMontage, CallFunc_IsValid_ReturnValue) == 0x000018, "Member 'CharacterAction_C_ResumeMontage::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(CharacterAction_C_ResumeMontage, CallFunc_GreaterEqual_FloatFloat_ReturnValue) == 0x000019, "Member 'CharacterAction_C_ResumeMontage::CallFunc_GreaterEqual_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(CharacterAction_C_ResumeMontage, CallFunc_GetElapsedPlayTime_Result) == 0x00001C, "Member 'CharacterAction_C_ResumeMontage::CallFunc_GetElapsedPlayTime_Result' has a wrong offset!");
static_assert(offsetof(CharacterAction_C_ResumeMontage, CallFunc_Montage_Play_ReturnValue) == 0x000020, "Member 'CharacterAction_C_ResumeMontage::CallFunc_Montage_Play_ReturnValue' has a wrong offset!");
static_assert(offsetof(CharacterAction_C_ResumeMontage, CallFunc_Montage_IsPlaying_ReturnValue) == 0x000024, "Member 'CharacterAction_C_ResumeMontage::CallFunc_Montage_IsPlaying_ReturnValue' has a wrong offset!");
static_assert(offsetof(CharacterAction_C_ResumeMontage, CallFunc_IsValid_ReturnValue_1) == 0x000025, "Member 'CharacterAction_C_ResumeMontage::CallFunc_IsValid_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(CharacterAction_C_ResumeMontage, CallFunc_Not_PreBool_ReturnValue) == 0x000026, "Member 'CharacterAction_C_ResumeMontage::CallFunc_Not_PreBool_ReturnValue' has a wrong offset!");
static_assert(offsetof(CharacterAction_C_ResumeMontage, CallFunc_Subtract_FloatFloat_ReturnValue) == 0x000028, "Member 'CharacterAction_C_ResumeMontage::CallFunc_Subtract_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(CharacterAction_C_ResumeMontage, CallFunc_GetActionMeshComponent_SkeletalMeshComponent) == 0x000030, "Member 'CharacterAction_C_ResumeMontage::CallFunc_GetActionMeshComponent_SkeletalMeshComponent' has a wrong offset!");
static_assert(offsetof(CharacterAction_C_ResumeMontage, CallFunc_GetAnimInstance_ReturnValue) == 0x000038, "Member 'CharacterAction_C_ResumeMontage::CallFunc_GetAnimInstance_ReturnValue' has a wrong offset!");

// Function CharacterAction.CharacterAction_C.StopMontage
// 0x0028 (0x0028 - 0x0000)
struct CharacterAction_C_StopMontage final
{
public:
	float                                         BlendOutTime;                                      // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UAnimInstance*                          AnimInstance;                                      // 0x0008(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0010(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsValid_ReturnValue_1;                    // 0x0011(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_12[0x6];                                       // 0x0012(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class USkeletalMeshComponent*                 CallFunc_GetActionMeshComponent_SkeletalMeshComponent; // 0x0018(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UAnimInstance*                          CallFunc_GetAnimInstance_ReturnValue;              // 0x0020(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(CharacterAction_C_StopMontage) == 0x000008, "Wrong alignment on CharacterAction_C_StopMontage");
static_assert(sizeof(CharacterAction_C_StopMontage) == 0x000028, "Wrong size on CharacterAction_C_StopMontage");
static_assert(offsetof(CharacterAction_C_StopMontage, BlendOutTime) == 0x000000, "Member 'CharacterAction_C_StopMontage::BlendOutTime' has a wrong offset!");
static_assert(offsetof(CharacterAction_C_StopMontage, AnimInstance) == 0x000008, "Member 'CharacterAction_C_StopMontage::AnimInstance' has a wrong offset!");
static_assert(offsetof(CharacterAction_C_StopMontage, CallFunc_IsValid_ReturnValue) == 0x000010, "Member 'CharacterAction_C_StopMontage::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(CharacterAction_C_StopMontage, CallFunc_IsValid_ReturnValue_1) == 0x000011, "Member 'CharacterAction_C_StopMontage::CallFunc_IsValid_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(CharacterAction_C_StopMontage, CallFunc_GetActionMeshComponent_SkeletalMeshComponent) == 0x000018, "Member 'CharacterAction_C_StopMontage::CallFunc_GetActionMeshComponent_SkeletalMeshComponent' has a wrong offset!");
static_assert(offsetof(CharacterAction_C_StopMontage, CallFunc_GetAnimInstance_ReturnValue) == 0x000020, "Member 'CharacterAction_C_StopMontage::CallFunc_GetAnimInstance_ReturnValue' has a wrong offset!");

// Function CharacterAction.CharacterAction_C.SetMontageWithPriority
// 0x0010 (0x0010 - 0x0000)
struct CharacterAction_C_SetMontageWithPriority final
{
public:
	class UAnimMontage*                           Montage_0;                                         // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ENUM_ActionPriority                           Priority_0;                                        // 0x0008(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(CharacterAction_C_SetMontageWithPriority) == 0x000008, "Wrong alignment on CharacterAction_C_SetMontageWithPriority");
static_assert(sizeof(CharacterAction_C_SetMontageWithPriority) == 0x000010, "Wrong size on CharacterAction_C_SetMontageWithPriority");
static_assert(offsetof(CharacterAction_C_SetMontageWithPriority, Montage_0) == 0x000000, "Member 'CharacterAction_C_SetMontageWithPriority::Montage_0' has a wrong offset!");
static_assert(offsetof(CharacterAction_C_SetMontageWithPriority, Priority_0) == 0x000008, "Member 'CharacterAction_C_SetMontageWithPriority::Priority_0' has a wrong offset!");

// Function CharacterAction.CharacterAction_C.SetElapsedTime
// 0x0008 (0x0008 - 0x0000)
struct CharacterAction_C_SetElapsedTime final
{
public:
	float                                         NewElapsedTime;                                    // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          IsFinished;                                        // 0x0004(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_GreaterEqual_FloatFloat_ReturnValue;      // 0x0005(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(CharacterAction_C_SetElapsedTime) == 0x000004, "Wrong alignment on CharacterAction_C_SetElapsedTime");
static_assert(sizeof(CharacterAction_C_SetElapsedTime) == 0x000008, "Wrong size on CharacterAction_C_SetElapsedTime");
static_assert(offsetof(CharacterAction_C_SetElapsedTime, NewElapsedTime) == 0x000000, "Member 'CharacterAction_C_SetElapsedTime::NewElapsedTime' has a wrong offset!");
static_assert(offsetof(CharacterAction_C_SetElapsedTime, IsFinished) == 0x000004, "Member 'CharacterAction_C_SetElapsedTime::IsFinished' has a wrong offset!");
static_assert(offsetof(CharacterAction_C_SetElapsedTime, CallFunc_GreaterEqual_FloatFloat_ReturnValue) == 0x000005, "Member 'CharacterAction_C_SetElapsedTime::CallFunc_GreaterEqual_FloatFloat_ReturnValue' has a wrong offset!");

// Function CharacterAction.CharacterAction_C.GetElapsedPlayTime
// 0x0004 (0x0004 - 0x0000)
struct CharacterAction_C_GetElapsedPlayTime final
{
public:
	float                                         Result;                                            // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(CharacterAction_C_GetElapsedPlayTime) == 0x000004, "Wrong alignment on CharacterAction_C_GetElapsedPlayTime");
static_assert(sizeof(CharacterAction_C_GetElapsedPlayTime) == 0x000004, "Wrong size on CharacterAction_C_GetElapsedPlayTime");
static_assert(offsetof(CharacterAction_C_GetElapsedPlayTime, Result) == 0x000000, "Member 'CharacterAction_C_GetElapsedPlayTime::Result' has a wrong offset!");

// Function CharacterAction.CharacterAction_C.GetProgress
// 0x000C (0x000C - 0x0000)
struct CharacterAction_C_GetProgress final
{
public:
	float                                         Progress;                                          // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Divide_FloatFloat_ReturnValue;            // 0x0004(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Greater_FloatFloat_ReturnValue;           // 0x0008(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(CharacterAction_C_GetProgress) == 0x000004, "Wrong alignment on CharacterAction_C_GetProgress");
static_assert(sizeof(CharacterAction_C_GetProgress) == 0x00000C, "Wrong size on CharacterAction_C_GetProgress");
static_assert(offsetof(CharacterAction_C_GetProgress, Progress) == 0x000000, "Member 'CharacterAction_C_GetProgress::Progress' has a wrong offset!");
static_assert(offsetof(CharacterAction_C_GetProgress, CallFunc_Divide_FloatFloat_ReturnValue) == 0x000004, "Member 'CharacterAction_C_GetProgress::CallFunc_Divide_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(CharacterAction_C_GetProgress, CallFunc_Greater_FloatFloat_ReturnValue) == 0x000008, "Member 'CharacterAction_C_GetProgress::CallFunc_Greater_FloatFloat_ReturnValue' has a wrong offset!");

// Function CharacterAction.CharacterAction_C.IsActive
// 0x0004 (0x0004 - 0x0000)
struct CharacterAction_C_IsActive final
{
public:
	bool                                          Result;                                            // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Greater_FloatFloat_ReturnValue;           // 0x0001(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_GreaterEqual_FloatFloat_ReturnValue;      // 0x0002(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BooleanAND_ReturnValue;                   // 0x0003(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(CharacterAction_C_IsActive) == 0x000001, "Wrong alignment on CharacterAction_C_IsActive");
static_assert(sizeof(CharacterAction_C_IsActive) == 0x000004, "Wrong size on CharacterAction_C_IsActive");
static_assert(offsetof(CharacterAction_C_IsActive, Result) == 0x000000, "Member 'CharacterAction_C_IsActive::Result' has a wrong offset!");
static_assert(offsetof(CharacterAction_C_IsActive, CallFunc_Greater_FloatFloat_ReturnValue) == 0x000001, "Member 'CharacterAction_C_IsActive::CallFunc_Greater_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(CharacterAction_C_IsActive, CallFunc_GreaterEqual_FloatFloat_ReturnValue) == 0x000002, "Member 'CharacterAction_C_IsActive::CallFunc_GreaterEqual_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(CharacterAction_C_IsActive, CallFunc_BooleanAND_ReturnValue) == 0x000003, "Member 'CharacterAction_C_IsActive::CallFunc_BooleanAND_ReturnValue' has a wrong offset!");

// Function CharacterAction.CharacterAction_C.GetMontage
// 0x0008 (0x0008 - 0x0000)
struct CharacterAction_C_GetMontage final
{
public:
	class UAnimMontage*                           Result;                                            // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(CharacterAction_C_GetMontage) == 0x000008, "Wrong alignment on CharacterAction_C_GetMontage");
static_assert(sizeof(CharacterAction_C_GetMontage) == 0x000008, "Wrong size on CharacterAction_C_GetMontage");
static_assert(offsetof(CharacterAction_C_GetMontage, Result) == 0x000000, "Member 'CharacterAction_C_GetMontage::Result' has a wrong offset!");

// Function CharacterAction.CharacterAction_C.GetPriority
// 0x0001 (0x0001 - 0x0000)
struct CharacterAction_C_GetPriority final
{
public:
	ENUM_ActionPriority                           Result;                                            // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(CharacterAction_C_GetPriority) == 0x000001, "Wrong alignment on CharacterAction_C_GetPriority");
static_assert(sizeof(CharacterAction_C_GetPriority) == 0x000001, "Wrong size on CharacterAction_C_GetPriority");
static_assert(offsetof(CharacterAction_C_GetPriority, Result) == 0x000000, "Member 'CharacterAction_C_GetPriority::Result' has a wrong offset!");

// Function CharacterAction.CharacterAction_C.SetPriority
// 0x0028 (0x0028 - 0x0000)
struct CharacterAction_C_SetPriority final
{
public:
	ENUM_ActionPriority                           NewPriority;                                       // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UCharacterAction_C*                     CallFunc_GetCurrentAction_CurrentAction;           // 0x0008(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_HasQueuedAction_Result;                   // 0x0010(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_EqualEqual_ObjectObject_ReturnValue;      // 0x0011(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_12[0x6];                                       // 0x0012(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class UCharacterAction_C*                     CallFunc_GetCurrentAction_CurrentAction_1;         // 0x0018(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0020(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(CharacterAction_C_SetPriority) == 0x000008, "Wrong alignment on CharacterAction_C_SetPriority");
static_assert(sizeof(CharacterAction_C_SetPriority) == 0x000028, "Wrong size on CharacterAction_C_SetPriority");
static_assert(offsetof(CharacterAction_C_SetPriority, NewPriority) == 0x000000, "Member 'CharacterAction_C_SetPriority::NewPriority' has a wrong offset!");
static_assert(offsetof(CharacterAction_C_SetPriority, CallFunc_GetCurrentAction_CurrentAction) == 0x000008, "Member 'CharacterAction_C_SetPriority::CallFunc_GetCurrentAction_CurrentAction' has a wrong offset!");
static_assert(offsetof(CharacterAction_C_SetPriority, CallFunc_HasQueuedAction_Result) == 0x000010, "Member 'CharacterAction_C_SetPriority::CallFunc_HasQueuedAction_Result' has a wrong offset!");
static_assert(offsetof(CharacterAction_C_SetPriority, CallFunc_EqualEqual_ObjectObject_ReturnValue) == 0x000011, "Member 'CharacterAction_C_SetPriority::CallFunc_EqualEqual_ObjectObject_ReturnValue' has a wrong offset!");
static_assert(offsetof(CharacterAction_C_SetPriority, CallFunc_GetCurrentAction_CurrentAction_1) == 0x000018, "Member 'CharacterAction_C_SetPriority::CallFunc_GetCurrentAction_CurrentAction_1' has a wrong offset!");
static_assert(offsetof(CharacterAction_C_SetPriority, CallFunc_IsValid_ReturnValue) == 0x000020, "Member 'CharacterAction_C_SetPriority::CallFunc_IsValid_ReturnValue' has a wrong offset!");

}

