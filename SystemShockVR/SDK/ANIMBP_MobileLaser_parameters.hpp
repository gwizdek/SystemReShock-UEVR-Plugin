#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: ANIMBP_MobileLaser

#include "Basic.hpp"

#include "CoreUObject_structs.hpp"
#include "ENUM_DeathBlowType_structs.hpp"
#include "ENUM_Emotions_structs.hpp"
#include "Engine_structs.hpp"


namespace SDK::Params
{

// Function ANIMBP_MobileLaser.ANIMBP_MobileLaser_C.ExecuteUbergraph_ANIMBP_MobileLaser
// 0x0140 (0x0140 - 0x0000)
struct ANIMBP_MobileLaser_C_ExecuteUbergraph_ANIMBP_MobileLaser final
{
public:
	int32                                         EntryPoint;                                        // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FFloatSpringState                      Temp_wildcard_Variable;                            // 0x0004(0x0008)(NoDestructor)
	int32                                         Temp_int_Variable;                                 // 0x000C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue;                   // 0x0010(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Temp_float_Variable;                               // 0x0014(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               CallFunc_K2_GetComponentRotation_ReturnValue;      // 0x0018(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FVector                                CallFunc_GetForwardVector_ReturnValue;             // 0x0024(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_K2_GetComponentLocation_ReturnValue;      // 0x0030(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Temp_float_Variable_1;                             // 0x003C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FFloatSpringState                      Temp_wildcard_Variable_1;                          // 0x0040(0x0008)(NoDestructor)
	float                                         CallFunc_BreakVector_X;                            // 0x0048(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector_Y;                            // 0x004C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector_Z;                            // 0x0050(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         K2Node_Event_DeltaTimeX;                           // 0x0054(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0058(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_59[0x7];                                       // 0x0059(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class APawn*                                  CallFunc_TryGetPawnOwner_ReturnValue;              // 0x0060(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class APAWN_Enemy_C*                          K2Node_DynamicCast_AsPAWN_Enemy;                   // 0x0068(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0070(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_71[0x3];                                       // 0x0071(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         Temp_float_Variable_2;                             // 0x0074(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_K2_GetComponentLocation_ReturnValue_1;    // 0x0078(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               CallFunc_K2_GetComponentRotation_ReturnValue_1;    // 0x0084(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsValid_ReturnValue_1;                    // 0x0090(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_91[0x3];                                       // 0x0091(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_Multiply_FloatFloat_ReturnValue;          // 0x0094(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_SafeDivide_ReturnValue;                   // 0x0098(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_SafeDivide_ReturnValue_1;                 // 0x009C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Add_FloatFloat_ReturnValue;               // 0x00A0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Subtract_VectorVector_ReturnValue;        // 0x00A4(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Subtract_FloatFloat_ReturnValue;          // 0x00B0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Dot_VectorVector_ReturnValue;             // 0x00B4(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_FWrap_ReturnValue;                        // 0x00B8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_SignOfFloat_ReturnValue;                  // 0x00BC(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_VSize_ReturnValue;                        // 0x00C0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Add_FloatFloat_ReturnValue_1;             // 0x00C4(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Multiply_FloatFloat_ReturnValue_1;        // 0x00C8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Add_FloatFloat_ReturnValue_2;             // 0x00CC(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_FWrap_ReturnValue_1;                      // 0x00D0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               CallFunc_NormalizedDeltaRotator_ReturnValue;       // 0x00D4(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                         CallFunc_BreakRotator_Roll;                        // 0x00E0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakRotator_Pitch;                       // 0x00E4(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakRotator_Yaw;                         // 0x00E8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_UpdateLeanParameters_IterationCount;      // 0x00EC(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_UpdateLeanParameters_LinearSpeed;         // 0x00F0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_UpdateLeanParameters_AngularSpeed;        // 0x00F4(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Subtract_IntInt_ReturnValue;              // 0x00F8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Temp_float_Variable_3;                             // 0x00FC(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_LessEqual_IntInt_ReturnValue;             // 0x0100(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_101[0x3];                                      // 0x0101(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_WeightedMovingAverage_Float_ReturnValue;  // 0x0104(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_WeightedMovingAverage_Float_ReturnValue_1; // 0x0108(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Subtract_FloatFloat_ReturnValue_1;        // 0x010C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Multiply_FloatFloat_ReturnValue_2;        // 0x0110(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Subtract_FloatFloat_ReturnValue_2;        // 0x0114(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_FloatSpringInterp_ReturnValue;            // 0x0118(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Multiply_FloatFloat_ReturnValue_3;        // 0x011C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_FClamp_ReturnValue;                       // 0x0120(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_FClamp_ReturnValue_1;                     // 0x0124(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Add_FloatFloat_ReturnValue_3;             // 0x0128(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_FloatSpringInterp_ReturnValue_1;          // 0x012C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_FClamp_ReturnValue_2;                     // 0x0130(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Add_FloatFloat_ReturnValue_4;             // 0x0134(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Divide_FloatFloat_ReturnValue;            // 0x0138(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(ANIMBP_MobileLaser_C_ExecuteUbergraph_ANIMBP_MobileLaser) == 0x000008, "Wrong alignment on ANIMBP_MobileLaser_C_ExecuteUbergraph_ANIMBP_MobileLaser");
static_assert(sizeof(ANIMBP_MobileLaser_C_ExecuteUbergraph_ANIMBP_MobileLaser) == 0x000140, "Wrong size on ANIMBP_MobileLaser_C_ExecuteUbergraph_ANIMBP_MobileLaser");
static_assert(offsetof(ANIMBP_MobileLaser_C_ExecuteUbergraph_ANIMBP_MobileLaser, EntryPoint) == 0x000000, "Member 'ANIMBP_MobileLaser_C_ExecuteUbergraph_ANIMBP_MobileLaser::EntryPoint' has a wrong offset!");
static_assert(offsetof(ANIMBP_MobileLaser_C_ExecuteUbergraph_ANIMBP_MobileLaser, Temp_wildcard_Variable) == 0x000004, "Member 'ANIMBP_MobileLaser_C_ExecuteUbergraph_ANIMBP_MobileLaser::Temp_wildcard_Variable' has a wrong offset!");
static_assert(offsetof(ANIMBP_MobileLaser_C_ExecuteUbergraph_ANIMBP_MobileLaser, Temp_int_Variable) == 0x00000C, "Member 'ANIMBP_MobileLaser_C_ExecuteUbergraph_ANIMBP_MobileLaser::Temp_int_Variable' has a wrong offset!");
static_assert(offsetof(ANIMBP_MobileLaser_C_ExecuteUbergraph_ANIMBP_MobileLaser, CallFunc_Add_IntInt_ReturnValue) == 0x000010, "Member 'ANIMBP_MobileLaser_C_ExecuteUbergraph_ANIMBP_MobileLaser::CallFunc_Add_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(ANIMBP_MobileLaser_C_ExecuteUbergraph_ANIMBP_MobileLaser, Temp_float_Variable) == 0x000014, "Member 'ANIMBP_MobileLaser_C_ExecuteUbergraph_ANIMBP_MobileLaser::Temp_float_Variable' has a wrong offset!");
static_assert(offsetof(ANIMBP_MobileLaser_C_ExecuteUbergraph_ANIMBP_MobileLaser, CallFunc_K2_GetComponentRotation_ReturnValue) == 0x000018, "Member 'ANIMBP_MobileLaser_C_ExecuteUbergraph_ANIMBP_MobileLaser::CallFunc_K2_GetComponentRotation_ReturnValue' has a wrong offset!");
static_assert(offsetof(ANIMBP_MobileLaser_C_ExecuteUbergraph_ANIMBP_MobileLaser, CallFunc_GetForwardVector_ReturnValue) == 0x000024, "Member 'ANIMBP_MobileLaser_C_ExecuteUbergraph_ANIMBP_MobileLaser::CallFunc_GetForwardVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(ANIMBP_MobileLaser_C_ExecuteUbergraph_ANIMBP_MobileLaser, CallFunc_K2_GetComponentLocation_ReturnValue) == 0x000030, "Member 'ANIMBP_MobileLaser_C_ExecuteUbergraph_ANIMBP_MobileLaser::CallFunc_K2_GetComponentLocation_ReturnValue' has a wrong offset!");
static_assert(offsetof(ANIMBP_MobileLaser_C_ExecuteUbergraph_ANIMBP_MobileLaser, Temp_float_Variable_1) == 0x00003C, "Member 'ANIMBP_MobileLaser_C_ExecuteUbergraph_ANIMBP_MobileLaser::Temp_float_Variable_1' has a wrong offset!");
static_assert(offsetof(ANIMBP_MobileLaser_C_ExecuteUbergraph_ANIMBP_MobileLaser, Temp_wildcard_Variable_1) == 0x000040, "Member 'ANIMBP_MobileLaser_C_ExecuteUbergraph_ANIMBP_MobileLaser::Temp_wildcard_Variable_1' has a wrong offset!");
static_assert(offsetof(ANIMBP_MobileLaser_C_ExecuteUbergraph_ANIMBP_MobileLaser, CallFunc_BreakVector_X) == 0x000048, "Member 'ANIMBP_MobileLaser_C_ExecuteUbergraph_ANIMBP_MobileLaser::CallFunc_BreakVector_X' has a wrong offset!");
static_assert(offsetof(ANIMBP_MobileLaser_C_ExecuteUbergraph_ANIMBP_MobileLaser, CallFunc_BreakVector_Y) == 0x00004C, "Member 'ANIMBP_MobileLaser_C_ExecuteUbergraph_ANIMBP_MobileLaser::CallFunc_BreakVector_Y' has a wrong offset!");
static_assert(offsetof(ANIMBP_MobileLaser_C_ExecuteUbergraph_ANIMBP_MobileLaser, CallFunc_BreakVector_Z) == 0x000050, "Member 'ANIMBP_MobileLaser_C_ExecuteUbergraph_ANIMBP_MobileLaser::CallFunc_BreakVector_Z' has a wrong offset!");
static_assert(offsetof(ANIMBP_MobileLaser_C_ExecuteUbergraph_ANIMBP_MobileLaser, K2Node_Event_DeltaTimeX) == 0x000054, "Member 'ANIMBP_MobileLaser_C_ExecuteUbergraph_ANIMBP_MobileLaser::K2Node_Event_DeltaTimeX' has a wrong offset!");
static_assert(offsetof(ANIMBP_MobileLaser_C_ExecuteUbergraph_ANIMBP_MobileLaser, CallFunc_IsValid_ReturnValue) == 0x000058, "Member 'ANIMBP_MobileLaser_C_ExecuteUbergraph_ANIMBP_MobileLaser::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(ANIMBP_MobileLaser_C_ExecuteUbergraph_ANIMBP_MobileLaser, CallFunc_TryGetPawnOwner_ReturnValue) == 0x000060, "Member 'ANIMBP_MobileLaser_C_ExecuteUbergraph_ANIMBP_MobileLaser::CallFunc_TryGetPawnOwner_ReturnValue' has a wrong offset!");
static_assert(offsetof(ANIMBP_MobileLaser_C_ExecuteUbergraph_ANIMBP_MobileLaser, K2Node_DynamicCast_AsPAWN_Enemy) == 0x000068, "Member 'ANIMBP_MobileLaser_C_ExecuteUbergraph_ANIMBP_MobileLaser::K2Node_DynamicCast_AsPAWN_Enemy' has a wrong offset!");
static_assert(offsetof(ANIMBP_MobileLaser_C_ExecuteUbergraph_ANIMBP_MobileLaser, K2Node_DynamicCast_bSuccess) == 0x000070, "Member 'ANIMBP_MobileLaser_C_ExecuteUbergraph_ANIMBP_MobileLaser::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(ANIMBP_MobileLaser_C_ExecuteUbergraph_ANIMBP_MobileLaser, Temp_float_Variable_2) == 0x000074, "Member 'ANIMBP_MobileLaser_C_ExecuteUbergraph_ANIMBP_MobileLaser::Temp_float_Variable_2' has a wrong offset!");
static_assert(offsetof(ANIMBP_MobileLaser_C_ExecuteUbergraph_ANIMBP_MobileLaser, CallFunc_K2_GetComponentLocation_ReturnValue_1) == 0x000078, "Member 'ANIMBP_MobileLaser_C_ExecuteUbergraph_ANIMBP_MobileLaser::CallFunc_K2_GetComponentLocation_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(ANIMBP_MobileLaser_C_ExecuteUbergraph_ANIMBP_MobileLaser, CallFunc_K2_GetComponentRotation_ReturnValue_1) == 0x000084, "Member 'ANIMBP_MobileLaser_C_ExecuteUbergraph_ANIMBP_MobileLaser::CallFunc_K2_GetComponentRotation_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(ANIMBP_MobileLaser_C_ExecuteUbergraph_ANIMBP_MobileLaser, CallFunc_IsValid_ReturnValue_1) == 0x000090, "Member 'ANIMBP_MobileLaser_C_ExecuteUbergraph_ANIMBP_MobileLaser::CallFunc_IsValid_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(ANIMBP_MobileLaser_C_ExecuteUbergraph_ANIMBP_MobileLaser, CallFunc_Multiply_FloatFloat_ReturnValue) == 0x000094, "Member 'ANIMBP_MobileLaser_C_ExecuteUbergraph_ANIMBP_MobileLaser::CallFunc_Multiply_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(ANIMBP_MobileLaser_C_ExecuteUbergraph_ANIMBP_MobileLaser, CallFunc_SafeDivide_ReturnValue) == 0x000098, "Member 'ANIMBP_MobileLaser_C_ExecuteUbergraph_ANIMBP_MobileLaser::CallFunc_SafeDivide_ReturnValue' has a wrong offset!");
static_assert(offsetof(ANIMBP_MobileLaser_C_ExecuteUbergraph_ANIMBP_MobileLaser, CallFunc_SafeDivide_ReturnValue_1) == 0x00009C, "Member 'ANIMBP_MobileLaser_C_ExecuteUbergraph_ANIMBP_MobileLaser::CallFunc_SafeDivide_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(ANIMBP_MobileLaser_C_ExecuteUbergraph_ANIMBP_MobileLaser, CallFunc_Add_FloatFloat_ReturnValue) == 0x0000A0, "Member 'ANIMBP_MobileLaser_C_ExecuteUbergraph_ANIMBP_MobileLaser::CallFunc_Add_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(ANIMBP_MobileLaser_C_ExecuteUbergraph_ANIMBP_MobileLaser, CallFunc_Subtract_VectorVector_ReturnValue) == 0x0000A4, "Member 'ANIMBP_MobileLaser_C_ExecuteUbergraph_ANIMBP_MobileLaser::CallFunc_Subtract_VectorVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(ANIMBP_MobileLaser_C_ExecuteUbergraph_ANIMBP_MobileLaser, CallFunc_Subtract_FloatFloat_ReturnValue) == 0x0000B0, "Member 'ANIMBP_MobileLaser_C_ExecuteUbergraph_ANIMBP_MobileLaser::CallFunc_Subtract_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(ANIMBP_MobileLaser_C_ExecuteUbergraph_ANIMBP_MobileLaser, CallFunc_Dot_VectorVector_ReturnValue) == 0x0000B4, "Member 'ANIMBP_MobileLaser_C_ExecuteUbergraph_ANIMBP_MobileLaser::CallFunc_Dot_VectorVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(ANIMBP_MobileLaser_C_ExecuteUbergraph_ANIMBP_MobileLaser, CallFunc_FWrap_ReturnValue) == 0x0000B8, "Member 'ANIMBP_MobileLaser_C_ExecuteUbergraph_ANIMBP_MobileLaser::CallFunc_FWrap_ReturnValue' has a wrong offset!");
static_assert(offsetof(ANIMBP_MobileLaser_C_ExecuteUbergraph_ANIMBP_MobileLaser, CallFunc_SignOfFloat_ReturnValue) == 0x0000BC, "Member 'ANIMBP_MobileLaser_C_ExecuteUbergraph_ANIMBP_MobileLaser::CallFunc_SignOfFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(ANIMBP_MobileLaser_C_ExecuteUbergraph_ANIMBP_MobileLaser, CallFunc_VSize_ReturnValue) == 0x0000C0, "Member 'ANIMBP_MobileLaser_C_ExecuteUbergraph_ANIMBP_MobileLaser::CallFunc_VSize_ReturnValue' has a wrong offset!");
static_assert(offsetof(ANIMBP_MobileLaser_C_ExecuteUbergraph_ANIMBP_MobileLaser, CallFunc_Add_FloatFloat_ReturnValue_1) == 0x0000C4, "Member 'ANIMBP_MobileLaser_C_ExecuteUbergraph_ANIMBP_MobileLaser::CallFunc_Add_FloatFloat_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(ANIMBP_MobileLaser_C_ExecuteUbergraph_ANIMBP_MobileLaser, CallFunc_Multiply_FloatFloat_ReturnValue_1) == 0x0000C8, "Member 'ANIMBP_MobileLaser_C_ExecuteUbergraph_ANIMBP_MobileLaser::CallFunc_Multiply_FloatFloat_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(ANIMBP_MobileLaser_C_ExecuteUbergraph_ANIMBP_MobileLaser, CallFunc_Add_FloatFloat_ReturnValue_2) == 0x0000CC, "Member 'ANIMBP_MobileLaser_C_ExecuteUbergraph_ANIMBP_MobileLaser::CallFunc_Add_FloatFloat_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(ANIMBP_MobileLaser_C_ExecuteUbergraph_ANIMBP_MobileLaser, CallFunc_FWrap_ReturnValue_1) == 0x0000D0, "Member 'ANIMBP_MobileLaser_C_ExecuteUbergraph_ANIMBP_MobileLaser::CallFunc_FWrap_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(ANIMBP_MobileLaser_C_ExecuteUbergraph_ANIMBP_MobileLaser, CallFunc_NormalizedDeltaRotator_ReturnValue) == 0x0000D4, "Member 'ANIMBP_MobileLaser_C_ExecuteUbergraph_ANIMBP_MobileLaser::CallFunc_NormalizedDeltaRotator_ReturnValue' has a wrong offset!");
static_assert(offsetof(ANIMBP_MobileLaser_C_ExecuteUbergraph_ANIMBP_MobileLaser, CallFunc_BreakRotator_Roll) == 0x0000E0, "Member 'ANIMBP_MobileLaser_C_ExecuteUbergraph_ANIMBP_MobileLaser::CallFunc_BreakRotator_Roll' has a wrong offset!");
static_assert(offsetof(ANIMBP_MobileLaser_C_ExecuteUbergraph_ANIMBP_MobileLaser, CallFunc_BreakRotator_Pitch) == 0x0000E4, "Member 'ANIMBP_MobileLaser_C_ExecuteUbergraph_ANIMBP_MobileLaser::CallFunc_BreakRotator_Pitch' has a wrong offset!");
static_assert(offsetof(ANIMBP_MobileLaser_C_ExecuteUbergraph_ANIMBP_MobileLaser, CallFunc_BreakRotator_Yaw) == 0x0000E8, "Member 'ANIMBP_MobileLaser_C_ExecuteUbergraph_ANIMBP_MobileLaser::CallFunc_BreakRotator_Yaw' has a wrong offset!");
static_assert(offsetof(ANIMBP_MobileLaser_C_ExecuteUbergraph_ANIMBP_MobileLaser, CallFunc_UpdateLeanParameters_IterationCount) == 0x0000EC, "Member 'ANIMBP_MobileLaser_C_ExecuteUbergraph_ANIMBP_MobileLaser::CallFunc_UpdateLeanParameters_IterationCount' has a wrong offset!");
static_assert(offsetof(ANIMBP_MobileLaser_C_ExecuteUbergraph_ANIMBP_MobileLaser, CallFunc_UpdateLeanParameters_LinearSpeed) == 0x0000F0, "Member 'ANIMBP_MobileLaser_C_ExecuteUbergraph_ANIMBP_MobileLaser::CallFunc_UpdateLeanParameters_LinearSpeed' has a wrong offset!");
static_assert(offsetof(ANIMBP_MobileLaser_C_ExecuteUbergraph_ANIMBP_MobileLaser, CallFunc_UpdateLeanParameters_AngularSpeed) == 0x0000F4, "Member 'ANIMBP_MobileLaser_C_ExecuteUbergraph_ANIMBP_MobileLaser::CallFunc_UpdateLeanParameters_AngularSpeed' has a wrong offset!");
static_assert(offsetof(ANIMBP_MobileLaser_C_ExecuteUbergraph_ANIMBP_MobileLaser, CallFunc_Subtract_IntInt_ReturnValue) == 0x0000F8, "Member 'ANIMBP_MobileLaser_C_ExecuteUbergraph_ANIMBP_MobileLaser::CallFunc_Subtract_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(ANIMBP_MobileLaser_C_ExecuteUbergraph_ANIMBP_MobileLaser, Temp_float_Variable_3) == 0x0000FC, "Member 'ANIMBP_MobileLaser_C_ExecuteUbergraph_ANIMBP_MobileLaser::Temp_float_Variable_3' has a wrong offset!");
static_assert(offsetof(ANIMBP_MobileLaser_C_ExecuteUbergraph_ANIMBP_MobileLaser, CallFunc_LessEqual_IntInt_ReturnValue) == 0x000100, "Member 'ANIMBP_MobileLaser_C_ExecuteUbergraph_ANIMBP_MobileLaser::CallFunc_LessEqual_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(ANIMBP_MobileLaser_C_ExecuteUbergraph_ANIMBP_MobileLaser, CallFunc_WeightedMovingAverage_Float_ReturnValue) == 0x000104, "Member 'ANIMBP_MobileLaser_C_ExecuteUbergraph_ANIMBP_MobileLaser::CallFunc_WeightedMovingAverage_Float_ReturnValue' has a wrong offset!");
static_assert(offsetof(ANIMBP_MobileLaser_C_ExecuteUbergraph_ANIMBP_MobileLaser, CallFunc_WeightedMovingAverage_Float_ReturnValue_1) == 0x000108, "Member 'ANIMBP_MobileLaser_C_ExecuteUbergraph_ANIMBP_MobileLaser::CallFunc_WeightedMovingAverage_Float_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(ANIMBP_MobileLaser_C_ExecuteUbergraph_ANIMBP_MobileLaser, CallFunc_Subtract_FloatFloat_ReturnValue_1) == 0x00010C, "Member 'ANIMBP_MobileLaser_C_ExecuteUbergraph_ANIMBP_MobileLaser::CallFunc_Subtract_FloatFloat_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(ANIMBP_MobileLaser_C_ExecuteUbergraph_ANIMBP_MobileLaser, CallFunc_Multiply_FloatFloat_ReturnValue_2) == 0x000110, "Member 'ANIMBP_MobileLaser_C_ExecuteUbergraph_ANIMBP_MobileLaser::CallFunc_Multiply_FloatFloat_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(ANIMBP_MobileLaser_C_ExecuteUbergraph_ANIMBP_MobileLaser, CallFunc_Subtract_FloatFloat_ReturnValue_2) == 0x000114, "Member 'ANIMBP_MobileLaser_C_ExecuteUbergraph_ANIMBP_MobileLaser::CallFunc_Subtract_FloatFloat_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(ANIMBP_MobileLaser_C_ExecuteUbergraph_ANIMBP_MobileLaser, CallFunc_FloatSpringInterp_ReturnValue) == 0x000118, "Member 'ANIMBP_MobileLaser_C_ExecuteUbergraph_ANIMBP_MobileLaser::CallFunc_FloatSpringInterp_ReturnValue' has a wrong offset!");
static_assert(offsetof(ANIMBP_MobileLaser_C_ExecuteUbergraph_ANIMBP_MobileLaser, CallFunc_Multiply_FloatFloat_ReturnValue_3) == 0x00011C, "Member 'ANIMBP_MobileLaser_C_ExecuteUbergraph_ANIMBP_MobileLaser::CallFunc_Multiply_FloatFloat_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(ANIMBP_MobileLaser_C_ExecuteUbergraph_ANIMBP_MobileLaser, CallFunc_FClamp_ReturnValue) == 0x000120, "Member 'ANIMBP_MobileLaser_C_ExecuteUbergraph_ANIMBP_MobileLaser::CallFunc_FClamp_ReturnValue' has a wrong offset!");
static_assert(offsetof(ANIMBP_MobileLaser_C_ExecuteUbergraph_ANIMBP_MobileLaser, CallFunc_FClamp_ReturnValue_1) == 0x000124, "Member 'ANIMBP_MobileLaser_C_ExecuteUbergraph_ANIMBP_MobileLaser::CallFunc_FClamp_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(ANIMBP_MobileLaser_C_ExecuteUbergraph_ANIMBP_MobileLaser, CallFunc_Add_FloatFloat_ReturnValue_3) == 0x000128, "Member 'ANIMBP_MobileLaser_C_ExecuteUbergraph_ANIMBP_MobileLaser::CallFunc_Add_FloatFloat_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(ANIMBP_MobileLaser_C_ExecuteUbergraph_ANIMBP_MobileLaser, CallFunc_FloatSpringInterp_ReturnValue_1) == 0x00012C, "Member 'ANIMBP_MobileLaser_C_ExecuteUbergraph_ANIMBP_MobileLaser::CallFunc_FloatSpringInterp_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(ANIMBP_MobileLaser_C_ExecuteUbergraph_ANIMBP_MobileLaser, CallFunc_FClamp_ReturnValue_2) == 0x000130, "Member 'ANIMBP_MobileLaser_C_ExecuteUbergraph_ANIMBP_MobileLaser::CallFunc_FClamp_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(ANIMBP_MobileLaser_C_ExecuteUbergraph_ANIMBP_MobileLaser, CallFunc_Add_FloatFloat_ReturnValue_4) == 0x000134, "Member 'ANIMBP_MobileLaser_C_ExecuteUbergraph_ANIMBP_MobileLaser::CallFunc_Add_FloatFloat_ReturnValue_4' has a wrong offset!");
static_assert(offsetof(ANIMBP_MobileLaser_C_ExecuteUbergraph_ANIMBP_MobileLaser, CallFunc_Divide_FloatFloat_ReturnValue) == 0x000138, "Member 'ANIMBP_MobileLaser_C_ExecuteUbergraph_ANIMBP_MobileLaser::CallFunc_Divide_FloatFloat_ReturnValue' has a wrong offset!");

// Function ANIMBP_MobileLaser.ANIMBP_MobileLaser_C.BlueprintUpdateAnimation
// 0x0004 (0x0004 - 0x0000)
struct ANIMBP_MobileLaser_C_BlueprintUpdateAnimation final
{
public:
	float                                         DeltaTimeX;                                        // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(ANIMBP_MobileLaser_C_BlueprintUpdateAnimation) == 0x000004, "Wrong alignment on ANIMBP_MobileLaser_C_BlueprintUpdateAnimation");
static_assert(sizeof(ANIMBP_MobileLaser_C_BlueprintUpdateAnimation) == 0x000004, "Wrong size on ANIMBP_MobileLaser_C_BlueprintUpdateAnimation");
static_assert(offsetof(ANIMBP_MobileLaser_C_BlueprintUpdateAnimation, DeltaTimeX) == 0x000000, "Member 'ANIMBP_MobileLaser_C_BlueprintUpdateAnimation::DeltaTimeX' has a wrong offset!");

// Function ANIMBP_MobileLaser.ANIMBP_MobileLaser_C.UpdateLeanParameters
// 0x0060 (0x0060 - 0x0000)
struct ANIMBP_MobileLaser_C_UpdateLeanParameters final
{
public:
	int32                                         IterationCount;                                    // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         LinearSpeed;                                       // 0x0004(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         AngularSpeed;                                      // 0x0008(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         LeanUpdateAngularSpeed;                            // 0x000C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         LeanUpdateLinearSpeed;                             // 0x0010(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         LeanTotalDeltaTime;                                // 0x0014(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         LeanAccumRatio;                                    // 0x0018(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         LeanRemainderRatio;                                // 0x001C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         LeanAccumRemainder;                                // 0x0020(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         LeanIterationCount;                                // 0x0024(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Subtract_FloatFloat_ReturnValue;          // 0x0028(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Multiply_IntFloat_ReturnValue;            // 0x002C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_SafeDivide_ReturnValue;                   // 0x0030(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Multiply_FloatFloat_ReturnValue;          // 0x0034(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Multiply_FloatFloat_ReturnValue_1;        // 0x0038(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Multiply_FloatFloat_ReturnValue_2;        // 0x003C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_SafeDivide_ReturnValue_1;                 // 0x0040(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Multiply_FloatFloat_ReturnValue_3;        // 0x0044(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_SafeDivide_ReturnValue_2;                 // 0x0048(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_FMod_Remainder;                           // 0x004C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_FMod_ReturnValue;                         // 0x0050(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Add_FloatFloat_ReturnValue;               // 0x0054(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Add_FloatFloat_ReturnValue_1;             // 0x0058(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Add_FloatFloat_ReturnValue_2;             // 0x005C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(ANIMBP_MobileLaser_C_UpdateLeanParameters) == 0x000004, "Wrong alignment on ANIMBP_MobileLaser_C_UpdateLeanParameters");
static_assert(sizeof(ANIMBP_MobileLaser_C_UpdateLeanParameters) == 0x000060, "Wrong size on ANIMBP_MobileLaser_C_UpdateLeanParameters");
static_assert(offsetof(ANIMBP_MobileLaser_C_UpdateLeanParameters, IterationCount) == 0x000000, "Member 'ANIMBP_MobileLaser_C_UpdateLeanParameters::IterationCount' has a wrong offset!");
static_assert(offsetof(ANIMBP_MobileLaser_C_UpdateLeanParameters, LinearSpeed) == 0x000004, "Member 'ANIMBP_MobileLaser_C_UpdateLeanParameters::LinearSpeed' has a wrong offset!");
static_assert(offsetof(ANIMBP_MobileLaser_C_UpdateLeanParameters, AngularSpeed) == 0x000008, "Member 'ANIMBP_MobileLaser_C_UpdateLeanParameters::AngularSpeed' has a wrong offset!");
static_assert(offsetof(ANIMBP_MobileLaser_C_UpdateLeanParameters, LeanUpdateAngularSpeed) == 0x00000C, "Member 'ANIMBP_MobileLaser_C_UpdateLeanParameters::LeanUpdateAngularSpeed' has a wrong offset!");
static_assert(offsetof(ANIMBP_MobileLaser_C_UpdateLeanParameters, LeanUpdateLinearSpeed) == 0x000010, "Member 'ANIMBP_MobileLaser_C_UpdateLeanParameters::LeanUpdateLinearSpeed' has a wrong offset!");
static_assert(offsetof(ANIMBP_MobileLaser_C_UpdateLeanParameters, LeanTotalDeltaTime) == 0x000014, "Member 'ANIMBP_MobileLaser_C_UpdateLeanParameters::LeanTotalDeltaTime' has a wrong offset!");
static_assert(offsetof(ANIMBP_MobileLaser_C_UpdateLeanParameters, LeanAccumRatio) == 0x000018, "Member 'ANIMBP_MobileLaser_C_UpdateLeanParameters::LeanAccumRatio' has a wrong offset!");
static_assert(offsetof(ANIMBP_MobileLaser_C_UpdateLeanParameters, LeanRemainderRatio) == 0x00001C, "Member 'ANIMBP_MobileLaser_C_UpdateLeanParameters::LeanRemainderRatio' has a wrong offset!");
static_assert(offsetof(ANIMBP_MobileLaser_C_UpdateLeanParameters, LeanAccumRemainder) == 0x000020, "Member 'ANIMBP_MobileLaser_C_UpdateLeanParameters::LeanAccumRemainder' has a wrong offset!");
static_assert(offsetof(ANIMBP_MobileLaser_C_UpdateLeanParameters, LeanIterationCount) == 0x000024, "Member 'ANIMBP_MobileLaser_C_UpdateLeanParameters::LeanIterationCount' has a wrong offset!");
static_assert(offsetof(ANIMBP_MobileLaser_C_UpdateLeanParameters, CallFunc_Subtract_FloatFloat_ReturnValue) == 0x000028, "Member 'ANIMBP_MobileLaser_C_UpdateLeanParameters::CallFunc_Subtract_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(ANIMBP_MobileLaser_C_UpdateLeanParameters, CallFunc_Multiply_IntFloat_ReturnValue) == 0x00002C, "Member 'ANIMBP_MobileLaser_C_UpdateLeanParameters::CallFunc_Multiply_IntFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(ANIMBP_MobileLaser_C_UpdateLeanParameters, CallFunc_SafeDivide_ReturnValue) == 0x000030, "Member 'ANIMBP_MobileLaser_C_UpdateLeanParameters::CallFunc_SafeDivide_ReturnValue' has a wrong offset!");
static_assert(offsetof(ANIMBP_MobileLaser_C_UpdateLeanParameters, CallFunc_Multiply_FloatFloat_ReturnValue) == 0x000034, "Member 'ANIMBP_MobileLaser_C_UpdateLeanParameters::CallFunc_Multiply_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(ANIMBP_MobileLaser_C_UpdateLeanParameters, CallFunc_Multiply_FloatFloat_ReturnValue_1) == 0x000038, "Member 'ANIMBP_MobileLaser_C_UpdateLeanParameters::CallFunc_Multiply_FloatFloat_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(ANIMBP_MobileLaser_C_UpdateLeanParameters, CallFunc_Multiply_FloatFloat_ReturnValue_2) == 0x00003C, "Member 'ANIMBP_MobileLaser_C_UpdateLeanParameters::CallFunc_Multiply_FloatFloat_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(ANIMBP_MobileLaser_C_UpdateLeanParameters, CallFunc_SafeDivide_ReturnValue_1) == 0x000040, "Member 'ANIMBP_MobileLaser_C_UpdateLeanParameters::CallFunc_SafeDivide_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(ANIMBP_MobileLaser_C_UpdateLeanParameters, CallFunc_Multiply_FloatFloat_ReturnValue_3) == 0x000044, "Member 'ANIMBP_MobileLaser_C_UpdateLeanParameters::CallFunc_Multiply_FloatFloat_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(ANIMBP_MobileLaser_C_UpdateLeanParameters, CallFunc_SafeDivide_ReturnValue_2) == 0x000048, "Member 'ANIMBP_MobileLaser_C_UpdateLeanParameters::CallFunc_SafeDivide_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(ANIMBP_MobileLaser_C_UpdateLeanParameters, CallFunc_FMod_Remainder) == 0x00004C, "Member 'ANIMBP_MobileLaser_C_UpdateLeanParameters::CallFunc_FMod_Remainder' has a wrong offset!");
static_assert(offsetof(ANIMBP_MobileLaser_C_UpdateLeanParameters, CallFunc_FMod_ReturnValue) == 0x000050, "Member 'ANIMBP_MobileLaser_C_UpdateLeanParameters::CallFunc_FMod_ReturnValue' has a wrong offset!");
static_assert(offsetof(ANIMBP_MobileLaser_C_UpdateLeanParameters, CallFunc_Add_FloatFloat_ReturnValue) == 0x000054, "Member 'ANIMBP_MobileLaser_C_UpdateLeanParameters::CallFunc_Add_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(ANIMBP_MobileLaser_C_UpdateLeanParameters, CallFunc_Add_FloatFloat_ReturnValue_1) == 0x000058, "Member 'ANIMBP_MobileLaser_C_UpdateLeanParameters::CallFunc_Add_FloatFloat_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(ANIMBP_MobileLaser_C_UpdateLeanParameters, CallFunc_Add_FloatFloat_ReturnValue_2) == 0x00005C, "Member 'ANIMBP_MobileLaser_C_UpdateLeanParameters::CallFunc_Add_FloatFloat_ReturnValue_2' has a wrong offset!");

// Function ANIMBP_MobileLaser.ANIMBP_MobileLaser_C.UpdateAimSettings
// 0x0124 (0x0124 - 0x0000)
struct ANIMBP_MobileLaser_C_UpdateAimSettings final
{
public:
	float                                         DeltaTime;                                         // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               NewLocalRotation;                                  // 0x0004(0x000C)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FRotator                               TargetLocalRotation;                               // 0x0010(0x000C)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FRotator                               CurrentLocalRotation;                              // 0x001C(0x000C)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FVector                                TargetLocalAimDirection;                           // 0x0028(0x000C)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         AlphaChangeRage;                                   // 0x0034(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         TargetAlpha;                                       // 0x0038(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Variable;                                // 0x003C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_3D[0x3];                                       // 0x003D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                CallFunc_GetRightVector_ReturnValue;               // 0x0040(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_WorldDirectionToLocalDirection_LocalDirection; // 0x004C(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_GetForwardVector_ReturnValue;             // 0x0058(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Vector_Forward_ReturnValue;               // 0x0064(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_WorldDirectionToLocalDirection_LocalDirection_1; // 0x0070(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Vector_Up_ReturnValue;                    // 0x007C(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_GetAngleAroundAxis_ReturnValue;           // 0x0088(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Multiply_FloatFloat_ReturnValue;          // 0x008C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_GetUpVector_ReturnValue;                  // 0x0090(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_WorldDirectionToLocalDirection_LocalDirection_2; // 0x009C(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_ProjectVectorOnToPlane_ReturnValue;       // 0x00A8(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_MapRangeClamped_ReturnValue;              // 0x00B4(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_GetAngleAroundAxis_ReturnValue_1;         // 0x00B8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Multiply_FloatFloat_ReturnValue_1;        // 0x00BC(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_MapRangeClamped_ReturnValue_1;            // 0x00C0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               CallFunc_MakeRotator_ReturnValue;                  // 0x00C4(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Greater_FloatFloat_ReturnValue;           // 0x00D0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_D1[0x3];                                       // 0x00D1(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector2D                              CallFunc_LocalRotatorToHorizontalVertical_HorizontalVertical; // 0x00D4(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         K2Node_Select_Default;                             // 0x00DC(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector2D_X;                          // 0x00E0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector2D_Y;                          // 0x00E4(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Ease_ReturnValue;                         // 0x00E8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Multiply_FloatFloat_ReturnValue_2;        // 0x00EC(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_GetTargetLocalAimDirection_TargetLocalDirection; // 0x00F0(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Add_FloatFloat_ReturnValue;               // 0x00FC(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_FMin_ReturnValue;                         // 0x0100(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               CallFunc_RInterpTo_Constant_ReturnValue;           // 0x0104(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FVector2D                              CallFunc_MakeVector2D_ReturnValue;                 // 0x0110(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               CallFunc_HorizontalVerticalToLocalRotator_LocalRotator; // 0x0118(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(ANIMBP_MobileLaser_C_UpdateAimSettings) == 0x000004, "Wrong alignment on ANIMBP_MobileLaser_C_UpdateAimSettings");
static_assert(sizeof(ANIMBP_MobileLaser_C_UpdateAimSettings) == 0x000124, "Wrong size on ANIMBP_MobileLaser_C_UpdateAimSettings");
static_assert(offsetof(ANIMBP_MobileLaser_C_UpdateAimSettings, DeltaTime) == 0x000000, "Member 'ANIMBP_MobileLaser_C_UpdateAimSettings::DeltaTime' has a wrong offset!");
static_assert(offsetof(ANIMBP_MobileLaser_C_UpdateAimSettings, NewLocalRotation) == 0x000004, "Member 'ANIMBP_MobileLaser_C_UpdateAimSettings::NewLocalRotation' has a wrong offset!");
static_assert(offsetof(ANIMBP_MobileLaser_C_UpdateAimSettings, TargetLocalRotation) == 0x000010, "Member 'ANIMBP_MobileLaser_C_UpdateAimSettings::TargetLocalRotation' has a wrong offset!");
static_assert(offsetof(ANIMBP_MobileLaser_C_UpdateAimSettings, CurrentLocalRotation) == 0x00001C, "Member 'ANIMBP_MobileLaser_C_UpdateAimSettings::CurrentLocalRotation' has a wrong offset!");
static_assert(offsetof(ANIMBP_MobileLaser_C_UpdateAimSettings, TargetLocalAimDirection) == 0x000028, "Member 'ANIMBP_MobileLaser_C_UpdateAimSettings::TargetLocalAimDirection' has a wrong offset!");
static_assert(offsetof(ANIMBP_MobileLaser_C_UpdateAimSettings, AlphaChangeRage) == 0x000034, "Member 'ANIMBP_MobileLaser_C_UpdateAimSettings::AlphaChangeRage' has a wrong offset!");
static_assert(offsetof(ANIMBP_MobileLaser_C_UpdateAimSettings, TargetAlpha) == 0x000038, "Member 'ANIMBP_MobileLaser_C_UpdateAimSettings::TargetAlpha' has a wrong offset!");
static_assert(offsetof(ANIMBP_MobileLaser_C_UpdateAimSettings, Temp_bool_Variable) == 0x00003C, "Member 'ANIMBP_MobileLaser_C_UpdateAimSettings::Temp_bool_Variable' has a wrong offset!");
static_assert(offsetof(ANIMBP_MobileLaser_C_UpdateAimSettings, CallFunc_GetRightVector_ReturnValue) == 0x000040, "Member 'ANIMBP_MobileLaser_C_UpdateAimSettings::CallFunc_GetRightVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(ANIMBP_MobileLaser_C_UpdateAimSettings, CallFunc_WorldDirectionToLocalDirection_LocalDirection) == 0x00004C, "Member 'ANIMBP_MobileLaser_C_UpdateAimSettings::CallFunc_WorldDirectionToLocalDirection_LocalDirection' has a wrong offset!");
static_assert(offsetof(ANIMBP_MobileLaser_C_UpdateAimSettings, CallFunc_GetForwardVector_ReturnValue) == 0x000058, "Member 'ANIMBP_MobileLaser_C_UpdateAimSettings::CallFunc_GetForwardVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(ANIMBP_MobileLaser_C_UpdateAimSettings, CallFunc_Vector_Forward_ReturnValue) == 0x000064, "Member 'ANIMBP_MobileLaser_C_UpdateAimSettings::CallFunc_Vector_Forward_ReturnValue' has a wrong offset!");
static_assert(offsetof(ANIMBP_MobileLaser_C_UpdateAimSettings, CallFunc_WorldDirectionToLocalDirection_LocalDirection_1) == 0x000070, "Member 'ANIMBP_MobileLaser_C_UpdateAimSettings::CallFunc_WorldDirectionToLocalDirection_LocalDirection_1' has a wrong offset!");
static_assert(offsetof(ANIMBP_MobileLaser_C_UpdateAimSettings, CallFunc_Vector_Up_ReturnValue) == 0x00007C, "Member 'ANIMBP_MobileLaser_C_UpdateAimSettings::CallFunc_Vector_Up_ReturnValue' has a wrong offset!");
static_assert(offsetof(ANIMBP_MobileLaser_C_UpdateAimSettings, CallFunc_GetAngleAroundAxis_ReturnValue) == 0x000088, "Member 'ANIMBP_MobileLaser_C_UpdateAimSettings::CallFunc_GetAngleAroundAxis_ReturnValue' has a wrong offset!");
static_assert(offsetof(ANIMBP_MobileLaser_C_UpdateAimSettings, CallFunc_Multiply_FloatFloat_ReturnValue) == 0x00008C, "Member 'ANIMBP_MobileLaser_C_UpdateAimSettings::CallFunc_Multiply_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(ANIMBP_MobileLaser_C_UpdateAimSettings, CallFunc_GetUpVector_ReturnValue) == 0x000090, "Member 'ANIMBP_MobileLaser_C_UpdateAimSettings::CallFunc_GetUpVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(ANIMBP_MobileLaser_C_UpdateAimSettings, CallFunc_WorldDirectionToLocalDirection_LocalDirection_2) == 0x00009C, "Member 'ANIMBP_MobileLaser_C_UpdateAimSettings::CallFunc_WorldDirectionToLocalDirection_LocalDirection_2' has a wrong offset!");
static_assert(offsetof(ANIMBP_MobileLaser_C_UpdateAimSettings, CallFunc_ProjectVectorOnToPlane_ReturnValue) == 0x0000A8, "Member 'ANIMBP_MobileLaser_C_UpdateAimSettings::CallFunc_ProjectVectorOnToPlane_ReturnValue' has a wrong offset!");
static_assert(offsetof(ANIMBP_MobileLaser_C_UpdateAimSettings, CallFunc_MapRangeClamped_ReturnValue) == 0x0000B4, "Member 'ANIMBP_MobileLaser_C_UpdateAimSettings::CallFunc_MapRangeClamped_ReturnValue' has a wrong offset!");
static_assert(offsetof(ANIMBP_MobileLaser_C_UpdateAimSettings, CallFunc_GetAngleAroundAxis_ReturnValue_1) == 0x0000B8, "Member 'ANIMBP_MobileLaser_C_UpdateAimSettings::CallFunc_GetAngleAroundAxis_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(ANIMBP_MobileLaser_C_UpdateAimSettings, CallFunc_Multiply_FloatFloat_ReturnValue_1) == 0x0000BC, "Member 'ANIMBP_MobileLaser_C_UpdateAimSettings::CallFunc_Multiply_FloatFloat_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(ANIMBP_MobileLaser_C_UpdateAimSettings, CallFunc_MapRangeClamped_ReturnValue_1) == 0x0000C0, "Member 'ANIMBP_MobileLaser_C_UpdateAimSettings::CallFunc_MapRangeClamped_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(ANIMBP_MobileLaser_C_UpdateAimSettings, CallFunc_MakeRotator_ReturnValue) == 0x0000C4, "Member 'ANIMBP_MobileLaser_C_UpdateAimSettings::CallFunc_MakeRotator_ReturnValue' has a wrong offset!");
static_assert(offsetof(ANIMBP_MobileLaser_C_UpdateAimSettings, CallFunc_Greater_FloatFloat_ReturnValue) == 0x0000D0, "Member 'ANIMBP_MobileLaser_C_UpdateAimSettings::CallFunc_Greater_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(ANIMBP_MobileLaser_C_UpdateAimSettings, CallFunc_LocalRotatorToHorizontalVertical_HorizontalVertical) == 0x0000D4, "Member 'ANIMBP_MobileLaser_C_UpdateAimSettings::CallFunc_LocalRotatorToHorizontalVertical_HorizontalVertical' has a wrong offset!");
static_assert(offsetof(ANIMBP_MobileLaser_C_UpdateAimSettings, K2Node_Select_Default) == 0x0000DC, "Member 'ANIMBP_MobileLaser_C_UpdateAimSettings::K2Node_Select_Default' has a wrong offset!");
static_assert(offsetof(ANIMBP_MobileLaser_C_UpdateAimSettings, CallFunc_BreakVector2D_X) == 0x0000E0, "Member 'ANIMBP_MobileLaser_C_UpdateAimSettings::CallFunc_BreakVector2D_X' has a wrong offset!");
static_assert(offsetof(ANIMBP_MobileLaser_C_UpdateAimSettings, CallFunc_BreakVector2D_Y) == 0x0000E4, "Member 'ANIMBP_MobileLaser_C_UpdateAimSettings::CallFunc_BreakVector2D_Y' has a wrong offset!");
static_assert(offsetof(ANIMBP_MobileLaser_C_UpdateAimSettings, CallFunc_Ease_ReturnValue) == 0x0000E8, "Member 'ANIMBP_MobileLaser_C_UpdateAimSettings::CallFunc_Ease_ReturnValue' has a wrong offset!");
static_assert(offsetof(ANIMBP_MobileLaser_C_UpdateAimSettings, CallFunc_Multiply_FloatFloat_ReturnValue_2) == 0x0000EC, "Member 'ANIMBP_MobileLaser_C_UpdateAimSettings::CallFunc_Multiply_FloatFloat_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(ANIMBP_MobileLaser_C_UpdateAimSettings, CallFunc_GetTargetLocalAimDirection_TargetLocalDirection) == 0x0000F0, "Member 'ANIMBP_MobileLaser_C_UpdateAimSettings::CallFunc_GetTargetLocalAimDirection_TargetLocalDirection' has a wrong offset!");
static_assert(offsetof(ANIMBP_MobileLaser_C_UpdateAimSettings, CallFunc_Add_FloatFloat_ReturnValue) == 0x0000FC, "Member 'ANIMBP_MobileLaser_C_UpdateAimSettings::CallFunc_Add_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(ANIMBP_MobileLaser_C_UpdateAimSettings, CallFunc_FMin_ReturnValue) == 0x000100, "Member 'ANIMBP_MobileLaser_C_UpdateAimSettings::CallFunc_FMin_ReturnValue' has a wrong offset!");
static_assert(offsetof(ANIMBP_MobileLaser_C_UpdateAimSettings, CallFunc_RInterpTo_Constant_ReturnValue) == 0x000104, "Member 'ANIMBP_MobileLaser_C_UpdateAimSettings::CallFunc_RInterpTo_Constant_ReturnValue' has a wrong offset!");
static_assert(offsetof(ANIMBP_MobileLaser_C_UpdateAimSettings, CallFunc_MakeVector2D_ReturnValue) == 0x000110, "Member 'ANIMBP_MobileLaser_C_UpdateAimSettings::CallFunc_MakeVector2D_ReturnValue' has a wrong offset!");
static_assert(offsetof(ANIMBP_MobileLaser_C_UpdateAimSettings, CallFunc_HorizontalVerticalToLocalRotator_LocalRotator) == 0x000118, "Member 'ANIMBP_MobileLaser_C_UpdateAimSettings::CallFunc_HorizontalVerticalToLocalRotator_LocalRotator' has a wrong offset!");

// Function ANIMBP_MobileLaser.ANIMBP_MobileLaser_C.UpdateLaserSpin
// 0x0070 (0x0070 - 0x0000)
struct ANIMBP_MobileLaser_C_UpdateLaserSpin final
{
public:
	float                                         DeltaTime;                                         // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         TargetSpinMultiplier;                              // 0x0004(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               CallFunc_MakeRotator_ReturnValue;                  // 0x0008(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                         CallFunc_BreakVector2D_X;                          // 0x0014(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector2D_Y;                          // 0x0018(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector2D_X_1;                        // 0x001C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector2D_Y_1;                        // 0x0020(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_SelectFloat_ReturnValue;                  // 0x0024(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Greater_FloatFloat_ReturnValue;           // 0x0028(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_29[0x3];                                       // 0x0029(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_SelectFloat_ReturnValue_1;                // 0x002C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               CallFunc_MakeRotator_ReturnValue_1;                // 0x0030(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_NotEqual_FloatFloat_ReturnValue;          // 0x003C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_3D[0x3];                                       // 0x003D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_Multiply_FloatFloat_ReturnValue;          // 0x0040(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Multiply_FloatFloat_ReturnValue_1;        // 0x0044(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_SelectFloat_ReturnValue_2;                // 0x0048(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Add_FloatFloat_ReturnValue;               // 0x004C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_SelectFloat_ReturnValue_3;                // 0x0050(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_FClamp_ReturnValue;                       // 0x0054(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Multiply_FloatFloat_ReturnValue_2;        // 0x0058(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Multiply_FloatFloat_ReturnValue_3;        // 0x005C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Multiply_FloatFloat_ReturnValue_4;        // 0x0060(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Add_FloatFloat_ReturnValue_1;             // 0x0064(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Multiply_FloatFloat_ReturnValue_5;        // 0x0068(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Add_FloatFloat_ReturnValue_2;             // 0x006C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(ANIMBP_MobileLaser_C_UpdateLaserSpin) == 0x000004, "Wrong alignment on ANIMBP_MobileLaser_C_UpdateLaserSpin");
static_assert(sizeof(ANIMBP_MobileLaser_C_UpdateLaserSpin) == 0x000070, "Wrong size on ANIMBP_MobileLaser_C_UpdateLaserSpin");
static_assert(offsetof(ANIMBP_MobileLaser_C_UpdateLaserSpin, DeltaTime) == 0x000000, "Member 'ANIMBP_MobileLaser_C_UpdateLaserSpin::DeltaTime' has a wrong offset!");
static_assert(offsetof(ANIMBP_MobileLaser_C_UpdateLaserSpin, TargetSpinMultiplier) == 0x000004, "Member 'ANIMBP_MobileLaser_C_UpdateLaserSpin::TargetSpinMultiplier' has a wrong offset!");
static_assert(offsetof(ANIMBP_MobileLaser_C_UpdateLaserSpin, CallFunc_MakeRotator_ReturnValue) == 0x000008, "Member 'ANIMBP_MobileLaser_C_UpdateLaserSpin::CallFunc_MakeRotator_ReturnValue' has a wrong offset!");
static_assert(offsetof(ANIMBP_MobileLaser_C_UpdateLaserSpin, CallFunc_BreakVector2D_X) == 0x000014, "Member 'ANIMBP_MobileLaser_C_UpdateLaserSpin::CallFunc_BreakVector2D_X' has a wrong offset!");
static_assert(offsetof(ANIMBP_MobileLaser_C_UpdateLaserSpin, CallFunc_BreakVector2D_Y) == 0x000018, "Member 'ANIMBP_MobileLaser_C_UpdateLaserSpin::CallFunc_BreakVector2D_Y' has a wrong offset!");
static_assert(offsetof(ANIMBP_MobileLaser_C_UpdateLaserSpin, CallFunc_BreakVector2D_X_1) == 0x00001C, "Member 'ANIMBP_MobileLaser_C_UpdateLaserSpin::CallFunc_BreakVector2D_X_1' has a wrong offset!");
static_assert(offsetof(ANIMBP_MobileLaser_C_UpdateLaserSpin, CallFunc_BreakVector2D_Y_1) == 0x000020, "Member 'ANIMBP_MobileLaser_C_UpdateLaserSpin::CallFunc_BreakVector2D_Y_1' has a wrong offset!");
static_assert(offsetof(ANIMBP_MobileLaser_C_UpdateLaserSpin, CallFunc_SelectFloat_ReturnValue) == 0x000024, "Member 'ANIMBP_MobileLaser_C_UpdateLaserSpin::CallFunc_SelectFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(ANIMBP_MobileLaser_C_UpdateLaserSpin, CallFunc_Greater_FloatFloat_ReturnValue) == 0x000028, "Member 'ANIMBP_MobileLaser_C_UpdateLaserSpin::CallFunc_Greater_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(ANIMBP_MobileLaser_C_UpdateLaserSpin, CallFunc_SelectFloat_ReturnValue_1) == 0x00002C, "Member 'ANIMBP_MobileLaser_C_UpdateLaserSpin::CallFunc_SelectFloat_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(ANIMBP_MobileLaser_C_UpdateLaserSpin, CallFunc_MakeRotator_ReturnValue_1) == 0x000030, "Member 'ANIMBP_MobileLaser_C_UpdateLaserSpin::CallFunc_MakeRotator_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(ANIMBP_MobileLaser_C_UpdateLaserSpin, CallFunc_NotEqual_FloatFloat_ReturnValue) == 0x00003C, "Member 'ANIMBP_MobileLaser_C_UpdateLaserSpin::CallFunc_NotEqual_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(ANIMBP_MobileLaser_C_UpdateLaserSpin, CallFunc_Multiply_FloatFloat_ReturnValue) == 0x000040, "Member 'ANIMBP_MobileLaser_C_UpdateLaserSpin::CallFunc_Multiply_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(ANIMBP_MobileLaser_C_UpdateLaserSpin, CallFunc_Multiply_FloatFloat_ReturnValue_1) == 0x000044, "Member 'ANIMBP_MobileLaser_C_UpdateLaserSpin::CallFunc_Multiply_FloatFloat_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(ANIMBP_MobileLaser_C_UpdateLaserSpin, CallFunc_SelectFloat_ReturnValue_2) == 0x000048, "Member 'ANIMBP_MobileLaser_C_UpdateLaserSpin::CallFunc_SelectFloat_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(ANIMBP_MobileLaser_C_UpdateLaserSpin, CallFunc_Add_FloatFloat_ReturnValue) == 0x00004C, "Member 'ANIMBP_MobileLaser_C_UpdateLaserSpin::CallFunc_Add_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(ANIMBP_MobileLaser_C_UpdateLaserSpin, CallFunc_SelectFloat_ReturnValue_3) == 0x000050, "Member 'ANIMBP_MobileLaser_C_UpdateLaserSpin::CallFunc_SelectFloat_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(ANIMBP_MobileLaser_C_UpdateLaserSpin, CallFunc_FClamp_ReturnValue) == 0x000054, "Member 'ANIMBP_MobileLaser_C_UpdateLaserSpin::CallFunc_FClamp_ReturnValue' has a wrong offset!");
static_assert(offsetof(ANIMBP_MobileLaser_C_UpdateLaserSpin, CallFunc_Multiply_FloatFloat_ReturnValue_2) == 0x000058, "Member 'ANIMBP_MobileLaser_C_UpdateLaserSpin::CallFunc_Multiply_FloatFloat_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(ANIMBP_MobileLaser_C_UpdateLaserSpin, CallFunc_Multiply_FloatFloat_ReturnValue_3) == 0x00005C, "Member 'ANIMBP_MobileLaser_C_UpdateLaserSpin::CallFunc_Multiply_FloatFloat_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(ANIMBP_MobileLaser_C_UpdateLaserSpin, CallFunc_Multiply_FloatFloat_ReturnValue_4) == 0x000060, "Member 'ANIMBP_MobileLaser_C_UpdateLaserSpin::CallFunc_Multiply_FloatFloat_ReturnValue_4' has a wrong offset!");
static_assert(offsetof(ANIMBP_MobileLaser_C_UpdateLaserSpin, CallFunc_Add_FloatFloat_ReturnValue_1) == 0x000064, "Member 'ANIMBP_MobileLaser_C_UpdateLaserSpin::CallFunc_Add_FloatFloat_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(ANIMBP_MobileLaser_C_UpdateLaserSpin, CallFunc_Multiply_FloatFloat_ReturnValue_5) == 0x000068, "Member 'ANIMBP_MobileLaser_C_UpdateLaserSpin::CallFunc_Multiply_FloatFloat_ReturnValue_5' has a wrong offset!");
static_assert(offsetof(ANIMBP_MobileLaser_C_UpdateLaserSpin, CallFunc_Add_FloatFloat_ReturnValue_2) == 0x00006C, "Member 'ANIMBP_MobileLaser_C_UpdateLaserSpin::CallFunc_Add_FloatFloat_ReturnValue_2' has a wrong offset!");

// Function ANIMBP_MobileLaser.ANIMBP_MobileLaser_C.GetTargetLocalAimDirection
// 0x0090 (0x0090 - 0x0000)
struct ANIMBP_MobileLaser_C_GetTargetLocalAimDirection final
{
public:
	struct FVector                                TargetLocalDirection;                              // 0x0000(0x000C)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class APAWN_MobileLaser_C*                    Hopper;                                            // 0x0010(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash)
	struct FVector                                CallFunc_GetProxyBarrelWorldLocation_ProxyBarrelLocation; // 0x0018(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Get_Target_Location_Location;             // 0x0024(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Subtract_VectorVector_ReturnValue;        // 0x0030(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_SwitchEnum_CmpSuccess;                      // 0x003C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_3D[0x3];                                       // 0x003D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                CallFunc_Normal_ReturnValue;                       // 0x0040(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_WorldDirectionToLocalDirection_LocalDirection; // 0x004C(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Get_Target_Direction_Direction;           // 0x0058(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0064(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_65[0x3];                                       // 0x0065(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                CallFunc_GetMoveDirection_Current_Direction;       // 0x0068(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_74[0x4];                                       // 0x0074(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class APawn*                                  CallFunc_TryGetPawnOwner_ReturnValue;              // 0x0078(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class APAWN_MobileLaser_C*                    K2Node_DynamicCast_AsPAWN_Mobile_Laser;            // 0x0080(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0088(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(ANIMBP_MobileLaser_C_GetTargetLocalAimDirection) == 0x000008, "Wrong alignment on ANIMBP_MobileLaser_C_GetTargetLocalAimDirection");
static_assert(sizeof(ANIMBP_MobileLaser_C_GetTargetLocalAimDirection) == 0x000090, "Wrong size on ANIMBP_MobileLaser_C_GetTargetLocalAimDirection");
static_assert(offsetof(ANIMBP_MobileLaser_C_GetTargetLocalAimDirection, TargetLocalDirection) == 0x000000, "Member 'ANIMBP_MobileLaser_C_GetTargetLocalAimDirection::TargetLocalDirection' has a wrong offset!");
static_assert(offsetof(ANIMBP_MobileLaser_C_GetTargetLocalAimDirection, Hopper) == 0x000010, "Member 'ANIMBP_MobileLaser_C_GetTargetLocalAimDirection::Hopper' has a wrong offset!");
static_assert(offsetof(ANIMBP_MobileLaser_C_GetTargetLocalAimDirection, CallFunc_GetProxyBarrelWorldLocation_ProxyBarrelLocation) == 0x000018, "Member 'ANIMBP_MobileLaser_C_GetTargetLocalAimDirection::CallFunc_GetProxyBarrelWorldLocation_ProxyBarrelLocation' has a wrong offset!");
static_assert(offsetof(ANIMBP_MobileLaser_C_GetTargetLocalAimDirection, CallFunc_Get_Target_Location_Location) == 0x000024, "Member 'ANIMBP_MobileLaser_C_GetTargetLocalAimDirection::CallFunc_Get_Target_Location_Location' has a wrong offset!");
static_assert(offsetof(ANIMBP_MobileLaser_C_GetTargetLocalAimDirection, CallFunc_Subtract_VectorVector_ReturnValue) == 0x000030, "Member 'ANIMBP_MobileLaser_C_GetTargetLocalAimDirection::CallFunc_Subtract_VectorVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(ANIMBP_MobileLaser_C_GetTargetLocalAimDirection, K2Node_SwitchEnum_CmpSuccess) == 0x00003C, "Member 'ANIMBP_MobileLaser_C_GetTargetLocalAimDirection::K2Node_SwitchEnum_CmpSuccess' has a wrong offset!");
static_assert(offsetof(ANIMBP_MobileLaser_C_GetTargetLocalAimDirection, CallFunc_Normal_ReturnValue) == 0x000040, "Member 'ANIMBP_MobileLaser_C_GetTargetLocalAimDirection::CallFunc_Normal_ReturnValue' has a wrong offset!");
static_assert(offsetof(ANIMBP_MobileLaser_C_GetTargetLocalAimDirection, CallFunc_WorldDirectionToLocalDirection_LocalDirection) == 0x00004C, "Member 'ANIMBP_MobileLaser_C_GetTargetLocalAimDirection::CallFunc_WorldDirectionToLocalDirection_LocalDirection' has a wrong offset!");
static_assert(offsetof(ANIMBP_MobileLaser_C_GetTargetLocalAimDirection, CallFunc_Get_Target_Direction_Direction) == 0x000058, "Member 'ANIMBP_MobileLaser_C_GetTargetLocalAimDirection::CallFunc_Get_Target_Direction_Direction' has a wrong offset!");
static_assert(offsetof(ANIMBP_MobileLaser_C_GetTargetLocalAimDirection, CallFunc_IsValid_ReturnValue) == 0x000064, "Member 'ANIMBP_MobileLaser_C_GetTargetLocalAimDirection::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(ANIMBP_MobileLaser_C_GetTargetLocalAimDirection, CallFunc_GetMoveDirection_Current_Direction) == 0x000068, "Member 'ANIMBP_MobileLaser_C_GetTargetLocalAimDirection::CallFunc_GetMoveDirection_Current_Direction' has a wrong offset!");
static_assert(offsetof(ANIMBP_MobileLaser_C_GetTargetLocalAimDirection, CallFunc_TryGetPawnOwner_ReturnValue) == 0x000078, "Member 'ANIMBP_MobileLaser_C_GetTargetLocalAimDirection::CallFunc_TryGetPawnOwner_ReturnValue' has a wrong offset!");
static_assert(offsetof(ANIMBP_MobileLaser_C_GetTargetLocalAimDirection, K2Node_DynamicCast_AsPAWN_Mobile_Laser) == 0x000080, "Member 'ANIMBP_MobileLaser_C_GetTargetLocalAimDirection::K2Node_DynamicCast_AsPAWN_Mobile_Laser' has a wrong offset!");
static_assert(offsetof(ANIMBP_MobileLaser_C_GetTargetLocalAimDirection, K2Node_DynamicCast_bSuccess) == 0x000088, "Member 'ANIMBP_MobileLaser_C_GetTargetLocalAimDirection::K2Node_DynamicCast_bSuccess' has a wrong offset!");

// Function ANIMBP_MobileLaser.ANIMBP_MobileLaser_C.GetCurrentLocalAimDirection
// 0x002C (0x002C - 0x0000)
struct ANIMBP_MobileLaser_C_GetCurrentLocalAimDirection final
{
public:
	struct FVector                                TargetLocalDirection;                              // 0x0000(0x000C)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector2D                              CallFunc_MakeVector2D_ReturnValue;                 // 0x000C(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               CallFunc_HorizontalVerticalToLocalRotator_LocalRotator; // 0x0014(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FVector                                CallFunc_GetForwardVector_ReturnValue;             // 0x0020(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(ANIMBP_MobileLaser_C_GetCurrentLocalAimDirection) == 0x000004, "Wrong alignment on ANIMBP_MobileLaser_C_GetCurrentLocalAimDirection");
static_assert(sizeof(ANIMBP_MobileLaser_C_GetCurrentLocalAimDirection) == 0x00002C, "Wrong size on ANIMBP_MobileLaser_C_GetCurrentLocalAimDirection");
static_assert(offsetof(ANIMBP_MobileLaser_C_GetCurrentLocalAimDirection, TargetLocalDirection) == 0x000000, "Member 'ANIMBP_MobileLaser_C_GetCurrentLocalAimDirection::TargetLocalDirection' has a wrong offset!");
static_assert(offsetof(ANIMBP_MobileLaser_C_GetCurrentLocalAimDirection, CallFunc_MakeVector2D_ReturnValue) == 0x00000C, "Member 'ANIMBP_MobileLaser_C_GetCurrentLocalAimDirection::CallFunc_MakeVector2D_ReturnValue' has a wrong offset!");
static_assert(offsetof(ANIMBP_MobileLaser_C_GetCurrentLocalAimDirection, CallFunc_HorizontalVerticalToLocalRotator_LocalRotator) == 0x000014, "Member 'ANIMBP_MobileLaser_C_GetCurrentLocalAimDirection::CallFunc_HorizontalVerticalToLocalRotator_LocalRotator' has a wrong offset!");
static_assert(offsetof(ANIMBP_MobileLaser_C_GetCurrentLocalAimDirection, CallFunc_GetForwardVector_ReturnValue) == 0x000020, "Member 'ANIMBP_MobileLaser_C_GetCurrentLocalAimDirection::CallFunc_GetForwardVector_ReturnValue' has a wrong offset!");

// Function ANIMBP_MobileLaser.ANIMBP_MobileLaser_C.WorldDirectionToLocalDirection
// 0x00B0 (0x00B0 - 0x0000)
struct ANIMBP_MobileLaser_C_WorldDirectionToLocalDirection final
{
public:
	struct FVector                                WorldDirection;                                    // 0x0000(0x000C)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                LocalDirection;                                    // 0x000C(0x000C)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class APAWN_MobileLaser_C*                    Hopper;                                            // 0x0018(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash)
	class APawn*                                  CallFunc_TryGetPawnOwner_ReturnValue;              // 0x0020(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class APAWN_MobileLaser_C*                    K2Node_DynamicCast_AsPAWN_Mobile_Laser;            // 0x0028(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0030(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_31[0x3];                                       // 0x0031(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                CallFunc_GetUpVector_ReturnValue;                  // 0x0034(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_GetRightVector_ReturnValue;               // 0x0040(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_GetForwardVector_ReturnValue;             // 0x004C(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               CallFunc_MakeRotationFromAxes_ReturnValue;         // 0x0058(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_64[0xC];                                       // 0x0064(0x000C)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTransform                             CallFunc_MakeTransform_ReturnValue;                // 0x0070(0x0030)(IsPlainOldData, NoDestructor)
	struct FVector                                CallFunc_InverseTransformDirection_ReturnValue;    // 0x00A0(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(ANIMBP_MobileLaser_C_WorldDirectionToLocalDirection) == 0x000010, "Wrong alignment on ANIMBP_MobileLaser_C_WorldDirectionToLocalDirection");
static_assert(sizeof(ANIMBP_MobileLaser_C_WorldDirectionToLocalDirection) == 0x0000B0, "Wrong size on ANIMBP_MobileLaser_C_WorldDirectionToLocalDirection");
static_assert(offsetof(ANIMBP_MobileLaser_C_WorldDirectionToLocalDirection, WorldDirection) == 0x000000, "Member 'ANIMBP_MobileLaser_C_WorldDirectionToLocalDirection::WorldDirection' has a wrong offset!");
static_assert(offsetof(ANIMBP_MobileLaser_C_WorldDirectionToLocalDirection, LocalDirection) == 0x00000C, "Member 'ANIMBP_MobileLaser_C_WorldDirectionToLocalDirection::LocalDirection' has a wrong offset!");
static_assert(offsetof(ANIMBP_MobileLaser_C_WorldDirectionToLocalDirection, Hopper) == 0x000018, "Member 'ANIMBP_MobileLaser_C_WorldDirectionToLocalDirection::Hopper' has a wrong offset!");
static_assert(offsetof(ANIMBP_MobileLaser_C_WorldDirectionToLocalDirection, CallFunc_TryGetPawnOwner_ReturnValue) == 0x000020, "Member 'ANIMBP_MobileLaser_C_WorldDirectionToLocalDirection::CallFunc_TryGetPawnOwner_ReturnValue' has a wrong offset!");
static_assert(offsetof(ANIMBP_MobileLaser_C_WorldDirectionToLocalDirection, K2Node_DynamicCast_AsPAWN_Mobile_Laser) == 0x000028, "Member 'ANIMBP_MobileLaser_C_WorldDirectionToLocalDirection::K2Node_DynamicCast_AsPAWN_Mobile_Laser' has a wrong offset!");
static_assert(offsetof(ANIMBP_MobileLaser_C_WorldDirectionToLocalDirection, K2Node_DynamicCast_bSuccess) == 0x000030, "Member 'ANIMBP_MobileLaser_C_WorldDirectionToLocalDirection::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(ANIMBP_MobileLaser_C_WorldDirectionToLocalDirection, CallFunc_GetUpVector_ReturnValue) == 0x000034, "Member 'ANIMBP_MobileLaser_C_WorldDirectionToLocalDirection::CallFunc_GetUpVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(ANIMBP_MobileLaser_C_WorldDirectionToLocalDirection, CallFunc_GetRightVector_ReturnValue) == 0x000040, "Member 'ANIMBP_MobileLaser_C_WorldDirectionToLocalDirection::CallFunc_GetRightVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(ANIMBP_MobileLaser_C_WorldDirectionToLocalDirection, CallFunc_GetForwardVector_ReturnValue) == 0x00004C, "Member 'ANIMBP_MobileLaser_C_WorldDirectionToLocalDirection::CallFunc_GetForwardVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(ANIMBP_MobileLaser_C_WorldDirectionToLocalDirection, CallFunc_MakeRotationFromAxes_ReturnValue) == 0x000058, "Member 'ANIMBP_MobileLaser_C_WorldDirectionToLocalDirection::CallFunc_MakeRotationFromAxes_ReturnValue' has a wrong offset!");
static_assert(offsetof(ANIMBP_MobileLaser_C_WorldDirectionToLocalDirection, CallFunc_MakeTransform_ReturnValue) == 0x000070, "Member 'ANIMBP_MobileLaser_C_WorldDirectionToLocalDirection::CallFunc_MakeTransform_ReturnValue' has a wrong offset!");
static_assert(offsetof(ANIMBP_MobileLaser_C_WorldDirectionToLocalDirection, CallFunc_InverseTransformDirection_ReturnValue) == 0x0000A0, "Member 'ANIMBP_MobileLaser_C_WorldDirectionToLocalDirection::CallFunc_InverseTransformDirection_ReturnValue' has a wrong offset!");

// Function ANIMBP_MobileLaser.ANIMBP_MobileLaser_C.LocalDirectionToWorldDirection
// 0x00B0 (0x00B0 - 0x0000)
struct ANIMBP_MobileLaser_C_LocalDirectionToWorldDirection final
{
public:
	struct FVector                                WorldDirection;                                    // 0x0000(0x000C)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                LocalDirection;                                    // 0x000C(0x000C)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class APAWN_MobileLaser_C*                    Hopper;                                            // 0x0018(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash)
	struct FVector                                CallFunc_GetUpVector_ReturnValue;                  // 0x0020(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_GetRightVector_ReturnValue;               // 0x002C(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_GetForwardVector_ReturnValue;             // 0x0038(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               CallFunc_MakeRotationFromAxes_ReturnValue;         // 0x0044(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor)
	class APawn*                                  CallFunc_TryGetPawnOwner_ReturnValue;              // 0x0050(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_58[0x8];                                       // 0x0058(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTransform                             CallFunc_MakeTransform_ReturnValue;                // 0x0060(0x0030)(IsPlainOldData, NoDestructor)
	class APAWN_MobileLaser_C*                    K2Node_DynamicCast_AsPAWN_Mobile_Laser;            // 0x0090(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0098(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_99[0x3];                                       // 0x0099(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                CallFunc_TransformDirection_ReturnValue;           // 0x009C(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(ANIMBP_MobileLaser_C_LocalDirectionToWorldDirection) == 0x000010, "Wrong alignment on ANIMBP_MobileLaser_C_LocalDirectionToWorldDirection");
static_assert(sizeof(ANIMBP_MobileLaser_C_LocalDirectionToWorldDirection) == 0x0000B0, "Wrong size on ANIMBP_MobileLaser_C_LocalDirectionToWorldDirection");
static_assert(offsetof(ANIMBP_MobileLaser_C_LocalDirectionToWorldDirection, WorldDirection) == 0x000000, "Member 'ANIMBP_MobileLaser_C_LocalDirectionToWorldDirection::WorldDirection' has a wrong offset!");
static_assert(offsetof(ANIMBP_MobileLaser_C_LocalDirectionToWorldDirection, LocalDirection) == 0x00000C, "Member 'ANIMBP_MobileLaser_C_LocalDirectionToWorldDirection::LocalDirection' has a wrong offset!");
static_assert(offsetof(ANIMBP_MobileLaser_C_LocalDirectionToWorldDirection, Hopper) == 0x000018, "Member 'ANIMBP_MobileLaser_C_LocalDirectionToWorldDirection::Hopper' has a wrong offset!");
static_assert(offsetof(ANIMBP_MobileLaser_C_LocalDirectionToWorldDirection, CallFunc_GetUpVector_ReturnValue) == 0x000020, "Member 'ANIMBP_MobileLaser_C_LocalDirectionToWorldDirection::CallFunc_GetUpVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(ANIMBP_MobileLaser_C_LocalDirectionToWorldDirection, CallFunc_GetRightVector_ReturnValue) == 0x00002C, "Member 'ANIMBP_MobileLaser_C_LocalDirectionToWorldDirection::CallFunc_GetRightVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(ANIMBP_MobileLaser_C_LocalDirectionToWorldDirection, CallFunc_GetForwardVector_ReturnValue) == 0x000038, "Member 'ANIMBP_MobileLaser_C_LocalDirectionToWorldDirection::CallFunc_GetForwardVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(ANIMBP_MobileLaser_C_LocalDirectionToWorldDirection, CallFunc_MakeRotationFromAxes_ReturnValue) == 0x000044, "Member 'ANIMBP_MobileLaser_C_LocalDirectionToWorldDirection::CallFunc_MakeRotationFromAxes_ReturnValue' has a wrong offset!");
static_assert(offsetof(ANIMBP_MobileLaser_C_LocalDirectionToWorldDirection, CallFunc_TryGetPawnOwner_ReturnValue) == 0x000050, "Member 'ANIMBP_MobileLaser_C_LocalDirectionToWorldDirection::CallFunc_TryGetPawnOwner_ReturnValue' has a wrong offset!");
static_assert(offsetof(ANIMBP_MobileLaser_C_LocalDirectionToWorldDirection, CallFunc_MakeTransform_ReturnValue) == 0x000060, "Member 'ANIMBP_MobileLaser_C_LocalDirectionToWorldDirection::CallFunc_MakeTransform_ReturnValue' has a wrong offset!");
static_assert(offsetof(ANIMBP_MobileLaser_C_LocalDirectionToWorldDirection, K2Node_DynamicCast_AsPAWN_Mobile_Laser) == 0x000090, "Member 'ANIMBP_MobileLaser_C_LocalDirectionToWorldDirection::K2Node_DynamicCast_AsPAWN_Mobile_Laser' has a wrong offset!");
static_assert(offsetof(ANIMBP_MobileLaser_C_LocalDirectionToWorldDirection, K2Node_DynamicCast_bSuccess) == 0x000098, "Member 'ANIMBP_MobileLaser_C_LocalDirectionToWorldDirection::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(ANIMBP_MobileLaser_C_LocalDirectionToWorldDirection, CallFunc_TransformDirection_ReturnValue) == 0x00009C, "Member 'ANIMBP_MobileLaser_C_LocalDirectionToWorldDirection::CallFunc_TransformDirection_ReturnValue' has a wrong offset!");

// Function ANIMBP_MobileLaser.ANIMBP_MobileLaser_C.HorizontalVerticalToLocalRotator
// 0x0038 (0x0038 - 0x0000)
struct ANIMBP_MobileLaser_C_HorizontalVerticalToLocalRotator final
{
public:
	struct FVector2D                              HorizontalVertical;                                // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               LocalRotator;                                      // 0x0008(0x000C)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                         CallFunc_BreakVector2D_X;                          // 0x0014(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector2D_Y;                          // 0x0018(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_MapRangeClamped_ReturnValue;              // 0x001C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_MapRangeClamped_ReturnValue_1;            // 0x0020(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_FWrap_ReturnValue;                        // 0x0024(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_FWrap_ReturnValue_1;                      // 0x0028(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               CallFunc_MakeRotator_ReturnValue;                  // 0x002C(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(ANIMBP_MobileLaser_C_HorizontalVerticalToLocalRotator) == 0x000004, "Wrong alignment on ANIMBP_MobileLaser_C_HorizontalVerticalToLocalRotator");
static_assert(sizeof(ANIMBP_MobileLaser_C_HorizontalVerticalToLocalRotator) == 0x000038, "Wrong size on ANIMBP_MobileLaser_C_HorizontalVerticalToLocalRotator");
static_assert(offsetof(ANIMBP_MobileLaser_C_HorizontalVerticalToLocalRotator, HorizontalVertical) == 0x000000, "Member 'ANIMBP_MobileLaser_C_HorizontalVerticalToLocalRotator::HorizontalVertical' has a wrong offset!");
static_assert(offsetof(ANIMBP_MobileLaser_C_HorizontalVerticalToLocalRotator, LocalRotator) == 0x000008, "Member 'ANIMBP_MobileLaser_C_HorizontalVerticalToLocalRotator::LocalRotator' has a wrong offset!");
static_assert(offsetof(ANIMBP_MobileLaser_C_HorizontalVerticalToLocalRotator, CallFunc_BreakVector2D_X) == 0x000014, "Member 'ANIMBP_MobileLaser_C_HorizontalVerticalToLocalRotator::CallFunc_BreakVector2D_X' has a wrong offset!");
static_assert(offsetof(ANIMBP_MobileLaser_C_HorizontalVerticalToLocalRotator, CallFunc_BreakVector2D_Y) == 0x000018, "Member 'ANIMBP_MobileLaser_C_HorizontalVerticalToLocalRotator::CallFunc_BreakVector2D_Y' has a wrong offset!");
static_assert(offsetof(ANIMBP_MobileLaser_C_HorizontalVerticalToLocalRotator, CallFunc_MapRangeClamped_ReturnValue) == 0x00001C, "Member 'ANIMBP_MobileLaser_C_HorizontalVerticalToLocalRotator::CallFunc_MapRangeClamped_ReturnValue' has a wrong offset!");
static_assert(offsetof(ANIMBP_MobileLaser_C_HorizontalVerticalToLocalRotator, CallFunc_MapRangeClamped_ReturnValue_1) == 0x000020, "Member 'ANIMBP_MobileLaser_C_HorizontalVerticalToLocalRotator::CallFunc_MapRangeClamped_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(ANIMBP_MobileLaser_C_HorizontalVerticalToLocalRotator, CallFunc_FWrap_ReturnValue) == 0x000024, "Member 'ANIMBP_MobileLaser_C_HorizontalVerticalToLocalRotator::CallFunc_FWrap_ReturnValue' has a wrong offset!");
static_assert(offsetof(ANIMBP_MobileLaser_C_HorizontalVerticalToLocalRotator, CallFunc_FWrap_ReturnValue_1) == 0x000028, "Member 'ANIMBP_MobileLaser_C_HorizontalVerticalToLocalRotator::CallFunc_FWrap_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(ANIMBP_MobileLaser_C_HorizontalVerticalToLocalRotator, CallFunc_MakeRotator_ReturnValue) == 0x00002C, "Member 'ANIMBP_MobileLaser_C_HorizontalVerticalToLocalRotator::CallFunc_MakeRotator_ReturnValue' has a wrong offset!");

// Function ANIMBP_MobileLaser.ANIMBP_MobileLaser_C.LocalRotatorToHorizontalVertical
// 0x0030 (0x0030 - 0x0000)
struct ANIMBP_MobileLaser_C_LocalRotatorToHorizontalVertical final
{
public:
	struct FRotator                               LocalRotator;                                      // 0x0000(0x000C)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FVector2D                              HorizontalVertical;                                // 0x000C(0x0008)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakRotator_Roll;                        // 0x0014(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakRotator_Pitch;                       // 0x0018(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakRotator_Yaw;                         // 0x001C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_MapRangeClamped_ReturnValue;              // 0x0020(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_MapRangeClamped_ReturnValue_1;            // 0x0024(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector2D                              CallFunc_MakeVector2D_ReturnValue;                 // 0x0028(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(ANIMBP_MobileLaser_C_LocalRotatorToHorizontalVertical) == 0x000004, "Wrong alignment on ANIMBP_MobileLaser_C_LocalRotatorToHorizontalVertical");
static_assert(sizeof(ANIMBP_MobileLaser_C_LocalRotatorToHorizontalVertical) == 0x000030, "Wrong size on ANIMBP_MobileLaser_C_LocalRotatorToHorizontalVertical");
static_assert(offsetof(ANIMBP_MobileLaser_C_LocalRotatorToHorizontalVertical, LocalRotator) == 0x000000, "Member 'ANIMBP_MobileLaser_C_LocalRotatorToHorizontalVertical::LocalRotator' has a wrong offset!");
static_assert(offsetof(ANIMBP_MobileLaser_C_LocalRotatorToHorizontalVertical, HorizontalVertical) == 0x00000C, "Member 'ANIMBP_MobileLaser_C_LocalRotatorToHorizontalVertical::HorizontalVertical' has a wrong offset!");
static_assert(offsetof(ANIMBP_MobileLaser_C_LocalRotatorToHorizontalVertical, CallFunc_BreakRotator_Roll) == 0x000014, "Member 'ANIMBP_MobileLaser_C_LocalRotatorToHorizontalVertical::CallFunc_BreakRotator_Roll' has a wrong offset!");
static_assert(offsetof(ANIMBP_MobileLaser_C_LocalRotatorToHorizontalVertical, CallFunc_BreakRotator_Pitch) == 0x000018, "Member 'ANIMBP_MobileLaser_C_LocalRotatorToHorizontalVertical::CallFunc_BreakRotator_Pitch' has a wrong offset!");
static_assert(offsetof(ANIMBP_MobileLaser_C_LocalRotatorToHorizontalVertical, CallFunc_BreakRotator_Yaw) == 0x00001C, "Member 'ANIMBP_MobileLaser_C_LocalRotatorToHorizontalVertical::CallFunc_BreakRotator_Yaw' has a wrong offset!");
static_assert(offsetof(ANIMBP_MobileLaser_C_LocalRotatorToHorizontalVertical, CallFunc_MapRangeClamped_ReturnValue) == 0x000020, "Member 'ANIMBP_MobileLaser_C_LocalRotatorToHorizontalVertical::CallFunc_MapRangeClamped_ReturnValue' has a wrong offset!");
static_assert(offsetof(ANIMBP_MobileLaser_C_LocalRotatorToHorizontalVertical, CallFunc_MapRangeClamped_ReturnValue_1) == 0x000024, "Member 'ANIMBP_MobileLaser_C_LocalRotatorToHorizontalVertical::CallFunc_MapRangeClamped_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(ANIMBP_MobileLaser_C_LocalRotatorToHorizontalVertical, CallFunc_MakeVector2D_ReturnValue) == 0x000028, "Member 'ANIMBP_MobileLaser_C_LocalRotatorToHorizontalVertical::CallFunc_MakeVector2D_ReturnValue' has a wrong offset!");

// Function ANIMBP_MobileLaser.ANIMBP_MobileLaser_C.AnimGraph
// 0x0010 (0x0010 - 0x0000)
struct ANIMBP_MobileLaser_C_AnimGraph final
{
public:
	struct FPoseLink                              AnimGraph_0;                                       // 0x0000(0x0010)(Parm, OutParm, NoDestructor)
};
static_assert(alignof(ANIMBP_MobileLaser_C_AnimGraph) == 0x000008, "Wrong alignment on ANIMBP_MobileLaser_C_AnimGraph");
static_assert(sizeof(ANIMBP_MobileLaser_C_AnimGraph) == 0x000010, "Wrong size on ANIMBP_MobileLaser_C_AnimGraph");
static_assert(offsetof(ANIMBP_MobileLaser_C_AnimGraph, AnimGraph_0) == 0x000000, "Member 'ANIMBP_MobileLaser_C_AnimGraph::AnimGraph_0' has a wrong offset!");

// Function ANIMBP_MobileLaser.ANIMBP_MobileLaser_C.SetSprintEnabled
// 0x0002 (0x0002 - 0x0000)
struct ANIMBP_MobileLaser_C_SetSprintEnabled final
{
public:
	bool                                          SprintEnabled;                                     // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Result;                                            // 0x0001(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(ANIMBP_MobileLaser_C_SetSprintEnabled) == 0x000001, "Wrong alignment on ANIMBP_MobileLaser_C_SetSprintEnabled");
static_assert(sizeof(ANIMBP_MobileLaser_C_SetSprintEnabled) == 0x000002, "Wrong size on ANIMBP_MobileLaser_C_SetSprintEnabled");
static_assert(offsetof(ANIMBP_MobileLaser_C_SetSprintEnabled, SprintEnabled) == 0x000000, "Member 'ANIMBP_MobileLaser_C_SetSprintEnabled::SprintEnabled' has a wrong offset!");
static_assert(offsetof(ANIMBP_MobileLaser_C_SetSprintEnabled, Result) == 0x000001, "Member 'ANIMBP_MobileLaser_C_SetSprintEnabled::Result' has a wrong offset!");

// Function ANIMBP_MobileLaser.ANIMBP_MobileLaser_C.SetTravelMode
// 0x0002 (0x0002 - 0x0000)
struct ANIMBP_MobileLaser_C_SetTravelMode final
{
public:
	bool                                          TravelModeOn;                                      // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Result;                                            // 0x0001(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(ANIMBP_MobileLaser_C_SetTravelMode) == 0x000001, "Wrong alignment on ANIMBP_MobileLaser_C_SetTravelMode");
static_assert(sizeof(ANIMBP_MobileLaser_C_SetTravelMode) == 0x000002, "Wrong size on ANIMBP_MobileLaser_C_SetTravelMode");
static_assert(offsetof(ANIMBP_MobileLaser_C_SetTravelMode, TravelModeOn) == 0x000000, "Member 'ANIMBP_MobileLaser_C_SetTravelMode::TravelModeOn' has a wrong offset!");
static_assert(offsetof(ANIMBP_MobileLaser_C_SetTravelMode, Result) == 0x000001, "Member 'ANIMBP_MobileLaser_C_SetTravelMode::Result' has a wrong offset!");

// Function ANIMBP_MobileLaser.ANIMBP_MobileLaser_C.SetAimTarget
// 0x0010 (0x0010 - 0x0000)
struct ANIMBP_MobileLaser_C_SetAimTarget final
{
public:
	class UOBJ_EnemyTarget_C*                     Target;                                            // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Result;                                            // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0009(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_NotEqual_ObjectObject_ReturnValue;        // 0x000A(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(ANIMBP_MobileLaser_C_SetAimTarget) == 0x000008, "Wrong alignment on ANIMBP_MobileLaser_C_SetAimTarget");
static_assert(sizeof(ANIMBP_MobileLaser_C_SetAimTarget) == 0x000010, "Wrong size on ANIMBP_MobileLaser_C_SetAimTarget");
static_assert(offsetof(ANIMBP_MobileLaser_C_SetAimTarget, Target) == 0x000000, "Member 'ANIMBP_MobileLaser_C_SetAimTarget::Target' has a wrong offset!");
static_assert(offsetof(ANIMBP_MobileLaser_C_SetAimTarget, Result) == 0x000008, "Member 'ANIMBP_MobileLaser_C_SetAimTarget::Result' has a wrong offset!");
static_assert(offsetof(ANIMBP_MobileLaser_C_SetAimTarget, CallFunc_IsValid_ReturnValue) == 0x000009, "Member 'ANIMBP_MobileLaser_C_SetAimTarget::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(ANIMBP_MobileLaser_C_SetAimTarget, CallFunc_NotEqual_ObjectObject_ReturnValue) == 0x00000A, "Member 'ANIMBP_MobileLaser_C_SetAimTarget::CallFunc_NotEqual_ObjectObject_ReturnValue' has a wrong offset!");

// Function ANIMBP_MobileLaser.ANIMBP_MobileLaser_C.GetIdleOverrideSequence
// 0x0008 (0x0008 - 0x0000)
struct ANIMBP_MobileLaser_C_GetIdleOverrideSequence final
{
public:
	class UAnimSequenceBase*                      IdleOverride;                                      // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(ANIMBP_MobileLaser_C_GetIdleOverrideSequence) == 0x000008, "Wrong alignment on ANIMBP_MobileLaser_C_GetIdleOverrideSequence");
static_assert(sizeof(ANIMBP_MobileLaser_C_GetIdleOverrideSequence) == 0x000008, "Wrong size on ANIMBP_MobileLaser_C_GetIdleOverrideSequence");
static_assert(offsetof(ANIMBP_MobileLaser_C_GetIdleOverrideSequence, IdleOverride) == 0x000000, "Member 'ANIMBP_MobileLaser_C_GetIdleOverrideSequence::IdleOverride' has a wrong offset!");

// Function ANIMBP_MobileLaser.ANIMBP_MobileLaser_C.SetIdleOverrideSequence
// 0x0010 (0x0010 - 0x0000)
struct ANIMBP_MobileLaser_C_SetIdleOverrideSequence final
{
public:
	class UAnimSequenceBase*                      IdleOverride;                                      // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Result;                                            // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(ANIMBP_MobileLaser_C_SetIdleOverrideSequence) == 0x000008, "Wrong alignment on ANIMBP_MobileLaser_C_SetIdleOverrideSequence");
static_assert(sizeof(ANIMBP_MobileLaser_C_SetIdleOverrideSequence) == 0x000010, "Wrong size on ANIMBP_MobileLaser_C_SetIdleOverrideSequence");
static_assert(offsetof(ANIMBP_MobileLaser_C_SetIdleOverrideSequence, IdleOverride) == 0x000000, "Member 'ANIMBP_MobileLaser_C_SetIdleOverrideSequence::IdleOverride' has a wrong offset!");
static_assert(offsetof(ANIMBP_MobileLaser_C_SetIdleOverrideSequence, Result) == 0x000008, "Member 'ANIMBP_MobileLaser_C_SetIdleOverrideSequence::Result' has a wrong offset!");

// Function ANIMBP_MobileLaser.ANIMBP_MobileLaser_C.SetRelativeAimAngleOffset
// 0x0010 (0x0010 - 0x0000)
struct ANIMBP_MobileLaser_C_SetRelativeAimAngleOffset final
{
public:
	float                                         YawOffset;                                         // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         PitchOffset;                                       // 0x0004(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Alpha;                                             // 0x0008(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Result;                                            // 0x000C(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(ANIMBP_MobileLaser_C_SetRelativeAimAngleOffset) == 0x000004, "Wrong alignment on ANIMBP_MobileLaser_C_SetRelativeAimAngleOffset");
static_assert(sizeof(ANIMBP_MobileLaser_C_SetRelativeAimAngleOffset) == 0x000010, "Wrong size on ANIMBP_MobileLaser_C_SetRelativeAimAngleOffset");
static_assert(offsetof(ANIMBP_MobileLaser_C_SetRelativeAimAngleOffset, YawOffset) == 0x000000, "Member 'ANIMBP_MobileLaser_C_SetRelativeAimAngleOffset::YawOffset' has a wrong offset!");
static_assert(offsetof(ANIMBP_MobileLaser_C_SetRelativeAimAngleOffset, PitchOffset) == 0x000004, "Member 'ANIMBP_MobileLaser_C_SetRelativeAimAngleOffset::PitchOffset' has a wrong offset!");
static_assert(offsetof(ANIMBP_MobileLaser_C_SetRelativeAimAngleOffset, Alpha) == 0x000008, "Member 'ANIMBP_MobileLaser_C_SetRelativeAimAngleOffset::Alpha' has a wrong offset!");
static_assert(offsetof(ANIMBP_MobileLaser_C_SetRelativeAimAngleOffset, Result) == 0x00000C, "Member 'ANIMBP_MobileLaser_C_SetRelativeAimAngleOffset::Result' has a wrong offset!");

// Function ANIMBP_MobileLaser.ANIMBP_MobileLaser_C.GetRotation
// 0x0010 (0x0010 - 0x0000)
struct ANIMBP_MobileLaser_C_GetRotation final
{
public:
	struct FRotator                               AnimRotationPerSecond;                             // 0x0000(0x000C)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                         AnimRotationAlpha;                                 // 0x000C(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(ANIMBP_MobileLaser_C_GetRotation) == 0x000004, "Wrong alignment on ANIMBP_MobileLaser_C_GetRotation");
static_assert(sizeof(ANIMBP_MobileLaser_C_GetRotation) == 0x000010, "Wrong size on ANIMBP_MobileLaser_C_GetRotation");
static_assert(offsetof(ANIMBP_MobileLaser_C_GetRotation, AnimRotationPerSecond) == 0x000000, "Member 'ANIMBP_MobileLaser_C_GetRotation::AnimRotationPerSecond' has a wrong offset!");
static_assert(offsetof(ANIMBP_MobileLaser_C_GetRotation, AnimRotationAlpha) == 0x00000C, "Member 'ANIMBP_MobileLaser_C_GetRotation::AnimRotationAlpha' has a wrong offset!");

// Function ANIMBP_MobileLaser.ANIMBP_MobileLaser_C.GetStance
// 0x0005 (0x0005 - 0x0000)
struct ANIMBP_MobileLaser_C_GetStance final
{
public:
	ENUM_Emotions                                 Stance;                                            // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Variable;                                // 0x0001(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	ENUM_Emotions                                 Temp_byte_Variable;                                // 0x0002(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ENUM_Emotions                                 Temp_byte_Variable_1;                              // 0x0003(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ENUM_Emotions                                 K2Node_Select_Default;                             // 0x0004(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(ANIMBP_MobileLaser_C_GetStance) == 0x000001, "Wrong alignment on ANIMBP_MobileLaser_C_GetStance");
static_assert(sizeof(ANIMBP_MobileLaser_C_GetStance) == 0x000005, "Wrong size on ANIMBP_MobileLaser_C_GetStance");
static_assert(offsetof(ANIMBP_MobileLaser_C_GetStance, Stance) == 0x000000, "Member 'ANIMBP_MobileLaser_C_GetStance::Stance' has a wrong offset!");
static_assert(offsetof(ANIMBP_MobileLaser_C_GetStance, Temp_bool_Variable) == 0x000001, "Member 'ANIMBP_MobileLaser_C_GetStance::Temp_bool_Variable' has a wrong offset!");
static_assert(offsetof(ANIMBP_MobileLaser_C_GetStance, Temp_byte_Variable) == 0x000002, "Member 'ANIMBP_MobileLaser_C_GetStance::Temp_byte_Variable' has a wrong offset!");
static_assert(offsetof(ANIMBP_MobileLaser_C_GetStance, Temp_byte_Variable_1) == 0x000003, "Member 'ANIMBP_MobileLaser_C_GetStance::Temp_byte_Variable_1' has a wrong offset!");
static_assert(offsetof(ANIMBP_MobileLaser_C_GetStance, K2Node_Select_Default) == 0x000004, "Member 'ANIMBP_MobileLaser_C_GetStance::K2Node_Select_Default' has a wrong offset!");

// Function ANIMBP_MobileLaser.ANIMBP_MobileLaser_C.SetStance
// 0x0004 (0x0004 - 0x0000)
struct ANIMBP_MobileLaser_C_SetStance final
{
public:
	ENUM_Emotions                                 Stance;                                            // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Result;                                            // 0x0001(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_EqualEqual_ByteByte_ReturnValue;          // 0x0002(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Not_PreBool_ReturnValue;                  // 0x0003(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(ANIMBP_MobileLaser_C_SetStance) == 0x000001, "Wrong alignment on ANIMBP_MobileLaser_C_SetStance");
static_assert(sizeof(ANIMBP_MobileLaser_C_SetStance) == 0x000004, "Wrong size on ANIMBP_MobileLaser_C_SetStance");
static_assert(offsetof(ANIMBP_MobileLaser_C_SetStance, Stance) == 0x000000, "Member 'ANIMBP_MobileLaser_C_SetStance::Stance' has a wrong offset!");
static_assert(offsetof(ANIMBP_MobileLaser_C_SetStance, Result) == 0x000001, "Member 'ANIMBP_MobileLaser_C_SetStance::Result' has a wrong offset!");
static_assert(offsetof(ANIMBP_MobileLaser_C_SetStance, CallFunc_EqualEqual_ByteByte_ReturnValue) == 0x000002, "Member 'ANIMBP_MobileLaser_C_SetStance::CallFunc_EqualEqual_ByteByte_ReturnValue' has a wrong offset!");
static_assert(offsetof(ANIMBP_MobileLaser_C_SetStance, CallFunc_Not_PreBool_ReturnValue) == 0x000003, "Member 'ANIMBP_MobileLaser_C_SetStance::CallFunc_Not_PreBool_ReturnValue' has a wrong offset!");

// Function ANIMBP_MobileLaser.ANIMBP_MobileLaser_C.SetCatatonic
// 0x0002 (0x0002 - 0x0000)
struct ANIMBP_MobileLaser_C_SetCatatonic final
{
public:
	bool                                          State;                                             // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Result;                                            // 0x0001(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(ANIMBP_MobileLaser_C_SetCatatonic) == 0x000001, "Wrong alignment on ANIMBP_MobileLaser_C_SetCatatonic");
static_assert(sizeof(ANIMBP_MobileLaser_C_SetCatatonic) == 0x000002, "Wrong size on ANIMBP_MobileLaser_C_SetCatatonic");
static_assert(offsetof(ANIMBP_MobileLaser_C_SetCatatonic, State) == 0x000000, "Member 'ANIMBP_MobileLaser_C_SetCatatonic::State' has a wrong offset!");
static_assert(offsetof(ANIMBP_MobileLaser_C_SetCatatonic, Result) == 0x000001, "Member 'ANIMBP_MobileLaser_C_SetCatatonic::Result' has a wrong offset!");

// Function ANIMBP_MobileLaser.ANIMBP_MobileLaser_C.SetStandingTurn
// 0x0008 (0x0008 - 0x0000)
struct ANIMBP_MobileLaser_C_SetStandingTurn final
{
public:
	float                                         SignedAngleToTarget;                               // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          IsStanding;                                        // 0x0004(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Result;                                            // 0x0005(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(ANIMBP_MobileLaser_C_SetStandingTurn) == 0x000004, "Wrong alignment on ANIMBP_MobileLaser_C_SetStandingTurn");
static_assert(sizeof(ANIMBP_MobileLaser_C_SetStandingTurn) == 0x000008, "Wrong size on ANIMBP_MobileLaser_C_SetStandingTurn");
static_assert(offsetof(ANIMBP_MobileLaser_C_SetStandingTurn, SignedAngleToTarget) == 0x000000, "Member 'ANIMBP_MobileLaser_C_SetStandingTurn::SignedAngleToTarget' has a wrong offset!");
static_assert(offsetof(ANIMBP_MobileLaser_C_SetStandingTurn, IsStanding) == 0x000004, "Member 'ANIMBP_MobileLaser_C_SetStandingTurn::IsStanding' has a wrong offset!");
static_assert(offsetof(ANIMBP_MobileLaser_C_SetStandingTurn, Result) == 0x000005, "Member 'ANIMBP_MobileLaser_C_SetStandingTurn::Result' has a wrong offset!");

// Function ANIMBP_MobileLaser.ANIMBP_MobileLaser_C.ReceiveDeathBlow
// 0x0002 (0x0002 - 0x0000)
struct ANIMBP_MobileLaser_C_ReceiveDeathBlow final
{
public:
	ENUM_DeathBlowType                            BodyPart;                                          // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Result;                                            // 0x0001(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(ANIMBP_MobileLaser_C_ReceiveDeathBlow) == 0x000001, "Wrong alignment on ANIMBP_MobileLaser_C_ReceiveDeathBlow");
static_assert(sizeof(ANIMBP_MobileLaser_C_ReceiveDeathBlow) == 0x000002, "Wrong size on ANIMBP_MobileLaser_C_ReceiveDeathBlow");
static_assert(offsetof(ANIMBP_MobileLaser_C_ReceiveDeathBlow, BodyPart) == 0x000000, "Member 'ANIMBP_MobileLaser_C_ReceiveDeathBlow::BodyPart' has a wrong offset!");
static_assert(offsetof(ANIMBP_MobileLaser_C_ReceiveDeathBlow, Result) == 0x000001, "Member 'ANIMBP_MobileLaser_C_ReceiveDeathBlow::Result' has a wrong offset!");

// Function ANIMBP_MobileLaser.ANIMBP_MobileLaser_C.ReceiveImpact
// 0x0050 (0x0050 - 0x0000)
struct ANIMBP_MobileLaser_C_ReceiveImpact final
{
public:
	struct FVector                                Impulse;                                           // 0x0000(0x000C)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                ImpactLocation;                                    // 0x000C(0x000C)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                ImpactNormal;                                      // 0x0018(0x000C)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FName                                   BoneName;                                          // 0x0024(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_2C[0x4];                                       // 0x002C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 DamageType;                                        // 0x0030(0x0010)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, HasGetValueTypeHash)
	float                                         DamageAmount;                                      // 0x0040(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         FlinchTime;                                        // 0x0044(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Result;                                            // 0x0048(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(ANIMBP_MobileLaser_C_ReceiveImpact) == 0x000008, "Wrong alignment on ANIMBP_MobileLaser_C_ReceiveImpact");
static_assert(sizeof(ANIMBP_MobileLaser_C_ReceiveImpact) == 0x000050, "Wrong size on ANIMBP_MobileLaser_C_ReceiveImpact");
static_assert(offsetof(ANIMBP_MobileLaser_C_ReceiveImpact, Impulse) == 0x000000, "Member 'ANIMBP_MobileLaser_C_ReceiveImpact::Impulse' has a wrong offset!");
static_assert(offsetof(ANIMBP_MobileLaser_C_ReceiveImpact, ImpactLocation) == 0x00000C, "Member 'ANIMBP_MobileLaser_C_ReceiveImpact::ImpactLocation' has a wrong offset!");
static_assert(offsetof(ANIMBP_MobileLaser_C_ReceiveImpact, ImpactNormal) == 0x000018, "Member 'ANIMBP_MobileLaser_C_ReceiveImpact::ImpactNormal' has a wrong offset!");
static_assert(offsetof(ANIMBP_MobileLaser_C_ReceiveImpact, BoneName) == 0x000024, "Member 'ANIMBP_MobileLaser_C_ReceiveImpact::BoneName' has a wrong offset!");
static_assert(offsetof(ANIMBP_MobileLaser_C_ReceiveImpact, DamageType) == 0x000030, "Member 'ANIMBP_MobileLaser_C_ReceiveImpact::DamageType' has a wrong offset!");
static_assert(offsetof(ANIMBP_MobileLaser_C_ReceiveImpact, DamageAmount) == 0x000040, "Member 'ANIMBP_MobileLaser_C_ReceiveImpact::DamageAmount' has a wrong offset!");
static_assert(offsetof(ANIMBP_MobileLaser_C_ReceiveImpact, FlinchTime) == 0x000044, "Member 'ANIMBP_MobileLaser_C_ReceiveImpact::FlinchTime' has a wrong offset!");
static_assert(offsetof(ANIMBP_MobileLaser_C_ReceiveImpact, Result) == 0x000048, "Member 'ANIMBP_MobileLaser_C_ReceiveImpact::Result' has a wrong offset!");

// Function ANIMBP_MobileLaser.ANIMBP_MobileLaser_C.SetIsAlive
// 0x0002 (0x0002 - 0x0000)
struct ANIMBP_MobileLaser_C_SetIsAlive final
{
public:
	bool                                          IsAlive_0;                                         // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Result;                                            // 0x0001(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(ANIMBP_MobileLaser_C_SetIsAlive) == 0x000001, "Wrong alignment on ANIMBP_MobileLaser_C_SetIsAlive");
static_assert(sizeof(ANIMBP_MobileLaser_C_SetIsAlive) == 0x000002, "Wrong size on ANIMBP_MobileLaser_C_SetIsAlive");
static_assert(offsetof(ANIMBP_MobileLaser_C_SetIsAlive, IsAlive_0) == 0x000000, "Member 'ANIMBP_MobileLaser_C_SetIsAlive::IsAlive_0' has a wrong offset!");
static_assert(offsetof(ANIMBP_MobileLaser_C_SetIsAlive, Result) == 0x000001, "Member 'ANIMBP_MobileLaser_C_SetIsAlive::Result' has a wrong offset!");

// Function ANIMBP_MobileLaser.ANIMBP_MobileLaser_C.SetMovementParameters
// 0x0028 (0x0028 - 0x0000)
struct ANIMBP_MobileLaser_C_SetMovementParameters final
{
public:
	struct FVector                                Velocity;                                          // 0x0000(0x000C)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               Rotation_0;                                        // 0x000C(0x000C)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FRotator                               DesiredRotation;                                   // 0x0018(0x000C)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Result;                                            // 0x0024(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(ANIMBP_MobileLaser_C_SetMovementParameters) == 0x000004, "Wrong alignment on ANIMBP_MobileLaser_C_SetMovementParameters");
static_assert(sizeof(ANIMBP_MobileLaser_C_SetMovementParameters) == 0x000028, "Wrong size on ANIMBP_MobileLaser_C_SetMovementParameters");
static_assert(offsetof(ANIMBP_MobileLaser_C_SetMovementParameters, Velocity) == 0x000000, "Member 'ANIMBP_MobileLaser_C_SetMovementParameters::Velocity' has a wrong offset!");
static_assert(offsetof(ANIMBP_MobileLaser_C_SetMovementParameters, Rotation_0) == 0x00000C, "Member 'ANIMBP_MobileLaser_C_SetMovementParameters::Rotation_0' has a wrong offset!");
static_assert(offsetof(ANIMBP_MobileLaser_C_SetMovementParameters, DesiredRotation) == 0x000018, "Member 'ANIMBP_MobileLaser_C_SetMovementParameters::DesiredRotation' has a wrong offset!");
static_assert(offsetof(ANIMBP_MobileLaser_C_SetMovementParameters, Result) == 0x000024, "Member 'ANIMBP_MobileLaser_C_SetMovementParameters::Result' has a wrong offset!");

// Function ANIMBP_MobileLaser.ANIMBP_MobileLaser_C.SetLookAtAlpha
// 0x0008 (0x0008 - 0x0000)
struct ANIMBP_MobileLaser_C_SetLookAtAlpha final
{
public:
	float                                         Alpha;                                             // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Result;                                            // 0x0004(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(ANIMBP_MobileLaser_C_SetLookAtAlpha) == 0x000004, "Wrong alignment on ANIMBP_MobileLaser_C_SetLookAtAlpha");
static_assert(sizeof(ANIMBP_MobileLaser_C_SetLookAtAlpha) == 0x000008, "Wrong size on ANIMBP_MobileLaser_C_SetLookAtAlpha");
static_assert(offsetof(ANIMBP_MobileLaser_C_SetLookAtAlpha, Alpha) == 0x000000, "Member 'ANIMBP_MobileLaser_C_SetLookAtAlpha::Alpha' has a wrong offset!");
static_assert(offsetof(ANIMBP_MobileLaser_C_SetLookAtAlpha, Result) == 0x000004, "Member 'ANIMBP_MobileLaser_C_SetLookAtAlpha::Result' has a wrong offset!");

// Function ANIMBP_MobileLaser.ANIMBP_MobileLaser_C.SetLookAtLocation
// 0x0010 (0x0010 - 0x0000)
struct ANIMBP_MobileLaser_C_SetLookAtLocation final
{
public:
	struct FVector                                Location;                                          // 0x0000(0x000C)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Result;                                            // 0x000C(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(ANIMBP_MobileLaser_C_SetLookAtLocation) == 0x000004, "Wrong alignment on ANIMBP_MobileLaser_C_SetLookAtLocation");
static_assert(sizeof(ANIMBP_MobileLaser_C_SetLookAtLocation) == 0x000010, "Wrong size on ANIMBP_MobileLaser_C_SetLookAtLocation");
static_assert(offsetof(ANIMBP_MobileLaser_C_SetLookAtLocation, Location) == 0x000000, "Member 'ANIMBP_MobileLaser_C_SetLookAtLocation::Location' has a wrong offset!");
static_assert(offsetof(ANIMBP_MobileLaser_C_SetLookAtLocation, Result) == 0x00000C, "Member 'ANIMBP_MobileLaser_C_SetLookAtLocation::Result' has a wrong offset!");

// Function ANIMBP_MobileLaser.ANIMBP_MobileLaser_C.GetAimTarget
// 0x0008 (0x0008 - 0x0000)
struct ANIMBP_MobileLaser_C_GetAimTarget final
{
public:
	class UOBJ_EnemyTarget_C*                     Target;                                            // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(ANIMBP_MobileLaser_C_GetAimTarget) == 0x000008, "Wrong alignment on ANIMBP_MobileLaser_C_GetAimTarget");
static_assert(sizeof(ANIMBP_MobileLaser_C_GetAimTarget) == 0x000008, "Wrong size on ANIMBP_MobileLaser_C_GetAimTarget");
static_assert(offsetof(ANIMBP_MobileLaser_C_GetAimTarget, Target) == 0x000000, "Member 'ANIMBP_MobileLaser_C_GetAimTarget::Target' has a wrong offset!");

// Function ANIMBP_MobileLaser.ANIMBP_MobileLaser_C.SetStunnedSequence
// 0x0010 (0x0010 - 0x0000)
struct ANIMBP_MobileLaser_C_SetStunnedSequence final
{
public:
	class UAnimSequence*                          StunnedSequence;                                   // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Result;                                            // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0009(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(ANIMBP_MobileLaser_C_SetStunnedSequence) == 0x000008, "Wrong alignment on ANIMBP_MobileLaser_C_SetStunnedSequence");
static_assert(sizeof(ANIMBP_MobileLaser_C_SetStunnedSequence) == 0x000010, "Wrong size on ANIMBP_MobileLaser_C_SetStunnedSequence");
static_assert(offsetof(ANIMBP_MobileLaser_C_SetStunnedSequence, StunnedSequence) == 0x000000, "Member 'ANIMBP_MobileLaser_C_SetStunnedSequence::StunnedSequence' has a wrong offset!");
static_assert(offsetof(ANIMBP_MobileLaser_C_SetStunnedSequence, Result) == 0x000008, "Member 'ANIMBP_MobileLaser_C_SetStunnedSequence::Result' has a wrong offset!");
static_assert(offsetof(ANIMBP_MobileLaser_C_SetStunnedSequence, CallFunc_IsValid_ReturnValue) == 0x000009, "Member 'ANIMBP_MobileLaser_C_SetStunnedSequence::CallFunc_IsValid_ReturnValue' has a wrong offset!");

// Function ANIMBP_MobileLaser.ANIMBP_MobileLaser_C.IsStunned
// 0x0001 (0x0001 - 0x0000)
struct ANIMBP_MobileLaser_C_IsStunned final
{
public:
	bool                                          Result;                                            // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(ANIMBP_MobileLaser_C_IsStunned) == 0x000001, "Wrong alignment on ANIMBP_MobileLaser_C_IsStunned");
static_assert(sizeof(ANIMBP_MobileLaser_C_IsStunned) == 0x000001, "Wrong size on ANIMBP_MobileLaser_C_IsStunned");
static_assert(offsetof(ANIMBP_MobileLaser_C_IsStunned, Result) == 0x000000, "Member 'ANIMBP_MobileLaser_C_IsStunned::Result' has a wrong offset!");

// Function ANIMBP_MobileLaser.ANIMBP_MobileLaser_C.SetVoiceAmplitude
// 0x0008 (0x0008 - 0x0000)
struct ANIMBP_MobileLaser_C_SetVoiceAmplitude final
{
public:
	float                                         VoiceAmplitude;                                    // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Result;                                            // 0x0004(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(ANIMBP_MobileLaser_C_SetVoiceAmplitude) == 0x000004, "Wrong alignment on ANIMBP_MobileLaser_C_SetVoiceAmplitude");
static_assert(sizeof(ANIMBP_MobileLaser_C_SetVoiceAmplitude) == 0x000008, "Wrong size on ANIMBP_MobileLaser_C_SetVoiceAmplitude");
static_assert(offsetof(ANIMBP_MobileLaser_C_SetVoiceAmplitude, VoiceAmplitude) == 0x000000, "Member 'ANIMBP_MobileLaser_C_SetVoiceAmplitude::VoiceAmplitude' has a wrong offset!");
static_assert(offsetof(ANIMBP_MobileLaser_C_SetVoiceAmplitude, Result) == 0x000004, "Member 'ANIMBP_MobileLaser_C_SetVoiceAmplitude::Result' has a wrong offset!");

}

