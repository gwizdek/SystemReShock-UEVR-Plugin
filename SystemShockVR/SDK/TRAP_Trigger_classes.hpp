#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: TRAP_Trigger

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "ENUM_InteractionType_structs.hpp"
#include "INTERACT_Base_classes.hpp"
#include "ENUM_TriggerCondition_structs.hpp"


namespace SDK
{

// BlueprintGeneratedClass TRAP_Trigger.TRAP_Trigger_C
// 0x0068 (0x0370 - 0x0308)
class ATRAP_Trigger_C : public AINTERACT_Base_C
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame_TRAP_Trigger_C;                     // 0x0308(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	class UBillboardComponent*                    Billboard;                                         // 0x0310(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UMaterialBillboardComponent*            TrapGroupBillboard;                                // 0x0318(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UBoxComponent*                          TriggerVolume;                                     // 0x0320(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	ENUM_InteractionType                          TargetInteractionType;                             // 0x0328(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_329[0x7];                                      // 0x0329(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class AINTERACT_Base_C*>               TargetInteracts;                                   // 0x0330(0x0010)(Edit, BlueprintVisible, DisableEditOnTemplate)
	TArray<struct FDataTableRowHandle>            TrapSprungGameEvents;                              // 0x0340(0x0010)(Edit, BlueprintVisible)
	bool                                          StartsEnabled;                                     // 0x0350(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          HasBeenInitialized;                                // 0x0351(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, SaveGame, IsPlainOldData, NoDestructor)
	bool                                          IsEnabled;                                         // 0x0352(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, SaveGame, IsPlainOldData, NoDestructor)
	bool                                          TriggerOnce;                                       // 0x0353(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                         LastTriggerTimestamp;                              // 0x0354(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, SaveGame, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ENUM_TriggerCondition                         TriggerCondition;                                  // 0x0358(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_359[0x3];                                      // 0x0359(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         TrapGroup;                                         // 0x035C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TArray<struct FDataTableRowHandle>            RequiredQuests;                                    // 0x0360(0x0010)(Edit, BlueprintVisible)

public:
	void ExecuteUbergraph_TRAP_Trigger(int32 EntryPoint);
	void BndEvt__TRAP_Trigger_TriggerVolume_K2Node_ComponentBoundEvent_1_ComponentEndOverlapSignature__DelegateSignature(class UPrimitiveComponent* OverlappedComponent, class AActor* OtherActor, class UPrimitiveComponent* OtherComp, int32 OtherBodyIndex);
	void ReceiveEndPlay(EEndPlayReason EndPlayReason);
	void ReceiveBeginPlay();
	void BndEvt__TriggerVolume_K2Node_ComponentBoundEvent_0_ComponentBeginOverlapSignature__DelegateSignature(class UPrimitiveComponent* OverlappedComponent, class AActor* OtherActor, class UPrimitiveComponent* OtherComp, int32 OtherBodyIndex, bool bFromSweep, const struct FHitResult& SweepResult);
	void UserConstructionScript();
	void InitializeTrap();
	void IsInTrapGroup(bool* Result);
	void CanSpringTrap(bool* Result);
	void HasTrapBeenTriggered(bool* Result);
	void HasCompletedRequiredQuests(bool* Result);
	void SetTrapEnabled(bool State, bool* StateChanged);
	void DismantleTrap();
	void OnSpringTrap(class APAWN_Hacker_Simple_C* Hacker);
	void EVENT_OnStoryQuestChanged(class FName StoryQuestName, bool Value);
	void TrySpringTrap();
	void TrySpringTrapFromOverlapEvent(class AActor* Actor, bool BeginOverlap, bool* Result);
	void OnTrapEnabledStateChanged();
	void TryBindToQuestChanged();
	void TryInteract(class AActor* SourceActor, class UPrimitiveComponent* CursorPrimitive, ENUM_InteractionType InteractionType, struct FSTRUCT_InteractResults* InteractResults);
	void TryUnbindFromQuestChanged();
	void TryEnableTrapCollision();
	void TryCompleteSprungGameEvents();
	void TryDismantleGroupedTraps();
	void SetInteractLocked(bool Locked, bool* Result);
	void IsInteractActivated(bool* Result);

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"TRAP_Trigger_C">();
	}
	static class ATRAP_Trigger_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<ATRAP_Trigger_C>();
	}
};
static_assert(alignof(ATRAP_Trigger_C) == 0x000008, "Wrong alignment on ATRAP_Trigger_C");
static_assert(sizeof(ATRAP_Trigger_C) == 0x000370, "Wrong size on ATRAP_Trigger_C");
static_assert(offsetof(ATRAP_Trigger_C, UberGraphFrame_TRAP_Trigger_C) == 0x000308, "Member 'ATRAP_Trigger_C::UberGraphFrame_TRAP_Trigger_C' has a wrong offset!");
static_assert(offsetof(ATRAP_Trigger_C, Billboard) == 0x000310, "Member 'ATRAP_Trigger_C::Billboard' has a wrong offset!");
static_assert(offsetof(ATRAP_Trigger_C, TrapGroupBillboard) == 0x000318, "Member 'ATRAP_Trigger_C::TrapGroupBillboard' has a wrong offset!");
static_assert(offsetof(ATRAP_Trigger_C, TriggerVolume) == 0x000320, "Member 'ATRAP_Trigger_C::TriggerVolume' has a wrong offset!");
static_assert(offsetof(ATRAP_Trigger_C, TargetInteractionType) == 0x000328, "Member 'ATRAP_Trigger_C::TargetInteractionType' has a wrong offset!");
static_assert(offsetof(ATRAP_Trigger_C, TargetInteracts) == 0x000330, "Member 'ATRAP_Trigger_C::TargetInteracts' has a wrong offset!");
static_assert(offsetof(ATRAP_Trigger_C, TrapSprungGameEvents) == 0x000340, "Member 'ATRAP_Trigger_C::TrapSprungGameEvents' has a wrong offset!");
static_assert(offsetof(ATRAP_Trigger_C, StartsEnabled) == 0x000350, "Member 'ATRAP_Trigger_C::StartsEnabled' has a wrong offset!");
static_assert(offsetof(ATRAP_Trigger_C, HasBeenInitialized) == 0x000351, "Member 'ATRAP_Trigger_C::HasBeenInitialized' has a wrong offset!");
static_assert(offsetof(ATRAP_Trigger_C, IsEnabled) == 0x000352, "Member 'ATRAP_Trigger_C::IsEnabled' has a wrong offset!");
static_assert(offsetof(ATRAP_Trigger_C, TriggerOnce) == 0x000353, "Member 'ATRAP_Trigger_C::TriggerOnce' has a wrong offset!");
static_assert(offsetof(ATRAP_Trigger_C, LastTriggerTimestamp) == 0x000354, "Member 'ATRAP_Trigger_C::LastTriggerTimestamp' has a wrong offset!");
static_assert(offsetof(ATRAP_Trigger_C, TriggerCondition) == 0x000358, "Member 'ATRAP_Trigger_C::TriggerCondition' has a wrong offset!");
static_assert(offsetof(ATRAP_Trigger_C, TrapGroup) == 0x00035C, "Member 'ATRAP_Trigger_C::TrapGroup' has a wrong offset!");
static_assert(offsetof(ATRAP_Trigger_C, RequiredQuests) == 0x000360, "Member 'ATRAP_Trigger_C::RequiredQuests' has a wrong offset!");

}

