#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: SystemReShock

#include "Basic.hpp"

#include "UMG_structs.hpp"
#include "UMG_classes.hpp"
#include "SystemReShock_structs.hpp"
#include "Engine_classes.hpp"
#include "CoreUObject_structs.hpp"
#include "CoreUObject_classes.hpp"
#include "SlateCore_structs.hpp"


namespace SDK
{

// Class SystemReShock.PerspectiveMeshWidget
// 0x0128 (0x0248 - 0x0120)
class UPerspectiveMeshWidget : public UPanelWidget
{
public:
	EMeshWidgetScalingType                        ScalingType;                                       // 0x0120(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	EMeshWidgetMouseDetectionType                 MouseDetectionType;                                // 0x0121(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_122[0x2];                                      // 0x0122(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	TDelegate<void()>                             OnPostConstructionEvent;                           // 0x0124(0x0010)(Edit, ZeroConstructor, InstancedReference, NoDestructor, Protected, NativeAccessSpecifierProtected)
	TDelegate<void()>                             OnSizeChangedEvent;                                // 0x0134(0x0010)(Edit, ZeroConstructor, InstancedReference, NoDestructor, Protected, NativeAccessSpecifierProtected)
	TDelegate<void(const struct FGeometry& MyGeometry, struct FPointerEvent& MouseEvent)> OnMouseButtonDownEvent;                            // 0x0144(0x0010)(Edit, ZeroConstructor, InstancedReference, NoDestructor, Protected, NativeAccessSpecifierProtected)
	TDelegate<void(const struct FGeometry& MyGeometry, struct FPointerEvent& MouseEvent)> OnMouseButtonUpEvent;                              // 0x0154(0x0010)(Edit, ZeroConstructor, InstancedReference, NoDestructor, Protected, NativeAccessSpecifierProtected)
	TDelegate<void(const struct FGeometry& MyGeometry, struct FPointerEvent& MouseEvent)> OnMouseMoveEvent;                                  // 0x0164(0x0010)(Edit, ZeroConstructor, InstancedReference, NoDestructor, Protected, NativeAccessSpecifierProtected)
	TDelegate<void(const struct FGeometry& MyGeometry, struct FPointerEvent& MouseEvent)> OnMouseDoubleClickEvent;                           // 0x0174(0x0010)(Edit, ZeroConstructor, InstancedReference, NoDestructor, Protected, NativeAccessSpecifierProtected)
	TDelegate<void(struct FGeometry& MyGeometry, struct FPointerEvent& MouseEvent)> OnMouseEnterEvent;                                 // 0x0184(0x0010)(Edit, ZeroConstructor, InstancedReference, NoDestructor, Protected, NativeAccessSpecifierProtected)
	TDelegate<void(struct FPointerEvent& MouseEvent)> OnMouseLeaveEvent;                                 // 0x0194(0x0010)(Edit, ZeroConstructor, InstancedReference, NoDestructor, Protected, NativeAccessSpecifierProtected)
	uint8                                         Pad_1A4[0x14];                                     // 0x01A4(0x0014)(Fixing Size After Last Property [ Dumper-7 ])
	struct FSlateBrush                            Brush;                                             // 0x01B8(0x0088)(NativeAccessSpecifierPrivate)
	class UCameraPanelWidget*                     ParentCameraWidget;                                // 0x0240(0x0008)(ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)

public:
	class UMaterialInstanceDynamic* ConvertToDynamicMaterialInstance(int32 MaterialIndex);
	void ForceRebuildMesh();
	void SetMaterial(int32 MaterialIndex, class UMaterialInterface* Material);
	void SetSurfaceBlendAmount(float Amount);
	void SetVertexColors(const struct FColor& NewColor);

	class UMaterialInterface* GetMaterial(int32 MaterialIndex) const;
	int32 GetNearestTriangleIndexToWindowPoint(int32 SubMeshIndex, const struct FVector2D& WindowPoint, struct FVector* OutBarycentricCoords, float* OutDistance) const;
	int32 GetNearestTriangleIndexToWindowPointForAnyMesh(const struct FVector2D& WindowPoint, int32* OutSubMeshIndex, struct FVector* OutBarycentricCoords, float* OutDistance) const;
	const struct FBox2D GetProjectedWindowBounds() const;
	int32 GetSubmeshCount() const;
	float GetSurfaceBlendAmount() const;
	struct FVector2D GetTextureCoordinatesForTrianglePoint(int32 SubMeshIndex, int32 TriangleIndex, int32 TexCoordIndex, const struct FVector& BarycentricCoords) const;
	int32 GetTriangleIndexAtWindowPoint(int32 SubMeshIndex, const struct FVector2D& WindowPoint, struct FVector* OutBarycentricCoords) const;
	int32 GetTriangleIndexAtWindowPointForAnyMesh(const struct FVector2D& WindowPoint, int32* OutSubMeshIndex, struct FVector* OutBarycentricCoords) const;
	struct FVector2D GetUnprojectedTrianglePoint(int32 SubMeshIndex, int32 TriangleIndex, const struct FVector& BarycentricCoords) const;
	bool GetWidgetOffsetFromWindowPoint(const struct FVector2D& WindowPoint, struct FVector2D* WidgetOffset, bool bFromCenter, bool bNearest) const;
	struct FVector2D GetWindowPointFromScreenPoint(const struct FVector2D& ScreenPoint) const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"PerspectiveMeshWidget">();
	}
	static class UPerspectiveMeshWidget* GetDefaultObj()
	{
		return GetDefaultObjImpl<UPerspectiveMeshWidget>();
	}
};
static_assert(alignof(UPerspectiveMeshWidget) == 0x000008, "Wrong alignment on UPerspectiveMeshWidget");
static_assert(sizeof(UPerspectiveMeshWidget) == 0x000248, "Wrong size on UPerspectiveMeshWidget");
static_assert(offsetof(UPerspectiveMeshWidget, ScalingType) == 0x000120, "Member 'UPerspectiveMeshWidget::ScalingType' has a wrong offset!");
static_assert(offsetof(UPerspectiveMeshWidget, MouseDetectionType) == 0x000121, "Member 'UPerspectiveMeshWidget::MouseDetectionType' has a wrong offset!");
static_assert(offsetof(UPerspectiveMeshWidget, OnPostConstructionEvent) == 0x000124, "Member 'UPerspectiveMeshWidget::OnPostConstructionEvent' has a wrong offset!");
static_assert(offsetof(UPerspectiveMeshWidget, OnSizeChangedEvent) == 0x000134, "Member 'UPerspectiveMeshWidget::OnSizeChangedEvent' has a wrong offset!");
static_assert(offsetof(UPerspectiveMeshWidget, OnMouseButtonDownEvent) == 0x000144, "Member 'UPerspectiveMeshWidget::OnMouseButtonDownEvent' has a wrong offset!");
static_assert(offsetof(UPerspectiveMeshWidget, OnMouseButtonUpEvent) == 0x000154, "Member 'UPerspectiveMeshWidget::OnMouseButtonUpEvent' has a wrong offset!");
static_assert(offsetof(UPerspectiveMeshWidget, OnMouseMoveEvent) == 0x000164, "Member 'UPerspectiveMeshWidget::OnMouseMoveEvent' has a wrong offset!");
static_assert(offsetof(UPerspectiveMeshWidget, OnMouseDoubleClickEvent) == 0x000174, "Member 'UPerspectiveMeshWidget::OnMouseDoubleClickEvent' has a wrong offset!");
static_assert(offsetof(UPerspectiveMeshWidget, OnMouseEnterEvent) == 0x000184, "Member 'UPerspectiveMeshWidget::OnMouseEnterEvent' has a wrong offset!");
static_assert(offsetof(UPerspectiveMeshWidget, OnMouseLeaveEvent) == 0x000194, "Member 'UPerspectiveMeshWidget::OnMouseLeaveEvent' has a wrong offset!");
static_assert(offsetof(UPerspectiveMeshWidget, Brush) == 0x0001B8, "Member 'UPerspectiveMeshWidget::Brush' has a wrong offset!");
static_assert(offsetof(UPerspectiveMeshWidget, ParentCameraWidget) == 0x000240, "Member 'UPerspectiveMeshWidget::ParentCameraWidget' has a wrong offset!");

// Class SystemReShock.GridMeshWidget
// 0x0090 (0x02D8 - 0x0248)
class UGridMeshWidget final : public UPerspectiveMeshWidget
{
public:
	TArray<class UMaterialInterface*>             Materials;                                         // 0x0248(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Protected, ExposeOnSpawn, NativeAccessSpecifierProtected)
	struct FIntPoint                              CellSize;                                          // 0x0258(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         bAutoComputeCellUVs : 1;                           // 0x0260(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected))
	uint8                                         Pad_261[0x3];                                      // 0x0261(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector2D                              CellUVDimensions;                                  // 0x0264(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	struct FVector2D                              InitialUVOffset;                                   // 0x026C(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	struct FColor                                 Color;                                             // 0x0274(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	struct FGridMeshFadeParams                    FadeParams;                                        // 0x0278(0x0010)(Edit, NoDestructor, Protected, NativeAccessSpecifierProtected)
	struct FGridMeshBorderParams                  BorderParams;                                      // 0x0288(0x0020)(Edit, NoDestructor, Protected, NativeAccessSpecifierProtected)
	uint8                                         bFlipVerticalLayout : 1;                           // 0x02A8(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, AdvancedDisplay, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected))
	uint8                                         bFlipVerticalTexCoords : 1;                        // 0x02A8(0x0001)(BitIndex: 0x01, PropSize: 0x0001 (Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, AdvancedDisplay, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected))
	uint8                                         bCreateMeshesWithoutMaterials : 1;                 // 0x02A8(0x0001)(BitIndex: 0x02, PropSize: 0x0001 (Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, AdvancedDisplay, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected))
	uint8                                         bIsFocusable : 1;                                  // 0x02A8(0x0001)(BitIndex: 0x03, PropSize: 0x0001 (Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, AdvancedDisplay, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected))
	uint8                                         Pad_2A9[0x2F];                                     // 0x02A9(0x002F)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	class UMaterialInstanceDynamic* ConvertBorderToDynamicMaterialInstance(class UMaterialInstanceDynamic** OutCornerMaterial);
	void SetBorderColor(const struct FColor& Color_0);
	void SetCellSize(const struct FIntPoint& InCellSize);
	void SetCellUVDimensions(const struct FVector2D& InCellUVDimensions);
	void SetColor(const struct FColor& Color_0);
	void SetFlipVerticalLayout(bool bInFlipVerticalLayout);
	void SetGridSize(const struct FIntPoint& GridSize);

	int32 GetBorderSize() const;
	int32 GetDoubleBorderSize() const;
	bool GetGridCoordinatesFromWindowPoint(const struct FVector2D& WindowPoint, const struct FVector2D& CursorGridOffset, struct FIntPoint* GridCoords) const;
	bool GetProjectedCellLocationFromGridCoordinates(const struct FIntPoint& GridCoords, const struct FVector2D& CursorGridOffset, struct FVector2D* OutProjectedLocation) const;
	struct FVector2D GetWidgetOffsetFromGridCoordinates(const struct FIntPoint& GridCoords) const;
	struct FVector2D GetWidgetSizeFromGridSize(const struct FIntPoint& GridSize) const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"GridMeshWidget">();
	}
	static class UGridMeshWidget* GetDefaultObj()
	{
		return GetDefaultObjImpl<UGridMeshWidget>();
	}
};
static_assert(alignof(UGridMeshWidget) == 0x000008, "Wrong alignment on UGridMeshWidget");
static_assert(sizeof(UGridMeshWidget) == 0x0002D8, "Wrong size on UGridMeshWidget");
static_assert(offsetof(UGridMeshWidget, Materials) == 0x000248, "Member 'UGridMeshWidget::Materials' has a wrong offset!");
static_assert(offsetof(UGridMeshWidget, CellSize) == 0x000258, "Member 'UGridMeshWidget::CellSize' has a wrong offset!");
static_assert(offsetof(UGridMeshWidget, CellUVDimensions) == 0x000264, "Member 'UGridMeshWidget::CellUVDimensions' has a wrong offset!");
static_assert(offsetof(UGridMeshWidget, InitialUVOffset) == 0x00026C, "Member 'UGridMeshWidget::InitialUVOffset' has a wrong offset!");
static_assert(offsetof(UGridMeshWidget, Color) == 0x000274, "Member 'UGridMeshWidget::Color' has a wrong offset!");
static_assert(offsetof(UGridMeshWidget, FadeParams) == 0x000278, "Member 'UGridMeshWidget::FadeParams' has a wrong offset!");
static_assert(offsetof(UGridMeshWidget, BorderParams) == 0x000288, "Member 'UGridMeshWidget::BorderParams' has a wrong offset!");

// Class SystemReShock.AnimNotify_ActorMessage
// 0x0018 (0x0050 - 0x0038)
class UAnimNotify_ActorMessage final : public UAnimNotify
{
public:
	EActorMessagePriority                         Priority;                                          // 0x0038(0x0001)(Edit, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_39[0x7];                                       // 0x0039(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 Message;                                           // 0x0040(0x0010)(Edit, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"AnimNotify_ActorMessage">();
	}
	static class UAnimNotify_ActorMessage* GetDefaultObj()
	{
		return GetDefaultObjImpl<UAnimNotify_ActorMessage>();
	}
};
static_assert(alignof(UAnimNotify_ActorMessage) == 0x000008, "Wrong alignment on UAnimNotify_ActorMessage");
static_assert(sizeof(UAnimNotify_ActorMessage) == 0x000050, "Wrong size on UAnimNotify_ActorMessage");
static_assert(offsetof(UAnimNotify_ActorMessage, Priority) == 0x000038, "Member 'UAnimNotify_ActorMessage::Priority' has a wrong offset!");
static_assert(offsetof(UAnimNotify_ActorMessage, Message) == 0x000040, "Member 'UAnimNotify_ActorMessage::Message' has a wrong offset!");

// Class SystemReShock.LifeSimulation
// 0x01C8 (0x01F0 - 0x0028)
class ULifeSimulation : public UObject
{
public:
	class ULevelVoxelizationData*                 CurrentLevelVoxelData;                             // 0x0028(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	int32                                         SurviveMinNeighborCount;                           // 0x0030(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	int32                                         SurviveMaxNeighborCount;                           // 0x0034(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	int32                                         ReproduceMinNeighborCount;                         // 0x0038(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	int32                                         ReproduceMaxNeighborCount;                         // 0x003C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	int32                                         MaxObservationDistance;                            // 0x0040(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	int32                                         MaxSimulationDistance;                             // 0x0044(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	int32                                         InitialPatternDensityPercentage;                   // 0x0048(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_4C[0x4];                                       // 0x004C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UDataTable*                             PatternDataTable;                                  // 0x0050(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_58[0x198];                                     // 0x0058(0x0198)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	bool OnActivateCell(const struct FVoxelWallLocation& WallLocation, class UPrimitiveComponent* PrimitiveComponent);
	bool OnDeactivateCell(const struct FVoxelWallLocation& WallLocation, class UPrimitiveComponent* PrimitiveComponent);
	void ResetSimulation(class UBatchedLevelVoxelization* InBatchedLevelVoxelization, class ULevelVoxelizationData* InCurrentLevelData, bool bDeactivateCells);
	bool TryActivateCellAtLocation(const struct FVoxelWallLocation& WallLocation, float MinLifetime);
	void UpdateSimulation(const struct FIntVector& ObserverLocation, float DeltaSeconds);

	float GetCellLifetimeRemaining(const struct FVoxelWallLocation& WallLocation) const;
	TArray<struct FVoxelWallLocation> GetCellLocationsWithNeighbors() const;
	int32 GetCellNeighborCount(const struct FVoxelWallLocation& WallLocation) const;
	TArray<struct FBox> GetIslandWorldBoundingBoxes(class UBatchedLevelVoxelization* BatchedLevelVoxelization, const struct FVector& LevelOffset, bool bOnlyActiveIslands) const;
	class UPrimitiveComponent* GetWallComponentByIndex(int32 ComponentIndex) const;
	bool IsCellActive(const struct FVoxelWallLocation& WallLocation) const;
	bool IsCellVisibleToObserver(const struct FIntVector& CellLocation) const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"LifeSimulation">();
	}
	static class ULifeSimulation* GetDefaultObj()
	{
		return GetDefaultObjImpl<ULifeSimulation>();
	}
};
static_assert(alignof(ULifeSimulation) == 0x000008, "Wrong alignment on ULifeSimulation");
static_assert(sizeof(ULifeSimulation) == 0x0001F0, "Wrong size on ULifeSimulation");
static_assert(offsetof(ULifeSimulation, CurrentLevelVoxelData) == 0x000028, "Member 'ULifeSimulation::CurrentLevelVoxelData' has a wrong offset!");
static_assert(offsetof(ULifeSimulation, SurviveMinNeighborCount) == 0x000030, "Member 'ULifeSimulation::SurviveMinNeighborCount' has a wrong offset!");
static_assert(offsetof(ULifeSimulation, SurviveMaxNeighborCount) == 0x000034, "Member 'ULifeSimulation::SurviveMaxNeighborCount' has a wrong offset!");
static_assert(offsetof(ULifeSimulation, ReproduceMinNeighborCount) == 0x000038, "Member 'ULifeSimulation::ReproduceMinNeighborCount' has a wrong offset!");
static_assert(offsetof(ULifeSimulation, ReproduceMaxNeighborCount) == 0x00003C, "Member 'ULifeSimulation::ReproduceMaxNeighborCount' has a wrong offset!");
static_assert(offsetof(ULifeSimulation, MaxObservationDistance) == 0x000040, "Member 'ULifeSimulation::MaxObservationDistance' has a wrong offset!");
static_assert(offsetof(ULifeSimulation, MaxSimulationDistance) == 0x000044, "Member 'ULifeSimulation::MaxSimulationDistance' has a wrong offset!");
static_assert(offsetof(ULifeSimulation, InitialPatternDensityPercentage) == 0x000048, "Member 'ULifeSimulation::InitialPatternDensityPercentage' has a wrong offset!");
static_assert(offsetof(ULifeSimulation, PatternDataTable) == 0x000050, "Member 'ULifeSimulation::PatternDataTable' has a wrong offset!");

// Class SystemReShock.ActorAnimMessageInterface
// 0x0000 (0x0028 - 0x0028)
class IActorAnimMessageInterface final : public IInterface
{
public:
	bool ReceiveAnimationMessage(const EActorMessagePriority& Priority, const class FString& Message);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"ActorAnimMessageInterface">();
	}
	static class IActorAnimMessageInterface* GetDefaultObj()
	{
		return GetDefaultObjImpl<IActorAnimMessageInterface>();
	}
};
static_assert(alignof(IActorAnimMessageInterface) == 0x000008, "Wrong alignment on IActorAnimMessageInterface");
static_assert(sizeof(IActorAnimMessageInterface) == 0x000028, "Wrong size on IActorAnimMessageInterface");

// Class SystemReShock.CameraPanelWidget
// 0x00E0 (0x0210 - 0x0130)
class UCameraPanelWidget final : public UCanvasPanel
{
public:
	ECameraWidgetRenderMode                       RenderMode;                                        // 0x0130(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_131[0x3];                                      // 0x0131(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         HorizontalFOV;                                     // 0x0134(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         Distance;                                          // 0x0138(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	struct FVector                                LookAtLocation;                                    // 0x013C(0x000C)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	struct FRotator                               Rotation;                                          // 0x0148(0x000C)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, NativeAccessSpecifierProtected)
	float                                         SurfaceCurvature;                                  // 0x0154(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         VerticalSurfaceCurvature;                          // 0x0158(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         SurfaceCurvePower;                                 // 0x015C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	TDelegate<void(const struct FGeometry& MyGeometry, struct FPointerEvent& MouseEvent)> OnMouseButtonDownEvent;                            // 0x0160(0x0010)(Edit, ZeroConstructor, InstancedReference, NoDestructor, Protected, NativeAccessSpecifierProtected)
	TDelegate<void(const struct FGeometry& MyGeometry, struct FPointerEvent& MouseEvent)> OnMouseButtonUpEvent;                              // 0x0170(0x0010)(Edit, ZeroConstructor, InstancedReference, NoDestructor, Protected, NativeAccessSpecifierProtected)
	TDelegate<void(const struct FGeometry& MyGeometry, struct FPointerEvent& MouseEvent, bool bEventHandledByChild)> OnMouseMoveEvent;                                  // 0x0180(0x0010)(Edit, ZeroConstructor, InstancedReference, NoDestructor, Protected, NativeAccessSpecifierProtected)
	TDelegate<void(const struct FGeometry& MyGeometry, struct FPointerEvent& MouseEvent)> OnMouseDoubleClickEvent;                           // 0x0190(0x0010)(Edit, ZeroConstructor, InstancedReference, NoDestructor, Protected, NativeAccessSpecifierProtected)
	bool                                          bAutoComputeVerticalCurvature;                     // 0x01A0(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_1A1[0x17];                                     // 0x01A1(0x0017)(Fixing Size After Last Property [ Dumper-7 ])
	class UCameraPanelWidget*                     ParentCameraPanel;                                 // 0x01B8(0x0008)(ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	TSet<class UPerspectiveMeshWidget*>           ChildPerspectiveMeshWidgets;                       // 0x01C0(0x0050)(ExportObject, ContainsInstancedReference, NativeAccessSpecifierPrivate)

public:
	void ResetMouseStates();
	void SetHorizontalSurfaceCurvature(float Ratio);
	void SetVerticalSurfaceCurvature(float Ratio);
	void SetVirtualMouseScreenLocation(const struct FVector2D& ScreenLocation);
	void VirtualMouseButtonDown(const struct FKey& MouseButton);
	void VirtualMouseButtonUp(const struct FKey& MouseButton);
	void VirtualMouseDoubleClick(const struct FKey& MouseButton);

	struct FVector2D GetVirtualMouseScreenLocation() const;
	struct FVector2D GetVirtualMouseViewportLocation() const;
	struct FVector2D ProjectScreenPoint(const struct FVector2D& ScreenPoint) const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"CameraPanelWidget">();
	}
	static class UCameraPanelWidget* GetDefaultObj()
	{
		return GetDefaultObjImpl<UCameraPanelWidget>();
	}
};
static_assert(alignof(UCameraPanelWidget) == 0x000008, "Wrong alignment on UCameraPanelWidget");
static_assert(sizeof(UCameraPanelWidget) == 0x000210, "Wrong size on UCameraPanelWidget");
static_assert(offsetof(UCameraPanelWidget, RenderMode) == 0x000130, "Member 'UCameraPanelWidget::RenderMode' has a wrong offset!");
static_assert(offsetof(UCameraPanelWidget, HorizontalFOV) == 0x000134, "Member 'UCameraPanelWidget::HorizontalFOV' has a wrong offset!");
static_assert(offsetof(UCameraPanelWidget, Distance) == 0x000138, "Member 'UCameraPanelWidget::Distance' has a wrong offset!");
static_assert(offsetof(UCameraPanelWidget, LookAtLocation) == 0x00013C, "Member 'UCameraPanelWidget::LookAtLocation' has a wrong offset!");
static_assert(offsetof(UCameraPanelWidget, Rotation) == 0x000148, "Member 'UCameraPanelWidget::Rotation' has a wrong offset!");
static_assert(offsetof(UCameraPanelWidget, SurfaceCurvature) == 0x000154, "Member 'UCameraPanelWidget::SurfaceCurvature' has a wrong offset!");
static_assert(offsetof(UCameraPanelWidget, VerticalSurfaceCurvature) == 0x000158, "Member 'UCameraPanelWidget::VerticalSurfaceCurvature' has a wrong offset!");
static_assert(offsetof(UCameraPanelWidget, SurfaceCurvePower) == 0x00015C, "Member 'UCameraPanelWidget::SurfaceCurvePower' has a wrong offset!");
static_assert(offsetof(UCameraPanelWidget, OnMouseButtonDownEvent) == 0x000160, "Member 'UCameraPanelWidget::OnMouseButtonDownEvent' has a wrong offset!");
static_assert(offsetof(UCameraPanelWidget, OnMouseButtonUpEvent) == 0x000170, "Member 'UCameraPanelWidget::OnMouseButtonUpEvent' has a wrong offset!");
static_assert(offsetof(UCameraPanelWidget, OnMouseMoveEvent) == 0x000180, "Member 'UCameraPanelWidget::OnMouseMoveEvent' has a wrong offset!");
static_assert(offsetof(UCameraPanelWidget, OnMouseDoubleClickEvent) == 0x000190, "Member 'UCameraPanelWidget::OnMouseDoubleClickEvent' has a wrong offset!");
static_assert(offsetof(UCameraPanelWidget, bAutoComputeVerticalCurvature) == 0x0001A0, "Member 'UCameraPanelWidget::bAutoComputeVerticalCurvature' has a wrong offset!");
static_assert(offsetof(UCameraPanelWidget, ParentCameraPanel) == 0x0001B8, "Member 'UCameraPanelWidget::ParentCameraPanel' has a wrong offset!");
static_assert(offsetof(UCameraPanelWidget, ChildPerspectiveMeshWidgets) == 0x0001C0, "Member 'UCameraPanelWidget::ChildPerspectiveMeshWidgets' has a wrong offset!");

// Class SystemReShock.CompassMeshWidget
// 0x0050 (0x02B0 - 0x0260)
class UCompassMeshWidget : public UUserWidget
{
public:
	float                                         DemarcationDistance;                               // 0x0260(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         DemarcationVerticalOffset;                         // 0x0264(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         DemarcationAngleDelta;                             // 0x0268(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         CurrentYawAngle;                                   // 0x026C(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         DemarcationFontSize;                               // 0x0270(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_274[0x4];                                      // 0x0274(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UFont*                                  DemarcationFont;                                   // 0x0278(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UMaterialInterface*                     DemarcationMaterial;                               // 0x0280(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	struct FColor                                 DemarcationColor;                                  // 0x0288(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_28C[0x4];                                      // 0x028C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class UTextMeshWidget*>                AngleDemarcationTextWidgets;                       // 0x0290(0x0010)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, ContainsInstancedReference, Protected, NativeAccessSpecifierProtected)
	uint8                                         Pad_2A0[0x10];                                     // 0x02A0(0x0010)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void SetCurrentYawAngle(float NewAngle);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"CompassMeshWidget">();
	}
	static class UCompassMeshWidget* GetDefaultObj()
	{
		return GetDefaultObjImpl<UCompassMeshWidget>();
	}
};
static_assert(alignof(UCompassMeshWidget) == 0x000008, "Wrong alignment on UCompassMeshWidget");
static_assert(sizeof(UCompassMeshWidget) == 0x0002B0, "Wrong size on UCompassMeshWidget");
static_assert(offsetof(UCompassMeshWidget, DemarcationDistance) == 0x000260, "Member 'UCompassMeshWidget::DemarcationDistance' has a wrong offset!");
static_assert(offsetof(UCompassMeshWidget, DemarcationVerticalOffset) == 0x000264, "Member 'UCompassMeshWidget::DemarcationVerticalOffset' has a wrong offset!");
static_assert(offsetof(UCompassMeshWidget, DemarcationAngleDelta) == 0x000268, "Member 'UCompassMeshWidget::DemarcationAngleDelta' has a wrong offset!");
static_assert(offsetof(UCompassMeshWidget, CurrentYawAngle) == 0x00026C, "Member 'UCompassMeshWidget::CurrentYawAngle' has a wrong offset!");
static_assert(offsetof(UCompassMeshWidget, DemarcationFontSize) == 0x000270, "Member 'UCompassMeshWidget::DemarcationFontSize' has a wrong offset!");
static_assert(offsetof(UCompassMeshWidget, DemarcationFont) == 0x000278, "Member 'UCompassMeshWidget::DemarcationFont' has a wrong offset!");
static_assert(offsetof(UCompassMeshWidget, DemarcationMaterial) == 0x000280, "Member 'UCompassMeshWidget::DemarcationMaterial' has a wrong offset!");
static_assert(offsetof(UCompassMeshWidget, DemarcationColor) == 0x000288, "Member 'UCompassMeshWidget::DemarcationColor' has a wrong offset!");
static_assert(offsetof(UCompassMeshWidget, AngleDemarcationTextWidgets) == 0x000290, "Member 'UCompassMeshWidget::AngleDemarcationTextWidgets' has a wrong offset!");

// Class SystemReShock.PerspectiveMeshSlot
// 0x0018 (0x0050 - 0x0038)
class UPerspectiveMeshSlot final : public UPanelSlot
{
public:
	struct FVector2D                              Position;                                          // 0x0038(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector2D                              Size;                                              // 0x0040(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_48[0x8];                                       // 0x0048(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void SetPosition(const struct FVector2D& InPosition);
	void SetSize(const struct FVector2D& InSize);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"PerspectiveMeshSlot">();
	}
	static class UPerspectiveMeshSlot* GetDefaultObj()
	{
		return GetDefaultObjImpl<UPerspectiveMeshSlot>();
	}
};
static_assert(alignof(UPerspectiveMeshSlot) == 0x000008, "Wrong alignment on UPerspectiveMeshSlot");
static_assert(sizeof(UPerspectiveMeshSlot) == 0x000050, "Wrong size on UPerspectiveMeshSlot");
static_assert(offsetof(UPerspectiveMeshSlot, Position) == 0x000038, "Member 'UPerspectiveMeshSlot::Position' has a wrong offset!");
static_assert(offsetof(UPerspectiveMeshSlot, Size) == 0x000040, "Member 'UPerspectiveMeshSlot::Size' has a wrong offset!");

// Class SystemReShock.ShockActivityFunctionLibrary
// 0x0000 (0x0028 - 0x0028)
class UShockActivityFunctionLibrary final : public UBlueprintFunctionLibrary
{
public:
	static bool EndActivity(const class UObject* WorldContextObject, const class FString& ActivityId, EShockActivityOutcome ActivityOutcome);
	static bool ResetActivities(const class UObject* WorldContextObject);
	static bool ResumeActivity(const class UObject* WorldContextObject, const class FString& ActivityId);
	static bool SetActivityAvailability(const class UObject* WorldContextObject, const class FString& ActivityId, bool bAvailable);
	static bool StartActivity(const class UObject* WorldContextObject, const class FString& ActivityId);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"ShockActivityFunctionLibrary">();
	}
	static class UShockActivityFunctionLibrary* GetDefaultObj()
	{
		return GetDefaultObjImpl<UShockActivityFunctionLibrary>();
	}
};
static_assert(alignof(UShockActivityFunctionLibrary) == 0x000008, "Wrong alignment on UShockActivityFunctionLibrary");
static_assert(sizeof(UShockActivityFunctionLibrary) == 0x000028, "Wrong size on UShockActivityFunctionLibrary");

// Class SystemReShock.ShockActivitySubsystem
// 0x0018 (0x0048 - 0x0030)
class UShockActivitySubsystem final : public UGameInstanceSubsystem
{
public:
	uint8                                         Pad_30[0x18];                                      // 0x0030(0x0018)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"ShockActivitySubsystem">();
	}
	static class UShockActivitySubsystem* GetDefaultObj()
	{
		return GetDefaultObjImpl<UShockActivitySubsystem>();
	}
};
static_assert(alignof(UShockActivitySubsystem) == 0x000008, "Wrong alignment on UShockActivitySubsystem");
static_assert(sizeof(UShockActivitySubsystem) == 0x000048, "Wrong size on UShockActivitySubsystem");

// Class SystemReShock.ShockChess
// 0x00F0 (0x0118 - 0x0028)
class UShockChess final : public UObject
{
public:
	FMulticastInlineDelegateProperty_             OnPieceSelected;                                   // 0x0028(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, Protected, NativeAccessSpecifierProtected)
	FMulticastInlineDelegateProperty_             OnPieceMoved;                                      // 0x0038(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, Protected, NativeAccessSpecifierProtected)
	FMulticastInlineDelegateProperty_             OnPieceCaptured;                                   // 0x0048(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, Protected, NativeAccessSpecifierProtected)
	FMulticastInlineDelegateProperty_             OnGameOver;                                        // 0x0058(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, Protected, NativeAccessSpecifierProtected)
	struct FChessboard                            Chessboard;                                        // 0x0068(0x0080)(SaveGame, Protected, NativeAccessSpecifierProtected)
	EChessColor                                   PlayerColor;                                       // 0x00E8(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, SaveGame, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	EChessColor                                   TurnColor;                                         // 0x00E9(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, SaveGame, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_EA[0x2E];                                      // 0x00EA(0x002E)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	bool IsLegalMove(const struct FChessMoveRequest& MoveRequest, EChessSquare* OutCaptureSquare);
	void ResumeGame(int32 InComputerSearchDepth);
	void StartGame(EChessColor InPlayerColor, int32 InComputerSearchDepth, const TArray<struct FChessMoveRequest>& InitialMoveList);
	void StartGameFromState(EChessColor InPlayerColor, EChessColor InTurnColor, int32 InComputerSearchDepth, const TMap<EChessSquare, EChessPiece>& WhitePieceMap, const TMap<EChessSquare, EChessPiece>& BlackPieceMap);
	bool TryErasePiece(EChessSquare Square);
	bool TryMovePiece(const struct FChessMoveRequest& MoveRequest);

	EChessColor GetColorFromFlags(uint8 SquareFlags) const;
	struct FIntPoint GetCoordsForSquare(EChessSquare Square) const;
	EChessSquare GetKingSquare(EChessColor Color) const;
	bool GetPieceFlagsMap(TMap<EChessSquare, uint8>* OutPieceFlagMap) const;
	bool GetPieceFlagsMapForColor(EChessColor Color, TMap<EChessSquare, uint8>* OutPieceFlagMap) const;
	EChessPiece GetPieceFromFlags(uint8 SquareFlags) const;
	EChessColor GetSquareColor(EChessSquare Square) const;
	uint8 GetSquareFlags(EChessSquare Square) const;
	EChessSquare GetSquareFromIndex(int32 SquareIndex) const;
	int32 GetSquareIndexFromCoords(int32 X, int32 Y) const;
	bool HasFinishedPieceTransitions() const;
	bool IsGameOver() const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"ShockChess">();
	}
	static class UShockChess* GetDefaultObj()
	{
		return GetDefaultObjImpl<UShockChess>();
	}
};
static_assert(alignof(UShockChess) == 0x000008, "Wrong alignment on UShockChess");
static_assert(sizeof(UShockChess) == 0x000118, "Wrong size on UShockChess");
static_assert(offsetof(UShockChess, OnPieceSelected) == 0x000028, "Member 'UShockChess::OnPieceSelected' has a wrong offset!");
static_assert(offsetof(UShockChess, OnPieceMoved) == 0x000038, "Member 'UShockChess::OnPieceMoved' has a wrong offset!");
static_assert(offsetof(UShockChess, OnPieceCaptured) == 0x000048, "Member 'UShockChess::OnPieceCaptured' has a wrong offset!");
static_assert(offsetof(UShockChess, OnGameOver) == 0x000058, "Member 'UShockChess::OnGameOver' has a wrong offset!");
static_assert(offsetof(UShockChess, Chessboard) == 0x000068, "Member 'UShockChess::Chessboard' has a wrong offset!");
static_assert(offsetof(UShockChess, PlayerColor) == 0x0000E8, "Member 'UShockChess::PlayerColor' has a wrong offset!");
static_assert(offsetof(UShockChess, TurnColor) == 0x0000E9, "Member 'UShockChess::TurnColor' has a wrong offset!");

// Class SystemReShock.ShockPlayerController
// 0x0058 (0x05D8 - 0x0580)
class AShockPlayerController : public APlayerController
{
public:
	uint8                                         Pad_580[0x58];                                     // 0x0580(0x0058)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"ShockPlayerController">();
	}
	static class AShockPlayerController* GetDefaultObj()
	{
		return GetDefaultObjImpl<AShockPlayerController>();
	}
};
static_assert(alignof(AShockPlayerController) == 0x000008, "Wrong alignment on AShockPlayerController");
static_assert(sizeof(AShockPlayerController) == 0x0005D8, "Wrong size on AShockPlayerController");

// Class SystemReShock.SplineMeshWidget
// 0x0060 (0x02A8 - 0x0248)
class USplineMeshWidget final : public UPerspectiveMeshWidget
{
public:
	class UMaterialInterface*                     SplineMaterial;                                    // 0x0248(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	struct FColor                                 SplineColor;                                       // 0x0250(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         SplineWidth;                                       // 0x0254(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         SubdivisionLength;                                 // 0x0258(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_25C[0x4];                                      // 0x025C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FVector2D>                      SplinePoints;                                      // 0x0260(0x0010)(Edit, ZeroConstructor, Protected, NativeAccessSpecifierProtected)
	class UMaterialInterface*                     EndCapMaterial;                                    // 0x0270(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	struct FColor                                 EndCapColor;                                       // 0x0278(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_27C[0x4];                                      // 0x027C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UMaterialInterface*                     GlowMaterial;                                      // 0x0280(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	struct FColor                                 GlowColor;                                         // 0x0288(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         GlowSize;                                          // 0x028C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         GlowOffset;                                        // 0x0290(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          bAutoUpdateGlowSizeParam;                          // 0x0294(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_295[0x13];                                     // 0x0295(0x0013)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	class UMaterialInstanceDynamic* ConvertEndcapToDynamicMaterialInstance();
	class UMaterialInstanceDynamic* ConvertGlowToDynamicMaterialInstance();
	void SetEndCapColor(const struct FColor& Color);
	void SetGlowColor(const struct FColor& Color);
	void SetGlowOffset(float Offset);
	void SetGlowSize(float Size);
	void SetSplineColor(const struct FColor& Color);
	void SetSplinePointLocation(int32 PointIndex, const struct FVector2D& Location);
	void SetSplineWidth(float Width);

	int32 GetSplinePointCount() const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"SplineMeshWidget">();
	}
	static class USplineMeshWidget* GetDefaultObj()
	{
		return GetDefaultObjImpl<USplineMeshWidget>();
	}
};
static_assert(alignof(USplineMeshWidget) == 0x000008, "Wrong alignment on USplineMeshWidget");
static_assert(sizeof(USplineMeshWidget) == 0x0002A8, "Wrong size on USplineMeshWidget");
static_assert(offsetof(USplineMeshWidget, SplineMaterial) == 0x000248, "Member 'USplineMeshWidget::SplineMaterial' has a wrong offset!");
static_assert(offsetof(USplineMeshWidget, SplineColor) == 0x000250, "Member 'USplineMeshWidget::SplineColor' has a wrong offset!");
static_assert(offsetof(USplineMeshWidget, SplineWidth) == 0x000254, "Member 'USplineMeshWidget::SplineWidth' has a wrong offset!");
static_assert(offsetof(USplineMeshWidget, SubdivisionLength) == 0x000258, "Member 'USplineMeshWidget::SubdivisionLength' has a wrong offset!");
static_assert(offsetof(USplineMeshWidget, SplinePoints) == 0x000260, "Member 'USplineMeshWidget::SplinePoints' has a wrong offset!");
static_assert(offsetof(USplineMeshWidget, EndCapMaterial) == 0x000270, "Member 'USplineMeshWidget::EndCapMaterial' has a wrong offset!");
static_assert(offsetof(USplineMeshWidget, EndCapColor) == 0x000278, "Member 'USplineMeshWidget::EndCapColor' has a wrong offset!");
static_assert(offsetof(USplineMeshWidget, GlowMaterial) == 0x000280, "Member 'USplineMeshWidget::GlowMaterial' has a wrong offset!");
static_assert(offsetof(USplineMeshWidget, GlowColor) == 0x000288, "Member 'USplineMeshWidget::GlowColor' has a wrong offset!");
static_assert(offsetof(USplineMeshWidget, GlowSize) == 0x00028C, "Member 'USplineMeshWidget::GlowSize' has a wrong offset!");
static_assert(offsetof(USplineMeshWidget, GlowOffset) == 0x000290, "Member 'USplineMeshWidget::GlowOffset' has a wrong offset!");
static_assert(offsetof(USplineMeshWidget, bAutoUpdateGlowSizeParam) == 0x000294, "Member 'USplineMeshWidget::bAutoUpdateGlowSizeParam' has a wrong offset!");

// Class SystemReShock.SystemShockFunctionLibrary
// 0x0000 (0x0028 - 0x0028)
class USystemShockFunctionLibrary final : public UBlueprintFunctionLibrary
{
public:
	static class FName GetBestCultureFromRowNames(const class FString& CultureName, const TArray<class FName>& CultureRowNames);
	static int32 GetBestCultureIndex(const class FString& CultureName, const TArray<class FString>& CandidateNames);
	static int32 GetBestTicTacToeMove(const TArray<uint8>& CellStates, int32 LevelSize, uint8 PlayerId, uint8 OtherPlayerID, bool bFullDepth, bool bWrapLevel, const TArray<int32>& ScoreTable);
	static bool GetStaticMeshTrackProperties(class UStaticMesh* StaticMesh, int32 UVChannel, float LongSideBias, const struct FBox2D& TexCoordBounds, float* OutTrackLength, struct FVector2D* OutUCoordInterval);
	static int32 GetTicTacToeScoreForMove(const TArray<uint8>& CellStates, int32 LevelSize, int32 CellIndex, uint8 NewState, bool bWrapLevel, const TArray<int32>& ScoreTable);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"SystemShockFunctionLibrary">();
	}
	static class USystemShockFunctionLibrary* GetDefaultObj()
	{
		return GetDefaultObjImpl<USystemShockFunctionLibrary>();
	}
};
static_assert(alignof(USystemShockFunctionLibrary) == 0x000008, "Wrong alignment on USystemShockFunctionLibrary");
static_assert(sizeof(USystemShockFunctionLibrary) == 0x000028, "Wrong size on USystemShockFunctionLibrary");

// Class SystemReShock.TextMeshDecoratorInterface
// 0x0000 (0x0028 - 0x0028)
class ITextMeshDecoratorInterface final : public IInterface
{
public:
	struct FVector2D GetDecoratorSizeFromPayload(const class FString& Payload);
	bool InitializeDecorator(class UTextMeshWidget* TextMeshWidget, const struct FColor& Color);
	void SetDecoratorColor(const struct FColor& Color);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"TextMeshDecoratorInterface">();
	}
	static class ITextMeshDecoratorInterface* GetDefaultObj()
	{
		return GetDefaultObjImpl<ITextMeshDecoratorInterface>();
	}
};
static_assert(alignof(ITextMeshDecoratorInterface) == 0x000008, "Wrong alignment on ITextMeshDecoratorInterface");
static_assert(sizeof(ITextMeshDecoratorInterface) == 0x000028, "Wrong size on ITextMeshDecoratorInterface");

// Class SystemReShock.TextMeshWidget
// 0x0178 (0x03C0 - 0x0248)
class UTextMeshWidget final : public UPerspectiveMeshWidget
{
public:
	class FText                                   Text;                                              // 0x0248(0x0018)(Edit, BlueprintVisible, BlueprintReadOnly, Protected, NativeAccessSpecifierProtected)
	class UMaterialInterface*                     Material;                                          // 0x0260(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, ExposeOnSpawn, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UFont*                                  Font;                                              // 0x0268(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, ExposeOnSpawn, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         Size;                                              // 0x0270(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, ExposeOnSpawn, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         ActualSize;                                        // 0x0274(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	struct FVector2D                              TextDimensions;                                    // 0x0278(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	struct FColor                                 Color;                                             // 0x0280(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         bShrinkToFit : 1;                                  // 0x0284(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected))
	uint8                                         bWordWrap : 1;                                     // 0x0284(0x0001)(BitIndex: 0x01, PropSize: 0x0001 (Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected))
	uint8                                         bForceUppercase : 1;                               // 0x0284(0x0001)(BitIndex: 0x02, PropSize: 0x0001 (Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected))
	uint8                                         Pad_285[0x3];                                      // 0x0285(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	ETextMeshWidgetHorizontalAligment             HorizontalAlignment;                               // 0x0288(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, ExposeOnSpawn, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	ETextMeshWidgetVerticalAligment               VerticalAlignment;                                 // 0x0289(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_28A[0x2];                                      // 0x028A(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector2D                              Spacing;                                           // 0x028C(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	struct FVector2D                              Padding;                                           // 0x0294(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_29C[0x4];                                      // 0x029C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TSubclassOf<class UUserWidget>                DecoratorWidgetClass;                              // 0x02A0(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	struct FVector2D                              VirtualDimensions;                                 // 0x02A8(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class FName                                   FontMaterialParameter;                             // 0x02B0(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UDataTable*                             CultureFontTable;                                  // 0x02B8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class UFont*                                  DefaultFont;                                       // 0x02C0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	TArray<class UUserWidget*>                    DecoratorWidgets;                                  // 0x02C8(0x0010)(ExportObject, ZeroConstructor, ContainsInstancedReference, NativeAccessSpecifierPrivate)
	uint8                                         Pad_2D8[0xE8];                                     // 0x02D8(0x00E8)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void SetColor(const struct FColor& NewColor);
	void SetFont(class UFont* NewFont);
	void SetFontSize(float NewSize);
	void SetForceUppercase(bool bUppercase);
	void SetHorizontalAlignment(ETextMeshWidgetHorizontalAligment Alignment);
	void SetPadding(const struct FVector2D& NewPadding);
	void SetSpacing(const struct FVector2D& NewSpacing);
	void SetText(const class FText& NewText);
	void SetTextColor(const struct FColor& NewColor);
	void SetVerticalAlignment(ETextMeshWidgetVerticalAligment Alignment);
	void SetVirtualTextDimensions(const struct FVector2D& Dimensions);
	void SetVirtualTextWidth(float VirtualWidth);

	struct FVector2D GetDimensionsForNewText(const class FText& NewText) const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"TextMeshWidget">();
	}
	static class UTextMeshWidget* GetDefaultObj()
	{
		return GetDefaultObjImpl<UTextMeshWidget>();
	}
};
static_assert(alignof(UTextMeshWidget) == 0x000008, "Wrong alignment on UTextMeshWidget");
static_assert(sizeof(UTextMeshWidget) == 0x0003C0, "Wrong size on UTextMeshWidget");
static_assert(offsetof(UTextMeshWidget, Text) == 0x000248, "Member 'UTextMeshWidget::Text' has a wrong offset!");
static_assert(offsetof(UTextMeshWidget, Material) == 0x000260, "Member 'UTextMeshWidget::Material' has a wrong offset!");
static_assert(offsetof(UTextMeshWidget, Font) == 0x000268, "Member 'UTextMeshWidget::Font' has a wrong offset!");
static_assert(offsetof(UTextMeshWidget, Size) == 0x000270, "Member 'UTextMeshWidget::Size' has a wrong offset!");
static_assert(offsetof(UTextMeshWidget, ActualSize) == 0x000274, "Member 'UTextMeshWidget::ActualSize' has a wrong offset!");
static_assert(offsetof(UTextMeshWidget, TextDimensions) == 0x000278, "Member 'UTextMeshWidget::TextDimensions' has a wrong offset!");
static_assert(offsetof(UTextMeshWidget, Color) == 0x000280, "Member 'UTextMeshWidget::Color' has a wrong offset!");
static_assert(offsetof(UTextMeshWidget, HorizontalAlignment) == 0x000288, "Member 'UTextMeshWidget::HorizontalAlignment' has a wrong offset!");
static_assert(offsetof(UTextMeshWidget, VerticalAlignment) == 0x000289, "Member 'UTextMeshWidget::VerticalAlignment' has a wrong offset!");
static_assert(offsetof(UTextMeshWidget, Spacing) == 0x00028C, "Member 'UTextMeshWidget::Spacing' has a wrong offset!");
static_assert(offsetof(UTextMeshWidget, Padding) == 0x000294, "Member 'UTextMeshWidget::Padding' has a wrong offset!");
static_assert(offsetof(UTextMeshWidget, DecoratorWidgetClass) == 0x0002A0, "Member 'UTextMeshWidget::DecoratorWidgetClass' has a wrong offset!");
static_assert(offsetof(UTextMeshWidget, VirtualDimensions) == 0x0002A8, "Member 'UTextMeshWidget::VirtualDimensions' has a wrong offset!");
static_assert(offsetof(UTextMeshWidget, FontMaterialParameter) == 0x0002B0, "Member 'UTextMeshWidget::FontMaterialParameter' has a wrong offset!");
static_assert(offsetof(UTextMeshWidget, CultureFontTable) == 0x0002B8, "Member 'UTextMeshWidget::CultureFontTable' has a wrong offset!");
static_assert(offsetof(UTextMeshWidget, DefaultFont) == 0x0002C0, "Member 'UTextMeshWidget::DefaultFont' has a wrong offset!");
static_assert(offsetof(UTextMeshWidget, DecoratorWidgets) == 0x0002C8, "Member 'UTextMeshWidget::DecoratorWidgets' has a wrong offset!");

// Class SystemReShock.TimeSeriesTraceFunction
// 0x00A8 (0x00D0 - 0x0028)
class UTimeSeriesTraceFunction : public UObject
{
public:
	float                                         TraceSpeed;                                        // 0x0028(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	int32                                         TotalQuadCount;                                    // 0x002C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         VerticalOffsetRatio;                               // 0x0030(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         TotalRatioToFade;                                  // 0x0034(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         FadeSpeed;                                         // 0x0038(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	struct FColor                                 TraceColor;                                        // 0x003C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	struct FColor                                 FrontColor;                                        // 0x0040(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         FrontQuadRatio;                                    // 0x0044(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          bPreventSelfIntersection;                          // 0x0048(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_49[0x3];                                       // 0x0049(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         SecondsPerQuad;                                    // 0x004C(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         UnitsPerQuad;                                      // 0x0050(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_54[0x7C];                                      // 0x0054(0x007C)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	class UTimeSeriesTraceWidget* GetTimeSeriesTraceWidget();
	void K2_BeginPlay();
	float K2_EvaluateFunction();

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"TimeSeriesTraceFunction">();
	}
	static class UTimeSeriesTraceFunction* GetDefaultObj()
	{
		return GetDefaultObjImpl<UTimeSeriesTraceFunction>();
	}
};
static_assert(alignof(UTimeSeriesTraceFunction) == 0x000008, "Wrong alignment on UTimeSeriesTraceFunction");
static_assert(sizeof(UTimeSeriesTraceFunction) == 0x0000D0, "Wrong size on UTimeSeriesTraceFunction");
static_assert(offsetof(UTimeSeriesTraceFunction, TraceSpeed) == 0x000028, "Member 'UTimeSeriesTraceFunction::TraceSpeed' has a wrong offset!");
static_assert(offsetof(UTimeSeriesTraceFunction, TotalQuadCount) == 0x00002C, "Member 'UTimeSeriesTraceFunction::TotalQuadCount' has a wrong offset!");
static_assert(offsetof(UTimeSeriesTraceFunction, VerticalOffsetRatio) == 0x000030, "Member 'UTimeSeriesTraceFunction::VerticalOffsetRatio' has a wrong offset!");
static_assert(offsetof(UTimeSeriesTraceFunction, TotalRatioToFade) == 0x000034, "Member 'UTimeSeriesTraceFunction::TotalRatioToFade' has a wrong offset!");
static_assert(offsetof(UTimeSeriesTraceFunction, FadeSpeed) == 0x000038, "Member 'UTimeSeriesTraceFunction::FadeSpeed' has a wrong offset!");
static_assert(offsetof(UTimeSeriesTraceFunction, TraceColor) == 0x00003C, "Member 'UTimeSeriesTraceFunction::TraceColor' has a wrong offset!");
static_assert(offsetof(UTimeSeriesTraceFunction, FrontColor) == 0x000040, "Member 'UTimeSeriesTraceFunction::FrontColor' has a wrong offset!");
static_assert(offsetof(UTimeSeriesTraceFunction, FrontQuadRatio) == 0x000044, "Member 'UTimeSeriesTraceFunction::FrontQuadRatio' has a wrong offset!");
static_assert(offsetof(UTimeSeriesTraceFunction, bPreventSelfIntersection) == 0x000048, "Member 'UTimeSeriesTraceFunction::bPreventSelfIntersection' has a wrong offset!");
static_assert(offsetof(UTimeSeriesTraceFunction, SecondsPerQuad) == 0x00004C, "Member 'UTimeSeriesTraceFunction::SecondsPerQuad' has a wrong offset!");
static_assert(offsetof(UTimeSeriesTraceFunction, UnitsPerQuad) == 0x000050, "Member 'UTimeSeriesTraceFunction::UnitsPerQuad' has a wrong offset!");

// Class SystemReShock.TimeSeriesTraceWidget
// 0x0068 (0x02B0 - 0x0248)
class UTimeSeriesTraceWidget final : public UPerspectiveMeshWidget
{
public:
	float                                         FixedTickRate;                                     // 0x0248(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         LineWidthRatio;                                    // 0x024C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         GlowSizeRatio;                                     // 0x0250(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_254[0x4];                                      // 0x0254(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UMaterialInterface*                     Material;                                          // 0x0258(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UMaterialInterface*                     GlowMaterial;                                      // 0x0260(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	TArray<TSubclassOf<class UTimeSeriesTraceFunction>> TraceFunctionClasses;                              // 0x0268(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Protected, UObjectWrapper, NativeAccessSpecifierProtected)
	TArray<class UTimeSeriesTraceFunction*>       TraceFunctions;                                    // 0x0278(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Protected, NativeAccessSpecifierProtected)
	uint8                                         Pad_288[0x28];                                     // 0x0288(0x0028)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void DisableTraceFunctions(bool bDisable);
	void InitializeTraceFunctions();

	bool GetTraceFunctionsDisabled() const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"TimeSeriesTraceWidget">();
	}
	static class UTimeSeriesTraceWidget* GetDefaultObj()
	{
		return GetDefaultObjImpl<UTimeSeriesTraceWidget>();
	}
};
static_assert(alignof(UTimeSeriesTraceWidget) == 0x000008, "Wrong alignment on UTimeSeriesTraceWidget");
static_assert(sizeof(UTimeSeriesTraceWidget) == 0x0002B0, "Wrong size on UTimeSeriesTraceWidget");
static_assert(offsetof(UTimeSeriesTraceWidget, FixedTickRate) == 0x000248, "Member 'UTimeSeriesTraceWidget::FixedTickRate' has a wrong offset!");
static_assert(offsetof(UTimeSeriesTraceWidget, LineWidthRatio) == 0x00024C, "Member 'UTimeSeriesTraceWidget::LineWidthRatio' has a wrong offset!");
static_assert(offsetof(UTimeSeriesTraceWidget, GlowSizeRatio) == 0x000250, "Member 'UTimeSeriesTraceWidget::GlowSizeRatio' has a wrong offset!");
static_assert(offsetof(UTimeSeriesTraceWidget, Material) == 0x000258, "Member 'UTimeSeriesTraceWidget::Material' has a wrong offset!");
static_assert(offsetof(UTimeSeriesTraceWidget, GlowMaterial) == 0x000260, "Member 'UTimeSeriesTraceWidget::GlowMaterial' has a wrong offset!");
static_assert(offsetof(UTimeSeriesTraceWidget, TraceFunctionClasses) == 0x000268, "Member 'UTimeSeriesTraceWidget::TraceFunctionClasses' has a wrong offset!");
static_assert(offsetof(UTimeSeriesTraceWidget, TraceFunctions) == 0x000278, "Member 'UTimeSeriesTraceWidget::TraceFunctions' has a wrong offset!");

// Class SystemReShock.UserStaticMeshComponent
// 0x0000 (0x04E0 - 0x04E0)
class UUserStaticMeshComponent : public UStaticMeshComponent
{
public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"UserStaticMeshComponent">();
	}
	static class UUserStaticMeshComponent* GetDefaultObj()
	{
		return GetDefaultObjImpl<UUserStaticMeshComponent>();
	}
};
static_assert(alignof(UUserStaticMeshComponent) == 0x000010, "Wrong alignment on UUserStaticMeshComponent");
static_assert(sizeof(UUserStaticMeshComponent) == 0x0004E0, "Wrong size on UUserStaticMeshComponent");

// Class SystemReShock.PhysInstancedStaticMeshComponent
// 0x0040 (0x05D0 - 0x0590)
class UPhysInstancedStaticMeshComponent : public UInstancedStaticMeshComponent
{
public:
	FMulticastInlineDelegateProperty_             OnInstanceCollision;                               // 0x0588(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	float                                         InstanceLifetime;                                  // 0x0598(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_59C[0x34];                                     // 0x059C(0x0034)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void AddInstanceWithVelocity(const struct FTransform& LocalTransform, const struct FVector& LocalVelocity, const struct FVector& LocalRotationAxis, const float RotationSpeed, bool bUseCenterOfMass);
	void AddWorldVelocityToInstance(int32 InstanceIndex, const struct FVector& WorldLinearVelocity);
	void SetAutoDestroy(bool bState);
	bool TryCollideWithWorld(const struct FVector& LastCentroid, const struct FVector& CurrCentroid, const struct FVector& CylinderVector, float CapsuleRadius, struct FVector* OutCollisionPoint, struct FVector* OutCollisionNormal, float* OutPenetrationDepth);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"PhysInstancedStaticMeshComponent">();
	}
	static class UPhysInstancedStaticMeshComponent* GetDefaultObj()
	{
		return GetDefaultObjImpl<UPhysInstancedStaticMeshComponent>();
	}
};
static_assert(alignof(UPhysInstancedStaticMeshComponent) == 0x000010, "Wrong alignment on UPhysInstancedStaticMeshComponent");
static_assert(sizeof(UPhysInstancedStaticMeshComponent) == 0x0005D0, "Wrong size on UPhysInstancedStaticMeshComponent");
static_assert(offsetof(UPhysInstancedStaticMeshComponent, OnInstanceCollision) == 0x000588, "Member 'UPhysInstancedStaticMeshComponent::OnInstanceCollision' has a wrong offset!");
static_assert(offsetof(UPhysInstancedStaticMeshComponent, InstanceLifetime) == 0x000598, "Member 'UPhysInstancedStaticMeshComponent::InstanceLifetime' has a wrong offset!");

}

