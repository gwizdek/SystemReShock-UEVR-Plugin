#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: WIDGET_HotbarSlot

#include "Basic.hpp"

#include "InputCore_structs.hpp"
#include "CoreUObject_structs.hpp"
#include "SlateCore_structs.hpp"
#include "UMG_structs.hpp"


namespace SDK::Params
{

// Function WIDGET_HotbarSlot.WIDGET_HotbarSlot_C.ExecuteUbergraph_WIDGET_HotbarSlot
// 0x0020 (0x0020 - 0x0000)
struct WIDGET_HotbarSlot_C_ExecuteUbergraph_WIDGET_HotbarSlot final
{
public:
	int32                                         EntryPoint;                                        // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UMaterialInstanceDynamic*               CallFunc_ConvertToDynamicMaterialInstance_ReturnValue; // 0x0008(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_Event_IsDesignTime;                         // 0x0010(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UMaterialInstanceDynamic*               CallFunc_ConvertToDynamicMaterialInstance_ReturnValue_1; // 0x0018(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(WIDGET_HotbarSlot_C_ExecuteUbergraph_WIDGET_HotbarSlot) == 0x000008, "Wrong alignment on WIDGET_HotbarSlot_C_ExecuteUbergraph_WIDGET_HotbarSlot");
static_assert(sizeof(WIDGET_HotbarSlot_C_ExecuteUbergraph_WIDGET_HotbarSlot) == 0x000020, "Wrong size on WIDGET_HotbarSlot_C_ExecuteUbergraph_WIDGET_HotbarSlot");
static_assert(offsetof(WIDGET_HotbarSlot_C_ExecuteUbergraph_WIDGET_HotbarSlot, EntryPoint) == 0x000000, "Member 'WIDGET_HotbarSlot_C_ExecuteUbergraph_WIDGET_HotbarSlot::EntryPoint' has a wrong offset!");
static_assert(offsetof(WIDGET_HotbarSlot_C_ExecuteUbergraph_WIDGET_HotbarSlot, CallFunc_ConvertToDynamicMaterialInstance_ReturnValue) == 0x000008, "Member 'WIDGET_HotbarSlot_C_ExecuteUbergraph_WIDGET_HotbarSlot::CallFunc_ConvertToDynamicMaterialInstance_ReturnValue' has a wrong offset!");
static_assert(offsetof(WIDGET_HotbarSlot_C_ExecuteUbergraph_WIDGET_HotbarSlot, K2Node_Event_IsDesignTime) == 0x000010, "Member 'WIDGET_HotbarSlot_C_ExecuteUbergraph_WIDGET_HotbarSlot::K2Node_Event_IsDesignTime' has a wrong offset!");
static_assert(offsetof(WIDGET_HotbarSlot_C_ExecuteUbergraph_WIDGET_HotbarSlot, CallFunc_ConvertToDynamicMaterialInstance_ReturnValue_1) == 0x000018, "Member 'WIDGET_HotbarSlot_C_ExecuteUbergraph_WIDGET_HotbarSlot::CallFunc_ConvertToDynamicMaterialInstance_ReturnValue_1' has a wrong offset!");

// Function WIDGET_HotbarSlot.WIDGET_HotbarSlot_C.PreConstruct
// 0x0001 (0x0001 - 0x0000)
struct WIDGET_HotbarSlot_C_PreConstruct final
{
public:
	bool                                          IsDesignTime;                                      // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(WIDGET_HotbarSlot_C_PreConstruct) == 0x000001, "Wrong alignment on WIDGET_HotbarSlot_C_PreConstruct");
static_assert(sizeof(WIDGET_HotbarSlot_C_PreConstruct) == 0x000001, "Wrong size on WIDGET_HotbarSlot_C_PreConstruct");
static_assert(offsetof(WIDGET_HotbarSlot_C_PreConstruct, IsDesignTime) == 0x000000, "Member 'WIDGET_HotbarSlot_C_PreConstruct::IsDesignTime' has a wrong offset!");

// Function WIDGET_HotbarSlot.WIDGET_HotbarSlot_C.OnItemSlotted
// 0x0028 (0x0028 - 0x0000)
struct WIDGET_HotbarSlot_C_OnItemSlotted final
{
public:
	TScriptInterface<class IINTERF_HotbarSlottable_C> Object;                                            // 0x0000(0x0010)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	class UObject*                                CallFunc_Conv_InterfaceToObject_ReturnValue;       // 0x0010(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0018(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_19[0x7];                                       // 0x0019(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UUMGSequencePlayer*                     CallFunc_PlayAnimationForward_ReturnValue;         // 0x0020(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(WIDGET_HotbarSlot_C_OnItemSlotted) == 0x000008, "Wrong alignment on WIDGET_HotbarSlot_C_OnItemSlotted");
static_assert(sizeof(WIDGET_HotbarSlot_C_OnItemSlotted) == 0x000028, "Wrong size on WIDGET_HotbarSlot_C_OnItemSlotted");
static_assert(offsetof(WIDGET_HotbarSlot_C_OnItemSlotted, Object) == 0x000000, "Member 'WIDGET_HotbarSlot_C_OnItemSlotted::Object' has a wrong offset!");
static_assert(offsetof(WIDGET_HotbarSlot_C_OnItemSlotted, CallFunc_Conv_InterfaceToObject_ReturnValue) == 0x000010, "Member 'WIDGET_HotbarSlot_C_OnItemSlotted::CallFunc_Conv_InterfaceToObject_ReturnValue' has a wrong offset!");
static_assert(offsetof(WIDGET_HotbarSlot_C_OnItemSlotted, CallFunc_IsValid_ReturnValue) == 0x000018, "Member 'WIDGET_HotbarSlot_C_OnItemSlotted::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(WIDGET_HotbarSlot_C_OnItemSlotted, CallFunc_PlayAnimationForward_ReturnValue) == 0x000020, "Member 'WIDGET_HotbarSlot_C_OnItemSlotted::CallFunc_PlayAnimationForward_ReturnValue' has a wrong offset!");

// Function WIDGET_HotbarSlot.WIDGET_HotbarSlot_C.OnItemUnslotted
// 0x0008 (0x0008 - 0x0000)
struct WIDGET_HotbarSlot_C_OnItemUnslotted final
{
public:
	class UUMGSequencePlayer*                     CallFunc_PlayAnimationReverse_ReturnValue;         // 0x0000(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(WIDGET_HotbarSlot_C_OnItemUnslotted) == 0x000008, "Wrong alignment on WIDGET_HotbarSlot_C_OnItemUnslotted");
static_assert(sizeof(WIDGET_HotbarSlot_C_OnItemUnslotted) == 0x000008, "Wrong size on WIDGET_HotbarSlot_C_OnItemUnslotted");
static_assert(offsetof(WIDGET_HotbarSlot_C_OnItemUnslotted, CallFunc_PlayAnimationReverse_ReturnValue) == 0x000000, "Member 'WIDGET_HotbarSlot_C_OnItemUnslotted::CallFunc_PlayAnimationReverse_ReturnValue' has a wrong offset!");

// Function WIDGET_HotbarSlot.WIDGET_HotbarSlot_C.SetItemCount
// 0x0020 (0x0020 - 0x0000)
struct WIDGET_HotbarSlot_C_SetItemCount final
{
public:
	int32                                         Count;                                             // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Greater_IntInt_ReturnValue;               // 0x0004(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_NotEqual_IntInt_ReturnValue;              // 0x0005(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_6[0x2];                                        // 0x0006(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   CallFunc_Conv_IntToText_ReturnValue;               // 0x0008(0x0018)()
};
static_assert(alignof(WIDGET_HotbarSlot_C_SetItemCount) == 0x000008, "Wrong alignment on WIDGET_HotbarSlot_C_SetItemCount");
static_assert(sizeof(WIDGET_HotbarSlot_C_SetItemCount) == 0x000020, "Wrong size on WIDGET_HotbarSlot_C_SetItemCount");
static_assert(offsetof(WIDGET_HotbarSlot_C_SetItemCount, Count) == 0x000000, "Member 'WIDGET_HotbarSlot_C_SetItemCount::Count' has a wrong offset!");
static_assert(offsetof(WIDGET_HotbarSlot_C_SetItemCount, CallFunc_Greater_IntInt_ReturnValue) == 0x000004, "Member 'WIDGET_HotbarSlot_C_SetItemCount::CallFunc_Greater_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(WIDGET_HotbarSlot_C_SetItemCount, CallFunc_NotEqual_IntInt_ReturnValue) == 0x000005, "Member 'WIDGET_HotbarSlot_C_SetItemCount::CallFunc_NotEqual_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(WIDGET_HotbarSlot_C_SetItemCount, CallFunc_Conv_IntToText_ReturnValue) == 0x000008, "Member 'WIDGET_HotbarSlot_C_SetItemCount::CallFunc_Conv_IntToText_ReturnValue' has a wrong offset!");

// Function WIDGET_HotbarSlot.WIDGET_HotbarSlot_C.SetSlotNumber
// 0x0038 (0x0038 - 0x0000)
struct WIDGET_HotbarSlot_C_SetSlotNumber final
{
public:
	int32                                         Number;                                            // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   CallFunc_Conv_IntToText_ReturnValue;               // 0x0008(0x0018)()
	class FText                                   CallFunc_MakeLiteralText_ReturnValue;              // 0x0020(0x0018)()
};
static_assert(alignof(WIDGET_HotbarSlot_C_SetSlotNumber) == 0x000008, "Wrong alignment on WIDGET_HotbarSlot_C_SetSlotNumber");
static_assert(sizeof(WIDGET_HotbarSlot_C_SetSlotNumber) == 0x000038, "Wrong size on WIDGET_HotbarSlot_C_SetSlotNumber");
static_assert(offsetof(WIDGET_HotbarSlot_C_SetSlotNumber, Number) == 0x000000, "Member 'WIDGET_HotbarSlot_C_SetSlotNumber::Number' has a wrong offset!");
static_assert(offsetof(WIDGET_HotbarSlot_C_SetSlotNumber, CallFunc_Conv_IntToText_ReturnValue) == 0x000008, "Member 'WIDGET_HotbarSlot_C_SetSlotNumber::CallFunc_Conv_IntToText_ReturnValue' has a wrong offset!");
static_assert(offsetof(WIDGET_HotbarSlot_C_SetSlotNumber, CallFunc_MakeLiteralText_ReturnValue) == 0x000020, "Member 'WIDGET_HotbarSlot_C_SetSlotNumber::CallFunc_MakeLiteralText_ReturnValue' has a wrong offset!");

// Function WIDGET_HotbarSlot.WIDGET_HotbarSlot_C.EVENT_OnMouseButtonDown
// 0x0238 (0x0238 - 0x0000)
struct WIDGET_HotbarSlot_C_EVENT_OnMouseButtonDown final
{
public:
	struct FGeometry                              MyGeometry;                                        // 0x0000(0x0038)(BlueprintVisible, BlueprintReadOnly, Parm, IsPlainOldData, NoDestructor)
	struct FPointerEvent                          MouseEvent;                                        // 0x0038(0x0070)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
	struct FEventReply                            ReturnValue;                                       // 0x00A8(0x00B8)(Parm, OutParm, ReturnParm)
	int32                                         HotbarSlotIndex;                                   // 0x0160(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_164[0x4];                                      // 0x0164(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UCOMP_Hotbar_C*                         HotbarComponent;                                   // 0x0168(0x0008)(Edit, BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TScriptInterface<class IINTERF_HotbarSlottable_C> PreviousSlottableObject;                           // 0x0170(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FEventReply                            CallFunc_Handled_ReturnValue;                      // 0x0180(0x00B8)()
};
static_assert(alignof(WIDGET_HotbarSlot_C_EVENT_OnMouseButtonDown) == 0x000008, "Wrong alignment on WIDGET_HotbarSlot_C_EVENT_OnMouseButtonDown");
static_assert(sizeof(WIDGET_HotbarSlot_C_EVENT_OnMouseButtonDown) == 0x000238, "Wrong size on WIDGET_HotbarSlot_C_EVENT_OnMouseButtonDown");
static_assert(offsetof(WIDGET_HotbarSlot_C_EVENT_OnMouseButtonDown, MyGeometry) == 0x000000, "Member 'WIDGET_HotbarSlot_C_EVENT_OnMouseButtonDown::MyGeometry' has a wrong offset!");
static_assert(offsetof(WIDGET_HotbarSlot_C_EVENT_OnMouseButtonDown, MouseEvent) == 0x000038, "Member 'WIDGET_HotbarSlot_C_EVENT_OnMouseButtonDown::MouseEvent' has a wrong offset!");
static_assert(offsetof(WIDGET_HotbarSlot_C_EVENT_OnMouseButtonDown, ReturnValue) == 0x0000A8, "Member 'WIDGET_HotbarSlot_C_EVENT_OnMouseButtonDown::ReturnValue' has a wrong offset!");
static_assert(offsetof(WIDGET_HotbarSlot_C_EVENT_OnMouseButtonDown, HotbarSlotIndex) == 0x000160, "Member 'WIDGET_HotbarSlot_C_EVENT_OnMouseButtonDown::HotbarSlotIndex' has a wrong offset!");
static_assert(offsetof(WIDGET_HotbarSlot_C_EVENT_OnMouseButtonDown, HotbarComponent) == 0x000168, "Member 'WIDGET_HotbarSlot_C_EVENT_OnMouseButtonDown::HotbarComponent' has a wrong offset!");
static_assert(offsetof(WIDGET_HotbarSlot_C_EVENT_OnMouseButtonDown, PreviousSlottableObject) == 0x000170, "Member 'WIDGET_HotbarSlot_C_EVENT_OnMouseButtonDown::PreviousSlottableObject' has a wrong offset!");
static_assert(offsetof(WIDGET_HotbarSlot_C_EVENT_OnMouseButtonDown, CallFunc_Handled_ReturnValue) == 0x000180, "Member 'WIDGET_HotbarSlot_C_EVENT_OnMouseButtonDown::CallFunc_Handled_ReturnValue' has a wrong offset!");

// Function WIDGET_HotbarSlot.WIDGET_HotbarSlot_C.EVENT_OnMouseEnter
// 0x00A8 (0x00A8 - 0x0000)
struct WIDGET_HotbarSlot_C_EVENT_OnMouseEnter final
{
public:
	struct FGeometry                              MyGeometry;                                        // 0x0000(0x0038)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor)
	struct FPointerEvent                          MouseEvent;                                        // 0x0038(0x0070)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
};
static_assert(alignof(WIDGET_HotbarSlot_C_EVENT_OnMouseEnter) == 0x000008, "Wrong alignment on WIDGET_HotbarSlot_C_EVENT_OnMouseEnter");
static_assert(sizeof(WIDGET_HotbarSlot_C_EVENT_OnMouseEnter) == 0x0000A8, "Wrong size on WIDGET_HotbarSlot_C_EVENT_OnMouseEnter");
static_assert(offsetof(WIDGET_HotbarSlot_C_EVENT_OnMouseEnter, MyGeometry) == 0x000000, "Member 'WIDGET_HotbarSlot_C_EVENT_OnMouseEnter::MyGeometry' has a wrong offset!");
static_assert(offsetof(WIDGET_HotbarSlot_C_EVENT_OnMouseEnter, MouseEvent) == 0x000038, "Member 'WIDGET_HotbarSlot_C_EVENT_OnMouseEnter::MouseEvent' has a wrong offset!");

// Function WIDGET_HotbarSlot.WIDGET_HotbarSlot_C.EVENT_OnMouseLeave
// 0x0070 (0x0070 - 0x0000)
struct WIDGET_HotbarSlot_C_EVENT_OnMouseLeave final
{
public:
	struct FPointerEvent                          MouseEvent;                                        // 0x0000(0x0070)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
};
static_assert(alignof(WIDGET_HotbarSlot_C_EVENT_OnMouseLeave) == 0x000008, "Wrong alignment on WIDGET_HotbarSlot_C_EVENT_OnMouseLeave");
static_assert(sizeof(WIDGET_HotbarSlot_C_EVENT_OnMouseLeave) == 0x000070, "Wrong size on WIDGET_HotbarSlot_C_EVENT_OnMouseLeave");
static_assert(offsetof(WIDGET_HotbarSlot_C_EVENT_OnMouseLeave, MouseEvent) == 0x000000, "Member 'WIDGET_HotbarSlot_C_EVENT_OnMouseLeave::MouseEvent' has a wrong offset!");

// Function WIDGET_HotbarSlot.WIDGET_HotbarSlot_C.OnMouseDown
// 0x0160 (0x0160 - 0x0000)
struct WIDGET_HotbarSlot_C_OnMouseDown final
{
public:
	struct FPointerEvent                          MouseEvent;                                        // 0x0000(0x0070)(BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
	class UCOMP_Hotbar_C*                         HotbarComponent;                                   // 0x0070(0x0008)(Edit, BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TScriptInterface<class IINTERF_HotbarSlottable_C> PreviousSlottableObject;                           // 0x0078(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	class USAVE_Settings_C*                       CallFunc_GetShockSettingsForCurrentUser_Settings;  // 0x0088(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_GetAutoSlotHotbar_Result;                 // 0x0090(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Not_PreBool_ReturnValue;                  // 0x0091(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_92[0x2];                                       // 0x0092(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_GetSlotIndex_SlotIndex;                   // 0x0094(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Not_PreBool_ReturnValue_1;                // 0x0098(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_99[0x3];                                       // 0x0099(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_GetSlotIndex_SlotIndex_1;                 // 0x009C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_GetSlotIndex_SlotIndex_2;                 // 0x00A0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_GetSlotIndex_SlotIndex_3;                 // 0x00A4(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class USAVE_Settings_C*                       CallFunc_GetShockSettingsForCurrentUser_Settings_1; // 0x00A8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_GetAutoSlotHotbar_Result_1;               // 0x00B0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Not_PreBool_ReturnValue_2;                // 0x00B1(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_RemoveFromSlotIndex_Result;               // 0x00B2(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_AddToSlot_Result;                         // 0x00B3(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_B4[0x4];                                       // 0x00B4(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UObject*                                CallFunc_Conv_InterfaceToObject_ReturnValue;       // 0x00B8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x00C0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_C1[0x7];                                       // 0x00C1(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UObject*                                CallFunc_Conv_InterfaceToObject_ReturnValue_1;     // 0x00C8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue_1;                    // 0x00D0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BooleanOR_ReturnValue;                    // 0x00D1(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_D2[0x6];                                       // 0x00D2(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class UObject*                                CallFunc_Conv_InterfaceToObject_ReturnValue_2;     // 0x00D8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue_2;                    // 0x00E0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_RemoveFromSlotIndex_Result_1;             // 0x00E1(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_E2[0x6];                                       // 0x00E2(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	struct FKey                                   CallFunc_PointerEvent_GetEffectingButton_ReturnValue; // 0x00E8(0x0018)(HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_KeyKey_ReturnValue;            // 0x0100(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_101[0x3];                                      // 0x0101(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector2D                              CallFunc_PointerEvent_GetScreenSpacePosition_ReturnValue; // 0x0104(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_UndoCursorItemMove_Result;                // 0x010C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_10D[0x3];                                      // 0x010D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class UITEM_Base_C*                           CallFunc_GetCursorItem_Result;                     // 0x0110(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_GetHotbarSlottableObject_Valid;           // 0x0118(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_119[0x7];                                      // 0x0119(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TScriptInterface<class IINTERF_HotbarSlottable_C> CallFunc_GetHotbarSlottableObject_SlottableObject; // 0x0120(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FKey                                   CallFunc_PointerEvent_GetEffectingButton_ReturnValue_1; // 0x0130(0x0018)(HasGetValueTypeHash)
	bool                                          CallFunc_AddToSlot_Result_1;                       // 0x0148(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_EqualEqual_KeyKey_ReturnValue_1;          // 0x0149(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_14A[0x6];                                      // 0x014A(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class UITEM_Base_C*                           CallFunc_GetCursorItem_Result_1;                   // 0x0150(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue_3;                    // 0x0158(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(WIDGET_HotbarSlot_C_OnMouseDown) == 0x000008, "Wrong alignment on WIDGET_HotbarSlot_C_OnMouseDown");
static_assert(sizeof(WIDGET_HotbarSlot_C_OnMouseDown) == 0x000160, "Wrong size on WIDGET_HotbarSlot_C_OnMouseDown");
static_assert(offsetof(WIDGET_HotbarSlot_C_OnMouseDown, MouseEvent) == 0x000000, "Member 'WIDGET_HotbarSlot_C_OnMouseDown::MouseEvent' has a wrong offset!");
static_assert(offsetof(WIDGET_HotbarSlot_C_OnMouseDown, HotbarComponent) == 0x000070, "Member 'WIDGET_HotbarSlot_C_OnMouseDown::HotbarComponent' has a wrong offset!");
static_assert(offsetof(WIDGET_HotbarSlot_C_OnMouseDown, PreviousSlottableObject) == 0x000078, "Member 'WIDGET_HotbarSlot_C_OnMouseDown::PreviousSlottableObject' has a wrong offset!");
static_assert(offsetof(WIDGET_HotbarSlot_C_OnMouseDown, CallFunc_GetShockSettingsForCurrentUser_Settings) == 0x000088, "Member 'WIDGET_HotbarSlot_C_OnMouseDown::CallFunc_GetShockSettingsForCurrentUser_Settings' has a wrong offset!");
static_assert(offsetof(WIDGET_HotbarSlot_C_OnMouseDown, CallFunc_GetAutoSlotHotbar_Result) == 0x000090, "Member 'WIDGET_HotbarSlot_C_OnMouseDown::CallFunc_GetAutoSlotHotbar_Result' has a wrong offset!");
static_assert(offsetof(WIDGET_HotbarSlot_C_OnMouseDown, CallFunc_Not_PreBool_ReturnValue) == 0x000091, "Member 'WIDGET_HotbarSlot_C_OnMouseDown::CallFunc_Not_PreBool_ReturnValue' has a wrong offset!");
static_assert(offsetof(WIDGET_HotbarSlot_C_OnMouseDown, CallFunc_GetSlotIndex_SlotIndex) == 0x000094, "Member 'WIDGET_HotbarSlot_C_OnMouseDown::CallFunc_GetSlotIndex_SlotIndex' has a wrong offset!");
static_assert(offsetof(WIDGET_HotbarSlot_C_OnMouseDown, CallFunc_Not_PreBool_ReturnValue_1) == 0x000098, "Member 'WIDGET_HotbarSlot_C_OnMouseDown::CallFunc_Not_PreBool_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(WIDGET_HotbarSlot_C_OnMouseDown, CallFunc_GetSlotIndex_SlotIndex_1) == 0x00009C, "Member 'WIDGET_HotbarSlot_C_OnMouseDown::CallFunc_GetSlotIndex_SlotIndex_1' has a wrong offset!");
static_assert(offsetof(WIDGET_HotbarSlot_C_OnMouseDown, CallFunc_GetSlotIndex_SlotIndex_2) == 0x0000A0, "Member 'WIDGET_HotbarSlot_C_OnMouseDown::CallFunc_GetSlotIndex_SlotIndex_2' has a wrong offset!");
static_assert(offsetof(WIDGET_HotbarSlot_C_OnMouseDown, CallFunc_GetSlotIndex_SlotIndex_3) == 0x0000A4, "Member 'WIDGET_HotbarSlot_C_OnMouseDown::CallFunc_GetSlotIndex_SlotIndex_3' has a wrong offset!");
static_assert(offsetof(WIDGET_HotbarSlot_C_OnMouseDown, CallFunc_GetShockSettingsForCurrentUser_Settings_1) == 0x0000A8, "Member 'WIDGET_HotbarSlot_C_OnMouseDown::CallFunc_GetShockSettingsForCurrentUser_Settings_1' has a wrong offset!");
static_assert(offsetof(WIDGET_HotbarSlot_C_OnMouseDown, CallFunc_GetAutoSlotHotbar_Result_1) == 0x0000B0, "Member 'WIDGET_HotbarSlot_C_OnMouseDown::CallFunc_GetAutoSlotHotbar_Result_1' has a wrong offset!");
static_assert(offsetof(WIDGET_HotbarSlot_C_OnMouseDown, CallFunc_Not_PreBool_ReturnValue_2) == 0x0000B1, "Member 'WIDGET_HotbarSlot_C_OnMouseDown::CallFunc_Not_PreBool_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(WIDGET_HotbarSlot_C_OnMouseDown, CallFunc_RemoveFromSlotIndex_Result) == 0x0000B2, "Member 'WIDGET_HotbarSlot_C_OnMouseDown::CallFunc_RemoveFromSlotIndex_Result' has a wrong offset!");
static_assert(offsetof(WIDGET_HotbarSlot_C_OnMouseDown, CallFunc_AddToSlot_Result) == 0x0000B3, "Member 'WIDGET_HotbarSlot_C_OnMouseDown::CallFunc_AddToSlot_Result' has a wrong offset!");
static_assert(offsetof(WIDGET_HotbarSlot_C_OnMouseDown, CallFunc_Conv_InterfaceToObject_ReturnValue) == 0x0000B8, "Member 'WIDGET_HotbarSlot_C_OnMouseDown::CallFunc_Conv_InterfaceToObject_ReturnValue' has a wrong offset!");
static_assert(offsetof(WIDGET_HotbarSlot_C_OnMouseDown, CallFunc_IsValid_ReturnValue) == 0x0000C0, "Member 'WIDGET_HotbarSlot_C_OnMouseDown::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(WIDGET_HotbarSlot_C_OnMouseDown, CallFunc_Conv_InterfaceToObject_ReturnValue_1) == 0x0000C8, "Member 'WIDGET_HotbarSlot_C_OnMouseDown::CallFunc_Conv_InterfaceToObject_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(WIDGET_HotbarSlot_C_OnMouseDown, CallFunc_IsValid_ReturnValue_1) == 0x0000D0, "Member 'WIDGET_HotbarSlot_C_OnMouseDown::CallFunc_IsValid_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(WIDGET_HotbarSlot_C_OnMouseDown, CallFunc_BooleanOR_ReturnValue) == 0x0000D1, "Member 'WIDGET_HotbarSlot_C_OnMouseDown::CallFunc_BooleanOR_ReturnValue' has a wrong offset!");
static_assert(offsetof(WIDGET_HotbarSlot_C_OnMouseDown, CallFunc_Conv_InterfaceToObject_ReturnValue_2) == 0x0000D8, "Member 'WIDGET_HotbarSlot_C_OnMouseDown::CallFunc_Conv_InterfaceToObject_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(WIDGET_HotbarSlot_C_OnMouseDown, CallFunc_IsValid_ReturnValue_2) == 0x0000E0, "Member 'WIDGET_HotbarSlot_C_OnMouseDown::CallFunc_IsValid_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(WIDGET_HotbarSlot_C_OnMouseDown, CallFunc_RemoveFromSlotIndex_Result_1) == 0x0000E1, "Member 'WIDGET_HotbarSlot_C_OnMouseDown::CallFunc_RemoveFromSlotIndex_Result_1' has a wrong offset!");
static_assert(offsetof(WIDGET_HotbarSlot_C_OnMouseDown, CallFunc_PointerEvent_GetEffectingButton_ReturnValue) == 0x0000E8, "Member 'WIDGET_HotbarSlot_C_OnMouseDown::CallFunc_PointerEvent_GetEffectingButton_ReturnValue' has a wrong offset!");
static_assert(offsetof(WIDGET_HotbarSlot_C_OnMouseDown, CallFunc_EqualEqual_KeyKey_ReturnValue) == 0x000100, "Member 'WIDGET_HotbarSlot_C_OnMouseDown::CallFunc_EqualEqual_KeyKey_ReturnValue' has a wrong offset!");
static_assert(offsetof(WIDGET_HotbarSlot_C_OnMouseDown, CallFunc_PointerEvent_GetScreenSpacePosition_ReturnValue) == 0x000104, "Member 'WIDGET_HotbarSlot_C_OnMouseDown::CallFunc_PointerEvent_GetScreenSpacePosition_ReturnValue' has a wrong offset!");
static_assert(offsetof(WIDGET_HotbarSlot_C_OnMouseDown, CallFunc_UndoCursorItemMove_Result) == 0x00010C, "Member 'WIDGET_HotbarSlot_C_OnMouseDown::CallFunc_UndoCursorItemMove_Result' has a wrong offset!");
static_assert(offsetof(WIDGET_HotbarSlot_C_OnMouseDown, CallFunc_GetCursorItem_Result) == 0x000110, "Member 'WIDGET_HotbarSlot_C_OnMouseDown::CallFunc_GetCursorItem_Result' has a wrong offset!");
static_assert(offsetof(WIDGET_HotbarSlot_C_OnMouseDown, CallFunc_GetHotbarSlottableObject_Valid) == 0x000118, "Member 'WIDGET_HotbarSlot_C_OnMouseDown::CallFunc_GetHotbarSlottableObject_Valid' has a wrong offset!");
static_assert(offsetof(WIDGET_HotbarSlot_C_OnMouseDown, CallFunc_GetHotbarSlottableObject_SlottableObject) == 0x000120, "Member 'WIDGET_HotbarSlot_C_OnMouseDown::CallFunc_GetHotbarSlottableObject_SlottableObject' has a wrong offset!");
static_assert(offsetof(WIDGET_HotbarSlot_C_OnMouseDown, CallFunc_PointerEvent_GetEffectingButton_ReturnValue_1) == 0x000130, "Member 'WIDGET_HotbarSlot_C_OnMouseDown::CallFunc_PointerEvent_GetEffectingButton_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(WIDGET_HotbarSlot_C_OnMouseDown, CallFunc_AddToSlot_Result_1) == 0x000148, "Member 'WIDGET_HotbarSlot_C_OnMouseDown::CallFunc_AddToSlot_Result_1' has a wrong offset!");
static_assert(offsetof(WIDGET_HotbarSlot_C_OnMouseDown, CallFunc_EqualEqual_KeyKey_ReturnValue_1) == 0x000149, "Member 'WIDGET_HotbarSlot_C_OnMouseDown::CallFunc_EqualEqual_KeyKey_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(WIDGET_HotbarSlot_C_OnMouseDown, CallFunc_GetCursorItem_Result_1) == 0x000150, "Member 'WIDGET_HotbarSlot_C_OnMouseDown::CallFunc_GetCursorItem_Result_1' has a wrong offset!");
static_assert(offsetof(WIDGET_HotbarSlot_C_OnMouseDown, CallFunc_IsValid_ReturnValue_3) == 0x000158, "Member 'WIDGET_HotbarSlot_C_OnMouseDown::CallFunc_IsValid_ReturnValue_3' has a wrong offset!");

// Function WIDGET_HotbarSlot.WIDGET_HotbarSlot_C.EVENT_OnMouseDoubleClick
// 0x0218 (0x0218 - 0x0000)
struct WIDGET_HotbarSlot_C_EVENT_OnMouseDoubleClick final
{
public:
	struct FGeometry                              MyGeometry;                                        // 0x0000(0x0038)(BlueprintVisible, BlueprintReadOnly, Parm, IsPlainOldData, NoDestructor)
	struct FPointerEvent                          MouseEvent;                                        // 0x0038(0x0070)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
	struct FEventReply                            ReturnValue;                                       // 0x00A8(0x00B8)(Parm, OutParm, ReturnParm)
	struct FEventReply                            CallFunc_Handled_ReturnValue;                      // 0x0160(0x00B8)()
};
static_assert(alignof(WIDGET_HotbarSlot_C_EVENT_OnMouseDoubleClick) == 0x000008, "Wrong alignment on WIDGET_HotbarSlot_C_EVENT_OnMouseDoubleClick");
static_assert(sizeof(WIDGET_HotbarSlot_C_EVENT_OnMouseDoubleClick) == 0x000218, "Wrong size on WIDGET_HotbarSlot_C_EVENT_OnMouseDoubleClick");
static_assert(offsetof(WIDGET_HotbarSlot_C_EVENT_OnMouseDoubleClick, MyGeometry) == 0x000000, "Member 'WIDGET_HotbarSlot_C_EVENT_OnMouseDoubleClick::MyGeometry' has a wrong offset!");
static_assert(offsetof(WIDGET_HotbarSlot_C_EVENT_OnMouseDoubleClick, MouseEvent) == 0x000038, "Member 'WIDGET_HotbarSlot_C_EVENT_OnMouseDoubleClick::MouseEvent' has a wrong offset!");
static_assert(offsetof(WIDGET_HotbarSlot_C_EVENT_OnMouseDoubleClick, ReturnValue) == 0x0000A8, "Member 'WIDGET_HotbarSlot_C_EVENT_OnMouseDoubleClick::ReturnValue' has a wrong offset!");
static_assert(offsetof(WIDGET_HotbarSlot_C_EVENT_OnMouseDoubleClick, CallFunc_Handled_ReturnValue) == 0x000160, "Member 'WIDGET_HotbarSlot_C_EVENT_OnMouseDoubleClick::CallFunc_Handled_ReturnValue' has a wrong offset!");

// Function WIDGET_HotbarSlot.WIDGET_HotbarSlot_C.SetEquipState
// 0x0030 (0x0030 - 0x0000)
struct WIDGET_HotbarSlot_C_SetEquipState final
{
public:
	bool                                          Equipped;                                          // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Temp_bool_Variable;                                // 0x0001(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_2[0x2];                                        // 0x0002(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         Temp_float_Variable;                               // 0x0004(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Temp_float_Variable_1;                             // 0x0008(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UMaterialInstanceDynamic*               CallFunc_ConvertToDynamicMaterialInstance_ReturnValue; // 0x0010(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         K2Node_Select_Default;                             // 0x0018(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Conv_BoolToFloat_ReturnValue;             // 0x001C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UMaterialInstanceDynamic*               CallFunc_ConvertToDynamicMaterialInstance_ReturnValue_1; // 0x0020(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_NotEqual_BoolBool_ReturnValue;            // 0x0028(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(WIDGET_HotbarSlot_C_SetEquipState) == 0x000008, "Wrong alignment on WIDGET_HotbarSlot_C_SetEquipState");
static_assert(sizeof(WIDGET_HotbarSlot_C_SetEquipState) == 0x000030, "Wrong size on WIDGET_HotbarSlot_C_SetEquipState");
static_assert(offsetof(WIDGET_HotbarSlot_C_SetEquipState, Equipped) == 0x000000, "Member 'WIDGET_HotbarSlot_C_SetEquipState::Equipped' has a wrong offset!");
static_assert(offsetof(WIDGET_HotbarSlot_C_SetEquipState, Temp_bool_Variable) == 0x000001, "Member 'WIDGET_HotbarSlot_C_SetEquipState::Temp_bool_Variable' has a wrong offset!");
static_assert(offsetof(WIDGET_HotbarSlot_C_SetEquipState, Temp_float_Variable) == 0x000004, "Member 'WIDGET_HotbarSlot_C_SetEquipState::Temp_float_Variable' has a wrong offset!");
static_assert(offsetof(WIDGET_HotbarSlot_C_SetEquipState, Temp_float_Variable_1) == 0x000008, "Member 'WIDGET_HotbarSlot_C_SetEquipState::Temp_float_Variable_1' has a wrong offset!");
static_assert(offsetof(WIDGET_HotbarSlot_C_SetEquipState, CallFunc_ConvertToDynamicMaterialInstance_ReturnValue) == 0x000010, "Member 'WIDGET_HotbarSlot_C_SetEquipState::CallFunc_ConvertToDynamicMaterialInstance_ReturnValue' has a wrong offset!");
static_assert(offsetof(WIDGET_HotbarSlot_C_SetEquipState, K2Node_Select_Default) == 0x000018, "Member 'WIDGET_HotbarSlot_C_SetEquipState::K2Node_Select_Default' has a wrong offset!");
static_assert(offsetof(WIDGET_HotbarSlot_C_SetEquipState, CallFunc_Conv_BoolToFloat_ReturnValue) == 0x00001C, "Member 'WIDGET_HotbarSlot_C_SetEquipState::CallFunc_Conv_BoolToFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(WIDGET_HotbarSlot_C_SetEquipState, CallFunc_ConvertToDynamicMaterialInstance_ReturnValue_1) == 0x000020, "Member 'WIDGET_HotbarSlot_C_SetEquipState::CallFunc_ConvertToDynamicMaterialInstance_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(WIDGET_HotbarSlot_C_SetEquipState, CallFunc_NotEqual_BoolBool_ReturnValue) == 0x000028, "Member 'WIDGET_HotbarSlot_C_SetEquipState::CallFunc_NotEqual_BoolBool_ReturnValue' has a wrong offset!");

// Function WIDGET_HotbarSlot.WIDGET_HotbarSlot_C.HandleMouseEnter
// 0x0060 (0x0060 - 0x0000)
struct WIDGET_HotbarSlot_C_HandleMouseEnter final
{
public:
	TScriptInterface<class IINTERF_HotbarSlottable_C> CursorSlottableObject;                             // 0x0000(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	class UMaterialInstanceDynamic*               BackgroundMaterial;                                // 0x0010(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_GetSlotIndex_SlotIndex;                   // 0x0018(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_CanSlotAtIndex_Result;                    // 0x001C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_1D[0x3];                                       // 0x001D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class UITEM_Base_C*                           CallFunc_GetCursorItem_Result;                     // 0x0020(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Conv_BoolToFloat_ReturnValue;             // 0x0028(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_GetHotbarSlottableObject_Valid;           // 0x002C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_2D[0x3];                                       // 0x002D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	TScriptInterface<class IINTERF_HotbarSlottable_C> CallFunc_GetHotbarSlottableObject_SlottableObject; // 0x0030(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor)
	class UITEM_Base_C*                           CallFunc_GetCursorItem_Result_1;                   // 0x0040(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0048(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_49[0x7];                                       // 0x0049(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UMaterialInstanceDynamic*               CallFunc_ConvertToDynamicMaterialInstance_ReturnValue; // 0x0050(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UMaterialInstanceDynamic*               CallFunc_ConvertToDynamicMaterialInstance_ReturnValue_1; // 0x0058(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(WIDGET_HotbarSlot_C_HandleMouseEnter) == 0x000008, "Wrong alignment on WIDGET_HotbarSlot_C_HandleMouseEnter");
static_assert(sizeof(WIDGET_HotbarSlot_C_HandleMouseEnter) == 0x000060, "Wrong size on WIDGET_HotbarSlot_C_HandleMouseEnter");
static_assert(offsetof(WIDGET_HotbarSlot_C_HandleMouseEnter, CursorSlottableObject) == 0x000000, "Member 'WIDGET_HotbarSlot_C_HandleMouseEnter::CursorSlottableObject' has a wrong offset!");
static_assert(offsetof(WIDGET_HotbarSlot_C_HandleMouseEnter, BackgroundMaterial) == 0x000010, "Member 'WIDGET_HotbarSlot_C_HandleMouseEnter::BackgroundMaterial' has a wrong offset!");
static_assert(offsetof(WIDGET_HotbarSlot_C_HandleMouseEnter, CallFunc_GetSlotIndex_SlotIndex) == 0x000018, "Member 'WIDGET_HotbarSlot_C_HandleMouseEnter::CallFunc_GetSlotIndex_SlotIndex' has a wrong offset!");
static_assert(offsetof(WIDGET_HotbarSlot_C_HandleMouseEnter, CallFunc_CanSlotAtIndex_Result) == 0x00001C, "Member 'WIDGET_HotbarSlot_C_HandleMouseEnter::CallFunc_CanSlotAtIndex_Result' has a wrong offset!");
static_assert(offsetof(WIDGET_HotbarSlot_C_HandleMouseEnter, CallFunc_GetCursorItem_Result) == 0x000020, "Member 'WIDGET_HotbarSlot_C_HandleMouseEnter::CallFunc_GetCursorItem_Result' has a wrong offset!");
static_assert(offsetof(WIDGET_HotbarSlot_C_HandleMouseEnter, CallFunc_Conv_BoolToFloat_ReturnValue) == 0x000028, "Member 'WIDGET_HotbarSlot_C_HandleMouseEnter::CallFunc_Conv_BoolToFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(WIDGET_HotbarSlot_C_HandleMouseEnter, CallFunc_GetHotbarSlottableObject_Valid) == 0x00002C, "Member 'WIDGET_HotbarSlot_C_HandleMouseEnter::CallFunc_GetHotbarSlottableObject_Valid' has a wrong offset!");
static_assert(offsetof(WIDGET_HotbarSlot_C_HandleMouseEnter, CallFunc_GetHotbarSlottableObject_SlottableObject) == 0x000030, "Member 'WIDGET_HotbarSlot_C_HandleMouseEnter::CallFunc_GetHotbarSlottableObject_SlottableObject' has a wrong offset!");
static_assert(offsetof(WIDGET_HotbarSlot_C_HandleMouseEnter, CallFunc_GetCursorItem_Result_1) == 0x000040, "Member 'WIDGET_HotbarSlot_C_HandleMouseEnter::CallFunc_GetCursorItem_Result_1' has a wrong offset!");
static_assert(offsetof(WIDGET_HotbarSlot_C_HandleMouseEnter, CallFunc_IsValid_ReturnValue) == 0x000048, "Member 'WIDGET_HotbarSlot_C_HandleMouseEnter::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(WIDGET_HotbarSlot_C_HandleMouseEnter, CallFunc_ConvertToDynamicMaterialInstance_ReturnValue) == 0x000050, "Member 'WIDGET_HotbarSlot_C_HandleMouseEnter::CallFunc_ConvertToDynamicMaterialInstance_ReturnValue' has a wrong offset!");
static_assert(offsetof(WIDGET_HotbarSlot_C_HandleMouseEnter, CallFunc_ConvertToDynamicMaterialInstance_ReturnValue_1) == 0x000058, "Member 'WIDGET_HotbarSlot_C_HandleMouseEnter::CallFunc_ConvertToDynamicMaterialInstance_ReturnValue_1' has a wrong offset!");

// Function WIDGET_HotbarSlot.WIDGET_HotbarSlot_C.HandleMouseLeave
// 0x0028 (0x0028 - 0x0000)
struct WIDGET_HotbarSlot_C_HandleMouseLeave final
{
public:
	bool                                          Temp_bool_Variable;                                // 0x0000(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         Temp_float_Variable;                               // 0x0004(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Temp_float_Variable_1;                             // 0x0008(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UMaterialInstanceDynamic*               CallFunc_ConvertToDynamicMaterialInstance_ReturnValue; // 0x0010(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         K2Node_Select_Default;                             // 0x0018(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1C[0x4];                                       // 0x001C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UMaterialInstanceDynamic*               CallFunc_ConvertToDynamicMaterialInstance_ReturnValue_1; // 0x0020(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(WIDGET_HotbarSlot_C_HandleMouseLeave) == 0x000008, "Wrong alignment on WIDGET_HotbarSlot_C_HandleMouseLeave");
static_assert(sizeof(WIDGET_HotbarSlot_C_HandleMouseLeave) == 0x000028, "Wrong size on WIDGET_HotbarSlot_C_HandleMouseLeave");
static_assert(offsetof(WIDGET_HotbarSlot_C_HandleMouseLeave, Temp_bool_Variable) == 0x000000, "Member 'WIDGET_HotbarSlot_C_HandleMouseLeave::Temp_bool_Variable' has a wrong offset!");
static_assert(offsetof(WIDGET_HotbarSlot_C_HandleMouseLeave, Temp_float_Variable) == 0x000004, "Member 'WIDGET_HotbarSlot_C_HandleMouseLeave::Temp_float_Variable' has a wrong offset!");
static_assert(offsetof(WIDGET_HotbarSlot_C_HandleMouseLeave, Temp_float_Variable_1) == 0x000008, "Member 'WIDGET_HotbarSlot_C_HandleMouseLeave::Temp_float_Variable_1' has a wrong offset!");
static_assert(offsetof(WIDGET_HotbarSlot_C_HandleMouseLeave, CallFunc_ConvertToDynamicMaterialInstance_ReturnValue) == 0x000010, "Member 'WIDGET_HotbarSlot_C_HandleMouseLeave::CallFunc_ConvertToDynamicMaterialInstance_ReturnValue' has a wrong offset!");
static_assert(offsetof(WIDGET_HotbarSlot_C_HandleMouseLeave, K2Node_Select_Default) == 0x000018, "Member 'WIDGET_HotbarSlot_C_HandleMouseLeave::K2Node_Select_Default' has a wrong offset!");
static_assert(offsetof(WIDGET_HotbarSlot_C_HandleMouseLeave, CallFunc_ConvertToDynamicMaterialInstance_ReturnValue_1) == 0x000020, "Member 'WIDGET_HotbarSlot_C_HandleMouseLeave::CallFunc_ConvertToDynamicMaterialInstance_ReturnValue_1' has a wrong offset!");

// Function WIDGET_HotbarSlot.WIDGET_HotbarSlot_C.EVENT_OnItemCountChanged
// 0x0020 (0x0020 - 0x0000)
struct WIDGET_HotbarSlot_C_EVENT_OnItemCountChanged final
{
public:
	class UITEM_Base_C*                           Item;                                              // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Count;                                             // 0x0008(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UObject*                                CallFunc_Conv_InterfaceToObject_ReturnValue;       // 0x0010(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_GetHotbarCount_ResultCount;               // 0x0018(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x001C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(WIDGET_HotbarSlot_C_EVENT_OnItemCountChanged) == 0x000008, "Wrong alignment on WIDGET_HotbarSlot_C_EVENT_OnItemCountChanged");
static_assert(sizeof(WIDGET_HotbarSlot_C_EVENT_OnItemCountChanged) == 0x000020, "Wrong size on WIDGET_HotbarSlot_C_EVENT_OnItemCountChanged");
static_assert(offsetof(WIDGET_HotbarSlot_C_EVENT_OnItemCountChanged, Item) == 0x000000, "Member 'WIDGET_HotbarSlot_C_EVENT_OnItemCountChanged::Item' has a wrong offset!");
static_assert(offsetof(WIDGET_HotbarSlot_C_EVENT_OnItemCountChanged, Count) == 0x000008, "Member 'WIDGET_HotbarSlot_C_EVENT_OnItemCountChanged::Count' has a wrong offset!");
static_assert(offsetof(WIDGET_HotbarSlot_C_EVENT_OnItemCountChanged, CallFunc_Conv_InterfaceToObject_ReturnValue) == 0x000010, "Member 'WIDGET_HotbarSlot_C_EVENT_OnItemCountChanged::CallFunc_Conv_InterfaceToObject_ReturnValue' has a wrong offset!");
static_assert(offsetof(WIDGET_HotbarSlot_C_EVENT_OnItemCountChanged, CallFunc_GetHotbarCount_ResultCount) == 0x000018, "Member 'WIDGET_HotbarSlot_C_EVENT_OnItemCountChanged::CallFunc_GetHotbarCount_ResultCount' has a wrong offset!");
static_assert(offsetof(WIDGET_HotbarSlot_C_EVENT_OnItemCountChanged, CallFunc_IsValid_ReturnValue) == 0x00001C, "Member 'WIDGET_HotbarSlot_C_EVENT_OnItemCountChanged::CallFunc_IsValid_ReturnValue' has a wrong offset!");

// Function WIDGET_HotbarSlot.WIDGET_HotbarSlot_C.BindItemChangedEvents
// 0x0098 (0x0098 - 0x0000)
struct WIDGET_HotbarSlot_C_BindItemChangedEvents final
{
public:
	class UITEM_Base_C*                           Item;                                              // 0x0000(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TDelegate<void(class UITEM_WeaponBase_C* Weapon, class UITEM_WeaponModKit_Base_C* ModKit)> K2Node_CreateDelegate_OutputDelegate;              // 0x0008(0x0010)(ZeroConstructor, NoDestructor)
	class UCOMP_Inventory_C*                      CallFunc_GetInventory_Inventory;                   // 0x0018(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TDelegate<void(class UITEM_Base_C* HandheldItem, int32 Count)> K2Node_CreateDelegate_OutputDelegate_1;            // 0x0020(0x0010)(ZeroConstructor, NoDestructor)
	class UCOMP_HackerInventory_C*                K2Node_DynamicCast_AsCOMP_Hacker_Inventory;        // 0x0030(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0038(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_39[0x7];                                       // 0x0039(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UITEM_HandheldConsumable_Base_C*        K2Node_DynamicCast_AsITEM_Handheld_Consumable_Base; // 0x0040(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess_1;                     // 0x0048(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_49[0x3];                                       // 0x0049(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	TDelegate<void(class UITEM_Base_C* Item, int32 Count)> K2Node_CreateDelegate_OutputDelegate_2;            // 0x004C(0x0010)(ZeroConstructor, NoDestructor)
	TDelegate<void(class UITEM_WeaponBase_C* EquippedWeapon)> K2Node_CreateDelegate_OutputDelegate_3;            // 0x005C(0x0010)(ZeroConstructor, NoDestructor)
	uint8                                         Pad_6C[0x4];                                       // 0x006C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UITEM_WeaponBase_C*                     K2Node_DynamicCast_AsITEM_Weapon_Base;             // 0x0070(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess_2;                     // 0x0078(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_79[0x7];                                       // 0x0079(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UObject*                                CallFunc_Conv_InterfaceToObject_ReturnValue;       // 0x0080(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UITEM_Base_C*                           K2Node_DynamicCast_AsITEM_Base;                    // 0x0088(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess_3;                     // 0x0090(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(WIDGET_HotbarSlot_C_BindItemChangedEvents) == 0x000008, "Wrong alignment on WIDGET_HotbarSlot_C_BindItemChangedEvents");
static_assert(sizeof(WIDGET_HotbarSlot_C_BindItemChangedEvents) == 0x000098, "Wrong size on WIDGET_HotbarSlot_C_BindItemChangedEvents");
static_assert(offsetof(WIDGET_HotbarSlot_C_BindItemChangedEvents, Item) == 0x000000, "Member 'WIDGET_HotbarSlot_C_BindItemChangedEvents::Item' has a wrong offset!");
static_assert(offsetof(WIDGET_HotbarSlot_C_BindItemChangedEvents, K2Node_CreateDelegate_OutputDelegate) == 0x000008, "Member 'WIDGET_HotbarSlot_C_BindItemChangedEvents::K2Node_CreateDelegate_OutputDelegate' has a wrong offset!");
static_assert(offsetof(WIDGET_HotbarSlot_C_BindItemChangedEvents, CallFunc_GetInventory_Inventory) == 0x000018, "Member 'WIDGET_HotbarSlot_C_BindItemChangedEvents::CallFunc_GetInventory_Inventory' has a wrong offset!");
static_assert(offsetof(WIDGET_HotbarSlot_C_BindItemChangedEvents, K2Node_CreateDelegate_OutputDelegate_1) == 0x000020, "Member 'WIDGET_HotbarSlot_C_BindItemChangedEvents::K2Node_CreateDelegate_OutputDelegate_1' has a wrong offset!");
static_assert(offsetof(WIDGET_HotbarSlot_C_BindItemChangedEvents, K2Node_DynamicCast_AsCOMP_Hacker_Inventory) == 0x000030, "Member 'WIDGET_HotbarSlot_C_BindItemChangedEvents::K2Node_DynamicCast_AsCOMP_Hacker_Inventory' has a wrong offset!");
static_assert(offsetof(WIDGET_HotbarSlot_C_BindItemChangedEvents, K2Node_DynamicCast_bSuccess) == 0x000038, "Member 'WIDGET_HotbarSlot_C_BindItemChangedEvents::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(WIDGET_HotbarSlot_C_BindItemChangedEvents, K2Node_DynamicCast_AsITEM_Handheld_Consumable_Base) == 0x000040, "Member 'WIDGET_HotbarSlot_C_BindItemChangedEvents::K2Node_DynamicCast_AsITEM_Handheld_Consumable_Base' has a wrong offset!");
static_assert(offsetof(WIDGET_HotbarSlot_C_BindItemChangedEvents, K2Node_DynamicCast_bSuccess_1) == 0x000048, "Member 'WIDGET_HotbarSlot_C_BindItemChangedEvents::K2Node_DynamicCast_bSuccess_1' has a wrong offset!");
static_assert(offsetof(WIDGET_HotbarSlot_C_BindItemChangedEvents, K2Node_CreateDelegate_OutputDelegate_2) == 0x00004C, "Member 'WIDGET_HotbarSlot_C_BindItemChangedEvents::K2Node_CreateDelegate_OutputDelegate_2' has a wrong offset!");
static_assert(offsetof(WIDGET_HotbarSlot_C_BindItemChangedEvents, K2Node_CreateDelegate_OutputDelegate_3) == 0x00005C, "Member 'WIDGET_HotbarSlot_C_BindItemChangedEvents::K2Node_CreateDelegate_OutputDelegate_3' has a wrong offset!");
static_assert(offsetof(WIDGET_HotbarSlot_C_BindItemChangedEvents, K2Node_DynamicCast_AsITEM_Weapon_Base) == 0x000070, "Member 'WIDGET_HotbarSlot_C_BindItemChangedEvents::K2Node_DynamicCast_AsITEM_Weapon_Base' has a wrong offset!");
static_assert(offsetof(WIDGET_HotbarSlot_C_BindItemChangedEvents, K2Node_DynamicCast_bSuccess_2) == 0x000078, "Member 'WIDGET_HotbarSlot_C_BindItemChangedEvents::K2Node_DynamicCast_bSuccess_2' has a wrong offset!");
static_assert(offsetof(WIDGET_HotbarSlot_C_BindItemChangedEvents, CallFunc_Conv_InterfaceToObject_ReturnValue) == 0x000080, "Member 'WIDGET_HotbarSlot_C_BindItemChangedEvents::CallFunc_Conv_InterfaceToObject_ReturnValue' has a wrong offset!");
static_assert(offsetof(WIDGET_HotbarSlot_C_BindItemChangedEvents, K2Node_DynamicCast_AsITEM_Base) == 0x000088, "Member 'WIDGET_HotbarSlot_C_BindItemChangedEvents::K2Node_DynamicCast_AsITEM_Base' has a wrong offset!");
static_assert(offsetof(WIDGET_HotbarSlot_C_BindItemChangedEvents, K2Node_DynamicCast_bSuccess_3) == 0x000090, "Member 'WIDGET_HotbarSlot_C_BindItemChangedEvents::K2Node_DynamicCast_bSuccess_3' has a wrong offset!");

// Function WIDGET_HotbarSlot.WIDGET_HotbarSlot_C.UnbindItemChangedEvents
// 0x0098 (0x0098 - 0x0000)
struct WIDGET_HotbarSlot_C_UnbindItemChangedEvents final
{
public:
	class UITEM_Base_C*                           Item;                                              // 0x0000(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TDelegate<void(class UITEM_WeaponBase_C* EquippedWeapon)> K2Node_CreateDelegate_OutputDelegate;              // 0x0008(0x0010)(ZeroConstructor, NoDestructor)
	class UCOMP_Inventory_C*                      CallFunc_GetInventory_Inventory;                   // 0x0018(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TDelegate<void(class UITEM_Base_C* HandheldItem, int32 Count)> K2Node_CreateDelegate_OutputDelegate_1;            // 0x0020(0x0010)(ZeroConstructor, NoDestructor)
	class UCOMP_HackerInventory_C*                K2Node_DynamicCast_AsCOMP_Hacker_Inventory;        // 0x0030(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0038(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_39[0x7];                                       // 0x0039(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UITEM_HandheldConsumable_Base_C*        K2Node_DynamicCast_AsITEM_Handheld_Consumable_Base; // 0x0040(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess_1;                     // 0x0048(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_49[0x3];                                       // 0x0049(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	TDelegate<void(class UITEM_WeaponBase_C* Weapon, class UITEM_WeaponModKit_Base_C* ModKit)> K2Node_CreateDelegate_OutputDelegate_2;            // 0x004C(0x0010)(ZeroConstructor, NoDestructor)
	uint8                                         Pad_5C[0x4];                                       // 0x005C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UITEM_WeaponBase_C*                     K2Node_DynamicCast_AsITEM_Weapon_Base;             // 0x0060(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess_2;                     // 0x0068(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_69[0x3];                                       // 0x0069(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	TDelegate<void(class UITEM_Base_C* Item, int32 Count)> K2Node_CreateDelegate_OutputDelegate_3;            // 0x006C(0x0010)(ZeroConstructor, NoDestructor)
	uint8                                         Pad_7C[0x4];                                       // 0x007C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UObject*                                CallFunc_Conv_InterfaceToObject_ReturnValue;       // 0x0080(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UITEM_Base_C*                           K2Node_DynamicCast_AsITEM_Base;                    // 0x0088(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess_3;                     // 0x0090(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(WIDGET_HotbarSlot_C_UnbindItemChangedEvents) == 0x000008, "Wrong alignment on WIDGET_HotbarSlot_C_UnbindItemChangedEvents");
static_assert(sizeof(WIDGET_HotbarSlot_C_UnbindItemChangedEvents) == 0x000098, "Wrong size on WIDGET_HotbarSlot_C_UnbindItemChangedEvents");
static_assert(offsetof(WIDGET_HotbarSlot_C_UnbindItemChangedEvents, Item) == 0x000000, "Member 'WIDGET_HotbarSlot_C_UnbindItemChangedEvents::Item' has a wrong offset!");
static_assert(offsetof(WIDGET_HotbarSlot_C_UnbindItemChangedEvents, K2Node_CreateDelegate_OutputDelegate) == 0x000008, "Member 'WIDGET_HotbarSlot_C_UnbindItemChangedEvents::K2Node_CreateDelegate_OutputDelegate' has a wrong offset!");
static_assert(offsetof(WIDGET_HotbarSlot_C_UnbindItemChangedEvents, CallFunc_GetInventory_Inventory) == 0x000018, "Member 'WIDGET_HotbarSlot_C_UnbindItemChangedEvents::CallFunc_GetInventory_Inventory' has a wrong offset!");
static_assert(offsetof(WIDGET_HotbarSlot_C_UnbindItemChangedEvents, K2Node_CreateDelegate_OutputDelegate_1) == 0x000020, "Member 'WIDGET_HotbarSlot_C_UnbindItemChangedEvents::K2Node_CreateDelegate_OutputDelegate_1' has a wrong offset!");
static_assert(offsetof(WIDGET_HotbarSlot_C_UnbindItemChangedEvents, K2Node_DynamicCast_AsCOMP_Hacker_Inventory) == 0x000030, "Member 'WIDGET_HotbarSlot_C_UnbindItemChangedEvents::K2Node_DynamicCast_AsCOMP_Hacker_Inventory' has a wrong offset!");
static_assert(offsetof(WIDGET_HotbarSlot_C_UnbindItemChangedEvents, K2Node_DynamicCast_bSuccess) == 0x000038, "Member 'WIDGET_HotbarSlot_C_UnbindItemChangedEvents::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(WIDGET_HotbarSlot_C_UnbindItemChangedEvents, K2Node_DynamicCast_AsITEM_Handheld_Consumable_Base) == 0x000040, "Member 'WIDGET_HotbarSlot_C_UnbindItemChangedEvents::K2Node_DynamicCast_AsITEM_Handheld_Consumable_Base' has a wrong offset!");
static_assert(offsetof(WIDGET_HotbarSlot_C_UnbindItemChangedEvents, K2Node_DynamicCast_bSuccess_1) == 0x000048, "Member 'WIDGET_HotbarSlot_C_UnbindItemChangedEvents::K2Node_DynamicCast_bSuccess_1' has a wrong offset!");
static_assert(offsetof(WIDGET_HotbarSlot_C_UnbindItemChangedEvents, K2Node_CreateDelegate_OutputDelegate_2) == 0x00004C, "Member 'WIDGET_HotbarSlot_C_UnbindItemChangedEvents::K2Node_CreateDelegate_OutputDelegate_2' has a wrong offset!");
static_assert(offsetof(WIDGET_HotbarSlot_C_UnbindItemChangedEvents, K2Node_DynamicCast_AsITEM_Weapon_Base) == 0x000060, "Member 'WIDGET_HotbarSlot_C_UnbindItemChangedEvents::K2Node_DynamicCast_AsITEM_Weapon_Base' has a wrong offset!");
static_assert(offsetof(WIDGET_HotbarSlot_C_UnbindItemChangedEvents, K2Node_DynamicCast_bSuccess_2) == 0x000068, "Member 'WIDGET_HotbarSlot_C_UnbindItemChangedEvents::K2Node_DynamicCast_bSuccess_2' has a wrong offset!");
static_assert(offsetof(WIDGET_HotbarSlot_C_UnbindItemChangedEvents, K2Node_CreateDelegate_OutputDelegate_3) == 0x00006C, "Member 'WIDGET_HotbarSlot_C_UnbindItemChangedEvents::K2Node_CreateDelegate_OutputDelegate_3' has a wrong offset!");
static_assert(offsetof(WIDGET_HotbarSlot_C_UnbindItemChangedEvents, CallFunc_Conv_InterfaceToObject_ReturnValue) == 0x000080, "Member 'WIDGET_HotbarSlot_C_UnbindItemChangedEvents::CallFunc_Conv_InterfaceToObject_ReturnValue' has a wrong offset!");
static_assert(offsetof(WIDGET_HotbarSlot_C_UnbindItemChangedEvents, K2Node_DynamicCast_AsITEM_Base) == 0x000088, "Member 'WIDGET_HotbarSlot_C_UnbindItemChangedEvents::K2Node_DynamicCast_AsITEM_Base' has a wrong offset!");
static_assert(offsetof(WIDGET_HotbarSlot_C_UnbindItemChangedEvents, K2Node_DynamicCast_bSuccess_3) == 0x000090, "Member 'WIDGET_HotbarSlot_C_UnbindItemChangedEvents::K2Node_DynamicCast_bSuccess_3' has a wrong offset!");

// Function WIDGET_HotbarSlot.WIDGET_HotbarSlot_C.UpdateHotbarSlot
// 0x0020 (0x0020 - 0x0000)
struct WIDGET_HotbarSlot_C_UpdateHotbarSlot final
{
public:
	class UObject*                                CallFunc_Conv_InterfaceToObject_ReturnValue;       // 0x0000(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_GetEquipState_Result;                     // 0x0008(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0009(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_A[0x2];                                        // 0x000A(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_GetHotbarCount_ResultCount;               // 0x000C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UTexture*                               CallFunc_GetHotbarIcon_ResultIcon;                 // 0x0010(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UMaterialInstanceDynamic*               CallFunc_ConvertToDynamicMaterialInstance_ReturnValue; // 0x0018(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(WIDGET_HotbarSlot_C_UpdateHotbarSlot) == 0x000008, "Wrong alignment on WIDGET_HotbarSlot_C_UpdateHotbarSlot");
static_assert(sizeof(WIDGET_HotbarSlot_C_UpdateHotbarSlot) == 0x000020, "Wrong size on WIDGET_HotbarSlot_C_UpdateHotbarSlot");
static_assert(offsetof(WIDGET_HotbarSlot_C_UpdateHotbarSlot, CallFunc_Conv_InterfaceToObject_ReturnValue) == 0x000000, "Member 'WIDGET_HotbarSlot_C_UpdateHotbarSlot::CallFunc_Conv_InterfaceToObject_ReturnValue' has a wrong offset!");
static_assert(offsetof(WIDGET_HotbarSlot_C_UpdateHotbarSlot, CallFunc_GetEquipState_Result) == 0x000008, "Member 'WIDGET_HotbarSlot_C_UpdateHotbarSlot::CallFunc_GetEquipState_Result' has a wrong offset!");
static_assert(offsetof(WIDGET_HotbarSlot_C_UpdateHotbarSlot, CallFunc_IsValid_ReturnValue) == 0x000009, "Member 'WIDGET_HotbarSlot_C_UpdateHotbarSlot::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(WIDGET_HotbarSlot_C_UpdateHotbarSlot, CallFunc_GetHotbarCount_ResultCount) == 0x00000C, "Member 'WIDGET_HotbarSlot_C_UpdateHotbarSlot::CallFunc_GetHotbarCount_ResultCount' has a wrong offset!");
static_assert(offsetof(WIDGET_HotbarSlot_C_UpdateHotbarSlot, CallFunc_GetHotbarIcon_ResultIcon) == 0x000010, "Member 'WIDGET_HotbarSlot_C_UpdateHotbarSlot::CallFunc_GetHotbarIcon_ResultIcon' has a wrong offset!");
static_assert(offsetof(WIDGET_HotbarSlot_C_UpdateHotbarSlot, CallFunc_ConvertToDynamicMaterialInstance_ReturnValue) == 0x000018, "Member 'WIDGET_HotbarSlot_C_UpdateHotbarSlot::CallFunc_ConvertToDynamicMaterialInstance_ReturnValue' has a wrong offset!");

// Function WIDGET_HotbarSlot.WIDGET_HotbarSlot_C.SetFrameOpacity
// 0x0010 (0x0010 - 0x0000)
struct WIDGET_HotbarSlot_C_SetFrameOpacity final
{
public:
	float                                         NewOpacity;                                        // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_NotEqual_FloatFloat_ReturnValue;          // 0x0004(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class UMaterialInstanceDynamic*               CallFunc_ConvertToDynamicMaterialInstance_ReturnValue; // 0x0008(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(WIDGET_HotbarSlot_C_SetFrameOpacity) == 0x000008, "Wrong alignment on WIDGET_HotbarSlot_C_SetFrameOpacity");
static_assert(sizeof(WIDGET_HotbarSlot_C_SetFrameOpacity) == 0x000010, "Wrong size on WIDGET_HotbarSlot_C_SetFrameOpacity");
static_assert(offsetof(WIDGET_HotbarSlot_C_SetFrameOpacity, NewOpacity) == 0x000000, "Member 'WIDGET_HotbarSlot_C_SetFrameOpacity::NewOpacity' has a wrong offset!");
static_assert(offsetof(WIDGET_HotbarSlot_C_SetFrameOpacity, CallFunc_NotEqual_FloatFloat_ReturnValue) == 0x000004, "Member 'WIDGET_HotbarSlot_C_SetFrameOpacity::CallFunc_NotEqual_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(WIDGET_HotbarSlot_C_SetFrameOpacity, CallFunc_ConvertToDynamicMaterialInstance_ReturnValue) == 0x000008, "Member 'WIDGET_HotbarSlot_C_SetFrameOpacity::CallFunc_ConvertToDynamicMaterialInstance_ReturnValue' has a wrong offset!");

// Function WIDGET_HotbarSlot.WIDGET_HotbarSlot_C.UpdateSlotDisplayName
// 0x0030 (0x0030 - 0x0000)
struct WIDGET_HotbarSlot_C_UpdateSlotDisplayName final
{
public:
	class FText                                   CallFunc_GetHotbarDisplayName_Result;              // 0x0000(0x0018)()
	class FText                                   CallFunc_TextToUpper_ReturnValue;                  // 0x0018(0x0018)()
};
static_assert(alignof(WIDGET_HotbarSlot_C_UpdateSlotDisplayName) == 0x000008, "Wrong alignment on WIDGET_HotbarSlot_C_UpdateSlotDisplayName");
static_assert(sizeof(WIDGET_HotbarSlot_C_UpdateSlotDisplayName) == 0x000030, "Wrong size on WIDGET_HotbarSlot_C_UpdateSlotDisplayName");
static_assert(offsetof(WIDGET_HotbarSlot_C_UpdateSlotDisplayName, CallFunc_GetHotbarDisplayName_Result) == 0x000000, "Member 'WIDGET_HotbarSlot_C_UpdateSlotDisplayName::CallFunc_GetHotbarDisplayName_Result' has a wrong offset!");
static_assert(offsetof(WIDGET_HotbarSlot_C_UpdateSlotDisplayName, CallFunc_TextToUpper_ReturnValue) == 0x000018, "Member 'WIDGET_HotbarSlot_C_UpdateSlotDisplayName::CallFunc_TextToUpper_ReturnValue' has a wrong offset!");

// Function WIDGET_HotbarSlot.WIDGET_HotbarSlot_C.UpdateSlotNumberColor
// 0x001C (0x001C - 0x0000)
struct WIDGET_HotbarSlot_C_UpdateSlotNumberColor final
{
public:
	bool                                          Temp_bool_Variable;                                // 0x0000(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Temp_bool_Variable_1;                              // 0x0001(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_2[0x2];                                        // 0x0002(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	struct FColor                                 CallFunc_GetMeshUIColor_Color;                     // 0x0004(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Greater_FloatFloat_ReturnValue;           // 0x0008(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FColor                                 CallFunc_GetMeshUIColor_Color_1;                   // 0x000C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FColor                                 CallFunc_GetMeshUIColor_Color_2;                   // 0x0010(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FColor                                 K2Node_Select_Default;                             // 0x0014(0x0004)(ConstParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FColor                                 K2Node_Select_Default_1;                           // 0x0018(0x0004)(ConstParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(WIDGET_HotbarSlot_C_UpdateSlotNumberColor) == 0x000004, "Wrong alignment on WIDGET_HotbarSlot_C_UpdateSlotNumberColor");
static_assert(sizeof(WIDGET_HotbarSlot_C_UpdateSlotNumberColor) == 0x00001C, "Wrong size on WIDGET_HotbarSlot_C_UpdateSlotNumberColor");
static_assert(offsetof(WIDGET_HotbarSlot_C_UpdateSlotNumberColor, Temp_bool_Variable) == 0x000000, "Member 'WIDGET_HotbarSlot_C_UpdateSlotNumberColor::Temp_bool_Variable' has a wrong offset!");
static_assert(offsetof(WIDGET_HotbarSlot_C_UpdateSlotNumberColor, Temp_bool_Variable_1) == 0x000001, "Member 'WIDGET_HotbarSlot_C_UpdateSlotNumberColor::Temp_bool_Variable_1' has a wrong offset!");
static_assert(offsetof(WIDGET_HotbarSlot_C_UpdateSlotNumberColor, CallFunc_GetMeshUIColor_Color) == 0x000004, "Member 'WIDGET_HotbarSlot_C_UpdateSlotNumberColor::CallFunc_GetMeshUIColor_Color' has a wrong offset!");
static_assert(offsetof(WIDGET_HotbarSlot_C_UpdateSlotNumberColor, CallFunc_Greater_FloatFloat_ReturnValue) == 0x000008, "Member 'WIDGET_HotbarSlot_C_UpdateSlotNumberColor::CallFunc_Greater_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(WIDGET_HotbarSlot_C_UpdateSlotNumberColor, CallFunc_GetMeshUIColor_Color_1) == 0x00000C, "Member 'WIDGET_HotbarSlot_C_UpdateSlotNumberColor::CallFunc_GetMeshUIColor_Color_1' has a wrong offset!");
static_assert(offsetof(WIDGET_HotbarSlot_C_UpdateSlotNumberColor, CallFunc_GetMeshUIColor_Color_2) == 0x000010, "Member 'WIDGET_HotbarSlot_C_UpdateSlotNumberColor::CallFunc_GetMeshUIColor_Color_2' has a wrong offset!");
static_assert(offsetof(WIDGET_HotbarSlot_C_UpdateSlotNumberColor, K2Node_Select_Default) == 0x000014, "Member 'WIDGET_HotbarSlot_C_UpdateSlotNumberColor::K2Node_Select_Default' has a wrong offset!");
static_assert(offsetof(WIDGET_HotbarSlot_C_UpdateSlotNumberColor, K2Node_Select_Default_1) == 0x000018, "Member 'WIDGET_HotbarSlot_C_UpdateSlotNumberColor::K2Node_Select_Default_1' has a wrong offset!");

// Function WIDGET_HotbarSlot.WIDGET_HotbarSlot_C.SetIsCurrentQuickSlot
// 0x0001 (0x0001 - 0x0000)
struct WIDGET_HotbarSlot_C_SetIsCurrentQuickSlot final
{
public:
	bool                                          State;                                             // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(WIDGET_HotbarSlot_C_SetIsCurrentQuickSlot) == 0x000001, "Wrong alignment on WIDGET_HotbarSlot_C_SetIsCurrentQuickSlot");
static_assert(sizeof(WIDGET_HotbarSlot_C_SetIsCurrentQuickSlot) == 0x000001, "Wrong size on WIDGET_HotbarSlot_C_SetIsCurrentQuickSlot");
static_assert(offsetof(WIDGET_HotbarSlot_C_SetIsCurrentQuickSlot, State) == 0x000000, "Member 'WIDGET_HotbarSlot_C_SetIsCurrentQuickSlot::State' has a wrong offset!");

// Function WIDGET_HotbarSlot.WIDGET_HotbarSlot_C.EVENT_OnEquipStateChanged
// 0x0018 (0x0018 - 0x0000)
struct WIDGET_HotbarSlot_C_EVENT_OnEquipStateChanged final
{
public:
	class UITEM_WeaponBase_C*                     Weapon;                                            // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UObject*                                CallFunc_Conv_InterfaceToObject_ReturnValue;       // 0x0008(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_ObjectObject_ReturnValue;      // 0x0010(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0011(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BooleanAND_ReturnValue;                   // 0x0012(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(WIDGET_HotbarSlot_C_EVENT_OnEquipStateChanged) == 0x000008, "Wrong alignment on WIDGET_HotbarSlot_C_EVENT_OnEquipStateChanged");
static_assert(sizeof(WIDGET_HotbarSlot_C_EVENT_OnEquipStateChanged) == 0x000018, "Wrong size on WIDGET_HotbarSlot_C_EVENT_OnEquipStateChanged");
static_assert(offsetof(WIDGET_HotbarSlot_C_EVENT_OnEquipStateChanged, Weapon) == 0x000000, "Member 'WIDGET_HotbarSlot_C_EVENT_OnEquipStateChanged::Weapon' has a wrong offset!");
static_assert(offsetof(WIDGET_HotbarSlot_C_EVENT_OnEquipStateChanged, CallFunc_Conv_InterfaceToObject_ReturnValue) == 0x000008, "Member 'WIDGET_HotbarSlot_C_EVENT_OnEquipStateChanged::CallFunc_Conv_InterfaceToObject_ReturnValue' has a wrong offset!");
static_assert(offsetof(WIDGET_HotbarSlot_C_EVENT_OnEquipStateChanged, CallFunc_EqualEqual_ObjectObject_ReturnValue) == 0x000010, "Member 'WIDGET_HotbarSlot_C_EVENT_OnEquipStateChanged::CallFunc_EqualEqual_ObjectObject_ReturnValue' has a wrong offset!");
static_assert(offsetof(WIDGET_HotbarSlot_C_EVENT_OnEquipStateChanged, CallFunc_IsValid_ReturnValue) == 0x000011, "Member 'WIDGET_HotbarSlot_C_EVENT_OnEquipStateChanged::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(WIDGET_HotbarSlot_C_EVENT_OnEquipStateChanged, CallFunc_BooleanAND_ReturnValue) == 0x000012, "Member 'WIDGET_HotbarSlot_C_EVENT_OnEquipStateChanged::CallFunc_BooleanAND_ReturnValue' has a wrong offset!");

// Function WIDGET_HotbarSlot.WIDGET_HotbarSlot_C.GetSlotIndex
// 0x0008 (0x0008 - 0x0000)
struct WIDGET_HotbarSlot_C_GetSlotIndex final
{
public:
	int32                                         SlotIndex;                                         // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_GetSlotIndexFromNumber_Index;             // 0x0004(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(WIDGET_HotbarSlot_C_GetSlotIndex) == 0x000004, "Wrong alignment on WIDGET_HotbarSlot_C_GetSlotIndex");
static_assert(sizeof(WIDGET_HotbarSlot_C_GetSlotIndex) == 0x000008, "Wrong size on WIDGET_HotbarSlot_C_GetSlotIndex");
static_assert(offsetof(WIDGET_HotbarSlot_C_GetSlotIndex, SlotIndex) == 0x000000, "Member 'WIDGET_HotbarSlot_C_GetSlotIndex::SlotIndex' has a wrong offset!");
static_assert(offsetof(WIDGET_HotbarSlot_C_GetSlotIndex, CallFunc_GetSlotIndexFromNumber_Index) == 0x000004, "Member 'WIDGET_HotbarSlot_C_GetSlotIndex::CallFunc_GetSlotIndexFromNumber_Index' has a wrong offset!");

// Function WIDGET_HotbarSlot.WIDGET_HotbarSlot_C.EVENT_OnModKitInstalled
// 0x0010 (0x0010 - 0x0000)
struct WIDGET_HotbarSlot_C_EVENT_OnModKitInstalled final
{
public:
	class UITEM_WeaponBase_C*                     Weapon;                                            // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UITEM_WeaponModKit_Base_C*              ModKit;                                            // 0x0008(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(WIDGET_HotbarSlot_C_EVENT_OnModKitInstalled) == 0x000008, "Wrong alignment on WIDGET_HotbarSlot_C_EVENT_OnModKitInstalled");
static_assert(sizeof(WIDGET_HotbarSlot_C_EVENT_OnModKitInstalled) == 0x000010, "Wrong size on WIDGET_HotbarSlot_C_EVENT_OnModKitInstalled");
static_assert(offsetof(WIDGET_HotbarSlot_C_EVENT_OnModKitInstalled, Weapon) == 0x000000, "Member 'WIDGET_HotbarSlot_C_EVENT_OnModKitInstalled::Weapon' has a wrong offset!");
static_assert(offsetof(WIDGET_HotbarSlot_C_EVENT_OnModKitInstalled, ModKit) == 0x000008, "Member 'WIDGET_HotbarSlot_C_EVENT_OnModKitInstalled::ModKit' has a wrong offset!");

// Function WIDGET_HotbarSlot.WIDGET_HotbarSlot_C.DisableFlickerEffect
// 0x0001 (0x0001 - 0x0000)
struct WIDGET_HotbarSlot_C_DisableFlickerEffect final
{
public:
	bool                                          Result;                                            // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(WIDGET_HotbarSlot_C_DisableFlickerEffect) == 0x000001, "Wrong alignment on WIDGET_HotbarSlot_C_DisableFlickerEffect");
static_assert(sizeof(WIDGET_HotbarSlot_C_DisableFlickerEffect) == 0x000001, "Wrong size on WIDGET_HotbarSlot_C_DisableFlickerEffect");
static_assert(offsetof(WIDGET_HotbarSlot_C_DisableFlickerEffect, Result) == 0x000000, "Member 'WIDGET_HotbarSlot_C_DisableFlickerEffect::Result' has a wrong offset!");

// Function WIDGET_HotbarSlot.WIDGET_HotbarSlot_C.EnableFlickerEffect
// 0x0001 (0x0001 - 0x0000)
struct WIDGET_HotbarSlot_C_EnableFlickerEffect final
{
public:
	bool                                          Result;                                            // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(WIDGET_HotbarSlot_C_EnableFlickerEffect) == 0x000001, "Wrong alignment on WIDGET_HotbarSlot_C_EnableFlickerEffect");
static_assert(sizeof(WIDGET_HotbarSlot_C_EnableFlickerEffect) == 0x000001, "Wrong size on WIDGET_HotbarSlot_C_EnableFlickerEffect");
static_assert(offsetof(WIDGET_HotbarSlot_C_EnableFlickerEffect, Result) == 0x000000, "Member 'WIDGET_HotbarSlot_C_EnableFlickerEffect::Result' has a wrong offset!");

// Function WIDGET_HotbarSlot.WIDGET_HotbarSlot_C.OnMouseExit
// 0x0001 (0x0001 - 0x0000)
struct WIDGET_HotbarSlot_C_OnMouseExit final
{
public:
	bool                                          Result;                                            // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(WIDGET_HotbarSlot_C_OnMouseExit) == 0x000001, "Wrong alignment on WIDGET_HotbarSlot_C_OnMouseExit");
static_assert(sizeof(WIDGET_HotbarSlot_C_OnMouseExit) == 0x000001, "Wrong size on WIDGET_HotbarSlot_C_OnMouseExit");
static_assert(offsetof(WIDGET_HotbarSlot_C_OnMouseExit, Result) == 0x000000, "Member 'WIDGET_HotbarSlot_C_OnMouseExit::Result' has a wrong offset!");

// Function WIDGET_HotbarSlot.WIDGET_HotbarSlot_C.OnMouseOver
// 0x0001 (0x0001 - 0x0000)
struct WIDGET_HotbarSlot_C_OnMouseOver final
{
public:
	bool                                          Result;                                            // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(WIDGET_HotbarSlot_C_OnMouseOver) == 0x000001, "Wrong alignment on WIDGET_HotbarSlot_C_OnMouseOver");
static_assert(sizeof(WIDGET_HotbarSlot_C_OnMouseOver) == 0x000001, "Wrong size on WIDGET_HotbarSlot_C_OnMouseOver");
static_assert(offsetof(WIDGET_HotbarSlot_C_OnMouseOver, Result) == 0x000000, "Member 'WIDGET_HotbarSlot_C_OnMouseOver::Result' has a wrong offset!");

// Function WIDGET_HotbarSlot.WIDGET_HotbarSlot_C.GetMeshWidget
// 0x0008 (0x0008 - 0x0000)
struct WIDGET_HotbarSlot_C_GetMeshWidget final
{
public:
	class UGridMeshWidget*                        Result;                                            // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(WIDGET_HotbarSlot_C_GetMeshWidget) == 0x000008, "Wrong alignment on WIDGET_HotbarSlot_C_GetMeshWidget");
static_assert(sizeof(WIDGET_HotbarSlot_C_GetMeshWidget) == 0x000008, "Wrong size on WIDGET_HotbarSlot_C_GetMeshWidget");
static_assert(offsetof(WIDGET_HotbarSlot_C_GetMeshWidget, Result) == 0x000000, "Member 'WIDGET_HotbarSlot_C_GetMeshWidget::Result' has a wrong offset!");

}

