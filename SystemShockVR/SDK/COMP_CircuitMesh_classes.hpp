#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: COMP_CircuitMesh

#include "Basic.hpp"

#include "ENUM_PowerState_structs.hpp"
#include "CoreUObject_structs.hpp"
#include "COMP_PuzzleCell_Base_classes.hpp"
#include "Engine_structs.hpp"
#include "ENUM_GeneratedCircuitType_structs.hpp"


namespace SDK
{

// BlueprintGeneratedClass COMP_CircuitMesh.COMP_CircuitMesh_C
// 0x00E0 (0x05D0 - 0x04F0)
class UCOMP_CircuitMesh_C final : public UCOMP_PuzzleCell_Base_C
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x04E8(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	int32                                         Row;                                               // 0x04F0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Column;                                            // 0x04F4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          North;                                             // 0x04F8(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          East;                                              // 0x04F9(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          South;                                             // 0x04FA(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          West;                                              // 0x04FB(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Powered;                                           // 0x04FC(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_4FD[0x3];                                      // 0x04FD(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         PowerValue;                                        // 0x0500(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_504[0x4];                                      // 0x0504(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class ACIRCUITPUZZLE_Base_C*                  CircuitPuzzle;                                     // 0x0508(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         PowerFillRate;                                     // 0x0510(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         PowerDecayRate;                                    // 0x0514(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TArray<class UCOMP_CircuitMesh_C*>            PowerSources;                                      // 0x0518(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance, ContainsInstancedReference)
	struct FVector                                InitialLocation;                                   // 0x0528(0x000C)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_534[0x4];                                      // 0x0534(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	FMulticastInlineDelegateProperty_             PoweredStateChanged;                               // 0x0538(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)
	ENUM_PowerState                               PowerState;                                        // 0x0548(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_549[0x7];                                      // 0x0549(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UMaterialInstanceDynamic*               DynamicMaterialInstance;                           // 0x0550(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FName                                   PowerParamName;                                    // 0x0558(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FName                                   NorthParamName;                                    // 0x0560(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FName                                   EastParamName;                                     // 0x0568(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FName                                   SouthParamName;                                    // 0x0570(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FName                                   WestParamName;                                     // 0x0578(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         TargetRollAngle;                                   // 0x0580(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               DefaultRotation;                                   // 0x0584(0x000C)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	ENUM_GeneratedCircuitType                     CircuitType;                                       // 0x0590(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_591[0x3];                                      // 0x0591(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   InteractableParamName;                             // 0x0594(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_59C[0x4];                                      // 0x059C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FIntPoint>                      BishopPattern;                                     // 0x05A0(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance)
	TArray<struct FIntPoint>                      RookPattern;                                       // 0x05B0(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance)
	class UStaticMeshComponent*                   DialComponent;                                     // 0x05C0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

public:
	void PoweredStateChanged__DelegateSignature(class UCOMP_CircuitMesh_C* Circuit, ENUM_PowerState PowerState_0);
	void ExecuteUbergraph_COMP_CircuitMesh(int32 EntryPoint);
	void ReceiveEndPlay(EEndPlayReason EndPlayReason);
	void AsyncLoadMesh(TSoftObjectPtr<class UStaticMesh> StaticMesh_0);
	void ReceiveTick(float DeltaSeconds);
	void OnLoaded_E480C1A14932C8045B5E2C81A4DAD4FA(class UObject* Loaded);
	void RegisterCircuitPuzzle(class ACIRCUITPUZZLE_Base_C* CircuitPuzzle_0);
	void ClearPowerSources();
	void ReceivePowerFromCircuit(class UCOMP_CircuitMesh_C* PowerOriginCircuit);
	void GetNorth(bool* North_0);
	void GetEast(bool* East_0);
	void GetSouth(bool* South_0);
	void GetWest(bool* West_0);
	void GetTargetRotation(struct FRotator* Result);
	void TryModifyComponentTickState(bool State);
	void RotateClockwise(bool HandleSideEffects, TSet<class UCOMP_CircuitMesh_C*>& RotatedCircuits);
	void UpdatePower(bool CanSupplyPower, float DeltaTime);
	void UpdateRotation(float DeltaTime, bool* Finished);
	void UpdateMaterial();
	void ApplyCircuitData(ENUM_GeneratedCircuitType Type, int32 Directions, class ACIRCUITPUZZLE_Base_C* CircuitPuzzle_0);
	void IsCellFocusable(bool* Result);
	void SetModifiedCellParameters(uint8 Params_0, bool* Result);
	void SetCellVisibility(bool IsVisible_0, bool* Result);
	void IsCellRotatable(bool* Result);

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"COMP_CircuitMesh_C">();
	}
	static class UCOMP_CircuitMesh_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<UCOMP_CircuitMesh_C>();
	}
};
static_assert(alignof(UCOMP_CircuitMesh_C) == 0x000010, "Wrong alignment on UCOMP_CircuitMesh_C");
static_assert(sizeof(UCOMP_CircuitMesh_C) == 0x0005D0, "Wrong size on UCOMP_CircuitMesh_C");
static_assert(offsetof(UCOMP_CircuitMesh_C, UberGraphFrame) == 0x0004E8, "Member 'UCOMP_CircuitMesh_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(UCOMP_CircuitMesh_C, Row) == 0x0004F0, "Member 'UCOMP_CircuitMesh_C::Row' has a wrong offset!");
static_assert(offsetof(UCOMP_CircuitMesh_C, Column) == 0x0004F4, "Member 'UCOMP_CircuitMesh_C::Column' has a wrong offset!");
static_assert(offsetof(UCOMP_CircuitMesh_C, North) == 0x0004F8, "Member 'UCOMP_CircuitMesh_C::North' has a wrong offset!");
static_assert(offsetof(UCOMP_CircuitMesh_C, East) == 0x0004F9, "Member 'UCOMP_CircuitMesh_C::East' has a wrong offset!");
static_assert(offsetof(UCOMP_CircuitMesh_C, South) == 0x0004FA, "Member 'UCOMP_CircuitMesh_C::South' has a wrong offset!");
static_assert(offsetof(UCOMP_CircuitMesh_C, West) == 0x0004FB, "Member 'UCOMP_CircuitMesh_C::West' has a wrong offset!");
static_assert(offsetof(UCOMP_CircuitMesh_C, Powered) == 0x0004FC, "Member 'UCOMP_CircuitMesh_C::Powered' has a wrong offset!");
static_assert(offsetof(UCOMP_CircuitMesh_C, PowerValue) == 0x000500, "Member 'UCOMP_CircuitMesh_C::PowerValue' has a wrong offset!");
static_assert(offsetof(UCOMP_CircuitMesh_C, CircuitPuzzle) == 0x000508, "Member 'UCOMP_CircuitMesh_C::CircuitPuzzle' has a wrong offset!");
static_assert(offsetof(UCOMP_CircuitMesh_C, PowerFillRate) == 0x000510, "Member 'UCOMP_CircuitMesh_C::PowerFillRate' has a wrong offset!");
static_assert(offsetof(UCOMP_CircuitMesh_C, PowerDecayRate) == 0x000514, "Member 'UCOMP_CircuitMesh_C::PowerDecayRate' has a wrong offset!");
static_assert(offsetof(UCOMP_CircuitMesh_C, PowerSources) == 0x000518, "Member 'UCOMP_CircuitMesh_C::PowerSources' has a wrong offset!");
static_assert(offsetof(UCOMP_CircuitMesh_C, InitialLocation) == 0x000528, "Member 'UCOMP_CircuitMesh_C::InitialLocation' has a wrong offset!");
static_assert(offsetof(UCOMP_CircuitMesh_C, PoweredStateChanged) == 0x000538, "Member 'UCOMP_CircuitMesh_C::PoweredStateChanged' has a wrong offset!");
static_assert(offsetof(UCOMP_CircuitMesh_C, PowerState) == 0x000548, "Member 'UCOMP_CircuitMesh_C::PowerState' has a wrong offset!");
static_assert(offsetof(UCOMP_CircuitMesh_C, DynamicMaterialInstance) == 0x000550, "Member 'UCOMP_CircuitMesh_C::DynamicMaterialInstance' has a wrong offset!");
static_assert(offsetof(UCOMP_CircuitMesh_C, PowerParamName) == 0x000558, "Member 'UCOMP_CircuitMesh_C::PowerParamName' has a wrong offset!");
static_assert(offsetof(UCOMP_CircuitMesh_C, NorthParamName) == 0x000560, "Member 'UCOMP_CircuitMesh_C::NorthParamName' has a wrong offset!");
static_assert(offsetof(UCOMP_CircuitMesh_C, EastParamName) == 0x000568, "Member 'UCOMP_CircuitMesh_C::EastParamName' has a wrong offset!");
static_assert(offsetof(UCOMP_CircuitMesh_C, SouthParamName) == 0x000570, "Member 'UCOMP_CircuitMesh_C::SouthParamName' has a wrong offset!");
static_assert(offsetof(UCOMP_CircuitMesh_C, WestParamName) == 0x000578, "Member 'UCOMP_CircuitMesh_C::WestParamName' has a wrong offset!");
static_assert(offsetof(UCOMP_CircuitMesh_C, TargetRollAngle) == 0x000580, "Member 'UCOMP_CircuitMesh_C::TargetRollAngle' has a wrong offset!");
static_assert(offsetof(UCOMP_CircuitMesh_C, DefaultRotation) == 0x000584, "Member 'UCOMP_CircuitMesh_C::DefaultRotation' has a wrong offset!");
static_assert(offsetof(UCOMP_CircuitMesh_C, CircuitType) == 0x000590, "Member 'UCOMP_CircuitMesh_C::CircuitType' has a wrong offset!");
static_assert(offsetof(UCOMP_CircuitMesh_C, InteractableParamName) == 0x000594, "Member 'UCOMP_CircuitMesh_C::InteractableParamName' has a wrong offset!");
static_assert(offsetof(UCOMP_CircuitMesh_C, BishopPattern) == 0x0005A0, "Member 'UCOMP_CircuitMesh_C::BishopPattern' has a wrong offset!");
static_assert(offsetof(UCOMP_CircuitMesh_C, RookPattern) == 0x0005B0, "Member 'UCOMP_CircuitMesh_C::RookPattern' has a wrong offset!");
static_assert(offsetof(UCOMP_CircuitMesh_C, DialComponent) == 0x0005C0, "Member 'UCOMP_CircuitMesh_C::DialComponent' has a wrong offset!");

}

