#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: WIDGET_AutoMap

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "CoreUObject_structs.hpp"
#include "UMG_structs.hpp"
#include "UMG_classes.hpp"
#include "ENUM_MenuNavigationInput_structs.hpp"
#include "SlateCore_structs.hpp"
#include "ENUM_CursorMode_structs.hpp"
#include "ENUM_CardinalDirection_structs.hpp"
#include "ENUM_GameDifficulty_structs.hpp"


namespace SDK
{

// WidgetBlueprintGeneratedClass WIDGET_AutoMap.WIDGET_AutoMap_C
// 0x0100 (0x0360 - 0x0260)
class UWIDGET_AutoMap_C final : public UUserWidget
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x0260(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	class UGridMeshWidget*                        MESH_AutoMap;                                      // 0x0268(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UGridMeshWidget*                        MESH_MouseDragRegion;                              // 0x0270(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UGridMeshWidget*                        MESH_WaypointRegion;                               // 0x0278(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UCanvasPanel*                           PANEL_AutoMap;                                     // 0x0280(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UEditableTextBox*                       TEXT_WaypointMessageEntry;                         // 0x0288(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UWIDGET_Automap_DeckList_C*             WIDGET_Automap_DeckList;                           // 0x0290(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UWIDGET_Automap_Filters_C*              WIDGET_Automap_Filters;                            // 0x0298(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UWIDGET_Automap_Keys_C*                 WIDGET_Automap_Keys;                               // 0x02A0(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UWIDGET_Automap_Waypoints_C*            WIDGET_Automap_Waypoints;                          // 0x02A8(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UWIDGET_MapInfoBar_C*                   WIDGET_MapInfoBar;                                 // 0x02B0(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UWIDGET_MapRegionPopup_C*               WIDGET_MapRegionPopup;                             // 0x02B8(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	bool                                          IsMousePanning;                                    // 0x02C0(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          IsMouseZooming;                                    // 0x02C1(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_2C2[0x2];                                      // 0x02C2(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         TargetOrthoScale;                                  // 0x02C4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          IsMousePanDrifting;                                // 0x02C8(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_2C9[0x3];                                      // 0x02C9(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         GamepadPanningBits;                                // 0x02CC(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector2D                              SourceCameraPanTexCoords;                          // 0x02D0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector2D                              TargetCameraPanTexCoords;                          // 0x02D8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         OrthoMax;                                          // 0x02E0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         OrthoMin;                                          // 0x02E4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         MouseZoomInputDelta;                               // 0x02E8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         ScaleSpeed;                                        // 0x02EC(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CurrentOrthoScale;                                 // 0x02F0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         ZoomDeltaScale;                                    // 0x02F4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UWIDGET_PlayerHUD_C*                    PlayerHUD;                                         // 0x02F8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          MouseOverAutoMap;                                  // 0x0300(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_301[0x3];                                      // 0x0301(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         AutoMapAspect;                                     // 0x0304(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector2D                              LastCursorScreenPoint;                             // 0x0308(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FDataTableRowHandle                    LastCursorRegionHandle;                            // 0x0310(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor)
	float                                         MapCrosshairsAlpha;                                // 0x0320(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector2D                              MapRegionLabelFixedOffset;                         // 0x0324(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector2D                              SourcePanDriftTexCoords;                           // 0x032C(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector2D                              TargetPanDriftTexCoords;                           // 0x0334(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         MousePanDriftInterpSpeed;                          // 0x033C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         WallRadiusMin;                                     // 0x0340(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         WallRadiusMax;                                     // 0x0344(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          IsListeningForWaypointInput;                       // 0x0348(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_349[0x7];                                      // 0x0349(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UCurveFloat*                            IconScaleCurve;                                    // 0x0350(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         GamepadPanSpeed;                                   // 0x0358(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         EditWaypointIndex;                                 // 0x035C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

public:
	void ExecuteUbergraph_WIDGET_AutoMap(int32 EntryPoint);
	void Construct();
	void Tick(const struct FGeometry& MyGeometry, float InDeltaTime);
	void ReceiveMouseZoomInput(float ZoomDelta);
	void UpdateAutoMapMousePanning();
	void ReceiveGamepadZoomInput(bool ZoomIn);
	void UpdateAutoMapMouseZoom(float DeltaTime);
	void InitializeAutoMap(class UWIDGET_PlayerHUD_C* HUD);
	void SetAutoMapVisibility(bool Visibility_0);
	void GetCaptureComponent(class USceneCaptureComponent2D** CaptureComponent);
	struct FEventReply EVENT_OnMouseDown(const struct FGeometry& MyGeometry, const struct FPointerEvent& MouseEvent);
	struct FEventReply EVENT_OnMouseUp(const struct FGeometry& MyGeometry, const struct FPointerEvent& MouseEvent);
	struct FEventReply EVENT_OnDragRegionMouseMove(const struct FGeometry& MyGeometry, const struct FPointerEvent& MouseEvent);
	void ResetMouseDetectorSize();
	void EVENT_OnAutoMapMouseEnter(const struct FGeometry& MyGeometry, const struct FPointerEvent& MouseEvent);
	void EVENT_OnAutoMapMouseLeave(const struct FPointerEvent& MouseEvent);
	void UpdateMapRegionPopup(const struct FVector2D& CursorOffsetOnWidget);
	void IsScannerEnabled(bool* Result);
	void UpdateMapRegionVisibility(bool Show);
	void ChangeCursorMode();
	void GetTextureCoordsFromScreenPoint(const struct FVector2D& ScreenPosition, bool EntireViewport, bool* ValidCoords, struct FVector2D* TexCoords);
	void GetWorldLocationFromTextureCoords(const struct FVector2D& TexCoords, struct FVector* WorldLocation);
	void UpdateMapCrosshairs(const struct FVector2D& CursorScreenPosition);
	void HideMapCrosshairs();
	void UpdateAutoMapMousePanDrift(float DeltaTime);
	void UpdateAutoMapGamepadPanning(float DeltaTime);
	void PanCameraUsingTextureCoordinates(const struct FVector2D& SourceTexCoord, const struct FVector2D& TargetTexCoord);
	void CaptureAutomapScene();
	void OnAutoMapVisibleAndActive();
	void UpdateMapGrid();
	void GetTextureCoordsFromWorldLocation(const struct FVector& WorldLocation, bool ScaleByVisibleHeight, struct FVector2D* TexCoords);
	void GetMapCornerWorldLocation(bool ScaleByVisibleHeight, struct FVector* CornerLocation);
	void GetBestRegionLabelOffset(const struct FVector2D& CursorOffsetOnWidget, struct FVector2D* Alignment, struct FVector2D* Offset);
	void SetAutomapLevel(class FName LevelName);
	void DisplayNameToLevelName(const class FText& DisplayName, class FName* LevelName);
	void CenterCaptureCameraOnPlayer();
	void SetListeningForWaypointInput(bool IsAddingWaypoint);
	void GetWorldPositionFromMousePosition(const struct FVector2D& ScreenPosition, struct FVector* WorldLocation);
	struct FEventReply EVENT_WaypointRegion_OnMouseButtonDown(const struct FGeometry& MyGeometry, const struct FPointerEvent& MouseEvent);
	void ResetPanningParams();
	void RefreshCurrentMissionWaypointIcon();
	void EVENT_OnStoryQuestStateChanged(class FName StoryQuestName, bool Value);
	void InvokeNavManager(bool InputState, ENUM_MenuNavigationInput InputType);
	void SetEditWaypointIndex(int32 WaypointIndex);
	void OnWaypointTextChanged(const class FText& Text);
	void OnWaypointMessageCommitted(const class FText& Text, ETextCommit CommitMethod);

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"WIDGET_AutoMap_C">();
	}
	static class UWIDGET_AutoMap_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<UWIDGET_AutoMap_C>();
	}
};
static_assert(alignof(UWIDGET_AutoMap_C) == 0x000008, "Wrong alignment on UWIDGET_AutoMap_C");
static_assert(sizeof(UWIDGET_AutoMap_C) == 0x000360, "Wrong size on UWIDGET_AutoMap_C");
static_assert(offsetof(UWIDGET_AutoMap_C, UberGraphFrame) == 0x000260, "Member 'UWIDGET_AutoMap_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(UWIDGET_AutoMap_C, MESH_AutoMap) == 0x000268, "Member 'UWIDGET_AutoMap_C::MESH_AutoMap' has a wrong offset!");
static_assert(offsetof(UWIDGET_AutoMap_C, MESH_MouseDragRegion) == 0x000270, "Member 'UWIDGET_AutoMap_C::MESH_MouseDragRegion' has a wrong offset!");
static_assert(offsetof(UWIDGET_AutoMap_C, MESH_WaypointRegion) == 0x000278, "Member 'UWIDGET_AutoMap_C::MESH_WaypointRegion' has a wrong offset!");
static_assert(offsetof(UWIDGET_AutoMap_C, PANEL_AutoMap) == 0x000280, "Member 'UWIDGET_AutoMap_C::PANEL_AutoMap' has a wrong offset!");
static_assert(offsetof(UWIDGET_AutoMap_C, TEXT_WaypointMessageEntry) == 0x000288, "Member 'UWIDGET_AutoMap_C::TEXT_WaypointMessageEntry' has a wrong offset!");
static_assert(offsetof(UWIDGET_AutoMap_C, WIDGET_Automap_DeckList) == 0x000290, "Member 'UWIDGET_AutoMap_C::WIDGET_Automap_DeckList' has a wrong offset!");
static_assert(offsetof(UWIDGET_AutoMap_C, WIDGET_Automap_Filters) == 0x000298, "Member 'UWIDGET_AutoMap_C::WIDGET_Automap_Filters' has a wrong offset!");
static_assert(offsetof(UWIDGET_AutoMap_C, WIDGET_Automap_Keys) == 0x0002A0, "Member 'UWIDGET_AutoMap_C::WIDGET_Automap_Keys' has a wrong offset!");
static_assert(offsetof(UWIDGET_AutoMap_C, WIDGET_Automap_Waypoints) == 0x0002A8, "Member 'UWIDGET_AutoMap_C::WIDGET_Automap_Waypoints' has a wrong offset!");
static_assert(offsetof(UWIDGET_AutoMap_C, WIDGET_MapInfoBar) == 0x0002B0, "Member 'UWIDGET_AutoMap_C::WIDGET_MapInfoBar' has a wrong offset!");
static_assert(offsetof(UWIDGET_AutoMap_C, WIDGET_MapRegionPopup) == 0x0002B8, "Member 'UWIDGET_AutoMap_C::WIDGET_MapRegionPopup' has a wrong offset!");
static_assert(offsetof(UWIDGET_AutoMap_C, IsMousePanning) == 0x0002C0, "Member 'UWIDGET_AutoMap_C::IsMousePanning' has a wrong offset!");
static_assert(offsetof(UWIDGET_AutoMap_C, IsMouseZooming) == 0x0002C1, "Member 'UWIDGET_AutoMap_C::IsMouseZooming' has a wrong offset!");
static_assert(offsetof(UWIDGET_AutoMap_C, TargetOrthoScale) == 0x0002C4, "Member 'UWIDGET_AutoMap_C::TargetOrthoScale' has a wrong offset!");
static_assert(offsetof(UWIDGET_AutoMap_C, IsMousePanDrifting) == 0x0002C8, "Member 'UWIDGET_AutoMap_C::IsMousePanDrifting' has a wrong offset!");
static_assert(offsetof(UWIDGET_AutoMap_C, GamepadPanningBits) == 0x0002CC, "Member 'UWIDGET_AutoMap_C::GamepadPanningBits' has a wrong offset!");
static_assert(offsetof(UWIDGET_AutoMap_C, SourceCameraPanTexCoords) == 0x0002D0, "Member 'UWIDGET_AutoMap_C::SourceCameraPanTexCoords' has a wrong offset!");
static_assert(offsetof(UWIDGET_AutoMap_C, TargetCameraPanTexCoords) == 0x0002D8, "Member 'UWIDGET_AutoMap_C::TargetCameraPanTexCoords' has a wrong offset!");
static_assert(offsetof(UWIDGET_AutoMap_C, OrthoMax) == 0x0002E0, "Member 'UWIDGET_AutoMap_C::OrthoMax' has a wrong offset!");
static_assert(offsetof(UWIDGET_AutoMap_C, OrthoMin) == 0x0002E4, "Member 'UWIDGET_AutoMap_C::OrthoMin' has a wrong offset!");
static_assert(offsetof(UWIDGET_AutoMap_C, MouseZoomInputDelta) == 0x0002E8, "Member 'UWIDGET_AutoMap_C::MouseZoomInputDelta' has a wrong offset!");
static_assert(offsetof(UWIDGET_AutoMap_C, ScaleSpeed) == 0x0002EC, "Member 'UWIDGET_AutoMap_C::ScaleSpeed' has a wrong offset!");
static_assert(offsetof(UWIDGET_AutoMap_C, CurrentOrthoScale) == 0x0002F0, "Member 'UWIDGET_AutoMap_C::CurrentOrthoScale' has a wrong offset!");
static_assert(offsetof(UWIDGET_AutoMap_C, ZoomDeltaScale) == 0x0002F4, "Member 'UWIDGET_AutoMap_C::ZoomDeltaScale' has a wrong offset!");
static_assert(offsetof(UWIDGET_AutoMap_C, PlayerHUD) == 0x0002F8, "Member 'UWIDGET_AutoMap_C::PlayerHUD' has a wrong offset!");
static_assert(offsetof(UWIDGET_AutoMap_C, MouseOverAutoMap) == 0x000300, "Member 'UWIDGET_AutoMap_C::MouseOverAutoMap' has a wrong offset!");
static_assert(offsetof(UWIDGET_AutoMap_C, AutoMapAspect) == 0x000304, "Member 'UWIDGET_AutoMap_C::AutoMapAspect' has a wrong offset!");
static_assert(offsetof(UWIDGET_AutoMap_C, LastCursorScreenPoint) == 0x000308, "Member 'UWIDGET_AutoMap_C::LastCursorScreenPoint' has a wrong offset!");
static_assert(offsetof(UWIDGET_AutoMap_C, LastCursorRegionHandle) == 0x000310, "Member 'UWIDGET_AutoMap_C::LastCursorRegionHandle' has a wrong offset!");
static_assert(offsetof(UWIDGET_AutoMap_C, MapCrosshairsAlpha) == 0x000320, "Member 'UWIDGET_AutoMap_C::MapCrosshairsAlpha' has a wrong offset!");
static_assert(offsetof(UWIDGET_AutoMap_C, MapRegionLabelFixedOffset) == 0x000324, "Member 'UWIDGET_AutoMap_C::MapRegionLabelFixedOffset' has a wrong offset!");
static_assert(offsetof(UWIDGET_AutoMap_C, SourcePanDriftTexCoords) == 0x00032C, "Member 'UWIDGET_AutoMap_C::SourcePanDriftTexCoords' has a wrong offset!");
static_assert(offsetof(UWIDGET_AutoMap_C, TargetPanDriftTexCoords) == 0x000334, "Member 'UWIDGET_AutoMap_C::TargetPanDriftTexCoords' has a wrong offset!");
static_assert(offsetof(UWIDGET_AutoMap_C, MousePanDriftInterpSpeed) == 0x00033C, "Member 'UWIDGET_AutoMap_C::MousePanDriftInterpSpeed' has a wrong offset!");
static_assert(offsetof(UWIDGET_AutoMap_C, WallRadiusMin) == 0x000340, "Member 'UWIDGET_AutoMap_C::WallRadiusMin' has a wrong offset!");
static_assert(offsetof(UWIDGET_AutoMap_C, WallRadiusMax) == 0x000344, "Member 'UWIDGET_AutoMap_C::WallRadiusMax' has a wrong offset!");
static_assert(offsetof(UWIDGET_AutoMap_C, IsListeningForWaypointInput) == 0x000348, "Member 'UWIDGET_AutoMap_C::IsListeningForWaypointInput' has a wrong offset!");
static_assert(offsetof(UWIDGET_AutoMap_C, IconScaleCurve) == 0x000350, "Member 'UWIDGET_AutoMap_C::IconScaleCurve' has a wrong offset!");
static_assert(offsetof(UWIDGET_AutoMap_C, GamepadPanSpeed) == 0x000358, "Member 'UWIDGET_AutoMap_C::GamepadPanSpeed' has a wrong offset!");
static_assert(offsetof(UWIDGET_AutoMap_C, EditWaypointIndex) == 0x00035C, "Member 'UWIDGET_AutoMap_C::EditWaypointIndex' has a wrong offset!");

}

