#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: AnimBP_ForceXDoor

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "CoreUObject_structs.hpp"


namespace SDK::Params
{

// Function AnimBP_ForceXDoor.AnimBP_ForceXDoor_C.ExecuteUbergraph_AnimBP_ForceXDoor
// 0x0008 (0x0008 - 0x0000)
struct AnimBP_ForceXDoor_C_ExecuteUbergraph_AnimBP_ForceXDoor final
{
public:
	int32                                         EntryPoint;                                        // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         K2Node_Event_DeltaTimeX;                           // 0x0004(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(AnimBP_ForceXDoor_C_ExecuteUbergraph_AnimBP_ForceXDoor) == 0x000004, "Wrong alignment on AnimBP_ForceXDoor_C_ExecuteUbergraph_AnimBP_ForceXDoor");
static_assert(sizeof(AnimBP_ForceXDoor_C_ExecuteUbergraph_AnimBP_ForceXDoor) == 0x000008, "Wrong size on AnimBP_ForceXDoor_C_ExecuteUbergraph_AnimBP_ForceXDoor");
static_assert(offsetof(AnimBP_ForceXDoor_C_ExecuteUbergraph_AnimBP_ForceXDoor, EntryPoint) == 0x000000, "Member 'AnimBP_ForceXDoor_C_ExecuteUbergraph_AnimBP_ForceXDoor::EntryPoint' has a wrong offset!");
static_assert(offsetof(AnimBP_ForceXDoor_C_ExecuteUbergraph_AnimBP_ForceXDoor, K2Node_Event_DeltaTimeX) == 0x000004, "Member 'AnimBP_ForceXDoor_C_ExecuteUbergraph_AnimBP_ForceXDoor::K2Node_Event_DeltaTimeX' has a wrong offset!");

// Function AnimBP_ForceXDoor.AnimBP_ForceXDoor_C.BlueprintUpdateAnimation
// 0x0004 (0x0004 - 0x0000)
struct AnimBP_ForceXDoor_C_BlueprintUpdateAnimation final
{
public:
	float                                         DeltaTimeX;                                        // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(AnimBP_ForceXDoor_C_BlueprintUpdateAnimation) == 0x000004, "Wrong alignment on AnimBP_ForceXDoor_C_BlueprintUpdateAnimation");
static_assert(sizeof(AnimBP_ForceXDoor_C_BlueprintUpdateAnimation) == 0x000004, "Wrong size on AnimBP_ForceXDoor_C_BlueprintUpdateAnimation");
static_assert(offsetof(AnimBP_ForceXDoor_C_BlueprintUpdateAnimation, DeltaTimeX) == 0x000000, "Member 'AnimBP_ForceXDoor_C_BlueprintUpdateAnimation::DeltaTimeX' has a wrong offset!");

// Function AnimBP_ForceXDoor.AnimBP_ForceXDoor_C.UpdateSpin
// 0x008C (0x008C - 0x0000)
struct AnimBP_ForceXDoor_C_UpdateSpin final
{
public:
	float                                         CallFunc_GetWorldDeltaSeconds_ReturnValue;         // 0x0000(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_MapRangeClamped_ReturnValue;              // 0x0004(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Multiply_FloatFloat_ReturnValue;          // 0x0008(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Subtract_FloatFloat_ReturnValue;          // 0x000C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Multiply_FloatFloat_ReturnValue_1;        // 0x0010(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               CallFunc_MakeRotator_ReturnValue;                  // 0x0014(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                         CallFunc_GetWorldDeltaSeconds_ReturnValue_1;       // 0x0020(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               CallFunc_ComposeRotators_ReturnValue;              // 0x0024(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                         CallFunc_GetWorldDeltaSeconds_ReturnValue_2;       // 0x0030(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_FloatFloat_ReturnValue;        // 0x0034(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_35[0x3];                                       // 0x0035(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_Multiply_FloatFloat_ReturnValue_2;        // 0x0038(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               CallFunc_MakeRotator_ReturnValue_1;                // 0x003C(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FRotator                               CallFunc_ComposeRotators_ReturnValue_1;            // 0x0048(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                         CallFunc_GetPlayTimeInSeconds_ReturnValue;         // 0x0054(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_MapRangeClamped_ReturnValue_1;            // 0x0058(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Multiply_FloatFloat_ReturnValue_3;        // 0x005C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Multiply_FloatFloat_ReturnValue_4;        // 0x0060(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Greater_FloatFloat_ReturnValue;           // 0x0064(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_65[0x3];                                       // 0x0065(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FRotator                               CallFunc_MakeRotator_ReturnValue_2;                // 0x0068(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FRotator                               CallFunc_ComposeRotators_ReturnValue_2;            // 0x0074(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                         CallFunc_Subtract_FloatFloat_ReturnValue_1;        // 0x0080(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Divide_FloatFloat_ReturnValue;            // 0x0084(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_FClamp_ReturnValue;                       // 0x0088(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(AnimBP_ForceXDoor_C_UpdateSpin) == 0x000004, "Wrong alignment on AnimBP_ForceXDoor_C_UpdateSpin");
static_assert(sizeof(AnimBP_ForceXDoor_C_UpdateSpin) == 0x00008C, "Wrong size on AnimBP_ForceXDoor_C_UpdateSpin");
static_assert(offsetof(AnimBP_ForceXDoor_C_UpdateSpin, CallFunc_GetWorldDeltaSeconds_ReturnValue) == 0x000000, "Member 'AnimBP_ForceXDoor_C_UpdateSpin::CallFunc_GetWorldDeltaSeconds_ReturnValue' has a wrong offset!");
static_assert(offsetof(AnimBP_ForceXDoor_C_UpdateSpin, CallFunc_MapRangeClamped_ReturnValue) == 0x000004, "Member 'AnimBP_ForceXDoor_C_UpdateSpin::CallFunc_MapRangeClamped_ReturnValue' has a wrong offset!");
static_assert(offsetof(AnimBP_ForceXDoor_C_UpdateSpin, CallFunc_Multiply_FloatFloat_ReturnValue) == 0x000008, "Member 'AnimBP_ForceXDoor_C_UpdateSpin::CallFunc_Multiply_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(AnimBP_ForceXDoor_C_UpdateSpin, CallFunc_Subtract_FloatFloat_ReturnValue) == 0x00000C, "Member 'AnimBP_ForceXDoor_C_UpdateSpin::CallFunc_Subtract_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(AnimBP_ForceXDoor_C_UpdateSpin, CallFunc_Multiply_FloatFloat_ReturnValue_1) == 0x000010, "Member 'AnimBP_ForceXDoor_C_UpdateSpin::CallFunc_Multiply_FloatFloat_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(AnimBP_ForceXDoor_C_UpdateSpin, CallFunc_MakeRotator_ReturnValue) == 0x000014, "Member 'AnimBP_ForceXDoor_C_UpdateSpin::CallFunc_MakeRotator_ReturnValue' has a wrong offset!");
static_assert(offsetof(AnimBP_ForceXDoor_C_UpdateSpin, CallFunc_GetWorldDeltaSeconds_ReturnValue_1) == 0x000020, "Member 'AnimBP_ForceXDoor_C_UpdateSpin::CallFunc_GetWorldDeltaSeconds_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(AnimBP_ForceXDoor_C_UpdateSpin, CallFunc_ComposeRotators_ReturnValue) == 0x000024, "Member 'AnimBP_ForceXDoor_C_UpdateSpin::CallFunc_ComposeRotators_ReturnValue' has a wrong offset!");
static_assert(offsetof(AnimBP_ForceXDoor_C_UpdateSpin, CallFunc_GetWorldDeltaSeconds_ReturnValue_2) == 0x000030, "Member 'AnimBP_ForceXDoor_C_UpdateSpin::CallFunc_GetWorldDeltaSeconds_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(AnimBP_ForceXDoor_C_UpdateSpin, CallFunc_EqualEqual_FloatFloat_ReturnValue) == 0x000034, "Member 'AnimBP_ForceXDoor_C_UpdateSpin::CallFunc_EqualEqual_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(AnimBP_ForceXDoor_C_UpdateSpin, CallFunc_Multiply_FloatFloat_ReturnValue_2) == 0x000038, "Member 'AnimBP_ForceXDoor_C_UpdateSpin::CallFunc_Multiply_FloatFloat_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(AnimBP_ForceXDoor_C_UpdateSpin, CallFunc_MakeRotator_ReturnValue_1) == 0x00003C, "Member 'AnimBP_ForceXDoor_C_UpdateSpin::CallFunc_MakeRotator_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(AnimBP_ForceXDoor_C_UpdateSpin, CallFunc_ComposeRotators_ReturnValue_1) == 0x000048, "Member 'AnimBP_ForceXDoor_C_UpdateSpin::CallFunc_ComposeRotators_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(AnimBP_ForceXDoor_C_UpdateSpin, CallFunc_GetPlayTimeInSeconds_ReturnValue) == 0x000054, "Member 'AnimBP_ForceXDoor_C_UpdateSpin::CallFunc_GetPlayTimeInSeconds_ReturnValue' has a wrong offset!");
static_assert(offsetof(AnimBP_ForceXDoor_C_UpdateSpin, CallFunc_MapRangeClamped_ReturnValue_1) == 0x000058, "Member 'AnimBP_ForceXDoor_C_UpdateSpin::CallFunc_MapRangeClamped_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(AnimBP_ForceXDoor_C_UpdateSpin, CallFunc_Multiply_FloatFloat_ReturnValue_3) == 0x00005C, "Member 'AnimBP_ForceXDoor_C_UpdateSpin::CallFunc_Multiply_FloatFloat_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(AnimBP_ForceXDoor_C_UpdateSpin, CallFunc_Multiply_FloatFloat_ReturnValue_4) == 0x000060, "Member 'AnimBP_ForceXDoor_C_UpdateSpin::CallFunc_Multiply_FloatFloat_ReturnValue_4' has a wrong offset!");
static_assert(offsetof(AnimBP_ForceXDoor_C_UpdateSpin, CallFunc_Greater_FloatFloat_ReturnValue) == 0x000064, "Member 'AnimBP_ForceXDoor_C_UpdateSpin::CallFunc_Greater_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(AnimBP_ForceXDoor_C_UpdateSpin, CallFunc_MakeRotator_ReturnValue_2) == 0x000068, "Member 'AnimBP_ForceXDoor_C_UpdateSpin::CallFunc_MakeRotator_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(AnimBP_ForceXDoor_C_UpdateSpin, CallFunc_ComposeRotators_ReturnValue_2) == 0x000074, "Member 'AnimBP_ForceXDoor_C_UpdateSpin::CallFunc_ComposeRotators_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(AnimBP_ForceXDoor_C_UpdateSpin, CallFunc_Subtract_FloatFloat_ReturnValue_1) == 0x000080, "Member 'AnimBP_ForceXDoor_C_UpdateSpin::CallFunc_Subtract_FloatFloat_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(AnimBP_ForceXDoor_C_UpdateSpin, CallFunc_Divide_FloatFloat_ReturnValue) == 0x000084, "Member 'AnimBP_ForceXDoor_C_UpdateSpin::CallFunc_Divide_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(AnimBP_ForceXDoor_C_UpdateSpin, CallFunc_FClamp_ReturnValue) == 0x000088, "Member 'AnimBP_ForceXDoor_C_UpdateSpin::CallFunc_FClamp_ReturnValue' has a wrong offset!");

// Function AnimBP_ForceXDoor.AnimBP_ForceXDoor_C.AnimGraph
// 0x0010 (0x0010 - 0x0000)
struct AnimBP_ForceXDoor_C_AnimGraph final
{
public:
	struct FPoseLink                              AnimGraph_0;                                       // 0x0000(0x0010)(Parm, OutParm, NoDestructor)
};
static_assert(alignof(AnimBP_ForceXDoor_C_AnimGraph) == 0x000008, "Wrong alignment on AnimBP_ForceXDoor_C_AnimGraph");
static_assert(sizeof(AnimBP_ForceXDoor_C_AnimGraph) == 0x000010, "Wrong size on AnimBP_ForceXDoor_C_AnimGraph");
static_assert(offsetof(AnimBP_ForceXDoor_C_AnimGraph, AnimGraph_0) == 0x000000, "Member 'AnimBP_ForceXDoor_C_AnimGraph::AnimGraph_0' has a wrong offset!");

// Function AnimBP_ForceXDoor.AnimBP_ForceXDoor_C.UnlockDoor
// 0x0001 (0x0001 - 0x0000)
struct AnimBP_ForceXDoor_C_UnlockDoor final
{
public:
	bool                                          Result;                                            // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(AnimBP_ForceXDoor_C_UnlockDoor) == 0x000001, "Wrong alignment on AnimBP_ForceXDoor_C_UnlockDoor");
static_assert(sizeof(AnimBP_ForceXDoor_C_UnlockDoor) == 0x000001, "Wrong size on AnimBP_ForceXDoor_C_UnlockDoor");
static_assert(offsetof(AnimBP_ForceXDoor_C_UnlockDoor, Result) == 0x000000, "Member 'AnimBP_ForceXDoor_C_UnlockDoor::Result' has a wrong offset!");

// Function AnimBP_ForceXDoor.AnimBP_ForceXDoor_C.HideBackButton
// 0x0002 (0x0002 - 0x0000)
struct AnimBP_ForceXDoor_C_HideBackButton final
{
public:
	bool                                          HideState;                                         // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Result;                                            // 0x0001(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(AnimBP_ForceXDoor_C_HideBackButton) == 0x000001, "Wrong alignment on AnimBP_ForceXDoor_C_HideBackButton");
static_assert(sizeof(AnimBP_ForceXDoor_C_HideBackButton) == 0x000002, "Wrong size on AnimBP_ForceXDoor_C_HideBackButton");
static_assert(offsetof(AnimBP_ForceXDoor_C_HideBackButton, HideState) == 0x000000, "Member 'AnimBP_ForceXDoor_C_HideBackButton::HideState' has a wrong offset!");
static_assert(offsetof(AnimBP_ForceXDoor_C_HideBackButton, Result) == 0x000001, "Member 'AnimBP_ForceXDoor_C_HideBackButton::Result' has a wrong offset!");

// Function AnimBP_ForceXDoor.AnimBP_ForceXDoor_C.HideFrontButton
// 0x0002 (0x0002 - 0x0000)
struct AnimBP_ForceXDoor_C_HideFrontButton final
{
public:
	bool                                          HideState;                                         // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Result;                                            // 0x0001(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(AnimBP_ForceXDoor_C_HideFrontButton) == 0x000001, "Wrong alignment on AnimBP_ForceXDoor_C_HideFrontButton");
static_assert(sizeof(AnimBP_ForceXDoor_C_HideFrontButton) == 0x000002, "Wrong size on AnimBP_ForceXDoor_C_HideFrontButton");
static_assert(offsetof(AnimBP_ForceXDoor_C_HideFrontButton, HideState) == 0x000000, "Member 'AnimBP_ForceXDoor_C_HideFrontButton::HideState' has a wrong offset!");
static_assert(offsetof(AnimBP_ForceXDoor_C_HideFrontButton, Result) == 0x000001, "Member 'AnimBP_ForceXDoor_C_HideFrontButton::Result' has a wrong offset!");

// Function AnimBP_ForceXDoor.AnimBP_ForceXDoor_C.SetLocked
// 0x0002 (0x0002 - 0x0000)
struct AnimBP_ForceXDoor_C_SetLocked final
{
public:
	bool                                          LockedState;                                       // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Result;                                            // 0x0001(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(AnimBP_ForceXDoor_C_SetLocked) == 0x000001, "Wrong alignment on AnimBP_ForceXDoor_C_SetLocked");
static_assert(sizeof(AnimBP_ForceXDoor_C_SetLocked) == 0x000002, "Wrong size on AnimBP_ForceXDoor_C_SetLocked");
static_assert(offsetof(AnimBP_ForceXDoor_C_SetLocked, LockedState) == 0x000000, "Member 'AnimBP_ForceXDoor_C_SetLocked::LockedState' has a wrong offset!");
static_assert(offsetof(AnimBP_ForceXDoor_C_SetLocked, Result) == 0x000001, "Member 'AnimBP_ForceXDoor_C_SetLocked::Result' has a wrong offset!");

// Function AnimBP_ForceXDoor.AnimBP_ForceXDoor_C.IsLocked
// 0x0001 (0x0001 - 0x0000)
struct AnimBP_ForceXDoor_C_IsLocked final
{
public:
	bool                                          Result;                                            // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(AnimBP_ForceXDoor_C_IsLocked) == 0x000001, "Wrong alignment on AnimBP_ForceXDoor_C_IsLocked");
static_assert(sizeof(AnimBP_ForceXDoor_C_IsLocked) == 0x000001, "Wrong size on AnimBP_ForceXDoor_C_IsLocked");
static_assert(offsetof(AnimBP_ForceXDoor_C_IsLocked, Result) == 0x000000, "Member 'AnimBP_ForceXDoor_C_IsLocked::Result' has a wrong offset!");

// Function AnimBP_ForceXDoor.AnimBP_ForceXDoor_C.CloseDoor
// 0x0001 (0x0001 - 0x0000)
struct AnimBP_ForceXDoor_C_CloseDoor final
{
public:
	bool                                          Result;                                            // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(AnimBP_ForceXDoor_C_CloseDoor) == 0x000001, "Wrong alignment on AnimBP_ForceXDoor_C_CloseDoor");
static_assert(sizeof(AnimBP_ForceXDoor_C_CloseDoor) == 0x000001, "Wrong size on AnimBP_ForceXDoor_C_CloseDoor");
static_assert(offsetof(AnimBP_ForceXDoor_C_CloseDoor, Result) == 0x000000, "Member 'AnimBP_ForceXDoor_C_CloseDoor::Result' has a wrong offset!");

// Function AnimBP_ForceXDoor.AnimBP_ForceXDoor_C.OpenDoor
// 0x0001 (0x0001 - 0x0000)
struct AnimBP_ForceXDoor_C_OpenDoor final
{
public:
	bool                                          Result;                                            // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(AnimBP_ForceXDoor_C_OpenDoor) == 0x000001, "Wrong alignment on AnimBP_ForceXDoor_C_OpenDoor");
static_assert(sizeof(AnimBP_ForceXDoor_C_OpenDoor) == 0x000001, "Wrong size on AnimBP_ForceXDoor_C_OpenDoor");
static_assert(offsetof(AnimBP_ForceXDoor_C_OpenDoor, Result) == 0x000000, "Member 'AnimBP_ForceXDoor_C_OpenDoor::Result' has a wrong offset!");

}

