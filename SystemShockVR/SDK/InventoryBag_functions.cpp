#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: InventoryBag

#include "Basic.hpp"

#include "InventoryBag_classes.hpp"
#include "InventoryBag_parameters.hpp"


namespace SDK
{

// Function InventoryBag.InventoryBag_C.OnBagChanged__DelegateSignature
// (Public, Delegate, BlueprintCallable, BlueprintEvent)
// Parameters:
// int32                                   SlotIndex                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UInventoryBag_C::OnBagChanged__DelegateSignature(int32 SlotIndex)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("InventoryBag_C", "OnBagChanged__DelegateSignature");

	Params::InventoryBag_C_OnBagChanged__DelegateSignature Parms{};

	Parms.SlotIndex = SlotIndex;

	UObject::ProcessEvent(Func, &Parms);
}


// Function InventoryBag.InventoryBag_C.InitializeBag
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)

void UInventoryBag_C::InitializeBag()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("InventoryBag_C", "InitializeBag");

	UObject::ProcessEvent(Func, nullptr);
}


// Function InventoryBag.InventoryBag_C.TryFixupBag
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// struct FSTRUCT_InventoryBagParams       DefaultParams                                          (BlueprintVisible, BlueprintReadOnly, Parm, HasGetValueTypeHash)
// bool                                    Result                                                 (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void UInventoryBag_C::TryFixupBag(const struct FSTRUCT_InventoryBagParams& DefaultParams, bool* Result)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("InventoryBag_C", "TryFixupBag");

	Params::InventoryBag_C_TryFixupBag Parms{};

	Parms.DefaultParams = std::move(DefaultParams);

	UObject::ProcessEvent(Func, &Parms);

	if (Result != nullptr)
		*Result = Parms.Result;
}


// Function InventoryBag.InventoryBag_C.GetInventory
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// class UCOMP_Inventory_C*                Inventory                                              (Parm, OutParm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UInventoryBag_C::GetInventory(class UCOMP_Inventory_C** Inventory)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("InventoryBag_C", "GetInventory");

	Params::InventoryBag_C_GetInventory Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (Inventory != nullptr)
		*Inventory = Parms.Inventory;
}


// Function InventoryBag.InventoryBag_C.IsOverflowBag
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// bool                                    Result                                                 (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void UInventoryBag_C::IsOverflowBag(bool* Result)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("InventoryBag_C", "IsOverflowBag");

	Params::InventoryBag_C_IsOverflowBag Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (Result != nullptr)
		*Result = Parms.Result;
}


// Function InventoryBag.InventoryBag_C.AddItemInternal
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// class UITEM_Base_C*                     Item                                                   (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class UClass*                           ItemClass                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FSTRUCT_ItemInsertionRules       InsertionRules                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    Modify                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// int32                                   InOutCount                                             (BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    Result                                                 (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void UInventoryBag_C::AddItemInternal(class UITEM_Base_C* Item, class UClass* ItemClass, const struct FSTRUCT_ItemInsertionRules& InsertionRules, bool Modify, int32& InOutCount, bool* Result)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("InventoryBag_C", "AddItemInternal");

	Params::InventoryBag_C_AddItemInternal Parms{};

	Parms.Item = Item;
	Parms.ItemClass = ItemClass;
	Parms.InsertionRules = std::move(InsertionRules);
	Parms.Modify = Modify;
	Parms.InOutCount = InOutCount;

	UObject::ProcessEvent(Func, &Parms);

	InOutCount = Parms.InOutCount;

	if (Result != nullptr)
		*Result = Parms.Result;
}


// Function InventoryBag.InventoryBag_C.AddItemToSlotInternal
// (Private, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// int32                                   SlotIndex                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class UITEM_Base_C*                     Item                                                   (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class UClass*                           ItemClass                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    IsRotated                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// bool                                    Modify                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// int32                                   InOutCount                                             (BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    Result                                                 (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void UInventoryBag_C::AddItemToSlotInternal(int32 SlotIndex, class UITEM_Base_C* Item, class UClass* ItemClass, bool IsRotated, bool Modify, int32& InOutCount, bool* Result)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("InventoryBag_C", "AddItemToSlotInternal");

	Params::InventoryBag_C_AddItemToSlotInternal Parms{};

	Parms.SlotIndex = SlotIndex;
	Parms.Item = Item;
	Parms.ItemClass = ItemClass;
	Parms.IsRotated = IsRotated;
	Parms.Modify = Modify;
	Parms.InOutCount = InOutCount;

	UObject::ProcessEvent(Func, &Parms);

	InOutCount = Parms.InOutCount;

	if (Result != nullptr)
		*Result = Parms.Result;
}


// Function InventoryBag.InventoryBag_C.GetSlotCountRequiredForItem
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// int32                                   SlotIndex                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class UITEM_Base_C*                     Item                                                   (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class UClass*                           ItemClass                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// int32                                   Result                                                 (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UInventoryBag_C::GetSlotCountRequiredForItem(int32 SlotIndex, class UITEM_Base_C* Item, class UClass* ItemClass, int32* Result)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("InventoryBag_C", "GetSlotCountRequiredForItem");

	Params::InventoryBag_C_GetSlotCountRequiredForItem Parms{};

	Parms.SlotIndex = SlotIndex;
	Parms.Item = Item;
	Parms.ItemClass = ItemClass;

	UObject::ProcessEvent(Func, &Parms);

	if (Result != nullptr)
		*Result = Parms.Result;
}


// Function InventoryBag.InventoryBag_C.GetSlotIndicesForItemWithSize
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// int32                                   SlotIndex                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FIntPoint                        ItemSize                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// TArray<int32>                           SlotIndices                                            (Parm, OutParm)

void UInventoryBag_C::GetSlotIndicesForItemWithSize(int32 SlotIndex, const struct FIntPoint& ItemSize, TArray<int32>* SlotIndices)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("InventoryBag_C", "GetSlotIndicesForItemWithSize");

	Params::InventoryBag_C_GetSlotIndicesForItemWithSize Parms{};

	Parms.SlotIndex = SlotIndex;
	Parms.ItemSize = std::move(ItemSize);

	UObject::ProcessEvent(Func, &Parms);

	if (SlotIndices != nullptr)
		*SlotIndices = std::move(Parms.SlotIndices);
}


// Function InventoryBag.InventoryBag_C.GetSlotIndicesForItemInstance
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// class UITEM_Base_C*                     Item                                                   (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// TArray<int32>                           Slot_Indices                                           (Parm, OutParm)

void UInventoryBag_C::GetSlotIndicesForItemInstance(class UITEM_Base_C* Item, TArray<int32>* Slot_Indices)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("InventoryBag_C", "GetSlotIndicesForItemInstance");

	Params::InventoryBag_C_GetSlotIndicesForItemInstance Parms{};

	Parms.Item = Item;

	UObject::ProcessEvent(Func, &Parms);

	if (Slot_Indices != nullptr)
		*Slot_Indices = std::move(Parms.Slot_Indices);
}


// Function InventoryBag.InventoryBag_C.IsValidSlotIndex
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// int32                                   SlotIndex                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    Result                                                 (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void UInventoryBag_C::IsValidSlotIndex(int32 SlotIndex, bool* Result)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("InventoryBag_C", "IsValidSlotIndex");

	Params::InventoryBag_C_IsValidSlotIndex Parms{};

	Parms.SlotIndex = SlotIndex;

	UObject::ProcessEvent(Func, &Parms);

	if (Result != nullptr)
		*Result = Parms.Result;
}


// Function InventoryBag.InventoryBag_C.IsValidGridCoordinates
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// struct FIntPoint                        GridCoords                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    Result                                                 (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void UInventoryBag_C::IsValidGridCoordinates(const struct FIntPoint& GridCoords, bool* Result)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("InventoryBag_C", "IsValidGridCoordinates");

	Params::InventoryBag_C_IsValidGridCoordinates Parms{};

	Parms.GridCoords = std::move(GridCoords);

	UObject::ProcessEvent(Func, &Parms);

	if (Result != nullptr)
		*Result = Parms.Result;
}


// Function InventoryBag.InventoryBag_C.IsSlotTypeGrid
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// bool                                    Result                                                 (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void UInventoryBag_C::IsSlotTypeGrid(bool* Result)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("InventoryBag_C", "IsSlotTypeGrid");

	Params::InventoryBag_C_IsSlotTypeGrid Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (Result != nullptr)
		*Result = Parms.Result;
}


// Function InventoryBag.InventoryBag_C.IsSlotTypeSingle
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// bool                                    Result                                                 (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void UInventoryBag_C::IsSlotTypeSingle(bool* Result)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("InventoryBag_C", "IsSlotTypeSingle");

	Params::InventoryBag_C_IsSlotTypeSingle Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (Result != nullptr)
		*Result = Parms.Result;
}


// Function InventoryBag.InventoryBag_C.HasSlotSpaceForItemWithSize
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// int32                                   SlotIndex                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FIntPoint                        ItemSize                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class UITEM_Base_C*                     IgnoreItem                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    Result                                                 (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void UInventoryBag_C::HasSlotSpaceForItemWithSize(int32 SlotIndex, const struct FIntPoint& ItemSize, class UITEM_Base_C* IgnoreItem, bool* Result)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("InventoryBag_C", "HasSlotSpaceForItemWithSize");

	Params::InventoryBag_C_HasSlotSpaceForItemWithSize Parms{};

	Parms.SlotIndex = SlotIndex;
	Parms.ItemSize = std::move(ItemSize);
	Parms.IgnoreItem = IgnoreItem;

	UObject::ProcessEvent(Func, &Parms);

	if (Result != nullptr)
		*Result = Parms.Result;
}


// Function InventoryBag.InventoryBag_C.GetMaxSlots
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// int32                                   Count                                                  (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UInventoryBag_C::GetMaxSlots(int32* Count)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("InventoryBag_C", "GetMaxSlots");

	Params::InventoryBag_C_GetMaxSlots Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (Count != nullptr)
		*Count = Parms.Count;
}


// Function InventoryBag.InventoryBag_C.SetMaxSlotCount
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// int32                                   NewSlotCount                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    Result                                                 (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void UInventoryBag_C::SetMaxSlotCount(int32 NewSlotCount, bool* Result)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("InventoryBag_C", "SetMaxSlotCount");

	Params::InventoryBag_C_SetMaxSlotCount Parms{};

	Parms.NewSlotCount = NewSlotCount;

	UObject::ProcessEvent(Func, &Parms);

	if (Result != nullptr)
		*Result = Parms.Result;
}


// Function InventoryBag.InventoryBag_C.CreateItemInSlot
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// int32                                   SlotIndex                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class UITEM_Base_C*                     Item                                                   (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class UClass*                           ItemClass                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    IsRotated                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// int32                                   Count                                                  (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class UITEM_Base_C*                     ItemCreated                                            (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UInventoryBag_C::CreateItemInSlot(int32 SlotIndex, class UITEM_Base_C* Item, class UClass* ItemClass, bool IsRotated, int32 Count, class UITEM_Base_C** ItemCreated)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("InventoryBag_C", "CreateItemInSlot");

	Params::InventoryBag_C_CreateItemInSlot Parms{};

	Parms.SlotIndex = SlotIndex;
	Parms.Item = Item;
	Parms.ItemClass = ItemClass;
	Parms.IsRotated = IsRotated;
	Parms.Count = Count;

	UObject::ProcessEvent(Func, &Parms);

	if (ItemCreated != nullptr)
		*ItemCreated = Parms.ItemCreated;
}


// Function InventoryBag.InventoryBag_C.ResizeBag
// (Protected, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// int32                                   Size                                                   (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    Result                                                 (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void UInventoryBag_C::ResizeBag(int32 Size, bool* Result)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("InventoryBag_C", "ResizeBag");

	Params::InventoryBag_C_ResizeBag Parms{};

	Parms.Size = Size;

	UObject::ProcessEvent(Func, &Parms);

	if (Result != nullptr)
		*Result = Parms.Result;
}


// Function InventoryBag.InventoryBag_C.ForceEquipItemInSlot
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// int32                                   SlotIndex                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    Result                                                 (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void UInventoryBag_C::ForceEquipItemInSlot(int32 SlotIndex, bool* Result)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("InventoryBag_C", "ForceEquipItemInSlot");

	Params::InventoryBag_C_ForceEquipItemInSlot Parms{};

	Parms.SlotIndex = SlotIndex;

	UObject::ProcessEvent(Func, &Parms);

	if (Result != nullptr)
		*Result = Parms.Result;
}


// Function InventoryBag.InventoryBag_C.SetEquipSlotActive
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// int32                                   SlotIndex                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    Active                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// bool                                    Result                                                 (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void UInventoryBag_C::SetEquipSlotActive(int32 SlotIndex, bool Active, bool* Result)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("InventoryBag_C", "SetEquipSlotActive");

	Params::InventoryBag_C_SetEquipSlotActive Parms{};

	Parms.SlotIndex = SlotIndex;
	Parms.Active = Active;

	UObject::ProcessEvent(Func, &Parms);

	if (Result != nullptr)
		*Result = Parms.Result;
}


// Function InventoryBag.InventoryBag_C.AddItem
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// class UITEM_Base_C*                     Item                                                   (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    Result                                                 (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void UInventoryBag_C::AddItem(class UITEM_Base_C* Item, bool* Result)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("InventoryBag_C", "AddItem");

	Params::InventoryBag_C_AddItem Parms{};

	Parms.Item = Item;

	UObject::ProcessEvent(Func, &Parms);

	if (Result != nullptr)
		*Result = Parms.Result;
}


// Function InventoryBag.InventoryBag_C.AddItemToSlot
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// class UITEM_Base_C*                     Item                                                   (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// int32                                   SlotIndex                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    Result                                                 (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void UInventoryBag_C::AddItemToSlot(class UITEM_Base_C* Item, int32 SlotIndex, bool* Result)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("InventoryBag_C", "AddItemToSlot");

	Params::InventoryBag_C_AddItemToSlot Parms{};

	Parms.Item = Item;
	Parms.SlotIndex = SlotIndex;

	UObject::ProcessEvent(Func, &Parms);

	if (Result != nullptr)
		*Result = Parms.Result;
}


// Function InventoryBag.InventoryBag_C.SortBag
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    Result                                                 (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void UInventoryBag_C::SortBag(bool* Result)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("InventoryBag_C", "SortBag");

	Params::InventoryBag_C_SortBag Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (Result != nullptr)
		*Result = Parms.Result;
}


// Function InventoryBag.InventoryBag_C.CompareItems
// (Private, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// class UObject*                          ObjectA                                                (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class UObject*                          ObjectB                                                (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor)

bool UInventoryBag_C::CompareItems(class UObject* ObjectA, class UObject* ObjectB)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("InventoryBag_C", "CompareItems");

	Params::InventoryBag_C_CompareItems Parms{};

	Parms.ObjectA = ObjectA;
	Parms.ObjectB = ObjectB;

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function InventoryBag.InventoryBag_C.CanSlotItemType
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// ENUM_ItemType                           ItemType                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    Result                                                 (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void UInventoryBag_C::CanSlotItemType(ENUM_ItemType ItemType, bool* Result)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("InventoryBag_C", "CanSlotItemType");

	Params::InventoryBag_C_CanSlotItemType Parms{};

	Parms.ItemType = ItemType;

	UObject::ProcessEvent(Func, &Parms);

	if (Result != nullptr)
		*Result = Parms.Result;
}


// Function InventoryBag.InventoryBag_C.RequiresItemType
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// ENUM_ItemType                           ItemType                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    Result                                                 (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void UInventoryBag_C::RequiresItemType(ENUM_ItemType ItemType, bool* Result)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("InventoryBag_C", "RequiresItemType");

	Params::InventoryBag_C_RequiresItemType Parms{};

	Parms.ItemType = ItemType;

	UObject::ProcessEvent(Func, &Parms);

	if (Result != nullptr)
		*Result = Parms.Result;
}


// Function InventoryBag.InventoryBag_C.GetItemCount
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// TSoftClassPtr<class UClass>             ItemClass                                              (BlueprintVisible, BlueprintReadOnly, Parm, HasGetValueTypeHash)
// int32                                   MaxCount                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class UITEM_Base_C*                     IgnoreItem                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// int32                                   Result                                                 (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UInventoryBag_C::GetItemCount(TSoftClassPtr<class UClass> ItemClass, int32 MaxCount, class UITEM_Base_C* IgnoreItem, int32* Result)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("InventoryBag_C", "GetItemCount");

	Params::InventoryBag_C_GetItemCount Parms{};

	Parms.ItemClass = ItemClass;
	Parms.MaxCount = MaxCount;
	Parms.IgnoreItem = IgnoreItem;

	UObject::ProcessEvent(Func, &Parms);

	if (Result != nullptr)
		*Result = Parms.Result;
}


// Function InventoryBag.InventoryBag_C.GetTotalItemCount
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// int32                                   Count                                                  (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UInventoryBag_C::GetTotalItemCount(int32* Count)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("InventoryBag_C", "GetTotalItemCount");

	Params::InventoryBag_C_GetTotalItemCount Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (Count != nullptr)
		*Count = Parms.Count;
}


// Function InventoryBag.InventoryBag_C.RemoveItemCount
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// class UITEM_Base_C*                     Item                                                   (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// int32                                   Count                                                  (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class UITEM_Base_C*                     RemovedItem                                            (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UInventoryBag_C::RemoveItemCount(class UITEM_Base_C* Item, int32 Count, class UITEM_Base_C** RemovedItem)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("InventoryBag_C", "RemoveItemCount");

	Params::InventoryBag_C_RemoveItemCount Parms{};

	Parms.Item = Item;
	Parms.Count = Count;

	UObject::ProcessEvent(Func, &Parms);

	if (RemovedItem != nullptr)
		*RemovedItem = Parms.RemovedItem;
}


// Function InventoryBag.InventoryBag_C.CleanupSlot
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// class UITEM_Base_C*                     Item                                                   (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    Result                                                 (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void UInventoryBag_C::CleanupSlot(class UITEM_Base_C* Item, bool* Result)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("InventoryBag_C", "CleanupSlot");

	Params::InventoryBag_C_CleanupSlot Parms{};

	Parms.Item = Item;

	UObject::ProcessEvent(Func, &Parms);

	if (Result != nullptr)
		*Result = Parms.Result;
}


// Function InventoryBag.InventoryBag_C.GetItemArray
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// TArray<class UITEM_Base_C*>             Items                                                  (Parm, OutParm)

void UInventoryBag_C::GetItemArray(TArray<class UITEM_Base_C*>* Items)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("InventoryBag_C", "GetItemArray");

	Params::InventoryBag_C_GetItemArray Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (Items != nullptr)
		*Items = std::move(Parms.Items);
}


// Function InventoryBag.InventoryBag_C.BeginPlay
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)

void UInventoryBag_C::BeginPlay()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("InventoryBag_C", "BeginPlay");

	UObject::ProcessEvent(Func, nullptr);
}


// Function InventoryBag.InventoryBag_C.GetBagName
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// class FName                             BagName                                                (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UInventoryBag_C::GetBagName(class FName* BagName)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("InventoryBag_C", "GetBagName");

	Params::InventoryBag_C_GetBagName Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (BagName != nullptr)
		*BagName = Parms.BagName;
}


// Function InventoryBag.InventoryBag_C.IsBagEmpty
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// bool                                    Result                                                 (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void UInventoryBag_C::IsBagEmpty(bool* Result)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("InventoryBag_C", "IsBagEmpty");

	Params::InventoryBag_C_IsBagEmpty Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (Result != nullptr)
		*Result = Parms.Result;
}


// Function InventoryBag.InventoryBag_C.RemoveItem
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// class UITEM_Base_C*                     Item                                                   (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class UITEM_Base_C*                     RemovedItem                                            (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UInventoryBag_C::RemoveItem(class UITEM_Base_C* Item, class UITEM_Base_C** RemovedItem)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("InventoryBag_C", "RemoveItem");

	Params::InventoryBag_C_RemoveItem Parms{};

	Parms.Item = Item;

	UObject::ProcessEvent(Func, &Parms);

	if (RemovedItem != nullptr)
		*RemovedItem = Parms.RemovedItem;
}


// Function InventoryBag.InventoryBag_C.GetSlotType
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// ENUM_InventorySlotType                  SlotType                                               (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UInventoryBag_C::GetSlotType(ENUM_InventorySlotType* SlotType)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("InventoryBag_C", "GetSlotType");

	Params::InventoryBag_C_GetSlotType Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (SlotType != nullptr)
		*SlotType = Parms.SlotType;
}


// Function InventoryBag.InventoryBag_C.GetGridSlotIndices
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// int32                                   SlotIndex                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// int32                                   StartWidthOffset                                       (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// int32                                   StartHeightOffset                                      (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// int32                                   EndWidthOffset                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// int32                                   EndHeightOffset                                        (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// TArray<int32>                           SlotIndices                                            (Parm, OutParm)

void UInventoryBag_C::GetGridSlotIndices(int32 SlotIndex, int32 StartWidthOffset, int32 StartHeightOffset, int32 EndWidthOffset, int32 EndHeightOffset, TArray<int32>* SlotIndices)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("InventoryBag_C", "GetGridSlotIndices");

	Params::InventoryBag_C_GetGridSlotIndices Parms{};

	Parms.SlotIndex = SlotIndex;
	Parms.StartWidthOffset = StartWidthOffset;
	Parms.StartHeightOffset = StartHeightOffset;
	Parms.EndWidthOffset = EndWidthOffset;
	Parms.EndHeightOffset = EndHeightOffset;

	UObject::ProcessEvent(Func, &Parms);

	if (SlotIndices != nullptr)
		*SlotIndices = std::move(Parms.SlotIndices);
}


// Function InventoryBag.InventoryBag_C.GetGridSlotIndicesForItemWithSize
// (Private, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// int32                                   SlotIndex                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FIntPoint                        ItemSize                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// TArray<int32>                           ResultIndices                                          (Parm, OutParm)

void UInventoryBag_C::GetGridSlotIndicesForItemWithSize(int32 SlotIndex, const struct FIntPoint& ItemSize, TArray<int32>* ResultIndices)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("InventoryBag_C", "GetGridSlotIndicesForItemWithSize");

	Params::InventoryBag_C_GetGridSlotIndicesForItemWithSize Parms{};

	Parms.SlotIndex = SlotIndex;
	Parms.ItemSize = std::move(ItemSize);

	UObject::ProcessEvent(Func, &Parms);

	if (ResultIndices != nullptr)
		*ResultIndices = std::move(Parms.ResultIndices);
}


// Function InventoryBag.InventoryBag_C.HasGridSpaceForItemWithSize
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// int32                                   SlotIndex                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FIntPoint                        ItemSize                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class UITEM_Base_C*                     IgnoreItem                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    Result                                                 (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void UInventoryBag_C::HasGridSpaceForItemWithSize(int32 SlotIndex, const struct FIntPoint& ItemSize, class UITEM_Base_C* IgnoreItem, bool* Result)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("InventoryBag_C", "HasGridSpaceForItemWithSize");

	Params::InventoryBag_C_HasGridSpaceForItemWithSize Parms{};

	Parms.SlotIndex = SlotIndex;
	Parms.ItemSize = std::move(ItemSize);
	Parms.IgnoreItem = IgnoreItem;

	UObject::ProcessEvent(Func, &Parms);

	if (Result != nullptr)
		*Result = Parms.Result;
}


// Function InventoryBag.InventoryBag_C.GetGridWidth
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// int32                                   Result                                                 (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UInventoryBag_C::GetGridWidth(int32* Result)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("InventoryBag_C", "GetGridWidth");

	Params::InventoryBag_C_GetGridWidth Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (Result != nullptr)
		*Result = Parms.Result;
}


// Function InventoryBag.InventoryBag_C.GetGridHeight
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// int32                                   Result                                                 (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UInventoryBag_C::GetGridHeight(int32* Result)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("InventoryBag_C", "GetGridHeight");

	Params::InventoryBag_C_GetGridHeight Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (Result != nullptr)
		*Result = Parms.Result;
}


// Function InventoryBag.InventoryBag_C.GetSlotItem
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// int32                                   SlotIndex                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class UITEM_Base_C*                     Item                                                   (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UInventoryBag_C::GetSlotItem(int32 SlotIndex, class UITEM_Base_C** Item)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("InventoryBag_C", "GetSlotItem");

	Params::InventoryBag_C_GetSlotItem Parms{};

	Parms.SlotIndex = SlotIndex;

	UObject::ProcessEvent(Func, &Parms);

	if (Item != nullptr)
		*Item = Parms.Item;
}


// Function InventoryBag.InventoryBag_C.GetGridHeightAtHorizontalSlotIndex
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// int32                                   SlotLocation                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// int32                                   Result                                                 (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UInventoryBag_C::GetGridHeightAtHorizontalSlotIndex(int32 SlotLocation, int32* Result)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("InventoryBag_C", "GetGridHeightAtHorizontalSlotIndex");

	Params::InventoryBag_C_GetGridHeightAtHorizontalSlotIndex Parms{};

	Parms.SlotLocation = SlotLocation;

	UObject::ProcessEvent(Func, &Parms);

	if (Result != nullptr)
		*Result = Parms.Result;
}


// Function InventoryBag.InventoryBag_C.GetItemGridSize
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// class UITEM_Base_C*                     Item                                                   (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class UClass*                           ItemClass                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FIntPoint                        Result                                                 (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UInventoryBag_C::GetItemGridSize(class UITEM_Base_C* Item, class UClass* ItemClass, struct FIntPoint* Result)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("InventoryBag_C", "GetItemGridSize");

	Params::InventoryBag_C_GetItemGridSize Parms{};

	Parms.Item = Item;
	Parms.ItemClass = ItemClass;

	UObject::ProcessEvent(Func, &Parms);

	if (Result != nullptr)
		*Result = std::move(Parms.Result);
}


// Function InventoryBag.InventoryBag_C.GetGridCoordinatesFromSlotIndex
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// int32                                   SlotIndex                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FIntPoint                        GridCoords                                             (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UInventoryBag_C::GetGridCoordinatesFromSlotIndex(int32 SlotIndex, struct FIntPoint* GridCoords)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("InventoryBag_C", "GetGridCoordinatesFromSlotIndex");

	Params::InventoryBag_C_GetGridCoordinatesFromSlotIndex Parms{};

	Parms.SlotIndex = SlotIndex;

	UObject::ProcessEvent(Func, &Parms);

	if (GridCoords != nullptr)
		*GridCoords = std::move(Parms.GridCoords);
}


// Function InventoryBag.InventoryBag_C.GetSlotIndexFromGridCoordinates
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// struct FIntPoint                        GridCoords                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// int32                                   SlotIndex                                              (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UInventoryBag_C::GetSlotIndexFromGridCoordinates(const struct FIntPoint& GridCoords, int32* SlotIndex)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("InventoryBag_C", "GetSlotIndexFromGridCoordinates");

	Params::InventoryBag_C_GetSlotIndexFromGridCoordinates Parms{};

	Parms.GridCoords = std::move(GridCoords);

	UObject::ProcessEvent(Func, &Parms);

	if (SlotIndex != nullptr)
		*SlotIndex = Parms.SlotIndex;
}


// Function InventoryBag.InventoryBag_C.IsSlottedItemContainedByItem
// (Protected, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// class UITEM_Base_C*                     SlottedItem                                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// int32                                   ContainmentSlotIndex                                   (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class UITEM_Base_C*                     ContainmentItem                                        (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    Result                                                 (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void UInventoryBag_C::IsSlottedItemContainedByItem(class UITEM_Base_C* SlottedItem, int32 ContainmentSlotIndex, class UITEM_Base_C* ContainmentItem, bool* Result)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("InventoryBag_C", "IsSlottedItemContainedByItem");

	Params::InventoryBag_C_IsSlottedItemContainedByItem Parms{};

	Parms.SlottedItem = SlottedItem;
	Parms.ContainmentSlotIndex = ContainmentSlotIndex;
	Parms.ContainmentItem = ContainmentItem;

	UObject::ProcessEvent(Func, &Parms);

	if (Result != nullptr)
		*Result = Parms.Result;
}


// Function InventoryBag.InventoryBag_C.GetItemsInSlots
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// TArray<int32>                           SlotIndices                                            (BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
// TArray<class UITEM_Base_C*>             Items                                                  (Parm, OutParm)

void UInventoryBag_C::GetItemsInSlots(TArray<int32>& SlotIndices, TArray<class UITEM_Base_C*>* Items)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("InventoryBag_C", "GetItemsInSlots");

	Params::InventoryBag_C_GetItemsInSlots Parms{};

	Parms.SlotIndices = std::move(SlotIndices);

	UObject::ProcessEvent(Func, &Parms);

	SlotIndices = std::move(Parms.SlotIndices);

	if (Items != nullptr)
		*Items = std::move(Parms.Items);
}


// Function InventoryBag.InventoryBag_C.CanAddItem
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// class UITEM_Base_C*                     Item                                                   (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    IgnoreCurrentInventory                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// bool                                    Result                                                 (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void UInventoryBag_C::CanAddItem(class UITEM_Base_C* Item, bool IgnoreCurrentInventory, bool* Result)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("InventoryBag_C", "CanAddItem");

	Params::InventoryBag_C_CanAddItem Parms{};

	Parms.Item = Item;
	Parms.IgnoreCurrentInventory = IgnoreCurrentInventory;

	UObject::ProcessEvent(Func, &Parms);

	if (Result != nullptr)
		*Result = Parms.Result;
}


// Function InventoryBag.InventoryBag_C.CanAddItemToSlot
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// class UITEM_Base_C*                     Item                                                   (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// int32                                   SlotIndex                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    IgnoreCurrentInventory                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// bool                                    Result                                                 (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void UInventoryBag_C::CanAddItemToSlot(class UITEM_Base_C* Item, int32 SlotIndex, bool IgnoreCurrentInventory, bool* Result)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("InventoryBag_C", "CanAddItemToSlot");

	Params::InventoryBag_C_CanAddItemToSlot Parms{};

	Parms.Item = Item;
	Parms.SlotIndex = SlotIndex;
	Parms.IgnoreCurrentInventory = IgnoreCurrentInventory;

	UObject::ProcessEvent(Func, &Parms);

	if (Result != nullptr)
		*Result = Parms.Result;
}


// Function InventoryBag.InventoryBag_C.FindItem
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// class UClass*                           ItemClass                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    RequireUnslottable                                     (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// bool                                    AnyDerivedClass                                        (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// class UITEM_Base_C*                     FoundItem                                              (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UInventoryBag_C::FindItem(class UClass* ItemClass, bool RequireUnslottable, bool AnyDerivedClass, class UITEM_Base_C** FoundItem)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("InventoryBag_C", "FindItem");

	Params::InventoryBag_C_FindItem Parms{};

	Parms.ItemClass = ItemClass;
	Parms.RequireUnslottable = RequireUnslottable;
	Parms.AnyDerivedClass = AnyDerivedClass;

	UObject::ProcessEvent(Func, &Parms);

	if (FoundItem != nullptr)
		*FoundItem = Parms.FoundItem;
}


// Function InventoryBag.InventoryBag_C.FindItemBySoftClass
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// TSoftClassPtr<class UClass>             ItemClass                                              (BlueprintVisible, BlueprintReadOnly, Parm, HasGetValueTypeHash)
// bool                                    RequireUnslottable                                     (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// class UITEM_Base_C*                     FoundItem                                              (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UInventoryBag_C::FindItemBySoftClass(TSoftClassPtr<class UClass> ItemClass, bool RequireUnslottable, class UITEM_Base_C** FoundItem)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("InventoryBag_C", "FindItemBySoftClass");

	Params::InventoryBag_C_FindItemBySoftClass Parms{};

	Parms.ItemClass = ItemClass;
	Parms.RequireUnslottable = RequireUnslottable;

	UObject::ProcessEvent(Func, &Parms);

	if (FoundItem != nullptr)
		*FoundItem = Parms.FoundItem;
}


// Function InventoryBag.InventoryBag_C.FindAndApplyUpgrade
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// class UITEM_UpgradeBase_C*              UpgradeItem                                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class UClass*                           UpgradeClass                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// ENUM_UpgradeResult                      Result                                                 (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UInventoryBag_C::FindAndApplyUpgrade(class UITEM_UpgradeBase_C* UpgradeItem, class UClass* UpgradeClass, ENUM_UpgradeResult* Result)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("InventoryBag_C", "FindAndApplyUpgrade");

	Params::InventoryBag_C_FindAndApplyUpgrade Parms{};

	Parms.UpgradeItem = UpgradeItem;
	Parms.UpgradeClass = UpgradeClass;

	UObject::ProcessEvent(Func, &Parms);

	if (Result != nullptr)
		*Result = Parms.Result;
}


// Function InventoryBag.InventoryBag_C.FindItemToUpgrade
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// class UClass*                           UpgradeClass                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class UITEM_UpgradeBase_C*              Item                                                   (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// ENUM_UpgradeResult                      Result                                                 (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UInventoryBag_C::FindItemToUpgrade(class UClass* UpgradeClass, class UITEM_UpgradeBase_C** Item, ENUM_UpgradeResult* Result)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("InventoryBag_C", "FindItemToUpgrade");

	Params::InventoryBag_C_FindItemToUpgrade Parms{};

	Parms.UpgradeClass = UpgradeClass;

	UObject::ProcessEvent(Func, &Parms);

	if (Item != nullptr)
		*Item = Parms.Item;

	if (Result != nullptr)
		*Result = Parms.Result;
}


// Function InventoryBag.InventoryBag_C.GetItemsByClass
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// class UClass*                           ItemClass                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// TArray<class UITEM_Base_C*>             Result                                                 (Parm, OutParm)

void UInventoryBag_C::GetItemsByClass(class UClass* ItemClass, TArray<class UITEM_Base_C*>* Result)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("InventoryBag_C", "GetItemsByClass");

	Params::InventoryBag_C_GetItemsByClass Parms{};

	Parms.ItemClass = ItemClass;

	UObject::ProcessEvent(Func, &Parms);

	if (Result != nullptr)
		*Result = std::move(Parms.Result);
}


// Function InventoryBag.InventoryBag_C.CanSlotItemClass
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// class UClass*                           ItemClass                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    Result                                                 (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void UInventoryBag_C::CanSlotItemClass(class UClass* ItemClass, bool* Result)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("InventoryBag_C", "CanSlotItemClass");

	Params::InventoryBag_C_CanSlotItemClass Parms{};

	Parms.ItemClass = ItemClass;

	UObject::ProcessEvent(Func, &Parms);

	if (Result != nullptr)
		*Result = Parms.Result;
}


// Function InventoryBag.InventoryBag_C.GrantItem
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// struct FSTRUCT_HardItemParams           ItemParams                                             (BlueprintVisible, BlueprintReadOnly, Parm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    Result                                                 (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void UInventoryBag_C::GrantItem(const struct FSTRUCT_HardItemParams& ItemParams, bool* Result)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("InventoryBag_C", "GrantItem");

	Params::InventoryBag_C_GrantItem Parms{};

	Parms.ItemParams = std::move(ItemParams);

	UObject::ProcessEvent(Func, &Parms);

	if (Result != nullptr)
		*Result = Parms.Result;
}


// Function InventoryBag.InventoryBag_C.GrantItemsFromPackage
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// class UClass*                           PackageClass                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    Result                                                 (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void UInventoryBag_C::GrantItemsFromPackage(class UClass* PackageClass, bool* Result)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("InventoryBag_C", "GrantItemsFromPackage");

	Params::InventoryBag_C_GrantItemsFromPackage Parms{};

	Parms.PackageClass = PackageClass;

	UObject::ProcessEvent(Func, &Parms);

	if (Result != nullptr)
		*Result = Parms.Result;
}


// Function InventoryBag.InventoryBag_C.MoveItemCount
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// class UITEM_Base_C*                     Item                                                   (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// int32                                   Count                                                  (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// int32                                   SlotIndex                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class UInventoryBag_C*                  MultiSwapBag                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// int32                                   MultiSwapSlotIndex                                     (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    MultiSwapRotated                                       (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// bool                                    Result                                                 (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void UInventoryBag_C::MoveItemCount(class UITEM_Base_C* Item, int32 Count, int32 SlotIndex, class UInventoryBag_C* MultiSwapBag, int32 MultiSwapSlotIndex, bool MultiSwapRotated, bool* Result)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("InventoryBag_C", "MoveItemCount");

	Params::InventoryBag_C_MoveItemCount Parms{};

	Parms.Item = Item;
	Parms.Count = Count;
	Parms.SlotIndex = SlotIndex;
	Parms.MultiSwapBag = MultiSwapBag;
	Parms.MultiSwapSlotIndex = MultiSwapSlotIndex;
	Parms.MultiSwapRotated = MultiSwapRotated;

	UObject::ProcessEvent(Func, &Parms);

	if (Result != nullptr)
		*Result = Parms.Result;
}


// Function InventoryBag.InventoryBag_C.CanMoveItemCount
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// class UITEM_Base_C*                     Item                                                   (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// int32                                   Count                                                  (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// int32                                   SlotIndex                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class UInventoryBag_C*                  MultiSwapBag                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// int32                                   MultiSwapSlotIndex                                     (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    MultiSwapRotated                                       (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// bool                                    Result                                                 (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void UInventoryBag_C::CanMoveItemCount(class UITEM_Base_C* Item, int32 Count, int32 SlotIndex, class UInventoryBag_C* MultiSwapBag, int32 MultiSwapSlotIndex, bool MultiSwapRotated, bool* Result)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("InventoryBag_C", "CanMoveItemCount");

	Params::InventoryBag_C_CanMoveItemCount Parms{};

	Parms.Item = Item;
	Parms.Count = Count;
	Parms.SlotIndex = SlotIndex;
	Parms.MultiSwapBag = MultiSwapBag;
	Parms.MultiSwapSlotIndex = MultiSwapSlotIndex;
	Parms.MultiSwapRotated = MultiSwapRotated;

	UObject::ProcessEvent(Func, &Parms);

	if (Result != nullptr)
		*Result = Parms.Result;
}


// Function InventoryBag.InventoryBag_C.MoveItem
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// class UITEM_Base_C*                     Item                                                   (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// int32                                   SlotIndex                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class UInventoryBag_C*                  MultiSwapBag                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// int32                                   MultiSwapSlotIndex                                     (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    MultiSwapRotated                                       (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// bool                                    Result                                                 (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void UInventoryBag_C::MoveItem(class UITEM_Base_C* Item, int32 SlotIndex, class UInventoryBag_C* MultiSwapBag, int32 MultiSwapSlotIndex, bool MultiSwapRotated, bool* Result)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("InventoryBag_C", "MoveItem");

	Params::InventoryBag_C_MoveItem Parms{};

	Parms.Item = Item;
	Parms.SlotIndex = SlotIndex;
	Parms.MultiSwapBag = MultiSwapBag;
	Parms.MultiSwapSlotIndex = MultiSwapSlotIndex;
	Parms.MultiSwapRotated = MultiSwapRotated;

	UObject::ProcessEvent(Func, &Parms);

	if (Result != nullptr)
		*Result = Parms.Result;
}


// Function InventoryBag.InventoryBag_C.CanMoveItem
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// class UITEM_Base_C*                     Item                                                   (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// int32                                   SlotIndex                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class UInventoryBag_C*                  MultiSwapBag                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// int32                                   MultiSwapSlotIndex                                     (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    MultiSwapRotated                                       (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// bool                                    Result                                                 (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void UInventoryBag_C::CanMoveItem(class UITEM_Base_C* Item, int32 SlotIndex, class UInventoryBag_C* MultiSwapBag, int32 MultiSwapSlotIndex, bool MultiSwapRotated, bool* Result)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("InventoryBag_C", "CanMoveItem");

	Params::InventoryBag_C_CanMoveItem Parms{};

	Parms.Item = Item;
	Parms.SlotIndex = SlotIndex;
	Parms.MultiSwapBag = MultiSwapBag;
	Parms.MultiSwapSlotIndex = MultiSwapSlotIndex;
	Parms.MultiSwapRotated = MultiSwapRotated;

	UObject::ProcessEvent(Func, &Parms);

	if (Result != nullptr)
		*Result = Parms.Result;
}


// Function InventoryBag.InventoryBag_C.CombineItemsInternal
// (Private, BlueprintCallable, BlueprintEvent)
// Parameters:
// class UITEM_Base_C*                     ItemSrc                                                (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class UITEM_Base_C*                     ItemDst                                                (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// int32                                   Count                                                  (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UInventoryBag_C::CombineItemsInternal(class UITEM_Base_C* ItemSrc, class UITEM_Base_C* ItemDst, int32 Count)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("InventoryBag_C", "CombineItemsInternal");

	Params::InventoryBag_C_CombineItemsInternal Parms{};

	Parms.ItemSrc = ItemSrc;
	Parms.ItemDst = ItemDst;
	Parms.Count = Count;

	UObject::ProcessEvent(Func, &Parms);
}


// Function InventoryBag.InventoryBag_C.SwapSlotsInternal
// (Private, BlueprintCallable, BlueprintEvent)
// Parameters:
// class UITEM_Base_C*                     SourceItem                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class UITEM_Base_C*                     TargetItem                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// int32                                   SlotIndex                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class UInventoryBag_C*                  SwapBag                                                (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// int32                                   SwapSlotIndex                                          (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UInventoryBag_C::SwapSlotsInternal(class UITEM_Base_C* SourceItem, class UITEM_Base_C* TargetItem, int32 SlotIndex, class UInventoryBag_C* SwapBag, int32 SwapSlotIndex)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("InventoryBag_C", "SwapSlotsInternal");

	Params::InventoryBag_C_SwapSlotsInternal Parms{};

	Parms.SourceItem = SourceItem;
	Parms.TargetItem = TargetItem;
	Parms.SlotIndex = SlotIndex;
	Parms.SwapBag = SwapBag;
	Parms.SwapSlotIndex = SwapSlotIndex;

	UObject::ProcessEvent(Func, &Parms);
}


// Function InventoryBag.InventoryBag_C.CleanupSlotInternal
// (Private, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// class UITEM_Base_C*                     Item                                                   (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UInventoryBag_C::CleanupSlotInternal(class UITEM_Base_C* Item)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("InventoryBag_C", "CleanupSlotInternal");

	Params::InventoryBag_C_CleanupSlotInternal Parms{};

	Parms.Item = Item;

	UObject::ProcessEvent(Func, &Parms);
}


// Function InventoryBag.InventoryBag_C.PlaceItemInSlotInternal
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// class UITEM_Base_C*                     Item                                                   (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// int32                                   SlotIndex                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UInventoryBag_C::PlaceItemInSlotInternal(class UITEM_Base_C* Item, int32 SlotIndex)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("InventoryBag_C", "PlaceItemInSlotInternal");

	Params::InventoryBag_C_PlaceItemInSlotInternal Parms{};

	Parms.Item = Item;
	Parms.SlotIndex = SlotIndex;

	UObject::ProcessEvent(Func, &Parms);
}


// Function InventoryBag.InventoryBag_C.RemoveItemCountByClass
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// TSoftClassPtr<class UClass>             ItemClass                                              (BlueprintVisible, BlueprintReadOnly, Parm, HasGetValueTypeHash)
// int32                                   DesiredCount                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    PrioritizeSmallStacks                                  (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// int32                                   RemovedCount                                           (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UInventoryBag_C::RemoveItemCountByClass(TSoftClassPtr<class UClass> ItemClass, int32 DesiredCount, bool PrioritizeSmallStacks, int32* RemovedCount)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("InventoryBag_C", "RemoveItemCountByClass");

	Params::InventoryBag_C_RemoveItemCountByClass Parms{};

	Parms.ItemClass = ItemClass;
	Parms.DesiredCount = DesiredCount;
	Parms.PrioritizeSmallStacks = PrioritizeSmallStacks;

	UObject::ProcessEvent(Func, &Parms);

	if (RemovedCount != nullptr)
		*RemovedCount = Parms.RemovedCount;
}


// Function InventoryBag.InventoryBag_C.GetItemRotatedGridSize
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// class UITEM_Base_C*                     Item                                                   (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class UClass*                           ItemClass                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    IsRotated                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// struct FIntPoint                        Result                                                 (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UInventoryBag_C::GetItemRotatedGridSize(class UITEM_Base_C* Item, class UClass* ItemClass, bool IsRotated, struct FIntPoint* Result)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("InventoryBag_C", "GetItemRotatedGridSize");

	Params::InventoryBag_C_GetItemRotatedGridSize Parms{};

	Parms.Item = Item;
	Parms.ItemClass = ItemClass;
	Parms.IsRotated = IsRotated;

	UObject::ProcessEvent(Func, &Parms);

	if (Result != nullptr)
		*Result = std::move(Parms.Result);
}


// Function InventoryBag.InventoryBag_C.GetBestSlotInCardinalDirection
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// int32                                   SlotIndex                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// ENUM_CardinalDirection                  Direction                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// int32                                   Result                                                 (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UInventoryBag_C::GetBestSlotInCardinalDirection(int32 SlotIndex, ENUM_CardinalDirection Direction, int32* Result)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("InventoryBag_C", "GetBestSlotInCardinalDirection");

	Params::InventoryBag_C_GetBestSlotInCardinalDirection Parms{};

	Parms.SlotIndex = SlotIndex;
	Parms.Direction = Direction;

	UObject::ProcessEvent(Func, &Parms);

	if (Result != nullptr)
		*Result = Parms.Result;
}


// Function InventoryBag.InventoryBag_C.GetFirstOccupiedSlotIndex
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// int32                                   Result                                                 (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UInventoryBag_C::GetFirstOccupiedSlotIndex(int32* Result)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("InventoryBag_C", "GetFirstOccupiedSlotIndex");

	Params::InventoryBag_C_GetFirstOccupiedSlotIndex Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (Result != nullptr)
		*Result = Parms.Result;
}

}

