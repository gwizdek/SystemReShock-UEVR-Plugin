#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: WIDGET_CrosshairCursor

#include "Basic.hpp"

#include "WIDGET_CrosshairCursor_classes.hpp"
#include "WIDGET_CrosshairCursor_parameters.hpp"


namespace SDK
{

// Function WIDGET_CrosshairCursor.WIDGET_CrosshairCursor_C.ExecuteUbergraph_WIDGET_CrosshairCursor
// (Final, UbergraphFunction, HasDefaults)
// Parameters:
// int32                                   EntryPoint                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UWIDGET_CrosshairCursor_C::ExecuteUbergraph_WIDGET_CrosshairCursor(int32 EntryPoint)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("WIDGET_CrosshairCursor_C", "ExecuteUbergraph_WIDGET_CrosshairCursor");

	Params::WIDGET_CrosshairCursor_C_ExecuteUbergraph_WIDGET_CrosshairCursor Parms{};

	Parms.EntryPoint = EntryPoint;

	UObject::ProcessEvent(Func, &Parms);
}


// Function WIDGET_CrosshairCursor.WIDGET_CrosshairCursor_C.Tick
// (BlueprintCosmetic, Event, Public, BlueprintEvent)
// Parameters:
// struct FGeometry                        MyGeometry                                             (BlueprintVisible, BlueprintReadOnly, Parm, IsPlainOldData, NoDestructor)
// float                                   InDeltaTime                                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UWIDGET_CrosshairCursor_C::Tick(const struct FGeometry& MyGeometry, float InDeltaTime)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("WIDGET_CrosshairCursor_C", "Tick");

	Params::WIDGET_CrosshairCursor_C_Tick Parms{};

	Parms.MyGeometry = std::move(MyGeometry);
	Parms.InDeltaTime = InDeltaTime;

	UObject::ProcessEvent(Func, &Parms);
}


// Function WIDGET_CrosshairCursor.WIDGET_CrosshairCursor_C.Construct
// (BlueprintCosmetic, Event, Public, BlueprintEvent)

void UWIDGET_CrosshairCursor_C::Construct()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("WIDGET_CrosshairCursor_C", "Construct");

	UObject::ProcessEvent(Func, nullptr);
}


// Function WIDGET_CrosshairCursor.WIDGET_CrosshairCursor_C.InitializeCursor
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// class UWIDGET_PlayerHUD_C*              HUD                                                    (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UWIDGET_CrosshairCursor_C::InitializeCursor(class UWIDGET_PlayerHUD_C* HUD)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("WIDGET_CrosshairCursor_C", "InitializeCursor");

	Params::WIDGET_CrosshairCursor_C_InitializeCursor Parms{};

	Parms.HUD = HUD;

	UObject::ProcessEvent(Func, &Parms);
}


// Function WIDGET_CrosshairCursor.WIDGET_CrosshairCursor_C.SetDefaultCursor
// (Public, BlueprintCallable, BlueprintEvent)

void UWIDGET_CrosshairCursor_C::SetDefaultCursor()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("WIDGET_CrosshairCursor_C", "SetDefaultCursor");

	UObject::ProcessEvent(Func, nullptr);
}


// Function WIDGET_CrosshairCursor.WIDGET_CrosshairCursor_C.SetItemCursor
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// class UTexture*                         Texture                                                (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FVector2D                        CursorSize                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    IsRotated                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)

void UWIDGET_CrosshairCursor_C::SetItemCursor(class UTexture* Texture, const struct FVector2D& CursorSize, bool IsRotated)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("WIDGET_CrosshairCursor_C", "SetItemCursor");

	Params::WIDGET_CrosshairCursor_C_SetItemCursor Parms{};

	Parms.Texture = Texture;
	Parms.CursorSize = std::move(CursorSize);
	Parms.IsRotated = IsRotated;

	UObject::ProcessEvent(Func, &Parms);
}


// Function WIDGET_CrosshairCursor.WIDGET_CrosshairCursor_C.CreateItemDynamicMaterial
// (Public, BlueprintCallable, BlueprintEvent)

void UWIDGET_CrosshairCursor_C::CreateItemDynamicMaterial()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("WIDGET_CrosshairCursor_C", "CreateItemDynamicMaterial");

	UObject::ProcessEvent(Func, nullptr);
}


// Function WIDGET_CrosshairCursor.WIDGET_CrosshairCursor_C.SetCursorMode
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// ENUM_CursorMode                         Mode                                                   (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UWIDGET_CrosshairCursor_C::SetCursorMode(ENUM_CursorMode Mode)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("WIDGET_CrosshairCursor_C", "SetCursorMode");

	Params::WIDGET_CrosshairCursor_C_SetCursorMode Parms{};

	Parms.Mode = Mode;

	UObject::ProcessEvent(Func, &Parms);
}


// Function WIDGET_CrosshairCursor.WIDGET_CrosshairCursor_C.SetHighlighted
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    bShouldHighlight                                       (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)

void UWIDGET_CrosshairCursor_C::SetHighlighted(bool bShouldHighlight)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("WIDGET_CrosshairCursor_C", "SetHighlighted");

	Params::WIDGET_CrosshairCursor_C_SetHighlighted Parms{};

	Parms.bShouldHighlight = bShouldHighlight;

	UObject::ProcessEvent(Func, &Parms);
}


// Function WIDGET_CrosshairCursor.WIDGET_CrosshairCursor_C.UpdateSelectionRegionParent
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// class UGridMeshWidget*                  ParentGridMeshWidget                                   (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UWIDGET_CrosshairCursor_C::UpdateSelectionRegionParent(class UGridMeshWidget* ParentGridMeshWidget)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("WIDGET_CrosshairCursor_C", "UpdateSelectionRegionParent");

	Params::WIDGET_CrosshairCursor_C_UpdateSelectionRegionParent Parms{};

	Parms.ParentGridMeshWidget = ParentGridMeshWidget;

	UObject::ProcessEvent(Func, &Parms);
}


// Function WIDGET_CrosshairCursor.WIDGET_CrosshairCursor_C.UpdateBracketsParent
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// class UCanvasPanel*                     ParentPanel                                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UWIDGET_CrosshairCursor_C::UpdateBracketsParent(class UCanvasPanel* ParentPanel)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("WIDGET_CrosshairCursor_C", "UpdateBracketsParent");

	Params::WIDGET_CrosshairCursor_C_UpdateBracketsParent Parms{};

	Parms.ParentPanel = ParentPanel;

	UObject::ProcessEvent(Func, &Parms);
}


// Function WIDGET_CrosshairCursor.WIDGET_CrosshairCursor_C.UpdateBracketTransition
// (Public, BlueprintCallable, BlueprintEvent)

void UWIDGET_CrosshairCursor_C::UpdateBracketTransition()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("WIDGET_CrosshairCursor_C", "UpdateBracketTransition");

	UObject::ProcessEvent(Func, nullptr);
}


// Function WIDGET_CrosshairCursor.WIDGET_CrosshairCursor_C.UpdateCursorItemBrackets
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// class UITEM_Base_C*                     Item                                                   (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class UInventoryBag_C*                  Bag                                                    (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class UGridMeshWidget*                  BagMeshWidget                                          (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FIntPoint                        CursorItemGridCoords                                   (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    UpdatePosition                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)

void UWIDGET_CrosshairCursor_C::UpdateCursorItemBrackets(class UITEM_Base_C* Item, class UInventoryBag_C* Bag, class UGridMeshWidget* BagMeshWidget, const struct FIntPoint& CursorItemGridCoords, bool UpdatePosition)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("WIDGET_CrosshairCursor_C", "UpdateCursorItemBrackets");

	Params::WIDGET_CrosshairCursor_C_UpdateCursorItemBrackets Parms{};

	Parms.Item = Item;
	Parms.Bag = Bag;
	Parms.BagMeshWidget = BagMeshWidget;
	Parms.CursorItemGridCoords = std::move(CursorItemGridCoords);
	Parms.UpdatePosition = UpdatePosition;

	UObject::ProcessEvent(Func, &Parms);
}


// Function WIDGET_CrosshairCursor.WIDGET_CrosshairCursor_C.GetSelectionRegionWindowPosition
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// struct FVector2D                        WidgetOffset                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FVector2D                        Result                                                 (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UWIDGET_CrosshairCursor_C::GetSelectionRegionWindowPosition(const struct FVector2D& WidgetOffset, struct FVector2D* Result)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("WIDGET_CrosshairCursor_C", "GetSelectionRegionWindowPosition");

	Params::WIDGET_CrosshairCursor_C_GetSelectionRegionWindowPosition Parms{};

	Parms.WidgetOffset = std::move(WidgetOffset);

	UObject::ProcessEvent(Func, &Parms);

	if (Result != nullptr)
		*Result = std::move(Parms.Result);
}


// Function WIDGET_CrosshairCursor.WIDGET_CrosshairCursor_C.UpdateItemUnderCursorBrackets
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// class UITEM_Base_C*                     Item                                                   (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class UInventoryBagUI_C*                BagUI                                                  (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FVector2D                        CursorScreenPosition                                   (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UWIDGET_CrosshairCursor_C::UpdateItemUnderCursorBrackets(class UITEM_Base_C* Item, class UInventoryBagUI_C* BagUI, const struct FVector2D& CursorScreenPosition)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("WIDGET_CrosshairCursor_C", "UpdateItemUnderCursorBrackets");

	Params::WIDGET_CrosshairCursor_C_UpdateItemUnderCursorBrackets Parms{};

	Parms.Item = Item;
	Parms.BagUI = BagUI;
	Parms.CursorScreenPosition = std::move(CursorScreenPosition);

	UObject::ProcessEvent(Func, &Parms);
}


// Function WIDGET_CrosshairCursor.WIDGET_CrosshairCursor_C.UpdateInteractionBrackets
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// class UObject*                          Interactable                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class UPrimitiveComponent*              Primitive                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FVector2D                        CursorScreenPosition                                   (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    Result                                                 (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void UWIDGET_CrosshairCursor_C::UpdateInteractionBrackets(class UObject* Interactable, class UPrimitiveComponent* Primitive, const struct FVector2D& CursorScreenPosition, bool* Result)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("WIDGET_CrosshairCursor_C", "UpdateInteractionBrackets");

	Params::WIDGET_CrosshairCursor_C_UpdateInteractionBrackets Parms{};

	Parms.Interactable = Interactable;
	Parms.Primitive = Primitive;
	Parms.CursorScreenPosition = std::move(CursorScreenPosition);

	UObject::ProcessEvent(Func, &Parms);

	if (Result != nullptr)
		*Result = Parms.Result;
}


// Function WIDGET_CrosshairCursor.WIDGET_CrosshairCursor_C.UpdateBrackets
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// struct FVector2D                        CursorScreenPosition                                   (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FVector2D                        SelectionPosition                                      (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FVector2D                        SelectionSize                                          (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    RequiresTransitionUpdate                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// bool                                    Result                                                 (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void UWIDGET_CrosshairCursor_C::UpdateBrackets(const struct FVector2D& CursorScreenPosition, const struct FVector2D& SelectionPosition, const struct FVector2D& SelectionSize, bool RequiresTransitionUpdate, bool* Result)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("WIDGET_CrosshairCursor_C", "UpdateBrackets");

	Params::WIDGET_CrosshairCursor_C_UpdateBrackets Parms{};

	Parms.CursorScreenPosition = std::move(CursorScreenPosition);
	Parms.SelectionPosition = std::move(SelectionPosition);
	Parms.SelectionSize = std::move(SelectionSize);
	Parms.RequiresTransitionUpdate = RequiresTransitionUpdate;

	UObject::ProcessEvent(Func, &Parms);

	if (Result != nullptr)
		*Result = Parms.Result;
}


// Function WIDGET_CrosshairCursor.WIDGET_CrosshairCursor_C.DeactivateBrackets
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// struct FVector2D                        CursorScreenPosition                                   (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UWIDGET_CrosshairCursor_C::DeactivateBrackets(const struct FVector2D& CursorScreenPosition)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("WIDGET_CrosshairCursor_C", "DeactivateBrackets");

	Params::WIDGET_CrosshairCursor_C_DeactivateBrackets Parms{};

	Parms.CursorScreenPosition = std::move(CursorScreenPosition);

	UObject::ProcessEvent(Func, &Parms);
}


// Function WIDGET_CrosshairCursor.WIDGET_CrosshairCursor_C.HideSelectionBrackets
// (Public, BlueprintCallable, BlueprintEvent)

void UWIDGET_CrosshairCursor_C::HideSelectionBrackets()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("WIDGET_CrosshairCursor_C", "HideSelectionBrackets");

	UObject::ProcessEvent(Func, nullptr);
}


// Function WIDGET_CrosshairCursor.WIDGET_CrosshairCursor_C.HideSelection
// (Public, BlueprintCallable, BlueprintEvent)

void UWIDGET_CrosshairCursor_C::HideSelection()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("WIDGET_CrosshairCursor_C", "HideSelection");

	UObject::ProcessEvent(Func, nullptr);
}


// Function WIDGET_CrosshairCursor.WIDGET_CrosshairCursor_C.UpdateCrosshairSpread
// (Public, BlueprintCallable, BlueprintEvent)

void UWIDGET_CrosshairCursor_C::UpdateCrosshairSpread()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("WIDGET_CrosshairCursor_C", "UpdateCrosshairSpread");

	UObject::ProcessEvent(Func, nullptr);
}


// Function WIDGET_CrosshairCursor.WIDGET_CrosshairCursor_C.EVENT_OnDamageDealt
// (Private, BlueprintCallable, BlueprintEvent)
// Parameters:
// class AActor*                           OtherActor                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FAttribDamageInstance            DamageInstance                                         (BlueprintVisible, BlueprintReadOnly, Parm)
// class UObject*                          UserParams                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UWIDGET_CrosshairCursor_C::EVENT_OnDamageDealt(class AActor* OtherActor, const struct FAttribDamageInstance& DamageInstance, class UObject* UserParams)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("WIDGET_CrosshairCursor_C", "EVENT_OnDamageDealt");

	Params::WIDGET_CrosshairCursor_C_EVENT_OnDamageDealt Parms{};

	Parms.OtherActor = OtherActor;
	Parms.DamageInstance = std::move(DamageInstance);
	Parms.UserParams = UserParams;

	UObject::ProcessEvent(Func, &Parms);
}


// Function WIDGET_CrosshairCursor.WIDGET_CrosshairCursor_C.SetChannelProgress
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// float                                   Progress                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UWIDGET_CrosshairCursor_C::SetChannelProgress(float Progress)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("WIDGET_CrosshairCursor_C", "SetChannelProgress");

	Params::WIDGET_CrosshairCursor_C_SetChannelProgress Parms{};

	Parms.Progress = Progress;

	UObject::ProcessEvent(Func, &Parms);
}


// Function WIDGET_CrosshairCursor.WIDGET_CrosshairCursor_C.UpdateCursorHitTransition
// (Private, BlueprintCallable, BlueprintEvent)

void UWIDGET_CrosshairCursor_C::UpdateCursorHitTransition()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("WIDGET_CrosshairCursor_C", "UpdateCursorHitTransition");

	UObject::ProcessEvent(Func, nullptr);
}


// Function WIDGET_CrosshairCursor.WIDGET_CrosshairCursor_C.GetCurrentSpreadAngleRatio
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// float                                   Result                                                 (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UWIDGET_CrosshairCursor_C::GetCurrentSpreadAngleRatio(float* Result)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("WIDGET_CrosshairCursor_C", "GetCurrentSpreadAngleRatio");

	Params::WIDGET_CrosshairCursor_C_GetCurrentSpreadAngleRatio Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (Result != nullptr)
		*Result = Parms.Result;
}

}

