#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: COMP_Hotbar

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "Engine_classes.hpp"
#include "STRUCT_HotbarCategorySettings_structs.hpp"


namespace SDK
{

// BlueprintGeneratedClass COMP_Hotbar.COMP_Hotbar_C
// 0x0088 (0x0138 - 0x00B0)
class UCOMP_Hotbar_C final : public UActorComponent
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x00B0(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	TArray<TScriptInterface<class IINTERF_HotbarSlottable_C>> HotbarSlots;                                       // 0x00B8(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance, SaveGame)
	TArray<class UClass*>                         SlotClassPreferences;                              // 0x00C8(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance, SaveGame)
	int32                                         MaxHotbarSlots;                                    // 0x00D8(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_DC[0x4];                                       // 0x00DC(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	FMulticastInlineDelegateProperty_             OnAddedToHotbar;                                   // 0x00E0(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)
	FMulticastInlineDelegateProperty_             OnRemovedFromHotbar;                               // 0x00F0(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)
	int32                                         CurrentQuickSlotIndex;                             // 0x0100(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, SaveGame, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          SupportsQuickSlot;                                 // 0x0104(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          EnableHotbarCategories;                            // 0x0105(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, SaveGame, IsPlainOldData, NoDestructor)
	uint8                                         Pad_106[0x2];                                      // 0x0106(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class UClass*>                         SlottableClasses;                                  // 0x0108(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly)
	FMulticastInlineDelegateProperty_             OnQuickSlotChanged;                                // 0x0118(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)
	TArray<struct FSTRUCT_HotbarCategorySettings> HotbarCategories;                                  // 0x0128(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly)

public:
	void OnAddedToHotbar__DelegateSignature(class UCOMP_Hotbar_C* HotbarComponent, TScriptInterface<class IINTERF_HotbarSlottable_C> SlottableObject, int32 SlotIndex);
	void OnRemovedFromHotbar__DelegateSignature(class UCOMP_Hotbar_C* HotbarComponent, TScriptInterface<class IINTERF_HotbarSlottable_C> SlottableObject, int32 SlotIndex);
	void OnQuickSlotChanged__DelegateSignature(class UCOMP_Hotbar_C* HotbarComponent, int32 NewSlotIndex, int32 OldSlotIndex);
	void ExecuteUbergraph_COMP_Hotbar(int32 EntryPoint);
	void ReceiveBeginPlay();
	void InitializeHotbarSlots();
	void AddToSlot(TScriptInterface<class IINTERF_HotbarSlottable_C> SlottableObject, int32 SlotIndex, bool* Result);
	void AddToBestAvailableSlot(TScriptInterface<class IINTERF_HotbarSlottable_C> SlottableObject, bool* Result);
	void AddToSlotInternal(TScriptInterface<class IINTERF_HotbarSlottable_C> SlottableObject, int32 SlotIndex);
	void ClearSlotPreference(int32 SlotIndex, bool* Result);
	void ClearDuplicatePreference(class UClass* SlottableClass, bool* Result);
	void RemoveFromSlotIndex(int32 SlotIndex, bool ClearPreference, bool* Result);
	void IsSlotted(TScriptInterface<class IINTERF_HotbarSlottable_C> SlottableObject, bool* Result);
	void IsUsingHotbarCategories(bool* Result);
	void IsSlotClassPreference(int32 SlotIndex, class UClass* SlottableClass, bool* Result);
	void GetSlotIndex(TScriptInterface<class IINTERF_HotbarSlottable_C> SlottableObject, int32* SlotIndex);
	void GetSlotAtIndex(int32 SlotIndex, TScriptInterface<class IINTERF_HotbarSlottable_C>* SlottableObject);
	void GetSlotCount(int32* ResultCount);
	void RemoveFromSlot(TScriptInterface<class IINTERF_HotbarSlottable_C> SlottableObject, bool ClearPreference, bool* Result);
	void CanSlotAtIndex(TScriptInterface<class IINTERF_HotbarSlottable_C> SlottableObject, int32 SlotIndex, bool* Result);
	void IsSlottableClass(class UClass* Class_0, bool* Result);
	void EmptySlots(bool ClearPreferences);
	void ActivateSlot(int32 SlotIndex, bool* Result);
	void DeactivateSlot(int32 SlotIndex, bool* Result);
	void TryActivateQuickSlot(bool* Result);
	void TryUseConsumableAtSlot(int32 SlotIndex, bool* Result);
	void CycleFromSlot(int32 SlotIndex, class UClass* MatchClass, class UClass* IgnoreClass, bool Previous, int32* CycleIndex);
	void CycleQuickSlot(bool Previous);
	void GetQuickSlotIndex(int32* QuickSlotIndex);
	void SetQuickSlot(int32 HotbarSlotIndex);
	void SetEnableHotbarCategories(bool Enable);
	void GetFirstOccupiedSlotIndex(int32* SlotIndex);
	void GetFirstFreeSlotIndexWithPreference(class UClass* SlottableClass, int32* Result);
	bool ShouldSaveComponent(struct FStreamingSaveGameComponentParams* Params_0);

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"COMP_Hotbar_C">();
	}
	static class UCOMP_Hotbar_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<UCOMP_Hotbar_C>();
	}
};
static_assert(alignof(UCOMP_Hotbar_C) == 0x000008, "Wrong alignment on UCOMP_Hotbar_C");
static_assert(sizeof(UCOMP_Hotbar_C) == 0x000138, "Wrong size on UCOMP_Hotbar_C");
static_assert(offsetof(UCOMP_Hotbar_C, UberGraphFrame) == 0x0000B0, "Member 'UCOMP_Hotbar_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(UCOMP_Hotbar_C, HotbarSlots) == 0x0000B8, "Member 'UCOMP_Hotbar_C::HotbarSlots' has a wrong offset!");
static_assert(offsetof(UCOMP_Hotbar_C, SlotClassPreferences) == 0x0000C8, "Member 'UCOMP_Hotbar_C::SlotClassPreferences' has a wrong offset!");
static_assert(offsetof(UCOMP_Hotbar_C, MaxHotbarSlots) == 0x0000D8, "Member 'UCOMP_Hotbar_C::MaxHotbarSlots' has a wrong offset!");
static_assert(offsetof(UCOMP_Hotbar_C, OnAddedToHotbar) == 0x0000E0, "Member 'UCOMP_Hotbar_C::OnAddedToHotbar' has a wrong offset!");
static_assert(offsetof(UCOMP_Hotbar_C, OnRemovedFromHotbar) == 0x0000F0, "Member 'UCOMP_Hotbar_C::OnRemovedFromHotbar' has a wrong offset!");
static_assert(offsetof(UCOMP_Hotbar_C, CurrentQuickSlotIndex) == 0x000100, "Member 'UCOMP_Hotbar_C::CurrentQuickSlotIndex' has a wrong offset!");
static_assert(offsetof(UCOMP_Hotbar_C, SupportsQuickSlot) == 0x000104, "Member 'UCOMP_Hotbar_C::SupportsQuickSlot' has a wrong offset!");
static_assert(offsetof(UCOMP_Hotbar_C, EnableHotbarCategories) == 0x000105, "Member 'UCOMP_Hotbar_C::EnableHotbarCategories' has a wrong offset!");
static_assert(offsetof(UCOMP_Hotbar_C, SlottableClasses) == 0x000108, "Member 'UCOMP_Hotbar_C::SlottableClasses' has a wrong offset!");
static_assert(offsetof(UCOMP_Hotbar_C, OnQuickSlotChanged) == 0x000118, "Member 'UCOMP_Hotbar_C::OnQuickSlotChanged' has a wrong offset!");
static_assert(offsetof(UCOMP_Hotbar_C, HotbarCategories) == 0x000128, "Member 'UCOMP_Hotbar_C::HotbarCategories' has a wrong offset!");

}

