#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: MOVECONTROL_StationMove

#include "Basic.hpp"

#include "CoreUObject_structs.hpp"
#include "MOVECONTROL_Base_classes.hpp"
#include "ENUM_MoveControlType_structs.hpp"


namespace SDK
{

// BlueprintGeneratedClass MOVECONTROL_StationMove.MOVECONTROL_StationMove_C
// 0x0048 (0x00E0 - 0x0098)
class UMOVECONTROL_StationMove_C final : public UMOVECONTROL_Base_C
{
public:
	struct FVector                                BodyLocation;                                      // 0x0094(0x000C)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash)
	struct FRotator                               LookRotation;                                      // 0x00A0(0x000C)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, ExposeOnSpawn)
	float                                         MoveInterpDuration;                                // 0x00AC(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash)
	float                                         StopMoveDuration;                                  // 0x00B0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash)
	struct FVector                                SourceLocation;                                    // 0x00B4(0x000C)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               SourceRotation;                                    // 0x00C0(0x000C)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          ExpireNextTick;                                    // 0x00CC(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_CD[0x3];                                       // 0x00CD(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector2D                              RelativeYawPitchOffset;                            // 0x00D0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         ElapsedTime;                                       // 0x00D8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

public:
	void InitializeMoveControl(class APAWN_Hacker_Simple_C* Player_0, float GameTime, const struct FSTRUCT_MoveControlParams& InitialControlParams, bool* Result);
	void UpdateMoveControl(const struct FVector2D& MoveInput, const struct FVector2D& LookInput, const struct FSTRUCT_MoveControlParams& ControlParams, TArray<float>& ActionInputValues, float MoveInputScale, float Delta_Time, bool* ShouldExpire);
	void ExpireStationMovement();
	void ExpireMoveControl();

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"MOVECONTROL_StationMove_C">();
	}
	static class UMOVECONTROL_StationMove_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMOVECONTROL_StationMove_C>();
	}
};
static_assert(alignof(UMOVECONTROL_StationMove_C) == 0x000008, "Wrong alignment on UMOVECONTROL_StationMove_C");
static_assert(sizeof(UMOVECONTROL_StationMove_C) == 0x0000E0, "Wrong size on UMOVECONTROL_StationMove_C");
static_assert(offsetof(UMOVECONTROL_StationMove_C, BodyLocation) == 0x000094, "Member 'UMOVECONTROL_StationMove_C::BodyLocation' has a wrong offset!");
static_assert(offsetof(UMOVECONTROL_StationMove_C, LookRotation) == 0x0000A0, "Member 'UMOVECONTROL_StationMove_C::LookRotation' has a wrong offset!");
static_assert(offsetof(UMOVECONTROL_StationMove_C, MoveInterpDuration) == 0x0000AC, "Member 'UMOVECONTROL_StationMove_C::MoveInterpDuration' has a wrong offset!");
static_assert(offsetof(UMOVECONTROL_StationMove_C, StopMoveDuration) == 0x0000B0, "Member 'UMOVECONTROL_StationMove_C::StopMoveDuration' has a wrong offset!");
static_assert(offsetof(UMOVECONTROL_StationMove_C, SourceLocation) == 0x0000B4, "Member 'UMOVECONTROL_StationMove_C::SourceLocation' has a wrong offset!");
static_assert(offsetof(UMOVECONTROL_StationMove_C, SourceRotation) == 0x0000C0, "Member 'UMOVECONTROL_StationMove_C::SourceRotation' has a wrong offset!");
static_assert(offsetof(UMOVECONTROL_StationMove_C, ExpireNextTick) == 0x0000CC, "Member 'UMOVECONTROL_StationMove_C::ExpireNextTick' has a wrong offset!");
static_assert(offsetof(UMOVECONTROL_StationMove_C, RelativeYawPitchOffset) == 0x0000D0, "Member 'UMOVECONTROL_StationMove_C::RelativeYawPitchOffset' has a wrong offset!");
static_assert(offsetof(UMOVECONTROL_StationMove_C, ElapsedTime) == 0x0000D8, "Member 'UMOVECONTROL_StationMove_C::ElapsedTime' has a wrong offset!");

}

