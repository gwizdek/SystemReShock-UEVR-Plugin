#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: FUNCLIB_UserInterface

#include "Basic.hpp"

#include "FUNCLIB_UserInterface_classes.hpp"
#include "FUNCLIB_UserInterface_parameters.hpp"


namespace SDK
{

// Function FUNCLIB_UserInterface.FUNCLIB_UserInterface_C.GetButtonLegendTextureForPlatformName
// (Static, Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// class FString                           PlatformName                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, HasGetValueTypeHash)
// class UObject*                          __WorldContext                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class UTexture*                         Texture                                                (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UFUNCLIB_UserInterface_C::GetButtonLegendTextureForPlatformName(const class FString& PlatformName, class UObject* __WorldContext, class UTexture** Texture)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("FUNCLIB_UserInterface_C", "GetButtonLegendTextureForPlatformName");

	Params::FUNCLIB_UserInterface_C_GetButtonLegendTextureForPlatformName Parms{};

	Parms.PlatformName = std::move(PlatformName);
	Parms.__WorldContext = __WorldContext;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	if (Texture != nullptr)
		*Texture = Parms.Texture;
}


// Function FUNCLIB_UserInterface.FUNCLIB_UserInterface_C.GetKeyboardButtonAtlasIndex
// (Static, Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// struct FKey                             Key                                                    (BlueprintVisible, BlueprintReadOnly, Parm, HasGetValueTypeHash)
// class UObject*                          __WorldContext                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// int32                                   Index_0                                                (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UFUNCLIB_UserInterface_C::GetKeyboardButtonAtlasIndex(const struct FKey& Key, class UObject* __WorldContext, int32* Index_0)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("FUNCLIB_UserInterface_C", "GetKeyboardButtonAtlasIndex");

	Params::FUNCLIB_UserInterface_C_GetKeyboardButtonAtlasIndex Parms{};

	Parms.Key = std::move(Key);
	Parms.__WorldContext = __WorldContext;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	if (Index_0 != nullptr)
		*Index_0 = Parms.Index_0;
}


// Function FUNCLIB_UserInterface.FUNCLIB_UserInterface_C.GetMouseButtonAtlasIndex
// (Static, Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// struct FKey                             Key                                                    (BlueprintVisible, BlueprintReadOnly, Parm, HasGetValueTypeHash)
// class UObject*                          __WorldContext                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// int32                                   Index_0                                                (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UFUNCLIB_UserInterface_C::GetMouseButtonAtlasIndex(const struct FKey& Key, class UObject* __WorldContext, int32* Index_0)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("FUNCLIB_UserInterface_C", "GetMouseButtonAtlasIndex");

	Params::FUNCLIB_UserInterface_C_GetMouseButtonAtlasIndex Parms{};

	Parms.Key = std::move(Key);
	Parms.__WorldContext = __WorldContext;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	if (Index_0 != nullptr)
		*Index_0 = Parms.Index_0;
}


// Function FUNCLIB_UserInterface.FUNCLIB_UserInterface_C.GetGamepadButtonAtlasIndex
// (Static, Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// struct FKey                             Key                                                    (BlueprintVisible, BlueprintReadOnly, Parm, HasGetValueTypeHash)
// class UObject*                          __WorldContext                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// int32                                   Index_0                                                (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// float                                   Rotation                                               (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UFUNCLIB_UserInterface_C::GetGamepadButtonAtlasIndex(const struct FKey& Key, class UObject* __WorldContext, int32* Index_0, float* Rotation)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("FUNCLIB_UserInterface_C", "GetGamepadButtonAtlasIndex");

	Params::FUNCLIB_UserInterface_C_GetGamepadButtonAtlasIndex Parms{};

	Parms.Key = std::move(Key);
	Parms.__WorldContext = __WorldContext;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	if (Index_0 != nullptr)
		*Index_0 = Parms.Index_0;

	if (Rotation != nullptr)
		*Rotation = Parms.Rotation;
}


// Function FUNCLIB_UserInterface.FUNCLIB_UserInterface_C.GetCurrentPlatform
// (Static, Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// class UObject*                          __WorldContext                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    PC                                                     (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
// bool                                    Xbox                                                   (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
// bool                                    Playstation                                            (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
// bool                                    SWITCH                                                 (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
// bool                                    Console                                                (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void UFUNCLIB_UserInterface_C::GetCurrentPlatform(class UObject* __WorldContext, bool* PC, bool* Xbox, bool* Playstation, bool* SWITCH, bool* Console)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("FUNCLIB_UserInterface_C", "GetCurrentPlatform");

	Params::FUNCLIB_UserInterface_C_GetCurrentPlatform Parms{};

	Parms.__WorldContext = __WorldContext;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	if (PC != nullptr)
		*PC = Parms.PC;

	if (Xbox != nullptr)
		*Xbox = Parms.Xbox;

	if (Playstation != nullptr)
		*Playstation = Parms.Playstation;

	if (SWITCH != nullptr)
		*SWITCH = Parms.SWITCH;

	if (Console != nullptr)
		*Console = Parms.Console;
}


// Function FUNCLIB_UserInterface.FUNCLIB_UserInterface_C.FlickerElementHandler
// (Static, Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// class UWidget*                          InputWidget                                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    FlickerEnabled                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// class UObject*                          __WorldContext                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UFUNCLIB_UserInterface_C::FlickerElementHandler(class UWidget* InputWidget, bool FlickerEnabled, class UObject* __WorldContext)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("FUNCLIB_UserInterface_C", "FlickerElementHandler");

	Params::FUNCLIB_UserInterface_C_FlickerElementHandler Parms{};

	Parms.InputWidget = InputWidget;
	Parms.FlickerEnabled = FlickerEnabled;
	Parms.__WorldContext = __WorldContext;

	GetDefaultObj()->ProcessEvent(Func, &Parms);
}


// Function FUNCLIB_UserInterface.FUNCLIB_UserInterface_C.GetFemaleVersionOfSubtitle
// (Static, Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// class UDataTable*                       DataTable                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class FName                             SubtitleRowName                                        (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class UObject*                          __WorldContext                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FSTRUCT_MediaObject              MediaDataStruct                                        (Parm, OutParm, HasGetValueTypeHash)

void UFUNCLIB_UserInterface_C::GetFemaleVersionOfSubtitle(class UDataTable* DataTable, class FName SubtitleRowName, class UObject* __WorldContext, struct FSTRUCT_MediaObject* MediaDataStruct)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("FUNCLIB_UserInterface_C", "GetFemaleVersionOfSubtitle");

	Params::FUNCLIB_UserInterface_C_GetFemaleVersionOfSubtitle Parms{};

	Parms.DataTable = DataTable;
	Parms.SubtitleRowName = SubtitleRowName;
	Parms.__WorldContext = __WorldContext;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	if (MediaDataStruct != nullptr)
		*MediaDataStruct = std::move(Parms.MediaDataStruct);
}

}

