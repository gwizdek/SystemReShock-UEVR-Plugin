#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: WEAPON_AssaultRifle

#include "Basic.hpp"

#include "STRUCT_WeaponMode_structs.hpp"
#include "ENUM_ActionPriority_structs.hpp"
#include "AttributeSystem_structs.hpp"


namespace SDK::Params
{

// Function WEAPON_AssaultRifle.WEAPON_AssaultRifle_C.GetProjectileClass
// 0x0028 (0x0028 - 0x0000)
struct WEAPON_AssaultRifle_C_GetProjectileClass final
{
public:
	class UClass*                                 Result;                                            // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Variable;                                 // 0x0008(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UClass*                                 Temp_class_Variable;                               // 0x0010(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UClass*                                 Temp_class_Variable_1;                             // 0x0018(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UClass*                                 K2Node_Select_Default;                             // 0x0020(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(WEAPON_AssaultRifle_C_GetProjectileClass) == 0x000008, "Wrong alignment on WEAPON_AssaultRifle_C_GetProjectileClass");
static_assert(sizeof(WEAPON_AssaultRifle_C_GetProjectileClass) == 0x000028, "Wrong size on WEAPON_AssaultRifle_C_GetProjectileClass");
static_assert(offsetof(WEAPON_AssaultRifle_C_GetProjectileClass, Result) == 0x000000, "Member 'WEAPON_AssaultRifle_C_GetProjectileClass::Result' has a wrong offset!");
static_assert(offsetof(WEAPON_AssaultRifle_C_GetProjectileClass, Temp_int_Variable) == 0x000008, "Member 'WEAPON_AssaultRifle_C_GetProjectileClass::Temp_int_Variable' has a wrong offset!");
static_assert(offsetof(WEAPON_AssaultRifle_C_GetProjectileClass, Temp_class_Variable) == 0x000010, "Member 'WEAPON_AssaultRifle_C_GetProjectileClass::Temp_class_Variable' has a wrong offset!");
static_assert(offsetof(WEAPON_AssaultRifle_C_GetProjectileClass, Temp_class_Variable_1) == 0x000018, "Member 'WEAPON_AssaultRifle_C_GetProjectileClass::Temp_class_Variable_1' has a wrong offset!");
static_assert(offsetof(WEAPON_AssaultRifle_C_GetProjectileClass, K2Node_Select_Default) == 0x000020, "Member 'WEAPON_AssaultRifle_C_GetProjectileClass::K2Node_Select_Default' has a wrong offset!");

// Function WEAPON_AssaultRifle.WEAPON_AssaultRifle_C.GetAdditionalMods
// 0x02D0 (0x02D0 - 0x0000)
struct WEAPON_AssaultRifle_C_GetAdditionalMods final
{
public:
	TArray<struct FAttribModApplyData>            Result;                                            // 0x0000(0x0010)(Parm, OutParm)
	struct FAttribModApplyData                    IncendiaryApplyData;                               // 0x0010(0x00A0)(Edit, BlueprintVisible)
	struct FSTRUCT_WeaponMode                     CurrentMode;                                       // 0x00B0(0x0100)(Edit, BlueprintVisible, HasGetValueTypeHash)
	int32                                         CallFunc_GetWeaponPropertyValueByType_Value;       // 0x01B0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Conv_IntToFloat_ReturnValue;              // 0x01B4(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Multiply_FloatFloat_ReturnValue;          // 0x01B8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x01BC(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_1BD[0x3];                                      // 0x01BD(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FAttribModApplyData>            K2Node_MakeArray_Array;                            // 0x01C0(0x0010)(ReferenceParm)
	struct FSTRUCT_WeaponMode                     CallFunc_GetCurrentMode_Mode;                      // 0x01D0(0x0100)(HasGetValueTypeHash)
};
static_assert(alignof(WEAPON_AssaultRifle_C_GetAdditionalMods) == 0x000008, "Wrong alignment on WEAPON_AssaultRifle_C_GetAdditionalMods");
static_assert(sizeof(WEAPON_AssaultRifle_C_GetAdditionalMods) == 0x0002D0, "Wrong size on WEAPON_AssaultRifle_C_GetAdditionalMods");
static_assert(offsetof(WEAPON_AssaultRifle_C_GetAdditionalMods, Result) == 0x000000, "Member 'WEAPON_AssaultRifle_C_GetAdditionalMods::Result' has a wrong offset!");
static_assert(offsetof(WEAPON_AssaultRifle_C_GetAdditionalMods, IncendiaryApplyData) == 0x000010, "Member 'WEAPON_AssaultRifle_C_GetAdditionalMods::IncendiaryApplyData' has a wrong offset!");
static_assert(offsetof(WEAPON_AssaultRifle_C_GetAdditionalMods, CurrentMode) == 0x0000B0, "Member 'WEAPON_AssaultRifle_C_GetAdditionalMods::CurrentMode' has a wrong offset!");
static_assert(offsetof(WEAPON_AssaultRifle_C_GetAdditionalMods, CallFunc_GetWeaponPropertyValueByType_Value) == 0x0001B0, "Member 'WEAPON_AssaultRifle_C_GetAdditionalMods::CallFunc_GetWeaponPropertyValueByType_Value' has a wrong offset!");
static_assert(offsetof(WEAPON_AssaultRifle_C_GetAdditionalMods, CallFunc_Conv_IntToFloat_ReturnValue) == 0x0001B4, "Member 'WEAPON_AssaultRifle_C_GetAdditionalMods::CallFunc_Conv_IntToFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(WEAPON_AssaultRifle_C_GetAdditionalMods, CallFunc_Multiply_FloatFloat_ReturnValue) == 0x0001B8, "Member 'WEAPON_AssaultRifle_C_GetAdditionalMods::CallFunc_Multiply_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(WEAPON_AssaultRifle_C_GetAdditionalMods, CallFunc_IsValid_ReturnValue) == 0x0001BC, "Member 'WEAPON_AssaultRifle_C_GetAdditionalMods::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(WEAPON_AssaultRifle_C_GetAdditionalMods, K2Node_MakeArray_Array) == 0x0001C0, "Member 'WEAPON_AssaultRifle_C_GetAdditionalMods::K2Node_MakeArray_Array' has a wrong offset!");
static_assert(offsetof(WEAPON_AssaultRifle_C_GetAdditionalMods, CallFunc_GetCurrentMode_Mode) == 0x0001D0, "Member 'WEAPON_AssaultRifle_C_GetAdditionalMods::CallFunc_GetCurrentMode_Mode' has a wrong offset!");

// Function WEAPON_AssaultRifle.WEAPON_AssaultRifle_C.ReceiveAnimationMessage
// 0x0150 (0x0150 - 0x0000)
struct WEAPON_AssaultRifle_C_ReceiveAnimationMessage final
{
public:
	class FString                                 Message;                                           // 0x0000(0x0010)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, HasGetValueTypeHash)
	bool                                          Result;                                            // 0x0010(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UCharacterAction_C*                     CurrentAction;                                     // 0x0018(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Variable;                                // 0x0020(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_ReceiveAnimationMessage_Result;           // 0x0021(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	ENUM_ActionPriority                           Temp_byte_Variable;                                // 0x0022(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ENUM_ActionPriority                           Temp_byte_Variable_1;                              // 0x0023(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_24[0x4];                                       // 0x0024(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FSTRUCT_WeaponMode                     CallFunc_GetCurrentMode_Mode;                      // 0x0028(0x0100)(HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_ByteByte_ReturnValue;          // 0x0128(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_129[0x7];                                      // 0x0129(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class APAWN_SystemShockCharacter_C*           CallFunc_GetOwnerCharacter_Character;              // 0x0130(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ENUM_ActionPriority                           K2Node_Select_Default;                             // 0x0138(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_139[0x7];                                      // 0x0139(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UCharacterAction_C*                     CallFunc_GetCurrentAction_CurrentAction;           // 0x0140(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0148(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_EqualEqual_StrStr_ReturnValue;            // 0x0149(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(WEAPON_AssaultRifle_C_ReceiveAnimationMessage) == 0x000008, "Wrong alignment on WEAPON_AssaultRifle_C_ReceiveAnimationMessage");
static_assert(sizeof(WEAPON_AssaultRifle_C_ReceiveAnimationMessage) == 0x000150, "Wrong size on WEAPON_AssaultRifle_C_ReceiveAnimationMessage");
static_assert(offsetof(WEAPON_AssaultRifle_C_ReceiveAnimationMessage, Message) == 0x000000, "Member 'WEAPON_AssaultRifle_C_ReceiveAnimationMessage::Message' has a wrong offset!");
static_assert(offsetof(WEAPON_AssaultRifle_C_ReceiveAnimationMessage, Result) == 0x000010, "Member 'WEAPON_AssaultRifle_C_ReceiveAnimationMessage::Result' has a wrong offset!");
static_assert(offsetof(WEAPON_AssaultRifle_C_ReceiveAnimationMessage, CurrentAction) == 0x000018, "Member 'WEAPON_AssaultRifle_C_ReceiveAnimationMessage::CurrentAction' has a wrong offset!");
static_assert(offsetof(WEAPON_AssaultRifle_C_ReceiveAnimationMessage, Temp_bool_Variable) == 0x000020, "Member 'WEAPON_AssaultRifle_C_ReceiveAnimationMessage::Temp_bool_Variable' has a wrong offset!");
static_assert(offsetof(WEAPON_AssaultRifle_C_ReceiveAnimationMessage, CallFunc_ReceiveAnimationMessage_Result) == 0x000021, "Member 'WEAPON_AssaultRifle_C_ReceiveAnimationMessage::CallFunc_ReceiveAnimationMessage_Result' has a wrong offset!");
static_assert(offsetof(WEAPON_AssaultRifle_C_ReceiveAnimationMessage, Temp_byte_Variable) == 0x000022, "Member 'WEAPON_AssaultRifle_C_ReceiveAnimationMessage::Temp_byte_Variable' has a wrong offset!");
static_assert(offsetof(WEAPON_AssaultRifle_C_ReceiveAnimationMessage, Temp_byte_Variable_1) == 0x000023, "Member 'WEAPON_AssaultRifle_C_ReceiveAnimationMessage::Temp_byte_Variable_1' has a wrong offset!");
static_assert(offsetof(WEAPON_AssaultRifle_C_ReceiveAnimationMessage, CallFunc_GetCurrentMode_Mode) == 0x000028, "Member 'WEAPON_AssaultRifle_C_ReceiveAnimationMessage::CallFunc_GetCurrentMode_Mode' has a wrong offset!");
static_assert(offsetof(WEAPON_AssaultRifle_C_ReceiveAnimationMessage, CallFunc_EqualEqual_ByteByte_ReturnValue) == 0x000128, "Member 'WEAPON_AssaultRifle_C_ReceiveAnimationMessage::CallFunc_EqualEqual_ByteByte_ReturnValue' has a wrong offset!");
static_assert(offsetof(WEAPON_AssaultRifle_C_ReceiveAnimationMessage, CallFunc_GetOwnerCharacter_Character) == 0x000130, "Member 'WEAPON_AssaultRifle_C_ReceiveAnimationMessage::CallFunc_GetOwnerCharacter_Character' has a wrong offset!");
static_assert(offsetof(WEAPON_AssaultRifle_C_ReceiveAnimationMessage, K2Node_Select_Default) == 0x000138, "Member 'WEAPON_AssaultRifle_C_ReceiveAnimationMessage::K2Node_Select_Default' has a wrong offset!");
static_assert(offsetof(WEAPON_AssaultRifle_C_ReceiveAnimationMessage, CallFunc_GetCurrentAction_CurrentAction) == 0x000140, "Member 'WEAPON_AssaultRifle_C_ReceiveAnimationMessage::CallFunc_GetCurrentAction_CurrentAction' has a wrong offset!");
static_assert(offsetof(WEAPON_AssaultRifle_C_ReceiveAnimationMessage, CallFunc_IsValid_ReturnValue) == 0x000148, "Member 'WEAPON_AssaultRifle_C_ReceiveAnimationMessage::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(WEAPON_AssaultRifle_C_ReceiveAnimationMessage, CallFunc_EqualEqual_StrStr_ReturnValue) == 0x000149, "Member 'WEAPON_AssaultRifle_C_ReceiveAnimationMessage::CallFunc_EqualEqual_StrStr_ReturnValue' has a wrong offset!");

}

