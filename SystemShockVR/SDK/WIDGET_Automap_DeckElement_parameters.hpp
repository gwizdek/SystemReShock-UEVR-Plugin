#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: WIDGET_Automap_DeckElement

#include "Basic.hpp"

#include "UMG_structs.hpp"
#include "CoreUObject_structs.hpp"
#include "STRUCT_LevelInfo_structs.hpp"
#include "Engine_structs.hpp"
#include "SlateCore_structs.hpp"


namespace SDK::Params
{

// Function WIDGET_Automap_DeckElement.WIDGET_Automap_DeckElement_C.ExecuteUbergraph_WIDGET_Automap_DeckElement
// 0x0148 (0x0148 - 0x0000)
struct WIDGET_Automap_DeckElement_C_ExecuteUbergraph_WIDGET_Automap_DeckElement final
{
public:
	int32                                         EntryPoint;                                        // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UObject*                                K2Node_CustomEvent_Loaded;                         // 0x0008(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TDelegate<void(class UObject* Loaded)>        K2Node_CreateDelegate_OutputDelegate;              // 0x0010(0x0010)(ZeroConstructor, NoDestructor)
	class UObject*                                Temp_object_Variable;                              // 0x0020(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UTexture2D*                             K2Node_DynamicCast_AsTexture_2D;                   // 0x0028(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0030(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_31[0x7];                                       // 0x0031(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   CallFunc_GetDeckDisplayName_DisplayName;           // 0x0038(0x0018)()
	class UGameInstance*                          CallFunc_GetGameInstance_ReturnValue;              // 0x0050(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UMaterialInstanceDynamic*               CallFunc_GetDynamicMaterial_DynamicMaterial;       // 0x0058(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UGI_SinglePlayer_C*                     K2Node_DynamicCast_AsGI_Single_Player;             // 0x0060(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess_1;                     // 0x0068(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_69[0x3];                                       // 0x0069(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   CallFunc_GetLevelNameByDeckSymbol_LevelName;       // 0x006C(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_74[0x4];                                       // 0x0074(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FSTRUCT_LevelInfo                      CallFunc_GetLevelInfo_LevelInfo;                   // 0x0078(0x00C8)(HasGetValueTypeHash)
	bool                                          CallFunc_GetLevelInfo_Found;                       // 0x0140(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsValidSoftObjectReference_ReturnValue;   // 0x0141(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(WIDGET_Automap_DeckElement_C_ExecuteUbergraph_WIDGET_Automap_DeckElement) == 0x000008, "Wrong alignment on WIDGET_Automap_DeckElement_C_ExecuteUbergraph_WIDGET_Automap_DeckElement");
static_assert(sizeof(WIDGET_Automap_DeckElement_C_ExecuteUbergraph_WIDGET_Automap_DeckElement) == 0x000148, "Wrong size on WIDGET_Automap_DeckElement_C_ExecuteUbergraph_WIDGET_Automap_DeckElement");
static_assert(offsetof(WIDGET_Automap_DeckElement_C_ExecuteUbergraph_WIDGET_Automap_DeckElement, EntryPoint) == 0x000000, "Member 'WIDGET_Automap_DeckElement_C_ExecuteUbergraph_WIDGET_Automap_DeckElement::EntryPoint' has a wrong offset!");
static_assert(offsetof(WIDGET_Automap_DeckElement_C_ExecuteUbergraph_WIDGET_Automap_DeckElement, K2Node_CustomEvent_Loaded) == 0x000008, "Member 'WIDGET_Automap_DeckElement_C_ExecuteUbergraph_WIDGET_Automap_DeckElement::K2Node_CustomEvent_Loaded' has a wrong offset!");
static_assert(offsetof(WIDGET_Automap_DeckElement_C_ExecuteUbergraph_WIDGET_Automap_DeckElement, K2Node_CreateDelegate_OutputDelegate) == 0x000010, "Member 'WIDGET_Automap_DeckElement_C_ExecuteUbergraph_WIDGET_Automap_DeckElement::K2Node_CreateDelegate_OutputDelegate' has a wrong offset!");
static_assert(offsetof(WIDGET_Automap_DeckElement_C_ExecuteUbergraph_WIDGET_Automap_DeckElement, Temp_object_Variable) == 0x000020, "Member 'WIDGET_Automap_DeckElement_C_ExecuteUbergraph_WIDGET_Automap_DeckElement::Temp_object_Variable' has a wrong offset!");
static_assert(offsetof(WIDGET_Automap_DeckElement_C_ExecuteUbergraph_WIDGET_Automap_DeckElement, K2Node_DynamicCast_AsTexture_2D) == 0x000028, "Member 'WIDGET_Automap_DeckElement_C_ExecuteUbergraph_WIDGET_Automap_DeckElement::K2Node_DynamicCast_AsTexture_2D' has a wrong offset!");
static_assert(offsetof(WIDGET_Automap_DeckElement_C_ExecuteUbergraph_WIDGET_Automap_DeckElement, K2Node_DynamicCast_bSuccess) == 0x000030, "Member 'WIDGET_Automap_DeckElement_C_ExecuteUbergraph_WIDGET_Automap_DeckElement::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(WIDGET_Automap_DeckElement_C_ExecuteUbergraph_WIDGET_Automap_DeckElement, CallFunc_GetDeckDisplayName_DisplayName) == 0x000038, "Member 'WIDGET_Automap_DeckElement_C_ExecuteUbergraph_WIDGET_Automap_DeckElement::CallFunc_GetDeckDisplayName_DisplayName' has a wrong offset!");
static_assert(offsetof(WIDGET_Automap_DeckElement_C_ExecuteUbergraph_WIDGET_Automap_DeckElement, CallFunc_GetGameInstance_ReturnValue) == 0x000050, "Member 'WIDGET_Automap_DeckElement_C_ExecuteUbergraph_WIDGET_Automap_DeckElement::CallFunc_GetGameInstance_ReturnValue' has a wrong offset!");
static_assert(offsetof(WIDGET_Automap_DeckElement_C_ExecuteUbergraph_WIDGET_Automap_DeckElement, CallFunc_GetDynamicMaterial_DynamicMaterial) == 0x000058, "Member 'WIDGET_Automap_DeckElement_C_ExecuteUbergraph_WIDGET_Automap_DeckElement::CallFunc_GetDynamicMaterial_DynamicMaterial' has a wrong offset!");
static_assert(offsetof(WIDGET_Automap_DeckElement_C_ExecuteUbergraph_WIDGET_Automap_DeckElement, K2Node_DynamicCast_AsGI_Single_Player) == 0x000060, "Member 'WIDGET_Automap_DeckElement_C_ExecuteUbergraph_WIDGET_Automap_DeckElement::K2Node_DynamicCast_AsGI_Single_Player' has a wrong offset!");
static_assert(offsetof(WIDGET_Automap_DeckElement_C_ExecuteUbergraph_WIDGET_Automap_DeckElement, K2Node_DynamicCast_bSuccess_1) == 0x000068, "Member 'WIDGET_Automap_DeckElement_C_ExecuteUbergraph_WIDGET_Automap_DeckElement::K2Node_DynamicCast_bSuccess_1' has a wrong offset!");
static_assert(offsetof(WIDGET_Automap_DeckElement_C_ExecuteUbergraph_WIDGET_Automap_DeckElement, CallFunc_GetLevelNameByDeckSymbol_LevelName) == 0x00006C, "Member 'WIDGET_Automap_DeckElement_C_ExecuteUbergraph_WIDGET_Automap_DeckElement::CallFunc_GetLevelNameByDeckSymbol_LevelName' has a wrong offset!");
static_assert(offsetof(WIDGET_Automap_DeckElement_C_ExecuteUbergraph_WIDGET_Automap_DeckElement, CallFunc_GetLevelInfo_LevelInfo) == 0x000078, "Member 'WIDGET_Automap_DeckElement_C_ExecuteUbergraph_WIDGET_Automap_DeckElement::CallFunc_GetLevelInfo_LevelInfo' has a wrong offset!");
static_assert(offsetof(WIDGET_Automap_DeckElement_C_ExecuteUbergraph_WIDGET_Automap_DeckElement, CallFunc_GetLevelInfo_Found) == 0x000140, "Member 'WIDGET_Automap_DeckElement_C_ExecuteUbergraph_WIDGET_Automap_DeckElement::CallFunc_GetLevelInfo_Found' has a wrong offset!");
static_assert(offsetof(WIDGET_Automap_DeckElement_C_ExecuteUbergraph_WIDGET_Automap_DeckElement, CallFunc_IsValidSoftObjectReference_ReturnValue) == 0x000141, "Member 'WIDGET_Automap_DeckElement_C_ExecuteUbergraph_WIDGET_Automap_DeckElement::CallFunc_IsValidSoftObjectReference_ReturnValue' has a wrong offset!");

// Function WIDGET_Automap_DeckElement.WIDGET_Automap_DeckElement_C.OnLoaded_02696D51441FD2B9E97221884D551CBC
// 0x0008 (0x0008 - 0x0000)
struct WIDGET_Automap_DeckElement_C_OnLoaded_02696D51441FD2B9E97221884D551CBC final
{
public:
	class UObject*                                Loaded;                                            // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(WIDGET_Automap_DeckElement_C_OnLoaded_02696D51441FD2B9E97221884D551CBC) == 0x000008, "Wrong alignment on WIDGET_Automap_DeckElement_C_OnLoaded_02696D51441FD2B9E97221884D551CBC");
static_assert(sizeof(WIDGET_Automap_DeckElement_C_OnLoaded_02696D51441FD2B9E97221884D551CBC) == 0x000008, "Wrong size on WIDGET_Automap_DeckElement_C_OnLoaded_02696D51441FD2B9E97221884D551CBC");
static_assert(offsetof(WIDGET_Automap_DeckElement_C_OnLoaded_02696D51441FD2B9E97221884D551CBC, Loaded) == 0x000000, "Member 'WIDGET_Automap_DeckElement_C_OnLoaded_02696D51441FD2B9E97221884D551CBC::Loaded' has a wrong offset!");

// Function WIDGET_Automap_DeckElement.WIDGET_Automap_DeckElement_C.EVENT_OnMouseEnter
// 0x00B0 (0x00B0 - 0x0000)
struct WIDGET_Automap_DeckElement_C_EVENT_OnMouseEnter final
{
public:
	struct FGeometry                              MyGeometry;                                        // 0x0000(0x0038)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor)
	struct FPointerEvent                          MouseEvent;                                        // 0x0038(0x0070)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
	class UUMGSequencePlayer*                     CallFunc_PlayAnimation_ReturnValue;                // 0x00A8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(WIDGET_Automap_DeckElement_C_EVENT_OnMouseEnter) == 0x000008, "Wrong alignment on WIDGET_Automap_DeckElement_C_EVENT_OnMouseEnter");
static_assert(sizeof(WIDGET_Automap_DeckElement_C_EVENT_OnMouseEnter) == 0x0000B0, "Wrong size on WIDGET_Automap_DeckElement_C_EVENT_OnMouseEnter");
static_assert(offsetof(WIDGET_Automap_DeckElement_C_EVENT_OnMouseEnter, MyGeometry) == 0x000000, "Member 'WIDGET_Automap_DeckElement_C_EVENT_OnMouseEnter::MyGeometry' has a wrong offset!");
static_assert(offsetof(WIDGET_Automap_DeckElement_C_EVENT_OnMouseEnter, MouseEvent) == 0x000038, "Member 'WIDGET_Automap_DeckElement_C_EVENT_OnMouseEnter::MouseEvent' has a wrong offset!");
static_assert(offsetof(WIDGET_Automap_DeckElement_C_EVENT_OnMouseEnter, CallFunc_PlayAnimation_ReturnValue) == 0x0000A8, "Member 'WIDGET_Automap_DeckElement_C_EVENT_OnMouseEnter::CallFunc_PlayAnimation_ReturnValue' has a wrong offset!");

// Function WIDGET_Automap_DeckElement.WIDGET_Automap_DeckElement_C.EVENT_MouseLeave
// 0x0078 (0x0078 - 0x0000)
struct WIDGET_Automap_DeckElement_C_EVENT_MouseLeave final
{
public:
	struct FPointerEvent                          MouseEvent;                                        // 0x0000(0x0070)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
	class UUMGSequencePlayer*                     CallFunc_PlayAnimation_ReturnValue;                // 0x0070(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(WIDGET_Automap_DeckElement_C_EVENT_MouseLeave) == 0x000008, "Wrong alignment on WIDGET_Automap_DeckElement_C_EVENT_MouseLeave");
static_assert(sizeof(WIDGET_Automap_DeckElement_C_EVENT_MouseLeave) == 0x000078, "Wrong size on WIDGET_Automap_DeckElement_C_EVENT_MouseLeave");
static_assert(offsetof(WIDGET_Automap_DeckElement_C_EVENT_MouseLeave, MouseEvent) == 0x000000, "Member 'WIDGET_Automap_DeckElement_C_EVENT_MouseLeave::MouseEvent' has a wrong offset!");
static_assert(offsetof(WIDGET_Automap_DeckElement_C_EVENT_MouseLeave, CallFunc_PlayAnimation_ReturnValue) == 0x000070, "Member 'WIDGET_Automap_DeckElement_C_EVENT_MouseLeave::CallFunc_PlayAnimation_ReturnValue' has a wrong offset!");

// Function WIDGET_Automap_DeckElement.WIDGET_Automap_DeckElement_C.EVENT_MouseButtonDown
// 0x0258 (0x0258 - 0x0000)
struct WIDGET_Automap_DeckElement_C_EVENT_MouseButtonDown final
{
public:
	struct FGeometry                              MyGeometry;                                        // 0x0000(0x0038)(BlueprintVisible, BlueprintReadOnly, Parm, IsPlainOldData, NoDestructor)
	struct FPointerEvent                          MouseEvent;                                        // 0x0038(0x0070)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
	struct FEventReply                            ReturnValue;                                       // 0x00A8(0x00B8)(Parm, OutParm, ReturnParm)
	class APAWN_Hacker_Simple_C*                  Hacker;                                            // 0x0160(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash)
	class FName                                   CurrentFilterTag;                                  // 0x0168(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FName                                   CallFunc_GetDeckRowName_DeckRow;                   // 0x0170(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UGameInstance*                          CallFunc_GetGameInstance_ReturnValue;              // 0x0178(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UGI_SinglePlayer_C*                     K2Node_DynamicCast_AsGI_Single_Player;             // 0x0180(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0188(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_189[0x7];                                      // 0x0189(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FEventReply                            CallFunc_Handled_ReturnValue;                      // 0x0190(0x00B8)()
	bool                                          CallFunc_HasVisitedLevel_Result;                   // 0x0248(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Not_PreBool_ReturnValue;                  // 0x0249(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_24A[0x6];                                      // 0x024A(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class UUMGSequencePlayer*                     CallFunc_PlayAnimation_ReturnValue;                // 0x0250(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(WIDGET_Automap_DeckElement_C_EVENT_MouseButtonDown) == 0x000008, "Wrong alignment on WIDGET_Automap_DeckElement_C_EVENT_MouseButtonDown");
static_assert(sizeof(WIDGET_Automap_DeckElement_C_EVENT_MouseButtonDown) == 0x000258, "Wrong size on WIDGET_Automap_DeckElement_C_EVENT_MouseButtonDown");
static_assert(offsetof(WIDGET_Automap_DeckElement_C_EVENT_MouseButtonDown, MyGeometry) == 0x000000, "Member 'WIDGET_Automap_DeckElement_C_EVENT_MouseButtonDown::MyGeometry' has a wrong offset!");
static_assert(offsetof(WIDGET_Automap_DeckElement_C_EVENT_MouseButtonDown, MouseEvent) == 0x000038, "Member 'WIDGET_Automap_DeckElement_C_EVENT_MouseButtonDown::MouseEvent' has a wrong offset!");
static_assert(offsetof(WIDGET_Automap_DeckElement_C_EVENT_MouseButtonDown, ReturnValue) == 0x0000A8, "Member 'WIDGET_Automap_DeckElement_C_EVENT_MouseButtonDown::ReturnValue' has a wrong offset!");
static_assert(offsetof(WIDGET_Automap_DeckElement_C_EVENT_MouseButtonDown, Hacker) == 0x000160, "Member 'WIDGET_Automap_DeckElement_C_EVENT_MouseButtonDown::Hacker' has a wrong offset!");
static_assert(offsetof(WIDGET_Automap_DeckElement_C_EVENT_MouseButtonDown, CurrentFilterTag) == 0x000168, "Member 'WIDGET_Automap_DeckElement_C_EVENT_MouseButtonDown::CurrentFilterTag' has a wrong offset!");
static_assert(offsetof(WIDGET_Automap_DeckElement_C_EVENT_MouseButtonDown, CallFunc_GetDeckRowName_DeckRow) == 0x000170, "Member 'WIDGET_Automap_DeckElement_C_EVENT_MouseButtonDown::CallFunc_GetDeckRowName_DeckRow' has a wrong offset!");
static_assert(offsetof(WIDGET_Automap_DeckElement_C_EVENT_MouseButtonDown, CallFunc_GetGameInstance_ReturnValue) == 0x000178, "Member 'WIDGET_Automap_DeckElement_C_EVENT_MouseButtonDown::CallFunc_GetGameInstance_ReturnValue' has a wrong offset!");
static_assert(offsetof(WIDGET_Automap_DeckElement_C_EVENT_MouseButtonDown, K2Node_DynamicCast_AsGI_Single_Player) == 0x000180, "Member 'WIDGET_Automap_DeckElement_C_EVENT_MouseButtonDown::K2Node_DynamicCast_AsGI_Single_Player' has a wrong offset!");
static_assert(offsetof(WIDGET_Automap_DeckElement_C_EVENT_MouseButtonDown, K2Node_DynamicCast_bSuccess) == 0x000188, "Member 'WIDGET_Automap_DeckElement_C_EVENT_MouseButtonDown::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(WIDGET_Automap_DeckElement_C_EVENT_MouseButtonDown, CallFunc_Handled_ReturnValue) == 0x000190, "Member 'WIDGET_Automap_DeckElement_C_EVENT_MouseButtonDown::CallFunc_Handled_ReturnValue' has a wrong offset!");
static_assert(offsetof(WIDGET_Automap_DeckElement_C_EVENT_MouseButtonDown, CallFunc_HasVisitedLevel_Result) == 0x000248, "Member 'WIDGET_Automap_DeckElement_C_EVENT_MouseButtonDown::CallFunc_HasVisitedLevel_Result' has a wrong offset!");
static_assert(offsetof(WIDGET_Automap_DeckElement_C_EVENT_MouseButtonDown, CallFunc_Not_PreBool_ReturnValue) == 0x000249, "Member 'WIDGET_Automap_DeckElement_C_EVENT_MouseButtonDown::CallFunc_Not_PreBool_ReturnValue' has a wrong offset!");
static_assert(offsetof(WIDGET_Automap_DeckElement_C_EVENT_MouseButtonDown, CallFunc_PlayAnimation_ReturnValue) == 0x000250, "Member 'WIDGET_Automap_DeckElement_C_EVENT_MouseButtonDown::CallFunc_PlayAnimation_ReturnValue' has a wrong offset!");

// Function WIDGET_Automap_DeckElement.WIDGET_Automap_DeckElement_C.UpdateVisualState
// 0x0080 (0x0080 - 0x0000)
struct WIDGET_Automap_DeckElement_C_UpdateVisualState final
{
public:
	bool                                          HasVisited;                                        // 0x0000(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Temp_bool_Variable;                                // 0x0001(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Temp_bool_Variable_1;                              // 0x0002(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Temp_bool_Variable_2;                              // 0x0003(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Temp_bool_Variable_3;                              // 0x0004(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Temp_bool_Variable_4;                              // 0x0005(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_6[0x2];                                        // 0x0006(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	class UMaterialInstanceDynamic*               CallFunc_GetDynamicMaterial_DynamicMaterial;       // 0x0008(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_SelectFloat_ReturnValue;                  // 0x0010(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FColor                                 CallFunc_GetUnvisitedTextColor_Color;              // 0x0014(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FColor                                 CallFunc_GetHighlightedUnvisitedTextColor_Color;   // 0x0018(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FColor                                 K2Node_Select_Default;                             // 0x001C(0x0004)(ConstParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FName                                   CallFunc_GetDeckRowName_DeckRow;                   // 0x0020(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UGameInstance*                          CallFunc_GetGameInstance_ReturnValue;              // 0x0028(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UMaterialInstanceDynamic*               CallFunc_GetDynamicMaterial_DynamicMaterial_1;     // 0x0030(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UGI_SinglePlayer_C*                     K2Node_DynamicCast_AsGI_Single_Player;             // 0x0038(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0040(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_41[0x7];                                       // 0x0041(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UMaterialInstanceDynamic*               CallFunc_GetDynamicMaterial_DynamicMaterial_2;     // 0x0048(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_HasVisitedLevel_Result;                   // 0x0050(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_51[0x3];                                       // 0x0051(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_SelectFloat_ReturnValue_1;                // 0x0054(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_SelectFloat_ReturnValue_2;                // 0x0058(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FColor                                 CallFunc_GetHighlightedInactiveTextColor_Color;    // 0x005C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FColor                                 CallFunc_GetHighlightedActiveTextColor_Color;      // 0x0060(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FColor                                 CallFunc_GetInactiveTextColor_Color;               // 0x0064(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FColor                                 K2Node_Select_Default_1;                           // 0x0068(0x0004)(ConstParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FColor                                 CallFunc_GetActiveTextColor_Color;                 // 0x006C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FColor                                 K2Node_Select_Default_2;                           // 0x0070(0x0004)(ConstParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FColor                                 K2Node_Select_Default_3;                           // 0x0074(0x0004)(ConstParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FColor                                 K2Node_Select_Default_4;                           // 0x0078(0x0004)(ConstParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(WIDGET_Automap_DeckElement_C_UpdateVisualState) == 0x000008, "Wrong alignment on WIDGET_Automap_DeckElement_C_UpdateVisualState");
static_assert(sizeof(WIDGET_Automap_DeckElement_C_UpdateVisualState) == 0x000080, "Wrong size on WIDGET_Automap_DeckElement_C_UpdateVisualState");
static_assert(offsetof(WIDGET_Automap_DeckElement_C_UpdateVisualState, HasVisited) == 0x000000, "Member 'WIDGET_Automap_DeckElement_C_UpdateVisualState::HasVisited' has a wrong offset!");
static_assert(offsetof(WIDGET_Automap_DeckElement_C_UpdateVisualState, Temp_bool_Variable) == 0x000001, "Member 'WIDGET_Automap_DeckElement_C_UpdateVisualState::Temp_bool_Variable' has a wrong offset!");
static_assert(offsetof(WIDGET_Automap_DeckElement_C_UpdateVisualState, Temp_bool_Variable_1) == 0x000002, "Member 'WIDGET_Automap_DeckElement_C_UpdateVisualState::Temp_bool_Variable_1' has a wrong offset!");
static_assert(offsetof(WIDGET_Automap_DeckElement_C_UpdateVisualState, Temp_bool_Variable_2) == 0x000003, "Member 'WIDGET_Automap_DeckElement_C_UpdateVisualState::Temp_bool_Variable_2' has a wrong offset!");
static_assert(offsetof(WIDGET_Automap_DeckElement_C_UpdateVisualState, Temp_bool_Variable_3) == 0x000004, "Member 'WIDGET_Automap_DeckElement_C_UpdateVisualState::Temp_bool_Variable_3' has a wrong offset!");
static_assert(offsetof(WIDGET_Automap_DeckElement_C_UpdateVisualState, Temp_bool_Variable_4) == 0x000005, "Member 'WIDGET_Automap_DeckElement_C_UpdateVisualState::Temp_bool_Variable_4' has a wrong offset!");
static_assert(offsetof(WIDGET_Automap_DeckElement_C_UpdateVisualState, CallFunc_GetDynamicMaterial_DynamicMaterial) == 0x000008, "Member 'WIDGET_Automap_DeckElement_C_UpdateVisualState::CallFunc_GetDynamicMaterial_DynamicMaterial' has a wrong offset!");
static_assert(offsetof(WIDGET_Automap_DeckElement_C_UpdateVisualState, CallFunc_SelectFloat_ReturnValue) == 0x000010, "Member 'WIDGET_Automap_DeckElement_C_UpdateVisualState::CallFunc_SelectFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(WIDGET_Automap_DeckElement_C_UpdateVisualState, CallFunc_GetUnvisitedTextColor_Color) == 0x000014, "Member 'WIDGET_Automap_DeckElement_C_UpdateVisualState::CallFunc_GetUnvisitedTextColor_Color' has a wrong offset!");
static_assert(offsetof(WIDGET_Automap_DeckElement_C_UpdateVisualState, CallFunc_GetHighlightedUnvisitedTextColor_Color) == 0x000018, "Member 'WIDGET_Automap_DeckElement_C_UpdateVisualState::CallFunc_GetHighlightedUnvisitedTextColor_Color' has a wrong offset!");
static_assert(offsetof(WIDGET_Automap_DeckElement_C_UpdateVisualState, K2Node_Select_Default) == 0x00001C, "Member 'WIDGET_Automap_DeckElement_C_UpdateVisualState::K2Node_Select_Default' has a wrong offset!");
static_assert(offsetof(WIDGET_Automap_DeckElement_C_UpdateVisualState, CallFunc_GetDeckRowName_DeckRow) == 0x000020, "Member 'WIDGET_Automap_DeckElement_C_UpdateVisualState::CallFunc_GetDeckRowName_DeckRow' has a wrong offset!");
static_assert(offsetof(WIDGET_Automap_DeckElement_C_UpdateVisualState, CallFunc_GetGameInstance_ReturnValue) == 0x000028, "Member 'WIDGET_Automap_DeckElement_C_UpdateVisualState::CallFunc_GetGameInstance_ReturnValue' has a wrong offset!");
static_assert(offsetof(WIDGET_Automap_DeckElement_C_UpdateVisualState, CallFunc_GetDynamicMaterial_DynamicMaterial_1) == 0x000030, "Member 'WIDGET_Automap_DeckElement_C_UpdateVisualState::CallFunc_GetDynamicMaterial_DynamicMaterial_1' has a wrong offset!");
static_assert(offsetof(WIDGET_Automap_DeckElement_C_UpdateVisualState, K2Node_DynamicCast_AsGI_Single_Player) == 0x000038, "Member 'WIDGET_Automap_DeckElement_C_UpdateVisualState::K2Node_DynamicCast_AsGI_Single_Player' has a wrong offset!");
static_assert(offsetof(WIDGET_Automap_DeckElement_C_UpdateVisualState, K2Node_DynamicCast_bSuccess) == 0x000040, "Member 'WIDGET_Automap_DeckElement_C_UpdateVisualState::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(WIDGET_Automap_DeckElement_C_UpdateVisualState, CallFunc_GetDynamicMaterial_DynamicMaterial_2) == 0x000048, "Member 'WIDGET_Automap_DeckElement_C_UpdateVisualState::CallFunc_GetDynamicMaterial_DynamicMaterial_2' has a wrong offset!");
static_assert(offsetof(WIDGET_Automap_DeckElement_C_UpdateVisualState, CallFunc_HasVisitedLevel_Result) == 0x000050, "Member 'WIDGET_Automap_DeckElement_C_UpdateVisualState::CallFunc_HasVisitedLevel_Result' has a wrong offset!");
static_assert(offsetof(WIDGET_Automap_DeckElement_C_UpdateVisualState, CallFunc_SelectFloat_ReturnValue_1) == 0x000054, "Member 'WIDGET_Automap_DeckElement_C_UpdateVisualState::CallFunc_SelectFloat_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(WIDGET_Automap_DeckElement_C_UpdateVisualState, CallFunc_SelectFloat_ReturnValue_2) == 0x000058, "Member 'WIDGET_Automap_DeckElement_C_UpdateVisualState::CallFunc_SelectFloat_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(WIDGET_Automap_DeckElement_C_UpdateVisualState, CallFunc_GetHighlightedInactiveTextColor_Color) == 0x00005C, "Member 'WIDGET_Automap_DeckElement_C_UpdateVisualState::CallFunc_GetHighlightedInactiveTextColor_Color' has a wrong offset!");
static_assert(offsetof(WIDGET_Automap_DeckElement_C_UpdateVisualState, CallFunc_GetHighlightedActiveTextColor_Color) == 0x000060, "Member 'WIDGET_Automap_DeckElement_C_UpdateVisualState::CallFunc_GetHighlightedActiveTextColor_Color' has a wrong offset!");
static_assert(offsetof(WIDGET_Automap_DeckElement_C_UpdateVisualState, CallFunc_GetInactiveTextColor_Color) == 0x000064, "Member 'WIDGET_Automap_DeckElement_C_UpdateVisualState::CallFunc_GetInactiveTextColor_Color' has a wrong offset!");
static_assert(offsetof(WIDGET_Automap_DeckElement_C_UpdateVisualState, K2Node_Select_Default_1) == 0x000068, "Member 'WIDGET_Automap_DeckElement_C_UpdateVisualState::K2Node_Select_Default_1' has a wrong offset!");
static_assert(offsetof(WIDGET_Automap_DeckElement_C_UpdateVisualState, CallFunc_GetActiveTextColor_Color) == 0x00006C, "Member 'WIDGET_Automap_DeckElement_C_UpdateVisualState::CallFunc_GetActiveTextColor_Color' has a wrong offset!");
static_assert(offsetof(WIDGET_Automap_DeckElement_C_UpdateVisualState, K2Node_Select_Default_2) == 0x000070, "Member 'WIDGET_Automap_DeckElement_C_UpdateVisualState::K2Node_Select_Default_2' has a wrong offset!");
static_assert(offsetof(WIDGET_Automap_DeckElement_C_UpdateVisualState, K2Node_Select_Default_3) == 0x000074, "Member 'WIDGET_Automap_DeckElement_C_UpdateVisualState::K2Node_Select_Default_3' has a wrong offset!");
static_assert(offsetof(WIDGET_Automap_DeckElement_C_UpdateVisualState, K2Node_Select_Default_4) == 0x000078, "Member 'WIDGET_Automap_DeckElement_C_UpdateVisualState::K2Node_Select_Default_4' has a wrong offset!");

// Function WIDGET_Automap_DeckElement.WIDGET_Automap_DeckElement_C.GetActiveTextColor
// 0x0008 (0x0008 - 0x0000)
struct WIDGET_Automap_DeckElement_C_GetActiveTextColor final
{
public:
	struct FColor                                 Color;                                             // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FColor                                 CallFunc_GetMeshUIColor_Color;                     // 0x0004(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(WIDGET_Automap_DeckElement_C_GetActiveTextColor) == 0x000004, "Wrong alignment on WIDGET_Automap_DeckElement_C_GetActiveTextColor");
static_assert(sizeof(WIDGET_Automap_DeckElement_C_GetActiveTextColor) == 0x000008, "Wrong size on WIDGET_Automap_DeckElement_C_GetActiveTextColor");
static_assert(offsetof(WIDGET_Automap_DeckElement_C_GetActiveTextColor, Color) == 0x000000, "Member 'WIDGET_Automap_DeckElement_C_GetActiveTextColor::Color' has a wrong offset!");
static_assert(offsetof(WIDGET_Automap_DeckElement_C_GetActiveTextColor, CallFunc_GetMeshUIColor_Color) == 0x000004, "Member 'WIDGET_Automap_DeckElement_C_GetActiveTextColor::CallFunc_GetMeshUIColor_Color' has a wrong offset!");

// Function WIDGET_Automap_DeckElement.WIDGET_Automap_DeckElement_C.GetInactiveTextColor
// 0x0008 (0x0008 - 0x0000)
struct WIDGET_Automap_DeckElement_C_GetInactiveTextColor final
{
public:
	struct FColor                                 Color;                                             // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FColor                                 CallFunc_GetMeshUIColor_Color;                     // 0x0004(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(WIDGET_Automap_DeckElement_C_GetInactiveTextColor) == 0x000004, "Wrong alignment on WIDGET_Automap_DeckElement_C_GetInactiveTextColor");
static_assert(sizeof(WIDGET_Automap_DeckElement_C_GetInactiveTextColor) == 0x000008, "Wrong size on WIDGET_Automap_DeckElement_C_GetInactiveTextColor");
static_assert(offsetof(WIDGET_Automap_DeckElement_C_GetInactiveTextColor, Color) == 0x000000, "Member 'WIDGET_Automap_DeckElement_C_GetInactiveTextColor::Color' has a wrong offset!");
static_assert(offsetof(WIDGET_Automap_DeckElement_C_GetInactiveTextColor, CallFunc_GetMeshUIColor_Color) == 0x000004, "Member 'WIDGET_Automap_DeckElement_C_GetInactiveTextColor::CallFunc_GetMeshUIColor_Color' has a wrong offset!");

// Function WIDGET_Automap_DeckElement.WIDGET_Automap_DeckElement_C.GetUnvisitedTextColor
// 0x0040 (0x0040 - 0x0000)
struct WIDGET_Automap_DeckElement_C_GetUnvisitedTextColor final
{
public:
	struct FColor                                 Color;                                             // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FColor                                 CallFunc_GetMeshUIColor_Color;                     // 0x0004(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FColor                                 CallFunc_GetMeshUIColor_Color_1;                   // 0x0008(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           CallFunc_Conv_ColorToLinearColor_ReturnValue;      // 0x000C(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           CallFunc_Conv_ColorToLinearColor_ReturnValue_1;    // 0x001C(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           CallFunc_LinearColorLerp_ReturnValue;              // 0x002C(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FColor                                 CallFunc_Conv_LinearColorToColor_ReturnValue;      // 0x003C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(WIDGET_Automap_DeckElement_C_GetUnvisitedTextColor) == 0x000004, "Wrong alignment on WIDGET_Automap_DeckElement_C_GetUnvisitedTextColor");
static_assert(sizeof(WIDGET_Automap_DeckElement_C_GetUnvisitedTextColor) == 0x000040, "Wrong size on WIDGET_Automap_DeckElement_C_GetUnvisitedTextColor");
static_assert(offsetof(WIDGET_Automap_DeckElement_C_GetUnvisitedTextColor, Color) == 0x000000, "Member 'WIDGET_Automap_DeckElement_C_GetUnvisitedTextColor::Color' has a wrong offset!");
static_assert(offsetof(WIDGET_Automap_DeckElement_C_GetUnvisitedTextColor, CallFunc_GetMeshUIColor_Color) == 0x000004, "Member 'WIDGET_Automap_DeckElement_C_GetUnvisitedTextColor::CallFunc_GetMeshUIColor_Color' has a wrong offset!");
static_assert(offsetof(WIDGET_Automap_DeckElement_C_GetUnvisitedTextColor, CallFunc_GetMeshUIColor_Color_1) == 0x000008, "Member 'WIDGET_Automap_DeckElement_C_GetUnvisitedTextColor::CallFunc_GetMeshUIColor_Color_1' has a wrong offset!");
static_assert(offsetof(WIDGET_Automap_DeckElement_C_GetUnvisitedTextColor, CallFunc_Conv_ColorToLinearColor_ReturnValue) == 0x00000C, "Member 'WIDGET_Automap_DeckElement_C_GetUnvisitedTextColor::CallFunc_Conv_ColorToLinearColor_ReturnValue' has a wrong offset!");
static_assert(offsetof(WIDGET_Automap_DeckElement_C_GetUnvisitedTextColor, CallFunc_Conv_ColorToLinearColor_ReturnValue_1) == 0x00001C, "Member 'WIDGET_Automap_DeckElement_C_GetUnvisitedTextColor::CallFunc_Conv_ColorToLinearColor_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(WIDGET_Automap_DeckElement_C_GetUnvisitedTextColor, CallFunc_LinearColorLerp_ReturnValue) == 0x00002C, "Member 'WIDGET_Automap_DeckElement_C_GetUnvisitedTextColor::CallFunc_LinearColorLerp_ReturnValue' has a wrong offset!");
static_assert(offsetof(WIDGET_Automap_DeckElement_C_GetUnvisitedTextColor, CallFunc_Conv_LinearColorToColor_ReturnValue) == 0x00003C, "Member 'WIDGET_Automap_DeckElement_C_GetUnvisitedTextColor::CallFunc_Conv_LinearColorToColor_ReturnValue' has a wrong offset!");

// Function WIDGET_Automap_DeckElement.WIDGET_Automap_DeckElement_C.GetHighlightedActiveTextColor
// 0x0008 (0x0008 - 0x0000)
struct WIDGET_Automap_DeckElement_C_GetHighlightedActiveTextColor final
{
public:
	struct FColor                                 Color;                                             // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FColor                                 CallFunc_GetMeshUIColor_Color;                     // 0x0004(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(WIDGET_Automap_DeckElement_C_GetHighlightedActiveTextColor) == 0x000004, "Wrong alignment on WIDGET_Automap_DeckElement_C_GetHighlightedActiveTextColor");
static_assert(sizeof(WIDGET_Automap_DeckElement_C_GetHighlightedActiveTextColor) == 0x000008, "Wrong size on WIDGET_Automap_DeckElement_C_GetHighlightedActiveTextColor");
static_assert(offsetof(WIDGET_Automap_DeckElement_C_GetHighlightedActiveTextColor, Color) == 0x000000, "Member 'WIDGET_Automap_DeckElement_C_GetHighlightedActiveTextColor::Color' has a wrong offset!");
static_assert(offsetof(WIDGET_Automap_DeckElement_C_GetHighlightedActiveTextColor, CallFunc_GetMeshUIColor_Color) == 0x000004, "Member 'WIDGET_Automap_DeckElement_C_GetHighlightedActiveTextColor::CallFunc_GetMeshUIColor_Color' has a wrong offset!");

// Function WIDGET_Automap_DeckElement.WIDGET_Automap_DeckElement_C.GetHighlightedInactiveTextColor
// 0x0008 (0x0008 - 0x0000)
struct WIDGET_Automap_DeckElement_C_GetHighlightedInactiveTextColor final
{
public:
	struct FColor                                 Color;                                             // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FColor                                 CallFunc_GetMeshUIColor_Color;                     // 0x0004(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(WIDGET_Automap_DeckElement_C_GetHighlightedInactiveTextColor) == 0x000004, "Wrong alignment on WIDGET_Automap_DeckElement_C_GetHighlightedInactiveTextColor");
static_assert(sizeof(WIDGET_Automap_DeckElement_C_GetHighlightedInactiveTextColor) == 0x000008, "Wrong size on WIDGET_Automap_DeckElement_C_GetHighlightedInactiveTextColor");
static_assert(offsetof(WIDGET_Automap_DeckElement_C_GetHighlightedInactiveTextColor, Color) == 0x000000, "Member 'WIDGET_Automap_DeckElement_C_GetHighlightedInactiveTextColor::Color' has a wrong offset!");
static_assert(offsetof(WIDGET_Automap_DeckElement_C_GetHighlightedInactiveTextColor, CallFunc_GetMeshUIColor_Color) == 0x000004, "Member 'WIDGET_Automap_DeckElement_C_GetHighlightedInactiveTextColor::CallFunc_GetMeshUIColor_Color' has a wrong offset!");

// Function WIDGET_Automap_DeckElement.WIDGET_Automap_DeckElement_C.UpdateWaypointIconColor
// 0x0008 (0x0008 - 0x0000)
struct WIDGET_Automap_DeckElement_C_UpdateWaypointIconColor final
{
public:
	class UMaterialInstanceDynamic*               CallFunc_ConvertToDynamicMaterialInstance_ReturnValue; // 0x0000(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(WIDGET_Automap_DeckElement_C_UpdateWaypointIconColor) == 0x000008, "Wrong alignment on WIDGET_Automap_DeckElement_C_UpdateWaypointIconColor");
static_assert(sizeof(WIDGET_Automap_DeckElement_C_UpdateWaypointIconColor) == 0x000008, "Wrong size on WIDGET_Automap_DeckElement_C_UpdateWaypointIconColor");
static_assert(offsetof(WIDGET_Automap_DeckElement_C_UpdateWaypointIconColor, CallFunc_ConvertToDynamicMaterialInstance_ReturnValue) == 0x000000, "Member 'WIDGET_Automap_DeckElement_C_UpdateWaypointIconColor::CallFunc_ConvertToDynamicMaterialInstance_ReturnValue' has a wrong offset!");

// Function WIDGET_Automap_DeckElement.WIDGET_Automap_DeckElement_C.GetDynamicMaterial
// 0x0018 (0x0018 - 0x0000)
struct WIDGET_Automap_DeckElement_C_GetDynamicMaterial final
{
public:
	class UMaterialInstanceDynamic*               DynamicMaterial_0;                                 // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0008(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UMaterialInstanceDynamic*               CallFunc_ConvertToDynamicMaterialInstance_ReturnValue; // 0x0010(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(WIDGET_Automap_DeckElement_C_GetDynamicMaterial) == 0x000008, "Wrong alignment on WIDGET_Automap_DeckElement_C_GetDynamicMaterial");
static_assert(sizeof(WIDGET_Automap_DeckElement_C_GetDynamicMaterial) == 0x000018, "Wrong size on WIDGET_Automap_DeckElement_C_GetDynamicMaterial");
static_assert(offsetof(WIDGET_Automap_DeckElement_C_GetDynamicMaterial, DynamicMaterial_0) == 0x000000, "Member 'WIDGET_Automap_DeckElement_C_GetDynamicMaterial::DynamicMaterial_0' has a wrong offset!");
static_assert(offsetof(WIDGET_Automap_DeckElement_C_GetDynamicMaterial, CallFunc_IsValid_ReturnValue) == 0x000008, "Member 'WIDGET_Automap_DeckElement_C_GetDynamicMaterial::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(WIDGET_Automap_DeckElement_C_GetDynamicMaterial, CallFunc_ConvertToDynamicMaterialInstance_ReturnValue) == 0x000010, "Member 'WIDGET_Automap_DeckElement_C_GetDynamicMaterial::CallFunc_ConvertToDynamicMaterialInstance_ReturnValue' has a wrong offset!");

// Function WIDGET_Automap_DeckElement.WIDGET_Automap_DeckElement_C.LoadScanData
// 0x0160 (0x0160 - 0x0000)
struct WIDGET_Automap_DeckElement_C_LoadScanData final
{
public:
	struct FVector                                CenterLocation;                                    // 0x0000(0x000C)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class USceneCaptureComponent2D*               CaptureComponent;                                  // 0x0010(0x0008)(Edit, BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UCOMP_VoxelScanner_C*                   ScannerComponent;                                  // 0x0018(0x0008)(Edit, BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class APAWN_Hacker_Implant_C*                 HackerPawn;                                        // 0x0020(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FName                                   CallFunc_GetDeckRowName_DeckRow;                   // 0x0028(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UWIDGET_PlayerHUD_C*                    CallFunc_GetNeuralHUD_Result;                      // 0x0030(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class USceneCaptureComponent2D*               CallFunc_GetSceneCaptureComponent_ReturnValue;     // 0x0038(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_K2_GetActorLocation_ReturnValue;          // 0x0040(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector_X;                            // 0x004C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector_Y;                            // 0x0050(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector_Z;                            // 0x0054(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_K2_GetComponentLocation_ReturnValue;      // 0x0058(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_64[0x4];                                       // 0x0064(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UVoxelScannerMeshComponent*             CallFunc_GetProceduralLevelMeshComponent_ReturnValue; // 0x0068(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector_X_1;                          // 0x0070(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector_Y_1;                          // 0x0074(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector_Z_1;                          // 0x0078(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_GetComponentBounds_Origin;                // 0x007C(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_GetComponentBounds_BoxExtent;             // 0x0088(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_GetComponentBounds_SphereRadius;          // 0x0094(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_MakeVector_ReturnValue;                   // 0x0098(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FHitResult                             CallFunc_K2_SetWorldLocation_SweepHitResult;       // 0x00A4(0x0088)(IsPlainOldData, NoDestructor, ContainsInstancedReference)
	class FName                                   CallFunc_GetDeckRowName_DeckRow_1;                 // 0x012C(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_DoLevelInstancesShareScanData_ReturnValue; // 0x0134(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_135[0x3];                                      // 0x0135(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                CallFunc_MakeVector_ReturnValue_1;                 // 0x0138(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_LoadScanDataForLevelIntoInstance_ReturnValue; // 0x0144(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_145[0x3];                                      // 0x0145(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class APawn*                                  CallFunc_GetPlayerPawn_ReturnValue;                // 0x0148(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class APAWN_Hacker_Implant_C*                 K2Node_DynamicCast_AsPAWN_Hacker_Implant;          // 0x0150(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0158(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(WIDGET_Automap_DeckElement_C_LoadScanData) == 0x000008, "Wrong alignment on WIDGET_Automap_DeckElement_C_LoadScanData");
static_assert(sizeof(WIDGET_Automap_DeckElement_C_LoadScanData) == 0x000160, "Wrong size on WIDGET_Automap_DeckElement_C_LoadScanData");
static_assert(offsetof(WIDGET_Automap_DeckElement_C_LoadScanData, CenterLocation) == 0x000000, "Member 'WIDGET_Automap_DeckElement_C_LoadScanData::CenterLocation' has a wrong offset!");
static_assert(offsetof(WIDGET_Automap_DeckElement_C_LoadScanData, CaptureComponent) == 0x000010, "Member 'WIDGET_Automap_DeckElement_C_LoadScanData::CaptureComponent' has a wrong offset!");
static_assert(offsetof(WIDGET_Automap_DeckElement_C_LoadScanData, ScannerComponent) == 0x000018, "Member 'WIDGET_Automap_DeckElement_C_LoadScanData::ScannerComponent' has a wrong offset!");
static_assert(offsetof(WIDGET_Automap_DeckElement_C_LoadScanData, HackerPawn) == 0x000020, "Member 'WIDGET_Automap_DeckElement_C_LoadScanData::HackerPawn' has a wrong offset!");
static_assert(offsetof(WIDGET_Automap_DeckElement_C_LoadScanData, CallFunc_GetDeckRowName_DeckRow) == 0x000028, "Member 'WIDGET_Automap_DeckElement_C_LoadScanData::CallFunc_GetDeckRowName_DeckRow' has a wrong offset!");
static_assert(offsetof(WIDGET_Automap_DeckElement_C_LoadScanData, CallFunc_GetNeuralHUD_Result) == 0x000030, "Member 'WIDGET_Automap_DeckElement_C_LoadScanData::CallFunc_GetNeuralHUD_Result' has a wrong offset!");
static_assert(offsetof(WIDGET_Automap_DeckElement_C_LoadScanData, CallFunc_GetSceneCaptureComponent_ReturnValue) == 0x000038, "Member 'WIDGET_Automap_DeckElement_C_LoadScanData::CallFunc_GetSceneCaptureComponent_ReturnValue' has a wrong offset!");
static_assert(offsetof(WIDGET_Automap_DeckElement_C_LoadScanData, CallFunc_K2_GetActorLocation_ReturnValue) == 0x000040, "Member 'WIDGET_Automap_DeckElement_C_LoadScanData::CallFunc_K2_GetActorLocation_ReturnValue' has a wrong offset!");
static_assert(offsetof(WIDGET_Automap_DeckElement_C_LoadScanData, CallFunc_BreakVector_X) == 0x00004C, "Member 'WIDGET_Automap_DeckElement_C_LoadScanData::CallFunc_BreakVector_X' has a wrong offset!");
static_assert(offsetof(WIDGET_Automap_DeckElement_C_LoadScanData, CallFunc_BreakVector_Y) == 0x000050, "Member 'WIDGET_Automap_DeckElement_C_LoadScanData::CallFunc_BreakVector_Y' has a wrong offset!");
static_assert(offsetof(WIDGET_Automap_DeckElement_C_LoadScanData, CallFunc_BreakVector_Z) == 0x000054, "Member 'WIDGET_Automap_DeckElement_C_LoadScanData::CallFunc_BreakVector_Z' has a wrong offset!");
static_assert(offsetof(WIDGET_Automap_DeckElement_C_LoadScanData, CallFunc_K2_GetComponentLocation_ReturnValue) == 0x000058, "Member 'WIDGET_Automap_DeckElement_C_LoadScanData::CallFunc_K2_GetComponentLocation_ReturnValue' has a wrong offset!");
static_assert(offsetof(WIDGET_Automap_DeckElement_C_LoadScanData, CallFunc_GetProceduralLevelMeshComponent_ReturnValue) == 0x000068, "Member 'WIDGET_Automap_DeckElement_C_LoadScanData::CallFunc_GetProceduralLevelMeshComponent_ReturnValue' has a wrong offset!");
static_assert(offsetof(WIDGET_Automap_DeckElement_C_LoadScanData, CallFunc_BreakVector_X_1) == 0x000070, "Member 'WIDGET_Automap_DeckElement_C_LoadScanData::CallFunc_BreakVector_X_1' has a wrong offset!");
static_assert(offsetof(WIDGET_Automap_DeckElement_C_LoadScanData, CallFunc_BreakVector_Y_1) == 0x000074, "Member 'WIDGET_Automap_DeckElement_C_LoadScanData::CallFunc_BreakVector_Y_1' has a wrong offset!");
static_assert(offsetof(WIDGET_Automap_DeckElement_C_LoadScanData, CallFunc_BreakVector_Z_1) == 0x000078, "Member 'WIDGET_Automap_DeckElement_C_LoadScanData::CallFunc_BreakVector_Z_1' has a wrong offset!");
static_assert(offsetof(WIDGET_Automap_DeckElement_C_LoadScanData, CallFunc_GetComponentBounds_Origin) == 0x00007C, "Member 'WIDGET_Automap_DeckElement_C_LoadScanData::CallFunc_GetComponentBounds_Origin' has a wrong offset!");
static_assert(offsetof(WIDGET_Automap_DeckElement_C_LoadScanData, CallFunc_GetComponentBounds_BoxExtent) == 0x000088, "Member 'WIDGET_Automap_DeckElement_C_LoadScanData::CallFunc_GetComponentBounds_BoxExtent' has a wrong offset!");
static_assert(offsetof(WIDGET_Automap_DeckElement_C_LoadScanData, CallFunc_GetComponentBounds_SphereRadius) == 0x000094, "Member 'WIDGET_Automap_DeckElement_C_LoadScanData::CallFunc_GetComponentBounds_SphereRadius' has a wrong offset!");
static_assert(offsetof(WIDGET_Automap_DeckElement_C_LoadScanData, CallFunc_MakeVector_ReturnValue) == 0x000098, "Member 'WIDGET_Automap_DeckElement_C_LoadScanData::CallFunc_MakeVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(WIDGET_Automap_DeckElement_C_LoadScanData, CallFunc_K2_SetWorldLocation_SweepHitResult) == 0x0000A4, "Member 'WIDGET_Automap_DeckElement_C_LoadScanData::CallFunc_K2_SetWorldLocation_SweepHitResult' has a wrong offset!");
static_assert(offsetof(WIDGET_Automap_DeckElement_C_LoadScanData, CallFunc_GetDeckRowName_DeckRow_1) == 0x00012C, "Member 'WIDGET_Automap_DeckElement_C_LoadScanData::CallFunc_GetDeckRowName_DeckRow_1' has a wrong offset!");
static_assert(offsetof(WIDGET_Automap_DeckElement_C_LoadScanData, CallFunc_DoLevelInstancesShareScanData_ReturnValue) == 0x000134, "Member 'WIDGET_Automap_DeckElement_C_LoadScanData::CallFunc_DoLevelInstancesShareScanData_ReturnValue' has a wrong offset!");
static_assert(offsetof(WIDGET_Automap_DeckElement_C_LoadScanData, CallFunc_MakeVector_ReturnValue_1) == 0x000138, "Member 'WIDGET_Automap_DeckElement_C_LoadScanData::CallFunc_MakeVector_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(WIDGET_Automap_DeckElement_C_LoadScanData, CallFunc_LoadScanDataForLevelIntoInstance_ReturnValue) == 0x000144, "Member 'WIDGET_Automap_DeckElement_C_LoadScanData::CallFunc_LoadScanDataForLevelIntoInstance_ReturnValue' has a wrong offset!");
static_assert(offsetof(WIDGET_Automap_DeckElement_C_LoadScanData, CallFunc_GetPlayerPawn_ReturnValue) == 0x000148, "Member 'WIDGET_Automap_DeckElement_C_LoadScanData::CallFunc_GetPlayerPawn_ReturnValue' has a wrong offset!");
static_assert(offsetof(WIDGET_Automap_DeckElement_C_LoadScanData, K2Node_DynamicCast_AsPAWN_Hacker_Implant) == 0x000150, "Member 'WIDGET_Automap_DeckElement_C_LoadScanData::K2Node_DynamicCast_AsPAWN_Hacker_Implant' has a wrong offset!");
static_assert(offsetof(WIDGET_Automap_DeckElement_C_LoadScanData, K2Node_DynamicCast_bSuccess) == 0x000158, "Member 'WIDGET_Automap_DeckElement_C_LoadScanData::K2Node_DynamicCast_bSuccess' has a wrong offset!");

// Function WIDGET_Automap_DeckElement.WIDGET_Automap_DeckElement_C.GetDeckRowName
// 0x0028 (0x0028 - 0x0000)
struct WIDGET_Automap_DeckElement_C_GetDeckRowName final
{
public:
	class FName                                   DeckRow;                                           // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UGameInstance*                          CallFunc_GetGameInstance_ReturnValue;              // 0x0008(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UGI_SinglePlayer_C*                     K2Node_DynamicCast_AsGI_Single_Player;             // 0x0010(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0018(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_19[0x3];                                       // 0x0019(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   CallFunc_GetLevelNameByDeckSymbol_LevelName;       // 0x001C(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(WIDGET_Automap_DeckElement_C_GetDeckRowName) == 0x000008, "Wrong alignment on WIDGET_Automap_DeckElement_C_GetDeckRowName");
static_assert(sizeof(WIDGET_Automap_DeckElement_C_GetDeckRowName) == 0x000028, "Wrong size on WIDGET_Automap_DeckElement_C_GetDeckRowName");
static_assert(offsetof(WIDGET_Automap_DeckElement_C_GetDeckRowName, DeckRow) == 0x000000, "Member 'WIDGET_Automap_DeckElement_C_GetDeckRowName::DeckRow' has a wrong offset!");
static_assert(offsetof(WIDGET_Automap_DeckElement_C_GetDeckRowName, CallFunc_GetGameInstance_ReturnValue) == 0x000008, "Member 'WIDGET_Automap_DeckElement_C_GetDeckRowName::CallFunc_GetGameInstance_ReturnValue' has a wrong offset!");
static_assert(offsetof(WIDGET_Automap_DeckElement_C_GetDeckRowName, K2Node_DynamicCast_AsGI_Single_Player) == 0x000010, "Member 'WIDGET_Automap_DeckElement_C_GetDeckRowName::K2Node_DynamicCast_AsGI_Single_Player' has a wrong offset!");
static_assert(offsetof(WIDGET_Automap_DeckElement_C_GetDeckRowName, K2Node_DynamicCast_bSuccess) == 0x000018, "Member 'WIDGET_Automap_DeckElement_C_GetDeckRowName::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(WIDGET_Automap_DeckElement_C_GetDeckRowName, CallFunc_GetLevelNameByDeckSymbol_LevelName) == 0x00001C, "Member 'WIDGET_Automap_DeckElement_C_GetDeckRowName::CallFunc_GetLevelNameByDeckSymbol_LevelName' has a wrong offset!");

// Function WIDGET_Automap_DeckElement.WIDGET_Automap_DeckElement_C.GetDeckDisplayName
// 0x0108 (0x0108 - 0x0000)
struct WIDGET_Automap_DeckElement_C_GetDeckDisplayName final
{
public:
	class FText                                   DisplayName;                                       // 0x0000(0x0018)(Parm, OutParm)
	class UGameInstance*                          CallFunc_GetGameInstance_ReturnValue;              // 0x0018(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UGI_SinglePlayer_C*                     K2Node_DynamicCast_AsGI_Single_Player;             // 0x0020(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0028(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_29[0x3];                                       // 0x0029(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   CallFunc_GetLevelNameByDeckSymbol_LevelName;       // 0x002C(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_34[0x4];                                       // 0x0034(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FSTRUCT_LevelInfo                      CallFunc_GetLevelInfo_LevelInfo;                   // 0x0038(0x00C8)(HasGetValueTypeHash)
	bool                                          CallFunc_GetLevelInfo_Found;                       // 0x0100(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(WIDGET_Automap_DeckElement_C_GetDeckDisplayName) == 0x000008, "Wrong alignment on WIDGET_Automap_DeckElement_C_GetDeckDisplayName");
static_assert(sizeof(WIDGET_Automap_DeckElement_C_GetDeckDisplayName) == 0x000108, "Wrong size on WIDGET_Automap_DeckElement_C_GetDeckDisplayName");
static_assert(offsetof(WIDGET_Automap_DeckElement_C_GetDeckDisplayName, DisplayName) == 0x000000, "Member 'WIDGET_Automap_DeckElement_C_GetDeckDisplayName::DisplayName' has a wrong offset!");
static_assert(offsetof(WIDGET_Automap_DeckElement_C_GetDeckDisplayName, CallFunc_GetGameInstance_ReturnValue) == 0x000018, "Member 'WIDGET_Automap_DeckElement_C_GetDeckDisplayName::CallFunc_GetGameInstance_ReturnValue' has a wrong offset!");
static_assert(offsetof(WIDGET_Automap_DeckElement_C_GetDeckDisplayName, K2Node_DynamicCast_AsGI_Single_Player) == 0x000020, "Member 'WIDGET_Automap_DeckElement_C_GetDeckDisplayName::K2Node_DynamicCast_AsGI_Single_Player' has a wrong offset!");
static_assert(offsetof(WIDGET_Automap_DeckElement_C_GetDeckDisplayName, K2Node_DynamicCast_bSuccess) == 0x000028, "Member 'WIDGET_Automap_DeckElement_C_GetDeckDisplayName::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(WIDGET_Automap_DeckElement_C_GetDeckDisplayName, CallFunc_GetLevelNameByDeckSymbol_LevelName) == 0x00002C, "Member 'WIDGET_Automap_DeckElement_C_GetDeckDisplayName::CallFunc_GetLevelNameByDeckSymbol_LevelName' has a wrong offset!");
static_assert(offsetof(WIDGET_Automap_DeckElement_C_GetDeckDisplayName, CallFunc_GetLevelInfo_LevelInfo) == 0x000038, "Member 'WIDGET_Automap_DeckElement_C_GetDeckDisplayName::CallFunc_GetLevelInfo_LevelInfo' has a wrong offset!");
static_assert(offsetof(WIDGET_Automap_DeckElement_C_GetDeckDisplayName, CallFunc_GetLevelInfo_Found) == 0x000100, "Member 'WIDGET_Automap_DeckElement_C_GetDeckDisplayName::CallFunc_GetLevelInfo_Found' has a wrong offset!");

// Function WIDGET_Automap_DeckElement.WIDGET_Automap_DeckElement_C.SetCurrentDeckSelected
// 0x0001 (0x0001 - 0x0000)
struct WIDGET_Automap_DeckElement_C_SetCurrentDeckSelected final
{
public:
	bool                                          IsSelected;                                        // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(WIDGET_Automap_DeckElement_C_SetCurrentDeckSelected) == 0x000001, "Wrong alignment on WIDGET_Automap_DeckElement_C_SetCurrentDeckSelected");
static_assert(sizeof(WIDGET_Automap_DeckElement_C_SetCurrentDeckSelected) == 0x000001, "Wrong size on WIDGET_Automap_DeckElement_C_SetCurrentDeckSelected");
static_assert(offsetof(WIDGET_Automap_DeckElement_C_SetCurrentDeckSelected, IsSelected) == 0x000000, "Member 'WIDGET_Automap_DeckElement_C_SetCurrentDeckSelected::IsSelected' has a wrong offset!");

// Function WIDGET_Automap_DeckElement.WIDGET_Automap_DeckElement_C.GetHighlightedUnvisitedTextColor
// 0x0040 (0x0040 - 0x0000)
struct WIDGET_Automap_DeckElement_C_GetHighlightedUnvisitedTextColor final
{
public:
	struct FColor                                 Color;                                             // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FColor                                 CallFunc_GetMeshUIColor_Color;                     // 0x0004(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FColor                                 CallFunc_GetMeshUIColor_Color_1;                   // 0x0008(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           CallFunc_Conv_ColorToLinearColor_ReturnValue;      // 0x000C(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           CallFunc_Conv_ColorToLinearColor_ReturnValue_1;    // 0x001C(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           CallFunc_LinearColorLerp_ReturnValue;              // 0x002C(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FColor                                 CallFunc_Conv_LinearColorToColor_ReturnValue;      // 0x003C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(WIDGET_Automap_DeckElement_C_GetHighlightedUnvisitedTextColor) == 0x000004, "Wrong alignment on WIDGET_Automap_DeckElement_C_GetHighlightedUnvisitedTextColor");
static_assert(sizeof(WIDGET_Automap_DeckElement_C_GetHighlightedUnvisitedTextColor) == 0x000040, "Wrong size on WIDGET_Automap_DeckElement_C_GetHighlightedUnvisitedTextColor");
static_assert(offsetof(WIDGET_Automap_DeckElement_C_GetHighlightedUnvisitedTextColor, Color) == 0x000000, "Member 'WIDGET_Automap_DeckElement_C_GetHighlightedUnvisitedTextColor::Color' has a wrong offset!");
static_assert(offsetof(WIDGET_Automap_DeckElement_C_GetHighlightedUnvisitedTextColor, CallFunc_GetMeshUIColor_Color) == 0x000004, "Member 'WIDGET_Automap_DeckElement_C_GetHighlightedUnvisitedTextColor::CallFunc_GetMeshUIColor_Color' has a wrong offset!");
static_assert(offsetof(WIDGET_Automap_DeckElement_C_GetHighlightedUnvisitedTextColor, CallFunc_GetMeshUIColor_Color_1) == 0x000008, "Member 'WIDGET_Automap_DeckElement_C_GetHighlightedUnvisitedTextColor::CallFunc_GetMeshUIColor_Color_1' has a wrong offset!");
static_assert(offsetof(WIDGET_Automap_DeckElement_C_GetHighlightedUnvisitedTextColor, CallFunc_Conv_ColorToLinearColor_ReturnValue) == 0x00000C, "Member 'WIDGET_Automap_DeckElement_C_GetHighlightedUnvisitedTextColor::CallFunc_Conv_ColorToLinearColor_ReturnValue' has a wrong offset!");
static_assert(offsetof(WIDGET_Automap_DeckElement_C_GetHighlightedUnvisitedTextColor, CallFunc_Conv_ColorToLinearColor_ReturnValue_1) == 0x00001C, "Member 'WIDGET_Automap_DeckElement_C_GetHighlightedUnvisitedTextColor::CallFunc_Conv_ColorToLinearColor_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(WIDGET_Automap_DeckElement_C_GetHighlightedUnvisitedTextColor, CallFunc_LinearColorLerp_ReturnValue) == 0x00002C, "Member 'WIDGET_Automap_DeckElement_C_GetHighlightedUnvisitedTextColor::CallFunc_LinearColorLerp_ReturnValue' has a wrong offset!");
static_assert(offsetof(WIDGET_Automap_DeckElement_C_GetHighlightedUnvisitedTextColor, CallFunc_Conv_LinearColorToColor_ReturnValue) == 0x00003C, "Member 'WIDGET_Automap_DeckElement_C_GetHighlightedUnvisitedTextColor::CallFunc_Conv_LinearColorToColor_ReturnValue' has a wrong offset!");

// Function WIDGET_Automap_DeckElement.WIDGET_Automap_DeckElement_C.ShowMissionWaypointIcon
// 0x0005 (0x0005 - 0x0000)
struct WIDGET_Automap_DeckElement_C_ShowMissionWaypointIcon final
{
public:
	bool                                          State;                                             // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Temp_bool_Variable;                                // 0x0001(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	ESlateVisibility                              Temp_byte_Variable;                                // 0x0002(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ESlateVisibility                              Temp_byte_Variable_1;                              // 0x0003(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ESlateVisibility                              K2Node_Select_Default;                             // 0x0004(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(WIDGET_Automap_DeckElement_C_ShowMissionWaypointIcon) == 0x000001, "Wrong alignment on WIDGET_Automap_DeckElement_C_ShowMissionWaypointIcon");
static_assert(sizeof(WIDGET_Automap_DeckElement_C_ShowMissionWaypointIcon) == 0x000005, "Wrong size on WIDGET_Automap_DeckElement_C_ShowMissionWaypointIcon");
static_assert(offsetof(WIDGET_Automap_DeckElement_C_ShowMissionWaypointIcon, State) == 0x000000, "Member 'WIDGET_Automap_DeckElement_C_ShowMissionWaypointIcon::State' has a wrong offset!");
static_assert(offsetof(WIDGET_Automap_DeckElement_C_ShowMissionWaypointIcon, Temp_bool_Variable) == 0x000001, "Member 'WIDGET_Automap_DeckElement_C_ShowMissionWaypointIcon::Temp_bool_Variable' has a wrong offset!");
static_assert(offsetof(WIDGET_Automap_DeckElement_C_ShowMissionWaypointIcon, Temp_byte_Variable) == 0x000002, "Member 'WIDGET_Automap_DeckElement_C_ShowMissionWaypointIcon::Temp_byte_Variable' has a wrong offset!");
static_assert(offsetof(WIDGET_Automap_DeckElement_C_ShowMissionWaypointIcon, Temp_byte_Variable_1) == 0x000003, "Member 'WIDGET_Automap_DeckElement_C_ShowMissionWaypointIcon::Temp_byte_Variable_1' has a wrong offset!");
static_assert(offsetof(WIDGET_Automap_DeckElement_C_ShowMissionWaypointIcon, K2Node_Select_Default) == 0x000004, "Member 'WIDGET_Automap_DeckElement_C_ShowMissionWaypointIcon::K2Node_Select_Default' has a wrong offset!");

}

