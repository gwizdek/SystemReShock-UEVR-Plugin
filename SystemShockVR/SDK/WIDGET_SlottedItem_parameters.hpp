#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: WIDGET_SlottedItem

#include "Basic.hpp"

#include "STRUCT_WeaponMode_structs.hpp"
#include "Engine_structs.hpp"


namespace SDK::Params
{

// Function WIDGET_SlottedItem.WIDGET_SlottedItem_C.SetItem
// 0x0058 (0x0058 - 0x0000)
struct WIDGET_SlottedItem_C_SetItem final
{
public:
	class UITEM_Base_C*                           Item;                                              // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UITEM_WeaponBase_C*                     SlottedWeapon;                                     // 0x0008(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TDelegate<void(class UITEM_WeaponBase_C* Weapon, class UITEM_WeaponModKit_Base_C* ModKit)> K2Node_CreateDelegate_OutputDelegate;              // 0x0010(0x0010)(ZeroConstructor, NoDestructor)
	class UITEM_ProjectileWeapon_Base_C*          K2Node_DynamicCast_AsITEM_Projectile_Weapon_Base;  // 0x0020(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0028(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_29[0x3];                                       // 0x0029(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	TDelegate<void()>                             K2Node_CreateDelegate_OutputDelegate_1;            // 0x002C(0x0010)(ZeroConstructor, NoDestructor)
	uint8                                         Pad_3C[0x4];                                       // 0x003C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UITEM_WeaponBase_C*                     K2Node_DynamicCast_AsITEM_Weapon_Base;             // 0x0040(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess_1;                     // 0x0048(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_49[0x3];                                       // 0x0049(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_GetCount_Result;                          // 0x004C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Greater_IntInt_ReturnValue;               // 0x0050(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(WIDGET_SlottedItem_C_SetItem) == 0x000008, "Wrong alignment on WIDGET_SlottedItem_C_SetItem");
static_assert(sizeof(WIDGET_SlottedItem_C_SetItem) == 0x000058, "Wrong size on WIDGET_SlottedItem_C_SetItem");
static_assert(offsetof(WIDGET_SlottedItem_C_SetItem, Item) == 0x000000, "Member 'WIDGET_SlottedItem_C_SetItem::Item' has a wrong offset!");
static_assert(offsetof(WIDGET_SlottedItem_C_SetItem, SlottedWeapon) == 0x000008, "Member 'WIDGET_SlottedItem_C_SetItem::SlottedWeapon' has a wrong offset!");
static_assert(offsetof(WIDGET_SlottedItem_C_SetItem, K2Node_CreateDelegate_OutputDelegate) == 0x000010, "Member 'WIDGET_SlottedItem_C_SetItem::K2Node_CreateDelegate_OutputDelegate' has a wrong offset!");
static_assert(offsetof(WIDGET_SlottedItem_C_SetItem, K2Node_DynamicCast_AsITEM_Projectile_Weapon_Base) == 0x000020, "Member 'WIDGET_SlottedItem_C_SetItem::K2Node_DynamicCast_AsITEM_Projectile_Weapon_Base' has a wrong offset!");
static_assert(offsetof(WIDGET_SlottedItem_C_SetItem, K2Node_DynamicCast_bSuccess) == 0x000028, "Member 'WIDGET_SlottedItem_C_SetItem::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(WIDGET_SlottedItem_C_SetItem, K2Node_CreateDelegate_OutputDelegate_1) == 0x00002C, "Member 'WIDGET_SlottedItem_C_SetItem::K2Node_CreateDelegate_OutputDelegate_1' has a wrong offset!");
static_assert(offsetof(WIDGET_SlottedItem_C_SetItem, K2Node_DynamicCast_AsITEM_Weapon_Base) == 0x000040, "Member 'WIDGET_SlottedItem_C_SetItem::K2Node_DynamicCast_AsITEM_Weapon_Base' has a wrong offset!");
static_assert(offsetof(WIDGET_SlottedItem_C_SetItem, K2Node_DynamicCast_bSuccess_1) == 0x000048, "Member 'WIDGET_SlottedItem_C_SetItem::K2Node_DynamicCast_bSuccess_1' has a wrong offset!");
static_assert(offsetof(WIDGET_SlottedItem_C_SetItem, CallFunc_GetCount_Result) == 0x00004C, "Member 'WIDGET_SlottedItem_C_SetItem::CallFunc_GetCount_Result' has a wrong offset!");
static_assert(offsetof(WIDGET_SlottedItem_C_SetItem, CallFunc_Greater_IntInt_ReturnValue) == 0x000050, "Member 'WIDGET_SlottedItem_C_SetItem::CallFunc_Greater_IntInt_ReturnValue' has a wrong offset!");

// Function WIDGET_SlottedItem.WIDGET_SlottedItem_C.SetHotkeyText
// 0x0020 (0x0020 - 0x0000)
struct WIDGET_SlottedItem_C_SetHotkeyText final
{
public:
	class FText                                   Text;                                              // 0x0000(0x0018)(BlueprintVisible, BlueprintReadOnly, Parm)
	bool                                          CallFunc_TextIsEmpty_ReturnValue;                  // 0x0018(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Not_PreBool_ReturnValue;                  // 0x0019(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(WIDGET_SlottedItem_C_SetHotkeyText) == 0x000008, "Wrong alignment on WIDGET_SlottedItem_C_SetHotkeyText");
static_assert(sizeof(WIDGET_SlottedItem_C_SetHotkeyText) == 0x000020, "Wrong size on WIDGET_SlottedItem_C_SetHotkeyText");
static_assert(offsetof(WIDGET_SlottedItem_C_SetHotkeyText, Text) == 0x000000, "Member 'WIDGET_SlottedItem_C_SetHotkeyText::Text' has a wrong offset!");
static_assert(offsetof(WIDGET_SlottedItem_C_SetHotkeyText, CallFunc_TextIsEmpty_ReturnValue) == 0x000018, "Member 'WIDGET_SlottedItem_C_SetHotkeyText::CallFunc_TextIsEmpty_ReturnValue' has a wrong offset!");
static_assert(offsetof(WIDGET_SlottedItem_C_SetHotkeyText, CallFunc_Not_PreBool_ReturnValue) == 0x000019, "Member 'WIDGET_SlottedItem_C_SetHotkeyText::CallFunc_Not_PreBool_ReturnValue' has a wrong offset!");

// Function WIDGET_SlottedItem.WIDGET_SlottedItem_C.UpdateItemCountText
// 0x0020 (0x0020 - 0x0000)
struct WIDGET_SlottedItem_C_UpdateItemCountText final
{
public:
	int32                                         CallFunc_GetCount_Result;                          // 0x0000(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   CallFunc_Conv_IntToText_ReturnValue;               // 0x0008(0x0018)()
};
static_assert(alignof(WIDGET_SlottedItem_C_UpdateItemCountText) == 0x000008, "Wrong alignment on WIDGET_SlottedItem_C_UpdateItemCountText");
static_assert(sizeof(WIDGET_SlottedItem_C_UpdateItemCountText) == 0x000020, "Wrong size on WIDGET_SlottedItem_C_UpdateItemCountText");
static_assert(offsetof(WIDGET_SlottedItem_C_UpdateItemCountText, CallFunc_GetCount_Result) == 0x000000, "Member 'WIDGET_SlottedItem_C_UpdateItemCountText::CallFunc_GetCount_Result' has a wrong offset!");
static_assert(offsetof(WIDGET_SlottedItem_C_UpdateItemCountText, CallFunc_Conv_IntToText_ReturnValue) == 0x000008, "Member 'WIDGET_SlottedItem_C_UpdateItemCountText::CallFunc_Conv_IntToText_ReturnValue' has a wrong offset!");

// Function WIDGET_SlottedItem.WIDGET_SlottedItem_C.UpdateAmmoCountText
// 0x01C8 (0x01C8 - 0x0000)
struct WIDGET_SlottedItem_C_UpdateAmmoCountText final
{
public:
	int32                                         AmmoCapacity;                                      // 0x0000(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         AmmoCount;                                         // 0x0004(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FFormatArgumentData                    K2Node_MakeStruct_FormatArgumentData;              // 0x0008(0x0040)(HasGetValueTypeHash)
	struct FFormatArgumentData                    K2Node_MakeStruct_FormatArgumentData_1;            // 0x0048(0x0040)(HasGetValueTypeHash)
	TArray<struct FFormatArgumentData>            K2Node_MakeArray_Array;                            // 0x0088(0x0010)(ReferenceParm)
	class FText                                   CallFunc_Format_ReturnValue;                       // 0x0098(0x0018)()
	class UITEM_ProjectileWeapon_Base_C*          K2Node_DynamicCast_AsITEM_Projectile_Weapon_Base;  // 0x00B0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x00B8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_B9[0x7];                                       // 0x00B9(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FSTRUCT_WeaponMode                     CallFunc_GetCurrentMode_Mode;                      // 0x00C0(0x0100)(HasGetValueTypeHash)
	int32                                         CallFunc_GetAmmoInMagazineAndChamber_Ammo;         // 0x01C0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_GetWeaponPropertyValueByType_Value;       // 0x01C4(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(WIDGET_SlottedItem_C_UpdateAmmoCountText) == 0x000008, "Wrong alignment on WIDGET_SlottedItem_C_UpdateAmmoCountText");
static_assert(sizeof(WIDGET_SlottedItem_C_UpdateAmmoCountText) == 0x0001C8, "Wrong size on WIDGET_SlottedItem_C_UpdateAmmoCountText");
static_assert(offsetof(WIDGET_SlottedItem_C_UpdateAmmoCountText, AmmoCapacity) == 0x000000, "Member 'WIDGET_SlottedItem_C_UpdateAmmoCountText::AmmoCapacity' has a wrong offset!");
static_assert(offsetof(WIDGET_SlottedItem_C_UpdateAmmoCountText, AmmoCount) == 0x000004, "Member 'WIDGET_SlottedItem_C_UpdateAmmoCountText::AmmoCount' has a wrong offset!");
static_assert(offsetof(WIDGET_SlottedItem_C_UpdateAmmoCountText, K2Node_MakeStruct_FormatArgumentData) == 0x000008, "Member 'WIDGET_SlottedItem_C_UpdateAmmoCountText::K2Node_MakeStruct_FormatArgumentData' has a wrong offset!");
static_assert(offsetof(WIDGET_SlottedItem_C_UpdateAmmoCountText, K2Node_MakeStruct_FormatArgumentData_1) == 0x000048, "Member 'WIDGET_SlottedItem_C_UpdateAmmoCountText::K2Node_MakeStruct_FormatArgumentData_1' has a wrong offset!");
static_assert(offsetof(WIDGET_SlottedItem_C_UpdateAmmoCountText, K2Node_MakeArray_Array) == 0x000088, "Member 'WIDGET_SlottedItem_C_UpdateAmmoCountText::K2Node_MakeArray_Array' has a wrong offset!");
static_assert(offsetof(WIDGET_SlottedItem_C_UpdateAmmoCountText, CallFunc_Format_ReturnValue) == 0x000098, "Member 'WIDGET_SlottedItem_C_UpdateAmmoCountText::CallFunc_Format_ReturnValue' has a wrong offset!");
static_assert(offsetof(WIDGET_SlottedItem_C_UpdateAmmoCountText, K2Node_DynamicCast_AsITEM_Projectile_Weapon_Base) == 0x0000B0, "Member 'WIDGET_SlottedItem_C_UpdateAmmoCountText::K2Node_DynamicCast_AsITEM_Projectile_Weapon_Base' has a wrong offset!");
static_assert(offsetof(WIDGET_SlottedItem_C_UpdateAmmoCountText, K2Node_DynamicCast_bSuccess) == 0x0000B8, "Member 'WIDGET_SlottedItem_C_UpdateAmmoCountText::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(WIDGET_SlottedItem_C_UpdateAmmoCountText, CallFunc_GetCurrentMode_Mode) == 0x0000C0, "Member 'WIDGET_SlottedItem_C_UpdateAmmoCountText::CallFunc_GetCurrentMode_Mode' has a wrong offset!");
static_assert(offsetof(WIDGET_SlottedItem_C_UpdateAmmoCountText, CallFunc_GetAmmoInMagazineAndChamber_Ammo) == 0x0001C0, "Member 'WIDGET_SlottedItem_C_UpdateAmmoCountText::CallFunc_GetAmmoInMagazineAndChamber_Ammo' has a wrong offset!");
static_assert(offsetof(WIDGET_SlottedItem_C_UpdateAmmoCountText, CallFunc_GetWeaponPropertyValueByType_Value) == 0x0001C4, "Member 'WIDGET_SlottedItem_C_UpdateAmmoCountText::CallFunc_GetWeaponPropertyValueByType_Value' has a wrong offset!");

// Function WIDGET_SlottedItem.WIDGET_SlottedItem_C.UpdateModkitStatus
// 0x0020 (0x0020 - 0x0000)
struct WIDGET_SlottedItem_C_UpdateModkitStatus final
{
public:
	class UITEM_WeaponBase_C*                     Weapon;                                            // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_HasInstalledAnyModKits_Result;            // 0x0008(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UMaterialInstanceDynamic*               CallFunc_ConvertToDynamicMaterialInstance_ReturnValue; // 0x0010(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0018(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsValid_ReturnValue_1;                    // 0x0019(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(WIDGET_SlottedItem_C_UpdateModkitStatus) == 0x000008, "Wrong alignment on WIDGET_SlottedItem_C_UpdateModkitStatus");
static_assert(sizeof(WIDGET_SlottedItem_C_UpdateModkitStatus) == 0x000020, "Wrong size on WIDGET_SlottedItem_C_UpdateModkitStatus");
static_assert(offsetof(WIDGET_SlottedItem_C_UpdateModkitStatus, Weapon) == 0x000000, "Member 'WIDGET_SlottedItem_C_UpdateModkitStatus::Weapon' has a wrong offset!");
static_assert(offsetof(WIDGET_SlottedItem_C_UpdateModkitStatus, CallFunc_HasInstalledAnyModKits_Result) == 0x000008, "Member 'WIDGET_SlottedItem_C_UpdateModkitStatus::CallFunc_HasInstalledAnyModKits_Result' has a wrong offset!");
static_assert(offsetof(WIDGET_SlottedItem_C_UpdateModkitStatus, CallFunc_ConvertToDynamicMaterialInstance_ReturnValue) == 0x000010, "Member 'WIDGET_SlottedItem_C_UpdateModkitStatus::CallFunc_ConvertToDynamicMaterialInstance_ReturnValue' has a wrong offset!");
static_assert(offsetof(WIDGET_SlottedItem_C_UpdateModkitStatus, CallFunc_IsValid_ReturnValue) == 0x000018, "Member 'WIDGET_SlottedItem_C_UpdateModkitStatus::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(WIDGET_SlottedItem_C_UpdateModkitStatus, CallFunc_IsValid_ReturnValue_1) == 0x000019, "Member 'WIDGET_SlottedItem_C_UpdateModkitStatus::CallFunc_IsValid_ReturnValue_1' has a wrong offset!");

// Function WIDGET_SlottedItem.WIDGET_SlottedItem_C.EVENT_OnModKitInstalled
// 0x0010 (0x0010 - 0x0000)
struct WIDGET_SlottedItem_C_EVENT_OnModKitInstalled final
{
public:
	class UITEM_WeaponBase_C*                     Weapon;                                            // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UITEM_WeaponModKit_Base_C*              ModKit;                                            // 0x0008(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(WIDGET_SlottedItem_C_EVENT_OnModKitInstalled) == 0x000008, "Wrong alignment on WIDGET_SlottedItem_C_EVENT_OnModKitInstalled");
static_assert(sizeof(WIDGET_SlottedItem_C_EVENT_OnModKitInstalled) == 0x000010, "Wrong size on WIDGET_SlottedItem_C_EVENT_OnModKitInstalled");
static_assert(offsetof(WIDGET_SlottedItem_C_EVENT_OnModKitInstalled, Weapon) == 0x000000, "Member 'WIDGET_SlottedItem_C_EVENT_OnModKitInstalled::Weapon' has a wrong offset!");
static_assert(offsetof(WIDGET_SlottedItem_C_EVENT_OnModKitInstalled, ModKit) == 0x000008, "Member 'WIDGET_SlottedItem_C_EVENT_OnModKitInstalled::ModKit' has a wrong offset!");

}

