#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: WEAPON_MagPulse

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "ITEM_ProjectileWeapon_Base_classes.hpp"


namespace SDK
{

// BlueprintGeneratedClass WEAPON_MagPulse.WEAPON_MagPulse_C
// 0x0120 (0x0670 - 0x0550)
class UWEAPON_MagPulse_C final : public UITEM_ProjectileWeapon_Base_C
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame_WEAPON_MagPulse_C;                  // 0x0550(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	TSoftObjectPtr<class UAnimMontage>            ChargeMontage;                                     // 0x0558(0x0028)(Edit, BlueprintVisible, DisableEditOnInstance, HasGetValueTypeHash)
	bool                                          HasBarrelExtension;                                // 0x0580(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         MaxChargeEnergyCost;                               // 0x0581(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         CurrentChargeCount;                                // 0x0582(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, SaveGame, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         CurrentChargeEnergy;                               // 0x0583(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, SaveGame, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         LastChargeCount;                                   // 0x0584(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_585[0x3];                                      // 0x0585(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 ApplyChargeMessage;                                // 0x0588(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, HasGetValueTypeHash)
	class UNiagaraSystem*                         CachedLoopingChargeEffect;                         // 0x0598(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UNiagaraSystem*                         CachedHandSparkEffect;                             // 0x05A0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UAnimMontage*                           CachedChargeMontage;                               // 0x05A8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UForceFeedbackEffect*                   CachedDischargeForceFeedback_C2;                   // 0x05B0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UForceFeedbackEffect*                   CachedDischargeForceFeedback_C3;                   // 0x05B8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         LastChargeEnergy;                                  // 0x05C0(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_5C1[0x7];                                      // 0x05C1(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TSoftObjectPtr<class UForceFeedbackEffect>    DischargeForceFeedback_C2;                         // 0x05C8(0x0028)(Edit, BlueprintVisible, DisableEditOnInstance, HasGetValueTypeHash)
	TSoftObjectPtr<class UForceFeedbackEffect>    DischargeForceFeedback_C3;                         // 0x05F0(0x0028)(Edit, BlueprintVisible, DisableEditOnInstance, HasGetValueTypeHash)
	class UNiagaraComponent*                      LoopingChargeEffectComponent;                      // 0x0618(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TSoftObjectPtr<class UNiagaraSystem>          LoopingChargeEffect;                               // 0x0620(0x0028)(Edit, BlueprintVisible, DisableEditOnInstance, HasGetValueTypeHash)
	TSoftObjectPtr<class UNiagaraSystem>          HandSparkEffect;                                   // 0x0648(0x0028)(Edit, BlueprintVisible, DisableEditOnInstance, HasGetValueTypeHash)

public:
	void ExecuteUbergraph_WEAPON_MagPulse(int32 EntryPoint);
	void StreamWeaponAssets();
	void StreamWeaponMontages();
	void OnLoaded_7905D5934213E96998D87D899A24F5F8(class UObject* Loaded);
	void OnLoaded_DF0330F84AD5B08E45DD94A65F5DE16A(class UObject* Loaded);
	void OnLoaded_7AC8171242E08757C012A28D2888D2EE(class UObject* Loaded);
	void OnLoaded_7CE911E0462524EB72113185AFA826F0(class UObject* Loaded);
	void OnLoaded_9B50D63949E067619A9920B4DD9E853D(class UObject* Loaded);
	void ApplyCharge();
	void ConsumeAmmo();
	void TryCharge();
	void SetListenForActionFinished(bool ShouldListen);
	void EVENT_OnActionEnded(class UCharacterAction_C* Action);
	void SetCurrentChargeCount(uint8 Count_0);
	void SetHasBarrelExtension(bool State);
	void GetChargedMode(const struct FSTRUCT_WeaponMode& Mode, struct FSTRUCT_WeaponMode* Result);
	void UpdateWeaponEmissiveStrength(bool Charged);
	void TryCreateLoopingChargeEffect();
	void TryStopLoopingChargeEffect();
	void TryCreateHandSparkEffect();
	void CycleCurrentMode(bool Previous, bool* Result);
	void CanRefillMagazine(bool* Result);
	void QueueReloading();
	void GetAmmoInChamber(int32* Ammo);
	void GetWeaponMode(int32 Index_0, struct FSTRUCT_WeaponMode* Mode);
	void CanEmptyAmmoInMagazineOrChamber(bool* Result);
	void ReceiveAnimationMessage(const class FString& Message, bool* Result);
	void UpdateMaterial(bool Glitch);
	void FireProjectile(class AActor** FiredProjectile, struct FVector* Direction);
	void EjectShell();
	void GetDischargeMontage(class UAnimMontage** DischargeAnimation);
	void GetProjectileClass(class UClass** Result);
	void InitializeProjectileDamageSettings(class ABulletProjectile_Base_C* BulletProjectileActor);
	void MoveAmmoFromChamberToMagazine();
	void OnWeaponBecameActivatable(class APAWN_SystemShockCharacter_C* Character, bool ShowImmediately);
	void ApplyAccuracyChangeAndRecoil(bool HasKickback_0);
	void PlayDischargeForceFeedback();
	void TryBeginReloading(bool* Result);
	void OnBecomeActivatable(bool* Result);
	void OnBecomeUnactivatable(bool* Result);
	void CanActivate(class APAWN_SystemShockCharacter_C* Character, bool* Result);
	void Activate(class APAWN_SystemShockCharacter_C* Character, bool* Result);

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"WEAPON_MagPulse_C">();
	}
	static class UWEAPON_MagPulse_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<UWEAPON_MagPulse_C>();
	}
};
static_assert(alignof(UWEAPON_MagPulse_C) == 0x000008, "Wrong alignment on UWEAPON_MagPulse_C");
static_assert(sizeof(UWEAPON_MagPulse_C) == 0x000670, "Wrong size on UWEAPON_MagPulse_C");
static_assert(offsetof(UWEAPON_MagPulse_C, UberGraphFrame_WEAPON_MagPulse_C) == 0x000550, "Member 'UWEAPON_MagPulse_C::UberGraphFrame_WEAPON_MagPulse_C' has a wrong offset!");
static_assert(offsetof(UWEAPON_MagPulse_C, ChargeMontage) == 0x000558, "Member 'UWEAPON_MagPulse_C::ChargeMontage' has a wrong offset!");
static_assert(offsetof(UWEAPON_MagPulse_C, HasBarrelExtension) == 0x000580, "Member 'UWEAPON_MagPulse_C::HasBarrelExtension' has a wrong offset!");
static_assert(offsetof(UWEAPON_MagPulse_C, MaxChargeEnergyCost) == 0x000581, "Member 'UWEAPON_MagPulse_C::MaxChargeEnergyCost' has a wrong offset!");
static_assert(offsetof(UWEAPON_MagPulse_C, CurrentChargeCount) == 0x000582, "Member 'UWEAPON_MagPulse_C::CurrentChargeCount' has a wrong offset!");
static_assert(offsetof(UWEAPON_MagPulse_C, CurrentChargeEnergy) == 0x000583, "Member 'UWEAPON_MagPulse_C::CurrentChargeEnergy' has a wrong offset!");
static_assert(offsetof(UWEAPON_MagPulse_C, LastChargeCount) == 0x000584, "Member 'UWEAPON_MagPulse_C::LastChargeCount' has a wrong offset!");
static_assert(offsetof(UWEAPON_MagPulse_C, ApplyChargeMessage) == 0x000588, "Member 'UWEAPON_MagPulse_C::ApplyChargeMessage' has a wrong offset!");
static_assert(offsetof(UWEAPON_MagPulse_C, CachedLoopingChargeEffect) == 0x000598, "Member 'UWEAPON_MagPulse_C::CachedLoopingChargeEffect' has a wrong offset!");
static_assert(offsetof(UWEAPON_MagPulse_C, CachedHandSparkEffect) == 0x0005A0, "Member 'UWEAPON_MagPulse_C::CachedHandSparkEffect' has a wrong offset!");
static_assert(offsetof(UWEAPON_MagPulse_C, CachedChargeMontage) == 0x0005A8, "Member 'UWEAPON_MagPulse_C::CachedChargeMontage' has a wrong offset!");
static_assert(offsetof(UWEAPON_MagPulse_C, CachedDischargeForceFeedback_C2) == 0x0005B0, "Member 'UWEAPON_MagPulse_C::CachedDischargeForceFeedback_C2' has a wrong offset!");
static_assert(offsetof(UWEAPON_MagPulse_C, CachedDischargeForceFeedback_C3) == 0x0005B8, "Member 'UWEAPON_MagPulse_C::CachedDischargeForceFeedback_C3' has a wrong offset!");
static_assert(offsetof(UWEAPON_MagPulse_C, LastChargeEnergy) == 0x0005C0, "Member 'UWEAPON_MagPulse_C::LastChargeEnergy' has a wrong offset!");
static_assert(offsetof(UWEAPON_MagPulse_C, DischargeForceFeedback_C2) == 0x0005C8, "Member 'UWEAPON_MagPulse_C::DischargeForceFeedback_C2' has a wrong offset!");
static_assert(offsetof(UWEAPON_MagPulse_C, DischargeForceFeedback_C3) == 0x0005F0, "Member 'UWEAPON_MagPulse_C::DischargeForceFeedback_C3' has a wrong offset!");
static_assert(offsetof(UWEAPON_MagPulse_C, LoopingChargeEffectComponent) == 0x000618, "Member 'UWEAPON_MagPulse_C::LoopingChargeEffectComponent' has a wrong offset!");
static_assert(offsetof(UWEAPON_MagPulse_C, LoopingChargeEffect) == 0x000620, "Member 'UWEAPON_MagPulse_C::LoopingChargeEffect' has a wrong offset!");
static_assert(offsetof(UWEAPON_MagPulse_C, HandSparkEffect) == 0x000648, "Member 'UWEAPON_MagPulse_C::HandSparkEffect' has a wrong offset!");

}

