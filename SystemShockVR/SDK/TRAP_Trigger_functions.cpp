#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: TRAP_Trigger

#include "Basic.hpp"

#include "TRAP_Trigger_classes.hpp"
#include "TRAP_Trigger_parameters.hpp"


namespace SDK
{

// Function TRAP_Trigger.TRAP_Trigger_C.ExecuteUbergraph_TRAP_Trigger
// (Final, UbergraphFunction, HasDefaults)
// Parameters:
// int32                                   EntryPoint                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ATRAP_Trigger_C::ExecuteUbergraph_TRAP_Trigger(int32 EntryPoint)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("TRAP_Trigger_C", "ExecuteUbergraph_TRAP_Trigger");

	Params::TRAP_Trigger_C_ExecuteUbergraph_TRAP_Trigger Parms{};

	Parms.EntryPoint = EntryPoint;

	UObject::ProcessEvent(Func, &Parms);
}


// Function TRAP_Trigger.TRAP_Trigger_C.BndEvt__TRAP_Trigger_TriggerVolume_K2Node_ComponentBoundEvent_1_ComponentEndOverlapSignature__DelegateSignature
// (BlueprintEvent)
// Parameters:
// class UPrimitiveComponent*              OverlappedComponent                                    (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class AActor*                           OtherActor                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class UPrimitiveComponent*              OtherComp                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// int32                                   OtherBodyIndex                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ATRAP_Trigger_C::BndEvt__TRAP_Trigger_TriggerVolume_K2Node_ComponentBoundEvent_1_ComponentEndOverlapSignature__DelegateSignature(class UPrimitiveComponent* OverlappedComponent, class AActor* OtherActor, class UPrimitiveComponent* OtherComp, int32 OtherBodyIndex)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("TRAP_Trigger_C", "BndEvt__TRAP_Trigger_TriggerVolume_K2Node_ComponentBoundEvent_1_ComponentEndOverlapSignature__DelegateSignature");

	Params::TRAP_Trigger_C_BndEvt__TRAP_Trigger_TriggerVolume_K2Node_ComponentBoundEvent_1_ComponentEndOverlapSignature__DelegateSignature Parms{};

	Parms.OverlappedComponent = OverlappedComponent;
	Parms.OtherActor = OtherActor;
	Parms.OtherComp = OtherComp;
	Parms.OtherBodyIndex = OtherBodyIndex;

	UObject::ProcessEvent(Func, &Parms);
}


// Function TRAP_Trigger.TRAP_Trigger_C.ReceiveEndPlay
// (Event, Protected, BlueprintEvent)
// Parameters:
// EEndPlayReason                          EndPlayReason                                          (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ATRAP_Trigger_C::ReceiveEndPlay(EEndPlayReason EndPlayReason)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("TRAP_Trigger_C", "ReceiveEndPlay");

	Params::TRAP_Trigger_C_ReceiveEndPlay Parms{};

	Parms.EndPlayReason = EndPlayReason;

	UObject::ProcessEvent(Func, &Parms);
}


// Function TRAP_Trigger.TRAP_Trigger_C.ReceiveBeginPlay
// (Event, Protected, BlueprintEvent)

void ATRAP_Trigger_C::ReceiveBeginPlay()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("TRAP_Trigger_C", "ReceiveBeginPlay");

	UObject::ProcessEvent(Func, nullptr);
}


// Function TRAP_Trigger.TRAP_Trigger_C.BndEvt__TriggerVolume_K2Node_ComponentBoundEvent_0_ComponentBeginOverlapSignature__DelegateSignature
// (HasOutParams, BlueprintEvent)
// Parameters:
// class UPrimitiveComponent*              OverlappedComponent                                    (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class AActor*                           OtherActor                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class UPrimitiveComponent*              OtherComp                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// int32                                   OtherBodyIndex                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    bFromSweep                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// struct FHitResult                       SweepResult                                            (ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, ContainsInstancedReference)

void ATRAP_Trigger_C::BndEvt__TriggerVolume_K2Node_ComponentBoundEvent_0_ComponentBeginOverlapSignature__DelegateSignature(class UPrimitiveComponent* OverlappedComponent, class AActor* OtherActor, class UPrimitiveComponent* OtherComp, int32 OtherBodyIndex, bool bFromSweep, const struct FHitResult& SweepResult)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("TRAP_Trigger_C", "BndEvt__TriggerVolume_K2Node_ComponentBoundEvent_0_ComponentBeginOverlapSignature__DelegateSignature");

	Params::TRAP_Trigger_C_BndEvt__TriggerVolume_K2Node_ComponentBoundEvent_0_ComponentBeginOverlapSignature__DelegateSignature Parms{};

	Parms.OverlappedComponent = OverlappedComponent;
	Parms.OtherActor = OtherActor;
	Parms.OtherComp = OtherComp;
	Parms.OtherBodyIndex = OtherBodyIndex;
	Parms.bFromSweep = bFromSweep;
	Parms.SweepResult = std::move(SweepResult);

	UObject::ProcessEvent(Func, &Parms);
}


// Function TRAP_Trigger.TRAP_Trigger_C.UserConstructionScript
// (Event, Public, BlueprintCallable, BlueprintEvent)

void ATRAP_Trigger_C::UserConstructionScript()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("TRAP_Trigger_C", "UserConstructionScript");

	UObject::ProcessEvent(Func, nullptr);
}


// Function TRAP_Trigger.TRAP_Trigger_C.InitializeTrap
// (Protected, BlueprintCallable, BlueprintEvent)

void ATRAP_Trigger_C::InitializeTrap()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("TRAP_Trigger_C", "InitializeTrap");

	UObject::ProcessEvent(Func, nullptr);
}


// Function TRAP_Trigger.TRAP_Trigger_C.IsInTrapGroup
// (Protected, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// bool                                    Result                                                 (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ATRAP_Trigger_C::IsInTrapGroup(bool* Result)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("TRAP_Trigger_C", "IsInTrapGroup");

	Params::TRAP_Trigger_C_IsInTrapGroup Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (Result != nullptr)
		*Result = Parms.Result;
}


// Function TRAP_Trigger.TRAP_Trigger_C.CanSpringTrap
// (Protected, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// bool                                    Result                                                 (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ATRAP_Trigger_C::CanSpringTrap(bool* Result)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("TRAP_Trigger_C", "CanSpringTrap");

	Params::TRAP_Trigger_C_CanSpringTrap Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (Result != nullptr)
		*Result = Parms.Result;
}


// Function TRAP_Trigger.TRAP_Trigger_C.HasTrapBeenTriggered
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// bool                                    Result                                                 (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ATRAP_Trigger_C::HasTrapBeenTriggered(bool* Result)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("TRAP_Trigger_C", "HasTrapBeenTriggered");

	Params::TRAP_Trigger_C_HasTrapBeenTriggered Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (Result != nullptr)
		*Result = Parms.Result;
}


// Function TRAP_Trigger.TRAP_Trigger_C.HasCompletedRequiredQuests
// (Private, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// bool                                    Result                                                 (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ATRAP_Trigger_C::HasCompletedRequiredQuests(bool* Result)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("TRAP_Trigger_C", "HasCompletedRequiredQuests");

	Params::TRAP_Trigger_C_HasCompletedRequiredQuests Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (Result != nullptr)
		*Result = Parms.Result;
}


// Function TRAP_Trigger.TRAP_Trigger_C.SetTrapEnabled
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    State                                                  (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// bool                                    StateChanged                                           (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ATRAP_Trigger_C::SetTrapEnabled(bool State, bool* StateChanged)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("TRAP_Trigger_C", "SetTrapEnabled");

	Params::TRAP_Trigger_C_SetTrapEnabled Parms{};

	Parms.State = State;

	UObject::ProcessEvent(Func, &Parms);

	if (StateChanged != nullptr)
		*StateChanged = Parms.StateChanged;
}


// Function TRAP_Trigger.TRAP_Trigger_C.DismantleTrap
// (Public, BlueprintCallable, BlueprintEvent)

void ATRAP_Trigger_C::DismantleTrap()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("TRAP_Trigger_C", "DismantleTrap");

	UObject::ProcessEvent(Func, nullptr);
}


// Function TRAP_Trigger.TRAP_Trigger_C.OnSpringTrap
// (Protected, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// class APAWN_Hacker_Simple_C*            Hacker                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ATRAP_Trigger_C::OnSpringTrap(class APAWN_Hacker_Simple_C* Hacker)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("TRAP_Trigger_C", "OnSpringTrap");

	Params::TRAP_Trigger_C_OnSpringTrap Parms{};

	Parms.Hacker = Hacker;

	UObject::ProcessEvent(Func, &Parms);
}


// Function TRAP_Trigger.TRAP_Trigger_C.EVENT_OnStoryQuestChanged
// (Private, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// class FName                             StoryQuestName                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    Value                                                  (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ATRAP_Trigger_C::EVENT_OnStoryQuestChanged(class FName StoryQuestName, bool Value)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("TRAP_Trigger_C", "EVENT_OnStoryQuestChanged");

	Params::TRAP_Trigger_C_EVENT_OnStoryQuestChanged Parms{};

	Parms.StoryQuestName = StoryQuestName;
	Parms.Value = Value;

	UObject::ProcessEvent(Func, &Parms);
}


// Function TRAP_Trigger.TRAP_Trigger_C.TrySpringTrap
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)

void ATRAP_Trigger_C::TrySpringTrap()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("TRAP_Trigger_C", "TrySpringTrap");

	UObject::ProcessEvent(Func, nullptr);
}


// Function TRAP_Trigger.TRAP_Trigger_C.TrySpringTrapFromOverlapEvent
// (Protected, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// class AActor*                           Actor                                                  (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    BeginOverlap                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// bool                                    Result                                                 (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ATRAP_Trigger_C::TrySpringTrapFromOverlapEvent(class AActor* Actor, bool BeginOverlap, bool* Result)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("TRAP_Trigger_C", "TrySpringTrapFromOverlapEvent");

	Params::TRAP_Trigger_C_TrySpringTrapFromOverlapEvent Parms{};

	Parms.Actor = Actor;
	Parms.BeginOverlap = BeginOverlap;

	UObject::ProcessEvent(Func, &Parms);

	if (Result != nullptr)
		*Result = Parms.Result;
}


// Function TRAP_Trigger.TRAP_Trigger_C.OnTrapEnabledStateChanged
// (Protected, BlueprintCallable, BlueprintEvent)

void ATRAP_Trigger_C::OnTrapEnabledStateChanged()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("TRAP_Trigger_C", "OnTrapEnabledStateChanged");

	UObject::ProcessEvent(Func, nullptr);
}


// Function TRAP_Trigger.TRAP_Trigger_C.TryBindToQuestChanged
// (Protected, BlueprintCallable, BlueprintEvent)

void ATRAP_Trigger_C::TryBindToQuestChanged()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("TRAP_Trigger_C", "TryBindToQuestChanged");

	UObject::ProcessEvent(Func, nullptr);
}


// Function TRAP_Trigger.TRAP_Trigger_C.TryInteract
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// class AActor*                           SourceActor                                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class UPrimitiveComponent*              CursorPrimitive                                        (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// ENUM_InteractionType                    InteractionType                                        (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FSTRUCT_InteractResults          InteractResults                                        (Parm, OutParm, HasGetValueTypeHash)

void ATRAP_Trigger_C::TryInteract(class AActor* SourceActor, class UPrimitiveComponent* CursorPrimitive, ENUM_InteractionType InteractionType, struct FSTRUCT_InteractResults* InteractResults)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("TRAP_Trigger_C", "TryInteract");

	Params::TRAP_Trigger_C_TryInteract Parms{};

	Parms.SourceActor = SourceActor;
	Parms.CursorPrimitive = CursorPrimitive;
	Parms.InteractionType = InteractionType;

	UObject::ProcessEvent(Func, &Parms);

	if (InteractResults != nullptr)
		*InteractResults = std::move(Parms.InteractResults);
}


// Function TRAP_Trigger.TRAP_Trigger_C.TryUnbindFromQuestChanged
// (Protected, BlueprintCallable, BlueprintEvent)

void ATRAP_Trigger_C::TryUnbindFromQuestChanged()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("TRAP_Trigger_C", "TryUnbindFromQuestChanged");

	UObject::ProcessEvent(Func, nullptr);
}


// Function TRAP_Trigger.TRAP_Trigger_C.TryEnableTrapCollision
// (Private, BlueprintCallable, BlueprintEvent)

void ATRAP_Trigger_C::TryEnableTrapCollision()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("TRAP_Trigger_C", "TryEnableTrapCollision");

	UObject::ProcessEvent(Func, nullptr);
}


// Function TRAP_Trigger.TRAP_Trigger_C.TryCompleteSprungGameEvents
// (Private, HasDefaults, BlueprintCallable, BlueprintEvent)

void ATRAP_Trigger_C::TryCompleteSprungGameEvents()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("TRAP_Trigger_C", "TryCompleteSprungGameEvents");

	UObject::ProcessEvent(Func, nullptr);
}


// Function TRAP_Trigger.TRAP_Trigger_C.TryDismantleGroupedTraps
// (Private, BlueprintCallable, BlueprintEvent)

void ATRAP_Trigger_C::TryDismantleGroupedTraps()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("TRAP_Trigger_C", "TryDismantleGroupedTraps");

	UObject::ProcessEvent(Func, nullptr);
}


// Function TRAP_Trigger.TRAP_Trigger_C.SetInteractLocked
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    Locked                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// bool                                    Result                                                 (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ATRAP_Trigger_C::SetInteractLocked(bool Locked, bool* Result)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("TRAP_Trigger_C", "SetInteractLocked");

	Params::TRAP_Trigger_C_SetInteractLocked Parms{};

	Parms.Locked = Locked;

	UObject::ProcessEvent(Func, &Parms);

	if (Result != nullptr)
		*Result = Parms.Result;
}


// Function TRAP_Trigger.TRAP_Trigger_C.IsInteractActivated
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    Result                                                 (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ATRAP_Trigger_C::IsInteractActivated(bool* Result)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("TRAP_Trigger_C", "IsInteractActivated");

	Params::TRAP_Trigger_C_IsInteractActivated Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (Result != nullptr)
		*Result = Parms.Result;
}

}

