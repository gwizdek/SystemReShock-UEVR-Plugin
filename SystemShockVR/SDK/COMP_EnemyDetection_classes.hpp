#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: COMP_EnemyDetection

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "Engine_classes.hpp"
#include "ENUM_DetectionState_structs.hpp"
#include "ENUM_GameDifficulty_structs.hpp"


namespace SDK
{

// BlueprintGeneratedClass COMP_EnemyDetection.COMP_EnemyDetection_C
// 0x0048 (0x00F8 - 0x00B0)
class UCOMP_EnemyDetection_C final : public UActorComponent
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x00B0(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	TArray<class UOBJ_DetectionEvent_C*>          DetectionEvents;                                   // 0x00B8(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance, SaveGame)
	bool                                          IsDetectionEnabled;                                // 0x00C8(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          HasCachedDetectionProperties;                      // 0x00C9(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          NeverForgetDetection;                              // 0x00CA(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_CB[0x1];                                       // 0x00CB(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         BaseAlertness;                                     // 0x00CC(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         MaxForgetTime;                                     // 0x00D0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         EnterCloseRangeDistance;                           // 0x00D4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         ExitCloseRangeDistance;                            // 0x00D8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          DEBUG_DrawDetectionMeter;                          // 0x00DC(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_DD[0x3];                                       // 0x00DD(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	FMulticastInlineDelegateProperty_             OnDetectionStateChanged;                           // 0x00E0(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)
	float                                         MinTimeBetweenSuprises;                            // 0x00F0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         SurpriseDuration;                                  // 0x00F4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

public:
	void OnDetectionStateChanged__DelegateSignature(class APAWN_SystemShockCharacter_C* Character, const struct FVector& EventLocation, ENUM_DetectionState NewState, ENUM_DetectionState OldState);
	void ExecuteUbergraph_COMP_EnemyDetection(int32 EntryPoint);
	void ReceiveBeginPlay();
	void ReceiveTick(float DeltaSeconds);
	void OnSeePawn(class APAWN_SystemShockCharacter_C* Pawn);
	void InitializeDetectionEvents();
	void UpdateDetectionEvents(float DeltaTime);
	void OnSeeEvent(class APAWN_SystemShockCharacter_C* Pawn, const struct FVector& Location);
	void OnHearPawn(class APAWN_SystemShockCharacter_C* Pawn, float Loudness);
	void GetOrCreateDetectionEvent(class APAWN_SystemShockCharacter_C* DetectedPawn, class UOBJ_DetectionEvent_C** DetectionEvent);
	void SetDetectionEnabled(bool State);
	void OnHearEvent(class APAWN_SystemShockCharacter_C* Pawn, const struct FVector& Location, float Loudness);
	void OnTakeDamage(class APAWN_SystemShockCharacter_C* Character);
	void EVENT_OnCharacterDied(class APAWN_SystemShockCharacter_C* Character);
	void OnDetectionEventInitialized(class UOBJ_DetectionEvent_C* DetectionEvent);
	void OnDetectionEventRemoved(class APAWN_SystemShockCharacter_C* DetectedPawn);
	void HandleDetectionStateChanged(class APAWN_SystemShockCharacter_C* Character, const struct FVector& EventLocation, ENUM_DetectionState NewState, ENUM_DetectionState OldState);
	void ComputeDetectionProperties();
	void TryApplySupriseMod();
	void HasAnyEvents(bool* Result);
	void HasAnyEventsWithStates(TArray<ENUM_DetectionState>& AcceptStates, bool* Result);
	void CanDetectAnyEvents(bool* Result);
	void IsOwnerThreatening(bool* Result);
	void IsCharacterThreatening(class APAWN_SystemShockCharacter_C* Character, bool* Result);
	void IsDetectionStateThreatening(ENUM_DetectionState State, bool* Result);
	void GetBaseAlertness(float* Result);
	void GetMaxForgetTime(float* Time);
	void GetSurpriseDuration(float* Duration);
	void GetDetectionEvent(class APAWN_SystemShockCharacter_C* TargetPawn, class UOBJ_DetectionEvent_C** DetectionEvent);
	void GetDetectionEventWithHighestRating(class UOBJ_DetectionEvent_C** DetectionEvent);
	void GetNearestDetectionTarget(bool IsIdentified, float MinimumRating, float MaximumRating, bool RequiresPlayer, class UOBJ_EnemyTarget_C** EnemyTarget);
	void GetDetectionRatingForPawn(class APAWN_SystemShockCharacter_C* TargetPawn, float* DetectionRating);
	void HasRecentlySeenPawn(class APAWN_SystemShockCharacter_C* TargetPawn, float TimeSeconds, bool* Result);
	void GetEventsWithDetectionState(ENUM_DetectionState State, TArray<class UOBJ_DetectionEvent_C*>* DetectionEvents_0);
	void OnToldAboutDetectionEvent(class UOBJ_DetectionEvent_C* DetectionEvent);
	void GetNearestDetectionTargetOfState(ENUM_DetectionState DetectionState, class UClass* RequiredClass, class UOBJ_EnemyTarget_C** EnemyTarget);
	void GetDetectionEventsByClass(class UClass* PawnClass, TArray<class UOBJ_DetectionEvent_C*>* Events);
	void EVENT_OnCharacterBecameUndetectable(class APAWN_SystemShockCharacter_C* Character);
	void GetTimeSinceLastDetectionEvent(float* TimeSinceLastEvent);
	void GetTimeSinceEnteringState(ENUM_DetectionState State, float* Result);
	void SetNeverForgetDetection(bool State);
	bool ShouldSaveComponent(struct FStreamingSaveGameComponentParams* Params_0);

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"COMP_EnemyDetection_C">();
	}
	static class UCOMP_EnemyDetection_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<UCOMP_EnemyDetection_C>();
	}
};
static_assert(alignof(UCOMP_EnemyDetection_C) == 0x000008, "Wrong alignment on UCOMP_EnemyDetection_C");
static_assert(sizeof(UCOMP_EnemyDetection_C) == 0x0000F8, "Wrong size on UCOMP_EnemyDetection_C");
static_assert(offsetof(UCOMP_EnemyDetection_C, UberGraphFrame) == 0x0000B0, "Member 'UCOMP_EnemyDetection_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(UCOMP_EnemyDetection_C, DetectionEvents) == 0x0000B8, "Member 'UCOMP_EnemyDetection_C::DetectionEvents' has a wrong offset!");
static_assert(offsetof(UCOMP_EnemyDetection_C, IsDetectionEnabled) == 0x0000C8, "Member 'UCOMP_EnemyDetection_C::IsDetectionEnabled' has a wrong offset!");
static_assert(offsetof(UCOMP_EnemyDetection_C, HasCachedDetectionProperties) == 0x0000C9, "Member 'UCOMP_EnemyDetection_C::HasCachedDetectionProperties' has a wrong offset!");
static_assert(offsetof(UCOMP_EnemyDetection_C, NeverForgetDetection) == 0x0000CA, "Member 'UCOMP_EnemyDetection_C::NeverForgetDetection' has a wrong offset!");
static_assert(offsetof(UCOMP_EnemyDetection_C, BaseAlertness) == 0x0000CC, "Member 'UCOMP_EnemyDetection_C::BaseAlertness' has a wrong offset!");
static_assert(offsetof(UCOMP_EnemyDetection_C, MaxForgetTime) == 0x0000D0, "Member 'UCOMP_EnemyDetection_C::MaxForgetTime' has a wrong offset!");
static_assert(offsetof(UCOMP_EnemyDetection_C, EnterCloseRangeDistance) == 0x0000D4, "Member 'UCOMP_EnemyDetection_C::EnterCloseRangeDistance' has a wrong offset!");
static_assert(offsetof(UCOMP_EnemyDetection_C, ExitCloseRangeDistance) == 0x0000D8, "Member 'UCOMP_EnemyDetection_C::ExitCloseRangeDistance' has a wrong offset!");
static_assert(offsetof(UCOMP_EnemyDetection_C, DEBUG_DrawDetectionMeter) == 0x0000DC, "Member 'UCOMP_EnemyDetection_C::DEBUG_DrawDetectionMeter' has a wrong offset!");
static_assert(offsetof(UCOMP_EnemyDetection_C, OnDetectionStateChanged) == 0x0000E0, "Member 'UCOMP_EnemyDetection_C::OnDetectionStateChanged' has a wrong offset!");
static_assert(offsetof(UCOMP_EnemyDetection_C, MinTimeBetweenSuprises) == 0x0000F0, "Member 'UCOMP_EnemyDetection_C::MinTimeBetweenSuprises' has a wrong offset!");
static_assert(offsetof(UCOMP_EnemyDetection_C, SurpriseDuration) == 0x0000F4, "Member 'UCOMP_EnemyDetection_C::SurpriseDuration' has a wrong offset!");

}

