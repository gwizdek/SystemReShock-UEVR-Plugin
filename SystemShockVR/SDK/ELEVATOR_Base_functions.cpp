#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: ELEVATOR_Base

#include "Basic.hpp"

#include "ELEVATOR_Base_classes.hpp"
#include "ELEVATOR_Base_parameters.hpp"


namespace SDK
{

// Function ELEVATOR_Base.ELEVATOR_Base_C.ExecuteUbergraph_ELEVATOR_Base
// (Final, UbergraphFunction, HasDefaults)
// Parameters:
// int32                                   EntryPoint                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void AELEVATOR_Base_C::ExecuteUbergraph_ELEVATOR_Base(int32 EntryPoint)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ELEVATOR_Base_C", "ExecuteUbergraph_ELEVATOR_Base");

	Params::ELEVATOR_Base_C_ExecuteUbergraph_ELEVATOR_Base Parms{};

	Parms.EntryPoint = EntryPoint;

	UObject::ProcessEvent(Func, &Parms);
}


// Function ELEVATOR_Base.ELEVATOR_Base_C.PlayElevatorMovementSound
// (BlueprintCallable, BlueprintEvent)
// Parameters:
// TSoftObjectPtr<class USoundCue>         SoundCue                                               (BlueprintVisible, BlueprintReadOnly, Parm, HasGetValueTypeHash)

void AELEVATOR_Base_C::PlayElevatorMovementSound(TSoftObjectPtr<class USoundCue> SoundCue)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ELEVATOR_Base_C", "PlayElevatorMovementSound");

	Params::ELEVATOR_Base_C_PlayElevatorMovementSound Parms{};

	Parms.SoundCue = SoundCue;

	UObject::ProcessEvent(Func, &Parms);
}


// Function ELEVATOR_Base.ELEVATOR_Base_C.ReceiveTick
// (Event, Public, BlueprintEvent)
// Parameters:
// float                                   DeltaSeconds                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void AELEVATOR_Base_C::ReceiveTick(float DeltaSeconds)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ELEVATOR_Base_C", "ReceiveTick");

	Params::ELEVATOR_Base_C_ReceiveTick Parms{};

	Parms.DeltaSeconds = DeltaSeconds;

	UObject::ProcessEvent(Func, &Parms);
}


// Function ELEVATOR_Base.ELEVATOR_Base_C.BndEvt__ELEVATOR_Base_CompartmentSensor_K2Node_ComponentBoundEvent_5_ComponentEndOverlapSignature__DelegateSignature
// (BlueprintEvent)
// Parameters:
// class UPrimitiveComponent*              OverlappedComponent                                    (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class AActor*                           OtherActor                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class UPrimitiveComponent*              OtherComp                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// int32                                   OtherBodyIndex                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void AELEVATOR_Base_C::BndEvt__ELEVATOR_Base_CompartmentSensor_K2Node_ComponentBoundEvent_5_ComponentEndOverlapSignature__DelegateSignature(class UPrimitiveComponent* OverlappedComponent, class AActor* OtherActor, class UPrimitiveComponent* OtherComp, int32 OtherBodyIndex)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ELEVATOR_Base_C", "BndEvt__ELEVATOR_Base_CompartmentSensor_K2Node_ComponentBoundEvent_5_ComponentEndOverlapSignature__DelegateSignature");

	Params::ELEVATOR_Base_C_BndEvt__ELEVATOR_Base_CompartmentSensor_K2Node_ComponentBoundEvent_5_ComponentEndOverlapSignature__DelegateSignature Parms{};

	Parms.OverlappedComponent = OverlappedComponent;
	Parms.OtherActor = OtherActor;
	Parms.OtherComp = OtherComp;
	Parms.OtherBodyIndex = OtherBodyIndex;

	UObject::ProcessEvent(Func, &Parms);
}


// Function ELEVATOR_Base.ELEVATOR_Base_C.BndEvt__ELEVATOR_Base_COMP_VoxelCullable_K2Node_ComponentBoundEvent_4_CullableAudibilitySignature__DelegateSignature
// (BlueprintEvent)
// Parameters:
// bool                                    bAudibleState                                          (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)

void AELEVATOR_Base_C::BndEvt__ELEVATOR_Base_COMP_VoxelCullable_K2Node_ComponentBoundEvent_4_CullableAudibilitySignature__DelegateSignature(bool bAudibleState)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ELEVATOR_Base_C", "BndEvt__ELEVATOR_Base_COMP_VoxelCullable_K2Node_ComponentBoundEvent_4_CullableAudibilitySignature__DelegateSignature");

	Params::ELEVATOR_Base_C_BndEvt__ELEVATOR_Base_COMP_VoxelCullable_K2Node_ComponentBoundEvent_4_CullableAudibilitySignature__DelegateSignature Parms{};

	Parms.bAudibleState = bAudibleState;

	UObject::ProcessEvent(Func, &Parms);
}


// Function ELEVATOR_Base.ELEVATOR_Base_C.StreamOutCinematicLevel
// (BlueprintCallable, BlueprintEvent)

void AELEVATOR_Base_C::StreamOutCinematicLevel()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ELEVATOR_Base_C", "StreamOutCinematicLevel");

	UObject::ProcessEvent(Func, nullptr);
}


// Function ELEVATOR_Base.ELEVATOR_Base_C.StreamInCinematicLevel
// (BlueprintCallable, BlueprintEvent)

void AELEVATOR_Base_C::StreamInCinematicLevel()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ELEVATOR_Base_C", "StreamInCinematicLevel");

	UObject::ProcessEvent(Func, nullptr);
}


// Function ELEVATOR_Base.ELEVATOR_Base_C.BndEvt__CompartmentSensor_K2Node_ComponentBoundEvent_1_ComponentBeginOverlapSignature__DelegateSignature
// (HasOutParams, BlueprintEvent)
// Parameters:
// class UPrimitiveComponent*              OverlappedComponent                                    (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class AActor*                           OtherActor                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class UPrimitiveComponent*              OtherComp                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// int32                                   OtherBodyIndex                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    bFromSweep                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// struct FHitResult                       SweepResult                                            (ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, ContainsInstancedReference)

void AELEVATOR_Base_C::BndEvt__CompartmentSensor_K2Node_ComponentBoundEvent_1_ComponentBeginOverlapSignature__DelegateSignature(class UPrimitiveComponent* OverlappedComponent, class AActor* OtherActor, class UPrimitiveComponent* OtherComp, int32 OtherBodyIndex, bool bFromSweep, const struct FHitResult& SweepResult)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ELEVATOR_Base_C", "BndEvt__CompartmentSensor_K2Node_ComponentBoundEvent_1_ComponentBeginOverlapSignature__DelegateSignature");

	Params::ELEVATOR_Base_C_BndEvt__CompartmentSensor_K2Node_ComponentBoundEvent_1_ComponentBeginOverlapSignature__DelegateSignature Parms{};

	Parms.OverlappedComponent = OverlappedComponent;
	Parms.OtherActor = OtherActor;
	Parms.OtherComp = OtherComp;
	Parms.OtherBodyIndex = OtherBodyIndex;
	Parms.bFromSweep = bFromSweep;
	Parms.SweepResult = std::move(SweepResult);

	UObject::ProcessEvent(Func, &Parms);
}


// Function ELEVATOR_Base.ELEVATOR_Base_C.BndEvt__COMP_VoxelCullable_K2Node_ComponentBoundEvent_0_CullableVisibilitySignature__DelegateSignature
// (BlueprintEvent)
// Parameters:
// bool                                    bVisibleState                                          (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)

void AELEVATOR_Base_C::BndEvt__COMP_VoxelCullable_K2Node_ComponentBoundEvent_0_CullableVisibilitySignature__DelegateSignature(bool bVisibleState)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ELEVATOR_Base_C", "BndEvt__COMP_VoxelCullable_K2Node_ComponentBoundEvent_0_CullableVisibilitySignature__DelegateSignature");

	Params::ELEVATOR_Base_C_BndEvt__COMP_VoxelCullable_K2Node_ComponentBoundEvent_0_CullableVisibilitySignature__DelegateSignature Parms{};

	Parms.bVisibleState = bVisibleState;

	UObject::ProcessEvent(Func, &Parms);
}


// Function ELEVATOR_Base.ELEVATOR_Base_C.BndEvt__SafetySensor_K2Node_ComponentBoundEvent_3_ComponentEndOverlapSignature__DelegateSignature
// (BlueprintEvent)
// Parameters:
// class UPrimitiveComponent*              OverlappedComponent                                    (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class AActor*                           OtherActor                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class UPrimitiveComponent*              OtherComp                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// int32                                   OtherBodyIndex                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void AELEVATOR_Base_C::BndEvt__SafetySensor_K2Node_ComponentBoundEvent_3_ComponentEndOverlapSignature__DelegateSignature(class UPrimitiveComponent* OverlappedComponent, class AActor* OtherActor, class UPrimitiveComponent* OtherComp, int32 OtherBodyIndex)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ELEVATOR_Base_C", "BndEvt__SafetySensor_K2Node_ComponentBoundEvent_3_ComponentEndOverlapSignature__DelegateSignature");

	Params::ELEVATOR_Base_C_BndEvt__SafetySensor_K2Node_ComponentBoundEvent_3_ComponentEndOverlapSignature__DelegateSignature Parms{};

	Parms.OverlappedComponent = OverlappedComponent;
	Parms.OtherActor = OtherActor;
	Parms.OtherComp = OtherComp;
	Parms.OtherBodyIndex = OtherBodyIndex;

	UObject::ProcessEvent(Func, &Parms);
}


// Function ELEVATOR_Base.ELEVATOR_Base_C.BndEvt__SafetySensor_K2Node_ComponentBoundEvent_2_ComponentBeginOverlapSignature__DelegateSignature
// (HasOutParams, BlueprintEvent)
// Parameters:
// class UPrimitiveComponent*              OverlappedComponent                                    (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class AActor*                           OtherActor                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class UPrimitiveComponent*              OtherComp                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// int32                                   OtherBodyIndex                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    bFromSweep                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// struct FHitResult                       SweepResult                                            (ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, ContainsInstancedReference)

void AELEVATOR_Base_C::BndEvt__SafetySensor_K2Node_ComponentBoundEvent_2_ComponentBeginOverlapSignature__DelegateSignature(class UPrimitiveComponent* OverlappedComponent, class AActor* OtherActor, class UPrimitiveComponent* OtherComp, int32 OtherBodyIndex, bool bFromSweep, const struct FHitResult& SweepResult)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ELEVATOR_Base_C", "BndEvt__SafetySensor_K2Node_ComponentBoundEvent_2_ComponentBeginOverlapSignature__DelegateSignature");

	Params::ELEVATOR_Base_C_BndEvt__SafetySensor_K2Node_ComponentBoundEvent_2_ComponentBeginOverlapSignature__DelegateSignature Parms{};

	Parms.OverlappedComponent = OverlappedComponent;
	Parms.OtherActor = OtherActor;
	Parms.OtherComp = OtherComp;
	Parms.OtherBodyIndex = OtherBodyIndex;
	Parms.bFromSweep = bFromSweep;
	Parms.SweepResult = std::move(SweepResult);

	UObject::ProcessEvent(Func, &Parms);
}


// Function ELEVATOR_Base.ELEVATOR_Base_C.ReceiveEndPlay
// (Event, Protected, BlueprintEvent)
// Parameters:
// EEndPlayReason                          EndPlayReason                                          (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void AELEVATOR_Base_C::ReceiveEndPlay(EEndPlayReason EndPlayReason)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ELEVATOR_Base_C", "ReceiveEndPlay");

	Params::ELEVATOR_Base_C_ReceiveEndPlay Parms{};

	Parms.EndPlayReason = EndPlayReason;

	UObject::ProcessEvent(Func, &Parms);
}


// Function ELEVATOR_Base.ELEVATOR_Base_C.ReceiveBeginPlay
// (Event, Protected, BlueprintEvent)

void AELEVATOR_Base_C::ReceiveBeginPlay()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ELEVATOR_Base_C", "ReceiveBeginPlay");

	UObject::ProcessEvent(Func, nullptr);
}


// Function ELEVATOR_Base.ELEVATOR_Base_C.OnLoaded_E8AF5A7C4E1C8638BDB1439B3EE08341
// (BlueprintCallable, BlueprintEvent)
// Parameters:
// class UObject*                          Loaded                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void AELEVATOR_Base_C::OnLoaded_E8AF5A7C4E1C8638BDB1439B3EE08341(class UObject* Loaded)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ELEVATOR_Base_C", "OnLoaded_E8AF5A7C4E1C8638BDB1439B3EE08341");

	Params::ELEVATOR_Base_C_OnLoaded_E8AF5A7C4E1C8638BDB1439B3EE08341 Parms{};

	Parms.Loaded = Loaded;

	UObject::ProcessEvent(Func, &Parms);
}


// Function ELEVATOR_Base.ELEVATOR_Base_C.UserConstructionScript
// (Event, Public, BlueprintCallable, BlueprintEvent)

void AELEVATOR_Base_C::UserConstructionScript()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ELEVATOR_Base_C", "UserConstructionScript");

	UObject::ProcessEvent(Func, nullptr);
}


// Function ELEVATOR_Base.ELEVATOR_Base_C.EVENT_StartOpeningOuterDoor
// (Protected, HasDefaults, BlueprintCallable, BlueprintEvent)

void AELEVATOR_Base_C::EVENT_StartOpeningOuterDoor()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ELEVATOR_Base_C", "EVENT_StartOpeningOuterDoor");

	UObject::ProcessEvent(Func, nullptr);
}


// Function ELEVATOR_Base.ELEVATOR_Base_C.EVENT_StartClosingOuterDoor
// (Protected, BlueprintCallable, BlueprintEvent)

void AELEVATOR_Base_C::EVENT_StartClosingOuterDoor()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ELEVATOR_Base_C", "EVENT_StartClosingOuterDoor");

	UObject::ProcessEvent(Func, nullptr);
}


// Function ELEVATOR_Base.ELEVATOR_Base_C.EVENT_StartOpeningInnerDoor
// (Protected, BlueprintCallable, BlueprintEvent)

void AELEVATOR_Base_C::EVENT_StartOpeningInnerDoor()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ELEVATOR_Base_C", "EVENT_StartOpeningInnerDoor");

	UObject::ProcessEvent(Func, nullptr);
}


// Function ELEVATOR_Base.ELEVATOR_Base_C.EVENT_OnStartedUnloadingLevelCollection
// (Protected, BlueprintCallable, BlueprintEvent)

void AELEVATOR_Base_C::EVENT_OnStartedUnloadingLevelCollection()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ELEVATOR_Base_C", "EVENT_OnStartedUnloadingLevelCollection");

	UObject::ProcessEvent(Func, nullptr);
}


// Function ELEVATOR_Base.ELEVATOR_Base_C.EVENT_OnFinishedLoadingLevelCollection
// (Protected, HasDefaults, BlueprintCallable, BlueprintEvent)

void AELEVATOR_Base_C::EVENT_OnFinishedLoadingLevelCollection()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ELEVATOR_Base_C", "EVENT_OnFinishedLoadingLevelCollection");

	UObject::ProcessEvent(Func, nullptr);
}


// Function ELEVATOR_Base.ELEVATOR_Base_C.InitializeElevator
// (Protected, BlueprintCallable, BlueprintEvent)

void AELEVATOR_Base_C::InitializeElevator()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ELEVATOR_Base_C", "InitializeElevator");

	UObject::ProcessEvent(Func, nullptr);
}


// Function ELEVATOR_Base.ELEVATOR_Base_C.InitializeAttributes
// (Protected, BlueprintCallable, BlueprintEvent)

void AELEVATOR_Base_C::InitializeAttributes()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ELEVATOR_Base_C", "InitializeAttributes");

	UObject::ProcessEvent(Func, nullptr);
}


// Function ELEVATOR_Base.ELEVATOR_Base_C.SetElevatorEnabled
// (Protected, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    Enabled                                                (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)

void AELEVATOR_Base_C::SetElevatorEnabled(bool Enabled)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ELEVATOR_Base_C", "SetElevatorEnabled");

	Params::ELEVATOR_Base_C_SetElevatorEnabled Parms{};

	Parms.Enabled = Enabled;

	UObject::ProcessEvent(Func, &Parms);
}


// Function ELEVATOR_Base.ELEVATOR_Base_C.EVENT_OnFinishedUnloadingLevelCollection
// (Protected, HasDefaults, BlueprintCallable, BlueprintEvent)

void AELEVATOR_Base_C::EVENT_OnFinishedUnloadingLevelCollection()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ELEVATOR_Base_C", "EVENT_OnFinishedUnloadingLevelCollection");

	UObject::ProcessEvent(Func, nullptr);
}


// Function ELEVATOR_Base.ELEVATOR_Base_C.IsElevatorOccupiedByPawn
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// bool                                    Result                                                 (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void AELEVATOR_Base_C::IsElevatorOccupiedByPawn(bool* Result)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ELEVATOR_Base_C", "IsElevatorOccupiedByPawn");

	Params::ELEVATOR_Base_C_IsElevatorOccupiedByPawn Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (Result != nullptr)
		*Result = Parms.Result;
}


// Function ELEVATOR_Base.ELEVATOR_Base_C.IsSafetySensorOccupiedByPawn
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// bool                                    Result                                                 (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void AELEVATOR_Base_C::IsSafetySensorOccupiedByPawn(bool* Result)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ELEVATOR_Base_C", "IsSafetySensorOccupiedByPawn");

	Params::ELEVATOR_Base_C_IsSafetySensorOccupiedByPawn Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (Result != nullptr)
		*Result = Parms.Result;
}


// Function ELEVATOR_Base.ELEVATOR_Base_C.TryOpenElevatorDoors
// (Protected, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    Force                                                  (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// bool                                    Result                                                 (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void AELEVATOR_Base_C::TryOpenElevatorDoors(bool Force, bool* Result)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ELEVATOR_Base_C", "TryOpenElevatorDoors");

	Params::ELEVATOR_Base_C_TryOpenElevatorDoors Parms{};

	Parms.Force = Force;

	UObject::ProcessEvent(Func, &Parms);

	if (Result != nullptr)
		*Result = Parms.Result;
}


// Function ELEVATOR_Base.ELEVATOR_Base_C.TryCloseElevatorDoors
// (Protected, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    Result                                                 (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void AELEVATOR_Base_C::TryCloseElevatorDoors(bool* Result)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ELEVATOR_Base_C", "TryCloseElevatorDoors");

	Params::ELEVATOR_Base_C_TryCloseElevatorDoors Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (Result != nullptr)
		*Result = Parms.Result;
}


// Function ELEVATOR_Base.ELEVATOR_Base_C.StartAutoCloseTimer
// (Protected, HasDefaults, BlueprintCallable, BlueprintEvent)

void AELEVATOR_Base_C::StartAutoCloseTimer()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ELEVATOR_Base_C", "StartAutoCloseTimer");

	UObject::ProcessEvent(Func, nullptr);
}


// Function ELEVATOR_Base.ELEVATOR_Base_C.EVENT_OnMovementTick
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)

void AELEVATOR_Base_C::EVENT_OnMovementTick()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ELEVATOR_Base_C", "EVENT_OnMovementTick");

	UObject::ProcessEvent(Func, nullptr);
}


// Function ELEVATOR_Base.ELEVATOR_Base_C.EVENT_AutoCloseDoors
// (Protected, BlueprintCallable, BlueprintEvent)

void AELEVATOR_Base_C::EVENT_AutoCloseDoors()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ELEVATOR_Base_C", "EVENT_AutoCloseDoors");

	UObject::ProcessEvent(Func, nullptr);
}


// Function ELEVATOR_Base.ELEVATOR_Base_C.IsOverlappingAnyLivingEnemy
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// bool                                    Result                                                 (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void AELEVATOR_Base_C::IsOverlappingAnyLivingEnemy(bool* Result)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ELEVATOR_Base_C", "IsOverlappingAnyLivingEnemy");

	Params::ELEVATOR_Base_C_IsOverlappingAnyLivingEnemy Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (Result != nullptr)
		*Result = Parms.Result;
}


// Function ELEVATOR_Base.ELEVATOR_Base_C.IsValidOccupant
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// class AActor*                           Actor                                                  (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    Result                                                 (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void AELEVATOR_Base_C::IsValidOccupant(class AActor* Actor, bool* Result)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ELEVATOR_Base_C", "IsValidOccupant");

	Params::ELEVATOR_Base_C_IsValidOccupant Parms{};

	Parms.Actor = Actor;

	UObject::ProcessEvent(Func, &Parms);

	if (Result != nullptr)
		*Result = Parms.Result;
}


// Function ELEVATOR_Base.ELEVATOR_Base_C.CanOpenDoors
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// bool                                    Force                                                  (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor)

bool AELEVATOR_Base_C::CanOpenDoors(bool Force)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ELEVATOR_Base_C", "CanOpenDoors");

	Params::ELEVATOR_Base_C_CanOpenDoors Parms{};

	Parms.Force = Force;

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function ELEVATOR_Base.ELEVATOR_Base_C.TryInteract
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// class AActor*                           SourceActor                                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class UPrimitiveComponent*              CursorPrimitive                                        (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// ENUM_InteractionType                    InteractionType                                        (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FSTRUCT_InteractResults          InteractResults                                        (Parm, OutParm, HasGetValueTypeHash)

void AELEVATOR_Base_C::TryInteract(class AActor* SourceActor, class UPrimitiveComponent* CursorPrimitive, ENUM_InteractionType InteractionType, struct FSTRUCT_InteractResults* InteractResults)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ELEVATOR_Base_C", "TryInteract");

	Params::ELEVATOR_Base_C_TryInteract Parms{};

	Parms.SourceActor = SourceActor;
	Parms.CursorPrimitive = CursorPrimitive;
	Parms.InteractionType = InteractionType;

	UObject::ProcessEvent(Func, &Parms);

	if (InteractResults != nullptr)
		*InteractResults = std::move(Parms.InteractResults);
}


// Function ELEVATOR_Base.ELEVATOR_Base_C.CanCloseDoors
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor)

bool AELEVATOR_Base_C::CanCloseDoors()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ELEVATOR_Base_C", "CanCloseDoors");

	Params::ELEVATOR_Base_C_CanCloseDoors Parms{};

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function ELEVATOR_Base.ELEVATOR_Base_C.CanUseElevator
// (Protected, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// class APAWN_Hacker_Simple_C*            Hacker                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class UPrimitiveComponent*              CursorPrimitive                                        (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    Success                                                (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
// class FText                             FailMessage                                            (Parm, OutParm)

void AELEVATOR_Base_C::CanUseElevator(class APAWN_Hacker_Simple_C* Hacker, class UPrimitiveComponent* CursorPrimitive, bool* Success, class FText* FailMessage)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ELEVATOR_Base_C", "CanUseElevator");

	Params::ELEVATOR_Base_C_CanUseElevator Parms{};

	Parms.Hacker = Hacker;
	Parms.CursorPrimitive = CursorPrimitive;

	UObject::ProcessEvent(Func, &Parms);

	if (Success != nullptr)
		*Success = Parms.Success;

	if (FailMessage != nullptr)
		*FailMessage = std::move(Parms.FailMessage);
}


// Function ELEVATOR_Base.ELEVATOR_Base_C.StartLevelTransition
// (Protected, HasDefaults, BlueprintCallable, BlueprintEvent)

void AELEVATOR_Base_C::StartLevelTransition()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ELEVATOR_Base_C", "StartLevelTransition");

	UObject::ProcessEvent(Func, nullptr);
}


// Function ELEVATOR_Base.ELEVATOR_Base_C.TryFixupPlayerPosition
// (Protected, HasDefaults, BlueprintCallable, BlueprintEvent)

void AELEVATOR_Base_C::TryFixupPlayerPosition()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ELEVATOR_Base_C", "TryFixupPlayerPosition");

	UObject::ProcessEvent(Func, nullptr);
}


// Function ELEVATOR_Base.ELEVATOR_Base_C.TryFinishElevatorMove
// (Protected, HasDefaults, BlueprintCallable, BlueprintEvent)

void AELEVATOR_Base_C::TryFinishElevatorMove()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ELEVATOR_Base_C", "TryFinishElevatorMove");

	UObject::ProcessEvent(Func, nullptr);
}


// Function ELEVATOR_Base.ELEVATOR_Base_C.IsAnyDoorOpening
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// bool                                    Result                                                 (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void AELEVATOR_Base_C::IsAnyDoorOpening(bool* Result)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ELEVATOR_Base_C", "IsAnyDoorOpening");

	Params::ELEVATOR_Base_C_IsAnyDoorOpening Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (Result != nullptr)
		*Result = Parms.Result;
}


// Function ELEVATOR_Base.ELEVATOR_Base_C.IsAnyDoorClosing
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// bool                                    Result                                                 (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void AELEVATOR_Base_C::IsAnyDoorClosing(bool* Result)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ELEVATOR_Base_C", "IsAnyDoorClosing");

	Params::ELEVATOR_Base_C_IsAnyDoorClosing Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (Result != nullptr)
		*Result = Parms.Result;
}


// Function ELEVATOR_Base.ELEVATOR_Base_C.IsEveryDoorClosed
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// bool                                    Result                                                 (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void AELEVATOR_Base_C::IsEveryDoorClosed(bool* Result)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ELEVATOR_Base_C", "IsEveryDoorClosed");

	Params::ELEVATOR_Base_C_IsEveryDoorClosed Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (Result != nullptr)
		*Result = Parms.Result;
}


// Function ELEVATOR_Base.ELEVATOR_Base_C.TeleportElevator
// (Protected, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// struct FTransform                       NewTransform                                           (BlueprintVisible, BlueprintReadOnly, Parm, IsPlainOldData, NoDestructor)

void AELEVATOR_Base_C::TeleportElevator(const struct FTransform& NewTransform)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ELEVATOR_Base_C", "TeleportElevator");

	Params::ELEVATOR_Base_C_TeleportElevator Parms{};

	Parms.NewTransform = std::move(NewTransform);

	UObject::ProcessEvent(Func, &Parms);
}


// Function ELEVATOR_Base.ELEVATOR_Base_C.ActivateDoor
// (Protected, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// ENUM_InnerOuter                         TargetDoor                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    Open                                                   (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// bool                                    Result                                                 (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void AELEVATOR_Base_C::ActivateDoor(ENUM_InnerOuter TargetDoor, bool Open, bool* Result)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ELEVATOR_Base_C", "ActivateDoor");

	Params::ELEVATOR_Base_C_ActivateDoor Parms{};

	Parms.TargetDoor = TargetDoor;
	Parms.Open = Open;

	UObject::ProcessEvent(Func, &Parms);

	if (Result != nullptr)
		*Result = Parms.Result;
}


// Function ELEVATOR_Base.ELEVATOR_Base_C.EVENT_InnerDoorsMontageFinished
// (Protected, HasDefaults, BlueprintCallable, BlueprintEvent)

void AELEVATOR_Base_C::EVENT_InnerDoorsMontageFinished()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ELEVATOR_Base_C", "EVENT_InnerDoorsMontageFinished");

	UObject::ProcessEvent(Func, nullptr);
}


// Function ELEVATOR_Base.ELEVATOR_Base_C.EVENT_OuterDoorsMontageFinished
// (Protected, BlueprintCallable, BlueprintEvent)

void AELEVATOR_Base_C::EVENT_OuterDoorsMontageFinished()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ELEVATOR_Base_C", "EVENT_OuterDoorsMontageFinished");

	UObject::ProcessEvent(Func, nullptr);
}


// Function ELEVATOR_Base.ELEVATOR_Base_C.IsElevatorFunctional
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// bool                                    Result                                                 (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void AELEVATOR_Base_C::IsElevatorFunctional(bool* Result)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ELEVATOR_Base_C", "IsElevatorFunctional");

	Params::ELEVATOR_Base_C_IsElevatorFunctional Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (Result != nullptr)
		*Result = Parms.Result;
}


// Function ELEVATOR_Base.ELEVATOR_Base_C.GetTargetDoorState
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// ENUM_InnerOuter                         TargetType                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// ENUM_DoorState                          State                                                  (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void AELEVATOR_Base_C::GetTargetDoorState(ENUM_InnerOuter TargetType, ENUM_DoorState* State)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ELEVATOR_Base_C", "GetTargetDoorState");

	Params::ELEVATOR_Base_C_GetTargetDoorState Parms{};

	Parms.TargetType = TargetType;

	UObject::ProcessEvent(Func, &Parms);

	if (State != nullptr)
		*State = Parms.State;
}


// Function ELEVATOR_Base.ELEVATOR_Base_C.GetDoorMontage
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// ENUM_InnerOuter                         Target                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    Open                                                   (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// class UAnimMontage*                     Montage                                                (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void AELEVATOR_Base_C::GetDoorMontage(ENUM_InnerOuter Target, bool Open, class UAnimMontage** Montage)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ELEVATOR_Base_C", "GetDoorMontage");

	Params::ELEVATOR_Base_C_GetDoorMontage Parms{};

	Parms.Target = Target;
	Parms.Open = Open;

	UObject::ProcessEvent(Func, &Parms);

	if (Montage != nullptr)
		*Montage = Parms.Montage;
}


// Function ELEVATOR_Base.ELEVATOR_Base_C.GetDoorAnimInstance
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// ENUM_InnerOuter                         Target                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class UAnimInstance*                    AnimInstance                                           (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void AELEVATOR_Base_C::GetDoorAnimInstance(ENUM_InnerOuter Target, class UAnimInstance** AnimInstance)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ELEVATOR_Base_C", "GetDoorAnimInstance");

	Params::ELEVATOR_Base_C_GetDoorAnimInstance Parms{};

	Parms.Target = Target;

	UObject::ProcessEvent(Func, &Parms);

	if (AnimInstance != nullptr)
		*AnimInstance = Parms.AnimInstance;
}


// Function ELEVATOR_Base.ELEVATOR_Base_C.SetDoorState
// (Protected, BlueprintCallable, BlueprintEvent)
// Parameters:
// ENUM_InnerOuter                         Target                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// ENUM_DoorState                          NewState                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void AELEVATOR_Base_C::SetDoorState(ENUM_InnerOuter Target, ENUM_DoorState NewState)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ELEVATOR_Base_C", "SetDoorState");

	Params::ELEVATOR_Base_C_SetDoorState Parms{};

	Parms.Target = Target;
	Parms.NewState = NewState;

	UObject::ProcessEvent(Func, &Parms);
}


// Function ELEVATOR_Base.ELEVATOR_Base_C.TransferOccupantsToLevel
// (Protected, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// class AINTERACT_ElevatorDoors_Base_C*   ElevatorDoors                                          (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void AELEVATOR_Base_C::TransferOccupantsToLevel(class AINTERACT_ElevatorDoors_Base_C* ElevatorDoors)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ELEVATOR_Base_C", "TransferOccupantsToLevel");

	Params::ELEVATOR_Base_C_TransferOccupantsToLevel Parms{};

	Parms.ElevatorDoors = ElevatorDoors;

	UObject::ProcessEvent(Func, &Parms);
}


// Function ELEVATOR_Base.ELEVATOR_Base_C.EVENT_DelayedUnloadActions
// (Protected, HasDefaults, BlueprintCallable, BlueprintEvent)

void AELEVATOR_Base_C::EVENT_DelayedUnloadActions()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ELEVATOR_Base_C", "EVENT_DelayedUnloadActions");

	UObject::ProcessEvent(Func, nullptr);
}


// Function ELEVATOR_Base.ELEVATOR_Base_C.UpdateScannableComponent
// (Protected, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    Open                                                   (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)

void AELEVATOR_Base_C::UpdateScannableComponent(bool Open)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ELEVATOR_Base_C", "UpdateScannableComponent");

	Params::ELEVATOR_Base_C_UpdateScannableComponent Parms{};

	Parms.Open = Open;

	UObject::ProcessEvent(Func, &Parms);
}


// Function ELEVATOR_Base.ELEVATOR_Base_C.GetTargetLevelName
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// class UPrimitiveComponent*              CursorPrimitive                                        (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class FName                             TargetLevel_0                                          (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void AELEVATOR_Base_C::GetTargetLevelName(class UPrimitiveComponent* CursorPrimitive, class FName* TargetLevel_0)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ELEVATOR_Base_C", "GetTargetLevelName");

	Params::ELEVATOR_Base_C_GetTargetLevelName Parms{};

	Parms.CursorPrimitive = CursorPrimitive;

	UObject::ProcessEvent(Func, &Parms);

	if (TargetLevel_0 != nullptr)
		*TargetLevel_0 = Parms.TargetLevel_0;
}


// Function ELEVATOR_Base.ELEVATOR_Base_C.GetDirectionToTargetLevelFromSource
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// class FName                             SourceLevel                                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class FName                             TargetLevel_0                                          (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// ENUM_UpDown                             DirectionToTarget                                      (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void AELEVATOR_Base_C::GetDirectionToTargetLevelFromSource(class FName SourceLevel, class FName TargetLevel_0, ENUM_UpDown* DirectionToTarget)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ELEVATOR_Base_C", "GetDirectionToTargetLevelFromSource");

	Params::ELEVATOR_Base_C_GetDirectionToTargetLevelFromSource Parms{};

	Parms.SourceLevel = SourceLevel;
	Parms.TargetLevel_0 = TargetLevel_0;

	UObject::ProcessEvent(Func, &Parms);

	if (DirectionToTarget != nullptr)
		*DirectionToTarget = Parms.DirectionToTarget;
}


// Function ELEVATOR_Base.ELEVATOR_Base_C.GetTargetLevel
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// class FName                             TargetLevel_0                                          (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void AELEVATOR_Base_C::GetTargetLevel(class FName* TargetLevel_0)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ELEVATOR_Base_C", "GetTargetLevel");

	Params::ELEVATOR_Base_C_GetTargetLevel Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (TargetLevel_0 != nullptr)
		*TargetLevel_0 = Parms.TargetLevel_0;
}


// Function ELEVATOR_Base.ELEVATOR_Base_C.UpdateRoomAssignmentTypes
// (Protected, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    IsArriving                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)

void AELEVATOR_Base_C::UpdateRoomAssignmentTypes(bool IsArriving)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ELEVATOR_Base_C", "UpdateRoomAssignmentTypes");

	Params::ELEVATOR_Base_C_UpdateRoomAssignmentTypes Parms{};

	Parms.IsArriving = IsArriving;

	UObject::ProcessEvent(Func, &Parms);
}


// Function ELEVATOR_Base.ELEVATOR_Base_C.UpdateEmissiveStrength
// (Protected, BlueprintCallable, BlueprintEvent)
// Parameters:
// float                                   Scale                                                  (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void AELEVATOR_Base_C::UpdateEmissiveStrength(float Scale)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ELEVATOR_Base_C", "UpdateEmissiveStrength");

	Params::ELEVATOR_Base_C_UpdateEmissiveStrength Parms{};

	Parms.Scale = Scale;

	UObject::ProcessEvent(Func, &Parms);
}


// Function ELEVATOR_Base.ELEVATOR_Base_C.SetElevatorTargetLevel
// (Protected, BlueprintCallable, BlueprintEvent)
// Parameters:
// class UPrimitiveComponent*              CursorPrimitive                                        (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class FName                             NewTargetLevel                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void AELEVATOR_Base_C::SetElevatorTargetLevel(class UPrimitiveComponent* CursorPrimitive, class FName NewTargetLevel)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ELEVATOR_Base_C", "SetElevatorTargetLevel");

	Params::ELEVATOR_Base_C_SetElevatorTargetLevel Parms{};

	Parms.CursorPrimitive = CursorPrimitive;
	Parms.NewTargetLevel = NewTargetLevel;

	UObject::ProcessEvent(Func, &Parms);
}


// Function ELEVATOR_Base.ELEVATOR_Base_C.StartElevatorMotion
// (Protected, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    Result                                                 (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void AELEVATOR_Base_C::StartElevatorMotion(bool* Result)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ELEVATOR_Base_C", "StartElevatorMotion");

	Params::ELEVATOR_Base_C_StartElevatorMotion Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (Result != nullptr)
		*Result = Parms.Result;
}


// Function ELEVATOR_Base.ELEVATOR_Base_C.GetElevatorDoor
// (Protected, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// class AINTERACT_ElevatorDoors_Base_C*   Door                                                   (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void AELEVATOR_Base_C::GetElevatorDoor(class AINTERACT_ElevatorDoors_Base_C** Door)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ELEVATOR_Base_C", "GetElevatorDoor");

	Params::ELEVATOR_Base_C_GetElevatorDoor Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (Door != nullptr)
		*Door = Parms.Door;
}


// Function ELEVATOR_Base.ELEVATOR_Base_C.GetDeckSymbolByLevelName
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// class FName                             LevelName                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class FString                           DeckSymbol                                             (Parm, OutParm, ZeroConstructor, HasGetValueTypeHash)

void AELEVATOR_Base_C::GetDeckSymbolByLevelName(class FName LevelName, class FString* DeckSymbol)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ELEVATOR_Base_C", "GetDeckSymbolByLevelName");

	Params::ELEVATOR_Base_C_GetDeckSymbolByLevelName Parms{};

	Parms.LevelName = LevelName;

	UObject::ProcessEvent(Func, &Parms);

	if (DeckSymbol != nullptr)
		*DeckSymbol = std::move(Parms.DeckSymbol);
}


// Function ELEVATOR_Base.ELEVATOR_Base_C.SetElevatorVisibility
// (Protected, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    VisibilityState                                        (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)

void AELEVATOR_Base_C::SetElevatorVisibility(bool VisibilityState)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ELEVATOR_Base_C", "SetElevatorVisibility");

	Params::ELEVATOR_Base_C_SetElevatorVisibility Parms{};

	Parms.VisibilityState = VisibilityState;

	UObject::ProcessEvent(Func, &Parms);
}


// Function ELEVATOR_Base.ELEVATOR_Base_C.GetOccupantPrimitiveComponent
// (Protected, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// class AActor*                           OccupantActor                                          (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class UPrimitiveComponent*              PrimitiveComponent                                     (Parm, OutParm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void AELEVATOR_Base_C::GetOccupantPrimitiveComponent(class AActor* OccupantActor, class UPrimitiveComponent** PrimitiveComponent)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ELEVATOR_Base_C", "GetOccupantPrimitiveComponent");

	Params::ELEVATOR_Base_C_GetOccupantPrimitiveComponent Parms{};

	Parms.OccupantActor = OccupantActor;

	UObject::ProcessEvent(Func, &Parms);

	if (PrimitiveComponent != nullptr)
		*PrimitiveComponent = Parms.PrimitiveComponent;
}


// Function ELEVATOR_Base.ELEVATOR_Base_C.GetTargetShape
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// class UPrimitiveComponent*              CursorPrimitive                                        (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class UShapeComponent*                  ShapeComponent                                         (Parm, OutParm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void AELEVATOR_Base_C::GetTargetShape(class UPrimitiveComponent* CursorPrimitive, class UShapeComponent** ShapeComponent)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ELEVATOR_Base_C", "GetTargetShape");

	Params::ELEVATOR_Base_C_GetTargetShape Parms{};

	Parms.CursorPrimitive = CursorPrimitive;

	UObject::ProcessEvent(Func, &Parms);

	if (ShapeComponent != nullptr)
		*ShapeComponent = Parms.ShapeComponent;
}


// Function ELEVATOR_Base.ELEVATOR_Base_C.GetControlsMeshComponent
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// class UStaticMeshComponent*             MeshComponent                                          (Parm, OutParm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void AELEVATOR_Base_C::GetControlsMeshComponent(class UStaticMeshComponent** MeshComponent)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ELEVATOR_Base_C", "GetControlsMeshComponent");

	Params::ELEVATOR_Base_C_GetControlsMeshComponent Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (MeshComponent != nullptr)
		*MeshComponent = Parms.MeshComponent;
}


// Function ELEVATOR_Base.ELEVATOR_Base_C.UpdateButtonColor
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// int32                                   ButtonIndex                                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// ENUM_FailSucceedIgnore                  ButtonState                                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void AELEVATOR_Base_C::UpdateButtonColor(int32 ButtonIndex, ENUM_FailSucceedIgnore ButtonState)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ELEVATOR_Base_C", "UpdateButtonColor");

	Params::ELEVATOR_Base_C_UpdateButtonColor Parms{};

	Parms.ButtonIndex = ButtonIndex;
	Parms.ButtonState = ButtonState;

	UObject::ProcessEvent(Func, &Parms);
}


// Function ELEVATOR_Base.ELEVATOR_Base_C.GetMoveDirectionVector
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// class FName                             TargetLevel_0                                          (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FVector                          Direction                                              (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void AELEVATOR_Base_C::GetMoveDirectionVector(class FName TargetLevel_0, struct FVector* Direction)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ELEVATOR_Base_C", "GetMoveDirectionVector");

	Params::ELEVATOR_Base_C_GetMoveDirectionVector Parms{};

	Parms.TargetLevel_0 = TargetLevel_0;

	UObject::ProcessEvent(Func, &Parms);

	if (Direction != nullptr)
		*Direction = std::move(Parms.Direction);
}


// Function ELEVATOR_Base.ELEVATOR_Base_C.OnCinematicLevelLoaded
// (Protected, BlueprintCallable, BlueprintEvent)

void AELEVATOR_Base_C::OnCinematicLevelLoaded()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ELEVATOR_Base_C", "OnCinematicLevelLoaded");

	UObject::ProcessEvent(Func, nullptr);
}


// Function ELEVATOR_Base.ELEVATOR_Base_C.UpdateElevatorAudibility
// (Protected, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    AudibilityState                                        (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)

void AELEVATOR_Base_C::UpdateElevatorAudibility(bool AudibilityState)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ELEVATOR_Base_C", "UpdateElevatorAudibility");

	Params::ELEVATOR_Base_C_UpdateElevatorAudibility Parms{};

	Parms.AudibilityState = AudibilityState;

	UObject::ProcessEvent(Func, &Parms);
}


// Function ELEVATOR_Base.ELEVATOR_Base_C.TryStartAtmosphereTransition
// (Protected, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    Result                                                 (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void AELEVATOR_Base_C::TryStartAtmosphereTransition(bool* Result)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ELEVATOR_Base_C", "TryStartAtmosphereTransition");

	Params::ELEVATOR_Base_C_TryStartAtmosphereTransition Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (Result != nullptr)
		*Result = Parms.Result;
}


// Function ELEVATOR_Base.ELEVATOR_Base_C.EVENT_UpdateAtmosphereSettings
// (Protected, HasDefaults, BlueprintCallable, BlueprintEvent)

void AELEVATOR_Base_C::EVENT_UpdateAtmosphereSettings()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ELEVATOR_Base_C", "EVENT_UpdateAtmosphereSettings");

	UObject::ProcessEvent(Func, nullptr);
}


// Function ELEVATOR_Base.ELEVATOR_Base_C.TryUnselectActiveControlButton
// (Protected, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    Result                                                 (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void AELEVATOR_Base_C::TryUnselectActiveControlButton(bool* Result)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ELEVATOR_Base_C", "TryUnselectActiveControlButton");

	Params::ELEVATOR_Base_C_TryUnselectActiveControlButton Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (Result != nullptr)
		*Result = Parms.Result;
}


// Function ELEVATOR_Base.ELEVATOR_Base_C.TryStartElevatorMusic
// (Protected, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    Result                                                 (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void AELEVATOR_Base_C::TryStartElevatorMusic(bool* Result)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ELEVATOR_Base_C", "TryStartElevatorMusic");

	Params::ELEVATOR_Base_C_TryStartElevatorMusic Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (Result != nullptr)
		*Result = Parms.Result;
}


// Function ELEVATOR_Base.ELEVATOR_Base_C.TryStopElevatorMusic
// (Protected, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    Result                                                 (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void AELEVATOR_Base_C::TryStopElevatorMusic(bool* Result)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ELEVATOR_Base_C", "TryStopElevatorMusic");

	Params::ELEVATOR_Base_C_TryStopElevatorMusic Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (Result != nullptr)
		*Result = Parms.Result;
}


// Function ELEVATOR_Base.ELEVATOR_Base_C.PlayElevatorStartSoundFX
// (Protected, BlueprintCallable, BlueprintEvent)

void AELEVATOR_Base_C::PlayElevatorStartSoundFX()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ELEVATOR_Base_C", "PlayElevatorStartSoundFX");

	UObject::ProcessEvent(Func, nullptr);
}


// Function ELEVATOR_Base.ELEVATOR_Base_C.PlayElevatorStopSoundFX
// (Protected, BlueprintCallable, BlueprintEvent)

void AELEVATOR_Base_C::PlayElevatorStopSoundFX()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ELEVATOR_Base_C", "PlayElevatorStopSoundFX");

	UObject::ProcessEvent(Func, nullptr);
}


// Function ELEVATOR_Base.ELEVATOR_Base_C.TryStreamInTargetLevelCollection
// (Protected, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    Result                                                 (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void AELEVATOR_Base_C::TryStreamInTargetLevelCollection(bool* Result)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ELEVATOR_Base_C", "TryStreamInTargetLevelCollection");

	Params::ELEVATOR_Base_C_TryStreamInTargetLevelCollection Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (Result != nullptr)
		*Result = Parms.Result;
}


// Function ELEVATOR_Base.ELEVATOR_Base_C.SetHackerPassengerPawn
// (Protected, BlueprintCallable, BlueprintEvent)
// Parameters:
// class APAWN_Hacker_Implant_C*           HackerPawn                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void AELEVATOR_Base_C::SetHackerPassengerPawn(class APAWN_Hacker_Implant_C* HackerPawn)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ELEVATOR_Base_C", "SetHackerPassengerPawn");

	Params::ELEVATOR_Base_C_SetHackerPassengerPawn Parms{};

	Parms.HackerPawn = HackerPawn;

	UObject::ProcessEvent(Func, &Parms);
}


// Function ELEVATOR_Base.ELEVATOR_Base_C.EVENT_OnHackerPassengerDied
// (Private, BlueprintCallable, BlueprintEvent)
// Parameters:
// class APAWN_SystemShockCharacter_C*     Character                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void AELEVATOR_Base_C::EVENT_OnHackerPassengerDied(class APAWN_SystemShockCharacter_C* Character)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ELEVATOR_Base_C", "EVENT_OnHackerPassengerDied");

	Params::ELEVATOR_Base_C_EVENT_OnHackerPassengerDied Parms{};

	Parms.Character = Character;

	UObject::ProcessEvent(Func, &Parms);
}


// Function ELEVATOR_Base.ELEVATOR_Base_C.EVENT_OnCinematicFinished
// (Private, BlueprintCallable, BlueprintEvent)

void AELEVATOR_Base_C::EVENT_OnCinematicFinished()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ELEVATOR_Base_C", "EVENT_OnCinematicFinished");

	UObject::ProcessEvent(Func, nullptr);
}


// Function ELEVATOR_Base.ELEVATOR_Base_C.EVENT_OnPublicAddressStateChanged
// (Private, BlueprintCallable, BlueprintEvent)
// Parameters:
// class USoundCue*                        SoundCue                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// TSoftObjectPtr<class UTexture2D>        PortraitTexture                                        (BlueprintVisible, BlueprintReadOnly, Parm, HasGetValueTypeHash)
// int32                                   RowCount                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// int32                                   ColCount                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// int32                                   FrameRate                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void AELEVATOR_Base_C::EVENT_OnPublicAddressStateChanged(class USoundCue* SoundCue, TSoftObjectPtr<class UTexture2D> PortraitTexture, int32 RowCount, int32 ColCount, int32 FrameRate)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ELEVATOR_Base_C", "EVENT_OnPublicAddressStateChanged");

	Params::ELEVATOR_Base_C_EVENT_OnPublicAddressStateChanged Parms{};

	Parms.SoundCue = SoundCue;
	Parms.PortraitTexture = PortraitTexture;
	Parms.RowCount = RowCount;
	Parms.ColCount = ColCount;
	Parms.FrameRate = FrameRate;

	UObject::ProcessEvent(Func, &Parms);
}


// Function ELEVATOR_Base.ELEVATOR_Base_C.EVENT_OnDisableAttribChanged
// (Private, BlueprintCallable, BlueprintEvent)
// Parameters:
// float                                   CurrValue                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// float                                   LastValue                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void AELEVATOR_Base_C::EVENT_OnDisableAttribChanged(float CurrValue, float LastValue)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ELEVATOR_Base_C", "EVENT_OnDisableAttribChanged");

	Params::ELEVATOR_Base_C_EVENT_OnDisableAttribChanged Parms{};

	Parms.CurrValue = CurrValue;
	Parms.LastValue = LastValue;

	UObject::ProcessEvent(Func, &Parms);
}


// Function ELEVATOR_Base.ELEVATOR_Base_C.UpdateControlLockState
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    IsLocked                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)

void AELEVATOR_Base_C::UpdateControlLockState(bool IsLocked)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ELEVATOR_Base_C", "UpdateControlLockState");

	Params::ELEVATOR_Base_C_UpdateControlLockState Parms{};

	Parms.IsLocked = IsLocked;

	UObject::ProcessEvent(Func, &Parms);
}


// Function ELEVATOR_Base.ELEVATOR_Base_C.EVENT_OnStoryQuestChanged
// (Private, BlueprintCallable, BlueprintEvent)
// Parameters:
// class FName                             StoryQuestName                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    Value                                                  (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)

void AELEVATOR_Base_C::EVENT_OnStoryQuestChanged(class FName StoryQuestName, bool Value)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ELEVATOR_Base_C", "EVENT_OnStoryQuestChanged");

	Params::ELEVATOR_Base_C_EVENT_OnStoryQuestChanged Parms{};

	Parms.StoryQuestName = StoryQuestName;
	Parms.Value = Value;

	UObject::ProcessEvent(Func, &Parms);
}

}

