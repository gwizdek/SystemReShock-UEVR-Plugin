#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: FUNCLIB_Combat

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "Engine_classes.hpp"
#include "ENUM_EnemyAttackType_structs.hpp"
#include "ENUM_GameDifficulty_structs.hpp"


namespace SDK
{

// BlueprintGeneratedClass FUNCLIB_Combat.FUNCLIB_Combat_C
// 0x0000 (0x0028 - 0x0028)
class UFUNCLIB_Combat_C final : public UBlueprintFunctionLibrary
{
public:
	static void HasClearShotToTargetFromLocation(class APAWN_Enemy_C* Enemy, const struct FVector& BarrelLocation, float BulletRadius, class UObject* __WorldContext, bool* Result);
	static void HasClearShotToTargetFromSocket(class APAWN_Enemy_C* Enemy, class FName BarrelSocket, float BulletRadius, class UObject* __WorldContext, bool* Result);
	static void GetEffectiveArmorRatioFromDamage(const struct FAttribDamageInstance& DamageInstance, class UObject* __WorldContext, float* BlockRatio);
	static void GetMaxCombatTraceDistance(class UObject* __WorldContext, float* Distance);
	static void GetSkillTargetAimLocation(class APAWN_Enemy_C* SourcePawn, class UObject* __WorldContext, struct FVector* Locations);
	static void GetScaledCombatDamage(int32 BaseDamage, bool IsCyberspace, class UObject* __WorldContext, int32* DamageValue);
	static void GetScaledEnemyStatsDamage(const struct FDataTableRowHandle& EnemyStatsRowHandle, ENUM_EnemyAttackType AttackType, class UObject* __WorldContext, int32* DamageValue);
	static void GetScaledEnemyDamage(class APAWN_Enemy_C* Pawn, ENUM_EnemyAttackType AttackType, class UObject* __WorldContext, int32* DamageValue);
	static void GetSolidShieldPhysicalMaterial(class UObject* __WorldContext, class UPhysicalMaterial** Result);
	static void GetPermeableShieldPhysicalMaterial(class UObject* __WorldContext, class UPhysicalMaterial** Result);
	static void GetAccuracyAdjustedRandomTargetDirection(const struct FVector& BarrelLocation, const struct FVector& TargetLocation, float Accuracy, const struct FVector2D& MinMaxSpreadRadius, float MaxRangeForSpreadCals, class UObject* __WorldContext, struct FVector* AdjustedTargetDirection);
	static void GetRandomWeaponSpreadDirection(const struct FVector& BarrelDirection, float SpreadHalfAngle, class UObject* __WorldContext, struct FVector* SpreadDirection);
	static void GetExactWeaponSpreadDirection(const struct FVector& BarrelDirection, float ActualDeviationAngle, class UObject* __WorldContext, struct FVector* SpreadDirection);
	static void GetLaunchVelocityForProjectile(float Speed, const struct FVector& VectorToTarget, float Gravity, class UObject* __WorldContext, struct FVector* Veclocity);
	static void ApplyExplosiveDamageAndImpulse(const struct FVector& BlastLocation, float BlastRadius, float BlastImpulse, float MinimumDamage, float MaximumDamage, int32 ArmorPenetration, class AActor* IgnoreActor, bool IgnoreSameInstigator, class UObject* __WorldContext, TMap<class UAttribMod*, struct FAttribDamageInstance>* DamageInstances);
	static void ApplyRadialDamageAndImpulse(const struct FVector& BlastLocation, float BlastRadius, float BlastImpulse, class UAttribDamageType* DamageType, float MinimumDamage, float MaximumDamage, int32 ArmorPenetration, class AActor* IgnoreActor, bool IgnoreSameInstigator, class UObject* __WorldContext, TMap<class UAttribMod*, struct FAttribDamageInstance>* DamageInstances);
	static void ComputeExplosiveDamageAtDistance(float DistanceFromEpicenter, float BlastRadius, float MinDamage, float MaxDamage, class UObject* __WorldContext, float* Damage);
	static void ComputeExplosiveImpulseAtDistance(float DistanceFromEpicenter, float BlastRadius, float BlastImpulse, class UObject* __WorldContext, float* Impulse);
	static void GetRequiredMuzzleSpeedForBullet(const struct FVector& BarrelDirection, const struct FVector& VectorToTarget, float Gravity, class UObject* __WorldContext, float* Result);
	static void DamageCharacterShieldsAlongRay(const struct FVector& TraceLocation, const struct FVector& TraceDirection, float TraceDistance, float ProjectileRadius, float DamageValue, TArray<class AActor*>& IgnoreActors, class APAWN_SystemShockCharacter_C* TraceHitCharacter, TSet<class APAWN_SystemShockCharacter_C*>& InOutHitCharacters, class UObject* __WorldContext, bool* BlockingHit, struct FHitResult* HitResult);
	static void GetForceFeedbackExplosionAttenuation(float BlastRadius, class UObject* __WorldContext, class UForceFeedbackAttenuation** Attenuation);
	static void GetComponentOriginForExplosiveDamage(class UPrimitiveComponent* PrimitiveComponent, class UObject* __WorldContext, struct FVector* Origin);
	static void TryDamageSpecificCharacterShieldsAlongRay(class APAWN_SystemShockCharacter_C* Character, const struct FVector& TraceLocation, const struct FVector& TraceDirection, float TraceDistance, float ImpactRadius, float DamageValue, class APAWN_SystemShockCharacter_C* TraceHitCharacter, class UObject* __WorldContext, bool* ShieldHit, bool* BlockingHit, struct FHitResult* HitResult);
	static void GetBestAimTargetLocation(const struct FVector& BarrelLocation, class UOBJ_EnemyTarget_C* Target, class UObject* __WorldContext, struct FVector* BestTargetLocation);
	static void ClampDirectionInCone(const struct FVector& TargetDirection, const struct FVector& ConeDirection, float ConeAngle, class UObject* __WorldContext, struct FVector* ClampedDirection);

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"FUNCLIB_Combat_C">();
	}
	static class UFUNCLIB_Combat_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<UFUNCLIB_Combat_C>();
	}
};
static_assert(alignof(UFUNCLIB_Combat_C) == 0x000008, "Wrong alignment on UFUNCLIB_Combat_C");
static_assert(sizeof(UFUNCLIB_Combat_C) == 0x000028, "Wrong size on UFUNCLIB_Combat_C");

}

