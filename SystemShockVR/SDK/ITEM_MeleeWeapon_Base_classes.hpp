#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: ITEM_MeleeWeapon_Base

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "ENUM_LeftRightCenter_structs.hpp"
#include "ITEM_WeaponBase_classes.hpp"
#include "ENUM_Melee_AttackState_structs.hpp"


namespace SDK
{

// BlueprintGeneratedClass ITEM_MeleeWeapon_Base.ITEM_MeleeWeapon_Base_C
// 0x04F0 (0x0840 - 0x0350)
class UITEM_MeleeWeapon_Base_C : public UITEM_WeaponBase_C
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame_ITEM_MeleeWeapon_Base_C;            // 0x0350(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	class UDataTable*                             ImpactTable;                                       // 0x0358(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UForceFeedbackEffect*                   SoftImpactForceFeedback;                           // 0x0360(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UForceFeedbackEffect*                   MediumImpactForceFeedback;                         // 0x0368(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UForceFeedbackEffect*                   HardImpactForceFeedback;                           // 0x0370(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         TraceInterval;                                     // 0x0378(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         TraceSpacing;                                      // 0x037C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         BloodLevel;                                        // 0x0380(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_384[0x4];                                      // 0x0384(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTimerHandle                           DamageTraceTimerHandle;                            // 0x0388(0x0008)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	int32                                         StaminaDrainPerAttack;                             // 0x0390(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         StaminaDrainPerHit;                                // 0x0394(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         ChargeStaminaDrainPerSecond;                       // 0x0398(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         LastFastAttackMontageIndex;                        // 0x039C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TArray<class UAnimMontage*>                   CachedFastRightSwingMontages;                      // 0x03A0(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance)
	TArray<class UAnimMontage*>                   CachedFastRightSwingMontages_Berserk;              // 0x03B0(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance)
	TArray<class UAnimMontage*>                   CachedPowerSwingToReadyMontages;                   // 0x03C0(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance)
	TArray<class UAnimMontage*>                   CachedPowerSwingToReadyMontages_Berserk;           // 0x03D0(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance)
	TArray<class UAnimMontage*>                   CachedDeflectionMontages;                          // 0x03E0(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance)
	TSoftObjectPtr<class UAnimMontage>            FastSwingRightToLeftMontage;                       // 0x03F0(0x0028)(Edit, BlueprintVisible, DisableEditOnInstance, HasGetValueTypeHash)
	TSoftObjectPtr<class UAnimMontage>            FastSwingRightToLeftMontageVar1;                   // 0x0418(0x0028)(Edit, BlueprintVisible, DisableEditOnInstance, HasGetValueTypeHash)
	TSoftObjectPtr<class UAnimMontage>            FastSwingRightToLeftMontage_Berserk;               // 0x0440(0x0028)(Edit, BlueprintVisible, DisableEditOnInstance, HasGetValueTypeHash)
	TSoftObjectPtr<class UAnimMontage>            FastSwingRightToLeftMontageVar1_Berserk;           // 0x0468(0x0028)(Edit, BlueprintVisible, DisableEditOnInstance, HasGetValueTypeHash)
	TSoftObjectPtr<class UAnimMontage>            FastSwingRightToLeftMontageVar2_Berserk;           // 0x0490(0x0028)(Edit, BlueprintVisible, DisableEditOnInstance, HasGetValueTypeHash)
	TSoftObjectPtr<class UAnimMontage>            PowerSwingLeftToReadyRightMontage;                 // 0x04B8(0x0028)(Edit, BlueprintVisible, DisableEditOnInstance, HasGetValueTypeHash)
	TSoftObjectPtr<class UAnimMontage>            PowerSwingLeftToReadyRightMontage_Berserk;         // 0x04E0(0x0028)(Edit, BlueprintVisible, DisableEditOnInstance, HasGetValueTypeHash)
	TSoftObjectPtr<class UAnimMontage>            PowerSwingRightToReadyLeftMontage;                 // 0x0508(0x0028)(Edit, BlueprintVisible, DisableEditOnInstance, HasGetValueTypeHash)
	TSoftObjectPtr<class UAnimMontage>            PowerSwingRightToReadyLeftMontage_Berserk;         // 0x0530(0x0028)(Edit, BlueprintVisible, DisableEditOnInstance, HasGetValueTypeHash)
	TSoftObjectPtr<class UAnimMontage>            SwingLeftDeflectionMontage;                        // 0x0558(0x0028)(Edit, BlueprintVisible, DisableEditOnInstance, HasGetValueTypeHash)
	TSoftObjectPtr<class UAnimMontage>            SwingRightDeflectionMontage;                       // 0x0580(0x0028)(Edit, BlueprintVisible, DisableEditOnInstance, HasGetValueTypeHash)
	TSoftObjectPtr<class UAnimMontage>            IdleToReadyMontage;                                // 0x05A8(0x0028)(Edit, BlueprintVisible, DisableEditOnInstance, HasGetValueTypeHash)
	TSoftObjectPtr<class UAnimMontage>            IdleToReadyMontage_Berserk;                        // 0x05D0(0x0028)(Edit, BlueprintVisible, DisableEditOnInstance, HasGetValueTypeHash)
	TSoftObjectPtr<class UAnimMontage>            PowerSwingLeftToIdleMontage;                       // 0x05F8(0x0028)(Edit, BlueprintVisible, DisableEditOnInstance, HasGetValueTypeHash)
	TSoftObjectPtr<class UAnimMontage>            PowerSwingLeftToIdleMontage_Berserk;               // 0x0620(0x0028)(Edit, BlueprintVisible, DisableEditOnInstance, HasGetValueTypeHash)
	TSoftObjectPtr<class UAnimMontage>            PowerSwingRightToIdleMontage;                      // 0x0648(0x0028)(Edit, BlueprintVisible, DisableEditOnInstance, HasGetValueTypeHash)
	TSoftObjectPtr<class UAnimMontage>            PowerSwingRightToIdleMontage_Berserk;              // 0x0670(0x0028)(Edit, BlueprintVisible, DisableEditOnInstance, HasGetValueTypeHash)
	TSoftObjectPtr<class UAnimSequenceBase>       ReadyAtLeftIdleSequence;                           // 0x0698(0x0028)(Edit, BlueprintVisible, DisableEditOnInstance, HasGetValueTypeHash)
	TSoftObjectPtr<class UAnimSequenceBase>       ReadyAtLeftIdleSequence_Berserk;                   // 0x06C0(0x0028)(Edit, BlueprintVisible, DisableEditOnInstance, HasGetValueTypeHash)
	TSoftObjectPtr<class UAnimSequenceBase>       ReadyAtRightIdleSequence;                          // 0x06E8(0x0028)(Edit, BlueprintVisible, DisableEditOnInstance, HasGetValueTypeHash)
	class UAnimMontage*                           CachedIdleToReadyMontage_Berserk;                  // 0x0710(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TArray<class UAnimMontage*>                   CachedPowerSwingToIdleMontages;                    // 0x0718(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance)
	TArray<class UAnimMontage*>                   CachedPowerSwingToIdleMontages_Berserk;            // 0x0728(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance)
	TArray<class UAnimSequenceBase*>              CachedReadySequences;                              // 0x0738(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance)
	class UAttribMod*                             StaminaDrainMod;                                   // 0x0748(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UAttribMod*                             StaminaRegenScaleMod;                              // 0x0750(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TArray<class AActor*>                         HitActors;                                         // 0x0758(0x0010)(Edit, BlueprintVisible, DisableEditOnTemplate, DisableEditOnInstance, SaveGame)
	class FName                                   TraceSocketName;                                   // 0x0768(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ENUM_LeftRightCenter                          ReadySide;                                         // 0x0770(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CanPowerSwing;                                     // 0x0771(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          HasPaidCosts;                                      // 0x0772(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_773[0x5];                                      // 0x0773(0x0005)(Fixing Size After Last Property [ Dumper-7 ])
	TSoftObjectPtr<class UAnimSequenceBase>       ReadyAtRightIdleSequence_Berserk;                  // 0x0778(0x0028)(Edit, BlueprintVisible, DisableEditOnInstance, HasGetValueTypeHash)
	TSoftObjectPtr<class UAnimMontage>            DrawMontage_Berserk;                               // 0x07A0(0x0028)(Edit, BlueprintVisible, DisableEditOnInstance, HasGetValueTypeHash)
	TArray<class UAnimSequenceBase*>              CachedReadySequences_Berserk;                      // 0x07C8(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance)
	class UAnimMontage*                           CachedIdleToReadyMontage;                          // 0x07D8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UAnimMontage*                           CachedDrawMontage_Berserk;                         // 0x07E0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UAnimMontage*                           CachedHolsterMontage_Berserk;                      // 0x07E8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          IsBerserk;                                         // 0x07F0(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_7F1[0x7];                                      // 0x07F1(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UAnimSequence*                          BerserkIdleSequence;                               // 0x07F8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UAnimSequence*                          BerserkWalkSequence;                               // 0x0800(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UAnimSequence*                          BerserkSprintSequence;                             // 0x0808(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TSoftObjectPtr<class UAnimMontage>            HolsterMontage_Berserk;                            // 0x0810(0x0028)(Edit, BlueprintVisible, DisableEditOnInstance, HasGetValueTypeHash)
	bool                                          WantsToBerserk;                                    // 0x0838(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          DebugDamageTraces;                                 // 0x0839(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)

public:
	void ExecuteUbergraph_ITEM_MeleeWeapon_Base(int32 EntryPoint);
	void BlockingLoadHolsterMontage();
	void BlockingLoadDrawMontage();
	void StreamWeaponMontages();
	void OnLoaded_BF4F88A34994C51C2949BE9E06873B54(class UObject* Loaded);
	void OnLoaded_5415F73B4C35EFE89A4BDBA0F09EC5D0(class UObject* Loaded);
	void OnLoaded_EB9BD030479CFA900F893895CAA6B03C(class UObject* Loaded);
	void OnLoaded_A7E476444512FF2A0BAF2693C25472E8(class UObject* Loaded);
	void OnLoaded_DE49310846B18D7614C2458EB90C8184(class UObject* Loaded);
	void OnLoaded_23ED0E8A4618A3B0828F3AA66D8770A9(class UObject* Loaded);
	void OnLoaded_2109820D423AAF42CBDBEC85B310758F(class UObject* Loaded);
	void OnLoaded_0F647D324DC221E1A38E109AA3A219BA(class UObject* Loaded);
	void OnLoaded_47F862DA47E0CD66F3E0F78B89E9BBCD(class UObject* Loaded);
	void OnLoaded_47642BA3476A94AB027B2C83CFF340F8(class UObject* Loaded);
	void OnLoaded_4D26AB9C4F21927A2E6DF49D7C6C7A21(class UObject* Loaded);
	void OnLoaded_000135F04F33DC18B1352299F3CA8B17(class UObject* Loaded);
	void OnLoaded_72F7BB7D4863681FBB3ED0AA29960BF5(class UObject* Loaded);
	void OnLoaded_9B6389294532F6A052EAB2976A865025(class UObject* Loaded);
	void OnLoaded_848487CC474BF585C437C686F5FC4D21(class UObject* Loaded);
	void OnLoaded_ED2671B8448B718409671692335F0A23(class UObject* Loaded);
	void OnLoaded_E56CF88547BC252187FC7089101027B3(class UObject* Loaded);
	void OnLoaded_E216C46248AE00584B2B919B46744778(class UObject* Loaded);
	void OnLoaded_46B1808F43B0339B7AEB0DA27309AE74(class UObject* Loaded);
	void OnLoaded_AE7C491542C1ABC54B73B39CB20F719E(class UObject* Loaded);
	void OnLoaded_D214A342418ADD2E31E861B03015C8CD(class UObject* Loaded);
	void OnLoaded_2BFA87CB48385D255BA5A9BE501A964C(class UObject* Loaded);
	void IsSlicingAttack(bool* Result);
	void GetDamageTraceWorldOffset(const struct FIntPoint& LocalOffset, struct FVector* WorldOffset);
	void GetDeflectionMontage(ENUM_LeftRightCenter Side, class UAnimMontage** DeflectionMontage);
	void PerformSpiralDamageTrace();
	void DamageTraceWithOffsetFromCamera(const struct FIntPoint& Offset, bool* Result);
	void DamageTraceWithOffsetFromSocket(const struct FIntPoint& Offset, bool* Result);
	void TryDealDamageFromHitResult(const struct FHitResult& HitResult, bool* Hit);
	void CreateMeleeImpactForceFeedback(const struct FHitResult& Hit, bool IsStrongSwing);
	void SetIdleSequence(ENUM_LeftRightCenter Side);
	void GetPowerSwingToReadyMontage(ENUM_LeftRightCenter Side, class UAnimMontage** Montage);
	void GetPowerSwingToIdleMontage(ENUM_LeftRightCenter Side, class UAnimMontage** Montage);
	void GetIdleToReadyMontage(class UAnimMontage** Montage);
	void GetRandomFastAttack(class UAnimMontage** Montage);
	void EVENT_TryStartPowerSwingToReadyToSwing();
	void EVENT_TryStartPowerSwingToReady();
	void SetWeaponSide(ENUM_LeftRightCenter Side);
	void GetRandomFastAttackFromMontages(TArray<class UAnimMontage*>& Montages, class UAnimMontage** Montage);
	void GetFastAttackMontageIndex(class UAnimMontage* Montage, int32* Index_0);
	void GetCurrentState(ENUM_Melee_AttackState* State);
	void GetOppositeSide(ENUM_LeftRightCenter Side, ENUM_LeftRightCenter* Opposite);
	void EVENT_TryStartPowerSwingToIdle();
	void GetSwingActionStartSide(ENUM_LeftRightCenter* Side);
	void ResetMeleeWeaponState();
	void UpdateStaminaDrainMod();
	void EnableDamage(bool* Result);
	void DisableDamage(bool* Result);
	void CalcDamageAndArmorPenetration(float DamageScale, bool IsStrongSwing, class UAttribDamageType** DamageType, float* Damage, float* ArmorPenetration);
	void ChangeMeleeEventBindings(bool Enable);
	void EVENT_OnStaminaDepleted();
	void EVENT_OnBerserkAttribChanged(float CurrValue, float LastValue);
	void EVENT_OnActionStarted(class UCharacterAction_C* Action);
	void OnStartedMeleeAttack(bool IsPowerSwing);
	void OnWeaponBecameActivatable(class APAWN_SystemShockCharacter_C* Character, bool ShowImmediately);
	void HasBerserkAttribute(bool* Result);
	void OnKilledCharacter(class APAWN_SystemShockCharacter_C* KilledCharacter);
	void TryEndBerserk(bool* Result);
	void GetWeaponMode(int32 Index_0, struct FSTRUCT_WeaponMode* Mode);
	void EVENT_OnActionEnded(class UCharacterAction_C* Action);
	void GetMeleeWeaponRange(int32* Range);
	void GetOwnerHeadTransform(struct FTransform* Result);
	void EVENT_OnImpactEffectsSpawned(class UObject* Object);
	void GetTraceSocketName(class FName* Result);
	void CanAimWithWeapon(bool* Result);
	void GetDrawMontage(class UAnimMontage** Montage);
	void GetHolsterMontage(class UAnimMontage** Montage);
	void GetIdleSequence(class UAnimSequenceBase** Result);
	void GetWalkSequence(class UAnimSequenceBase** Result);
	void GetSprintSequence(class UAnimSequenceBase** Result);
	void OnBecomeActivatable(bool* Result);
	void OnBecomeUnactivatable(bool* Result);
	void Activate(class APAWN_SystemShockCharacter_C* Character, bool* Result);
	void Deactivate(bool* Result);
	void CanActivate(class APAWN_SystemShockCharacter_C* Character, bool* Result);

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"ITEM_MeleeWeapon_Base_C">();
	}
	static class UITEM_MeleeWeapon_Base_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<UITEM_MeleeWeapon_Base_C>();
	}
};
static_assert(alignof(UITEM_MeleeWeapon_Base_C) == 0x000008, "Wrong alignment on UITEM_MeleeWeapon_Base_C");
static_assert(sizeof(UITEM_MeleeWeapon_Base_C) == 0x000840, "Wrong size on UITEM_MeleeWeapon_Base_C");
static_assert(offsetof(UITEM_MeleeWeapon_Base_C, UberGraphFrame_ITEM_MeleeWeapon_Base_C) == 0x000350, "Member 'UITEM_MeleeWeapon_Base_C::UberGraphFrame_ITEM_MeleeWeapon_Base_C' has a wrong offset!");
static_assert(offsetof(UITEM_MeleeWeapon_Base_C, ImpactTable) == 0x000358, "Member 'UITEM_MeleeWeapon_Base_C::ImpactTable' has a wrong offset!");
static_assert(offsetof(UITEM_MeleeWeapon_Base_C, SoftImpactForceFeedback) == 0x000360, "Member 'UITEM_MeleeWeapon_Base_C::SoftImpactForceFeedback' has a wrong offset!");
static_assert(offsetof(UITEM_MeleeWeapon_Base_C, MediumImpactForceFeedback) == 0x000368, "Member 'UITEM_MeleeWeapon_Base_C::MediumImpactForceFeedback' has a wrong offset!");
static_assert(offsetof(UITEM_MeleeWeapon_Base_C, HardImpactForceFeedback) == 0x000370, "Member 'UITEM_MeleeWeapon_Base_C::HardImpactForceFeedback' has a wrong offset!");
static_assert(offsetof(UITEM_MeleeWeapon_Base_C, TraceInterval) == 0x000378, "Member 'UITEM_MeleeWeapon_Base_C::TraceInterval' has a wrong offset!");
static_assert(offsetof(UITEM_MeleeWeapon_Base_C, TraceSpacing) == 0x00037C, "Member 'UITEM_MeleeWeapon_Base_C::TraceSpacing' has a wrong offset!");
static_assert(offsetof(UITEM_MeleeWeapon_Base_C, BloodLevel) == 0x000380, "Member 'UITEM_MeleeWeapon_Base_C::BloodLevel' has a wrong offset!");
static_assert(offsetof(UITEM_MeleeWeapon_Base_C, DamageTraceTimerHandle) == 0x000388, "Member 'UITEM_MeleeWeapon_Base_C::DamageTraceTimerHandle' has a wrong offset!");
static_assert(offsetof(UITEM_MeleeWeapon_Base_C, StaminaDrainPerAttack) == 0x000390, "Member 'UITEM_MeleeWeapon_Base_C::StaminaDrainPerAttack' has a wrong offset!");
static_assert(offsetof(UITEM_MeleeWeapon_Base_C, StaminaDrainPerHit) == 0x000394, "Member 'UITEM_MeleeWeapon_Base_C::StaminaDrainPerHit' has a wrong offset!");
static_assert(offsetof(UITEM_MeleeWeapon_Base_C, ChargeStaminaDrainPerSecond) == 0x000398, "Member 'UITEM_MeleeWeapon_Base_C::ChargeStaminaDrainPerSecond' has a wrong offset!");
static_assert(offsetof(UITEM_MeleeWeapon_Base_C, LastFastAttackMontageIndex) == 0x00039C, "Member 'UITEM_MeleeWeapon_Base_C::LastFastAttackMontageIndex' has a wrong offset!");
static_assert(offsetof(UITEM_MeleeWeapon_Base_C, CachedFastRightSwingMontages) == 0x0003A0, "Member 'UITEM_MeleeWeapon_Base_C::CachedFastRightSwingMontages' has a wrong offset!");
static_assert(offsetof(UITEM_MeleeWeapon_Base_C, CachedFastRightSwingMontages_Berserk) == 0x0003B0, "Member 'UITEM_MeleeWeapon_Base_C::CachedFastRightSwingMontages_Berserk' has a wrong offset!");
static_assert(offsetof(UITEM_MeleeWeapon_Base_C, CachedPowerSwingToReadyMontages) == 0x0003C0, "Member 'UITEM_MeleeWeapon_Base_C::CachedPowerSwingToReadyMontages' has a wrong offset!");
static_assert(offsetof(UITEM_MeleeWeapon_Base_C, CachedPowerSwingToReadyMontages_Berserk) == 0x0003D0, "Member 'UITEM_MeleeWeapon_Base_C::CachedPowerSwingToReadyMontages_Berserk' has a wrong offset!");
static_assert(offsetof(UITEM_MeleeWeapon_Base_C, CachedDeflectionMontages) == 0x0003E0, "Member 'UITEM_MeleeWeapon_Base_C::CachedDeflectionMontages' has a wrong offset!");
static_assert(offsetof(UITEM_MeleeWeapon_Base_C, FastSwingRightToLeftMontage) == 0x0003F0, "Member 'UITEM_MeleeWeapon_Base_C::FastSwingRightToLeftMontage' has a wrong offset!");
static_assert(offsetof(UITEM_MeleeWeapon_Base_C, FastSwingRightToLeftMontageVar1) == 0x000418, "Member 'UITEM_MeleeWeapon_Base_C::FastSwingRightToLeftMontageVar1' has a wrong offset!");
static_assert(offsetof(UITEM_MeleeWeapon_Base_C, FastSwingRightToLeftMontage_Berserk) == 0x000440, "Member 'UITEM_MeleeWeapon_Base_C::FastSwingRightToLeftMontage_Berserk' has a wrong offset!");
static_assert(offsetof(UITEM_MeleeWeapon_Base_C, FastSwingRightToLeftMontageVar1_Berserk) == 0x000468, "Member 'UITEM_MeleeWeapon_Base_C::FastSwingRightToLeftMontageVar1_Berserk' has a wrong offset!");
static_assert(offsetof(UITEM_MeleeWeapon_Base_C, FastSwingRightToLeftMontageVar2_Berserk) == 0x000490, "Member 'UITEM_MeleeWeapon_Base_C::FastSwingRightToLeftMontageVar2_Berserk' has a wrong offset!");
static_assert(offsetof(UITEM_MeleeWeapon_Base_C, PowerSwingLeftToReadyRightMontage) == 0x0004B8, "Member 'UITEM_MeleeWeapon_Base_C::PowerSwingLeftToReadyRightMontage' has a wrong offset!");
static_assert(offsetof(UITEM_MeleeWeapon_Base_C, PowerSwingLeftToReadyRightMontage_Berserk) == 0x0004E0, "Member 'UITEM_MeleeWeapon_Base_C::PowerSwingLeftToReadyRightMontage_Berserk' has a wrong offset!");
static_assert(offsetof(UITEM_MeleeWeapon_Base_C, PowerSwingRightToReadyLeftMontage) == 0x000508, "Member 'UITEM_MeleeWeapon_Base_C::PowerSwingRightToReadyLeftMontage' has a wrong offset!");
static_assert(offsetof(UITEM_MeleeWeapon_Base_C, PowerSwingRightToReadyLeftMontage_Berserk) == 0x000530, "Member 'UITEM_MeleeWeapon_Base_C::PowerSwingRightToReadyLeftMontage_Berserk' has a wrong offset!");
static_assert(offsetof(UITEM_MeleeWeapon_Base_C, SwingLeftDeflectionMontage) == 0x000558, "Member 'UITEM_MeleeWeapon_Base_C::SwingLeftDeflectionMontage' has a wrong offset!");
static_assert(offsetof(UITEM_MeleeWeapon_Base_C, SwingRightDeflectionMontage) == 0x000580, "Member 'UITEM_MeleeWeapon_Base_C::SwingRightDeflectionMontage' has a wrong offset!");
static_assert(offsetof(UITEM_MeleeWeapon_Base_C, IdleToReadyMontage) == 0x0005A8, "Member 'UITEM_MeleeWeapon_Base_C::IdleToReadyMontage' has a wrong offset!");
static_assert(offsetof(UITEM_MeleeWeapon_Base_C, IdleToReadyMontage_Berserk) == 0x0005D0, "Member 'UITEM_MeleeWeapon_Base_C::IdleToReadyMontage_Berserk' has a wrong offset!");
static_assert(offsetof(UITEM_MeleeWeapon_Base_C, PowerSwingLeftToIdleMontage) == 0x0005F8, "Member 'UITEM_MeleeWeapon_Base_C::PowerSwingLeftToIdleMontage' has a wrong offset!");
static_assert(offsetof(UITEM_MeleeWeapon_Base_C, PowerSwingLeftToIdleMontage_Berserk) == 0x000620, "Member 'UITEM_MeleeWeapon_Base_C::PowerSwingLeftToIdleMontage_Berserk' has a wrong offset!");
static_assert(offsetof(UITEM_MeleeWeapon_Base_C, PowerSwingRightToIdleMontage) == 0x000648, "Member 'UITEM_MeleeWeapon_Base_C::PowerSwingRightToIdleMontage' has a wrong offset!");
static_assert(offsetof(UITEM_MeleeWeapon_Base_C, PowerSwingRightToIdleMontage_Berserk) == 0x000670, "Member 'UITEM_MeleeWeapon_Base_C::PowerSwingRightToIdleMontage_Berserk' has a wrong offset!");
static_assert(offsetof(UITEM_MeleeWeapon_Base_C, ReadyAtLeftIdleSequence) == 0x000698, "Member 'UITEM_MeleeWeapon_Base_C::ReadyAtLeftIdleSequence' has a wrong offset!");
static_assert(offsetof(UITEM_MeleeWeapon_Base_C, ReadyAtLeftIdleSequence_Berserk) == 0x0006C0, "Member 'UITEM_MeleeWeapon_Base_C::ReadyAtLeftIdleSequence_Berserk' has a wrong offset!");
static_assert(offsetof(UITEM_MeleeWeapon_Base_C, ReadyAtRightIdleSequence) == 0x0006E8, "Member 'UITEM_MeleeWeapon_Base_C::ReadyAtRightIdleSequence' has a wrong offset!");
static_assert(offsetof(UITEM_MeleeWeapon_Base_C, CachedIdleToReadyMontage_Berserk) == 0x000710, "Member 'UITEM_MeleeWeapon_Base_C::CachedIdleToReadyMontage_Berserk' has a wrong offset!");
static_assert(offsetof(UITEM_MeleeWeapon_Base_C, CachedPowerSwingToIdleMontages) == 0x000718, "Member 'UITEM_MeleeWeapon_Base_C::CachedPowerSwingToIdleMontages' has a wrong offset!");
static_assert(offsetof(UITEM_MeleeWeapon_Base_C, CachedPowerSwingToIdleMontages_Berserk) == 0x000728, "Member 'UITEM_MeleeWeapon_Base_C::CachedPowerSwingToIdleMontages_Berserk' has a wrong offset!");
static_assert(offsetof(UITEM_MeleeWeapon_Base_C, CachedReadySequences) == 0x000738, "Member 'UITEM_MeleeWeapon_Base_C::CachedReadySequences' has a wrong offset!");
static_assert(offsetof(UITEM_MeleeWeapon_Base_C, StaminaDrainMod) == 0x000748, "Member 'UITEM_MeleeWeapon_Base_C::StaminaDrainMod' has a wrong offset!");
static_assert(offsetof(UITEM_MeleeWeapon_Base_C, StaminaRegenScaleMod) == 0x000750, "Member 'UITEM_MeleeWeapon_Base_C::StaminaRegenScaleMod' has a wrong offset!");
static_assert(offsetof(UITEM_MeleeWeapon_Base_C, HitActors) == 0x000758, "Member 'UITEM_MeleeWeapon_Base_C::HitActors' has a wrong offset!");
static_assert(offsetof(UITEM_MeleeWeapon_Base_C, TraceSocketName) == 0x000768, "Member 'UITEM_MeleeWeapon_Base_C::TraceSocketName' has a wrong offset!");
static_assert(offsetof(UITEM_MeleeWeapon_Base_C, ReadySide) == 0x000770, "Member 'UITEM_MeleeWeapon_Base_C::ReadySide' has a wrong offset!");
static_assert(offsetof(UITEM_MeleeWeapon_Base_C, CanPowerSwing) == 0x000771, "Member 'UITEM_MeleeWeapon_Base_C::CanPowerSwing' has a wrong offset!");
static_assert(offsetof(UITEM_MeleeWeapon_Base_C, HasPaidCosts) == 0x000772, "Member 'UITEM_MeleeWeapon_Base_C::HasPaidCosts' has a wrong offset!");
static_assert(offsetof(UITEM_MeleeWeapon_Base_C, ReadyAtRightIdleSequence_Berserk) == 0x000778, "Member 'UITEM_MeleeWeapon_Base_C::ReadyAtRightIdleSequence_Berserk' has a wrong offset!");
static_assert(offsetof(UITEM_MeleeWeapon_Base_C, DrawMontage_Berserk) == 0x0007A0, "Member 'UITEM_MeleeWeapon_Base_C::DrawMontage_Berserk' has a wrong offset!");
static_assert(offsetof(UITEM_MeleeWeapon_Base_C, CachedReadySequences_Berserk) == 0x0007C8, "Member 'UITEM_MeleeWeapon_Base_C::CachedReadySequences_Berserk' has a wrong offset!");
static_assert(offsetof(UITEM_MeleeWeapon_Base_C, CachedIdleToReadyMontage) == 0x0007D8, "Member 'UITEM_MeleeWeapon_Base_C::CachedIdleToReadyMontage' has a wrong offset!");
static_assert(offsetof(UITEM_MeleeWeapon_Base_C, CachedDrawMontage_Berserk) == 0x0007E0, "Member 'UITEM_MeleeWeapon_Base_C::CachedDrawMontage_Berserk' has a wrong offset!");
static_assert(offsetof(UITEM_MeleeWeapon_Base_C, CachedHolsterMontage_Berserk) == 0x0007E8, "Member 'UITEM_MeleeWeapon_Base_C::CachedHolsterMontage_Berserk' has a wrong offset!");
static_assert(offsetof(UITEM_MeleeWeapon_Base_C, IsBerserk) == 0x0007F0, "Member 'UITEM_MeleeWeapon_Base_C::IsBerserk' has a wrong offset!");
static_assert(offsetof(UITEM_MeleeWeapon_Base_C, BerserkIdleSequence) == 0x0007F8, "Member 'UITEM_MeleeWeapon_Base_C::BerserkIdleSequence' has a wrong offset!");
static_assert(offsetof(UITEM_MeleeWeapon_Base_C, BerserkWalkSequence) == 0x000800, "Member 'UITEM_MeleeWeapon_Base_C::BerserkWalkSequence' has a wrong offset!");
static_assert(offsetof(UITEM_MeleeWeapon_Base_C, BerserkSprintSequence) == 0x000808, "Member 'UITEM_MeleeWeapon_Base_C::BerserkSprintSequence' has a wrong offset!");
static_assert(offsetof(UITEM_MeleeWeapon_Base_C, HolsterMontage_Berserk) == 0x000810, "Member 'UITEM_MeleeWeapon_Base_C::HolsterMontage_Berserk' has a wrong offset!");
static_assert(offsetof(UITEM_MeleeWeapon_Base_C, WantsToBerserk) == 0x000838, "Member 'UITEM_MeleeWeapon_Base_C::WantsToBerserk' has a wrong offset!");
static_assert(offsetof(UITEM_MeleeWeapon_Base_C, DebugDamageTraces) == 0x000839, "Member 'UITEM_MeleeWeapon_Base_C::DebugDamageTraces' has a wrong offset!");

}

