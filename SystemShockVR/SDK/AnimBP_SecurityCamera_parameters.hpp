#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: AnimBP_SecurityCamera

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "CoreUObject_structs.hpp"


namespace SDK::Params
{

// Function AnimBP_SecurityCamera.AnimBP_SecurityCamera_C.ExecuteUbergraph_AnimBP_SecurityCamera
// 0x0008 (0x0008 - 0x0000)
struct AnimBP_SecurityCamera_C_ExecuteUbergraph_AnimBP_SecurityCamera final
{
public:
	int32                                         EntryPoint;                                        // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         K2Node_Event_DeltaTimeX;                           // 0x0004(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(AnimBP_SecurityCamera_C_ExecuteUbergraph_AnimBP_SecurityCamera) == 0x000004, "Wrong alignment on AnimBP_SecurityCamera_C_ExecuteUbergraph_AnimBP_SecurityCamera");
static_assert(sizeof(AnimBP_SecurityCamera_C_ExecuteUbergraph_AnimBP_SecurityCamera) == 0x000008, "Wrong size on AnimBP_SecurityCamera_C_ExecuteUbergraph_AnimBP_SecurityCamera");
static_assert(offsetof(AnimBP_SecurityCamera_C_ExecuteUbergraph_AnimBP_SecurityCamera, EntryPoint) == 0x000000, "Member 'AnimBP_SecurityCamera_C_ExecuteUbergraph_AnimBP_SecurityCamera::EntryPoint' has a wrong offset!");
static_assert(offsetof(AnimBP_SecurityCamera_C_ExecuteUbergraph_AnimBP_SecurityCamera, K2Node_Event_DeltaTimeX) == 0x000004, "Member 'AnimBP_SecurityCamera_C_ExecuteUbergraph_AnimBP_SecurityCamera::K2Node_Event_DeltaTimeX' has a wrong offset!");

// Function AnimBP_SecurityCamera.AnimBP_SecurityCamera_C.BlueprintUpdateAnimation
// 0x0004 (0x0004 - 0x0000)
struct AnimBP_SecurityCamera_C_BlueprintUpdateAnimation final
{
public:
	float                                         DeltaTimeX;                                        // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(AnimBP_SecurityCamera_C_BlueprintUpdateAnimation) == 0x000004, "Wrong alignment on AnimBP_SecurityCamera_C_BlueprintUpdateAnimation");
static_assert(sizeof(AnimBP_SecurityCamera_C_BlueprintUpdateAnimation) == 0x000004, "Wrong size on AnimBP_SecurityCamera_C_BlueprintUpdateAnimation");
static_assert(offsetof(AnimBP_SecurityCamera_C_BlueprintUpdateAnimation, DeltaTimeX) == 0x000000, "Member 'AnimBP_SecurityCamera_C_BlueprintUpdateAnimation::DeltaTimeX' has a wrong offset!");

// Function AnimBP_SecurityCamera.AnimBP_SecurityCamera_C.UpdateSecurityCamera
// 0x0098 (0x0098 - 0x0000)
struct AnimBP_SecurityCamera_C_UpdateSecurityCamera final
{
public:
	float                                         DeltaTime;                                         // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         DeltaYaw;                                          // 0x0004(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         DeltaPitch;                                        // 0x0008(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               DeltaRotation;                                     // 0x000C(0x000C)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Not_PreBool_ReturnValue;                  // 0x0018(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_NotEqual_RotatorRotator_ReturnValue;      // 0x0019(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_1A[0x2];                                       // 0x001A(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_Multiply_FloatFloat_ReturnValue;          // 0x001C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Multiply_FloatFloat_ReturnValue_1;        // 0x0020(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Abs_ReturnValue;                          // 0x0024(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Abs_ReturnValue_1;                        // 0x0028(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakRotator_Roll;                        // 0x002C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakRotator_Pitch;                       // 0x0030(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakRotator_Yaw;                         // 0x0034(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_SignOfFloat_ReturnValue;                  // 0x0038(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Add_FloatFloat_ReturnValue;               // 0x003C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Add_FloatFloat_ReturnValue_1;             // 0x0040(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               CallFunc_MakeRotator_ReturnValue;                  // 0x0044(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                         CallFunc_Abs_ReturnValue_2;                        // 0x0050(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_FClamp_ReturnValue;                       // 0x0054(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_SignOfFloat_ReturnValue_1;                // 0x0058(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Multiply_FloatFloat_ReturnValue_2;        // 0x005C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Abs_ReturnValue_3;                        // 0x0060(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakRotator_Roll_1;                      // 0x0064(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakRotator_Pitch_1;                     // 0x0068(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakRotator_Yaw_1;                       // 0x006C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_FClamp_ReturnValue_1;                     // 0x0070(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Multiply_FloatFloat_ReturnValue_3;        // 0x0074(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakRotator_Roll_2;                      // 0x0078(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakRotator_Pitch_2;                     // 0x007C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakRotator_Yaw_2;                       // 0x0080(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Subtract_FloatFloat_ReturnValue;          // 0x0084(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Subtract_FloatFloat_ReturnValue_1;        // 0x0088(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_VInterpTo_ReturnValue;                    // 0x008C(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(AnimBP_SecurityCamera_C_UpdateSecurityCamera) == 0x000004, "Wrong alignment on AnimBP_SecurityCamera_C_UpdateSecurityCamera");
static_assert(sizeof(AnimBP_SecurityCamera_C_UpdateSecurityCamera) == 0x000098, "Wrong size on AnimBP_SecurityCamera_C_UpdateSecurityCamera");
static_assert(offsetof(AnimBP_SecurityCamera_C_UpdateSecurityCamera, DeltaTime) == 0x000000, "Member 'AnimBP_SecurityCamera_C_UpdateSecurityCamera::DeltaTime' has a wrong offset!");
static_assert(offsetof(AnimBP_SecurityCamera_C_UpdateSecurityCamera, DeltaYaw) == 0x000004, "Member 'AnimBP_SecurityCamera_C_UpdateSecurityCamera::DeltaYaw' has a wrong offset!");
static_assert(offsetof(AnimBP_SecurityCamera_C_UpdateSecurityCamera, DeltaPitch) == 0x000008, "Member 'AnimBP_SecurityCamera_C_UpdateSecurityCamera::DeltaPitch' has a wrong offset!");
static_assert(offsetof(AnimBP_SecurityCamera_C_UpdateSecurityCamera, DeltaRotation) == 0x00000C, "Member 'AnimBP_SecurityCamera_C_UpdateSecurityCamera::DeltaRotation' has a wrong offset!");
static_assert(offsetof(AnimBP_SecurityCamera_C_UpdateSecurityCamera, CallFunc_Not_PreBool_ReturnValue) == 0x000018, "Member 'AnimBP_SecurityCamera_C_UpdateSecurityCamera::CallFunc_Not_PreBool_ReturnValue' has a wrong offset!");
static_assert(offsetof(AnimBP_SecurityCamera_C_UpdateSecurityCamera, CallFunc_NotEqual_RotatorRotator_ReturnValue) == 0x000019, "Member 'AnimBP_SecurityCamera_C_UpdateSecurityCamera::CallFunc_NotEqual_RotatorRotator_ReturnValue' has a wrong offset!");
static_assert(offsetof(AnimBP_SecurityCamera_C_UpdateSecurityCamera, CallFunc_Multiply_FloatFloat_ReturnValue) == 0x00001C, "Member 'AnimBP_SecurityCamera_C_UpdateSecurityCamera::CallFunc_Multiply_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(AnimBP_SecurityCamera_C_UpdateSecurityCamera, CallFunc_Multiply_FloatFloat_ReturnValue_1) == 0x000020, "Member 'AnimBP_SecurityCamera_C_UpdateSecurityCamera::CallFunc_Multiply_FloatFloat_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(AnimBP_SecurityCamera_C_UpdateSecurityCamera, CallFunc_Abs_ReturnValue) == 0x000024, "Member 'AnimBP_SecurityCamera_C_UpdateSecurityCamera::CallFunc_Abs_ReturnValue' has a wrong offset!");
static_assert(offsetof(AnimBP_SecurityCamera_C_UpdateSecurityCamera, CallFunc_Abs_ReturnValue_1) == 0x000028, "Member 'AnimBP_SecurityCamera_C_UpdateSecurityCamera::CallFunc_Abs_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(AnimBP_SecurityCamera_C_UpdateSecurityCamera, CallFunc_BreakRotator_Roll) == 0x00002C, "Member 'AnimBP_SecurityCamera_C_UpdateSecurityCamera::CallFunc_BreakRotator_Roll' has a wrong offset!");
static_assert(offsetof(AnimBP_SecurityCamera_C_UpdateSecurityCamera, CallFunc_BreakRotator_Pitch) == 0x000030, "Member 'AnimBP_SecurityCamera_C_UpdateSecurityCamera::CallFunc_BreakRotator_Pitch' has a wrong offset!");
static_assert(offsetof(AnimBP_SecurityCamera_C_UpdateSecurityCamera, CallFunc_BreakRotator_Yaw) == 0x000034, "Member 'AnimBP_SecurityCamera_C_UpdateSecurityCamera::CallFunc_BreakRotator_Yaw' has a wrong offset!");
static_assert(offsetof(AnimBP_SecurityCamera_C_UpdateSecurityCamera, CallFunc_SignOfFloat_ReturnValue) == 0x000038, "Member 'AnimBP_SecurityCamera_C_UpdateSecurityCamera::CallFunc_SignOfFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(AnimBP_SecurityCamera_C_UpdateSecurityCamera, CallFunc_Add_FloatFloat_ReturnValue) == 0x00003C, "Member 'AnimBP_SecurityCamera_C_UpdateSecurityCamera::CallFunc_Add_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(AnimBP_SecurityCamera_C_UpdateSecurityCamera, CallFunc_Add_FloatFloat_ReturnValue_1) == 0x000040, "Member 'AnimBP_SecurityCamera_C_UpdateSecurityCamera::CallFunc_Add_FloatFloat_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(AnimBP_SecurityCamera_C_UpdateSecurityCamera, CallFunc_MakeRotator_ReturnValue) == 0x000044, "Member 'AnimBP_SecurityCamera_C_UpdateSecurityCamera::CallFunc_MakeRotator_ReturnValue' has a wrong offset!");
static_assert(offsetof(AnimBP_SecurityCamera_C_UpdateSecurityCamera, CallFunc_Abs_ReturnValue_2) == 0x000050, "Member 'AnimBP_SecurityCamera_C_UpdateSecurityCamera::CallFunc_Abs_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(AnimBP_SecurityCamera_C_UpdateSecurityCamera, CallFunc_FClamp_ReturnValue) == 0x000054, "Member 'AnimBP_SecurityCamera_C_UpdateSecurityCamera::CallFunc_FClamp_ReturnValue' has a wrong offset!");
static_assert(offsetof(AnimBP_SecurityCamera_C_UpdateSecurityCamera, CallFunc_SignOfFloat_ReturnValue_1) == 0x000058, "Member 'AnimBP_SecurityCamera_C_UpdateSecurityCamera::CallFunc_SignOfFloat_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(AnimBP_SecurityCamera_C_UpdateSecurityCamera, CallFunc_Multiply_FloatFloat_ReturnValue_2) == 0x00005C, "Member 'AnimBP_SecurityCamera_C_UpdateSecurityCamera::CallFunc_Multiply_FloatFloat_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(AnimBP_SecurityCamera_C_UpdateSecurityCamera, CallFunc_Abs_ReturnValue_3) == 0x000060, "Member 'AnimBP_SecurityCamera_C_UpdateSecurityCamera::CallFunc_Abs_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(AnimBP_SecurityCamera_C_UpdateSecurityCamera, CallFunc_BreakRotator_Roll_1) == 0x000064, "Member 'AnimBP_SecurityCamera_C_UpdateSecurityCamera::CallFunc_BreakRotator_Roll_1' has a wrong offset!");
static_assert(offsetof(AnimBP_SecurityCamera_C_UpdateSecurityCamera, CallFunc_BreakRotator_Pitch_1) == 0x000068, "Member 'AnimBP_SecurityCamera_C_UpdateSecurityCamera::CallFunc_BreakRotator_Pitch_1' has a wrong offset!");
static_assert(offsetof(AnimBP_SecurityCamera_C_UpdateSecurityCamera, CallFunc_BreakRotator_Yaw_1) == 0x00006C, "Member 'AnimBP_SecurityCamera_C_UpdateSecurityCamera::CallFunc_BreakRotator_Yaw_1' has a wrong offset!");
static_assert(offsetof(AnimBP_SecurityCamera_C_UpdateSecurityCamera, CallFunc_FClamp_ReturnValue_1) == 0x000070, "Member 'AnimBP_SecurityCamera_C_UpdateSecurityCamera::CallFunc_FClamp_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(AnimBP_SecurityCamera_C_UpdateSecurityCamera, CallFunc_Multiply_FloatFloat_ReturnValue_3) == 0x000074, "Member 'AnimBP_SecurityCamera_C_UpdateSecurityCamera::CallFunc_Multiply_FloatFloat_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(AnimBP_SecurityCamera_C_UpdateSecurityCamera, CallFunc_BreakRotator_Roll_2) == 0x000078, "Member 'AnimBP_SecurityCamera_C_UpdateSecurityCamera::CallFunc_BreakRotator_Roll_2' has a wrong offset!");
static_assert(offsetof(AnimBP_SecurityCamera_C_UpdateSecurityCamera, CallFunc_BreakRotator_Pitch_2) == 0x00007C, "Member 'AnimBP_SecurityCamera_C_UpdateSecurityCamera::CallFunc_BreakRotator_Pitch_2' has a wrong offset!");
static_assert(offsetof(AnimBP_SecurityCamera_C_UpdateSecurityCamera, CallFunc_BreakRotator_Yaw_2) == 0x000080, "Member 'AnimBP_SecurityCamera_C_UpdateSecurityCamera::CallFunc_BreakRotator_Yaw_2' has a wrong offset!");
static_assert(offsetof(AnimBP_SecurityCamera_C_UpdateSecurityCamera, CallFunc_Subtract_FloatFloat_ReturnValue) == 0x000084, "Member 'AnimBP_SecurityCamera_C_UpdateSecurityCamera::CallFunc_Subtract_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(AnimBP_SecurityCamera_C_UpdateSecurityCamera, CallFunc_Subtract_FloatFloat_ReturnValue_1) == 0x000088, "Member 'AnimBP_SecurityCamera_C_UpdateSecurityCamera::CallFunc_Subtract_FloatFloat_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(AnimBP_SecurityCamera_C_UpdateSecurityCamera, CallFunc_VInterpTo_ReturnValue) == 0x00008C, "Member 'AnimBP_SecurityCamera_C_UpdateSecurityCamera::CallFunc_VInterpTo_ReturnValue' has a wrong offset!");

// Function AnimBP_SecurityCamera.AnimBP_SecurityCamera_C.SetCurrentCameraRotation
// 0x0060 (0x0060 - 0x0000)
struct AnimBP_SecurityCamera_C_SetCurrentCameraRotation final
{
public:
	float                                         Pitch;                                             // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Yaw;                                               // 0x0004(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 CallFunc_GetOwningActor_ReturnValue;               // 0x0008(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               CallFunc_MakeRotator_ReturnValue;                  // 0x0010(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_1C[0x4];                                       // 0x001C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTransform                             CallFunc_GetTransform_ReturnValue;                 // 0x0020(0x0030)(ConstParm, IsPlainOldData, NoDestructor)
	struct FRotator                               CallFunc_InverseTransformRotation_ReturnValue;     // 0x0050(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(AnimBP_SecurityCamera_C_SetCurrentCameraRotation) == 0x000010, "Wrong alignment on AnimBP_SecurityCamera_C_SetCurrentCameraRotation");
static_assert(sizeof(AnimBP_SecurityCamera_C_SetCurrentCameraRotation) == 0x000060, "Wrong size on AnimBP_SecurityCamera_C_SetCurrentCameraRotation");
static_assert(offsetof(AnimBP_SecurityCamera_C_SetCurrentCameraRotation, Pitch) == 0x000000, "Member 'AnimBP_SecurityCamera_C_SetCurrentCameraRotation::Pitch' has a wrong offset!");
static_assert(offsetof(AnimBP_SecurityCamera_C_SetCurrentCameraRotation, Yaw) == 0x000004, "Member 'AnimBP_SecurityCamera_C_SetCurrentCameraRotation::Yaw' has a wrong offset!");
static_assert(offsetof(AnimBP_SecurityCamera_C_SetCurrentCameraRotation, CallFunc_GetOwningActor_ReturnValue) == 0x000008, "Member 'AnimBP_SecurityCamera_C_SetCurrentCameraRotation::CallFunc_GetOwningActor_ReturnValue' has a wrong offset!");
static_assert(offsetof(AnimBP_SecurityCamera_C_SetCurrentCameraRotation, CallFunc_MakeRotator_ReturnValue) == 0x000010, "Member 'AnimBP_SecurityCamera_C_SetCurrentCameraRotation::CallFunc_MakeRotator_ReturnValue' has a wrong offset!");
static_assert(offsetof(AnimBP_SecurityCamera_C_SetCurrentCameraRotation, CallFunc_GetTransform_ReturnValue) == 0x000020, "Member 'AnimBP_SecurityCamera_C_SetCurrentCameraRotation::CallFunc_GetTransform_ReturnValue' has a wrong offset!");
static_assert(offsetof(AnimBP_SecurityCamera_C_SetCurrentCameraRotation, CallFunc_InverseTransformRotation_ReturnValue) == 0x000050, "Member 'AnimBP_SecurityCamera_C_SetCurrentCameraRotation::CallFunc_InverseTransformRotation_ReturnValue' has a wrong offset!");

// Function AnimBP_SecurityCamera.AnimBP_SecurityCamera_C.SetTargetCameraRotation
// 0x0060 (0x0060 - 0x0000)
struct AnimBP_SecurityCamera_C_SetTargetCameraRotation final
{
public:
	float                                         Pitch;                                             // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Yaw;                                               // 0x0004(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               CallFunc_MakeRotator_ReturnValue;                  // 0x0008(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_EqualEqual_RotatorRotator_ReturnValue;    // 0x0014(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_15[0x3];                                       // 0x0015(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class AActor*                                 CallFunc_GetOwningActor_ReturnValue;               // 0x0018(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FTransform                             CallFunc_GetTransform_ReturnValue;                 // 0x0020(0x0030)(ConstParm, IsPlainOldData, NoDestructor)
	struct FRotator                               CallFunc_InverseTransformRotation_ReturnValue;     // 0x0050(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(AnimBP_SecurityCamera_C_SetTargetCameraRotation) == 0x000010, "Wrong alignment on AnimBP_SecurityCamera_C_SetTargetCameraRotation");
static_assert(sizeof(AnimBP_SecurityCamera_C_SetTargetCameraRotation) == 0x000060, "Wrong size on AnimBP_SecurityCamera_C_SetTargetCameraRotation");
static_assert(offsetof(AnimBP_SecurityCamera_C_SetTargetCameraRotation, Pitch) == 0x000000, "Member 'AnimBP_SecurityCamera_C_SetTargetCameraRotation::Pitch' has a wrong offset!");
static_assert(offsetof(AnimBP_SecurityCamera_C_SetTargetCameraRotation, Yaw) == 0x000004, "Member 'AnimBP_SecurityCamera_C_SetTargetCameraRotation::Yaw' has a wrong offset!");
static_assert(offsetof(AnimBP_SecurityCamera_C_SetTargetCameraRotation, CallFunc_MakeRotator_ReturnValue) == 0x000008, "Member 'AnimBP_SecurityCamera_C_SetTargetCameraRotation::CallFunc_MakeRotator_ReturnValue' has a wrong offset!");
static_assert(offsetof(AnimBP_SecurityCamera_C_SetTargetCameraRotation, CallFunc_EqualEqual_RotatorRotator_ReturnValue) == 0x000014, "Member 'AnimBP_SecurityCamera_C_SetTargetCameraRotation::CallFunc_EqualEqual_RotatorRotator_ReturnValue' has a wrong offset!");
static_assert(offsetof(AnimBP_SecurityCamera_C_SetTargetCameraRotation, CallFunc_GetOwningActor_ReturnValue) == 0x000018, "Member 'AnimBP_SecurityCamera_C_SetTargetCameraRotation::CallFunc_GetOwningActor_ReturnValue' has a wrong offset!");
static_assert(offsetof(AnimBP_SecurityCamera_C_SetTargetCameraRotation, CallFunc_GetTransform_ReturnValue) == 0x000020, "Member 'AnimBP_SecurityCamera_C_SetTargetCameraRotation::CallFunc_GetTransform_ReturnValue' has a wrong offset!");
static_assert(offsetof(AnimBP_SecurityCamera_C_SetTargetCameraRotation, CallFunc_InverseTransformRotation_ReturnValue) == 0x000050, "Member 'AnimBP_SecurityCamera_C_SetTargetCameraRotation::CallFunc_InverseTransformRotation_ReturnValue' has a wrong offset!");

// Function AnimBP_SecurityCamera.AnimBP_SecurityCamera_C.AnimGraph
// 0x0010 (0x0010 - 0x0000)
struct AnimBP_SecurityCamera_C_AnimGraph final
{
public:
	struct FPoseLink                              AnimGraph_0;                                       // 0x0000(0x0010)(Parm, OutParm, NoDestructor)
};
static_assert(alignof(AnimBP_SecurityCamera_C_AnimGraph) == 0x000008, "Wrong alignment on AnimBP_SecurityCamera_C_AnimGraph");
static_assert(sizeof(AnimBP_SecurityCamera_C_AnimGraph) == 0x000010, "Wrong size on AnimBP_SecurityCamera_C_AnimGraph");
static_assert(offsetof(AnimBP_SecurityCamera_C_AnimGraph, AnimGraph_0) == 0x000000, "Member 'AnimBP_SecurityCamera_C_AnimGraph::AnimGraph_0' has a wrong offset!");

}

