#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: INTERACT_LogisticsLift

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "LevelVoxelization_structs.hpp"
#include "ENUM_DoorState_structs.hpp"
#include "INTERACT_Base_classes.hpp"
#include "ENUM_InteractionType_structs.hpp"


namespace SDK
{

// BlueprintGeneratedClass INTERACT_LogisticsLift.INTERACT_LogisticsLift_C
// 0x0160 (0x0468 - 0x0308)
class AINTERACT_LogisticsLift_C final : public AINTERACT_Base_C
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame_INTERACT_LogisticsLift_C;           // 0x0308(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	class UCOMP_CullableNavModifier_C*            RoofBlocker;                                       // 0x0310(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UCOMP_AttribManager_C*                  COMP_AttribManager;                                // 0x0318(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UCOMP_CullableNavModifier_C*            PillarBlockerD;                                    // 0x0320(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UCOMP_CullableNavModifier_C*            PillarBlockerC;                                    // 0x0328(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UCOMP_CullableNavModifier_C*            PillarBlockerB;                                    // 0x0330(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UCOMP_CullableNavModifier_C*            PillarBlockerA;                                    // 0x0338(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UCOMP_CullableNavModifier_C*            COMP_CullableNavModifier;                          // 0x0340(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UBoxComponent*                          RoofSensor;                                        // 0x0348(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UBoxComponent*                          CompartmentSensor;                                 // 0x0350(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UBoxComponent*                          TileCollision;                                     // 0x0358(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UStaticMeshComponent*                   TileMesh;                                          // 0x0360(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USkeletalMeshComponent*                 LogisticsLiftMesh;                                 // 0x0368(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class APatrolNode_C*                          PatrolNode;                                        // 0x0370(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UClass*                                 CargoClass;                                        // 0x0378(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UClass*                                 CargoClassOverride;                                // 0x0380(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, SaveGame, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 CargoActor;                                        // 0x0388(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, SaveGame, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ENUM_DoorState                                LiftState;                                         // 0x0390(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, SaveGame, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          IsPoweredOn;                                       // 0x0391(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_392[0x2];                                      // 0x0392(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         ActivateDelay;                                     // 0x0394(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         StateChangedTimestamp;                             // 0x0398(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, SaveGame, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         DefaultAutoDeactivateTime;                         // 0x039C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TMap<class AActor*, float>                    CachedCompartmentActorHeights;                     // 0x03A0(0x0050)(Edit, BlueprintVisible, DisableEditOnTemplate, DisableEditOnInstance)
	struct FTimerHandle                           AutoTransitionTimerHandle;                         // 0x03F0(0x0008)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	TSoftObjectPtr<class UAnimMontage>            ActivateMontage;                                   // 0x03F8(0x0028)(Edit, BlueprintVisible, DisableEditOnInstance, HasGetValueTypeHash)
	TSoftObjectPtr<class UAnimMontage>            DeactivateMontage;                                 // 0x0420(0x0028)(Edit, BlueprintVisible, DisableEditOnInstance, HasGetValueTypeHash)
	FMulticastInlineDelegateProperty_             OnCargoSpawned;                                    // 0x0448(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)
	FMulticastInlineDelegateProperty_             OnCargoDelivered;                                  // 0x0458(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)

public:
	void OnCargoSpawned__DelegateSignature(class AINTERACT_LogisticsLift_C* LogisticsLift, class AActor* CargoActor_0);
	void OnCargoDelivered__DelegateSignature(class AINTERACT_LogisticsLift_C* LogisticsLift, class AActor* CargoActor_0);
	void ExecuteUbergraph_INTERACT_LogisticsLift(int32 EntryPoint);
	void BndEvt__INTERACT_LogisticsLift_COMP_CullableNavModifier_K2Node_ComponentBoundEvent_1_CullableVisibilitySignature__DelegateSignature(bool bVisibleState);
	void ReceiveBeginPlay();
	void UserConstructionScript();
	void InitializeLogisticsLift();
	void InitializeAttributes();
	void InitializeCompartmentActorStates();
	void InitializeTileDescriptor();
	void IsLogisticsLiftReady(bool* Result);
	void IsLogisticsLiftFunctional(bool* Result);
	void GetLogisticsLiftState(ENUM_DoorState* Result);
	void GetElapsedTimeInState(float* Result);
	void GetSpawnedEnemyName(class UClass* EnemyClass, class FName* EnemyName);
	void EnableMeshComponentTicks(bool State);
	void TryMakeCompartmentItemsLost();
	void TryBindMontageFinishedEvent();
	void TryStartAutoTransitionTimer(float Delay);
	void TryStartLogisticsLiftTransition(bool Activate, bool* Result);
	void TrySpawnCargo(bool* Result);
	void SetCargoClassOverride(class UClass* Class_0);
	void HandleCargoSpawned();
	void HandleCargoDelivered();
	void PlayTransitionMontage(TSoftObjectPtr<class UAnimMontage> Montage, float StartTime);
	void EVENT_OnMontageFinished();
	void UpdateNavigationModifier();
	void UpdateAnimInstanceState();
	void EVENT_TryStartLiftTransition();
	void UpdateEmissiveStrength(float Scale);
	void UpdateLogisticsLiftVisibility(bool VisibilityState);
	void EVENT_RestoreCompartmentActorLocations();
	void EVENT_OnDisableAttribChanged(float CurrValue, float LastValue);
	void TryInteract(class AActor* SourceActor, class UPrimitiveComponent* CursorPrimitive, ENUM_InteractionType InteractionType, struct FSTRUCT_InteractResults* InteractResults);
	bool ShouldSaveActor(struct FStreamingSaveGameActorParams* Params_0);
	void CanModifyInteractPower(bool* Result);
	void SetInteractPowered(bool State, bool* Result);

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"INTERACT_LogisticsLift_C">();
	}
	static class AINTERACT_LogisticsLift_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<AINTERACT_LogisticsLift_C>();
	}
};
static_assert(alignof(AINTERACT_LogisticsLift_C) == 0x000008, "Wrong alignment on AINTERACT_LogisticsLift_C");
static_assert(sizeof(AINTERACT_LogisticsLift_C) == 0x000468, "Wrong size on AINTERACT_LogisticsLift_C");
static_assert(offsetof(AINTERACT_LogisticsLift_C, UberGraphFrame_INTERACT_LogisticsLift_C) == 0x000308, "Member 'AINTERACT_LogisticsLift_C::UberGraphFrame_INTERACT_LogisticsLift_C' has a wrong offset!");
static_assert(offsetof(AINTERACT_LogisticsLift_C, RoofBlocker) == 0x000310, "Member 'AINTERACT_LogisticsLift_C::RoofBlocker' has a wrong offset!");
static_assert(offsetof(AINTERACT_LogisticsLift_C, COMP_AttribManager) == 0x000318, "Member 'AINTERACT_LogisticsLift_C::COMP_AttribManager' has a wrong offset!");
static_assert(offsetof(AINTERACT_LogisticsLift_C, PillarBlockerD) == 0x000320, "Member 'AINTERACT_LogisticsLift_C::PillarBlockerD' has a wrong offset!");
static_assert(offsetof(AINTERACT_LogisticsLift_C, PillarBlockerC) == 0x000328, "Member 'AINTERACT_LogisticsLift_C::PillarBlockerC' has a wrong offset!");
static_assert(offsetof(AINTERACT_LogisticsLift_C, PillarBlockerB) == 0x000330, "Member 'AINTERACT_LogisticsLift_C::PillarBlockerB' has a wrong offset!");
static_assert(offsetof(AINTERACT_LogisticsLift_C, PillarBlockerA) == 0x000338, "Member 'AINTERACT_LogisticsLift_C::PillarBlockerA' has a wrong offset!");
static_assert(offsetof(AINTERACT_LogisticsLift_C, COMP_CullableNavModifier) == 0x000340, "Member 'AINTERACT_LogisticsLift_C::COMP_CullableNavModifier' has a wrong offset!");
static_assert(offsetof(AINTERACT_LogisticsLift_C, RoofSensor) == 0x000348, "Member 'AINTERACT_LogisticsLift_C::RoofSensor' has a wrong offset!");
static_assert(offsetof(AINTERACT_LogisticsLift_C, CompartmentSensor) == 0x000350, "Member 'AINTERACT_LogisticsLift_C::CompartmentSensor' has a wrong offset!");
static_assert(offsetof(AINTERACT_LogisticsLift_C, TileCollision) == 0x000358, "Member 'AINTERACT_LogisticsLift_C::TileCollision' has a wrong offset!");
static_assert(offsetof(AINTERACT_LogisticsLift_C, TileMesh) == 0x000360, "Member 'AINTERACT_LogisticsLift_C::TileMesh' has a wrong offset!");
static_assert(offsetof(AINTERACT_LogisticsLift_C, LogisticsLiftMesh) == 0x000368, "Member 'AINTERACT_LogisticsLift_C::LogisticsLiftMesh' has a wrong offset!");
static_assert(offsetof(AINTERACT_LogisticsLift_C, PatrolNode) == 0x000370, "Member 'AINTERACT_LogisticsLift_C::PatrolNode' has a wrong offset!");
static_assert(offsetof(AINTERACT_LogisticsLift_C, CargoClass) == 0x000378, "Member 'AINTERACT_LogisticsLift_C::CargoClass' has a wrong offset!");
static_assert(offsetof(AINTERACT_LogisticsLift_C, CargoClassOverride) == 0x000380, "Member 'AINTERACT_LogisticsLift_C::CargoClassOverride' has a wrong offset!");
static_assert(offsetof(AINTERACT_LogisticsLift_C, CargoActor) == 0x000388, "Member 'AINTERACT_LogisticsLift_C::CargoActor' has a wrong offset!");
static_assert(offsetof(AINTERACT_LogisticsLift_C, LiftState) == 0x000390, "Member 'AINTERACT_LogisticsLift_C::LiftState' has a wrong offset!");
static_assert(offsetof(AINTERACT_LogisticsLift_C, IsPoweredOn) == 0x000391, "Member 'AINTERACT_LogisticsLift_C::IsPoweredOn' has a wrong offset!");
static_assert(offsetof(AINTERACT_LogisticsLift_C, ActivateDelay) == 0x000394, "Member 'AINTERACT_LogisticsLift_C::ActivateDelay' has a wrong offset!");
static_assert(offsetof(AINTERACT_LogisticsLift_C, StateChangedTimestamp) == 0x000398, "Member 'AINTERACT_LogisticsLift_C::StateChangedTimestamp' has a wrong offset!");
static_assert(offsetof(AINTERACT_LogisticsLift_C, DefaultAutoDeactivateTime) == 0x00039C, "Member 'AINTERACT_LogisticsLift_C::DefaultAutoDeactivateTime' has a wrong offset!");
static_assert(offsetof(AINTERACT_LogisticsLift_C, CachedCompartmentActorHeights) == 0x0003A0, "Member 'AINTERACT_LogisticsLift_C::CachedCompartmentActorHeights' has a wrong offset!");
static_assert(offsetof(AINTERACT_LogisticsLift_C, AutoTransitionTimerHandle) == 0x0003F0, "Member 'AINTERACT_LogisticsLift_C::AutoTransitionTimerHandle' has a wrong offset!");
static_assert(offsetof(AINTERACT_LogisticsLift_C, ActivateMontage) == 0x0003F8, "Member 'AINTERACT_LogisticsLift_C::ActivateMontage' has a wrong offset!");
static_assert(offsetof(AINTERACT_LogisticsLift_C, DeactivateMontage) == 0x000420, "Member 'AINTERACT_LogisticsLift_C::DeactivateMontage' has a wrong offset!");
static_assert(offsetof(AINTERACT_LogisticsLift_C, OnCargoSpawned) == 0x000448, "Member 'AINTERACT_LogisticsLift_C::OnCargoSpawned' has a wrong offset!");
static_assert(offsetof(AINTERACT_LogisticsLift_C, OnCargoDelivered) == 0x000458, "Member 'AINTERACT_LogisticsLift_C::OnCargoDelivered' has a wrong offset!");

}

