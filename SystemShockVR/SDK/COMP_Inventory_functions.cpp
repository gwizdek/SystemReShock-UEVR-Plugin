#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: COMP_Inventory

#include "Basic.hpp"

#include "COMP_Inventory_classes.hpp"
#include "COMP_Inventory_parameters.hpp"


namespace SDK
{

// Function COMP_Inventory.COMP_Inventory_C.OnBagChanged__DelegateSignature
// (Public, Delegate, BlueprintCallable, BlueprintEvent)
// Parameters:
// class UInventoryBag_C*                  Bag                                                    (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// int32                                   SlotIndex                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UCOMP_Inventory_C::OnBagChanged__DelegateSignature(class UInventoryBag_C* Bag, int32 SlotIndex)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("COMP_Inventory_C", "OnBagChanged__DelegateSignature");

	Params::COMP_Inventory_C_OnBagChanged__DelegateSignature Parms{};

	Parms.Bag = Bag;
	Parms.SlotIndex = SlotIndex;

	UObject::ProcessEvent(Func, &Parms);
}


// Function COMP_Inventory.COMP_Inventory_C.OnItemUpgraded__DelegateSignature
// (Public, Delegate, BlueprintCallable, BlueprintEvent)
// Parameters:
// class UClass*                           UpgradeClass                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class UClass*                           DowngradeClass                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// ENUM_UpgradeResult                      Result                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UCOMP_Inventory_C::OnItemUpgraded__DelegateSignature(class UClass* UpgradeClass, class UClass* DowngradeClass, ENUM_UpgradeResult Result)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("COMP_Inventory_C", "OnItemUpgraded__DelegateSignature");

	Params::COMP_Inventory_C_OnItemUpgraded__DelegateSignature Parms{};

	Parms.UpgradeClass = UpgradeClass;
	Parms.DowngradeClass = DowngradeClass;
	Parms.Result = Result;

	UObject::ProcessEvent(Func, &Parms);
}


// Function COMP_Inventory.COMP_Inventory_C.InitializeInventory
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    GrantDefaultInventory                                  (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)

void UCOMP_Inventory_C::InitializeInventory(bool GrantDefaultInventory)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("COMP_Inventory_C", "InitializeInventory");

	Params::COMP_Inventory_C_InitializeInventory Parms{};

	Parms.GrantDefaultInventory = GrantDefaultInventory;

	UObject::ProcessEvent(Func, &Parms);
}


// Function COMP_Inventory.COMP_Inventory_C.AddBag
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// struct FSTRUCT_InventoryBagParams       BagParams                                              (BlueprintVisible, BlueprintReadOnly, Parm, HasGetValueTypeHash)
// class UInventoryBag_C*                  Bag                                                    (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UCOMP_Inventory_C::AddBag(const struct FSTRUCT_InventoryBagParams& BagParams, class UInventoryBag_C** Bag)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("COMP_Inventory_C", "AddBag");

	Params::COMP_Inventory_C_AddBag Parms{};

	Parms.BagParams = std::move(BagParams);

	UObject::ProcessEvent(Func, &Parms);

	if (Bag != nullptr)
		*Bag = Parms.Bag;
}


// Function COMP_Inventory.COMP_Inventory_C.InitializeBags
// (Public, BlueprintCallable, BlueprintEvent)

void UCOMP_Inventory_C::InitializeBags()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("COMP_Inventory_C", "InitializeBags");

	UObject::ProcessEvent(Func, nullptr);
}


// Function COMP_Inventory.COMP_Inventory_C.GrantItem
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// struct FSTRUCT_HardItemParams           ItemParams                                             (BlueprintVisible, BlueprintReadOnly, Parm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    Result                                                 (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void UCOMP_Inventory_C::GrantItem(const struct FSTRUCT_HardItemParams& ItemParams, bool* Result)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("COMP_Inventory_C", "GrantItem");

	Params::COMP_Inventory_C_GrantItem Parms{};

	Parms.ItemParams = std::move(ItemParams);

	UObject::ProcessEvent(Func, &Parms);

	if (Result != nullptr)
		*Result = Parms.Result;
}


// Function COMP_Inventory.COMP_Inventory_C.GrantItemsFromPackage
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// class UClass*                           PackageClass                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    Result                                                 (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void UCOMP_Inventory_C::GrantItemsFromPackage(class UClass* PackageClass, bool* Result)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("COMP_Inventory_C", "GrantItemsFromPackage");

	Params::COMP_Inventory_C_GrantItemsFromPackage Parms{};

	Parms.PackageClass = PackageClass;

	UObject::ProcessEvent(Func, &Parms);

	if (Result != nullptr)
		*Result = Parms.Result;
}


// Function COMP_Inventory.COMP_Inventory_C.GrantItemsFromPackages
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// class UClass*                           PackageClass                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// int32                                   PackageCount                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    Result                                                 (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void UCOMP_Inventory_C::GrantItemsFromPackages(class UClass* PackageClass, int32 PackageCount, bool* Result)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("COMP_Inventory_C", "GrantItemsFromPackages");

	Params::COMP_Inventory_C_GrantItemsFromPackages Parms{};

	Parms.PackageClass = PackageClass;
	Parms.PackageCount = PackageCount;

	UObject::ProcessEvent(Func, &Parms);

	if (Result != nullptr)
		*Result = Parms.Result;
}


// Function COMP_Inventory.COMP_Inventory_C.AddItem
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// class UITEM_Base_C*                     Item                                                   (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    Result                                                 (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void UCOMP_Inventory_C::AddItem(class UITEM_Base_C* Item, bool* Result)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("COMP_Inventory_C", "AddItem");

	Params::COMP_Inventory_C_AddItem Parms{};

	Parms.Item = Item;

	UObject::ProcessEvent(Func, &Parms);

	if (Result != nullptr)
		*Result = Parms.Result;
}


// Function COMP_Inventory.COMP_Inventory_C.AddItemInternal
// (Private, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// class UITEM_Base_C*                     Item                                                   (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class UClass*                           ItemClass                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// int32                                   Count                                                  (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    Modify                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// bool                                    Result                                                 (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void UCOMP_Inventory_C::AddItemInternal(class UITEM_Base_C* Item, class UClass* ItemClass, int32 Count, bool Modify, bool* Result)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("COMP_Inventory_C", "AddItemInternal");

	Params::COMP_Inventory_C_AddItemInternal Parms{};

	Parms.Item = Item;
	Parms.ItemClass = ItemClass;
	Parms.Count = Count;
	Parms.Modify = Modify;

	UObject::ProcessEvent(Func, &Parms);

	if (Result != nullptr)
		*Result = Parms.Result;
}


// Function COMP_Inventory.COMP_Inventory_C.CanGrantItem
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// struct FSTRUCT_HardItemParams           ItemParams                                             (BlueprintVisible, BlueprintReadOnly, Parm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    Result                                                 (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void UCOMP_Inventory_C::CanGrantItem(const struct FSTRUCT_HardItemParams& ItemParams, bool* Result)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("COMP_Inventory_C", "CanGrantItem");

	Params::COMP_Inventory_C_CanGrantItem Parms{};

	Parms.ItemParams = std::move(ItemParams);

	UObject::ProcessEvent(Func, &Parms);

	if (Result != nullptr)
		*Result = Parms.Result;
}


// Function COMP_Inventory.COMP_Inventory_C.CanAddItem
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// class UITEM_Base_C*                     Item                                                   (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    Result                                                 (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void UCOMP_Inventory_C::CanAddItem(class UITEM_Base_C* Item, bool* Result)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("COMP_Inventory_C", "CanAddItem");

	Params::COMP_Inventory_C_CanAddItem Parms{};

	Parms.Item = Item;

	UObject::ProcessEvent(Func, &Parms);

	if (Result != nullptr)
		*Result = Parms.Result;
}


// Function COMP_Inventory.COMP_Inventory_C.GetBagByType
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// ENUM_ItemType                           ItemType                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class UInventoryBag_C*                  Bag                                                    (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UCOMP_Inventory_C::GetBagByType(ENUM_ItemType ItemType, class UInventoryBag_C** Bag)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("COMP_Inventory_C", "GetBagByType");

	Params::COMP_Inventory_C_GetBagByType Parms{};

	Parms.ItemType = ItemType;

	UObject::ProcessEvent(Func, &Parms);

	if (Bag != nullptr)
		*Bag = Parms.Bag;
}


// Function COMP_Inventory.COMP_Inventory_C.GetBagByRequiredType
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// ENUM_ItemType                           ItemType                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class UInventoryBag_C*                  Bag                                                    (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UCOMP_Inventory_C::GetBagByRequiredType(ENUM_ItemType ItemType, class UInventoryBag_C** Bag)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("COMP_Inventory_C", "GetBagByRequiredType");

	Params::COMP_Inventory_C_GetBagByRequiredType Parms{};

	Parms.ItemType = ItemType;

	UObject::ProcessEvent(Func, &Parms);

	if (Bag != nullptr)
		*Bag = Parms.Bag;
}


// Function COMP_Inventory.COMP_Inventory_C.GetBagByIndex
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// int32                                   BagIndex                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class UInventoryBag_C*                  Bag                                                    (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UCOMP_Inventory_C::GetBagByIndex(int32 BagIndex, class UInventoryBag_C** Bag)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("COMP_Inventory_C", "GetBagByIndex");

	Params::COMP_Inventory_C_GetBagByIndex Parms{};

	Parms.BagIndex = BagIndex;

	UObject::ProcessEvent(Func, &Parms);

	if (Bag != nullptr)
		*Bag = Parms.Bag;
}


// Function COMP_Inventory.COMP_Inventory_C.GetItemCount
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// class UClass*                           ItemClass                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// int32                                   MaxCount                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class UITEM_Base_C*                     IgnoreItem                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// int32                                   Result                                                 (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UCOMP_Inventory_C::GetItemCount(class UClass* ItemClass, int32 MaxCount, class UITEM_Base_C* IgnoreItem, int32* Result)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("COMP_Inventory_C", "GetItemCount");

	Params::COMP_Inventory_C_GetItemCount Parms{};

	Parms.ItemClass = ItemClass;
	Parms.MaxCount = MaxCount;
	Parms.IgnoreItem = IgnoreItem;

	UObject::ProcessEvent(Func, &Parms);

	if (Result != nullptr)
		*Result = Parms.Result;
}


// Function COMP_Inventory.COMP_Inventory_C.CreateItem
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// struct FSTRUCT_HardItemParams           ItemParams                                             (BlueprintVisible, BlueprintReadOnly, Parm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class UITEM_Base_C*                     Item                                                   (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UCOMP_Inventory_C::CreateItem(const struct FSTRUCT_HardItemParams& ItemParams, class UITEM_Base_C** Item)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("COMP_Inventory_C", "CreateItem");

	Params::COMP_Inventory_C_CreateItem Parms{};

	Parms.ItemParams = std::move(ItemParams);

	UObject::ProcessEvent(Func, &Parms);

	if (Item != nullptr)
		*Item = Parms.Item;
}


// Function COMP_Inventory.COMP_Inventory_C.GetBagByName
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// class FName                             BagName                                                (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class UInventoryBag_C*                  Bag                                                    (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UCOMP_Inventory_C::GetBagByName(class FName BagName, class UInventoryBag_C** Bag)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("COMP_Inventory_C", "GetBagByName");

	Params::COMP_Inventory_C_GetBagByName Parms{};

	Parms.BagName = BagName;

	UObject::ProcessEvent(Func, &Parms);

	if (Bag != nullptr)
		*Bag = Parms.Bag;
}


// Function COMP_Inventory.COMP_Inventory_C.GetLootSeed
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// int32                                   Seed                                                   (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UCOMP_Inventory_C::GetLootSeed(int32* Seed)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("COMP_Inventory_C", "GetLootSeed");

	Params::COMP_Inventory_C_GetLootSeed Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (Seed != nullptr)
		*Seed = Parms.Seed;
}


// Function COMP_Inventory.COMP_Inventory_C.IsInventoryEmpty
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// bool                                    Result                                                 (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void UCOMP_Inventory_C::IsInventoryEmpty(bool* Result)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("COMP_Inventory_C", "IsInventoryEmpty");

	Params::COMP_Inventory_C_IsInventoryEmpty Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (Result != nullptr)
		*Result = Parms.Result;
}


// Function COMP_Inventory.COMP_Inventory_C.MergeItems
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// class UCOMP_Inventory_C*                OtherInventory                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// TArray<class UITEM_Base_C*>             ItemsNotMerged                                         (BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
// bool                                    Success                                                (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void UCOMP_Inventory_C::MergeItems(class UCOMP_Inventory_C* OtherInventory, TArray<class UITEM_Base_C*>& ItemsNotMerged, bool* Success)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("COMP_Inventory_C", "MergeItems");

	Params::COMP_Inventory_C_MergeItems Parms{};

	Parms.OtherInventory = OtherInventory;
	Parms.ItemsNotMerged = std::move(ItemsNotMerged);

	UObject::ProcessEvent(Func, &Parms);

	ItemsNotMerged = std::move(Parms.ItemsNotMerged);

	if (Success != nullptr)
		*Success = Parms.Success;
}


// Function COMP_Inventory.COMP_Inventory_C.RemoveItemByClass
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// class UClass*                           ItemClass                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class UITEM_Base_C*                     RemovedItem                                            (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UCOMP_Inventory_C::RemoveItemByClass(class UClass* ItemClass, class UITEM_Base_C** RemovedItem)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("COMP_Inventory_C", "RemoveItemByClass");

	Params::COMP_Inventory_C_RemoveItemByClass Parms{};

	Parms.ItemClass = ItemClass;

	UObject::ProcessEvent(Func, &Parms);

	if (RemovedItem != nullptr)
		*RemovedItem = Parms.RemovedItem;
}


// Function COMP_Inventory.COMP_Inventory_C.FindItem
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// class UClass*                           ItemClass                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    RequireUnslottable                                     (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// bool                                    AnyDerivedClass                                        (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// class UITEM_Base_C*                     FoundItem                                              (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UCOMP_Inventory_C::FindItem(class UClass* ItemClass, bool RequireUnslottable, bool AnyDerivedClass, class UITEM_Base_C** FoundItem)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("COMP_Inventory_C", "FindItem");

	Params::COMP_Inventory_C_FindItem Parms{};

	Parms.ItemClass = ItemClass;
	Parms.RequireUnslottable = RequireUnslottable;
	Parms.AnyDerivedClass = AnyDerivedClass;

	UObject::ProcessEvent(Func, &Parms);

	if (FoundItem != nullptr)
		*FoundItem = Parms.FoundItem;
}


// Function COMP_Inventory.COMP_Inventory_C.FindItemBySoftClass
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// TSoftClassPtr<class UClass>             ItemClass                                              (BlueprintVisible, BlueprintReadOnly, Parm, HasGetValueTypeHash)
// bool                                    RequireUnslottable                                     (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// class UITEM_Base_C*                     FoundItem                                              (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UCOMP_Inventory_C::FindItemBySoftClass(TSoftClassPtr<class UClass> ItemClass, bool RequireUnslottable, class UITEM_Base_C** FoundItem)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("COMP_Inventory_C", "FindItemBySoftClass");

	Params::COMP_Inventory_C_FindItemBySoftClass Parms{};

	Parms.ItemClass = ItemClass;
	Parms.RequireUnslottable = RequireUnslottable;

	UObject::ProcessEvent(Func, &Parms);

	if (FoundItem != nullptr)
		*FoundItem = Parms.FoundItem;
}


// Function COMP_Inventory.COMP_Inventory_C.RemoveItem
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// class UITEM_Base_C*                     Item                                                   (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    Result                                                 (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void UCOMP_Inventory_C::RemoveItem(class UITEM_Base_C* Item, bool* Result)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("COMP_Inventory_C", "RemoveItem");

	Params::COMP_Inventory_C_RemoveItem Parms{};

	Parms.Item = Item;

	UObject::ProcessEvent(Func, &Parms);

	if (Result != nullptr)
		*Result = Parms.Result;
}


// Function COMP_Inventory.COMP_Inventory_C.FindAndApplyUpgrade
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// class UITEM_UpgradeBase_C*              UpgradeItem                                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class UClass*                           UpgradeClass                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// ENUM_UpgradeResult                      Result                                                 (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UCOMP_Inventory_C::FindAndApplyUpgrade(class UITEM_UpgradeBase_C* UpgradeItem, class UClass* UpgradeClass, ENUM_UpgradeResult* Result)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("COMP_Inventory_C", "FindAndApplyUpgrade");

	Params::COMP_Inventory_C_FindAndApplyUpgrade Parms{};

	Parms.UpgradeItem = UpgradeItem;
	Parms.UpgradeClass = UpgradeClass;

	UObject::ProcessEvent(Func, &Parms);

	if (Result != nullptr)
		*Result = Parms.Result;
}


// Function COMP_Inventory.COMP_Inventory_C.FindItemToUpgrade
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// class UClass*                           UpgradeClass                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class UITEM_UpgradeBase_C*              Item                                                   (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// ENUM_UpgradeResult                      Result                                                 (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UCOMP_Inventory_C::FindItemToUpgrade(class UClass* UpgradeClass, class UITEM_UpgradeBase_C** Item, ENUM_UpgradeResult* Result)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("COMP_Inventory_C", "FindItemToUpgrade");

	Params::COMP_Inventory_C_FindItemToUpgrade Parms{};

	Parms.UpgradeClass = UpgradeClass;

	UObject::ProcessEvent(Func, &Parms);

	if (Item != nullptr)
		*Item = Parms.Item;

	if (Result != nullptr)
		*Result = Parms.Result;
}


// Function COMP_Inventory.COMP_Inventory_C.CanGrantItems
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// TArray<struct FSTRUCT_SoftItemParams>   ItemParamsArray                                        (BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
// bool                                    Result                                                 (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void UCOMP_Inventory_C::CanGrantItems(TArray<struct FSTRUCT_SoftItemParams>& ItemParamsArray, bool* Result)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("COMP_Inventory_C", "CanGrantItems");

	Params::COMP_Inventory_C_CanGrantItems Parms{};

	Parms.ItemParamsArray = std::move(ItemParamsArray);

	UObject::ProcessEvent(Func, &Parms);

	ItemParamsArray = std::move(Parms.ItemParamsArray);

	if (Result != nullptr)
		*Result = Parms.Result;
}


// Function COMP_Inventory.COMP_Inventory_C.IsEquipmentDisabled
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// bool                                    Result                                                 (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void UCOMP_Inventory_C::IsEquipmentDisabled(bool* Result)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("COMP_Inventory_C", "IsEquipmentDisabled");

	Params::COMP_Inventory_C_IsEquipmentDisabled Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (Result != nullptr)
		*Result = Parms.Result;
}


// Function COMP_Inventory.COMP_Inventory_C.ShouldCreateLinkedPickups
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// bool                                    Result                                                 (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void UCOMP_Inventory_C::ShouldCreateLinkedPickups(bool* Result)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("COMP_Inventory_C", "ShouldCreateLinkedPickups");

	Params::COMP_Inventory_C_ShouldCreateLinkedPickups Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (Result != nullptr)
		*Result = Parms.Result;
}


// Function COMP_Inventory.COMP_Inventory_C.SetEquipmentDisabled
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    Disable                                                (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)

void UCOMP_Inventory_C::SetEquipmentDisabled(bool Disable)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("COMP_Inventory_C", "SetEquipmentDisabled");

	Params::COMP_Inventory_C_SetEquipmentDisabled Parms{};

	Parms.Disable = Disable;

	UObject::ProcessEvent(Func, &Parms);
}


// Function COMP_Inventory.COMP_Inventory_C.UpdateItemActivationStates
// (Public, BlueprintCallable, BlueprintEvent)

void UCOMP_Inventory_C::UpdateItemActivationStates()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("COMP_Inventory_C", "UpdateItemActivationStates");

	UObject::ProcessEvent(Func, nullptr);
}


// Function COMP_Inventory.COMP_Inventory_C.HasReachedEquipCapacity
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// class UInventoryBag_C*                  Bag                                                    (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class UITEM_Base_C*                     Item                                                   (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    Result                                                 (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void UCOMP_Inventory_C::HasReachedEquipCapacity(class UInventoryBag_C* Bag, class UITEM_Base_C* Item, bool* Result)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("COMP_Inventory_C", "HasReachedEquipCapacity");

	Params::COMP_Inventory_C_HasReachedEquipCapacity Parms{};

	Parms.Bag = Bag;
	Parms.Item = Item;

	UObject::ProcessEvent(Func, &Parms);

	if (Result != nullptr)
		*Result = Parms.Result;
}


// Function COMP_Inventory.COMP_Inventory_C.GetFirstEquippedItem
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// class UInventoryBag_C*                  Bag                                                    (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class UITEM_Base_C*                     Item                                                   (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UCOMP_Inventory_C::GetFirstEquippedItem(class UInventoryBag_C* Bag, class UITEM_Base_C** Item)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("COMP_Inventory_C", "GetFirstEquippedItem");

	Params::COMP_Inventory_C_GetFirstEquippedItem Parms{};

	Parms.Bag = Bag;

	UObject::ProcessEvent(Func, &Parms);

	if (Item != nullptr)
		*Item = Parms.Item;
}


// Function COMP_Inventory.COMP_Inventory_C.GetDescriptionMessage
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// class FText                             BaseMessage                                            (BlueprintVisible, BlueprintReadOnly, Parm)
// class FText                             Text                                                   (Parm, OutParm)

void UCOMP_Inventory_C::GetDescriptionMessage(const class FText& BaseMessage, class FText* Text)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("COMP_Inventory_C", "GetDescriptionMessage");

	Params::COMP_Inventory_C_GetDescriptionMessage Parms{};

	Parms.BaseMessage = std::move(BaseMessage);

	UObject::ProcessEvent(Func, &Parms);

	if (Text != nullptr)
		*Text = std::move(Parms.Text);
}


// Function COMP_Inventory.COMP_Inventory_C.ShouldSaveComponent
// (Event, Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// struct FStreamingSaveGameComponentParamsParams_0                                               (Parm, OutParm, NoDestructor)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor)

bool UCOMP_Inventory_C::ShouldSaveComponent(struct FStreamingSaveGameComponentParams* Params_0)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("COMP_Inventory_C", "ShouldSaveComponent");

	Params::COMP_Inventory_C_ShouldSaveComponent Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (Params_0 != nullptr)
		*Params_0 = std::move(Parms.Params_0);

	return Parms.ReturnValue;
}

}

