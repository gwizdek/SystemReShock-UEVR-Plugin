#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: LevelVoxelization

#include "Basic.hpp"

#include "CoreUObject_structs.hpp"
#include "CoreUObject_classes.hpp"
#include "CoreGame_structs.hpp"
#include "Engine_structs.hpp"
#include "Engine_classes.hpp"
#include "Niagara_classes.hpp"
#include "LevelVoxelization_structs.hpp"


namespace SDK
{

// Class LevelVoxelization.StaticVoxelHazardVolumeComponent
// 0x0010 (0x0490 - 0x0480)
class UStaticVoxelHazardVolumeComponent final : public UBoxComponent
{
public:
	struct FEnumHandle                            HazardType;                                        // 0x0478(0x0010)(Edit, BlueprintVisible, NoDestructor, Protected, NativeAccessSpecifierProtected)
	uint8                                         HazardLevel;                                       // 0x0488(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          bFloodfillRooms;                                   // 0x0489(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_48A[0x6];                                      // 0x048A(0x0006)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"StaticVoxelHazardVolumeComponent">();
	}
	static class UStaticVoxelHazardVolumeComponent* GetDefaultObj()
	{
		return GetDefaultObjImpl<UStaticVoxelHazardVolumeComponent>();
	}
};
static_assert(alignof(UStaticVoxelHazardVolumeComponent) == 0x000010, "Wrong alignment on UStaticVoxelHazardVolumeComponent");
static_assert(sizeof(UStaticVoxelHazardVolumeComponent) == 0x000490, "Wrong size on UStaticVoxelHazardVolumeComponent");
static_assert(offsetof(UStaticVoxelHazardVolumeComponent, HazardType) == 0x000478, "Member 'UStaticVoxelHazardVolumeComponent::HazardType' has a wrong offset!");
static_assert(offsetof(UStaticVoxelHazardVolumeComponent, HazardLevel) == 0x000488, "Member 'UStaticVoxelHazardVolumeComponent::HazardLevel' has a wrong offset!");
static_assert(offsetof(UStaticVoxelHazardVolumeComponent, bFloodfillRooms) == 0x000489, "Member 'UStaticVoxelHazardVolumeComponent::bFloodfillRooms' has a wrong offset!");

// Class LevelVoxelization.VoxelTileMeshEditorActor
// 0x0010 (0x0230 - 0x0220)
class AVoxelTileMeshEditorActor final : public AActor
{
public:
	class UStaticMeshComponent*                   StaticMeshComponent;                               // 0x0220(0x0008)(Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bAlwaysGenerateNavDataForReplacedMesh;             // 0x0228(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bForceGenerateSlopeForNavigation;                  // 0x0229(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_22A[0x6];                                      // 0x022A(0x0006)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"VoxelTileMeshEditorActor">();
	}
	static class AVoxelTileMeshEditorActor* GetDefaultObj()
	{
		return GetDefaultObjImpl<AVoxelTileMeshEditorActor>();
	}
};
static_assert(alignof(AVoxelTileMeshEditorActor) == 0x000008, "Wrong alignment on AVoxelTileMeshEditorActor");
static_assert(sizeof(AVoxelTileMeshEditorActor) == 0x000230, "Wrong size on AVoxelTileMeshEditorActor");
static_assert(offsetof(AVoxelTileMeshEditorActor, StaticMeshComponent) == 0x000220, "Member 'AVoxelTileMeshEditorActor::StaticMeshComponent' has a wrong offset!");
static_assert(offsetof(AVoxelTileMeshEditorActor, bAlwaysGenerateNavDataForReplacedMesh) == 0x000228, "Member 'AVoxelTileMeshEditorActor::bAlwaysGenerateNavDataForReplacedMesh' has a wrong offset!");
static_assert(offsetof(AVoxelTileMeshEditorActor, bForceGenerateSlopeForNavigation) == 0x000229, "Member 'AVoxelTileMeshEditorActor::bForceGenerateSlopeForNavigation' has a wrong offset!");

// Class LevelVoxelization.VoxelTileMeshAssetUserData
// 0x0000 (0x0028 - 0x0028)
class UVoxelTileMeshAssetUserData final : public UAssetUserData
{
public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"VoxelTileMeshAssetUserData">();
	}
	static class UVoxelTileMeshAssetUserData* GetDefaultObj()
	{
		return GetDefaultObjImpl<UVoxelTileMeshAssetUserData>();
	}
};
static_assert(alignof(UVoxelTileMeshAssetUserData) == 0x000008, "Wrong alignment on UVoxelTileMeshAssetUserData");
static_assert(sizeof(UVoxelTileMeshAssetUserData) == 0x000028, "Wrong size on UVoxelTileMeshAssetUserData");

// Class LevelVoxelization.LevelVoxelizationData
// 0x01D0 (0x01F8 - 0x0028)
class ULevelVoxelizationData final : public UObject
{
public:
	class FName                                   LevelName;                                         // 0x0028(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	struct FIntPoint                              GridStartLocation;                                 // 0x0030(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	struct FIntPoint                              GridSize;                                          // 0x0038(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         MinZCoordinate;                                    // 0x0040(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         MaxZCoordinate;                                    // 0x0044(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UDataTable*                             RegionDataTable;                                   // 0x0048(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_50[0x1A8];                                     // 0x0050(0x01A8)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	bool GetBlendedVoxelMeshSurfaceNormal(const struct FTransform& SourceTransform, float SnapDistance, float BlendAmount, const TArray<struct FVector>& LocalTraceOffsets, const struct FVector& LevelOffset, bool bIncludePerspectiveMeshes, bool bDebugDrawTraces, struct FVector* OutNormal, float* OutDistance) const;
	struct FIntPoint GetColumnLocationFromVoxelLocation2D(const struct FIntPoint& VoxelLocation2D) const;
	TArray<struct FVoxelWallLocation> GetNeighborWallLocations(const struct FVoxelWallLocation& WallLocation) const;
	int32 GetPortalCount() const;
	struct FDataTableRowHandle GetRegionRowHandleForWorldLocation(const struct FVector& WorldLocation, const struct FVector& WorldForwardVector, const struct FVector& WorldRightVector, const struct FVector& LevelOffset) const;
	struct FDataTableRowHandle GetRegionRowHandleFromColumnLocation(const struct FIntPoint& ColumnLocation) const;
	int32 GetRoomCount() const;
	struct FIntPoint GetVoxelLocation2DFromColumnLocation(const struct FIntPoint& ColumnLocation) const;
	bool GetVoxelMeshSurfaceTransform(const struct FTransform& SourceTransform, float SourceRadius, float SnapDistance, const struct FVector& DesiredTranslation, const struct FVector& LevelOffset, bool bIncludePerspectiveMeshes, bool bClosestSurfaceFallback, struct FTransform* OutSurfaceTransform) const;
	int32 GetWallComponentCount() const;
	int32 GetWallComponentIndexAtWallLocation(const struct FVoxelWallLocation& WallLocation) const;
	class FString GetWallComponentPathNameFromIndex(int32 ComponentIndex) const;
	struct FVoxelWallLocation GetWallLocationForPrimitiveComponentAtVoxelLocation(class UPrimitiveComponent* PrimitiveComponent, const struct FIntVector& VoxelLocation, class UObject* WorldContextObject) const;
	TArray<struct FVoxelWallLocation> GetWallLocationsForPrimitiveComponentAtVoxelLocations(class UPrimitiveComponent* PrimitiveComponent, const TArray<struct FIntVector>& VoxelLocations, class UObject* WorldContextObject) const;
	TArray<struct FVoxelWallLocation> GetWallLocationsForPrimitiveComponentInVoxelBounds(class UPrimitiveComponent* PrimitiveComponent, const struct FIntVector& MinVoxelLocation, const struct FIntVector& MaxVoxelLocation, class UObject* WorldContextObject) const;
	bool RayTraceThroughVoxels(const struct FVector& SourceLocation, const struct FVector& TraceDirection, float TraceDistance, const struct FVector& LevelOffset, struct FIntVector* OutHitVoxelLocation, struct FVector* OutWorldLocation, int32* OutHitPolygonIndex) const;
	bool RayTraverseThroughVoxels(const struct FVector& SourceLocation, const struct FVector& TraceDirection, float TraceDistance, const struct FVector& LevelOffset, struct FIntVector* OutHitVoxelLocation) const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"LevelVoxelizationData">();
	}
	static class ULevelVoxelizationData* GetDefaultObj()
	{
		return GetDefaultObjImpl<ULevelVoxelizationData>();
	}
};
static_assert(alignof(ULevelVoxelizationData) == 0x000008, "Wrong alignment on ULevelVoxelizationData");
static_assert(sizeof(ULevelVoxelizationData) == 0x0001F8, "Wrong size on ULevelVoxelizationData");
static_assert(offsetof(ULevelVoxelizationData, LevelName) == 0x000028, "Member 'ULevelVoxelizationData::LevelName' has a wrong offset!");
static_assert(offsetof(ULevelVoxelizationData, GridStartLocation) == 0x000030, "Member 'ULevelVoxelizationData::GridStartLocation' has a wrong offset!");
static_assert(offsetof(ULevelVoxelizationData, GridSize) == 0x000038, "Member 'ULevelVoxelizationData::GridSize' has a wrong offset!");
static_assert(offsetof(ULevelVoxelizationData, MinZCoordinate) == 0x000040, "Member 'ULevelVoxelizationData::MinZCoordinate' has a wrong offset!");
static_assert(offsetof(ULevelVoxelizationData, MaxZCoordinate) == 0x000044, "Member 'ULevelVoxelizationData::MaxZCoordinate' has a wrong offset!");
static_assert(offsetof(ULevelVoxelizationData, RegionDataTable) == 0x000048, "Member 'ULevelVoxelizationData::RegionDataTable' has a wrong offset!");

// Class LevelVoxelization.BatchedLevelVoxelization
// 0x0048 (0x0078 - 0x0030)
class UBatchedLevelVoxelization final : public UDataAsset
{
public:
	int32                                         VoxelSize;                                         // 0x0030(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	int32                                         ChunkCellDimensions;                               // 0x0034(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         bAssignSunLightChannel : 1;                        // 0x0038(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, AdvancedDisplay, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected))
	uint8                                         Pad_39[0x3];                                       // 0x0039(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         SunMaxPitch;                                       // 0x003C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class FString                                 ExteriorLevelNameSuffix;                           // 0x0040(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, AdvancedDisplay, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class FString                                 OutdoorLevelNameSuffix;                            // 0x0050(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, AdvancedDisplay, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         VoxelHalfSize;                                     // 0x0060(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         InverseVoxelSize;                                  // 0x0064(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	TArray<class ULevelVoxelizationData*>         LevelDataArray;                                    // 0x0068(0x0010)(ZeroConstructor, Protected, NativeAccessSpecifierProtected)

public:
	class ULevelVoxelizationData* GetVoxelDataForLevelByName(class FName LevelName) const;
	struct FIntPoint GetVoxelLocation2DFromWorldLocation2D(const struct FVector2D& WorldLocation2D, const struct FVector2D& LevelOffset2D) const;
	struct FIntVector GetVoxelLocationFromWorldLocation(const struct FVector& WorldLocation, const struct FVector& LevelOffset) const;
	struct FVector2D GetWorldCenterLocation2DFromVoxelLocation2D(const struct FIntPoint& VoxelLocation2D, const struct FVector2D& LevelOffset2D) const;
	struct FVector GetWorldCenterLocationFromVoxelLocation(const struct FIntVector& VoxelLocation, const struct FVector& LevelOffset) const;
	struct FVector GetWorldCornerLocationFromVoxelLocation(const struct FIntVector& VoxelLocation, const struct FVector& LevelOffset) const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"BatchedLevelVoxelization">();
	}
	static class UBatchedLevelVoxelization* GetDefaultObj()
	{
		return GetDefaultObjImpl<UBatchedLevelVoxelization>();
	}
};
static_assert(alignof(UBatchedLevelVoxelization) == 0x000008, "Wrong alignment on UBatchedLevelVoxelization");
static_assert(sizeof(UBatchedLevelVoxelization) == 0x000078, "Wrong size on UBatchedLevelVoxelization");
static_assert(offsetof(UBatchedLevelVoxelization, VoxelSize) == 0x000030, "Member 'UBatchedLevelVoxelization::VoxelSize' has a wrong offset!");
static_assert(offsetof(UBatchedLevelVoxelization, ChunkCellDimensions) == 0x000034, "Member 'UBatchedLevelVoxelization::ChunkCellDimensions' has a wrong offset!");
static_assert(offsetof(UBatchedLevelVoxelization, SunMaxPitch) == 0x00003C, "Member 'UBatchedLevelVoxelization::SunMaxPitch' has a wrong offset!");
static_assert(offsetof(UBatchedLevelVoxelization, ExteriorLevelNameSuffix) == 0x000040, "Member 'UBatchedLevelVoxelization::ExteriorLevelNameSuffix' has a wrong offset!");
static_assert(offsetof(UBatchedLevelVoxelization, OutdoorLevelNameSuffix) == 0x000050, "Member 'UBatchedLevelVoxelization::OutdoorLevelNameSuffix' has a wrong offset!");
static_assert(offsetof(UBatchedLevelVoxelization, VoxelHalfSize) == 0x000060, "Member 'UBatchedLevelVoxelization::VoxelHalfSize' has a wrong offset!");
static_assert(offsetof(UBatchedLevelVoxelization, InverseVoxelSize) == 0x000064, "Member 'UBatchedLevelVoxelization::InverseVoxelSize' has a wrong offset!");
static_assert(offsetof(UBatchedLevelVoxelization, LevelDataArray) == 0x000068, "Member 'UBatchedLevelVoxelization::LevelDataArray' has a wrong offset!");

// Class LevelVoxelization.VoxelActorComponent
// 0x0030 (0x04B0 - 0x0480)
class UVoxelActorComponent : public UBoxComponent
{
public:
	class UVoxelLevelManager*                     LevelManager;                                      // 0x0478(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	struct FIntVector                             LastMinVoxelLocation;                              // 0x0480(0x000C)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	struct FIntVector                             LocalBoxVoxelDimensions;                           // 0x048C(0x000C)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	struct FIntVector                             WorldBoxVoxelDimensions;                           // 0x0498(0x000C)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_4A4[0xC];                                      // 0x04A4(0x000C)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	class UVoxelLevelManager* GetVoxelLevelManager();
	void SetHalfExtent(const struct FVector& InHalfExtent);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"VoxelActorComponent">();
	}
	static class UVoxelActorComponent* GetDefaultObj()
	{
		return GetDefaultObjImpl<UVoxelActorComponent>();
	}
};
static_assert(alignof(UVoxelActorComponent) == 0x000010, "Wrong alignment on UVoxelActorComponent");
static_assert(sizeof(UVoxelActorComponent) == 0x0004B0, "Wrong size on UVoxelActorComponent");
static_assert(offsetof(UVoxelActorComponent, LevelManager) == 0x000478, "Member 'UVoxelActorComponent::LevelManager' has a wrong offset!");
static_assert(offsetof(UVoxelActorComponent, LastMinVoxelLocation) == 0x000480, "Member 'UVoxelActorComponent::LastMinVoxelLocation' has a wrong offset!");
static_assert(offsetof(UVoxelActorComponent, LocalBoxVoxelDimensions) == 0x00048C, "Member 'UVoxelActorComponent::LocalBoxVoxelDimensions' has a wrong offset!");
static_assert(offsetof(UVoxelActorComponent, WorldBoxVoxelDimensions) == 0x000498, "Member 'UVoxelActorComponent::WorldBoxVoxelDimensions' has a wrong offset!");

// Class LevelVoxelization.CullableVoxelActorComponent
// 0x0060 (0x0510 - 0x04B0)
#pragma pack(push, 0x1)
class alignas(0x10) UCullableVoxelActorComponent : public UVoxelActorComponent
{
public:
	FMulticastInlineDelegateProperty_             OnCullableComponentShouldBeVisible;                // 0x04B0(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, Protected, NativeAccessSpecifierProtected)
	FMulticastInlineDelegateProperty_             OnCullableComponentMightBeAudible;                 // 0x04C0(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, Protected, NativeAccessSpecifierProtected)
	ECullableRoomAssignmentType                   RoomAssignmentType;                                // 0x04D0(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_4D1[0x3];                                      // 0x04D1(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                LocalRoomOffset;                                   // 0x04D4(0x000C)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         MaxAudibleRange;                                   // 0x04E0(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_4E4[0x24];                                     // 0x04E4(0x0024)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	bool SetRoomAssignmentType(ECullableRoomAssignmentType NewAssignmentType);
	bool UpdateSunLightChannel();

	bool IsVisibleToCullingCamera() const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"CullableVoxelActorComponent">();
	}
	static class UCullableVoxelActorComponent* GetDefaultObj()
	{
		return GetDefaultObjImpl<UCullableVoxelActorComponent>();
	}
};
#pragma pack(pop)
static_assert(alignof(UCullableVoxelActorComponent) == 0x000010, "Wrong alignment on UCullableVoxelActorComponent");
static_assert(sizeof(UCullableVoxelActorComponent) == 0x000510, "Wrong size on UCullableVoxelActorComponent");
static_assert(offsetof(UCullableVoxelActorComponent, OnCullableComponentShouldBeVisible) == 0x0004B0, "Member 'UCullableVoxelActorComponent::OnCullableComponentShouldBeVisible' has a wrong offset!");
static_assert(offsetof(UCullableVoxelActorComponent, OnCullableComponentMightBeAudible) == 0x0004C0, "Member 'UCullableVoxelActorComponent::OnCullableComponentMightBeAudible' has a wrong offset!");
static_assert(offsetof(UCullableVoxelActorComponent, RoomAssignmentType) == 0x0004D0, "Member 'UCullableVoxelActorComponent::RoomAssignmentType' has a wrong offset!");
static_assert(offsetof(UCullableVoxelActorComponent, LocalRoomOffset) == 0x0004D4, "Member 'UCullableVoxelActorComponent::LocalRoomOffset' has a wrong offset!");
static_assert(offsetof(UCullableVoxelActorComponent, MaxAudibleRange) == 0x0004E0, "Member 'UCullableVoxelActorComponent::MaxAudibleRange' has a wrong offset!");

// Class LevelVoxelization.CullableExteriorActorComponent
// 0x0010 (0x0490 - 0x0480)
class UCullableExteriorActorComponent : public UBoxComponent
{
public:
	FMulticastInlineDelegateProperty_             OnCullableComponentShouldBeVisible;                // 0x0478(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, Protected, NativeAccessSpecifierProtected)
	uint8                                         Pad_488[0x8];                                      // 0x0488(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	class UVoxelLevelManager* GetVoxelLevelManager();

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"CullableExteriorActorComponent">();
	}
	static class UCullableExteriorActorComponent* GetDefaultObj()
	{
		return GetDefaultObjImpl<UCullableExteriorActorComponent>();
	}
};
static_assert(alignof(UCullableExteriorActorComponent) == 0x000010, "Wrong alignment on UCullableExteriorActorComponent");
static_assert(sizeof(UCullableExteriorActorComponent) == 0x000490, "Wrong size on UCullableExteriorActorComponent");
static_assert(offsetof(UCullableExteriorActorComponent, OnCullableComponentShouldBeVisible) == 0x000478, "Member 'UCullableExteriorActorComponent::OnCullableComponentShouldBeVisible' has a wrong offset!");

// Class LevelVoxelization.NiagaraDataInterfaceVoxelAudioPlayer
// 0x0020 (0x0058 - 0x0038)
class UNiagaraDataInterfaceVoxelAudioPlayer final : public UNiagaraDataInterface
{
public:
	TSubclassOf<class UVoxelAudioComponent>       ComponentClass;                                    // 0x0038(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class USoundBase*                             SoundToPlay;                                       // 0x0040(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class USoundAttenuation*                      Attenuation;                                       // 0x0048(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          bLimitPlaysPerTick;                                // 0x0050(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_51[0x3];                                       // 0x0051(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         MaxPlaysPerTick;                                   // 0x0054(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"NiagaraDataInterfaceVoxelAudioPlayer">();
	}
	static class UNiagaraDataInterfaceVoxelAudioPlayer* GetDefaultObj()
	{
		return GetDefaultObjImpl<UNiagaraDataInterfaceVoxelAudioPlayer>();
	}
};
static_assert(alignof(UNiagaraDataInterfaceVoxelAudioPlayer) == 0x000008, "Wrong alignment on UNiagaraDataInterfaceVoxelAudioPlayer");
static_assert(sizeof(UNiagaraDataInterfaceVoxelAudioPlayer) == 0x000058, "Wrong size on UNiagaraDataInterfaceVoxelAudioPlayer");
static_assert(offsetof(UNiagaraDataInterfaceVoxelAudioPlayer, ComponentClass) == 0x000038, "Member 'UNiagaraDataInterfaceVoxelAudioPlayer::ComponentClass' has a wrong offset!");
static_assert(offsetof(UNiagaraDataInterfaceVoxelAudioPlayer, SoundToPlay) == 0x000040, "Member 'UNiagaraDataInterfaceVoxelAudioPlayer::SoundToPlay' has a wrong offset!");
static_assert(offsetof(UNiagaraDataInterfaceVoxelAudioPlayer, Attenuation) == 0x000048, "Member 'UNiagaraDataInterfaceVoxelAudioPlayer::Attenuation' has a wrong offset!");
static_assert(offsetof(UNiagaraDataInterfaceVoxelAudioPlayer, bLimitPlaysPerTick) == 0x000050, "Member 'UNiagaraDataInterfaceVoxelAudioPlayer::bLimitPlaysPerTick' has a wrong offset!");
static_assert(offsetof(UNiagaraDataInterfaceVoxelAudioPlayer, MaxPlaysPerTick) == 0x000054, "Member 'UNiagaraDataInterfaceVoxelAudioPlayer::MaxPlaysPerTick' has a wrong offset!");

// Class LevelVoxelization.ScannableLevelRegion
// 0x0018 (0x0238 - 0x0220)
class AScannableLevelRegion final : public AActor
{
public:
	struct FDataTableRowHandle                    DataTableRowHandle;                                // 0x0220(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, Protected, NativeAccessSpecifierProtected)
	class UBoxComponent*                          RegionBoxComponent;                                // 0x0230(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"ScannableLevelRegion">();
	}
	static class AScannableLevelRegion* GetDefaultObj()
	{
		return GetDefaultObjImpl<AScannableLevelRegion>();
	}
};
static_assert(alignof(AScannableLevelRegion) == 0x000008, "Wrong alignment on AScannableLevelRegion");
static_assert(sizeof(AScannableLevelRegion) == 0x000238, "Wrong size on AScannableLevelRegion");
static_assert(offsetof(AScannableLevelRegion, DataTableRowHandle) == 0x000220, "Member 'AScannableLevelRegion::DataTableRowHandle' has a wrong offset!");
static_assert(offsetof(AScannableLevelRegion, RegionBoxComponent) == 0x000230, "Member 'AScannableLevelRegion::RegionBoxComponent' has a wrong offset!");

// Class LevelVoxelization.ScannableVoxelActorComponent
// 0x00C0 (0x0540 - 0x0480)
class UScannableVoxelActorComponent : public UBoxComponent
{
public:
	FMulticastInlineDelegateProperty_             OnMeshVisibilityChanged;                           // 0x0478(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, Protected, NativeAccessSpecifierProtected)
	class UVoxelLevelManager*                     LevelManager;                                      // 0x0488(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	TSoftObjectPtr<class UMaterialInterface>      IconMaterial;                                      // 0x0490(0x0028)(Edit, BlueprintVisible, BlueprintReadOnly, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	struct FVector2D                              IconSize;                                          // 0x04B8(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	struct FVector                                IconRelativeOffset;                                // 0x04C0(0x000C)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_4CC[0x4];                                      // 0x04CC(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TSoftObjectPtr<class UStaticMesh>             StaticMesh;                                        // 0x04D0(0x0028)(Edit, BlueprintVisible, BlueprintReadOnly, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	TSoftObjectPtr<class UMaterialInterface>      Material;                                          // 0x04F8(0x0028)(Edit, BlueprintVisible, BlueprintReadOnly, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	struct FColor                                 MeshColor;                                         // 0x0520(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         bScannableEnabled : 1;                             // 0x0524(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (BlueprintVisible, BlueprintReadOnly, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected))
	uint8                                         bStaticColumnLocation : 1;                         // 0x0524(0x0001)(BitIndex: 0x01, PropSize: 0x0001 (Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected))
	uint8                                         bBlockScanner : 1;                                 // 0x0524(0x0001)(BitIndex: 0x02, PropSize: 0x0001 (Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected))
	uint8                                         bAutoReveal : 1;                                   // 0x0524(0x0001)(BitIndex: 0x03, PropSize: 0x0001 (Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected))
	uint8                                         bRotateIcon : 1;                                   // 0x0524(0x0001)(BitIndex: 0x04, PropSize: 0x0001 (Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected))
	uint8                                         bWallObject : 1;                                   // 0x0524(0x0001)(BitIndex: 0x05, PropSize: 0x0001 (Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected))
	uint8                                         bShowMeshComponents : 1;                           // 0x0524(0x0001)(BitIndex: 0x06, PropSize: 0x0001 (Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected))
	uint8                                         Pad_525[0x1B];                                     // 0x0525(0x001B)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	class UVoxelLevelManager* GetVoxelLevelManager();
	void SetBillboardIconMaterial(class UMaterialInterface* NewMaterial);
	void SetBillboardIconShouldRotate(bool bShouldRotate);
	void SetInitialMeshMaterial(class UMaterialInterface* NewMaterial);
	void SetInitialScannableColumnFlags(bool bInStaticColumnLocation, bool bInBlockScanner, bool bInWallObject);
	void SetScannableEnabled(bool bState);
	void SetScannableFilterTag(class FName NewTag);
	void SetScannableProceduralMeshData(const struct FVector& NewBoxHalfExtents, const struct FColor& NewMeshColor, class UMaterialInterface* NewMaterial);
	void ShowMeshComponents(bool bShow);
	void ShowMeshComponentsInitially(bool bShow);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"ScannableVoxelActorComponent">();
	}
	static class UScannableVoxelActorComponent* GetDefaultObj()
	{
		return GetDefaultObjImpl<UScannableVoxelActorComponent>();
	}
};
static_assert(alignof(UScannableVoxelActorComponent) == 0x000010, "Wrong alignment on UScannableVoxelActorComponent");
static_assert(sizeof(UScannableVoxelActorComponent) == 0x000540, "Wrong size on UScannableVoxelActorComponent");
static_assert(offsetof(UScannableVoxelActorComponent, OnMeshVisibilityChanged) == 0x000478, "Member 'UScannableVoxelActorComponent::OnMeshVisibilityChanged' has a wrong offset!");
static_assert(offsetof(UScannableVoxelActorComponent, LevelManager) == 0x000488, "Member 'UScannableVoxelActorComponent::LevelManager' has a wrong offset!");
static_assert(offsetof(UScannableVoxelActorComponent, IconMaterial) == 0x000490, "Member 'UScannableVoxelActorComponent::IconMaterial' has a wrong offset!");
static_assert(offsetof(UScannableVoxelActorComponent, IconSize) == 0x0004B8, "Member 'UScannableVoxelActorComponent::IconSize' has a wrong offset!");
static_assert(offsetof(UScannableVoxelActorComponent, IconRelativeOffset) == 0x0004C0, "Member 'UScannableVoxelActorComponent::IconRelativeOffset' has a wrong offset!");
static_assert(offsetof(UScannableVoxelActorComponent, StaticMesh) == 0x0004D0, "Member 'UScannableVoxelActorComponent::StaticMesh' has a wrong offset!");
static_assert(offsetof(UScannableVoxelActorComponent, Material) == 0x0004F8, "Member 'UScannableVoxelActorComponent::Material' has a wrong offset!");
static_assert(offsetof(UScannableVoxelActorComponent, MeshColor) == 0x000520, "Member 'UScannableVoxelActorComponent::MeshColor' has a wrong offset!");

// Class LevelVoxelization.VoxelAudioComponent
// 0x00E0 (0x0590 - 0x04B0)
class UVoxelAudioComponent : public UVoxelActorComponent
{
public:
	FMulticastInlineDelegateProperty_             OnAudioSingleEnvelopeValue;                        // 0x04B0(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, Protected, NativeAccessSpecifierProtected)
	class USoundBase*                             Sound;                                             // 0x04C0(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	TArray<struct FAudioComponentParam>           InstanceParameters;                                // 0x04C8(0x0010)(Edit, BlueprintVisible, ZeroConstructor, AdvancedDisplay, Protected, NativeAccessSpecifierProtected)
	class USoundAttenuation*                      AttenuationSettings;                               // 0x04D8(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	int32                                         MaxVoiceCount;                                     // 0x04E0(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         VolumeMultiplier;                                  // 0x04E4(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         PitchMultiplier;                                   // 0x04E8(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         DefaultOcclusion;                                  // 0x04EC(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         PropagationTickInterval;                           // 0x04F0(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         PropagationTickRate;                               // 0x04F4(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, AdvancedDisplay, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         bRestartNonLoopingWhenSilent : 1;                  // 0x04F8(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, AdvancedDisplay, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected))
	uint8                                         Pad_4F9[0x27];                                     // 0x04F9(0x0027)(Fixing Size After Last Property [ Dumper-7 ])
	class UCullableVoxelActorComponent*           LinkedCullableActorComponent;                      // 0x0520(0x0008)(ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	TMap<class UAudioComponent*, struct FSoundPropagationInterpData> ActiveAudioComponentMap;                           // 0x0528(0x0050)(ContainsInstancedReference, NativeAccessSpecifierPrivate)
	TArray<class UAudioComponent*>                InactiveAudioComponents;                           // 0x0578(0x0010)(ExportObject, ZeroConstructor, ContainsInstancedReference, NativeAccessSpecifierPrivate)
	uint8                                         Pad_588[0x8];                                      // 0x0588(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void FadeIn(float FadeInDuration, float FadeVolumeLevel, float StartTime, const EAudioFaderCurve FadeCurve);
	void FadeOut(float FadeOutDuration, const EAudioFaderCurve FadeCurve);
	void Play(float StartTime);
	void SetAutoDestroy(bool bNewAutoDestroy);
	void SetBoolParameter(class FName InName, bool InBool);
	void SetDefaultOcclusion(float NewValue);
	void SetFloatParameter(class FName InName, float InFloat);
	void SetIntegerParameter(class FName InName, int32 InInt);
	void SetMaxVoiceCount(int32 NewCount);
	void SetPitchMultiplier(float NewValue);
	void SetSound(class USoundBase* NewSound);
	void SetSoundAndFadeIn(class USoundBase* NewSound, float FadeInDuration, float FadeVolumeLevel, float StartTime, const EAudioFaderCurve FadeCurve);
	void SetSoundAndPlay(class USoundBase* NewSound, float StartTime);
	void SetVolumeMultiplier(float NewValue);
	void Stop();

	float GetSoundElapsedTime() const;
	float GetSoundRange() const;
	bool IsSoundPlaying() const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"VoxelAudioComponent">();
	}
	static class UVoxelAudioComponent* GetDefaultObj()
	{
		return GetDefaultObjImpl<UVoxelAudioComponent>();
	}
};
static_assert(alignof(UVoxelAudioComponent) == 0x000010, "Wrong alignment on UVoxelAudioComponent");
static_assert(sizeof(UVoxelAudioComponent) == 0x000590, "Wrong size on UVoxelAudioComponent");
static_assert(offsetof(UVoxelAudioComponent, OnAudioSingleEnvelopeValue) == 0x0004B0, "Member 'UVoxelAudioComponent::OnAudioSingleEnvelopeValue' has a wrong offset!");
static_assert(offsetof(UVoxelAudioComponent, Sound) == 0x0004C0, "Member 'UVoxelAudioComponent::Sound' has a wrong offset!");
static_assert(offsetof(UVoxelAudioComponent, InstanceParameters) == 0x0004C8, "Member 'UVoxelAudioComponent::InstanceParameters' has a wrong offset!");
static_assert(offsetof(UVoxelAudioComponent, AttenuationSettings) == 0x0004D8, "Member 'UVoxelAudioComponent::AttenuationSettings' has a wrong offset!");
static_assert(offsetof(UVoxelAudioComponent, MaxVoiceCount) == 0x0004E0, "Member 'UVoxelAudioComponent::MaxVoiceCount' has a wrong offset!");
static_assert(offsetof(UVoxelAudioComponent, VolumeMultiplier) == 0x0004E4, "Member 'UVoxelAudioComponent::VolumeMultiplier' has a wrong offset!");
static_assert(offsetof(UVoxelAudioComponent, PitchMultiplier) == 0x0004E8, "Member 'UVoxelAudioComponent::PitchMultiplier' has a wrong offset!");
static_assert(offsetof(UVoxelAudioComponent, DefaultOcclusion) == 0x0004EC, "Member 'UVoxelAudioComponent::DefaultOcclusion' has a wrong offset!");
static_assert(offsetof(UVoxelAudioComponent, PropagationTickInterval) == 0x0004F0, "Member 'UVoxelAudioComponent::PropagationTickInterval' has a wrong offset!");
static_assert(offsetof(UVoxelAudioComponent, PropagationTickRate) == 0x0004F4, "Member 'UVoxelAudioComponent::PropagationTickRate' has a wrong offset!");
static_assert(offsetof(UVoxelAudioComponent, LinkedCullableActorComponent) == 0x000520, "Member 'UVoxelAudioComponent::LinkedCullableActorComponent' has a wrong offset!");
static_assert(offsetof(UVoxelAudioComponent, ActiveAudioComponentMap) == 0x000528, "Member 'UVoxelAudioComponent::ActiveAudioComponentMap' has a wrong offset!");
static_assert(offsetof(UVoxelAudioComponent, InactiveAudioComponents) == 0x000578, "Member 'UVoxelAudioComponent::InactiveAudioComponents' has a wrong offset!");

// Class LevelVoxelization.VoxelCullableManager
// 0x01D8 (0x0200 - 0x0028)
class UVoxelCullableManager final : public UObject
{
public:
	float                                         MaxStaticComponentRadius;                          // 0x0028(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          bCullStaticMeshComponents;                         // 0x002C(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          bCullStaticLightComponents;                        // 0x002D(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          bCullStaticParticleSystemComponents;               // 0x002E(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_2F[0x1D1];                                     // 0x002F(0x01D1)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void AddHiddenEffectsComponents(const TArray<class UFXSystemComponent*>& EffectsComponents);
	void AddHiddenLightComponents(const TArray<class ULocalLightComponent*>& LightComponents);
	void RemoveHiddenEffectsComponents(const TArray<class UFXSystemComponent*>& EffectsComponents);
	void RemoveHiddenLightComponents(const TArray<class ULocalLightComponent*>& LightComponents);

	TMap<class AActor*, struct FVector2D> GetCullableActorsInAudibleRangeToPoint(const struct FVector& SoundLocation, float SoundRange, const TArray<TSubclassOf<class AActor>>& FilterByClasses) const;
	bool GetRoomAudibilityBetweenPoints(const struct FVector& SourceLocation, const struct FVector& TargetLocation, float SoundRange, float* OutObstruction, float* OutOcclusion) const;
	bool GetRoomVisibilityBetweenPoints(const struct FVector& SourceLocation, const struct FVector& TargetLocation) const;
	bool TraceVoxelVisibilityBetweenPoints(const struct FVector& SourceLocation, const struct FVector& TargetLocation) const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"VoxelCullableManager">();
	}
	static class UVoxelCullableManager* GetDefaultObj()
	{
		return GetDefaultObjImpl<UVoxelCullableManager>();
	}
};
static_assert(alignof(UVoxelCullableManager) == 0x000008, "Wrong alignment on UVoxelCullableManager");
static_assert(sizeof(UVoxelCullableManager) == 0x000200, "Wrong size on UVoxelCullableManager");
static_assert(offsetof(UVoxelCullableManager, MaxStaticComponentRadius) == 0x000028, "Member 'UVoxelCullableManager::MaxStaticComponentRadius' has a wrong offset!");
static_assert(offsetof(UVoxelCullableManager, bCullStaticMeshComponents) == 0x00002C, "Member 'UVoxelCullableManager::bCullStaticMeshComponents' has a wrong offset!");
static_assert(offsetof(UVoxelCullableManager, bCullStaticLightComponents) == 0x00002D, "Member 'UVoxelCullableManager::bCullStaticLightComponents' has a wrong offset!");
static_assert(offsetof(UVoxelCullableManager, bCullStaticParticleSystemComponents) == 0x00002E, "Member 'UVoxelCullableManager::bCullStaticParticleSystemComponents' has a wrong offset!");

// Class LevelVoxelization.VoxelCullingAssetUserData
// 0x0008 (0x0030 - 0x0028)
class UVoxelCullingAssetUserData final : public UAssetUserData
{
public:
	bool                                          bWindowToExterior;                                 // 0x0028(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bInteriorWindow;                                   // 0x0029(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bCornerWindow;                                     // 0x002A(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bSkipPortalCreation;                               // 0x002B(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EAxis                                         WindowAxis;                                        // 0x002C(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2D[0x3];                                       // 0x002D(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"VoxelCullingAssetUserData">();
	}
	static class UVoxelCullingAssetUserData* GetDefaultObj()
	{
		return GetDefaultObjImpl<UVoxelCullingAssetUserData>();
	}
};
static_assert(alignof(UVoxelCullingAssetUserData) == 0x000008, "Wrong alignment on UVoxelCullingAssetUserData");
static_assert(sizeof(UVoxelCullingAssetUserData) == 0x000030, "Wrong size on UVoxelCullingAssetUserData");
static_assert(offsetof(UVoxelCullingAssetUserData, bWindowToExterior) == 0x000028, "Member 'UVoxelCullingAssetUserData::bWindowToExterior' has a wrong offset!");
static_assert(offsetof(UVoxelCullingAssetUserData, bInteriorWindow) == 0x000029, "Member 'UVoxelCullingAssetUserData::bInteriorWindow' has a wrong offset!");
static_assert(offsetof(UVoxelCullingAssetUserData, bCornerWindow) == 0x00002A, "Member 'UVoxelCullingAssetUserData::bCornerWindow' has a wrong offset!");
static_assert(offsetof(UVoxelCullingAssetUserData, bSkipPortalCreation) == 0x00002B, "Member 'UVoxelCullingAssetUserData::bSkipPortalCreation' has a wrong offset!");
static_assert(offsetof(UVoxelCullingAssetUserData, WindowAxis) == 0x00002C, "Member 'UVoxelCullingAssetUserData::WindowAxis' has a wrong offset!");

// Class LevelVoxelization.VoxelCullingComponent
// 0x06D0 (0x08D0 - 0x0200)
class UVoxelCullingComponent : public USceneComponent
{
public:
	class UVoxelLevelManager*                     LevelManager;                                      // 0x01F8(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	FMulticastInlineDelegateProperty_             OnWindowToExteriorVisibilityChanged;               // 0x0200(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, Protected, NativeAccessSpecifierProtected)
	float                                         MaxDistanceForRoomAudibility;                      // 0x0210(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         bEnableCulling : 1;                                // 0x0214(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected))
	uint8                                         Pad_215[0x6BB];                                    // 0x0215(0x06BB)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void ClearRoomProxyLocation();
	void SetRoomProxyLocation(const struct FVector& WorldLocation);

	class AActor* GetFirstCullableActorInLineOfSight(float TraceRadius, float TraceDistance, const TArray<TSubclassOf<class AActor>>& FilterByClasses, struct FVector* OutTraceHitLocation) const;
	void GetRoomPerceptibilityAtWorldLocation(const struct FVector& WorldLocation, bool* bOutIsVisible, bool* bOutIsAudible) const;
	bool IsAnyRoomPerceptibleBetweenWorldPoints(const struct FVector& SourceLocation, const struct FVector& TargetLocation, bool bQueryVisible, bool bQueryAudible) const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"VoxelCullingComponent">();
	}
	static class UVoxelCullingComponent* GetDefaultObj()
	{
		return GetDefaultObjImpl<UVoxelCullingComponent>();
	}
};
static_assert(alignof(UVoxelCullingComponent) == 0x000010, "Wrong alignment on UVoxelCullingComponent");
static_assert(sizeof(UVoxelCullingComponent) == 0x0008D0, "Wrong size on UVoxelCullingComponent");
static_assert(offsetof(UVoxelCullingComponent, LevelManager) == 0x0001F8, "Member 'UVoxelCullingComponent::LevelManager' has a wrong offset!");
static_assert(offsetof(UVoxelCullingComponent, OnWindowToExteriorVisibilityChanged) == 0x000200, "Member 'UVoxelCullingComponent::OnWindowToExteriorVisibilityChanged' has a wrong offset!");
static_assert(offsetof(UVoxelCullingComponent, MaxDistanceForRoomAudibility) == 0x000210, "Member 'UVoxelCullingComponent::MaxDistanceForRoomAudibility' has a wrong offset!");

// Class LevelVoxelization.VoxelLevelFunctionLibrary
// 0x0000 (0x0028 - 0x0028)
class UVoxelLevelFunctionLibrary final : public UBlueprintFunctionLibrary
{
public:
	static class UVoxelAudioComponent* SpawnVoxelSoundAtLocation(class UVoxelLevelManager* LevelManager, class USoundBase* Sound, const struct FVector& WorldLocation, float VolumeMultiplier, float PitchMultiplier, int32 MaxVoiceCount);
	static class UVoxelAudioComponent* SpawnVoxelSoundAtLocationFromClass(const class UObject* WorldContextObject, TSubclassOf<class UVoxelAudioComponent> ComponentClass, class USoundBase* Sound, const struct FVector& WorldLocation, float VolumeMultiplier, float PitchMultiplier, int32 MaxVoiceCount);
	static class UVoxelAudioComponent* SpawnVoxelSoundAttached(class UVoxelLevelManager* LevelManager, class USoundBase* Sound, class USceneComponent* AttachToComponent, class FName AttachPointName, const struct FVector& RelativeLocation, const struct FRotator& RelativeRotation, float VolumeMultiplier, float PitchMultiplier, int32 MaxVoiceCount, bool bAutoDestroy);
	static class UVoxelAudioComponent* SpawnVoxelSoundAttachedFromClass(TSubclassOf<class UVoxelAudioComponent> ComponentClass, class USoundBase* Sound, class USceneComponent* AttachToComponent, class FName AttachPointName, const struct FVector& RelativeLocation, const struct FRotator& RelativeRotation, float VolumeMultiplier, float PitchMultiplier, int32 MaxVoiceCount, bool bAutoDestroy);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"VoxelLevelFunctionLibrary">();
	}
	static class UVoxelLevelFunctionLibrary* GetDefaultObj()
	{
		return GetDefaultObjImpl<UVoxelLevelFunctionLibrary>();
	}
};
static_assert(alignof(UVoxelLevelFunctionLibrary) == 0x000008, "Wrong alignment on UVoxelLevelFunctionLibrary");
static_assert(sizeof(UVoxelLevelFunctionLibrary) == 0x000028, "Wrong size on UVoxelLevelFunctionLibrary");

// Class LevelVoxelization.VoxelAudioSettings
// 0x0010 (0x0040 - 0x0030)
class UVoxelAudioSettings final : public UDataAsset
{
public:
	class UCurveFloat*                            OcclusionLowPassFrequencyCurve;                    // 0x0030(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UCurveFloat*                            OcclusionVolumeCurve;                              // 0x0038(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"VoxelAudioSettings">();
	}
	static class UVoxelAudioSettings* GetDefaultObj()
	{
		return GetDefaultObjImpl<UVoxelAudioSettings>();
	}
};
static_assert(alignof(UVoxelAudioSettings) == 0x000008, "Wrong alignment on UVoxelAudioSettings");
static_assert(sizeof(UVoxelAudioSettings) == 0x000040, "Wrong size on UVoxelAudioSettings");
static_assert(offsetof(UVoxelAudioSettings, OcclusionLowPassFrequencyCurve) == 0x000030, "Member 'UVoxelAudioSettings::OcclusionLowPassFrequencyCurve' has a wrong offset!");
static_assert(offsetof(UVoxelAudioSettings, OcclusionVolumeCurve) == 0x000038, "Member 'UVoxelAudioSettings::OcclusionVolumeCurve' has a wrong offset!");

// Class LevelVoxelization.VoxelLevelManager
// 0x0110 (0x0138 - 0x0028)
class UVoxelLevelManager final : public UObject
{
public:
	TArray<class UBatchedLevelVoxelization*>      BatchedLevelVoxelizations;                         // 0x0028(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Protected, ExposeOnSpawn, NativeAccessSpecifierProtected)
	class UBatchedLevelVoxelization*              CurrentBatchedLevelVoxelization;                   // 0x0038(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class ULevelVoxelizationData*                 CurrentLevelData;                                  // 0x0040(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	struct FVector                                CurrentLevelOffset;                                // 0x0048(0x000C)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_54[0x4];                                       // 0x0054(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UVoxelAudioSettings*                    AudioSettings;                                     // 0x0058(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, ExposeOnSpawn, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UVoxelNavigationManager*                NavigationManager;                                 // 0x0060(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UVoxelCullableManager*                  CullableManager;                                   // 0x0068(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UVoxelPropagationManager*               PropagationManager;                                // 0x0070(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UVoxelCullingComponent*                 CullingComponent;                                  // 0x0078(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UVoxelScannerComponent*                 ScannerComponent;                                  // 0x0080(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class APawn*                                  CurrentPawn;                                       // 0x0088(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_90[0xA8];                                      // 0x0090(0x00A8)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	bool SetCurrentLevel(class FName LevelName, const struct FVector& LevelOffset);
	void SetCurrentPawn(class APawn* Pawn);
	void SetLevelLoadFinished();

	bool IsLevelLoadComplete() const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"VoxelLevelManager">();
	}
	static class UVoxelLevelManager* GetDefaultObj()
	{
		return GetDefaultObjImpl<UVoxelLevelManager>();
	}
};
static_assert(alignof(UVoxelLevelManager) == 0x000008, "Wrong alignment on UVoxelLevelManager");
static_assert(sizeof(UVoxelLevelManager) == 0x000138, "Wrong size on UVoxelLevelManager");
static_assert(offsetof(UVoxelLevelManager, BatchedLevelVoxelizations) == 0x000028, "Member 'UVoxelLevelManager::BatchedLevelVoxelizations' has a wrong offset!");
static_assert(offsetof(UVoxelLevelManager, CurrentBatchedLevelVoxelization) == 0x000038, "Member 'UVoxelLevelManager::CurrentBatchedLevelVoxelization' has a wrong offset!");
static_assert(offsetof(UVoxelLevelManager, CurrentLevelData) == 0x000040, "Member 'UVoxelLevelManager::CurrentLevelData' has a wrong offset!");
static_assert(offsetof(UVoxelLevelManager, CurrentLevelOffset) == 0x000048, "Member 'UVoxelLevelManager::CurrentLevelOffset' has a wrong offset!");
static_assert(offsetof(UVoxelLevelManager, AudioSettings) == 0x000058, "Member 'UVoxelLevelManager::AudioSettings' has a wrong offset!");
static_assert(offsetof(UVoxelLevelManager, NavigationManager) == 0x000060, "Member 'UVoxelLevelManager::NavigationManager' has a wrong offset!");
static_assert(offsetof(UVoxelLevelManager, CullableManager) == 0x000068, "Member 'UVoxelLevelManager::CullableManager' has a wrong offset!");
static_assert(offsetof(UVoxelLevelManager, PropagationManager) == 0x000070, "Member 'UVoxelLevelManager::PropagationManager' has a wrong offset!");
static_assert(offsetof(UVoxelLevelManager, CullingComponent) == 0x000078, "Member 'UVoxelLevelManager::CullingComponent' has a wrong offset!");
static_assert(offsetof(UVoxelLevelManager, ScannerComponent) == 0x000080, "Member 'UVoxelLevelManager::ScannerComponent' has a wrong offset!");
static_assert(offsetof(UVoxelLevelManager, CurrentPawn) == 0x000088, "Member 'UVoxelLevelManager::CurrentPawn' has a wrong offset!");

// Class LevelVoxelization.VoxelNavAgentComponent
// 0x0300 (0x0810 - 0x0510)
class UVoxelNavAgentComponent : public UCullableVoxelActorComponent
{
public:
	EVoxelNavigationType                          NavigationType;                                    // 0x0508(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	EVoxelNavigationResult                        NavigationResult;                                  // 0x0509(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_50A[0x2];                                      // 0x050A(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         MaxVoxelStepHeight;                                // 0x050C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	int32                                         MaxVoxelFallHeight;                                // 0x0510(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	int32                                         DesiredVoxelFlyHeight;                             // 0x0514(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	int32                                         StepCostPenalty;                                   // 0x0518(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_51C[0x4];                                      // 0x051C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UVoxelNavAgentComponent*                TargetAgentComponent;                              // 0x0520(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UVoxelNavAgentComponent*                PathProximityAgentComponent;                       // 0x0528(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	TArray<class UVoxelNavAgentComponent*>        TargetSubscribedAgentComponents;                   // 0x0530(0x0010)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, ContainsInstancedReference, Protected, NativeAccessSpecifierProtected)
	TArray<class UVoxelNavAgentComponent*>        PathProximitySubscribedAgentComponents;            // 0x0540(0x0010)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, ContainsInstancedReference, Protected, NativeAccessSpecifierProtected)
	struct FEnumFlagsHandle                       AfflictedByHazardTypes;                            // 0x0550(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, Protected, NativeAccessSpecifierProtected)
	struct FEnumFlagsHandle                       AvoidHazardTypes;                                  // 0x0560(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, Protected, NativeAccessSpecifierProtected)
	uint8                                         bCanOpenDoors : 1;                                 // 0x0570(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected))
	uint8                                         bCanChangeNavModifiers : 1;                        // 0x0570(0x0001)(BitIndex: 0x01, PropSize: 0x0001 (Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected))
	uint8                                         Pad_571[0x29F];                                    // 0x0571(0x029F)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	class UVoxelSpatialNavigationQuery* CreateSpatialNavigationQuery(bool bAllowObstacleManipulation);
	bool OnOverlapHazardLevelChanged(uint8 HazardType, uint8 HazardLevel);
	void PauseRepathUpdates(bool bPause);
	void SetNavigationType(EVoxelNavigationType NewNavigationType);
	void SetStepCostPenalty(int32 CostPenalty);
	bool StartPeriodicPathProximityUpdate(class UVoxelNavAgentComponent* TargetComponent, float PathProximityRange, float UpdateInterval);
	bool StartTrackingLocation(bool bWantsPropagationOverlaps);
	void StopAllAgentActivity();
	bool StopPeriodicPathProximityUpdate();
	bool StopTrackingLocation();
	bool TryClaimPointOfInterest(class USceneComponent* SceneComponent);
	bool TryPathToAgent(class UVoxelNavAgentComponent* TargetComponent, const struct FVector& TargetOffetLocation, bool bFindFastPathImmediately);
	bool TryPathToBounds(const struct FBox& TargetBounds, bool bFindFastPathImmediately);
	bool TryPathToLocation(const struct FVector& TargetLocation, bool bFindFastPathImmediately);
	bool TryPathToSpatialQueryLocation(class UVoxelSpatialNavigationQuery* SpatialQuery);
	bool TryPathToTransform(const struct FTransform& TargetTransform, bool bFindFastPathImmediately);
	bool TryStopPathing();
	bool TryUnclaimCurrentPointOfInterest();

	bool CanFitAtCurrentLocation() const;
	bool CanFitAtWorldLocation(const struct FVector& WorldLocation) const;
	bool CanNavigateInDirection(const struct FVector& DirectionVector) const;
	struct FVector GetAdjustedNavigationWorldLocation(bool bPerformLineTrace) const;
	struct FVector GetAdjustedNavigationWorldLocationAtWorldTransform(const struct FVector& WorldLocation, const struct FRotator& WorldRotation, bool bPerformLineTrace, struct FRotator* OutAdjustedWorldRotation) const;
	struct FIntPoint GetAgentVoxelDimensions() const;
	class USceneComponent* GetClaimedPointOfInterest() const;
	struct FVector GetCurrentNavigationTargetLocation() const;
	class AActor* GetFirstPathObstacleActor(int32* OutStartPathNodeIndex, int32* OutEndPathNodeIndex) const;
	struct FTwoVectors GetImmediateWorldPathPoints(bool bInterpolateForNavigation, struct FTwoVectors* OutNormals) const;
	uint8 GetMaxOverlapHazardLevelAndType(const TArray<uint8>& CandidateHazardTypes, uint8* OutHazardType) const;
	uint8 GetOverlapHazardLevelForHazardType(uint8 HazardType, class UVoxelPropagatorComponent* IgnorePropagator) const;
	int32 GetOverlappingNavigationModifierCost(EVoxelNavModifierType ModifierType) const;
	TArray<class USceneComponent*> GetUnclaimedPointsOfInterestInRoomPathRange(float RoomPathRange, const TSet<class USceneComponent*>& ExcludePOIs) const;
	int32 GetVoxelPathLength() const;
	struct FVector GetWorldPathPointAtNodeIndex(int32 PathNodeIndex, bool bInterpolateForNavigation, struct FVector* OutNormal) const;
	bool HasCurrentNavigationTarget() const;
	bool IsAgentLocationTracked() const;
	bool IsAgentOverlappingAnyHazards() const;
	bool IsAgentOverlappingSpecificHazards(const TArray<uint8>& HazardTypes) const;
	bool IsPathObstructedInDirection(const struct FVector& Direction, float Distance, struct FVector* OutHitWorldLocation, TArray<class UVoxelNavAgentComponent*>* OutNavAgentsInPath) const;
	bool WasRecentlyAbleToPathNearProximityTarget() const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"VoxelNavAgentComponent">();
	}
	static class UVoxelNavAgentComponent* GetDefaultObj()
	{
		return GetDefaultObjImpl<UVoxelNavAgentComponent>();
	}
};
static_assert(alignof(UVoxelNavAgentComponent) == 0x000010, "Wrong alignment on UVoxelNavAgentComponent");
static_assert(sizeof(UVoxelNavAgentComponent) == 0x000810, "Wrong size on UVoxelNavAgentComponent");
static_assert(offsetof(UVoxelNavAgentComponent, NavigationType) == 0x000508, "Member 'UVoxelNavAgentComponent::NavigationType' has a wrong offset!");
static_assert(offsetof(UVoxelNavAgentComponent, NavigationResult) == 0x000509, "Member 'UVoxelNavAgentComponent::NavigationResult' has a wrong offset!");
static_assert(offsetof(UVoxelNavAgentComponent, MaxVoxelStepHeight) == 0x00050C, "Member 'UVoxelNavAgentComponent::MaxVoxelStepHeight' has a wrong offset!");
static_assert(offsetof(UVoxelNavAgentComponent, MaxVoxelFallHeight) == 0x000510, "Member 'UVoxelNavAgentComponent::MaxVoxelFallHeight' has a wrong offset!");
static_assert(offsetof(UVoxelNavAgentComponent, DesiredVoxelFlyHeight) == 0x000514, "Member 'UVoxelNavAgentComponent::DesiredVoxelFlyHeight' has a wrong offset!");
static_assert(offsetof(UVoxelNavAgentComponent, StepCostPenalty) == 0x000518, "Member 'UVoxelNavAgentComponent::StepCostPenalty' has a wrong offset!");
static_assert(offsetof(UVoxelNavAgentComponent, TargetAgentComponent) == 0x000520, "Member 'UVoxelNavAgentComponent::TargetAgentComponent' has a wrong offset!");
static_assert(offsetof(UVoxelNavAgentComponent, PathProximityAgentComponent) == 0x000528, "Member 'UVoxelNavAgentComponent::PathProximityAgentComponent' has a wrong offset!");
static_assert(offsetof(UVoxelNavAgentComponent, TargetSubscribedAgentComponents) == 0x000530, "Member 'UVoxelNavAgentComponent::TargetSubscribedAgentComponents' has a wrong offset!");
static_assert(offsetof(UVoxelNavAgentComponent, PathProximitySubscribedAgentComponents) == 0x000540, "Member 'UVoxelNavAgentComponent::PathProximitySubscribedAgentComponents' has a wrong offset!");
static_assert(offsetof(UVoxelNavAgentComponent, AfflictedByHazardTypes) == 0x000550, "Member 'UVoxelNavAgentComponent::AfflictedByHazardTypes' has a wrong offset!");
static_assert(offsetof(UVoxelNavAgentComponent, AvoidHazardTypes) == 0x000560, "Member 'UVoxelNavAgentComponent::AvoidHazardTypes' has a wrong offset!");

// Class LevelVoxelization.VoxelNavigationManager
// 0x02A0 (0x02C8 - 0x0028)
class UVoxelNavigationManager final : public UObject
{
public:
	TSet<class UVoxelSpatialNavigationQuery*>     ActiveSpatialNavigationQuerySet;                   // 0x0028(0x0050)(Protected, NativeAccessSpecifierProtected)
	uint8                                         Pad_78[0x250];                                     // 0x0078(0x0250)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	class UVoxelSpatialNavigationQuery* CreateSpatialNavigationQueryAtWorldLocation(EVoxelNavigationType NavigationType, const struct FVector& WorldLocation, int32 AgentVoxelWidth, int32 AgentVoxelHeight, int32 MaxVoxelStepHeight, int32 MaxVoxelFallHeight, bool bCanOpenDoors, bool bCanChangeNavModifiers);
	void RegisterPointOfInterest(class USceneComponent* SceneComponent);
	void StopAllActivityOnActiveAgents();
	void StopNavigationOnActiveAgents();

	bool CanAgentWithSizeFitAtWorldLocation(EVoxelNavigationType NavigationType, const struct FIntPoint& AgentDimensions, const struct FVector& WorldLocation) const;
	bool GetFloorForAgentCapsule(const struct FVector& LastLocation, const struct FVector& CurrLocation, const struct FVector& CylinderVector, float CapsuleRadius, struct FVector* OutCollisionPoint, struct FVector* OutCollisionNormal, float* OutPenetrationDepth) const;
	TArray<class UVoxelNavAgentComponent*> GetNavigationAgentsInWorldBounds(const struct FBox& WorldBounds, TSoftClassPtr<class UClass> RequireClass, class AActor* IgnoreActor) const;
	TArray<struct FVoxelNavAgentTraceResult> GetNavigationAgentsUsingSphereTrace(const struct FVector& TraceSourceLocation, const struct FVector& TraceTargetLocation, float TraceRadius, const TArray<class AActor*>& IgnoreActors, const TArray<class UVoxelNavAgentComponent*>& IncludeUntrackedAgents) const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"VoxelNavigationManager">();
	}
	static class UVoxelNavigationManager* GetDefaultObj()
	{
		return GetDefaultObjImpl<UVoxelNavigationManager>();
	}
};
static_assert(alignof(UVoxelNavigationManager) == 0x000008, "Wrong alignment on UVoxelNavigationManager");
static_assert(sizeof(UVoxelNavigationManager) == 0x0002C8, "Wrong size on UVoxelNavigationManager");
static_assert(offsetof(UVoxelNavigationManager, ActiveSpatialNavigationQuerySet) == 0x000028, "Member 'UVoxelNavigationManager::ActiveSpatialNavigationQuerySet' has a wrong offset!");

// Class LevelVoxelization.VoxelSpatialNavigationQuery
// 0x0238 (0x0260 - 0x0028)
class UVoxelSpatialNavigationQuery final : public UObject
{
public:
	FMulticastInlineDelegateProperty_             OnQueryFinished;                                   // 0x0028(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	class UBatchedLevelVoxelization*              BatchedLevelVoxelization;                          // 0x0038(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class ULevelVoxelizationData*                 LevelVoxelizationData;                             // 0x0040(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	struct FVector                                LevelOffset;                                       // 0x0048(0x000C)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_54[0x20C];                                     // 0x0054(0x020C)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	bool AddAllGroundVoxelsInBox(const struct FVector& BoxLocation, const struct FVector& BoxHalfExtent);
	bool AddPathableVoxelsInBox(const struct FVector& BoxLocation, const struct FVector& BoxHalfExtent, EVoxelSpatialQueryFuncType WeightType, float WeightScale, int32 MinPathDistance, int32 MaxPathDistance);
	bool ExecuteQueryInBackground(int32 DesiredLocationCount, int32 WeightFilterPercent);
	bool FilterByVisibilityToPoint(const struct FVector& Point, bool bKeepIfVisible, bool bTraceComplex, const TArray<class AActor*>& ActorsToIgnore, int32 LocationFlags, ECollisionChannel TraceChannel);
	bool FilterOutActorLocations(TSubclassOf<class AActor> ClassFilter, class AActor* ActorToIgnore, float Radius, int32 AddedCost);
	bool FilterOutWorldLocations(const TArray<struct FVector>& WorldLocations, float Radius, int32 AddedCost);
	bool WeightByAngleFromViewpoint(const struct FVector& ViewLocation, const struct FVector& ViewDirection, EVoxelSpatialQueryFuncType WeightType, float WeightScale, float MidpointBias, bool b2D, int32 MinAngle, int32 MaxAngle);
	bool WeightByDistanceFromObstacles(float DistanceCutoff, float WeightScale);
	bool WeightByDistanceFromPoint(const struct FVector& Point, EVoxelSpatialQueryFuncType WeightType, float WeightScale, float MidpointBias, bool b2D, int32 MinDistance, int32 MaxDistance);
	bool WeightByHeightRange(float WorldZLocation, EVoxelSpatialQueryFuncType WeightType, float WeightScale, float MidpointBias, bool bAbove, bool bBelow, float MaxHeightRange);

	TArray<struct FVector4> GetWeightedLocations(bool bOnlyTopWeightedLocations) const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"VoxelSpatialNavigationQuery">();
	}
	static class UVoxelSpatialNavigationQuery* GetDefaultObj()
	{
		return GetDefaultObjImpl<UVoxelSpatialNavigationQuery>();
	}
};
static_assert(alignof(UVoxelSpatialNavigationQuery) == 0x000008, "Wrong alignment on UVoxelSpatialNavigationQuery");
static_assert(sizeof(UVoxelSpatialNavigationQuery) == 0x000260, "Wrong size on UVoxelSpatialNavigationQuery");
static_assert(offsetof(UVoxelSpatialNavigationQuery, OnQueryFinished) == 0x000028, "Member 'UVoxelSpatialNavigationQuery::OnQueryFinished' has a wrong offset!");
static_assert(offsetof(UVoxelSpatialNavigationQuery, BatchedLevelVoxelization) == 0x000038, "Member 'UVoxelSpatialNavigationQuery::BatchedLevelVoxelization' has a wrong offset!");
static_assert(offsetof(UVoxelSpatialNavigationQuery, LevelVoxelizationData) == 0x000040, "Member 'UVoxelSpatialNavigationQuery::LevelVoxelizationData' has a wrong offset!");
static_assert(offsetof(UVoxelSpatialNavigationQuery, LevelOffset) == 0x000048, "Member 'UVoxelSpatialNavigationQuery::LevelOffset' has a wrong offset!");

// Class LevelVoxelization.VoxelNavModifierComponent
// 0x0030 (0x0540 - 0x0510)
class UVoxelNavModifierComponent : public UCullableVoxelActorComponent
{
public:
	EVoxelNavModifierType                         ModifierType;                                      // 0x0508(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	EVoxelNavModifierState                        ModifierState;                                     // 0x0509(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	EAxis                                         TransporterAxis;                                   // 0x050A(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_50B[0x5];                                      // 0x050B(0x0005)(Fixing Size After Last Property [ Dumper-7 ])
	struct FEnumHandle                            HazardType;                                        // 0x0510(0x0010)(Edit, NoDestructor, Protected, NativeAccessSpecifierProtected)
	int32                                         AddedCost;                                         // 0x0520(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         SoundOcclusion;                                    // 0x0524(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          bCanNavAgentsChange;                               // 0x0528(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_529[0x17];                                     // 0x0529(0x0017)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void SetAddedPathCost(int32 NewCost);
	void SetCanNavAgentsChange(bool bEnable);
	void SetModifierState(EVoxelNavModifierState NewState);
	void SetModifierType(EVoxelNavModifierType NewType);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"VoxelNavModifierComponent">();
	}
	static class UVoxelNavModifierComponent* GetDefaultObj()
	{
		return GetDefaultObjImpl<UVoxelNavModifierComponent>();
	}
};
static_assert(alignof(UVoxelNavModifierComponent) == 0x000010, "Wrong alignment on UVoxelNavModifierComponent");
static_assert(sizeof(UVoxelNavModifierComponent) == 0x000540, "Wrong size on UVoxelNavModifierComponent");
static_assert(offsetof(UVoxelNavModifierComponent, ModifierType) == 0x000508, "Member 'UVoxelNavModifierComponent::ModifierType' has a wrong offset!");
static_assert(offsetof(UVoxelNavModifierComponent, ModifierState) == 0x000509, "Member 'UVoxelNavModifierComponent::ModifierState' has a wrong offset!");
static_assert(offsetof(UVoxelNavModifierComponent, TransporterAxis) == 0x00050A, "Member 'UVoxelNavModifierComponent::TransporterAxis' has a wrong offset!");
static_assert(offsetof(UVoxelNavModifierComponent, HazardType) == 0x000510, "Member 'UVoxelNavModifierComponent::HazardType' has a wrong offset!");
static_assert(offsetof(UVoxelNavModifierComponent, AddedCost) == 0x000520, "Member 'UVoxelNavModifierComponent::AddedCost' has a wrong offset!");
static_assert(offsetof(UVoxelNavModifierComponent, SoundOcclusion) == 0x000524, "Member 'UVoxelNavModifierComponent::SoundOcclusion' has a wrong offset!");
static_assert(offsetof(UVoxelNavModifierComponent, bCanNavAgentsChange) == 0x000528, "Member 'UVoxelNavModifierComponent::bCanNavAgentsChange' has a wrong offset!");

// Class LevelVoxelization.VoxelObserverComponent
// 0x0030 (0x0540 - 0x0510)
class UVoxelObserverComponent : public UCullableVoxelActorComponent
{
public:
	FMulticastInlineDelegateProperty_             OnObserverFrustumStateChanged;                     // 0x0508(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, Protected, NativeAccessSpecifierProtected)
	class USceneCaptureComponent2D*               EyeComponent;                                      // 0x0518(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          bObserverEnabled;                                  // 0x0520(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          bObserverToExterior;                               // 0x0521(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_522[0x1E];                                     // 0x0522(0x001E)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void SetObserverEnabled(bool bEnable);
	void SetObserverEyeComponent(class USceneCaptureComponent2D* SceneCaptureComponent);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"VoxelObserverComponent">();
	}
	static class UVoxelObserverComponent* GetDefaultObj()
	{
		return GetDefaultObjImpl<UVoxelObserverComponent>();
	}
};
static_assert(alignof(UVoxelObserverComponent) == 0x000010, "Wrong alignment on UVoxelObserverComponent");
static_assert(sizeof(UVoxelObserverComponent) == 0x000540, "Wrong size on UVoxelObserverComponent");
static_assert(offsetof(UVoxelObserverComponent, OnObserverFrustumStateChanged) == 0x000508, "Member 'UVoxelObserverComponent::OnObserverFrustumStateChanged' has a wrong offset!");
static_assert(offsetof(UVoxelObserverComponent, EyeComponent) == 0x000518, "Member 'UVoxelObserverComponent::EyeComponent' has a wrong offset!");
static_assert(offsetof(UVoxelObserverComponent, bObserverEnabled) == 0x000520, "Member 'UVoxelObserverComponent::bObserverEnabled' has a wrong offset!");
static_assert(offsetof(UVoxelObserverComponent, bObserverToExterior) == 0x000521, "Member 'UVoxelObserverComponent::bObserverToExterior' has a wrong offset!");

// Class LevelVoxelization.VoxelOccluderComponent
// 0x0020 (0x0530 - 0x0510)
class UVoxelOccluderComponent : public UCullableVoxelActorComponent
{
public:
	bool                                          bOccluderEnabled;                                  // 0x0508(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          bCanNavAgentsUnblock;                              // 0x0509(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          bOccludeVisibility;                                // 0x050A(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_50B[0x1];                                      // 0x050B(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         SoundOcclusion;                                    // 0x050C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         NavigationDelayDuration;                           // 0x0510(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_514[0x1C];                                     // 0x0514(0x001C)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void SetCanNavAgentsUnblock(bool bEnable);
	void SetDoorOccluderIsClosing(float CloseElapsedTime, float CloseEndTime, float SoundTransitionDuration);
	void SetDoorOccluderIsOpening(float OpenElapsedTime, float OpenDelayTime, float SoundTransitionDuration);
	void SetOccluderEnabled(bool bEnable, float SoundTransitionDuration);
	void SetShouldOccludeVisibility(bool bEnable);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"VoxelOccluderComponent">();
	}
	static class UVoxelOccluderComponent* GetDefaultObj()
	{
		return GetDefaultObjImpl<UVoxelOccluderComponent>();
	}
};
static_assert(alignof(UVoxelOccluderComponent) == 0x000010, "Wrong alignment on UVoxelOccluderComponent");
static_assert(sizeof(UVoxelOccluderComponent) == 0x000530, "Wrong size on UVoxelOccluderComponent");
static_assert(offsetof(UVoxelOccluderComponent, bOccluderEnabled) == 0x000508, "Member 'UVoxelOccluderComponent::bOccluderEnabled' has a wrong offset!");
static_assert(offsetof(UVoxelOccluderComponent, bCanNavAgentsUnblock) == 0x000509, "Member 'UVoxelOccluderComponent::bCanNavAgentsUnblock' has a wrong offset!");
static_assert(offsetof(UVoxelOccluderComponent, bOccludeVisibility) == 0x00050A, "Member 'UVoxelOccluderComponent::bOccludeVisibility' has a wrong offset!");
static_assert(offsetof(UVoxelOccluderComponent, SoundOcclusion) == 0x00050C, "Member 'UVoxelOccluderComponent::SoundOcclusion' has a wrong offset!");
static_assert(offsetof(UVoxelOccluderComponent, NavigationDelayDuration) == 0x000510, "Member 'UVoxelOccluderComponent::NavigationDelayDuration' has a wrong offset!");

// Class LevelVoxelization.VoxelPortalActor
// 0x0020 (0x0240 - 0x0220)
class AVoxelPortalActor final : public AActor
{
public:
	struct FIntPoint                              PortalDimensions;                                  // 0x0220(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	struct FIntPoint                              PortalCenterOffset;                                // 0x0228(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          bWantsPortalDepth;                                 // 0x0230(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          bExpandPortalBoundaryIfNecessary;                  // 0x0231(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          bMergeWithInteriorWindows;                         // 0x0232(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_233[0x1];                                      // 0x0233(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         VoxelSize;                                         // 0x0234(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UBoxComponent*                          PortalBoundsComponent;                             // 0x0238(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"VoxelPortalActor">();
	}
	static class AVoxelPortalActor* GetDefaultObj()
	{
		return GetDefaultObjImpl<AVoxelPortalActor>();
	}
};
static_assert(alignof(AVoxelPortalActor) == 0x000008, "Wrong alignment on AVoxelPortalActor");
static_assert(sizeof(AVoxelPortalActor) == 0x000240, "Wrong size on AVoxelPortalActor");
static_assert(offsetof(AVoxelPortalActor, PortalDimensions) == 0x000220, "Member 'AVoxelPortalActor::PortalDimensions' has a wrong offset!");
static_assert(offsetof(AVoxelPortalActor, PortalCenterOffset) == 0x000228, "Member 'AVoxelPortalActor::PortalCenterOffset' has a wrong offset!");
static_assert(offsetof(AVoxelPortalActor, bWantsPortalDepth) == 0x000230, "Member 'AVoxelPortalActor::bWantsPortalDepth' has a wrong offset!");
static_assert(offsetof(AVoxelPortalActor, bExpandPortalBoundaryIfNecessary) == 0x000231, "Member 'AVoxelPortalActor::bExpandPortalBoundaryIfNecessary' has a wrong offset!");
static_assert(offsetof(AVoxelPortalActor, bMergeWithInteriorWindows) == 0x000232, "Member 'AVoxelPortalActor::bMergeWithInteriorWindows' has a wrong offset!");
static_assert(offsetof(AVoxelPortalActor, VoxelSize) == 0x000234, "Member 'AVoxelPortalActor::VoxelSize' has a wrong offset!");
static_assert(offsetof(AVoxelPortalActor, PortalBoundsComponent) == 0x000238, "Member 'AVoxelPortalActor::PortalBoundsComponent' has a wrong offset!");

// Class LevelVoxelization.VoxelPropagationManager
// 0x0110 (0x0138 - 0x0028)
class UVoxelPropagationManager final : public UObject
{
public:
	uint8                                         Pad_28[0x110];                                     // 0x0028(0x0110)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	TArray<class AActor*> GetUnobstructedCullableDynamicActorsInSphere(const struct FVector& SphereLocation, float SphereRadius, const TArray<TSubclassOf<class AActor>>& FilterByClasses) const;
	TArray<class UStaticMeshComponent*> GetUnobstructedCullableStaticMeshComponentsInSphere(const struct FVector& SphereLocation, float SphereRadius, TSubclassOf<class AActor> IgnoreActorClass) const;
	bool HasAnyPropagationPathToPrimitiveInSphere(const struct FVector& SphereLocation, float SphereRadius, class UPrimitiveComponent* PrimitiveComponent) const;
	bool HasUnobstructedPropagationPathBetweenPoints(const struct FVector& SourceLocation, const struct FVector& TargetLocation, bool bTraceVoxels) const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"VoxelPropagationManager">();
	}
	static class UVoxelPropagationManager* GetDefaultObj()
	{
		return GetDefaultObjImpl<UVoxelPropagationManager>();
	}
};
static_assert(alignof(UVoxelPropagationManager) == 0x000008, "Wrong alignment on UVoxelPropagationManager");
static_assert(sizeof(UVoxelPropagationManager) == 0x000138, "Wrong size on UVoxelPropagationManager");

// Class LevelVoxelization.VoxelPropagatorComponent
// 0x00D0 (0x0610 - 0x0540)
class UVoxelPropagatorComponent : public UVoxelNavModifierComponent
{
public:
	FMulticastInlineDelegateProperty_             OnOverlapPropagationDensityChanged;                // 0x0540(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	uint8                                         MaxPropagationDensity;                             // 0x0550(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, SaveGame, IsPlainOldData, NoDestructor, Protected, ExposeOnSpawn, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_551[0x3];                                      // 0x0551(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         PropagationTime;                                   // 0x0554(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         DissipationTime;                                   // 0x0558(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         PropagationTickInterval;                           // 0x055C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         InitialElapsedTime;                                // 0x0560(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_564[0xAC];                                     // 0x0564(0x00AC)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	float GetElapsedPlayTime();
	struct FVector GetRelativePropagationOriginOffset();
	void SetMaxPropagationDensity(uint8 MaxDensity);
	void SetPropagationTickInterval(float TickInterval);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"VoxelPropagatorComponent">();
	}
	static class UVoxelPropagatorComponent* GetDefaultObj()
	{
		return GetDefaultObjImpl<UVoxelPropagatorComponent>();
	}
};
static_assert(alignof(UVoxelPropagatorComponent) == 0x000010, "Wrong alignment on UVoxelPropagatorComponent");
static_assert(sizeof(UVoxelPropagatorComponent) == 0x000610, "Wrong size on UVoxelPropagatorComponent");
static_assert(offsetof(UVoxelPropagatorComponent, OnOverlapPropagationDensityChanged) == 0x000540, "Member 'UVoxelPropagatorComponent::OnOverlapPropagationDensityChanged' has a wrong offset!");
static_assert(offsetof(UVoxelPropagatorComponent, MaxPropagationDensity) == 0x000550, "Member 'UVoxelPropagatorComponent::MaxPropagationDensity' has a wrong offset!");
static_assert(offsetof(UVoxelPropagatorComponent, PropagationTime) == 0x000554, "Member 'UVoxelPropagatorComponent::PropagationTime' has a wrong offset!");
static_assert(offsetof(UVoxelPropagatorComponent, DissipationTime) == 0x000558, "Member 'UVoxelPropagatorComponent::DissipationTime' has a wrong offset!");
static_assert(offsetof(UVoxelPropagatorComponent, PropagationTickInterval) == 0x00055C, "Member 'UVoxelPropagatorComponent::PropagationTickInterval' has a wrong offset!");
static_assert(offsetof(UVoxelPropagatorComponent, InitialElapsedTime) == 0x000560, "Member 'UVoxelPropagatorComponent::InitialElapsedTime' has a wrong offset!");

// Class LevelVoxelization.VoxelScannerBillboardComponent
// 0x0070 (0x04C0 - 0x0450)
class UVoxelScannerBillboardComponent final : public UPrimitiveComponent
{
public:
	TMap<class USceneComponent*, struct FVoxelScannerSpriteElement> ElementMap;                                        // 0x0450(0x0050)(Edit, BlueprintVisible, BlueprintReadOnly, ContainsInstancedReference, Protected, NativeAccessSpecifierProtected)
	class UMaterialInterface*                     BillboardMaterial;                                 // 0x04A0(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UCurveFloat*                            OrthoScaleCurve;                                   // 0x04A8(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	struct FVector2D                              OrthoWidthRange;                                   // 0x04B0(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_4B8[0x8];                                      // 0x04B8(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	bool AddElement(class USceneComponent* SceneComponent, const struct FVector2D& BaseSize, const struct FVector& LocalOffset, bool bShouldRotate, bool bVisibility);
	bool RemoveElement(class USceneComponent* SceneComponent);
	bool SetElementShouldRotate(class USceneComponent* SceneComponent, bool bNewState);
	bool SetElementVisibility(class USceneComponent* SceneComponent, bool bNewVisibility);
	void SetOrthographicScaleParameters(class UCurveFloat* InOrthoScaleCurve, const struct FVector2D& InOrthoWidthRange);

	int32 GetElementCount() const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"VoxelScannerBillboardComponent">();
	}
	static class UVoxelScannerBillboardComponent* GetDefaultObj()
	{
		return GetDefaultObjImpl<UVoxelScannerBillboardComponent>();
	}
};
static_assert(alignof(UVoxelScannerBillboardComponent) == 0x000010, "Wrong alignment on UVoxelScannerBillboardComponent");
static_assert(sizeof(UVoxelScannerBillboardComponent) == 0x0004C0, "Wrong size on UVoxelScannerBillboardComponent");
static_assert(offsetof(UVoxelScannerBillboardComponent, ElementMap) == 0x000450, "Member 'UVoxelScannerBillboardComponent::ElementMap' has a wrong offset!");
static_assert(offsetof(UVoxelScannerBillboardComponent, BillboardMaterial) == 0x0004A0, "Member 'UVoxelScannerBillboardComponent::BillboardMaterial' has a wrong offset!");
static_assert(offsetof(UVoxelScannerBillboardComponent, OrthoScaleCurve) == 0x0004A8, "Member 'UVoxelScannerBillboardComponent::OrthoScaleCurve' has a wrong offset!");
static_assert(offsetof(UVoxelScannerBillboardComponent, OrthoWidthRange) == 0x0004B0, "Member 'UVoxelScannerBillboardComponent::OrthoWidthRange' has a wrong offset!");

// Class LevelVoxelization.VoxelScannerComponent
// 0x0460 (0x0510 - 0x00B0)
class UVoxelScannerComponent : public UActorComponent
{
public:
	FMulticastInlineDelegateProperty_             OnLevelRegionChanged;                              // 0x00B0(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, Protected, NativeAccessSpecifierProtected)
	FMulticastInlineDelegateProperty_             OnAvailableFilterTagsChanged;                      // 0x00C0(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, Protected, NativeAccessSpecifierProtected)
	int32                                         VoxelScanRange;                                    // 0x00D0(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         DynamicInnerScanRadius;                            // 0x00D4(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         DynamicOuterScanRadius;                            // 0x00D8(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         OuterRadiusRevealRate;                             // 0x00DC(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         DynamicScannerUpdateTime;                          // 0x00E0(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         RevealTime;                                        // 0x00E4(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	TSoftObjectPtr<class UMaterialInterface>      Material;                                          // 0x00E8(0x0028)(Edit, BlueprintVisible, BlueprintReadOnly, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	TSoftObjectPtr<class UMaterialInterface>      WallMaterial;                                      // 0x0110(0x0028)(Edit, BlueprintVisible, BlueprintReadOnly, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UWorld*                                 ScannerWorld;                                      // 0x0138(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class AActor*                                 PrimaryLevelActor;                                 // 0x0140(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class AActor*                                 SecondaryLevelActor;                               // 0x0148(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class USceneCaptureComponent2D*               PrimarySceneCaptureComponent;                      // 0x0150(0x0008)(ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class USceneCaptureComponent2D*               SecondarySceneCaptureComponent;                    // 0x0158(0x0008)(ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UMaterialInstanceDynamic*               PrimaryDynamicMaterial;                            // 0x0160(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UMaterialInstanceDynamic*               SecondaryDynamicMaterial;                          // 0x0168(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UVoxelScannerMeshComponent*             PrimaryProceduralLevelMeshComponent;               // 0x0170(0x0008)(ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UVoxelScannerMeshComponent*             PrimaryProceduralWallEdgeMeshComponent;            // 0x0178(0x0008)(ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UVoxelScannerMeshComponent*             SecondaryProceduralLevelMeshComponent;             // 0x0180(0x0008)(ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UVoxelScannerMeshComponent*             SecondaryProceduralWallEdgeMeshComponent;          // 0x0188(0x0008)(ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UVoxelLevelManager*                     LevelManager;                                      // 0x0190(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	struct FDataTableRowHandle                    CurrentRegionRowHandle;                            // 0x0198(0x0010)(BlueprintVisible, BlueprintReadOnly, NoDestructor, Protected, NativeAccessSpecifierProtected)
	bool                                          bScannerActive;                                    // 0x01A8(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, SaveGame, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_1A9[0x3];                                      // 0x01A9(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         FloorIntensity;                                    // 0x01AC(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         WallIntensity;                                     // 0x01B0(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_1B4[0x4];                                      // 0x01B4(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UCurveFloat*                            BillboardIconScaleCurve;                           // 0x01B8(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         BillboardOrthoWidthMin;                            // 0x01C0(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         BillboardOrthoWidthMax;                            // 0x01C4(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         SceneCaptureOrthoOffset;                           // 0x01C8(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_1CC[0x4];                                      // 0x01CC(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UTextureRenderTarget2D*                 PrimaryRenderTarget;                               // 0x01D0(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UTextureRenderTarget2D*                 SecondaryRenderTarget;                             // 0x01D8(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	struct FVector2D                              WaypointIconSize;                                  // 0x01E0(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UMaterialInterface*                     WaypointIconMaterial;                              // 0x01E8(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         WaypointTextSize;                                  // 0x01F0(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	struct FColor                                 WaypointTextColor;                                 // 0x01F4(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UFont*                                  WaypointMessageFont;                               // 0x01F8(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UMaterialInterface*                     WaypointTextMaterial;                              // 0x0200(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class FName                                   WaypointFilterTag;                                 // 0x0208(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class FName                                   HazardFilterTag;                                   // 0x0210(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	TSet<class FName>                             AvailableScannableFilterTags;                      // 0x0218(0x0050)(BlueprintVisible, BlueprintReadOnly, Protected, NativeAccessSpecifierProtected)
	TSet<class FName>                             HideScannablesWithFilterTags;                      // 0x0268(0x0050)(BlueprintVisible, BlueprintReadOnly, SaveGame, Protected, NativeAccessSpecifierProtected)
	class FName                                   ShowHazardsParamName;                              // 0x02B8(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class FName                                   WallRadiusParamName;                               // 0x02C0(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class FName                                   HighlightRegionParamName;                          // 0x02C8(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	TMap<class UMaterialInterface*, class UMaterialInstanceDynamic*> DynamicWallMaterialMap;                            // 0x02D0(0x0050)(Protected, NativeAccessSpecifierProtected)
	uint8                                         Pad_320[0x1F0];                                    // 0x0320(0x01F0)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void AddAvailableScannableFilterTags(const TSet<class FName>& Tags);
	int32 AddWaypointAtLocation(const struct FVector& WorldLocation, const class FString& Message);
	struct FDataTableRowHandle GetRegionAtWorldLocation(EVoxelLevelInstanceType InstanceType, const struct FVector& WorldLocation, int32 VoxelSearchRadius);
	class UFont* GetWaypointFontForCultureName(const class FString& CultureName);
	void HighlightRegion(const struct FDataTableRowHandle& RegionHandle);
	bool LoadScanDataForLevelIntoInstance(EVoxelLevelInstanceType LevelInstanceType, class FName LevelName, const struct FVector& LevelOffset);
	bool OnDynamicScannerUpdate();
	bool OnLevelRegionDiscovered(const struct FDataTableRowHandle& RegionRowHandle);
	bool OnVoxelColumnsRevealed(int32 VoxelColumnCount);
	void RemoveAvailableScannableFilterTags(const TSet<class FName>& Tags);
	bool RemoveWaypointByIndex(int32 WaypointIndex);
	void RevealCurrentLevel();
	void SetAvailableFilterTags(const TSet<class FName>& Tags);
	void SetDynamicScannerParams(float InnerRadius, float OuterRadius, float OuterRevealTime, float UpdateTime, bool bRevealThroughWalls);
	void SetPrimarySceneCaptureRotationFollowsOwner(bool bEnable);
	void SetRevealDuration(float RevealDuration);
	void SetScannerActive(bool bEnable);
	void SetShouldDoPerspectiveUpdate(bool bEnable);
	void SetShouldShowScannableElementsByTag(class FName Tag, bool bEnable);
	void SetWallRadius(float Radius);
	bool SetWaypointLocationByIndex(int32 WaypointIndex, const struct FVector& WorldLocation);
	bool SetWaypointMessageByIndex(int32 WaypointIndex, const class FString& Message);
	bool SetWaypointMessageFont(class UFont* Font);
	void UnhighlightPreviousRegion();

	bool DoLevelInstancesShareScanData() const;
	int32 GetActiveWaypointCount() const;
	class AActor* GetLevelActorForLevelInstance(EVoxelLevelInstanceType InstanceType) const;
	bool GetPrimarySceneCaptureRotationFollowsOwner() const;
	class UVoxelScannerMeshComponent* GetProceduralLevelMeshComponent(EVoxelLevelInstanceType LevelInstanceType) const;
	class UVoxelScannerMeshComponent* GetProceduralWallEdgeMeshComponent(EVoxelLevelInstanceType LevelInstanceType) const;
	class USceneCaptureComponent2D* GetSceneCaptureComponent(EVoxelLevelInstanceType LevelInstanceType) const;
	bool GetShouldDoPerspectiveUpdate() const;
	int32 GetWaypointIndexAtLocation(const struct FVector& WorldLocation, float SearchRadius) const;
	bool GetWaypointMessageByIndex(int32 WaypointIndex, class FString* OutMessage) const;
	bool HasScanDataForLevel(class FName LevelName) const;
	bool HasScannedVoxelColumnLocation(EVoxelLevelInstanceType LevelInstanceType, const struct FIntPoint& ColumnLocation) const;
	bool IsScannableFilterTagAvailable(class FName Tag) const;
	bool ShouldScannableElementBeVisible(class FName ScannableFilterTag) const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"VoxelScannerComponent">();
	}
	static class UVoxelScannerComponent* GetDefaultObj()
	{
		return GetDefaultObjImpl<UVoxelScannerComponent>();
	}
};
static_assert(alignof(UVoxelScannerComponent) == 0x000008, "Wrong alignment on UVoxelScannerComponent");
static_assert(sizeof(UVoxelScannerComponent) == 0x000510, "Wrong size on UVoxelScannerComponent");
static_assert(offsetof(UVoxelScannerComponent, OnLevelRegionChanged) == 0x0000B0, "Member 'UVoxelScannerComponent::OnLevelRegionChanged' has a wrong offset!");
static_assert(offsetof(UVoxelScannerComponent, OnAvailableFilterTagsChanged) == 0x0000C0, "Member 'UVoxelScannerComponent::OnAvailableFilterTagsChanged' has a wrong offset!");
static_assert(offsetof(UVoxelScannerComponent, VoxelScanRange) == 0x0000D0, "Member 'UVoxelScannerComponent::VoxelScanRange' has a wrong offset!");
static_assert(offsetof(UVoxelScannerComponent, DynamicInnerScanRadius) == 0x0000D4, "Member 'UVoxelScannerComponent::DynamicInnerScanRadius' has a wrong offset!");
static_assert(offsetof(UVoxelScannerComponent, DynamicOuterScanRadius) == 0x0000D8, "Member 'UVoxelScannerComponent::DynamicOuterScanRadius' has a wrong offset!");
static_assert(offsetof(UVoxelScannerComponent, OuterRadiusRevealRate) == 0x0000DC, "Member 'UVoxelScannerComponent::OuterRadiusRevealRate' has a wrong offset!");
static_assert(offsetof(UVoxelScannerComponent, DynamicScannerUpdateTime) == 0x0000E0, "Member 'UVoxelScannerComponent::DynamicScannerUpdateTime' has a wrong offset!");
static_assert(offsetof(UVoxelScannerComponent, RevealTime) == 0x0000E4, "Member 'UVoxelScannerComponent::RevealTime' has a wrong offset!");
static_assert(offsetof(UVoxelScannerComponent, Material) == 0x0000E8, "Member 'UVoxelScannerComponent::Material' has a wrong offset!");
static_assert(offsetof(UVoxelScannerComponent, WallMaterial) == 0x000110, "Member 'UVoxelScannerComponent::WallMaterial' has a wrong offset!");
static_assert(offsetof(UVoxelScannerComponent, ScannerWorld) == 0x000138, "Member 'UVoxelScannerComponent::ScannerWorld' has a wrong offset!");
static_assert(offsetof(UVoxelScannerComponent, PrimaryLevelActor) == 0x000140, "Member 'UVoxelScannerComponent::PrimaryLevelActor' has a wrong offset!");
static_assert(offsetof(UVoxelScannerComponent, SecondaryLevelActor) == 0x000148, "Member 'UVoxelScannerComponent::SecondaryLevelActor' has a wrong offset!");
static_assert(offsetof(UVoxelScannerComponent, PrimarySceneCaptureComponent) == 0x000150, "Member 'UVoxelScannerComponent::PrimarySceneCaptureComponent' has a wrong offset!");
static_assert(offsetof(UVoxelScannerComponent, SecondarySceneCaptureComponent) == 0x000158, "Member 'UVoxelScannerComponent::SecondarySceneCaptureComponent' has a wrong offset!");
static_assert(offsetof(UVoxelScannerComponent, PrimaryDynamicMaterial) == 0x000160, "Member 'UVoxelScannerComponent::PrimaryDynamicMaterial' has a wrong offset!");
static_assert(offsetof(UVoxelScannerComponent, SecondaryDynamicMaterial) == 0x000168, "Member 'UVoxelScannerComponent::SecondaryDynamicMaterial' has a wrong offset!");
static_assert(offsetof(UVoxelScannerComponent, PrimaryProceduralLevelMeshComponent) == 0x000170, "Member 'UVoxelScannerComponent::PrimaryProceduralLevelMeshComponent' has a wrong offset!");
static_assert(offsetof(UVoxelScannerComponent, PrimaryProceduralWallEdgeMeshComponent) == 0x000178, "Member 'UVoxelScannerComponent::PrimaryProceduralWallEdgeMeshComponent' has a wrong offset!");
static_assert(offsetof(UVoxelScannerComponent, SecondaryProceduralLevelMeshComponent) == 0x000180, "Member 'UVoxelScannerComponent::SecondaryProceduralLevelMeshComponent' has a wrong offset!");
static_assert(offsetof(UVoxelScannerComponent, SecondaryProceduralWallEdgeMeshComponent) == 0x000188, "Member 'UVoxelScannerComponent::SecondaryProceduralWallEdgeMeshComponent' has a wrong offset!");
static_assert(offsetof(UVoxelScannerComponent, LevelManager) == 0x000190, "Member 'UVoxelScannerComponent::LevelManager' has a wrong offset!");
static_assert(offsetof(UVoxelScannerComponent, CurrentRegionRowHandle) == 0x000198, "Member 'UVoxelScannerComponent::CurrentRegionRowHandle' has a wrong offset!");
static_assert(offsetof(UVoxelScannerComponent, bScannerActive) == 0x0001A8, "Member 'UVoxelScannerComponent::bScannerActive' has a wrong offset!");
static_assert(offsetof(UVoxelScannerComponent, FloorIntensity) == 0x0001AC, "Member 'UVoxelScannerComponent::FloorIntensity' has a wrong offset!");
static_assert(offsetof(UVoxelScannerComponent, WallIntensity) == 0x0001B0, "Member 'UVoxelScannerComponent::WallIntensity' has a wrong offset!");
static_assert(offsetof(UVoxelScannerComponent, BillboardIconScaleCurve) == 0x0001B8, "Member 'UVoxelScannerComponent::BillboardIconScaleCurve' has a wrong offset!");
static_assert(offsetof(UVoxelScannerComponent, BillboardOrthoWidthMin) == 0x0001C0, "Member 'UVoxelScannerComponent::BillboardOrthoWidthMin' has a wrong offset!");
static_assert(offsetof(UVoxelScannerComponent, BillboardOrthoWidthMax) == 0x0001C4, "Member 'UVoxelScannerComponent::BillboardOrthoWidthMax' has a wrong offset!");
static_assert(offsetof(UVoxelScannerComponent, SceneCaptureOrthoOffset) == 0x0001C8, "Member 'UVoxelScannerComponent::SceneCaptureOrthoOffset' has a wrong offset!");
static_assert(offsetof(UVoxelScannerComponent, PrimaryRenderTarget) == 0x0001D0, "Member 'UVoxelScannerComponent::PrimaryRenderTarget' has a wrong offset!");
static_assert(offsetof(UVoxelScannerComponent, SecondaryRenderTarget) == 0x0001D8, "Member 'UVoxelScannerComponent::SecondaryRenderTarget' has a wrong offset!");
static_assert(offsetof(UVoxelScannerComponent, WaypointIconSize) == 0x0001E0, "Member 'UVoxelScannerComponent::WaypointIconSize' has a wrong offset!");
static_assert(offsetof(UVoxelScannerComponent, WaypointIconMaterial) == 0x0001E8, "Member 'UVoxelScannerComponent::WaypointIconMaterial' has a wrong offset!");
static_assert(offsetof(UVoxelScannerComponent, WaypointTextSize) == 0x0001F0, "Member 'UVoxelScannerComponent::WaypointTextSize' has a wrong offset!");
static_assert(offsetof(UVoxelScannerComponent, WaypointTextColor) == 0x0001F4, "Member 'UVoxelScannerComponent::WaypointTextColor' has a wrong offset!");
static_assert(offsetof(UVoxelScannerComponent, WaypointMessageFont) == 0x0001F8, "Member 'UVoxelScannerComponent::WaypointMessageFont' has a wrong offset!");
static_assert(offsetof(UVoxelScannerComponent, WaypointTextMaterial) == 0x000200, "Member 'UVoxelScannerComponent::WaypointTextMaterial' has a wrong offset!");
static_assert(offsetof(UVoxelScannerComponent, WaypointFilterTag) == 0x000208, "Member 'UVoxelScannerComponent::WaypointFilterTag' has a wrong offset!");
static_assert(offsetof(UVoxelScannerComponent, HazardFilterTag) == 0x000210, "Member 'UVoxelScannerComponent::HazardFilterTag' has a wrong offset!");
static_assert(offsetof(UVoxelScannerComponent, AvailableScannableFilterTags) == 0x000218, "Member 'UVoxelScannerComponent::AvailableScannableFilterTags' has a wrong offset!");
static_assert(offsetof(UVoxelScannerComponent, HideScannablesWithFilterTags) == 0x000268, "Member 'UVoxelScannerComponent::HideScannablesWithFilterTags' has a wrong offset!");
static_assert(offsetof(UVoxelScannerComponent, ShowHazardsParamName) == 0x0002B8, "Member 'UVoxelScannerComponent::ShowHazardsParamName' has a wrong offset!");
static_assert(offsetof(UVoxelScannerComponent, WallRadiusParamName) == 0x0002C0, "Member 'UVoxelScannerComponent::WallRadiusParamName' has a wrong offset!");
static_assert(offsetof(UVoxelScannerComponent, HighlightRegionParamName) == 0x0002C8, "Member 'UVoxelScannerComponent::HighlightRegionParamName' has a wrong offset!");
static_assert(offsetof(UVoxelScannerComponent, DynamicWallMaterialMap) == 0x0002D0, "Member 'UVoxelScannerComponent::DynamicWallMaterialMap' has a wrong offset!");

// Class LevelVoxelization.VoxelScannerMeshComponent
// 0x0030 (0x04B0 - 0x0480)
class UVoxelScannerMeshComponent final : public UMeshComponent
{
public:
	uint8                                         Pad_478[0x38];                                     // 0x0478(0x0038)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"VoxelScannerMeshComponent">();
	}
	static class UVoxelScannerMeshComponent* GetDefaultObj()
	{
		return GetDefaultObjImpl<UVoxelScannerMeshComponent>();
	}
};
static_assert(alignof(UVoxelScannerMeshComponent) == 0x000010, "Wrong alignment on UVoxelScannerMeshComponent");
static_assert(sizeof(UVoxelScannerMeshComponent) == 0x0004B0, "Wrong size on UVoxelScannerMeshComponent");

}

