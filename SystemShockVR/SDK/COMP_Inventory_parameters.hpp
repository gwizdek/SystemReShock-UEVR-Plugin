#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: COMP_Inventory

#include "Basic.hpp"

#include "ENUM_ItemType_structs.hpp"
#include "StreamingSaveGameSystem_structs.hpp"
#include "STRUCT_SoftItemParams_structs.hpp"
#include "STRUCT_HardItemParams_structs.hpp"
#include "ENUM_UpgradeResult_structs.hpp"
#include "STRUCT_InventoryBagParams_structs.hpp"


namespace SDK::Params
{

// Function COMP_Inventory.COMP_Inventory_C.OnBagChanged__DelegateSignature
// 0x0010 (0x0010 - 0x0000)
struct COMP_Inventory_C_OnBagChanged__DelegateSignature final
{
public:
	class UInventoryBag_C*                        Bag;                                               // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         SlotIndex;                                         // 0x0008(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(COMP_Inventory_C_OnBagChanged__DelegateSignature) == 0x000008, "Wrong alignment on COMP_Inventory_C_OnBagChanged__DelegateSignature");
static_assert(sizeof(COMP_Inventory_C_OnBagChanged__DelegateSignature) == 0x000010, "Wrong size on COMP_Inventory_C_OnBagChanged__DelegateSignature");
static_assert(offsetof(COMP_Inventory_C_OnBagChanged__DelegateSignature, Bag) == 0x000000, "Member 'COMP_Inventory_C_OnBagChanged__DelegateSignature::Bag' has a wrong offset!");
static_assert(offsetof(COMP_Inventory_C_OnBagChanged__DelegateSignature, SlotIndex) == 0x000008, "Member 'COMP_Inventory_C_OnBagChanged__DelegateSignature::SlotIndex' has a wrong offset!");

// Function COMP_Inventory.COMP_Inventory_C.OnItemUpgraded__DelegateSignature
// 0x0018 (0x0018 - 0x0000)
struct COMP_Inventory_C_OnItemUpgraded__DelegateSignature final
{
public:
	class UClass*                                 UpgradeClass;                                      // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UClass*                                 DowngradeClass;                                    // 0x0008(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ENUM_UpgradeResult                            Result;                                            // 0x0010(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(COMP_Inventory_C_OnItemUpgraded__DelegateSignature) == 0x000008, "Wrong alignment on COMP_Inventory_C_OnItemUpgraded__DelegateSignature");
static_assert(sizeof(COMP_Inventory_C_OnItemUpgraded__DelegateSignature) == 0x000018, "Wrong size on COMP_Inventory_C_OnItemUpgraded__DelegateSignature");
static_assert(offsetof(COMP_Inventory_C_OnItemUpgraded__DelegateSignature, UpgradeClass) == 0x000000, "Member 'COMP_Inventory_C_OnItemUpgraded__DelegateSignature::UpgradeClass' has a wrong offset!");
static_assert(offsetof(COMP_Inventory_C_OnItemUpgraded__DelegateSignature, DowngradeClass) == 0x000008, "Member 'COMP_Inventory_C_OnItemUpgraded__DelegateSignature::DowngradeClass' has a wrong offset!");
static_assert(offsetof(COMP_Inventory_C_OnItemUpgraded__DelegateSignature, Result) == 0x000010, "Member 'COMP_Inventory_C_OnItemUpgraded__DelegateSignature::Result' has a wrong offset!");

// Function COMP_Inventory.COMP_Inventory_C.InitializeInventory
// 0x0120 (0x0120 - 0x0000)
struct COMP_Inventory_C_InitializeInventory final
{
public:
	bool                                          GrantDefaultInventory;                             // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FSTRUCT_HardItemParams                 CurrentItemParams;                                 // 0x0008(0x0010)(Edit, BlueprintVisible, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Array_Index_Variable;                     // 0x0018(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Loop_Counter_Variable;                    // 0x001C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue;                   // 0x0020(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Array_Index_Variable_1;                   // 0x0024(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_GrantItem_Result;                         // 0x0028(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Not_PreBool_ReturnValue;                  // 0x0029(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_2A[0x6];                                       // 0x002A(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class AActor*                                 CallFunc_GetOwner_ReturnValue;                     // 0x0030(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FString                                 CallFunc_GetDisplayName_ReturnValue;               // 0x0038(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	int32                                         Temp_int_Loop_Counter_Variable_1;                  // 0x0048(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_4C[0x4];                                       // 0x004C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 CallFunc_GetClassDisplayName_ReturnValue;          // 0x0050(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	class FString                                 CallFunc_Concat_StrStr_ReturnValue;                // 0x0060(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue_1;                 // 0x0070(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_74[0x4];                                       // 0x0074(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 CallFunc_Concat_StrStr_ReturnValue_1;              // 0x0078(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	class FString                                 CallFunc_Concat_StrStr_ReturnValue_2;              // 0x0088(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	struct FSTRUCT_SoftItemParams                 CallFunc_Array_Get_Item;                           // 0x0098(0x0030)(HasGetValueTypeHash)
	struct FSTRUCT_HardItemParams                 CallFunc_CreateHardItemParams_Result;              // 0x00C8(0x0010)(IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Length_ReturnValue;                 // 0x00D8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue;                  // 0x00DC(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_DD[0x3];                                       // 0x00DD(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FSTRUCT_InventoryBagParams             CallFunc_Array_Get_Item_1;                         // 0x00E0(0x0030)(HasGetValueTypeHash)
	class UInventoryBag_C*                        CallFunc_AddBag_Bag;                               // 0x0110(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Length_ReturnValue_1;               // 0x0118(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue_1;                // 0x011C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(COMP_Inventory_C_InitializeInventory) == 0x000008, "Wrong alignment on COMP_Inventory_C_InitializeInventory");
static_assert(sizeof(COMP_Inventory_C_InitializeInventory) == 0x000120, "Wrong size on COMP_Inventory_C_InitializeInventory");
static_assert(offsetof(COMP_Inventory_C_InitializeInventory, GrantDefaultInventory) == 0x000000, "Member 'COMP_Inventory_C_InitializeInventory::GrantDefaultInventory' has a wrong offset!");
static_assert(offsetof(COMP_Inventory_C_InitializeInventory, CurrentItemParams) == 0x000008, "Member 'COMP_Inventory_C_InitializeInventory::CurrentItemParams' has a wrong offset!");
static_assert(offsetof(COMP_Inventory_C_InitializeInventory, Temp_int_Array_Index_Variable) == 0x000018, "Member 'COMP_Inventory_C_InitializeInventory::Temp_int_Array_Index_Variable' has a wrong offset!");
static_assert(offsetof(COMP_Inventory_C_InitializeInventory, Temp_int_Loop_Counter_Variable) == 0x00001C, "Member 'COMP_Inventory_C_InitializeInventory::Temp_int_Loop_Counter_Variable' has a wrong offset!");
static_assert(offsetof(COMP_Inventory_C_InitializeInventory, CallFunc_Add_IntInt_ReturnValue) == 0x000020, "Member 'COMP_Inventory_C_InitializeInventory::CallFunc_Add_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(COMP_Inventory_C_InitializeInventory, Temp_int_Array_Index_Variable_1) == 0x000024, "Member 'COMP_Inventory_C_InitializeInventory::Temp_int_Array_Index_Variable_1' has a wrong offset!");
static_assert(offsetof(COMP_Inventory_C_InitializeInventory, CallFunc_GrantItem_Result) == 0x000028, "Member 'COMP_Inventory_C_InitializeInventory::CallFunc_GrantItem_Result' has a wrong offset!");
static_assert(offsetof(COMP_Inventory_C_InitializeInventory, CallFunc_Not_PreBool_ReturnValue) == 0x000029, "Member 'COMP_Inventory_C_InitializeInventory::CallFunc_Not_PreBool_ReturnValue' has a wrong offset!");
static_assert(offsetof(COMP_Inventory_C_InitializeInventory, CallFunc_GetOwner_ReturnValue) == 0x000030, "Member 'COMP_Inventory_C_InitializeInventory::CallFunc_GetOwner_ReturnValue' has a wrong offset!");
static_assert(offsetof(COMP_Inventory_C_InitializeInventory, CallFunc_GetDisplayName_ReturnValue) == 0x000038, "Member 'COMP_Inventory_C_InitializeInventory::CallFunc_GetDisplayName_ReturnValue' has a wrong offset!");
static_assert(offsetof(COMP_Inventory_C_InitializeInventory, Temp_int_Loop_Counter_Variable_1) == 0x000048, "Member 'COMP_Inventory_C_InitializeInventory::Temp_int_Loop_Counter_Variable_1' has a wrong offset!");
static_assert(offsetof(COMP_Inventory_C_InitializeInventory, CallFunc_GetClassDisplayName_ReturnValue) == 0x000050, "Member 'COMP_Inventory_C_InitializeInventory::CallFunc_GetClassDisplayName_ReturnValue' has a wrong offset!");
static_assert(offsetof(COMP_Inventory_C_InitializeInventory, CallFunc_Concat_StrStr_ReturnValue) == 0x000060, "Member 'COMP_Inventory_C_InitializeInventory::CallFunc_Concat_StrStr_ReturnValue' has a wrong offset!");
static_assert(offsetof(COMP_Inventory_C_InitializeInventory, CallFunc_Add_IntInt_ReturnValue_1) == 0x000070, "Member 'COMP_Inventory_C_InitializeInventory::CallFunc_Add_IntInt_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(COMP_Inventory_C_InitializeInventory, CallFunc_Concat_StrStr_ReturnValue_1) == 0x000078, "Member 'COMP_Inventory_C_InitializeInventory::CallFunc_Concat_StrStr_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(COMP_Inventory_C_InitializeInventory, CallFunc_Concat_StrStr_ReturnValue_2) == 0x000088, "Member 'COMP_Inventory_C_InitializeInventory::CallFunc_Concat_StrStr_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(COMP_Inventory_C_InitializeInventory, CallFunc_Array_Get_Item) == 0x000098, "Member 'COMP_Inventory_C_InitializeInventory::CallFunc_Array_Get_Item' has a wrong offset!");
static_assert(offsetof(COMP_Inventory_C_InitializeInventory, CallFunc_CreateHardItemParams_Result) == 0x0000C8, "Member 'COMP_Inventory_C_InitializeInventory::CallFunc_CreateHardItemParams_Result' has a wrong offset!");
static_assert(offsetof(COMP_Inventory_C_InitializeInventory, CallFunc_Array_Length_ReturnValue) == 0x0000D8, "Member 'COMP_Inventory_C_InitializeInventory::CallFunc_Array_Length_ReturnValue' has a wrong offset!");
static_assert(offsetof(COMP_Inventory_C_InitializeInventory, CallFunc_Less_IntInt_ReturnValue) == 0x0000DC, "Member 'COMP_Inventory_C_InitializeInventory::CallFunc_Less_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(COMP_Inventory_C_InitializeInventory, CallFunc_Array_Get_Item_1) == 0x0000E0, "Member 'COMP_Inventory_C_InitializeInventory::CallFunc_Array_Get_Item_1' has a wrong offset!");
static_assert(offsetof(COMP_Inventory_C_InitializeInventory, CallFunc_AddBag_Bag) == 0x000110, "Member 'COMP_Inventory_C_InitializeInventory::CallFunc_AddBag_Bag' has a wrong offset!");
static_assert(offsetof(COMP_Inventory_C_InitializeInventory, CallFunc_Array_Length_ReturnValue_1) == 0x000118, "Member 'COMP_Inventory_C_InitializeInventory::CallFunc_Array_Length_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(COMP_Inventory_C_InitializeInventory, CallFunc_Less_IntInt_ReturnValue_1) == 0x00011C, "Member 'COMP_Inventory_C_InitializeInventory::CallFunc_Less_IntInt_ReturnValue_1' has a wrong offset!");

// Function COMP_Inventory.COMP_Inventory_C.AddBag
// 0x0048 (0x0048 - 0x0000)
struct COMP_Inventory_C_AddBag final
{
public:
	struct FSTRUCT_InventoryBagParams             BagParams;                                         // 0x0000(0x0030)(BlueprintVisible, BlueprintReadOnly, Parm, HasGetValueTypeHash)
	class UInventoryBag_C*                        Bag;                                               // 0x0030(0x0008)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UInventoryBag_C*                        CallFunc_SpawnObject_ReturnValue;                  // 0x0038(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Add_ReturnValue;                    // 0x0040(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(COMP_Inventory_C_AddBag) == 0x000008, "Wrong alignment on COMP_Inventory_C_AddBag");
static_assert(sizeof(COMP_Inventory_C_AddBag) == 0x000048, "Wrong size on COMP_Inventory_C_AddBag");
static_assert(offsetof(COMP_Inventory_C_AddBag, BagParams) == 0x000000, "Member 'COMP_Inventory_C_AddBag::BagParams' has a wrong offset!");
static_assert(offsetof(COMP_Inventory_C_AddBag, Bag) == 0x000030, "Member 'COMP_Inventory_C_AddBag::Bag' has a wrong offset!");
static_assert(offsetof(COMP_Inventory_C_AddBag, CallFunc_SpawnObject_ReturnValue) == 0x000038, "Member 'COMP_Inventory_C_AddBag::CallFunc_SpawnObject_ReturnValue' has a wrong offset!");
static_assert(offsetof(COMP_Inventory_C_AddBag, CallFunc_Array_Add_ReturnValue) == 0x000040, "Member 'COMP_Inventory_C_AddBag::CallFunc_Array_Add_ReturnValue' has a wrong offset!");

// Function COMP_Inventory.COMP_Inventory_C.InitializeBags
// 0x0020 (0x0020 - 0x0000)
struct COMP_Inventory_C_InitializeBags final
{
public:
	int32                                         Temp_int_Array_Index_Variable;                     // 0x0000(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Loop_Counter_Variable;                    // 0x0004(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue;                   // 0x0008(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Length_ReturnValue;                 // 0x000C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UInventoryBag_C*                        CallFunc_Array_Get_Item;                           // 0x0010(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue;                  // 0x0018(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(COMP_Inventory_C_InitializeBags) == 0x000008, "Wrong alignment on COMP_Inventory_C_InitializeBags");
static_assert(sizeof(COMP_Inventory_C_InitializeBags) == 0x000020, "Wrong size on COMP_Inventory_C_InitializeBags");
static_assert(offsetof(COMP_Inventory_C_InitializeBags, Temp_int_Array_Index_Variable) == 0x000000, "Member 'COMP_Inventory_C_InitializeBags::Temp_int_Array_Index_Variable' has a wrong offset!");
static_assert(offsetof(COMP_Inventory_C_InitializeBags, Temp_int_Loop_Counter_Variable) == 0x000004, "Member 'COMP_Inventory_C_InitializeBags::Temp_int_Loop_Counter_Variable' has a wrong offset!");
static_assert(offsetof(COMP_Inventory_C_InitializeBags, CallFunc_Add_IntInt_ReturnValue) == 0x000008, "Member 'COMP_Inventory_C_InitializeBags::CallFunc_Add_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(COMP_Inventory_C_InitializeBags, CallFunc_Array_Length_ReturnValue) == 0x00000C, "Member 'COMP_Inventory_C_InitializeBags::CallFunc_Array_Length_ReturnValue' has a wrong offset!");
static_assert(offsetof(COMP_Inventory_C_InitializeBags, CallFunc_Array_Get_Item) == 0x000010, "Member 'COMP_Inventory_C_InitializeBags::CallFunc_Array_Get_Item' has a wrong offset!");
static_assert(offsetof(COMP_Inventory_C_InitializeBags, CallFunc_Less_IntInt_ReturnValue) == 0x000018, "Member 'COMP_Inventory_C_InitializeBags::CallFunc_Less_IntInt_ReturnValue' has a wrong offset!");

// Function COMP_Inventory.COMP_Inventory_C.GrantItem
// 0x0028 (0x0028 - 0x0000)
struct COMP_Inventory_C_GrantItem final
{
public:
	struct FSTRUCT_HardItemParams                 ItemParams;                                        // 0x0000(0x0010)(BlueprintVisible, BlueprintReadOnly, Parm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Result;                                            // 0x0010(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsValidClass_ReturnValue;                 // 0x0011(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_12[0x6];                                       // 0x0012(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class UClass*                                 K2Node_ClassDynamicCast_AsITEM_Package_Base;       // 0x0018(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_ClassDynamicCast_bSuccess;                  // 0x0020(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_GrantItemsFromPackages_Result;            // 0x0021(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_AddItemInternal_Result;                   // 0x0022(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(COMP_Inventory_C_GrantItem) == 0x000008, "Wrong alignment on COMP_Inventory_C_GrantItem");
static_assert(sizeof(COMP_Inventory_C_GrantItem) == 0x000028, "Wrong size on COMP_Inventory_C_GrantItem");
static_assert(offsetof(COMP_Inventory_C_GrantItem, ItemParams) == 0x000000, "Member 'COMP_Inventory_C_GrantItem::ItemParams' has a wrong offset!");
static_assert(offsetof(COMP_Inventory_C_GrantItem, Result) == 0x000010, "Member 'COMP_Inventory_C_GrantItem::Result' has a wrong offset!");
static_assert(offsetof(COMP_Inventory_C_GrantItem, CallFunc_IsValidClass_ReturnValue) == 0x000011, "Member 'COMP_Inventory_C_GrantItem::CallFunc_IsValidClass_ReturnValue' has a wrong offset!");
static_assert(offsetof(COMP_Inventory_C_GrantItem, K2Node_ClassDynamicCast_AsITEM_Package_Base) == 0x000018, "Member 'COMP_Inventory_C_GrantItem::K2Node_ClassDynamicCast_AsITEM_Package_Base' has a wrong offset!");
static_assert(offsetof(COMP_Inventory_C_GrantItem, K2Node_ClassDynamicCast_bSuccess) == 0x000020, "Member 'COMP_Inventory_C_GrantItem::K2Node_ClassDynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(COMP_Inventory_C_GrantItem, CallFunc_GrantItemsFromPackages_Result) == 0x000021, "Member 'COMP_Inventory_C_GrantItem::CallFunc_GrantItemsFromPackages_Result' has a wrong offset!");
static_assert(offsetof(COMP_Inventory_C_GrantItem, CallFunc_AddItemInternal_Result) == 0x000022, "Member 'COMP_Inventory_C_GrantItem::CallFunc_AddItemInternal_Result' has a wrong offset!");

// Function COMP_Inventory.COMP_Inventory_C.GrantItemsFromPackage
// 0x0090 (0x0090 - 0x0000)
struct COMP_Inventory_C_GrantItemsFromPackage final
{
public:
	class UClass*                                 PackageClass;                                      // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Result;                                            // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FSTRUCT_HardItemParams                 CurrentItemParams;                                 // 0x0010(0x0010)(Edit, BlueprintVisible, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TArray<struct FSTRUCT_SoftItemParams>         Temp_struct_Variable;                              // 0x0020(0x0010)(ReferenceParm)
	int32                                         Temp_int_Array_Index_Variable;                     // 0x0030(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Loop_Counter_Variable;                    // 0x0034(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue;                   // 0x0038(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_GrantItem_Result;                         // 0x003C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Not_PreBool_ReturnValue;                  // 0x003D(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_3E[0x2];                                       // 0x003E(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	struct FSTRUCT_SoftItemParams                 CallFunc_Array_Get_Item;                           // 0x0040(0x0030)(HasGetValueTypeHash)
	int32                                         CallFunc_Array_Length_ReturnValue;                 // 0x0070(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_74[0x4];                                       // 0x0074(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FSTRUCT_HardItemParams                 CallFunc_CreateHardItemParams_Result;              // 0x0078(0x0010)(IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue;                  // 0x0088(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(COMP_Inventory_C_GrantItemsFromPackage) == 0x000008, "Wrong alignment on COMP_Inventory_C_GrantItemsFromPackage");
static_assert(sizeof(COMP_Inventory_C_GrantItemsFromPackage) == 0x000090, "Wrong size on COMP_Inventory_C_GrantItemsFromPackage");
static_assert(offsetof(COMP_Inventory_C_GrantItemsFromPackage, PackageClass) == 0x000000, "Member 'COMP_Inventory_C_GrantItemsFromPackage::PackageClass' has a wrong offset!");
static_assert(offsetof(COMP_Inventory_C_GrantItemsFromPackage, Result) == 0x000008, "Member 'COMP_Inventory_C_GrantItemsFromPackage::Result' has a wrong offset!");
static_assert(offsetof(COMP_Inventory_C_GrantItemsFromPackage, CurrentItemParams) == 0x000010, "Member 'COMP_Inventory_C_GrantItemsFromPackage::CurrentItemParams' has a wrong offset!");
static_assert(offsetof(COMP_Inventory_C_GrantItemsFromPackage, Temp_struct_Variable) == 0x000020, "Member 'COMP_Inventory_C_GrantItemsFromPackage::Temp_struct_Variable' has a wrong offset!");
static_assert(offsetof(COMP_Inventory_C_GrantItemsFromPackage, Temp_int_Array_Index_Variable) == 0x000030, "Member 'COMP_Inventory_C_GrantItemsFromPackage::Temp_int_Array_Index_Variable' has a wrong offset!");
static_assert(offsetof(COMP_Inventory_C_GrantItemsFromPackage, Temp_int_Loop_Counter_Variable) == 0x000034, "Member 'COMP_Inventory_C_GrantItemsFromPackage::Temp_int_Loop_Counter_Variable' has a wrong offset!");
static_assert(offsetof(COMP_Inventory_C_GrantItemsFromPackage, CallFunc_Add_IntInt_ReturnValue) == 0x000038, "Member 'COMP_Inventory_C_GrantItemsFromPackage::CallFunc_Add_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(COMP_Inventory_C_GrantItemsFromPackage, CallFunc_GrantItem_Result) == 0x00003C, "Member 'COMP_Inventory_C_GrantItemsFromPackage::CallFunc_GrantItem_Result' has a wrong offset!");
static_assert(offsetof(COMP_Inventory_C_GrantItemsFromPackage, CallFunc_Not_PreBool_ReturnValue) == 0x00003D, "Member 'COMP_Inventory_C_GrantItemsFromPackage::CallFunc_Not_PreBool_ReturnValue' has a wrong offset!");
static_assert(offsetof(COMP_Inventory_C_GrantItemsFromPackage, CallFunc_Array_Get_Item) == 0x000040, "Member 'COMP_Inventory_C_GrantItemsFromPackage::CallFunc_Array_Get_Item' has a wrong offset!");
static_assert(offsetof(COMP_Inventory_C_GrantItemsFromPackage, CallFunc_Array_Length_ReturnValue) == 0x000070, "Member 'COMP_Inventory_C_GrantItemsFromPackage::CallFunc_Array_Length_ReturnValue' has a wrong offset!");
static_assert(offsetof(COMP_Inventory_C_GrantItemsFromPackage, CallFunc_CreateHardItemParams_Result) == 0x000078, "Member 'COMP_Inventory_C_GrantItemsFromPackage::CallFunc_CreateHardItemParams_Result' has a wrong offset!");
static_assert(offsetof(COMP_Inventory_C_GrantItemsFromPackage, CallFunc_Less_IntInt_ReturnValue) == 0x000088, "Member 'COMP_Inventory_C_GrantItemsFromPackage::CallFunc_Less_IntInt_ReturnValue' has a wrong offset!");

// Function COMP_Inventory.COMP_Inventory_C.GrantItemsFromPackages
// 0x0028 (0x0028 - 0x0000)
struct COMP_Inventory_C_GrantItemsFromPackages final
{
public:
	class UClass*                                 PackageClass;                                      // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         PackageCount;                                      // 0x0008(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Result;                                            // 0x000C(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Greater_IntInt_ReturnValue;               // 0x000D(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsValidClass_ReturnValue;                 // 0x000E(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BooleanAND_ReturnValue;                   // 0x000F(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_GrantItemsFromPackage_Result;             // 0x0010(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Not_PreBool_ReturnValue;                  // 0x0011(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_12[0x2];                                       // 0x0012(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Subtract_IntInt_ReturnValue;              // 0x0014(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Variable;                                 // 0x0018(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_LessEqual_IntInt_ReturnValue;             // 0x001C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_1D[0x3];                                       // 0x001D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Add_IntInt_ReturnValue;                   // 0x0020(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(COMP_Inventory_C_GrantItemsFromPackages) == 0x000008, "Wrong alignment on COMP_Inventory_C_GrantItemsFromPackages");
static_assert(sizeof(COMP_Inventory_C_GrantItemsFromPackages) == 0x000028, "Wrong size on COMP_Inventory_C_GrantItemsFromPackages");
static_assert(offsetof(COMP_Inventory_C_GrantItemsFromPackages, PackageClass) == 0x000000, "Member 'COMP_Inventory_C_GrantItemsFromPackages::PackageClass' has a wrong offset!");
static_assert(offsetof(COMP_Inventory_C_GrantItemsFromPackages, PackageCount) == 0x000008, "Member 'COMP_Inventory_C_GrantItemsFromPackages::PackageCount' has a wrong offset!");
static_assert(offsetof(COMP_Inventory_C_GrantItemsFromPackages, Result) == 0x00000C, "Member 'COMP_Inventory_C_GrantItemsFromPackages::Result' has a wrong offset!");
static_assert(offsetof(COMP_Inventory_C_GrantItemsFromPackages, CallFunc_Greater_IntInt_ReturnValue) == 0x00000D, "Member 'COMP_Inventory_C_GrantItemsFromPackages::CallFunc_Greater_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(COMP_Inventory_C_GrantItemsFromPackages, CallFunc_IsValidClass_ReturnValue) == 0x00000E, "Member 'COMP_Inventory_C_GrantItemsFromPackages::CallFunc_IsValidClass_ReturnValue' has a wrong offset!");
static_assert(offsetof(COMP_Inventory_C_GrantItemsFromPackages, CallFunc_BooleanAND_ReturnValue) == 0x00000F, "Member 'COMP_Inventory_C_GrantItemsFromPackages::CallFunc_BooleanAND_ReturnValue' has a wrong offset!");
static_assert(offsetof(COMP_Inventory_C_GrantItemsFromPackages, CallFunc_GrantItemsFromPackage_Result) == 0x000010, "Member 'COMP_Inventory_C_GrantItemsFromPackages::CallFunc_GrantItemsFromPackage_Result' has a wrong offset!");
static_assert(offsetof(COMP_Inventory_C_GrantItemsFromPackages, CallFunc_Not_PreBool_ReturnValue) == 0x000011, "Member 'COMP_Inventory_C_GrantItemsFromPackages::CallFunc_Not_PreBool_ReturnValue' has a wrong offset!");
static_assert(offsetof(COMP_Inventory_C_GrantItemsFromPackages, CallFunc_Subtract_IntInt_ReturnValue) == 0x000014, "Member 'COMP_Inventory_C_GrantItemsFromPackages::CallFunc_Subtract_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(COMP_Inventory_C_GrantItemsFromPackages, Temp_int_Variable) == 0x000018, "Member 'COMP_Inventory_C_GrantItemsFromPackages::Temp_int_Variable' has a wrong offset!");
static_assert(offsetof(COMP_Inventory_C_GrantItemsFromPackages, CallFunc_LessEqual_IntInt_ReturnValue) == 0x00001C, "Member 'COMP_Inventory_C_GrantItemsFromPackages::CallFunc_LessEqual_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(COMP_Inventory_C_GrantItemsFromPackages, CallFunc_Add_IntInt_ReturnValue) == 0x000020, "Member 'COMP_Inventory_C_GrantItemsFromPackages::CallFunc_Add_IntInt_ReturnValue' has a wrong offset!");

// Function COMP_Inventory.COMP_Inventory_C.AddItem
// 0x0030 (0x0030 - 0x0000)
struct COMP_Inventory_C_AddItem final
{
public:
	class UITEM_Base_C*                           Item;                                              // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Result;                                            // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0009(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_A[0x6];                                        // 0x000A(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class UITEM_PackageBase_C*                    K2Node_DynamicCast_AsITEM_Package_Base;            // 0x0010(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0018(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_OpenPackageIntoInventory_Result;          // 0x0019(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_1A[0x2];                                       // 0x001A(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_GetCount_Result;                          // 0x001C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UClass*                                 CallFunc_GetObjectClass_ReturnValue;               // 0x0020(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_AddItemInternal_Result;                   // 0x0028(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(COMP_Inventory_C_AddItem) == 0x000008, "Wrong alignment on COMP_Inventory_C_AddItem");
static_assert(sizeof(COMP_Inventory_C_AddItem) == 0x000030, "Wrong size on COMP_Inventory_C_AddItem");
static_assert(offsetof(COMP_Inventory_C_AddItem, Item) == 0x000000, "Member 'COMP_Inventory_C_AddItem::Item' has a wrong offset!");
static_assert(offsetof(COMP_Inventory_C_AddItem, Result) == 0x000008, "Member 'COMP_Inventory_C_AddItem::Result' has a wrong offset!");
static_assert(offsetof(COMP_Inventory_C_AddItem, CallFunc_IsValid_ReturnValue) == 0x000009, "Member 'COMP_Inventory_C_AddItem::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(COMP_Inventory_C_AddItem, K2Node_DynamicCast_AsITEM_Package_Base) == 0x000010, "Member 'COMP_Inventory_C_AddItem::K2Node_DynamicCast_AsITEM_Package_Base' has a wrong offset!");
static_assert(offsetof(COMP_Inventory_C_AddItem, K2Node_DynamicCast_bSuccess) == 0x000018, "Member 'COMP_Inventory_C_AddItem::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(COMP_Inventory_C_AddItem, CallFunc_OpenPackageIntoInventory_Result) == 0x000019, "Member 'COMP_Inventory_C_AddItem::CallFunc_OpenPackageIntoInventory_Result' has a wrong offset!");
static_assert(offsetof(COMP_Inventory_C_AddItem, CallFunc_GetCount_Result) == 0x00001C, "Member 'COMP_Inventory_C_AddItem::CallFunc_GetCount_Result' has a wrong offset!");
static_assert(offsetof(COMP_Inventory_C_AddItem, CallFunc_GetObjectClass_ReturnValue) == 0x000020, "Member 'COMP_Inventory_C_AddItem::CallFunc_GetObjectClass_ReturnValue' has a wrong offset!");
static_assert(offsetof(COMP_Inventory_C_AddItem, CallFunc_AddItemInternal_Result) == 0x000028, "Member 'COMP_Inventory_C_AddItem::CallFunc_AddItemInternal_Result' has a wrong offset!");

// Function COMP_Inventory.COMP_Inventory_C.AddItemInternal
// 0x0090 (0x0090 - 0x0000)
struct COMP_Inventory_C_AddItemInternal final
{
public:
	class UITEM_Base_C*                           Item;                                              // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UClass*                                 ItemClass;                                         // 0x0008(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Count;                                             // 0x0010(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Modify;                                            // 0x0014(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Result;                                            // 0x0015(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_16[0x2];                                       // 0x0016(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	class UInventoryBag_C*                        CurrentBag;                                        // 0x0018(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UClass*                                 UpgradeClass;                                      // 0x0020(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UInventoryBag_C*                        EquipBag;                                          // 0x0028(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Array_Index_Variable;                     // 0x0030(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0034(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_35[0x3];                                       // 0x0035(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Temp_int_Loop_Counter_Variable;                    // 0x0038(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue;                   // 0x003C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UITEM_UpgradeBase_C*                    K2Node_DynamicCast_AsITEM_Upgrade_Base;            // 0x0040(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0048(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	ENUM_UpgradeResult                            CallFunc_FindAndApplyUpgrade_Result;               // 0x0049(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_NotEqual_ByteByte_ReturnValue;            // 0x004A(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_4B[0x5];                                       // 0x004B(0x0005)(Fixing Size After Last Property [ Dumper-7 ])
	class UITEM_UpgradeBase_C*                    CallFunc_FindItemToUpgrade_Item;                   // 0x0050(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ENUM_UpgradeResult                            CallFunc_FindItemToUpgrade_Result;                 // 0x0058(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue_1;                    // 0x0059(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_5A[0x6];                                       // 0x005A(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class UClass*                                 K2Node_ClassDynamicCast_AsITEM_Upgrade_Base;       // 0x0060(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_ClassDynamicCast_bSuccess;                  // 0x0068(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsOverflowBag_Result;                     // 0x0069(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Not_PreBool_ReturnValue;                  // 0x006A(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_CanSlotItemClass_Result;                  // 0x006B(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_AddItemInternal_Result;                   // 0x006C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_NotEqual_ObjectObject_ReturnValue;        // 0x006D(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_6E[0x2];                                       // 0x006E(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	class UInventoryBag_C*                        CallFunc_Array_Get_Item;                           // 0x0070(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Length_ReturnValue;                 // 0x0078(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue;                  // 0x007C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_AddItemInternal_Result_1;                 // 0x007D(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_7E[0x2];                                       // 0x007E(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	class UInventoryBag_C*                        CallFunc_GetBagByRequiredType_Bag;                 // 0x0080(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BooleanOR_ReturnValue;                    // 0x0088(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Greater_IntInt_ReturnValue;               // 0x0089(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(COMP_Inventory_C_AddItemInternal) == 0x000008, "Wrong alignment on COMP_Inventory_C_AddItemInternal");
static_assert(sizeof(COMP_Inventory_C_AddItemInternal) == 0x000090, "Wrong size on COMP_Inventory_C_AddItemInternal");
static_assert(offsetof(COMP_Inventory_C_AddItemInternal, Item) == 0x000000, "Member 'COMP_Inventory_C_AddItemInternal::Item' has a wrong offset!");
static_assert(offsetof(COMP_Inventory_C_AddItemInternal, ItemClass) == 0x000008, "Member 'COMP_Inventory_C_AddItemInternal::ItemClass' has a wrong offset!");
static_assert(offsetof(COMP_Inventory_C_AddItemInternal, Count) == 0x000010, "Member 'COMP_Inventory_C_AddItemInternal::Count' has a wrong offset!");
static_assert(offsetof(COMP_Inventory_C_AddItemInternal, Modify) == 0x000014, "Member 'COMP_Inventory_C_AddItemInternal::Modify' has a wrong offset!");
static_assert(offsetof(COMP_Inventory_C_AddItemInternal, Result) == 0x000015, "Member 'COMP_Inventory_C_AddItemInternal::Result' has a wrong offset!");
static_assert(offsetof(COMP_Inventory_C_AddItemInternal, CurrentBag) == 0x000018, "Member 'COMP_Inventory_C_AddItemInternal::CurrentBag' has a wrong offset!");
static_assert(offsetof(COMP_Inventory_C_AddItemInternal, UpgradeClass) == 0x000020, "Member 'COMP_Inventory_C_AddItemInternal::UpgradeClass' has a wrong offset!");
static_assert(offsetof(COMP_Inventory_C_AddItemInternal, EquipBag) == 0x000028, "Member 'COMP_Inventory_C_AddItemInternal::EquipBag' has a wrong offset!");
static_assert(offsetof(COMP_Inventory_C_AddItemInternal, Temp_int_Array_Index_Variable) == 0x000030, "Member 'COMP_Inventory_C_AddItemInternal::Temp_int_Array_Index_Variable' has a wrong offset!");
static_assert(offsetof(COMP_Inventory_C_AddItemInternal, CallFunc_IsValid_ReturnValue) == 0x000034, "Member 'COMP_Inventory_C_AddItemInternal::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(COMP_Inventory_C_AddItemInternal, Temp_int_Loop_Counter_Variable) == 0x000038, "Member 'COMP_Inventory_C_AddItemInternal::Temp_int_Loop_Counter_Variable' has a wrong offset!");
static_assert(offsetof(COMP_Inventory_C_AddItemInternal, CallFunc_Add_IntInt_ReturnValue) == 0x00003C, "Member 'COMP_Inventory_C_AddItemInternal::CallFunc_Add_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(COMP_Inventory_C_AddItemInternal, K2Node_DynamicCast_AsITEM_Upgrade_Base) == 0x000040, "Member 'COMP_Inventory_C_AddItemInternal::K2Node_DynamicCast_AsITEM_Upgrade_Base' has a wrong offset!");
static_assert(offsetof(COMP_Inventory_C_AddItemInternal, K2Node_DynamicCast_bSuccess) == 0x000048, "Member 'COMP_Inventory_C_AddItemInternal::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(COMP_Inventory_C_AddItemInternal, CallFunc_FindAndApplyUpgrade_Result) == 0x000049, "Member 'COMP_Inventory_C_AddItemInternal::CallFunc_FindAndApplyUpgrade_Result' has a wrong offset!");
static_assert(offsetof(COMP_Inventory_C_AddItemInternal, CallFunc_NotEqual_ByteByte_ReturnValue) == 0x00004A, "Member 'COMP_Inventory_C_AddItemInternal::CallFunc_NotEqual_ByteByte_ReturnValue' has a wrong offset!");
static_assert(offsetof(COMP_Inventory_C_AddItemInternal, CallFunc_FindItemToUpgrade_Item) == 0x000050, "Member 'COMP_Inventory_C_AddItemInternal::CallFunc_FindItemToUpgrade_Item' has a wrong offset!");
static_assert(offsetof(COMP_Inventory_C_AddItemInternal, CallFunc_FindItemToUpgrade_Result) == 0x000058, "Member 'COMP_Inventory_C_AddItemInternal::CallFunc_FindItemToUpgrade_Result' has a wrong offset!");
static_assert(offsetof(COMP_Inventory_C_AddItemInternal, CallFunc_IsValid_ReturnValue_1) == 0x000059, "Member 'COMP_Inventory_C_AddItemInternal::CallFunc_IsValid_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(COMP_Inventory_C_AddItemInternal, K2Node_ClassDynamicCast_AsITEM_Upgrade_Base) == 0x000060, "Member 'COMP_Inventory_C_AddItemInternal::K2Node_ClassDynamicCast_AsITEM_Upgrade_Base' has a wrong offset!");
static_assert(offsetof(COMP_Inventory_C_AddItemInternal, K2Node_ClassDynamicCast_bSuccess) == 0x000068, "Member 'COMP_Inventory_C_AddItemInternal::K2Node_ClassDynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(COMP_Inventory_C_AddItemInternal, CallFunc_IsOverflowBag_Result) == 0x000069, "Member 'COMP_Inventory_C_AddItemInternal::CallFunc_IsOverflowBag_Result' has a wrong offset!");
static_assert(offsetof(COMP_Inventory_C_AddItemInternal, CallFunc_Not_PreBool_ReturnValue) == 0x00006A, "Member 'COMP_Inventory_C_AddItemInternal::CallFunc_Not_PreBool_ReturnValue' has a wrong offset!");
static_assert(offsetof(COMP_Inventory_C_AddItemInternal, CallFunc_CanSlotItemClass_Result) == 0x00006B, "Member 'COMP_Inventory_C_AddItemInternal::CallFunc_CanSlotItemClass_Result' has a wrong offset!");
static_assert(offsetof(COMP_Inventory_C_AddItemInternal, CallFunc_AddItemInternal_Result) == 0x00006C, "Member 'COMP_Inventory_C_AddItemInternal::CallFunc_AddItemInternal_Result' has a wrong offset!");
static_assert(offsetof(COMP_Inventory_C_AddItemInternal, CallFunc_NotEqual_ObjectObject_ReturnValue) == 0x00006D, "Member 'COMP_Inventory_C_AddItemInternal::CallFunc_NotEqual_ObjectObject_ReturnValue' has a wrong offset!");
static_assert(offsetof(COMP_Inventory_C_AddItemInternal, CallFunc_Array_Get_Item) == 0x000070, "Member 'COMP_Inventory_C_AddItemInternal::CallFunc_Array_Get_Item' has a wrong offset!");
static_assert(offsetof(COMP_Inventory_C_AddItemInternal, CallFunc_Array_Length_ReturnValue) == 0x000078, "Member 'COMP_Inventory_C_AddItemInternal::CallFunc_Array_Length_ReturnValue' has a wrong offset!");
static_assert(offsetof(COMP_Inventory_C_AddItemInternal, CallFunc_Less_IntInt_ReturnValue) == 0x00007C, "Member 'COMP_Inventory_C_AddItemInternal::CallFunc_Less_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(COMP_Inventory_C_AddItemInternal, CallFunc_AddItemInternal_Result_1) == 0x00007D, "Member 'COMP_Inventory_C_AddItemInternal::CallFunc_AddItemInternal_Result_1' has a wrong offset!");
static_assert(offsetof(COMP_Inventory_C_AddItemInternal, CallFunc_GetBagByRequiredType_Bag) == 0x000080, "Member 'COMP_Inventory_C_AddItemInternal::CallFunc_GetBagByRequiredType_Bag' has a wrong offset!");
static_assert(offsetof(COMP_Inventory_C_AddItemInternal, CallFunc_BooleanOR_ReturnValue) == 0x000088, "Member 'COMP_Inventory_C_AddItemInternal::CallFunc_BooleanOR_ReturnValue' has a wrong offset!");
static_assert(offsetof(COMP_Inventory_C_AddItemInternal, CallFunc_Greater_IntInt_ReturnValue) == 0x000089, "Member 'COMP_Inventory_C_AddItemInternal::CallFunc_Greater_IntInt_ReturnValue' has a wrong offset!");

// Function COMP_Inventory.COMP_Inventory_C.CanGrantItem
// 0x0038 (0x0038 - 0x0000)
struct COMP_Inventory_C_CanGrantItem final
{
public:
	struct FSTRUCT_HardItemParams                 ItemParams;                                        // 0x0000(0x0010)(BlueprintVisible, BlueprintReadOnly, Parm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Result;                                            // 0x0010(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FSTRUCT_SoftItemParams>         Temp_struct_Variable;                              // 0x0018(0x0010)(ReferenceParm)
	class UClass*                                 K2Node_ClassDynamicCast_AsITEM_Package_Base;       // 0x0028(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_ClassDynamicCast_bSuccess;                  // 0x0030(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_AddItemInternal_Result;                   // 0x0031(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_CanGrantItems_Result;                     // 0x0032(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(COMP_Inventory_C_CanGrantItem) == 0x000008, "Wrong alignment on COMP_Inventory_C_CanGrantItem");
static_assert(sizeof(COMP_Inventory_C_CanGrantItem) == 0x000038, "Wrong size on COMP_Inventory_C_CanGrantItem");
static_assert(offsetof(COMP_Inventory_C_CanGrantItem, ItemParams) == 0x000000, "Member 'COMP_Inventory_C_CanGrantItem::ItemParams' has a wrong offset!");
static_assert(offsetof(COMP_Inventory_C_CanGrantItem, Result) == 0x000010, "Member 'COMP_Inventory_C_CanGrantItem::Result' has a wrong offset!");
static_assert(offsetof(COMP_Inventory_C_CanGrantItem, Temp_struct_Variable) == 0x000018, "Member 'COMP_Inventory_C_CanGrantItem::Temp_struct_Variable' has a wrong offset!");
static_assert(offsetof(COMP_Inventory_C_CanGrantItem, K2Node_ClassDynamicCast_AsITEM_Package_Base) == 0x000028, "Member 'COMP_Inventory_C_CanGrantItem::K2Node_ClassDynamicCast_AsITEM_Package_Base' has a wrong offset!");
static_assert(offsetof(COMP_Inventory_C_CanGrantItem, K2Node_ClassDynamicCast_bSuccess) == 0x000030, "Member 'COMP_Inventory_C_CanGrantItem::K2Node_ClassDynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(COMP_Inventory_C_CanGrantItem, CallFunc_AddItemInternal_Result) == 0x000031, "Member 'COMP_Inventory_C_CanGrantItem::CallFunc_AddItemInternal_Result' has a wrong offset!");
static_assert(offsetof(COMP_Inventory_C_CanGrantItem, CallFunc_CanGrantItems_Result) == 0x000032, "Member 'COMP_Inventory_C_CanGrantItem::CallFunc_CanGrantItems_Result' has a wrong offset!");

// Function COMP_Inventory.COMP_Inventory_C.CanAddItem
// 0x0030 (0x0030 - 0x0000)
struct COMP_Inventory_C_CanAddItem final
{
public:
	class UITEM_Base_C*                           Item;                                              // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Result;                                            // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0009(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_A[0x6];                                        // 0x000A(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class UITEM_PackageBase_C*                    K2Node_DynamicCast_AsITEM_Package_Base;            // 0x0010(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0018(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_CanGrantItems_Result;                     // 0x0019(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_1A[0x6];                                       // 0x001A(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class UClass*                                 CallFunc_GetObjectClass_ReturnValue;               // 0x0020(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_GetCount_Result;                          // 0x0028(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_AddItemInternal_Result;                   // 0x002C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(COMP_Inventory_C_CanAddItem) == 0x000008, "Wrong alignment on COMP_Inventory_C_CanAddItem");
static_assert(sizeof(COMP_Inventory_C_CanAddItem) == 0x000030, "Wrong size on COMP_Inventory_C_CanAddItem");
static_assert(offsetof(COMP_Inventory_C_CanAddItem, Item) == 0x000000, "Member 'COMP_Inventory_C_CanAddItem::Item' has a wrong offset!");
static_assert(offsetof(COMP_Inventory_C_CanAddItem, Result) == 0x000008, "Member 'COMP_Inventory_C_CanAddItem::Result' has a wrong offset!");
static_assert(offsetof(COMP_Inventory_C_CanAddItem, CallFunc_IsValid_ReturnValue) == 0x000009, "Member 'COMP_Inventory_C_CanAddItem::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(COMP_Inventory_C_CanAddItem, K2Node_DynamicCast_AsITEM_Package_Base) == 0x000010, "Member 'COMP_Inventory_C_CanAddItem::K2Node_DynamicCast_AsITEM_Package_Base' has a wrong offset!");
static_assert(offsetof(COMP_Inventory_C_CanAddItem, K2Node_DynamicCast_bSuccess) == 0x000018, "Member 'COMP_Inventory_C_CanAddItem::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(COMP_Inventory_C_CanAddItem, CallFunc_CanGrantItems_Result) == 0x000019, "Member 'COMP_Inventory_C_CanAddItem::CallFunc_CanGrantItems_Result' has a wrong offset!");
static_assert(offsetof(COMP_Inventory_C_CanAddItem, CallFunc_GetObjectClass_ReturnValue) == 0x000020, "Member 'COMP_Inventory_C_CanAddItem::CallFunc_GetObjectClass_ReturnValue' has a wrong offset!");
static_assert(offsetof(COMP_Inventory_C_CanAddItem, CallFunc_GetCount_Result) == 0x000028, "Member 'COMP_Inventory_C_CanAddItem::CallFunc_GetCount_Result' has a wrong offset!");
static_assert(offsetof(COMP_Inventory_C_CanAddItem, CallFunc_AddItemInternal_Result) == 0x00002C, "Member 'COMP_Inventory_C_CanAddItem::CallFunc_AddItemInternal_Result' has a wrong offset!");

// Function COMP_Inventory.COMP_Inventory_C.GetBagByType
// 0x0048 (0x0048 - 0x0000)
struct COMP_Inventory_C_GetBagByType final
{
public:
	ENUM_ItemType                                 ItemType;                                          // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UInventoryBag_C*                        Bag;                                               // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UInventoryBag_C*                        CurrentBag;                                        // 0x0010(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Array_Index_Variable;                     // 0x0018(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x001C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_CanSlotItemType_Result;                   // 0x001D(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsOverflowBag_Result;                     // 0x001E(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Not_PreBool_ReturnValue;                  // 0x001F(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	class UInventoryBag_C*                        CallFunc_Array_Get_Item;                           // 0x0020(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Length_ReturnValue;                 // 0x0028(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_2C[0x4];                                       // 0x002C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UInventoryBag_C*                        CallFunc_GetBagByRequiredType_Bag;                 // 0x0030(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Loop_Counter_Variable;                    // 0x0038(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue;                  // 0x003C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_3D[0x3];                                       // 0x003D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Add_IntInt_ReturnValue;                   // 0x0040(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(COMP_Inventory_C_GetBagByType) == 0x000008, "Wrong alignment on COMP_Inventory_C_GetBagByType");
static_assert(sizeof(COMP_Inventory_C_GetBagByType) == 0x000048, "Wrong size on COMP_Inventory_C_GetBagByType");
static_assert(offsetof(COMP_Inventory_C_GetBagByType, ItemType) == 0x000000, "Member 'COMP_Inventory_C_GetBagByType::ItemType' has a wrong offset!");
static_assert(offsetof(COMP_Inventory_C_GetBagByType, Bag) == 0x000008, "Member 'COMP_Inventory_C_GetBagByType::Bag' has a wrong offset!");
static_assert(offsetof(COMP_Inventory_C_GetBagByType, CurrentBag) == 0x000010, "Member 'COMP_Inventory_C_GetBagByType::CurrentBag' has a wrong offset!");
static_assert(offsetof(COMP_Inventory_C_GetBagByType, Temp_int_Array_Index_Variable) == 0x000018, "Member 'COMP_Inventory_C_GetBagByType::Temp_int_Array_Index_Variable' has a wrong offset!");
static_assert(offsetof(COMP_Inventory_C_GetBagByType, CallFunc_IsValid_ReturnValue) == 0x00001C, "Member 'COMP_Inventory_C_GetBagByType::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(COMP_Inventory_C_GetBagByType, CallFunc_CanSlotItemType_Result) == 0x00001D, "Member 'COMP_Inventory_C_GetBagByType::CallFunc_CanSlotItemType_Result' has a wrong offset!");
static_assert(offsetof(COMP_Inventory_C_GetBagByType, CallFunc_IsOverflowBag_Result) == 0x00001E, "Member 'COMP_Inventory_C_GetBagByType::CallFunc_IsOverflowBag_Result' has a wrong offset!");
static_assert(offsetof(COMP_Inventory_C_GetBagByType, CallFunc_Not_PreBool_ReturnValue) == 0x00001F, "Member 'COMP_Inventory_C_GetBagByType::CallFunc_Not_PreBool_ReturnValue' has a wrong offset!");
static_assert(offsetof(COMP_Inventory_C_GetBagByType, CallFunc_Array_Get_Item) == 0x000020, "Member 'COMP_Inventory_C_GetBagByType::CallFunc_Array_Get_Item' has a wrong offset!");
static_assert(offsetof(COMP_Inventory_C_GetBagByType, CallFunc_Array_Length_ReturnValue) == 0x000028, "Member 'COMP_Inventory_C_GetBagByType::CallFunc_Array_Length_ReturnValue' has a wrong offset!");
static_assert(offsetof(COMP_Inventory_C_GetBagByType, CallFunc_GetBagByRequiredType_Bag) == 0x000030, "Member 'COMP_Inventory_C_GetBagByType::CallFunc_GetBagByRequiredType_Bag' has a wrong offset!");
static_assert(offsetof(COMP_Inventory_C_GetBagByType, Temp_int_Loop_Counter_Variable) == 0x000038, "Member 'COMP_Inventory_C_GetBagByType::Temp_int_Loop_Counter_Variable' has a wrong offset!");
static_assert(offsetof(COMP_Inventory_C_GetBagByType, CallFunc_Less_IntInt_ReturnValue) == 0x00003C, "Member 'COMP_Inventory_C_GetBagByType::CallFunc_Less_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(COMP_Inventory_C_GetBagByType, CallFunc_Add_IntInt_ReturnValue) == 0x000040, "Member 'COMP_Inventory_C_GetBagByType::CallFunc_Add_IntInt_ReturnValue' has a wrong offset!");

// Function COMP_Inventory.COMP_Inventory_C.GetBagByRequiredType
// 0x0038 (0x0038 - 0x0000)
struct COMP_Inventory_C_GetBagByRequiredType final
{
public:
	ENUM_ItemType                                 ItemType;                                          // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UInventoryBag_C*                        Bag;                                               // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UInventoryBag_C*                        CurrentBag;                                        // 0x0010(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Array_Index_Variable;                     // 0x0018(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsOverflowBag_Result;                     // 0x001C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Not_PreBool_ReturnValue;                  // 0x001D(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_RequiresItemType_Result;                  // 0x001E(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_1F[0x1];                                       // 0x001F(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	class UInventoryBag_C*                        CallFunc_Array_Get_Item;                           // 0x0020(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Length_ReturnValue;                 // 0x0028(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Loop_Counter_Variable;                    // 0x002C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue;                  // 0x0030(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_31[0x3];                                       // 0x0031(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Add_IntInt_ReturnValue;                   // 0x0034(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(COMP_Inventory_C_GetBagByRequiredType) == 0x000008, "Wrong alignment on COMP_Inventory_C_GetBagByRequiredType");
static_assert(sizeof(COMP_Inventory_C_GetBagByRequiredType) == 0x000038, "Wrong size on COMP_Inventory_C_GetBagByRequiredType");
static_assert(offsetof(COMP_Inventory_C_GetBagByRequiredType, ItemType) == 0x000000, "Member 'COMP_Inventory_C_GetBagByRequiredType::ItemType' has a wrong offset!");
static_assert(offsetof(COMP_Inventory_C_GetBagByRequiredType, Bag) == 0x000008, "Member 'COMP_Inventory_C_GetBagByRequiredType::Bag' has a wrong offset!");
static_assert(offsetof(COMP_Inventory_C_GetBagByRequiredType, CurrentBag) == 0x000010, "Member 'COMP_Inventory_C_GetBagByRequiredType::CurrentBag' has a wrong offset!");
static_assert(offsetof(COMP_Inventory_C_GetBagByRequiredType, Temp_int_Array_Index_Variable) == 0x000018, "Member 'COMP_Inventory_C_GetBagByRequiredType::Temp_int_Array_Index_Variable' has a wrong offset!");
static_assert(offsetof(COMP_Inventory_C_GetBagByRequiredType, CallFunc_IsOverflowBag_Result) == 0x00001C, "Member 'COMP_Inventory_C_GetBagByRequiredType::CallFunc_IsOverflowBag_Result' has a wrong offset!");
static_assert(offsetof(COMP_Inventory_C_GetBagByRequiredType, CallFunc_Not_PreBool_ReturnValue) == 0x00001D, "Member 'COMP_Inventory_C_GetBagByRequiredType::CallFunc_Not_PreBool_ReturnValue' has a wrong offset!");
static_assert(offsetof(COMP_Inventory_C_GetBagByRequiredType, CallFunc_RequiresItemType_Result) == 0x00001E, "Member 'COMP_Inventory_C_GetBagByRequiredType::CallFunc_RequiresItemType_Result' has a wrong offset!");
static_assert(offsetof(COMP_Inventory_C_GetBagByRequiredType, CallFunc_Array_Get_Item) == 0x000020, "Member 'COMP_Inventory_C_GetBagByRequiredType::CallFunc_Array_Get_Item' has a wrong offset!");
static_assert(offsetof(COMP_Inventory_C_GetBagByRequiredType, CallFunc_Array_Length_ReturnValue) == 0x000028, "Member 'COMP_Inventory_C_GetBagByRequiredType::CallFunc_Array_Length_ReturnValue' has a wrong offset!");
static_assert(offsetof(COMP_Inventory_C_GetBagByRequiredType, Temp_int_Loop_Counter_Variable) == 0x00002C, "Member 'COMP_Inventory_C_GetBagByRequiredType::Temp_int_Loop_Counter_Variable' has a wrong offset!");
static_assert(offsetof(COMP_Inventory_C_GetBagByRequiredType, CallFunc_Less_IntInt_ReturnValue) == 0x000030, "Member 'COMP_Inventory_C_GetBagByRequiredType::CallFunc_Less_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(COMP_Inventory_C_GetBagByRequiredType, CallFunc_Add_IntInt_ReturnValue) == 0x000034, "Member 'COMP_Inventory_C_GetBagByRequiredType::CallFunc_Add_IntInt_ReturnValue' has a wrong offset!");

// Function COMP_Inventory.COMP_Inventory_C.GetBagByIndex
// 0x0020 (0x0020 - 0x0000)
struct COMP_Inventory_C_GetBagByIndex final
{
public:
	int32                                         BagIndex;                                          // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UInventoryBag_C*                        Bag;                                               // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UInventoryBag_C*                        CallFunc_Array_Get_Item;                           // 0x0010(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Length_ReturnValue;                 // 0x0018(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue;                  // 0x001C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_GreaterEqual_IntInt_ReturnValue;          // 0x001D(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BooleanAND_ReturnValue;                   // 0x001E(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(COMP_Inventory_C_GetBagByIndex) == 0x000008, "Wrong alignment on COMP_Inventory_C_GetBagByIndex");
static_assert(sizeof(COMP_Inventory_C_GetBagByIndex) == 0x000020, "Wrong size on COMP_Inventory_C_GetBagByIndex");
static_assert(offsetof(COMP_Inventory_C_GetBagByIndex, BagIndex) == 0x000000, "Member 'COMP_Inventory_C_GetBagByIndex::BagIndex' has a wrong offset!");
static_assert(offsetof(COMP_Inventory_C_GetBagByIndex, Bag) == 0x000008, "Member 'COMP_Inventory_C_GetBagByIndex::Bag' has a wrong offset!");
static_assert(offsetof(COMP_Inventory_C_GetBagByIndex, CallFunc_Array_Get_Item) == 0x000010, "Member 'COMP_Inventory_C_GetBagByIndex::CallFunc_Array_Get_Item' has a wrong offset!");
static_assert(offsetof(COMP_Inventory_C_GetBagByIndex, CallFunc_Array_Length_ReturnValue) == 0x000018, "Member 'COMP_Inventory_C_GetBagByIndex::CallFunc_Array_Length_ReturnValue' has a wrong offset!");
static_assert(offsetof(COMP_Inventory_C_GetBagByIndex, CallFunc_Less_IntInt_ReturnValue) == 0x00001C, "Member 'COMP_Inventory_C_GetBagByIndex::CallFunc_Less_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(COMP_Inventory_C_GetBagByIndex, CallFunc_GreaterEqual_IntInt_ReturnValue) == 0x00001D, "Member 'COMP_Inventory_C_GetBagByIndex::CallFunc_GreaterEqual_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(COMP_Inventory_C_GetBagByIndex, CallFunc_BooleanAND_ReturnValue) == 0x00001E, "Member 'COMP_Inventory_C_GetBagByIndex::CallFunc_BooleanAND_ReturnValue' has a wrong offset!");

// Function COMP_Inventory.COMP_Inventory_C.GetItemCount
// 0x0078 (0x0078 - 0x0000)
struct COMP_Inventory_C_GetItemCount final
{
public:
	class UClass*                                 ItemClass;                                         // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         MaxCount;                                          // 0x0008(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UITEM_Base_C*                           IgnoreItem;                                        // 0x0010(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Result;                                            // 0x0018(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         ItemCountFound;                                    // 0x001C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Array_Index_Variable;                     // 0x0020(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Loop_Counter_Variable;                    // 0x0024(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue;                   // 0x0028(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_2C[0x4];                                       // 0x002C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TSoftClassPtr<class UClass>                   CallFunc_Conv_ClassToSoftClassReference_ReturnValue; // 0x0030(0x0028)(UObjectWrapper, HasGetValueTypeHash)
	bool                                          CallFunc_GreaterEqual_IntInt_ReturnValue;          // 0x0058(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Greater_IntInt_ReturnValue;               // 0x0059(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BooleanAND_ReturnValue;                   // 0x005A(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_5B[0x1];                                       // 0x005B(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Array_Length_ReturnValue;                 // 0x005C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UInventoryBag_C*                        CallFunc_Array_Get_Item;                           // 0x0060(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue;                  // 0x0068(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_69[0x3];                                       // 0x0069(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_GetItemCount_Result;                      // 0x006C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue_1;                 // 0x0070(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_CanSlotItemClass_Result;                  // 0x0074(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(COMP_Inventory_C_GetItemCount) == 0x000008, "Wrong alignment on COMP_Inventory_C_GetItemCount");
static_assert(sizeof(COMP_Inventory_C_GetItemCount) == 0x000078, "Wrong size on COMP_Inventory_C_GetItemCount");
static_assert(offsetof(COMP_Inventory_C_GetItemCount, ItemClass) == 0x000000, "Member 'COMP_Inventory_C_GetItemCount::ItemClass' has a wrong offset!");
static_assert(offsetof(COMP_Inventory_C_GetItemCount, MaxCount) == 0x000008, "Member 'COMP_Inventory_C_GetItemCount::MaxCount' has a wrong offset!");
static_assert(offsetof(COMP_Inventory_C_GetItemCount, IgnoreItem) == 0x000010, "Member 'COMP_Inventory_C_GetItemCount::IgnoreItem' has a wrong offset!");
static_assert(offsetof(COMP_Inventory_C_GetItemCount, Result) == 0x000018, "Member 'COMP_Inventory_C_GetItemCount::Result' has a wrong offset!");
static_assert(offsetof(COMP_Inventory_C_GetItemCount, ItemCountFound) == 0x00001C, "Member 'COMP_Inventory_C_GetItemCount::ItemCountFound' has a wrong offset!");
static_assert(offsetof(COMP_Inventory_C_GetItemCount, Temp_int_Array_Index_Variable) == 0x000020, "Member 'COMP_Inventory_C_GetItemCount::Temp_int_Array_Index_Variable' has a wrong offset!");
static_assert(offsetof(COMP_Inventory_C_GetItemCount, Temp_int_Loop_Counter_Variable) == 0x000024, "Member 'COMP_Inventory_C_GetItemCount::Temp_int_Loop_Counter_Variable' has a wrong offset!");
static_assert(offsetof(COMP_Inventory_C_GetItemCount, CallFunc_Add_IntInt_ReturnValue) == 0x000028, "Member 'COMP_Inventory_C_GetItemCount::CallFunc_Add_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(COMP_Inventory_C_GetItemCount, CallFunc_Conv_ClassToSoftClassReference_ReturnValue) == 0x000030, "Member 'COMP_Inventory_C_GetItemCount::CallFunc_Conv_ClassToSoftClassReference_ReturnValue' has a wrong offset!");
static_assert(offsetof(COMP_Inventory_C_GetItemCount, CallFunc_GreaterEqual_IntInt_ReturnValue) == 0x000058, "Member 'COMP_Inventory_C_GetItemCount::CallFunc_GreaterEqual_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(COMP_Inventory_C_GetItemCount, CallFunc_Greater_IntInt_ReturnValue) == 0x000059, "Member 'COMP_Inventory_C_GetItemCount::CallFunc_Greater_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(COMP_Inventory_C_GetItemCount, CallFunc_BooleanAND_ReturnValue) == 0x00005A, "Member 'COMP_Inventory_C_GetItemCount::CallFunc_BooleanAND_ReturnValue' has a wrong offset!");
static_assert(offsetof(COMP_Inventory_C_GetItemCount, CallFunc_Array_Length_ReturnValue) == 0x00005C, "Member 'COMP_Inventory_C_GetItemCount::CallFunc_Array_Length_ReturnValue' has a wrong offset!");
static_assert(offsetof(COMP_Inventory_C_GetItemCount, CallFunc_Array_Get_Item) == 0x000060, "Member 'COMP_Inventory_C_GetItemCount::CallFunc_Array_Get_Item' has a wrong offset!");
static_assert(offsetof(COMP_Inventory_C_GetItemCount, CallFunc_Less_IntInt_ReturnValue) == 0x000068, "Member 'COMP_Inventory_C_GetItemCount::CallFunc_Less_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(COMP_Inventory_C_GetItemCount, CallFunc_GetItemCount_Result) == 0x00006C, "Member 'COMP_Inventory_C_GetItemCount::CallFunc_GetItemCount_Result' has a wrong offset!");
static_assert(offsetof(COMP_Inventory_C_GetItemCount, CallFunc_Add_IntInt_ReturnValue_1) == 0x000070, "Member 'COMP_Inventory_C_GetItemCount::CallFunc_Add_IntInt_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(COMP_Inventory_C_GetItemCount, CallFunc_CanSlotItemClass_Result) == 0x000074, "Member 'COMP_Inventory_C_GetItemCount::CallFunc_CanSlotItemClass_Result' has a wrong offset!");

// Function COMP_Inventory.COMP_Inventory_C.CreateItem
// 0x0020 (0x0020 - 0x0000)
struct COMP_Inventory_C_CreateItem final
{
public:
	struct FSTRUCT_HardItemParams                 ItemParams;                                        // 0x0000(0x0010)(BlueprintVisible, BlueprintReadOnly, Parm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UITEM_Base_C*                           Item;                                              // 0x0010(0x0008)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UITEM_Base_C*                           CallFunc_CreateInventoryItem_Item;                 // 0x0018(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(COMP_Inventory_C_CreateItem) == 0x000008, "Wrong alignment on COMP_Inventory_C_CreateItem");
static_assert(sizeof(COMP_Inventory_C_CreateItem) == 0x000020, "Wrong size on COMP_Inventory_C_CreateItem");
static_assert(offsetof(COMP_Inventory_C_CreateItem, ItemParams) == 0x000000, "Member 'COMP_Inventory_C_CreateItem::ItemParams' has a wrong offset!");
static_assert(offsetof(COMP_Inventory_C_CreateItem, Item) == 0x000010, "Member 'COMP_Inventory_C_CreateItem::Item' has a wrong offset!");
static_assert(offsetof(COMP_Inventory_C_CreateItem, CallFunc_CreateInventoryItem_Item) == 0x000018, "Member 'COMP_Inventory_C_CreateItem::CallFunc_CreateInventoryItem_Item' has a wrong offset!");

// Function COMP_Inventory.COMP_Inventory_C.GetBagByName
// 0x0038 (0x0038 - 0x0000)
struct COMP_Inventory_C_GetBagByName final
{
public:
	class FName                                   BagName;                                           // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UInventoryBag_C*                        Bag;                                               // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Array_Index_Variable;                     // 0x0010(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Loop_Counter_Variable;                    // 0x0014(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue;                   // 0x0018(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Length_ReturnValue;                 // 0x001C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UInventoryBag_C*                        CallFunc_Array_Get_Item;                           // 0x0020(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue;                  // 0x0028(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_29[0x3];                                       // 0x0029(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   CallFunc_GetBagName_BagName;                       // 0x002C(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_NameName_ReturnValue;          // 0x0034(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(COMP_Inventory_C_GetBagByName) == 0x000008, "Wrong alignment on COMP_Inventory_C_GetBagByName");
static_assert(sizeof(COMP_Inventory_C_GetBagByName) == 0x000038, "Wrong size on COMP_Inventory_C_GetBagByName");
static_assert(offsetof(COMP_Inventory_C_GetBagByName, BagName) == 0x000000, "Member 'COMP_Inventory_C_GetBagByName::BagName' has a wrong offset!");
static_assert(offsetof(COMP_Inventory_C_GetBagByName, Bag) == 0x000008, "Member 'COMP_Inventory_C_GetBagByName::Bag' has a wrong offset!");
static_assert(offsetof(COMP_Inventory_C_GetBagByName, Temp_int_Array_Index_Variable) == 0x000010, "Member 'COMP_Inventory_C_GetBagByName::Temp_int_Array_Index_Variable' has a wrong offset!");
static_assert(offsetof(COMP_Inventory_C_GetBagByName, Temp_int_Loop_Counter_Variable) == 0x000014, "Member 'COMP_Inventory_C_GetBagByName::Temp_int_Loop_Counter_Variable' has a wrong offset!");
static_assert(offsetof(COMP_Inventory_C_GetBagByName, CallFunc_Add_IntInt_ReturnValue) == 0x000018, "Member 'COMP_Inventory_C_GetBagByName::CallFunc_Add_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(COMP_Inventory_C_GetBagByName, CallFunc_Array_Length_ReturnValue) == 0x00001C, "Member 'COMP_Inventory_C_GetBagByName::CallFunc_Array_Length_ReturnValue' has a wrong offset!");
static_assert(offsetof(COMP_Inventory_C_GetBagByName, CallFunc_Array_Get_Item) == 0x000020, "Member 'COMP_Inventory_C_GetBagByName::CallFunc_Array_Get_Item' has a wrong offset!");
static_assert(offsetof(COMP_Inventory_C_GetBagByName, CallFunc_Less_IntInt_ReturnValue) == 0x000028, "Member 'COMP_Inventory_C_GetBagByName::CallFunc_Less_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(COMP_Inventory_C_GetBagByName, CallFunc_GetBagName_BagName) == 0x00002C, "Member 'COMP_Inventory_C_GetBagByName::CallFunc_GetBagName_BagName' has a wrong offset!");
static_assert(offsetof(COMP_Inventory_C_GetBagByName, CallFunc_EqualEqual_NameName_ReturnValue) == 0x000034, "Member 'COMP_Inventory_C_GetBagByName::CallFunc_EqualEqual_NameName_ReturnValue' has a wrong offset!");

// Function COMP_Inventory.COMP_Inventory_C.GetLootSeed
// 0x0020 (0x0020 - 0x0000)
struct COMP_Inventory_C_GetLootSeed final
{
public:
	int32                                         Seed;                                              // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         SessionId;                                         // 0x0004(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FString                                 CallFunc_GetPathName_ReturnValue;                  // 0x0008(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	int32                                         CallFunc_CreateRandomSeedForContext_Seed;          // 0x0018(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(COMP_Inventory_C_GetLootSeed) == 0x000008, "Wrong alignment on COMP_Inventory_C_GetLootSeed");
static_assert(sizeof(COMP_Inventory_C_GetLootSeed) == 0x000020, "Wrong size on COMP_Inventory_C_GetLootSeed");
static_assert(offsetof(COMP_Inventory_C_GetLootSeed, Seed) == 0x000000, "Member 'COMP_Inventory_C_GetLootSeed::Seed' has a wrong offset!");
static_assert(offsetof(COMP_Inventory_C_GetLootSeed, SessionId) == 0x000004, "Member 'COMP_Inventory_C_GetLootSeed::SessionId' has a wrong offset!");
static_assert(offsetof(COMP_Inventory_C_GetLootSeed, CallFunc_GetPathName_ReturnValue) == 0x000008, "Member 'COMP_Inventory_C_GetLootSeed::CallFunc_GetPathName_ReturnValue' has a wrong offset!");
static_assert(offsetof(COMP_Inventory_C_GetLootSeed, CallFunc_CreateRandomSeedForContext_Seed) == 0x000018, "Member 'COMP_Inventory_C_GetLootSeed::CallFunc_CreateRandomSeedForContext_Seed' has a wrong offset!");

// Function COMP_Inventory.COMP_Inventory_C.IsInventoryEmpty
// 0x0020 (0x0020 - 0x0000)
struct COMP_Inventory_C_IsInventoryEmpty final
{
public:
	bool                                          Result;                                            // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Temp_int_Array_Index_Variable;                     // 0x0004(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Loop_Counter_Variable;                    // 0x0008(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue;                   // 0x000C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UInventoryBag_C*                        CallFunc_Array_Get_Item;                           // 0x0010(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Length_ReturnValue;                 // 0x0018(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsBagEmpty_Result;                        // 0x001C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Less_IntInt_ReturnValue;                  // 0x001D(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Not_PreBool_ReturnValue;                  // 0x001E(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(COMP_Inventory_C_IsInventoryEmpty) == 0x000008, "Wrong alignment on COMP_Inventory_C_IsInventoryEmpty");
static_assert(sizeof(COMP_Inventory_C_IsInventoryEmpty) == 0x000020, "Wrong size on COMP_Inventory_C_IsInventoryEmpty");
static_assert(offsetof(COMP_Inventory_C_IsInventoryEmpty, Result) == 0x000000, "Member 'COMP_Inventory_C_IsInventoryEmpty::Result' has a wrong offset!");
static_assert(offsetof(COMP_Inventory_C_IsInventoryEmpty, Temp_int_Array_Index_Variable) == 0x000004, "Member 'COMP_Inventory_C_IsInventoryEmpty::Temp_int_Array_Index_Variable' has a wrong offset!");
static_assert(offsetof(COMP_Inventory_C_IsInventoryEmpty, Temp_int_Loop_Counter_Variable) == 0x000008, "Member 'COMP_Inventory_C_IsInventoryEmpty::Temp_int_Loop_Counter_Variable' has a wrong offset!");
static_assert(offsetof(COMP_Inventory_C_IsInventoryEmpty, CallFunc_Add_IntInt_ReturnValue) == 0x00000C, "Member 'COMP_Inventory_C_IsInventoryEmpty::CallFunc_Add_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(COMP_Inventory_C_IsInventoryEmpty, CallFunc_Array_Get_Item) == 0x000010, "Member 'COMP_Inventory_C_IsInventoryEmpty::CallFunc_Array_Get_Item' has a wrong offset!");
static_assert(offsetof(COMP_Inventory_C_IsInventoryEmpty, CallFunc_Array_Length_ReturnValue) == 0x000018, "Member 'COMP_Inventory_C_IsInventoryEmpty::CallFunc_Array_Length_ReturnValue' has a wrong offset!");
static_assert(offsetof(COMP_Inventory_C_IsInventoryEmpty, CallFunc_IsBagEmpty_Result) == 0x00001C, "Member 'COMP_Inventory_C_IsInventoryEmpty::CallFunc_IsBagEmpty_Result' has a wrong offset!");
static_assert(offsetof(COMP_Inventory_C_IsInventoryEmpty, CallFunc_Less_IntInt_ReturnValue) == 0x00001D, "Member 'COMP_Inventory_C_IsInventoryEmpty::CallFunc_Less_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(COMP_Inventory_C_IsInventoryEmpty, CallFunc_Not_PreBool_ReturnValue) == 0x00001E, "Member 'COMP_Inventory_C_IsInventoryEmpty::CallFunc_Not_PreBool_ReturnValue' has a wrong offset!");

// Function COMP_Inventory.COMP_Inventory_C.MergeItems
// 0x00B0 (0x00B0 - 0x0000)
struct COMP_Inventory_C_MergeItems final
{
public:
	class UCOMP_Inventory_C*                      OtherInventory;                                    // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TArray<class UITEM_Base_C*>                   ItemsNotMerged;                                    // 0x0008(0x0010)(BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
	bool                                          Success;                                           // 0x0018(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_19[0x7];                                       // 0x0019(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class UITEM_Base_C*>                   ItemsInBag;                                        // 0x0020(0x0010)(Edit, BlueprintVisible)
	class UITEM_Base_C*                           CurrentItem;                                       // 0x0030(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UInventoryBag_C*                        CurrentBag;                                        // 0x0038(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0040(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_41[0x3];                                       // 0x0041(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Array_Length_ReturnValue;                 // 0x0044(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Loop_Counter_Variable;                    // 0x0048(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue;                  // 0x004C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_4D[0x3];                                       // 0x004D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Add_IntInt_ReturnValue;                   // 0x0050(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Array_Index_Variable;                     // 0x0054(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UInventoryBag_C*                        CallFunc_Array_Get_Item;                           // 0x0058(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Length_ReturnValue_1;               // 0x0060(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_IntInt_ReturnValue;            // 0x0064(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_65[0x3];                                       // 0x0065(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Temp_int_Loop_Counter_Variable_1;                  // 0x0068(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Array_Index_Variable_1;                   // 0x006C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue_1;                 // 0x0070(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_74[0x4];                                       // 0x0074(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UITEM_Base_C*                           CallFunc_Array_Get_Item_1;                         // 0x0078(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Length_ReturnValue_2;               // 0x0080(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue_1;                // 0x0084(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_CanUnslot_Result;                         // 0x0085(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_CanAddItem_Result;                        // 0x0086(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BooleanAND_ReturnValue;                   // 0x0087(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	class UITEM_Base_C*                           CallFunc_RemoveItem_RemovedItem;                   // 0x0088(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_AddItem_Result;                           // 0x0090(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_91[0x7];                                       // 0x0091(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class UITEM_Base_C*>                   CallFunc_GetItemArray_Items;                       // 0x0098(0x0010)(ReferenceParm)
	int32                                         CallFunc_Array_Add_ReturnValue;                    // 0x00A8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(COMP_Inventory_C_MergeItems) == 0x000008, "Wrong alignment on COMP_Inventory_C_MergeItems");
static_assert(sizeof(COMP_Inventory_C_MergeItems) == 0x0000B0, "Wrong size on COMP_Inventory_C_MergeItems");
static_assert(offsetof(COMP_Inventory_C_MergeItems, OtherInventory) == 0x000000, "Member 'COMP_Inventory_C_MergeItems::OtherInventory' has a wrong offset!");
static_assert(offsetof(COMP_Inventory_C_MergeItems, ItemsNotMerged) == 0x000008, "Member 'COMP_Inventory_C_MergeItems::ItemsNotMerged' has a wrong offset!");
static_assert(offsetof(COMP_Inventory_C_MergeItems, Success) == 0x000018, "Member 'COMP_Inventory_C_MergeItems::Success' has a wrong offset!");
static_assert(offsetof(COMP_Inventory_C_MergeItems, ItemsInBag) == 0x000020, "Member 'COMP_Inventory_C_MergeItems::ItemsInBag' has a wrong offset!");
static_assert(offsetof(COMP_Inventory_C_MergeItems, CurrentItem) == 0x000030, "Member 'COMP_Inventory_C_MergeItems::CurrentItem' has a wrong offset!");
static_assert(offsetof(COMP_Inventory_C_MergeItems, CurrentBag) == 0x000038, "Member 'COMP_Inventory_C_MergeItems::CurrentBag' has a wrong offset!");
static_assert(offsetof(COMP_Inventory_C_MergeItems, CallFunc_IsValid_ReturnValue) == 0x000040, "Member 'COMP_Inventory_C_MergeItems::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(COMP_Inventory_C_MergeItems, CallFunc_Array_Length_ReturnValue) == 0x000044, "Member 'COMP_Inventory_C_MergeItems::CallFunc_Array_Length_ReturnValue' has a wrong offset!");
static_assert(offsetof(COMP_Inventory_C_MergeItems, Temp_int_Loop_Counter_Variable) == 0x000048, "Member 'COMP_Inventory_C_MergeItems::Temp_int_Loop_Counter_Variable' has a wrong offset!");
static_assert(offsetof(COMP_Inventory_C_MergeItems, CallFunc_Less_IntInt_ReturnValue) == 0x00004C, "Member 'COMP_Inventory_C_MergeItems::CallFunc_Less_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(COMP_Inventory_C_MergeItems, CallFunc_Add_IntInt_ReturnValue) == 0x000050, "Member 'COMP_Inventory_C_MergeItems::CallFunc_Add_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(COMP_Inventory_C_MergeItems, Temp_int_Array_Index_Variable) == 0x000054, "Member 'COMP_Inventory_C_MergeItems::Temp_int_Array_Index_Variable' has a wrong offset!");
static_assert(offsetof(COMP_Inventory_C_MergeItems, CallFunc_Array_Get_Item) == 0x000058, "Member 'COMP_Inventory_C_MergeItems::CallFunc_Array_Get_Item' has a wrong offset!");
static_assert(offsetof(COMP_Inventory_C_MergeItems, CallFunc_Array_Length_ReturnValue_1) == 0x000060, "Member 'COMP_Inventory_C_MergeItems::CallFunc_Array_Length_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(COMP_Inventory_C_MergeItems, CallFunc_EqualEqual_IntInt_ReturnValue) == 0x000064, "Member 'COMP_Inventory_C_MergeItems::CallFunc_EqualEqual_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(COMP_Inventory_C_MergeItems, Temp_int_Loop_Counter_Variable_1) == 0x000068, "Member 'COMP_Inventory_C_MergeItems::Temp_int_Loop_Counter_Variable_1' has a wrong offset!");
static_assert(offsetof(COMP_Inventory_C_MergeItems, Temp_int_Array_Index_Variable_1) == 0x00006C, "Member 'COMP_Inventory_C_MergeItems::Temp_int_Array_Index_Variable_1' has a wrong offset!");
static_assert(offsetof(COMP_Inventory_C_MergeItems, CallFunc_Add_IntInt_ReturnValue_1) == 0x000070, "Member 'COMP_Inventory_C_MergeItems::CallFunc_Add_IntInt_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(COMP_Inventory_C_MergeItems, CallFunc_Array_Get_Item_1) == 0x000078, "Member 'COMP_Inventory_C_MergeItems::CallFunc_Array_Get_Item_1' has a wrong offset!");
static_assert(offsetof(COMP_Inventory_C_MergeItems, CallFunc_Array_Length_ReturnValue_2) == 0x000080, "Member 'COMP_Inventory_C_MergeItems::CallFunc_Array_Length_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(COMP_Inventory_C_MergeItems, CallFunc_Less_IntInt_ReturnValue_1) == 0x000084, "Member 'COMP_Inventory_C_MergeItems::CallFunc_Less_IntInt_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(COMP_Inventory_C_MergeItems, CallFunc_CanUnslot_Result) == 0x000085, "Member 'COMP_Inventory_C_MergeItems::CallFunc_CanUnslot_Result' has a wrong offset!");
static_assert(offsetof(COMP_Inventory_C_MergeItems, CallFunc_CanAddItem_Result) == 0x000086, "Member 'COMP_Inventory_C_MergeItems::CallFunc_CanAddItem_Result' has a wrong offset!");
static_assert(offsetof(COMP_Inventory_C_MergeItems, CallFunc_BooleanAND_ReturnValue) == 0x000087, "Member 'COMP_Inventory_C_MergeItems::CallFunc_BooleanAND_ReturnValue' has a wrong offset!");
static_assert(offsetof(COMP_Inventory_C_MergeItems, CallFunc_RemoveItem_RemovedItem) == 0x000088, "Member 'COMP_Inventory_C_MergeItems::CallFunc_RemoveItem_RemovedItem' has a wrong offset!");
static_assert(offsetof(COMP_Inventory_C_MergeItems, CallFunc_AddItem_Result) == 0x000090, "Member 'COMP_Inventory_C_MergeItems::CallFunc_AddItem_Result' has a wrong offset!");
static_assert(offsetof(COMP_Inventory_C_MergeItems, CallFunc_GetItemArray_Items) == 0x000098, "Member 'COMP_Inventory_C_MergeItems::CallFunc_GetItemArray_Items' has a wrong offset!");
static_assert(offsetof(COMP_Inventory_C_MergeItems, CallFunc_Array_Add_ReturnValue) == 0x0000A8, "Member 'COMP_Inventory_C_MergeItems::CallFunc_Array_Add_ReturnValue' has a wrong offset!");

// Function COMP_Inventory.COMP_Inventory_C.RemoveItemByClass
// 0x0028 (0x0028 - 0x0000)
struct COMP_Inventory_C_RemoveItemByClass final
{
public:
	class UClass*                                 ItemClass;                                         // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UITEM_Base_C*                           RemovedItem;                                       // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UITEM_Base_C*                           ItemFound;                                         // 0x0010(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UITEM_Base_C*                           CallFunc_FindItem_FoundItem;                       // 0x0018(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_RemoveItem_Result;                        // 0x0020(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0021(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(COMP_Inventory_C_RemoveItemByClass) == 0x000008, "Wrong alignment on COMP_Inventory_C_RemoveItemByClass");
static_assert(sizeof(COMP_Inventory_C_RemoveItemByClass) == 0x000028, "Wrong size on COMP_Inventory_C_RemoveItemByClass");
static_assert(offsetof(COMP_Inventory_C_RemoveItemByClass, ItemClass) == 0x000000, "Member 'COMP_Inventory_C_RemoveItemByClass::ItemClass' has a wrong offset!");
static_assert(offsetof(COMP_Inventory_C_RemoveItemByClass, RemovedItem) == 0x000008, "Member 'COMP_Inventory_C_RemoveItemByClass::RemovedItem' has a wrong offset!");
static_assert(offsetof(COMP_Inventory_C_RemoveItemByClass, ItemFound) == 0x000010, "Member 'COMP_Inventory_C_RemoveItemByClass::ItemFound' has a wrong offset!");
static_assert(offsetof(COMP_Inventory_C_RemoveItemByClass, CallFunc_FindItem_FoundItem) == 0x000018, "Member 'COMP_Inventory_C_RemoveItemByClass::CallFunc_FindItem_FoundItem' has a wrong offset!");
static_assert(offsetof(COMP_Inventory_C_RemoveItemByClass, CallFunc_RemoveItem_Result) == 0x000020, "Member 'COMP_Inventory_C_RemoveItemByClass::CallFunc_RemoveItem_Result' has a wrong offset!");
static_assert(offsetof(COMP_Inventory_C_RemoveItemByClass, CallFunc_IsValid_ReturnValue) == 0x000021, "Member 'COMP_Inventory_C_RemoveItemByClass::CallFunc_IsValid_ReturnValue' has a wrong offset!");

// Function COMP_Inventory.COMP_Inventory_C.FindItem
// 0x0058 (0x0058 - 0x0000)
struct COMP_Inventory_C_FindItem final
{
public:
	class UClass*                                 ItemClass;                                         // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          RequireUnslottable;                                // 0x0008(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          AnyDerivedClass;                                   // 0x0009(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_A[0x6];                                        // 0x000A(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class UITEM_Base_C*                           FoundItem;                                         // 0x0010(0x0008)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UInventoryBag_C*                        CurrentBag;                                        // 0x0018(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UITEM_Base_C*                           ItemFound;                                         // 0x0020(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Array_Index_Variable;                     // 0x0028(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Loop_Counter_Variable;                    // 0x002C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue;                   // 0x0030(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0034(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_CanSlotItemClass_Result;                  // 0x0035(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_36[0x2];                                       // 0x0036(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	class UITEM_Base_C*                           CallFunc_FindItem_FoundItem;                       // 0x0038(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Length_ReturnValue;                 // 0x0040(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_44[0x4];                                       // 0x0044(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UInventoryBag_C*                        CallFunc_Array_Get_Item;                           // 0x0048(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue;                  // 0x0050(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(COMP_Inventory_C_FindItem) == 0x000008, "Wrong alignment on COMP_Inventory_C_FindItem");
static_assert(sizeof(COMP_Inventory_C_FindItem) == 0x000058, "Wrong size on COMP_Inventory_C_FindItem");
static_assert(offsetof(COMP_Inventory_C_FindItem, ItemClass) == 0x000000, "Member 'COMP_Inventory_C_FindItem::ItemClass' has a wrong offset!");
static_assert(offsetof(COMP_Inventory_C_FindItem, RequireUnslottable) == 0x000008, "Member 'COMP_Inventory_C_FindItem::RequireUnslottable' has a wrong offset!");
static_assert(offsetof(COMP_Inventory_C_FindItem, AnyDerivedClass) == 0x000009, "Member 'COMP_Inventory_C_FindItem::AnyDerivedClass' has a wrong offset!");
static_assert(offsetof(COMP_Inventory_C_FindItem, FoundItem) == 0x000010, "Member 'COMP_Inventory_C_FindItem::FoundItem' has a wrong offset!");
static_assert(offsetof(COMP_Inventory_C_FindItem, CurrentBag) == 0x000018, "Member 'COMP_Inventory_C_FindItem::CurrentBag' has a wrong offset!");
static_assert(offsetof(COMP_Inventory_C_FindItem, ItemFound) == 0x000020, "Member 'COMP_Inventory_C_FindItem::ItemFound' has a wrong offset!");
static_assert(offsetof(COMP_Inventory_C_FindItem, Temp_int_Array_Index_Variable) == 0x000028, "Member 'COMP_Inventory_C_FindItem::Temp_int_Array_Index_Variable' has a wrong offset!");
static_assert(offsetof(COMP_Inventory_C_FindItem, Temp_int_Loop_Counter_Variable) == 0x00002C, "Member 'COMP_Inventory_C_FindItem::Temp_int_Loop_Counter_Variable' has a wrong offset!");
static_assert(offsetof(COMP_Inventory_C_FindItem, CallFunc_Add_IntInt_ReturnValue) == 0x000030, "Member 'COMP_Inventory_C_FindItem::CallFunc_Add_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(COMP_Inventory_C_FindItem, CallFunc_IsValid_ReturnValue) == 0x000034, "Member 'COMP_Inventory_C_FindItem::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(COMP_Inventory_C_FindItem, CallFunc_CanSlotItemClass_Result) == 0x000035, "Member 'COMP_Inventory_C_FindItem::CallFunc_CanSlotItemClass_Result' has a wrong offset!");
static_assert(offsetof(COMP_Inventory_C_FindItem, CallFunc_FindItem_FoundItem) == 0x000038, "Member 'COMP_Inventory_C_FindItem::CallFunc_FindItem_FoundItem' has a wrong offset!");
static_assert(offsetof(COMP_Inventory_C_FindItem, CallFunc_Array_Length_ReturnValue) == 0x000040, "Member 'COMP_Inventory_C_FindItem::CallFunc_Array_Length_ReturnValue' has a wrong offset!");
static_assert(offsetof(COMP_Inventory_C_FindItem, CallFunc_Array_Get_Item) == 0x000048, "Member 'COMP_Inventory_C_FindItem::CallFunc_Array_Get_Item' has a wrong offset!");
static_assert(offsetof(COMP_Inventory_C_FindItem, CallFunc_Less_IntInt_ReturnValue) == 0x000050, "Member 'COMP_Inventory_C_FindItem::CallFunc_Less_IntInt_ReturnValue' has a wrong offset!");

// Function COMP_Inventory.COMP_Inventory_C.FindItemBySoftClass
// 0x0070 (0x0070 - 0x0000)
struct COMP_Inventory_C_FindItemBySoftClass final
{
public:
	TSoftClassPtr<class UClass>                   ItemClass;                                         // 0x0000(0x0028)(BlueprintVisible, BlueprintReadOnly, Parm, HasGetValueTypeHash)
	bool                                          RequireUnslottable;                                // 0x0028(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_29[0x7];                                       // 0x0029(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UITEM_Base_C*                           FoundItem;                                         // 0x0030(0x0008)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UITEM_Base_C*                           ItemFound;                                         // 0x0038(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Array_Index_Variable;                     // 0x0040(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Loop_Counter_Variable;                    // 0x0044(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue;                   // 0x0048(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x004C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_4D[0x3];                                       // 0x004D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class UInventoryBag_C*                        CallFunc_Array_Get_Item;                           // 0x0050(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Length_ReturnValue;                 // 0x0058(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_5C[0x4];                                       // 0x005C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UITEM_Base_C*                           CallFunc_FindItemBySoftClass_FoundItem;            // 0x0060(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue;                  // 0x0068(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(COMP_Inventory_C_FindItemBySoftClass) == 0x000008, "Wrong alignment on COMP_Inventory_C_FindItemBySoftClass");
static_assert(sizeof(COMP_Inventory_C_FindItemBySoftClass) == 0x000070, "Wrong size on COMP_Inventory_C_FindItemBySoftClass");
static_assert(offsetof(COMP_Inventory_C_FindItemBySoftClass, ItemClass) == 0x000000, "Member 'COMP_Inventory_C_FindItemBySoftClass::ItemClass' has a wrong offset!");
static_assert(offsetof(COMP_Inventory_C_FindItemBySoftClass, RequireUnslottable) == 0x000028, "Member 'COMP_Inventory_C_FindItemBySoftClass::RequireUnslottable' has a wrong offset!");
static_assert(offsetof(COMP_Inventory_C_FindItemBySoftClass, FoundItem) == 0x000030, "Member 'COMP_Inventory_C_FindItemBySoftClass::FoundItem' has a wrong offset!");
static_assert(offsetof(COMP_Inventory_C_FindItemBySoftClass, ItemFound) == 0x000038, "Member 'COMP_Inventory_C_FindItemBySoftClass::ItemFound' has a wrong offset!");
static_assert(offsetof(COMP_Inventory_C_FindItemBySoftClass, Temp_int_Array_Index_Variable) == 0x000040, "Member 'COMP_Inventory_C_FindItemBySoftClass::Temp_int_Array_Index_Variable' has a wrong offset!");
static_assert(offsetof(COMP_Inventory_C_FindItemBySoftClass, Temp_int_Loop_Counter_Variable) == 0x000044, "Member 'COMP_Inventory_C_FindItemBySoftClass::Temp_int_Loop_Counter_Variable' has a wrong offset!");
static_assert(offsetof(COMP_Inventory_C_FindItemBySoftClass, CallFunc_Add_IntInt_ReturnValue) == 0x000048, "Member 'COMP_Inventory_C_FindItemBySoftClass::CallFunc_Add_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(COMP_Inventory_C_FindItemBySoftClass, CallFunc_IsValid_ReturnValue) == 0x00004C, "Member 'COMP_Inventory_C_FindItemBySoftClass::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(COMP_Inventory_C_FindItemBySoftClass, CallFunc_Array_Get_Item) == 0x000050, "Member 'COMP_Inventory_C_FindItemBySoftClass::CallFunc_Array_Get_Item' has a wrong offset!");
static_assert(offsetof(COMP_Inventory_C_FindItemBySoftClass, CallFunc_Array_Length_ReturnValue) == 0x000058, "Member 'COMP_Inventory_C_FindItemBySoftClass::CallFunc_Array_Length_ReturnValue' has a wrong offset!");
static_assert(offsetof(COMP_Inventory_C_FindItemBySoftClass, CallFunc_FindItemBySoftClass_FoundItem) == 0x000060, "Member 'COMP_Inventory_C_FindItemBySoftClass::CallFunc_FindItemBySoftClass_FoundItem' has a wrong offset!");
static_assert(offsetof(COMP_Inventory_C_FindItemBySoftClass, CallFunc_Less_IntInt_ReturnValue) == 0x000068, "Member 'COMP_Inventory_C_FindItemBySoftClass::CallFunc_Less_IntInt_ReturnValue' has a wrong offset!");

// Function COMP_Inventory.COMP_Inventory_C.RemoveItem
// 0x0048 (0x0048 - 0x0000)
struct COMP_Inventory_C_RemoveItem final
{
public:
	class UITEM_Base_C*                           Item;                                              // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Result;                                            // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UInventoryBag_C*                        Bag;                                               // 0x0010(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0018(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_19[0x7];                                       // 0x0019(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UCOMP_Inventory_C*                      CallFunc_GetInventory_Inventory;                   // 0x0020(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_ObjectObject_ReturnValue;      // 0x0028(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_29[0x7];                                       // 0x0029(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UITEM_Base_C*                           CallFunc_RemoveItem_RemovedItem;                   // 0x0030(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue_1;                    // 0x0038(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsValid_ReturnValue_2;                    // 0x0039(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_3A[0x6];                                       // 0x003A(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class UInventoryBag_C*                        CallFunc_GetBag_Result;                            // 0x0040(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(COMP_Inventory_C_RemoveItem) == 0x000008, "Wrong alignment on COMP_Inventory_C_RemoveItem");
static_assert(sizeof(COMP_Inventory_C_RemoveItem) == 0x000048, "Wrong size on COMP_Inventory_C_RemoveItem");
static_assert(offsetof(COMP_Inventory_C_RemoveItem, Item) == 0x000000, "Member 'COMP_Inventory_C_RemoveItem::Item' has a wrong offset!");
static_assert(offsetof(COMP_Inventory_C_RemoveItem, Result) == 0x000008, "Member 'COMP_Inventory_C_RemoveItem::Result' has a wrong offset!");
static_assert(offsetof(COMP_Inventory_C_RemoveItem, Bag) == 0x000010, "Member 'COMP_Inventory_C_RemoveItem::Bag' has a wrong offset!");
static_assert(offsetof(COMP_Inventory_C_RemoveItem, CallFunc_IsValid_ReturnValue) == 0x000018, "Member 'COMP_Inventory_C_RemoveItem::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(COMP_Inventory_C_RemoveItem, CallFunc_GetInventory_Inventory) == 0x000020, "Member 'COMP_Inventory_C_RemoveItem::CallFunc_GetInventory_Inventory' has a wrong offset!");
static_assert(offsetof(COMP_Inventory_C_RemoveItem, CallFunc_EqualEqual_ObjectObject_ReturnValue) == 0x000028, "Member 'COMP_Inventory_C_RemoveItem::CallFunc_EqualEqual_ObjectObject_ReturnValue' has a wrong offset!");
static_assert(offsetof(COMP_Inventory_C_RemoveItem, CallFunc_RemoveItem_RemovedItem) == 0x000030, "Member 'COMP_Inventory_C_RemoveItem::CallFunc_RemoveItem_RemovedItem' has a wrong offset!");
static_assert(offsetof(COMP_Inventory_C_RemoveItem, CallFunc_IsValid_ReturnValue_1) == 0x000038, "Member 'COMP_Inventory_C_RemoveItem::CallFunc_IsValid_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(COMP_Inventory_C_RemoveItem, CallFunc_IsValid_ReturnValue_2) == 0x000039, "Member 'COMP_Inventory_C_RemoveItem::CallFunc_IsValid_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(COMP_Inventory_C_RemoveItem, CallFunc_GetBag_Result) == 0x000040, "Member 'COMP_Inventory_C_RemoveItem::CallFunc_GetBag_Result' has a wrong offset!");

// Function COMP_Inventory.COMP_Inventory_C.FindAndApplyUpgrade
// 0x0048 (0x0048 - 0x0000)
struct COMP_Inventory_C_FindAndApplyUpgrade final
{
public:
	class UITEM_UpgradeBase_C*                    UpgradeItem;                                       // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UClass*                                 UpgradeClass;                                      // 0x0008(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ENUM_UpgradeResult                            Result;                                            // 0x0010(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ENUM_UpgradeResult                            CurrentResult;                                     // 0x0011(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_12[0x6];                                       // 0x0012(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class UInventoryBag_C*                        CurrentBag;                                        // 0x0018(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValidClass_ReturnValue;                 // 0x0020(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_21[0x3];                                       // 0x0021(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Temp_int_Array_Index_Variable;                     // 0x0024(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Loop_Counter_Variable;                    // 0x0028(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue;                   // 0x002C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_NotEqual_ByteByte_ReturnValue;            // 0x0030(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	ENUM_UpgradeResult                            CallFunc_FindAndApplyUpgrade_Result;               // 0x0031(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_CanSlotItemClass_Result;                  // 0x0032(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_33[0x1];                                       // 0x0033(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Array_Length_ReturnValue;                 // 0x0034(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UInventoryBag_C*                        CallFunc_Array_Get_Item;                           // 0x0038(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue;                  // 0x0040(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(COMP_Inventory_C_FindAndApplyUpgrade) == 0x000008, "Wrong alignment on COMP_Inventory_C_FindAndApplyUpgrade");
static_assert(sizeof(COMP_Inventory_C_FindAndApplyUpgrade) == 0x000048, "Wrong size on COMP_Inventory_C_FindAndApplyUpgrade");
static_assert(offsetof(COMP_Inventory_C_FindAndApplyUpgrade, UpgradeItem) == 0x000000, "Member 'COMP_Inventory_C_FindAndApplyUpgrade::UpgradeItem' has a wrong offset!");
static_assert(offsetof(COMP_Inventory_C_FindAndApplyUpgrade, UpgradeClass) == 0x000008, "Member 'COMP_Inventory_C_FindAndApplyUpgrade::UpgradeClass' has a wrong offset!");
static_assert(offsetof(COMP_Inventory_C_FindAndApplyUpgrade, Result) == 0x000010, "Member 'COMP_Inventory_C_FindAndApplyUpgrade::Result' has a wrong offset!");
static_assert(offsetof(COMP_Inventory_C_FindAndApplyUpgrade, CurrentResult) == 0x000011, "Member 'COMP_Inventory_C_FindAndApplyUpgrade::CurrentResult' has a wrong offset!");
static_assert(offsetof(COMP_Inventory_C_FindAndApplyUpgrade, CurrentBag) == 0x000018, "Member 'COMP_Inventory_C_FindAndApplyUpgrade::CurrentBag' has a wrong offset!");
static_assert(offsetof(COMP_Inventory_C_FindAndApplyUpgrade, CallFunc_IsValidClass_ReturnValue) == 0x000020, "Member 'COMP_Inventory_C_FindAndApplyUpgrade::CallFunc_IsValidClass_ReturnValue' has a wrong offset!");
static_assert(offsetof(COMP_Inventory_C_FindAndApplyUpgrade, Temp_int_Array_Index_Variable) == 0x000024, "Member 'COMP_Inventory_C_FindAndApplyUpgrade::Temp_int_Array_Index_Variable' has a wrong offset!");
static_assert(offsetof(COMP_Inventory_C_FindAndApplyUpgrade, Temp_int_Loop_Counter_Variable) == 0x000028, "Member 'COMP_Inventory_C_FindAndApplyUpgrade::Temp_int_Loop_Counter_Variable' has a wrong offset!");
static_assert(offsetof(COMP_Inventory_C_FindAndApplyUpgrade, CallFunc_Add_IntInt_ReturnValue) == 0x00002C, "Member 'COMP_Inventory_C_FindAndApplyUpgrade::CallFunc_Add_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(COMP_Inventory_C_FindAndApplyUpgrade, CallFunc_NotEqual_ByteByte_ReturnValue) == 0x000030, "Member 'COMP_Inventory_C_FindAndApplyUpgrade::CallFunc_NotEqual_ByteByte_ReturnValue' has a wrong offset!");
static_assert(offsetof(COMP_Inventory_C_FindAndApplyUpgrade, CallFunc_FindAndApplyUpgrade_Result) == 0x000031, "Member 'COMP_Inventory_C_FindAndApplyUpgrade::CallFunc_FindAndApplyUpgrade_Result' has a wrong offset!");
static_assert(offsetof(COMP_Inventory_C_FindAndApplyUpgrade, CallFunc_CanSlotItemClass_Result) == 0x000032, "Member 'COMP_Inventory_C_FindAndApplyUpgrade::CallFunc_CanSlotItemClass_Result' has a wrong offset!");
static_assert(offsetof(COMP_Inventory_C_FindAndApplyUpgrade, CallFunc_Array_Length_ReturnValue) == 0x000034, "Member 'COMP_Inventory_C_FindAndApplyUpgrade::CallFunc_Array_Length_ReturnValue' has a wrong offset!");
static_assert(offsetof(COMP_Inventory_C_FindAndApplyUpgrade, CallFunc_Array_Get_Item) == 0x000038, "Member 'COMP_Inventory_C_FindAndApplyUpgrade::CallFunc_Array_Get_Item' has a wrong offset!");
static_assert(offsetof(COMP_Inventory_C_FindAndApplyUpgrade, CallFunc_Less_IntInt_ReturnValue) == 0x000040, "Member 'COMP_Inventory_C_FindAndApplyUpgrade::CallFunc_Less_IntInt_ReturnValue' has a wrong offset!");

// Function COMP_Inventory.COMP_Inventory_C.FindItemToUpgrade
// 0x0050 (0x0050 - 0x0000)
struct COMP_Inventory_C_FindItemToUpgrade final
{
public:
	class UClass*                                 UpgradeClass;                                      // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UITEM_UpgradeBase_C*                    Item;                                              // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ENUM_UpgradeResult                            Result;                                            // 0x0010(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UInventoryBag_C*                        CurrentBag;                                        // 0x0018(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValidClass_ReturnValue;                 // 0x0020(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_21[0x3];                                       // 0x0021(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Temp_int_Array_Index_Variable;                     // 0x0024(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Loop_Counter_Variable;                    // 0x0028(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue;                   // 0x002C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UITEM_UpgradeBase_C*                    CallFunc_FindItemToUpgrade_Item;                   // 0x0030(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ENUM_UpgradeResult                            CallFunc_FindItemToUpgrade_Result;                 // 0x0038(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_CanSlotItemClass_Result;                  // 0x0039(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x003A(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_3B[0x5];                                       // 0x003B(0x0005)(Fixing Size After Last Property [ Dumper-7 ])
	class UInventoryBag_C*                        CallFunc_Array_Get_Item;                           // 0x0040(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Length_ReturnValue;                 // 0x0048(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue;                  // 0x004C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(COMP_Inventory_C_FindItemToUpgrade) == 0x000008, "Wrong alignment on COMP_Inventory_C_FindItemToUpgrade");
static_assert(sizeof(COMP_Inventory_C_FindItemToUpgrade) == 0x000050, "Wrong size on COMP_Inventory_C_FindItemToUpgrade");
static_assert(offsetof(COMP_Inventory_C_FindItemToUpgrade, UpgradeClass) == 0x000000, "Member 'COMP_Inventory_C_FindItemToUpgrade::UpgradeClass' has a wrong offset!");
static_assert(offsetof(COMP_Inventory_C_FindItemToUpgrade, Item) == 0x000008, "Member 'COMP_Inventory_C_FindItemToUpgrade::Item' has a wrong offset!");
static_assert(offsetof(COMP_Inventory_C_FindItemToUpgrade, Result) == 0x000010, "Member 'COMP_Inventory_C_FindItemToUpgrade::Result' has a wrong offset!");
static_assert(offsetof(COMP_Inventory_C_FindItemToUpgrade, CurrentBag) == 0x000018, "Member 'COMP_Inventory_C_FindItemToUpgrade::CurrentBag' has a wrong offset!");
static_assert(offsetof(COMP_Inventory_C_FindItemToUpgrade, CallFunc_IsValidClass_ReturnValue) == 0x000020, "Member 'COMP_Inventory_C_FindItemToUpgrade::CallFunc_IsValidClass_ReturnValue' has a wrong offset!");
static_assert(offsetof(COMP_Inventory_C_FindItemToUpgrade, Temp_int_Array_Index_Variable) == 0x000024, "Member 'COMP_Inventory_C_FindItemToUpgrade::Temp_int_Array_Index_Variable' has a wrong offset!");
static_assert(offsetof(COMP_Inventory_C_FindItemToUpgrade, Temp_int_Loop_Counter_Variable) == 0x000028, "Member 'COMP_Inventory_C_FindItemToUpgrade::Temp_int_Loop_Counter_Variable' has a wrong offset!");
static_assert(offsetof(COMP_Inventory_C_FindItemToUpgrade, CallFunc_Add_IntInt_ReturnValue) == 0x00002C, "Member 'COMP_Inventory_C_FindItemToUpgrade::CallFunc_Add_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(COMP_Inventory_C_FindItemToUpgrade, CallFunc_FindItemToUpgrade_Item) == 0x000030, "Member 'COMP_Inventory_C_FindItemToUpgrade::CallFunc_FindItemToUpgrade_Item' has a wrong offset!");
static_assert(offsetof(COMP_Inventory_C_FindItemToUpgrade, CallFunc_FindItemToUpgrade_Result) == 0x000038, "Member 'COMP_Inventory_C_FindItemToUpgrade::CallFunc_FindItemToUpgrade_Result' has a wrong offset!");
static_assert(offsetof(COMP_Inventory_C_FindItemToUpgrade, CallFunc_CanSlotItemClass_Result) == 0x000039, "Member 'COMP_Inventory_C_FindItemToUpgrade::CallFunc_CanSlotItemClass_Result' has a wrong offset!");
static_assert(offsetof(COMP_Inventory_C_FindItemToUpgrade, CallFunc_IsValid_ReturnValue) == 0x00003A, "Member 'COMP_Inventory_C_FindItemToUpgrade::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(COMP_Inventory_C_FindItemToUpgrade, CallFunc_Array_Get_Item) == 0x000040, "Member 'COMP_Inventory_C_FindItemToUpgrade::CallFunc_Array_Get_Item' has a wrong offset!");
static_assert(offsetof(COMP_Inventory_C_FindItemToUpgrade, CallFunc_Array_Length_ReturnValue) == 0x000048, "Member 'COMP_Inventory_C_FindItemToUpgrade::CallFunc_Array_Length_ReturnValue' has a wrong offset!");
static_assert(offsetof(COMP_Inventory_C_FindItemToUpgrade, CallFunc_Less_IntInt_ReturnValue) == 0x00004C, "Member 'COMP_Inventory_C_FindItemToUpgrade::CallFunc_Less_IntInt_ReturnValue' has a wrong offset!");

// Function COMP_Inventory.COMP_Inventory_C.CanGrantItems
// 0x0038 (0x0038 - 0x0000)
struct COMP_Inventory_C_CanGrantItems final
{
public:
	TArray<struct FSTRUCT_SoftItemParams>         ItemParamsArray;                                   // 0x0000(0x0010)(BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
	bool                                          Result;                                            // 0x0010(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_11[0x3];                                       // 0x0011(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Array_Length_ReturnValue;                 // 0x0014(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Greater_IntInt_ReturnValue;               // 0x0018(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_19[0x7];                                       // 0x0019(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FSTRUCT_HardItemParams                 CallFunc_CreateHardItemParams_Result;              // 0x0020(0x0010)(IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_CanGrantItem_Result;                      // 0x0030(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(COMP_Inventory_C_CanGrantItems) == 0x000008, "Wrong alignment on COMP_Inventory_C_CanGrantItems");
static_assert(sizeof(COMP_Inventory_C_CanGrantItems) == 0x000038, "Wrong size on COMP_Inventory_C_CanGrantItems");
static_assert(offsetof(COMP_Inventory_C_CanGrantItems, ItemParamsArray) == 0x000000, "Member 'COMP_Inventory_C_CanGrantItems::ItemParamsArray' has a wrong offset!");
static_assert(offsetof(COMP_Inventory_C_CanGrantItems, Result) == 0x000010, "Member 'COMP_Inventory_C_CanGrantItems::Result' has a wrong offset!");
static_assert(offsetof(COMP_Inventory_C_CanGrantItems, CallFunc_Array_Length_ReturnValue) == 0x000014, "Member 'COMP_Inventory_C_CanGrantItems::CallFunc_Array_Length_ReturnValue' has a wrong offset!");
static_assert(offsetof(COMP_Inventory_C_CanGrantItems, CallFunc_Greater_IntInt_ReturnValue) == 0x000018, "Member 'COMP_Inventory_C_CanGrantItems::CallFunc_Greater_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(COMP_Inventory_C_CanGrantItems, CallFunc_CreateHardItemParams_Result) == 0x000020, "Member 'COMP_Inventory_C_CanGrantItems::CallFunc_CreateHardItemParams_Result' has a wrong offset!");
static_assert(offsetof(COMP_Inventory_C_CanGrantItems, CallFunc_CanGrantItem_Result) == 0x000030, "Member 'COMP_Inventory_C_CanGrantItems::CallFunc_CanGrantItem_Result' has a wrong offset!");

// Function COMP_Inventory.COMP_Inventory_C.IsEquipmentDisabled
// 0x0001 (0x0001 - 0x0000)
struct COMP_Inventory_C_IsEquipmentDisabled final
{
public:
	bool                                          Result;                                            // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(COMP_Inventory_C_IsEquipmentDisabled) == 0x000001, "Wrong alignment on COMP_Inventory_C_IsEquipmentDisabled");
static_assert(sizeof(COMP_Inventory_C_IsEquipmentDisabled) == 0x000001, "Wrong size on COMP_Inventory_C_IsEquipmentDisabled");
static_assert(offsetof(COMP_Inventory_C_IsEquipmentDisabled, Result) == 0x000000, "Member 'COMP_Inventory_C_IsEquipmentDisabled::Result' has a wrong offset!");

// Function COMP_Inventory.COMP_Inventory_C.ShouldCreateLinkedPickups
// 0x0001 (0x0001 - 0x0000)
struct COMP_Inventory_C_ShouldCreateLinkedPickups final
{
public:
	bool                                          Result;                                            // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(COMP_Inventory_C_ShouldCreateLinkedPickups) == 0x000001, "Wrong alignment on COMP_Inventory_C_ShouldCreateLinkedPickups");
static_assert(sizeof(COMP_Inventory_C_ShouldCreateLinkedPickups) == 0x000001, "Wrong size on COMP_Inventory_C_ShouldCreateLinkedPickups");
static_assert(offsetof(COMP_Inventory_C_ShouldCreateLinkedPickups, Result) == 0x000000, "Member 'COMP_Inventory_C_ShouldCreateLinkedPickups::Result' has a wrong offset!");

// Function COMP_Inventory.COMP_Inventory_C.SetEquipmentDisabled
// 0x0001 (0x0001 - 0x0000)
struct COMP_Inventory_C_SetEquipmentDisabled final
{
public:
	bool                                          Disable;                                           // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(COMP_Inventory_C_SetEquipmentDisabled) == 0x000001, "Wrong alignment on COMP_Inventory_C_SetEquipmentDisabled");
static_assert(sizeof(COMP_Inventory_C_SetEquipmentDisabled) == 0x000001, "Wrong size on COMP_Inventory_C_SetEquipmentDisabled");
static_assert(offsetof(COMP_Inventory_C_SetEquipmentDisabled, Disable) == 0x000000, "Member 'COMP_Inventory_C_SetEquipmentDisabled::Disable' has a wrong offset!");

// Function COMP_Inventory.COMP_Inventory_C.HasReachedEquipCapacity
// 0x0018 (0x0018 - 0x0000)
struct COMP_Inventory_C_HasReachedEquipCapacity final
{
public:
	class UInventoryBag_C*                        Bag;                                               // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UITEM_Base_C*                           Item;                                              // 0x0008(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Result;                                            // 0x0010(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsOverflowBag_Result;                     // 0x0011(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(COMP_Inventory_C_HasReachedEquipCapacity) == 0x000008, "Wrong alignment on COMP_Inventory_C_HasReachedEquipCapacity");
static_assert(sizeof(COMP_Inventory_C_HasReachedEquipCapacity) == 0x000018, "Wrong size on COMP_Inventory_C_HasReachedEquipCapacity");
static_assert(offsetof(COMP_Inventory_C_HasReachedEquipCapacity, Bag) == 0x000000, "Member 'COMP_Inventory_C_HasReachedEquipCapacity::Bag' has a wrong offset!");
static_assert(offsetof(COMP_Inventory_C_HasReachedEquipCapacity, Item) == 0x000008, "Member 'COMP_Inventory_C_HasReachedEquipCapacity::Item' has a wrong offset!");
static_assert(offsetof(COMP_Inventory_C_HasReachedEquipCapacity, Result) == 0x000010, "Member 'COMP_Inventory_C_HasReachedEquipCapacity::Result' has a wrong offset!");
static_assert(offsetof(COMP_Inventory_C_HasReachedEquipCapacity, CallFunc_IsOverflowBag_Result) == 0x000011, "Member 'COMP_Inventory_C_HasReachedEquipCapacity::CallFunc_IsOverflowBag_Result' has a wrong offset!");

// Function COMP_Inventory.COMP_Inventory_C.GetFirstEquippedItem
// 0x0010 (0x0010 - 0x0000)
struct COMP_Inventory_C_GetFirstEquippedItem final
{
public:
	class UInventoryBag_C*                        Bag;                                               // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UITEM_Base_C*                           Item;                                              // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(COMP_Inventory_C_GetFirstEquippedItem) == 0x000008, "Wrong alignment on COMP_Inventory_C_GetFirstEquippedItem");
static_assert(sizeof(COMP_Inventory_C_GetFirstEquippedItem) == 0x000010, "Wrong size on COMP_Inventory_C_GetFirstEquippedItem");
static_assert(offsetof(COMP_Inventory_C_GetFirstEquippedItem, Bag) == 0x000000, "Member 'COMP_Inventory_C_GetFirstEquippedItem::Bag' has a wrong offset!");
static_assert(offsetof(COMP_Inventory_C_GetFirstEquippedItem, Item) == 0x000008, "Member 'COMP_Inventory_C_GetFirstEquippedItem::Item' has a wrong offset!");

// Function COMP_Inventory.COMP_Inventory_C.GetDescriptionMessage
// 0x0050 (0x0050 - 0x0000)
struct COMP_Inventory_C_GetDescriptionMessage final
{
public:
	class FText                                   BaseMessage;                                       // 0x0000(0x0018)(BlueprintVisible, BlueprintReadOnly, Parm)
	class FText                                   Text;                                              // 0x0018(0x0018)(Parm, OutParm)
	bool                                          CallFunc_IsInventoryEmpty_Result;                  // 0x0030(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_31[0x7];                                       // 0x0031(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   CallFunc_GetInventoryDescriptionText_ResultMessage; // 0x0038(0x0018)()
};
static_assert(alignof(COMP_Inventory_C_GetDescriptionMessage) == 0x000008, "Wrong alignment on COMP_Inventory_C_GetDescriptionMessage");
static_assert(sizeof(COMP_Inventory_C_GetDescriptionMessage) == 0x000050, "Wrong size on COMP_Inventory_C_GetDescriptionMessage");
static_assert(offsetof(COMP_Inventory_C_GetDescriptionMessage, BaseMessage) == 0x000000, "Member 'COMP_Inventory_C_GetDescriptionMessage::BaseMessage' has a wrong offset!");
static_assert(offsetof(COMP_Inventory_C_GetDescriptionMessage, Text) == 0x000018, "Member 'COMP_Inventory_C_GetDescriptionMessage::Text' has a wrong offset!");
static_assert(offsetof(COMP_Inventory_C_GetDescriptionMessage, CallFunc_IsInventoryEmpty_Result) == 0x000030, "Member 'COMP_Inventory_C_GetDescriptionMessage::CallFunc_IsInventoryEmpty_Result' has a wrong offset!");
static_assert(offsetof(COMP_Inventory_C_GetDescriptionMessage, CallFunc_GetInventoryDescriptionText_ResultMessage) == 0x000038, "Member 'COMP_Inventory_C_GetDescriptionMessage::CallFunc_GetInventoryDescriptionText_ResultMessage' has a wrong offset!");

// Function COMP_Inventory.COMP_Inventory_C.ShouldSaveComponent
// 0x000C (0x000C - 0x0000)
struct COMP_Inventory_C_ShouldSaveComponent final
{
public:
	struct FStreamingSaveGameComponentParams      Params_0;                                          // 0x0000(0x0004)(Parm, OutParm, NoDestructor)
	bool                                          ReturnValue;                                       // 0x0004(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FStreamingSaveGameComponentParams      K2Node_MakeStruct_StreamingSaveGameComponentParams; // 0x0008(0x0004)(NoDestructor)
};
static_assert(alignof(COMP_Inventory_C_ShouldSaveComponent) == 0x000004, "Wrong alignment on COMP_Inventory_C_ShouldSaveComponent");
static_assert(sizeof(COMP_Inventory_C_ShouldSaveComponent) == 0x00000C, "Wrong size on COMP_Inventory_C_ShouldSaveComponent");
static_assert(offsetof(COMP_Inventory_C_ShouldSaveComponent, Params_0) == 0x000000, "Member 'COMP_Inventory_C_ShouldSaveComponent::Params_0' has a wrong offset!");
static_assert(offsetof(COMP_Inventory_C_ShouldSaveComponent, ReturnValue) == 0x000004, "Member 'COMP_Inventory_C_ShouldSaveComponent::ReturnValue' has a wrong offset!");
static_assert(offsetof(COMP_Inventory_C_ShouldSaveComponent, K2Node_MakeStruct_StreamingSaveGameComponentParams) == 0x000008, "Member 'COMP_Inventory_C_ShouldSaveComponent::K2Node_MakeStruct_StreamingSaveGameComponentParams' has a wrong offset!");

}

