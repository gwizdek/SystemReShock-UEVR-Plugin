#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: PAWN_CyberEnemy

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "AttributeSystem_structs.hpp"
#include "PAWN_Enemy_classes.hpp"


namespace SDK
{

// BlueprintGeneratedClass PAWN_CyberEnemy.PAWN_CyberEnemy_C
// 0x00E0 (0x0AF0 - 0x0A10)
class APAWN_CyberEnemy_C : public APAWN_Enemy_C
{
public:
	uint8                                         Pad_A01[0x7];                                      // 0x0A01(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FPointerToUberGraphFrame               UberGraphFrame_PAWN_CyberEnemy_C;                  // 0x0A08(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	struct FAttribModApplyData                    GlitchMod;                                         // 0x0A10(0x00A0)(Edit, BlueprintVisible, DisableEditOnInstance)
	bool                                          AllowAutoSpin;                                     // 0x0AB0(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          IsSpinningAtTargetRate;                            // 0x0AB1(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          UseCustomSpinRate;                                 // 0x0AB2(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_AB3[0x1];                                      // 0x0AB3(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CustomSpinRate;                                    // 0x0AB4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CurrentSpinRate;                                   // 0x0AB8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          IsInAutoSpinTransition;                            // 0x0ABC(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_ABD[0x3];                                      // 0x0ABD(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         AutoSpinTargetRotation;                            // 0x0AC0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         AutoSpinStartTimestamp;                            // 0x0AC4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         AutoSpinRampRate;                                  // 0x0AC8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_ACC[0x4];                                      // 0x0ACC(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTimerHandle                           TIMER_SetAutoSpinTarget;                           // 0x0AD0(0x0008)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	bool                                          IsManeuverFacingWall;                              // 0x0AD8(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          IsDomainEnemy;                                     // 0x0AD9(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_ADA[0x6];                                      // 0x0ADA(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class AEnemyMovementCurve_C*                  DomainMovementCurve;                               // 0x0AE0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UNiagaraSystem*                         IceShieldBreakEffect;                              // 0x0AE8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

public:
	void ExecuteUbergraph_PAWN_CyberEnemy(int32 EntryPoint);
	void ReceiveBeginPlay();
	void ReceiveTick(float DeltaSeconds);
	void UpdateRotation();
	void EVENT_OnFinishedFadingOut();
	void SetCustomSpinEnabled(bool CustomSpinEnabled, float SpinRate);
	void EVENT_SetRandomRotation();
	void SeekNewSpawnLocation();
	void EVENT_FoundNewSpawnLocation(bool bResult, TArray<struct FVector4>& WeightedWorldLocations);
	void ApplyIceShields();
	void UpdateIceShieldMeshes(bool State);
	void GetIceShieldSize(float* Result);
	void GetShieldAttachComponent(class USceneComponent** Component);
	void EVENT_OnShieldValueChanged(float CurrValue, float LastValue);
	void ReceiveEndPlay(EEndPlayReason EndPlayReason);
	void OnCharacterDied(class UOBJ_ImpactData_C* ImpactData, const struct FAttribDamageInstance& DamageInstance, class AActor* OtherActor, bool* Result);
	void InitializeCharacter(bool* Result);

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"PAWN_CyberEnemy_C">();
	}
	static class APAWN_CyberEnemy_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<APAWN_CyberEnemy_C>();
	}
};
static_assert(alignof(APAWN_CyberEnemy_C) == 0x000010, "Wrong alignment on APAWN_CyberEnemy_C");
static_assert(sizeof(APAWN_CyberEnemy_C) == 0x000AF0, "Wrong size on APAWN_CyberEnemy_C");
static_assert(offsetof(APAWN_CyberEnemy_C, UberGraphFrame_PAWN_CyberEnemy_C) == 0x000A08, "Member 'APAWN_CyberEnemy_C::UberGraphFrame_PAWN_CyberEnemy_C' has a wrong offset!");
static_assert(offsetof(APAWN_CyberEnemy_C, GlitchMod) == 0x000A10, "Member 'APAWN_CyberEnemy_C::GlitchMod' has a wrong offset!");
static_assert(offsetof(APAWN_CyberEnemy_C, AllowAutoSpin) == 0x000AB0, "Member 'APAWN_CyberEnemy_C::AllowAutoSpin' has a wrong offset!");
static_assert(offsetof(APAWN_CyberEnemy_C, IsSpinningAtTargetRate) == 0x000AB1, "Member 'APAWN_CyberEnemy_C::IsSpinningAtTargetRate' has a wrong offset!");
static_assert(offsetof(APAWN_CyberEnemy_C, UseCustomSpinRate) == 0x000AB2, "Member 'APAWN_CyberEnemy_C::UseCustomSpinRate' has a wrong offset!");
static_assert(offsetof(APAWN_CyberEnemy_C, CustomSpinRate) == 0x000AB4, "Member 'APAWN_CyberEnemy_C::CustomSpinRate' has a wrong offset!");
static_assert(offsetof(APAWN_CyberEnemy_C, CurrentSpinRate) == 0x000AB8, "Member 'APAWN_CyberEnemy_C::CurrentSpinRate' has a wrong offset!");
static_assert(offsetof(APAWN_CyberEnemy_C, IsInAutoSpinTransition) == 0x000ABC, "Member 'APAWN_CyberEnemy_C::IsInAutoSpinTransition' has a wrong offset!");
static_assert(offsetof(APAWN_CyberEnemy_C, AutoSpinTargetRotation) == 0x000AC0, "Member 'APAWN_CyberEnemy_C::AutoSpinTargetRotation' has a wrong offset!");
static_assert(offsetof(APAWN_CyberEnemy_C, AutoSpinStartTimestamp) == 0x000AC4, "Member 'APAWN_CyberEnemy_C::AutoSpinStartTimestamp' has a wrong offset!");
static_assert(offsetof(APAWN_CyberEnemy_C, AutoSpinRampRate) == 0x000AC8, "Member 'APAWN_CyberEnemy_C::AutoSpinRampRate' has a wrong offset!");
static_assert(offsetof(APAWN_CyberEnemy_C, TIMER_SetAutoSpinTarget) == 0x000AD0, "Member 'APAWN_CyberEnemy_C::TIMER_SetAutoSpinTarget' has a wrong offset!");
static_assert(offsetof(APAWN_CyberEnemy_C, IsManeuverFacingWall) == 0x000AD8, "Member 'APAWN_CyberEnemy_C::IsManeuverFacingWall' has a wrong offset!");
static_assert(offsetof(APAWN_CyberEnemy_C, IsDomainEnemy) == 0x000AD9, "Member 'APAWN_CyberEnemy_C::IsDomainEnemy' has a wrong offset!");
static_assert(offsetof(APAWN_CyberEnemy_C, DomainMovementCurve) == 0x000AE0, "Member 'APAWN_CyberEnemy_C::DomainMovementCurve' has a wrong offset!");
static_assert(offsetof(APAWN_CyberEnemy_C, IceShieldBreakEffect) == 0x000AE8, "Member 'APAWN_CyberEnemy_C::IceShieldBreakEffect' has a wrong offset!");

}

