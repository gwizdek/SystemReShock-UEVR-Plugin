#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: LightTransitionManager

#include "Basic.hpp"

#include "Engine_structs.hpp"


namespace SDK::Params
{

// Function LightTransitionManager.LightTransitionManager_C.InitializeLightManager
// 0x0004 (0x0004 - 0x0000)
struct LightTransitionManager_C_InitializeLightManager final
{
public:
	bool                                          StartsOn;                                          // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Not_PreBool_ReturnValue;                  // 0x0001(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_TrySetLightState_Result;                  // 0x0002(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0003(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(LightTransitionManager_C_InitializeLightManager) == 0x000001, "Wrong alignment on LightTransitionManager_C_InitializeLightManager");
static_assert(sizeof(LightTransitionManager_C_InitializeLightManager) == 0x000004, "Wrong size on LightTransitionManager_C_InitializeLightManager");
static_assert(offsetof(LightTransitionManager_C_InitializeLightManager, StartsOn) == 0x000000, "Member 'LightTransitionManager_C_InitializeLightManager::StartsOn' has a wrong offset!");
static_assert(offsetof(LightTransitionManager_C_InitializeLightManager, CallFunc_Not_PreBool_ReturnValue) == 0x000001, "Member 'LightTransitionManager_C_InitializeLightManager::CallFunc_Not_PreBool_ReturnValue' has a wrong offset!");
static_assert(offsetof(LightTransitionManager_C_InitializeLightManager, CallFunc_TrySetLightState_Result) == 0x000002, "Member 'LightTransitionManager_C_InitializeLightManager::CallFunc_TrySetLightState_Result' has a wrong offset!");
static_assert(offsetof(LightTransitionManager_C_InitializeLightManager, CallFunc_IsValid_ReturnValue) == 0x000003, "Member 'LightTransitionManager_C_InitializeLightManager::CallFunc_IsValid_ReturnValue' has a wrong offset!");

// Function LightTransitionManager.LightTransitionManager_C.ToggleLightState
// 0x000C (0x000C - 0x0000)
struct LightTransitionManager_C_ToggleLightState final
{
public:
	float                                         InFlickerFrequency;                                // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         InDuration;                                        // 0x0004(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Not_PreBool_ReturnValue;                  // 0x0008(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_TrySetLightState_Result;                  // 0x0009(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(LightTransitionManager_C_ToggleLightState) == 0x000004, "Wrong alignment on LightTransitionManager_C_ToggleLightState");
static_assert(sizeof(LightTransitionManager_C_ToggleLightState) == 0x00000C, "Wrong size on LightTransitionManager_C_ToggleLightState");
static_assert(offsetof(LightTransitionManager_C_ToggleLightState, InFlickerFrequency) == 0x000000, "Member 'LightTransitionManager_C_ToggleLightState::InFlickerFrequency' has a wrong offset!");
static_assert(offsetof(LightTransitionManager_C_ToggleLightState, InDuration) == 0x000004, "Member 'LightTransitionManager_C_ToggleLightState::InDuration' has a wrong offset!");
static_assert(offsetof(LightTransitionManager_C_ToggleLightState, CallFunc_Not_PreBool_ReturnValue) == 0x000008, "Member 'LightTransitionManager_C_ToggleLightState::CallFunc_Not_PreBool_ReturnValue' has a wrong offset!");
static_assert(offsetof(LightTransitionManager_C_ToggleLightState, CallFunc_TrySetLightState_Result) == 0x000009, "Member 'LightTransitionManager_C_ToggleLightState::CallFunc_TrySetLightState_Result' has a wrong offset!");

// Function LightTransitionManager.LightTransitionManager_C.TrySetLightState
// 0x0050 (0x0050 - 0x0000)
struct LightTransitionManager_C_TrySetLightState final
{
public:
	bool                                          InState;                                           // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         InFlickerFrequency;                                // 0x0004(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         InDuration;                                        // 0x0008(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Result;                                            // 0x000C(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_D[0x3];                                        // 0x000D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_GetTransitionTimeRemaining_Result;        // 0x0010(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_FloatFloat_ReturnValue;              // 0x0014(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_15[0x3];                                       // 0x0015(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_Conv_BoolToFloat_ReturnValue;             // 0x0018(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_GetCustomPrimitiveDataFloat_ReturnValue;  // 0x001C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0020(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_21[0x3];                                       // 0x0021(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	TDelegate<void()>                             K2Node_CreateDelegate_OutputDelegate;              // 0x0024(0x0010)(ZeroConstructor, NoDestructor)
	uint8                                         Pad_34[0x4];                                       // 0x0034(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTimerHandle                           CallFunc_K2_SetTimerDelegate_ReturnValue;          // 0x0038(0x0008)(NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Greater_FloatFloat_ReturnValue;           // 0x0040(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsValid_ReturnValue_1;                    // 0x0041(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_42[0x2];                                       // 0x0042(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_GetGameTimeInSeconds_ReturnValue;         // 0x0044(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_NotEqual_BoolBool_ReturnValue;            // 0x0048(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(LightTransitionManager_C_TrySetLightState) == 0x000008, "Wrong alignment on LightTransitionManager_C_TrySetLightState");
static_assert(sizeof(LightTransitionManager_C_TrySetLightState) == 0x000050, "Wrong size on LightTransitionManager_C_TrySetLightState");
static_assert(offsetof(LightTransitionManager_C_TrySetLightState, InState) == 0x000000, "Member 'LightTransitionManager_C_TrySetLightState::InState' has a wrong offset!");
static_assert(offsetof(LightTransitionManager_C_TrySetLightState, InFlickerFrequency) == 0x000004, "Member 'LightTransitionManager_C_TrySetLightState::InFlickerFrequency' has a wrong offset!");
static_assert(offsetof(LightTransitionManager_C_TrySetLightState, InDuration) == 0x000008, "Member 'LightTransitionManager_C_TrySetLightState::InDuration' has a wrong offset!");
static_assert(offsetof(LightTransitionManager_C_TrySetLightState, Result) == 0x00000C, "Member 'LightTransitionManager_C_TrySetLightState::Result' has a wrong offset!");
static_assert(offsetof(LightTransitionManager_C_TrySetLightState, CallFunc_GetTransitionTimeRemaining_Result) == 0x000010, "Member 'LightTransitionManager_C_TrySetLightState::CallFunc_GetTransitionTimeRemaining_Result' has a wrong offset!");
static_assert(offsetof(LightTransitionManager_C_TrySetLightState, CallFunc_Less_FloatFloat_ReturnValue) == 0x000014, "Member 'LightTransitionManager_C_TrySetLightState::CallFunc_Less_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(LightTransitionManager_C_TrySetLightState, CallFunc_Conv_BoolToFloat_ReturnValue) == 0x000018, "Member 'LightTransitionManager_C_TrySetLightState::CallFunc_Conv_BoolToFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(LightTransitionManager_C_TrySetLightState, CallFunc_GetCustomPrimitiveDataFloat_ReturnValue) == 0x00001C, "Member 'LightTransitionManager_C_TrySetLightState::CallFunc_GetCustomPrimitiveDataFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(LightTransitionManager_C_TrySetLightState, CallFunc_IsValid_ReturnValue) == 0x000020, "Member 'LightTransitionManager_C_TrySetLightState::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(LightTransitionManager_C_TrySetLightState, K2Node_CreateDelegate_OutputDelegate) == 0x000024, "Member 'LightTransitionManager_C_TrySetLightState::K2Node_CreateDelegate_OutputDelegate' has a wrong offset!");
static_assert(offsetof(LightTransitionManager_C_TrySetLightState, CallFunc_K2_SetTimerDelegate_ReturnValue) == 0x000038, "Member 'LightTransitionManager_C_TrySetLightState::CallFunc_K2_SetTimerDelegate_ReturnValue' has a wrong offset!");
static_assert(offsetof(LightTransitionManager_C_TrySetLightState, CallFunc_Greater_FloatFloat_ReturnValue) == 0x000040, "Member 'LightTransitionManager_C_TrySetLightState::CallFunc_Greater_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(LightTransitionManager_C_TrySetLightState, CallFunc_IsValid_ReturnValue_1) == 0x000041, "Member 'LightTransitionManager_C_TrySetLightState::CallFunc_IsValid_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(LightTransitionManager_C_TrySetLightState, CallFunc_GetGameTimeInSeconds_ReturnValue) == 0x000044, "Member 'LightTransitionManager_C_TrySetLightState::CallFunc_GetGameTimeInSeconds_ReturnValue' has a wrong offset!");
static_assert(offsetof(LightTransitionManager_C_TrySetLightState, CallFunc_NotEqual_BoolBool_ReturnValue) == 0x000048, "Member 'LightTransitionManager_C_TrySetLightState::CallFunc_NotEqual_BoolBool_ReturnValue' has a wrong offset!");

// Function LightTransitionManager.LightTransitionManager_C.UpdateIntensity
// 0x0060 (0x0060 - 0x0000)
struct LightTransitionManager_C_UpdateIntensity final
{
public:
	float                                         Alpha;                                             // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         NewLightIntensity;                                 // 0x0004(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         TargetLightIntensity;                              // 0x0008(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         NewEmissiveIntensity;                              // 0x000C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         TargetEmissiveIntensity;                           // 0x0010(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<float>                                 K2Node_MakeArray_Array;                            // 0x0018(0x0010)(ConstParm, ReferenceParm)
	TArray<class UMeshComponent*>                 CallFunc_GetChildComponentsByClass_ReturnValue;    // 0x0028(0x0010)(ReferenceParm, ContainsInstancedReference)
	float                                         CallFunc_Lerp_ReturnValue;                         // 0x0038(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_FMax_ReturnValue;                         // 0x003C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Lerp_ReturnValue_1;                       // 0x0040(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_FMax_ReturnValue_1;                       // 0x0044(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0048(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsValid_ReturnValue_1;                    // 0x0049(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_4A[0x2];                                       // 0x004A(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Conv_BoolToInt_ReturnValue;               // 0x004C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Multiply_IntFloat_ReturnValue;            // 0x0050(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Conv_BoolToInt_ReturnValue_1;             // 0x0054(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Multiply_IntFloat_ReturnValue_1;          // 0x0058(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(LightTransitionManager_C_UpdateIntensity) == 0x000008, "Wrong alignment on LightTransitionManager_C_UpdateIntensity");
static_assert(sizeof(LightTransitionManager_C_UpdateIntensity) == 0x000060, "Wrong size on LightTransitionManager_C_UpdateIntensity");
static_assert(offsetof(LightTransitionManager_C_UpdateIntensity, Alpha) == 0x000000, "Member 'LightTransitionManager_C_UpdateIntensity::Alpha' has a wrong offset!");
static_assert(offsetof(LightTransitionManager_C_UpdateIntensity, NewLightIntensity) == 0x000004, "Member 'LightTransitionManager_C_UpdateIntensity::NewLightIntensity' has a wrong offset!");
static_assert(offsetof(LightTransitionManager_C_UpdateIntensity, TargetLightIntensity) == 0x000008, "Member 'LightTransitionManager_C_UpdateIntensity::TargetLightIntensity' has a wrong offset!");
static_assert(offsetof(LightTransitionManager_C_UpdateIntensity, NewEmissiveIntensity) == 0x00000C, "Member 'LightTransitionManager_C_UpdateIntensity::NewEmissiveIntensity' has a wrong offset!");
static_assert(offsetof(LightTransitionManager_C_UpdateIntensity, TargetEmissiveIntensity) == 0x000010, "Member 'LightTransitionManager_C_UpdateIntensity::TargetEmissiveIntensity' has a wrong offset!");
static_assert(offsetof(LightTransitionManager_C_UpdateIntensity, K2Node_MakeArray_Array) == 0x000018, "Member 'LightTransitionManager_C_UpdateIntensity::K2Node_MakeArray_Array' has a wrong offset!");
static_assert(offsetof(LightTransitionManager_C_UpdateIntensity, CallFunc_GetChildComponentsByClass_ReturnValue) == 0x000028, "Member 'LightTransitionManager_C_UpdateIntensity::CallFunc_GetChildComponentsByClass_ReturnValue' has a wrong offset!");
static_assert(offsetof(LightTransitionManager_C_UpdateIntensity, CallFunc_Lerp_ReturnValue) == 0x000038, "Member 'LightTransitionManager_C_UpdateIntensity::CallFunc_Lerp_ReturnValue' has a wrong offset!");
static_assert(offsetof(LightTransitionManager_C_UpdateIntensity, CallFunc_FMax_ReturnValue) == 0x00003C, "Member 'LightTransitionManager_C_UpdateIntensity::CallFunc_FMax_ReturnValue' has a wrong offset!");
static_assert(offsetof(LightTransitionManager_C_UpdateIntensity, CallFunc_Lerp_ReturnValue_1) == 0x000040, "Member 'LightTransitionManager_C_UpdateIntensity::CallFunc_Lerp_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(LightTransitionManager_C_UpdateIntensity, CallFunc_FMax_ReturnValue_1) == 0x000044, "Member 'LightTransitionManager_C_UpdateIntensity::CallFunc_FMax_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(LightTransitionManager_C_UpdateIntensity, CallFunc_IsValid_ReturnValue) == 0x000048, "Member 'LightTransitionManager_C_UpdateIntensity::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(LightTransitionManager_C_UpdateIntensity, CallFunc_IsValid_ReturnValue_1) == 0x000049, "Member 'LightTransitionManager_C_UpdateIntensity::CallFunc_IsValid_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(LightTransitionManager_C_UpdateIntensity, CallFunc_Conv_BoolToInt_ReturnValue) == 0x00004C, "Member 'LightTransitionManager_C_UpdateIntensity::CallFunc_Conv_BoolToInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(LightTransitionManager_C_UpdateIntensity, CallFunc_Multiply_IntFloat_ReturnValue) == 0x000050, "Member 'LightTransitionManager_C_UpdateIntensity::CallFunc_Multiply_IntFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(LightTransitionManager_C_UpdateIntensity, CallFunc_Conv_BoolToInt_ReturnValue_1) == 0x000054, "Member 'LightTransitionManager_C_UpdateIntensity::CallFunc_Conv_BoolToInt_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(LightTransitionManager_C_UpdateIntensity, CallFunc_Multiply_IntFloat_ReturnValue_1) == 0x000058, "Member 'LightTransitionManager_C_UpdateIntensity::CallFunc_Multiply_IntFloat_ReturnValue_1' has a wrong offset!");

// Function LightTransitionManager.LightTransitionManager_C.EVENT_OnUpdateLightIntensity
// 0x006C (0x006C - 0x0000)
struct LightTransitionManager_C_EVENT_OnUpdateLightIntensity final
{
public:
	float                                         TransitionAlpha;                                   // 0x0000(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         FlickerAlpha;                                      // 0x0004(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         TransitionProgress;                                // 0x0008(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         ElapsedTimeInState;                                // 0x000C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_ConditionalDestroyObject_ReturnValue;     // 0x0010(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0011(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Not_PreBool_ReturnValue;                  // 0x0012(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_13[0x1];                                       // 0x0013(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_GetElapsedTransitionTime_Result;          // 0x0014(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BooleanAND_ReturnValue;                   // 0x0018(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Greater_FloatFloat_ReturnValue;           // 0x0019(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_GreaterEqual_FloatFloat_ReturnValue;      // 0x001A(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_1B[0x1];                                       // 0x001B(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_Multiply_FloatFloat_ReturnValue;          // 0x001C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Ease_ReturnValue;                         // 0x0020(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_PerlinNoise1D_ReturnValue;                // 0x0024(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Multiply_FloatFloat_ReturnValue_1;        // 0x0028(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_FMax_ReturnValue;                         // 0x002C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_GreaterEqual_FloatFloat_ReturnValue_1;    // 0x0030(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_31[0x3];                                       // 0x0031(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         Temp_float_Variable;                               // 0x0034(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Ease_ReturnValue_1;                       // 0x0038(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Variable;                                // 0x003C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_3D[0x3];                                       // 0x003D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         K2Node_Select_Default;                             // 0x0040(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_GetPI_ReturnValue;                        // 0x0044(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Multiply_FloatFloat_ReturnValue_2;        // 0x0048(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Multiply_FloatFloat_ReturnValue_3;        // 0x004C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Divide_FloatFloat_ReturnValue;            // 0x0050(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Sin_ReturnValue;                          // 0x0054(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_FMin_ReturnValue;                         // 0x0058(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Add_FloatFloat_ReturnValue;               // 0x005C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_FMax_ReturnValue_1;                       // 0x0060(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Multiply_FloatFloat_ReturnValue_4;        // 0x0064(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Subtract_FloatFloat_ReturnValue;          // 0x0068(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(LightTransitionManager_C_EVENT_OnUpdateLightIntensity) == 0x000004, "Wrong alignment on LightTransitionManager_C_EVENT_OnUpdateLightIntensity");
static_assert(sizeof(LightTransitionManager_C_EVENT_OnUpdateLightIntensity) == 0x00006C, "Wrong size on LightTransitionManager_C_EVENT_OnUpdateLightIntensity");
static_assert(offsetof(LightTransitionManager_C_EVENT_OnUpdateLightIntensity, TransitionAlpha) == 0x000000, "Member 'LightTransitionManager_C_EVENT_OnUpdateLightIntensity::TransitionAlpha' has a wrong offset!");
static_assert(offsetof(LightTransitionManager_C_EVENT_OnUpdateLightIntensity, FlickerAlpha) == 0x000004, "Member 'LightTransitionManager_C_EVENT_OnUpdateLightIntensity::FlickerAlpha' has a wrong offset!");
static_assert(offsetof(LightTransitionManager_C_EVENT_OnUpdateLightIntensity, TransitionProgress) == 0x000008, "Member 'LightTransitionManager_C_EVENT_OnUpdateLightIntensity::TransitionProgress' has a wrong offset!");
static_assert(offsetof(LightTransitionManager_C_EVENT_OnUpdateLightIntensity, ElapsedTimeInState) == 0x00000C, "Member 'LightTransitionManager_C_EVENT_OnUpdateLightIntensity::ElapsedTimeInState' has a wrong offset!");
static_assert(offsetof(LightTransitionManager_C_EVENT_OnUpdateLightIntensity, CallFunc_ConditionalDestroyObject_ReturnValue) == 0x000010, "Member 'LightTransitionManager_C_EVENT_OnUpdateLightIntensity::CallFunc_ConditionalDestroyObject_ReturnValue' has a wrong offset!");
static_assert(offsetof(LightTransitionManager_C_EVENT_OnUpdateLightIntensity, CallFunc_IsValid_ReturnValue) == 0x000011, "Member 'LightTransitionManager_C_EVENT_OnUpdateLightIntensity::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(LightTransitionManager_C_EVENT_OnUpdateLightIntensity, CallFunc_Not_PreBool_ReturnValue) == 0x000012, "Member 'LightTransitionManager_C_EVENT_OnUpdateLightIntensity::CallFunc_Not_PreBool_ReturnValue' has a wrong offset!");
static_assert(offsetof(LightTransitionManager_C_EVENT_OnUpdateLightIntensity, CallFunc_GetElapsedTransitionTime_Result) == 0x000014, "Member 'LightTransitionManager_C_EVENT_OnUpdateLightIntensity::CallFunc_GetElapsedTransitionTime_Result' has a wrong offset!");
static_assert(offsetof(LightTransitionManager_C_EVENT_OnUpdateLightIntensity, CallFunc_BooleanAND_ReturnValue) == 0x000018, "Member 'LightTransitionManager_C_EVENT_OnUpdateLightIntensity::CallFunc_BooleanAND_ReturnValue' has a wrong offset!");
static_assert(offsetof(LightTransitionManager_C_EVENT_OnUpdateLightIntensity, CallFunc_Greater_FloatFloat_ReturnValue) == 0x000019, "Member 'LightTransitionManager_C_EVENT_OnUpdateLightIntensity::CallFunc_Greater_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(LightTransitionManager_C_EVENT_OnUpdateLightIntensity, CallFunc_GreaterEqual_FloatFloat_ReturnValue) == 0x00001A, "Member 'LightTransitionManager_C_EVENT_OnUpdateLightIntensity::CallFunc_GreaterEqual_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(LightTransitionManager_C_EVENT_OnUpdateLightIntensity, CallFunc_Multiply_FloatFloat_ReturnValue) == 0x00001C, "Member 'LightTransitionManager_C_EVENT_OnUpdateLightIntensity::CallFunc_Multiply_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(LightTransitionManager_C_EVENT_OnUpdateLightIntensity, CallFunc_Ease_ReturnValue) == 0x000020, "Member 'LightTransitionManager_C_EVENT_OnUpdateLightIntensity::CallFunc_Ease_ReturnValue' has a wrong offset!");
static_assert(offsetof(LightTransitionManager_C_EVENT_OnUpdateLightIntensity, CallFunc_PerlinNoise1D_ReturnValue) == 0x000024, "Member 'LightTransitionManager_C_EVENT_OnUpdateLightIntensity::CallFunc_PerlinNoise1D_ReturnValue' has a wrong offset!");
static_assert(offsetof(LightTransitionManager_C_EVENT_OnUpdateLightIntensity, CallFunc_Multiply_FloatFloat_ReturnValue_1) == 0x000028, "Member 'LightTransitionManager_C_EVENT_OnUpdateLightIntensity::CallFunc_Multiply_FloatFloat_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(LightTransitionManager_C_EVENT_OnUpdateLightIntensity, CallFunc_FMax_ReturnValue) == 0x00002C, "Member 'LightTransitionManager_C_EVENT_OnUpdateLightIntensity::CallFunc_FMax_ReturnValue' has a wrong offset!");
static_assert(offsetof(LightTransitionManager_C_EVENT_OnUpdateLightIntensity, CallFunc_GreaterEqual_FloatFloat_ReturnValue_1) == 0x000030, "Member 'LightTransitionManager_C_EVENT_OnUpdateLightIntensity::CallFunc_GreaterEqual_FloatFloat_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(LightTransitionManager_C_EVENT_OnUpdateLightIntensity, Temp_float_Variable) == 0x000034, "Member 'LightTransitionManager_C_EVENT_OnUpdateLightIntensity::Temp_float_Variable' has a wrong offset!");
static_assert(offsetof(LightTransitionManager_C_EVENT_OnUpdateLightIntensity, CallFunc_Ease_ReturnValue_1) == 0x000038, "Member 'LightTransitionManager_C_EVENT_OnUpdateLightIntensity::CallFunc_Ease_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(LightTransitionManager_C_EVENT_OnUpdateLightIntensity, Temp_bool_Variable) == 0x00003C, "Member 'LightTransitionManager_C_EVENT_OnUpdateLightIntensity::Temp_bool_Variable' has a wrong offset!");
static_assert(offsetof(LightTransitionManager_C_EVENT_OnUpdateLightIntensity, K2Node_Select_Default) == 0x000040, "Member 'LightTransitionManager_C_EVENT_OnUpdateLightIntensity::K2Node_Select_Default' has a wrong offset!");
static_assert(offsetof(LightTransitionManager_C_EVENT_OnUpdateLightIntensity, CallFunc_GetPI_ReturnValue) == 0x000044, "Member 'LightTransitionManager_C_EVENT_OnUpdateLightIntensity::CallFunc_GetPI_ReturnValue' has a wrong offset!");
static_assert(offsetof(LightTransitionManager_C_EVENT_OnUpdateLightIntensity, CallFunc_Multiply_FloatFloat_ReturnValue_2) == 0x000048, "Member 'LightTransitionManager_C_EVENT_OnUpdateLightIntensity::CallFunc_Multiply_FloatFloat_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(LightTransitionManager_C_EVENT_OnUpdateLightIntensity, CallFunc_Multiply_FloatFloat_ReturnValue_3) == 0x00004C, "Member 'LightTransitionManager_C_EVENT_OnUpdateLightIntensity::CallFunc_Multiply_FloatFloat_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(LightTransitionManager_C_EVENT_OnUpdateLightIntensity, CallFunc_Divide_FloatFloat_ReturnValue) == 0x000050, "Member 'LightTransitionManager_C_EVENT_OnUpdateLightIntensity::CallFunc_Divide_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(LightTransitionManager_C_EVENT_OnUpdateLightIntensity, CallFunc_Sin_ReturnValue) == 0x000054, "Member 'LightTransitionManager_C_EVENT_OnUpdateLightIntensity::CallFunc_Sin_ReturnValue' has a wrong offset!");
static_assert(offsetof(LightTransitionManager_C_EVENT_OnUpdateLightIntensity, CallFunc_FMin_ReturnValue) == 0x000058, "Member 'LightTransitionManager_C_EVENT_OnUpdateLightIntensity::CallFunc_FMin_ReturnValue' has a wrong offset!");
static_assert(offsetof(LightTransitionManager_C_EVENT_OnUpdateLightIntensity, CallFunc_Add_FloatFloat_ReturnValue) == 0x00005C, "Member 'LightTransitionManager_C_EVENT_OnUpdateLightIntensity::CallFunc_Add_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(LightTransitionManager_C_EVENT_OnUpdateLightIntensity, CallFunc_FMax_ReturnValue_1) == 0x000060, "Member 'LightTransitionManager_C_EVENT_OnUpdateLightIntensity::CallFunc_FMax_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(LightTransitionManager_C_EVENT_OnUpdateLightIntensity, CallFunc_Multiply_FloatFloat_ReturnValue_4) == 0x000064, "Member 'LightTransitionManager_C_EVENT_OnUpdateLightIntensity::CallFunc_Multiply_FloatFloat_ReturnValue_4' has a wrong offset!");
static_assert(offsetof(LightTransitionManager_C_EVENT_OnUpdateLightIntensity, CallFunc_Subtract_FloatFloat_ReturnValue) == 0x000068, "Member 'LightTransitionManager_C_EVENT_OnUpdateLightIntensity::CallFunc_Subtract_FloatFloat_ReturnValue' has a wrong offset!");

// Function LightTransitionManager.LightTransitionManager_C.SetAutoDestroy
// 0x0001 (0x0001 - 0x0000)
struct LightTransitionManager_C_SetAutoDestroy final
{
public:
	bool                                          State;                                             // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(LightTransitionManager_C_SetAutoDestroy) == 0x000001, "Wrong alignment on LightTransitionManager_C_SetAutoDestroy");
static_assert(sizeof(LightTransitionManager_C_SetAutoDestroy) == 0x000001, "Wrong size on LightTransitionManager_C_SetAutoDestroy");
static_assert(offsetof(LightTransitionManager_C_SetAutoDestroy, State) == 0x000000, "Member 'LightTransitionManager_C_SetAutoDestroy::State' has a wrong offset!");

// Function LightTransitionManager.LightTransitionManager_C.SetDefaultEmissiveIntensity
// 0x0030 (0x0030 - 0x0000)
struct LightTransitionManager_C_SetDefaultEmissiveIntensity final
{
public:
	float                                         Intensity;                                         // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Duration;                                          // 0x0004(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_FMax_ReturnValue;                         // 0x0008(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_GetGameTimeInSeconds_ReturnValue;         // 0x000C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TDelegate<void()>                             K2Node_CreateDelegate_OutputDelegate;              // 0x0010(0x0010)(ZeroConstructor, NoDestructor)
	struct FTimerHandle                           CallFunc_K2_SetTimerDelegate_ReturnValue;          // 0x0020(0x0008)(NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_K2_IsTimerActiveHandle_ReturnValue;       // 0x0028(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Not_PreBool_ReturnValue;                  // 0x0029(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(LightTransitionManager_C_SetDefaultEmissiveIntensity) == 0x000008, "Wrong alignment on LightTransitionManager_C_SetDefaultEmissiveIntensity");
static_assert(sizeof(LightTransitionManager_C_SetDefaultEmissiveIntensity) == 0x000030, "Wrong size on LightTransitionManager_C_SetDefaultEmissiveIntensity");
static_assert(offsetof(LightTransitionManager_C_SetDefaultEmissiveIntensity, Intensity) == 0x000000, "Member 'LightTransitionManager_C_SetDefaultEmissiveIntensity::Intensity' has a wrong offset!");
static_assert(offsetof(LightTransitionManager_C_SetDefaultEmissiveIntensity, Duration) == 0x000004, "Member 'LightTransitionManager_C_SetDefaultEmissiveIntensity::Duration' has a wrong offset!");
static_assert(offsetof(LightTransitionManager_C_SetDefaultEmissiveIntensity, CallFunc_FMax_ReturnValue) == 0x000008, "Member 'LightTransitionManager_C_SetDefaultEmissiveIntensity::CallFunc_FMax_ReturnValue' has a wrong offset!");
static_assert(offsetof(LightTransitionManager_C_SetDefaultEmissiveIntensity, CallFunc_GetGameTimeInSeconds_ReturnValue) == 0x00000C, "Member 'LightTransitionManager_C_SetDefaultEmissiveIntensity::CallFunc_GetGameTimeInSeconds_ReturnValue' has a wrong offset!");
static_assert(offsetof(LightTransitionManager_C_SetDefaultEmissiveIntensity, K2Node_CreateDelegate_OutputDelegate) == 0x000010, "Member 'LightTransitionManager_C_SetDefaultEmissiveIntensity::K2Node_CreateDelegate_OutputDelegate' has a wrong offset!");
static_assert(offsetof(LightTransitionManager_C_SetDefaultEmissiveIntensity, CallFunc_K2_SetTimerDelegate_ReturnValue) == 0x000020, "Member 'LightTransitionManager_C_SetDefaultEmissiveIntensity::CallFunc_K2_SetTimerDelegate_ReturnValue' has a wrong offset!");
static_assert(offsetof(LightTransitionManager_C_SetDefaultEmissiveIntensity, CallFunc_K2_IsTimerActiveHandle_ReturnValue) == 0x000028, "Member 'LightTransitionManager_C_SetDefaultEmissiveIntensity::CallFunc_K2_IsTimerActiveHandle_ReturnValue' has a wrong offset!");
static_assert(offsetof(LightTransitionManager_C_SetDefaultEmissiveIntensity, CallFunc_Not_PreBool_ReturnValue) == 0x000029, "Member 'LightTransitionManager_C_SetDefaultEmissiveIntensity::CallFunc_Not_PreBool_ReturnValue' has a wrong offset!");

// Function LightTransitionManager.LightTransitionManager_C.GetTransitionTimeRemaining
// 0x0010 (0x0010 - 0x0000)
struct LightTransitionManager_C_GetTransitionTimeRemaining final
{
public:
	float                                         Result;                                            // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_GetElapsedTransitionTime_Result;          // 0x0004(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Subtract_FloatFloat_ReturnValue;          // 0x0008(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_FMax_ReturnValue;                         // 0x000C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(LightTransitionManager_C_GetTransitionTimeRemaining) == 0x000004, "Wrong alignment on LightTransitionManager_C_GetTransitionTimeRemaining");
static_assert(sizeof(LightTransitionManager_C_GetTransitionTimeRemaining) == 0x000010, "Wrong size on LightTransitionManager_C_GetTransitionTimeRemaining");
static_assert(offsetof(LightTransitionManager_C_GetTransitionTimeRemaining, Result) == 0x000000, "Member 'LightTransitionManager_C_GetTransitionTimeRemaining::Result' has a wrong offset!");
static_assert(offsetof(LightTransitionManager_C_GetTransitionTimeRemaining, CallFunc_GetElapsedTransitionTime_Result) == 0x000004, "Member 'LightTransitionManager_C_GetTransitionTimeRemaining::CallFunc_GetElapsedTransitionTime_Result' has a wrong offset!");
static_assert(offsetof(LightTransitionManager_C_GetTransitionTimeRemaining, CallFunc_Subtract_FloatFloat_ReturnValue) == 0x000008, "Member 'LightTransitionManager_C_GetTransitionTimeRemaining::CallFunc_Subtract_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(LightTransitionManager_C_GetTransitionTimeRemaining, CallFunc_FMax_ReturnValue) == 0x00000C, "Member 'LightTransitionManager_C_GetTransitionTimeRemaining::CallFunc_FMax_ReturnValue' has a wrong offset!");

// Function LightTransitionManager.LightTransitionManager_C.GetElapsedTransitionTime
// 0x000C (0x000C - 0x0000)
struct LightTransitionManager_C_GetElapsedTransitionTime final
{
public:
	float                                         Result;                                            // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_GetGameTimeInSeconds_ReturnValue;         // 0x0004(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Subtract_FloatFloat_ReturnValue;          // 0x0008(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(LightTransitionManager_C_GetElapsedTransitionTime) == 0x000004, "Wrong alignment on LightTransitionManager_C_GetElapsedTransitionTime");
static_assert(sizeof(LightTransitionManager_C_GetElapsedTransitionTime) == 0x00000C, "Wrong size on LightTransitionManager_C_GetElapsedTransitionTime");
static_assert(offsetof(LightTransitionManager_C_GetElapsedTransitionTime, Result) == 0x000000, "Member 'LightTransitionManager_C_GetElapsedTransitionTime::Result' has a wrong offset!");
static_assert(offsetof(LightTransitionManager_C_GetElapsedTransitionTime, CallFunc_GetGameTimeInSeconds_ReturnValue) == 0x000004, "Member 'LightTransitionManager_C_GetElapsedTransitionTime::CallFunc_GetGameTimeInSeconds_ReturnValue' has a wrong offset!");
static_assert(offsetof(LightTransitionManager_C_GetElapsedTransitionTime, CallFunc_Subtract_FloatFloat_ReturnValue) == 0x000008, "Member 'LightTransitionManager_C_GetElapsedTransitionTime::CallFunc_Subtract_FloatFloat_ReturnValue' has a wrong offset!");

}

