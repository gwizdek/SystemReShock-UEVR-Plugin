#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: COMP_WirePuzzle_Cell_Base

#include "Basic.hpp"

#include "COMP_WirePuzzle_Cell_Base_classes.hpp"
#include "COMP_WirePuzzle_Cell_Base_parameters.hpp"


namespace SDK
{

// Function COMP_WirePuzzle_Cell_Base.COMP_WirePuzzle_Cell_Base_C.ExecuteUbergraph_COMP_WirePuzzle_Cell_Base
// (Final, UbergraphFunction)
// Parameters:
// int32                                   EntryPoint                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UCOMP_WirePuzzle_Cell_Base_C::ExecuteUbergraph_COMP_WirePuzzle_Cell_Base(int32 EntryPoint)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("COMP_WirePuzzle_Cell_Base_C", "ExecuteUbergraph_COMP_WirePuzzle_Cell_Base");

	Params::COMP_WirePuzzle_Cell_Base_C_ExecuteUbergraph_COMP_WirePuzzle_Cell_Base Parms{};

	Parms.EntryPoint = EntryPoint;

	UObject::ProcessEvent(Func, &Parms);
}


// Function COMP_WirePuzzle_Cell_Base.COMP_WirePuzzle_Cell_Base_C.ReceiveTick
// (Event, Public, BlueprintEvent)
// Parameters:
// float                                   DeltaSeconds                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UCOMP_WirePuzzle_Cell_Base_C::ReceiveTick(float DeltaSeconds)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("COMP_WirePuzzle_Cell_Base_C", "ReceiveTick");

	Params::COMP_WirePuzzle_Cell_Base_C_ReceiveTick Parms{};

	Parms.DeltaSeconds = DeltaSeconds;

	UObject::ProcessEvent(Func, &Parms);
}


// Function COMP_WirePuzzle_Cell_Base.COMP_WirePuzzle_Cell_Base_C.ReceiveBeginPlay
// (Event, Public, BlueprintEvent)

void UCOMP_WirePuzzle_Cell_Base_C::ReceiveBeginPlay()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("COMP_WirePuzzle_Cell_Base_C", "ReceiveBeginPlay");

	UObject::ProcessEvent(Func, nullptr);
}


// Function COMP_WirePuzzle_Cell_Base.COMP_WirePuzzle_Cell_Base_C.InitializeCell
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)

void UCOMP_WirePuzzle_Cell_Base_C::InitializeCell()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("COMP_WirePuzzle_Cell_Base_C", "InitializeCell");

	UObject::ProcessEvent(Func, nullptr);
}


// Function COMP_WirePuzzle_Cell_Base.COMP_WirePuzzle_Cell_Base_C.InitializeSocketsAndTraces
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// struct FSTRUCT_WirePuzzle_CellData      InitialCellData                                        (BlueprintVisible, BlueprintReadOnly, Parm, HasGetValueTypeHash)

void UCOMP_WirePuzzle_Cell_Base_C::InitializeSocketsAndTraces(const struct FSTRUCT_WirePuzzle_CellData& InitialCellData)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("COMP_WirePuzzle_Cell_Base_C", "InitializeSocketsAndTraces");

	Params::COMP_WirePuzzle_Cell_Base_C_InitializeSocketsAndTraces Parms{};

	Parms.InitialCellData = std::move(InitialCellData);

	UObject::ProcessEvent(Func, &Parms);
}


// Function COMP_WirePuzzle_Cell_Base.COMP_WirePuzzle_Cell_Base_C.MirrorSlot
// (Protected, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// int32                                   Slot                                                   (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// int32                                   Result                                                 (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UCOMP_WirePuzzle_Cell_Base_C::MirrorSlot(int32 Slot, int32* Result)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("COMP_WirePuzzle_Cell_Base_C", "MirrorSlot");

	Params::COMP_WirePuzzle_Cell_Base_C_MirrorSlot Parms{};

	Parms.Slot = Slot;

	UObject::ProcessEvent(Func, &Parms);

	if (Result != nullptr)
		*Result = Parms.Result;
}


// Function COMP_WirePuzzle_Cell_Base.COMP_WirePuzzle_Cell_Base_C.InteractWithCell
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)

void UCOMP_WirePuzzle_Cell_Base_C::InteractWithCell()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("COMP_WirePuzzle_Cell_Base_C", "InteractWithCell");

	UObject::ProcessEvent(Func, nullptr);
}


// Function COMP_WirePuzzle_Cell_Base.COMP_WirePuzzle_Cell_Base_C.SetTargetPower
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// int32                                   Socket                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// int32                                   IncomingPowerLevel                                     (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    Result                                                 (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void UCOMP_WirePuzzle_Cell_Base_C::SetTargetPower(int32 Socket, int32 IncomingPowerLevel, bool* Result)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("COMP_WirePuzzle_Cell_Base_C", "SetTargetPower");

	Params::COMP_WirePuzzle_Cell_Base_C_SetTargetPower Parms{};

	Parms.Socket = Socket;
	Parms.IncomingPowerLevel = IncomingPowerLevel;

	UObject::ProcessEvent(Func, &Parms);

	if (Result != nullptr)
		*Result = Parms.Result;
}


// Function COMP_WirePuzzle_Cell_Base.COMP_WirePuzzle_Cell_Base_C.UpdateCellPower
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// float                                   DeltaSeconds                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UCOMP_WirePuzzle_Cell_Base_C::UpdateCellPower(float DeltaSeconds)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("COMP_WirePuzzle_Cell_Base_C", "UpdateCellPower");

	Params::COMP_WirePuzzle_Cell_Base_C_UpdateCellPower Parms{};

	Parms.DeltaSeconds = DeltaSeconds;

	UObject::ProcessEvent(Func, &Parms);
}


// Function COMP_WirePuzzle_Cell_Base.COMP_WirePuzzle_Cell_Base_C.MirrorTrace
// (Protected, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// struct FIntPoint                        Trace                                                  (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FIntPoint                        MirroredTrace                                          (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UCOMP_WirePuzzle_Cell_Base_C::MirrorTrace(const struct FIntPoint& Trace, struct FIntPoint* MirroredTrace)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("COMP_WirePuzzle_Cell_Base_C", "MirrorTrace");

	Params::COMP_WirePuzzle_Cell_Base_C_MirrorTrace Parms{};

	Parms.Trace = std::move(Trace);

	UObject::ProcessEvent(Func, &Parms);

	if (MirroredTrace != nullptr)
		*MirroredTrace = std::move(Parms.MirroredTrace);
}


// Function COMP_WirePuzzle_Cell_Base.COMP_WirePuzzle_Cell_Base_C.RotateSocket
// (Protected, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// int32                                   Socket                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// int32                                   Rotations                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// int32                                   RotatedSocket                                          (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UCOMP_WirePuzzle_Cell_Base_C::RotateSocket(int32 Socket, int32 Rotations, int32* RotatedSocket)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("COMP_WirePuzzle_Cell_Base_C", "RotateSocket");

	Params::COMP_WirePuzzle_Cell_Base_C_RotateSocket Parms{};

	Parms.Socket = Socket;
	Parms.Rotations = Rotations;

	UObject::ProcessEvent(Func, &Parms);

	if (RotatedSocket != nullptr)
		*RotatedSocket = Parms.RotatedSocket;
}


// Function COMP_WirePuzzle_Cell_Base.COMP_WirePuzzle_Cell_Base_C.RotateTrace
// (Protected, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// struct FIntPoint                        Trace                                                  (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// int32                                   Rotations                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FIntPoint                        RotatedTrace                                           (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UCOMP_WirePuzzle_Cell_Base_C::RotateTrace(const struct FIntPoint& Trace, int32 Rotations, struct FIntPoint* RotatedTrace)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("COMP_WirePuzzle_Cell_Base_C", "RotateTrace");

	Params::COMP_WirePuzzle_Cell_Base_C_RotateTrace Parms{};

	Parms.Trace = std::move(Trace);
	Parms.Rotations = Rotations;

	UObject::ProcessEvent(Func, &Parms);

	if (RotatedTrace != nullptr)
		*RotatedTrace = std::move(Parms.RotatedTrace);
}


// Function COMP_WirePuzzle_Cell_Base.COMP_WirePuzzle_Cell_Base_C.GetSocketDirection
// (Protected, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// int32                                   Socket                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// ENUM_CardinalDirection                  Direction                                              (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UCOMP_WirePuzzle_Cell_Base_C::GetSocketDirection(int32 Socket, ENUM_CardinalDirection* Direction)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("COMP_WirePuzzle_Cell_Base_C", "GetSocketDirection");

	Params::COMP_WirePuzzle_Cell_Base_C_GetSocketDirection Parms{};

	Parms.Socket = Socket;

	UObject::ProcessEvent(Func, &Parms);

	if (Direction != nullptr)
		*Direction = Parms.Direction;
}


// Function COMP_WirePuzzle_Cell_Base.COMP_WirePuzzle_Cell_Base_C.GetOppositeSocket
// (Protected, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// int32                                   Source                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// int32                                   Opposite                                               (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UCOMP_WirePuzzle_Cell_Base_C::GetOppositeSocket(int32 Source, int32* Opposite)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("COMP_WirePuzzle_Cell_Base_C", "GetOppositeSocket");

	Params::COMP_WirePuzzle_Cell_Base_C_GetOppositeSocket Parms{};

	Parms.Source = Source;

	UObject::ProcessEvent(Func, &Parms);

	if (Opposite != nullptr)
		*Opposite = Parms.Opposite;
}


// Function COMP_WirePuzzle_Cell_Base.COMP_WirePuzzle_Cell_Base_C.UpdateTraceProgress
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// int32                                   SourceSocket                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FIntPoint                        Trace                                                  (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// float                                   DeltaSeconds                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    IsFinished                                             (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void UCOMP_WirePuzzle_Cell_Base_C::UpdateTraceProgress(int32 SourceSocket, const struct FIntPoint& Trace, float DeltaSeconds, bool* IsFinished)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("COMP_WirePuzzle_Cell_Base_C", "UpdateTraceProgress");

	Params::COMP_WirePuzzle_Cell_Base_C_UpdateTraceProgress Parms{};

	Parms.SourceSocket = SourceSocket;
	Parms.Trace = std::move(Trace);
	Parms.DeltaSeconds = DeltaSeconds;

	UObject::ProcessEvent(Func, &Parms);

	if (IsFinished != nullptr)
		*IsFinished = Parms.IsFinished;
}


// Function COMP_WirePuzzle_Cell_Base.COMP_WirePuzzle_Cell_Base_C.DoesAnyThroughputContainSocket
// (Protected, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// int32                                   Socket                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    Result                                                 (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void UCOMP_WirePuzzle_Cell_Base_C::DoesAnyThroughputContainSocket(int32 Socket, bool* Result)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("COMP_WirePuzzle_Cell_Base_C", "DoesAnyThroughputContainSocket");

	Params::COMP_WirePuzzle_Cell_Base_C_DoesAnyThroughputContainSocket Parms{};

	Parms.Socket = Socket;

	UObject::ProcessEvent(Func, &Parms);

	if (Result != nullptr)
		*Result = Parms.Result;
}


// Function COMP_WirePuzzle_Cell_Base.COMP_WirePuzzle_Cell_Base_C.GetThroughputContainingSocket
// (Protected, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// int32                                   Socket                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FIntPoint                        Trace                                                  (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UCOMP_WirePuzzle_Cell_Base_C::GetThroughputContainingSocket(int32 Socket, struct FIntPoint* Trace)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("COMP_WirePuzzle_Cell_Base_C", "GetThroughputContainingSocket");

	Params::COMP_WirePuzzle_Cell_Base_C_GetThroughputContainingSocket Parms{};

	Parms.Socket = Socket;

	UObject::ProcessEvent(Func, &Parms);

	if (Trace != nullptr)
		*Trace = std::move(Parms.Trace);
}


// Function COMP_WirePuzzle_Cell_Base.COMP_WirePuzzle_Cell_Base_C.CreateInteractiveParts
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)

void UCOMP_WirePuzzle_Cell_Base_C::CreateInteractiveParts()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("COMP_WirePuzzle_Cell_Base_C", "CreateInteractiveParts");

	UObject::ProcessEvent(Func, nullptr);
}


// Function COMP_WirePuzzle_Cell_Base.COMP_WirePuzzle_Cell_Base_C.GetDirectionToSocket
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// int32                                   Socket                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// ENUM_CardinalDirection                  Direction                                              (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UCOMP_WirePuzzle_Cell_Base_C::GetDirectionToSocket(int32 Socket, ENUM_CardinalDirection* Direction)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("COMP_WirePuzzle_Cell_Base_C", "GetDirectionToSocket");

	Params::COMP_WirePuzzle_Cell_Base_C_GetDirectionToSocket Parms{};

	Parms.Socket = Socket;

	UObject::ProcessEvent(Func, &Parms);

	if (Direction != nullptr)
		*Direction = Parms.Direction;
}


// Function COMP_WirePuzzle_Cell_Base.COMP_WirePuzzle_Cell_Base_C.PropagatePowerState
// (Protected, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// int32                                   Socket                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// int32                                   PowerLevel                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    Result                                                 (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void UCOMP_WirePuzzle_Cell_Base_C::PropagatePowerState(int32 Socket, int32 PowerLevel, bool* Result)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("COMP_WirePuzzle_Cell_Base_C", "PropagatePowerState");

	Params::COMP_WirePuzzle_Cell_Base_C_PropagatePowerState Parms{};

	Parms.Socket = Socket;
	Parms.PowerLevel = PowerLevel;

	UObject::ProcessEvent(Func, &Parms);

	if (Result != nullptr)
		*Result = Parms.Result;
}


// Function COMP_WirePuzzle_Cell_Base.COMP_WirePuzzle_Cell_Base_C.GetTotalInputPowerLevel
// (Protected, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// int32                                   PowerLevel                                             (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UCOMP_WirePuzzle_Cell_Base_C::GetTotalInputPowerLevel(int32* PowerLevel)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("COMP_WirePuzzle_Cell_Base_C", "GetTotalInputPowerLevel");

	Params::COMP_WirePuzzle_Cell_Base_C_GetTotalInputPowerLevel Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (PowerLevel != nullptr)
		*PowerLevel = Parms.PowerLevel;
}


// Function COMP_WirePuzzle_Cell_Base.COMP_WirePuzzle_Cell_Base_C.EVENT_OnPowerLevelChanged
// (Protected, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// int32                                   TotalPowerLevel                                        (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UCOMP_WirePuzzle_Cell_Base_C::EVENT_OnPowerLevelChanged(int32 TotalPowerLevel)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("COMP_WirePuzzle_Cell_Base_C", "EVENT_OnPowerLevelChanged");

	Params::COMP_WirePuzzle_Cell_Base_C_EVENT_OnPowerLevelChanged Parms{};

	Parms.TotalPowerLevel = TotalPowerLevel;

	UObject::ProcessEvent(Func, &Parms);
}


// Function COMP_WirePuzzle_Cell_Base.COMP_WirePuzzle_Cell_Base_C.SetPrimitiveDataPowerLevel
// (Private, BlueprintCallable, BlueprintEvent)
// Parameters:
// int32                                   LocalPower                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UCOMP_WirePuzzle_Cell_Base_C::SetPrimitiveDataPowerLevel(int32 LocalPower)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("COMP_WirePuzzle_Cell_Base_C", "SetPrimitiveDataPowerLevel");

	Params::COMP_WirePuzzle_Cell_Base_C_SetPrimitiveDataPowerLevel Parms{};

	Parms.LocalPower = LocalPower;

	UObject::ProcessEvent(Func, &Parms);
}


// Function COMP_WirePuzzle_Cell_Base.COMP_WirePuzzle_Cell_Base_C.GetEnabledOutputSockets
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    AlternateValue                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// TArray<int32>                           InitialEnabledOutputSockets_0                          (Parm, OutParm)

void UCOMP_WirePuzzle_Cell_Base_C::GetEnabledOutputSockets(bool AlternateValue, TArray<int32>* InitialEnabledOutputSockets_0)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("COMP_WirePuzzle_Cell_Base_C", "GetEnabledOutputSockets");

	Params::COMP_WirePuzzle_Cell_Base_C_GetEnabledOutputSockets Parms{};

	Parms.AlternateValue = AlternateValue;

	UObject::ProcessEvent(Func, &Parms);

	if (InitialEnabledOutputSockets_0 != nullptr)
		*InitialEnabledOutputSockets_0 = std::move(Parms.InitialEnabledOutputSockets_0);
}


// Function COMP_WirePuzzle_Cell_Base.COMP_WirePuzzle_Cell_Base_C.GetUVCellIndexByTrace
// (Private, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// struct FIntPoint                        Trace                                                  (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// int32                                   Index_0                                                (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UCOMP_WirePuzzle_Cell_Base_C::GetUVCellIndexByTrace(const struct FIntPoint& Trace, int32* Index_0)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("COMP_WirePuzzle_Cell_Base_C", "GetUVCellIndexByTrace");

	Params::COMP_WirePuzzle_Cell_Base_C_GetUVCellIndexByTrace Parms{};

	Parms.Trace = std::move(Trace);

	UObject::ProcessEvent(Func, &Parms);

	if (Index_0 != nullptr)
		*Index_0 = Parms.Index_0;
}


// Function COMP_WirePuzzle_Cell_Base.COMP_WirePuzzle_Cell_Base_C.Get UVBounds from Cell Index
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// int32                                   CellIndex                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FBox2D                           Bounds                                                 (Parm, OutParm, ZeroConstructor, NoDestructor)

void UCOMP_WirePuzzle_Cell_Base_C::Get_UVBounds_from_Cell_Index(int32 CellIndex, struct FBox2D* Bounds)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("COMP_WirePuzzle_Cell_Base_C", "Get UVBounds from Cell Index");

	Params::COMP_WirePuzzle_Cell_Base_C_Get_UVBounds_from_Cell_Index Parms{};

	Parms.CellIndex = CellIndex;

	UObject::ProcessEvent(Func, &Parms);

	if (Bounds != nullptr)
		*Bounds = std::move(Parms.Bounds);
}


// Function COMP_WirePuzzle_Cell_Base.COMP_WirePuzzle_Cell_Base_C.GetIsTraceForward
// (Private, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// struct FIntPoint                        Trace                                                  (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// int32                                   PoweredSocket                                          (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    Result                                                 (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void UCOMP_WirePuzzle_Cell_Base_C::GetIsTraceForward(const struct FIntPoint& Trace, int32 PoweredSocket, bool* Result)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("COMP_WirePuzzle_Cell_Base_C", "GetIsTraceForward");

	Params::COMP_WirePuzzle_Cell_Base_C_GetIsTraceForward Parms{};

	Parms.Trace = std::move(Trace);
	Parms.PoweredSocket = PoweredSocket;

	UObject::ProcessEvent(Func, &Parms);

	if (Result != nullptr)
		*Result = Parms.Result;
}


// Function COMP_WirePuzzle_Cell_Base.COMP_WirePuzzle_Cell_Base_C.InteractWithWireSource
// (Public, BlueprintCallable, BlueprintEvent)

void UCOMP_WirePuzzle_Cell_Base_C::InteractWithWireSource()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("COMP_WirePuzzle_Cell_Base_C", "InteractWithWireSource");

	UObject::ProcessEvent(Func, nullptr);
}


// Function COMP_WirePuzzle_Cell_Base.COMP_WirePuzzle_Cell_Base_C.InteractWithWireTarget
// (Public, BlueprintCallable, BlueprintEvent)

void UCOMP_WirePuzzle_Cell_Base_C::InteractWithWireTarget()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("COMP_WirePuzzle_Cell_Base_C", "InteractWithWireTarget");

	UObject::ProcessEvent(Func, nullptr);
}


// Function COMP_WirePuzzle_Cell_Base.COMP_WirePuzzle_Cell_Base_C.TryConnectToCell
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// class UCOMP_WirePuzzle_Cell_Base_C*     CellToConnect                                          (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    IsInitialization                                       (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// bool                                    Result                                                 (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void UCOMP_WirePuzzle_Cell_Base_C::TryConnectToCell(class UCOMP_WirePuzzle_Cell_Base_C* CellToConnect, bool IsInitialization, bool* Result)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("COMP_WirePuzzle_Cell_Base_C", "TryConnectToCell");

	Params::COMP_WirePuzzle_Cell_Base_C_TryConnectToCell Parms{};

	Parms.CellToConnect = CellToConnect;
	Parms.IsInitialization = IsInitialization;

	UObject::ProcessEvent(Func, &Parms);

	if (Result != nullptr)
		*Result = Parms.Result;
}


// Function COMP_WirePuzzle_Cell_Base.COMP_WirePuzzle_Cell_Base_C.TryDisconnectFromCell
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// class UCOMP_WirePuzzle_Cell_Base_C*     DisconnecteeCell                                       (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    Result                                                 (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void UCOMP_WirePuzzle_Cell_Base_C::TryDisconnectFromCell(class UCOMP_WirePuzzle_Cell_Base_C* DisconnecteeCell, bool* Result)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("COMP_WirePuzzle_Cell_Base_C", "TryDisconnectFromCell");

	Params::COMP_WirePuzzle_Cell_Base_C_TryDisconnectFromCell Parms{};

	Parms.DisconnecteeCell = DisconnecteeCell;

	UObject::ProcessEvent(Func, &Parms);

	if (Result != nullptr)
		*Result = Parms.Result;
}


// Function COMP_WirePuzzle_Cell_Base.COMP_WirePuzzle_Cell_Base_C.GetConnectedCell
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// class UCOMP_WirePuzzle_Cell_Base_C*     Cell                                                   (Parm, OutParm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UCOMP_WirePuzzle_Cell_Base_C::GetConnectedCell(class UCOMP_WirePuzzle_Cell_Base_C** Cell)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("COMP_WirePuzzle_Cell_Base_C", "GetConnectedCell");

	Params::COMP_WirePuzzle_Cell_Base_C_GetConnectedCell Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (Cell != nullptr)
		*Cell = Parms.Cell;
}


// Function COMP_WirePuzzle_Cell_Base.COMP_WirePuzzle_Cell_Base_C.GetWirePlug
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// class AWIREPUZZLE_WirePlug_C*           Plug                                                   (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash)

void UCOMP_WirePuzzle_Cell_Base_C::GetWirePlug(class AWIREPUZZLE_WirePlug_C** Plug)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("COMP_WirePuzzle_Cell_Base_C", "GetWirePlug");

	Params::COMP_WirePuzzle_Cell_Base_C_GetWirePlug Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (Plug != nullptr)
		*Plug = Parms.Plug;
}


// Function COMP_WirePuzzle_Cell_Base.COMP_WirePuzzle_Cell_Base_C.EVENT_OnPlugFinishedExtending
// (Private, BlueprintCallable, BlueprintEvent)

void UCOMP_WirePuzzle_Cell_Base_C::EVENT_OnPlugFinishedExtending()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("COMP_WirePuzzle_Cell_Base_C", "EVENT_OnPlugFinishedExtending");

	UObject::ProcessEvent(Func, nullptr);
}


// Function COMP_WirePuzzle_Cell_Base.COMP_WirePuzzle_Cell_Base_C.ComputeConnectionOffset
// (Private, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// struct FVector2D                        Result                                                 (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UCOMP_WirePuzzle_Cell_Base_C::ComputeConnectionOffset(struct FVector2D* Result)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("COMP_WirePuzzle_Cell_Base_C", "ComputeConnectionOffset");

	Params::COMP_WirePuzzle_Cell_Base_C_ComputeConnectionOffset Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (Result != nullptr)
		*Result = std::move(Parms.Result);
}


// Function COMP_WirePuzzle_Cell_Base.COMP_WirePuzzle_Cell_Base_C.EVENT_OnPlugFinishedConnecting
// (Private, BlueprintCallable, BlueprintEvent)

void UCOMP_WirePuzzle_Cell_Base_C::EVENT_OnPlugFinishedConnecting()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("COMP_WirePuzzle_Cell_Base_C", "EVENT_OnPlugFinishedConnecting");

	UObject::ProcessEvent(Func, nullptr);
}


// Function COMP_WirePuzzle_Cell_Base.COMP_WirePuzzle_Cell_Base_C.GetPowerMaterialGroupIndex
// (Private, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// int32                                   TrackMaterialIndex                                     (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// int32                                   Index_0                                                (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UCOMP_WirePuzzle_Cell_Base_C::GetPowerMaterialGroupIndex(int32 TrackMaterialIndex, int32* Index_0)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("COMP_WirePuzzle_Cell_Base_C", "GetPowerMaterialGroupIndex");

	Params::COMP_WirePuzzle_Cell_Base_C_GetPowerMaterialGroupIndex Parms{};

	Parms.TrackMaterialIndex = TrackMaterialIndex;

	UObject::ProcessEvent(Func, &Parms);

	if (Index_0 != nullptr)
		*Index_0 = Parms.Index_0;
}


// Function COMP_WirePuzzle_Cell_Base.COMP_WirePuzzle_Cell_Base_C.GetTraceProgress
// (Private, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// struct FIntPoint                        Trace                                                  (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FVector2D                        CurrentAndTarget                                       (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UCOMP_WirePuzzle_Cell_Base_C::GetTraceProgress(const struct FIntPoint& Trace, struct FVector2D* CurrentAndTarget)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("COMP_WirePuzzle_Cell_Base_C", "GetTraceProgress");

	Params::COMP_WirePuzzle_Cell_Base_C_GetTraceProgress Parms{};

	Parms.Trace = std::move(Trace);

	UObject::ProcessEvent(Func, &Parms);

	if (CurrentAndTarget != nullptr)
		*CurrentAndTarget = std::move(Parms.CurrentAndTarget);
}


// Function COMP_WirePuzzle_Cell_Base.COMP_WirePuzzle_Cell_Base_C.SetTraceProgress
// (Private, BlueprintCallable, BlueprintEvent)
// Parameters:
// struct FIntPoint                        Trace                                                  (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FVector2D                        CurrentAndTarget                                       (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UCOMP_WirePuzzle_Cell_Base_C::SetTraceProgress(const struct FIntPoint& Trace, const struct FVector2D& CurrentAndTarget)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("COMP_WirePuzzle_Cell_Base_C", "SetTraceProgress");

	Params::COMP_WirePuzzle_Cell_Base_C_SetTraceProgress Parms{};

	Parms.Trace = std::move(Trace);
	Parms.CurrentAndTarget = std::move(CurrentAndTarget);

	UObject::ProcessEvent(Func, &Parms);
}


// Function COMP_WirePuzzle_Cell_Base.COMP_WirePuzzle_Cell_Base_C.GetTraceFade
// (Private, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// struct FIntPoint                        Trace                                                  (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FVector2D                        CurrentAndTarget                                       (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UCOMP_WirePuzzle_Cell_Base_C::GetTraceFade(const struct FIntPoint& Trace, struct FVector2D* CurrentAndTarget)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("COMP_WirePuzzle_Cell_Base_C", "GetTraceFade");

	Params::COMP_WirePuzzle_Cell_Base_C_GetTraceFade Parms{};

	Parms.Trace = std::move(Trace);

	UObject::ProcessEvent(Func, &Parms);

	if (CurrentAndTarget != nullptr)
		*CurrentAndTarget = std::move(Parms.CurrentAndTarget);
}


// Function COMP_WirePuzzle_Cell_Base.COMP_WirePuzzle_Cell_Base_C.SetTraceFade
// (Private, BlueprintCallable, BlueprintEvent)
// Parameters:
// struct FIntPoint                        Trace                                                  (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FVector2D                        CurrentAndTarget                                       (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UCOMP_WirePuzzle_Cell_Base_C::SetTraceFade(const struct FIntPoint& Trace, const struct FVector2D& CurrentAndTarget)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("COMP_WirePuzzle_Cell_Base_C", "SetTraceFade");

	Params::COMP_WirePuzzle_Cell_Base_C_SetTraceFade Parms{};

	Parms.Trace = std::move(Trace);
	Parms.CurrentAndTarget = std::move(CurrentAndTarget);

	UObject::ProcessEvent(Func, &Parms);
}


// Function COMP_WirePuzzle_Cell_Base.COMP_WirePuzzle_Cell_Base_C.SetTracePowerMaterialValue
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// struct FIntPoint                        Trace                                                  (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// float                                   Power                                                  (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UCOMP_WirePuzzle_Cell_Base_C::SetTracePowerMaterialValue(const struct FIntPoint& Trace, float Power)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("COMP_WirePuzzle_Cell_Base_C", "SetTracePowerMaterialValue");

	Params::COMP_WirePuzzle_Cell_Base_C_SetTracePowerMaterialValue Parms{};

	Parms.Trace = std::move(Trace);
	Parms.Power = Power;

	UObject::ProcessEvent(Func, &Parms);
}


// Function COMP_WirePuzzle_Cell_Base.COMP_WirePuzzle_Cell_Base_C.GetTripleDoubleSourceSocket
// (Private, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// int32                                   OutputSocket                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// int32                                   InputSocket                                            (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UCOMP_WirePuzzle_Cell_Base_C::GetTripleDoubleSourceSocket(int32 OutputSocket, int32* InputSocket)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("COMP_WirePuzzle_Cell_Base_C", "GetTripleDoubleSourceSocket");

	Params::COMP_WirePuzzle_Cell_Base_C_GetTripleDoubleSourceSocket Parms{};

	Parms.OutputSocket = OutputSocket;

	UObject::ProcessEvent(Func, &Parms);

	if (InputSocket != nullptr)
		*InputSocket = Parms.InputSocket;
}


// Function COMP_WirePuzzle_Cell_Base.COMP_WirePuzzle_Cell_Base_C.SetModifiedCellParameters
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// uint8                                   Params_0                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    Result                                                 (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void UCOMP_WirePuzzle_Cell_Base_C::SetModifiedCellParameters(uint8 Params_0, bool* Result)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("COMP_WirePuzzle_Cell_Base_C", "SetModifiedCellParameters");

	Params::COMP_WirePuzzle_Cell_Base_C_SetModifiedCellParameters Parms{};

	Parms.Params_0 = Params_0;

	UObject::ProcessEvent(Func, &Parms);

	if (Result != nullptr)
		*Result = Parms.Result;
}


// Function COMP_WirePuzzle_Cell_Base.COMP_WirePuzzle_Cell_Base_C.GetModifiedCellParameters
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// uint8                                   Param                                                  (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UCOMP_WirePuzzle_Cell_Base_C::GetModifiedCellParameters(uint8* Param)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("COMP_WirePuzzle_Cell_Base_C", "GetModifiedCellParameters");

	Params::COMP_WirePuzzle_Cell_Base_C_GetModifiedCellParameters Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (Param != nullptr)
		*Param = Parms.Param;
}


// Function COMP_WirePuzzle_Cell_Base.COMP_WirePuzzle_Cell_Base_C.SetCellVisibility
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    IsVisible_0                                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// bool                                    Result                                                 (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void UCOMP_WirePuzzle_Cell_Base_C::SetCellVisibility(bool IsVisible_0, bool* Result)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("COMP_WirePuzzle_Cell_Base_C", "SetCellVisibility");

	Params::COMP_WirePuzzle_Cell_Base_C_SetCellVisibility Parms{};

	Parms.IsVisible_0 = IsVisible_0;

	UObject::ProcessEvent(Func, &Parms);

	if (Result != nullptr)
		*Result = Parms.Result;
}


// Function COMP_WirePuzzle_Cell_Base.COMP_WirePuzzle_Cell_Base_C.SetCellFullyConnected
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    IsConnected                                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)

void UCOMP_WirePuzzle_Cell_Base_C::SetCellFullyConnected(bool IsConnected)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("COMP_WirePuzzle_Cell_Base_C", "SetCellFullyConnected");

	Params::COMP_WirePuzzle_Cell_Base_C_SetCellFullyConnected Parms{};

	Parms.IsConnected = IsConnected;

	UObject::ProcessEvent(Func, &Parms);
}


// Function COMP_WirePuzzle_Cell_Base.COMP_WirePuzzle_Cell_Base_C.AreAllInputsPowered
// (Private, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// bool                                    Result                                                 (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void UCOMP_WirePuzzle_Cell_Base_C::AreAllInputsPowered(bool* Result)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("COMP_WirePuzzle_Cell_Base_C", "AreAllInputsPowered");

	Params::COMP_WirePuzzle_Cell_Base_C_AreAllInputsPowered Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (Result != nullptr)
		*Result = Parms.Result;
}


// Function COMP_WirePuzzle_Cell_Base.COMP_WirePuzzle_Cell_Base_C.IsCellFocusable
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// bool                                    Result                                                 (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void UCOMP_WirePuzzle_Cell_Base_C::IsCellFocusable(bool* Result)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("COMP_WirePuzzle_Cell_Base_C", "IsCellFocusable");

	Params::COMP_WirePuzzle_Cell_Base_C_IsCellFocusable Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (Result != nullptr)
		*Result = Parms.Result;
}


// Function COMP_WirePuzzle_Cell_Base.COMP_WirePuzzle_Cell_Base_C.TrySetQueuedConnectedCell
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// class UCOMP_WirePuzzle_Cell_Base_C*     ConnectToCell                                          (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    Result                                                 (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void UCOMP_WirePuzzle_Cell_Base_C::TrySetQueuedConnectedCell(class UCOMP_WirePuzzle_Cell_Base_C* ConnectToCell, bool* Result)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("COMP_WirePuzzle_Cell_Base_C", "TrySetQueuedConnectedCell");

	Params::COMP_WirePuzzle_Cell_Base_C_TrySetQueuedConnectedCell Parms{};

	Parms.ConnectToCell = ConnectToCell;

	UObject::ProcessEvent(Func, &Parms);

	if (Result != nullptr)
		*Result = Parms.Result;
}


// Function COMP_WirePuzzle_Cell_Base.COMP_WirePuzzle_Cell_Base_C.TryClearQueuedConnectedCell
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    Result                                                 (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void UCOMP_WirePuzzle_Cell_Base_C::TryClearQueuedConnectedCell(bool* Result)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("COMP_WirePuzzle_Cell_Base_C", "TryClearQueuedConnectedCell");

	Params::COMP_WirePuzzle_Cell_Base_C_TryClearQueuedConnectedCell Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (Result != nullptr)
		*Result = Parms.Result;
}

}

