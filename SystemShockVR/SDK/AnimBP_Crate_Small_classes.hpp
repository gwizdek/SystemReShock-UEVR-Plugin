#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: AnimBP_Crate_Small

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "Engine_classes.hpp"
#include "AnimGraphRuntime_structs.hpp"


namespace SDK
{

// AnimBlueprintGeneratedClass AnimBP_Crate_Small.AnimBP_Crate_Small_C
// 0x0170 (0x0430 - 0x02C0)
class UAnimBP_Crate_Small_C final : public UAnimInstance
{
public:
	uint8                                         Pad_2B8[0x8];                                      // 0x02B8(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x02C0(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	struct FAnimNode_Root                         AnimGraphNode_Root;                                // 0x02C8(0x0030)()
	struct FAnimNode_BlendSpacePlayer             AnimGraphNode_BlendSpacePlayer;                    // 0x02F8(0x00E8)()
	struct FAnimNode_Slot                         AnimGraphNode_Slot;                                // 0x03E0(0x0048)()
	float                                         Angle;                                             // 0x0428(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Phase;                                             // 0x042C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

public:
	void ExecuteUbergraph_AnimBP_Crate_Small(int32 EntryPoint);
	void AnimGraph(struct FPoseLink* AnimGraph_0);
	void SetAngle(float NewAngle, bool* Result);
	void SetPhase(float NewPhase, bool* Result);

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"AnimBP_Crate_Small_C">();
	}
	static class UAnimBP_Crate_Small_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<UAnimBP_Crate_Small_C>();
	}
};
static_assert(alignof(UAnimBP_Crate_Small_C) == 0x000010, "Wrong alignment on UAnimBP_Crate_Small_C");
static_assert(sizeof(UAnimBP_Crate_Small_C) == 0x000430, "Wrong size on UAnimBP_Crate_Small_C");
static_assert(offsetof(UAnimBP_Crate_Small_C, UberGraphFrame) == 0x0002C0, "Member 'UAnimBP_Crate_Small_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(UAnimBP_Crate_Small_C, AnimGraphNode_Root) == 0x0002C8, "Member 'UAnimBP_Crate_Small_C::AnimGraphNode_Root' has a wrong offset!");
static_assert(offsetof(UAnimBP_Crate_Small_C, AnimGraphNode_BlendSpacePlayer) == 0x0002F8, "Member 'UAnimBP_Crate_Small_C::AnimGraphNode_BlendSpacePlayer' has a wrong offset!");
static_assert(offsetof(UAnimBP_Crate_Small_C, AnimGraphNode_Slot) == 0x0003E0, "Member 'UAnimBP_Crate_Small_C::AnimGraphNode_Slot' has a wrong offset!");
static_assert(offsetof(UAnimBP_Crate_Small_C, Angle) == 0x000428, "Member 'UAnimBP_Crate_Small_C::Angle' has a wrong offset!");
static_assert(offsetof(UAnimBP_Crate_Small_C, Phase) == 0x00042C, "Member 'UAnimBP_Crate_Small_C::Phase' has a wrong offset!");

}

