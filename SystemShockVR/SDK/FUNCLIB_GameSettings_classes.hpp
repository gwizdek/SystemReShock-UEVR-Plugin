#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: FUNCLIB_GameSettings

#include "Basic.hpp"

#include "ENUM_PrimarySecondary_structs.hpp"
#include "Engine_classes.hpp"
#include "ENUM_InputCategory_structs.hpp"
#include "ENUM_GameDifficulty_structs.hpp"
#include "ENUM_GameDifficultyConfigCategory_structs.hpp"


namespace SDK
{

// BlueprintGeneratedClass FUNCLIB_GameSettings.FUNCLIB_GameSettings_C
// 0x0000 (0x0028 - 0x0028)
class UFUNCLIB_GameSettings_C final : public UBlueprintFunctionLibrary
{
public:
	static void GetBoundKey(class FName ActionName, ENUM_PrimarySecondary Rank, const TMap<class FName, struct FSTRUCT_BoundInputActionPair>& KeyActionMap, class UObject* __WorldContext, struct FKey* BoundKey);
	static void GetBoundKeyForCurrentUser(class FName ActionName, ENUM_PrimarySecondary Rank, class UObject* __WorldContext, struct FKey* BoundKey);
	static void IsValidKeyToBind(const struct FKey& Key, class UObject* __WorldContext, bool* Result);
	static void SetKeyAction(class FName ActionName, const struct FKey& Key, ENUM_PrimarySecondary Rank, TMap<class FName, struct FSTRUCT_BoundInputActionPair>& KeyActionMap, class UObject* __WorldContext, bool* Result);
	static void BindKeyAction(class FName ActionName, const struct FKey& Key, ENUM_PrimarySecondary Rank, TMap<class FName, struct FSTRUCT_BoundInputActionPair>& KeyActionMap, class UObject* __WorldContext, TArray<class FName>* ChangedActionNames);
	static void UnbindActionsByKey(const struct FKey& ActionKey, TMap<class FName, struct FSTRUCT_BoundInputActionPair>& KeyActionMap, class UObject* __WorldContext, TArray<class FName>* ChangedActionNames);
	static void UnbindKeyByActionName(class FName ActionName, ENUM_PrimarySecondary InputRank, TMap<class FName, struct FSTRUCT_BoundInputActionPair>& KeyActionMap, class UObject* __WorldContext, bool* Result);
	static void UnbindKeysByActionName(class FName ActionName, TMap<class FName, struct FSTRUCT_BoundInputActionPair>& KeyActionMap, class UObject* __WorldContext, bool* Result);
	static void GetShockSettingsForCurrentUser(class UObject* __WorldContext, class USAVE_Settings_C** Settings);
	static void LoadDeveloperSettings(class UObject* __WorldContext, class USAVE_DeveloperSettings_C** DevSettings);
	static void SaveDeveloperSettings(class USAVE_DeveloperSettings_C* DeveloperSettings, class UObject* __WorldContext);
	static void GetDeveloperSettingsSlotName(class UObject* __WorldContext, class FString* SlotName);
	static void ShouldShowIntroSequence(class UObject* __WorldContext, bool* Result);
	static void GetShockSettingsForSpecificUser(int32 UserIndex, class UObject* __WorldContext, class USAVE_Settings_C** Settings);
	static void GetShockDifficultyValuesFromBitfield(int32 DifficultyBitfield, class UObject* __WorldContext, ENUM_GameDifficulty* Combat, ENUM_GameDifficulty* Mission, ENUM_GameDifficulty* Puzzle, ENUM_GameDifficulty* Cyber);
	static void GetShockDifficultyByType(int32 Bitfield, ENUM_GameDifficultyConfigCategory Type, class UObject* __WorldContext, ENUM_GameDifficulty* Difficulty);
	static void MakeShockDifficultyBitfield(ENUM_GameDifficulty Combat, ENUM_GameDifficulty Mission, ENUM_GameDifficulty Puzzle, ENUM_GameDifficulty Cyber, class UObject* __WorldContext, int32* DifficultyBitfield);
	static void IsGamepadInputAction(class FName ActionName, class UObject* __WorldContext, bool* Result);
	static void GetGamepadInputActionPrefix(class UObject* __WorldContext, class FString* Result);
	static void GetInputActionPrefixForCategory(ENUM_InputCategory InputCategory, class UObject* __WorldContext, class FString* Result);
	static void GetInputCategoryFromActionName(class FName ActionName, class UObject* __WorldContext, bool* Found, ENUM_InputCategory* Result);
	static void IsMedicalDemo(class UObject* __WorldContext, bool* Result);
	static void IsDismembermentAllowed(class UObject* __WorldContext, bool* Result);
	static void GetAcceleratedGamepadInputRotation(const struct FVector2D& LookVector, float DeltaTime, bool ShowMouseCrusor, class UObject* __WorldContext, struct FVector2D* Result);

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"FUNCLIB_GameSettings_C">();
	}
	static class UFUNCLIB_GameSettings_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<UFUNCLIB_GameSettings_C>();
	}
};
static_assert(alignof(UFUNCLIB_GameSettings_C) == 0x000008, "Wrong alignment on UFUNCLIB_GameSettings_C");
static_assert(sizeof(UFUNCLIB_GameSettings_C) == 0x000028, "Wrong size on UFUNCLIB_GameSettings_C");

}

