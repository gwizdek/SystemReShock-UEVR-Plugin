#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: MOVECONTROL_WorldMove

#include "Basic.hpp"

#include "CoreUObject_structs.hpp"
#include "Engine_structs.hpp"
#include "MOVECONTROL_Base_classes.hpp"
#include "ENUM_LookControlType_structs.hpp"


namespace SDK
{

// BlueprintGeneratedClass MOVECONTROL_WorldMove.MOVECONTROL_WorldMove_C
// 0x0038 (0x00D0 - 0x0098)
class UMOVECONTROL_WorldMove_C final : public UMOVECONTROL_Base_C
{
public:
	float                                         MoveDuration;                                      // 0x0094(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash)
	struct FVector                                StartLocation;                                     // 0x0098(0x000C)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash)
	struct FVector                                EndLocation;                                       // 0x00A4(0x000C)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash)
	EEasingFunc                                   InterpType;                                        // 0x00B0(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash)
	bool                                          AutoExpire;                                        // 0x00B1(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, ExposeOnSpawn)
	bool                                          RotateLookDirection;                               // 0x00B2(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, ExposeOnSpawn)
	bool                                          UseWalkingMoveMode;                                // 0x00B3(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, ExposeOnSpawn)
	struct FRotator                               StartLookRotation;                                 // 0x00B4(0x000C)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, ExposeOnSpawn)
	struct FRotator                               EndLookRotation;                                   // 0x00C0(0x000C)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, ExposeOnSpawn)

public:
	void InitializeMoveControl(class APAWN_Hacker_Simple_C* Player_0, float GameTime, const struct FSTRUCT_MoveControlParams& InitialControlParams, bool* Result);
	void UpdateMoveControl(const struct FVector2D& MoveInput, const struct FVector2D& LookInput, const struct FSTRUCT_MoveControlParams& ControlParams, TArray<float>& ActionInputValues, float MoveInputScale, float Delta_Time, bool* ShouldExpire);
	void ExpireMoveControl();

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"MOVECONTROL_WorldMove_C">();
	}
	static class UMOVECONTROL_WorldMove_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMOVECONTROL_WorldMove_C>();
	}
};
static_assert(alignof(UMOVECONTROL_WorldMove_C) == 0x000008, "Wrong alignment on UMOVECONTROL_WorldMove_C");
static_assert(sizeof(UMOVECONTROL_WorldMove_C) == 0x0000D0, "Wrong size on UMOVECONTROL_WorldMove_C");
static_assert(offsetof(UMOVECONTROL_WorldMove_C, MoveDuration) == 0x000094, "Member 'UMOVECONTROL_WorldMove_C::MoveDuration' has a wrong offset!");
static_assert(offsetof(UMOVECONTROL_WorldMove_C, StartLocation) == 0x000098, "Member 'UMOVECONTROL_WorldMove_C::StartLocation' has a wrong offset!");
static_assert(offsetof(UMOVECONTROL_WorldMove_C, EndLocation) == 0x0000A4, "Member 'UMOVECONTROL_WorldMove_C::EndLocation' has a wrong offset!");
static_assert(offsetof(UMOVECONTROL_WorldMove_C, InterpType) == 0x0000B0, "Member 'UMOVECONTROL_WorldMove_C::InterpType' has a wrong offset!");
static_assert(offsetof(UMOVECONTROL_WorldMove_C, AutoExpire) == 0x0000B1, "Member 'UMOVECONTROL_WorldMove_C::AutoExpire' has a wrong offset!");
static_assert(offsetof(UMOVECONTROL_WorldMove_C, RotateLookDirection) == 0x0000B2, "Member 'UMOVECONTROL_WorldMove_C::RotateLookDirection' has a wrong offset!");
static_assert(offsetof(UMOVECONTROL_WorldMove_C, UseWalkingMoveMode) == 0x0000B3, "Member 'UMOVECONTROL_WorldMove_C::UseWalkingMoveMode' has a wrong offset!");
static_assert(offsetof(UMOVECONTROL_WorldMove_C, StartLookRotation) == 0x0000B4, "Member 'UMOVECONTROL_WorldMove_C::StartLookRotation' has a wrong offset!");
static_assert(offsetof(UMOVECONTROL_WorldMove_C, EndLookRotation) == 0x0000C0, "Member 'UMOVECONTROL_WorldMove_C::EndLookRotation' has a wrong offset!");

}

