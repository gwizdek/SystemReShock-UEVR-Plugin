#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: ANIMBP_ScrubBot

#include "Basic.hpp"

#include "CoreUObject_structs.hpp"
#include "Engine_structs.hpp"
#include "Engine_classes.hpp"
#include "AnimGraphRuntime_structs.hpp"
#include "ENUM_DeathBlowType_structs.hpp"
#include "ENUM_Emotions_structs.hpp"


namespace SDK
{

// AnimBlueprintGeneratedClass ANIMBP_ScrubBot.ANIMBP_ScrubBot_C
// 0x0430 (0x06F0 - 0x02C0)
class UANIMBP_ScrubBot_C final : public UAnimInstance
{
public:
	uint8                                         Pad_2B8[0x8];                                      // 0x02B8(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x02C0(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	struct FAnimNode_Root                         AnimGraphNode_Root;                                // 0x02C8(0x0030)()
	struct FAnimNode_Slot                         AnimGraphNode_Slot;                                // 0x02F8(0x0048)()
	struct FAnimNode_RefPose                      AnimGraphNode_LocalRefPose;                        // 0x0340(0x0018)()
	struct FAnimNode_ModifyBone                   AnimGraphNode_ModifyBone_2;                        // 0x0358(0x0108)()
	struct FAnimNode_ConvertLocalToComponentSpace AnimGraphNode_LocalToComponentSpace;               // 0x0460(0x0020)()
	struct FAnimNode_ConvertComponentToLocalSpace AnimGraphNode_ComponentToLocalSpace;               // 0x0480(0x0020)()
	struct FAnimNode_ModifyBone                   AnimGraphNode_ModifyBone_1;                        // 0x04A0(0x0108)()
	struct FAnimNode_ModifyBone                   AnimGraphNode_ModifyBone;                          // 0x05A8(0x0108)()
	struct FRotator                               CurrentScrubberRotation;                           // 0x06B0(0x000C)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	struct FRotator                               CurrentWheelRotation;                              // 0x06BC(0x000C)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	struct FRotator                               CurrentAxleRotation;                               // 0x06C8(0x000C)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	float                                         DesiredYawDelta;                                   // 0x06D4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         ScrubberSpeed;                                     // 0x06D8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         WheelDiameter;                                     // 0x06DC(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         WheelCircumference;                                // 0x06E0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CurrentVelocity;                                   // 0x06E4(0x000C)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

public:
	void ExecuteUbergraph_ANIMBP_ScrubBot(int32 EntryPoint);
	void BlueprintInitializeAnimation();
	void BlueprintUpdateAnimation(float DeltaTimeX);
	void InitializeScrubBot();
	void UpdateScrubberRotation(float DeltaTime);
	void UpdateWheelRotation(float DeltaTime);
	void UpdateAxleRotation(float DeltaTime);
	void AnimGraph(struct FPoseLink* AnimGraph_0);
	void IsStunned(bool* Result);
	void SetStunnedSequence(class UAnimSequence* StunnedSequence, bool* Result);
	void SetSprintEnabled(bool SprintEnabled, bool* Result);
	void SetTravelMode(bool TravelModeOn, bool* Result);
	void GetAimTarget(class UOBJ_EnemyTarget_C** Target);
	void SetAimTarget(class UOBJ_EnemyTarget_C* Target, bool* Result);
	void GetIdleOverrideSequence(class UAnimSequenceBase** IdleOverride);
	void SetIdleOverrideSequence(class UAnimSequenceBase* IdleOverride, bool* Result);
	void SetRelativeAimAngleOffset(float YawOffset, float PitchOffset, float Alpha, bool* Result);
	void GetRotation(struct FRotator* AnimRotationPerSecond, float* AnimRotationAlpha);
	void GetStance(ENUM_Emotions* Stance);
	void SetStance(ENUM_Emotions Stance, bool* Result);
	void SetCatatonic(bool State, bool* Result);
	void SetStandingTurn(float SignedAngleToTarget, bool IsStanding, bool* Result);
	void ReceiveDeathBlow(ENUM_DeathBlowType BodyPart, bool* Result);
	void ReceiveImpact(const struct FVector& Impulse, const struct FVector& ImpactLocation, const struct FVector& ImpactNormal, class FName BoneName, const class FString& DamageType, float DamageAmount, float FlinchTime, bool* Result);
	void SetIsAlive(bool IsAlive, bool* Result);
	void SetMovementParameters(const struct FVector& Velocity, const struct FRotator& Rotation, const struct FRotator& DesiredRotation, bool* Result);
	void SetLookAtAlpha(float Alpha, bool* Result);
	void SetLookAtLocation(const struct FVector& Location, bool* Result);
	void SetVoiceAmplitude(float VoiceAmplitude, bool* Result);

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"ANIMBP_ScrubBot_C">();
	}
	static class UANIMBP_ScrubBot_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<UANIMBP_ScrubBot_C>();
	}
};
static_assert(alignof(UANIMBP_ScrubBot_C) == 0x000010, "Wrong alignment on UANIMBP_ScrubBot_C");
static_assert(sizeof(UANIMBP_ScrubBot_C) == 0x0006F0, "Wrong size on UANIMBP_ScrubBot_C");
static_assert(offsetof(UANIMBP_ScrubBot_C, UberGraphFrame) == 0x0002C0, "Member 'UANIMBP_ScrubBot_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(UANIMBP_ScrubBot_C, AnimGraphNode_Root) == 0x0002C8, "Member 'UANIMBP_ScrubBot_C::AnimGraphNode_Root' has a wrong offset!");
static_assert(offsetof(UANIMBP_ScrubBot_C, AnimGraphNode_Slot) == 0x0002F8, "Member 'UANIMBP_ScrubBot_C::AnimGraphNode_Slot' has a wrong offset!");
static_assert(offsetof(UANIMBP_ScrubBot_C, AnimGraphNode_LocalRefPose) == 0x000340, "Member 'UANIMBP_ScrubBot_C::AnimGraphNode_LocalRefPose' has a wrong offset!");
static_assert(offsetof(UANIMBP_ScrubBot_C, AnimGraphNode_ModifyBone_2) == 0x000358, "Member 'UANIMBP_ScrubBot_C::AnimGraphNode_ModifyBone_2' has a wrong offset!");
static_assert(offsetof(UANIMBP_ScrubBot_C, AnimGraphNode_LocalToComponentSpace) == 0x000460, "Member 'UANIMBP_ScrubBot_C::AnimGraphNode_LocalToComponentSpace' has a wrong offset!");
static_assert(offsetof(UANIMBP_ScrubBot_C, AnimGraphNode_ComponentToLocalSpace) == 0x000480, "Member 'UANIMBP_ScrubBot_C::AnimGraphNode_ComponentToLocalSpace' has a wrong offset!");
static_assert(offsetof(UANIMBP_ScrubBot_C, AnimGraphNode_ModifyBone_1) == 0x0004A0, "Member 'UANIMBP_ScrubBot_C::AnimGraphNode_ModifyBone_1' has a wrong offset!");
static_assert(offsetof(UANIMBP_ScrubBot_C, AnimGraphNode_ModifyBone) == 0x0005A8, "Member 'UANIMBP_ScrubBot_C::AnimGraphNode_ModifyBone' has a wrong offset!");
static_assert(offsetof(UANIMBP_ScrubBot_C, CurrentScrubberRotation) == 0x0006B0, "Member 'UANIMBP_ScrubBot_C::CurrentScrubberRotation' has a wrong offset!");
static_assert(offsetof(UANIMBP_ScrubBot_C, CurrentWheelRotation) == 0x0006BC, "Member 'UANIMBP_ScrubBot_C::CurrentWheelRotation' has a wrong offset!");
static_assert(offsetof(UANIMBP_ScrubBot_C, CurrentAxleRotation) == 0x0006C8, "Member 'UANIMBP_ScrubBot_C::CurrentAxleRotation' has a wrong offset!");
static_assert(offsetof(UANIMBP_ScrubBot_C, DesiredYawDelta) == 0x0006D4, "Member 'UANIMBP_ScrubBot_C::DesiredYawDelta' has a wrong offset!");
static_assert(offsetof(UANIMBP_ScrubBot_C, ScrubberSpeed) == 0x0006D8, "Member 'UANIMBP_ScrubBot_C::ScrubberSpeed' has a wrong offset!");
static_assert(offsetof(UANIMBP_ScrubBot_C, WheelDiameter) == 0x0006DC, "Member 'UANIMBP_ScrubBot_C::WheelDiameter' has a wrong offset!");
static_assert(offsetof(UANIMBP_ScrubBot_C, WheelCircumference) == 0x0006E0, "Member 'UANIMBP_ScrubBot_C::WheelCircumference' has a wrong offset!");
static_assert(offsetof(UANIMBP_ScrubBot_C, CurrentVelocity) == 0x0006E4, "Member 'UANIMBP_ScrubBot_C::CurrentVelocity' has a wrong offset!");

}

