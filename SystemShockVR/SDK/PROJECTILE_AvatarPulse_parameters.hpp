#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: PROJECTILE_AvatarPulse

#include "Basic.hpp"

#include "CoreUObject_structs.hpp"
#include "Engine_structs.hpp"


namespace SDK::Params
{

// Function PROJECTILE_AvatarPulse.PROJECTILE_AvatarPulse_C.ExecuteUbergraph_PROJECTILE_AvatarPulse
// 0x0008 (0x0008 - 0x0000)
struct PROJECTILE_AvatarPulse_C_ExecuteUbergraph_PROJECTILE_AvatarPulse final
{
public:
	int32                                         EntryPoint;                                        // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         K2Node_Event_DeltaSeconds;                         // 0x0004(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(PROJECTILE_AvatarPulse_C_ExecuteUbergraph_PROJECTILE_AvatarPulse) == 0x000004, "Wrong alignment on PROJECTILE_AvatarPulse_C_ExecuteUbergraph_PROJECTILE_AvatarPulse");
static_assert(sizeof(PROJECTILE_AvatarPulse_C_ExecuteUbergraph_PROJECTILE_AvatarPulse) == 0x000008, "Wrong size on PROJECTILE_AvatarPulse_C_ExecuteUbergraph_PROJECTILE_AvatarPulse");
static_assert(offsetof(PROJECTILE_AvatarPulse_C_ExecuteUbergraph_PROJECTILE_AvatarPulse, EntryPoint) == 0x000000, "Member 'PROJECTILE_AvatarPulse_C_ExecuteUbergraph_PROJECTILE_AvatarPulse::EntryPoint' has a wrong offset!");
static_assert(offsetof(PROJECTILE_AvatarPulse_C_ExecuteUbergraph_PROJECTILE_AvatarPulse, K2Node_Event_DeltaSeconds) == 0x000004, "Member 'PROJECTILE_AvatarPulse_C_ExecuteUbergraph_PROJECTILE_AvatarPulse::K2Node_Event_DeltaSeconds' has a wrong offset!");

// Function PROJECTILE_AvatarPulse.PROJECTILE_AvatarPulse_C.ReceiveTick
// 0x0004 (0x0004 - 0x0000)
struct PROJECTILE_AvatarPulse_C_ReceiveTick final
{
public:
	float                                         DeltaSeconds;                                      // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(PROJECTILE_AvatarPulse_C_ReceiveTick) == 0x000004, "Wrong alignment on PROJECTILE_AvatarPulse_C_ReceiveTick");
static_assert(sizeof(PROJECTILE_AvatarPulse_C_ReceiveTick) == 0x000004, "Wrong size on PROJECTILE_AvatarPulse_C_ReceiveTick");
static_assert(offsetof(PROJECTILE_AvatarPulse_C_ReceiveTick, DeltaSeconds) == 0x000000, "Member 'PROJECTILE_AvatarPulse_C_ReceiveTick::DeltaSeconds' has a wrong offset!");

// Function PROJECTILE_AvatarPulse.PROJECTILE_AvatarPulse_C.UpdateRotation
// 0x00A8 (0x00A8 - 0x0000)
struct PROJECTILE_AvatarPulse_C_UpdateRotation final
{
public:
	float                                         DeltaTime;                                         // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0004(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_Multiply_FloatFloat_ReturnValue;          // 0x0008(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_SelectFloat_ReturnValue;                  // 0x000C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Multiply_FloatFloat_ReturnValue_1;        // 0x0010(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               CallFunc_MakeRotator_ReturnValue;                  // 0x0014(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FHitResult                             CallFunc_K2_AddLocalRotation_SweepHitResult;       // 0x0020(0x0088)(IsPlainOldData, NoDestructor, ContainsInstancedReference)
};
static_assert(alignof(PROJECTILE_AvatarPulse_C_UpdateRotation) == 0x000004, "Wrong alignment on PROJECTILE_AvatarPulse_C_UpdateRotation");
static_assert(sizeof(PROJECTILE_AvatarPulse_C_UpdateRotation) == 0x0000A8, "Wrong size on PROJECTILE_AvatarPulse_C_UpdateRotation");
static_assert(offsetof(PROJECTILE_AvatarPulse_C_UpdateRotation, DeltaTime) == 0x000000, "Member 'PROJECTILE_AvatarPulse_C_UpdateRotation::DeltaTime' has a wrong offset!");
static_assert(offsetof(PROJECTILE_AvatarPulse_C_UpdateRotation, CallFunc_IsValid_ReturnValue) == 0x000004, "Member 'PROJECTILE_AvatarPulse_C_UpdateRotation::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(PROJECTILE_AvatarPulse_C_UpdateRotation, CallFunc_Multiply_FloatFloat_ReturnValue) == 0x000008, "Member 'PROJECTILE_AvatarPulse_C_UpdateRotation::CallFunc_Multiply_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(PROJECTILE_AvatarPulse_C_UpdateRotation, CallFunc_SelectFloat_ReturnValue) == 0x00000C, "Member 'PROJECTILE_AvatarPulse_C_UpdateRotation::CallFunc_SelectFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(PROJECTILE_AvatarPulse_C_UpdateRotation, CallFunc_Multiply_FloatFloat_ReturnValue_1) == 0x000010, "Member 'PROJECTILE_AvatarPulse_C_UpdateRotation::CallFunc_Multiply_FloatFloat_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(PROJECTILE_AvatarPulse_C_UpdateRotation, CallFunc_MakeRotator_ReturnValue) == 0x000014, "Member 'PROJECTILE_AvatarPulse_C_UpdateRotation::CallFunc_MakeRotator_ReturnValue' has a wrong offset!");
static_assert(offsetof(PROJECTILE_AvatarPulse_C_UpdateRotation, CallFunc_K2_AddLocalRotation_SweepHitResult) == 0x000020, "Member 'PROJECTILE_AvatarPulse_C_UpdateRotation::CallFunc_K2_AddLocalRotation_SweepHitResult' has a wrong offset!");

// Function PROJECTILE_AvatarPulse.PROJECTILE_AvatarPulse_C.DestroyProjectile
// 0x00D0 (0x00D0 - 0x0000)
struct PROJECTILE_AvatarPulse_C_DestroyProjectile final
{
public:
	struct FVector                                ImpactNormal;                                      // 0x0000(0x000C)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTransform                             CallFunc_GetTransform_ReturnValue;                 // 0x0010(0x0030)(ConstParm, IsPlainOldData, NoDestructor)
	struct FVector                                CallFunc_BreakTransform_Location;                  // 0x0040(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               CallFunc_BreakTransform_Rotation;                  // 0x004C(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FVector                                CallFunc_BreakTransform_Scale;                     // 0x0058(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               CallFunc_Conv_VectorToRotator_ReturnValue;         // 0x0064(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FTransform                             CallFunc_GetTransform_ReturnValue_1;               // 0x0070(0x0030)(ConstParm, IsPlainOldData, NoDestructor)
	struct FVector                                CallFunc_BreakTransform_Location_1;                // 0x00A0(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               CallFunc_BreakTransform_Rotation_1;                // 0x00AC(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FVector                                CallFunc_BreakTransform_Scale_1;                   // 0x00B8(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_C4[0x4];                                       // 0x00C4(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UNiagaraComponent*                      CallFunc_SpawnSystemAtLocation_ReturnValue;        // 0x00C8(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(PROJECTILE_AvatarPulse_C_DestroyProjectile) == 0x000010, "Wrong alignment on PROJECTILE_AvatarPulse_C_DestroyProjectile");
static_assert(sizeof(PROJECTILE_AvatarPulse_C_DestroyProjectile) == 0x0000D0, "Wrong size on PROJECTILE_AvatarPulse_C_DestroyProjectile");
static_assert(offsetof(PROJECTILE_AvatarPulse_C_DestroyProjectile, ImpactNormal) == 0x000000, "Member 'PROJECTILE_AvatarPulse_C_DestroyProjectile::ImpactNormal' has a wrong offset!");
static_assert(offsetof(PROJECTILE_AvatarPulse_C_DestroyProjectile, CallFunc_GetTransform_ReturnValue) == 0x000010, "Member 'PROJECTILE_AvatarPulse_C_DestroyProjectile::CallFunc_GetTransform_ReturnValue' has a wrong offset!");
static_assert(offsetof(PROJECTILE_AvatarPulse_C_DestroyProjectile, CallFunc_BreakTransform_Location) == 0x000040, "Member 'PROJECTILE_AvatarPulse_C_DestroyProjectile::CallFunc_BreakTransform_Location' has a wrong offset!");
static_assert(offsetof(PROJECTILE_AvatarPulse_C_DestroyProjectile, CallFunc_BreakTransform_Rotation) == 0x00004C, "Member 'PROJECTILE_AvatarPulse_C_DestroyProjectile::CallFunc_BreakTransform_Rotation' has a wrong offset!");
static_assert(offsetof(PROJECTILE_AvatarPulse_C_DestroyProjectile, CallFunc_BreakTransform_Scale) == 0x000058, "Member 'PROJECTILE_AvatarPulse_C_DestroyProjectile::CallFunc_BreakTransform_Scale' has a wrong offset!");
static_assert(offsetof(PROJECTILE_AvatarPulse_C_DestroyProjectile, CallFunc_Conv_VectorToRotator_ReturnValue) == 0x000064, "Member 'PROJECTILE_AvatarPulse_C_DestroyProjectile::CallFunc_Conv_VectorToRotator_ReturnValue' has a wrong offset!");
static_assert(offsetof(PROJECTILE_AvatarPulse_C_DestroyProjectile, CallFunc_GetTransform_ReturnValue_1) == 0x000070, "Member 'PROJECTILE_AvatarPulse_C_DestroyProjectile::CallFunc_GetTransform_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(PROJECTILE_AvatarPulse_C_DestroyProjectile, CallFunc_BreakTransform_Location_1) == 0x0000A0, "Member 'PROJECTILE_AvatarPulse_C_DestroyProjectile::CallFunc_BreakTransform_Location_1' has a wrong offset!");
static_assert(offsetof(PROJECTILE_AvatarPulse_C_DestroyProjectile, CallFunc_BreakTransform_Rotation_1) == 0x0000AC, "Member 'PROJECTILE_AvatarPulse_C_DestroyProjectile::CallFunc_BreakTransform_Rotation_1' has a wrong offset!");
static_assert(offsetof(PROJECTILE_AvatarPulse_C_DestroyProjectile, CallFunc_BreakTransform_Scale_1) == 0x0000B8, "Member 'PROJECTILE_AvatarPulse_C_DestroyProjectile::CallFunc_BreakTransform_Scale_1' has a wrong offset!");
static_assert(offsetof(PROJECTILE_AvatarPulse_C_DestroyProjectile, CallFunc_SpawnSystemAtLocation_ReturnValue) == 0x0000C8, "Member 'PROJECTILE_AvatarPulse_C_DestroyProjectile::CallFunc_SpawnSystemAtLocation_ReturnValue' has a wrong offset!");

}

