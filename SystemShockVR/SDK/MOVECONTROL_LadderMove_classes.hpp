#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: MOVECONTROL_LadderMove

#include "Basic.hpp"

#include "ENUM_LadderMoveType_structs.hpp"
#include "CoreUObject_structs.hpp"
#include "ENUM_LadderDismountType_structs.hpp"
#include "MOVECONTROL_Base_classes.hpp"
#include "ENUM_LeftRight_structs.hpp"


namespace SDK
{

// BlueprintGeneratedClass MOVECONTROL_LadderMove.MOVECONTROL_LadderMove_C
// 0x0068 (0x0100 - 0x0098)
class UMOVECONTROL_LadderMove_C final : public UMOVECONTROL_Base_C
{
public:
	uint8                                         Pad_94[0x4];                                       // 0x0094(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class AINTERACT_Ladder_C*                     Ladder;                                            // 0x0098(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, IsPlainOldData, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash)
	int32                                         SourceRung;                                        // 0x00A0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash)
	int32                                         TargetRung;                                        // 0x00A4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ENUM_LadderMoveType                           CurrentMoveType;                                   // 0x00A8(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ENUM_LadderDismountType                       DismountType;                                      // 0x00A9(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ENUM_LadderMoveType                           InputMoveType;                                     // 0x00AA(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ENUM_LeftRight                                TopFoot;                                           // 0x00AB(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               OriginalPlayerRotation;                            // 0x00AC(0x000C)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	struct FRotator                               OriginalCameraRotation;                            // 0x00B8(0x000C)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          ForceJumpNextUpdate;                               // 0x00C4(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_C5[0x3];                                       // 0x00C5(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class UAnimMontage*                           MoveLeftFootUp;                                    // 0x00C8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UAnimMontage*                           MoveRightFootUp;                                   // 0x00D0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UAnimMontage*                           MoveLeftFootDown;                                  // 0x00D8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UAnimMontage*                           MoveRightFootDown;                                 // 0x00E0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UAnimSequenceBase*                      IdleLeftDown;                                      // 0x00E8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UAnimSequenceBase*                      IdleRightDown;                                     // 0x00F0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          WantsToFastClimb;                                  // 0x00F8(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          IsFastClimbing;                                    // 0x00F9(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)

public:
	void InitializeMoveControl(class APAWN_Hacker_Simple_C* Player_0, float GameTime, const struct FSTRUCT_MoveControlParams& InitialControlParams, bool* Result);
	void UpdateMoveControl(const struct FVector2D& MoveInput, const struct FVector2D& LookInput, const struct FSTRUCT_MoveControlParams& ControlParams, TArray<float>& ActionInputValues, float MoveInputScale, float Delta_Time, bool* ShouldExpire);
	void BeginMoving(bool* ShouldDismount);
	void SetPlayerMountStatus(bool IsMounted);
	void SetForceJumpNextFrame(bool Value);
	void PlayerLadderStepMontage();

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"MOVECONTROL_LadderMove_C">();
	}
	static class UMOVECONTROL_LadderMove_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMOVECONTROL_LadderMove_C>();
	}
};
static_assert(alignof(UMOVECONTROL_LadderMove_C) == 0x000008, "Wrong alignment on UMOVECONTROL_LadderMove_C");
static_assert(sizeof(UMOVECONTROL_LadderMove_C) == 0x000100, "Wrong size on UMOVECONTROL_LadderMove_C");
static_assert(offsetof(UMOVECONTROL_LadderMove_C, Ladder) == 0x000098, "Member 'UMOVECONTROL_LadderMove_C::Ladder' has a wrong offset!");
static_assert(offsetof(UMOVECONTROL_LadderMove_C, SourceRung) == 0x0000A0, "Member 'UMOVECONTROL_LadderMove_C::SourceRung' has a wrong offset!");
static_assert(offsetof(UMOVECONTROL_LadderMove_C, TargetRung) == 0x0000A4, "Member 'UMOVECONTROL_LadderMove_C::TargetRung' has a wrong offset!");
static_assert(offsetof(UMOVECONTROL_LadderMove_C, CurrentMoveType) == 0x0000A8, "Member 'UMOVECONTROL_LadderMove_C::CurrentMoveType' has a wrong offset!");
static_assert(offsetof(UMOVECONTROL_LadderMove_C, DismountType) == 0x0000A9, "Member 'UMOVECONTROL_LadderMove_C::DismountType' has a wrong offset!");
static_assert(offsetof(UMOVECONTROL_LadderMove_C, InputMoveType) == 0x0000AA, "Member 'UMOVECONTROL_LadderMove_C::InputMoveType' has a wrong offset!");
static_assert(offsetof(UMOVECONTROL_LadderMove_C, TopFoot) == 0x0000AB, "Member 'UMOVECONTROL_LadderMove_C::TopFoot' has a wrong offset!");
static_assert(offsetof(UMOVECONTROL_LadderMove_C, OriginalPlayerRotation) == 0x0000AC, "Member 'UMOVECONTROL_LadderMove_C::OriginalPlayerRotation' has a wrong offset!");
static_assert(offsetof(UMOVECONTROL_LadderMove_C, OriginalCameraRotation) == 0x0000B8, "Member 'UMOVECONTROL_LadderMove_C::OriginalCameraRotation' has a wrong offset!");
static_assert(offsetof(UMOVECONTROL_LadderMove_C, ForceJumpNextUpdate) == 0x0000C4, "Member 'UMOVECONTROL_LadderMove_C::ForceJumpNextUpdate' has a wrong offset!");
static_assert(offsetof(UMOVECONTROL_LadderMove_C, MoveLeftFootUp) == 0x0000C8, "Member 'UMOVECONTROL_LadderMove_C::MoveLeftFootUp' has a wrong offset!");
static_assert(offsetof(UMOVECONTROL_LadderMove_C, MoveRightFootUp) == 0x0000D0, "Member 'UMOVECONTROL_LadderMove_C::MoveRightFootUp' has a wrong offset!");
static_assert(offsetof(UMOVECONTROL_LadderMove_C, MoveLeftFootDown) == 0x0000D8, "Member 'UMOVECONTROL_LadderMove_C::MoveLeftFootDown' has a wrong offset!");
static_assert(offsetof(UMOVECONTROL_LadderMove_C, MoveRightFootDown) == 0x0000E0, "Member 'UMOVECONTROL_LadderMove_C::MoveRightFootDown' has a wrong offset!");
static_assert(offsetof(UMOVECONTROL_LadderMove_C, IdleLeftDown) == 0x0000E8, "Member 'UMOVECONTROL_LadderMove_C::IdleLeftDown' has a wrong offset!");
static_assert(offsetof(UMOVECONTROL_LadderMove_C, IdleRightDown) == 0x0000F0, "Member 'UMOVECONTROL_LadderMove_C::IdleRightDown' has a wrong offset!");
static_assert(offsetof(UMOVECONTROL_LadderMove_C, WantsToFastClimb) == 0x0000F8, "Member 'UMOVECONTROL_LadderMove_C::WantsToFastClimb' has a wrong offset!");
static_assert(offsetof(UMOVECONTROL_LadderMove_C, IsFastClimbing) == 0x0000F9, "Member 'UMOVECONTROL_LadderMove_C::IsFastClimbing' has a wrong offset!");

}

