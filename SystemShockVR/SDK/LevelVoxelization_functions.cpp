#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: LevelVoxelization

#include "Basic.hpp"

#include "LevelVoxelization_classes.hpp"
#include "LevelVoxelization_parameters.hpp"


namespace SDK
{

// Function LevelVoxelization.LevelVoxelizationData.GetBlendedVoxelMeshSurfaceNormal
// (Final, Native, Public, HasOutParams, HasDefaults, BlueprintCallable, Const)
// Parameters:
// struct FTransform                       SourceTransform                                        (ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
// float                                   SnapDistance                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   BlendAmount                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TArray<struct FVector>                  LocalTraceOffsets                                      (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
// struct FVector                          LevelOffset                                            (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bIncludePerspectiveMeshes                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bDebugDrawTraces                                       (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector                          OutNormal                                              (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   OutDistance                                            (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool ULevelVoxelizationData::GetBlendedVoxelMeshSurfaceNormal(const struct FTransform& SourceTransform, float SnapDistance, float BlendAmount, const TArray<struct FVector>& LocalTraceOffsets, const struct FVector& LevelOffset, bool bIncludePerspectiveMeshes, bool bDebugDrawTraces, struct FVector* OutNormal, float* OutDistance) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("LevelVoxelizationData", "GetBlendedVoxelMeshSurfaceNormal");

	Params::LevelVoxelizationData_GetBlendedVoxelMeshSurfaceNormal Parms{};

	Parms.SourceTransform = std::move(SourceTransform);
	Parms.SnapDistance = SnapDistance;
	Parms.BlendAmount = BlendAmount;
	Parms.LocalTraceOffsets = std::move(LocalTraceOffsets);
	Parms.LevelOffset = std::move(LevelOffset);
	Parms.bIncludePerspectiveMeshes = bIncludePerspectiveMeshes;
	Parms.bDebugDrawTraces = bDebugDrawTraces;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (OutNormal != nullptr)
		*OutNormal = std::move(Parms.OutNormal);

	if (OutDistance != nullptr)
		*OutDistance = Parms.OutDistance;

	return Parms.ReturnValue;
}


// Function LevelVoxelization.LevelVoxelizationData.GetColumnLocationFromVoxelLocation2D
// (Final, Native, Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// struct FIntPoint                        VoxelLocation2D                                        (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FIntPoint                        ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

struct FIntPoint ULevelVoxelizationData::GetColumnLocationFromVoxelLocation2D(const struct FIntPoint& VoxelLocation2D) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("LevelVoxelizationData", "GetColumnLocationFromVoxelLocation2D");

	Params::LevelVoxelizationData_GetColumnLocationFromVoxelLocation2D Parms{};

	Parms.VoxelLocation2D = std::move(VoxelLocation2D);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function LevelVoxelization.LevelVoxelizationData.GetNeighborWallLocations
// (Final, Native, Public, HasOutParams, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// struct FVoxelWallLocation               WallLocation                                           (ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TArray<struct FVoxelWallLocation>       ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)

TArray<struct FVoxelWallLocation> ULevelVoxelizationData::GetNeighborWallLocations(const struct FVoxelWallLocation& WallLocation) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("LevelVoxelizationData", "GetNeighborWallLocations");

	Params::LevelVoxelizationData_GetNeighborWallLocations Parms{};

	Parms.WallLocation = std::move(WallLocation);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function LevelVoxelization.LevelVoxelizationData.GetPortalCount
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// int32                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

int32 ULevelVoxelizationData::GetPortalCount() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("LevelVoxelizationData", "GetPortalCount");

	Params::LevelVoxelizationData_GetPortalCount Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function LevelVoxelization.LevelVoxelizationData.GetRegionRowHandleForWorldLocation
// (Final, Native, Public, HasDefaults, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// struct FVector                          WorldLocation                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector                          WorldForwardVector                                     (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector                          WorldRightVector                                       (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector                          LevelOffset                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FDataTableRowHandle              ReturnValue                                            (Parm, OutParm, ReturnParm, NoDestructor, NativeAccessSpecifierPublic)

struct FDataTableRowHandle ULevelVoxelizationData::GetRegionRowHandleForWorldLocation(const struct FVector& WorldLocation, const struct FVector& WorldForwardVector, const struct FVector& WorldRightVector, const struct FVector& LevelOffset) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("LevelVoxelizationData", "GetRegionRowHandleForWorldLocation");

	Params::LevelVoxelizationData_GetRegionRowHandleForWorldLocation Parms{};

	Parms.WorldLocation = std::move(WorldLocation);
	Parms.WorldForwardVector = std::move(WorldForwardVector);
	Parms.WorldRightVector = std::move(WorldRightVector);
	Parms.LevelOffset = std::move(LevelOffset);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function LevelVoxelization.LevelVoxelizationData.GetRegionRowHandleFromColumnLocation
// (Final, Native, Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// struct FIntPoint                        ColumnLocation                                         (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FDataTableRowHandle              ReturnValue                                            (Parm, OutParm, ReturnParm, NoDestructor, NativeAccessSpecifierPublic)

struct FDataTableRowHandle ULevelVoxelizationData::GetRegionRowHandleFromColumnLocation(const struct FIntPoint& ColumnLocation) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("LevelVoxelizationData", "GetRegionRowHandleFromColumnLocation");

	Params::LevelVoxelizationData_GetRegionRowHandleFromColumnLocation Parms{};

	Parms.ColumnLocation = std::move(ColumnLocation);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function LevelVoxelization.LevelVoxelizationData.GetRoomCount
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// int32                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

int32 ULevelVoxelizationData::GetRoomCount() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("LevelVoxelizationData", "GetRoomCount");

	Params::LevelVoxelizationData_GetRoomCount Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function LevelVoxelization.LevelVoxelizationData.GetVoxelLocation2DFromColumnLocation
// (Final, Native, Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// struct FIntPoint                        ColumnLocation                                         (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FIntPoint                        ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

struct FIntPoint ULevelVoxelizationData::GetVoxelLocation2DFromColumnLocation(const struct FIntPoint& ColumnLocation) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("LevelVoxelizationData", "GetVoxelLocation2DFromColumnLocation");

	Params::LevelVoxelizationData_GetVoxelLocation2DFromColumnLocation Parms{};

	Parms.ColumnLocation = std::move(ColumnLocation);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function LevelVoxelization.LevelVoxelizationData.GetVoxelMeshSurfaceTransform
// (Final, Native, Public, HasOutParams, HasDefaults, BlueprintCallable, Const)
// Parameters:
// struct FTransform                       SourceTransform                                        (ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
// float                                   SourceRadius                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   SnapDistance                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector                          DesiredTranslation                                     (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector                          LevelOffset                                            (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bIncludePerspectiveMeshes                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bClosestSurfaceFallback                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FTransform                       OutSurfaceTransform                                    (Parm, OutParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool ULevelVoxelizationData::GetVoxelMeshSurfaceTransform(const struct FTransform& SourceTransform, float SourceRadius, float SnapDistance, const struct FVector& DesiredTranslation, const struct FVector& LevelOffset, bool bIncludePerspectiveMeshes, bool bClosestSurfaceFallback, struct FTransform* OutSurfaceTransform) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("LevelVoxelizationData", "GetVoxelMeshSurfaceTransform");

	Params::LevelVoxelizationData_GetVoxelMeshSurfaceTransform Parms{};

	Parms.SourceTransform = std::move(SourceTransform);
	Parms.SourceRadius = SourceRadius;
	Parms.SnapDistance = SnapDistance;
	Parms.DesiredTranslation = std::move(DesiredTranslation);
	Parms.LevelOffset = std::move(LevelOffset);
	Parms.bIncludePerspectiveMeshes = bIncludePerspectiveMeshes;
	Parms.bClosestSurfaceFallback = bClosestSurfaceFallback;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (OutSurfaceTransform != nullptr)
		*OutSurfaceTransform = std::move(Parms.OutSurfaceTransform);

	return Parms.ReturnValue;
}


// Function LevelVoxelization.LevelVoxelizationData.GetWallComponentCount
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// int32                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

int32 ULevelVoxelizationData::GetWallComponentCount() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("LevelVoxelizationData", "GetWallComponentCount");

	Params::LevelVoxelizationData_GetWallComponentCount Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function LevelVoxelization.LevelVoxelizationData.GetWallComponentIndexAtWallLocation
// (Final, Native, Public, HasOutParams, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// struct FVoxelWallLocation               WallLocation                                           (ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

int32 ULevelVoxelizationData::GetWallComponentIndexAtWallLocation(const struct FVoxelWallLocation& WallLocation) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("LevelVoxelizationData", "GetWallComponentIndexAtWallLocation");

	Params::LevelVoxelizationData_GetWallComponentIndexAtWallLocation Parms{};

	Parms.WallLocation = std::move(WallLocation);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function LevelVoxelization.LevelVoxelizationData.GetWallComponentPathNameFromIndex
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// int32                                   ComponentIndex                                         (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FString                           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class FString ULevelVoxelizationData::GetWallComponentPathNameFromIndex(int32 ComponentIndex) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("LevelVoxelizationData", "GetWallComponentPathNameFromIndex");

	Params::LevelVoxelizationData_GetWallComponentPathNameFromIndex Parms{};

	Parms.ComponentIndex = ComponentIndex;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function LevelVoxelization.LevelVoxelizationData.GetWallLocationForPrimitiveComponentAtVoxelLocation
// (Final, Native, Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class UPrimitiveComponent*              PrimitiveComponent                                     (Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FIntVector                       VoxelLocation                                          (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UObject*                          WorldContextObject                                     (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVoxelWallLocation               ReturnValue                                            (Parm, OutParm, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

struct FVoxelWallLocation ULevelVoxelizationData::GetWallLocationForPrimitiveComponentAtVoxelLocation(class UPrimitiveComponent* PrimitiveComponent, const struct FIntVector& VoxelLocation, class UObject* WorldContextObject) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("LevelVoxelizationData", "GetWallLocationForPrimitiveComponentAtVoxelLocation");

	Params::LevelVoxelizationData_GetWallLocationForPrimitiveComponentAtVoxelLocation Parms{};

	Parms.PrimitiveComponent = PrimitiveComponent;
	Parms.VoxelLocation = std::move(VoxelLocation);
	Parms.WorldContextObject = WorldContextObject;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function LevelVoxelization.LevelVoxelizationData.GetWallLocationsForPrimitiveComponentAtVoxelLocations
// (Final, Native, Public, HasOutParams, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class UPrimitiveComponent*              PrimitiveComponent                                     (Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TArray<struct FIntVector>               VoxelLocations                                         (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
// class UObject*                          WorldContextObject                                     (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TArray<struct FVoxelWallLocation>       ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)

TArray<struct FVoxelWallLocation> ULevelVoxelizationData::GetWallLocationsForPrimitiveComponentAtVoxelLocations(class UPrimitiveComponent* PrimitiveComponent, const TArray<struct FIntVector>& VoxelLocations, class UObject* WorldContextObject) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("LevelVoxelizationData", "GetWallLocationsForPrimitiveComponentAtVoxelLocations");

	Params::LevelVoxelizationData_GetWallLocationsForPrimitiveComponentAtVoxelLocations Parms{};

	Parms.PrimitiveComponent = PrimitiveComponent;
	Parms.VoxelLocations = std::move(VoxelLocations);
	Parms.WorldContextObject = WorldContextObject;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function LevelVoxelization.LevelVoxelizationData.GetWallLocationsForPrimitiveComponentInVoxelBounds
// (Final, Native, Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class UPrimitiveComponent*              PrimitiveComponent                                     (Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FIntVector                       MinVoxelLocation                                       (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FIntVector                       MaxVoxelLocation                                       (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UObject*                          WorldContextObject                                     (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TArray<struct FVoxelWallLocation>       ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)

TArray<struct FVoxelWallLocation> ULevelVoxelizationData::GetWallLocationsForPrimitiveComponentInVoxelBounds(class UPrimitiveComponent* PrimitiveComponent, const struct FIntVector& MinVoxelLocation, const struct FIntVector& MaxVoxelLocation, class UObject* WorldContextObject) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("LevelVoxelizationData", "GetWallLocationsForPrimitiveComponentInVoxelBounds");

	Params::LevelVoxelizationData_GetWallLocationsForPrimitiveComponentInVoxelBounds Parms{};

	Parms.PrimitiveComponent = PrimitiveComponent;
	Parms.MinVoxelLocation = std::move(MinVoxelLocation);
	Parms.MaxVoxelLocation = std::move(MaxVoxelLocation);
	Parms.WorldContextObject = WorldContextObject;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function LevelVoxelization.LevelVoxelizationData.RayTraceThroughVoxels
// (Final, Native, Public, HasOutParams, HasDefaults, BlueprintCallable, Const)
// Parameters:
// struct FVector                          SourceLocation                                         (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector                          TraceDirection                                         (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   TraceDistance                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector                          LevelOffset                                            (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FIntVector                       OutHitVoxelLocation                                    (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector                          OutWorldLocation                                       (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   OutHitPolygonIndex                                     (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool ULevelVoxelizationData::RayTraceThroughVoxels(const struct FVector& SourceLocation, const struct FVector& TraceDirection, float TraceDistance, const struct FVector& LevelOffset, struct FIntVector* OutHitVoxelLocation, struct FVector* OutWorldLocation, int32* OutHitPolygonIndex) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("LevelVoxelizationData", "RayTraceThroughVoxels");

	Params::LevelVoxelizationData_RayTraceThroughVoxels Parms{};

	Parms.SourceLocation = std::move(SourceLocation);
	Parms.TraceDirection = std::move(TraceDirection);
	Parms.TraceDistance = TraceDistance;
	Parms.LevelOffset = std::move(LevelOffset);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (OutHitVoxelLocation != nullptr)
		*OutHitVoxelLocation = std::move(Parms.OutHitVoxelLocation);

	if (OutWorldLocation != nullptr)
		*OutWorldLocation = std::move(Parms.OutWorldLocation);

	if (OutHitPolygonIndex != nullptr)
		*OutHitPolygonIndex = Parms.OutHitPolygonIndex;

	return Parms.ReturnValue;
}


// Function LevelVoxelization.LevelVoxelizationData.RayTraverseThroughVoxels
// (Final, Native, Public, HasOutParams, HasDefaults, BlueprintCallable, Const)
// Parameters:
// struct FVector                          SourceLocation                                         (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector                          TraceDirection                                         (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   TraceDistance                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector                          LevelOffset                                            (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FIntVector                       OutHitVoxelLocation                                    (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool ULevelVoxelizationData::RayTraverseThroughVoxels(const struct FVector& SourceLocation, const struct FVector& TraceDirection, float TraceDistance, const struct FVector& LevelOffset, struct FIntVector* OutHitVoxelLocation) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("LevelVoxelizationData", "RayTraverseThroughVoxels");

	Params::LevelVoxelizationData_RayTraverseThroughVoxels Parms{};

	Parms.SourceLocation = std::move(SourceLocation);
	Parms.TraceDirection = std::move(TraceDirection);
	Parms.TraceDistance = TraceDistance;
	Parms.LevelOffset = std::move(LevelOffset);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (OutHitVoxelLocation != nullptr)
		*OutHitVoxelLocation = std::move(Parms.OutHitVoxelLocation);

	return Parms.ReturnValue;
}


// Function LevelVoxelization.BatchedLevelVoxelization.GetVoxelDataForLevelByName
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class FName                             LevelName                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class ULevelVoxelizationData*           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class ULevelVoxelizationData* UBatchedLevelVoxelization::GetVoxelDataForLevelByName(class FName LevelName) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BatchedLevelVoxelization", "GetVoxelDataForLevelByName");

	Params::BatchedLevelVoxelization_GetVoxelDataForLevelByName Parms{};

	Parms.LevelName = LevelName;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function LevelVoxelization.BatchedLevelVoxelization.GetVoxelLocation2DFromWorldLocation2D
// (Final, Native, Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// struct FVector2D                        WorldLocation2D                                        (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector2D                        LevelOffset2D                                          (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FIntPoint                        ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

struct FIntPoint UBatchedLevelVoxelization::GetVoxelLocation2DFromWorldLocation2D(const struct FVector2D& WorldLocation2D, const struct FVector2D& LevelOffset2D) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BatchedLevelVoxelization", "GetVoxelLocation2DFromWorldLocation2D");

	Params::BatchedLevelVoxelization_GetVoxelLocation2DFromWorldLocation2D Parms{};

	Parms.WorldLocation2D = std::move(WorldLocation2D);
	Parms.LevelOffset2D = std::move(LevelOffset2D);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function LevelVoxelization.BatchedLevelVoxelization.GetVoxelLocationFromWorldLocation
// (Final, Native, Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// struct FVector                          WorldLocation                                          (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector                          LevelOffset                                            (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FIntVector                       ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

struct FIntVector UBatchedLevelVoxelization::GetVoxelLocationFromWorldLocation(const struct FVector& WorldLocation, const struct FVector& LevelOffset) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BatchedLevelVoxelization", "GetVoxelLocationFromWorldLocation");

	Params::BatchedLevelVoxelization_GetVoxelLocationFromWorldLocation Parms{};

	Parms.WorldLocation = std::move(WorldLocation);
	Parms.LevelOffset = std::move(LevelOffset);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function LevelVoxelization.BatchedLevelVoxelization.GetWorldCenterLocation2DFromVoxelLocation2D
// (Final, Native, Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// struct FIntPoint                        VoxelLocation2D                                        (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector2D                        LevelOffset2D                                          (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector2D                        ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

struct FVector2D UBatchedLevelVoxelization::GetWorldCenterLocation2DFromVoxelLocation2D(const struct FIntPoint& VoxelLocation2D, const struct FVector2D& LevelOffset2D) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BatchedLevelVoxelization", "GetWorldCenterLocation2DFromVoxelLocation2D");

	Params::BatchedLevelVoxelization_GetWorldCenterLocation2DFromVoxelLocation2D Parms{};

	Parms.VoxelLocation2D = std::move(VoxelLocation2D);
	Parms.LevelOffset2D = std::move(LevelOffset2D);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function LevelVoxelization.BatchedLevelVoxelization.GetWorldCenterLocationFromVoxelLocation
// (Final, Native, Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// struct FIntVector                       VoxelLocation                                          (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector                          LevelOffset                                            (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector                          ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

struct FVector UBatchedLevelVoxelization::GetWorldCenterLocationFromVoxelLocation(const struct FIntVector& VoxelLocation, const struct FVector& LevelOffset) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BatchedLevelVoxelization", "GetWorldCenterLocationFromVoxelLocation");

	Params::BatchedLevelVoxelization_GetWorldCenterLocationFromVoxelLocation Parms{};

	Parms.VoxelLocation = std::move(VoxelLocation);
	Parms.LevelOffset = std::move(LevelOffset);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function LevelVoxelization.BatchedLevelVoxelization.GetWorldCornerLocationFromVoxelLocation
// (Final, Native, Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// struct FIntVector                       VoxelLocation                                          (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector                          LevelOffset                                            (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector                          ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

struct FVector UBatchedLevelVoxelization::GetWorldCornerLocationFromVoxelLocation(const struct FIntVector& VoxelLocation, const struct FVector& LevelOffset) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BatchedLevelVoxelization", "GetWorldCornerLocationFromVoxelLocation");

	Params::BatchedLevelVoxelization_GetWorldCornerLocationFromVoxelLocation Parms{};

	Parms.VoxelLocation = std::move(VoxelLocation);
	Parms.LevelOffset = std::move(LevelOffset);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function LevelVoxelization.VoxelActorComponent.GetVoxelLevelManager
// (Event, Protected, BlueprintEvent)
// Parameters:
// class UVoxelLevelManager*               ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UVoxelLevelManager* UVoxelActorComponent::GetVoxelLevelManager()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VoxelActorComponent", "GetVoxelLevelManager");

	Params::VoxelActorComponent_GetVoxelLevelManager Parms{};

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function LevelVoxelization.VoxelActorComponent.SetHalfExtent
// (Final, Native, Protected, HasDefaults, BlueprintCallable)
// Parameters:
// struct FVector                          InHalfExtent                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UVoxelActorComponent::SetHalfExtent(const struct FVector& InHalfExtent)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VoxelActorComponent", "SetHalfExtent");

	Params::VoxelActorComponent_SetHalfExtent Parms{};

	Parms.InHalfExtent = std::move(InHalfExtent);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function LevelVoxelization.CullableVoxelActorComponent.SetRoomAssignmentType
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// ECullableRoomAssignmentType             NewAssignmentType                                      (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UCullableVoxelActorComponent::SetRoomAssignmentType(ECullableRoomAssignmentType NewAssignmentType)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CullableVoxelActorComponent", "SetRoomAssignmentType");

	Params::CullableVoxelActorComponent_SetRoomAssignmentType Parms{};

	Parms.NewAssignmentType = NewAssignmentType;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function LevelVoxelization.CullableVoxelActorComponent.UpdateSunLightChannel
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UCullableVoxelActorComponent::UpdateSunLightChannel()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CullableVoxelActorComponent", "UpdateSunLightChannel");

	Params::CullableVoxelActorComponent_UpdateSunLightChannel Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function LevelVoxelization.CullableVoxelActorComponent.IsVisibleToCullingCamera
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UCullableVoxelActorComponent::IsVisibleToCullingCamera() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CullableVoxelActorComponent", "IsVisibleToCullingCamera");

	Params::CullableVoxelActorComponent_IsVisibleToCullingCamera Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function LevelVoxelization.CullableExteriorActorComponent.GetVoxelLevelManager
// (Event, Protected, BlueprintEvent)
// Parameters:
// class UVoxelLevelManager*               ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UVoxelLevelManager* UCullableExteriorActorComponent::GetVoxelLevelManager()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CullableExteriorActorComponent", "GetVoxelLevelManager");

	Params::CullableExteriorActorComponent_GetVoxelLevelManager Parms{};

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function LevelVoxelization.ScannableVoxelActorComponent.GetVoxelLevelManager
// (Event, Protected, BlueprintEvent)
// Parameters:
// class UVoxelLevelManager*               ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UVoxelLevelManager* UScannableVoxelActorComponent::GetVoxelLevelManager()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ScannableVoxelActorComponent", "GetVoxelLevelManager");

	Params::ScannableVoxelActorComponent_GetVoxelLevelManager Parms{};

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function LevelVoxelization.ScannableVoxelActorComponent.SetBillboardIconMaterial
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class UMaterialInterface*               NewMaterial                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UScannableVoxelActorComponent::SetBillboardIconMaterial(class UMaterialInterface* NewMaterial)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ScannableVoxelActorComponent", "SetBillboardIconMaterial");

	Params::ScannableVoxelActorComponent_SetBillboardIconMaterial Parms{};

	Parms.NewMaterial = NewMaterial;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function LevelVoxelization.ScannableVoxelActorComponent.SetBillboardIconShouldRotate
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// bool                                    bShouldRotate                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UScannableVoxelActorComponent::SetBillboardIconShouldRotate(bool bShouldRotate)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ScannableVoxelActorComponent", "SetBillboardIconShouldRotate");

	Params::ScannableVoxelActorComponent_SetBillboardIconShouldRotate Parms{};

	Parms.bShouldRotate = bShouldRotate;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function LevelVoxelization.ScannableVoxelActorComponent.SetInitialMeshMaterial
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class UMaterialInterface*               NewMaterial                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UScannableVoxelActorComponent::SetInitialMeshMaterial(class UMaterialInterface* NewMaterial)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ScannableVoxelActorComponent", "SetInitialMeshMaterial");

	Params::ScannableVoxelActorComponent_SetInitialMeshMaterial Parms{};

	Parms.NewMaterial = NewMaterial;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function LevelVoxelization.ScannableVoxelActorComponent.SetInitialScannableColumnFlags
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// bool                                    bInStaticColumnLocation                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bInBlockScanner                                        (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bInWallObject                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UScannableVoxelActorComponent::SetInitialScannableColumnFlags(bool bInStaticColumnLocation, bool bInBlockScanner, bool bInWallObject)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ScannableVoxelActorComponent", "SetInitialScannableColumnFlags");

	Params::ScannableVoxelActorComponent_SetInitialScannableColumnFlags Parms{};

	Parms.bInStaticColumnLocation = bInStaticColumnLocation;
	Parms.bInBlockScanner = bInBlockScanner;
	Parms.bInWallObject = bInWallObject;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function LevelVoxelization.ScannableVoxelActorComponent.SetScannableEnabled
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// bool                                    bState                                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UScannableVoxelActorComponent::SetScannableEnabled(bool bState)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ScannableVoxelActorComponent", "SetScannableEnabled");

	Params::ScannableVoxelActorComponent_SetScannableEnabled Parms{};

	Parms.bState = bState;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function LevelVoxelization.ScannableVoxelActorComponent.SetScannableFilterTag
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class FName                             NewTag                                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UScannableVoxelActorComponent::SetScannableFilterTag(class FName NewTag)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ScannableVoxelActorComponent", "SetScannableFilterTag");

	Params::ScannableVoxelActorComponent_SetScannableFilterTag Parms{};

	Parms.NewTag = NewTag;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function LevelVoxelization.ScannableVoxelActorComponent.SetScannableProceduralMeshData
// (Final, Native, Public, HasDefaults, BlueprintCallable)
// Parameters:
// struct FVector                          NewBoxHalfExtents                                      (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FColor                           NewMeshColor                                           (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UMaterialInterface*               NewMaterial                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UScannableVoxelActorComponent::SetScannableProceduralMeshData(const struct FVector& NewBoxHalfExtents, const struct FColor& NewMeshColor, class UMaterialInterface* NewMaterial)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ScannableVoxelActorComponent", "SetScannableProceduralMeshData");

	Params::ScannableVoxelActorComponent_SetScannableProceduralMeshData Parms{};

	Parms.NewBoxHalfExtents = std::move(NewBoxHalfExtents);
	Parms.NewMeshColor = std::move(NewMeshColor);
	Parms.NewMaterial = NewMaterial;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function LevelVoxelization.ScannableVoxelActorComponent.ShowMeshComponents
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// bool                                    bShow                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UScannableVoxelActorComponent::ShowMeshComponents(bool bShow)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ScannableVoxelActorComponent", "ShowMeshComponents");

	Params::ScannableVoxelActorComponent_ShowMeshComponents Parms{};

	Parms.bShow = bShow;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function LevelVoxelization.ScannableVoxelActorComponent.ShowMeshComponentsInitially
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// bool                                    bShow                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UScannableVoxelActorComponent::ShowMeshComponentsInitially(bool bShow)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ScannableVoxelActorComponent", "ShowMeshComponentsInitially");

	Params::ScannableVoxelActorComponent_ShowMeshComponentsInitially Parms{};

	Parms.bShow = bShow;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function LevelVoxelization.VoxelAudioComponent.FadeIn
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// float                                   FadeInDuration                                         (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   FadeVolumeLevel                                        (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   StartTime                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// EAudioFaderCurve                        FadeCurve                                              (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UVoxelAudioComponent::FadeIn(float FadeInDuration, float FadeVolumeLevel, float StartTime, const EAudioFaderCurve FadeCurve)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VoxelAudioComponent", "FadeIn");

	Params::VoxelAudioComponent_FadeIn Parms{};

	Parms.FadeInDuration = FadeInDuration;
	Parms.FadeVolumeLevel = FadeVolumeLevel;
	Parms.StartTime = StartTime;
	Parms.FadeCurve = FadeCurve;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function LevelVoxelization.VoxelAudioComponent.FadeOut
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// float                                   FadeOutDuration                                        (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// EAudioFaderCurve                        FadeCurve                                              (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UVoxelAudioComponent::FadeOut(float FadeOutDuration, const EAudioFaderCurve FadeCurve)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VoxelAudioComponent", "FadeOut");

	Params::VoxelAudioComponent_FadeOut Parms{};

	Parms.FadeOutDuration = FadeOutDuration;
	Parms.FadeCurve = FadeCurve;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function LevelVoxelization.VoxelAudioComponent.Play
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// float                                   StartTime                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UVoxelAudioComponent::Play(float StartTime)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VoxelAudioComponent", "Play");

	Params::VoxelAudioComponent_Play Parms{};

	Parms.StartTime = StartTime;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function LevelVoxelization.VoxelAudioComponent.SetAutoDestroy
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// bool                                    bNewAutoDestroy                                        (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UVoxelAudioComponent::SetAutoDestroy(bool bNewAutoDestroy)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VoxelAudioComponent", "SetAutoDestroy");

	Params::VoxelAudioComponent_SetAutoDestroy Parms{};

	Parms.bNewAutoDestroy = bNewAutoDestroy;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function LevelVoxelization.VoxelAudioComponent.SetBoolParameter
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class FName                             InName                                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    InBool                                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UVoxelAudioComponent::SetBoolParameter(class FName InName, bool InBool)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VoxelAudioComponent", "SetBoolParameter");

	Params::VoxelAudioComponent_SetBoolParameter Parms{};

	Parms.InName = InName;
	Parms.InBool = InBool;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function LevelVoxelization.VoxelAudioComponent.SetDefaultOcclusion
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// float                                   NewValue                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UVoxelAudioComponent::SetDefaultOcclusion(float NewValue)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VoxelAudioComponent", "SetDefaultOcclusion");

	Params::VoxelAudioComponent_SetDefaultOcclusion Parms{};

	Parms.NewValue = NewValue;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function LevelVoxelization.VoxelAudioComponent.SetFloatParameter
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class FName                             InName                                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   InFloat                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UVoxelAudioComponent::SetFloatParameter(class FName InName, float InFloat)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VoxelAudioComponent", "SetFloatParameter");

	Params::VoxelAudioComponent_SetFloatParameter Parms{};

	Parms.InName = InName;
	Parms.InFloat = InFloat;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function LevelVoxelization.VoxelAudioComponent.SetIntegerParameter
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class FName                             InName                                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   InInt                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UVoxelAudioComponent::SetIntegerParameter(class FName InName, int32 InInt)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VoxelAudioComponent", "SetIntegerParameter");

	Params::VoxelAudioComponent_SetIntegerParameter Parms{};

	Parms.InName = InName;
	Parms.InInt = InInt;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function LevelVoxelization.VoxelAudioComponent.SetMaxVoiceCount
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// int32                                   NewCount                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UVoxelAudioComponent::SetMaxVoiceCount(int32 NewCount)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VoxelAudioComponent", "SetMaxVoiceCount");

	Params::VoxelAudioComponent_SetMaxVoiceCount Parms{};

	Parms.NewCount = NewCount;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function LevelVoxelization.VoxelAudioComponent.SetPitchMultiplier
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// float                                   NewValue                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UVoxelAudioComponent::SetPitchMultiplier(float NewValue)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VoxelAudioComponent", "SetPitchMultiplier");

	Params::VoxelAudioComponent_SetPitchMultiplier Parms{};

	Parms.NewValue = NewValue;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function LevelVoxelization.VoxelAudioComponent.SetSound
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class USoundBase*                       NewSound                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UVoxelAudioComponent::SetSound(class USoundBase* NewSound)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VoxelAudioComponent", "SetSound");

	Params::VoxelAudioComponent_SetSound Parms{};

	Parms.NewSound = NewSound;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function LevelVoxelization.VoxelAudioComponent.SetSoundAndFadeIn
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class USoundBase*                       NewSound                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   FadeInDuration                                         (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   FadeVolumeLevel                                        (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   StartTime                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// EAudioFaderCurve                        FadeCurve                                              (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UVoxelAudioComponent::SetSoundAndFadeIn(class USoundBase* NewSound, float FadeInDuration, float FadeVolumeLevel, float StartTime, const EAudioFaderCurve FadeCurve)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VoxelAudioComponent", "SetSoundAndFadeIn");

	Params::VoxelAudioComponent_SetSoundAndFadeIn Parms{};

	Parms.NewSound = NewSound;
	Parms.FadeInDuration = FadeInDuration;
	Parms.FadeVolumeLevel = FadeVolumeLevel;
	Parms.StartTime = StartTime;
	Parms.FadeCurve = FadeCurve;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function LevelVoxelization.VoxelAudioComponent.SetSoundAndPlay
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class USoundBase*                       NewSound                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   StartTime                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UVoxelAudioComponent::SetSoundAndPlay(class USoundBase* NewSound, float StartTime)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VoxelAudioComponent", "SetSoundAndPlay");

	Params::VoxelAudioComponent_SetSoundAndPlay Parms{};

	Parms.NewSound = NewSound;
	Parms.StartTime = StartTime;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function LevelVoxelization.VoxelAudioComponent.SetVolumeMultiplier
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// float                                   NewValue                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UVoxelAudioComponent::SetVolumeMultiplier(float NewValue)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VoxelAudioComponent", "SetVolumeMultiplier");

	Params::VoxelAudioComponent_SetVolumeMultiplier Parms{};

	Parms.NewValue = NewValue;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function LevelVoxelization.VoxelAudioComponent.Stop
// (Final, Native, Public, BlueprintCallable)

void UVoxelAudioComponent::Stop()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VoxelAudioComponent", "Stop");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function LevelVoxelization.VoxelAudioComponent.GetSoundElapsedTime
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

float UVoxelAudioComponent::GetSoundElapsedTime() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VoxelAudioComponent", "GetSoundElapsedTime");

	Params::VoxelAudioComponent_GetSoundElapsedTime Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function LevelVoxelization.VoxelAudioComponent.GetSoundRange
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

float UVoxelAudioComponent::GetSoundRange() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VoxelAudioComponent", "GetSoundRange");

	Params::VoxelAudioComponent_GetSoundRange Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function LevelVoxelization.VoxelAudioComponent.IsSoundPlaying
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UVoxelAudioComponent::IsSoundPlaying() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VoxelAudioComponent", "IsSoundPlaying");

	Params::VoxelAudioComponent_IsSoundPlaying Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function LevelVoxelization.VoxelCullableManager.AddHiddenEffectsComponents
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// TArray<class UFXSystemComponent*>       EffectsComponents                                      (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, ContainsInstancedReference, NativeAccessSpecifierPublic)

void UVoxelCullableManager::AddHiddenEffectsComponents(const TArray<class UFXSystemComponent*>& EffectsComponents)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VoxelCullableManager", "AddHiddenEffectsComponents");

	Params::VoxelCullableManager_AddHiddenEffectsComponents Parms{};

	Parms.EffectsComponents = std::move(EffectsComponents);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function LevelVoxelization.VoxelCullableManager.AddHiddenLightComponents
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// TArray<class ULocalLightComponent*>     LightComponents                                        (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, ContainsInstancedReference, NativeAccessSpecifierPublic)

void UVoxelCullableManager::AddHiddenLightComponents(const TArray<class ULocalLightComponent*>& LightComponents)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VoxelCullableManager", "AddHiddenLightComponents");

	Params::VoxelCullableManager_AddHiddenLightComponents Parms{};

	Parms.LightComponents = std::move(LightComponents);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function LevelVoxelization.VoxelCullableManager.RemoveHiddenEffectsComponents
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// TArray<class UFXSystemComponent*>       EffectsComponents                                      (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, ContainsInstancedReference, NativeAccessSpecifierPublic)

void UVoxelCullableManager::RemoveHiddenEffectsComponents(const TArray<class UFXSystemComponent*>& EffectsComponents)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VoxelCullableManager", "RemoveHiddenEffectsComponents");

	Params::VoxelCullableManager_RemoveHiddenEffectsComponents Parms{};

	Parms.EffectsComponents = std::move(EffectsComponents);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function LevelVoxelization.VoxelCullableManager.RemoveHiddenLightComponents
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// TArray<class ULocalLightComponent*>     LightComponents                                        (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, ContainsInstancedReference, NativeAccessSpecifierPublic)

void UVoxelCullableManager::RemoveHiddenLightComponents(const TArray<class ULocalLightComponent*>& LightComponents)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VoxelCullableManager", "RemoveHiddenLightComponents");

	Params::VoxelCullableManager_RemoveHiddenLightComponents Parms{};

	Parms.LightComponents = std::move(LightComponents);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function LevelVoxelization.VoxelCullableManager.GetCullableActorsInAudibleRangeToPoint
// (Final, Native, Public, HasOutParams, HasDefaults, BlueprintCallable, Const)
// Parameters:
// struct FVector                          SoundLocation                                          (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   SoundRange                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TArray<TSubclassOf<class AActor>>       FilterByClasses                                        (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, UObjectWrapper, NativeAccessSpecifierPublic)
// TMap<class AActor*, struct FVector2D>   ReturnValue                                            (Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)

TMap<class AActor*, struct FVector2D> UVoxelCullableManager::GetCullableActorsInAudibleRangeToPoint(const struct FVector& SoundLocation, float SoundRange, const TArray<TSubclassOf<class AActor>>& FilterByClasses) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VoxelCullableManager", "GetCullableActorsInAudibleRangeToPoint");

	Params::VoxelCullableManager_GetCullableActorsInAudibleRangeToPoint Parms{};

	Parms.SoundLocation = std::move(SoundLocation);
	Parms.SoundRange = SoundRange;
	Parms.FilterByClasses = std::move(FilterByClasses);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function LevelVoxelization.VoxelCullableManager.GetRoomAudibilityBetweenPoints
// (Final, Native, Public, HasOutParams, HasDefaults, BlueprintCallable, Const)
// Parameters:
// struct FVector                          SourceLocation                                         (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector                          TargetLocation                                         (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   SoundRange                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   OutObstruction                                         (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   OutOcclusion                                           (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UVoxelCullableManager::GetRoomAudibilityBetweenPoints(const struct FVector& SourceLocation, const struct FVector& TargetLocation, float SoundRange, float* OutObstruction, float* OutOcclusion) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VoxelCullableManager", "GetRoomAudibilityBetweenPoints");

	Params::VoxelCullableManager_GetRoomAudibilityBetweenPoints Parms{};

	Parms.SourceLocation = std::move(SourceLocation);
	Parms.TargetLocation = std::move(TargetLocation);
	Parms.SoundRange = SoundRange;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (OutObstruction != nullptr)
		*OutObstruction = Parms.OutObstruction;

	if (OutOcclusion != nullptr)
		*OutOcclusion = Parms.OutOcclusion;

	return Parms.ReturnValue;
}


// Function LevelVoxelization.VoxelCullableManager.GetRoomVisibilityBetweenPoints
// (Final, Native, Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// struct FVector                          SourceLocation                                         (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector                          TargetLocation                                         (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UVoxelCullableManager::GetRoomVisibilityBetweenPoints(const struct FVector& SourceLocation, const struct FVector& TargetLocation) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VoxelCullableManager", "GetRoomVisibilityBetweenPoints");

	Params::VoxelCullableManager_GetRoomVisibilityBetweenPoints Parms{};

	Parms.SourceLocation = std::move(SourceLocation);
	Parms.TargetLocation = std::move(TargetLocation);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function LevelVoxelization.VoxelCullableManager.TraceVoxelVisibilityBetweenPoints
// (Final, Native, Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// struct FVector                          SourceLocation                                         (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector                          TargetLocation                                         (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UVoxelCullableManager::TraceVoxelVisibilityBetweenPoints(const struct FVector& SourceLocation, const struct FVector& TargetLocation) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VoxelCullableManager", "TraceVoxelVisibilityBetweenPoints");

	Params::VoxelCullableManager_TraceVoxelVisibilityBetweenPoints Parms{};

	Parms.SourceLocation = std::move(SourceLocation);
	Parms.TargetLocation = std::move(TargetLocation);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function LevelVoxelization.VoxelCullingComponent.ClearRoomProxyLocation
// (Final, Native, Public, BlueprintCallable)

void UVoxelCullingComponent::ClearRoomProxyLocation()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VoxelCullingComponent", "ClearRoomProxyLocation");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function LevelVoxelization.VoxelCullingComponent.SetRoomProxyLocation
// (Final, Native, Public, HasDefaults, BlueprintCallable)
// Parameters:
// struct FVector                          WorldLocation                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UVoxelCullingComponent::SetRoomProxyLocation(const struct FVector& WorldLocation)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VoxelCullingComponent", "SetRoomProxyLocation");

	Params::VoxelCullingComponent_SetRoomProxyLocation Parms{};

	Parms.WorldLocation = std::move(WorldLocation);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function LevelVoxelization.VoxelCullingComponent.GetFirstCullableActorInLineOfSight
// (Final, Native, Public, HasOutParams, HasDefaults, BlueprintCallable, Const)
// Parameters:
// float                                   TraceRadius                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   TraceDistance                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TArray<TSubclassOf<class AActor>>       FilterByClasses                                        (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, UObjectWrapper, NativeAccessSpecifierPublic)
// struct FVector                          OutTraceHitLocation                                    (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class AActor*                           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class AActor* UVoxelCullingComponent::GetFirstCullableActorInLineOfSight(float TraceRadius, float TraceDistance, const TArray<TSubclassOf<class AActor>>& FilterByClasses, struct FVector* OutTraceHitLocation) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VoxelCullingComponent", "GetFirstCullableActorInLineOfSight");

	Params::VoxelCullingComponent_GetFirstCullableActorInLineOfSight Parms{};

	Parms.TraceRadius = TraceRadius;
	Parms.TraceDistance = TraceDistance;
	Parms.FilterByClasses = std::move(FilterByClasses);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (OutTraceHitLocation != nullptr)
		*OutTraceHitLocation = std::move(Parms.OutTraceHitLocation);

	return Parms.ReturnValue;
}


// Function LevelVoxelization.VoxelCullingComponent.GetRoomPerceptibilityAtWorldLocation
// (Final, Native, Public, HasOutParams, HasDefaults, BlueprintCallable, Const)
// Parameters:
// struct FVector                          WorldLocation                                          (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bOutIsVisible                                          (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bOutIsAudible                                          (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UVoxelCullingComponent::GetRoomPerceptibilityAtWorldLocation(const struct FVector& WorldLocation, bool* bOutIsVisible, bool* bOutIsAudible) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VoxelCullingComponent", "GetRoomPerceptibilityAtWorldLocation");

	Params::VoxelCullingComponent_GetRoomPerceptibilityAtWorldLocation Parms{};

	Parms.WorldLocation = std::move(WorldLocation);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (bOutIsVisible != nullptr)
		*bOutIsVisible = Parms.bOutIsVisible;

	if (bOutIsAudible != nullptr)
		*bOutIsAudible = Parms.bOutIsAudible;
}


// Function LevelVoxelization.VoxelCullingComponent.IsAnyRoomPerceptibleBetweenWorldPoints
// (Final, Native, Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// struct FVector                          SourceLocation                                         (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector                          TargetLocation                                         (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bQueryVisible                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bQueryAudible                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UVoxelCullingComponent::IsAnyRoomPerceptibleBetweenWorldPoints(const struct FVector& SourceLocation, const struct FVector& TargetLocation, bool bQueryVisible, bool bQueryAudible) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VoxelCullingComponent", "IsAnyRoomPerceptibleBetweenWorldPoints");

	Params::VoxelCullingComponent_IsAnyRoomPerceptibleBetweenWorldPoints Parms{};

	Parms.SourceLocation = std::move(SourceLocation);
	Parms.TargetLocation = std::move(TargetLocation);
	Parms.bQueryVisible = bQueryVisible;
	Parms.bQueryAudible = bQueryAudible;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function LevelVoxelization.VoxelLevelFunctionLibrary.SpawnVoxelSoundAtLocation
// (Final, Native, Static, Public, HasDefaults, BlueprintCallable)
// Parameters:
// class UVoxelLevelManager*               LevelManager                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class USoundBase*                       Sound                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector                          WorldLocation                                          (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   VolumeMultiplier                                       (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   PitchMultiplier                                        (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   MaxVoiceCount                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UVoxelAudioComponent*             ReturnValue                                            (ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UVoxelAudioComponent* UVoxelLevelFunctionLibrary::SpawnVoxelSoundAtLocation(class UVoxelLevelManager* LevelManager, class USoundBase* Sound, const struct FVector& WorldLocation, float VolumeMultiplier, float PitchMultiplier, int32 MaxVoiceCount)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("VoxelLevelFunctionLibrary", "SpawnVoxelSoundAtLocation");

	Params::VoxelLevelFunctionLibrary_SpawnVoxelSoundAtLocation Parms{};

	Parms.LevelManager = LevelManager;
	Parms.Sound = Sound;
	Parms.WorldLocation = std::move(WorldLocation);
	Parms.VolumeMultiplier = VolumeMultiplier;
	Parms.PitchMultiplier = PitchMultiplier;
	Parms.MaxVoiceCount = MaxVoiceCount;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function LevelVoxelization.VoxelLevelFunctionLibrary.SpawnVoxelSoundAtLocationFromClass
// (Final, Native, Static, Public, HasDefaults, BlueprintCallable)
// Parameters:
// class UObject*                          WorldContextObject                                     (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TSubclassOf<class UVoxelAudioComponent> ComponentClass                                         (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class USoundBase*                       Sound                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector                          WorldLocation                                          (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   VolumeMultiplier                                       (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   PitchMultiplier                                        (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   MaxVoiceCount                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UVoxelAudioComponent*             ReturnValue                                            (ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UVoxelAudioComponent* UVoxelLevelFunctionLibrary::SpawnVoxelSoundAtLocationFromClass(const class UObject* WorldContextObject, TSubclassOf<class UVoxelAudioComponent> ComponentClass, class USoundBase* Sound, const struct FVector& WorldLocation, float VolumeMultiplier, float PitchMultiplier, int32 MaxVoiceCount)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("VoxelLevelFunctionLibrary", "SpawnVoxelSoundAtLocationFromClass");

	Params::VoxelLevelFunctionLibrary_SpawnVoxelSoundAtLocationFromClass Parms{};

	Parms.WorldContextObject = WorldContextObject;
	Parms.ComponentClass = ComponentClass;
	Parms.Sound = Sound;
	Parms.WorldLocation = std::move(WorldLocation);
	Parms.VolumeMultiplier = VolumeMultiplier;
	Parms.PitchMultiplier = PitchMultiplier;
	Parms.MaxVoiceCount = MaxVoiceCount;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function LevelVoxelization.VoxelLevelFunctionLibrary.SpawnVoxelSoundAttached
// (Final, Native, Static, Public, HasDefaults, BlueprintCallable)
// Parameters:
// class UVoxelLevelManager*               LevelManager                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class USoundBase*                       Sound                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class USceneComponent*                  AttachToComponent                                      (Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FName                             AttachPointName                                        (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector                          RelativeLocation                                       (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FRotator                         RelativeRotation                                       (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, NativeAccessSpecifierPublic)
// float                                   VolumeMultiplier                                       (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   PitchMultiplier                                        (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   MaxVoiceCount                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bAutoDestroy                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UVoxelAudioComponent*             ReturnValue                                            (ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UVoxelAudioComponent* UVoxelLevelFunctionLibrary::SpawnVoxelSoundAttached(class UVoxelLevelManager* LevelManager, class USoundBase* Sound, class USceneComponent* AttachToComponent, class FName AttachPointName, const struct FVector& RelativeLocation, const struct FRotator& RelativeRotation, float VolumeMultiplier, float PitchMultiplier, int32 MaxVoiceCount, bool bAutoDestroy)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("VoxelLevelFunctionLibrary", "SpawnVoxelSoundAttached");

	Params::VoxelLevelFunctionLibrary_SpawnVoxelSoundAttached Parms{};

	Parms.LevelManager = LevelManager;
	Parms.Sound = Sound;
	Parms.AttachToComponent = AttachToComponent;
	Parms.AttachPointName = AttachPointName;
	Parms.RelativeLocation = std::move(RelativeLocation);
	Parms.RelativeRotation = std::move(RelativeRotation);
	Parms.VolumeMultiplier = VolumeMultiplier;
	Parms.PitchMultiplier = PitchMultiplier;
	Parms.MaxVoiceCount = MaxVoiceCount;
	Parms.bAutoDestroy = bAutoDestroy;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function LevelVoxelization.VoxelLevelFunctionLibrary.SpawnVoxelSoundAttachedFromClass
// (Final, Native, Static, Public, HasDefaults, BlueprintCallable)
// Parameters:
// TSubclassOf<class UVoxelAudioComponent> ComponentClass                                         (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class USoundBase*                       Sound                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class USceneComponent*                  AttachToComponent                                      (Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FName                             AttachPointName                                        (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector                          RelativeLocation                                       (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FRotator                         RelativeRotation                                       (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, NativeAccessSpecifierPublic)
// float                                   VolumeMultiplier                                       (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   PitchMultiplier                                        (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   MaxVoiceCount                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bAutoDestroy                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UVoxelAudioComponent*             ReturnValue                                            (ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UVoxelAudioComponent* UVoxelLevelFunctionLibrary::SpawnVoxelSoundAttachedFromClass(TSubclassOf<class UVoxelAudioComponent> ComponentClass, class USoundBase* Sound, class USceneComponent* AttachToComponent, class FName AttachPointName, const struct FVector& RelativeLocation, const struct FRotator& RelativeRotation, float VolumeMultiplier, float PitchMultiplier, int32 MaxVoiceCount, bool bAutoDestroy)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("VoxelLevelFunctionLibrary", "SpawnVoxelSoundAttachedFromClass");

	Params::VoxelLevelFunctionLibrary_SpawnVoxelSoundAttachedFromClass Parms{};

	Parms.ComponentClass = ComponentClass;
	Parms.Sound = Sound;
	Parms.AttachToComponent = AttachToComponent;
	Parms.AttachPointName = AttachPointName;
	Parms.RelativeLocation = std::move(RelativeLocation);
	Parms.RelativeRotation = std::move(RelativeRotation);
	Parms.VolumeMultiplier = VolumeMultiplier;
	Parms.PitchMultiplier = PitchMultiplier;
	Parms.MaxVoiceCount = MaxVoiceCount;
	Parms.bAutoDestroy = bAutoDestroy;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function LevelVoxelization.VoxelLevelManager.SetCurrentLevel
// (Final, Native, Public, HasOutParams, HasDefaults, BlueprintCallable)
// Parameters:
// class FName                             LevelName                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector                          LevelOffset                                            (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UVoxelLevelManager::SetCurrentLevel(class FName LevelName, const struct FVector& LevelOffset)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VoxelLevelManager", "SetCurrentLevel");

	Params::VoxelLevelManager_SetCurrentLevel Parms{};

	Parms.LevelName = LevelName;
	Parms.LevelOffset = std::move(LevelOffset);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function LevelVoxelization.VoxelLevelManager.SetCurrentPawn
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class APawn*                            Pawn                                                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UVoxelLevelManager::SetCurrentPawn(class APawn* Pawn)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VoxelLevelManager", "SetCurrentPawn");

	Params::VoxelLevelManager_SetCurrentPawn Parms{};

	Parms.Pawn = Pawn;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function LevelVoxelization.VoxelLevelManager.SetLevelLoadFinished
// (Final, Native, Public, BlueprintCallable)

void UVoxelLevelManager::SetLevelLoadFinished()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VoxelLevelManager", "SetLevelLoadFinished");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function LevelVoxelization.VoxelLevelManager.IsLevelLoadComplete
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UVoxelLevelManager::IsLevelLoadComplete() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VoxelLevelManager", "IsLevelLoadComplete");

	Params::VoxelLevelManager_IsLevelLoadComplete Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function LevelVoxelization.VoxelNavAgentComponent.CreateSpatialNavigationQuery
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// bool                                    bAllowObstacleManipulation                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UVoxelSpatialNavigationQuery*     ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UVoxelSpatialNavigationQuery* UVoxelNavAgentComponent::CreateSpatialNavigationQuery(bool bAllowObstacleManipulation)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VoxelNavAgentComponent", "CreateSpatialNavigationQuery");

	Params::VoxelNavAgentComponent_CreateSpatialNavigationQuery Parms{};

	Parms.bAllowObstacleManipulation = bAllowObstacleManipulation;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function LevelVoxelization.VoxelNavAgentComponent.OnOverlapHazardLevelChanged
// (Event, Protected, BlueprintEvent)
// Parameters:
// uint8                                   HazardType                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// uint8                                   HazardLevel                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UVoxelNavAgentComponent::OnOverlapHazardLevelChanged(uint8 HazardType, uint8 HazardLevel)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VoxelNavAgentComponent", "OnOverlapHazardLevelChanged");

	Params::VoxelNavAgentComponent_OnOverlapHazardLevelChanged Parms{};

	Parms.HazardType = HazardType;
	Parms.HazardLevel = HazardLevel;

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function LevelVoxelization.VoxelNavAgentComponent.PauseRepathUpdates
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// bool                                    bPause                                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UVoxelNavAgentComponent::PauseRepathUpdates(bool bPause)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VoxelNavAgentComponent", "PauseRepathUpdates");

	Params::VoxelNavAgentComponent_PauseRepathUpdates Parms{};

	Parms.bPause = bPause;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function LevelVoxelization.VoxelNavAgentComponent.SetNavigationType
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// EVoxelNavigationType                    NewNavigationType                                      (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UVoxelNavAgentComponent::SetNavigationType(EVoxelNavigationType NewNavigationType)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VoxelNavAgentComponent", "SetNavigationType");

	Params::VoxelNavAgentComponent_SetNavigationType Parms{};

	Parms.NewNavigationType = NewNavigationType;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function LevelVoxelization.VoxelNavAgentComponent.SetStepCostPenalty
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// int32                                   CostPenalty                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UVoxelNavAgentComponent::SetStepCostPenalty(int32 CostPenalty)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VoxelNavAgentComponent", "SetStepCostPenalty");

	Params::VoxelNavAgentComponent_SetStepCostPenalty Parms{};

	Parms.CostPenalty = CostPenalty;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function LevelVoxelization.VoxelNavAgentComponent.StartPeriodicPathProximityUpdate
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class UVoxelNavAgentComponent*          TargetComponent                                        (Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   PathProximityRange                                     (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   UpdateInterval                                         (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UVoxelNavAgentComponent::StartPeriodicPathProximityUpdate(class UVoxelNavAgentComponent* TargetComponent, float PathProximityRange, float UpdateInterval)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VoxelNavAgentComponent", "StartPeriodicPathProximityUpdate");

	Params::VoxelNavAgentComponent_StartPeriodicPathProximityUpdate Parms{};

	Parms.TargetComponent = TargetComponent;
	Parms.PathProximityRange = PathProximityRange;
	Parms.UpdateInterval = UpdateInterval;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function LevelVoxelization.VoxelNavAgentComponent.StartTrackingLocation
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// bool                                    bWantsPropagationOverlaps                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UVoxelNavAgentComponent::StartTrackingLocation(bool bWantsPropagationOverlaps)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VoxelNavAgentComponent", "StartTrackingLocation");

	Params::VoxelNavAgentComponent_StartTrackingLocation Parms{};

	Parms.bWantsPropagationOverlaps = bWantsPropagationOverlaps;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function LevelVoxelization.VoxelNavAgentComponent.StopAllAgentActivity
// (Final, Native, Public, BlueprintCallable)

void UVoxelNavAgentComponent::StopAllAgentActivity()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VoxelNavAgentComponent", "StopAllAgentActivity");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function LevelVoxelization.VoxelNavAgentComponent.StopPeriodicPathProximityUpdate
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UVoxelNavAgentComponent::StopPeriodicPathProximityUpdate()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VoxelNavAgentComponent", "StopPeriodicPathProximityUpdate");

	Params::VoxelNavAgentComponent_StopPeriodicPathProximityUpdate Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function LevelVoxelization.VoxelNavAgentComponent.StopTrackingLocation
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UVoxelNavAgentComponent::StopTrackingLocation()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VoxelNavAgentComponent", "StopTrackingLocation");

	Params::VoxelNavAgentComponent_StopTrackingLocation Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function LevelVoxelization.VoxelNavAgentComponent.TryClaimPointOfInterest
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class USceneComponent*                  SceneComponent                                         (Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UVoxelNavAgentComponent::TryClaimPointOfInterest(class USceneComponent* SceneComponent)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VoxelNavAgentComponent", "TryClaimPointOfInterest");

	Params::VoxelNavAgentComponent_TryClaimPointOfInterest Parms{};

	Parms.SceneComponent = SceneComponent;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function LevelVoxelization.VoxelNavAgentComponent.TryPathToAgent
// (Final, Native, Public, HasDefaults, BlueprintCallable)
// Parameters:
// class UVoxelNavAgentComponent*          TargetComponent                                        (Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector                          TargetOffetLocation                                    (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bFindFastPathImmediately                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UVoxelNavAgentComponent::TryPathToAgent(class UVoxelNavAgentComponent* TargetComponent, const struct FVector& TargetOffetLocation, bool bFindFastPathImmediately)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VoxelNavAgentComponent", "TryPathToAgent");

	Params::VoxelNavAgentComponent_TryPathToAgent Parms{};

	Parms.TargetComponent = TargetComponent;
	Parms.TargetOffetLocation = std::move(TargetOffetLocation);
	Parms.bFindFastPathImmediately = bFindFastPathImmediately;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function LevelVoxelization.VoxelNavAgentComponent.TryPathToBounds
// (Final, Native, Public, HasOutParams, HasDefaults, BlueprintCallable)
// Parameters:
// struct FBox                             TargetBounds                                           (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
// bool                                    bFindFastPathImmediately                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UVoxelNavAgentComponent::TryPathToBounds(const struct FBox& TargetBounds, bool bFindFastPathImmediately)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VoxelNavAgentComponent", "TryPathToBounds");

	Params::VoxelNavAgentComponent_TryPathToBounds Parms{};

	Parms.TargetBounds = std::move(TargetBounds);
	Parms.bFindFastPathImmediately = bFindFastPathImmediately;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function LevelVoxelization.VoxelNavAgentComponent.TryPathToLocation
// (Final, Native, Public, HasOutParams, HasDefaults, BlueprintCallable)
// Parameters:
// struct FVector                          TargetLocation                                         (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bFindFastPathImmediately                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UVoxelNavAgentComponent::TryPathToLocation(const struct FVector& TargetLocation, bool bFindFastPathImmediately)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VoxelNavAgentComponent", "TryPathToLocation");

	Params::VoxelNavAgentComponent_TryPathToLocation Parms{};

	Parms.TargetLocation = std::move(TargetLocation);
	Parms.bFindFastPathImmediately = bFindFastPathImmediately;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function LevelVoxelization.VoxelNavAgentComponent.TryPathToSpatialQueryLocation
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class UVoxelSpatialNavigationQuery*     SpatialQuery                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UVoxelNavAgentComponent::TryPathToSpatialQueryLocation(class UVoxelSpatialNavigationQuery* SpatialQuery)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VoxelNavAgentComponent", "TryPathToSpatialQueryLocation");

	Params::VoxelNavAgentComponent_TryPathToSpatialQueryLocation Parms{};

	Parms.SpatialQuery = SpatialQuery;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function LevelVoxelization.VoxelNavAgentComponent.TryPathToTransform
// (Final, Native, Public, HasOutParams, HasDefaults, BlueprintCallable)
// Parameters:
// struct FTransform                       TargetTransform                                        (ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
// bool                                    bFindFastPathImmediately                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UVoxelNavAgentComponent::TryPathToTransform(const struct FTransform& TargetTransform, bool bFindFastPathImmediately)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VoxelNavAgentComponent", "TryPathToTransform");

	Params::VoxelNavAgentComponent_TryPathToTransform Parms{};

	Parms.TargetTransform = std::move(TargetTransform);
	Parms.bFindFastPathImmediately = bFindFastPathImmediately;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function LevelVoxelization.VoxelNavAgentComponent.TryStopPathing
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UVoxelNavAgentComponent::TryStopPathing()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VoxelNavAgentComponent", "TryStopPathing");

	Params::VoxelNavAgentComponent_TryStopPathing Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function LevelVoxelization.VoxelNavAgentComponent.TryUnclaimCurrentPointOfInterest
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UVoxelNavAgentComponent::TryUnclaimCurrentPointOfInterest()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VoxelNavAgentComponent", "TryUnclaimCurrentPointOfInterest");

	Params::VoxelNavAgentComponent_TryUnclaimCurrentPointOfInterest Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function LevelVoxelization.VoxelNavAgentComponent.CanFitAtCurrentLocation
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UVoxelNavAgentComponent::CanFitAtCurrentLocation() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VoxelNavAgentComponent", "CanFitAtCurrentLocation");

	Params::VoxelNavAgentComponent_CanFitAtCurrentLocation Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function LevelVoxelization.VoxelNavAgentComponent.CanFitAtWorldLocation
// (Final, Native, Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// struct FVector                          WorldLocation                                          (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UVoxelNavAgentComponent::CanFitAtWorldLocation(const struct FVector& WorldLocation) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VoxelNavAgentComponent", "CanFitAtWorldLocation");

	Params::VoxelNavAgentComponent_CanFitAtWorldLocation Parms{};

	Parms.WorldLocation = std::move(WorldLocation);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function LevelVoxelization.VoxelNavAgentComponent.CanNavigateInDirection
// (Final, Native, Public, HasDefaults, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// struct FVector                          DirectionVector                                        (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UVoxelNavAgentComponent::CanNavigateInDirection(const struct FVector& DirectionVector) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VoxelNavAgentComponent", "CanNavigateInDirection");

	Params::VoxelNavAgentComponent_CanNavigateInDirection Parms{};

	Parms.DirectionVector = std::move(DirectionVector);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function LevelVoxelization.VoxelNavAgentComponent.GetAdjustedNavigationWorldLocation
// (Final, Native, Public, HasDefaults, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    bPerformLineTrace                                      (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector                          ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

struct FVector UVoxelNavAgentComponent::GetAdjustedNavigationWorldLocation(bool bPerformLineTrace) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VoxelNavAgentComponent", "GetAdjustedNavigationWorldLocation");

	Params::VoxelNavAgentComponent_GetAdjustedNavigationWorldLocation Parms{};

	Parms.bPerformLineTrace = bPerformLineTrace;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function LevelVoxelization.VoxelNavAgentComponent.GetAdjustedNavigationWorldLocationAtWorldTransform
// (Final, Native, Public, HasOutParams, HasDefaults, BlueprintCallable, Const)
// Parameters:
// struct FVector                          WorldLocation                                          (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FRotator                         WorldRotation                                          (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
// bool                                    bPerformLineTrace                                      (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FRotator                         OutAdjustedWorldRotation                               (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
// struct FVector                          ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

struct FVector UVoxelNavAgentComponent::GetAdjustedNavigationWorldLocationAtWorldTransform(const struct FVector& WorldLocation, const struct FRotator& WorldRotation, bool bPerformLineTrace, struct FRotator* OutAdjustedWorldRotation) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VoxelNavAgentComponent", "GetAdjustedNavigationWorldLocationAtWorldTransform");

	Params::VoxelNavAgentComponent_GetAdjustedNavigationWorldLocationAtWorldTransform Parms{};

	Parms.WorldLocation = std::move(WorldLocation);
	Parms.WorldRotation = std::move(WorldRotation);
	Parms.bPerformLineTrace = bPerformLineTrace;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (OutAdjustedWorldRotation != nullptr)
		*OutAdjustedWorldRotation = std::move(Parms.OutAdjustedWorldRotation);

	return Parms.ReturnValue;
}


// Function LevelVoxelization.VoxelNavAgentComponent.GetAgentVoxelDimensions
// (Final, Native, Public, HasDefaults, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// struct FIntPoint                        ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

struct FIntPoint UVoxelNavAgentComponent::GetAgentVoxelDimensions() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VoxelNavAgentComponent", "GetAgentVoxelDimensions");

	Params::VoxelNavAgentComponent_GetAgentVoxelDimensions Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function LevelVoxelization.VoxelNavAgentComponent.GetClaimedPointOfInterest
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class USceneComponent*                  ReturnValue                                            (ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class USceneComponent* UVoxelNavAgentComponent::GetClaimedPointOfInterest() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VoxelNavAgentComponent", "GetClaimedPointOfInterest");

	Params::VoxelNavAgentComponent_GetClaimedPointOfInterest Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function LevelVoxelization.VoxelNavAgentComponent.GetCurrentNavigationTargetLocation
// (Final, Native, Public, HasDefaults, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// struct FVector                          ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

struct FVector UVoxelNavAgentComponent::GetCurrentNavigationTargetLocation() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VoxelNavAgentComponent", "GetCurrentNavigationTargetLocation");

	Params::VoxelNavAgentComponent_GetCurrentNavigationTargetLocation Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function LevelVoxelization.VoxelNavAgentComponent.GetFirstPathObstacleActor
// (Final, Native, Public, HasOutParams, BlueprintCallable, Const)
// Parameters:
// int32                                   OutStartPathNodeIndex                                  (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   OutEndPathNodeIndex                                    (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class AActor*                           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class AActor* UVoxelNavAgentComponent::GetFirstPathObstacleActor(int32* OutStartPathNodeIndex, int32* OutEndPathNodeIndex) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VoxelNavAgentComponent", "GetFirstPathObstacleActor");

	Params::VoxelNavAgentComponent_GetFirstPathObstacleActor Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (OutStartPathNodeIndex != nullptr)
		*OutStartPathNodeIndex = Parms.OutStartPathNodeIndex;

	if (OutEndPathNodeIndex != nullptr)
		*OutEndPathNodeIndex = Parms.OutEndPathNodeIndex;

	return Parms.ReturnValue;
}


// Function LevelVoxelization.VoxelNavAgentComponent.GetImmediateWorldPathPoints
// (Final, Native, Public, HasOutParams, HasDefaults, BlueprintCallable, Const)
// Parameters:
// bool                                    bInterpolateForNavigation                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FTwoVectors                      OutNormals                                             (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
// struct FTwoVectors                      ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)

struct FTwoVectors UVoxelNavAgentComponent::GetImmediateWorldPathPoints(bool bInterpolateForNavigation, struct FTwoVectors* OutNormals) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VoxelNavAgentComponent", "GetImmediateWorldPathPoints");

	Params::VoxelNavAgentComponent_GetImmediateWorldPathPoints Parms{};

	Parms.bInterpolateForNavigation = bInterpolateForNavigation;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (OutNormals != nullptr)
		*OutNormals = std::move(Parms.OutNormals);

	return Parms.ReturnValue;
}


// Function LevelVoxelization.VoxelNavAgentComponent.GetMaxOverlapHazardLevelAndType
// (Final, Native, Public, HasOutParams, BlueprintCallable, Const)
// Parameters:
// TArray<uint8>                           CandidateHazardTypes                                   (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
// uint8                                   OutHazardType                                          (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// uint8                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

uint8 UVoxelNavAgentComponent::GetMaxOverlapHazardLevelAndType(const TArray<uint8>& CandidateHazardTypes, uint8* OutHazardType) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VoxelNavAgentComponent", "GetMaxOverlapHazardLevelAndType");

	Params::VoxelNavAgentComponent_GetMaxOverlapHazardLevelAndType Parms{};

	Parms.CandidateHazardTypes = std::move(CandidateHazardTypes);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (OutHazardType != nullptr)
		*OutHazardType = Parms.OutHazardType;

	return Parms.ReturnValue;
}


// Function LevelVoxelization.VoxelNavAgentComponent.GetOverlapHazardLevelForHazardType
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// uint8                                   HazardType                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UVoxelPropagatorComponent*        IgnorePropagator                                       (Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// uint8                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

uint8 UVoxelNavAgentComponent::GetOverlapHazardLevelForHazardType(uint8 HazardType, class UVoxelPropagatorComponent* IgnorePropagator) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VoxelNavAgentComponent", "GetOverlapHazardLevelForHazardType");

	Params::VoxelNavAgentComponent_GetOverlapHazardLevelForHazardType Parms{};

	Parms.HazardType = HazardType;
	Parms.IgnorePropagator = IgnorePropagator;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function LevelVoxelization.VoxelNavAgentComponent.GetOverlappingNavigationModifierCost
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// EVoxelNavModifierType                   ModifierType                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

int32 UVoxelNavAgentComponent::GetOverlappingNavigationModifierCost(EVoxelNavModifierType ModifierType) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VoxelNavAgentComponent", "GetOverlappingNavigationModifierCost");

	Params::VoxelNavAgentComponent_GetOverlappingNavigationModifierCost Parms{};

	Parms.ModifierType = ModifierType;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function LevelVoxelization.VoxelNavAgentComponent.GetUnclaimedPointsOfInterestInRoomPathRange
// (Final, Native, Public, HasOutParams, BlueprintCallable, Const)
// Parameters:
// float                                   RoomPathRange                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TSet<class USceneComponent*>            ExcludePOIs                                            (ConstParm, Parm, OutParm, ReferenceParm, ContainsInstancedReference, NativeAccessSpecifierPublic)
// TArray<class USceneComponent*>          ReturnValue                                            (ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, ContainsInstancedReference, NativeAccessSpecifierPublic)

TArray<class USceneComponent*> UVoxelNavAgentComponent::GetUnclaimedPointsOfInterestInRoomPathRange(float RoomPathRange, const TSet<class USceneComponent*>& ExcludePOIs) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VoxelNavAgentComponent", "GetUnclaimedPointsOfInterestInRoomPathRange");

	Params::VoxelNavAgentComponent_GetUnclaimedPointsOfInterestInRoomPathRange Parms{};

	Parms.RoomPathRange = RoomPathRange;
	Parms.ExcludePOIs = std::move(ExcludePOIs);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function LevelVoxelization.VoxelNavAgentComponent.GetVoxelPathLength
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// int32                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

int32 UVoxelNavAgentComponent::GetVoxelPathLength() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VoxelNavAgentComponent", "GetVoxelPathLength");

	Params::VoxelNavAgentComponent_GetVoxelPathLength Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function LevelVoxelization.VoxelNavAgentComponent.GetWorldPathPointAtNodeIndex
// (Final, Native, Public, HasOutParams, HasDefaults, BlueprintCallable, Const)
// Parameters:
// int32                                   PathNodeIndex                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bInterpolateForNavigation                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector                          OutNormal                                              (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector                          ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

struct FVector UVoxelNavAgentComponent::GetWorldPathPointAtNodeIndex(int32 PathNodeIndex, bool bInterpolateForNavigation, struct FVector* OutNormal) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VoxelNavAgentComponent", "GetWorldPathPointAtNodeIndex");

	Params::VoxelNavAgentComponent_GetWorldPathPointAtNodeIndex Parms{};

	Parms.PathNodeIndex = PathNodeIndex;
	Parms.bInterpolateForNavigation = bInterpolateForNavigation;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (OutNormal != nullptr)
		*OutNormal = std::move(Parms.OutNormal);

	return Parms.ReturnValue;
}


// Function LevelVoxelization.VoxelNavAgentComponent.HasCurrentNavigationTarget
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UVoxelNavAgentComponent::HasCurrentNavigationTarget() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VoxelNavAgentComponent", "HasCurrentNavigationTarget");

	Params::VoxelNavAgentComponent_HasCurrentNavigationTarget Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function LevelVoxelization.VoxelNavAgentComponent.IsAgentLocationTracked
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UVoxelNavAgentComponent::IsAgentLocationTracked() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VoxelNavAgentComponent", "IsAgentLocationTracked");

	Params::VoxelNavAgentComponent_IsAgentLocationTracked Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function LevelVoxelization.VoxelNavAgentComponent.IsAgentOverlappingAnyHazards
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UVoxelNavAgentComponent::IsAgentOverlappingAnyHazards() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VoxelNavAgentComponent", "IsAgentOverlappingAnyHazards");

	Params::VoxelNavAgentComponent_IsAgentOverlappingAnyHazards Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function LevelVoxelization.VoxelNavAgentComponent.IsAgentOverlappingSpecificHazards
// (Final, Native, Public, HasOutParams, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// TArray<uint8>                           HazardTypes                                            (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UVoxelNavAgentComponent::IsAgentOverlappingSpecificHazards(const TArray<uint8>& HazardTypes) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VoxelNavAgentComponent", "IsAgentOverlappingSpecificHazards");

	Params::VoxelNavAgentComponent_IsAgentOverlappingSpecificHazards Parms{};

	Parms.HazardTypes = std::move(HazardTypes);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function LevelVoxelization.VoxelNavAgentComponent.IsPathObstructedInDirection
// (Final, Native, Public, HasOutParams, HasDefaults, BlueprintCallable, Const)
// Parameters:
// struct FVector                          Direction                                              (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   Distance                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector                          OutHitWorldLocation                                    (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TArray<class UVoxelNavAgentComponent*>  OutNavAgentsInPath                                     (Parm, OutParm, ZeroConstructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UVoxelNavAgentComponent::IsPathObstructedInDirection(const struct FVector& Direction, float Distance, struct FVector* OutHitWorldLocation, TArray<class UVoxelNavAgentComponent*>* OutNavAgentsInPath) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VoxelNavAgentComponent", "IsPathObstructedInDirection");

	Params::VoxelNavAgentComponent_IsPathObstructedInDirection Parms{};

	Parms.Direction = std::move(Direction);
	Parms.Distance = Distance;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (OutHitWorldLocation != nullptr)
		*OutHitWorldLocation = std::move(Parms.OutHitWorldLocation);

	if (OutNavAgentsInPath != nullptr)
		*OutNavAgentsInPath = std::move(Parms.OutNavAgentsInPath);

	return Parms.ReturnValue;
}


// Function LevelVoxelization.VoxelNavAgentComponent.WasRecentlyAbleToPathNearProximityTarget
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UVoxelNavAgentComponent::WasRecentlyAbleToPathNearProximityTarget() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VoxelNavAgentComponent", "WasRecentlyAbleToPathNearProximityTarget");

	Params::VoxelNavAgentComponent_WasRecentlyAbleToPathNearProximityTarget Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function LevelVoxelization.VoxelNavigationManager.CreateSpatialNavigationQueryAtWorldLocation
// (Final, Native, Public, HasDefaults, BlueprintCallable)
// Parameters:
// EVoxelNavigationType                    NavigationType                                         (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector                          WorldLocation                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   AgentVoxelWidth                                        (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   AgentVoxelHeight                                       (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   MaxVoxelStepHeight                                     (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   MaxVoxelFallHeight                                     (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bCanOpenDoors                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bCanChangeNavModifiers                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UVoxelSpatialNavigationQuery*     ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UVoxelSpatialNavigationQuery* UVoxelNavigationManager::CreateSpatialNavigationQueryAtWorldLocation(EVoxelNavigationType NavigationType, const struct FVector& WorldLocation, int32 AgentVoxelWidth, int32 AgentVoxelHeight, int32 MaxVoxelStepHeight, int32 MaxVoxelFallHeight, bool bCanOpenDoors, bool bCanChangeNavModifiers)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VoxelNavigationManager", "CreateSpatialNavigationQueryAtWorldLocation");

	Params::VoxelNavigationManager_CreateSpatialNavigationQueryAtWorldLocation Parms{};

	Parms.NavigationType = NavigationType;
	Parms.WorldLocation = std::move(WorldLocation);
	Parms.AgentVoxelWidth = AgentVoxelWidth;
	Parms.AgentVoxelHeight = AgentVoxelHeight;
	Parms.MaxVoxelStepHeight = MaxVoxelStepHeight;
	Parms.MaxVoxelFallHeight = MaxVoxelFallHeight;
	Parms.bCanOpenDoors = bCanOpenDoors;
	Parms.bCanChangeNavModifiers = bCanChangeNavModifiers;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function LevelVoxelization.VoxelNavigationManager.RegisterPointOfInterest
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class USceneComponent*                  SceneComponent                                         (Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UVoxelNavigationManager::RegisterPointOfInterest(class USceneComponent* SceneComponent)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VoxelNavigationManager", "RegisterPointOfInterest");

	Params::VoxelNavigationManager_RegisterPointOfInterest Parms{};

	Parms.SceneComponent = SceneComponent;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function LevelVoxelization.VoxelNavigationManager.StopAllActivityOnActiveAgents
// (Final, Native, Public, BlueprintCallable)

void UVoxelNavigationManager::StopAllActivityOnActiveAgents()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VoxelNavigationManager", "StopAllActivityOnActiveAgents");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function LevelVoxelization.VoxelNavigationManager.StopNavigationOnActiveAgents
// (Final, Native, Public, BlueprintCallable)

void UVoxelNavigationManager::StopNavigationOnActiveAgents()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VoxelNavigationManager", "StopNavigationOnActiveAgents");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function LevelVoxelization.VoxelNavigationManager.CanAgentWithSizeFitAtWorldLocation
// (Final, Native, Public, HasDefaults, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// EVoxelNavigationType                    NavigationType                                         (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FIntPoint                        AgentDimensions                                        (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector                          WorldLocation                                          (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UVoxelNavigationManager::CanAgentWithSizeFitAtWorldLocation(EVoxelNavigationType NavigationType, const struct FIntPoint& AgentDimensions, const struct FVector& WorldLocation) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VoxelNavigationManager", "CanAgentWithSizeFitAtWorldLocation");

	Params::VoxelNavigationManager_CanAgentWithSizeFitAtWorldLocation Parms{};

	Parms.NavigationType = NavigationType;
	Parms.AgentDimensions = std::move(AgentDimensions);
	Parms.WorldLocation = std::move(WorldLocation);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function LevelVoxelization.VoxelNavigationManager.GetFloorForAgentCapsule
// (Final, Native, Public, HasOutParams, HasDefaults, BlueprintCallable, Const)
// Parameters:
// struct FVector                          LastLocation                                           (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector                          CurrLocation                                           (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector                          CylinderVector                                         (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   CapsuleRadius                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector                          OutCollisionPoint                                      (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector                          OutCollisionNormal                                     (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   OutPenetrationDepth                                    (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UVoxelNavigationManager::GetFloorForAgentCapsule(const struct FVector& LastLocation, const struct FVector& CurrLocation, const struct FVector& CylinderVector, float CapsuleRadius, struct FVector* OutCollisionPoint, struct FVector* OutCollisionNormal, float* OutPenetrationDepth) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VoxelNavigationManager", "GetFloorForAgentCapsule");

	Params::VoxelNavigationManager_GetFloorForAgentCapsule Parms{};

	Parms.LastLocation = std::move(LastLocation);
	Parms.CurrLocation = std::move(CurrLocation);
	Parms.CylinderVector = std::move(CylinderVector);
	Parms.CapsuleRadius = CapsuleRadius;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (OutCollisionPoint != nullptr)
		*OutCollisionPoint = std::move(Parms.OutCollisionPoint);

	if (OutCollisionNormal != nullptr)
		*OutCollisionNormal = std::move(Parms.OutCollisionNormal);

	if (OutPenetrationDepth != nullptr)
		*OutPenetrationDepth = Parms.OutPenetrationDepth;

	return Parms.ReturnValue;
}


// Function LevelVoxelization.VoxelNavigationManager.GetNavigationAgentsInWorldBounds
// (Final, Native, Public, HasOutParams, HasDefaults, BlueprintCallable, Const)
// Parameters:
// struct FBox                             WorldBounds                                            (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
// TSoftClassPtr<class UClass>             RequireClass                                           (Parm, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class AActor*                           IgnoreActor                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TArray<class UVoxelNavAgentComponent*>  ReturnValue                                            (ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, ContainsInstancedReference, NativeAccessSpecifierPublic)

TArray<class UVoxelNavAgentComponent*> UVoxelNavigationManager::GetNavigationAgentsInWorldBounds(const struct FBox& WorldBounds, TSoftClassPtr<class UClass> RequireClass, class AActor* IgnoreActor) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VoxelNavigationManager", "GetNavigationAgentsInWorldBounds");

	Params::VoxelNavigationManager_GetNavigationAgentsInWorldBounds Parms{};

	Parms.WorldBounds = std::move(WorldBounds);
	Parms.RequireClass = RequireClass;
	Parms.IgnoreActor = IgnoreActor;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function LevelVoxelization.VoxelNavigationManager.GetNavigationAgentsUsingSphereTrace
// (Final, Native, Public, HasOutParams, HasDefaults, BlueprintCallable, Const)
// Parameters:
// struct FVector                          TraceSourceLocation                                    (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector                          TraceTargetLocation                                    (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   TraceRadius                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TArray<class AActor*>                   IgnoreActors                                           (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
// TArray<class UVoxelNavAgentComponent*>  IncludeUntrackedAgents                                 (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, ContainsInstancedReference, NativeAccessSpecifierPublic)
// TArray<struct FVoxelNavAgentTraceResult>ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, ContainsInstancedReference, NativeAccessSpecifierPublic)

TArray<struct FVoxelNavAgentTraceResult> UVoxelNavigationManager::GetNavigationAgentsUsingSphereTrace(const struct FVector& TraceSourceLocation, const struct FVector& TraceTargetLocation, float TraceRadius, const TArray<class AActor*>& IgnoreActors, const TArray<class UVoxelNavAgentComponent*>& IncludeUntrackedAgents) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VoxelNavigationManager", "GetNavigationAgentsUsingSphereTrace");

	Params::VoxelNavigationManager_GetNavigationAgentsUsingSphereTrace Parms{};

	Parms.TraceSourceLocation = std::move(TraceSourceLocation);
	Parms.TraceTargetLocation = std::move(TraceTargetLocation);
	Parms.TraceRadius = TraceRadius;
	Parms.IgnoreActors = std::move(IgnoreActors);
	Parms.IncludeUntrackedAgents = std::move(IncludeUntrackedAgents);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function LevelVoxelization.VoxelSpatialNavigationQuery.AddAllGroundVoxelsInBox
// (Final, Native, Public, HasDefaults, BlueprintCallable)
// Parameters:
// struct FVector                          BoxLocation                                            (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector                          BoxHalfExtent                                          (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UVoxelSpatialNavigationQuery::AddAllGroundVoxelsInBox(const struct FVector& BoxLocation, const struct FVector& BoxHalfExtent)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VoxelSpatialNavigationQuery", "AddAllGroundVoxelsInBox");

	Params::VoxelSpatialNavigationQuery_AddAllGroundVoxelsInBox Parms{};

	Parms.BoxLocation = std::move(BoxLocation);
	Parms.BoxHalfExtent = std::move(BoxHalfExtent);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function LevelVoxelization.VoxelSpatialNavigationQuery.AddPathableVoxelsInBox
// (Final, Native, Public, HasDefaults, BlueprintCallable)
// Parameters:
// struct FVector                          BoxLocation                                            (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector                          BoxHalfExtent                                          (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// EVoxelSpatialQueryFuncType              WeightType                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   WeightScale                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   MinPathDistance                                        (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   MaxPathDistance                                        (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UVoxelSpatialNavigationQuery::AddPathableVoxelsInBox(const struct FVector& BoxLocation, const struct FVector& BoxHalfExtent, EVoxelSpatialQueryFuncType WeightType, float WeightScale, int32 MinPathDistance, int32 MaxPathDistance)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VoxelSpatialNavigationQuery", "AddPathableVoxelsInBox");

	Params::VoxelSpatialNavigationQuery_AddPathableVoxelsInBox Parms{};

	Parms.BoxLocation = std::move(BoxLocation);
	Parms.BoxHalfExtent = std::move(BoxHalfExtent);
	Parms.WeightType = WeightType;
	Parms.WeightScale = WeightScale;
	Parms.MinPathDistance = MinPathDistance;
	Parms.MaxPathDistance = MaxPathDistance;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function LevelVoxelization.VoxelSpatialNavigationQuery.ExecuteQueryInBackground
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// int32                                   DesiredLocationCount                                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   WeightFilterPercent                                    (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UVoxelSpatialNavigationQuery::ExecuteQueryInBackground(int32 DesiredLocationCount, int32 WeightFilterPercent)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VoxelSpatialNavigationQuery", "ExecuteQueryInBackground");

	Params::VoxelSpatialNavigationQuery_ExecuteQueryInBackground Parms{};

	Parms.DesiredLocationCount = DesiredLocationCount;
	Parms.WeightFilterPercent = WeightFilterPercent;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function LevelVoxelization.VoxelSpatialNavigationQuery.FilterByVisibilityToPoint
// (Final, Native, Public, HasOutParams, HasDefaults, BlueprintCallable)
// Parameters:
// struct FVector                          Point                                                  (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bKeepIfVisible                                         (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bTraceComplex                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TArray<class AActor*>                   ActorsToIgnore                                         (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
// int32                                   LocationFlags                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// ECollisionChannel                       TraceChannel                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UVoxelSpatialNavigationQuery::FilterByVisibilityToPoint(const struct FVector& Point, bool bKeepIfVisible, bool bTraceComplex, const TArray<class AActor*>& ActorsToIgnore, int32 LocationFlags, ECollisionChannel TraceChannel)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VoxelSpatialNavigationQuery", "FilterByVisibilityToPoint");

	Params::VoxelSpatialNavigationQuery_FilterByVisibilityToPoint Parms{};

	Parms.Point = std::move(Point);
	Parms.bKeepIfVisible = bKeepIfVisible;
	Parms.bTraceComplex = bTraceComplex;
	Parms.ActorsToIgnore = std::move(ActorsToIgnore);
	Parms.LocationFlags = LocationFlags;
	Parms.TraceChannel = TraceChannel;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function LevelVoxelization.VoxelSpatialNavigationQuery.FilterOutActorLocations
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// TSubclassOf<class AActor>               ClassFilter                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class AActor*                           ActorToIgnore                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   Radius                                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   AddedCost                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UVoxelSpatialNavigationQuery::FilterOutActorLocations(TSubclassOf<class AActor> ClassFilter, class AActor* ActorToIgnore, float Radius, int32 AddedCost)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VoxelSpatialNavigationQuery", "FilterOutActorLocations");

	Params::VoxelSpatialNavigationQuery_FilterOutActorLocations Parms{};

	Parms.ClassFilter = ClassFilter;
	Parms.ActorToIgnore = ActorToIgnore;
	Parms.Radius = Radius;
	Parms.AddedCost = AddedCost;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function LevelVoxelization.VoxelSpatialNavigationQuery.FilterOutWorldLocations
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// TArray<struct FVector>                  WorldLocations                                         (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
// float                                   Radius                                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   AddedCost                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UVoxelSpatialNavigationQuery::FilterOutWorldLocations(const TArray<struct FVector>& WorldLocations, float Radius, int32 AddedCost)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VoxelSpatialNavigationQuery", "FilterOutWorldLocations");

	Params::VoxelSpatialNavigationQuery_FilterOutWorldLocations Parms{};

	Parms.WorldLocations = std::move(WorldLocations);
	Parms.Radius = Radius;
	Parms.AddedCost = AddedCost;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function LevelVoxelization.VoxelSpatialNavigationQuery.WeightByAngleFromViewpoint
// (Final, Native, Public, HasOutParams, HasDefaults, BlueprintCallable)
// Parameters:
// struct FVector                          ViewLocation                                           (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector                          ViewDirection                                          (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// EVoxelSpatialQueryFuncType              WeightType                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   WeightScale                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   MidpointBias                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    b2D                                                    (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   MinAngle                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   MaxAngle                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UVoxelSpatialNavigationQuery::WeightByAngleFromViewpoint(const struct FVector& ViewLocation, const struct FVector& ViewDirection, EVoxelSpatialQueryFuncType WeightType, float WeightScale, float MidpointBias, bool b2D, int32 MinAngle, int32 MaxAngle)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VoxelSpatialNavigationQuery", "WeightByAngleFromViewpoint");

	Params::VoxelSpatialNavigationQuery_WeightByAngleFromViewpoint Parms{};

	Parms.ViewLocation = std::move(ViewLocation);
	Parms.ViewDirection = std::move(ViewDirection);
	Parms.WeightType = WeightType;
	Parms.WeightScale = WeightScale;
	Parms.MidpointBias = MidpointBias;
	Parms.b2D = b2D;
	Parms.MinAngle = MinAngle;
	Parms.MaxAngle = MaxAngle;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function LevelVoxelization.VoxelSpatialNavigationQuery.WeightByDistanceFromObstacles
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// float                                   DistanceCutoff                                         (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   WeightScale                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UVoxelSpatialNavigationQuery::WeightByDistanceFromObstacles(float DistanceCutoff, float WeightScale)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VoxelSpatialNavigationQuery", "WeightByDistanceFromObstacles");

	Params::VoxelSpatialNavigationQuery_WeightByDistanceFromObstacles Parms{};

	Parms.DistanceCutoff = DistanceCutoff;
	Parms.WeightScale = WeightScale;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function LevelVoxelization.VoxelSpatialNavigationQuery.WeightByDistanceFromPoint
// (Final, Native, Public, HasOutParams, HasDefaults, BlueprintCallable)
// Parameters:
// struct FVector                          Point                                                  (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// EVoxelSpatialQueryFuncType              WeightType                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   WeightScale                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   MidpointBias                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    b2D                                                    (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   MinDistance                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   MaxDistance                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UVoxelSpatialNavigationQuery::WeightByDistanceFromPoint(const struct FVector& Point, EVoxelSpatialQueryFuncType WeightType, float WeightScale, float MidpointBias, bool b2D, int32 MinDistance, int32 MaxDistance)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VoxelSpatialNavigationQuery", "WeightByDistanceFromPoint");

	Params::VoxelSpatialNavigationQuery_WeightByDistanceFromPoint Parms{};

	Parms.Point = std::move(Point);
	Parms.WeightType = WeightType;
	Parms.WeightScale = WeightScale;
	Parms.MidpointBias = MidpointBias;
	Parms.b2D = b2D;
	Parms.MinDistance = MinDistance;
	Parms.MaxDistance = MaxDistance;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function LevelVoxelization.VoxelSpatialNavigationQuery.WeightByHeightRange
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// float                                   WorldZLocation                                         (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// EVoxelSpatialQueryFuncType              WeightType                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   WeightScale                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   MidpointBias                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bAbove                                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bBelow                                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   MaxHeightRange                                         (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UVoxelSpatialNavigationQuery::WeightByHeightRange(float WorldZLocation, EVoxelSpatialQueryFuncType WeightType, float WeightScale, float MidpointBias, bool bAbove, bool bBelow, float MaxHeightRange)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VoxelSpatialNavigationQuery", "WeightByHeightRange");

	Params::VoxelSpatialNavigationQuery_WeightByHeightRange Parms{};

	Parms.WorldZLocation = WorldZLocation;
	Parms.WeightType = WeightType;
	Parms.WeightScale = WeightScale;
	Parms.MidpointBias = MidpointBias;
	Parms.bAbove = bAbove;
	Parms.bBelow = bBelow;
	Parms.MaxHeightRange = MaxHeightRange;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function LevelVoxelization.VoxelSpatialNavigationQuery.GetWeightedLocations
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    bOnlyTopWeightedLocations                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TArray<struct FVector4>                 ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)

TArray<struct FVector4> UVoxelSpatialNavigationQuery::GetWeightedLocations(bool bOnlyTopWeightedLocations) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VoxelSpatialNavigationQuery", "GetWeightedLocations");

	Params::VoxelSpatialNavigationQuery_GetWeightedLocations Parms{};

	Parms.bOnlyTopWeightedLocations = bOnlyTopWeightedLocations;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function LevelVoxelization.VoxelNavModifierComponent.SetAddedPathCost
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// int32                                   NewCost                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UVoxelNavModifierComponent::SetAddedPathCost(int32 NewCost)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VoxelNavModifierComponent", "SetAddedPathCost");

	Params::VoxelNavModifierComponent_SetAddedPathCost Parms{};

	Parms.NewCost = NewCost;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function LevelVoxelization.VoxelNavModifierComponent.SetCanNavAgentsChange
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// bool                                    bEnable                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UVoxelNavModifierComponent::SetCanNavAgentsChange(bool bEnable)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VoxelNavModifierComponent", "SetCanNavAgentsChange");

	Params::VoxelNavModifierComponent_SetCanNavAgentsChange Parms{};

	Parms.bEnable = bEnable;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function LevelVoxelization.VoxelNavModifierComponent.SetModifierState
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// EVoxelNavModifierState                  NewState                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UVoxelNavModifierComponent::SetModifierState(EVoxelNavModifierState NewState)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VoxelNavModifierComponent", "SetModifierState");

	Params::VoxelNavModifierComponent_SetModifierState Parms{};

	Parms.NewState = NewState;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function LevelVoxelization.VoxelNavModifierComponent.SetModifierType
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// EVoxelNavModifierType                   NewType                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UVoxelNavModifierComponent::SetModifierType(EVoxelNavModifierType NewType)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VoxelNavModifierComponent", "SetModifierType");

	Params::VoxelNavModifierComponent_SetModifierType Parms{};

	Parms.NewType = NewType;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function LevelVoxelization.VoxelObserverComponent.SetObserverEnabled
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// bool                                    bEnable                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UVoxelObserverComponent::SetObserverEnabled(bool bEnable)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VoxelObserverComponent", "SetObserverEnabled");

	Params::VoxelObserverComponent_SetObserverEnabled Parms{};

	Parms.bEnable = bEnable;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function LevelVoxelization.VoxelObserverComponent.SetObserverEyeComponent
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class USceneCaptureComponent2D*         SceneCaptureComponent                                  (Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UVoxelObserverComponent::SetObserverEyeComponent(class USceneCaptureComponent2D* SceneCaptureComponent)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VoxelObserverComponent", "SetObserverEyeComponent");

	Params::VoxelObserverComponent_SetObserverEyeComponent Parms{};

	Parms.SceneCaptureComponent = SceneCaptureComponent;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function LevelVoxelization.VoxelOccluderComponent.SetCanNavAgentsUnblock
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// bool                                    bEnable                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UVoxelOccluderComponent::SetCanNavAgentsUnblock(bool bEnable)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VoxelOccluderComponent", "SetCanNavAgentsUnblock");

	Params::VoxelOccluderComponent_SetCanNavAgentsUnblock Parms{};

	Parms.bEnable = bEnable;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function LevelVoxelization.VoxelOccluderComponent.SetDoorOccluderIsClosing
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// float                                   CloseElapsedTime                                       (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   CloseEndTime                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   SoundTransitionDuration                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UVoxelOccluderComponent::SetDoorOccluderIsClosing(float CloseElapsedTime, float CloseEndTime, float SoundTransitionDuration)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VoxelOccluderComponent", "SetDoorOccluderIsClosing");

	Params::VoxelOccluderComponent_SetDoorOccluderIsClosing Parms{};

	Parms.CloseElapsedTime = CloseElapsedTime;
	Parms.CloseEndTime = CloseEndTime;
	Parms.SoundTransitionDuration = SoundTransitionDuration;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function LevelVoxelization.VoxelOccluderComponent.SetDoorOccluderIsOpening
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// float                                   OpenElapsedTime                                        (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   OpenDelayTime                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   SoundTransitionDuration                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UVoxelOccluderComponent::SetDoorOccluderIsOpening(float OpenElapsedTime, float OpenDelayTime, float SoundTransitionDuration)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VoxelOccluderComponent", "SetDoorOccluderIsOpening");

	Params::VoxelOccluderComponent_SetDoorOccluderIsOpening Parms{};

	Parms.OpenElapsedTime = OpenElapsedTime;
	Parms.OpenDelayTime = OpenDelayTime;
	Parms.SoundTransitionDuration = SoundTransitionDuration;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function LevelVoxelization.VoxelOccluderComponent.SetOccluderEnabled
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// bool                                    bEnable                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   SoundTransitionDuration                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UVoxelOccluderComponent::SetOccluderEnabled(bool bEnable, float SoundTransitionDuration)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VoxelOccluderComponent", "SetOccluderEnabled");

	Params::VoxelOccluderComponent_SetOccluderEnabled Parms{};

	Parms.bEnable = bEnable;
	Parms.SoundTransitionDuration = SoundTransitionDuration;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function LevelVoxelization.VoxelOccluderComponent.SetShouldOccludeVisibility
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// bool                                    bEnable                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UVoxelOccluderComponent::SetShouldOccludeVisibility(bool bEnable)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VoxelOccluderComponent", "SetShouldOccludeVisibility");

	Params::VoxelOccluderComponent_SetShouldOccludeVisibility Parms{};

	Parms.bEnable = bEnable;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function LevelVoxelization.VoxelPropagationManager.GetUnobstructedCullableDynamicActorsInSphere
// (Final, Native, Public, HasOutParams, HasDefaults, BlueprintCallable, Const)
// Parameters:
// struct FVector                          SphereLocation                                         (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   SphereRadius                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TArray<TSubclassOf<class AActor>>       FilterByClasses                                        (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, UObjectWrapper, NativeAccessSpecifierPublic)
// TArray<class AActor*>                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)

TArray<class AActor*> UVoxelPropagationManager::GetUnobstructedCullableDynamicActorsInSphere(const struct FVector& SphereLocation, float SphereRadius, const TArray<TSubclassOf<class AActor>>& FilterByClasses) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VoxelPropagationManager", "GetUnobstructedCullableDynamicActorsInSphere");

	Params::VoxelPropagationManager_GetUnobstructedCullableDynamicActorsInSphere Parms{};

	Parms.SphereLocation = std::move(SphereLocation);
	Parms.SphereRadius = SphereRadius;
	Parms.FilterByClasses = std::move(FilterByClasses);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function LevelVoxelization.VoxelPropagationManager.GetUnobstructedCullableStaticMeshComponentsInSphere
// (Final, Native, Public, HasOutParams, HasDefaults, BlueprintCallable, Const)
// Parameters:
// struct FVector                          SphereLocation                                         (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   SphereRadius                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TSubclassOf<class AActor>               IgnoreActorClass                                       (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TArray<class UStaticMeshComponent*>     ReturnValue                                            (ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, ContainsInstancedReference, NativeAccessSpecifierPublic)

TArray<class UStaticMeshComponent*> UVoxelPropagationManager::GetUnobstructedCullableStaticMeshComponentsInSphere(const struct FVector& SphereLocation, float SphereRadius, TSubclassOf<class AActor> IgnoreActorClass) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VoxelPropagationManager", "GetUnobstructedCullableStaticMeshComponentsInSphere");

	Params::VoxelPropagationManager_GetUnobstructedCullableStaticMeshComponentsInSphere Parms{};

	Parms.SphereLocation = std::move(SphereLocation);
	Parms.SphereRadius = SphereRadius;
	Parms.IgnoreActorClass = IgnoreActorClass;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function LevelVoxelization.VoxelPropagationManager.HasAnyPropagationPathToPrimitiveInSphere
// (Final, Native, Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// struct FVector                          SphereLocation                                         (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   SphereRadius                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UPrimitiveComponent*              PrimitiveComponent                                     (Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UVoxelPropagationManager::HasAnyPropagationPathToPrimitiveInSphere(const struct FVector& SphereLocation, float SphereRadius, class UPrimitiveComponent* PrimitiveComponent) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VoxelPropagationManager", "HasAnyPropagationPathToPrimitiveInSphere");

	Params::VoxelPropagationManager_HasAnyPropagationPathToPrimitiveInSphere Parms{};

	Parms.SphereLocation = std::move(SphereLocation);
	Parms.SphereRadius = SphereRadius;
	Parms.PrimitiveComponent = PrimitiveComponent;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function LevelVoxelization.VoxelPropagationManager.HasUnobstructedPropagationPathBetweenPoints
// (Final, Native, Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// struct FVector                          SourceLocation                                         (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector                          TargetLocation                                         (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bTraceVoxels                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UVoxelPropagationManager::HasUnobstructedPropagationPathBetweenPoints(const struct FVector& SourceLocation, const struct FVector& TargetLocation, bool bTraceVoxels) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VoxelPropagationManager", "HasUnobstructedPropagationPathBetweenPoints");

	Params::VoxelPropagationManager_HasUnobstructedPropagationPathBetweenPoints Parms{};

	Parms.SourceLocation = std::move(SourceLocation);
	Parms.TargetLocation = std::move(TargetLocation);
	Parms.bTraceVoxels = bTraceVoxels;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function LevelVoxelization.VoxelPropagatorComponent.GetElapsedPlayTime
// (Event, Public, BlueprintEvent)
// Parameters:
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

float UVoxelPropagatorComponent::GetElapsedPlayTime()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VoxelPropagatorComponent", "GetElapsedPlayTime");

	Params::VoxelPropagatorComponent_GetElapsedPlayTime Parms{};

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function LevelVoxelization.VoxelPropagatorComponent.GetRelativePropagationOriginOffset
// (Event, Public, HasDefaults, BlueprintEvent)
// Parameters:
// struct FVector                          ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

struct FVector UVoxelPropagatorComponent::GetRelativePropagationOriginOffset()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VoxelPropagatorComponent", "GetRelativePropagationOriginOffset");

	Params::VoxelPropagatorComponent_GetRelativePropagationOriginOffset Parms{};

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function LevelVoxelization.VoxelPropagatorComponent.SetMaxPropagationDensity
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// uint8                                   MaxDensity                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UVoxelPropagatorComponent::SetMaxPropagationDensity(uint8 MaxDensity)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VoxelPropagatorComponent", "SetMaxPropagationDensity");

	Params::VoxelPropagatorComponent_SetMaxPropagationDensity Parms{};

	Parms.MaxDensity = MaxDensity;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function LevelVoxelization.VoxelPropagatorComponent.SetPropagationTickInterval
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// float                                   TickInterval                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UVoxelPropagatorComponent::SetPropagationTickInterval(float TickInterval)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VoxelPropagatorComponent", "SetPropagationTickInterval");

	Params::VoxelPropagatorComponent_SetPropagationTickInterval Parms{};

	Parms.TickInterval = TickInterval;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function LevelVoxelization.VoxelScannerBillboardComponent.AddElement
// (Final, Native, Public, HasOutParams, HasDefaults, BlueprintCallable)
// Parameters:
// class USceneComponent*                  SceneComponent                                         (Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector2D                        BaseSize                                               (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector                          LocalOffset                                            (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bShouldRotate                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bVisibility                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UVoxelScannerBillboardComponent::AddElement(class USceneComponent* SceneComponent, const struct FVector2D& BaseSize, const struct FVector& LocalOffset, bool bShouldRotate, bool bVisibility)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VoxelScannerBillboardComponent", "AddElement");

	Params::VoxelScannerBillboardComponent_AddElement Parms{};

	Parms.SceneComponent = SceneComponent;
	Parms.BaseSize = std::move(BaseSize);
	Parms.LocalOffset = std::move(LocalOffset);
	Parms.bShouldRotate = bShouldRotate;
	Parms.bVisibility = bVisibility;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function LevelVoxelization.VoxelScannerBillboardComponent.RemoveElement
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class USceneComponent*                  SceneComponent                                         (Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UVoxelScannerBillboardComponent::RemoveElement(class USceneComponent* SceneComponent)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VoxelScannerBillboardComponent", "RemoveElement");

	Params::VoxelScannerBillboardComponent_RemoveElement Parms{};

	Parms.SceneComponent = SceneComponent;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function LevelVoxelization.VoxelScannerBillboardComponent.SetElementShouldRotate
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class USceneComponent*                  SceneComponent                                         (Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bNewState                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UVoxelScannerBillboardComponent::SetElementShouldRotate(class USceneComponent* SceneComponent, bool bNewState)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VoxelScannerBillboardComponent", "SetElementShouldRotate");

	Params::VoxelScannerBillboardComponent_SetElementShouldRotate Parms{};

	Parms.SceneComponent = SceneComponent;
	Parms.bNewState = bNewState;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function LevelVoxelization.VoxelScannerBillboardComponent.SetElementVisibility
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class USceneComponent*                  SceneComponent                                         (Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bNewVisibility                                         (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UVoxelScannerBillboardComponent::SetElementVisibility(class USceneComponent* SceneComponent, bool bNewVisibility)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VoxelScannerBillboardComponent", "SetElementVisibility");

	Params::VoxelScannerBillboardComponent_SetElementVisibility Parms{};

	Parms.SceneComponent = SceneComponent;
	Parms.bNewVisibility = bNewVisibility;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function LevelVoxelization.VoxelScannerBillboardComponent.SetOrthographicScaleParameters
// (Final, Native, Public, HasDefaults, BlueprintCallable)
// Parameters:
// class UCurveFloat*                      InOrthoScaleCurve                                      (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector2D                        InOrthoWidthRange                                      (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UVoxelScannerBillboardComponent::SetOrthographicScaleParameters(class UCurveFloat* InOrthoScaleCurve, const struct FVector2D& InOrthoWidthRange)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VoxelScannerBillboardComponent", "SetOrthographicScaleParameters");

	Params::VoxelScannerBillboardComponent_SetOrthographicScaleParameters Parms{};

	Parms.InOrthoScaleCurve = InOrthoScaleCurve;
	Parms.InOrthoWidthRange = std::move(InOrthoWidthRange);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function LevelVoxelization.VoxelScannerBillboardComponent.GetElementCount
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// int32                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

int32 UVoxelScannerBillboardComponent::GetElementCount() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VoxelScannerBillboardComponent", "GetElementCount");

	Params::VoxelScannerBillboardComponent_GetElementCount Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function LevelVoxelization.VoxelScannerComponent.AddAvailableScannableFilterTags
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// TSet<class FName>                       Tags                                                   (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)

void UVoxelScannerComponent::AddAvailableScannableFilterTags(const TSet<class FName>& Tags)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VoxelScannerComponent", "AddAvailableScannableFilterTags");

	Params::VoxelScannerComponent_AddAvailableScannableFilterTags Parms{};

	Parms.Tags = std::move(Tags);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function LevelVoxelization.VoxelScannerComponent.AddWaypointAtLocation
// (Final, Native, Public, HasOutParams, HasDefaults, BlueprintCallable)
// Parameters:
// struct FVector                          WorldLocation                                          (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FString                           Message                                                (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

int32 UVoxelScannerComponent::AddWaypointAtLocation(const struct FVector& WorldLocation, const class FString& Message)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VoxelScannerComponent", "AddWaypointAtLocation");

	Params::VoxelScannerComponent_AddWaypointAtLocation Parms{};

	Parms.WorldLocation = std::move(WorldLocation);
	Parms.Message = std::move(Message);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function LevelVoxelization.VoxelScannerComponent.GetRegionAtWorldLocation
// (Final, Native, Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintPure)
// Parameters:
// EVoxelLevelInstanceType                 InstanceType                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector                          WorldLocation                                          (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   VoxelSearchRadius                                      (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FDataTableRowHandle              ReturnValue                                            (Parm, OutParm, ReturnParm, NoDestructor, NativeAccessSpecifierPublic)

struct FDataTableRowHandle UVoxelScannerComponent::GetRegionAtWorldLocation(EVoxelLevelInstanceType InstanceType, const struct FVector& WorldLocation, int32 VoxelSearchRadius)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VoxelScannerComponent", "GetRegionAtWorldLocation");

	Params::VoxelScannerComponent_GetRegionAtWorldLocation Parms{};

	Parms.InstanceType = InstanceType;
	Parms.WorldLocation = std::move(WorldLocation);
	Parms.VoxelSearchRadius = VoxelSearchRadius;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function LevelVoxelization.VoxelScannerComponent.GetWaypointFontForCultureName
// (Event, Public, BlueprintEvent)
// Parameters:
// class FString                           CultureName                                            (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UFont*                            ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UFont* UVoxelScannerComponent::GetWaypointFontForCultureName(const class FString& CultureName)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VoxelScannerComponent", "GetWaypointFontForCultureName");

	Params::VoxelScannerComponent_GetWaypointFontForCultureName Parms{};

	Parms.CultureName = std::move(CultureName);

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function LevelVoxelization.VoxelScannerComponent.HighlightRegion
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// struct FDataTableRowHandle              RegionHandle                                           (ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)

void UVoxelScannerComponent::HighlightRegion(const struct FDataTableRowHandle& RegionHandle)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VoxelScannerComponent", "HighlightRegion");

	Params::VoxelScannerComponent_HighlightRegion Parms{};

	Parms.RegionHandle = std::move(RegionHandle);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function LevelVoxelization.VoxelScannerComponent.LoadScanDataForLevelIntoInstance
// (Final, Native, Public, HasOutParams, HasDefaults, BlueprintCallable)
// Parameters:
// EVoxelLevelInstanceType                 LevelInstanceType                                      (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FName                             LevelName                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector                          LevelOffset                                            (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UVoxelScannerComponent::LoadScanDataForLevelIntoInstance(EVoxelLevelInstanceType LevelInstanceType, class FName LevelName, const struct FVector& LevelOffset)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VoxelScannerComponent", "LoadScanDataForLevelIntoInstance");

	Params::VoxelScannerComponent_LoadScanDataForLevelIntoInstance Parms{};

	Parms.LevelInstanceType = LevelInstanceType;
	Parms.LevelName = LevelName;
	Parms.LevelOffset = std::move(LevelOffset);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function LevelVoxelization.VoxelScannerComponent.OnDynamicScannerUpdate
// (Event, Public, BlueprintEvent)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UVoxelScannerComponent::OnDynamicScannerUpdate()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VoxelScannerComponent", "OnDynamicScannerUpdate");

	Params::VoxelScannerComponent_OnDynamicScannerUpdate Parms{};

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function LevelVoxelization.VoxelScannerComponent.OnLevelRegionDiscovered
// (Event, Public, HasOutParams, BlueprintEvent)
// Parameters:
// struct FDataTableRowHandle              RegionRowHandle                                        (ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UVoxelScannerComponent::OnLevelRegionDiscovered(const struct FDataTableRowHandle& RegionRowHandle)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VoxelScannerComponent", "OnLevelRegionDiscovered");

	Params::VoxelScannerComponent_OnLevelRegionDiscovered Parms{};

	Parms.RegionRowHandle = std::move(RegionRowHandle);

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function LevelVoxelization.VoxelScannerComponent.OnVoxelColumnsRevealed
// (Event, Public, BlueprintEvent)
// Parameters:
// int32                                   VoxelColumnCount                                       (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UVoxelScannerComponent::OnVoxelColumnsRevealed(int32 VoxelColumnCount)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VoxelScannerComponent", "OnVoxelColumnsRevealed");

	Params::VoxelScannerComponent_OnVoxelColumnsRevealed Parms{};

	Parms.VoxelColumnCount = VoxelColumnCount;

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function LevelVoxelization.VoxelScannerComponent.RemoveAvailableScannableFilterTags
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// TSet<class FName>                       Tags                                                   (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)

void UVoxelScannerComponent::RemoveAvailableScannableFilterTags(const TSet<class FName>& Tags)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VoxelScannerComponent", "RemoveAvailableScannableFilterTags");

	Params::VoxelScannerComponent_RemoveAvailableScannableFilterTags Parms{};

	Parms.Tags = std::move(Tags);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function LevelVoxelization.VoxelScannerComponent.RemoveWaypointByIndex
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// int32                                   WaypointIndex                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UVoxelScannerComponent::RemoveWaypointByIndex(int32 WaypointIndex)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VoxelScannerComponent", "RemoveWaypointByIndex");

	Params::VoxelScannerComponent_RemoveWaypointByIndex Parms{};

	Parms.WaypointIndex = WaypointIndex;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function LevelVoxelization.VoxelScannerComponent.RevealCurrentLevel
// (Final, Native, Public, BlueprintCallable)

void UVoxelScannerComponent::RevealCurrentLevel()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VoxelScannerComponent", "RevealCurrentLevel");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function LevelVoxelization.VoxelScannerComponent.SetAvailableFilterTags
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// TSet<class FName>                       Tags                                                   (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)

void UVoxelScannerComponent::SetAvailableFilterTags(const TSet<class FName>& Tags)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VoxelScannerComponent", "SetAvailableFilterTags");

	Params::VoxelScannerComponent_SetAvailableFilterTags Parms{};

	Parms.Tags = std::move(Tags);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function LevelVoxelization.VoxelScannerComponent.SetDynamicScannerParams
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// float                                   InnerRadius                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   OuterRadius                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   OuterRevealTime                                        (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   UpdateTime                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bRevealThroughWalls                                    (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UVoxelScannerComponent::SetDynamicScannerParams(float InnerRadius, float OuterRadius, float OuterRevealTime, float UpdateTime, bool bRevealThroughWalls)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VoxelScannerComponent", "SetDynamicScannerParams");

	Params::VoxelScannerComponent_SetDynamicScannerParams Parms{};

	Parms.InnerRadius = InnerRadius;
	Parms.OuterRadius = OuterRadius;
	Parms.OuterRevealTime = OuterRevealTime;
	Parms.UpdateTime = UpdateTime;
	Parms.bRevealThroughWalls = bRevealThroughWalls;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function LevelVoxelization.VoxelScannerComponent.SetPrimarySceneCaptureRotationFollowsOwner
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// bool                                    bEnable                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UVoxelScannerComponent::SetPrimarySceneCaptureRotationFollowsOwner(bool bEnable)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VoxelScannerComponent", "SetPrimarySceneCaptureRotationFollowsOwner");

	Params::VoxelScannerComponent_SetPrimarySceneCaptureRotationFollowsOwner Parms{};

	Parms.bEnable = bEnable;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function LevelVoxelization.VoxelScannerComponent.SetRevealDuration
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// float                                   RevealDuration                                         (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UVoxelScannerComponent::SetRevealDuration(float RevealDuration)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VoxelScannerComponent", "SetRevealDuration");

	Params::VoxelScannerComponent_SetRevealDuration Parms{};

	Parms.RevealDuration = RevealDuration;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function LevelVoxelization.VoxelScannerComponent.SetScannerActive
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// bool                                    bEnable                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UVoxelScannerComponent::SetScannerActive(bool bEnable)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VoxelScannerComponent", "SetScannerActive");

	Params::VoxelScannerComponent_SetScannerActive Parms{};

	Parms.bEnable = bEnable;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function LevelVoxelization.VoxelScannerComponent.SetShouldDoPerspectiveUpdate
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// bool                                    bEnable                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UVoxelScannerComponent::SetShouldDoPerspectiveUpdate(bool bEnable)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VoxelScannerComponent", "SetShouldDoPerspectiveUpdate");

	Params::VoxelScannerComponent_SetShouldDoPerspectiveUpdate Parms{};

	Parms.bEnable = bEnable;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function LevelVoxelization.VoxelScannerComponent.SetShouldShowScannableElementsByTag
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class FName                             Tag                                                    (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bEnable                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UVoxelScannerComponent::SetShouldShowScannableElementsByTag(class FName Tag, bool bEnable)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VoxelScannerComponent", "SetShouldShowScannableElementsByTag");

	Params::VoxelScannerComponent_SetShouldShowScannableElementsByTag Parms{};

	Parms.Tag = Tag;
	Parms.bEnable = bEnable;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function LevelVoxelization.VoxelScannerComponent.SetWallRadius
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// float                                   Radius                                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UVoxelScannerComponent::SetWallRadius(float Radius)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VoxelScannerComponent", "SetWallRadius");

	Params::VoxelScannerComponent_SetWallRadius Parms{};

	Parms.Radius = Radius;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function LevelVoxelization.VoxelScannerComponent.SetWaypointLocationByIndex
// (Final, Native, Public, HasOutParams, HasDefaults, BlueprintCallable)
// Parameters:
// int32                                   WaypointIndex                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector                          WorldLocation                                          (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UVoxelScannerComponent::SetWaypointLocationByIndex(int32 WaypointIndex, const struct FVector& WorldLocation)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VoxelScannerComponent", "SetWaypointLocationByIndex");

	Params::VoxelScannerComponent_SetWaypointLocationByIndex Parms{};

	Parms.WaypointIndex = WaypointIndex;
	Parms.WorldLocation = std::move(WorldLocation);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function LevelVoxelization.VoxelScannerComponent.SetWaypointMessageByIndex
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// int32                                   WaypointIndex                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FString                           Message                                                (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UVoxelScannerComponent::SetWaypointMessageByIndex(int32 WaypointIndex, const class FString& Message)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VoxelScannerComponent", "SetWaypointMessageByIndex");

	Params::VoxelScannerComponent_SetWaypointMessageByIndex Parms{};

	Parms.WaypointIndex = WaypointIndex;
	Parms.Message = std::move(Message);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function LevelVoxelization.VoxelScannerComponent.SetWaypointMessageFont
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class UFont*                            Font                                                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UVoxelScannerComponent::SetWaypointMessageFont(class UFont* Font)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VoxelScannerComponent", "SetWaypointMessageFont");

	Params::VoxelScannerComponent_SetWaypointMessageFont Parms{};

	Parms.Font = Font;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function LevelVoxelization.VoxelScannerComponent.UnhighlightPreviousRegion
// (Final, Native, Public, BlueprintCallable)

void UVoxelScannerComponent::UnhighlightPreviousRegion()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VoxelScannerComponent", "UnhighlightPreviousRegion");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function LevelVoxelization.VoxelScannerComponent.DoLevelInstancesShareScanData
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UVoxelScannerComponent::DoLevelInstancesShareScanData() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VoxelScannerComponent", "DoLevelInstancesShareScanData");

	Params::VoxelScannerComponent_DoLevelInstancesShareScanData Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function LevelVoxelization.VoxelScannerComponent.GetActiveWaypointCount
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// int32                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

int32 UVoxelScannerComponent::GetActiveWaypointCount() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VoxelScannerComponent", "GetActiveWaypointCount");

	Params::VoxelScannerComponent_GetActiveWaypointCount Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function LevelVoxelization.VoxelScannerComponent.GetLevelActorForLevelInstance
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// EVoxelLevelInstanceType                 InstanceType                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class AActor*                           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class AActor* UVoxelScannerComponent::GetLevelActorForLevelInstance(EVoxelLevelInstanceType InstanceType) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VoxelScannerComponent", "GetLevelActorForLevelInstance");

	Params::VoxelScannerComponent_GetLevelActorForLevelInstance Parms{};

	Parms.InstanceType = InstanceType;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function LevelVoxelization.VoxelScannerComponent.GetPrimarySceneCaptureRotationFollowsOwner
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UVoxelScannerComponent::GetPrimarySceneCaptureRotationFollowsOwner() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VoxelScannerComponent", "GetPrimarySceneCaptureRotationFollowsOwner");

	Params::VoxelScannerComponent_GetPrimarySceneCaptureRotationFollowsOwner Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function LevelVoxelization.VoxelScannerComponent.GetProceduralLevelMeshComponent
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// EVoxelLevelInstanceType                 LevelInstanceType                                      (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UVoxelScannerMeshComponent*       ReturnValue                                            (ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UVoxelScannerMeshComponent* UVoxelScannerComponent::GetProceduralLevelMeshComponent(EVoxelLevelInstanceType LevelInstanceType) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VoxelScannerComponent", "GetProceduralLevelMeshComponent");

	Params::VoxelScannerComponent_GetProceduralLevelMeshComponent Parms{};

	Parms.LevelInstanceType = LevelInstanceType;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function LevelVoxelization.VoxelScannerComponent.GetProceduralWallEdgeMeshComponent
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// EVoxelLevelInstanceType                 LevelInstanceType                                      (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UVoxelScannerMeshComponent*       ReturnValue                                            (ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UVoxelScannerMeshComponent* UVoxelScannerComponent::GetProceduralWallEdgeMeshComponent(EVoxelLevelInstanceType LevelInstanceType) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VoxelScannerComponent", "GetProceduralWallEdgeMeshComponent");

	Params::VoxelScannerComponent_GetProceduralWallEdgeMeshComponent Parms{};

	Parms.LevelInstanceType = LevelInstanceType;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function LevelVoxelization.VoxelScannerComponent.GetSceneCaptureComponent
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// EVoxelLevelInstanceType                 LevelInstanceType                                      (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class USceneCaptureComponent2D*         ReturnValue                                            (ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class USceneCaptureComponent2D* UVoxelScannerComponent::GetSceneCaptureComponent(EVoxelLevelInstanceType LevelInstanceType) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VoxelScannerComponent", "GetSceneCaptureComponent");

	Params::VoxelScannerComponent_GetSceneCaptureComponent Parms{};

	Parms.LevelInstanceType = LevelInstanceType;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function LevelVoxelization.VoxelScannerComponent.GetShouldDoPerspectiveUpdate
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UVoxelScannerComponent::GetShouldDoPerspectiveUpdate() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VoxelScannerComponent", "GetShouldDoPerspectiveUpdate");

	Params::VoxelScannerComponent_GetShouldDoPerspectiveUpdate Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function LevelVoxelization.VoxelScannerComponent.GetWaypointIndexAtLocation
// (Final, Native, Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// struct FVector                          WorldLocation                                          (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   SearchRadius                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

int32 UVoxelScannerComponent::GetWaypointIndexAtLocation(const struct FVector& WorldLocation, float SearchRadius) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VoxelScannerComponent", "GetWaypointIndexAtLocation");

	Params::VoxelScannerComponent_GetWaypointIndexAtLocation Parms{};

	Parms.WorldLocation = std::move(WorldLocation);
	Parms.SearchRadius = SearchRadius;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function LevelVoxelization.VoxelScannerComponent.GetWaypointMessageByIndex
// (Final, Native, Public, HasOutParams, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// int32                                   WaypointIndex                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FString                           OutMessage                                             (Parm, OutParm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UVoxelScannerComponent::GetWaypointMessageByIndex(int32 WaypointIndex, class FString* OutMessage) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VoxelScannerComponent", "GetWaypointMessageByIndex");

	Params::VoxelScannerComponent_GetWaypointMessageByIndex Parms{};

	Parms.WaypointIndex = WaypointIndex;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (OutMessage != nullptr)
		*OutMessage = std::move(Parms.OutMessage);

	return Parms.ReturnValue;
}


// Function LevelVoxelization.VoxelScannerComponent.HasScanDataForLevel
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class FName                             LevelName                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UVoxelScannerComponent::HasScanDataForLevel(class FName LevelName) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VoxelScannerComponent", "HasScanDataForLevel");

	Params::VoxelScannerComponent_HasScanDataForLevel Parms{};

	Parms.LevelName = LevelName;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function LevelVoxelization.VoxelScannerComponent.HasScannedVoxelColumnLocation
// (Final, Native, Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// EVoxelLevelInstanceType                 LevelInstanceType                                      (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FIntPoint                        ColumnLocation                                         (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UVoxelScannerComponent::HasScannedVoxelColumnLocation(EVoxelLevelInstanceType LevelInstanceType, const struct FIntPoint& ColumnLocation) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VoxelScannerComponent", "HasScannedVoxelColumnLocation");

	Params::VoxelScannerComponent_HasScannedVoxelColumnLocation Parms{};

	Parms.LevelInstanceType = LevelInstanceType;
	Parms.ColumnLocation = std::move(ColumnLocation);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function LevelVoxelization.VoxelScannerComponent.IsScannableFilterTagAvailable
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class FName                             Tag                                                    (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UVoxelScannerComponent::IsScannableFilterTagAvailable(class FName Tag) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VoxelScannerComponent", "IsScannableFilterTagAvailable");

	Params::VoxelScannerComponent_IsScannableFilterTagAvailable Parms{};

	Parms.Tag = Tag;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function LevelVoxelization.VoxelScannerComponent.ShouldScannableElementBeVisible
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class FName                             ScannableFilterTag                                     (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UVoxelScannerComponent::ShouldScannableElementBeVisible(class FName ScannableFilterTag) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VoxelScannerComponent", "ShouldScannableElementBeVisible");

	Params::VoxelScannerComponent_ShouldScannableElementBeVisible Parms{};

	Parms.ScannableFilterTag = ScannableFilterTag;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}

}

