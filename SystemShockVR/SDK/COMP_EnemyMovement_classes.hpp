#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: COMP_EnemyMovement

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "Engine_classes.hpp"
#include "ENUM_BodyRotationType_structs.hpp"
#include "ENUM_MoveSpeed_structs.hpp"
#include "ENUM_TargetType_structs.hpp"
#include "CoreUObject_structs.hpp"
#include "ENUM_SpeedType_structs.hpp"
#include "ENUM_TargetAssignmentType_structs.hpp"


namespace SDK
{

// BlueprintGeneratedClass COMP_EnemyMovement.COMP_EnemyMovement_C
// 0x0140 (0x01F0 - 0x00B0)
class UCOMP_EnemyMovement_C final : public UActorComponent
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x00B0(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	class UOBJ_EnemyTarget_C*                     Navigation_CharacterTarget;                        // 0x00B8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UOBJ_EnemyTarget_C*                     Body_CharacterTarget;                              // 0x00C0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class APAWN_Enemy_C*                          Pawn;                                              // 0x00C8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UObject*                                Controller;                                        // 0x00D0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         MoveSpeed_Walk;                                    // 0x00D8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         MoveSpeed_Jog;                                     // 0x00DC(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         MoveSpeed_Sprint;                                  // 0x00E0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                MoveDirection_Current;                             // 0x00E4(0x000C)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, SaveGame, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ENUM_SpeedType                                MoveDirection_RotationSpeed;                       // 0x00F0(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, SaveGame, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          StayUpright;                                       // 0x00F1(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_F2[0x2];                                       // 0x00F2(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                BodyUpDirection_Current;                           // 0x00F4(0x000C)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, SaveGame, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ENUM_BodyRotationType                         BodyRotationType;                                  // 0x0100(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ENUM_TargetType                               BodyRotationTarget;                                // 0x0101(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, SaveGame, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ENUM_SpeedType                                BodyRotateSpeed;                                   // 0x0102(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, SaveGame, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ENUM_MoveSpeed                                MoveSpeed_Target;                                  // 0x0103(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, SaveGame, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ENUM_SpeedType                                MoveSpeed_ChangeRate;                              // 0x0104(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, SaveGame, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_105[0x3];                                      // 0x0105(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         Navigation_AcceptanceRadius;                       // 0x0108(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                BodyForwardDirection_Current;                      // 0x010C(0x000C)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, SaveGame, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         MoveSpeed_Current_Unscaled;                        // 0x0118(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, SaveGame, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         BodyTurnRate_Slow;                                 // 0x011C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         BodyTurnRate_Medium;                               // 0x0120(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         BodyTurnRate_Fast;                                 // 0x0124(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          DEBUG_DrawNavigationPath;                          // 0x0128(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_129[0x3];                                      // 0x0129(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                BodyForwardDirection_Target;                       // 0x012C(0x000C)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, SaveGame, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                BodyForwardDirection_Previous;                     // 0x0138(0x000C)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         BodyAcceptanceDegrees;                             // 0x0144(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, SaveGame, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Navigation_AcceptanceRadiusSquared;                // 0x0148(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         WARNING_TIMESTAMP_SetMovePath;                     // 0x014C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         BodyRotationSpeed;                                 // 0x0150(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, SaveGame, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                MoveDirection_Target;                              // 0x0154(0x000C)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         MoveTurnRate_Slow;                                 // 0x0160(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         MoveTurnRate_Medium;                               // 0x0164(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         MoveTurnRate_Fast;                                 // 0x0168(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          DEBUG_DrawPathNormals;                             // 0x016C(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          DEBUG_DrawPathVoxels;                              // 0x016D(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          DEBUG_DrawMoveDirectionTarget;                     // 0x016E(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          DEBUG_DrawMoveDIrectionCurrent;                    // 0x016F(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                         Movespeed_ChangeRate_Slow;                         // 0x0170(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Movespeed_ChangeRate_Medium;                       // 0x0174(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Movespeed_ChangeRate_Fast;                         // 0x0178(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          DEBUG_DrawBodyDirectionTarget;                     // 0x017C(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          DEBUG_DrawBodyDirectionCurrent;                    // 0x017D(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          IsAutoStopEnabled;                                 // 0x017E(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_17F[0x1];                                      // 0x017F(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         MoveSpeed_Scale_Cached;                            // 0x0180(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          UseAnimControlledRotation;                         // 0x0184(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          ForceUpdatePath;                                   // 0x0185(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_186[0x2];                                      // 0x0186(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	class UWeightedAverageFloat*                  PathToSkillTarget_WeightedAverage;                 // 0x0188(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FIntVector                             PreviousVoxel;                                     // 0x0190(0x000C)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FIntVector                             CurrentVoxel;                                      // 0x019C(0x000C)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FIntVector                             NextVoxel;                                         // 0x01A8(0x000C)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          DEBUG_DrawUpDirectionTarget;                       // 0x01B4(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          DEBUG_DrawUpDirectionCurrent;                      // 0x01B5(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_1B6[0x2];                                      // 0x01B6(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	FMulticastInlineDelegateProperty_             OnTurningChanged;                                  // 0x01B8(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)
	FMulticastInlineDelegateProperty_             OnLocomotionChanged;                               // 0x01C8(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)
	float                                         PreviousBodyRotationSpeed;                         // 0x01D8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CanInteractTimestamp;                              // 0x01DC(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         InteractionDelayDuration;                          // 0x01E0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          InstantMoveRotationForOneFrame;                    // 0x01E4(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          UseAutomaticMovement;                              // 0x01E5(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_1E6[0x2];                                      // 0x01E6(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         MovementTickInterval;                              // 0x01E8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         MovementTickAccumTime;                             // 0x01EC(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

public:
	void OnLocomotionChanged__DelegateSignature(bool IsMoving);
	void OnTurningChanged__DelegateSignature(bool IsTurning);
	void ExecuteUbergraph_COMP_EnemyMovement(int32 EntryPoint);
	void ReceiveTick(float DeltaSeconds);
	void SetMovePath(bool AutoStop);
	void SetBodyTarget(class UOBJ_EnemyTarget_C* Target);
	void UpdateMoveSpeed();
	void SetTargetMoveSpeed(ENUM_MoveSpeed Speed, ENUM_SpeedType ChangeRate);
	void SetBodyRotateSpeed(ENUM_SpeedType RotateSpeed, bool* Changed);
	void CanRotateMoveDirectionInstantly(bool* Result);
	void GetMoveDirection_Current(struct FVector* Direction);
	void GetMoveDirection_RotationSpeed(ENUM_SpeedType* RotationSpeed);
	void SetMoveDirection_Current(const struct FVector& MoveDirection);
	void SetMoveDirection_RotationSpeed(ENUM_SpeedType RotationSpeed, bool* Changed);
	void GetTargetMoveSpeed(ENUM_MoveSpeed* MoveSpeed, ENUM_SpeedType* ChangeRate);
	void GetMoveSpeedValue(ENUM_MoveSpeed MoveSpeed, float* Speed);
	void SetBodyTargetType(ENUM_TargetType TargetType);
	void DebugDrawAll();
	void GetBodyRotationTargetType(ENUM_TargetType* BodyRotationType_0);
	void GetBodyRotateSpeed(ENUM_SpeedType* RotateSpeed);
	void SetBodyDirectionCurrent(const struct FVector& BodyDirection, float DeltaSeconds);
	void GetBodyDirectionCurrent(bool TwoD, struct FVector* BodyDirectionCurrent);
	void GetUnscaledMoveSpeedCurrent(float* MoveSpeedCurrent);
	void SetMoveSpeedCurrent(float MoveSpeedCurrent);
	void GetBodyRotateSpeedValueByType(float* BodyRotateSpeed_0);
	void SetAcceptanceRadius(float AcceptanceRadius);
	void GetPawn(class APAWN_Enemy_C** Pawn_0);
	void GetBodyTarget(class UOBJ_EnemyTarget_C** Target);
	void Reset();
	void UpdateMoveDirection(float DeltaSeconds);
	void UpdateSpeedTransition(float DeltaSeconds);
	void UpdateBodyForward(float DeltaSeconds);
	void ApplyStandardMovement(float DeltaSeconds);
	void ApplyClimbingMovement(float DeltaSeconds);
	void SetIsAlive(bool IsAlive);
	void Can_Move_Automatically(bool* Result);
	void HasFullPathToTarget(bool* IsValid);
	void GetAngleToTarget(ENUM_TargetAssignmentType Type, float* AngleToTarget);
	void GetImmediateMoveLocation(struct FVector* Location);
	void GetImmediateMoveDirection(struct FVector* Direction);
	void TickEnemyMovement(float DeltaSeconds);
	void UpdateEnemyMovement(float DeltaSeconds);
	void InitializeEnemyMovement();
	void EVENT_OnWalkScaleAttribChanged(float CurrValue, float LastValue);
	void ResetBodyDirection();
	void InitializeClimberTransform();
	void SetMovementTickInterval(float NewInterval);
	void SetForceUpdatePath(bool ForceUpdatePath_0);
	void GetNavigationTarget(class UOBJ_EnemyTarget_C** Target);
	void SetNavigationTarget(class UOBJ_EnemyTarget_C* Target, bool CreatePath);
	void IsOnVerticalPathSection(bool* Result);
	void IsUsingCustomOrFlyingMovement(bool* UsingCustomMovement);
	void DebugDrawNavPath();
	void HasReachedDestination(bool* Result);
	void SetAutoStopEnabled(bool Enabled);
	void HandleNavObstacles();
	void GetMoveSpeedTurnMultiplier(float* Multiplier);

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"COMP_EnemyMovement_C">();
	}
	static class UCOMP_EnemyMovement_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<UCOMP_EnemyMovement_C>();
	}
};
static_assert(alignof(UCOMP_EnemyMovement_C) == 0x000008, "Wrong alignment on UCOMP_EnemyMovement_C");
static_assert(sizeof(UCOMP_EnemyMovement_C) == 0x0001F0, "Wrong size on UCOMP_EnemyMovement_C");
static_assert(offsetof(UCOMP_EnemyMovement_C, UberGraphFrame) == 0x0000B0, "Member 'UCOMP_EnemyMovement_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(UCOMP_EnemyMovement_C, Navigation_CharacterTarget) == 0x0000B8, "Member 'UCOMP_EnemyMovement_C::Navigation_CharacterTarget' has a wrong offset!");
static_assert(offsetof(UCOMP_EnemyMovement_C, Body_CharacterTarget) == 0x0000C0, "Member 'UCOMP_EnemyMovement_C::Body_CharacterTarget' has a wrong offset!");
static_assert(offsetof(UCOMP_EnemyMovement_C, Pawn) == 0x0000C8, "Member 'UCOMP_EnemyMovement_C::Pawn' has a wrong offset!");
static_assert(offsetof(UCOMP_EnemyMovement_C, Controller) == 0x0000D0, "Member 'UCOMP_EnemyMovement_C::Controller' has a wrong offset!");
static_assert(offsetof(UCOMP_EnemyMovement_C, MoveSpeed_Walk) == 0x0000D8, "Member 'UCOMP_EnemyMovement_C::MoveSpeed_Walk' has a wrong offset!");
static_assert(offsetof(UCOMP_EnemyMovement_C, MoveSpeed_Jog) == 0x0000DC, "Member 'UCOMP_EnemyMovement_C::MoveSpeed_Jog' has a wrong offset!");
static_assert(offsetof(UCOMP_EnemyMovement_C, MoveSpeed_Sprint) == 0x0000E0, "Member 'UCOMP_EnemyMovement_C::MoveSpeed_Sprint' has a wrong offset!");
static_assert(offsetof(UCOMP_EnemyMovement_C, MoveDirection_Current) == 0x0000E4, "Member 'UCOMP_EnemyMovement_C::MoveDirection_Current' has a wrong offset!");
static_assert(offsetof(UCOMP_EnemyMovement_C, MoveDirection_RotationSpeed) == 0x0000F0, "Member 'UCOMP_EnemyMovement_C::MoveDirection_RotationSpeed' has a wrong offset!");
static_assert(offsetof(UCOMP_EnemyMovement_C, StayUpright) == 0x0000F1, "Member 'UCOMP_EnemyMovement_C::StayUpright' has a wrong offset!");
static_assert(offsetof(UCOMP_EnemyMovement_C, BodyUpDirection_Current) == 0x0000F4, "Member 'UCOMP_EnemyMovement_C::BodyUpDirection_Current' has a wrong offset!");
static_assert(offsetof(UCOMP_EnemyMovement_C, BodyRotationType) == 0x000100, "Member 'UCOMP_EnemyMovement_C::BodyRotationType' has a wrong offset!");
static_assert(offsetof(UCOMP_EnemyMovement_C, BodyRotationTarget) == 0x000101, "Member 'UCOMP_EnemyMovement_C::BodyRotationTarget' has a wrong offset!");
static_assert(offsetof(UCOMP_EnemyMovement_C, BodyRotateSpeed) == 0x000102, "Member 'UCOMP_EnemyMovement_C::BodyRotateSpeed' has a wrong offset!");
static_assert(offsetof(UCOMP_EnemyMovement_C, MoveSpeed_Target) == 0x000103, "Member 'UCOMP_EnemyMovement_C::MoveSpeed_Target' has a wrong offset!");
static_assert(offsetof(UCOMP_EnemyMovement_C, MoveSpeed_ChangeRate) == 0x000104, "Member 'UCOMP_EnemyMovement_C::MoveSpeed_ChangeRate' has a wrong offset!");
static_assert(offsetof(UCOMP_EnemyMovement_C, Navigation_AcceptanceRadius) == 0x000108, "Member 'UCOMP_EnemyMovement_C::Navigation_AcceptanceRadius' has a wrong offset!");
static_assert(offsetof(UCOMP_EnemyMovement_C, BodyForwardDirection_Current) == 0x00010C, "Member 'UCOMP_EnemyMovement_C::BodyForwardDirection_Current' has a wrong offset!");
static_assert(offsetof(UCOMP_EnemyMovement_C, MoveSpeed_Current_Unscaled) == 0x000118, "Member 'UCOMP_EnemyMovement_C::MoveSpeed_Current_Unscaled' has a wrong offset!");
static_assert(offsetof(UCOMP_EnemyMovement_C, BodyTurnRate_Slow) == 0x00011C, "Member 'UCOMP_EnemyMovement_C::BodyTurnRate_Slow' has a wrong offset!");
static_assert(offsetof(UCOMP_EnemyMovement_C, BodyTurnRate_Medium) == 0x000120, "Member 'UCOMP_EnemyMovement_C::BodyTurnRate_Medium' has a wrong offset!");
static_assert(offsetof(UCOMP_EnemyMovement_C, BodyTurnRate_Fast) == 0x000124, "Member 'UCOMP_EnemyMovement_C::BodyTurnRate_Fast' has a wrong offset!");
static_assert(offsetof(UCOMP_EnemyMovement_C, DEBUG_DrawNavigationPath) == 0x000128, "Member 'UCOMP_EnemyMovement_C::DEBUG_DrawNavigationPath' has a wrong offset!");
static_assert(offsetof(UCOMP_EnemyMovement_C, BodyForwardDirection_Target) == 0x00012C, "Member 'UCOMP_EnemyMovement_C::BodyForwardDirection_Target' has a wrong offset!");
static_assert(offsetof(UCOMP_EnemyMovement_C, BodyForwardDirection_Previous) == 0x000138, "Member 'UCOMP_EnemyMovement_C::BodyForwardDirection_Previous' has a wrong offset!");
static_assert(offsetof(UCOMP_EnemyMovement_C, BodyAcceptanceDegrees) == 0x000144, "Member 'UCOMP_EnemyMovement_C::BodyAcceptanceDegrees' has a wrong offset!");
static_assert(offsetof(UCOMP_EnemyMovement_C, Navigation_AcceptanceRadiusSquared) == 0x000148, "Member 'UCOMP_EnemyMovement_C::Navigation_AcceptanceRadiusSquared' has a wrong offset!");
static_assert(offsetof(UCOMP_EnemyMovement_C, WARNING_TIMESTAMP_SetMovePath) == 0x00014C, "Member 'UCOMP_EnemyMovement_C::WARNING_TIMESTAMP_SetMovePath' has a wrong offset!");
static_assert(offsetof(UCOMP_EnemyMovement_C, BodyRotationSpeed) == 0x000150, "Member 'UCOMP_EnemyMovement_C::BodyRotationSpeed' has a wrong offset!");
static_assert(offsetof(UCOMP_EnemyMovement_C, MoveDirection_Target) == 0x000154, "Member 'UCOMP_EnemyMovement_C::MoveDirection_Target' has a wrong offset!");
static_assert(offsetof(UCOMP_EnemyMovement_C, MoveTurnRate_Slow) == 0x000160, "Member 'UCOMP_EnemyMovement_C::MoveTurnRate_Slow' has a wrong offset!");
static_assert(offsetof(UCOMP_EnemyMovement_C, MoveTurnRate_Medium) == 0x000164, "Member 'UCOMP_EnemyMovement_C::MoveTurnRate_Medium' has a wrong offset!");
static_assert(offsetof(UCOMP_EnemyMovement_C, MoveTurnRate_Fast) == 0x000168, "Member 'UCOMP_EnemyMovement_C::MoveTurnRate_Fast' has a wrong offset!");
static_assert(offsetof(UCOMP_EnemyMovement_C, DEBUG_DrawPathNormals) == 0x00016C, "Member 'UCOMP_EnemyMovement_C::DEBUG_DrawPathNormals' has a wrong offset!");
static_assert(offsetof(UCOMP_EnemyMovement_C, DEBUG_DrawPathVoxels) == 0x00016D, "Member 'UCOMP_EnemyMovement_C::DEBUG_DrawPathVoxels' has a wrong offset!");
static_assert(offsetof(UCOMP_EnemyMovement_C, DEBUG_DrawMoveDirectionTarget) == 0x00016E, "Member 'UCOMP_EnemyMovement_C::DEBUG_DrawMoveDirectionTarget' has a wrong offset!");
static_assert(offsetof(UCOMP_EnemyMovement_C, DEBUG_DrawMoveDIrectionCurrent) == 0x00016F, "Member 'UCOMP_EnemyMovement_C::DEBUG_DrawMoveDIrectionCurrent' has a wrong offset!");
static_assert(offsetof(UCOMP_EnemyMovement_C, Movespeed_ChangeRate_Slow) == 0x000170, "Member 'UCOMP_EnemyMovement_C::Movespeed_ChangeRate_Slow' has a wrong offset!");
static_assert(offsetof(UCOMP_EnemyMovement_C, Movespeed_ChangeRate_Medium) == 0x000174, "Member 'UCOMP_EnemyMovement_C::Movespeed_ChangeRate_Medium' has a wrong offset!");
static_assert(offsetof(UCOMP_EnemyMovement_C, Movespeed_ChangeRate_Fast) == 0x000178, "Member 'UCOMP_EnemyMovement_C::Movespeed_ChangeRate_Fast' has a wrong offset!");
static_assert(offsetof(UCOMP_EnemyMovement_C, DEBUG_DrawBodyDirectionTarget) == 0x00017C, "Member 'UCOMP_EnemyMovement_C::DEBUG_DrawBodyDirectionTarget' has a wrong offset!");
static_assert(offsetof(UCOMP_EnemyMovement_C, DEBUG_DrawBodyDirectionCurrent) == 0x00017D, "Member 'UCOMP_EnemyMovement_C::DEBUG_DrawBodyDirectionCurrent' has a wrong offset!");
static_assert(offsetof(UCOMP_EnemyMovement_C, IsAutoStopEnabled) == 0x00017E, "Member 'UCOMP_EnemyMovement_C::IsAutoStopEnabled' has a wrong offset!");
static_assert(offsetof(UCOMP_EnemyMovement_C, MoveSpeed_Scale_Cached) == 0x000180, "Member 'UCOMP_EnemyMovement_C::MoveSpeed_Scale_Cached' has a wrong offset!");
static_assert(offsetof(UCOMP_EnemyMovement_C, UseAnimControlledRotation) == 0x000184, "Member 'UCOMP_EnemyMovement_C::UseAnimControlledRotation' has a wrong offset!");
static_assert(offsetof(UCOMP_EnemyMovement_C, ForceUpdatePath) == 0x000185, "Member 'UCOMP_EnemyMovement_C::ForceUpdatePath' has a wrong offset!");
static_assert(offsetof(UCOMP_EnemyMovement_C, PathToSkillTarget_WeightedAverage) == 0x000188, "Member 'UCOMP_EnemyMovement_C::PathToSkillTarget_WeightedAverage' has a wrong offset!");
static_assert(offsetof(UCOMP_EnemyMovement_C, PreviousVoxel) == 0x000190, "Member 'UCOMP_EnemyMovement_C::PreviousVoxel' has a wrong offset!");
static_assert(offsetof(UCOMP_EnemyMovement_C, CurrentVoxel) == 0x00019C, "Member 'UCOMP_EnemyMovement_C::CurrentVoxel' has a wrong offset!");
static_assert(offsetof(UCOMP_EnemyMovement_C, NextVoxel) == 0x0001A8, "Member 'UCOMP_EnemyMovement_C::NextVoxel' has a wrong offset!");
static_assert(offsetof(UCOMP_EnemyMovement_C, DEBUG_DrawUpDirectionTarget) == 0x0001B4, "Member 'UCOMP_EnemyMovement_C::DEBUG_DrawUpDirectionTarget' has a wrong offset!");
static_assert(offsetof(UCOMP_EnemyMovement_C, DEBUG_DrawUpDirectionCurrent) == 0x0001B5, "Member 'UCOMP_EnemyMovement_C::DEBUG_DrawUpDirectionCurrent' has a wrong offset!");
static_assert(offsetof(UCOMP_EnemyMovement_C, OnTurningChanged) == 0x0001B8, "Member 'UCOMP_EnemyMovement_C::OnTurningChanged' has a wrong offset!");
static_assert(offsetof(UCOMP_EnemyMovement_C, OnLocomotionChanged) == 0x0001C8, "Member 'UCOMP_EnemyMovement_C::OnLocomotionChanged' has a wrong offset!");
static_assert(offsetof(UCOMP_EnemyMovement_C, PreviousBodyRotationSpeed) == 0x0001D8, "Member 'UCOMP_EnemyMovement_C::PreviousBodyRotationSpeed' has a wrong offset!");
static_assert(offsetof(UCOMP_EnemyMovement_C, CanInteractTimestamp) == 0x0001DC, "Member 'UCOMP_EnemyMovement_C::CanInteractTimestamp' has a wrong offset!");
static_assert(offsetof(UCOMP_EnemyMovement_C, InteractionDelayDuration) == 0x0001E0, "Member 'UCOMP_EnemyMovement_C::InteractionDelayDuration' has a wrong offset!");
static_assert(offsetof(UCOMP_EnemyMovement_C, InstantMoveRotationForOneFrame) == 0x0001E4, "Member 'UCOMP_EnemyMovement_C::InstantMoveRotationForOneFrame' has a wrong offset!");
static_assert(offsetof(UCOMP_EnemyMovement_C, UseAutomaticMovement) == 0x0001E5, "Member 'UCOMP_EnemyMovement_C::UseAutomaticMovement' has a wrong offset!");
static_assert(offsetof(UCOMP_EnemyMovement_C, MovementTickInterval) == 0x0001E8, "Member 'UCOMP_EnemyMovement_C::MovementTickInterval' has a wrong offset!");
static_assert(offsetof(UCOMP_EnemyMovement_C, MovementTickAccumTime) == 0x0001EC, "Member 'UCOMP_EnemyMovement_C::MovementTickAccumTime' has a wrong offset!");

}

