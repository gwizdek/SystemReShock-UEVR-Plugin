#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: LightTransitionManager

#include "Basic.hpp"

#include "LightTransitionManager_classes.hpp"
#include "LightTransitionManager_parameters.hpp"


namespace SDK
{

// Function LightTransitionManager.LightTransitionManager_C.OnTransitionFinished__DelegateSignature
// (Public, Delegate, BlueprintCallable, BlueprintEvent)

void ULightTransitionManager_C::OnTransitionFinished__DelegateSignature()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("LightTransitionManager_C", "OnTransitionFinished__DelegateSignature");

	UObject::ProcessEvent(Func, nullptr);
}


// Function LightTransitionManager.LightTransitionManager_C.InitializeLightManager
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    StartsOn                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ULightTransitionManager_C::InitializeLightManager(bool StartsOn)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("LightTransitionManager_C", "InitializeLightManager");

	Params::LightTransitionManager_C_InitializeLightManager Parms{};

	Parms.StartsOn = StartsOn;

	UObject::ProcessEvent(Func, &Parms);
}


// Function LightTransitionManager.LightTransitionManager_C.ToggleLightState
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// float                                   InFlickerFrequency                                     (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// float                                   InDuration                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ULightTransitionManager_C::ToggleLightState(float InFlickerFrequency, float InDuration)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("LightTransitionManager_C", "ToggleLightState");

	Params::LightTransitionManager_C_ToggleLightState Parms{};

	Parms.InFlickerFrequency = InFlickerFrequency;
	Parms.InDuration = InDuration;

	UObject::ProcessEvent(Func, &Parms);
}


// Function LightTransitionManager.LightTransitionManager_C.TrySetLightState
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    InState                                                (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// float                                   InFlickerFrequency                                     (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// float                                   InDuration                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    Result                                                 (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ULightTransitionManager_C::TrySetLightState(bool InState, float InFlickerFrequency, float InDuration, bool* Result)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("LightTransitionManager_C", "TrySetLightState");

	Params::LightTransitionManager_C_TrySetLightState Parms{};

	Parms.InState = InState;
	Parms.InFlickerFrequency = InFlickerFrequency;
	Parms.InDuration = InDuration;

	UObject::ProcessEvent(Func, &Parms);

	if (Result != nullptr)
		*Result = Parms.Result;
}


// Function LightTransitionManager.LightTransitionManager_C.UpdateIntensity
// (Private, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// float                                   Alpha                                                  (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ULightTransitionManager_C::UpdateIntensity(float Alpha)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("LightTransitionManager_C", "UpdateIntensity");

	Params::LightTransitionManager_C_UpdateIntensity Parms{};

	Parms.Alpha = Alpha;

	UObject::ProcessEvent(Func, &Parms);
}


// Function LightTransitionManager.LightTransitionManager_C.EVENT_OnUpdateLightIntensity
// (Private, BlueprintCallable, BlueprintEvent)

void ULightTransitionManager_C::EVENT_OnUpdateLightIntensity()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("LightTransitionManager_C", "EVENT_OnUpdateLightIntensity");

	UObject::ProcessEvent(Func, nullptr);
}


// Function LightTransitionManager.LightTransitionManager_C.SetAutoDestroy
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    State                                                  (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ULightTransitionManager_C::SetAutoDestroy(bool State)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("LightTransitionManager_C", "SetAutoDestroy");

	Params::LightTransitionManager_C_SetAutoDestroy Parms{};

	Parms.State = State;

	UObject::ProcessEvent(Func, &Parms);
}


// Function LightTransitionManager.LightTransitionManager_C.SetDefaultEmissiveIntensity
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// float                                   Intensity                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// float                                   Duration                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ULightTransitionManager_C::SetDefaultEmissiveIntensity(float Intensity, float Duration)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("LightTransitionManager_C", "SetDefaultEmissiveIntensity");

	Params::LightTransitionManager_C_SetDefaultEmissiveIntensity Parms{};

	Parms.Intensity = Intensity;
	Parms.Duration = Duration;

	UObject::ProcessEvent(Func, &Parms);
}


// Function LightTransitionManager.LightTransitionManager_C.GetTransitionTimeRemaining
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// float                                   Result                                                 (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ULightTransitionManager_C::GetTransitionTimeRemaining(float* Result)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("LightTransitionManager_C", "GetTransitionTimeRemaining");

	Params::LightTransitionManager_C_GetTransitionTimeRemaining Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (Result != nullptr)
		*Result = Parms.Result;
}


// Function LightTransitionManager.LightTransitionManager_C.GetElapsedTransitionTime
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// float                                   Result                                                 (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ULightTransitionManager_C::GetElapsedTransitionTime(float* Result)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("LightTransitionManager_C", "GetElapsedTransitionTime");

	Params::LightTransitionManager_C_GetElapsedTransitionTime Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (Result != nullptr)
		*Result = Parms.Result;
}

}

