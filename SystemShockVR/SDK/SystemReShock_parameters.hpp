#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: SystemReShock

#include "Basic.hpp"

#include "SystemReShock_structs.hpp"
#include "CoreUObject_structs.hpp"
#include "InputCore_structs.hpp"
#include "LevelVoxelization_structs.hpp"


namespace SDK::Params
{

// Function SystemReShock.PerspectiveMeshWidget.ConvertToDynamicMaterialInstance
// 0x0010 (0x0010 - 0x0000)
struct PerspectiveMeshWidget_ConvertToDynamicMaterialInstance final
{
public:
	int32                                         MaterialIndex;                                     // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UMaterialInstanceDynamic*               ReturnValue;                                       // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PerspectiveMeshWidget_ConvertToDynamicMaterialInstance) == 0x000008, "Wrong alignment on PerspectiveMeshWidget_ConvertToDynamicMaterialInstance");
static_assert(sizeof(PerspectiveMeshWidget_ConvertToDynamicMaterialInstance) == 0x000010, "Wrong size on PerspectiveMeshWidget_ConvertToDynamicMaterialInstance");
static_assert(offsetof(PerspectiveMeshWidget_ConvertToDynamicMaterialInstance, MaterialIndex) == 0x000000, "Member 'PerspectiveMeshWidget_ConvertToDynamicMaterialInstance::MaterialIndex' has a wrong offset!");
static_assert(offsetof(PerspectiveMeshWidget_ConvertToDynamicMaterialInstance, ReturnValue) == 0x000008, "Member 'PerspectiveMeshWidget_ConvertToDynamicMaterialInstance::ReturnValue' has a wrong offset!");

// Function SystemReShock.PerspectiveMeshWidget.SetMaterial
// 0x0010 (0x0010 - 0x0000)
struct PerspectiveMeshWidget_SetMaterial final
{
public:
	int32                                         MaterialIndex;                                     // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UMaterialInterface*                     Material;                                          // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PerspectiveMeshWidget_SetMaterial) == 0x000008, "Wrong alignment on PerspectiveMeshWidget_SetMaterial");
static_assert(sizeof(PerspectiveMeshWidget_SetMaterial) == 0x000010, "Wrong size on PerspectiveMeshWidget_SetMaterial");
static_assert(offsetof(PerspectiveMeshWidget_SetMaterial, MaterialIndex) == 0x000000, "Member 'PerspectiveMeshWidget_SetMaterial::MaterialIndex' has a wrong offset!");
static_assert(offsetof(PerspectiveMeshWidget_SetMaterial, Material) == 0x000008, "Member 'PerspectiveMeshWidget_SetMaterial::Material' has a wrong offset!");

// Function SystemReShock.PerspectiveMeshWidget.SetSurfaceBlendAmount
// 0x0004 (0x0004 - 0x0000)
struct PerspectiveMeshWidget_SetSurfaceBlendAmount final
{
public:
	float                                         Amount;                                            // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PerspectiveMeshWidget_SetSurfaceBlendAmount) == 0x000004, "Wrong alignment on PerspectiveMeshWidget_SetSurfaceBlendAmount");
static_assert(sizeof(PerspectiveMeshWidget_SetSurfaceBlendAmount) == 0x000004, "Wrong size on PerspectiveMeshWidget_SetSurfaceBlendAmount");
static_assert(offsetof(PerspectiveMeshWidget_SetSurfaceBlendAmount, Amount) == 0x000000, "Member 'PerspectiveMeshWidget_SetSurfaceBlendAmount::Amount' has a wrong offset!");

// Function SystemReShock.PerspectiveMeshWidget.SetVertexColors
// 0x0004 (0x0004 - 0x0000)
struct PerspectiveMeshWidget_SetVertexColors final
{
public:
	struct FColor                                 NewColor;                                          // 0x0000(0x0004)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PerspectiveMeshWidget_SetVertexColors) == 0x000004, "Wrong alignment on PerspectiveMeshWidget_SetVertexColors");
static_assert(sizeof(PerspectiveMeshWidget_SetVertexColors) == 0x000004, "Wrong size on PerspectiveMeshWidget_SetVertexColors");
static_assert(offsetof(PerspectiveMeshWidget_SetVertexColors, NewColor) == 0x000000, "Member 'PerspectiveMeshWidget_SetVertexColors::NewColor' has a wrong offset!");

// Function SystemReShock.PerspectiveMeshWidget.GetMaterial
// 0x0010 (0x0010 - 0x0000)
struct PerspectiveMeshWidget_GetMaterial final
{
public:
	int32                                         MaterialIndex;                                     // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UMaterialInterface*                     ReturnValue;                                       // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PerspectiveMeshWidget_GetMaterial) == 0x000008, "Wrong alignment on PerspectiveMeshWidget_GetMaterial");
static_assert(sizeof(PerspectiveMeshWidget_GetMaterial) == 0x000010, "Wrong size on PerspectiveMeshWidget_GetMaterial");
static_assert(offsetof(PerspectiveMeshWidget_GetMaterial, MaterialIndex) == 0x000000, "Member 'PerspectiveMeshWidget_GetMaterial::MaterialIndex' has a wrong offset!");
static_assert(offsetof(PerspectiveMeshWidget_GetMaterial, ReturnValue) == 0x000008, "Member 'PerspectiveMeshWidget_GetMaterial::ReturnValue' has a wrong offset!");

// Function SystemReShock.PerspectiveMeshWidget.GetNearestTriangleIndexToWindowPoint
// 0x0020 (0x0020 - 0x0000)
struct PerspectiveMeshWidget_GetNearestTriangleIndexToWindowPoint final
{
public:
	int32                                         SubMeshIndex;                                      // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector2D                              WindowPoint;                                       // 0x0004(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                OutBarycentricCoords;                              // 0x000C(0x000C)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         OutDistance;                                       // 0x0018(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ReturnValue;                                       // 0x001C(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PerspectiveMeshWidget_GetNearestTriangleIndexToWindowPoint) == 0x000004, "Wrong alignment on PerspectiveMeshWidget_GetNearestTriangleIndexToWindowPoint");
static_assert(sizeof(PerspectiveMeshWidget_GetNearestTriangleIndexToWindowPoint) == 0x000020, "Wrong size on PerspectiveMeshWidget_GetNearestTriangleIndexToWindowPoint");
static_assert(offsetof(PerspectiveMeshWidget_GetNearestTriangleIndexToWindowPoint, SubMeshIndex) == 0x000000, "Member 'PerspectiveMeshWidget_GetNearestTriangleIndexToWindowPoint::SubMeshIndex' has a wrong offset!");
static_assert(offsetof(PerspectiveMeshWidget_GetNearestTriangleIndexToWindowPoint, WindowPoint) == 0x000004, "Member 'PerspectiveMeshWidget_GetNearestTriangleIndexToWindowPoint::WindowPoint' has a wrong offset!");
static_assert(offsetof(PerspectiveMeshWidget_GetNearestTriangleIndexToWindowPoint, OutBarycentricCoords) == 0x00000C, "Member 'PerspectiveMeshWidget_GetNearestTriangleIndexToWindowPoint::OutBarycentricCoords' has a wrong offset!");
static_assert(offsetof(PerspectiveMeshWidget_GetNearestTriangleIndexToWindowPoint, OutDistance) == 0x000018, "Member 'PerspectiveMeshWidget_GetNearestTriangleIndexToWindowPoint::OutDistance' has a wrong offset!");
static_assert(offsetof(PerspectiveMeshWidget_GetNearestTriangleIndexToWindowPoint, ReturnValue) == 0x00001C, "Member 'PerspectiveMeshWidget_GetNearestTriangleIndexToWindowPoint::ReturnValue' has a wrong offset!");

// Function SystemReShock.PerspectiveMeshWidget.GetNearestTriangleIndexToWindowPointForAnyMesh
// 0x0020 (0x0020 - 0x0000)
struct PerspectiveMeshWidget_GetNearestTriangleIndexToWindowPointForAnyMesh final
{
public:
	struct FVector2D                              WindowPoint;                                       // 0x0000(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         OutSubMeshIndex;                                   // 0x0008(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                OutBarycentricCoords;                              // 0x000C(0x000C)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         OutDistance;                                       // 0x0018(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ReturnValue;                                       // 0x001C(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PerspectiveMeshWidget_GetNearestTriangleIndexToWindowPointForAnyMesh) == 0x000004, "Wrong alignment on PerspectiveMeshWidget_GetNearestTriangleIndexToWindowPointForAnyMesh");
static_assert(sizeof(PerspectiveMeshWidget_GetNearestTriangleIndexToWindowPointForAnyMesh) == 0x000020, "Wrong size on PerspectiveMeshWidget_GetNearestTriangleIndexToWindowPointForAnyMesh");
static_assert(offsetof(PerspectiveMeshWidget_GetNearestTriangleIndexToWindowPointForAnyMesh, WindowPoint) == 0x000000, "Member 'PerspectiveMeshWidget_GetNearestTriangleIndexToWindowPointForAnyMesh::WindowPoint' has a wrong offset!");
static_assert(offsetof(PerspectiveMeshWidget_GetNearestTriangleIndexToWindowPointForAnyMesh, OutSubMeshIndex) == 0x000008, "Member 'PerspectiveMeshWidget_GetNearestTriangleIndexToWindowPointForAnyMesh::OutSubMeshIndex' has a wrong offset!");
static_assert(offsetof(PerspectiveMeshWidget_GetNearestTriangleIndexToWindowPointForAnyMesh, OutBarycentricCoords) == 0x00000C, "Member 'PerspectiveMeshWidget_GetNearestTriangleIndexToWindowPointForAnyMesh::OutBarycentricCoords' has a wrong offset!");
static_assert(offsetof(PerspectiveMeshWidget_GetNearestTriangleIndexToWindowPointForAnyMesh, OutDistance) == 0x000018, "Member 'PerspectiveMeshWidget_GetNearestTriangleIndexToWindowPointForAnyMesh::OutDistance' has a wrong offset!");
static_assert(offsetof(PerspectiveMeshWidget_GetNearestTriangleIndexToWindowPointForAnyMesh, ReturnValue) == 0x00001C, "Member 'PerspectiveMeshWidget_GetNearestTriangleIndexToWindowPointForAnyMesh::ReturnValue' has a wrong offset!");

// Function SystemReShock.PerspectiveMeshWidget.GetProjectedWindowBounds
// 0x0014 (0x0014 - 0x0000)
struct PerspectiveMeshWidget_GetProjectedWindowBounds final
{
public:
	struct FBox2D                                 ReturnValue;                                       // 0x0000(0x0014)(ConstParm, Parm, OutParm, ZeroConstructor, ReturnParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(PerspectiveMeshWidget_GetProjectedWindowBounds) == 0x000004, "Wrong alignment on PerspectiveMeshWidget_GetProjectedWindowBounds");
static_assert(sizeof(PerspectiveMeshWidget_GetProjectedWindowBounds) == 0x000014, "Wrong size on PerspectiveMeshWidget_GetProjectedWindowBounds");
static_assert(offsetof(PerspectiveMeshWidget_GetProjectedWindowBounds, ReturnValue) == 0x000000, "Member 'PerspectiveMeshWidget_GetProjectedWindowBounds::ReturnValue' has a wrong offset!");

// Function SystemReShock.PerspectiveMeshWidget.GetSubmeshCount
// 0x0004 (0x0004 - 0x0000)
struct PerspectiveMeshWidget_GetSubmeshCount final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PerspectiveMeshWidget_GetSubmeshCount) == 0x000004, "Wrong alignment on PerspectiveMeshWidget_GetSubmeshCount");
static_assert(sizeof(PerspectiveMeshWidget_GetSubmeshCount) == 0x000004, "Wrong size on PerspectiveMeshWidget_GetSubmeshCount");
static_assert(offsetof(PerspectiveMeshWidget_GetSubmeshCount, ReturnValue) == 0x000000, "Member 'PerspectiveMeshWidget_GetSubmeshCount::ReturnValue' has a wrong offset!");

// Function SystemReShock.PerspectiveMeshWidget.GetSurfaceBlendAmount
// 0x0004 (0x0004 - 0x0000)
struct PerspectiveMeshWidget_GetSurfaceBlendAmount final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PerspectiveMeshWidget_GetSurfaceBlendAmount) == 0x000004, "Wrong alignment on PerspectiveMeshWidget_GetSurfaceBlendAmount");
static_assert(sizeof(PerspectiveMeshWidget_GetSurfaceBlendAmount) == 0x000004, "Wrong size on PerspectiveMeshWidget_GetSurfaceBlendAmount");
static_assert(offsetof(PerspectiveMeshWidget_GetSurfaceBlendAmount, ReturnValue) == 0x000000, "Member 'PerspectiveMeshWidget_GetSurfaceBlendAmount::ReturnValue' has a wrong offset!");

// Function SystemReShock.PerspectiveMeshWidget.GetTextureCoordinatesForTrianglePoint
// 0x0020 (0x0020 - 0x0000)
struct PerspectiveMeshWidget_GetTextureCoordinatesForTrianglePoint final
{
public:
	int32                                         SubMeshIndex;                                      // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         TriangleIndex;                                     // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         TexCoordIndex;                                     // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                BarycentricCoords;                                 // 0x000C(0x000C)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector2D                              ReturnValue;                                       // 0x0018(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PerspectiveMeshWidget_GetTextureCoordinatesForTrianglePoint) == 0x000004, "Wrong alignment on PerspectiveMeshWidget_GetTextureCoordinatesForTrianglePoint");
static_assert(sizeof(PerspectiveMeshWidget_GetTextureCoordinatesForTrianglePoint) == 0x000020, "Wrong size on PerspectiveMeshWidget_GetTextureCoordinatesForTrianglePoint");
static_assert(offsetof(PerspectiveMeshWidget_GetTextureCoordinatesForTrianglePoint, SubMeshIndex) == 0x000000, "Member 'PerspectiveMeshWidget_GetTextureCoordinatesForTrianglePoint::SubMeshIndex' has a wrong offset!");
static_assert(offsetof(PerspectiveMeshWidget_GetTextureCoordinatesForTrianglePoint, TriangleIndex) == 0x000004, "Member 'PerspectiveMeshWidget_GetTextureCoordinatesForTrianglePoint::TriangleIndex' has a wrong offset!");
static_assert(offsetof(PerspectiveMeshWidget_GetTextureCoordinatesForTrianglePoint, TexCoordIndex) == 0x000008, "Member 'PerspectiveMeshWidget_GetTextureCoordinatesForTrianglePoint::TexCoordIndex' has a wrong offset!");
static_assert(offsetof(PerspectiveMeshWidget_GetTextureCoordinatesForTrianglePoint, BarycentricCoords) == 0x00000C, "Member 'PerspectiveMeshWidget_GetTextureCoordinatesForTrianglePoint::BarycentricCoords' has a wrong offset!");
static_assert(offsetof(PerspectiveMeshWidget_GetTextureCoordinatesForTrianglePoint, ReturnValue) == 0x000018, "Member 'PerspectiveMeshWidget_GetTextureCoordinatesForTrianglePoint::ReturnValue' has a wrong offset!");

// Function SystemReShock.PerspectiveMeshWidget.GetTriangleIndexAtWindowPoint
// 0x001C (0x001C - 0x0000)
struct PerspectiveMeshWidget_GetTriangleIndexAtWindowPoint final
{
public:
	int32                                         SubMeshIndex;                                      // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector2D                              WindowPoint;                                       // 0x0004(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                OutBarycentricCoords;                              // 0x000C(0x000C)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ReturnValue;                                       // 0x0018(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PerspectiveMeshWidget_GetTriangleIndexAtWindowPoint) == 0x000004, "Wrong alignment on PerspectiveMeshWidget_GetTriangleIndexAtWindowPoint");
static_assert(sizeof(PerspectiveMeshWidget_GetTriangleIndexAtWindowPoint) == 0x00001C, "Wrong size on PerspectiveMeshWidget_GetTriangleIndexAtWindowPoint");
static_assert(offsetof(PerspectiveMeshWidget_GetTriangleIndexAtWindowPoint, SubMeshIndex) == 0x000000, "Member 'PerspectiveMeshWidget_GetTriangleIndexAtWindowPoint::SubMeshIndex' has a wrong offset!");
static_assert(offsetof(PerspectiveMeshWidget_GetTriangleIndexAtWindowPoint, WindowPoint) == 0x000004, "Member 'PerspectiveMeshWidget_GetTriangleIndexAtWindowPoint::WindowPoint' has a wrong offset!");
static_assert(offsetof(PerspectiveMeshWidget_GetTriangleIndexAtWindowPoint, OutBarycentricCoords) == 0x00000C, "Member 'PerspectiveMeshWidget_GetTriangleIndexAtWindowPoint::OutBarycentricCoords' has a wrong offset!");
static_assert(offsetof(PerspectiveMeshWidget_GetTriangleIndexAtWindowPoint, ReturnValue) == 0x000018, "Member 'PerspectiveMeshWidget_GetTriangleIndexAtWindowPoint::ReturnValue' has a wrong offset!");

// Function SystemReShock.PerspectiveMeshWidget.GetTriangleIndexAtWindowPointForAnyMesh
// 0x001C (0x001C - 0x0000)
struct PerspectiveMeshWidget_GetTriangleIndexAtWindowPointForAnyMesh final
{
public:
	struct FVector2D                              WindowPoint;                                       // 0x0000(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         OutSubMeshIndex;                                   // 0x0008(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                OutBarycentricCoords;                              // 0x000C(0x000C)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ReturnValue;                                       // 0x0018(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PerspectiveMeshWidget_GetTriangleIndexAtWindowPointForAnyMesh) == 0x000004, "Wrong alignment on PerspectiveMeshWidget_GetTriangleIndexAtWindowPointForAnyMesh");
static_assert(sizeof(PerspectiveMeshWidget_GetTriangleIndexAtWindowPointForAnyMesh) == 0x00001C, "Wrong size on PerspectiveMeshWidget_GetTriangleIndexAtWindowPointForAnyMesh");
static_assert(offsetof(PerspectiveMeshWidget_GetTriangleIndexAtWindowPointForAnyMesh, WindowPoint) == 0x000000, "Member 'PerspectiveMeshWidget_GetTriangleIndexAtWindowPointForAnyMesh::WindowPoint' has a wrong offset!");
static_assert(offsetof(PerspectiveMeshWidget_GetTriangleIndexAtWindowPointForAnyMesh, OutSubMeshIndex) == 0x000008, "Member 'PerspectiveMeshWidget_GetTriangleIndexAtWindowPointForAnyMesh::OutSubMeshIndex' has a wrong offset!");
static_assert(offsetof(PerspectiveMeshWidget_GetTriangleIndexAtWindowPointForAnyMesh, OutBarycentricCoords) == 0x00000C, "Member 'PerspectiveMeshWidget_GetTriangleIndexAtWindowPointForAnyMesh::OutBarycentricCoords' has a wrong offset!");
static_assert(offsetof(PerspectiveMeshWidget_GetTriangleIndexAtWindowPointForAnyMesh, ReturnValue) == 0x000018, "Member 'PerspectiveMeshWidget_GetTriangleIndexAtWindowPointForAnyMesh::ReturnValue' has a wrong offset!");

// Function SystemReShock.PerspectiveMeshWidget.GetUnprojectedTrianglePoint
// 0x001C (0x001C - 0x0000)
struct PerspectiveMeshWidget_GetUnprojectedTrianglePoint final
{
public:
	int32                                         SubMeshIndex;                                      // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         TriangleIndex;                                     // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                BarycentricCoords;                                 // 0x0008(0x000C)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector2D                              ReturnValue;                                       // 0x0014(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PerspectiveMeshWidget_GetUnprojectedTrianglePoint) == 0x000004, "Wrong alignment on PerspectiveMeshWidget_GetUnprojectedTrianglePoint");
static_assert(sizeof(PerspectiveMeshWidget_GetUnprojectedTrianglePoint) == 0x00001C, "Wrong size on PerspectiveMeshWidget_GetUnprojectedTrianglePoint");
static_assert(offsetof(PerspectiveMeshWidget_GetUnprojectedTrianglePoint, SubMeshIndex) == 0x000000, "Member 'PerspectiveMeshWidget_GetUnprojectedTrianglePoint::SubMeshIndex' has a wrong offset!");
static_assert(offsetof(PerspectiveMeshWidget_GetUnprojectedTrianglePoint, TriangleIndex) == 0x000004, "Member 'PerspectiveMeshWidget_GetUnprojectedTrianglePoint::TriangleIndex' has a wrong offset!");
static_assert(offsetof(PerspectiveMeshWidget_GetUnprojectedTrianglePoint, BarycentricCoords) == 0x000008, "Member 'PerspectiveMeshWidget_GetUnprojectedTrianglePoint::BarycentricCoords' has a wrong offset!");
static_assert(offsetof(PerspectiveMeshWidget_GetUnprojectedTrianglePoint, ReturnValue) == 0x000014, "Member 'PerspectiveMeshWidget_GetUnprojectedTrianglePoint::ReturnValue' has a wrong offset!");

// Function SystemReShock.PerspectiveMeshWidget.GetWidgetOffsetFromWindowPoint
// 0x0014 (0x0014 - 0x0000)
struct PerspectiveMeshWidget_GetWidgetOffsetFromWindowPoint final
{
public:
	struct FVector2D                              WindowPoint;                                       // 0x0000(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector2D                              WidgetOffset;                                      // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bFromCenter;                                       // 0x0010(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bNearest;                                          // 0x0011(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0012(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_13[0x1];                                       // 0x0013(0x0001)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(PerspectiveMeshWidget_GetWidgetOffsetFromWindowPoint) == 0x000004, "Wrong alignment on PerspectiveMeshWidget_GetWidgetOffsetFromWindowPoint");
static_assert(sizeof(PerspectiveMeshWidget_GetWidgetOffsetFromWindowPoint) == 0x000014, "Wrong size on PerspectiveMeshWidget_GetWidgetOffsetFromWindowPoint");
static_assert(offsetof(PerspectiveMeshWidget_GetWidgetOffsetFromWindowPoint, WindowPoint) == 0x000000, "Member 'PerspectiveMeshWidget_GetWidgetOffsetFromWindowPoint::WindowPoint' has a wrong offset!");
static_assert(offsetof(PerspectiveMeshWidget_GetWidgetOffsetFromWindowPoint, WidgetOffset) == 0x000008, "Member 'PerspectiveMeshWidget_GetWidgetOffsetFromWindowPoint::WidgetOffset' has a wrong offset!");
static_assert(offsetof(PerspectiveMeshWidget_GetWidgetOffsetFromWindowPoint, bFromCenter) == 0x000010, "Member 'PerspectiveMeshWidget_GetWidgetOffsetFromWindowPoint::bFromCenter' has a wrong offset!");
static_assert(offsetof(PerspectiveMeshWidget_GetWidgetOffsetFromWindowPoint, bNearest) == 0x000011, "Member 'PerspectiveMeshWidget_GetWidgetOffsetFromWindowPoint::bNearest' has a wrong offset!");
static_assert(offsetof(PerspectiveMeshWidget_GetWidgetOffsetFromWindowPoint, ReturnValue) == 0x000012, "Member 'PerspectiveMeshWidget_GetWidgetOffsetFromWindowPoint::ReturnValue' has a wrong offset!");

// Function SystemReShock.PerspectiveMeshWidget.GetWindowPointFromScreenPoint
// 0x0010 (0x0010 - 0x0000)
struct PerspectiveMeshWidget_GetWindowPointFromScreenPoint final
{
public:
	struct FVector2D                              ScreenPoint;                                       // 0x0000(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector2D                              ReturnValue;                                       // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PerspectiveMeshWidget_GetWindowPointFromScreenPoint) == 0x000004, "Wrong alignment on PerspectiveMeshWidget_GetWindowPointFromScreenPoint");
static_assert(sizeof(PerspectiveMeshWidget_GetWindowPointFromScreenPoint) == 0x000010, "Wrong size on PerspectiveMeshWidget_GetWindowPointFromScreenPoint");
static_assert(offsetof(PerspectiveMeshWidget_GetWindowPointFromScreenPoint, ScreenPoint) == 0x000000, "Member 'PerspectiveMeshWidget_GetWindowPointFromScreenPoint::ScreenPoint' has a wrong offset!");
static_assert(offsetof(PerspectiveMeshWidget_GetWindowPointFromScreenPoint, ReturnValue) == 0x000008, "Member 'PerspectiveMeshWidget_GetWindowPointFromScreenPoint::ReturnValue' has a wrong offset!");

// Function SystemReShock.GridMeshWidget.ConvertBorderToDynamicMaterialInstance
// 0x0010 (0x0010 - 0x0000)
struct GridMeshWidget_ConvertBorderToDynamicMaterialInstance final
{
public:
	class UMaterialInstanceDynamic*               OutCornerMaterial;                                 // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UMaterialInstanceDynamic*               ReturnValue;                                       // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GridMeshWidget_ConvertBorderToDynamicMaterialInstance) == 0x000008, "Wrong alignment on GridMeshWidget_ConvertBorderToDynamicMaterialInstance");
static_assert(sizeof(GridMeshWidget_ConvertBorderToDynamicMaterialInstance) == 0x000010, "Wrong size on GridMeshWidget_ConvertBorderToDynamicMaterialInstance");
static_assert(offsetof(GridMeshWidget_ConvertBorderToDynamicMaterialInstance, OutCornerMaterial) == 0x000000, "Member 'GridMeshWidget_ConvertBorderToDynamicMaterialInstance::OutCornerMaterial' has a wrong offset!");
static_assert(offsetof(GridMeshWidget_ConvertBorderToDynamicMaterialInstance, ReturnValue) == 0x000008, "Member 'GridMeshWidget_ConvertBorderToDynamicMaterialInstance::ReturnValue' has a wrong offset!");

// Function SystemReShock.GridMeshWidget.SetBorderColor
// 0x0004 (0x0004 - 0x0000)
struct GridMeshWidget_SetBorderColor final
{
public:
	struct FColor                                 Color_0;                                           // 0x0000(0x0004)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GridMeshWidget_SetBorderColor) == 0x000004, "Wrong alignment on GridMeshWidget_SetBorderColor");
static_assert(sizeof(GridMeshWidget_SetBorderColor) == 0x000004, "Wrong size on GridMeshWidget_SetBorderColor");
static_assert(offsetof(GridMeshWidget_SetBorderColor, Color_0) == 0x000000, "Member 'GridMeshWidget_SetBorderColor::Color_0' has a wrong offset!");

// Function SystemReShock.GridMeshWidget.SetCellSize
// 0x0008 (0x0008 - 0x0000)
struct GridMeshWidget_SetCellSize final
{
public:
	struct FIntPoint                              InCellSize;                                        // 0x0000(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GridMeshWidget_SetCellSize) == 0x000004, "Wrong alignment on GridMeshWidget_SetCellSize");
static_assert(sizeof(GridMeshWidget_SetCellSize) == 0x000008, "Wrong size on GridMeshWidget_SetCellSize");
static_assert(offsetof(GridMeshWidget_SetCellSize, InCellSize) == 0x000000, "Member 'GridMeshWidget_SetCellSize::InCellSize' has a wrong offset!");

// Function SystemReShock.GridMeshWidget.SetCellUVDimensions
// 0x0008 (0x0008 - 0x0000)
struct GridMeshWidget_SetCellUVDimensions final
{
public:
	struct FVector2D                              InCellUVDimensions;                                // 0x0000(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GridMeshWidget_SetCellUVDimensions) == 0x000004, "Wrong alignment on GridMeshWidget_SetCellUVDimensions");
static_assert(sizeof(GridMeshWidget_SetCellUVDimensions) == 0x000008, "Wrong size on GridMeshWidget_SetCellUVDimensions");
static_assert(offsetof(GridMeshWidget_SetCellUVDimensions, InCellUVDimensions) == 0x000000, "Member 'GridMeshWidget_SetCellUVDimensions::InCellUVDimensions' has a wrong offset!");

// Function SystemReShock.GridMeshWidget.SetColor
// 0x0004 (0x0004 - 0x0000)
struct GridMeshWidget_SetColor final
{
public:
	struct FColor                                 Color_0;                                           // 0x0000(0x0004)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GridMeshWidget_SetColor) == 0x000004, "Wrong alignment on GridMeshWidget_SetColor");
static_assert(sizeof(GridMeshWidget_SetColor) == 0x000004, "Wrong size on GridMeshWidget_SetColor");
static_assert(offsetof(GridMeshWidget_SetColor, Color_0) == 0x000000, "Member 'GridMeshWidget_SetColor::Color_0' has a wrong offset!");

// Function SystemReShock.GridMeshWidget.SetFlipVerticalLayout
// 0x0001 (0x0001 - 0x0000)
struct GridMeshWidget_SetFlipVerticalLayout final
{
public:
	bool                                          bInFlipVerticalLayout;                             // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GridMeshWidget_SetFlipVerticalLayout) == 0x000001, "Wrong alignment on GridMeshWidget_SetFlipVerticalLayout");
static_assert(sizeof(GridMeshWidget_SetFlipVerticalLayout) == 0x000001, "Wrong size on GridMeshWidget_SetFlipVerticalLayout");
static_assert(offsetof(GridMeshWidget_SetFlipVerticalLayout, bInFlipVerticalLayout) == 0x000000, "Member 'GridMeshWidget_SetFlipVerticalLayout::bInFlipVerticalLayout' has a wrong offset!");

// Function SystemReShock.GridMeshWidget.SetGridSize
// 0x0008 (0x0008 - 0x0000)
struct GridMeshWidget_SetGridSize final
{
public:
	struct FIntPoint                              GridSize;                                          // 0x0000(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GridMeshWidget_SetGridSize) == 0x000004, "Wrong alignment on GridMeshWidget_SetGridSize");
static_assert(sizeof(GridMeshWidget_SetGridSize) == 0x000008, "Wrong size on GridMeshWidget_SetGridSize");
static_assert(offsetof(GridMeshWidget_SetGridSize, GridSize) == 0x000000, "Member 'GridMeshWidget_SetGridSize::GridSize' has a wrong offset!");

// Function SystemReShock.GridMeshWidget.GetBorderSize
// 0x0004 (0x0004 - 0x0000)
struct GridMeshWidget_GetBorderSize final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GridMeshWidget_GetBorderSize) == 0x000004, "Wrong alignment on GridMeshWidget_GetBorderSize");
static_assert(sizeof(GridMeshWidget_GetBorderSize) == 0x000004, "Wrong size on GridMeshWidget_GetBorderSize");
static_assert(offsetof(GridMeshWidget_GetBorderSize, ReturnValue) == 0x000000, "Member 'GridMeshWidget_GetBorderSize::ReturnValue' has a wrong offset!");

// Function SystemReShock.GridMeshWidget.GetDoubleBorderSize
// 0x0004 (0x0004 - 0x0000)
struct GridMeshWidget_GetDoubleBorderSize final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GridMeshWidget_GetDoubleBorderSize) == 0x000004, "Wrong alignment on GridMeshWidget_GetDoubleBorderSize");
static_assert(sizeof(GridMeshWidget_GetDoubleBorderSize) == 0x000004, "Wrong size on GridMeshWidget_GetDoubleBorderSize");
static_assert(offsetof(GridMeshWidget_GetDoubleBorderSize, ReturnValue) == 0x000000, "Member 'GridMeshWidget_GetDoubleBorderSize::ReturnValue' has a wrong offset!");

// Function SystemReShock.GridMeshWidget.GetGridCoordinatesFromWindowPoint
// 0x001C (0x001C - 0x0000)
struct GridMeshWidget_GetGridCoordinatesFromWindowPoint final
{
public:
	struct FVector2D                              WindowPoint;                                       // 0x0000(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector2D                              CursorGridOffset;                                  // 0x0008(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FIntPoint                              GridCoords;                                        // 0x0010(0x0008)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0018(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_19[0x3];                                       // 0x0019(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(GridMeshWidget_GetGridCoordinatesFromWindowPoint) == 0x000004, "Wrong alignment on GridMeshWidget_GetGridCoordinatesFromWindowPoint");
static_assert(sizeof(GridMeshWidget_GetGridCoordinatesFromWindowPoint) == 0x00001C, "Wrong size on GridMeshWidget_GetGridCoordinatesFromWindowPoint");
static_assert(offsetof(GridMeshWidget_GetGridCoordinatesFromWindowPoint, WindowPoint) == 0x000000, "Member 'GridMeshWidget_GetGridCoordinatesFromWindowPoint::WindowPoint' has a wrong offset!");
static_assert(offsetof(GridMeshWidget_GetGridCoordinatesFromWindowPoint, CursorGridOffset) == 0x000008, "Member 'GridMeshWidget_GetGridCoordinatesFromWindowPoint::CursorGridOffset' has a wrong offset!");
static_assert(offsetof(GridMeshWidget_GetGridCoordinatesFromWindowPoint, GridCoords) == 0x000010, "Member 'GridMeshWidget_GetGridCoordinatesFromWindowPoint::GridCoords' has a wrong offset!");
static_assert(offsetof(GridMeshWidget_GetGridCoordinatesFromWindowPoint, ReturnValue) == 0x000018, "Member 'GridMeshWidget_GetGridCoordinatesFromWindowPoint::ReturnValue' has a wrong offset!");

// Function SystemReShock.GridMeshWidget.GetProjectedCellLocationFromGridCoordinates
// 0x001C (0x001C - 0x0000)
struct GridMeshWidget_GetProjectedCellLocationFromGridCoordinates final
{
public:
	struct FIntPoint                              GridCoords;                                        // 0x0000(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector2D                              CursorGridOffset;                                  // 0x0008(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector2D                              OutProjectedLocation;                              // 0x0010(0x0008)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0018(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_19[0x3];                                       // 0x0019(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(GridMeshWidget_GetProjectedCellLocationFromGridCoordinates) == 0x000004, "Wrong alignment on GridMeshWidget_GetProjectedCellLocationFromGridCoordinates");
static_assert(sizeof(GridMeshWidget_GetProjectedCellLocationFromGridCoordinates) == 0x00001C, "Wrong size on GridMeshWidget_GetProjectedCellLocationFromGridCoordinates");
static_assert(offsetof(GridMeshWidget_GetProjectedCellLocationFromGridCoordinates, GridCoords) == 0x000000, "Member 'GridMeshWidget_GetProjectedCellLocationFromGridCoordinates::GridCoords' has a wrong offset!");
static_assert(offsetof(GridMeshWidget_GetProjectedCellLocationFromGridCoordinates, CursorGridOffset) == 0x000008, "Member 'GridMeshWidget_GetProjectedCellLocationFromGridCoordinates::CursorGridOffset' has a wrong offset!");
static_assert(offsetof(GridMeshWidget_GetProjectedCellLocationFromGridCoordinates, OutProjectedLocation) == 0x000010, "Member 'GridMeshWidget_GetProjectedCellLocationFromGridCoordinates::OutProjectedLocation' has a wrong offset!");
static_assert(offsetof(GridMeshWidget_GetProjectedCellLocationFromGridCoordinates, ReturnValue) == 0x000018, "Member 'GridMeshWidget_GetProjectedCellLocationFromGridCoordinates::ReturnValue' has a wrong offset!");

// Function SystemReShock.GridMeshWidget.GetWidgetOffsetFromGridCoordinates
// 0x0010 (0x0010 - 0x0000)
struct GridMeshWidget_GetWidgetOffsetFromGridCoordinates final
{
public:
	struct FIntPoint                              GridCoords;                                        // 0x0000(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector2D                              ReturnValue;                                       // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GridMeshWidget_GetWidgetOffsetFromGridCoordinates) == 0x000004, "Wrong alignment on GridMeshWidget_GetWidgetOffsetFromGridCoordinates");
static_assert(sizeof(GridMeshWidget_GetWidgetOffsetFromGridCoordinates) == 0x000010, "Wrong size on GridMeshWidget_GetWidgetOffsetFromGridCoordinates");
static_assert(offsetof(GridMeshWidget_GetWidgetOffsetFromGridCoordinates, GridCoords) == 0x000000, "Member 'GridMeshWidget_GetWidgetOffsetFromGridCoordinates::GridCoords' has a wrong offset!");
static_assert(offsetof(GridMeshWidget_GetWidgetOffsetFromGridCoordinates, ReturnValue) == 0x000008, "Member 'GridMeshWidget_GetWidgetOffsetFromGridCoordinates::ReturnValue' has a wrong offset!");

// Function SystemReShock.GridMeshWidget.GetWidgetSizeFromGridSize
// 0x0010 (0x0010 - 0x0000)
struct GridMeshWidget_GetWidgetSizeFromGridSize final
{
public:
	struct FIntPoint                              GridSize;                                          // 0x0000(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector2D                              ReturnValue;                                       // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GridMeshWidget_GetWidgetSizeFromGridSize) == 0x000004, "Wrong alignment on GridMeshWidget_GetWidgetSizeFromGridSize");
static_assert(sizeof(GridMeshWidget_GetWidgetSizeFromGridSize) == 0x000010, "Wrong size on GridMeshWidget_GetWidgetSizeFromGridSize");
static_assert(offsetof(GridMeshWidget_GetWidgetSizeFromGridSize, GridSize) == 0x000000, "Member 'GridMeshWidget_GetWidgetSizeFromGridSize::GridSize' has a wrong offset!");
static_assert(offsetof(GridMeshWidget_GetWidgetSizeFromGridSize, ReturnValue) == 0x000008, "Member 'GridMeshWidget_GetWidgetSizeFromGridSize::ReturnValue' has a wrong offset!");

// Function SystemReShock.LifeSimulation.OnActivateCell
// 0x0020 (0x0020 - 0x0000)
struct LifeSimulation_OnActivateCell final
{
public:
	struct FVoxelWallLocation                     WallLocation;                                      // 0x0000(0x0010)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UPrimitiveComponent*                    PrimitiveComponent;                                // 0x0010(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0018(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_19[0x7];                                       // 0x0019(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(LifeSimulation_OnActivateCell) == 0x000008, "Wrong alignment on LifeSimulation_OnActivateCell");
static_assert(sizeof(LifeSimulation_OnActivateCell) == 0x000020, "Wrong size on LifeSimulation_OnActivateCell");
static_assert(offsetof(LifeSimulation_OnActivateCell, WallLocation) == 0x000000, "Member 'LifeSimulation_OnActivateCell::WallLocation' has a wrong offset!");
static_assert(offsetof(LifeSimulation_OnActivateCell, PrimitiveComponent) == 0x000010, "Member 'LifeSimulation_OnActivateCell::PrimitiveComponent' has a wrong offset!");
static_assert(offsetof(LifeSimulation_OnActivateCell, ReturnValue) == 0x000018, "Member 'LifeSimulation_OnActivateCell::ReturnValue' has a wrong offset!");

// Function SystemReShock.LifeSimulation.OnDeactivateCell
// 0x0020 (0x0020 - 0x0000)
struct LifeSimulation_OnDeactivateCell final
{
public:
	struct FVoxelWallLocation                     WallLocation;                                      // 0x0000(0x0010)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UPrimitiveComponent*                    PrimitiveComponent;                                // 0x0010(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0018(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_19[0x7];                                       // 0x0019(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(LifeSimulation_OnDeactivateCell) == 0x000008, "Wrong alignment on LifeSimulation_OnDeactivateCell");
static_assert(sizeof(LifeSimulation_OnDeactivateCell) == 0x000020, "Wrong size on LifeSimulation_OnDeactivateCell");
static_assert(offsetof(LifeSimulation_OnDeactivateCell, WallLocation) == 0x000000, "Member 'LifeSimulation_OnDeactivateCell::WallLocation' has a wrong offset!");
static_assert(offsetof(LifeSimulation_OnDeactivateCell, PrimitiveComponent) == 0x000010, "Member 'LifeSimulation_OnDeactivateCell::PrimitiveComponent' has a wrong offset!");
static_assert(offsetof(LifeSimulation_OnDeactivateCell, ReturnValue) == 0x000018, "Member 'LifeSimulation_OnDeactivateCell::ReturnValue' has a wrong offset!");

// Function SystemReShock.LifeSimulation.ResetSimulation
// 0x0018 (0x0018 - 0x0000)
struct LifeSimulation_ResetSimulation final
{
public:
	class UBatchedLevelVoxelization*              InBatchedLevelVoxelization;                        // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class ULevelVoxelizationData*                 InCurrentLevelData;                                // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bDeactivateCells;                                  // 0x0010(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(LifeSimulation_ResetSimulation) == 0x000008, "Wrong alignment on LifeSimulation_ResetSimulation");
static_assert(sizeof(LifeSimulation_ResetSimulation) == 0x000018, "Wrong size on LifeSimulation_ResetSimulation");
static_assert(offsetof(LifeSimulation_ResetSimulation, InBatchedLevelVoxelization) == 0x000000, "Member 'LifeSimulation_ResetSimulation::InBatchedLevelVoxelization' has a wrong offset!");
static_assert(offsetof(LifeSimulation_ResetSimulation, InCurrentLevelData) == 0x000008, "Member 'LifeSimulation_ResetSimulation::InCurrentLevelData' has a wrong offset!");
static_assert(offsetof(LifeSimulation_ResetSimulation, bDeactivateCells) == 0x000010, "Member 'LifeSimulation_ResetSimulation::bDeactivateCells' has a wrong offset!");

// Function SystemReShock.LifeSimulation.TryActivateCellAtLocation
// 0x0018 (0x0018 - 0x0000)
struct LifeSimulation_TryActivateCellAtLocation final
{
public:
	struct FVoxelWallLocation                     WallLocation;                                      // 0x0000(0x0010)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MinLifetime;                                       // 0x0010(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0014(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_15[0x3];                                       // 0x0015(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(LifeSimulation_TryActivateCellAtLocation) == 0x000004, "Wrong alignment on LifeSimulation_TryActivateCellAtLocation");
static_assert(sizeof(LifeSimulation_TryActivateCellAtLocation) == 0x000018, "Wrong size on LifeSimulation_TryActivateCellAtLocation");
static_assert(offsetof(LifeSimulation_TryActivateCellAtLocation, WallLocation) == 0x000000, "Member 'LifeSimulation_TryActivateCellAtLocation::WallLocation' has a wrong offset!");
static_assert(offsetof(LifeSimulation_TryActivateCellAtLocation, MinLifetime) == 0x000010, "Member 'LifeSimulation_TryActivateCellAtLocation::MinLifetime' has a wrong offset!");
static_assert(offsetof(LifeSimulation_TryActivateCellAtLocation, ReturnValue) == 0x000014, "Member 'LifeSimulation_TryActivateCellAtLocation::ReturnValue' has a wrong offset!");

// Function SystemReShock.LifeSimulation.UpdateSimulation
// 0x0010 (0x0010 - 0x0000)
struct LifeSimulation_UpdateSimulation final
{
public:
	struct FIntVector                             ObserverLocation;                                  // 0x0000(0x000C)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         DeltaSeconds;                                      // 0x000C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LifeSimulation_UpdateSimulation) == 0x000004, "Wrong alignment on LifeSimulation_UpdateSimulation");
static_assert(sizeof(LifeSimulation_UpdateSimulation) == 0x000010, "Wrong size on LifeSimulation_UpdateSimulation");
static_assert(offsetof(LifeSimulation_UpdateSimulation, ObserverLocation) == 0x000000, "Member 'LifeSimulation_UpdateSimulation::ObserverLocation' has a wrong offset!");
static_assert(offsetof(LifeSimulation_UpdateSimulation, DeltaSeconds) == 0x00000C, "Member 'LifeSimulation_UpdateSimulation::DeltaSeconds' has a wrong offset!");

// Function SystemReShock.LifeSimulation.GetCellLifetimeRemaining
// 0x0014 (0x0014 - 0x0000)
struct LifeSimulation_GetCellLifetimeRemaining final
{
public:
	struct FVoxelWallLocation                     WallLocation;                                      // 0x0000(0x0010)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ReturnValue;                                       // 0x0010(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LifeSimulation_GetCellLifetimeRemaining) == 0x000004, "Wrong alignment on LifeSimulation_GetCellLifetimeRemaining");
static_assert(sizeof(LifeSimulation_GetCellLifetimeRemaining) == 0x000014, "Wrong size on LifeSimulation_GetCellLifetimeRemaining");
static_assert(offsetof(LifeSimulation_GetCellLifetimeRemaining, WallLocation) == 0x000000, "Member 'LifeSimulation_GetCellLifetimeRemaining::WallLocation' has a wrong offset!");
static_assert(offsetof(LifeSimulation_GetCellLifetimeRemaining, ReturnValue) == 0x000010, "Member 'LifeSimulation_GetCellLifetimeRemaining::ReturnValue' has a wrong offset!");

// Function SystemReShock.LifeSimulation.GetCellLocationsWithNeighbors
// 0x0010 (0x0010 - 0x0000)
struct LifeSimulation_GetCellLocationsWithNeighbors final
{
public:
	TArray<struct FVoxelWallLocation>             ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(LifeSimulation_GetCellLocationsWithNeighbors) == 0x000008, "Wrong alignment on LifeSimulation_GetCellLocationsWithNeighbors");
static_assert(sizeof(LifeSimulation_GetCellLocationsWithNeighbors) == 0x000010, "Wrong size on LifeSimulation_GetCellLocationsWithNeighbors");
static_assert(offsetof(LifeSimulation_GetCellLocationsWithNeighbors, ReturnValue) == 0x000000, "Member 'LifeSimulation_GetCellLocationsWithNeighbors::ReturnValue' has a wrong offset!");

// Function SystemReShock.LifeSimulation.GetCellNeighborCount
// 0x0014 (0x0014 - 0x0000)
struct LifeSimulation_GetCellNeighborCount final
{
public:
	struct FVoxelWallLocation                     WallLocation;                                      // 0x0000(0x0010)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ReturnValue;                                       // 0x0010(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LifeSimulation_GetCellNeighborCount) == 0x000004, "Wrong alignment on LifeSimulation_GetCellNeighborCount");
static_assert(sizeof(LifeSimulation_GetCellNeighborCount) == 0x000014, "Wrong size on LifeSimulation_GetCellNeighborCount");
static_assert(offsetof(LifeSimulation_GetCellNeighborCount, WallLocation) == 0x000000, "Member 'LifeSimulation_GetCellNeighborCount::WallLocation' has a wrong offset!");
static_assert(offsetof(LifeSimulation_GetCellNeighborCount, ReturnValue) == 0x000010, "Member 'LifeSimulation_GetCellNeighborCount::ReturnValue' has a wrong offset!");

// Function SystemReShock.LifeSimulation.GetIslandWorldBoundingBoxes
// 0x0028 (0x0028 - 0x0000)
struct LifeSimulation_GetIslandWorldBoundingBoxes final
{
public:
	class UBatchedLevelVoxelization*              BatchedLevelVoxelization;                          // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                LevelOffset;                                       // 0x0008(0x000C)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bOnlyActiveIslands;                                // 0x0014(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_15[0x3];                                       // 0x0015(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FBox>                           ReturnValue;                                       // 0x0018(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(LifeSimulation_GetIslandWorldBoundingBoxes) == 0x000008, "Wrong alignment on LifeSimulation_GetIslandWorldBoundingBoxes");
static_assert(sizeof(LifeSimulation_GetIslandWorldBoundingBoxes) == 0x000028, "Wrong size on LifeSimulation_GetIslandWorldBoundingBoxes");
static_assert(offsetof(LifeSimulation_GetIslandWorldBoundingBoxes, BatchedLevelVoxelization) == 0x000000, "Member 'LifeSimulation_GetIslandWorldBoundingBoxes::BatchedLevelVoxelization' has a wrong offset!");
static_assert(offsetof(LifeSimulation_GetIslandWorldBoundingBoxes, LevelOffset) == 0x000008, "Member 'LifeSimulation_GetIslandWorldBoundingBoxes::LevelOffset' has a wrong offset!");
static_assert(offsetof(LifeSimulation_GetIslandWorldBoundingBoxes, bOnlyActiveIslands) == 0x000014, "Member 'LifeSimulation_GetIslandWorldBoundingBoxes::bOnlyActiveIslands' has a wrong offset!");
static_assert(offsetof(LifeSimulation_GetIslandWorldBoundingBoxes, ReturnValue) == 0x000018, "Member 'LifeSimulation_GetIslandWorldBoundingBoxes::ReturnValue' has a wrong offset!");

// Function SystemReShock.LifeSimulation.GetWallComponentByIndex
// 0x0010 (0x0010 - 0x0000)
struct LifeSimulation_GetWallComponentByIndex final
{
public:
	int32                                         ComponentIndex;                                    // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UPrimitiveComponent*                    ReturnValue;                                       // 0x0008(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LifeSimulation_GetWallComponentByIndex) == 0x000008, "Wrong alignment on LifeSimulation_GetWallComponentByIndex");
static_assert(sizeof(LifeSimulation_GetWallComponentByIndex) == 0x000010, "Wrong size on LifeSimulation_GetWallComponentByIndex");
static_assert(offsetof(LifeSimulation_GetWallComponentByIndex, ComponentIndex) == 0x000000, "Member 'LifeSimulation_GetWallComponentByIndex::ComponentIndex' has a wrong offset!");
static_assert(offsetof(LifeSimulation_GetWallComponentByIndex, ReturnValue) == 0x000008, "Member 'LifeSimulation_GetWallComponentByIndex::ReturnValue' has a wrong offset!");

// Function SystemReShock.LifeSimulation.IsCellActive
// 0x0014 (0x0014 - 0x0000)
struct LifeSimulation_IsCellActive final
{
public:
	struct FVoxelWallLocation                     WallLocation;                                      // 0x0000(0x0010)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0010(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x3];                                       // 0x0011(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(LifeSimulation_IsCellActive) == 0x000004, "Wrong alignment on LifeSimulation_IsCellActive");
static_assert(sizeof(LifeSimulation_IsCellActive) == 0x000014, "Wrong size on LifeSimulation_IsCellActive");
static_assert(offsetof(LifeSimulation_IsCellActive, WallLocation) == 0x000000, "Member 'LifeSimulation_IsCellActive::WallLocation' has a wrong offset!");
static_assert(offsetof(LifeSimulation_IsCellActive, ReturnValue) == 0x000010, "Member 'LifeSimulation_IsCellActive::ReturnValue' has a wrong offset!");

// Function SystemReShock.LifeSimulation.IsCellVisibleToObserver
// 0x0010 (0x0010 - 0x0000)
struct LifeSimulation_IsCellVisibleToObserver final
{
public:
	struct FIntVector                             CellLocation;                                      // 0x0000(0x000C)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x000C(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_D[0x3];                                        // 0x000D(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(LifeSimulation_IsCellVisibleToObserver) == 0x000004, "Wrong alignment on LifeSimulation_IsCellVisibleToObserver");
static_assert(sizeof(LifeSimulation_IsCellVisibleToObserver) == 0x000010, "Wrong size on LifeSimulation_IsCellVisibleToObserver");
static_assert(offsetof(LifeSimulation_IsCellVisibleToObserver, CellLocation) == 0x000000, "Member 'LifeSimulation_IsCellVisibleToObserver::CellLocation' has a wrong offset!");
static_assert(offsetof(LifeSimulation_IsCellVisibleToObserver, ReturnValue) == 0x00000C, "Member 'LifeSimulation_IsCellVisibleToObserver::ReturnValue' has a wrong offset!");

// Function SystemReShock.ActorAnimMessageInterface.ReceiveAnimationMessage
// 0x0020 (0x0020 - 0x0000)
struct ActorAnimMessageInterface_ReceiveAnimationMessage final
{
public:
	EActorMessagePriority                         Priority;                                          // 0x0000(0x0001)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 Message;                                           // 0x0008(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0018(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_19[0x7];                                       // 0x0019(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(ActorAnimMessageInterface_ReceiveAnimationMessage) == 0x000008, "Wrong alignment on ActorAnimMessageInterface_ReceiveAnimationMessage");
static_assert(sizeof(ActorAnimMessageInterface_ReceiveAnimationMessage) == 0x000020, "Wrong size on ActorAnimMessageInterface_ReceiveAnimationMessage");
static_assert(offsetof(ActorAnimMessageInterface_ReceiveAnimationMessage, Priority) == 0x000000, "Member 'ActorAnimMessageInterface_ReceiveAnimationMessage::Priority' has a wrong offset!");
static_assert(offsetof(ActorAnimMessageInterface_ReceiveAnimationMessage, Message) == 0x000008, "Member 'ActorAnimMessageInterface_ReceiveAnimationMessage::Message' has a wrong offset!");
static_assert(offsetof(ActorAnimMessageInterface_ReceiveAnimationMessage, ReturnValue) == 0x000018, "Member 'ActorAnimMessageInterface_ReceiveAnimationMessage::ReturnValue' has a wrong offset!");

// Function SystemReShock.CameraPanelWidget.SetHorizontalSurfaceCurvature
// 0x0004 (0x0004 - 0x0000)
struct CameraPanelWidget_SetHorizontalSurfaceCurvature final
{
public:
	float                                         Ratio;                                             // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CameraPanelWidget_SetHorizontalSurfaceCurvature) == 0x000004, "Wrong alignment on CameraPanelWidget_SetHorizontalSurfaceCurvature");
static_assert(sizeof(CameraPanelWidget_SetHorizontalSurfaceCurvature) == 0x000004, "Wrong size on CameraPanelWidget_SetHorizontalSurfaceCurvature");
static_assert(offsetof(CameraPanelWidget_SetHorizontalSurfaceCurvature, Ratio) == 0x000000, "Member 'CameraPanelWidget_SetHorizontalSurfaceCurvature::Ratio' has a wrong offset!");

// Function SystemReShock.CameraPanelWidget.SetVerticalSurfaceCurvature
// 0x0004 (0x0004 - 0x0000)
struct CameraPanelWidget_SetVerticalSurfaceCurvature final
{
public:
	float                                         Ratio;                                             // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CameraPanelWidget_SetVerticalSurfaceCurvature) == 0x000004, "Wrong alignment on CameraPanelWidget_SetVerticalSurfaceCurvature");
static_assert(sizeof(CameraPanelWidget_SetVerticalSurfaceCurvature) == 0x000004, "Wrong size on CameraPanelWidget_SetVerticalSurfaceCurvature");
static_assert(offsetof(CameraPanelWidget_SetVerticalSurfaceCurvature, Ratio) == 0x000000, "Member 'CameraPanelWidget_SetVerticalSurfaceCurvature::Ratio' has a wrong offset!");

// Function SystemReShock.CameraPanelWidget.SetVirtualMouseScreenLocation
// 0x0008 (0x0008 - 0x0000)
struct CameraPanelWidget_SetVirtualMouseScreenLocation final
{
public:
	struct FVector2D                              ScreenLocation;                                    // 0x0000(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CameraPanelWidget_SetVirtualMouseScreenLocation) == 0x000004, "Wrong alignment on CameraPanelWidget_SetVirtualMouseScreenLocation");
static_assert(sizeof(CameraPanelWidget_SetVirtualMouseScreenLocation) == 0x000008, "Wrong size on CameraPanelWidget_SetVirtualMouseScreenLocation");
static_assert(offsetof(CameraPanelWidget_SetVirtualMouseScreenLocation, ScreenLocation) == 0x000000, "Member 'CameraPanelWidget_SetVirtualMouseScreenLocation::ScreenLocation' has a wrong offset!");

// Function SystemReShock.CameraPanelWidget.VirtualMouseButtonDown
// 0x0018 (0x0018 - 0x0000)
struct CameraPanelWidget_VirtualMouseButtonDown final
{
public:
	struct FKey                                   MouseButton;                                       // 0x0000(0x0018)(Parm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CameraPanelWidget_VirtualMouseButtonDown) == 0x000008, "Wrong alignment on CameraPanelWidget_VirtualMouseButtonDown");
static_assert(sizeof(CameraPanelWidget_VirtualMouseButtonDown) == 0x000018, "Wrong size on CameraPanelWidget_VirtualMouseButtonDown");
static_assert(offsetof(CameraPanelWidget_VirtualMouseButtonDown, MouseButton) == 0x000000, "Member 'CameraPanelWidget_VirtualMouseButtonDown::MouseButton' has a wrong offset!");

// Function SystemReShock.CameraPanelWidget.VirtualMouseButtonUp
// 0x0018 (0x0018 - 0x0000)
struct CameraPanelWidget_VirtualMouseButtonUp final
{
public:
	struct FKey                                   MouseButton;                                       // 0x0000(0x0018)(Parm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CameraPanelWidget_VirtualMouseButtonUp) == 0x000008, "Wrong alignment on CameraPanelWidget_VirtualMouseButtonUp");
static_assert(sizeof(CameraPanelWidget_VirtualMouseButtonUp) == 0x000018, "Wrong size on CameraPanelWidget_VirtualMouseButtonUp");
static_assert(offsetof(CameraPanelWidget_VirtualMouseButtonUp, MouseButton) == 0x000000, "Member 'CameraPanelWidget_VirtualMouseButtonUp::MouseButton' has a wrong offset!");

// Function SystemReShock.CameraPanelWidget.VirtualMouseDoubleClick
// 0x0018 (0x0018 - 0x0000)
struct CameraPanelWidget_VirtualMouseDoubleClick final
{
public:
	struct FKey                                   MouseButton;                                       // 0x0000(0x0018)(Parm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CameraPanelWidget_VirtualMouseDoubleClick) == 0x000008, "Wrong alignment on CameraPanelWidget_VirtualMouseDoubleClick");
static_assert(sizeof(CameraPanelWidget_VirtualMouseDoubleClick) == 0x000018, "Wrong size on CameraPanelWidget_VirtualMouseDoubleClick");
static_assert(offsetof(CameraPanelWidget_VirtualMouseDoubleClick, MouseButton) == 0x000000, "Member 'CameraPanelWidget_VirtualMouseDoubleClick::MouseButton' has a wrong offset!");

// Function SystemReShock.CameraPanelWidget.GetVirtualMouseScreenLocation
// 0x0008 (0x0008 - 0x0000)
struct CameraPanelWidget_GetVirtualMouseScreenLocation final
{
public:
	struct FVector2D                              ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CameraPanelWidget_GetVirtualMouseScreenLocation) == 0x000004, "Wrong alignment on CameraPanelWidget_GetVirtualMouseScreenLocation");
static_assert(sizeof(CameraPanelWidget_GetVirtualMouseScreenLocation) == 0x000008, "Wrong size on CameraPanelWidget_GetVirtualMouseScreenLocation");
static_assert(offsetof(CameraPanelWidget_GetVirtualMouseScreenLocation, ReturnValue) == 0x000000, "Member 'CameraPanelWidget_GetVirtualMouseScreenLocation::ReturnValue' has a wrong offset!");

// Function SystemReShock.CameraPanelWidget.GetVirtualMouseViewportLocation
// 0x0008 (0x0008 - 0x0000)
struct CameraPanelWidget_GetVirtualMouseViewportLocation final
{
public:
	struct FVector2D                              ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CameraPanelWidget_GetVirtualMouseViewportLocation) == 0x000004, "Wrong alignment on CameraPanelWidget_GetVirtualMouseViewportLocation");
static_assert(sizeof(CameraPanelWidget_GetVirtualMouseViewportLocation) == 0x000008, "Wrong size on CameraPanelWidget_GetVirtualMouseViewportLocation");
static_assert(offsetof(CameraPanelWidget_GetVirtualMouseViewportLocation, ReturnValue) == 0x000000, "Member 'CameraPanelWidget_GetVirtualMouseViewportLocation::ReturnValue' has a wrong offset!");

// Function SystemReShock.CameraPanelWidget.ProjectScreenPoint
// 0x0010 (0x0010 - 0x0000)
struct CameraPanelWidget_ProjectScreenPoint final
{
public:
	struct FVector2D                              ScreenPoint;                                       // 0x0000(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector2D                              ReturnValue;                                       // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CameraPanelWidget_ProjectScreenPoint) == 0x000004, "Wrong alignment on CameraPanelWidget_ProjectScreenPoint");
static_assert(sizeof(CameraPanelWidget_ProjectScreenPoint) == 0x000010, "Wrong size on CameraPanelWidget_ProjectScreenPoint");
static_assert(offsetof(CameraPanelWidget_ProjectScreenPoint, ScreenPoint) == 0x000000, "Member 'CameraPanelWidget_ProjectScreenPoint::ScreenPoint' has a wrong offset!");
static_assert(offsetof(CameraPanelWidget_ProjectScreenPoint, ReturnValue) == 0x000008, "Member 'CameraPanelWidget_ProjectScreenPoint::ReturnValue' has a wrong offset!");

// Function SystemReShock.CompassMeshWidget.SetCurrentYawAngle
// 0x0004 (0x0004 - 0x0000)
struct CompassMeshWidget_SetCurrentYawAngle final
{
public:
	float                                         NewAngle;                                          // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CompassMeshWidget_SetCurrentYawAngle) == 0x000004, "Wrong alignment on CompassMeshWidget_SetCurrentYawAngle");
static_assert(sizeof(CompassMeshWidget_SetCurrentYawAngle) == 0x000004, "Wrong size on CompassMeshWidget_SetCurrentYawAngle");
static_assert(offsetof(CompassMeshWidget_SetCurrentYawAngle, NewAngle) == 0x000000, "Member 'CompassMeshWidget_SetCurrentYawAngle::NewAngle' has a wrong offset!");

// Function SystemReShock.PerspectiveMeshSlot.SetPosition
// 0x0008 (0x0008 - 0x0000)
struct PerspectiveMeshSlot_SetPosition final
{
public:
	struct FVector2D                              InPosition;                                        // 0x0000(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PerspectiveMeshSlot_SetPosition) == 0x000004, "Wrong alignment on PerspectiveMeshSlot_SetPosition");
static_assert(sizeof(PerspectiveMeshSlot_SetPosition) == 0x000008, "Wrong size on PerspectiveMeshSlot_SetPosition");
static_assert(offsetof(PerspectiveMeshSlot_SetPosition, InPosition) == 0x000000, "Member 'PerspectiveMeshSlot_SetPosition::InPosition' has a wrong offset!");

// Function SystemReShock.PerspectiveMeshSlot.SetSize
// 0x0008 (0x0008 - 0x0000)
struct PerspectiveMeshSlot_SetSize final
{
public:
	struct FVector2D                              InSize;                                            // 0x0000(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PerspectiveMeshSlot_SetSize) == 0x000004, "Wrong alignment on PerspectiveMeshSlot_SetSize");
static_assert(sizeof(PerspectiveMeshSlot_SetSize) == 0x000008, "Wrong size on PerspectiveMeshSlot_SetSize");
static_assert(offsetof(PerspectiveMeshSlot_SetSize, InSize) == 0x000000, "Member 'PerspectiveMeshSlot_SetSize::InSize' has a wrong offset!");

// Function SystemReShock.ShockActivityFunctionLibrary.EndActivity
// 0x0020 (0x0020 - 0x0000)
struct ShockActivityFunctionLibrary_EndActivity final
{
public:
	const class UObject*                          WorldContextObject;                                // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 ActivityId;                                        // 0x0008(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EShockActivityOutcome                         ActivityOutcome;                                   // 0x0018(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0019(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1A[0x6];                                       // 0x001A(0x0006)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(ShockActivityFunctionLibrary_EndActivity) == 0x000008, "Wrong alignment on ShockActivityFunctionLibrary_EndActivity");
static_assert(sizeof(ShockActivityFunctionLibrary_EndActivity) == 0x000020, "Wrong size on ShockActivityFunctionLibrary_EndActivity");
static_assert(offsetof(ShockActivityFunctionLibrary_EndActivity, WorldContextObject) == 0x000000, "Member 'ShockActivityFunctionLibrary_EndActivity::WorldContextObject' has a wrong offset!");
static_assert(offsetof(ShockActivityFunctionLibrary_EndActivity, ActivityId) == 0x000008, "Member 'ShockActivityFunctionLibrary_EndActivity::ActivityId' has a wrong offset!");
static_assert(offsetof(ShockActivityFunctionLibrary_EndActivity, ActivityOutcome) == 0x000018, "Member 'ShockActivityFunctionLibrary_EndActivity::ActivityOutcome' has a wrong offset!");
static_assert(offsetof(ShockActivityFunctionLibrary_EndActivity, ReturnValue) == 0x000019, "Member 'ShockActivityFunctionLibrary_EndActivity::ReturnValue' has a wrong offset!");

// Function SystemReShock.ShockActivityFunctionLibrary.ResetActivities
// 0x0010 (0x0010 - 0x0000)
struct ShockActivityFunctionLibrary_ResetActivities final
{
public:
	const class UObject*                          WorldContextObject;                                // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(ShockActivityFunctionLibrary_ResetActivities) == 0x000008, "Wrong alignment on ShockActivityFunctionLibrary_ResetActivities");
static_assert(sizeof(ShockActivityFunctionLibrary_ResetActivities) == 0x000010, "Wrong size on ShockActivityFunctionLibrary_ResetActivities");
static_assert(offsetof(ShockActivityFunctionLibrary_ResetActivities, WorldContextObject) == 0x000000, "Member 'ShockActivityFunctionLibrary_ResetActivities::WorldContextObject' has a wrong offset!");
static_assert(offsetof(ShockActivityFunctionLibrary_ResetActivities, ReturnValue) == 0x000008, "Member 'ShockActivityFunctionLibrary_ResetActivities::ReturnValue' has a wrong offset!");

// Function SystemReShock.ShockActivityFunctionLibrary.ResumeActivity
// 0x0020 (0x0020 - 0x0000)
struct ShockActivityFunctionLibrary_ResumeActivity final
{
public:
	const class UObject*                          WorldContextObject;                                // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 ActivityId;                                        // 0x0008(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0018(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_19[0x7];                                       // 0x0019(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(ShockActivityFunctionLibrary_ResumeActivity) == 0x000008, "Wrong alignment on ShockActivityFunctionLibrary_ResumeActivity");
static_assert(sizeof(ShockActivityFunctionLibrary_ResumeActivity) == 0x000020, "Wrong size on ShockActivityFunctionLibrary_ResumeActivity");
static_assert(offsetof(ShockActivityFunctionLibrary_ResumeActivity, WorldContextObject) == 0x000000, "Member 'ShockActivityFunctionLibrary_ResumeActivity::WorldContextObject' has a wrong offset!");
static_assert(offsetof(ShockActivityFunctionLibrary_ResumeActivity, ActivityId) == 0x000008, "Member 'ShockActivityFunctionLibrary_ResumeActivity::ActivityId' has a wrong offset!");
static_assert(offsetof(ShockActivityFunctionLibrary_ResumeActivity, ReturnValue) == 0x000018, "Member 'ShockActivityFunctionLibrary_ResumeActivity::ReturnValue' has a wrong offset!");

// Function SystemReShock.ShockActivityFunctionLibrary.SetActivityAvailability
// 0x0020 (0x0020 - 0x0000)
struct ShockActivityFunctionLibrary_SetActivityAvailability final
{
public:
	const class UObject*                          WorldContextObject;                                // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 ActivityId;                                        // 0x0008(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bAvailable;                                        // 0x0018(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0019(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1A[0x6];                                       // 0x001A(0x0006)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(ShockActivityFunctionLibrary_SetActivityAvailability) == 0x000008, "Wrong alignment on ShockActivityFunctionLibrary_SetActivityAvailability");
static_assert(sizeof(ShockActivityFunctionLibrary_SetActivityAvailability) == 0x000020, "Wrong size on ShockActivityFunctionLibrary_SetActivityAvailability");
static_assert(offsetof(ShockActivityFunctionLibrary_SetActivityAvailability, WorldContextObject) == 0x000000, "Member 'ShockActivityFunctionLibrary_SetActivityAvailability::WorldContextObject' has a wrong offset!");
static_assert(offsetof(ShockActivityFunctionLibrary_SetActivityAvailability, ActivityId) == 0x000008, "Member 'ShockActivityFunctionLibrary_SetActivityAvailability::ActivityId' has a wrong offset!");
static_assert(offsetof(ShockActivityFunctionLibrary_SetActivityAvailability, bAvailable) == 0x000018, "Member 'ShockActivityFunctionLibrary_SetActivityAvailability::bAvailable' has a wrong offset!");
static_assert(offsetof(ShockActivityFunctionLibrary_SetActivityAvailability, ReturnValue) == 0x000019, "Member 'ShockActivityFunctionLibrary_SetActivityAvailability::ReturnValue' has a wrong offset!");

// Function SystemReShock.ShockActivityFunctionLibrary.StartActivity
// 0x0020 (0x0020 - 0x0000)
struct ShockActivityFunctionLibrary_StartActivity final
{
public:
	const class UObject*                          WorldContextObject;                                // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 ActivityId;                                        // 0x0008(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0018(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_19[0x7];                                       // 0x0019(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(ShockActivityFunctionLibrary_StartActivity) == 0x000008, "Wrong alignment on ShockActivityFunctionLibrary_StartActivity");
static_assert(sizeof(ShockActivityFunctionLibrary_StartActivity) == 0x000020, "Wrong size on ShockActivityFunctionLibrary_StartActivity");
static_assert(offsetof(ShockActivityFunctionLibrary_StartActivity, WorldContextObject) == 0x000000, "Member 'ShockActivityFunctionLibrary_StartActivity::WorldContextObject' has a wrong offset!");
static_assert(offsetof(ShockActivityFunctionLibrary_StartActivity, ActivityId) == 0x000008, "Member 'ShockActivityFunctionLibrary_StartActivity::ActivityId' has a wrong offset!");
static_assert(offsetof(ShockActivityFunctionLibrary_StartActivity, ReturnValue) == 0x000018, "Member 'ShockActivityFunctionLibrary_StartActivity::ReturnValue' has a wrong offset!");

// Function SystemReShock.ShockChess.IsLegalMove
// 0x0004 (0x0004 - 0x0000)
struct ShockChess_IsLegalMove final
{
public:
	struct FChessMoveRequest                      MoveRequest;                                       // 0x0000(0x0002)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
	EChessSquare                                  OutCaptureSquare;                                  // 0x0002(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0003(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ShockChess_IsLegalMove) == 0x000001, "Wrong alignment on ShockChess_IsLegalMove");
static_assert(sizeof(ShockChess_IsLegalMove) == 0x000004, "Wrong size on ShockChess_IsLegalMove");
static_assert(offsetof(ShockChess_IsLegalMove, MoveRequest) == 0x000000, "Member 'ShockChess_IsLegalMove::MoveRequest' has a wrong offset!");
static_assert(offsetof(ShockChess_IsLegalMove, OutCaptureSquare) == 0x000002, "Member 'ShockChess_IsLegalMove::OutCaptureSquare' has a wrong offset!");
static_assert(offsetof(ShockChess_IsLegalMove, ReturnValue) == 0x000003, "Member 'ShockChess_IsLegalMove::ReturnValue' has a wrong offset!");

// Function SystemReShock.ShockChess.ResumeGame
// 0x0004 (0x0004 - 0x0000)
struct ShockChess_ResumeGame final
{
public:
	int32                                         InComputerSearchDepth;                             // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ShockChess_ResumeGame) == 0x000004, "Wrong alignment on ShockChess_ResumeGame");
static_assert(sizeof(ShockChess_ResumeGame) == 0x000004, "Wrong size on ShockChess_ResumeGame");
static_assert(offsetof(ShockChess_ResumeGame, InComputerSearchDepth) == 0x000000, "Member 'ShockChess_ResumeGame::InComputerSearchDepth' has a wrong offset!");

// Function SystemReShock.ShockChess.StartGame
// 0x0018 (0x0018 - 0x0000)
struct ShockChess_StartGame final
{
public:
	EChessColor                                   InPlayerColor;                                     // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         InComputerSearchDepth;                             // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FChessMoveRequest>              InitialMoveList;                                   // 0x0008(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(ShockChess_StartGame) == 0x000008, "Wrong alignment on ShockChess_StartGame");
static_assert(sizeof(ShockChess_StartGame) == 0x000018, "Wrong size on ShockChess_StartGame");
static_assert(offsetof(ShockChess_StartGame, InPlayerColor) == 0x000000, "Member 'ShockChess_StartGame::InPlayerColor' has a wrong offset!");
static_assert(offsetof(ShockChess_StartGame, InComputerSearchDepth) == 0x000004, "Member 'ShockChess_StartGame::InComputerSearchDepth' has a wrong offset!");
static_assert(offsetof(ShockChess_StartGame, InitialMoveList) == 0x000008, "Member 'ShockChess_StartGame::InitialMoveList' has a wrong offset!");

// Function SystemReShock.ShockChess.StartGameFromState
// 0x00A8 (0x00A8 - 0x0000)
struct ShockChess_StartGameFromState final
{
public:
	EChessColor                                   InPlayerColor;                                     // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EChessColor                                   InTurnColor;                                       // 0x0001(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2[0x2];                                        // 0x0002(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         InComputerSearchDepth;                             // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TMap<EChessSquare, EChessPiece>               WhitePieceMap;                                     // 0x0008(0x0050)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	TMap<EChessSquare, EChessPiece>               BlackPieceMap;                                     // 0x0058(0x0050)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(ShockChess_StartGameFromState) == 0x000008, "Wrong alignment on ShockChess_StartGameFromState");
static_assert(sizeof(ShockChess_StartGameFromState) == 0x0000A8, "Wrong size on ShockChess_StartGameFromState");
static_assert(offsetof(ShockChess_StartGameFromState, InPlayerColor) == 0x000000, "Member 'ShockChess_StartGameFromState::InPlayerColor' has a wrong offset!");
static_assert(offsetof(ShockChess_StartGameFromState, InTurnColor) == 0x000001, "Member 'ShockChess_StartGameFromState::InTurnColor' has a wrong offset!");
static_assert(offsetof(ShockChess_StartGameFromState, InComputerSearchDepth) == 0x000004, "Member 'ShockChess_StartGameFromState::InComputerSearchDepth' has a wrong offset!");
static_assert(offsetof(ShockChess_StartGameFromState, WhitePieceMap) == 0x000008, "Member 'ShockChess_StartGameFromState::WhitePieceMap' has a wrong offset!");
static_assert(offsetof(ShockChess_StartGameFromState, BlackPieceMap) == 0x000058, "Member 'ShockChess_StartGameFromState::BlackPieceMap' has a wrong offset!");

// Function SystemReShock.ShockChess.TryErasePiece
// 0x0002 (0x0002 - 0x0000)
struct ShockChess_TryErasePiece final
{
public:
	EChessSquare                                  Square;                                            // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0001(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ShockChess_TryErasePiece) == 0x000001, "Wrong alignment on ShockChess_TryErasePiece");
static_assert(sizeof(ShockChess_TryErasePiece) == 0x000002, "Wrong size on ShockChess_TryErasePiece");
static_assert(offsetof(ShockChess_TryErasePiece, Square) == 0x000000, "Member 'ShockChess_TryErasePiece::Square' has a wrong offset!");
static_assert(offsetof(ShockChess_TryErasePiece, ReturnValue) == 0x000001, "Member 'ShockChess_TryErasePiece::ReturnValue' has a wrong offset!");

// Function SystemReShock.ShockChess.TryMovePiece
// 0x0003 (0x0003 - 0x0000)
struct ShockChess_TryMovePiece final
{
public:
	struct FChessMoveRequest                      MoveRequest;                                       // 0x0000(0x0002)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0002(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ShockChess_TryMovePiece) == 0x000001, "Wrong alignment on ShockChess_TryMovePiece");
static_assert(sizeof(ShockChess_TryMovePiece) == 0x000003, "Wrong size on ShockChess_TryMovePiece");
static_assert(offsetof(ShockChess_TryMovePiece, MoveRequest) == 0x000000, "Member 'ShockChess_TryMovePiece::MoveRequest' has a wrong offset!");
static_assert(offsetof(ShockChess_TryMovePiece, ReturnValue) == 0x000002, "Member 'ShockChess_TryMovePiece::ReturnValue' has a wrong offset!");

// Function SystemReShock.ShockChess.GetColorFromFlags
// 0x0002 (0x0002 - 0x0000)
struct ShockChess_GetColorFromFlags final
{
public:
	uint8                                         SquareFlags;                                       // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EChessColor                                   ReturnValue;                                       // 0x0001(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ShockChess_GetColorFromFlags) == 0x000001, "Wrong alignment on ShockChess_GetColorFromFlags");
static_assert(sizeof(ShockChess_GetColorFromFlags) == 0x000002, "Wrong size on ShockChess_GetColorFromFlags");
static_assert(offsetof(ShockChess_GetColorFromFlags, SquareFlags) == 0x000000, "Member 'ShockChess_GetColorFromFlags::SquareFlags' has a wrong offset!");
static_assert(offsetof(ShockChess_GetColorFromFlags, ReturnValue) == 0x000001, "Member 'ShockChess_GetColorFromFlags::ReturnValue' has a wrong offset!");

// Function SystemReShock.ShockChess.GetCoordsForSquare
// 0x000C (0x000C - 0x0000)
struct ShockChess_GetCoordsForSquare final
{
public:
	EChessSquare                                  Square;                                            // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FIntPoint                              ReturnValue;                                       // 0x0004(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ShockChess_GetCoordsForSquare) == 0x000004, "Wrong alignment on ShockChess_GetCoordsForSquare");
static_assert(sizeof(ShockChess_GetCoordsForSquare) == 0x00000C, "Wrong size on ShockChess_GetCoordsForSquare");
static_assert(offsetof(ShockChess_GetCoordsForSquare, Square) == 0x000000, "Member 'ShockChess_GetCoordsForSquare::Square' has a wrong offset!");
static_assert(offsetof(ShockChess_GetCoordsForSquare, ReturnValue) == 0x000004, "Member 'ShockChess_GetCoordsForSquare::ReturnValue' has a wrong offset!");

// Function SystemReShock.ShockChess.GetKingSquare
// 0x0002 (0x0002 - 0x0000)
struct ShockChess_GetKingSquare final
{
public:
	EChessColor                                   Color;                                             // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EChessSquare                                  ReturnValue;                                       // 0x0001(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ShockChess_GetKingSquare) == 0x000001, "Wrong alignment on ShockChess_GetKingSquare");
static_assert(sizeof(ShockChess_GetKingSquare) == 0x000002, "Wrong size on ShockChess_GetKingSquare");
static_assert(offsetof(ShockChess_GetKingSquare, Color) == 0x000000, "Member 'ShockChess_GetKingSquare::Color' has a wrong offset!");
static_assert(offsetof(ShockChess_GetKingSquare, ReturnValue) == 0x000001, "Member 'ShockChess_GetKingSquare::ReturnValue' has a wrong offset!");

// Function SystemReShock.ShockChess.GetPieceFlagsMap
// 0x0058 (0x0058 - 0x0000)
struct ShockChess_GetPieceFlagsMap final
{
public:
	TMap<EChessSquare, uint8>                     OutPieceFlagMap;                                   // 0x0000(0x0050)(Parm, OutParm, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0050(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_51[0x7];                                       // 0x0051(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(ShockChess_GetPieceFlagsMap) == 0x000008, "Wrong alignment on ShockChess_GetPieceFlagsMap");
static_assert(sizeof(ShockChess_GetPieceFlagsMap) == 0x000058, "Wrong size on ShockChess_GetPieceFlagsMap");
static_assert(offsetof(ShockChess_GetPieceFlagsMap, OutPieceFlagMap) == 0x000000, "Member 'ShockChess_GetPieceFlagsMap::OutPieceFlagMap' has a wrong offset!");
static_assert(offsetof(ShockChess_GetPieceFlagsMap, ReturnValue) == 0x000050, "Member 'ShockChess_GetPieceFlagsMap::ReturnValue' has a wrong offset!");

// Function SystemReShock.ShockChess.GetPieceFlagsMapForColor
// 0x0060 (0x0060 - 0x0000)
struct ShockChess_GetPieceFlagsMapForColor final
{
public:
	EChessColor                                   Color;                                             // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TMap<EChessSquare, uint8>                     OutPieceFlagMap;                                   // 0x0008(0x0050)(Parm, OutParm, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0058(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_59[0x7];                                       // 0x0059(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(ShockChess_GetPieceFlagsMapForColor) == 0x000008, "Wrong alignment on ShockChess_GetPieceFlagsMapForColor");
static_assert(sizeof(ShockChess_GetPieceFlagsMapForColor) == 0x000060, "Wrong size on ShockChess_GetPieceFlagsMapForColor");
static_assert(offsetof(ShockChess_GetPieceFlagsMapForColor, Color) == 0x000000, "Member 'ShockChess_GetPieceFlagsMapForColor::Color' has a wrong offset!");
static_assert(offsetof(ShockChess_GetPieceFlagsMapForColor, OutPieceFlagMap) == 0x000008, "Member 'ShockChess_GetPieceFlagsMapForColor::OutPieceFlagMap' has a wrong offset!");
static_assert(offsetof(ShockChess_GetPieceFlagsMapForColor, ReturnValue) == 0x000058, "Member 'ShockChess_GetPieceFlagsMapForColor::ReturnValue' has a wrong offset!");

// Function SystemReShock.ShockChess.GetPieceFromFlags
// 0x0002 (0x0002 - 0x0000)
struct ShockChess_GetPieceFromFlags final
{
public:
	uint8                                         SquareFlags;                                       // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EChessPiece                                   ReturnValue;                                       // 0x0001(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ShockChess_GetPieceFromFlags) == 0x000001, "Wrong alignment on ShockChess_GetPieceFromFlags");
static_assert(sizeof(ShockChess_GetPieceFromFlags) == 0x000002, "Wrong size on ShockChess_GetPieceFromFlags");
static_assert(offsetof(ShockChess_GetPieceFromFlags, SquareFlags) == 0x000000, "Member 'ShockChess_GetPieceFromFlags::SquareFlags' has a wrong offset!");
static_assert(offsetof(ShockChess_GetPieceFromFlags, ReturnValue) == 0x000001, "Member 'ShockChess_GetPieceFromFlags::ReturnValue' has a wrong offset!");

// Function SystemReShock.ShockChess.GetSquareColor
// 0x0002 (0x0002 - 0x0000)
struct ShockChess_GetSquareColor final
{
public:
	EChessSquare                                  Square;                                            // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EChessColor                                   ReturnValue;                                       // 0x0001(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ShockChess_GetSquareColor) == 0x000001, "Wrong alignment on ShockChess_GetSquareColor");
static_assert(sizeof(ShockChess_GetSquareColor) == 0x000002, "Wrong size on ShockChess_GetSquareColor");
static_assert(offsetof(ShockChess_GetSquareColor, Square) == 0x000000, "Member 'ShockChess_GetSquareColor::Square' has a wrong offset!");
static_assert(offsetof(ShockChess_GetSquareColor, ReturnValue) == 0x000001, "Member 'ShockChess_GetSquareColor::ReturnValue' has a wrong offset!");

// Function SystemReShock.ShockChess.GetSquareFlags
// 0x0002 (0x0002 - 0x0000)
struct ShockChess_GetSquareFlags final
{
public:
	EChessSquare                                  Square;                                            // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         ReturnValue;                                       // 0x0001(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ShockChess_GetSquareFlags) == 0x000001, "Wrong alignment on ShockChess_GetSquareFlags");
static_assert(sizeof(ShockChess_GetSquareFlags) == 0x000002, "Wrong size on ShockChess_GetSquareFlags");
static_assert(offsetof(ShockChess_GetSquareFlags, Square) == 0x000000, "Member 'ShockChess_GetSquareFlags::Square' has a wrong offset!");
static_assert(offsetof(ShockChess_GetSquareFlags, ReturnValue) == 0x000001, "Member 'ShockChess_GetSquareFlags::ReturnValue' has a wrong offset!");

// Function SystemReShock.ShockChess.GetSquareFromIndex
// 0x0008 (0x0008 - 0x0000)
struct ShockChess_GetSquareFromIndex final
{
public:
	int32                                         SquareIndex;                                       // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EChessSquare                                  ReturnValue;                                       // 0x0004(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(ShockChess_GetSquareFromIndex) == 0x000004, "Wrong alignment on ShockChess_GetSquareFromIndex");
static_assert(sizeof(ShockChess_GetSquareFromIndex) == 0x000008, "Wrong size on ShockChess_GetSquareFromIndex");
static_assert(offsetof(ShockChess_GetSquareFromIndex, SquareIndex) == 0x000000, "Member 'ShockChess_GetSquareFromIndex::SquareIndex' has a wrong offset!");
static_assert(offsetof(ShockChess_GetSquareFromIndex, ReturnValue) == 0x000004, "Member 'ShockChess_GetSquareFromIndex::ReturnValue' has a wrong offset!");

// Function SystemReShock.ShockChess.GetSquareIndexFromCoords
// 0x000C (0x000C - 0x0000)
struct ShockChess_GetSquareIndexFromCoords final
{
public:
	int32                                         X;                                                 // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Y;                                                 // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ReturnValue;                                       // 0x0008(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ShockChess_GetSquareIndexFromCoords) == 0x000004, "Wrong alignment on ShockChess_GetSquareIndexFromCoords");
static_assert(sizeof(ShockChess_GetSquareIndexFromCoords) == 0x00000C, "Wrong size on ShockChess_GetSquareIndexFromCoords");
static_assert(offsetof(ShockChess_GetSquareIndexFromCoords, X) == 0x000000, "Member 'ShockChess_GetSquareIndexFromCoords::X' has a wrong offset!");
static_assert(offsetof(ShockChess_GetSquareIndexFromCoords, Y) == 0x000004, "Member 'ShockChess_GetSquareIndexFromCoords::Y' has a wrong offset!");
static_assert(offsetof(ShockChess_GetSquareIndexFromCoords, ReturnValue) == 0x000008, "Member 'ShockChess_GetSquareIndexFromCoords::ReturnValue' has a wrong offset!");

// Function SystemReShock.ShockChess.HasFinishedPieceTransitions
// 0x0001 (0x0001 - 0x0000)
struct ShockChess_HasFinishedPieceTransitions final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ShockChess_HasFinishedPieceTransitions) == 0x000001, "Wrong alignment on ShockChess_HasFinishedPieceTransitions");
static_assert(sizeof(ShockChess_HasFinishedPieceTransitions) == 0x000001, "Wrong size on ShockChess_HasFinishedPieceTransitions");
static_assert(offsetof(ShockChess_HasFinishedPieceTransitions, ReturnValue) == 0x000000, "Member 'ShockChess_HasFinishedPieceTransitions::ReturnValue' has a wrong offset!");

// Function SystemReShock.ShockChess.IsGameOver
// 0x0001 (0x0001 - 0x0000)
struct ShockChess_IsGameOver final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ShockChess_IsGameOver) == 0x000001, "Wrong alignment on ShockChess_IsGameOver");
static_assert(sizeof(ShockChess_IsGameOver) == 0x000001, "Wrong size on ShockChess_IsGameOver");
static_assert(offsetof(ShockChess_IsGameOver, ReturnValue) == 0x000000, "Member 'ShockChess_IsGameOver::ReturnValue' has a wrong offset!");

// Function SystemReShock.SplineMeshWidget.ConvertEndcapToDynamicMaterialInstance
// 0x0008 (0x0008 - 0x0000)
struct SplineMeshWidget_ConvertEndcapToDynamicMaterialInstance final
{
public:
	class UMaterialInstanceDynamic*               ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SplineMeshWidget_ConvertEndcapToDynamicMaterialInstance) == 0x000008, "Wrong alignment on SplineMeshWidget_ConvertEndcapToDynamicMaterialInstance");
static_assert(sizeof(SplineMeshWidget_ConvertEndcapToDynamicMaterialInstance) == 0x000008, "Wrong size on SplineMeshWidget_ConvertEndcapToDynamicMaterialInstance");
static_assert(offsetof(SplineMeshWidget_ConvertEndcapToDynamicMaterialInstance, ReturnValue) == 0x000000, "Member 'SplineMeshWidget_ConvertEndcapToDynamicMaterialInstance::ReturnValue' has a wrong offset!");

// Function SystemReShock.SplineMeshWidget.ConvertGlowToDynamicMaterialInstance
// 0x0008 (0x0008 - 0x0000)
struct SplineMeshWidget_ConvertGlowToDynamicMaterialInstance final
{
public:
	class UMaterialInstanceDynamic*               ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SplineMeshWidget_ConvertGlowToDynamicMaterialInstance) == 0x000008, "Wrong alignment on SplineMeshWidget_ConvertGlowToDynamicMaterialInstance");
static_assert(sizeof(SplineMeshWidget_ConvertGlowToDynamicMaterialInstance) == 0x000008, "Wrong size on SplineMeshWidget_ConvertGlowToDynamicMaterialInstance");
static_assert(offsetof(SplineMeshWidget_ConvertGlowToDynamicMaterialInstance, ReturnValue) == 0x000000, "Member 'SplineMeshWidget_ConvertGlowToDynamicMaterialInstance::ReturnValue' has a wrong offset!");

// Function SystemReShock.SplineMeshWidget.SetEndCapColor
// 0x0004 (0x0004 - 0x0000)
struct SplineMeshWidget_SetEndCapColor final
{
public:
	struct FColor                                 Color;                                             // 0x0000(0x0004)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SplineMeshWidget_SetEndCapColor) == 0x000004, "Wrong alignment on SplineMeshWidget_SetEndCapColor");
static_assert(sizeof(SplineMeshWidget_SetEndCapColor) == 0x000004, "Wrong size on SplineMeshWidget_SetEndCapColor");
static_assert(offsetof(SplineMeshWidget_SetEndCapColor, Color) == 0x000000, "Member 'SplineMeshWidget_SetEndCapColor::Color' has a wrong offset!");

// Function SystemReShock.SplineMeshWidget.SetGlowColor
// 0x0004 (0x0004 - 0x0000)
struct SplineMeshWidget_SetGlowColor final
{
public:
	struct FColor                                 Color;                                             // 0x0000(0x0004)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SplineMeshWidget_SetGlowColor) == 0x000004, "Wrong alignment on SplineMeshWidget_SetGlowColor");
static_assert(sizeof(SplineMeshWidget_SetGlowColor) == 0x000004, "Wrong size on SplineMeshWidget_SetGlowColor");
static_assert(offsetof(SplineMeshWidget_SetGlowColor, Color) == 0x000000, "Member 'SplineMeshWidget_SetGlowColor::Color' has a wrong offset!");

// Function SystemReShock.SplineMeshWidget.SetGlowOffset
// 0x0004 (0x0004 - 0x0000)
struct SplineMeshWidget_SetGlowOffset final
{
public:
	float                                         Offset;                                            // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SplineMeshWidget_SetGlowOffset) == 0x000004, "Wrong alignment on SplineMeshWidget_SetGlowOffset");
static_assert(sizeof(SplineMeshWidget_SetGlowOffset) == 0x000004, "Wrong size on SplineMeshWidget_SetGlowOffset");
static_assert(offsetof(SplineMeshWidget_SetGlowOffset, Offset) == 0x000000, "Member 'SplineMeshWidget_SetGlowOffset::Offset' has a wrong offset!");

// Function SystemReShock.SplineMeshWidget.SetGlowSize
// 0x0004 (0x0004 - 0x0000)
struct SplineMeshWidget_SetGlowSize final
{
public:
	float                                         Size;                                              // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SplineMeshWidget_SetGlowSize) == 0x000004, "Wrong alignment on SplineMeshWidget_SetGlowSize");
static_assert(sizeof(SplineMeshWidget_SetGlowSize) == 0x000004, "Wrong size on SplineMeshWidget_SetGlowSize");
static_assert(offsetof(SplineMeshWidget_SetGlowSize, Size) == 0x000000, "Member 'SplineMeshWidget_SetGlowSize::Size' has a wrong offset!");

// Function SystemReShock.SplineMeshWidget.SetSplineColor
// 0x0004 (0x0004 - 0x0000)
struct SplineMeshWidget_SetSplineColor final
{
public:
	struct FColor                                 Color;                                             // 0x0000(0x0004)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SplineMeshWidget_SetSplineColor) == 0x000004, "Wrong alignment on SplineMeshWidget_SetSplineColor");
static_assert(sizeof(SplineMeshWidget_SetSplineColor) == 0x000004, "Wrong size on SplineMeshWidget_SetSplineColor");
static_assert(offsetof(SplineMeshWidget_SetSplineColor, Color) == 0x000000, "Member 'SplineMeshWidget_SetSplineColor::Color' has a wrong offset!");

// Function SystemReShock.SplineMeshWidget.SetSplinePointLocation
// 0x000C (0x000C - 0x0000)
struct SplineMeshWidget_SetSplinePointLocation final
{
public:
	int32                                         PointIndex;                                        // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector2D                              Location;                                          // 0x0004(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SplineMeshWidget_SetSplinePointLocation) == 0x000004, "Wrong alignment on SplineMeshWidget_SetSplinePointLocation");
static_assert(sizeof(SplineMeshWidget_SetSplinePointLocation) == 0x00000C, "Wrong size on SplineMeshWidget_SetSplinePointLocation");
static_assert(offsetof(SplineMeshWidget_SetSplinePointLocation, PointIndex) == 0x000000, "Member 'SplineMeshWidget_SetSplinePointLocation::PointIndex' has a wrong offset!");
static_assert(offsetof(SplineMeshWidget_SetSplinePointLocation, Location) == 0x000004, "Member 'SplineMeshWidget_SetSplinePointLocation::Location' has a wrong offset!");

// Function SystemReShock.SplineMeshWidget.SetSplineWidth
// 0x0004 (0x0004 - 0x0000)
struct SplineMeshWidget_SetSplineWidth final
{
public:
	float                                         Width;                                             // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SplineMeshWidget_SetSplineWidth) == 0x000004, "Wrong alignment on SplineMeshWidget_SetSplineWidth");
static_assert(sizeof(SplineMeshWidget_SetSplineWidth) == 0x000004, "Wrong size on SplineMeshWidget_SetSplineWidth");
static_assert(offsetof(SplineMeshWidget_SetSplineWidth, Width) == 0x000000, "Member 'SplineMeshWidget_SetSplineWidth::Width' has a wrong offset!");

// Function SystemReShock.SplineMeshWidget.GetSplinePointCount
// 0x0004 (0x0004 - 0x0000)
struct SplineMeshWidget_GetSplinePointCount final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SplineMeshWidget_GetSplinePointCount) == 0x000004, "Wrong alignment on SplineMeshWidget_GetSplinePointCount");
static_assert(sizeof(SplineMeshWidget_GetSplinePointCount) == 0x000004, "Wrong size on SplineMeshWidget_GetSplinePointCount");
static_assert(offsetof(SplineMeshWidget_GetSplinePointCount, ReturnValue) == 0x000000, "Member 'SplineMeshWidget_GetSplinePointCount::ReturnValue' has a wrong offset!");

// Function SystemReShock.SystemShockFunctionLibrary.GetBestCultureFromRowNames
// 0x0028 (0x0028 - 0x0000)
struct SystemShockFunctionLibrary_GetBestCultureFromRowNames final
{
public:
	class FString                                 CultureName;                                       // 0x0000(0x0010)(ConstParm, Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class FName>                           CultureRowNames;                                   // 0x0010(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
	class FName                                   ReturnValue;                                       // 0x0020(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SystemShockFunctionLibrary_GetBestCultureFromRowNames) == 0x000008, "Wrong alignment on SystemShockFunctionLibrary_GetBestCultureFromRowNames");
static_assert(sizeof(SystemShockFunctionLibrary_GetBestCultureFromRowNames) == 0x000028, "Wrong size on SystemShockFunctionLibrary_GetBestCultureFromRowNames");
static_assert(offsetof(SystemShockFunctionLibrary_GetBestCultureFromRowNames, CultureName) == 0x000000, "Member 'SystemShockFunctionLibrary_GetBestCultureFromRowNames::CultureName' has a wrong offset!");
static_assert(offsetof(SystemShockFunctionLibrary_GetBestCultureFromRowNames, CultureRowNames) == 0x000010, "Member 'SystemShockFunctionLibrary_GetBestCultureFromRowNames::CultureRowNames' has a wrong offset!");
static_assert(offsetof(SystemShockFunctionLibrary_GetBestCultureFromRowNames, ReturnValue) == 0x000020, "Member 'SystemShockFunctionLibrary_GetBestCultureFromRowNames::ReturnValue' has a wrong offset!");

// Function SystemReShock.SystemShockFunctionLibrary.GetBestCultureIndex
// 0x0028 (0x0028 - 0x0000)
struct SystemShockFunctionLibrary_GetBestCultureIndex final
{
public:
	class FString                                 CultureName;                                       // 0x0000(0x0010)(ConstParm, Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class FString>                         CandidateNames;                                    // 0x0010(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
	int32                                         ReturnValue;                                       // 0x0020(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_24[0x4];                                       // 0x0024(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SystemShockFunctionLibrary_GetBestCultureIndex) == 0x000008, "Wrong alignment on SystemShockFunctionLibrary_GetBestCultureIndex");
static_assert(sizeof(SystemShockFunctionLibrary_GetBestCultureIndex) == 0x000028, "Wrong size on SystemShockFunctionLibrary_GetBestCultureIndex");
static_assert(offsetof(SystemShockFunctionLibrary_GetBestCultureIndex, CultureName) == 0x000000, "Member 'SystemShockFunctionLibrary_GetBestCultureIndex::CultureName' has a wrong offset!");
static_assert(offsetof(SystemShockFunctionLibrary_GetBestCultureIndex, CandidateNames) == 0x000010, "Member 'SystemShockFunctionLibrary_GetBestCultureIndex::CandidateNames' has a wrong offset!");
static_assert(offsetof(SystemShockFunctionLibrary_GetBestCultureIndex, ReturnValue) == 0x000020, "Member 'SystemShockFunctionLibrary_GetBestCultureIndex::ReturnValue' has a wrong offset!");

// Function SystemReShock.SystemShockFunctionLibrary.GetBestTicTacToeMove
// 0x0030 (0x0030 - 0x0000)
struct SystemShockFunctionLibrary_GetBestTicTacToeMove final
{
public:
	TArray<uint8>                                 CellStates;                                        // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
	int32                                         LevelSize;                                         // 0x0010(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         PlayerId;                                          // 0x0014(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         OtherPlayerID;                                     // 0x0015(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bFullDepth;                                        // 0x0016(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bWrapLevel;                                        // 0x0017(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<int32>                                 ScoreTable;                                        // 0x0018(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
	int32                                         ReturnValue;                                       // 0x0028(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2C[0x4];                                       // 0x002C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SystemShockFunctionLibrary_GetBestTicTacToeMove) == 0x000008, "Wrong alignment on SystemShockFunctionLibrary_GetBestTicTacToeMove");
static_assert(sizeof(SystemShockFunctionLibrary_GetBestTicTacToeMove) == 0x000030, "Wrong size on SystemShockFunctionLibrary_GetBestTicTacToeMove");
static_assert(offsetof(SystemShockFunctionLibrary_GetBestTicTacToeMove, CellStates) == 0x000000, "Member 'SystemShockFunctionLibrary_GetBestTicTacToeMove::CellStates' has a wrong offset!");
static_assert(offsetof(SystemShockFunctionLibrary_GetBestTicTacToeMove, LevelSize) == 0x000010, "Member 'SystemShockFunctionLibrary_GetBestTicTacToeMove::LevelSize' has a wrong offset!");
static_assert(offsetof(SystemShockFunctionLibrary_GetBestTicTacToeMove, PlayerId) == 0x000014, "Member 'SystemShockFunctionLibrary_GetBestTicTacToeMove::PlayerId' has a wrong offset!");
static_assert(offsetof(SystemShockFunctionLibrary_GetBestTicTacToeMove, OtherPlayerID) == 0x000015, "Member 'SystemShockFunctionLibrary_GetBestTicTacToeMove::OtherPlayerID' has a wrong offset!");
static_assert(offsetof(SystemShockFunctionLibrary_GetBestTicTacToeMove, bFullDepth) == 0x000016, "Member 'SystemShockFunctionLibrary_GetBestTicTacToeMove::bFullDepth' has a wrong offset!");
static_assert(offsetof(SystemShockFunctionLibrary_GetBestTicTacToeMove, bWrapLevel) == 0x000017, "Member 'SystemShockFunctionLibrary_GetBestTicTacToeMove::bWrapLevel' has a wrong offset!");
static_assert(offsetof(SystemShockFunctionLibrary_GetBestTicTacToeMove, ScoreTable) == 0x000018, "Member 'SystemShockFunctionLibrary_GetBestTicTacToeMove::ScoreTable' has a wrong offset!");
static_assert(offsetof(SystemShockFunctionLibrary_GetBestTicTacToeMove, ReturnValue) == 0x000028, "Member 'SystemShockFunctionLibrary_GetBestTicTacToeMove::ReturnValue' has a wrong offset!");

// Function SystemReShock.SystemShockFunctionLibrary.GetStaticMeshTrackProperties
// 0x0038 (0x0038 - 0x0000)
struct SystemShockFunctionLibrary_GetStaticMeshTrackProperties final
{
public:
	class UStaticMesh*                            StaticMesh;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         UVChannel;                                         // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         LongSideBias;                                      // 0x000C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FBox2D                                 TexCoordBounds;                                    // 0x0010(0x0014)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
	float                                         OutTrackLength;                                    // 0x0024(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector2D                              OutUCoordInterval;                                 // 0x0028(0x0008)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0030(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_31[0x7];                                       // 0x0031(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SystemShockFunctionLibrary_GetStaticMeshTrackProperties) == 0x000008, "Wrong alignment on SystemShockFunctionLibrary_GetStaticMeshTrackProperties");
static_assert(sizeof(SystemShockFunctionLibrary_GetStaticMeshTrackProperties) == 0x000038, "Wrong size on SystemShockFunctionLibrary_GetStaticMeshTrackProperties");
static_assert(offsetof(SystemShockFunctionLibrary_GetStaticMeshTrackProperties, StaticMesh) == 0x000000, "Member 'SystemShockFunctionLibrary_GetStaticMeshTrackProperties::StaticMesh' has a wrong offset!");
static_assert(offsetof(SystemShockFunctionLibrary_GetStaticMeshTrackProperties, UVChannel) == 0x000008, "Member 'SystemShockFunctionLibrary_GetStaticMeshTrackProperties::UVChannel' has a wrong offset!");
static_assert(offsetof(SystemShockFunctionLibrary_GetStaticMeshTrackProperties, LongSideBias) == 0x00000C, "Member 'SystemShockFunctionLibrary_GetStaticMeshTrackProperties::LongSideBias' has a wrong offset!");
static_assert(offsetof(SystemShockFunctionLibrary_GetStaticMeshTrackProperties, TexCoordBounds) == 0x000010, "Member 'SystemShockFunctionLibrary_GetStaticMeshTrackProperties::TexCoordBounds' has a wrong offset!");
static_assert(offsetof(SystemShockFunctionLibrary_GetStaticMeshTrackProperties, OutTrackLength) == 0x000024, "Member 'SystemShockFunctionLibrary_GetStaticMeshTrackProperties::OutTrackLength' has a wrong offset!");
static_assert(offsetof(SystemShockFunctionLibrary_GetStaticMeshTrackProperties, OutUCoordInterval) == 0x000028, "Member 'SystemShockFunctionLibrary_GetStaticMeshTrackProperties::OutUCoordInterval' has a wrong offset!");
static_assert(offsetof(SystemShockFunctionLibrary_GetStaticMeshTrackProperties, ReturnValue) == 0x000030, "Member 'SystemShockFunctionLibrary_GetStaticMeshTrackProperties::ReturnValue' has a wrong offset!");

// Function SystemReShock.SystemShockFunctionLibrary.GetTicTacToeScoreForMove
// 0x0038 (0x0038 - 0x0000)
struct SystemShockFunctionLibrary_GetTicTacToeScoreForMove final
{
public:
	TArray<uint8>                                 CellStates;                                        // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
	int32                                         LevelSize;                                         // 0x0010(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         CellIndex;                                         // 0x0014(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         NewState;                                          // 0x0018(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bWrapLevel;                                        // 0x0019(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1A[0x6];                                       // 0x001A(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<int32>                                 ScoreTable;                                        // 0x0020(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
	int32                                         ReturnValue;                                       // 0x0030(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_34[0x4];                                       // 0x0034(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SystemShockFunctionLibrary_GetTicTacToeScoreForMove) == 0x000008, "Wrong alignment on SystemShockFunctionLibrary_GetTicTacToeScoreForMove");
static_assert(sizeof(SystemShockFunctionLibrary_GetTicTacToeScoreForMove) == 0x000038, "Wrong size on SystemShockFunctionLibrary_GetTicTacToeScoreForMove");
static_assert(offsetof(SystemShockFunctionLibrary_GetTicTacToeScoreForMove, CellStates) == 0x000000, "Member 'SystemShockFunctionLibrary_GetTicTacToeScoreForMove::CellStates' has a wrong offset!");
static_assert(offsetof(SystemShockFunctionLibrary_GetTicTacToeScoreForMove, LevelSize) == 0x000010, "Member 'SystemShockFunctionLibrary_GetTicTacToeScoreForMove::LevelSize' has a wrong offset!");
static_assert(offsetof(SystemShockFunctionLibrary_GetTicTacToeScoreForMove, CellIndex) == 0x000014, "Member 'SystemShockFunctionLibrary_GetTicTacToeScoreForMove::CellIndex' has a wrong offset!");
static_assert(offsetof(SystemShockFunctionLibrary_GetTicTacToeScoreForMove, NewState) == 0x000018, "Member 'SystemShockFunctionLibrary_GetTicTacToeScoreForMove::NewState' has a wrong offset!");
static_assert(offsetof(SystemShockFunctionLibrary_GetTicTacToeScoreForMove, bWrapLevel) == 0x000019, "Member 'SystemShockFunctionLibrary_GetTicTacToeScoreForMove::bWrapLevel' has a wrong offset!");
static_assert(offsetof(SystemShockFunctionLibrary_GetTicTacToeScoreForMove, ScoreTable) == 0x000020, "Member 'SystemShockFunctionLibrary_GetTicTacToeScoreForMove::ScoreTable' has a wrong offset!");
static_assert(offsetof(SystemShockFunctionLibrary_GetTicTacToeScoreForMove, ReturnValue) == 0x000030, "Member 'SystemShockFunctionLibrary_GetTicTacToeScoreForMove::ReturnValue' has a wrong offset!");

// Function SystemReShock.TextMeshDecoratorInterface.GetDecoratorSizeFromPayload
// 0x0018 (0x0018 - 0x0000)
struct TextMeshDecoratorInterface_GetDecoratorSizeFromPayload final
{
public:
	class FString                                 Payload;                                           // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector2D                              ReturnValue;                                       // 0x0010(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TextMeshDecoratorInterface_GetDecoratorSizeFromPayload) == 0x000008, "Wrong alignment on TextMeshDecoratorInterface_GetDecoratorSizeFromPayload");
static_assert(sizeof(TextMeshDecoratorInterface_GetDecoratorSizeFromPayload) == 0x000018, "Wrong size on TextMeshDecoratorInterface_GetDecoratorSizeFromPayload");
static_assert(offsetof(TextMeshDecoratorInterface_GetDecoratorSizeFromPayload, Payload) == 0x000000, "Member 'TextMeshDecoratorInterface_GetDecoratorSizeFromPayload::Payload' has a wrong offset!");
static_assert(offsetof(TextMeshDecoratorInterface_GetDecoratorSizeFromPayload, ReturnValue) == 0x000010, "Member 'TextMeshDecoratorInterface_GetDecoratorSizeFromPayload::ReturnValue' has a wrong offset!");

// Function SystemReShock.TextMeshDecoratorInterface.InitializeDecorator
// 0x0010 (0x0010 - 0x0000)
struct TextMeshDecoratorInterface_InitializeDecorator final
{
public:
	class UTextMeshWidget*                        TextMeshWidget;                                    // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FColor                                 Color;                                             // 0x0008(0x0004)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x000C(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_D[0x3];                                        // 0x000D(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(TextMeshDecoratorInterface_InitializeDecorator) == 0x000008, "Wrong alignment on TextMeshDecoratorInterface_InitializeDecorator");
static_assert(sizeof(TextMeshDecoratorInterface_InitializeDecorator) == 0x000010, "Wrong size on TextMeshDecoratorInterface_InitializeDecorator");
static_assert(offsetof(TextMeshDecoratorInterface_InitializeDecorator, TextMeshWidget) == 0x000000, "Member 'TextMeshDecoratorInterface_InitializeDecorator::TextMeshWidget' has a wrong offset!");
static_assert(offsetof(TextMeshDecoratorInterface_InitializeDecorator, Color) == 0x000008, "Member 'TextMeshDecoratorInterface_InitializeDecorator::Color' has a wrong offset!");
static_assert(offsetof(TextMeshDecoratorInterface_InitializeDecorator, ReturnValue) == 0x00000C, "Member 'TextMeshDecoratorInterface_InitializeDecorator::ReturnValue' has a wrong offset!");

// Function SystemReShock.TextMeshDecoratorInterface.SetDecoratorColor
// 0x0004 (0x0004 - 0x0000)
struct TextMeshDecoratorInterface_SetDecoratorColor final
{
public:
	struct FColor                                 Color;                                             // 0x0000(0x0004)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TextMeshDecoratorInterface_SetDecoratorColor) == 0x000004, "Wrong alignment on TextMeshDecoratorInterface_SetDecoratorColor");
static_assert(sizeof(TextMeshDecoratorInterface_SetDecoratorColor) == 0x000004, "Wrong size on TextMeshDecoratorInterface_SetDecoratorColor");
static_assert(offsetof(TextMeshDecoratorInterface_SetDecoratorColor, Color) == 0x000000, "Member 'TextMeshDecoratorInterface_SetDecoratorColor::Color' has a wrong offset!");

// Function SystemReShock.TextMeshWidget.SetColor
// 0x0004 (0x0004 - 0x0000)
struct TextMeshWidget_SetColor final
{
public:
	struct FColor                                 NewColor;                                          // 0x0000(0x0004)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TextMeshWidget_SetColor) == 0x000004, "Wrong alignment on TextMeshWidget_SetColor");
static_assert(sizeof(TextMeshWidget_SetColor) == 0x000004, "Wrong size on TextMeshWidget_SetColor");
static_assert(offsetof(TextMeshWidget_SetColor, NewColor) == 0x000000, "Member 'TextMeshWidget_SetColor::NewColor' has a wrong offset!");

// Function SystemReShock.TextMeshWidget.SetFont
// 0x0008 (0x0008 - 0x0000)
struct TextMeshWidget_SetFont final
{
public:
	class UFont*                                  NewFont;                                           // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TextMeshWidget_SetFont) == 0x000008, "Wrong alignment on TextMeshWidget_SetFont");
static_assert(sizeof(TextMeshWidget_SetFont) == 0x000008, "Wrong size on TextMeshWidget_SetFont");
static_assert(offsetof(TextMeshWidget_SetFont, NewFont) == 0x000000, "Member 'TextMeshWidget_SetFont::NewFont' has a wrong offset!");

// Function SystemReShock.TextMeshWidget.SetFontSize
// 0x0004 (0x0004 - 0x0000)
struct TextMeshWidget_SetFontSize final
{
public:
	float                                         NewSize;                                           // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TextMeshWidget_SetFontSize) == 0x000004, "Wrong alignment on TextMeshWidget_SetFontSize");
static_assert(sizeof(TextMeshWidget_SetFontSize) == 0x000004, "Wrong size on TextMeshWidget_SetFontSize");
static_assert(offsetof(TextMeshWidget_SetFontSize, NewSize) == 0x000000, "Member 'TextMeshWidget_SetFontSize::NewSize' has a wrong offset!");

// Function SystemReShock.TextMeshWidget.SetForceUppercase
// 0x0001 (0x0001 - 0x0000)
struct TextMeshWidget_SetForceUppercase final
{
public:
	bool                                          bUppercase;                                        // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TextMeshWidget_SetForceUppercase) == 0x000001, "Wrong alignment on TextMeshWidget_SetForceUppercase");
static_assert(sizeof(TextMeshWidget_SetForceUppercase) == 0x000001, "Wrong size on TextMeshWidget_SetForceUppercase");
static_assert(offsetof(TextMeshWidget_SetForceUppercase, bUppercase) == 0x000000, "Member 'TextMeshWidget_SetForceUppercase::bUppercase' has a wrong offset!");

// Function SystemReShock.TextMeshWidget.SetHorizontalAlignment
// 0x0001 (0x0001 - 0x0000)
struct TextMeshWidget_SetHorizontalAlignment final
{
public:
	ETextMeshWidgetHorizontalAligment             Alignment;                                         // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TextMeshWidget_SetHorizontalAlignment) == 0x000001, "Wrong alignment on TextMeshWidget_SetHorizontalAlignment");
static_assert(sizeof(TextMeshWidget_SetHorizontalAlignment) == 0x000001, "Wrong size on TextMeshWidget_SetHorizontalAlignment");
static_assert(offsetof(TextMeshWidget_SetHorizontalAlignment, Alignment) == 0x000000, "Member 'TextMeshWidget_SetHorizontalAlignment::Alignment' has a wrong offset!");

// Function SystemReShock.TextMeshWidget.SetPadding
// 0x0008 (0x0008 - 0x0000)
struct TextMeshWidget_SetPadding final
{
public:
	struct FVector2D                              NewPadding;                                        // 0x0000(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TextMeshWidget_SetPadding) == 0x000004, "Wrong alignment on TextMeshWidget_SetPadding");
static_assert(sizeof(TextMeshWidget_SetPadding) == 0x000008, "Wrong size on TextMeshWidget_SetPadding");
static_assert(offsetof(TextMeshWidget_SetPadding, NewPadding) == 0x000000, "Member 'TextMeshWidget_SetPadding::NewPadding' has a wrong offset!");

// Function SystemReShock.TextMeshWidget.SetSpacing
// 0x0008 (0x0008 - 0x0000)
struct TextMeshWidget_SetSpacing final
{
public:
	struct FVector2D                              NewSpacing;                                        // 0x0000(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TextMeshWidget_SetSpacing) == 0x000004, "Wrong alignment on TextMeshWidget_SetSpacing");
static_assert(sizeof(TextMeshWidget_SetSpacing) == 0x000008, "Wrong size on TextMeshWidget_SetSpacing");
static_assert(offsetof(TextMeshWidget_SetSpacing, NewSpacing) == 0x000000, "Member 'TextMeshWidget_SetSpacing::NewSpacing' has a wrong offset!");

// Function SystemReShock.TextMeshWidget.SetText
// 0x0018 (0x0018 - 0x0000)
struct TextMeshWidget_SetText final
{
public:
	class FText                                   NewText;                                           // 0x0000(0x0018)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(TextMeshWidget_SetText) == 0x000008, "Wrong alignment on TextMeshWidget_SetText");
static_assert(sizeof(TextMeshWidget_SetText) == 0x000018, "Wrong size on TextMeshWidget_SetText");
static_assert(offsetof(TextMeshWidget_SetText, NewText) == 0x000000, "Member 'TextMeshWidget_SetText::NewText' has a wrong offset!");

// Function SystemReShock.TextMeshWidget.SetTextColor
// 0x0004 (0x0004 - 0x0000)
struct TextMeshWidget_SetTextColor final
{
public:
	struct FColor                                 NewColor;                                          // 0x0000(0x0004)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TextMeshWidget_SetTextColor) == 0x000004, "Wrong alignment on TextMeshWidget_SetTextColor");
static_assert(sizeof(TextMeshWidget_SetTextColor) == 0x000004, "Wrong size on TextMeshWidget_SetTextColor");
static_assert(offsetof(TextMeshWidget_SetTextColor, NewColor) == 0x000000, "Member 'TextMeshWidget_SetTextColor::NewColor' has a wrong offset!");

// Function SystemReShock.TextMeshWidget.SetVerticalAlignment
// 0x0001 (0x0001 - 0x0000)
struct TextMeshWidget_SetVerticalAlignment final
{
public:
	ETextMeshWidgetVerticalAligment               Alignment;                                         // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TextMeshWidget_SetVerticalAlignment) == 0x000001, "Wrong alignment on TextMeshWidget_SetVerticalAlignment");
static_assert(sizeof(TextMeshWidget_SetVerticalAlignment) == 0x000001, "Wrong size on TextMeshWidget_SetVerticalAlignment");
static_assert(offsetof(TextMeshWidget_SetVerticalAlignment, Alignment) == 0x000000, "Member 'TextMeshWidget_SetVerticalAlignment::Alignment' has a wrong offset!");

// Function SystemReShock.TextMeshWidget.SetVirtualTextDimensions
// 0x0008 (0x0008 - 0x0000)
struct TextMeshWidget_SetVirtualTextDimensions final
{
public:
	struct FVector2D                              Dimensions;                                        // 0x0000(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TextMeshWidget_SetVirtualTextDimensions) == 0x000004, "Wrong alignment on TextMeshWidget_SetVirtualTextDimensions");
static_assert(sizeof(TextMeshWidget_SetVirtualTextDimensions) == 0x000008, "Wrong size on TextMeshWidget_SetVirtualTextDimensions");
static_assert(offsetof(TextMeshWidget_SetVirtualTextDimensions, Dimensions) == 0x000000, "Member 'TextMeshWidget_SetVirtualTextDimensions::Dimensions' has a wrong offset!");

// Function SystemReShock.TextMeshWidget.SetVirtualTextWidth
// 0x0004 (0x0004 - 0x0000)
struct TextMeshWidget_SetVirtualTextWidth final
{
public:
	float                                         VirtualWidth;                                      // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TextMeshWidget_SetVirtualTextWidth) == 0x000004, "Wrong alignment on TextMeshWidget_SetVirtualTextWidth");
static_assert(sizeof(TextMeshWidget_SetVirtualTextWidth) == 0x000004, "Wrong size on TextMeshWidget_SetVirtualTextWidth");
static_assert(offsetof(TextMeshWidget_SetVirtualTextWidth, VirtualWidth) == 0x000000, "Member 'TextMeshWidget_SetVirtualTextWidth::VirtualWidth' has a wrong offset!");

// Function SystemReShock.TextMeshWidget.GetDimensionsForNewText
// 0x0020 (0x0020 - 0x0000)
struct TextMeshWidget_GetDimensionsForNewText final
{
public:
	class FText                                   NewText;                                           // 0x0000(0x0018)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	struct FVector2D                              ReturnValue;                                       // 0x0018(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TextMeshWidget_GetDimensionsForNewText) == 0x000008, "Wrong alignment on TextMeshWidget_GetDimensionsForNewText");
static_assert(sizeof(TextMeshWidget_GetDimensionsForNewText) == 0x000020, "Wrong size on TextMeshWidget_GetDimensionsForNewText");
static_assert(offsetof(TextMeshWidget_GetDimensionsForNewText, NewText) == 0x000000, "Member 'TextMeshWidget_GetDimensionsForNewText::NewText' has a wrong offset!");
static_assert(offsetof(TextMeshWidget_GetDimensionsForNewText, ReturnValue) == 0x000018, "Member 'TextMeshWidget_GetDimensionsForNewText::ReturnValue' has a wrong offset!");

// Function SystemReShock.TimeSeriesTraceFunction.GetTimeSeriesTraceWidget
// 0x0008 (0x0008 - 0x0000)
struct TimeSeriesTraceFunction_GetTimeSeriesTraceWidget final
{
public:
	class UTimeSeriesTraceWidget*                 ReturnValue;                                       // 0x0000(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TimeSeriesTraceFunction_GetTimeSeriesTraceWidget) == 0x000008, "Wrong alignment on TimeSeriesTraceFunction_GetTimeSeriesTraceWidget");
static_assert(sizeof(TimeSeriesTraceFunction_GetTimeSeriesTraceWidget) == 0x000008, "Wrong size on TimeSeriesTraceFunction_GetTimeSeriesTraceWidget");
static_assert(offsetof(TimeSeriesTraceFunction_GetTimeSeriesTraceWidget, ReturnValue) == 0x000000, "Member 'TimeSeriesTraceFunction_GetTimeSeriesTraceWidget::ReturnValue' has a wrong offset!");

// Function SystemReShock.TimeSeriesTraceFunction.K2_EvaluateFunction
// 0x0004 (0x0004 - 0x0000)
struct TimeSeriesTraceFunction_K2_EvaluateFunction final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TimeSeriesTraceFunction_K2_EvaluateFunction) == 0x000004, "Wrong alignment on TimeSeriesTraceFunction_K2_EvaluateFunction");
static_assert(sizeof(TimeSeriesTraceFunction_K2_EvaluateFunction) == 0x000004, "Wrong size on TimeSeriesTraceFunction_K2_EvaluateFunction");
static_assert(offsetof(TimeSeriesTraceFunction_K2_EvaluateFunction, ReturnValue) == 0x000000, "Member 'TimeSeriesTraceFunction_K2_EvaluateFunction::ReturnValue' has a wrong offset!");

// Function SystemReShock.TimeSeriesTraceWidget.DisableTraceFunctions
// 0x0001 (0x0001 - 0x0000)
struct TimeSeriesTraceWidget_DisableTraceFunctions final
{
public:
	bool                                          bDisable;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TimeSeriesTraceWidget_DisableTraceFunctions) == 0x000001, "Wrong alignment on TimeSeriesTraceWidget_DisableTraceFunctions");
static_assert(sizeof(TimeSeriesTraceWidget_DisableTraceFunctions) == 0x000001, "Wrong size on TimeSeriesTraceWidget_DisableTraceFunctions");
static_assert(offsetof(TimeSeriesTraceWidget_DisableTraceFunctions, bDisable) == 0x000000, "Member 'TimeSeriesTraceWidget_DisableTraceFunctions::bDisable' has a wrong offset!");

// Function SystemReShock.TimeSeriesTraceWidget.GetTraceFunctionsDisabled
// 0x0001 (0x0001 - 0x0000)
struct TimeSeriesTraceWidget_GetTraceFunctionsDisabled final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TimeSeriesTraceWidget_GetTraceFunctionsDisabled) == 0x000001, "Wrong alignment on TimeSeriesTraceWidget_GetTraceFunctionsDisabled");
static_assert(sizeof(TimeSeriesTraceWidget_GetTraceFunctionsDisabled) == 0x000001, "Wrong size on TimeSeriesTraceWidget_GetTraceFunctionsDisabled");
static_assert(offsetof(TimeSeriesTraceWidget_GetTraceFunctionsDisabled, ReturnValue) == 0x000000, "Member 'TimeSeriesTraceWidget_GetTraceFunctionsDisabled::ReturnValue' has a wrong offset!");

// Function SystemReShock.PhysInstancedStaticMeshComponent.AddInstanceWithVelocity
// 0x0050 (0x0050 - 0x0000)
struct PhysInstancedStaticMeshComponent_AddInstanceWithVelocity final
{
public:
	struct FTransform                             LocalTransform;                                    // 0x0000(0x0030)(ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	struct FVector                                LocalVelocity;                                     // 0x0030(0x000C)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                LocalRotationAxis;                                 // 0x003C(0x000C)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         RotationSpeed;                                     // 0x0048(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bUseCenterOfMass;                                  // 0x004C(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4D[0x3];                                       // 0x004D(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(PhysInstancedStaticMeshComponent_AddInstanceWithVelocity) == 0x000010, "Wrong alignment on PhysInstancedStaticMeshComponent_AddInstanceWithVelocity");
static_assert(sizeof(PhysInstancedStaticMeshComponent_AddInstanceWithVelocity) == 0x000050, "Wrong size on PhysInstancedStaticMeshComponent_AddInstanceWithVelocity");
static_assert(offsetof(PhysInstancedStaticMeshComponent_AddInstanceWithVelocity, LocalTransform) == 0x000000, "Member 'PhysInstancedStaticMeshComponent_AddInstanceWithVelocity::LocalTransform' has a wrong offset!");
static_assert(offsetof(PhysInstancedStaticMeshComponent_AddInstanceWithVelocity, LocalVelocity) == 0x000030, "Member 'PhysInstancedStaticMeshComponent_AddInstanceWithVelocity::LocalVelocity' has a wrong offset!");
static_assert(offsetof(PhysInstancedStaticMeshComponent_AddInstanceWithVelocity, LocalRotationAxis) == 0x00003C, "Member 'PhysInstancedStaticMeshComponent_AddInstanceWithVelocity::LocalRotationAxis' has a wrong offset!");
static_assert(offsetof(PhysInstancedStaticMeshComponent_AddInstanceWithVelocity, RotationSpeed) == 0x000048, "Member 'PhysInstancedStaticMeshComponent_AddInstanceWithVelocity::RotationSpeed' has a wrong offset!");
static_assert(offsetof(PhysInstancedStaticMeshComponent_AddInstanceWithVelocity, bUseCenterOfMass) == 0x00004C, "Member 'PhysInstancedStaticMeshComponent_AddInstanceWithVelocity::bUseCenterOfMass' has a wrong offset!");

// Function SystemReShock.PhysInstancedStaticMeshComponent.AddWorldVelocityToInstance
// 0x0010 (0x0010 - 0x0000)
struct PhysInstancedStaticMeshComponent_AddWorldVelocityToInstance final
{
public:
	int32                                         InstanceIndex;                                     // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                WorldLinearVelocity;                               // 0x0004(0x000C)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PhysInstancedStaticMeshComponent_AddWorldVelocityToInstance) == 0x000004, "Wrong alignment on PhysInstancedStaticMeshComponent_AddWorldVelocityToInstance");
static_assert(sizeof(PhysInstancedStaticMeshComponent_AddWorldVelocityToInstance) == 0x000010, "Wrong size on PhysInstancedStaticMeshComponent_AddWorldVelocityToInstance");
static_assert(offsetof(PhysInstancedStaticMeshComponent_AddWorldVelocityToInstance, InstanceIndex) == 0x000000, "Member 'PhysInstancedStaticMeshComponent_AddWorldVelocityToInstance::InstanceIndex' has a wrong offset!");
static_assert(offsetof(PhysInstancedStaticMeshComponent_AddWorldVelocityToInstance, WorldLinearVelocity) == 0x000004, "Member 'PhysInstancedStaticMeshComponent_AddWorldVelocityToInstance::WorldLinearVelocity' has a wrong offset!");

// Function SystemReShock.PhysInstancedStaticMeshComponent.SetAutoDestroy
// 0x0001 (0x0001 - 0x0000)
struct PhysInstancedStaticMeshComponent_SetAutoDestroy final
{
public:
	bool                                          bState;                                            // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PhysInstancedStaticMeshComponent_SetAutoDestroy) == 0x000001, "Wrong alignment on PhysInstancedStaticMeshComponent_SetAutoDestroy");
static_assert(sizeof(PhysInstancedStaticMeshComponent_SetAutoDestroy) == 0x000001, "Wrong size on PhysInstancedStaticMeshComponent_SetAutoDestroy");
static_assert(offsetof(PhysInstancedStaticMeshComponent_SetAutoDestroy, bState) == 0x000000, "Member 'PhysInstancedStaticMeshComponent_SetAutoDestroy::bState' has a wrong offset!");

// Function SystemReShock.PhysInstancedStaticMeshComponent.TryCollideWithWorld
// 0x0048 (0x0048 - 0x0000)
struct PhysInstancedStaticMeshComponent_TryCollideWithWorld final
{
public:
	struct FVector                                LastCentroid;                                      // 0x0000(0x000C)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                CurrCentroid;                                      // 0x000C(0x000C)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                CylinderVector;                                    // 0x0018(0x000C)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         CapsuleRadius;                                     // 0x0024(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                OutCollisionPoint;                                 // 0x0028(0x000C)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                OutCollisionNormal;                                // 0x0034(0x000C)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         OutPenetrationDepth;                               // 0x0040(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0044(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_45[0x3];                                       // 0x0045(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(PhysInstancedStaticMeshComponent_TryCollideWithWorld) == 0x000004, "Wrong alignment on PhysInstancedStaticMeshComponent_TryCollideWithWorld");
static_assert(sizeof(PhysInstancedStaticMeshComponent_TryCollideWithWorld) == 0x000048, "Wrong size on PhysInstancedStaticMeshComponent_TryCollideWithWorld");
static_assert(offsetof(PhysInstancedStaticMeshComponent_TryCollideWithWorld, LastCentroid) == 0x000000, "Member 'PhysInstancedStaticMeshComponent_TryCollideWithWorld::LastCentroid' has a wrong offset!");
static_assert(offsetof(PhysInstancedStaticMeshComponent_TryCollideWithWorld, CurrCentroid) == 0x00000C, "Member 'PhysInstancedStaticMeshComponent_TryCollideWithWorld::CurrCentroid' has a wrong offset!");
static_assert(offsetof(PhysInstancedStaticMeshComponent_TryCollideWithWorld, CylinderVector) == 0x000018, "Member 'PhysInstancedStaticMeshComponent_TryCollideWithWorld::CylinderVector' has a wrong offset!");
static_assert(offsetof(PhysInstancedStaticMeshComponent_TryCollideWithWorld, CapsuleRadius) == 0x000024, "Member 'PhysInstancedStaticMeshComponent_TryCollideWithWorld::CapsuleRadius' has a wrong offset!");
static_assert(offsetof(PhysInstancedStaticMeshComponent_TryCollideWithWorld, OutCollisionPoint) == 0x000028, "Member 'PhysInstancedStaticMeshComponent_TryCollideWithWorld::OutCollisionPoint' has a wrong offset!");
static_assert(offsetof(PhysInstancedStaticMeshComponent_TryCollideWithWorld, OutCollisionNormal) == 0x000034, "Member 'PhysInstancedStaticMeshComponent_TryCollideWithWorld::OutCollisionNormal' has a wrong offset!");
static_assert(offsetof(PhysInstancedStaticMeshComponent_TryCollideWithWorld, OutPenetrationDepth) == 0x000040, "Member 'PhysInstancedStaticMeshComponent_TryCollideWithWorld::OutPenetrationDepth' has a wrong offset!");
static_assert(offsetof(PhysInstancedStaticMeshComponent_TryCollideWithWorld, ReturnValue) == 0x000044, "Member 'PhysInstancedStaticMeshComponent_TryCollideWithWorld::ReturnValue' has a wrong offset!");

}

