#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: WIDGET_SecurityTimer

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "SlateCore_structs.hpp"


namespace SDK::Params
{

// Function WIDGET_SecurityTimer.WIDGET_SecurityTimer_C.ExecuteUbergraph_WIDGET_SecurityTimer
// 0x0040 (0x0040 - 0x0000)
struct WIDGET_SecurityTimer_C_ExecuteUbergraph_WIDGET_SecurityTimer final
{
public:
	int32                                         EntryPoint;                                        // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FGeometry                              K2Node_Event_MyGeometry;                           // 0x0004(0x0038)(IsPlainOldData, NoDestructor)
	float                                         K2Node_Event_InDeltaTime;                          // 0x003C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(WIDGET_SecurityTimer_C_ExecuteUbergraph_WIDGET_SecurityTimer) == 0x000004, "Wrong alignment on WIDGET_SecurityTimer_C_ExecuteUbergraph_WIDGET_SecurityTimer");
static_assert(sizeof(WIDGET_SecurityTimer_C_ExecuteUbergraph_WIDGET_SecurityTimer) == 0x000040, "Wrong size on WIDGET_SecurityTimer_C_ExecuteUbergraph_WIDGET_SecurityTimer");
static_assert(offsetof(WIDGET_SecurityTimer_C_ExecuteUbergraph_WIDGET_SecurityTimer, EntryPoint) == 0x000000, "Member 'WIDGET_SecurityTimer_C_ExecuteUbergraph_WIDGET_SecurityTimer::EntryPoint' has a wrong offset!");
static_assert(offsetof(WIDGET_SecurityTimer_C_ExecuteUbergraph_WIDGET_SecurityTimer, K2Node_Event_MyGeometry) == 0x000004, "Member 'WIDGET_SecurityTimer_C_ExecuteUbergraph_WIDGET_SecurityTimer::K2Node_Event_MyGeometry' has a wrong offset!");
static_assert(offsetof(WIDGET_SecurityTimer_C_ExecuteUbergraph_WIDGET_SecurityTimer, K2Node_Event_InDeltaTime) == 0x00003C, "Member 'WIDGET_SecurityTimer_C_ExecuteUbergraph_WIDGET_SecurityTimer::K2Node_Event_InDeltaTime' has a wrong offset!");

// Function WIDGET_SecurityTimer.WIDGET_SecurityTimer_C.Tick
// 0x003C (0x003C - 0x0000)
struct WIDGET_SecurityTimer_C_Tick final
{
public:
	struct FGeometry                              MyGeometry;                                        // 0x0000(0x0038)(BlueprintVisible, BlueprintReadOnly, Parm, IsPlainOldData, NoDestructor)
	float                                         InDeltaTime;                                       // 0x0038(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(WIDGET_SecurityTimer_C_Tick) == 0x000004, "Wrong alignment on WIDGET_SecurityTimer_C_Tick");
static_assert(sizeof(WIDGET_SecurityTimer_C_Tick) == 0x00003C, "Wrong size on WIDGET_SecurityTimer_C_Tick");
static_assert(offsetof(WIDGET_SecurityTimer_C_Tick, MyGeometry) == 0x000000, "Member 'WIDGET_SecurityTimer_C_Tick::MyGeometry' has a wrong offset!");
static_assert(offsetof(WIDGET_SecurityTimer_C_Tick, InDeltaTime) == 0x000038, "Member 'WIDGET_SecurityTimer_C_Tick::InDeltaTime' has a wrong offset!");

// Function WIDGET_SecurityTimer.WIDGET_SecurityTimer_C.SetTimeRemaining
// 0x0170 (0x0170 - 0x0000)
struct WIDGET_SecurityTimer_C_SetTimeRemaining final
{
public:
	float                                         TimeRemaining;                                     // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Multiply_FloatFloat_ReturnValue;          // 0x0004(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_FCeil_ReturnValue;                        // 0x0008(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_FTrunc_ReturnValue;                       // 0x000C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Percent_IntInt_ReturnValue;               // 0x0010(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Divide_IntInt_ReturnValue;                // 0x0014(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FText                                   CallFunc_Conv_IntToText_ReturnValue;               // 0x0018(0x0018)()
	class FText                                   CallFunc_Conv_IntToText_ReturnValue_1;             // 0x0030(0x0018)()
	struct FFormatArgumentData                    K2Node_MakeStruct_FormatArgumentData;              // 0x0048(0x0040)(HasGetValueTypeHash)
	struct FFormatArgumentData                    K2Node_MakeStruct_FormatArgumentData_1;            // 0x0088(0x0040)(HasGetValueTypeHash)
	TArray<struct FFormatArgumentData>            K2Node_MakeArray_Array;                            // 0x00C8(0x0010)(ReferenceParm)
	class FText                                   CallFunc_Format_ReturnValue;                       // 0x00D8(0x0018)()
	class FText                                   CallFunc_Conv_IntToText_ReturnValue_2;             // 0x00F0(0x0018)()
	struct FFormatArgumentData                    K2Node_MakeStruct_FormatArgumentData_2;            // 0x0108(0x0040)(HasGetValueTypeHash)
	TArray<struct FFormatArgumentData>            K2Node_MakeArray_Array_1;                          // 0x0148(0x0010)(ReferenceParm)
	class FText                                   CallFunc_Format_ReturnValue_1;                     // 0x0158(0x0018)()
};
static_assert(alignof(WIDGET_SecurityTimer_C_SetTimeRemaining) == 0x000008, "Wrong alignment on WIDGET_SecurityTimer_C_SetTimeRemaining");
static_assert(sizeof(WIDGET_SecurityTimer_C_SetTimeRemaining) == 0x000170, "Wrong size on WIDGET_SecurityTimer_C_SetTimeRemaining");
static_assert(offsetof(WIDGET_SecurityTimer_C_SetTimeRemaining, TimeRemaining) == 0x000000, "Member 'WIDGET_SecurityTimer_C_SetTimeRemaining::TimeRemaining' has a wrong offset!");
static_assert(offsetof(WIDGET_SecurityTimer_C_SetTimeRemaining, CallFunc_Multiply_FloatFloat_ReturnValue) == 0x000004, "Member 'WIDGET_SecurityTimer_C_SetTimeRemaining::CallFunc_Multiply_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(WIDGET_SecurityTimer_C_SetTimeRemaining, CallFunc_FCeil_ReturnValue) == 0x000008, "Member 'WIDGET_SecurityTimer_C_SetTimeRemaining::CallFunc_FCeil_ReturnValue' has a wrong offset!");
static_assert(offsetof(WIDGET_SecurityTimer_C_SetTimeRemaining, CallFunc_FTrunc_ReturnValue) == 0x00000C, "Member 'WIDGET_SecurityTimer_C_SetTimeRemaining::CallFunc_FTrunc_ReturnValue' has a wrong offset!");
static_assert(offsetof(WIDGET_SecurityTimer_C_SetTimeRemaining, CallFunc_Percent_IntInt_ReturnValue) == 0x000010, "Member 'WIDGET_SecurityTimer_C_SetTimeRemaining::CallFunc_Percent_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(WIDGET_SecurityTimer_C_SetTimeRemaining, CallFunc_Divide_IntInt_ReturnValue) == 0x000014, "Member 'WIDGET_SecurityTimer_C_SetTimeRemaining::CallFunc_Divide_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(WIDGET_SecurityTimer_C_SetTimeRemaining, CallFunc_Conv_IntToText_ReturnValue) == 0x000018, "Member 'WIDGET_SecurityTimer_C_SetTimeRemaining::CallFunc_Conv_IntToText_ReturnValue' has a wrong offset!");
static_assert(offsetof(WIDGET_SecurityTimer_C_SetTimeRemaining, CallFunc_Conv_IntToText_ReturnValue_1) == 0x000030, "Member 'WIDGET_SecurityTimer_C_SetTimeRemaining::CallFunc_Conv_IntToText_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(WIDGET_SecurityTimer_C_SetTimeRemaining, K2Node_MakeStruct_FormatArgumentData) == 0x000048, "Member 'WIDGET_SecurityTimer_C_SetTimeRemaining::K2Node_MakeStruct_FormatArgumentData' has a wrong offset!");
static_assert(offsetof(WIDGET_SecurityTimer_C_SetTimeRemaining, K2Node_MakeStruct_FormatArgumentData_1) == 0x000088, "Member 'WIDGET_SecurityTimer_C_SetTimeRemaining::K2Node_MakeStruct_FormatArgumentData_1' has a wrong offset!");
static_assert(offsetof(WIDGET_SecurityTimer_C_SetTimeRemaining, K2Node_MakeArray_Array) == 0x0000C8, "Member 'WIDGET_SecurityTimer_C_SetTimeRemaining::K2Node_MakeArray_Array' has a wrong offset!");
static_assert(offsetof(WIDGET_SecurityTimer_C_SetTimeRemaining, CallFunc_Format_ReturnValue) == 0x0000D8, "Member 'WIDGET_SecurityTimer_C_SetTimeRemaining::CallFunc_Format_ReturnValue' has a wrong offset!");
static_assert(offsetof(WIDGET_SecurityTimer_C_SetTimeRemaining, CallFunc_Conv_IntToText_ReturnValue_2) == 0x0000F0, "Member 'WIDGET_SecurityTimer_C_SetTimeRemaining::CallFunc_Conv_IntToText_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(WIDGET_SecurityTimer_C_SetTimeRemaining, K2Node_MakeStruct_FormatArgumentData_2) == 0x000108, "Member 'WIDGET_SecurityTimer_C_SetTimeRemaining::K2Node_MakeStruct_FormatArgumentData_2' has a wrong offset!");
static_assert(offsetof(WIDGET_SecurityTimer_C_SetTimeRemaining, K2Node_MakeArray_Array_1) == 0x000148, "Member 'WIDGET_SecurityTimer_C_SetTimeRemaining::K2Node_MakeArray_Array_1' has a wrong offset!");
static_assert(offsetof(WIDGET_SecurityTimer_C_SetTimeRemaining, CallFunc_Format_ReturnValue_1) == 0x000158, "Member 'WIDGET_SecurityTimer_C_SetTimeRemaining::CallFunc_Format_ReturnValue_1' has a wrong offset!");

// Function WIDGET_SecurityTimer.WIDGET_SecurityTimer_C.SetTimerColor
// 0x0070 (0x0070 - 0x0000)
struct WIDGET_SecurityTimer_C_SetTimerColor final
{
public:
	bool                                          SecurityTimeCritical;                              // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FSlateColor                            K2Node_MakeStruct_SlateColor;                      // 0x0008(0x0028)()
	class UMaterialInstanceDynamic*               CallFunc_ConvertToDynamicMaterialInstance_ReturnValue; // 0x0030(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UMaterialInstanceDynamic*               CallFunc_ConvertToDynamicMaterialInstance_ReturnValue_1; // 0x0038(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FSlateColor                            K2Node_MakeStruct_SlateColor_1;                    // 0x0040(0x0028)()
	bool                                          CallFunc_NotEqual_BoolBool_ReturnValue;            // 0x0068(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(WIDGET_SecurityTimer_C_SetTimerColor) == 0x000008, "Wrong alignment on WIDGET_SecurityTimer_C_SetTimerColor");
static_assert(sizeof(WIDGET_SecurityTimer_C_SetTimerColor) == 0x000070, "Wrong size on WIDGET_SecurityTimer_C_SetTimerColor");
static_assert(offsetof(WIDGET_SecurityTimer_C_SetTimerColor, SecurityTimeCritical) == 0x000000, "Member 'WIDGET_SecurityTimer_C_SetTimerColor::SecurityTimeCritical' has a wrong offset!");
static_assert(offsetof(WIDGET_SecurityTimer_C_SetTimerColor, K2Node_MakeStruct_SlateColor) == 0x000008, "Member 'WIDGET_SecurityTimer_C_SetTimerColor::K2Node_MakeStruct_SlateColor' has a wrong offset!");
static_assert(offsetof(WIDGET_SecurityTimer_C_SetTimerColor, CallFunc_ConvertToDynamicMaterialInstance_ReturnValue) == 0x000030, "Member 'WIDGET_SecurityTimer_C_SetTimerColor::CallFunc_ConvertToDynamicMaterialInstance_ReturnValue' has a wrong offset!");
static_assert(offsetof(WIDGET_SecurityTimer_C_SetTimerColor, CallFunc_ConvertToDynamicMaterialInstance_ReturnValue_1) == 0x000038, "Member 'WIDGET_SecurityTimer_C_SetTimerColor::CallFunc_ConvertToDynamicMaterialInstance_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(WIDGET_SecurityTimer_C_SetTimerColor, K2Node_MakeStruct_SlateColor_1) == 0x000040, "Member 'WIDGET_SecurityTimer_C_SetTimerColor::K2Node_MakeStruct_SlateColor_1' has a wrong offset!");
static_assert(offsetof(WIDGET_SecurityTimer_C_SetTimerColor, CallFunc_NotEqual_BoolBool_ReturnValue) == 0x000068, "Member 'WIDGET_SecurityTimer_C_SetTimerColor::CallFunc_NotEqual_BoolBool_ReturnValue' has a wrong offset!");

// Function WIDGET_SecurityTimer.WIDGET_SecurityTimer_C.ShowTimerAlert
// 0x0020 (0x0020 - 0x0000)
struct WIDGET_SecurityTimer_C_ShowTimerAlert final
{
public:
	bool                                          SecurityTimeCritical;                              // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_GetPI_ReturnValue;                        // 0x0004(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_GetTimeSeconds_ReturnValue;               // 0x0008(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Multiply_FloatFloat_ReturnValue;          // 0x000C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Multiply_FloatFloat_ReturnValue_1;        // 0x0010(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Multiply_FloatFloat_ReturnValue_2;        // 0x0014(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Sin_ReturnValue;                          // 0x0018(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_MapRangeClamped_ReturnValue;              // 0x001C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(WIDGET_SecurityTimer_C_ShowTimerAlert) == 0x000004, "Wrong alignment on WIDGET_SecurityTimer_C_ShowTimerAlert");
static_assert(sizeof(WIDGET_SecurityTimer_C_ShowTimerAlert) == 0x000020, "Wrong size on WIDGET_SecurityTimer_C_ShowTimerAlert");
static_assert(offsetof(WIDGET_SecurityTimer_C_ShowTimerAlert, SecurityTimeCritical) == 0x000000, "Member 'WIDGET_SecurityTimer_C_ShowTimerAlert::SecurityTimeCritical' has a wrong offset!");
static_assert(offsetof(WIDGET_SecurityTimer_C_ShowTimerAlert, CallFunc_GetPI_ReturnValue) == 0x000004, "Member 'WIDGET_SecurityTimer_C_ShowTimerAlert::CallFunc_GetPI_ReturnValue' has a wrong offset!");
static_assert(offsetof(WIDGET_SecurityTimer_C_ShowTimerAlert, CallFunc_GetTimeSeconds_ReturnValue) == 0x000008, "Member 'WIDGET_SecurityTimer_C_ShowTimerAlert::CallFunc_GetTimeSeconds_ReturnValue' has a wrong offset!");
static_assert(offsetof(WIDGET_SecurityTimer_C_ShowTimerAlert, CallFunc_Multiply_FloatFloat_ReturnValue) == 0x00000C, "Member 'WIDGET_SecurityTimer_C_ShowTimerAlert::CallFunc_Multiply_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(WIDGET_SecurityTimer_C_ShowTimerAlert, CallFunc_Multiply_FloatFloat_ReturnValue_1) == 0x000010, "Member 'WIDGET_SecurityTimer_C_ShowTimerAlert::CallFunc_Multiply_FloatFloat_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(WIDGET_SecurityTimer_C_ShowTimerAlert, CallFunc_Multiply_FloatFloat_ReturnValue_2) == 0x000014, "Member 'WIDGET_SecurityTimer_C_ShowTimerAlert::CallFunc_Multiply_FloatFloat_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(WIDGET_SecurityTimer_C_ShowTimerAlert, CallFunc_Sin_ReturnValue) == 0x000018, "Member 'WIDGET_SecurityTimer_C_ShowTimerAlert::CallFunc_Sin_ReturnValue' has a wrong offset!");
static_assert(offsetof(WIDGET_SecurityTimer_C_ShowTimerAlert, CallFunc_MapRangeClamped_ReturnValue) == 0x00001C, "Member 'WIDGET_SecurityTimer_C_ShowTimerAlert::CallFunc_MapRangeClamped_ReturnValue' has a wrong offset!");

// Function WIDGET_SecurityTimer.WIDGET_SecurityTimer_C.RollTimerPool
// 0x0018 (0x0018 - 0x0000)
struct WIDGET_SecurityTimer_C_RollTimerPool final
{
public:
	float                                         CallFunc_Divide_FloatFloat_ReturnValue;            // 0x0000(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_GetWorldDeltaSeconds_ReturnValue;         // 0x0004(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Ease_ReturnValue;                         // 0x0008(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Add_FloatFloat_ReturnValue;               // 0x000C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_FClamp_ReturnValue;                       // 0x0010(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_GreaterEqual_FloatFloat_ReturnValue;      // 0x0014(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(WIDGET_SecurityTimer_C_RollTimerPool) == 0x000004, "Wrong alignment on WIDGET_SecurityTimer_C_RollTimerPool");
static_assert(sizeof(WIDGET_SecurityTimer_C_RollTimerPool) == 0x000018, "Wrong size on WIDGET_SecurityTimer_C_RollTimerPool");
static_assert(offsetof(WIDGET_SecurityTimer_C_RollTimerPool, CallFunc_Divide_FloatFloat_ReturnValue) == 0x000000, "Member 'WIDGET_SecurityTimer_C_RollTimerPool::CallFunc_Divide_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(WIDGET_SecurityTimer_C_RollTimerPool, CallFunc_GetWorldDeltaSeconds_ReturnValue) == 0x000004, "Member 'WIDGET_SecurityTimer_C_RollTimerPool::CallFunc_GetWorldDeltaSeconds_ReturnValue' has a wrong offset!");
static_assert(offsetof(WIDGET_SecurityTimer_C_RollTimerPool, CallFunc_Ease_ReturnValue) == 0x000008, "Member 'WIDGET_SecurityTimer_C_RollTimerPool::CallFunc_Ease_ReturnValue' has a wrong offset!");
static_assert(offsetof(WIDGET_SecurityTimer_C_RollTimerPool, CallFunc_Add_FloatFloat_ReturnValue) == 0x00000C, "Member 'WIDGET_SecurityTimer_C_RollTimerPool::CallFunc_Add_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(WIDGET_SecurityTimer_C_RollTimerPool, CallFunc_FClamp_ReturnValue) == 0x000010, "Member 'WIDGET_SecurityTimer_C_RollTimerPool::CallFunc_FClamp_ReturnValue' has a wrong offset!");
static_assert(offsetof(WIDGET_SecurityTimer_C_RollTimerPool, CallFunc_GreaterEqual_FloatFloat_ReturnValue) == 0x000014, "Member 'WIDGET_SecurityTimer_C_RollTimerPool::CallFunc_GreaterEqual_FloatFloat_ReturnValue' has a wrong offset!");

// Function WIDGET_SecurityTimer.WIDGET_SecurityTimer_C.SetNewXtendTimerTarget
// 0x0004 (0x0004 - 0x0000)
struct WIDGET_SecurityTimer_C_SetNewXtendTimerTarget final
{
public:
	float                                         NewTime;                                           // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(WIDGET_SecurityTimer_C_SetNewXtendTimerTarget) == 0x000004, "Wrong alignment on WIDGET_SecurityTimer_C_SetNewXtendTimerTarget");
static_assert(sizeof(WIDGET_SecurityTimer_C_SetNewXtendTimerTarget) == 0x000004, "Wrong size on WIDGET_SecurityTimer_C_SetNewXtendTimerTarget");
static_assert(offsetof(WIDGET_SecurityTimer_C_SetNewXtendTimerTarget, NewTime) == 0x000000, "Member 'WIDGET_SecurityTimer_C_SetNewXtendTimerTarget::NewTime' has a wrong offset!");

// Function WIDGET_SecurityTimer.WIDGET_SecurityTimer_C.UpdateXtendTimerPool
// 0x0070 (0x0070 - 0x0000)
struct WIDGET_SecurityTimer_C_UpdateXtendTimerPool final
{
public:
	float                                         NewXtendPoolValue;                                 // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Round_ReturnValue;                        // 0x0004(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FFormatArgumentData                    K2Node_MakeStruct_FormatArgumentData;              // 0x0008(0x0040)(HasGetValueTypeHash)
	TArray<struct FFormatArgumentData>            K2Node_MakeArray_Array;                            // 0x0048(0x0010)(ReferenceParm)
	class FText                                   CallFunc_Format_ReturnValue;                       // 0x0058(0x0018)()
};
static_assert(alignof(WIDGET_SecurityTimer_C_UpdateXtendTimerPool) == 0x000008, "Wrong alignment on WIDGET_SecurityTimer_C_UpdateXtendTimerPool");
static_assert(sizeof(WIDGET_SecurityTimer_C_UpdateXtendTimerPool) == 0x000070, "Wrong size on WIDGET_SecurityTimer_C_UpdateXtendTimerPool");
static_assert(offsetof(WIDGET_SecurityTimer_C_UpdateXtendTimerPool, NewXtendPoolValue) == 0x000000, "Member 'WIDGET_SecurityTimer_C_UpdateXtendTimerPool::NewXtendPoolValue' has a wrong offset!");
static_assert(offsetof(WIDGET_SecurityTimer_C_UpdateXtendTimerPool, CallFunc_Round_ReturnValue) == 0x000004, "Member 'WIDGET_SecurityTimer_C_UpdateXtendTimerPool::CallFunc_Round_ReturnValue' has a wrong offset!");
static_assert(offsetof(WIDGET_SecurityTimer_C_UpdateXtendTimerPool, K2Node_MakeStruct_FormatArgumentData) == 0x000008, "Member 'WIDGET_SecurityTimer_C_UpdateXtendTimerPool::K2Node_MakeStruct_FormatArgumentData' has a wrong offset!");
static_assert(offsetof(WIDGET_SecurityTimer_C_UpdateXtendTimerPool, K2Node_MakeArray_Array) == 0x000048, "Member 'WIDGET_SecurityTimer_C_UpdateXtendTimerPool::K2Node_MakeArray_Array' has a wrong offset!");
static_assert(offsetof(WIDGET_SecurityTimer_C_UpdateXtendTimerPool, CallFunc_Format_ReturnValue) == 0x000058, "Member 'WIDGET_SecurityTimer_C_UpdateXtendTimerPool::CallFunc_Format_ReturnValue' has a wrong offset!");

// Function WIDGET_SecurityTimer.WIDGET_SecurityTimer_C.ToggleXtendPoolVisibility
// 0x0001 (0x0001 - 0x0000)
struct WIDGET_SecurityTimer_C_ToggleXtendPoolVisibility final
{
public:
	bool                                          Visibile;                                          // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(WIDGET_SecurityTimer_C_ToggleXtendPoolVisibility) == 0x000001, "Wrong alignment on WIDGET_SecurityTimer_C_ToggleXtendPoolVisibility");
static_assert(sizeof(WIDGET_SecurityTimer_C_ToggleXtendPoolVisibility) == 0x000001, "Wrong size on WIDGET_SecurityTimer_C_ToggleXtendPoolVisibility");
static_assert(offsetof(WIDGET_SecurityTimer_C_ToggleXtendPoolVisibility, Visibile) == 0x000000, "Member 'WIDGET_SecurityTimer_C_ToggleXtendPoolVisibility::Visibile' has a wrong offset!");

}

