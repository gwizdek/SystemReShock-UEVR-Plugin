#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: COMP_ActionManager

#include "Basic.hpp"

#include "STRUCT_CharacterActionParams_structs.hpp"
#include "ENUM_ActionPriority_structs.hpp"
#include "Engine_structs.hpp"
#include "Engine_classes.hpp"


namespace SDK
{

// BlueprintGeneratedClass COMP_ActionManager.COMP_ActionManager_C
// 0x0090 (0x0140 - 0x00B0)
class UCOMP_ActionManager_C final : public UActorComponent
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x00B0(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	class UCharacterAction_C*                     CurrentAction;                                     // 0x00B8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, SaveGame, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FSTRUCT_CharacterActionParams          QueuedActionParams;                                // 0x00C0(0x0020)(Edit, BlueprintVisible, DisableEditOnInstance, ContainsInstancedReference, HasGetValueTypeHash)
	bool                                          ActionsDisabled;                                   // 0x00E0(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_E1[0x7];                                       // 0x00E1(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	FMulticastInlineDelegateProperty_             OnActionInterruptible;                             // 0x00E8(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)
	FMulticastInlineDelegateProperty_             OnActionInterrupted;                               // 0x00F8(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)
	FMulticastInlineDelegateProperty_             OnActionStarted;                                   // 0x0108(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)
	FMulticastInlineDelegateProperty_             OnActionEnded;                                     // 0x0118(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)
	FMulticastInlineDelegateProperty_             OnQueuedActionStarted;                             // 0x0128(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)
	bool                                          ActionsPaused;                                     // 0x0138(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)

public:
	void OnActionInterruptible__DelegateSignature(class UCharacterAction_C* Action);
	void OnActionInterrupted__DelegateSignature(class UCharacterAction_C* Action);
	void OnActionStarted__DelegateSignature(class UCharacterAction_C* Action);
	void OnActionEnded__DelegateSignature(class UCharacterAction_C* Action);
	void OnQueuedActionStarted__DelegateSignature(class UCharacterAction_C* Action);
	void ExecuteUbergraph_COMP_ActionManager(int32 EntryPoint);
	void ReceiveTick(float DeltaSeconds);
	void InitializeActionManager();
	void CanBeginAction(class UAnimMontage* Montage, ENUM_ActionPriority Priority, bool* Result);
	void TryBeginAction(class UAnimMontage* Montage, ENUM_ActionPriority Priority, class UCharacterAction_C** Action);
	void TryEndCurrentAction(ENUM_ActionPriority InterruptPriority, float BlendOutTime, bool* Result);
	void ForceBeginAction(class UAnimMontage* Montage, ENUM_ActionPriority Priority, class UCharacterAction_C** Action);
	void ForceEndCurrentAction(class UCharacterAction_C* NewAction, float BlendOutTime);
	void OnActionMontageEnded(class UAnimMontage* Montage, bool Interrupted);
	void TryQueueAction(class UAnimMontage* Montage, ENUM_ActionPriority Priority, float QueueDuration);
	void TryQueueActionWithEvent(class UAnimMontage* Montage, ENUM_ActionPriority Priority, float QueueDuration, const struct FLatentEventHandle& EventHandle);
	void ClearQueuedAction();
	void OnTryBeginQueuedAction(class UCharacterAction_C* PreviousAction);
	void OnMontageDurationEnded();
	void UpdateActiveAction(float DeltaTime);
	void SetActionsPaused(bool State);
	void GetCurrentAction(class UCharacterAction_C** CurrentAction_0);
	void GetCurrentMontage(class UAnimMontage** Result);
	void HasQueuedAction(bool* Result);
	void GetActionProgress(float* Result);
	void IsMontageCurrentlyPlaying(class UAnimMontage* Montage, bool* Result);
	void IsActionQueuedWithMontage(class UAnimMontage* Montage, bool* Result);
	void SetActionsEnabled(bool State);
	void SetActionTickEnabled(bool Enabled);
	void GetQueuedActionMontage(class UAnimMontage** QueuedMontage);
	void GetQueueTimeRemaining(float* Result);
	bool ShouldSaveComponent(struct FStreamingSaveGameComponentParams* Params_0);

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"COMP_ActionManager_C">();
	}
	static class UCOMP_ActionManager_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<UCOMP_ActionManager_C>();
	}
};
static_assert(alignof(UCOMP_ActionManager_C) == 0x000008, "Wrong alignment on UCOMP_ActionManager_C");
static_assert(sizeof(UCOMP_ActionManager_C) == 0x000140, "Wrong size on UCOMP_ActionManager_C");
static_assert(offsetof(UCOMP_ActionManager_C, UberGraphFrame) == 0x0000B0, "Member 'UCOMP_ActionManager_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(UCOMP_ActionManager_C, CurrentAction) == 0x0000B8, "Member 'UCOMP_ActionManager_C::CurrentAction' has a wrong offset!");
static_assert(offsetof(UCOMP_ActionManager_C, QueuedActionParams) == 0x0000C0, "Member 'UCOMP_ActionManager_C::QueuedActionParams' has a wrong offset!");
static_assert(offsetof(UCOMP_ActionManager_C, ActionsDisabled) == 0x0000E0, "Member 'UCOMP_ActionManager_C::ActionsDisabled' has a wrong offset!");
static_assert(offsetof(UCOMP_ActionManager_C, OnActionInterruptible) == 0x0000E8, "Member 'UCOMP_ActionManager_C::OnActionInterruptible' has a wrong offset!");
static_assert(offsetof(UCOMP_ActionManager_C, OnActionInterrupted) == 0x0000F8, "Member 'UCOMP_ActionManager_C::OnActionInterrupted' has a wrong offset!");
static_assert(offsetof(UCOMP_ActionManager_C, OnActionStarted) == 0x000108, "Member 'UCOMP_ActionManager_C::OnActionStarted' has a wrong offset!");
static_assert(offsetof(UCOMP_ActionManager_C, OnActionEnded) == 0x000118, "Member 'UCOMP_ActionManager_C::OnActionEnded' has a wrong offset!");
static_assert(offsetof(UCOMP_ActionManager_C, OnQueuedActionStarted) == 0x000128, "Member 'UCOMP_ActionManager_C::OnQueuedActionStarted' has a wrong offset!");
static_assert(offsetof(UCOMP_ActionManager_C, ActionsPaused) == 0x000138, "Member 'UCOMP_ActionManager_C::ActionsPaused' has a wrong offset!");

}

