#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: AttributeSystem

#include "Basic.hpp"

#include "AttributeSystem_structs.hpp"
#include "CoreGame_structs.hpp"


namespace SDK::Params
{

// Function AttributeSystem.AttribHandler.ApplyMod
// 0x00B0 (0x00B0 - 0x0000)
struct AttribHandler_ApplyMod final
{
public:
	class AActor*                                 SourceActor;                                       // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FAttribModApplyData                    Data;                                              // 0x0008(0x00A0)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	class UAttribMod*                             ReturnValue;                                       // 0x00A8(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AttribHandler_ApplyMod) == 0x000008, "Wrong alignment on AttribHandler_ApplyMod");
static_assert(sizeof(AttribHandler_ApplyMod) == 0x0000B0, "Wrong size on AttribHandler_ApplyMod");
static_assert(offsetof(AttribHandler_ApplyMod, SourceActor) == 0x000000, "Member 'AttribHandler_ApplyMod::SourceActor' has a wrong offset!");
static_assert(offsetof(AttribHandler_ApplyMod, Data) == 0x000008, "Member 'AttribHandler_ApplyMod::Data' has a wrong offset!");
static_assert(offsetof(AttribHandler_ApplyMod, ReturnValue) == 0x0000A8, "Member 'AttribHandler_ApplyMod::ReturnValue' has a wrong offset!");

// Function AttributeSystem.AttribHandler.ApplyMods
// 0x0028 (0x0028 - 0x0000)
struct AttribHandler_ApplyMods final
{
public:
	class AActor*                                 SourceActor;                                       // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FAttribModApplyData>            DataArray;                                         // 0x0008(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
	TArray<class UAttribMod*>                     ReturnValue;                                       // 0x0018(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(AttribHandler_ApplyMods) == 0x000008, "Wrong alignment on AttribHandler_ApplyMods");
static_assert(sizeof(AttribHandler_ApplyMods) == 0x000028, "Wrong size on AttribHandler_ApplyMods");
static_assert(offsetof(AttribHandler_ApplyMods, SourceActor) == 0x000000, "Member 'AttribHandler_ApplyMods::SourceActor' has a wrong offset!");
static_assert(offsetof(AttribHandler_ApplyMods, DataArray) == 0x000008, "Member 'AttribHandler_ApplyMods::DataArray' has a wrong offset!");
static_assert(offsetof(AttribHandler_ApplyMods, ReturnValue) == 0x000018, "Member 'AttribHandler_ApplyMods::ReturnValue' has a wrong offset!");

// Function AttributeSystem.AttribHandler.ExpireMod
// 0x0010 (0x0010 - 0x0000)
struct AttribHandler_ExpireMod final
{
public:
	class UAttribMod*                             Mod;                                               // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(AttribHandler_ExpireMod) == 0x000008, "Wrong alignment on AttribHandler_ExpireMod");
static_assert(sizeof(AttribHandler_ExpireMod) == 0x000010, "Wrong size on AttribHandler_ExpireMod");
static_assert(offsetof(AttribHandler_ExpireMod, Mod) == 0x000000, "Member 'AttribHandler_ExpireMod::Mod' has a wrong offset!");
static_assert(offsetof(AttribHandler_ExpireMod, ReturnValue) == 0x000008, "Member 'AttribHandler_ExpireMod::ReturnValue' has a wrong offset!");

// Function AttributeSystem.AttribHandler.ExpireModsFromSourceActor
// 0x0010 (0x0010 - 0x0000)
struct AttribHandler_ExpireModsFromSourceActor final
{
public:
	class AActor*                                 SourceActor;                                       // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ReturnValue;                                       // 0x0008(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(AttribHandler_ExpireModsFromSourceActor) == 0x000008, "Wrong alignment on AttribHandler_ExpireModsFromSourceActor");
static_assert(sizeof(AttribHandler_ExpireModsFromSourceActor) == 0x000010, "Wrong size on AttribHandler_ExpireModsFromSourceActor");
static_assert(offsetof(AttribHandler_ExpireModsFromSourceActor, SourceActor) == 0x000000, "Member 'AttribHandler_ExpireModsFromSourceActor::SourceActor' has a wrong offset!");
static_assert(offsetof(AttribHandler_ExpireModsFromSourceActor, ReturnValue) == 0x000008, "Member 'AttribHandler_ExpireModsFromSourceActor::ReturnValue' has a wrong offset!");

// Function AttributeSystem.AttribHandler.ExpireModsWithCategories
// 0x0018 (0x0018 - 0x0000)
struct AttribHandler_ExpireModsWithCategories final
{
public:
	TArray<class FName>                           Categories;                                        // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
	int32                                         ReturnValue;                                       // 0x0010(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(AttribHandler_ExpireModsWithCategories) == 0x000008, "Wrong alignment on AttribHandler_ExpireModsWithCategories");
static_assert(sizeof(AttribHandler_ExpireModsWithCategories) == 0x000018, "Wrong size on AttribHandler_ExpireModsWithCategories");
static_assert(offsetof(AttribHandler_ExpireModsWithCategories, Categories) == 0x000000, "Member 'AttribHandler_ExpireModsWithCategories::Categories' has a wrong offset!");
static_assert(offsetof(AttribHandler_ExpireModsWithCategories, ReturnValue) == 0x000010, "Member 'AttribHandler_ExpireModsWithCategories::ReturnValue' has a wrong offset!");

// Function AttributeSystem.AttribHandler.ExpireModsWithCategory
// 0x000C (0x000C - 0x0000)
struct AttribHandler_ExpireModsWithCategory final
{
public:
	class FName                                   Category;                                          // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ReturnValue;                                       // 0x0008(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AttribHandler_ExpireModsWithCategory) == 0x000004, "Wrong alignment on AttribHandler_ExpireModsWithCategory");
static_assert(sizeof(AttribHandler_ExpireModsWithCategory) == 0x00000C, "Wrong size on AttribHandler_ExpireModsWithCategory");
static_assert(offsetof(AttribHandler_ExpireModsWithCategory, Category) == 0x000000, "Member 'AttribHandler_ExpireModsWithCategory::Category' has a wrong offset!");
static_assert(offsetof(AttribHandler_ExpireModsWithCategory, ReturnValue) == 0x000008, "Member 'AttribHandler_ExpireModsWithCategory::ReturnValue' has a wrong offset!");

// Function AttributeSystem.AttribHandler.GetAttribInstance
// 0x0010 (0x0010 - 0x0000)
struct AttribHandler_GetAttribInstance final
{
public:
	class UAttributeDef*                          Attrib;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UAttribInstance*                        ReturnValue;                                       // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AttribHandler_GetAttribInstance) == 0x000008, "Wrong alignment on AttribHandler_GetAttribInstance");
static_assert(sizeof(AttribHandler_GetAttribInstance) == 0x000010, "Wrong size on AttribHandler_GetAttribInstance");
static_assert(offsetof(AttribHandler_GetAttribInstance, Attrib) == 0x000000, "Member 'AttribHandler_GetAttribInstance::Attrib' has a wrong offset!");
static_assert(offsetof(AttribHandler_GetAttribInstance, ReturnValue) == 0x000008, "Member 'AttribHandler_GetAttribInstance::ReturnValue' has a wrong offset!");

// Function AttributeSystem.AttribHandler.GetAttribValue
// 0x0010 (0x0010 - 0x0000)
struct AttribHandler_GetAttribValue final
{
public:
	class UAttributeDef*                          Attrib;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ReturnValue;                                       // 0x0008(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(AttribHandler_GetAttribValue) == 0x000008, "Wrong alignment on AttribHandler_GetAttribValue");
static_assert(sizeof(AttribHandler_GetAttribValue) == 0x000010, "Wrong size on AttribHandler_GetAttribValue");
static_assert(offsetof(AttribHandler_GetAttribValue, Attrib) == 0x000000, "Member 'AttribHandler_GetAttribValue::Attrib' has a wrong offset!");
static_assert(offsetof(AttribHandler_GetAttribValue, ReturnValue) == 0x000008, "Member 'AttribHandler_GetAttribValue::ReturnValue' has a wrong offset!");

// Function AttributeSystem.AttribHandler.GetOrCreateAttribInstance
// 0x0010 (0x0010 - 0x0000)
struct AttribHandler_GetOrCreateAttribInstance final
{
public:
	class UAttributeDef*                          Attrib;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UAttribInstance*                        ReturnValue;                                       // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AttribHandler_GetOrCreateAttribInstance) == 0x000008, "Wrong alignment on AttribHandler_GetOrCreateAttribInstance");
static_assert(sizeof(AttribHandler_GetOrCreateAttribInstance) == 0x000010, "Wrong size on AttribHandler_GetOrCreateAttribInstance");
static_assert(offsetof(AttribHandler_GetOrCreateAttribInstance, Attrib) == 0x000000, "Member 'AttribHandler_GetOrCreateAttribInstance::Attrib' has a wrong offset!");
static_assert(offsetof(AttribHandler_GetOrCreateAttribInstance, ReturnValue) == 0x000008, "Member 'AttribHandler_GetOrCreateAttribInstance::ReturnValue' has a wrong offset!");

// Function AttributeSystem.AttribHandler.InitializeDefaultAttribs
// 0x0020 (0x0020 - 0x0000)
struct AttribHandler_InitializeDefaultAttribs final
{
public:
	TArray<struct FDefaultAttribute>              Attribs;                                           // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
	TArray<struct FEnumHandle>                    TierEnums;                                         // 0x0010(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(AttribHandler_InitializeDefaultAttribs) == 0x000008, "Wrong alignment on AttribHandler_InitializeDefaultAttribs");
static_assert(sizeof(AttribHandler_InitializeDefaultAttribs) == 0x000020, "Wrong size on AttribHandler_InitializeDefaultAttribs");
static_assert(offsetof(AttribHandler_InitializeDefaultAttribs, Attribs) == 0x000000, "Member 'AttribHandler_InitializeDefaultAttribs::Attribs' has a wrong offset!");
static_assert(offsetof(AttribHandler_InitializeDefaultAttribs, TierEnums) == 0x000010, "Member 'AttribHandler_InitializeDefaultAttribs::TierEnums' has a wrong offset!");

// Function AttributeSystem.AttribHandler.InitializeDefaultAttribsWithOverrides
// 0x0030 (0x0030 - 0x0000)
struct AttribHandler_InitializeDefaultAttribsWithOverrides final
{
public:
	TArray<struct FDefaultAttribute>              Attribs;                                           // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
	TArray<struct FDefaultAttribute>              AttribOverrides;                                   // 0x0010(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
	TArray<struct FEnumHandle>                    TierEnums;                                         // 0x0020(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(AttribHandler_InitializeDefaultAttribsWithOverrides) == 0x000008, "Wrong alignment on AttribHandler_InitializeDefaultAttribsWithOverrides");
static_assert(sizeof(AttribHandler_InitializeDefaultAttribsWithOverrides) == 0x000030, "Wrong size on AttribHandler_InitializeDefaultAttribsWithOverrides");
static_assert(offsetof(AttribHandler_InitializeDefaultAttribsWithOverrides, Attribs) == 0x000000, "Member 'AttribHandler_InitializeDefaultAttribsWithOverrides::Attribs' has a wrong offset!");
static_assert(offsetof(AttribHandler_InitializeDefaultAttribsWithOverrides, AttribOverrides) == 0x000010, "Member 'AttribHandler_InitializeDefaultAttribsWithOverrides::AttribOverrides' has a wrong offset!");
static_assert(offsetof(AttribHandler_InitializeDefaultAttribsWithOverrides, TierEnums) == 0x000020, "Member 'AttribHandler_InitializeDefaultAttribsWithOverrides::TierEnums' has a wrong offset!");

// Function AttributeSystem.AttribHandler.K2_OnGetElapsedPlayTime
// 0x0004 (0x0004 - 0x0000)
struct AttribHandler_K2_OnGetElapsedPlayTime final
{
public:
	float                                         PlayTime;                                          // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AttribHandler_K2_OnGetElapsedPlayTime) == 0x000004, "Wrong alignment on AttribHandler_K2_OnGetElapsedPlayTime");
static_assert(sizeof(AttribHandler_K2_OnGetElapsedPlayTime) == 0x000004, "Wrong size on AttribHandler_K2_OnGetElapsedPlayTime");
static_assert(offsetof(AttribHandler_K2_OnGetElapsedPlayTime, PlayTime) == 0x000000, "Member 'AttribHandler_K2_OnGetElapsedPlayTime::PlayTime' has a wrong offset!");

// Function AttributeSystem.AttribHandler.GetActiveModsWithCategories
// 0x0028 (0x0028 - 0x0000)
struct AttribHandler_GetActiveModsWithCategories final
{
public:
	TArray<class FName>                           Categories;                                        // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
	bool                                          bExcludeExpiringMods;                              // 0x0010(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class UAttribMod*>                     ReturnValue;                                       // 0x0018(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(AttribHandler_GetActiveModsWithCategories) == 0x000008, "Wrong alignment on AttribHandler_GetActiveModsWithCategories");
static_assert(sizeof(AttribHandler_GetActiveModsWithCategories) == 0x000028, "Wrong size on AttribHandler_GetActiveModsWithCategories");
static_assert(offsetof(AttribHandler_GetActiveModsWithCategories, Categories) == 0x000000, "Member 'AttribHandler_GetActiveModsWithCategories::Categories' has a wrong offset!");
static_assert(offsetof(AttribHandler_GetActiveModsWithCategories, bExcludeExpiringMods) == 0x000010, "Member 'AttribHandler_GetActiveModsWithCategories::bExcludeExpiringMods' has a wrong offset!");
static_assert(offsetof(AttribHandler_GetActiveModsWithCategories, ReturnValue) == 0x000018, "Member 'AttribHandler_GetActiveModsWithCategories::ReturnValue' has a wrong offset!");

// Function AttributeSystem.AttribHandler.GetActiveModWithCategory
// 0x0020 (0x0020 - 0x0000)
struct AttribHandler_GetActiveModWithCategory final
{
public:
	class FName                                   Category;                                          // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 SourceActor;                                       // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bExcludeExpiringMods;                              // 0x0010(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UAttribMod*                             ReturnValue;                                       // 0x0018(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AttribHandler_GetActiveModWithCategory) == 0x000008, "Wrong alignment on AttribHandler_GetActiveModWithCategory");
static_assert(sizeof(AttribHandler_GetActiveModWithCategory) == 0x000020, "Wrong size on AttribHandler_GetActiveModWithCategory");
static_assert(offsetof(AttribHandler_GetActiveModWithCategory, Category) == 0x000000, "Member 'AttribHandler_GetActiveModWithCategory::Category' has a wrong offset!");
static_assert(offsetof(AttribHandler_GetActiveModWithCategory, SourceActor) == 0x000008, "Member 'AttribHandler_GetActiveModWithCategory::SourceActor' has a wrong offset!");
static_assert(offsetof(AttribHandler_GetActiveModWithCategory, bExcludeExpiringMods) == 0x000010, "Member 'AttribHandler_GetActiveModWithCategory::bExcludeExpiringMods' has a wrong offset!");
static_assert(offsetof(AttribHandler_GetActiveModWithCategory, ReturnValue) == 0x000018, "Member 'AttribHandler_GetActiveModWithCategory::ReturnValue' has a wrong offset!");

// Function AttributeSystem.AttribHandler.GetOwner
// 0x0008 (0x0008 - 0x0000)
struct AttribHandler_GetOwner final
{
public:
	class AActor*                                 ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AttribHandler_GetOwner) == 0x000008, "Wrong alignment on AttribHandler_GetOwner");
static_assert(sizeof(AttribHandler_GetOwner) == 0x000008, "Wrong size on AttribHandler_GetOwner");
static_assert(offsetof(AttribHandler_GetOwner, ReturnValue) == 0x000000, "Member 'AttribHandler_GetOwner::ReturnValue' has a wrong offset!");

// Function AttributeSystem.AttribHandler.HasActiveModWithCategory
// 0x000C (0x000C - 0x0000)
struct AttribHandler_HasActiveModWithCategory final
{
public:
	class FName                                   Category;                                          // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bExcludeExpiringMods;                              // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0009(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_A[0x2];                                        // 0x000A(0x0002)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(AttribHandler_HasActiveModWithCategory) == 0x000004, "Wrong alignment on AttribHandler_HasActiveModWithCategory");
static_assert(sizeof(AttribHandler_HasActiveModWithCategory) == 0x00000C, "Wrong size on AttribHandler_HasActiveModWithCategory");
static_assert(offsetof(AttribHandler_HasActiveModWithCategory, Category) == 0x000000, "Member 'AttribHandler_HasActiveModWithCategory::Category' has a wrong offset!");
static_assert(offsetof(AttribHandler_HasActiveModWithCategory, bExcludeExpiringMods) == 0x000008, "Member 'AttribHandler_HasActiveModWithCategory::bExcludeExpiringMods' has a wrong offset!");
static_assert(offsetof(AttribHandler_HasActiveModWithCategory, ReturnValue) == 0x000009, "Member 'AttribHandler_HasActiveModWithCategory::ReturnValue' has a wrong offset!");

// Function AttributeSystem.AttribInstance.ExpireModsFromSourceActor
// 0x0010 (0x0010 - 0x0000)
struct AttribInstance_ExpireModsFromSourceActor final
{
public:
	class AActor*                                 SourceActor;                                       // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ReturnValue;                                       // 0x0008(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(AttribInstance_ExpireModsFromSourceActor) == 0x000008, "Wrong alignment on AttribInstance_ExpireModsFromSourceActor");
static_assert(sizeof(AttribInstance_ExpireModsFromSourceActor) == 0x000010, "Wrong size on AttribInstance_ExpireModsFromSourceActor");
static_assert(offsetof(AttribInstance_ExpireModsFromSourceActor, SourceActor) == 0x000000, "Member 'AttribInstance_ExpireModsFromSourceActor::SourceActor' has a wrong offset!");
static_assert(offsetof(AttribInstance_ExpireModsFromSourceActor, ReturnValue) == 0x000008, "Member 'AttribInstance_ExpireModsFromSourceActor::ReturnValue' has a wrong offset!");

// Function AttributeSystem.AttribInstance.ExpireModsMatchingCategory
// 0x000C (0x000C - 0x0000)
struct AttribInstance_ExpireModsMatchingCategory final
{
public:
	class FName                                   Category;                                          // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ReturnValue;                                       // 0x0008(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AttribInstance_ExpireModsMatchingCategory) == 0x000004, "Wrong alignment on AttribInstance_ExpireModsMatchingCategory");
static_assert(sizeof(AttribInstance_ExpireModsMatchingCategory) == 0x00000C, "Wrong size on AttribInstance_ExpireModsMatchingCategory");
static_assert(offsetof(AttribInstance_ExpireModsMatchingCategory, Category) == 0x000000, "Member 'AttribInstance_ExpireModsMatchingCategory::Category' has a wrong offset!");
static_assert(offsetof(AttribInstance_ExpireModsMatchingCategory, ReturnValue) == 0x000008, "Member 'AttribInstance_ExpireModsMatchingCategory::ReturnValue' has a wrong offset!");

// Function AttributeSystem.AttribInstance.ExpireModsWithCategories
// 0x0018 (0x0018 - 0x0000)
struct AttribInstance_ExpireModsWithCategories final
{
public:
	TArray<class FName>                           Categories;                                        // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
	int32                                         ReturnValue;                                       // 0x0010(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(AttribInstance_ExpireModsWithCategories) == 0x000008, "Wrong alignment on AttribInstance_ExpireModsWithCategories");
static_assert(sizeof(AttribInstance_ExpireModsWithCategories) == 0x000018, "Wrong size on AttribInstance_ExpireModsWithCategories");
static_assert(offsetof(AttribInstance_ExpireModsWithCategories, Categories) == 0x000000, "Member 'AttribInstance_ExpireModsWithCategories::Categories' has a wrong offset!");
static_assert(offsetof(AttribInstance_ExpireModsWithCategories, ReturnValue) == 0x000010, "Member 'AttribInstance_ExpireModsWithCategories::ReturnValue' has a wrong offset!");

// Function AttributeSystem.AttribInstance.SetBaseValue
// 0x000C (0x000C - 0x0000)
struct AttribInstance_SetBaseValue final
{
public:
	float                                         Value;                                             // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FAttribModResult                       ReturnValue;                                       // 0x0004(0x0005)(Parm, OutParm, ReturnParm, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(AttribInstance_SetBaseValue) == 0x000004, "Wrong alignment on AttribInstance_SetBaseValue");
static_assert(sizeof(AttribInstance_SetBaseValue) == 0x00000C, "Wrong size on AttribInstance_SetBaseValue");
static_assert(offsetof(AttribInstance_SetBaseValue, Value) == 0x000000, "Member 'AttribInstance_SetBaseValue::Value' has a wrong offset!");
static_assert(offsetof(AttribInstance_SetBaseValue, ReturnValue) == 0x000004, "Member 'AttribInstance_SetBaseValue::ReturnValue' has a wrong offset!");

// Function AttributeSystem.AttribInstance.SetLocked
// 0x0001 (0x0001 - 0x0000)
struct AttribInstance_SetLocked final
{
public:
	bool                                          bState;                                            // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AttribInstance_SetLocked) == 0x000001, "Wrong alignment on AttribInstance_SetLocked");
static_assert(sizeof(AttribInstance_SetLocked) == 0x000001, "Wrong size on AttribInstance_SetLocked");
static_assert(offsetof(AttribInstance_SetLocked, bState) == 0x000000, "Member 'AttribInstance_SetLocked::bState' has a wrong offset!");

// Function AttributeSystem.AttribInstance.GetActiveModsWithApplyType
// 0x0018 (0x0018 - 0x0000)
struct AttribInstance_GetActiveModsWithApplyType final
{
public:
	EModApplyType                                 ApplyType;                                         // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class UAttribMod*>                     ReturnValue;                                       // 0x0008(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(AttribInstance_GetActiveModsWithApplyType) == 0x000008, "Wrong alignment on AttribInstance_GetActiveModsWithApplyType");
static_assert(sizeof(AttribInstance_GetActiveModsWithApplyType) == 0x000018, "Wrong size on AttribInstance_GetActiveModsWithApplyType");
static_assert(offsetof(AttribInstance_GetActiveModsWithApplyType, ApplyType) == 0x000000, "Member 'AttribInstance_GetActiveModsWithApplyType::ApplyType' has a wrong offset!");
static_assert(offsetof(AttribInstance_GetActiveModsWithApplyType, ReturnValue) == 0x000008, "Member 'AttribInstance_GetActiveModsWithApplyType::ReturnValue' has a wrong offset!");

// Function AttributeSystem.AttribInstance.GetActiveModsWithCategories
// 0x0028 (0x0028 - 0x0000)
struct AttribInstance_GetActiveModsWithCategories final
{
public:
	TArray<class FName>                           Categories;                                        // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
	bool                                          bExcludeExpiringMods;                              // 0x0010(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class UAttribMod*>                     ReturnValue;                                       // 0x0018(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(AttribInstance_GetActiveModsWithCategories) == 0x000008, "Wrong alignment on AttribInstance_GetActiveModsWithCategories");
static_assert(sizeof(AttribInstance_GetActiveModsWithCategories) == 0x000028, "Wrong size on AttribInstance_GetActiveModsWithCategories");
static_assert(offsetof(AttribInstance_GetActiveModsWithCategories, Categories) == 0x000000, "Member 'AttribInstance_GetActiveModsWithCategories::Categories' has a wrong offset!");
static_assert(offsetof(AttribInstance_GetActiveModsWithCategories, bExcludeExpiringMods) == 0x000010, "Member 'AttribInstance_GetActiveModsWithCategories::bExcludeExpiringMods' has a wrong offset!");
static_assert(offsetof(AttribInstance_GetActiveModsWithCategories, ReturnValue) == 0x000018, "Member 'AttribInstance_GetActiveModsWithCategories::ReturnValue' has a wrong offset!");

// Function AttributeSystem.AttribInstance.GetActiveModWithCategory
// 0x0020 (0x0020 - 0x0000)
struct AttribInstance_GetActiveModWithCategory final
{
public:
	class FName                                   Category;                                          // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 SourceActor;                                       // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bExcludeExpiringMods;                              // 0x0010(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UAttribMod*                             ReturnValue;                                       // 0x0018(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AttribInstance_GetActiveModWithCategory) == 0x000008, "Wrong alignment on AttribInstance_GetActiveModWithCategory");
static_assert(sizeof(AttribInstance_GetActiveModWithCategory) == 0x000020, "Wrong size on AttribInstance_GetActiveModWithCategory");
static_assert(offsetof(AttribInstance_GetActiveModWithCategory, Category) == 0x000000, "Member 'AttribInstance_GetActiveModWithCategory::Category' has a wrong offset!");
static_assert(offsetof(AttribInstance_GetActiveModWithCategory, SourceActor) == 0x000008, "Member 'AttribInstance_GetActiveModWithCategory::SourceActor' has a wrong offset!");
static_assert(offsetof(AttribInstance_GetActiveModWithCategory, bExcludeExpiringMods) == 0x000010, "Member 'AttribInstance_GetActiveModWithCategory::bExcludeExpiringMods' has a wrong offset!");
static_assert(offsetof(AttribInstance_GetActiveModWithCategory, ReturnValue) == 0x000018, "Member 'AttribInstance_GetActiveModWithCategory::ReturnValue' has a wrong offset!");

// Function AttributeSystem.AttribInstance.GetAddBonusValue
// 0x0004 (0x0004 - 0x0000)
struct AttribInstance_GetAddBonusValue final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AttribInstance_GetAddBonusValue) == 0x000004, "Wrong alignment on AttribInstance_GetAddBonusValue");
static_assert(sizeof(AttribInstance_GetAddBonusValue) == 0x000004, "Wrong size on AttribInstance_GetAddBonusValue");
static_assert(offsetof(AttribInstance_GetAddBonusValue, ReturnValue) == 0x000000, "Member 'AttribInstance_GetAddBonusValue::ReturnValue' has a wrong offset!");

// Function AttributeSystem.AttribInstance.GetAttrib
// 0x0008 (0x0008 - 0x0000)
struct AttribInstance_GetAttrib final
{
public:
	class UAttributeDef*                          ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AttribInstance_GetAttrib) == 0x000008, "Wrong alignment on AttribInstance_GetAttrib");
static_assert(sizeof(AttribInstance_GetAttrib) == 0x000008, "Wrong size on AttribInstance_GetAttrib");
static_assert(offsetof(AttribInstance_GetAttrib, ReturnValue) == 0x000000, "Member 'AttribInstance_GetAttrib::ReturnValue' has a wrong offset!");

// Function AttributeSystem.AttribInstance.GetAttribHandler
// 0x0008 (0x0008 - 0x0000)
struct AttribInstance_GetAttribHandler final
{
public:
	class UAttribHandler*                         ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AttribInstance_GetAttribHandler) == 0x000008, "Wrong alignment on AttribInstance_GetAttribHandler");
static_assert(sizeof(AttribInstance_GetAttribHandler) == 0x000008, "Wrong size on AttribInstance_GetAttribHandler");
static_assert(offsetof(AttribInstance_GetAttribHandler, ReturnValue) == 0x000000, "Member 'AttribInstance_GetAttribHandler::ReturnValue' has a wrong offset!");

// Function AttributeSystem.AttribInstance.GetBaseValue
// 0x0004 (0x0004 - 0x0000)
struct AttribInstance_GetBaseValue final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AttribInstance_GetBaseValue) == 0x000004, "Wrong alignment on AttribInstance_GetBaseValue");
static_assert(sizeof(AttribInstance_GetBaseValue) == 0x000004, "Wrong size on AttribInstance_GetBaseValue");
static_assert(offsetof(AttribInstance_GetBaseValue, ReturnValue) == 0x000000, "Member 'AttribInstance_GetBaseValue::ReturnValue' has a wrong offset!");

// Function AttributeSystem.AttribInstance.GetMaxAttribInstance
// 0x0008 (0x0008 - 0x0000)
struct AttribInstance_GetMaxAttribInstance final
{
public:
	class UAttribInstance*                        ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AttribInstance_GetMaxAttribInstance) == 0x000008, "Wrong alignment on AttribInstance_GetMaxAttribInstance");
static_assert(sizeof(AttribInstance_GetMaxAttribInstance) == 0x000008, "Wrong size on AttribInstance_GetMaxAttribInstance");
static_assert(offsetof(AttribInstance_GetMaxAttribInstance, ReturnValue) == 0x000000, "Member 'AttribInstance_GetMaxAttribInstance::ReturnValue' has a wrong offset!");

// Function AttributeSystem.AttribInstance.GetMaxValue
// 0x0004 (0x0004 - 0x0000)
struct AttribInstance_GetMaxValue final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AttribInstance_GetMaxValue) == 0x000004, "Wrong alignment on AttribInstance_GetMaxValue");
static_assert(sizeof(AttribInstance_GetMaxValue) == 0x000004, "Wrong size on AttribInstance_GetMaxValue");
static_assert(offsetof(AttribInstance_GetMaxValue, ReturnValue) == 0x000000, "Member 'AttribInstance_GetMaxValue::ReturnValue' has a wrong offset!");

// Function AttributeSystem.AttribInstance.GetMinAttribInstance
// 0x0008 (0x0008 - 0x0000)
struct AttribInstance_GetMinAttribInstance final
{
public:
	class UAttribInstance*                        ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AttribInstance_GetMinAttribInstance) == 0x000008, "Wrong alignment on AttribInstance_GetMinAttribInstance");
static_assert(sizeof(AttribInstance_GetMinAttribInstance) == 0x000008, "Wrong size on AttribInstance_GetMinAttribInstance");
static_assert(offsetof(AttribInstance_GetMinAttribInstance, ReturnValue) == 0x000000, "Member 'AttribInstance_GetMinAttribInstance::ReturnValue' has a wrong offset!");

// Function AttributeSystem.AttribInstance.GetMulBonusValue
// 0x0004 (0x0004 - 0x0000)
struct AttribInstance_GetMulBonusValue final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AttribInstance_GetMulBonusValue) == 0x000004, "Wrong alignment on AttribInstance_GetMulBonusValue");
static_assert(sizeof(AttribInstance_GetMulBonusValue) == 0x000004, "Wrong size on AttribInstance_GetMulBonusValue");
static_assert(offsetof(AttribInstance_GetMulBonusValue, ReturnValue) == 0x000000, "Member 'AttribInstance_GetMulBonusValue::ReturnValue' has a wrong offset!");

// Function AttributeSystem.AttribInstance.GetTimeSinceLastUpdate
// 0x0004 (0x0004 - 0x0000)
struct AttribInstance_GetTimeSinceLastUpdate final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AttribInstance_GetTimeSinceLastUpdate) == 0x000004, "Wrong alignment on AttribInstance_GetTimeSinceLastUpdate");
static_assert(sizeof(AttribInstance_GetTimeSinceLastUpdate) == 0x000004, "Wrong size on AttribInstance_GetTimeSinceLastUpdate");
static_assert(offsetof(AttribInstance_GetTimeSinceLastUpdate, ReturnValue) == 0x000000, "Member 'AttribInstance_GetTimeSinceLastUpdate::ReturnValue' has a wrong offset!");

// Function AttributeSystem.AttribInstance.GetValue
// 0x0004 (0x0004 - 0x0000)
struct AttribInstance_GetValue final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AttribInstance_GetValue) == 0x000004, "Wrong alignment on AttribInstance_GetValue");
static_assert(sizeof(AttribInstance_GetValue) == 0x000004, "Wrong size on AttribInstance_GetValue");
static_assert(offsetof(AttribInstance_GetValue, ReturnValue) == 0x000000, "Member 'AttribInstance_GetValue::ReturnValue' has a wrong offset!");

// Function AttributeSystem.AttribInstance.HasActiveMods
// 0x0001 (0x0001 - 0x0000)
struct AttribInstance_HasActiveMods final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AttribInstance_HasActiveMods) == 0x000001, "Wrong alignment on AttribInstance_HasActiveMods");
static_assert(sizeof(AttribInstance_HasActiveMods) == 0x000001, "Wrong size on AttribInstance_HasActiveMods");
static_assert(offsetof(AttribInstance_HasActiveMods, ReturnValue) == 0x000000, "Member 'AttribInstance_HasActiveMods::ReturnValue' has a wrong offset!");

// Function AttributeSystem.AttribInstance.HasActiveModWithCategory
// 0x000C (0x000C - 0x0000)
struct AttribInstance_HasActiveModWithCategory final
{
public:
	class FName                                   Category;                                          // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bExcludeExpiringMods;                              // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0009(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_A[0x2];                                        // 0x000A(0x0002)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(AttribInstance_HasActiveModWithCategory) == 0x000004, "Wrong alignment on AttribInstance_HasActiveModWithCategory");
static_assert(sizeof(AttribInstance_HasActiveModWithCategory) == 0x00000C, "Wrong size on AttribInstance_HasActiveModWithCategory");
static_assert(offsetof(AttribInstance_HasActiveModWithCategory, Category) == 0x000000, "Member 'AttribInstance_HasActiveModWithCategory::Category' has a wrong offset!");
static_assert(offsetof(AttribInstance_HasActiveModWithCategory, bExcludeExpiringMods) == 0x000008, "Member 'AttribInstance_HasActiveModWithCategory::bExcludeExpiringMods' has a wrong offset!");
static_assert(offsetof(AttribInstance_HasActiveModWithCategory, ReturnValue) == 0x000009, "Member 'AttribInstance_HasActiveModWithCategory::ReturnValue' has a wrong offset!");

// Function AttributeSystem.AttribInstance.IsLocked
// 0x0001 (0x0001 - 0x0000)
struct AttribInstance_IsLocked final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AttribInstance_IsLocked) == 0x000001, "Wrong alignment on AttribInstance_IsLocked");
static_assert(sizeof(AttribInstance_IsLocked) == 0x000001, "Wrong size on AttribInstance_IsLocked");
static_assert(offsetof(AttribInstance_IsLocked, ReturnValue) == 0x000000, "Member 'AttribInstance_IsLocked::ReturnValue' has a wrong offset!");

// Function AttributeSystem.AttribManagerComponent.ApplyCompoundMod
// 0x0150 (0x0150 - 0x0000)
struct AttribManagerComponent_ApplyCompoundMod final
{
public:
	class AActor*                                 SourceActor;                                       // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FAttribModApplyData                    Data;                                              // 0x0008(0x00A0)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	struct FAttribModApplyData                    ApplyDataOnExpire;                                 // 0x00A8(0x00A0)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	class UAttribMod*                             ReturnValue;                                       // 0x0148(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AttribManagerComponent_ApplyCompoundMod) == 0x000008, "Wrong alignment on AttribManagerComponent_ApplyCompoundMod");
static_assert(sizeof(AttribManagerComponent_ApplyCompoundMod) == 0x000150, "Wrong size on AttribManagerComponent_ApplyCompoundMod");
static_assert(offsetof(AttribManagerComponent_ApplyCompoundMod, SourceActor) == 0x000000, "Member 'AttribManagerComponent_ApplyCompoundMod::SourceActor' has a wrong offset!");
static_assert(offsetof(AttribManagerComponent_ApplyCompoundMod, Data) == 0x000008, "Member 'AttribManagerComponent_ApplyCompoundMod::Data' has a wrong offset!");
static_assert(offsetof(AttribManagerComponent_ApplyCompoundMod, ApplyDataOnExpire) == 0x0000A8, "Member 'AttribManagerComponent_ApplyCompoundMod::ApplyDataOnExpire' has a wrong offset!");
static_assert(offsetof(AttribManagerComponent_ApplyCompoundMod, ReturnValue) == 0x000148, "Member 'AttribManagerComponent_ApplyCompoundMod::ReturnValue' has a wrong offset!");

// Function AttributeSystem.AttribManagerComponent.ApplyDamageMod
// 0x00D8 (0x00D8 - 0x0000)
struct AttribManagerComponent_ApplyDamageMod final
{
public:
	class AActor*                                 SourceActor;                                       // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FAttribModApplyData                    Data;                                              // 0x0008(0x00A0)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	struct FAttribDamageInstance                  OutDamageInstance;                                 // 0x00A8(0x0028)(Parm, OutParm, NativeAccessSpecifierPublic)
	class UAttribMod*                             ReturnValue;                                       // 0x00D0(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AttribManagerComponent_ApplyDamageMod) == 0x000008, "Wrong alignment on AttribManagerComponent_ApplyDamageMod");
static_assert(sizeof(AttribManagerComponent_ApplyDamageMod) == 0x0000D8, "Wrong size on AttribManagerComponent_ApplyDamageMod");
static_assert(offsetof(AttribManagerComponent_ApplyDamageMod, SourceActor) == 0x000000, "Member 'AttribManagerComponent_ApplyDamageMod::SourceActor' has a wrong offset!");
static_assert(offsetof(AttribManagerComponent_ApplyDamageMod, Data) == 0x000008, "Member 'AttribManagerComponent_ApplyDamageMod::Data' has a wrong offset!");
static_assert(offsetof(AttribManagerComponent_ApplyDamageMod, OutDamageInstance) == 0x0000A8, "Member 'AttribManagerComponent_ApplyDamageMod::OutDamageInstance' has a wrong offset!");
static_assert(offsetof(AttribManagerComponent_ApplyDamageMod, ReturnValue) == 0x0000D0, "Member 'AttribManagerComponent_ApplyDamageMod::ReturnValue' has a wrong offset!");

// Function AttributeSystem.AttribManagerComponent.ApplyMod
// 0x00B0 (0x00B0 - 0x0000)
struct AttribManagerComponent_ApplyMod final
{
public:
	class AActor*                                 SourceActor;                                       // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FAttribModApplyData                    Data;                                              // 0x0008(0x00A0)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	class UAttribMod*                             ReturnValue;                                       // 0x00A8(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AttribManagerComponent_ApplyMod) == 0x000008, "Wrong alignment on AttribManagerComponent_ApplyMod");
static_assert(sizeof(AttribManagerComponent_ApplyMod) == 0x0000B0, "Wrong size on AttribManagerComponent_ApplyMod");
static_assert(offsetof(AttribManagerComponent_ApplyMod, SourceActor) == 0x000000, "Member 'AttribManagerComponent_ApplyMod::SourceActor' has a wrong offset!");
static_assert(offsetof(AttribManagerComponent_ApplyMod, Data) == 0x000008, "Member 'AttribManagerComponent_ApplyMod::Data' has a wrong offset!");
static_assert(offsetof(AttribManagerComponent_ApplyMod, ReturnValue) == 0x0000A8, "Member 'AttribManagerComponent_ApplyMod::ReturnValue' has a wrong offset!");

// Function AttributeSystem.AttribManagerComponent.ApplyMods
// 0x0028 (0x0028 - 0x0000)
struct AttribManagerComponent_ApplyMods final
{
public:
	class AActor*                                 SourceActor;                                       // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FAttribModApplyData>            DataArray;                                         // 0x0008(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
	TArray<class UAttribMod*>                     ReturnValue;                                       // 0x0018(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(AttribManagerComponent_ApplyMods) == 0x000008, "Wrong alignment on AttribManagerComponent_ApplyMods");
static_assert(sizeof(AttribManagerComponent_ApplyMods) == 0x000028, "Wrong size on AttribManagerComponent_ApplyMods");
static_assert(offsetof(AttribManagerComponent_ApplyMods, SourceActor) == 0x000000, "Member 'AttribManagerComponent_ApplyMods::SourceActor' has a wrong offset!");
static_assert(offsetof(AttribManagerComponent_ApplyMods, DataArray) == 0x000008, "Member 'AttribManagerComponent_ApplyMods::DataArray' has a wrong offset!");
static_assert(offsetof(AttribManagerComponent_ApplyMods, ReturnValue) == 0x000018, "Member 'AttribManagerComponent_ApplyMods::ReturnValue' has a wrong offset!");

// Function AttributeSystem.AttribManagerComponent.BindToAttribValueChanged
// 0x0018 (0x0018 - 0x0000)
struct AttribManagerComponent_BindToAttribValueChanged final
{
public:
	class UAttributeDef*                          Attrib;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TDelegate<void(float CurrValue, float LastValue)> Delegate;                                          // 0x0008(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(AttribManagerComponent_BindToAttribValueChanged) == 0x000008, "Wrong alignment on AttribManagerComponent_BindToAttribValueChanged");
static_assert(sizeof(AttribManagerComponent_BindToAttribValueChanged) == 0x000018, "Wrong size on AttribManagerComponent_BindToAttribValueChanged");
static_assert(offsetof(AttribManagerComponent_BindToAttribValueChanged, Attrib) == 0x000000, "Member 'AttribManagerComponent_BindToAttribValueChanged::Attrib' has a wrong offset!");
static_assert(offsetof(AttribManagerComponent_BindToAttribValueChanged, Delegate) == 0x000008, "Member 'AttribManagerComponent_BindToAttribValueChanged::Delegate' has a wrong offset!");

// Function AttributeSystem.AttribManagerComponent.DestroyAttributeInstance
// 0x0010 (0x0010 - 0x0000)
struct AttribManagerComponent_DestroyAttributeInstance final
{
public:
	class UAttributeDef*                          Attrib;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(AttribManagerComponent_DestroyAttributeInstance) == 0x000008, "Wrong alignment on AttribManagerComponent_DestroyAttributeInstance");
static_assert(sizeof(AttribManagerComponent_DestroyAttributeInstance) == 0x000010, "Wrong size on AttribManagerComponent_DestroyAttributeInstance");
static_assert(offsetof(AttribManagerComponent_DestroyAttributeInstance, Attrib) == 0x000000, "Member 'AttribManagerComponent_DestroyAttributeInstance::Attrib' has a wrong offset!");
static_assert(offsetof(AttribManagerComponent_DestroyAttributeInstance, ReturnValue) == 0x000008, "Member 'AttribManagerComponent_DestroyAttributeInstance::ReturnValue' has a wrong offset!");

// Function AttributeSystem.AttribManagerComponent.DestroyAttributeInstances
// 0x0010 (0x0010 - 0x0000)
struct AttribManagerComponent_DestroyAttributeInstances final
{
public:
	TArray<class UAttributeDef*>                  KeepAttributes;                                    // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(AttribManagerComponent_DestroyAttributeInstances) == 0x000008, "Wrong alignment on AttribManagerComponent_DestroyAttributeInstances");
static_assert(sizeof(AttribManagerComponent_DestroyAttributeInstances) == 0x000010, "Wrong size on AttribManagerComponent_DestroyAttributeInstances");
static_assert(offsetof(AttribManagerComponent_DestroyAttributeInstances, KeepAttributes) == 0x000000, "Member 'AttribManagerComponent_DestroyAttributeInstances::KeepAttributes' has a wrong offset!");

// Function AttributeSystem.AttribManagerComponent.ExpireMod
// 0x0010 (0x0010 - 0x0000)
struct AttribManagerComponent_ExpireMod final
{
public:
	class UAttribMod*                             Mod;                                               // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(AttribManagerComponent_ExpireMod) == 0x000008, "Wrong alignment on AttribManagerComponent_ExpireMod");
static_assert(sizeof(AttribManagerComponent_ExpireMod) == 0x000010, "Wrong size on AttribManagerComponent_ExpireMod");
static_assert(offsetof(AttribManagerComponent_ExpireMod, Mod) == 0x000000, "Member 'AttribManagerComponent_ExpireMod::Mod' has a wrong offset!");
static_assert(offsetof(AttribManagerComponent_ExpireMod, ReturnValue) == 0x000008, "Member 'AttribManagerComponent_ExpireMod::ReturnValue' has a wrong offset!");

// Function AttributeSystem.AttribManagerComponent.ExpireModsFromSourceActor
// 0x0010 (0x0010 - 0x0000)
struct AttribManagerComponent_ExpireModsFromSourceActor final
{
public:
	class AActor*                                 SourceActor;                                       // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ReturnValue;                                       // 0x0008(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(AttribManagerComponent_ExpireModsFromSourceActor) == 0x000008, "Wrong alignment on AttribManagerComponent_ExpireModsFromSourceActor");
static_assert(sizeof(AttribManagerComponent_ExpireModsFromSourceActor) == 0x000010, "Wrong size on AttribManagerComponent_ExpireModsFromSourceActor");
static_assert(offsetof(AttribManagerComponent_ExpireModsFromSourceActor, SourceActor) == 0x000000, "Member 'AttribManagerComponent_ExpireModsFromSourceActor::SourceActor' has a wrong offset!");
static_assert(offsetof(AttribManagerComponent_ExpireModsFromSourceActor, ReturnValue) == 0x000008, "Member 'AttribManagerComponent_ExpireModsFromSourceActor::ReturnValue' has a wrong offset!");

// Function AttributeSystem.AttribManagerComponent.ExpireModsWithCategories
// 0x0018 (0x0018 - 0x0000)
struct AttribManagerComponent_ExpireModsWithCategories final
{
public:
	TArray<class FName>                           Categories;                                        // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
	int32                                         ReturnValue;                                       // 0x0010(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(AttribManagerComponent_ExpireModsWithCategories) == 0x000008, "Wrong alignment on AttribManagerComponent_ExpireModsWithCategories");
static_assert(sizeof(AttribManagerComponent_ExpireModsWithCategories) == 0x000018, "Wrong size on AttribManagerComponent_ExpireModsWithCategories");
static_assert(offsetof(AttribManagerComponent_ExpireModsWithCategories, Categories) == 0x000000, "Member 'AttribManagerComponent_ExpireModsWithCategories::Categories' has a wrong offset!");
static_assert(offsetof(AttribManagerComponent_ExpireModsWithCategories, ReturnValue) == 0x000010, "Member 'AttribManagerComponent_ExpireModsWithCategories::ReturnValue' has a wrong offset!");

// Function AttributeSystem.AttribManagerComponent.ExpireModsWithCategory
// 0x000C (0x000C - 0x0000)
struct AttribManagerComponent_ExpireModsWithCategory final
{
public:
	class FName                                   Category;                                          // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ReturnValue;                                       // 0x0008(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AttribManagerComponent_ExpireModsWithCategory) == 0x000004, "Wrong alignment on AttribManagerComponent_ExpireModsWithCategory");
static_assert(sizeof(AttribManagerComponent_ExpireModsWithCategory) == 0x00000C, "Wrong size on AttribManagerComponent_ExpireModsWithCategory");
static_assert(offsetof(AttribManagerComponent_ExpireModsWithCategory, Category) == 0x000000, "Member 'AttribManagerComponent_ExpireModsWithCategory::Category' has a wrong offset!");
static_assert(offsetof(AttribManagerComponent_ExpireModsWithCategory, ReturnValue) == 0x000008, "Member 'AttribManagerComponent_ExpireModsWithCategory::ReturnValue' has a wrong offset!");

// Function AttributeSystem.AttribManagerComponent.GetArmorAugmentation
// 0x0020 (0x0020 - 0x0000)
struct AttribManagerComponent_GetArmorAugmentation final
{
public:
	class AActor*                                 SourceActor;                                       // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UAttribDamageType*                      DamageType;                                        // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UObject*                                UserParams;                                        // 0x0010(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ReturnValue;                                       // 0x0018(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1C[0x4];                                       // 0x001C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(AttribManagerComponent_GetArmorAugmentation) == 0x000008, "Wrong alignment on AttribManagerComponent_GetArmorAugmentation");
static_assert(sizeof(AttribManagerComponent_GetArmorAugmentation) == 0x000020, "Wrong size on AttribManagerComponent_GetArmorAugmentation");
static_assert(offsetof(AttribManagerComponent_GetArmorAugmentation, SourceActor) == 0x000000, "Member 'AttribManagerComponent_GetArmorAugmentation::SourceActor' has a wrong offset!");
static_assert(offsetof(AttribManagerComponent_GetArmorAugmentation, DamageType) == 0x000008, "Member 'AttribManagerComponent_GetArmorAugmentation::DamageType' has a wrong offset!");
static_assert(offsetof(AttribManagerComponent_GetArmorAugmentation, UserParams) == 0x000010, "Member 'AttribManagerComponent_GetArmorAugmentation::UserParams' has a wrong offset!");
static_assert(offsetof(AttribManagerComponent_GetArmorAugmentation, ReturnValue) == 0x000018, "Member 'AttribManagerComponent_GetArmorAugmentation::ReturnValue' has a wrong offset!");

// Function AttributeSystem.AttribManagerComponent.GetAttribInstance
// 0x0010 (0x0010 - 0x0000)
struct AttribManagerComponent_GetAttribInstance final
{
public:
	class UAttributeDef*                          Attrib;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UAttribInstance*                        ReturnValue;                                       // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AttribManagerComponent_GetAttribInstance) == 0x000008, "Wrong alignment on AttribManagerComponent_GetAttribInstance");
static_assert(sizeof(AttribManagerComponent_GetAttribInstance) == 0x000010, "Wrong size on AttribManagerComponent_GetAttribInstance");
static_assert(offsetof(AttribManagerComponent_GetAttribInstance, Attrib) == 0x000000, "Member 'AttribManagerComponent_GetAttribInstance::Attrib' has a wrong offset!");
static_assert(offsetof(AttribManagerComponent_GetAttribInstance, ReturnValue) == 0x000008, "Member 'AttribManagerComponent_GetAttribInstance::ReturnValue' has a wrong offset!");

// Function AttributeSystem.AttribManagerComponent.GetAttribValue
// 0x0010 (0x0010 - 0x0000)
struct AttribManagerComponent_GetAttribValue final
{
public:
	class UAttributeDef*                          Attrib;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ReturnValue;                                       // 0x0008(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(AttribManagerComponent_GetAttribValue) == 0x000008, "Wrong alignment on AttribManagerComponent_GetAttribValue");
static_assert(sizeof(AttribManagerComponent_GetAttribValue) == 0x000010, "Wrong size on AttribManagerComponent_GetAttribValue");
static_assert(offsetof(AttribManagerComponent_GetAttribValue, Attrib) == 0x000000, "Member 'AttribManagerComponent_GetAttribValue::Attrib' has a wrong offset!");
static_assert(offsetof(AttribManagerComponent_GetAttribValue, ReturnValue) == 0x000008, "Member 'AttribManagerComponent_GetAttribValue::ReturnValue' has a wrong offset!");

// Function AttributeSystem.AttribManagerComponent.GetExploitDamage
// 0x0020 (0x0020 - 0x0000)
struct AttribManagerComponent_GetExploitDamage final
{
public:
	class AActor*                                 SourceActor;                                       // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UAttribDamageType*                      DamageType;                                        // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UObject*                                UserParams;                                        // 0x0010(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ReturnValue;                                       // 0x0018(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1C[0x4];                                       // 0x001C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(AttribManagerComponent_GetExploitDamage) == 0x000008, "Wrong alignment on AttribManagerComponent_GetExploitDamage");
static_assert(sizeof(AttribManagerComponent_GetExploitDamage) == 0x000020, "Wrong size on AttribManagerComponent_GetExploitDamage");
static_assert(offsetof(AttribManagerComponent_GetExploitDamage, SourceActor) == 0x000000, "Member 'AttribManagerComponent_GetExploitDamage::SourceActor' has a wrong offset!");
static_assert(offsetof(AttribManagerComponent_GetExploitDamage, DamageType) == 0x000008, "Member 'AttribManagerComponent_GetExploitDamage::DamageType' has a wrong offset!");
static_assert(offsetof(AttribManagerComponent_GetExploitDamage, UserParams) == 0x000010, "Member 'AttribManagerComponent_GetExploitDamage::UserParams' has a wrong offset!");
static_assert(offsetof(AttribManagerComponent_GetExploitDamage, ReturnValue) == 0x000018, "Member 'AttribManagerComponent_GetExploitDamage::ReturnValue' has a wrong offset!");

// Function AttributeSystem.AttribManagerComponent.GetOrCreateAttribInstance
// 0x0010 (0x0010 - 0x0000)
struct AttribManagerComponent_GetOrCreateAttribInstance final
{
public:
	class UAttributeDef*                          Attrib;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UAttribInstance*                        ReturnValue;                                       // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AttribManagerComponent_GetOrCreateAttribInstance) == 0x000008, "Wrong alignment on AttribManagerComponent_GetOrCreateAttribInstance");
static_assert(sizeof(AttribManagerComponent_GetOrCreateAttribInstance) == 0x000010, "Wrong size on AttribManagerComponent_GetOrCreateAttribInstance");
static_assert(offsetof(AttribManagerComponent_GetOrCreateAttribInstance, Attrib) == 0x000000, "Member 'AttribManagerComponent_GetOrCreateAttribInstance::Attrib' has a wrong offset!");
static_assert(offsetof(AttribManagerComponent_GetOrCreateAttribInstance, ReturnValue) == 0x000008, "Member 'AttribManagerComponent_GetOrCreateAttribInstance::ReturnValue' has a wrong offset!");

// Function AttributeSystem.AttribManagerComponent.InitializeAttributes
// 0x0001 (0x0001 - 0x0000)
struct AttribManagerComponent_InitializeAttributes final
{
public:
	bool                                          bGrantDefaultAttribs;                              // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AttribManagerComponent_InitializeAttributes) == 0x000001, "Wrong alignment on AttribManagerComponent_InitializeAttributes");
static_assert(sizeof(AttribManagerComponent_InitializeAttributes) == 0x000001, "Wrong size on AttribManagerComponent_InitializeAttributes");
static_assert(offsetof(AttribManagerComponent_InitializeAttributes, bGrantDefaultAttribs) == 0x000000, "Member 'AttribManagerComponent_InitializeAttributes::bGrantDefaultAttribs' has a wrong offset!");

// Function AttributeSystem.AttribManagerComponent.InitializeTieredAttributes
// 0x0018 (0x0018 - 0x0000)
struct AttribManagerComponent_InitializeTieredAttributes final
{
public:
	bool                                          bGrantDefaultAttribs;                              // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FEnumHandle>                    TierEnums;                                         // 0x0008(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(AttribManagerComponent_InitializeTieredAttributes) == 0x000008, "Wrong alignment on AttribManagerComponent_InitializeTieredAttributes");
static_assert(sizeof(AttribManagerComponent_InitializeTieredAttributes) == 0x000018, "Wrong size on AttribManagerComponent_InitializeTieredAttributes");
static_assert(offsetof(AttribManagerComponent_InitializeTieredAttributes, bGrantDefaultAttribs) == 0x000000, "Member 'AttribManagerComponent_InitializeTieredAttributes::bGrantDefaultAttribs' has a wrong offset!");
static_assert(offsetof(AttribManagerComponent_InitializeTieredAttributes, TierEnums) == 0x000008, "Member 'AttribManagerComponent_InitializeTieredAttributes::TierEnums' has a wrong offset!");

// Function AttributeSystem.AttribManagerComponent.InitializeTieredAttributesWithOverrides
// 0x0028 (0x0028 - 0x0000)
struct AttribManagerComponent_InitializeTieredAttributesWithOverrides final
{
public:
	bool                                          bGrantDefaultAttribs;                              // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FDefaultAttribute>              AttribOverrides;                                   // 0x0008(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
	TArray<struct FEnumHandle>                    TierEnums;                                         // 0x0018(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(AttribManagerComponent_InitializeTieredAttributesWithOverrides) == 0x000008, "Wrong alignment on AttribManagerComponent_InitializeTieredAttributesWithOverrides");
static_assert(sizeof(AttribManagerComponent_InitializeTieredAttributesWithOverrides) == 0x000028, "Wrong size on AttribManagerComponent_InitializeTieredAttributesWithOverrides");
static_assert(offsetof(AttribManagerComponent_InitializeTieredAttributesWithOverrides, bGrantDefaultAttribs) == 0x000000, "Member 'AttribManagerComponent_InitializeTieredAttributesWithOverrides::bGrantDefaultAttribs' has a wrong offset!");
static_assert(offsetof(AttribManagerComponent_InitializeTieredAttributesWithOverrides, AttribOverrides) == 0x000008, "Member 'AttribManagerComponent_InitializeTieredAttributesWithOverrides::AttribOverrides' has a wrong offset!");
static_assert(offsetof(AttribManagerComponent_InitializeTieredAttributesWithOverrides, TierEnums) == 0x000018, "Member 'AttribManagerComponent_InitializeTieredAttributesWithOverrides::TierEnums' has a wrong offset!");

// Function AttributeSystem.AttribManagerComponent.K2_OnGetElapsedPlayTime
// 0x0004 (0x0004 - 0x0000)
struct AttribManagerComponent_K2_OnGetElapsedPlayTime final
{
public:
	float                                         PlayTime;                                          // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AttribManagerComponent_K2_OnGetElapsedPlayTime) == 0x000004, "Wrong alignment on AttribManagerComponent_K2_OnGetElapsedPlayTime");
static_assert(sizeof(AttribManagerComponent_K2_OnGetElapsedPlayTime) == 0x000004, "Wrong size on AttribManagerComponent_K2_OnGetElapsedPlayTime");
static_assert(offsetof(AttribManagerComponent_K2_OnGetElapsedPlayTime, PlayTime) == 0x000000, "Member 'AttribManagerComponent_K2_OnGetElapsedPlayTime::PlayTime' has a wrong offset!");

// Function AttributeSystem.AttribManagerComponent.GetActiveModsWithCategories
// 0x0028 (0x0028 - 0x0000)
struct AttribManagerComponent_GetActiveModsWithCategories final
{
public:
	TArray<class FName>                           Categories;                                        // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
	bool                                          bExcludeExpiringMods;                              // 0x0010(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class UAttribMod*>                     ReturnValue;                                       // 0x0018(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(AttribManagerComponent_GetActiveModsWithCategories) == 0x000008, "Wrong alignment on AttribManagerComponent_GetActiveModsWithCategories");
static_assert(sizeof(AttribManagerComponent_GetActiveModsWithCategories) == 0x000028, "Wrong size on AttribManagerComponent_GetActiveModsWithCategories");
static_assert(offsetof(AttribManagerComponent_GetActiveModsWithCategories, Categories) == 0x000000, "Member 'AttribManagerComponent_GetActiveModsWithCategories::Categories' has a wrong offset!");
static_assert(offsetof(AttribManagerComponent_GetActiveModsWithCategories, bExcludeExpiringMods) == 0x000010, "Member 'AttribManagerComponent_GetActiveModsWithCategories::bExcludeExpiringMods' has a wrong offset!");
static_assert(offsetof(AttribManagerComponent_GetActiveModsWithCategories, ReturnValue) == 0x000018, "Member 'AttribManagerComponent_GetActiveModsWithCategories::ReturnValue' has a wrong offset!");

// Function AttributeSystem.AttribManagerComponent.GetActiveModWithCategory
// 0x0020 (0x0020 - 0x0000)
struct AttribManagerComponent_GetActiveModWithCategory final
{
public:
	class FName                                   Category;                                          // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 SourceActor;                                       // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bExcludeExpiringMods;                              // 0x0010(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UAttribMod*                             ReturnValue;                                       // 0x0018(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AttribManagerComponent_GetActiveModWithCategory) == 0x000008, "Wrong alignment on AttribManagerComponent_GetActiveModWithCategory");
static_assert(sizeof(AttribManagerComponent_GetActiveModWithCategory) == 0x000020, "Wrong size on AttribManagerComponent_GetActiveModWithCategory");
static_assert(offsetof(AttribManagerComponent_GetActiveModWithCategory, Category) == 0x000000, "Member 'AttribManagerComponent_GetActiveModWithCategory::Category' has a wrong offset!");
static_assert(offsetof(AttribManagerComponent_GetActiveModWithCategory, SourceActor) == 0x000008, "Member 'AttribManagerComponent_GetActiveModWithCategory::SourceActor' has a wrong offset!");
static_assert(offsetof(AttribManagerComponent_GetActiveModWithCategory, bExcludeExpiringMods) == 0x000010, "Member 'AttribManagerComponent_GetActiveModWithCategory::bExcludeExpiringMods' has a wrong offset!");
static_assert(offsetof(AttribManagerComponent_GetActiveModWithCategory, ReturnValue) == 0x000018, "Member 'AttribManagerComponent_GetActiveModWithCategory::ReturnValue' has a wrong offset!");

// Function AttributeSystem.AttribManagerComponent.GetArmorAttrib
// 0x0008 (0x0008 - 0x0000)
struct AttribManagerComponent_GetArmorAttrib final
{
public:
	class UAttributeDef*                          ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AttribManagerComponent_GetArmorAttrib) == 0x000008, "Wrong alignment on AttribManagerComponent_GetArmorAttrib");
static_assert(sizeof(AttribManagerComponent_GetArmorAttrib) == 0x000008, "Wrong size on AttribManagerComponent_GetArmorAttrib");
static_assert(offsetof(AttribManagerComponent_GetArmorAttrib, ReturnValue) == 0x000000, "Member 'AttribManagerComponent_GetArmorAttrib::ReturnValue' has a wrong offset!");

// Function AttributeSystem.AttribManagerComponent.GetDefaultAttribValue
// 0x0010 (0x0010 - 0x0000)
struct AttribManagerComponent_GetDefaultAttribValue final
{
public:
	class UAttributeDef*                          Attrib;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ReturnValue;                                       // 0x0008(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(AttribManagerComponent_GetDefaultAttribValue) == 0x000008, "Wrong alignment on AttribManagerComponent_GetDefaultAttribValue");
static_assert(sizeof(AttribManagerComponent_GetDefaultAttribValue) == 0x000010, "Wrong size on AttribManagerComponent_GetDefaultAttribValue");
static_assert(offsetof(AttribManagerComponent_GetDefaultAttribValue, Attrib) == 0x000000, "Member 'AttribManagerComponent_GetDefaultAttribValue::Attrib' has a wrong offset!");
static_assert(offsetof(AttribManagerComponent_GetDefaultAttribValue, ReturnValue) == 0x000008, "Member 'AttribManagerComponent_GetDefaultAttribValue::ReturnValue' has a wrong offset!");

// Function AttributeSystem.AttribManagerComponent.GetHealthAttrib
// 0x0008 (0x0008 - 0x0000)
struct AttribManagerComponent_GetHealthAttrib final
{
public:
	class UAttributeDef*                          ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AttribManagerComponent_GetHealthAttrib) == 0x000008, "Wrong alignment on AttribManagerComponent_GetHealthAttrib");
static_assert(sizeof(AttribManagerComponent_GetHealthAttrib) == 0x000008, "Wrong size on AttribManagerComponent_GetHealthAttrib");
static_assert(offsetof(AttribManagerComponent_GetHealthAttrib, ReturnValue) == 0x000000, "Member 'AttribManagerComponent_GetHealthAttrib::ReturnValue' has a wrong offset!");

// Function AttributeSystem.AttribManagerComponent.GetShieldAttrib
// 0x0008 (0x0008 - 0x0000)
struct AttribManagerComponent_GetShieldAttrib final
{
public:
	class UAttributeDef*                          ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AttribManagerComponent_GetShieldAttrib) == 0x000008, "Wrong alignment on AttribManagerComponent_GetShieldAttrib");
static_assert(sizeof(AttribManagerComponent_GetShieldAttrib) == 0x000008, "Wrong size on AttribManagerComponent_GetShieldAttrib");
static_assert(offsetof(AttribManagerComponent_GetShieldAttrib, ReturnValue) == 0x000000, "Member 'AttribManagerComponent_GetShieldAttrib::ReturnValue' has a wrong offset!");

// Function AttributeSystem.AttribManagerComponent.HasActiveModWithCategory
// 0x000C (0x000C - 0x0000)
struct AttribManagerComponent_HasActiveModWithCategory final
{
public:
	class FName                                   Category;                                          // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bExcludeExpiringMods;                              // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0009(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_A[0x2];                                        // 0x000A(0x0002)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(AttribManagerComponent_HasActiveModWithCategory) == 0x000004, "Wrong alignment on AttribManagerComponent_HasActiveModWithCategory");
static_assert(sizeof(AttribManagerComponent_HasActiveModWithCategory) == 0x00000C, "Wrong size on AttribManagerComponent_HasActiveModWithCategory");
static_assert(offsetof(AttribManagerComponent_HasActiveModWithCategory, Category) == 0x000000, "Member 'AttribManagerComponent_HasActiveModWithCategory::Category' has a wrong offset!");
static_assert(offsetof(AttribManagerComponent_HasActiveModWithCategory, bExcludeExpiringMods) == 0x000008, "Member 'AttribManagerComponent_HasActiveModWithCategory::bExcludeExpiringMods' has a wrong offset!");
static_assert(offsetof(AttribManagerComponent_HasActiveModWithCategory, ReturnValue) == 0x000009, "Member 'AttribManagerComponent_HasActiveModWithCategory::ReturnValue' has a wrong offset!");

// Function AttributeSystem.AttribManagerComponent.HasArmorAttrib
// 0x0001 (0x0001 - 0x0000)
struct AttribManagerComponent_HasArmorAttrib final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AttribManagerComponent_HasArmorAttrib) == 0x000001, "Wrong alignment on AttribManagerComponent_HasArmorAttrib");
static_assert(sizeof(AttribManagerComponent_HasArmorAttrib) == 0x000001, "Wrong size on AttribManagerComponent_HasArmorAttrib");
static_assert(offsetof(AttribManagerComponent_HasArmorAttrib, ReturnValue) == 0x000000, "Member 'AttribManagerComponent_HasArmorAttrib::ReturnValue' has a wrong offset!");

// Function AttributeSystem.AttribManagerComponent.HasAttribHandler
// 0x0001 (0x0001 - 0x0000)
struct AttribManagerComponent_HasAttribHandler final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AttribManagerComponent_HasAttribHandler) == 0x000001, "Wrong alignment on AttribManagerComponent_HasAttribHandler");
static_assert(sizeof(AttribManagerComponent_HasAttribHandler) == 0x000001, "Wrong size on AttribManagerComponent_HasAttribHandler");
static_assert(offsetof(AttribManagerComponent_HasAttribHandler, ReturnValue) == 0x000000, "Member 'AttribManagerComponent_HasAttribHandler::ReturnValue' has a wrong offset!");

// Function AttributeSystem.AttribManagerComponent.HasHealthAttrib
// 0x0001 (0x0001 - 0x0000)
struct AttribManagerComponent_HasHealthAttrib final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AttribManagerComponent_HasHealthAttrib) == 0x000001, "Wrong alignment on AttribManagerComponent_HasHealthAttrib");
static_assert(sizeof(AttribManagerComponent_HasHealthAttrib) == 0x000001, "Wrong size on AttribManagerComponent_HasHealthAttrib");
static_assert(offsetof(AttribManagerComponent_HasHealthAttrib, ReturnValue) == 0x000000, "Member 'AttribManagerComponent_HasHealthAttrib::ReturnValue' has a wrong offset!");

// Function AttributeSystem.AttribManagerComponent.HasInitializedAttributes
// 0x0001 (0x0001 - 0x0000)
struct AttribManagerComponent_HasInitializedAttributes final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AttribManagerComponent_HasInitializedAttributes) == 0x000001, "Wrong alignment on AttribManagerComponent_HasInitializedAttributes");
static_assert(sizeof(AttribManagerComponent_HasInitializedAttributes) == 0x000001, "Wrong size on AttribManagerComponent_HasInitializedAttributes");
static_assert(offsetof(AttribManagerComponent_HasInitializedAttributes, ReturnValue) == 0x000000, "Member 'AttribManagerComponent_HasInitializedAttributes::ReturnValue' has a wrong offset!");

// Function AttributeSystem.AttribManagerComponent.HasShieldAttrib
// 0x0001 (0x0001 - 0x0000)
struct AttribManagerComponent_HasShieldAttrib final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AttribManagerComponent_HasShieldAttrib) == 0x000001, "Wrong alignment on AttribManagerComponent_HasShieldAttrib");
static_assert(sizeof(AttribManagerComponent_HasShieldAttrib) == 0x000001, "Wrong size on AttribManagerComponent_HasShieldAttrib");
static_assert(offsetof(AttribManagerComponent_HasShieldAttrib, ReturnValue) == 0x000000, "Member 'AttribManagerComponent_HasShieldAttrib::ReturnValue' has a wrong offset!");

// Function AttributeSystem.AttribManagerComponent.IsDamageReceivedBound
// 0x0001 (0x0001 - 0x0000)
struct AttribManagerComponent_IsDamageReceivedBound final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AttribManagerComponent_IsDamageReceivedBound) == 0x000001, "Wrong alignment on AttribManagerComponent_IsDamageReceivedBound");
static_assert(sizeof(AttribManagerComponent_IsDamageReceivedBound) == 0x000001, "Wrong size on AttribManagerComponent_IsDamageReceivedBound");
static_assert(offsetof(AttribManagerComponent_IsDamageReceivedBound, ReturnValue) == 0x000000, "Member 'AttribManagerComponent_IsDamageReceivedBound::ReturnValue' has a wrong offset!");

// Function AttributeSystem.AttribManagerComponent.IsHealthAttrib
// 0x0010 (0x0010 - 0x0000)
struct AttribManagerComponent_IsHealthAttrib final
{
public:
	class UAttributeDef*                          Attrib;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(AttribManagerComponent_IsHealthAttrib) == 0x000008, "Wrong alignment on AttribManagerComponent_IsHealthAttrib");
static_assert(sizeof(AttribManagerComponent_IsHealthAttrib) == 0x000010, "Wrong size on AttribManagerComponent_IsHealthAttrib");
static_assert(offsetof(AttribManagerComponent_IsHealthAttrib, Attrib) == 0x000000, "Member 'AttribManagerComponent_IsHealthAttrib::Attrib' has a wrong offset!");
static_assert(offsetof(AttribManagerComponent_IsHealthAttrib, ReturnValue) == 0x000008, "Member 'AttribManagerComponent_IsHealthAttrib::ReturnValue' has a wrong offset!");

// Function AttributeSystem.AttribMod.AddTickCount
// 0x0004 (0x0004 - 0x0000)
struct AttribMod_AddTickCount final
{
public:
	int32                                         CountToAdd;                                        // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AttribMod_AddTickCount) == 0x000004, "Wrong alignment on AttribMod_AddTickCount");
static_assert(sizeof(AttribMod_AddTickCount) == 0x000004, "Wrong size on AttribMod_AddTickCount");
static_assert(offsetof(AttribMod_AddTickCount, CountToAdd) == 0x000000, "Member 'AttribMod_AddTickCount::CountToAdd' has a wrong offset!");

// Function AttributeSystem.AttribMod.SetTickRate
// 0x0004 (0x0004 - 0x0000)
struct AttribMod_SetTickRate final
{
public:
	float                                         Rate;                                              // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AttribMod_SetTickRate) == 0x000004, "Wrong alignment on AttribMod_SetTickRate");
static_assert(sizeof(AttribMod_SetTickRate) == 0x000004, "Wrong size on AttribMod_SetTickRate");
static_assert(offsetof(AttribMod_SetTickRate, Rate) == 0x000000, "Member 'AttribMod_SetTickRate::Rate' has a wrong offset!");

// Function AttributeSystem.AttribMod.SetValue
// 0x0004 (0x0004 - 0x0000)
struct AttribMod_SetValue final
{
public:
	float                                         NewValue;                                          // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AttribMod_SetValue) == 0x000004, "Wrong alignment on AttribMod_SetValue");
static_assert(sizeof(AttribMod_SetValue) == 0x000004, "Wrong size on AttribMod_SetValue");
static_assert(offsetof(AttribMod_SetValue, NewValue) == 0x000000, "Member 'AttribMod_SetValue::NewValue' has a wrong offset!");

// Function AttributeSystem.AttribMod.GetProgress
// 0x0004 (0x0004 - 0x0000)
struct AttribMod_GetProgress final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AttribMod_GetProgress) == 0x000004, "Wrong alignment on AttribMod_GetProgress");
static_assert(sizeof(AttribMod_GetProgress) == 0x000004, "Wrong size on AttribMod_GetProgress");
static_assert(offsetof(AttribMod_GetProgress, ReturnValue) == 0x000000, "Member 'AttribMod_GetProgress::ReturnValue' has a wrong offset!");

// Function AttributeSystem.AttribMod.GetTargetActor
// 0x0008 (0x0008 - 0x0000)
struct AttribMod_GetTargetActor final
{
public:
	class AActor*                                 ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AttribMod_GetTargetActor) == 0x000008, "Wrong alignment on AttribMod_GetTargetActor");
static_assert(sizeof(AttribMod_GetTargetActor) == 0x000008, "Wrong size on AttribMod_GetTargetActor");
static_assert(offsetof(AttribMod_GetTargetActor, ReturnValue) == 0x000000, "Member 'AttribMod_GetTargetActor::ReturnValue' has a wrong offset!");

// Function AttributeSystem.AttribMod.GetTargetAttribInstance
// 0x0008 (0x0008 - 0x0000)
struct AttribMod_GetTargetAttribInstance final
{
public:
	class UAttribInstance*                        ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AttribMod_GetTargetAttribInstance) == 0x000008, "Wrong alignment on AttribMod_GetTargetAttribInstance");
static_assert(sizeof(AttribMod_GetTargetAttribInstance) == 0x000008, "Wrong size on AttribMod_GetTargetAttribInstance");
static_assert(offsetof(AttribMod_GetTargetAttribInstance, ReturnValue) == 0x000000, "Member 'AttribMod_GetTargetAttribInstance::ReturnValue' has a wrong offset!");

// Function AttributeSystem.AttribMod.GetTickRate
// 0x0004 (0x0004 - 0x0000)
struct AttribMod_GetTickRate final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AttribMod_GetTickRate) == 0x000004, "Wrong alignment on AttribMod_GetTickRate");
static_assert(sizeof(AttribMod_GetTickRate) == 0x000004, "Wrong size on AttribMod_GetTickRate");
static_assert(offsetof(AttribMod_GetTickRate, ReturnValue) == 0x000000, "Member 'AttribMod_GetTickRate::ReturnValue' has a wrong offset!");

// Function AttributeSystem.AttribMod.GetTimeSinceCreation
// 0x0004 (0x0004 - 0x0000)
struct AttribMod_GetTimeSinceCreation final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AttribMod_GetTimeSinceCreation) == 0x000004, "Wrong alignment on AttribMod_GetTimeSinceCreation");
static_assert(sizeof(AttribMod_GetTimeSinceCreation) == 0x000004, "Wrong size on AttribMod_GetTimeSinceCreation");
static_assert(offsetof(AttribMod_GetTimeSinceCreation, ReturnValue) == 0x000000, "Member 'AttribMod_GetTimeSinceCreation::ReturnValue' has a wrong offset!");

// Function AttributeSystem.AttribMod.GetValue
// 0x0004 (0x0004 - 0x0000)
struct AttribMod_GetValue final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AttribMod_GetValue) == 0x000004, "Wrong alignment on AttribMod_GetValue");
static_assert(sizeof(AttribMod_GetValue) == 0x000004, "Wrong size on AttribMod_GetValue");
static_assert(offsetof(AttribMod_GetValue, ReturnValue) == 0x000000, "Member 'AttribMod_GetValue::ReturnValue' has a wrong offset!");

// Function AttributeSystem.AttribMod.HasExpired
// 0x0001 (0x0001 - 0x0000)
struct AttribMod_HasExpired final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AttribMod_HasExpired) == 0x000001, "Wrong alignment on AttribMod_HasExpired");
static_assert(sizeof(AttribMod_HasExpired) == 0x000001, "Wrong size on AttribMod_HasExpired");
static_assert(offsetof(AttribMod_HasExpired, ReturnValue) == 0x000000, "Member 'AttribMod_HasExpired::ReturnValue' has a wrong offset!");

// Function AttributeSystem.AttribMod.IsActive
// 0x0001 (0x0001 - 0x0000)
struct AttribMod_IsActive final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AttribMod_IsActive) == 0x000001, "Wrong alignment on AttribMod_IsActive");
static_assert(sizeof(AttribMod_IsActive) == 0x000001, "Wrong size on AttribMod_IsActive");
static_assert(offsetof(AttribMod_IsActive, ReturnValue) == 0x000000, "Member 'AttribMod_IsActive::ReturnValue' has a wrong offset!");

// Function AttributeSystem.AttribMod.IsExpiring
// 0x0001 (0x0001 - 0x0000)
struct AttribMod_IsExpiring final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AttribMod_IsExpiring) == 0x000001, "Wrong alignment on AttribMod_IsExpiring");
static_assert(sizeof(AttribMod_IsExpiring) == 0x000001, "Wrong size on AttribMod_IsExpiring");
static_assert(offsetof(AttribMod_IsExpiring, ReturnValue) == 0x000000, "Member 'AttribMod_IsExpiring::ReturnValue' has a wrong offset!");

// Function AttributeSystem.AttribMod.ShouldExpireBy
// 0x0002 (0x0002 - 0x0000)
struct AttribMod_ShouldExpireBy final
{
public:
	EModExpireFlags                               Flags_0;                                           // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0001(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AttribMod_ShouldExpireBy) == 0x000001, "Wrong alignment on AttribMod_ShouldExpireBy");
static_assert(sizeof(AttribMod_ShouldExpireBy) == 0x000002, "Wrong size on AttribMod_ShouldExpireBy");
static_assert(offsetof(AttribMod_ShouldExpireBy, Flags_0) == 0x000000, "Member 'AttribMod_ShouldExpireBy::Flags_0' has a wrong offset!");
static_assert(offsetof(AttribMod_ShouldExpireBy, ReturnValue) == 0x000001, "Member 'AttribMod_ShouldExpireBy::ReturnValue' has a wrong offset!");

}

