#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: COMP_SkillManager

#include "Basic.hpp"

#include "COMP_SkillManager_classes.hpp"
#include "COMP_SkillManager_parameters.hpp"


namespace SDK
{

// Function COMP_SkillManager.COMP_SkillManager_C.ExecuteUbergraph_COMP_SkillManager
// (Final, UbergraphFunction, HasDefaults)
// Parameters:
// int32                                   EntryPoint                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UCOMP_SkillManager_C::ExecuteUbergraph_COMP_SkillManager(int32 EntryPoint)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("COMP_SkillManager_C", "ExecuteUbergraph_COMP_SkillManager");

	Params::COMP_SkillManager_C_ExecuteUbergraph_COMP_SkillManager Parms{};

	Parms.EntryPoint = EntryPoint;

	UObject::ProcessEvent(Func, &Parms);
}


// Function COMP_SkillManager.COMP_SkillManager_C.ReceiveBeginPlay
// (Event, Public, BlueprintEvent)

void UCOMP_SkillManager_C::ReceiveBeginPlay()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("COMP_SkillManager_C", "ReceiveBeginPlay");

	UObject::ProcessEvent(Func, nullptr);
}


// Function COMP_SkillManager.COMP_SkillManager_C.InitializeDefaultSkills
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    GrantDefaultSkills                                     (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)

void UCOMP_SkillManager_C::InitializeDefaultSkills(bool GrantDefaultSkills)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("COMP_SkillManager_C", "InitializeDefaultSkills");

	Params::COMP_SkillManager_C_InitializeDefaultSkills Parms{};

	Parms.GrantDefaultSkills = GrantDefaultSkills;

	UObject::ProcessEvent(Func, &Parms);
}


// Function COMP_SkillManager.COMP_SkillManager_C.InitializeCustomRequirements
// (Protected, HasDefaults, BlueprintCallable, BlueprintEvent)

void UCOMP_SkillManager_C::InitializeCustomRequirements()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("COMP_SkillManager_C", "InitializeCustomRequirements");

	UObject::ProcessEvent(Func, nullptr);
}


// Function COMP_SkillManager.COMP_SkillManager_C.CleanupSkills
// (Public, BlueprintCallable, BlueprintEvent)

void UCOMP_SkillManager_C::CleanupSkills()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("COMP_SkillManager_C", "CleanupSkills");

	UObject::ProcessEvent(Func, nullptr);
}


// Function COMP_SkillManager.COMP_SkillManager_C.AddSkill
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// class UClass*                           Skill                                                  (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UCOMP_SkillManager_C::AddSkill(class UClass* Skill)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("COMP_SkillManager_C", "AddSkill");

	Params::COMP_SkillManager_C_AddSkill Parms{};

	Parms.Skill = Skill;

	UObject::ProcessEvent(Func, &Parms);
}


// Function COMP_SkillManager.COMP_SkillManager_C.HasAnySkills
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// bool                                    Result                                                 (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void UCOMP_SkillManager_C::HasAnySkills(bool* Result)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("COMP_SkillManager_C", "HasAnySkills");

	Params::COMP_SkillManager_C_HasAnySkills Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (Result != nullptr)
		*Result = Parms.Result;
}


// Function COMP_SkillManager.COMP_SkillManager_C.EVENT_OnSkillActivated
// (Private, BlueprintCallable, BlueprintEvent)
// Parameters:
// class USkill_C*                         Skill                                                  (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UCOMP_SkillManager_C::EVENT_OnSkillActivated(class USkill_C* Skill)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("COMP_SkillManager_C", "EVENT_OnSkillActivated");

	Params::COMP_SkillManager_C_EVENT_OnSkillActivated Parms{};

	Parms.Skill = Skill;

	UObject::ProcessEvent(Func, &Parms);
}


// Function COMP_SkillManager.COMP_SkillManager_C.EVENT_OnSkillDeactivated
// (Private, BlueprintCallable, BlueprintEvent)
// Parameters:
// class USkill_C*                         Skill                                                  (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UCOMP_SkillManager_C::EVENT_OnSkillDeactivated(class USkill_C* Skill)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("COMP_SkillManager_C", "EVENT_OnSkillDeactivated");

	Params::COMP_SkillManager_C_EVENT_OnSkillDeactivated Parms{};

	Parms.Skill = Skill;

	UObject::ProcessEvent(Func, &Parms);
}


// Function COMP_SkillManager.COMP_SkillManager_C.GetSkillByClass
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// class UClass*                           SkillClass                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    AnyDerivedClass                                        (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// class USkill_C*                         Skill                                                  (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UCOMP_SkillManager_C::GetSkillByClass(class UClass* SkillClass, bool AnyDerivedClass, class USkill_C** Skill)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("COMP_SkillManager_C", "GetSkillByClass");

	Params::COMP_SkillManager_C_GetSkillByClass Parms{};

	Parms.SkillClass = SkillClass;
	Parms.AnyDerivedClass = AnyDerivedClass;

	UObject::ProcessEvent(Func, &Parms);

	if (Skill != nullptr)
		*Skill = Parms.Skill;
}


// Function COMP_SkillManager.COMP_SkillManager_C.GetActiveSkill
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// class USkill_C*                         Skill                                                  (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UCOMP_SkillManager_C::GetActiveSkill(class USkill_C** Skill)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("COMP_SkillManager_C", "GetActiveSkill");

	Params::COMP_SkillManager_C_GetActiveSkill Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (Skill != nullptr)
		*Skill = Parms.Skill;
}


// Function COMP_SkillManager.COMP_SkillManager_C.HasActiveCombo
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// bool                                    Result                                                 (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void UCOMP_SkillManager_C::HasActiveCombo(bool* Result)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("COMP_SkillManager_C", "HasActiveCombo");

	Params::COMP_SkillManager_C_HasActiveCombo Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (Result != nullptr)
		*Result = Parms.Result;
}


// Function COMP_SkillManager.COMP_SkillManager_C.GetComboCooldownRemaining
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// int32                                   ComboIndex                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// float                                   Result                                                 (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UCOMP_SkillManager_C::GetComboCooldownRemaining(int32 ComboIndex, float* Result)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("COMP_SkillManager_C", "GetComboCooldownRemaining");

	Params::COMP_SkillManager_C_GetComboCooldownRemaining Parms{};

	Parms.ComboIndex = ComboIndex;

	UObject::ProcessEvent(Func, &Parms);

	if (Result != nullptr)
		*Result = Parms.Result;
}


// Function COMP_SkillManager.COMP_SkillManager_C.GetCombosByType
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// ENUM_SkillType                          Type                                                   (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// TArray<int32>                           Result                                                 (Parm, OutParm)

void UCOMP_SkillManager_C::GetCombosByType(ENUM_SkillType Type, TArray<int32>* Result)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("COMP_SkillManager_C", "GetCombosByType");

	Params::COMP_SkillManager_C_GetCombosByType Parms{};

	Parms.Type = Type;

	UObject::ProcessEvent(Func, &Parms);

	if (Result != nullptr)
		*Result = std::move(Parms.Result);
}


// Function COMP_SkillManager.COMP_SkillManager_C.GetCombosByStyle
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// ENUM_PreferredCombatStyle               Style                                                  (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// TArray<int32>                           Result                                                 (Parm, OutParm)

void UCOMP_SkillManager_C::GetCombosByStyle(ENUM_PreferredCombatStyle Style, TArray<int32>* Result)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("COMP_SkillManager_C", "GetCombosByStyle");

	Params::COMP_SkillManager_C_GetCombosByStyle Parms{};

	Parms.Style = Style;

	UObject::ProcessEvent(Func, &Parms);

	if (Result != nullptr)
		*Result = std::move(Parms.Result);
}


// Function COMP_SkillManager.COMP_SkillManager_C.GetCombosByTypes
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// TArray<ENUM_SkillType>                  Types                                                  (BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
// TArray<int32>                           Result                                                 (Parm, OutParm)

void UCOMP_SkillManager_C::GetCombosByTypes(TArray<ENUM_SkillType>& Types, TArray<int32>* Result)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("COMP_SkillManager_C", "GetCombosByTypes");

	Params::COMP_SkillManager_C_GetCombosByTypes Parms{};

	Parms.Types = std::move(Types);

	UObject::ProcessEvent(Func, &Parms);

	Types = std::move(Parms.Types);

	if (Result != nullptr)
		*Result = std::move(Parms.Result);
}


// Function COMP_SkillManager.COMP_SkillManager_C.GetLastUsedComboIndex
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// int32                                   LastComboIndex                                         (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UCOMP_SkillManager_C::GetLastUsedComboIndex(int32* LastComboIndex)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("COMP_SkillManager_C", "GetLastUsedComboIndex");

	Params::COMP_SkillManager_C_GetLastUsedComboIndex Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (LastComboIndex != nullptr)
		*LastComboIndex = Parms.LastComboIndex;
}


// Function COMP_SkillManager.COMP_SkillManager_C.SelectRandomComboOfType
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// ENUM_SkillType                          SkillType                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    OnlyPreferredStyle                                     (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// bool                                    Result                                                 (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void UCOMP_SkillManager_C::SelectRandomComboOfType(ENUM_SkillType SkillType, bool OnlyPreferredStyle, bool* Result)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("COMP_SkillManager_C", "SelectRandomComboOfType");

	Params::COMP_SkillManager_C_SelectRandomComboOfType Parms{};

	Parms.SkillType = SkillType;
	Parms.OnlyPreferredStyle = OnlyPreferredStyle;

	UObject::ProcessEvent(Func, &Parms);

	if (Result != nullptr)
		*Result = Parms.Result;
}


// Function COMP_SkillManager.COMP_SkillManager_C.GetActiveComboBehaviorTree
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// class UBehaviorTree*                    BehaviorTree                                           (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UCOMP_SkillManager_C::GetActiveComboBehaviorTree(class UBehaviorTree** BehaviorTree)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("COMP_SkillManager_C", "GetActiveComboBehaviorTree");

	Params::COMP_SkillManager_C_GetActiveComboBehaviorTree Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (BehaviorTree != nullptr)
		*BehaviorTree = Parms.BehaviorTree;
}


// Function COMP_SkillManager.COMP_SkillManager_C.GetPreferredDistanceMinMax
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// struct FVector2D                        PreferredDistance                                      (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UCOMP_SkillManager_C::GetPreferredDistanceMinMax(struct FVector2D* PreferredDistance)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("COMP_SkillManager_C", "GetPreferredDistanceMinMax");

	Params::COMP_SkillManager_C_GetPreferredDistanceMinMax Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (PreferredDistance != nullptr)
		*PreferredDistance = std::move(Parms.PreferredDistance);
}


// Function COMP_SkillManager.COMP_SkillManager_C.IsComboInRange
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// int32                                   ComboIndex                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    InRange                                                (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void UCOMP_SkillManager_C::IsComboInRange(int32 ComboIndex, bool* InRange)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("COMP_SkillManager_C", "IsComboInRange");

	Params::COMP_SkillManager_C_IsComboInRange Parms{};

	Parms.ComboIndex = ComboIndex;

	UObject::ProcessEvent(Func, &Parms);

	if (InRange != nullptr)
		*InRange = Parms.InRange;
}


// Function COMP_SkillManager.COMP_SkillManager_C.IsAnyComboInRange
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// bool                                    Result                                                 (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void UCOMP_SkillManager_C::IsAnyComboInRange(bool* Result)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("COMP_SkillManager_C", "IsAnyComboInRange");

	Params::COMP_SkillManager_C_IsAnyComboInRange Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (Result != nullptr)
		*Result = Parms.Result;
}


// Function COMP_SkillManager.COMP_SkillManager_C.IsAnyComboByTypeInRange
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// TArray<ENUM_SkillType>                  Types                                                  (BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
// bool                                    Result                                                 (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void UCOMP_SkillManager_C::IsAnyComboByTypeInRange(TArray<ENUM_SkillType>& Types, bool* Result)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("COMP_SkillManager_C", "IsAnyComboByTypeInRange");

	Params::COMP_SkillManager_C_IsAnyComboByTypeInRange Parms{};

	Parms.Types = std::move(Types);

	UObject::ProcessEvent(Func, &Parms);

	Types = std::move(Parms.Types);

	if (Result != nullptr)
		*Result = Parms.Result;
}


// Function COMP_SkillManager.COMP_SkillManager_C.CanStartCombo
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// int32                                   ComboIndex                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    CanStart                                               (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void UCOMP_SkillManager_C::CanStartCombo(int32 ComboIndex, bool* CanStart)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("COMP_SkillManager_C", "CanStartCombo");

	Params::COMP_SkillManager_C_CanStartCombo Parms{};

	Parms.ComboIndex = ComboIndex;

	UObject::ProcessEvent(Func, &Parms);

	if (CanStart != nullptr)
		*CanStart = Parms.CanStart;
}


// Function COMP_SkillManager.COMP_SkillManager_C.CanStartAnyComboOfType
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// ENUM_SkillType                          Type                                                   (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    Result                                                 (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void UCOMP_SkillManager_C::CanStartAnyComboOfType(ENUM_SkillType Type, bool* Result)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("COMP_SkillManager_C", "CanStartAnyComboOfType");

	Params::COMP_SkillManager_C_CanStartAnyComboOfType Parms{};

	Parms.Type = Type;

	UObject::ProcessEvent(Func, &Parms);

	if (Result != nullptr)
		*Result = Parms.Result;
}


// Function COMP_SkillManager.COMP_SkillManager_C.CanStartAnyComboOfTypes
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// TArray<ENUM_SkillType>                  Types                                                  (BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
// bool                                    Result                                                 (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void UCOMP_SkillManager_C::CanStartAnyComboOfTypes(TArray<ENUM_SkillType>& Types, bool* Result)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("COMP_SkillManager_C", "CanStartAnyComboOfTypes");

	Params::COMP_SkillManager_C_CanStartAnyComboOfTypes Parms{};

	Parms.Types = std::move(Types);

	UObject::ProcessEvent(Func, &Parms);

	Types = std::move(Parms.Types);

	if (Result != nullptr)
		*Result = Parms.Result;
}


// Function COMP_SkillManager.COMP_SkillManager_C.GetCombosOfTypeThatCanStart
// (Protected, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// ENUM_SkillType                          ComboType                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// TArray<int32>                           Combos                                                 (Parm, OutParm)

void UCOMP_SkillManager_C::GetCombosOfTypeThatCanStart(ENUM_SkillType ComboType, TArray<int32>* Combos)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("COMP_SkillManager_C", "GetCombosOfTypeThatCanStart");

	Params::COMP_SkillManager_C_GetCombosOfTypeThatCanStart Parms{};

	Parms.ComboType = ComboType;

	UObject::ProcessEvent(Func, &Parms);

	if (Combos != nullptr)
		*Combos = std::move(Parms.Combos);
}


// Function COMP_SkillManager.COMP_SkillManager_C.GetMinAttackComboRange
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// float                                   MinRange                                               (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UCOMP_SkillManager_C::GetMinAttackComboRange(float* MinRange)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("COMP_SkillManager_C", "GetMinAttackComboRange");

	Params::COMP_SkillManager_C_GetMinAttackComboRange Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (MinRange != nullptr)
		*MinRange = Parms.MinRange;
}


// Function COMP_SkillManager.COMP_SkillManager_C.GetMaxAttackComboRange
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// float                                   MaxRange                                               (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UCOMP_SkillManager_C::GetMaxAttackComboRange(float* MaxRange)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("COMP_SkillManager_C", "GetMaxAttackComboRange");

	Params::COMP_SkillManager_C_GetMaxAttackComboRange Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (MaxRange != nullptr)
		*MaxRange = Parms.MaxRange;
}


// Function COMP_SkillManager.COMP_SkillManager_C.CheckCustomRequirements
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// int32                                   ComboIndex                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    Result                                                 (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void UCOMP_SkillManager_C::CheckCustomRequirements(int32 ComboIndex, bool* Result)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("COMP_SkillManager_C", "CheckCustomRequirements");

	Params::COMP_SkillManager_C_CheckCustomRequirements Parms{};

	Parms.ComboIndex = ComboIndex;

	UObject::ProcessEvent(Func, &Parms);

	if (Result != nullptr)
		*Result = Parms.Result;
}


// Function COMP_SkillManager.COMP_SkillManager_C.TriggerComboCooldown
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// int32                                   ComboIndex                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    TriggerGroup                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)

void UCOMP_SkillManager_C::TriggerComboCooldown(int32 ComboIndex, bool TriggerGroup)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("COMP_SkillManager_C", "TriggerComboCooldown");

	Params::COMP_SkillManager_C_TriggerComboCooldown Parms{};

	Parms.ComboIndex = ComboIndex;
	Parms.TriggerGroup = TriggerGroup;

	UObject::ProcessEvent(Func, &Parms);
}


// Function COMP_SkillManager.COMP_SkillManager_C.GetComboByBehaviorTree
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// class UBehaviorTree*                    BehaviorTree                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// int32                                   ComboIndex                                             (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UCOMP_SkillManager_C::GetComboByBehaviorTree(class UBehaviorTree* BehaviorTree, int32* ComboIndex)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("COMP_SkillManager_C", "GetComboByBehaviorTree");

	Params::COMP_SkillManager_C_GetComboByBehaviorTree Parms{};

	Parms.BehaviorTree = BehaviorTree;

	UObject::ProcessEvent(Func, &Parms);

	if (ComboIndex != nullptr)
		*ComboIndex = Parms.ComboIndex;
}


// Function COMP_SkillManager.COMP_SkillManager_C.ShouldSaveComponent
// (Event, Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// struct FStreamingSaveGameComponentParamsParams_0                                               (Parm, OutParm, NoDestructor)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor)

bool UCOMP_SkillManager_C::ShouldSaveComponent(struct FStreamingSaveGameComponentParams* Params_0)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("COMP_SkillManager_C", "ShouldSaveComponent");

	Params::COMP_SkillManager_C_ShouldSaveComponent Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (Params_0 != nullptr)
		*Params_0 = std::move(Parms.Params_0);

	return Parms.ReturnValue;
}

}

