#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: CH_Protoborg_AnimBP

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "Engine_classes.hpp"
#include "AnimGraphRuntime_structs.hpp"
#include "ENUM_Emotions_structs.hpp"
#include "ENUM_DeathBlowType_structs.hpp"


namespace SDK
{

// AnimBlueprintGeneratedClass CH_Protoborg_AnimBP.CH_Protoborg_AnimBP_C
// 0x0410 (0x06D0 - 0x02C0)
class UCH_Protoborg_AnimBP_C final : public UAnimInstance
{
public:
	uint8                                         Pad_2B8[0x8];                                      // 0x02B8(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x02C0(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	struct FAnimNode_Root                         AnimGraphNode_Root;                                // 0x02C8(0x0030)()
	struct FAnimNode_TransitionResult             AnimGraphNode_TransitionResult_1;                  // 0x02F8(0x0028)()
	struct FAnimNode_TransitionResult             AnimGraphNode_TransitionResult;                    // 0x0320(0x0028)()
	struct FAnimNode_SequencePlayer               AnimGraphNode_SequencePlayer_2;                    // 0x0348(0x0080)()
	struct FAnimNode_StateResult                  AnimGraphNode_StateResult_1;                       // 0x03C8(0x0030)()
	struct FAnimNode_Slot                         AnimGraphNode_Slot;                                // 0x03F8(0x0048)()
	struct FAnimNode_SequencePlayer               AnimGraphNode_SequencePlayer_1;                    // 0x0440(0x0080)()
	struct FAnimNode_StateResult                  AnimGraphNode_StateResult;                         // 0x04C0(0x0030)()
	struct FAnimNode_StateMachine                 AnimGraphNode_StateMachine;                        // 0x04F0(0x00B0)()
	struct FAnimNode_BlendListByBool              AnimGraphNode_BlendListByBool;                     // 0x05A0(0x00A0)()
	struct FAnimNode_SequencePlayer               AnimGraphNode_SequencePlayer;                      // 0x0640(0x0080)()
	bool                                          Hit;                                               // 0x06C0(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          IsAlive;                                           // 0x06C1(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_6C2[0x2];                                      // 0x06C2(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         RandomIdleStart;                                   // 0x06C4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

public:
	void ExecuteUbergraph_CH_Protoborg_AnimBP(int32 EntryPoint);
	void BlueprintInitializeAnimation();
	void StartIdleFidgets();
	void AnimNotify_EnteredHitState();
	void EvaluateGraphExposedInputs_ExecuteUbergraph_CH_Protoborg_AnimBP_AnimGraphNode_TransitionResult_A33D9C2E4AB68CF81C7B0FB2EC112113();
	void AnimGraph(struct FPoseLink* AnimGraph_0);
	void ReceiveDeathBlow(ENUM_DeathBlowType BodyPart, bool* Result);
	void ReceiveImpact(const struct FVector& Impulse, const struct FVector& ImpactLocation, const struct FVector& ImpactNormal, class FName BoneName, const class FString& DamageType, float DamageAmount, float FlinchTime, bool* Result);
	void SetIsAlive(bool IsAlive_0, bool* Result);
	void SetMovementParameters(const struct FVector& Velocity, const struct FRotator& Rotation, const struct FRotator& DesiredRotation, bool* Result);
	void SetLookAtAlpha(float Alpha, bool* Result);
	void SetLookAtLocation(const struct FVector& Location, bool* Result);
	void SetStandingTurn(float SignedAngleToTarget, bool IsStanding, bool* Result);
	void SetCatatonic(bool State, bool* Result);
	void SetStance(ENUM_Emotions Stance, bool* Result);
	void GetStance(ENUM_Emotions* Stance);
	void GetRotation(struct FRotator* AnimRotationPerSecond, float* AnimRotationAlpha);
	void SetRelativeAimAngleOffset(float YawOffset, float PitchOffset, float Alpha, bool* Result);
	void SetIdleOverrideSequence(class UAnimSequenceBase* IdleOverride, bool* Result);
	void GetIdleOverrideSequence(class UAnimSequenceBase** IdleOverride);
	void SetAimTarget(class UOBJ_EnemyTarget_C* Target, bool* Result);
	void GetAimTarget(class UOBJ_EnemyTarget_C** Target);
	void SetTravelMode(bool TravelModeOn, bool* Result);
	void SetSprintEnabled(bool SprintEnabled, bool* Result);
	void SetStunnedSequence(class UAnimSequence* StunnedSequence, bool* Result);
	void IsStunned(bool* Result);
	void SetVoiceAmplitude(float VoiceAmplitude, bool* Result);

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"CH_Protoborg_AnimBP_C">();
	}
	static class UCH_Protoborg_AnimBP_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<UCH_Protoborg_AnimBP_C>();
	}
};
static_assert(alignof(UCH_Protoborg_AnimBP_C) == 0x000010, "Wrong alignment on UCH_Protoborg_AnimBP_C");
static_assert(sizeof(UCH_Protoborg_AnimBP_C) == 0x0006D0, "Wrong size on UCH_Protoborg_AnimBP_C");
static_assert(offsetof(UCH_Protoborg_AnimBP_C, UberGraphFrame) == 0x0002C0, "Member 'UCH_Protoborg_AnimBP_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(UCH_Protoborg_AnimBP_C, AnimGraphNode_Root) == 0x0002C8, "Member 'UCH_Protoborg_AnimBP_C::AnimGraphNode_Root' has a wrong offset!");
static_assert(offsetof(UCH_Protoborg_AnimBP_C, AnimGraphNode_TransitionResult_1) == 0x0002F8, "Member 'UCH_Protoborg_AnimBP_C::AnimGraphNode_TransitionResult_1' has a wrong offset!");
static_assert(offsetof(UCH_Protoborg_AnimBP_C, AnimGraphNode_TransitionResult) == 0x000320, "Member 'UCH_Protoborg_AnimBP_C::AnimGraphNode_TransitionResult' has a wrong offset!");
static_assert(offsetof(UCH_Protoborg_AnimBP_C, AnimGraphNode_SequencePlayer_2) == 0x000348, "Member 'UCH_Protoborg_AnimBP_C::AnimGraphNode_SequencePlayer_2' has a wrong offset!");
static_assert(offsetof(UCH_Protoborg_AnimBP_C, AnimGraphNode_StateResult_1) == 0x0003C8, "Member 'UCH_Protoborg_AnimBP_C::AnimGraphNode_StateResult_1' has a wrong offset!");
static_assert(offsetof(UCH_Protoborg_AnimBP_C, AnimGraphNode_Slot) == 0x0003F8, "Member 'UCH_Protoborg_AnimBP_C::AnimGraphNode_Slot' has a wrong offset!");
static_assert(offsetof(UCH_Protoborg_AnimBP_C, AnimGraphNode_SequencePlayer_1) == 0x000440, "Member 'UCH_Protoborg_AnimBP_C::AnimGraphNode_SequencePlayer_1' has a wrong offset!");
static_assert(offsetof(UCH_Protoborg_AnimBP_C, AnimGraphNode_StateResult) == 0x0004C0, "Member 'UCH_Protoborg_AnimBP_C::AnimGraphNode_StateResult' has a wrong offset!");
static_assert(offsetof(UCH_Protoborg_AnimBP_C, AnimGraphNode_StateMachine) == 0x0004F0, "Member 'UCH_Protoborg_AnimBP_C::AnimGraphNode_StateMachine' has a wrong offset!");
static_assert(offsetof(UCH_Protoborg_AnimBP_C, AnimGraphNode_BlendListByBool) == 0x0005A0, "Member 'UCH_Protoborg_AnimBP_C::AnimGraphNode_BlendListByBool' has a wrong offset!");
static_assert(offsetof(UCH_Protoborg_AnimBP_C, AnimGraphNode_SequencePlayer) == 0x000640, "Member 'UCH_Protoborg_AnimBP_C::AnimGraphNode_SequencePlayer' has a wrong offset!");
static_assert(offsetof(UCH_Protoborg_AnimBP_C, Hit) == 0x0006C0, "Member 'UCH_Protoborg_AnimBP_C::Hit' has a wrong offset!");
static_assert(offsetof(UCH_Protoborg_AnimBP_C, IsAlive) == 0x0006C1, "Member 'UCH_Protoborg_AnimBP_C::IsAlive' has a wrong offset!");
static_assert(offsetof(UCH_Protoborg_AnimBP_C, RandomIdleStart) == 0x0006C4, "Member 'UCH_Protoborg_AnimBP_C::RandomIdleStart' has a wrong offset!");

}

