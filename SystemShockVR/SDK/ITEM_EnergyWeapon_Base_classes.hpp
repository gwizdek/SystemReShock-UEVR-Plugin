#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: ITEM_EnergyWeapon_Base

#include "Basic.hpp"

#include "ENUM_ActionPriority_structs.hpp"
#include "Engine_structs.hpp"
#include "ITEM_WeaponBase_classes.hpp"


namespace SDK
{

// BlueprintGeneratedClass ITEM_EnergyWeapon_Base.ITEM_EnergyWeapon_Base_C
// 0x0078 (0x03C8 - 0x0350)
class UITEM_EnergyWeapon_Base_C : public UITEM_WeaponBase_C
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame_ITEM_EnergyWeapon_Base_C;           // 0x0350(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	int32                                         CoolingRate;                                       // 0x0358(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CriticalHeatThreshold;                             // 0x035C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         SafetyHeatThreshold;                               // 0x0360(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         DelayBeforeCooling;                                // 0x0364(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         ManualQueueDuration;                               // 0x0368(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         AutomaticQueueDuration;                            // 0x036C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         LastHeatPercentage;                                // 0x0370(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, SaveGame, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         LastHeatTimestamp;                                 // 0x0374(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, SaveGame, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Overheated;                                        // 0x0378(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, SaveGame, IsPlainOldData, NoDestructor)
	uint8                                         Pad_379[0x7];                                      // 0x0379(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTimerHandle                           HeatUpdateTimerHandle;                             // 0x0380(0x0008)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	TSoftObjectPtr<class UAnimMontage>            DischargeFailMontage;                              // 0x0388(0x0028)(Edit, BlueprintVisible, HasGetValueTypeHash)
	struct FTimerHandle                           AllowRefireTimerHandle;                            // 0x03B0(0x0008)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	struct FTimerHandle                           AutoFireTimerHandle;                               // 0x03B8(0x0008)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	class UAnimMontage*                           CachedDischargeFailMontage;                        // 0x03C0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

public:
	void ExecuteUbergraph_ITEM_EnergyWeapon_Base(int32 EntryPoint);
	void StreamWeaponMontages();
	void OnLoaded_7C46D5834BE1E67FCA70F5A801834542(class UObject* Loaded);
	void HasEnoughEnergyToActivate(bool* Result);
	void GetOwnerEnergy(int32* CurrentEnergy, int32* MaxEnergy);
	void GetDischargeMontage(class UAnimMontage** Montage);
	void InitializeEnergyWeaponState();
	void TryActivateWithPriority(ENUM_ActionPriority Priority, float QueueTime, bool* Result);
	void ConsumeEnergyForCurrentMode();
	void ConsumeEnergy(int32 EnergyValue);
	void UpdateHeat();
	void IsOverheated(bool* Result);
	void GetHeat(float* HeatPercentage);
	void AddHeat(float HeatPercentage);
	void ResetHeat();
	void TryStartHeatTimer();
	void TryStopHeatTimer();
	void OnUpdateHeat();
	void UpdateVisualHeatState();
	void UpdateVisualOverheatedState(bool State);
	void UpdateVisualModeState();
	void OnBecameOverheated();
	void OnFinishedOverheating();
	void OnDischargeMontageStarted();
	void EVENT_OnAllowRefire();
	void EVENT_OnDischargeStarted();
	void GetLastHeatPercentage(float* Result);
	void GetCoolingRate(int32* Result);
	void EVENT_OnAllowAutomaticRefire();
	void ShouldReloadWithBattery(bool* Result);
	void OnWeaponBecameActivatable(class APAWN_SystemShockCharacter_C* Character, bool ShowImmediately);
	void GetWeaponModeDisplayName(int32 ModeIndex, bool ShortName, class FText* Result);
	void SetCurrentMode(int32 Mode, bool* Result);
	void TryBeginReloading(bool* Result);
	void OnBecomeUnactivatable(bool* Result);
	void Activate(class APAWN_SystemShockCharacter_C* Character, bool* Result);
	void Deactivate(bool* Result);

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"ITEM_EnergyWeapon_Base_C">();
	}
	static class UITEM_EnergyWeapon_Base_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<UITEM_EnergyWeapon_Base_C>();
	}
};
static_assert(alignof(UITEM_EnergyWeapon_Base_C) == 0x000008, "Wrong alignment on UITEM_EnergyWeapon_Base_C");
static_assert(sizeof(UITEM_EnergyWeapon_Base_C) == 0x0003C8, "Wrong size on UITEM_EnergyWeapon_Base_C");
static_assert(offsetof(UITEM_EnergyWeapon_Base_C, UberGraphFrame_ITEM_EnergyWeapon_Base_C) == 0x000350, "Member 'UITEM_EnergyWeapon_Base_C::UberGraphFrame_ITEM_EnergyWeapon_Base_C' has a wrong offset!");
static_assert(offsetof(UITEM_EnergyWeapon_Base_C, CoolingRate) == 0x000358, "Member 'UITEM_EnergyWeapon_Base_C::CoolingRate' has a wrong offset!");
static_assert(offsetof(UITEM_EnergyWeapon_Base_C, CriticalHeatThreshold) == 0x00035C, "Member 'UITEM_EnergyWeapon_Base_C::CriticalHeatThreshold' has a wrong offset!");
static_assert(offsetof(UITEM_EnergyWeapon_Base_C, SafetyHeatThreshold) == 0x000360, "Member 'UITEM_EnergyWeapon_Base_C::SafetyHeatThreshold' has a wrong offset!");
static_assert(offsetof(UITEM_EnergyWeapon_Base_C, DelayBeforeCooling) == 0x000364, "Member 'UITEM_EnergyWeapon_Base_C::DelayBeforeCooling' has a wrong offset!");
static_assert(offsetof(UITEM_EnergyWeapon_Base_C, ManualQueueDuration) == 0x000368, "Member 'UITEM_EnergyWeapon_Base_C::ManualQueueDuration' has a wrong offset!");
static_assert(offsetof(UITEM_EnergyWeapon_Base_C, AutomaticQueueDuration) == 0x00036C, "Member 'UITEM_EnergyWeapon_Base_C::AutomaticQueueDuration' has a wrong offset!");
static_assert(offsetof(UITEM_EnergyWeapon_Base_C, LastHeatPercentage) == 0x000370, "Member 'UITEM_EnergyWeapon_Base_C::LastHeatPercentage' has a wrong offset!");
static_assert(offsetof(UITEM_EnergyWeapon_Base_C, LastHeatTimestamp) == 0x000374, "Member 'UITEM_EnergyWeapon_Base_C::LastHeatTimestamp' has a wrong offset!");
static_assert(offsetof(UITEM_EnergyWeapon_Base_C, Overheated) == 0x000378, "Member 'UITEM_EnergyWeapon_Base_C::Overheated' has a wrong offset!");
static_assert(offsetof(UITEM_EnergyWeapon_Base_C, HeatUpdateTimerHandle) == 0x000380, "Member 'UITEM_EnergyWeapon_Base_C::HeatUpdateTimerHandle' has a wrong offset!");
static_assert(offsetof(UITEM_EnergyWeapon_Base_C, DischargeFailMontage) == 0x000388, "Member 'UITEM_EnergyWeapon_Base_C::DischargeFailMontage' has a wrong offset!");
static_assert(offsetof(UITEM_EnergyWeapon_Base_C, AllowRefireTimerHandle) == 0x0003B0, "Member 'UITEM_EnergyWeapon_Base_C::AllowRefireTimerHandle' has a wrong offset!");
static_assert(offsetof(UITEM_EnergyWeapon_Base_C, AutoFireTimerHandle) == 0x0003B8, "Member 'UITEM_EnergyWeapon_Base_C::AutoFireTimerHandle' has a wrong offset!");
static_assert(offsetof(UITEM_EnergyWeapon_Base_C, CachedDischargeFailMontage) == 0x0003C0, "Member 'UITEM_EnergyWeapon_Base_C::CachedDischargeFailMontage' has a wrong offset!");

}

