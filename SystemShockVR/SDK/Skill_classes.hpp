#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: Skill

#include "Basic.hpp"

#include "ENUM_ActionPriority_structs.hpp"
#include "ENUM_EnemyAttackType_structs.hpp"
#include "CoreGame_classes.hpp"


namespace SDK
{

// BlueprintGeneratedClass Skill.Skill_C
// 0x0068 (0x0090 - 0x0028)
class USkill_C : public UWorldObject
{
public:
	class UAttribDamageType*                      DamageType;                                        // 0x0028(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UAnimMontage*                           Montage;                                           // 0x0030(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ENUM_ActionPriority                           Priority;                                          // 0x0038(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_39[0x7];                                       // 0x0039(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	FMulticastInlineDelegateProperty_             SkillActivated;                                    // 0x0040(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)
	FMulticastInlineDelegateProperty_             SkillDeactivated;                                  // 0x0050(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)
	class UCharacterAction_C*                     ActiveCharacterAction;                             // 0x0060(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, SaveGame, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ENUM_EnemyAttackType                          AttackType;                                        // 0x0068(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_69[0x7];                                       // 0x0069(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 ActivateSkillMessage;                              // 0x0070(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, HasGetValueTypeHash)
	class FString                                 DeactivateSkillMessage;                            // 0x0080(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, HasGetValueTypeHash)

public:
	void SkillActivated__DelegateSignature(class USkill_C* Skill);
	void SkillDeactivated__DelegateSignature(class USkill_C* Skill);
	void InitializeSkill();
	void TryUseSkill(class UCharacterAction_C** Result);
	void ForceUseSkill(class UCharacterAction_C** Result);
	void ForceDeactivateSkill();
	void OnActivateSkill(bool* Result);
	void OnDeactivateSkill(bool* Result);
	void IsSkillActivated(bool* Result);
	void GetSkillManager(class UCOMP_SkillManager_C** SkillManager);
	void GetSkillPawn(class APAWN_Enemy_C** SkillPawn);
	void CanUseSkill(bool* Result);
	void IsMontageOptional(bool* Result);
	void EVENT_OnActionFinished();
	void ReceiveAnimationMessage(const class FString& Message, bool* Result);
	void GetAngleToTarget(float* AngleToTarget);
	void GetSkillTargetLocations(TArray<struct FVector>* Locations);
	void GetPredictedTargetLocation(float TimeInFuture, struct FVector* PredictedLocation);

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"Skill_C">();
	}
	static class USkill_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<USkill_C>();
	}
};
static_assert(alignof(USkill_C) == 0x000008, "Wrong alignment on USkill_C");
static_assert(sizeof(USkill_C) == 0x000090, "Wrong size on USkill_C");
static_assert(offsetof(USkill_C, DamageType) == 0x000028, "Member 'USkill_C::DamageType' has a wrong offset!");
static_assert(offsetof(USkill_C, Montage) == 0x000030, "Member 'USkill_C::Montage' has a wrong offset!");
static_assert(offsetof(USkill_C, Priority) == 0x000038, "Member 'USkill_C::Priority' has a wrong offset!");
static_assert(offsetof(USkill_C, SkillActivated) == 0x000040, "Member 'USkill_C::SkillActivated' has a wrong offset!");
static_assert(offsetof(USkill_C, SkillDeactivated) == 0x000050, "Member 'USkill_C::SkillDeactivated' has a wrong offset!");
static_assert(offsetof(USkill_C, ActiveCharacterAction) == 0x000060, "Member 'USkill_C::ActiveCharacterAction' has a wrong offset!");
static_assert(offsetof(USkill_C, AttackType) == 0x000068, "Member 'USkill_C::AttackType' has a wrong offset!");
static_assert(offsetof(USkill_C, ActivateSkillMessage) == 0x000070, "Member 'USkill_C::ActivateSkillMessage' has a wrong offset!");
static_assert(offsetof(USkill_C, DeactivateSkillMessage) == 0x000080, "Member 'USkill_C::DeactivateSkillMessage' has a wrong offset!");

}

