#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: TextTyper

#include "Basic.hpp"

#include "TextTyper_classes.hpp"
#include "TextTyper_parameters.hpp"


namespace SDK
{

// Function TextTyper.TextTyper_C.SetTextMessage
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// class FText                             Message                                                (BlueprintVisible, BlueprintReadOnly, Parm)
// float                                   GameTimeSeconds                                        (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    Result                                                 (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void UTextTyper_C::SetTextMessage(const class FText& Message, float GameTimeSeconds, bool* Result)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("TextTyper_C", "SetTextMessage");

	Params::TextTyper_C_SetTextMessage Parms{};

	Parms.Message = std::move(Message);
	Parms.GameTimeSeconds = GameTimeSeconds;

	UObject::ProcessEvent(Func, &Parms);

	if (Result != nullptr)
		*Result = Parms.Result;
}


// Function TextTyper.TextTyper_C.ResetMessage
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    Result                                                 (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void UTextTyper_C::ResetMessage(bool* Result)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("TextTyper_C", "ResetMessage");

	Params::TextTyper_C_ResetMessage Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (Result != nullptr)
		*Result = Parms.Result;
}


// Function TextTyper.TextTyper_C.GetCurrentMessage
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// float                                   GameTimeSeconds                                        (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class FText                             Message                                                (Parm, OutParm)

void UTextTyper_C::GetCurrentMessage(float GameTimeSeconds, class FText* Message)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("TextTyper_C", "GetCurrentMessage");

	Params::TextTyper_C_GetCurrentMessage Parms{};

	Parms.GameTimeSeconds = GameTimeSeconds;

	UObject::ProcessEvent(Func, &Parms);

	if (Message != nullptr)
		*Message = std::move(Parms.Message);
}


// Function TextTyper.TextTyper_C.HasMessage
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// bool                                    Result                                                 (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void UTextTyper_C::HasMessage(bool* Result)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("TextTyper_C", "HasMessage");

	Params::TextTyper_C_HasMessage Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (Result != nullptr)
		*Result = Parms.Result;
}


// Function TextTyper.TextTyper_C.GetElapsedTime
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// float                                   GameTimeSeconds                                        (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// float                                   ElapsedSeconds                                         (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UTextTyper_C::GetElapsedTime(float GameTimeSeconds, float* ElapsedSeconds)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("TextTyper_C", "GetElapsedTime");

	Params::TextTyper_C_GetElapsedTime Parms{};

	Parms.GameTimeSeconds = GameTimeSeconds;

	UObject::ProcessEvent(Func, &Parms);

	if (ElapsedSeconds != nullptr)
		*ElapsedSeconds = Parms.ElapsedSeconds;
}


// Function TextTyper.TextTyper_C.GetTargetMessage
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// class FText                             Message                                                (Parm, OutParm)

void UTextTyper_C::GetTargetMessage(class FText* Message)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("TextTyper_C", "GetTargetMessage");

	Params::TextTyper_C_GetTargetMessage Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (Message != nullptr)
		*Message = std::move(Parms.Message);
}


// Function TextTyper.TextTyper_C.GetCurrentCharacterCount
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// float                                   GameTimeSeconds                                        (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// int32                                   Result                                                 (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UTextTyper_C::GetCurrentCharacterCount(float GameTimeSeconds, int32* Result)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("TextTyper_C", "GetCurrentCharacterCount");

	Params::TextTyper_C_GetCurrentCharacterCount Parms{};

	Parms.GameTimeSeconds = GameTimeSeconds;

	UObject::ProcessEvent(Func, &Parms);

	if (Result != nullptr)
		*Result = Parms.Result;
}


// Function TextTyper.TextTyper_C.GetMessageWithCharacterCount
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// int32                                   CharacterCount                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class FText                             Message                                                (Parm, OutParm)

void UTextTyper_C::GetMessageWithCharacterCount(int32 CharacterCount, class FText* Message)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("TextTyper_C", "GetMessageWithCharacterCount");

	Params::TextTyper_C_GetMessageWithCharacterCount Parms{};

	Parms.CharacterCount = CharacterCount;

	UObject::ProcessEvent(Func, &Parms);

	if (Message != nullptr)
		*Message = std::move(Parms.Message);
}

}

