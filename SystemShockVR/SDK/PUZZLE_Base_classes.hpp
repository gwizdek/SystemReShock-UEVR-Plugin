#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: PUZZLE_Base

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "ENUM_CardinalDirection_structs.hpp"
#include "ENUM_InteractionType_structs.hpp"
#include "INTERACT_Focusable_Base_classes.hpp"
#include "ENUM_InteractResultType_structs.hpp"
#include "ENUM_PuzzleSolveType_structs.hpp"
#include "ENUM_DoorState_structs.hpp"
#include "ENUM_GameDifficulty_structs.hpp"


namespace SDK
{

// BlueprintGeneratedClass PUZZLE_Base.PUZZLE_Base_C
// 0x02D8 (0x0660 - 0x0388)
class APUZZLE_Base_C : public AINTERACT_Focusable_Base_C
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame_PUZZLE_Base_C;                      // 0x0388(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	class UCOMP_AttribManager_C*                  COMP_AttribManager;                                // 0x0390(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UBoxComponent*                          BotCollisionBox;                                   // 0x0398(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UBoxComponent*                          TopCollisionBox;                                   // 0x03A0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UBoxComponent*                          LogicPortScanBox;                                  // 0x03A8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USceneComponent*                        FocusNode;                                         // 0x03B0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UBoxComponent*                          FocusTargetBox;                                    // 0x03B8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UStaticMeshComponent*                   LogicProbe;                                        // 0x03C0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UCOMP_VoxelCullable_C*                  COMP_VoxelCullable;                                // 0x03C8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USceneComponent*                        SoundLocation;                                     // 0x03D0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UBoxComponent*                          BackplateCollision;                                // 0x03D8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USpotLightComponent*                    SpotLight;                                         // 0x03E0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UCOMP_ScannableObject_C*                COMP_ScannableObject;                              // 0x03E8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UBoxComponent*                          PuzzleCoverScanBox;                                // 0x03F0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USkeletalMeshComponent*                 PuzzleBox;                                         // 0x03F8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class AINTERACT_Base_C*                       TargetInteractable;                                // 0x0400(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          IsCoverOpen;                                       // 0x0408(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, SaveGame, IsPlainOldData, NoDestructor)
	uint8                                         Pad_409[0x7];                                      // 0x0409(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   BusyText;                                          // 0x0410(0x0018)(Edit, BlueprintVisible, DisableEditOnInstance)
	bool                                          IsLightTurnedOn;                                   // 0x0428(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          IsSolved;                                          // 0x0429(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, SaveGame, IsPlainOldData, NoDestructor)
	uint8                                         Pad_42A[0x6];                                      // 0x042A(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   SolvedText;                                        // 0x0430(0x0018)(Edit, BlueprintVisible, DisableEditOnInstance)
	bool                                          IsPowered;                                         // 0x0448(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          UsedLogicProbe;                                    // 0x0449(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, SaveGame, IsPlainOldData, NoDestructor)
	uint8                                         Pad_44A[0x6];                                      // 0x044A(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   NoReroutingRequiredText;                           // 0x0450(0x0018)(Edit, BlueprintVisible, DisableEditOnInstance)
	ENUM_InteractionType                          TargetInteractionType;                             // 0x0468(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_469[0x7];                                      // 0x0469(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TMap<class FName, bool>                       StoryQuests;                                       // 0x0470(0x0050)(Edit, BlueprintVisible)
	TArray<class AINTERACT_Base_C*>               AdditionalInteracts;                               // 0x04C0(0x0010)(Edit, BlueprintVisible, DisableEditOnTemplate)
	TArray<class AINTERACT_Base_C*>               UnlockInteracts;                                   // 0x04D0(0x0010)(Edit, BlueprintVisible, DisableEditOnTemplate)
	bool                                          RequiresSecurityLevel;                             // 0x04E0(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_4E1[0x7];                                      // 0x04E1(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TSoftObjectPtr<class UAnimMontage>            OpenMontage;                                       // 0x04E8(0x0028)(Edit, BlueprintVisible, HasGetValueTypeHash)
	TSoftObjectPtr<class UAnimMontage>            CloseMontage;                                      // 0x0510(0x0028)(Edit, BlueprintVisible, HasGetValueTypeHash)
	int32                                         RequiredSecurityLevel;                             // 0x0538(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FName                                   ChosenPuzzleName;                                  // 0x053C(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, SaveGame, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_544[0x4];                                      // 0x0544(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TSoftClassPtr<class UClass>                   LogicProbeItem;                                    // 0x0548(0x0028)(Edit, BlueprintVisible, DisableEditOnInstance, HasGetValueTypeHash)
	TMap<uint8, uint8>                            CellChanges;                                       // 0x0570(0x0050)(Edit, BlueprintVisible, DisableEditOnInstance, SaveGame)
	TArray<class UCOMP_PuzzleCell_Base_C*>        PuzzleCells;                                       // 0x05C0(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance, ContainsInstancedReference)
	TArray<class UMeshComponent*>                 SpecialComponents;                                 // 0x05D0(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance, ContainsInstancedReference)
	int32                                         GridDimensions;                                    // 0x05E0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_5E4[0x4];                                      // 0x05E4(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UDataTable*                             PuzzleTable_Easy;                                  // 0x05E8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UDataTable*                             PuzzleTable_Normal;                                // 0x05F0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UDataTable*                             PuzzleTable_Hard;                                  // 0x05F8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FDataTableRowHandle                    DebugPuzzle;                                       // 0x0600(0x0010)(Edit, BlueprintVisible, NoDestructor)
	class FText                                   PortRequiresLogicProbe;                            // 0x0610(0x0018)(Edit, BlueprintVisible, DisableEditOnInstance)
	float                                         CachedEmissiveStrength;                            // 0x0628(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_62C[0x4];                                      // 0x062C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTimerHandle                           StopTicksTimerHandle;                              // 0x0630(0x0008)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	struct FTimerHandle                           UnlockBindingTimerHandle;                          // 0x0638(0x0008)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	struct FDataTableRowHandle                    CompleteTutorialOnOpen;                            // 0x0640(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor)
	struct FDataTableRowHandle                    ManualSolveAchievementHandle;                      // 0x0650(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor)

public:
	void ExecuteUbergraph_PUZZLE_Base(int32 EntryPoint);
	void BndEvt__COMP_VoxelCullable_K2Node_ComponentBoundEvent_0_CullableVisibilitySignature__DelegateSignature(bool bVisibleState);
	void ReceiveBeginPlay();
	void UserConstructionScript();
	void GetTargetShape(class UPrimitiveComponent* CursorPrimitive, class UShapeComponent** ShapeComponent);
	void TryInteract(class AActor* SourceActor, class UPrimitiveComponent* CursorPrimitive, ENUM_InteractionType InteractionType, struct FSTRUCT_InteractResults* InteractResults);
	void GetAnimInstance(class UAnimBP_JunctionBox_C** AnimInstance);
	void EVENT_IsDoneOpening();
	void EVENT_OnPuzzleBoxClosed();
	void InitializePuzzle();
	void InitializeAttributes();
	void InitializeAsSolved();
	void InitializeAsOpened();
	void InteractWithPuzzlePrimitive(class UPrimitiveComponent* CursorPrimitive, ENUM_InteractResultType* Result, class FText* ResultText);
	void HandleSolvedOutcomes(bool SolvedByPlayer);
	void SetPuzzleLightState(bool State);
	void GetPuzzleShape(class UPrimitiveComponent* CursorPrimitive, class UShapeComponent** TargetShape);
	void SetPuzzleSolved(ENUM_PuzzleSolveType SolveType);
	void TrySolvePossiblyStalePuzzle();
	void TryChangeUnlockEventBindings();
	void TryCompleteOpenTutorial();
	void OpenPuzzleBox(bool* Result);
	void RegisterPuzzleCell(class UCOMP_PuzzleCell_Base_C* PuzzleCell);
	void RegisterSpecialComponent(class UMeshComponent* MeshComponent);
	void UpdateMeshEmissiveStrength(float Scale);
	void UpdatePuzzleVisibility(bool VisibilityState);
	void EVENT_OnStopComponentTicks();
	void EVENT_OnSecurityLevelChanged(int32 NewSecurityLevel);
	void ShowLogicProbeMesh();
	void GetFocusWorldTransform(struct FTransform* Transform);
	void GetCellChanges(uint8 Index_0, uint8* Result);
	void SaveCellChanges(uint8 Index_0, uint8 Params_0);
	void LoadPuzzleFromDataTable();
	void ApplySavedCellChanges();
	void IsJunctionBoxFunctional(bool* Result);
	void IsPuzzleSolved(bool* Result);
	void IsVerticalAxisReversed(bool* Result);
	void GetGridDimensions(int32* Result);
	void GetCellAtLocation(const struct FIntPoint& Location, class UCOMP_PuzzleCell_Base_C** Cell);
	void CycleFocusedPrimitiveComponent(class UPrimitiveComponent* CursorPrimitive, bool Vertical, bool Previous);
	void GetCellLocationFromIndex(int32 CellIndex, struct FIntPoint* CellLocation);
	void OnFinishedFocusing();
	void GetPuzzleRowToUse(struct FDataTableRowHandle* PuzzleRow);
	void GetCellIndexFromLocation(const struct FIntPoint& Location, int32* Result);
	void CanManipulateUnlockTargets(bool* Result);
	void EVENT_OnInteractLockStateChanged(class AINTERACT_Base_C* Interact);
	void EVENT_OnLockedDoorStateChanged(class AINTERACT_DoorBase_C* Door, ENUM_DoorState State);
	void ShouldFocusOnInteract(class AController* Controller, bool* Result);
	void GetCellComponentFromPrimitive(class UPrimitiveComponent* PrimitiveComponent, class UCOMP_PuzzleCell_Base_C** Result);
	void TryReceiveItem(class UITEM_Base_C* Item, bool* Result);
	void CanReceiveItem(class UITEM_Base_C* Item, bool* Result);
	void GetCellInDirection(const struct FIntPoint& SourcePosition, ENUM_CardinalDirection Direction, struct FIntPoint* TargetPosition);
	void EVENT_OnDisableAttribChanged(float CurrValue, float LastValue);
	void SetInteractPowered(bool State, bool* Result);
	void CanModifyInteractPower(bool* Result);
	void ResumeChannelingInteraction(class APAWN_Hacker_Simple_C* HackerPawn);

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"PUZZLE_Base_C">();
	}
	static class APUZZLE_Base_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<APUZZLE_Base_C>();
	}
};
static_assert(alignof(APUZZLE_Base_C) == 0x000008, "Wrong alignment on APUZZLE_Base_C");
static_assert(sizeof(APUZZLE_Base_C) == 0x000660, "Wrong size on APUZZLE_Base_C");
static_assert(offsetof(APUZZLE_Base_C, UberGraphFrame_PUZZLE_Base_C) == 0x000388, "Member 'APUZZLE_Base_C::UberGraphFrame_PUZZLE_Base_C' has a wrong offset!");
static_assert(offsetof(APUZZLE_Base_C, COMP_AttribManager) == 0x000390, "Member 'APUZZLE_Base_C::COMP_AttribManager' has a wrong offset!");
static_assert(offsetof(APUZZLE_Base_C, BotCollisionBox) == 0x000398, "Member 'APUZZLE_Base_C::BotCollisionBox' has a wrong offset!");
static_assert(offsetof(APUZZLE_Base_C, TopCollisionBox) == 0x0003A0, "Member 'APUZZLE_Base_C::TopCollisionBox' has a wrong offset!");
static_assert(offsetof(APUZZLE_Base_C, LogicPortScanBox) == 0x0003A8, "Member 'APUZZLE_Base_C::LogicPortScanBox' has a wrong offset!");
static_assert(offsetof(APUZZLE_Base_C, FocusNode) == 0x0003B0, "Member 'APUZZLE_Base_C::FocusNode' has a wrong offset!");
static_assert(offsetof(APUZZLE_Base_C, FocusTargetBox) == 0x0003B8, "Member 'APUZZLE_Base_C::FocusTargetBox' has a wrong offset!");
static_assert(offsetof(APUZZLE_Base_C, LogicProbe) == 0x0003C0, "Member 'APUZZLE_Base_C::LogicProbe' has a wrong offset!");
static_assert(offsetof(APUZZLE_Base_C, COMP_VoxelCullable) == 0x0003C8, "Member 'APUZZLE_Base_C::COMP_VoxelCullable' has a wrong offset!");
static_assert(offsetof(APUZZLE_Base_C, SoundLocation) == 0x0003D0, "Member 'APUZZLE_Base_C::SoundLocation' has a wrong offset!");
static_assert(offsetof(APUZZLE_Base_C, BackplateCollision) == 0x0003D8, "Member 'APUZZLE_Base_C::BackplateCollision' has a wrong offset!");
static_assert(offsetof(APUZZLE_Base_C, SpotLight) == 0x0003E0, "Member 'APUZZLE_Base_C::SpotLight' has a wrong offset!");
static_assert(offsetof(APUZZLE_Base_C, COMP_ScannableObject) == 0x0003E8, "Member 'APUZZLE_Base_C::COMP_ScannableObject' has a wrong offset!");
static_assert(offsetof(APUZZLE_Base_C, PuzzleCoverScanBox) == 0x0003F0, "Member 'APUZZLE_Base_C::PuzzleCoverScanBox' has a wrong offset!");
static_assert(offsetof(APUZZLE_Base_C, PuzzleBox) == 0x0003F8, "Member 'APUZZLE_Base_C::PuzzleBox' has a wrong offset!");
static_assert(offsetof(APUZZLE_Base_C, TargetInteractable) == 0x000400, "Member 'APUZZLE_Base_C::TargetInteractable' has a wrong offset!");
static_assert(offsetof(APUZZLE_Base_C, IsCoverOpen) == 0x000408, "Member 'APUZZLE_Base_C::IsCoverOpen' has a wrong offset!");
static_assert(offsetof(APUZZLE_Base_C, BusyText) == 0x000410, "Member 'APUZZLE_Base_C::BusyText' has a wrong offset!");
static_assert(offsetof(APUZZLE_Base_C, IsLightTurnedOn) == 0x000428, "Member 'APUZZLE_Base_C::IsLightTurnedOn' has a wrong offset!");
static_assert(offsetof(APUZZLE_Base_C, IsSolved) == 0x000429, "Member 'APUZZLE_Base_C::IsSolved' has a wrong offset!");
static_assert(offsetof(APUZZLE_Base_C, SolvedText) == 0x000430, "Member 'APUZZLE_Base_C::SolvedText' has a wrong offset!");
static_assert(offsetof(APUZZLE_Base_C, IsPowered) == 0x000448, "Member 'APUZZLE_Base_C::IsPowered' has a wrong offset!");
static_assert(offsetof(APUZZLE_Base_C, UsedLogicProbe) == 0x000449, "Member 'APUZZLE_Base_C::UsedLogicProbe' has a wrong offset!");
static_assert(offsetof(APUZZLE_Base_C, NoReroutingRequiredText) == 0x000450, "Member 'APUZZLE_Base_C::NoReroutingRequiredText' has a wrong offset!");
static_assert(offsetof(APUZZLE_Base_C, TargetInteractionType) == 0x000468, "Member 'APUZZLE_Base_C::TargetInteractionType' has a wrong offset!");
static_assert(offsetof(APUZZLE_Base_C, StoryQuests) == 0x000470, "Member 'APUZZLE_Base_C::StoryQuests' has a wrong offset!");
static_assert(offsetof(APUZZLE_Base_C, AdditionalInteracts) == 0x0004C0, "Member 'APUZZLE_Base_C::AdditionalInteracts' has a wrong offset!");
static_assert(offsetof(APUZZLE_Base_C, UnlockInteracts) == 0x0004D0, "Member 'APUZZLE_Base_C::UnlockInteracts' has a wrong offset!");
static_assert(offsetof(APUZZLE_Base_C, RequiresSecurityLevel) == 0x0004E0, "Member 'APUZZLE_Base_C::RequiresSecurityLevel' has a wrong offset!");
static_assert(offsetof(APUZZLE_Base_C, OpenMontage) == 0x0004E8, "Member 'APUZZLE_Base_C::OpenMontage' has a wrong offset!");
static_assert(offsetof(APUZZLE_Base_C, CloseMontage) == 0x000510, "Member 'APUZZLE_Base_C::CloseMontage' has a wrong offset!");
static_assert(offsetof(APUZZLE_Base_C, RequiredSecurityLevel) == 0x000538, "Member 'APUZZLE_Base_C::RequiredSecurityLevel' has a wrong offset!");
static_assert(offsetof(APUZZLE_Base_C, ChosenPuzzleName) == 0x00053C, "Member 'APUZZLE_Base_C::ChosenPuzzleName' has a wrong offset!");
static_assert(offsetof(APUZZLE_Base_C, LogicProbeItem) == 0x000548, "Member 'APUZZLE_Base_C::LogicProbeItem' has a wrong offset!");
static_assert(offsetof(APUZZLE_Base_C, CellChanges) == 0x000570, "Member 'APUZZLE_Base_C::CellChanges' has a wrong offset!");
static_assert(offsetof(APUZZLE_Base_C, PuzzleCells) == 0x0005C0, "Member 'APUZZLE_Base_C::PuzzleCells' has a wrong offset!");
static_assert(offsetof(APUZZLE_Base_C, SpecialComponents) == 0x0005D0, "Member 'APUZZLE_Base_C::SpecialComponents' has a wrong offset!");
static_assert(offsetof(APUZZLE_Base_C, GridDimensions) == 0x0005E0, "Member 'APUZZLE_Base_C::GridDimensions' has a wrong offset!");
static_assert(offsetof(APUZZLE_Base_C, PuzzleTable_Easy) == 0x0005E8, "Member 'APUZZLE_Base_C::PuzzleTable_Easy' has a wrong offset!");
static_assert(offsetof(APUZZLE_Base_C, PuzzleTable_Normal) == 0x0005F0, "Member 'APUZZLE_Base_C::PuzzleTable_Normal' has a wrong offset!");
static_assert(offsetof(APUZZLE_Base_C, PuzzleTable_Hard) == 0x0005F8, "Member 'APUZZLE_Base_C::PuzzleTable_Hard' has a wrong offset!");
static_assert(offsetof(APUZZLE_Base_C, DebugPuzzle) == 0x000600, "Member 'APUZZLE_Base_C::DebugPuzzle' has a wrong offset!");
static_assert(offsetof(APUZZLE_Base_C, PortRequiresLogicProbe) == 0x000610, "Member 'APUZZLE_Base_C::PortRequiresLogicProbe' has a wrong offset!");
static_assert(offsetof(APUZZLE_Base_C, CachedEmissiveStrength) == 0x000628, "Member 'APUZZLE_Base_C::CachedEmissiveStrength' has a wrong offset!");
static_assert(offsetof(APUZZLE_Base_C, StopTicksTimerHandle) == 0x000630, "Member 'APUZZLE_Base_C::StopTicksTimerHandle' has a wrong offset!");
static_assert(offsetof(APUZZLE_Base_C, UnlockBindingTimerHandle) == 0x000638, "Member 'APUZZLE_Base_C::UnlockBindingTimerHandle' has a wrong offset!");
static_assert(offsetof(APUZZLE_Base_C, CompleteTutorialOnOpen) == 0x000640, "Member 'APUZZLE_Base_C::CompleteTutorialOnOpen' has a wrong offset!");
static_assert(offsetof(APUZZLE_Base_C, ManualSolveAchievementHandle) == 0x000650, "Member 'APUZZLE_Base_C::ManualSolveAchievementHandle' has a wrong offset!");

}

