#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: COMP_MoveControlManager

#include "Basic.hpp"

#include "ENUM_HackerGender_structs.hpp"
#include "STRUCT_CameraBobParams_structs.hpp"
#include "STRUCT_MoveControlParams_structs.hpp"
#include "ENUM_PlayerMoveSpeed_structs.hpp"
#include "CoreUObject_structs.hpp"
#include "AttributeSystem_structs.hpp"
#include "ENUM_CameraBobType_structs.hpp"
#include "Engine_structs.hpp"
#include "Engine_classes.hpp"
#include "ENUM_MoveInputActionType_structs.hpp"
#include "ENUM_OffReducedNormal_structs.hpp"


namespace SDK
{

// BlueprintGeneratedClass COMP_MoveControlManager.COMP_MoveControlManager_C
// 0x0C18 (0x0CC8 - 0x00B0)
class UCOMP_MoveControlManager_C final : public UActorComponent
{
public:
	TArray<class UMOVECONTROL_Base_C*>            MoveControls;                                      // 0x00B0(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance)
	struct FSTRUCT_MoveControlParams              MoveControlParams;                                 // 0x00C0(0x0028)(Edit, BlueprintVisible, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector2D                              LastMoveInputAxes;                                 // 0x00E8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector2D                              LastLookInputAxes;                                 // 0x00F0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class APAWN_Hacker_Simple_C*                  PlayerOwner;                                       // 0x00F8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UCharacterMovementComponent*            CharacterMovement;                                 // 0x0100(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class USAVE_Settings_C*                       ShockSettings;                                     // 0x0108(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UInventoryBag_C*                        HardwareBag;                                       // 0x0110(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ENUM_HackerGender                             CachedGender;                                      // 0x0118(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_119[0x7];                                      // 0x0119(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<float>                                 MoveActionInputValues;                             // 0x0120(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance)
	float                                         LeanProgress;                                      // 0x0130(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, SaveGame, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         LeanDuration;                                      // 0x0134(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         LeanCraneOffsetStanding;                           // 0x0138(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         TorsoToEyeHeight;                                  // 0x013C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, SaveGame, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         LeanRollScale;                                     // 0x0140(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          IsCrouching;                                       // 0x0144(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, SaveGame, IsPlainOldData, NoDestructor)
	bool                                          IsTryingToCrouch;                                  // 0x0145(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          WasDuckingDown;                                    // 0x0146(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_147[0x1];                                      // 0x0147(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CrouchProgress;                                    // 0x0148(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, SaveGame, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CrouchDuration;                                    // 0x014C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CrouchHeightRatio;                                 // 0x0150(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         VerticalMeshOffsetStanding;                        // 0x0154(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, SaveGame, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         HalfHeightStanding;                                // 0x0158(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, SaveGame, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         LeanCraneOffsetCrouching;                          // 0x015C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         LeanTorsoAngle;                                    // 0x0160(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          IsTryingToSprint;                                  // 0x0164(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          IsSprinting;                                       // 0x0165(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          IsSkating;                                         // 0x0166(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          SprintByDefault;                                   // 0x0167(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	float                                         DefaultSprintSpeedScale;                           // 0x0168(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_16C[0x4];                                      // 0x016C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FAttribModApplyData                    SprintAttribMod;                                   // 0x0170(0x00A0)(Edit, BlueprintVisible, DisableEditOnInstance)
	float                                         SlumpTimestamp;                                    // 0x0210(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         SlumpAmount;                                       // 0x0214(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FAttribModApplyData                    CrouchSpeedPenaltyAttribMod;                       // 0x0218(0x00A0)(Edit, BlueprintVisible, DisableEditOnInstance)
	bool                                          HasLanded;                                         // 0x02B8(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_2B9[0x7];                                      // 0x02B9(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FAttribModApplyData                    JumpStaminaDrainAttribMod;                         // 0x02C0(0x00A0)(Edit, BlueprintVisible, DisableEditOnInstance)
	bool                                          IsStandingOnGround;                                // 0x0360(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          IsTryingToMove;                                    // 0x0361(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          IsMoving;                                          // 0x0362(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_363[0x5];                                      // 0x0363(0x0005)(Fixing Size After Last Property [ Dumper-7 ])
	class UWeightedAverageFloat*                  WeightedBankRollHistory;                           // 0x0368(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         MaxNormalStrafeBankRoll;                           // 0x0370(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         MaxSkateStrafeBankRoll;                            // 0x0374(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         MaxNormalTurnBankRoll;                             // 0x0378(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          NeedsFootstepVariance;                             // 0x037C(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_37D[0x3];                                      // 0x037D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         FootstepProgress;                                  // 0x0380(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FSTRUCT_CameraBobParams                WalkBobParams;                                     // 0x0384(0x0030)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         FootstepSign;                                      // 0x03B4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         LeanHeadAngle;                                     // 0x03B8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         LeanHeadBankRoll;                                  // 0x03BC(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CurrentBankRampProgress;                           // 0x03C0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector2D                              MoveDirection;                                     // 0x03C4(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CurrentSpeed;                                      // 0x03CC(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         MoveInputMagnitude;                                // 0x03D0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         BaseWalkSpeed;                                     // 0x03D4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         BaseSprintSpeed;                                   // 0x03D8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         MoveAxisThreshold;                                 // 0x03DC(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          NeedsBreathingVariance;                            // 0x03E0(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_3E1[0x3];                                      // 0x03E1(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         FatigueRatio;                                      // 0x03E4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         BreathingProgress;                                 // 0x03E8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector2D                              BreatheDurations;                                  // 0x03EC(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         HipHalfWidth_Idle;                                 // 0x03F4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         HipHalfWidth_Sprint;                               // 0x03F8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         StrideHalfLength_Walk;                             // 0x03FC(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         StrideHalfLength_Sprint;                           // 0x0400(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         RunDetectionRadius;                                // 0x0404(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         FootstepEventOffset;                               // 0x0408(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector2D                              FootstepWalkDurations;                             // 0x040C(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector2D                              FootstepStrafeDurations;                           // 0x0414(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         BaseSkateSpeed;                                    // 0x041C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         MaxSkateSpeed;                                     // 0x0420(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         SprintDirectionSpeedBias;                          // 0x0424(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UHARDWARE_TurboBoots_Base_C*            TurboBootsHardware;                                // 0x0428(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UAttribInstance*                        StaminaAttribInstance;                             // 0x0430(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UAttribInstance*                        WalkSpeedAttribInstance;                           // 0x0438(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ENUM_CameraBobType                            CurrentBobType;                                    // 0x0440(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_441[0x3];                                      // 0x0441(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CurrentBobProgress;                                // 0x0444(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CurrentBobParamScale;                              // 0x0448(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FSTRUCT_CameraBobParams                CurrentBobParams;                                  // 0x044C(0x0030)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FSTRUCT_CameraBobParams                StrafeBobParams;                                   // 0x047C(0x0030)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FSTRUCT_CameraBobParams                BreatheBobParams;                                  // 0x04AC(0x0030)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector2D                              VarianceWidthHeight;                               // 0x04DC(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector2D                              VariancePitchYaw;                                  // 0x04E4(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_4EC[0x4];                                      // 0x04EC(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UWeightedAverageVec2*                   CameraBobPosHistory;                               // 0x04F0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UWeightedAverageVec2*                   CameraBobAngHistory;                               // 0x04F8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         BreatheBobFatigueRatio;                            // 0x0500(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_504[0x4];                                      // 0x0504(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UDataTable*                             FootstepImpactTable;                               // 0x0508(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FAttribModApplyData                    JumpSpreadIncreaseMod;                             // 0x0510(0x00A0)(Edit, BlueprintVisible, DisableEditOnInstance)
	struct FAttribModApplyData                    JumpFatiguedAttribMod;                             // 0x05B0(0x00A0)(Edit, BlueprintVisible, DisableEditOnInstance)
	class UAttribInstance*                        JumpSpeedAttribInstance;                           // 0x0650(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UDataTable*                             JumpImpactTable;                                   // 0x0658(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UDataTable*                             LandImpactTable;                                   // 0x0660(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UCurveFloat*                            SlumpCurveMin;                                     // 0x0668(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UCurveFloat*                            SlumpCurveMax;                                     // 0x0670(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         JumpHipOffset;                                     // 0x0678(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         FallDamageSpeedMin;                                // 0x067C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         FallDamageSpeedMax;                                // 0x0680(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         LandingSpeedMinForSlump;                           // 0x0684(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         LandingSpeedMaxForSlump;                           // 0x0688(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         LandingSpeedMinForSound;                           // 0x068C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         LandingSpeedMaxForSound;                           // 0x0690(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         LandingVolumeMin;                                  // 0x0694(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         LandingVolumeMax;                                  // 0x0698(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_69C[0x4];                                      // 0x069C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UAttribInstance*                        AirControlAttribInstance;                          // 0x06A0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         LandingDetectionRadius;                            // 0x06A8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         JumpGroundSpeedLossScale;                          // 0x06AC(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         JumpingDetectionRadius;                            // 0x06B0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_6B4[0x4];                                      // 0x06B4(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UAttribInstance*                        LookSpeedAttribInstance;                           // 0x06B8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UAttribInstance*                        SprintSpeedScaleAttribInstance;                    // 0x06C0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UAttribInstance*                        MoveSpreadAttribInstance;                          // 0x06C8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FAttribModApplyData                    SprintSpreadIncreaseMod;                           // 0x06D0(0x00A0)(Edit, BlueprintVisible, DisableEditOnInstance)
	float                                         LeanAntiClipDistance;                              // 0x0770(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_774[0x4];                                      // 0x0774(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FAttribModApplyData                    WalkSpreadIncreaseMod;                             // 0x0778(0x00A0)(Edit, BlueprintVisible, DisableEditOnInstance)
	struct FAttribModApplyData                    FallSpreadIncreaseMod;                             // 0x0818(0x00A0)(Edit, BlueprintVisible, DisableEditOnInstance)
	struct FAttribModApplyData                    CrouchSpreadIncreaseMod;                           // 0x08B8(0x00A0)(Edit, BlueprintVisible, DisableEditOnInstance)
	class UAnimMontage*                           JumpStandingMontage;                               // 0x0958(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash)
	class UAnimMontage*                           JumpCrouchingMontage;                              // 0x0960(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash)
	class UAnimMontage*                           AirLandStandingMontage;                            // 0x0968(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash)
	float                                         CrouchTorsoToEyeHeight;                            // 0x0970(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_974[0x4];                                      // 0x0974(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UAnimMontage*                           AirLandCrouchingMontage;                           // 0x0978(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash)
	struct FAttribModApplyData                    SprintStaminaDrainMod;                             // 0x0980(0x00A0)(Edit, BlueprintVisible, DisableEditOnInstance)
	struct FAttribModApplyData                    SprintFatiguedAttribMod;                           // 0x0A20(0x00A0)(Edit, BlueprintVisible, DisableEditOnInstance)
	float                                         AimProgress;                                       // 0x0AC0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, SaveGame, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_AC4[0x4];                                      // 0x0AC4(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FAttribModApplyData                    AimMoveAttribMod;                                  // 0x0AC8(0x00A0)(Edit, BlueprintVisible, DisableEditOnInstance)
	struct FAttribModApplyData                    AimLookAttribMod;                                  // 0x0B68(0x00A0)(Edit, BlueprintVisible, DisableEditOnInstance)
	FMulticastInlineDelegateProperty_             OnMoveControlRegistered;                           // 0x0C08(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)
	class UDataTable*                             SkateStepImpactTable;                              // 0x0C18(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FAttribModApplyData                    SprintDirectionSpeedScaleMod;                      // 0x0C20(0x00A0)(Edit, BlueprintVisible, DisableEditOnInstance)
	float                                         MaxSkateTurnBankRoll;                              // 0x0CC0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

public:
	void OnMoveControlRegistered__DelegateSignature(class UMOVECONTROL_Base_C* MoveControl);
	void InitializeMoveControls();
	void UpdateMoveControls(float DeltaTime, const struct FVector2D& MoveInputAxes, const struct FVector2D& LookInputAxes);
	void RegisterMoveControl(class UMOVECONTROL_Base_C* MoveControl, bool LowPriority, bool* Result);
	void GetActiveMoveControl(class UMOVECONTROL_Base_C** ActiveMoveControl);
	void MoveActionChanged(const struct FSTRUCT_MoveInputAction& Action, bool Relative, bool* Result);
	void ExpireMoveControlByIndex(int32 MoveControlIndex);
	void UpdateJump();
	void UpdateSprintWalkFall();
	void UpdateSprintDirectionSpeed();
	void UpdateCrouch(float DeltaTime);
	void UpdateSlump(float* MinCrouchProgress);
	void UpdateAim(float DeltaTime);
	void UpdateLean(float DeltaTime);
	void UpdateMoveActions(float DeltaTime);
	void GetMoveActionInputValue(ENUM_MoveInputActionType ActionType, float* Value);
	void TakeMeasurements();
	void TryResetToDefaultMeasurements();
	void InitializeOwnerGender();
	void InitializeValuesFromAttributes();
	void InitializeValuesFromInventory();
	void DeactivateTurboBoots(bool SkatesOnly);
	void CanStandUp(bool* Result);
	void SetMoveActionInputValue(ENUM_MoveInputActionType ActionType, float InputValue);
	void UpdateCameraBanking(float DeltaTime, float AccessibilityScale);
	void UpdateFootsteps(float DeltaTime);
	void UpdateCameraBobbing(float DeltaTime, float AccessibilityScale);
	void ApplyJumpGroundSpeedReduction();
	void DoJumpingFootstep();
	void DoWalkingFootstep(float MovespeedScale, float StrideScale);
	void UpdateBreathing(float DeltaTime);
	void UpdateMovementFlags();
	void SetCameraBobType(ENUM_CameraBobType CameraBobType);
	void GetParamValue(struct FVector2D& Interval, float Scale, float* Value);
	void HandleAirLanding(const struct FHitResult& Hit);
	void HandleHitSomething(const struct FVector& NormalImpulse, const struct FHitResult& Hit);
	void IsLeaning(bool* Result);
	void IsUsingTurboBoots(bool* Result);
	void IsCrouchingOrTransitioning(bool* Result);
	void GetHalfHeightStanding(float* Result);
	void GetHalfHeightCurrent(float* Result);
	void GetTorsoToEyeHeightCurrent(float* Result);
	void GetTorsoToEyeHeightStanding(float* Result);
	void GetCurrentBaseSprintSpeed(float* Speed);
	void GetCurrentMaxSprintSpeed(float* Speed);
	void GetFootIndexFromSign(int32* Index_0);
	void ClampAndCacheMoveInput(const struct FVector2D& MoveInput);
	void GetPlayerMoveSpeedType(ENUM_PlayerMoveSpeed* Type);
	void ExpireMoveControl(class UMOVECONTROL_Base_C* MoveControl, bool* Result);
	void EVENT_OnStaminaChanged(float CurrValue, float LastValue);
	void EVENT_OnStaminaDepleted();
	void EVENT_OnHardwareBagChanged(int32 SlotIndex);
	void EVENT_TurboBootsStateChanged(bool State);
	void GetCharacterSurfaceMoveScale(float* Result);
	void EVENT_OnWalkSpeedChanged(float CurrValue, float LastValue);
	void EVENT_OnJumpSpeedChanged(float CurrValue, float LastValue);
	void EVENT_OnGroundFrictionChanged(float CurrValue, float LastValue);
	void EVENT_OnMoveAccelerationChanged(float CurrValue, float LastValue);
	void EVENT_OnBrakingDecelerationChanged(float CurrValue, float LastValue);
	void UpdateFatigueState(bool IsFatigued);
	void ShouldSkateWhileSprinting(bool* Result);
	void ClearMoveActionInputValues();
	void EVENT_OnAirControlChanged(float CurrValue, float LastValue);
	bool ShouldSaveComponent(struct FStreamingSaveGameComponentParams* Params_0);

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"COMP_MoveControlManager_C">();
	}
	static class UCOMP_MoveControlManager_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<UCOMP_MoveControlManager_C>();
	}
};
static_assert(alignof(UCOMP_MoveControlManager_C) == 0x000008, "Wrong alignment on UCOMP_MoveControlManager_C");
static_assert(sizeof(UCOMP_MoveControlManager_C) == 0x000CC8, "Wrong size on UCOMP_MoveControlManager_C");
static_assert(offsetof(UCOMP_MoveControlManager_C, MoveControls) == 0x0000B0, "Member 'UCOMP_MoveControlManager_C::MoveControls' has a wrong offset!");
static_assert(offsetof(UCOMP_MoveControlManager_C, MoveControlParams) == 0x0000C0, "Member 'UCOMP_MoveControlManager_C::MoveControlParams' has a wrong offset!");
static_assert(offsetof(UCOMP_MoveControlManager_C, LastMoveInputAxes) == 0x0000E8, "Member 'UCOMP_MoveControlManager_C::LastMoveInputAxes' has a wrong offset!");
static_assert(offsetof(UCOMP_MoveControlManager_C, LastLookInputAxes) == 0x0000F0, "Member 'UCOMP_MoveControlManager_C::LastLookInputAxes' has a wrong offset!");
static_assert(offsetof(UCOMP_MoveControlManager_C, PlayerOwner) == 0x0000F8, "Member 'UCOMP_MoveControlManager_C::PlayerOwner' has a wrong offset!");
static_assert(offsetof(UCOMP_MoveControlManager_C, CharacterMovement) == 0x000100, "Member 'UCOMP_MoveControlManager_C::CharacterMovement' has a wrong offset!");
static_assert(offsetof(UCOMP_MoveControlManager_C, ShockSettings) == 0x000108, "Member 'UCOMP_MoveControlManager_C::ShockSettings' has a wrong offset!");
static_assert(offsetof(UCOMP_MoveControlManager_C, HardwareBag) == 0x000110, "Member 'UCOMP_MoveControlManager_C::HardwareBag' has a wrong offset!");
static_assert(offsetof(UCOMP_MoveControlManager_C, CachedGender) == 0x000118, "Member 'UCOMP_MoveControlManager_C::CachedGender' has a wrong offset!");
static_assert(offsetof(UCOMP_MoveControlManager_C, MoveActionInputValues) == 0x000120, "Member 'UCOMP_MoveControlManager_C::MoveActionInputValues' has a wrong offset!");
static_assert(offsetof(UCOMP_MoveControlManager_C, LeanProgress) == 0x000130, "Member 'UCOMP_MoveControlManager_C::LeanProgress' has a wrong offset!");
static_assert(offsetof(UCOMP_MoveControlManager_C, LeanDuration) == 0x000134, "Member 'UCOMP_MoveControlManager_C::LeanDuration' has a wrong offset!");
static_assert(offsetof(UCOMP_MoveControlManager_C, LeanCraneOffsetStanding) == 0x000138, "Member 'UCOMP_MoveControlManager_C::LeanCraneOffsetStanding' has a wrong offset!");
static_assert(offsetof(UCOMP_MoveControlManager_C, TorsoToEyeHeight) == 0x00013C, "Member 'UCOMP_MoveControlManager_C::TorsoToEyeHeight' has a wrong offset!");
static_assert(offsetof(UCOMP_MoveControlManager_C, LeanRollScale) == 0x000140, "Member 'UCOMP_MoveControlManager_C::LeanRollScale' has a wrong offset!");
static_assert(offsetof(UCOMP_MoveControlManager_C, IsCrouching) == 0x000144, "Member 'UCOMP_MoveControlManager_C::IsCrouching' has a wrong offset!");
static_assert(offsetof(UCOMP_MoveControlManager_C, IsTryingToCrouch) == 0x000145, "Member 'UCOMP_MoveControlManager_C::IsTryingToCrouch' has a wrong offset!");
static_assert(offsetof(UCOMP_MoveControlManager_C, WasDuckingDown) == 0x000146, "Member 'UCOMP_MoveControlManager_C::WasDuckingDown' has a wrong offset!");
static_assert(offsetof(UCOMP_MoveControlManager_C, CrouchProgress) == 0x000148, "Member 'UCOMP_MoveControlManager_C::CrouchProgress' has a wrong offset!");
static_assert(offsetof(UCOMP_MoveControlManager_C, CrouchDuration) == 0x00014C, "Member 'UCOMP_MoveControlManager_C::CrouchDuration' has a wrong offset!");
static_assert(offsetof(UCOMP_MoveControlManager_C, CrouchHeightRatio) == 0x000150, "Member 'UCOMP_MoveControlManager_C::CrouchHeightRatio' has a wrong offset!");
static_assert(offsetof(UCOMP_MoveControlManager_C, VerticalMeshOffsetStanding) == 0x000154, "Member 'UCOMP_MoveControlManager_C::VerticalMeshOffsetStanding' has a wrong offset!");
static_assert(offsetof(UCOMP_MoveControlManager_C, HalfHeightStanding) == 0x000158, "Member 'UCOMP_MoveControlManager_C::HalfHeightStanding' has a wrong offset!");
static_assert(offsetof(UCOMP_MoveControlManager_C, LeanCraneOffsetCrouching) == 0x00015C, "Member 'UCOMP_MoveControlManager_C::LeanCraneOffsetCrouching' has a wrong offset!");
static_assert(offsetof(UCOMP_MoveControlManager_C, LeanTorsoAngle) == 0x000160, "Member 'UCOMP_MoveControlManager_C::LeanTorsoAngle' has a wrong offset!");
static_assert(offsetof(UCOMP_MoveControlManager_C, IsTryingToSprint) == 0x000164, "Member 'UCOMP_MoveControlManager_C::IsTryingToSprint' has a wrong offset!");
static_assert(offsetof(UCOMP_MoveControlManager_C, IsSprinting) == 0x000165, "Member 'UCOMP_MoveControlManager_C::IsSprinting' has a wrong offset!");
static_assert(offsetof(UCOMP_MoveControlManager_C, IsSkating) == 0x000166, "Member 'UCOMP_MoveControlManager_C::IsSkating' has a wrong offset!");
static_assert(offsetof(UCOMP_MoveControlManager_C, SprintByDefault) == 0x000167, "Member 'UCOMP_MoveControlManager_C::SprintByDefault' has a wrong offset!");
static_assert(offsetof(UCOMP_MoveControlManager_C, DefaultSprintSpeedScale) == 0x000168, "Member 'UCOMP_MoveControlManager_C::DefaultSprintSpeedScale' has a wrong offset!");
static_assert(offsetof(UCOMP_MoveControlManager_C, SprintAttribMod) == 0x000170, "Member 'UCOMP_MoveControlManager_C::SprintAttribMod' has a wrong offset!");
static_assert(offsetof(UCOMP_MoveControlManager_C, SlumpTimestamp) == 0x000210, "Member 'UCOMP_MoveControlManager_C::SlumpTimestamp' has a wrong offset!");
static_assert(offsetof(UCOMP_MoveControlManager_C, SlumpAmount) == 0x000214, "Member 'UCOMP_MoveControlManager_C::SlumpAmount' has a wrong offset!");
static_assert(offsetof(UCOMP_MoveControlManager_C, CrouchSpeedPenaltyAttribMod) == 0x000218, "Member 'UCOMP_MoveControlManager_C::CrouchSpeedPenaltyAttribMod' has a wrong offset!");
static_assert(offsetof(UCOMP_MoveControlManager_C, HasLanded) == 0x0002B8, "Member 'UCOMP_MoveControlManager_C::HasLanded' has a wrong offset!");
static_assert(offsetof(UCOMP_MoveControlManager_C, JumpStaminaDrainAttribMod) == 0x0002C0, "Member 'UCOMP_MoveControlManager_C::JumpStaminaDrainAttribMod' has a wrong offset!");
static_assert(offsetof(UCOMP_MoveControlManager_C, IsStandingOnGround) == 0x000360, "Member 'UCOMP_MoveControlManager_C::IsStandingOnGround' has a wrong offset!");
static_assert(offsetof(UCOMP_MoveControlManager_C, IsTryingToMove) == 0x000361, "Member 'UCOMP_MoveControlManager_C::IsTryingToMove' has a wrong offset!");
static_assert(offsetof(UCOMP_MoveControlManager_C, IsMoving) == 0x000362, "Member 'UCOMP_MoveControlManager_C::IsMoving' has a wrong offset!");
static_assert(offsetof(UCOMP_MoveControlManager_C, WeightedBankRollHistory) == 0x000368, "Member 'UCOMP_MoveControlManager_C::WeightedBankRollHistory' has a wrong offset!");
static_assert(offsetof(UCOMP_MoveControlManager_C, MaxNormalStrafeBankRoll) == 0x000370, "Member 'UCOMP_MoveControlManager_C::MaxNormalStrafeBankRoll' has a wrong offset!");
static_assert(offsetof(UCOMP_MoveControlManager_C, MaxSkateStrafeBankRoll) == 0x000374, "Member 'UCOMP_MoveControlManager_C::MaxSkateStrafeBankRoll' has a wrong offset!");
static_assert(offsetof(UCOMP_MoveControlManager_C, MaxNormalTurnBankRoll) == 0x000378, "Member 'UCOMP_MoveControlManager_C::MaxNormalTurnBankRoll' has a wrong offset!");
static_assert(offsetof(UCOMP_MoveControlManager_C, NeedsFootstepVariance) == 0x00037C, "Member 'UCOMP_MoveControlManager_C::NeedsFootstepVariance' has a wrong offset!");
static_assert(offsetof(UCOMP_MoveControlManager_C, FootstepProgress) == 0x000380, "Member 'UCOMP_MoveControlManager_C::FootstepProgress' has a wrong offset!");
static_assert(offsetof(UCOMP_MoveControlManager_C, WalkBobParams) == 0x000384, "Member 'UCOMP_MoveControlManager_C::WalkBobParams' has a wrong offset!");
static_assert(offsetof(UCOMP_MoveControlManager_C, FootstepSign) == 0x0003B4, "Member 'UCOMP_MoveControlManager_C::FootstepSign' has a wrong offset!");
static_assert(offsetof(UCOMP_MoveControlManager_C, LeanHeadAngle) == 0x0003B8, "Member 'UCOMP_MoveControlManager_C::LeanHeadAngle' has a wrong offset!");
static_assert(offsetof(UCOMP_MoveControlManager_C, LeanHeadBankRoll) == 0x0003BC, "Member 'UCOMP_MoveControlManager_C::LeanHeadBankRoll' has a wrong offset!");
static_assert(offsetof(UCOMP_MoveControlManager_C, CurrentBankRampProgress) == 0x0003C0, "Member 'UCOMP_MoveControlManager_C::CurrentBankRampProgress' has a wrong offset!");
static_assert(offsetof(UCOMP_MoveControlManager_C, MoveDirection) == 0x0003C4, "Member 'UCOMP_MoveControlManager_C::MoveDirection' has a wrong offset!");
static_assert(offsetof(UCOMP_MoveControlManager_C, CurrentSpeed) == 0x0003CC, "Member 'UCOMP_MoveControlManager_C::CurrentSpeed' has a wrong offset!");
static_assert(offsetof(UCOMP_MoveControlManager_C, MoveInputMagnitude) == 0x0003D0, "Member 'UCOMP_MoveControlManager_C::MoveInputMagnitude' has a wrong offset!");
static_assert(offsetof(UCOMP_MoveControlManager_C, BaseWalkSpeed) == 0x0003D4, "Member 'UCOMP_MoveControlManager_C::BaseWalkSpeed' has a wrong offset!");
static_assert(offsetof(UCOMP_MoveControlManager_C, BaseSprintSpeed) == 0x0003D8, "Member 'UCOMP_MoveControlManager_C::BaseSprintSpeed' has a wrong offset!");
static_assert(offsetof(UCOMP_MoveControlManager_C, MoveAxisThreshold) == 0x0003DC, "Member 'UCOMP_MoveControlManager_C::MoveAxisThreshold' has a wrong offset!");
static_assert(offsetof(UCOMP_MoveControlManager_C, NeedsBreathingVariance) == 0x0003E0, "Member 'UCOMP_MoveControlManager_C::NeedsBreathingVariance' has a wrong offset!");
static_assert(offsetof(UCOMP_MoveControlManager_C, FatigueRatio) == 0x0003E4, "Member 'UCOMP_MoveControlManager_C::FatigueRatio' has a wrong offset!");
static_assert(offsetof(UCOMP_MoveControlManager_C, BreathingProgress) == 0x0003E8, "Member 'UCOMP_MoveControlManager_C::BreathingProgress' has a wrong offset!");
static_assert(offsetof(UCOMP_MoveControlManager_C, BreatheDurations) == 0x0003EC, "Member 'UCOMP_MoveControlManager_C::BreatheDurations' has a wrong offset!");
static_assert(offsetof(UCOMP_MoveControlManager_C, HipHalfWidth_Idle) == 0x0003F4, "Member 'UCOMP_MoveControlManager_C::HipHalfWidth_Idle' has a wrong offset!");
static_assert(offsetof(UCOMP_MoveControlManager_C, HipHalfWidth_Sprint) == 0x0003F8, "Member 'UCOMP_MoveControlManager_C::HipHalfWidth_Sprint' has a wrong offset!");
static_assert(offsetof(UCOMP_MoveControlManager_C, StrideHalfLength_Walk) == 0x0003FC, "Member 'UCOMP_MoveControlManager_C::StrideHalfLength_Walk' has a wrong offset!");
static_assert(offsetof(UCOMP_MoveControlManager_C, StrideHalfLength_Sprint) == 0x000400, "Member 'UCOMP_MoveControlManager_C::StrideHalfLength_Sprint' has a wrong offset!");
static_assert(offsetof(UCOMP_MoveControlManager_C, RunDetectionRadius) == 0x000404, "Member 'UCOMP_MoveControlManager_C::RunDetectionRadius' has a wrong offset!");
static_assert(offsetof(UCOMP_MoveControlManager_C, FootstepEventOffset) == 0x000408, "Member 'UCOMP_MoveControlManager_C::FootstepEventOffset' has a wrong offset!");
static_assert(offsetof(UCOMP_MoveControlManager_C, FootstepWalkDurations) == 0x00040C, "Member 'UCOMP_MoveControlManager_C::FootstepWalkDurations' has a wrong offset!");
static_assert(offsetof(UCOMP_MoveControlManager_C, FootstepStrafeDurations) == 0x000414, "Member 'UCOMP_MoveControlManager_C::FootstepStrafeDurations' has a wrong offset!");
static_assert(offsetof(UCOMP_MoveControlManager_C, BaseSkateSpeed) == 0x00041C, "Member 'UCOMP_MoveControlManager_C::BaseSkateSpeed' has a wrong offset!");
static_assert(offsetof(UCOMP_MoveControlManager_C, MaxSkateSpeed) == 0x000420, "Member 'UCOMP_MoveControlManager_C::MaxSkateSpeed' has a wrong offset!");
static_assert(offsetof(UCOMP_MoveControlManager_C, SprintDirectionSpeedBias) == 0x000424, "Member 'UCOMP_MoveControlManager_C::SprintDirectionSpeedBias' has a wrong offset!");
static_assert(offsetof(UCOMP_MoveControlManager_C, TurboBootsHardware) == 0x000428, "Member 'UCOMP_MoveControlManager_C::TurboBootsHardware' has a wrong offset!");
static_assert(offsetof(UCOMP_MoveControlManager_C, StaminaAttribInstance) == 0x000430, "Member 'UCOMP_MoveControlManager_C::StaminaAttribInstance' has a wrong offset!");
static_assert(offsetof(UCOMP_MoveControlManager_C, WalkSpeedAttribInstance) == 0x000438, "Member 'UCOMP_MoveControlManager_C::WalkSpeedAttribInstance' has a wrong offset!");
static_assert(offsetof(UCOMP_MoveControlManager_C, CurrentBobType) == 0x000440, "Member 'UCOMP_MoveControlManager_C::CurrentBobType' has a wrong offset!");
static_assert(offsetof(UCOMP_MoveControlManager_C, CurrentBobProgress) == 0x000444, "Member 'UCOMP_MoveControlManager_C::CurrentBobProgress' has a wrong offset!");
static_assert(offsetof(UCOMP_MoveControlManager_C, CurrentBobParamScale) == 0x000448, "Member 'UCOMP_MoveControlManager_C::CurrentBobParamScale' has a wrong offset!");
static_assert(offsetof(UCOMP_MoveControlManager_C, CurrentBobParams) == 0x00044C, "Member 'UCOMP_MoveControlManager_C::CurrentBobParams' has a wrong offset!");
static_assert(offsetof(UCOMP_MoveControlManager_C, StrafeBobParams) == 0x00047C, "Member 'UCOMP_MoveControlManager_C::StrafeBobParams' has a wrong offset!");
static_assert(offsetof(UCOMP_MoveControlManager_C, BreatheBobParams) == 0x0004AC, "Member 'UCOMP_MoveControlManager_C::BreatheBobParams' has a wrong offset!");
static_assert(offsetof(UCOMP_MoveControlManager_C, VarianceWidthHeight) == 0x0004DC, "Member 'UCOMP_MoveControlManager_C::VarianceWidthHeight' has a wrong offset!");
static_assert(offsetof(UCOMP_MoveControlManager_C, VariancePitchYaw) == 0x0004E4, "Member 'UCOMP_MoveControlManager_C::VariancePitchYaw' has a wrong offset!");
static_assert(offsetof(UCOMP_MoveControlManager_C, CameraBobPosHistory) == 0x0004F0, "Member 'UCOMP_MoveControlManager_C::CameraBobPosHistory' has a wrong offset!");
static_assert(offsetof(UCOMP_MoveControlManager_C, CameraBobAngHistory) == 0x0004F8, "Member 'UCOMP_MoveControlManager_C::CameraBobAngHistory' has a wrong offset!");
static_assert(offsetof(UCOMP_MoveControlManager_C, BreatheBobFatigueRatio) == 0x000500, "Member 'UCOMP_MoveControlManager_C::BreatheBobFatigueRatio' has a wrong offset!");
static_assert(offsetof(UCOMP_MoveControlManager_C, FootstepImpactTable) == 0x000508, "Member 'UCOMP_MoveControlManager_C::FootstepImpactTable' has a wrong offset!");
static_assert(offsetof(UCOMP_MoveControlManager_C, JumpSpreadIncreaseMod) == 0x000510, "Member 'UCOMP_MoveControlManager_C::JumpSpreadIncreaseMod' has a wrong offset!");
static_assert(offsetof(UCOMP_MoveControlManager_C, JumpFatiguedAttribMod) == 0x0005B0, "Member 'UCOMP_MoveControlManager_C::JumpFatiguedAttribMod' has a wrong offset!");
static_assert(offsetof(UCOMP_MoveControlManager_C, JumpSpeedAttribInstance) == 0x000650, "Member 'UCOMP_MoveControlManager_C::JumpSpeedAttribInstance' has a wrong offset!");
static_assert(offsetof(UCOMP_MoveControlManager_C, JumpImpactTable) == 0x000658, "Member 'UCOMP_MoveControlManager_C::JumpImpactTable' has a wrong offset!");
static_assert(offsetof(UCOMP_MoveControlManager_C, LandImpactTable) == 0x000660, "Member 'UCOMP_MoveControlManager_C::LandImpactTable' has a wrong offset!");
static_assert(offsetof(UCOMP_MoveControlManager_C, SlumpCurveMin) == 0x000668, "Member 'UCOMP_MoveControlManager_C::SlumpCurveMin' has a wrong offset!");
static_assert(offsetof(UCOMP_MoveControlManager_C, SlumpCurveMax) == 0x000670, "Member 'UCOMP_MoveControlManager_C::SlumpCurveMax' has a wrong offset!");
static_assert(offsetof(UCOMP_MoveControlManager_C, JumpHipOffset) == 0x000678, "Member 'UCOMP_MoveControlManager_C::JumpHipOffset' has a wrong offset!");
static_assert(offsetof(UCOMP_MoveControlManager_C, FallDamageSpeedMin) == 0x00067C, "Member 'UCOMP_MoveControlManager_C::FallDamageSpeedMin' has a wrong offset!");
static_assert(offsetof(UCOMP_MoveControlManager_C, FallDamageSpeedMax) == 0x000680, "Member 'UCOMP_MoveControlManager_C::FallDamageSpeedMax' has a wrong offset!");
static_assert(offsetof(UCOMP_MoveControlManager_C, LandingSpeedMinForSlump) == 0x000684, "Member 'UCOMP_MoveControlManager_C::LandingSpeedMinForSlump' has a wrong offset!");
static_assert(offsetof(UCOMP_MoveControlManager_C, LandingSpeedMaxForSlump) == 0x000688, "Member 'UCOMP_MoveControlManager_C::LandingSpeedMaxForSlump' has a wrong offset!");
static_assert(offsetof(UCOMP_MoveControlManager_C, LandingSpeedMinForSound) == 0x00068C, "Member 'UCOMP_MoveControlManager_C::LandingSpeedMinForSound' has a wrong offset!");
static_assert(offsetof(UCOMP_MoveControlManager_C, LandingSpeedMaxForSound) == 0x000690, "Member 'UCOMP_MoveControlManager_C::LandingSpeedMaxForSound' has a wrong offset!");
static_assert(offsetof(UCOMP_MoveControlManager_C, LandingVolumeMin) == 0x000694, "Member 'UCOMP_MoveControlManager_C::LandingVolumeMin' has a wrong offset!");
static_assert(offsetof(UCOMP_MoveControlManager_C, LandingVolumeMax) == 0x000698, "Member 'UCOMP_MoveControlManager_C::LandingVolumeMax' has a wrong offset!");
static_assert(offsetof(UCOMP_MoveControlManager_C, AirControlAttribInstance) == 0x0006A0, "Member 'UCOMP_MoveControlManager_C::AirControlAttribInstance' has a wrong offset!");
static_assert(offsetof(UCOMP_MoveControlManager_C, LandingDetectionRadius) == 0x0006A8, "Member 'UCOMP_MoveControlManager_C::LandingDetectionRadius' has a wrong offset!");
static_assert(offsetof(UCOMP_MoveControlManager_C, JumpGroundSpeedLossScale) == 0x0006AC, "Member 'UCOMP_MoveControlManager_C::JumpGroundSpeedLossScale' has a wrong offset!");
static_assert(offsetof(UCOMP_MoveControlManager_C, JumpingDetectionRadius) == 0x0006B0, "Member 'UCOMP_MoveControlManager_C::JumpingDetectionRadius' has a wrong offset!");
static_assert(offsetof(UCOMP_MoveControlManager_C, LookSpeedAttribInstance) == 0x0006B8, "Member 'UCOMP_MoveControlManager_C::LookSpeedAttribInstance' has a wrong offset!");
static_assert(offsetof(UCOMP_MoveControlManager_C, SprintSpeedScaleAttribInstance) == 0x0006C0, "Member 'UCOMP_MoveControlManager_C::SprintSpeedScaleAttribInstance' has a wrong offset!");
static_assert(offsetof(UCOMP_MoveControlManager_C, MoveSpreadAttribInstance) == 0x0006C8, "Member 'UCOMP_MoveControlManager_C::MoveSpreadAttribInstance' has a wrong offset!");
static_assert(offsetof(UCOMP_MoveControlManager_C, SprintSpreadIncreaseMod) == 0x0006D0, "Member 'UCOMP_MoveControlManager_C::SprintSpreadIncreaseMod' has a wrong offset!");
static_assert(offsetof(UCOMP_MoveControlManager_C, LeanAntiClipDistance) == 0x000770, "Member 'UCOMP_MoveControlManager_C::LeanAntiClipDistance' has a wrong offset!");
static_assert(offsetof(UCOMP_MoveControlManager_C, WalkSpreadIncreaseMod) == 0x000778, "Member 'UCOMP_MoveControlManager_C::WalkSpreadIncreaseMod' has a wrong offset!");
static_assert(offsetof(UCOMP_MoveControlManager_C, FallSpreadIncreaseMod) == 0x000818, "Member 'UCOMP_MoveControlManager_C::FallSpreadIncreaseMod' has a wrong offset!");
static_assert(offsetof(UCOMP_MoveControlManager_C, CrouchSpreadIncreaseMod) == 0x0008B8, "Member 'UCOMP_MoveControlManager_C::CrouchSpreadIncreaseMod' has a wrong offset!");
static_assert(offsetof(UCOMP_MoveControlManager_C, JumpStandingMontage) == 0x000958, "Member 'UCOMP_MoveControlManager_C::JumpStandingMontage' has a wrong offset!");
static_assert(offsetof(UCOMP_MoveControlManager_C, JumpCrouchingMontage) == 0x000960, "Member 'UCOMP_MoveControlManager_C::JumpCrouchingMontage' has a wrong offset!");
static_assert(offsetof(UCOMP_MoveControlManager_C, AirLandStandingMontage) == 0x000968, "Member 'UCOMP_MoveControlManager_C::AirLandStandingMontage' has a wrong offset!");
static_assert(offsetof(UCOMP_MoveControlManager_C, CrouchTorsoToEyeHeight) == 0x000970, "Member 'UCOMP_MoveControlManager_C::CrouchTorsoToEyeHeight' has a wrong offset!");
static_assert(offsetof(UCOMP_MoveControlManager_C, AirLandCrouchingMontage) == 0x000978, "Member 'UCOMP_MoveControlManager_C::AirLandCrouchingMontage' has a wrong offset!");
static_assert(offsetof(UCOMP_MoveControlManager_C, SprintStaminaDrainMod) == 0x000980, "Member 'UCOMP_MoveControlManager_C::SprintStaminaDrainMod' has a wrong offset!");
static_assert(offsetof(UCOMP_MoveControlManager_C, SprintFatiguedAttribMod) == 0x000A20, "Member 'UCOMP_MoveControlManager_C::SprintFatiguedAttribMod' has a wrong offset!");
static_assert(offsetof(UCOMP_MoveControlManager_C, AimProgress) == 0x000AC0, "Member 'UCOMP_MoveControlManager_C::AimProgress' has a wrong offset!");
static_assert(offsetof(UCOMP_MoveControlManager_C, AimMoveAttribMod) == 0x000AC8, "Member 'UCOMP_MoveControlManager_C::AimMoveAttribMod' has a wrong offset!");
static_assert(offsetof(UCOMP_MoveControlManager_C, AimLookAttribMod) == 0x000B68, "Member 'UCOMP_MoveControlManager_C::AimLookAttribMod' has a wrong offset!");
static_assert(offsetof(UCOMP_MoveControlManager_C, OnMoveControlRegistered) == 0x000C08, "Member 'UCOMP_MoveControlManager_C::OnMoveControlRegistered' has a wrong offset!");
static_assert(offsetof(UCOMP_MoveControlManager_C, SkateStepImpactTable) == 0x000C18, "Member 'UCOMP_MoveControlManager_C::SkateStepImpactTable' has a wrong offset!");
static_assert(offsetof(UCOMP_MoveControlManager_C, SprintDirectionSpeedScaleMod) == 0x000C20, "Member 'UCOMP_MoveControlManager_C::SprintDirectionSpeedScaleMod' has a wrong offset!");
static_assert(offsetof(UCOMP_MoveControlManager_C, MaxSkateTurnBankRoll) == 0x000CC0, "Member 'UCOMP_MoveControlManager_C::MaxSkateTurnBankRoll' has a wrong offset!");

}

