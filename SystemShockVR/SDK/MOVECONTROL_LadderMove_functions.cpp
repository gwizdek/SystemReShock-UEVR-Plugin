#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: MOVECONTROL_LadderMove

#include "Basic.hpp"

#include "MOVECONTROL_LadderMove_classes.hpp"
#include "MOVECONTROL_LadderMove_parameters.hpp"


namespace SDK
{

// Function MOVECONTROL_LadderMove.MOVECONTROL_LadderMove_C.InitializeMoveControl
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// class APAWN_Hacker_Simple_C*            Player_0                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// float                                   GameTime                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FSTRUCT_MoveControlParams        InitialControlParams                                   (BlueprintVisible, BlueprintReadOnly, Parm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    Result                                                 (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void UMOVECONTROL_LadderMove_C::InitializeMoveControl(class APAWN_Hacker_Simple_C* Player_0, float GameTime, const struct FSTRUCT_MoveControlParams& InitialControlParams, bool* Result)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MOVECONTROL_LadderMove_C", "InitializeMoveControl");

	Params::MOVECONTROL_LadderMove_C_InitializeMoveControl Parms{};

	Parms.Player_0 = Player_0;
	Parms.GameTime = GameTime;
	Parms.InitialControlParams = std::move(InitialControlParams);

	UObject::ProcessEvent(Func, &Parms);

	if (Result != nullptr)
		*Result = Parms.Result;
}


// Function MOVECONTROL_LadderMove.MOVECONTROL_LadderMove_C.UpdateMoveControl
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// struct FVector2D                        MoveInput                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FVector2D                        LookInput                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FSTRUCT_MoveControlParams        ControlParams                                          (BlueprintVisible, BlueprintReadOnly, Parm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// TArray<float>                           ActionInputValues                                      (BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
// float                                   MoveInputScale                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// float                                   Delta_Time                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    ShouldExpire                                           (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void UMOVECONTROL_LadderMove_C::UpdateMoveControl(const struct FVector2D& MoveInput, const struct FVector2D& LookInput, const struct FSTRUCT_MoveControlParams& ControlParams, TArray<float>& ActionInputValues, float MoveInputScale, float Delta_Time, bool* ShouldExpire)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MOVECONTROL_LadderMove_C", "UpdateMoveControl");

	Params::MOVECONTROL_LadderMove_C_UpdateMoveControl Parms{};

	Parms.MoveInput = std::move(MoveInput);
	Parms.LookInput = std::move(LookInput);
	Parms.ControlParams = std::move(ControlParams);
	Parms.ActionInputValues = std::move(ActionInputValues);
	Parms.MoveInputScale = MoveInputScale;
	Parms.Delta_Time = Delta_Time;

	UObject::ProcessEvent(Func, &Parms);

	ActionInputValues = std::move(Parms.ActionInputValues);

	if (ShouldExpire != nullptr)
		*ShouldExpire = Parms.ShouldExpire;
}


// Function MOVECONTROL_LadderMove.MOVECONTROL_LadderMove_C.BeginMoving
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    ShouldDismount                                         (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void UMOVECONTROL_LadderMove_C::BeginMoving(bool* ShouldDismount)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MOVECONTROL_LadderMove_C", "BeginMoving");

	Params::MOVECONTROL_LadderMove_C_BeginMoving Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (ShouldDismount != nullptr)
		*ShouldDismount = Parms.ShouldDismount;
}


// Function MOVECONTROL_LadderMove.MOVECONTROL_LadderMove_C.SetPlayerMountStatus
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    IsMounted                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)

void UMOVECONTROL_LadderMove_C::SetPlayerMountStatus(bool IsMounted)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MOVECONTROL_LadderMove_C", "SetPlayerMountStatus");

	Params::MOVECONTROL_LadderMove_C_SetPlayerMountStatus Parms{};

	Parms.IsMounted = IsMounted;

	UObject::ProcessEvent(Func, &Parms);
}


// Function MOVECONTROL_LadderMove.MOVECONTROL_LadderMove_C.SetForceJumpNextFrame
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    Value                                                  (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)

void UMOVECONTROL_LadderMove_C::SetForceJumpNextFrame(bool Value)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MOVECONTROL_LadderMove_C", "SetForceJumpNextFrame");

	Params::MOVECONTROL_LadderMove_C_SetForceJumpNextFrame Parms{};

	Parms.Value = Value;

	UObject::ProcessEvent(Func, &Parms);
}


// Function MOVECONTROL_LadderMove.MOVECONTROL_LadderMove_C.PlayerLadderStepMontage
// (Public, BlueprintCallable, BlueprintEvent)

void UMOVECONTROL_LadderMove_C::PlayerLadderStepMontage()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MOVECONTROL_LadderMove_C", "PlayerLadderStepMontage");

	UObject::ProcessEvent(Func, nullptr);
}

}

