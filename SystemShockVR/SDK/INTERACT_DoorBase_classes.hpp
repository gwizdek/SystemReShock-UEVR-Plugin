#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: INTERACT_DoorBase

#include "Basic.hpp"

#include "ENUM_DoorIcons_structs.hpp"
#include "Engine_structs.hpp"
#include "INTERACT_Channeling_Base_classes.hpp"
#include "ENUM_DoorState_structs.hpp"
#include "ENUM_ButtonColorType_structs.hpp"
#include "ENUM_InteractionType_structs.hpp"


namespace SDK
{

// BlueprintGeneratedClass INTERACT_DoorBase.INTERACT_DoorBase_C
// 0x0308 (0x0658 - 0x0350)
class AINTERACT_DoorBase_C : public AINTERACT_Channeling_Base_C
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame_INTERACT_DoorBase_C;                // 0x0350(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	class UCOMP_AttribManager_C*                  COMP_AttribManager;                                // 0x0358(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UCOMP_VoxelOccluder_C*                  COMP_VoxelOccluder;                                // 0x0360(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UCOMP_ScannableObject_C*                COMP_ScannableObject;                              // 0x0368(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USkeletalMeshComponent*                 DoorMesh;                                          // 0x0370(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UBoxComponent*                          SafetySensor;                                      // 0x0378(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class FText                                   BusyMessage;                                       // 0x0380(0x0018)(Edit, BlueprintVisible)
	class FText                                   OpenMessage;                                       // 0x0398(0x0018)(Edit, BlueprintVisible)
	class FText                                   CloseMessage;                                      // 0x03B0(0x0018)(Edit, BlueprintVisible)
	class FText                                   BlockedMessage;                                    // 0x03C8(0x0018)(Edit, BlueprintVisible)
	class FText                                   ManualLockMessage;                                 // 0x03E0(0x0018)(Edit, BlueprintVisible)
	class FText                                   QuestLockMessage;                                  // 0x03F8(0x0018)(Edit, BlueprintVisible)
	class FText                                   BrokenMessage;                                     // 0x0410(0x0018)(Edit, BlueprintVisible)
	float                                         AutoCloseTime;                                     // 0x0428(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_42C[0x4];                                      // 0x042C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTimerHandle                           AutoCloseTimerHandle;                              // 0x0430(0x0008)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	bool                                          NoFrontButton;                                     // 0x0438(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          NoBackButton;                                      // 0x0439(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          IsLocked;                                          // 0x043A(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, SaveGame, IsPlainOldData, NoDestructor)
	bool                                          StartsManuallyLocked;                              // 0x043B(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          IsBroken;                                          // 0x043C(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          RequiresSecurityLevel;                             // 0x043D(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_43E[0x2];                                      // 0x043E(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         RequiredSecurityLevel;                             // 0x0440(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_444[0x4];                                      // 0x0444(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UClass*                                 RequiredAccessCard;                                // 0x0448(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TSoftObjectPtr<class UAnimMontage>            Open_Montage;                                      // 0x0450(0x0028)(Edit, BlueprintVisible, HasGetValueTypeHash)
	TSoftObjectPtr<class UAnimMontage>            Close_Montage;                                     // 0x0478(0x0028)(Edit, BlueprintVisible, HasGetValueTypeHash)
	TSoftObjectPtr<class UAnimMontage>            Lock_Montage;                                      // 0x04A0(0x0028)(Edit, BlueprintVisible, HasGetValueTypeHash)
	TSoftObjectPtr<class UAnimMontage>            Unlock_Montage;                                    // 0x04C8(0x0028)(Edit, BlueprintVisible, HasGetValueTypeHash)
	TArray<struct FDataTableRowHandle>            RequiredQuests;                                    // 0x04F0(0x0010)(Edit, BlueprintVisible)
	ENUM_DoorState                                DoorState;                                         // 0x0500(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, SaveGame, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_501[0x3];                                      // 0x0501(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         StateChangeTimestamp;                              // 0x0504(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, SaveGame, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          OpenAfterUnlock;                                   // 0x0508(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          EnableSafetySensor;                                // 0x0509(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CanBePoweredDown;                                  // 0x050A(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_50B[0x5];                                      // 0x050B(0x0005)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class AINTERACT_Base_C*>               OnOpened_AdditionalInteracts;                      // 0x0510(0x0010)(Edit, BlueprintVisible, DisableEditOnTemplate, AdvancedDisplay)
	TArray<class AINTERACT_Base_C*>               OnOpening_AdditionalInteracts;                     // 0x0520(0x0010)(Edit, BlueprintVisible, DisableEditOnTemplate, AdvancedDisplay)
	TArray<class AINTERACT_Base_C*>               OnClosed_AdditionalInteracts;                      // 0x0530(0x0010)(Edit, BlueprintVisible, DisableEditOnTemplate, AdvancedDisplay)
	TArray<class AINTERACT_Base_C*>               OnClosing_AdditionalInteracts;                     // 0x0540(0x0010)(Edit, BlueprintVisible, DisableEditOnTemplate, AdvancedDisplay)
	bool                                          HasInitializedDoor;                                // 0x0550(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, SaveGame, IsPlainOldData, NoDestructor)
	uint8                                         Pad_551[0x7];                                      // 0x0551(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class AINTERACT_Base_C*>               OnLocked_AdditionalInteracts;                      // 0x0558(0x0010)(Edit, BlueprintVisible, DisableEditOnTemplate, AdvancedDisplay)
	struct FTimerHandle                           StopMeshTicksTimerHandle;                          // 0x0568(0x0008)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	float                                         SoundOcclusionDelayTime;                           // 0x0570(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         SoundOcclusionTransitionTime;                      // 0x0574(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TSoftObjectPtr<class USoundCue>               DoorLockedCue;                                     // 0x0578(0x0028)(Edit, BlueprintVisible, DisableEditOnInstance, HasGetValueTypeHash)
	TSoftObjectPtr<class USoundCue>               DoorBrokenCue;                                     // 0x05A0(0x0028)(Edit, BlueprintVisible, DisableEditOnInstance, HasGetValueTypeHash)
	ENUM_ButtonColorType                          ButtonColorType;                                   // 0x05C8(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ENUM_ButtonColorType                          PulseColorType;                                    // 0x05C9(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ENUM_DoorIcons                                DoorIconType;                                      // 0x05CA(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_5CB[0x1];                                      // 0x05CB(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         ButtonPulseStartTimestamp;                         // 0x05CC(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         ButtonPulseDuration;                               // 0x05D0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         ButtonIntensity;                                   // 0x05D4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FTimerHandle                           ButtonPulseTimer;                                  // 0x05D8(0x0008)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	FMulticastInlineDelegateProperty_             OnDoorStateChanged;                                // 0x05E0(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)
	TSoftObjectPtr<class USoundCue>               DoorNotFunctionalCue;                              // 0x05F0(0x0028)(Edit, BlueprintVisible, DisableEditOnInstance, HasGetValueTypeHash)
	TSoftObjectPtr<class USoundCue>               ScanCardSoundCue;                                  // 0x0618(0x0028)(Edit, BlueprintVisible, DisableEditOnInstance, HasGetValueTypeHash)
	class FString                                 ScanCardAnimMessage;                               // 0x0640(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, HasGetValueTypeHash)
	bool                                          HasQueuedToggle;                                   // 0x0650(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, SaveGame, IsPlainOldData, NoDestructor)
	bool                                          IsPoweredOn;                                       // 0x0651(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)

public:
	void OnDoorStateChanged__DelegateSignature(class AINTERACT_DoorBase_C* Door, ENUM_DoorState State);
	void ExecuteUbergraph_INTERACT_DoorBase(int32 EntryPoint);
	void BndEvt__COMP_VoxelOccluder_K2Node_ComponentBoundEvent_1_CullableVisibilitySignature__DelegateSignature(bool bVisibleState);
	void BndEvt__SafetySensor_K2Node_ComponentBoundEvent_0_ComponentEndOverlapSignature__DelegateSignature(class UPrimitiveComponent* OverlappedComponent, class AActor* OtherActor, class UPrimitiveComponent* OtherComp, int32 OtherBodyIndex);
	void BndEvt__SafetySensor_K2Node_ComponentBoundEvent_0_ComponentBeginOverlapSignature__DelegateSignature(class UPrimitiveComponent* OverlappedComponent, class AActor* OtherActor, class UPrimitiveComponent* OtherComp, int32 OtherBodyIndex, bool bFromSweep, const struct FHitResult& SweepResult);
	void ReceiveBeginPlay();
	void UserConstructionScript();
	void InitializeDoor();
	void InitializeDoorState();
	void InitializeDoorLockState();
	void InitializeAttributes();
	void ValidateLockStates();
	void TryAutoCloseDoor();
	void IsSafeToClose(bool* Result);
	void IsDoorFunctional(bool* Result);
	void IsLocationInFrontOfDoor(const struct FVector& Location, bool* Result);
	void IsAnyHostileEnemyNearDoor(bool* Result);
	void CanActorBlockDoorway(class AActor* Actor, bool* Result);
	void GetDoorEmissiveStrength(float* Result);
	void HasCompletedRequiredQuests(bool* Result);
	void StartAutoCloseTimer();
	void OpenDoor(class AActor* SourceActor);
	void CloseDoor();
	void FinishedUnlocking();
	void UnlockDoor(bool AutoOpen);
	void EVENT_OnStateFinished();
	void EVENT_OnSecurityLevelChanged(int32 NewSecurityLevel);
	void EVENT_OnStoryQuestChanged(class FName StoryQuestName, bool Value);
	void FinishLocking();
	void LockDoor(bool CloseDoor);
	void GetTargetShape(class UPrimitiveComponent* CursorPrimitive, class UShapeComponent** ShapeComponent);
	void TryQueueDoorToggle(class AActor* SourceActor, ENUM_InteractionType InteractionType);
	void TryHandleQueuedToggle();
	void FailedAction_Broken(class UPrimitiveComponent* CursorPrimitive);
	void FailedAction_Locked(class UPrimitiveComponent* CursorPrimitive);
	void InteractOnOpening(class AActor* SourceActor);
	void InteractOnClosing();
	void SetInteractLocked(bool Locked, bool* Result);
	void SetStopMeshTicksTimer();
	void StartMeshComponentTicks();
	void TryStopMeshComponentTicks();
	void PlayDoorMontage(class UAnimMontage* Montage, float StartTime, float* MontageDuration);
	void UpdateHackerDisplayMeshForScan(class APAWN_Hacker_Simple_C* HackerPawn);
	void OnAccesscardScanned();
	void SetDoorLockAnimationState();
	void ReverseDoorMontage(float* ElapsedTime, float* MontageDuration);
	void ResumeDoorMontage(float* ElapsedTime, float* MontageDuration);
	void EVENT_DoorMontageFinished(class UAnimMontage* Montage, bool bInterrupted);
	void UpdateDoorVisibility(bool VisibleState);
	void SetDoorButtonColorType(ENUM_ButtonColorType Color);
	void UpdateDoorButtonColor(const struct FLinearColor& Color);
	void SetScreenIcon(ENUM_DoorIcons DoorIcon);
	void SetScreenDisabled();
	void TickButtonPulse();
	void StartButtonPulse();
	void GetButtonMesh(class UMeshComponent** Mesh);
	void OnDoorwayBlocked(class AActor* BlockingActor, bool* Result);
	void OnDoorwayUnblocked(class AActor* UnblockingActor, bool* Result);
	void IsHiddenInteractablePrimitive(class APAWN_SystemShockCharacter_C* Character, class UPrimitiveComponent* CursorPrimitive, bool* Result);
	void IsDoorCollisionPrimitive(class UPrimitiveComponent* PrimitiveComponent, bool* Result);
	void IsInteractActivated(bool* Result);
	void GetInteractLocked(class AActor* SourceActor, bool* Result, class FText* LockMessage);
	void GetInteractBroken(bool* Result, class FText* BrokenMessage_0);
	void GetInteractBusy(bool* Result, class FText* BusyMessage_0);
	void UpdateCanNavAgentsUnblock();
	void ReceiveAnimationMessage(const class FString& Message, bool* Result);
	void GetClosestTargetShape(class APAWN_SystemShockCharacter_C* Character, class UShapeComponent** Result);
	void ResumeChannelingSequence(class APAWN_Hacker_Simple_C* HackerPawn, bool* IsWaitingToHolster);
	void CreateChannelingMoveControl(class APAWN_Hacker_Simple_C* HackerPawn, class UMOVECONTROL_Base_C** Result);
	void OnChannelingMontageStarted(class APAWN_Hacker_Simple_C* HackerPawn);
	void OnRestoreInventoryAfterSequence(class APAWN_Hacker_Simple_C* HackerPawn);
	void SetInteractPowered(bool State, bool* Result);
	void UpdateDoorEmissiveStrength(float Scale, float* Strength);
	void FailedAction_NotFunctional(class UPrimitiveComponent* CursorPrimitive);
	void EVENT_OnDisableAttribChanged(float CurrValue, float LastValue);
	void CanModifyInteractPower(bool* Result);
	void TryFixOverlappingActorPhysics();
	void DisableSafetySensorTemporarily();
	void RestoreSafetySensorOverlaps();
	void TryInteract(class AActor* SourceActor, class UPrimitiveComponent* CursorPrimitive, ENUM_InteractionType InteractionType, struct FSTRUCT_InteractResults* InteractResults);

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"INTERACT_DoorBase_C">();
	}
	static class AINTERACT_DoorBase_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<AINTERACT_DoorBase_C>();
	}
};
static_assert(alignof(AINTERACT_DoorBase_C) == 0x000008, "Wrong alignment on AINTERACT_DoorBase_C");
static_assert(sizeof(AINTERACT_DoorBase_C) == 0x000658, "Wrong size on AINTERACT_DoorBase_C");
static_assert(offsetof(AINTERACT_DoorBase_C, UberGraphFrame_INTERACT_DoorBase_C) == 0x000350, "Member 'AINTERACT_DoorBase_C::UberGraphFrame_INTERACT_DoorBase_C' has a wrong offset!");
static_assert(offsetof(AINTERACT_DoorBase_C, COMP_AttribManager) == 0x000358, "Member 'AINTERACT_DoorBase_C::COMP_AttribManager' has a wrong offset!");
static_assert(offsetof(AINTERACT_DoorBase_C, COMP_VoxelOccluder) == 0x000360, "Member 'AINTERACT_DoorBase_C::COMP_VoxelOccluder' has a wrong offset!");
static_assert(offsetof(AINTERACT_DoorBase_C, COMP_ScannableObject) == 0x000368, "Member 'AINTERACT_DoorBase_C::COMP_ScannableObject' has a wrong offset!");
static_assert(offsetof(AINTERACT_DoorBase_C, DoorMesh) == 0x000370, "Member 'AINTERACT_DoorBase_C::DoorMesh' has a wrong offset!");
static_assert(offsetof(AINTERACT_DoorBase_C, SafetySensor) == 0x000378, "Member 'AINTERACT_DoorBase_C::SafetySensor' has a wrong offset!");
static_assert(offsetof(AINTERACT_DoorBase_C, BusyMessage) == 0x000380, "Member 'AINTERACT_DoorBase_C::BusyMessage' has a wrong offset!");
static_assert(offsetof(AINTERACT_DoorBase_C, OpenMessage) == 0x000398, "Member 'AINTERACT_DoorBase_C::OpenMessage' has a wrong offset!");
static_assert(offsetof(AINTERACT_DoorBase_C, CloseMessage) == 0x0003B0, "Member 'AINTERACT_DoorBase_C::CloseMessage' has a wrong offset!");
static_assert(offsetof(AINTERACT_DoorBase_C, BlockedMessage) == 0x0003C8, "Member 'AINTERACT_DoorBase_C::BlockedMessage' has a wrong offset!");
static_assert(offsetof(AINTERACT_DoorBase_C, ManualLockMessage) == 0x0003E0, "Member 'AINTERACT_DoorBase_C::ManualLockMessage' has a wrong offset!");
static_assert(offsetof(AINTERACT_DoorBase_C, QuestLockMessage) == 0x0003F8, "Member 'AINTERACT_DoorBase_C::QuestLockMessage' has a wrong offset!");
static_assert(offsetof(AINTERACT_DoorBase_C, BrokenMessage) == 0x000410, "Member 'AINTERACT_DoorBase_C::BrokenMessage' has a wrong offset!");
static_assert(offsetof(AINTERACT_DoorBase_C, AutoCloseTime) == 0x000428, "Member 'AINTERACT_DoorBase_C::AutoCloseTime' has a wrong offset!");
static_assert(offsetof(AINTERACT_DoorBase_C, AutoCloseTimerHandle) == 0x000430, "Member 'AINTERACT_DoorBase_C::AutoCloseTimerHandle' has a wrong offset!");
static_assert(offsetof(AINTERACT_DoorBase_C, NoFrontButton) == 0x000438, "Member 'AINTERACT_DoorBase_C::NoFrontButton' has a wrong offset!");
static_assert(offsetof(AINTERACT_DoorBase_C, NoBackButton) == 0x000439, "Member 'AINTERACT_DoorBase_C::NoBackButton' has a wrong offset!");
static_assert(offsetof(AINTERACT_DoorBase_C, IsLocked) == 0x00043A, "Member 'AINTERACT_DoorBase_C::IsLocked' has a wrong offset!");
static_assert(offsetof(AINTERACT_DoorBase_C, StartsManuallyLocked) == 0x00043B, "Member 'AINTERACT_DoorBase_C::StartsManuallyLocked' has a wrong offset!");
static_assert(offsetof(AINTERACT_DoorBase_C, IsBroken) == 0x00043C, "Member 'AINTERACT_DoorBase_C::IsBroken' has a wrong offset!");
static_assert(offsetof(AINTERACT_DoorBase_C, RequiresSecurityLevel) == 0x00043D, "Member 'AINTERACT_DoorBase_C::RequiresSecurityLevel' has a wrong offset!");
static_assert(offsetof(AINTERACT_DoorBase_C, RequiredSecurityLevel) == 0x000440, "Member 'AINTERACT_DoorBase_C::RequiredSecurityLevel' has a wrong offset!");
static_assert(offsetof(AINTERACT_DoorBase_C, RequiredAccessCard) == 0x000448, "Member 'AINTERACT_DoorBase_C::RequiredAccessCard' has a wrong offset!");
static_assert(offsetof(AINTERACT_DoorBase_C, Open_Montage) == 0x000450, "Member 'AINTERACT_DoorBase_C::Open_Montage' has a wrong offset!");
static_assert(offsetof(AINTERACT_DoorBase_C, Close_Montage) == 0x000478, "Member 'AINTERACT_DoorBase_C::Close_Montage' has a wrong offset!");
static_assert(offsetof(AINTERACT_DoorBase_C, Lock_Montage) == 0x0004A0, "Member 'AINTERACT_DoorBase_C::Lock_Montage' has a wrong offset!");
static_assert(offsetof(AINTERACT_DoorBase_C, Unlock_Montage) == 0x0004C8, "Member 'AINTERACT_DoorBase_C::Unlock_Montage' has a wrong offset!");
static_assert(offsetof(AINTERACT_DoorBase_C, RequiredQuests) == 0x0004F0, "Member 'AINTERACT_DoorBase_C::RequiredQuests' has a wrong offset!");
static_assert(offsetof(AINTERACT_DoorBase_C, DoorState) == 0x000500, "Member 'AINTERACT_DoorBase_C::DoorState' has a wrong offset!");
static_assert(offsetof(AINTERACT_DoorBase_C, StateChangeTimestamp) == 0x000504, "Member 'AINTERACT_DoorBase_C::StateChangeTimestamp' has a wrong offset!");
static_assert(offsetof(AINTERACT_DoorBase_C, OpenAfterUnlock) == 0x000508, "Member 'AINTERACT_DoorBase_C::OpenAfterUnlock' has a wrong offset!");
static_assert(offsetof(AINTERACT_DoorBase_C, EnableSafetySensor) == 0x000509, "Member 'AINTERACT_DoorBase_C::EnableSafetySensor' has a wrong offset!");
static_assert(offsetof(AINTERACT_DoorBase_C, CanBePoweredDown) == 0x00050A, "Member 'AINTERACT_DoorBase_C::CanBePoweredDown' has a wrong offset!");
static_assert(offsetof(AINTERACT_DoorBase_C, OnOpened_AdditionalInteracts) == 0x000510, "Member 'AINTERACT_DoorBase_C::OnOpened_AdditionalInteracts' has a wrong offset!");
static_assert(offsetof(AINTERACT_DoorBase_C, OnOpening_AdditionalInteracts) == 0x000520, "Member 'AINTERACT_DoorBase_C::OnOpening_AdditionalInteracts' has a wrong offset!");
static_assert(offsetof(AINTERACT_DoorBase_C, OnClosed_AdditionalInteracts) == 0x000530, "Member 'AINTERACT_DoorBase_C::OnClosed_AdditionalInteracts' has a wrong offset!");
static_assert(offsetof(AINTERACT_DoorBase_C, OnClosing_AdditionalInteracts) == 0x000540, "Member 'AINTERACT_DoorBase_C::OnClosing_AdditionalInteracts' has a wrong offset!");
static_assert(offsetof(AINTERACT_DoorBase_C, HasInitializedDoor) == 0x000550, "Member 'AINTERACT_DoorBase_C::HasInitializedDoor' has a wrong offset!");
static_assert(offsetof(AINTERACT_DoorBase_C, OnLocked_AdditionalInteracts) == 0x000558, "Member 'AINTERACT_DoorBase_C::OnLocked_AdditionalInteracts' has a wrong offset!");
static_assert(offsetof(AINTERACT_DoorBase_C, StopMeshTicksTimerHandle) == 0x000568, "Member 'AINTERACT_DoorBase_C::StopMeshTicksTimerHandle' has a wrong offset!");
static_assert(offsetof(AINTERACT_DoorBase_C, SoundOcclusionDelayTime) == 0x000570, "Member 'AINTERACT_DoorBase_C::SoundOcclusionDelayTime' has a wrong offset!");
static_assert(offsetof(AINTERACT_DoorBase_C, SoundOcclusionTransitionTime) == 0x000574, "Member 'AINTERACT_DoorBase_C::SoundOcclusionTransitionTime' has a wrong offset!");
static_assert(offsetof(AINTERACT_DoorBase_C, DoorLockedCue) == 0x000578, "Member 'AINTERACT_DoorBase_C::DoorLockedCue' has a wrong offset!");
static_assert(offsetof(AINTERACT_DoorBase_C, DoorBrokenCue) == 0x0005A0, "Member 'AINTERACT_DoorBase_C::DoorBrokenCue' has a wrong offset!");
static_assert(offsetof(AINTERACT_DoorBase_C, ButtonColorType) == 0x0005C8, "Member 'AINTERACT_DoorBase_C::ButtonColorType' has a wrong offset!");
static_assert(offsetof(AINTERACT_DoorBase_C, PulseColorType) == 0x0005C9, "Member 'AINTERACT_DoorBase_C::PulseColorType' has a wrong offset!");
static_assert(offsetof(AINTERACT_DoorBase_C, DoorIconType) == 0x0005CA, "Member 'AINTERACT_DoorBase_C::DoorIconType' has a wrong offset!");
static_assert(offsetof(AINTERACT_DoorBase_C, ButtonPulseStartTimestamp) == 0x0005CC, "Member 'AINTERACT_DoorBase_C::ButtonPulseStartTimestamp' has a wrong offset!");
static_assert(offsetof(AINTERACT_DoorBase_C, ButtonPulseDuration) == 0x0005D0, "Member 'AINTERACT_DoorBase_C::ButtonPulseDuration' has a wrong offset!");
static_assert(offsetof(AINTERACT_DoorBase_C, ButtonIntensity) == 0x0005D4, "Member 'AINTERACT_DoorBase_C::ButtonIntensity' has a wrong offset!");
static_assert(offsetof(AINTERACT_DoorBase_C, ButtonPulseTimer) == 0x0005D8, "Member 'AINTERACT_DoorBase_C::ButtonPulseTimer' has a wrong offset!");
static_assert(offsetof(AINTERACT_DoorBase_C, OnDoorStateChanged) == 0x0005E0, "Member 'AINTERACT_DoorBase_C::OnDoorStateChanged' has a wrong offset!");
static_assert(offsetof(AINTERACT_DoorBase_C, DoorNotFunctionalCue) == 0x0005F0, "Member 'AINTERACT_DoorBase_C::DoorNotFunctionalCue' has a wrong offset!");
static_assert(offsetof(AINTERACT_DoorBase_C, ScanCardSoundCue) == 0x000618, "Member 'AINTERACT_DoorBase_C::ScanCardSoundCue' has a wrong offset!");
static_assert(offsetof(AINTERACT_DoorBase_C, ScanCardAnimMessage) == 0x000640, "Member 'AINTERACT_DoorBase_C::ScanCardAnimMessage' has a wrong offset!");
static_assert(offsetof(AINTERACT_DoorBase_C, HasQueuedToggle) == 0x000650, "Member 'AINTERACT_DoorBase_C::HasQueuedToggle' has a wrong offset!");
static_assert(offsetof(AINTERACT_DoorBase_C, IsPoweredOn) == 0x000651, "Member 'AINTERACT_DoorBase_C::IsPoweredOn' has a wrong offset!");

}

