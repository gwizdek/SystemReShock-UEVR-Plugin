#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: WIREPUZZLE_WirePlug

#include "Basic.hpp"

#include "ENUM_WirePlugState_structs.hpp"
#include "Engine_structs.hpp"
#include "STRUCT_InteractResults_structs.hpp"
#include "CoreUObject_structs.hpp"
#include "ProceduralMeshComponent_structs.hpp"
#include "ENUM_InteractResultType_structs.hpp"
#include "ENUM_InteractionType_structs.hpp"


namespace SDK::Params
{

// Function WIREPUZZLE_WirePlug.WIREPUZZLE_WirePlug_C.ExecuteUbergraph_WIREPUZZLE_WirePlug
// 0x0028 (0x0028 - 0x0000)
struct WIREPUZZLE_WirePlug_C_ExecuteUbergraph_WIREPUZZLE_WirePlug final
{
public:
	int32                                         EntryPoint;                                        // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         K2Node_Event_DeltaSeconds;                         // 0x0004(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         K2Node_CustomEvent_DeltaTimeOffset;                // 0x0008(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ENUM_WirePlugState                            CallFunc_GetNextTransitionState_State;             // 0x000C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_D[0x3];                                        // 0x000D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Array_Length_ReturnValue;                 // 0x0010(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_SwitchEnum_CmpSuccess;                      // 0x0014(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_EqualEqual_IntInt_ReturnValue;            // 0x0015(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_16[0x2];                                       // 0x0016(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	class UTimelineComponent*                     CallFunc_GetTimelineForState_Result;               // 0x0018(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_ByteByte_ReturnValue;          // 0x0020(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(WIREPUZZLE_WirePlug_C_ExecuteUbergraph_WIREPUZZLE_WirePlug) == 0x000008, "Wrong alignment on WIREPUZZLE_WirePlug_C_ExecuteUbergraph_WIREPUZZLE_WirePlug");
static_assert(sizeof(WIREPUZZLE_WirePlug_C_ExecuteUbergraph_WIREPUZZLE_WirePlug) == 0x000028, "Wrong size on WIREPUZZLE_WirePlug_C_ExecuteUbergraph_WIREPUZZLE_WirePlug");
static_assert(offsetof(WIREPUZZLE_WirePlug_C_ExecuteUbergraph_WIREPUZZLE_WirePlug, EntryPoint) == 0x000000, "Member 'WIREPUZZLE_WirePlug_C_ExecuteUbergraph_WIREPUZZLE_WirePlug::EntryPoint' has a wrong offset!");
static_assert(offsetof(WIREPUZZLE_WirePlug_C_ExecuteUbergraph_WIREPUZZLE_WirePlug, K2Node_Event_DeltaSeconds) == 0x000004, "Member 'WIREPUZZLE_WirePlug_C_ExecuteUbergraph_WIREPUZZLE_WirePlug::K2Node_Event_DeltaSeconds' has a wrong offset!");
static_assert(offsetof(WIREPUZZLE_WirePlug_C_ExecuteUbergraph_WIREPUZZLE_WirePlug, K2Node_CustomEvent_DeltaTimeOffset) == 0x000008, "Member 'WIREPUZZLE_WirePlug_C_ExecuteUbergraph_WIREPUZZLE_WirePlug::K2Node_CustomEvent_DeltaTimeOffset' has a wrong offset!");
static_assert(offsetof(WIREPUZZLE_WirePlug_C_ExecuteUbergraph_WIREPUZZLE_WirePlug, CallFunc_GetNextTransitionState_State) == 0x00000C, "Member 'WIREPUZZLE_WirePlug_C_ExecuteUbergraph_WIREPUZZLE_WirePlug::CallFunc_GetNextTransitionState_State' has a wrong offset!");
static_assert(offsetof(WIREPUZZLE_WirePlug_C_ExecuteUbergraph_WIREPUZZLE_WirePlug, CallFunc_Array_Length_ReturnValue) == 0x000010, "Member 'WIREPUZZLE_WirePlug_C_ExecuteUbergraph_WIREPUZZLE_WirePlug::CallFunc_Array_Length_ReturnValue' has a wrong offset!");
static_assert(offsetof(WIREPUZZLE_WirePlug_C_ExecuteUbergraph_WIREPUZZLE_WirePlug, K2Node_SwitchEnum_CmpSuccess) == 0x000014, "Member 'WIREPUZZLE_WirePlug_C_ExecuteUbergraph_WIREPUZZLE_WirePlug::K2Node_SwitchEnum_CmpSuccess' has a wrong offset!");
static_assert(offsetof(WIREPUZZLE_WirePlug_C_ExecuteUbergraph_WIREPUZZLE_WirePlug, CallFunc_EqualEqual_IntInt_ReturnValue) == 0x000015, "Member 'WIREPUZZLE_WirePlug_C_ExecuteUbergraph_WIREPUZZLE_WirePlug::CallFunc_EqualEqual_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(WIREPUZZLE_WirePlug_C_ExecuteUbergraph_WIREPUZZLE_WirePlug, CallFunc_GetTimelineForState_Result) == 0x000018, "Member 'WIREPUZZLE_WirePlug_C_ExecuteUbergraph_WIREPUZZLE_WirePlug::CallFunc_GetTimelineForState_Result' has a wrong offset!");
static_assert(offsetof(WIREPUZZLE_WirePlug_C_ExecuteUbergraph_WIREPUZZLE_WirePlug, CallFunc_EqualEqual_ByteByte_ReturnValue) == 0x000020, "Member 'WIREPUZZLE_WirePlug_C_ExecuteUbergraph_WIREPUZZLE_WirePlug::CallFunc_EqualEqual_ByteByte_ReturnValue' has a wrong offset!");

// Function WIREPUZZLE_WirePlug.WIREPUZZLE_WirePlug_C.OnTransitionStateChanged
// 0x0004 (0x0004 - 0x0000)
struct WIREPUZZLE_WirePlug_C_OnTransitionStateChanged final
{
public:
	float                                         DeltaTimeOffset;                                   // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(WIREPUZZLE_WirePlug_C_OnTransitionStateChanged) == 0x000004, "Wrong alignment on WIREPUZZLE_WirePlug_C_OnTransitionStateChanged");
static_assert(sizeof(WIREPUZZLE_WirePlug_C_OnTransitionStateChanged) == 0x000004, "Wrong size on WIREPUZZLE_WirePlug_C_OnTransitionStateChanged");
static_assert(offsetof(WIREPUZZLE_WirePlug_C_OnTransitionStateChanged, DeltaTimeOffset) == 0x000000, "Member 'WIREPUZZLE_WirePlug_C_OnTransitionStateChanged::DeltaTimeOffset' has a wrong offset!");

// Function WIREPUZZLE_WirePlug.WIREPUZZLE_WirePlug_C.ReceiveTick
// 0x0004 (0x0004 - 0x0000)
struct WIREPUZZLE_WirePlug_C_ReceiveTick final
{
public:
	float                                         DeltaSeconds;                                      // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(WIREPUZZLE_WirePlug_C_ReceiveTick) == 0x000004, "Wrong alignment on WIREPUZZLE_WirePlug_C_ReceiveTick");
static_assert(sizeof(WIREPUZZLE_WirePlug_C_ReceiveTick) == 0x000004, "Wrong size on WIREPUZZLE_WirePlug_C_ReceiveTick");
static_assert(offsetof(WIREPUZZLE_WirePlug_C_ReceiveTick, DeltaSeconds) == 0x000000, "Member 'WIREPUZZLE_WirePlug_C_ReceiveTick::DeltaSeconds' has a wrong offset!");

// Function WIREPUZZLE_WirePlug.WIREPUZZLE_WirePlug_C.UpdateWireMesh
// 0x00C0 (0x00C0 - 0x0000)
struct WIREPUZZLE_WirePlug_C_UpdateWireMesh final
{
public:
	TArray<struct FVector2D>                      Temp_struct_Variable;                              // 0x0000(0x0010)(ConstParm, ReferenceParm)
	TArray<struct FVector2D>                      Temp_struct_Variable_1;                            // 0x0010(0x0010)(ConstParm, ReferenceParm)
	TArray<struct FVector2D>                      Temp_struct_Variable_2;                            // 0x0020(0x0010)(ConstParm, ReferenceParm)
	TArray<struct FProcMeshTangent>               Temp_struct_Variable_3;                            // 0x0030(0x0010)(ConstParm, ReferenceParm)
	TArray<struct FLinearColor>                   Temp_struct_Variable_4;                            // 0x0040(0x0010)(ConstParm, ReferenceParm)
	TArray<struct FVector2D>                      Temp_struct_Variable_5;                            // 0x0050(0x0010)(ConstParm, ReferenceParm)
	TArray<struct FVector2D>                      Temp_struct_Variable_6;                            // 0x0060(0x0010)(ConstParm, ReferenceParm)
	TArray<struct FVector2D>                      Temp_struct_Variable_7;                            // 0x0070(0x0010)(ConstParm, ReferenceParm)
	int32                                         CallFunc_GetNumSections_ReturnValue;               // 0x0080(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_84[0x4];                                       // 0x0084(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FLinearColor>                   Temp_struct_Variable_8;                            // 0x0088(0x0010)(ConstParm, ReferenceParm)
	bool                                          CallFunc_Greater_IntInt_ReturnValue;               // 0x0098(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_99[0x3];                                       // 0x0099(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Array_Length_ReturnValue;                 // 0x009C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Length_ReturnValue_1;               // 0x00A0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_IntInt_ReturnValue;            // 0x00A4(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_A5[0x3];                                       // 0x00A5(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FProcMeshTangent>               Temp_struct_Variable_9;                            // 0x00A8(0x0010)(ConstParm, ReferenceParm)
	float                                         CallFunc_GetSplineLength_ReturnValue;              // 0x00B8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Greater_FloatFloat_ReturnValue;           // 0x00BC(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(WIREPUZZLE_WirePlug_C_UpdateWireMesh) == 0x000008, "Wrong alignment on WIREPUZZLE_WirePlug_C_UpdateWireMesh");
static_assert(sizeof(WIREPUZZLE_WirePlug_C_UpdateWireMesh) == 0x0000C0, "Wrong size on WIREPUZZLE_WirePlug_C_UpdateWireMesh");
static_assert(offsetof(WIREPUZZLE_WirePlug_C_UpdateWireMesh, Temp_struct_Variable) == 0x000000, "Member 'WIREPUZZLE_WirePlug_C_UpdateWireMesh::Temp_struct_Variable' has a wrong offset!");
static_assert(offsetof(WIREPUZZLE_WirePlug_C_UpdateWireMesh, Temp_struct_Variable_1) == 0x000010, "Member 'WIREPUZZLE_WirePlug_C_UpdateWireMesh::Temp_struct_Variable_1' has a wrong offset!");
static_assert(offsetof(WIREPUZZLE_WirePlug_C_UpdateWireMesh, Temp_struct_Variable_2) == 0x000020, "Member 'WIREPUZZLE_WirePlug_C_UpdateWireMesh::Temp_struct_Variable_2' has a wrong offset!");
static_assert(offsetof(WIREPUZZLE_WirePlug_C_UpdateWireMesh, Temp_struct_Variable_3) == 0x000030, "Member 'WIREPUZZLE_WirePlug_C_UpdateWireMesh::Temp_struct_Variable_3' has a wrong offset!");
static_assert(offsetof(WIREPUZZLE_WirePlug_C_UpdateWireMesh, Temp_struct_Variable_4) == 0x000040, "Member 'WIREPUZZLE_WirePlug_C_UpdateWireMesh::Temp_struct_Variable_4' has a wrong offset!");
static_assert(offsetof(WIREPUZZLE_WirePlug_C_UpdateWireMesh, Temp_struct_Variable_5) == 0x000050, "Member 'WIREPUZZLE_WirePlug_C_UpdateWireMesh::Temp_struct_Variable_5' has a wrong offset!");
static_assert(offsetof(WIREPUZZLE_WirePlug_C_UpdateWireMesh, Temp_struct_Variable_6) == 0x000060, "Member 'WIREPUZZLE_WirePlug_C_UpdateWireMesh::Temp_struct_Variable_6' has a wrong offset!");
static_assert(offsetof(WIREPUZZLE_WirePlug_C_UpdateWireMesh, Temp_struct_Variable_7) == 0x000070, "Member 'WIREPUZZLE_WirePlug_C_UpdateWireMesh::Temp_struct_Variable_7' has a wrong offset!");
static_assert(offsetof(WIREPUZZLE_WirePlug_C_UpdateWireMesh, CallFunc_GetNumSections_ReturnValue) == 0x000080, "Member 'WIREPUZZLE_WirePlug_C_UpdateWireMesh::CallFunc_GetNumSections_ReturnValue' has a wrong offset!");
static_assert(offsetof(WIREPUZZLE_WirePlug_C_UpdateWireMesh, Temp_struct_Variable_8) == 0x000088, "Member 'WIREPUZZLE_WirePlug_C_UpdateWireMesh::Temp_struct_Variable_8' has a wrong offset!");
static_assert(offsetof(WIREPUZZLE_WirePlug_C_UpdateWireMesh, CallFunc_Greater_IntInt_ReturnValue) == 0x000098, "Member 'WIREPUZZLE_WirePlug_C_UpdateWireMesh::CallFunc_Greater_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(WIREPUZZLE_WirePlug_C_UpdateWireMesh, CallFunc_Array_Length_ReturnValue) == 0x00009C, "Member 'WIREPUZZLE_WirePlug_C_UpdateWireMesh::CallFunc_Array_Length_ReturnValue' has a wrong offset!");
static_assert(offsetof(WIREPUZZLE_WirePlug_C_UpdateWireMesh, CallFunc_Array_Length_ReturnValue_1) == 0x0000A0, "Member 'WIREPUZZLE_WirePlug_C_UpdateWireMesh::CallFunc_Array_Length_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(WIREPUZZLE_WirePlug_C_UpdateWireMesh, CallFunc_EqualEqual_IntInt_ReturnValue) == 0x0000A4, "Member 'WIREPUZZLE_WirePlug_C_UpdateWireMesh::CallFunc_EqualEqual_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(WIREPUZZLE_WirePlug_C_UpdateWireMesh, Temp_struct_Variable_9) == 0x0000A8, "Member 'WIREPUZZLE_WirePlug_C_UpdateWireMesh::Temp_struct_Variable_9' has a wrong offset!");
static_assert(offsetof(WIREPUZZLE_WirePlug_C_UpdateWireMesh, CallFunc_GetSplineLength_ReturnValue) == 0x0000B8, "Member 'WIREPUZZLE_WirePlug_C_UpdateWireMesh::CallFunc_GetSplineLength_ReturnValue' has a wrong offset!");
static_assert(offsetof(WIREPUZZLE_WirePlug_C_UpdateWireMesh, CallFunc_Greater_FloatFloat_ReturnValue) == 0x0000BC, "Member 'WIREPUZZLE_WirePlug_C_UpdateWireMesh::CallFunc_Greater_FloatFloat_ReturnValue' has a wrong offset!");

// Function WIREPUZZLE_WirePlug.WIREPUZZLE_WirePlug_C.UpdateWirePlugTransform
// 0x0150 (0x0150 - 0x0000)
struct WIREPUZZLE_WirePlug_C_UpdateWirePlugTransform final
{
public:
	struct FVector                                Direction;                                         // 0x0000(0x000C)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         LastSplinePointIndex;                              // 0x000C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Multiply_VectorFloat_ReturnValue;         // 0x0010(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_GetDirectionAtSplinePoint_ReturnValue;    // 0x001C(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_28[0x8];                                       // 0x0028(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTransform                             CallFunc_GetTransformAtSplinePoint_ReturnValue;    // 0x0030(0x0030)(IsPlainOldData, NoDestructor)
	struct FVector                                CallFunc_BreakTransform_Location;                  // 0x0060(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               CallFunc_BreakTransform_Rotation;                  // 0x006C(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FVector                                CallFunc_BreakTransform_Scale;                     // 0x0078(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Add_VectorVector_ReturnValue;             // 0x0084(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FTransform                             CallFunc_MakeTransform_ReturnValue;                // 0x0090(0x0030)(IsPlainOldData, NoDestructor)
	int32                                         CallFunc_GetNumberOfSplinePoints_ReturnValue;      // 0x00C0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FHitResult                             CallFunc_K2_SetRelativeTransform_SweepHitResult;   // 0x00C4(0x0088)(IsPlainOldData, NoDestructor, ContainsInstancedReference)
	int32                                         CallFunc_Subtract_IntInt_ReturnValue;              // 0x014C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(WIREPUZZLE_WirePlug_C_UpdateWirePlugTransform) == 0x000010, "Wrong alignment on WIREPUZZLE_WirePlug_C_UpdateWirePlugTransform");
static_assert(sizeof(WIREPUZZLE_WirePlug_C_UpdateWirePlugTransform) == 0x000150, "Wrong size on WIREPUZZLE_WirePlug_C_UpdateWirePlugTransform");
static_assert(offsetof(WIREPUZZLE_WirePlug_C_UpdateWirePlugTransform, Direction) == 0x000000, "Member 'WIREPUZZLE_WirePlug_C_UpdateWirePlugTransform::Direction' has a wrong offset!");
static_assert(offsetof(WIREPUZZLE_WirePlug_C_UpdateWirePlugTransform, LastSplinePointIndex) == 0x00000C, "Member 'WIREPUZZLE_WirePlug_C_UpdateWirePlugTransform::LastSplinePointIndex' has a wrong offset!");
static_assert(offsetof(WIREPUZZLE_WirePlug_C_UpdateWirePlugTransform, CallFunc_Multiply_VectorFloat_ReturnValue) == 0x000010, "Member 'WIREPUZZLE_WirePlug_C_UpdateWirePlugTransform::CallFunc_Multiply_VectorFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(WIREPUZZLE_WirePlug_C_UpdateWirePlugTransform, CallFunc_GetDirectionAtSplinePoint_ReturnValue) == 0x00001C, "Member 'WIREPUZZLE_WirePlug_C_UpdateWirePlugTransform::CallFunc_GetDirectionAtSplinePoint_ReturnValue' has a wrong offset!");
static_assert(offsetof(WIREPUZZLE_WirePlug_C_UpdateWirePlugTransform, CallFunc_GetTransformAtSplinePoint_ReturnValue) == 0x000030, "Member 'WIREPUZZLE_WirePlug_C_UpdateWirePlugTransform::CallFunc_GetTransformAtSplinePoint_ReturnValue' has a wrong offset!");
static_assert(offsetof(WIREPUZZLE_WirePlug_C_UpdateWirePlugTransform, CallFunc_BreakTransform_Location) == 0x000060, "Member 'WIREPUZZLE_WirePlug_C_UpdateWirePlugTransform::CallFunc_BreakTransform_Location' has a wrong offset!");
static_assert(offsetof(WIREPUZZLE_WirePlug_C_UpdateWirePlugTransform, CallFunc_BreakTransform_Rotation) == 0x00006C, "Member 'WIREPUZZLE_WirePlug_C_UpdateWirePlugTransform::CallFunc_BreakTransform_Rotation' has a wrong offset!");
static_assert(offsetof(WIREPUZZLE_WirePlug_C_UpdateWirePlugTransform, CallFunc_BreakTransform_Scale) == 0x000078, "Member 'WIREPUZZLE_WirePlug_C_UpdateWirePlugTransform::CallFunc_BreakTransform_Scale' has a wrong offset!");
static_assert(offsetof(WIREPUZZLE_WirePlug_C_UpdateWirePlugTransform, CallFunc_Add_VectorVector_ReturnValue) == 0x000084, "Member 'WIREPUZZLE_WirePlug_C_UpdateWirePlugTransform::CallFunc_Add_VectorVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(WIREPUZZLE_WirePlug_C_UpdateWirePlugTransform, CallFunc_MakeTransform_ReturnValue) == 0x000090, "Member 'WIREPUZZLE_WirePlug_C_UpdateWirePlugTransform::CallFunc_MakeTransform_ReturnValue' has a wrong offset!");
static_assert(offsetof(WIREPUZZLE_WirePlug_C_UpdateWirePlugTransform, CallFunc_GetNumberOfSplinePoints_ReturnValue) == 0x0000C0, "Member 'WIREPUZZLE_WirePlug_C_UpdateWirePlugTransform::CallFunc_GetNumberOfSplinePoints_ReturnValue' has a wrong offset!");
static_assert(offsetof(WIREPUZZLE_WirePlug_C_UpdateWirePlugTransform, CallFunc_K2_SetRelativeTransform_SweepHitResult) == 0x0000C4, "Member 'WIREPUZZLE_WirePlug_C_UpdateWirePlugTransform::CallFunc_K2_SetRelativeTransform_SweepHitResult' has a wrong offset!");
static_assert(offsetof(WIREPUZZLE_WirePlug_C_UpdateWirePlugTransform, CallFunc_Subtract_IntInt_ReturnValue) == 0x00014C, "Member 'WIREPUZZLE_WirePlug_C_UpdateWirePlugTransform::CallFunc_Subtract_IntInt_ReturnValue' has a wrong offset!");

// Function WIREPUZZLE_WirePlug.WIREPUZZLE_WirePlug_C.UpdateWirePlug
// 0x0008 (0x0008 - 0x0000)
struct WIREPUZZLE_WirePlug_C_UpdateWirePlug final
{
public:
	float                                         InterpAlpha;                                       // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_FMin_ReturnValue;                         // 0x0004(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(WIREPUZZLE_WirePlug_C_UpdateWirePlug) == 0x000004, "Wrong alignment on WIREPUZZLE_WirePlug_C_UpdateWirePlug");
static_assert(sizeof(WIREPUZZLE_WirePlug_C_UpdateWirePlug) == 0x000008, "Wrong size on WIREPUZZLE_WirePlug_C_UpdateWirePlug");
static_assert(offsetof(WIREPUZZLE_WirePlug_C_UpdateWirePlug, InterpAlpha) == 0x000000, "Member 'WIREPUZZLE_WirePlug_C_UpdateWirePlug::InterpAlpha' has a wrong offset!");
static_assert(offsetof(WIREPUZZLE_WirePlug_C_UpdateWirePlug, CallFunc_FMin_ReturnValue) == 0x000004, "Member 'WIREPUZZLE_WirePlug_C_UpdateWirePlug::CallFunc_FMin_ReturnValue' has a wrong offset!");

// Function WIREPUZZLE_WirePlug.WIREPUZZLE_WirePlug_C.SetInitiallyConnected
// 0x0008 (0x0008 - 0x0000)
struct WIREPUZZLE_WirePlug_C_SetInitiallyConnected final
{
public:
	ENUM_WirePlugState                            Temp_byte_Variable;                                // 0x0000(0x0001)(ConstParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Array_Add_ReturnValue;                    // 0x0004(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(WIREPUZZLE_WirePlug_C_SetInitiallyConnected) == 0x000004, "Wrong alignment on WIREPUZZLE_WirePlug_C_SetInitiallyConnected");
static_assert(sizeof(WIREPUZZLE_WirePlug_C_SetInitiallyConnected) == 0x000008, "Wrong size on WIREPUZZLE_WirePlug_C_SetInitiallyConnected");
static_assert(offsetof(WIREPUZZLE_WirePlug_C_SetInitiallyConnected, Temp_byte_Variable) == 0x000000, "Member 'WIREPUZZLE_WirePlug_C_SetInitiallyConnected::Temp_byte_Variable' has a wrong offset!");
static_assert(offsetof(WIREPUZZLE_WirePlug_C_SetInitiallyConnected, CallFunc_Array_Add_ReturnValue) == 0x000004, "Member 'WIREPUZZLE_WirePlug_C_SetInitiallyConnected::CallFunc_Array_Add_ReturnValue' has a wrong offset!");

// Function WIREPUZZLE_WirePlug.WIREPUZZLE_WirePlug_C.SetTargetWirePlugState
// 0x001C (0x001C - 0x0000)
struct WIREPUZZLE_WirePlug_C_SetTargetWirePlugState final
{
public:
	ENUM_WirePlugState                            NewState;                                          // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Success;                                           // 0x0001(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_2[0x2];                                        // 0x0002(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         DeltaTimeOffset;                                   // 0x0004(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_CanImmediatelyTransitionToState_Result;   // 0x0008(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Array_Length_ReturnValue;                 // 0x000C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Greater_IntInt_ReturnValue;               // 0x0010(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_EqualEqual_ByteByte_ReturnValue;          // 0x0011(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_12[0x2];                                       // 0x0012(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_FillTargetStatePath_DeltaTimeOffset;      // 0x0014(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_ByteByte_ReturnValue_1;        // 0x0018(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_EqualEqual_ByteByte_ReturnValue_2;        // 0x0019(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BooleanOR_ReturnValue;                    // 0x001A(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(WIREPUZZLE_WirePlug_C_SetTargetWirePlugState) == 0x000004, "Wrong alignment on WIREPUZZLE_WirePlug_C_SetTargetWirePlugState");
static_assert(sizeof(WIREPUZZLE_WirePlug_C_SetTargetWirePlugState) == 0x00001C, "Wrong size on WIREPUZZLE_WirePlug_C_SetTargetWirePlugState");
static_assert(offsetof(WIREPUZZLE_WirePlug_C_SetTargetWirePlugState, NewState) == 0x000000, "Member 'WIREPUZZLE_WirePlug_C_SetTargetWirePlugState::NewState' has a wrong offset!");
static_assert(offsetof(WIREPUZZLE_WirePlug_C_SetTargetWirePlugState, Success) == 0x000001, "Member 'WIREPUZZLE_WirePlug_C_SetTargetWirePlugState::Success' has a wrong offset!");
static_assert(offsetof(WIREPUZZLE_WirePlug_C_SetTargetWirePlugState, DeltaTimeOffset) == 0x000004, "Member 'WIREPUZZLE_WirePlug_C_SetTargetWirePlugState::DeltaTimeOffset' has a wrong offset!");
static_assert(offsetof(WIREPUZZLE_WirePlug_C_SetTargetWirePlugState, CallFunc_CanImmediatelyTransitionToState_Result) == 0x000008, "Member 'WIREPUZZLE_WirePlug_C_SetTargetWirePlugState::CallFunc_CanImmediatelyTransitionToState_Result' has a wrong offset!");
static_assert(offsetof(WIREPUZZLE_WirePlug_C_SetTargetWirePlugState, CallFunc_Array_Length_ReturnValue) == 0x00000C, "Member 'WIREPUZZLE_WirePlug_C_SetTargetWirePlugState::CallFunc_Array_Length_ReturnValue' has a wrong offset!");
static_assert(offsetof(WIREPUZZLE_WirePlug_C_SetTargetWirePlugState, CallFunc_Greater_IntInt_ReturnValue) == 0x000010, "Member 'WIREPUZZLE_WirePlug_C_SetTargetWirePlugState::CallFunc_Greater_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(WIREPUZZLE_WirePlug_C_SetTargetWirePlugState, CallFunc_EqualEqual_ByteByte_ReturnValue) == 0x000011, "Member 'WIREPUZZLE_WirePlug_C_SetTargetWirePlugState::CallFunc_EqualEqual_ByteByte_ReturnValue' has a wrong offset!");
static_assert(offsetof(WIREPUZZLE_WirePlug_C_SetTargetWirePlugState, CallFunc_FillTargetStatePath_DeltaTimeOffset) == 0x000014, "Member 'WIREPUZZLE_WirePlug_C_SetTargetWirePlugState::CallFunc_FillTargetStatePath_DeltaTimeOffset' has a wrong offset!");
static_assert(offsetof(WIREPUZZLE_WirePlug_C_SetTargetWirePlugState, CallFunc_EqualEqual_ByteByte_ReturnValue_1) == 0x000018, "Member 'WIREPUZZLE_WirePlug_C_SetTargetWirePlugState::CallFunc_EqualEqual_ByteByte_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(WIREPUZZLE_WirePlug_C_SetTargetWirePlugState, CallFunc_EqualEqual_ByteByte_ReturnValue_2) == 0x000019, "Member 'WIREPUZZLE_WirePlug_C_SetTargetWirePlugState::CallFunc_EqualEqual_ByteByte_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(WIREPUZZLE_WirePlug_C_SetTargetWirePlugState, CallFunc_BooleanOR_ReturnValue) == 0x00001A, "Member 'WIREPUZZLE_WirePlug_C_SetTargetWirePlugState::CallFunc_BooleanOR_ReturnValue' has a wrong offset!");

// Function WIREPUZZLE_WirePlug.WIREPUZZLE_WirePlug_C.GetSplineForState
// 0x0018 (0x0018 - 0x0000)
struct WIREPUZZLE_WirePlug_C_GetSplineForState final
{
public:
	ENUM_WirePlugState                            State;                                             // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class USplineComponent*                       Result;                                            // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_SwitchEnum_CmpSuccess;                      // 0x0010(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(WIREPUZZLE_WirePlug_C_GetSplineForState) == 0x000008, "Wrong alignment on WIREPUZZLE_WirePlug_C_GetSplineForState");
static_assert(sizeof(WIREPUZZLE_WirePlug_C_GetSplineForState) == 0x000018, "Wrong size on WIREPUZZLE_WirePlug_C_GetSplineForState");
static_assert(offsetof(WIREPUZZLE_WirePlug_C_GetSplineForState, State) == 0x000000, "Member 'WIREPUZZLE_WirePlug_C_GetSplineForState::State' has a wrong offset!");
static_assert(offsetof(WIREPUZZLE_WirePlug_C_GetSplineForState, Result) == 0x000008, "Member 'WIREPUZZLE_WirePlug_C_GetSplineForState::Result' has a wrong offset!");
static_assert(offsetof(WIREPUZZLE_WirePlug_C_GetSplineForState, K2Node_SwitchEnum_CmpSuccess) == 0x000010, "Member 'WIREPUZZLE_WirePlug_C_GetSplineForState::K2Node_SwitchEnum_CmpSuccess' has a wrong offset!");

// Function WIREPUZZLE_WirePlug.WIREPUZZLE_WirePlug_C.UpdateSpline
// 0x01E8 (0x01E8 - 0x0000)
struct WIREPUZZLE_WirePlug_C_UpdateSpline final
{
public:
	float                                         InterpAlpha;                                       // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                UpVector;                                          // 0x0004(0x000C)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                SplineDirection;                                   // 0x0010(0x000C)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                TargetTangent;                                     // 0x001C(0x000C)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                SourceTangent;                                     // 0x0028(0x000C)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                TargetLocation;                                    // 0x0034(0x000C)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                SourceLocation;                                    // 0x0040(0x000C)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ENUM_WirePlugState                            TargetInterpState;                                 // 0x004C(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ENUM_WirePlugState                            SourceInterpState;                                 // 0x004D(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_4E[0x2];                                       // 0x004E(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CurrentDistance;                                   // 0x0050(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         TargetDistance;                                    // 0x0054(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         SourceDistance;                                    // 0x0058(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         SplinePointIndex;                                  // 0x005C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class USplineComponent*                       TargetSpline;                                      // 0x0060(0x0008)(Edit, BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class USplineComponent*                       SourceSpline;                                      // 0x0068(0x0008)(Edit, BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ENUM_WirePlugState                            CallFunc_GetNextTransitionState_State;             // 0x0070(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_71[0x3];                                       // 0x0071(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                CallFunc_MakeVector_ReturnValue;                   // 0x0074(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_VSize_ReturnValue;                        // 0x0080(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_VSize_ReturnValue_1;                      // 0x0084(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Lerp_ReturnValue;                         // 0x0088(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               CallFunc_Conv_VectorToRotator_ReturnValue;         // 0x008C(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FRotator                               CallFunc_Conv_VectorToRotator_ReturnValue_1;       // 0x0098(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_NotEqual_VectorVector_ReturnValue;        // 0x00A4(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_A5[0x3];                                       // 0x00A5(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                CallFunc_Cross_VectorVector_ReturnValue;           // 0x00A8(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Subtract_IntInt_ReturnValue;              // 0x00B4(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_GetLocationAtSplinePoint_ReturnValue;     // 0x00B8(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_GetLocationAtSplinePoint_ReturnValue_1;   // 0x00C4(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Subtract_VectorVector_ReturnValue;        // 0x00D0(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Normal_ReturnValue;                       // 0x00DC(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_GetTangentAtSplinePoint_ReturnValue;      // 0x00E8(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_GetTangentAtDistanceAlongSpline_ReturnValue; // 0x00F4(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_GetTangentAtDistanceAlongSpline_ReturnValue_1; // 0x0100(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_GetTangentAtSplinePoint_ReturnValue_1;    // 0x010C(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_GetLocationAtSplinePoint_ReturnValue_2;   // 0x0118(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_GetLocationAtDistanceAlongSpline_ReturnValue; // 0x0124(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Variable;                                 // 0x0130(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_GetLocationAtDistanceAlongSpline_ReturnValue_1; // 0x0134(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue;                   // 0x0140(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_GetLocationAtSplinePoint_ReturnValue_3;   // 0x0144(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               CallFunc_RLerp_ReturnValue;                        // 0x0150(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FVector                                CallFunc_Conv_RotatorToVector_ReturnValue;         // 0x015C(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Multiply_VectorFloat_ReturnValue;         // 0x0168(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_174[0x4];                                      // 0x0174(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class USplineComponent*                       CallFunc_GetSplineForState_Result;                 // 0x0178(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class USplineComponent*                       CallFunc_GetSplineForState_Result_1;               // 0x0180(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_NotEqual_ObjectObject_ReturnValue;        // 0x0188(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Less_IntInt_ReturnValue;                  // 0x0189(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Greater_IntInt_ReturnValue;               // 0x018A(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BooleanAND_ReturnValue;                   // 0x018B(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BooleanAND_ReturnValue_1;                 // 0x018C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_18D[0x3];                                      // 0x018D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                CallFunc_GetLocalOffsetForSplinePoint_Result;      // 0x0190(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Add_VectorVector_ReturnValue;             // 0x019C(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_GetLocalOffsetForSplinePoint_Result_1;    // 0x01A8(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Add_VectorVector_ReturnValue_1;           // 0x01B4(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_VLerp_ReturnValue;                        // 0x01C0(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Lerp_ReturnValue_1;                       // 0x01CC(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_GetDistanceAlongSplineAtSplinePoint_ReturnValue; // 0x01D0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_GetDistanceAlongSplineAtSplinePoint_ReturnValue_1; // 0x01D4(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_GetNumberOfSplinePoints_ReturnValue;      // 0x01D8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Subtract_IntInt_ReturnValue_1;            // 0x01DC(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_LessEqual_IntInt_ReturnValue;             // 0x01E0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(WIREPUZZLE_WirePlug_C_UpdateSpline) == 0x000008, "Wrong alignment on WIREPUZZLE_WirePlug_C_UpdateSpline");
static_assert(sizeof(WIREPUZZLE_WirePlug_C_UpdateSpline) == 0x0001E8, "Wrong size on WIREPUZZLE_WirePlug_C_UpdateSpline");
static_assert(offsetof(WIREPUZZLE_WirePlug_C_UpdateSpline, InterpAlpha) == 0x000000, "Member 'WIREPUZZLE_WirePlug_C_UpdateSpline::InterpAlpha' has a wrong offset!");
static_assert(offsetof(WIREPUZZLE_WirePlug_C_UpdateSpline, UpVector) == 0x000004, "Member 'WIREPUZZLE_WirePlug_C_UpdateSpline::UpVector' has a wrong offset!");
static_assert(offsetof(WIREPUZZLE_WirePlug_C_UpdateSpline, SplineDirection) == 0x000010, "Member 'WIREPUZZLE_WirePlug_C_UpdateSpline::SplineDirection' has a wrong offset!");
static_assert(offsetof(WIREPUZZLE_WirePlug_C_UpdateSpline, TargetTangent) == 0x00001C, "Member 'WIREPUZZLE_WirePlug_C_UpdateSpline::TargetTangent' has a wrong offset!");
static_assert(offsetof(WIREPUZZLE_WirePlug_C_UpdateSpline, SourceTangent) == 0x000028, "Member 'WIREPUZZLE_WirePlug_C_UpdateSpline::SourceTangent' has a wrong offset!");
static_assert(offsetof(WIREPUZZLE_WirePlug_C_UpdateSpline, TargetLocation) == 0x000034, "Member 'WIREPUZZLE_WirePlug_C_UpdateSpline::TargetLocation' has a wrong offset!");
static_assert(offsetof(WIREPUZZLE_WirePlug_C_UpdateSpline, SourceLocation) == 0x000040, "Member 'WIREPUZZLE_WirePlug_C_UpdateSpline::SourceLocation' has a wrong offset!");
static_assert(offsetof(WIREPUZZLE_WirePlug_C_UpdateSpline, TargetInterpState) == 0x00004C, "Member 'WIREPUZZLE_WirePlug_C_UpdateSpline::TargetInterpState' has a wrong offset!");
static_assert(offsetof(WIREPUZZLE_WirePlug_C_UpdateSpline, SourceInterpState) == 0x00004D, "Member 'WIREPUZZLE_WirePlug_C_UpdateSpline::SourceInterpState' has a wrong offset!");
static_assert(offsetof(WIREPUZZLE_WirePlug_C_UpdateSpline, CurrentDistance) == 0x000050, "Member 'WIREPUZZLE_WirePlug_C_UpdateSpline::CurrentDistance' has a wrong offset!");
static_assert(offsetof(WIREPUZZLE_WirePlug_C_UpdateSpline, TargetDistance) == 0x000054, "Member 'WIREPUZZLE_WirePlug_C_UpdateSpline::TargetDistance' has a wrong offset!");
static_assert(offsetof(WIREPUZZLE_WirePlug_C_UpdateSpline, SourceDistance) == 0x000058, "Member 'WIREPUZZLE_WirePlug_C_UpdateSpline::SourceDistance' has a wrong offset!");
static_assert(offsetof(WIREPUZZLE_WirePlug_C_UpdateSpline, SplinePointIndex) == 0x00005C, "Member 'WIREPUZZLE_WirePlug_C_UpdateSpline::SplinePointIndex' has a wrong offset!");
static_assert(offsetof(WIREPUZZLE_WirePlug_C_UpdateSpline, TargetSpline) == 0x000060, "Member 'WIREPUZZLE_WirePlug_C_UpdateSpline::TargetSpline' has a wrong offset!");
static_assert(offsetof(WIREPUZZLE_WirePlug_C_UpdateSpline, SourceSpline) == 0x000068, "Member 'WIREPUZZLE_WirePlug_C_UpdateSpline::SourceSpline' has a wrong offset!");
static_assert(offsetof(WIREPUZZLE_WirePlug_C_UpdateSpline, CallFunc_GetNextTransitionState_State) == 0x000070, "Member 'WIREPUZZLE_WirePlug_C_UpdateSpline::CallFunc_GetNextTransitionState_State' has a wrong offset!");
static_assert(offsetof(WIREPUZZLE_WirePlug_C_UpdateSpline, CallFunc_MakeVector_ReturnValue) == 0x000074, "Member 'WIREPUZZLE_WirePlug_C_UpdateSpline::CallFunc_MakeVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(WIREPUZZLE_WirePlug_C_UpdateSpline, CallFunc_VSize_ReturnValue) == 0x000080, "Member 'WIREPUZZLE_WirePlug_C_UpdateSpline::CallFunc_VSize_ReturnValue' has a wrong offset!");
static_assert(offsetof(WIREPUZZLE_WirePlug_C_UpdateSpline, CallFunc_VSize_ReturnValue_1) == 0x000084, "Member 'WIREPUZZLE_WirePlug_C_UpdateSpline::CallFunc_VSize_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(WIREPUZZLE_WirePlug_C_UpdateSpline, CallFunc_Lerp_ReturnValue) == 0x000088, "Member 'WIREPUZZLE_WirePlug_C_UpdateSpline::CallFunc_Lerp_ReturnValue' has a wrong offset!");
static_assert(offsetof(WIREPUZZLE_WirePlug_C_UpdateSpline, CallFunc_Conv_VectorToRotator_ReturnValue) == 0x00008C, "Member 'WIREPUZZLE_WirePlug_C_UpdateSpline::CallFunc_Conv_VectorToRotator_ReturnValue' has a wrong offset!");
static_assert(offsetof(WIREPUZZLE_WirePlug_C_UpdateSpline, CallFunc_Conv_VectorToRotator_ReturnValue_1) == 0x000098, "Member 'WIREPUZZLE_WirePlug_C_UpdateSpline::CallFunc_Conv_VectorToRotator_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(WIREPUZZLE_WirePlug_C_UpdateSpline, CallFunc_NotEqual_VectorVector_ReturnValue) == 0x0000A4, "Member 'WIREPUZZLE_WirePlug_C_UpdateSpline::CallFunc_NotEqual_VectorVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(WIREPUZZLE_WirePlug_C_UpdateSpline, CallFunc_Cross_VectorVector_ReturnValue) == 0x0000A8, "Member 'WIREPUZZLE_WirePlug_C_UpdateSpline::CallFunc_Cross_VectorVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(WIREPUZZLE_WirePlug_C_UpdateSpline, CallFunc_Subtract_IntInt_ReturnValue) == 0x0000B4, "Member 'WIREPUZZLE_WirePlug_C_UpdateSpline::CallFunc_Subtract_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(WIREPUZZLE_WirePlug_C_UpdateSpline, CallFunc_GetLocationAtSplinePoint_ReturnValue) == 0x0000B8, "Member 'WIREPUZZLE_WirePlug_C_UpdateSpline::CallFunc_GetLocationAtSplinePoint_ReturnValue' has a wrong offset!");
static_assert(offsetof(WIREPUZZLE_WirePlug_C_UpdateSpline, CallFunc_GetLocationAtSplinePoint_ReturnValue_1) == 0x0000C4, "Member 'WIREPUZZLE_WirePlug_C_UpdateSpline::CallFunc_GetLocationAtSplinePoint_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(WIREPUZZLE_WirePlug_C_UpdateSpline, CallFunc_Subtract_VectorVector_ReturnValue) == 0x0000D0, "Member 'WIREPUZZLE_WirePlug_C_UpdateSpline::CallFunc_Subtract_VectorVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(WIREPUZZLE_WirePlug_C_UpdateSpline, CallFunc_Normal_ReturnValue) == 0x0000DC, "Member 'WIREPUZZLE_WirePlug_C_UpdateSpline::CallFunc_Normal_ReturnValue' has a wrong offset!");
static_assert(offsetof(WIREPUZZLE_WirePlug_C_UpdateSpline, CallFunc_GetTangentAtSplinePoint_ReturnValue) == 0x0000E8, "Member 'WIREPUZZLE_WirePlug_C_UpdateSpline::CallFunc_GetTangentAtSplinePoint_ReturnValue' has a wrong offset!");
static_assert(offsetof(WIREPUZZLE_WirePlug_C_UpdateSpline, CallFunc_GetTangentAtDistanceAlongSpline_ReturnValue) == 0x0000F4, "Member 'WIREPUZZLE_WirePlug_C_UpdateSpline::CallFunc_GetTangentAtDistanceAlongSpline_ReturnValue' has a wrong offset!");
static_assert(offsetof(WIREPUZZLE_WirePlug_C_UpdateSpline, CallFunc_GetTangentAtDistanceAlongSpline_ReturnValue_1) == 0x000100, "Member 'WIREPUZZLE_WirePlug_C_UpdateSpline::CallFunc_GetTangentAtDistanceAlongSpline_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(WIREPUZZLE_WirePlug_C_UpdateSpline, CallFunc_GetTangentAtSplinePoint_ReturnValue_1) == 0x00010C, "Member 'WIREPUZZLE_WirePlug_C_UpdateSpline::CallFunc_GetTangentAtSplinePoint_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(WIREPUZZLE_WirePlug_C_UpdateSpline, CallFunc_GetLocationAtSplinePoint_ReturnValue_2) == 0x000118, "Member 'WIREPUZZLE_WirePlug_C_UpdateSpline::CallFunc_GetLocationAtSplinePoint_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(WIREPUZZLE_WirePlug_C_UpdateSpline, CallFunc_GetLocationAtDistanceAlongSpline_ReturnValue) == 0x000124, "Member 'WIREPUZZLE_WirePlug_C_UpdateSpline::CallFunc_GetLocationAtDistanceAlongSpline_ReturnValue' has a wrong offset!");
static_assert(offsetof(WIREPUZZLE_WirePlug_C_UpdateSpline, Temp_int_Variable) == 0x000130, "Member 'WIREPUZZLE_WirePlug_C_UpdateSpline::Temp_int_Variable' has a wrong offset!");
static_assert(offsetof(WIREPUZZLE_WirePlug_C_UpdateSpline, CallFunc_GetLocationAtDistanceAlongSpline_ReturnValue_1) == 0x000134, "Member 'WIREPUZZLE_WirePlug_C_UpdateSpline::CallFunc_GetLocationAtDistanceAlongSpline_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(WIREPUZZLE_WirePlug_C_UpdateSpline, CallFunc_Add_IntInt_ReturnValue) == 0x000140, "Member 'WIREPUZZLE_WirePlug_C_UpdateSpline::CallFunc_Add_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(WIREPUZZLE_WirePlug_C_UpdateSpline, CallFunc_GetLocationAtSplinePoint_ReturnValue_3) == 0x000144, "Member 'WIREPUZZLE_WirePlug_C_UpdateSpline::CallFunc_GetLocationAtSplinePoint_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(WIREPUZZLE_WirePlug_C_UpdateSpline, CallFunc_RLerp_ReturnValue) == 0x000150, "Member 'WIREPUZZLE_WirePlug_C_UpdateSpline::CallFunc_RLerp_ReturnValue' has a wrong offset!");
static_assert(offsetof(WIREPUZZLE_WirePlug_C_UpdateSpline, CallFunc_Conv_RotatorToVector_ReturnValue) == 0x00015C, "Member 'WIREPUZZLE_WirePlug_C_UpdateSpline::CallFunc_Conv_RotatorToVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(WIREPUZZLE_WirePlug_C_UpdateSpline, CallFunc_Multiply_VectorFloat_ReturnValue) == 0x000168, "Member 'WIREPUZZLE_WirePlug_C_UpdateSpline::CallFunc_Multiply_VectorFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(WIREPUZZLE_WirePlug_C_UpdateSpline, CallFunc_GetSplineForState_Result) == 0x000178, "Member 'WIREPUZZLE_WirePlug_C_UpdateSpline::CallFunc_GetSplineForState_Result' has a wrong offset!");
static_assert(offsetof(WIREPUZZLE_WirePlug_C_UpdateSpline, CallFunc_GetSplineForState_Result_1) == 0x000180, "Member 'WIREPUZZLE_WirePlug_C_UpdateSpline::CallFunc_GetSplineForState_Result_1' has a wrong offset!");
static_assert(offsetof(WIREPUZZLE_WirePlug_C_UpdateSpline, CallFunc_NotEqual_ObjectObject_ReturnValue) == 0x000188, "Member 'WIREPUZZLE_WirePlug_C_UpdateSpline::CallFunc_NotEqual_ObjectObject_ReturnValue' has a wrong offset!");
static_assert(offsetof(WIREPUZZLE_WirePlug_C_UpdateSpline, CallFunc_Less_IntInt_ReturnValue) == 0x000189, "Member 'WIREPUZZLE_WirePlug_C_UpdateSpline::CallFunc_Less_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(WIREPUZZLE_WirePlug_C_UpdateSpline, CallFunc_Greater_IntInt_ReturnValue) == 0x00018A, "Member 'WIREPUZZLE_WirePlug_C_UpdateSpline::CallFunc_Greater_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(WIREPUZZLE_WirePlug_C_UpdateSpline, CallFunc_BooleanAND_ReturnValue) == 0x00018B, "Member 'WIREPUZZLE_WirePlug_C_UpdateSpline::CallFunc_BooleanAND_ReturnValue' has a wrong offset!");
static_assert(offsetof(WIREPUZZLE_WirePlug_C_UpdateSpline, CallFunc_BooleanAND_ReturnValue_1) == 0x00018C, "Member 'WIREPUZZLE_WirePlug_C_UpdateSpline::CallFunc_BooleanAND_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(WIREPUZZLE_WirePlug_C_UpdateSpline, CallFunc_GetLocalOffsetForSplinePoint_Result) == 0x000190, "Member 'WIREPUZZLE_WirePlug_C_UpdateSpline::CallFunc_GetLocalOffsetForSplinePoint_Result' has a wrong offset!");
static_assert(offsetof(WIREPUZZLE_WirePlug_C_UpdateSpline, CallFunc_Add_VectorVector_ReturnValue) == 0x00019C, "Member 'WIREPUZZLE_WirePlug_C_UpdateSpline::CallFunc_Add_VectorVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(WIREPUZZLE_WirePlug_C_UpdateSpline, CallFunc_GetLocalOffsetForSplinePoint_Result_1) == 0x0001A8, "Member 'WIREPUZZLE_WirePlug_C_UpdateSpline::CallFunc_GetLocalOffsetForSplinePoint_Result_1' has a wrong offset!");
static_assert(offsetof(WIREPUZZLE_WirePlug_C_UpdateSpline, CallFunc_Add_VectorVector_ReturnValue_1) == 0x0001B4, "Member 'WIREPUZZLE_WirePlug_C_UpdateSpline::CallFunc_Add_VectorVector_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(WIREPUZZLE_WirePlug_C_UpdateSpline, CallFunc_VLerp_ReturnValue) == 0x0001C0, "Member 'WIREPUZZLE_WirePlug_C_UpdateSpline::CallFunc_VLerp_ReturnValue' has a wrong offset!");
static_assert(offsetof(WIREPUZZLE_WirePlug_C_UpdateSpline, CallFunc_Lerp_ReturnValue_1) == 0x0001CC, "Member 'WIREPUZZLE_WirePlug_C_UpdateSpline::CallFunc_Lerp_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(WIREPUZZLE_WirePlug_C_UpdateSpline, CallFunc_GetDistanceAlongSplineAtSplinePoint_ReturnValue) == 0x0001D0, "Member 'WIREPUZZLE_WirePlug_C_UpdateSpline::CallFunc_GetDistanceAlongSplineAtSplinePoint_ReturnValue' has a wrong offset!");
static_assert(offsetof(WIREPUZZLE_WirePlug_C_UpdateSpline, CallFunc_GetDistanceAlongSplineAtSplinePoint_ReturnValue_1) == 0x0001D4, "Member 'WIREPUZZLE_WirePlug_C_UpdateSpline::CallFunc_GetDistanceAlongSplineAtSplinePoint_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(WIREPUZZLE_WirePlug_C_UpdateSpline, CallFunc_GetNumberOfSplinePoints_ReturnValue) == 0x0001D8, "Member 'WIREPUZZLE_WirePlug_C_UpdateSpline::CallFunc_GetNumberOfSplinePoints_ReturnValue' has a wrong offset!");
static_assert(offsetof(WIREPUZZLE_WirePlug_C_UpdateSpline, CallFunc_Subtract_IntInt_ReturnValue_1) == 0x0001DC, "Member 'WIREPUZZLE_WirePlug_C_UpdateSpline::CallFunc_Subtract_IntInt_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(WIREPUZZLE_WirePlug_C_UpdateSpline, CallFunc_LessEqual_IntInt_ReturnValue) == 0x0001E0, "Member 'WIREPUZZLE_WirePlug_C_UpdateSpline::CallFunc_LessEqual_IntInt_ReturnValue' has a wrong offset!");

// Function WIREPUZZLE_WirePlug.WIREPUZZLE_WirePlug_C.SetConnectionOffset
// 0x0008 (0x0008 - 0x0000)
struct WIREPUZZLE_WirePlug_C_SetConnectionOffset final
{
public:
	struct FVector2D                              Offset;                                            // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(WIREPUZZLE_WirePlug_C_SetConnectionOffset) == 0x000004, "Wrong alignment on WIREPUZZLE_WirePlug_C_SetConnectionOffset");
static_assert(sizeof(WIREPUZZLE_WirePlug_C_SetConnectionOffset) == 0x000008, "Wrong size on WIREPUZZLE_WirePlug_C_SetConnectionOffset");
static_assert(offsetof(WIREPUZZLE_WirePlug_C_SetConnectionOffset, Offset) == 0x000000, "Member 'WIREPUZZLE_WirePlug_C_SetConnectionOffset::Offset' has a wrong offset!");

// Function WIREPUZZLE_WirePlug.WIREPUZZLE_WirePlug_C.GetLocalOffsetForSplinePoint
// 0x007C (0x007C - 0x0000)
struct WIREPUZZLE_WirePlug_C_GetLocalOffsetForSplinePoint final
{
public:
	ENUM_WirePlugState                            State;                                             // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         PointIndex;                                        // 0x0004(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                Result;                                            // 0x0008(0x000C)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         DepthOffset;                                       // 0x0014(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector2D                              Offset;                                            // 0x0018(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Variable;                                // 0x0020(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_GreaterEqual_IntInt_ReturnValue;          // 0x0021(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_22[0x2];                                       // 0x0022(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         Temp_float_Variable;                               // 0x0024(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector2D                              CallFunc_MakeVector2D_ReturnValue;                 // 0x0028(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_ByteByte_ReturnValue;          // 0x0030(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	ENUM_WirePlugState                            Temp_byte_Variable;                                // 0x0031(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Greater_IntInt_ReturnValue;               // 0x0032(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Less_IntInt_ReturnValue;                  // 0x0033(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_NotEqual_ByteByte_ReturnValue;            // 0x0034(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BooleanOR_ReturnValue;                    // 0x0035(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BooleanAND_ReturnValue;                   // 0x0036(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BooleanAND_ReturnValue_1;                 // 0x0037(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                         K2Node_Select_Default;                             // 0x0038(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector2D                              CallFunc_Add_Vector2DVector2D_ReturnValue;         // 0x003C(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector2D                              K2Node_Select_Default_1;                           // 0x0044(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_NotEqual_ByteByte_ReturnValue_1;          // 0x004C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BooleanAND_ReturnValue_2;                 // 0x004D(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_4E[0x2];                                       // 0x004E(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Subtract_IntInt_ReturnValue;              // 0x0050(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Conv_IntToFloat_ReturnValue;              // 0x0054(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Divide_FloatFloat_ReturnValue;            // 0x0058(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Subtract_FloatFloat_ReturnValue;          // 0x005C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector2D                              CallFunc_Multiply_Vector2DFloat_ReturnValue;       // 0x0060(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector2D_X;                          // 0x0068(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector2D_Y;                          // 0x006C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_MakeVector_ReturnValue;                   // 0x0070(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(WIREPUZZLE_WirePlug_C_GetLocalOffsetForSplinePoint) == 0x000004, "Wrong alignment on WIREPUZZLE_WirePlug_C_GetLocalOffsetForSplinePoint");
static_assert(sizeof(WIREPUZZLE_WirePlug_C_GetLocalOffsetForSplinePoint) == 0x00007C, "Wrong size on WIREPUZZLE_WirePlug_C_GetLocalOffsetForSplinePoint");
static_assert(offsetof(WIREPUZZLE_WirePlug_C_GetLocalOffsetForSplinePoint, State) == 0x000000, "Member 'WIREPUZZLE_WirePlug_C_GetLocalOffsetForSplinePoint::State' has a wrong offset!");
static_assert(offsetof(WIREPUZZLE_WirePlug_C_GetLocalOffsetForSplinePoint, PointIndex) == 0x000004, "Member 'WIREPUZZLE_WirePlug_C_GetLocalOffsetForSplinePoint::PointIndex' has a wrong offset!");
static_assert(offsetof(WIREPUZZLE_WirePlug_C_GetLocalOffsetForSplinePoint, Result) == 0x000008, "Member 'WIREPUZZLE_WirePlug_C_GetLocalOffsetForSplinePoint::Result' has a wrong offset!");
static_assert(offsetof(WIREPUZZLE_WirePlug_C_GetLocalOffsetForSplinePoint, DepthOffset) == 0x000014, "Member 'WIREPUZZLE_WirePlug_C_GetLocalOffsetForSplinePoint::DepthOffset' has a wrong offset!");
static_assert(offsetof(WIREPUZZLE_WirePlug_C_GetLocalOffsetForSplinePoint, Offset) == 0x000018, "Member 'WIREPUZZLE_WirePlug_C_GetLocalOffsetForSplinePoint::Offset' has a wrong offset!");
static_assert(offsetof(WIREPUZZLE_WirePlug_C_GetLocalOffsetForSplinePoint, Temp_bool_Variable) == 0x000020, "Member 'WIREPUZZLE_WirePlug_C_GetLocalOffsetForSplinePoint::Temp_bool_Variable' has a wrong offset!");
static_assert(offsetof(WIREPUZZLE_WirePlug_C_GetLocalOffsetForSplinePoint, CallFunc_GreaterEqual_IntInt_ReturnValue) == 0x000021, "Member 'WIREPUZZLE_WirePlug_C_GetLocalOffsetForSplinePoint::CallFunc_GreaterEqual_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(WIREPUZZLE_WirePlug_C_GetLocalOffsetForSplinePoint, Temp_float_Variable) == 0x000024, "Member 'WIREPUZZLE_WirePlug_C_GetLocalOffsetForSplinePoint::Temp_float_Variable' has a wrong offset!");
static_assert(offsetof(WIREPUZZLE_WirePlug_C_GetLocalOffsetForSplinePoint, CallFunc_MakeVector2D_ReturnValue) == 0x000028, "Member 'WIREPUZZLE_WirePlug_C_GetLocalOffsetForSplinePoint::CallFunc_MakeVector2D_ReturnValue' has a wrong offset!");
static_assert(offsetof(WIREPUZZLE_WirePlug_C_GetLocalOffsetForSplinePoint, CallFunc_EqualEqual_ByteByte_ReturnValue) == 0x000030, "Member 'WIREPUZZLE_WirePlug_C_GetLocalOffsetForSplinePoint::CallFunc_EqualEqual_ByteByte_ReturnValue' has a wrong offset!");
static_assert(offsetof(WIREPUZZLE_WirePlug_C_GetLocalOffsetForSplinePoint, Temp_byte_Variable) == 0x000031, "Member 'WIREPUZZLE_WirePlug_C_GetLocalOffsetForSplinePoint::Temp_byte_Variable' has a wrong offset!");
static_assert(offsetof(WIREPUZZLE_WirePlug_C_GetLocalOffsetForSplinePoint, CallFunc_Greater_IntInt_ReturnValue) == 0x000032, "Member 'WIREPUZZLE_WirePlug_C_GetLocalOffsetForSplinePoint::CallFunc_Greater_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(WIREPUZZLE_WirePlug_C_GetLocalOffsetForSplinePoint, CallFunc_Less_IntInt_ReturnValue) == 0x000033, "Member 'WIREPUZZLE_WirePlug_C_GetLocalOffsetForSplinePoint::CallFunc_Less_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(WIREPUZZLE_WirePlug_C_GetLocalOffsetForSplinePoint, CallFunc_NotEqual_ByteByte_ReturnValue) == 0x000034, "Member 'WIREPUZZLE_WirePlug_C_GetLocalOffsetForSplinePoint::CallFunc_NotEqual_ByteByte_ReturnValue' has a wrong offset!");
static_assert(offsetof(WIREPUZZLE_WirePlug_C_GetLocalOffsetForSplinePoint, CallFunc_BooleanOR_ReturnValue) == 0x000035, "Member 'WIREPUZZLE_WirePlug_C_GetLocalOffsetForSplinePoint::CallFunc_BooleanOR_ReturnValue' has a wrong offset!");
static_assert(offsetof(WIREPUZZLE_WirePlug_C_GetLocalOffsetForSplinePoint, CallFunc_BooleanAND_ReturnValue) == 0x000036, "Member 'WIREPUZZLE_WirePlug_C_GetLocalOffsetForSplinePoint::CallFunc_BooleanAND_ReturnValue' has a wrong offset!");
static_assert(offsetof(WIREPUZZLE_WirePlug_C_GetLocalOffsetForSplinePoint, CallFunc_BooleanAND_ReturnValue_1) == 0x000037, "Member 'WIREPUZZLE_WirePlug_C_GetLocalOffsetForSplinePoint::CallFunc_BooleanAND_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(WIREPUZZLE_WirePlug_C_GetLocalOffsetForSplinePoint, K2Node_Select_Default) == 0x000038, "Member 'WIREPUZZLE_WirePlug_C_GetLocalOffsetForSplinePoint::K2Node_Select_Default' has a wrong offset!");
static_assert(offsetof(WIREPUZZLE_WirePlug_C_GetLocalOffsetForSplinePoint, CallFunc_Add_Vector2DVector2D_ReturnValue) == 0x00003C, "Member 'WIREPUZZLE_WirePlug_C_GetLocalOffsetForSplinePoint::CallFunc_Add_Vector2DVector2D_ReturnValue' has a wrong offset!");
static_assert(offsetof(WIREPUZZLE_WirePlug_C_GetLocalOffsetForSplinePoint, K2Node_Select_Default_1) == 0x000044, "Member 'WIREPUZZLE_WirePlug_C_GetLocalOffsetForSplinePoint::K2Node_Select_Default_1' has a wrong offset!");
static_assert(offsetof(WIREPUZZLE_WirePlug_C_GetLocalOffsetForSplinePoint, CallFunc_NotEqual_ByteByte_ReturnValue_1) == 0x00004C, "Member 'WIREPUZZLE_WirePlug_C_GetLocalOffsetForSplinePoint::CallFunc_NotEqual_ByteByte_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(WIREPUZZLE_WirePlug_C_GetLocalOffsetForSplinePoint, CallFunc_BooleanAND_ReturnValue_2) == 0x00004D, "Member 'WIREPUZZLE_WirePlug_C_GetLocalOffsetForSplinePoint::CallFunc_BooleanAND_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(WIREPUZZLE_WirePlug_C_GetLocalOffsetForSplinePoint, CallFunc_Subtract_IntInt_ReturnValue) == 0x000050, "Member 'WIREPUZZLE_WirePlug_C_GetLocalOffsetForSplinePoint::CallFunc_Subtract_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(WIREPUZZLE_WirePlug_C_GetLocalOffsetForSplinePoint, CallFunc_Conv_IntToFloat_ReturnValue) == 0x000054, "Member 'WIREPUZZLE_WirePlug_C_GetLocalOffsetForSplinePoint::CallFunc_Conv_IntToFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(WIREPUZZLE_WirePlug_C_GetLocalOffsetForSplinePoint, CallFunc_Divide_FloatFloat_ReturnValue) == 0x000058, "Member 'WIREPUZZLE_WirePlug_C_GetLocalOffsetForSplinePoint::CallFunc_Divide_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(WIREPUZZLE_WirePlug_C_GetLocalOffsetForSplinePoint, CallFunc_Subtract_FloatFloat_ReturnValue) == 0x00005C, "Member 'WIREPUZZLE_WirePlug_C_GetLocalOffsetForSplinePoint::CallFunc_Subtract_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(WIREPUZZLE_WirePlug_C_GetLocalOffsetForSplinePoint, CallFunc_Multiply_Vector2DFloat_ReturnValue) == 0x000060, "Member 'WIREPUZZLE_WirePlug_C_GetLocalOffsetForSplinePoint::CallFunc_Multiply_Vector2DFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(WIREPUZZLE_WirePlug_C_GetLocalOffsetForSplinePoint, CallFunc_BreakVector2D_X) == 0x000068, "Member 'WIREPUZZLE_WirePlug_C_GetLocalOffsetForSplinePoint::CallFunc_BreakVector2D_X' has a wrong offset!");
static_assert(offsetof(WIREPUZZLE_WirePlug_C_GetLocalOffsetForSplinePoint, CallFunc_BreakVector2D_Y) == 0x00006C, "Member 'WIREPUZZLE_WirePlug_C_GetLocalOffsetForSplinePoint::CallFunc_BreakVector2D_Y' has a wrong offset!");
static_assert(offsetof(WIREPUZZLE_WirePlug_C_GetLocalOffsetForSplinePoint, CallFunc_MakeVector_ReturnValue) == 0x000070, "Member 'WIREPUZZLE_WirePlug_C_GetLocalOffsetForSplinePoint::CallFunc_MakeVector_ReturnValue' has a wrong offset!");

// Function WIREPUZZLE_WirePlug.WIREPUZZLE_WirePlug_C.SetTargetExtensionOffset
// 0x0010 (0x0010 - 0x0000)
struct WIREPUZZLE_WirePlug_C_SetTargetExtensionOffset final
{
public:
	struct FVector2D                              Offset;                                            // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ENUM_WirePlugState                            CallFunc_GetNextTransitionState_State;             // 0x0008(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_ByteByte_ReturnValue;          // 0x0009(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_EqualEqual_ByteByte_ReturnValue_1;        // 0x000A(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BooleanOR_ReturnValue;                    // 0x000B(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_NotEqual_Vector2DVector2D_ReturnValue;    // 0x000C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(WIREPUZZLE_WirePlug_C_SetTargetExtensionOffset) == 0x000004, "Wrong alignment on WIREPUZZLE_WirePlug_C_SetTargetExtensionOffset");
static_assert(sizeof(WIREPUZZLE_WirePlug_C_SetTargetExtensionOffset) == 0x000010, "Wrong size on WIREPUZZLE_WirePlug_C_SetTargetExtensionOffset");
static_assert(offsetof(WIREPUZZLE_WirePlug_C_SetTargetExtensionOffset, Offset) == 0x000000, "Member 'WIREPUZZLE_WirePlug_C_SetTargetExtensionOffset::Offset' has a wrong offset!");
static_assert(offsetof(WIREPUZZLE_WirePlug_C_SetTargetExtensionOffset, CallFunc_GetNextTransitionState_State) == 0x000008, "Member 'WIREPUZZLE_WirePlug_C_SetTargetExtensionOffset::CallFunc_GetNextTransitionState_State' has a wrong offset!");
static_assert(offsetof(WIREPUZZLE_WirePlug_C_SetTargetExtensionOffset, CallFunc_EqualEqual_ByteByte_ReturnValue) == 0x000009, "Member 'WIREPUZZLE_WirePlug_C_SetTargetExtensionOffset::CallFunc_EqualEqual_ByteByte_ReturnValue' has a wrong offset!");
static_assert(offsetof(WIREPUZZLE_WirePlug_C_SetTargetExtensionOffset, CallFunc_EqualEqual_ByteByte_ReturnValue_1) == 0x00000A, "Member 'WIREPUZZLE_WirePlug_C_SetTargetExtensionOffset::CallFunc_EqualEqual_ByteByte_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(WIREPUZZLE_WirePlug_C_SetTargetExtensionOffset, CallFunc_BooleanOR_ReturnValue) == 0x00000B, "Member 'WIREPUZZLE_WirePlug_C_SetTargetExtensionOffset::CallFunc_BooleanOR_ReturnValue' has a wrong offset!");
static_assert(offsetof(WIREPUZZLE_WirePlug_C_SetTargetExtensionOffset, CallFunc_NotEqual_Vector2DVector2D_ReturnValue) == 0x00000C, "Member 'WIREPUZZLE_WirePlug_C_SetTargetExtensionOffset::CallFunc_NotEqual_Vector2DVector2D_ReturnValue' has a wrong offset!");

// Function WIREPUZZLE_WirePlug.WIREPUZZLE_WirePlug_C.InitializeSplines
// 0x0090 (0x0090 - 0x0000)
struct WIREPUZZLE_WirePlug_C_InitializeSplines final
{
public:
	int32                                         PointIndex;                                        // 0x0000(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Variable;                                 // 0x0004(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue;                   // 0x0008(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               CallFunc_GetRotationAtSplinePoint_ReturnValue;     // 0x000C(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FVector                                CallFunc_GetLeaveTangentAtSplinePoint_ReturnValue; // 0x0018(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_GetArriveTangentAtSplinePoint_ReturnValue; // 0x0024(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Conv_IntToFloat_ReturnValue;              // 0x0030(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_GetLocationAtSplinePoint_ReturnValue;     // 0x0034(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FSplinePoint                           K2Node_MakeStruct_SplinePoint;                     // 0x0040(0x0044)(NoDestructor)
	int32                                         CallFunc_GetNumberOfSplinePoints_ReturnValue;      // 0x0084(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Subtract_IntInt_ReturnValue;              // 0x0088(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_LessEqual_IntInt_ReturnValue;             // 0x008C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(WIREPUZZLE_WirePlug_C_InitializeSplines) == 0x000004, "Wrong alignment on WIREPUZZLE_WirePlug_C_InitializeSplines");
static_assert(sizeof(WIREPUZZLE_WirePlug_C_InitializeSplines) == 0x000090, "Wrong size on WIREPUZZLE_WirePlug_C_InitializeSplines");
static_assert(offsetof(WIREPUZZLE_WirePlug_C_InitializeSplines, PointIndex) == 0x000000, "Member 'WIREPUZZLE_WirePlug_C_InitializeSplines::PointIndex' has a wrong offset!");
static_assert(offsetof(WIREPUZZLE_WirePlug_C_InitializeSplines, Temp_int_Variable) == 0x000004, "Member 'WIREPUZZLE_WirePlug_C_InitializeSplines::Temp_int_Variable' has a wrong offset!");
static_assert(offsetof(WIREPUZZLE_WirePlug_C_InitializeSplines, CallFunc_Add_IntInt_ReturnValue) == 0x000008, "Member 'WIREPUZZLE_WirePlug_C_InitializeSplines::CallFunc_Add_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(WIREPUZZLE_WirePlug_C_InitializeSplines, CallFunc_GetRotationAtSplinePoint_ReturnValue) == 0x00000C, "Member 'WIREPUZZLE_WirePlug_C_InitializeSplines::CallFunc_GetRotationAtSplinePoint_ReturnValue' has a wrong offset!");
static_assert(offsetof(WIREPUZZLE_WirePlug_C_InitializeSplines, CallFunc_GetLeaveTangentAtSplinePoint_ReturnValue) == 0x000018, "Member 'WIREPUZZLE_WirePlug_C_InitializeSplines::CallFunc_GetLeaveTangentAtSplinePoint_ReturnValue' has a wrong offset!");
static_assert(offsetof(WIREPUZZLE_WirePlug_C_InitializeSplines, CallFunc_GetArriveTangentAtSplinePoint_ReturnValue) == 0x000024, "Member 'WIREPUZZLE_WirePlug_C_InitializeSplines::CallFunc_GetArriveTangentAtSplinePoint_ReturnValue' has a wrong offset!");
static_assert(offsetof(WIREPUZZLE_WirePlug_C_InitializeSplines, CallFunc_Conv_IntToFloat_ReturnValue) == 0x000030, "Member 'WIREPUZZLE_WirePlug_C_InitializeSplines::CallFunc_Conv_IntToFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(WIREPUZZLE_WirePlug_C_InitializeSplines, CallFunc_GetLocationAtSplinePoint_ReturnValue) == 0x000034, "Member 'WIREPUZZLE_WirePlug_C_InitializeSplines::CallFunc_GetLocationAtSplinePoint_ReturnValue' has a wrong offset!");
static_assert(offsetof(WIREPUZZLE_WirePlug_C_InitializeSplines, K2Node_MakeStruct_SplinePoint) == 0x000040, "Member 'WIREPUZZLE_WirePlug_C_InitializeSplines::K2Node_MakeStruct_SplinePoint' has a wrong offset!");
static_assert(offsetof(WIREPUZZLE_WirePlug_C_InitializeSplines, CallFunc_GetNumberOfSplinePoints_ReturnValue) == 0x000084, "Member 'WIREPUZZLE_WirePlug_C_InitializeSplines::CallFunc_GetNumberOfSplinePoints_ReturnValue' has a wrong offset!");
static_assert(offsetof(WIREPUZZLE_WirePlug_C_InitializeSplines, CallFunc_Subtract_IntInt_ReturnValue) == 0x000088, "Member 'WIREPUZZLE_WirePlug_C_InitializeSplines::CallFunc_Subtract_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(WIREPUZZLE_WirePlug_C_InitializeSplines, CallFunc_LessEqual_IntInt_ReturnValue) == 0x00008C, "Member 'WIREPUZZLE_WirePlug_C_InitializeSplines::CallFunc_LessEqual_IntInt_ReturnValue' has a wrong offset!");

// Function WIREPUZZLE_WirePlug.WIREPUZZLE_WirePlug_C.OnFinishedSplineUpdate
// 0x0030 (0x0030 - 0x0000)
struct WIREPUZZLE_WirePlug_C_OnFinishedSplineUpdate final
{
public:
	class AWIREPUZZLE_Base_C*                     WirePuzzle;                                        // 0x0000(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Length_ReturnValue;                 // 0x0008(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Greater_IntInt_ReturnValue;               // 0x000C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_D[0x3];                                        // 0x000D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class AActor*                                 CallFunc_GetOwner_ReturnValue;                     // 0x0010(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AWIREPUZZLE_Base_C*                     K2Node_DynamicCast_AsWIREPUZZLE_Base;              // 0x0018(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0020(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_21[0x3];                                       // 0x0021(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Array_Length_ReturnValue_1;               // 0x0024(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Greater_IntInt_ReturnValue_1;             // 0x0028(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	ENUM_WirePlugState                            CallFunc_Array_Get_Item;                           // 0x0029(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_SwitchEnum_CmpSuccess;                      // 0x002A(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(WIREPUZZLE_WirePlug_C_OnFinishedSplineUpdate) == 0x000008, "Wrong alignment on WIREPUZZLE_WirePlug_C_OnFinishedSplineUpdate");
static_assert(sizeof(WIREPUZZLE_WirePlug_C_OnFinishedSplineUpdate) == 0x000030, "Wrong size on WIREPUZZLE_WirePlug_C_OnFinishedSplineUpdate");
static_assert(offsetof(WIREPUZZLE_WirePlug_C_OnFinishedSplineUpdate, WirePuzzle) == 0x000000, "Member 'WIREPUZZLE_WirePlug_C_OnFinishedSplineUpdate::WirePuzzle' has a wrong offset!");
static_assert(offsetof(WIREPUZZLE_WirePlug_C_OnFinishedSplineUpdate, CallFunc_Array_Length_ReturnValue) == 0x000008, "Member 'WIREPUZZLE_WirePlug_C_OnFinishedSplineUpdate::CallFunc_Array_Length_ReturnValue' has a wrong offset!");
static_assert(offsetof(WIREPUZZLE_WirePlug_C_OnFinishedSplineUpdate, CallFunc_Greater_IntInt_ReturnValue) == 0x00000C, "Member 'WIREPUZZLE_WirePlug_C_OnFinishedSplineUpdate::CallFunc_Greater_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(WIREPUZZLE_WirePlug_C_OnFinishedSplineUpdate, CallFunc_GetOwner_ReturnValue) == 0x000010, "Member 'WIREPUZZLE_WirePlug_C_OnFinishedSplineUpdate::CallFunc_GetOwner_ReturnValue' has a wrong offset!");
static_assert(offsetof(WIREPUZZLE_WirePlug_C_OnFinishedSplineUpdate, K2Node_DynamicCast_AsWIREPUZZLE_Base) == 0x000018, "Member 'WIREPUZZLE_WirePlug_C_OnFinishedSplineUpdate::K2Node_DynamicCast_AsWIREPUZZLE_Base' has a wrong offset!");
static_assert(offsetof(WIREPUZZLE_WirePlug_C_OnFinishedSplineUpdate, K2Node_DynamicCast_bSuccess) == 0x000020, "Member 'WIREPUZZLE_WirePlug_C_OnFinishedSplineUpdate::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(WIREPUZZLE_WirePlug_C_OnFinishedSplineUpdate, CallFunc_Array_Length_ReturnValue_1) == 0x000024, "Member 'WIREPUZZLE_WirePlug_C_OnFinishedSplineUpdate::CallFunc_Array_Length_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(WIREPUZZLE_WirePlug_C_OnFinishedSplineUpdate, CallFunc_Greater_IntInt_ReturnValue_1) == 0x000028, "Member 'WIREPUZZLE_WirePlug_C_OnFinishedSplineUpdate::CallFunc_Greater_IntInt_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(WIREPUZZLE_WirePlug_C_OnFinishedSplineUpdate, CallFunc_Array_Get_Item) == 0x000029, "Member 'WIREPUZZLE_WirePlug_C_OnFinishedSplineUpdate::CallFunc_Array_Get_Item' has a wrong offset!");
static_assert(offsetof(WIREPUZZLE_WirePlug_C_OnFinishedSplineUpdate, K2Node_SwitchEnum_CmpSuccess) == 0x00002A, "Member 'WIREPUZZLE_WirePlug_C_OnFinishedSplineUpdate::K2Node_SwitchEnum_CmpSuccess' has a wrong offset!");

// Function WIREPUZZLE_WirePlug.WIREPUZZLE_WirePlug_C.GetTransitionDurationForState
// 0x0018 (0x0018 - 0x0000)
struct WIREPUZZLE_WirePlug_C_GetTransitionDurationForState final
{
public:
	ENUM_WirePlugState                            State;                                             // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         Result;                                            // 0x0004(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UTimelineComponent*                     CallFunc_GetTimelineForState_Result;               // 0x0008(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_GetTimelineLength_ReturnValue;            // 0x0010(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(WIREPUZZLE_WirePlug_C_GetTransitionDurationForState) == 0x000008, "Wrong alignment on WIREPUZZLE_WirePlug_C_GetTransitionDurationForState");
static_assert(sizeof(WIREPUZZLE_WirePlug_C_GetTransitionDurationForState) == 0x000018, "Wrong size on WIREPUZZLE_WirePlug_C_GetTransitionDurationForState");
static_assert(offsetof(WIREPUZZLE_WirePlug_C_GetTransitionDurationForState, State) == 0x000000, "Member 'WIREPUZZLE_WirePlug_C_GetTransitionDurationForState::State' has a wrong offset!");
static_assert(offsetof(WIREPUZZLE_WirePlug_C_GetTransitionDurationForState, Result) == 0x000004, "Member 'WIREPUZZLE_WirePlug_C_GetTransitionDurationForState::Result' has a wrong offset!");
static_assert(offsetof(WIREPUZZLE_WirePlug_C_GetTransitionDurationForState, CallFunc_GetTimelineForState_Result) == 0x000008, "Member 'WIREPUZZLE_WirePlug_C_GetTransitionDurationForState::CallFunc_GetTimelineForState_Result' has a wrong offset!");
static_assert(offsetof(WIREPUZZLE_WirePlug_C_GetTransitionDurationForState, CallFunc_GetTimelineLength_ReturnValue) == 0x000010, "Member 'WIREPUZZLE_WirePlug_C_GetTransitionDurationForState::CallFunc_GetTimelineLength_ReturnValue' has a wrong offset!");

// Function WIREPUZZLE_WirePlug.WIREPUZZLE_WirePlug_C.UpdateExtensionOffset
// 0x0060 (0x0060 - 0x0000)
struct WIREPUZZLE_WirePlug_C_UpdateExtensionOffset final
{
public:
	float                                         DeltaTime;                                         // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          IsExtended;                                        // 0x0004(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector2D                              CurrentTargetOffset;                               // 0x0008(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Variable;                                // 0x0010(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_11[0x3];                                       // 0x0011(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector2D                              Temp_struct_Variable;                              // 0x0014(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ENUM_WirePlugState                            CallFunc_GetNextTransitionState_State;             // 0x001C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_ByteByte_ReturnValue;          // 0x001D(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	ENUM_WirePlugState                            CallFunc_GetNextTransitionState_State_1;           // 0x001E(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_NotEqual_ByteByte_ReturnValue;            // 0x001F(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Temp_bool_Variable_1;                              // 0x0020(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_21[0x3];                                       // 0x0021(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                CallFunc_Conv_Vector2DToVector_ReturnValue;        // 0x0024(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         K2Node_Select_Default;                             // 0x0030(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector2D                              K2Node_Select_Default_1;                           // 0x0034(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_Vector2DVector2D_ReturnValue;  // 0x003C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_3D[0x3];                                       // 0x003D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                CallFunc_Conv_Vector2DToVector_ReturnValue_1;      // 0x0040(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_VInterpTo_ReturnValue;                    // 0x004C(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector2D                              CallFunc_Conv_VectorToVector2D_ReturnValue;        // 0x0058(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(WIREPUZZLE_WirePlug_C_UpdateExtensionOffset) == 0x000004, "Wrong alignment on WIREPUZZLE_WirePlug_C_UpdateExtensionOffset");
static_assert(sizeof(WIREPUZZLE_WirePlug_C_UpdateExtensionOffset) == 0x000060, "Wrong size on WIREPUZZLE_WirePlug_C_UpdateExtensionOffset");
static_assert(offsetof(WIREPUZZLE_WirePlug_C_UpdateExtensionOffset, DeltaTime) == 0x000000, "Member 'WIREPUZZLE_WirePlug_C_UpdateExtensionOffset::DeltaTime' has a wrong offset!");
static_assert(offsetof(WIREPUZZLE_WirePlug_C_UpdateExtensionOffset, IsExtended) == 0x000004, "Member 'WIREPUZZLE_WirePlug_C_UpdateExtensionOffset::IsExtended' has a wrong offset!");
static_assert(offsetof(WIREPUZZLE_WirePlug_C_UpdateExtensionOffset, CurrentTargetOffset) == 0x000008, "Member 'WIREPUZZLE_WirePlug_C_UpdateExtensionOffset::CurrentTargetOffset' has a wrong offset!");
static_assert(offsetof(WIREPUZZLE_WirePlug_C_UpdateExtensionOffset, Temp_bool_Variable) == 0x000010, "Member 'WIREPUZZLE_WirePlug_C_UpdateExtensionOffset::Temp_bool_Variable' has a wrong offset!");
static_assert(offsetof(WIREPUZZLE_WirePlug_C_UpdateExtensionOffset, Temp_struct_Variable) == 0x000014, "Member 'WIREPUZZLE_WirePlug_C_UpdateExtensionOffset::Temp_struct_Variable' has a wrong offset!");
static_assert(offsetof(WIREPUZZLE_WirePlug_C_UpdateExtensionOffset, CallFunc_GetNextTransitionState_State) == 0x00001C, "Member 'WIREPUZZLE_WirePlug_C_UpdateExtensionOffset::CallFunc_GetNextTransitionState_State' has a wrong offset!");
static_assert(offsetof(WIREPUZZLE_WirePlug_C_UpdateExtensionOffset, CallFunc_EqualEqual_ByteByte_ReturnValue) == 0x00001D, "Member 'WIREPUZZLE_WirePlug_C_UpdateExtensionOffset::CallFunc_EqualEqual_ByteByte_ReturnValue' has a wrong offset!");
static_assert(offsetof(WIREPUZZLE_WirePlug_C_UpdateExtensionOffset, CallFunc_GetNextTransitionState_State_1) == 0x00001E, "Member 'WIREPUZZLE_WirePlug_C_UpdateExtensionOffset::CallFunc_GetNextTransitionState_State_1' has a wrong offset!");
static_assert(offsetof(WIREPUZZLE_WirePlug_C_UpdateExtensionOffset, CallFunc_NotEqual_ByteByte_ReturnValue) == 0x00001F, "Member 'WIREPUZZLE_WirePlug_C_UpdateExtensionOffset::CallFunc_NotEqual_ByteByte_ReturnValue' has a wrong offset!");
static_assert(offsetof(WIREPUZZLE_WirePlug_C_UpdateExtensionOffset, Temp_bool_Variable_1) == 0x000020, "Member 'WIREPUZZLE_WirePlug_C_UpdateExtensionOffset::Temp_bool_Variable_1' has a wrong offset!");
static_assert(offsetof(WIREPUZZLE_WirePlug_C_UpdateExtensionOffset, CallFunc_Conv_Vector2DToVector_ReturnValue) == 0x000024, "Member 'WIREPUZZLE_WirePlug_C_UpdateExtensionOffset::CallFunc_Conv_Vector2DToVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(WIREPUZZLE_WirePlug_C_UpdateExtensionOffset, K2Node_Select_Default) == 0x000030, "Member 'WIREPUZZLE_WirePlug_C_UpdateExtensionOffset::K2Node_Select_Default' has a wrong offset!");
static_assert(offsetof(WIREPUZZLE_WirePlug_C_UpdateExtensionOffset, K2Node_Select_Default_1) == 0x000034, "Member 'WIREPUZZLE_WirePlug_C_UpdateExtensionOffset::K2Node_Select_Default_1' has a wrong offset!");
static_assert(offsetof(WIREPUZZLE_WirePlug_C_UpdateExtensionOffset, CallFunc_EqualEqual_Vector2DVector2D_ReturnValue) == 0x00003C, "Member 'WIREPUZZLE_WirePlug_C_UpdateExtensionOffset::CallFunc_EqualEqual_Vector2DVector2D_ReturnValue' has a wrong offset!");
static_assert(offsetof(WIREPUZZLE_WirePlug_C_UpdateExtensionOffset, CallFunc_Conv_Vector2DToVector_ReturnValue_1) == 0x000040, "Member 'WIREPUZZLE_WirePlug_C_UpdateExtensionOffset::CallFunc_Conv_Vector2DToVector_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(WIREPUZZLE_WirePlug_C_UpdateExtensionOffset, CallFunc_VInterpTo_ReturnValue) == 0x00004C, "Member 'WIREPUZZLE_WirePlug_C_UpdateExtensionOffset::CallFunc_VInterpTo_ReturnValue' has a wrong offset!");
static_assert(offsetof(WIREPUZZLE_WirePlug_C_UpdateExtensionOffset, CallFunc_Conv_VectorToVector2D_ReturnValue) == 0x000058, "Member 'WIREPUZZLE_WirePlug_C_UpdateExtensionOffset::CallFunc_Conv_VectorToVector2D_ReturnValue' has a wrong offset!");

// Function WIREPUZZLE_WirePlug.WIREPUZZLE_WirePlug_C.GetTimelineForState
// 0x0018 (0x0018 - 0x0000)
struct WIREPUZZLE_WirePlug_C_GetTimelineForState final
{
public:
	ENUM_WirePlugState                            State;                                             // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UTimelineComponent*                     Result;                                            // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_SwitchEnum_CmpSuccess;                      // 0x0010(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(WIREPUZZLE_WirePlug_C_GetTimelineForState) == 0x000008, "Wrong alignment on WIREPUZZLE_WirePlug_C_GetTimelineForState");
static_assert(sizeof(WIREPUZZLE_WirePlug_C_GetTimelineForState) == 0x000018, "Wrong size on WIREPUZZLE_WirePlug_C_GetTimelineForState");
static_assert(offsetof(WIREPUZZLE_WirePlug_C_GetTimelineForState, State) == 0x000000, "Member 'WIREPUZZLE_WirePlug_C_GetTimelineForState::State' has a wrong offset!");
static_assert(offsetof(WIREPUZZLE_WirePlug_C_GetTimelineForState, Result) == 0x000008, "Member 'WIREPUZZLE_WirePlug_C_GetTimelineForState::Result' has a wrong offset!");
static_assert(offsetof(WIREPUZZLE_WirePlug_C_GetTimelineForState, K2Node_SwitchEnum_CmpSuccess) == 0x000010, "Member 'WIREPUZZLE_WirePlug_C_GetTimelineForState::K2Node_SwitchEnum_CmpSuccess' has a wrong offset!");

// Function WIREPUZZLE_WirePlug.WIREPUZZLE_WirePlug_C.GetProgressInCurrentState
// 0x0018 (0x0018 - 0x0000)
struct WIREPUZZLE_WirePlug_C_GetProgressInCurrentState final
{
public:
	float                                         Progress;                                          // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         ElapsedTime;                                       // 0x0004(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_GetGameTimeInSeconds_ReturnValue;         // 0x0008(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Divide_FloatFloat_ReturnValue;            // 0x000C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_FMin_ReturnValue;                         // 0x0010(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Subtract_FloatFloat_ReturnValue;          // 0x0014(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(WIREPUZZLE_WirePlug_C_GetProgressInCurrentState) == 0x000004, "Wrong alignment on WIREPUZZLE_WirePlug_C_GetProgressInCurrentState");
static_assert(sizeof(WIREPUZZLE_WirePlug_C_GetProgressInCurrentState) == 0x000018, "Wrong size on WIREPUZZLE_WirePlug_C_GetProgressInCurrentState");
static_assert(offsetof(WIREPUZZLE_WirePlug_C_GetProgressInCurrentState, Progress) == 0x000000, "Member 'WIREPUZZLE_WirePlug_C_GetProgressInCurrentState::Progress' has a wrong offset!");
static_assert(offsetof(WIREPUZZLE_WirePlug_C_GetProgressInCurrentState, ElapsedTime) == 0x000004, "Member 'WIREPUZZLE_WirePlug_C_GetProgressInCurrentState::ElapsedTime' has a wrong offset!");
static_assert(offsetof(WIREPUZZLE_WirePlug_C_GetProgressInCurrentState, CallFunc_GetGameTimeInSeconds_ReturnValue) == 0x000008, "Member 'WIREPUZZLE_WirePlug_C_GetProgressInCurrentState::CallFunc_GetGameTimeInSeconds_ReturnValue' has a wrong offset!");
static_assert(offsetof(WIREPUZZLE_WirePlug_C_GetProgressInCurrentState, CallFunc_Divide_FloatFloat_ReturnValue) == 0x00000C, "Member 'WIREPUZZLE_WirePlug_C_GetProgressInCurrentState::CallFunc_Divide_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(WIREPUZZLE_WirePlug_C_GetProgressInCurrentState, CallFunc_FMin_ReturnValue) == 0x000010, "Member 'WIREPUZZLE_WirePlug_C_GetProgressInCurrentState::CallFunc_FMin_ReturnValue' has a wrong offset!");
static_assert(offsetof(WIREPUZZLE_WirePlug_C_GetProgressInCurrentState, CallFunc_Subtract_FloatFloat_ReturnValue) == 0x000014, "Member 'WIREPUZZLE_WirePlug_C_GetProgressInCurrentState::CallFunc_Subtract_FloatFloat_ReturnValue' has a wrong offset!");

// Function WIREPUZZLE_WirePlug.WIREPUZZLE_WirePlug_C.GetShouldBlendAlongTargetForState
// 0x0003 (0x0003 - 0x0000)
struct WIREPUZZLE_WirePlug_C_GetShouldBlendAlongTargetForState final
{
public:
	ENUM_WirePlugState                            State;                                             // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Result;                                            // 0x0001(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          K2Node_SwitchEnum_CmpSuccess;                      // 0x0002(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(WIREPUZZLE_WirePlug_C_GetShouldBlendAlongTargetForState) == 0x000001, "Wrong alignment on WIREPUZZLE_WirePlug_C_GetShouldBlendAlongTargetForState");
static_assert(sizeof(WIREPUZZLE_WirePlug_C_GetShouldBlendAlongTargetForState) == 0x000003, "Wrong size on WIREPUZZLE_WirePlug_C_GetShouldBlendAlongTargetForState");
static_assert(offsetof(WIREPUZZLE_WirePlug_C_GetShouldBlendAlongTargetForState, State) == 0x000000, "Member 'WIREPUZZLE_WirePlug_C_GetShouldBlendAlongTargetForState::State' has a wrong offset!");
static_assert(offsetof(WIREPUZZLE_WirePlug_C_GetShouldBlendAlongTargetForState, Result) == 0x000001, "Member 'WIREPUZZLE_WirePlug_C_GetShouldBlendAlongTargetForState::Result' has a wrong offset!");
static_assert(offsetof(WIREPUZZLE_WirePlug_C_GetShouldBlendAlongTargetForState, K2Node_SwitchEnum_CmpSuccess) == 0x000002, "Member 'WIREPUZZLE_WirePlug_C_GetShouldBlendAlongTargetForState::K2Node_SwitchEnum_CmpSuccess' has a wrong offset!");

// Function WIREPUZZLE_WirePlug.WIREPUZZLE_WirePlug_C.GetShouldUseShortestPathRotationForState
// 0x0007 (0x0007 - 0x0000)
struct WIREPUZZLE_WirePlug_C_GetShouldUseShortestPathRotationForState final
{
public:
	ENUM_WirePlugState                            State;                                             // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Result;                                            // 0x0001(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_NotEqual_ByteByte_ReturnValue;            // 0x0002(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_EqualEqual_FloatFloat_ReturnValue;        // 0x0003(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_NotEqual_ByteByte_ReturnValue_1;          // 0x0004(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BooleanAND_ReturnValue;                   // 0x0005(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BooleanOR_ReturnValue;                    // 0x0006(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(WIREPUZZLE_WirePlug_C_GetShouldUseShortestPathRotationForState) == 0x000001, "Wrong alignment on WIREPUZZLE_WirePlug_C_GetShouldUseShortestPathRotationForState");
static_assert(sizeof(WIREPUZZLE_WirePlug_C_GetShouldUseShortestPathRotationForState) == 0x000007, "Wrong size on WIREPUZZLE_WirePlug_C_GetShouldUseShortestPathRotationForState");
static_assert(offsetof(WIREPUZZLE_WirePlug_C_GetShouldUseShortestPathRotationForState, State) == 0x000000, "Member 'WIREPUZZLE_WirePlug_C_GetShouldUseShortestPathRotationForState::State' has a wrong offset!");
static_assert(offsetof(WIREPUZZLE_WirePlug_C_GetShouldUseShortestPathRotationForState, Result) == 0x000001, "Member 'WIREPUZZLE_WirePlug_C_GetShouldUseShortestPathRotationForState::Result' has a wrong offset!");
static_assert(offsetof(WIREPUZZLE_WirePlug_C_GetShouldUseShortestPathRotationForState, CallFunc_NotEqual_ByteByte_ReturnValue) == 0x000002, "Member 'WIREPUZZLE_WirePlug_C_GetShouldUseShortestPathRotationForState::CallFunc_NotEqual_ByteByte_ReturnValue' has a wrong offset!");
static_assert(offsetof(WIREPUZZLE_WirePlug_C_GetShouldUseShortestPathRotationForState, CallFunc_EqualEqual_FloatFloat_ReturnValue) == 0x000003, "Member 'WIREPUZZLE_WirePlug_C_GetShouldUseShortestPathRotationForState::CallFunc_EqualEqual_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(WIREPUZZLE_WirePlug_C_GetShouldUseShortestPathRotationForState, CallFunc_NotEqual_ByteByte_ReturnValue_1) == 0x000004, "Member 'WIREPUZZLE_WirePlug_C_GetShouldUseShortestPathRotationForState::CallFunc_NotEqual_ByteByte_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(WIREPUZZLE_WirePlug_C_GetShouldUseShortestPathRotationForState, CallFunc_BooleanAND_ReturnValue) == 0x000005, "Member 'WIREPUZZLE_WirePlug_C_GetShouldUseShortestPathRotationForState::CallFunc_BooleanAND_ReturnValue' has a wrong offset!");
static_assert(offsetof(WIREPUZZLE_WirePlug_C_GetShouldUseShortestPathRotationForState, CallFunc_BooleanOR_ReturnValue) == 0x000006, "Member 'WIREPUZZLE_WirePlug_C_GetShouldUseShortestPathRotationForState::CallFunc_BooleanOR_ReturnValue' has a wrong offset!");

// Function WIREPUZZLE_WirePlug.WIREPUZZLE_WirePlug_C.SetConnectionDepthOffset
// 0x0008 (0x0008 - 0x0000)
struct WIREPUZZLE_WirePlug_C_SetConnectionDepthOffset final
{
public:
	float                                         DepthOffset;                                       // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_NotEqual_FloatFloat_ReturnValue;          // 0x0004(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(WIREPUZZLE_WirePlug_C_SetConnectionDepthOffset) == 0x000004, "Wrong alignment on WIREPUZZLE_WirePlug_C_SetConnectionDepthOffset");
static_assert(sizeof(WIREPUZZLE_WirePlug_C_SetConnectionDepthOffset) == 0x000008, "Wrong size on WIREPUZZLE_WirePlug_C_SetConnectionDepthOffset");
static_assert(offsetof(WIREPUZZLE_WirePlug_C_SetConnectionDepthOffset, DepthOffset) == 0x000000, "Member 'WIREPUZZLE_WirePlug_C_SetConnectionDepthOffset::DepthOffset' has a wrong offset!");
static_assert(offsetof(WIREPUZZLE_WirePlug_C_SetConnectionDepthOffset, CallFunc_NotEqual_FloatFloat_ReturnValue) == 0x000004, "Member 'WIREPUZZLE_WirePlug_C_SetConnectionDepthOffset::CallFunc_NotEqual_FloatFloat_ReturnValue' has a wrong offset!");

// Function WIREPUZZLE_WirePlug.WIREPUZZLE_WirePlug_C.IsTransitioning
// 0x0002 (0x0002 - 0x0000)
struct WIREPUZZLE_WirePlug_C_IsTransitioning final
{
public:
	bool                                          Result;                                            // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Greater_FloatFloat_ReturnValue;           // 0x0001(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(WIREPUZZLE_WirePlug_C_IsTransitioning) == 0x000001, "Wrong alignment on WIREPUZZLE_WirePlug_C_IsTransitioning");
static_assert(sizeof(WIREPUZZLE_WirePlug_C_IsTransitioning) == 0x000002, "Wrong size on WIREPUZZLE_WirePlug_C_IsTransitioning");
static_assert(offsetof(WIREPUZZLE_WirePlug_C_IsTransitioning, Result) == 0x000000, "Member 'WIREPUZZLE_WirePlug_C_IsTransitioning::Result' has a wrong offset!");
static_assert(offsetof(WIREPUZZLE_WirePlug_C_IsTransitioning, CallFunc_Greater_FloatFloat_ReturnValue) == 0x000001, "Member 'WIREPUZZLE_WirePlug_C_IsTransitioning::CallFunc_Greater_FloatFloat_ReturnValue' has a wrong offset!");

// Function WIREPUZZLE_WirePlug.WIREPUZZLE_WirePlug_C.GetTargetShape
// 0x0018 (0x0018 - 0x0000)
struct WIREPUZZLE_WirePlug_C_GetTargetShape final
{
public:
	class UPrimitiveComponent*                    CursorPrimitive;                                   // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UShapeComponent*                        ShapeComponent;                                    // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsTransitioning_Result;                   // 0x0010(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_NotEqual_ByteByte_ReturnValue;            // 0x0011(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Not_PreBool_ReturnValue;                  // 0x0012(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BooleanAND_ReturnValue;                   // 0x0013(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_EqualEqual_ObjectObject_ReturnValue;      // 0x0014(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(WIREPUZZLE_WirePlug_C_GetTargetShape) == 0x000008, "Wrong alignment on WIREPUZZLE_WirePlug_C_GetTargetShape");
static_assert(sizeof(WIREPUZZLE_WirePlug_C_GetTargetShape) == 0x000018, "Wrong size on WIREPUZZLE_WirePlug_C_GetTargetShape");
static_assert(offsetof(WIREPUZZLE_WirePlug_C_GetTargetShape, CursorPrimitive) == 0x000000, "Member 'WIREPUZZLE_WirePlug_C_GetTargetShape::CursorPrimitive' has a wrong offset!");
static_assert(offsetof(WIREPUZZLE_WirePlug_C_GetTargetShape, ShapeComponent) == 0x000008, "Member 'WIREPUZZLE_WirePlug_C_GetTargetShape::ShapeComponent' has a wrong offset!");
static_assert(offsetof(WIREPUZZLE_WirePlug_C_GetTargetShape, CallFunc_IsTransitioning_Result) == 0x000010, "Member 'WIREPUZZLE_WirePlug_C_GetTargetShape::CallFunc_IsTransitioning_Result' has a wrong offset!");
static_assert(offsetof(WIREPUZZLE_WirePlug_C_GetTargetShape, CallFunc_NotEqual_ByteByte_ReturnValue) == 0x000011, "Member 'WIREPUZZLE_WirePlug_C_GetTargetShape::CallFunc_NotEqual_ByteByte_ReturnValue' has a wrong offset!");
static_assert(offsetof(WIREPUZZLE_WirePlug_C_GetTargetShape, CallFunc_Not_PreBool_ReturnValue) == 0x000012, "Member 'WIREPUZZLE_WirePlug_C_GetTargetShape::CallFunc_Not_PreBool_ReturnValue' has a wrong offset!");
static_assert(offsetof(WIREPUZZLE_WirePlug_C_GetTargetShape, CallFunc_BooleanAND_ReturnValue) == 0x000013, "Member 'WIREPUZZLE_WirePlug_C_GetTargetShape::CallFunc_BooleanAND_ReturnValue' has a wrong offset!");
static_assert(offsetof(WIREPUZZLE_WirePlug_C_GetTargetShape, CallFunc_EqualEqual_ObjectObject_ReturnValue) == 0x000014, "Member 'WIREPUZZLE_WirePlug_C_GetTargetShape::CallFunc_EqualEqual_ObjectObject_ReturnValue' has a wrong offset!");

// Function WIREPUZZLE_WirePlug.WIREPUZZLE_WirePlug_C.TryInteract
// 0x00F0 (0x00F0 - 0x0000)
struct WIREPUZZLE_WirePlug_C_TryInteract final
{
public:
	class AActor*                                 SourceActor;                                       // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UPrimitiveComponent*                    CursorPrimitive;                                   // 0x0008(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ENUM_InteractionType                          InteractionType;                                   // 0x0010(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FSTRUCT_InteractResults                InteractResults;                                   // 0x0018(0x0020)(Parm, OutParm, HasGetValueTypeHash)
	class UCOMP_WirePuzzle_Cell_Base_C*           CallFunc_GetConnectedCell_Cell;                    // 0x0038(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FSTRUCT_InteractResults                K2Node_MakeStruct_STRUCT_InteractResults;          // 0x0040(0x0020)(HasGetValueTypeHash)
	TScriptInterface<class IINTERF_Interactable_C> CallFunc_TryInteract_self_CastInput;               // 0x0060(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FSTRUCT_InteractResults                CallFunc_TryInteract_InteractResults;              // 0x0070(0x0020)(HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_ByteByte_ReturnValue;          // 0x0090(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_91[0x7];                                       // 0x0091(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FSTRUCT_InteractResults                K2Node_MakeStruct_STRUCT_InteractResults_1;        // 0x0098(0x0020)(HasGetValueTypeHash)
	bool                                          CallFunc_IsTransitioning_Result;                   // 0x00B8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Not_PreBool_ReturnValue;                  // 0x00B9(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_EqualEqual_ByteByte_ReturnValue_1;        // 0x00BA(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_BB[0x5];                                       // 0x00BB(0x0005)(Fixing Size After Last Property [ Dumper-7 ])
	TScriptInterface<class IINTERF_Interactable_C> CallFunc_TryInteract_self_CastInput_1;             // 0x00C0(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FSTRUCT_InteractResults                CallFunc_TryInteract_InteractResults_1;            // 0x00D0(0x0020)(HasGetValueTypeHash)
};
static_assert(alignof(WIREPUZZLE_WirePlug_C_TryInteract) == 0x000008, "Wrong alignment on WIREPUZZLE_WirePlug_C_TryInteract");
static_assert(sizeof(WIREPUZZLE_WirePlug_C_TryInteract) == 0x0000F0, "Wrong size on WIREPUZZLE_WirePlug_C_TryInteract");
static_assert(offsetof(WIREPUZZLE_WirePlug_C_TryInteract, SourceActor) == 0x000000, "Member 'WIREPUZZLE_WirePlug_C_TryInteract::SourceActor' has a wrong offset!");
static_assert(offsetof(WIREPUZZLE_WirePlug_C_TryInteract, CursorPrimitive) == 0x000008, "Member 'WIREPUZZLE_WirePlug_C_TryInteract::CursorPrimitive' has a wrong offset!");
static_assert(offsetof(WIREPUZZLE_WirePlug_C_TryInteract, InteractionType) == 0x000010, "Member 'WIREPUZZLE_WirePlug_C_TryInteract::InteractionType' has a wrong offset!");
static_assert(offsetof(WIREPUZZLE_WirePlug_C_TryInteract, InteractResults) == 0x000018, "Member 'WIREPUZZLE_WirePlug_C_TryInteract::InteractResults' has a wrong offset!");
static_assert(offsetof(WIREPUZZLE_WirePlug_C_TryInteract, CallFunc_GetConnectedCell_Cell) == 0x000038, "Member 'WIREPUZZLE_WirePlug_C_TryInteract::CallFunc_GetConnectedCell_Cell' has a wrong offset!");
static_assert(offsetof(WIREPUZZLE_WirePlug_C_TryInteract, K2Node_MakeStruct_STRUCT_InteractResults) == 0x000040, "Member 'WIREPUZZLE_WirePlug_C_TryInteract::K2Node_MakeStruct_STRUCT_InteractResults' has a wrong offset!");
static_assert(offsetof(WIREPUZZLE_WirePlug_C_TryInteract, CallFunc_TryInteract_self_CastInput) == 0x000060, "Member 'WIREPUZZLE_WirePlug_C_TryInteract::CallFunc_TryInteract_self_CastInput' has a wrong offset!");
static_assert(offsetof(WIREPUZZLE_WirePlug_C_TryInteract, CallFunc_TryInteract_InteractResults) == 0x000070, "Member 'WIREPUZZLE_WirePlug_C_TryInteract::CallFunc_TryInteract_InteractResults' has a wrong offset!");
static_assert(offsetof(WIREPUZZLE_WirePlug_C_TryInteract, CallFunc_EqualEqual_ByteByte_ReturnValue) == 0x000090, "Member 'WIREPUZZLE_WirePlug_C_TryInteract::CallFunc_EqualEqual_ByteByte_ReturnValue' has a wrong offset!");
static_assert(offsetof(WIREPUZZLE_WirePlug_C_TryInteract, K2Node_MakeStruct_STRUCT_InteractResults_1) == 0x000098, "Member 'WIREPUZZLE_WirePlug_C_TryInteract::K2Node_MakeStruct_STRUCT_InteractResults_1' has a wrong offset!");
static_assert(offsetof(WIREPUZZLE_WirePlug_C_TryInteract, CallFunc_IsTransitioning_Result) == 0x0000B8, "Member 'WIREPUZZLE_WirePlug_C_TryInteract::CallFunc_IsTransitioning_Result' has a wrong offset!");
static_assert(offsetof(WIREPUZZLE_WirePlug_C_TryInteract, CallFunc_Not_PreBool_ReturnValue) == 0x0000B9, "Member 'WIREPUZZLE_WirePlug_C_TryInteract::CallFunc_Not_PreBool_ReturnValue' has a wrong offset!");
static_assert(offsetof(WIREPUZZLE_WirePlug_C_TryInteract, CallFunc_EqualEqual_ByteByte_ReturnValue_1) == 0x0000BA, "Member 'WIREPUZZLE_WirePlug_C_TryInteract::CallFunc_EqualEqual_ByteByte_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(WIREPUZZLE_WirePlug_C_TryInteract, CallFunc_TryInteract_self_CastInput_1) == 0x0000C0, "Member 'WIREPUZZLE_WirePlug_C_TryInteract::CallFunc_TryInteract_self_CastInput_1' has a wrong offset!");
static_assert(offsetof(WIREPUZZLE_WirePlug_C_TryInteract, CallFunc_TryInteract_InteractResults_1) == 0x0000D0, "Member 'WIREPUZZLE_WirePlug_C_TryInteract::CallFunc_TryInteract_InteractResults_1' has a wrong offset!");

// Function WIREPUZZLE_WirePlug.WIREPUZZLE_WirePlug_C.EnableWirePlugCollision
// 0x0001 (0x0001 - 0x0000)
struct WIREPUZZLE_WirePlug_C_EnableWirePlugCollision final
{
public:
	bool                                          Enable;                                            // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(WIREPUZZLE_WirePlug_C_EnableWirePlugCollision) == 0x000001, "Wrong alignment on WIREPUZZLE_WirePlug_C_EnableWirePlugCollision");
static_assert(sizeof(WIREPUZZLE_WirePlug_C_EnableWirePlugCollision) == 0x000001, "Wrong size on WIREPUZZLE_WirePlug_C_EnableWirePlugCollision");
static_assert(offsetof(WIREPUZZLE_WirePlug_C_EnableWirePlugCollision, Enable) == 0x000000, "Member 'WIREPUZZLE_WirePlug_C_EnableWirePlugCollision::Enable' has a wrong offset!");

// Function WIREPUZZLE_WirePlug.WIREPUZZLE_WirePlug_C.FillTargetStatePath
// 0x00C0 (0x00C0 - 0x0000)
struct WIREPUZZLE_WirePlug_C_FillTargetStatePath final
{
public:
	ENUM_WirePlugState                            FinalState;                                        // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         DeltaTimeOffset;                                   // 0x0004(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ENUM_WirePlugState                            TransitionState;                                   // 0x0008(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UTimelineComponent*                     TransitionTimeline;                                // 0x0010(0x0008)(Edit, BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         DeltaOffset;                                       // 0x0018(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_ByteByte_ReturnValue;          // 0x001C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_1D[0x3];                                       // 0x001D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class UTimelineComponent*                     CallFunc_GetTimelineForState_Result;               // 0x0020(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_NotEqual_ByteByte_ReturnValue;            // 0x0028(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	ENUM_WirePlugState                            CallFunc_GetNextTransitionState_State;             // 0x0029(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_2A[0x6];                                       // 0x002A(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<ENUM_WirePlugState>                    K2Node_MakeArray_Array;                            // 0x0030(0x0010)(ReferenceParm)
	TArray<ENUM_WirePlugState>                    K2Node_MakeArray_Array_1;                          // 0x0040(0x0010)(ReferenceParm)
	bool                                          CallFunc_EqualEqual_ByteByte_ReturnValue_1;        // 0x0050(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_EqualEqual_ByteByte_ReturnValue_2;        // 0x0051(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_52[0x2];                                       // 0x0052(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_GetPlaybackPosition_ReturnValue;          // 0x0054(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0058(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_EqualEqual_ByteByte_ReturnValue_3;        // 0x0059(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BooleanOR_ReturnValue;                    // 0x005A(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BooleanOR_ReturnValue_1;                  // 0x005B(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_5C[0x4];                                       // 0x005C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<ENUM_WirePlugState>                    K2Node_MakeArray_Array_2;                          // 0x0060(0x0010)(ReferenceParm)
	TArray<ENUM_WirePlugState>                    K2Node_MakeArray_Array_3;                          // 0x0070(0x0010)(ReferenceParm)
	TArray<ENUM_WirePlugState>                    K2Node_MakeArray_Array_4;                          // 0x0080(0x0010)(ReferenceParm)
	TArray<ENUM_WirePlugState>                    K2Node_MakeArray_Array_5;                          // 0x0090(0x0010)(ReferenceParm)
	bool                                          CallFunc_EqualEqual_ByteByte_ReturnValue_4;        // 0x00A0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_A1[0x7];                                       // 0x00A1(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<ENUM_WirePlugState>                    K2Node_MakeArray_Array_6;                          // 0x00A8(0x0010)(ReferenceParm)
	bool                                          K2Node_SwitchEnum_CmpSuccess;                      // 0x00B8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          K2Node_SwitchEnum_CmpSuccess_1;                    // 0x00B9(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(WIREPUZZLE_WirePlug_C_FillTargetStatePath) == 0x000008, "Wrong alignment on WIREPUZZLE_WirePlug_C_FillTargetStatePath");
static_assert(sizeof(WIREPUZZLE_WirePlug_C_FillTargetStatePath) == 0x0000C0, "Wrong size on WIREPUZZLE_WirePlug_C_FillTargetStatePath");
static_assert(offsetof(WIREPUZZLE_WirePlug_C_FillTargetStatePath, FinalState) == 0x000000, "Member 'WIREPUZZLE_WirePlug_C_FillTargetStatePath::FinalState' has a wrong offset!");
static_assert(offsetof(WIREPUZZLE_WirePlug_C_FillTargetStatePath, DeltaTimeOffset) == 0x000004, "Member 'WIREPUZZLE_WirePlug_C_FillTargetStatePath::DeltaTimeOffset' has a wrong offset!");
static_assert(offsetof(WIREPUZZLE_WirePlug_C_FillTargetStatePath, TransitionState) == 0x000008, "Member 'WIREPUZZLE_WirePlug_C_FillTargetStatePath::TransitionState' has a wrong offset!");
static_assert(offsetof(WIREPUZZLE_WirePlug_C_FillTargetStatePath, TransitionTimeline) == 0x000010, "Member 'WIREPUZZLE_WirePlug_C_FillTargetStatePath::TransitionTimeline' has a wrong offset!");
static_assert(offsetof(WIREPUZZLE_WirePlug_C_FillTargetStatePath, DeltaOffset) == 0x000018, "Member 'WIREPUZZLE_WirePlug_C_FillTargetStatePath::DeltaOffset' has a wrong offset!");
static_assert(offsetof(WIREPUZZLE_WirePlug_C_FillTargetStatePath, CallFunc_EqualEqual_ByteByte_ReturnValue) == 0x00001C, "Member 'WIREPUZZLE_WirePlug_C_FillTargetStatePath::CallFunc_EqualEqual_ByteByte_ReturnValue' has a wrong offset!");
static_assert(offsetof(WIREPUZZLE_WirePlug_C_FillTargetStatePath, CallFunc_GetTimelineForState_Result) == 0x000020, "Member 'WIREPUZZLE_WirePlug_C_FillTargetStatePath::CallFunc_GetTimelineForState_Result' has a wrong offset!");
static_assert(offsetof(WIREPUZZLE_WirePlug_C_FillTargetStatePath, CallFunc_NotEqual_ByteByte_ReturnValue) == 0x000028, "Member 'WIREPUZZLE_WirePlug_C_FillTargetStatePath::CallFunc_NotEqual_ByteByte_ReturnValue' has a wrong offset!");
static_assert(offsetof(WIREPUZZLE_WirePlug_C_FillTargetStatePath, CallFunc_GetNextTransitionState_State) == 0x000029, "Member 'WIREPUZZLE_WirePlug_C_FillTargetStatePath::CallFunc_GetNextTransitionState_State' has a wrong offset!");
static_assert(offsetof(WIREPUZZLE_WirePlug_C_FillTargetStatePath, K2Node_MakeArray_Array) == 0x000030, "Member 'WIREPUZZLE_WirePlug_C_FillTargetStatePath::K2Node_MakeArray_Array' has a wrong offset!");
static_assert(offsetof(WIREPUZZLE_WirePlug_C_FillTargetStatePath, K2Node_MakeArray_Array_1) == 0x000040, "Member 'WIREPUZZLE_WirePlug_C_FillTargetStatePath::K2Node_MakeArray_Array_1' has a wrong offset!");
static_assert(offsetof(WIREPUZZLE_WirePlug_C_FillTargetStatePath, CallFunc_EqualEqual_ByteByte_ReturnValue_1) == 0x000050, "Member 'WIREPUZZLE_WirePlug_C_FillTargetStatePath::CallFunc_EqualEqual_ByteByte_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(WIREPUZZLE_WirePlug_C_FillTargetStatePath, CallFunc_EqualEqual_ByteByte_ReturnValue_2) == 0x000051, "Member 'WIREPUZZLE_WirePlug_C_FillTargetStatePath::CallFunc_EqualEqual_ByteByte_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(WIREPUZZLE_WirePlug_C_FillTargetStatePath, CallFunc_GetPlaybackPosition_ReturnValue) == 0x000054, "Member 'WIREPUZZLE_WirePlug_C_FillTargetStatePath::CallFunc_GetPlaybackPosition_ReturnValue' has a wrong offset!");
static_assert(offsetof(WIREPUZZLE_WirePlug_C_FillTargetStatePath, CallFunc_IsValid_ReturnValue) == 0x000058, "Member 'WIREPUZZLE_WirePlug_C_FillTargetStatePath::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(WIREPUZZLE_WirePlug_C_FillTargetStatePath, CallFunc_EqualEqual_ByteByte_ReturnValue_3) == 0x000059, "Member 'WIREPUZZLE_WirePlug_C_FillTargetStatePath::CallFunc_EqualEqual_ByteByte_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(WIREPUZZLE_WirePlug_C_FillTargetStatePath, CallFunc_BooleanOR_ReturnValue) == 0x00005A, "Member 'WIREPUZZLE_WirePlug_C_FillTargetStatePath::CallFunc_BooleanOR_ReturnValue' has a wrong offset!");
static_assert(offsetof(WIREPUZZLE_WirePlug_C_FillTargetStatePath, CallFunc_BooleanOR_ReturnValue_1) == 0x00005B, "Member 'WIREPUZZLE_WirePlug_C_FillTargetStatePath::CallFunc_BooleanOR_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(WIREPUZZLE_WirePlug_C_FillTargetStatePath, K2Node_MakeArray_Array_2) == 0x000060, "Member 'WIREPUZZLE_WirePlug_C_FillTargetStatePath::K2Node_MakeArray_Array_2' has a wrong offset!");
static_assert(offsetof(WIREPUZZLE_WirePlug_C_FillTargetStatePath, K2Node_MakeArray_Array_3) == 0x000070, "Member 'WIREPUZZLE_WirePlug_C_FillTargetStatePath::K2Node_MakeArray_Array_3' has a wrong offset!");
static_assert(offsetof(WIREPUZZLE_WirePlug_C_FillTargetStatePath, K2Node_MakeArray_Array_4) == 0x000080, "Member 'WIREPUZZLE_WirePlug_C_FillTargetStatePath::K2Node_MakeArray_Array_4' has a wrong offset!");
static_assert(offsetof(WIREPUZZLE_WirePlug_C_FillTargetStatePath, K2Node_MakeArray_Array_5) == 0x000090, "Member 'WIREPUZZLE_WirePlug_C_FillTargetStatePath::K2Node_MakeArray_Array_5' has a wrong offset!");
static_assert(offsetof(WIREPUZZLE_WirePlug_C_FillTargetStatePath, CallFunc_EqualEqual_ByteByte_ReturnValue_4) == 0x0000A0, "Member 'WIREPUZZLE_WirePlug_C_FillTargetStatePath::CallFunc_EqualEqual_ByteByte_ReturnValue_4' has a wrong offset!");
static_assert(offsetof(WIREPUZZLE_WirePlug_C_FillTargetStatePath, K2Node_MakeArray_Array_6) == 0x0000A8, "Member 'WIREPUZZLE_WirePlug_C_FillTargetStatePath::K2Node_MakeArray_Array_6' has a wrong offset!");
static_assert(offsetof(WIREPUZZLE_WirePlug_C_FillTargetStatePath, K2Node_SwitchEnum_CmpSuccess) == 0x0000B8, "Member 'WIREPUZZLE_WirePlug_C_FillTargetStatePath::K2Node_SwitchEnum_CmpSuccess' has a wrong offset!");
static_assert(offsetof(WIREPUZZLE_WirePlug_C_FillTargetStatePath, K2Node_SwitchEnum_CmpSuccess_1) == 0x0000B9, "Member 'WIREPUZZLE_WirePlug_C_FillTargetStatePath::K2Node_SwitchEnum_CmpSuccess_1' has a wrong offset!");

// Function WIREPUZZLE_WirePlug.WIREPUZZLE_WirePlug_C.GetNextTransitionState
// 0x000C (0x000C - 0x0000)
struct WIREPUZZLE_WirePlug_C_GetNextTransitionState final
{
public:
	ENUM_WirePlugState                            State;                                             // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ENUM_WirePlugState                            CallFunc_Array_Get_Item;                           // 0x0001(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_2[0x2];                                        // 0x0002(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Array_Length_ReturnValue;                 // 0x0004(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Greater_IntInt_ReturnValue;               // 0x0008(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(WIREPUZZLE_WirePlug_C_GetNextTransitionState) == 0x000004, "Wrong alignment on WIREPUZZLE_WirePlug_C_GetNextTransitionState");
static_assert(sizeof(WIREPUZZLE_WirePlug_C_GetNextTransitionState) == 0x00000C, "Wrong size on WIREPUZZLE_WirePlug_C_GetNextTransitionState");
static_assert(offsetof(WIREPUZZLE_WirePlug_C_GetNextTransitionState, State) == 0x000000, "Member 'WIREPUZZLE_WirePlug_C_GetNextTransitionState::State' has a wrong offset!");
static_assert(offsetof(WIREPUZZLE_WirePlug_C_GetNextTransitionState, CallFunc_Array_Get_Item) == 0x000001, "Member 'WIREPUZZLE_WirePlug_C_GetNextTransitionState::CallFunc_Array_Get_Item' has a wrong offset!");
static_assert(offsetof(WIREPUZZLE_WirePlug_C_GetNextTransitionState, CallFunc_Array_Length_ReturnValue) == 0x000004, "Member 'WIREPUZZLE_WirePlug_C_GetNextTransitionState::CallFunc_Array_Length_ReturnValue' has a wrong offset!");
static_assert(offsetof(WIREPUZZLE_WirePlug_C_GetNextTransitionState, CallFunc_Greater_IntInt_ReturnValue) == 0x000008, "Member 'WIREPUZZLE_WirePlug_C_GetNextTransitionState::CallFunc_Greater_IntInt_ReturnValue' has a wrong offset!");

// Function WIREPUZZLE_WirePlug.WIREPUZZLE_WirePlug_C.BeginTransitioningToNewState
// 0x0098 (0x0098 - 0x0000)
struct WIREPUZZLE_WirePlug_C_BeginTransitioningToNewState final
{
public:
	float                                         DeltaTimeOffset;                                   // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UGameInstance*                          CallFunc_GetGameInstance_ReturnValue;              // 0x0008(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UGI_SinglePlayer_C*                     K2Node_DynamicCast_AsGI_Single_Player;             // 0x0010(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0018(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_19[0x7];                                       // 0x0019(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UGameInstance*                          CallFunc_GetGameInstance_ReturnValue_1;            // 0x0020(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_K2_GetActorLocation_ReturnValue;          // 0x0028(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_34[0x4];                                       // 0x0034(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UGI_SinglePlayer_C*                     K2Node_DynamicCast_AsGI_Single_Player_1;           // 0x0038(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess_1;                     // 0x0040(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_41[0x3];                                       // 0x0041(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                CallFunc_K2_GetActorLocation_ReturnValue_1;        // 0x0044(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_K2_GetActorLocation_ReturnValue_2;        // 0x0050(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_K2_GetActorLocation_ReturnValue_3;        // 0x005C(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ENUM_WirePlugState                            CallFunc_Array_Get_Item;                           // 0x0068(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_SwitchEnum_CmpSuccess;                      // 0x0069(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_6A[0x6];                                       // 0x006A(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class UGameInstance*                          CallFunc_GetGameInstance_ReturnValue_2;            // 0x0070(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UGI_SinglePlayer_C*                     K2Node_DynamicCast_AsGI_Single_Player_2;           // 0x0078(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess_2;                     // 0x0080(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	ENUM_WirePlugState                            CallFunc_Array_Get_Item_1;                         // 0x0081(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_GetShouldUseShortestPathRotationForState_Result; // 0x0082(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	ENUM_WirePlugState                            CallFunc_Array_Get_Item_2;                         // 0x0083(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_GetShouldBlendAlongTargetForState_Result; // 0x0084(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	ENUM_WirePlugState                            CallFunc_Array_Get_Item_3;                         // 0x0085(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_86[0x2];                                       // 0x0086(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_GetTransitionDurationForState_Result;     // 0x0088(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_GetGameTimeInSeconds_ReturnValue;         // 0x008C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Subtract_FloatFloat_ReturnValue;          // 0x0090(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(WIREPUZZLE_WirePlug_C_BeginTransitioningToNewState) == 0x000008, "Wrong alignment on WIREPUZZLE_WirePlug_C_BeginTransitioningToNewState");
static_assert(sizeof(WIREPUZZLE_WirePlug_C_BeginTransitioningToNewState) == 0x000098, "Wrong size on WIREPUZZLE_WirePlug_C_BeginTransitioningToNewState");
static_assert(offsetof(WIREPUZZLE_WirePlug_C_BeginTransitioningToNewState, DeltaTimeOffset) == 0x000000, "Member 'WIREPUZZLE_WirePlug_C_BeginTransitioningToNewState::DeltaTimeOffset' has a wrong offset!");
static_assert(offsetof(WIREPUZZLE_WirePlug_C_BeginTransitioningToNewState, CallFunc_GetGameInstance_ReturnValue) == 0x000008, "Member 'WIREPUZZLE_WirePlug_C_BeginTransitioningToNewState::CallFunc_GetGameInstance_ReturnValue' has a wrong offset!");
static_assert(offsetof(WIREPUZZLE_WirePlug_C_BeginTransitioningToNewState, K2Node_DynamicCast_AsGI_Single_Player) == 0x000010, "Member 'WIREPUZZLE_WirePlug_C_BeginTransitioningToNewState::K2Node_DynamicCast_AsGI_Single_Player' has a wrong offset!");
static_assert(offsetof(WIREPUZZLE_WirePlug_C_BeginTransitioningToNewState, K2Node_DynamicCast_bSuccess) == 0x000018, "Member 'WIREPUZZLE_WirePlug_C_BeginTransitioningToNewState::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(WIREPUZZLE_WirePlug_C_BeginTransitioningToNewState, CallFunc_GetGameInstance_ReturnValue_1) == 0x000020, "Member 'WIREPUZZLE_WirePlug_C_BeginTransitioningToNewState::CallFunc_GetGameInstance_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(WIREPUZZLE_WirePlug_C_BeginTransitioningToNewState, CallFunc_K2_GetActorLocation_ReturnValue) == 0x000028, "Member 'WIREPUZZLE_WirePlug_C_BeginTransitioningToNewState::CallFunc_K2_GetActorLocation_ReturnValue' has a wrong offset!");
static_assert(offsetof(WIREPUZZLE_WirePlug_C_BeginTransitioningToNewState, K2Node_DynamicCast_AsGI_Single_Player_1) == 0x000038, "Member 'WIREPUZZLE_WirePlug_C_BeginTransitioningToNewState::K2Node_DynamicCast_AsGI_Single_Player_1' has a wrong offset!");
static_assert(offsetof(WIREPUZZLE_WirePlug_C_BeginTransitioningToNewState, K2Node_DynamicCast_bSuccess_1) == 0x000040, "Member 'WIREPUZZLE_WirePlug_C_BeginTransitioningToNewState::K2Node_DynamicCast_bSuccess_1' has a wrong offset!");
static_assert(offsetof(WIREPUZZLE_WirePlug_C_BeginTransitioningToNewState, CallFunc_K2_GetActorLocation_ReturnValue_1) == 0x000044, "Member 'WIREPUZZLE_WirePlug_C_BeginTransitioningToNewState::CallFunc_K2_GetActorLocation_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(WIREPUZZLE_WirePlug_C_BeginTransitioningToNewState, CallFunc_K2_GetActorLocation_ReturnValue_2) == 0x000050, "Member 'WIREPUZZLE_WirePlug_C_BeginTransitioningToNewState::CallFunc_K2_GetActorLocation_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(WIREPUZZLE_WirePlug_C_BeginTransitioningToNewState, CallFunc_K2_GetActorLocation_ReturnValue_3) == 0x00005C, "Member 'WIREPUZZLE_WirePlug_C_BeginTransitioningToNewState::CallFunc_K2_GetActorLocation_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(WIREPUZZLE_WirePlug_C_BeginTransitioningToNewState, CallFunc_Array_Get_Item) == 0x000068, "Member 'WIREPUZZLE_WirePlug_C_BeginTransitioningToNewState::CallFunc_Array_Get_Item' has a wrong offset!");
static_assert(offsetof(WIREPUZZLE_WirePlug_C_BeginTransitioningToNewState, K2Node_SwitchEnum_CmpSuccess) == 0x000069, "Member 'WIREPUZZLE_WirePlug_C_BeginTransitioningToNewState::K2Node_SwitchEnum_CmpSuccess' has a wrong offset!");
static_assert(offsetof(WIREPUZZLE_WirePlug_C_BeginTransitioningToNewState, CallFunc_GetGameInstance_ReturnValue_2) == 0x000070, "Member 'WIREPUZZLE_WirePlug_C_BeginTransitioningToNewState::CallFunc_GetGameInstance_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(WIREPUZZLE_WirePlug_C_BeginTransitioningToNewState, K2Node_DynamicCast_AsGI_Single_Player_2) == 0x000078, "Member 'WIREPUZZLE_WirePlug_C_BeginTransitioningToNewState::K2Node_DynamicCast_AsGI_Single_Player_2' has a wrong offset!");
static_assert(offsetof(WIREPUZZLE_WirePlug_C_BeginTransitioningToNewState, K2Node_DynamicCast_bSuccess_2) == 0x000080, "Member 'WIREPUZZLE_WirePlug_C_BeginTransitioningToNewState::K2Node_DynamicCast_bSuccess_2' has a wrong offset!");
static_assert(offsetof(WIREPUZZLE_WirePlug_C_BeginTransitioningToNewState, CallFunc_Array_Get_Item_1) == 0x000081, "Member 'WIREPUZZLE_WirePlug_C_BeginTransitioningToNewState::CallFunc_Array_Get_Item_1' has a wrong offset!");
static_assert(offsetof(WIREPUZZLE_WirePlug_C_BeginTransitioningToNewState, CallFunc_GetShouldUseShortestPathRotationForState_Result) == 0x000082, "Member 'WIREPUZZLE_WirePlug_C_BeginTransitioningToNewState::CallFunc_GetShouldUseShortestPathRotationForState_Result' has a wrong offset!");
static_assert(offsetof(WIREPUZZLE_WirePlug_C_BeginTransitioningToNewState, CallFunc_Array_Get_Item_2) == 0x000083, "Member 'WIREPUZZLE_WirePlug_C_BeginTransitioningToNewState::CallFunc_Array_Get_Item_2' has a wrong offset!");
static_assert(offsetof(WIREPUZZLE_WirePlug_C_BeginTransitioningToNewState, CallFunc_GetShouldBlendAlongTargetForState_Result) == 0x000084, "Member 'WIREPUZZLE_WirePlug_C_BeginTransitioningToNewState::CallFunc_GetShouldBlendAlongTargetForState_Result' has a wrong offset!");
static_assert(offsetof(WIREPUZZLE_WirePlug_C_BeginTransitioningToNewState, CallFunc_Array_Get_Item_3) == 0x000085, "Member 'WIREPUZZLE_WirePlug_C_BeginTransitioningToNewState::CallFunc_Array_Get_Item_3' has a wrong offset!");
static_assert(offsetof(WIREPUZZLE_WirePlug_C_BeginTransitioningToNewState, CallFunc_GetTransitionDurationForState_Result) == 0x000088, "Member 'WIREPUZZLE_WirePlug_C_BeginTransitioningToNewState::CallFunc_GetTransitionDurationForState_Result' has a wrong offset!");
static_assert(offsetof(WIREPUZZLE_WirePlug_C_BeginTransitioningToNewState, CallFunc_GetGameTimeInSeconds_ReturnValue) == 0x00008C, "Member 'WIREPUZZLE_WirePlug_C_BeginTransitioningToNewState::CallFunc_GetGameTimeInSeconds_ReturnValue' has a wrong offset!");
static_assert(offsetof(WIREPUZZLE_WirePlug_C_BeginTransitioningToNewState, CallFunc_Subtract_FloatFloat_ReturnValue) == 0x000090, "Member 'WIREPUZZLE_WirePlug_C_BeginTransitioningToNewState::CallFunc_Subtract_FloatFloat_ReturnValue' has a wrong offset!");

// Function WIREPUZZLE_WirePlug.WIREPUZZLE_WirePlug_C.CanImmediatelyTransitionToState
// 0x0010 (0x0010 - 0x0000)
struct WIREPUZZLE_WirePlug_C_CanImmediatelyTransitionToState final
{
public:
	ENUM_WirePlugState                            State;                                             // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Result;                                            // 0x0001(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_2[0x2];                                        // 0x0002(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Array_Length_ReturnValue;                 // 0x0004(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Greater_IntInt_ReturnValue;               // 0x0008(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_NotEqual_ByteByte_ReturnValue;            // 0x0009(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_NotEqual_ByteByte_ReturnValue_1;          // 0x000A(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_NotEqual_ByteByte_ReturnValue_2;          // 0x000B(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BooleanAND_ReturnValue;                   // 0x000C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BooleanAND_ReturnValue_1;                 // 0x000D(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_NotEqual_ByteByte_ReturnValue_3;          // 0x000E(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BooleanOR_ReturnValue;                    // 0x000F(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(WIREPUZZLE_WirePlug_C_CanImmediatelyTransitionToState) == 0x000004, "Wrong alignment on WIREPUZZLE_WirePlug_C_CanImmediatelyTransitionToState");
static_assert(sizeof(WIREPUZZLE_WirePlug_C_CanImmediatelyTransitionToState) == 0x000010, "Wrong size on WIREPUZZLE_WirePlug_C_CanImmediatelyTransitionToState");
static_assert(offsetof(WIREPUZZLE_WirePlug_C_CanImmediatelyTransitionToState, State) == 0x000000, "Member 'WIREPUZZLE_WirePlug_C_CanImmediatelyTransitionToState::State' has a wrong offset!");
static_assert(offsetof(WIREPUZZLE_WirePlug_C_CanImmediatelyTransitionToState, Result) == 0x000001, "Member 'WIREPUZZLE_WirePlug_C_CanImmediatelyTransitionToState::Result' has a wrong offset!");
static_assert(offsetof(WIREPUZZLE_WirePlug_C_CanImmediatelyTransitionToState, CallFunc_Array_Length_ReturnValue) == 0x000004, "Member 'WIREPUZZLE_WirePlug_C_CanImmediatelyTransitionToState::CallFunc_Array_Length_ReturnValue' has a wrong offset!");
static_assert(offsetof(WIREPUZZLE_WirePlug_C_CanImmediatelyTransitionToState, CallFunc_Greater_IntInt_ReturnValue) == 0x000008, "Member 'WIREPUZZLE_WirePlug_C_CanImmediatelyTransitionToState::CallFunc_Greater_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(WIREPUZZLE_WirePlug_C_CanImmediatelyTransitionToState, CallFunc_NotEqual_ByteByte_ReturnValue) == 0x000009, "Member 'WIREPUZZLE_WirePlug_C_CanImmediatelyTransitionToState::CallFunc_NotEqual_ByteByte_ReturnValue' has a wrong offset!");
static_assert(offsetof(WIREPUZZLE_WirePlug_C_CanImmediatelyTransitionToState, CallFunc_NotEqual_ByteByte_ReturnValue_1) == 0x00000A, "Member 'WIREPUZZLE_WirePlug_C_CanImmediatelyTransitionToState::CallFunc_NotEqual_ByteByte_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(WIREPUZZLE_WirePlug_C_CanImmediatelyTransitionToState, CallFunc_NotEqual_ByteByte_ReturnValue_2) == 0x00000B, "Member 'WIREPUZZLE_WirePlug_C_CanImmediatelyTransitionToState::CallFunc_NotEqual_ByteByte_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(WIREPUZZLE_WirePlug_C_CanImmediatelyTransitionToState, CallFunc_BooleanAND_ReturnValue) == 0x00000C, "Member 'WIREPUZZLE_WirePlug_C_CanImmediatelyTransitionToState::CallFunc_BooleanAND_ReturnValue' has a wrong offset!");
static_assert(offsetof(WIREPUZZLE_WirePlug_C_CanImmediatelyTransitionToState, CallFunc_BooleanAND_ReturnValue_1) == 0x00000D, "Member 'WIREPUZZLE_WirePlug_C_CanImmediatelyTransitionToState::CallFunc_BooleanAND_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(WIREPUZZLE_WirePlug_C_CanImmediatelyTransitionToState, CallFunc_NotEqual_ByteByte_ReturnValue_3) == 0x00000E, "Member 'WIREPUZZLE_WirePlug_C_CanImmediatelyTransitionToState::CallFunc_NotEqual_ByteByte_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(WIREPUZZLE_WirePlug_C_CanImmediatelyTransitionToState, CallFunc_BooleanOR_ReturnValue) == 0x00000F, "Member 'WIREPUZZLE_WirePlug_C_CanImmediatelyTransitionToState::CallFunc_BooleanOR_ReturnValue' has a wrong offset!");

// Function WIREPUZZLE_WirePlug.WIREPUZZLE_WirePlug_C.UpdateWirePlugOffset
// 0x0180 (0x0180 - 0x0000)
struct WIREPUZZLE_WirePlug_C_UpdateWirePlugOffset final
{
public:
	float                                         CellSize;                                          // 0x0000(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector2D                              NewOffset;                                         // 0x0004(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                IntersectLocation;                                 // 0x000C(0x000C)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                LineEnd;                                           // 0x0018(0x000C)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                LineStart;                                         // 0x0024(0x000C)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector2D_X;                          // 0x0030(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector2D_Y;                          // 0x0034(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue;                   // 0x0038(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Multiply_FloatFloat_ReturnValue;          // 0x003C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Multiply_IntFloat_ReturnValue;            // 0x0040(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Subtract_IntInt_ReturnValue;              // 0x0044(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue_1;                 // 0x0048(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Multiply_IntFloat_ReturnValue_1;          // 0x004C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Multiply_IntFloat_ReturnValue_2;          // 0x0050(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_FClamp_ReturnValue;                       // 0x0054(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Multiply_FloatFloat_ReturnValue_1;        // 0x0058(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector2D_X_1;                        // 0x005C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector2D_Y_1;                        // 0x0060(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_64[0xC];                                       // 0x0064(0x000C)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTransform                             CallFunc_K2_GetComponentToWorld_ReturnValue;       // 0x0070(0x0030)(IsPlainOldData, NoDestructor)
	int32                                         CallFunc_Subtract_IntInt_ReturnValue_1;            // 0x00A0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Multiply_IntFloat_ReturnValue_3;          // 0x00A4(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_GetActorForwardVector_ReturnValue;        // 0x00A8(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_FClamp_ReturnValue_1;                     // 0x00B4(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector2D                              CallFunc_MakeVector2D_ReturnValue;                 // 0x00B8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_K2_GetComponentLocation_ReturnValue;      // 0x00C0(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_CC[0x4];                                       // 0x00CC(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UCOMP_WirePuzzle_Cell_Base_C*           CallFunc_GetSelectedWireSourceCell_SelectedCell;   // 0x00D0(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x00D8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_EqualEqual_ObjectObject_ReturnValue;      // 0x00D9(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_DA[0x2];                                       // 0x00DA(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                CallFunc_InverseTransformLocation_ReturnValue;     // 0x00DC(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector_X;                            // 0x00E8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector_Y;                            // 0x00EC(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector_Z;                            // 0x00F0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_LinePlaneIntersection_OriginNormal_T;     // 0x00F4(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_LinePlaneIntersection_OriginNormal_Intersection; // 0x00F8(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_LinePlaneIntersection_OriginNormal_ReturnValue; // 0x0104(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_105[0x3];                                      // 0x0105(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector2D                              CallFunc_MakeVector2D_ReturnValue_1;               // 0x0108(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector_X_1;                          // 0x0110(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector_Y_1;                          // 0x0114(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector_Z_1;                          // 0x0118(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector2D                              CallFunc_Add_Vector2DVector2D_ReturnValue;         // 0x011C(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_MakeVector_ReturnValue;                   // 0x0124(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class APawn*                                  CallFunc_GetPlayerPawn_ReturnValue;                // 0x0130(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class APAWN_Hacker_Simple_C*                  K2Node_DynamicCast_AsPAWN_Hacker_Simple;           // 0x0138(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0140(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_141[0x3];                                      // 0x0141(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                CallFunc_GetForwardVector_ReturnValue;             // 0x0144(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_K2_GetComponentLocation_ReturnValue_1;    // 0x0150(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Multiply_VectorFloat_ReturnValue;         // 0x015C(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Add_VectorVector_ReturnValue;             // 0x0168(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(WIREPUZZLE_WirePlug_C_UpdateWirePlugOffset) == 0x000010, "Wrong alignment on WIREPUZZLE_WirePlug_C_UpdateWirePlugOffset");
static_assert(sizeof(WIREPUZZLE_WirePlug_C_UpdateWirePlugOffset) == 0x000180, "Wrong size on WIREPUZZLE_WirePlug_C_UpdateWirePlugOffset");
static_assert(offsetof(WIREPUZZLE_WirePlug_C_UpdateWirePlugOffset, CellSize) == 0x000000, "Member 'WIREPUZZLE_WirePlug_C_UpdateWirePlugOffset::CellSize' has a wrong offset!");
static_assert(offsetof(WIREPUZZLE_WirePlug_C_UpdateWirePlugOffset, NewOffset) == 0x000004, "Member 'WIREPUZZLE_WirePlug_C_UpdateWirePlugOffset::NewOffset' has a wrong offset!");
static_assert(offsetof(WIREPUZZLE_WirePlug_C_UpdateWirePlugOffset, IntersectLocation) == 0x00000C, "Member 'WIREPUZZLE_WirePlug_C_UpdateWirePlugOffset::IntersectLocation' has a wrong offset!");
static_assert(offsetof(WIREPUZZLE_WirePlug_C_UpdateWirePlugOffset, LineEnd) == 0x000018, "Member 'WIREPUZZLE_WirePlug_C_UpdateWirePlugOffset::LineEnd' has a wrong offset!");
static_assert(offsetof(WIREPUZZLE_WirePlug_C_UpdateWirePlugOffset, LineStart) == 0x000024, "Member 'WIREPUZZLE_WirePlug_C_UpdateWirePlugOffset::LineStart' has a wrong offset!");
static_assert(offsetof(WIREPUZZLE_WirePlug_C_UpdateWirePlugOffset, CallFunc_BreakVector2D_X) == 0x000030, "Member 'WIREPUZZLE_WirePlug_C_UpdateWirePlugOffset::CallFunc_BreakVector2D_X' has a wrong offset!");
static_assert(offsetof(WIREPUZZLE_WirePlug_C_UpdateWirePlugOffset, CallFunc_BreakVector2D_Y) == 0x000034, "Member 'WIREPUZZLE_WirePlug_C_UpdateWirePlugOffset::CallFunc_BreakVector2D_Y' has a wrong offset!");
static_assert(offsetof(WIREPUZZLE_WirePlug_C_UpdateWirePlugOffset, CallFunc_Add_IntInt_ReturnValue) == 0x000038, "Member 'WIREPUZZLE_WirePlug_C_UpdateWirePlugOffset::CallFunc_Add_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(WIREPUZZLE_WirePlug_C_UpdateWirePlugOffset, CallFunc_Multiply_FloatFloat_ReturnValue) == 0x00003C, "Member 'WIREPUZZLE_WirePlug_C_UpdateWirePlugOffset::CallFunc_Multiply_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(WIREPUZZLE_WirePlug_C_UpdateWirePlugOffset, CallFunc_Multiply_IntFloat_ReturnValue) == 0x000040, "Member 'WIREPUZZLE_WirePlug_C_UpdateWirePlugOffset::CallFunc_Multiply_IntFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(WIREPUZZLE_WirePlug_C_UpdateWirePlugOffset, CallFunc_Subtract_IntInt_ReturnValue) == 0x000044, "Member 'WIREPUZZLE_WirePlug_C_UpdateWirePlugOffset::CallFunc_Subtract_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(WIREPUZZLE_WirePlug_C_UpdateWirePlugOffset, CallFunc_Add_IntInt_ReturnValue_1) == 0x000048, "Member 'WIREPUZZLE_WirePlug_C_UpdateWirePlugOffset::CallFunc_Add_IntInt_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(WIREPUZZLE_WirePlug_C_UpdateWirePlugOffset, CallFunc_Multiply_IntFloat_ReturnValue_1) == 0x00004C, "Member 'WIREPUZZLE_WirePlug_C_UpdateWirePlugOffset::CallFunc_Multiply_IntFloat_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(WIREPUZZLE_WirePlug_C_UpdateWirePlugOffset, CallFunc_Multiply_IntFloat_ReturnValue_2) == 0x000050, "Member 'WIREPUZZLE_WirePlug_C_UpdateWirePlugOffset::CallFunc_Multiply_IntFloat_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(WIREPUZZLE_WirePlug_C_UpdateWirePlugOffset, CallFunc_FClamp_ReturnValue) == 0x000054, "Member 'WIREPUZZLE_WirePlug_C_UpdateWirePlugOffset::CallFunc_FClamp_ReturnValue' has a wrong offset!");
static_assert(offsetof(WIREPUZZLE_WirePlug_C_UpdateWirePlugOffset, CallFunc_Multiply_FloatFloat_ReturnValue_1) == 0x000058, "Member 'WIREPUZZLE_WirePlug_C_UpdateWirePlugOffset::CallFunc_Multiply_FloatFloat_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(WIREPUZZLE_WirePlug_C_UpdateWirePlugOffset, CallFunc_BreakVector2D_X_1) == 0x00005C, "Member 'WIREPUZZLE_WirePlug_C_UpdateWirePlugOffset::CallFunc_BreakVector2D_X_1' has a wrong offset!");
static_assert(offsetof(WIREPUZZLE_WirePlug_C_UpdateWirePlugOffset, CallFunc_BreakVector2D_Y_1) == 0x000060, "Member 'WIREPUZZLE_WirePlug_C_UpdateWirePlugOffset::CallFunc_BreakVector2D_Y_1' has a wrong offset!");
static_assert(offsetof(WIREPUZZLE_WirePlug_C_UpdateWirePlugOffset, CallFunc_K2_GetComponentToWorld_ReturnValue) == 0x000070, "Member 'WIREPUZZLE_WirePlug_C_UpdateWirePlugOffset::CallFunc_K2_GetComponentToWorld_ReturnValue' has a wrong offset!");
static_assert(offsetof(WIREPUZZLE_WirePlug_C_UpdateWirePlugOffset, CallFunc_Subtract_IntInt_ReturnValue_1) == 0x0000A0, "Member 'WIREPUZZLE_WirePlug_C_UpdateWirePlugOffset::CallFunc_Subtract_IntInt_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(WIREPUZZLE_WirePlug_C_UpdateWirePlugOffset, CallFunc_Multiply_IntFloat_ReturnValue_3) == 0x0000A4, "Member 'WIREPUZZLE_WirePlug_C_UpdateWirePlugOffset::CallFunc_Multiply_IntFloat_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(WIREPUZZLE_WirePlug_C_UpdateWirePlugOffset, CallFunc_GetActorForwardVector_ReturnValue) == 0x0000A8, "Member 'WIREPUZZLE_WirePlug_C_UpdateWirePlugOffset::CallFunc_GetActorForwardVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(WIREPUZZLE_WirePlug_C_UpdateWirePlugOffset, CallFunc_FClamp_ReturnValue_1) == 0x0000B4, "Member 'WIREPUZZLE_WirePlug_C_UpdateWirePlugOffset::CallFunc_FClamp_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(WIREPUZZLE_WirePlug_C_UpdateWirePlugOffset, CallFunc_MakeVector2D_ReturnValue) == 0x0000B8, "Member 'WIREPUZZLE_WirePlug_C_UpdateWirePlugOffset::CallFunc_MakeVector2D_ReturnValue' has a wrong offset!");
static_assert(offsetof(WIREPUZZLE_WirePlug_C_UpdateWirePlugOffset, CallFunc_K2_GetComponentLocation_ReturnValue) == 0x0000C0, "Member 'WIREPUZZLE_WirePlug_C_UpdateWirePlugOffset::CallFunc_K2_GetComponentLocation_ReturnValue' has a wrong offset!");
static_assert(offsetof(WIREPUZZLE_WirePlug_C_UpdateWirePlugOffset, CallFunc_GetSelectedWireSourceCell_SelectedCell) == 0x0000D0, "Member 'WIREPUZZLE_WirePlug_C_UpdateWirePlugOffset::CallFunc_GetSelectedWireSourceCell_SelectedCell' has a wrong offset!");
static_assert(offsetof(WIREPUZZLE_WirePlug_C_UpdateWirePlugOffset, CallFunc_IsValid_ReturnValue) == 0x0000D8, "Member 'WIREPUZZLE_WirePlug_C_UpdateWirePlugOffset::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(WIREPUZZLE_WirePlug_C_UpdateWirePlugOffset, CallFunc_EqualEqual_ObjectObject_ReturnValue) == 0x0000D9, "Member 'WIREPUZZLE_WirePlug_C_UpdateWirePlugOffset::CallFunc_EqualEqual_ObjectObject_ReturnValue' has a wrong offset!");
static_assert(offsetof(WIREPUZZLE_WirePlug_C_UpdateWirePlugOffset, CallFunc_InverseTransformLocation_ReturnValue) == 0x0000DC, "Member 'WIREPUZZLE_WirePlug_C_UpdateWirePlugOffset::CallFunc_InverseTransformLocation_ReturnValue' has a wrong offset!");
static_assert(offsetof(WIREPUZZLE_WirePlug_C_UpdateWirePlugOffset, CallFunc_BreakVector_X) == 0x0000E8, "Member 'WIREPUZZLE_WirePlug_C_UpdateWirePlugOffset::CallFunc_BreakVector_X' has a wrong offset!");
static_assert(offsetof(WIREPUZZLE_WirePlug_C_UpdateWirePlugOffset, CallFunc_BreakVector_Y) == 0x0000EC, "Member 'WIREPUZZLE_WirePlug_C_UpdateWirePlugOffset::CallFunc_BreakVector_Y' has a wrong offset!");
static_assert(offsetof(WIREPUZZLE_WirePlug_C_UpdateWirePlugOffset, CallFunc_BreakVector_Z) == 0x0000F0, "Member 'WIREPUZZLE_WirePlug_C_UpdateWirePlugOffset::CallFunc_BreakVector_Z' has a wrong offset!");
static_assert(offsetof(WIREPUZZLE_WirePlug_C_UpdateWirePlugOffset, CallFunc_LinePlaneIntersection_OriginNormal_T) == 0x0000F4, "Member 'WIREPUZZLE_WirePlug_C_UpdateWirePlugOffset::CallFunc_LinePlaneIntersection_OriginNormal_T' has a wrong offset!");
static_assert(offsetof(WIREPUZZLE_WirePlug_C_UpdateWirePlugOffset, CallFunc_LinePlaneIntersection_OriginNormal_Intersection) == 0x0000F8, "Member 'WIREPUZZLE_WirePlug_C_UpdateWirePlugOffset::CallFunc_LinePlaneIntersection_OriginNormal_Intersection' has a wrong offset!");
static_assert(offsetof(WIREPUZZLE_WirePlug_C_UpdateWirePlugOffset, CallFunc_LinePlaneIntersection_OriginNormal_ReturnValue) == 0x000104, "Member 'WIREPUZZLE_WirePlug_C_UpdateWirePlugOffset::CallFunc_LinePlaneIntersection_OriginNormal_ReturnValue' has a wrong offset!");
static_assert(offsetof(WIREPUZZLE_WirePlug_C_UpdateWirePlugOffset, CallFunc_MakeVector2D_ReturnValue_1) == 0x000108, "Member 'WIREPUZZLE_WirePlug_C_UpdateWirePlugOffset::CallFunc_MakeVector2D_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(WIREPUZZLE_WirePlug_C_UpdateWirePlugOffset, CallFunc_BreakVector_X_1) == 0x000110, "Member 'WIREPUZZLE_WirePlug_C_UpdateWirePlugOffset::CallFunc_BreakVector_X_1' has a wrong offset!");
static_assert(offsetof(WIREPUZZLE_WirePlug_C_UpdateWirePlugOffset, CallFunc_BreakVector_Y_1) == 0x000114, "Member 'WIREPUZZLE_WirePlug_C_UpdateWirePlugOffset::CallFunc_BreakVector_Y_1' has a wrong offset!");
static_assert(offsetof(WIREPUZZLE_WirePlug_C_UpdateWirePlugOffset, CallFunc_BreakVector_Z_1) == 0x000118, "Member 'WIREPUZZLE_WirePlug_C_UpdateWirePlugOffset::CallFunc_BreakVector_Z_1' has a wrong offset!");
static_assert(offsetof(WIREPUZZLE_WirePlug_C_UpdateWirePlugOffset, CallFunc_Add_Vector2DVector2D_ReturnValue) == 0x00011C, "Member 'WIREPUZZLE_WirePlug_C_UpdateWirePlugOffset::CallFunc_Add_Vector2DVector2D_ReturnValue' has a wrong offset!");
static_assert(offsetof(WIREPUZZLE_WirePlug_C_UpdateWirePlugOffset, CallFunc_MakeVector_ReturnValue) == 0x000124, "Member 'WIREPUZZLE_WirePlug_C_UpdateWirePlugOffset::CallFunc_MakeVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(WIREPUZZLE_WirePlug_C_UpdateWirePlugOffset, CallFunc_GetPlayerPawn_ReturnValue) == 0x000130, "Member 'WIREPUZZLE_WirePlug_C_UpdateWirePlugOffset::CallFunc_GetPlayerPawn_ReturnValue' has a wrong offset!");
static_assert(offsetof(WIREPUZZLE_WirePlug_C_UpdateWirePlugOffset, K2Node_DynamicCast_AsPAWN_Hacker_Simple) == 0x000138, "Member 'WIREPUZZLE_WirePlug_C_UpdateWirePlugOffset::K2Node_DynamicCast_AsPAWN_Hacker_Simple' has a wrong offset!");
static_assert(offsetof(WIREPUZZLE_WirePlug_C_UpdateWirePlugOffset, K2Node_DynamicCast_bSuccess) == 0x000140, "Member 'WIREPUZZLE_WirePlug_C_UpdateWirePlugOffset::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(WIREPUZZLE_WirePlug_C_UpdateWirePlugOffset, CallFunc_GetForwardVector_ReturnValue) == 0x000144, "Member 'WIREPUZZLE_WirePlug_C_UpdateWirePlugOffset::CallFunc_GetForwardVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(WIREPUZZLE_WirePlug_C_UpdateWirePlugOffset, CallFunc_K2_GetComponentLocation_ReturnValue_1) == 0x000150, "Member 'WIREPUZZLE_WirePlug_C_UpdateWirePlugOffset::CallFunc_K2_GetComponentLocation_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(WIREPUZZLE_WirePlug_C_UpdateWirePlugOffset, CallFunc_Multiply_VectorFloat_ReturnValue) == 0x00015C, "Member 'WIREPUZZLE_WirePlug_C_UpdateWirePlugOffset::CallFunc_Multiply_VectorFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(WIREPUZZLE_WirePlug_C_UpdateWirePlugOffset, CallFunc_Add_VectorVector_ReturnValue) == 0x000168, "Member 'WIREPUZZLE_WirePlug_C_UpdateWirePlugOffset::CallFunc_Add_VectorVector_ReturnValue' has a wrong offset!");

// Function WIREPUZZLE_WirePlug.WIREPUZZLE_WirePlug_C.UpdateInteractionOverride
// 0x0050 (0x0050 - 0x0000)
struct WIREPUZZLE_WirePlug_C_UpdateInteractionOverride final
{
public:
	struct FVector                                CallFunc_K2_GetActorLocation_ReturnValue;          // 0x0000(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Square_ReturnValue;                       // 0x000C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class APawn*                                  CallFunc_GetPlayerPawn_ReturnValue;                // 0x0010(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ENUM_InteractResultType                       CallFunc_InteractWithPuzzlePrimitive_Result;       // 0x0018(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_19[0x7];                                       // 0x0019(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   CallFunc_InteractWithPuzzlePrimitive_ResultText;   // 0x0020(0x0018)()
	struct FVector                                CallFunc_K2_GetActorLocation_ReturnValue_1;        // 0x0038(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Vector_DistanceSquared_ReturnValue;       // 0x0044(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Greater_FloatFloat_ReturnValue;           // 0x0048(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(WIREPUZZLE_WirePlug_C_UpdateInteractionOverride) == 0x000008, "Wrong alignment on WIREPUZZLE_WirePlug_C_UpdateInteractionOverride");
static_assert(sizeof(WIREPUZZLE_WirePlug_C_UpdateInteractionOverride) == 0x000050, "Wrong size on WIREPUZZLE_WirePlug_C_UpdateInteractionOverride");
static_assert(offsetof(WIREPUZZLE_WirePlug_C_UpdateInteractionOverride, CallFunc_K2_GetActorLocation_ReturnValue) == 0x000000, "Member 'WIREPUZZLE_WirePlug_C_UpdateInteractionOverride::CallFunc_K2_GetActorLocation_ReturnValue' has a wrong offset!");
static_assert(offsetof(WIREPUZZLE_WirePlug_C_UpdateInteractionOverride, CallFunc_Square_ReturnValue) == 0x00000C, "Member 'WIREPUZZLE_WirePlug_C_UpdateInteractionOverride::CallFunc_Square_ReturnValue' has a wrong offset!");
static_assert(offsetof(WIREPUZZLE_WirePlug_C_UpdateInteractionOverride, CallFunc_GetPlayerPawn_ReturnValue) == 0x000010, "Member 'WIREPUZZLE_WirePlug_C_UpdateInteractionOverride::CallFunc_GetPlayerPawn_ReturnValue' has a wrong offset!");
static_assert(offsetof(WIREPUZZLE_WirePlug_C_UpdateInteractionOverride, CallFunc_InteractWithPuzzlePrimitive_Result) == 0x000018, "Member 'WIREPUZZLE_WirePlug_C_UpdateInteractionOverride::CallFunc_InteractWithPuzzlePrimitive_Result' has a wrong offset!");
static_assert(offsetof(WIREPUZZLE_WirePlug_C_UpdateInteractionOverride, CallFunc_InteractWithPuzzlePrimitive_ResultText) == 0x000020, "Member 'WIREPUZZLE_WirePlug_C_UpdateInteractionOverride::CallFunc_InteractWithPuzzlePrimitive_ResultText' has a wrong offset!");
static_assert(offsetof(WIREPUZZLE_WirePlug_C_UpdateInteractionOverride, CallFunc_K2_GetActorLocation_ReturnValue_1) == 0x000038, "Member 'WIREPUZZLE_WirePlug_C_UpdateInteractionOverride::CallFunc_K2_GetActorLocation_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(WIREPUZZLE_WirePlug_C_UpdateInteractionOverride, CallFunc_Vector_DistanceSquared_ReturnValue) == 0x000044, "Member 'WIREPUZZLE_WirePlug_C_UpdateInteractionOverride::CallFunc_Vector_DistanceSquared_ReturnValue' has a wrong offset!");
static_assert(offsetof(WIREPUZZLE_WirePlug_C_UpdateInteractionOverride, CallFunc_Greater_FloatFloat_ReturnValue) == 0x000048, "Member 'WIREPUZZLE_WirePlug_C_UpdateInteractionOverride::CallFunc_Greater_FloatFloat_ReturnValue' has a wrong offset!");

// Function WIREPUZZLE_WirePlug.WIREPUZZLE_WirePlug_C.GetConnectionDepthOffset
// 0x0004 (0x0004 - 0x0000)
struct WIREPUZZLE_WirePlug_C_GetConnectionDepthOffset final
{
public:
	float                                         Result;                                            // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(WIREPUZZLE_WirePlug_C_GetConnectionDepthOffset) == 0x000004, "Wrong alignment on WIREPUZZLE_WirePlug_C_GetConnectionDepthOffset");
static_assert(sizeof(WIREPUZZLE_WirePlug_C_GetConnectionDepthOffset) == 0x000004, "Wrong size on WIREPUZZLE_WirePlug_C_GetConnectionDepthOffset");
static_assert(offsetof(WIREPUZZLE_WirePlug_C_GetConnectionDepthOffset, Result) == 0x000000, "Member 'WIREPUZZLE_WirePlug_C_GetConnectionDepthOffset::Result' has a wrong offset!");

// Function WIREPUZZLE_WirePlug.WIREPUZZLE_WirePlug_C.InitializeWirePlug
// 0x0030 (0x0030 - 0x0000)
struct WIREPUZZLE_WirePlug_C_InitializeWirePlug final
{
public:
	class UCOMP_WirePuzzle_Cell_Base_C*           ConnectedCell;                                     // 0x0000(0x0008)(Edit, BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Variable;                                // 0x0008(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0009(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_A[0x6];                                        // 0x000A(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   K2Node_Select_Default;                             // 0x0010(0x0018)()
	class UCOMP_WirePuzzle_Cell_Base_C*           CallFunc_GetConnectedCell_Cell;                    // 0x0028(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(WIREPUZZLE_WirePlug_C_InitializeWirePlug) == 0x000008, "Wrong alignment on WIREPUZZLE_WirePlug_C_InitializeWirePlug");
static_assert(sizeof(WIREPUZZLE_WirePlug_C_InitializeWirePlug) == 0x000030, "Wrong size on WIREPUZZLE_WirePlug_C_InitializeWirePlug");
static_assert(offsetof(WIREPUZZLE_WirePlug_C_InitializeWirePlug, ConnectedCell) == 0x000000, "Member 'WIREPUZZLE_WirePlug_C_InitializeWirePlug::ConnectedCell' has a wrong offset!");
static_assert(offsetof(WIREPUZZLE_WirePlug_C_InitializeWirePlug, Temp_bool_Variable) == 0x000008, "Member 'WIREPUZZLE_WirePlug_C_InitializeWirePlug::Temp_bool_Variable' has a wrong offset!");
static_assert(offsetof(WIREPUZZLE_WirePlug_C_InitializeWirePlug, CallFunc_IsValid_ReturnValue) == 0x000009, "Member 'WIREPUZZLE_WirePlug_C_InitializeWirePlug::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(WIREPUZZLE_WirePlug_C_InitializeWirePlug, K2Node_Select_Default) == 0x000010, "Member 'WIREPUZZLE_WirePlug_C_InitializeWirePlug::K2Node_Select_Default' has a wrong offset!");
static_assert(offsetof(WIREPUZZLE_WirePlug_C_InitializeWirePlug, CallFunc_GetConnectedCell_Cell) == 0x000028, "Member 'WIREPUZZLE_WirePlug_C_InitializeWirePlug::CallFunc_GetConnectedCell_Cell' has a wrong offset!");

// Function WIREPUZZLE_WirePlug.WIREPUZZLE_WirePlug_C.SetWirePlugPowerTypeDescription
// 0x0080 (0x0080 - 0x0000)
struct WIREPUZZLE_WirePlug_C_SetWirePlugPowerTypeDescription final
{
public:
	class FText                                   PowerTypeText;                                     // 0x0000(0x0018)(BlueprintVisible, BlueprintReadOnly, Parm)
	struct FFormatArgumentData                    K2Node_MakeStruct_FormatArgumentData;              // 0x0018(0x0040)(HasGetValueTypeHash)
	TArray<struct FFormatArgumentData>            K2Node_MakeArray_Array;                            // 0x0058(0x0010)(ReferenceParm)
	class FText                                   CallFunc_Format_ReturnValue;                       // 0x0068(0x0018)()
};
static_assert(alignof(WIREPUZZLE_WirePlug_C_SetWirePlugPowerTypeDescription) == 0x000008, "Wrong alignment on WIREPUZZLE_WirePlug_C_SetWirePlugPowerTypeDescription");
static_assert(sizeof(WIREPUZZLE_WirePlug_C_SetWirePlugPowerTypeDescription) == 0x000080, "Wrong size on WIREPUZZLE_WirePlug_C_SetWirePlugPowerTypeDescription");
static_assert(offsetof(WIREPUZZLE_WirePlug_C_SetWirePlugPowerTypeDescription, PowerTypeText) == 0x000000, "Member 'WIREPUZZLE_WirePlug_C_SetWirePlugPowerTypeDescription::PowerTypeText' has a wrong offset!");
static_assert(offsetof(WIREPUZZLE_WirePlug_C_SetWirePlugPowerTypeDescription, K2Node_MakeStruct_FormatArgumentData) == 0x000018, "Member 'WIREPUZZLE_WirePlug_C_SetWirePlugPowerTypeDescription::K2Node_MakeStruct_FormatArgumentData' has a wrong offset!");
static_assert(offsetof(WIREPUZZLE_WirePlug_C_SetWirePlugPowerTypeDescription, K2Node_MakeArray_Array) == 0x000058, "Member 'WIREPUZZLE_WirePlug_C_SetWirePlugPowerTypeDescription::K2Node_MakeArray_Array' has a wrong offset!");
static_assert(offsetof(WIREPUZZLE_WirePlug_C_SetWirePlugPowerTypeDescription, CallFunc_Format_ReturnValue) == 0x000068, "Member 'WIREPUZZLE_WirePlug_C_SetWirePlugPowerTypeDescription::CallFunc_Format_ReturnValue' has a wrong offset!");

// Function WIREPUZZLE_WirePlug.WIREPUZZLE_WirePlug_C.GetFinalTransitionState
// 0x0014 (0x0014 - 0x0000)
struct WIREPUZZLE_WirePlug_C_GetFinalTransitionState final
{
public:
	ENUM_WirePlugState                            State;                                             // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Array_LastIndex_ReturnValue;              // 0x0004(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ENUM_WirePlugState                            CallFunc_Array_Get_Item;                           // 0x0008(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Array_Length_ReturnValue;                 // 0x000C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Greater_IntInt_ReturnValue;               // 0x0010(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(WIREPUZZLE_WirePlug_C_GetFinalTransitionState) == 0x000004, "Wrong alignment on WIREPUZZLE_WirePlug_C_GetFinalTransitionState");
static_assert(sizeof(WIREPUZZLE_WirePlug_C_GetFinalTransitionState) == 0x000014, "Wrong size on WIREPUZZLE_WirePlug_C_GetFinalTransitionState");
static_assert(offsetof(WIREPUZZLE_WirePlug_C_GetFinalTransitionState, State) == 0x000000, "Member 'WIREPUZZLE_WirePlug_C_GetFinalTransitionState::State' has a wrong offset!");
static_assert(offsetof(WIREPUZZLE_WirePlug_C_GetFinalTransitionState, CallFunc_Array_LastIndex_ReturnValue) == 0x000004, "Member 'WIREPUZZLE_WirePlug_C_GetFinalTransitionState::CallFunc_Array_LastIndex_ReturnValue' has a wrong offset!");
static_assert(offsetof(WIREPUZZLE_WirePlug_C_GetFinalTransitionState, CallFunc_Array_Get_Item) == 0x000008, "Member 'WIREPUZZLE_WirePlug_C_GetFinalTransitionState::CallFunc_Array_Get_Item' has a wrong offset!");
static_assert(offsetof(WIREPUZZLE_WirePlug_C_GetFinalTransitionState, CallFunc_Array_Length_ReturnValue) == 0x00000C, "Member 'WIREPUZZLE_WirePlug_C_GetFinalTransitionState::CallFunc_Array_Length_ReturnValue' has a wrong offset!");
static_assert(offsetof(WIREPUZZLE_WirePlug_C_GetFinalTransitionState, CallFunc_Greater_IntInt_ReturnValue) == 0x000010, "Member 'WIREPUZZLE_WirePlug_C_GetFinalTransitionState::CallFunc_Greater_IntInt_ReturnValue' has a wrong offset!");

}

