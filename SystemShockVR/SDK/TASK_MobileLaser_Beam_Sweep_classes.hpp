#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: TASK_MobileLaser_Beam_Sweep

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "CoreUObject_structs.hpp"
#include "ENUM_MobileLaser_BeamSweepType_structs.hpp"
#include "TASK_Beam_Base_classes.hpp"
#include "ENUM_MobileLaser_BeamState_structs.hpp"


namespace SDK
{

// BlueprintGeneratedClass TASK_MobileLaser_Beam_Sweep.TASK_MobileLaser_Beam_Sweep_C
// 0x0068 (0x0278 - 0x0210)
class UTASK_MobileLaser_Beam_Sweep_C final : public UTASK_Beam_Base_C
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame_TASK_MobileLaser_Beam_Sweep_C;      // 0x0210(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	float                                         BeamSweepDuration;                                 // 0x0218(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         BeamMinimumAngle;                                  // 0x021C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         BeamOvershootAngle;                                // 0x0220(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_224[0x4];                                      // 0x0224(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UCurveVector*                           OffsetCurve;                                       // 0x0228(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                SweepStartLocalDirection;                          // 0x0230(0x000C)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                SweepEndLocalDirection;                            // 0x023C(0x000C)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          ReverseAnimationY;                                 // 0x0248(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          IsChargingUp;                                      // 0x0249(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_24A[0x2];                                      // 0x024A(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         ChargeUpInterpSpeed;                               // 0x024C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                ChargeUpLocalDirection;                            // 0x0250(0x000C)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         FuturePredictTime;                                 // 0x025C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         SweepSpeed;                                        // 0x0260(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_264[0x4];                                      // 0x0264(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UCurveFloat*                            OnFlairCurve;                                      // 0x0268(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UCurveFloat*                            OnBeamCurve;                                       // 0x0270(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

public:
	void ExecuteUbergraph_TASK_MobileLaser_Beam_Sweep(int32 EntryPoint);
	void SetSweepStartLocalDirection();
	void SetSweepEndLocalDirection();
	void ReceiveExecuteAI(class AAIController* OwnerController, class APawn* ControlledPawn);
	void UpdateBeamOn(float DeltaSeconds);
	void SetBeamState(ENUM_MobileLaser_BeamState State);
	void UpdateBeamTurningOn(float DeltaSeconds, float* Progress);

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"TASK_MobileLaser_Beam_Sweep_C">();
	}
	static class UTASK_MobileLaser_Beam_Sweep_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<UTASK_MobileLaser_Beam_Sweep_C>();
	}
};
static_assert(alignof(UTASK_MobileLaser_Beam_Sweep_C) == 0x000008, "Wrong alignment on UTASK_MobileLaser_Beam_Sweep_C");
static_assert(sizeof(UTASK_MobileLaser_Beam_Sweep_C) == 0x000278, "Wrong size on UTASK_MobileLaser_Beam_Sweep_C");
static_assert(offsetof(UTASK_MobileLaser_Beam_Sweep_C, UberGraphFrame_TASK_MobileLaser_Beam_Sweep_C) == 0x000210, "Member 'UTASK_MobileLaser_Beam_Sweep_C::UberGraphFrame_TASK_MobileLaser_Beam_Sweep_C' has a wrong offset!");
static_assert(offsetof(UTASK_MobileLaser_Beam_Sweep_C, BeamSweepDuration) == 0x000218, "Member 'UTASK_MobileLaser_Beam_Sweep_C::BeamSweepDuration' has a wrong offset!");
static_assert(offsetof(UTASK_MobileLaser_Beam_Sweep_C, BeamMinimumAngle) == 0x00021C, "Member 'UTASK_MobileLaser_Beam_Sweep_C::BeamMinimumAngle' has a wrong offset!");
static_assert(offsetof(UTASK_MobileLaser_Beam_Sweep_C, BeamOvershootAngle) == 0x000220, "Member 'UTASK_MobileLaser_Beam_Sweep_C::BeamOvershootAngle' has a wrong offset!");
static_assert(offsetof(UTASK_MobileLaser_Beam_Sweep_C, OffsetCurve) == 0x000228, "Member 'UTASK_MobileLaser_Beam_Sweep_C::OffsetCurve' has a wrong offset!");
static_assert(offsetof(UTASK_MobileLaser_Beam_Sweep_C, SweepStartLocalDirection) == 0x000230, "Member 'UTASK_MobileLaser_Beam_Sweep_C::SweepStartLocalDirection' has a wrong offset!");
static_assert(offsetof(UTASK_MobileLaser_Beam_Sweep_C, SweepEndLocalDirection) == 0x00023C, "Member 'UTASK_MobileLaser_Beam_Sweep_C::SweepEndLocalDirection' has a wrong offset!");
static_assert(offsetof(UTASK_MobileLaser_Beam_Sweep_C, ReverseAnimationY) == 0x000248, "Member 'UTASK_MobileLaser_Beam_Sweep_C::ReverseAnimationY' has a wrong offset!");
static_assert(offsetof(UTASK_MobileLaser_Beam_Sweep_C, IsChargingUp) == 0x000249, "Member 'UTASK_MobileLaser_Beam_Sweep_C::IsChargingUp' has a wrong offset!");
static_assert(offsetof(UTASK_MobileLaser_Beam_Sweep_C, ChargeUpInterpSpeed) == 0x00024C, "Member 'UTASK_MobileLaser_Beam_Sweep_C::ChargeUpInterpSpeed' has a wrong offset!");
static_assert(offsetof(UTASK_MobileLaser_Beam_Sweep_C, ChargeUpLocalDirection) == 0x000250, "Member 'UTASK_MobileLaser_Beam_Sweep_C::ChargeUpLocalDirection' has a wrong offset!");
static_assert(offsetof(UTASK_MobileLaser_Beam_Sweep_C, FuturePredictTime) == 0x00025C, "Member 'UTASK_MobileLaser_Beam_Sweep_C::FuturePredictTime' has a wrong offset!");
static_assert(offsetof(UTASK_MobileLaser_Beam_Sweep_C, SweepSpeed) == 0x000260, "Member 'UTASK_MobileLaser_Beam_Sweep_C::SweepSpeed' has a wrong offset!");
static_assert(offsetof(UTASK_MobileLaser_Beam_Sweep_C, OnFlairCurve) == 0x000268, "Member 'UTASK_MobileLaser_Beam_Sweep_C::OnFlairCurve' has a wrong offset!");
static_assert(offsetof(UTASK_MobileLaser_Beam_Sweep_C, OnBeamCurve) == 0x000270, "Member 'UTASK_MobileLaser_Beam_Sweep_C::OnBeamCurve' has a wrong offset!");

}

