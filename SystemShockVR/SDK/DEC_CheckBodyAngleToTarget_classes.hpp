#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: DEC_CheckBodyAngleToTarget

#include "Basic.hpp"

#include "ENUM_TargetAssignmentType_structs.hpp"
#include "AIModule_classes.hpp"
#include "ENUM_GreaterEqualLess_structs.hpp"
#include "ENUM_NormalHorizontalVertical_structs.hpp"


namespace SDK
{

// BlueprintGeneratedClass DEC_CheckBodyAngleToTarget.DEC_CheckBodyAngleToTarget_C
// 0x0010 (0x00B0 - 0x00A0)
class UDEC_CheckBodyAngleToTarget_C final : public UBTDecorator_BlueprintBase
{
public:
	ENUM_TargetAssignmentType                     Target;                                            // 0x00A0(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ENUM_GreaterEqualLess                         CheckType;                                         // 0x00A1(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ENUM_NormalHorizontalVertical                 MeasurementType;                                   // 0x00A2(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_A3[0x1];                                       // 0x00A3(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         Angle;                                             // 0x00A4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Signed;                                            // 0x00A8(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          UseActorForward;                                   // 0x00A9(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)

public:
	bool PerformConditionCheckAI(class AAIController* OwnerController, class APawn* ControlledPawn);

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"DEC_CheckBodyAngleToTarget_C">();
	}
	static class UDEC_CheckBodyAngleToTarget_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<UDEC_CheckBodyAngleToTarget_C>();
	}
};
static_assert(alignof(UDEC_CheckBodyAngleToTarget_C) == 0x000008, "Wrong alignment on UDEC_CheckBodyAngleToTarget_C");
static_assert(sizeof(UDEC_CheckBodyAngleToTarget_C) == 0x0000B0, "Wrong size on UDEC_CheckBodyAngleToTarget_C");
static_assert(offsetof(UDEC_CheckBodyAngleToTarget_C, Target) == 0x0000A0, "Member 'UDEC_CheckBodyAngleToTarget_C::Target' has a wrong offset!");
static_assert(offsetof(UDEC_CheckBodyAngleToTarget_C, CheckType) == 0x0000A1, "Member 'UDEC_CheckBodyAngleToTarget_C::CheckType' has a wrong offset!");
static_assert(offsetof(UDEC_CheckBodyAngleToTarget_C, MeasurementType) == 0x0000A2, "Member 'UDEC_CheckBodyAngleToTarget_C::MeasurementType' has a wrong offset!");
static_assert(offsetof(UDEC_CheckBodyAngleToTarget_C, Angle) == 0x0000A4, "Member 'UDEC_CheckBodyAngleToTarget_C::Angle' has a wrong offset!");
static_assert(offsetof(UDEC_CheckBodyAngleToTarget_C, Signed) == 0x0000A8, "Member 'UDEC_CheckBodyAngleToTarget_C::Signed' has a wrong offset!");
static_assert(offsetof(UDEC_CheckBodyAngleToTarget_C, UseActorForward) == 0x0000A9, "Member 'UDEC_CheckBodyAngleToTarget_C::UseActorForward' has a wrong offset!");

}

