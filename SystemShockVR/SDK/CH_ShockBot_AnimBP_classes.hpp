#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: CH_ShockBot_AnimBP

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "Engine_classes.hpp"
#include "AnimGraphRuntime_structs.hpp"
#include "CoreUObject_structs.hpp"
#include "ENUM_DeathBlowType_structs.hpp"
#include "ENUM_Emotions_structs.hpp"


namespace SDK
{

// AnimBlueprintGeneratedClass CH_ShockBot_AnimBP.CH_ShockBot_AnimBP_C
// 0x1B20 (0x1DE0 - 0x02C0)
class UCH_ShockBot_AnimBP_C final : public UAnimInstance
{
public:
	uint8                                         Pad_2B8[0x8];                                      // 0x02B8(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x02C0(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	struct FAnimNode_Root                         AnimGraphNode_Root;                                // 0x02C8(0x0030)()
	struct FAnimNode_Slot                         AnimGraphNode_Slot_2;                              // 0x02F8(0x0048)()
	struct FAnimNode_BlendListByBool              AnimGraphNode_BlendListByBool_5;                   // 0x0340(0x00A0)()
	struct FAnimNode_LayeredBoneBlend             AnimGraphNode_LayeredBoneBlend_1;                  // 0x03E0(0x00C0)()
	struct FAnimNode_SaveCachedPose               AnimGraphNode_SaveCachedPose_2;                    // 0x04A0(0x0158)()
	struct FAnimNode_SequencePlayer               AnimGraphNode_SequencePlayer_5;                    // 0x05F8(0x0080)()
	struct FAnimNode_BlendListByBool              AnimGraphNode_BlendListByBool_4;                   // 0x0678(0x00A0)()
	struct FAnimNode_BlendListByBool              AnimGraphNode_BlendListByBool_3;                   // 0x0718(0x00A0)()
	struct FAnimNode_SequencePlayer               AnimGraphNode_SequencePlayer_4;                    // 0x07B8(0x0080)()
	struct FAnimNode_Slot                         AnimGraphNode_Slot_1;                              // 0x0838(0x0048)()
	struct FAnimNode_LayeredBoneBlend             AnimGraphNode_LayeredBoneBlend;                    // 0x0880(0x00C0)()
	struct FAnimNode_UseCachedPose                AnimGraphNode_UseCachedPose_4;                     // 0x0940(0x0028)()
	struct FAnimNode_UseCachedPose                AnimGraphNode_UseCachedPose_3;                     // 0x0968(0x0028)()
	struct FAnimNode_SaveCachedPose               AnimGraphNode_SaveCachedPose_1;                    // 0x0990(0x0158)()
	struct FAnimNode_UseCachedPose                AnimGraphNode_UseCachedPose_2;                     // 0x0AE8(0x0028)()
	struct FAnimNode_UseCachedPose                AnimGraphNode_UseCachedPose_1;                     // 0x0B10(0x0028)()
	struct FAnimNode_BlendSpacePlayer             AnimGraphNode_BlendSpacePlayer_1;                  // 0x0B38(0x00E8)()
	struct FAnimNode_BlendListByBool              AnimGraphNode_BlendListByBool_2;                   // 0x0C20(0x00A0)()
	struct FAnimNode_TransitionResult             AnimGraphNode_TransitionResult_1;                  // 0x0CC0(0x0028)()
	struct FAnimNode_TransitionResult             AnimGraphNode_TransitionResult;                    // 0x0CE8(0x0028)()
	struct FAnimNode_BlendSpacePlayer             AnimGraphNode_BlendSpacePlayer;                    // 0x0D10(0x00E8)()
	struct FAnimNode_StateResult                  AnimGraphNode_StateResult_1;                       // 0x0DF8(0x0030)()
	struct FAnimNode_SequencePlayer               AnimGraphNode_SequencePlayer_3;                    // 0x0E28(0x0080)()
	struct FAnimNode_StateResult                  AnimGraphNode_StateResult;                         // 0x0EA8(0x0030)()
	struct FAnimNode_StateMachine                 AnimGraphNode_StateMachine;                        // 0x0ED8(0x00B0)()
	struct FAnimNode_Slot                         AnimGraphNode_Slot;                                // 0x0F88(0x0048)()
	struct FAnimNode_ConvertComponentToLocalSpace AnimGraphNode_ComponentToLocalSpace_1;             // 0x0FD0(0x0020)()
	struct FAnimNode_Fabrik                       AnimGraphNode_Fabrik;                              // 0x0FF0(0x0190)()
	struct FAnimNode_PoseSnapshot                 AnimGraphNode_PoseSnapshot;                        // 0x1180(0x0090)()
	struct FAnimNode_BlendListByBool              AnimGraphNode_BlendListByBool_1;                   // 0x1210(0x00A0)()
	struct FAnimNode_SequencePlayer               AnimGraphNode_SequencePlayer_2;                    // 0x12B0(0x0080)()
	struct FAnimNode_SequencePlayer               AnimGraphNode_SequencePlayer_1;                    // 0x1330(0x0080)()
	struct FAnimNode_ConvertLocalToComponentSpace AnimGraphNode_LocalToComponentSpace_1;             // 0x13B0(0x0020)()
	struct FAnimNode_CopyBone                     AnimGraphNode_CopyBone_3;                          // 0x13D0(0x00F0)()
	struct FAnimNode_SaveCachedPose               AnimGraphNode_SaveCachedPose;                      // 0x14C0(0x0158)()
	struct FAnimNode_UseCachedPose                AnimGraphNode_UseCachedPose;                       // 0x1618(0x0028)()
	struct FAnimNode_BlendBoneByChannel           AnimGraphNode_BlendBoneByChannel;                  // 0x1640(0x0068)()
	struct FAnimNode_ConvertLocalToComponentSpace AnimGraphNode_LocalToComponentSpace;               // 0x16A8(0x0020)()
	struct FAnimNode_ConvertComponentToLocalSpace AnimGraphNode_ComponentToLocalSpace;               // 0x16C8(0x0020)()
	uint8                                         Pad_16E8[0x8];                                     // 0x16E8(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FAnimNode_CCDIK                        AnimGraphNode_CCDIK;                               // 0x16F0(0x0180)()
	struct FAnimNode_RotationMultiplier           AnimGraphNode_RotationMultiplier;                  // 0x1870(0x00F0)()
	struct FAnimNode_CopyBone                     AnimGraphNode_CopyBone_2;                          // 0x1960(0x00F0)()
	struct FAnimNode_CopyBone                     AnimGraphNode_CopyBone_1;                          // 0x1A50(0x00F0)()
	struct FAnimNode_CopyBone                     AnimGraphNode_CopyBone;                            // 0x1B40(0x00F0)()
	struct FAnimNode_BlendListByBool              AnimGraphNode_BlendListByBool;                     // 0x1C30(0x00A0)()
	struct FAnimNode_SequencePlayer               AnimGraphNode_SequencePlayer;                      // 0x1CD0(0x0080)()
	bool                                          IsCatatonic;                                       // 0x1D50(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_1D51[0x3];                                     // 0x1D51(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         MovementSpeed;                                     // 0x1D54(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         MovementAngle;                                     // 0x1D58(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          IsAlive;                                           // 0x1D5C(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_1D5D[0x3];                                     // 0x1D5D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class UAnimSequenceBase*                      IdleOverride;                                      // 0x1D60(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          UseIdleOverride;                                   // 0x1D68(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          IsMoving;                                          // 0x1D69(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_1D6A[0x6];                                     // 0x1D6A(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class UOBJ_EnemyTarget_C*                     AimTarget;                                         // 0x1D70(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CurrentAimAlpha;                                   // 0x1D78(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1D7C[0x4];                                     // 0x1D7C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTransform                             AimTargetTransform;                                // 0x1D80(0x0030)(Edit, BlueprintVisible, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          IsFlying;                                          // 0x1DB0(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_1DB1[0x7];                                     // 0x1DB1(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UAnimSequence*                          StunnedAnimSequence;                               // 0x1DB8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          UseStunnedSequence;                                // 0x1DC0(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_1DC1[0x3];                                     // 0x1DC1(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         TurnTarget;                                        // 0x1DC4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         TurnTargetError;                                   // 0x1DC8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         TurnDelta;                                         // 0x1DCC(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         TurnDeltaCached;                                   // 0x1DD0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         TurnTargetChached;                                 // 0x1DD4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CanTurn;                                           // 0x1DD8(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)

public:
	void ExecuteUbergraph_CH_ShockBot_AnimBP(int32 EntryPoint);
	void BlueprintUpdateAnimation(float DeltaTimeX);
	void EvaluateGraphExposedInputs_ExecuteUbergraph_CH_ShockBot_AnimBP_AnimGraphNode_TransitionResult_F392D272482C21A0715A1F9830825490();
	void EvaluateGraphExposedInputs_ExecuteUbergraph_CH_ShockBot_AnimBP_AnimGraphNode_TransitionResult_44C2C5BE429F057D538009A2CD48D61B();
	void UpdateAiming();
	void AnimGraph(struct FPoseLink* AnimGraph_0);
	void GetRotation(struct FRotator* AnimRotationPerSecond, float* AnimRotationAlpha);
	void GetStance(ENUM_Emotions* Stance);
	void SetStance(ENUM_Emotions Stance, bool* Result);
	void SetCatatonic(bool State, bool* Result);
	void SetStandingTurn(float SignedAngleToTarget, bool IsStanding, bool* Result);
	void ReceiveDeathBlow(ENUM_DeathBlowType BodyPart, bool* Result);
	void ReceiveImpact(const struct FVector& Impulse, const struct FVector& ImpactLocation, const struct FVector& ImpactNormal, class FName BoneName, const class FString& DamageType, float DamageAmount, float FlinchTime, bool* Result);
	void SetIsAlive(bool IsAlive_0, bool* Result);
	void SetMovementParameters(const struct FVector& Velocity, const struct FRotator& Rotation, const struct FRotator& DesiredRotation, bool* Result);
	void SetLookAtAlpha(float Alpha, bool* Result);
	void SetLookAtLocation(const struct FVector& Location, bool* Result);
	void SetRelativeAimAngleOffset(float YawOffset, float PitchOffset, float Alpha, bool* Result);
	void SetIdleOverrideSequence(class UAnimSequenceBase* IdleOverride_0, bool* Result);
	void GetIdleOverrideSequence(class UAnimSequenceBase** IdleOverride_0);
	void SetAimTarget(class UOBJ_EnemyTarget_C* Target, bool* Result);
	void SetTravelMode(bool TravelModeOn, bool* Result);
	void GetAimTarget(class UOBJ_EnemyTarget_C** Target);
	void SetSprintEnabled(bool SprintEnabled, bool* Result);
	void SetStunnedSequence(class UAnimSequence* StunnedSequence, bool* Result);
	void IsStunned(bool* Result);
	void SetVoiceAmplitude(float VoiceAmplitude, bool* Result);

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"CH_ShockBot_AnimBP_C">();
	}
	static class UCH_ShockBot_AnimBP_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<UCH_ShockBot_AnimBP_C>();
	}
};
static_assert(alignof(UCH_ShockBot_AnimBP_C) == 0x000010, "Wrong alignment on UCH_ShockBot_AnimBP_C");
static_assert(sizeof(UCH_ShockBot_AnimBP_C) == 0x001DE0, "Wrong size on UCH_ShockBot_AnimBP_C");
static_assert(offsetof(UCH_ShockBot_AnimBP_C, UberGraphFrame) == 0x0002C0, "Member 'UCH_ShockBot_AnimBP_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(UCH_ShockBot_AnimBP_C, AnimGraphNode_Root) == 0x0002C8, "Member 'UCH_ShockBot_AnimBP_C::AnimGraphNode_Root' has a wrong offset!");
static_assert(offsetof(UCH_ShockBot_AnimBP_C, AnimGraphNode_Slot_2) == 0x0002F8, "Member 'UCH_ShockBot_AnimBP_C::AnimGraphNode_Slot_2' has a wrong offset!");
static_assert(offsetof(UCH_ShockBot_AnimBP_C, AnimGraphNode_BlendListByBool_5) == 0x000340, "Member 'UCH_ShockBot_AnimBP_C::AnimGraphNode_BlendListByBool_5' has a wrong offset!");
static_assert(offsetof(UCH_ShockBot_AnimBP_C, AnimGraphNode_LayeredBoneBlend_1) == 0x0003E0, "Member 'UCH_ShockBot_AnimBP_C::AnimGraphNode_LayeredBoneBlend_1' has a wrong offset!");
static_assert(offsetof(UCH_ShockBot_AnimBP_C, AnimGraphNode_SaveCachedPose_2) == 0x0004A0, "Member 'UCH_ShockBot_AnimBP_C::AnimGraphNode_SaveCachedPose_2' has a wrong offset!");
static_assert(offsetof(UCH_ShockBot_AnimBP_C, AnimGraphNode_SequencePlayer_5) == 0x0005F8, "Member 'UCH_ShockBot_AnimBP_C::AnimGraphNode_SequencePlayer_5' has a wrong offset!");
static_assert(offsetof(UCH_ShockBot_AnimBP_C, AnimGraphNode_BlendListByBool_4) == 0x000678, "Member 'UCH_ShockBot_AnimBP_C::AnimGraphNode_BlendListByBool_4' has a wrong offset!");
static_assert(offsetof(UCH_ShockBot_AnimBP_C, AnimGraphNode_BlendListByBool_3) == 0x000718, "Member 'UCH_ShockBot_AnimBP_C::AnimGraphNode_BlendListByBool_3' has a wrong offset!");
static_assert(offsetof(UCH_ShockBot_AnimBP_C, AnimGraphNode_SequencePlayer_4) == 0x0007B8, "Member 'UCH_ShockBot_AnimBP_C::AnimGraphNode_SequencePlayer_4' has a wrong offset!");
static_assert(offsetof(UCH_ShockBot_AnimBP_C, AnimGraphNode_Slot_1) == 0x000838, "Member 'UCH_ShockBot_AnimBP_C::AnimGraphNode_Slot_1' has a wrong offset!");
static_assert(offsetof(UCH_ShockBot_AnimBP_C, AnimGraphNode_LayeredBoneBlend) == 0x000880, "Member 'UCH_ShockBot_AnimBP_C::AnimGraphNode_LayeredBoneBlend' has a wrong offset!");
static_assert(offsetof(UCH_ShockBot_AnimBP_C, AnimGraphNode_UseCachedPose_4) == 0x000940, "Member 'UCH_ShockBot_AnimBP_C::AnimGraphNode_UseCachedPose_4' has a wrong offset!");
static_assert(offsetof(UCH_ShockBot_AnimBP_C, AnimGraphNode_UseCachedPose_3) == 0x000968, "Member 'UCH_ShockBot_AnimBP_C::AnimGraphNode_UseCachedPose_3' has a wrong offset!");
static_assert(offsetof(UCH_ShockBot_AnimBP_C, AnimGraphNode_SaveCachedPose_1) == 0x000990, "Member 'UCH_ShockBot_AnimBP_C::AnimGraphNode_SaveCachedPose_1' has a wrong offset!");
static_assert(offsetof(UCH_ShockBot_AnimBP_C, AnimGraphNode_UseCachedPose_2) == 0x000AE8, "Member 'UCH_ShockBot_AnimBP_C::AnimGraphNode_UseCachedPose_2' has a wrong offset!");
static_assert(offsetof(UCH_ShockBot_AnimBP_C, AnimGraphNode_UseCachedPose_1) == 0x000B10, "Member 'UCH_ShockBot_AnimBP_C::AnimGraphNode_UseCachedPose_1' has a wrong offset!");
static_assert(offsetof(UCH_ShockBot_AnimBP_C, AnimGraphNode_BlendSpacePlayer_1) == 0x000B38, "Member 'UCH_ShockBot_AnimBP_C::AnimGraphNode_BlendSpacePlayer_1' has a wrong offset!");
static_assert(offsetof(UCH_ShockBot_AnimBP_C, AnimGraphNode_BlendListByBool_2) == 0x000C20, "Member 'UCH_ShockBot_AnimBP_C::AnimGraphNode_BlendListByBool_2' has a wrong offset!");
static_assert(offsetof(UCH_ShockBot_AnimBP_C, AnimGraphNode_TransitionResult_1) == 0x000CC0, "Member 'UCH_ShockBot_AnimBP_C::AnimGraphNode_TransitionResult_1' has a wrong offset!");
static_assert(offsetof(UCH_ShockBot_AnimBP_C, AnimGraphNode_TransitionResult) == 0x000CE8, "Member 'UCH_ShockBot_AnimBP_C::AnimGraphNode_TransitionResult' has a wrong offset!");
static_assert(offsetof(UCH_ShockBot_AnimBP_C, AnimGraphNode_BlendSpacePlayer) == 0x000D10, "Member 'UCH_ShockBot_AnimBP_C::AnimGraphNode_BlendSpacePlayer' has a wrong offset!");
static_assert(offsetof(UCH_ShockBot_AnimBP_C, AnimGraphNode_StateResult_1) == 0x000DF8, "Member 'UCH_ShockBot_AnimBP_C::AnimGraphNode_StateResult_1' has a wrong offset!");
static_assert(offsetof(UCH_ShockBot_AnimBP_C, AnimGraphNode_SequencePlayer_3) == 0x000E28, "Member 'UCH_ShockBot_AnimBP_C::AnimGraphNode_SequencePlayer_3' has a wrong offset!");
static_assert(offsetof(UCH_ShockBot_AnimBP_C, AnimGraphNode_StateResult) == 0x000EA8, "Member 'UCH_ShockBot_AnimBP_C::AnimGraphNode_StateResult' has a wrong offset!");
static_assert(offsetof(UCH_ShockBot_AnimBP_C, AnimGraphNode_StateMachine) == 0x000ED8, "Member 'UCH_ShockBot_AnimBP_C::AnimGraphNode_StateMachine' has a wrong offset!");
static_assert(offsetof(UCH_ShockBot_AnimBP_C, AnimGraphNode_Slot) == 0x000F88, "Member 'UCH_ShockBot_AnimBP_C::AnimGraphNode_Slot' has a wrong offset!");
static_assert(offsetof(UCH_ShockBot_AnimBP_C, AnimGraphNode_ComponentToLocalSpace_1) == 0x000FD0, "Member 'UCH_ShockBot_AnimBP_C::AnimGraphNode_ComponentToLocalSpace_1' has a wrong offset!");
static_assert(offsetof(UCH_ShockBot_AnimBP_C, AnimGraphNode_Fabrik) == 0x000FF0, "Member 'UCH_ShockBot_AnimBP_C::AnimGraphNode_Fabrik' has a wrong offset!");
static_assert(offsetof(UCH_ShockBot_AnimBP_C, AnimGraphNode_PoseSnapshot) == 0x001180, "Member 'UCH_ShockBot_AnimBP_C::AnimGraphNode_PoseSnapshot' has a wrong offset!");
static_assert(offsetof(UCH_ShockBot_AnimBP_C, AnimGraphNode_BlendListByBool_1) == 0x001210, "Member 'UCH_ShockBot_AnimBP_C::AnimGraphNode_BlendListByBool_1' has a wrong offset!");
static_assert(offsetof(UCH_ShockBot_AnimBP_C, AnimGraphNode_SequencePlayer_2) == 0x0012B0, "Member 'UCH_ShockBot_AnimBP_C::AnimGraphNode_SequencePlayer_2' has a wrong offset!");
static_assert(offsetof(UCH_ShockBot_AnimBP_C, AnimGraphNode_SequencePlayer_1) == 0x001330, "Member 'UCH_ShockBot_AnimBP_C::AnimGraphNode_SequencePlayer_1' has a wrong offset!");
static_assert(offsetof(UCH_ShockBot_AnimBP_C, AnimGraphNode_LocalToComponentSpace_1) == 0x0013B0, "Member 'UCH_ShockBot_AnimBP_C::AnimGraphNode_LocalToComponentSpace_1' has a wrong offset!");
static_assert(offsetof(UCH_ShockBot_AnimBP_C, AnimGraphNode_CopyBone_3) == 0x0013D0, "Member 'UCH_ShockBot_AnimBP_C::AnimGraphNode_CopyBone_3' has a wrong offset!");
static_assert(offsetof(UCH_ShockBot_AnimBP_C, AnimGraphNode_SaveCachedPose) == 0x0014C0, "Member 'UCH_ShockBot_AnimBP_C::AnimGraphNode_SaveCachedPose' has a wrong offset!");
static_assert(offsetof(UCH_ShockBot_AnimBP_C, AnimGraphNode_UseCachedPose) == 0x001618, "Member 'UCH_ShockBot_AnimBP_C::AnimGraphNode_UseCachedPose' has a wrong offset!");
static_assert(offsetof(UCH_ShockBot_AnimBP_C, AnimGraphNode_BlendBoneByChannel) == 0x001640, "Member 'UCH_ShockBot_AnimBP_C::AnimGraphNode_BlendBoneByChannel' has a wrong offset!");
static_assert(offsetof(UCH_ShockBot_AnimBP_C, AnimGraphNode_LocalToComponentSpace) == 0x0016A8, "Member 'UCH_ShockBot_AnimBP_C::AnimGraphNode_LocalToComponentSpace' has a wrong offset!");
static_assert(offsetof(UCH_ShockBot_AnimBP_C, AnimGraphNode_ComponentToLocalSpace) == 0x0016C8, "Member 'UCH_ShockBot_AnimBP_C::AnimGraphNode_ComponentToLocalSpace' has a wrong offset!");
static_assert(offsetof(UCH_ShockBot_AnimBP_C, AnimGraphNode_CCDIK) == 0x0016F0, "Member 'UCH_ShockBot_AnimBP_C::AnimGraphNode_CCDIK' has a wrong offset!");
static_assert(offsetof(UCH_ShockBot_AnimBP_C, AnimGraphNode_RotationMultiplier) == 0x001870, "Member 'UCH_ShockBot_AnimBP_C::AnimGraphNode_RotationMultiplier' has a wrong offset!");
static_assert(offsetof(UCH_ShockBot_AnimBP_C, AnimGraphNode_CopyBone_2) == 0x001960, "Member 'UCH_ShockBot_AnimBP_C::AnimGraphNode_CopyBone_2' has a wrong offset!");
static_assert(offsetof(UCH_ShockBot_AnimBP_C, AnimGraphNode_CopyBone_1) == 0x001A50, "Member 'UCH_ShockBot_AnimBP_C::AnimGraphNode_CopyBone_1' has a wrong offset!");
static_assert(offsetof(UCH_ShockBot_AnimBP_C, AnimGraphNode_CopyBone) == 0x001B40, "Member 'UCH_ShockBot_AnimBP_C::AnimGraphNode_CopyBone' has a wrong offset!");
static_assert(offsetof(UCH_ShockBot_AnimBP_C, AnimGraphNode_BlendListByBool) == 0x001C30, "Member 'UCH_ShockBot_AnimBP_C::AnimGraphNode_BlendListByBool' has a wrong offset!");
static_assert(offsetof(UCH_ShockBot_AnimBP_C, AnimGraphNode_SequencePlayer) == 0x001CD0, "Member 'UCH_ShockBot_AnimBP_C::AnimGraphNode_SequencePlayer' has a wrong offset!");
static_assert(offsetof(UCH_ShockBot_AnimBP_C, IsCatatonic) == 0x001D50, "Member 'UCH_ShockBot_AnimBP_C::IsCatatonic' has a wrong offset!");
static_assert(offsetof(UCH_ShockBot_AnimBP_C, MovementSpeed) == 0x001D54, "Member 'UCH_ShockBot_AnimBP_C::MovementSpeed' has a wrong offset!");
static_assert(offsetof(UCH_ShockBot_AnimBP_C, MovementAngle) == 0x001D58, "Member 'UCH_ShockBot_AnimBP_C::MovementAngle' has a wrong offset!");
static_assert(offsetof(UCH_ShockBot_AnimBP_C, IsAlive) == 0x001D5C, "Member 'UCH_ShockBot_AnimBP_C::IsAlive' has a wrong offset!");
static_assert(offsetof(UCH_ShockBot_AnimBP_C, IdleOverride) == 0x001D60, "Member 'UCH_ShockBot_AnimBP_C::IdleOverride' has a wrong offset!");
static_assert(offsetof(UCH_ShockBot_AnimBP_C, UseIdleOverride) == 0x001D68, "Member 'UCH_ShockBot_AnimBP_C::UseIdleOverride' has a wrong offset!");
static_assert(offsetof(UCH_ShockBot_AnimBP_C, IsMoving) == 0x001D69, "Member 'UCH_ShockBot_AnimBP_C::IsMoving' has a wrong offset!");
static_assert(offsetof(UCH_ShockBot_AnimBP_C, AimTarget) == 0x001D70, "Member 'UCH_ShockBot_AnimBP_C::AimTarget' has a wrong offset!");
static_assert(offsetof(UCH_ShockBot_AnimBP_C, CurrentAimAlpha) == 0x001D78, "Member 'UCH_ShockBot_AnimBP_C::CurrentAimAlpha' has a wrong offset!");
static_assert(offsetof(UCH_ShockBot_AnimBP_C, AimTargetTransform) == 0x001D80, "Member 'UCH_ShockBot_AnimBP_C::AimTargetTransform' has a wrong offset!");
static_assert(offsetof(UCH_ShockBot_AnimBP_C, IsFlying) == 0x001DB0, "Member 'UCH_ShockBot_AnimBP_C::IsFlying' has a wrong offset!");
static_assert(offsetof(UCH_ShockBot_AnimBP_C, StunnedAnimSequence) == 0x001DB8, "Member 'UCH_ShockBot_AnimBP_C::StunnedAnimSequence' has a wrong offset!");
static_assert(offsetof(UCH_ShockBot_AnimBP_C, UseStunnedSequence) == 0x001DC0, "Member 'UCH_ShockBot_AnimBP_C::UseStunnedSequence' has a wrong offset!");
static_assert(offsetof(UCH_ShockBot_AnimBP_C, TurnTarget) == 0x001DC4, "Member 'UCH_ShockBot_AnimBP_C::TurnTarget' has a wrong offset!");
static_assert(offsetof(UCH_ShockBot_AnimBP_C, TurnTargetError) == 0x001DC8, "Member 'UCH_ShockBot_AnimBP_C::TurnTargetError' has a wrong offset!");
static_assert(offsetof(UCH_ShockBot_AnimBP_C, TurnDelta) == 0x001DCC, "Member 'UCH_ShockBot_AnimBP_C::TurnDelta' has a wrong offset!");
static_assert(offsetof(UCH_ShockBot_AnimBP_C, TurnDeltaCached) == 0x001DD0, "Member 'UCH_ShockBot_AnimBP_C::TurnDeltaCached' has a wrong offset!");
static_assert(offsetof(UCH_ShockBot_AnimBP_C, TurnTargetChached) == 0x001DD4, "Member 'UCH_ShockBot_AnimBP_C::TurnTargetChached' has a wrong offset!");
static_assert(offsetof(UCH_ShockBot_AnimBP_C, CanTurn) == 0x001DD8, "Member 'UCH_ShockBot_AnimBP_C::CanTurn' has a wrong offset!");

}

