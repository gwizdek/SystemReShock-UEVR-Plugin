#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BulletProjectile_MagnumRound

#include "Basic.hpp"

#include "CoreUObject_structs.hpp"
#include "Engine_structs.hpp"


namespace SDK::Params
{

// Function BulletProjectile_MagnumRound.BulletProjectile_MagnumRound_C.AcquireTarget
// 0x0010 (0x0010 - 0x0000)
struct BulletProjectile_MagnumRound_C_AcquireTarget final
{
public:
	class AActor*                                 Actor;                                             // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         BonusDamage;                                       // 0x0008(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         BonusArmorPenetration;                             // 0x000C(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BulletProjectile_MagnumRound_C_AcquireTarget) == 0x000008, "Wrong alignment on BulletProjectile_MagnumRound_C_AcquireTarget");
static_assert(sizeof(BulletProjectile_MagnumRound_C_AcquireTarget) == 0x000010, "Wrong size on BulletProjectile_MagnumRound_C_AcquireTarget");
static_assert(offsetof(BulletProjectile_MagnumRound_C_AcquireTarget, Actor) == 0x000000, "Member 'BulletProjectile_MagnumRound_C_AcquireTarget::Actor' has a wrong offset!");
static_assert(offsetof(BulletProjectile_MagnumRound_C_AcquireTarget, BonusDamage) == 0x000008, "Member 'BulletProjectile_MagnumRound_C_AcquireTarget::BonusDamage' has a wrong offset!");
static_assert(offsetof(BulletProjectile_MagnumRound_C_AcquireTarget, BonusArmorPenetration) == 0x00000C, "Member 'BulletProjectile_MagnumRound_C_AcquireTarget::BonusArmorPenetration' has a wrong offset!");

// Function BulletProjectile_MagnumRound.BulletProjectile_MagnumRound_C.TryBulletCollision
// 0x0110 (0x0110 - 0x0000)
struct BulletProjectile_MagnumRound_C_TryBulletCollision final
{
public:
	struct FHitResult                             Hit;                                               // 0x0000(0x0088)(BlueprintVisible, BlueprintReadOnly, Parm, IsPlainOldData, NoDestructor, ContainsInstancedReference)
	float                                         FrameHitDeltaTime;                                 // 0x0088(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Result;                                            // 0x008C(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BreakHitResult_bBlockingHit;              // 0x008D(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BreakHitResult_bInitialOverlap;           // 0x008E(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_8F[0x1];                                       // 0x008F(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_BreakHitResult_Time;                      // 0x0090(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakHitResult_Distance;                  // 0x0094(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakHitResult_Location;                  // 0x0098(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakHitResult_ImpactPoint;               // 0x00A4(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakHitResult_Normal;                    // 0x00B0(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakHitResult_ImpactNormal;              // 0x00BC(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UPhysicalMaterial*                      CallFunc_BreakHitResult_PhysMat;                   // 0x00C8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 CallFunc_BreakHitResult_HitActor;                  // 0x00D0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UPrimitiveComponent*                    CallFunc_BreakHitResult_HitComponent;              // 0x00D8(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FName                                   CallFunc_BreakHitResult_HitBoneName;               // 0x00E0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_BreakHitResult_HitItem;                   // 0x00E8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_BreakHitResult_ElementIndex;              // 0x00EC(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_BreakHitResult_FaceIndex;                 // 0x00F0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakHitResult_TraceStart;                // 0x00F4(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakHitResult_TraceEnd;                  // 0x0100(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_TryBulletCollision_Result;                // 0x010C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BulletProjectile_MagnumRound_C_TryBulletCollision) == 0x000008, "Wrong alignment on BulletProjectile_MagnumRound_C_TryBulletCollision");
static_assert(sizeof(BulletProjectile_MagnumRound_C_TryBulletCollision) == 0x000110, "Wrong size on BulletProjectile_MagnumRound_C_TryBulletCollision");
static_assert(offsetof(BulletProjectile_MagnumRound_C_TryBulletCollision, Hit) == 0x000000, "Member 'BulletProjectile_MagnumRound_C_TryBulletCollision::Hit' has a wrong offset!");
static_assert(offsetof(BulletProjectile_MagnumRound_C_TryBulletCollision, FrameHitDeltaTime) == 0x000088, "Member 'BulletProjectile_MagnumRound_C_TryBulletCollision::FrameHitDeltaTime' has a wrong offset!");
static_assert(offsetof(BulletProjectile_MagnumRound_C_TryBulletCollision, Result) == 0x00008C, "Member 'BulletProjectile_MagnumRound_C_TryBulletCollision::Result' has a wrong offset!");
static_assert(offsetof(BulletProjectile_MagnumRound_C_TryBulletCollision, CallFunc_BreakHitResult_bBlockingHit) == 0x00008D, "Member 'BulletProjectile_MagnumRound_C_TryBulletCollision::CallFunc_BreakHitResult_bBlockingHit' has a wrong offset!");
static_assert(offsetof(BulletProjectile_MagnumRound_C_TryBulletCollision, CallFunc_BreakHitResult_bInitialOverlap) == 0x00008E, "Member 'BulletProjectile_MagnumRound_C_TryBulletCollision::CallFunc_BreakHitResult_bInitialOverlap' has a wrong offset!");
static_assert(offsetof(BulletProjectile_MagnumRound_C_TryBulletCollision, CallFunc_BreakHitResult_Time) == 0x000090, "Member 'BulletProjectile_MagnumRound_C_TryBulletCollision::CallFunc_BreakHitResult_Time' has a wrong offset!");
static_assert(offsetof(BulletProjectile_MagnumRound_C_TryBulletCollision, CallFunc_BreakHitResult_Distance) == 0x000094, "Member 'BulletProjectile_MagnumRound_C_TryBulletCollision::CallFunc_BreakHitResult_Distance' has a wrong offset!");
static_assert(offsetof(BulletProjectile_MagnumRound_C_TryBulletCollision, CallFunc_BreakHitResult_Location) == 0x000098, "Member 'BulletProjectile_MagnumRound_C_TryBulletCollision::CallFunc_BreakHitResult_Location' has a wrong offset!");
static_assert(offsetof(BulletProjectile_MagnumRound_C_TryBulletCollision, CallFunc_BreakHitResult_ImpactPoint) == 0x0000A4, "Member 'BulletProjectile_MagnumRound_C_TryBulletCollision::CallFunc_BreakHitResult_ImpactPoint' has a wrong offset!");
static_assert(offsetof(BulletProjectile_MagnumRound_C_TryBulletCollision, CallFunc_BreakHitResult_Normal) == 0x0000B0, "Member 'BulletProjectile_MagnumRound_C_TryBulletCollision::CallFunc_BreakHitResult_Normal' has a wrong offset!");
static_assert(offsetof(BulletProjectile_MagnumRound_C_TryBulletCollision, CallFunc_BreakHitResult_ImpactNormal) == 0x0000BC, "Member 'BulletProjectile_MagnumRound_C_TryBulletCollision::CallFunc_BreakHitResult_ImpactNormal' has a wrong offset!");
static_assert(offsetof(BulletProjectile_MagnumRound_C_TryBulletCollision, CallFunc_BreakHitResult_PhysMat) == 0x0000C8, "Member 'BulletProjectile_MagnumRound_C_TryBulletCollision::CallFunc_BreakHitResult_PhysMat' has a wrong offset!");
static_assert(offsetof(BulletProjectile_MagnumRound_C_TryBulletCollision, CallFunc_BreakHitResult_HitActor) == 0x0000D0, "Member 'BulletProjectile_MagnumRound_C_TryBulletCollision::CallFunc_BreakHitResult_HitActor' has a wrong offset!");
static_assert(offsetof(BulletProjectile_MagnumRound_C_TryBulletCollision, CallFunc_BreakHitResult_HitComponent) == 0x0000D8, "Member 'BulletProjectile_MagnumRound_C_TryBulletCollision::CallFunc_BreakHitResult_HitComponent' has a wrong offset!");
static_assert(offsetof(BulletProjectile_MagnumRound_C_TryBulletCollision, CallFunc_BreakHitResult_HitBoneName) == 0x0000E0, "Member 'BulletProjectile_MagnumRound_C_TryBulletCollision::CallFunc_BreakHitResult_HitBoneName' has a wrong offset!");
static_assert(offsetof(BulletProjectile_MagnumRound_C_TryBulletCollision, CallFunc_BreakHitResult_HitItem) == 0x0000E8, "Member 'BulletProjectile_MagnumRound_C_TryBulletCollision::CallFunc_BreakHitResult_HitItem' has a wrong offset!");
static_assert(offsetof(BulletProjectile_MagnumRound_C_TryBulletCollision, CallFunc_BreakHitResult_ElementIndex) == 0x0000EC, "Member 'BulletProjectile_MagnumRound_C_TryBulletCollision::CallFunc_BreakHitResult_ElementIndex' has a wrong offset!");
static_assert(offsetof(BulletProjectile_MagnumRound_C_TryBulletCollision, CallFunc_BreakHitResult_FaceIndex) == 0x0000F0, "Member 'BulletProjectile_MagnumRound_C_TryBulletCollision::CallFunc_BreakHitResult_FaceIndex' has a wrong offset!");
static_assert(offsetof(BulletProjectile_MagnumRound_C_TryBulletCollision, CallFunc_BreakHitResult_TraceStart) == 0x0000F4, "Member 'BulletProjectile_MagnumRound_C_TryBulletCollision::CallFunc_BreakHitResult_TraceStart' has a wrong offset!");
static_assert(offsetof(BulletProjectile_MagnumRound_C_TryBulletCollision, CallFunc_BreakHitResult_TraceEnd) == 0x000100, "Member 'BulletProjectile_MagnumRound_C_TryBulletCollision::CallFunc_BreakHitResult_TraceEnd' has a wrong offset!");
static_assert(offsetof(BulletProjectile_MagnumRound_C_TryBulletCollision, CallFunc_TryBulletCollision_Result) == 0x00010C, "Member 'BulletProjectile_MagnumRound_C_TryBulletCollision::CallFunc_TryBulletCollision_Result' has a wrong offset!");

// Function BulletProjectile_MagnumRound.BulletProjectile_MagnumRound_C.TryApplyTargetDamageBonus
// 0x0028 (0x0028 - 0x0000)
struct BulletProjectile_MagnumRound_C_TryApplyTargetDamageBonus final
{
public:
	class AActor*                                 HitActor;                                          // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0008(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_GetBaseBulletArmorPenetration_Result;     // 0x000C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue;                   // 0x0010(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_GetBaseBulletDamage_Result;               // 0x0014(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Conv_IntToFloat_ReturnValue;              // 0x0018(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Add_FloatFloat_ReturnValue;               // 0x001C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_ObjectObject_ReturnValue;      // 0x0020(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BulletProjectile_MagnumRound_C_TryApplyTargetDamageBonus) == 0x000008, "Wrong alignment on BulletProjectile_MagnumRound_C_TryApplyTargetDamageBonus");
static_assert(sizeof(BulletProjectile_MagnumRound_C_TryApplyTargetDamageBonus) == 0x000028, "Wrong size on BulletProjectile_MagnumRound_C_TryApplyTargetDamageBonus");
static_assert(offsetof(BulletProjectile_MagnumRound_C_TryApplyTargetDamageBonus, HitActor) == 0x000000, "Member 'BulletProjectile_MagnumRound_C_TryApplyTargetDamageBonus::HitActor' has a wrong offset!");
static_assert(offsetof(BulletProjectile_MagnumRound_C_TryApplyTargetDamageBonus, CallFunc_IsValid_ReturnValue) == 0x000008, "Member 'BulletProjectile_MagnumRound_C_TryApplyTargetDamageBonus::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(BulletProjectile_MagnumRound_C_TryApplyTargetDamageBonus, CallFunc_GetBaseBulletArmorPenetration_Result) == 0x00000C, "Member 'BulletProjectile_MagnumRound_C_TryApplyTargetDamageBonus::CallFunc_GetBaseBulletArmorPenetration_Result' has a wrong offset!");
static_assert(offsetof(BulletProjectile_MagnumRound_C_TryApplyTargetDamageBonus, CallFunc_Add_IntInt_ReturnValue) == 0x000010, "Member 'BulletProjectile_MagnumRound_C_TryApplyTargetDamageBonus::CallFunc_Add_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BulletProjectile_MagnumRound_C_TryApplyTargetDamageBonus, CallFunc_GetBaseBulletDamage_Result) == 0x000014, "Member 'BulletProjectile_MagnumRound_C_TryApplyTargetDamageBonus::CallFunc_GetBaseBulletDamage_Result' has a wrong offset!");
static_assert(offsetof(BulletProjectile_MagnumRound_C_TryApplyTargetDamageBonus, CallFunc_Conv_IntToFloat_ReturnValue) == 0x000018, "Member 'BulletProjectile_MagnumRound_C_TryApplyTargetDamageBonus::CallFunc_Conv_IntToFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(BulletProjectile_MagnumRound_C_TryApplyTargetDamageBonus, CallFunc_Add_FloatFloat_ReturnValue) == 0x00001C, "Member 'BulletProjectile_MagnumRound_C_TryApplyTargetDamageBonus::CallFunc_Add_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(BulletProjectile_MagnumRound_C_TryApplyTargetDamageBonus, CallFunc_EqualEqual_ObjectObject_ReturnValue) == 0x000020, "Member 'BulletProjectile_MagnumRound_C_TryApplyTargetDamageBonus::CallFunc_EqualEqual_ObjectObject_ReturnValue' has a wrong offset!");

// Function BulletProjectile_MagnumRound.BulletProjectile_MagnumRound_C.SpawnTracerEffects
// 0x0008 (0x0008 - 0x0000)
struct BulletProjectile_MagnumRound_C_SpawnTracerEffects final
{
public:
	class UNiagaraSystem*                         TracerSystem;                                      // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BulletProjectile_MagnumRound_C_SpawnTracerEffects) == 0x000008, "Wrong alignment on BulletProjectile_MagnumRound_C_SpawnTracerEffects");
static_assert(sizeof(BulletProjectile_MagnumRound_C_SpawnTracerEffects) == 0x000008, "Wrong size on BulletProjectile_MagnumRound_C_SpawnTracerEffects");
static_assert(offsetof(BulletProjectile_MagnumRound_C_SpawnTracerEffects, TracerSystem) == 0x000000, "Member 'BulletProjectile_MagnumRound_C_SpawnTracerEffects::TracerSystem' has a wrong offset!");

// Function BulletProjectile_MagnumRound.BulletProjectile_MagnumRound_C.TryUpdateTracerColor
// 0x0038 (0x0038 - 0x0000)
struct BulletProjectile_MagnumRound_C_TryUpdateTracerColor final
{
public:
	bool                                          Temp_bool_Variable;                                // 0x0000(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FLinearColor                           Temp_struct_Variable;                              // 0x0004(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           Temp_struct_Variable_1;                            // 0x0014(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Greater_IntInt_ReturnValue;               // 0x0024(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0025(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_26[0x2];                                       // 0x0026(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	struct FLinearColor                           K2Node_Select_Default;                             // 0x0028(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BulletProjectile_MagnumRound_C_TryUpdateTracerColor) == 0x000004, "Wrong alignment on BulletProjectile_MagnumRound_C_TryUpdateTracerColor");
static_assert(sizeof(BulletProjectile_MagnumRound_C_TryUpdateTracerColor) == 0x000038, "Wrong size on BulletProjectile_MagnumRound_C_TryUpdateTracerColor");
static_assert(offsetof(BulletProjectile_MagnumRound_C_TryUpdateTracerColor, Temp_bool_Variable) == 0x000000, "Member 'BulletProjectile_MagnumRound_C_TryUpdateTracerColor::Temp_bool_Variable' has a wrong offset!");
static_assert(offsetof(BulletProjectile_MagnumRound_C_TryUpdateTracerColor, Temp_struct_Variable) == 0x000004, "Member 'BulletProjectile_MagnumRound_C_TryUpdateTracerColor::Temp_struct_Variable' has a wrong offset!");
static_assert(offsetof(BulletProjectile_MagnumRound_C_TryUpdateTracerColor, Temp_struct_Variable_1) == 0x000014, "Member 'BulletProjectile_MagnumRound_C_TryUpdateTracerColor::Temp_struct_Variable_1' has a wrong offset!");
static_assert(offsetof(BulletProjectile_MagnumRound_C_TryUpdateTracerColor, CallFunc_Greater_IntInt_ReturnValue) == 0x000024, "Member 'BulletProjectile_MagnumRound_C_TryUpdateTracerColor::CallFunc_Greater_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BulletProjectile_MagnumRound_C_TryUpdateTracerColor, CallFunc_IsValid_ReturnValue) == 0x000025, "Member 'BulletProjectile_MagnumRound_C_TryUpdateTracerColor::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(BulletProjectile_MagnumRound_C_TryUpdateTracerColor, K2Node_Select_Default) == 0x000028, "Member 'BulletProjectile_MagnumRound_C_TryUpdateTracerColor::K2Node_Select_Default' has a wrong offset!");

// Function BulletProjectile_MagnumRound.BulletProjectile_MagnumRound_C.GetBulletDamageDropoffRate
// 0x0024 (0x0024 - 0x0000)
struct BulletProjectile_MagnumRound_C_GetBulletDamageDropoffRate final
{
public:
	float                                         Result;                                            // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Variable;                                // 0x0004(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         Temp_float_Variable;                               // 0x0008(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Temp_float_Variable_1;                             // 0x000C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0010(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_11[0x3];                                       // 0x0011(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_GetBulletDamageDropoffRate_Result;        // 0x0014(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Multiply_FloatFloat_ReturnValue;          // 0x0018(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         K2Node_Select_Default;                             // 0x001C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Multiply_FloatFloat_ReturnValue_1;        // 0x0020(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BulletProjectile_MagnumRound_C_GetBulletDamageDropoffRate) == 0x000004, "Wrong alignment on BulletProjectile_MagnumRound_C_GetBulletDamageDropoffRate");
static_assert(sizeof(BulletProjectile_MagnumRound_C_GetBulletDamageDropoffRate) == 0x000024, "Wrong size on BulletProjectile_MagnumRound_C_GetBulletDamageDropoffRate");
static_assert(offsetof(BulletProjectile_MagnumRound_C_GetBulletDamageDropoffRate, Result) == 0x000000, "Member 'BulletProjectile_MagnumRound_C_GetBulletDamageDropoffRate::Result' has a wrong offset!");
static_assert(offsetof(BulletProjectile_MagnumRound_C_GetBulletDamageDropoffRate, Temp_bool_Variable) == 0x000004, "Member 'BulletProjectile_MagnumRound_C_GetBulletDamageDropoffRate::Temp_bool_Variable' has a wrong offset!");
static_assert(offsetof(BulletProjectile_MagnumRound_C_GetBulletDamageDropoffRate, Temp_float_Variable) == 0x000008, "Member 'BulletProjectile_MagnumRound_C_GetBulletDamageDropoffRate::Temp_float_Variable' has a wrong offset!");
static_assert(offsetof(BulletProjectile_MagnumRound_C_GetBulletDamageDropoffRate, Temp_float_Variable_1) == 0x00000C, "Member 'BulletProjectile_MagnumRound_C_GetBulletDamageDropoffRate::Temp_float_Variable_1' has a wrong offset!");
static_assert(offsetof(BulletProjectile_MagnumRound_C_GetBulletDamageDropoffRate, CallFunc_IsValid_ReturnValue) == 0x000010, "Member 'BulletProjectile_MagnumRound_C_GetBulletDamageDropoffRate::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(BulletProjectile_MagnumRound_C_GetBulletDamageDropoffRate, CallFunc_GetBulletDamageDropoffRate_Result) == 0x000014, "Member 'BulletProjectile_MagnumRound_C_GetBulletDamageDropoffRate::CallFunc_GetBulletDamageDropoffRate_Result' has a wrong offset!");
static_assert(offsetof(BulletProjectile_MagnumRound_C_GetBulletDamageDropoffRate, CallFunc_Multiply_FloatFloat_ReturnValue) == 0x000018, "Member 'BulletProjectile_MagnumRound_C_GetBulletDamageDropoffRate::CallFunc_Multiply_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(BulletProjectile_MagnumRound_C_GetBulletDamageDropoffRate, K2Node_Select_Default) == 0x00001C, "Member 'BulletProjectile_MagnumRound_C_GetBulletDamageDropoffRate::K2Node_Select_Default' has a wrong offset!");
static_assert(offsetof(BulletProjectile_MagnumRound_C_GetBulletDamageDropoffRate, CallFunc_Multiply_FloatFloat_ReturnValue_1) == 0x000020, "Member 'BulletProjectile_MagnumRound_C_GetBulletDamageDropoffRate::CallFunc_Multiply_FloatFloat_ReturnValue_1' has a wrong offset!");

// Function BulletProjectile_MagnumRound.BulletProjectile_MagnumRound_C.SetDamageDropoffScale
// 0x0004 (0x0004 - 0x0000)
struct BulletProjectile_MagnumRound_C_SetDamageDropoffScale final
{
public:
	float                                         Scale;                                             // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BulletProjectile_MagnumRound_C_SetDamageDropoffScale) == 0x000004, "Wrong alignment on BulletProjectile_MagnumRound_C_SetDamageDropoffScale");
static_assert(sizeof(BulletProjectile_MagnumRound_C_SetDamageDropoffScale) == 0x000004, "Wrong size on BulletProjectile_MagnumRound_C_SetDamageDropoffScale");
static_assert(offsetof(BulletProjectile_MagnumRound_C_SetDamageDropoffScale, Scale) == 0x000000, "Member 'BulletProjectile_MagnumRound_C_SetDamageDropoffScale::Scale' has a wrong offset!");

}

