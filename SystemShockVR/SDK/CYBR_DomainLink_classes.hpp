#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: CYBR_DomainLink

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "CYBR_InteractBase_classes.hpp"


namespace SDK
{

// BlueprintGeneratedClass CYBR_DomainLink.CYBR_DomainLink_C
// 0x0088 (0x02C0 - 0x0238)
class ACYBR_DomainLink_C final : public ACYBR_InteractBase_C
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame_CYBR_DomainLink_C;                  // 0x0238(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	class USplineComponent*                       LinkPath;                                          // 0x0240(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UBoxComponent*                          OverlapBox_Exit_Outer;                             // 0x0248(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UBoxComponent*                          OverlapBox_Entrance_Outer;                         // 0x0250(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UBillboardComponent*                    Billboard;                                         // 0x0258(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USceneComponent*                        SceneRoot;                                         // 0x0260(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UBoxComponent*                          OverlapBox_Entrance_Inner;                         // 0x0268(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UNiagaraComponent*                      DomainLinkFX;                                      // 0x0270(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UBoxComponent*                          OverlapBox_Exit_Inner;                             // 0x0278(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class APAWN_Avatar_C*                         PlayerAvatar;                                      // 0x0280(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FDataTableRowHandle                    RegionHandle;                                      // 0x0288(0x0010)(Edit, BlueprintVisible, NoDestructor)
	float                                         SpeedScale;                                        // 0x0298(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         AccelerationTime;                                  // 0x029C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CanReverse;                                        // 0x02A0(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_2A1[0x7];                                      // 0x02A1(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UAudioComponent*                        LoopAudioComponent;                                // 0x02A8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TArray<class ACYBR_InteractBase_C*>           ToggleInteractablesOnExit;                         // 0x02B0(0x0010)(Edit, BlueprintVisible, DisableEditOnTemplate)

public:
	void ExecuteUbergraph_CYBR_DomainLink(int32 EntryPoint);
	void ReceiveBeginPlay();
	void BndEvt__OverlapBox_Entrance_Outer_K2Node_ComponentBoundEvent_1_ComponentEndOverlapSignature__DelegateSignature(class UPrimitiveComponent* OverlappedComponent, class AActor* OtherActor, class UPrimitiveComponent* OtherComp, int32 OtherBodyIndex);
	void BndEvt__OverlapBox_Entrance_Outer_K2Node_ComponentBoundEvent_0_ComponentBeginOverlapSignature__DelegateSignature(class UPrimitiveComponent* OverlappedComponent, class AActor* OtherActor, class UPrimitiveComponent* OtherComp, int32 OtherBodyIndex, bool bFromSweep, const struct FHitResult& SweepResult);
	void BndEvt__BoxVolume_Exit_K2Node_ComponentBoundEvent_10_ComponentEndOverlapSignature__DelegateSignature(class UPrimitiveComponent* OverlappedComponent, class AActor* OtherActor, class UPrimitiveComponent* OtherComp, int32 OtherBodyIndex);
	void BndEvt__BoxVolume_Exit_K2Node_ComponentBoundEvent_9_ComponentBeginOverlapSignature__DelegateSignature(class UPrimitiveComponent* OverlappedComponent, class AActor* OtherActor, class UPrimitiveComponent* OtherComp, int32 OtherBodyIndex, bool bFromSweep, const struct FHitResult& SweepResult);
	void InitializeDomainLink();
	void TryEnterLink(class APAWN_Avatar_C* Avatar, bool IsForward);
	void TryExitLink(class APAWN_Avatar_C* Avatar);
	void GetMaxAvatarFlySpeed(float DefaultSpeed, float* Result);
	void GetAvatarAcceleration(float DefaultSpeed, float* Result);
	void GetDomainLinkDirection(const struct FVector& PawnLocation, bool IsForward, struct FVector* Direction);
	void GetTargetLookDirection(const struct FVector& PawnLocation, float Distance, bool IsForward, struct FVector* LookDirection);
	void GetTargetRollVector(const struct FVector& PawnLocation, float Distance, bool IsForward, struct FVector* RollAxis);
	void GetDomainLinkMoveLocation(const struct FVector& PawnLocation, float PrevLinkDistance, float NextLinkDistance, struct FVector* ResultLocation);
	void GetLinkDistanceClosestToWorldLocation(const struct FVector& Location, float* Distance);
	void GetSquareDistanceToPawn(class APAWN_SystemShockCharacter_C* Pawn, float* Result);

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"CYBR_DomainLink_C">();
	}
	static class ACYBR_DomainLink_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<ACYBR_DomainLink_C>();
	}
};
static_assert(alignof(ACYBR_DomainLink_C) == 0x000008, "Wrong alignment on ACYBR_DomainLink_C");
static_assert(sizeof(ACYBR_DomainLink_C) == 0x0002C0, "Wrong size on ACYBR_DomainLink_C");
static_assert(offsetof(ACYBR_DomainLink_C, UberGraphFrame_CYBR_DomainLink_C) == 0x000238, "Member 'ACYBR_DomainLink_C::UberGraphFrame_CYBR_DomainLink_C' has a wrong offset!");
static_assert(offsetof(ACYBR_DomainLink_C, LinkPath) == 0x000240, "Member 'ACYBR_DomainLink_C::LinkPath' has a wrong offset!");
static_assert(offsetof(ACYBR_DomainLink_C, OverlapBox_Exit_Outer) == 0x000248, "Member 'ACYBR_DomainLink_C::OverlapBox_Exit_Outer' has a wrong offset!");
static_assert(offsetof(ACYBR_DomainLink_C, OverlapBox_Entrance_Outer) == 0x000250, "Member 'ACYBR_DomainLink_C::OverlapBox_Entrance_Outer' has a wrong offset!");
static_assert(offsetof(ACYBR_DomainLink_C, Billboard) == 0x000258, "Member 'ACYBR_DomainLink_C::Billboard' has a wrong offset!");
static_assert(offsetof(ACYBR_DomainLink_C, SceneRoot) == 0x000260, "Member 'ACYBR_DomainLink_C::SceneRoot' has a wrong offset!");
static_assert(offsetof(ACYBR_DomainLink_C, OverlapBox_Entrance_Inner) == 0x000268, "Member 'ACYBR_DomainLink_C::OverlapBox_Entrance_Inner' has a wrong offset!");
static_assert(offsetof(ACYBR_DomainLink_C, DomainLinkFX) == 0x000270, "Member 'ACYBR_DomainLink_C::DomainLinkFX' has a wrong offset!");
static_assert(offsetof(ACYBR_DomainLink_C, OverlapBox_Exit_Inner) == 0x000278, "Member 'ACYBR_DomainLink_C::OverlapBox_Exit_Inner' has a wrong offset!");
static_assert(offsetof(ACYBR_DomainLink_C, PlayerAvatar) == 0x000280, "Member 'ACYBR_DomainLink_C::PlayerAvatar' has a wrong offset!");
static_assert(offsetof(ACYBR_DomainLink_C, RegionHandle) == 0x000288, "Member 'ACYBR_DomainLink_C::RegionHandle' has a wrong offset!");
static_assert(offsetof(ACYBR_DomainLink_C, SpeedScale) == 0x000298, "Member 'ACYBR_DomainLink_C::SpeedScale' has a wrong offset!");
static_assert(offsetof(ACYBR_DomainLink_C, AccelerationTime) == 0x00029C, "Member 'ACYBR_DomainLink_C::AccelerationTime' has a wrong offset!");
static_assert(offsetof(ACYBR_DomainLink_C, CanReverse) == 0x0002A0, "Member 'ACYBR_DomainLink_C::CanReverse' has a wrong offset!");
static_assert(offsetof(ACYBR_DomainLink_C, LoopAudioComponent) == 0x0002A8, "Member 'ACYBR_DomainLink_C::LoopAudioComponent' has a wrong offset!");
static_assert(offsetof(ACYBR_DomainLink_C, ToggleInteractablesOnExit) == 0x0002B0, "Member 'ACYBR_DomainLink_C::ToggleInteractablesOnExit' has a wrong offset!");

}

