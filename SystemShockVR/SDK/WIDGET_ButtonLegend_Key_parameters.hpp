#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: WIDGET_ButtonLegend_Key

#include "Basic.hpp"

#include "InputCore_structs.hpp"
#include "CoreUObject_structs.hpp"


namespace SDK::Params
{

// Function WIDGET_ButtonLegend_Key.WIDGET_ButtonLegend_Key_C.ExecuteUbergraph_WIDGET_ButtonLegend_Key
// 0x000C (0x000C - 0x0000)
struct WIDGET_ButtonLegend_Key_C_ExecuteUbergraph_WIDGET_ButtonLegend_Key final
{
public:
	int32                                         EntryPoint;                                        // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FColor                                 K2Node_Event_Color;                                // 0x0004(0x0004)(ConstParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_Event_IsDesignTime;                         // 0x0008(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(WIDGET_ButtonLegend_Key_C_ExecuteUbergraph_WIDGET_ButtonLegend_Key) == 0x000004, "Wrong alignment on WIDGET_ButtonLegend_Key_C_ExecuteUbergraph_WIDGET_ButtonLegend_Key");
static_assert(sizeof(WIDGET_ButtonLegend_Key_C_ExecuteUbergraph_WIDGET_ButtonLegend_Key) == 0x00000C, "Wrong size on WIDGET_ButtonLegend_Key_C_ExecuteUbergraph_WIDGET_ButtonLegend_Key");
static_assert(offsetof(WIDGET_ButtonLegend_Key_C_ExecuteUbergraph_WIDGET_ButtonLegend_Key, EntryPoint) == 0x000000, "Member 'WIDGET_ButtonLegend_Key_C_ExecuteUbergraph_WIDGET_ButtonLegend_Key::EntryPoint' has a wrong offset!");
static_assert(offsetof(WIDGET_ButtonLegend_Key_C_ExecuteUbergraph_WIDGET_ButtonLegend_Key, K2Node_Event_Color) == 0x000004, "Member 'WIDGET_ButtonLegend_Key_C_ExecuteUbergraph_WIDGET_ButtonLegend_Key::K2Node_Event_Color' has a wrong offset!");
static_assert(offsetof(WIDGET_ButtonLegend_Key_C_ExecuteUbergraph_WIDGET_ButtonLegend_Key, K2Node_Event_IsDesignTime) == 0x000008, "Member 'WIDGET_ButtonLegend_Key_C_ExecuteUbergraph_WIDGET_ButtonLegend_Key::K2Node_Event_IsDesignTime' has a wrong offset!");

// Function WIDGET_ButtonLegend_Key.WIDGET_ButtonLegend_Key_C.SetDecoratorColor
// 0x0004 (0x0004 - 0x0000)
struct WIDGET_ButtonLegend_Key_C_SetDecoratorColor final
{
public:
	struct FColor                                 Color;                                             // 0x0000(0x0004)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(WIDGET_ButtonLegend_Key_C_SetDecoratorColor) == 0x000004, "Wrong alignment on WIDGET_ButtonLegend_Key_C_SetDecoratorColor");
static_assert(sizeof(WIDGET_ButtonLegend_Key_C_SetDecoratorColor) == 0x000004, "Wrong size on WIDGET_ButtonLegend_Key_C_SetDecoratorColor");
static_assert(offsetof(WIDGET_ButtonLegend_Key_C_SetDecoratorColor, Color) == 0x000000, "Member 'WIDGET_ButtonLegend_Key_C_SetDecoratorColor::Color' has a wrong offset!");

// Function WIDGET_ButtonLegend_Key.WIDGET_ButtonLegend_Key_C.PreConstruct
// 0x0001 (0x0001 - 0x0000)
struct WIDGET_ButtonLegend_Key_C_PreConstruct final
{
public:
	bool                                          IsDesignTime;                                      // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(WIDGET_ButtonLegend_Key_C_PreConstruct) == 0x000001, "Wrong alignment on WIDGET_ButtonLegend_Key_C_PreConstruct");
static_assert(sizeof(WIDGET_ButtonLegend_Key_C_PreConstruct) == 0x000001, "Wrong size on WIDGET_ButtonLegend_Key_C_PreConstruct");
static_assert(offsetof(WIDGET_ButtonLegend_Key_C_PreConstruct, IsDesignTime) == 0x000000, "Member 'WIDGET_ButtonLegend_Key_C_PreConstruct::IsDesignTime' has a wrong offset!");

// Function WIDGET_ButtonLegend_Key.WIDGET_ButtonLegend_Key_C.InitializeLegendKey
// 0x0030 (0x0030 - 0x0000)
struct WIDGET_ButtonLegend_Key_C_InitializeLegendKey final
{
public:
	class ACON_Hacker_C*                          HackerController;                                  // 0x0000(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TDelegate<void(bool IsUsingGamepad)>          K2Node_CreateDelegate_OutputDelegate;              // 0x0008(0x0010)(ZeroConstructor, NoDestructor)
	class APlayerController*                      CallFunc_GetPlayerController_ReturnValue;          // 0x0018(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class ACON_Hacker_C*                          K2Node_DynamicCast_AsCON_Hacker;                   // 0x0020(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0028(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsUsingGamepad_Result;                    // 0x0029(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(WIDGET_ButtonLegend_Key_C_InitializeLegendKey) == 0x000008, "Wrong alignment on WIDGET_ButtonLegend_Key_C_InitializeLegendKey");
static_assert(sizeof(WIDGET_ButtonLegend_Key_C_InitializeLegendKey) == 0x000030, "Wrong size on WIDGET_ButtonLegend_Key_C_InitializeLegendKey");
static_assert(offsetof(WIDGET_ButtonLegend_Key_C_InitializeLegendKey, HackerController) == 0x000000, "Member 'WIDGET_ButtonLegend_Key_C_InitializeLegendKey::HackerController' has a wrong offset!");
static_assert(offsetof(WIDGET_ButtonLegend_Key_C_InitializeLegendKey, K2Node_CreateDelegate_OutputDelegate) == 0x000008, "Member 'WIDGET_ButtonLegend_Key_C_InitializeLegendKey::K2Node_CreateDelegate_OutputDelegate' has a wrong offset!");
static_assert(offsetof(WIDGET_ButtonLegend_Key_C_InitializeLegendKey, CallFunc_GetPlayerController_ReturnValue) == 0x000018, "Member 'WIDGET_ButtonLegend_Key_C_InitializeLegendKey::CallFunc_GetPlayerController_ReturnValue' has a wrong offset!");
static_assert(offsetof(WIDGET_ButtonLegend_Key_C_InitializeLegendKey, K2Node_DynamicCast_AsCON_Hacker) == 0x000020, "Member 'WIDGET_ButtonLegend_Key_C_InitializeLegendKey::K2Node_DynamicCast_AsCON_Hacker' has a wrong offset!");
static_assert(offsetof(WIDGET_ButtonLegend_Key_C_InitializeLegendKey, K2Node_DynamicCast_bSuccess) == 0x000028, "Member 'WIDGET_ButtonLegend_Key_C_InitializeLegendKey::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(WIDGET_ButtonLegend_Key_C_InitializeLegendKey, CallFunc_IsUsingGamepad_Result) == 0x000029, "Member 'WIDGET_ButtonLegend_Key_C_InitializeLegendKey::CallFunc_IsUsingGamepad_Result' has a wrong offset!");

// Function WIDGET_ButtonLegend_Key.WIDGET_ButtonLegend_Key_C.SetLegendKey
// 0x0040 (0x0040 - 0x0000)
struct WIDGET_ButtonLegend_Key_C_SetLegendKey final
{
public:
	struct FKey                                   Key;                                               // 0x0000(0x0018)(BlueprintVisible, BlueprintReadOnly, Parm, HasGetValueTypeHash)
	bool                                          IsUsingGamepad;                                    // 0x0018(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_19[0x7];                                       // 0x0019(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class APlayerController*                      CallFunc_GetPlayerController_ReturnValue;          // 0x0020(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Key_IsGamepadKey_ReturnValue;             // 0x0028(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_29[0x7];                                       // 0x0029(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class ACON_Hacker_C*                          K2Node_DynamicCast_AsCON_Hacker;                   // 0x0030(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0038(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsUsingGamepad_Result;                    // 0x0039(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_UpdateWidgetVisibility_Visible;           // 0x003A(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(WIDGET_ButtonLegend_Key_C_SetLegendKey) == 0x000008, "Wrong alignment on WIDGET_ButtonLegend_Key_C_SetLegendKey");
static_assert(sizeof(WIDGET_ButtonLegend_Key_C_SetLegendKey) == 0x000040, "Wrong size on WIDGET_ButtonLegend_Key_C_SetLegendKey");
static_assert(offsetof(WIDGET_ButtonLegend_Key_C_SetLegendKey, Key) == 0x000000, "Member 'WIDGET_ButtonLegend_Key_C_SetLegendKey::Key' has a wrong offset!");
static_assert(offsetof(WIDGET_ButtonLegend_Key_C_SetLegendKey, IsUsingGamepad) == 0x000018, "Member 'WIDGET_ButtonLegend_Key_C_SetLegendKey::IsUsingGamepad' has a wrong offset!");
static_assert(offsetof(WIDGET_ButtonLegend_Key_C_SetLegendKey, CallFunc_GetPlayerController_ReturnValue) == 0x000020, "Member 'WIDGET_ButtonLegend_Key_C_SetLegendKey::CallFunc_GetPlayerController_ReturnValue' has a wrong offset!");
static_assert(offsetof(WIDGET_ButtonLegend_Key_C_SetLegendKey, CallFunc_Key_IsGamepadKey_ReturnValue) == 0x000028, "Member 'WIDGET_ButtonLegend_Key_C_SetLegendKey::CallFunc_Key_IsGamepadKey_ReturnValue' has a wrong offset!");
static_assert(offsetof(WIDGET_ButtonLegend_Key_C_SetLegendKey, K2Node_DynamicCast_AsCON_Hacker) == 0x000030, "Member 'WIDGET_ButtonLegend_Key_C_SetLegendKey::K2Node_DynamicCast_AsCON_Hacker' has a wrong offset!");
static_assert(offsetof(WIDGET_ButtonLegend_Key_C_SetLegendKey, K2Node_DynamicCast_bSuccess) == 0x000038, "Member 'WIDGET_ButtonLegend_Key_C_SetLegendKey::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(WIDGET_ButtonLegend_Key_C_SetLegendKey, CallFunc_IsUsingGamepad_Result) == 0x000039, "Member 'WIDGET_ButtonLegend_Key_C_SetLegendKey::CallFunc_IsUsingGamepad_Result' has a wrong offset!");
static_assert(offsetof(WIDGET_ButtonLegend_Key_C_SetLegendKey, CallFunc_UpdateWidgetVisibility_Visible) == 0x00003A, "Member 'WIDGET_ButtonLegend_Key_C_SetLegendKey::CallFunc_UpdateWidgetVisibility_Visible' has a wrong offset!");

// Function WIDGET_ButtonLegend_Key.WIDGET_ButtonLegend_Key_C.SetLegendInputAction
// 0x0058 (0x0058 - 0x0000)
struct WIDGET_ButtonLegend_Key_C_SetLegendInputAction final
{
public:
	class FString                                 ActionString;                                      // 0x0000(0x0010)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, HasGetValueTypeHash)
	bool                                          IsUsingGamepad;                                    // 0x0010(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_UpdateWidgetVisibility_Visible;           // 0x0011(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_12[0x6];                                       // 0x0012(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class APlayerController*                      CallFunc_GetPlayerController_ReturnValue;          // 0x0018(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FName                                   CallFunc_ParseInputActionFromString_Result;        // 0x0020(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class ACON_Hacker_C*                          K2Node_DynamicCast_AsCON_Hacker;                   // 0x0028(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0030(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_31[0x7];                                       // 0x0031(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FKey                                   CallFunc_GetBoundKeyForCurrentUser_BoundKey;       // 0x0038(0x0018)(HasGetValueTypeHash)
	bool                                          CallFunc_IsUsingGamepad_Result;                    // 0x0050(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(WIDGET_ButtonLegend_Key_C_SetLegendInputAction) == 0x000008, "Wrong alignment on WIDGET_ButtonLegend_Key_C_SetLegendInputAction");
static_assert(sizeof(WIDGET_ButtonLegend_Key_C_SetLegendInputAction) == 0x000058, "Wrong size on WIDGET_ButtonLegend_Key_C_SetLegendInputAction");
static_assert(offsetof(WIDGET_ButtonLegend_Key_C_SetLegendInputAction, ActionString) == 0x000000, "Member 'WIDGET_ButtonLegend_Key_C_SetLegendInputAction::ActionString' has a wrong offset!");
static_assert(offsetof(WIDGET_ButtonLegend_Key_C_SetLegendInputAction, IsUsingGamepad) == 0x000010, "Member 'WIDGET_ButtonLegend_Key_C_SetLegendInputAction::IsUsingGamepad' has a wrong offset!");
static_assert(offsetof(WIDGET_ButtonLegend_Key_C_SetLegendInputAction, CallFunc_UpdateWidgetVisibility_Visible) == 0x000011, "Member 'WIDGET_ButtonLegend_Key_C_SetLegendInputAction::CallFunc_UpdateWidgetVisibility_Visible' has a wrong offset!");
static_assert(offsetof(WIDGET_ButtonLegend_Key_C_SetLegendInputAction, CallFunc_GetPlayerController_ReturnValue) == 0x000018, "Member 'WIDGET_ButtonLegend_Key_C_SetLegendInputAction::CallFunc_GetPlayerController_ReturnValue' has a wrong offset!");
static_assert(offsetof(WIDGET_ButtonLegend_Key_C_SetLegendInputAction, CallFunc_ParseInputActionFromString_Result) == 0x000020, "Member 'WIDGET_ButtonLegend_Key_C_SetLegendInputAction::CallFunc_ParseInputActionFromString_Result' has a wrong offset!");
static_assert(offsetof(WIDGET_ButtonLegend_Key_C_SetLegendInputAction, K2Node_DynamicCast_AsCON_Hacker) == 0x000028, "Member 'WIDGET_ButtonLegend_Key_C_SetLegendInputAction::K2Node_DynamicCast_AsCON_Hacker' has a wrong offset!");
static_assert(offsetof(WIDGET_ButtonLegend_Key_C_SetLegendInputAction, K2Node_DynamicCast_bSuccess) == 0x000030, "Member 'WIDGET_ButtonLegend_Key_C_SetLegendInputAction::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(WIDGET_ButtonLegend_Key_C_SetLegendInputAction, CallFunc_GetBoundKeyForCurrentUser_BoundKey) == 0x000038, "Member 'WIDGET_ButtonLegend_Key_C_SetLegendInputAction::CallFunc_GetBoundKeyForCurrentUser_BoundKey' has a wrong offset!");
static_assert(offsetof(WIDGET_ButtonLegend_Key_C_SetLegendInputAction, CallFunc_IsUsingGamepad_Result) == 0x000050, "Member 'WIDGET_ButtonLegend_Key_C_SetLegendInputAction::CallFunc_IsUsingGamepad_Result' has a wrong offset!");

// Function WIDGET_ButtonLegend_Key.WIDGET_ButtonLegend_Key_C.SetLegendColor
// 0x0004 (0x0004 - 0x0000)
struct WIDGET_ButtonLegend_Key_C_SetLegendColor final
{
public:
	struct FColor                                 Color;                                             // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(WIDGET_ButtonLegend_Key_C_SetLegendColor) == 0x000004, "Wrong alignment on WIDGET_ButtonLegend_Key_C_SetLegendColor");
static_assert(sizeof(WIDGET_ButtonLegend_Key_C_SetLegendColor) == 0x000004, "Wrong size on WIDGET_ButtonLegend_Key_C_SetLegendColor");
static_assert(offsetof(WIDGET_ButtonLegend_Key_C_SetLegendColor, Color) == 0x000000, "Member 'WIDGET_ButtonLegend_Key_C_SetLegendColor::Color' has a wrong offset!");

// Function WIDGET_ButtonLegend_Key.WIDGET_ButtonLegend_Key_C.UpdateWidgetVisibility
// 0x0004 (0x0004 - 0x0000)
struct WIDGET_ButtonLegend_Key_C_UpdateWidgetVisibility final
{
public:
	bool                                          IsUsingGamepad;                                    // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Visible;                                           // 0x0001(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Key_IsGamepadKey_ReturnValue;             // 0x0002(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_EqualEqual_BoolBool_ReturnValue;          // 0x0003(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(WIDGET_ButtonLegend_Key_C_UpdateWidgetVisibility) == 0x000001, "Wrong alignment on WIDGET_ButtonLegend_Key_C_UpdateWidgetVisibility");
static_assert(sizeof(WIDGET_ButtonLegend_Key_C_UpdateWidgetVisibility) == 0x000004, "Wrong size on WIDGET_ButtonLegend_Key_C_UpdateWidgetVisibility");
static_assert(offsetof(WIDGET_ButtonLegend_Key_C_UpdateWidgetVisibility, IsUsingGamepad) == 0x000000, "Member 'WIDGET_ButtonLegend_Key_C_UpdateWidgetVisibility::IsUsingGamepad' has a wrong offset!");
static_assert(offsetof(WIDGET_ButtonLegend_Key_C_UpdateWidgetVisibility, Visible) == 0x000001, "Member 'WIDGET_ButtonLegend_Key_C_UpdateWidgetVisibility::Visible' has a wrong offset!");
static_assert(offsetof(WIDGET_ButtonLegend_Key_C_UpdateWidgetVisibility, CallFunc_Key_IsGamepadKey_ReturnValue) == 0x000002, "Member 'WIDGET_ButtonLegend_Key_C_UpdateWidgetVisibility::CallFunc_Key_IsGamepadKey_ReturnValue' has a wrong offset!");
static_assert(offsetof(WIDGET_ButtonLegend_Key_C_UpdateWidgetVisibility, CallFunc_EqualEqual_BoolBool_ReturnValue) == 0x000003, "Member 'WIDGET_ButtonLegend_Key_C_UpdateWidgetVisibility::CallFunc_EqualEqual_BoolBool_ReturnValue' has a wrong offset!");

// Function WIDGET_ButtonLegend_Key.WIDGET_ButtonLegend_Key_C.UpdateLegend
// 0x0108 (0x0108 - 0x0000)
struct WIDGET_ButtonLegend_Key_C_UpdateLegend final
{
public:
	class UMaterialInstanceDynamic*               DynamicMaterial;                                   // 0x0000(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UTexture*                               PlatformTexture;                                   // 0x0008(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         ButtonRotation;                                    // 0x0010(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         ButtonIndex;                                       // 0x0014(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Key_IsGamepadKey_ReturnValue;             // 0x0018(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_19[0x3];                                       // 0x0019(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         Temp_float_Variable;                               // 0x001C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UMaterialInstanceDynamic*               CallFunc_ConvertToDynamicMaterialInstance_ReturnValue; // 0x0020(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Key_IsGamepadKey_ReturnValue_1;           // 0x0028(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_29[0x3];                                       // 0x0029(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_Conv_BoolToFloat_ReturnValue;             // 0x002C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FColor                                 CallFunc_GetKeyTextColor_Color;                    // 0x0030(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Conv_BoolToFloat_ReturnValue_1;           // 0x0034(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Conv_BoolToFloat_ReturnValue_2;           // 0x0038(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Conv_IntToFloat_ReturnValue;              // 0x003C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Conv_IntToFloat_ReturnValue_1;            // 0x0040(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_44[0x4];                                       // 0x0044(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   CallFunc_Key_GetDisplayName_ReturnValue;           // 0x0048(0x0018)()
	float                                         CallFunc_Conv_IntToFloat_ReturnValue_2;            // 0x0060(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Variable;                                // 0x0064(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_65[0x3];                                       // 0x0065(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_GetMouseButtonAtlasIndex_Index;           // 0x0068(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_6C[0x4];                                       // 0x006C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UMaterialInstanceDynamic*               CallFunc_ConvertToDynamicMaterialInstance_ReturnValue_1; // 0x0070(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_GetGamepadButtonAtlasIndex_Index;         // 0x0078(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_GetGamepadButtonAtlasIndex_Rotation;      // 0x007C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UTexture*                               CallFunc_GetButtonLegendTextureForPlatformName_Texture; // 0x0080(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UMaterialInstanceDynamic*               CallFunc_ConvertToDynamicMaterialInstance_ReturnValue_2; // 0x0088(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FString                                 CallFunc_GetPlatformName_ReturnValue;              // 0x0090(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	class UTexture*                               CallFunc_GetButtonLegendTextureForPlatformName_Texture_1; // 0x00A0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x00A8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsValid_ReturnValue_1;                    // 0x00A9(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Key_IsMouseButton_ReturnValue;            // 0x00AA(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_AB[0x5];                                       // 0x00AB(0x0005)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   CallFunc_GetEmptyText_ReturnValue;                 // 0x00B0(0x0018)()
	bool                                          CallFunc_IsValid_ReturnValue_2;                    // 0x00C8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsValid_ReturnValue_3;                    // 0x00C9(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsValid_ReturnValue_4;                    // 0x00CA(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_CB[0x1];                                       // 0x00CB(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_Array_Get_Item;                           // 0x00CC(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector2D                              CallFunc_MakeVector2D_ReturnValue;                 // 0x00D0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UMaterialInstanceDynamic*               CallFunc_ConvertToDynamicMaterialInstance_ReturnValue_3; // 0x00D8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Temp_float_Variable_1;                             // 0x00E0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         K2Node_Select_Default;                             // 0x00E4(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Array_Get_Item_1;                         // 0x00E8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector2D                              CallFunc_MakeVector2D_ReturnValue_1;               // 0x00EC(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector2D                              CallFunc_MakeVector2D_ReturnValue_2;               // 0x00F4(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Key_IsKeyboardKey_ReturnValue;            // 0x00FC(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_FD[0x3];                                       // 0x00FD(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_GetKeyboardButtonAtlasIndex_Index;        // 0x0100(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(WIDGET_ButtonLegend_Key_C_UpdateLegend) == 0x000008, "Wrong alignment on WIDGET_ButtonLegend_Key_C_UpdateLegend");
static_assert(sizeof(WIDGET_ButtonLegend_Key_C_UpdateLegend) == 0x000108, "Wrong size on WIDGET_ButtonLegend_Key_C_UpdateLegend");
static_assert(offsetof(WIDGET_ButtonLegend_Key_C_UpdateLegend, DynamicMaterial) == 0x000000, "Member 'WIDGET_ButtonLegend_Key_C_UpdateLegend::DynamicMaterial' has a wrong offset!");
static_assert(offsetof(WIDGET_ButtonLegend_Key_C_UpdateLegend, PlatformTexture) == 0x000008, "Member 'WIDGET_ButtonLegend_Key_C_UpdateLegend::PlatformTexture' has a wrong offset!");
static_assert(offsetof(WIDGET_ButtonLegend_Key_C_UpdateLegend, ButtonRotation) == 0x000010, "Member 'WIDGET_ButtonLegend_Key_C_UpdateLegend::ButtonRotation' has a wrong offset!");
static_assert(offsetof(WIDGET_ButtonLegend_Key_C_UpdateLegend, ButtonIndex) == 0x000014, "Member 'WIDGET_ButtonLegend_Key_C_UpdateLegend::ButtonIndex' has a wrong offset!");
static_assert(offsetof(WIDGET_ButtonLegend_Key_C_UpdateLegend, CallFunc_Key_IsGamepadKey_ReturnValue) == 0x000018, "Member 'WIDGET_ButtonLegend_Key_C_UpdateLegend::CallFunc_Key_IsGamepadKey_ReturnValue' has a wrong offset!");
static_assert(offsetof(WIDGET_ButtonLegend_Key_C_UpdateLegend, Temp_float_Variable) == 0x00001C, "Member 'WIDGET_ButtonLegend_Key_C_UpdateLegend::Temp_float_Variable' has a wrong offset!");
static_assert(offsetof(WIDGET_ButtonLegend_Key_C_UpdateLegend, CallFunc_ConvertToDynamicMaterialInstance_ReturnValue) == 0x000020, "Member 'WIDGET_ButtonLegend_Key_C_UpdateLegend::CallFunc_ConvertToDynamicMaterialInstance_ReturnValue' has a wrong offset!");
static_assert(offsetof(WIDGET_ButtonLegend_Key_C_UpdateLegend, CallFunc_Key_IsGamepadKey_ReturnValue_1) == 0x000028, "Member 'WIDGET_ButtonLegend_Key_C_UpdateLegend::CallFunc_Key_IsGamepadKey_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(WIDGET_ButtonLegend_Key_C_UpdateLegend, CallFunc_Conv_BoolToFloat_ReturnValue) == 0x00002C, "Member 'WIDGET_ButtonLegend_Key_C_UpdateLegend::CallFunc_Conv_BoolToFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(WIDGET_ButtonLegend_Key_C_UpdateLegend, CallFunc_GetKeyTextColor_Color) == 0x000030, "Member 'WIDGET_ButtonLegend_Key_C_UpdateLegend::CallFunc_GetKeyTextColor_Color' has a wrong offset!");
static_assert(offsetof(WIDGET_ButtonLegend_Key_C_UpdateLegend, CallFunc_Conv_BoolToFloat_ReturnValue_1) == 0x000034, "Member 'WIDGET_ButtonLegend_Key_C_UpdateLegend::CallFunc_Conv_BoolToFloat_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(WIDGET_ButtonLegend_Key_C_UpdateLegend, CallFunc_Conv_BoolToFloat_ReturnValue_2) == 0x000038, "Member 'WIDGET_ButtonLegend_Key_C_UpdateLegend::CallFunc_Conv_BoolToFloat_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(WIDGET_ButtonLegend_Key_C_UpdateLegend, CallFunc_Conv_IntToFloat_ReturnValue) == 0x00003C, "Member 'WIDGET_ButtonLegend_Key_C_UpdateLegend::CallFunc_Conv_IntToFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(WIDGET_ButtonLegend_Key_C_UpdateLegend, CallFunc_Conv_IntToFloat_ReturnValue_1) == 0x000040, "Member 'WIDGET_ButtonLegend_Key_C_UpdateLegend::CallFunc_Conv_IntToFloat_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(WIDGET_ButtonLegend_Key_C_UpdateLegend, CallFunc_Key_GetDisplayName_ReturnValue) == 0x000048, "Member 'WIDGET_ButtonLegend_Key_C_UpdateLegend::CallFunc_Key_GetDisplayName_ReturnValue' has a wrong offset!");
static_assert(offsetof(WIDGET_ButtonLegend_Key_C_UpdateLegend, CallFunc_Conv_IntToFloat_ReturnValue_2) == 0x000060, "Member 'WIDGET_ButtonLegend_Key_C_UpdateLegend::CallFunc_Conv_IntToFloat_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(WIDGET_ButtonLegend_Key_C_UpdateLegend, Temp_bool_Variable) == 0x000064, "Member 'WIDGET_ButtonLegend_Key_C_UpdateLegend::Temp_bool_Variable' has a wrong offset!");
static_assert(offsetof(WIDGET_ButtonLegend_Key_C_UpdateLegend, CallFunc_GetMouseButtonAtlasIndex_Index) == 0x000068, "Member 'WIDGET_ButtonLegend_Key_C_UpdateLegend::CallFunc_GetMouseButtonAtlasIndex_Index' has a wrong offset!");
static_assert(offsetof(WIDGET_ButtonLegend_Key_C_UpdateLegend, CallFunc_ConvertToDynamicMaterialInstance_ReturnValue_1) == 0x000070, "Member 'WIDGET_ButtonLegend_Key_C_UpdateLegend::CallFunc_ConvertToDynamicMaterialInstance_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(WIDGET_ButtonLegend_Key_C_UpdateLegend, CallFunc_GetGamepadButtonAtlasIndex_Index) == 0x000078, "Member 'WIDGET_ButtonLegend_Key_C_UpdateLegend::CallFunc_GetGamepadButtonAtlasIndex_Index' has a wrong offset!");
static_assert(offsetof(WIDGET_ButtonLegend_Key_C_UpdateLegend, CallFunc_GetGamepadButtonAtlasIndex_Rotation) == 0x00007C, "Member 'WIDGET_ButtonLegend_Key_C_UpdateLegend::CallFunc_GetGamepadButtonAtlasIndex_Rotation' has a wrong offset!");
static_assert(offsetof(WIDGET_ButtonLegend_Key_C_UpdateLegend, CallFunc_GetButtonLegendTextureForPlatformName_Texture) == 0x000080, "Member 'WIDGET_ButtonLegend_Key_C_UpdateLegend::CallFunc_GetButtonLegendTextureForPlatformName_Texture' has a wrong offset!");
static_assert(offsetof(WIDGET_ButtonLegend_Key_C_UpdateLegend, CallFunc_ConvertToDynamicMaterialInstance_ReturnValue_2) == 0x000088, "Member 'WIDGET_ButtonLegend_Key_C_UpdateLegend::CallFunc_ConvertToDynamicMaterialInstance_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(WIDGET_ButtonLegend_Key_C_UpdateLegend, CallFunc_GetPlatformName_ReturnValue) == 0x000090, "Member 'WIDGET_ButtonLegend_Key_C_UpdateLegend::CallFunc_GetPlatformName_ReturnValue' has a wrong offset!");
static_assert(offsetof(WIDGET_ButtonLegend_Key_C_UpdateLegend, CallFunc_GetButtonLegendTextureForPlatformName_Texture_1) == 0x0000A0, "Member 'WIDGET_ButtonLegend_Key_C_UpdateLegend::CallFunc_GetButtonLegendTextureForPlatformName_Texture_1' has a wrong offset!");
static_assert(offsetof(WIDGET_ButtonLegend_Key_C_UpdateLegend, CallFunc_IsValid_ReturnValue) == 0x0000A8, "Member 'WIDGET_ButtonLegend_Key_C_UpdateLegend::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(WIDGET_ButtonLegend_Key_C_UpdateLegend, CallFunc_IsValid_ReturnValue_1) == 0x0000A9, "Member 'WIDGET_ButtonLegend_Key_C_UpdateLegend::CallFunc_IsValid_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(WIDGET_ButtonLegend_Key_C_UpdateLegend, CallFunc_Key_IsMouseButton_ReturnValue) == 0x0000AA, "Member 'WIDGET_ButtonLegend_Key_C_UpdateLegend::CallFunc_Key_IsMouseButton_ReturnValue' has a wrong offset!");
static_assert(offsetof(WIDGET_ButtonLegend_Key_C_UpdateLegend, CallFunc_GetEmptyText_ReturnValue) == 0x0000B0, "Member 'WIDGET_ButtonLegend_Key_C_UpdateLegend::CallFunc_GetEmptyText_ReturnValue' has a wrong offset!");
static_assert(offsetof(WIDGET_ButtonLegend_Key_C_UpdateLegend, CallFunc_IsValid_ReturnValue_2) == 0x0000C8, "Member 'WIDGET_ButtonLegend_Key_C_UpdateLegend::CallFunc_IsValid_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(WIDGET_ButtonLegend_Key_C_UpdateLegend, CallFunc_IsValid_ReturnValue_3) == 0x0000C9, "Member 'WIDGET_ButtonLegend_Key_C_UpdateLegend::CallFunc_IsValid_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(WIDGET_ButtonLegend_Key_C_UpdateLegend, CallFunc_IsValid_ReturnValue_4) == 0x0000CA, "Member 'WIDGET_ButtonLegend_Key_C_UpdateLegend::CallFunc_IsValid_ReturnValue_4' has a wrong offset!");
static_assert(offsetof(WIDGET_ButtonLegend_Key_C_UpdateLegend, CallFunc_Array_Get_Item) == 0x0000CC, "Member 'WIDGET_ButtonLegend_Key_C_UpdateLegend::CallFunc_Array_Get_Item' has a wrong offset!");
static_assert(offsetof(WIDGET_ButtonLegend_Key_C_UpdateLegend, CallFunc_MakeVector2D_ReturnValue) == 0x0000D0, "Member 'WIDGET_ButtonLegend_Key_C_UpdateLegend::CallFunc_MakeVector2D_ReturnValue' has a wrong offset!");
static_assert(offsetof(WIDGET_ButtonLegend_Key_C_UpdateLegend, CallFunc_ConvertToDynamicMaterialInstance_ReturnValue_3) == 0x0000D8, "Member 'WIDGET_ButtonLegend_Key_C_UpdateLegend::CallFunc_ConvertToDynamicMaterialInstance_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(WIDGET_ButtonLegend_Key_C_UpdateLegend, Temp_float_Variable_1) == 0x0000E0, "Member 'WIDGET_ButtonLegend_Key_C_UpdateLegend::Temp_float_Variable_1' has a wrong offset!");
static_assert(offsetof(WIDGET_ButtonLegend_Key_C_UpdateLegend, K2Node_Select_Default) == 0x0000E4, "Member 'WIDGET_ButtonLegend_Key_C_UpdateLegend::K2Node_Select_Default' has a wrong offset!");
static_assert(offsetof(WIDGET_ButtonLegend_Key_C_UpdateLegend, CallFunc_Array_Get_Item_1) == 0x0000E8, "Member 'WIDGET_ButtonLegend_Key_C_UpdateLegend::CallFunc_Array_Get_Item_1' has a wrong offset!");
static_assert(offsetof(WIDGET_ButtonLegend_Key_C_UpdateLegend, CallFunc_MakeVector2D_ReturnValue_1) == 0x0000EC, "Member 'WIDGET_ButtonLegend_Key_C_UpdateLegend::CallFunc_MakeVector2D_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(WIDGET_ButtonLegend_Key_C_UpdateLegend, CallFunc_MakeVector2D_ReturnValue_2) == 0x0000F4, "Member 'WIDGET_ButtonLegend_Key_C_UpdateLegend::CallFunc_MakeVector2D_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(WIDGET_ButtonLegend_Key_C_UpdateLegend, CallFunc_Key_IsKeyboardKey_ReturnValue) == 0x0000FC, "Member 'WIDGET_ButtonLegend_Key_C_UpdateLegend::CallFunc_Key_IsKeyboardKey_ReturnValue' has a wrong offset!");
static_assert(offsetof(WIDGET_ButtonLegend_Key_C_UpdateLegend, CallFunc_GetKeyboardButtonAtlasIndex_Index) == 0x000100, "Member 'WIDGET_ButtonLegend_Key_C_UpdateLegend::CallFunc_GetKeyboardButtonAtlasIndex_Index' has a wrong offset!");

// Function WIDGET_ButtonLegend_Key.WIDGET_ButtonLegend_Key_C.GetKeyTextColor
// 0x0038 (0x0038 - 0x0000)
struct WIDGET_ButtonLegend_Key_C_GetKeyTextColor final
{
public:
	struct FColor                                 Color;                                             // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FColor                                 CallFunc_GetMeshUIColor_Color;                     // 0x0004(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FColor                                 CallFunc_GetMeshUIColor_Color_1;                   // 0x0008(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FColor                                 CallFunc_GetMeshUIColor_Color_2;                   // 0x000C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           CallFunc_Conv_ColorToLinearColor_ReturnValue;      // 0x0010(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Multiply_FloatFloat_ReturnValue;          // 0x0020(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           K2Node_MakeStruct_LinearColor;                     // 0x0024(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FColor                                 CallFunc_Conv_LinearColorToColor_ReturnValue;      // 0x0034(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(WIDGET_ButtonLegend_Key_C_GetKeyTextColor) == 0x000004, "Wrong alignment on WIDGET_ButtonLegend_Key_C_GetKeyTextColor");
static_assert(sizeof(WIDGET_ButtonLegend_Key_C_GetKeyTextColor) == 0x000038, "Wrong size on WIDGET_ButtonLegend_Key_C_GetKeyTextColor");
static_assert(offsetof(WIDGET_ButtonLegend_Key_C_GetKeyTextColor, Color) == 0x000000, "Member 'WIDGET_ButtonLegend_Key_C_GetKeyTextColor::Color' has a wrong offset!");
static_assert(offsetof(WIDGET_ButtonLegend_Key_C_GetKeyTextColor, CallFunc_GetMeshUIColor_Color) == 0x000004, "Member 'WIDGET_ButtonLegend_Key_C_GetKeyTextColor::CallFunc_GetMeshUIColor_Color' has a wrong offset!");
static_assert(offsetof(WIDGET_ButtonLegend_Key_C_GetKeyTextColor, CallFunc_GetMeshUIColor_Color_1) == 0x000008, "Member 'WIDGET_ButtonLegend_Key_C_GetKeyTextColor::CallFunc_GetMeshUIColor_Color_1' has a wrong offset!");
static_assert(offsetof(WIDGET_ButtonLegend_Key_C_GetKeyTextColor, CallFunc_GetMeshUIColor_Color_2) == 0x00000C, "Member 'WIDGET_ButtonLegend_Key_C_GetKeyTextColor::CallFunc_GetMeshUIColor_Color_2' has a wrong offset!");
static_assert(offsetof(WIDGET_ButtonLegend_Key_C_GetKeyTextColor, CallFunc_Conv_ColorToLinearColor_ReturnValue) == 0x000010, "Member 'WIDGET_ButtonLegend_Key_C_GetKeyTextColor::CallFunc_Conv_ColorToLinearColor_ReturnValue' has a wrong offset!");
static_assert(offsetof(WIDGET_ButtonLegend_Key_C_GetKeyTextColor, CallFunc_Multiply_FloatFloat_ReturnValue) == 0x000020, "Member 'WIDGET_ButtonLegend_Key_C_GetKeyTextColor::CallFunc_Multiply_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(WIDGET_ButtonLegend_Key_C_GetKeyTextColor, K2Node_MakeStruct_LinearColor) == 0x000024, "Member 'WIDGET_ButtonLegend_Key_C_GetKeyTextColor::K2Node_MakeStruct_LinearColor' has a wrong offset!");
static_assert(offsetof(WIDGET_ButtonLegend_Key_C_GetKeyTextColor, CallFunc_Conv_LinearColorToColor_ReturnValue) == 0x000034, "Member 'WIDGET_ButtonLegend_Key_C_GetKeyTextColor::CallFunc_Conv_LinearColorToColor_ReturnValue' has a wrong offset!");

// Function WIDGET_ButtonLegend_Key.WIDGET_ButtonLegend_Key_C.GetKeyPanelSize
// 0x0008 (0x0008 - 0x0000)
struct WIDGET_ButtonLegend_Key_C_GetKeyPanelSize final
{
public:
	struct FVector2D                              Result;                                            // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(WIDGET_ButtonLegend_Key_C_GetKeyPanelSize) == 0x000004, "Wrong alignment on WIDGET_ButtonLegend_Key_C_GetKeyPanelSize");
static_assert(sizeof(WIDGET_ButtonLegend_Key_C_GetKeyPanelSize) == 0x000008, "Wrong size on WIDGET_ButtonLegend_Key_C_GetKeyPanelSize");
static_assert(offsetof(WIDGET_ButtonLegend_Key_C_GetKeyPanelSize, Result) == 0x000000, "Member 'WIDGET_ButtonLegend_Key_C_GetKeyPanelSize::Result' has a wrong offset!");

// Function WIDGET_ButtonLegend_Key.WIDGET_ButtonLegend_Key_C.ParseInputActionFromString
// 0x00A8 (0x00A8 - 0x0000)
struct WIDGET_ButtonLegend_Key_C_ParseInputActionFromString final
{
public:
	class FString                                 InputString;                                       // 0x0000(0x0010)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, HasGetValueTypeHash)
	bool                                          IsUsingGamepad;                                    // 0x0010(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_11[0x3];                                       // 0x0011(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   Result;                                            // 0x0014(0x0008)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Variable;                                // 0x001C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_1D[0x3];                                       // 0x001D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 CallFunc_Split_LeftS;                              // 0x0020(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	class FString                                 CallFunc_Split_RightS;                             // 0x0030(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	bool                                          CallFunc_Split_ReturnValue;                        // 0x0040(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Temp_bool_Variable_1;                              // 0x0041(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_42[0x6];                                       // 0x0042(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 CallFunc_Trim_ReturnValue;                         // 0x0048(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	class FString                                 CallFunc_GetGamepadInputActionPrefix_Result;       // 0x0058(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	class FString                                 CallFunc_Concat_StrStr_ReturnValue;                // 0x0068(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	class FString                                 K2Node_Select_Default;                             // 0x0078(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	class FName                                   CallFunc_Conv_StringToName_ReturnValue;            // 0x0088(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FString                                 K2Node_Select_Default_1;                           // 0x0090(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	class FName                                   CallFunc_Conv_StringToName_ReturnValue_1;          // 0x00A0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(WIDGET_ButtonLegend_Key_C_ParseInputActionFromString) == 0x000008, "Wrong alignment on WIDGET_ButtonLegend_Key_C_ParseInputActionFromString");
static_assert(sizeof(WIDGET_ButtonLegend_Key_C_ParseInputActionFromString) == 0x0000A8, "Wrong size on WIDGET_ButtonLegend_Key_C_ParseInputActionFromString");
static_assert(offsetof(WIDGET_ButtonLegend_Key_C_ParseInputActionFromString, InputString) == 0x000000, "Member 'WIDGET_ButtonLegend_Key_C_ParseInputActionFromString::InputString' has a wrong offset!");
static_assert(offsetof(WIDGET_ButtonLegend_Key_C_ParseInputActionFromString, IsUsingGamepad) == 0x000010, "Member 'WIDGET_ButtonLegend_Key_C_ParseInputActionFromString::IsUsingGamepad' has a wrong offset!");
static_assert(offsetof(WIDGET_ButtonLegend_Key_C_ParseInputActionFromString, Result) == 0x000014, "Member 'WIDGET_ButtonLegend_Key_C_ParseInputActionFromString::Result' has a wrong offset!");
static_assert(offsetof(WIDGET_ButtonLegend_Key_C_ParseInputActionFromString, Temp_bool_Variable) == 0x00001C, "Member 'WIDGET_ButtonLegend_Key_C_ParseInputActionFromString::Temp_bool_Variable' has a wrong offset!");
static_assert(offsetof(WIDGET_ButtonLegend_Key_C_ParseInputActionFromString, CallFunc_Split_LeftS) == 0x000020, "Member 'WIDGET_ButtonLegend_Key_C_ParseInputActionFromString::CallFunc_Split_LeftS' has a wrong offset!");
static_assert(offsetof(WIDGET_ButtonLegend_Key_C_ParseInputActionFromString, CallFunc_Split_RightS) == 0x000030, "Member 'WIDGET_ButtonLegend_Key_C_ParseInputActionFromString::CallFunc_Split_RightS' has a wrong offset!");
static_assert(offsetof(WIDGET_ButtonLegend_Key_C_ParseInputActionFromString, CallFunc_Split_ReturnValue) == 0x000040, "Member 'WIDGET_ButtonLegend_Key_C_ParseInputActionFromString::CallFunc_Split_ReturnValue' has a wrong offset!");
static_assert(offsetof(WIDGET_ButtonLegend_Key_C_ParseInputActionFromString, Temp_bool_Variable_1) == 0x000041, "Member 'WIDGET_ButtonLegend_Key_C_ParseInputActionFromString::Temp_bool_Variable_1' has a wrong offset!");
static_assert(offsetof(WIDGET_ButtonLegend_Key_C_ParseInputActionFromString, CallFunc_Trim_ReturnValue) == 0x000048, "Member 'WIDGET_ButtonLegend_Key_C_ParseInputActionFromString::CallFunc_Trim_ReturnValue' has a wrong offset!");
static_assert(offsetof(WIDGET_ButtonLegend_Key_C_ParseInputActionFromString, CallFunc_GetGamepadInputActionPrefix_Result) == 0x000058, "Member 'WIDGET_ButtonLegend_Key_C_ParseInputActionFromString::CallFunc_GetGamepadInputActionPrefix_Result' has a wrong offset!");
static_assert(offsetof(WIDGET_ButtonLegend_Key_C_ParseInputActionFromString, CallFunc_Concat_StrStr_ReturnValue) == 0x000068, "Member 'WIDGET_ButtonLegend_Key_C_ParseInputActionFromString::CallFunc_Concat_StrStr_ReturnValue' has a wrong offset!");
static_assert(offsetof(WIDGET_ButtonLegend_Key_C_ParseInputActionFromString, K2Node_Select_Default) == 0x000078, "Member 'WIDGET_ButtonLegend_Key_C_ParseInputActionFromString::K2Node_Select_Default' has a wrong offset!");
static_assert(offsetof(WIDGET_ButtonLegend_Key_C_ParseInputActionFromString, CallFunc_Conv_StringToName_ReturnValue) == 0x000088, "Member 'WIDGET_ButtonLegend_Key_C_ParseInputActionFromString::CallFunc_Conv_StringToName_ReturnValue' has a wrong offset!");
static_assert(offsetof(WIDGET_ButtonLegend_Key_C_ParseInputActionFromString, K2Node_Select_Default_1) == 0x000090, "Member 'WIDGET_ButtonLegend_Key_C_ParseInputActionFromString::K2Node_Select_Default_1' has a wrong offset!");
static_assert(offsetof(WIDGET_ButtonLegend_Key_C_ParseInputActionFromString, CallFunc_Conv_StringToName_ReturnValue_1) == 0x0000A0, "Member 'WIDGET_ButtonLegend_Key_C_ParseInputActionFromString::CallFunc_Conv_StringToName_ReturnValue_1' has a wrong offset!");

// Function WIDGET_ButtonLegend_Key.WIDGET_ButtonLegend_Key_C.TryUpdateLegendSize
// 0x0080 (0x0080 - 0x0000)
struct WIDGET_ButtonLegend_Key_C_TryUpdateLegendSize final
{
public:
	bool                                          Temp_bool_Variable;                                // 0x0000(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UCanvasPanelSlot*                       CallFunc_SlotAsCanvasSlot_ReturnValue;             // 0x0008(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsVisible_ReturnValue;                    // 0x0010(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UCanvasPanelSlot*                       CallFunc_SlotAsCanvasSlot_ReturnValue_1;           // 0x0018(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector2D                              Temp_struct_Variable;                              // 0x0020(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0028(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsVisible_ReturnValue_1;                  // 0x0029(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_2A[0x6];                                       // 0x002A(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class UPerspectiveMeshSlot*                   K2Node_DynamicCast_AsPerspective_Mesh_Slot;        // 0x0030(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0038(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_39[0x3];                                       // 0x0039(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector2D                              Temp_struct_Variable_1;                            // 0x003C(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector2D                              K2Node_Select_Default;                             // 0x0044(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_4C[0x4];                                       // 0x004C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UCanvasPanelSlot*                       CallFunc_SlotAsCanvasSlot_ReturnValue_2;           // 0x0050(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UCanvasPanelSlot*                       CallFunc_SlotAsCanvasSlot_ReturnValue_3;           // 0x0058(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue_1;                    // 0x0060(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_61[0x7];                                       // 0x0061(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UCanvasPanelSlot*                       CallFunc_SlotAsCanvasSlot_ReturnValue_4;           // 0x0068(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UCanvasPanelSlot*                       CallFunc_SlotAsCanvasSlot_ReturnValue_5;           // 0x0070(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue_2;                    // 0x0078(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(WIDGET_ButtonLegend_Key_C_TryUpdateLegendSize) == 0x000008, "Wrong alignment on WIDGET_ButtonLegend_Key_C_TryUpdateLegendSize");
static_assert(sizeof(WIDGET_ButtonLegend_Key_C_TryUpdateLegendSize) == 0x000080, "Wrong size on WIDGET_ButtonLegend_Key_C_TryUpdateLegendSize");
static_assert(offsetof(WIDGET_ButtonLegend_Key_C_TryUpdateLegendSize, Temp_bool_Variable) == 0x000000, "Member 'WIDGET_ButtonLegend_Key_C_TryUpdateLegendSize::Temp_bool_Variable' has a wrong offset!");
static_assert(offsetof(WIDGET_ButtonLegend_Key_C_TryUpdateLegendSize, CallFunc_SlotAsCanvasSlot_ReturnValue) == 0x000008, "Member 'WIDGET_ButtonLegend_Key_C_TryUpdateLegendSize::CallFunc_SlotAsCanvasSlot_ReturnValue' has a wrong offset!");
static_assert(offsetof(WIDGET_ButtonLegend_Key_C_TryUpdateLegendSize, CallFunc_IsVisible_ReturnValue) == 0x000010, "Member 'WIDGET_ButtonLegend_Key_C_TryUpdateLegendSize::CallFunc_IsVisible_ReturnValue' has a wrong offset!");
static_assert(offsetof(WIDGET_ButtonLegend_Key_C_TryUpdateLegendSize, CallFunc_SlotAsCanvasSlot_ReturnValue_1) == 0x000018, "Member 'WIDGET_ButtonLegend_Key_C_TryUpdateLegendSize::CallFunc_SlotAsCanvasSlot_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(WIDGET_ButtonLegend_Key_C_TryUpdateLegendSize, Temp_struct_Variable) == 0x000020, "Member 'WIDGET_ButtonLegend_Key_C_TryUpdateLegendSize::Temp_struct_Variable' has a wrong offset!");
static_assert(offsetof(WIDGET_ButtonLegend_Key_C_TryUpdateLegendSize, CallFunc_IsValid_ReturnValue) == 0x000028, "Member 'WIDGET_ButtonLegend_Key_C_TryUpdateLegendSize::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(WIDGET_ButtonLegend_Key_C_TryUpdateLegendSize, CallFunc_IsVisible_ReturnValue_1) == 0x000029, "Member 'WIDGET_ButtonLegend_Key_C_TryUpdateLegendSize::CallFunc_IsVisible_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(WIDGET_ButtonLegend_Key_C_TryUpdateLegendSize, K2Node_DynamicCast_AsPerspective_Mesh_Slot) == 0x000030, "Member 'WIDGET_ButtonLegend_Key_C_TryUpdateLegendSize::K2Node_DynamicCast_AsPerspective_Mesh_Slot' has a wrong offset!");
static_assert(offsetof(WIDGET_ButtonLegend_Key_C_TryUpdateLegendSize, K2Node_DynamicCast_bSuccess) == 0x000038, "Member 'WIDGET_ButtonLegend_Key_C_TryUpdateLegendSize::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(WIDGET_ButtonLegend_Key_C_TryUpdateLegendSize, Temp_struct_Variable_1) == 0x00003C, "Member 'WIDGET_ButtonLegend_Key_C_TryUpdateLegendSize::Temp_struct_Variable_1' has a wrong offset!");
static_assert(offsetof(WIDGET_ButtonLegend_Key_C_TryUpdateLegendSize, K2Node_Select_Default) == 0x000044, "Member 'WIDGET_ButtonLegend_Key_C_TryUpdateLegendSize::K2Node_Select_Default' has a wrong offset!");
static_assert(offsetof(WIDGET_ButtonLegend_Key_C_TryUpdateLegendSize, CallFunc_SlotAsCanvasSlot_ReturnValue_2) == 0x000050, "Member 'WIDGET_ButtonLegend_Key_C_TryUpdateLegendSize::CallFunc_SlotAsCanvasSlot_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(WIDGET_ButtonLegend_Key_C_TryUpdateLegendSize, CallFunc_SlotAsCanvasSlot_ReturnValue_3) == 0x000058, "Member 'WIDGET_ButtonLegend_Key_C_TryUpdateLegendSize::CallFunc_SlotAsCanvasSlot_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(WIDGET_ButtonLegend_Key_C_TryUpdateLegendSize, CallFunc_IsValid_ReturnValue_1) == 0x000060, "Member 'WIDGET_ButtonLegend_Key_C_TryUpdateLegendSize::CallFunc_IsValid_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(WIDGET_ButtonLegend_Key_C_TryUpdateLegendSize, CallFunc_SlotAsCanvasSlot_ReturnValue_4) == 0x000068, "Member 'WIDGET_ButtonLegend_Key_C_TryUpdateLegendSize::CallFunc_SlotAsCanvasSlot_ReturnValue_4' has a wrong offset!");
static_assert(offsetof(WIDGET_ButtonLegend_Key_C_TryUpdateLegendSize, CallFunc_SlotAsCanvasSlot_ReturnValue_5) == 0x000070, "Member 'WIDGET_ButtonLegend_Key_C_TryUpdateLegendSize::CallFunc_SlotAsCanvasSlot_ReturnValue_5' has a wrong offset!");
static_assert(offsetof(WIDGET_ButtonLegend_Key_C_TryUpdateLegendSize, CallFunc_IsValid_ReturnValue_2) == 0x000078, "Member 'WIDGET_ButtonLegend_Key_C_TryUpdateLegendSize::CallFunc_IsValid_ReturnValue_2' has a wrong offset!");

// Function WIDGET_ButtonLegend_Key.WIDGET_ButtonLegend_Key_C.SetHighlighted
// 0x0001 (0x0001 - 0x0000)
struct WIDGET_ButtonLegend_Key_C_SetHighlighted final
{
public:
	bool                                          State;                                             // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(WIDGET_ButtonLegend_Key_C_SetHighlighted) == 0x000001, "Wrong alignment on WIDGET_ButtonLegend_Key_C_SetHighlighted");
static_assert(sizeof(WIDGET_ButtonLegend_Key_C_SetHighlighted) == 0x000001, "Wrong size on WIDGET_ButtonLegend_Key_C_SetHighlighted");
static_assert(offsetof(WIDGET_ButtonLegend_Key_C_SetHighlighted, State) == 0x000000, "Member 'WIDGET_ButtonLegend_Key_C_SetHighlighted::State' has a wrong offset!");

// Function WIDGET_ButtonLegend_Key.WIDGET_ButtonLegend_Key_C.SetDisabled
// 0x0001 (0x0001 - 0x0000)
struct WIDGET_ButtonLegend_Key_C_SetDisabled final
{
public:
	bool                                          State;                                             // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(WIDGET_ButtonLegend_Key_C_SetDisabled) == 0x000001, "Wrong alignment on WIDGET_ButtonLegend_Key_C_SetDisabled");
static_assert(sizeof(WIDGET_ButtonLegend_Key_C_SetDisabled) == 0x000001, "Wrong size on WIDGET_ButtonLegend_Key_C_SetDisabled");
static_assert(offsetof(WIDGET_ButtonLegend_Key_C_SetDisabled, State) == 0x000000, "Member 'WIDGET_ButtonLegend_Key_C_SetDisabled::State' has a wrong offset!");

// Function WIDGET_ButtonLegend_Key.WIDGET_ButtonLegend_Key_C.EVENT_OnUsingGamepadChanged
// 0x0028 (0x0028 - 0x0000)
struct WIDGET_ButtonLegend_Key_C_EVENT_OnUsingGamepadChanged final
{
public:
	bool                                          IsUsingGamepad;                                    // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0001(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_UpdateWidgetVisibility_Visible;           // 0x0002(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsEmpty_ReturnValue;                      // 0x0003(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	class FName                                   CallFunc_ParseInputActionFromString_Result;        // 0x0004(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FKey                                   CallFunc_GetBoundKeyForCurrentUser_BoundKey;       // 0x0010(0x0018)(HasGetValueTypeHash)
};
static_assert(alignof(WIDGET_ButtonLegend_Key_C_EVENT_OnUsingGamepadChanged) == 0x000008, "Wrong alignment on WIDGET_ButtonLegend_Key_C_EVENT_OnUsingGamepadChanged");
static_assert(sizeof(WIDGET_ButtonLegend_Key_C_EVENT_OnUsingGamepadChanged) == 0x000028, "Wrong size on WIDGET_ButtonLegend_Key_C_EVENT_OnUsingGamepadChanged");
static_assert(offsetof(WIDGET_ButtonLegend_Key_C_EVENT_OnUsingGamepadChanged, IsUsingGamepad) == 0x000000, "Member 'WIDGET_ButtonLegend_Key_C_EVENT_OnUsingGamepadChanged::IsUsingGamepad' has a wrong offset!");
static_assert(offsetof(WIDGET_ButtonLegend_Key_C_EVENT_OnUsingGamepadChanged, CallFunc_IsValid_ReturnValue) == 0x000001, "Member 'WIDGET_ButtonLegend_Key_C_EVENT_OnUsingGamepadChanged::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(WIDGET_ButtonLegend_Key_C_EVENT_OnUsingGamepadChanged, CallFunc_UpdateWidgetVisibility_Visible) == 0x000002, "Member 'WIDGET_ButtonLegend_Key_C_EVENT_OnUsingGamepadChanged::CallFunc_UpdateWidgetVisibility_Visible' has a wrong offset!");
static_assert(offsetof(WIDGET_ButtonLegend_Key_C_EVENT_OnUsingGamepadChanged, CallFunc_IsEmpty_ReturnValue) == 0x000003, "Member 'WIDGET_ButtonLegend_Key_C_EVENT_OnUsingGamepadChanged::CallFunc_IsEmpty_ReturnValue' has a wrong offset!");
static_assert(offsetof(WIDGET_ButtonLegend_Key_C_EVENT_OnUsingGamepadChanged, CallFunc_ParseInputActionFromString_Result) == 0x000004, "Member 'WIDGET_ButtonLegend_Key_C_EVENT_OnUsingGamepadChanged::CallFunc_ParseInputActionFromString_Result' has a wrong offset!");
static_assert(offsetof(WIDGET_ButtonLegend_Key_C_EVENT_OnUsingGamepadChanged, CallFunc_GetBoundKeyForCurrentUser_BoundKey) == 0x000010, "Member 'WIDGET_ButtonLegend_Key_C_EVENT_OnUsingGamepadChanged::CallFunc_GetBoundKeyForCurrentUser_BoundKey' has a wrong offset!");

// Function WIDGET_ButtonLegend_Key.WIDGET_ButtonLegend_Key_C.SetAutoSwapToGamepad
// 0x0058 (0x0058 - 0x0000)
struct WIDGET_ButtonLegend_Key_C_SetAutoSwapToGamepad final
{
public:
	bool                                          State;                                             // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	TDelegate<void(bool IsUsingGamepad)>          K2Node_CreateDelegate_OutputDelegate;              // 0x0004(0x0010)(ZeroConstructor, NoDestructor)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class APlayerController*                      CallFunc_GetPlayerController_ReturnValue;          // 0x0018(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class ACON_Hacker_C*                          K2Node_DynamicCast_AsCON_Hacker;                   // 0x0020(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0028(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_29[0x3];                                       // 0x0029(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	TDelegate<void(bool IsUsingGamepad)>          K2Node_CreateDelegate_OutputDelegate_1;            // 0x002C(0x0010)(ZeroConstructor, NoDestructor)
	uint8                                         Pad_3C[0x4];                                       // 0x003C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class APlayerController*                      CallFunc_GetPlayerController_ReturnValue_1;        // 0x0040(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class ACON_Hacker_C*                          K2Node_DynamicCast_AsCON_Hacker_1;                 // 0x0048(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess_1;                     // 0x0050(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(WIDGET_ButtonLegend_Key_C_SetAutoSwapToGamepad) == 0x000008, "Wrong alignment on WIDGET_ButtonLegend_Key_C_SetAutoSwapToGamepad");
static_assert(sizeof(WIDGET_ButtonLegend_Key_C_SetAutoSwapToGamepad) == 0x000058, "Wrong size on WIDGET_ButtonLegend_Key_C_SetAutoSwapToGamepad");
static_assert(offsetof(WIDGET_ButtonLegend_Key_C_SetAutoSwapToGamepad, State) == 0x000000, "Member 'WIDGET_ButtonLegend_Key_C_SetAutoSwapToGamepad::State' has a wrong offset!");
static_assert(offsetof(WIDGET_ButtonLegend_Key_C_SetAutoSwapToGamepad, K2Node_CreateDelegate_OutputDelegate) == 0x000004, "Member 'WIDGET_ButtonLegend_Key_C_SetAutoSwapToGamepad::K2Node_CreateDelegate_OutputDelegate' has a wrong offset!");
static_assert(offsetof(WIDGET_ButtonLegend_Key_C_SetAutoSwapToGamepad, CallFunc_GetPlayerController_ReturnValue) == 0x000018, "Member 'WIDGET_ButtonLegend_Key_C_SetAutoSwapToGamepad::CallFunc_GetPlayerController_ReturnValue' has a wrong offset!");
static_assert(offsetof(WIDGET_ButtonLegend_Key_C_SetAutoSwapToGamepad, K2Node_DynamicCast_AsCON_Hacker) == 0x000020, "Member 'WIDGET_ButtonLegend_Key_C_SetAutoSwapToGamepad::K2Node_DynamicCast_AsCON_Hacker' has a wrong offset!");
static_assert(offsetof(WIDGET_ButtonLegend_Key_C_SetAutoSwapToGamepad, K2Node_DynamicCast_bSuccess) == 0x000028, "Member 'WIDGET_ButtonLegend_Key_C_SetAutoSwapToGamepad::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(WIDGET_ButtonLegend_Key_C_SetAutoSwapToGamepad, K2Node_CreateDelegate_OutputDelegate_1) == 0x00002C, "Member 'WIDGET_ButtonLegend_Key_C_SetAutoSwapToGamepad::K2Node_CreateDelegate_OutputDelegate_1' has a wrong offset!");
static_assert(offsetof(WIDGET_ButtonLegend_Key_C_SetAutoSwapToGamepad, CallFunc_GetPlayerController_ReturnValue_1) == 0x000040, "Member 'WIDGET_ButtonLegend_Key_C_SetAutoSwapToGamepad::CallFunc_GetPlayerController_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(WIDGET_ButtonLegend_Key_C_SetAutoSwapToGamepad, K2Node_DynamicCast_AsCON_Hacker_1) == 0x000048, "Member 'WIDGET_ButtonLegend_Key_C_SetAutoSwapToGamepad::K2Node_DynamicCast_AsCON_Hacker_1' has a wrong offset!");
static_assert(offsetof(WIDGET_ButtonLegend_Key_C_SetAutoSwapToGamepad, K2Node_DynamicCast_bSuccess_1) == 0x000050, "Member 'WIDGET_ButtonLegend_Key_C_SetAutoSwapToGamepad::K2Node_DynamicCast_bSuccess_1' has a wrong offset!");

// Function WIDGET_ButtonLegend_Key.WIDGET_ButtonLegend_Key_C.GetDecoratorSizeFromPayload
// 0x0018 (0x0018 - 0x0000)
struct WIDGET_ButtonLegend_Key_C_GetDecoratorSizeFromPayload final
{
public:
	class FString                                 Payload;                                           // 0x0000(0x0010)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, HasGetValueTypeHash)
	struct FVector2D                              ReturnValue;                                       // 0x0010(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(WIDGET_ButtonLegend_Key_C_GetDecoratorSizeFromPayload) == 0x000008, "Wrong alignment on WIDGET_ButtonLegend_Key_C_GetDecoratorSizeFromPayload");
static_assert(sizeof(WIDGET_ButtonLegend_Key_C_GetDecoratorSizeFromPayload) == 0x000018, "Wrong size on WIDGET_ButtonLegend_Key_C_GetDecoratorSizeFromPayload");
static_assert(offsetof(WIDGET_ButtonLegend_Key_C_GetDecoratorSizeFromPayload, Payload) == 0x000000, "Member 'WIDGET_ButtonLegend_Key_C_GetDecoratorSizeFromPayload::Payload' has a wrong offset!");
static_assert(offsetof(WIDGET_ButtonLegend_Key_C_GetDecoratorSizeFromPayload, ReturnValue) == 0x000010, "Member 'WIDGET_ButtonLegend_Key_C_GetDecoratorSizeFromPayload::ReturnValue' has a wrong offset!");

// Function WIDGET_ButtonLegend_Key.WIDGET_ButtonLegend_Key_C.InitializeDecorator
// 0x0018 (0x0018 - 0x0000)
struct WIDGET_ButtonLegend_Key_C_InitializeDecorator final
{
public:
	class UTextMeshWidget*                        TextMeshWidget;                                    // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FColor                                 Color;                                             // 0x0008(0x0004)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          ReturnValue;                                       // 0x000C(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor)
	uint8                                         Pad_D[0x3];                                        // 0x000D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_GetSurfaceBlendAmount_ReturnValue;        // 0x0010(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(WIDGET_ButtonLegend_Key_C_InitializeDecorator) == 0x000008, "Wrong alignment on WIDGET_ButtonLegend_Key_C_InitializeDecorator");
static_assert(sizeof(WIDGET_ButtonLegend_Key_C_InitializeDecorator) == 0x000018, "Wrong size on WIDGET_ButtonLegend_Key_C_InitializeDecorator");
static_assert(offsetof(WIDGET_ButtonLegend_Key_C_InitializeDecorator, TextMeshWidget) == 0x000000, "Member 'WIDGET_ButtonLegend_Key_C_InitializeDecorator::TextMeshWidget' has a wrong offset!");
static_assert(offsetof(WIDGET_ButtonLegend_Key_C_InitializeDecorator, Color) == 0x000008, "Member 'WIDGET_ButtonLegend_Key_C_InitializeDecorator::Color' has a wrong offset!");
static_assert(offsetof(WIDGET_ButtonLegend_Key_C_InitializeDecorator, ReturnValue) == 0x00000C, "Member 'WIDGET_ButtonLegend_Key_C_InitializeDecorator::ReturnValue' has a wrong offset!");
static_assert(offsetof(WIDGET_ButtonLegend_Key_C_InitializeDecorator, CallFunc_GetSurfaceBlendAmount_ReturnValue) == 0x000010, "Member 'WIDGET_ButtonLegend_Key_C_InitializeDecorator::CallFunc_GetSurfaceBlendAmount_ReturnValue' has a wrong offset!");

}

