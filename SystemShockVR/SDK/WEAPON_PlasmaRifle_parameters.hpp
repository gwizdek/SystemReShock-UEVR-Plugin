#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: WEAPON_PlasmaRifle

#include "Basic.hpp"

#include "STRUCT_WeaponMode_structs.hpp"
#include "CoreUObject_structs.hpp"
#include "STRUCT_HardItemParams_structs.hpp"
#include "AttributeSystem_structs.hpp"


namespace SDK::Params
{

// Function WEAPON_PlasmaRifle.WEAPON_PlasmaRifle_C.ExecuteUbergraph_WEAPON_PlasmaRifle
// 0x00F8 (0x00F8 - 0x0000)
struct WEAPON_PlasmaRifle_C_ExecuteUbergraph_WEAPON_PlasmaRifle final
{
public:
	int32                                         EntryPoint;                                        // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TDelegate<void(class UObject* Loaded)>        K2Node_CreateDelegate_OutputDelegate;              // 0x0004(0x0010)(ZeroConstructor, NoDestructor)
	TDelegate<void(class UObject* Loaded)>        K2Node_CreateDelegate_OutputDelegate_1;            // 0x0014(0x0010)(ZeroConstructor, NoDestructor)
	uint8                                         Pad_24[0x4];                                       // 0x0024(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UObject*                                K2Node_CustomEvent_Loaded_4;                       // 0x0028(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TDelegate<void(class UObject* Loaded)>        K2Node_CreateDelegate_OutputDelegate_2;            // 0x0030(0x0010)(ZeroConstructor, NoDestructor)
	class UObject*                                Temp_object_Variable;                              // 0x0040(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UAnimMontage*                           K2Node_DynamicCast_AsAnim_Montage;                 // 0x0048(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0050(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_51[0x7];                                       // 0x0051(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UObject*                                K2Node_CustomEvent_Loaded_3;                       // 0x0058(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UObject*                                Temp_object_Variable_1;                            // 0x0060(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UAnimMontage*                           K2Node_DynamicCast_AsAnim_Montage_1;               // 0x0068(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess_1;                     // 0x0070(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_71[0x7];                                       // 0x0071(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UObject*                                K2Node_CustomEvent_Loaded_2;                       // 0x0078(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UObject*                                Temp_object_Variable_2;                            // 0x0080(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UAnimMontage*                           K2Node_DynamicCast_AsAnim_Montage_2;               // 0x0088(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess_2;                     // 0x0090(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_91[0x7];                                       // 0x0091(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UObject*                                K2Node_CustomEvent_Loaded_1;                       // 0x0098(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UObject*                                Temp_object_Variable_3;                            // 0x00A0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UNiagaraSystem*                         K2Node_DynamicCast_AsNiagara_System;               // 0x00A8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess_3;                     // 0x00B0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_B1[0x7];                                       // 0x00B1(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UObject*                                K2Node_CustomEvent_Loaded;                         // 0x00B8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UObject*                                Temp_object_Variable_4;                            // 0x00C0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UAnimMontage*                           K2Node_DynamicCast_AsAnim_Montage_3;               // 0x00C8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess_4;                     // 0x00D0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_D1[0x3];                                       // 0x00D1(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	TDelegate<void(class UObject* Loaded)>        K2Node_CreateDelegate_OutputDelegate_3;            // 0x00D4(0x0010)(ZeroConstructor, NoDestructor)
	TDelegate<void(class UObject* Loaded)>        K2Node_CreateDelegate_OutputDelegate_4;            // 0x00E4(0x0010)(ZeroConstructor, NoDestructor)
};
static_assert(alignof(WEAPON_PlasmaRifle_C_ExecuteUbergraph_WEAPON_PlasmaRifle) == 0x000008, "Wrong alignment on WEAPON_PlasmaRifle_C_ExecuteUbergraph_WEAPON_PlasmaRifle");
static_assert(sizeof(WEAPON_PlasmaRifle_C_ExecuteUbergraph_WEAPON_PlasmaRifle) == 0x0000F8, "Wrong size on WEAPON_PlasmaRifle_C_ExecuteUbergraph_WEAPON_PlasmaRifle");
static_assert(offsetof(WEAPON_PlasmaRifle_C_ExecuteUbergraph_WEAPON_PlasmaRifle, EntryPoint) == 0x000000, "Member 'WEAPON_PlasmaRifle_C_ExecuteUbergraph_WEAPON_PlasmaRifle::EntryPoint' has a wrong offset!");
static_assert(offsetof(WEAPON_PlasmaRifle_C_ExecuteUbergraph_WEAPON_PlasmaRifle, K2Node_CreateDelegate_OutputDelegate) == 0x000004, "Member 'WEAPON_PlasmaRifle_C_ExecuteUbergraph_WEAPON_PlasmaRifle::K2Node_CreateDelegate_OutputDelegate' has a wrong offset!");
static_assert(offsetof(WEAPON_PlasmaRifle_C_ExecuteUbergraph_WEAPON_PlasmaRifle, K2Node_CreateDelegate_OutputDelegate_1) == 0x000014, "Member 'WEAPON_PlasmaRifle_C_ExecuteUbergraph_WEAPON_PlasmaRifle::K2Node_CreateDelegate_OutputDelegate_1' has a wrong offset!");
static_assert(offsetof(WEAPON_PlasmaRifle_C_ExecuteUbergraph_WEAPON_PlasmaRifle, K2Node_CustomEvent_Loaded_4) == 0x000028, "Member 'WEAPON_PlasmaRifle_C_ExecuteUbergraph_WEAPON_PlasmaRifle::K2Node_CustomEvent_Loaded_4' has a wrong offset!");
static_assert(offsetof(WEAPON_PlasmaRifle_C_ExecuteUbergraph_WEAPON_PlasmaRifle, K2Node_CreateDelegate_OutputDelegate_2) == 0x000030, "Member 'WEAPON_PlasmaRifle_C_ExecuteUbergraph_WEAPON_PlasmaRifle::K2Node_CreateDelegate_OutputDelegate_2' has a wrong offset!");
static_assert(offsetof(WEAPON_PlasmaRifle_C_ExecuteUbergraph_WEAPON_PlasmaRifle, Temp_object_Variable) == 0x000040, "Member 'WEAPON_PlasmaRifle_C_ExecuteUbergraph_WEAPON_PlasmaRifle::Temp_object_Variable' has a wrong offset!");
static_assert(offsetof(WEAPON_PlasmaRifle_C_ExecuteUbergraph_WEAPON_PlasmaRifle, K2Node_DynamicCast_AsAnim_Montage) == 0x000048, "Member 'WEAPON_PlasmaRifle_C_ExecuteUbergraph_WEAPON_PlasmaRifle::K2Node_DynamicCast_AsAnim_Montage' has a wrong offset!");
static_assert(offsetof(WEAPON_PlasmaRifle_C_ExecuteUbergraph_WEAPON_PlasmaRifle, K2Node_DynamicCast_bSuccess) == 0x000050, "Member 'WEAPON_PlasmaRifle_C_ExecuteUbergraph_WEAPON_PlasmaRifle::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(WEAPON_PlasmaRifle_C_ExecuteUbergraph_WEAPON_PlasmaRifle, K2Node_CustomEvent_Loaded_3) == 0x000058, "Member 'WEAPON_PlasmaRifle_C_ExecuteUbergraph_WEAPON_PlasmaRifle::K2Node_CustomEvent_Loaded_3' has a wrong offset!");
static_assert(offsetof(WEAPON_PlasmaRifle_C_ExecuteUbergraph_WEAPON_PlasmaRifle, Temp_object_Variable_1) == 0x000060, "Member 'WEAPON_PlasmaRifle_C_ExecuteUbergraph_WEAPON_PlasmaRifle::Temp_object_Variable_1' has a wrong offset!");
static_assert(offsetof(WEAPON_PlasmaRifle_C_ExecuteUbergraph_WEAPON_PlasmaRifle, K2Node_DynamicCast_AsAnim_Montage_1) == 0x000068, "Member 'WEAPON_PlasmaRifle_C_ExecuteUbergraph_WEAPON_PlasmaRifle::K2Node_DynamicCast_AsAnim_Montage_1' has a wrong offset!");
static_assert(offsetof(WEAPON_PlasmaRifle_C_ExecuteUbergraph_WEAPON_PlasmaRifle, K2Node_DynamicCast_bSuccess_1) == 0x000070, "Member 'WEAPON_PlasmaRifle_C_ExecuteUbergraph_WEAPON_PlasmaRifle::K2Node_DynamicCast_bSuccess_1' has a wrong offset!");
static_assert(offsetof(WEAPON_PlasmaRifle_C_ExecuteUbergraph_WEAPON_PlasmaRifle, K2Node_CustomEvent_Loaded_2) == 0x000078, "Member 'WEAPON_PlasmaRifle_C_ExecuteUbergraph_WEAPON_PlasmaRifle::K2Node_CustomEvent_Loaded_2' has a wrong offset!");
static_assert(offsetof(WEAPON_PlasmaRifle_C_ExecuteUbergraph_WEAPON_PlasmaRifle, Temp_object_Variable_2) == 0x000080, "Member 'WEAPON_PlasmaRifle_C_ExecuteUbergraph_WEAPON_PlasmaRifle::Temp_object_Variable_2' has a wrong offset!");
static_assert(offsetof(WEAPON_PlasmaRifle_C_ExecuteUbergraph_WEAPON_PlasmaRifle, K2Node_DynamicCast_AsAnim_Montage_2) == 0x000088, "Member 'WEAPON_PlasmaRifle_C_ExecuteUbergraph_WEAPON_PlasmaRifle::K2Node_DynamicCast_AsAnim_Montage_2' has a wrong offset!");
static_assert(offsetof(WEAPON_PlasmaRifle_C_ExecuteUbergraph_WEAPON_PlasmaRifle, K2Node_DynamicCast_bSuccess_2) == 0x000090, "Member 'WEAPON_PlasmaRifle_C_ExecuteUbergraph_WEAPON_PlasmaRifle::K2Node_DynamicCast_bSuccess_2' has a wrong offset!");
static_assert(offsetof(WEAPON_PlasmaRifle_C_ExecuteUbergraph_WEAPON_PlasmaRifle, K2Node_CustomEvent_Loaded_1) == 0x000098, "Member 'WEAPON_PlasmaRifle_C_ExecuteUbergraph_WEAPON_PlasmaRifle::K2Node_CustomEvent_Loaded_1' has a wrong offset!");
static_assert(offsetof(WEAPON_PlasmaRifle_C_ExecuteUbergraph_WEAPON_PlasmaRifle, Temp_object_Variable_3) == 0x0000A0, "Member 'WEAPON_PlasmaRifle_C_ExecuteUbergraph_WEAPON_PlasmaRifle::Temp_object_Variable_3' has a wrong offset!");
static_assert(offsetof(WEAPON_PlasmaRifle_C_ExecuteUbergraph_WEAPON_PlasmaRifle, K2Node_DynamicCast_AsNiagara_System) == 0x0000A8, "Member 'WEAPON_PlasmaRifle_C_ExecuteUbergraph_WEAPON_PlasmaRifle::K2Node_DynamicCast_AsNiagara_System' has a wrong offset!");
static_assert(offsetof(WEAPON_PlasmaRifle_C_ExecuteUbergraph_WEAPON_PlasmaRifle, K2Node_DynamicCast_bSuccess_3) == 0x0000B0, "Member 'WEAPON_PlasmaRifle_C_ExecuteUbergraph_WEAPON_PlasmaRifle::K2Node_DynamicCast_bSuccess_3' has a wrong offset!");
static_assert(offsetof(WEAPON_PlasmaRifle_C_ExecuteUbergraph_WEAPON_PlasmaRifle, K2Node_CustomEvent_Loaded) == 0x0000B8, "Member 'WEAPON_PlasmaRifle_C_ExecuteUbergraph_WEAPON_PlasmaRifle::K2Node_CustomEvent_Loaded' has a wrong offset!");
static_assert(offsetof(WEAPON_PlasmaRifle_C_ExecuteUbergraph_WEAPON_PlasmaRifle, Temp_object_Variable_4) == 0x0000C0, "Member 'WEAPON_PlasmaRifle_C_ExecuteUbergraph_WEAPON_PlasmaRifle::Temp_object_Variable_4' has a wrong offset!");
static_assert(offsetof(WEAPON_PlasmaRifle_C_ExecuteUbergraph_WEAPON_PlasmaRifle, K2Node_DynamicCast_AsAnim_Montage_3) == 0x0000C8, "Member 'WEAPON_PlasmaRifle_C_ExecuteUbergraph_WEAPON_PlasmaRifle::K2Node_DynamicCast_AsAnim_Montage_3' has a wrong offset!");
static_assert(offsetof(WEAPON_PlasmaRifle_C_ExecuteUbergraph_WEAPON_PlasmaRifle, K2Node_DynamicCast_bSuccess_4) == 0x0000D0, "Member 'WEAPON_PlasmaRifle_C_ExecuteUbergraph_WEAPON_PlasmaRifle::K2Node_DynamicCast_bSuccess_4' has a wrong offset!");
static_assert(offsetof(WEAPON_PlasmaRifle_C_ExecuteUbergraph_WEAPON_PlasmaRifle, K2Node_CreateDelegate_OutputDelegate_3) == 0x0000D4, "Member 'WEAPON_PlasmaRifle_C_ExecuteUbergraph_WEAPON_PlasmaRifle::K2Node_CreateDelegate_OutputDelegate_3' has a wrong offset!");
static_assert(offsetof(WEAPON_PlasmaRifle_C_ExecuteUbergraph_WEAPON_PlasmaRifle, K2Node_CreateDelegate_OutputDelegate_4) == 0x0000E4, "Member 'WEAPON_PlasmaRifle_C_ExecuteUbergraph_WEAPON_PlasmaRifle::K2Node_CreateDelegate_OutputDelegate_4' has a wrong offset!");

// Function WEAPON_PlasmaRifle.WEAPON_PlasmaRifle_C.OnLoaded_64ED002C41245FED58C5A3B669098DA8
// 0x0008 (0x0008 - 0x0000)
struct WEAPON_PlasmaRifle_C_OnLoaded_64ED002C41245FED58C5A3B669098DA8 final
{
public:
	class UObject*                                Loaded;                                            // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(WEAPON_PlasmaRifle_C_OnLoaded_64ED002C41245FED58C5A3B669098DA8) == 0x000008, "Wrong alignment on WEAPON_PlasmaRifle_C_OnLoaded_64ED002C41245FED58C5A3B669098DA8");
static_assert(sizeof(WEAPON_PlasmaRifle_C_OnLoaded_64ED002C41245FED58C5A3B669098DA8) == 0x000008, "Wrong size on WEAPON_PlasmaRifle_C_OnLoaded_64ED002C41245FED58C5A3B669098DA8");
static_assert(offsetof(WEAPON_PlasmaRifle_C_OnLoaded_64ED002C41245FED58C5A3B669098DA8, Loaded) == 0x000000, "Member 'WEAPON_PlasmaRifle_C_OnLoaded_64ED002C41245FED58C5A3B669098DA8::Loaded' has a wrong offset!");

// Function WEAPON_PlasmaRifle.WEAPON_PlasmaRifle_C.OnLoaded_897F24074E104FBB6E4528A8E709F6FB
// 0x0008 (0x0008 - 0x0000)
struct WEAPON_PlasmaRifle_C_OnLoaded_897F24074E104FBB6E4528A8E709F6FB final
{
public:
	class UObject*                                Loaded;                                            // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(WEAPON_PlasmaRifle_C_OnLoaded_897F24074E104FBB6E4528A8E709F6FB) == 0x000008, "Wrong alignment on WEAPON_PlasmaRifle_C_OnLoaded_897F24074E104FBB6E4528A8E709F6FB");
static_assert(sizeof(WEAPON_PlasmaRifle_C_OnLoaded_897F24074E104FBB6E4528A8E709F6FB) == 0x000008, "Wrong size on WEAPON_PlasmaRifle_C_OnLoaded_897F24074E104FBB6E4528A8E709F6FB");
static_assert(offsetof(WEAPON_PlasmaRifle_C_OnLoaded_897F24074E104FBB6E4528A8E709F6FB, Loaded) == 0x000000, "Member 'WEAPON_PlasmaRifle_C_OnLoaded_897F24074E104FBB6E4528A8E709F6FB::Loaded' has a wrong offset!");

// Function WEAPON_PlasmaRifle.WEAPON_PlasmaRifle_C.OnLoaded_5C2A5B784F79044EB5468B9E5EE051BD
// 0x0008 (0x0008 - 0x0000)
struct WEAPON_PlasmaRifle_C_OnLoaded_5C2A5B784F79044EB5468B9E5EE051BD final
{
public:
	class UObject*                                Loaded;                                            // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(WEAPON_PlasmaRifle_C_OnLoaded_5C2A5B784F79044EB5468B9E5EE051BD) == 0x000008, "Wrong alignment on WEAPON_PlasmaRifle_C_OnLoaded_5C2A5B784F79044EB5468B9E5EE051BD");
static_assert(sizeof(WEAPON_PlasmaRifle_C_OnLoaded_5C2A5B784F79044EB5468B9E5EE051BD) == 0x000008, "Wrong size on WEAPON_PlasmaRifle_C_OnLoaded_5C2A5B784F79044EB5468B9E5EE051BD");
static_assert(offsetof(WEAPON_PlasmaRifle_C_OnLoaded_5C2A5B784F79044EB5468B9E5EE051BD, Loaded) == 0x000000, "Member 'WEAPON_PlasmaRifle_C_OnLoaded_5C2A5B784F79044EB5468B9E5EE051BD::Loaded' has a wrong offset!");

// Function WEAPON_PlasmaRifle.WEAPON_PlasmaRifle_C.OnLoaded_6A82DD424517CD77CFB98E93F354BD36
// 0x0008 (0x0008 - 0x0000)
struct WEAPON_PlasmaRifle_C_OnLoaded_6A82DD424517CD77CFB98E93F354BD36 final
{
public:
	class UObject*                                Loaded;                                            // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(WEAPON_PlasmaRifle_C_OnLoaded_6A82DD424517CD77CFB98E93F354BD36) == 0x000008, "Wrong alignment on WEAPON_PlasmaRifle_C_OnLoaded_6A82DD424517CD77CFB98E93F354BD36");
static_assert(sizeof(WEAPON_PlasmaRifle_C_OnLoaded_6A82DD424517CD77CFB98E93F354BD36) == 0x000008, "Wrong size on WEAPON_PlasmaRifle_C_OnLoaded_6A82DD424517CD77CFB98E93F354BD36");
static_assert(offsetof(WEAPON_PlasmaRifle_C_OnLoaded_6A82DD424517CD77CFB98E93F354BD36, Loaded) == 0x000000, "Member 'WEAPON_PlasmaRifle_C_OnLoaded_6A82DD424517CD77CFB98E93F354BD36::Loaded' has a wrong offset!");

// Function WEAPON_PlasmaRifle.WEAPON_PlasmaRifle_C.OnLoaded_1F8561064BFACC4775B8629AC3F18BD3
// 0x0008 (0x0008 - 0x0000)
struct WEAPON_PlasmaRifle_C_OnLoaded_1F8561064BFACC4775B8629AC3F18BD3 final
{
public:
	class UObject*                                Loaded;                                            // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(WEAPON_PlasmaRifle_C_OnLoaded_1F8561064BFACC4775B8629AC3F18BD3) == 0x000008, "Wrong alignment on WEAPON_PlasmaRifle_C_OnLoaded_1F8561064BFACC4775B8629AC3F18BD3");
static_assert(sizeof(WEAPON_PlasmaRifle_C_OnLoaded_1F8561064BFACC4775B8629AC3F18BD3) == 0x000008, "Wrong size on WEAPON_PlasmaRifle_C_OnLoaded_1F8561064BFACC4775B8629AC3F18BD3");
static_assert(offsetof(WEAPON_PlasmaRifle_C_OnLoaded_1F8561064BFACC4775B8629AC3F18BD3, Loaded) == 0x000000, "Member 'WEAPON_PlasmaRifle_C_OnLoaded_1F8561064BFACC4775B8629AC3F18BD3::Loaded' has a wrong offset!");

// Function WEAPON_PlasmaRifle.WEAPON_PlasmaRifle_C.EnableDamage
// 0x0238 (0x0238 - 0x0000)
struct WEAPON_PlasmaRifle_C_EnableDamage final
{
public:
	bool                                          Result;                                            // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FSTRUCT_WeaponMode                     CallFunc_GetCurrentMode_Mode;                      // 0x0008(0x0100)(HasGetValueTypeHash)
	struct FSTRUCT_WeaponMode                     CallFunc_GetCurrentMode_Mode_1;                    // 0x0108(0x0100)(HasGetValueTypeHash)
	int32                                         CallFunc_GetWeaponPropertyValueByType_Value;       // 0x0208(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_GetWeaponPropertyValueByType_Value_1;     // 0x020C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Conv_IntToFloat_ReturnValue;              // 0x0210(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Conv_IntToFloat_ReturnValue_1;            // 0x0214(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_SetCurrentMode_Result;                    // 0x0218(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_219[0x7];                                      // 0x0219(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class ABulletProjectile_Base_C*               CallFunc_FireProjectile_FiredBullet;               // 0x0220(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class ABulletProjectile_Base_C*               CallFunc_FireProjectile_FiredBullet_1;             // 0x0228(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_SwitchInteger_CmpSuccess;                   // 0x0230(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_EnableDamage_Result;                      // 0x0231(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(WEAPON_PlasmaRifle_C_EnableDamage) == 0x000008, "Wrong alignment on WEAPON_PlasmaRifle_C_EnableDamage");
static_assert(sizeof(WEAPON_PlasmaRifle_C_EnableDamage) == 0x000238, "Wrong size on WEAPON_PlasmaRifle_C_EnableDamage");
static_assert(offsetof(WEAPON_PlasmaRifle_C_EnableDamage, Result) == 0x000000, "Member 'WEAPON_PlasmaRifle_C_EnableDamage::Result' has a wrong offset!");
static_assert(offsetof(WEAPON_PlasmaRifle_C_EnableDamage, CallFunc_GetCurrentMode_Mode) == 0x000008, "Member 'WEAPON_PlasmaRifle_C_EnableDamage::CallFunc_GetCurrentMode_Mode' has a wrong offset!");
static_assert(offsetof(WEAPON_PlasmaRifle_C_EnableDamage, CallFunc_GetCurrentMode_Mode_1) == 0x000108, "Member 'WEAPON_PlasmaRifle_C_EnableDamage::CallFunc_GetCurrentMode_Mode_1' has a wrong offset!");
static_assert(offsetof(WEAPON_PlasmaRifle_C_EnableDamage, CallFunc_GetWeaponPropertyValueByType_Value) == 0x000208, "Member 'WEAPON_PlasmaRifle_C_EnableDamage::CallFunc_GetWeaponPropertyValueByType_Value' has a wrong offset!");
static_assert(offsetof(WEAPON_PlasmaRifle_C_EnableDamage, CallFunc_GetWeaponPropertyValueByType_Value_1) == 0x00020C, "Member 'WEAPON_PlasmaRifle_C_EnableDamage::CallFunc_GetWeaponPropertyValueByType_Value_1' has a wrong offset!");
static_assert(offsetof(WEAPON_PlasmaRifle_C_EnableDamage, CallFunc_Conv_IntToFloat_ReturnValue) == 0x000210, "Member 'WEAPON_PlasmaRifle_C_EnableDamage::CallFunc_Conv_IntToFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(WEAPON_PlasmaRifle_C_EnableDamage, CallFunc_Conv_IntToFloat_ReturnValue_1) == 0x000214, "Member 'WEAPON_PlasmaRifle_C_EnableDamage::CallFunc_Conv_IntToFloat_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(WEAPON_PlasmaRifle_C_EnableDamage, CallFunc_SetCurrentMode_Result) == 0x000218, "Member 'WEAPON_PlasmaRifle_C_EnableDamage::CallFunc_SetCurrentMode_Result' has a wrong offset!");
static_assert(offsetof(WEAPON_PlasmaRifle_C_EnableDamage, CallFunc_FireProjectile_FiredBullet) == 0x000220, "Member 'WEAPON_PlasmaRifle_C_EnableDamage::CallFunc_FireProjectile_FiredBullet' has a wrong offset!");
static_assert(offsetof(WEAPON_PlasmaRifle_C_EnableDamage, CallFunc_FireProjectile_FiredBullet_1) == 0x000228, "Member 'WEAPON_PlasmaRifle_C_EnableDamage::CallFunc_FireProjectile_FiredBullet_1' has a wrong offset!");
static_assert(offsetof(WEAPON_PlasmaRifle_C_EnableDamage, K2Node_SwitchInteger_CmpSuccess) == 0x000230, "Member 'WEAPON_PlasmaRifle_C_EnableDamage::K2Node_SwitchInteger_CmpSuccess' has a wrong offset!");
static_assert(offsetof(WEAPON_PlasmaRifle_C_EnableDamage, CallFunc_EnableDamage_Result) == 0x000231, "Member 'WEAPON_PlasmaRifle_C_EnableDamage::CallFunc_EnableDamage_Result' has a wrong offset!");

// Function WEAPON_PlasmaRifle.WEAPON_PlasmaRifle_C.HasLoadedPlasmaCore
// 0x0001 (0x0001 - 0x0000)
struct WEAPON_PlasmaRifle_C_HasLoadedPlasmaCore final
{
public:
	bool                                          Result;                                            // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(WEAPON_PlasmaRifle_C_HasLoadedPlasmaCore) == 0x000001, "Wrong alignment on WEAPON_PlasmaRifle_C_HasLoadedPlasmaCore");
static_assert(sizeof(WEAPON_PlasmaRifle_C_HasLoadedPlasmaCore) == 0x000001, "Wrong size on WEAPON_PlasmaRifle_C_HasLoadedPlasmaCore");
static_assert(offsetof(WEAPON_PlasmaRifle_C_HasLoadedPlasmaCore, Result) == 0x000000, "Member 'WEAPON_PlasmaRifle_C_HasLoadedPlasmaCore::Result' has a wrong offset!");

// Function WEAPON_PlasmaRifle.WEAPON_PlasmaRifle_C.HasSparePlasmaAmmo
// 0x0028 (0x0028 - 0x0000)
struct WEAPON_PlasmaRifle_C_HasSparePlasmaAmmo final
{
public:
	bool                                          HasSpareAmmo;                                      // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UInventoryBag_C*                        AmmoBag;                                           // 0x0008(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UCOMP_Inventory_C*                      CallFunc_GetInventory_Inventory;                   // 0x0010(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UInventoryBag_C*                        CallFunc_GetBagByType_Bag;                         // 0x0018(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_GetItemCount_Result;                      // 0x0020(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Greater_IntInt_ReturnValue;               // 0x0024(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0025(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(WEAPON_PlasmaRifle_C_HasSparePlasmaAmmo) == 0x000008, "Wrong alignment on WEAPON_PlasmaRifle_C_HasSparePlasmaAmmo");
static_assert(sizeof(WEAPON_PlasmaRifle_C_HasSparePlasmaAmmo) == 0x000028, "Wrong size on WEAPON_PlasmaRifle_C_HasSparePlasmaAmmo");
static_assert(offsetof(WEAPON_PlasmaRifle_C_HasSparePlasmaAmmo, HasSpareAmmo) == 0x000000, "Member 'WEAPON_PlasmaRifle_C_HasSparePlasmaAmmo::HasSpareAmmo' has a wrong offset!");
static_assert(offsetof(WEAPON_PlasmaRifle_C_HasSparePlasmaAmmo, AmmoBag) == 0x000008, "Member 'WEAPON_PlasmaRifle_C_HasSparePlasmaAmmo::AmmoBag' has a wrong offset!");
static_assert(offsetof(WEAPON_PlasmaRifle_C_HasSparePlasmaAmmo, CallFunc_GetInventory_Inventory) == 0x000010, "Member 'WEAPON_PlasmaRifle_C_HasSparePlasmaAmmo::CallFunc_GetInventory_Inventory' has a wrong offset!");
static_assert(offsetof(WEAPON_PlasmaRifle_C_HasSparePlasmaAmmo, CallFunc_GetBagByType_Bag) == 0x000018, "Member 'WEAPON_PlasmaRifle_C_HasSparePlasmaAmmo::CallFunc_GetBagByType_Bag' has a wrong offset!");
static_assert(offsetof(WEAPON_PlasmaRifle_C_HasSparePlasmaAmmo, CallFunc_GetItemCount_Result) == 0x000020, "Member 'WEAPON_PlasmaRifle_C_HasSparePlasmaAmmo::CallFunc_GetItemCount_Result' has a wrong offset!");
static_assert(offsetof(WEAPON_PlasmaRifle_C_HasSparePlasmaAmmo, CallFunc_Greater_IntInt_ReturnValue) == 0x000024, "Member 'WEAPON_PlasmaRifle_C_HasSparePlasmaAmmo::CallFunc_Greater_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(WEAPON_PlasmaRifle_C_HasSparePlasmaAmmo, CallFunc_IsValid_ReturnValue) == 0x000025, "Member 'WEAPON_PlasmaRifle_C_HasSparePlasmaAmmo::CallFunc_IsValid_ReturnValue' has a wrong offset!");

// Function WEAPON_PlasmaRifle.WEAPON_PlasmaRifle_C.IsLoadingOrUnloadingPlasmaCore
// 0x0050 (0x0050 - 0x0000)
struct WEAPON_PlasmaRifle_C_IsLoadingOrUnloadingPlasmaCore final
{
public:
	bool                                          Result;                                            // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class APAWN_SystemShockCharacter_C*           CallFunc_GetOwnerCharacter_Character;              // 0x0008(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0010(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UAnimMontage*                           CallFunc_GetCurrentMontage_Result;                 // 0x0018(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TSoftObjectPtr<class UAnimMontage>            CallFunc_Conv_ObjectToSoftObjectReference_ReturnValue; // 0x0020(0x0028)(UObjectWrapper, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_SoftObjectReference_ReturnValue; // 0x0048(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_EqualEqual_SoftObjectReference_ReturnValue_1; // 0x0049(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BooleanOR_ReturnValue;                    // 0x004A(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(WEAPON_PlasmaRifle_C_IsLoadingOrUnloadingPlasmaCore) == 0x000008, "Wrong alignment on WEAPON_PlasmaRifle_C_IsLoadingOrUnloadingPlasmaCore");
static_assert(sizeof(WEAPON_PlasmaRifle_C_IsLoadingOrUnloadingPlasmaCore) == 0x000050, "Wrong size on WEAPON_PlasmaRifle_C_IsLoadingOrUnloadingPlasmaCore");
static_assert(offsetof(WEAPON_PlasmaRifle_C_IsLoadingOrUnloadingPlasmaCore, Result) == 0x000000, "Member 'WEAPON_PlasmaRifle_C_IsLoadingOrUnloadingPlasmaCore::Result' has a wrong offset!");
static_assert(offsetof(WEAPON_PlasmaRifle_C_IsLoadingOrUnloadingPlasmaCore, CallFunc_GetOwnerCharacter_Character) == 0x000008, "Member 'WEAPON_PlasmaRifle_C_IsLoadingOrUnloadingPlasmaCore::CallFunc_GetOwnerCharacter_Character' has a wrong offset!");
static_assert(offsetof(WEAPON_PlasmaRifle_C_IsLoadingOrUnloadingPlasmaCore, CallFunc_IsValid_ReturnValue) == 0x000010, "Member 'WEAPON_PlasmaRifle_C_IsLoadingOrUnloadingPlasmaCore::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(WEAPON_PlasmaRifle_C_IsLoadingOrUnloadingPlasmaCore, CallFunc_GetCurrentMontage_Result) == 0x000018, "Member 'WEAPON_PlasmaRifle_C_IsLoadingOrUnloadingPlasmaCore::CallFunc_GetCurrentMontage_Result' has a wrong offset!");
static_assert(offsetof(WEAPON_PlasmaRifle_C_IsLoadingOrUnloadingPlasmaCore, CallFunc_Conv_ObjectToSoftObjectReference_ReturnValue) == 0x000020, "Member 'WEAPON_PlasmaRifle_C_IsLoadingOrUnloadingPlasmaCore::CallFunc_Conv_ObjectToSoftObjectReference_ReturnValue' has a wrong offset!");
static_assert(offsetof(WEAPON_PlasmaRifle_C_IsLoadingOrUnloadingPlasmaCore, CallFunc_EqualEqual_SoftObjectReference_ReturnValue) == 0x000048, "Member 'WEAPON_PlasmaRifle_C_IsLoadingOrUnloadingPlasmaCore::CallFunc_EqualEqual_SoftObjectReference_ReturnValue' has a wrong offset!");
static_assert(offsetof(WEAPON_PlasmaRifle_C_IsLoadingOrUnloadingPlasmaCore, CallFunc_EqualEqual_SoftObjectReference_ReturnValue_1) == 0x000049, "Member 'WEAPON_PlasmaRifle_C_IsLoadingOrUnloadingPlasmaCore::CallFunc_EqualEqual_SoftObjectReference_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(WEAPON_PlasmaRifle_C_IsLoadingOrUnloadingPlasmaCore, CallFunc_BooleanOR_ReturnValue) == 0x00004A, "Member 'WEAPON_PlasmaRifle_C_IsLoadingOrUnloadingPlasmaCore::CallFunc_BooleanOR_ReturnValue' has a wrong offset!");

// Function WEAPON_PlasmaRifle.WEAPON_PlasmaRifle_C.FireProjectile
// 0x0390 (0x0390 - 0x0000)
struct WEAPON_PlasmaRifle_C_FireProjectile final
{
public:
	class UClass*                                 ProjectileClass;                                   // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          HasKickback;                                       // 0x0008(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class ABulletProjectile_Base_C*               FiredBullet;                                       // 0x0010(0x0008)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FSTRUCT_WeaponMode                     CurrentMode;                                       // 0x0018(0x0100)(Edit, BlueprintVisible, HasGetValueTypeHash)
	class ABulletProjectile_Base_C*               BulletProjectile;                                  // 0x0118(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                AimDirection;                                      // 0x0120(0x000C)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                ProjectileDirection;                               // 0x012C(0x000C)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                BarrelLocation;                                    // 0x0138(0x000C)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CameraDirection;                                   // 0x0144(0x000C)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CameraLocation;                                    // 0x0150(0x000C)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_15C[0x4];                                      // 0x015C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class APAWN_SystemShockCharacter_C*           CharacterOwner;                                    // 0x0160(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UNiagaraComponent*                      CallFunc_PlayDischargeParticleFX_SpawnedComponent; // 0x0168(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_GetMaxCombatTraceDistance_Distance;       // 0x0170(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_174[0x4];                                      // 0x0174(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class APAWN_SystemShockCharacter_C*           CallFunc_GetOwnerCharacter_Character;              // 0x0178(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UMeshComponent*                         CallFunc_GetWeaponMeshComponent_Result;            // 0x0180(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_GetSocketLocation_ReturnValue;            // 0x0188(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_GetWeaponPropertyValueByType_Value;       // 0x0194(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TArray<struct FAttribModApplyData>            K2Node_MakeArray_Array;                            // 0x0198(0x0010)(ReferenceParm)
	float                                         CallFunc_Conv_IntToFloat_ReturnValue;              // 0x01A8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1AC[0x4];                                      // 0x01AC(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class APAWN_Hacker_Simple_C*                  K2Node_DynamicCast_AsPAWN_Hacker_Simple;           // 0x01B0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x01B8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_1B9[0x3];                                      // 0x01B9(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FRotator                               CallFunc_Conv_VectorToRotator_ReturnValue;         // 0x01BC(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                         CallFunc_GetCurrentSpreadAngle_Result;             // 0x01C8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1CC[0x4];                                      // 0x01CC(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FSTRUCT_WeaponMode                     CallFunc_GetCurrentMode_Mode;                      // 0x01D0(0x0100)(HasGetValueTypeHash)
	struct FTransform                             CallFunc_MakeTransform_ReturnValue;                // 0x02D0(0x0030)(IsPlainOldData, NoDestructor)
	class AActor*                                 CallFunc_BeginDeferredActorSpawnFromClass_ReturnValue; // 0x0300(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_TriangulateRayDirection_TriangulatedDirection; // 0x0308(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_314[0x4];                                      // 0x0314(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class ABulletProjectile_Base_C*               CallFunc_FinishSpawningActor_ReturnValue;          // 0x0318(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_GetRandomWeaponSpreadDirection_SpreadDirection; // 0x0320(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_32C[0x4];                                      // 0x032C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTransform                             CallFunc_GetHeadTransform_Transform;               // 0x0330(0x0030)(IsPlainOldData, NoDestructor)
	struct FVector                                CallFunc_BreakTransform_Location;                  // 0x0360(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               CallFunc_BreakTransform_Rotation;                  // 0x036C(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FVector                                CallFunc_BreakTransform_Scale;                     // 0x0378(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_GetForwardVector_ReturnValue;             // 0x0384(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(WEAPON_PlasmaRifle_C_FireProjectile) == 0x000010, "Wrong alignment on WEAPON_PlasmaRifle_C_FireProjectile");
static_assert(sizeof(WEAPON_PlasmaRifle_C_FireProjectile) == 0x000390, "Wrong size on WEAPON_PlasmaRifle_C_FireProjectile");
static_assert(offsetof(WEAPON_PlasmaRifle_C_FireProjectile, ProjectileClass) == 0x000000, "Member 'WEAPON_PlasmaRifle_C_FireProjectile::ProjectileClass' has a wrong offset!");
static_assert(offsetof(WEAPON_PlasmaRifle_C_FireProjectile, HasKickback) == 0x000008, "Member 'WEAPON_PlasmaRifle_C_FireProjectile::HasKickback' has a wrong offset!");
static_assert(offsetof(WEAPON_PlasmaRifle_C_FireProjectile, FiredBullet) == 0x000010, "Member 'WEAPON_PlasmaRifle_C_FireProjectile::FiredBullet' has a wrong offset!");
static_assert(offsetof(WEAPON_PlasmaRifle_C_FireProjectile, CurrentMode) == 0x000018, "Member 'WEAPON_PlasmaRifle_C_FireProjectile::CurrentMode' has a wrong offset!");
static_assert(offsetof(WEAPON_PlasmaRifle_C_FireProjectile, BulletProjectile) == 0x000118, "Member 'WEAPON_PlasmaRifle_C_FireProjectile::BulletProjectile' has a wrong offset!");
static_assert(offsetof(WEAPON_PlasmaRifle_C_FireProjectile, AimDirection) == 0x000120, "Member 'WEAPON_PlasmaRifle_C_FireProjectile::AimDirection' has a wrong offset!");
static_assert(offsetof(WEAPON_PlasmaRifle_C_FireProjectile, ProjectileDirection) == 0x00012C, "Member 'WEAPON_PlasmaRifle_C_FireProjectile::ProjectileDirection' has a wrong offset!");
static_assert(offsetof(WEAPON_PlasmaRifle_C_FireProjectile, BarrelLocation) == 0x000138, "Member 'WEAPON_PlasmaRifle_C_FireProjectile::BarrelLocation' has a wrong offset!");
static_assert(offsetof(WEAPON_PlasmaRifle_C_FireProjectile, CameraDirection) == 0x000144, "Member 'WEAPON_PlasmaRifle_C_FireProjectile::CameraDirection' has a wrong offset!");
static_assert(offsetof(WEAPON_PlasmaRifle_C_FireProjectile, CameraLocation) == 0x000150, "Member 'WEAPON_PlasmaRifle_C_FireProjectile::CameraLocation' has a wrong offset!");
static_assert(offsetof(WEAPON_PlasmaRifle_C_FireProjectile, CharacterOwner) == 0x000160, "Member 'WEAPON_PlasmaRifle_C_FireProjectile::CharacterOwner' has a wrong offset!");
static_assert(offsetof(WEAPON_PlasmaRifle_C_FireProjectile, CallFunc_PlayDischargeParticleFX_SpawnedComponent) == 0x000168, "Member 'WEAPON_PlasmaRifle_C_FireProjectile::CallFunc_PlayDischargeParticleFX_SpawnedComponent' has a wrong offset!");
static_assert(offsetof(WEAPON_PlasmaRifle_C_FireProjectile, CallFunc_GetMaxCombatTraceDistance_Distance) == 0x000170, "Member 'WEAPON_PlasmaRifle_C_FireProjectile::CallFunc_GetMaxCombatTraceDistance_Distance' has a wrong offset!");
static_assert(offsetof(WEAPON_PlasmaRifle_C_FireProjectile, CallFunc_GetOwnerCharacter_Character) == 0x000178, "Member 'WEAPON_PlasmaRifle_C_FireProjectile::CallFunc_GetOwnerCharacter_Character' has a wrong offset!");
static_assert(offsetof(WEAPON_PlasmaRifle_C_FireProjectile, CallFunc_GetWeaponMeshComponent_Result) == 0x000180, "Member 'WEAPON_PlasmaRifle_C_FireProjectile::CallFunc_GetWeaponMeshComponent_Result' has a wrong offset!");
static_assert(offsetof(WEAPON_PlasmaRifle_C_FireProjectile, CallFunc_GetSocketLocation_ReturnValue) == 0x000188, "Member 'WEAPON_PlasmaRifle_C_FireProjectile::CallFunc_GetSocketLocation_ReturnValue' has a wrong offset!");
static_assert(offsetof(WEAPON_PlasmaRifle_C_FireProjectile, CallFunc_GetWeaponPropertyValueByType_Value) == 0x000194, "Member 'WEAPON_PlasmaRifle_C_FireProjectile::CallFunc_GetWeaponPropertyValueByType_Value' has a wrong offset!");
static_assert(offsetof(WEAPON_PlasmaRifle_C_FireProjectile, K2Node_MakeArray_Array) == 0x000198, "Member 'WEAPON_PlasmaRifle_C_FireProjectile::K2Node_MakeArray_Array' has a wrong offset!");
static_assert(offsetof(WEAPON_PlasmaRifle_C_FireProjectile, CallFunc_Conv_IntToFloat_ReturnValue) == 0x0001A8, "Member 'WEAPON_PlasmaRifle_C_FireProjectile::CallFunc_Conv_IntToFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(WEAPON_PlasmaRifle_C_FireProjectile, K2Node_DynamicCast_AsPAWN_Hacker_Simple) == 0x0001B0, "Member 'WEAPON_PlasmaRifle_C_FireProjectile::K2Node_DynamicCast_AsPAWN_Hacker_Simple' has a wrong offset!");
static_assert(offsetof(WEAPON_PlasmaRifle_C_FireProjectile, K2Node_DynamicCast_bSuccess) == 0x0001B8, "Member 'WEAPON_PlasmaRifle_C_FireProjectile::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(WEAPON_PlasmaRifle_C_FireProjectile, CallFunc_Conv_VectorToRotator_ReturnValue) == 0x0001BC, "Member 'WEAPON_PlasmaRifle_C_FireProjectile::CallFunc_Conv_VectorToRotator_ReturnValue' has a wrong offset!");
static_assert(offsetof(WEAPON_PlasmaRifle_C_FireProjectile, CallFunc_GetCurrentSpreadAngle_Result) == 0x0001C8, "Member 'WEAPON_PlasmaRifle_C_FireProjectile::CallFunc_GetCurrentSpreadAngle_Result' has a wrong offset!");
static_assert(offsetof(WEAPON_PlasmaRifle_C_FireProjectile, CallFunc_GetCurrentMode_Mode) == 0x0001D0, "Member 'WEAPON_PlasmaRifle_C_FireProjectile::CallFunc_GetCurrentMode_Mode' has a wrong offset!");
static_assert(offsetof(WEAPON_PlasmaRifle_C_FireProjectile, CallFunc_MakeTransform_ReturnValue) == 0x0002D0, "Member 'WEAPON_PlasmaRifle_C_FireProjectile::CallFunc_MakeTransform_ReturnValue' has a wrong offset!");
static_assert(offsetof(WEAPON_PlasmaRifle_C_FireProjectile, CallFunc_BeginDeferredActorSpawnFromClass_ReturnValue) == 0x000300, "Member 'WEAPON_PlasmaRifle_C_FireProjectile::CallFunc_BeginDeferredActorSpawnFromClass_ReturnValue' has a wrong offset!");
static_assert(offsetof(WEAPON_PlasmaRifle_C_FireProjectile, CallFunc_TriangulateRayDirection_TriangulatedDirection) == 0x000308, "Member 'WEAPON_PlasmaRifle_C_FireProjectile::CallFunc_TriangulateRayDirection_TriangulatedDirection' has a wrong offset!");
static_assert(offsetof(WEAPON_PlasmaRifle_C_FireProjectile, CallFunc_FinishSpawningActor_ReturnValue) == 0x000318, "Member 'WEAPON_PlasmaRifle_C_FireProjectile::CallFunc_FinishSpawningActor_ReturnValue' has a wrong offset!");
static_assert(offsetof(WEAPON_PlasmaRifle_C_FireProjectile, CallFunc_GetRandomWeaponSpreadDirection_SpreadDirection) == 0x000320, "Member 'WEAPON_PlasmaRifle_C_FireProjectile::CallFunc_GetRandomWeaponSpreadDirection_SpreadDirection' has a wrong offset!");
static_assert(offsetof(WEAPON_PlasmaRifle_C_FireProjectile, CallFunc_GetHeadTransform_Transform) == 0x000330, "Member 'WEAPON_PlasmaRifle_C_FireProjectile::CallFunc_GetHeadTransform_Transform' has a wrong offset!");
static_assert(offsetof(WEAPON_PlasmaRifle_C_FireProjectile, CallFunc_BreakTransform_Location) == 0x000360, "Member 'WEAPON_PlasmaRifle_C_FireProjectile::CallFunc_BreakTransform_Location' has a wrong offset!");
static_assert(offsetof(WEAPON_PlasmaRifle_C_FireProjectile, CallFunc_BreakTransform_Rotation) == 0x00036C, "Member 'WEAPON_PlasmaRifle_C_FireProjectile::CallFunc_BreakTransform_Rotation' has a wrong offset!");
static_assert(offsetof(WEAPON_PlasmaRifle_C_FireProjectile, CallFunc_BreakTransform_Scale) == 0x000378, "Member 'WEAPON_PlasmaRifle_C_FireProjectile::CallFunc_BreakTransform_Scale' has a wrong offset!");
static_assert(offsetof(WEAPON_PlasmaRifle_C_FireProjectile, CallFunc_GetForwardVector_ReturnValue) == 0x000384, "Member 'WEAPON_PlasmaRifle_C_FireProjectile::CallFunc_GetForwardVector_ReturnValue' has a wrong offset!");

// Function WEAPON_PlasmaRifle.WEAPON_PlasmaRifle_C.OnBecomeUnactivatable
// 0x0002 (0x0002 - 0x0000)
struct WEAPON_PlasmaRifle_C_OnBecomeUnactivatable final
{
public:
	bool                                          Result;                                            // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_OnBecomeUnactivatable_Result;             // 0x0001(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(WEAPON_PlasmaRifle_C_OnBecomeUnactivatable) == 0x000001, "Wrong alignment on WEAPON_PlasmaRifle_C_OnBecomeUnactivatable");
static_assert(sizeof(WEAPON_PlasmaRifle_C_OnBecomeUnactivatable) == 0x000002, "Wrong size on WEAPON_PlasmaRifle_C_OnBecomeUnactivatable");
static_assert(offsetof(WEAPON_PlasmaRifle_C_OnBecomeUnactivatable, Result) == 0x000000, "Member 'WEAPON_PlasmaRifle_C_OnBecomeUnactivatable::Result' has a wrong offset!");
static_assert(offsetof(WEAPON_PlasmaRifle_C_OnBecomeUnactivatable, CallFunc_OnBecomeUnactivatable_Result) == 0x000001, "Member 'WEAPON_PlasmaRifle_C_OnBecomeUnactivatable::CallFunc_OnBecomeUnactivatable_Result' has a wrong offset!");

// Function WEAPON_PlasmaRifle.WEAPON_PlasmaRifle_C.TrySetPlasmaCoreInChamber
// 0x00F0 (0x00F0 - 0x0000)
struct WEAPON_PlasmaRifle_C_TrySetPlasmaCoreInChamber final
{
public:
	bool                                          InChamber;                                         // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Result;                                            // 0x0001(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_2[0x6];                                        // 0x0002(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class UITEM_Base_C*                           PlasmaCoreItem;                                    // 0x0008(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_SetCurrentMode_Result;                    // 0x0010(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_SetCurrentMode_Result_1;                  // 0x0011(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_12[0x6];                                       // 0x0012(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class UInventoryBag_C*                        CallFunc_GetBag_Result;                            // 0x0018(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UITEM_Base_C*                           CallFunc_RemoveItemCount_RemovedItem;              // 0x0020(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0028(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_29[0x7];                                       // 0x0029(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FSTRUCT_HardItemParams                 K2Node_MakeStruct_STRUCT_HardItemParams;           // 0x0030(0x0010)(IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UCOMP_Inventory_C*                      CallFunc_GetInventory_Inventory;                   // 0x0040(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class APAWN_SystemShockCharacter_C*           CallFunc_GetOwnerCharacter_Character;              // 0x0048(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 CallFunc_GetOwner_ReturnValue;                     // 0x0050(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_K2_GetActorLocation_ReturnValue;          // 0x0058(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue_1;                    // 0x0064(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_65[0xB];                                       // 0x0065(0x000B)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTransform                             CallFunc_Conv_VectorToTransform_ReturnValue;       // 0x0070(0x0030)(IsPlainOldData, NoDestructor)
	class AActor*                                 CallFunc_BeginDeferredActorSpawnFromClass_ReturnValue; // 0x00A0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class APAWN_SystemShockCharacter_C*           CallFunc_GetOwnerCharacter_Character_1;            // 0x00A8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UCOMP_Inventory_C*                      CallFunc_GetInventoryComponent_Inventory;          // 0x00B0(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class APICKUP_AMMO_PlasmaCore_C*              CallFunc_FinishSpawningActor_ReturnValue;          // 0x00B8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_GrantItem_Result;                         // 0x00C0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_C1[0x7];                                       // 0x00C1(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class APAWN_SystemShockCharacter_C*           CallFunc_GetOwnerCharacter_Character_2;            // 0x00C8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Not_PreBool_ReturnValue;                  // 0x00D0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_D1[0x7];                                       // 0x00D1(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UCOMP_Inventory_C*                      CallFunc_GetInventoryComponent_Inventory_1;        // 0x00D8(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UITEM_Base_C*                           CallFunc_FindItem_FoundItem;                       // 0x00E0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(WEAPON_PlasmaRifle_C_TrySetPlasmaCoreInChamber) == 0x000010, "Wrong alignment on WEAPON_PlasmaRifle_C_TrySetPlasmaCoreInChamber");
static_assert(sizeof(WEAPON_PlasmaRifle_C_TrySetPlasmaCoreInChamber) == 0x0000F0, "Wrong size on WEAPON_PlasmaRifle_C_TrySetPlasmaCoreInChamber");
static_assert(offsetof(WEAPON_PlasmaRifle_C_TrySetPlasmaCoreInChamber, InChamber) == 0x000000, "Member 'WEAPON_PlasmaRifle_C_TrySetPlasmaCoreInChamber::InChamber' has a wrong offset!");
static_assert(offsetof(WEAPON_PlasmaRifle_C_TrySetPlasmaCoreInChamber, Result) == 0x000001, "Member 'WEAPON_PlasmaRifle_C_TrySetPlasmaCoreInChamber::Result' has a wrong offset!");
static_assert(offsetof(WEAPON_PlasmaRifle_C_TrySetPlasmaCoreInChamber, PlasmaCoreItem) == 0x000008, "Member 'WEAPON_PlasmaRifle_C_TrySetPlasmaCoreInChamber::PlasmaCoreItem' has a wrong offset!");
static_assert(offsetof(WEAPON_PlasmaRifle_C_TrySetPlasmaCoreInChamber, CallFunc_SetCurrentMode_Result) == 0x000010, "Member 'WEAPON_PlasmaRifle_C_TrySetPlasmaCoreInChamber::CallFunc_SetCurrentMode_Result' has a wrong offset!");
static_assert(offsetof(WEAPON_PlasmaRifle_C_TrySetPlasmaCoreInChamber, CallFunc_SetCurrentMode_Result_1) == 0x000011, "Member 'WEAPON_PlasmaRifle_C_TrySetPlasmaCoreInChamber::CallFunc_SetCurrentMode_Result_1' has a wrong offset!");
static_assert(offsetof(WEAPON_PlasmaRifle_C_TrySetPlasmaCoreInChamber, CallFunc_GetBag_Result) == 0x000018, "Member 'WEAPON_PlasmaRifle_C_TrySetPlasmaCoreInChamber::CallFunc_GetBag_Result' has a wrong offset!");
static_assert(offsetof(WEAPON_PlasmaRifle_C_TrySetPlasmaCoreInChamber, CallFunc_RemoveItemCount_RemovedItem) == 0x000020, "Member 'WEAPON_PlasmaRifle_C_TrySetPlasmaCoreInChamber::CallFunc_RemoveItemCount_RemovedItem' has a wrong offset!");
static_assert(offsetof(WEAPON_PlasmaRifle_C_TrySetPlasmaCoreInChamber, CallFunc_IsValid_ReturnValue) == 0x000028, "Member 'WEAPON_PlasmaRifle_C_TrySetPlasmaCoreInChamber::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(WEAPON_PlasmaRifle_C_TrySetPlasmaCoreInChamber, K2Node_MakeStruct_STRUCT_HardItemParams) == 0x000030, "Member 'WEAPON_PlasmaRifle_C_TrySetPlasmaCoreInChamber::K2Node_MakeStruct_STRUCT_HardItemParams' has a wrong offset!");
static_assert(offsetof(WEAPON_PlasmaRifle_C_TrySetPlasmaCoreInChamber, CallFunc_GetInventory_Inventory) == 0x000040, "Member 'WEAPON_PlasmaRifle_C_TrySetPlasmaCoreInChamber::CallFunc_GetInventory_Inventory' has a wrong offset!");
static_assert(offsetof(WEAPON_PlasmaRifle_C_TrySetPlasmaCoreInChamber, CallFunc_GetOwnerCharacter_Character) == 0x000048, "Member 'WEAPON_PlasmaRifle_C_TrySetPlasmaCoreInChamber::CallFunc_GetOwnerCharacter_Character' has a wrong offset!");
static_assert(offsetof(WEAPON_PlasmaRifle_C_TrySetPlasmaCoreInChamber, CallFunc_GetOwner_ReturnValue) == 0x000050, "Member 'WEAPON_PlasmaRifle_C_TrySetPlasmaCoreInChamber::CallFunc_GetOwner_ReturnValue' has a wrong offset!");
static_assert(offsetof(WEAPON_PlasmaRifle_C_TrySetPlasmaCoreInChamber, CallFunc_K2_GetActorLocation_ReturnValue) == 0x000058, "Member 'WEAPON_PlasmaRifle_C_TrySetPlasmaCoreInChamber::CallFunc_K2_GetActorLocation_ReturnValue' has a wrong offset!");
static_assert(offsetof(WEAPON_PlasmaRifle_C_TrySetPlasmaCoreInChamber, CallFunc_IsValid_ReturnValue_1) == 0x000064, "Member 'WEAPON_PlasmaRifle_C_TrySetPlasmaCoreInChamber::CallFunc_IsValid_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(WEAPON_PlasmaRifle_C_TrySetPlasmaCoreInChamber, CallFunc_Conv_VectorToTransform_ReturnValue) == 0x000070, "Member 'WEAPON_PlasmaRifle_C_TrySetPlasmaCoreInChamber::CallFunc_Conv_VectorToTransform_ReturnValue' has a wrong offset!");
static_assert(offsetof(WEAPON_PlasmaRifle_C_TrySetPlasmaCoreInChamber, CallFunc_BeginDeferredActorSpawnFromClass_ReturnValue) == 0x0000A0, "Member 'WEAPON_PlasmaRifle_C_TrySetPlasmaCoreInChamber::CallFunc_BeginDeferredActorSpawnFromClass_ReturnValue' has a wrong offset!");
static_assert(offsetof(WEAPON_PlasmaRifle_C_TrySetPlasmaCoreInChamber, CallFunc_GetOwnerCharacter_Character_1) == 0x0000A8, "Member 'WEAPON_PlasmaRifle_C_TrySetPlasmaCoreInChamber::CallFunc_GetOwnerCharacter_Character_1' has a wrong offset!");
static_assert(offsetof(WEAPON_PlasmaRifle_C_TrySetPlasmaCoreInChamber, CallFunc_GetInventoryComponent_Inventory) == 0x0000B0, "Member 'WEAPON_PlasmaRifle_C_TrySetPlasmaCoreInChamber::CallFunc_GetInventoryComponent_Inventory' has a wrong offset!");
static_assert(offsetof(WEAPON_PlasmaRifle_C_TrySetPlasmaCoreInChamber, CallFunc_FinishSpawningActor_ReturnValue) == 0x0000B8, "Member 'WEAPON_PlasmaRifle_C_TrySetPlasmaCoreInChamber::CallFunc_FinishSpawningActor_ReturnValue' has a wrong offset!");
static_assert(offsetof(WEAPON_PlasmaRifle_C_TrySetPlasmaCoreInChamber, CallFunc_GrantItem_Result) == 0x0000C0, "Member 'WEAPON_PlasmaRifle_C_TrySetPlasmaCoreInChamber::CallFunc_GrantItem_Result' has a wrong offset!");
static_assert(offsetof(WEAPON_PlasmaRifle_C_TrySetPlasmaCoreInChamber, CallFunc_GetOwnerCharacter_Character_2) == 0x0000C8, "Member 'WEAPON_PlasmaRifle_C_TrySetPlasmaCoreInChamber::CallFunc_GetOwnerCharacter_Character_2' has a wrong offset!");
static_assert(offsetof(WEAPON_PlasmaRifle_C_TrySetPlasmaCoreInChamber, CallFunc_Not_PreBool_ReturnValue) == 0x0000D0, "Member 'WEAPON_PlasmaRifle_C_TrySetPlasmaCoreInChamber::CallFunc_Not_PreBool_ReturnValue' has a wrong offset!");
static_assert(offsetof(WEAPON_PlasmaRifle_C_TrySetPlasmaCoreInChamber, CallFunc_GetInventoryComponent_Inventory_1) == 0x0000D8, "Member 'WEAPON_PlasmaRifle_C_TrySetPlasmaCoreInChamber::CallFunc_GetInventoryComponent_Inventory_1' has a wrong offset!");
static_assert(offsetof(WEAPON_PlasmaRifle_C_TrySetPlasmaCoreInChamber, CallFunc_FindItem_FoundItem) == 0x0000E0, "Member 'WEAPON_PlasmaRifle_C_TrySetPlasmaCoreInChamber::CallFunc_FindItem_FoundItem' has a wrong offset!");

// Function WEAPON_PlasmaRifle.WEAPON_PlasmaRifle_C.SetCurrentMode
// 0x0088 (0x0088 - 0x0000)
struct WEAPON_PlasmaRifle_C_SetCurrentMode final
{
public:
	int32                                         Mode;                                              // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Result;                                            // 0x0004(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	TDelegate<void()>                             K2Node_CreateDelegate_OutputDelegate;              // 0x0008(0x0010)(ZeroConstructor, NoDestructor)
	class APAWN_SystemShockCharacter_C*           CallFunc_GetOwnerCharacter_Character;              // 0x0018(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsLoadingOrUnloadingPlasmaCore_Result;    // 0x0020(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_21[0x7];                                       // 0x0021(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UCharacterAction_C*                     CallFunc_ForceBeginAction_Action;                  // 0x0028(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Not_PreBool_ReturnValue;                  // 0x0030(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsLoadingOrUnloadingPlasmaCore_Result_1;  // 0x0031(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Not_PreBool_ReturnValue_1;                // 0x0032(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_33[0x5];                                       // 0x0033(0x0005)(Fixing Size After Last Property [ Dumper-7 ])
	class APAWN_SystemShockCharacter_C*           CallFunc_GetOwnerCharacter_Character_1;            // 0x0038(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TDelegate<void()>                             K2Node_CreateDelegate_OutputDelegate_1;            // 0x0040(0x0010)(ZeroConstructor, NoDestructor)
	bool                                          CallFunc_CanBeginAction_Result;                    // 0x0050(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_EqualEqual_IntInt_ReturnValue;            // 0x0051(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_SetCurrentMode_Result;                    // 0x0052(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsActivatable_Result;                     // 0x0053(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_54[0x4];                                       // 0x0054(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class APAWN_SystemShockCharacter_C*           CallFunc_GetOwnerCharacter_Character_2;            // 0x0058(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_NotEqual_IntInt_ReturnValue;              // 0x0060(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_CanBeginAction_Result_1;                  // 0x0061(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          K2Node_SwitchInteger_CmpSuccess;                   // 0x0062(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_HasSparePlasmaAmmo_HasSpareAmmo;          // 0x0063(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_64[0x4];                                       // 0x0064(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class APAWN_SystemShockCharacter_C*           CallFunc_GetOwnerCharacter_Character_3;            // 0x0068(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsEquipped_Result;                        // 0x0070(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_71[0x7];                                       // 0x0071(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UCharacterAction_C*                     CallFunc_ForceBeginAction_Action_1;                // 0x0078(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BooleanAND_ReturnValue;                   // 0x0080(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(WEAPON_PlasmaRifle_C_SetCurrentMode) == 0x000008, "Wrong alignment on WEAPON_PlasmaRifle_C_SetCurrentMode");
static_assert(sizeof(WEAPON_PlasmaRifle_C_SetCurrentMode) == 0x000088, "Wrong size on WEAPON_PlasmaRifle_C_SetCurrentMode");
static_assert(offsetof(WEAPON_PlasmaRifle_C_SetCurrentMode, Mode) == 0x000000, "Member 'WEAPON_PlasmaRifle_C_SetCurrentMode::Mode' has a wrong offset!");
static_assert(offsetof(WEAPON_PlasmaRifle_C_SetCurrentMode, Result) == 0x000004, "Member 'WEAPON_PlasmaRifle_C_SetCurrentMode::Result' has a wrong offset!");
static_assert(offsetof(WEAPON_PlasmaRifle_C_SetCurrentMode, K2Node_CreateDelegate_OutputDelegate) == 0x000008, "Member 'WEAPON_PlasmaRifle_C_SetCurrentMode::K2Node_CreateDelegate_OutputDelegate' has a wrong offset!");
static_assert(offsetof(WEAPON_PlasmaRifle_C_SetCurrentMode, CallFunc_GetOwnerCharacter_Character) == 0x000018, "Member 'WEAPON_PlasmaRifle_C_SetCurrentMode::CallFunc_GetOwnerCharacter_Character' has a wrong offset!");
static_assert(offsetof(WEAPON_PlasmaRifle_C_SetCurrentMode, CallFunc_IsLoadingOrUnloadingPlasmaCore_Result) == 0x000020, "Member 'WEAPON_PlasmaRifle_C_SetCurrentMode::CallFunc_IsLoadingOrUnloadingPlasmaCore_Result' has a wrong offset!");
static_assert(offsetof(WEAPON_PlasmaRifle_C_SetCurrentMode, CallFunc_ForceBeginAction_Action) == 0x000028, "Member 'WEAPON_PlasmaRifle_C_SetCurrentMode::CallFunc_ForceBeginAction_Action' has a wrong offset!");
static_assert(offsetof(WEAPON_PlasmaRifle_C_SetCurrentMode, CallFunc_Not_PreBool_ReturnValue) == 0x000030, "Member 'WEAPON_PlasmaRifle_C_SetCurrentMode::CallFunc_Not_PreBool_ReturnValue' has a wrong offset!");
static_assert(offsetof(WEAPON_PlasmaRifle_C_SetCurrentMode, CallFunc_IsLoadingOrUnloadingPlasmaCore_Result_1) == 0x000031, "Member 'WEAPON_PlasmaRifle_C_SetCurrentMode::CallFunc_IsLoadingOrUnloadingPlasmaCore_Result_1' has a wrong offset!");
static_assert(offsetof(WEAPON_PlasmaRifle_C_SetCurrentMode, CallFunc_Not_PreBool_ReturnValue_1) == 0x000032, "Member 'WEAPON_PlasmaRifle_C_SetCurrentMode::CallFunc_Not_PreBool_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(WEAPON_PlasmaRifle_C_SetCurrentMode, CallFunc_GetOwnerCharacter_Character_1) == 0x000038, "Member 'WEAPON_PlasmaRifle_C_SetCurrentMode::CallFunc_GetOwnerCharacter_Character_1' has a wrong offset!");
static_assert(offsetof(WEAPON_PlasmaRifle_C_SetCurrentMode, K2Node_CreateDelegate_OutputDelegate_1) == 0x000040, "Member 'WEAPON_PlasmaRifle_C_SetCurrentMode::K2Node_CreateDelegate_OutputDelegate_1' has a wrong offset!");
static_assert(offsetof(WEAPON_PlasmaRifle_C_SetCurrentMode, CallFunc_CanBeginAction_Result) == 0x000050, "Member 'WEAPON_PlasmaRifle_C_SetCurrentMode::CallFunc_CanBeginAction_Result' has a wrong offset!");
static_assert(offsetof(WEAPON_PlasmaRifle_C_SetCurrentMode, CallFunc_EqualEqual_IntInt_ReturnValue) == 0x000051, "Member 'WEAPON_PlasmaRifle_C_SetCurrentMode::CallFunc_EqualEqual_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(WEAPON_PlasmaRifle_C_SetCurrentMode, CallFunc_SetCurrentMode_Result) == 0x000052, "Member 'WEAPON_PlasmaRifle_C_SetCurrentMode::CallFunc_SetCurrentMode_Result' has a wrong offset!");
static_assert(offsetof(WEAPON_PlasmaRifle_C_SetCurrentMode, CallFunc_IsActivatable_Result) == 0x000053, "Member 'WEAPON_PlasmaRifle_C_SetCurrentMode::CallFunc_IsActivatable_Result' has a wrong offset!");
static_assert(offsetof(WEAPON_PlasmaRifle_C_SetCurrentMode, CallFunc_GetOwnerCharacter_Character_2) == 0x000058, "Member 'WEAPON_PlasmaRifle_C_SetCurrentMode::CallFunc_GetOwnerCharacter_Character_2' has a wrong offset!");
static_assert(offsetof(WEAPON_PlasmaRifle_C_SetCurrentMode, CallFunc_NotEqual_IntInt_ReturnValue) == 0x000060, "Member 'WEAPON_PlasmaRifle_C_SetCurrentMode::CallFunc_NotEqual_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(WEAPON_PlasmaRifle_C_SetCurrentMode, CallFunc_CanBeginAction_Result_1) == 0x000061, "Member 'WEAPON_PlasmaRifle_C_SetCurrentMode::CallFunc_CanBeginAction_Result_1' has a wrong offset!");
static_assert(offsetof(WEAPON_PlasmaRifle_C_SetCurrentMode, K2Node_SwitchInteger_CmpSuccess) == 0x000062, "Member 'WEAPON_PlasmaRifle_C_SetCurrentMode::K2Node_SwitchInteger_CmpSuccess' has a wrong offset!");
static_assert(offsetof(WEAPON_PlasmaRifle_C_SetCurrentMode, CallFunc_HasSparePlasmaAmmo_HasSpareAmmo) == 0x000063, "Member 'WEAPON_PlasmaRifle_C_SetCurrentMode::CallFunc_HasSparePlasmaAmmo_HasSpareAmmo' has a wrong offset!");
static_assert(offsetof(WEAPON_PlasmaRifle_C_SetCurrentMode, CallFunc_GetOwnerCharacter_Character_3) == 0x000068, "Member 'WEAPON_PlasmaRifle_C_SetCurrentMode::CallFunc_GetOwnerCharacter_Character_3' has a wrong offset!");
static_assert(offsetof(WEAPON_PlasmaRifle_C_SetCurrentMode, CallFunc_IsEquipped_Result) == 0x000070, "Member 'WEAPON_PlasmaRifle_C_SetCurrentMode::CallFunc_IsEquipped_Result' has a wrong offset!");
static_assert(offsetof(WEAPON_PlasmaRifle_C_SetCurrentMode, CallFunc_ForceBeginAction_Action_1) == 0x000078, "Member 'WEAPON_PlasmaRifle_C_SetCurrentMode::CallFunc_ForceBeginAction_Action_1' has a wrong offset!");
static_assert(offsetof(WEAPON_PlasmaRifle_C_SetCurrentMode, CallFunc_BooleanAND_ReturnValue) == 0x000080, "Member 'WEAPON_PlasmaRifle_C_SetCurrentMode::CallFunc_BooleanAND_ReturnValue' has a wrong offset!");

// Function WEAPON_PlasmaRifle.WEAPON_PlasmaRifle_C.TryRemovePlasmaCoreInChamber
// 0x0002 (0x0002 - 0x0000)
struct WEAPON_PlasmaRifle_C_TryRemovePlasmaCoreInChamber final
{
public:
	bool                                          Result;                                            // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_TrySetPlasmaCoreInChamber_Result;         // 0x0001(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(WEAPON_PlasmaRifle_C_TryRemovePlasmaCoreInChamber) == 0x000001, "Wrong alignment on WEAPON_PlasmaRifle_C_TryRemovePlasmaCoreInChamber");
static_assert(sizeof(WEAPON_PlasmaRifle_C_TryRemovePlasmaCoreInChamber) == 0x000002, "Wrong size on WEAPON_PlasmaRifle_C_TryRemovePlasmaCoreInChamber");
static_assert(offsetof(WEAPON_PlasmaRifle_C_TryRemovePlasmaCoreInChamber, Result) == 0x000000, "Member 'WEAPON_PlasmaRifle_C_TryRemovePlasmaCoreInChamber::Result' has a wrong offset!");
static_assert(offsetof(WEAPON_PlasmaRifle_C_TryRemovePlasmaCoreInChamber, CallFunc_TrySetPlasmaCoreInChamber_Result) == 0x000001, "Member 'WEAPON_PlasmaRifle_C_TryRemovePlasmaCoreInChamber::CallFunc_TrySetPlasmaCoreInChamber_Result' has a wrong offset!");

// Function WEAPON_PlasmaRifle.WEAPON_PlasmaRifle_C.GetDischargeMontage
// 0x0018 (0x0018 - 0x0000)
struct WEAPON_PlasmaRifle_C_GetDischargeMontage final
{
public:
	class UAnimMontage*                           Montage;                                           // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Variable;                                 // 0x0008(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UAnimMontage*                           K2Node_Select_Default;                             // 0x0010(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(WEAPON_PlasmaRifle_C_GetDischargeMontage) == 0x000008, "Wrong alignment on WEAPON_PlasmaRifle_C_GetDischargeMontage");
static_assert(sizeof(WEAPON_PlasmaRifle_C_GetDischargeMontage) == 0x000018, "Wrong size on WEAPON_PlasmaRifle_C_GetDischargeMontage");
static_assert(offsetof(WEAPON_PlasmaRifle_C_GetDischargeMontage, Montage) == 0x000000, "Member 'WEAPON_PlasmaRifle_C_GetDischargeMontage::Montage' has a wrong offset!");
static_assert(offsetof(WEAPON_PlasmaRifle_C_GetDischargeMontage, Temp_int_Variable) == 0x000008, "Member 'WEAPON_PlasmaRifle_C_GetDischargeMontage::Temp_int_Variable' has a wrong offset!");
static_assert(offsetof(WEAPON_PlasmaRifle_C_GetDischargeMontage, K2Node_Select_Default) == 0x000010, "Member 'WEAPON_PlasmaRifle_C_GetDischargeMontage::K2Node_Select_Default' has a wrong offset!");

// Function WEAPON_PlasmaRifle.WEAPON_PlasmaRifle_C.GetWeaponModeDisplayName
// 0x0178 (0x0178 - 0x0000)
struct WEAPON_PlasmaRifle_C_GetWeaponModeDisplayName final
{
public:
	int32                                         ModeIndex;                                         // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          ShortName;                                         // 0x0004(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   Result;                                            // 0x0008(0x0018)(Parm, OutParm)
	bool                                          Temp_bool_Variable;                                // 0x0020(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_21[0x7];                                       // 0x0021(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   CallFunc_GetWeaponModeDisplayName_Result;          // 0x0028(0x0018)()
	struct FSTRUCT_WeaponMode                     CallFunc_GetWeaponMode_Mode;                       // 0x0040(0x0100)(HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_IntInt_ReturnValue;            // 0x0140(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_141[0x7];                                      // 0x0141(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UClass*                                 CallFunc_LoadClassAsset_Blocking_ReturnValue;      // 0x0148(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UClass*                                 K2Node_ClassDynamicCast_AsITEM_Base;               // 0x0150(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_ClassDynamicCast_bSuccess;                  // 0x0158(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_159[0x7];                                      // 0x0159(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   K2Node_Select_Default;                             // 0x0160(0x0018)()
};
static_assert(alignof(WEAPON_PlasmaRifle_C_GetWeaponModeDisplayName) == 0x000008, "Wrong alignment on WEAPON_PlasmaRifle_C_GetWeaponModeDisplayName");
static_assert(sizeof(WEAPON_PlasmaRifle_C_GetWeaponModeDisplayName) == 0x000178, "Wrong size on WEAPON_PlasmaRifle_C_GetWeaponModeDisplayName");
static_assert(offsetof(WEAPON_PlasmaRifle_C_GetWeaponModeDisplayName, ModeIndex) == 0x000000, "Member 'WEAPON_PlasmaRifle_C_GetWeaponModeDisplayName::ModeIndex' has a wrong offset!");
static_assert(offsetof(WEAPON_PlasmaRifle_C_GetWeaponModeDisplayName, ShortName) == 0x000004, "Member 'WEAPON_PlasmaRifle_C_GetWeaponModeDisplayName::ShortName' has a wrong offset!");
static_assert(offsetof(WEAPON_PlasmaRifle_C_GetWeaponModeDisplayName, Result) == 0x000008, "Member 'WEAPON_PlasmaRifle_C_GetWeaponModeDisplayName::Result' has a wrong offset!");
static_assert(offsetof(WEAPON_PlasmaRifle_C_GetWeaponModeDisplayName, Temp_bool_Variable) == 0x000020, "Member 'WEAPON_PlasmaRifle_C_GetWeaponModeDisplayName::Temp_bool_Variable' has a wrong offset!");
static_assert(offsetof(WEAPON_PlasmaRifle_C_GetWeaponModeDisplayName, CallFunc_GetWeaponModeDisplayName_Result) == 0x000028, "Member 'WEAPON_PlasmaRifle_C_GetWeaponModeDisplayName::CallFunc_GetWeaponModeDisplayName_Result' has a wrong offset!");
static_assert(offsetof(WEAPON_PlasmaRifle_C_GetWeaponModeDisplayName, CallFunc_GetWeaponMode_Mode) == 0x000040, "Member 'WEAPON_PlasmaRifle_C_GetWeaponModeDisplayName::CallFunc_GetWeaponMode_Mode' has a wrong offset!");
static_assert(offsetof(WEAPON_PlasmaRifle_C_GetWeaponModeDisplayName, CallFunc_EqualEqual_IntInt_ReturnValue) == 0x000140, "Member 'WEAPON_PlasmaRifle_C_GetWeaponModeDisplayName::CallFunc_EqualEqual_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(WEAPON_PlasmaRifle_C_GetWeaponModeDisplayName, CallFunc_LoadClassAsset_Blocking_ReturnValue) == 0x000148, "Member 'WEAPON_PlasmaRifle_C_GetWeaponModeDisplayName::CallFunc_LoadClassAsset_Blocking_ReturnValue' has a wrong offset!");
static_assert(offsetof(WEAPON_PlasmaRifle_C_GetWeaponModeDisplayName, K2Node_ClassDynamicCast_AsITEM_Base) == 0x000150, "Member 'WEAPON_PlasmaRifle_C_GetWeaponModeDisplayName::K2Node_ClassDynamicCast_AsITEM_Base' has a wrong offset!");
static_assert(offsetof(WEAPON_PlasmaRifle_C_GetWeaponModeDisplayName, K2Node_ClassDynamicCast_bSuccess) == 0x000158, "Member 'WEAPON_PlasmaRifle_C_GetWeaponModeDisplayName::K2Node_ClassDynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(WEAPON_PlasmaRifle_C_GetWeaponModeDisplayName, K2Node_Select_Default) == 0x000160, "Member 'WEAPON_PlasmaRifle_C_GetWeaponModeDisplayName::K2Node_Select_Default' has a wrong offset!");

// Function WEAPON_PlasmaRifle.WEAPON_PlasmaRifle_C.SetPlasmaCoreLoaded
// 0x0010 (0x0010 - 0x0000)
struct WEAPON_PlasmaRifle_C_SetPlasmaCoreLoaded final
{
public:
	bool                                          State;                                             // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_Conv_BoolToFloat_ReturnValue;             // 0x0004(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UMeshComponent*                         CallFunc_GetWeaponMeshComponent_Result;            // 0x0008(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(WEAPON_PlasmaRifle_C_SetPlasmaCoreLoaded) == 0x000008, "Wrong alignment on WEAPON_PlasmaRifle_C_SetPlasmaCoreLoaded");
static_assert(sizeof(WEAPON_PlasmaRifle_C_SetPlasmaCoreLoaded) == 0x000010, "Wrong size on WEAPON_PlasmaRifle_C_SetPlasmaCoreLoaded");
static_assert(offsetof(WEAPON_PlasmaRifle_C_SetPlasmaCoreLoaded, State) == 0x000000, "Member 'WEAPON_PlasmaRifle_C_SetPlasmaCoreLoaded::State' has a wrong offset!");
static_assert(offsetof(WEAPON_PlasmaRifle_C_SetPlasmaCoreLoaded, CallFunc_Conv_BoolToFloat_ReturnValue) == 0x000004, "Member 'WEAPON_PlasmaRifle_C_SetPlasmaCoreLoaded::CallFunc_Conv_BoolToFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(WEAPON_PlasmaRifle_C_SetPlasmaCoreLoaded, CallFunc_GetWeaponMeshComponent_Result) == 0x000008, "Member 'WEAPON_PlasmaRifle_C_SetPlasmaCoreLoaded::CallFunc_GetWeaponMeshComponent_Result' has a wrong offset!");

// Function WEAPON_PlasmaRifle.WEAPON_PlasmaRifle_C.UpdateArmedState
// 0x0098 (0x0098 - 0x0000)
struct WEAPON_PlasmaRifle_C_UpdateArmedState final
{
public:
	int32                                         Temp_int_Variable;                                 // 0x0000(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Variable_1;                               // 0x0004(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Variable;                                // 0x0008(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class APAWN_SystemShockCharacter_C*           CallFunc_GetOwnerCharacter_Character;              // 0x0010(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_IntInt_ReturnValue;            // 0x0018(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_19[0x7];                                       // 0x0019(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UAnimMontage*                           CallFunc_GetCurrentMontage_Result;                 // 0x0020(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UMeshComponent*                         CallFunc_GetWeaponMeshComponent_Result;            // 0x0028(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TSoftObjectPtr<class UAnimMontage>            CallFunc_Conv_ObjectToSoftObjectReference_ReturnValue; // 0x0030(0x0028)(UObjectWrapper, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0058(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_NotEqual_SoftObjectReference_ReturnValue; // 0x0059(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BooleanAND_ReturnValue;                   // 0x005A(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_5B[0x5];                                       // 0x005B(0x0005)(Fixing Size After Last Property [ Dumper-7 ])
	class UMeshComponent*                         CallFunc_GetWeaponMeshComponent_Result_1;          // 0x0060(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class USkeletalMeshComponent*                 K2Node_DynamicCast_AsSkeletal_Mesh_Component;      // 0x0068(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0070(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_71[0x3];                                       // 0x0071(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         K2Node_Select_Default;                             // 0x0074(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UAnimInstance*                          CallFunc_GetAnimInstance_ReturnValue;              // 0x0078(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TScriptInterface<class IINTERF_ANIM_EnergyWeapon_C> K2Node_DynamicCast_AsINTERF_ANIM_Energy_Weapon;    // 0x0080(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          K2Node_DynamicCast_bSuccess_1;                     // 0x0090(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_SetChargeMode_Result;                     // 0x0091(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(WEAPON_PlasmaRifle_C_UpdateArmedState) == 0x000008, "Wrong alignment on WEAPON_PlasmaRifle_C_UpdateArmedState");
static_assert(sizeof(WEAPON_PlasmaRifle_C_UpdateArmedState) == 0x000098, "Wrong size on WEAPON_PlasmaRifle_C_UpdateArmedState");
static_assert(offsetof(WEAPON_PlasmaRifle_C_UpdateArmedState, Temp_int_Variable) == 0x000000, "Member 'WEAPON_PlasmaRifle_C_UpdateArmedState::Temp_int_Variable' has a wrong offset!");
static_assert(offsetof(WEAPON_PlasmaRifle_C_UpdateArmedState, Temp_int_Variable_1) == 0x000004, "Member 'WEAPON_PlasmaRifle_C_UpdateArmedState::Temp_int_Variable_1' has a wrong offset!");
static_assert(offsetof(WEAPON_PlasmaRifle_C_UpdateArmedState, Temp_bool_Variable) == 0x000008, "Member 'WEAPON_PlasmaRifle_C_UpdateArmedState::Temp_bool_Variable' has a wrong offset!");
static_assert(offsetof(WEAPON_PlasmaRifle_C_UpdateArmedState, CallFunc_GetOwnerCharacter_Character) == 0x000010, "Member 'WEAPON_PlasmaRifle_C_UpdateArmedState::CallFunc_GetOwnerCharacter_Character' has a wrong offset!");
static_assert(offsetof(WEAPON_PlasmaRifle_C_UpdateArmedState, CallFunc_EqualEqual_IntInt_ReturnValue) == 0x000018, "Member 'WEAPON_PlasmaRifle_C_UpdateArmedState::CallFunc_EqualEqual_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(WEAPON_PlasmaRifle_C_UpdateArmedState, CallFunc_GetCurrentMontage_Result) == 0x000020, "Member 'WEAPON_PlasmaRifle_C_UpdateArmedState::CallFunc_GetCurrentMontage_Result' has a wrong offset!");
static_assert(offsetof(WEAPON_PlasmaRifle_C_UpdateArmedState, CallFunc_GetWeaponMeshComponent_Result) == 0x000028, "Member 'WEAPON_PlasmaRifle_C_UpdateArmedState::CallFunc_GetWeaponMeshComponent_Result' has a wrong offset!");
static_assert(offsetof(WEAPON_PlasmaRifle_C_UpdateArmedState, CallFunc_Conv_ObjectToSoftObjectReference_ReturnValue) == 0x000030, "Member 'WEAPON_PlasmaRifle_C_UpdateArmedState::CallFunc_Conv_ObjectToSoftObjectReference_ReturnValue' has a wrong offset!");
static_assert(offsetof(WEAPON_PlasmaRifle_C_UpdateArmedState, CallFunc_IsValid_ReturnValue) == 0x000058, "Member 'WEAPON_PlasmaRifle_C_UpdateArmedState::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(WEAPON_PlasmaRifle_C_UpdateArmedState, CallFunc_NotEqual_SoftObjectReference_ReturnValue) == 0x000059, "Member 'WEAPON_PlasmaRifle_C_UpdateArmedState::CallFunc_NotEqual_SoftObjectReference_ReturnValue' has a wrong offset!");
static_assert(offsetof(WEAPON_PlasmaRifle_C_UpdateArmedState, CallFunc_BooleanAND_ReturnValue) == 0x00005A, "Member 'WEAPON_PlasmaRifle_C_UpdateArmedState::CallFunc_BooleanAND_ReturnValue' has a wrong offset!");
static_assert(offsetof(WEAPON_PlasmaRifle_C_UpdateArmedState, CallFunc_GetWeaponMeshComponent_Result_1) == 0x000060, "Member 'WEAPON_PlasmaRifle_C_UpdateArmedState::CallFunc_GetWeaponMeshComponent_Result_1' has a wrong offset!");
static_assert(offsetof(WEAPON_PlasmaRifle_C_UpdateArmedState, K2Node_DynamicCast_AsSkeletal_Mesh_Component) == 0x000068, "Member 'WEAPON_PlasmaRifle_C_UpdateArmedState::K2Node_DynamicCast_AsSkeletal_Mesh_Component' has a wrong offset!");
static_assert(offsetof(WEAPON_PlasmaRifle_C_UpdateArmedState, K2Node_DynamicCast_bSuccess) == 0x000070, "Member 'WEAPON_PlasmaRifle_C_UpdateArmedState::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(WEAPON_PlasmaRifle_C_UpdateArmedState, K2Node_Select_Default) == 0x000074, "Member 'WEAPON_PlasmaRifle_C_UpdateArmedState::K2Node_Select_Default' has a wrong offset!");
static_assert(offsetof(WEAPON_PlasmaRifle_C_UpdateArmedState, CallFunc_GetAnimInstance_ReturnValue) == 0x000078, "Member 'WEAPON_PlasmaRifle_C_UpdateArmedState::CallFunc_GetAnimInstance_ReturnValue' has a wrong offset!");
static_assert(offsetof(WEAPON_PlasmaRifle_C_UpdateArmedState, K2Node_DynamicCast_AsINTERF_ANIM_Energy_Weapon) == 0x000080, "Member 'WEAPON_PlasmaRifle_C_UpdateArmedState::K2Node_DynamicCast_AsINTERF_ANIM_Energy_Weapon' has a wrong offset!");
static_assert(offsetof(WEAPON_PlasmaRifle_C_UpdateArmedState, K2Node_DynamicCast_bSuccess_1) == 0x000090, "Member 'WEAPON_PlasmaRifle_C_UpdateArmedState::K2Node_DynamicCast_bSuccess_1' has a wrong offset!");
static_assert(offsetof(WEAPON_PlasmaRifle_C_UpdateArmedState, CallFunc_SetChargeMode_Result) == 0x000091, "Member 'WEAPON_PlasmaRifle_C_UpdateArmedState::CallFunc_SetChargeMode_Result' has a wrong offset!");

// Function WEAPON_PlasmaRifle.WEAPON_PlasmaRifle_C.UpdateNiagaraFX
// 0x00A8 (0x00A8 - 0x0000)
struct WEAPON_PlasmaRifle_C_UpdateNiagaraFX final
{
public:
	bool                                          Destroy;                                           // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          SetMode;                                           // 0x0001(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0002(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsValid_ReturnValue_1;                    // 0x0003(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class APAWN_SystemShockCharacter_C*           CallFunc_GetOwnerCharacter_Character;              // 0x0008(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue_2;                    // 0x0010(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UAnimMontage*                           CallFunc_GetCurrentMontage_Result;                 // 0x0018(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class APAWN_SystemShockCharacter_C*           CallFunc_GetOwnerCharacter_Character_1;            // 0x0020(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TSoftObjectPtr<class UAnimMontage>            CallFunc_Conv_ObjectToSoftObjectReference_ReturnValue; // 0x0028(0x0028)(UObjectWrapper, HasGetValueTypeHash)
	bool                                          CallFunc_NotEqual_SoftObjectReference_ReturnValue; // 0x0050(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_51[0x7];                                       // 0x0051(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UAnimMontage*                           CallFunc_GetCurrentMontage_Result_1;               // 0x0058(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TSoftObjectPtr<class UAnimMontage>            CallFunc_Conv_ObjectToSoftObjectReference_ReturnValue_1; // 0x0060(0x0028)(UObjectWrapper, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_SoftObjectReference_ReturnValue; // 0x0088(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BooleanOR_ReturnValue;                    // 0x0089(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_8A[0x2];                                       // 0x008A(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_GetLastHeatPercentage_Result;             // 0x008C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_IntInt_ReturnValue;            // 0x0090(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BooleanAND_ReturnValue;                   // 0x0091(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_92[0x6];                                       // 0x0092(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class UMeshComponent*                         CallFunc_GetWeaponMeshComponent_Result;            // 0x0098(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UNiagaraComponent*                      CallFunc_SpawnSystemAttached_ReturnValue;          // 0x00A0(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(WEAPON_PlasmaRifle_C_UpdateNiagaraFX) == 0x000008, "Wrong alignment on WEAPON_PlasmaRifle_C_UpdateNiagaraFX");
static_assert(sizeof(WEAPON_PlasmaRifle_C_UpdateNiagaraFX) == 0x0000A8, "Wrong size on WEAPON_PlasmaRifle_C_UpdateNiagaraFX");
static_assert(offsetof(WEAPON_PlasmaRifle_C_UpdateNiagaraFX, Destroy) == 0x000000, "Member 'WEAPON_PlasmaRifle_C_UpdateNiagaraFX::Destroy' has a wrong offset!");
static_assert(offsetof(WEAPON_PlasmaRifle_C_UpdateNiagaraFX, SetMode) == 0x000001, "Member 'WEAPON_PlasmaRifle_C_UpdateNiagaraFX::SetMode' has a wrong offset!");
static_assert(offsetof(WEAPON_PlasmaRifle_C_UpdateNiagaraFX, CallFunc_IsValid_ReturnValue) == 0x000002, "Member 'WEAPON_PlasmaRifle_C_UpdateNiagaraFX::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(WEAPON_PlasmaRifle_C_UpdateNiagaraFX, CallFunc_IsValid_ReturnValue_1) == 0x000003, "Member 'WEAPON_PlasmaRifle_C_UpdateNiagaraFX::CallFunc_IsValid_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(WEAPON_PlasmaRifle_C_UpdateNiagaraFX, CallFunc_GetOwnerCharacter_Character) == 0x000008, "Member 'WEAPON_PlasmaRifle_C_UpdateNiagaraFX::CallFunc_GetOwnerCharacter_Character' has a wrong offset!");
static_assert(offsetof(WEAPON_PlasmaRifle_C_UpdateNiagaraFX, CallFunc_IsValid_ReturnValue_2) == 0x000010, "Member 'WEAPON_PlasmaRifle_C_UpdateNiagaraFX::CallFunc_IsValid_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(WEAPON_PlasmaRifle_C_UpdateNiagaraFX, CallFunc_GetCurrentMontage_Result) == 0x000018, "Member 'WEAPON_PlasmaRifle_C_UpdateNiagaraFX::CallFunc_GetCurrentMontage_Result' has a wrong offset!");
static_assert(offsetof(WEAPON_PlasmaRifle_C_UpdateNiagaraFX, CallFunc_GetOwnerCharacter_Character_1) == 0x000020, "Member 'WEAPON_PlasmaRifle_C_UpdateNiagaraFX::CallFunc_GetOwnerCharacter_Character_1' has a wrong offset!");
static_assert(offsetof(WEAPON_PlasmaRifle_C_UpdateNiagaraFX, CallFunc_Conv_ObjectToSoftObjectReference_ReturnValue) == 0x000028, "Member 'WEAPON_PlasmaRifle_C_UpdateNiagaraFX::CallFunc_Conv_ObjectToSoftObjectReference_ReturnValue' has a wrong offset!");
static_assert(offsetof(WEAPON_PlasmaRifle_C_UpdateNiagaraFX, CallFunc_NotEqual_SoftObjectReference_ReturnValue) == 0x000050, "Member 'WEAPON_PlasmaRifle_C_UpdateNiagaraFX::CallFunc_NotEqual_SoftObjectReference_ReturnValue' has a wrong offset!");
static_assert(offsetof(WEAPON_PlasmaRifle_C_UpdateNiagaraFX, CallFunc_GetCurrentMontage_Result_1) == 0x000058, "Member 'WEAPON_PlasmaRifle_C_UpdateNiagaraFX::CallFunc_GetCurrentMontage_Result_1' has a wrong offset!");
static_assert(offsetof(WEAPON_PlasmaRifle_C_UpdateNiagaraFX, CallFunc_Conv_ObjectToSoftObjectReference_ReturnValue_1) == 0x000060, "Member 'WEAPON_PlasmaRifle_C_UpdateNiagaraFX::CallFunc_Conv_ObjectToSoftObjectReference_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(WEAPON_PlasmaRifle_C_UpdateNiagaraFX, CallFunc_EqualEqual_SoftObjectReference_ReturnValue) == 0x000088, "Member 'WEAPON_PlasmaRifle_C_UpdateNiagaraFX::CallFunc_EqualEqual_SoftObjectReference_ReturnValue' has a wrong offset!");
static_assert(offsetof(WEAPON_PlasmaRifle_C_UpdateNiagaraFX, CallFunc_BooleanOR_ReturnValue) == 0x000089, "Member 'WEAPON_PlasmaRifle_C_UpdateNiagaraFX::CallFunc_BooleanOR_ReturnValue' has a wrong offset!");
static_assert(offsetof(WEAPON_PlasmaRifle_C_UpdateNiagaraFX, CallFunc_GetLastHeatPercentage_Result) == 0x00008C, "Member 'WEAPON_PlasmaRifle_C_UpdateNiagaraFX::CallFunc_GetLastHeatPercentage_Result' has a wrong offset!");
static_assert(offsetof(WEAPON_PlasmaRifle_C_UpdateNiagaraFX, CallFunc_EqualEqual_IntInt_ReturnValue) == 0x000090, "Member 'WEAPON_PlasmaRifle_C_UpdateNiagaraFX::CallFunc_EqualEqual_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(WEAPON_PlasmaRifle_C_UpdateNiagaraFX, CallFunc_BooleanAND_ReturnValue) == 0x000091, "Member 'WEAPON_PlasmaRifle_C_UpdateNiagaraFX::CallFunc_BooleanAND_ReturnValue' has a wrong offset!");
static_assert(offsetof(WEAPON_PlasmaRifle_C_UpdateNiagaraFX, CallFunc_GetWeaponMeshComponent_Result) == 0x000098, "Member 'WEAPON_PlasmaRifle_C_UpdateNiagaraFX::CallFunc_GetWeaponMeshComponent_Result' has a wrong offset!");
static_assert(offsetof(WEAPON_PlasmaRifle_C_UpdateNiagaraFX, CallFunc_SpawnSystemAttached_ReturnValue) == 0x0000A0, "Member 'WEAPON_PlasmaRifle_C_UpdateNiagaraFX::CallFunc_SpawnSystemAttached_ReturnValue' has a wrong offset!");

// Function WEAPON_PlasmaRifle.WEAPON_PlasmaRifle_C.ReceiveAnimationMessage
// 0x0018 (0x0018 - 0x0000)
struct WEAPON_PlasmaRifle_C_ReceiveAnimationMessage final
{
public:
	class FString                                 Message;                                           // 0x0000(0x0010)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, HasGetValueTypeHash)
	bool                                          Result;                                            // 0x0010(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_ReceiveAnimationMessage_Result;           // 0x0011(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_EqualEqual_StrStr_ReturnValue;            // 0x0012(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_TryRemovePlasmaCoreInChamber_Result;      // 0x0013(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_TrySetPlasmaCoreInChamber_Result;         // 0x0014(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_EqualEqual_StrStr_ReturnValue_1;          // 0x0015(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(WEAPON_PlasmaRifle_C_ReceiveAnimationMessage) == 0x000008, "Wrong alignment on WEAPON_PlasmaRifle_C_ReceiveAnimationMessage");
static_assert(sizeof(WEAPON_PlasmaRifle_C_ReceiveAnimationMessage) == 0x000018, "Wrong size on WEAPON_PlasmaRifle_C_ReceiveAnimationMessage");
static_assert(offsetof(WEAPON_PlasmaRifle_C_ReceiveAnimationMessage, Message) == 0x000000, "Member 'WEAPON_PlasmaRifle_C_ReceiveAnimationMessage::Message' has a wrong offset!");
static_assert(offsetof(WEAPON_PlasmaRifle_C_ReceiveAnimationMessage, Result) == 0x000010, "Member 'WEAPON_PlasmaRifle_C_ReceiveAnimationMessage::Result' has a wrong offset!");
static_assert(offsetof(WEAPON_PlasmaRifle_C_ReceiveAnimationMessage, CallFunc_ReceiveAnimationMessage_Result) == 0x000011, "Member 'WEAPON_PlasmaRifle_C_ReceiveAnimationMessage::CallFunc_ReceiveAnimationMessage_Result' has a wrong offset!");
static_assert(offsetof(WEAPON_PlasmaRifle_C_ReceiveAnimationMessage, CallFunc_EqualEqual_StrStr_ReturnValue) == 0x000012, "Member 'WEAPON_PlasmaRifle_C_ReceiveAnimationMessage::CallFunc_EqualEqual_StrStr_ReturnValue' has a wrong offset!");
static_assert(offsetof(WEAPON_PlasmaRifle_C_ReceiveAnimationMessage, CallFunc_TryRemovePlasmaCoreInChamber_Result) == 0x000013, "Member 'WEAPON_PlasmaRifle_C_ReceiveAnimationMessage::CallFunc_TryRemovePlasmaCoreInChamber_Result' has a wrong offset!");
static_assert(offsetof(WEAPON_PlasmaRifle_C_ReceiveAnimationMessage, CallFunc_TrySetPlasmaCoreInChamber_Result) == 0x000014, "Member 'WEAPON_PlasmaRifle_C_ReceiveAnimationMessage::CallFunc_TrySetPlasmaCoreInChamber_Result' has a wrong offset!");
static_assert(offsetof(WEAPON_PlasmaRifle_C_ReceiveAnimationMessage, CallFunc_EqualEqual_StrStr_ReturnValue_1) == 0x000015, "Member 'WEAPON_PlasmaRifle_C_ReceiveAnimationMessage::CallFunc_EqualEqual_StrStr_ReturnValue_1' has a wrong offset!");

// Function WEAPON_PlasmaRifle.WEAPON_PlasmaRifle_C.OnWeaponBecameActivatable
// 0x0038 (0x0038 - 0x0000)
struct WEAPON_PlasmaRifle_C_OnWeaponBecameActivatable final
{
public:
	class APAWN_SystemShockCharacter_C*           Character;                                         // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          ShowImmediately;                                   // 0x0008(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	TDelegate<void()>                             K2Node_CreateDelegate_OutputDelegate;              // 0x000C(0x0010)(ZeroConstructor, NoDestructor)
	uint8                                         Pad_1C[0x4];                                       // 0x001C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class APAWN_SystemShockCharacter_C*           CallFunc_GetOwnerCharacter_Character;              // 0x0020(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsLoadingOrUnloadingPlasmaCore_Result;    // 0x0028(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_29[0x7];                                       // 0x0029(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UCharacterAction_C*                     CallFunc_GetCurrentAction_CurrentAction;           // 0x0030(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(WEAPON_PlasmaRifle_C_OnWeaponBecameActivatable) == 0x000008, "Wrong alignment on WEAPON_PlasmaRifle_C_OnWeaponBecameActivatable");
static_assert(sizeof(WEAPON_PlasmaRifle_C_OnWeaponBecameActivatable) == 0x000038, "Wrong size on WEAPON_PlasmaRifle_C_OnWeaponBecameActivatable");
static_assert(offsetof(WEAPON_PlasmaRifle_C_OnWeaponBecameActivatable, Character) == 0x000000, "Member 'WEAPON_PlasmaRifle_C_OnWeaponBecameActivatable::Character' has a wrong offset!");
static_assert(offsetof(WEAPON_PlasmaRifle_C_OnWeaponBecameActivatable, ShowImmediately) == 0x000008, "Member 'WEAPON_PlasmaRifle_C_OnWeaponBecameActivatable::ShowImmediately' has a wrong offset!");
static_assert(offsetof(WEAPON_PlasmaRifle_C_OnWeaponBecameActivatable, K2Node_CreateDelegate_OutputDelegate) == 0x00000C, "Member 'WEAPON_PlasmaRifle_C_OnWeaponBecameActivatable::K2Node_CreateDelegate_OutputDelegate' has a wrong offset!");
static_assert(offsetof(WEAPON_PlasmaRifle_C_OnWeaponBecameActivatable, CallFunc_GetOwnerCharacter_Character) == 0x000020, "Member 'WEAPON_PlasmaRifle_C_OnWeaponBecameActivatable::CallFunc_GetOwnerCharacter_Character' has a wrong offset!");
static_assert(offsetof(WEAPON_PlasmaRifle_C_OnWeaponBecameActivatable, CallFunc_IsLoadingOrUnloadingPlasmaCore_Result) == 0x000028, "Member 'WEAPON_PlasmaRifle_C_OnWeaponBecameActivatable::CallFunc_IsLoadingOrUnloadingPlasmaCore_Result' has a wrong offset!");
static_assert(offsetof(WEAPON_PlasmaRifle_C_OnWeaponBecameActivatable, CallFunc_GetCurrentAction_CurrentAction) == 0x000030, "Member 'WEAPON_PlasmaRifle_C_OnWeaponBecameActivatable::CallFunc_GetCurrentAction_CurrentAction' has a wrong offset!");

}

