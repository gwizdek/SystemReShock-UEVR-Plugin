#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: CYBR_DomainLink

#include "Basic.hpp"

#include "STRUCT_InteractResults_structs.hpp"
#include "CoreUObject_structs.hpp"
#include "Engine_structs.hpp"


namespace SDK::Params
{

// Function CYBR_DomainLink.CYBR_DomainLink_C.ExecuteUbergraph_CYBR_DomainLink
// 0x01D8 (0x01D8 - 0x0000)
struct CYBR_DomainLink_C_ExecuteUbergraph_CYBR_DomainLink final
{
public:
	int32                                         EntryPoint;                                        // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UPrimitiveComponent*                    K2Node_ComponentBoundEvent_OverlappedComponent_3;  // 0x0008(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 K2Node_ComponentBoundEvent_OtherActor_3;           // 0x0010(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UPrimitiveComponent*                    K2Node_ComponentBoundEvent_OtherComp_3;            // 0x0018(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         K2Node_ComponentBoundEvent_OtherBodyIndex_3;       // 0x0020(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_ComponentBoundEvent_bFromSweep_1;           // 0x0024(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_25[0x3];                                       // 0x0025(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FHitResult                             K2Node_ComponentBoundEvent_SweepResult_1;          // 0x0028(0x0088)(ConstParm, IsPlainOldData, NoDestructor, ContainsInstancedReference)
	class UPrimitiveComponent*                    K2Node_ComponentBoundEvent_OverlappedComponent_2;  // 0x00B0(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 K2Node_ComponentBoundEvent_OtherActor_2;           // 0x00B8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UPrimitiveComponent*                    K2Node_ComponentBoundEvent_OtherComp_2;            // 0x00C0(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         K2Node_ComponentBoundEvent_OtherBodyIndex_2;       // 0x00C8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_CC[0x4];                                       // 0x00CC(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class APAWN_Avatar_C*                         K2Node_DynamicCast_AsPAWN_Avatar;                  // 0x00D0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x00D8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_D9[0x7];                                       // 0x00D9(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class APAWN_Avatar_C*                         K2Node_DynamicCast_AsPAWN_Avatar_1;                // 0x00E0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess_1;                     // 0x00E8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Not_PreBool_ReturnValue;                  // 0x00E9(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x00EA(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Not_PreBool_ReturnValue_1;                // 0x00EB(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsValid_ReturnValue_1;                    // 0x00EC(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Not_PreBool_ReturnValue_2;                // 0x00ED(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_EE[0x2];                                       // 0x00EE(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	class UPrimitiveComponent*                    K2Node_ComponentBoundEvent_OverlappedComponent_1;  // 0x00F0(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 K2Node_ComponentBoundEvent_OtherActor_1;           // 0x00F8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UPrimitiveComponent*                    K2Node_ComponentBoundEvent_OtherComp_1;            // 0x0100(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         K2Node_ComponentBoundEvent_OtherBodyIndex_1;       // 0x0108(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_ComponentBoundEvent_bFromSweep;             // 0x010C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_10D[0x3];                                      // 0x010D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FHitResult                             K2Node_ComponentBoundEvent_SweepResult;            // 0x0110(0x0088)(ConstParm, IsPlainOldData, NoDestructor, ContainsInstancedReference)
	class APAWN_Avatar_C*                         K2Node_DynamicCast_AsPAWN_Avatar_2;                // 0x0198(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess_2;                     // 0x01A0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_1A1[0x7];                                      // 0x01A1(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UPrimitiveComponent*                    K2Node_ComponentBoundEvent_OverlappedComponent;    // 0x01A8(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 K2Node_ComponentBoundEvent_OtherActor;             // 0x01B0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UPrimitiveComponent*                    K2Node_ComponentBoundEvent_OtherComp;              // 0x01B8(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         K2Node_ComponentBoundEvent_OtherBodyIndex;         // 0x01C0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1C4[0x4];                                      // 0x01C4(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class APAWN_Avatar_C*                         K2Node_DynamicCast_AsPAWN_Avatar_3;                // 0x01C8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess_3;                     // 0x01D0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(CYBR_DomainLink_C_ExecuteUbergraph_CYBR_DomainLink) == 0x000008, "Wrong alignment on CYBR_DomainLink_C_ExecuteUbergraph_CYBR_DomainLink");
static_assert(sizeof(CYBR_DomainLink_C_ExecuteUbergraph_CYBR_DomainLink) == 0x0001D8, "Wrong size on CYBR_DomainLink_C_ExecuteUbergraph_CYBR_DomainLink");
static_assert(offsetof(CYBR_DomainLink_C_ExecuteUbergraph_CYBR_DomainLink, EntryPoint) == 0x000000, "Member 'CYBR_DomainLink_C_ExecuteUbergraph_CYBR_DomainLink::EntryPoint' has a wrong offset!");
static_assert(offsetof(CYBR_DomainLink_C_ExecuteUbergraph_CYBR_DomainLink, K2Node_ComponentBoundEvent_OverlappedComponent_3) == 0x000008, "Member 'CYBR_DomainLink_C_ExecuteUbergraph_CYBR_DomainLink::K2Node_ComponentBoundEvent_OverlappedComponent_3' has a wrong offset!");
static_assert(offsetof(CYBR_DomainLink_C_ExecuteUbergraph_CYBR_DomainLink, K2Node_ComponentBoundEvent_OtherActor_3) == 0x000010, "Member 'CYBR_DomainLink_C_ExecuteUbergraph_CYBR_DomainLink::K2Node_ComponentBoundEvent_OtherActor_3' has a wrong offset!");
static_assert(offsetof(CYBR_DomainLink_C_ExecuteUbergraph_CYBR_DomainLink, K2Node_ComponentBoundEvent_OtherComp_3) == 0x000018, "Member 'CYBR_DomainLink_C_ExecuteUbergraph_CYBR_DomainLink::K2Node_ComponentBoundEvent_OtherComp_3' has a wrong offset!");
static_assert(offsetof(CYBR_DomainLink_C_ExecuteUbergraph_CYBR_DomainLink, K2Node_ComponentBoundEvent_OtherBodyIndex_3) == 0x000020, "Member 'CYBR_DomainLink_C_ExecuteUbergraph_CYBR_DomainLink::K2Node_ComponentBoundEvent_OtherBodyIndex_3' has a wrong offset!");
static_assert(offsetof(CYBR_DomainLink_C_ExecuteUbergraph_CYBR_DomainLink, K2Node_ComponentBoundEvent_bFromSweep_1) == 0x000024, "Member 'CYBR_DomainLink_C_ExecuteUbergraph_CYBR_DomainLink::K2Node_ComponentBoundEvent_bFromSweep_1' has a wrong offset!");
static_assert(offsetof(CYBR_DomainLink_C_ExecuteUbergraph_CYBR_DomainLink, K2Node_ComponentBoundEvent_SweepResult_1) == 0x000028, "Member 'CYBR_DomainLink_C_ExecuteUbergraph_CYBR_DomainLink::K2Node_ComponentBoundEvent_SweepResult_1' has a wrong offset!");
static_assert(offsetof(CYBR_DomainLink_C_ExecuteUbergraph_CYBR_DomainLink, K2Node_ComponentBoundEvent_OverlappedComponent_2) == 0x0000B0, "Member 'CYBR_DomainLink_C_ExecuteUbergraph_CYBR_DomainLink::K2Node_ComponentBoundEvent_OverlappedComponent_2' has a wrong offset!");
static_assert(offsetof(CYBR_DomainLink_C_ExecuteUbergraph_CYBR_DomainLink, K2Node_ComponentBoundEvent_OtherActor_2) == 0x0000B8, "Member 'CYBR_DomainLink_C_ExecuteUbergraph_CYBR_DomainLink::K2Node_ComponentBoundEvent_OtherActor_2' has a wrong offset!");
static_assert(offsetof(CYBR_DomainLink_C_ExecuteUbergraph_CYBR_DomainLink, K2Node_ComponentBoundEvent_OtherComp_2) == 0x0000C0, "Member 'CYBR_DomainLink_C_ExecuteUbergraph_CYBR_DomainLink::K2Node_ComponentBoundEvent_OtherComp_2' has a wrong offset!");
static_assert(offsetof(CYBR_DomainLink_C_ExecuteUbergraph_CYBR_DomainLink, K2Node_ComponentBoundEvent_OtherBodyIndex_2) == 0x0000C8, "Member 'CYBR_DomainLink_C_ExecuteUbergraph_CYBR_DomainLink::K2Node_ComponentBoundEvent_OtherBodyIndex_2' has a wrong offset!");
static_assert(offsetof(CYBR_DomainLink_C_ExecuteUbergraph_CYBR_DomainLink, K2Node_DynamicCast_AsPAWN_Avatar) == 0x0000D0, "Member 'CYBR_DomainLink_C_ExecuteUbergraph_CYBR_DomainLink::K2Node_DynamicCast_AsPAWN_Avatar' has a wrong offset!");
static_assert(offsetof(CYBR_DomainLink_C_ExecuteUbergraph_CYBR_DomainLink, K2Node_DynamicCast_bSuccess) == 0x0000D8, "Member 'CYBR_DomainLink_C_ExecuteUbergraph_CYBR_DomainLink::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(CYBR_DomainLink_C_ExecuteUbergraph_CYBR_DomainLink, K2Node_DynamicCast_AsPAWN_Avatar_1) == 0x0000E0, "Member 'CYBR_DomainLink_C_ExecuteUbergraph_CYBR_DomainLink::K2Node_DynamicCast_AsPAWN_Avatar_1' has a wrong offset!");
static_assert(offsetof(CYBR_DomainLink_C_ExecuteUbergraph_CYBR_DomainLink, K2Node_DynamicCast_bSuccess_1) == 0x0000E8, "Member 'CYBR_DomainLink_C_ExecuteUbergraph_CYBR_DomainLink::K2Node_DynamicCast_bSuccess_1' has a wrong offset!");
static_assert(offsetof(CYBR_DomainLink_C_ExecuteUbergraph_CYBR_DomainLink, CallFunc_Not_PreBool_ReturnValue) == 0x0000E9, "Member 'CYBR_DomainLink_C_ExecuteUbergraph_CYBR_DomainLink::CallFunc_Not_PreBool_ReturnValue' has a wrong offset!");
static_assert(offsetof(CYBR_DomainLink_C_ExecuteUbergraph_CYBR_DomainLink, CallFunc_IsValid_ReturnValue) == 0x0000EA, "Member 'CYBR_DomainLink_C_ExecuteUbergraph_CYBR_DomainLink::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(CYBR_DomainLink_C_ExecuteUbergraph_CYBR_DomainLink, CallFunc_Not_PreBool_ReturnValue_1) == 0x0000EB, "Member 'CYBR_DomainLink_C_ExecuteUbergraph_CYBR_DomainLink::CallFunc_Not_PreBool_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(CYBR_DomainLink_C_ExecuteUbergraph_CYBR_DomainLink, CallFunc_IsValid_ReturnValue_1) == 0x0000EC, "Member 'CYBR_DomainLink_C_ExecuteUbergraph_CYBR_DomainLink::CallFunc_IsValid_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(CYBR_DomainLink_C_ExecuteUbergraph_CYBR_DomainLink, CallFunc_Not_PreBool_ReturnValue_2) == 0x0000ED, "Member 'CYBR_DomainLink_C_ExecuteUbergraph_CYBR_DomainLink::CallFunc_Not_PreBool_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(CYBR_DomainLink_C_ExecuteUbergraph_CYBR_DomainLink, K2Node_ComponentBoundEvent_OverlappedComponent_1) == 0x0000F0, "Member 'CYBR_DomainLink_C_ExecuteUbergraph_CYBR_DomainLink::K2Node_ComponentBoundEvent_OverlappedComponent_1' has a wrong offset!");
static_assert(offsetof(CYBR_DomainLink_C_ExecuteUbergraph_CYBR_DomainLink, K2Node_ComponentBoundEvent_OtherActor_1) == 0x0000F8, "Member 'CYBR_DomainLink_C_ExecuteUbergraph_CYBR_DomainLink::K2Node_ComponentBoundEvent_OtherActor_1' has a wrong offset!");
static_assert(offsetof(CYBR_DomainLink_C_ExecuteUbergraph_CYBR_DomainLink, K2Node_ComponentBoundEvent_OtherComp_1) == 0x000100, "Member 'CYBR_DomainLink_C_ExecuteUbergraph_CYBR_DomainLink::K2Node_ComponentBoundEvent_OtherComp_1' has a wrong offset!");
static_assert(offsetof(CYBR_DomainLink_C_ExecuteUbergraph_CYBR_DomainLink, K2Node_ComponentBoundEvent_OtherBodyIndex_1) == 0x000108, "Member 'CYBR_DomainLink_C_ExecuteUbergraph_CYBR_DomainLink::K2Node_ComponentBoundEvent_OtherBodyIndex_1' has a wrong offset!");
static_assert(offsetof(CYBR_DomainLink_C_ExecuteUbergraph_CYBR_DomainLink, K2Node_ComponentBoundEvent_bFromSweep) == 0x00010C, "Member 'CYBR_DomainLink_C_ExecuteUbergraph_CYBR_DomainLink::K2Node_ComponentBoundEvent_bFromSweep' has a wrong offset!");
static_assert(offsetof(CYBR_DomainLink_C_ExecuteUbergraph_CYBR_DomainLink, K2Node_ComponentBoundEvent_SweepResult) == 0x000110, "Member 'CYBR_DomainLink_C_ExecuteUbergraph_CYBR_DomainLink::K2Node_ComponentBoundEvent_SweepResult' has a wrong offset!");
static_assert(offsetof(CYBR_DomainLink_C_ExecuteUbergraph_CYBR_DomainLink, K2Node_DynamicCast_AsPAWN_Avatar_2) == 0x000198, "Member 'CYBR_DomainLink_C_ExecuteUbergraph_CYBR_DomainLink::K2Node_DynamicCast_AsPAWN_Avatar_2' has a wrong offset!");
static_assert(offsetof(CYBR_DomainLink_C_ExecuteUbergraph_CYBR_DomainLink, K2Node_DynamicCast_bSuccess_2) == 0x0001A0, "Member 'CYBR_DomainLink_C_ExecuteUbergraph_CYBR_DomainLink::K2Node_DynamicCast_bSuccess_2' has a wrong offset!");
static_assert(offsetof(CYBR_DomainLink_C_ExecuteUbergraph_CYBR_DomainLink, K2Node_ComponentBoundEvent_OverlappedComponent) == 0x0001A8, "Member 'CYBR_DomainLink_C_ExecuteUbergraph_CYBR_DomainLink::K2Node_ComponentBoundEvent_OverlappedComponent' has a wrong offset!");
static_assert(offsetof(CYBR_DomainLink_C_ExecuteUbergraph_CYBR_DomainLink, K2Node_ComponentBoundEvent_OtherActor) == 0x0001B0, "Member 'CYBR_DomainLink_C_ExecuteUbergraph_CYBR_DomainLink::K2Node_ComponentBoundEvent_OtherActor' has a wrong offset!");
static_assert(offsetof(CYBR_DomainLink_C_ExecuteUbergraph_CYBR_DomainLink, K2Node_ComponentBoundEvent_OtherComp) == 0x0001B8, "Member 'CYBR_DomainLink_C_ExecuteUbergraph_CYBR_DomainLink::K2Node_ComponentBoundEvent_OtherComp' has a wrong offset!");
static_assert(offsetof(CYBR_DomainLink_C_ExecuteUbergraph_CYBR_DomainLink, K2Node_ComponentBoundEvent_OtherBodyIndex) == 0x0001C0, "Member 'CYBR_DomainLink_C_ExecuteUbergraph_CYBR_DomainLink::K2Node_ComponentBoundEvent_OtherBodyIndex' has a wrong offset!");
static_assert(offsetof(CYBR_DomainLink_C_ExecuteUbergraph_CYBR_DomainLink, K2Node_DynamicCast_AsPAWN_Avatar_3) == 0x0001C8, "Member 'CYBR_DomainLink_C_ExecuteUbergraph_CYBR_DomainLink::K2Node_DynamicCast_AsPAWN_Avatar_3' has a wrong offset!");
static_assert(offsetof(CYBR_DomainLink_C_ExecuteUbergraph_CYBR_DomainLink, K2Node_DynamicCast_bSuccess_3) == 0x0001D0, "Member 'CYBR_DomainLink_C_ExecuteUbergraph_CYBR_DomainLink::K2Node_DynamicCast_bSuccess_3' has a wrong offset!");

// Function CYBR_DomainLink.CYBR_DomainLink_C.BndEvt__OverlapBox_Entrance_Outer_K2Node_ComponentBoundEvent_1_ComponentEndOverlapSignature__DelegateSignature
// 0x0020 (0x0020 - 0x0000)
struct CYBR_DomainLink_C_BndEvt__OverlapBox_Entrance_Outer_K2Node_ComponentBoundEvent_1_ComponentEndOverlapSignature__DelegateSignature final
{
public:
	class UPrimitiveComponent*                    OverlappedComponent;                               // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 OtherActor;                                        // 0x0008(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UPrimitiveComponent*                    OtherComp;                                         // 0x0010(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         OtherBodyIndex;                                    // 0x0018(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(CYBR_DomainLink_C_BndEvt__OverlapBox_Entrance_Outer_K2Node_ComponentBoundEvent_1_ComponentEndOverlapSignature__DelegateSignature) == 0x000008, "Wrong alignment on CYBR_DomainLink_C_BndEvt__OverlapBox_Entrance_Outer_K2Node_ComponentBoundEvent_1_ComponentEndOverlapSignature__DelegateSignature");
static_assert(sizeof(CYBR_DomainLink_C_BndEvt__OverlapBox_Entrance_Outer_K2Node_ComponentBoundEvent_1_ComponentEndOverlapSignature__DelegateSignature) == 0x000020, "Wrong size on CYBR_DomainLink_C_BndEvt__OverlapBox_Entrance_Outer_K2Node_ComponentBoundEvent_1_ComponentEndOverlapSignature__DelegateSignature");
static_assert(offsetof(CYBR_DomainLink_C_BndEvt__OverlapBox_Entrance_Outer_K2Node_ComponentBoundEvent_1_ComponentEndOverlapSignature__DelegateSignature, OverlappedComponent) == 0x000000, "Member 'CYBR_DomainLink_C_BndEvt__OverlapBox_Entrance_Outer_K2Node_ComponentBoundEvent_1_ComponentEndOverlapSignature__DelegateSignature::OverlappedComponent' has a wrong offset!");
static_assert(offsetof(CYBR_DomainLink_C_BndEvt__OverlapBox_Entrance_Outer_K2Node_ComponentBoundEvent_1_ComponentEndOverlapSignature__DelegateSignature, OtherActor) == 0x000008, "Member 'CYBR_DomainLink_C_BndEvt__OverlapBox_Entrance_Outer_K2Node_ComponentBoundEvent_1_ComponentEndOverlapSignature__DelegateSignature::OtherActor' has a wrong offset!");
static_assert(offsetof(CYBR_DomainLink_C_BndEvt__OverlapBox_Entrance_Outer_K2Node_ComponentBoundEvent_1_ComponentEndOverlapSignature__DelegateSignature, OtherComp) == 0x000010, "Member 'CYBR_DomainLink_C_BndEvt__OverlapBox_Entrance_Outer_K2Node_ComponentBoundEvent_1_ComponentEndOverlapSignature__DelegateSignature::OtherComp' has a wrong offset!");
static_assert(offsetof(CYBR_DomainLink_C_BndEvt__OverlapBox_Entrance_Outer_K2Node_ComponentBoundEvent_1_ComponentEndOverlapSignature__DelegateSignature, OtherBodyIndex) == 0x000018, "Member 'CYBR_DomainLink_C_BndEvt__OverlapBox_Entrance_Outer_K2Node_ComponentBoundEvent_1_ComponentEndOverlapSignature__DelegateSignature::OtherBodyIndex' has a wrong offset!");

// Function CYBR_DomainLink.CYBR_DomainLink_C.BndEvt__OverlapBox_Entrance_Outer_K2Node_ComponentBoundEvent_0_ComponentBeginOverlapSignature__DelegateSignature
// 0x00A8 (0x00A8 - 0x0000)
struct CYBR_DomainLink_C_BndEvt__OverlapBox_Entrance_Outer_K2Node_ComponentBoundEvent_0_ComponentBeginOverlapSignature__DelegateSignature final
{
public:
	class UPrimitiveComponent*                    OverlappedComponent;                               // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 OtherActor;                                        // 0x0008(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UPrimitiveComponent*                    OtherComp;                                         // 0x0010(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         OtherBodyIndex;                                    // 0x0018(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          bFromSweep;                                        // 0x001C(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_1D[0x3];                                       // 0x001D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FHitResult                             SweepResult;                                       // 0x0020(0x0088)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, ContainsInstancedReference)
};
static_assert(alignof(CYBR_DomainLink_C_BndEvt__OverlapBox_Entrance_Outer_K2Node_ComponentBoundEvent_0_ComponentBeginOverlapSignature__DelegateSignature) == 0x000008, "Wrong alignment on CYBR_DomainLink_C_BndEvt__OverlapBox_Entrance_Outer_K2Node_ComponentBoundEvent_0_ComponentBeginOverlapSignature__DelegateSignature");
static_assert(sizeof(CYBR_DomainLink_C_BndEvt__OverlapBox_Entrance_Outer_K2Node_ComponentBoundEvent_0_ComponentBeginOverlapSignature__DelegateSignature) == 0x0000A8, "Wrong size on CYBR_DomainLink_C_BndEvt__OverlapBox_Entrance_Outer_K2Node_ComponentBoundEvent_0_ComponentBeginOverlapSignature__DelegateSignature");
static_assert(offsetof(CYBR_DomainLink_C_BndEvt__OverlapBox_Entrance_Outer_K2Node_ComponentBoundEvent_0_ComponentBeginOverlapSignature__DelegateSignature, OverlappedComponent) == 0x000000, "Member 'CYBR_DomainLink_C_BndEvt__OverlapBox_Entrance_Outer_K2Node_ComponentBoundEvent_0_ComponentBeginOverlapSignature__DelegateSignature::OverlappedComponent' has a wrong offset!");
static_assert(offsetof(CYBR_DomainLink_C_BndEvt__OverlapBox_Entrance_Outer_K2Node_ComponentBoundEvent_0_ComponentBeginOverlapSignature__DelegateSignature, OtherActor) == 0x000008, "Member 'CYBR_DomainLink_C_BndEvt__OverlapBox_Entrance_Outer_K2Node_ComponentBoundEvent_0_ComponentBeginOverlapSignature__DelegateSignature::OtherActor' has a wrong offset!");
static_assert(offsetof(CYBR_DomainLink_C_BndEvt__OverlapBox_Entrance_Outer_K2Node_ComponentBoundEvent_0_ComponentBeginOverlapSignature__DelegateSignature, OtherComp) == 0x000010, "Member 'CYBR_DomainLink_C_BndEvt__OverlapBox_Entrance_Outer_K2Node_ComponentBoundEvent_0_ComponentBeginOverlapSignature__DelegateSignature::OtherComp' has a wrong offset!");
static_assert(offsetof(CYBR_DomainLink_C_BndEvt__OverlapBox_Entrance_Outer_K2Node_ComponentBoundEvent_0_ComponentBeginOverlapSignature__DelegateSignature, OtherBodyIndex) == 0x000018, "Member 'CYBR_DomainLink_C_BndEvt__OverlapBox_Entrance_Outer_K2Node_ComponentBoundEvent_0_ComponentBeginOverlapSignature__DelegateSignature::OtherBodyIndex' has a wrong offset!");
static_assert(offsetof(CYBR_DomainLink_C_BndEvt__OverlapBox_Entrance_Outer_K2Node_ComponentBoundEvent_0_ComponentBeginOverlapSignature__DelegateSignature, bFromSweep) == 0x00001C, "Member 'CYBR_DomainLink_C_BndEvt__OverlapBox_Entrance_Outer_K2Node_ComponentBoundEvent_0_ComponentBeginOverlapSignature__DelegateSignature::bFromSweep' has a wrong offset!");
static_assert(offsetof(CYBR_DomainLink_C_BndEvt__OverlapBox_Entrance_Outer_K2Node_ComponentBoundEvent_0_ComponentBeginOverlapSignature__DelegateSignature, SweepResult) == 0x000020, "Member 'CYBR_DomainLink_C_BndEvt__OverlapBox_Entrance_Outer_K2Node_ComponentBoundEvent_0_ComponentBeginOverlapSignature__DelegateSignature::SweepResult' has a wrong offset!");

// Function CYBR_DomainLink.CYBR_DomainLink_C.BndEvt__BoxVolume_Exit_K2Node_ComponentBoundEvent_10_ComponentEndOverlapSignature__DelegateSignature
// 0x0020 (0x0020 - 0x0000)
struct CYBR_DomainLink_C_BndEvt__BoxVolume_Exit_K2Node_ComponentBoundEvent_10_ComponentEndOverlapSignature__DelegateSignature final
{
public:
	class UPrimitiveComponent*                    OverlappedComponent;                               // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 OtherActor;                                        // 0x0008(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UPrimitiveComponent*                    OtherComp;                                         // 0x0010(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         OtherBodyIndex;                                    // 0x0018(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(CYBR_DomainLink_C_BndEvt__BoxVolume_Exit_K2Node_ComponentBoundEvent_10_ComponentEndOverlapSignature__DelegateSignature) == 0x000008, "Wrong alignment on CYBR_DomainLink_C_BndEvt__BoxVolume_Exit_K2Node_ComponentBoundEvent_10_ComponentEndOverlapSignature__DelegateSignature");
static_assert(sizeof(CYBR_DomainLink_C_BndEvt__BoxVolume_Exit_K2Node_ComponentBoundEvent_10_ComponentEndOverlapSignature__DelegateSignature) == 0x000020, "Wrong size on CYBR_DomainLink_C_BndEvt__BoxVolume_Exit_K2Node_ComponentBoundEvent_10_ComponentEndOverlapSignature__DelegateSignature");
static_assert(offsetof(CYBR_DomainLink_C_BndEvt__BoxVolume_Exit_K2Node_ComponentBoundEvent_10_ComponentEndOverlapSignature__DelegateSignature, OverlappedComponent) == 0x000000, "Member 'CYBR_DomainLink_C_BndEvt__BoxVolume_Exit_K2Node_ComponentBoundEvent_10_ComponentEndOverlapSignature__DelegateSignature::OverlappedComponent' has a wrong offset!");
static_assert(offsetof(CYBR_DomainLink_C_BndEvt__BoxVolume_Exit_K2Node_ComponentBoundEvent_10_ComponentEndOverlapSignature__DelegateSignature, OtherActor) == 0x000008, "Member 'CYBR_DomainLink_C_BndEvt__BoxVolume_Exit_K2Node_ComponentBoundEvent_10_ComponentEndOverlapSignature__DelegateSignature::OtherActor' has a wrong offset!");
static_assert(offsetof(CYBR_DomainLink_C_BndEvt__BoxVolume_Exit_K2Node_ComponentBoundEvent_10_ComponentEndOverlapSignature__DelegateSignature, OtherComp) == 0x000010, "Member 'CYBR_DomainLink_C_BndEvt__BoxVolume_Exit_K2Node_ComponentBoundEvent_10_ComponentEndOverlapSignature__DelegateSignature::OtherComp' has a wrong offset!");
static_assert(offsetof(CYBR_DomainLink_C_BndEvt__BoxVolume_Exit_K2Node_ComponentBoundEvent_10_ComponentEndOverlapSignature__DelegateSignature, OtherBodyIndex) == 0x000018, "Member 'CYBR_DomainLink_C_BndEvt__BoxVolume_Exit_K2Node_ComponentBoundEvent_10_ComponentEndOverlapSignature__DelegateSignature::OtherBodyIndex' has a wrong offset!");

// Function CYBR_DomainLink.CYBR_DomainLink_C.BndEvt__BoxVolume_Exit_K2Node_ComponentBoundEvent_9_ComponentBeginOverlapSignature__DelegateSignature
// 0x00A8 (0x00A8 - 0x0000)
struct CYBR_DomainLink_C_BndEvt__BoxVolume_Exit_K2Node_ComponentBoundEvent_9_ComponentBeginOverlapSignature__DelegateSignature final
{
public:
	class UPrimitiveComponent*                    OverlappedComponent;                               // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 OtherActor;                                        // 0x0008(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UPrimitiveComponent*                    OtherComp;                                         // 0x0010(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         OtherBodyIndex;                                    // 0x0018(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          bFromSweep;                                        // 0x001C(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_1D[0x3];                                       // 0x001D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FHitResult                             SweepResult;                                       // 0x0020(0x0088)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, ContainsInstancedReference)
};
static_assert(alignof(CYBR_DomainLink_C_BndEvt__BoxVolume_Exit_K2Node_ComponentBoundEvent_9_ComponentBeginOverlapSignature__DelegateSignature) == 0x000008, "Wrong alignment on CYBR_DomainLink_C_BndEvt__BoxVolume_Exit_K2Node_ComponentBoundEvent_9_ComponentBeginOverlapSignature__DelegateSignature");
static_assert(sizeof(CYBR_DomainLink_C_BndEvt__BoxVolume_Exit_K2Node_ComponentBoundEvent_9_ComponentBeginOverlapSignature__DelegateSignature) == 0x0000A8, "Wrong size on CYBR_DomainLink_C_BndEvt__BoxVolume_Exit_K2Node_ComponentBoundEvent_9_ComponentBeginOverlapSignature__DelegateSignature");
static_assert(offsetof(CYBR_DomainLink_C_BndEvt__BoxVolume_Exit_K2Node_ComponentBoundEvent_9_ComponentBeginOverlapSignature__DelegateSignature, OverlappedComponent) == 0x000000, "Member 'CYBR_DomainLink_C_BndEvt__BoxVolume_Exit_K2Node_ComponentBoundEvent_9_ComponentBeginOverlapSignature__DelegateSignature::OverlappedComponent' has a wrong offset!");
static_assert(offsetof(CYBR_DomainLink_C_BndEvt__BoxVolume_Exit_K2Node_ComponentBoundEvent_9_ComponentBeginOverlapSignature__DelegateSignature, OtherActor) == 0x000008, "Member 'CYBR_DomainLink_C_BndEvt__BoxVolume_Exit_K2Node_ComponentBoundEvent_9_ComponentBeginOverlapSignature__DelegateSignature::OtherActor' has a wrong offset!");
static_assert(offsetof(CYBR_DomainLink_C_BndEvt__BoxVolume_Exit_K2Node_ComponentBoundEvent_9_ComponentBeginOverlapSignature__DelegateSignature, OtherComp) == 0x000010, "Member 'CYBR_DomainLink_C_BndEvt__BoxVolume_Exit_K2Node_ComponentBoundEvent_9_ComponentBeginOverlapSignature__DelegateSignature::OtherComp' has a wrong offset!");
static_assert(offsetof(CYBR_DomainLink_C_BndEvt__BoxVolume_Exit_K2Node_ComponentBoundEvent_9_ComponentBeginOverlapSignature__DelegateSignature, OtherBodyIndex) == 0x000018, "Member 'CYBR_DomainLink_C_BndEvt__BoxVolume_Exit_K2Node_ComponentBoundEvent_9_ComponentBeginOverlapSignature__DelegateSignature::OtherBodyIndex' has a wrong offset!");
static_assert(offsetof(CYBR_DomainLink_C_BndEvt__BoxVolume_Exit_K2Node_ComponentBoundEvent_9_ComponentBeginOverlapSignature__DelegateSignature, bFromSweep) == 0x00001C, "Member 'CYBR_DomainLink_C_BndEvt__BoxVolume_Exit_K2Node_ComponentBoundEvent_9_ComponentBeginOverlapSignature__DelegateSignature::bFromSweep' has a wrong offset!");
static_assert(offsetof(CYBR_DomainLink_C_BndEvt__BoxVolume_Exit_K2Node_ComponentBoundEvent_9_ComponentBeginOverlapSignature__DelegateSignature, SweepResult) == 0x000020, "Member 'CYBR_DomainLink_C_BndEvt__BoxVolume_Exit_K2Node_ComponentBoundEvent_9_ComponentBeginOverlapSignature__DelegateSignature::SweepResult' has a wrong offset!");

// Function CYBR_DomainLink.CYBR_DomainLink_C.InitializeDomainLink
// 0x0058 (0x0058 - 0x0000)
struct CYBR_DomainLink_C_InitializeDomainLink final
{
public:
	int32                                         Temp_int_Array_Index_Variable;                     // 0x0000(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Loop_Counter_Variable;                    // 0x0004(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue;                   // 0x0008(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class AActor*>                         Temp_object_Variable;                              // 0x0010(0x0010)(ConstParm, ReferenceParm)
	TArray<class AActor*>                         CallFunc_ComponentOverlapActors_OutActors;         // 0x0020(0x0010)(ReferenceParm)
	bool                                          CallFunc_ComponentOverlapActors_ReturnValue;       // 0x0030(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_31[0x3];                                       // 0x0031(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Array_Length_ReturnValue;                 // 0x0034(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 CallFunc_Array_Get_Item;                           // 0x0038(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue;                  // 0x0040(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_41[0x7];                                       // 0x0041(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class APAWN_Avatar_C*                         K2Node_DynamicCast_AsPAWN_Avatar;                  // 0x0048(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0050(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(CYBR_DomainLink_C_InitializeDomainLink) == 0x000008, "Wrong alignment on CYBR_DomainLink_C_InitializeDomainLink");
static_assert(sizeof(CYBR_DomainLink_C_InitializeDomainLink) == 0x000058, "Wrong size on CYBR_DomainLink_C_InitializeDomainLink");
static_assert(offsetof(CYBR_DomainLink_C_InitializeDomainLink, Temp_int_Array_Index_Variable) == 0x000000, "Member 'CYBR_DomainLink_C_InitializeDomainLink::Temp_int_Array_Index_Variable' has a wrong offset!");
static_assert(offsetof(CYBR_DomainLink_C_InitializeDomainLink, Temp_int_Loop_Counter_Variable) == 0x000004, "Member 'CYBR_DomainLink_C_InitializeDomainLink::Temp_int_Loop_Counter_Variable' has a wrong offset!");
static_assert(offsetof(CYBR_DomainLink_C_InitializeDomainLink, CallFunc_Add_IntInt_ReturnValue) == 0x000008, "Member 'CYBR_DomainLink_C_InitializeDomainLink::CallFunc_Add_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(CYBR_DomainLink_C_InitializeDomainLink, Temp_object_Variable) == 0x000010, "Member 'CYBR_DomainLink_C_InitializeDomainLink::Temp_object_Variable' has a wrong offset!");
static_assert(offsetof(CYBR_DomainLink_C_InitializeDomainLink, CallFunc_ComponentOverlapActors_OutActors) == 0x000020, "Member 'CYBR_DomainLink_C_InitializeDomainLink::CallFunc_ComponentOverlapActors_OutActors' has a wrong offset!");
static_assert(offsetof(CYBR_DomainLink_C_InitializeDomainLink, CallFunc_ComponentOverlapActors_ReturnValue) == 0x000030, "Member 'CYBR_DomainLink_C_InitializeDomainLink::CallFunc_ComponentOverlapActors_ReturnValue' has a wrong offset!");
static_assert(offsetof(CYBR_DomainLink_C_InitializeDomainLink, CallFunc_Array_Length_ReturnValue) == 0x000034, "Member 'CYBR_DomainLink_C_InitializeDomainLink::CallFunc_Array_Length_ReturnValue' has a wrong offset!");
static_assert(offsetof(CYBR_DomainLink_C_InitializeDomainLink, CallFunc_Array_Get_Item) == 0x000038, "Member 'CYBR_DomainLink_C_InitializeDomainLink::CallFunc_Array_Get_Item' has a wrong offset!");
static_assert(offsetof(CYBR_DomainLink_C_InitializeDomainLink, CallFunc_Less_IntInt_ReturnValue) == 0x000040, "Member 'CYBR_DomainLink_C_InitializeDomainLink::CallFunc_Less_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(CYBR_DomainLink_C_InitializeDomainLink, K2Node_DynamicCast_AsPAWN_Avatar) == 0x000048, "Member 'CYBR_DomainLink_C_InitializeDomainLink::K2Node_DynamicCast_AsPAWN_Avatar' has a wrong offset!");
static_assert(offsetof(CYBR_DomainLink_C_InitializeDomainLink, K2Node_DynamicCast_bSuccess) == 0x000050, "Member 'CYBR_DomainLink_C_InitializeDomainLink::K2Node_DynamicCast_bSuccess' has a wrong offset!");

// Function CYBR_DomainLink.CYBR_DomainLink_C.TryEnterLink
// 0x0020 (0x0020 - 0x0000)
struct CYBR_DomainLink_C_TryEnterLink final
{
public:
	class APAWN_Avatar_C*                         Avatar;                                            // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          IsForward;                                         // 0x0008(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          ShouldPlayEnterSounds;                             // 0x0009(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_HasCurrentDomainLink_Result;              // 0x000A(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_B[0x5];                                        // 0x000B(0x0005)(Fixing Size After Last Property [ Dumper-7 ])
	class UAudioComponent*                        CallFunc_CreateSound2D_ReturnValue;                // 0x0010(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Not_PreBool_ReturnValue;                  // 0x0018(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0019(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Not_PreBool_ReturnValue_1;                // 0x001A(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(CYBR_DomainLink_C_TryEnterLink) == 0x000008, "Wrong alignment on CYBR_DomainLink_C_TryEnterLink");
static_assert(sizeof(CYBR_DomainLink_C_TryEnterLink) == 0x000020, "Wrong size on CYBR_DomainLink_C_TryEnterLink");
static_assert(offsetof(CYBR_DomainLink_C_TryEnterLink, Avatar) == 0x000000, "Member 'CYBR_DomainLink_C_TryEnterLink::Avatar' has a wrong offset!");
static_assert(offsetof(CYBR_DomainLink_C_TryEnterLink, IsForward) == 0x000008, "Member 'CYBR_DomainLink_C_TryEnterLink::IsForward' has a wrong offset!");
static_assert(offsetof(CYBR_DomainLink_C_TryEnterLink, ShouldPlayEnterSounds) == 0x000009, "Member 'CYBR_DomainLink_C_TryEnterLink::ShouldPlayEnterSounds' has a wrong offset!");
static_assert(offsetof(CYBR_DomainLink_C_TryEnterLink, CallFunc_HasCurrentDomainLink_Result) == 0x00000A, "Member 'CYBR_DomainLink_C_TryEnterLink::CallFunc_HasCurrentDomainLink_Result' has a wrong offset!");
static_assert(offsetof(CYBR_DomainLink_C_TryEnterLink, CallFunc_CreateSound2D_ReturnValue) == 0x000010, "Member 'CYBR_DomainLink_C_TryEnterLink::CallFunc_CreateSound2D_ReturnValue' has a wrong offset!");
static_assert(offsetof(CYBR_DomainLink_C_TryEnterLink, CallFunc_Not_PreBool_ReturnValue) == 0x000018, "Member 'CYBR_DomainLink_C_TryEnterLink::CallFunc_Not_PreBool_ReturnValue' has a wrong offset!");
static_assert(offsetof(CYBR_DomainLink_C_TryEnterLink, CallFunc_IsValid_ReturnValue) == 0x000019, "Member 'CYBR_DomainLink_C_TryEnterLink::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(CYBR_DomainLink_C_TryEnterLink, CallFunc_Not_PreBool_ReturnValue_1) == 0x00001A, "Member 'CYBR_DomainLink_C_TryEnterLink::CallFunc_Not_PreBool_ReturnValue_1' has a wrong offset!");

// Function CYBR_DomainLink.CYBR_DomainLink_C.TryExitLink
// 0x0068 (0x0068 - 0x0000)
struct CYBR_DomainLink_C_TryExitLink final
{
public:
	class APAWN_Avatar_C*                         Avatar;                                            // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          IsGoingForward;                                    // 0x0008(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Temp_int_Array_Index_Variable;                     // 0x000C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Loop_Counter_Variable;                    // 0x0010(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsCurrentDomainLink_Result;               // 0x0014(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_15[0x3];                                       // 0x0015(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Add_IntInt_ReturnValue;                   // 0x0018(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1C[0x4];                                       // 0x001C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class ACYBR_InteractBase_C*                   CallFunc_Array_Get_Item;                           // 0x0020(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TScriptInterface<class IINTERF_Interactable_C> CallFunc_TryInteract_self_CastInput;               // 0x0028(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FSTRUCT_InteractResults                CallFunc_TryInteract_InteractResults;              // 0x0038(0x0020)(HasGetValueTypeHash)
	int32                                         CallFunc_Array_Length_ReturnValue;                 // 0x0058(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue;                  // 0x005C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x005D(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsOverlappingActor_ReturnValue;           // 0x005E(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsOverlappingActor_ReturnValue_1;         // 0x005F(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BooleanOR_ReturnValue;                    // 0x0060(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Not_PreBool_ReturnValue;                  // 0x0061(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(CYBR_DomainLink_C_TryExitLink) == 0x000008, "Wrong alignment on CYBR_DomainLink_C_TryExitLink");
static_assert(sizeof(CYBR_DomainLink_C_TryExitLink) == 0x000068, "Wrong size on CYBR_DomainLink_C_TryExitLink");
static_assert(offsetof(CYBR_DomainLink_C_TryExitLink, Avatar) == 0x000000, "Member 'CYBR_DomainLink_C_TryExitLink::Avatar' has a wrong offset!");
static_assert(offsetof(CYBR_DomainLink_C_TryExitLink, IsGoingForward) == 0x000008, "Member 'CYBR_DomainLink_C_TryExitLink::IsGoingForward' has a wrong offset!");
static_assert(offsetof(CYBR_DomainLink_C_TryExitLink, Temp_int_Array_Index_Variable) == 0x00000C, "Member 'CYBR_DomainLink_C_TryExitLink::Temp_int_Array_Index_Variable' has a wrong offset!");
static_assert(offsetof(CYBR_DomainLink_C_TryExitLink, Temp_int_Loop_Counter_Variable) == 0x000010, "Member 'CYBR_DomainLink_C_TryExitLink::Temp_int_Loop_Counter_Variable' has a wrong offset!");
static_assert(offsetof(CYBR_DomainLink_C_TryExitLink, CallFunc_IsCurrentDomainLink_Result) == 0x000014, "Member 'CYBR_DomainLink_C_TryExitLink::CallFunc_IsCurrentDomainLink_Result' has a wrong offset!");
static_assert(offsetof(CYBR_DomainLink_C_TryExitLink, CallFunc_Add_IntInt_ReturnValue) == 0x000018, "Member 'CYBR_DomainLink_C_TryExitLink::CallFunc_Add_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(CYBR_DomainLink_C_TryExitLink, CallFunc_Array_Get_Item) == 0x000020, "Member 'CYBR_DomainLink_C_TryExitLink::CallFunc_Array_Get_Item' has a wrong offset!");
static_assert(offsetof(CYBR_DomainLink_C_TryExitLink, CallFunc_TryInteract_self_CastInput) == 0x000028, "Member 'CYBR_DomainLink_C_TryExitLink::CallFunc_TryInteract_self_CastInput' has a wrong offset!");
static_assert(offsetof(CYBR_DomainLink_C_TryExitLink, CallFunc_TryInteract_InteractResults) == 0x000038, "Member 'CYBR_DomainLink_C_TryExitLink::CallFunc_TryInteract_InteractResults' has a wrong offset!");
static_assert(offsetof(CYBR_DomainLink_C_TryExitLink, CallFunc_Array_Length_ReturnValue) == 0x000058, "Member 'CYBR_DomainLink_C_TryExitLink::CallFunc_Array_Length_ReturnValue' has a wrong offset!");
static_assert(offsetof(CYBR_DomainLink_C_TryExitLink, CallFunc_Less_IntInt_ReturnValue) == 0x00005C, "Member 'CYBR_DomainLink_C_TryExitLink::CallFunc_Less_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(CYBR_DomainLink_C_TryExitLink, CallFunc_IsValid_ReturnValue) == 0x00005D, "Member 'CYBR_DomainLink_C_TryExitLink::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(CYBR_DomainLink_C_TryExitLink, CallFunc_IsOverlappingActor_ReturnValue) == 0x00005E, "Member 'CYBR_DomainLink_C_TryExitLink::CallFunc_IsOverlappingActor_ReturnValue' has a wrong offset!");
static_assert(offsetof(CYBR_DomainLink_C_TryExitLink, CallFunc_IsOverlappingActor_ReturnValue_1) == 0x00005F, "Member 'CYBR_DomainLink_C_TryExitLink::CallFunc_IsOverlappingActor_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(CYBR_DomainLink_C_TryExitLink, CallFunc_BooleanOR_ReturnValue) == 0x000060, "Member 'CYBR_DomainLink_C_TryExitLink::CallFunc_BooleanOR_ReturnValue' has a wrong offset!");
static_assert(offsetof(CYBR_DomainLink_C_TryExitLink, CallFunc_Not_PreBool_ReturnValue) == 0x000061, "Member 'CYBR_DomainLink_C_TryExitLink::CallFunc_Not_PreBool_ReturnValue' has a wrong offset!");

// Function CYBR_DomainLink.CYBR_DomainLink_C.GetMaxAvatarFlySpeed
// 0x000C (0x000C - 0x0000)
struct CYBR_DomainLink_C_GetMaxAvatarFlySpeed final
{
public:
	float                                         DefaultSpeed;                                      // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Result;                                            // 0x0004(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Multiply_FloatFloat_ReturnValue;          // 0x0008(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(CYBR_DomainLink_C_GetMaxAvatarFlySpeed) == 0x000004, "Wrong alignment on CYBR_DomainLink_C_GetMaxAvatarFlySpeed");
static_assert(sizeof(CYBR_DomainLink_C_GetMaxAvatarFlySpeed) == 0x00000C, "Wrong size on CYBR_DomainLink_C_GetMaxAvatarFlySpeed");
static_assert(offsetof(CYBR_DomainLink_C_GetMaxAvatarFlySpeed, DefaultSpeed) == 0x000000, "Member 'CYBR_DomainLink_C_GetMaxAvatarFlySpeed::DefaultSpeed' has a wrong offset!");
static_assert(offsetof(CYBR_DomainLink_C_GetMaxAvatarFlySpeed, Result) == 0x000004, "Member 'CYBR_DomainLink_C_GetMaxAvatarFlySpeed::Result' has a wrong offset!");
static_assert(offsetof(CYBR_DomainLink_C_GetMaxAvatarFlySpeed, CallFunc_Multiply_FloatFloat_ReturnValue) == 0x000008, "Member 'CYBR_DomainLink_C_GetMaxAvatarFlySpeed::CallFunc_Multiply_FloatFloat_ReturnValue' has a wrong offset!");

// Function CYBR_DomainLink.CYBR_DomainLink_C.GetAvatarAcceleration
// 0x000C (0x000C - 0x0000)
struct CYBR_DomainLink_C_GetAvatarAcceleration final
{
public:
	float                                         DefaultSpeed;                                      // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Result;                                            // 0x0004(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_SafeDivide_ReturnValue;                   // 0x0008(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(CYBR_DomainLink_C_GetAvatarAcceleration) == 0x000004, "Wrong alignment on CYBR_DomainLink_C_GetAvatarAcceleration");
static_assert(sizeof(CYBR_DomainLink_C_GetAvatarAcceleration) == 0x00000C, "Wrong size on CYBR_DomainLink_C_GetAvatarAcceleration");
static_assert(offsetof(CYBR_DomainLink_C_GetAvatarAcceleration, DefaultSpeed) == 0x000000, "Member 'CYBR_DomainLink_C_GetAvatarAcceleration::DefaultSpeed' has a wrong offset!");
static_assert(offsetof(CYBR_DomainLink_C_GetAvatarAcceleration, Result) == 0x000004, "Member 'CYBR_DomainLink_C_GetAvatarAcceleration::Result' has a wrong offset!");
static_assert(offsetof(CYBR_DomainLink_C_GetAvatarAcceleration, CallFunc_SafeDivide_ReturnValue) == 0x000008, "Member 'CYBR_DomainLink_C_GetAvatarAcceleration::CallFunc_SafeDivide_ReturnValue' has a wrong offset!");

// Function CYBR_DomainLink.CYBR_DomainLink_C.GetDomainLinkDirection
// 0x0068 (0x0068 - 0x0000)
struct CYBR_DomainLink_C_GetDomainLinkDirection final
{
public:
	struct FVector                                PawnLocation;                                      // 0x0000(0x000C)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          IsForward;                                         // 0x000C(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_D[0x3];                                        // 0x000D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                Direction;                                         // 0x0010(0x000C)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                ToSplineLocation;                                  // 0x001C(0x000C)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                SplineLocation;                                    // 0x0028(0x000C)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                BackToSplineImpulse;                               // 0x0034(0x000C)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                SplineForwardImpulse;                              // 0x0040(0x000C)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_SelectFloat_ReturnValue;                  // 0x004C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_FindDirectionClosestToWorldLocation_ReturnValue; // 0x0050(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Multiply_VectorFloat_ReturnValue;         // 0x005C(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(CYBR_DomainLink_C_GetDomainLinkDirection) == 0x000004, "Wrong alignment on CYBR_DomainLink_C_GetDomainLinkDirection");
static_assert(sizeof(CYBR_DomainLink_C_GetDomainLinkDirection) == 0x000068, "Wrong size on CYBR_DomainLink_C_GetDomainLinkDirection");
static_assert(offsetof(CYBR_DomainLink_C_GetDomainLinkDirection, PawnLocation) == 0x000000, "Member 'CYBR_DomainLink_C_GetDomainLinkDirection::PawnLocation' has a wrong offset!");
static_assert(offsetof(CYBR_DomainLink_C_GetDomainLinkDirection, IsForward) == 0x00000C, "Member 'CYBR_DomainLink_C_GetDomainLinkDirection::IsForward' has a wrong offset!");
static_assert(offsetof(CYBR_DomainLink_C_GetDomainLinkDirection, Direction) == 0x000010, "Member 'CYBR_DomainLink_C_GetDomainLinkDirection::Direction' has a wrong offset!");
static_assert(offsetof(CYBR_DomainLink_C_GetDomainLinkDirection, ToSplineLocation) == 0x00001C, "Member 'CYBR_DomainLink_C_GetDomainLinkDirection::ToSplineLocation' has a wrong offset!");
static_assert(offsetof(CYBR_DomainLink_C_GetDomainLinkDirection, SplineLocation) == 0x000028, "Member 'CYBR_DomainLink_C_GetDomainLinkDirection::SplineLocation' has a wrong offset!");
static_assert(offsetof(CYBR_DomainLink_C_GetDomainLinkDirection, BackToSplineImpulse) == 0x000034, "Member 'CYBR_DomainLink_C_GetDomainLinkDirection::BackToSplineImpulse' has a wrong offset!");
static_assert(offsetof(CYBR_DomainLink_C_GetDomainLinkDirection, SplineForwardImpulse) == 0x000040, "Member 'CYBR_DomainLink_C_GetDomainLinkDirection::SplineForwardImpulse' has a wrong offset!");
static_assert(offsetof(CYBR_DomainLink_C_GetDomainLinkDirection, CallFunc_SelectFloat_ReturnValue) == 0x00004C, "Member 'CYBR_DomainLink_C_GetDomainLinkDirection::CallFunc_SelectFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(CYBR_DomainLink_C_GetDomainLinkDirection, CallFunc_FindDirectionClosestToWorldLocation_ReturnValue) == 0x000050, "Member 'CYBR_DomainLink_C_GetDomainLinkDirection::CallFunc_FindDirectionClosestToWorldLocation_ReturnValue' has a wrong offset!");
static_assert(offsetof(CYBR_DomainLink_C_GetDomainLinkDirection, CallFunc_Multiply_VectorFloat_ReturnValue) == 0x00005C, "Member 'CYBR_DomainLink_C_GetDomainLinkDirection::CallFunc_Multiply_VectorFloat_ReturnValue' has a wrong offset!");

// Function CYBR_DomainLink.CYBR_DomainLink_C.GetTargetLookDirection
// 0x008C (0x008C - 0x0000)
struct CYBR_DomainLink_C_GetTargetLookDirection final
{
public:
	struct FVector                                PawnLocation;                                      // 0x0000(0x000C)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Distance;                                          // 0x000C(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          IsForward;                                         // 0x0010(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_11[0x3];                                       // 0x0011(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                LookDirection;                                     // 0x0014(0x000C)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                ForwardSplineLocation;                             // 0x0020(0x000C)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                DomainLinkDirection;                               // 0x002C(0x000C)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_GetDomainLinkDirection_Direction;         // 0x0038(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Add_VectorVector_ReturnValue;             // 0x0044(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Normal_ReturnValue;                       // 0x0050(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_GetDomainLinkDirection_Direction_1;       // 0x005C(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Multiply_VectorFloat_ReturnValue;         // 0x0068(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Add_VectorVector_ReturnValue_1;           // 0x0074(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_FindLocationClosestToWorldLocation_ReturnValue; // 0x0080(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(CYBR_DomainLink_C_GetTargetLookDirection) == 0x000004, "Wrong alignment on CYBR_DomainLink_C_GetTargetLookDirection");
static_assert(sizeof(CYBR_DomainLink_C_GetTargetLookDirection) == 0x00008C, "Wrong size on CYBR_DomainLink_C_GetTargetLookDirection");
static_assert(offsetof(CYBR_DomainLink_C_GetTargetLookDirection, PawnLocation) == 0x000000, "Member 'CYBR_DomainLink_C_GetTargetLookDirection::PawnLocation' has a wrong offset!");
static_assert(offsetof(CYBR_DomainLink_C_GetTargetLookDirection, Distance) == 0x00000C, "Member 'CYBR_DomainLink_C_GetTargetLookDirection::Distance' has a wrong offset!");
static_assert(offsetof(CYBR_DomainLink_C_GetTargetLookDirection, IsForward) == 0x000010, "Member 'CYBR_DomainLink_C_GetTargetLookDirection::IsForward' has a wrong offset!");
static_assert(offsetof(CYBR_DomainLink_C_GetTargetLookDirection, LookDirection) == 0x000014, "Member 'CYBR_DomainLink_C_GetTargetLookDirection::LookDirection' has a wrong offset!");
static_assert(offsetof(CYBR_DomainLink_C_GetTargetLookDirection, ForwardSplineLocation) == 0x000020, "Member 'CYBR_DomainLink_C_GetTargetLookDirection::ForwardSplineLocation' has a wrong offset!");
static_assert(offsetof(CYBR_DomainLink_C_GetTargetLookDirection, DomainLinkDirection) == 0x00002C, "Member 'CYBR_DomainLink_C_GetTargetLookDirection::DomainLinkDirection' has a wrong offset!");
static_assert(offsetof(CYBR_DomainLink_C_GetTargetLookDirection, CallFunc_GetDomainLinkDirection_Direction) == 0x000038, "Member 'CYBR_DomainLink_C_GetTargetLookDirection::CallFunc_GetDomainLinkDirection_Direction' has a wrong offset!");
static_assert(offsetof(CYBR_DomainLink_C_GetTargetLookDirection, CallFunc_Add_VectorVector_ReturnValue) == 0x000044, "Member 'CYBR_DomainLink_C_GetTargetLookDirection::CallFunc_Add_VectorVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(CYBR_DomainLink_C_GetTargetLookDirection, CallFunc_Normal_ReturnValue) == 0x000050, "Member 'CYBR_DomainLink_C_GetTargetLookDirection::CallFunc_Normal_ReturnValue' has a wrong offset!");
static_assert(offsetof(CYBR_DomainLink_C_GetTargetLookDirection, CallFunc_GetDomainLinkDirection_Direction_1) == 0x00005C, "Member 'CYBR_DomainLink_C_GetTargetLookDirection::CallFunc_GetDomainLinkDirection_Direction_1' has a wrong offset!");
static_assert(offsetof(CYBR_DomainLink_C_GetTargetLookDirection, CallFunc_Multiply_VectorFloat_ReturnValue) == 0x000068, "Member 'CYBR_DomainLink_C_GetTargetLookDirection::CallFunc_Multiply_VectorFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(CYBR_DomainLink_C_GetTargetLookDirection, CallFunc_Add_VectorVector_ReturnValue_1) == 0x000074, "Member 'CYBR_DomainLink_C_GetTargetLookDirection::CallFunc_Add_VectorVector_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(CYBR_DomainLink_C_GetTargetLookDirection, CallFunc_FindLocationClosestToWorldLocation_ReturnValue) == 0x000080, "Member 'CYBR_DomainLink_C_GetTargetLookDirection::CallFunc_FindLocationClosestToWorldLocation_ReturnValue' has a wrong offset!");

// Function CYBR_DomainLink.CYBR_DomainLink_C.GetTargetRollVector
// 0x005C (0x005C - 0x0000)
struct CYBR_DomainLink_C_GetTargetRollVector final
{
public:
	struct FVector                                PawnLocation;                                      // 0x0000(0x000C)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Distance;                                          // 0x000C(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          IsForward;                                         // 0x0010(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_11[0x3];                                       // 0x0011(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                RollAxis;                                          // 0x0014(0x000C)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                DomainLinkDirection;                               // 0x0020(0x000C)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Multiply_VectorFloat_ReturnValue;         // 0x002C(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_GetDomainLinkDirection_Direction;         // 0x0038(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Subtract_VectorVector_ReturnValue;        // 0x0044(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_FindRightVectorClosestToWorldLocation_ReturnValue; // 0x0050(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(CYBR_DomainLink_C_GetTargetRollVector) == 0x000004, "Wrong alignment on CYBR_DomainLink_C_GetTargetRollVector");
static_assert(sizeof(CYBR_DomainLink_C_GetTargetRollVector) == 0x00005C, "Wrong size on CYBR_DomainLink_C_GetTargetRollVector");
static_assert(offsetof(CYBR_DomainLink_C_GetTargetRollVector, PawnLocation) == 0x000000, "Member 'CYBR_DomainLink_C_GetTargetRollVector::PawnLocation' has a wrong offset!");
static_assert(offsetof(CYBR_DomainLink_C_GetTargetRollVector, Distance) == 0x00000C, "Member 'CYBR_DomainLink_C_GetTargetRollVector::Distance' has a wrong offset!");
static_assert(offsetof(CYBR_DomainLink_C_GetTargetRollVector, IsForward) == 0x000010, "Member 'CYBR_DomainLink_C_GetTargetRollVector::IsForward' has a wrong offset!");
static_assert(offsetof(CYBR_DomainLink_C_GetTargetRollVector, RollAxis) == 0x000014, "Member 'CYBR_DomainLink_C_GetTargetRollVector::RollAxis' has a wrong offset!");
static_assert(offsetof(CYBR_DomainLink_C_GetTargetRollVector, DomainLinkDirection) == 0x000020, "Member 'CYBR_DomainLink_C_GetTargetRollVector::DomainLinkDirection' has a wrong offset!");
static_assert(offsetof(CYBR_DomainLink_C_GetTargetRollVector, CallFunc_Multiply_VectorFloat_ReturnValue) == 0x00002C, "Member 'CYBR_DomainLink_C_GetTargetRollVector::CallFunc_Multiply_VectorFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(CYBR_DomainLink_C_GetTargetRollVector, CallFunc_GetDomainLinkDirection_Direction) == 0x000038, "Member 'CYBR_DomainLink_C_GetTargetRollVector::CallFunc_GetDomainLinkDirection_Direction' has a wrong offset!");
static_assert(offsetof(CYBR_DomainLink_C_GetTargetRollVector, CallFunc_Subtract_VectorVector_ReturnValue) == 0x000044, "Member 'CYBR_DomainLink_C_GetTargetRollVector::CallFunc_Subtract_VectorVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(CYBR_DomainLink_C_GetTargetRollVector, CallFunc_FindRightVectorClosestToWorldLocation_ReturnValue) == 0x000050, "Member 'CYBR_DomainLink_C_GetTargetRollVector::CallFunc_FindRightVectorClosestToWorldLocation_ReturnValue' has a wrong offset!");

// Function CYBR_DomainLink.CYBR_DomainLink_C.GetDomainLinkMoveLocation
// 0x03E0 (0x03E0 - 0x0000)
struct CYBR_DomainLink_C_GetDomainLinkMoveLocation final
{
public:
	struct FVector                                PawnLocation;                                      // 0x0000(0x000C)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         PrevLinkDistance;                                  // 0x000C(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         NextLinkDistance;                                  // 0x0010(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                ResultLocation;                                    // 0x0014(0x000C)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         RelativeY;                                         // 0x0020(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         RelativeX;                                         // 0x0024(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                DeltaLocation;                                     // 0x0028(0x000C)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_34[0xC];                                       // 0x0034(0x000C)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTransform                             NextTransformAlongSpline;                          // 0x0040(0x0030)(Edit, BlueprintVisible, IsPlainOldData, NoDestructor)
	struct FTransform                             PrevTransformAlongSpline;                          // 0x0070(0x0030)(Edit, BlueprintVisible, IsPlainOldData, NoDestructor)
	float                                         SplineDistance;                                    // 0x00A0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         SplineIndex;                                       // 0x00A4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakTransform_Location;                  // 0x00A8(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               CallFunc_BreakTransform_Rotation;                  // 0x00B4(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FVector                                CallFunc_BreakTransform_Scale;                     // 0x00C0(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakTransform_Location_1;                // 0x00CC(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               CallFunc_BreakTransform_Rotation_1;                // 0x00D8(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FVector                                CallFunc_BreakTransform_Scale_1;                   // 0x00E4(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_GetForwardVector_ReturnValue;             // 0x00F0(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_GetUpVector_ReturnValue;                  // 0x00FC(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_ProjectVectorOnToPlane_ReturnValue;       // 0x0108(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakTransform_Location_2;                // 0x0114(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               CallFunc_BreakTransform_Rotation_2;                // 0x0120(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FVector                                CallFunc_BreakTransform_Scale_2;                   // 0x012C(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Multiply_VectorFloat_ReturnValue;         // 0x0138(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakTransform_Location_3;                // 0x0144(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               CallFunc_BreakTransform_Rotation_3;                // 0x0150(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FVector                                CallFunc_BreakTransform_Scale_3;                   // 0x015C(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakTransform_Location_4;                // 0x0168(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               CallFunc_BreakTransform_Rotation_4;                // 0x0174(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FVector                                CallFunc_BreakTransform_Scale_4;                   // 0x0180(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_GetForwardVector_ReturnValue_1;           // 0x018C(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_GetRightVector_ReturnValue;               // 0x0198(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_ProjectVectorOnToPlane_ReturnValue_1;     // 0x01A4(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Multiply_VectorFloat_ReturnValue_1;       // 0x01B0(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakTransform_Location_5;                // 0x01BC(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               CallFunc_BreakTransform_Rotation_5;                // 0x01C8(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FVector                                CallFunc_BreakTransform_Scale_5;                   // 0x01D4(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Add_VectorVector_ReturnValue;             // 0x01E0(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_GetUpVector_ReturnValue_1;                // 0x01EC(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Add_VectorVector_ReturnValue_1;           // 0x01F8(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Dot_VectorVector_ReturnValue;             // 0x0204(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakTransform_Location_6;                // 0x0208(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               CallFunc_BreakTransform_Rotation_6;                // 0x0214(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FVector                                CallFunc_BreakTransform_Scale_6;                   // 0x0220(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakTransform_Location_7;                // 0x022C(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               CallFunc_BreakTransform_Rotation_7;                // 0x0238(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FVector                                CallFunc_BreakTransform_Scale_7;                   // 0x0244(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_GetRightVector_ReturnValue_1;             // 0x0250(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Dot_VectorVector_ReturnValue_1;           // 0x025C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Subtract_VectorVector_ReturnValue;        // 0x0260(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakTransform_Location_8;                // 0x026C(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               CallFunc_BreakTransform_Rotation_8;                // 0x0278(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FVector                                CallFunc_BreakTransform_Scale_8;                   // 0x0284(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakTransform_Location_9;                // 0x0290(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               CallFunc_BreakTransform_Rotation_9;                // 0x029C(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FVector                                CallFunc_BreakTransform_Scale_9;                   // 0x02A8(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_GetForwardVector_ReturnValue_2;           // 0x02B4(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_FloatFloat_ReturnValue;              // 0x02C0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_2C1[0xF];                                      // 0x02C1(0x000F)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTransform                             CallFunc_GetTransformAtDistanceAlongSpline_ReturnValue; // 0x02D0(0x0030)(IsPlainOldData, NoDestructor)
	float                                         CallFunc_Subtract_FloatFloat_ReturnValue;          // 0x0300(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Multiply_VectorFloat_ReturnValue_2;       // 0x0304(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Add_VectorVector_ReturnValue_2;           // 0x0310(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_GetSplineLength_ReturnValue;              // 0x031C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FTransform                             CallFunc_MakeTransform_ReturnValue;                // 0x0320(0x0030)(IsPlainOldData, NoDestructor)
	int32                                         CallFunc_GetNumberOfSplinePoints_ReturnValue;      // 0x0350(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Subtract_IntInt_ReturnValue;              // 0x0354(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_358[0x8];                                      // 0x0358(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTransform                             CallFunc_GetTransformAtSplinePoint_ReturnValue;    // 0x0360(0x0030)(IsPlainOldData, NoDestructor)
	float                                         CallFunc_GetSplineLength_ReturnValue_1;            // 0x0390(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_394[0xC];                                      // 0x0394(0x000C)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTransform                             CallFunc_GetTransformAtDistanceAlongSpline_ReturnValue_1; // 0x03A0(0x0030)(IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Greater_FloatFloat_ReturnValue;           // 0x03D0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(CYBR_DomainLink_C_GetDomainLinkMoveLocation) == 0x000010, "Wrong alignment on CYBR_DomainLink_C_GetDomainLinkMoveLocation");
static_assert(sizeof(CYBR_DomainLink_C_GetDomainLinkMoveLocation) == 0x0003E0, "Wrong size on CYBR_DomainLink_C_GetDomainLinkMoveLocation");
static_assert(offsetof(CYBR_DomainLink_C_GetDomainLinkMoveLocation, PawnLocation) == 0x000000, "Member 'CYBR_DomainLink_C_GetDomainLinkMoveLocation::PawnLocation' has a wrong offset!");
static_assert(offsetof(CYBR_DomainLink_C_GetDomainLinkMoveLocation, PrevLinkDistance) == 0x00000C, "Member 'CYBR_DomainLink_C_GetDomainLinkMoveLocation::PrevLinkDistance' has a wrong offset!");
static_assert(offsetof(CYBR_DomainLink_C_GetDomainLinkMoveLocation, NextLinkDistance) == 0x000010, "Member 'CYBR_DomainLink_C_GetDomainLinkMoveLocation::NextLinkDistance' has a wrong offset!");
static_assert(offsetof(CYBR_DomainLink_C_GetDomainLinkMoveLocation, ResultLocation) == 0x000014, "Member 'CYBR_DomainLink_C_GetDomainLinkMoveLocation::ResultLocation' has a wrong offset!");
static_assert(offsetof(CYBR_DomainLink_C_GetDomainLinkMoveLocation, RelativeY) == 0x000020, "Member 'CYBR_DomainLink_C_GetDomainLinkMoveLocation::RelativeY' has a wrong offset!");
static_assert(offsetof(CYBR_DomainLink_C_GetDomainLinkMoveLocation, RelativeX) == 0x000024, "Member 'CYBR_DomainLink_C_GetDomainLinkMoveLocation::RelativeX' has a wrong offset!");
static_assert(offsetof(CYBR_DomainLink_C_GetDomainLinkMoveLocation, DeltaLocation) == 0x000028, "Member 'CYBR_DomainLink_C_GetDomainLinkMoveLocation::DeltaLocation' has a wrong offset!");
static_assert(offsetof(CYBR_DomainLink_C_GetDomainLinkMoveLocation, NextTransformAlongSpline) == 0x000040, "Member 'CYBR_DomainLink_C_GetDomainLinkMoveLocation::NextTransformAlongSpline' has a wrong offset!");
static_assert(offsetof(CYBR_DomainLink_C_GetDomainLinkMoveLocation, PrevTransformAlongSpline) == 0x000070, "Member 'CYBR_DomainLink_C_GetDomainLinkMoveLocation::PrevTransformAlongSpline' has a wrong offset!");
static_assert(offsetof(CYBR_DomainLink_C_GetDomainLinkMoveLocation, SplineDistance) == 0x0000A0, "Member 'CYBR_DomainLink_C_GetDomainLinkMoveLocation::SplineDistance' has a wrong offset!");
static_assert(offsetof(CYBR_DomainLink_C_GetDomainLinkMoveLocation, SplineIndex) == 0x0000A4, "Member 'CYBR_DomainLink_C_GetDomainLinkMoveLocation::SplineIndex' has a wrong offset!");
static_assert(offsetof(CYBR_DomainLink_C_GetDomainLinkMoveLocation, CallFunc_BreakTransform_Location) == 0x0000A8, "Member 'CYBR_DomainLink_C_GetDomainLinkMoveLocation::CallFunc_BreakTransform_Location' has a wrong offset!");
static_assert(offsetof(CYBR_DomainLink_C_GetDomainLinkMoveLocation, CallFunc_BreakTransform_Rotation) == 0x0000B4, "Member 'CYBR_DomainLink_C_GetDomainLinkMoveLocation::CallFunc_BreakTransform_Rotation' has a wrong offset!");
static_assert(offsetof(CYBR_DomainLink_C_GetDomainLinkMoveLocation, CallFunc_BreakTransform_Scale) == 0x0000C0, "Member 'CYBR_DomainLink_C_GetDomainLinkMoveLocation::CallFunc_BreakTransform_Scale' has a wrong offset!");
static_assert(offsetof(CYBR_DomainLink_C_GetDomainLinkMoveLocation, CallFunc_BreakTransform_Location_1) == 0x0000CC, "Member 'CYBR_DomainLink_C_GetDomainLinkMoveLocation::CallFunc_BreakTransform_Location_1' has a wrong offset!");
static_assert(offsetof(CYBR_DomainLink_C_GetDomainLinkMoveLocation, CallFunc_BreakTransform_Rotation_1) == 0x0000D8, "Member 'CYBR_DomainLink_C_GetDomainLinkMoveLocation::CallFunc_BreakTransform_Rotation_1' has a wrong offset!");
static_assert(offsetof(CYBR_DomainLink_C_GetDomainLinkMoveLocation, CallFunc_BreakTransform_Scale_1) == 0x0000E4, "Member 'CYBR_DomainLink_C_GetDomainLinkMoveLocation::CallFunc_BreakTransform_Scale_1' has a wrong offset!");
static_assert(offsetof(CYBR_DomainLink_C_GetDomainLinkMoveLocation, CallFunc_GetForwardVector_ReturnValue) == 0x0000F0, "Member 'CYBR_DomainLink_C_GetDomainLinkMoveLocation::CallFunc_GetForwardVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(CYBR_DomainLink_C_GetDomainLinkMoveLocation, CallFunc_GetUpVector_ReturnValue) == 0x0000FC, "Member 'CYBR_DomainLink_C_GetDomainLinkMoveLocation::CallFunc_GetUpVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(CYBR_DomainLink_C_GetDomainLinkMoveLocation, CallFunc_ProjectVectorOnToPlane_ReturnValue) == 0x000108, "Member 'CYBR_DomainLink_C_GetDomainLinkMoveLocation::CallFunc_ProjectVectorOnToPlane_ReturnValue' has a wrong offset!");
static_assert(offsetof(CYBR_DomainLink_C_GetDomainLinkMoveLocation, CallFunc_BreakTransform_Location_2) == 0x000114, "Member 'CYBR_DomainLink_C_GetDomainLinkMoveLocation::CallFunc_BreakTransform_Location_2' has a wrong offset!");
static_assert(offsetof(CYBR_DomainLink_C_GetDomainLinkMoveLocation, CallFunc_BreakTransform_Rotation_2) == 0x000120, "Member 'CYBR_DomainLink_C_GetDomainLinkMoveLocation::CallFunc_BreakTransform_Rotation_2' has a wrong offset!");
static_assert(offsetof(CYBR_DomainLink_C_GetDomainLinkMoveLocation, CallFunc_BreakTransform_Scale_2) == 0x00012C, "Member 'CYBR_DomainLink_C_GetDomainLinkMoveLocation::CallFunc_BreakTransform_Scale_2' has a wrong offset!");
static_assert(offsetof(CYBR_DomainLink_C_GetDomainLinkMoveLocation, CallFunc_Multiply_VectorFloat_ReturnValue) == 0x000138, "Member 'CYBR_DomainLink_C_GetDomainLinkMoveLocation::CallFunc_Multiply_VectorFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(CYBR_DomainLink_C_GetDomainLinkMoveLocation, CallFunc_BreakTransform_Location_3) == 0x000144, "Member 'CYBR_DomainLink_C_GetDomainLinkMoveLocation::CallFunc_BreakTransform_Location_3' has a wrong offset!");
static_assert(offsetof(CYBR_DomainLink_C_GetDomainLinkMoveLocation, CallFunc_BreakTransform_Rotation_3) == 0x000150, "Member 'CYBR_DomainLink_C_GetDomainLinkMoveLocation::CallFunc_BreakTransform_Rotation_3' has a wrong offset!");
static_assert(offsetof(CYBR_DomainLink_C_GetDomainLinkMoveLocation, CallFunc_BreakTransform_Scale_3) == 0x00015C, "Member 'CYBR_DomainLink_C_GetDomainLinkMoveLocation::CallFunc_BreakTransform_Scale_3' has a wrong offset!");
static_assert(offsetof(CYBR_DomainLink_C_GetDomainLinkMoveLocation, CallFunc_BreakTransform_Location_4) == 0x000168, "Member 'CYBR_DomainLink_C_GetDomainLinkMoveLocation::CallFunc_BreakTransform_Location_4' has a wrong offset!");
static_assert(offsetof(CYBR_DomainLink_C_GetDomainLinkMoveLocation, CallFunc_BreakTransform_Rotation_4) == 0x000174, "Member 'CYBR_DomainLink_C_GetDomainLinkMoveLocation::CallFunc_BreakTransform_Rotation_4' has a wrong offset!");
static_assert(offsetof(CYBR_DomainLink_C_GetDomainLinkMoveLocation, CallFunc_BreakTransform_Scale_4) == 0x000180, "Member 'CYBR_DomainLink_C_GetDomainLinkMoveLocation::CallFunc_BreakTransform_Scale_4' has a wrong offset!");
static_assert(offsetof(CYBR_DomainLink_C_GetDomainLinkMoveLocation, CallFunc_GetForwardVector_ReturnValue_1) == 0x00018C, "Member 'CYBR_DomainLink_C_GetDomainLinkMoveLocation::CallFunc_GetForwardVector_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(CYBR_DomainLink_C_GetDomainLinkMoveLocation, CallFunc_GetRightVector_ReturnValue) == 0x000198, "Member 'CYBR_DomainLink_C_GetDomainLinkMoveLocation::CallFunc_GetRightVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(CYBR_DomainLink_C_GetDomainLinkMoveLocation, CallFunc_ProjectVectorOnToPlane_ReturnValue_1) == 0x0001A4, "Member 'CYBR_DomainLink_C_GetDomainLinkMoveLocation::CallFunc_ProjectVectorOnToPlane_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(CYBR_DomainLink_C_GetDomainLinkMoveLocation, CallFunc_Multiply_VectorFloat_ReturnValue_1) == 0x0001B0, "Member 'CYBR_DomainLink_C_GetDomainLinkMoveLocation::CallFunc_Multiply_VectorFloat_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(CYBR_DomainLink_C_GetDomainLinkMoveLocation, CallFunc_BreakTransform_Location_5) == 0x0001BC, "Member 'CYBR_DomainLink_C_GetDomainLinkMoveLocation::CallFunc_BreakTransform_Location_5' has a wrong offset!");
static_assert(offsetof(CYBR_DomainLink_C_GetDomainLinkMoveLocation, CallFunc_BreakTransform_Rotation_5) == 0x0001C8, "Member 'CYBR_DomainLink_C_GetDomainLinkMoveLocation::CallFunc_BreakTransform_Rotation_5' has a wrong offset!");
static_assert(offsetof(CYBR_DomainLink_C_GetDomainLinkMoveLocation, CallFunc_BreakTransform_Scale_5) == 0x0001D4, "Member 'CYBR_DomainLink_C_GetDomainLinkMoveLocation::CallFunc_BreakTransform_Scale_5' has a wrong offset!");
static_assert(offsetof(CYBR_DomainLink_C_GetDomainLinkMoveLocation, CallFunc_Add_VectorVector_ReturnValue) == 0x0001E0, "Member 'CYBR_DomainLink_C_GetDomainLinkMoveLocation::CallFunc_Add_VectorVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(CYBR_DomainLink_C_GetDomainLinkMoveLocation, CallFunc_GetUpVector_ReturnValue_1) == 0x0001EC, "Member 'CYBR_DomainLink_C_GetDomainLinkMoveLocation::CallFunc_GetUpVector_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(CYBR_DomainLink_C_GetDomainLinkMoveLocation, CallFunc_Add_VectorVector_ReturnValue_1) == 0x0001F8, "Member 'CYBR_DomainLink_C_GetDomainLinkMoveLocation::CallFunc_Add_VectorVector_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(CYBR_DomainLink_C_GetDomainLinkMoveLocation, CallFunc_Dot_VectorVector_ReturnValue) == 0x000204, "Member 'CYBR_DomainLink_C_GetDomainLinkMoveLocation::CallFunc_Dot_VectorVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(CYBR_DomainLink_C_GetDomainLinkMoveLocation, CallFunc_BreakTransform_Location_6) == 0x000208, "Member 'CYBR_DomainLink_C_GetDomainLinkMoveLocation::CallFunc_BreakTransform_Location_6' has a wrong offset!");
static_assert(offsetof(CYBR_DomainLink_C_GetDomainLinkMoveLocation, CallFunc_BreakTransform_Rotation_6) == 0x000214, "Member 'CYBR_DomainLink_C_GetDomainLinkMoveLocation::CallFunc_BreakTransform_Rotation_6' has a wrong offset!");
static_assert(offsetof(CYBR_DomainLink_C_GetDomainLinkMoveLocation, CallFunc_BreakTransform_Scale_6) == 0x000220, "Member 'CYBR_DomainLink_C_GetDomainLinkMoveLocation::CallFunc_BreakTransform_Scale_6' has a wrong offset!");
static_assert(offsetof(CYBR_DomainLink_C_GetDomainLinkMoveLocation, CallFunc_BreakTransform_Location_7) == 0x00022C, "Member 'CYBR_DomainLink_C_GetDomainLinkMoveLocation::CallFunc_BreakTransform_Location_7' has a wrong offset!");
static_assert(offsetof(CYBR_DomainLink_C_GetDomainLinkMoveLocation, CallFunc_BreakTransform_Rotation_7) == 0x000238, "Member 'CYBR_DomainLink_C_GetDomainLinkMoveLocation::CallFunc_BreakTransform_Rotation_7' has a wrong offset!");
static_assert(offsetof(CYBR_DomainLink_C_GetDomainLinkMoveLocation, CallFunc_BreakTransform_Scale_7) == 0x000244, "Member 'CYBR_DomainLink_C_GetDomainLinkMoveLocation::CallFunc_BreakTransform_Scale_7' has a wrong offset!");
static_assert(offsetof(CYBR_DomainLink_C_GetDomainLinkMoveLocation, CallFunc_GetRightVector_ReturnValue_1) == 0x000250, "Member 'CYBR_DomainLink_C_GetDomainLinkMoveLocation::CallFunc_GetRightVector_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(CYBR_DomainLink_C_GetDomainLinkMoveLocation, CallFunc_Dot_VectorVector_ReturnValue_1) == 0x00025C, "Member 'CYBR_DomainLink_C_GetDomainLinkMoveLocation::CallFunc_Dot_VectorVector_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(CYBR_DomainLink_C_GetDomainLinkMoveLocation, CallFunc_Subtract_VectorVector_ReturnValue) == 0x000260, "Member 'CYBR_DomainLink_C_GetDomainLinkMoveLocation::CallFunc_Subtract_VectorVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(CYBR_DomainLink_C_GetDomainLinkMoveLocation, CallFunc_BreakTransform_Location_8) == 0x00026C, "Member 'CYBR_DomainLink_C_GetDomainLinkMoveLocation::CallFunc_BreakTransform_Location_8' has a wrong offset!");
static_assert(offsetof(CYBR_DomainLink_C_GetDomainLinkMoveLocation, CallFunc_BreakTransform_Rotation_8) == 0x000278, "Member 'CYBR_DomainLink_C_GetDomainLinkMoveLocation::CallFunc_BreakTransform_Rotation_8' has a wrong offset!");
static_assert(offsetof(CYBR_DomainLink_C_GetDomainLinkMoveLocation, CallFunc_BreakTransform_Scale_8) == 0x000284, "Member 'CYBR_DomainLink_C_GetDomainLinkMoveLocation::CallFunc_BreakTransform_Scale_8' has a wrong offset!");
static_assert(offsetof(CYBR_DomainLink_C_GetDomainLinkMoveLocation, CallFunc_BreakTransform_Location_9) == 0x000290, "Member 'CYBR_DomainLink_C_GetDomainLinkMoveLocation::CallFunc_BreakTransform_Location_9' has a wrong offset!");
static_assert(offsetof(CYBR_DomainLink_C_GetDomainLinkMoveLocation, CallFunc_BreakTransform_Rotation_9) == 0x00029C, "Member 'CYBR_DomainLink_C_GetDomainLinkMoveLocation::CallFunc_BreakTransform_Rotation_9' has a wrong offset!");
static_assert(offsetof(CYBR_DomainLink_C_GetDomainLinkMoveLocation, CallFunc_BreakTransform_Scale_9) == 0x0002A8, "Member 'CYBR_DomainLink_C_GetDomainLinkMoveLocation::CallFunc_BreakTransform_Scale_9' has a wrong offset!");
static_assert(offsetof(CYBR_DomainLink_C_GetDomainLinkMoveLocation, CallFunc_GetForwardVector_ReturnValue_2) == 0x0002B4, "Member 'CYBR_DomainLink_C_GetDomainLinkMoveLocation::CallFunc_GetForwardVector_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(CYBR_DomainLink_C_GetDomainLinkMoveLocation, CallFunc_Less_FloatFloat_ReturnValue) == 0x0002C0, "Member 'CYBR_DomainLink_C_GetDomainLinkMoveLocation::CallFunc_Less_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(CYBR_DomainLink_C_GetDomainLinkMoveLocation, CallFunc_GetTransformAtDistanceAlongSpline_ReturnValue) == 0x0002D0, "Member 'CYBR_DomainLink_C_GetDomainLinkMoveLocation::CallFunc_GetTransformAtDistanceAlongSpline_ReturnValue' has a wrong offset!");
static_assert(offsetof(CYBR_DomainLink_C_GetDomainLinkMoveLocation, CallFunc_Subtract_FloatFloat_ReturnValue) == 0x000300, "Member 'CYBR_DomainLink_C_GetDomainLinkMoveLocation::CallFunc_Subtract_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(CYBR_DomainLink_C_GetDomainLinkMoveLocation, CallFunc_Multiply_VectorFloat_ReturnValue_2) == 0x000304, "Member 'CYBR_DomainLink_C_GetDomainLinkMoveLocation::CallFunc_Multiply_VectorFloat_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(CYBR_DomainLink_C_GetDomainLinkMoveLocation, CallFunc_Add_VectorVector_ReturnValue_2) == 0x000310, "Member 'CYBR_DomainLink_C_GetDomainLinkMoveLocation::CallFunc_Add_VectorVector_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(CYBR_DomainLink_C_GetDomainLinkMoveLocation, CallFunc_GetSplineLength_ReturnValue) == 0x00031C, "Member 'CYBR_DomainLink_C_GetDomainLinkMoveLocation::CallFunc_GetSplineLength_ReturnValue' has a wrong offset!");
static_assert(offsetof(CYBR_DomainLink_C_GetDomainLinkMoveLocation, CallFunc_MakeTransform_ReturnValue) == 0x000320, "Member 'CYBR_DomainLink_C_GetDomainLinkMoveLocation::CallFunc_MakeTransform_ReturnValue' has a wrong offset!");
static_assert(offsetof(CYBR_DomainLink_C_GetDomainLinkMoveLocation, CallFunc_GetNumberOfSplinePoints_ReturnValue) == 0x000350, "Member 'CYBR_DomainLink_C_GetDomainLinkMoveLocation::CallFunc_GetNumberOfSplinePoints_ReturnValue' has a wrong offset!");
static_assert(offsetof(CYBR_DomainLink_C_GetDomainLinkMoveLocation, CallFunc_Subtract_IntInt_ReturnValue) == 0x000354, "Member 'CYBR_DomainLink_C_GetDomainLinkMoveLocation::CallFunc_Subtract_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(CYBR_DomainLink_C_GetDomainLinkMoveLocation, CallFunc_GetTransformAtSplinePoint_ReturnValue) == 0x000360, "Member 'CYBR_DomainLink_C_GetDomainLinkMoveLocation::CallFunc_GetTransformAtSplinePoint_ReturnValue' has a wrong offset!");
static_assert(offsetof(CYBR_DomainLink_C_GetDomainLinkMoveLocation, CallFunc_GetSplineLength_ReturnValue_1) == 0x000390, "Member 'CYBR_DomainLink_C_GetDomainLinkMoveLocation::CallFunc_GetSplineLength_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(CYBR_DomainLink_C_GetDomainLinkMoveLocation, CallFunc_GetTransformAtDistanceAlongSpline_ReturnValue_1) == 0x0003A0, "Member 'CYBR_DomainLink_C_GetDomainLinkMoveLocation::CallFunc_GetTransformAtDistanceAlongSpline_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(CYBR_DomainLink_C_GetDomainLinkMoveLocation, CallFunc_Greater_FloatFloat_ReturnValue) == 0x0003D0, "Member 'CYBR_DomainLink_C_GetDomainLinkMoveLocation::CallFunc_Greater_FloatFloat_ReturnValue' has a wrong offset!");

// Function CYBR_DomainLink.CYBR_DomainLink_C.GetLinkDistanceClosestToWorldLocation
// 0x00A8 (0x00A8 - 0x0000)
struct CYBR_DomainLink_C_GetLinkDistanceClosestToWorldLocation final
{
public:
	struct FVector                                Location;                                          // 0x0000(0x000C)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Distance;                                          // 0x000C(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                SplineDirection;                                   // 0x0010(0x000C)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                SplinePoint;                                       // 0x001C(0x000C)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         NextPointDistance;                                 // 0x0028(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         PrevPointDistance;                                 // 0x002C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         NextPointIndex;                                    // 0x0030(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         PrevPointIndex;                                    // 0x0034(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         InputKey;                                          // 0x0038(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Subtract_VectorVector_ReturnValue;        // 0x003C(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_GetSplineLength_ReturnValue;              // 0x0048(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Dot_VectorVector_ReturnValue;             // 0x004C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Add_FloatFloat_ReturnValue;               // 0x0050(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_GetNumberOfSplinePoints_ReturnValue;      // 0x0054(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_GetLocationAtSplinePoint_ReturnValue;     // 0x0058(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Subtract_IntInt_ReturnValue;              // 0x0064(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_GetDirectionAtSplinePoint_ReturnValue;    // 0x0068(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_GetNumberOfSplinePoints_ReturnValue_1;    // 0x0074(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Subtract_IntInt_ReturnValue_1;            // 0x0078(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Conv_IntToFloat_ReturnValue;              // 0x007C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_GreaterEqual_FloatFloat_ReturnValue;      // 0x0080(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_LessEqual_FloatFloat_ReturnValue;         // 0x0081(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_82[0x2];                                       // 0x0082(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_FindInputKeyClosestToWorldLocation_ReturnValue; // 0x0084(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_GetDistanceAlongSplineAtSplinePoint_ReturnValue; // 0x0088(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_GetDistanceAlongSplineAtSplinePoint_ReturnValue_1; // 0x008C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Conv_IntToFloat_ReturnValue_1;            // 0x0090(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Subtract_FloatFloat_ReturnValue;          // 0x0094(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Add_FloatFloat_ReturnValue_1;             // 0x0098(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Lerp_ReturnValue;                         // 0x009C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_FTrunc_ReturnValue;                       // 0x00A0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_FTrunc_ReturnValue_1;                     // 0x00A4(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(CYBR_DomainLink_C_GetLinkDistanceClosestToWorldLocation) == 0x000004, "Wrong alignment on CYBR_DomainLink_C_GetLinkDistanceClosestToWorldLocation");
static_assert(sizeof(CYBR_DomainLink_C_GetLinkDistanceClosestToWorldLocation) == 0x0000A8, "Wrong size on CYBR_DomainLink_C_GetLinkDistanceClosestToWorldLocation");
static_assert(offsetof(CYBR_DomainLink_C_GetLinkDistanceClosestToWorldLocation, Location) == 0x000000, "Member 'CYBR_DomainLink_C_GetLinkDistanceClosestToWorldLocation::Location' has a wrong offset!");
static_assert(offsetof(CYBR_DomainLink_C_GetLinkDistanceClosestToWorldLocation, Distance) == 0x00000C, "Member 'CYBR_DomainLink_C_GetLinkDistanceClosestToWorldLocation::Distance' has a wrong offset!");
static_assert(offsetof(CYBR_DomainLink_C_GetLinkDistanceClosestToWorldLocation, SplineDirection) == 0x000010, "Member 'CYBR_DomainLink_C_GetLinkDistanceClosestToWorldLocation::SplineDirection' has a wrong offset!");
static_assert(offsetof(CYBR_DomainLink_C_GetLinkDistanceClosestToWorldLocation, SplinePoint) == 0x00001C, "Member 'CYBR_DomainLink_C_GetLinkDistanceClosestToWorldLocation::SplinePoint' has a wrong offset!");
static_assert(offsetof(CYBR_DomainLink_C_GetLinkDistanceClosestToWorldLocation, NextPointDistance) == 0x000028, "Member 'CYBR_DomainLink_C_GetLinkDistanceClosestToWorldLocation::NextPointDistance' has a wrong offset!");
static_assert(offsetof(CYBR_DomainLink_C_GetLinkDistanceClosestToWorldLocation, PrevPointDistance) == 0x00002C, "Member 'CYBR_DomainLink_C_GetLinkDistanceClosestToWorldLocation::PrevPointDistance' has a wrong offset!");
static_assert(offsetof(CYBR_DomainLink_C_GetLinkDistanceClosestToWorldLocation, NextPointIndex) == 0x000030, "Member 'CYBR_DomainLink_C_GetLinkDistanceClosestToWorldLocation::NextPointIndex' has a wrong offset!");
static_assert(offsetof(CYBR_DomainLink_C_GetLinkDistanceClosestToWorldLocation, PrevPointIndex) == 0x000034, "Member 'CYBR_DomainLink_C_GetLinkDistanceClosestToWorldLocation::PrevPointIndex' has a wrong offset!");
static_assert(offsetof(CYBR_DomainLink_C_GetLinkDistanceClosestToWorldLocation, InputKey) == 0x000038, "Member 'CYBR_DomainLink_C_GetLinkDistanceClosestToWorldLocation::InputKey' has a wrong offset!");
static_assert(offsetof(CYBR_DomainLink_C_GetLinkDistanceClosestToWorldLocation, CallFunc_Subtract_VectorVector_ReturnValue) == 0x00003C, "Member 'CYBR_DomainLink_C_GetLinkDistanceClosestToWorldLocation::CallFunc_Subtract_VectorVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(CYBR_DomainLink_C_GetLinkDistanceClosestToWorldLocation, CallFunc_GetSplineLength_ReturnValue) == 0x000048, "Member 'CYBR_DomainLink_C_GetLinkDistanceClosestToWorldLocation::CallFunc_GetSplineLength_ReturnValue' has a wrong offset!");
static_assert(offsetof(CYBR_DomainLink_C_GetLinkDistanceClosestToWorldLocation, CallFunc_Dot_VectorVector_ReturnValue) == 0x00004C, "Member 'CYBR_DomainLink_C_GetLinkDistanceClosestToWorldLocation::CallFunc_Dot_VectorVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(CYBR_DomainLink_C_GetLinkDistanceClosestToWorldLocation, CallFunc_Add_FloatFloat_ReturnValue) == 0x000050, "Member 'CYBR_DomainLink_C_GetLinkDistanceClosestToWorldLocation::CallFunc_Add_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(CYBR_DomainLink_C_GetLinkDistanceClosestToWorldLocation, CallFunc_GetNumberOfSplinePoints_ReturnValue) == 0x000054, "Member 'CYBR_DomainLink_C_GetLinkDistanceClosestToWorldLocation::CallFunc_GetNumberOfSplinePoints_ReturnValue' has a wrong offset!");
static_assert(offsetof(CYBR_DomainLink_C_GetLinkDistanceClosestToWorldLocation, CallFunc_GetLocationAtSplinePoint_ReturnValue) == 0x000058, "Member 'CYBR_DomainLink_C_GetLinkDistanceClosestToWorldLocation::CallFunc_GetLocationAtSplinePoint_ReturnValue' has a wrong offset!");
static_assert(offsetof(CYBR_DomainLink_C_GetLinkDistanceClosestToWorldLocation, CallFunc_Subtract_IntInt_ReturnValue) == 0x000064, "Member 'CYBR_DomainLink_C_GetLinkDistanceClosestToWorldLocation::CallFunc_Subtract_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(CYBR_DomainLink_C_GetLinkDistanceClosestToWorldLocation, CallFunc_GetDirectionAtSplinePoint_ReturnValue) == 0x000068, "Member 'CYBR_DomainLink_C_GetLinkDistanceClosestToWorldLocation::CallFunc_GetDirectionAtSplinePoint_ReturnValue' has a wrong offset!");
static_assert(offsetof(CYBR_DomainLink_C_GetLinkDistanceClosestToWorldLocation, CallFunc_GetNumberOfSplinePoints_ReturnValue_1) == 0x000074, "Member 'CYBR_DomainLink_C_GetLinkDistanceClosestToWorldLocation::CallFunc_GetNumberOfSplinePoints_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(CYBR_DomainLink_C_GetLinkDistanceClosestToWorldLocation, CallFunc_Subtract_IntInt_ReturnValue_1) == 0x000078, "Member 'CYBR_DomainLink_C_GetLinkDistanceClosestToWorldLocation::CallFunc_Subtract_IntInt_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(CYBR_DomainLink_C_GetLinkDistanceClosestToWorldLocation, CallFunc_Conv_IntToFloat_ReturnValue) == 0x00007C, "Member 'CYBR_DomainLink_C_GetLinkDistanceClosestToWorldLocation::CallFunc_Conv_IntToFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(CYBR_DomainLink_C_GetLinkDistanceClosestToWorldLocation, CallFunc_GreaterEqual_FloatFloat_ReturnValue) == 0x000080, "Member 'CYBR_DomainLink_C_GetLinkDistanceClosestToWorldLocation::CallFunc_GreaterEqual_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(CYBR_DomainLink_C_GetLinkDistanceClosestToWorldLocation, CallFunc_LessEqual_FloatFloat_ReturnValue) == 0x000081, "Member 'CYBR_DomainLink_C_GetLinkDistanceClosestToWorldLocation::CallFunc_LessEqual_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(CYBR_DomainLink_C_GetLinkDistanceClosestToWorldLocation, CallFunc_FindInputKeyClosestToWorldLocation_ReturnValue) == 0x000084, "Member 'CYBR_DomainLink_C_GetLinkDistanceClosestToWorldLocation::CallFunc_FindInputKeyClosestToWorldLocation_ReturnValue' has a wrong offset!");
static_assert(offsetof(CYBR_DomainLink_C_GetLinkDistanceClosestToWorldLocation, CallFunc_GetDistanceAlongSplineAtSplinePoint_ReturnValue) == 0x000088, "Member 'CYBR_DomainLink_C_GetLinkDistanceClosestToWorldLocation::CallFunc_GetDistanceAlongSplineAtSplinePoint_ReturnValue' has a wrong offset!");
static_assert(offsetof(CYBR_DomainLink_C_GetLinkDistanceClosestToWorldLocation, CallFunc_GetDistanceAlongSplineAtSplinePoint_ReturnValue_1) == 0x00008C, "Member 'CYBR_DomainLink_C_GetLinkDistanceClosestToWorldLocation::CallFunc_GetDistanceAlongSplineAtSplinePoint_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(CYBR_DomainLink_C_GetLinkDistanceClosestToWorldLocation, CallFunc_Conv_IntToFloat_ReturnValue_1) == 0x000090, "Member 'CYBR_DomainLink_C_GetLinkDistanceClosestToWorldLocation::CallFunc_Conv_IntToFloat_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(CYBR_DomainLink_C_GetLinkDistanceClosestToWorldLocation, CallFunc_Subtract_FloatFloat_ReturnValue) == 0x000094, "Member 'CYBR_DomainLink_C_GetLinkDistanceClosestToWorldLocation::CallFunc_Subtract_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(CYBR_DomainLink_C_GetLinkDistanceClosestToWorldLocation, CallFunc_Add_FloatFloat_ReturnValue_1) == 0x000098, "Member 'CYBR_DomainLink_C_GetLinkDistanceClosestToWorldLocation::CallFunc_Add_FloatFloat_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(CYBR_DomainLink_C_GetLinkDistanceClosestToWorldLocation, CallFunc_Lerp_ReturnValue) == 0x00009C, "Member 'CYBR_DomainLink_C_GetLinkDistanceClosestToWorldLocation::CallFunc_Lerp_ReturnValue' has a wrong offset!");
static_assert(offsetof(CYBR_DomainLink_C_GetLinkDistanceClosestToWorldLocation, CallFunc_FTrunc_ReturnValue) == 0x0000A0, "Member 'CYBR_DomainLink_C_GetLinkDistanceClosestToWorldLocation::CallFunc_FTrunc_ReturnValue' has a wrong offset!");
static_assert(offsetof(CYBR_DomainLink_C_GetLinkDistanceClosestToWorldLocation, CallFunc_FTrunc_ReturnValue_1) == 0x0000A4, "Member 'CYBR_DomainLink_C_GetLinkDistanceClosestToWorldLocation::CallFunc_FTrunc_ReturnValue_1' has a wrong offset!");

// Function CYBR_DomainLink.CYBR_DomainLink_C.GetSquareDistanceToPawn
// 0x0050 (0x0050 - 0x0000)
struct CYBR_DomainLink_C_GetSquareDistanceToPawn final
{
public:
	class APAWN_SystemShockCharacter_C*           Pawn;                                              // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Result;                                            // 0x0008(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                AvatarLocation;                                    // 0x000C(0x000C)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_K2_GetActorLocation_ReturnValue;          // 0x0018(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_K2_GetComponentLocation_ReturnValue;      // 0x0024(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Vector_DistanceSquared_ReturnValue;       // 0x0030(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_K2_GetComponentLocation_ReturnValue_1;    // 0x0034(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_ObjectObject_ReturnValue;      // 0x0040(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_41[0x3];                                       // 0x0041(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_Vector_DistanceSquared_ReturnValue_1;     // 0x0044(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_FMin_ReturnValue;                         // 0x0048(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(CYBR_DomainLink_C_GetSquareDistanceToPawn) == 0x000008, "Wrong alignment on CYBR_DomainLink_C_GetSquareDistanceToPawn");
static_assert(sizeof(CYBR_DomainLink_C_GetSquareDistanceToPawn) == 0x000050, "Wrong size on CYBR_DomainLink_C_GetSquareDistanceToPawn");
static_assert(offsetof(CYBR_DomainLink_C_GetSquareDistanceToPawn, Pawn) == 0x000000, "Member 'CYBR_DomainLink_C_GetSquareDistanceToPawn::Pawn' has a wrong offset!");
static_assert(offsetof(CYBR_DomainLink_C_GetSquareDistanceToPawn, Result) == 0x000008, "Member 'CYBR_DomainLink_C_GetSquareDistanceToPawn::Result' has a wrong offset!");
static_assert(offsetof(CYBR_DomainLink_C_GetSquareDistanceToPawn, AvatarLocation) == 0x00000C, "Member 'CYBR_DomainLink_C_GetSquareDistanceToPawn::AvatarLocation' has a wrong offset!");
static_assert(offsetof(CYBR_DomainLink_C_GetSquareDistanceToPawn, CallFunc_K2_GetActorLocation_ReturnValue) == 0x000018, "Member 'CYBR_DomainLink_C_GetSquareDistanceToPawn::CallFunc_K2_GetActorLocation_ReturnValue' has a wrong offset!");
static_assert(offsetof(CYBR_DomainLink_C_GetSquareDistanceToPawn, CallFunc_K2_GetComponentLocation_ReturnValue) == 0x000024, "Member 'CYBR_DomainLink_C_GetSquareDistanceToPawn::CallFunc_K2_GetComponentLocation_ReturnValue' has a wrong offset!");
static_assert(offsetof(CYBR_DomainLink_C_GetSquareDistanceToPawn, CallFunc_Vector_DistanceSquared_ReturnValue) == 0x000030, "Member 'CYBR_DomainLink_C_GetSquareDistanceToPawn::CallFunc_Vector_DistanceSquared_ReturnValue' has a wrong offset!");
static_assert(offsetof(CYBR_DomainLink_C_GetSquareDistanceToPawn, CallFunc_K2_GetComponentLocation_ReturnValue_1) == 0x000034, "Member 'CYBR_DomainLink_C_GetSquareDistanceToPawn::CallFunc_K2_GetComponentLocation_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(CYBR_DomainLink_C_GetSquareDistanceToPawn, CallFunc_EqualEqual_ObjectObject_ReturnValue) == 0x000040, "Member 'CYBR_DomainLink_C_GetSquareDistanceToPawn::CallFunc_EqualEqual_ObjectObject_ReturnValue' has a wrong offset!");
static_assert(offsetof(CYBR_DomainLink_C_GetSquareDistanceToPawn, CallFunc_Vector_DistanceSquared_ReturnValue_1) == 0x000044, "Member 'CYBR_DomainLink_C_GetSquareDistanceToPawn::CallFunc_Vector_DistanceSquared_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(CYBR_DomainLink_C_GetSquareDistanceToPawn, CallFunc_FMin_ReturnValue) == 0x000048, "Member 'CYBR_DomainLink_C_GetSquareDistanceToPawn::CallFunc_FMin_ReturnValue' has a wrong offset!");

}

