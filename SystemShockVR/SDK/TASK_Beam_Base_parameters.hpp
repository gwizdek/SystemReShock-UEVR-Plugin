#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: TASK_Beam_Base

#include "Basic.hpp"

#include "ENUM_TargetType_structs.hpp"
#include "CoreUObject_structs.hpp"
#include "ENUM_MobileLaser_BeamState_structs.hpp"
#include "STRUCT_EnemyStats_structs.hpp"
#include "Engine_structs.hpp"
#include "AttributeSystem_structs.hpp"


namespace SDK::Params
{

// Function TASK_Beam_Base.TASK_Beam_Base_C.ExecuteUbergraph_TASK_Beam_Base
// 0x0148 (0x0148 - 0x0000)
struct TASK_Beam_Base_C_ExecuteUbergraph_TASK_Beam_Base final
{
public:
	int32                                         EntryPoint;                                        // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TDelegate<void(class UObject* Loaded)>        K2Node_CreateDelegate_OutputDelegate;              // 0x0004(0x0010)(ZeroConstructor, NoDestructor)
	int32                                         Temp_int_Loop_Counter_Variable;                    // 0x0014(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue;                   // 0x0018(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Array_Index_Variable;                     // 0x001C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AAIController*                          K2Node_Event_OwnerController_2;                    // 0x0020(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class APawn*                                  K2Node_Event_ControlledPawn_2;                     // 0x0028(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AAIController*                          K2Node_Event_OwnerController_1;                    // 0x0030(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class APawn*                                  K2Node_Event_ControlledPawn_1;                     // 0x0038(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         K2Node_Event_DeltaSeconds;                         // 0x0040(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_44[0x4];                                       // 0x0044(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class APAWN_Enemy_C*                          K2Node_DynamicCast_AsPAWN_Enemy;                   // 0x0048(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0050(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_51[0x3];                                       // 0x0051(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_UpdateBeamTurningOff_Progress;            // 0x0054(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_UpdateBeamTurningOn_Progress;             // 0x0058(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_5C[0x4];                                       // 0x005C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class AAIController*                          K2Node_Event_OwnerController;                      // 0x0060(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class APawn*                                  K2Node_Event_ControlledPawn;                       // 0x0068(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UOBJ_EnemyTarget_C*                     CallFunc_GetTarget_Target;                         // 0x0070(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UObject*                                Temp_object_Variable;                              // 0x0078(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class USoundCue*                              K2Node_DynamicCast_AsSound_Cue;                    // 0x0080(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess_1;                     // 0x0088(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_89[0x3];                                       // 0x0089(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	TDelegate<void(class UObject* Loaded)>        K2Node_CreateDelegate_OutputDelegate_1;            // 0x008C(0x0010)(ZeroConstructor, NoDestructor)
	bool                                          K2Node_SwitchEnum_CmpSuccess;                      // 0x009C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_9D[0x3];                                       // 0x009D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	TDelegate<void(class UObject* Loaded)>        K2Node_CreateDelegate_OutputDelegate_2;            // 0x00A0(0x0010)(ZeroConstructor, NoDestructor)
	bool                                          CallFunc_IsValidSoftObjectReference_ReturnValue;   // 0x00B0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_B1[0x7];                                       // 0x00B1(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UObject*                                K2Node_CustomEvent_Loaded;                         // 0x00B8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x00C0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_C1[0x7];                                       // 0x00C1(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UObject*                                Temp_object_Variable_1;                            // 0x00C8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UObject*                                K2Node_CustomEvent_Loaded_1;                       // 0x00D0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class USoundCue*                              K2Node_DynamicCast_AsSound_Cue_1;                  // 0x00D8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess_2;                     // 0x00E0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsValidSoftObjectReference_ReturnValue_1; // 0x00E1(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_E2[0x6];                                       // 0x00E2(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class UVoxelAudioComponent*                   CallFunc_SpawnVoxelSoundAttachedFromClass_ReturnValue; // 0x00E8(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_ByteByte_ReturnValue;          // 0x00F0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_F1[0x7];                                       // 0x00F1(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UVoxelAudioComponent*                   CallFunc_SpawnVoxelSoundAttachedFromClass_ReturnValue_1; // 0x00F8(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_ByteByte_ReturnValue_1;        // 0x0100(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BooleanOR_ReturnValue;                    // 0x0101(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_102[0x2];                                      // 0x0102(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Array_Length_ReturnValue;                 // 0x0104(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UObject*                                Temp_object_Variable_2;                            // 0x0108(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FName                                   CallFunc_Array_Get_Item;                           // 0x0110(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UNiagaraSystem*                         K2Node_DynamicCast_AsNiagara_System;               // 0x0118(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess_3;                     // 0x0120(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_121[0x7];                                      // 0x0121(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UObject*                                K2Node_CustomEvent_Loaded_2;                       // 0x0128(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Length_ReturnValue_1;               // 0x0130(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue;                  // 0x0134(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_135[0x3];                                      // 0x0135(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class UNiagaraComponent*                      CallFunc_SpawnSystemAttached_ReturnValue;          // 0x0138(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue_1;                    // 0x0140(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_141[0x3];                                      // 0x0141(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Array_Add_ReturnValue;                    // 0x0144(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(TASK_Beam_Base_C_ExecuteUbergraph_TASK_Beam_Base) == 0x000008, "Wrong alignment on TASK_Beam_Base_C_ExecuteUbergraph_TASK_Beam_Base");
static_assert(sizeof(TASK_Beam_Base_C_ExecuteUbergraph_TASK_Beam_Base) == 0x000148, "Wrong size on TASK_Beam_Base_C_ExecuteUbergraph_TASK_Beam_Base");
static_assert(offsetof(TASK_Beam_Base_C_ExecuteUbergraph_TASK_Beam_Base, EntryPoint) == 0x000000, "Member 'TASK_Beam_Base_C_ExecuteUbergraph_TASK_Beam_Base::EntryPoint' has a wrong offset!");
static_assert(offsetof(TASK_Beam_Base_C_ExecuteUbergraph_TASK_Beam_Base, K2Node_CreateDelegate_OutputDelegate) == 0x000004, "Member 'TASK_Beam_Base_C_ExecuteUbergraph_TASK_Beam_Base::K2Node_CreateDelegate_OutputDelegate' has a wrong offset!");
static_assert(offsetof(TASK_Beam_Base_C_ExecuteUbergraph_TASK_Beam_Base, Temp_int_Loop_Counter_Variable) == 0x000014, "Member 'TASK_Beam_Base_C_ExecuteUbergraph_TASK_Beam_Base::Temp_int_Loop_Counter_Variable' has a wrong offset!");
static_assert(offsetof(TASK_Beam_Base_C_ExecuteUbergraph_TASK_Beam_Base, CallFunc_Add_IntInt_ReturnValue) == 0x000018, "Member 'TASK_Beam_Base_C_ExecuteUbergraph_TASK_Beam_Base::CallFunc_Add_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(TASK_Beam_Base_C_ExecuteUbergraph_TASK_Beam_Base, Temp_int_Array_Index_Variable) == 0x00001C, "Member 'TASK_Beam_Base_C_ExecuteUbergraph_TASK_Beam_Base::Temp_int_Array_Index_Variable' has a wrong offset!");
static_assert(offsetof(TASK_Beam_Base_C_ExecuteUbergraph_TASK_Beam_Base, K2Node_Event_OwnerController_2) == 0x000020, "Member 'TASK_Beam_Base_C_ExecuteUbergraph_TASK_Beam_Base::K2Node_Event_OwnerController_2' has a wrong offset!");
static_assert(offsetof(TASK_Beam_Base_C_ExecuteUbergraph_TASK_Beam_Base, K2Node_Event_ControlledPawn_2) == 0x000028, "Member 'TASK_Beam_Base_C_ExecuteUbergraph_TASK_Beam_Base::K2Node_Event_ControlledPawn_2' has a wrong offset!");
static_assert(offsetof(TASK_Beam_Base_C_ExecuteUbergraph_TASK_Beam_Base, K2Node_Event_OwnerController_1) == 0x000030, "Member 'TASK_Beam_Base_C_ExecuteUbergraph_TASK_Beam_Base::K2Node_Event_OwnerController_1' has a wrong offset!");
static_assert(offsetof(TASK_Beam_Base_C_ExecuteUbergraph_TASK_Beam_Base, K2Node_Event_ControlledPawn_1) == 0x000038, "Member 'TASK_Beam_Base_C_ExecuteUbergraph_TASK_Beam_Base::K2Node_Event_ControlledPawn_1' has a wrong offset!");
static_assert(offsetof(TASK_Beam_Base_C_ExecuteUbergraph_TASK_Beam_Base, K2Node_Event_DeltaSeconds) == 0x000040, "Member 'TASK_Beam_Base_C_ExecuteUbergraph_TASK_Beam_Base::K2Node_Event_DeltaSeconds' has a wrong offset!");
static_assert(offsetof(TASK_Beam_Base_C_ExecuteUbergraph_TASK_Beam_Base, K2Node_DynamicCast_AsPAWN_Enemy) == 0x000048, "Member 'TASK_Beam_Base_C_ExecuteUbergraph_TASK_Beam_Base::K2Node_DynamicCast_AsPAWN_Enemy' has a wrong offset!");
static_assert(offsetof(TASK_Beam_Base_C_ExecuteUbergraph_TASK_Beam_Base, K2Node_DynamicCast_bSuccess) == 0x000050, "Member 'TASK_Beam_Base_C_ExecuteUbergraph_TASK_Beam_Base::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(TASK_Beam_Base_C_ExecuteUbergraph_TASK_Beam_Base, CallFunc_UpdateBeamTurningOff_Progress) == 0x000054, "Member 'TASK_Beam_Base_C_ExecuteUbergraph_TASK_Beam_Base::CallFunc_UpdateBeamTurningOff_Progress' has a wrong offset!");
static_assert(offsetof(TASK_Beam_Base_C_ExecuteUbergraph_TASK_Beam_Base, CallFunc_UpdateBeamTurningOn_Progress) == 0x000058, "Member 'TASK_Beam_Base_C_ExecuteUbergraph_TASK_Beam_Base::CallFunc_UpdateBeamTurningOn_Progress' has a wrong offset!");
static_assert(offsetof(TASK_Beam_Base_C_ExecuteUbergraph_TASK_Beam_Base, K2Node_Event_OwnerController) == 0x000060, "Member 'TASK_Beam_Base_C_ExecuteUbergraph_TASK_Beam_Base::K2Node_Event_OwnerController' has a wrong offset!");
static_assert(offsetof(TASK_Beam_Base_C_ExecuteUbergraph_TASK_Beam_Base, K2Node_Event_ControlledPawn) == 0x000068, "Member 'TASK_Beam_Base_C_ExecuteUbergraph_TASK_Beam_Base::K2Node_Event_ControlledPawn' has a wrong offset!");
static_assert(offsetof(TASK_Beam_Base_C_ExecuteUbergraph_TASK_Beam_Base, CallFunc_GetTarget_Target) == 0x000070, "Member 'TASK_Beam_Base_C_ExecuteUbergraph_TASK_Beam_Base::CallFunc_GetTarget_Target' has a wrong offset!");
static_assert(offsetof(TASK_Beam_Base_C_ExecuteUbergraph_TASK_Beam_Base, Temp_object_Variable) == 0x000078, "Member 'TASK_Beam_Base_C_ExecuteUbergraph_TASK_Beam_Base::Temp_object_Variable' has a wrong offset!");
static_assert(offsetof(TASK_Beam_Base_C_ExecuteUbergraph_TASK_Beam_Base, K2Node_DynamicCast_AsSound_Cue) == 0x000080, "Member 'TASK_Beam_Base_C_ExecuteUbergraph_TASK_Beam_Base::K2Node_DynamicCast_AsSound_Cue' has a wrong offset!");
static_assert(offsetof(TASK_Beam_Base_C_ExecuteUbergraph_TASK_Beam_Base, K2Node_DynamicCast_bSuccess_1) == 0x000088, "Member 'TASK_Beam_Base_C_ExecuteUbergraph_TASK_Beam_Base::K2Node_DynamicCast_bSuccess_1' has a wrong offset!");
static_assert(offsetof(TASK_Beam_Base_C_ExecuteUbergraph_TASK_Beam_Base, K2Node_CreateDelegate_OutputDelegate_1) == 0x00008C, "Member 'TASK_Beam_Base_C_ExecuteUbergraph_TASK_Beam_Base::K2Node_CreateDelegate_OutputDelegate_1' has a wrong offset!");
static_assert(offsetof(TASK_Beam_Base_C_ExecuteUbergraph_TASK_Beam_Base, K2Node_SwitchEnum_CmpSuccess) == 0x00009C, "Member 'TASK_Beam_Base_C_ExecuteUbergraph_TASK_Beam_Base::K2Node_SwitchEnum_CmpSuccess' has a wrong offset!");
static_assert(offsetof(TASK_Beam_Base_C_ExecuteUbergraph_TASK_Beam_Base, K2Node_CreateDelegate_OutputDelegate_2) == 0x0000A0, "Member 'TASK_Beam_Base_C_ExecuteUbergraph_TASK_Beam_Base::K2Node_CreateDelegate_OutputDelegate_2' has a wrong offset!");
static_assert(offsetof(TASK_Beam_Base_C_ExecuteUbergraph_TASK_Beam_Base, CallFunc_IsValidSoftObjectReference_ReturnValue) == 0x0000B0, "Member 'TASK_Beam_Base_C_ExecuteUbergraph_TASK_Beam_Base::CallFunc_IsValidSoftObjectReference_ReturnValue' has a wrong offset!");
static_assert(offsetof(TASK_Beam_Base_C_ExecuteUbergraph_TASK_Beam_Base, K2Node_CustomEvent_Loaded) == 0x0000B8, "Member 'TASK_Beam_Base_C_ExecuteUbergraph_TASK_Beam_Base::K2Node_CustomEvent_Loaded' has a wrong offset!");
static_assert(offsetof(TASK_Beam_Base_C_ExecuteUbergraph_TASK_Beam_Base, CallFunc_IsValid_ReturnValue) == 0x0000C0, "Member 'TASK_Beam_Base_C_ExecuteUbergraph_TASK_Beam_Base::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(TASK_Beam_Base_C_ExecuteUbergraph_TASK_Beam_Base, Temp_object_Variable_1) == 0x0000C8, "Member 'TASK_Beam_Base_C_ExecuteUbergraph_TASK_Beam_Base::Temp_object_Variable_1' has a wrong offset!");
static_assert(offsetof(TASK_Beam_Base_C_ExecuteUbergraph_TASK_Beam_Base, K2Node_CustomEvent_Loaded_1) == 0x0000D0, "Member 'TASK_Beam_Base_C_ExecuteUbergraph_TASK_Beam_Base::K2Node_CustomEvent_Loaded_1' has a wrong offset!");
static_assert(offsetof(TASK_Beam_Base_C_ExecuteUbergraph_TASK_Beam_Base, K2Node_DynamicCast_AsSound_Cue_1) == 0x0000D8, "Member 'TASK_Beam_Base_C_ExecuteUbergraph_TASK_Beam_Base::K2Node_DynamicCast_AsSound_Cue_1' has a wrong offset!");
static_assert(offsetof(TASK_Beam_Base_C_ExecuteUbergraph_TASK_Beam_Base, K2Node_DynamicCast_bSuccess_2) == 0x0000E0, "Member 'TASK_Beam_Base_C_ExecuteUbergraph_TASK_Beam_Base::K2Node_DynamicCast_bSuccess_2' has a wrong offset!");
static_assert(offsetof(TASK_Beam_Base_C_ExecuteUbergraph_TASK_Beam_Base, CallFunc_IsValidSoftObjectReference_ReturnValue_1) == 0x0000E1, "Member 'TASK_Beam_Base_C_ExecuteUbergraph_TASK_Beam_Base::CallFunc_IsValidSoftObjectReference_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(TASK_Beam_Base_C_ExecuteUbergraph_TASK_Beam_Base, CallFunc_SpawnVoxelSoundAttachedFromClass_ReturnValue) == 0x0000E8, "Member 'TASK_Beam_Base_C_ExecuteUbergraph_TASK_Beam_Base::CallFunc_SpawnVoxelSoundAttachedFromClass_ReturnValue' has a wrong offset!");
static_assert(offsetof(TASK_Beam_Base_C_ExecuteUbergraph_TASK_Beam_Base, CallFunc_EqualEqual_ByteByte_ReturnValue) == 0x0000F0, "Member 'TASK_Beam_Base_C_ExecuteUbergraph_TASK_Beam_Base::CallFunc_EqualEqual_ByteByte_ReturnValue' has a wrong offset!");
static_assert(offsetof(TASK_Beam_Base_C_ExecuteUbergraph_TASK_Beam_Base, CallFunc_SpawnVoxelSoundAttachedFromClass_ReturnValue_1) == 0x0000F8, "Member 'TASK_Beam_Base_C_ExecuteUbergraph_TASK_Beam_Base::CallFunc_SpawnVoxelSoundAttachedFromClass_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(TASK_Beam_Base_C_ExecuteUbergraph_TASK_Beam_Base, CallFunc_EqualEqual_ByteByte_ReturnValue_1) == 0x000100, "Member 'TASK_Beam_Base_C_ExecuteUbergraph_TASK_Beam_Base::CallFunc_EqualEqual_ByteByte_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(TASK_Beam_Base_C_ExecuteUbergraph_TASK_Beam_Base, CallFunc_BooleanOR_ReturnValue) == 0x000101, "Member 'TASK_Beam_Base_C_ExecuteUbergraph_TASK_Beam_Base::CallFunc_BooleanOR_ReturnValue' has a wrong offset!");
static_assert(offsetof(TASK_Beam_Base_C_ExecuteUbergraph_TASK_Beam_Base, CallFunc_Array_Length_ReturnValue) == 0x000104, "Member 'TASK_Beam_Base_C_ExecuteUbergraph_TASK_Beam_Base::CallFunc_Array_Length_ReturnValue' has a wrong offset!");
static_assert(offsetof(TASK_Beam_Base_C_ExecuteUbergraph_TASK_Beam_Base, Temp_object_Variable_2) == 0x000108, "Member 'TASK_Beam_Base_C_ExecuteUbergraph_TASK_Beam_Base::Temp_object_Variable_2' has a wrong offset!");
static_assert(offsetof(TASK_Beam_Base_C_ExecuteUbergraph_TASK_Beam_Base, CallFunc_Array_Get_Item) == 0x000110, "Member 'TASK_Beam_Base_C_ExecuteUbergraph_TASK_Beam_Base::CallFunc_Array_Get_Item' has a wrong offset!");
static_assert(offsetof(TASK_Beam_Base_C_ExecuteUbergraph_TASK_Beam_Base, K2Node_DynamicCast_AsNiagara_System) == 0x000118, "Member 'TASK_Beam_Base_C_ExecuteUbergraph_TASK_Beam_Base::K2Node_DynamicCast_AsNiagara_System' has a wrong offset!");
static_assert(offsetof(TASK_Beam_Base_C_ExecuteUbergraph_TASK_Beam_Base, K2Node_DynamicCast_bSuccess_3) == 0x000120, "Member 'TASK_Beam_Base_C_ExecuteUbergraph_TASK_Beam_Base::K2Node_DynamicCast_bSuccess_3' has a wrong offset!");
static_assert(offsetof(TASK_Beam_Base_C_ExecuteUbergraph_TASK_Beam_Base, K2Node_CustomEvent_Loaded_2) == 0x000128, "Member 'TASK_Beam_Base_C_ExecuteUbergraph_TASK_Beam_Base::K2Node_CustomEvent_Loaded_2' has a wrong offset!");
static_assert(offsetof(TASK_Beam_Base_C_ExecuteUbergraph_TASK_Beam_Base, CallFunc_Array_Length_ReturnValue_1) == 0x000130, "Member 'TASK_Beam_Base_C_ExecuteUbergraph_TASK_Beam_Base::CallFunc_Array_Length_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(TASK_Beam_Base_C_ExecuteUbergraph_TASK_Beam_Base, CallFunc_Less_IntInt_ReturnValue) == 0x000134, "Member 'TASK_Beam_Base_C_ExecuteUbergraph_TASK_Beam_Base::CallFunc_Less_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(TASK_Beam_Base_C_ExecuteUbergraph_TASK_Beam_Base, CallFunc_SpawnSystemAttached_ReturnValue) == 0x000138, "Member 'TASK_Beam_Base_C_ExecuteUbergraph_TASK_Beam_Base::CallFunc_SpawnSystemAttached_ReturnValue' has a wrong offset!");
static_assert(offsetof(TASK_Beam_Base_C_ExecuteUbergraph_TASK_Beam_Base, CallFunc_IsValid_ReturnValue_1) == 0x000140, "Member 'TASK_Beam_Base_C_ExecuteUbergraph_TASK_Beam_Base::CallFunc_IsValid_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(TASK_Beam_Base_C_ExecuteUbergraph_TASK_Beam_Base, CallFunc_Array_Add_ReturnValue) == 0x000144, "Member 'TASK_Beam_Base_C_ExecuteUbergraph_TASK_Beam_Base::CallFunc_Array_Add_ReturnValue' has a wrong offset!");

// Function TASK_Beam_Base.TASK_Beam_Base_C.ReceiveAbortAI
// 0x0010 (0x0010 - 0x0000)
struct TASK_Beam_Base_C_ReceiveAbortAI final
{
public:
	class AAIController*                          OwnerController;                                   // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class APawn*                                  ControlledPawn;                                    // 0x0008(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(TASK_Beam_Base_C_ReceiveAbortAI) == 0x000008, "Wrong alignment on TASK_Beam_Base_C_ReceiveAbortAI");
static_assert(sizeof(TASK_Beam_Base_C_ReceiveAbortAI) == 0x000010, "Wrong size on TASK_Beam_Base_C_ReceiveAbortAI");
static_assert(offsetof(TASK_Beam_Base_C_ReceiveAbortAI, OwnerController) == 0x000000, "Member 'TASK_Beam_Base_C_ReceiveAbortAI::OwnerController' has a wrong offset!");
static_assert(offsetof(TASK_Beam_Base_C_ReceiveAbortAI, ControlledPawn) == 0x000008, "Member 'TASK_Beam_Base_C_ReceiveAbortAI::ControlledPawn' has a wrong offset!");

// Function TASK_Beam_Base.TASK_Beam_Base_C.ReceiveTickAI
// 0x0018 (0x0018 - 0x0000)
struct TASK_Beam_Base_C_ReceiveTickAI final
{
public:
	class AAIController*                          OwnerController;                                   // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class APawn*                                  ControlledPawn;                                    // 0x0008(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         DeltaSeconds;                                      // 0x0010(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(TASK_Beam_Base_C_ReceiveTickAI) == 0x000008, "Wrong alignment on TASK_Beam_Base_C_ReceiveTickAI");
static_assert(sizeof(TASK_Beam_Base_C_ReceiveTickAI) == 0x000018, "Wrong size on TASK_Beam_Base_C_ReceiveTickAI");
static_assert(offsetof(TASK_Beam_Base_C_ReceiveTickAI, OwnerController) == 0x000000, "Member 'TASK_Beam_Base_C_ReceiveTickAI::OwnerController' has a wrong offset!");
static_assert(offsetof(TASK_Beam_Base_C_ReceiveTickAI, ControlledPawn) == 0x000008, "Member 'TASK_Beam_Base_C_ReceiveTickAI::ControlledPawn' has a wrong offset!");
static_assert(offsetof(TASK_Beam_Base_C_ReceiveTickAI, DeltaSeconds) == 0x000010, "Member 'TASK_Beam_Base_C_ReceiveTickAI::DeltaSeconds' has a wrong offset!");

// Function TASK_Beam_Base.TASK_Beam_Base_C.ReceiveExecuteAI
// 0x0010 (0x0010 - 0x0000)
struct TASK_Beam_Base_C_ReceiveExecuteAI final
{
public:
	class AAIController*                          OwnerController;                                   // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class APawn*                                  ControlledPawn;                                    // 0x0008(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(TASK_Beam_Base_C_ReceiveExecuteAI) == 0x000008, "Wrong alignment on TASK_Beam_Base_C_ReceiveExecuteAI");
static_assert(sizeof(TASK_Beam_Base_C_ReceiveExecuteAI) == 0x000010, "Wrong size on TASK_Beam_Base_C_ReceiveExecuteAI");
static_assert(offsetof(TASK_Beam_Base_C_ReceiveExecuteAI, OwnerController) == 0x000000, "Member 'TASK_Beam_Base_C_ReceiveExecuteAI::OwnerController' has a wrong offset!");
static_assert(offsetof(TASK_Beam_Base_C_ReceiveExecuteAI, ControlledPawn) == 0x000008, "Member 'TASK_Beam_Base_C_ReceiveExecuteAI::ControlledPawn' has a wrong offset!");

// Function TASK_Beam_Base.TASK_Beam_Base_C.OnLoaded_286EF9BC405A135F062C60B5296EA148
// 0x0008 (0x0008 - 0x0000)
struct TASK_Beam_Base_C_OnLoaded_286EF9BC405A135F062C60B5296EA148 final
{
public:
	class UObject*                                Loaded;                                            // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(TASK_Beam_Base_C_OnLoaded_286EF9BC405A135F062C60B5296EA148) == 0x000008, "Wrong alignment on TASK_Beam_Base_C_OnLoaded_286EF9BC405A135F062C60B5296EA148");
static_assert(sizeof(TASK_Beam_Base_C_OnLoaded_286EF9BC405A135F062C60B5296EA148) == 0x000008, "Wrong size on TASK_Beam_Base_C_OnLoaded_286EF9BC405A135F062C60B5296EA148");
static_assert(offsetof(TASK_Beam_Base_C_OnLoaded_286EF9BC405A135F062C60B5296EA148, Loaded) == 0x000000, "Member 'TASK_Beam_Base_C_OnLoaded_286EF9BC405A135F062C60B5296EA148::Loaded' has a wrong offset!");

// Function TASK_Beam_Base.TASK_Beam_Base_C.OnLoaded_41978D6946D489D9553419BA70B7D4FB
// 0x0008 (0x0008 - 0x0000)
struct TASK_Beam_Base_C_OnLoaded_41978D6946D489D9553419BA70B7D4FB final
{
public:
	class UObject*                                Loaded;                                            // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(TASK_Beam_Base_C_OnLoaded_41978D6946D489D9553419BA70B7D4FB) == 0x000008, "Wrong alignment on TASK_Beam_Base_C_OnLoaded_41978D6946D489D9553419BA70B7D4FB");
static_assert(sizeof(TASK_Beam_Base_C_OnLoaded_41978D6946D489D9553419BA70B7D4FB) == 0x000008, "Wrong size on TASK_Beam_Base_C_OnLoaded_41978D6946D489D9553419BA70B7D4FB");
static_assert(offsetof(TASK_Beam_Base_C_OnLoaded_41978D6946D489D9553419BA70B7D4FB, Loaded) == 0x000000, "Member 'TASK_Beam_Base_C_OnLoaded_41978D6946D489D9553419BA70B7D4FB::Loaded' has a wrong offset!");

// Function TASK_Beam_Base.TASK_Beam_Base_C.OnLoaded_B41A86A2415A41EBF1B52DA7FBFC0F8C
// 0x0008 (0x0008 - 0x0000)
struct TASK_Beam_Base_C_OnLoaded_B41A86A2415A41EBF1B52DA7FBFC0F8C final
{
public:
	class UObject*                                Loaded;                                            // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(TASK_Beam_Base_C_OnLoaded_B41A86A2415A41EBF1B52DA7FBFC0F8C) == 0x000008, "Wrong alignment on TASK_Beam_Base_C_OnLoaded_B41A86A2415A41EBF1B52DA7FBFC0F8C");
static_assert(sizeof(TASK_Beam_Base_C_OnLoaded_B41A86A2415A41EBF1B52DA7FBFC0F8C) == 0x000008, "Wrong size on TASK_Beam_Base_C_OnLoaded_B41A86A2415A41EBF1B52DA7FBFC0F8C");
static_assert(offsetof(TASK_Beam_Base_C_OnLoaded_B41A86A2415A41EBF1B52DA7FBFC0F8C, Loaded) == 0x000000, "Member 'TASK_Beam_Base_C_OnLoaded_B41A86A2415A41EBF1B52DA7FBFC0F8C::Loaded' has a wrong offset!");

// Function TASK_Beam_Base.TASK_Beam_Base_C.GetDamageValue
// 0x0060 (0x0060 - 0x0000)
struct TASK_Beam_Base_C_GetDamageValue final
{
public:
	bool                                          IsSecondary;                                       // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         DamageValue;                                       // 0x0004(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Variable;                                // 0x0008(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FSTRUCT_EnemyStats                     CallFunc_GetDataTableRowFromName_OutRow;           // 0x0010(0x0048)(HasGetValueTypeHash)
	bool                                          CallFunc_GetDataTableRowFromName_ReturnValue;      // 0x0058(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_59[0x3];                                       // 0x0059(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         K2Node_Select_Default;                             // 0x005C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(TASK_Beam_Base_C_GetDamageValue) == 0x000008, "Wrong alignment on TASK_Beam_Base_C_GetDamageValue");
static_assert(sizeof(TASK_Beam_Base_C_GetDamageValue) == 0x000060, "Wrong size on TASK_Beam_Base_C_GetDamageValue");
static_assert(offsetof(TASK_Beam_Base_C_GetDamageValue, IsSecondary) == 0x000000, "Member 'TASK_Beam_Base_C_GetDamageValue::IsSecondary' has a wrong offset!");
static_assert(offsetof(TASK_Beam_Base_C_GetDamageValue, DamageValue) == 0x000004, "Member 'TASK_Beam_Base_C_GetDamageValue::DamageValue' has a wrong offset!");
static_assert(offsetof(TASK_Beam_Base_C_GetDamageValue, Temp_bool_Variable) == 0x000008, "Member 'TASK_Beam_Base_C_GetDamageValue::Temp_bool_Variable' has a wrong offset!");
static_assert(offsetof(TASK_Beam_Base_C_GetDamageValue, CallFunc_GetDataTableRowFromName_OutRow) == 0x000010, "Member 'TASK_Beam_Base_C_GetDamageValue::CallFunc_GetDataTableRowFromName_OutRow' has a wrong offset!");
static_assert(offsetof(TASK_Beam_Base_C_GetDamageValue, CallFunc_GetDataTableRowFromName_ReturnValue) == 0x000058, "Member 'TASK_Beam_Base_C_GetDamageValue::CallFunc_GetDataTableRowFromName_ReturnValue' has a wrong offset!");
static_assert(offsetof(TASK_Beam_Base_C_GetDamageValue, K2Node_Select_Default) == 0x00005C, "Member 'TASK_Beam_Base_C_GetDamageValue::K2Node_Select_Default' has a wrong offset!");

// Function TASK_Beam_Base.TASK_Beam_Base_C.BeamDamageTraceFromSockets
// 0x00D0 (0x00D0 - 0x0000)
struct TASK_Beam_Base_C_BeamDamageTraceFromSockets final
{
public:
	bool                                          IsSecondary;                                       // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FHitResult>                     HitResults;                                        // 0x0008(0x0010)(Parm, OutParm, ContainsInstancedReference)
	TArray<struct FHitResult>                     Hits;                                              // 0x0018(0x0010)(Edit, BlueprintVisible, ContainsInstancedReference)
	int32                                         Temp_int_Array_Index_Variable;                     // 0x0028(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Loop_Counter_Variable;                    // 0x002C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue;                   // 0x0030(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Length_ReturnValue;                 // 0x0034(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FName                                   CallFunc_Array_Get_Item;                           // 0x0038(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue;                  // 0x0040(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_41[0x3];                                       // 0x0041(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FHitResult                             CallFunc_BeamDamageTraceSingle_Result;             // 0x0044(0x0088)(IsPlainOldData, NoDestructor, ContainsInstancedReference)
	int32                                         CallFunc_Array_Add_ReturnValue;                    // 0x00CC(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(TASK_Beam_Base_C_BeamDamageTraceFromSockets) == 0x000008, "Wrong alignment on TASK_Beam_Base_C_BeamDamageTraceFromSockets");
static_assert(sizeof(TASK_Beam_Base_C_BeamDamageTraceFromSockets) == 0x0000D0, "Wrong size on TASK_Beam_Base_C_BeamDamageTraceFromSockets");
static_assert(offsetof(TASK_Beam_Base_C_BeamDamageTraceFromSockets, IsSecondary) == 0x000000, "Member 'TASK_Beam_Base_C_BeamDamageTraceFromSockets::IsSecondary' has a wrong offset!");
static_assert(offsetof(TASK_Beam_Base_C_BeamDamageTraceFromSockets, HitResults) == 0x000008, "Member 'TASK_Beam_Base_C_BeamDamageTraceFromSockets::HitResults' has a wrong offset!");
static_assert(offsetof(TASK_Beam_Base_C_BeamDamageTraceFromSockets, Hits) == 0x000018, "Member 'TASK_Beam_Base_C_BeamDamageTraceFromSockets::Hits' has a wrong offset!");
static_assert(offsetof(TASK_Beam_Base_C_BeamDamageTraceFromSockets, Temp_int_Array_Index_Variable) == 0x000028, "Member 'TASK_Beam_Base_C_BeamDamageTraceFromSockets::Temp_int_Array_Index_Variable' has a wrong offset!");
static_assert(offsetof(TASK_Beam_Base_C_BeamDamageTraceFromSockets, Temp_int_Loop_Counter_Variable) == 0x00002C, "Member 'TASK_Beam_Base_C_BeamDamageTraceFromSockets::Temp_int_Loop_Counter_Variable' has a wrong offset!");
static_assert(offsetof(TASK_Beam_Base_C_BeamDamageTraceFromSockets, CallFunc_Add_IntInt_ReturnValue) == 0x000030, "Member 'TASK_Beam_Base_C_BeamDamageTraceFromSockets::CallFunc_Add_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(TASK_Beam_Base_C_BeamDamageTraceFromSockets, CallFunc_Array_Length_ReturnValue) == 0x000034, "Member 'TASK_Beam_Base_C_BeamDamageTraceFromSockets::CallFunc_Array_Length_ReturnValue' has a wrong offset!");
static_assert(offsetof(TASK_Beam_Base_C_BeamDamageTraceFromSockets, CallFunc_Array_Get_Item) == 0x000038, "Member 'TASK_Beam_Base_C_BeamDamageTraceFromSockets::CallFunc_Array_Get_Item' has a wrong offset!");
static_assert(offsetof(TASK_Beam_Base_C_BeamDamageTraceFromSockets, CallFunc_Less_IntInt_ReturnValue) == 0x000040, "Member 'TASK_Beam_Base_C_BeamDamageTraceFromSockets::CallFunc_Less_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(TASK_Beam_Base_C_BeamDamageTraceFromSockets, CallFunc_BeamDamageTraceSingle_Result) == 0x000044, "Member 'TASK_Beam_Base_C_BeamDamageTraceFromSockets::CallFunc_BeamDamageTraceSingle_Result' has a wrong offset!");
static_assert(offsetof(TASK_Beam_Base_C_BeamDamageTraceFromSockets, CallFunc_Array_Add_ReturnValue) == 0x0000CC, "Member 'TASK_Beam_Base_C_BeamDamageTraceFromSockets::CallFunc_Array_Add_ReturnValue' has a wrong offset!");

// Function TASK_Beam_Base.TASK_Beam_Base_C.BeamDamageTraceSingle
// 0x0800 (0x0800 - 0x0000)
struct TASK_Beam_Base_C_BeamDamageTraceSingle final
{
public:
	bool                                          IsSecondary;                                       // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   BeamSocket;                                        // 0x0004(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FHitResult                             Result;                                            // 0x000C(0x0088)(Parm, OutParm, IsPlainOldData, NoDestructor, ContainsInstancedReference)
	uint8                                         Pad_94[0x4];                                       // 0x0094(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UAttribManagerComponent*                HitAttribManager;                                  // 0x0098(0x0008)(Edit, BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class APAWN_SystemShockCharacter_C*           HitCharacter;                                      // 0x00A0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TSet<class APAWN_SystemShockCharacter_C*>     CollidedShieldCharacters;                          // 0x00A8(0x0050)(Edit, BlueprintVisible, DisableEditOnTemplate)
	struct FHitResult                             Hit;                                               // 0x00F8(0x0088)(Edit, BlueprintVisible, IsPlainOldData, NoDestructor, ContainsInstancedReference)
	struct FAttribModApplyData                    NewDamageMod;                                      // 0x0180(0x00A0)(Edit, BlueprintVisible)
	float                                         CurrentDamage;                                     // 0x0220(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                BeamDirection;                                     // 0x0224(0x000C)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                BarrelLocation;                                    // 0x0230(0x000C)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BreakHitResult_bBlockingHit;              // 0x023C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BreakHitResult_bInitialOverlap;           // 0x023D(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_23E[0x2];                                      // 0x023E(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_BreakHitResult_Time;                      // 0x0240(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakHitResult_Distance;                  // 0x0244(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakHitResult_Location;                  // 0x0248(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakHitResult_ImpactPoint;               // 0x0254(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakHitResult_Normal;                    // 0x0260(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakHitResult_ImpactNormal;              // 0x026C(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UPhysicalMaterial*                      CallFunc_BreakHitResult_PhysMat;                   // 0x0278(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 CallFunc_BreakHitResult_HitActor;                  // 0x0280(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UPrimitiveComponent*                    CallFunc_BreakHitResult_HitComponent;              // 0x0288(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FName                                   CallFunc_BreakHitResult_HitBoneName;               // 0x0290(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_BreakHitResult_HitItem;                   // 0x0298(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_BreakHitResult_ElementIndex;              // 0x029C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_BreakHitResult_FaceIndex;                 // 0x02A0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakHitResult_TraceStart;                // 0x02A4(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakHitResult_TraceEnd;                  // 0x02B0(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BreakHitResult_bBlockingHit_1;            // 0x02BC(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BreakHitResult_bInitialOverlap_1;         // 0x02BD(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_2BE[0x2];                                      // 0x02BE(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_BreakHitResult_Time_1;                    // 0x02C0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakHitResult_Distance_1;                // 0x02C4(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakHitResult_Location_1;                // 0x02C8(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakHitResult_ImpactPoint_1;             // 0x02D4(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakHitResult_Normal_1;                  // 0x02E0(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakHitResult_ImpactNormal_1;            // 0x02EC(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UPhysicalMaterial*                      CallFunc_BreakHitResult_PhysMat_1;                 // 0x02F8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 CallFunc_BreakHitResult_HitActor_1;                // 0x0300(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UPrimitiveComponent*                    CallFunc_BreakHitResult_HitComponent_1;            // 0x0308(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FName                                   CallFunc_BreakHitResult_HitBoneName_1;             // 0x0310(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_BreakHitResult_HitItem_1;                 // 0x0318(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_BreakHitResult_ElementIndex_1;            // 0x031C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_BreakHitResult_FaceIndex_1;               // 0x0320(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakHitResult_TraceStart_1;              // 0x0324(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakHitResult_TraceEnd_1;                // 0x0330(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_33C[0x4];                                      // 0x033C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class APAWN_SystemShockCharacter_C*           K2Node_DynamicCast_AsPAWN_System_Shock_Character;  // 0x0340(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0348(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_349[0x7];                                      // 0x0349(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class APAWN_SystemShockCharacter_C*           K2Node_DynamicCast_AsPAWN_System_Shock_Character_1; // 0x0350(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess_1;                     // 0x0358(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_359[0x3];                                      // 0x0359(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FHitResult                             CallFunc_BeamLineTrace_OutHit;                     // 0x035C(0x0088)(IsPlainOldData, NoDestructor, ContainsInstancedReference)
	struct FVector                                CallFunc_BeamLineTrace_Direction;                  // 0x03E4(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_GetMaxCombatTraceDistance_Distance;       // 0x03F0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_GetMaxCombatTraceDistance_Distance_1;     // 0x03F4(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_GetDamageValue_DamageValue;               // 0x03F8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Conv_IntToFloat_ReturnValue;              // 0x03FC(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TArray<class AActor*>                         K2Node_MakeArray_Array;                            // 0x0400(0x0010)(ReferenceParm)
	bool                                          CallFunc_BreakHitResult_bBlockingHit_2;            // 0x0410(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BreakHitResult_bInitialOverlap_2;         // 0x0411(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_412[0x2];                                      // 0x0412(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_BreakHitResult_Time_2;                    // 0x0414(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakHitResult_Distance_2;                // 0x0418(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakHitResult_Location_2;                // 0x041C(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakHitResult_ImpactPoint_2;             // 0x0428(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakHitResult_Normal_2;                  // 0x0434(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakHitResult_ImpactNormal_2;            // 0x0440(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_44C[0x4];                                      // 0x044C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UPhysicalMaterial*                      CallFunc_BreakHitResult_PhysMat_2;                 // 0x0450(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 CallFunc_BreakHitResult_HitActor_2;                // 0x0458(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UPrimitiveComponent*                    CallFunc_BreakHitResult_HitComponent_2;            // 0x0460(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FName                                   CallFunc_BreakHitResult_HitBoneName_2;             // 0x0468(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_BreakHitResult_HitItem_2;                 // 0x0470(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_BreakHitResult_ElementIndex_2;            // 0x0474(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_BreakHitResult_FaceIndex_2;               // 0x0478(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakHitResult_TraceStart_2;              // 0x047C(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakHitResult_TraceEnd_2;                // 0x0488(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Variable;                                // 0x0494(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BreakHitResult_bBlockingHit_3;            // 0x0495(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BreakHitResult_bInitialOverlap_3;         // 0x0496(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_497[0x1];                                      // 0x0497(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_BreakHitResult_Time_3;                    // 0x0498(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakHitResult_Distance_3;                // 0x049C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakHitResult_Location_3;                // 0x04A0(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakHitResult_ImpactPoint_3;             // 0x04AC(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakHitResult_Normal_3;                  // 0x04B8(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakHitResult_ImpactNormal_3;            // 0x04C4(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UPhysicalMaterial*                      CallFunc_BreakHitResult_PhysMat_3;                 // 0x04D0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 CallFunc_BreakHitResult_HitActor_3;                // 0x04D8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UPrimitiveComponent*                    CallFunc_BreakHitResult_HitComponent_3;            // 0x04E0(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FName                                   CallFunc_BreakHitResult_HitBoneName_3;             // 0x04E8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_BreakHitResult_HitItem_3;                 // 0x04F0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_BreakHitResult_ElementIndex_3;            // 0x04F4(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_BreakHitResult_FaceIndex_3;               // 0x04F8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakHitResult_TraceStart_3;              // 0x04FC(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakHitResult_TraceEnd_3;                // 0x0508(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Set_Contains_ReturnValue;                 // 0x0514(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_515[0x3];                                      // 0x0515(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         K2Node_Select_Default;                             // 0x0518(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Not_PreBool_ReturnValue;                  // 0x051C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_DamageCharacterShieldsAlongRay_BlockingHit; // 0x051D(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_51E[0x2];                                      // 0x051E(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	struct FHitResult                             CallFunc_DamageCharacterShieldsAlongRay_HitResult; // 0x0520(0x0088)(IsPlainOldData, NoDestructor, ContainsInstancedReference)
	bool                                          CallFunc_BreakHitResult_bBlockingHit_4;            // 0x05A8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BreakHitResult_bInitialOverlap_4;         // 0x05A9(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_5AA[0x2];                                      // 0x05AA(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_BreakHitResult_Time_4;                    // 0x05AC(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakHitResult_Distance_4;                // 0x05B0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakHitResult_Location_4;                // 0x05B4(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakHitResult_ImpactPoint_4;             // 0x05C0(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakHitResult_Normal_4;                  // 0x05CC(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakHitResult_ImpactNormal_4;            // 0x05D8(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_5E4[0x4];                                      // 0x05E4(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UPhysicalMaterial*                      CallFunc_BreakHitResult_PhysMat_4;                 // 0x05E8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 CallFunc_BreakHitResult_HitActor_4;                // 0x05F0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UPrimitiveComponent*                    CallFunc_BreakHitResult_HitComponent_4;            // 0x05F8(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FName                                   CallFunc_BreakHitResult_HitBoneName_4;             // 0x0600(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_BreakHitResult_HitItem_4;                 // 0x0608(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_BreakHitResult_ElementIndex_4;            // 0x060C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_BreakHitResult_FaceIndex_4;               // 0x0610(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakHitResult_TraceStart_4;              // 0x0614(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakHitResult_TraceEnd_4;                // 0x0620(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Variable_1;                              // 0x062C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_62D[0x3];                                      // 0x062D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_GetPlayTimeInSeconds_ReturnValue;         // 0x0630(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BreakHitResult_bBlockingHit_5;            // 0x0634(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BreakHitResult_bInitialOverlap_5;         // 0x0635(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_636[0x2];                                      // 0x0636(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_BreakHitResult_Time_5;                    // 0x0638(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakHitResult_Distance_5;                // 0x063C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakHitResult_Location_5;                // 0x0640(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakHitResult_ImpactPoint_5;             // 0x064C(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakHitResult_Normal_5;                  // 0x0658(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakHitResult_ImpactNormal_5;            // 0x0664(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UPhysicalMaterial*                      CallFunc_BreakHitResult_PhysMat_5;                 // 0x0670(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 CallFunc_BreakHitResult_HitActor_5;                // 0x0678(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UPrimitiveComponent*                    CallFunc_BreakHitResult_HitComponent_5;            // 0x0680(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FName                                   CallFunc_BreakHitResult_HitBoneName_5;             // 0x0688(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_BreakHitResult_HitItem_5;                 // 0x0690(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_BreakHitResult_ElementIndex_5;            // 0x0694(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_BreakHitResult_FaceIndex_5;               // 0x0698(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakHitResult_TraceStart_5;              // 0x069C(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakHitResult_TraceEnd_5;                // 0x06A8(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_6B4[0x4];                                      // 0x06B4(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UOBJ_ImpactData_C*                      CallFunc_SpawnObject_ReturnValue;                  // 0x06B8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Map_Find_Value;                           // 0x06C0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Map_Find_ReturnValue;                     // 0x06C4(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_6C5[0x3];                                      // 0x06C5(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_Subtract_FloatFloat_ReturnValue;          // 0x06C8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_GreaterEqual_FloatFloat_ReturnValue;      // 0x06CC(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_6CD[0x3];                                      // 0x06CD(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_GetPlayTimeInSeconds_ReturnValue_1;       // 0x06D0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Variable_2;                              // 0x06D4(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Map_Contains_ReturnValue;                 // 0x06D5(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_6D6[0x2];                                      // 0x06D6(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         K2Node_Select_Default_1;                           // 0x06D8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_FloatFloat_ReturnValue;              // 0x06DC(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BooleanAND_ReturnValue;                   // 0x06DD(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_6DE[0x2];                                      // 0x06DE(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	class UAttribMod*                             CallFunc_ApplyMod_ReturnValue;                     // 0x06E0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FHitResult                             K2Node_Select_Default_2;                           // 0x06E8(0x0088)(IsPlainOldData, NoDestructor, ContainsInstancedReference)
	struct FVector                                CallFunc_Multiply_VectorFloat_ReturnValue;         // 0x0770(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BreakHitResult_bBlockingHit_6;            // 0x077C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BreakHitResult_bInitialOverlap_6;         // 0x077D(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_77E[0x2];                                      // 0x077E(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_BreakHitResult_Time_6;                    // 0x0780(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakHitResult_Distance_6;                // 0x0784(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakHitResult_Location_6;                // 0x0788(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakHitResult_ImpactPoint_6;             // 0x0794(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakHitResult_Normal_6;                  // 0x07A0(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakHitResult_ImpactNormal_6;            // 0x07AC(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UPhysicalMaterial*                      CallFunc_BreakHitResult_PhysMat_6;                 // 0x07B8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 CallFunc_BreakHitResult_HitActor_6;                // 0x07C0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UPrimitiveComponent*                    CallFunc_BreakHitResult_HitComponent_6;            // 0x07C8(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FName                                   CallFunc_BreakHitResult_HitBoneName_6;             // 0x07D0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_BreakHitResult_HitItem_6;                 // 0x07D8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_BreakHitResult_ElementIndex_6;            // 0x07DC(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_BreakHitResult_FaceIndex_6;               // 0x07E0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakHitResult_TraceStart_6;              // 0x07E4(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakHitResult_TraceEnd_6;                // 0x07F0(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(TASK_Beam_Base_C_BeamDamageTraceSingle) == 0x000008, "Wrong alignment on TASK_Beam_Base_C_BeamDamageTraceSingle");
static_assert(sizeof(TASK_Beam_Base_C_BeamDamageTraceSingle) == 0x000800, "Wrong size on TASK_Beam_Base_C_BeamDamageTraceSingle");
static_assert(offsetof(TASK_Beam_Base_C_BeamDamageTraceSingle, IsSecondary) == 0x000000, "Member 'TASK_Beam_Base_C_BeamDamageTraceSingle::IsSecondary' has a wrong offset!");
static_assert(offsetof(TASK_Beam_Base_C_BeamDamageTraceSingle, BeamSocket) == 0x000004, "Member 'TASK_Beam_Base_C_BeamDamageTraceSingle::BeamSocket' has a wrong offset!");
static_assert(offsetof(TASK_Beam_Base_C_BeamDamageTraceSingle, Result) == 0x00000C, "Member 'TASK_Beam_Base_C_BeamDamageTraceSingle::Result' has a wrong offset!");
static_assert(offsetof(TASK_Beam_Base_C_BeamDamageTraceSingle, HitAttribManager) == 0x000098, "Member 'TASK_Beam_Base_C_BeamDamageTraceSingle::HitAttribManager' has a wrong offset!");
static_assert(offsetof(TASK_Beam_Base_C_BeamDamageTraceSingle, HitCharacter) == 0x0000A0, "Member 'TASK_Beam_Base_C_BeamDamageTraceSingle::HitCharacter' has a wrong offset!");
static_assert(offsetof(TASK_Beam_Base_C_BeamDamageTraceSingle, CollidedShieldCharacters) == 0x0000A8, "Member 'TASK_Beam_Base_C_BeamDamageTraceSingle::CollidedShieldCharacters' has a wrong offset!");
static_assert(offsetof(TASK_Beam_Base_C_BeamDamageTraceSingle, Hit) == 0x0000F8, "Member 'TASK_Beam_Base_C_BeamDamageTraceSingle::Hit' has a wrong offset!");
static_assert(offsetof(TASK_Beam_Base_C_BeamDamageTraceSingle, NewDamageMod) == 0x000180, "Member 'TASK_Beam_Base_C_BeamDamageTraceSingle::NewDamageMod' has a wrong offset!");
static_assert(offsetof(TASK_Beam_Base_C_BeamDamageTraceSingle, CurrentDamage) == 0x000220, "Member 'TASK_Beam_Base_C_BeamDamageTraceSingle::CurrentDamage' has a wrong offset!");
static_assert(offsetof(TASK_Beam_Base_C_BeamDamageTraceSingle, BeamDirection) == 0x000224, "Member 'TASK_Beam_Base_C_BeamDamageTraceSingle::BeamDirection' has a wrong offset!");
static_assert(offsetof(TASK_Beam_Base_C_BeamDamageTraceSingle, BarrelLocation) == 0x000230, "Member 'TASK_Beam_Base_C_BeamDamageTraceSingle::BarrelLocation' has a wrong offset!");
static_assert(offsetof(TASK_Beam_Base_C_BeamDamageTraceSingle, CallFunc_BreakHitResult_bBlockingHit) == 0x00023C, "Member 'TASK_Beam_Base_C_BeamDamageTraceSingle::CallFunc_BreakHitResult_bBlockingHit' has a wrong offset!");
static_assert(offsetof(TASK_Beam_Base_C_BeamDamageTraceSingle, CallFunc_BreakHitResult_bInitialOverlap) == 0x00023D, "Member 'TASK_Beam_Base_C_BeamDamageTraceSingle::CallFunc_BreakHitResult_bInitialOverlap' has a wrong offset!");
static_assert(offsetof(TASK_Beam_Base_C_BeamDamageTraceSingle, CallFunc_BreakHitResult_Time) == 0x000240, "Member 'TASK_Beam_Base_C_BeamDamageTraceSingle::CallFunc_BreakHitResult_Time' has a wrong offset!");
static_assert(offsetof(TASK_Beam_Base_C_BeamDamageTraceSingle, CallFunc_BreakHitResult_Distance) == 0x000244, "Member 'TASK_Beam_Base_C_BeamDamageTraceSingle::CallFunc_BreakHitResult_Distance' has a wrong offset!");
static_assert(offsetof(TASK_Beam_Base_C_BeamDamageTraceSingle, CallFunc_BreakHitResult_Location) == 0x000248, "Member 'TASK_Beam_Base_C_BeamDamageTraceSingle::CallFunc_BreakHitResult_Location' has a wrong offset!");
static_assert(offsetof(TASK_Beam_Base_C_BeamDamageTraceSingle, CallFunc_BreakHitResult_ImpactPoint) == 0x000254, "Member 'TASK_Beam_Base_C_BeamDamageTraceSingle::CallFunc_BreakHitResult_ImpactPoint' has a wrong offset!");
static_assert(offsetof(TASK_Beam_Base_C_BeamDamageTraceSingle, CallFunc_BreakHitResult_Normal) == 0x000260, "Member 'TASK_Beam_Base_C_BeamDamageTraceSingle::CallFunc_BreakHitResult_Normal' has a wrong offset!");
static_assert(offsetof(TASK_Beam_Base_C_BeamDamageTraceSingle, CallFunc_BreakHitResult_ImpactNormal) == 0x00026C, "Member 'TASK_Beam_Base_C_BeamDamageTraceSingle::CallFunc_BreakHitResult_ImpactNormal' has a wrong offset!");
static_assert(offsetof(TASK_Beam_Base_C_BeamDamageTraceSingle, CallFunc_BreakHitResult_PhysMat) == 0x000278, "Member 'TASK_Beam_Base_C_BeamDamageTraceSingle::CallFunc_BreakHitResult_PhysMat' has a wrong offset!");
static_assert(offsetof(TASK_Beam_Base_C_BeamDamageTraceSingle, CallFunc_BreakHitResult_HitActor) == 0x000280, "Member 'TASK_Beam_Base_C_BeamDamageTraceSingle::CallFunc_BreakHitResult_HitActor' has a wrong offset!");
static_assert(offsetof(TASK_Beam_Base_C_BeamDamageTraceSingle, CallFunc_BreakHitResult_HitComponent) == 0x000288, "Member 'TASK_Beam_Base_C_BeamDamageTraceSingle::CallFunc_BreakHitResult_HitComponent' has a wrong offset!");
static_assert(offsetof(TASK_Beam_Base_C_BeamDamageTraceSingle, CallFunc_BreakHitResult_HitBoneName) == 0x000290, "Member 'TASK_Beam_Base_C_BeamDamageTraceSingle::CallFunc_BreakHitResult_HitBoneName' has a wrong offset!");
static_assert(offsetof(TASK_Beam_Base_C_BeamDamageTraceSingle, CallFunc_BreakHitResult_HitItem) == 0x000298, "Member 'TASK_Beam_Base_C_BeamDamageTraceSingle::CallFunc_BreakHitResult_HitItem' has a wrong offset!");
static_assert(offsetof(TASK_Beam_Base_C_BeamDamageTraceSingle, CallFunc_BreakHitResult_ElementIndex) == 0x00029C, "Member 'TASK_Beam_Base_C_BeamDamageTraceSingle::CallFunc_BreakHitResult_ElementIndex' has a wrong offset!");
static_assert(offsetof(TASK_Beam_Base_C_BeamDamageTraceSingle, CallFunc_BreakHitResult_FaceIndex) == 0x0002A0, "Member 'TASK_Beam_Base_C_BeamDamageTraceSingle::CallFunc_BreakHitResult_FaceIndex' has a wrong offset!");
static_assert(offsetof(TASK_Beam_Base_C_BeamDamageTraceSingle, CallFunc_BreakHitResult_TraceStart) == 0x0002A4, "Member 'TASK_Beam_Base_C_BeamDamageTraceSingle::CallFunc_BreakHitResult_TraceStart' has a wrong offset!");
static_assert(offsetof(TASK_Beam_Base_C_BeamDamageTraceSingle, CallFunc_BreakHitResult_TraceEnd) == 0x0002B0, "Member 'TASK_Beam_Base_C_BeamDamageTraceSingle::CallFunc_BreakHitResult_TraceEnd' has a wrong offset!");
static_assert(offsetof(TASK_Beam_Base_C_BeamDamageTraceSingle, CallFunc_BreakHitResult_bBlockingHit_1) == 0x0002BC, "Member 'TASK_Beam_Base_C_BeamDamageTraceSingle::CallFunc_BreakHitResult_bBlockingHit_1' has a wrong offset!");
static_assert(offsetof(TASK_Beam_Base_C_BeamDamageTraceSingle, CallFunc_BreakHitResult_bInitialOverlap_1) == 0x0002BD, "Member 'TASK_Beam_Base_C_BeamDamageTraceSingle::CallFunc_BreakHitResult_bInitialOverlap_1' has a wrong offset!");
static_assert(offsetof(TASK_Beam_Base_C_BeamDamageTraceSingle, CallFunc_BreakHitResult_Time_1) == 0x0002C0, "Member 'TASK_Beam_Base_C_BeamDamageTraceSingle::CallFunc_BreakHitResult_Time_1' has a wrong offset!");
static_assert(offsetof(TASK_Beam_Base_C_BeamDamageTraceSingle, CallFunc_BreakHitResult_Distance_1) == 0x0002C4, "Member 'TASK_Beam_Base_C_BeamDamageTraceSingle::CallFunc_BreakHitResult_Distance_1' has a wrong offset!");
static_assert(offsetof(TASK_Beam_Base_C_BeamDamageTraceSingle, CallFunc_BreakHitResult_Location_1) == 0x0002C8, "Member 'TASK_Beam_Base_C_BeamDamageTraceSingle::CallFunc_BreakHitResult_Location_1' has a wrong offset!");
static_assert(offsetof(TASK_Beam_Base_C_BeamDamageTraceSingle, CallFunc_BreakHitResult_ImpactPoint_1) == 0x0002D4, "Member 'TASK_Beam_Base_C_BeamDamageTraceSingle::CallFunc_BreakHitResult_ImpactPoint_1' has a wrong offset!");
static_assert(offsetof(TASK_Beam_Base_C_BeamDamageTraceSingle, CallFunc_BreakHitResult_Normal_1) == 0x0002E0, "Member 'TASK_Beam_Base_C_BeamDamageTraceSingle::CallFunc_BreakHitResult_Normal_1' has a wrong offset!");
static_assert(offsetof(TASK_Beam_Base_C_BeamDamageTraceSingle, CallFunc_BreakHitResult_ImpactNormal_1) == 0x0002EC, "Member 'TASK_Beam_Base_C_BeamDamageTraceSingle::CallFunc_BreakHitResult_ImpactNormal_1' has a wrong offset!");
static_assert(offsetof(TASK_Beam_Base_C_BeamDamageTraceSingle, CallFunc_BreakHitResult_PhysMat_1) == 0x0002F8, "Member 'TASK_Beam_Base_C_BeamDamageTraceSingle::CallFunc_BreakHitResult_PhysMat_1' has a wrong offset!");
static_assert(offsetof(TASK_Beam_Base_C_BeamDamageTraceSingle, CallFunc_BreakHitResult_HitActor_1) == 0x000300, "Member 'TASK_Beam_Base_C_BeamDamageTraceSingle::CallFunc_BreakHitResult_HitActor_1' has a wrong offset!");
static_assert(offsetof(TASK_Beam_Base_C_BeamDamageTraceSingle, CallFunc_BreakHitResult_HitComponent_1) == 0x000308, "Member 'TASK_Beam_Base_C_BeamDamageTraceSingle::CallFunc_BreakHitResult_HitComponent_1' has a wrong offset!");
static_assert(offsetof(TASK_Beam_Base_C_BeamDamageTraceSingle, CallFunc_BreakHitResult_HitBoneName_1) == 0x000310, "Member 'TASK_Beam_Base_C_BeamDamageTraceSingle::CallFunc_BreakHitResult_HitBoneName_1' has a wrong offset!");
static_assert(offsetof(TASK_Beam_Base_C_BeamDamageTraceSingle, CallFunc_BreakHitResult_HitItem_1) == 0x000318, "Member 'TASK_Beam_Base_C_BeamDamageTraceSingle::CallFunc_BreakHitResult_HitItem_1' has a wrong offset!");
static_assert(offsetof(TASK_Beam_Base_C_BeamDamageTraceSingle, CallFunc_BreakHitResult_ElementIndex_1) == 0x00031C, "Member 'TASK_Beam_Base_C_BeamDamageTraceSingle::CallFunc_BreakHitResult_ElementIndex_1' has a wrong offset!");
static_assert(offsetof(TASK_Beam_Base_C_BeamDamageTraceSingle, CallFunc_BreakHitResult_FaceIndex_1) == 0x000320, "Member 'TASK_Beam_Base_C_BeamDamageTraceSingle::CallFunc_BreakHitResult_FaceIndex_1' has a wrong offset!");
static_assert(offsetof(TASK_Beam_Base_C_BeamDamageTraceSingle, CallFunc_BreakHitResult_TraceStart_1) == 0x000324, "Member 'TASK_Beam_Base_C_BeamDamageTraceSingle::CallFunc_BreakHitResult_TraceStart_1' has a wrong offset!");
static_assert(offsetof(TASK_Beam_Base_C_BeamDamageTraceSingle, CallFunc_BreakHitResult_TraceEnd_1) == 0x000330, "Member 'TASK_Beam_Base_C_BeamDamageTraceSingle::CallFunc_BreakHitResult_TraceEnd_1' has a wrong offset!");
static_assert(offsetof(TASK_Beam_Base_C_BeamDamageTraceSingle, K2Node_DynamicCast_AsPAWN_System_Shock_Character) == 0x000340, "Member 'TASK_Beam_Base_C_BeamDamageTraceSingle::K2Node_DynamicCast_AsPAWN_System_Shock_Character' has a wrong offset!");
static_assert(offsetof(TASK_Beam_Base_C_BeamDamageTraceSingle, K2Node_DynamicCast_bSuccess) == 0x000348, "Member 'TASK_Beam_Base_C_BeamDamageTraceSingle::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(TASK_Beam_Base_C_BeamDamageTraceSingle, K2Node_DynamicCast_AsPAWN_System_Shock_Character_1) == 0x000350, "Member 'TASK_Beam_Base_C_BeamDamageTraceSingle::K2Node_DynamicCast_AsPAWN_System_Shock_Character_1' has a wrong offset!");
static_assert(offsetof(TASK_Beam_Base_C_BeamDamageTraceSingle, K2Node_DynamicCast_bSuccess_1) == 0x000358, "Member 'TASK_Beam_Base_C_BeamDamageTraceSingle::K2Node_DynamicCast_bSuccess_1' has a wrong offset!");
static_assert(offsetof(TASK_Beam_Base_C_BeamDamageTraceSingle, CallFunc_BeamLineTrace_OutHit) == 0x00035C, "Member 'TASK_Beam_Base_C_BeamDamageTraceSingle::CallFunc_BeamLineTrace_OutHit' has a wrong offset!");
static_assert(offsetof(TASK_Beam_Base_C_BeamDamageTraceSingle, CallFunc_BeamLineTrace_Direction) == 0x0003E4, "Member 'TASK_Beam_Base_C_BeamDamageTraceSingle::CallFunc_BeamLineTrace_Direction' has a wrong offset!");
static_assert(offsetof(TASK_Beam_Base_C_BeamDamageTraceSingle, CallFunc_GetMaxCombatTraceDistance_Distance) == 0x0003F0, "Member 'TASK_Beam_Base_C_BeamDamageTraceSingle::CallFunc_GetMaxCombatTraceDistance_Distance' has a wrong offset!");
static_assert(offsetof(TASK_Beam_Base_C_BeamDamageTraceSingle, CallFunc_GetMaxCombatTraceDistance_Distance_1) == 0x0003F4, "Member 'TASK_Beam_Base_C_BeamDamageTraceSingle::CallFunc_GetMaxCombatTraceDistance_Distance_1' has a wrong offset!");
static_assert(offsetof(TASK_Beam_Base_C_BeamDamageTraceSingle, CallFunc_GetDamageValue_DamageValue) == 0x0003F8, "Member 'TASK_Beam_Base_C_BeamDamageTraceSingle::CallFunc_GetDamageValue_DamageValue' has a wrong offset!");
static_assert(offsetof(TASK_Beam_Base_C_BeamDamageTraceSingle, CallFunc_Conv_IntToFloat_ReturnValue) == 0x0003FC, "Member 'TASK_Beam_Base_C_BeamDamageTraceSingle::CallFunc_Conv_IntToFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(TASK_Beam_Base_C_BeamDamageTraceSingle, K2Node_MakeArray_Array) == 0x000400, "Member 'TASK_Beam_Base_C_BeamDamageTraceSingle::K2Node_MakeArray_Array' has a wrong offset!");
static_assert(offsetof(TASK_Beam_Base_C_BeamDamageTraceSingle, CallFunc_BreakHitResult_bBlockingHit_2) == 0x000410, "Member 'TASK_Beam_Base_C_BeamDamageTraceSingle::CallFunc_BreakHitResult_bBlockingHit_2' has a wrong offset!");
static_assert(offsetof(TASK_Beam_Base_C_BeamDamageTraceSingle, CallFunc_BreakHitResult_bInitialOverlap_2) == 0x000411, "Member 'TASK_Beam_Base_C_BeamDamageTraceSingle::CallFunc_BreakHitResult_bInitialOverlap_2' has a wrong offset!");
static_assert(offsetof(TASK_Beam_Base_C_BeamDamageTraceSingle, CallFunc_BreakHitResult_Time_2) == 0x000414, "Member 'TASK_Beam_Base_C_BeamDamageTraceSingle::CallFunc_BreakHitResult_Time_2' has a wrong offset!");
static_assert(offsetof(TASK_Beam_Base_C_BeamDamageTraceSingle, CallFunc_BreakHitResult_Distance_2) == 0x000418, "Member 'TASK_Beam_Base_C_BeamDamageTraceSingle::CallFunc_BreakHitResult_Distance_2' has a wrong offset!");
static_assert(offsetof(TASK_Beam_Base_C_BeamDamageTraceSingle, CallFunc_BreakHitResult_Location_2) == 0x00041C, "Member 'TASK_Beam_Base_C_BeamDamageTraceSingle::CallFunc_BreakHitResult_Location_2' has a wrong offset!");
static_assert(offsetof(TASK_Beam_Base_C_BeamDamageTraceSingle, CallFunc_BreakHitResult_ImpactPoint_2) == 0x000428, "Member 'TASK_Beam_Base_C_BeamDamageTraceSingle::CallFunc_BreakHitResult_ImpactPoint_2' has a wrong offset!");
static_assert(offsetof(TASK_Beam_Base_C_BeamDamageTraceSingle, CallFunc_BreakHitResult_Normal_2) == 0x000434, "Member 'TASK_Beam_Base_C_BeamDamageTraceSingle::CallFunc_BreakHitResult_Normal_2' has a wrong offset!");
static_assert(offsetof(TASK_Beam_Base_C_BeamDamageTraceSingle, CallFunc_BreakHitResult_ImpactNormal_2) == 0x000440, "Member 'TASK_Beam_Base_C_BeamDamageTraceSingle::CallFunc_BreakHitResult_ImpactNormal_2' has a wrong offset!");
static_assert(offsetof(TASK_Beam_Base_C_BeamDamageTraceSingle, CallFunc_BreakHitResult_PhysMat_2) == 0x000450, "Member 'TASK_Beam_Base_C_BeamDamageTraceSingle::CallFunc_BreakHitResult_PhysMat_2' has a wrong offset!");
static_assert(offsetof(TASK_Beam_Base_C_BeamDamageTraceSingle, CallFunc_BreakHitResult_HitActor_2) == 0x000458, "Member 'TASK_Beam_Base_C_BeamDamageTraceSingle::CallFunc_BreakHitResult_HitActor_2' has a wrong offset!");
static_assert(offsetof(TASK_Beam_Base_C_BeamDamageTraceSingle, CallFunc_BreakHitResult_HitComponent_2) == 0x000460, "Member 'TASK_Beam_Base_C_BeamDamageTraceSingle::CallFunc_BreakHitResult_HitComponent_2' has a wrong offset!");
static_assert(offsetof(TASK_Beam_Base_C_BeamDamageTraceSingle, CallFunc_BreakHitResult_HitBoneName_2) == 0x000468, "Member 'TASK_Beam_Base_C_BeamDamageTraceSingle::CallFunc_BreakHitResult_HitBoneName_2' has a wrong offset!");
static_assert(offsetof(TASK_Beam_Base_C_BeamDamageTraceSingle, CallFunc_BreakHitResult_HitItem_2) == 0x000470, "Member 'TASK_Beam_Base_C_BeamDamageTraceSingle::CallFunc_BreakHitResult_HitItem_2' has a wrong offset!");
static_assert(offsetof(TASK_Beam_Base_C_BeamDamageTraceSingle, CallFunc_BreakHitResult_ElementIndex_2) == 0x000474, "Member 'TASK_Beam_Base_C_BeamDamageTraceSingle::CallFunc_BreakHitResult_ElementIndex_2' has a wrong offset!");
static_assert(offsetof(TASK_Beam_Base_C_BeamDamageTraceSingle, CallFunc_BreakHitResult_FaceIndex_2) == 0x000478, "Member 'TASK_Beam_Base_C_BeamDamageTraceSingle::CallFunc_BreakHitResult_FaceIndex_2' has a wrong offset!");
static_assert(offsetof(TASK_Beam_Base_C_BeamDamageTraceSingle, CallFunc_BreakHitResult_TraceStart_2) == 0x00047C, "Member 'TASK_Beam_Base_C_BeamDamageTraceSingle::CallFunc_BreakHitResult_TraceStart_2' has a wrong offset!");
static_assert(offsetof(TASK_Beam_Base_C_BeamDamageTraceSingle, CallFunc_BreakHitResult_TraceEnd_2) == 0x000488, "Member 'TASK_Beam_Base_C_BeamDamageTraceSingle::CallFunc_BreakHitResult_TraceEnd_2' has a wrong offset!");
static_assert(offsetof(TASK_Beam_Base_C_BeamDamageTraceSingle, Temp_bool_Variable) == 0x000494, "Member 'TASK_Beam_Base_C_BeamDamageTraceSingle::Temp_bool_Variable' has a wrong offset!");
static_assert(offsetof(TASK_Beam_Base_C_BeamDamageTraceSingle, CallFunc_BreakHitResult_bBlockingHit_3) == 0x000495, "Member 'TASK_Beam_Base_C_BeamDamageTraceSingle::CallFunc_BreakHitResult_bBlockingHit_3' has a wrong offset!");
static_assert(offsetof(TASK_Beam_Base_C_BeamDamageTraceSingle, CallFunc_BreakHitResult_bInitialOverlap_3) == 0x000496, "Member 'TASK_Beam_Base_C_BeamDamageTraceSingle::CallFunc_BreakHitResult_bInitialOverlap_3' has a wrong offset!");
static_assert(offsetof(TASK_Beam_Base_C_BeamDamageTraceSingle, CallFunc_BreakHitResult_Time_3) == 0x000498, "Member 'TASK_Beam_Base_C_BeamDamageTraceSingle::CallFunc_BreakHitResult_Time_3' has a wrong offset!");
static_assert(offsetof(TASK_Beam_Base_C_BeamDamageTraceSingle, CallFunc_BreakHitResult_Distance_3) == 0x00049C, "Member 'TASK_Beam_Base_C_BeamDamageTraceSingle::CallFunc_BreakHitResult_Distance_3' has a wrong offset!");
static_assert(offsetof(TASK_Beam_Base_C_BeamDamageTraceSingle, CallFunc_BreakHitResult_Location_3) == 0x0004A0, "Member 'TASK_Beam_Base_C_BeamDamageTraceSingle::CallFunc_BreakHitResult_Location_3' has a wrong offset!");
static_assert(offsetof(TASK_Beam_Base_C_BeamDamageTraceSingle, CallFunc_BreakHitResult_ImpactPoint_3) == 0x0004AC, "Member 'TASK_Beam_Base_C_BeamDamageTraceSingle::CallFunc_BreakHitResult_ImpactPoint_3' has a wrong offset!");
static_assert(offsetof(TASK_Beam_Base_C_BeamDamageTraceSingle, CallFunc_BreakHitResult_Normal_3) == 0x0004B8, "Member 'TASK_Beam_Base_C_BeamDamageTraceSingle::CallFunc_BreakHitResult_Normal_3' has a wrong offset!");
static_assert(offsetof(TASK_Beam_Base_C_BeamDamageTraceSingle, CallFunc_BreakHitResult_ImpactNormal_3) == 0x0004C4, "Member 'TASK_Beam_Base_C_BeamDamageTraceSingle::CallFunc_BreakHitResult_ImpactNormal_3' has a wrong offset!");
static_assert(offsetof(TASK_Beam_Base_C_BeamDamageTraceSingle, CallFunc_BreakHitResult_PhysMat_3) == 0x0004D0, "Member 'TASK_Beam_Base_C_BeamDamageTraceSingle::CallFunc_BreakHitResult_PhysMat_3' has a wrong offset!");
static_assert(offsetof(TASK_Beam_Base_C_BeamDamageTraceSingle, CallFunc_BreakHitResult_HitActor_3) == 0x0004D8, "Member 'TASK_Beam_Base_C_BeamDamageTraceSingle::CallFunc_BreakHitResult_HitActor_3' has a wrong offset!");
static_assert(offsetof(TASK_Beam_Base_C_BeamDamageTraceSingle, CallFunc_BreakHitResult_HitComponent_3) == 0x0004E0, "Member 'TASK_Beam_Base_C_BeamDamageTraceSingle::CallFunc_BreakHitResult_HitComponent_3' has a wrong offset!");
static_assert(offsetof(TASK_Beam_Base_C_BeamDamageTraceSingle, CallFunc_BreakHitResult_HitBoneName_3) == 0x0004E8, "Member 'TASK_Beam_Base_C_BeamDamageTraceSingle::CallFunc_BreakHitResult_HitBoneName_3' has a wrong offset!");
static_assert(offsetof(TASK_Beam_Base_C_BeamDamageTraceSingle, CallFunc_BreakHitResult_HitItem_3) == 0x0004F0, "Member 'TASK_Beam_Base_C_BeamDamageTraceSingle::CallFunc_BreakHitResult_HitItem_3' has a wrong offset!");
static_assert(offsetof(TASK_Beam_Base_C_BeamDamageTraceSingle, CallFunc_BreakHitResult_ElementIndex_3) == 0x0004F4, "Member 'TASK_Beam_Base_C_BeamDamageTraceSingle::CallFunc_BreakHitResult_ElementIndex_3' has a wrong offset!");
static_assert(offsetof(TASK_Beam_Base_C_BeamDamageTraceSingle, CallFunc_BreakHitResult_FaceIndex_3) == 0x0004F8, "Member 'TASK_Beam_Base_C_BeamDamageTraceSingle::CallFunc_BreakHitResult_FaceIndex_3' has a wrong offset!");
static_assert(offsetof(TASK_Beam_Base_C_BeamDamageTraceSingle, CallFunc_BreakHitResult_TraceStart_3) == 0x0004FC, "Member 'TASK_Beam_Base_C_BeamDamageTraceSingle::CallFunc_BreakHitResult_TraceStart_3' has a wrong offset!");
static_assert(offsetof(TASK_Beam_Base_C_BeamDamageTraceSingle, CallFunc_BreakHitResult_TraceEnd_3) == 0x000508, "Member 'TASK_Beam_Base_C_BeamDamageTraceSingle::CallFunc_BreakHitResult_TraceEnd_3' has a wrong offset!");
static_assert(offsetof(TASK_Beam_Base_C_BeamDamageTraceSingle, CallFunc_Set_Contains_ReturnValue) == 0x000514, "Member 'TASK_Beam_Base_C_BeamDamageTraceSingle::CallFunc_Set_Contains_ReturnValue' has a wrong offset!");
static_assert(offsetof(TASK_Beam_Base_C_BeamDamageTraceSingle, K2Node_Select_Default) == 0x000518, "Member 'TASK_Beam_Base_C_BeamDamageTraceSingle::K2Node_Select_Default' has a wrong offset!");
static_assert(offsetof(TASK_Beam_Base_C_BeamDamageTraceSingle, CallFunc_Not_PreBool_ReturnValue) == 0x00051C, "Member 'TASK_Beam_Base_C_BeamDamageTraceSingle::CallFunc_Not_PreBool_ReturnValue' has a wrong offset!");
static_assert(offsetof(TASK_Beam_Base_C_BeamDamageTraceSingle, CallFunc_DamageCharacterShieldsAlongRay_BlockingHit) == 0x00051D, "Member 'TASK_Beam_Base_C_BeamDamageTraceSingle::CallFunc_DamageCharacterShieldsAlongRay_BlockingHit' has a wrong offset!");
static_assert(offsetof(TASK_Beam_Base_C_BeamDamageTraceSingle, CallFunc_DamageCharacterShieldsAlongRay_HitResult) == 0x000520, "Member 'TASK_Beam_Base_C_BeamDamageTraceSingle::CallFunc_DamageCharacterShieldsAlongRay_HitResult' has a wrong offset!");
static_assert(offsetof(TASK_Beam_Base_C_BeamDamageTraceSingle, CallFunc_BreakHitResult_bBlockingHit_4) == 0x0005A8, "Member 'TASK_Beam_Base_C_BeamDamageTraceSingle::CallFunc_BreakHitResult_bBlockingHit_4' has a wrong offset!");
static_assert(offsetof(TASK_Beam_Base_C_BeamDamageTraceSingle, CallFunc_BreakHitResult_bInitialOverlap_4) == 0x0005A9, "Member 'TASK_Beam_Base_C_BeamDamageTraceSingle::CallFunc_BreakHitResult_bInitialOverlap_4' has a wrong offset!");
static_assert(offsetof(TASK_Beam_Base_C_BeamDamageTraceSingle, CallFunc_BreakHitResult_Time_4) == 0x0005AC, "Member 'TASK_Beam_Base_C_BeamDamageTraceSingle::CallFunc_BreakHitResult_Time_4' has a wrong offset!");
static_assert(offsetof(TASK_Beam_Base_C_BeamDamageTraceSingle, CallFunc_BreakHitResult_Distance_4) == 0x0005B0, "Member 'TASK_Beam_Base_C_BeamDamageTraceSingle::CallFunc_BreakHitResult_Distance_4' has a wrong offset!");
static_assert(offsetof(TASK_Beam_Base_C_BeamDamageTraceSingle, CallFunc_BreakHitResult_Location_4) == 0x0005B4, "Member 'TASK_Beam_Base_C_BeamDamageTraceSingle::CallFunc_BreakHitResult_Location_4' has a wrong offset!");
static_assert(offsetof(TASK_Beam_Base_C_BeamDamageTraceSingle, CallFunc_BreakHitResult_ImpactPoint_4) == 0x0005C0, "Member 'TASK_Beam_Base_C_BeamDamageTraceSingle::CallFunc_BreakHitResult_ImpactPoint_4' has a wrong offset!");
static_assert(offsetof(TASK_Beam_Base_C_BeamDamageTraceSingle, CallFunc_BreakHitResult_Normal_4) == 0x0005CC, "Member 'TASK_Beam_Base_C_BeamDamageTraceSingle::CallFunc_BreakHitResult_Normal_4' has a wrong offset!");
static_assert(offsetof(TASK_Beam_Base_C_BeamDamageTraceSingle, CallFunc_BreakHitResult_ImpactNormal_4) == 0x0005D8, "Member 'TASK_Beam_Base_C_BeamDamageTraceSingle::CallFunc_BreakHitResult_ImpactNormal_4' has a wrong offset!");
static_assert(offsetof(TASK_Beam_Base_C_BeamDamageTraceSingle, CallFunc_BreakHitResult_PhysMat_4) == 0x0005E8, "Member 'TASK_Beam_Base_C_BeamDamageTraceSingle::CallFunc_BreakHitResult_PhysMat_4' has a wrong offset!");
static_assert(offsetof(TASK_Beam_Base_C_BeamDamageTraceSingle, CallFunc_BreakHitResult_HitActor_4) == 0x0005F0, "Member 'TASK_Beam_Base_C_BeamDamageTraceSingle::CallFunc_BreakHitResult_HitActor_4' has a wrong offset!");
static_assert(offsetof(TASK_Beam_Base_C_BeamDamageTraceSingle, CallFunc_BreakHitResult_HitComponent_4) == 0x0005F8, "Member 'TASK_Beam_Base_C_BeamDamageTraceSingle::CallFunc_BreakHitResult_HitComponent_4' has a wrong offset!");
static_assert(offsetof(TASK_Beam_Base_C_BeamDamageTraceSingle, CallFunc_BreakHitResult_HitBoneName_4) == 0x000600, "Member 'TASK_Beam_Base_C_BeamDamageTraceSingle::CallFunc_BreakHitResult_HitBoneName_4' has a wrong offset!");
static_assert(offsetof(TASK_Beam_Base_C_BeamDamageTraceSingle, CallFunc_BreakHitResult_HitItem_4) == 0x000608, "Member 'TASK_Beam_Base_C_BeamDamageTraceSingle::CallFunc_BreakHitResult_HitItem_4' has a wrong offset!");
static_assert(offsetof(TASK_Beam_Base_C_BeamDamageTraceSingle, CallFunc_BreakHitResult_ElementIndex_4) == 0x00060C, "Member 'TASK_Beam_Base_C_BeamDamageTraceSingle::CallFunc_BreakHitResult_ElementIndex_4' has a wrong offset!");
static_assert(offsetof(TASK_Beam_Base_C_BeamDamageTraceSingle, CallFunc_BreakHitResult_FaceIndex_4) == 0x000610, "Member 'TASK_Beam_Base_C_BeamDamageTraceSingle::CallFunc_BreakHitResult_FaceIndex_4' has a wrong offset!");
static_assert(offsetof(TASK_Beam_Base_C_BeamDamageTraceSingle, CallFunc_BreakHitResult_TraceStart_4) == 0x000614, "Member 'TASK_Beam_Base_C_BeamDamageTraceSingle::CallFunc_BreakHitResult_TraceStart_4' has a wrong offset!");
static_assert(offsetof(TASK_Beam_Base_C_BeamDamageTraceSingle, CallFunc_BreakHitResult_TraceEnd_4) == 0x000620, "Member 'TASK_Beam_Base_C_BeamDamageTraceSingle::CallFunc_BreakHitResult_TraceEnd_4' has a wrong offset!");
static_assert(offsetof(TASK_Beam_Base_C_BeamDamageTraceSingle, Temp_bool_Variable_1) == 0x00062C, "Member 'TASK_Beam_Base_C_BeamDamageTraceSingle::Temp_bool_Variable_1' has a wrong offset!");
static_assert(offsetof(TASK_Beam_Base_C_BeamDamageTraceSingle, CallFunc_GetPlayTimeInSeconds_ReturnValue) == 0x000630, "Member 'TASK_Beam_Base_C_BeamDamageTraceSingle::CallFunc_GetPlayTimeInSeconds_ReturnValue' has a wrong offset!");
static_assert(offsetof(TASK_Beam_Base_C_BeamDamageTraceSingle, CallFunc_BreakHitResult_bBlockingHit_5) == 0x000634, "Member 'TASK_Beam_Base_C_BeamDamageTraceSingle::CallFunc_BreakHitResult_bBlockingHit_5' has a wrong offset!");
static_assert(offsetof(TASK_Beam_Base_C_BeamDamageTraceSingle, CallFunc_BreakHitResult_bInitialOverlap_5) == 0x000635, "Member 'TASK_Beam_Base_C_BeamDamageTraceSingle::CallFunc_BreakHitResult_bInitialOverlap_5' has a wrong offset!");
static_assert(offsetof(TASK_Beam_Base_C_BeamDamageTraceSingle, CallFunc_BreakHitResult_Time_5) == 0x000638, "Member 'TASK_Beam_Base_C_BeamDamageTraceSingle::CallFunc_BreakHitResult_Time_5' has a wrong offset!");
static_assert(offsetof(TASK_Beam_Base_C_BeamDamageTraceSingle, CallFunc_BreakHitResult_Distance_5) == 0x00063C, "Member 'TASK_Beam_Base_C_BeamDamageTraceSingle::CallFunc_BreakHitResult_Distance_5' has a wrong offset!");
static_assert(offsetof(TASK_Beam_Base_C_BeamDamageTraceSingle, CallFunc_BreakHitResult_Location_5) == 0x000640, "Member 'TASK_Beam_Base_C_BeamDamageTraceSingle::CallFunc_BreakHitResult_Location_5' has a wrong offset!");
static_assert(offsetof(TASK_Beam_Base_C_BeamDamageTraceSingle, CallFunc_BreakHitResult_ImpactPoint_5) == 0x00064C, "Member 'TASK_Beam_Base_C_BeamDamageTraceSingle::CallFunc_BreakHitResult_ImpactPoint_5' has a wrong offset!");
static_assert(offsetof(TASK_Beam_Base_C_BeamDamageTraceSingle, CallFunc_BreakHitResult_Normal_5) == 0x000658, "Member 'TASK_Beam_Base_C_BeamDamageTraceSingle::CallFunc_BreakHitResult_Normal_5' has a wrong offset!");
static_assert(offsetof(TASK_Beam_Base_C_BeamDamageTraceSingle, CallFunc_BreakHitResult_ImpactNormal_5) == 0x000664, "Member 'TASK_Beam_Base_C_BeamDamageTraceSingle::CallFunc_BreakHitResult_ImpactNormal_5' has a wrong offset!");
static_assert(offsetof(TASK_Beam_Base_C_BeamDamageTraceSingle, CallFunc_BreakHitResult_PhysMat_5) == 0x000670, "Member 'TASK_Beam_Base_C_BeamDamageTraceSingle::CallFunc_BreakHitResult_PhysMat_5' has a wrong offset!");
static_assert(offsetof(TASK_Beam_Base_C_BeamDamageTraceSingle, CallFunc_BreakHitResult_HitActor_5) == 0x000678, "Member 'TASK_Beam_Base_C_BeamDamageTraceSingle::CallFunc_BreakHitResult_HitActor_5' has a wrong offset!");
static_assert(offsetof(TASK_Beam_Base_C_BeamDamageTraceSingle, CallFunc_BreakHitResult_HitComponent_5) == 0x000680, "Member 'TASK_Beam_Base_C_BeamDamageTraceSingle::CallFunc_BreakHitResult_HitComponent_5' has a wrong offset!");
static_assert(offsetof(TASK_Beam_Base_C_BeamDamageTraceSingle, CallFunc_BreakHitResult_HitBoneName_5) == 0x000688, "Member 'TASK_Beam_Base_C_BeamDamageTraceSingle::CallFunc_BreakHitResult_HitBoneName_5' has a wrong offset!");
static_assert(offsetof(TASK_Beam_Base_C_BeamDamageTraceSingle, CallFunc_BreakHitResult_HitItem_5) == 0x000690, "Member 'TASK_Beam_Base_C_BeamDamageTraceSingle::CallFunc_BreakHitResult_HitItem_5' has a wrong offset!");
static_assert(offsetof(TASK_Beam_Base_C_BeamDamageTraceSingle, CallFunc_BreakHitResult_ElementIndex_5) == 0x000694, "Member 'TASK_Beam_Base_C_BeamDamageTraceSingle::CallFunc_BreakHitResult_ElementIndex_5' has a wrong offset!");
static_assert(offsetof(TASK_Beam_Base_C_BeamDamageTraceSingle, CallFunc_BreakHitResult_FaceIndex_5) == 0x000698, "Member 'TASK_Beam_Base_C_BeamDamageTraceSingle::CallFunc_BreakHitResult_FaceIndex_5' has a wrong offset!");
static_assert(offsetof(TASK_Beam_Base_C_BeamDamageTraceSingle, CallFunc_BreakHitResult_TraceStart_5) == 0x00069C, "Member 'TASK_Beam_Base_C_BeamDamageTraceSingle::CallFunc_BreakHitResult_TraceStart_5' has a wrong offset!");
static_assert(offsetof(TASK_Beam_Base_C_BeamDamageTraceSingle, CallFunc_BreakHitResult_TraceEnd_5) == 0x0006A8, "Member 'TASK_Beam_Base_C_BeamDamageTraceSingle::CallFunc_BreakHitResult_TraceEnd_5' has a wrong offset!");
static_assert(offsetof(TASK_Beam_Base_C_BeamDamageTraceSingle, CallFunc_SpawnObject_ReturnValue) == 0x0006B8, "Member 'TASK_Beam_Base_C_BeamDamageTraceSingle::CallFunc_SpawnObject_ReturnValue' has a wrong offset!");
static_assert(offsetof(TASK_Beam_Base_C_BeamDamageTraceSingle, CallFunc_Map_Find_Value) == 0x0006C0, "Member 'TASK_Beam_Base_C_BeamDamageTraceSingle::CallFunc_Map_Find_Value' has a wrong offset!");
static_assert(offsetof(TASK_Beam_Base_C_BeamDamageTraceSingle, CallFunc_Map_Find_ReturnValue) == 0x0006C4, "Member 'TASK_Beam_Base_C_BeamDamageTraceSingle::CallFunc_Map_Find_ReturnValue' has a wrong offset!");
static_assert(offsetof(TASK_Beam_Base_C_BeamDamageTraceSingle, CallFunc_Subtract_FloatFloat_ReturnValue) == 0x0006C8, "Member 'TASK_Beam_Base_C_BeamDamageTraceSingle::CallFunc_Subtract_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(TASK_Beam_Base_C_BeamDamageTraceSingle, CallFunc_GreaterEqual_FloatFloat_ReturnValue) == 0x0006CC, "Member 'TASK_Beam_Base_C_BeamDamageTraceSingle::CallFunc_GreaterEqual_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(TASK_Beam_Base_C_BeamDamageTraceSingle, CallFunc_GetPlayTimeInSeconds_ReturnValue_1) == 0x0006D0, "Member 'TASK_Beam_Base_C_BeamDamageTraceSingle::CallFunc_GetPlayTimeInSeconds_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(TASK_Beam_Base_C_BeamDamageTraceSingle, Temp_bool_Variable_2) == 0x0006D4, "Member 'TASK_Beam_Base_C_BeamDamageTraceSingle::Temp_bool_Variable_2' has a wrong offset!");
static_assert(offsetof(TASK_Beam_Base_C_BeamDamageTraceSingle, CallFunc_Map_Contains_ReturnValue) == 0x0006D5, "Member 'TASK_Beam_Base_C_BeamDamageTraceSingle::CallFunc_Map_Contains_ReturnValue' has a wrong offset!");
static_assert(offsetof(TASK_Beam_Base_C_BeamDamageTraceSingle, K2Node_Select_Default_1) == 0x0006D8, "Member 'TASK_Beam_Base_C_BeamDamageTraceSingle::K2Node_Select_Default_1' has a wrong offset!");
static_assert(offsetof(TASK_Beam_Base_C_BeamDamageTraceSingle, CallFunc_Less_FloatFloat_ReturnValue) == 0x0006DC, "Member 'TASK_Beam_Base_C_BeamDamageTraceSingle::CallFunc_Less_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(TASK_Beam_Base_C_BeamDamageTraceSingle, CallFunc_BooleanAND_ReturnValue) == 0x0006DD, "Member 'TASK_Beam_Base_C_BeamDamageTraceSingle::CallFunc_BooleanAND_ReturnValue' has a wrong offset!");
static_assert(offsetof(TASK_Beam_Base_C_BeamDamageTraceSingle, CallFunc_ApplyMod_ReturnValue) == 0x0006E0, "Member 'TASK_Beam_Base_C_BeamDamageTraceSingle::CallFunc_ApplyMod_ReturnValue' has a wrong offset!");
static_assert(offsetof(TASK_Beam_Base_C_BeamDamageTraceSingle, K2Node_Select_Default_2) == 0x0006E8, "Member 'TASK_Beam_Base_C_BeamDamageTraceSingle::K2Node_Select_Default_2' has a wrong offset!");
static_assert(offsetof(TASK_Beam_Base_C_BeamDamageTraceSingle, CallFunc_Multiply_VectorFloat_ReturnValue) == 0x000770, "Member 'TASK_Beam_Base_C_BeamDamageTraceSingle::CallFunc_Multiply_VectorFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(TASK_Beam_Base_C_BeamDamageTraceSingle, CallFunc_BreakHitResult_bBlockingHit_6) == 0x00077C, "Member 'TASK_Beam_Base_C_BeamDamageTraceSingle::CallFunc_BreakHitResult_bBlockingHit_6' has a wrong offset!");
static_assert(offsetof(TASK_Beam_Base_C_BeamDamageTraceSingle, CallFunc_BreakHitResult_bInitialOverlap_6) == 0x00077D, "Member 'TASK_Beam_Base_C_BeamDamageTraceSingle::CallFunc_BreakHitResult_bInitialOverlap_6' has a wrong offset!");
static_assert(offsetof(TASK_Beam_Base_C_BeamDamageTraceSingle, CallFunc_BreakHitResult_Time_6) == 0x000780, "Member 'TASK_Beam_Base_C_BeamDamageTraceSingle::CallFunc_BreakHitResult_Time_6' has a wrong offset!");
static_assert(offsetof(TASK_Beam_Base_C_BeamDamageTraceSingle, CallFunc_BreakHitResult_Distance_6) == 0x000784, "Member 'TASK_Beam_Base_C_BeamDamageTraceSingle::CallFunc_BreakHitResult_Distance_6' has a wrong offset!");
static_assert(offsetof(TASK_Beam_Base_C_BeamDamageTraceSingle, CallFunc_BreakHitResult_Location_6) == 0x000788, "Member 'TASK_Beam_Base_C_BeamDamageTraceSingle::CallFunc_BreakHitResult_Location_6' has a wrong offset!");
static_assert(offsetof(TASK_Beam_Base_C_BeamDamageTraceSingle, CallFunc_BreakHitResult_ImpactPoint_6) == 0x000794, "Member 'TASK_Beam_Base_C_BeamDamageTraceSingle::CallFunc_BreakHitResult_ImpactPoint_6' has a wrong offset!");
static_assert(offsetof(TASK_Beam_Base_C_BeamDamageTraceSingle, CallFunc_BreakHitResult_Normal_6) == 0x0007A0, "Member 'TASK_Beam_Base_C_BeamDamageTraceSingle::CallFunc_BreakHitResult_Normal_6' has a wrong offset!");
static_assert(offsetof(TASK_Beam_Base_C_BeamDamageTraceSingle, CallFunc_BreakHitResult_ImpactNormal_6) == 0x0007AC, "Member 'TASK_Beam_Base_C_BeamDamageTraceSingle::CallFunc_BreakHitResult_ImpactNormal_6' has a wrong offset!");
static_assert(offsetof(TASK_Beam_Base_C_BeamDamageTraceSingle, CallFunc_BreakHitResult_PhysMat_6) == 0x0007B8, "Member 'TASK_Beam_Base_C_BeamDamageTraceSingle::CallFunc_BreakHitResult_PhysMat_6' has a wrong offset!");
static_assert(offsetof(TASK_Beam_Base_C_BeamDamageTraceSingle, CallFunc_BreakHitResult_HitActor_6) == 0x0007C0, "Member 'TASK_Beam_Base_C_BeamDamageTraceSingle::CallFunc_BreakHitResult_HitActor_6' has a wrong offset!");
static_assert(offsetof(TASK_Beam_Base_C_BeamDamageTraceSingle, CallFunc_BreakHitResult_HitComponent_6) == 0x0007C8, "Member 'TASK_Beam_Base_C_BeamDamageTraceSingle::CallFunc_BreakHitResult_HitComponent_6' has a wrong offset!");
static_assert(offsetof(TASK_Beam_Base_C_BeamDamageTraceSingle, CallFunc_BreakHitResult_HitBoneName_6) == 0x0007D0, "Member 'TASK_Beam_Base_C_BeamDamageTraceSingle::CallFunc_BreakHitResult_HitBoneName_6' has a wrong offset!");
static_assert(offsetof(TASK_Beam_Base_C_BeamDamageTraceSingle, CallFunc_BreakHitResult_HitItem_6) == 0x0007D8, "Member 'TASK_Beam_Base_C_BeamDamageTraceSingle::CallFunc_BreakHitResult_HitItem_6' has a wrong offset!");
static_assert(offsetof(TASK_Beam_Base_C_BeamDamageTraceSingle, CallFunc_BreakHitResult_ElementIndex_6) == 0x0007DC, "Member 'TASK_Beam_Base_C_BeamDamageTraceSingle::CallFunc_BreakHitResult_ElementIndex_6' has a wrong offset!");
static_assert(offsetof(TASK_Beam_Base_C_BeamDamageTraceSingle, CallFunc_BreakHitResult_FaceIndex_6) == 0x0007E0, "Member 'TASK_Beam_Base_C_BeamDamageTraceSingle::CallFunc_BreakHitResult_FaceIndex_6' has a wrong offset!");
static_assert(offsetof(TASK_Beam_Base_C_BeamDamageTraceSingle, CallFunc_BreakHitResult_TraceStart_6) == 0x0007E4, "Member 'TASK_Beam_Base_C_BeamDamageTraceSingle::CallFunc_BreakHitResult_TraceStart_6' has a wrong offset!");
static_assert(offsetof(TASK_Beam_Base_C_BeamDamageTraceSingle, CallFunc_BreakHitResult_TraceEnd_6) == 0x0007F0, "Member 'TASK_Beam_Base_C_BeamDamageTraceSingle::CallFunc_BreakHitResult_TraceEnd_6' has a wrong offset!");

// Function TASK_Beam_Base.TASK_Beam_Base_C.BeamLineTrace
// 0x01C0 (0x01C0 - 0x0000)
struct TASK_Beam_Base_C_BeamLineTrace final
{
public:
	class FName                                   BeamSocket;                                        // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FHitResult                             OutHit;                                            // 0x0008(0x0088)(Parm, OutParm, IsPlainOldData, NoDestructor, ContainsInstancedReference)
	struct FVector                                Direction;                                         // 0x0090(0x000C)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_9C[0x4];                                       // 0x009C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTransform                             BarrelTransform;                                   // 0x00A0(0x0030)(Edit, BlueprintVisible, IsPlainOldData, NoDestructor)
	struct FVector                                BeamDirection;                                     // 0x00D0(0x000C)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                BarrelLocation;                                    // 0x00DC(0x000C)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_GetBeamAimDirection_BeamAimDirection;     // 0x00E8(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_GetSocketLocation_ReturnValue;            // 0x00F4(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_GetMaxCombatTraceDistance_Distance;       // 0x0100(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Multiply_VectorFloat_ReturnValue;         // 0x0104(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TArray<class AActor*>                         K2Node_MakeArray_Array;                            // 0x0110(0x0010)(ConstParm, ReferenceParm)
	struct FVector                                CallFunc_Add_VectorVector_ReturnValue;             // 0x0120(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FHitResult                             CallFunc_SphereTraceSingle_OutHit;                 // 0x012C(0x0088)(IsPlainOldData, NoDestructor, ContainsInstancedReference)
	bool                                          CallFunc_SphereTraceSingle_ReturnValue;            // 0x01B4(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(TASK_Beam_Base_C_BeamLineTrace) == 0x000010, "Wrong alignment on TASK_Beam_Base_C_BeamLineTrace");
static_assert(sizeof(TASK_Beam_Base_C_BeamLineTrace) == 0x0001C0, "Wrong size on TASK_Beam_Base_C_BeamLineTrace");
static_assert(offsetof(TASK_Beam_Base_C_BeamLineTrace, BeamSocket) == 0x000000, "Member 'TASK_Beam_Base_C_BeamLineTrace::BeamSocket' has a wrong offset!");
static_assert(offsetof(TASK_Beam_Base_C_BeamLineTrace, OutHit) == 0x000008, "Member 'TASK_Beam_Base_C_BeamLineTrace::OutHit' has a wrong offset!");
static_assert(offsetof(TASK_Beam_Base_C_BeamLineTrace, Direction) == 0x000090, "Member 'TASK_Beam_Base_C_BeamLineTrace::Direction' has a wrong offset!");
static_assert(offsetof(TASK_Beam_Base_C_BeamLineTrace, BarrelTransform) == 0x0000A0, "Member 'TASK_Beam_Base_C_BeamLineTrace::BarrelTransform' has a wrong offset!");
static_assert(offsetof(TASK_Beam_Base_C_BeamLineTrace, BeamDirection) == 0x0000D0, "Member 'TASK_Beam_Base_C_BeamLineTrace::BeamDirection' has a wrong offset!");
static_assert(offsetof(TASK_Beam_Base_C_BeamLineTrace, BarrelLocation) == 0x0000DC, "Member 'TASK_Beam_Base_C_BeamLineTrace::BarrelLocation' has a wrong offset!");
static_assert(offsetof(TASK_Beam_Base_C_BeamLineTrace, CallFunc_GetBeamAimDirection_BeamAimDirection) == 0x0000E8, "Member 'TASK_Beam_Base_C_BeamLineTrace::CallFunc_GetBeamAimDirection_BeamAimDirection' has a wrong offset!");
static_assert(offsetof(TASK_Beam_Base_C_BeamLineTrace, CallFunc_GetSocketLocation_ReturnValue) == 0x0000F4, "Member 'TASK_Beam_Base_C_BeamLineTrace::CallFunc_GetSocketLocation_ReturnValue' has a wrong offset!");
static_assert(offsetof(TASK_Beam_Base_C_BeamLineTrace, CallFunc_GetMaxCombatTraceDistance_Distance) == 0x000100, "Member 'TASK_Beam_Base_C_BeamLineTrace::CallFunc_GetMaxCombatTraceDistance_Distance' has a wrong offset!");
static_assert(offsetof(TASK_Beam_Base_C_BeamLineTrace, CallFunc_Multiply_VectorFloat_ReturnValue) == 0x000104, "Member 'TASK_Beam_Base_C_BeamLineTrace::CallFunc_Multiply_VectorFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(TASK_Beam_Base_C_BeamLineTrace, K2Node_MakeArray_Array) == 0x000110, "Member 'TASK_Beam_Base_C_BeamLineTrace::K2Node_MakeArray_Array' has a wrong offset!");
static_assert(offsetof(TASK_Beam_Base_C_BeamLineTrace, CallFunc_Add_VectorVector_ReturnValue) == 0x000120, "Member 'TASK_Beam_Base_C_BeamLineTrace::CallFunc_Add_VectorVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(TASK_Beam_Base_C_BeamLineTrace, CallFunc_SphereTraceSingle_OutHit) == 0x00012C, "Member 'TASK_Beam_Base_C_BeamLineTrace::CallFunc_SphereTraceSingle_OutHit' has a wrong offset!");
static_assert(offsetof(TASK_Beam_Base_C_BeamLineTrace, CallFunc_SphereTraceSingle_ReturnValue) == 0x0001B4, "Member 'TASK_Beam_Base_C_BeamLineTrace::CallFunc_SphereTraceSingle_ReturnValue' has a wrong offset!");

// Function TASK_Beam_Base.TASK_Beam_Base_C.StopBeam
// 0x0028 (0x0028 - 0x0000)
struct TASK_Beam_Base_C_StopBeam final
{
public:
	int32                                         Temp_int_Array_Index_Variable;                     // 0x0000(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Loop_Counter_Variable;                    // 0x0004(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Subtract_IntInt_ReturnValue;              // 0x0008(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_GreaterEqual_IntInt_ReturnValue;          // 0x000C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_D[0x3];                                        // 0x000D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Array_Length_ReturnValue;                 // 0x0010(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UNiagaraComponent*                      CallFunc_Array_Get_Item;                           // 0x0018(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Subtract_IntInt_ReturnValue_1;            // 0x0020(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Max_ReturnValue;                          // 0x0024(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(TASK_Beam_Base_C_StopBeam) == 0x000008, "Wrong alignment on TASK_Beam_Base_C_StopBeam");
static_assert(sizeof(TASK_Beam_Base_C_StopBeam) == 0x000028, "Wrong size on TASK_Beam_Base_C_StopBeam");
static_assert(offsetof(TASK_Beam_Base_C_StopBeam, Temp_int_Array_Index_Variable) == 0x000000, "Member 'TASK_Beam_Base_C_StopBeam::Temp_int_Array_Index_Variable' has a wrong offset!");
static_assert(offsetof(TASK_Beam_Base_C_StopBeam, Temp_int_Loop_Counter_Variable) == 0x000004, "Member 'TASK_Beam_Base_C_StopBeam::Temp_int_Loop_Counter_Variable' has a wrong offset!");
static_assert(offsetof(TASK_Beam_Base_C_StopBeam, CallFunc_Subtract_IntInt_ReturnValue) == 0x000008, "Member 'TASK_Beam_Base_C_StopBeam::CallFunc_Subtract_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(TASK_Beam_Base_C_StopBeam, CallFunc_GreaterEqual_IntInt_ReturnValue) == 0x00000C, "Member 'TASK_Beam_Base_C_StopBeam::CallFunc_GreaterEqual_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(TASK_Beam_Base_C_StopBeam, CallFunc_Array_Length_ReturnValue) == 0x000010, "Member 'TASK_Beam_Base_C_StopBeam::CallFunc_Array_Length_ReturnValue' has a wrong offset!");
static_assert(offsetof(TASK_Beam_Base_C_StopBeam, CallFunc_Array_Get_Item) == 0x000018, "Member 'TASK_Beam_Base_C_StopBeam::CallFunc_Array_Get_Item' has a wrong offset!");
static_assert(offsetof(TASK_Beam_Base_C_StopBeam, CallFunc_Subtract_IntInt_ReturnValue_1) == 0x000020, "Member 'TASK_Beam_Base_C_StopBeam::CallFunc_Subtract_IntInt_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(TASK_Beam_Base_C_StopBeam, CallFunc_Max_ReturnValue) == 0x000024, "Member 'TASK_Beam_Base_C_StopBeam::CallFunc_Max_ReturnValue' has a wrong offset!");

// Function TASK_Beam_Base.TASK_Beam_Base_C.CreateAndSetAimTarget
// 0x00F0 (0x00F0 - 0x0000)
struct TASK_Beam_Base_C_CreateAndSetAimTarget final
{
public:
	ENUM_TargetType                               Type;                                              // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                TargetVector;                                      // 0x0004(0x000C)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                TargetLocation;                                    // 0x0010(0x000C)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_GetBarrelWorldLocation_BarrelLocation;    // 0x001C(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Subtract_VectorVector_ReturnValue;        // 0x0028(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Normal_ReturnValue;                       // 0x0034(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_WorldDirectionToLocalDirection_LocalDirection; // 0x0040(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_SwitchEnum_CmpSuccess;                      // 0x004C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_4D[0x3];                                       // 0x004D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                CallFunc_GetBarrelWorldLocation_BarrelLocation_1;  // 0x0050(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_GetLocalForwardDirection_ForwardDirection; // 0x005C(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_LocalDirectionToWorldDirection_WorldDirection; // 0x0068(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Multiply_VectorFloat_ReturnValue;         // 0x0074(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UAnimInstance*                          CallFunc_GetAnimInstance_ReturnValue;              // 0x0080(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Add_VectorVector_ReturnValue;             // 0x0088(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_94[0x4];                                       // 0x0094(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TScriptInterface<class IINTERF_ANIM_Character_C> K2Node_DynamicCast_AsINTERF_ANIM_Character;        // 0x0098(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x00A8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_A9[0x7];                                       // 0x00A9(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UOBJ_EnemyTarget_C*                     CallFunc_GetAimTarget_Target;                      // 0x00B0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x00B8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_B9[0x3];                                       // 0x00B9(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                CallFunc_Get_Target_Location_Location;             // 0x00BC(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UOBJ_EnemyTarget_C*                     CallFunc_SpawnObject_ReturnValue;                  // 0x00C8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UAnimInstance*                          CallFunc_GetAnimInstance_ReturnValue_1;            // 0x00D0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TScriptInterface<class IINTERF_ANIM_Character_C> K2Node_DynamicCast_AsINTERF_ANIM_Character_1;      // 0x00D8(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          K2Node_DynamicCast_bSuccess_1;                     // 0x00E8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_SetAimTarget_Result;                      // 0x00E9(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(TASK_Beam_Base_C_CreateAndSetAimTarget) == 0x000008, "Wrong alignment on TASK_Beam_Base_C_CreateAndSetAimTarget");
static_assert(sizeof(TASK_Beam_Base_C_CreateAndSetAimTarget) == 0x0000F0, "Wrong size on TASK_Beam_Base_C_CreateAndSetAimTarget");
static_assert(offsetof(TASK_Beam_Base_C_CreateAndSetAimTarget, Type) == 0x000000, "Member 'TASK_Beam_Base_C_CreateAndSetAimTarget::Type' has a wrong offset!");
static_assert(offsetof(TASK_Beam_Base_C_CreateAndSetAimTarget, TargetVector) == 0x000004, "Member 'TASK_Beam_Base_C_CreateAndSetAimTarget::TargetVector' has a wrong offset!");
static_assert(offsetof(TASK_Beam_Base_C_CreateAndSetAimTarget, TargetLocation) == 0x000010, "Member 'TASK_Beam_Base_C_CreateAndSetAimTarget::TargetLocation' has a wrong offset!");
static_assert(offsetof(TASK_Beam_Base_C_CreateAndSetAimTarget, CallFunc_GetBarrelWorldLocation_BarrelLocation) == 0x00001C, "Member 'TASK_Beam_Base_C_CreateAndSetAimTarget::CallFunc_GetBarrelWorldLocation_BarrelLocation' has a wrong offset!");
static_assert(offsetof(TASK_Beam_Base_C_CreateAndSetAimTarget, CallFunc_Subtract_VectorVector_ReturnValue) == 0x000028, "Member 'TASK_Beam_Base_C_CreateAndSetAimTarget::CallFunc_Subtract_VectorVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(TASK_Beam_Base_C_CreateAndSetAimTarget, CallFunc_Normal_ReturnValue) == 0x000034, "Member 'TASK_Beam_Base_C_CreateAndSetAimTarget::CallFunc_Normal_ReturnValue' has a wrong offset!");
static_assert(offsetof(TASK_Beam_Base_C_CreateAndSetAimTarget, CallFunc_WorldDirectionToLocalDirection_LocalDirection) == 0x000040, "Member 'TASK_Beam_Base_C_CreateAndSetAimTarget::CallFunc_WorldDirectionToLocalDirection_LocalDirection' has a wrong offset!");
static_assert(offsetof(TASK_Beam_Base_C_CreateAndSetAimTarget, K2Node_SwitchEnum_CmpSuccess) == 0x00004C, "Member 'TASK_Beam_Base_C_CreateAndSetAimTarget::K2Node_SwitchEnum_CmpSuccess' has a wrong offset!");
static_assert(offsetof(TASK_Beam_Base_C_CreateAndSetAimTarget, CallFunc_GetBarrelWorldLocation_BarrelLocation_1) == 0x000050, "Member 'TASK_Beam_Base_C_CreateAndSetAimTarget::CallFunc_GetBarrelWorldLocation_BarrelLocation_1' has a wrong offset!");
static_assert(offsetof(TASK_Beam_Base_C_CreateAndSetAimTarget, CallFunc_GetLocalForwardDirection_ForwardDirection) == 0x00005C, "Member 'TASK_Beam_Base_C_CreateAndSetAimTarget::CallFunc_GetLocalForwardDirection_ForwardDirection' has a wrong offset!");
static_assert(offsetof(TASK_Beam_Base_C_CreateAndSetAimTarget, CallFunc_LocalDirectionToWorldDirection_WorldDirection) == 0x000068, "Member 'TASK_Beam_Base_C_CreateAndSetAimTarget::CallFunc_LocalDirectionToWorldDirection_WorldDirection' has a wrong offset!");
static_assert(offsetof(TASK_Beam_Base_C_CreateAndSetAimTarget, CallFunc_Multiply_VectorFloat_ReturnValue) == 0x000074, "Member 'TASK_Beam_Base_C_CreateAndSetAimTarget::CallFunc_Multiply_VectorFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(TASK_Beam_Base_C_CreateAndSetAimTarget, CallFunc_GetAnimInstance_ReturnValue) == 0x000080, "Member 'TASK_Beam_Base_C_CreateAndSetAimTarget::CallFunc_GetAnimInstance_ReturnValue' has a wrong offset!");
static_assert(offsetof(TASK_Beam_Base_C_CreateAndSetAimTarget, CallFunc_Add_VectorVector_ReturnValue) == 0x000088, "Member 'TASK_Beam_Base_C_CreateAndSetAimTarget::CallFunc_Add_VectorVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(TASK_Beam_Base_C_CreateAndSetAimTarget, K2Node_DynamicCast_AsINTERF_ANIM_Character) == 0x000098, "Member 'TASK_Beam_Base_C_CreateAndSetAimTarget::K2Node_DynamicCast_AsINTERF_ANIM_Character' has a wrong offset!");
static_assert(offsetof(TASK_Beam_Base_C_CreateAndSetAimTarget, K2Node_DynamicCast_bSuccess) == 0x0000A8, "Member 'TASK_Beam_Base_C_CreateAndSetAimTarget::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(TASK_Beam_Base_C_CreateAndSetAimTarget, CallFunc_GetAimTarget_Target) == 0x0000B0, "Member 'TASK_Beam_Base_C_CreateAndSetAimTarget::CallFunc_GetAimTarget_Target' has a wrong offset!");
static_assert(offsetof(TASK_Beam_Base_C_CreateAndSetAimTarget, CallFunc_IsValid_ReturnValue) == 0x0000B8, "Member 'TASK_Beam_Base_C_CreateAndSetAimTarget::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(TASK_Beam_Base_C_CreateAndSetAimTarget, CallFunc_Get_Target_Location_Location) == 0x0000BC, "Member 'TASK_Beam_Base_C_CreateAndSetAimTarget::CallFunc_Get_Target_Location_Location' has a wrong offset!");
static_assert(offsetof(TASK_Beam_Base_C_CreateAndSetAimTarget, CallFunc_SpawnObject_ReturnValue) == 0x0000C8, "Member 'TASK_Beam_Base_C_CreateAndSetAimTarget::CallFunc_SpawnObject_ReturnValue' has a wrong offset!");
static_assert(offsetof(TASK_Beam_Base_C_CreateAndSetAimTarget, CallFunc_GetAnimInstance_ReturnValue_1) == 0x0000D0, "Member 'TASK_Beam_Base_C_CreateAndSetAimTarget::CallFunc_GetAnimInstance_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(TASK_Beam_Base_C_CreateAndSetAimTarget, K2Node_DynamicCast_AsINTERF_ANIM_Character_1) == 0x0000D8, "Member 'TASK_Beam_Base_C_CreateAndSetAimTarget::K2Node_DynamicCast_AsINTERF_ANIM_Character_1' has a wrong offset!");
static_assert(offsetof(TASK_Beam_Base_C_CreateAndSetAimTarget, K2Node_DynamicCast_bSuccess_1) == 0x0000E8, "Member 'TASK_Beam_Base_C_CreateAndSetAimTarget::K2Node_DynamicCast_bSuccess_1' has a wrong offset!");
static_assert(offsetof(TASK_Beam_Base_C_CreateAndSetAimTarget, CallFunc_SetAimTarget_Result) == 0x0000E9, "Member 'TASK_Beam_Base_C_CreateAndSetAimTarget::CallFunc_SetAimTarget_Result' has a wrong offset!");

// Function TASK_Beam_Base.TASK_Beam_Base_C.GetBarrelWorldLocation
// 0x0028 (0x0028 - 0x0000)
struct TASK_Beam_Base_C_GetBarrelWorldLocation final
{
public:
	struct FVector                                BarrelLocation;                                    // 0x0000(0x000C)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class APAWN_MobileLaser_C*                    K2Node_DynamicCast_AsPAWN_Mobile_Laser;            // 0x0010(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0018(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_19[0x3];                                       // 0x0019(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                CallFunc_GetProxyBarrelWorldLocation_ProxyBarrelLocation; // 0x001C(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(TASK_Beam_Base_C_GetBarrelWorldLocation) == 0x000008, "Wrong alignment on TASK_Beam_Base_C_GetBarrelWorldLocation");
static_assert(sizeof(TASK_Beam_Base_C_GetBarrelWorldLocation) == 0x000028, "Wrong size on TASK_Beam_Base_C_GetBarrelWorldLocation");
static_assert(offsetof(TASK_Beam_Base_C_GetBarrelWorldLocation, BarrelLocation) == 0x000000, "Member 'TASK_Beam_Base_C_GetBarrelWorldLocation::BarrelLocation' has a wrong offset!");
static_assert(offsetof(TASK_Beam_Base_C_GetBarrelWorldLocation, K2Node_DynamicCast_AsPAWN_Mobile_Laser) == 0x000010, "Member 'TASK_Beam_Base_C_GetBarrelWorldLocation::K2Node_DynamicCast_AsPAWN_Mobile_Laser' has a wrong offset!");
static_assert(offsetof(TASK_Beam_Base_C_GetBarrelWorldLocation, K2Node_DynamicCast_bSuccess) == 0x000018, "Member 'TASK_Beam_Base_C_GetBarrelWorldLocation::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(TASK_Beam_Base_C_GetBarrelWorldLocation, CallFunc_GetProxyBarrelWorldLocation_ProxyBarrelLocation) == 0x00001C, "Member 'TASK_Beam_Base_C_GetBarrelWorldLocation::CallFunc_GetProxyBarrelWorldLocation_ProxyBarrelLocation' has a wrong offset!");

// Function TASK_Beam_Base.TASK_Beam_Base_C.GetLocalForwardDirection
// 0x000C (0x000C - 0x0000)
struct TASK_Beam_Base_C_GetLocalForwardDirection final
{
public:
	struct FVector                                ForwardDirection;                                  // 0x0000(0x000C)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(TASK_Beam_Base_C_GetLocalForwardDirection) == 0x000004, "Wrong alignment on TASK_Beam_Base_C_GetLocalForwardDirection");
static_assert(sizeof(TASK_Beam_Base_C_GetLocalForwardDirection) == 0x00000C, "Wrong size on TASK_Beam_Base_C_GetLocalForwardDirection");
static_assert(offsetof(TASK_Beam_Base_C_GetLocalForwardDirection, ForwardDirection) == 0x000000, "Member 'TASK_Beam_Base_C_GetLocalForwardDirection::ForwardDirection' has a wrong offset!");

// Function TASK_Beam_Base.TASK_Beam_Base_C.GetLocalRightDirection
// 0x000C (0x000C - 0x0000)
struct TASK_Beam_Base_C_GetLocalRightDirection final
{
public:
	struct FVector                                RightDirection;                                    // 0x0000(0x000C)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(TASK_Beam_Base_C_GetLocalRightDirection) == 0x000004, "Wrong alignment on TASK_Beam_Base_C_GetLocalRightDirection");
static_assert(sizeof(TASK_Beam_Base_C_GetLocalRightDirection) == 0x00000C, "Wrong size on TASK_Beam_Base_C_GetLocalRightDirection");
static_assert(offsetof(TASK_Beam_Base_C_GetLocalRightDirection, RightDirection) == 0x000000, "Member 'TASK_Beam_Base_C_GetLocalRightDirection::RightDirection' has a wrong offset!");

// Function TASK_Beam_Base.TASK_Beam_Base_C.GetLocalUpDirection
// 0x000C (0x000C - 0x0000)
struct TASK_Beam_Base_C_GetLocalUpDirection final
{
public:
	struct FVector                                UpDirection;                                       // 0x0000(0x000C)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(TASK_Beam_Base_C_GetLocalUpDirection) == 0x000004, "Wrong alignment on TASK_Beam_Base_C_GetLocalUpDirection");
static_assert(sizeof(TASK_Beam_Base_C_GetLocalUpDirection) == 0x00000C, "Wrong size on TASK_Beam_Base_C_GetLocalUpDirection");
static_assert(offsetof(TASK_Beam_Base_C_GetLocalUpDirection, UpDirection) == 0x000000, "Member 'TASK_Beam_Base_C_GetLocalUpDirection::UpDirection' has a wrong offset!");

// Function TASK_Beam_Base.TASK_Beam_Base_C.DrawDirectionFromBarrel
// 0x0060 (0x0060 - 0x0000)
struct TASK_Beam_Base_C_DrawDirectionFromBarrel final
{
public:
	struct FVector                                Direction;                                         // 0x0000(0x000C)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           LineColor;                                         // 0x000C(0x0010)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Duration;                                          // 0x001C(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          LocalSpace;                                        // 0x0020(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_21[0x3];                                       // 0x0021(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                CallFunc_LocalDirectionToWorldDirection_WorldDirection; // 0x0024(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_SelectVector_ReturnValue;                 // 0x0030(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Multiply_VectorFloat_ReturnValue;         // 0x003C(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_GetBarrelWorldLocation_BarrelLocation;    // 0x0048(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Add_VectorVector_ReturnValue;             // 0x0054(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(TASK_Beam_Base_C_DrawDirectionFromBarrel) == 0x000004, "Wrong alignment on TASK_Beam_Base_C_DrawDirectionFromBarrel");
static_assert(sizeof(TASK_Beam_Base_C_DrawDirectionFromBarrel) == 0x000060, "Wrong size on TASK_Beam_Base_C_DrawDirectionFromBarrel");
static_assert(offsetof(TASK_Beam_Base_C_DrawDirectionFromBarrel, Direction) == 0x000000, "Member 'TASK_Beam_Base_C_DrawDirectionFromBarrel::Direction' has a wrong offset!");
static_assert(offsetof(TASK_Beam_Base_C_DrawDirectionFromBarrel, LineColor) == 0x00000C, "Member 'TASK_Beam_Base_C_DrawDirectionFromBarrel::LineColor' has a wrong offset!");
static_assert(offsetof(TASK_Beam_Base_C_DrawDirectionFromBarrel, Duration) == 0x00001C, "Member 'TASK_Beam_Base_C_DrawDirectionFromBarrel::Duration' has a wrong offset!");
static_assert(offsetof(TASK_Beam_Base_C_DrawDirectionFromBarrel, LocalSpace) == 0x000020, "Member 'TASK_Beam_Base_C_DrawDirectionFromBarrel::LocalSpace' has a wrong offset!");
static_assert(offsetof(TASK_Beam_Base_C_DrawDirectionFromBarrel, CallFunc_LocalDirectionToWorldDirection_WorldDirection) == 0x000024, "Member 'TASK_Beam_Base_C_DrawDirectionFromBarrel::CallFunc_LocalDirectionToWorldDirection_WorldDirection' has a wrong offset!");
static_assert(offsetof(TASK_Beam_Base_C_DrawDirectionFromBarrel, CallFunc_SelectVector_ReturnValue) == 0x000030, "Member 'TASK_Beam_Base_C_DrawDirectionFromBarrel::CallFunc_SelectVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(TASK_Beam_Base_C_DrawDirectionFromBarrel, CallFunc_Multiply_VectorFloat_ReturnValue) == 0x00003C, "Member 'TASK_Beam_Base_C_DrawDirectionFromBarrel::CallFunc_Multiply_VectorFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(TASK_Beam_Base_C_DrawDirectionFromBarrel, CallFunc_GetBarrelWorldLocation_BarrelLocation) == 0x000048, "Member 'TASK_Beam_Base_C_DrawDirectionFromBarrel::CallFunc_GetBarrelWorldLocation_BarrelLocation' has a wrong offset!");
static_assert(offsetof(TASK_Beam_Base_C_DrawDirectionFromBarrel, CallFunc_Add_VectorVector_ReturnValue) == 0x000054, "Member 'TASK_Beam_Base_C_DrawDirectionFromBarrel::CallFunc_Add_VectorVector_ReturnValue' has a wrong offset!");

// Function TASK_Beam_Base.TASK_Beam_Base_C.LocalDirectionToWorldDirection
// 0x0090 (0x0090 - 0x0000)
struct TASK_Beam_Base_C_LocalDirectionToWorldDirection final
{
public:
	struct FVector                                LocalDirection;                                    // 0x0000(0x000C)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                WorldDirection;                                    // 0x000C(0x000C)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_GetForwardVector_ReturnValue;             // 0x0018(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_GetUpVector_ReturnValue;                  // 0x0024(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_GetRightVector_ReturnValue;               // 0x0030(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               CallFunc_MakeRotationFromAxes_ReturnValue;         // 0x003C(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_48[0x8];                                       // 0x0048(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTransform                             CallFunc_MakeTransform_ReturnValue;                // 0x0050(0x0030)(IsPlainOldData, NoDestructor)
	struct FVector                                CallFunc_TransformDirection_ReturnValue;           // 0x0080(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(TASK_Beam_Base_C_LocalDirectionToWorldDirection) == 0x000010, "Wrong alignment on TASK_Beam_Base_C_LocalDirectionToWorldDirection");
static_assert(sizeof(TASK_Beam_Base_C_LocalDirectionToWorldDirection) == 0x000090, "Wrong size on TASK_Beam_Base_C_LocalDirectionToWorldDirection");
static_assert(offsetof(TASK_Beam_Base_C_LocalDirectionToWorldDirection, LocalDirection) == 0x000000, "Member 'TASK_Beam_Base_C_LocalDirectionToWorldDirection::LocalDirection' has a wrong offset!");
static_assert(offsetof(TASK_Beam_Base_C_LocalDirectionToWorldDirection, WorldDirection) == 0x00000C, "Member 'TASK_Beam_Base_C_LocalDirectionToWorldDirection::WorldDirection' has a wrong offset!");
static_assert(offsetof(TASK_Beam_Base_C_LocalDirectionToWorldDirection, CallFunc_GetForwardVector_ReturnValue) == 0x000018, "Member 'TASK_Beam_Base_C_LocalDirectionToWorldDirection::CallFunc_GetForwardVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(TASK_Beam_Base_C_LocalDirectionToWorldDirection, CallFunc_GetUpVector_ReturnValue) == 0x000024, "Member 'TASK_Beam_Base_C_LocalDirectionToWorldDirection::CallFunc_GetUpVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(TASK_Beam_Base_C_LocalDirectionToWorldDirection, CallFunc_GetRightVector_ReturnValue) == 0x000030, "Member 'TASK_Beam_Base_C_LocalDirectionToWorldDirection::CallFunc_GetRightVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(TASK_Beam_Base_C_LocalDirectionToWorldDirection, CallFunc_MakeRotationFromAxes_ReturnValue) == 0x00003C, "Member 'TASK_Beam_Base_C_LocalDirectionToWorldDirection::CallFunc_MakeRotationFromAxes_ReturnValue' has a wrong offset!");
static_assert(offsetof(TASK_Beam_Base_C_LocalDirectionToWorldDirection, CallFunc_MakeTransform_ReturnValue) == 0x000050, "Member 'TASK_Beam_Base_C_LocalDirectionToWorldDirection::CallFunc_MakeTransform_ReturnValue' has a wrong offset!");
static_assert(offsetof(TASK_Beam_Base_C_LocalDirectionToWorldDirection, CallFunc_TransformDirection_ReturnValue) == 0x000080, "Member 'TASK_Beam_Base_C_LocalDirectionToWorldDirection::CallFunc_TransformDirection_ReturnValue' has a wrong offset!");

// Function TASK_Beam_Base.TASK_Beam_Base_C.WorldDirectionToLocalDirection
// 0x0090 (0x0090 - 0x0000)
struct TASK_Beam_Base_C_WorldDirectionToLocalDirection final
{
public:
	struct FVector                                WorldDirection;                                    // 0x0000(0x000C)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                LocalDirection;                                    // 0x000C(0x000C)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_GetForwardVector_ReturnValue;             // 0x0018(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_GetUpVector_ReturnValue;                  // 0x0024(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_GetRightVector_ReturnValue;               // 0x0030(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               CallFunc_MakeRotationFromAxes_ReturnValue;         // 0x003C(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_48[0x8];                                       // 0x0048(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTransform                             CallFunc_MakeTransform_ReturnValue;                // 0x0050(0x0030)(IsPlainOldData, NoDestructor)
	struct FVector                                CallFunc_InverseTransformDirection_ReturnValue;    // 0x0080(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(TASK_Beam_Base_C_WorldDirectionToLocalDirection) == 0x000010, "Wrong alignment on TASK_Beam_Base_C_WorldDirectionToLocalDirection");
static_assert(sizeof(TASK_Beam_Base_C_WorldDirectionToLocalDirection) == 0x000090, "Wrong size on TASK_Beam_Base_C_WorldDirectionToLocalDirection");
static_assert(offsetof(TASK_Beam_Base_C_WorldDirectionToLocalDirection, WorldDirection) == 0x000000, "Member 'TASK_Beam_Base_C_WorldDirectionToLocalDirection::WorldDirection' has a wrong offset!");
static_assert(offsetof(TASK_Beam_Base_C_WorldDirectionToLocalDirection, LocalDirection) == 0x00000C, "Member 'TASK_Beam_Base_C_WorldDirectionToLocalDirection::LocalDirection' has a wrong offset!");
static_assert(offsetof(TASK_Beam_Base_C_WorldDirectionToLocalDirection, CallFunc_GetForwardVector_ReturnValue) == 0x000018, "Member 'TASK_Beam_Base_C_WorldDirectionToLocalDirection::CallFunc_GetForwardVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(TASK_Beam_Base_C_WorldDirectionToLocalDirection, CallFunc_GetUpVector_ReturnValue) == 0x000024, "Member 'TASK_Beam_Base_C_WorldDirectionToLocalDirection::CallFunc_GetUpVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(TASK_Beam_Base_C_WorldDirectionToLocalDirection, CallFunc_GetRightVector_ReturnValue) == 0x000030, "Member 'TASK_Beam_Base_C_WorldDirectionToLocalDirection::CallFunc_GetRightVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(TASK_Beam_Base_C_WorldDirectionToLocalDirection, CallFunc_MakeRotationFromAxes_ReturnValue) == 0x00003C, "Member 'TASK_Beam_Base_C_WorldDirectionToLocalDirection::CallFunc_MakeRotationFromAxes_ReturnValue' has a wrong offset!");
static_assert(offsetof(TASK_Beam_Base_C_WorldDirectionToLocalDirection, CallFunc_MakeTransform_ReturnValue) == 0x000050, "Member 'TASK_Beam_Base_C_WorldDirectionToLocalDirection::CallFunc_MakeTransform_ReturnValue' has a wrong offset!");
static_assert(offsetof(TASK_Beam_Base_C_WorldDirectionToLocalDirection, CallFunc_InverseTransformDirection_ReturnValue) == 0x000080, "Member 'TASK_Beam_Base_C_WorldDirectionToLocalDirection::CallFunc_InverseTransformDirection_ReturnValue' has a wrong offset!");

// Function TASK_Beam_Base.TASK_Beam_Base_C.ClampDirection
// 0x00A0 (0x00A0 - 0x0000)
struct TASK_Beam_Base_C_ClampDirection final
{
public:
	struct FVector                                LocalDirection;                                    // 0x0000(0x000C)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                ClampedLocalDirection;                             // 0x000C(0x000C)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CrossProduct;                                      // 0x0018(0x000C)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         AngleToTarget;                                     // 0x0024(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                MaxDirection;                                      // 0x0028(0x000C)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_GetLocalForwardDirection_ForwardDirection; // 0x0034(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_VectorVector_ReturnValue;      // 0x0040(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_41[0x3];                                       // 0x0041(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                CallFunc_GetLocalForwardDirection_ForwardDirection_1; // 0x0044(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_GetLocalForwardDirection_ForwardDirection_2; // 0x0050(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Cross_VectorVector_ReturnValue;           // 0x005C(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Normal_ReturnValue;                       // 0x0068(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Greater_FloatFloat_ReturnValue;           // 0x0074(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_75[0x3];                                       // 0x0075(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_SelectFloat_ReturnValue;                  // 0x0078(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_RotateAngleAxis_ReturnValue;              // 0x007C(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Abs_ReturnValue;                          // 0x0088(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Greater_FloatFloat_ReturnValue_1;         // 0x008C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_8D[0x3];                                       // 0x008D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                CallFunc_GetLocalForwardDirection_ForwardDirection_3; // 0x0090(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_SignedAngleBetweenOnPlane_ReturnValue;    // 0x009C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(TASK_Beam_Base_C_ClampDirection) == 0x000004, "Wrong alignment on TASK_Beam_Base_C_ClampDirection");
static_assert(sizeof(TASK_Beam_Base_C_ClampDirection) == 0x0000A0, "Wrong size on TASK_Beam_Base_C_ClampDirection");
static_assert(offsetof(TASK_Beam_Base_C_ClampDirection, LocalDirection) == 0x000000, "Member 'TASK_Beam_Base_C_ClampDirection::LocalDirection' has a wrong offset!");
static_assert(offsetof(TASK_Beam_Base_C_ClampDirection, ClampedLocalDirection) == 0x00000C, "Member 'TASK_Beam_Base_C_ClampDirection::ClampedLocalDirection' has a wrong offset!");
static_assert(offsetof(TASK_Beam_Base_C_ClampDirection, CrossProduct) == 0x000018, "Member 'TASK_Beam_Base_C_ClampDirection::CrossProduct' has a wrong offset!");
static_assert(offsetof(TASK_Beam_Base_C_ClampDirection, AngleToTarget) == 0x000024, "Member 'TASK_Beam_Base_C_ClampDirection::AngleToTarget' has a wrong offset!");
static_assert(offsetof(TASK_Beam_Base_C_ClampDirection, MaxDirection) == 0x000028, "Member 'TASK_Beam_Base_C_ClampDirection::MaxDirection' has a wrong offset!");
static_assert(offsetof(TASK_Beam_Base_C_ClampDirection, CallFunc_GetLocalForwardDirection_ForwardDirection) == 0x000034, "Member 'TASK_Beam_Base_C_ClampDirection::CallFunc_GetLocalForwardDirection_ForwardDirection' has a wrong offset!");
static_assert(offsetof(TASK_Beam_Base_C_ClampDirection, CallFunc_EqualEqual_VectorVector_ReturnValue) == 0x000040, "Member 'TASK_Beam_Base_C_ClampDirection::CallFunc_EqualEqual_VectorVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(TASK_Beam_Base_C_ClampDirection, CallFunc_GetLocalForwardDirection_ForwardDirection_1) == 0x000044, "Member 'TASK_Beam_Base_C_ClampDirection::CallFunc_GetLocalForwardDirection_ForwardDirection_1' has a wrong offset!");
static_assert(offsetof(TASK_Beam_Base_C_ClampDirection, CallFunc_GetLocalForwardDirection_ForwardDirection_2) == 0x000050, "Member 'TASK_Beam_Base_C_ClampDirection::CallFunc_GetLocalForwardDirection_ForwardDirection_2' has a wrong offset!");
static_assert(offsetof(TASK_Beam_Base_C_ClampDirection, CallFunc_Cross_VectorVector_ReturnValue) == 0x00005C, "Member 'TASK_Beam_Base_C_ClampDirection::CallFunc_Cross_VectorVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(TASK_Beam_Base_C_ClampDirection, CallFunc_Normal_ReturnValue) == 0x000068, "Member 'TASK_Beam_Base_C_ClampDirection::CallFunc_Normal_ReturnValue' has a wrong offset!");
static_assert(offsetof(TASK_Beam_Base_C_ClampDirection, CallFunc_Greater_FloatFloat_ReturnValue) == 0x000074, "Member 'TASK_Beam_Base_C_ClampDirection::CallFunc_Greater_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(TASK_Beam_Base_C_ClampDirection, CallFunc_SelectFloat_ReturnValue) == 0x000078, "Member 'TASK_Beam_Base_C_ClampDirection::CallFunc_SelectFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(TASK_Beam_Base_C_ClampDirection, CallFunc_RotateAngleAxis_ReturnValue) == 0x00007C, "Member 'TASK_Beam_Base_C_ClampDirection::CallFunc_RotateAngleAxis_ReturnValue' has a wrong offset!");
static_assert(offsetof(TASK_Beam_Base_C_ClampDirection, CallFunc_Abs_ReturnValue) == 0x000088, "Member 'TASK_Beam_Base_C_ClampDirection::CallFunc_Abs_ReturnValue' has a wrong offset!");
static_assert(offsetof(TASK_Beam_Base_C_ClampDirection, CallFunc_Greater_FloatFloat_ReturnValue_1) == 0x00008C, "Member 'TASK_Beam_Base_C_ClampDirection::CallFunc_Greater_FloatFloat_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(TASK_Beam_Base_C_ClampDirection, CallFunc_GetLocalForwardDirection_ForwardDirection_3) == 0x000090, "Member 'TASK_Beam_Base_C_ClampDirection::CallFunc_GetLocalForwardDirection_ForwardDirection_3' has a wrong offset!");
static_assert(offsetof(TASK_Beam_Base_C_ClampDirection, CallFunc_SignedAngleBetweenOnPlane_ReturnValue) == 0x00009C, "Member 'TASK_Beam_Base_C_ClampDirection::CallFunc_SignedAngleBetweenOnPlane_ReturnValue' has a wrong offset!");

// Function TASK_Beam_Base.TASK_Beam_Base_C.GetCurrentLocalAimDirection
// 0x0048 (0x0048 - 0x0000)
struct TASK_Beam_Base_C_GetCurrentLocalAimDirection final
{
public:
	struct FVector                                LocalDirection;                                    // 0x0000(0x000C)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_GetBarrelWorldLocation_BarrelLocation;    // 0x000C(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Get_Target_Location_Location;             // 0x0018(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Subtract_VectorVector_ReturnValue;        // 0x0024(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Normal_ReturnValue;                       // 0x0030(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_WorldDirectionToLocalDirection_LocalDirection; // 0x003C(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(TASK_Beam_Base_C_GetCurrentLocalAimDirection) == 0x000004, "Wrong alignment on TASK_Beam_Base_C_GetCurrentLocalAimDirection");
static_assert(sizeof(TASK_Beam_Base_C_GetCurrentLocalAimDirection) == 0x000048, "Wrong size on TASK_Beam_Base_C_GetCurrentLocalAimDirection");
static_assert(offsetof(TASK_Beam_Base_C_GetCurrentLocalAimDirection, LocalDirection) == 0x000000, "Member 'TASK_Beam_Base_C_GetCurrentLocalAimDirection::LocalDirection' has a wrong offset!");
static_assert(offsetof(TASK_Beam_Base_C_GetCurrentLocalAimDirection, CallFunc_GetBarrelWorldLocation_BarrelLocation) == 0x00000C, "Member 'TASK_Beam_Base_C_GetCurrentLocalAimDirection::CallFunc_GetBarrelWorldLocation_BarrelLocation' has a wrong offset!");
static_assert(offsetof(TASK_Beam_Base_C_GetCurrentLocalAimDirection, CallFunc_Get_Target_Location_Location) == 0x000018, "Member 'TASK_Beam_Base_C_GetCurrentLocalAimDirection::CallFunc_Get_Target_Location_Location' has a wrong offset!");
static_assert(offsetof(TASK_Beam_Base_C_GetCurrentLocalAimDirection, CallFunc_Subtract_VectorVector_ReturnValue) == 0x000024, "Member 'TASK_Beam_Base_C_GetCurrentLocalAimDirection::CallFunc_Subtract_VectorVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(TASK_Beam_Base_C_GetCurrentLocalAimDirection, CallFunc_Normal_ReturnValue) == 0x000030, "Member 'TASK_Beam_Base_C_GetCurrentLocalAimDirection::CallFunc_Normal_ReturnValue' has a wrong offset!");
static_assert(offsetof(TASK_Beam_Base_C_GetCurrentLocalAimDirection, CallFunc_WorldDirectionToLocalDirection_LocalDirection) == 0x00003C, "Member 'TASK_Beam_Base_C_GetCurrentLocalAimDirection::CallFunc_WorldDirectionToLocalDirection_LocalDirection' has a wrong offset!");

// Function TASK_Beam_Base.TASK_Beam_Base_C.SetBeamPower
// 0x0028 (0x0028 - 0x0000)
struct TASK_Beam_Base_C_SetBeamPower final
{
public:
	float                                         NormalizedValue;                                   // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Array_Index_Variable;                     // 0x0004(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Loop_Counter_Variable;                    // 0x0008(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue;                   // 0x000C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UNiagaraComponent*                      CallFunc_Array_Get_Item;                           // 0x0010(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Greater_FloatFloat_ReturnValue;           // 0x0018(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_19[0x3];                                       // 0x0019(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Array_Length_ReturnValue;                 // 0x001C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue;                  // 0x0020(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(TASK_Beam_Base_C_SetBeamPower) == 0x000008, "Wrong alignment on TASK_Beam_Base_C_SetBeamPower");
static_assert(sizeof(TASK_Beam_Base_C_SetBeamPower) == 0x000028, "Wrong size on TASK_Beam_Base_C_SetBeamPower");
static_assert(offsetof(TASK_Beam_Base_C_SetBeamPower, NormalizedValue) == 0x000000, "Member 'TASK_Beam_Base_C_SetBeamPower::NormalizedValue' has a wrong offset!");
static_assert(offsetof(TASK_Beam_Base_C_SetBeamPower, Temp_int_Array_Index_Variable) == 0x000004, "Member 'TASK_Beam_Base_C_SetBeamPower::Temp_int_Array_Index_Variable' has a wrong offset!");
static_assert(offsetof(TASK_Beam_Base_C_SetBeamPower, Temp_int_Loop_Counter_Variable) == 0x000008, "Member 'TASK_Beam_Base_C_SetBeamPower::Temp_int_Loop_Counter_Variable' has a wrong offset!");
static_assert(offsetof(TASK_Beam_Base_C_SetBeamPower, CallFunc_Add_IntInt_ReturnValue) == 0x00000C, "Member 'TASK_Beam_Base_C_SetBeamPower::CallFunc_Add_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(TASK_Beam_Base_C_SetBeamPower, CallFunc_Array_Get_Item) == 0x000010, "Member 'TASK_Beam_Base_C_SetBeamPower::CallFunc_Array_Get_Item' has a wrong offset!");
static_assert(offsetof(TASK_Beam_Base_C_SetBeamPower, CallFunc_Greater_FloatFloat_ReturnValue) == 0x000018, "Member 'TASK_Beam_Base_C_SetBeamPower::CallFunc_Greater_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(TASK_Beam_Base_C_SetBeamPower, CallFunc_Array_Length_ReturnValue) == 0x00001C, "Member 'TASK_Beam_Base_C_SetBeamPower::CallFunc_Array_Length_ReturnValue' has a wrong offset!");
static_assert(offsetof(TASK_Beam_Base_C_SetBeamPower, CallFunc_Less_IntInt_ReturnValue) == 0x000020, "Member 'TASK_Beam_Base_C_SetBeamPower::CallFunc_Less_IntInt_ReturnValue' has a wrong offset!");

// Function TASK_Beam_Base.TASK_Beam_Base_C.SetFlairScale
// 0x0030 (0x0030 - 0x0000)
struct TASK_Beam_Base_C_SetFlairScale final
{
public:
	float                                         NormalizedValue;                                   // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector2D                              CallFunc_Multiply_Vector2DFloat_ReturnValue;       // 0x0004(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Array_Index_Variable;                     // 0x000C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Loop_Counter_Variable;                    // 0x0010(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue;                   // 0x0014(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Length_ReturnValue;                 // 0x0018(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1C[0x4];                                       // 0x001C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UNiagaraComponent*                      CallFunc_Array_Get_Item;                           // 0x0020(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue;                  // 0x0028(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(TASK_Beam_Base_C_SetFlairScale) == 0x000008, "Wrong alignment on TASK_Beam_Base_C_SetFlairScale");
static_assert(sizeof(TASK_Beam_Base_C_SetFlairScale) == 0x000030, "Wrong size on TASK_Beam_Base_C_SetFlairScale");
static_assert(offsetof(TASK_Beam_Base_C_SetFlairScale, NormalizedValue) == 0x000000, "Member 'TASK_Beam_Base_C_SetFlairScale::NormalizedValue' has a wrong offset!");
static_assert(offsetof(TASK_Beam_Base_C_SetFlairScale, CallFunc_Multiply_Vector2DFloat_ReturnValue) == 0x000004, "Member 'TASK_Beam_Base_C_SetFlairScale::CallFunc_Multiply_Vector2DFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(TASK_Beam_Base_C_SetFlairScale, Temp_int_Array_Index_Variable) == 0x00000C, "Member 'TASK_Beam_Base_C_SetFlairScale::Temp_int_Array_Index_Variable' has a wrong offset!");
static_assert(offsetof(TASK_Beam_Base_C_SetFlairScale, Temp_int_Loop_Counter_Variable) == 0x000010, "Member 'TASK_Beam_Base_C_SetFlairScale::Temp_int_Loop_Counter_Variable' has a wrong offset!");
static_assert(offsetof(TASK_Beam_Base_C_SetFlairScale, CallFunc_Add_IntInt_ReturnValue) == 0x000014, "Member 'TASK_Beam_Base_C_SetFlairScale::CallFunc_Add_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(TASK_Beam_Base_C_SetFlairScale, CallFunc_Array_Length_ReturnValue) == 0x000018, "Member 'TASK_Beam_Base_C_SetFlairScale::CallFunc_Array_Length_ReturnValue' has a wrong offset!");
static_assert(offsetof(TASK_Beam_Base_C_SetFlairScale, CallFunc_Array_Get_Item) == 0x000020, "Member 'TASK_Beam_Base_C_SetFlairScale::CallFunc_Array_Get_Item' has a wrong offset!");
static_assert(offsetof(TASK_Beam_Base_C_SetFlairScale, CallFunc_Less_IntInt_ReturnValue) == 0x000028, "Member 'TASK_Beam_Base_C_SetFlairScale::CallFunc_Less_IntInt_ReturnValue' has a wrong offset!");

// Function TASK_Beam_Base.TASK_Beam_Base_C.SetBeamDamageActive
// 0x0002 (0x0002 - 0x0000)
struct TASK_Beam_Base_C_SetBeamDamageActive final
{
public:
	bool                                          IsDamageActive;                                    // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_NotEqual_BoolBool_ReturnValue;            // 0x0001(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(TASK_Beam_Base_C_SetBeamDamageActive) == 0x000001, "Wrong alignment on TASK_Beam_Base_C_SetBeamDamageActive");
static_assert(sizeof(TASK_Beam_Base_C_SetBeamDamageActive) == 0x000002, "Wrong size on TASK_Beam_Base_C_SetBeamDamageActive");
static_assert(offsetof(TASK_Beam_Base_C_SetBeamDamageActive, IsDamageActive) == 0x000000, "Member 'TASK_Beam_Base_C_SetBeamDamageActive::IsDamageActive' has a wrong offset!");
static_assert(offsetof(TASK_Beam_Base_C_SetBeamDamageActive, CallFunc_NotEqual_BoolBool_ReturnValue) == 0x000001, "Member 'TASK_Beam_Base_C_SetBeamDamageActive::CallFunc_NotEqual_BoolBool_ReturnValue' has a wrong offset!");

// Function TASK_Beam_Base.TASK_Beam_Base_C.UpdateBeamTurningOn
// 0x0040 (0x0040 - 0x0000)
struct TASK_Beam_Base_C_UpdateBeamTurningOn final
{
public:
	float                                         DeltaSeconds;                                      // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Progress;                                          // 0x0004(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         FlairScale;                                        // 0x0008(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         BeamPower;                                         // 0x000C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CurrentProgress;                                   // 0x0010(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0014(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsValid_ReturnValue_1;                    // 0x0015(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_16[0x2];                                       // 0x0016(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_Multiply_FloatFloat_ReturnValue;          // 0x0018(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Multiply_FloatFloat_ReturnValue_1;        // 0x001C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_GetFloatValue_ReturnValue;                // 0x0020(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_GetFloatValue_ReturnValue_1;              // 0x0024(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Divide_FloatFloat_ReturnValue;            // 0x0028(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Divide_FloatFloat_ReturnValue_1;          // 0x002C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_GetPlayTimeInSeconds_ReturnValue;         // 0x0030(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Subtract_FloatFloat_ReturnValue;          // 0x0034(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Divide_FloatFloat_ReturnValue_2;          // 0x0038(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_FClamp_ReturnValue;                       // 0x003C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(TASK_Beam_Base_C_UpdateBeamTurningOn) == 0x000004, "Wrong alignment on TASK_Beam_Base_C_UpdateBeamTurningOn");
static_assert(sizeof(TASK_Beam_Base_C_UpdateBeamTurningOn) == 0x000040, "Wrong size on TASK_Beam_Base_C_UpdateBeamTurningOn");
static_assert(offsetof(TASK_Beam_Base_C_UpdateBeamTurningOn, DeltaSeconds) == 0x000000, "Member 'TASK_Beam_Base_C_UpdateBeamTurningOn::DeltaSeconds' has a wrong offset!");
static_assert(offsetof(TASK_Beam_Base_C_UpdateBeamTurningOn, Progress) == 0x000004, "Member 'TASK_Beam_Base_C_UpdateBeamTurningOn::Progress' has a wrong offset!");
static_assert(offsetof(TASK_Beam_Base_C_UpdateBeamTurningOn, FlairScale) == 0x000008, "Member 'TASK_Beam_Base_C_UpdateBeamTurningOn::FlairScale' has a wrong offset!");
static_assert(offsetof(TASK_Beam_Base_C_UpdateBeamTurningOn, BeamPower) == 0x00000C, "Member 'TASK_Beam_Base_C_UpdateBeamTurningOn::BeamPower' has a wrong offset!");
static_assert(offsetof(TASK_Beam_Base_C_UpdateBeamTurningOn, CurrentProgress) == 0x000010, "Member 'TASK_Beam_Base_C_UpdateBeamTurningOn::CurrentProgress' has a wrong offset!");
static_assert(offsetof(TASK_Beam_Base_C_UpdateBeamTurningOn, CallFunc_IsValid_ReturnValue) == 0x000014, "Member 'TASK_Beam_Base_C_UpdateBeamTurningOn::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(TASK_Beam_Base_C_UpdateBeamTurningOn, CallFunc_IsValid_ReturnValue_1) == 0x000015, "Member 'TASK_Beam_Base_C_UpdateBeamTurningOn::CallFunc_IsValid_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(TASK_Beam_Base_C_UpdateBeamTurningOn, CallFunc_Multiply_FloatFloat_ReturnValue) == 0x000018, "Member 'TASK_Beam_Base_C_UpdateBeamTurningOn::CallFunc_Multiply_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(TASK_Beam_Base_C_UpdateBeamTurningOn, CallFunc_Multiply_FloatFloat_ReturnValue_1) == 0x00001C, "Member 'TASK_Beam_Base_C_UpdateBeamTurningOn::CallFunc_Multiply_FloatFloat_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(TASK_Beam_Base_C_UpdateBeamTurningOn, CallFunc_GetFloatValue_ReturnValue) == 0x000020, "Member 'TASK_Beam_Base_C_UpdateBeamTurningOn::CallFunc_GetFloatValue_ReturnValue' has a wrong offset!");
static_assert(offsetof(TASK_Beam_Base_C_UpdateBeamTurningOn, CallFunc_GetFloatValue_ReturnValue_1) == 0x000024, "Member 'TASK_Beam_Base_C_UpdateBeamTurningOn::CallFunc_GetFloatValue_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(TASK_Beam_Base_C_UpdateBeamTurningOn, CallFunc_Divide_FloatFloat_ReturnValue) == 0x000028, "Member 'TASK_Beam_Base_C_UpdateBeamTurningOn::CallFunc_Divide_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(TASK_Beam_Base_C_UpdateBeamTurningOn, CallFunc_Divide_FloatFloat_ReturnValue_1) == 0x00002C, "Member 'TASK_Beam_Base_C_UpdateBeamTurningOn::CallFunc_Divide_FloatFloat_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(TASK_Beam_Base_C_UpdateBeamTurningOn, CallFunc_GetPlayTimeInSeconds_ReturnValue) == 0x000030, "Member 'TASK_Beam_Base_C_UpdateBeamTurningOn::CallFunc_GetPlayTimeInSeconds_ReturnValue' has a wrong offset!");
static_assert(offsetof(TASK_Beam_Base_C_UpdateBeamTurningOn, CallFunc_Subtract_FloatFloat_ReturnValue) == 0x000034, "Member 'TASK_Beam_Base_C_UpdateBeamTurningOn::CallFunc_Subtract_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(TASK_Beam_Base_C_UpdateBeamTurningOn, CallFunc_Divide_FloatFloat_ReturnValue_2) == 0x000038, "Member 'TASK_Beam_Base_C_UpdateBeamTurningOn::CallFunc_Divide_FloatFloat_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(TASK_Beam_Base_C_UpdateBeamTurningOn, CallFunc_FClamp_ReturnValue) == 0x00003C, "Member 'TASK_Beam_Base_C_UpdateBeamTurningOn::CallFunc_FClamp_ReturnValue' has a wrong offset!");

// Function TASK_Beam_Base.TASK_Beam_Base_C.UpdateBeamOn
// 0x0004 (0x0004 - 0x0000)
struct TASK_Beam_Base_C_UpdateBeamOn final
{
public:
	float                                         DeltaSeconds;                                      // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(TASK_Beam_Base_C_UpdateBeamOn) == 0x000004, "Wrong alignment on TASK_Beam_Base_C_UpdateBeamOn");
static_assert(sizeof(TASK_Beam_Base_C_UpdateBeamOn) == 0x000004, "Wrong size on TASK_Beam_Base_C_UpdateBeamOn");
static_assert(offsetof(TASK_Beam_Base_C_UpdateBeamOn, DeltaSeconds) == 0x000000, "Member 'TASK_Beam_Base_C_UpdateBeamOn::DeltaSeconds' has a wrong offset!");

// Function TASK_Beam_Base.TASK_Beam_Base_C.UpdateBeamTurningOff
// 0x004C (0x004C - 0x0000)
struct TASK_Beam_Base_C_UpdateBeamTurningOff final
{
public:
	float                                         DeltaSeconds;                                      // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Progress;                                          // 0x0004(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         FlairScale;                                        // 0x0008(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         BeamPower;                                         // 0x000C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CurrentProgress;                                   // 0x0010(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Subtract_FloatFloat_ReturnValue;          // 0x0014(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0018(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_19[0x3];                                       // 0x0019(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_Subtract_FloatFloat_ReturnValue_1;        // 0x001C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue_1;                    // 0x0020(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_GreaterEqual_FloatFloat_ReturnValue;      // 0x0021(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_22[0x2];                                       // 0x0022(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_Multiply_FloatFloat_ReturnValue;          // 0x0024(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Multiply_FloatFloat_ReturnValue_1;        // 0x0028(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_GetFloatValue_ReturnValue;                // 0x002C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_GetFloatValue_ReturnValue_1;              // 0x0030(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Divide_FloatFloat_ReturnValue;            // 0x0034(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Divide_FloatFloat_ReturnValue_1;          // 0x0038(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_GetPlayTimeInSeconds_ReturnValue;         // 0x003C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Subtract_FloatFloat_ReturnValue_2;        // 0x0040(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Divide_FloatFloat_ReturnValue_2;          // 0x0044(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_FClamp_ReturnValue;                       // 0x0048(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(TASK_Beam_Base_C_UpdateBeamTurningOff) == 0x000004, "Wrong alignment on TASK_Beam_Base_C_UpdateBeamTurningOff");
static_assert(sizeof(TASK_Beam_Base_C_UpdateBeamTurningOff) == 0x00004C, "Wrong size on TASK_Beam_Base_C_UpdateBeamTurningOff");
static_assert(offsetof(TASK_Beam_Base_C_UpdateBeamTurningOff, DeltaSeconds) == 0x000000, "Member 'TASK_Beam_Base_C_UpdateBeamTurningOff::DeltaSeconds' has a wrong offset!");
static_assert(offsetof(TASK_Beam_Base_C_UpdateBeamTurningOff, Progress) == 0x000004, "Member 'TASK_Beam_Base_C_UpdateBeamTurningOff::Progress' has a wrong offset!");
static_assert(offsetof(TASK_Beam_Base_C_UpdateBeamTurningOff, FlairScale) == 0x000008, "Member 'TASK_Beam_Base_C_UpdateBeamTurningOff::FlairScale' has a wrong offset!");
static_assert(offsetof(TASK_Beam_Base_C_UpdateBeamTurningOff, BeamPower) == 0x00000C, "Member 'TASK_Beam_Base_C_UpdateBeamTurningOff::BeamPower' has a wrong offset!");
static_assert(offsetof(TASK_Beam_Base_C_UpdateBeamTurningOff, CurrentProgress) == 0x000010, "Member 'TASK_Beam_Base_C_UpdateBeamTurningOff::CurrentProgress' has a wrong offset!");
static_assert(offsetof(TASK_Beam_Base_C_UpdateBeamTurningOff, CallFunc_Subtract_FloatFloat_ReturnValue) == 0x000014, "Member 'TASK_Beam_Base_C_UpdateBeamTurningOff::CallFunc_Subtract_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(TASK_Beam_Base_C_UpdateBeamTurningOff, CallFunc_IsValid_ReturnValue) == 0x000018, "Member 'TASK_Beam_Base_C_UpdateBeamTurningOff::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(TASK_Beam_Base_C_UpdateBeamTurningOff, CallFunc_Subtract_FloatFloat_ReturnValue_1) == 0x00001C, "Member 'TASK_Beam_Base_C_UpdateBeamTurningOff::CallFunc_Subtract_FloatFloat_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(TASK_Beam_Base_C_UpdateBeamTurningOff, CallFunc_IsValid_ReturnValue_1) == 0x000020, "Member 'TASK_Beam_Base_C_UpdateBeamTurningOff::CallFunc_IsValid_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(TASK_Beam_Base_C_UpdateBeamTurningOff, CallFunc_GreaterEqual_FloatFloat_ReturnValue) == 0x000021, "Member 'TASK_Beam_Base_C_UpdateBeamTurningOff::CallFunc_GreaterEqual_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(TASK_Beam_Base_C_UpdateBeamTurningOff, CallFunc_Multiply_FloatFloat_ReturnValue) == 0x000024, "Member 'TASK_Beam_Base_C_UpdateBeamTurningOff::CallFunc_Multiply_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(TASK_Beam_Base_C_UpdateBeamTurningOff, CallFunc_Multiply_FloatFloat_ReturnValue_1) == 0x000028, "Member 'TASK_Beam_Base_C_UpdateBeamTurningOff::CallFunc_Multiply_FloatFloat_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(TASK_Beam_Base_C_UpdateBeamTurningOff, CallFunc_GetFloatValue_ReturnValue) == 0x00002C, "Member 'TASK_Beam_Base_C_UpdateBeamTurningOff::CallFunc_GetFloatValue_ReturnValue' has a wrong offset!");
static_assert(offsetof(TASK_Beam_Base_C_UpdateBeamTurningOff, CallFunc_GetFloatValue_ReturnValue_1) == 0x000030, "Member 'TASK_Beam_Base_C_UpdateBeamTurningOff::CallFunc_GetFloatValue_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(TASK_Beam_Base_C_UpdateBeamTurningOff, CallFunc_Divide_FloatFloat_ReturnValue) == 0x000034, "Member 'TASK_Beam_Base_C_UpdateBeamTurningOff::CallFunc_Divide_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(TASK_Beam_Base_C_UpdateBeamTurningOff, CallFunc_Divide_FloatFloat_ReturnValue_1) == 0x000038, "Member 'TASK_Beam_Base_C_UpdateBeamTurningOff::CallFunc_Divide_FloatFloat_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(TASK_Beam_Base_C_UpdateBeamTurningOff, CallFunc_GetPlayTimeInSeconds_ReturnValue) == 0x00003C, "Member 'TASK_Beam_Base_C_UpdateBeamTurningOff::CallFunc_GetPlayTimeInSeconds_ReturnValue' has a wrong offset!");
static_assert(offsetof(TASK_Beam_Base_C_UpdateBeamTurningOff, CallFunc_Subtract_FloatFloat_ReturnValue_2) == 0x000040, "Member 'TASK_Beam_Base_C_UpdateBeamTurningOff::CallFunc_Subtract_FloatFloat_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(TASK_Beam_Base_C_UpdateBeamTurningOff, CallFunc_Divide_FloatFloat_ReturnValue_2) == 0x000044, "Member 'TASK_Beam_Base_C_UpdateBeamTurningOff::CallFunc_Divide_FloatFloat_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(TASK_Beam_Base_C_UpdateBeamTurningOff, CallFunc_FClamp_ReturnValue) == 0x000048, "Member 'TASK_Beam_Base_C_UpdateBeamTurningOff::CallFunc_FClamp_ReturnValue' has a wrong offset!");

// Function TASK_Beam_Base.TASK_Beam_Base_C.SetBeamState
// 0x000C (0x000C - 0x0000)
struct TASK_Beam_Base_C_SetBeamState final
{
public:
	ENUM_MobileLaser_BeamState                    State;                                             // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_GetPlayTimeInSeconds_ReturnValue;         // 0x0004(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_SwitchEnum_CmpSuccess;                      // 0x0008(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_NotEqual_ByteByte_ReturnValue;            // 0x0009(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(TASK_Beam_Base_C_SetBeamState) == 0x000004, "Wrong alignment on TASK_Beam_Base_C_SetBeamState");
static_assert(sizeof(TASK_Beam_Base_C_SetBeamState) == 0x00000C, "Wrong size on TASK_Beam_Base_C_SetBeamState");
static_assert(offsetof(TASK_Beam_Base_C_SetBeamState, State) == 0x000000, "Member 'TASK_Beam_Base_C_SetBeamState::State' has a wrong offset!");
static_assert(offsetof(TASK_Beam_Base_C_SetBeamState, CallFunc_GetPlayTimeInSeconds_ReturnValue) == 0x000004, "Member 'TASK_Beam_Base_C_SetBeamState::CallFunc_GetPlayTimeInSeconds_ReturnValue' has a wrong offset!");
static_assert(offsetof(TASK_Beam_Base_C_SetBeamState, K2Node_SwitchEnum_CmpSuccess) == 0x000008, "Member 'TASK_Beam_Base_C_SetBeamState::K2Node_SwitchEnum_CmpSuccess' has a wrong offset!");
static_assert(offsetof(TASK_Beam_Base_C_SetBeamState, CallFunc_NotEqual_ByteByte_ReturnValue) == 0x000009, "Member 'TASK_Beam_Base_C_SetBeamState::CallFunc_NotEqual_ByteByte_ReturnValue' has a wrong offset!");

// Function TASK_Beam_Base.TASK_Beam_Base_C.OnBeamSpawned
// 0x0008 (0x0008 - 0x0000)
struct TASK_Beam_Base_C_OnBeamSpawned final
{
public:
	class UNiagaraComponent*                      NiagaraComponent;                                  // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(TASK_Beam_Base_C_OnBeamSpawned) == 0x000008, "Wrong alignment on TASK_Beam_Base_C_OnBeamSpawned");
static_assert(sizeof(TASK_Beam_Base_C_OnBeamSpawned) == 0x000008, "Wrong size on TASK_Beam_Base_C_OnBeamSpawned");
static_assert(offsetof(TASK_Beam_Base_C_OnBeamSpawned, NiagaraComponent) == 0x000000, "Member 'TASK_Beam_Base_C_OnBeamSpawned::NiagaraComponent' has a wrong offset!");

// Function TASK_Beam_Base.TASK_Beam_Base_C.GetBeamAimDirection
// 0x0060 (0x0060 - 0x0000)
struct TASK_Beam_Base_C_GetBeamAimDirection final
{
public:
	class FName                                   BeamSocket;                                        // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                BeamAimDirection;                                  // 0x0008(0x000C)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_GetLocalForwardDirection_ForwardDirection; // 0x0014(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FTransform                             CallFunc_GetSocketTransform_ReturnValue;           // 0x0020(0x0030)(IsPlainOldData, NoDestructor)
	struct FVector                                CallFunc_TransformDirection_ReturnValue;           // 0x0050(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(TASK_Beam_Base_C_GetBeamAimDirection) == 0x000010, "Wrong alignment on TASK_Beam_Base_C_GetBeamAimDirection");
static_assert(sizeof(TASK_Beam_Base_C_GetBeamAimDirection) == 0x000060, "Wrong size on TASK_Beam_Base_C_GetBeamAimDirection");
static_assert(offsetof(TASK_Beam_Base_C_GetBeamAimDirection, BeamSocket) == 0x000000, "Member 'TASK_Beam_Base_C_GetBeamAimDirection::BeamSocket' has a wrong offset!");
static_assert(offsetof(TASK_Beam_Base_C_GetBeamAimDirection, BeamAimDirection) == 0x000008, "Member 'TASK_Beam_Base_C_GetBeamAimDirection::BeamAimDirection' has a wrong offset!");
static_assert(offsetof(TASK_Beam_Base_C_GetBeamAimDirection, CallFunc_GetLocalForwardDirection_ForwardDirection) == 0x000014, "Member 'TASK_Beam_Base_C_GetBeamAimDirection::CallFunc_GetLocalForwardDirection_ForwardDirection' has a wrong offset!");
static_assert(offsetof(TASK_Beam_Base_C_GetBeamAimDirection, CallFunc_GetSocketTransform_ReturnValue) == 0x000020, "Member 'TASK_Beam_Base_C_GetBeamAimDirection::CallFunc_GetSocketTransform_ReturnValue' has a wrong offset!");
static_assert(offsetof(TASK_Beam_Base_C_GetBeamAimDirection, CallFunc_TransformDirection_ReturnValue) == 0x000050, "Member 'TASK_Beam_Base_C_GetBeamAimDirection::CallFunc_TransformDirection_ReturnValue' has a wrong offset!");

}

