#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: INTERF_ANIM_EnergyWeapon

#include "Basic.hpp"

#include "INTERF_ANIM_EnergyWeapon_classes.hpp"
#include "INTERF_ANIM_EnergyWeapon_parameters.hpp"


namespace SDK
{

// Function INTERF_ANIM_EnergyWeapon.INTERF_ANIM_EnergyWeapon_C.SetChargeMode
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// int32                                   ModeIndex                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    Result                                                 (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void IINTERF_ANIM_EnergyWeapon_C::SetChargeMode(int32 ModeIndex, bool* Result)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("INTERF_ANIM_EnergyWeapon_C", "SetChargeMode");

	Params::INTERF_ANIM_EnergyWeapon_C_SetChargeMode Parms{};

	Parms.ModeIndex = ModeIndex;

	UObject::ProcessEvent(Func, &Parms);

	if (Result != nullptr)
		*Result = Parms.Result;
}


// Function INTERF_ANIM_EnergyWeapon.INTERF_ANIM_EnergyWeapon_C.SetChargeValue
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// float                                   NormalisedChargeValue                                  (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    Result                                                 (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void IINTERF_ANIM_EnergyWeapon_C::SetChargeValue(float NormalisedChargeValue, bool* Result)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("INTERF_ANIM_EnergyWeapon_C", "SetChargeValue");

	Params::INTERF_ANIM_EnergyWeapon_C_SetChargeValue Parms{};

	Parms.NormalisedChargeValue = NormalisedChargeValue;

	UObject::ProcessEvent(Func, &Parms);

	if (Result != nullptr)
		*Result = Parms.Result;
}


// Function INTERF_ANIM_EnergyWeapon.INTERF_ANIM_EnergyWeapon_C.SetTimeSinceFired
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// float                                   TimeSinceFired                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    Result                                                 (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void IINTERF_ANIM_EnergyWeapon_C::SetTimeSinceFired(float TimeSinceFired, bool* Result)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("INTERF_ANIM_EnergyWeapon_C", "SetTimeSinceFired");

	Params::INTERF_ANIM_EnergyWeapon_C_SetTimeSinceFired Parms{};

	Parms.TimeSinceFired = TimeSinceFired;

	UObject::ProcessEvent(Func, &Parms);

	if (Result != nullptr)
		*Result = Parms.Result;
}


// Function INTERF_ANIM_EnergyWeapon.INTERF_ANIM_EnergyWeapon_C.SetHeatPercentage
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// float                                   HeatPercentage                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    Result                                                 (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void IINTERF_ANIM_EnergyWeapon_C::SetHeatPercentage(float HeatPercentage, bool* Result)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("INTERF_ANIM_EnergyWeapon_C", "SetHeatPercentage");

	Params::INTERF_ANIM_EnergyWeapon_C_SetHeatPercentage Parms{};

	Parms.HeatPercentage = HeatPercentage;

	UObject::ProcessEvent(Func, &Parms);

	if (Result != nullptr)
		*Result = Parms.Result;
}

}

