#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: SystemReShock

#include "Basic.hpp"

#include "SystemReShock_classes.hpp"
#include "SystemReShock_parameters.hpp"


namespace SDK
{

// Function SystemReShock.PerspectiveMeshWidget.ConvertToDynamicMaterialInstance
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// int32                                   MaterialIndex                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UMaterialInstanceDynamic*         ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UMaterialInstanceDynamic* UPerspectiveMeshWidget::ConvertToDynamicMaterialInstance(int32 MaterialIndex)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("PerspectiveMeshWidget", "ConvertToDynamicMaterialInstance");

	Params::PerspectiveMeshWidget_ConvertToDynamicMaterialInstance Parms{};

	Parms.MaterialIndex = MaterialIndex;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function SystemReShock.PerspectiveMeshWidget.ForceRebuildMesh
// (Final, Native, Public, BlueprintCallable)

void UPerspectiveMeshWidget::ForceRebuildMesh()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("PerspectiveMeshWidget", "ForceRebuildMesh");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function SystemReShock.PerspectiveMeshWidget.SetMaterial
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// int32                                   MaterialIndex                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UMaterialInterface*               Material                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UPerspectiveMeshWidget::SetMaterial(int32 MaterialIndex, class UMaterialInterface* Material)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("PerspectiveMeshWidget", "SetMaterial");

	Params::PerspectiveMeshWidget_SetMaterial Parms{};

	Parms.MaterialIndex = MaterialIndex;
	Parms.Material = Material;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function SystemReShock.PerspectiveMeshWidget.SetSurfaceBlendAmount
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// float                                   Amount                                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UPerspectiveMeshWidget::SetSurfaceBlendAmount(float Amount)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("PerspectiveMeshWidget", "SetSurfaceBlendAmount");

	Params::PerspectiveMeshWidget_SetSurfaceBlendAmount Parms{};

	Parms.Amount = Amount;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function SystemReShock.PerspectiveMeshWidget.SetVertexColors
// (Native, Public, HasOutParams, HasDefaults, BlueprintCallable)
// Parameters:
// struct FColor                           NewColor                                               (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UPerspectiveMeshWidget::SetVertexColors(const struct FColor& NewColor)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("PerspectiveMeshWidget", "SetVertexColors");

	Params::PerspectiveMeshWidget_SetVertexColors Parms{};

	Parms.NewColor = std::move(NewColor);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function SystemReShock.PerspectiveMeshWidget.GetMaterial
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// int32                                   MaterialIndex                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UMaterialInterface*               ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UMaterialInterface* UPerspectiveMeshWidget::GetMaterial(int32 MaterialIndex) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("PerspectiveMeshWidget", "GetMaterial");

	Params::PerspectiveMeshWidget_GetMaterial Parms{};

	Parms.MaterialIndex = MaterialIndex;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function SystemReShock.PerspectiveMeshWidget.GetNearestTriangleIndexToWindowPoint
// (Final, Native, Public, HasOutParams, HasDefaults, BlueprintCallable, Const)
// Parameters:
// int32                                   SubMeshIndex                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector2D                        WindowPoint                                            (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector                          OutBarycentricCoords                                   (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   OutDistance                                            (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

int32 UPerspectiveMeshWidget::GetNearestTriangleIndexToWindowPoint(int32 SubMeshIndex, const struct FVector2D& WindowPoint, struct FVector* OutBarycentricCoords, float* OutDistance) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("PerspectiveMeshWidget", "GetNearestTriangleIndexToWindowPoint");

	Params::PerspectiveMeshWidget_GetNearestTriangleIndexToWindowPoint Parms{};

	Parms.SubMeshIndex = SubMeshIndex;
	Parms.WindowPoint = std::move(WindowPoint);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (OutBarycentricCoords != nullptr)
		*OutBarycentricCoords = std::move(Parms.OutBarycentricCoords);

	if (OutDistance != nullptr)
		*OutDistance = Parms.OutDistance;

	return Parms.ReturnValue;
}


// Function SystemReShock.PerspectiveMeshWidget.GetNearestTriangleIndexToWindowPointForAnyMesh
// (Final, Native, Public, HasOutParams, HasDefaults, BlueprintCallable, Const)
// Parameters:
// struct FVector2D                        WindowPoint                                            (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   OutSubMeshIndex                                        (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector                          OutBarycentricCoords                                   (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   OutDistance                                            (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

int32 UPerspectiveMeshWidget::GetNearestTriangleIndexToWindowPointForAnyMesh(const struct FVector2D& WindowPoint, int32* OutSubMeshIndex, struct FVector* OutBarycentricCoords, float* OutDistance) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("PerspectiveMeshWidget", "GetNearestTriangleIndexToWindowPointForAnyMesh");

	Params::PerspectiveMeshWidget_GetNearestTriangleIndexToWindowPointForAnyMesh Parms{};

	Parms.WindowPoint = std::move(WindowPoint);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (OutSubMeshIndex != nullptr)
		*OutSubMeshIndex = Parms.OutSubMeshIndex;

	if (OutBarycentricCoords != nullptr)
		*OutBarycentricCoords = std::move(Parms.OutBarycentricCoords);

	if (OutDistance != nullptr)
		*OutDistance = Parms.OutDistance;

	return Parms.ReturnValue;
}


// Function SystemReShock.PerspectiveMeshWidget.GetProjectedWindowBounds
// (Final, Native, Public, HasDefaults, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// const struct FBox2D                     ReturnValue                                            (ConstParm, Parm, OutParm, ZeroConstructor, ReturnParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)

const struct FBox2D UPerspectiveMeshWidget::GetProjectedWindowBounds() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("PerspectiveMeshWidget", "GetProjectedWindowBounds");

	Params::PerspectiveMeshWidget_GetProjectedWindowBounds Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function SystemReShock.PerspectiveMeshWidget.GetSubmeshCount
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// int32                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

int32 UPerspectiveMeshWidget::GetSubmeshCount() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("PerspectiveMeshWidget", "GetSubmeshCount");

	Params::PerspectiveMeshWidget_GetSubmeshCount Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function SystemReShock.PerspectiveMeshWidget.GetSurfaceBlendAmount
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

float UPerspectiveMeshWidget::GetSurfaceBlendAmount() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("PerspectiveMeshWidget", "GetSurfaceBlendAmount");

	Params::PerspectiveMeshWidget_GetSurfaceBlendAmount Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function SystemReShock.PerspectiveMeshWidget.GetTextureCoordinatesForTrianglePoint
// (Final, Native, Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// int32                                   SubMeshIndex                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   TriangleIndex                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   TexCoordIndex                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector                          BarycentricCoords                                      (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector2D                        ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

struct FVector2D UPerspectiveMeshWidget::GetTextureCoordinatesForTrianglePoint(int32 SubMeshIndex, int32 TriangleIndex, int32 TexCoordIndex, const struct FVector& BarycentricCoords) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("PerspectiveMeshWidget", "GetTextureCoordinatesForTrianglePoint");

	Params::PerspectiveMeshWidget_GetTextureCoordinatesForTrianglePoint Parms{};

	Parms.SubMeshIndex = SubMeshIndex;
	Parms.TriangleIndex = TriangleIndex;
	Parms.TexCoordIndex = TexCoordIndex;
	Parms.BarycentricCoords = std::move(BarycentricCoords);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function SystemReShock.PerspectiveMeshWidget.GetTriangleIndexAtWindowPoint
// (Final, Native, Public, HasOutParams, HasDefaults, BlueprintCallable, Const)
// Parameters:
// int32                                   SubMeshIndex                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector2D                        WindowPoint                                            (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector                          OutBarycentricCoords                                   (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

int32 UPerspectiveMeshWidget::GetTriangleIndexAtWindowPoint(int32 SubMeshIndex, const struct FVector2D& WindowPoint, struct FVector* OutBarycentricCoords) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("PerspectiveMeshWidget", "GetTriangleIndexAtWindowPoint");

	Params::PerspectiveMeshWidget_GetTriangleIndexAtWindowPoint Parms{};

	Parms.SubMeshIndex = SubMeshIndex;
	Parms.WindowPoint = std::move(WindowPoint);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (OutBarycentricCoords != nullptr)
		*OutBarycentricCoords = std::move(Parms.OutBarycentricCoords);

	return Parms.ReturnValue;
}


// Function SystemReShock.PerspectiveMeshWidget.GetTriangleIndexAtWindowPointForAnyMesh
// (Final, Native, Public, HasOutParams, HasDefaults, BlueprintCallable, Const)
// Parameters:
// struct FVector2D                        WindowPoint                                            (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   OutSubMeshIndex                                        (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector                          OutBarycentricCoords                                   (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

int32 UPerspectiveMeshWidget::GetTriangleIndexAtWindowPointForAnyMesh(const struct FVector2D& WindowPoint, int32* OutSubMeshIndex, struct FVector* OutBarycentricCoords) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("PerspectiveMeshWidget", "GetTriangleIndexAtWindowPointForAnyMesh");

	Params::PerspectiveMeshWidget_GetTriangleIndexAtWindowPointForAnyMesh Parms{};

	Parms.WindowPoint = std::move(WindowPoint);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (OutSubMeshIndex != nullptr)
		*OutSubMeshIndex = Parms.OutSubMeshIndex;

	if (OutBarycentricCoords != nullptr)
		*OutBarycentricCoords = std::move(Parms.OutBarycentricCoords);

	return Parms.ReturnValue;
}


// Function SystemReShock.PerspectiveMeshWidget.GetUnprojectedTrianglePoint
// (Final, Native, Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// int32                                   SubMeshIndex                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   TriangleIndex                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector                          BarycentricCoords                                      (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector2D                        ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

struct FVector2D UPerspectiveMeshWidget::GetUnprojectedTrianglePoint(int32 SubMeshIndex, int32 TriangleIndex, const struct FVector& BarycentricCoords) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("PerspectiveMeshWidget", "GetUnprojectedTrianglePoint");

	Params::PerspectiveMeshWidget_GetUnprojectedTrianglePoint Parms{};

	Parms.SubMeshIndex = SubMeshIndex;
	Parms.TriangleIndex = TriangleIndex;
	Parms.BarycentricCoords = std::move(BarycentricCoords);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function SystemReShock.PerspectiveMeshWidget.GetWidgetOffsetFromWindowPoint
// (Final, Native, Public, HasOutParams, HasDefaults, BlueprintCallable, Const)
// Parameters:
// struct FVector2D                        WindowPoint                                            (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector2D                        WidgetOffset                                           (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bFromCenter                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bNearest                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UPerspectiveMeshWidget::GetWidgetOffsetFromWindowPoint(const struct FVector2D& WindowPoint, struct FVector2D* WidgetOffset, bool bFromCenter, bool bNearest) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("PerspectiveMeshWidget", "GetWidgetOffsetFromWindowPoint");

	Params::PerspectiveMeshWidget_GetWidgetOffsetFromWindowPoint Parms{};

	Parms.WindowPoint = std::move(WindowPoint);
	Parms.bFromCenter = bFromCenter;
	Parms.bNearest = bNearest;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (WidgetOffset != nullptr)
		*WidgetOffset = std::move(Parms.WidgetOffset);

	return Parms.ReturnValue;
}


// Function SystemReShock.PerspectiveMeshWidget.GetWindowPointFromScreenPoint
// (Final, Native, Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// struct FVector2D                        ScreenPoint                                            (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector2D                        ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

struct FVector2D UPerspectiveMeshWidget::GetWindowPointFromScreenPoint(const struct FVector2D& ScreenPoint) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("PerspectiveMeshWidget", "GetWindowPointFromScreenPoint");

	Params::PerspectiveMeshWidget_GetWindowPointFromScreenPoint Parms{};

	Parms.ScreenPoint = std::move(ScreenPoint);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function SystemReShock.GridMeshWidget.ConvertBorderToDynamicMaterialInstance
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// class UMaterialInstanceDynamic*         OutCornerMaterial                                      (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UMaterialInstanceDynamic*         ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UMaterialInstanceDynamic* UGridMeshWidget::ConvertBorderToDynamicMaterialInstance(class UMaterialInstanceDynamic** OutCornerMaterial)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GridMeshWidget", "ConvertBorderToDynamicMaterialInstance");

	Params::GridMeshWidget_ConvertBorderToDynamicMaterialInstance Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (OutCornerMaterial != nullptr)
		*OutCornerMaterial = Parms.OutCornerMaterial;

	return Parms.ReturnValue;
}


// Function SystemReShock.GridMeshWidget.SetBorderColor
// (Final, Native, Public, HasOutParams, HasDefaults, BlueprintCallable)
// Parameters:
// struct FColor                           Color_0                                                (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGridMeshWidget::SetBorderColor(const struct FColor& Color_0)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GridMeshWidget", "SetBorderColor");

	Params::GridMeshWidget_SetBorderColor Parms{};

	Parms.Color_0 = std::move(Color_0);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function SystemReShock.GridMeshWidget.SetCellSize
// (Final, Native, Public, HasOutParams, HasDefaults, BlueprintCallable)
// Parameters:
// struct FIntPoint                        InCellSize                                             (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGridMeshWidget::SetCellSize(const struct FIntPoint& InCellSize)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GridMeshWidget", "SetCellSize");

	Params::GridMeshWidget_SetCellSize Parms{};

	Parms.InCellSize = std::move(InCellSize);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function SystemReShock.GridMeshWidget.SetCellUVDimensions
// (Final, Native, Public, HasOutParams, HasDefaults, BlueprintCallable)
// Parameters:
// struct FVector2D                        InCellUVDimensions                                     (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGridMeshWidget::SetCellUVDimensions(const struct FVector2D& InCellUVDimensions)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GridMeshWidget", "SetCellUVDimensions");

	Params::GridMeshWidget_SetCellUVDimensions Parms{};

	Parms.InCellUVDimensions = std::move(InCellUVDimensions);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function SystemReShock.GridMeshWidget.SetColor
// (Final, Native, Public, HasOutParams, HasDefaults, BlueprintCallable)
// Parameters:
// struct FColor                           Color_0                                                (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGridMeshWidget::SetColor(const struct FColor& Color_0)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GridMeshWidget", "SetColor");

	Params::GridMeshWidget_SetColor Parms{};

	Parms.Color_0 = std::move(Color_0);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function SystemReShock.GridMeshWidget.SetFlipVerticalLayout
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// bool                                    bInFlipVerticalLayout                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGridMeshWidget::SetFlipVerticalLayout(bool bInFlipVerticalLayout)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GridMeshWidget", "SetFlipVerticalLayout");

	Params::GridMeshWidget_SetFlipVerticalLayout Parms{};

	Parms.bInFlipVerticalLayout = bInFlipVerticalLayout;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function SystemReShock.GridMeshWidget.SetGridSize
// (Final, Native, Public, HasOutParams, HasDefaults, BlueprintCallable)
// Parameters:
// struct FIntPoint                        GridSize                                               (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGridMeshWidget::SetGridSize(const struct FIntPoint& GridSize)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GridMeshWidget", "SetGridSize");

	Params::GridMeshWidget_SetGridSize Parms{};

	Parms.GridSize = std::move(GridSize);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function SystemReShock.GridMeshWidget.GetBorderSize
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// int32                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

int32 UGridMeshWidget::GetBorderSize() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GridMeshWidget", "GetBorderSize");

	Params::GridMeshWidget_GetBorderSize Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function SystemReShock.GridMeshWidget.GetDoubleBorderSize
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// int32                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

int32 UGridMeshWidget::GetDoubleBorderSize() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GridMeshWidget", "GetDoubleBorderSize");

	Params::GridMeshWidget_GetDoubleBorderSize Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function SystemReShock.GridMeshWidget.GetGridCoordinatesFromWindowPoint
// (Final, Native, Public, HasOutParams, HasDefaults, BlueprintCallable, Const)
// Parameters:
// struct FVector2D                        WindowPoint                                            (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector2D                        CursorGridOffset                                       (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FIntPoint                        GridCoords                                             (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UGridMeshWidget::GetGridCoordinatesFromWindowPoint(const struct FVector2D& WindowPoint, const struct FVector2D& CursorGridOffset, struct FIntPoint* GridCoords) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GridMeshWidget", "GetGridCoordinatesFromWindowPoint");

	Params::GridMeshWidget_GetGridCoordinatesFromWindowPoint Parms{};

	Parms.WindowPoint = std::move(WindowPoint);
	Parms.CursorGridOffset = std::move(CursorGridOffset);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (GridCoords != nullptr)
		*GridCoords = std::move(Parms.GridCoords);

	return Parms.ReturnValue;
}


// Function SystemReShock.GridMeshWidget.GetProjectedCellLocationFromGridCoordinates
// (Final, Native, Public, HasOutParams, HasDefaults, BlueprintCallable, Const)
// Parameters:
// struct FIntPoint                        GridCoords                                             (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector2D                        CursorGridOffset                                       (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector2D                        OutProjectedLocation                                   (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UGridMeshWidget::GetProjectedCellLocationFromGridCoordinates(const struct FIntPoint& GridCoords, const struct FVector2D& CursorGridOffset, struct FVector2D* OutProjectedLocation) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GridMeshWidget", "GetProjectedCellLocationFromGridCoordinates");

	Params::GridMeshWidget_GetProjectedCellLocationFromGridCoordinates Parms{};

	Parms.GridCoords = std::move(GridCoords);
	Parms.CursorGridOffset = std::move(CursorGridOffset);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (OutProjectedLocation != nullptr)
		*OutProjectedLocation = std::move(Parms.OutProjectedLocation);

	return Parms.ReturnValue;
}


// Function SystemReShock.GridMeshWidget.GetWidgetOffsetFromGridCoordinates
// (Final, Native, Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// struct FIntPoint                        GridCoords                                             (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector2D                        ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

struct FVector2D UGridMeshWidget::GetWidgetOffsetFromGridCoordinates(const struct FIntPoint& GridCoords) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GridMeshWidget", "GetWidgetOffsetFromGridCoordinates");

	Params::GridMeshWidget_GetWidgetOffsetFromGridCoordinates Parms{};

	Parms.GridCoords = std::move(GridCoords);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function SystemReShock.GridMeshWidget.GetWidgetSizeFromGridSize
// (Final, Native, Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// struct FIntPoint                        GridSize                                               (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector2D                        ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

struct FVector2D UGridMeshWidget::GetWidgetSizeFromGridSize(const struct FIntPoint& GridSize) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GridMeshWidget", "GetWidgetSizeFromGridSize");

	Params::GridMeshWidget_GetWidgetSizeFromGridSize Parms{};

	Parms.GridSize = std::move(GridSize);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function SystemReShock.LifeSimulation.OnActivateCell
// (Event, Protected, HasOutParams, BlueprintEvent)
// Parameters:
// struct FVoxelWallLocation               WallLocation                                           (ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UPrimitiveComponent*              PrimitiveComponent                                     (Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool ULifeSimulation::OnActivateCell(const struct FVoxelWallLocation& WallLocation, class UPrimitiveComponent* PrimitiveComponent)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("LifeSimulation", "OnActivateCell");

	Params::LifeSimulation_OnActivateCell Parms{};

	Parms.WallLocation = std::move(WallLocation);
	Parms.PrimitiveComponent = PrimitiveComponent;

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function SystemReShock.LifeSimulation.OnDeactivateCell
// (Event, Protected, HasOutParams, BlueprintEvent)
// Parameters:
// struct FVoxelWallLocation               WallLocation                                           (ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UPrimitiveComponent*              PrimitiveComponent                                     (Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool ULifeSimulation::OnDeactivateCell(const struct FVoxelWallLocation& WallLocation, class UPrimitiveComponent* PrimitiveComponent)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("LifeSimulation", "OnDeactivateCell");

	Params::LifeSimulation_OnDeactivateCell Parms{};

	Parms.WallLocation = std::move(WallLocation);
	Parms.PrimitiveComponent = PrimitiveComponent;

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function SystemReShock.LifeSimulation.ResetSimulation
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class UBatchedLevelVoxelization*        InBatchedLevelVoxelization                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class ULevelVoxelizationData*           InCurrentLevelData                                     (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bDeactivateCells                                       (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ULifeSimulation::ResetSimulation(class UBatchedLevelVoxelization* InBatchedLevelVoxelization, class ULevelVoxelizationData* InCurrentLevelData, bool bDeactivateCells)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("LifeSimulation", "ResetSimulation");

	Params::LifeSimulation_ResetSimulation Parms{};

	Parms.InBatchedLevelVoxelization = InBatchedLevelVoxelization;
	Parms.InCurrentLevelData = InCurrentLevelData;
	Parms.bDeactivateCells = bDeactivateCells;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function SystemReShock.LifeSimulation.TryActivateCellAtLocation
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// struct FVoxelWallLocation               WallLocation                                           (ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   MinLifetime                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool ULifeSimulation::TryActivateCellAtLocation(const struct FVoxelWallLocation& WallLocation, float MinLifetime)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("LifeSimulation", "TryActivateCellAtLocation");

	Params::LifeSimulation_TryActivateCellAtLocation Parms{};

	Parms.WallLocation = std::move(WallLocation);
	Parms.MinLifetime = MinLifetime;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function SystemReShock.LifeSimulation.UpdateSimulation
// (Final, Native, Public, HasDefaults, BlueprintCallable)
// Parameters:
// struct FIntVector                       ObserverLocation                                       (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   DeltaSeconds                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ULifeSimulation::UpdateSimulation(const struct FIntVector& ObserverLocation, float DeltaSeconds)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("LifeSimulation", "UpdateSimulation");

	Params::LifeSimulation_UpdateSimulation Parms{};

	Parms.ObserverLocation = std::move(ObserverLocation);
	Parms.DeltaSeconds = DeltaSeconds;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function SystemReShock.LifeSimulation.GetCellLifetimeRemaining
// (Final, Native, Public, HasOutParams, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// struct FVoxelWallLocation               WallLocation                                           (ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

float ULifeSimulation::GetCellLifetimeRemaining(const struct FVoxelWallLocation& WallLocation) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("LifeSimulation", "GetCellLifetimeRemaining");

	Params::LifeSimulation_GetCellLifetimeRemaining Parms{};

	Parms.WallLocation = std::move(WallLocation);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function SystemReShock.LifeSimulation.GetCellLocationsWithNeighbors
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// TArray<struct FVoxelWallLocation>       ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)

TArray<struct FVoxelWallLocation> ULifeSimulation::GetCellLocationsWithNeighbors() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("LifeSimulation", "GetCellLocationsWithNeighbors");

	Params::LifeSimulation_GetCellLocationsWithNeighbors Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function SystemReShock.LifeSimulation.GetCellNeighborCount
// (Final, Native, Public, HasOutParams, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// struct FVoxelWallLocation               WallLocation                                           (ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

int32 ULifeSimulation::GetCellNeighborCount(const struct FVoxelWallLocation& WallLocation) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("LifeSimulation", "GetCellNeighborCount");

	Params::LifeSimulation_GetCellNeighborCount Parms{};

	Parms.WallLocation = std::move(WallLocation);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function SystemReShock.LifeSimulation.GetIslandWorldBoundingBoxes
// (Final, Native, Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class UBatchedLevelVoxelization*        BatchedLevelVoxelization                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector                          LevelOffset                                            (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bOnlyActiveIslands                                     (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TArray<struct FBox>                     ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)

TArray<struct FBox> ULifeSimulation::GetIslandWorldBoundingBoxes(class UBatchedLevelVoxelization* BatchedLevelVoxelization, const struct FVector& LevelOffset, bool bOnlyActiveIslands) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("LifeSimulation", "GetIslandWorldBoundingBoxes");

	Params::LifeSimulation_GetIslandWorldBoundingBoxes Parms{};

	Parms.BatchedLevelVoxelization = BatchedLevelVoxelization;
	Parms.LevelOffset = std::move(LevelOffset);
	Parms.bOnlyActiveIslands = bOnlyActiveIslands;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function SystemReShock.LifeSimulation.GetWallComponentByIndex
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// int32                                   ComponentIndex                                         (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UPrimitiveComponent*              ReturnValue                                            (ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UPrimitiveComponent* ULifeSimulation::GetWallComponentByIndex(int32 ComponentIndex) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("LifeSimulation", "GetWallComponentByIndex");

	Params::LifeSimulation_GetWallComponentByIndex Parms{};

	Parms.ComponentIndex = ComponentIndex;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function SystemReShock.LifeSimulation.IsCellActive
// (Final, Native, Public, HasOutParams, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// struct FVoxelWallLocation               WallLocation                                           (ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool ULifeSimulation::IsCellActive(const struct FVoxelWallLocation& WallLocation) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("LifeSimulation", "IsCellActive");

	Params::LifeSimulation_IsCellActive Parms{};

	Parms.WallLocation = std::move(WallLocation);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function SystemReShock.LifeSimulation.IsCellVisibleToObserver
// (Final, Native, Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// struct FIntVector                       CellLocation                                           (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool ULifeSimulation::IsCellVisibleToObserver(const struct FIntVector& CellLocation) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("LifeSimulation", "IsCellVisibleToObserver");

	Params::LifeSimulation_IsCellVisibleToObserver Parms{};

	Parms.CellLocation = std::move(CellLocation);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function SystemReShock.ActorAnimMessageInterface.ReceiveAnimationMessage
// (Native, Event, Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// EActorMessagePriority                   Priority                                               (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FString                           Message                                                (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool IActorAnimMessageInterface::ReceiveAnimationMessage(const EActorMessagePriority& Priority, const class FString& Message)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ActorAnimMessageInterface", "ReceiveAnimationMessage");

	Params::ActorAnimMessageInterface_ReceiveAnimationMessage Parms{};

	Parms.Priority = Priority;
	Parms.Message = std::move(Message);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function SystemReShock.CameraPanelWidget.ResetMouseStates
// (Final, Native, Public, BlueprintCallable)

void UCameraPanelWidget::ResetMouseStates()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CameraPanelWidget", "ResetMouseStates");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function SystemReShock.CameraPanelWidget.SetHorizontalSurfaceCurvature
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// float                                   Ratio                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UCameraPanelWidget::SetHorizontalSurfaceCurvature(float Ratio)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CameraPanelWidget", "SetHorizontalSurfaceCurvature");

	Params::CameraPanelWidget_SetHorizontalSurfaceCurvature Parms{};

	Parms.Ratio = Ratio;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function SystemReShock.CameraPanelWidget.SetVerticalSurfaceCurvature
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// float                                   Ratio                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UCameraPanelWidget::SetVerticalSurfaceCurvature(float Ratio)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CameraPanelWidget", "SetVerticalSurfaceCurvature");

	Params::CameraPanelWidget_SetVerticalSurfaceCurvature Parms{};

	Parms.Ratio = Ratio;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function SystemReShock.CameraPanelWidget.SetVirtualMouseScreenLocation
// (Final, Native, Public, HasOutParams, HasDefaults, BlueprintCallable)
// Parameters:
// struct FVector2D                        ScreenLocation                                         (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UCameraPanelWidget::SetVirtualMouseScreenLocation(const struct FVector2D& ScreenLocation)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CameraPanelWidget", "SetVirtualMouseScreenLocation");

	Params::CameraPanelWidget_SetVirtualMouseScreenLocation Parms{};

	Parms.ScreenLocation = std::move(ScreenLocation);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function SystemReShock.CameraPanelWidget.VirtualMouseButtonDown
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// struct FKey                             MouseButton                                            (Parm, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UCameraPanelWidget::VirtualMouseButtonDown(const struct FKey& MouseButton)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CameraPanelWidget", "VirtualMouseButtonDown");

	Params::CameraPanelWidget_VirtualMouseButtonDown Parms{};

	Parms.MouseButton = std::move(MouseButton);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function SystemReShock.CameraPanelWidget.VirtualMouseButtonUp
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// struct FKey                             MouseButton                                            (Parm, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UCameraPanelWidget::VirtualMouseButtonUp(const struct FKey& MouseButton)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CameraPanelWidget", "VirtualMouseButtonUp");

	Params::CameraPanelWidget_VirtualMouseButtonUp Parms{};

	Parms.MouseButton = std::move(MouseButton);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function SystemReShock.CameraPanelWidget.VirtualMouseDoubleClick
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// struct FKey                             MouseButton                                            (Parm, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UCameraPanelWidget::VirtualMouseDoubleClick(const struct FKey& MouseButton)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CameraPanelWidget", "VirtualMouseDoubleClick");

	Params::CameraPanelWidget_VirtualMouseDoubleClick Parms{};

	Parms.MouseButton = std::move(MouseButton);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function SystemReShock.CameraPanelWidget.GetVirtualMouseScreenLocation
// (Final, Native, Public, HasDefaults, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// struct FVector2D                        ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

struct FVector2D UCameraPanelWidget::GetVirtualMouseScreenLocation() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CameraPanelWidget", "GetVirtualMouseScreenLocation");

	Params::CameraPanelWidget_GetVirtualMouseScreenLocation Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function SystemReShock.CameraPanelWidget.GetVirtualMouseViewportLocation
// (Final, Native, Public, HasDefaults, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// struct FVector2D                        ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

struct FVector2D UCameraPanelWidget::GetVirtualMouseViewportLocation() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CameraPanelWidget", "GetVirtualMouseViewportLocation");

	Params::CameraPanelWidget_GetVirtualMouseViewportLocation Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function SystemReShock.CameraPanelWidget.ProjectScreenPoint
// (Final, Native, Public, HasOutParams, HasDefaults, BlueprintCallable, Const)
// Parameters:
// struct FVector2D                        ScreenPoint                                            (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector2D                        ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

struct FVector2D UCameraPanelWidget::ProjectScreenPoint(const struct FVector2D& ScreenPoint) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CameraPanelWidget", "ProjectScreenPoint");

	Params::CameraPanelWidget_ProjectScreenPoint Parms{};

	Parms.ScreenPoint = std::move(ScreenPoint);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function SystemReShock.CompassMeshWidget.SetCurrentYawAngle
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// float                                   NewAngle                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UCompassMeshWidget::SetCurrentYawAngle(float NewAngle)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CompassMeshWidget", "SetCurrentYawAngle");

	Params::CompassMeshWidget_SetCurrentYawAngle Parms{};

	Parms.NewAngle = NewAngle;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function SystemReShock.PerspectiveMeshSlot.SetPosition
// (Final, Native, Public, HasOutParams, HasDefaults, BlueprintCallable)
// Parameters:
// struct FVector2D                        InPosition                                             (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UPerspectiveMeshSlot::SetPosition(const struct FVector2D& InPosition)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("PerspectiveMeshSlot", "SetPosition");

	Params::PerspectiveMeshSlot_SetPosition Parms{};

	Parms.InPosition = std::move(InPosition);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function SystemReShock.PerspectiveMeshSlot.SetSize
// (Final, Native, Public, HasOutParams, HasDefaults, BlueprintCallable)
// Parameters:
// struct FVector2D                        InSize                                                 (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UPerspectiveMeshSlot::SetSize(const struct FVector2D& InSize)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("PerspectiveMeshSlot", "SetSize");

	Params::PerspectiveMeshSlot_SetSize Parms{};

	Parms.InSize = std::move(InSize);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function SystemReShock.ShockActivityFunctionLibrary.EndActivity
// (Final, Native, Static, Private, BlueprintCallable)
// Parameters:
// class UObject*                          WorldContextObject                                     (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FString                           ActivityId                                             (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// EShockActivityOutcome                   ActivityOutcome                                        (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UShockActivityFunctionLibrary::EndActivity(const class UObject* WorldContextObject, const class FString& ActivityId, EShockActivityOutcome ActivityOutcome)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("ShockActivityFunctionLibrary", "EndActivity");

	Params::ShockActivityFunctionLibrary_EndActivity Parms{};

	Parms.WorldContextObject = WorldContextObject;
	Parms.ActivityId = std::move(ActivityId);
	Parms.ActivityOutcome = ActivityOutcome;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function SystemReShock.ShockActivityFunctionLibrary.ResetActivities
// (Final, Native, Static, Private, BlueprintCallable)
// Parameters:
// class UObject*                          WorldContextObject                                     (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UShockActivityFunctionLibrary::ResetActivities(const class UObject* WorldContextObject)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("ShockActivityFunctionLibrary", "ResetActivities");

	Params::ShockActivityFunctionLibrary_ResetActivities Parms{};

	Parms.WorldContextObject = WorldContextObject;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function SystemReShock.ShockActivityFunctionLibrary.ResumeActivity
// (Final, Native, Static, Private, BlueprintCallable)
// Parameters:
// class UObject*                          WorldContextObject                                     (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FString                           ActivityId                                             (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UShockActivityFunctionLibrary::ResumeActivity(const class UObject* WorldContextObject, const class FString& ActivityId)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("ShockActivityFunctionLibrary", "ResumeActivity");

	Params::ShockActivityFunctionLibrary_ResumeActivity Parms{};

	Parms.WorldContextObject = WorldContextObject;
	Parms.ActivityId = std::move(ActivityId);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function SystemReShock.ShockActivityFunctionLibrary.SetActivityAvailability
// (Final, Native, Static, Private, BlueprintCallable)
// Parameters:
// class UObject*                          WorldContextObject                                     (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FString                           ActivityId                                             (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bAvailable                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UShockActivityFunctionLibrary::SetActivityAvailability(const class UObject* WorldContextObject, const class FString& ActivityId, bool bAvailable)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("ShockActivityFunctionLibrary", "SetActivityAvailability");

	Params::ShockActivityFunctionLibrary_SetActivityAvailability Parms{};

	Parms.WorldContextObject = WorldContextObject;
	Parms.ActivityId = std::move(ActivityId);
	Parms.bAvailable = bAvailable;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function SystemReShock.ShockActivityFunctionLibrary.StartActivity
// (Final, Native, Static, Private, BlueprintCallable)
// Parameters:
// class UObject*                          WorldContextObject                                     (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FString                           ActivityId                                             (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UShockActivityFunctionLibrary::StartActivity(const class UObject* WorldContextObject, const class FString& ActivityId)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("ShockActivityFunctionLibrary", "StartActivity");

	Params::ShockActivityFunctionLibrary_StartActivity Parms{};

	Parms.WorldContextObject = WorldContextObject;
	Parms.ActivityId = std::move(ActivityId);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function SystemReShock.ShockChess.IsLegalMove
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// struct FChessMoveRequest                MoveRequest                                            (ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
// EChessSquare                            OutCaptureSquare                                       (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UShockChess::IsLegalMove(const struct FChessMoveRequest& MoveRequest, EChessSquare* OutCaptureSquare)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ShockChess", "IsLegalMove");

	Params::ShockChess_IsLegalMove Parms{};

	Parms.MoveRequest = std::move(MoveRequest);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (OutCaptureSquare != nullptr)
		*OutCaptureSquare = Parms.OutCaptureSquare;

	return Parms.ReturnValue;
}


// Function SystemReShock.ShockChess.ResumeGame
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// int32                                   InComputerSearchDepth                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UShockChess::ResumeGame(int32 InComputerSearchDepth)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ShockChess", "ResumeGame");

	Params::ShockChess_ResumeGame Parms{};

	Parms.InComputerSearchDepth = InComputerSearchDepth;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function SystemReShock.ShockChess.StartGame
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// EChessColor                             InPlayerColor                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   InComputerSearchDepth                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TArray<struct FChessMoveRequest>        InitialMoveList                                        (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)

void UShockChess::StartGame(EChessColor InPlayerColor, int32 InComputerSearchDepth, const TArray<struct FChessMoveRequest>& InitialMoveList)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ShockChess", "StartGame");

	Params::ShockChess_StartGame Parms{};

	Parms.InPlayerColor = InPlayerColor;
	Parms.InComputerSearchDepth = InComputerSearchDepth;
	Parms.InitialMoveList = std::move(InitialMoveList);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function SystemReShock.ShockChess.StartGameFromState
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// EChessColor                             InPlayerColor                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// EChessColor                             InTurnColor                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   InComputerSearchDepth                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TMap<EChessSquare, EChessPiece>         WhitePieceMap                                          (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// TMap<EChessSquare, EChessPiece>         BlackPieceMap                                          (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)

void UShockChess::StartGameFromState(EChessColor InPlayerColor, EChessColor InTurnColor, int32 InComputerSearchDepth, const TMap<EChessSquare, EChessPiece>& WhitePieceMap, const TMap<EChessSquare, EChessPiece>& BlackPieceMap)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ShockChess", "StartGameFromState");

	Params::ShockChess_StartGameFromState Parms{};

	Parms.InPlayerColor = InPlayerColor;
	Parms.InTurnColor = InTurnColor;
	Parms.InComputerSearchDepth = InComputerSearchDepth;
	Parms.WhitePieceMap = std::move(WhitePieceMap);
	Parms.BlackPieceMap = std::move(BlackPieceMap);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function SystemReShock.ShockChess.TryErasePiece
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// EChessSquare                            Square                                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UShockChess::TryErasePiece(EChessSquare Square)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ShockChess", "TryErasePiece");

	Params::ShockChess_TryErasePiece Parms{};

	Parms.Square = Square;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function SystemReShock.ShockChess.TryMovePiece
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// struct FChessMoveRequest                MoveRequest                                            (ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UShockChess::TryMovePiece(const struct FChessMoveRequest& MoveRequest)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ShockChess", "TryMovePiece");

	Params::ShockChess_TryMovePiece Parms{};

	Parms.MoveRequest = std::move(MoveRequest);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function SystemReShock.ShockChess.GetColorFromFlags
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// uint8                                   SquareFlags                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// EChessColor                             ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

EChessColor UShockChess::GetColorFromFlags(uint8 SquareFlags) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ShockChess", "GetColorFromFlags");

	Params::ShockChess_GetColorFromFlags Parms{};

	Parms.SquareFlags = SquareFlags;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function SystemReShock.ShockChess.GetCoordsForSquare
// (Final, Native, Public, HasDefaults, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// EChessSquare                            Square                                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FIntPoint                        ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

struct FIntPoint UShockChess::GetCoordsForSquare(EChessSquare Square) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ShockChess", "GetCoordsForSquare");

	Params::ShockChess_GetCoordsForSquare Parms{};

	Parms.Square = Square;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function SystemReShock.ShockChess.GetKingSquare
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// EChessColor                             Color                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// EChessSquare                            ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

EChessSquare UShockChess::GetKingSquare(EChessColor Color) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ShockChess", "GetKingSquare");

	Params::ShockChess_GetKingSquare Parms{};

	Parms.Color = Color;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function SystemReShock.ShockChess.GetPieceFlagsMap
// (Final, Native, Public, HasOutParams, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// TMap<EChessSquare, uint8>               OutPieceFlagMap                                        (Parm, OutParm, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UShockChess::GetPieceFlagsMap(TMap<EChessSquare, uint8>* OutPieceFlagMap) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ShockChess", "GetPieceFlagsMap");

	Params::ShockChess_GetPieceFlagsMap Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (OutPieceFlagMap != nullptr)
		*OutPieceFlagMap = std::move(Parms.OutPieceFlagMap);

	return Parms.ReturnValue;
}


// Function SystemReShock.ShockChess.GetPieceFlagsMapForColor
// (Final, Native, Public, HasOutParams, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// EChessColor                             Color                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TMap<EChessSquare, uint8>               OutPieceFlagMap                                        (Parm, OutParm, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UShockChess::GetPieceFlagsMapForColor(EChessColor Color, TMap<EChessSquare, uint8>* OutPieceFlagMap) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ShockChess", "GetPieceFlagsMapForColor");

	Params::ShockChess_GetPieceFlagsMapForColor Parms{};

	Parms.Color = Color;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (OutPieceFlagMap != nullptr)
		*OutPieceFlagMap = std::move(Parms.OutPieceFlagMap);

	return Parms.ReturnValue;
}


// Function SystemReShock.ShockChess.GetPieceFromFlags
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// uint8                                   SquareFlags                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// EChessPiece                             ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

EChessPiece UShockChess::GetPieceFromFlags(uint8 SquareFlags) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ShockChess", "GetPieceFromFlags");

	Params::ShockChess_GetPieceFromFlags Parms{};

	Parms.SquareFlags = SquareFlags;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function SystemReShock.ShockChess.GetSquareColor
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// EChessSquare                            Square                                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// EChessColor                             ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

EChessColor UShockChess::GetSquareColor(EChessSquare Square) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ShockChess", "GetSquareColor");

	Params::ShockChess_GetSquareColor Parms{};

	Parms.Square = Square;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function SystemReShock.ShockChess.GetSquareFlags
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// EChessSquare                            Square                                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// uint8                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

uint8 UShockChess::GetSquareFlags(EChessSquare Square) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ShockChess", "GetSquareFlags");

	Params::ShockChess_GetSquareFlags Parms{};

	Parms.Square = Square;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function SystemReShock.ShockChess.GetSquareFromIndex
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// int32                                   SquareIndex                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// EChessSquare                            ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

EChessSquare UShockChess::GetSquareFromIndex(int32 SquareIndex) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ShockChess", "GetSquareFromIndex");

	Params::ShockChess_GetSquareFromIndex Parms{};

	Parms.SquareIndex = SquareIndex;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function SystemReShock.ShockChess.GetSquareIndexFromCoords
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// int32                                   X                                                      (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   Y                                                      (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

int32 UShockChess::GetSquareIndexFromCoords(int32 X, int32 Y) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ShockChess", "GetSquareIndexFromCoords");

	Params::ShockChess_GetSquareIndexFromCoords Parms{};

	Parms.X = X;
	Parms.Y = Y;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function SystemReShock.ShockChess.HasFinishedPieceTransitions
// (Event, Public, BlueprintEvent, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UShockChess::HasFinishedPieceTransitions() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ShockChess", "HasFinishedPieceTransitions");

	Params::ShockChess_HasFinishedPieceTransitions Parms{};

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function SystemReShock.ShockChess.IsGameOver
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UShockChess::IsGameOver() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ShockChess", "IsGameOver");

	Params::ShockChess_IsGameOver Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function SystemReShock.SplineMeshWidget.ConvertEndcapToDynamicMaterialInstance
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class UMaterialInstanceDynamic*         ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UMaterialInstanceDynamic* USplineMeshWidget::ConvertEndcapToDynamicMaterialInstance()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SplineMeshWidget", "ConvertEndcapToDynamicMaterialInstance");

	Params::SplineMeshWidget_ConvertEndcapToDynamicMaterialInstance Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function SystemReShock.SplineMeshWidget.ConvertGlowToDynamicMaterialInstance
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class UMaterialInstanceDynamic*         ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UMaterialInstanceDynamic* USplineMeshWidget::ConvertGlowToDynamicMaterialInstance()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SplineMeshWidget", "ConvertGlowToDynamicMaterialInstance");

	Params::SplineMeshWidget_ConvertGlowToDynamicMaterialInstance Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function SystemReShock.SplineMeshWidget.SetEndCapColor
// (Final, Native, Public, HasOutParams, HasDefaults, BlueprintCallable)
// Parameters:
// struct FColor                           Color                                                  (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void USplineMeshWidget::SetEndCapColor(const struct FColor& Color)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SplineMeshWidget", "SetEndCapColor");

	Params::SplineMeshWidget_SetEndCapColor Parms{};

	Parms.Color = std::move(Color);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function SystemReShock.SplineMeshWidget.SetGlowColor
// (Final, Native, Public, HasOutParams, HasDefaults, BlueprintCallable)
// Parameters:
// struct FColor                           Color                                                  (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void USplineMeshWidget::SetGlowColor(const struct FColor& Color)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SplineMeshWidget", "SetGlowColor");

	Params::SplineMeshWidget_SetGlowColor Parms{};

	Parms.Color = std::move(Color);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function SystemReShock.SplineMeshWidget.SetGlowOffset
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// float                                   Offset                                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void USplineMeshWidget::SetGlowOffset(float Offset)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SplineMeshWidget", "SetGlowOffset");

	Params::SplineMeshWidget_SetGlowOffset Parms{};

	Parms.Offset = Offset;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function SystemReShock.SplineMeshWidget.SetGlowSize
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// float                                   Size                                                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void USplineMeshWidget::SetGlowSize(float Size)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SplineMeshWidget", "SetGlowSize");

	Params::SplineMeshWidget_SetGlowSize Parms{};

	Parms.Size = Size;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function SystemReShock.SplineMeshWidget.SetSplineColor
// (Final, Native, Public, HasOutParams, HasDefaults, BlueprintCallable)
// Parameters:
// struct FColor                           Color                                                  (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void USplineMeshWidget::SetSplineColor(const struct FColor& Color)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SplineMeshWidget", "SetSplineColor");

	Params::SplineMeshWidget_SetSplineColor Parms{};

	Parms.Color = std::move(Color);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function SystemReShock.SplineMeshWidget.SetSplinePointLocation
// (Final, Native, Public, HasOutParams, HasDefaults, BlueprintCallable)
// Parameters:
// int32                                   PointIndex                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector2D                        Location                                               (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void USplineMeshWidget::SetSplinePointLocation(int32 PointIndex, const struct FVector2D& Location)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SplineMeshWidget", "SetSplinePointLocation");

	Params::SplineMeshWidget_SetSplinePointLocation Parms{};

	Parms.PointIndex = PointIndex;
	Parms.Location = std::move(Location);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function SystemReShock.SplineMeshWidget.SetSplineWidth
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// float                                   Width                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void USplineMeshWidget::SetSplineWidth(float Width)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SplineMeshWidget", "SetSplineWidth");

	Params::SplineMeshWidget_SetSplineWidth Parms{};

	Parms.Width = Width;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function SystemReShock.SplineMeshWidget.GetSplinePointCount
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// int32                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

int32 USplineMeshWidget::GetSplinePointCount() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SplineMeshWidget", "GetSplinePointCount");

	Params::SplineMeshWidget_GetSplinePointCount Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function SystemReShock.SystemShockFunctionLibrary.GetBestCultureFromRowNames
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// class FString                           CultureName                                            (ConstParm, Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TArray<class FName>                     CultureRowNames                                        (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
// class FName                             ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class FName USystemShockFunctionLibrary::GetBestCultureFromRowNames(const class FString& CultureName, const TArray<class FName>& CultureRowNames)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("SystemShockFunctionLibrary", "GetBestCultureFromRowNames");

	Params::SystemShockFunctionLibrary_GetBestCultureFromRowNames Parms{};

	Parms.CultureName = std::move(CultureName);
	Parms.CultureRowNames = std::move(CultureRowNames);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function SystemReShock.SystemShockFunctionLibrary.GetBestCultureIndex
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// class FString                           CultureName                                            (ConstParm, Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TArray<class FString>                   CandidateNames                                         (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
// int32                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

int32 USystemShockFunctionLibrary::GetBestCultureIndex(const class FString& CultureName, const TArray<class FString>& CandidateNames)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("SystemShockFunctionLibrary", "GetBestCultureIndex");

	Params::SystemShockFunctionLibrary_GetBestCultureIndex Parms{};

	Parms.CultureName = std::move(CultureName);
	Parms.CandidateNames = std::move(CandidateNames);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function SystemReShock.SystemShockFunctionLibrary.GetBestTicTacToeMove
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// TArray<uint8>                           CellStates                                             (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
// int32                                   LevelSize                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// uint8                                   PlayerId                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// uint8                                   OtherPlayerID                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bFullDepth                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bWrapLevel                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TArray<int32>                           ScoreTable                                             (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
// int32                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

int32 USystemShockFunctionLibrary::GetBestTicTacToeMove(const TArray<uint8>& CellStates, int32 LevelSize, uint8 PlayerId, uint8 OtherPlayerID, bool bFullDepth, bool bWrapLevel, const TArray<int32>& ScoreTable)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("SystemShockFunctionLibrary", "GetBestTicTacToeMove");

	Params::SystemShockFunctionLibrary_GetBestTicTacToeMove Parms{};

	Parms.CellStates = std::move(CellStates);
	Parms.LevelSize = LevelSize;
	Parms.PlayerId = PlayerId;
	Parms.OtherPlayerID = OtherPlayerID;
	Parms.bFullDepth = bFullDepth;
	Parms.bWrapLevel = bWrapLevel;
	Parms.ScoreTable = std::move(ScoreTable);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function SystemReShock.SystemShockFunctionLibrary.GetStaticMeshTrackProperties
// (Final, Native, Static, Public, HasOutParams, HasDefaults, BlueprintCallable)
// Parameters:
// class UStaticMesh*                      StaticMesh                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   UVChannel                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   LongSideBias                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FBox2D                           TexCoordBounds                                         (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
// float                                   OutTrackLength                                         (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector2D                        OutUCoordInterval                                      (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool USystemShockFunctionLibrary::GetStaticMeshTrackProperties(class UStaticMesh* StaticMesh, int32 UVChannel, float LongSideBias, const struct FBox2D& TexCoordBounds, float* OutTrackLength, struct FVector2D* OutUCoordInterval)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("SystemShockFunctionLibrary", "GetStaticMeshTrackProperties");

	Params::SystemShockFunctionLibrary_GetStaticMeshTrackProperties Parms{};

	Parms.StaticMesh = StaticMesh;
	Parms.UVChannel = UVChannel;
	Parms.LongSideBias = LongSideBias;
	Parms.TexCoordBounds = std::move(TexCoordBounds);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (OutTrackLength != nullptr)
		*OutTrackLength = Parms.OutTrackLength;

	if (OutUCoordInterval != nullptr)
		*OutUCoordInterval = std::move(Parms.OutUCoordInterval);

	return Parms.ReturnValue;
}


// Function SystemReShock.SystemShockFunctionLibrary.GetTicTacToeScoreForMove
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// TArray<uint8>                           CellStates                                             (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
// int32                                   LevelSize                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   CellIndex                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// uint8                                   NewState                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bWrapLevel                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TArray<int32>                           ScoreTable                                             (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
// int32                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

int32 USystemShockFunctionLibrary::GetTicTacToeScoreForMove(const TArray<uint8>& CellStates, int32 LevelSize, int32 CellIndex, uint8 NewState, bool bWrapLevel, const TArray<int32>& ScoreTable)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("SystemShockFunctionLibrary", "GetTicTacToeScoreForMove");

	Params::SystemShockFunctionLibrary_GetTicTacToeScoreForMove Parms{};

	Parms.CellStates = std::move(CellStates);
	Parms.LevelSize = LevelSize;
	Parms.CellIndex = CellIndex;
	Parms.NewState = NewState;
	Parms.bWrapLevel = bWrapLevel;
	Parms.ScoreTable = std::move(ScoreTable);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function SystemReShock.TextMeshDecoratorInterface.GetDecoratorSizeFromPayload
// (Native, Event, Public, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// class FString                           Payload                                                (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector2D                        ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

struct FVector2D ITextMeshDecoratorInterface::GetDecoratorSizeFromPayload(const class FString& Payload)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("TextMeshDecoratorInterface", "GetDecoratorSizeFromPayload");

	Params::TextMeshDecoratorInterface_GetDecoratorSizeFromPayload Parms{};

	Parms.Payload = std::move(Payload);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function SystemReShock.TextMeshDecoratorInterface.InitializeDecorator
// (Native, Event, Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// class UTextMeshWidget*                  TextMeshWidget                                         (Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FColor                           Color                                                  (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool ITextMeshDecoratorInterface::InitializeDecorator(class UTextMeshWidget* TextMeshWidget, const struct FColor& Color)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("TextMeshDecoratorInterface", "InitializeDecorator");

	Params::TextMeshDecoratorInterface_InitializeDecorator Parms{};

	Parms.TextMeshWidget = TextMeshWidget;
	Parms.Color = std::move(Color);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function SystemReShock.TextMeshDecoratorInterface.SetDecoratorColor
// (Native, Event, Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// struct FColor                           Color                                                  (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ITextMeshDecoratorInterface::SetDecoratorColor(const struct FColor& Color)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("TextMeshDecoratorInterface", "SetDecoratorColor");

	Params::TextMeshDecoratorInterface_SetDecoratorColor Parms{};

	Parms.Color = std::move(Color);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function SystemReShock.TextMeshWidget.SetColor
// (Final, Native, Public, HasOutParams, HasDefaults, BlueprintCallable)
// Parameters:
// struct FColor                           NewColor                                               (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UTextMeshWidget::SetColor(const struct FColor& NewColor)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("TextMeshWidget", "SetColor");

	Params::TextMeshWidget_SetColor Parms{};

	Parms.NewColor = std::move(NewColor);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function SystemReShock.TextMeshWidget.SetFont
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class UFont*                            NewFont                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UTextMeshWidget::SetFont(class UFont* NewFont)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("TextMeshWidget", "SetFont");

	Params::TextMeshWidget_SetFont Parms{};

	Parms.NewFont = NewFont;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function SystemReShock.TextMeshWidget.SetFontSize
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// float                                   NewSize                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UTextMeshWidget::SetFontSize(float NewSize)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("TextMeshWidget", "SetFontSize");

	Params::TextMeshWidget_SetFontSize Parms{};

	Parms.NewSize = NewSize;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function SystemReShock.TextMeshWidget.SetForceUppercase
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// bool                                    bUppercase                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UTextMeshWidget::SetForceUppercase(bool bUppercase)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("TextMeshWidget", "SetForceUppercase");

	Params::TextMeshWidget_SetForceUppercase Parms{};

	Parms.bUppercase = bUppercase;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function SystemReShock.TextMeshWidget.SetHorizontalAlignment
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// ETextMeshWidgetHorizontalAligment       Alignment                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UTextMeshWidget::SetHorizontalAlignment(ETextMeshWidgetHorizontalAligment Alignment)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("TextMeshWidget", "SetHorizontalAlignment");

	Params::TextMeshWidget_SetHorizontalAlignment Parms{};

	Parms.Alignment = Alignment;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function SystemReShock.TextMeshWidget.SetPadding
// (Final, Native, Public, HasOutParams, HasDefaults, BlueprintCallable)
// Parameters:
// struct FVector2D                        NewPadding                                             (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UTextMeshWidget::SetPadding(const struct FVector2D& NewPadding)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("TextMeshWidget", "SetPadding");

	Params::TextMeshWidget_SetPadding Parms{};

	Parms.NewPadding = std::move(NewPadding);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function SystemReShock.TextMeshWidget.SetSpacing
// (Final, Native, Public, HasOutParams, HasDefaults, BlueprintCallable)
// Parameters:
// struct FVector2D                        NewSpacing                                             (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UTextMeshWidget::SetSpacing(const struct FVector2D& NewSpacing)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("TextMeshWidget", "SetSpacing");

	Params::TextMeshWidget_SetSpacing Parms{};

	Parms.NewSpacing = std::move(NewSpacing);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function SystemReShock.TextMeshWidget.SetText
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// class FText                             NewText                                                (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)

void UTextMeshWidget::SetText(const class FText& NewText)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("TextMeshWidget", "SetText");

	Params::TextMeshWidget_SetText Parms{};

	Parms.NewText = std::move(NewText);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function SystemReShock.TextMeshWidget.SetTextColor
// (Final, Native, Public, HasOutParams, HasDefaults, BlueprintCallable)
// Parameters:
// struct FColor                           NewColor                                               (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UTextMeshWidget::SetTextColor(const struct FColor& NewColor)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("TextMeshWidget", "SetTextColor");

	Params::TextMeshWidget_SetTextColor Parms{};

	Parms.NewColor = std::move(NewColor);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function SystemReShock.TextMeshWidget.SetVerticalAlignment
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// ETextMeshWidgetVerticalAligment         Alignment                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UTextMeshWidget::SetVerticalAlignment(ETextMeshWidgetVerticalAligment Alignment)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("TextMeshWidget", "SetVerticalAlignment");

	Params::TextMeshWidget_SetVerticalAlignment Parms{};

	Parms.Alignment = Alignment;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function SystemReShock.TextMeshWidget.SetVirtualTextDimensions
// (Final, Native, Public, HasOutParams, HasDefaults, BlueprintCallable)
// Parameters:
// struct FVector2D                        Dimensions                                             (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UTextMeshWidget::SetVirtualTextDimensions(const struct FVector2D& Dimensions)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("TextMeshWidget", "SetVirtualTextDimensions");

	Params::TextMeshWidget_SetVirtualTextDimensions Parms{};

	Parms.Dimensions = std::move(Dimensions);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function SystemReShock.TextMeshWidget.SetVirtualTextWidth
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// float                                   VirtualWidth                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UTextMeshWidget::SetVirtualTextWidth(float VirtualWidth)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("TextMeshWidget", "SetVirtualTextWidth");

	Params::TextMeshWidget_SetVirtualTextWidth Parms{};

	Parms.VirtualWidth = VirtualWidth;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function SystemReShock.TextMeshWidget.GetDimensionsForNewText
// (Final, Native, Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class FText                             NewText                                                (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// struct FVector2D                        ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

struct FVector2D UTextMeshWidget::GetDimensionsForNewText(const class FText& NewText) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("TextMeshWidget", "GetDimensionsForNewText");

	Params::TextMeshWidget_GetDimensionsForNewText Parms{};

	Parms.NewText = std::move(NewText);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function SystemReShock.TimeSeriesTraceFunction.GetTimeSeriesTraceWidget
// (Final, Native, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// class UTimeSeriesTraceWidget*           ReturnValue                                            (ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UTimeSeriesTraceWidget* UTimeSeriesTraceFunction::GetTimeSeriesTraceWidget()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("TimeSeriesTraceFunction", "GetTimeSeriesTraceWidget");

	Params::TimeSeriesTraceFunction_GetTimeSeriesTraceWidget Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function SystemReShock.TimeSeriesTraceFunction.K2_BeginPlay
// (Event, Public, BlueprintEvent)

void UTimeSeriesTraceFunction::K2_BeginPlay()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("TimeSeriesTraceFunction", "K2_BeginPlay");

	UObject::ProcessEvent(Func, nullptr);
}


// Function SystemReShock.TimeSeriesTraceFunction.K2_EvaluateFunction
// (Event, Public, BlueprintEvent)
// Parameters:
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

float UTimeSeriesTraceFunction::K2_EvaluateFunction()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("TimeSeriesTraceFunction", "K2_EvaluateFunction");

	Params::TimeSeriesTraceFunction_K2_EvaluateFunction Parms{};

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function SystemReShock.TimeSeriesTraceWidget.DisableTraceFunctions
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// bool                                    bDisable                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UTimeSeriesTraceWidget::DisableTraceFunctions(bool bDisable)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("TimeSeriesTraceWidget", "DisableTraceFunctions");

	Params::TimeSeriesTraceWidget_DisableTraceFunctions Parms{};

	Parms.bDisable = bDisable;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function SystemReShock.TimeSeriesTraceWidget.InitializeTraceFunctions
// (Final, Native, Public, BlueprintCallable)

void UTimeSeriesTraceWidget::InitializeTraceFunctions()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("TimeSeriesTraceWidget", "InitializeTraceFunctions");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function SystemReShock.TimeSeriesTraceWidget.GetTraceFunctionsDisabled
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UTimeSeriesTraceWidget::GetTraceFunctionsDisabled() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("TimeSeriesTraceWidget", "GetTraceFunctionsDisabled");

	Params::TimeSeriesTraceWidget_GetTraceFunctionsDisabled Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function SystemReShock.PhysInstancedStaticMeshComponent.AddInstanceWithVelocity
// (Final, Native, Public, HasOutParams, HasDefaults, BlueprintCallable)
// Parameters:
// struct FTransform                       LocalTransform                                         (ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
// struct FVector                          LocalVelocity                                          (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector                          LocalRotationAxis                                      (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   RotationSpeed                                          (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bUseCenterOfMass                                       (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UPhysInstancedStaticMeshComponent::AddInstanceWithVelocity(const struct FTransform& LocalTransform, const struct FVector& LocalVelocity, const struct FVector& LocalRotationAxis, const float RotationSpeed, bool bUseCenterOfMass)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("PhysInstancedStaticMeshComponent", "AddInstanceWithVelocity");

	Params::PhysInstancedStaticMeshComponent_AddInstanceWithVelocity Parms{};

	Parms.LocalTransform = std::move(LocalTransform);
	Parms.LocalVelocity = std::move(LocalVelocity);
	Parms.LocalRotationAxis = std::move(LocalRotationAxis);
	Parms.RotationSpeed = RotationSpeed;
	Parms.bUseCenterOfMass = bUseCenterOfMass;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function SystemReShock.PhysInstancedStaticMeshComponent.AddWorldVelocityToInstance
// (Final, Native, Public, HasDefaults, BlueprintCallable)
// Parameters:
// int32                                   InstanceIndex                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector                          WorldLinearVelocity                                    (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UPhysInstancedStaticMeshComponent::AddWorldVelocityToInstance(int32 InstanceIndex, const struct FVector& WorldLinearVelocity)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("PhysInstancedStaticMeshComponent", "AddWorldVelocityToInstance");

	Params::PhysInstancedStaticMeshComponent_AddWorldVelocityToInstance Parms{};

	Parms.InstanceIndex = InstanceIndex;
	Parms.WorldLinearVelocity = std::move(WorldLinearVelocity);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function SystemReShock.PhysInstancedStaticMeshComponent.SetAutoDestroy
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// bool                                    bState                                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UPhysInstancedStaticMeshComponent::SetAutoDestroy(bool bState)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("PhysInstancedStaticMeshComponent", "SetAutoDestroy");

	Params::PhysInstancedStaticMeshComponent_SetAutoDestroy Parms{};

	Parms.bState = bState;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function SystemReShock.PhysInstancedStaticMeshComponent.TryCollideWithWorld
// (Event, Public, HasOutParams, HasDefaults, BlueprintEvent)
// Parameters:
// struct FVector                          LastCentroid                                           (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector                          CurrCentroid                                           (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector                          CylinderVector                                         (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   CapsuleRadius                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector                          OutCollisionPoint                                      (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector                          OutCollisionNormal                                     (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   OutPenetrationDepth                                    (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UPhysInstancedStaticMeshComponent::TryCollideWithWorld(const struct FVector& LastCentroid, const struct FVector& CurrCentroid, const struct FVector& CylinderVector, float CapsuleRadius, struct FVector* OutCollisionPoint, struct FVector* OutCollisionNormal, float* OutPenetrationDepth)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("PhysInstancedStaticMeshComponent", "TryCollideWithWorld");

	Params::PhysInstancedStaticMeshComponent_TryCollideWithWorld Parms{};

	Parms.LastCentroid = std::move(LastCentroid);
	Parms.CurrCentroid = std::move(CurrCentroid);
	Parms.CylinderVector = std::move(CylinderVector);
	Parms.CapsuleRadius = CapsuleRadius;

	UObject::ProcessEvent(Func, &Parms);

	if (OutCollisionPoint != nullptr)
		*OutCollisionPoint = std::move(Parms.OutCollisionPoint);

	if (OutCollisionNormal != nullptr)
		*OutCollisionNormal = std::move(Parms.OutCollisionNormal);

	if (OutPenetrationDepth != nullptr)
		*OutPenetrationDepth = Parms.OutPenetrationDepth;

	return Parms.ReturnValue;
}

}

