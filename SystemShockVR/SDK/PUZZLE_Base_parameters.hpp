#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: PUZZLE_Base

#include "Basic.hpp"

#include "STRUCT_InteractResults_structs.hpp"
#include "CoreUObject_structs.hpp"
#include "ENUM_CardinalDirection_structs.hpp"
#include "ENUM_InteractResultType_structs.hpp"
#include "ENUM_PuzzleSolveType_structs.hpp"
#include "ENUM_DoorState_structs.hpp"
#include "ENUM_GameDifficulty_structs.hpp"
#include "Engine_structs.hpp"
#include "ENUM_InteractionType_structs.hpp"


namespace SDK::Params
{

// Function PUZZLE_Base.PUZZLE_Base_C.ExecuteUbergraph_PUZZLE_Base
// 0x0008 (0x0008 - 0x0000)
struct PUZZLE_Base_C_ExecuteUbergraph_PUZZLE_Base final
{
public:
	int32                                         EntryPoint;                                        // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_ComponentBoundEvent_bVisibleState;          // 0x0004(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(PUZZLE_Base_C_ExecuteUbergraph_PUZZLE_Base) == 0x000004, "Wrong alignment on PUZZLE_Base_C_ExecuteUbergraph_PUZZLE_Base");
static_assert(sizeof(PUZZLE_Base_C_ExecuteUbergraph_PUZZLE_Base) == 0x000008, "Wrong size on PUZZLE_Base_C_ExecuteUbergraph_PUZZLE_Base");
static_assert(offsetof(PUZZLE_Base_C_ExecuteUbergraph_PUZZLE_Base, EntryPoint) == 0x000000, "Member 'PUZZLE_Base_C_ExecuteUbergraph_PUZZLE_Base::EntryPoint' has a wrong offset!");
static_assert(offsetof(PUZZLE_Base_C_ExecuteUbergraph_PUZZLE_Base, K2Node_ComponentBoundEvent_bVisibleState) == 0x000004, "Member 'PUZZLE_Base_C_ExecuteUbergraph_PUZZLE_Base::K2Node_ComponentBoundEvent_bVisibleState' has a wrong offset!");

// Function PUZZLE_Base.PUZZLE_Base_C.BndEvt__COMP_VoxelCullable_K2Node_ComponentBoundEvent_0_CullableVisibilitySignature__DelegateSignature
// 0x0001 (0x0001 - 0x0000)
struct PUZZLE_Base_C_BndEvt__COMP_VoxelCullable_K2Node_ComponentBoundEvent_0_CullableVisibilitySignature__DelegateSignature final
{
public:
	bool                                          bVisibleState;                                     // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(PUZZLE_Base_C_BndEvt__COMP_VoxelCullable_K2Node_ComponentBoundEvent_0_CullableVisibilitySignature__DelegateSignature) == 0x000001, "Wrong alignment on PUZZLE_Base_C_BndEvt__COMP_VoxelCullable_K2Node_ComponentBoundEvent_0_CullableVisibilitySignature__DelegateSignature");
static_assert(sizeof(PUZZLE_Base_C_BndEvt__COMP_VoxelCullable_K2Node_ComponentBoundEvent_0_CullableVisibilitySignature__DelegateSignature) == 0x000001, "Wrong size on PUZZLE_Base_C_BndEvt__COMP_VoxelCullable_K2Node_ComponentBoundEvent_0_CullableVisibilitySignature__DelegateSignature");
static_assert(offsetof(PUZZLE_Base_C_BndEvt__COMP_VoxelCullable_K2Node_ComponentBoundEvent_0_CullableVisibilitySignature__DelegateSignature, bVisibleState) == 0x000000, "Member 'PUZZLE_Base_C_BndEvt__COMP_VoxelCullable_K2Node_ComponentBoundEvent_0_CullableVisibilitySignature__DelegateSignature::bVisibleState' has a wrong offset!");

// Function PUZZLE_Base.PUZZLE_Base_C.GetTargetShape
// 0x0030 (0x0030 - 0x0000)
struct PUZZLE_Base_C_GetTargetShape final
{
public:
	class UPrimitiveComponent*                    CursorPrimitive;                                   // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UShapeComponent*                        ShapeComponent;                                    // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Not_PreBool_ReturnValue;                  // 0x0010(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_EqualEqual_ObjectObject_ReturnValue;      // 0x0011(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_12[0x6];                                       // 0x0012(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class APlayerController*                      CallFunc_GetPlayerController_ReturnValue;          // 0x0018(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_ShouldFocusOnInteract_Result;             // 0x0020(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_21[0x7];                                       // 0x0021(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UShapeComponent*                        CallFunc_GetPuzzleShape_TargetShape;               // 0x0028(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(PUZZLE_Base_C_GetTargetShape) == 0x000008, "Wrong alignment on PUZZLE_Base_C_GetTargetShape");
static_assert(sizeof(PUZZLE_Base_C_GetTargetShape) == 0x000030, "Wrong size on PUZZLE_Base_C_GetTargetShape");
static_assert(offsetof(PUZZLE_Base_C_GetTargetShape, CursorPrimitive) == 0x000000, "Member 'PUZZLE_Base_C_GetTargetShape::CursorPrimitive' has a wrong offset!");
static_assert(offsetof(PUZZLE_Base_C_GetTargetShape, ShapeComponent) == 0x000008, "Member 'PUZZLE_Base_C_GetTargetShape::ShapeComponent' has a wrong offset!");
static_assert(offsetof(PUZZLE_Base_C_GetTargetShape, CallFunc_Not_PreBool_ReturnValue) == 0x000010, "Member 'PUZZLE_Base_C_GetTargetShape::CallFunc_Not_PreBool_ReturnValue' has a wrong offset!");
static_assert(offsetof(PUZZLE_Base_C_GetTargetShape, CallFunc_EqualEqual_ObjectObject_ReturnValue) == 0x000011, "Member 'PUZZLE_Base_C_GetTargetShape::CallFunc_EqualEqual_ObjectObject_ReturnValue' has a wrong offset!");
static_assert(offsetof(PUZZLE_Base_C_GetTargetShape, CallFunc_GetPlayerController_ReturnValue) == 0x000018, "Member 'PUZZLE_Base_C_GetTargetShape::CallFunc_GetPlayerController_ReturnValue' has a wrong offset!");
static_assert(offsetof(PUZZLE_Base_C_GetTargetShape, CallFunc_ShouldFocusOnInteract_Result) == 0x000020, "Member 'PUZZLE_Base_C_GetTargetShape::CallFunc_ShouldFocusOnInteract_Result' has a wrong offset!");
static_assert(offsetof(PUZZLE_Base_C_GetTargetShape, CallFunc_GetPuzzleShape_TargetShape) == 0x000028, "Member 'PUZZLE_Base_C_GetTargetShape::CallFunc_GetPuzzleShape_TargetShape' has a wrong offset!");

// Function PUZZLE_Base.PUZZLE_Base_C.TryInteract
// 0x02E8 (0x02E8 - 0x0000)
struct PUZZLE_Base_C_TryInteract final
{
public:
	class AActor*                                 SourceActor;                                       // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UPrimitiveComponent*                    CursorPrimitive;                                   // 0x0008(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ENUM_InteractionType                          InteractionType;                                   // 0x0010(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FSTRUCT_InteractResults                InteractResults;                                   // 0x0018(0x0020)(Parm, OutParm, HasGetValueTypeHash)
	class APAWN_SystemShockCharacter_C*           Character;                                         // 0x0038(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FSTRUCT_InteractResults                K2Node_MakeStruct_STRUCT_InteractResults;          // 0x0040(0x0020)(HasGetValueTypeHash)
	struct FSTRUCT_InteractResults                CallFunc_TryInteract_InteractResults;              // 0x0060(0x0020)(HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_ByteByte_ReturnValue;          // 0x0080(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_81[0x7];                                       // 0x0081(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FSTRUCT_InteractResults                K2Node_MakeStruct_STRUCT_InteractResults_1;        // 0x0088(0x0020)(HasGetValueTypeHash)
	bool                                          CallFunc_IsJunctionBoxFunctional_Result;           // 0x00A8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_A9[0x7];                                       // 0x00A9(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FSTRUCT_InteractResults                K2Node_MakeStruct_STRUCT_InteractResults_2;        // 0x00B0(0x0020)(HasGetValueTypeHash)
	bool                                          CallFunc_IsJunctionBoxFunctional_Result_1;         // 0x00D0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_D1[0x7];                                       // 0x00D1(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UCOMP_PuzzleCell_Base_C*                K2Node_DynamicCast_AsCOMP_Puzzle_Cell_Base;        // 0x00D8(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x00E0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	ENUM_InteractResultType                       CallFunc_InteractWithPuzzlePrimitive_Result;       // 0x00E1(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_E2[0x6];                                       // 0x00E2(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   CallFunc_InteractWithPuzzlePrimitive_ResultText;   // 0x00E8(0x0018)()
	class APAWN_SystemShockCharacter_C*           K2Node_DynamicCast_AsPAWN_System_Shock_Character;  // 0x0100(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess_1;                     // 0x0108(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_109[0x7];                                      // 0x0109(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FSTRUCT_InteractResults                K2Node_MakeStruct_STRUCT_InteractResults_3;        // 0x0110(0x0020)(HasGetValueTypeHash)
	class FText                                   CallFunc_GetSecurityLockText_Result;               // 0x0130(0x0018)()
	class UClass*                                 CallFunc_LoadClassAsset_Blocking_ReturnValue;      // 0x0148(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FSTRUCT_InteractResults                K2Node_MakeStruct_STRUCT_InteractResults_4;        // 0x0150(0x0020)(HasGetValueTypeHash)
	class UClass*                                 K2Node_ClassDynamicCast_AsITEM_Base;               // 0x0170(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_ClassDynamicCast_bSuccess;                  // 0x0178(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_179[0x7];                                      // 0x0179(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UCOMP_Inventory_C*                      CallFunc_GetInventoryComponent_Inventory;          // 0x0180(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FSTRUCT_InteractResults                K2Node_MakeStruct_STRUCT_InteractResults_5;        // 0x0188(0x0020)(HasGetValueTypeHash)
	class UITEM_Base_C*                           CallFunc_FindItem_FoundItem;                       // 0x01A8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Activate_Result;                          // 0x01B0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x01B1(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_1B2[0x6];                                      // 0x01B2(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	struct FSTRUCT_InteractResults                K2Node_MakeStruct_STRUCT_InteractResults_6;        // 0x01B8(0x0020)(HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_ObjectObject_ReturnValue;      // 0x01D8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_1D9[0x7];                                      // 0x01D9(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FSTRUCT_InteractResults                K2Node_MakeStruct_STRUCT_InteractResults_7;        // 0x01E0(0x0020)(HasGetValueTypeHash)
	bool                                          CallFunc_CanManipulateUnlockTargets_Result;        // 0x0200(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_201[0x7];                                      // 0x0201(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FSTRUCT_InteractResults                K2Node_MakeStruct_STRUCT_InteractResults_8;        // 0x0208(0x0020)(HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue_1;                    // 0x0228(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_229[0x7];                                      // 0x0229(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FSTRUCT_InteractResults                K2Node_MakeStruct_STRUCT_InteractResults_9;        // 0x0230(0x0020)(HasGetValueTypeHash)
	class APAWN_Hacker_Simple_C*                  K2Node_DynamicCast_AsPAWN_Hacker_Simple;           // 0x0250(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess_2;                     // 0x0258(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_259[0x7];                                      // 0x0259(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class AController*                            CallFunc_GetController_ReturnValue;                // 0x0260(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_TryBeginFocusInteraction_Result;          // 0x0268(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_ShouldFocusOnInteract_Result;             // 0x0269(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_26A[0x6];                                      // 0x026A(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	struct FSTRUCT_InteractResults                K2Node_MakeStruct_STRUCT_InteractResults_10;       // 0x0270(0x0020)(HasGetValueTypeHash)
	bool                                          CallFunc_OpenPuzzleBox_Result;                     // 0x0290(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_291[0x7];                                      // 0x0291(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FSTRUCT_InteractResults                K2Node_MakeStruct_STRUCT_InteractResults_11;       // 0x0298(0x0020)(HasGetValueTypeHash)
	class UAnimBP_JunctionBox_C*                  CallFunc_GetAnimInstance_AnimInstance;             // 0x02B8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FSTRUCT_InteractResults                K2Node_MakeStruct_STRUCT_InteractResults_12;       // 0x02C0(0x0020)(HasGetValueTypeHash)
	bool                                          CallFunc_IsAnyMontagePlaying_ReturnValue;          // 0x02E0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(PUZZLE_Base_C_TryInteract) == 0x000008, "Wrong alignment on PUZZLE_Base_C_TryInteract");
static_assert(sizeof(PUZZLE_Base_C_TryInteract) == 0x0002E8, "Wrong size on PUZZLE_Base_C_TryInteract");
static_assert(offsetof(PUZZLE_Base_C_TryInteract, SourceActor) == 0x000000, "Member 'PUZZLE_Base_C_TryInteract::SourceActor' has a wrong offset!");
static_assert(offsetof(PUZZLE_Base_C_TryInteract, CursorPrimitive) == 0x000008, "Member 'PUZZLE_Base_C_TryInteract::CursorPrimitive' has a wrong offset!");
static_assert(offsetof(PUZZLE_Base_C_TryInteract, InteractionType) == 0x000010, "Member 'PUZZLE_Base_C_TryInteract::InteractionType' has a wrong offset!");
static_assert(offsetof(PUZZLE_Base_C_TryInteract, InteractResults) == 0x000018, "Member 'PUZZLE_Base_C_TryInteract::InteractResults' has a wrong offset!");
static_assert(offsetof(PUZZLE_Base_C_TryInteract, Character) == 0x000038, "Member 'PUZZLE_Base_C_TryInteract::Character' has a wrong offset!");
static_assert(offsetof(PUZZLE_Base_C_TryInteract, K2Node_MakeStruct_STRUCT_InteractResults) == 0x000040, "Member 'PUZZLE_Base_C_TryInteract::K2Node_MakeStruct_STRUCT_InteractResults' has a wrong offset!");
static_assert(offsetof(PUZZLE_Base_C_TryInteract, CallFunc_TryInteract_InteractResults) == 0x000060, "Member 'PUZZLE_Base_C_TryInteract::CallFunc_TryInteract_InteractResults' has a wrong offset!");
static_assert(offsetof(PUZZLE_Base_C_TryInteract, CallFunc_EqualEqual_ByteByte_ReturnValue) == 0x000080, "Member 'PUZZLE_Base_C_TryInteract::CallFunc_EqualEqual_ByteByte_ReturnValue' has a wrong offset!");
static_assert(offsetof(PUZZLE_Base_C_TryInteract, K2Node_MakeStruct_STRUCT_InteractResults_1) == 0x000088, "Member 'PUZZLE_Base_C_TryInteract::K2Node_MakeStruct_STRUCT_InteractResults_1' has a wrong offset!");
static_assert(offsetof(PUZZLE_Base_C_TryInteract, CallFunc_IsJunctionBoxFunctional_Result) == 0x0000A8, "Member 'PUZZLE_Base_C_TryInteract::CallFunc_IsJunctionBoxFunctional_Result' has a wrong offset!");
static_assert(offsetof(PUZZLE_Base_C_TryInteract, K2Node_MakeStruct_STRUCT_InteractResults_2) == 0x0000B0, "Member 'PUZZLE_Base_C_TryInteract::K2Node_MakeStruct_STRUCT_InteractResults_2' has a wrong offset!");
static_assert(offsetof(PUZZLE_Base_C_TryInteract, CallFunc_IsJunctionBoxFunctional_Result_1) == 0x0000D0, "Member 'PUZZLE_Base_C_TryInteract::CallFunc_IsJunctionBoxFunctional_Result_1' has a wrong offset!");
static_assert(offsetof(PUZZLE_Base_C_TryInteract, K2Node_DynamicCast_AsCOMP_Puzzle_Cell_Base) == 0x0000D8, "Member 'PUZZLE_Base_C_TryInteract::K2Node_DynamicCast_AsCOMP_Puzzle_Cell_Base' has a wrong offset!");
static_assert(offsetof(PUZZLE_Base_C_TryInteract, K2Node_DynamicCast_bSuccess) == 0x0000E0, "Member 'PUZZLE_Base_C_TryInteract::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(PUZZLE_Base_C_TryInteract, CallFunc_InteractWithPuzzlePrimitive_Result) == 0x0000E1, "Member 'PUZZLE_Base_C_TryInteract::CallFunc_InteractWithPuzzlePrimitive_Result' has a wrong offset!");
static_assert(offsetof(PUZZLE_Base_C_TryInteract, CallFunc_InteractWithPuzzlePrimitive_ResultText) == 0x0000E8, "Member 'PUZZLE_Base_C_TryInteract::CallFunc_InteractWithPuzzlePrimitive_ResultText' has a wrong offset!");
static_assert(offsetof(PUZZLE_Base_C_TryInteract, K2Node_DynamicCast_AsPAWN_System_Shock_Character) == 0x000100, "Member 'PUZZLE_Base_C_TryInteract::K2Node_DynamicCast_AsPAWN_System_Shock_Character' has a wrong offset!");
static_assert(offsetof(PUZZLE_Base_C_TryInteract, K2Node_DynamicCast_bSuccess_1) == 0x000108, "Member 'PUZZLE_Base_C_TryInteract::K2Node_DynamicCast_bSuccess_1' has a wrong offset!");
static_assert(offsetof(PUZZLE_Base_C_TryInteract, K2Node_MakeStruct_STRUCT_InteractResults_3) == 0x000110, "Member 'PUZZLE_Base_C_TryInteract::K2Node_MakeStruct_STRUCT_InteractResults_3' has a wrong offset!");
static_assert(offsetof(PUZZLE_Base_C_TryInteract, CallFunc_GetSecurityLockText_Result) == 0x000130, "Member 'PUZZLE_Base_C_TryInteract::CallFunc_GetSecurityLockText_Result' has a wrong offset!");
static_assert(offsetof(PUZZLE_Base_C_TryInteract, CallFunc_LoadClassAsset_Blocking_ReturnValue) == 0x000148, "Member 'PUZZLE_Base_C_TryInteract::CallFunc_LoadClassAsset_Blocking_ReturnValue' has a wrong offset!");
static_assert(offsetof(PUZZLE_Base_C_TryInteract, K2Node_MakeStruct_STRUCT_InteractResults_4) == 0x000150, "Member 'PUZZLE_Base_C_TryInteract::K2Node_MakeStruct_STRUCT_InteractResults_4' has a wrong offset!");
static_assert(offsetof(PUZZLE_Base_C_TryInteract, K2Node_ClassDynamicCast_AsITEM_Base) == 0x000170, "Member 'PUZZLE_Base_C_TryInteract::K2Node_ClassDynamicCast_AsITEM_Base' has a wrong offset!");
static_assert(offsetof(PUZZLE_Base_C_TryInteract, K2Node_ClassDynamicCast_bSuccess) == 0x000178, "Member 'PUZZLE_Base_C_TryInteract::K2Node_ClassDynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(PUZZLE_Base_C_TryInteract, CallFunc_GetInventoryComponent_Inventory) == 0x000180, "Member 'PUZZLE_Base_C_TryInteract::CallFunc_GetInventoryComponent_Inventory' has a wrong offset!");
static_assert(offsetof(PUZZLE_Base_C_TryInteract, K2Node_MakeStruct_STRUCT_InteractResults_5) == 0x000188, "Member 'PUZZLE_Base_C_TryInteract::K2Node_MakeStruct_STRUCT_InteractResults_5' has a wrong offset!");
static_assert(offsetof(PUZZLE_Base_C_TryInteract, CallFunc_FindItem_FoundItem) == 0x0001A8, "Member 'PUZZLE_Base_C_TryInteract::CallFunc_FindItem_FoundItem' has a wrong offset!");
static_assert(offsetof(PUZZLE_Base_C_TryInteract, CallFunc_Activate_Result) == 0x0001B0, "Member 'PUZZLE_Base_C_TryInteract::CallFunc_Activate_Result' has a wrong offset!");
static_assert(offsetof(PUZZLE_Base_C_TryInteract, CallFunc_IsValid_ReturnValue) == 0x0001B1, "Member 'PUZZLE_Base_C_TryInteract::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(PUZZLE_Base_C_TryInteract, K2Node_MakeStruct_STRUCT_InteractResults_6) == 0x0001B8, "Member 'PUZZLE_Base_C_TryInteract::K2Node_MakeStruct_STRUCT_InteractResults_6' has a wrong offset!");
static_assert(offsetof(PUZZLE_Base_C_TryInteract, CallFunc_EqualEqual_ObjectObject_ReturnValue) == 0x0001D8, "Member 'PUZZLE_Base_C_TryInteract::CallFunc_EqualEqual_ObjectObject_ReturnValue' has a wrong offset!");
static_assert(offsetof(PUZZLE_Base_C_TryInteract, K2Node_MakeStruct_STRUCT_InteractResults_7) == 0x0001E0, "Member 'PUZZLE_Base_C_TryInteract::K2Node_MakeStruct_STRUCT_InteractResults_7' has a wrong offset!");
static_assert(offsetof(PUZZLE_Base_C_TryInteract, CallFunc_CanManipulateUnlockTargets_Result) == 0x000200, "Member 'PUZZLE_Base_C_TryInteract::CallFunc_CanManipulateUnlockTargets_Result' has a wrong offset!");
static_assert(offsetof(PUZZLE_Base_C_TryInteract, K2Node_MakeStruct_STRUCT_InteractResults_8) == 0x000208, "Member 'PUZZLE_Base_C_TryInteract::K2Node_MakeStruct_STRUCT_InteractResults_8' has a wrong offset!");
static_assert(offsetof(PUZZLE_Base_C_TryInteract, CallFunc_IsValid_ReturnValue_1) == 0x000228, "Member 'PUZZLE_Base_C_TryInteract::CallFunc_IsValid_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(PUZZLE_Base_C_TryInteract, K2Node_MakeStruct_STRUCT_InteractResults_9) == 0x000230, "Member 'PUZZLE_Base_C_TryInteract::K2Node_MakeStruct_STRUCT_InteractResults_9' has a wrong offset!");
static_assert(offsetof(PUZZLE_Base_C_TryInteract, K2Node_DynamicCast_AsPAWN_Hacker_Simple) == 0x000250, "Member 'PUZZLE_Base_C_TryInteract::K2Node_DynamicCast_AsPAWN_Hacker_Simple' has a wrong offset!");
static_assert(offsetof(PUZZLE_Base_C_TryInteract, K2Node_DynamicCast_bSuccess_2) == 0x000258, "Member 'PUZZLE_Base_C_TryInteract::K2Node_DynamicCast_bSuccess_2' has a wrong offset!");
static_assert(offsetof(PUZZLE_Base_C_TryInteract, CallFunc_GetController_ReturnValue) == 0x000260, "Member 'PUZZLE_Base_C_TryInteract::CallFunc_GetController_ReturnValue' has a wrong offset!");
static_assert(offsetof(PUZZLE_Base_C_TryInteract, CallFunc_TryBeginFocusInteraction_Result) == 0x000268, "Member 'PUZZLE_Base_C_TryInteract::CallFunc_TryBeginFocusInteraction_Result' has a wrong offset!");
static_assert(offsetof(PUZZLE_Base_C_TryInteract, CallFunc_ShouldFocusOnInteract_Result) == 0x000269, "Member 'PUZZLE_Base_C_TryInteract::CallFunc_ShouldFocusOnInteract_Result' has a wrong offset!");
static_assert(offsetof(PUZZLE_Base_C_TryInteract, K2Node_MakeStruct_STRUCT_InteractResults_10) == 0x000270, "Member 'PUZZLE_Base_C_TryInteract::K2Node_MakeStruct_STRUCT_InteractResults_10' has a wrong offset!");
static_assert(offsetof(PUZZLE_Base_C_TryInteract, CallFunc_OpenPuzzleBox_Result) == 0x000290, "Member 'PUZZLE_Base_C_TryInteract::CallFunc_OpenPuzzleBox_Result' has a wrong offset!");
static_assert(offsetof(PUZZLE_Base_C_TryInteract, K2Node_MakeStruct_STRUCT_InteractResults_11) == 0x000298, "Member 'PUZZLE_Base_C_TryInteract::K2Node_MakeStruct_STRUCT_InteractResults_11' has a wrong offset!");
static_assert(offsetof(PUZZLE_Base_C_TryInteract, CallFunc_GetAnimInstance_AnimInstance) == 0x0002B8, "Member 'PUZZLE_Base_C_TryInteract::CallFunc_GetAnimInstance_AnimInstance' has a wrong offset!");
static_assert(offsetof(PUZZLE_Base_C_TryInteract, K2Node_MakeStruct_STRUCT_InteractResults_12) == 0x0002C0, "Member 'PUZZLE_Base_C_TryInteract::K2Node_MakeStruct_STRUCT_InteractResults_12' has a wrong offset!");
static_assert(offsetof(PUZZLE_Base_C_TryInteract, CallFunc_IsAnyMontagePlaying_ReturnValue) == 0x0002E0, "Member 'PUZZLE_Base_C_TryInteract::CallFunc_IsAnyMontagePlaying_ReturnValue' has a wrong offset!");

// Function PUZZLE_Base.PUZZLE_Base_C.GetAnimInstance
// 0x0020 (0x0020 - 0x0000)
struct PUZZLE_Base_C_GetAnimInstance final
{
public:
	class UAnimBP_JunctionBox_C*                  AnimInstance;                                      // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UAnimInstance*                          CallFunc_GetAnimInstance_ReturnValue;              // 0x0008(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UAnimBP_JunctionBox_C*                  K2Node_DynamicCast_AsAnim_BP_Junction_Box;         // 0x0010(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0018(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(PUZZLE_Base_C_GetAnimInstance) == 0x000008, "Wrong alignment on PUZZLE_Base_C_GetAnimInstance");
static_assert(sizeof(PUZZLE_Base_C_GetAnimInstance) == 0x000020, "Wrong size on PUZZLE_Base_C_GetAnimInstance");
static_assert(offsetof(PUZZLE_Base_C_GetAnimInstance, AnimInstance) == 0x000000, "Member 'PUZZLE_Base_C_GetAnimInstance::AnimInstance' has a wrong offset!");
static_assert(offsetof(PUZZLE_Base_C_GetAnimInstance, CallFunc_GetAnimInstance_ReturnValue) == 0x000008, "Member 'PUZZLE_Base_C_GetAnimInstance::CallFunc_GetAnimInstance_ReturnValue' has a wrong offset!");
static_assert(offsetof(PUZZLE_Base_C_GetAnimInstance, K2Node_DynamicCast_AsAnim_BP_Junction_Box) == 0x000010, "Member 'PUZZLE_Base_C_GetAnimInstance::K2Node_DynamicCast_AsAnim_BP_Junction_Box' has a wrong offset!");
static_assert(offsetof(PUZZLE_Base_C_GetAnimInstance, K2Node_DynamicCast_bSuccess) == 0x000018, "Member 'PUZZLE_Base_C_GetAnimInstance::K2Node_DynamicCast_bSuccess' has a wrong offset!");

// Function PUZZLE_Base.PUZZLE_Base_C.EVENT_IsDoneOpening
// 0x0008 (0x0008 - 0x0000)
struct PUZZLE_Base_C_EVENT_IsDoneOpening final
{
public:
	class UAnimInstance*                          CallFunc_GetAnimInstance_ReturnValue;              // 0x0000(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(PUZZLE_Base_C_EVENT_IsDoneOpening) == 0x000008, "Wrong alignment on PUZZLE_Base_C_EVENT_IsDoneOpening");
static_assert(sizeof(PUZZLE_Base_C_EVENT_IsDoneOpening) == 0x000008, "Wrong size on PUZZLE_Base_C_EVENT_IsDoneOpening");
static_assert(offsetof(PUZZLE_Base_C_EVENT_IsDoneOpening, CallFunc_GetAnimInstance_ReturnValue) == 0x000000, "Member 'PUZZLE_Base_C_EVENT_IsDoneOpening::CallFunc_GetAnimInstance_ReturnValue' has a wrong offset!");

// Function PUZZLE_Base.PUZZLE_Base_C.EVENT_OnPuzzleBoxClosed
// 0x0040 (0x0040 - 0x0000)
struct PUZZLE_Base_C_EVENT_OnPuzzleBoxClosed final
{
public:
	int32                                         Temp_int_Array_Index_Variable;                     // 0x0000(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Loop_Counter_Variable;                    // 0x0004(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue;                   // 0x0008(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Array_Index_Variable_1;                   // 0x000C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Loop_Counter_Variable_1;                  // 0x0010(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue_1;                 // 0x0014(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UMeshComponent*                         CallFunc_Array_Get_Item;                           // 0x0018(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Length_ReturnValue;                 // 0x0020(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue;                  // 0x0024(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0025(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_26[0x2];                                       // 0x0026(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	class UCOMP_PuzzleCell_Base_C*                CallFunc_Array_Get_Item_1;                         // 0x0028(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Length_ReturnValue_1;               // 0x0030(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue_1;                // 0x0034(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_35[0x3];                                       // 0x0035(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class UAnimInstance*                          CallFunc_GetAnimInstance_ReturnValue;              // 0x0038(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(PUZZLE_Base_C_EVENT_OnPuzzleBoxClosed) == 0x000008, "Wrong alignment on PUZZLE_Base_C_EVENT_OnPuzzleBoxClosed");
static_assert(sizeof(PUZZLE_Base_C_EVENT_OnPuzzleBoxClosed) == 0x000040, "Wrong size on PUZZLE_Base_C_EVENT_OnPuzzleBoxClosed");
static_assert(offsetof(PUZZLE_Base_C_EVENT_OnPuzzleBoxClosed, Temp_int_Array_Index_Variable) == 0x000000, "Member 'PUZZLE_Base_C_EVENT_OnPuzzleBoxClosed::Temp_int_Array_Index_Variable' has a wrong offset!");
static_assert(offsetof(PUZZLE_Base_C_EVENT_OnPuzzleBoxClosed, Temp_int_Loop_Counter_Variable) == 0x000004, "Member 'PUZZLE_Base_C_EVENT_OnPuzzleBoxClosed::Temp_int_Loop_Counter_Variable' has a wrong offset!");
static_assert(offsetof(PUZZLE_Base_C_EVENT_OnPuzzleBoxClosed, CallFunc_Add_IntInt_ReturnValue) == 0x000008, "Member 'PUZZLE_Base_C_EVENT_OnPuzzleBoxClosed::CallFunc_Add_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(PUZZLE_Base_C_EVENT_OnPuzzleBoxClosed, Temp_int_Array_Index_Variable_1) == 0x00000C, "Member 'PUZZLE_Base_C_EVENT_OnPuzzleBoxClosed::Temp_int_Array_Index_Variable_1' has a wrong offset!");
static_assert(offsetof(PUZZLE_Base_C_EVENT_OnPuzzleBoxClosed, Temp_int_Loop_Counter_Variable_1) == 0x000010, "Member 'PUZZLE_Base_C_EVENT_OnPuzzleBoxClosed::Temp_int_Loop_Counter_Variable_1' has a wrong offset!");
static_assert(offsetof(PUZZLE_Base_C_EVENT_OnPuzzleBoxClosed, CallFunc_Add_IntInt_ReturnValue_1) == 0x000014, "Member 'PUZZLE_Base_C_EVENT_OnPuzzleBoxClosed::CallFunc_Add_IntInt_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(PUZZLE_Base_C_EVENT_OnPuzzleBoxClosed, CallFunc_Array_Get_Item) == 0x000018, "Member 'PUZZLE_Base_C_EVENT_OnPuzzleBoxClosed::CallFunc_Array_Get_Item' has a wrong offset!");
static_assert(offsetof(PUZZLE_Base_C_EVENT_OnPuzzleBoxClosed, CallFunc_Array_Length_ReturnValue) == 0x000020, "Member 'PUZZLE_Base_C_EVENT_OnPuzzleBoxClosed::CallFunc_Array_Length_ReturnValue' has a wrong offset!");
static_assert(offsetof(PUZZLE_Base_C_EVENT_OnPuzzleBoxClosed, CallFunc_Less_IntInt_ReturnValue) == 0x000024, "Member 'PUZZLE_Base_C_EVENT_OnPuzzleBoxClosed::CallFunc_Less_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(PUZZLE_Base_C_EVENT_OnPuzzleBoxClosed, CallFunc_IsValid_ReturnValue) == 0x000025, "Member 'PUZZLE_Base_C_EVENT_OnPuzzleBoxClosed::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(PUZZLE_Base_C_EVENT_OnPuzzleBoxClosed, CallFunc_Array_Get_Item_1) == 0x000028, "Member 'PUZZLE_Base_C_EVENT_OnPuzzleBoxClosed::CallFunc_Array_Get_Item_1' has a wrong offset!");
static_assert(offsetof(PUZZLE_Base_C_EVENT_OnPuzzleBoxClosed, CallFunc_Array_Length_ReturnValue_1) == 0x000030, "Member 'PUZZLE_Base_C_EVENT_OnPuzzleBoxClosed::CallFunc_Array_Length_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(PUZZLE_Base_C_EVENT_OnPuzzleBoxClosed, CallFunc_Less_IntInt_ReturnValue_1) == 0x000034, "Member 'PUZZLE_Base_C_EVENT_OnPuzzleBoxClosed::CallFunc_Less_IntInt_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(PUZZLE_Base_C_EVENT_OnPuzzleBoxClosed, CallFunc_GetAnimInstance_ReturnValue) == 0x000038, "Member 'PUZZLE_Base_C_EVENT_OnPuzzleBoxClosed::CallFunc_GetAnimInstance_ReturnValue' has a wrong offset!");

// Function PUZZLE_Base.PUZZLE_Base_C.InitializePuzzle
// 0x0088 (0x0088 - 0x0000)
struct PUZZLE_Base_C_InitializePuzzle final
{
public:
	class UGI_SinglePlayer_C*                     GameInstance;                                      // 0x0000(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash)
	bool                                          Temp_bool_Variable;                                // 0x0008(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         Temp_float_Variable;                               // 0x000C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Temp_float_Variable_1;                             // 0x0010(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TDelegate<void()>                             K2Node_CreateDelegate_OutputDelegate;              // 0x0014(0x0010)(ZeroConstructor, NoDestructor)
	uint8                                         Pad_24[0x4];                                       // 0x0024(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTimerHandle                           CallFunc_K2_SetTimerDelegate_ReturnValue;          // 0x0028(0x0008)(NoDestructor, HasGetValueTypeHash)
	TDelegate<void()>                             K2Node_CreateDelegate_OutputDelegate_1;            // 0x0030(0x0010)(ZeroConstructor, NoDestructor)
	float                                         K2Node_Select_Default;                             // 0x0040(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_44[0x4];                                       // 0x0044(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTimerHandle                           CallFunc_K2_SetTimerDelegate_ReturnValue_1;        // 0x0048(0x0008)(NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_GetSecurityForCurrentLevel_Result;        // 0x0050(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_54[0x4];                                       // 0x0054(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UGameInstance*                          CallFunc_GetGameInstance_ReturnValue;              // 0x0058(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Greater_IntInt_ReturnValue;               // 0x0060(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_61[0x7];                                       // 0x0061(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UGI_SinglePlayer_C*                     K2Node_DynamicCast_AsGI_Single_Player;             // 0x0068(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0070(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_71[0x3];                                       // 0x0071(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	TDelegate<void(int32 NewSecurityLevel)>       K2Node_CreateDelegate_OutputDelegate_2;            // 0x0074(0x0010)(ZeroConstructor, NoDestructor)
};
static_assert(alignof(PUZZLE_Base_C_InitializePuzzle) == 0x000008, "Wrong alignment on PUZZLE_Base_C_InitializePuzzle");
static_assert(sizeof(PUZZLE_Base_C_InitializePuzzle) == 0x000088, "Wrong size on PUZZLE_Base_C_InitializePuzzle");
static_assert(offsetof(PUZZLE_Base_C_InitializePuzzle, GameInstance) == 0x000000, "Member 'PUZZLE_Base_C_InitializePuzzle::GameInstance' has a wrong offset!");
static_assert(offsetof(PUZZLE_Base_C_InitializePuzzle, Temp_bool_Variable) == 0x000008, "Member 'PUZZLE_Base_C_InitializePuzzle::Temp_bool_Variable' has a wrong offset!");
static_assert(offsetof(PUZZLE_Base_C_InitializePuzzle, Temp_float_Variable) == 0x00000C, "Member 'PUZZLE_Base_C_InitializePuzzle::Temp_float_Variable' has a wrong offset!");
static_assert(offsetof(PUZZLE_Base_C_InitializePuzzle, Temp_float_Variable_1) == 0x000010, "Member 'PUZZLE_Base_C_InitializePuzzle::Temp_float_Variable_1' has a wrong offset!");
static_assert(offsetof(PUZZLE_Base_C_InitializePuzzle, K2Node_CreateDelegate_OutputDelegate) == 0x000014, "Member 'PUZZLE_Base_C_InitializePuzzle::K2Node_CreateDelegate_OutputDelegate' has a wrong offset!");
static_assert(offsetof(PUZZLE_Base_C_InitializePuzzle, CallFunc_K2_SetTimerDelegate_ReturnValue) == 0x000028, "Member 'PUZZLE_Base_C_InitializePuzzle::CallFunc_K2_SetTimerDelegate_ReturnValue' has a wrong offset!");
static_assert(offsetof(PUZZLE_Base_C_InitializePuzzle, K2Node_CreateDelegate_OutputDelegate_1) == 0x000030, "Member 'PUZZLE_Base_C_InitializePuzzle::K2Node_CreateDelegate_OutputDelegate_1' has a wrong offset!");
static_assert(offsetof(PUZZLE_Base_C_InitializePuzzle, K2Node_Select_Default) == 0x000040, "Member 'PUZZLE_Base_C_InitializePuzzle::K2Node_Select_Default' has a wrong offset!");
static_assert(offsetof(PUZZLE_Base_C_InitializePuzzle, CallFunc_K2_SetTimerDelegate_ReturnValue_1) == 0x000048, "Member 'PUZZLE_Base_C_InitializePuzzle::CallFunc_K2_SetTimerDelegate_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(PUZZLE_Base_C_InitializePuzzle, CallFunc_GetSecurityForCurrentLevel_Result) == 0x000050, "Member 'PUZZLE_Base_C_InitializePuzzle::CallFunc_GetSecurityForCurrentLevel_Result' has a wrong offset!");
static_assert(offsetof(PUZZLE_Base_C_InitializePuzzle, CallFunc_GetGameInstance_ReturnValue) == 0x000058, "Member 'PUZZLE_Base_C_InitializePuzzle::CallFunc_GetGameInstance_ReturnValue' has a wrong offset!");
static_assert(offsetof(PUZZLE_Base_C_InitializePuzzle, CallFunc_Greater_IntInt_ReturnValue) == 0x000060, "Member 'PUZZLE_Base_C_InitializePuzzle::CallFunc_Greater_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(PUZZLE_Base_C_InitializePuzzle, K2Node_DynamicCast_AsGI_Single_Player) == 0x000068, "Member 'PUZZLE_Base_C_InitializePuzzle::K2Node_DynamicCast_AsGI_Single_Player' has a wrong offset!");
static_assert(offsetof(PUZZLE_Base_C_InitializePuzzle, K2Node_DynamicCast_bSuccess) == 0x000070, "Member 'PUZZLE_Base_C_InitializePuzzle::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(PUZZLE_Base_C_InitializePuzzle, K2Node_CreateDelegate_OutputDelegate_2) == 0x000074, "Member 'PUZZLE_Base_C_InitializePuzzle::K2Node_CreateDelegate_OutputDelegate_2' has a wrong offset!");

// Function PUZZLE_Base.PUZZLE_Base_C.InitializeAttributes
// 0x0014 (0x0014 - 0x0000)
struct PUZZLE_Base_C_InitializeAttributes final
{
public:
	TDelegate<void(float CurrValue, float LastValue)> K2Node_CreateDelegate_OutputDelegate;              // 0x0000(0x0010)(ZeroConstructor, NoDestructor)
	float                                         CallFunc_GetAttribValue_ReturnValue;               // 0x0010(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(PUZZLE_Base_C_InitializeAttributes) == 0x000004, "Wrong alignment on PUZZLE_Base_C_InitializeAttributes");
static_assert(sizeof(PUZZLE_Base_C_InitializeAttributes) == 0x000014, "Wrong size on PUZZLE_Base_C_InitializeAttributes");
static_assert(offsetof(PUZZLE_Base_C_InitializeAttributes, K2Node_CreateDelegate_OutputDelegate) == 0x000000, "Member 'PUZZLE_Base_C_InitializeAttributes::K2Node_CreateDelegate_OutputDelegate' has a wrong offset!");
static_assert(offsetof(PUZZLE_Base_C_InitializeAttributes, CallFunc_GetAttribValue_ReturnValue) == 0x000010, "Member 'PUZZLE_Base_C_InitializeAttributes::CallFunc_GetAttribValue_ReturnValue' has a wrong offset!");

// Function PUZZLE_Base.PUZZLE_Base_C.InitializeAsSolved
// 0x0001 (0x0001 - 0x0000)
struct PUZZLE_Base_C_InitializeAsSolved final
{
public:
	bool                                          CallFunc_Not_PreBool_ReturnValue;                  // 0x0000(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(PUZZLE_Base_C_InitializeAsSolved) == 0x000001, "Wrong alignment on PUZZLE_Base_C_InitializeAsSolved");
static_assert(sizeof(PUZZLE_Base_C_InitializeAsSolved) == 0x000001, "Wrong size on PUZZLE_Base_C_InitializeAsSolved");
static_assert(offsetof(PUZZLE_Base_C_InitializeAsSolved, CallFunc_Not_PreBool_ReturnValue) == 0x000000, "Member 'PUZZLE_Base_C_InitializeAsSolved::CallFunc_Not_PreBool_ReturnValue' has a wrong offset!");

// Function PUZZLE_Base.PUZZLE_Base_C.InitializeAsOpened
// 0x0008 (0x0008 - 0x0000)
struct PUZZLE_Base_C_InitializeAsOpened final
{
public:
	class UAnimBP_JunctionBox_C*                  CallFunc_GetAnimInstance_AnimInstance;             // 0x0000(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(PUZZLE_Base_C_InitializeAsOpened) == 0x000008, "Wrong alignment on PUZZLE_Base_C_InitializeAsOpened");
static_assert(sizeof(PUZZLE_Base_C_InitializeAsOpened) == 0x000008, "Wrong size on PUZZLE_Base_C_InitializeAsOpened");
static_assert(offsetof(PUZZLE_Base_C_InitializeAsOpened, CallFunc_GetAnimInstance_AnimInstance) == 0x000000, "Member 'PUZZLE_Base_C_InitializeAsOpened::CallFunc_GetAnimInstance_AnimInstance' has a wrong offset!");

// Function PUZZLE_Base.PUZZLE_Base_C.InteractWithPuzzlePrimitive
// 0x0028 (0x0028 - 0x0000)
struct PUZZLE_Base_C_InteractWithPuzzlePrimitive final
{
public:
	class UPrimitiveComponent*                    CursorPrimitive;                                   // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ENUM_InteractResultType                       Result;                                            // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   ResultText;                                        // 0x0010(0x0018)(Parm, OutParm)
};
static_assert(alignof(PUZZLE_Base_C_InteractWithPuzzlePrimitive) == 0x000008, "Wrong alignment on PUZZLE_Base_C_InteractWithPuzzlePrimitive");
static_assert(sizeof(PUZZLE_Base_C_InteractWithPuzzlePrimitive) == 0x000028, "Wrong size on PUZZLE_Base_C_InteractWithPuzzlePrimitive");
static_assert(offsetof(PUZZLE_Base_C_InteractWithPuzzlePrimitive, CursorPrimitive) == 0x000000, "Member 'PUZZLE_Base_C_InteractWithPuzzlePrimitive::CursorPrimitive' has a wrong offset!");
static_assert(offsetof(PUZZLE_Base_C_InteractWithPuzzlePrimitive, Result) == 0x000008, "Member 'PUZZLE_Base_C_InteractWithPuzzlePrimitive::Result' has a wrong offset!");
static_assert(offsetof(PUZZLE_Base_C_InteractWithPuzzlePrimitive, ResultText) == 0x000010, "Member 'PUZZLE_Base_C_InteractWithPuzzlePrimitive::ResultText' has a wrong offset!");

// Function PUZZLE_Base.PUZZLE_Base_C.HandleSolvedOutcomes
// 0x0150 (0x0150 - 0x0000)
struct PUZZLE_Base_C_HandleSolvedOutcomes final
{
public:
	bool                                          SolvedByPlayer;                                    // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   CurrentKey;                                        // 0x0004(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UGI_SinglePlayer_C*                     GameInstance;                                      // 0x0010(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Array_Index_Variable;                     // 0x0018(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1C[0x4];                                       // 0x001C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UGameInstance*                          CallFunc_GetGameInstance_ReturnValue;              // 0x0020(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UGI_SinglePlayer_C*                     K2Node_DynamicCast_AsGI_Single_Player;             // 0x0028(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0030(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_31[0x3];                                       // 0x0031(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Temp_int_Loop_Counter_Variable;                    // 0x0034(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Loop_Counter_Variable_1;                  // 0x0038(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue;                   // 0x003C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue_1;                 // 0x0040(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Array_Index_Variable_1;                   // 0x0044(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Array_Index_Variable_2;                   // 0x0048(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Loop_Counter_Variable_2;                  // 0x004C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue_2;                 // 0x0050(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_TryIncrementOrderedAchievement_Result;    // 0x0054(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_55[0x3];                                       // 0x0055(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class AINTERACT_Base_C*                       CallFunc_Array_Get_Item;                           // 0x0058(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Length_ReturnValue;                 // 0x0060(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_64[0x4];                                       // 0x0064(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TScriptInterface<class IINTERF_Interactable_C> CallFunc_SetInteractLocked_self_CastInput;         // 0x0068(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_SetInteractLocked_Result;                 // 0x0078(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Less_IntInt_ReturnValue;                  // 0x0079(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_7A[0x2];                                       // 0x007A(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                CallFunc_K2_GetComponentLocation_ReturnValue;      // 0x007C(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AINTERACT_Base_C*                       CallFunc_Array_Get_Item_1;                         // 0x0088(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Length_ReturnValue_1;               // 0x0090(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_94[0x4];                                       // 0x0094(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TScriptInterface<class IINTERF_Interactable_C> CallFunc_TryInteract_self_CastInput;               // 0x0098(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FSTRUCT_InteractResults                CallFunc_TryInteract_InteractResults;              // 0x00A8(0x0020)(HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue_1;                // 0x00C8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_C9[0x7];                                       // 0x00C9(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UGameInstance*                          CallFunc_GetGameInstance_ReturnValue_1;            // 0x00D0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Map_Find_Value;                           // 0x00D8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Map_Find_ReturnValue;                     // 0x00D9(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_DA[0x6];                                       // 0x00DA(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class UGI_SinglePlayer_C*                     K2Node_DynamicCast_AsGI_Single_Player_1;           // 0x00E0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess_1;                     // 0x00E8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_E9[0x7];                                       // 0x00E9(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 CallFunc_SetCompletedStoryQuest_LogString;         // 0x00F0(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	TArray<class FName>                           CallFunc_Map_Keys_Keys;                            // 0x0100(0x0010)(ReferenceParm)
	TScriptInterface<class IINTERF_Interactable_C> CallFunc_TryInteract_self_CastInput_1;             // 0x0110(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FSTRUCT_InteractResults                CallFunc_TryInteract_InteractResults_1;            // 0x0120(0x0020)(HasGetValueTypeHash)
	class FName                                   CallFunc_Array_Get_Item_2;                         // 0x0140(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Length_ReturnValue_2;               // 0x0148(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue_2;                // 0x014C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x014D(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(PUZZLE_Base_C_HandleSolvedOutcomes) == 0x000008, "Wrong alignment on PUZZLE_Base_C_HandleSolvedOutcomes");
static_assert(sizeof(PUZZLE_Base_C_HandleSolvedOutcomes) == 0x000150, "Wrong size on PUZZLE_Base_C_HandleSolvedOutcomes");
static_assert(offsetof(PUZZLE_Base_C_HandleSolvedOutcomes, SolvedByPlayer) == 0x000000, "Member 'PUZZLE_Base_C_HandleSolvedOutcomes::SolvedByPlayer' has a wrong offset!");
static_assert(offsetof(PUZZLE_Base_C_HandleSolvedOutcomes, CurrentKey) == 0x000004, "Member 'PUZZLE_Base_C_HandleSolvedOutcomes::CurrentKey' has a wrong offset!");
static_assert(offsetof(PUZZLE_Base_C_HandleSolvedOutcomes, GameInstance) == 0x000010, "Member 'PUZZLE_Base_C_HandleSolvedOutcomes::GameInstance' has a wrong offset!");
static_assert(offsetof(PUZZLE_Base_C_HandleSolvedOutcomes, Temp_int_Array_Index_Variable) == 0x000018, "Member 'PUZZLE_Base_C_HandleSolvedOutcomes::Temp_int_Array_Index_Variable' has a wrong offset!");
static_assert(offsetof(PUZZLE_Base_C_HandleSolvedOutcomes, CallFunc_GetGameInstance_ReturnValue) == 0x000020, "Member 'PUZZLE_Base_C_HandleSolvedOutcomes::CallFunc_GetGameInstance_ReturnValue' has a wrong offset!");
static_assert(offsetof(PUZZLE_Base_C_HandleSolvedOutcomes, K2Node_DynamicCast_AsGI_Single_Player) == 0x000028, "Member 'PUZZLE_Base_C_HandleSolvedOutcomes::K2Node_DynamicCast_AsGI_Single_Player' has a wrong offset!");
static_assert(offsetof(PUZZLE_Base_C_HandleSolvedOutcomes, K2Node_DynamicCast_bSuccess) == 0x000030, "Member 'PUZZLE_Base_C_HandleSolvedOutcomes::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(PUZZLE_Base_C_HandleSolvedOutcomes, Temp_int_Loop_Counter_Variable) == 0x000034, "Member 'PUZZLE_Base_C_HandleSolvedOutcomes::Temp_int_Loop_Counter_Variable' has a wrong offset!");
static_assert(offsetof(PUZZLE_Base_C_HandleSolvedOutcomes, Temp_int_Loop_Counter_Variable_1) == 0x000038, "Member 'PUZZLE_Base_C_HandleSolvedOutcomes::Temp_int_Loop_Counter_Variable_1' has a wrong offset!");
static_assert(offsetof(PUZZLE_Base_C_HandleSolvedOutcomes, CallFunc_Add_IntInt_ReturnValue) == 0x00003C, "Member 'PUZZLE_Base_C_HandleSolvedOutcomes::CallFunc_Add_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(PUZZLE_Base_C_HandleSolvedOutcomes, CallFunc_Add_IntInt_ReturnValue_1) == 0x000040, "Member 'PUZZLE_Base_C_HandleSolvedOutcomes::CallFunc_Add_IntInt_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(PUZZLE_Base_C_HandleSolvedOutcomes, Temp_int_Array_Index_Variable_1) == 0x000044, "Member 'PUZZLE_Base_C_HandleSolvedOutcomes::Temp_int_Array_Index_Variable_1' has a wrong offset!");
static_assert(offsetof(PUZZLE_Base_C_HandleSolvedOutcomes, Temp_int_Array_Index_Variable_2) == 0x000048, "Member 'PUZZLE_Base_C_HandleSolvedOutcomes::Temp_int_Array_Index_Variable_2' has a wrong offset!");
static_assert(offsetof(PUZZLE_Base_C_HandleSolvedOutcomes, Temp_int_Loop_Counter_Variable_2) == 0x00004C, "Member 'PUZZLE_Base_C_HandleSolvedOutcomes::Temp_int_Loop_Counter_Variable_2' has a wrong offset!");
static_assert(offsetof(PUZZLE_Base_C_HandleSolvedOutcomes, CallFunc_Add_IntInt_ReturnValue_2) == 0x000050, "Member 'PUZZLE_Base_C_HandleSolvedOutcomes::CallFunc_Add_IntInt_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(PUZZLE_Base_C_HandleSolvedOutcomes, CallFunc_TryIncrementOrderedAchievement_Result) == 0x000054, "Member 'PUZZLE_Base_C_HandleSolvedOutcomes::CallFunc_TryIncrementOrderedAchievement_Result' has a wrong offset!");
static_assert(offsetof(PUZZLE_Base_C_HandleSolvedOutcomes, CallFunc_Array_Get_Item) == 0x000058, "Member 'PUZZLE_Base_C_HandleSolvedOutcomes::CallFunc_Array_Get_Item' has a wrong offset!");
static_assert(offsetof(PUZZLE_Base_C_HandleSolvedOutcomes, CallFunc_Array_Length_ReturnValue) == 0x000060, "Member 'PUZZLE_Base_C_HandleSolvedOutcomes::CallFunc_Array_Length_ReturnValue' has a wrong offset!");
static_assert(offsetof(PUZZLE_Base_C_HandleSolvedOutcomes, CallFunc_SetInteractLocked_self_CastInput) == 0x000068, "Member 'PUZZLE_Base_C_HandleSolvedOutcomes::CallFunc_SetInteractLocked_self_CastInput' has a wrong offset!");
static_assert(offsetof(PUZZLE_Base_C_HandleSolvedOutcomes, CallFunc_SetInteractLocked_Result) == 0x000078, "Member 'PUZZLE_Base_C_HandleSolvedOutcomes::CallFunc_SetInteractLocked_Result' has a wrong offset!");
static_assert(offsetof(PUZZLE_Base_C_HandleSolvedOutcomes, CallFunc_Less_IntInt_ReturnValue) == 0x000079, "Member 'PUZZLE_Base_C_HandleSolvedOutcomes::CallFunc_Less_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(PUZZLE_Base_C_HandleSolvedOutcomes, CallFunc_K2_GetComponentLocation_ReturnValue) == 0x00007C, "Member 'PUZZLE_Base_C_HandleSolvedOutcomes::CallFunc_K2_GetComponentLocation_ReturnValue' has a wrong offset!");
static_assert(offsetof(PUZZLE_Base_C_HandleSolvedOutcomes, CallFunc_Array_Get_Item_1) == 0x000088, "Member 'PUZZLE_Base_C_HandleSolvedOutcomes::CallFunc_Array_Get_Item_1' has a wrong offset!");
static_assert(offsetof(PUZZLE_Base_C_HandleSolvedOutcomes, CallFunc_Array_Length_ReturnValue_1) == 0x000090, "Member 'PUZZLE_Base_C_HandleSolvedOutcomes::CallFunc_Array_Length_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(PUZZLE_Base_C_HandleSolvedOutcomes, CallFunc_TryInteract_self_CastInput) == 0x000098, "Member 'PUZZLE_Base_C_HandleSolvedOutcomes::CallFunc_TryInteract_self_CastInput' has a wrong offset!");
static_assert(offsetof(PUZZLE_Base_C_HandleSolvedOutcomes, CallFunc_TryInteract_InteractResults) == 0x0000A8, "Member 'PUZZLE_Base_C_HandleSolvedOutcomes::CallFunc_TryInteract_InteractResults' has a wrong offset!");
static_assert(offsetof(PUZZLE_Base_C_HandleSolvedOutcomes, CallFunc_Less_IntInt_ReturnValue_1) == 0x0000C8, "Member 'PUZZLE_Base_C_HandleSolvedOutcomes::CallFunc_Less_IntInt_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(PUZZLE_Base_C_HandleSolvedOutcomes, CallFunc_GetGameInstance_ReturnValue_1) == 0x0000D0, "Member 'PUZZLE_Base_C_HandleSolvedOutcomes::CallFunc_GetGameInstance_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(PUZZLE_Base_C_HandleSolvedOutcomes, CallFunc_Map_Find_Value) == 0x0000D8, "Member 'PUZZLE_Base_C_HandleSolvedOutcomes::CallFunc_Map_Find_Value' has a wrong offset!");
static_assert(offsetof(PUZZLE_Base_C_HandleSolvedOutcomes, CallFunc_Map_Find_ReturnValue) == 0x0000D9, "Member 'PUZZLE_Base_C_HandleSolvedOutcomes::CallFunc_Map_Find_ReturnValue' has a wrong offset!");
static_assert(offsetof(PUZZLE_Base_C_HandleSolvedOutcomes, K2Node_DynamicCast_AsGI_Single_Player_1) == 0x0000E0, "Member 'PUZZLE_Base_C_HandleSolvedOutcomes::K2Node_DynamicCast_AsGI_Single_Player_1' has a wrong offset!");
static_assert(offsetof(PUZZLE_Base_C_HandleSolvedOutcomes, K2Node_DynamicCast_bSuccess_1) == 0x0000E8, "Member 'PUZZLE_Base_C_HandleSolvedOutcomes::K2Node_DynamicCast_bSuccess_1' has a wrong offset!");
static_assert(offsetof(PUZZLE_Base_C_HandleSolvedOutcomes, CallFunc_SetCompletedStoryQuest_LogString) == 0x0000F0, "Member 'PUZZLE_Base_C_HandleSolvedOutcomes::CallFunc_SetCompletedStoryQuest_LogString' has a wrong offset!");
static_assert(offsetof(PUZZLE_Base_C_HandleSolvedOutcomes, CallFunc_Map_Keys_Keys) == 0x000100, "Member 'PUZZLE_Base_C_HandleSolvedOutcomes::CallFunc_Map_Keys_Keys' has a wrong offset!");
static_assert(offsetof(PUZZLE_Base_C_HandleSolvedOutcomes, CallFunc_TryInteract_self_CastInput_1) == 0x000110, "Member 'PUZZLE_Base_C_HandleSolvedOutcomes::CallFunc_TryInteract_self_CastInput_1' has a wrong offset!");
static_assert(offsetof(PUZZLE_Base_C_HandleSolvedOutcomes, CallFunc_TryInteract_InteractResults_1) == 0x000120, "Member 'PUZZLE_Base_C_HandleSolvedOutcomes::CallFunc_TryInteract_InteractResults_1' has a wrong offset!");
static_assert(offsetof(PUZZLE_Base_C_HandleSolvedOutcomes, CallFunc_Array_Get_Item_2) == 0x000140, "Member 'PUZZLE_Base_C_HandleSolvedOutcomes::CallFunc_Array_Get_Item_2' has a wrong offset!");
static_assert(offsetof(PUZZLE_Base_C_HandleSolvedOutcomes, CallFunc_Array_Length_ReturnValue_2) == 0x000148, "Member 'PUZZLE_Base_C_HandleSolvedOutcomes::CallFunc_Array_Length_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(PUZZLE_Base_C_HandleSolvedOutcomes, CallFunc_Less_IntInt_ReturnValue_2) == 0x00014C, "Member 'PUZZLE_Base_C_HandleSolvedOutcomes::CallFunc_Less_IntInt_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(PUZZLE_Base_C_HandleSolvedOutcomes, CallFunc_IsValid_ReturnValue) == 0x00014D, "Member 'PUZZLE_Base_C_HandleSolvedOutcomes::CallFunc_IsValid_ReturnValue' has a wrong offset!");

// Function PUZZLE_Base.PUZZLE_Base_C.SetPuzzleLightState
// 0x000C (0x000C - 0x0000)
struct PUZZLE_Base_C_SetPuzzleLightState final
{
public:
	bool                                          State;                                             // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsVisible_ReturnValue;                    // 0x0001(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_2[0x2];                                        // 0x0002(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_Conv_BoolToFloat_ReturnValue;             // 0x0004(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BooleanAND_ReturnValue;                   // 0x0008(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(PUZZLE_Base_C_SetPuzzleLightState) == 0x000004, "Wrong alignment on PUZZLE_Base_C_SetPuzzleLightState");
static_assert(sizeof(PUZZLE_Base_C_SetPuzzleLightState) == 0x00000C, "Wrong size on PUZZLE_Base_C_SetPuzzleLightState");
static_assert(offsetof(PUZZLE_Base_C_SetPuzzleLightState, State) == 0x000000, "Member 'PUZZLE_Base_C_SetPuzzleLightState::State' has a wrong offset!");
static_assert(offsetof(PUZZLE_Base_C_SetPuzzleLightState, CallFunc_IsVisible_ReturnValue) == 0x000001, "Member 'PUZZLE_Base_C_SetPuzzleLightState::CallFunc_IsVisible_ReturnValue' has a wrong offset!");
static_assert(offsetof(PUZZLE_Base_C_SetPuzzleLightState, CallFunc_Conv_BoolToFloat_ReturnValue) == 0x000004, "Member 'PUZZLE_Base_C_SetPuzzleLightState::CallFunc_Conv_BoolToFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(PUZZLE_Base_C_SetPuzzleLightState, CallFunc_BooleanAND_ReturnValue) == 0x000008, "Member 'PUZZLE_Base_C_SetPuzzleLightState::CallFunc_BooleanAND_ReturnValue' has a wrong offset!");

// Function PUZZLE_Base.PUZZLE_Base_C.GetPuzzleShape
// 0x0010 (0x0010 - 0x0000)
struct PUZZLE_Base_C_GetPuzzleShape final
{
public:
	class UPrimitiveComponent*                    CursorPrimitive;                                   // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UShapeComponent*                        TargetShape;                                       // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(PUZZLE_Base_C_GetPuzzleShape) == 0x000008, "Wrong alignment on PUZZLE_Base_C_GetPuzzleShape");
static_assert(sizeof(PUZZLE_Base_C_GetPuzzleShape) == 0x000010, "Wrong size on PUZZLE_Base_C_GetPuzzleShape");
static_assert(offsetof(PUZZLE_Base_C_GetPuzzleShape, CursorPrimitive) == 0x000000, "Member 'PUZZLE_Base_C_GetPuzzleShape::CursorPrimitive' has a wrong offset!");
static_assert(offsetof(PUZZLE_Base_C_GetPuzzleShape, TargetShape) == 0x000008, "Member 'PUZZLE_Base_C_GetPuzzleShape::TargetShape' has a wrong offset!");

// Function PUZZLE_Base.PUZZLE_Base_C.SetPuzzleSolved
// 0x0050 (0x0050 - 0x0000)
struct PUZZLE_Base_C_SetPuzzleSolved final
{
public:
	ENUM_PuzzleSolveType                          SolveType;                                         // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_ByteByte_ReturnValue;          // 0x0001(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_EqualEqual_ByteByte_ReturnValue_1;        // 0x0002(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Not_PreBool_ReturnValue;                  // 0x0003(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UObject*                                CallFunc_LoadAsset_Blocking_ReturnValue;           // 0x0008(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UAnimMontage*                           K2Node_DynamicCast_AsAnim_Montage;                 // 0x0010(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0018(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_19[0x7];                                       // 0x0019(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UAnimBP_JunctionBox_C*                  CallFunc_GetAnimInstance_AnimInstance;             // 0x0020(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TDelegate<void()>                             K2Node_CreateDelegate_OutputDelegate;              // 0x0028(0x0010)(ZeroConstructor, NoDestructor)
	class UAnimBP_JunctionBox_C*                  CallFunc_GetAnimInstance_AnimInstance_1;           // 0x0038(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Montage_Play_ReturnValue;                 // 0x0040(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Add_FloatFloat_ReturnValue;               // 0x0044(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FTimerHandle                           CallFunc_K2_SetTimerDelegate_ReturnValue;          // 0x0048(0x0008)(NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(PUZZLE_Base_C_SetPuzzleSolved) == 0x000008, "Wrong alignment on PUZZLE_Base_C_SetPuzzleSolved");
static_assert(sizeof(PUZZLE_Base_C_SetPuzzleSolved) == 0x000050, "Wrong size on PUZZLE_Base_C_SetPuzzleSolved");
static_assert(offsetof(PUZZLE_Base_C_SetPuzzleSolved, SolveType) == 0x000000, "Member 'PUZZLE_Base_C_SetPuzzleSolved::SolveType' has a wrong offset!");
static_assert(offsetof(PUZZLE_Base_C_SetPuzzleSolved, CallFunc_EqualEqual_ByteByte_ReturnValue) == 0x000001, "Member 'PUZZLE_Base_C_SetPuzzleSolved::CallFunc_EqualEqual_ByteByte_ReturnValue' has a wrong offset!");
static_assert(offsetof(PUZZLE_Base_C_SetPuzzleSolved, CallFunc_EqualEqual_ByteByte_ReturnValue_1) == 0x000002, "Member 'PUZZLE_Base_C_SetPuzzleSolved::CallFunc_EqualEqual_ByteByte_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(PUZZLE_Base_C_SetPuzzleSolved, CallFunc_Not_PreBool_ReturnValue) == 0x000003, "Member 'PUZZLE_Base_C_SetPuzzleSolved::CallFunc_Not_PreBool_ReturnValue' has a wrong offset!");
static_assert(offsetof(PUZZLE_Base_C_SetPuzzleSolved, CallFunc_LoadAsset_Blocking_ReturnValue) == 0x000008, "Member 'PUZZLE_Base_C_SetPuzzleSolved::CallFunc_LoadAsset_Blocking_ReturnValue' has a wrong offset!");
static_assert(offsetof(PUZZLE_Base_C_SetPuzzleSolved, K2Node_DynamicCast_AsAnim_Montage) == 0x000010, "Member 'PUZZLE_Base_C_SetPuzzleSolved::K2Node_DynamicCast_AsAnim_Montage' has a wrong offset!");
static_assert(offsetof(PUZZLE_Base_C_SetPuzzleSolved, K2Node_DynamicCast_bSuccess) == 0x000018, "Member 'PUZZLE_Base_C_SetPuzzleSolved::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(PUZZLE_Base_C_SetPuzzleSolved, CallFunc_GetAnimInstance_AnimInstance) == 0x000020, "Member 'PUZZLE_Base_C_SetPuzzleSolved::CallFunc_GetAnimInstance_AnimInstance' has a wrong offset!");
static_assert(offsetof(PUZZLE_Base_C_SetPuzzleSolved, K2Node_CreateDelegate_OutputDelegate) == 0x000028, "Member 'PUZZLE_Base_C_SetPuzzleSolved::K2Node_CreateDelegate_OutputDelegate' has a wrong offset!");
static_assert(offsetof(PUZZLE_Base_C_SetPuzzleSolved, CallFunc_GetAnimInstance_AnimInstance_1) == 0x000038, "Member 'PUZZLE_Base_C_SetPuzzleSolved::CallFunc_GetAnimInstance_AnimInstance_1' has a wrong offset!");
static_assert(offsetof(PUZZLE_Base_C_SetPuzzleSolved, CallFunc_Montage_Play_ReturnValue) == 0x000040, "Member 'PUZZLE_Base_C_SetPuzzleSolved::CallFunc_Montage_Play_ReturnValue' has a wrong offset!");
static_assert(offsetof(PUZZLE_Base_C_SetPuzzleSolved, CallFunc_Add_FloatFloat_ReturnValue) == 0x000044, "Member 'PUZZLE_Base_C_SetPuzzleSolved::CallFunc_Add_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(PUZZLE_Base_C_SetPuzzleSolved, CallFunc_K2_SetTimerDelegate_ReturnValue) == 0x000048, "Member 'PUZZLE_Base_C_SetPuzzleSolved::CallFunc_K2_SetTimerDelegate_ReturnValue' has a wrong offset!");

// Function PUZZLE_Base.PUZZLE_Base_C.TrySolvePossiblyStalePuzzle
// 0x0003 (0x0003 - 0x0000)
struct PUZZLE_Base_C_TrySolvePossiblyStalePuzzle final
{
public:
	bool                                          CallFunc_Not_PreBool_ReturnValue;                  // 0x0000(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_CanManipulateUnlockTargets_Result;        // 0x0001(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Not_PreBool_ReturnValue_1;                // 0x0002(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(PUZZLE_Base_C_TrySolvePossiblyStalePuzzle) == 0x000001, "Wrong alignment on PUZZLE_Base_C_TrySolvePossiblyStalePuzzle");
static_assert(sizeof(PUZZLE_Base_C_TrySolvePossiblyStalePuzzle) == 0x000003, "Wrong size on PUZZLE_Base_C_TrySolvePossiblyStalePuzzle");
static_assert(offsetof(PUZZLE_Base_C_TrySolvePossiblyStalePuzzle, CallFunc_Not_PreBool_ReturnValue) == 0x000000, "Member 'PUZZLE_Base_C_TrySolvePossiblyStalePuzzle::CallFunc_Not_PreBool_ReturnValue' has a wrong offset!");
static_assert(offsetof(PUZZLE_Base_C_TrySolvePossiblyStalePuzzle, CallFunc_CanManipulateUnlockTargets_Result) == 0x000001, "Member 'PUZZLE_Base_C_TrySolvePossiblyStalePuzzle::CallFunc_CanManipulateUnlockTargets_Result' has a wrong offset!");
static_assert(offsetof(PUZZLE_Base_C_TrySolvePossiblyStalePuzzle, CallFunc_Not_PreBool_ReturnValue_1) == 0x000002, "Member 'PUZZLE_Base_C_TrySolvePossiblyStalePuzzle::CallFunc_Not_PreBool_ReturnValue_1' has a wrong offset!");

// Function PUZZLE_Base.PUZZLE_Base_C.TryChangeUnlockEventBindings
// 0x00C0 (0x00C0 - 0x0000)
struct PUZZLE_Base_C_TryChangeUnlockEventBindings final
{
public:
	class AINTERACT_DoorBase_C*                   CurrentDoor;                                       // 0x0000(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AINTERACT_Base_C*                       CurrentInteractable;                               // 0x0008(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Array_Index_Variable;                     // 0x0010(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TDelegate<void(class AINTERACT_Base_C* Interact)> K2Node_CreateDelegate_OutputDelegate;              // 0x0014(0x0010)(ZeroConstructor, NoDestructor)
	TDelegate<void(class AINTERACT_Base_C* Interact)> K2Node_CreateDelegate_OutputDelegate_1;            // 0x0024(0x0010)(ZeroConstructor, NoDestructor)
	uint8                                         Pad_34[0x4];                                       // 0x0034(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TScriptInterface<class IINTERF_Interactable_C> CallFunc_GetInteractLocked_self_CastInput;         // 0x0038(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_GetInteractLocked_Result;                 // 0x0048(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_49[0x7];                                       // 0x0049(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   CallFunc_GetInteractLocked_LockMessage;            // 0x0050(0x0018)()
	TDelegate<void(class AINTERACT_DoorBase_C* Door, ENUM_DoorState State)> K2Node_CreateDelegate_OutputDelegate_2;            // 0x0068(0x0010)(ZeroConstructor, NoDestructor)
	int32                                         Temp_int_Loop_Counter_Variable;                    // 0x0078(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x007C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_7D[0x3];                                       // 0x007D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Add_IntInt_ReturnValue;                   // 0x0080(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TDelegate<void(class AINTERACT_DoorBase_C* Door, ENUM_DoorState State)> K2Node_CreateDelegate_OutputDelegate_3;            // 0x0084(0x0010)(ZeroConstructor, NoDestructor)
	uint8                                         Pad_94[0x4];                                       // 0x0094(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class AINTERACT_DoorBase_C*                   K2Node_DynamicCast_AsINTERACT_Door_Base;           // 0x0098(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x00A0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_EqualEqual_ByteByte_ReturnValue;          // 0x00A1(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BooleanOR_ReturnValue;                    // 0x00A2(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_A3[0x5];                                       // 0x00A3(0x0005)(Fixing Size After Last Property [ Dumper-7 ])
	class AINTERACT_Base_C*                       CallFunc_Array_Get_Item;                           // 0x00A8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BooleanAND_ReturnValue;                   // 0x00B0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_B1[0x3];                                       // 0x00B1(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Array_Length_ReturnValue;                 // 0x00B4(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue;                  // 0x00B8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(PUZZLE_Base_C_TryChangeUnlockEventBindings) == 0x000008, "Wrong alignment on PUZZLE_Base_C_TryChangeUnlockEventBindings");
static_assert(sizeof(PUZZLE_Base_C_TryChangeUnlockEventBindings) == 0x0000C0, "Wrong size on PUZZLE_Base_C_TryChangeUnlockEventBindings");
static_assert(offsetof(PUZZLE_Base_C_TryChangeUnlockEventBindings, CurrentDoor) == 0x000000, "Member 'PUZZLE_Base_C_TryChangeUnlockEventBindings::CurrentDoor' has a wrong offset!");
static_assert(offsetof(PUZZLE_Base_C_TryChangeUnlockEventBindings, CurrentInteractable) == 0x000008, "Member 'PUZZLE_Base_C_TryChangeUnlockEventBindings::CurrentInteractable' has a wrong offset!");
static_assert(offsetof(PUZZLE_Base_C_TryChangeUnlockEventBindings, Temp_int_Array_Index_Variable) == 0x000010, "Member 'PUZZLE_Base_C_TryChangeUnlockEventBindings::Temp_int_Array_Index_Variable' has a wrong offset!");
static_assert(offsetof(PUZZLE_Base_C_TryChangeUnlockEventBindings, K2Node_CreateDelegate_OutputDelegate) == 0x000014, "Member 'PUZZLE_Base_C_TryChangeUnlockEventBindings::K2Node_CreateDelegate_OutputDelegate' has a wrong offset!");
static_assert(offsetof(PUZZLE_Base_C_TryChangeUnlockEventBindings, K2Node_CreateDelegate_OutputDelegate_1) == 0x000024, "Member 'PUZZLE_Base_C_TryChangeUnlockEventBindings::K2Node_CreateDelegate_OutputDelegate_1' has a wrong offset!");
static_assert(offsetof(PUZZLE_Base_C_TryChangeUnlockEventBindings, CallFunc_GetInteractLocked_self_CastInput) == 0x000038, "Member 'PUZZLE_Base_C_TryChangeUnlockEventBindings::CallFunc_GetInteractLocked_self_CastInput' has a wrong offset!");
static_assert(offsetof(PUZZLE_Base_C_TryChangeUnlockEventBindings, CallFunc_GetInteractLocked_Result) == 0x000048, "Member 'PUZZLE_Base_C_TryChangeUnlockEventBindings::CallFunc_GetInteractLocked_Result' has a wrong offset!");
static_assert(offsetof(PUZZLE_Base_C_TryChangeUnlockEventBindings, CallFunc_GetInteractLocked_LockMessage) == 0x000050, "Member 'PUZZLE_Base_C_TryChangeUnlockEventBindings::CallFunc_GetInteractLocked_LockMessage' has a wrong offset!");
static_assert(offsetof(PUZZLE_Base_C_TryChangeUnlockEventBindings, K2Node_CreateDelegate_OutputDelegate_2) == 0x000068, "Member 'PUZZLE_Base_C_TryChangeUnlockEventBindings::K2Node_CreateDelegate_OutputDelegate_2' has a wrong offset!");
static_assert(offsetof(PUZZLE_Base_C_TryChangeUnlockEventBindings, Temp_int_Loop_Counter_Variable) == 0x000078, "Member 'PUZZLE_Base_C_TryChangeUnlockEventBindings::Temp_int_Loop_Counter_Variable' has a wrong offset!");
static_assert(offsetof(PUZZLE_Base_C_TryChangeUnlockEventBindings, CallFunc_IsValid_ReturnValue) == 0x00007C, "Member 'PUZZLE_Base_C_TryChangeUnlockEventBindings::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(PUZZLE_Base_C_TryChangeUnlockEventBindings, CallFunc_Add_IntInt_ReturnValue) == 0x000080, "Member 'PUZZLE_Base_C_TryChangeUnlockEventBindings::CallFunc_Add_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(PUZZLE_Base_C_TryChangeUnlockEventBindings, K2Node_CreateDelegate_OutputDelegate_3) == 0x000084, "Member 'PUZZLE_Base_C_TryChangeUnlockEventBindings::K2Node_CreateDelegate_OutputDelegate_3' has a wrong offset!");
static_assert(offsetof(PUZZLE_Base_C_TryChangeUnlockEventBindings, K2Node_DynamicCast_AsINTERACT_Door_Base) == 0x000098, "Member 'PUZZLE_Base_C_TryChangeUnlockEventBindings::K2Node_DynamicCast_AsINTERACT_Door_Base' has a wrong offset!");
static_assert(offsetof(PUZZLE_Base_C_TryChangeUnlockEventBindings, K2Node_DynamicCast_bSuccess) == 0x0000A0, "Member 'PUZZLE_Base_C_TryChangeUnlockEventBindings::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(PUZZLE_Base_C_TryChangeUnlockEventBindings, CallFunc_EqualEqual_ByteByte_ReturnValue) == 0x0000A1, "Member 'PUZZLE_Base_C_TryChangeUnlockEventBindings::CallFunc_EqualEqual_ByteByte_ReturnValue' has a wrong offset!");
static_assert(offsetof(PUZZLE_Base_C_TryChangeUnlockEventBindings, CallFunc_BooleanOR_ReturnValue) == 0x0000A2, "Member 'PUZZLE_Base_C_TryChangeUnlockEventBindings::CallFunc_BooleanOR_ReturnValue' has a wrong offset!");
static_assert(offsetof(PUZZLE_Base_C_TryChangeUnlockEventBindings, CallFunc_Array_Get_Item) == 0x0000A8, "Member 'PUZZLE_Base_C_TryChangeUnlockEventBindings::CallFunc_Array_Get_Item' has a wrong offset!");
static_assert(offsetof(PUZZLE_Base_C_TryChangeUnlockEventBindings, CallFunc_BooleanAND_ReturnValue) == 0x0000B0, "Member 'PUZZLE_Base_C_TryChangeUnlockEventBindings::CallFunc_BooleanAND_ReturnValue' has a wrong offset!");
static_assert(offsetof(PUZZLE_Base_C_TryChangeUnlockEventBindings, CallFunc_Array_Length_ReturnValue) == 0x0000B4, "Member 'PUZZLE_Base_C_TryChangeUnlockEventBindings::CallFunc_Array_Length_ReturnValue' has a wrong offset!");
static_assert(offsetof(PUZZLE_Base_C_TryChangeUnlockEventBindings, CallFunc_Less_IntInt_ReturnValue) == 0x0000B8, "Member 'PUZZLE_Base_C_TryChangeUnlockEventBindings::CallFunc_Less_IntInt_ReturnValue' has a wrong offset!");

// Function PUZZLE_Base.PUZZLE_Base_C.TryCompleteOpenTutorial
// 0x0020 (0x0020 - 0x0000)
struct PUZZLE_Base_C_TryCompleteOpenTutorial final
{
public:
	class UGI_SinglePlayer_C*                     GameInstance;                                      // 0x0000(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UGameInstance*                          CallFunc_GetGameInstance_ReturnValue;              // 0x0008(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UGI_SinglePlayer_C*                     K2Node_DynamicCast_AsGI_Single_Player;             // 0x0010(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0018(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_TryCompleteTutorial_Result;               // 0x0019(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(PUZZLE_Base_C_TryCompleteOpenTutorial) == 0x000008, "Wrong alignment on PUZZLE_Base_C_TryCompleteOpenTutorial");
static_assert(sizeof(PUZZLE_Base_C_TryCompleteOpenTutorial) == 0x000020, "Wrong size on PUZZLE_Base_C_TryCompleteOpenTutorial");
static_assert(offsetof(PUZZLE_Base_C_TryCompleteOpenTutorial, GameInstance) == 0x000000, "Member 'PUZZLE_Base_C_TryCompleteOpenTutorial::GameInstance' has a wrong offset!");
static_assert(offsetof(PUZZLE_Base_C_TryCompleteOpenTutorial, CallFunc_GetGameInstance_ReturnValue) == 0x000008, "Member 'PUZZLE_Base_C_TryCompleteOpenTutorial::CallFunc_GetGameInstance_ReturnValue' has a wrong offset!");
static_assert(offsetof(PUZZLE_Base_C_TryCompleteOpenTutorial, K2Node_DynamicCast_AsGI_Single_Player) == 0x000010, "Member 'PUZZLE_Base_C_TryCompleteOpenTutorial::K2Node_DynamicCast_AsGI_Single_Player' has a wrong offset!");
static_assert(offsetof(PUZZLE_Base_C_TryCompleteOpenTutorial, K2Node_DynamicCast_bSuccess) == 0x000018, "Member 'PUZZLE_Base_C_TryCompleteOpenTutorial::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(PUZZLE_Base_C_TryCompleteOpenTutorial, CallFunc_TryCompleteTutorial_Result) == 0x000019, "Member 'PUZZLE_Base_C_TryCompleteOpenTutorial::CallFunc_TryCompleteTutorial_Result' has a wrong offset!");

// Function PUZZLE_Base.PUZZLE_Base_C.OpenPuzzleBox
// 0x0050 (0x0050 - 0x0000)
struct PUZZLE_Base_C_OpenPuzzleBox final
{
public:
	bool                                          Result;                                            // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	TDelegate<void()>                             K2Node_CreateDelegate_OutputDelegate;              // 0x0004(0x0010)(ZeroConstructor, NoDestructor)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UObject*                                CallFunc_LoadAsset_Blocking_ReturnValue;           // 0x0018(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UAnimBP_JunctionBox_C*                  CallFunc_GetAnimInstance_AnimInstance;             // 0x0020(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UAnimMontage*                           K2Node_DynamicCast_AsAnim_Montage;                 // 0x0028(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0030(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_31[0x7];                                       // 0x0031(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UAnimBP_JunctionBox_C*                  CallFunc_GetAnimInstance_AnimInstance_1;           // 0x0038(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Montage_Play_ReturnValue;                 // 0x0040(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_44[0x4];                                       // 0x0044(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTimerHandle                           CallFunc_K2_SetTimerDelegate_ReturnValue;          // 0x0048(0x0008)(NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(PUZZLE_Base_C_OpenPuzzleBox) == 0x000008, "Wrong alignment on PUZZLE_Base_C_OpenPuzzleBox");
static_assert(sizeof(PUZZLE_Base_C_OpenPuzzleBox) == 0x000050, "Wrong size on PUZZLE_Base_C_OpenPuzzleBox");
static_assert(offsetof(PUZZLE_Base_C_OpenPuzzleBox, Result) == 0x000000, "Member 'PUZZLE_Base_C_OpenPuzzleBox::Result' has a wrong offset!");
static_assert(offsetof(PUZZLE_Base_C_OpenPuzzleBox, K2Node_CreateDelegate_OutputDelegate) == 0x000004, "Member 'PUZZLE_Base_C_OpenPuzzleBox::K2Node_CreateDelegate_OutputDelegate' has a wrong offset!");
static_assert(offsetof(PUZZLE_Base_C_OpenPuzzleBox, CallFunc_LoadAsset_Blocking_ReturnValue) == 0x000018, "Member 'PUZZLE_Base_C_OpenPuzzleBox::CallFunc_LoadAsset_Blocking_ReturnValue' has a wrong offset!");
static_assert(offsetof(PUZZLE_Base_C_OpenPuzzleBox, CallFunc_GetAnimInstance_AnimInstance) == 0x000020, "Member 'PUZZLE_Base_C_OpenPuzzleBox::CallFunc_GetAnimInstance_AnimInstance' has a wrong offset!");
static_assert(offsetof(PUZZLE_Base_C_OpenPuzzleBox, K2Node_DynamicCast_AsAnim_Montage) == 0x000028, "Member 'PUZZLE_Base_C_OpenPuzzleBox::K2Node_DynamicCast_AsAnim_Montage' has a wrong offset!");
static_assert(offsetof(PUZZLE_Base_C_OpenPuzzleBox, K2Node_DynamicCast_bSuccess) == 0x000030, "Member 'PUZZLE_Base_C_OpenPuzzleBox::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(PUZZLE_Base_C_OpenPuzzleBox, CallFunc_GetAnimInstance_AnimInstance_1) == 0x000038, "Member 'PUZZLE_Base_C_OpenPuzzleBox::CallFunc_GetAnimInstance_AnimInstance_1' has a wrong offset!");
static_assert(offsetof(PUZZLE_Base_C_OpenPuzzleBox, CallFunc_Montage_Play_ReturnValue) == 0x000040, "Member 'PUZZLE_Base_C_OpenPuzzleBox::CallFunc_Montage_Play_ReturnValue' has a wrong offset!");
static_assert(offsetof(PUZZLE_Base_C_OpenPuzzleBox, CallFunc_K2_SetTimerDelegate_ReturnValue) == 0x000048, "Member 'PUZZLE_Base_C_OpenPuzzleBox::CallFunc_K2_SetTimerDelegate_ReturnValue' has a wrong offset!");

// Function PUZZLE_Base.PUZZLE_Base_C.RegisterPuzzleCell
// 0x0010 (0x0010 - 0x0000)
struct PUZZLE_Base_C_RegisterPuzzleCell final
{
public:
	class UCOMP_PuzzleCell_Base_C*                PuzzleCell;                                        // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Add_ReturnValue;                    // 0x0008(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(PUZZLE_Base_C_RegisterPuzzleCell) == 0x000008, "Wrong alignment on PUZZLE_Base_C_RegisterPuzzleCell");
static_assert(sizeof(PUZZLE_Base_C_RegisterPuzzleCell) == 0x000010, "Wrong size on PUZZLE_Base_C_RegisterPuzzleCell");
static_assert(offsetof(PUZZLE_Base_C_RegisterPuzzleCell, PuzzleCell) == 0x000000, "Member 'PUZZLE_Base_C_RegisterPuzzleCell::PuzzleCell' has a wrong offset!");
static_assert(offsetof(PUZZLE_Base_C_RegisterPuzzleCell, CallFunc_Array_Add_ReturnValue) == 0x000008, "Member 'PUZZLE_Base_C_RegisterPuzzleCell::CallFunc_Array_Add_ReturnValue' has a wrong offset!");

// Function PUZZLE_Base.PUZZLE_Base_C.RegisterSpecialComponent
// 0x0010 (0x0010 - 0x0000)
struct PUZZLE_Base_C_RegisterSpecialComponent final
{
public:
	class UMeshComponent*                         MeshComponent;                                     // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Add_ReturnValue;                    // 0x0008(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(PUZZLE_Base_C_RegisterSpecialComponent) == 0x000008, "Wrong alignment on PUZZLE_Base_C_RegisterSpecialComponent");
static_assert(sizeof(PUZZLE_Base_C_RegisterSpecialComponent) == 0x000010, "Wrong size on PUZZLE_Base_C_RegisterSpecialComponent");
static_assert(offsetof(PUZZLE_Base_C_RegisterSpecialComponent, MeshComponent) == 0x000000, "Member 'PUZZLE_Base_C_RegisterSpecialComponent::MeshComponent' has a wrong offset!");
static_assert(offsetof(PUZZLE_Base_C_RegisterSpecialComponent, CallFunc_Array_Add_ReturnValue) == 0x000008, "Member 'PUZZLE_Base_C_RegisterSpecialComponent::CallFunc_Array_Add_ReturnValue' has a wrong offset!");

// Function PUZZLE_Base.PUZZLE_Base_C.UpdateMeshEmissiveStrength
// 0x0030 (0x0030 - 0x0000)
struct PUZZLE_Base_C_UpdateMeshEmissiveStrength final
{
public:
	float                                         Scale;                                             // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Multiply_FloatFloat_ReturnValue;          // 0x0004(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TArray<float>                                 K2Node_MakeArray_Array;                            // 0x0008(0x0010)(ConstParm, ReferenceParm)
	TArray<float>                                 K2Node_MakeArray_Array_1;                          // 0x0018(0x0010)(ConstParm, ReferenceParm)
	float                                         CallFunc_Conv_BoolToFloat_ReturnValue;             // 0x0028(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Multiply_FloatFloat_ReturnValue_1;        // 0x002C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(PUZZLE_Base_C_UpdateMeshEmissiveStrength) == 0x000008, "Wrong alignment on PUZZLE_Base_C_UpdateMeshEmissiveStrength");
static_assert(sizeof(PUZZLE_Base_C_UpdateMeshEmissiveStrength) == 0x000030, "Wrong size on PUZZLE_Base_C_UpdateMeshEmissiveStrength");
static_assert(offsetof(PUZZLE_Base_C_UpdateMeshEmissiveStrength, Scale) == 0x000000, "Member 'PUZZLE_Base_C_UpdateMeshEmissiveStrength::Scale' has a wrong offset!");
static_assert(offsetof(PUZZLE_Base_C_UpdateMeshEmissiveStrength, CallFunc_Multiply_FloatFloat_ReturnValue) == 0x000004, "Member 'PUZZLE_Base_C_UpdateMeshEmissiveStrength::CallFunc_Multiply_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(PUZZLE_Base_C_UpdateMeshEmissiveStrength, K2Node_MakeArray_Array) == 0x000008, "Member 'PUZZLE_Base_C_UpdateMeshEmissiveStrength::K2Node_MakeArray_Array' has a wrong offset!");
static_assert(offsetof(PUZZLE_Base_C_UpdateMeshEmissiveStrength, K2Node_MakeArray_Array_1) == 0x000018, "Member 'PUZZLE_Base_C_UpdateMeshEmissiveStrength::K2Node_MakeArray_Array_1' has a wrong offset!");
static_assert(offsetof(PUZZLE_Base_C_UpdateMeshEmissiveStrength, CallFunc_Conv_BoolToFloat_ReturnValue) == 0x000028, "Member 'PUZZLE_Base_C_UpdateMeshEmissiveStrength::CallFunc_Conv_BoolToFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(PUZZLE_Base_C_UpdateMeshEmissiveStrength, CallFunc_Multiply_FloatFloat_ReturnValue_1) == 0x00002C, "Member 'PUZZLE_Base_C_UpdateMeshEmissiveStrength::CallFunc_Multiply_FloatFloat_ReturnValue_1' has a wrong offset!");

// Function PUZZLE_Base.PUZZLE_Base_C.UpdatePuzzleVisibility
// 0x0040 (0x0040 - 0x0000)
struct PUZZLE_Base_C_UpdatePuzzleVisibility final
{
public:
	bool                                          VisibilityState;                                   // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Temp_int_Loop_Counter_Variable;                    // 0x0004(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue;                   // 0x0008(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Array_Index_Variable;                     // 0x000C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Array_Index_Variable_1;                   // 0x0010(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Loop_Counter_Variable_1;                  // 0x0014(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UMeshComponent*                         CallFunc_Array_Get_Item;                           // 0x0018(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Length_ReturnValue;                 // 0x0020(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue;                  // 0x0024(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_25[0x3];                                       // 0x0025(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Add_IntInt_ReturnValue_1;                 // 0x0028(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_2C[0x4];                                       // 0x002C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UCOMP_PuzzleCell_Base_C*                CallFunc_Array_Get_Item_1;                         // 0x0030(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Length_ReturnValue_1;               // 0x0038(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_SetCellVisibility_Result;                 // 0x003C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Less_IntInt_ReturnValue_1;                // 0x003D(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BooleanAND_ReturnValue;                   // 0x003E(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BooleanAND_ReturnValue_1;                 // 0x003F(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(PUZZLE_Base_C_UpdatePuzzleVisibility) == 0x000008, "Wrong alignment on PUZZLE_Base_C_UpdatePuzzleVisibility");
static_assert(sizeof(PUZZLE_Base_C_UpdatePuzzleVisibility) == 0x000040, "Wrong size on PUZZLE_Base_C_UpdatePuzzleVisibility");
static_assert(offsetof(PUZZLE_Base_C_UpdatePuzzleVisibility, VisibilityState) == 0x000000, "Member 'PUZZLE_Base_C_UpdatePuzzleVisibility::VisibilityState' has a wrong offset!");
static_assert(offsetof(PUZZLE_Base_C_UpdatePuzzleVisibility, Temp_int_Loop_Counter_Variable) == 0x000004, "Member 'PUZZLE_Base_C_UpdatePuzzleVisibility::Temp_int_Loop_Counter_Variable' has a wrong offset!");
static_assert(offsetof(PUZZLE_Base_C_UpdatePuzzleVisibility, CallFunc_Add_IntInt_ReturnValue) == 0x000008, "Member 'PUZZLE_Base_C_UpdatePuzzleVisibility::CallFunc_Add_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(PUZZLE_Base_C_UpdatePuzzleVisibility, Temp_int_Array_Index_Variable) == 0x00000C, "Member 'PUZZLE_Base_C_UpdatePuzzleVisibility::Temp_int_Array_Index_Variable' has a wrong offset!");
static_assert(offsetof(PUZZLE_Base_C_UpdatePuzzleVisibility, Temp_int_Array_Index_Variable_1) == 0x000010, "Member 'PUZZLE_Base_C_UpdatePuzzleVisibility::Temp_int_Array_Index_Variable_1' has a wrong offset!");
static_assert(offsetof(PUZZLE_Base_C_UpdatePuzzleVisibility, Temp_int_Loop_Counter_Variable_1) == 0x000014, "Member 'PUZZLE_Base_C_UpdatePuzzleVisibility::Temp_int_Loop_Counter_Variable_1' has a wrong offset!");
static_assert(offsetof(PUZZLE_Base_C_UpdatePuzzleVisibility, CallFunc_Array_Get_Item) == 0x000018, "Member 'PUZZLE_Base_C_UpdatePuzzleVisibility::CallFunc_Array_Get_Item' has a wrong offset!");
static_assert(offsetof(PUZZLE_Base_C_UpdatePuzzleVisibility, CallFunc_Array_Length_ReturnValue) == 0x000020, "Member 'PUZZLE_Base_C_UpdatePuzzleVisibility::CallFunc_Array_Length_ReturnValue' has a wrong offset!");
static_assert(offsetof(PUZZLE_Base_C_UpdatePuzzleVisibility, CallFunc_Less_IntInt_ReturnValue) == 0x000024, "Member 'PUZZLE_Base_C_UpdatePuzzleVisibility::CallFunc_Less_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(PUZZLE_Base_C_UpdatePuzzleVisibility, CallFunc_Add_IntInt_ReturnValue_1) == 0x000028, "Member 'PUZZLE_Base_C_UpdatePuzzleVisibility::CallFunc_Add_IntInt_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(PUZZLE_Base_C_UpdatePuzzleVisibility, CallFunc_Array_Get_Item_1) == 0x000030, "Member 'PUZZLE_Base_C_UpdatePuzzleVisibility::CallFunc_Array_Get_Item_1' has a wrong offset!");
static_assert(offsetof(PUZZLE_Base_C_UpdatePuzzleVisibility, CallFunc_Array_Length_ReturnValue_1) == 0x000038, "Member 'PUZZLE_Base_C_UpdatePuzzleVisibility::CallFunc_Array_Length_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(PUZZLE_Base_C_UpdatePuzzleVisibility, CallFunc_SetCellVisibility_Result) == 0x00003C, "Member 'PUZZLE_Base_C_UpdatePuzzleVisibility::CallFunc_SetCellVisibility_Result' has a wrong offset!");
static_assert(offsetof(PUZZLE_Base_C_UpdatePuzzleVisibility, CallFunc_Less_IntInt_ReturnValue_1) == 0x00003D, "Member 'PUZZLE_Base_C_UpdatePuzzleVisibility::CallFunc_Less_IntInt_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(PUZZLE_Base_C_UpdatePuzzleVisibility, CallFunc_BooleanAND_ReturnValue) == 0x00003E, "Member 'PUZZLE_Base_C_UpdatePuzzleVisibility::CallFunc_BooleanAND_ReturnValue' has a wrong offset!");
static_assert(offsetof(PUZZLE_Base_C_UpdatePuzzleVisibility, CallFunc_BooleanAND_ReturnValue_1) == 0x00003F, "Member 'PUZZLE_Base_C_UpdatePuzzleVisibility::CallFunc_BooleanAND_ReturnValue_1' has a wrong offset!");

// Function PUZZLE_Base.PUZZLE_Base_C.EVENT_OnSecurityLevelChanged
// 0x0030 (0x0030 - 0x0000)
struct PUZZLE_Base_C_EVENT_OnSecurityLevelChanged final
{
public:
	int32                                         NewSecurityLevel;                                  // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TDelegate<void(int32 NewSecurityLevel)>       K2Node_CreateDelegate_OutputDelegate;              // 0x0004(0x0010)(ZeroConstructor, NoDestructor)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UGameInstance*                          CallFunc_GetGameInstance_ReturnValue;              // 0x0018(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UGI_SinglePlayer_C*                     K2Node_DynamicCast_AsGI_Single_Player;             // 0x0020(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0028(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_LessEqual_IntInt_ReturnValue;             // 0x0029(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(PUZZLE_Base_C_EVENT_OnSecurityLevelChanged) == 0x000008, "Wrong alignment on PUZZLE_Base_C_EVENT_OnSecurityLevelChanged");
static_assert(sizeof(PUZZLE_Base_C_EVENT_OnSecurityLevelChanged) == 0x000030, "Wrong size on PUZZLE_Base_C_EVENT_OnSecurityLevelChanged");
static_assert(offsetof(PUZZLE_Base_C_EVENT_OnSecurityLevelChanged, NewSecurityLevel) == 0x000000, "Member 'PUZZLE_Base_C_EVENT_OnSecurityLevelChanged::NewSecurityLevel' has a wrong offset!");
static_assert(offsetof(PUZZLE_Base_C_EVENT_OnSecurityLevelChanged, K2Node_CreateDelegate_OutputDelegate) == 0x000004, "Member 'PUZZLE_Base_C_EVENT_OnSecurityLevelChanged::K2Node_CreateDelegate_OutputDelegate' has a wrong offset!");
static_assert(offsetof(PUZZLE_Base_C_EVENT_OnSecurityLevelChanged, CallFunc_GetGameInstance_ReturnValue) == 0x000018, "Member 'PUZZLE_Base_C_EVENT_OnSecurityLevelChanged::CallFunc_GetGameInstance_ReturnValue' has a wrong offset!");
static_assert(offsetof(PUZZLE_Base_C_EVENT_OnSecurityLevelChanged, K2Node_DynamicCast_AsGI_Single_Player) == 0x000020, "Member 'PUZZLE_Base_C_EVENT_OnSecurityLevelChanged::K2Node_DynamicCast_AsGI_Single_Player' has a wrong offset!");
static_assert(offsetof(PUZZLE_Base_C_EVENT_OnSecurityLevelChanged, K2Node_DynamicCast_bSuccess) == 0x000028, "Member 'PUZZLE_Base_C_EVENT_OnSecurityLevelChanged::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(PUZZLE_Base_C_EVENT_OnSecurityLevelChanged, CallFunc_LessEqual_IntInt_ReturnValue) == 0x000029, "Member 'PUZZLE_Base_C_EVENT_OnSecurityLevelChanged::CallFunc_LessEqual_IntInt_ReturnValue' has a wrong offset!");

// Function PUZZLE_Base.PUZZLE_Base_C.GetFocusWorldTransform
// 0x0060 (0x0060 - 0x0000)
struct PUZZLE_Base_C_GetFocusWorldTransform final
{
public:
	struct FTransform                             Transform;                                         // 0x0000(0x0030)(Parm, OutParm, IsPlainOldData, NoDestructor)
	struct FTransform                             CallFunc_K2_GetComponentToWorld_ReturnValue;       // 0x0030(0x0030)(IsPlainOldData, NoDestructor)
};
static_assert(alignof(PUZZLE_Base_C_GetFocusWorldTransform) == 0x000010, "Wrong alignment on PUZZLE_Base_C_GetFocusWorldTransform");
static_assert(sizeof(PUZZLE_Base_C_GetFocusWorldTransform) == 0x000060, "Wrong size on PUZZLE_Base_C_GetFocusWorldTransform");
static_assert(offsetof(PUZZLE_Base_C_GetFocusWorldTransform, Transform) == 0x000000, "Member 'PUZZLE_Base_C_GetFocusWorldTransform::Transform' has a wrong offset!");
static_assert(offsetof(PUZZLE_Base_C_GetFocusWorldTransform, CallFunc_K2_GetComponentToWorld_ReturnValue) == 0x000030, "Member 'PUZZLE_Base_C_GetFocusWorldTransform::CallFunc_K2_GetComponentToWorld_ReturnValue' has a wrong offset!");

// Function PUZZLE_Base.PUZZLE_Base_C.GetCellChanges
// 0x0004 (0x0004 - 0x0000)
struct PUZZLE_Base_C_GetCellChanges final
{
public:
	uint8                                         Index_0;                                           // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Result;                                            // 0x0001(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         CallFunc_Map_Find_Value;                           // 0x0002(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Map_Find_ReturnValue;                     // 0x0003(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(PUZZLE_Base_C_GetCellChanges) == 0x000001, "Wrong alignment on PUZZLE_Base_C_GetCellChanges");
static_assert(sizeof(PUZZLE_Base_C_GetCellChanges) == 0x000004, "Wrong size on PUZZLE_Base_C_GetCellChanges");
static_assert(offsetof(PUZZLE_Base_C_GetCellChanges, Index_0) == 0x000000, "Member 'PUZZLE_Base_C_GetCellChanges::Index_0' has a wrong offset!");
static_assert(offsetof(PUZZLE_Base_C_GetCellChanges, Result) == 0x000001, "Member 'PUZZLE_Base_C_GetCellChanges::Result' has a wrong offset!");
static_assert(offsetof(PUZZLE_Base_C_GetCellChanges, CallFunc_Map_Find_Value) == 0x000002, "Member 'PUZZLE_Base_C_GetCellChanges::CallFunc_Map_Find_Value' has a wrong offset!");
static_assert(offsetof(PUZZLE_Base_C_GetCellChanges, CallFunc_Map_Find_ReturnValue) == 0x000003, "Member 'PUZZLE_Base_C_GetCellChanges::CallFunc_Map_Find_ReturnValue' has a wrong offset!");

// Function PUZZLE_Base.PUZZLE_Base_C.SaveCellChanges
// 0x0002 (0x0002 - 0x0000)
struct PUZZLE_Base_C_SaveCellChanges final
{
public:
	uint8                                         Index_0;                                           // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Params_0;                                          // 0x0001(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(PUZZLE_Base_C_SaveCellChanges) == 0x000001, "Wrong alignment on PUZZLE_Base_C_SaveCellChanges");
static_assert(sizeof(PUZZLE_Base_C_SaveCellChanges) == 0x000002, "Wrong size on PUZZLE_Base_C_SaveCellChanges");
static_assert(offsetof(PUZZLE_Base_C_SaveCellChanges, Index_0) == 0x000000, "Member 'PUZZLE_Base_C_SaveCellChanges::Index_0' has a wrong offset!");
static_assert(offsetof(PUZZLE_Base_C_SaveCellChanges, Params_0) == 0x000001, "Member 'PUZZLE_Base_C_SaveCellChanges::Params_0' has a wrong offset!");

// Function PUZZLE_Base.PUZZLE_Base_C.ApplySavedCellChanges
// 0x0048 (0x0048 - 0x0000)
struct PUZZLE_Base_C_ApplySavedCellChanges final
{
public:
	uint8                                         CurrentCellParams;                                 // 0x0000(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UCOMP_PuzzleCell_Base_C*                CurrentCellComponent;                              // 0x0008(0x0008)(Edit, BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         CurrentCellIndex;                                  // 0x0010(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_11[0x3];                                       // 0x0011(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Temp_int_Array_Index_Variable;                     // 0x0014(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Loop_Counter_Variable;                    // 0x0018(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue;                   // 0x001C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_SetModifiedCellParameters_Result;         // 0x0020(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         CallFunc_Map_Find_Value;                           // 0x0021(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Map_Find_ReturnValue;                     // 0x0022(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_23[0x1];                                       // 0x0023(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Conv_ByteToInt_ReturnValue;               // 0x0024(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UCOMP_PuzzleCell_Base_C*                CallFunc_Array_Get_Item;                           // 0x0028(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TArray<uint8>                                 CallFunc_Map_Keys_Keys;                            // 0x0030(0x0010)(ReferenceParm)
	int32                                         CallFunc_Array_Length_ReturnValue;                 // 0x0040(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         CallFunc_Array_Get_Item_1;                         // 0x0044(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue;                  // 0x0045(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(PUZZLE_Base_C_ApplySavedCellChanges) == 0x000008, "Wrong alignment on PUZZLE_Base_C_ApplySavedCellChanges");
static_assert(sizeof(PUZZLE_Base_C_ApplySavedCellChanges) == 0x000048, "Wrong size on PUZZLE_Base_C_ApplySavedCellChanges");
static_assert(offsetof(PUZZLE_Base_C_ApplySavedCellChanges, CurrentCellParams) == 0x000000, "Member 'PUZZLE_Base_C_ApplySavedCellChanges::CurrentCellParams' has a wrong offset!");
static_assert(offsetof(PUZZLE_Base_C_ApplySavedCellChanges, CurrentCellComponent) == 0x000008, "Member 'PUZZLE_Base_C_ApplySavedCellChanges::CurrentCellComponent' has a wrong offset!");
static_assert(offsetof(PUZZLE_Base_C_ApplySavedCellChanges, CurrentCellIndex) == 0x000010, "Member 'PUZZLE_Base_C_ApplySavedCellChanges::CurrentCellIndex' has a wrong offset!");
static_assert(offsetof(PUZZLE_Base_C_ApplySavedCellChanges, Temp_int_Array_Index_Variable) == 0x000014, "Member 'PUZZLE_Base_C_ApplySavedCellChanges::Temp_int_Array_Index_Variable' has a wrong offset!");
static_assert(offsetof(PUZZLE_Base_C_ApplySavedCellChanges, Temp_int_Loop_Counter_Variable) == 0x000018, "Member 'PUZZLE_Base_C_ApplySavedCellChanges::Temp_int_Loop_Counter_Variable' has a wrong offset!");
static_assert(offsetof(PUZZLE_Base_C_ApplySavedCellChanges, CallFunc_Add_IntInt_ReturnValue) == 0x00001C, "Member 'PUZZLE_Base_C_ApplySavedCellChanges::CallFunc_Add_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(PUZZLE_Base_C_ApplySavedCellChanges, CallFunc_SetModifiedCellParameters_Result) == 0x000020, "Member 'PUZZLE_Base_C_ApplySavedCellChanges::CallFunc_SetModifiedCellParameters_Result' has a wrong offset!");
static_assert(offsetof(PUZZLE_Base_C_ApplySavedCellChanges, CallFunc_Map_Find_Value) == 0x000021, "Member 'PUZZLE_Base_C_ApplySavedCellChanges::CallFunc_Map_Find_Value' has a wrong offset!");
static_assert(offsetof(PUZZLE_Base_C_ApplySavedCellChanges, CallFunc_Map_Find_ReturnValue) == 0x000022, "Member 'PUZZLE_Base_C_ApplySavedCellChanges::CallFunc_Map_Find_ReturnValue' has a wrong offset!");
static_assert(offsetof(PUZZLE_Base_C_ApplySavedCellChanges, CallFunc_Conv_ByteToInt_ReturnValue) == 0x000024, "Member 'PUZZLE_Base_C_ApplySavedCellChanges::CallFunc_Conv_ByteToInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(PUZZLE_Base_C_ApplySavedCellChanges, CallFunc_Array_Get_Item) == 0x000028, "Member 'PUZZLE_Base_C_ApplySavedCellChanges::CallFunc_Array_Get_Item' has a wrong offset!");
static_assert(offsetof(PUZZLE_Base_C_ApplySavedCellChanges, CallFunc_Map_Keys_Keys) == 0x000030, "Member 'PUZZLE_Base_C_ApplySavedCellChanges::CallFunc_Map_Keys_Keys' has a wrong offset!");
static_assert(offsetof(PUZZLE_Base_C_ApplySavedCellChanges, CallFunc_Array_Length_ReturnValue) == 0x000040, "Member 'PUZZLE_Base_C_ApplySavedCellChanges::CallFunc_Array_Length_ReturnValue' has a wrong offset!");
static_assert(offsetof(PUZZLE_Base_C_ApplySavedCellChanges, CallFunc_Array_Get_Item_1) == 0x000044, "Member 'PUZZLE_Base_C_ApplySavedCellChanges::CallFunc_Array_Get_Item_1' has a wrong offset!");
static_assert(offsetof(PUZZLE_Base_C_ApplySavedCellChanges, CallFunc_Less_IntInt_ReturnValue) == 0x000045, "Member 'PUZZLE_Base_C_ApplySavedCellChanges::CallFunc_Less_IntInt_ReturnValue' has a wrong offset!");

// Function PUZZLE_Base.PUZZLE_Base_C.IsJunctionBoxFunctional
// 0x000C (0x000C - 0x0000)
struct PUZZLE_Base_C_IsJunctionBoxFunctional final
{
public:
	bool                                          Result;                                            // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_GetAttribValue_ReturnValue;               // 0x0004(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_LessEqual_FloatFloat_ReturnValue;         // 0x0008(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(PUZZLE_Base_C_IsJunctionBoxFunctional) == 0x000004, "Wrong alignment on PUZZLE_Base_C_IsJunctionBoxFunctional");
static_assert(sizeof(PUZZLE_Base_C_IsJunctionBoxFunctional) == 0x00000C, "Wrong size on PUZZLE_Base_C_IsJunctionBoxFunctional");
static_assert(offsetof(PUZZLE_Base_C_IsJunctionBoxFunctional, Result) == 0x000000, "Member 'PUZZLE_Base_C_IsJunctionBoxFunctional::Result' has a wrong offset!");
static_assert(offsetof(PUZZLE_Base_C_IsJunctionBoxFunctional, CallFunc_GetAttribValue_ReturnValue) == 0x000004, "Member 'PUZZLE_Base_C_IsJunctionBoxFunctional::CallFunc_GetAttribValue_ReturnValue' has a wrong offset!");
static_assert(offsetof(PUZZLE_Base_C_IsJunctionBoxFunctional, CallFunc_LessEqual_FloatFloat_ReturnValue) == 0x000008, "Member 'PUZZLE_Base_C_IsJunctionBoxFunctional::CallFunc_LessEqual_FloatFloat_ReturnValue' has a wrong offset!");

// Function PUZZLE_Base.PUZZLE_Base_C.IsPuzzleSolved
// 0x0001 (0x0001 - 0x0000)
struct PUZZLE_Base_C_IsPuzzleSolved final
{
public:
	bool                                          Result;                                            // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(PUZZLE_Base_C_IsPuzzleSolved) == 0x000001, "Wrong alignment on PUZZLE_Base_C_IsPuzzleSolved");
static_assert(sizeof(PUZZLE_Base_C_IsPuzzleSolved) == 0x000001, "Wrong size on PUZZLE_Base_C_IsPuzzleSolved");
static_assert(offsetof(PUZZLE_Base_C_IsPuzzleSolved, Result) == 0x000000, "Member 'PUZZLE_Base_C_IsPuzzleSolved::Result' has a wrong offset!");

// Function PUZZLE_Base.PUZZLE_Base_C.IsVerticalAxisReversed
// 0x0001 (0x0001 - 0x0000)
struct PUZZLE_Base_C_IsVerticalAxisReversed final
{
public:
	bool                                          Result;                                            // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(PUZZLE_Base_C_IsVerticalAxisReversed) == 0x000001, "Wrong alignment on PUZZLE_Base_C_IsVerticalAxisReversed");
static_assert(sizeof(PUZZLE_Base_C_IsVerticalAxisReversed) == 0x000001, "Wrong size on PUZZLE_Base_C_IsVerticalAxisReversed");
static_assert(offsetof(PUZZLE_Base_C_IsVerticalAxisReversed, Result) == 0x000000, "Member 'PUZZLE_Base_C_IsVerticalAxisReversed::Result' has a wrong offset!");

// Function PUZZLE_Base.PUZZLE_Base_C.GetGridDimensions
// 0x0004 (0x0004 - 0x0000)
struct PUZZLE_Base_C_GetGridDimensions final
{
public:
	int32                                         Result;                                            // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(PUZZLE_Base_C_GetGridDimensions) == 0x000004, "Wrong alignment on PUZZLE_Base_C_GetGridDimensions");
static_assert(sizeof(PUZZLE_Base_C_GetGridDimensions) == 0x000004, "Wrong size on PUZZLE_Base_C_GetGridDimensions");
static_assert(offsetof(PUZZLE_Base_C_GetGridDimensions, Result) == 0x000000, "Member 'PUZZLE_Base_C_GetGridDimensions::Result' has a wrong offset!");

// Function PUZZLE_Base.PUZZLE_Base_C.GetCellAtLocation
// 0x0030 (0x0030 - 0x0000)
struct PUZZLE_Base_C_GetCellAtLocation final
{
public:
	struct FIntPoint                              Location;                                          // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UCOMP_PuzzleCell_Base_C*                Cell;                                              // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue;                  // 0x0010(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_GreaterEqual_IntInt_ReturnValue;          // 0x0011(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Less_IntInt_ReturnValue_1;                // 0x0012(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_GreaterEqual_IntInt_ReturnValue_1;        // 0x0013(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BooleanAND_ReturnValue;                   // 0x0014(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BooleanAND_ReturnValue_1;                 // 0x0015(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_16[0x2];                                       // 0x0016(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Multiply_IntInt_ReturnValue;              // 0x0018(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BooleanAND_ReturnValue_2;                 // 0x001C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_1D[0x3];                                       // 0x001D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Add_IntInt_ReturnValue;                   // 0x0020(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_24[0x4];                                       // 0x0024(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UCOMP_PuzzleCell_Base_C*                CallFunc_Array_Get_Item;                           // 0x0028(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(PUZZLE_Base_C_GetCellAtLocation) == 0x000008, "Wrong alignment on PUZZLE_Base_C_GetCellAtLocation");
static_assert(sizeof(PUZZLE_Base_C_GetCellAtLocation) == 0x000030, "Wrong size on PUZZLE_Base_C_GetCellAtLocation");
static_assert(offsetof(PUZZLE_Base_C_GetCellAtLocation, Location) == 0x000000, "Member 'PUZZLE_Base_C_GetCellAtLocation::Location' has a wrong offset!");
static_assert(offsetof(PUZZLE_Base_C_GetCellAtLocation, Cell) == 0x000008, "Member 'PUZZLE_Base_C_GetCellAtLocation::Cell' has a wrong offset!");
static_assert(offsetof(PUZZLE_Base_C_GetCellAtLocation, CallFunc_Less_IntInt_ReturnValue) == 0x000010, "Member 'PUZZLE_Base_C_GetCellAtLocation::CallFunc_Less_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(PUZZLE_Base_C_GetCellAtLocation, CallFunc_GreaterEqual_IntInt_ReturnValue) == 0x000011, "Member 'PUZZLE_Base_C_GetCellAtLocation::CallFunc_GreaterEqual_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(PUZZLE_Base_C_GetCellAtLocation, CallFunc_Less_IntInt_ReturnValue_1) == 0x000012, "Member 'PUZZLE_Base_C_GetCellAtLocation::CallFunc_Less_IntInt_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(PUZZLE_Base_C_GetCellAtLocation, CallFunc_GreaterEqual_IntInt_ReturnValue_1) == 0x000013, "Member 'PUZZLE_Base_C_GetCellAtLocation::CallFunc_GreaterEqual_IntInt_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(PUZZLE_Base_C_GetCellAtLocation, CallFunc_BooleanAND_ReturnValue) == 0x000014, "Member 'PUZZLE_Base_C_GetCellAtLocation::CallFunc_BooleanAND_ReturnValue' has a wrong offset!");
static_assert(offsetof(PUZZLE_Base_C_GetCellAtLocation, CallFunc_BooleanAND_ReturnValue_1) == 0x000015, "Member 'PUZZLE_Base_C_GetCellAtLocation::CallFunc_BooleanAND_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(PUZZLE_Base_C_GetCellAtLocation, CallFunc_Multiply_IntInt_ReturnValue) == 0x000018, "Member 'PUZZLE_Base_C_GetCellAtLocation::CallFunc_Multiply_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(PUZZLE_Base_C_GetCellAtLocation, CallFunc_BooleanAND_ReturnValue_2) == 0x00001C, "Member 'PUZZLE_Base_C_GetCellAtLocation::CallFunc_BooleanAND_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(PUZZLE_Base_C_GetCellAtLocation, CallFunc_Add_IntInt_ReturnValue) == 0x000020, "Member 'PUZZLE_Base_C_GetCellAtLocation::CallFunc_Add_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(PUZZLE_Base_C_GetCellAtLocation, CallFunc_Array_Get_Item) == 0x000028, "Member 'PUZZLE_Base_C_GetCellAtLocation::CallFunc_Array_Get_Item' has a wrong offset!");

// Function PUZZLE_Base.PUZZLE_Base_C.CycleFocusedPrimitiveComponent
// 0x0160 (0x0160 - 0x0000)
struct PUZZLE_Base_C_CycleFocusedPrimitiveComponent final
{
public:
	class UPrimitiveComponent*                    CursorPrimitive;                                   // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Vertical;                                          // 0x0008(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Previous;                                          // 0x0009(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_A[0x6];                                        // 0x000A(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class UCOMP_PuzzleCell_Base_C*                CandidateCellComponent;                            // 0x0010(0x0008)(Edit, BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FIntPoint                              CurrentCellLocation;                               // 0x0018(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CurrentRightOffset;                                // 0x0020(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         TraverseRightSign;                                 // 0x0024(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FIntPoint                              CurrentForwardCellLocation;                        // 0x0028(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FIntPoint                              CycleRightDirection;                               // 0x0030(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FIntPoint                              CycleForwardDirection;                             // 0x0038(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CurrentTraverseRightCount;                         // 0x0040(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CycleDirectionSign;                                // 0x0044(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FIntPoint                              CellLocation;                                      // 0x0048(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CellIndex;                                         // 0x0050(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_54[0x4];                                       // 0x0054(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UCOMP_PuzzleCell_Base_C*                CursorCellComponent;                               // 0x0058(0x0008)(Edit, BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash)
	bool                                          Temp_bool_Variable;                                // 0x0060(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_61[0x7];                                       // 0x0061(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UCOMP_PuzzleCell_Base_C*                CallFunc_GetCellComponentFromPrimitive_Result;     // 0x0068(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Variable;                                 // 0x0070(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Variable_1;                               // 0x0074(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Variable_1;                              // 0x0078(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_79[0x3];                                       // 0x0079(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Temp_int_Variable_2;                               // 0x007C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Variable_3;                               // 0x0080(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_GreaterEqual_IntInt_ReturnValue;          // 0x0084(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_85[0x3];                                       // 0x0085(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Temp_int_Variable_4;                               // 0x0088(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Variable_5;                               // 0x008C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue;                   // 0x0090(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Variable_6;                               // 0x0094(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Variable_7;                               // 0x0098(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Variable_8;                               // 0x009C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue_1;                 // 0x00A0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Variable_9;                               // 0x00A4(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Variable_2;                              // 0x00A8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsVerticalAxisReversed_Result;            // 0x00A9(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_AA[0x2];                                       // 0x00AA(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Temp_int_Variable_10;                              // 0x00AC(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         K2Node_Select_Default;                             // 0x00B0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         K2Node_Select_Default_1;                           // 0x00B4(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Greater_IntInt_ReturnValue;               // 0x00B8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_B9[0x3];                                       // 0x00B9(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Temp_int_Variable_11;                              // 0x00BC(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Conv_BoolToInt_ReturnValue;               // 0x00C0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_LessEqual_IntInt_ReturnValue;             // 0x00C4(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_C5[0x3];                                       // 0x00C5(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FIntPoint                              CallFunc_Add_IntPointIntPoint_ReturnValue;         // 0x00C8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsCellFocusable_Result;                   // 0x00D0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_D1[0x7];                                       // 0x00D1(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UCOMP_PuzzleCell_Base_C*                CallFunc_GetCellAtLocation_Cell;                   // 0x00D8(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue;                  // 0x00E0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_E1[0x3];                                       // 0x00E1(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Multiply_IntInt_ReturnValue;              // 0x00E4(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_GreaterEqual_IntInt_ReturnValue_1;        // 0x00E8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Less_IntInt_ReturnValue_1;                // 0x00E9(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_GreaterEqual_IntInt_ReturnValue_2;        // 0x00EA(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BooleanAND_ReturnValue;                   // 0x00EB(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	int32                                         CallFunc_Max_ReturnValue;                          // 0x00EC(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BooleanAND_ReturnValue_1;                 // 0x00F0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_LessEqual_IntInt_ReturnValue_1;           // 0x00F1(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BooleanAND_ReturnValue_2;                 // 0x00F2(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_F3[0x1];                                       // 0x00F3(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	struct FIntPoint                              CallFunc_Multiply_IntPointInt_ReturnValue;         // 0x00F4(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue_2;                 // 0x00FC(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FIntPoint                              CallFunc_Add_IntPointIntPoint_ReturnValue_1;       // 0x0100(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FIntPoint                              CallFunc_Add_IntPointIntPoint_ReturnValue_2;       // 0x0108(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0110(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Less_IntInt_ReturnValue_2;                // 0x0111(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_GreaterEqual_IntInt_ReturnValue_3;        // 0x0112(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Less_IntInt_ReturnValue_3;                // 0x0113(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_GreaterEqual_IntInt_ReturnValue_4;        // 0x0114(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BooleanAND_ReturnValue_3;                 // 0x0115(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BooleanAND_ReturnValue_4;                 // 0x0116(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_117[0x1];                                      // 0x0117(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         K2Node_Select_Default_2;                           // 0x0118(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BooleanAND_ReturnValue_5;                 // 0x011C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_11D[0x3];                                      // 0x011D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         K2Node_Select_Default_3;                           // 0x0120(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Multiply_IntInt_ReturnValue_1;            // 0x0124(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FIntPoint                              K2Node_MakeStruct_IntPoint;                        // 0x0128(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Conv_BoolToInt_ReturnValue_1;             // 0x0130(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Not_PreBool_ReturnValue;                  // 0x0134(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_135[0x3];                                      // 0x0135(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Multiply_IntInt_ReturnValue_2;            // 0x0138(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Conv_BoolToInt_ReturnValue_2;             // 0x013C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FIntPoint                              K2Node_MakeStruct_IntPoint_1;                      // 0x0140(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FIntPoint                              CallFunc_GetCellLocationFromIndex_CellLocation;    // 0x0148(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FIntPoint                              CallFunc_Multiply_IntPointInt_ReturnValue_1;       // 0x0150(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Find_ReturnValue;                   // 0x0158(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(PUZZLE_Base_C_CycleFocusedPrimitiveComponent) == 0x000008, "Wrong alignment on PUZZLE_Base_C_CycleFocusedPrimitiveComponent");
static_assert(sizeof(PUZZLE_Base_C_CycleFocusedPrimitiveComponent) == 0x000160, "Wrong size on PUZZLE_Base_C_CycleFocusedPrimitiveComponent");
static_assert(offsetof(PUZZLE_Base_C_CycleFocusedPrimitiveComponent, CursorPrimitive) == 0x000000, "Member 'PUZZLE_Base_C_CycleFocusedPrimitiveComponent::CursorPrimitive' has a wrong offset!");
static_assert(offsetof(PUZZLE_Base_C_CycleFocusedPrimitiveComponent, Vertical) == 0x000008, "Member 'PUZZLE_Base_C_CycleFocusedPrimitiveComponent::Vertical' has a wrong offset!");
static_assert(offsetof(PUZZLE_Base_C_CycleFocusedPrimitiveComponent, Previous) == 0x000009, "Member 'PUZZLE_Base_C_CycleFocusedPrimitiveComponent::Previous' has a wrong offset!");
static_assert(offsetof(PUZZLE_Base_C_CycleFocusedPrimitiveComponent, CandidateCellComponent) == 0x000010, "Member 'PUZZLE_Base_C_CycleFocusedPrimitiveComponent::CandidateCellComponent' has a wrong offset!");
static_assert(offsetof(PUZZLE_Base_C_CycleFocusedPrimitiveComponent, CurrentCellLocation) == 0x000018, "Member 'PUZZLE_Base_C_CycleFocusedPrimitiveComponent::CurrentCellLocation' has a wrong offset!");
static_assert(offsetof(PUZZLE_Base_C_CycleFocusedPrimitiveComponent, CurrentRightOffset) == 0x000020, "Member 'PUZZLE_Base_C_CycleFocusedPrimitiveComponent::CurrentRightOffset' has a wrong offset!");
static_assert(offsetof(PUZZLE_Base_C_CycleFocusedPrimitiveComponent, TraverseRightSign) == 0x000024, "Member 'PUZZLE_Base_C_CycleFocusedPrimitiveComponent::TraverseRightSign' has a wrong offset!");
static_assert(offsetof(PUZZLE_Base_C_CycleFocusedPrimitiveComponent, CurrentForwardCellLocation) == 0x000028, "Member 'PUZZLE_Base_C_CycleFocusedPrimitiveComponent::CurrentForwardCellLocation' has a wrong offset!");
static_assert(offsetof(PUZZLE_Base_C_CycleFocusedPrimitiveComponent, CycleRightDirection) == 0x000030, "Member 'PUZZLE_Base_C_CycleFocusedPrimitiveComponent::CycleRightDirection' has a wrong offset!");
static_assert(offsetof(PUZZLE_Base_C_CycleFocusedPrimitiveComponent, CycleForwardDirection) == 0x000038, "Member 'PUZZLE_Base_C_CycleFocusedPrimitiveComponent::CycleForwardDirection' has a wrong offset!");
static_assert(offsetof(PUZZLE_Base_C_CycleFocusedPrimitiveComponent, CurrentTraverseRightCount) == 0x000040, "Member 'PUZZLE_Base_C_CycleFocusedPrimitiveComponent::CurrentTraverseRightCount' has a wrong offset!");
static_assert(offsetof(PUZZLE_Base_C_CycleFocusedPrimitiveComponent, CycleDirectionSign) == 0x000044, "Member 'PUZZLE_Base_C_CycleFocusedPrimitiveComponent::CycleDirectionSign' has a wrong offset!");
static_assert(offsetof(PUZZLE_Base_C_CycleFocusedPrimitiveComponent, CellLocation) == 0x000048, "Member 'PUZZLE_Base_C_CycleFocusedPrimitiveComponent::CellLocation' has a wrong offset!");
static_assert(offsetof(PUZZLE_Base_C_CycleFocusedPrimitiveComponent, CellIndex) == 0x000050, "Member 'PUZZLE_Base_C_CycleFocusedPrimitiveComponent::CellIndex' has a wrong offset!");
static_assert(offsetof(PUZZLE_Base_C_CycleFocusedPrimitiveComponent, CursorCellComponent) == 0x000058, "Member 'PUZZLE_Base_C_CycleFocusedPrimitiveComponent::CursorCellComponent' has a wrong offset!");
static_assert(offsetof(PUZZLE_Base_C_CycleFocusedPrimitiveComponent, Temp_bool_Variable) == 0x000060, "Member 'PUZZLE_Base_C_CycleFocusedPrimitiveComponent::Temp_bool_Variable' has a wrong offset!");
static_assert(offsetof(PUZZLE_Base_C_CycleFocusedPrimitiveComponent, CallFunc_GetCellComponentFromPrimitive_Result) == 0x000068, "Member 'PUZZLE_Base_C_CycleFocusedPrimitiveComponent::CallFunc_GetCellComponentFromPrimitive_Result' has a wrong offset!");
static_assert(offsetof(PUZZLE_Base_C_CycleFocusedPrimitiveComponent, Temp_int_Variable) == 0x000070, "Member 'PUZZLE_Base_C_CycleFocusedPrimitiveComponent::Temp_int_Variable' has a wrong offset!");
static_assert(offsetof(PUZZLE_Base_C_CycleFocusedPrimitiveComponent, Temp_int_Variable_1) == 0x000074, "Member 'PUZZLE_Base_C_CycleFocusedPrimitiveComponent::Temp_int_Variable_1' has a wrong offset!");
static_assert(offsetof(PUZZLE_Base_C_CycleFocusedPrimitiveComponent, Temp_bool_Variable_1) == 0x000078, "Member 'PUZZLE_Base_C_CycleFocusedPrimitiveComponent::Temp_bool_Variable_1' has a wrong offset!");
static_assert(offsetof(PUZZLE_Base_C_CycleFocusedPrimitiveComponent, Temp_int_Variable_2) == 0x00007C, "Member 'PUZZLE_Base_C_CycleFocusedPrimitiveComponent::Temp_int_Variable_2' has a wrong offset!");
static_assert(offsetof(PUZZLE_Base_C_CycleFocusedPrimitiveComponent, Temp_int_Variable_3) == 0x000080, "Member 'PUZZLE_Base_C_CycleFocusedPrimitiveComponent::Temp_int_Variable_3' has a wrong offset!");
static_assert(offsetof(PUZZLE_Base_C_CycleFocusedPrimitiveComponent, CallFunc_GreaterEqual_IntInt_ReturnValue) == 0x000084, "Member 'PUZZLE_Base_C_CycleFocusedPrimitiveComponent::CallFunc_GreaterEqual_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(PUZZLE_Base_C_CycleFocusedPrimitiveComponent, Temp_int_Variable_4) == 0x000088, "Member 'PUZZLE_Base_C_CycleFocusedPrimitiveComponent::Temp_int_Variable_4' has a wrong offset!");
static_assert(offsetof(PUZZLE_Base_C_CycleFocusedPrimitiveComponent, Temp_int_Variable_5) == 0x00008C, "Member 'PUZZLE_Base_C_CycleFocusedPrimitiveComponent::Temp_int_Variable_5' has a wrong offset!");
static_assert(offsetof(PUZZLE_Base_C_CycleFocusedPrimitiveComponent, CallFunc_Add_IntInt_ReturnValue) == 0x000090, "Member 'PUZZLE_Base_C_CycleFocusedPrimitiveComponent::CallFunc_Add_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(PUZZLE_Base_C_CycleFocusedPrimitiveComponent, Temp_int_Variable_6) == 0x000094, "Member 'PUZZLE_Base_C_CycleFocusedPrimitiveComponent::Temp_int_Variable_6' has a wrong offset!");
static_assert(offsetof(PUZZLE_Base_C_CycleFocusedPrimitiveComponent, Temp_int_Variable_7) == 0x000098, "Member 'PUZZLE_Base_C_CycleFocusedPrimitiveComponent::Temp_int_Variable_7' has a wrong offset!");
static_assert(offsetof(PUZZLE_Base_C_CycleFocusedPrimitiveComponent, Temp_int_Variable_8) == 0x00009C, "Member 'PUZZLE_Base_C_CycleFocusedPrimitiveComponent::Temp_int_Variable_8' has a wrong offset!");
static_assert(offsetof(PUZZLE_Base_C_CycleFocusedPrimitiveComponent, CallFunc_Add_IntInt_ReturnValue_1) == 0x0000A0, "Member 'PUZZLE_Base_C_CycleFocusedPrimitiveComponent::CallFunc_Add_IntInt_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(PUZZLE_Base_C_CycleFocusedPrimitiveComponent, Temp_int_Variable_9) == 0x0000A4, "Member 'PUZZLE_Base_C_CycleFocusedPrimitiveComponent::Temp_int_Variable_9' has a wrong offset!");
static_assert(offsetof(PUZZLE_Base_C_CycleFocusedPrimitiveComponent, Temp_bool_Variable_2) == 0x0000A8, "Member 'PUZZLE_Base_C_CycleFocusedPrimitiveComponent::Temp_bool_Variable_2' has a wrong offset!");
static_assert(offsetof(PUZZLE_Base_C_CycleFocusedPrimitiveComponent, CallFunc_IsVerticalAxisReversed_Result) == 0x0000A9, "Member 'PUZZLE_Base_C_CycleFocusedPrimitiveComponent::CallFunc_IsVerticalAxisReversed_Result' has a wrong offset!");
static_assert(offsetof(PUZZLE_Base_C_CycleFocusedPrimitiveComponent, Temp_int_Variable_10) == 0x0000AC, "Member 'PUZZLE_Base_C_CycleFocusedPrimitiveComponent::Temp_int_Variable_10' has a wrong offset!");
static_assert(offsetof(PUZZLE_Base_C_CycleFocusedPrimitiveComponent, K2Node_Select_Default) == 0x0000B0, "Member 'PUZZLE_Base_C_CycleFocusedPrimitiveComponent::K2Node_Select_Default' has a wrong offset!");
static_assert(offsetof(PUZZLE_Base_C_CycleFocusedPrimitiveComponent, K2Node_Select_Default_1) == 0x0000B4, "Member 'PUZZLE_Base_C_CycleFocusedPrimitiveComponent::K2Node_Select_Default_1' has a wrong offset!");
static_assert(offsetof(PUZZLE_Base_C_CycleFocusedPrimitiveComponent, CallFunc_Greater_IntInt_ReturnValue) == 0x0000B8, "Member 'PUZZLE_Base_C_CycleFocusedPrimitiveComponent::CallFunc_Greater_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(PUZZLE_Base_C_CycleFocusedPrimitiveComponent, Temp_int_Variable_11) == 0x0000BC, "Member 'PUZZLE_Base_C_CycleFocusedPrimitiveComponent::Temp_int_Variable_11' has a wrong offset!");
static_assert(offsetof(PUZZLE_Base_C_CycleFocusedPrimitiveComponent, CallFunc_Conv_BoolToInt_ReturnValue) == 0x0000C0, "Member 'PUZZLE_Base_C_CycleFocusedPrimitiveComponent::CallFunc_Conv_BoolToInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(PUZZLE_Base_C_CycleFocusedPrimitiveComponent, CallFunc_LessEqual_IntInt_ReturnValue) == 0x0000C4, "Member 'PUZZLE_Base_C_CycleFocusedPrimitiveComponent::CallFunc_LessEqual_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(PUZZLE_Base_C_CycleFocusedPrimitiveComponent, CallFunc_Add_IntPointIntPoint_ReturnValue) == 0x0000C8, "Member 'PUZZLE_Base_C_CycleFocusedPrimitiveComponent::CallFunc_Add_IntPointIntPoint_ReturnValue' has a wrong offset!");
static_assert(offsetof(PUZZLE_Base_C_CycleFocusedPrimitiveComponent, CallFunc_IsCellFocusable_Result) == 0x0000D0, "Member 'PUZZLE_Base_C_CycleFocusedPrimitiveComponent::CallFunc_IsCellFocusable_Result' has a wrong offset!");
static_assert(offsetof(PUZZLE_Base_C_CycleFocusedPrimitiveComponent, CallFunc_GetCellAtLocation_Cell) == 0x0000D8, "Member 'PUZZLE_Base_C_CycleFocusedPrimitiveComponent::CallFunc_GetCellAtLocation_Cell' has a wrong offset!");
static_assert(offsetof(PUZZLE_Base_C_CycleFocusedPrimitiveComponent, CallFunc_Less_IntInt_ReturnValue) == 0x0000E0, "Member 'PUZZLE_Base_C_CycleFocusedPrimitiveComponent::CallFunc_Less_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(PUZZLE_Base_C_CycleFocusedPrimitiveComponent, CallFunc_Multiply_IntInt_ReturnValue) == 0x0000E4, "Member 'PUZZLE_Base_C_CycleFocusedPrimitiveComponent::CallFunc_Multiply_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(PUZZLE_Base_C_CycleFocusedPrimitiveComponent, CallFunc_GreaterEqual_IntInt_ReturnValue_1) == 0x0000E8, "Member 'PUZZLE_Base_C_CycleFocusedPrimitiveComponent::CallFunc_GreaterEqual_IntInt_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(PUZZLE_Base_C_CycleFocusedPrimitiveComponent, CallFunc_Less_IntInt_ReturnValue_1) == 0x0000E9, "Member 'PUZZLE_Base_C_CycleFocusedPrimitiveComponent::CallFunc_Less_IntInt_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(PUZZLE_Base_C_CycleFocusedPrimitiveComponent, CallFunc_GreaterEqual_IntInt_ReturnValue_2) == 0x0000EA, "Member 'PUZZLE_Base_C_CycleFocusedPrimitiveComponent::CallFunc_GreaterEqual_IntInt_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(PUZZLE_Base_C_CycleFocusedPrimitiveComponent, CallFunc_BooleanAND_ReturnValue) == 0x0000EB, "Member 'PUZZLE_Base_C_CycleFocusedPrimitiveComponent::CallFunc_BooleanAND_ReturnValue' has a wrong offset!");
static_assert(offsetof(PUZZLE_Base_C_CycleFocusedPrimitiveComponent, CallFunc_Max_ReturnValue) == 0x0000EC, "Member 'PUZZLE_Base_C_CycleFocusedPrimitiveComponent::CallFunc_Max_ReturnValue' has a wrong offset!");
static_assert(offsetof(PUZZLE_Base_C_CycleFocusedPrimitiveComponent, CallFunc_BooleanAND_ReturnValue_1) == 0x0000F0, "Member 'PUZZLE_Base_C_CycleFocusedPrimitiveComponent::CallFunc_BooleanAND_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(PUZZLE_Base_C_CycleFocusedPrimitiveComponent, CallFunc_LessEqual_IntInt_ReturnValue_1) == 0x0000F1, "Member 'PUZZLE_Base_C_CycleFocusedPrimitiveComponent::CallFunc_LessEqual_IntInt_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(PUZZLE_Base_C_CycleFocusedPrimitiveComponent, CallFunc_BooleanAND_ReturnValue_2) == 0x0000F2, "Member 'PUZZLE_Base_C_CycleFocusedPrimitiveComponent::CallFunc_BooleanAND_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(PUZZLE_Base_C_CycleFocusedPrimitiveComponent, CallFunc_Multiply_IntPointInt_ReturnValue) == 0x0000F4, "Member 'PUZZLE_Base_C_CycleFocusedPrimitiveComponent::CallFunc_Multiply_IntPointInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(PUZZLE_Base_C_CycleFocusedPrimitiveComponent, CallFunc_Add_IntInt_ReturnValue_2) == 0x0000FC, "Member 'PUZZLE_Base_C_CycleFocusedPrimitiveComponent::CallFunc_Add_IntInt_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(PUZZLE_Base_C_CycleFocusedPrimitiveComponent, CallFunc_Add_IntPointIntPoint_ReturnValue_1) == 0x000100, "Member 'PUZZLE_Base_C_CycleFocusedPrimitiveComponent::CallFunc_Add_IntPointIntPoint_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(PUZZLE_Base_C_CycleFocusedPrimitiveComponent, CallFunc_Add_IntPointIntPoint_ReturnValue_2) == 0x000108, "Member 'PUZZLE_Base_C_CycleFocusedPrimitiveComponent::CallFunc_Add_IntPointIntPoint_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(PUZZLE_Base_C_CycleFocusedPrimitiveComponent, CallFunc_IsValid_ReturnValue) == 0x000110, "Member 'PUZZLE_Base_C_CycleFocusedPrimitiveComponent::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(PUZZLE_Base_C_CycleFocusedPrimitiveComponent, CallFunc_Less_IntInt_ReturnValue_2) == 0x000111, "Member 'PUZZLE_Base_C_CycleFocusedPrimitiveComponent::CallFunc_Less_IntInt_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(PUZZLE_Base_C_CycleFocusedPrimitiveComponent, CallFunc_GreaterEqual_IntInt_ReturnValue_3) == 0x000112, "Member 'PUZZLE_Base_C_CycleFocusedPrimitiveComponent::CallFunc_GreaterEqual_IntInt_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(PUZZLE_Base_C_CycleFocusedPrimitiveComponent, CallFunc_Less_IntInt_ReturnValue_3) == 0x000113, "Member 'PUZZLE_Base_C_CycleFocusedPrimitiveComponent::CallFunc_Less_IntInt_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(PUZZLE_Base_C_CycleFocusedPrimitiveComponent, CallFunc_GreaterEqual_IntInt_ReturnValue_4) == 0x000114, "Member 'PUZZLE_Base_C_CycleFocusedPrimitiveComponent::CallFunc_GreaterEqual_IntInt_ReturnValue_4' has a wrong offset!");
static_assert(offsetof(PUZZLE_Base_C_CycleFocusedPrimitiveComponent, CallFunc_BooleanAND_ReturnValue_3) == 0x000115, "Member 'PUZZLE_Base_C_CycleFocusedPrimitiveComponent::CallFunc_BooleanAND_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(PUZZLE_Base_C_CycleFocusedPrimitiveComponent, CallFunc_BooleanAND_ReturnValue_4) == 0x000116, "Member 'PUZZLE_Base_C_CycleFocusedPrimitiveComponent::CallFunc_BooleanAND_ReturnValue_4' has a wrong offset!");
static_assert(offsetof(PUZZLE_Base_C_CycleFocusedPrimitiveComponent, K2Node_Select_Default_2) == 0x000118, "Member 'PUZZLE_Base_C_CycleFocusedPrimitiveComponent::K2Node_Select_Default_2' has a wrong offset!");
static_assert(offsetof(PUZZLE_Base_C_CycleFocusedPrimitiveComponent, CallFunc_BooleanAND_ReturnValue_5) == 0x00011C, "Member 'PUZZLE_Base_C_CycleFocusedPrimitiveComponent::CallFunc_BooleanAND_ReturnValue_5' has a wrong offset!");
static_assert(offsetof(PUZZLE_Base_C_CycleFocusedPrimitiveComponent, K2Node_Select_Default_3) == 0x000120, "Member 'PUZZLE_Base_C_CycleFocusedPrimitiveComponent::K2Node_Select_Default_3' has a wrong offset!");
static_assert(offsetof(PUZZLE_Base_C_CycleFocusedPrimitiveComponent, CallFunc_Multiply_IntInt_ReturnValue_1) == 0x000124, "Member 'PUZZLE_Base_C_CycleFocusedPrimitiveComponent::CallFunc_Multiply_IntInt_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(PUZZLE_Base_C_CycleFocusedPrimitiveComponent, K2Node_MakeStruct_IntPoint) == 0x000128, "Member 'PUZZLE_Base_C_CycleFocusedPrimitiveComponent::K2Node_MakeStruct_IntPoint' has a wrong offset!");
static_assert(offsetof(PUZZLE_Base_C_CycleFocusedPrimitiveComponent, CallFunc_Conv_BoolToInt_ReturnValue_1) == 0x000130, "Member 'PUZZLE_Base_C_CycleFocusedPrimitiveComponent::CallFunc_Conv_BoolToInt_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(PUZZLE_Base_C_CycleFocusedPrimitiveComponent, CallFunc_Not_PreBool_ReturnValue) == 0x000134, "Member 'PUZZLE_Base_C_CycleFocusedPrimitiveComponent::CallFunc_Not_PreBool_ReturnValue' has a wrong offset!");
static_assert(offsetof(PUZZLE_Base_C_CycleFocusedPrimitiveComponent, CallFunc_Multiply_IntInt_ReturnValue_2) == 0x000138, "Member 'PUZZLE_Base_C_CycleFocusedPrimitiveComponent::CallFunc_Multiply_IntInt_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(PUZZLE_Base_C_CycleFocusedPrimitiveComponent, CallFunc_Conv_BoolToInt_ReturnValue_2) == 0x00013C, "Member 'PUZZLE_Base_C_CycleFocusedPrimitiveComponent::CallFunc_Conv_BoolToInt_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(PUZZLE_Base_C_CycleFocusedPrimitiveComponent, K2Node_MakeStruct_IntPoint_1) == 0x000140, "Member 'PUZZLE_Base_C_CycleFocusedPrimitiveComponent::K2Node_MakeStruct_IntPoint_1' has a wrong offset!");
static_assert(offsetof(PUZZLE_Base_C_CycleFocusedPrimitiveComponent, CallFunc_GetCellLocationFromIndex_CellLocation) == 0x000148, "Member 'PUZZLE_Base_C_CycleFocusedPrimitiveComponent::CallFunc_GetCellLocationFromIndex_CellLocation' has a wrong offset!");
static_assert(offsetof(PUZZLE_Base_C_CycleFocusedPrimitiveComponent, CallFunc_Multiply_IntPointInt_ReturnValue_1) == 0x000150, "Member 'PUZZLE_Base_C_CycleFocusedPrimitiveComponent::CallFunc_Multiply_IntPointInt_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(PUZZLE_Base_C_CycleFocusedPrimitiveComponent, CallFunc_Array_Find_ReturnValue) == 0x000158, "Member 'PUZZLE_Base_C_CycleFocusedPrimitiveComponent::CallFunc_Array_Find_ReturnValue' has a wrong offset!");

// Function PUZZLE_Base.PUZZLE_Base_C.GetCellLocationFromIndex
// 0x001C (0x001C - 0x0000)
struct PUZZLE_Base_C_GetCellLocationFromIndex final
{
public:
	int32                                         CellIndex;                                         // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FIntPoint                              CellLocation;                                      // 0x0004(0x0008)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Divide_IntInt_ReturnValue;                // 0x000C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Percent_IntInt_ReturnValue;               // 0x0010(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FIntPoint                              K2Node_MakeStruct_IntPoint;                        // 0x0014(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(PUZZLE_Base_C_GetCellLocationFromIndex) == 0x000004, "Wrong alignment on PUZZLE_Base_C_GetCellLocationFromIndex");
static_assert(sizeof(PUZZLE_Base_C_GetCellLocationFromIndex) == 0x00001C, "Wrong size on PUZZLE_Base_C_GetCellLocationFromIndex");
static_assert(offsetof(PUZZLE_Base_C_GetCellLocationFromIndex, CellIndex) == 0x000000, "Member 'PUZZLE_Base_C_GetCellLocationFromIndex::CellIndex' has a wrong offset!");
static_assert(offsetof(PUZZLE_Base_C_GetCellLocationFromIndex, CellLocation) == 0x000004, "Member 'PUZZLE_Base_C_GetCellLocationFromIndex::CellLocation' has a wrong offset!");
static_assert(offsetof(PUZZLE_Base_C_GetCellLocationFromIndex, CallFunc_Divide_IntInt_ReturnValue) == 0x00000C, "Member 'PUZZLE_Base_C_GetCellLocationFromIndex::CallFunc_Divide_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(PUZZLE_Base_C_GetCellLocationFromIndex, CallFunc_Percent_IntInt_ReturnValue) == 0x000010, "Member 'PUZZLE_Base_C_GetCellLocationFromIndex::CallFunc_Percent_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(PUZZLE_Base_C_GetCellLocationFromIndex, K2Node_MakeStruct_IntPoint) == 0x000014, "Member 'PUZZLE_Base_C_GetCellLocationFromIndex::K2Node_MakeStruct_IntPoint' has a wrong offset!");

// Function PUZZLE_Base.PUZZLE_Base_C.OnFinishedFocusing
// 0x0020 (0x0020 - 0x0000)
struct PUZZLE_Base_C_OnFinishedFocusing final
{
public:
	int32                                         Temp_int_Array_Index_Variable;                     // 0x0000(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Loop_Counter_Variable;                    // 0x0004(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue;                   // 0x0008(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Length_ReturnValue;                 // 0x000C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UCOMP_PuzzleCell_Base_C*                CallFunc_Array_Get_Item;                           // 0x0010(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue;                  // 0x0018(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsCellFocusable_Result;                   // 0x0019(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(PUZZLE_Base_C_OnFinishedFocusing) == 0x000008, "Wrong alignment on PUZZLE_Base_C_OnFinishedFocusing");
static_assert(sizeof(PUZZLE_Base_C_OnFinishedFocusing) == 0x000020, "Wrong size on PUZZLE_Base_C_OnFinishedFocusing");
static_assert(offsetof(PUZZLE_Base_C_OnFinishedFocusing, Temp_int_Array_Index_Variable) == 0x000000, "Member 'PUZZLE_Base_C_OnFinishedFocusing::Temp_int_Array_Index_Variable' has a wrong offset!");
static_assert(offsetof(PUZZLE_Base_C_OnFinishedFocusing, Temp_int_Loop_Counter_Variable) == 0x000004, "Member 'PUZZLE_Base_C_OnFinishedFocusing::Temp_int_Loop_Counter_Variable' has a wrong offset!");
static_assert(offsetof(PUZZLE_Base_C_OnFinishedFocusing, CallFunc_Add_IntInt_ReturnValue) == 0x000008, "Member 'PUZZLE_Base_C_OnFinishedFocusing::CallFunc_Add_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(PUZZLE_Base_C_OnFinishedFocusing, CallFunc_Array_Length_ReturnValue) == 0x00000C, "Member 'PUZZLE_Base_C_OnFinishedFocusing::CallFunc_Array_Length_ReturnValue' has a wrong offset!");
static_assert(offsetof(PUZZLE_Base_C_OnFinishedFocusing, CallFunc_Array_Get_Item) == 0x000010, "Member 'PUZZLE_Base_C_OnFinishedFocusing::CallFunc_Array_Get_Item' has a wrong offset!");
static_assert(offsetof(PUZZLE_Base_C_OnFinishedFocusing, CallFunc_Less_IntInt_ReturnValue) == 0x000018, "Member 'PUZZLE_Base_C_OnFinishedFocusing::CallFunc_Less_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(PUZZLE_Base_C_OnFinishedFocusing, CallFunc_IsCellFocusable_Result) == 0x000019, "Member 'PUZZLE_Base_C_OnFinishedFocusing::CallFunc_IsCellFocusable_Result' has a wrong offset!");

// Function PUZZLE_Base.PUZZLE_Base_C.GetPuzzleRowToUse
// 0x0068 (0x0068 - 0x0000)
struct PUZZLE_Base_C_GetPuzzleRowToUse final
{
public:
	struct FDataTableRowHandle                    PuzzleRow;                                         // 0x0000(0x0010)(Parm, OutParm, NoDestructor)
	class UDataTable*                             PuzzleTable;                                       // 0x0010(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UGI_SinglePlayer_C*                     GameInstance;                                      // 0x0018(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ENUM_GameDifficulty                           Temp_byte_Variable;                                // 0x0020(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0021(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_NotEqual_NameName_ReturnValue;            // 0x0022(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_23[0x1];                                       // 0x0023(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   CallFunc_GetUniqueRandomPuzzleName_Result;         // 0x0024(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_2C[0x4];                                       // 0x002C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FDataTableRowHandle                    K2Node_MakeStruct_DataTableRowHandle;              // 0x0030(0x0010)(NoDestructor)
	ENUM_GameDifficulty                           CallFunc_GetDifficultyByType_Difficulty;           // 0x0040(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_41[0x7];                                       // 0x0041(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UGameInstance*                          CallFunc_GetGameInstance_ReturnValue;              // 0x0048(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UDataTable*                             K2Node_Select_Default;                             // 0x0050(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UGI_SinglePlayer_C*                     K2Node_DynamicCast_AsGI_Single_Player;             // 0x0058(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0060(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsPackagedForDistribution_ReturnValue;    // 0x0061(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_NotEqual_NameName_ReturnValue_1;          // 0x0062(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Not_PreBool_ReturnValue;                  // 0x0063(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BooleanAND_ReturnValue;                   // 0x0064(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(PUZZLE_Base_C_GetPuzzleRowToUse) == 0x000008, "Wrong alignment on PUZZLE_Base_C_GetPuzzleRowToUse");
static_assert(sizeof(PUZZLE_Base_C_GetPuzzleRowToUse) == 0x000068, "Wrong size on PUZZLE_Base_C_GetPuzzleRowToUse");
static_assert(offsetof(PUZZLE_Base_C_GetPuzzleRowToUse, PuzzleRow) == 0x000000, "Member 'PUZZLE_Base_C_GetPuzzleRowToUse::PuzzleRow' has a wrong offset!");
static_assert(offsetof(PUZZLE_Base_C_GetPuzzleRowToUse, PuzzleTable) == 0x000010, "Member 'PUZZLE_Base_C_GetPuzzleRowToUse::PuzzleTable' has a wrong offset!");
static_assert(offsetof(PUZZLE_Base_C_GetPuzzleRowToUse, GameInstance) == 0x000018, "Member 'PUZZLE_Base_C_GetPuzzleRowToUse::GameInstance' has a wrong offset!");
static_assert(offsetof(PUZZLE_Base_C_GetPuzzleRowToUse, Temp_byte_Variable) == 0x000020, "Member 'PUZZLE_Base_C_GetPuzzleRowToUse::Temp_byte_Variable' has a wrong offset!");
static_assert(offsetof(PUZZLE_Base_C_GetPuzzleRowToUse, CallFunc_IsValid_ReturnValue) == 0x000021, "Member 'PUZZLE_Base_C_GetPuzzleRowToUse::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(PUZZLE_Base_C_GetPuzzleRowToUse, CallFunc_NotEqual_NameName_ReturnValue) == 0x000022, "Member 'PUZZLE_Base_C_GetPuzzleRowToUse::CallFunc_NotEqual_NameName_ReturnValue' has a wrong offset!");
static_assert(offsetof(PUZZLE_Base_C_GetPuzzleRowToUse, CallFunc_GetUniqueRandomPuzzleName_Result) == 0x000024, "Member 'PUZZLE_Base_C_GetPuzzleRowToUse::CallFunc_GetUniqueRandomPuzzleName_Result' has a wrong offset!");
static_assert(offsetof(PUZZLE_Base_C_GetPuzzleRowToUse, K2Node_MakeStruct_DataTableRowHandle) == 0x000030, "Member 'PUZZLE_Base_C_GetPuzzleRowToUse::K2Node_MakeStruct_DataTableRowHandle' has a wrong offset!");
static_assert(offsetof(PUZZLE_Base_C_GetPuzzleRowToUse, CallFunc_GetDifficultyByType_Difficulty) == 0x000040, "Member 'PUZZLE_Base_C_GetPuzzleRowToUse::CallFunc_GetDifficultyByType_Difficulty' has a wrong offset!");
static_assert(offsetof(PUZZLE_Base_C_GetPuzzleRowToUse, CallFunc_GetGameInstance_ReturnValue) == 0x000048, "Member 'PUZZLE_Base_C_GetPuzzleRowToUse::CallFunc_GetGameInstance_ReturnValue' has a wrong offset!");
static_assert(offsetof(PUZZLE_Base_C_GetPuzzleRowToUse, K2Node_Select_Default) == 0x000050, "Member 'PUZZLE_Base_C_GetPuzzleRowToUse::K2Node_Select_Default' has a wrong offset!");
static_assert(offsetof(PUZZLE_Base_C_GetPuzzleRowToUse, K2Node_DynamicCast_AsGI_Single_Player) == 0x000058, "Member 'PUZZLE_Base_C_GetPuzzleRowToUse::K2Node_DynamicCast_AsGI_Single_Player' has a wrong offset!");
static_assert(offsetof(PUZZLE_Base_C_GetPuzzleRowToUse, K2Node_DynamicCast_bSuccess) == 0x000060, "Member 'PUZZLE_Base_C_GetPuzzleRowToUse::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(PUZZLE_Base_C_GetPuzzleRowToUse, CallFunc_IsPackagedForDistribution_ReturnValue) == 0x000061, "Member 'PUZZLE_Base_C_GetPuzzleRowToUse::CallFunc_IsPackagedForDistribution_ReturnValue' has a wrong offset!");
static_assert(offsetof(PUZZLE_Base_C_GetPuzzleRowToUse, CallFunc_NotEqual_NameName_ReturnValue_1) == 0x000062, "Member 'PUZZLE_Base_C_GetPuzzleRowToUse::CallFunc_NotEqual_NameName_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(PUZZLE_Base_C_GetPuzzleRowToUse, CallFunc_Not_PreBool_ReturnValue) == 0x000063, "Member 'PUZZLE_Base_C_GetPuzzleRowToUse::CallFunc_Not_PreBool_ReturnValue' has a wrong offset!");
static_assert(offsetof(PUZZLE_Base_C_GetPuzzleRowToUse, CallFunc_BooleanAND_ReturnValue) == 0x000064, "Member 'PUZZLE_Base_C_GetPuzzleRowToUse::CallFunc_BooleanAND_ReturnValue' has a wrong offset!");

// Function PUZZLE_Base.PUZZLE_Base_C.GetCellIndexFromLocation
// 0x0014 (0x0014 - 0x0000)
struct PUZZLE_Base_C_GetCellIndexFromLocation final
{
public:
	struct FIntPoint                              Location;                                          // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Result;                                            // 0x0008(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Multiply_IntInt_ReturnValue;              // 0x000C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue;                   // 0x0010(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(PUZZLE_Base_C_GetCellIndexFromLocation) == 0x000004, "Wrong alignment on PUZZLE_Base_C_GetCellIndexFromLocation");
static_assert(sizeof(PUZZLE_Base_C_GetCellIndexFromLocation) == 0x000014, "Wrong size on PUZZLE_Base_C_GetCellIndexFromLocation");
static_assert(offsetof(PUZZLE_Base_C_GetCellIndexFromLocation, Location) == 0x000000, "Member 'PUZZLE_Base_C_GetCellIndexFromLocation::Location' has a wrong offset!");
static_assert(offsetof(PUZZLE_Base_C_GetCellIndexFromLocation, Result) == 0x000008, "Member 'PUZZLE_Base_C_GetCellIndexFromLocation::Result' has a wrong offset!");
static_assert(offsetof(PUZZLE_Base_C_GetCellIndexFromLocation, CallFunc_Multiply_IntInt_ReturnValue) == 0x00000C, "Member 'PUZZLE_Base_C_GetCellIndexFromLocation::CallFunc_Multiply_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(PUZZLE_Base_C_GetCellIndexFromLocation, CallFunc_Add_IntInt_ReturnValue) == 0x000010, "Member 'PUZZLE_Base_C_GetCellIndexFromLocation::CallFunc_Add_IntInt_ReturnValue' has a wrong offset!");

// Function PUZZLE_Base.PUZZLE_Base_C.CanManipulateUnlockTargets
// 0x0080 (0x0080 - 0x0000)
struct PUZZLE_Base_C_CanManipulateUnlockTargets final
{
public:
	bool                                          Result;                                            // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class AINTERACT_Base_C*                       CurrentInteractable;                               // 0x0008(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Array_Index_Variable;                     // 0x0010(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Loop_Counter_Variable;                    // 0x0014(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue;                   // 0x0018(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1C[0x4];                                       // 0x001C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class AINTERACT_DoorBase_C*                   K2Node_DynamicCast_AsINTERACT_Door_Base;           // 0x0020(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0028(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_29[0x7];                                       // 0x0029(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TScriptInterface<class IINTERF_Interactable_C> CallFunc_GetInteractLocked_self_CastInput;         // 0x0030(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_GetInteractLocked_Result;                 // 0x0040(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_41[0x7];                                       // 0x0041(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   CallFunc_GetInteractLocked_LockMessage;            // 0x0048(0x0018)()
	bool                                          CallFunc_EqualEqual_ByteByte_ReturnValue;          // 0x0060(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BooleanOR_ReturnValue;                    // 0x0061(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0062(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BooleanAND_ReturnValue;                   // 0x0063(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	int32                                         CallFunc_Array_Length_ReturnValue;                 // 0x0064(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AINTERACT_Base_C*                       CallFunc_Array_Get_Item;                           // 0x0068(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Greater_IntInt_ReturnValue;               // 0x0070(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_71[0x3];                                       // 0x0071(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Array_Length_ReturnValue_1;               // 0x0074(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue;                  // 0x0078(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(PUZZLE_Base_C_CanManipulateUnlockTargets) == 0x000008, "Wrong alignment on PUZZLE_Base_C_CanManipulateUnlockTargets");
static_assert(sizeof(PUZZLE_Base_C_CanManipulateUnlockTargets) == 0x000080, "Wrong size on PUZZLE_Base_C_CanManipulateUnlockTargets");
static_assert(offsetof(PUZZLE_Base_C_CanManipulateUnlockTargets, Result) == 0x000000, "Member 'PUZZLE_Base_C_CanManipulateUnlockTargets::Result' has a wrong offset!");
static_assert(offsetof(PUZZLE_Base_C_CanManipulateUnlockTargets, CurrentInteractable) == 0x000008, "Member 'PUZZLE_Base_C_CanManipulateUnlockTargets::CurrentInteractable' has a wrong offset!");
static_assert(offsetof(PUZZLE_Base_C_CanManipulateUnlockTargets, Temp_int_Array_Index_Variable) == 0x000010, "Member 'PUZZLE_Base_C_CanManipulateUnlockTargets::Temp_int_Array_Index_Variable' has a wrong offset!");
static_assert(offsetof(PUZZLE_Base_C_CanManipulateUnlockTargets, Temp_int_Loop_Counter_Variable) == 0x000014, "Member 'PUZZLE_Base_C_CanManipulateUnlockTargets::Temp_int_Loop_Counter_Variable' has a wrong offset!");
static_assert(offsetof(PUZZLE_Base_C_CanManipulateUnlockTargets, CallFunc_Add_IntInt_ReturnValue) == 0x000018, "Member 'PUZZLE_Base_C_CanManipulateUnlockTargets::CallFunc_Add_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(PUZZLE_Base_C_CanManipulateUnlockTargets, K2Node_DynamicCast_AsINTERACT_Door_Base) == 0x000020, "Member 'PUZZLE_Base_C_CanManipulateUnlockTargets::K2Node_DynamicCast_AsINTERACT_Door_Base' has a wrong offset!");
static_assert(offsetof(PUZZLE_Base_C_CanManipulateUnlockTargets, K2Node_DynamicCast_bSuccess) == 0x000028, "Member 'PUZZLE_Base_C_CanManipulateUnlockTargets::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(PUZZLE_Base_C_CanManipulateUnlockTargets, CallFunc_GetInteractLocked_self_CastInput) == 0x000030, "Member 'PUZZLE_Base_C_CanManipulateUnlockTargets::CallFunc_GetInteractLocked_self_CastInput' has a wrong offset!");
static_assert(offsetof(PUZZLE_Base_C_CanManipulateUnlockTargets, CallFunc_GetInteractLocked_Result) == 0x000040, "Member 'PUZZLE_Base_C_CanManipulateUnlockTargets::CallFunc_GetInteractLocked_Result' has a wrong offset!");
static_assert(offsetof(PUZZLE_Base_C_CanManipulateUnlockTargets, CallFunc_GetInteractLocked_LockMessage) == 0x000048, "Member 'PUZZLE_Base_C_CanManipulateUnlockTargets::CallFunc_GetInteractLocked_LockMessage' has a wrong offset!");
static_assert(offsetof(PUZZLE_Base_C_CanManipulateUnlockTargets, CallFunc_EqualEqual_ByteByte_ReturnValue) == 0x000060, "Member 'PUZZLE_Base_C_CanManipulateUnlockTargets::CallFunc_EqualEqual_ByteByte_ReturnValue' has a wrong offset!");
static_assert(offsetof(PUZZLE_Base_C_CanManipulateUnlockTargets, CallFunc_BooleanOR_ReturnValue) == 0x000061, "Member 'PUZZLE_Base_C_CanManipulateUnlockTargets::CallFunc_BooleanOR_ReturnValue' has a wrong offset!");
static_assert(offsetof(PUZZLE_Base_C_CanManipulateUnlockTargets, CallFunc_IsValid_ReturnValue) == 0x000062, "Member 'PUZZLE_Base_C_CanManipulateUnlockTargets::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(PUZZLE_Base_C_CanManipulateUnlockTargets, CallFunc_BooleanAND_ReturnValue) == 0x000063, "Member 'PUZZLE_Base_C_CanManipulateUnlockTargets::CallFunc_BooleanAND_ReturnValue' has a wrong offset!");
static_assert(offsetof(PUZZLE_Base_C_CanManipulateUnlockTargets, CallFunc_Array_Length_ReturnValue) == 0x000064, "Member 'PUZZLE_Base_C_CanManipulateUnlockTargets::CallFunc_Array_Length_ReturnValue' has a wrong offset!");
static_assert(offsetof(PUZZLE_Base_C_CanManipulateUnlockTargets, CallFunc_Array_Get_Item) == 0x000068, "Member 'PUZZLE_Base_C_CanManipulateUnlockTargets::CallFunc_Array_Get_Item' has a wrong offset!");
static_assert(offsetof(PUZZLE_Base_C_CanManipulateUnlockTargets, CallFunc_Greater_IntInt_ReturnValue) == 0x000070, "Member 'PUZZLE_Base_C_CanManipulateUnlockTargets::CallFunc_Greater_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(PUZZLE_Base_C_CanManipulateUnlockTargets, CallFunc_Array_Length_ReturnValue_1) == 0x000074, "Member 'PUZZLE_Base_C_CanManipulateUnlockTargets::CallFunc_Array_Length_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(PUZZLE_Base_C_CanManipulateUnlockTargets, CallFunc_Less_IntInt_ReturnValue) == 0x000078, "Member 'PUZZLE_Base_C_CanManipulateUnlockTargets::CallFunc_Less_IntInt_ReturnValue' has a wrong offset!");

// Function PUZZLE_Base.PUZZLE_Base_C.EVENT_OnInteractLockStateChanged
// 0x0050 (0x0050 - 0x0000)
struct PUZZLE_Base_C_EVENT_OnInteractLockStateChanged final
{
public:
	class AINTERACT_Base_C*                       Interact;                                          // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TDelegate<void(class AINTERACT_Base_C* Interact)> K2Node_CreateDelegate_OutputDelegate;              // 0x0008(0x0010)(ZeroConstructor, NoDestructor)
	TScriptInterface<class IINTERF_Interactable_C> CallFunc_GetInteractLocked_self_CastInput;         // 0x0018(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_GetInteractLocked_Result;                 // 0x0028(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_29[0x7];                                       // 0x0029(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   CallFunc_GetInteractLocked_LockMessage;            // 0x0030(0x0018)()
	bool                                          CallFunc_Not_PreBool_ReturnValue;                  // 0x0048(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(PUZZLE_Base_C_EVENT_OnInteractLockStateChanged) == 0x000008, "Wrong alignment on PUZZLE_Base_C_EVENT_OnInteractLockStateChanged");
static_assert(sizeof(PUZZLE_Base_C_EVENT_OnInteractLockStateChanged) == 0x000050, "Wrong size on PUZZLE_Base_C_EVENT_OnInteractLockStateChanged");
static_assert(offsetof(PUZZLE_Base_C_EVENT_OnInteractLockStateChanged, Interact) == 0x000000, "Member 'PUZZLE_Base_C_EVENT_OnInteractLockStateChanged::Interact' has a wrong offset!");
static_assert(offsetof(PUZZLE_Base_C_EVENT_OnInteractLockStateChanged, K2Node_CreateDelegate_OutputDelegate) == 0x000008, "Member 'PUZZLE_Base_C_EVENT_OnInteractLockStateChanged::K2Node_CreateDelegate_OutputDelegate' has a wrong offset!");
static_assert(offsetof(PUZZLE_Base_C_EVENT_OnInteractLockStateChanged, CallFunc_GetInteractLocked_self_CastInput) == 0x000018, "Member 'PUZZLE_Base_C_EVENT_OnInteractLockStateChanged::CallFunc_GetInteractLocked_self_CastInput' has a wrong offset!");
static_assert(offsetof(PUZZLE_Base_C_EVENT_OnInteractLockStateChanged, CallFunc_GetInteractLocked_Result) == 0x000028, "Member 'PUZZLE_Base_C_EVENT_OnInteractLockStateChanged::CallFunc_GetInteractLocked_Result' has a wrong offset!");
static_assert(offsetof(PUZZLE_Base_C_EVENT_OnInteractLockStateChanged, CallFunc_GetInteractLocked_LockMessage) == 0x000030, "Member 'PUZZLE_Base_C_EVENT_OnInteractLockStateChanged::CallFunc_GetInteractLocked_LockMessage' has a wrong offset!");
static_assert(offsetof(PUZZLE_Base_C_EVENT_OnInteractLockStateChanged, CallFunc_Not_PreBool_ReturnValue) == 0x000048, "Member 'PUZZLE_Base_C_EVENT_OnInteractLockStateChanged::CallFunc_Not_PreBool_ReturnValue' has a wrong offset!");

// Function PUZZLE_Base.PUZZLE_Base_C.EVENT_OnLockedDoorStateChanged
// 0x0020 (0x0020 - 0x0000)
struct PUZZLE_Base_C_EVENT_OnLockedDoorStateChanged final
{
public:
	class AINTERACT_DoorBase_C*                   Door;                                              // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ENUM_DoorState                                State;                                             // 0x0008(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	TDelegate<void(class AINTERACT_DoorBase_C* Door, ENUM_DoorState State)> K2Node_CreateDelegate_OutputDelegate;              // 0x000C(0x0010)(ZeroConstructor, NoDestructor)
	bool                                          CallFunc_EqualEqual_ByteByte_ReturnValue;          // 0x001C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(PUZZLE_Base_C_EVENT_OnLockedDoorStateChanged) == 0x000008, "Wrong alignment on PUZZLE_Base_C_EVENT_OnLockedDoorStateChanged");
static_assert(sizeof(PUZZLE_Base_C_EVENT_OnLockedDoorStateChanged) == 0x000020, "Wrong size on PUZZLE_Base_C_EVENT_OnLockedDoorStateChanged");
static_assert(offsetof(PUZZLE_Base_C_EVENT_OnLockedDoorStateChanged, Door) == 0x000000, "Member 'PUZZLE_Base_C_EVENT_OnLockedDoorStateChanged::Door' has a wrong offset!");
static_assert(offsetof(PUZZLE_Base_C_EVENT_OnLockedDoorStateChanged, State) == 0x000008, "Member 'PUZZLE_Base_C_EVENT_OnLockedDoorStateChanged::State' has a wrong offset!");
static_assert(offsetof(PUZZLE_Base_C_EVENT_OnLockedDoorStateChanged, K2Node_CreateDelegate_OutputDelegate) == 0x00000C, "Member 'PUZZLE_Base_C_EVENT_OnLockedDoorStateChanged::K2Node_CreateDelegate_OutputDelegate' has a wrong offset!");
static_assert(offsetof(PUZZLE_Base_C_EVENT_OnLockedDoorStateChanged, CallFunc_EqualEqual_ByteByte_ReturnValue) == 0x00001C, "Member 'PUZZLE_Base_C_EVENT_OnLockedDoorStateChanged::CallFunc_EqualEqual_ByteByte_ReturnValue' has a wrong offset!");

// Function PUZZLE_Base.PUZZLE_Base_C.ShouldFocusOnInteract
// 0x0010 (0x0010 - 0x0000)
struct PUZZLE_Base_C_ShouldFocusOnInteract final
{
public:
	class AController*                            Controller;                                        // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Result;                                            // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_ShouldFocusOnInteract_Result;             // 0x0009(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(PUZZLE_Base_C_ShouldFocusOnInteract) == 0x000008, "Wrong alignment on PUZZLE_Base_C_ShouldFocusOnInteract");
static_assert(sizeof(PUZZLE_Base_C_ShouldFocusOnInteract) == 0x000010, "Wrong size on PUZZLE_Base_C_ShouldFocusOnInteract");
static_assert(offsetof(PUZZLE_Base_C_ShouldFocusOnInteract, Controller) == 0x000000, "Member 'PUZZLE_Base_C_ShouldFocusOnInteract::Controller' has a wrong offset!");
static_assert(offsetof(PUZZLE_Base_C_ShouldFocusOnInteract, Result) == 0x000008, "Member 'PUZZLE_Base_C_ShouldFocusOnInteract::Result' has a wrong offset!");
static_assert(offsetof(PUZZLE_Base_C_ShouldFocusOnInteract, CallFunc_ShouldFocusOnInteract_Result) == 0x000009, "Member 'PUZZLE_Base_C_ShouldFocusOnInteract::CallFunc_ShouldFocusOnInteract_Result' has a wrong offset!");

// Function PUZZLE_Base.PUZZLE_Base_C.GetCellComponentFromPrimitive
// 0x0020 (0x0020 - 0x0000)
struct PUZZLE_Base_C_GetCellComponentFromPrimitive final
{
public:
	class UPrimitiveComponent*                    PrimitiveComponent;                                // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UCOMP_PuzzleCell_Base_C*                Result;                                            // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UCOMP_PuzzleCell_Base_C*                K2Node_DynamicCast_AsCOMP_Puzzle_Cell_Base;        // 0x0010(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0018(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(PUZZLE_Base_C_GetCellComponentFromPrimitive) == 0x000008, "Wrong alignment on PUZZLE_Base_C_GetCellComponentFromPrimitive");
static_assert(sizeof(PUZZLE_Base_C_GetCellComponentFromPrimitive) == 0x000020, "Wrong size on PUZZLE_Base_C_GetCellComponentFromPrimitive");
static_assert(offsetof(PUZZLE_Base_C_GetCellComponentFromPrimitive, PrimitiveComponent) == 0x000000, "Member 'PUZZLE_Base_C_GetCellComponentFromPrimitive::PrimitiveComponent' has a wrong offset!");
static_assert(offsetof(PUZZLE_Base_C_GetCellComponentFromPrimitive, Result) == 0x000008, "Member 'PUZZLE_Base_C_GetCellComponentFromPrimitive::Result' has a wrong offset!");
static_assert(offsetof(PUZZLE_Base_C_GetCellComponentFromPrimitive, K2Node_DynamicCast_AsCOMP_Puzzle_Cell_Base) == 0x000010, "Member 'PUZZLE_Base_C_GetCellComponentFromPrimitive::K2Node_DynamicCast_AsCOMP_Puzzle_Cell_Base' has a wrong offset!");
static_assert(offsetof(PUZZLE_Base_C_GetCellComponentFromPrimitive, K2Node_DynamicCast_bSuccess) == 0x000018, "Member 'PUZZLE_Base_C_GetCellComponentFromPrimitive::K2Node_DynamicCast_bSuccess' has a wrong offset!");

// Function PUZZLE_Base.PUZZLE_Base_C.TryReceiveItem
// 0x0010 (0x0010 - 0x0000)
struct PUZZLE_Base_C_TryReceiveItem final
{
public:
	class UITEM_Base_C*                           Item;                                              // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Result;                                            // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_CanReceiveItem_Result;                    // 0x0009(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(PUZZLE_Base_C_TryReceiveItem) == 0x000008, "Wrong alignment on PUZZLE_Base_C_TryReceiveItem");
static_assert(sizeof(PUZZLE_Base_C_TryReceiveItem) == 0x000010, "Wrong size on PUZZLE_Base_C_TryReceiveItem");
static_assert(offsetof(PUZZLE_Base_C_TryReceiveItem, Item) == 0x000000, "Member 'PUZZLE_Base_C_TryReceiveItem::Item' has a wrong offset!");
static_assert(offsetof(PUZZLE_Base_C_TryReceiveItem, Result) == 0x000008, "Member 'PUZZLE_Base_C_TryReceiveItem::Result' has a wrong offset!");
static_assert(offsetof(PUZZLE_Base_C_TryReceiveItem, CallFunc_CanReceiveItem_Result) == 0x000009, "Member 'PUZZLE_Base_C_TryReceiveItem::CallFunc_CanReceiveItem_Result' has a wrong offset!");

// Function PUZZLE_Base.PUZZLE_Base_C.CanReceiveItem
// 0x0060 (0x0060 - 0x0000)
struct PUZZLE_Base_C_CanReceiveItem final
{
public:
	class UITEM_Base_C*                           Item;                                              // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Result;                                            // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UClass*                                 CallFunc_GetObjectClass_ReturnValue;               // 0x0010(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsJunctionBoxFunctional_Result;           // 0x0018(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_19[0x7];                                       // 0x0019(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TSoftClassPtr<class UClass>                   CallFunc_Conv_ClassToSoftClassReference_ReturnValue; // 0x0020(0x0028)(UObjectWrapper, HasGetValueTypeHash)
	bool                                          CallFunc_IsPuzzleSolved_Result;                    // 0x0048(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_EqualEqual_SoftClassReference_ReturnValue; // 0x0049(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Not_PreBool_ReturnValue;                  // 0x004A(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_4B[0x5];                                       // 0x004B(0x0005)(Fixing Size After Last Property [ Dumper-7 ])
	class UAnimBP_JunctionBox_C*                  CallFunc_GetAnimInstance_AnimInstance;             // 0x0050(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsAnyMontagePlaying_ReturnValue;          // 0x0058(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Not_PreBool_ReturnValue_1;                // 0x0059(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BooleanAND_ReturnValue;                   // 0x005A(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(PUZZLE_Base_C_CanReceiveItem) == 0x000008, "Wrong alignment on PUZZLE_Base_C_CanReceiveItem");
static_assert(sizeof(PUZZLE_Base_C_CanReceiveItem) == 0x000060, "Wrong size on PUZZLE_Base_C_CanReceiveItem");
static_assert(offsetof(PUZZLE_Base_C_CanReceiveItem, Item) == 0x000000, "Member 'PUZZLE_Base_C_CanReceiveItem::Item' has a wrong offset!");
static_assert(offsetof(PUZZLE_Base_C_CanReceiveItem, Result) == 0x000008, "Member 'PUZZLE_Base_C_CanReceiveItem::Result' has a wrong offset!");
static_assert(offsetof(PUZZLE_Base_C_CanReceiveItem, CallFunc_GetObjectClass_ReturnValue) == 0x000010, "Member 'PUZZLE_Base_C_CanReceiveItem::CallFunc_GetObjectClass_ReturnValue' has a wrong offset!");
static_assert(offsetof(PUZZLE_Base_C_CanReceiveItem, CallFunc_IsJunctionBoxFunctional_Result) == 0x000018, "Member 'PUZZLE_Base_C_CanReceiveItem::CallFunc_IsJunctionBoxFunctional_Result' has a wrong offset!");
static_assert(offsetof(PUZZLE_Base_C_CanReceiveItem, CallFunc_Conv_ClassToSoftClassReference_ReturnValue) == 0x000020, "Member 'PUZZLE_Base_C_CanReceiveItem::CallFunc_Conv_ClassToSoftClassReference_ReturnValue' has a wrong offset!");
static_assert(offsetof(PUZZLE_Base_C_CanReceiveItem, CallFunc_IsPuzzleSolved_Result) == 0x000048, "Member 'PUZZLE_Base_C_CanReceiveItem::CallFunc_IsPuzzleSolved_Result' has a wrong offset!");
static_assert(offsetof(PUZZLE_Base_C_CanReceiveItem, CallFunc_EqualEqual_SoftClassReference_ReturnValue) == 0x000049, "Member 'PUZZLE_Base_C_CanReceiveItem::CallFunc_EqualEqual_SoftClassReference_ReturnValue' has a wrong offset!");
static_assert(offsetof(PUZZLE_Base_C_CanReceiveItem, CallFunc_Not_PreBool_ReturnValue) == 0x00004A, "Member 'PUZZLE_Base_C_CanReceiveItem::CallFunc_Not_PreBool_ReturnValue' has a wrong offset!");
static_assert(offsetof(PUZZLE_Base_C_CanReceiveItem, CallFunc_GetAnimInstance_AnimInstance) == 0x000050, "Member 'PUZZLE_Base_C_CanReceiveItem::CallFunc_GetAnimInstance_AnimInstance' has a wrong offset!");
static_assert(offsetof(PUZZLE_Base_C_CanReceiveItem, CallFunc_IsAnyMontagePlaying_ReturnValue) == 0x000058, "Member 'PUZZLE_Base_C_CanReceiveItem::CallFunc_IsAnyMontagePlaying_ReturnValue' has a wrong offset!");
static_assert(offsetof(PUZZLE_Base_C_CanReceiveItem, CallFunc_Not_PreBool_ReturnValue_1) == 0x000059, "Member 'PUZZLE_Base_C_CanReceiveItem::CallFunc_Not_PreBool_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(PUZZLE_Base_C_CanReceiveItem, CallFunc_BooleanAND_ReturnValue) == 0x00005A, "Member 'PUZZLE_Base_C_CanReceiveItem::CallFunc_BooleanAND_ReturnValue' has a wrong offset!");

// Function PUZZLE_Base.PUZZLE_Base_C.GetCellInDirection
// 0x003C (0x003C - 0x0000)
struct PUZZLE_Base_C_GetCellInDirection final
{
public:
	struct FIntPoint                              SourcePosition;                                    // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ENUM_CardinalDirection                        Direction;                                         // 0x0008(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FIntPoint                              TargetPosition;                                    // 0x000C(0x0008)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         TargetIndex;                                       // 0x0014(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         SourceIndex;                                       // 0x0018(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_GetCellIndexFromLocation_Result;          // 0x001C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_SwitchEnum_CmpSuccess;                      // 0x0020(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_21[0x3];                                       // 0x0021(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FIntPoint                              CallFunc_GetCellLocationFromIndex_CellLocation;    // 0x0024(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Subtract_IntInt_ReturnValue;              // 0x002C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Subtract_IntInt_ReturnValue_1;            // 0x0030(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue;                   // 0x0034(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue_1;                 // 0x0038(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(PUZZLE_Base_C_GetCellInDirection) == 0x000004, "Wrong alignment on PUZZLE_Base_C_GetCellInDirection");
static_assert(sizeof(PUZZLE_Base_C_GetCellInDirection) == 0x00003C, "Wrong size on PUZZLE_Base_C_GetCellInDirection");
static_assert(offsetof(PUZZLE_Base_C_GetCellInDirection, SourcePosition) == 0x000000, "Member 'PUZZLE_Base_C_GetCellInDirection::SourcePosition' has a wrong offset!");
static_assert(offsetof(PUZZLE_Base_C_GetCellInDirection, Direction) == 0x000008, "Member 'PUZZLE_Base_C_GetCellInDirection::Direction' has a wrong offset!");
static_assert(offsetof(PUZZLE_Base_C_GetCellInDirection, TargetPosition) == 0x00000C, "Member 'PUZZLE_Base_C_GetCellInDirection::TargetPosition' has a wrong offset!");
static_assert(offsetof(PUZZLE_Base_C_GetCellInDirection, TargetIndex) == 0x000014, "Member 'PUZZLE_Base_C_GetCellInDirection::TargetIndex' has a wrong offset!");
static_assert(offsetof(PUZZLE_Base_C_GetCellInDirection, SourceIndex) == 0x000018, "Member 'PUZZLE_Base_C_GetCellInDirection::SourceIndex' has a wrong offset!");
static_assert(offsetof(PUZZLE_Base_C_GetCellInDirection, CallFunc_GetCellIndexFromLocation_Result) == 0x00001C, "Member 'PUZZLE_Base_C_GetCellInDirection::CallFunc_GetCellIndexFromLocation_Result' has a wrong offset!");
static_assert(offsetof(PUZZLE_Base_C_GetCellInDirection, K2Node_SwitchEnum_CmpSuccess) == 0x000020, "Member 'PUZZLE_Base_C_GetCellInDirection::K2Node_SwitchEnum_CmpSuccess' has a wrong offset!");
static_assert(offsetof(PUZZLE_Base_C_GetCellInDirection, CallFunc_GetCellLocationFromIndex_CellLocation) == 0x000024, "Member 'PUZZLE_Base_C_GetCellInDirection::CallFunc_GetCellLocationFromIndex_CellLocation' has a wrong offset!");
static_assert(offsetof(PUZZLE_Base_C_GetCellInDirection, CallFunc_Subtract_IntInt_ReturnValue) == 0x00002C, "Member 'PUZZLE_Base_C_GetCellInDirection::CallFunc_Subtract_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(PUZZLE_Base_C_GetCellInDirection, CallFunc_Subtract_IntInt_ReturnValue_1) == 0x000030, "Member 'PUZZLE_Base_C_GetCellInDirection::CallFunc_Subtract_IntInt_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(PUZZLE_Base_C_GetCellInDirection, CallFunc_Add_IntInt_ReturnValue) == 0x000034, "Member 'PUZZLE_Base_C_GetCellInDirection::CallFunc_Add_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(PUZZLE_Base_C_GetCellInDirection, CallFunc_Add_IntInt_ReturnValue_1) == 0x000038, "Member 'PUZZLE_Base_C_GetCellInDirection::CallFunc_Add_IntInt_ReturnValue_1' has a wrong offset!");

// Function PUZZLE_Base.PUZZLE_Base_C.EVENT_OnDisableAttribChanged
// 0x0010 (0x0010 - 0x0000)
struct PUZZLE_Base_C_EVENT_OnDisableAttribChanged final
{
public:
	float                                         CurrValue;                                         // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         LastValue;                                         // 0x0004(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         EmissiveScale;                                     // 0x0008(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Subtract_FloatFloat_ReturnValue;          // 0x000C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(PUZZLE_Base_C_EVENT_OnDisableAttribChanged) == 0x000004, "Wrong alignment on PUZZLE_Base_C_EVENT_OnDisableAttribChanged");
static_assert(sizeof(PUZZLE_Base_C_EVENT_OnDisableAttribChanged) == 0x000010, "Wrong size on PUZZLE_Base_C_EVENT_OnDisableAttribChanged");
static_assert(offsetof(PUZZLE_Base_C_EVENT_OnDisableAttribChanged, CurrValue) == 0x000000, "Member 'PUZZLE_Base_C_EVENT_OnDisableAttribChanged::CurrValue' has a wrong offset!");
static_assert(offsetof(PUZZLE_Base_C_EVENT_OnDisableAttribChanged, LastValue) == 0x000004, "Member 'PUZZLE_Base_C_EVENT_OnDisableAttribChanged::LastValue' has a wrong offset!");
static_assert(offsetof(PUZZLE_Base_C_EVENT_OnDisableAttribChanged, EmissiveScale) == 0x000008, "Member 'PUZZLE_Base_C_EVENT_OnDisableAttribChanged::EmissiveScale' has a wrong offset!");
static_assert(offsetof(PUZZLE_Base_C_EVENT_OnDisableAttribChanged, CallFunc_Subtract_FloatFloat_ReturnValue) == 0x00000C, "Member 'PUZZLE_Base_C_EVENT_OnDisableAttribChanged::CallFunc_Subtract_FloatFloat_ReturnValue' has a wrong offset!");

// Function PUZZLE_Base.PUZZLE_Base_C.SetInteractPowered
// 0x0010 (0x0010 - 0x0000)
struct PUZZLE_Base_C_SetInteractPowered final
{
public:
	bool                                          State;                                             // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Result;                                            // 0x0001(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_2[0x2];                                        // 0x0002(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_GetAttribValue_ReturnValue;               // 0x0004(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Subtract_FloatFloat_ReturnValue;          // 0x0008(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_NotEqual_BoolBool_ReturnValue;            // 0x000C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(PUZZLE_Base_C_SetInteractPowered) == 0x000004, "Wrong alignment on PUZZLE_Base_C_SetInteractPowered");
static_assert(sizeof(PUZZLE_Base_C_SetInteractPowered) == 0x000010, "Wrong size on PUZZLE_Base_C_SetInteractPowered");
static_assert(offsetof(PUZZLE_Base_C_SetInteractPowered, State) == 0x000000, "Member 'PUZZLE_Base_C_SetInteractPowered::State' has a wrong offset!");
static_assert(offsetof(PUZZLE_Base_C_SetInteractPowered, Result) == 0x000001, "Member 'PUZZLE_Base_C_SetInteractPowered::Result' has a wrong offset!");
static_assert(offsetof(PUZZLE_Base_C_SetInteractPowered, CallFunc_GetAttribValue_ReturnValue) == 0x000004, "Member 'PUZZLE_Base_C_SetInteractPowered::CallFunc_GetAttribValue_ReturnValue' has a wrong offset!");
static_assert(offsetof(PUZZLE_Base_C_SetInteractPowered, CallFunc_Subtract_FloatFloat_ReturnValue) == 0x000008, "Member 'PUZZLE_Base_C_SetInteractPowered::CallFunc_Subtract_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(PUZZLE_Base_C_SetInteractPowered, CallFunc_NotEqual_BoolBool_ReturnValue) == 0x00000C, "Member 'PUZZLE_Base_C_SetInteractPowered::CallFunc_NotEqual_BoolBool_ReturnValue' has a wrong offset!");

// Function PUZZLE_Base.PUZZLE_Base_C.CanModifyInteractPower
// 0x0001 (0x0001 - 0x0000)
struct PUZZLE_Base_C_CanModifyInteractPower final
{
public:
	bool                                          Result;                                            // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(PUZZLE_Base_C_CanModifyInteractPower) == 0x000001, "Wrong alignment on PUZZLE_Base_C_CanModifyInteractPower");
static_assert(sizeof(PUZZLE_Base_C_CanModifyInteractPower) == 0x000001, "Wrong size on PUZZLE_Base_C_CanModifyInteractPower");
static_assert(offsetof(PUZZLE_Base_C_CanModifyInteractPower, Result) == 0x000000, "Member 'PUZZLE_Base_C_CanModifyInteractPower::Result' has a wrong offset!");

// Function PUZZLE_Base.PUZZLE_Base_C.ResumeChannelingInteraction
// 0x0008 (0x0008 - 0x0000)
struct PUZZLE_Base_C_ResumeChannelingInteraction final
{
public:
	class APAWN_Hacker_Simple_C*                  HackerPawn;                                        // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(PUZZLE_Base_C_ResumeChannelingInteraction) == 0x000008, "Wrong alignment on PUZZLE_Base_C_ResumeChannelingInteraction");
static_assert(sizeof(PUZZLE_Base_C_ResumeChannelingInteraction) == 0x000008, "Wrong size on PUZZLE_Base_C_ResumeChannelingInteraction");
static_assert(offsetof(PUZZLE_Base_C_ResumeChannelingInteraction, HackerPawn) == 0x000000, "Member 'PUZZLE_Base_C_ResumeChannelingInteraction::HackerPawn' has a wrong offset!");

}

