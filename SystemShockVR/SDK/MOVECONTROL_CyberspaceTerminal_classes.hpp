#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: MOVECONTROL_CyberspaceTerminal

#include "Basic.hpp"

#include "CoreUObject_structs.hpp"
#include "MOVECONTROL_Base_classes.hpp"


namespace SDK
{

// BlueprintGeneratedClass MOVECONTROL_CyberspaceTerminal.MOVECONTROL_CyberspaceTerminal_C
// 0x0040 (0x00D8 - 0x0098)
class UMOVECONTROL_CyberspaceTerminal_C final : public UMOVECONTROL_Base_C
{
public:
	struct FVector                                StartLocation;                                     // 0x0094(0x000C)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash)
	struct FVector                                MountLocation;                                     // 0x00A0(0x000C)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash)
	struct FRotator                               StartRotation;                                     // 0x00AC(0x000C)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, ExposeOnSpawn)
	struct FRotator                               MountRotation;                                     // 0x00B8(0x000C)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, ExposeOnSpawn)
	bool                                          ExpireNextTick;                                    // 0x00C4(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_C5[0x3];                                       // 0x00C5(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         InterpDuration;                                    // 0x00C8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         FreeRotateDuration;                                // 0x00CC(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector2D                              RelativeYawPitchOffset;                            // 0x00D0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

public:
	void InitializeMoveControl(class APAWN_Hacker_Simple_C* Player_0, float GameTime, const struct FSTRUCT_MoveControlParams& InitialControlParams, bool* Result);
	void UpdateMoveControl(const struct FVector2D& MoveInput, const struct FVector2D& LookInput, const struct FSTRUCT_MoveControlParams& ControlParams, TArray<float>& ActionInputValues, float MoveInputScale, float Delta_Time, bool* ShouldExpire);

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"MOVECONTROL_CyberspaceTerminal_C">();
	}
	static class UMOVECONTROL_CyberspaceTerminal_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMOVECONTROL_CyberspaceTerminal_C>();
	}
};
static_assert(alignof(UMOVECONTROL_CyberspaceTerminal_C) == 0x000008, "Wrong alignment on UMOVECONTROL_CyberspaceTerminal_C");
static_assert(sizeof(UMOVECONTROL_CyberspaceTerminal_C) == 0x0000D8, "Wrong size on UMOVECONTROL_CyberspaceTerminal_C");
static_assert(offsetof(UMOVECONTROL_CyberspaceTerminal_C, StartLocation) == 0x000094, "Member 'UMOVECONTROL_CyberspaceTerminal_C::StartLocation' has a wrong offset!");
static_assert(offsetof(UMOVECONTROL_CyberspaceTerminal_C, MountLocation) == 0x0000A0, "Member 'UMOVECONTROL_CyberspaceTerminal_C::MountLocation' has a wrong offset!");
static_assert(offsetof(UMOVECONTROL_CyberspaceTerminal_C, StartRotation) == 0x0000AC, "Member 'UMOVECONTROL_CyberspaceTerminal_C::StartRotation' has a wrong offset!");
static_assert(offsetof(UMOVECONTROL_CyberspaceTerminal_C, MountRotation) == 0x0000B8, "Member 'UMOVECONTROL_CyberspaceTerminal_C::MountRotation' has a wrong offset!");
static_assert(offsetof(UMOVECONTROL_CyberspaceTerminal_C, ExpireNextTick) == 0x0000C4, "Member 'UMOVECONTROL_CyberspaceTerminal_C::ExpireNextTick' has a wrong offset!");
static_assert(offsetof(UMOVECONTROL_CyberspaceTerminal_C, InterpDuration) == 0x0000C8, "Member 'UMOVECONTROL_CyberspaceTerminal_C::InterpDuration' has a wrong offset!");
static_assert(offsetof(UMOVECONTROL_CyberspaceTerminal_C, FreeRotateDuration) == 0x0000CC, "Member 'UMOVECONTROL_CyberspaceTerminal_C::FreeRotateDuration' has a wrong offset!");
static_assert(offsetof(UMOVECONTROL_CyberspaceTerminal_C, RelativeYawPitchOffset) == 0x0000D0, "Member 'UMOVECONTROL_CyberspaceTerminal_C::RelativeYawPitchOffset' has a wrong offset!");

}

