#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: INTERACT_TransdermalDispenser

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "INTERACT_Focusable_Base_classes.hpp"
#include "ENUM_InteractionType_structs.hpp"


namespace SDK
{

// BlueprintGeneratedClass INTERACT_TransdermalDispenser.INTERACT_TransdermalDispenser_C
// 0x0390 (0x0718 - 0x0388)
class AINTERACT_TransdermalDispenser_C final : public AINTERACT_Focusable_Base_C
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame_INTERACT_TransdermalDispenser_C;    // 0x0388(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	class UCOMP_AttribManager_C*                  COMP_AttribManager;                                // 0x0390(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UCOMP_ScannableObject_C*                COMP_ScannableObject;                              // 0x0398(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UCOMP_VoxelCullable_C*                  COMP_VoxelCullable;                                // 0x03A0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UAudioComponent*                        PrepareSnackAudio;                                 // 0x03A8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USceneComponent*                        PatchSpawnNode;                                    // 0x03B0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UBoxComponent*                          Scan_CreditScreen;                                 // 0x03B8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USpotLightComponent*                    SpotLight;                                         // 0x03C0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UBoxComponent*                          Scan_Keypad_04;                                    // 0x03C8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UBoxComponent*                          Scan_Keypad_03;                                    // 0x03D0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UBoxComponent*                          Scan_Keypad_02;                                    // 0x03D8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UBoxComponent*                          Scan_Keypad_01;                                    // 0x03E0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UBoxComponent*                          KeypadTargetBox;                                   // 0x03E8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USceneComponent*                        FocusNode;                                         // 0x03F0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UPointOfInterestComponent_C*            PointOfInterestComponent;                          // 0x03F8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UBoxComponent*                          Scan_Patch_04;                                     // 0x0400(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UBoxComponent*                          Scan_Patch_03;                                     // 0x0408(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UBoxComponent*                          Scan_Patch_02;                                     // 0x0410(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UBoxComponent*                          Scan_Patch_01;                                     // 0x0418(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UBoxComponent*                          Scan_CancelButton;                                 // 0x0420(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UBoxComponent*                          Scan_CoinSlot;                                     // 0x0428(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UStaticMeshComponent*                   StaticMesh;                                        // 0x0430(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	TMap<TSoftClassPtr<class UClass>, uint8>      InitialPatchCounts;                                // 0x0438(0x0050)(Edit, BlueprintVisible)
	TMap<TSoftClassPtr<class UClass>, uint8>      PatchCostTable;                                    // 0x0488(0x0050)(Edit, BlueprintVisible, DisableEditOnInstance)
	TMap<TSoftClassPtr<class UClass>, float>      PatchIconPhase;                                    // 0x04D8(0x0050)(Edit, BlueprintVisible, DisableEditOnInstance)
	float                                         PreparePatchDuration;                              // 0x0528(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          HasInitialized;                                    // 0x052C(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, SaveGame, IsPlainOldData, NoDestructor)
	uint8                                         Pad_52D[0x3];                                      // 0x052D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         StockBits;                                         // 0x0530(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, SaveGame, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         CreditsPaid;                                       // 0x0534(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, SaveGame, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_535[0x3];                                      // 0x0535(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   AcceptedPaymentMessage;                            // 0x0538(0x0018)(Edit, BlueprintVisible, DisableEditOnInstance)
	class FText                                   RequiresPaymentMessage;                            // 0x0550(0x0018)(Edit, BlueprintVisible, DisableEditOnInstance)
	class FText                                   RefundProcessedMessage;                            // 0x0568(0x0018)(Edit, BlueprintVisible, DisableEditOnInstance)
	class FText                                   PatchDescriptionMessage;                           // 0x0580(0x0018)(Edit, BlueprintVisible, DisableEditOnInstance)
	class FText                                   CreditsDescriptionMessage;                         // 0x0598(0x0018)(Edit, BlueprintVisible, DisableEditOnInstance)
	class FText                                   SelectPatchMessage;                                // 0x05B0(0x0018)(Edit, BlueprintVisible, DisableEditOnInstance)
	class FText                                   SoldOutMessage;                                    // 0x05C8(0x0018)(Edit, BlueprintVisible, DisableEditOnInstance)
	class FText                                   NoStockMessage;                                    // 0x05E0(0x0018)(Edit, BlueprintVisible, DisableEditOnInstance)
	TSoftObjectPtr<class USoundCue>               PaymentAcceptedSoundCue;                           // 0x05F8(0x0028)(Edit, BlueprintVisible, DisableEditOnInstance, HasGetValueTypeHash)
	class APICKUP_Base_C*                         PreparingPatchPickupActor;                         // 0x0620(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, SaveGame, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FTimerHandle                           PreparePatchTimerHandle;                           // 0x0628(0x0008)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	struct FDataTableRowHandle                    CompleteGameEventOnInteract;                       // 0x0630(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor)
	TArray<class UPrimitiveComponent*>            KeypadComponents;                                  // 0x0640(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance, ContainsInstancedReference)
	TSoftObjectPtr<class USoundCue>               RefundProcessedSoundCue;                           // 0x0650(0x0028)(Edit, BlueprintVisible, DisableEditOnInstance, HasGetValueTypeHash)
	TSoftObjectPtr<class USoundCue>               KeypadEntrySoundCue;                               // 0x0678(0x0028)(Edit, BlueprintVisible, DisableEditOnInstance, HasGetValueTypeHash)
	TSoftObjectPtr<class USoundCue>               KeypadFailSoundCue;                                // 0x06A0(0x0028)(Edit, BlueprintVisible, DisableEditOnInstance, HasGetValueTypeHash)
	TSoftObjectPtr<class USoundCue>               PreparePatchLoopSoundCue;                          // 0x06C8(0x0028)(Edit, BlueprintVisible, DisableEditOnInstance, HasGetValueTypeHash)
	TSoftObjectPtr<class USoundCue>               DispensePatchSoundCue;                             // 0x06F0(0x0028)(Edit, BlueprintVisible, DisableEditOnInstance, HasGetValueTypeHash)

public:
	void ExecuteUbergraph_INTERACT_TransdermalDispenser(int32 EntryPoint);
	void BndEvt__INTERACT_TransdermalDispenser_COMP_VoxelCullable_K2Node_ComponentBoundEvent_0_CullableVisibilitySignature__DelegateSignature(bool bVisibleState);
	void ReceiveBeginPlay();
	void UserConstructionScript();
	void GetTargetShape(class UPrimitiveComponent* CursorPrimitive, class UShapeComponent** ShapeComponent);
	void TryInteract(class AActor* SourceActor, class UPrimitiveComponent* CursorPrimitive, ENUM_InteractionType InteractionType, struct FSTRUCT_InteractResults* InteractResults);
	void InitializeTransdermalDispenser();
	void InitializeKeypadComponents();
	void InitializeAttributes();
	void UpdateEmissiveStrength(float Scale);
	void GenerateInitialStock();
	void OnPaidCost();
	void TryMakePayment(class APAWN_SystemShockCharacter_C* Character, uint8 CostToPay, bool* Result);
	void TryRefundPayment(class APAWN_SystemShockCharacter_C* Character, bool* Result);
	void IsDispenserFunctional(bool* Result);
	void HasAnyPatchesInStock(bool* Result);
	void GetPatchStockCountAtIndex(int32 PatchIndex, uint8* Result);
	void GetPatchClassAtIndex(int32 PatchIndex, TSoftClassPtr<class UClass>* Result);
	void GetBestCostIncrement(uint8 MaxSpend, uint8* Result);
	void TryPurchasePatch(class APAWN_SystemShockCharacter_C* Character, class UPrimitiveComponent* PrimitiveComponent, bool* Result, class FText* FailedText);
	void TryCompleteGameEventOnInteract();
	void PlayKeypadErrorSound(class UPrimitiveComponent* PrimitiveComponent);
	void ModifyPatchStock(int32 PatchIndex, int32 StockChange, uint8* NewCount);
	void UpdatePatchSelectionScreen(int32 PatchIndex, uint8 StockCount);
	void UpdatePatchSelectionScreens();
	void GetFocusWorldTransform(struct FTransform* Transform);
	void CycleFocusedPrimitiveComponent(class UPrimitiveComponent* CursorPrimitive, bool Vertical, bool Previous);
	void OnFinishedFocusing();
	void UpdateCreditsScreen();
	void CanReceiveItem(class UITEM_Base_C* Item, bool* Result);
	void TryReceiveItem(class UITEM_Base_C* Item, bool* Result);
	void EVENT_OnDispensePatch();
	void UpdateDispenserVisibility(bool VisibilityState);
	void GetMinCostIncrement(uint8* Result);
	void EVENT_OnDisableAttribChanged(float CurrValue, float LastValue);

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"INTERACT_TransdermalDispenser_C">();
	}
	static class AINTERACT_TransdermalDispenser_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<AINTERACT_TransdermalDispenser_C>();
	}
};
static_assert(alignof(AINTERACT_TransdermalDispenser_C) == 0x000008, "Wrong alignment on AINTERACT_TransdermalDispenser_C");
static_assert(sizeof(AINTERACT_TransdermalDispenser_C) == 0x000718, "Wrong size on AINTERACT_TransdermalDispenser_C");
static_assert(offsetof(AINTERACT_TransdermalDispenser_C, UberGraphFrame_INTERACT_TransdermalDispenser_C) == 0x000388, "Member 'AINTERACT_TransdermalDispenser_C::UberGraphFrame_INTERACT_TransdermalDispenser_C' has a wrong offset!");
static_assert(offsetof(AINTERACT_TransdermalDispenser_C, COMP_AttribManager) == 0x000390, "Member 'AINTERACT_TransdermalDispenser_C::COMP_AttribManager' has a wrong offset!");
static_assert(offsetof(AINTERACT_TransdermalDispenser_C, COMP_ScannableObject) == 0x000398, "Member 'AINTERACT_TransdermalDispenser_C::COMP_ScannableObject' has a wrong offset!");
static_assert(offsetof(AINTERACT_TransdermalDispenser_C, COMP_VoxelCullable) == 0x0003A0, "Member 'AINTERACT_TransdermalDispenser_C::COMP_VoxelCullable' has a wrong offset!");
static_assert(offsetof(AINTERACT_TransdermalDispenser_C, PrepareSnackAudio) == 0x0003A8, "Member 'AINTERACT_TransdermalDispenser_C::PrepareSnackAudio' has a wrong offset!");
static_assert(offsetof(AINTERACT_TransdermalDispenser_C, PatchSpawnNode) == 0x0003B0, "Member 'AINTERACT_TransdermalDispenser_C::PatchSpawnNode' has a wrong offset!");
static_assert(offsetof(AINTERACT_TransdermalDispenser_C, Scan_CreditScreen) == 0x0003B8, "Member 'AINTERACT_TransdermalDispenser_C::Scan_CreditScreen' has a wrong offset!");
static_assert(offsetof(AINTERACT_TransdermalDispenser_C, SpotLight) == 0x0003C0, "Member 'AINTERACT_TransdermalDispenser_C::SpotLight' has a wrong offset!");
static_assert(offsetof(AINTERACT_TransdermalDispenser_C, Scan_Keypad_04) == 0x0003C8, "Member 'AINTERACT_TransdermalDispenser_C::Scan_Keypad_04' has a wrong offset!");
static_assert(offsetof(AINTERACT_TransdermalDispenser_C, Scan_Keypad_03) == 0x0003D0, "Member 'AINTERACT_TransdermalDispenser_C::Scan_Keypad_03' has a wrong offset!");
static_assert(offsetof(AINTERACT_TransdermalDispenser_C, Scan_Keypad_02) == 0x0003D8, "Member 'AINTERACT_TransdermalDispenser_C::Scan_Keypad_02' has a wrong offset!");
static_assert(offsetof(AINTERACT_TransdermalDispenser_C, Scan_Keypad_01) == 0x0003E0, "Member 'AINTERACT_TransdermalDispenser_C::Scan_Keypad_01' has a wrong offset!");
static_assert(offsetof(AINTERACT_TransdermalDispenser_C, KeypadTargetBox) == 0x0003E8, "Member 'AINTERACT_TransdermalDispenser_C::KeypadTargetBox' has a wrong offset!");
static_assert(offsetof(AINTERACT_TransdermalDispenser_C, FocusNode) == 0x0003F0, "Member 'AINTERACT_TransdermalDispenser_C::FocusNode' has a wrong offset!");
static_assert(offsetof(AINTERACT_TransdermalDispenser_C, PointOfInterestComponent) == 0x0003F8, "Member 'AINTERACT_TransdermalDispenser_C::PointOfInterestComponent' has a wrong offset!");
static_assert(offsetof(AINTERACT_TransdermalDispenser_C, Scan_Patch_04) == 0x000400, "Member 'AINTERACT_TransdermalDispenser_C::Scan_Patch_04' has a wrong offset!");
static_assert(offsetof(AINTERACT_TransdermalDispenser_C, Scan_Patch_03) == 0x000408, "Member 'AINTERACT_TransdermalDispenser_C::Scan_Patch_03' has a wrong offset!");
static_assert(offsetof(AINTERACT_TransdermalDispenser_C, Scan_Patch_02) == 0x000410, "Member 'AINTERACT_TransdermalDispenser_C::Scan_Patch_02' has a wrong offset!");
static_assert(offsetof(AINTERACT_TransdermalDispenser_C, Scan_Patch_01) == 0x000418, "Member 'AINTERACT_TransdermalDispenser_C::Scan_Patch_01' has a wrong offset!");
static_assert(offsetof(AINTERACT_TransdermalDispenser_C, Scan_CancelButton) == 0x000420, "Member 'AINTERACT_TransdermalDispenser_C::Scan_CancelButton' has a wrong offset!");
static_assert(offsetof(AINTERACT_TransdermalDispenser_C, Scan_CoinSlot) == 0x000428, "Member 'AINTERACT_TransdermalDispenser_C::Scan_CoinSlot' has a wrong offset!");
static_assert(offsetof(AINTERACT_TransdermalDispenser_C, StaticMesh) == 0x000430, "Member 'AINTERACT_TransdermalDispenser_C::StaticMesh' has a wrong offset!");
static_assert(offsetof(AINTERACT_TransdermalDispenser_C, InitialPatchCounts) == 0x000438, "Member 'AINTERACT_TransdermalDispenser_C::InitialPatchCounts' has a wrong offset!");
static_assert(offsetof(AINTERACT_TransdermalDispenser_C, PatchCostTable) == 0x000488, "Member 'AINTERACT_TransdermalDispenser_C::PatchCostTable' has a wrong offset!");
static_assert(offsetof(AINTERACT_TransdermalDispenser_C, PatchIconPhase) == 0x0004D8, "Member 'AINTERACT_TransdermalDispenser_C::PatchIconPhase' has a wrong offset!");
static_assert(offsetof(AINTERACT_TransdermalDispenser_C, PreparePatchDuration) == 0x000528, "Member 'AINTERACT_TransdermalDispenser_C::PreparePatchDuration' has a wrong offset!");
static_assert(offsetof(AINTERACT_TransdermalDispenser_C, HasInitialized) == 0x00052C, "Member 'AINTERACT_TransdermalDispenser_C::HasInitialized' has a wrong offset!");
static_assert(offsetof(AINTERACT_TransdermalDispenser_C, StockBits) == 0x000530, "Member 'AINTERACT_TransdermalDispenser_C::StockBits' has a wrong offset!");
static_assert(offsetof(AINTERACT_TransdermalDispenser_C, CreditsPaid) == 0x000534, "Member 'AINTERACT_TransdermalDispenser_C::CreditsPaid' has a wrong offset!");
static_assert(offsetof(AINTERACT_TransdermalDispenser_C, AcceptedPaymentMessage) == 0x000538, "Member 'AINTERACT_TransdermalDispenser_C::AcceptedPaymentMessage' has a wrong offset!");
static_assert(offsetof(AINTERACT_TransdermalDispenser_C, RequiresPaymentMessage) == 0x000550, "Member 'AINTERACT_TransdermalDispenser_C::RequiresPaymentMessage' has a wrong offset!");
static_assert(offsetof(AINTERACT_TransdermalDispenser_C, RefundProcessedMessage) == 0x000568, "Member 'AINTERACT_TransdermalDispenser_C::RefundProcessedMessage' has a wrong offset!");
static_assert(offsetof(AINTERACT_TransdermalDispenser_C, PatchDescriptionMessage) == 0x000580, "Member 'AINTERACT_TransdermalDispenser_C::PatchDescriptionMessage' has a wrong offset!");
static_assert(offsetof(AINTERACT_TransdermalDispenser_C, CreditsDescriptionMessage) == 0x000598, "Member 'AINTERACT_TransdermalDispenser_C::CreditsDescriptionMessage' has a wrong offset!");
static_assert(offsetof(AINTERACT_TransdermalDispenser_C, SelectPatchMessage) == 0x0005B0, "Member 'AINTERACT_TransdermalDispenser_C::SelectPatchMessage' has a wrong offset!");
static_assert(offsetof(AINTERACT_TransdermalDispenser_C, SoldOutMessage) == 0x0005C8, "Member 'AINTERACT_TransdermalDispenser_C::SoldOutMessage' has a wrong offset!");
static_assert(offsetof(AINTERACT_TransdermalDispenser_C, NoStockMessage) == 0x0005E0, "Member 'AINTERACT_TransdermalDispenser_C::NoStockMessage' has a wrong offset!");
static_assert(offsetof(AINTERACT_TransdermalDispenser_C, PaymentAcceptedSoundCue) == 0x0005F8, "Member 'AINTERACT_TransdermalDispenser_C::PaymentAcceptedSoundCue' has a wrong offset!");
static_assert(offsetof(AINTERACT_TransdermalDispenser_C, PreparingPatchPickupActor) == 0x000620, "Member 'AINTERACT_TransdermalDispenser_C::PreparingPatchPickupActor' has a wrong offset!");
static_assert(offsetof(AINTERACT_TransdermalDispenser_C, PreparePatchTimerHandle) == 0x000628, "Member 'AINTERACT_TransdermalDispenser_C::PreparePatchTimerHandle' has a wrong offset!");
static_assert(offsetof(AINTERACT_TransdermalDispenser_C, CompleteGameEventOnInteract) == 0x000630, "Member 'AINTERACT_TransdermalDispenser_C::CompleteGameEventOnInteract' has a wrong offset!");
static_assert(offsetof(AINTERACT_TransdermalDispenser_C, KeypadComponents) == 0x000640, "Member 'AINTERACT_TransdermalDispenser_C::KeypadComponents' has a wrong offset!");
static_assert(offsetof(AINTERACT_TransdermalDispenser_C, RefundProcessedSoundCue) == 0x000650, "Member 'AINTERACT_TransdermalDispenser_C::RefundProcessedSoundCue' has a wrong offset!");
static_assert(offsetof(AINTERACT_TransdermalDispenser_C, KeypadEntrySoundCue) == 0x000678, "Member 'AINTERACT_TransdermalDispenser_C::KeypadEntrySoundCue' has a wrong offset!");
static_assert(offsetof(AINTERACT_TransdermalDispenser_C, KeypadFailSoundCue) == 0x0006A0, "Member 'AINTERACT_TransdermalDispenser_C::KeypadFailSoundCue' has a wrong offset!");
static_assert(offsetof(AINTERACT_TransdermalDispenser_C, PreparePatchLoopSoundCue) == 0x0006C8, "Member 'AINTERACT_TransdermalDispenser_C::PreparePatchLoopSoundCue' has a wrong offset!");
static_assert(offsetof(AINTERACT_TransdermalDispenser_C, DispensePatchSoundCue) == 0x0006F0, "Member 'AINTERACT_TransdermalDispenser_C::DispensePatchSoundCue' has a wrong offset!");

}

