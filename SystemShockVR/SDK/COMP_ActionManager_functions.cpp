#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: COMP_ActionManager

#include "Basic.hpp"

#include "COMP_ActionManager_classes.hpp"
#include "COMP_ActionManager_parameters.hpp"


namespace SDK
{

// Function COMP_ActionManager.COMP_ActionManager_C.OnActionInterruptible__DelegateSignature
// (Public, Delegate, BlueprintCallable, BlueprintEvent)
// Parameters:
// class UCharacterAction_C*               Action                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UCOMP_ActionManager_C::OnActionInterruptible__DelegateSignature(class UCharacterAction_C* Action)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("COMP_ActionManager_C", "OnActionInterruptible__DelegateSignature");

	Params::COMP_ActionManager_C_OnActionInterruptible__DelegateSignature Parms{};

	Parms.Action = Action;

	UObject::ProcessEvent(Func, &Parms);
}


// Function COMP_ActionManager.COMP_ActionManager_C.OnActionInterrupted__DelegateSignature
// (Public, Delegate, BlueprintCallable, BlueprintEvent)
// Parameters:
// class UCharacterAction_C*               Action                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UCOMP_ActionManager_C::OnActionInterrupted__DelegateSignature(class UCharacterAction_C* Action)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("COMP_ActionManager_C", "OnActionInterrupted__DelegateSignature");

	Params::COMP_ActionManager_C_OnActionInterrupted__DelegateSignature Parms{};

	Parms.Action = Action;

	UObject::ProcessEvent(Func, &Parms);
}


// Function COMP_ActionManager.COMP_ActionManager_C.OnActionStarted__DelegateSignature
// (Public, Delegate, BlueprintCallable, BlueprintEvent)
// Parameters:
// class UCharacterAction_C*               Action                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UCOMP_ActionManager_C::OnActionStarted__DelegateSignature(class UCharacterAction_C* Action)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("COMP_ActionManager_C", "OnActionStarted__DelegateSignature");

	Params::COMP_ActionManager_C_OnActionStarted__DelegateSignature Parms{};

	Parms.Action = Action;

	UObject::ProcessEvent(Func, &Parms);
}


// Function COMP_ActionManager.COMP_ActionManager_C.OnActionEnded__DelegateSignature
// (Public, Delegate, BlueprintCallable, BlueprintEvent)
// Parameters:
// class UCharacterAction_C*               Action                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UCOMP_ActionManager_C::OnActionEnded__DelegateSignature(class UCharacterAction_C* Action)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("COMP_ActionManager_C", "OnActionEnded__DelegateSignature");

	Params::COMP_ActionManager_C_OnActionEnded__DelegateSignature Parms{};

	Parms.Action = Action;

	UObject::ProcessEvent(Func, &Parms);
}


// Function COMP_ActionManager.COMP_ActionManager_C.OnQueuedActionStarted__DelegateSignature
// (Public, Delegate, BlueprintCallable, BlueprintEvent)
// Parameters:
// class UCharacterAction_C*               Action                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UCOMP_ActionManager_C::OnQueuedActionStarted__DelegateSignature(class UCharacterAction_C* Action)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("COMP_ActionManager_C", "OnQueuedActionStarted__DelegateSignature");

	Params::COMP_ActionManager_C_OnQueuedActionStarted__DelegateSignature Parms{};

	Parms.Action = Action;

	UObject::ProcessEvent(Func, &Parms);
}


// Function COMP_ActionManager.COMP_ActionManager_C.ExecuteUbergraph_COMP_ActionManager
// (Final, UbergraphFunction)
// Parameters:
// int32                                   EntryPoint                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UCOMP_ActionManager_C::ExecuteUbergraph_COMP_ActionManager(int32 EntryPoint)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("COMP_ActionManager_C", "ExecuteUbergraph_COMP_ActionManager");

	Params::COMP_ActionManager_C_ExecuteUbergraph_COMP_ActionManager Parms{};

	Parms.EntryPoint = EntryPoint;

	UObject::ProcessEvent(Func, &Parms);
}


// Function COMP_ActionManager.COMP_ActionManager_C.ReceiveTick
// (Event, Public, BlueprintEvent)
// Parameters:
// float                                   DeltaSeconds                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UCOMP_ActionManager_C::ReceiveTick(float DeltaSeconds)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("COMP_ActionManager_C", "ReceiveTick");

	Params::COMP_ActionManager_C_ReceiveTick Parms{};

	Parms.DeltaSeconds = DeltaSeconds;

	UObject::ProcessEvent(Func, &Parms);
}


// Function COMP_ActionManager.COMP_ActionManager_C.InitializeActionManager
// (Public, BlueprintCallable, BlueprintEvent)

void UCOMP_ActionManager_C::InitializeActionManager()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("COMP_ActionManager_C", "InitializeActionManager");

	UObject::ProcessEvent(Func, nullptr);
}


// Function COMP_ActionManager.COMP_ActionManager_C.CanBeginAction
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// class UAnimMontage*                     Montage                                                (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// ENUM_ActionPriority                     Priority                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    Result                                                 (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void UCOMP_ActionManager_C::CanBeginAction(class UAnimMontage* Montage, ENUM_ActionPriority Priority, bool* Result)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("COMP_ActionManager_C", "CanBeginAction");

	Params::COMP_ActionManager_C_CanBeginAction Parms{};

	Parms.Montage = Montage;
	Parms.Priority = Priority;

	UObject::ProcessEvent(Func, &Parms);

	if (Result != nullptr)
		*Result = Parms.Result;
}


// Function COMP_ActionManager.COMP_ActionManager_C.TryBeginAction
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// class UAnimMontage*                     Montage                                                (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// ENUM_ActionPriority                     Priority                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class UCharacterAction_C*               Action                                                 (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UCOMP_ActionManager_C::TryBeginAction(class UAnimMontage* Montage, ENUM_ActionPriority Priority, class UCharacterAction_C** Action)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("COMP_ActionManager_C", "TryBeginAction");

	Params::COMP_ActionManager_C_TryBeginAction Parms{};

	Parms.Montage = Montage;
	Parms.Priority = Priority;

	UObject::ProcessEvent(Func, &Parms);

	if (Action != nullptr)
		*Action = Parms.Action;
}


// Function COMP_ActionManager.COMP_ActionManager_C.TryEndCurrentAction
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// ENUM_ActionPriority                     InterruptPriority                                      (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// float                                   BlendOutTime                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    Result                                                 (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void UCOMP_ActionManager_C::TryEndCurrentAction(ENUM_ActionPriority InterruptPriority, float BlendOutTime, bool* Result)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("COMP_ActionManager_C", "TryEndCurrentAction");

	Params::COMP_ActionManager_C_TryEndCurrentAction Parms{};

	Parms.InterruptPriority = InterruptPriority;
	Parms.BlendOutTime = BlendOutTime;

	UObject::ProcessEvent(Func, &Parms);

	if (Result != nullptr)
		*Result = Parms.Result;
}


// Function COMP_ActionManager.COMP_ActionManager_C.ForceBeginAction
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// class UAnimMontage*                     Montage                                                (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// ENUM_ActionPriority                     Priority                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class UCharacterAction_C*               Action                                                 (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UCOMP_ActionManager_C::ForceBeginAction(class UAnimMontage* Montage, ENUM_ActionPriority Priority, class UCharacterAction_C** Action)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("COMP_ActionManager_C", "ForceBeginAction");

	Params::COMP_ActionManager_C_ForceBeginAction Parms{};

	Parms.Montage = Montage;
	Parms.Priority = Priority;

	UObject::ProcessEvent(Func, &Parms);

	if (Action != nullptr)
		*Action = Parms.Action;
}


// Function COMP_ActionManager.COMP_ActionManager_C.ForceEndCurrentAction
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// class UCharacterAction_C*               NewAction                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// float                                   BlendOutTime                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UCOMP_ActionManager_C::ForceEndCurrentAction(class UCharacterAction_C* NewAction, float BlendOutTime)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("COMP_ActionManager_C", "ForceEndCurrentAction");

	Params::COMP_ActionManager_C_ForceEndCurrentAction Parms{};

	Parms.NewAction = NewAction;
	Parms.BlendOutTime = BlendOutTime;

	UObject::ProcessEvent(Func, &Parms);
}


// Function COMP_ActionManager.COMP_ActionManager_C.OnActionMontageEnded
// (Private, BlueprintCallable, BlueprintEvent)
// Parameters:
// class UAnimMontage*                     Montage                                                (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    Interrupted                                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)

void UCOMP_ActionManager_C::OnActionMontageEnded(class UAnimMontage* Montage, bool Interrupted)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("COMP_ActionManager_C", "OnActionMontageEnded");

	Params::COMP_ActionManager_C_OnActionMontageEnded Parms{};

	Parms.Montage = Montage;
	Parms.Interrupted = Interrupted;

	UObject::ProcessEvent(Func, &Parms);
}


// Function COMP_ActionManager.COMP_ActionManager_C.TryQueueAction
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// class UAnimMontage*                     Montage                                                (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// ENUM_ActionPriority                     Priority                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// float                                   QueueDuration                                          (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UCOMP_ActionManager_C::TryQueueAction(class UAnimMontage* Montage, ENUM_ActionPriority Priority, float QueueDuration)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("COMP_ActionManager_C", "TryQueueAction");

	Params::COMP_ActionManager_C_TryQueueAction Parms{};

	Parms.Montage = Montage;
	Parms.Priority = Priority;
	Parms.QueueDuration = QueueDuration;

	UObject::ProcessEvent(Func, &Parms);
}


// Function COMP_ActionManager.COMP_ActionManager_C.TryQueueActionWithEvent
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// class UAnimMontage*                     Montage                                                (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// ENUM_ActionPriority                     Priority                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// float                                   QueueDuration                                          (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FLatentEventHandle               EventHandle                                            (BlueprintVisible, BlueprintReadOnly, Parm, ContainsInstancedReference)

void UCOMP_ActionManager_C::TryQueueActionWithEvent(class UAnimMontage* Montage, ENUM_ActionPriority Priority, float QueueDuration, const struct FLatentEventHandle& EventHandle)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("COMP_ActionManager_C", "TryQueueActionWithEvent");

	Params::COMP_ActionManager_C_TryQueueActionWithEvent Parms{};

	Parms.Montage = Montage;
	Parms.Priority = Priority;
	Parms.QueueDuration = QueueDuration;
	Parms.EventHandle = std::move(EventHandle);

	UObject::ProcessEvent(Func, &Parms);
}


// Function COMP_ActionManager.COMP_ActionManager_C.ClearQueuedAction
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)

void UCOMP_ActionManager_C::ClearQueuedAction()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("COMP_ActionManager_C", "ClearQueuedAction");

	UObject::ProcessEvent(Func, nullptr);
}


// Function COMP_ActionManager.COMP_ActionManager_C.OnTryBeginQueuedAction
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// class UCharacterAction_C*               PreviousAction                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UCOMP_ActionManager_C::OnTryBeginQueuedAction(class UCharacterAction_C* PreviousAction)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("COMP_ActionManager_C", "OnTryBeginQueuedAction");

	Params::COMP_ActionManager_C_OnTryBeginQueuedAction Parms{};

	Parms.PreviousAction = PreviousAction;

	UObject::ProcessEvent(Func, &Parms);
}


// Function COMP_ActionManager.COMP_ActionManager_C.OnMontageDurationEnded
// (Private, BlueprintCallable, BlueprintEvent)

void UCOMP_ActionManager_C::OnMontageDurationEnded()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("COMP_ActionManager_C", "OnMontageDurationEnded");

	UObject::ProcessEvent(Func, nullptr);
}


// Function COMP_ActionManager.COMP_ActionManager_C.UpdateActiveAction
// (Private, BlueprintCallable, BlueprintEvent)
// Parameters:
// float                                   DeltaTime                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UCOMP_ActionManager_C::UpdateActiveAction(float DeltaTime)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("COMP_ActionManager_C", "UpdateActiveAction");

	Params::COMP_ActionManager_C_UpdateActiveAction Parms{};

	Parms.DeltaTime = DeltaTime;

	UObject::ProcessEvent(Func, &Parms);
}


// Function COMP_ActionManager.COMP_ActionManager_C.SetActionsPaused
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    State                                                  (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)

void UCOMP_ActionManager_C::SetActionsPaused(bool State)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("COMP_ActionManager_C", "SetActionsPaused");

	Params::COMP_ActionManager_C_SetActionsPaused Parms{};

	Parms.State = State;

	UObject::ProcessEvent(Func, &Parms);
}


// Function COMP_ActionManager.COMP_ActionManager_C.GetCurrentAction
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// class UCharacterAction_C*               CurrentAction_0                                        (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UCOMP_ActionManager_C::GetCurrentAction(class UCharacterAction_C** CurrentAction_0)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("COMP_ActionManager_C", "GetCurrentAction");

	Params::COMP_ActionManager_C_GetCurrentAction Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (CurrentAction_0 != nullptr)
		*CurrentAction_0 = Parms.CurrentAction_0;
}


// Function COMP_ActionManager.COMP_ActionManager_C.GetCurrentMontage
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// class UAnimMontage*                     Result                                                 (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UCOMP_ActionManager_C::GetCurrentMontage(class UAnimMontage** Result)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("COMP_ActionManager_C", "GetCurrentMontage");

	Params::COMP_ActionManager_C_GetCurrentMontage Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (Result != nullptr)
		*Result = Parms.Result;
}


// Function COMP_ActionManager.COMP_ActionManager_C.HasQueuedAction
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// bool                                    Result                                                 (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void UCOMP_ActionManager_C::HasQueuedAction(bool* Result)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("COMP_ActionManager_C", "HasQueuedAction");

	Params::COMP_ActionManager_C_HasQueuedAction Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (Result != nullptr)
		*Result = Parms.Result;
}


// Function COMP_ActionManager.COMP_ActionManager_C.GetActionProgress
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// float                                   Result                                                 (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UCOMP_ActionManager_C::GetActionProgress(float* Result)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("COMP_ActionManager_C", "GetActionProgress");

	Params::COMP_ActionManager_C_GetActionProgress Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (Result != nullptr)
		*Result = Parms.Result;
}


// Function COMP_ActionManager.COMP_ActionManager_C.IsMontageCurrentlyPlaying
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// class UAnimMontage*                     Montage                                                (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    Result                                                 (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void UCOMP_ActionManager_C::IsMontageCurrentlyPlaying(class UAnimMontage* Montage, bool* Result)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("COMP_ActionManager_C", "IsMontageCurrentlyPlaying");

	Params::COMP_ActionManager_C_IsMontageCurrentlyPlaying Parms{};

	Parms.Montage = Montage;

	UObject::ProcessEvent(Func, &Parms);

	if (Result != nullptr)
		*Result = Parms.Result;
}


// Function COMP_ActionManager.COMP_ActionManager_C.IsActionQueuedWithMontage
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// class UAnimMontage*                     Montage                                                (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    Result                                                 (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void UCOMP_ActionManager_C::IsActionQueuedWithMontage(class UAnimMontage* Montage, bool* Result)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("COMP_ActionManager_C", "IsActionQueuedWithMontage");

	Params::COMP_ActionManager_C_IsActionQueuedWithMontage Parms{};

	Parms.Montage = Montage;

	UObject::ProcessEvent(Func, &Parms);

	if (Result != nullptr)
		*Result = Parms.Result;
}


// Function COMP_ActionManager.COMP_ActionManager_C.SetActionsEnabled
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    State                                                  (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)

void UCOMP_ActionManager_C::SetActionsEnabled(bool State)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("COMP_ActionManager_C", "SetActionsEnabled");

	Params::COMP_ActionManager_C_SetActionsEnabled Parms{};

	Parms.State = State;

	UObject::ProcessEvent(Func, &Parms);
}


// Function COMP_ActionManager.COMP_ActionManager_C.SetActionTickEnabled
// (Protected, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    Enabled                                                (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)

void UCOMP_ActionManager_C::SetActionTickEnabled(bool Enabled)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("COMP_ActionManager_C", "SetActionTickEnabled");

	Params::COMP_ActionManager_C_SetActionTickEnabled Parms{};

	Parms.Enabled = Enabled;

	UObject::ProcessEvent(Func, &Parms);
}


// Function COMP_ActionManager.COMP_ActionManager_C.GetQueuedActionMontage
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// class UAnimMontage*                     QueuedMontage                                          (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UCOMP_ActionManager_C::GetQueuedActionMontage(class UAnimMontage** QueuedMontage)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("COMP_ActionManager_C", "GetQueuedActionMontage");

	Params::COMP_ActionManager_C_GetQueuedActionMontage Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (QueuedMontage != nullptr)
		*QueuedMontage = Parms.QueuedMontage;
}


// Function COMP_ActionManager.COMP_ActionManager_C.GetQueueTimeRemaining
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// float                                   Result                                                 (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UCOMP_ActionManager_C::GetQueueTimeRemaining(float* Result)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("COMP_ActionManager_C", "GetQueueTimeRemaining");

	Params::COMP_ActionManager_C_GetQueueTimeRemaining Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (Result != nullptr)
		*Result = Parms.Result;
}


// Function COMP_ActionManager.COMP_ActionManager_C.ShouldSaveComponent
// (Event, Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// struct FStreamingSaveGameComponentParamsParams_0                                               (Parm, OutParm, NoDestructor)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor)

bool UCOMP_ActionManager_C::ShouldSaveComponent(struct FStreamingSaveGameComponentParams* Params_0)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("COMP_ActionManager_C", "ShouldSaveComponent");

	Params::COMP_ActionManager_C_ShouldSaveComponent Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (Params_0 != nullptr)
		*Params_0 = std::move(Parms.Params_0);

	return Parms.ReturnValue;
}

}

