#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: PICKUP_Explosive_Base

#include "Basic.hpp"

#include "PICKUP_Explosive_Base_classes.hpp"
#include "PICKUP_Explosive_Base_parameters.hpp"


namespace SDK
{

// Function PICKUP_Explosive_Base.PICKUP_Explosive_Base_C.ExecuteUbergraph_PICKUP_Explosive_Base
// (Final, UbergraphFunction, HasDefaults)
// Parameters:
// int32                                   EntryPoint                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void APICKUP_Explosive_Base_C::ExecuteUbergraph_PICKUP_Explosive_Base(int32 EntryPoint)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("PICKUP_Explosive_Base_C", "ExecuteUbergraph_PICKUP_Explosive_Base");

	Params::PICKUP_Explosive_Base_C_ExecuteUbergraph_PICKUP_Explosive_Base Parms{};

	Parms.EntryPoint = EntryPoint;

	UObject::ProcessEvent(Func, &Parms);
}


// Function PICKUP_Explosive_Base.PICKUP_Explosive_Base_C.BndEvt__PICKUP_Explosive_Base_COMP_AttribManager_K2Node_ComponentBoundEvent_1_OnDamageSignature__DelegateSignature
// (BlueprintEvent)
// Parameters:
// class AActor*                           OtherActor                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FAttribDamageInstance            DamageInstance                                         (BlueprintVisible, BlueprintReadOnly, Parm)
// class UObject*                          UserParams                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void APICKUP_Explosive_Base_C::BndEvt__PICKUP_Explosive_Base_COMP_AttribManager_K2Node_ComponentBoundEvent_1_OnDamageSignature__DelegateSignature(class AActor* OtherActor, const struct FAttribDamageInstance& DamageInstance, class UObject* UserParams)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("PICKUP_Explosive_Base_C", "BndEvt__PICKUP_Explosive_Base_COMP_AttribManager_K2Node_ComponentBoundEvent_1_OnDamageSignature__DelegateSignature");

	Params::PICKUP_Explosive_Base_C_BndEvt__PICKUP_Explosive_Base_COMP_AttribManager_K2Node_ComponentBoundEvent_1_OnDamageSignature__DelegateSignature Parms{};

	Parms.OtherActor = OtherActor;
	Parms.DamageInstance = std::move(DamageInstance);
	Parms.UserParams = UserParams;

	UObject::ProcessEvent(Func, &Parms);
}


// Function PICKUP_Explosive_Base.PICKUP_Explosive_Base_C.ReceiveBeginPlay
// (Event, Protected, BlueprintEvent)

void APICKUP_Explosive_Base_C::ReceiveBeginPlay()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("PICKUP_Explosive_Base_C", "ReceiveBeginPlay");

	UObject::ProcessEvent(Func, nullptr);
}


// Function PICKUP_Explosive_Base.PICKUP_Explosive_Base_C.StartExplosiveDetonationTimer
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// float                                   DesiredDelayTime                                       (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void APICKUP_Explosive_Base_C::StartExplosiveDetonationTimer(float DesiredDelayTime)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("PICKUP_Explosive_Base_C", "StartExplosiveDetonationTimer");

	Params::PICKUP_Explosive_Base_C_StartExplosiveDetonationTimer Parms{};

	Parms.DesiredDelayTime = DesiredDelayTime;

	UObject::ProcessEvent(Func, &Parms);
}


// Function PICKUP_Explosive_Base.PICKUP_Explosive_Base_C.StartDefaultExplosiveDetonationTimer
// (Protected, BlueprintCallable, BlueprintEvent)

void APICKUP_Explosive_Base_C::StartDefaultExplosiveDetonationTimer()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("PICKUP_Explosive_Base_C", "StartDefaultExplosiveDetonationTimer");

	UObject::ProcessEvent(Func, nullptr);
}


// Function PICKUP_Explosive_Base.PICKUP_Explosive_Base_C.OnDetonateExplosivePickup
// (Protected, HasDefaults, BlueprintCallable, BlueprintEvent)

void APICKUP_Explosive_Base_C::OnDetonateExplosivePickup()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("PICKUP_Explosive_Base_C", "OnDetonateExplosivePickup");

	UObject::ProcessEvent(Func, nullptr);
}


// Function PICKUP_Explosive_Base.PICKUP_Explosive_Base_C.ShouldGrantDefaultAttributes
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// bool                                    Result                                                 (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void APICKUP_Explosive_Base_C::ShouldGrantDefaultAttributes(bool* Result)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("PICKUP_Explosive_Base_C", "ShouldGrantDefaultAttributes");

	Params::PICKUP_Explosive_Base_C_ShouldGrantDefaultAttributes Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (Result != nullptr)
		*Result = Parms.Result;
}


// Function PICKUP_Explosive_Base.PICKUP_Explosive_Base_C.CanPickupItem
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// bool                                    Result                                                 (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
// class FText                             FailMessage                                            (Parm, OutParm)

void APICKUP_Explosive_Base_C::CanPickupItem(bool* Result, class FText* FailMessage)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("PICKUP_Explosive_Base_C", "CanPickupItem");

	Params::PICKUP_Explosive_Base_C_CanPickupItem Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (Result != nullptr)
		*Result = Parms.Result;

	if (FailMessage != nullptr)
		*FailMessage = std::move(Parms.FailMessage);
}

}

