#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: COMP_LimbManager

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "Engine_classes.hpp"
#include "ENUM_Axis_structs.hpp"


namespace SDK
{

// BlueprintGeneratedClass COMP_LimbManager.COMP_LimbManager_C
// 0x00B8 (0x0168 - 0x00B0)
class UCOMP_LimbManager_C final : public UActorComponent
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x00B0(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	class UDataTable*                             LimbDataTable;                                     // 0x00B8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FName                                   PelvisBone;                                        // 0x00C0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         DamageImpulseStartTimestamp;                       // 0x00C8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         DamageImpulseDuration;                             // 0x00CC(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FName                                   DamageImpulseBone;                                 // 0x00D0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FName                                   BackBone;                                          // 0x00D8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         DeathRattleStartTimestamp;                         // 0x00E0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         DeathRattleDuration;                               // 0x00E4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          IsPerformingCustomDeathBehavior;                   // 0x00E8(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_E9[0x3];                                       // 0x00E9(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         RagdollSettleStartTimestamp;                       // 0x00EC(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         RagdollSettleDuration;                             // 0x00F0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_F4[0x4];                                       // 0x00F4(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UPhysicsAsset*                          Hit_React_Physics_Asset;                           // 0x00F8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          GravityEnabled;                                    // 0x0100(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_101[0x7];                                      // 0x0101(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TMap<class FName, class FName>                BoneToLimbMap;                                     // 0x0108(0x0050)(Edit, BlueprintVisible)
	class UOBJ_ImpactData_C*                      DeathRattleImpactData;                             // 0x0158(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FTimerHandle                           DeathRattleStartTimerHandle;                       // 0x0160(0x0008)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)

public:
	void ExecuteUbergraph_COMP_LimbManager(int32 EntryPoint);
	void ReceiveTick(float DeltaSeconds);
	void IsLimbImpactedInFront(const struct FSTRUCT_AnimatedLimb& LimbSettings, const struct FVector& ImpactLocation, bool* Result);
	void SearchForLimbNameFromBoneName(class FName BoneName, class FName* Result);
	void GetLimbFromBoneName(class FName BoneName, struct FSTRUCT_AnimatedLimb* Limb);
	void GetLimbDamageBonusFromBoneName(class FName BoneName, const struct FVector& ImpactLocation, float* BonusPercent);
	void GetOwnerPawn(class APAWN_Enemy_C** Pawn);
	void ReceiveDamage(class UOBJ_ImpactData_C* ImpactData, const struct FAttribDamageInstance& DamageInstance);
	void ReceiveImpulseWhileAlive(class UOBJ_ImpactData_C* ImpactData, const struct FAttribDamageInstance& DamageInstance);
	void ReceiveImpulseWhileDead(class UOBJ_ImpactData_C* ImpactData, const struct FAttribDamageInstance& DamageInstance);
	void ReceiveImpulseWhileDying(class UOBJ_ImpactData_C* ImpactData, const struct FAttribDamageInstance& DamageIntance);
	void GetLimbMesh(class USkeletalMeshComponent** Mesh);
	void StartDeathRattleTransition(class UOBJ_ImpactData_C* ImpactData);
	void SetRagdollEnabled();
	void OnEndDeathRattleTransition();
	void UpdateDeathRattle();
	void ApplyDeathBlow(class UOBJ_ImpactData_C* ImpactData, const struct FSTRUCT_DeathBlowData& DeathBlow);
	void EVENT_OnDeathBlowFinished();
	void CanBecomeLowFi(bool* Result);
	void UpdateRagdollSettle();
	void GetLimbArmorBonusFromBoneName(class FName BoneName, const struct FVector& ImpactLocation, float* BonusPercent);
	void UpdateDamageImpulse();
	void InitHitReactPhysicsAsset();
	void GetLimbDamageBonusFromEpicenter(const struct FVector& Location, float Radius, float* Result);
	void GetLimbDamageAndArmorBonusFromBoneName(class FName BoneName, const struct FVector& ImpactLocation, float* DamageBonusPercent, float* ArmorBonusPercent);
	void EVENT_StartDeferredDeathRattleTransition();
	bool ShouldSaveComponent(struct FStreamingSaveGameComponentParams* Params_0);

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"COMP_LimbManager_C">();
	}
	static class UCOMP_LimbManager_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<UCOMP_LimbManager_C>();
	}
};
static_assert(alignof(UCOMP_LimbManager_C) == 0x000008, "Wrong alignment on UCOMP_LimbManager_C");
static_assert(sizeof(UCOMP_LimbManager_C) == 0x000168, "Wrong size on UCOMP_LimbManager_C");
static_assert(offsetof(UCOMP_LimbManager_C, UberGraphFrame) == 0x0000B0, "Member 'UCOMP_LimbManager_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(UCOMP_LimbManager_C, LimbDataTable) == 0x0000B8, "Member 'UCOMP_LimbManager_C::LimbDataTable' has a wrong offset!");
static_assert(offsetof(UCOMP_LimbManager_C, PelvisBone) == 0x0000C0, "Member 'UCOMP_LimbManager_C::PelvisBone' has a wrong offset!");
static_assert(offsetof(UCOMP_LimbManager_C, DamageImpulseStartTimestamp) == 0x0000C8, "Member 'UCOMP_LimbManager_C::DamageImpulseStartTimestamp' has a wrong offset!");
static_assert(offsetof(UCOMP_LimbManager_C, DamageImpulseDuration) == 0x0000CC, "Member 'UCOMP_LimbManager_C::DamageImpulseDuration' has a wrong offset!");
static_assert(offsetof(UCOMP_LimbManager_C, DamageImpulseBone) == 0x0000D0, "Member 'UCOMP_LimbManager_C::DamageImpulseBone' has a wrong offset!");
static_assert(offsetof(UCOMP_LimbManager_C, BackBone) == 0x0000D8, "Member 'UCOMP_LimbManager_C::BackBone' has a wrong offset!");
static_assert(offsetof(UCOMP_LimbManager_C, DeathRattleStartTimestamp) == 0x0000E0, "Member 'UCOMP_LimbManager_C::DeathRattleStartTimestamp' has a wrong offset!");
static_assert(offsetof(UCOMP_LimbManager_C, DeathRattleDuration) == 0x0000E4, "Member 'UCOMP_LimbManager_C::DeathRattleDuration' has a wrong offset!");
static_assert(offsetof(UCOMP_LimbManager_C, IsPerformingCustomDeathBehavior) == 0x0000E8, "Member 'UCOMP_LimbManager_C::IsPerformingCustomDeathBehavior' has a wrong offset!");
static_assert(offsetof(UCOMP_LimbManager_C, RagdollSettleStartTimestamp) == 0x0000EC, "Member 'UCOMP_LimbManager_C::RagdollSettleStartTimestamp' has a wrong offset!");
static_assert(offsetof(UCOMP_LimbManager_C, RagdollSettleDuration) == 0x0000F0, "Member 'UCOMP_LimbManager_C::RagdollSettleDuration' has a wrong offset!");
static_assert(offsetof(UCOMP_LimbManager_C, Hit_React_Physics_Asset) == 0x0000F8, "Member 'UCOMP_LimbManager_C::Hit_React_Physics_Asset' has a wrong offset!");
static_assert(offsetof(UCOMP_LimbManager_C, GravityEnabled) == 0x000100, "Member 'UCOMP_LimbManager_C::GravityEnabled' has a wrong offset!");
static_assert(offsetof(UCOMP_LimbManager_C, BoneToLimbMap) == 0x000108, "Member 'UCOMP_LimbManager_C::BoneToLimbMap' has a wrong offset!");
static_assert(offsetof(UCOMP_LimbManager_C, DeathRattleImpactData) == 0x000158, "Member 'UCOMP_LimbManager_C::DeathRattleImpactData' has a wrong offset!");
static_assert(offsetof(UCOMP_LimbManager_C, DeathRattleStartTimerHandle) == 0x000160, "Member 'UCOMP_LimbManager_C::DeathRattleStartTimerHandle' has a wrong offset!");

}

