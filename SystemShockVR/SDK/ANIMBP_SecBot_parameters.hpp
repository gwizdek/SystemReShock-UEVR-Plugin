#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: ANIMBP_SecBot

#include "Basic.hpp"

#include "CoreUObject_structs.hpp"
#include "ENUM_DeathBlowType_structs.hpp"
#include "ENUM_Emotions_structs.hpp"
#include "Engine_structs.hpp"


namespace SDK::Params
{

// Function ANIMBP_SecBot.ANIMBP_SecBot_C.ExecuteUbergraph_ANIMBP_SecBot
// 0x0008 (0x0008 - 0x0000)
struct ANIMBP_SecBot_C_ExecuteUbergraph_ANIMBP_SecBot final
{
public:
	int32                                         EntryPoint;                                        // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         K2Node_Event_DeltaTimeX;                           // 0x0004(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(ANIMBP_SecBot_C_ExecuteUbergraph_ANIMBP_SecBot) == 0x000004, "Wrong alignment on ANIMBP_SecBot_C_ExecuteUbergraph_ANIMBP_SecBot");
static_assert(sizeof(ANIMBP_SecBot_C_ExecuteUbergraph_ANIMBP_SecBot) == 0x000008, "Wrong size on ANIMBP_SecBot_C_ExecuteUbergraph_ANIMBP_SecBot");
static_assert(offsetof(ANIMBP_SecBot_C_ExecuteUbergraph_ANIMBP_SecBot, EntryPoint) == 0x000000, "Member 'ANIMBP_SecBot_C_ExecuteUbergraph_ANIMBP_SecBot::EntryPoint' has a wrong offset!");
static_assert(offsetof(ANIMBP_SecBot_C_ExecuteUbergraph_ANIMBP_SecBot, K2Node_Event_DeltaTimeX) == 0x000004, "Member 'ANIMBP_SecBot_C_ExecuteUbergraph_ANIMBP_SecBot::K2Node_Event_DeltaTimeX' has a wrong offset!");

// Function ANIMBP_SecBot.ANIMBP_SecBot_C.BlueprintUpdateAnimation
// 0x0004 (0x0004 - 0x0000)
struct ANIMBP_SecBot_C_BlueprintUpdateAnimation final
{
public:
	float                                         DeltaTimeX;                                        // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(ANIMBP_SecBot_C_BlueprintUpdateAnimation) == 0x000004, "Wrong alignment on ANIMBP_SecBot_C_BlueprintUpdateAnimation");
static_assert(sizeof(ANIMBP_SecBot_C_BlueprintUpdateAnimation) == 0x000004, "Wrong size on ANIMBP_SecBot_C_BlueprintUpdateAnimation");
static_assert(offsetof(ANIMBP_SecBot_C_BlueprintUpdateAnimation, DeltaTimeX) == 0x000000, "Member 'ANIMBP_SecBot_C_BlueprintUpdateAnimation::DeltaTimeX' has a wrong offset!");

// Function ANIMBP_SecBot.ANIMBP_SecBot_C.UpdateAiming
// 0x01C0 (0x01C0 - 0x0000)
struct ANIMBP_SecBot_C_UpdateAiming final
{
public:
	float                                         DeltaSeconds;                                      // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                NewAimLocalDirection;                              // 0x0004(0x000C)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         DesiredRotationAngle;                              // 0x0010(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                LocalRotationAxis;                                 // 0x0014(0x000C)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                AimTargetLocalDirection;                           // 0x0020(0x000C)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                AimTargetWorldDirection;                           // 0x002C(0x000C)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                AimTargetWorldLocation;                            // 0x0038(0x000C)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                AimSourceWorldLocation;                            // 0x0044(0x000C)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FTransform                             AimWorldTransform;                                 // 0x0050(0x0030)(Edit, BlueprintVisible, IsPlainOldData, NoDestructor)
	class USkeletalMeshComponent*                 EnemyMesh;                                         // 0x0080(0x0008)(Edit, BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class APAWN_Enemy_C*                          EnemyPawn;                                         // 0x0088(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Not_PreBool_ReturnValue;                  // 0x0090(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_91[0x3];                                       // 0x0091(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FRotator                               CallFunc_MakeRotFromX_ReturnValue;                 // 0x0094(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                         CallFunc_Multiply_FloatFloat_ReturnValue;          // 0x00A0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               CallFunc_ComposeRotators_ReturnValue;              // 0x00A4(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                         CallFunc_FClamp_ReturnValue;                       // 0x00B0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Multiply_FloatFloat_ReturnValue_1;        // 0x00B4(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Cross_VectorVector_ReturnValue;           // 0x00B8(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_RotateAngleAxis_ReturnValue;              // 0x00C4(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_GetRotationTowards_OutRotationAxis;       // 0x00D0(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_GetRotationTowards_ReturnValue;           // 0x00DC(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FTransform                             CallFunc_K2_GetComponentToWorld_ReturnValue;       // 0x00E0(0x0030)(IsPlainOldData, NoDestructor)
	struct FVector                                CallFunc_InverseTransformDirection_ReturnValue;    // 0x0110(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Subtract_VectorVector_ReturnValue;        // 0x011C(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Get_Target_Location_Location;             // 0x0128(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Normal_ReturnValue;                       // 0x0134(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakTransform_Location;                  // 0x0140(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               CallFunc_BreakTransform_Rotation;                  // 0x014C(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FVector                                CallFunc_BreakTransform_Scale;                     // 0x0158(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_GetActorForwardVector_ReturnValue;        // 0x0164(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 CallFunc_GetOwningActor_ReturnValue;               // 0x0170(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_178[0x8];                                      // 0x0178(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTransform                             CallFunc_GetSocketTransform_ReturnValue;           // 0x0180(0x0030)(IsPlainOldData, NoDestructor)
	class APAWN_Enemy_C*                          K2Node_DynamicCast_AsPAWN_Enemy;                   // 0x01B0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x01B8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x01B9(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(ANIMBP_SecBot_C_UpdateAiming) == 0x000010, "Wrong alignment on ANIMBP_SecBot_C_UpdateAiming");
static_assert(sizeof(ANIMBP_SecBot_C_UpdateAiming) == 0x0001C0, "Wrong size on ANIMBP_SecBot_C_UpdateAiming");
static_assert(offsetof(ANIMBP_SecBot_C_UpdateAiming, DeltaSeconds) == 0x000000, "Member 'ANIMBP_SecBot_C_UpdateAiming::DeltaSeconds' has a wrong offset!");
static_assert(offsetof(ANIMBP_SecBot_C_UpdateAiming, NewAimLocalDirection) == 0x000004, "Member 'ANIMBP_SecBot_C_UpdateAiming::NewAimLocalDirection' has a wrong offset!");
static_assert(offsetof(ANIMBP_SecBot_C_UpdateAiming, DesiredRotationAngle) == 0x000010, "Member 'ANIMBP_SecBot_C_UpdateAiming::DesiredRotationAngle' has a wrong offset!");
static_assert(offsetof(ANIMBP_SecBot_C_UpdateAiming, LocalRotationAxis) == 0x000014, "Member 'ANIMBP_SecBot_C_UpdateAiming::LocalRotationAxis' has a wrong offset!");
static_assert(offsetof(ANIMBP_SecBot_C_UpdateAiming, AimTargetLocalDirection) == 0x000020, "Member 'ANIMBP_SecBot_C_UpdateAiming::AimTargetLocalDirection' has a wrong offset!");
static_assert(offsetof(ANIMBP_SecBot_C_UpdateAiming, AimTargetWorldDirection) == 0x00002C, "Member 'ANIMBP_SecBot_C_UpdateAiming::AimTargetWorldDirection' has a wrong offset!");
static_assert(offsetof(ANIMBP_SecBot_C_UpdateAiming, AimTargetWorldLocation) == 0x000038, "Member 'ANIMBP_SecBot_C_UpdateAiming::AimTargetWorldLocation' has a wrong offset!");
static_assert(offsetof(ANIMBP_SecBot_C_UpdateAiming, AimSourceWorldLocation) == 0x000044, "Member 'ANIMBP_SecBot_C_UpdateAiming::AimSourceWorldLocation' has a wrong offset!");
static_assert(offsetof(ANIMBP_SecBot_C_UpdateAiming, AimWorldTransform) == 0x000050, "Member 'ANIMBP_SecBot_C_UpdateAiming::AimWorldTransform' has a wrong offset!");
static_assert(offsetof(ANIMBP_SecBot_C_UpdateAiming, EnemyMesh) == 0x000080, "Member 'ANIMBP_SecBot_C_UpdateAiming::EnemyMesh' has a wrong offset!");
static_assert(offsetof(ANIMBP_SecBot_C_UpdateAiming, EnemyPawn) == 0x000088, "Member 'ANIMBP_SecBot_C_UpdateAiming::EnemyPawn' has a wrong offset!");
static_assert(offsetof(ANIMBP_SecBot_C_UpdateAiming, CallFunc_Not_PreBool_ReturnValue) == 0x000090, "Member 'ANIMBP_SecBot_C_UpdateAiming::CallFunc_Not_PreBool_ReturnValue' has a wrong offset!");
static_assert(offsetof(ANIMBP_SecBot_C_UpdateAiming, CallFunc_MakeRotFromX_ReturnValue) == 0x000094, "Member 'ANIMBP_SecBot_C_UpdateAiming::CallFunc_MakeRotFromX_ReturnValue' has a wrong offset!");
static_assert(offsetof(ANIMBP_SecBot_C_UpdateAiming, CallFunc_Multiply_FloatFloat_ReturnValue) == 0x0000A0, "Member 'ANIMBP_SecBot_C_UpdateAiming::CallFunc_Multiply_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(ANIMBP_SecBot_C_UpdateAiming, CallFunc_ComposeRotators_ReturnValue) == 0x0000A4, "Member 'ANIMBP_SecBot_C_UpdateAiming::CallFunc_ComposeRotators_ReturnValue' has a wrong offset!");
static_assert(offsetof(ANIMBP_SecBot_C_UpdateAiming, CallFunc_FClamp_ReturnValue) == 0x0000B0, "Member 'ANIMBP_SecBot_C_UpdateAiming::CallFunc_FClamp_ReturnValue' has a wrong offset!");
static_assert(offsetof(ANIMBP_SecBot_C_UpdateAiming, CallFunc_Multiply_FloatFloat_ReturnValue_1) == 0x0000B4, "Member 'ANIMBP_SecBot_C_UpdateAiming::CallFunc_Multiply_FloatFloat_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(ANIMBP_SecBot_C_UpdateAiming, CallFunc_Cross_VectorVector_ReturnValue) == 0x0000B8, "Member 'ANIMBP_SecBot_C_UpdateAiming::CallFunc_Cross_VectorVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(ANIMBP_SecBot_C_UpdateAiming, CallFunc_RotateAngleAxis_ReturnValue) == 0x0000C4, "Member 'ANIMBP_SecBot_C_UpdateAiming::CallFunc_RotateAngleAxis_ReturnValue' has a wrong offset!");
static_assert(offsetof(ANIMBP_SecBot_C_UpdateAiming, CallFunc_GetRotationTowards_OutRotationAxis) == 0x0000D0, "Member 'ANIMBP_SecBot_C_UpdateAiming::CallFunc_GetRotationTowards_OutRotationAxis' has a wrong offset!");
static_assert(offsetof(ANIMBP_SecBot_C_UpdateAiming, CallFunc_GetRotationTowards_ReturnValue) == 0x0000DC, "Member 'ANIMBP_SecBot_C_UpdateAiming::CallFunc_GetRotationTowards_ReturnValue' has a wrong offset!");
static_assert(offsetof(ANIMBP_SecBot_C_UpdateAiming, CallFunc_K2_GetComponentToWorld_ReturnValue) == 0x0000E0, "Member 'ANIMBP_SecBot_C_UpdateAiming::CallFunc_K2_GetComponentToWorld_ReturnValue' has a wrong offset!");
static_assert(offsetof(ANIMBP_SecBot_C_UpdateAiming, CallFunc_InverseTransformDirection_ReturnValue) == 0x000110, "Member 'ANIMBP_SecBot_C_UpdateAiming::CallFunc_InverseTransformDirection_ReturnValue' has a wrong offset!");
static_assert(offsetof(ANIMBP_SecBot_C_UpdateAiming, CallFunc_Subtract_VectorVector_ReturnValue) == 0x00011C, "Member 'ANIMBP_SecBot_C_UpdateAiming::CallFunc_Subtract_VectorVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(ANIMBP_SecBot_C_UpdateAiming, CallFunc_Get_Target_Location_Location) == 0x000128, "Member 'ANIMBP_SecBot_C_UpdateAiming::CallFunc_Get_Target_Location_Location' has a wrong offset!");
static_assert(offsetof(ANIMBP_SecBot_C_UpdateAiming, CallFunc_Normal_ReturnValue) == 0x000134, "Member 'ANIMBP_SecBot_C_UpdateAiming::CallFunc_Normal_ReturnValue' has a wrong offset!");
static_assert(offsetof(ANIMBP_SecBot_C_UpdateAiming, CallFunc_BreakTransform_Location) == 0x000140, "Member 'ANIMBP_SecBot_C_UpdateAiming::CallFunc_BreakTransform_Location' has a wrong offset!");
static_assert(offsetof(ANIMBP_SecBot_C_UpdateAiming, CallFunc_BreakTransform_Rotation) == 0x00014C, "Member 'ANIMBP_SecBot_C_UpdateAiming::CallFunc_BreakTransform_Rotation' has a wrong offset!");
static_assert(offsetof(ANIMBP_SecBot_C_UpdateAiming, CallFunc_BreakTransform_Scale) == 0x000158, "Member 'ANIMBP_SecBot_C_UpdateAiming::CallFunc_BreakTransform_Scale' has a wrong offset!");
static_assert(offsetof(ANIMBP_SecBot_C_UpdateAiming, CallFunc_GetActorForwardVector_ReturnValue) == 0x000164, "Member 'ANIMBP_SecBot_C_UpdateAiming::CallFunc_GetActorForwardVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(ANIMBP_SecBot_C_UpdateAiming, CallFunc_GetOwningActor_ReturnValue) == 0x000170, "Member 'ANIMBP_SecBot_C_UpdateAiming::CallFunc_GetOwningActor_ReturnValue' has a wrong offset!");
static_assert(offsetof(ANIMBP_SecBot_C_UpdateAiming, CallFunc_GetSocketTransform_ReturnValue) == 0x000180, "Member 'ANIMBP_SecBot_C_UpdateAiming::CallFunc_GetSocketTransform_ReturnValue' has a wrong offset!");
static_assert(offsetof(ANIMBP_SecBot_C_UpdateAiming, K2Node_DynamicCast_AsPAWN_Enemy) == 0x0001B0, "Member 'ANIMBP_SecBot_C_UpdateAiming::K2Node_DynamicCast_AsPAWN_Enemy' has a wrong offset!");
static_assert(offsetof(ANIMBP_SecBot_C_UpdateAiming, K2Node_DynamicCast_bSuccess) == 0x0001B8, "Member 'ANIMBP_SecBot_C_UpdateAiming::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(ANIMBP_SecBot_C_UpdateAiming, CallFunc_IsValid_ReturnValue) == 0x0001B9, "Member 'ANIMBP_SecBot_C_UpdateAiming::CallFunc_IsValid_ReturnValue' has a wrong offset!");

// Function ANIMBP_SecBot.ANIMBP_SecBot_C.AnimGraph
// 0x0010 (0x0010 - 0x0000)
struct ANIMBP_SecBot_C_AnimGraph final
{
public:
	struct FPoseLink                              AnimGraph_0;                                       // 0x0000(0x0010)(Parm, OutParm, NoDestructor)
};
static_assert(alignof(ANIMBP_SecBot_C_AnimGraph) == 0x000008, "Wrong alignment on ANIMBP_SecBot_C_AnimGraph");
static_assert(sizeof(ANIMBP_SecBot_C_AnimGraph) == 0x000010, "Wrong size on ANIMBP_SecBot_C_AnimGraph");
static_assert(offsetof(ANIMBP_SecBot_C_AnimGraph, AnimGraph_0) == 0x000000, "Member 'ANIMBP_SecBot_C_AnimGraph::AnimGraph_0' has a wrong offset!");

// Function ANIMBP_SecBot.ANIMBP_SecBot_C.SetVoiceAmplitude
// 0x0008 (0x0008 - 0x0000)
struct ANIMBP_SecBot_C_SetVoiceAmplitude final
{
public:
	float                                         VoiceAmplitude;                                    // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Result;                                            // 0x0004(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(ANIMBP_SecBot_C_SetVoiceAmplitude) == 0x000004, "Wrong alignment on ANIMBP_SecBot_C_SetVoiceAmplitude");
static_assert(sizeof(ANIMBP_SecBot_C_SetVoiceAmplitude) == 0x000008, "Wrong size on ANIMBP_SecBot_C_SetVoiceAmplitude");
static_assert(offsetof(ANIMBP_SecBot_C_SetVoiceAmplitude, VoiceAmplitude) == 0x000000, "Member 'ANIMBP_SecBot_C_SetVoiceAmplitude::VoiceAmplitude' has a wrong offset!");
static_assert(offsetof(ANIMBP_SecBot_C_SetVoiceAmplitude, Result) == 0x000004, "Member 'ANIMBP_SecBot_C_SetVoiceAmplitude::Result' has a wrong offset!");

// Function ANIMBP_SecBot.ANIMBP_SecBot_C.IsStunned
// 0x0001 (0x0001 - 0x0000)
struct ANIMBP_SecBot_C_IsStunned final
{
public:
	bool                                          Result;                                            // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(ANIMBP_SecBot_C_IsStunned) == 0x000001, "Wrong alignment on ANIMBP_SecBot_C_IsStunned");
static_assert(sizeof(ANIMBP_SecBot_C_IsStunned) == 0x000001, "Wrong size on ANIMBP_SecBot_C_IsStunned");
static_assert(offsetof(ANIMBP_SecBot_C_IsStunned, Result) == 0x000000, "Member 'ANIMBP_SecBot_C_IsStunned::Result' has a wrong offset!");

// Function ANIMBP_SecBot.ANIMBP_SecBot_C.SetStunnedSequence
// 0x0010 (0x0010 - 0x0000)
struct ANIMBP_SecBot_C_SetStunnedSequence final
{
public:
	class UAnimSequence*                          StunnedSequence;                                   // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Result;                                            // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0009(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(ANIMBP_SecBot_C_SetStunnedSequence) == 0x000008, "Wrong alignment on ANIMBP_SecBot_C_SetStunnedSequence");
static_assert(sizeof(ANIMBP_SecBot_C_SetStunnedSequence) == 0x000010, "Wrong size on ANIMBP_SecBot_C_SetStunnedSequence");
static_assert(offsetof(ANIMBP_SecBot_C_SetStunnedSequence, StunnedSequence) == 0x000000, "Member 'ANIMBP_SecBot_C_SetStunnedSequence::StunnedSequence' has a wrong offset!");
static_assert(offsetof(ANIMBP_SecBot_C_SetStunnedSequence, Result) == 0x000008, "Member 'ANIMBP_SecBot_C_SetStunnedSequence::Result' has a wrong offset!");
static_assert(offsetof(ANIMBP_SecBot_C_SetStunnedSequence, CallFunc_IsValid_ReturnValue) == 0x000009, "Member 'ANIMBP_SecBot_C_SetStunnedSequence::CallFunc_IsValid_ReturnValue' has a wrong offset!");

// Function ANIMBP_SecBot.ANIMBP_SecBot_C.SetSprintEnabled
// 0x0002 (0x0002 - 0x0000)
struct ANIMBP_SecBot_C_SetSprintEnabled final
{
public:
	bool                                          SprintEnabled;                                     // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Result;                                            // 0x0001(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(ANIMBP_SecBot_C_SetSprintEnabled) == 0x000001, "Wrong alignment on ANIMBP_SecBot_C_SetSprintEnabled");
static_assert(sizeof(ANIMBP_SecBot_C_SetSprintEnabled) == 0x000002, "Wrong size on ANIMBP_SecBot_C_SetSprintEnabled");
static_assert(offsetof(ANIMBP_SecBot_C_SetSprintEnabled, SprintEnabled) == 0x000000, "Member 'ANIMBP_SecBot_C_SetSprintEnabled::SprintEnabled' has a wrong offset!");
static_assert(offsetof(ANIMBP_SecBot_C_SetSprintEnabled, Result) == 0x000001, "Member 'ANIMBP_SecBot_C_SetSprintEnabled::Result' has a wrong offset!");

// Function ANIMBP_SecBot.ANIMBP_SecBot_C.SetTravelMode
// 0x0002 (0x0002 - 0x0000)
struct ANIMBP_SecBot_C_SetTravelMode final
{
public:
	bool                                          TravelModeOn;                                      // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Result;                                            // 0x0001(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(ANIMBP_SecBot_C_SetTravelMode) == 0x000001, "Wrong alignment on ANIMBP_SecBot_C_SetTravelMode");
static_assert(sizeof(ANIMBP_SecBot_C_SetTravelMode) == 0x000002, "Wrong size on ANIMBP_SecBot_C_SetTravelMode");
static_assert(offsetof(ANIMBP_SecBot_C_SetTravelMode, TravelModeOn) == 0x000000, "Member 'ANIMBP_SecBot_C_SetTravelMode::TravelModeOn' has a wrong offset!");
static_assert(offsetof(ANIMBP_SecBot_C_SetTravelMode, Result) == 0x000001, "Member 'ANIMBP_SecBot_C_SetTravelMode::Result' has a wrong offset!");

// Function ANIMBP_SecBot.ANIMBP_SecBot_C.GetAimTarget
// 0x0008 (0x0008 - 0x0000)
struct ANIMBP_SecBot_C_GetAimTarget final
{
public:
	class UOBJ_EnemyTarget_C*                     Target;                                            // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(ANIMBP_SecBot_C_GetAimTarget) == 0x000008, "Wrong alignment on ANIMBP_SecBot_C_GetAimTarget");
static_assert(sizeof(ANIMBP_SecBot_C_GetAimTarget) == 0x000008, "Wrong size on ANIMBP_SecBot_C_GetAimTarget");
static_assert(offsetof(ANIMBP_SecBot_C_GetAimTarget, Target) == 0x000000, "Member 'ANIMBP_SecBot_C_GetAimTarget::Target' has a wrong offset!");

// Function ANIMBP_SecBot.ANIMBP_SecBot_C.SetAimTarget
// 0x0010 (0x0010 - 0x0000)
struct ANIMBP_SecBot_C_SetAimTarget final
{
public:
	class UOBJ_EnemyTarget_C*                     Target;                                            // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Result;                                            // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(ANIMBP_SecBot_C_SetAimTarget) == 0x000008, "Wrong alignment on ANIMBP_SecBot_C_SetAimTarget");
static_assert(sizeof(ANIMBP_SecBot_C_SetAimTarget) == 0x000010, "Wrong size on ANIMBP_SecBot_C_SetAimTarget");
static_assert(offsetof(ANIMBP_SecBot_C_SetAimTarget, Target) == 0x000000, "Member 'ANIMBP_SecBot_C_SetAimTarget::Target' has a wrong offset!");
static_assert(offsetof(ANIMBP_SecBot_C_SetAimTarget, Result) == 0x000008, "Member 'ANIMBP_SecBot_C_SetAimTarget::Result' has a wrong offset!");

// Function ANIMBP_SecBot.ANIMBP_SecBot_C.GetIdleOverrideSequence
// 0x0008 (0x0008 - 0x0000)
struct ANIMBP_SecBot_C_GetIdleOverrideSequence final
{
public:
	class UAnimSequenceBase*                      IdleOverride_0;                                    // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(ANIMBP_SecBot_C_GetIdleOverrideSequence) == 0x000008, "Wrong alignment on ANIMBP_SecBot_C_GetIdleOverrideSequence");
static_assert(sizeof(ANIMBP_SecBot_C_GetIdleOverrideSequence) == 0x000008, "Wrong size on ANIMBP_SecBot_C_GetIdleOverrideSequence");
static_assert(offsetof(ANIMBP_SecBot_C_GetIdleOverrideSequence, IdleOverride_0) == 0x000000, "Member 'ANIMBP_SecBot_C_GetIdleOverrideSequence::IdleOverride_0' has a wrong offset!");

// Function ANIMBP_SecBot.ANIMBP_SecBot_C.SetIdleOverrideSequence
// 0x0010 (0x0010 - 0x0000)
struct ANIMBP_SecBot_C_SetIdleOverrideSequence final
{
public:
	class UAnimSequenceBase*                      IdleOverride_0;                                    // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Result;                                            // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0009(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(ANIMBP_SecBot_C_SetIdleOverrideSequence) == 0x000008, "Wrong alignment on ANIMBP_SecBot_C_SetIdleOverrideSequence");
static_assert(sizeof(ANIMBP_SecBot_C_SetIdleOverrideSequence) == 0x000010, "Wrong size on ANIMBP_SecBot_C_SetIdleOverrideSequence");
static_assert(offsetof(ANIMBP_SecBot_C_SetIdleOverrideSequence, IdleOverride_0) == 0x000000, "Member 'ANIMBP_SecBot_C_SetIdleOverrideSequence::IdleOverride_0' has a wrong offset!");
static_assert(offsetof(ANIMBP_SecBot_C_SetIdleOverrideSequence, Result) == 0x000008, "Member 'ANIMBP_SecBot_C_SetIdleOverrideSequence::Result' has a wrong offset!");
static_assert(offsetof(ANIMBP_SecBot_C_SetIdleOverrideSequence, CallFunc_IsValid_ReturnValue) == 0x000009, "Member 'ANIMBP_SecBot_C_SetIdleOverrideSequence::CallFunc_IsValid_ReturnValue' has a wrong offset!");

// Function ANIMBP_SecBot.ANIMBP_SecBot_C.SetRelativeAimAngleOffset
// 0x0010 (0x0010 - 0x0000)
struct ANIMBP_SecBot_C_SetRelativeAimAngleOffset final
{
public:
	float                                         YawOffset;                                         // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         PitchOffset;                                       // 0x0004(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Alpha;                                             // 0x0008(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Result;                                            // 0x000C(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(ANIMBP_SecBot_C_SetRelativeAimAngleOffset) == 0x000004, "Wrong alignment on ANIMBP_SecBot_C_SetRelativeAimAngleOffset");
static_assert(sizeof(ANIMBP_SecBot_C_SetRelativeAimAngleOffset) == 0x000010, "Wrong size on ANIMBP_SecBot_C_SetRelativeAimAngleOffset");
static_assert(offsetof(ANIMBP_SecBot_C_SetRelativeAimAngleOffset, YawOffset) == 0x000000, "Member 'ANIMBP_SecBot_C_SetRelativeAimAngleOffset::YawOffset' has a wrong offset!");
static_assert(offsetof(ANIMBP_SecBot_C_SetRelativeAimAngleOffset, PitchOffset) == 0x000004, "Member 'ANIMBP_SecBot_C_SetRelativeAimAngleOffset::PitchOffset' has a wrong offset!");
static_assert(offsetof(ANIMBP_SecBot_C_SetRelativeAimAngleOffset, Alpha) == 0x000008, "Member 'ANIMBP_SecBot_C_SetRelativeAimAngleOffset::Alpha' has a wrong offset!");
static_assert(offsetof(ANIMBP_SecBot_C_SetRelativeAimAngleOffset, Result) == 0x00000C, "Member 'ANIMBP_SecBot_C_SetRelativeAimAngleOffset::Result' has a wrong offset!");

// Function ANIMBP_SecBot.ANIMBP_SecBot_C.GetRotation
// 0x0010 (0x0010 - 0x0000)
struct ANIMBP_SecBot_C_GetRotation final
{
public:
	struct FRotator                               AnimRotationPerSecond;                             // 0x0000(0x000C)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                         AnimRotationAlpha;                                 // 0x000C(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(ANIMBP_SecBot_C_GetRotation) == 0x000004, "Wrong alignment on ANIMBP_SecBot_C_GetRotation");
static_assert(sizeof(ANIMBP_SecBot_C_GetRotation) == 0x000010, "Wrong size on ANIMBP_SecBot_C_GetRotation");
static_assert(offsetof(ANIMBP_SecBot_C_GetRotation, AnimRotationPerSecond) == 0x000000, "Member 'ANIMBP_SecBot_C_GetRotation::AnimRotationPerSecond' has a wrong offset!");
static_assert(offsetof(ANIMBP_SecBot_C_GetRotation, AnimRotationAlpha) == 0x00000C, "Member 'ANIMBP_SecBot_C_GetRotation::AnimRotationAlpha' has a wrong offset!");

// Function ANIMBP_SecBot.ANIMBP_SecBot_C.GetStance
// 0x0001 (0x0001 - 0x0000)
struct ANIMBP_SecBot_C_GetStance final
{
public:
	ENUM_Emotions                                 Stance;                                            // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(ANIMBP_SecBot_C_GetStance) == 0x000001, "Wrong alignment on ANIMBP_SecBot_C_GetStance");
static_assert(sizeof(ANIMBP_SecBot_C_GetStance) == 0x000001, "Wrong size on ANIMBP_SecBot_C_GetStance");
static_assert(offsetof(ANIMBP_SecBot_C_GetStance, Stance) == 0x000000, "Member 'ANIMBP_SecBot_C_GetStance::Stance' has a wrong offset!");

// Function ANIMBP_SecBot.ANIMBP_SecBot_C.SetStance
// 0x0002 (0x0002 - 0x0000)
struct ANIMBP_SecBot_C_SetStance final
{
public:
	ENUM_Emotions                                 Stance;                                            // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Result;                                            // 0x0001(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(ANIMBP_SecBot_C_SetStance) == 0x000001, "Wrong alignment on ANIMBP_SecBot_C_SetStance");
static_assert(sizeof(ANIMBP_SecBot_C_SetStance) == 0x000002, "Wrong size on ANIMBP_SecBot_C_SetStance");
static_assert(offsetof(ANIMBP_SecBot_C_SetStance, Stance) == 0x000000, "Member 'ANIMBP_SecBot_C_SetStance::Stance' has a wrong offset!");
static_assert(offsetof(ANIMBP_SecBot_C_SetStance, Result) == 0x000001, "Member 'ANIMBP_SecBot_C_SetStance::Result' has a wrong offset!");

// Function ANIMBP_SecBot.ANIMBP_SecBot_C.SetCatatonic
// 0x0002 (0x0002 - 0x0000)
struct ANIMBP_SecBot_C_SetCatatonic final
{
public:
	bool                                          State;                                             // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Result;                                            // 0x0001(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(ANIMBP_SecBot_C_SetCatatonic) == 0x000001, "Wrong alignment on ANIMBP_SecBot_C_SetCatatonic");
static_assert(sizeof(ANIMBP_SecBot_C_SetCatatonic) == 0x000002, "Wrong size on ANIMBP_SecBot_C_SetCatatonic");
static_assert(offsetof(ANIMBP_SecBot_C_SetCatatonic, State) == 0x000000, "Member 'ANIMBP_SecBot_C_SetCatatonic::State' has a wrong offset!");
static_assert(offsetof(ANIMBP_SecBot_C_SetCatatonic, Result) == 0x000001, "Member 'ANIMBP_SecBot_C_SetCatatonic::Result' has a wrong offset!");

// Function ANIMBP_SecBot.ANIMBP_SecBot_C.SetStandingTurn
// 0x0008 (0x0008 - 0x0000)
struct ANIMBP_SecBot_C_SetStandingTurn final
{
public:
	float                                         SignedAngleToTarget;                               // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          IsStanding;                                        // 0x0004(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Result;                                            // 0x0005(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(ANIMBP_SecBot_C_SetStandingTurn) == 0x000004, "Wrong alignment on ANIMBP_SecBot_C_SetStandingTurn");
static_assert(sizeof(ANIMBP_SecBot_C_SetStandingTurn) == 0x000008, "Wrong size on ANIMBP_SecBot_C_SetStandingTurn");
static_assert(offsetof(ANIMBP_SecBot_C_SetStandingTurn, SignedAngleToTarget) == 0x000000, "Member 'ANIMBP_SecBot_C_SetStandingTurn::SignedAngleToTarget' has a wrong offset!");
static_assert(offsetof(ANIMBP_SecBot_C_SetStandingTurn, IsStanding) == 0x000004, "Member 'ANIMBP_SecBot_C_SetStandingTurn::IsStanding' has a wrong offset!");
static_assert(offsetof(ANIMBP_SecBot_C_SetStandingTurn, Result) == 0x000005, "Member 'ANIMBP_SecBot_C_SetStandingTurn::Result' has a wrong offset!");

// Function ANIMBP_SecBot.ANIMBP_SecBot_C.ReceiveDeathBlow
// 0x0002 (0x0002 - 0x0000)
struct ANIMBP_SecBot_C_ReceiveDeathBlow final
{
public:
	ENUM_DeathBlowType                            BodyPart;                                          // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Result;                                            // 0x0001(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(ANIMBP_SecBot_C_ReceiveDeathBlow) == 0x000001, "Wrong alignment on ANIMBP_SecBot_C_ReceiveDeathBlow");
static_assert(sizeof(ANIMBP_SecBot_C_ReceiveDeathBlow) == 0x000002, "Wrong size on ANIMBP_SecBot_C_ReceiveDeathBlow");
static_assert(offsetof(ANIMBP_SecBot_C_ReceiveDeathBlow, BodyPart) == 0x000000, "Member 'ANIMBP_SecBot_C_ReceiveDeathBlow::BodyPart' has a wrong offset!");
static_assert(offsetof(ANIMBP_SecBot_C_ReceiveDeathBlow, Result) == 0x000001, "Member 'ANIMBP_SecBot_C_ReceiveDeathBlow::Result' has a wrong offset!");

// Function ANIMBP_SecBot.ANIMBP_SecBot_C.ReceiveImpact
// 0x0050 (0x0050 - 0x0000)
struct ANIMBP_SecBot_C_ReceiveImpact final
{
public:
	struct FVector                                Impulse;                                           // 0x0000(0x000C)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                ImpactLocation;                                    // 0x000C(0x000C)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                ImpactNormal;                                      // 0x0018(0x000C)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FName                                   BoneName;                                          // 0x0024(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_2C[0x4];                                       // 0x002C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 DamageType;                                        // 0x0030(0x0010)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, HasGetValueTypeHash)
	float                                         DamageAmount;                                      // 0x0040(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         FlinchTime;                                        // 0x0044(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Result;                                            // 0x0048(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(ANIMBP_SecBot_C_ReceiveImpact) == 0x000008, "Wrong alignment on ANIMBP_SecBot_C_ReceiveImpact");
static_assert(sizeof(ANIMBP_SecBot_C_ReceiveImpact) == 0x000050, "Wrong size on ANIMBP_SecBot_C_ReceiveImpact");
static_assert(offsetof(ANIMBP_SecBot_C_ReceiveImpact, Impulse) == 0x000000, "Member 'ANIMBP_SecBot_C_ReceiveImpact::Impulse' has a wrong offset!");
static_assert(offsetof(ANIMBP_SecBot_C_ReceiveImpact, ImpactLocation) == 0x00000C, "Member 'ANIMBP_SecBot_C_ReceiveImpact::ImpactLocation' has a wrong offset!");
static_assert(offsetof(ANIMBP_SecBot_C_ReceiveImpact, ImpactNormal) == 0x000018, "Member 'ANIMBP_SecBot_C_ReceiveImpact::ImpactNormal' has a wrong offset!");
static_assert(offsetof(ANIMBP_SecBot_C_ReceiveImpact, BoneName) == 0x000024, "Member 'ANIMBP_SecBot_C_ReceiveImpact::BoneName' has a wrong offset!");
static_assert(offsetof(ANIMBP_SecBot_C_ReceiveImpact, DamageType) == 0x000030, "Member 'ANIMBP_SecBot_C_ReceiveImpact::DamageType' has a wrong offset!");
static_assert(offsetof(ANIMBP_SecBot_C_ReceiveImpact, DamageAmount) == 0x000040, "Member 'ANIMBP_SecBot_C_ReceiveImpact::DamageAmount' has a wrong offset!");
static_assert(offsetof(ANIMBP_SecBot_C_ReceiveImpact, FlinchTime) == 0x000044, "Member 'ANIMBP_SecBot_C_ReceiveImpact::FlinchTime' has a wrong offset!");
static_assert(offsetof(ANIMBP_SecBot_C_ReceiveImpact, Result) == 0x000048, "Member 'ANIMBP_SecBot_C_ReceiveImpact::Result' has a wrong offset!");

// Function ANIMBP_SecBot.ANIMBP_SecBot_C.SetIsAlive
// 0x0002 (0x0002 - 0x0000)
struct ANIMBP_SecBot_C_SetIsAlive final
{
public:
	bool                                          IsAlive_0;                                         // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Result;                                            // 0x0001(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(ANIMBP_SecBot_C_SetIsAlive) == 0x000001, "Wrong alignment on ANIMBP_SecBot_C_SetIsAlive");
static_assert(sizeof(ANIMBP_SecBot_C_SetIsAlive) == 0x000002, "Wrong size on ANIMBP_SecBot_C_SetIsAlive");
static_assert(offsetof(ANIMBP_SecBot_C_SetIsAlive, IsAlive_0) == 0x000000, "Member 'ANIMBP_SecBot_C_SetIsAlive::IsAlive_0' has a wrong offset!");
static_assert(offsetof(ANIMBP_SecBot_C_SetIsAlive, Result) == 0x000001, "Member 'ANIMBP_SecBot_C_SetIsAlive::Result' has a wrong offset!");

// Function ANIMBP_SecBot.ANIMBP_SecBot_C.SetMovementParameters
// 0x0090 (0x0090 - 0x0000)
struct ANIMBP_SecBot_C_SetMovementParameters final
{
public:
	struct FVector                                Velocity;                                          // 0x0000(0x000C)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               Rotation;                                          // 0x000C(0x000C)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FRotator                               DesiredRotation;                                   // 0x0018(0x000C)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Result;                                            // 0x0024(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_25[0x3];                                       // 0x0025(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         RightSpeed;                                        // 0x0028(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         ForwardSpeed;                                      // 0x002C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         MaxSpeed;                                          // 0x0030(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_34[0x4];                                       // 0x0034(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class APAWN_Enemy_C*                          EnemyPawn;                                         // 0x0038(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Greater_FloatFloat_ReturnValue;           // 0x0040(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_41[0x7];                                       // 0x0041(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class AActor*                                 CallFunc_GetOwningActor_ReturnValue;               // 0x0048(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class APAWN_Enemy_C*                          K2Node_DynamicCast_AsPAWN_Enemy;                   // 0x0050(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0058(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_59[0x3];                                       // 0x0059(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_Divide_FloatFloat_ReturnValue;            // 0x005C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Divide_FloatFloat_ReturnValue_1;          // 0x0060(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_FClamp_ReturnValue;                       // 0x0064(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_FClamp_ReturnValue_1;                     // 0x0068(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_GetActorRightVector_ReturnValue;          // 0x006C(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_GetActorForwardVector_ReturnValue;        // 0x0078(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Dot_VectorVector_ReturnValue;             // 0x0084(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Dot_VectorVector_ReturnValue_1;           // 0x0088(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(ANIMBP_SecBot_C_SetMovementParameters) == 0x000008, "Wrong alignment on ANIMBP_SecBot_C_SetMovementParameters");
static_assert(sizeof(ANIMBP_SecBot_C_SetMovementParameters) == 0x000090, "Wrong size on ANIMBP_SecBot_C_SetMovementParameters");
static_assert(offsetof(ANIMBP_SecBot_C_SetMovementParameters, Velocity) == 0x000000, "Member 'ANIMBP_SecBot_C_SetMovementParameters::Velocity' has a wrong offset!");
static_assert(offsetof(ANIMBP_SecBot_C_SetMovementParameters, Rotation) == 0x00000C, "Member 'ANIMBP_SecBot_C_SetMovementParameters::Rotation' has a wrong offset!");
static_assert(offsetof(ANIMBP_SecBot_C_SetMovementParameters, DesiredRotation) == 0x000018, "Member 'ANIMBP_SecBot_C_SetMovementParameters::DesiredRotation' has a wrong offset!");
static_assert(offsetof(ANIMBP_SecBot_C_SetMovementParameters, Result) == 0x000024, "Member 'ANIMBP_SecBot_C_SetMovementParameters::Result' has a wrong offset!");
static_assert(offsetof(ANIMBP_SecBot_C_SetMovementParameters, RightSpeed) == 0x000028, "Member 'ANIMBP_SecBot_C_SetMovementParameters::RightSpeed' has a wrong offset!");
static_assert(offsetof(ANIMBP_SecBot_C_SetMovementParameters, ForwardSpeed) == 0x00002C, "Member 'ANIMBP_SecBot_C_SetMovementParameters::ForwardSpeed' has a wrong offset!");
static_assert(offsetof(ANIMBP_SecBot_C_SetMovementParameters, MaxSpeed) == 0x000030, "Member 'ANIMBP_SecBot_C_SetMovementParameters::MaxSpeed' has a wrong offset!");
static_assert(offsetof(ANIMBP_SecBot_C_SetMovementParameters, EnemyPawn) == 0x000038, "Member 'ANIMBP_SecBot_C_SetMovementParameters::EnemyPawn' has a wrong offset!");
static_assert(offsetof(ANIMBP_SecBot_C_SetMovementParameters, CallFunc_Greater_FloatFloat_ReturnValue) == 0x000040, "Member 'ANIMBP_SecBot_C_SetMovementParameters::CallFunc_Greater_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(ANIMBP_SecBot_C_SetMovementParameters, CallFunc_GetOwningActor_ReturnValue) == 0x000048, "Member 'ANIMBP_SecBot_C_SetMovementParameters::CallFunc_GetOwningActor_ReturnValue' has a wrong offset!");
static_assert(offsetof(ANIMBP_SecBot_C_SetMovementParameters, K2Node_DynamicCast_AsPAWN_Enemy) == 0x000050, "Member 'ANIMBP_SecBot_C_SetMovementParameters::K2Node_DynamicCast_AsPAWN_Enemy' has a wrong offset!");
static_assert(offsetof(ANIMBP_SecBot_C_SetMovementParameters, K2Node_DynamicCast_bSuccess) == 0x000058, "Member 'ANIMBP_SecBot_C_SetMovementParameters::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(ANIMBP_SecBot_C_SetMovementParameters, CallFunc_Divide_FloatFloat_ReturnValue) == 0x00005C, "Member 'ANIMBP_SecBot_C_SetMovementParameters::CallFunc_Divide_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(ANIMBP_SecBot_C_SetMovementParameters, CallFunc_Divide_FloatFloat_ReturnValue_1) == 0x000060, "Member 'ANIMBP_SecBot_C_SetMovementParameters::CallFunc_Divide_FloatFloat_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(ANIMBP_SecBot_C_SetMovementParameters, CallFunc_FClamp_ReturnValue) == 0x000064, "Member 'ANIMBP_SecBot_C_SetMovementParameters::CallFunc_FClamp_ReturnValue' has a wrong offset!");
static_assert(offsetof(ANIMBP_SecBot_C_SetMovementParameters, CallFunc_FClamp_ReturnValue_1) == 0x000068, "Member 'ANIMBP_SecBot_C_SetMovementParameters::CallFunc_FClamp_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(ANIMBP_SecBot_C_SetMovementParameters, CallFunc_GetActorRightVector_ReturnValue) == 0x00006C, "Member 'ANIMBP_SecBot_C_SetMovementParameters::CallFunc_GetActorRightVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(ANIMBP_SecBot_C_SetMovementParameters, CallFunc_GetActorForwardVector_ReturnValue) == 0x000078, "Member 'ANIMBP_SecBot_C_SetMovementParameters::CallFunc_GetActorForwardVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(ANIMBP_SecBot_C_SetMovementParameters, CallFunc_Dot_VectorVector_ReturnValue) == 0x000084, "Member 'ANIMBP_SecBot_C_SetMovementParameters::CallFunc_Dot_VectorVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(ANIMBP_SecBot_C_SetMovementParameters, CallFunc_Dot_VectorVector_ReturnValue_1) == 0x000088, "Member 'ANIMBP_SecBot_C_SetMovementParameters::CallFunc_Dot_VectorVector_ReturnValue_1' has a wrong offset!");

// Function ANIMBP_SecBot.ANIMBP_SecBot_C.SetLookAtAlpha
// 0x0008 (0x0008 - 0x0000)
struct ANIMBP_SecBot_C_SetLookAtAlpha final
{
public:
	float                                         Alpha;                                             // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Result;                                            // 0x0004(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(ANIMBP_SecBot_C_SetLookAtAlpha) == 0x000004, "Wrong alignment on ANIMBP_SecBot_C_SetLookAtAlpha");
static_assert(sizeof(ANIMBP_SecBot_C_SetLookAtAlpha) == 0x000008, "Wrong size on ANIMBP_SecBot_C_SetLookAtAlpha");
static_assert(offsetof(ANIMBP_SecBot_C_SetLookAtAlpha, Alpha) == 0x000000, "Member 'ANIMBP_SecBot_C_SetLookAtAlpha::Alpha' has a wrong offset!");
static_assert(offsetof(ANIMBP_SecBot_C_SetLookAtAlpha, Result) == 0x000004, "Member 'ANIMBP_SecBot_C_SetLookAtAlpha::Result' has a wrong offset!");

// Function ANIMBP_SecBot.ANIMBP_SecBot_C.SetLookAtLocation
// 0x0010 (0x0010 - 0x0000)
struct ANIMBP_SecBot_C_SetLookAtLocation final
{
public:
	struct FVector                                Location;                                          // 0x0000(0x000C)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Result;                                            // 0x000C(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(ANIMBP_SecBot_C_SetLookAtLocation) == 0x000004, "Wrong alignment on ANIMBP_SecBot_C_SetLookAtLocation");
static_assert(sizeof(ANIMBP_SecBot_C_SetLookAtLocation) == 0x000010, "Wrong size on ANIMBP_SecBot_C_SetLookAtLocation");
static_assert(offsetof(ANIMBP_SecBot_C_SetLookAtLocation, Location) == 0x000000, "Member 'ANIMBP_SecBot_C_SetLookAtLocation::Location' has a wrong offset!");
static_assert(offsetof(ANIMBP_SecBot_C_SetLookAtLocation, Result) == 0x00000C, "Member 'ANIMBP_SecBot_C_SetLookAtLocation::Result' has a wrong offset!");

}

