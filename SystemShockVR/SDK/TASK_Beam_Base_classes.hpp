#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: TASK_Beam_Base

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "AIModule_classes.hpp"
#include "ENUM_MobileLaser_BeamState_structs.hpp"
#include "ENUM_TargetType_structs.hpp"


namespace SDK
{

// BlueprintGeneratedClass TASK_Beam_Base.TASK_Beam_Base_C
// 0x0168 (0x0210 - 0x00A8)
class UTASK_Beam_Base_C : public UBTTask_BlueprintBase
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x00A8(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	TSoftObjectPtr<class UNiagaraSystem>          BeamEffect;                                        // 0x00B0(0x0028)(Edit, BlueprintVisible, DisableEditOnInstance, HasGetValueTypeHash)
	class APAWN_Enemy_C*                          EnemyPawn;                                         // 0x00D8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash)
	class UOBJ_EnemyTarget_C*                     BeamAimTarget;                                     // 0x00E0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash)
	TMap<class UAttribManagerComponent*, float>   HitAttribComponents;                               // 0x00E8(0x0050)(Edit, BlueprintVisible, DisableEditOnInstance, ContainsInstancedReference)
	class UOBJ_EnemyTarget_C*                     SkillTarget;                                       // 0x0138(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash)
	float                                         BeamRestrikeDuration;                              // 0x0140(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          IsBeamDamageActive;                                // 0x0144(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	ENUM_MobileLaser_BeamState                    BeamState;                                         // 0x0145(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_146[0x2];                                      // 0x0146(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	class UCurveFloat*                            TurningOnFlairCurve;                               // 0x0148(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UCurveFloat*                            TurningOffFlairCurve;                              // 0x0150(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UCurveFloat*                            TurningOnBeamCurve;                                // 0x0158(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         EnterStateTimestamp;                               // 0x0160(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_164[0x4];                                      // 0x0164(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UCurveFloat*                            TurningOffBeamCurve;                               // 0x0168(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         TurningOnDuration;                                 // 0x0170(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         TurningOffDuration;                                // 0x0174(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          IsWaitingToAbort;                                  // 0x0178(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_179[0x7];                                      // 0x0179(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TSoftObjectPtr<class USoundCue>               BeamStartSound;                                    // 0x0180(0x0028)(Edit, BlueprintVisible, DisableEditOnInstance, HasGetValueTypeHash)
	TSoftObjectPtr<class USoundCue>               BeamStopSound;                                     // 0x01A8(0x0028)(Edit, BlueprintVisible, DisableEditOnInstance, HasGetValueTypeHash)
	class FName                                   LaserPowerParamName;                               // 0x01D0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FName                                   BeamSoundSocket;                                   // 0x01D8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UVoxelAudioComponent*                   BeamAudioComponent;                                // 0x01E0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TArray<class FName>                           BeamEffectSockets;                                 // 0x01E8(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance)
	TArray<class UNiagaraComponent*>              BeamEffectComponents;                              // 0x01F8(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance, ContainsInstancedReference)
	bool                                          AutoActivateBeamEffects;                           // 0x0208(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          AutoDestroyBeamEffects;                            // 0x0209(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          CopyAndFreezeTargetLocation;                       // 0x020A(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)

public:
	void ExecuteUbergraph_TASK_Beam_Base(int32 EntryPoint);
	void StopBeamAudio();
	void StartBeamAudio();
	void StartBeamEmitters();
	void ReceiveAbortAI(class AAIController* OwnerController, class APawn* ControlledPawn);
	void ReceiveTickAI(class AAIController* OwnerController, class APawn* ControlledPawn, float DeltaSeconds);
	void ReceiveExecuteAI(class AAIController* OwnerController, class APawn* ControlledPawn);
	void OnLoaded_286EF9BC405A135F062C60B5296EA148(class UObject* Loaded);
	void OnLoaded_41978D6946D489D9553419BA70B7D4FB(class UObject* Loaded);
	void OnLoaded_B41A86A2415A41EBF1B52DA7FBFC0F8C(class UObject* Loaded);
	void GetDamageValue(bool IsSecondary, int32* DamageValue);
	void BeamDamageTraceFromSockets(bool IsSecondary, TArray<struct FHitResult>* HitResults);
	void BeamDamageTraceSingle(bool IsSecondary, class FName BeamSocket, struct FHitResult* Result);
	void BeamLineTrace(class FName BeamSocket, struct FHitResult* OutHit, struct FVector* Direction);
	void StopBeam();
	void CreateAndSetAimTarget(ENUM_TargetType Type);
	void GetBarrelWorldLocation(struct FVector* BarrelLocation);
	void GetLocalForwardDirection(struct FVector* ForwardDirection);
	void GetLocalRightDirection(struct FVector* RightDirection);
	void GetLocalUpDirection(struct FVector* UpDirection);
	void DrawDirectionFromBarrel(const struct FVector& Direction, const struct FLinearColor& LineColor, float Duration, bool LocalSpace);
	void LocalDirectionToWorldDirection(const struct FVector& LocalDirection, struct FVector* WorldDirection);
	void WorldDirectionToLocalDirection(const struct FVector& WorldDirection, struct FVector* LocalDirection);
	void ClampDirection(const struct FVector& LocalDirection, struct FVector* ClampedLocalDirection);
	void GetCurrentLocalAimDirection(struct FVector* LocalDirection);
	void SetBeamPower(float NormalizedValue);
	void SetFlairScale(float NormalizedValue);
	void SetBeamDamageActive(bool IsDamageActive);
	void UpdateBeamTurningOn(float DeltaSeconds, float* Progress);
	void UpdateBeamOn(float DeltaSeconds);
	void UpdateBeamTurningOff(float DeltaSeconds, float* Progress);
	void SetBeamState(ENUM_MobileLaser_BeamState State);
	void OnBeamSpawned(class UNiagaraComponent* NiagaraComponent);
	void GetBeamAimDirection(class FName BeamSocket, struct FVector* BeamAimDirection);

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"TASK_Beam_Base_C">();
	}
	static class UTASK_Beam_Base_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<UTASK_Beam_Base_C>();
	}
};
static_assert(alignof(UTASK_Beam_Base_C) == 0x000008, "Wrong alignment on UTASK_Beam_Base_C");
static_assert(sizeof(UTASK_Beam_Base_C) == 0x000210, "Wrong size on UTASK_Beam_Base_C");
static_assert(offsetof(UTASK_Beam_Base_C, UberGraphFrame) == 0x0000A8, "Member 'UTASK_Beam_Base_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(UTASK_Beam_Base_C, BeamEffect) == 0x0000B0, "Member 'UTASK_Beam_Base_C::BeamEffect' has a wrong offset!");
static_assert(offsetof(UTASK_Beam_Base_C, EnemyPawn) == 0x0000D8, "Member 'UTASK_Beam_Base_C::EnemyPawn' has a wrong offset!");
static_assert(offsetof(UTASK_Beam_Base_C, BeamAimTarget) == 0x0000E0, "Member 'UTASK_Beam_Base_C::BeamAimTarget' has a wrong offset!");
static_assert(offsetof(UTASK_Beam_Base_C, HitAttribComponents) == 0x0000E8, "Member 'UTASK_Beam_Base_C::HitAttribComponents' has a wrong offset!");
static_assert(offsetof(UTASK_Beam_Base_C, SkillTarget) == 0x000138, "Member 'UTASK_Beam_Base_C::SkillTarget' has a wrong offset!");
static_assert(offsetof(UTASK_Beam_Base_C, BeamRestrikeDuration) == 0x000140, "Member 'UTASK_Beam_Base_C::BeamRestrikeDuration' has a wrong offset!");
static_assert(offsetof(UTASK_Beam_Base_C, IsBeamDamageActive) == 0x000144, "Member 'UTASK_Beam_Base_C::IsBeamDamageActive' has a wrong offset!");
static_assert(offsetof(UTASK_Beam_Base_C, BeamState) == 0x000145, "Member 'UTASK_Beam_Base_C::BeamState' has a wrong offset!");
static_assert(offsetof(UTASK_Beam_Base_C, TurningOnFlairCurve) == 0x000148, "Member 'UTASK_Beam_Base_C::TurningOnFlairCurve' has a wrong offset!");
static_assert(offsetof(UTASK_Beam_Base_C, TurningOffFlairCurve) == 0x000150, "Member 'UTASK_Beam_Base_C::TurningOffFlairCurve' has a wrong offset!");
static_assert(offsetof(UTASK_Beam_Base_C, TurningOnBeamCurve) == 0x000158, "Member 'UTASK_Beam_Base_C::TurningOnBeamCurve' has a wrong offset!");
static_assert(offsetof(UTASK_Beam_Base_C, EnterStateTimestamp) == 0x000160, "Member 'UTASK_Beam_Base_C::EnterStateTimestamp' has a wrong offset!");
static_assert(offsetof(UTASK_Beam_Base_C, TurningOffBeamCurve) == 0x000168, "Member 'UTASK_Beam_Base_C::TurningOffBeamCurve' has a wrong offset!");
static_assert(offsetof(UTASK_Beam_Base_C, TurningOnDuration) == 0x000170, "Member 'UTASK_Beam_Base_C::TurningOnDuration' has a wrong offset!");
static_assert(offsetof(UTASK_Beam_Base_C, TurningOffDuration) == 0x000174, "Member 'UTASK_Beam_Base_C::TurningOffDuration' has a wrong offset!");
static_assert(offsetof(UTASK_Beam_Base_C, IsWaitingToAbort) == 0x000178, "Member 'UTASK_Beam_Base_C::IsWaitingToAbort' has a wrong offset!");
static_assert(offsetof(UTASK_Beam_Base_C, BeamStartSound) == 0x000180, "Member 'UTASK_Beam_Base_C::BeamStartSound' has a wrong offset!");
static_assert(offsetof(UTASK_Beam_Base_C, BeamStopSound) == 0x0001A8, "Member 'UTASK_Beam_Base_C::BeamStopSound' has a wrong offset!");
static_assert(offsetof(UTASK_Beam_Base_C, LaserPowerParamName) == 0x0001D0, "Member 'UTASK_Beam_Base_C::LaserPowerParamName' has a wrong offset!");
static_assert(offsetof(UTASK_Beam_Base_C, BeamSoundSocket) == 0x0001D8, "Member 'UTASK_Beam_Base_C::BeamSoundSocket' has a wrong offset!");
static_assert(offsetof(UTASK_Beam_Base_C, BeamAudioComponent) == 0x0001E0, "Member 'UTASK_Beam_Base_C::BeamAudioComponent' has a wrong offset!");
static_assert(offsetof(UTASK_Beam_Base_C, BeamEffectSockets) == 0x0001E8, "Member 'UTASK_Beam_Base_C::BeamEffectSockets' has a wrong offset!");
static_assert(offsetof(UTASK_Beam_Base_C, BeamEffectComponents) == 0x0001F8, "Member 'UTASK_Beam_Base_C::BeamEffectComponents' has a wrong offset!");
static_assert(offsetof(UTASK_Beam_Base_C, AutoActivateBeamEffects) == 0x000208, "Member 'UTASK_Beam_Base_C::AutoActivateBeamEffects' has a wrong offset!");
static_assert(offsetof(UTASK_Beam_Base_C, AutoDestroyBeamEffects) == 0x000209, "Member 'UTASK_Beam_Base_C::AutoDestroyBeamEffects' has a wrong offset!");
static_assert(offsetof(UTASK_Beam_Base_C, CopyAndFreezeTargetLocation) == 0x00020A, "Member 'UTASK_Beam_Base_C::CopyAndFreezeTargetLocation' has a wrong offset!");

}

