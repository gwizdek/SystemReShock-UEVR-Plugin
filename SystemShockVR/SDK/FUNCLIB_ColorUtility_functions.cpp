#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: FUNCLIB_ColorUtility

#include "Basic.hpp"

#include "FUNCLIB_ColorUtility_classes.hpp"
#include "FUNCLIB_ColorUtility_parameters.hpp"


namespace SDK
{

// Function FUNCLIB_ColorUtility.FUNCLIB_ColorUtility_C.GetColorValue
// (Static, Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// int32                                   Color                                                  (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class UObject*                          __WorldContext                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FLinearColor                     ColorValue                                             (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UFUNCLIB_ColorUtility_C::GetColorValue(int32 Color, class UObject* __WorldContext, struct FLinearColor* ColorValue)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("FUNCLIB_ColorUtility_C", "GetColorValue");

	Params::FUNCLIB_ColorUtility_C_GetColorValue Parms{};

	Parms.Color = Color;
	Parms.__WorldContext = __WorldContext;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	if (ColorValue != nullptr)
		*ColorValue = std::move(Parms.ColorValue);
}


// Function FUNCLIB_ColorUtility.FUNCLIB_ColorUtility_C.IsPrimaryColor
// (Static, Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// int32                                   Color                                                  (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class UObject*                          __WorldContext                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    Result                                                 (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void UFUNCLIB_ColorUtility_C::IsPrimaryColor(int32 Color, class UObject* __WorldContext, bool* Result)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("FUNCLIB_ColorUtility_C", "IsPrimaryColor");

	Params::FUNCLIB_ColorUtility_C_IsPrimaryColor Parms{};

	Parms.Color = Color;
	Parms.__WorldContext = __WorldContext;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	if (Result != nullptr)
		*Result = Parms.Result;
}


// Function FUNCLIB_ColorUtility.FUNCLIB_ColorUtility_C.IsSecondaryColor
// (Static, Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// int32                                   Color                                                  (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class UObject*                          __WorldContext                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    Result                                                 (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void UFUNCLIB_ColorUtility_C::IsSecondaryColor(int32 Color, class UObject* __WorldContext, bool* Result)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("FUNCLIB_ColorUtility_C", "IsSecondaryColor");

	Params::FUNCLIB_ColorUtility_C_IsSecondaryColor Parms{};

	Parms.Color = Color;
	Parms.__WorldContext = __WorldContext;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	if (Result != nullptr)
		*Result = Parms.Result;
}


// Function FUNCLIB_ColorUtility.FUNCLIB_ColorUtility_C.GetComplementaryColor
// (Static, Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// int32                                   InputColor                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class UObject*                          __WorldContext                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// int32                                   OutputColors                                           (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UFUNCLIB_ColorUtility_C::GetComplementaryColor(int32 InputColor, class UObject* __WorldContext, int32* OutputColors)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("FUNCLIB_ColorUtility_C", "GetComplementaryColor");

	Params::FUNCLIB_ColorUtility_C_GetComplementaryColor Parms{};

	Parms.InputColor = InputColor;
	Parms.__WorldContext = __WorldContext;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	if (OutputColors != nullptr)
		*OutputColors = Parms.OutputColors;
}


// Function FUNCLIB_ColorUtility.FUNCLIB_ColorUtility_C.GetAnalogousColors
// (Static, Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// int32                                   InputColor                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class UObject*                          __WorldContext                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// TArray<int32>                           AnalogousColors                                        (Parm, OutParm)

void UFUNCLIB_ColorUtility_C::GetAnalogousColors(int32 InputColor, class UObject* __WorldContext, TArray<int32>* AnalogousColors)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("FUNCLIB_ColorUtility_C", "GetAnalogousColors");

	Params::FUNCLIB_ColorUtility_C_GetAnalogousColors Parms{};

	Parms.InputColor = InputColor;
	Parms.__WorldContext = __WorldContext;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	if (AnalogousColors != nullptr)
		*AnalogousColors = std::move(Parms.AnalogousColors);
}


// Function FUNCLIB_ColorUtility.FUNCLIB_ColorUtility_C.GetTriadicColors
// (Static, Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// int32                                   InputColor                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class UObject*                          __WorldContext                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// TArray<int32>                           TriadicColors                                          (Parm, OutParm)

void UFUNCLIB_ColorUtility_C::GetTriadicColors(int32 InputColor, class UObject* __WorldContext, TArray<int32>* TriadicColors)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("FUNCLIB_ColorUtility_C", "GetTriadicColors");

	Params::FUNCLIB_ColorUtility_C_GetTriadicColors Parms{};

	Parms.InputColor = InputColor;
	Parms.__WorldContext = __WorldContext;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	if (TriadicColors != nullptr)
		*TriadicColors = std::move(Parms.TriadicColors);
}


// Function FUNCLIB_ColorUtility.FUNCLIB_ColorUtility_C.GetCombinedPrimaries
// (Static, Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// TArray<int32>                           PrimaryColors                                          (BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
// class UObject*                          __WorldContext                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// int32                                   Secondary                                              (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UFUNCLIB_ColorUtility_C::GetCombinedPrimaries(TArray<int32>& PrimaryColors, class UObject* __WorldContext, int32* Secondary)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("FUNCLIB_ColorUtility_C", "GetCombinedPrimaries");

	Params::FUNCLIB_ColorUtility_C_GetCombinedPrimaries Parms{};

	Parms.PrimaryColors = std::move(PrimaryColors);
	Parms.__WorldContext = __WorldContext;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	PrimaryColors = std::move(Parms.PrimaryColors);

	if (Secondary != nullptr)
		*Secondary = Parms.Secondary;
}


// Function FUNCLIB_ColorUtility.FUNCLIB_ColorUtility_C.GetCombinedSecondary
// (Static, Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// TArray<int32>                           Secondaries                                            (BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
// class UObject*                          __WorldContext                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// int32                                   Primary                                                (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UFUNCLIB_ColorUtility_C::GetCombinedSecondary(TArray<int32>& Secondaries, class UObject* __WorldContext, int32* Primary)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("FUNCLIB_ColorUtility_C", "GetCombinedSecondary");

	Params::FUNCLIB_ColorUtility_C_GetCombinedSecondary Parms{};

	Parms.Secondaries = std::move(Secondaries);
	Parms.__WorldContext = __WorldContext;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Secondaries = std::move(Parms.Secondaries);

	if (Primary != nullptr)
		*Primary = Parms.Primary;
}


// Function FUNCLIB_ColorUtility.FUNCLIB_ColorUtility_C.GetMeshUIColor
// (Static, Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// ENUM_MeshColor                          TargetColor                                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class UObject*                          __WorldContext                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FColor                           Color                                                  (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UFUNCLIB_ColorUtility_C::GetMeshUIColor(ENUM_MeshColor TargetColor, class UObject* __WorldContext, struct FColor* Color)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("FUNCLIB_ColorUtility_C", "GetMeshUIColor");

	Params::FUNCLIB_ColorUtility_C_GetMeshUIColor Parms{};

	Parms.TargetColor = TargetColor;
	Parms.__WorldContext = __WorldContext;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	if (Color != nullptr)
		*Color = std::move(Parms.Color);
}


// Function FUNCLIB_ColorUtility.FUNCLIB_ColorUtility_C.GetButtonColor
// (Static, Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// ENUM_ButtonColorType                    ButtonColorType                                        (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class UObject*                          __WorldContext                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FLinearColor                     ButtonColor                                            (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UFUNCLIB_ColorUtility_C::GetButtonColor(ENUM_ButtonColorType ButtonColorType, class UObject* __WorldContext, struct FLinearColor* ButtonColor)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("FUNCLIB_ColorUtility_C", "GetButtonColor");

	Params::FUNCLIB_ColorUtility_C_GetButtonColor Parms{};

	Parms.ButtonColorType = ButtonColorType;
	Parms.__WorldContext = __WorldContext;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	if (ButtonColor != nullptr)
		*ButtonColor = std::move(Parms.ButtonColor);
}


// Function FUNCLIB_ColorUtility.FUNCLIB_ColorUtility_C.GetButtonColorWhilePulsing
// (Static, Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// float                                   Progress                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// ENUM_ButtonColorType                    ButtonColorType                                        (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class UObject*                          __WorldContext                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FLinearColor                     PulseValue                                             (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UFUNCLIB_ColorUtility_C::GetButtonColorWhilePulsing(float Progress, ENUM_ButtonColorType ButtonColorType, class UObject* __WorldContext, struct FLinearColor* PulseValue)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("FUNCLIB_ColorUtility_C", "GetButtonColorWhilePulsing");

	Params::FUNCLIB_ColorUtility_C_GetButtonColorWhilePulsing Parms{};

	Parms.Progress = Progress;
	Parms.ButtonColorType = ButtonColorType;
	Parms.__WorldContext = __WorldContext;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	if (PulseValue != nullptr)
		*PulseValue = std::move(Parms.PulseValue);
}

}

