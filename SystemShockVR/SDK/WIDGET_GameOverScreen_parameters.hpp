#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: WIDGET_GameOverScreen

#include "Basic.hpp"

#include "SlateCore_structs.hpp"
#include "ENUM_MenuNavigationInput_structs.hpp"


namespace SDK::Params
{

// Function WIDGET_GameOverScreen.WIDGET_GameOverScreen_C.ExecuteUbergraph_WIDGET_GameOverScreen
// 0x0108 (0x0108 - 0x0000)
struct WIDGET_GameOverScreen_C_ExecuteUbergraph_WIDGET_GameOverScreen final
{
public:
	int32                                         EntryPoint;                                        // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TDelegate<void()>                             K2Node_CreateDelegate_OutputDelegate;              // 0x0004(0x0010)(ZeroConstructor, NoDestructor)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UGameInstance*                          CallFunc_GetGameInstance_ReturnValue;              // 0x0018(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UGI_SinglePlayer_C*                     K2Node_DynamicCast_AsGI_Single_Player;             // 0x0020(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0028(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_29[0x7];                                       // 0x0029(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 K2Node_ComponentBoundEvent_Message;                // 0x0030(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	bool                                          K2Node_SwitchString_CmpSuccess;                    // 0x0040(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_41[0x7];                                       // 0x0041(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UGameInstance*                          CallFunc_GetGameInstance_ReturnValue_1;            // 0x0048(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UGI_SinglePlayer_C*                     K2Node_DynamicCast_AsGI_Single_Player_1;           // 0x0050(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess_1;                     // 0x0058(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_59[0x3];                                       // 0x0059(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FGeometry                              K2Node_Event_MyGeometry;                           // 0x005C(0x0038)(IsPlainOldData, NoDestructor)
	float                                         K2Node_Event_InDeltaTime;                          // 0x0094(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class APlayerController*                      CallFunc_GetPlayerController_ReturnValue;          // 0x0098(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TDelegate<void(bool IsUsingGamepad)>          K2Node_CreateDelegate_OutputDelegate_1;            // 0x00A0(0x0010)(ZeroConstructor, NoDestructor)
	class ACON_Hacker_C*                          K2Node_DynamicCast_AsCON_Hacker;                   // 0x00B0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess_2;                     // 0x00B8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_B9[0x7];                                       // 0x00B9(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class APawn*                                  CallFunc_GetPlayerPawn_ReturnValue;                // 0x00C0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class APAWN_PlayerGhost_C*                    K2Node_DynamicCast_AsPAWN_Player_Ghost;            // 0x00C8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess_3;                     // 0x00D0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_D1[0x3];                                       // 0x00D1(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	TDelegate<void()>                             K2Node_CreateDelegate_OutputDelegate_2;            // 0x00D4(0x0010)(ZeroConstructor, NoDestructor)
	TDelegate<void()>                             K2Node_CreateDelegate_OutputDelegate_3;            // 0x00E4(0x0010)(ZeroConstructor, NoDestructor)
	TDelegate<void()>                             K2Node_CreateDelegate_OutputDelegate_4;            // 0x00F4(0x0010)(ZeroConstructor, NoDestructor)
};
static_assert(alignof(WIDGET_GameOverScreen_C_ExecuteUbergraph_WIDGET_GameOverScreen) == 0x000008, "Wrong alignment on WIDGET_GameOverScreen_C_ExecuteUbergraph_WIDGET_GameOverScreen");
static_assert(sizeof(WIDGET_GameOverScreen_C_ExecuteUbergraph_WIDGET_GameOverScreen) == 0x000108, "Wrong size on WIDGET_GameOverScreen_C_ExecuteUbergraph_WIDGET_GameOverScreen");
static_assert(offsetof(WIDGET_GameOverScreen_C_ExecuteUbergraph_WIDGET_GameOverScreen, EntryPoint) == 0x000000, "Member 'WIDGET_GameOverScreen_C_ExecuteUbergraph_WIDGET_GameOverScreen::EntryPoint' has a wrong offset!");
static_assert(offsetof(WIDGET_GameOverScreen_C_ExecuteUbergraph_WIDGET_GameOverScreen, K2Node_CreateDelegate_OutputDelegate) == 0x000004, "Member 'WIDGET_GameOverScreen_C_ExecuteUbergraph_WIDGET_GameOverScreen::K2Node_CreateDelegate_OutputDelegate' has a wrong offset!");
static_assert(offsetof(WIDGET_GameOverScreen_C_ExecuteUbergraph_WIDGET_GameOverScreen, CallFunc_GetGameInstance_ReturnValue) == 0x000018, "Member 'WIDGET_GameOverScreen_C_ExecuteUbergraph_WIDGET_GameOverScreen::CallFunc_GetGameInstance_ReturnValue' has a wrong offset!");
static_assert(offsetof(WIDGET_GameOverScreen_C_ExecuteUbergraph_WIDGET_GameOverScreen, K2Node_DynamicCast_AsGI_Single_Player) == 0x000020, "Member 'WIDGET_GameOverScreen_C_ExecuteUbergraph_WIDGET_GameOverScreen::K2Node_DynamicCast_AsGI_Single_Player' has a wrong offset!");
static_assert(offsetof(WIDGET_GameOverScreen_C_ExecuteUbergraph_WIDGET_GameOverScreen, K2Node_DynamicCast_bSuccess) == 0x000028, "Member 'WIDGET_GameOverScreen_C_ExecuteUbergraph_WIDGET_GameOverScreen::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(WIDGET_GameOverScreen_C_ExecuteUbergraph_WIDGET_GameOverScreen, K2Node_ComponentBoundEvent_Message) == 0x000030, "Member 'WIDGET_GameOverScreen_C_ExecuteUbergraph_WIDGET_GameOverScreen::K2Node_ComponentBoundEvent_Message' has a wrong offset!");
static_assert(offsetof(WIDGET_GameOverScreen_C_ExecuteUbergraph_WIDGET_GameOverScreen, K2Node_SwitchString_CmpSuccess) == 0x000040, "Member 'WIDGET_GameOverScreen_C_ExecuteUbergraph_WIDGET_GameOverScreen::K2Node_SwitchString_CmpSuccess' has a wrong offset!");
static_assert(offsetof(WIDGET_GameOverScreen_C_ExecuteUbergraph_WIDGET_GameOverScreen, CallFunc_GetGameInstance_ReturnValue_1) == 0x000048, "Member 'WIDGET_GameOverScreen_C_ExecuteUbergraph_WIDGET_GameOverScreen::CallFunc_GetGameInstance_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(WIDGET_GameOverScreen_C_ExecuteUbergraph_WIDGET_GameOverScreen, K2Node_DynamicCast_AsGI_Single_Player_1) == 0x000050, "Member 'WIDGET_GameOverScreen_C_ExecuteUbergraph_WIDGET_GameOverScreen::K2Node_DynamicCast_AsGI_Single_Player_1' has a wrong offset!");
static_assert(offsetof(WIDGET_GameOverScreen_C_ExecuteUbergraph_WIDGET_GameOverScreen, K2Node_DynamicCast_bSuccess_1) == 0x000058, "Member 'WIDGET_GameOverScreen_C_ExecuteUbergraph_WIDGET_GameOverScreen::K2Node_DynamicCast_bSuccess_1' has a wrong offset!");
static_assert(offsetof(WIDGET_GameOverScreen_C_ExecuteUbergraph_WIDGET_GameOverScreen, K2Node_Event_MyGeometry) == 0x00005C, "Member 'WIDGET_GameOverScreen_C_ExecuteUbergraph_WIDGET_GameOverScreen::K2Node_Event_MyGeometry' has a wrong offset!");
static_assert(offsetof(WIDGET_GameOverScreen_C_ExecuteUbergraph_WIDGET_GameOverScreen, K2Node_Event_InDeltaTime) == 0x000094, "Member 'WIDGET_GameOverScreen_C_ExecuteUbergraph_WIDGET_GameOverScreen::K2Node_Event_InDeltaTime' has a wrong offset!");
static_assert(offsetof(WIDGET_GameOverScreen_C_ExecuteUbergraph_WIDGET_GameOverScreen, CallFunc_GetPlayerController_ReturnValue) == 0x000098, "Member 'WIDGET_GameOverScreen_C_ExecuteUbergraph_WIDGET_GameOverScreen::CallFunc_GetPlayerController_ReturnValue' has a wrong offset!");
static_assert(offsetof(WIDGET_GameOverScreen_C_ExecuteUbergraph_WIDGET_GameOverScreen, K2Node_CreateDelegate_OutputDelegate_1) == 0x0000A0, "Member 'WIDGET_GameOverScreen_C_ExecuteUbergraph_WIDGET_GameOverScreen::K2Node_CreateDelegate_OutputDelegate_1' has a wrong offset!");
static_assert(offsetof(WIDGET_GameOverScreen_C_ExecuteUbergraph_WIDGET_GameOverScreen, K2Node_DynamicCast_AsCON_Hacker) == 0x0000B0, "Member 'WIDGET_GameOverScreen_C_ExecuteUbergraph_WIDGET_GameOverScreen::K2Node_DynamicCast_AsCON_Hacker' has a wrong offset!");
static_assert(offsetof(WIDGET_GameOverScreen_C_ExecuteUbergraph_WIDGET_GameOverScreen, K2Node_DynamicCast_bSuccess_2) == 0x0000B8, "Member 'WIDGET_GameOverScreen_C_ExecuteUbergraph_WIDGET_GameOverScreen::K2Node_DynamicCast_bSuccess_2' has a wrong offset!");
static_assert(offsetof(WIDGET_GameOverScreen_C_ExecuteUbergraph_WIDGET_GameOverScreen, CallFunc_GetPlayerPawn_ReturnValue) == 0x0000C0, "Member 'WIDGET_GameOverScreen_C_ExecuteUbergraph_WIDGET_GameOverScreen::CallFunc_GetPlayerPawn_ReturnValue' has a wrong offset!");
static_assert(offsetof(WIDGET_GameOverScreen_C_ExecuteUbergraph_WIDGET_GameOverScreen, K2Node_DynamicCast_AsPAWN_Player_Ghost) == 0x0000C8, "Member 'WIDGET_GameOverScreen_C_ExecuteUbergraph_WIDGET_GameOverScreen::K2Node_DynamicCast_AsPAWN_Player_Ghost' has a wrong offset!");
static_assert(offsetof(WIDGET_GameOverScreen_C_ExecuteUbergraph_WIDGET_GameOverScreen, K2Node_DynamicCast_bSuccess_3) == 0x0000D0, "Member 'WIDGET_GameOverScreen_C_ExecuteUbergraph_WIDGET_GameOverScreen::K2Node_DynamicCast_bSuccess_3' has a wrong offset!");
static_assert(offsetof(WIDGET_GameOverScreen_C_ExecuteUbergraph_WIDGET_GameOverScreen, K2Node_CreateDelegate_OutputDelegate_2) == 0x0000D4, "Member 'WIDGET_GameOverScreen_C_ExecuteUbergraph_WIDGET_GameOverScreen::K2Node_CreateDelegate_OutputDelegate_2' has a wrong offset!");
static_assert(offsetof(WIDGET_GameOverScreen_C_ExecuteUbergraph_WIDGET_GameOverScreen, K2Node_CreateDelegate_OutputDelegate_3) == 0x0000E4, "Member 'WIDGET_GameOverScreen_C_ExecuteUbergraph_WIDGET_GameOverScreen::K2Node_CreateDelegate_OutputDelegate_3' has a wrong offset!");
static_assert(offsetof(WIDGET_GameOverScreen_C_ExecuteUbergraph_WIDGET_GameOverScreen, K2Node_CreateDelegate_OutputDelegate_4) == 0x0000F4, "Member 'WIDGET_GameOverScreen_C_ExecuteUbergraph_WIDGET_GameOverScreen::K2Node_CreateDelegate_OutputDelegate_4' has a wrong offset!");

// Function WIDGET_GameOverScreen.WIDGET_GameOverScreen_C.Tick
// 0x003C (0x003C - 0x0000)
struct WIDGET_GameOverScreen_C_Tick final
{
public:
	struct FGeometry                              MyGeometry;                                        // 0x0000(0x0038)(BlueprintVisible, BlueprintReadOnly, Parm, IsPlainOldData, NoDestructor)
	float                                         InDeltaTime;                                       // 0x0038(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(WIDGET_GameOverScreen_C_Tick) == 0x000004, "Wrong alignment on WIDGET_GameOverScreen_C_Tick");
static_assert(sizeof(WIDGET_GameOverScreen_C_Tick) == 0x00003C, "Wrong size on WIDGET_GameOverScreen_C_Tick");
static_assert(offsetof(WIDGET_GameOverScreen_C_Tick, MyGeometry) == 0x000000, "Member 'WIDGET_GameOverScreen_C_Tick::MyGeometry' has a wrong offset!");
static_assert(offsetof(WIDGET_GameOverScreen_C_Tick, InDeltaTime) == 0x000038, "Member 'WIDGET_GameOverScreen_C_Tick::InDeltaTime' has a wrong offset!");

// Function WIDGET_GameOverScreen.WIDGET_GameOverScreen_C.BndEvt__WIDGET_GameOverScreen_WIDGET_MainMenu_GameOverScreenList_K2Node_ComponentBoundEvent_3_OnMenuAction__DelegateSignature
// 0x0010 (0x0010 - 0x0000)
struct WIDGET_GameOverScreen_C_BndEvt__WIDGET_GameOverScreen_WIDGET_MainMenu_GameOverScreenList_K2Node_ComponentBoundEvent_3_OnMenuAction__DelegateSignature final
{
public:
	class FString                                 Message;                                           // 0x0000(0x0010)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, HasGetValueTypeHash)
};
static_assert(alignof(WIDGET_GameOverScreen_C_BndEvt__WIDGET_GameOverScreen_WIDGET_MainMenu_GameOverScreenList_K2Node_ComponentBoundEvent_3_OnMenuAction__DelegateSignature) == 0x000008, "Wrong alignment on WIDGET_GameOverScreen_C_BndEvt__WIDGET_GameOverScreen_WIDGET_MainMenu_GameOverScreenList_K2Node_ComponentBoundEvent_3_OnMenuAction__DelegateSignature");
static_assert(sizeof(WIDGET_GameOverScreen_C_BndEvt__WIDGET_GameOverScreen_WIDGET_MainMenu_GameOverScreenList_K2Node_ComponentBoundEvent_3_OnMenuAction__DelegateSignature) == 0x000010, "Wrong size on WIDGET_GameOverScreen_C_BndEvt__WIDGET_GameOverScreen_WIDGET_MainMenu_GameOverScreenList_K2Node_ComponentBoundEvent_3_OnMenuAction__DelegateSignature");
static_assert(offsetof(WIDGET_GameOverScreen_C_BndEvt__WIDGET_GameOverScreen_WIDGET_MainMenu_GameOverScreenList_K2Node_ComponentBoundEvent_3_OnMenuAction__DelegateSignature, Message) == 0x000000, "Member 'WIDGET_GameOverScreen_C_BndEvt__WIDGET_GameOverScreen_WIDGET_MainMenu_GameOverScreenList_K2Node_ComponentBoundEvent_3_OnMenuAction__DelegateSignature::Message' has a wrong offset!");

// Function WIDGET_GameOverScreen.WIDGET_GameOverScreen_C.RefreshContinueAutosave
// 0x0038 (0x0038 - 0x0000)
struct WIDGET_GameOverScreen_C_RefreshContinueAutosave final
{
public:
	TArray<class FString>                         CallFunc_GetExistingSaveGameNames_ReturnValue;     // 0x0000(0x0010)(ReferenceParm)
	bool                                          CallFunc_Array_IsValidIndex_ReturnValue;           // 0x0010(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 CallFunc_Array_Get_Item;                           // 0x0018(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	class UStreamingSaveGameProfile*              CallFunc_LoadGameProfile_ReturnValue;              // 0x0028(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0030(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(WIDGET_GameOverScreen_C_RefreshContinueAutosave) == 0x000008, "Wrong alignment on WIDGET_GameOverScreen_C_RefreshContinueAutosave");
static_assert(sizeof(WIDGET_GameOverScreen_C_RefreshContinueAutosave) == 0x000038, "Wrong size on WIDGET_GameOverScreen_C_RefreshContinueAutosave");
static_assert(offsetof(WIDGET_GameOverScreen_C_RefreshContinueAutosave, CallFunc_GetExistingSaveGameNames_ReturnValue) == 0x000000, "Member 'WIDGET_GameOverScreen_C_RefreshContinueAutosave::CallFunc_GetExistingSaveGameNames_ReturnValue' has a wrong offset!");
static_assert(offsetof(WIDGET_GameOverScreen_C_RefreshContinueAutosave, CallFunc_Array_IsValidIndex_ReturnValue) == 0x000010, "Member 'WIDGET_GameOverScreen_C_RefreshContinueAutosave::CallFunc_Array_IsValidIndex_ReturnValue' has a wrong offset!");
static_assert(offsetof(WIDGET_GameOverScreen_C_RefreshContinueAutosave, CallFunc_Array_Get_Item) == 0x000018, "Member 'WIDGET_GameOverScreen_C_RefreshContinueAutosave::CallFunc_Array_Get_Item' has a wrong offset!");
static_assert(offsetof(WIDGET_GameOverScreen_C_RefreshContinueAutosave, CallFunc_LoadGameProfile_ReturnValue) == 0x000028, "Member 'WIDGET_GameOverScreen_C_RefreshContinueAutosave::CallFunc_LoadGameProfile_ReturnValue' has a wrong offset!");
static_assert(offsetof(WIDGET_GameOverScreen_C_RefreshContinueAutosave, CallFunc_IsValid_ReturnValue) == 0x000030, "Member 'WIDGET_GameOverScreen_C_RefreshContinueAutosave::CallFunc_IsValid_ReturnValue' has a wrong offset!");

// Function WIDGET_GameOverScreen.WIDGET_GameOverScreen_C.OnGameOverRevealFinish
// 0x0018 (0x0018 - 0x0000)
struct WIDGET_GameOverScreen_C_OnGameOverRevealFinish final
{
public:
	class APlayerController*                      CallFunc_GetPlayerController_ReturnValue;          // 0x0000(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class ACON_Hacker_C*                          K2Node_DynamicCast_AsCON_Hacker;                   // 0x0008(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0010(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsUsingGamepad_Result;                    // 0x0011(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(WIDGET_GameOverScreen_C_OnGameOverRevealFinish) == 0x000008, "Wrong alignment on WIDGET_GameOverScreen_C_OnGameOverRevealFinish");
static_assert(sizeof(WIDGET_GameOverScreen_C_OnGameOverRevealFinish) == 0x000018, "Wrong size on WIDGET_GameOverScreen_C_OnGameOverRevealFinish");
static_assert(offsetof(WIDGET_GameOverScreen_C_OnGameOverRevealFinish, CallFunc_GetPlayerController_ReturnValue) == 0x000000, "Member 'WIDGET_GameOverScreen_C_OnGameOverRevealFinish::CallFunc_GetPlayerController_ReturnValue' has a wrong offset!");
static_assert(offsetof(WIDGET_GameOverScreen_C_OnGameOverRevealFinish, K2Node_DynamicCast_AsCON_Hacker) == 0x000008, "Member 'WIDGET_GameOverScreen_C_OnGameOverRevealFinish::K2Node_DynamicCast_AsCON_Hacker' has a wrong offset!");
static_assert(offsetof(WIDGET_GameOverScreen_C_OnGameOverRevealFinish, K2Node_DynamicCast_bSuccess) == 0x000010, "Member 'WIDGET_GameOverScreen_C_OnGameOverRevealFinish::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(WIDGET_GameOverScreen_C_OnGameOverRevealFinish, CallFunc_IsUsingGamepad_Result) == 0x000011, "Member 'WIDGET_GameOverScreen_C_OnGameOverRevealFinish::CallFunc_IsUsingGamepad_Result' has a wrong offset!");

// Function WIDGET_GameOverScreen.WIDGET_GameOverScreen_C.ToggleCursor
// 0x0050 (0x0050 - 0x0000)
struct WIDGET_GameOverScreen_C_ToggleCursor final
{
public:
	bool                                          CursorEnabled;                                     // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class APlayerController*                      CallFunc_GetPlayerController_ReturnValue;          // 0x0008(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class APlayerController*                      CallFunc_GetPlayerController_ReturnValue_1;        // 0x0010(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class APlayerController*                      CallFunc_GetPlayerController_ReturnValue_2;        // 0x0018(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_GetViewportSize_SizeX;                    // 0x0020(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_GetViewportSize_SizeY;                    // 0x0024(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Divide_IntInt_ReturnValue;                // 0x0028(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Divide_IntInt_ReturnValue_1;              // 0x002C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class APlayerController*                      CallFunc_GetPlayerController_ReturnValue_3;        // 0x0030(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class APlayerController*                      CallFunc_GetPlayerController_ReturnValue_4;        // 0x0038(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class APlayerController*                      CallFunc_GetPlayerController_ReturnValue_5;        // 0x0040(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class APlayerController*                      CallFunc_GetPlayerController_ReturnValue_6;        // 0x0048(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(WIDGET_GameOverScreen_C_ToggleCursor) == 0x000008, "Wrong alignment on WIDGET_GameOverScreen_C_ToggleCursor");
static_assert(sizeof(WIDGET_GameOverScreen_C_ToggleCursor) == 0x000050, "Wrong size on WIDGET_GameOverScreen_C_ToggleCursor");
static_assert(offsetof(WIDGET_GameOverScreen_C_ToggleCursor, CursorEnabled) == 0x000000, "Member 'WIDGET_GameOverScreen_C_ToggleCursor::CursorEnabled' has a wrong offset!");
static_assert(offsetof(WIDGET_GameOverScreen_C_ToggleCursor, CallFunc_GetPlayerController_ReturnValue) == 0x000008, "Member 'WIDGET_GameOverScreen_C_ToggleCursor::CallFunc_GetPlayerController_ReturnValue' has a wrong offset!");
static_assert(offsetof(WIDGET_GameOverScreen_C_ToggleCursor, CallFunc_GetPlayerController_ReturnValue_1) == 0x000010, "Member 'WIDGET_GameOverScreen_C_ToggleCursor::CallFunc_GetPlayerController_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(WIDGET_GameOverScreen_C_ToggleCursor, CallFunc_GetPlayerController_ReturnValue_2) == 0x000018, "Member 'WIDGET_GameOverScreen_C_ToggleCursor::CallFunc_GetPlayerController_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(WIDGET_GameOverScreen_C_ToggleCursor, CallFunc_GetViewportSize_SizeX) == 0x000020, "Member 'WIDGET_GameOverScreen_C_ToggleCursor::CallFunc_GetViewportSize_SizeX' has a wrong offset!");
static_assert(offsetof(WIDGET_GameOverScreen_C_ToggleCursor, CallFunc_GetViewportSize_SizeY) == 0x000024, "Member 'WIDGET_GameOverScreen_C_ToggleCursor::CallFunc_GetViewportSize_SizeY' has a wrong offset!");
static_assert(offsetof(WIDGET_GameOverScreen_C_ToggleCursor, CallFunc_Divide_IntInt_ReturnValue) == 0x000028, "Member 'WIDGET_GameOverScreen_C_ToggleCursor::CallFunc_Divide_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(WIDGET_GameOverScreen_C_ToggleCursor, CallFunc_Divide_IntInt_ReturnValue_1) == 0x00002C, "Member 'WIDGET_GameOverScreen_C_ToggleCursor::CallFunc_Divide_IntInt_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(WIDGET_GameOverScreen_C_ToggleCursor, CallFunc_GetPlayerController_ReturnValue_3) == 0x000030, "Member 'WIDGET_GameOverScreen_C_ToggleCursor::CallFunc_GetPlayerController_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(WIDGET_GameOverScreen_C_ToggleCursor, CallFunc_GetPlayerController_ReturnValue_4) == 0x000038, "Member 'WIDGET_GameOverScreen_C_ToggleCursor::CallFunc_GetPlayerController_ReturnValue_4' has a wrong offset!");
static_assert(offsetof(WIDGET_GameOverScreen_C_ToggleCursor, CallFunc_GetPlayerController_ReturnValue_5) == 0x000040, "Member 'WIDGET_GameOverScreen_C_ToggleCursor::CallFunc_GetPlayerController_ReturnValue_5' has a wrong offset!");
static_assert(offsetof(WIDGET_GameOverScreen_C_ToggleCursor, CallFunc_GetPlayerController_ReturnValue_6) == 0x000048, "Member 'WIDGET_GameOverScreen_C_ToggleCursor::CallFunc_GetPlayerController_ReturnValue_6' has a wrong offset!");

// Function WIDGET_GameOverScreen.WIDGET_GameOverScreen_C.InvokeNavManager
// 0x0058 (0x0058 - 0x0000)
struct WIDGET_GameOverScreen_C_InvokeNavManager final
{
public:
	ENUM_MenuNavigationInput                      InputType;                                         // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          InputState;                                        // 0x0001(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_2[0x6];                                        // 0x0002(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	TScriptInterface<class IBPI_MenuNavigationRecipient_C> K2Node_DynamicCast_AsBPI_Menu_Navigation_Recipient; // 0x0008(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0018(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_ReceiveNavAccept_Result;                  // 0x0019(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_1A[0x6];                                       // 0x001A(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	TScriptInterface<class IBPI_MenuNavigationRecipient_C> K2Node_DynamicCast_AsBPI_Menu_Navigation_Recipient_1; // 0x0020(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          K2Node_DynamicCast_bSuccess_1;                     // 0x0030(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_ReceiveNavDown_Result;                    // 0x0031(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_32[0x6];                                       // 0x0032(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	TScriptInterface<class IBPI_MenuNavigationRecipient_C> K2Node_DynamicCast_AsBPI_Menu_Navigation_Recipient_2; // 0x0038(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          K2Node_DynamicCast_bSuccess_2;                     // 0x0048(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_ReceiveNavUp_Result;                      // 0x0049(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_EqualEqual_ObjectObject_ReturnValue;      // 0x004A(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_EqualEqual_ObjectObject_ReturnValue_1;    // 0x004B(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          K2Node_SwitchEnum_CmpSuccess;                      // 0x004C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_EqualEqual_ObjectObject_ReturnValue_2;    // 0x004D(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_EqualEqual_ObjectObject_ReturnValue_3;    // 0x004E(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_EqualEqual_ObjectObject_ReturnValue_4;    // 0x004F(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_EqualEqual_ObjectObject_ReturnValue_5;    // 0x0050(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_EqualEqual_ObjectObject_ReturnValue_6;    // 0x0051(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_EqualEqual_ObjectObject_ReturnValue_7;    // 0x0052(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(WIDGET_GameOverScreen_C_InvokeNavManager) == 0x000008, "Wrong alignment on WIDGET_GameOverScreen_C_InvokeNavManager");
static_assert(sizeof(WIDGET_GameOverScreen_C_InvokeNavManager) == 0x000058, "Wrong size on WIDGET_GameOverScreen_C_InvokeNavManager");
static_assert(offsetof(WIDGET_GameOverScreen_C_InvokeNavManager, InputType) == 0x000000, "Member 'WIDGET_GameOverScreen_C_InvokeNavManager::InputType' has a wrong offset!");
static_assert(offsetof(WIDGET_GameOverScreen_C_InvokeNavManager, InputState) == 0x000001, "Member 'WIDGET_GameOverScreen_C_InvokeNavManager::InputState' has a wrong offset!");
static_assert(offsetof(WIDGET_GameOverScreen_C_InvokeNavManager, K2Node_DynamicCast_AsBPI_Menu_Navigation_Recipient) == 0x000008, "Member 'WIDGET_GameOverScreen_C_InvokeNavManager::K2Node_DynamicCast_AsBPI_Menu_Navigation_Recipient' has a wrong offset!");
static_assert(offsetof(WIDGET_GameOverScreen_C_InvokeNavManager, K2Node_DynamicCast_bSuccess) == 0x000018, "Member 'WIDGET_GameOverScreen_C_InvokeNavManager::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(WIDGET_GameOverScreen_C_InvokeNavManager, CallFunc_ReceiveNavAccept_Result) == 0x000019, "Member 'WIDGET_GameOverScreen_C_InvokeNavManager::CallFunc_ReceiveNavAccept_Result' has a wrong offset!");
static_assert(offsetof(WIDGET_GameOverScreen_C_InvokeNavManager, K2Node_DynamicCast_AsBPI_Menu_Navigation_Recipient_1) == 0x000020, "Member 'WIDGET_GameOverScreen_C_InvokeNavManager::K2Node_DynamicCast_AsBPI_Menu_Navigation_Recipient_1' has a wrong offset!");
static_assert(offsetof(WIDGET_GameOverScreen_C_InvokeNavManager, K2Node_DynamicCast_bSuccess_1) == 0x000030, "Member 'WIDGET_GameOverScreen_C_InvokeNavManager::K2Node_DynamicCast_bSuccess_1' has a wrong offset!");
static_assert(offsetof(WIDGET_GameOverScreen_C_InvokeNavManager, CallFunc_ReceiveNavDown_Result) == 0x000031, "Member 'WIDGET_GameOverScreen_C_InvokeNavManager::CallFunc_ReceiveNavDown_Result' has a wrong offset!");
static_assert(offsetof(WIDGET_GameOverScreen_C_InvokeNavManager, K2Node_DynamicCast_AsBPI_Menu_Navigation_Recipient_2) == 0x000038, "Member 'WIDGET_GameOverScreen_C_InvokeNavManager::K2Node_DynamicCast_AsBPI_Menu_Navigation_Recipient_2' has a wrong offset!");
static_assert(offsetof(WIDGET_GameOverScreen_C_InvokeNavManager, K2Node_DynamicCast_bSuccess_2) == 0x000048, "Member 'WIDGET_GameOverScreen_C_InvokeNavManager::K2Node_DynamicCast_bSuccess_2' has a wrong offset!");
static_assert(offsetof(WIDGET_GameOverScreen_C_InvokeNavManager, CallFunc_ReceiveNavUp_Result) == 0x000049, "Member 'WIDGET_GameOverScreen_C_InvokeNavManager::CallFunc_ReceiveNavUp_Result' has a wrong offset!");
static_assert(offsetof(WIDGET_GameOverScreen_C_InvokeNavManager, CallFunc_EqualEqual_ObjectObject_ReturnValue) == 0x00004A, "Member 'WIDGET_GameOverScreen_C_InvokeNavManager::CallFunc_EqualEqual_ObjectObject_ReturnValue' has a wrong offset!");
static_assert(offsetof(WIDGET_GameOverScreen_C_InvokeNavManager, CallFunc_EqualEqual_ObjectObject_ReturnValue_1) == 0x00004B, "Member 'WIDGET_GameOverScreen_C_InvokeNavManager::CallFunc_EqualEqual_ObjectObject_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(WIDGET_GameOverScreen_C_InvokeNavManager, K2Node_SwitchEnum_CmpSuccess) == 0x00004C, "Member 'WIDGET_GameOverScreen_C_InvokeNavManager::K2Node_SwitchEnum_CmpSuccess' has a wrong offset!");
static_assert(offsetof(WIDGET_GameOverScreen_C_InvokeNavManager, CallFunc_EqualEqual_ObjectObject_ReturnValue_2) == 0x00004D, "Member 'WIDGET_GameOverScreen_C_InvokeNavManager::CallFunc_EqualEqual_ObjectObject_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(WIDGET_GameOverScreen_C_InvokeNavManager, CallFunc_EqualEqual_ObjectObject_ReturnValue_3) == 0x00004E, "Member 'WIDGET_GameOverScreen_C_InvokeNavManager::CallFunc_EqualEqual_ObjectObject_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(WIDGET_GameOverScreen_C_InvokeNavManager, CallFunc_EqualEqual_ObjectObject_ReturnValue_4) == 0x00004F, "Member 'WIDGET_GameOverScreen_C_InvokeNavManager::CallFunc_EqualEqual_ObjectObject_ReturnValue_4' has a wrong offset!");
static_assert(offsetof(WIDGET_GameOverScreen_C_InvokeNavManager, CallFunc_EqualEqual_ObjectObject_ReturnValue_5) == 0x000050, "Member 'WIDGET_GameOverScreen_C_InvokeNavManager::CallFunc_EqualEqual_ObjectObject_ReturnValue_5' has a wrong offset!");
static_assert(offsetof(WIDGET_GameOverScreen_C_InvokeNavManager, CallFunc_EqualEqual_ObjectObject_ReturnValue_6) == 0x000051, "Member 'WIDGET_GameOverScreen_C_InvokeNavManager::CallFunc_EqualEqual_ObjectObject_ReturnValue_6' has a wrong offset!");
static_assert(offsetof(WIDGET_GameOverScreen_C_InvokeNavManager, CallFunc_EqualEqual_ObjectObject_ReturnValue_7) == 0x000052, "Member 'WIDGET_GameOverScreen_C_InvokeNavManager::CallFunc_EqualEqual_ObjectObject_ReturnValue_7' has a wrong offset!");

// Function WIDGET_GameOverScreen.WIDGET_GameOverScreen_C.EVENT_OnUsingGamepadChanged
// 0x0001 (0x0001 - 0x0000)
struct WIDGET_GameOverScreen_C_EVENT_OnUsingGamepadChanged final
{
public:
	bool                                          IsUsingGamepad;                                    // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(WIDGET_GameOverScreen_C_EVENT_OnUsingGamepadChanged) == 0x000001, "Wrong alignment on WIDGET_GameOverScreen_C_EVENT_OnUsingGamepadChanged");
static_assert(sizeof(WIDGET_GameOverScreen_C_EVENT_OnUsingGamepadChanged) == 0x000001, "Wrong size on WIDGET_GameOverScreen_C_EVENT_OnUsingGamepadChanged");
static_assert(offsetof(WIDGET_GameOverScreen_C_EVENT_OnUsingGamepadChanged, IsUsingGamepad) == 0x000000, "Member 'WIDGET_GameOverScreen_C_EVENT_OnUsingGamepadChanged::IsUsingGamepad' has a wrong offset!");

// Function WIDGET_GameOverScreen.WIDGET_GameOverScreen_C.RevealGameOver
// 0x0008 (0x0008 - 0x0000)
struct WIDGET_GameOverScreen_C_RevealGameOver final
{
public:
	class UUMGSequencePlayer*                     CallFunc_PlayAnimation_ReturnValue;                // 0x0000(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(WIDGET_GameOverScreen_C_RevealGameOver) == 0x000008, "Wrong alignment on WIDGET_GameOverScreen_C_RevealGameOver");
static_assert(sizeof(WIDGET_GameOverScreen_C_RevealGameOver) == 0x000008, "Wrong size on WIDGET_GameOverScreen_C_RevealGameOver");
static_assert(offsetof(WIDGET_GameOverScreen_C_RevealGameOver, CallFunc_PlayAnimation_ReturnValue) == 0x000000, "Member 'WIDGET_GameOverScreen_C_RevealGameOver::CallFunc_PlayAnimation_ReturnValue' has a wrong offset!");

// Function WIDGET_GameOverScreen.WIDGET_GameOverScreen_C.EVENT_TriggerSkipSequence
// 0x0010 (0x0010 - 0x0000)
struct WIDGET_GameOverScreen_C_EVENT_TriggerSkipSequence final
{
public:
	class UUMGSequencePlayer*                     CallFunc_PlayAnimationReverse_ReturnValue;         // 0x0000(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0008(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(WIDGET_GameOverScreen_C_EVENT_TriggerSkipSequence) == 0x000008, "Wrong alignment on WIDGET_GameOverScreen_C_EVENT_TriggerSkipSequence");
static_assert(sizeof(WIDGET_GameOverScreen_C_EVENT_TriggerSkipSequence) == 0x000010, "Wrong size on WIDGET_GameOverScreen_C_EVENT_TriggerSkipSequence");
static_assert(offsetof(WIDGET_GameOverScreen_C_EVENT_TriggerSkipSequence, CallFunc_PlayAnimationReverse_ReturnValue) == 0x000000, "Member 'WIDGET_GameOverScreen_C_EVENT_TriggerSkipSequence::CallFunc_PlayAnimationReverse_ReturnValue' has a wrong offset!");
static_assert(offsetof(WIDGET_GameOverScreen_C_EVENT_TriggerSkipSequence, CallFunc_IsValid_ReturnValue) == 0x000008, "Member 'WIDGET_GameOverScreen_C_EVENT_TriggerSkipSequence::CallFunc_IsValid_ReturnValue' has a wrong offset!");

}

