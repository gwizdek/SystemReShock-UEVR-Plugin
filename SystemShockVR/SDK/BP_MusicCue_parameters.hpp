#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_MusicCue

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "ENUM_BeatType_structs.hpp"
#include "ENUM_IntensityThresholds_structs.hpp"
#include "STRUCT_MusicCue_Layer_structs.hpp"
#include "ENUM_MusicPlayState_structs.hpp"


namespace SDK::Params
{

// Function BP_MusicCue.BP_MusicCue_C.OnMusicFinished__DelegateSignature
// 0x0008 (0x0008 - 0x0000)
struct BP_MusicCue_C_OnMusicFinished__DelegateSignature final
{
public:
	class UBP_MusicCue_C*                         MusicCue;                                          // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_MusicCue_C_OnMusicFinished__DelegateSignature) == 0x000008, "Wrong alignment on BP_MusicCue_C_OnMusicFinished__DelegateSignature");
static_assert(sizeof(BP_MusicCue_C_OnMusicFinished__DelegateSignature) == 0x000008, "Wrong size on BP_MusicCue_C_OnMusicFinished__DelegateSignature");
static_assert(offsetof(BP_MusicCue_C_OnMusicFinished__DelegateSignature, MusicCue) == 0x000000, "Member 'BP_MusicCue_C_OnMusicFinished__DelegateSignature::MusicCue' has a wrong offset!");

// Function BP_MusicCue.BP_MusicCue_C.OnMeasure__DelegateSignature
// 0x000C (0x000C - 0x0000)
struct BP_MusicCue_C_OnMeasure__DelegateSignature final
{
public:
	int32                                         NumBars;                                           // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CurrentExploreMusicIntensity;                      // 0x0004(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CurrentCombatMusicIntensity;                       // 0x0008(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_MusicCue_C_OnMeasure__DelegateSignature) == 0x000004, "Wrong alignment on BP_MusicCue_C_OnMeasure__DelegateSignature");
static_assert(sizeof(BP_MusicCue_C_OnMeasure__DelegateSignature) == 0x00000C, "Wrong size on BP_MusicCue_C_OnMeasure__DelegateSignature");
static_assert(offsetof(BP_MusicCue_C_OnMeasure__DelegateSignature, NumBars) == 0x000000, "Member 'BP_MusicCue_C_OnMeasure__DelegateSignature::NumBars' has a wrong offset!");
static_assert(offsetof(BP_MusicCue_C_OnMeasure__DelegateSignature, CurrentExploreMusicIntensity) == 0x000004, "Member 'BP_MusicCue_C_OnMeasure__DelegateSignature::CurrentExploreMusicIntensity' has a wrong offset!");
static_assert(offsetof(BP_MusicCue_C_OnMeasure__DelegateSignature, CurrentCombatMusicIntensity) == 0x000008, "Member 'BP_MusicCue_C_OnMeasure__DelegateSignature::CurrentCombatMusicIntensity' has a wrong offset!");

// Function BP_MusicCue.BP_MusicCue_C.IsMusicPlaying
// 0x0004 (0x0004 - 0x0000)
struct BP_MusicCue_C_IsMusicPlaying final
{
public:
	bool                                          Result;                                            // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_EqualEqual_ByteByte_ReturnValue;          // 0x0001(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_EqualEqual_ByteByte_ReturnValue_1;        // 0x0002(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BooleanOR_ReturnValue;                    // 0x0003(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_MusicCue_C_IsMusicPlaying) == 0x000001, "Wrong alignment on BP_MusicCue_C_IsMusicPlaying");
static_assert(sizeof(BP_MusicCue_C_IsMusicPlaying) == 0x000004, "Wrong size on BP_MusicCue_C_IsMusicPlaying");
static_assert(offsetof(BP_MusicCue_C_IsMusicPlaying, Result) == 0x000000, "Member 'BP_MusicCue_C_IsMusicPlaying::Result' has a wrong offset!");
static_assert(offsetof(BP_MusicCue_C_IsMusicPlaying, CallFunc_EqualEqual_ByteByte_ReturnValue) == 0x000001, "Member 'BP_MusicCue_C_IsMusicPlaying::CallFunc_EqualEqual_ByteByte_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_MusicCue_C_IsMusicPlaying, CallFunc_EqualEqual_ByteByte_ReturnValue_1) == 0x000002, "Member 'BP_MusicCue_C_IsMusicPlaying::CallFunc_EqualEqual_ByteByte_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_MusicCue_C_IsMusicPlaying, CallFunc_BooleanOR_ReturnValue) == 0x000003, "Member 'BP_MusicCue_C_IsMusicPlaying::CallFunc_BooleanOR_ReturnValue' has a wrong offset!");

// Function BP_MusicCue.BP_MusicCue_C.GetCurrentPlayState
// 0x0001 (0x0001 - 0x0000)
struct BP_MusicCue_C_GetCurrentPlayState final
{
public:
	ENUM_MusicPlayState                           Result;                                            // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_MusicCue_C_GetCurrentPlayState) == 0x000001, "Wrong alignment on BP_MusicCue_C_GetCurrentPlayState");
static_assert(sizeof(BP_MusicCue_C_GetCurrentPlayState) == 0x000001, "Wrong size on BP_MusicCue_C_GetCurrentPlayState");
static_assert(offsetof(BP_MusicCue_C_GetCurrentPlayState, Result) == 0x000000, "Member 'BP_MusicCue_C_GetCurrentPlayState::Result' has a wrong offset!");

// Function BP_MusicCue.BP_MusicCue_C.GetCurrentVolume
// 0x0004 (0x0004 - 0x0000)
struct BP_MusicCue_C_GetCurrentVolume final
{
public:
	float                                         Result;                                            // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_MusicCue_C_GetCurrentVolume) == 0x000004, "Wrong alignment on BP_MusicCue_C_GetCurrentVolume");
static_assert(sizeof(BP_MusicCue_C_GetCurrentVolume) == 0x000004, "Wrong size on BP_MusicCue_C_GetCurrentVolume");
static_assert(offsetof(BP_MusicCue_C_GetCurrentVolume, Result) == 0x000000, "Member 'BP_MusicCue_C_GetCurrentVolume::Result' has a wrong offset!");

// Function BP_MusicCue.BP_MusicCue_C.GetMillisecondsOfMeasures
// 0x000C (0x000C - 0x0000)
struct BP_MusicCue_C_GetMillisecondsOfMeasures final
{
public:
	int32                                         RetriggerTimeInMeasures;                           // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         MillisecondsPerBar;                                // 0x0004(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Multiply_IntInt_ReturnValue;              // 0x0008(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_MusicCue_C_GetMillisecondsOfMeasures) == 0x000004, "Wrong alignment on BP_MusicCue_C_GetMillisecondsOfMeasures");
static_assert(sizeof(BP_MusicCue_C_GetMillisecondsOfMeasures) == 0x00000C, "Wrong size on BP_MusicCue_C_GetMillisecondsOfMeasures");
static_assert(offsetof(BP_MusicCue_C_GetMillisecondsOfMeasures, RetriggerTimeInMeasures) == 0x000000, "Member 'BP_MusicCue_C_GetMillisecondsOfMeasures::RetriggerTimeInMeasures' has a wrong offset!");
static_assert(offsetof(BP_MusicCue_C_GetMillisecondsOfMeasures, MillisecondsPerBar) == 0x000004, "Member 'BP_MusicCue_C_GetMillisecondsOfMeasures::MillisecondsPerBar' has a wrong offset!");
static_assert(offsetof(BP_MusicCue_C_GetMillisecondsOfMeasures, CallFunc_Multiply_IntInt_ReturnValue) == 0x000008, "Member 'BP_MusicCue_C_GetMillisecondsOfMeasures::CallFunc_Multiply_IntInt_ReturnValue' has a wrong offset!");

// Function BP_MusicCue.BP_MusicCue_C.GetRealTimeInMilliseconds
// 0x0010 (0x0010 - 0x0000)
struct BP_MusicCue_C_GetRealTimeInMilliseconds final
{
public:
	int32                                         Result;                                            // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_GetRealTimeSeconds_ReturnValue;           // 0x0004(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Multiply_IntFloat_ReturnValue;            // 0x0008(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Round_ReturnValue;                        // 0x000C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_MusicCue_C_GetRealTimeInMilliseconds) == 0x000004, "Wrong alignment on BP_MusicCue_C_GetRealTimeInMilliseconds");
static_assert(sizeof(BP_MusicCue_C_GetRealTimeInMilliseconds) == 0x000010, "Wrong size on BP_MusicCue_C_GetRealTimeInMilliseconds");
static_assert(offsetof(BP_MusicCue_C_GetRealTimeInMilliseconds, Result) == 0x000000, "Member 'BP_MusicCue_C_GetRealTimeInMilliseconds::Result' has a wrong offset!");
static_assert(offsetof(BP_MusicCue_C_GetRealTimeInMilliseconds, CallFunc_GetRealTimeSeconds_ReturnValue) == 0x000004, "Member 'BP_MusicCue_C_GetRealTimeInMilliseconds::CallFunc_GetRealTimeSeconds_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_MusicCue_C_GetRealTimeInMilliseconds, CallFunc_Multiply_IntFloat_ReturnValue) == 0x000008, "Member 'BP_MusicCue_C_GetRealTimeInMilliseconds::CallFunc_Multiply_IntFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_MusicCue_C_GetRealTimeInMilliseconds, CallFunc_Round_ReturnValue) == 0x00000C, "Member 'BP_MusicCue_C_GetRealTimeInMilliseconds::CallFunc_Round_ReturnValue' has a wrong offset!");

// Function BP_MusicCue.BP_MusicCue_C.GetElapsedTimeInCurrentPlayState
// 0x000C (0x000C - 0x0000)
struct BP_MusicCue_C_GetElapsedTimeInCurrentPlayState final
{
public:
	float                                         Result;                                            // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_GetRealTimeSeconds_ReturnValue;           // 0x0004(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Subtract_FloatFloat_ReturnValue;          // 0x0008(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_MusicCue_C_GetElapsedTimeInCurrentPlayState) == 0x000004, "Wrong alignment on BP_MusicCue_C_GetElapsedTimeInCurrentPlayState");
static_assert(sizeof(BP_MusicCue_C_GetElapsedTimeInCurrentPlayState) == 0x00000C, "Wrong size on BP_MusicCue_C_GetElapsedTimeInCurrentPlayState");
static_assert(offsetof(BP_MusicCue_C_GetElapsedTimeInCurrentPlayState, Result) == 0x000000, "Member 'BP_MusicCue_C_GetElapsedTimeInCurrentPlayState::Result' has a wrong offset!");
static_assert(offsetof(BP_MusicCue_C_GetElapsedTimeInCurrentPlayState, CallFunc_GetRealTimeSeconds_ReturnValue) == 0x000004, "Member 'BP_MusicCue_C_GetElapsedTimeInCurrentPlayState::CallFunc_GetRealTimeSeconds_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_MusicCue_C_GetElapsedTimeInCurrentPlayState, CallFunc_Subtract_FloatFloat_ReturnValue) == 0x000008, "Member 'BP_MusicCue_C_GetElapsedTimeInCurrentPlayState::CallFunc_Subtract_FloatFloat_ReturnValue' has a wrong offset!");

// Function BP_MusicCue.BP_MusicCue_C.GetShouldRetrigger
// 0x0040 (0x0040 - 0x0000)
struct BP_MusicCue_C_GetShouldRetrigger final
{
public:
	struct FSTRUCT_MusicCue_Layer                 Layer;                                             // 0x0000(0x0038)(BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm, HasGetValueTypeHash)
	bool                                          bShouldRetrigger;                                  // 0x0038(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_NotEqual_IntInt_ReturnValue;              // 0x0039(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_MusicCue_C_GetShouldRetrigger) == 0x000008, "Wrong alignment on BP_MusicCue_C_GetShouldRetrigger");
static_assert(sizeof(BP_MusicCue_C_GetShouldRetrigger) == 0x000040, "Wrong size on BP_MusicCue_C_GetShouldRetrigger");
static_assert(offsetof(BP_MusicCue_C_GetShouldRetrigger, Layer) == 0x000000, "Member 'BP_MusicCue_C_GetShouldRetrigger::Layer' has a wrong offset!");
static_assert(offsetof(BP_MusicCue_C_GetShouldRetrigger, bShouldRetrigger) == 0x000038, "Member 'BP_MusicCue_C_GetShouldRetrigger::bShouldRetrigger' has a wrong offset!");
static_assert(offsetof(BP_MusicCue_C_GetShouldRetrigger, CallFunc_NotEqual_IntInt_ReturnValue) == 0x000039, "Member 'BP_MusicCue_C_GetShouldRetrigger::CallFunc_NotEqual_IntInt_ReturnValue' has a wrong offset!");

// Function BP_MusicCue.BP_MusicCue_C.SetPlaybackState
// 0x0030 (0x0030 - 0x0000)
struct BP_MusicCue_C_SetPlaybackState final
{
public:
	ENUM_MusicPlayState                           PlaybackState;                                     // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_ByteByte_ReturnValue;          // 0x0001(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_EqualEqual_ByteByte_ReturnValue_1;        // 0x0002(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          K2Node_SwitchEnum_CmpSuccess;                      // 0x0003(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 CallFunc_GetEnumeratorUserFriendlyName_ReturnValue; // 0x0008(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	class FString                                 CallFunc_Concat_StrStr_ReturnValue;                // 0x0018(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	float                                         CallFunc_GetRealTimeSeconds_ReturnValue;           // 0x0028(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_SwitchEnum_CmpSuccess_1;                    // 0x002C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_MusicCue_C_SetPlaybackState) == 0x000008, "Wrong alignment on BP_MusicCue_C_SetPlaybackState");
static_assert(sizeof(BP_MusicCue_C_SetPlaybackState) == 0x000030, "Wrong size on BP_MusicCue_C_SetPlaybackState");
static_assert(offsetof(BP_MusicCue_C_SetPlaybackState, PlaybackState) == 0x000000, "Member 'BP_MusicCue_C_SetPlaybackState::PlaybackState' has a wrong offset!");
static_assert(offsetof(BP_MusicCue_C_SetPlaybackState, CallFunc_EqualEqual_ByteByte_ReturnValue) == 0x000001, "Member 'BP_MusicCue_C_SetPlaybackState::CallFunc_EqualEqual_ByteByte_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_MusicCue_C_SetPlaybackState, CallFunc_EqualEqual_ByteByte_ReturnValue_1) == 0x000002, "Member 'BP_MusicCue_C_SetPlaybackState::CallFunc_EqualEqual_ByteByte_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_MusicCue_C_SetPlaybackState, K2Node_SwitchEnum_CmpSuccess) == 0x000003, "Member 'BP_MusicCue_C_SetPlaybackState::K2Node_SwitchEnum_CmpSuccess' has a wrong offset!");
static_assert(offsetof(BP_MusicCue_C_SetPlaybackState, CallFunc_GetEnumeratorUserFriendlyName_ReturnValue) == 0x000008, "Member 'BP_MusicCue_C_SetPlaybackState::CallFunc_GetEnumeratorUserFriendlyName_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_MusicCue_C_SetPlaybackState, CallFunc_Concat_StrStr_ReturnValue) == 0x000018, "Member 'BP_MusicCue_C_SetPlaybackState::CallFunc_Concat_StrStr_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_MusicCue_C_SetPlaybackState, CallFunc_GetRealTimeSeconds_ReturnValue) == 0x000028, "Member 'BP_MusicCue_C_SetPlaybackState::CallFunc_GetRealTimeSeconds_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_MusicCue_C_SetPlaybackState, K2Node_SwitchEnum_CmpSuccess_1) == 0x00002C, "Member 'BP_MusicCue_C_SetPlaybackState::K2Node_SwitchEnum_CmpSuccess_1' has a wrong offset!");

// Function BP_MusicCue.BP_MusicCue_C.SetFadeInBypassList
// 0x0028 (0x0028 - 0x0000)
struct BP_MusicCue_C_SetFadeInBypassList final
{
public:
	int32                                         Temp_int_Array_Index_Variable;                     // 0x0000(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Loop_Counter_Variable;                    // 0x0004(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue;                   // 0x0008(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UBP_MusicLayer_C*                       CallFunc_Array_Get_Item;                           // 0x0010(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Not_PreBool_ReturnValue;                  // 0x0018(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_19[0x3];                                       // 0x0019(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Array_Length_ReturnValue;                 // 0x001C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue;                  // 0x0020(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_21[0x3];                                       // 0x0021(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Array_Add_ReturnValue;                    // 0x0024(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_MusicCue_C_SetFadeInBypassList) == 0x000008, "Wrong alignment on BP_MusicCue_C_SetFadeInBypassList");
static_assert(sizeof(BP_MusicCue_C_SetFadeInBypassList) == 0x000028, "Wrong size on BP_MusicCue_C_SetFadeInBypassList");
static_assert(offsetof(BP_MusicCue_C_SetFadeInBypassList, Temp_int_Array_Index_Variable) == 0x000000, "Member 'BP_MusicCue_C_SetFadeInBypassList::Temp_int_Array_Index_Variable' has a wrong offset!");
static_assert(offsetof(BP_MusicCue_C_SetFadeInBypassList, Temp_int_Loop_Counter_Variable) == 0x000004, "Member 'BP_MusicCue_C_SetFadeInBypassList::Temp_int_Loop_Counter_Variable' has a wrong offset!");
static_assert(offsetof(BP_MusicCue_C_SetFadeInBypassList, CallFunc_Add_IntInt_ReturnValue) == 0x000008, "Member 'BP_MusicCue_C_SetFadeInBypassList::CallFunc_Add_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_MusicCue_C_SetFadeInBypassList, CallFunc_Array_Get_Item) == 0x000010, "Member 'BP_MusicCue_C_SetFadeInBypassList::CallFunc_Array_Get_Item' has a wrong offset!");
static_assert(offsetof(BP_MusicCue_C_SetFadeInBypassList, CallFunc_Not_PreBool_ReturnValue) == 0x000018, "Member 'BP_MusicCue_C_SetFadeInBypassList::CallFunc_Not_PreBool_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_MusicCue_C_SetFadeInBypassList, CallFunc_Array_Length_ReturnValue) == 0x00001C, "Member 'BP_MusicCue_C_SetFadeInBypassList::CallFunc_Array_Length_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_MusicCue_C_SetFadeInBypassList, CallFunc_Less_IntInt_ReturnValue) == 0x000020, "Member 'BP_MusicCue_C_SetFadeInBypassList::CallFunc_Less_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_MusicCue_C_SetFadeInBypassList, CallFunc_Array_Add_ReturnValue) == 0x000024, "Member 'BP_MusicCue_C_SetFadeInBypassList::CallFunc_Array_Add_ReturnValue' has a wrong offset!");

// Function BP_MusicCue.BP_MusicCue_C.GetShouldComponentFadeIn
// 0x0030 (0x0030 - 0x0000)
struct BP_MusicCue_C_GetShouldComponentFadeIn final
{
public:
	class UAudioComponent*                        AudioComponent;                                    // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ZeroConstructor, InstancedReference, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          bShouldFadeIn;                                     // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Temp_int_Array_Index_Variable;                     // 0x000C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Length_ReturnValue;                 // 0x0010(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FName                                   CallFunc_Array_Get_Item;                           // 0x0014(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Loop_Counter_Variable;                    // 0x001C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue;                  // 0x0020(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_21[0x3];                                       // 0x0021(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Add_IntInt_ReturnValue;                   // 0x0024(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Find_ReturnValue;                   // 0x0028(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_NotEqual_IntInt_ReturnValue;              // 0x002C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_MusicCue_C_GetShouldComponentFadeIn) == 0x000008, "Wrong alignment on BP_MusicCue_C_GetShouldComponentFadeIn");
static_assert(sizeof(BP_MusicCue_C_GetShouldComponentFadeIn) == 0x000030, "Wrong size on BP_MusicCue_C_GetShouldComponentFadeIn");
static_assert(offsetof(BP_MusicCue_C_GetShouldComponentFadeIn, AudioComponent) == 0x000000, "Member 'BP_MusicCue_C_GetShouldComponentFadeIn::AudioComponent' has a wrong offset!");
static_assert(offsetof(BP_MusicCue_C_GetShouldComponentFadeIn, bShouldFadeIn) == 0x000008, "Member 'BP_MusicCue_C_GetShouldComponentFadeIn::bShouldFadeIn' has a wrong offset!");
static_assert(offsetof(BP_MusicCue_C_GetShouldComponentFadeIn, Temp_int_Array_Index_Variable) == 0x00000C, "Member 'BP_MusicCue_C_GetShouldComponentFadeIn::Temp_int_Array_Index_Variable' has a wrong offset!");
static_assert(offsetof(BP_MusicCue_C_GetShouldComponentFadeIn, CallFunc_Array_Length_ReturnValue) == 0x000010, "Member 'BP_MusicCue_C_GetShouldComponentFadeIn::CallFunc_Array_Length_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_MusicCue_C_GetShouldComponentFadeIn, CallFunc_Array_Get_Item) == 0x000014, "Member 'BP_MusicCue_C_GetShouldComponentFadeIn::CallFunc_Array_Get_Item' has a wrong offset!");
static_assert(offsetof(BP_MusicCue_C_GetShouldComponentFadeIn, Temp_int_Loop_Counter_Variable) == 0x00001C, "Member 'BP_MusicCue_C_GetShouldComponentFadeIn::Temp_int_Loop_Counter_Variable' has a wrong offset!");
static_assert(offsetof(BP_MusicCue_C_GetShouldComponentFadeIn, CallFunc_Less_IntInt_ReturnValue) == 0x000020, "Member 'BP_MusicCue_C_GetShouldComponentFadeIn::CallFunc_Less_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_MusicCue_C_GetShouldComponentFadeIn, CallFunc_Add_IntInt_ReturnValue) == 0x000024, "Member 'BP_MusicCue_C_GetShouldComponentFadeIn::CallFunc_Add_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_MusicCue_C_GetShouldComponentFadeIn, CallFunc_Array_Find_ReturnValue) == 0x000028, "Member 'BP_MusicCue_C_GetShouldComponentFadeIn::CallFunc_Array_Find_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_MusicCue_C_GetShouldComponentFadeIn, CallFunc_NotEqual_IntInt_ReturnValue) == 0x00002C, "Member 'BP_MusicCue_C_GetShouldComponentFadeIn::CallFunc_NotEqual_IntInt_ReturnValue' has a wrong offset!");

// Function BP_MusicCue.BP_MusicCue_C.CreateMusicLayerObjects
// 0x00A0 (0x00A0 - 0x0000)
struct BP_MusicCue_C_CreateMusicLayerObjects final
{
public:
	float                                         Temp_float_Variable;                               // 0x0000(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Temp_float_Variable_1;                             // 0x0004(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Temp_float_Variable_2;                             // 0x0008(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Temp_float_Variable_3;                             // 0x000C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Array_Index_Variable;                     // 0x0010(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Loop_Counter_Variable;                    // 0x0014(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue;                   // 0x0018(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Temp_float_Variable_4;                             // 0x001C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ENUM_IntensityThresholds                      Temp_byte_Variable;                                // 0x0020(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_21[0x7];                                       // 0x0021(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class FName>                           CallFunc_GetDataTableRowNames_OutRowNames;         // 0x0028(0x0010)(ReferenceParm)
	class FName                                   CallFunc_Array_Get_Item;                           // 0x0038(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FSTRUCT_MusicCue_Layer                 CallFunc_GetDataTableRowFromName_OutRow;           // 0x0040(0x0038)(HasGetValueTypeHash)
	bool                                          CallFunc_GetDataTableRowFromName_ReturnValue;      // 0x0078(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_79[0x3];                                       // 0x0079(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Array_Length_ReturnValue;                 // 0x007C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue;                  // 0x0080(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_81[0x3];                                       // 0x0081(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         K2Node_Select_Default;                             // 0x0084(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UBP_MusicLayer_C*                       CallFunc_SpawnObject_ReturnValue;                  // 0x0088(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UBP_MusicLayer_C*                       CallFunc_InitializeLayer_Layer;                    // 0x0090(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Add_ReturnValue;                    // 0x0098(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_MusicCue_C_CreateMusicLayerObjects) == 0x000008, "Wrong alignment on BP_MusicCue_C_CreateMusicLayerObjects");
static_assert(sizeof(BP_MusicCue_C_CreateMusicLayerObjects) == 0x0000A0, "Wrong size on BP_MusicCue_C_CreateMusicLayerObjects");
static_assert(offsetof(BP_MusicCue_C_CreateMusicLayerObjects, Temp_float_Variable) == 0x000000, "Member 'BP_MusicCue_C_CreateMusicLayerObjects::Temp_float_Variable' has a wrong offset!");
static_assert(offsetof(BP_MusicCue_C_CreateMusicLayerObjects, Temp_float_Variable_1) == 0x000004, "Member 'BP_MusicCue_C_CreateMusicLayerObjects::Temp_float_Variable_1' has a wrong offset!");
static_assert(offsetof(BP_MusicCue_C_CreateMusicLayerObjects, Temp_float_Variable_2) == 0x000008, "Member 'BP_MusicCue_C_CreateMusicLayerObjects::Temp_float_Variable_2' has a wrong offset!");
static_assert(offsetof(BP_MusicCue_C_CreateMusicLayerObjects, Temp_float_Variable_3) == 0x00000C, "Member 'BP_MusicCue_C_CreateMusicLayerObjects::Temp_float_Variable_3' has a wrong offset!");
static_assert(offsetof(BP_MusicCue_C_CreateMusicLayerObjects, Temp_int_Array_Index_Variable) == 0x000010, "Member 'BP_MusicCue_C_CreateMusicLayerObjects::Temp_int_Array_Index_Variable' has a wrong offset!");
static_assert(offsetof(BP_MusicCue_C_CreateMusicLayerObjects, Temp_int_Loop_Counter_Variable) == 0x000014, "Member 'BP_MusicCue_C_CreateMusicLayerObjects::Temp_int_Loop_Counter_Variable' has a wrong offset!");
static_assert(offsetof(BP_MusicCue_C_CreateMusicLayerObjects, CallFunc_Add_IntInt_ReturnValue) == 0x000018, "Member 'BP_MusicCue_C_CreateMusicLayerObjects::CallFunc_Add_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_MusicCue_C_CreateMusicLayerObjects, Temp_float_Variable_4) == 0x00001C, "Member 'BP_MusicCue_C_CreateMusicLayerObjects::Temp_float_Variable_4' has a wrong offset!");
static_assert(offsetof(BP_MusicCue_C_CreateMusicLayerObjects, Temp_byte_Variable) == 0x000020, "Member 'BP_MusicCue_C_CreateMusicLayerObjects::Temp_byte_Variable' has a wrong offset!");
static_assert(offsetof(BP_MusicCue_C_CreateMusicLayerObjects, CallFunc_GetDataTableRowNames_OutRowNames) == 0x000028, "Member 'BP_MusicCue_C_CreateMusicLayerObjects::CallFunc_GetDataTableRowNames_OutRowNames' has a wrong offset!");
static_assert(offsetof(BP_MusicCue_C_CreateMusicLayerObjects, CallFunc_Array_Get_Item) == 0x000038, "Member 'BP_MusicCue_C_CreateMusicLayerObjects::CallFunc_Array_Get_Item' has a wrong offset!");
static_assert(offsetof(BP_MusicCue_C_CreateMusicLayerObjects, CallFunc_GetDataTableRowFromName_OutRow) == 0x000040, "Member 'BP_MusicCue_C_CreateMusicLayerObjects::CallFunc_GetDataTableRowFromName_OutRow' has a wrong offset!");
static_assert(offsetof(BP_MusicCue_C_CreateMusicLayerObjects, CallFunc_GetDataTableRowFromName_ReturnValue) == 0x000078, "Member 'BP_MusicCue_C_CreateMusicLayerObjects::CallFunc_GetDataTableRowFromName_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_MusicCue_C_CreateMusicLayerObjects, CallFunc_Array_Length_ReturnValue) == 0x00007C, "Member 'BP_MusicCue_C_CreateMusicLayerObjects::CallFunc_Array_Length_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_MusicCue_C_CreateMusicLayerObjects, CallFunc_Less_IntInt_ReturnValue) == 0x000080, "Member 'BP_MusicCue_C_CreateMusicLayerObjects::CallFunc_Less_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_MusicCue_C_CreateMusicLayerObjects, K2Node_Select_Default) == 0x000084, "Member 'BP_MusicCue_C_CreateMusicLayerObjects::K2Node_Select_Default' has a wrong offset!");
static_assert(offsetof(BP_MusicCue_C_CreateMusicLayerObjects, CallFunc_SpawnObject_ReturnValue) == 0x000088, "Member 'BP_MusicCue_C_CreateMusicLayerObjects::CallFunc_SpawnObject_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_MusicCue_C_CreateMusicLayerObjects, CallFunc_InitializeLayer_Layer) == 0x000090, "Member 'BP_MusicCue_C_CreateMusicLayerObjects::CallFunc_InitializeLayer_Layer' has a wrong offset!");
static_assert(offsetof(BP_MusicCue_C_CreateMusicLayerObjects, CallFunc_Array_Add_ReturnValue) == 0x000098, "Member 'BP_MusicCue_C_CreateMusicLayerObjects::CallFunc_Array_Add_ReturnValue' has a wrong offset!");

// Function BP_MusicCue.BP_MusicCue_C.GetMusicLayerByName
// 0x0030 (0x0030 - 0x0000)
struct BP_MusicCue_C_GetMusicLayerByName final
{
public:
	class FName                                   Name_0;                                            // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UBP_MusicLayer_C*                       Layer;                                             // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Array_Index_Variable;                     // 0x0010(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Loop_Counter_Variable;                    // 0x0014(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue;                   // 0x0018(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Length_ReturnValue;                 // 0x001C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UBP_MusicLayer_C*                       CallFunc_Array_Get_Item;                           // 0x0020(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue;                  // 0x0028(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_EqualEqual_NameName_ReturnValue;          // 0x0029(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_MusicCue_C_GetMusicLayerByName) == 0x000008, "Wrong alignment on BP_MusicCue_C_GetMusicLayerByName");
static_assert(sizeof(BP_MusicCue_C_GetMusicLayerByName) == 0x000030, "Wrong size on BP_MusicCue_C_GetMusicLayerByName");
static_assert(offsetof(BP_MusicCue_C_GetMusicLayerByName, Name_0) == 0x000000, "Member 'BP_MusicCue_C_GetMusicLayerByName::Name_0' has a wrong offset!");
static_assert(offsetof(BP_MusicCue_C_GetMusicLayerByName, Layer) == 0x000008, "Member 'BP_MusicCue_C_GetMusicLayerByName::Layer' has a wrong offset!");
static_assert(offsetof(BP_MusicCue_C_GetMusicLayerByName, Temp_int_Array_Index_Variable) == 0x000010, "Member 'BP_MusicCue_C_GetMusicLayerByName::Temp_int_Array_Index_Variable' has a wrong offset!");
static_assert(offsetof(BP_MusicCue_C_GetMusicLayerByName, Temp_int_Loop_Counter_Variable) == 0x000014, "Member 'BP_MusicCue_C_GetMusicLayerByName::Temp_int_Loop_Counter_Variable' has a wrong offset!");
static_assert(offsetof(BP_MusicCue_C_GetMusicLayerByName, CallFunc_Add_IntInt_ReturnValue) == 0x000018, "Member 'BP_MusicCue_C_GetMusicLayerByName::CallFunc_Add_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_MusicCue_C_GetMusicLayerByName, CallFunc_Array_Length_ReturnValue) == 0x00001C, "Member 'BP_MusicCue_C_GetMusicLayerByName::CallFunc_Array_Length_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_MusicCue_C_GetMusicLayerByName, CallFunc_Array_Get_Item) == 0x000020, "Member 'BP_MusicCue_C_GetMusicLayerByName::CallFunc_Array_Get_Item' has a wrong offset!");
static_assert(offsetof(BP_MusicCue_C_GetMusicLayerByName, CallFunc_Less_IntInt_ReturnValue) == 0x000028, "Member 'BP_MusicCue_C_GetMusicLayerByName::CallFunc_Less_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_MusicCue_C_GetMusicLayerByName, CallFunc_EqualEqual_NameName_ReturnValue) == 0x000029, "Member 'BP_MusicCue_C_GetMusicLayerByName::CallFunc_EqualEqual_NameName_ReturnValue' has a wrong offset!");

// Function BP_MusicCue.BP_MusicCue_C.GetLayerOfAudioComponent
// 0x0038 (0x0038 - 0x0000)
struct BP_MusicCue_C_GetLayerOfAudioComponent final
{
public:
	class UAudioComponent*                        Audio;                                             // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ZeroConstructor, InstancedReference, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UBP_MusicLayer_C*                       Layer;                                             // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Array_Index_Variable;                     // 0x0010(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Length_ReturnValue;                 // 0x0014(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FName                                   CallFunc_Array_Get_Item;                           // 0x0018(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UBP_MusicLayer_C*                       CallFunc_GetMusicLayerByName_Layer;                // 0x0020(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0028(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_29[0x3];                                       // 0x0029(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Temp_int_Loop_Counter_Variable;                    // 0x002C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue;                  // 0x0030(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_31[0x3];                                       // 0x0031(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Add_IntInt_ReturnValue;                   // 0x0034(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_MusicCue_C_GetLayerOfAudioComponent) == 0x000008, "Wrong alignment on BP_MusicCue_C_GetLayerOfAudioComponent");
static_assert(sizeof(BP_MusicCue_C_GetLayerOfAudioComponent) == 0x000038, "Wrong size on BP_MusicCue_C_GetLayerOfAudioComponent");
static_assert(offsetof(BP_MusicCue_C_GetLayerOfAudioComponent, Audio) == 0x000000, "Member 'BP_MusicCue_C_GetLayerOfAudioComponent::Audio' has a wrong offset!");
static_assert(offsetof(BP_MusicCue_C_GetLayerOfAudioComponent, Layer) == 0x000008, "Member 'BP_MusicCue_C_GetLayerOfAudioComponent::Layer' has a wrong offset!");
static_assert(offsetof(BP_MusicCue_C_GetLayerOfAudioComponent, Temp_int_Array_Index_Variable) == 0x000010, "Member 'BP_MusicCue_C_GetLayerOfAudioComponent::Temp_int_Array_Index_Variable' has a wrong offset!");
static_assert(offsetof(BP_MusicCue_C_GetLayerOfAudioComponent, CallFunc_Array_Length_ReturnValue) == 0x000014, "Member 'BP_MusicCue_C_GetLayerOfAudioComponent::CallFunc_Array_Length_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_MusicCue_C_GetLayerOfAudioComponent, CallFunc_Array_Get_Item) == 0x000018, "Member 'BP_MusicCue_C_GetLayerOfAudioComponent::CallFunc_Array_Get_Item' has a wrong offset!");
static_assert(offsetof(BP_MusicCue_C_GetLayerOfAudioComponent, CallFunc_GetMusicLayerByName_Layer) == 0x000020, "Member 'BP_MusicCue_C_GetLayerOfAudioComponent::CallFunc_GetMusicLayerByName_Layer' has a wrong offset!");
static_assert(offsetof(BP_MusicCue_C_GetLayerOfAudioComponent, CallFunc_IsValid_ReturnValue) == 0x000028, "Member 'BP_MusicCue_C_GetLayerOfAudioComponent::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_MusicCue_C_GetLayerOfAudioComponent, Temp_int_Loop_Counter_Variable) == 0x00002C, "Member 'BP_MusicCue_C_GetLayerOfAudioComponent::Temp_int_Loop_Counter_Variable' has a wrong offset!");
static_assert(offsetof(BP_MusicCue_C_GetLayerOfAudioComponent, CallFunc_Less_IntInt_ReturnValue) == 0x000030, "Member 'BP_MusicCue_C_GetLayerOfAudioComponent::CallFunc_Less_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_MusicCue_C_GetLayerOfAudioComponent, CallFunc_Add_IntInt_ReturnValue) == 0x000034, "Member 'BP_MusicCue_C_GetLayerOfAudioComponent::CallFunc_Add_IntInt_ReturnValue' has a wrong offset!");

// Function BP_MusicCue.BP_MusicCue_C.PrintCurrentAudioComponents
// 0x0020 (0x0020 - 0x0000)
struct BP_MusicCue_C_PrintCurrentAudioComponents final
{
public:
	int32                                         Temp_int_Array_Index_Variable;                     // 0x0000(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Loop_Counter_Variable;                    // 0x0004(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue;                   // 0x0008(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Length_ReturnValue;                 // 0x000C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UBP_MusicLayer_C*                       CallFunc_Array_Get_Item;                           // 0x0010(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue;                  // 0x0018(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_MusicCue_C_PrintCurrentAudioComponents) == 0x000008, "Wrong alignment on BP_MusicCue_C_PrintCurrentAudioComponents");
static_assert(sizeof(BP_MusicCue_C_PrintCurrentAudioComponents) == 0x000020, "Wrong size on BP_MusicCue_C_PrintCurrentAudioComponents");
static_assert(offsetof(BP_MusicCue_C_PrintCurrentAudioComponents, Temp_int_Array_Index_Variable) == 0x000000, "Member 'BP_MusicCue_C_PrintCurrentAudioComponents::Temp_int_Array_Index_Variable' has a wrong offset!");
static_assert(offsetof(BP_MusicCue_C_PrintCurrentAudioComponents, Temp_int_Loop_Counter_Variable) == 0x000004, "Member 'BP_MusicCue_C_PrintCurrentAudioComponents::Temp_int_Loop_Counter_Variable' has a wrong offset!");
static_assert(offsetof(BP_MusicCue_C_PrintCurrentAudioComponents, CallFunc_Add_IntInt_ReturnValue) == 0x000008, "Member 'BP_MusicCue_C_PrintCurrentAudioComponents::CallFunc_Add_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_MusicCue_C_PrintCurrentAudioComponents, CallFunc_Array_Length_ReturnValue) == 0x00000C, "Member 'BP_MusicCue_C_PrintCurrentAudioComponents::CallFunc_Array_Length_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_MusicCue_C_PrintCurrentAudioComponents, CallFunc_Array_Get_Item) == 0x000010, "Member 'BP_MusicCue_C_PrintCurrentAudioComponents::CallFunc_Array_Get_Item' has a wrong offset!");
static_assert(offsetof(BP_MusicCue_C_PrintCurrentAudioComponents, CallFunc_Less_IntInt_ReturnValue) == 0x000018, "Member 'BP_MusicCue_C_PrintCurrentAudioComponents::CallFunc_Less_IntInt_ReturnValue' has a wrong offset!");

// Function BP_MusicCue.BP_MusicCue_C.ValidateSegmentVirtualizationType
// 0x00D0 (0x00D0 - 0x0000)
struct BP_MusicCue_C_ValidateSegmentVirtualizationType final
{
public:
	class FString                                 SegmentName;                                       // 0x0000(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash)
	class FString                                 SelfName;                                          // 0x0010(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash)
	int32                                         Temp_int_Array_Index_Variable;                     // 0x0020(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Loop_Counter_Variable;                    // 0x0024(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue;                   // 0x0028(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Array_Index_Variable_1;                   // 0x002C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Loop_Counter_Variable_1;                  // 0x0030(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue_1;                 // 0x0034(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UBP_MusicLayer_C*                       CallFunc_Array_Get_Item;                           // 0x0038(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FString                                 CallFunc_Concat_StrStr_ReturnValue;                // 0x0040(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	class FString                                 CallFunc_Concat_StrStr_ReturnValue_1;              // 0x0050(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	class USoundWave*                             CallFunc_Array_Get_Item_1;                         // 0x0060(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Length_ReturnValue;                 // 0x0068(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue;                  // 0x006C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_NotEqual_ByteByte_ReturnValue;            // 0x006D(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_6E[0x2];                                       // 0x006E(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 CallFunc_GetDisplayName_ReturnValue;               // 0x0070(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0080(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_81[0x3];                                       // 0x0081(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Array_Length_ReturnValue_1;               // 0x0084(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue_1;                // 0x0088(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_89[0x7];                                       // 0x0089(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 CallFunc_GetDisplayName_ReturnValue_1;             // 0x0090(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsPackagedForDistribution_ReturnValue;    // 0x00A0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_A1[0x7];                                       // 0x00A1(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 CallFunc_Concat_StrStr_ReturnValue_2;              // 0x00A8(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	bool                                          CallFunc_Not_PreBool_ReturnValue;                  // 0x00B8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_B9[0x7];                                       // 0x00B9(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 CallFunc_Concat_StrStr_ReturnValue_3;              // 0x00C0(0x0010)(ZeroConstructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_MusicCue_C_ValidateSegmentVirtualizationType) == 0x000008, "Wrong alignment on BP_MusicCue_C_ValidateSegmentVirtualizationType");
static_assert(sizeof(BP_MusicCue_C_ValidateSegmentVirtualizationType) == 0x0000D0, "Wrong size on BP_MusicCue_C_ValidateSegmentVirtualizationType");
static_assert(offsetof(BP_MusicCue_C_ValidateSegmentVirtualizationType, SegmentName) == 0x000000, "Member 'BP_MusicCue_C_ValidateSegmentVirtualizationType::SegmentName' has a wrong offset!");
static_assert(offsetof(BP_MusicCue_C_ValidateSegmentVirtualizationType, SelfName) == 0x000010, "Member 'BP_MusicCue_C_ValidateSegmentVirtualizationType::SelfName' has a wrong offset!");
static_assert(offsetof(BP_MusicCue_C_ValidateSegmentVirtualizationType, Temp_int_Array_Index_Variable) == 0x000020, "Member 'BP_MusicCue_C_ValidateSegmentVirtualizationType::Temp_int_Array_Index_Variable' has a wrong offset!");
static_assert(offsetof(BP_MusicCue_C_ValidateSegmentVirtualizationType, Temp_int_Loop_Counter_Variable) == 0x000024, "Member 'BP_MusicCue_C_ValidateSegmentVirtualizationType::Temp_int_Loop_Counter_Variable' has a wrong offset!");
static_assert(offsetof(BP_MusicCue_C_ValidateSegmentVirtualizationType, CallFunc_Add_IntInt_ReturnValue) == 0x000028, "Member 'BP_MusicCue_C_ValidateSegmentVirtualizationType::CallFunc_Add_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_MusicCue_C_ValidateSegmentVirtualizationType, Temp_int_Array_Index_Variable_1) == 0x00002C, "Member 'BP_MusicCue_C_ValidateSegmentVirtualizationType::Temp_int_Array_Index_Variable_1' has a wrong offset!");
static_assert(offsetof(BP_MusicCue_C_ValidateSegmentVirtualizationType, Temp_int_Loop_Counter_Variable_1) == 0x000030, "Member 'BP_MusicCue_C_ValidateSegmentVirtualizationType::Temp_int_Loop_Counter_Variable_1' has a wrong offset!");
static_assert(offsetof(BP_MusicCue_C_ValidateSegmentVirtualizationType, CallFunc_Add_IntInt_ReturnValue_1) == 0x000034, "Member 'BP_MusicCue_C_ValidateSegmentVirtualizationType::CallFunc_Add_IntInt_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_MusicCue_C_ValidateSegmentVirtualizationType, CallFunc_Array_Get_Item) == 0x000038, "Member 'BP_MusicCue_C_ValidateSegmentVirtualizationType::CallFunc_Array_Get_Item' has a wrong offset!");
static_assert(offsetof(BP_MusicCue_C_ValidateSegmentVirtualizationType, CallFunc_Concat_StrStr_ReturnValue) == 0x000040, "Member 'BP_MusicCue_C_ValidateSegmentVirtualizationType::CallFunc_Concat_StrStr_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_MusicCue_C_ValidateSegmentVirtualizationType, CallFunc_Concat_StrStr_ReturnValue_1) == 0x000050, "Member 'BP_MusicCue_C_ValidateSegmentVirtualizationType::CallFunc_Concat_StrStr_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_MusicCue_C_ValidateSegmentVirtualizationType, CallFunc_Array_Get_Item_1) == 0x000060, "Member 'BP_MusicCue_C_ValidateSegmentVirtualizationType::CallFunc_Array_Get_Item_1' has a wrong offset!");
static_assert(offsetof(BP_MusicCue_C_ValidateSegmentVirtualizationType, CallFunc_Array_Length_ReturnValue) == 0x000068, "Member 'BP_MusicCue_C_ValidateSegmentVirtualizationType::CallFunc_Array_Length_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_MusicCue_C_ValidateSegmentVirtualizationType, CallFunc_Less_IntInt_ReturnValue) == 0x00006C, "Member 'BP_MusicCue_C_ValidateSegmentVirtualizationType::CallFunc_Less_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_MusicCue_C_ValidateSegmentVirtualizationType, CallFunc_NotEqual_ByteByte_ReturnValue) == 0x00006D, "Member 'BP_MusicCue_C_ValidateSegmentVirtualizationType::CallFunc_NotEqual_ByteByte_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_MusicCue_C_ValidateSegmentVirtualizationType, CallFunc_GetDisplayName_ReturnValue) == 0x000070, "Member 'BP_MusicCue_C_ValidateSegmentVirtualizationType::CallFunc_GetDisplayName_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_MusicCue_C_ValidateSegmentVirtualizationType, CallFunc_IsValid_ReturnValue) == 0x000080, "Member 'BP_MusicCue_C_ValidateSegmentVirtualizationType::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_MusicCue_C_ValidateSegmentVirtualizationType, CallFunc_Array_Length_ReturnValue_1) == 0x000084, "Member 'BP_MusicCue_C_ValidateSegmentVirtualizationType::CallFunc_Array_Length_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_MusicCue_C_ValidateSegmentVirtualizationType, CallFunc_Less_IntInt_ReturnValue_1) == 0x000088, "Member 'BP_MusicCue_C_ValidateSegmentVirtualizationType::CallFunc_Less_IntInt_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_MusicCue_C_ValidateSegmentVirtualizationType, CallFunc_GetDisplayName_ReturnValue_1) == 0x000090, "Member 'BP_MusicCue_C_ValidateSegmentVirtualizationType::CallFunc_GetDisplayName_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_MusicCue_C_ValidateSegmentVirtualizationType, CallFunc_IsPackagedForDistribution_ReturnValue) == 0x0000A0, "Member 'BP_MusicCue_C_ValidateSegmentVirtualizationType::CallFunc_IsPackagedForDistribution_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_MusicCue_C_ValidateSegmentVirtualizationType, CallFunc_Concat_StrStr_ReturnValue_2) == 0x0000A8, "Member 'BP_MusicCue_C_ValidateSegmentVirtualizationType::CallFunc_Concat_StrStr_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(BP_MusicCue_C_ValidateSegmentVirtualizationType, CallFunc_Not_PreBool_ReturnValue) == 0x0000B8, "Member 'BP_MusicCue_C_ValidateSegmentVirtualizationType::CallFunc_Not_PreBool_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_MusicCue_C_ValidateSegmentVirtualizationType, CallFunc_Concat_StrStr_ReturnValue_3) == 0x0000C0, "Member 'BP_MusicCue_C_ValidateSegmentVirtualizationType::CallFunc_Concat_StrStr_ReturnValue_3' has a wrong offset!");

// Function BP_MusicCue.BP_MusicCue_C.ValidatedUniqueLayerNames
// 0x0090 (0x0090 - 0x0000)
struct BP_MusicCue_C_ValidatedUniqueLayerNames final
{
public:
	class FName                                   CurrentIndexName;                                  // 0x0000(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         J;                                                 // 0x0008(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         I;                                                 // 0x000C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Variable;                                 // 0x0010(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue;                   // 0x0014(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsPackagedForDistribution_ReturnValue;    // 0x0018(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Not_PreBool_ReturnValue;                  // 0x0019(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_1A[0x6];                                       // 0x001A(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class UBP_MusicLayer_C*                       CallFunc_Array_Get_Item;                           // 0x0020(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Length_ReturnValue;                 // 0x0028(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Subtract_IntInt_ReturnValue;              // 0x002C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UBP_MusicLayer_C*                       CallFunc_Array_Get_Item_1;                         // 0x0030(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Length_ReturnValue_1;               // 0x0038(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Subtract_IntInt_ReturnValue_1;            // 0x003C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_LessEqual_IntInt_ReturnValue;             // 0x0040(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_41[0x7];                                       // 0x0041(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 CallFunc_GetDisplayName_ReturnValue;               // 0x0048(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	class FString                                 CallFunc_Concat_StrStr_ReturnValue;                // 0x0058(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_NameName_ReturnValue;          // 0x0068(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_69[0x7];                                       // 0x0069(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 CallFunc_Concat_StrStr_ReturnValue_1;              // 0x0070(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	int32                                         Temp_int_Variable_1;                               // 0x0080(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_NotEqual_IntInt_ReturnValue;              // 0x0084(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BooleanAND_ReturnValue;                   // 0x0085(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_LessEqual_IntInt_ReturnValue_1;           // 0x0086(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_87[0x1];                                       // 0x0087(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Add_IntInt_ReturnValue_1;                 // 0x0088(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_MusicCue_C_ValidatedUniqueLayerNames) == 0x000008, "Wrong alignment on BP_MusicCue_C_ValidatedUniqueLayerNames");
static_assert(sizeof(BP_MusicCue_C_ValidatedUniqueLayerNames) == 0x000090, "Wrong size on BP_MusicCue_C_ValidatedUniqueLayerNames");
static_assert(offsetof(BP_MusicCue_C_ValidatedUniqueLayerNames, CurrentIndexName) == 0x000000, "Member 'BP_MusicCue_C_ValidatedUniqueLayerNames::CurrentIndexName' has a wrong offset!");
static_assert(offsetof(BP_MusicCue_C_ValidatedUniqueLayerNames, J) == 0x000008, "Member 'BP_MusicCue_C_ValidatedUniqueLayerNames::J' has a wrong offset!");
static_assert(offsetof(BP_MusicCue_C_ValidatedUniqueLayerNames, I) == 0x00000C, "Member 'BP_MusicCue_C_ValidatedUniqueLayerNames::I' has a wrong offset!");
static_assert(offsetof(BP_MusicCue_C_ValidatedUniqueLayerNames, Temp_int_Variable) == 0x000010, "Member 'BP_MusicCue_C_ValidatedUniqueLayerNames::Temp_int_Variable' has a wrong offset!");
static_assert(offsetof(BP_MusicCue_C_ValidatedUniqueLayerNames, CallFunc_Add_IntInt_ReturnValue) == 0x000014, "Member 'BP_MusicCue_C_ValidatedUniqueLayerNames::CallFunc_Add_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_MusicCue_C_ValidatedUniqueLayerNames, CallFunc_IsPackagedForDistribution_ReturnValue) == 0x000018, "Member 'BP_MusicCue_C_ValidatedUniqueLayerNames::CallFunc_IsPackagedForDistribution_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_MusicCue_C_ValidatedUniqueLayerNames, CallFunc_Not_PreBool_ReturnValue) == 0x000019, "Member 'BP_MusicCue_C_ValidatedUniqueLayerNames::CallFunc_Not_PreBool_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_MusicCue_C_ValidatedUniqueLayerNames, CallFunc_Array_Get_Item) == 0x000020, "Member 'BP_MusicCue_C_ValidatedUniqueLayerNames::CallFunc_Array_Get_Item' has a wrong offset!");
static_assert(offsetof(BP_MusicCue_C_ValidatedUniqueLayerNames, CallFunc_Array_Length_ReturnValue) == 0x000028, "Member 'BP_MusicCue_C_ValidatedUniqueLayerNames::CallFunc_Array_Length_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_MusicCue_C_ValidatedUniqueLayerNames, CallFunc_Subtract_IntInt_ReturnValue) == 0x00002C, "Member 'BP_MusicCue_C_ValidatedUniqueLayerNames::CallFunc_Subtract_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_MusicCue_C_ValidatedUniqueLayerNames, CallFunc_Array_Get_Item_1) == 0x000030, "Member 'BP_MusicCue_C_ValidatedUniqueLayerNames::CallFunc_Array_Get_Item_1' has a wrong offset!");
static_assert(offsetof(BP_MusicCue_C_ValidatedUniqueLayerNames, CallFunc_Array_Length_ReturnValue_1) == 0x000038, "Member 'BP_MusicCue_C_ValidatedUniqueLayerNames::CallFunc_Array_Length_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_MusicCue_C_ValidatedUniqueLayerNames, CallFunc_Subtract_IntInt_ReturnValue_1) == 0x00003C, "Member 'BP_MusicCue_C_ValidatedUniqueLayerNames::CallFunc_Subtract_IntInt_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_MusicCue_C_ValidatedUniqueLayerNames, CallFunc_LessEqual_IntInt_ReturnValue) == 0x000040, "Member 'BP_MusicCue_C_ValidatedUniqueLayerNames::CallFunc_LessEqual_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_MusicCue_C_ValidatedUniqueLayerNames, CallFunc_GetDisplayName_ReturnValue) == 0x000048, "Member 'BP_MusicCue_C_ValidatedUniqueLayerNames::CallFunc_GetDisplayName_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_MusicCue_C_ValidatedUniqueLayerNames, CallFunc_Concat_StrStr_ReturnValue) == 0x000058, "Member 'BP_MusicCue_C_ValidatedUniqueLayerNames::CallFunc_Concat_StrStr_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_MusicCue_C_ValidatedUniqueLayerNames, CallFunc_EqualEqual_NameName_ReturnValue) == 0x000068, "Member 'BP_MusicCue_C_ValidatedUniqueLayerNames::CallFunc_EqualEqual_NameName_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_MusicCue_C_ValidatedUniqueLayerNames, CallFunc_Concat_StrStr_ReturnValue_1) == 0x000070, "Member 'BP_MusicCue_C_ValidatedUniqueLayerNames::CallFunc_Concat_StrStr_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_MusicCue_C_ValidatedUniqueLayerNames, Temp_int_Variable_1) == 0x000080, "Member 'BP_MusicCue_C_ValidatedUniqueLayerNames::Temp_int_Variable_1' has a wrong offset!");
static_assert(offsetof(BP_MusicCue_C_ValidatedUniqueLayerNames, CallFunc_NotEqual_IntInt_ReturnValue) == 0x000084, "Member 'BP_MusicCue_C_ValidatedUniqueLayerNames::CallFunc_NotEqual_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_MusicCue_C_ValidatedUniqueLayerNames, CallFunc_BooleanAND_ReturnValue) == 0x000085, "Member 'BP_MusicCue_C_ValidatedUniqueLayerNames::CallFunc_BooleanAND_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_MusicCue_C_ValidatedUniqueLayerNames, CallFunc_LessEqual_IntInt_ReturnValue_1) == 0x000086, "Member 'BP_MusicCue_C_ValidatedUniqueLayerNames::CallFunc_LessEqual_IntInt_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_MusicCue_C_ValidatedUniqueLayerNames, CallFunc_Add_IntInt_ReturnValue_1) == 0x000088, "Member 'BP_MusicCue_C_ValidatedUniqueLayerNames::CallFunc_Add_IntInt_ReturnValue_1' has a wrong offset!");

// Function BP_MusicCue.BP_MusicCue_C.PrintFadeBypassedNames
// 0x0030 (0x0030 - 0x0000)
struct BP_MusicCue_C_PrintFadeBypassedNames final
{
public:
	int32                                         Temp_int_Array_Index_Variable;                     // 0x0000(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Loop_Counter_Variable;                    // 0x0004(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue;                   // 0x0008(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Length_ReturnValue;                 // 0x000C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FName                                   CallFunc_Array_Get_Item;                           // 0x0010(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue;                  // 0x0018(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_19[0x7];                                       // 0x0019(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 CallFunc_Conv_NameToString_ReturnValue;            // 0x0020(0x0010)(ZeroConstructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_MusicCue_C_PrintFadeBypassedNames) == 0x000008, "Wrong alignment on BP_MusicCue_C_PrintFadeBypassedNames");
static_assert(sizeof(BP_MusicCue_C_PrintFadeBypassedNames) == 0x000030, "Wrong size on BP_MusicCue_C_PrintFadeBypassedNames");
static_assert(offsetof(BP_MusicCue_C_PrintFadeBypassedNames, Temp_int_Array_Index_Variable) == 0x000000, "Member 'BP_MusicCue_C_PrintFadeBypassedNames::Temp_int_Array_Index_Variable' has a wrong offset!");
static_assert(offsetof(BP_MusicCue_C_PrintFadeBypassedNames, Temp_int_Loop_Counter_Variable) == 0x000004, "Member 'BP_MusicCue_C_PrintFadeBypassedNames::Temp_int_Loop_Counter_Variable' has a wrong offset!");
static_assert(offsetof(BP_MusicCue_C_PrintFadeBypassedNames, CallFunc_Add_IntInt_ReturnValue) == 0x000008, "Member 'BP_MusicCue_C_PrintFadeBypassedNames::CallFunc_Add_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_MusicCue_C_PrintFadeBypassedNames, CallFunc_Array_Length_ReturnValue) == 0x00000C, "Member 'BP_MusicCue_C_PrintFadeBypassedNames::CallFunc_Array_Length_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_MusicCue_C_PrintFadeBypassedNames, CallFunc_Array_Get_Item) == 0x000010, "Member 'BP_MusicCue_C_PrintFadeBypassedNames::CallFunc_Array_Get_Item' has a wrong offset!");
static_assert(offsetof(BP_MusicCue_C_PrintFadeBypassedNames, CallFunc_Less_IntInt_ReturnValue) == 0x000018, "Member 'BP_MusicCue_C_PrintFadeBypassedNames::CallFunc_Less_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_MusicCue_C_PrintFadeBypassedNames, CallFunc_Conv_NameToString_ReturnValue) == 0x000020, "Member 'BP_MusicCue_C_PrintFadeBypassedNames::CallFunc_Conv_NameToString_ReturnValue' has a wrong offset!");

// Function BP_MusicCue.BP_MusicCue_C.InitializeMusicCue
// 0x0014 (0x0014 - 0x0000)
struct BP_MusicCue_C_InitializeMusicCue final
{
public:
	float                                         ExploreIntensity;                                  // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Conv_IntToFloat_ReturnValue;              // 0x0004(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Multiply_FloatFloat_ReturnValue;          // 0x0008(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Divide_FloatFloat_ReturnValue;            // 0x000C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Round_ReturnValue;                        // 0x0010(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_MusicCue_C_InitializeMusicCue) == 0x000004, "Wrong alignment on BP_MusicCue_C_InitializeMusicCue");
static_assert(sizeof(BP_MusicCue_C_InitializeMusicCue) == 0x000014, "Wrong size on BP_MusicCue_C_InitializeMusicCue");
static_assert(offsetof(BP_MusicCue_C_InitializeMusicCue, ExploreIntensity) == 0x000000, "Member 'BP_MusicCue_C_InitializeMusicCue::ExploreIntensity' has a wrong offset!");
static_assert(offsetof(BP_MusicCue_C_InitializeMusicCue, CallFunc_Conv_IntToFloat_ReturnValue) == 0x000004, "Member 'BP_MusicCue_C_InitializeMusicCue::CallFunc_Conv_IntToFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_MusicCue_C_InitializeMusicCue, CallFunc_Multiply_FloatFloat_ReturnValue) == 0x000008, "Member 'BP_MusicCue_C_InitializeMusicCue::CallFunc_Multiply_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_MusicCue_C_InitializeMusicCue, CallFunc_Divide_FloatFloat_ReturnValue) == 0x00000C, "Member 'BP_MusicCue_C_InitializeMusicCue::CallFunc_Divide_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_MusicCue_C_InitializeMusicCue, CallFunc_Round_ReturnValue) == 0x000010, "Member 'BP_MusicCue_C_InitializeMusicCue::CallFunc_Round_ReturnValue' has a wrong offset!");

// Function BP_MusicCue.BP_MusicCue_C.InitClock
// 0x00C0 (0x00C0 - 0x0000)
struct BP_MusicCue_C_InitClock final
{
public:
	struct FQuartzQuantizationBoundary            Temp_struct_Variable;                              // 0x0000(0x000C)(ConstParm, NoDestructor)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UQuartzSubsystem*                       CallFunc_GetWorldSubsystem_ReturnValue;            // 0x0010(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TDelegate<void(class FName ClockName, EQuartzCommandQuantization QuantizationType, int32 NumBars, int32 Beat, float BeatFraction)> K2Node_CreateDelegate_OutputDelegate;              // 0x0018(0x0010)(ZeroConstructor, NoDestructor)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0028(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Not_PreBool_ReturnValue;                  // 0x0029(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_2A[0x6];                                       // 0x002A(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class UQuartzClockHandle*                     CallFunc_SubscribeToQuantizationEvent_ClockHandle; // 0x0030(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EQuartzTimeSignatureQuantization              CallFunc_GetQuartzBeatType_Quantization;           // 0x0038(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_39[0x7];                                       // 0x0039(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FQuartzTimeSignature                   K2Node_MakeStruct_QuartzTimeSignature;             // 0x0040(0x0018)()
	class FString                                 CallFunc_GetObjectName_ReturnValue;                // 0x0058(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	struct FQuartzClockSettings                   K2Node_MakeStruct_QuartzClockSettings;             // 0x0068(0x0020)()
	class FString                                 CallFunc_Concat_StrStr_ReturnValue;                // 0x0088(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	class UQuartzClockHandle*                     CallFunc_CreateNewClock_ReturnValue;               // 0x0098(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FName                                   CallFunc_Conv_StringToName_ReturnValue;            // 0x00A0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TDelegate<void(EQuartzCommandDelegateSubType EventType, class FName Name)> Temp_delegate_Variable;                            // 0x00A8(0x0010)(ConstParm, ZeroConstructor, NoDestructor)
	class UQuartzClockHandle*                     CallFunc_SetBeatsPerMinute_ClockHandle;            // 0x00B8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_MusicCue_C_InitClock) == 0x000008, "Wrong alignment on BP_MusicCue_C_InitClock");
static_assert(sizeof(BP_MusicCue_C_InitClock) == 0x0000C0, "Wrong size on BP_MusicCue_C_InitClock");
static_assert(offsetof(BP_MusicCue_C_InitClock, Temp_struct_Variable) == 0x000000, "Member 'BP_MusicCue_C_InitClock::Temp_struct_Variable' has a wrong offset!");
static_assert(offsetof(BP_MusicCue_C_InitClock, CallFunc_GetWorldSubsystem_ReturnValue) == 0x000010, "Member 'BP_MusicCue_C_InitClock::CallFunc_GetWorldSubsystem_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_MusicCue_C_InitClock, K2Node_CreateDelegate_OutputDelegate) == 0x000018, "Member 'BP_MusicCue_C_InitClock::K2Node_CreateDelegate_OutputDelegate' has a wrong offset!");
static_assert(offsetof(BP_MusicCue_C_InitClock, CallFunc_IsValid_ReturnValue) == 0x000028, "Member 'BP_MusicCue_C_InitClock::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_MusicCue_C_InitClock, CallFunc_Not_PreBool_ReturnValue) == 0x000029, "Member 'BP_MusicCue_C_InitClock::CallFunc_Not_PreBool_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_MusicCue_C_InitClock, CallFunc_SubscribeToQuantizationEvent_ClockHandle) == 0x000030, "Member 'BP_MusicCue_C_InitClock::CallFunc_SubscribeToQuantizationEvent_ClockHandle' has a wrong offset!");
static_assert(offsetof(BP_MusicCue_C_InitClock, CallFunc_GetQuartzBeatType_Quantization) == 0x000038, "Member 'BP_MusicCue_C_InitClock::CallFunc_GetQuartzBeatType_Quantization' has a wrong offset!");
static_assert(offsetof(BP_MusicCue_C_InitClock, K2Node_MakeStruct_QuartzTimeSignature) == 0x000040, "Member 'BP_MusicCue_C_InitClock::K2Node_MakeStruct_QuartzTimeSignature' has a wrong offset!");
static_assert(offsetof(BP_MusicCue_C_InitClock, CallFunc_GetObjectName_ReturnValue) == 0x000058, "Member 'BP_MusicCue_C_InitClock::CallFunc_GetObjectName_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_MusicCue_C_InitClock, K2Node_MakeStruct_QuartzClockSettings) == 0x000068, "Member 'BP_MusicCue_C_InitClock::K2Node_MakeStruct_QuartzClockSettings' has a wrong offset!");
static_assert(offsetof(BP_MusicCue_C_InitClock, CallFunc_Concat_StrStr_ReturnValue) == 0x000088, "Member 'BP_MusicCue_C_InitClock::CallFunc_Concat_StrStr_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_MusicCue_C_InitClock, CallFunc_CreateNewClock_ReturnValue) == 0x000098, "Member 'BP_MusicCue_C_InitClock::CallFunc_CreateNewClock_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_MusicCue_C_InitClock, CallFunc_Conv_StringToName_ReturnValue) == 0x0000A0, "Member 'BP_MusicCue_C_InitClock::CallFunc_Conv_StringToName_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_MusicCue_C_InitClock, Temp_delegate_Variable) == 0x0000A8, "Member 'BP_MusicCue_C_InitClock::Temp_delegate_Variable' has a wrong offset!");
static_assert(offsetof(BP_MusicCue_C_InitClock, CallFunc_SetBeatsPerMinute_ClockHandle) == 0x0000B8, "Member 'BP_MusicCue_C_InitClock::CallFunc_SetBeatsPerMinute_ClockHandle' has a wrong offset!");

// Function BP_MusicCue.BP_MusicCue_C.PlayMusic
// 0x0020 (0x0020 - 0x0000)
struct BP_MusicCue_C_PlayMusic final
{
public:
	class UBP_MusicLayer_C*                       CurrentLayer;                                      // 0x0000(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         LayerTimestamp;                                    // 0x0008(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         NextUpdateTimestamp;                               // 0x000C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CurrentTimestamp;                                  // 0x0010(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         LayerID;                                           // 0x0014(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UQuartzClockHandle*                     CallFunc_StartClock_ClockHandle;                   // 0x0018(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_MusicCue_C_PlayMusic) == 0x000008, "Wrong alignment on BP_MusicCue_C_PlayMusic");
static_assert(sizeof(BP_MusicCue_C_PlayMusic) == 0x000020, "Wrong size on BP_MusicCue_C_PlayMusic");
static_assert(offsetof(BP_MusicCue_C_PlayMusic, CurrentLayer) == 0x000000, "Member 'BP_MusicCue_C_PlayMusic::CurrentLayer' has a wrong offset!");
static_assert(offsetof(BP_MusicCue_C_PlayMusic, LayerTimestamp) == 0x000008, "Member 'BP_MusicCue_C_PlayMusic::LayerTimestamp' has a wrong offset!");
static_assert(offsetof(BP_MusicCue_C_PlayMusic, NextUpdateTimestamp) == 0x00000C, "Member 'BP_MusicCue_C_PlayMusic::NextUpdateTimestamp' has a wrong offset!");
static_assert(offsetof(BP_MusicCue_C_PlayMusic, CurrentTimestamp) == 0x000010, "Member 'BP_MusicCue_C_PlayMusic::CurrentTimestamp' has a wrong offset!");
static_assert(offsetof(BP_MusicCue_C_PlayMusic, LayerID) == 0x000014, "Member 'BP_MusicCue_C_PlayMusic::LayerID' has a wrong offset!");
static_assert(offsetof(BP_MusicCue_C_PlayMusic, CallFunc_StartClock_ClockHandle) == 0x000018, "Member 'BP_MusicCue_C_PlayMusic::CallFunc_StartClock_ClockHandle' has a wrong offset!");

// Function BP_MusicCue.BP_MusicCue_C.UpdateMusic
// 0x0008 (0x0008 - 0x0000)
struct BP_MusicCue_C_UpdateMusic final
{
public:
	float                                         DeltaTime;                                         // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_SwitchEnum_CmpSuccess;                      // 0x0004(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_MusicCue_C_UpdateMusic) == 0x000004, "Wrong alignment on BP_MusicCue_C_UpdateMusic");
static_assert(sizeof(BP_MusicCue_C_UpdateMusic) == 0x000008, "Wrong size on BP_MusicCue_C_UpdateMusic");
static_assert(offsetof(BP_MusicCue_C_UpdateMusic, DeltaTime) == 0x000000, "Member 'BP_MusicCue_C_UpdateMusic::DeltaTime' has a wrong offset!");
static_assert(offsetof(BP_MusicCue_C_UpdateMusic, K2Node_SwitchEnum_CmpSuccess) == 0x000004, "Member 'BP_MusicCue_C_UpdateMusic::K2Node_SwitchEnum_CmpSuccess' has a wrong offset!");

// Function BP_MusicCue.BP_MusicCue_C.ForceStopMusic
// 0x0004 (0x0004 - 0x0000)
struct BP_MusicCue_C_ForceStopMusic final
{
public:
	bool                                          CallFunc_NotEqual_ByteByte_ReturnValue;            // 0x0000(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_NotEqual_ByteByte_ReturnValue_1;          // 0x0001(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BooleanAND_ReturnValue;                   // 0x0002(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0003(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_MusicCue_C_ForceStopMusic) == 0x000001, "Wrong alignment on BP_MusicCue_C_ForceStopMusic");
static_assert(sizeof(BP_MusicCue_C_ForceStopMusic) == 0x000004, "Wrong size on BP_MusicCue_C_ForceStopMusic");
static_assert(offsetof(BP_MusicCue_C_ForceStopMusic, CallFunc_NotEqual_ByteByte_ReturnValue) == 0x000000, "Member 'BP_MusicCue_C_ForceStopMusic::CallFunc_NotEqual_ByteByte_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_MusicCue_C_ForceStopMusic, CallFunc_NotEqual_ByteByte_ReturnValue_1) == 0x000001, "Member 'BP_MusicCue_C_ForceStopMusic::CallFunc_NotEqual_ByteByte_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_MusicCue_C_ForceStopMusic, CallFunc_BooleanAND_ReturnValue) == 0x000002, "Member 'BP_MusicCue_C_ForceStopMusic::CallFunc_BooleanAND_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_MusicCue_C_ForceStopMusic, CallFunc_IsValid_ReturnValue) == 0x000003, "Member 'BP_MusicCue_C_ForceStopMusic::CallFunc_IsValid_ReturnValue' has a wrong offset!");

// Function BP_MusicCue.BP_MusicCue_C.StopMusicInternal
// 0x0028 (0x0028 - 0x0000)
struct BP_MusicCue_C_StopMusicInternal final
{
public:
	int32                                         Temp_int_Array_Index_Variable;                     // 0x0000(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Loop_Counter_Variable;                    // 0x0004(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue;                   // 0x0008(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x000C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_D[0x3];                                        // 0x000D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class UQuartzClockHandle*                     CallFunc_StopClock_ClockHandle;                    // 0x0010(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UBP_MusicLayer_C*                       CallFunc_Array_Get_Item;                           // 0x0018(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Length_ReturnValue;                 // 0x0020(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue;                  // 0x0024(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_MusicCue_C_StopMusicInternal) == 0x000008, "Wrong alignment on BP_MusicCue_C_StopMusicInternal");
static_assert(sizeof(BP_MusicCue_C_StopMusicInternal) == 0x000028, "Wrong size on BP_MusicCue_C_StopMusicInternal");
static_assert(offsetof(BP_MusicCue_C_StopMusicInternal, Temp_int_Array_Index_Variable) == 0x000000, "Member 'BP_MusicCue_C_StopMusicInternal::Temp_int_Array_Index_Variable' has a wrong offset!");
static_assert(offsetof(BP_MusicCue_C_StopMusicInternal, Temp_int_Loop_Counter_Variable) == 0x000004, "Member 'BP_MusicCue_C_StopMusicInternal::Temp_int_Loop_Counter_Variable' has a wrong offset!");
static_assert(offsetof(BP_MusicCue_C_StopMusicInternal, CallFunc_Add_IntInt_ReturnValue) == 0x000008, "Member 'BP_MusicCue_C_StopMusicInternal::CallFunc_Add_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_MusicCue_C_StopMusicInternal, CallFunc_IsValid_ReturnValue) == 0x00000C, "Member 'BP_MusicCue_C_StopMusicInternal::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_MusicCue_C_StopMusicInternal, CallFunc_StopClock_ClockHandle) == 0x000010, "Member 'BP_MusicCue_C_StopMusicInternal::CallFunc_StopClock_ClockHandle' has a wrong offset!");
static_assert(offsetof(BP_MusicCue_C_StopMusicInternal, CallFunc_Array_Get_Item) == 0x000018, "Member 'BP_MusicCue_C_StopMusicInternal::CallFunc_Array_Get_Item' has a wrong offset!");
static_assert(offsetof(BP_MusicCue_C_StopMusicInternal, CallFunc_Array_Length_ReturnValue) == 0x000020, "Member 'BP_MusicCue_C_StopMusicInternal::CallFunc_Array_Length_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_MusicCue_C_StopMusicInternal, CallFunc_Less_IntInt_ReturnValue) == 0x000024, "Member 'BP_MusicCue_C_StopMusicInternal::CallFunc_Less_IntInt_ReturnValue' has a wrong offset!");

// Function BP_MusicCue.BP_MusicCue_C.UpdateExplorationIntensity
// 0x0004 (0x0004 - 0x0000)
struct BP_MusicCue_C_UpdateExplorationIntensity final
{
public:
	float                                         Intensity;                                         // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_MusicCue_C_UpdateExplorationIntensity) == 0x000004, "Wrong alignment on BP_MusicCue_C_UpdateExplorationIntensity");
static_assert(sizeof(BP_MusicCue_C_UpdateExplorationIntensity) == 0x000004, "Wrong size on BP_MusicCue_C_UpdateExplorationIntensity");
static_assert(offsetof(BP_MusicCue_C_UpdateExplorationIntensity, Intensity) == 0x000000, "Member 'BP_MusicCue_C_UpdateExplorationIntensity::Intensity' has a wrong offset!");

// Function BP_MusicCue.BP_MusicCue_C.UpdateFadeVolume
// 0x0068 (0x0068 - 0x0000)
struct BP_MusicCue_C_UpdateFadeVolume final
{
public:
	class UCurveFloat*                            FadeCurve;                                         // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UBP_MusicLayer_C*                       CurrentLayer;                                      // 0x0008(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         ElapsedTimeInState;                                // 0x0010(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Array_Index_Variable;                     // 0x0014(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Loop_Counter_Variable;                    // 0x0018(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue;                   // 0x001C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_GetTimeRange_MinTime;                     // 0x0020(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_GetTimeRange_MaxTime;                     // 0x0024(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Subtract_FloatFloat_ReturnValue;          // 0x0028(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Divide_FloatFloat_ReturnValue;            // 0x002C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_GreaterEqual_FloatFloat_ReturnValue;      // 0x0030(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_31[0x3];                                       // 0x0031(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_Ease_ReturnValue;                         // 0x0034(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Greater_FloatFloat_ReturnValue;           // 0x0038(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_GreaterEqual_FloatFloat_ReturnValue_1;    // 0x0039(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_3A[0x2];                                       // 0x003A(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_GetElapsedTimeInCurrentPlayState_Result;  // 0x003C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_ByteByte_ReturnValue;          // 0x0040(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_EqualEqual_ByteByte_ReturnValue_1;        // 0x0041(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_42[0x6];                                       // 0x0042(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class UBP_MusicLayer_C*                       CallFunc_Array_Get_Item;                           // 0x0048(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BooleanAND_ReturnValue;                   // 0x0050(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BooleanOR_ReturnValue;                    // 0x0051(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_52[0x2];                                       // 0x0052(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Array_Length_ReturnValue;                 // 0x0054(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue;                  // 0x0058(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_59[0x3];                                       // 0x0059(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_GetFloatValue_ReturnValue;                // 0x005C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Multiply_FloatFloat_ReturnValue;          // 0x0060(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_MusicCue_C_UpdateFadeVolume) == 0x000008, "Wrong alignment on BP_MusicCue_C_UpdateFadeVolume");
static_assert(sizeof(BP_MusicCue_C_UpdateFadeVolume) == 0x000068, "Wrong size on BP_MusicCue_C_UpdateFadeVolume");
static_assert(offsetof(BP_MusicCue_C_UpdateFadeVolume, FadeCurve) == 0x000000, "Member 'BP_MusicCue_C_UpdateFadeVolume::FadeCurve' has a wrong offset!");
static_assert(offsetof(BP_MusicCue_C_UpdateFadeVolume, CurrentLayer) == 0x000008, "Member 'BP_MusicCue_C_UpdateFadeVolume::CurrentLayer' has a wrong offset!");
static_assert(offsetof(BP_MusicCue_C_UpdateFadeVolume, ElapsedTimeInState) == 0x000010, "Member 'BP_MusicCue_C_UpdateFadeVolume::ElapsedTimeInState' has a wrong offset!");
static_assert(offsetof(BP_MusicCue_C_UpdateFadeVolume, Temp_int_Array_Index_Variable) == 0x000014, "Member 'BP_MusicCue_C_UpdateFadeVolume::Temp_int_Array_Index_Variable' has a wrong offset!");
static_assert(offsetof(BP_MusicCue_C_UpdateFadeVolume, Temp_int_Loop_Counter_Variable) == 0x000018, "Member 'BP_MusicCue_C_UpdateFadeVolume::Temp_int_Loop_Counter_Variable' has a wrong offset!");
static_assert(offsetof(BP_MusicCue_C_UpdateFadeVolume, CallFunc_Add_IntInt_ReturnValue) == 0x00001C, "Member 'BP_MusicCue_C_UpdateFadeVolume::CallFunc_Add_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_MusicCue_C_UpdateFadeVolume, CallFunc_GetTimeRange_MinTime) == 0x000020, "Member 'BP_MusicCue_C_UpdateFadeVolume::CallFunc_GetTimeRange_MinTime' has a wrong offset!");
static_assert(offsetof(BP_MusicCue_C_UpdateFadeVolume, CallFunc_GetTimeRange_MaxTime) == 0x000024, "Member 'BP_MusicCue_C_UpdateFadeVolume::CallFunc_GetTimeRange_MaxTime' has a wrong offset!");
static_assert(offsetof(BP_MusicCue_C_UpdateFadeVolume, CallFunc_Subtract_FloatFloat_ReturnValue) == 0x000028, "Member 'BP_MusicCue_C_UpdateFadeVolume::CallFunc_Subtract_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_MusicCue_C_UpdateFadeVolume, CallFunc_Divide_FloatFloat_ReturnValue) == 0x00002C, "Member 'BP_MusicCue_C_UpdateFadeVolume::CallFunc_Divide_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_MusicCue_C_UpdateFadeVolume, CallFunc_GreaterEqual_FloatFloat_ReturnValue) == 0x000030, "Member 'BP_MusicCue_C_UpdateFadeVolume::CallFunc_GreaterEqual_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_MusicCue_C_UpdateFadeVolume, CallFunc_Ease_ReturnValue) == 0x000034, "Member 'BP_MusicCue_C_UpdateFadeVolume::CallFunc_Ease_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_MusicCue_C_UpdateFadeVolume, CallFunc_Greater_FloatFloat_ReturnValue) == 0x000038, "Member 'BP_MusicCue_C_UpdateFadeVolume::CallFunc_Greater_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_MusicCue_C_UpdateFadeVolume, CallFunc_GreaterEqual_FloatFloat_ReturnValue_1) == 0x000039, "Member 'BP_MusicCue_C_UpdateFadeVolume::CallFunc_GreaterEqual_FloatFloat_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_MusicCue_C_UpdateFadeVolume, CallFunc_GetElapsedTimeInCurrentPlayState_Result) == 0x00003C, "Member 'BP_MusicCue_C_UpdateFadeVolume::CallFunc_GetElapsedTimeInCurrentPlayState_Result' has a wrong offset!");
static_assert(offsetof(BP_MusicCue_C_UpdateFadeVolume, CallFunc_EqualEqual_ByteByte_ReturnValue) == 0x000040, "Member 'BP_MusicCue_C_UpdateFadeVolume::CallFunc_EqualEqual_ByteByte_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_MusicCue_C_UpdateFadeVolume, CallFunc_EqualEqual_ByteByte_ReturnValue_1) == 0x000041, "Member 'BP_MusicCue_C_UpdateFadeVolume::CallFunc_EqualEqual_ByteByte_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_MusicCue_C_UpdateFadeVolume, CallFunc_Array_Get_Item) == 0x000048, "Member 'BP_MusicCue_C_UpdateFadeVolume::CallFunc_Array_Get_Item' has a wrong offset!");
static_assert(offsetof(BP_MusicCue_C_UpdateFadeVolume, CallFunc_BooleanAND_ReturnValue) == 0x000050, "Member 'BP_MusicCue_C_UpdateFadeVolume::CallFunc_BooleanAND_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_MusicCue_C_UpdateFadeVolume, CallFunc_BooleanOR_ReturnValue) == 0x000051, "Member 'BP_MusicCue_C_UpdateFadeVolume::CallFunc_BooleanOR_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_MusicCue_C_UpdateFadeVolume, CallFunc_Array_Length_ReturnValue) == 0x000054, "Member 'BP_MusicCue_C_UpdateFadeVolume::CallFunc_Array_Length_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_MusicCue_C_UpdateFadeVolume, CallFunc_Less_IntInt_ReturnValue) == 0x000058, "Member 'BP_MusicCue_C_UpdateFadeVolume::CallFunc_Less_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_MusicCue_C_UpdateFadeVolume, CallFunc_GetFloatValue_ReturnValue) == 0x00005C, "Member 'BP_MusicCue_C_UpdateFadeVolume::CallFunc_GetFloatValue_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_MusicCue_C_UpdateFadeVolume, CallFunc_Multiply_FloatFloat_ReturnValue) == 0x000060, "Member 'BP_MusicCue_C_UpdateFadeVolume::CallFunc_Multiply_FloatFloat_ReturnValue' has a wrong offset!");

// Function BP_MusicCue.BP_MusicCue_C.OnFadeFinished
// 0x0001 (0x0001 - 0x0000)
struct BP_MusicCue_C_OnFadeFinished final
{
public:
	bool                                          K2Node_SwitchEnum_CmpSuccess;                      // 0x0000(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_MusicCue_C_OnFadeFinished) == 0x000001, "Wrong alignment on BP_MusicCue_C_OnFadeFinished");
static_assert(sizeof(BP_MusicCue_C_OnFadeFinished) == 0x000001, "Wrong size on BP_MusicCue_C_OnFadeFinished");
static_assert(offsetof(BP_MusicCue_C_OnFadeFinished, K2Node_SwitchEnum_CmpSuccess) == 0x000000, "Member 'BP_MusicCue_C_OnFadeFinished::K2Node_SwitchEnum_CmpSuccess' has a wrong offset!");

// Function BP_MusicCue.BP_MusicCue_C.RemoveInactiveAudioComponents
// 0x0020 (0x0020 - 0x0000)
struct BP_MusicCue_C_RemoveInactiveAudioComponents final
{
public:
	int32                                         Temp_int_Array_Index_Variable;                     // 0x0000(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Loop_Counter_Variable;                    // 0x0004(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue;                   // 0x0008(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Length_ReturnValue;                 // 0x000C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UBP_MusicLayer_C*                       CallFunc_Array_Get_Item;                           // 0x0010(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue;                  // 0x0018(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_MusicCue_C_RemoveInactiveAudioComponents) == 0x000008, "Wrong alignment on BP_MusicCue_C_RemoveInactiveAudioComponents");
static_assert(sizeof(BP_MusicCue_C_RemoveInactiveAudioComponents) == 0x000020, "Wrong size on BP_MusicCue_C_RemoveInactiveAudioComponents");
static_assert(offsetof(BP_MusicCue_C_RemoveInactiveAudioComponents, Temp_int_Array_Index_Variable) == 0x000000, "Member 'BP_MusicCue_C_RemoveInactiveAudioComponents::Temp_int_Array_Index_Variable' has a wrong offset!");
static_assert(offsetof(BP_MusicCue_C_RemoveInactiveAudioComponents, Temp_int_Loop_Counter_Variable) == 0x000004, "Member 'BP_MusicCue_C_RemoveInactiveAudioComponents::Temp_int_Loop_Counter_Variable' has a wrong offset!");
static_assert(offsetof(BP_MusicCue_C_RemoveInactiveAudioComponents, CallFunc_Add_IntInt_ReturnValue) == 0x000008, "Member 'BP_MusicCue_C_RemoveInactiveAudioComponents::CallFunc_Add_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_MusicCue_C_RemoveInactiveAudioComponents, CallFunc_Array_Length_ReturnValue) == 0x00000C, "Member 'BP_MusicCue_C_RemoveInactiveAudioComponents::CallFunc_Array_Length_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_MusicCue_C_RemoveInactiveAudioComponents, CallFunc_Array_Get_Item) == 0x000010, "Member 'BP_MusicCue_C_RemoveInactiveAudioComponents::CallFunc_Array_Get_Item' has a wrong offset!");
static_assert(offsetof(BP_MusicCue_C_RemoveInactiveAudioComponents, CallFunc_Less_IntInt_ReturnValue) == 0x000018, "Member 'BP_MusicCue_C_RemoveInactiveAudioComponents::CallFunc_Less_IntInt_ReturnValue' has a wrong offset!");

// Function BP_MusicCue.BP_MusicCue_C.GetQuartzBeatType
// 0x0009 (0x0009 - 0x0000)
struct BP_MusicCue_C_GetQuartzBeatType final
{
public:
	EQuartzTimeSignatureQuantization              Quantization;                                      // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ENUM_BeatType                                 Temp_byte_Variable;                                // 0x0001(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EQuartzTimeSignatureQuantization              Temp_byte_Variable_1;                              // 0x0002(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EQuartzTimeSignatureQuantization              Temp_byte_Variable_2;                              // 0x0003(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EQuartzTimeSignatureQuantization              Temp_byte_Variable_3;                              // 0x0004(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EQuartzTimeSignatureQuantization              Temp_byte_Variable_4;                              // 0x0005(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EQuartzTimeSignatureQuantization              Temp_byte_Variable_5;                              // 0x0006(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_ByteByte_ReturnValue;          // 0x0007(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	EQuartzTimeSignatureQuantization              K2Node_Select_Default;                             // 0x0008(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_MusicCue_C_GetQuartzBeatType) == 0x000001, "Wrong alignment on BP_MusicCue_C_GetQuartzBeatType");
static_assert(sizeof(BP_MusicCue_C_GetQuartzBeatType) == 0x000009, "Wrong size on BP_MusicCue_C_GetQuartzBeatType");
static_assert(offsetof(BP_MusicCue_C_GetQuartzBeatType, Quantization) == 0x000000, "Member 'BP_MusicCue_C_GetQuartzBeatType::Quantization' has a wrong offset!");
static_assert(offsetof(BP_MusicCue_C_GetQuartzBeatType, Temp_byte_Variable) == 0x000001, "Member 'BP_MusicCue_C_GetQuartzBeatType::Temp_byte_Variable' has a wrong offset!");
static_assert(offsetof(BP_MusicCue_C_GetQuartzBeatType, Temp_byte_Variable_1) == 0x000002, "Member 'BP_MusicCue_C_GetQuartzBeatType::Temp_byte_Variable_1' has a wrong offset!");
static_assert(offsetof(BP_MusicCue_C_GetQuartzBeatType, Temp_byte_Variable_2) == 0x000003, "Member 'BP_MusicCue_C_GetQuartzBeatType::Temp_byte_Variable_2' has a wrong offset!");
static_assert(offsetof(BP_MusicCue_C_GetQuartzBeatType, Temp_byte_Variable_3) == 0x000004, "Member 'BP_MusicCue_C_GetQuartzBeatType::Temp_byte_Variable_3' has a wrong offset!");
static_assert(offsetof(BP_MusicCue_C_GetQuartzBeatType, Temp_byte_Variable_4) == 0x000005, "Member 'BP_MusicCue_C_GetQuartzBeatType::Temp_byte_Variable_4' has a wrong offset!");
static_assert(offsetof(BP_MusicCue_C_GetQuartzBeatType, Temp_byte_Variable_5) == 0x000006, "Member 'BP_MusicCue_C_GetQuartzBeatType::Temp_byte_Variable_5' has a wrong offset!");
static_assert(offsetof(BP_MusicCue_C_GetQuartzBeatType, CallFunc_EqualEqual_ByteByte_ReturnValue) == 0x000007, "Member 'BP_MusicCue_C_GetQuartzBeatType::CallFunc_EqualEqual_ByteByte_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_MusicCue_C_GetQuartzBeatType, K2Node_Select_Default) == 0x000008, "Member 'BP_MusicCue_C_GetQuartzBeatType::K2Node_Select_Default' has a wrong offset!");

// Function BP_MusicCue.BP_MusicCue_C.EVENT_OnQuartzBar
// 0x0038 (0x0038 - 0x0000)
struct BP_MusicCue_C_EVENT_OnQuartzBar final
{
public:
	class FName                                   ClockName_0;                                       // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EQuartzCommandQuantization                    QuantizationType;                                  // 0x0008(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         NumBars;                                           // 0x000C(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Beat;                                              // 0x0010(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         BeatFraction;                                      // 0x0014(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UBP_MusicLayer_C*                       MusicLayer;                                        // 0x0018(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_SwitchEnum_CmpSuccess;                      // 0x0020(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_21[0x3];                                       // 0x0021(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_GetFloatValue_ReturnValue;                // 0x0024(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_FMax_ReturnValue;                         // 0x0028(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_GetFloatValue_ReturnValue_1;              // 0x002C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_FMax_ReturnValue_1;                       // 0x0030(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_MusicCue_C_EVENT_OnQuartzBar) == 0x000008, "Wrong alignment on BP_MusicCue_C_EVENT_OnQuartzBar");
static_assert(sizeof(BP_MusicCue_C_EVENT_OnQuartzBar) == 0x000038, "Wrong size on BP_MusicCue_C_EVENT_OnQuartzBar");
static_assert(offsetof(BP_MusicCue_C_EVENT_OnQuartzBar, ClockName_0) == 0x000000, "Member 'BP_MusicCue_C_EVENT_OnQuartzBar::ClockName_0' has a wrong offset!");
static_assert(offsetof(BP_MusicCue_C_EVENT_OnQuartzBar, QuantizationType) == 0x000008, "Member 'BP_MusicCue_C_EVENT_OnQuartzBar::QuantizationType' has a wrong offset!");
static_assert(offsetof(BP_MusicCue_C_EVENT_OnQuartzBar, NumBars) == 0x00000C, "Member 'BP_MusicCue_C_EVENT_OnQuartzBar::NumBars' has a wrong offset!");
static_assert(offsetof(BP_MusicCue_C_EVENT_OnQuartzBar, Beat) == 0x000010, "Member 'BP_MusicCue_C_EVENT_OnQuartzBar::Beat' has a wrong offset!");
static_assert(offsetof(BP_MusicCue_C_EVENT_OnQuartzBar, BeatFraction) == 0x000014, "Member 'BP_MusicCue_C_EVENT_OnQuartzBar::BeatFraction' has a wrong offset!");
static_assert(offsetof(BP_MusicCue_C_EVENT_OnQuartzBar, MusicLayer) == 0x000018, "Member 'BP_MusicCue_C_EVENT_OnQuartzBar::MusicLayer' has a wrong offset!");
static_assert(offsetof(BP_MusicCue_C_EVENT_OnQuartzBar, K2Node_SwitchEnum_CmpSuccess) == 0x000020, "Member 'BP_MusicCue_C_EVENT_OnQuartzBar::K2Node_SwitchEnum_CmpSuccess' has a wrong offset!");
static_assert(offsetof(BP_MusicCue_C_EVENT_OnQuartzBar, CallFunc_GetFloatValue_ReturnValue) == 0x000024, "Member 'BP_MusicCue_C_EVENT_OnQuartzBar::CallFunc_GetFloatValue_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_MusicCue_C_EVENT_OnQuartzBar, CallFunc_FMax_ReturnValue) == 0x000028, "Member 'BP_MusicCue_C_EVENT_OnQuartzBar::CallFunc_FMax_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_MusicCue_C_EVENT_OnQuartzBar, CallFunc_GetFloatValue_ReturnValue_1) == 0x00002C, "Member 'BP_MusicCue_C_EVENT_OnQuartzBar::CallFunc_GetFloatValue_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_MusicCue_C_EVENT_OnQuartzBar, CallFunc_FMax_ReturnValue_1) == 0x000030, "Member 'BP_MusicCue_C_EVENT_OnQuartzBar::CallFunc_FMax_ReturnValue_1' has a wrong offset!");

// Function BP_MusicCue.BP_MusicCue_C.PrintCurrentExploreIntensity
// 0x0050 (0x0050 - 0x0000)
struct BP_MusicCue_C_PrintCurrentExploreIntensity final
{
public:
	float                                         CallFunc_GetFloatValue_ReturnValue;                // 0x0000(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 CallFunc_Conv_FloatToString_ReturnValue;           // 0x0008(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	float                                         CallFunc_FMax_ReturnValue;                         // 0x0018(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1C[0x4];                                       // 0x001C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 CallFunc_Concat_StrStr_ReturnValue;                // 0x0020(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	class FString                                 CallFunc_Conv_FloatToString_ReturnValue_1;         // 0x0030(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	class FString                                 CallFunc_Concat_StrStr_ReturnValue_1;              // 0x0040(0x0010)(ZeroConstructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_MusicCue_C_PrintCurrentExploreIntensity) == 0x000008, "Wrong alignment on BP_MusicCue_C_PrintCurrentExploreIntensity");
static_assert(sizeof(BP_MusicCue_C_PrintCurrentExploreIntensity) == 0x000050, "Wrong size on BP_MusicCue_C_PrintCurrentExploreIntensity");
static_assert(offsetof(BP_MusicCue_C_PrintCurrentExploreIntensity, CallFunc_GetFloatValue_ReturnValue) == 0x000000, "Member 'BP_MusicCue_C_PrintCurrentExploreIntensity::CallFunc_GetFloatValue_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_MusicCue_C_PrintCurrentExploreIntensity, CallFunc_Conv_FloatToString_ReturnValue) == 0x000008, "Member 'BP_MusicCue_C_PrintCurrentExploreIntensity::CallFunc_Conv_FloatToString_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_MusicCue_C_PrintCurrentExploreIntensity, CallFunc_FMax_ReturnValue) == 0x000018, "Member 'BP_MusicCue_C_PrintCurrentExploreIntensity::CallFunc_FMax_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_MusicCue_C_PrintCurrentExploreIntensity, CallFunc_Concat_StrStr_ReturnValue) == 0x000020, "Member 'BP_MusicCue_C_PrintCurrentExploreIntensity::CallFunc_Concat_StrStr_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_MusicCue_C_PrintCurrentExploreIntensity, CallFunc_Conv_FloatToString_ReturnValue_1) == 0x000030, "Member 'BP_MusicCue_C_PrintCurrentExploreIntensity::CallFunc_Conv_FloatToString_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_MusicCue_C_PrintCurrentExploreIntensity, CallFunc_Concat_StrStr_ReturnValue_1) == 0x000040, "Member 'BP_MusicCue_C_PrintCurrentExploreIntensity::CallFunc_Concat_StrStr_ReturnValue_1' has a wrong offset!");

// Function BP_MusicCue.BP_MusicCue_C.IsMusicDebugLoggingEnabled
// 0x0001 (0x0001 - 0x0000)
struct BP_MusicCue_C_IsMusicDebugLoggingEnabled final
{
public:
	bool                                          Result;                                            // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_MusicCue_C_IsMusicDebugLoggingEnabled) == 0x000001, "Wrong alignment on BP_MusicCue_C_IsMusicDebugLoggingEnabled");
static_assert(sizeof(BP_MusicCue_C_IsMusicDebugLoggingEnabled) == 0x000001, "Wrong size on BP_MusicCue_C_IsMusicDebugLoggingEnabled");
static_assert(offsetof(BP_MusicCue_C_IsMusicDebugLoggingEnabled, Result) == 0x000000, "Member 'BP_MusicCue_C_IsMusicDebugLoggingEnabled::Result' has a wrong offset!");

// Function BP_MusicCue.BP_MusicCue_C.UpdateCombatIntensity
// 0x0004 (0x0004 - 0x0000)
struct BP_MusicCue_C_UpdateCombatIntensity final
{
public:
	float                                         Intensity;                                         // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_MusicCue_C_UpdateCombatIntensity) == 0x000004, "Wrong alignment on BP_MusicCue_C_UpdateCombatIntensity");
static_assert(sizeof(BP_MusicCue_C_UpdateCombatIntensity) == 0x000004, "Wrong size on BP_MusicCue_C_UpdateCombatIntensity");
static_assert(offsetof(BP_MusicCue_C_UpdateCombatIntensity, Intensity) == 0x000000, "Member 'BP_MusicCue_C_UpdateCombatIntensity::Intensity' has a wrong offset!");

}

