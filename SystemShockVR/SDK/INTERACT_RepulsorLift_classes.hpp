#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: INTERACT_RepulsorLift

#include "Basic.hpp"

#include "CoreUObject_structs.hpp"
#include "ENUM_RepulsorTargets_structs.hpp"
#include "Engine_structs.hpp"
#include "AttributeSystem_structs.hpp"
#include "INTERACT_Base_classes.hpp"
#include "LevelVoxelization_structs.hpp"
#include "ENUM_InteractionType_structs.hpp"


namespace SDK
{

// BlueprintGeneratedClass INTERACT_RepulsorLift.INTERACT_RepulsorLift_C
// 0x0318 (0x0620 - 0x0308)
class AINTERACT_RepulsorLift_C final : public AINTERACT_Base_C
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame_INTERACT_RepulsorLift_C;            // 0x0308(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	class UCOMP_AttribManager_C*                  COMP_AttribManager;                                // 0x0310(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UCOMP_VoxelAudio_C*                     RepulsorAudio;                                     // 0x0318(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UCOMP_CullableNavModifier_C*            COMP_CullableNavModifier;                          // 0x0320(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UNiagaraComponent*                      NS_RepulsorLift;                                   // 0x0328(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UBoxComponent*                          BaseCollisionBox;                                  // 0x0330(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UStaticMeshComponent*                   RepulsorEffectsMesh;                               // 0x0338(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class URectLightComponent*                    RectLight;                                         // 0x0340(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USkeletalMeshComponent*                 RepulsorLiftMesh;                                  // 0x0348(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UCapsuleComponent*                      GreenCapsule;                                      // 0x0350(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UCapsuleComponent*                      RedCapsule;                                        // 0x0358(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UArrowComponent*                        GreenTarget;                                       // 0x0360(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UArrowComponent*                        RedTarget;                                         // 0x0368(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UBoxComponent*                          RepulsorField;                                     // 0x0370(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	int32                                         RepulsorFieldHeight;                               // 0x0378(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         VerticalImpulse_Target;                            // 0x037C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         VerticalImpulse_RampTime;                          // 0x0380(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ENUM_RepulsorTargets                          CurrentTarget;                                     // 0x0384(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ENUM_RepulsorTargets                          PreviousTarget;                                    // 0x0385(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, SaveGame, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_386[0x2];                                      // 0x0386(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CushionDistance;                                   // 0x0388(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         HorizontalAirDamping;                              // 0x038C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         OscillateRadius;                                   // 0x0390(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         OscillateRate;                                     // 0x0394(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TMap<class AActor*, float>                    AffectedActorMap;                                  // 0x0398(0x0050)(Edit, BlueprintVisible, DisableEditOnTemplate, DisableEditOnInstance)
	struct FAttribModApplyData                    AirControlModApplyData;                            // 0x03E8(0x00A0)(Edit, BlueprintVisible, DisableEditOnInstance)
	struct FAttribModApplyData                    GravityScaleModApplyData;                          // 0x0488(0x00A0)(Edit, BlueprintVisible, DisableEditOnInstance)
	bool                                          IsEnabled;                                         // 0x0528(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          WasEnabled;                                        // 0x0529(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, SaveGame, IsPlainOldData, NoDestructor)
	bool                                          IsPowered;                                         // 0x052A(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          IsOneWay;                                          // 0x052B(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          LockWhenDisabled;                                  // 0x052C(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          HasBeenInteractedWith;                             // 0x052D(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, SaveGame, IsPlainOldData, NoDestructor)
	bool                                          HasEnabledLowFi;                                   // 0x052E(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          WantsToEnableLowFi;                                // 0x052F(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          RequiresSecurityLevel;                             // 0x0530(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_531[0x3];                                      // 0x0531(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         RequiredSecurityLevel;                             // 0x0534(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          AutoToggleOverTime;                                // 0x0538(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_539[0x3];                                      // 0x0539(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         AutoToggleTime;                                    // 0x053C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         ToggleTimestamp;                                   // 0x0540(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_544[0x4];                                      // 0x0544(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UMaterialInstanceDynamic*               MaterialInstance;                                  // 0x0548(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UMaterialInstanceDynamic*               EffectsMaterialInstance;                           // 0x0550(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         DisabledGlowIntensity;                             // 0x0558(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_55C[0x4];                                      // 0x055C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TSoftObjectPtr<class USoundCue>               ActivateDownCue;                                   // 0x0560(0x0028)(Edit, BlueprintVisible, DisableEditOnInstance, HasGetValueTypeHash)
	TSoftObjectPtr<class USoundCue>               ActivateUpCue;                                     // 0x0588(0x0028)(Edit, BlueprintVisible, DisableEditOnInstance, HasGetValueTypeHash)
	float                                         HumSoundPitchDown;                                 // 0x05B0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         HumSoundPitchUp;                                   // 0x05B4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FText                                   RepulsorLiftActivatedMessage;                      // 0x05B8(0x0018)(Edit, BlueprintVisible, DisableEditOnInstance)
	class FText                                   RepulsorFieldReversedMessage;                      // 0x05D0(0x0018)(Edit, BlueprintVisible, DisableEditOnInstance)
	struct FLinearColor                           UpColor;                                           // 0x05E8(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           DownColor;                                         // 0x05F8(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FText                                   RepulsorLiftLockedMessage;                         // 0x0608(0x0018)(Edit, BlueprintVisible, DisableEditOnInstance)

public:
	void ExecuteUbergraph_INTERACT_RepulsorLift(int32 EntryPoint);
	void BndEvt__COMP_CullableNavModifier_K2Node_ComponentBoundEvent_3_CullableVisibilitySignature__DelegateSignature(bool bVisibleState);
	void BndEvt__RepulsorField_K2Node_ComponentBoundEvent_1_ComponentEndOverlapSignature__DelegateSignature(class UPrimitiveComponent* OverlappedComponent, class AActor* OtherActor, class UPrimitiveComponent* OtherComp, int32 OtherBodyIndex);
	void BndEvt__RepulsorField_K2Node_ComponentBoundEvent_0_ComponentBeginOverlapSignature__DelegateSignature(class UPrimitiveComponent* OverlappedComponent, class AActor* OtherActor, class UPrimitiveComponent* OtherComp, int32 OtherBodyIndex, bool bFromSweep, const struct FHitResult& SweepResult);
	void ReceiveTick(float DeltaSeconds);
	void ReceiveBeginPlay();
	void UserConstructionScript();
	void InitializeRepulsorLift();
	void InitializeAttributes();
	void UpdateRepulsorField();
	void BeginOverlapActor(class AActor* Actor);
	void EndOverlapActor(class AActor* Actor);
	void UpdateInitialOverlaps();
	void OnRepulsorStateChanged(bool State);
	void SetRepulsorEnabled(bool IsEnabled_0);
	void CanAffectCharacter(class APAWN_SystemShockCharacter_C* Character, bool* Result);
	void ShouldApplyMods(class APAWN_SystemShockCharacter_C* Character, bool* Result);
	void ShouldRemoveMods(class APAWN_SystemShockCharacter_C* Character, bool* Result);
	void TryRemoveMods(class APAWN_SystemShockCharacter_C* Character);
	void TryApplyMods(class APAWN_SystemShockCharacter_C* Character);
	void OnCharacterEndOverlapRepulsor(class AActor* OverlappedActor, class AActor* OtherActor);
	void InitializeMaterials();
	void UpdateMaterials(bool State);
	void ReverseRepulsorField();
	void SetRepulsorTarget(ENUM_RepulsorTargets NewTarget, bool* NewParam);
	void UpdateParticleSystems(bool State);
	void UpdateRepulsorLight(bool State);
	void RepulseSkeletalMeshComponent(class USkeletalMeshComponent* SkeletalMeshComponent);
	void ShouldFlipParticleDirection(bool* Result);
	void GetRepulsorImpulseAtLocation(class AActor* CurrentActor, const struct FVector& ActorLocation, const struct FVector& ActorVelocity, struct FVector* Impulse);
	void GetHorizontalDampingImpulse(const struct FVector& ActorVelocity, struct FVector* DampingImpulse);
	void SetShouldBeVisible(bool State);
	void TryEnableLowFiBehavior(bool* Result);
	void TryDisableLowFiBehavior(bool* Result);
	void PrepareActorForNewFidelity(class AActor* Actor, bool LowFi);
	void UpdateHumPitchMultiplier();
	void UpdateNavAgentsCanChange(bool State);
	void UpdateNavModifierDirection();
	void IsRepulsorLiftEnabledAndPowered(bool* Result);
	void IsRepulsorLiftPowered(bool* Result);
	void IsLockedBySecurity(bool* Result);
	void EVENT_OnLevelSecurityChanged(int32 NewSecurityLevel);
	void EVENT_OnDisableAttribChanged(float CurrValue, float LastValue);
	void EVENT_UpdateLightColor();
	void UpdateMeshEmissiveStrength(float Scale);
	void StartLightColorUpdate();
	void CanEnableLowFiBehavior(bool* Result);
	void TryInteract(class AActor* SourceActor, class UPrimitiveComponent* CursorPrimitive, ENUM_InteractionType InteractionType, struct FSTRUCT_InteractResults* InteractResults);
	void GetInteractLocked(class AActor* SourceActor, bool* Result, class FText* LockMessage);
	void IsInteractActivated(bool* Result);
	void SetInteractLocked(bool Locked, bool* Result);
	void SetInteractPowered(bool State, bool* Result);
	void CanModifyInteractPower(bool* Result);

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"INTERACT_RepulsorLift_C">();
	}
	static class AINTERACT_RepulsorLift_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<AINTERACT_RepulsorLift_C>();
	}
};
static_assert(alignof(AINTERACT_RepulsorLift_C) == 0x000008, "Wrong alignment on AINTERACT_RepulsorLift_C");
static_assert(sizeof(AINTERACT_RepulsorLift_C) == 0x000620, "Wrong size on AINTERACT_RepulsorLift_C");
static_assert(offsetof(AINTERACT_RepulsorLift_C, UberGraphFrame_INTERACT_RepulsorLift_C) == 0x000308, "Member 'AINTERACT_RepulsorLift_C::UberGraphFrame_INTERACT_RepulsorLift_C' has a wrong offset!");
static_assert(offsetof(AINTERACT_RepulsorLift_C, COMP_AttribManager) == 0x000310, "Member 'AINTERACT_RepulsorLift_C::COMP_AttribManager' has a wrong offset!");
static_assert(offsetof(AINTERACT_RepulsorLift_C, RepulsorAudio) == 0x000318, "Member 'AINTERACT_RepulsorLift_C::RepulsorAudio' has a wrong offset!");
static_assert(offsetof(AINTERACT_RepulsorLift_C, COMP_CullableNavModifier) == 0x000320, "Member 'AINTERACT_RepulsorLift_C::COMP_CullableNavModifier' has a wrong offset!");
static_assert(offsetof(AINTERACT_RepulsorLift_C, NS_RepulsorLift) == 0x000328, "Member 'AINTERACT_RepulsorLift_C::NS_RepulsorLift' has a wrong offset!");
static_assert(offsetof(AINTERACT_RepulsorLift_C, BaseCollisionBox) == 0x000330, "Member 'AINTERACT_RepulsorLift_C::BaseCollisionBox' has a wrong offset!");
static_assert(offsetof(AINTERACT_RepulsorLift_C, RepulsorEffectsMesh) == 0x000338, "Member 'AINTERACT_RepulsorLift_C::RepulsorEffectsMesh' has a wrong offset!");
static_assert(offsetof(AINTERACT_RepulsorLift_C, RectLight) == 0x000340, "Member 'AINTERACT_RepulsorLift_C::RectLight' has a wrong offset!");
static_assert(offsetof(AINTERACT_RepulsorLift_C, RepulsorLiftMesh) == 0x000348, "Member 'AINTERACT_RepulsorLift_C::RepulsorLiftMesh' has a wrong offset!");
static_assert(offsetof(AINTERACT_RepulsorLift_C, GreenCapsule) == 0x000350, "Member 'AINTERACT_RepulsorLift_C::GreenCapsule' has a wrong offset!");
static_assert(offsetof(AINTERACT_RepulsorLift_C, RedCapsule) == 0x000358, "Member 'AINTERACT_RepulsorLift_C::RedCapsule' has a wrong offset!");
static_assert(offsetof(AINTERACT_RepulsorLift_C, GreenTarget) == 0x000360, "Member 'AINTERACT_RepulsorLift_C::GreenTarget' has a wrong offset!");
static_assert(offsetof(AINTERACT_RepulsorLift_C, RedTarget) == 0x000368, "Member 'AINTERACT_RepulsorLift_C::RedTarget' has a wrong offset!");
static_assert(offsetof(AINTERACT_RepulsorLift_C, RepulsorField) == 0x000370, "Member 'AINTERACT_RepulsorLift_C::RepulsorField' has a wrong offset!");
static_assert(offsetof(AINTERACT_RepulsorLift_C, RepulsorFieldHeight) == 0x000378, "Member 'AINTERACT_RepulsorLift_C::RepulsorFieldHeight' has a wrong offset!");
static_assert(offsetof(AINTERACT_RepulsorLift_C, VerticalImpulse_Target) == 0x00037C, "Member 'AINTERACT_RepulsorLift_C::VerticalImpulse_Target' has a wrong offset!");
static_assert(offsetof(AINTERACT_RepulsorLift_C, VerticalImpulse_RampTime) == 0x000380, "Member 'AINTERACT_RepulsorLift_C::VerticalImpulse_RampTime' has a wrong offset!");
static_assert(offsetof(AINTERACT_RepulsorLift_C, CurrentTarget) == 0x000384, "Member 'AINTERACT_RepulsorLift_C::CurrentTarget' has a wrong offset!");
static_assert(offsetof(AINTERACT_RepulsorLift_C, PreviousTarget) == 0x000385, "Member 'AINTERACT_RepulsorLift_C::PreviousTarget' has a wrong offset!");
static_assert(offsetof(AINTERACT_RepulsorLift_C, CushionDistance) == 0x000388, "Member 'AINTERACT_RepulsorLift_C::CushionDistance' has a wrong offset!");
static_assert(offsetof(AINTERACT_RepulsorLift_C, HorizontalAirDamping) == 0x00038C, "Member 'AINTERACT_RepulsorLift_C::HorizontalAirDamping' has a wrong offset!");
static_assert(offsetof(AINTERACT_RepulsorLift_C, OscillateRadius) == 0x000390, "Member 'AINTERACT_RepulsorLift_C::OscillateRadius' has a wrong offset!");
static_assert(offsetof(AINTERACT_RepulsorLift_C, OscillateRate) == 0x000394, "Member 'AINTERACT_RepulsorLift_C::OscillateRate' has a wrong offset!");
static_assert(offsetof(AINTERACT_RepulsorLift_C, AffectedActorMap) == 0x000398, "Member 'AINTERACT_RepulsorLift_C::AffectedActorMap' has a wrong offset!");
static_assert(offsetof(AINTERACT_RepulsorLift_C, AirControlModApplyData) == 0x0003E8, "Member 'AINTERACT_RepulsorLift_C::AirControlModApplyData' has a wrong offset!");
static_assert(offsetof(AINTERACT_RepulsorLift_C, GravityScaleModApplyData) == 0x000488, "Member 'AINTERACT_RepulsorLift_C::GravityScaleModApplyData' has a wrong offset!");
static_assert(offsetof(AINTERACT_RepulsorLift_C, IsEnabled) == 0x000528, "Member 'AINTERACT_RepulsorLift_C::IsEnabled' has a wrong offset!");
static_assert(offsetof(AINTERACT_RepulsorLift_C, WasEnabled) == 0x000529, "Member 'AINTERACT_RepulsorLift_C::WasEnabled' has a wrong offset!");
static_assert(offsetof(AINTERACT_RepulsorLift_C, IsPowered) == 0x00052A, "Member 'AINTERACT_RepulsorLift_C::IsPowered' has a wrong offset!");
static_assert(offsetof(AINTERACT_RepulsorLift_C, IsOneWay) == 0x00052B, "Member 'AINTERACT_RepulsorLift_C::IsOneWay' has a wrong offset!");
static_assert(offsetof(AINTERACT_RepulsorLift_C, LockWhenDisabled) == 0x00052C, "Member 'AINTERACT_RepulsorLift_C::LockWhenDisabled' has a wrong offset!");
static_assert(offsetof(AINTERACT_RepulsorLift_C, HasBeenInteractedWith) == 0x00052D, "Member 'AINTERACT_RepulsorLift_C::HasBeenInteractedWith' has a wrong offset!");
static_assert(offsetof(AINTERACT_RepulsorLift_C, HasEnabledLowFi) == 0x00052E, "Member 'AINTERACT_RepulsorLift_C::HasEnabledLowFi' has a wrong offset!");
static_assert(offsetof(AINTERACT_RepulsorLift_C, WantsToEnableLowFi) == 0x00052F, "Member 'AINTERACT_RepulsorLift_C::WantsToEnableLowFi' has a wrong offset!");
static_assert(offsetof(AINTERACT_RepulsorLift_C, RequiresSecurityLevel) == 0x000530, "Member 'AINTERACT_RepulsorLift_C::RequiresSecurityLevel' has a wrong offset!");
static_assert(offsetof(AINTERACT_RepulsorLift_C, RequiredSecurityLevel) == 0x000534, "Member 'AINTERACT_RepulsorLift_C::RequiredSecurityLevel' has a wrong offset!");
static_assert(offsetof(AINTERACT_RepulsorLift_C, AutoToggleOverTime) == 0x000538, "Member 'AINTERACT_RepulsorLift_C::AutoToggleOverTime' has a wrong offset!");
static_assert(offsetof(AINTERACT_RepulsorLift_C, AutoToggleTime) == 0x00053C, "Member 'AINTERACT_RepulsorLift_C::AutoToggleTime' has a wrong offset!");
static_assert(offsetof(AINTERACT_RepulsorLift_C, ToggleTimestamp) == 0x000540, "Member 'AINTERACT_RepulsorLift_C::ToggleTimestamp' has a wrong offset!");
static_assert(offsetof(AINTERACT_RepulsorLift_C, MaterialInstance) == 0x000548, "Member 'AINTERACT_RepulsorLift_C::MaterialInstance' has a wrong offset!");
static_assert(offsetof(AINTERACT_RepulsorLift_C, EffectsMaterialInstance) == 0x000550, "Member 'AINTERACT_RepulsorLift_C::EffectsMaterialInstance' has a wrong offset!");
static_assert(offsetof(AINTERACT_RepulsorLift_C, DisabledGlowIntensity) == 0x000558, "Member 'AINTERACT_RepulsorLift_C::DisabledGlowIntensity' has a wrong offset!");
static_assert(offsetof(AINTERACT_RepulsorLift_C, ActivateDownCue) == 0x000560, "Member 'AINTERACT_RepulsorLift_C::ActivateDownCue' has a wrong offset!");
static_assert(offsetof(AINTERACT_RepulsorLift_C, ActivateUpCue) == 0x000588, "Member 'AINTERACT_RepulsorLift_C::ActivateUpCue' has a wrong offset!");
static_assert(offsetof(AINTERACT_RepulsorLift_C, HumSoundPitchDown) == 0x0005B0, "Member 'AINTERACT_RepulsorLift_C::HumSoundPitchDown' has a wrong offset!");
static_assert(offsetof(AINTERACT_RepulsorLift_C, HumSoundPitchUp) == 0x0005B4, "Member 'AINTERACT_RepulsorLift_C::HumSoundPitchUp' has a wrong offset!");
static_assert(offsetof(AINTERACT_RepulsorLift_C, RepulsorLiftActivatedMessage) == 0x0005B8, "Member 'AINTERACT_RepulsorLift_C::RepulsorLiftActivatedMessage' has a wrong offset!");
static_assert(offsetof(AINTERACT_RepulsorLift_C, RepulsorFieldReversedMessage) == 0x0005D0, "Member 'AINTERACT_RepulsorLift_C::RepulsorFieldReversedMessage' has a wrong offset!");
static_assert(offsetof(AINTERACT_RepulsorLift_C, UpColor) == 0x0005E8, "Member 'AINTERACT_RepulsorLift_C::UpColor' has a wrong offset!");
static_assert(offsetof(AINTERACT_RepulsorLift_C, DownColor) == 0x0005F8, "Member 'AINTERACT_RepulsorLift_C::DownColor' has a wrong offset!");
static_assert(offsetof(AINTERACT_RepulsorLift_C, RepulsorLiftLockedMessage) == 0x000608, "Member 'AINTERACT_RepulsorLift_C::RepulsorLiftLockedMessage' has a wrong offset!");

}

