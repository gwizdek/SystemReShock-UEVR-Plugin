#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: WIDGET_SkipCinematicMeter

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "UMG_classes.hpp"


namespace SDK
{

// WidgetBlueprintGeneratedClass WIDGET_SkipCinematicMeter.WIDGET_SkipCinematicMeter_C
// 0x0048 (0x02A8 - 0x0260)
class UWIDGET_SkipCinematicMeter_C final : public UUserWidget
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x0260(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	class UWidgetAnimation*                       ANIM_TriggerSkip;                                  // 0x0268(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, RepSkip, NoDestructor, HasGetValueTypeHash)
	class UImage*                                 IMAGE_SkipMeterFrame;                              // 0x0270(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UTextBlock*                             TEXT_SkipLabel;                                    // 0x0278(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UMaterialInstanceDynamic*               SkipMeterFrameDynamicMaterial;                     // 0x0280(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         HoldLength;                                        // 0x0288(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         SkipStartTimestamp;                                // 0x028C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          IsHoldingSkip;                                     // 0x0290(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          IsSkippingScene;                                   // 0x0291(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_292[0x6];                                      // 0x0292(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	FMulticastInlineDelegateProperty_             SkipCinematicMeterCompleted;                       // 0x0298(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)

public:
	void SkipCinematicMeterCompleted__DelegateSignature();
	void ExecuteUbergraph_WIDGET_SkipCinematicMeter(int32 EntryPoint);
	void Tick(const struct FGeometry& MyGeometry, float InDeltaTime);
	void InitializeSkipCinematicMeter();
	void BeginSkipCounter(float HoldLength_0);
	void UpdateSkipMeter();
	void TriggerSkipScene();
	void CancelSkipCounter();

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"WIDGET_SkipCinematicMeter_C">();
	}
	static class UWIDGET_SkipCinematicMeter_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<UWIDGET_SkipCinematicMeter_C>();
	}
};
static_assert(alignof(UWIDGET_SkipCinematicMeter_C) == 0x000008, "Wrong alignment on UWIDGET_SkipCinematicMeter_C");
static_assert(sizeof(UWIDGET_SkipCinematicMeter_C) == 0x0002A8, "Wrong size on UWIDGET_SkipCinematicMeter_C");
static_assert(offsetof(UWIDGET_SkipCinematicMeter_C, UberGraphFrame) == 0x000260, "Member 'UWIDGET_SkipCinematicMeter_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(UWIDGET_SkipCinematicMeter_C, ANIM_TriggerSkip) == 0x000268, "Member 'UWIDGET_SkipCinematicMeter_C::ANIM_TriggerSkip' has a wrong offset!");
static_assert(offsetof(UWIDGET_SkipCinematicMeter_C, IMAGE_SkipMeterFrame) == 0x000270, "Member 'UWIDGET_SkipCinematicMeter_C::IMAGE_SkipMeterFrame' has a wrong offset!");
static_assert(offsetof(UWIDGET_SkipCinematicMeter_C, TEXT_SkipLabel) == 0x000278, "Member 'UWIDGET_SkipCinematicMeter_C::TEXT_SkipLabel' has a wrong offset!");
static_assert(offsetof(UWIDGET_SkipCinematicMeter_C, SkipMeterFrameDynamicMaterial) == 0x000280, "Member 'UWIDGET_SkipCinematicMeter_C::SkipMeterFrameDynamicMaterial' has a wrong offset!");
static_assert(offsetof(UWIDGET_SkipCinematicMeter_C, HoldLength) == 0x000288, "Member 'UWIDGET_SkipCinematicMeter_C::HoldLength' has a wrong offset!");
static_assert(offsetof(UWIDGET_SkipCinematicMeter_C, SkipStartTimestamp) == 0x00028C, "Member 'UWIDGET_SkipCinematicMeter_C::SkipStartTimestamp' has a wrong offset!");
static_assert(offsetof(UWIDGET_SkipCinematicMeter_C, IsHoldingSkip) == 0x000290, "Member 'UWIDGET_SkipCinematicMeter_C::IsHoldingSkip' has a wrong offset!");
static_assert(offsetof(UWIDGET_SkipCinematicMeter_C, IsSkippingScene) == 0x000291, "Member 'UWIDGET_SkipCinematicMeter_C::IsSkippingScene' has a wrong offset!");
static_assert(offsetof(UWIDGET_SkipCinematicMeter_C, SkipCinematicMeterCompleted) == 0x000298, "Member 'UWIDGET_SkipCinematicMeter_C::SkipCinematicMeterCompleted' has a wrong offset!");

}

