#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: LightTransitionManager

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "CoreGame_classes.hpp"


namespace SDK
{

// BlueprintGeneratedClass LightTransitionManager.LightTransitionManager_C
// 0x0050 (0x0078 - 0x0028)
class ULightTransitionManager_C final : public UWorldObject
{
public:
	class UMeshComponent*                         MeshComponent;                                     // 0x0028(0x0008)(Edit, BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash)
	class ULightComponent*                        LightComponent;                                    // 0x0030(0x0008)(Edit, BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash)
	int32                                         EmissivePrimitiveDataIndex;                        // 0x0038(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash)
	float                                         DefaultEmissiveIntensity;                          // 0x003C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash)
	float                                         DefaultLightIntensity;                             // 0x0040(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         StateEnterTimestamp;                               // 0x0044(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         TransitionTickInterval;                            // 0x0048(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         TransitionDuration;                                // 0x004C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         FlickerFrequency;                                  // 0x0050(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         SourceEmissiveIntensity;                           // 0x0054(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         SourceLightIntensity;                              // 0x0058(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          IsTurningOn;                                       // 0x005C(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          AutoDestroy;                                       // 0x005D(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_5E[0x2];                                       // 0x005E(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTimerHandle                           TimerHandle;                                       // 0x0060(0x0008)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	FMulticastInlineDelegateProperty_             OnTransitionFinished;                              // 0x0068(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)

public:
	void OnTransitionFinished__DelegateSignature();
	void InitializeLightManager(bool StartsOn);
	void ToggleLightState(float InFlickerFrequency, float InDuration);
	void TrySetLightState(bool InState, float InFlickerFrequency, float InDuration, bool* Result);
	void UpdateIntensity(float Alpha);
	void EVENT_OnUpdateLightIntensity();
	void SetAutoDestroy(bool State);
	void SetDefaultEmissiveIntensity(float Intensity, float Duration);
	void GetTransitionTimeRemaining(float* Result);
	void GetElapsedTransitionTime(float* Result);

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"LightTransitionManager_C">();
	}
	static class ULightTransitionManager_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<ULightTransitionManager_C>();
	}
};
static_assert(alignof(ULightTransitionManager_C) == 0x000008, "Wrong alignment on ULightTransitionManager_C");
static_assert(sizeof(ULightTransitionManager_C) == 0x000078, "Wrong size on ULightTransitionManager_C");
static_assert(offsetof(ULightTransitionManager_C, MeshComponent) == 0x000028, "Member 'ULightTransitionManager_C::MeshComponent' has a wrong offset!");
static_assert(offsetof(ULightTransitionManager_C, LightComponent) == 0x000030, "Member 'ULightTransitionManager_C::LightComponent' has a wrong offset!");
static_assert(offsetof(ULightTransitionManager_C, EmissivePrimitiveDataIndex) == 0x000038, "Member 'ULightTransitionManager_C::EmissivePrimitiveDataIndex' has a wrong offset!");
static_assert(offsetof(ULightTransitionManager_C, DefaultEmissiveIntensity) == 0x00003C, "Member 'ULightTransitionManager_C::DefaultEmissiveIntensity' has a wrong offset!");
static_assert(offsetof(ULightTransitionManager_C, DefaultLightIntensity) == 0x000040, "Member 'ULightTransitionManager_C::DefaultLightIntensity' has a wrong offset!");
static_assert(offsetof(ULightTransitionManager_C, StateEnterTimestamp) == 0x000044, "Member 'ULightTransitionManager_C::StateEnterTimestamp' has a wrong offset!");
static_assert(offsetof(ULightTransitionManager_C, TransitionTickInterval) == 0x000048, "Member 'ULightTransitionManager_C::TransitionTickInterval' has a wrong offset!");
static_assert(offsetof(ULightTransitionManager_C, TransitionDuration) == 0x00004C, "Member 'ULightTransitionManager_C::TransitionDuration' has a wrong offset!");
static_assert(offsetof(ULightTransitionManager_C, FlickerFrequency) == 0x000050, "Member 'ULightTransitionManager_C::FlickerFrequency' has a wrong offset!");
static_assert(offsetof(ULightTransitionManager_C, SourceEmissiveIntensity) == 0x000054, "Member 'ULightTransitionManager_C::SourceEmissiveIntensity' has a wrong offset!");
static_assert(offsetof(ULightTransitionManager_C, SourceLightIntensity) == 0x000058, "Member 'ULightTransitionManager_C::SourceLightIntensity' has a wrong offset!");
static_assert(offsetof(ULightTransitionManager_C, IsTurningOn) == 0x00005C, "Member 'ULightTransitionManager_C::IsTurningOn' has a wrong offset!");
static_assert(offsetof(ULightTransitionManager_C, AutoDestroy) == 0x00005D, "Member 'ULightTransitionManager_C::AutoDestroy' has a wrong offset!");
static_assert(offsetof(ULightTransitionManager_C, TimerHandle) == 0x000060, "Member 'ULightTransitionManager_C::TimerHandle' has a wrong offset!");
static_assert(offsetof(ULightTransitionManager_C, OnTransitionFinished) == 0x000068, "Member 'ULightTransitionManager_C::OnTransitionFinished' has a wrong offset!");

}

