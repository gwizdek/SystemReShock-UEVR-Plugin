#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: FUNCLIB_CellUtility

#include "Basic.hpp"

#include "STRUCT_CellCostNode_structs.hpp"
#include "CoreUObject_structs.hpp"
#include "STRUCT_CellLocationData_structs.hpp"
#include "ENUM_CardinalDirection_structs.hpp"


namespace SDK::Params
{

// Function FUNCLIB_CellUtility.FUNCLIB_CellUtility_C.GetReverseCardinal
// 0x0018 (0x0018 - 0x0000)
struct FUNCLIB_CellUtility_C_GetReverseCardinal final
{
public:
	ENUM_CardinalDirection                        Input;                                             // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UObject*                                __WorldContext;                                    // 0x0008(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ENUM_CardinalDirection                        Output;                                            // 0x0010(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_SwitchEnum_CmpSuccess;                      // 0x0011(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(FUNCLIB_CellUtility_C_GetReverseCardinal) == 0x000008, "Wrong alignment on FUNCLIB_CellUtility_C_GetReverseCardinal");
static_assert(sizeof(FUNCLIB_CellUtility_C_GetReverseCardinal) == 0x000018, "Wrong size on FUNCLIB_CellUtility_C_GetReverseCardinal");
static_assert(offsetof(FUNCLIB_CellUtility_C_GetReverseCardinal, Input) == 0x000000, "Member 'FUNCLIB_CellUtility_C_GetReverseCardinal::Input' has a wrong offset!");
static_assert(offsetof(FUNCLIB_CellUtility_C_GetReverseCardinal, __WorldContext) == 0x000008, "Member 'FUNCLIB_CellUtility_C_GetReverseCardinal::__WorldContext' has a wrong offset!");
static_assert(offsetof(FUNCLIB_CellUtility_C_GetReverseCardinal, Output) == 0x000010, "Member 'FUNCLIB_CellUtility_C_GetReverseCardinal::Output' has a wrong offset!");
static_assert(offsetof(FUNCLIB_CellUtility_C_GetReverseCardinal, K2Node_SwitchEnum_CmpSuccess) == 0x000011, "Member 'FUNCLIB_CellUtility_C_GetReverseCardinal::K2Node_SwitchEnum_CmpSuccess' has a wrong offset!");

// Function FUNCLIB_CellUtility.FUNCLIB_CellUtility_C.GetNeighborCell
// 0x0030 (0x0030 - 0x0000)
struct FUNCLIB_CellUtility_C_GetNeighborCell final
{
public:
	struct FIntPoint                              SourceCell;                                        // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ENUM_CardinalDirection                        Direction;                                         // 0x0008(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UObject*                                __WorldContext;                                    // 0x0010(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FIntPoint                              NeighborCell;                                      // 0x0018(0x0008)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FIntPoint                              CallFunc_GetIntPointFromCardinalDirection_Point;   // 0x0020(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FIntPoint                              CallFunc_Add_IntPointIntPoint_ReturnValue;         // 0x0028(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(FUNCLIB_CellUtility_C_GetNeighborCell) == 0x000008, "Wrong alignment on FUNCLIB_CellUtility_C_GetNeighborCell");
static_assert(sizeof(FUNCLIB_CellUtility_C_GetNeighborCell) == 0x000030, "Wrong size on FUNCLIB_CellUtility_C_GetNeighborCell");
static_assert(offsetof(FUNCLIB_CellUtility_C_GetNeighborCell, SourceCell) == 0x000000, "Member 'FUNCLIB_CellUtility_C_GetNeighborCell::SourceCell' has a wrong offset!");
static_assert(offsetof(FUNCLIB_CellUtility_C_GetNeighborCell, Direction) == 0x000008, "Member 'FUNCLIB_CellUtility_C_GetNeighborCell::Direction' has a wrong offset!");
static_assert(offsetof(FUNCLIB_CellUtility_C_GetNeighborCell, __WorldContext) == 0x000010, "Member 'FUNCLIB_CellUtility_C_GetNeighborCell::__WorldContext' has a wrong offset!");
static_assert(offsetof(FUNCLIB_CellUtility_C_GetNeighborCell, NeighborCell) == 0x000018, "Member 'FUNCLIB_CellUtility_C_GetNeighborCell::NeighborCell' has a wrong offset!");
static_assert(offsetof(FUNCLIB_CellUtility_C_GetNeighborCell, CallFunc_GetIntPointFromCardinalDirection_Point) == 0x000020, "Member 'FUNCLIB_CellUtility_C_GetNeighborCell::CallFunc_GetIntPointFromCardinalDirection_Point' has a wrong offset!");
static_assert(offsetof(FUNCLIB_CellUtility_C_GetNeighborCell, CallFunc_Add_IntPointIntPoint_ReturnValue) == 0x000028, "Member 'FUNCLIB_CellUtility_C_GetNeighborCell::CallFunc_Add_IntPointIntPoint_ReturnValue' has a wrong offset!");

// Function FUNCLIB_CellUtility.FUNCLIB_CellUtility_C.GetCardinalDirectionFromVector
// 0x0058 (0x0058 - 0x0000)
struct FUNCLIB_CellUtility_C_GetCardinalDirectionFromVector final
{
public:
	struct FVector                                InputVector;                                       // 0x0000(0x000C)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UObject*                                __WorldContext;                                    // 0x0010(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ENUM_CardinalDirection                        Direction;                                         // 0x0018(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_19[0x3];                                       // 0x0019(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         AbsY;                                              // 0x001C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         AbsX;                                              // 0x0020(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector_X;                            // 0x0024(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector_Y;                            // 0x0028(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector_Z;                            // 0x002C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Greater_FloatFloat_ReturnValue;           // 0x0030(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Less_FloatFloat_ReturnValue;              // 0x0031(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_32[0x2];                                       // 0x0032(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_BreakVector_X_1;                          // 0x0034(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector_Y_1;                          // 0x0038(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector_Z_1;                          // 0x003C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_FloatFloat_ReturnValue_1;            // 0x0040(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Greater_FloatFloat_ReturnValue_1;         // 0x0041(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_42[0x2];                                       // 0x0042(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_BreakVector_X_2;                          // 0x0044(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector_Y_2;                          // 0x0048(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector_Z_2;                          // 0x004C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Abs_ReturnValue;                          // 0x0050(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Abs_ReturnValue_1;                        // 0x0054(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(FUNCLIB_CellUtility_C_GetCardinalDirectionFromVector) == 0x000008, "Wrong alignment on FUNCLIB_CellUtility_C_GetCardinalDirectionFromVector");
static_assert(sizeof(FUNCLIB_CellUtility_C_GetCardinalDirectionFromVector) == 0x000058, "Wrong size on FUNCLIB_CellUtility_C_GetCardinalDirectionFromVector");
static_assert(offsetof(FUNCLIB_CellUtility_C_GetCardinalDirectionFromVector, InputVector) == 0x000000, "Member 'FUNCLIB_CellUtility_C_GetCardinalDirectionFromVector::InputVector' has a wrong offset!");
static_assert(offsetof(FUNCLIB_CellUtility_C_GetCardinalDirectionFromVector, __WorldContext) == 0x000010, "Member 'FUNCLIB_CellUtility_C_GetCardinalDirectionFromVector::__WorldContext' has a wrong offset!");
static_assert(offsetof(FUNCLIB_CellUtility_C_GetCardinalDirectionFromVector, Direction) == 0x000018, "Member 'FUNCLIB_CellUtility_C_GetCardinalDirectionFromVector::Direction' has a wrong offset!");
static_assert(offsetof(FUNCLIB_CellUtility_C_GetCardinalDirectionFromVector, AbsY) == 0x00001C, "Member 'FUNCLIB_CellUtility_C_GetCardinalDirectionFromVector::AbsY' has a wrong offset!");
static_assert(offsetof(FUNCLIB_CellUtility_C_GetCardinalDirectionFromVector, AbsX) == 0x000020, "Member 'FUNCLIB_CellUtility_C_GetCardinalDirectionFromVector::AbsX' has a wrong offset!");
static_assert(offsetof(FUNCLIB_CellUtility_C_GetCardinalDirectionFromVector, CallFunc_BreakVector_X) == 0x000024, "Member 'FUNCLIB_CellUtility_C_GetCardinalDirectionFromVector::CallFunc_BreakVector_X' has a wrong offset!");
static_assert(offsetof(FUNCLIB_CellUtility_C_GetCardinalDirectionFromVector, CallFunc_BreakVector_Y) == 0x000028, "Member 'FUNCLIB_CellUtility_C_GetCardinalDirectionFromVector::CallFunc_BreakVector_Y' has a wrong offset!");
static_assert(offsetof(FUNCLIB_CellUtility_C_GetCardinalDirectionFromVector, CallFunc_BreakVector_Z) == 0x00002C, "Member 'FUNCLIB_CellUtility_C_GetCardinalDirectionFromVector::CallFunc_BreakVector_Z' has a wrong offset!");
static_assert(offsetof(FUNCLIB_CellUtility_C_GetCardinalDirectionFromVector, CallFunc_Greater_FloatFloat_ReturnValue) == 0x000030, "Member 'FUNCLIB_CellUtility_C_GetCardinalDirectionFromVector::CallFunc_Greater_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(FUNCLIB_CellUtility_C_GetCardinalDirectionFromVector, CallFunc_Less_FloatFloat_ReturnValue) == 0x000031, "Member 'FUNCLIB_CellUtility_C_GetCardinalDirectionFromVector::CallFunc_Less_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(FUNCLIB_CellUtility_C_GetCardinalDirectionFromVector, CallFunc_BreakVector_X_1) == 0x000034, "Member 'FUNCLIB_CellUtility_C_GetCardinalDirectionFromVector::CallFunc_BreakVector_X_1' has a wrong offset!");
static_assert(offsetof(FUNCLIB_CellUtility_C_GetCardinalDirectionFromVector, CallFunc_BreakVector_Y_1) == 0x000038, "Member 'FUNCLIB_CellUtility_C_GetCardinalDirectionFromVector::CallFunc_BreakVector_Y_1' has a wrong offset!");
static_assert(offsetof(FUNCLIB_CellUtility_C_GetCardinalDirectionFromVector, CallFunc_BreakVector_Z_1) == 0x00003C, "Member 'FUNCLIB_CellUtility_C_GetCardinalDirectionFromVector::CallFunc_BreakVector_Z_1' has a wrong offset!");
static_assert(offsetof(FUNCLIB_CellUtility_C_GetCardinalDirectionFromVector, CallFunc_Less_FloatFloat_ReturnValue_1) == 0x000040, "Member 'FUNCLIB_CellUtility_C_GetCardinalDirectionFromVector::CallFunc_Less_FloatFloat_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(FUNCLIB_CellUtility_C_GetCardinalDirectionFromVector, CallFunc_Greater_FloatFloat_ReturnValue_1) == 0x000041, "Member 'FUNCLIB_CellUtility_C_GetCardinalDirectionFromVector::CallFunc_Greater_FloatFloat_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(FUNCLIB_CellUtility_C_GetCardinalDirectionFromVector, CallFunc_BreakVector_X_2) == 0x000044, "Member 'FUNCLIB_CellUtility_C_GetCardinalDirectionFromVector::CallFunc_BreakVector_X_2' has a wrong offset!");
static_assert(offsetof(FUNCLIB_CellUtility_C_GetCardinalDirectionFromVector, CallFunc_BreakVector_Y_2) == 0x000048, "Member 'FUNCLIB_CellUtility_C_GetCardinalDirectionFromVector::CallFunc_BreakVector_Y_2' has a wrong offset!");
static_assert(offsetof(FUNCLIB_CellUtility_C_GetCardinalDirectionFromVector, CallFunc_BreakVector_Z_2) == 0x00004C, "Member 'FUNCLIB_CellUtility_C_GetCardinalDirectionFromVector::CallFunc_BreakVector_Z_2' has a wrong offset!");
static_assert(offsetof(FUNCLIB_CellUtility_C_GetCardinalDirectionFromVector, CallFunc_Abs_ReturnValue) == 0x000050, "Member 'FUNCLIB_CellUtility_C_GetCardinalDirectionFromVector::CallFunc_Abs_ReturnValue' has a wrong offset!");
static_assert(offsetof(FUNCLIB_CellUtility_C_GetCardinalDirectionFromVector, CallFunc_Abs_ReturnValue_1) == 0x000054, "Member 'FUNCLIB_CellUtility_C_GetCardinalDirectionFromVector::CallFunc_Abs_ReturnValue_1' has a wrong offset!");

// Function FUNCLIB_CellUtility.FUNCLIB_CellUtility_C.GetDescendingCostInsertionIndex
// 0x0058 (0x0058 - 0x0000)
struct FUNCLIB_CellUtility_C_GetDescendingCostInsertionIndex final
{
public:
	TArray<struct FSTRUCT_CellCostNode>           DescendingCostNodes;                               // 0x0000(0x0010)(BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
	float                                         Cost;                                              // 0x0010(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UObject*                                __WorldContext;                                    // 0x0018(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         InsertionIndex;                                    // 0x0020(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         SearchEdge;                                        // 0x0024(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         SearchOffset;                                      // 0x0028(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         SearchMiddle;                                      // 0x002C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         SearchLength;                                      // 0x0030(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Length_ReturnValue;                 // 0x0034(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue;                   // 0x0038(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue_1;                 // 0x003C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Subtract_IntInt_ReturnValue;              // 0x0040(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_FloatFloat_ReturnValue;              // 0x0044(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_45[0x3];                                       // 0x0045(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Add_IntInt_ReturnValue_2;                 // 0x0048(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Divide_IntInt_ReturnValue;                // 0x004C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Greater_IntInt_ReturnValue;               // 0x0050(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(FUNCLIB_CellUtility_C_GetDescendingCostInsertionIndex) == 0x000008, "Wrong alignment on FUNCLIB_CellUtility_C_GetDescendingCostInsertionIndex");
static_assert(sizeof(FUNCLIB_CellUtility_C_GetDescendingCostInsertionIndex) == 0x000058, "Wrong size on FUNCLIB_CellUtility_C_GetDescendingCostInsertionIndex");
static_assert(offsetof(FUNCLIB_CellUtility_C_GetDescendingCostInsertionIndex, DescendingCostNodes) == 0x000000, "Member 'FUNCLIB_CellUtility_C_GetDescendingCostInsertionIndex::DescendingCostNodes' has a wrong offset!");
static_assert(offsetof(FUNCLIB_CellUtility_C_GetDescendingCostInsertionIndex, Cost) == 0x000010, "Member 'FUNCLIB_CellUtility_C_GetDescendingCostInsertionIndex::Cost' has a wrong offset!");
static_assert(offsetof(FUNCLIB_CellUtility_C_GetDescendingCostInsertionIndex, __WorldContext) == 0x000018, "Member 'FUNCLIB_CellUtility_C_GetDescendingCostInsertionIndex::__WorldContext' has a wrong offset!");
static_assert(offsetof(FUNCLIB_CellUtility_C_GetDescendingCostInsertionIndex, InsertionIndex) == 0x000020, "Member 'FUNCLIB_CellUtility_C_GetDescendingCostInsertionIndex::InsertionIndex' has a wrong offset!");
static_assert(offsetof(FUNCLIB_CellUtility_C_GetDescendingCostInsertionIndex, SearchEdge) == 0x000024, "Member 'FUNCLIB_CellUtility_C_GetDescendingCostInsertionIndex::SearchEdge' has a wrong offset!");
static_assert(offsetof(FUNCLIB_CellUtility_C_GetDescendingCostInsertionIndex, SearchOffset) == 0x000028, "Member 'FUNCLIB_CellUtility_C_GetDescendingCostInsertionIndex::SearchOffset' has a wrong offset!");
static_assert(offsetof(FUNCLIB_CellUtility_C_GetDescendingCostInsertionIndex, SearchMiddle) == 0x00002C, "Member 'FUNCLIB_CellUtility_C_GetDescendingCostInsertionIndex::SearchMiddle' has a wrong offset!");
static_assert(offsetof(FUNCLIB_CellUtility_C_GetDescendingCostInsertionIndex, SearchLength) == 0x000030, "Member 'FUNCLIB_CellUtility_C_GetDescendingCostInsertionIndex::SearchLength' has a wrong offset!");
static_assert(offsetof(FUNCLIB_CellUtility_C_GetDescendingCostInsertionIndex, CallFunc_Array_Length_ReturnValue) == 0x000034, "Member 'FUNCLIB_CellUtility_C_GetDescendingCostInsertionIndex::CallFunc_Array_Length_ReturnValue' has a wrong offset!");
static_assert(offsetof(FUNCLIB_CellUtility_C_GetDescendingCostInsertionIndex, CallFunc_Add_IntInt_ReturnValue) == 0x000038, "Member 'FUNCLIB_CellUtility_C_GetDescendingCostInsertionIndex::CallFunc_Add_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(FUNCLIB_CellUtility_C_GetDescendingCostInsertionIndex, CallFunc_Add_IntInt_ReturnValue_1) == 0x00003C, "Member 'FUNCLIB_CellUtility_C_GetDescendingCostInsertionIndex::CallFunc_Add_IntInt_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(FUNCLIB_CellUtility_C_GetDescendingCostInsertionIndex, CallFunc_Subtract_IntInt_ReturnValue) == 0x000040, "Member 'FUNCLIB_CellUtility_C_GetDescendingCostInsertionIndex::CallFunc_Subtract_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(FUNCLIB_CellUtility_C_GetDescendingCostInsertionIndex, CallFunc_Less_FloatFloat_ReturnValue) == 0x000044, "Member 'FUNCLIB_CellUtility_C_GetDescendingCostInsertionIndex::CallFunc_Less_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(FUNCLIB_CellUtility_C_GetDescendingCostInsertionIndex, CallFunc_Add_IntInt_ReturnValue_2) == 0x000048, "Member 'FUNCLIB_CellUtility_C_GetDescendingCostInsertionIndex::CallFunc_Add_IntInt_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(FUNCLIB_CellUtility_C_GetDescendingCostInsertionIndex, CallFunc_Divide_IntInt_ReturnValue) == 0x00004C, "Member 'FUNCLIB_CellUtility_C_GetDescendingCostInsertionIndex::CallFunc_Divide_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(FUNCLIB_CellUtility_C_GetDescendingCostInsertionIndex, CallFunc_Greater_IntInt_ReturnValue) == 0x000050, "Member 'FUNCLIB_CellUtility_C_GetDescendingCostInsertionIndex::CallFunc_Greater_IntInt_ReturnValue' has a wrong offset!");

// Function FUNCLIB_CellUtility.FUNCLIB_CellUtility_C.GetEuclideanDistanceBetweenCells
// 0x0068 (0x0068 - 0x0000)
struct FUNCLIB_CellUtility_C_GetEuclideanDistanceBetweenCells final
{
public:
	struct FSTRUCT_CellLocationData               CellDataA;                                         // 0x0000(0x0010)(BlueprintVisible, BlueprintReadOnly, Parm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FSTRUCT_CellLocationData               CellDataB;                                         // 0x0010(0x0010)(BlueprintVisible, BlueprintReadOnly, Parm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UObject*                                __WorldContext;                                    // 0x0020(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Distance;                                          // 0x0028(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Conv_IntToFloat_ReturnValue;              // 0x002C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Conv_IntToFloat_ReturnValue_1;            // 0x0030(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Conv_IntToFloat_ReturnValue_2;            // 0x0034(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Conv_IntToFloat_ReturnValue_3;            // 0x0038(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector2D                              CallFunc_MakeVector2D_ReturnValue;                 // 0x003C(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector2D                              CallFunc_MakeVector2D_ReturnValue_1;               // 0x0044(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector2D                              CallFunc_Add_Vector2DVector2D_ReturnValue;         // 0x004C(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector2D                              CallFunc_Add_Vector2DVector2D_ReturnValue_1;       // 0x0054(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector2D                              CallFunc_Subtract_Vector2DVector2D_ReturnValue;    // 0x005C(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_VSize2D_ReturnValue;                      // 0x0064(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(FUNCLIB_CellUtility_C_GetEuclideanDistanceBetweenCells) == 0x000008, "Wrong alignment on FUNCLIB_CellUtility_C_GetEuclideanDistanceBetweenCells");
static_assert(sizeof(FUNCLIB_CellUtility_C_GetEuclideanDistanceBetweenCells) == 0x000068, "Wrong size on FUNCLIB_CellUtility_C_GetEuclideanDistanceBetweenCells");
static_assert(offsetof(FUNCLIB_CellUtility_C_GetEuclideanDistanceBetweenCells, CellDataA) == 0x000000, "Member 'FUNCLIB_CellUtility_C_GetEuclideanDistanceBetweenCells::CellDataA' has a wrong offset!");
static_assert(offsetof(FUNCLIB_CellUtility_C_GetEuclideanDistanceBetweenCells, CellDataB) == 0x000010, "Member 'FUNCLIB_CellUtility_C_GetEuclideanDistanceBetweenCells::CellDataB' has a wrong offset!");
static_assert(offsetof(FUNCLIB_CellUtility_C_GetEuclideanDistanceBetweenCells, __WorldContext) == 0x000020, "Member 'FUNCLIB_CellUtility_C_GetEuclideanDistanceBetweenCells::__WorldContext' has a wrong offset!");
static_assert(offsetof(FUNCLIB_CellUtility_C_GetEuclideanDistanceBetweenCells, Distance) == 0x000028, "Member 'FUNCLIB_CellUtility_C_GetEuclideanDistanceBetweenCells::Distance' has a wrong offset!");
static_assert(offsetof(FUNCLIB_CellUtility_C_GetEuclideanDistanceBetweenCells, CallFunc_Conv_IntToFloat_ReturnValue) == 0x00002C, "Member 'FUNCLIB_CellUtility_C_GetEuclideanDistanceBetweenCells::CallFunc_Conv_IntToFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(FUNCLIB_CellUtility_C_GetEuclideanDistanceBetweenCells, CallFunc_Conv_IntToFloat_ReturnValue_1) == 0x000030, "Member 'FUNCLIB_CellUtility_C_GetEuclideanDistanceBetweenCells::CallFunc_Conv_IntToFloat_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(FUNCLIB_CellUtility_C_GetEuclideanDistanceBetweenCells, CallFunc_Conv_IntToFloat_ReturnValue_2) == 0x000034, "Member 'FUNCLIB_CellUtility_C_GetEuclideanDistanceBetweenCells::CallFunc_Conv_IntToFloat_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(FUNCLIB_CellUtility_C_GetEuclideanDistanceBetweenCells, CallFunc_Conv_IntToFloat_ReturnValue_3) == 0x000038, "Member 'FUNCLIB_CellUtility_C_GetEuclideanDistanceBetweenCells::CallFunc_Conv_IntToFloat_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(FUNCLIB_CellUtility_C_GetEuclideanDistanceBetweenCells, CallFunc_MakeVector2D_ReturnValue) == 0x00003C, "Member 'FUNCLIB_CellUtility_C_GetEuclideanDistanceBetweenCells::CallFunc_MakeVector2D_ReturnValue' has a wrong offset!");
static_assert(offsetof(FUNCLIB_CellUtility_C_GetEuclideanDistanceBetweenCells, CallFunc_MakeVector2D_ReturnValue_1) == 0x000044, "Member 'FUNCLIB_CellUtility_C_GetEuclideanDistanceBetweenCells::CallFunc_MakeVector2D_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(FUNCLIB_CellUtility_C_GetEuclideanDistanceBetweenCells, CallFunc_Add_Vector2DVector2D_ReturnValue) == 0x00004C, "Member 'FUNCLIB_CellUtility_C_GetEuclideanDistanceBetweenCells::CallFunc_Add_Vector2DVector2D_ReturnValue' has a wrong offset!");
static_assert(offsetof(FUNCLIB_CellUtility_C_GetEuclideanDistanceBetweenCells, CallFunc_Add_Vector2DVector2D_ReturnValue_1) == 0x000054, "Member 'FUNCLIB_CellUtility_C_GetEuclideanDistanceBetweenCells::CallFunc_Add_Vector2DVector2D_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(FUNCLIB_CellUtility_C_GetEuclideanDistanceBetweenCells, CallFunc_Subtract_Vector2DVector2D_ReturnValue) == 0x00005C, "Member 'FUNCLIB_CellUtility_C_GetEuclideanDistanceBetweenCells::CallFunc_Subtract_Vector2DVector2D_ReturnValue' has a wrong offset!");
static_assert(offsetof(FUNCLIB_CellUtility_C_GetEuclideanDistanceBetweenCells, CallFunc_VSize2D_ReturnValue) == 0x000064, "Member 'FUNCLIB_CellUtility_C_GetEuclideanDistanceBetweenCells::CallFunc_VSize2D_ReturnValue' has a wrong offset!");

// Function FUNCLIB_CellUtility.FUNCLIB_CellUtility_C.GetManhattanDistanceBetweenCells
// 0x0078 (0x0078 - 0x0000)
struct FUNCLIB_CellUtility_C_GetManhattanDistanceBetweenCells final
{
public:
	struct FSTRUCT_CellLocationData               CellDataA;                                         // 0x0000(0x0010)(BlueprintVisible, BlueprintReadOnly, Parm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FSTRUCT_CellLocationData               CellDataB;                                         // 0x0010(0x0010)(BlueprintVisible, BlueprintReadOnly, Parm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UObject*                                __WorldContext;                                    // 0x0020(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Distance;                                          // 0x0028(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Conv_IntToFloat_ReturnValue;              // 0x002C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Conv_IntToFloat_ReturnValue_1;            // 0x0030(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Conv_IntToFloat_ReturnValue_2;            // 0x0034(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Conv_IntToFloat_ReturnValue_3;            // 0x0038(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector2D                              CallFunc_MakeVector2D_ReturnValue;                 // 0x003C(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector2D                              CallFunc_MakeVector2D_ReturnValue_1;               // 0x0044(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector2D                              CallFunc_Add_Vector2DVector2D_ReturnValue;         // 0x004C(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector2D                              CallFunc_Add_Vector2DVector2D_ReturnValue_1;       // 0x0054(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector2D                              CallFunc_Subtract_Vector2DVector2D_ReturnValue;    // 0x005C(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector2D_X;                          // 0x0064(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector2D_Y;                          // 0x0068(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Abs_ReturnValue;                          // 0x006C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Abs_ReturnValue_1;                        // 0x0070(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Add_FloatFloat_ReturnValue;               // 0x0074(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(FUNCLIB_CellUtility_C_GetManhattanDistanceBetweenCells) == 0x000008, "Wrong alignment on FUNCLIB_CellUtility_C_GetManhattanDistanceBetweenCells");
static_assert(sizeof(FUNCLIB_CellUtility_C_GetManhattanDistanceBetweenCells) == 0x000078, "Wrong size on FUNCLIB_CellUtility_C_GetManhattanDistanceBetweenCells");
static_assert(offsetof(FUNCLIB_CellUtility_C_GetManhattanDistanceBetweenCells, CellDataA) == 0x000000, "Member 'FUNCLIB_CellUtility_C_GetManhattanDistanceBetweenCells::CellDataA' has a wrong offset!");
static_assert(offsetof(FUNCLIB_CellUtility_C_GetManhattanDistanceBetweenCells, CellDataB) == 0x000010, "Member 'FUNCLIB_CellUtility_C_GetManhattanDistanceBetweenCells::CellDataB' has a wrong offset!");
static_assert(offsetof(FUNCLIB_CellUtility_C_GetManhattanDistanceBetweenCells, __WorldContext) == 0x000020, "Member 'FUNCLIB_CellUtility_C_GetManhattanDistanceBetweenCells::__WorldContext' has a wrong offset!");
static_assert(offsetof(FUNCLIB_CellUtility_C_GetManhattanDistanceBetweenCells, Distance) == 0x000028, "Member 'FUNCLIB_CellUtility_C_GetManhattanDistanceBetweenCells::Distance' has a wrong offset!");
static_assert(offsetof(FUNCLIB_CellUtility_C_GetManhattanDistanceBetweenCells, CallFunc_Conv_IntToFloat_ReturnValue) == 0x00002C, "Member 'FUNCLIB_CellUtility_C_GetManhattanDistanceBetweenCells::CallFunc_Conv_IntToFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(FUNCLIB_CellUtility_C_GetManhattanDistanceBetweenCells, CallFunc_Conv_IntToFloat_ReturnValue_1) == 0x000030, "Member 'FUNCLIB_CellUtility_C_GetManhattanDistanceBetweenCells::CallFunc_Conv_IntToFloat_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(FUNCLIB_CellUtility_C_GetManhattanDistanceBetweenCells, CallFunc_Conv_IntToFloat_ReturnValue_2) == 0x000034, "Member 'FUNCLIB_CellUtility_C_GetManhattanDistanceBetweenCells::CallFunc_Conv_IntToFloat_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(FUNCLIB_CellUtility_C_GetManhattanDistanceBetweenCells, CallFunc_Conv_IntToFloat_ReturnValue_3) == 0x000038, "Member 'FUNCLIB_CellUtility_C_GetManhattanDistanceBetweenCells::CallFunc_Conv_IntToFloat_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(FUNCLIB_CellUtility_C_GetManhattanDistanceBetweenCells, CallFunc_MakeVector2D_ReturnValue) == 0x00003C, "Member 'FUNCLIB_CellUtility_C_GetManhattanDistanceBetweenCells::CallFunc_MakeVector2D_ReturnValue' has a wrong offset!");
static_assert(offsetof(FUNCLIB_CellUtility_C_GetManhattanDistanceBetweenCells, CallFunc_MakeVector2D_ReturnValue_1) == 0x000044, "Member 'FUNCLIB_CellUtility_C_GetManhattanDistanceBetweenCells::CallFunc_MakeVector2D_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(FUNCLIB_CellUtility_C_GetManhattanDistanceBetweenCells, CallFunc_Add_Vector2DVector2D_ReturnValue) == 0x00004C, "Member 'FUNCLIB_CellUtility_C_GetManhattanDistanceBetweenCells::CallFunc_Add_Vector2DVector2D_ReturnValue' has a wrong offset!");
static_assert(offsetof(FUNCLIB_CellUtility_C_GetManhattanDistanceBetweenCells, CallFunc_Add_Vector2DVector2D_ReturnValue_1) == 0x000054, "Member 'FUNCLIB_CellUtility_C_GetManhattanDistanceBetweenCells::CallFunc_Add_Vector2DVector2D_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(FUNCLIB_CellUtility_C_GetManhattanDistanceBetweenCells, CallFunc_Subtract_Vector2DVector2D_ReturnValue) == 0x00005C, "Member 'FUNCLIB_CellUtility_C_GetManhattanDistanceBetweenCells::CallFunc_Subtract_Vector2DVector2D_ReturnValue' has a wrong offset!");
static_assert(offsetof(FUNCLIB_CellUtility_C_GetManhattanDistanceBetweenCells, CallFunc_BreakVector2D_X) == 0x000064, "Member 'FUNCLIB_CellUtility_C_GetManhattanDistanceBetweenCells::CallFunc_BreakVector2D_X' has a wrong offset!");
static_assert(offsetof(FUNCLIB_CellUtility_C_GetManhattanDistanceBetweenCells, CallFunc_BreakVector2D_Y) == 0x000068, "Member 'FUNCLIB_CellUtility_C_GetManhattanDistanceBetweenCells::CallFunc_BreakVector2D_Y' has a wrong offset!");
static_assert(offsetof(FUNCLIB_CellUtility_C_GetManhattanDistanceBetweenCells, CallFunc_Abs_ReturnValue) == 0x00006C, "Member 'FUNCLIB_CellUtility_C_GetManhattanDistanceBetweenCells::CallFunc_Abs_ReturnValue' has a wrong offset!");
static_assert(offsetof(FUNCLIB_CellUtility_C_GetManhattanDistanceBetweenCells, CallFunc_Abs_ReturnValue_1) == 0x000070, "Member 'FUNCLIB_CellUtility_C_GetManhattanDistanceBetweenCells::CallFunc_Abs_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(FUNCLIB_CellUtility_C_GetManhattanDistanceBetweenCells, CallFunc_Add_FloatFloat_ReturnValue) == 0x000074, "Member 'FUNCLIB_CellUtility_C_GetManhattanDistanceBetweenCells::CallFunc_Add_FloatFloat_ReturnValue' has a wrong offset!");

// Function FUNCLIB_CellUtility.FUNCLIB_CellUtility_C.GetCardinalDirectionFromIntPoint
// 0x0018 (0x0018 - 0x0000)
struct FUNCLIB_CellUtility_C_GetCardinalDirectionFromIntPoint final
{
public:
	struct FIntPoint                              Target;                                            // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UObject*                                __WorldContext;                                    // 0x0008(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ENUM_CardinalDirection                        Direction;                                         // 0x0010(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue;                  // 0x0011(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Greater_IntInt_ReturnValue;               // 0x0012(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Less_IntInt_ReturnValue_1;                // 0x0013(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Greater_IntInt_ReturnValue_1;             // 0x0014(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(FUNCLIB_CellUtility_C_GetCardinalDirectionFromIntPoint) == 0x000008, "Wrong alignment on FUNCLIB_CellUtility_C_GetCardinalDirectionFromIntPoint");
static_assert(sizeof(FUNCLIB_CellUtility_C_GetCardinalDirectionFromIntPoint) == 0x000018, "Wrong size on FUNCLIB_CellUtility_C_GetCardinalDirectionFromIntPoint");
static_assert(offsetof(FUNCLIB_CellUtility_C_GetCardinalDirectionFromIntPoint, Target) == 0x000000, "Member 'FUNCLIB_CellUtility_C_GetCardinalDirectionFromIntPoint::Target' has a wrong offset!");
static_assert(offsetof(FUNCLIB_CellUtility_C_GetCardinalDirectionFromIntPoint, __WorldContext) == 0x000008, "Member 'FUNCLIB_CellUtility_C_GetCardinalDirectionFromIntPoint::__WorldContext' has a wrong offset!");
static_assert(offsetof(FUNCLIB_CellUtility_C_GetCardinalDirectionFromIntPoint, Direction) == 0x000010, "Member 'FUNCLIB_CellUtility_C_GetCardinalDirectionFromIntPoint::Direction' has a wrong offset!");
static_assert(offsetof(FUNCLIB_CellUtility_C_GetCardinalDirectionFromIntPoint, CallFunc_Less_IntInt_ReturnValue) == 0x000011, "Member 'FUNCLIB_CellUtility_C_GetCardinalDirectionFromIntPoint::CallFunc_Less_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(FUNCLIB_CellUtility_C_GetCardinalDirectionFromIntPoint, CallFunc_Greater_IntInt_ReturnValue) == 0x000012, "Member 'FUNCLIB_CellUtility_C_GetCardinalDirectionFromIntPoint::CallFunc_Greater_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(FUNCLIB_CellUtility_C_GetCardinalDirectionFromIntPoint, CallFunc_Less_IntInt_ReturnValue_1) == 0x000013, "Member 'FUNCLIB_CellUtility_C_GetCardinalDirectionFromIntPoint::CallFunc_Less_IntInt_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(FUNCLIB_CellUtility_C_GetCardinalDirectionFromIntPoint, CallFunc_Greater_IntInt_ReturnValue_1) == 0x000014, "Member 'FUNCLIB_CellUtility_C_GetCardinalDirectionFromIntPoint::CallFunc_Greater_IntInt_ReturnValue_1' has a wrong offset!");

// Function FUNCLIB_CellUtility.FUNCLIB_CellUtility_C.GetNeighborCells
// 0x0060 (0x0060 - 0x0000)
struct FUNCLIB_CellUtility_C_GetNeighborCells final
{
public:
	struct FIntPoint                              Source;                                            // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UObject*                                __WorldContext;                                    // 0x0008(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TArray<struct FIntPoint>                      Neighbors;                                         // 0x0010(0x0010)(Parm, OutParm)
	int32                                         CallFunc_Subtract_IntInt_ReturnValue;              // 0x0020(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue;                   // 0x0024(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FIntPoint                              K2Node_MakeStruct_IntPoint;                        // 0x0028(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FIntPoint                              K2Node_MakeStruct_IntPoint_1;                      // 0x0030(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Subtract_IntInt_ReturnValue_1;            // 0x0038(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue_1;                 // 0x003C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FIntPoint                              K2Node_MakeStruct_IntPoint_2;                      // 0x0040(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FIntPoint                              K2Node_MakeStruct_IntPoint_3;                      // 0x0048(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TArray<struct FIntPoint>                      K2Node_MakeArray_Array;                            // 0x0050(0x0010)(ReferenceParm)
};
static_assert(alignof(FUNCLIB_CellUtility_C_GetNeighborCells) == 0x000008, "Wrong alignment on FUNCLIB_CellUtility_C_GetNeighborCells");
static_assert(sizeof(FUNCLIB_CellUtility_C_GetNeighborCells) == 0x000060, "Wrong size on FUNCLIB_CellUtility_C_GetNeighborCells");
static_assert(offsetof(FUNCLIB_CellUtility_C_GetNeighborCells, Source) == 0x000000, "Member 'FUNCLIB_CellUtility_C_GetNeighborCells::Source' has a wrong offset!");
static_assert(offsetof(FUNCLIB_CellUtility_C_GetNeighborCells, __WorldContext) == 0x000008, "Member 'FUNCLIB_CellUtility_C_GetNeighborCells::__WorldContext' has a wrong offset!");
static_assert(offsetof(FUNCLIB_CellUtility_C_GetNeighborCells, Neighbors) == 0x000010, "Member 'FUNCLIB_CellUtility_C_GetNeighborCells::Neighbors' has a wrong offset!");
static_assert(offsetof(FUNCLIB_CellUtility_C_GetNeighborCells, CallFunc_Subtract_IntInt_ReturnValue) == 0x000020, "Member 'FUNCLIB_CellUtility_C_GetNeighborCells::CallFunc_Subtract_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(FUNCLIB_CellUtility_C_GetNeighborCells, CallFunc_Add_IntInt_ReturnValue) == 0x000024, "Member 'FUNCLIB_CellUtility_C_GetNeighborCells::CallFunc_Add_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(FUNCLIB_CellUtility_C_GetNeighborCells, K2Node_MakeStruct_IntPoint) == 0x000028, "Member 'FUNCLIB_CellUtility_C_GetNeighborCells::K2Node_MakeStruct_IntPoint' has a wrong offset!");
static_assert(offsetof(FUNCLIB_CellUtility_C_GetNeighborCells, K2Node_MakeStruct_IntPoint_1) == 0x000030, "Member 'FUNCLIB_CellUtility_C_GetNeighborCells::K2Node_MakeStruct_IntPoint_1' has a wrong offset!");
static_assert(offsetof(FUNCLIB_CellUtility_C_GetNeighborCells, CallFunc_Subtract_IntInt_ReturnValue_1) == 0x000038, "Member 'FUNCLIB_CellUtility_C_GetNeighborCells::CallFunc_Subtract_IntInt_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(FUNCLIB_CellUtility_C_GetNeighborCells, CallFunc_Add_IntInt_ReturnValue_1) == 0x00003C, "Member 'FUNCLIB_CellUtility_C_GetNeighborCells::CallFunc_Add_IntInt_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(FUNCLIB_CellUtility_C_GetNeighborCells, K2Node_MakeStruct_IntPoint_2) == 0x000040, "Member 'FUNCLIB_CellUtility_C_GetNeighborCells::K2Node_MakeStruct_IntPoint_2' has a wrong offset!");
static_assert(offsetof(FUNCLIB_CellUtility_C_GetNeighborCells, K2Node_MakeStruct_IntPoint_3) == 0x000048, "Member 'FUNCLIB_CellUtility_C_GetNeighborCells::K2Node_MakeStruct_IntPoint_3' has a wrong offset!");
static_assert(offsetof(FUNCLIB_CellUtility_C_GetNeighborCells, K2Node_MakeArray_Array) == 0x000050, "Member 'FUNCLIB_CellUtility_C_GetNeighborCells::K2Node_MakeArray_Array' has a wrong offset!");

// Function FUNCLIB_CellUtility.FUNCLIB_CellUtility_C.GetDirectionToCell
// 0x0040 (0x0040 - 0x0000)
struct FUNCLIB_CellUtility_C_GetDirectionToCell final
{
public:
	struct FIntPoint                              Source;                                            // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FIntPoint                              Target;                                            // 0x0008(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UObject*                                __WorldContext;                                    // 0x0010(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ENUM_CardinalDirection                        Direction;                                         // 0x0018(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_19[0x3];                                       // 0x0019(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FIntPoint                              PointToTarget;                                     // 0x001C(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FIntPoint                              CallFunc_Subtract_IntPointIntPoint_ReturnValue;    // 0x0024(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Greater_IntInt_ReturnValue;               // 0x002C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Greater_IntInt_ReturnValue_1;             // 0x002D(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_2E[0x2];                                       // 0x002E(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Abs_Int_ReturnValue;                      // 0x0030(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Abs_Int_ReturnValue_1;                    // 0x0034(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Greater_IntInt_ReturnValue_2;             // 0x0038(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_EqualEqual_IntInt_ReturnValue;            // 0x0039(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_EqualEqual_IntInt_ReturnValue_1;          // 0x003A(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BooleanAND_ReturnValue;                   // 0x003B(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(FUNCLIB_CellUtility_C_GetDirectionToCell) == 0x000008, "Wrong alignment on FUNCLIB_CellUtility_C_GetDirectionToCell");
static_assert(sizeof(FUNCLIB_CellUtility_C_GetDirectionToCell) == 0x000040, "Wrong size on FUNCLIB_CellUtility_C_GetDirectionToCell");
static_assert(offsetof(FUNCLIB_CellUtility_C_GetDirectionToCell, Source) == 0x000000, "Member 'FUNCLIB_CellUtility_C_GetDirectionToCell::Source' has a wrong offset!");
static_assert(offsetof(FUNCLIB_CellUtility_C_GetDirectionToCell, Target) == 0x000008, "Member 'FUNCLIB_CellUtility_C_GetDirectionToCell::Target' has a wrong offset!");
static_assert(offsetof(FUNCLIB_CellUtility_C_GetDirectionToCell, __WorldContext) == 0x000010, "Member 'FUNCLIB_CellUtility_C_GetDirectionToCell::__WorldContext' has a wrong offset!");
static_assert(offsetof(FUNCLIB_CellUtility_C_GetDirectionToCell, Direction) == 0x000018, "Member 'FUNCLIB_CellUtility_C_GetDirectionToCell::Direction' has a wrong offset!");
static_assert(offsetof(FUNCLIB_CellUtility_C_GetDirectionToCell, PointToTarget) == 0x00001C, "Member 'FUNCLIB_CellUtility_C_GetDirectionToCell::PointToTarget' has a wrong offset!");
static_assert(offsetof(FUNCLIB_CellUtility_C_GetDirectionToCell, CallFunc_Subtract_IntPointIntPoint_ReturnValue) == 0x000024, "Member 'FUNCLIB_CellUtility_C_GetDirectionToCell::CallFunc_Subtract_IntPointIntPoint_ReturnValue' has a wrong offset!");
static_assert(offsetof(FUNCLIB_CellUtility_C_GetDirectionToCell, CallFunc_Greater_IntInt_ReturnValue) == 0x00002C, "Member 'FUNCLIB_CellUtility_C_GetDirectionToCell::CallFunc_Greater_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(FUNCLIB_CellUtility_C_GetDirectionToCell, CallFunc_Greater_IntInt_ReturnValue_1) == 0x00002D, "Member 'FUNCLIB_CellUtility_C_GetDirectionToCell::CallFunc_Greater_IntInt_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(FUNCLIB_CellUtility_C_GetDirectionToCell, CallFunc_Abs_Int_ReturnValue) == 0x000030, "Member 'FUNCLIB_CellUtility_C_GetDirectionToCell::CallFunc_Abs_Int_ReturnValue' has a wrong offset!");
static_assert(offsetof(FUNCLIB_CellUtility_C_GetDirectionToCell, CallFunc_Abs_Int_ReturnValue_1) == 0x000034, "Member 'FUNCLIB_CellUtility_C_GetDirectionToCell::CallFunc_Abs_Int_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(FUNCLIB_CellUtility_C_GetDirectionToCell, CallFunc_Greater_IntInt_ReturnValue_2) == 0x000038, "Member 'FUNCLIB_CellUtility_C_GetDirectionToCell::CallFunc_Greater_IntInt_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(FUNCLIB_CellUtility_C_GetDirectionToCell, CallFunc_EqualEqual_IntInt_ReturnValue) == 0x000039, "Member 'FUNCLIB_CellUtility_C_GetDirectionToCell::CallFunc_EqualEqual_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(FUNCLIB_CellUtility_C_GetDirectionToCell, CallFunc_EqualEqual_IntInt_ReturnValue_1) == 0x00003A, "Member 'FUNCLIB_CellUtility_C_GetDirectionToCell::CallFunc_EqualEqual_IntInt_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(FUNCLIB_CellUtility_C_GetDirectionToCell, CallFunc_BooleanAND_ReturnValue) == 0x00003B, "Member 'FUNCLIB_CellUtility_C_GetDirectionToCell::CallFunc_BooleanAND_ReturnValue' has a wrong offset!");

// Function FUNCLIB_CellUtility.FUNCLIB_CellUtility_C.GetVectorFromCardinalDirection
// 0x0020 (0x0020 - 0x0000)
struct FUNCLIB_CellUtility_C_GetVectorFromCardinalDirection final
{
public:
	ENUM_CardinalDirection                        Direction;                                         // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UObject*                                __WorldContext;                                    // 0x0008(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                Vector;                                            // 0x0010(0x000C)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_SwitchEnum_CmpSuccess;                      // 0x001C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(FUNCLIB_CellUtility_C_GetVectorFromCardinalDirection) == 0x000008, "Wrong alignment on FUNCLIB_CellUtility_C_GetVectorFromCardinalDirection");
static_assert(sizeof(FUNCLIB_CellUtility_C_GetVectorFromCardinalDirection) == 0x000020, "Wrong size on FUNCLIB_CellUtility_C_GetVectorFromCardinalDirection");
static_assert(offsetof(FUNCLIB_CellUtility_C_GetVectorFromCardinalDirection, Direction) == 0x000000, "Member 'FUNCLIB_CellUtility_C_GetVectorFromCardinalDirection::Direction' has a wrong offset!");
static_assert(offsetof(FUNCLIB_CellUtility_C_GetVectorFromCardinalDirection, __WorldContext) == 0x000008, "Member 'FUNCLIB_CellUtility_C_GetVectorFromCardinalDirection::__WorldContext' has a wrong offset!");
static_assert(offsetof(FUNCLIB_CellUtility_C_GetVectorFromCardinalDirection, Vector) == 0x000010, "Member 'FUNCLIB_CellUtility_C_GetVectorFromCardinalDirection::Vector' has a wrong offset!");
static_assert(offsetof(FUNCLIB_CellUtility_C_GetVectorFromCardinalDirection, K2Node_SwitchEnum_CmpSuccess) == 0x00001C, "Member 'FUNCLIB_CellUtility_C_GetVectorFromCardinalDirection::K2Node_SwitchEnum_CmpSuccess' has a wrong offset!");

// Function FUNCLIB_CellUtility.FUNCLIB_CellUtility_C.GetIntPointFromCardinalDirection
// 0x0048 (0x0048 - 0x0000)
struct FUNCLIB_CellUtility_C_GetIntPointFromCardinalDirection final
{
public:
	ENUM_CardinalDirection                        Direction;                                         // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UObject*                                __WorldContext;                                    // 0x0008(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FIntPoint                              Point;                                             // 0x0010(0x0008)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FIntPoint                              K2Node_MakeStruct_IntPoint;                        // 0x0018(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_SwitchEnum_CmpSuccess;                      // 0x0020(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_21[0x3];                                       // 0x0021(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FIntPoint                              K2Node_MakeStruct_IntPoint_1;                      // 0x0024(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FIntPoint                              K2Node_MakeStruct_IntPoint_2;                      // 0x002C(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FIntPoint                              K2Node_MakeStruct_IntPoint_3;                      // 0x0034(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FIntPoint                              K2Node_MakeStruct_IntPoint_4;                      // 0x003C(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(FUNCLIB_CellUtility_C_GetIntPointFromCardinalDirection) == 0x000008, "Wrong alignment on FUNCLIB_CellUtility_C_GetIntPointFromCardinalDirection");
static_assert(sizeof(FUNCLIB_CellUtility_C_GetIntPointFromCardinalDirection) == 0x000048, "Wrong size on FUNCLIB_CellUtility_C_GetIntPointFromCardinalDirection");
static_assert(offsetof(FUNCLIB_CellUtility_C_GetIntPointFromCardinalDirection, Direction) == 0x000000, "Member 'FUNCLIB_CellUtility_C_GetIntPointFromCardinalDirection::Direction' has a wrong offset!");
static_assert(offsetof(FUNCLIB_CellUtility_C_GetIntPointFromCardinalDirection, __WorldContext) == 0x000008, "Member 'FUNCLIB_CellUtility_C_GetIntPointFromCardinalDirection::__WorldContext' has a wrong offset!");
static_assert(offsetof(FUNCLIB_CellUtility_C_GetIntPointFromCardinalDirection, Point) == 0x000010, "Member 'FUNCLIB_CellUtility_C_GetIntPointFromCardinalDirection::Point' has a wrong offset!");
static_assert(offsetof(FUNCLIB_CellUtility_C_GetIntPointFromCardinalDirection, K2Node_MakeStruct_IntPoint) == 0x000018, "Member 'FUNCLIB_CellUtility_C_GetIntPointFromCardinalDirection::K2Node_MakeStruct_IntPoint' has a wrong offset!");
static_assert(offsetof(FUNCLIB_CellUtility_C_GetIntPointFromCardinalDirection, K2Node_SwitchEnum_CmpSuccess) == 0x000020, "Member 'FUNCLIB_CellUtility_C_GetIntPointFromCardinalDirection::K2Node_SwitchEnum_CmpSuccess' has a wrong offset!");
static_assert(offsetof(FUNCLIB_CellUtility_C_GetIntPointFromCardinalDirection, K2Node_MakeStruct_IntPoint_1) == 0x000024, "Member 'FUNCLIB_CellUtility_C_GetIntPointFromCardinalDirection::K2Node_MakeStruct_IntPoint_1' has a wrong offset!");
static_assert(offsetof(FUNCLIB_CellUtility_C_GetIntPointFromCardinalDirection, K2Node_MakeStruct_IntPoint_2) == 0x00002C, "Member 'FUNCLIB_CellUtility_C_GetIntPointFromCardinalDirection::K2Node_MakeStruct_IntPoint_2' has a wrong offset!");
static_assert(offsetof(FUNCLIB_CellUtility_C_GetIntPointFromCardinalDirection, K2Node_MakeStruct_IntPoint_3) == 0x000034, "Member 'FUNCLIB_CellUtility_C_GetIntPointFromCardinalDirection::K2Node_MakeStruct_IntPoint_3' has a wrong offset!");
static_assert(offsetof(FUNCLIB_CellUtility_C_GetIntPointFromCardinalDirection, K2Node_MakeStruct_IntPoint_4) == 0x00003C, "Member 'FUNCLIB_CellUtility_C_GetIntPointFromCardinalDirection::K2Node_MakeStruct_IntPoint_4' has a wrong offset!");

// Function FUNCLIB_CellUtility.FUNCLIB_CellUtility_C.GetCellTangentVector
// 0x0040 (0x0040 - 0x0000)
struct FUNCLIB_CellUtility_C_GetCellTangentVector final
{
public:
	struct FVector                                Vector;                                            // 0x0000(0x000C)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UObject*                                __WorldContext;                                    // 0x0010(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                Tanget;                                            // 0x0018(0x000C)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector_X;                            // 0x0024(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector_Y;                            // 0x0028(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector_Z;                            // 0x002C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Multiply_FloatFloat_ReturnValue;          // 0x0030(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_MakeVector_ReturnValue;                   // 0x0034(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(FUNCLIB_CellUtility_C_GetCellTangentVector) == 0x000008, "Wrong alignment on FUNCLIB_CellUtility_C_GetCellTangentVector");
static_assert(sizeof(FUNCLIB_CellUtility_C_GetCellTangentVector) == 0x000040, "Wrong size on FUNCLIB_CellUtility_C_GetCellTangentVector");
static_assert(offsetof(FUNCLIB_CellUtility_C_GetCellTangentVector, Vector) == 0x000000, "Member 'FUNCLIB_CellUtility_C_GetCellTangentVector::Vector' has a wrong offset!");
static_assert(offsetof(FUNCLIB_CellUtility_C_GetCellTangentVector, __WorldContext) == 0x000010, "Member 'FUNCLIB_CellUtility_C_GetCellTangentVector::__WorldContext' has a wrong offset!");
static_assert(offsetof(FUNCLIB_CellUtility_C_GetCellTangentVector, Tanget) == 0x000018, "Member 'FUNCLIB_CellUtility_C_GetCellTangentVector::Tanget' has a wrong offset!");
static_assert(offsetof(FUNCLIB_CellUtility_C_GetCellTangentVector, CallFunc_BreakVector_X) == 0x000024, "Member 'FUNCLIB_CellUtility_C_GetCellTangentVector::CallFunc_BreakVector_X' has a wrong offset!");
static_assert(offsetof(FUNCLIB_CellUtility_C_GetCellTangentVector, CallFunc_BreakVector_Y) == 0x000028, "Member 'FUNCLIB_CellUtility_C_GetCellTangentVector::CallFunc_BreakVector_Y' has a wrong offset!");
static_assert(offsetof(FUNCLIB_CellUtility_C_GetCellTangentVector, CallFunc_BreakVector_Z) == 0x00002C, "Member 'FUNCLIB_CellUtility_C_GetCellTangentVector::CallFunc_BreakVector_Z' has a wrong offset!");
static_assert(offsetof(FUNCLIB_CellUtility_C_GetCellTangentVector, CallFunc_Multiply_FloatFloat_ReturnValue) == 0x000030, "Member 'FUNCLIB_CellUtility_C_GetCellTangentVector::CallFunc_Multiply_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(FUNCLIB_CellUtility_C_GetCellTangentVector, CallFunc_MakeVector_ReturnValue) == 0x000034, "Member 'FUNCLIB_CellUtility_C_GetCellTangentVector::CallFunc_MakeVector_ReturnValue' has a wrong offset!");

// Function FUNCLIB_CellUtility.FUNCLIB_CellUtility_C.GetCellWorldDirection
// 0x0040 (0x0040 - 0x0000)
struct FUNCLIB_CellUtility_C_GetCellWorldDirection final
{
public:
	struct FVector                                Direction;                                         // 0x0000(0x000C)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UObject*                                __WorldContext;                                    // 0x0010(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                WorldDirection;                                    // 0x0018(0x000C)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector_X;                            // 0x0024(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector_Y;                            // 0x0028(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector_Z;                            // 0x002C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_MakeVector_ReturnValue;                   // 0x0030(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(FUNCLIB_CellUtility_C_GetCellWorldDirection) == 0x000008, "Wrong alignment on FUNCLIB_CellUtility_C_GetCellWorldDirection");
static_assert(sizeof(FUNCLIB_CellUtility_C_GetCellWorldDirection) == 0x000040, "Wrong size on FUNCLIB_CellUtility_C_GetCellWorldDirection");
static_assert(offsetof(FUNCLIB_CellUtility_C_GetCellWorldDirection, Direction) == 0x000000, "Member 'FUNCLIB_CellUtility_C_GetCellWorldDirection::Direction' has a wrong offset!");
static_assert(offsetof(FUNCLIB_CellUtility_C_GetCellWorldDirection, __WorldContext) == 0x000010, "Member 'FUNCLIB_CellUtility_C_GetCellWorldDirection::__WorldContext' has a wrong offset!");
static_assert(offsetof(FUNCLIB_CellUtility_C_GetCellWorldDirection, WorldDirection) == 0x000018, "Member 'FUNCLIB_CellUtility_C_GetCellWorldDirection::WorldDirection' has a wrong offset!");
static_assert(offsetof(FUNCLIB_CellUtility_C_GetCellWorldDirection, CallFunc_BreakVector_X) == 0x000024, "Member 'FUNCLIB_CellUtility_C_GetCellWorldDirection::CallFunc_BreakVector_X' has a wrong offset!");
static_assert(offsetof(FUNCLIB_CellUtility_C_GetCellWorldDirection, CallFunc_BreakVector_Y) == 0x000028, "Member 'FUNCLIB_CellUtility_C_GetCellWorldDirection::CallFunc_BreakVector_Y' has a wrong offset!");
static_assert(offsetof(FUNCLIB_CellUtility_C_GetCellWorldDirection, CallFunc_BreakVector_Z) == 0x00002C, "Member 'FUNCLIB_CellUtility_C_GetCellWorldDirection::CallFunc_BreakVector_Z' has a wrong offset!");
static_assert(offsetof(FUNCLIB_CellUtility_C_GetCellWorldDirection, CallFunc_MakeVector_ReturnValue) == 0x000030, "Member 'FUNCLIB_CellUtility_C_GetCellWorldDirection::CallFunc_MakeVector_ReturnValue' has a wrong offset!");

// Function FUNCLIB_CellUtility.FUNCLIB_CellUtility_C.GetWorldToCellDirection
// 0x0040 (0x0040 - 0x0000)
struct FUNCLIB_CellUtility_C_GetWorldToCellDirection final
{
public:
	struct FVector                                WorldDirection;                                    // 0x0000(0x000C)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UObject*                                __WorldContext;                                    // 0x0010(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CellDirection;                                     // 0x0018(0x000C)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector_X;                            // 0x0024(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector_Y;                            // 0x0028(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector_Z;                            // 0x002C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_MakeVector_ReturnValue;                   // 0x0030(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(FUNCLIB_CellUtility_C_GetWorldToCellDirection) == 0x000008, "Wrong alignment on FUNCLIB_CellUtility_C_GetWorldToCellDirection");
static_assert(sizeof(FUNCLIB_CellUtility_C_GetWorldToCellDirection) == 0x000040, "Wrong size on FUNCLIB_CellUtility_C_GetWorldToCellDirection");
static_assert(offsetof(FUNCLIB_CellUtility_C_GetWorldToCellDirection, WorldDirection) == 0x000000, "Member 'FUNCLIB_CellUtility_C_GetWorldToCellDirection::WorldDirection' has a wrong offset!");
static_assert(offsetof(FUNCLIB_CellUtility_C_GetWorldToCellDirection, __WorldContext) == 0x000010, "Member 'FUNCLIB_CellUtility_C_GetWorldToCellDirection::__WorldContext' has a wrong offset!");
static_assert(offsetof(FUNCLIB_CellUtility_C_GetWorldToCellDirection, CellDirection) == 0x000018, "Member 'FUNCLIB_CellUtility_C_GetWorldToCellDirection::CellDirection' has a wrong offset!");
static_assert(offsetof(FUNCLIB_CellUtility_C_GetWorldToCellDirection, CallFunc_BreakVector_X) == 0x000024, "Member 'FUNCLIB_CellUtility_C_GetWorldToCellDirection::CallFunc_BreakVector_X' has a wrong offset!");
static_assert(offsetof(FUNCLIB_CellUtility_C_GetWorldToCellDirection, CallFunc_BreakVector_Y) == 0x000028, "Member 'FUNCLIB_CellUtility_C_GetWorldToCellDirection::CallFunc_BreakVector_Y' has a wrong offset!");
static_assert(offsetof(FUNCLIB_CellUtility_C_GetWorldToCellDirection, CallFunc_BreakVector_Z) == 0x00002C, "Member 'FUNCLIB_CellUtility_C_GetWorldToCellDirection::CallFunc_BreakVector_Z' has a wrong offset!");
static_assert(offsetof(FUNCLIB_CellUtility_C_GetWorldToCellDirection, CallFunc_MakeVector_ReturnValue) == 0x000030, "Member 'FUNCLIB_CellUtility_C_GetWorldToCellDirection::CallFunc_MakeVector_ReturnValue' has a wrong offset!");

// Function FUNCLIB_CellUtility.FUNCLIB_CellUtility_C.ExtractStraightLinePath
// 0x0068 (0x0068 - 0x0000)
struct FUNCLIB_CellUtility_C_ExtractStraightLinePath final
{
public:
	struct FIntPoint                              SourceCell;                                        // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TArray<struct FIntPoint>                      PathToModify;                                      // 0x0008(0x0010)(BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
	class UObject*                                __WorldContext;                                    // 0x0018(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ENUM_CardinalDirection                        Direction;                                         // 0x0020(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ENUM_CardinalDirection                        CurrentDirection;                                  // 0x0021(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_22[0x2];                                       // 0x0022(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         PathIndex;                                         // 0x0024(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ENUM_CardinalDirection                        SourceDirection;                                   // 0x0028(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Variable;                                // 0x0029(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_2A[0x2];                                       // 0x002A(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Temp_int_Variable;                                 // 0x002C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue;                   // 0x0030(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Not_PreBool_ReturnValue;                  // 0x0034(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_35[0x3];                                       // 0x0035(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Array_LastIndex_ReturnValue;              // 0x0038(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_LessEqual_IntInt_ReturnValue;             // 0x003C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BooleanAND_ReturnValue;                   // 0x003D(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_3E[0x2];                                       // 0x003E(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	struct FIntPoint                              CallFunc_Array_Get_Item;                           // 0x0040(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FIntPoint                              CallFunc_Subtract_IntPointIntPoint_ReturnValue;    // 0x0048(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ENUM_CardinalDirection                        CallFunc_GetCardinalDirectionFromIntPoint_Direction; // 0x0050(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_51[0x3];                                       // 0x0051(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Subtract_IntInt_ReturnValue;              // 0x0054(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_NotEqual_ByteByte_ReturnValue;            // 0x0058(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_59[0x3];                                       // 0x0059(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FIntPoint                              CallFunc_Subtract_IntPointIntPoint_ReturnValue_1;  // 0x005C(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ENUM_CardinalDirection                        CallFunc_GetCardinalDirectionFromIntPoint_Direction_1; // 0x0064(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(FUNCLIB_CellUtility_C_ExtractStraightLinePath) == 0x000008, "Wrong alignment on FUNCLIB_CellUtility_C_ExtractStraightLinePath");
static_assert(sizeof(FUNCLIB_CellUtility_C_ExtractStraightLinePath) == 0x000068, "Wrong size on FUNCLIB_CellUtility_C_ExtractStraightLinePath");
static_assert(offsetof(FUNCLIB_CellUtility_C_ExtractStraightLinePath, SourceCell) == 0x000000, "Member 'FUNCLIB_CellUtility_C_ExtractStraightLinePath::SourceCell' has a wrong offset!");
static_assert(offsetof(FUNCLIB_CellUtility_C_ExtractStraightLinePath, PathToModify) == 0x000008, "Member 'FUNCLIB_CellUtility_C_ExtractStraightLinePath::PathToModify' has a wrong offset!");
static_assert(offsetof(FUNCLIB_CellUtility_C_ExtractStraightLinePath, __WorldContext) == 0x000018, "Member 'FUNCLIB_CellUtility_C_ExtractStraightLinePath::__WorldContext' has a wrong offset!");
static_assert(offsetof(FUNCLIB_CellUtility_C_ExtractStraightLinePath, Direction) == 0x000020, "Member 'FUNCLIB_CellUtility_C_ExtractStraightLinePath::Direction' has a wrong offset!");
static_assert(offsetof(FUNCLIB_CellUtility_C_ExtractStraightLinePath, CurrentDirection) == 0x000021, "Member 'FUNCLIB_CellUtility_C_ExtractStraightLinePath::CurrentDirection' has a wrong offset!");
static_assert(offsetof(FUNCLIB_CellUtility_C_ExtractStraightLinePath, PathIndex) == 0x000024, "Member 'FUNCLIB_CellUtility_C_ExtractStraightLinePath::PathIndex' has a wrong offset!");
static_assert(offsetof(FUNCLIB_CellUtility_C_ExtractStraightLinePath, SourceDirection) == 0x000028, "Member 'FUNCLIB_CellUtility_C_ExtractStraightLinePath::SourceDirection' has a wrong offset!");
static_assert(offsetof(FUNCLIB_CellUtility_C_ExtractStraightLinePath, Temp_bool_Variable) == 0x000029, "Member 'FUNCLIB_CellUtility_C_ExtractStraightLinePath::Temp_bool_Variable' has a wrong offset!");
static_assert(offsetof(FUNCLIB_CellUtility_C_ExtractStraightLinePath, Temp_int_Variable) == 0x00002C, "Member 'FUNCLIB_CellUtility_C_ExtractStraightLinePath::Temp_int_Variable' has a wrong offset!");
static_assert(offsetof(FUNCLIB_CellUtility_C_ExtractStraightLinePath, CallFunc_Add_IntInt_ReturnValue) == 0x000030, "Member 'FUNCLIB_CellUtility_C_ExtractStraightLinePath::CallFunc_Add_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(FUNCLIB_CellUtility_C_ExtractStraightLinePath, CallFunc_Not_PreBool_ReturnValue) == 0x000034, "Member 'FUNCLIB_CellUtility_C_ExtractStraightLinePath::CallFunc_Not_PreBool_ReturnValue' has a wrong offset!");
static_assert(offsetof(FUNCLIB_CellUtility_C_ExtractStraightLinePath, CallFunc_Array_LastIndex_ReturnValue) == 0x000038, "Member 'FUNCLIB_CellUtility_C_ExtractStraightLinePath::CallFunc_Array_LastIndex_ReturnValue' has a wrong offset!");
static_assert(offsetof(FUNCLIB_CellUtility_C_ExtractStraightLinePath, CallFunc_LessEqual_IntInt_ReturnValue) == 0x00003C, "Member 'FUNCLIB_CellUtility_C_ExtractStraightLinePath::CallFunc_LessEqual_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(FUNCLIB_CellUtility_C_ExtractStraightLinePath, CallFunc_BooleanAND_ReturnValue) == 0x00003D, "Member 'FUNCLIB_CellUtility_C_ExtractStraightLinePath::CallFunc_BooleanAND_ReturnValue' has a wrong offset!");
static_assert(offsetof(FUNCLIB_CellUtility_C_ExtractStraightLinePath, CallFunc_Array_Get_Item) == 0x000040, "Member 'FUNCLIB_CellUtility_C_ExtractStraightLinePath::CallFunc_Array_Get_Item' has a wrong offset!");
static_assert(offsetof(FUNCLIB_CellUtility_C_ExtractStraightLinePath, CallFunc_Subtract_IntPointIntPoint_ReturnValue) == 0x000048, "Member 'FUNCLIB_CellUtility_C_ExtractStraightLinePath::CallFunc_Subtract_IntPointIntPoint_ReturnValue' has a wrong offset!");
static_assert(offsetof(FUNCLIB_CellUtility_C_ExtractStraightLinePath, CallFunc_GetCardinalDirectionFromIntPoint_Direction) == 0x000050, "Member 'FUNCLIB_CellUtility_C_ExtractStraightLinePath::CallFunc_GetCardinalDirectionFromIntPoint_Direction' has a wrong offset!");
static_assert(offsetof(FUNCLIB_CellUtility_C_ExtractStraightLinePath, CallFunc_Subtract_IntInt_ReturnValue) == 0x000054, "Member 'FUNCLIB_CellUtility_C_ExtractStraightLinePath::CallFunc_Subtract_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(FUNCLIB_CellUtility_C_ExtractStraightLinePath, CallFunc_NotEqual_ByteByte_ReturnValue) == 0x000058, "Member 'FUNCLIB_CellUtility_C_ExtractStraightLinePath::CallFunc_NotEqual_ByteByte_ReturnValue' has a wrong offset!");
static_assert(offsetof(FUNCLIB_CellUtility_C_ExtractStraightLinePath, CallFunc_Subtract_IntPointIntPoint_ReturnValue_1) == 0x00005C, "Member 'FUNCLIB_CellUtility_C_ExtractStraightLinePath::CallFunc_Subtract_IntPointIntPoint_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(FUNCLIB_CellUtility_C_ExtractStraightLinePath, CallFunc_GetCardinalDirectionFromIntPoint_Direction_1) == 0x000064, "Member 'FUNCLIB_CellUtility_C_ExtractStraightLinePath::CallFunc_GetCardinalDirectionFromIntPoint_Direction_1' has a wrong offset!");

// Function FUNCLIB_CellUtility.FUNCLIB_CellUtility_C.IsAlignedToMoveToCell
// 0x0030 (0x0030 - 0x0000)
struct FUNCLIB_CellUtility_C_IsAlignedToMoveToCell final
{
public:
	struct FSTRUCT_CellLocationData               SourceCellData;                                    // 0x0000(0x0010)(BlueprintVisible, BlueprintReadOnly, Parm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FIntPoint                              TargetCell;                                        // 0x0010(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UObject*                                __WorldContext;                                    // 0x0018(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Result;                                            // 0x0020(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_21[0x3];                                       // 0x0021(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_BreakVector2D_X;                          // 0x0024(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector2D_Y;                          // 0x0028(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_NearlyEqual_FloatFloat_ReturnValue;       // 0x002C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	ENUM_CardinalDirection                        CallFunc_GetDirectionToCell_Direction;             // 0x002D(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_NearlyEqual_FloatFloat_ReturnValue_1;     // 0x002E(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          K2Node_SwitchEnum_CmpSuccess;                      // 0x002F(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(FUNCLIB_CellUtility_C_IsAlignedToMoveToCell) == 0x000008, "Wrong alignment on FUNCLIB_CellUtility_C_IsAlignedToMoveToCell");
static_assert(sizeof(FUNCLIB_CellUtility_C_IsAlignedToMoveToCell) == 0x000030, "Wrong size on FUNCLIB_CellUtility_C_IsAlignedToMoveToCell");
static_assert(offsetof(FUNCLIB_CellUtility_C_IsAlignedToMoveToCell, SourceCellData) == 0x000000, "Member 'FUNCLIB_CellUtility_C_IsAlignedToMoveToCell::SourceCellData' has a wrong offset!");
static_assert(offsetof(FUNCLIB_CellUtility_C_IsAlignedToMoveToCell, TargetCell) == 0x000010, "Member 'FUNCLIB_CellUtility_C_IsAlignedToMoveToCell::TargetCell' has a wrong offset!");
static_assert(offsetof(FUNCLIB_CellUtility_C_IsAlignedToMoveToCell, __WorldContext) == 0x000018, "Member 'FUNCLIB_CellUtility_C_IsAlignedToMoveToCell::__WorldContext' has a wrong offset!");
static_assert(offsetof(FUNCLIB_CellUtility_C_IsAlignedToMoveToCell, Result) == 0x000020, "Member 'FUNCLIB_CellUtility_C_IsAlignedToMoveToCell::Result' has a wrong offset!");
static_assert(offsetof(FUNCLIB_CellUtility_C_IsAlignedToMoveToCell, CallFunc_BreakVector2D_X) == 0x000024, "Member 'FUNCLIB_CellUtility_C_IsAlignedToMoveToCell::CallFunc_BreakVector2D_X' has a wrong offset!");
static_assert(offsetof(FUNCLIB_CellUtility_C_IsAlignedToMoveToCell, CallFunc_BreakVector2D_Y) == 0x000028, "Member 'FUNCLIB_CellUtility_C_IsAlignedToMoveToCell::CallFunc_BreakVector2D_Y' has a wrong offset!");
static_assert(offsetof(FUNCLIB_CellUtility_C_IsAlignedToMoveToCell, CallFunc_NearlyEqual_FloatFloat_ReturnValue) == 0x00002C, "Member 'FUNCLIB_CellUtility_C_IsAlignedToMoveToCell::CallFunc_NearlyEqual_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(FUNCLIB_CellUtility_C_IsAlignedToMoveToCell, CallFunc_GetDirectionToCell_Direction) == 0x00002D, "Member 'FUNCLIB_CellUtility_C_IsAlignedToMoveToCell::CallFunc_GetDirectionToCell_Direction' has a wrong offset!");
static_assert(offsetof(FUNCLIB_CellUtility_C_IsAlignedToMoveToCell, CallFunc_NearlyEqual_FloatFloat_ReturnValue_1) == 0x00002E, "Member 'FUNCLIB_CellUtility_C_IsAlignedToMoveToCell::CallFunc_NearlyEqual_FloatFloat_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(FUNCLIB_CellUtility_C_IsAlignedToMoveToCell, K2Node_SwitchEnum_CmpSuccess) == 0x00002F, "Member 'FUNCLIB_CellUtility_C_IsAlignedToMoveToCell::K2Node_SwitchEnum_CmpSuccess' has a wrong offset!");

// Function FUNCLIB_CellUtility.FUNCLIB_CellUtility_C.GetPathTravelDistance
// 0x0060 (0x0060 - 0x0000)
struct FUNCLIB_CellUtility_C_GetPathTravelDistance final
{
public:
	struct FSTRUCT_CellLocationData               SourceCellData;                                    // 0x0000(0x0010)(BlueprintVisible, BlueprintReadOnly, Parm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TArray<struct FIntPoint>                      Path;                                              // 0x0010(0x0010)(BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
	class UObject*                                __WorldContext;                                    // 0x0020(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Distance;                                          // 0x0028(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         DistanceToFirstCell;                               // 0x002C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Length_ReturnValue;                 // 0x0030(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Subtract_IntInt_ReturnValue;              // 0x0034(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FSTRUCT_CellLocationData               K2Node_MakeStruct_STRUCT_CellLocationData;         // 0x0038(0x0010)(IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Conv_IntToFloat_ReturnValue;              // 0x0048(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Add_FloatFloat_ReturnValue;               // 0x004C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_GetEuclideanDistanceBetweenCells_Distance; // 0x0050(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Length_ReturnValue_1;               // 0x0054(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Greater_IntInt_ReturnValue;               // 0x0058(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(FUNCLIB_CellUtility_C_GetPathTravelDistance) == 0x000008, "Wrong alignment on FUNCLIB_CellUtility_C_GetPathTravelDistance");
static_assert(sizeof(FUNCLIB_CellUtility_C_GetPathTravelDistance) == 0x000060, "Wrong size on FUNCLIB_CellUtility_C_GetPathTravelDistance");
static_assert(offsetof(FUNCLIB_CellUtility_C_GetPathTravelDistance, SourceCellData) == 0x000000, "Member 'FUNCLIB_CellUtility_C_GetPathTravelDistance::SourceCellData' has a wrong offset!");
static_assert(offsetof(FUNCLIB_CellUtility_C_GetPathTravelDistance, Path) == 0x000010, "Member 'FUNCLIB_CellUtility_C_GetPathTravelDistance::Path' has a wrong offset!");
static_assert(offsetof(FUNCLIB_CellUtility_C_GetPathTravelDistance, __WorldContext) == 0x000020, "Member 'FUNCLIB_CellUtility_C_GetPathTravelDistance::__WorldContext' has a wrong offset!");
static_assert(offsetof(FUNCLIB_CellUtility_C_GetPathTravelDistance, Distance) == 0x000028, "Member 'FUNCLIB_CellUtility_C_GetPathTravelDistance::Distance' has a wrong offset!");
static_assert(offsetof(FUNCLIB_CellUtility_C_GetPathTravelDistance, DistanceToFirstCell) == 0x00002C, "Member 'FUNCLIB_CellUtility_C_GetPathTravelDistance::DistanceToFirstCell' has a wrong offset!");
static_assert(offsetof(FUNCLIB_CellUtility_C_GetPathTravelDistance, CallFunc_Array_Length_ReturnValue) == 0x000030, "Member 'FUNCLIB_CellUtility_C_GetPathTravelDistance::CallFunc_Array_Length_ReturnValue' has a wrong offset!");
static_assert(offsetof(FUNCLIB_CellUtility_C_GetPathTravelDistance, CallFunc_Subtract_IntInt_ReturnValue) == 0x000034, "Member 'FUNCLIB_CellUtility_C_GetPathTravelDistance::CallFunc_Subtract_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(FUNCLIB_CellUtility_C_GetPathTravelDistance, K2Node_MakeStruct_STRUCT_CellLocationData) == 0x000038, "Member 'FUNCLIB_CellUtility_C_GetPathTravelDistance::K2Node_MakeStruct_STRUCT_CellLocationData' has a wrong offset!");
static_assert(offsetof(FUNCLIB_CellUtility_C_GetPathTravelDistance, CallFunc_Conv_IntToFloat_ReturnValue) == 0x000048, "Member 'FUNCLIB_CellUtility_C_GetPathTravelDistance::CallFunc_Conv_IntToFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(FUNCLIB_CellUtility_C_GetPathTravelDistance, CallFunc_Add_FloatFloat_ReturnValue) == 0x00004C, "Member 'FUNCLIB_CellUtility_C_GetPathTravelDistance::CallFunc_Add_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(FUNCLIB_CellUtility_C_GetPathTravelDistance, CallFunc_GetEuclideanDistanceBetweenCells_Distance) == 0x000050, "Member 'FUNCLIB_CellUtility_C_GetPathTravelDistance::CallFunc_GetEuclideanDistanceBetweenCells_Distance' has a wrong offset!");
static_assert(offsetof(FUNCLIB_CellUtility_C_GetPathTravelDistance, CallFunc_Array_Length_ReturnValue_1) == 0x000054, "Member 'FUNCLIB_CellUtility_C_GetPathTravelDistance::CallFunc_Array_Length_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(FUNCLIB_CellUtility_C_GetPathTravelDistance, CallFunc_Greater_IntInt_ReturnValue) == 0x000058, "Member 'FUNCLIB_CellUtility_C_GetPathTravelDistance::CallFunc_Greater_IntInt_ReturnValue' has a wrong offset!");

// Function FUNCLIB_CellUtility.FUNCLIB_CellUtility_C.GetVectorFromCellLocationData
// 0x0038 (0x0038 - 0x0000)
struct FUNCLIB_CellUtility_C_GetVectorFromCellLocationData final
{
public:
	struct FSTRUCT_CellLocationData               CellLocation;                                      // 0x0000(0x0010)(BlueprintVisible, BlueprintReadOnly, Parm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UObject*                                __WorldContext;                                    // 0x0010(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector2D                              Result;                                            // 0x0018(0x0008)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Conv_IntToFloat_ReturnValue;              // 0x0020(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Conv_IntToFloat_ReturnValue_1;            // 0x0024(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector2D                              CallFunc_MakeVector2D_ReturnValue;                 // 0x0028(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector2D                              CallFunc_Add_Vector2DVector2D_ReturnValue;         // 0x0030(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(FUNCLIB_CellUtility_C_GetVectorFromCellLocationData) == 0x000008, "Wrong alignment on FUNCLIB_CellUtility_C_GetVectorFromCellLocationData");
static_assert(sizeof(FUNCLIB_CellUtility_C_GetVectorFromCellLocationData) == 0x000038, "Wrong size on FUNCLIB_CellUtility_C_GetVectorFromCellLocationData");
static_assert(offsetof(FUNCLIB_CellUtility_C_GetVectorFromCellLocationData, CellLocation) == 0x000000, "Member 'FUNCLIB_CellUtility_C_GetVectorFromCellLocationData::CellLocation' has a wrong offset!");
static_assert(offsetof(FUNCLIB_CellUtility_C_GetVectorFromCellLocationData, __WorldContext) == 0x000010, "Member 'FUNCLIB_CellUtility_C_GetVectorFromCellLocationData::__WorldContext' has a wrong offset!");
static_assert(offsetof(FUNCLIB_CellUtility_C_GetVectorFromCellLocationData, Result) == 0x000018, "Member 'FUNCLIB_CellUtility_C_GetVectorFromCellLocationData::Result' has a wrong offset!");
static_assert(offsetof(FUNCLIB_CellUtility_C_GetVectorFromCellLocationData, CallFunc_Conv_IntToFloat_ReturnValue) == 0x000020, "Member 'FUNCLIB_CellUtility_C_GetVectorFromCellLocationData::CallFunc_Conv_IntToFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(FUNCLIB_CellUtility_C_GetVectorFromCellLocationData, CallFunc_Conv_IntToFloat_ReturnValue_1) == 0x000024, "Member 'FUNCLIB_CellUtility_C_GetVectorFromCellLocationData::CallFunc_Conv_IntToFloat_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(FUNCLIB_CellUtility_C_GetVectorFromCellLocationData, CallFunc_MakeVector2D_ReturnValue) == 0x000028, "Member 'FUNCLIB_CellUtility_C_GetVectorFromCellLocationData::CallFunc_MakeVector2D_ReturnValue' has a wrong offset!");
static_assert(offsetof(FUNCLIB_CellUtility_C_GetVectorFromCellLocationData, CallFunc_Add_Vector2DVector2D_ReturnValue) == 0x000030, "Member 'FUNCLIB_CellUtility_C_GetVectorFromCellLocationData::CallFunc_Add_Vector2DVector2D_ReturnValue' has a wrong offset!");

// Function FUNCLIB_CellUtility.FUNCLIB_CellUtility_C.IsIntPointContainedInBounds
// 0x0038 (0x0038 - 0x0000)
struct FUNCLIB_CellUtility_C_IsIntPointContainedInBounds final
{
public:
	struct FIntPoint                              Point;                                             // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FIntPoint                              BoundsMin;                                         // 0x0008(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FIntPoint                              BoundsMax;                                         // 0x0010(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          InclusiveMax;                                      // 0x0018(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_19[0x7];                                       // 0x0019(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UObject*                                __WorldContext;                                    // 0x0020(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Result;                                            // 0x0028(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Temp_bool_Variable;                                // 0x0029(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_GreaterEqual_IntInt_ReturnValue;          // 0x002A(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_LessEqual_IntInt_ReturnValue;             // 0x002B(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Less_IntInt_ReturnValue;                  // 0x002C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_GreaterEqual_IntInt_ReturnValue_1;        // 0x002D(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_LessEqual_IntInt_ReturnValue_1;           // 0x002E(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BooleanAND_ReturnValue;                   // 0x002F(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BooleanAND_ReturnValue_1;                 // 0x0030(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Less_IntInt_ReturnValue_1;                // 0x0031(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BooleanAND_ReturnValue_2;                 // 0x0032(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          K2Node_Select_Default;                             // 0x0033(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BooleanAND_ReturnValue_3;                 // 0x0034(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(FUNCLIB_CellUtility_C_IsIntPointContainedInBounds) == 0x000008, "Wrong alignment on FUNCLIB_CellUtility_C_IsIntPointContainedInBounds");
static_assert(sizeof(FUNCLIB_CellUtility_C_IsIntPointContainedInBounds) == 0x000038, "Wrong size on FUNCLIB_CellUtility_C_IsIntPointContainedInBounds");
static_assert(offsetof(FUNCLIB_CellUtility_C_IsIntPointContainedInBounds, Point) == 0x000000, "Member 'FUNCLIB_CellUtility_C_IsIntPointContainedInBounds::Point' has a wrong offset!");
static_assert(offsetof(FUNCLIB_CellUtility_C_IsIntPointContainedInBounds, BoundsMin) == 0x000008, "Member 'FUNCLIB_CellUtility_C_IsIntPointContainedInBounds::BoundsMin' has a wrong offset!");
static_assert(offsetof(FUNCLIB_CellUtility_C_IsIntPointContainedInBounds, BoundsMax) == 0x000010, "Member 'FUNCLIB_CellUtility_C_IsIntPointContainedInBounds::BoundsMax' has a wrong offset!");
static_assert(offsetof(FUNCLIB_CellUtility_C_IsIntPointContainedInBounds, InclusiveMax) == 0x000018, "Member 'FUNCLIB_CellUtility_C_IsIntPointContainedInBounds::InclusiveMax' has a wrong offset!");
static_assert(offsetof(FUNCLIB_CellUtility_C_IsIntPointContainedInBounds, __WorldContext) == 0x000020, "Member 'FUNCLIB_CellUtility_C_IsIntPointContainedInBounds::__WorldContext' has a wrong offset!");
static_assert(offsetof(FUNCLIB_CellUtility_C_IsIntPointContainedInBounds, Result) == 0x000028, "Member 'FUNCLIB_CellUtility_C_IsIntPointContainedInBounds::Result' has a wrong offset!");
static_assert(offsetof(FUNCLIB_CellUtility_C_IsIntPointContainedInBounds, Temp_bool_Variable) == 0x000029, "Member 'FUNCLIB_CellUtility_C_IsIntPointContainedInBounds::Temp_bool_Variable' has a wrong offset!");
static_assert(offsetof(FUNCLIB_CellUtility_C_IsIntPointContainedInBounds, CallFunc_GreaterEqual_IntInt_ReturnValue) == 0x00002A, "Member 'FUNCLIB_CellUtility_C_IsIntPointContainedInBounds::CallFunc_GreaterEqual_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(FUNCLIB_CellUtility_C_IsIntPointContainedInBounds, CallFunc_LessEqual_IntInt_ReturnValue) == 0x00002B, "Member 'FUNCLIB_CellUtility_C_IsIntPointContainedInBounds::CallFunc_LessEqual_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(FUNCLIB_CellUtility_C_IsIntPointContainedInBounds, CallFunc_Less_IntInt_ReturnValue) == 0x00002C, "Member 'FUNCLIB_CellUtility_C_IsIntPointContainedInBounds::CallFunc_Less_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(FUNCLIB_CellUtility_C_IsIntPointContainedInBounds, CallFunc_GreaterEqual_IntInt_ReturnValue_1) == 0x00002D, "Member 'FUNCLIB_CellUtility_C_IsIntPointContainedInBounds::CallFunc_GreaterEqual_IntInt_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(FUNCLIB_CellUtility_C_IsIntPointContainedInBounds, CallFunc_LessEqual_IntInt_ReturnValue_1) == 0x00002E, "Member 'FUNCLIB_CellUtility_C_IsIntPointContainedInBounds::CallFunc_LessEqual_IntInt_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(FUNCLIB_CellUtility_C_IsIntPointContainedInBounds, CallFunc_BooleanAND_ReturnValue) == 0x00002F, "Member 'FUNCLIB_CellUtility_C_IsIntPointContainedInBounds::CallFunc_BooleanAND_ReturnValue' has a wrong offset!");
static_assert(offsetof(FUNCLIB_CellUtility_C_IsIntPointContainedInBounds, CallFunc_BooleanAND_ReturnValue_1) == 0x000030, "Member 'FUNCLIB_CellUtility_C_IsIntPointContainedInBounds::CallFunc_BooleanAND_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(FUNCLIB_CellUtility_C_IsIntPointContainedInBounds, CallFunc_Less_IntInt_ReturnValue_1) == 0x000031, "Member 'FUNCLIB_CellUtility_C_IsIntPointContainedInBounds::CallFunc_Less_IntInt_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(FUNCLIB_CellUtility_C_IsIntPointContainedInBounds, CallFunc_BooleanAND_ReturnValue_2) == 0x000032, "Member 'FUNCLIB_CellUtility_C_IsIntPointContainedInBounds::CallFunc_BooleanAND_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(FUNCLIB_CellUtility_C_IsIntPointContainedInBounds, K2Node_Select_Default) == 0x000033, "Member 'FUNCLIB_CellUtility_C_IsIntPointContainedInBounds::K2Node_Select_Default' has a wrong offset!");
static_assert(offsetof(FUNCLIB_CellUtility_C_IsIntPointContainedInBounds, CallFunc_BooleanAND_ReturnValue_3) == 0x000034, "Member 'FUNCLIB_CellUtility_C_IsIntPointContainedInBounds::CallFunc_BooleanAND_ReturnValue_3' has a wrong offset!");

}

