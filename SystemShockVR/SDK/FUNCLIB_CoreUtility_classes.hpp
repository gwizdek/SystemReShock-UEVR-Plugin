#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: FUNCLIB_CoreUtility

#include "Basic.hpp"

#include "ENUM_HotbarStyle_structs.hpp"
#include "Engine_classes.hpp"
#include "ENUM_TargetID_TargetStatus_structs.hpp"
#include "ENUM_LaserRapierColor_structs.hpp"
#include "ENUM_SaveLoad_structs.hpp"
#include "ENUM_OffReducedNormal_structs.hpp"
#include "ENUM_OffLowMediumHigh_structs.hpp"
#include "ENUM_MediaTabFilterType_structs.hpp"
#include "ENUM_GameDifficultyConfigCategory_structs.hpp"
#include "ENUM_Axis_structs.hpp"


namespace SDK
{

// BlueprintGeneratedClass FUNCLIB_CoreUtility.FUNCLIB_CoreUtility_C
// 0x0000 (0x0028 - 0x0028)
class UFUNCLIB_CoreUtility_C final : public UBlueprintFunctionLibrary
{
public:
	static void GetStandardName(const class FText& FirstName, const class FText& MiddleOrNickname, const class FText& LastName, const class FText& Title, class UObject* __WorldContext, class FText* Result);
	static void GetFullName(const class FText& FirstName, const class FText& MiddleOrNickname, const class FText& LastName, const class FText& Title, class UObject* __WorldContext, class FText* Result);
	static void SetVectorElementFromAxis(struct FVector& Vector, float Value, ENUM_Axis Axis, class UObject* __WorldContext);
	static void GetVectorElementFromAxis(const struct FVector& Vector, ENUM_Axis Axis, class UObject* __WorldContext, float* Result);
	static void SetVector4ElementByIndex(struct FVector4& Vector, float Element, int32 Index_0, class UObject* __WorldContext);
	static void GetBestAxisDirection(const struct FVector& InputDirection, float Threshold, class UObject* __WorldContext, struct FVector* AxisDirection);
	static void GetLargestAxesFromVector(const struct FVector& Vector, class UObject* __WorldContext, ENUM_Axis* AxisA, ENUM_Axis* AxisB, ENUM_Axis* AxisC);
	static void GetUnitVectorFromAxis(ENUM_Axis Axis, class UObject* __WorldContext, struct FVector* Result);
	static void GetTextureSizeX(class UTexture* Texture, class UObject* __WorldContext, int32* SizeX);
	static void GetTextureSizeY(class UTexture* Texture, class UObject* __WorldContext, int32* SizeY);
	static void GetSoundLoudness(const struct FVector& SourceLocation, const struct FVector& TargetLocation, float SoundRange, float Obstruction, float Occlusion, class UObject* __WorldContext, float* Result);
	static void SetSoundEffectParameters(class UAudioComponent* AudioComponent, struct FSTRUCT_EffectParams& SoundParameters, class UObject* __WorldContext);
	static void SetVoxelSoundEffectParameters(class UVoxelAudioComponent* AudioComponent, struct FSTRUCT_EffectParams& SoundParameters, class UObject* __WorldContext);
	static void SetParticleEffectParameters(class UFXSystemComponent* EffectsComponent, struct FSTRUCT_EffectParams& EffectParameters, class UObject* __WorldContext);
	static void GetClosestActor(class AActor* Actor, TArray<class AActor*>& OtherActors, class UObject* __WorldContext, class AActor** ClosestActor, float* DistanceSquared);
	static void CreateRandomSeedForContext(const class FString& Context, class UObject* __WorldContext, int32* Seed);
	static void GetEnumText_GameDifficultyConfigCategory(ENUM_GameDifficultyConfigCategory EnumGameDifficultyConfigCategory, class UObject* __WorldContext, class FText* EnumText);
	static void GetEnumText_HotbarStyle(ENUM_HotbarStyle EnumHotbarStyle, class UObject* __WorldContext, class FText* EnumText);
	static void GetEnumText_LaserRapierColor(ENUM_LaserRapierColor EnumLaserRapierColor, class UObject* __WorldContext, class FText* EnumText);
	static void GetEnumText_MediaTabFilterType(ENUM_MediaTabFilterType EnumMediaTabFilterType, class UObject* __WorldContext, class FText* EnumText);
	static void GetEnumText_OffReducedNormal(ENUM_OffReducedNormal ENUM_OffReducedNormal, class UObject* __WorldContext, class FText* EnumText);
	static void GetEnumText_OffLowMediumHigh(ENUM_OffLowMediumHigh EnumOffLowMediumHigh, class UObject* __WorldContext, class FText* EnumText);
	static void GetEnumText_SaveLoad(ENUM_SaveLoad EnumSaveLoad, class UObject* __WorldContext, class FText* EnumText);
	static void GetEnumText_TargetIDTargetStatus(ENUM_TargetID_TargetStatus EnumTargetIDTargetStatus, class UObject* __WorldContext, class FText* EnumText);

	void IsCinematicMontage(class UAnimMontage* Montage, class UObject* __WorldContext, bool* Result);
	void GetLevelNameByDeckSymbol(const class FString& DeckSymbol, class UObject* __WorldContext, class FName* LevelName);

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"FUNCLIB_CoreUtility_C">();
	}
	static class UFUNCLIB_CoreUtility_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<UFUNCLIB_CoreUtility_C>();
	}
};
static_assert(alignof(UFUNCLIB_CoreUtility_C) == 0x000008, "Wrong alignment on UFUNCLIB_CoreUtility_C");
static_assert(sizeof(UFUNCLIB_CoreUtility_C) == 0x000028, "Wrong size on UFUNCLIB_CoreUtility_C");

}

