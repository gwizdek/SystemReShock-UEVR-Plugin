#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: CORPSE_SkeletalBase

#include "Basic.hpp"

#include "INTERACT_LootableBase_classes.hpp"
#include "Engine_structs.hpp"
#include "CoreUObject_structs.hpp"


namespace SDK
{

// BlueprintGeneratedClass CORPSE_SkeletalBase.CORPSE_SkeletalBase_C
// 0x0060 (0x0408 - 0x03A8)
class ACORPSE_SkeletalBase_C : public AINTERACT_LootableBase_C
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame_CORPSE_SkeletalBase_C;              // 0x03A8(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	class UPointOfInterestComponent_C*            PointOfInterestComponent;                          // 0x03B0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UCOMP_DismembermentManager_C*           COMP_DismembermentManager;                         // 0x03B8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UAttribManagerComponent*                AttribManager;                                     // 0x03C0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UCOMP_VoxelCullable_C*                  COMP_VoxelCullable;                                // 0x03C8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USkeletalMeshComponent*                 SkeletalMesh;                                      // 0x03D0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class ADEBRIS_Base_C*                         LinkedDebrisActor;                                 // 0x03D8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          IsWaitingToDie;                                    // 0x03E0(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          DamageEnablesPhysics;                              // 0x03E1(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_3E2[0x6];                                      // 0x03E2(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTimerHandle                           PhysicsSleepTimerHandle;                           // 0x03E8(0x0008)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	class FName                                   CullableAttachSocketName;                          // 0x03F0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TArray<struct FTransform>                     PendingBodyTransforms;                             // 0x03F8(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance)

public:
	void ExecuteUbergraph_CORPSE_SkeletalBase(int32 EntryPoint);
	void ReceiveTick(float DeltaSeconds);
	void BndEvt__COMP_VoxelCullable_K2Node_ComponentBoundEvent_0_CullableVisibilitySignature__DelegateSignature(bool bVisibleState);
	void ReceiveBeginPlay();
	void UserConstructionScript();
	void InitializeCorpse();
	void TryInitializeBindings();
	void TryReattachCullableComponent();
	void UpdateCorpseVisibility(bool VisibilityState);
	void OnLimbDismembered(class FName Limb, const struct FSTRUCT_DismemberableLimb& LimbData, class ADismembermentLimb_Base_C* LimbActor, bool OnBeginPlay);
	void OnDynaDamage(class FName DynaElement, bool OnBeginPlay);
	void EVENT_OnDamageReceived(class AActor* OtherActor, const struct FAttribDamageInstance& DamageInstance, class UObject* UserParams);
	void GetScanShape(class UShapeComponent** Result);
	void SetDamageEnablesPhysics(bool State);
	void EVENT_TryStopPhysics();
	void TryEnableSimulatePhysics();
	void TryStartPhysicsSleepTimer();
	void EVENT_OnLinkedDebrisHit(class UPrimitiveComponent* HitComponent, class AActor* OtherActor, class UPrimitiveComponent* OtherComp, const struct FVector& NormalImpulse, const struct FHitResult& Hit);
	void TryApplyPendingBoneTransforms(bool* Result);
	void HasHighPriorityTargetShape(bool* Result);
	bool ReceivePendingBodyTransforms(class USkeletalMeshComponent* SkeletalMeshComponent, const TArray<struct FTransform>& BodyTransforms);

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"CORPSE_SkeletalBase_C">();
	}
	static class ACORPSE_SkeletalBase_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<ACORPSE_SkeletalBase_C>();
	}
};
static_assert(alignof(ACORPSE_SkeletalBase_C) == 0x000008, "Wrong alignment on ACORPSE_SkeletalBase_C");
static_assert(sizeof(ACORPSE_SkeletalBase_C) == 0x000408, "Wrong size on ACORPSE_SkeletalBase_C");
static_assert(offsetof(ACORPSE_SkeletalBase_C, UberGraphFrame_CORPSE_SkeletalBase_C) == 0x0003A8, "Member 'ACORPSE_SkeletalBase_C::UberGraphFrame_CORPSE_SkeletalBase_C' has a wrong offset!");
static_assert(offsetof(ACORPSE_SkeletalBase_C, PointOfInterestComponent) == 0x0003B0, "Member 'ACORPSE_SkeletalBase_C::PointOfInterestComponent' has a wrong offset!");
static_assert(offsetof(ACORPSE_SkeletalBase_C, COMP_DismembermentManager) == 0x0003B8, "Member 'ACORPSE_SkeletalBase_C::COMP_DismembermentManager' has a wrong offset!");
static_assert(offsetof(ACORPSE_SkeletalBase_C, AttribManager) == 0x0003C0, "Member 'ACORPSE_SkeletalBase_C::AttribManager' has a wrong offset!");
static_assert(offsetof(ACORPSE_SkeletalBase_C, COMP_VoxelCullable) == 0x0003C8, "Member 'ACORPSE_SkeletalBase_C::COMP_VoxelCullable' has a wrong offset!");
static_assert(offsetof(ACORPSE_SkeletalBase_C, SkeletalMesh) == 0x0003D0, "Member 'ACORPSE_SkeletalBase_C::SkeletalMesh' has a wrong offset!");
static_assert(offsetof(ACORPSE_SkeletalBase_C, LinkedDebrisActor) == 0x0003D8, "Member 'ACORPSE_SkeletalBase_C::LinkedDebrisActor' has a wrong offset!");
static_assert(offsetof(ACORPSE_SkeletalBase_C, IsWaitingToDie) == 0x0003E0, "Member 'ACORPSE_SkeletalBase_C::IsWaitingToDie' has a wrong offset!");
static_assert(offsetof(ACORPSE_SkeletalBase_C, DamageEnablesPhysics) == 0x0003E1, "Member 'ACORPSE_SkeletalBase_C::DamageEnablesPhysics' has a wrong offset!");
static_assert(offsetof(ACORPSE_SkeletalBase_C, PhysicsSleepTimerHandle) == 0x0003E8, "Member 'ACORPSE_SkeletalBase_C::PhysicsSleepTimerHandle' has a wrong offset!");
static_assert(offsetof(ACORPSE_SkeletalBase_C, CullableAttachSocketName) == 0x0003F0, "Member 'ACORPSE_SkeletalBase_C::CullableAttachSocketName' has a wrong offset!");
static_assert(offsetof(ACORPSE_SkeletalBase_C, PendingBodyTransforms) == 0x0003F8, "Member 'ACORPSE_SkeletalBase_C::PendingBodyTransforms' has a wrong offset!");

}

