#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: WIDGET_Automap_WaypointElement

#include "Basic.hpp"

#include "CoreUObject_structs.hpp"
#include "SlateCore_structs.hpp"
#include "ENUM_Automap_WaypointInteraction_structs.hpp"
#include "UMG_structs.hpp"


namespace SDK::Params
{

// Function WIDGET_Automap_WaypointElement.WIDGET_Automap_WaypointElement_C.ExecuteUbergraph_WIDGET_Automap_WaypointElement
// 0x0020 (0x0020 - 0x0000)
struct WIDGET_Automap_WaypointElement_C_ExecuteUbergraph_WIDGET_Automap_WaypointElement final
{
public:
	int32                                         EntryPoint;                                        // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   CallFunc_GetDisplayText_DisplayName;               // 0x0008(0x0018)()
};
static_assert(alignof(WIDGET_Automap_WaypointElement_C_ExecuteUbergraph_WIDGET_Automap_WaypointElement) == 0x000008, "Wrong alignment on WIDGET_Automap_WaypointElement_C_ExecuteUbergraph_WIDGET_Automap_WaypointElement");
static_assert(sizeof(WIDGET_Automap_WaypointElement_C_ExecuteUbergraph_WIDGET_Automap_WaypointElement) == 0x000020, "Wrong size on WIDGET_Automap_WaypointElement_C_ExecuteUbergraph_WIDGET_Automap_WaypointElement");
static_assert(offsetof(WIDGET_Automap_WaypointElement_C_ExecuteUbergraph_WIDGET_Automap_WaypointElement, EntryPoint) == 0x000000, "Member 'WIDGET_Automap_WaypointElement_C_ExecuteUbergraph_WIDGET_Automap_WaypointElement::EntryPoint' has a wrong offset!");
static_assert(offsetof(WIDGET_Automap_WaypointElement_C_ExecuteUbergraph_WIDGET_Automap_WaypointElement, CallFunc_GetDisplayText_DisplayName) == 0x000008, "Member 'WIDGET_Automap_WaypointElement_C_ExecuteUbergraph_WIDGET_Automap_WaypointElement::CallFunc_GetDisplayText_DisplayName' has a wrong offset!");

// Function WIDGET_Automap_WaypointElement.WIDGET_Automap_WaypointElement_C.GetDisplayText
// 0x0080 (0x0080 - 0x0000)
struct WIDGET_Automap_WaypointElement_C_GetDisplayText final
{
public:
	class FText                                   DisplayName;                                       // 0x0000(0x0018)(Parm, OutParm)
	ENUM_Automap_WaypointInteraction              Temp_byte_Variable;                                // 0x0018(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_19[0x7];                                       // 0x0019(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   Temp_text_Variable;                                // 0x0020(0x0018)()
	class FText                                   Temp_text_Variable_1;                              // 0x0038(0x0018)()
	class FText                                   Temp_text_Variable_2;                              // 0x0050(0x0018)()
	class FText                                   K2Node_Select_Default;                             // 0x0068(0x0018)()
};
static_assert(alignof(WIDGET_Automap_WaypointElement_C_GetDisplayText) == 0x000008, "Wrong alignment on WIDGET_Automap_WaypointElement_C_GetDisplayText");
static_assert(sizeof(WIDGET_Automap_WaypointElement_C_GetDisplayText) == 0x000080, "Wrong size on WIDGET_Automap_WaypointElement_C_GetDisplayText");
static_assert(offsetof(WIDGET_Automap_WaypointElement_C_GetDisplayText, DisplayName) == 0x000000, "Member 'WIDGET_Automap_WaypointElement_C_GetDisplayText::DisplayName' has a wrong offset!");
static_assert(offsetof(WIDGET_Automap_WaypointElement_C_GetDisplayText, Temp_byte_Variable) == 0x000018, "Member 'WIDGET_Automap_WaypointElement_C_GetDisplayText::Temp_byte_Variable' has a wrong offset!");
static_assert(offsetof(WIDGET_Automap_WaypointElement_C_GetDisplayText, Temp_text_Variable) == 0x000020, "Member 'WIDGET_Automap_WaypointElement_C_GetDisplayText::Temp_text_Variable' has a wrong offset!");
static_assert(offsetof(WIDGET_Automap_WaypointElement_C_GetDisplayText, Temp_text_Variable_1) == 0x000038, "Member 'WIDGET_Automap_WaypointElement_C_GetDisplayText::Temp_text_Variable_1' has a wrong offset!");
static_assert(offsetof(WIDGET_Automap_WaypointElement_C_GetDisplayText, Temp_text_Variable_2) == 0x000050, "Member 'WIDGET_Automap_WaypointElement_C_GetDisplayText::Temp_text_Variable_2' has a wrong offset!");
static_assert(offsetof(WIDGET_Automap_WaypointElement_C_GetDisplayText, K2Node_Select_Default) == 0x000068, "Member 'WIDGET_Automap_WaypointElement_C_GetDisplayText::K2Node_Select_Default' has a wrong offset!");

// Function WIDGET_Automap_WaypointElement.WIDGET_Automap_WaypointElement_C.EVENT_OnMouseEnter
// 0x00B0 (0x00B0 - 0x0000)
struct WIDGET_Automap_WaypointElement_C_EVENT_OnMouseEnter final
{
public:
	struct FGeometry                              MyGeometry;                                        // 0x0000(0x0038)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor)
	struct FPointerEvent                          MouseEvent;                                        // 0x0038(0x0070)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
	class UUMGSequencePlayer*                     CallFunc_PlayAnimation_ReturnValue;                // 0x00A8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(WIDGET_Automap_WaypointElement_C_EVENT_OnMouseEnter) == 0x000008, "Wrong alignment on WIDGET_Automap_WaypointElement_C_EVENT_OnMouseEnter");
static_assert(sizeof(WIDGET_Automap_WaypointElement_C_EVENT_OnMouseEnter) == 0x0000B0, "Wrong size on WIDGET_Automap_WaypointElement_C_EVENT_OnMouseEnter");
static_assert(offsetof(WIDGET_Automap_WaypointElement_C_EVENT_OnMouseEnter, MyGeometry) == 0x000000, "Member 'WIDGET_Automap_WaypointElement_C_EVENT_OnMouseEnter::MyGeometry' has a wrong offset!");
static_assert(offsetof(WIDGET_Automap_WaypointElement_C_EVENT_OnMouseEnter, MouseEvent) == 0x000038, "Member 'WIDGET_Automap_WaypointElement_C_EVENT_OnMouseEnter::MouseEvent' has a wrong offset!");
static_assert(offsetof(WIDGET_Automap_WaypointElement_C_EVENT_OnMouseEnter, CallFunc_PlayAnimation_ReturnValue) == 0x0000A8, "Member 'WIDGET_Automap_WaypointElement_C_EVENT_OnMouseEnter::CallFunc_PlayAnimation_ReturnValue' has a wrong offset!");

// Function WIDGET_Automap_WaypointElement.WIDGET_Automap_WaypointElement_C.EVENT_MouseLeave
// 0x0078 (0x0078 - 0x0000)
struct WIDGET_Automap_WaypointElement_C_EVENT_MouseLeave final
{
public:
	struct FPointerEvent                          MouseEvent;                                        // 0x0000(0x0070)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
	class UUMGSequencePlayer*                     CallFunc_PlayAnimation_ReturnValue;                // 0x0070(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(WIDGET_Automap_WaypointElement_C_EVENT_MouseLeave) == 0x000008, "Wrong alignment on WIDGET_Automap_WaypointElement_C_EVENT_MouseLeave");
static_assert(sizeof(WIDGET_Automap_WaypointElement_C_EVENT_MouseLeave) == 0x000078, "Wrong size on WIDGET_Automap_WaypointElement_C_EVENT_MouseLeave");
static_assert(offsetof(WIDGET_Automap_WaypointElement_C_EVENT_MouseLeave, MouseEvent) == 0x000000, "Member 'WIDGET_Automap_WaypointElement_C_EVENT_MouseLeave::MouseEvent' has a wrong offset!");
static_assert(offsetof(WIDGET_Automap_WaypointElement_C_EVENT_MouseLeave, CallFunc_PlayAnimation_ReturnValue) == 0x000070, "Member 'WIDGET_Automap_WaypointElement_C_EVENT_MouseLeave::CallFunc_PlayAnimation_ReturnValue' has a wrong offset!");

// Function WIDGET_Automap_WaypointElement.WIDGET_Automap_WaypointElement_C.EVENT_MouseButtonDown
// 0x0238 (0x0238 - 0x0000)
struct WIDGET_Automap_WaypointElement_C_EVENT_MouseButtonDown final
{
public:
	struct FGeometry                              MyGeometry;                                        // 0x0000(0x0038)(BlueprintVisible, BlueprintReadOnly, Parm, IsPlainOldData, NoDestructor)
	struct FPointerEvent                          MouseEvent;                                        // 0x0038(0x0070)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
	struct FEventReply                            ReturnValue;                                       // 0x00A8(0x00B8)(Parm, OutParm, ReturnParm)
	class APAWN_Hacker_Simple_C*                  Hacker;                                            // 0x0160(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash)
	class FName                                   CurrentFilterTag;                                  // 0x0168(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UUMGSequencePlayer*                     CallFunc_PlayAnimation_ReturnValue;                // 0x0170(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Not_PreBool_ReturnValue;                  // 0x0178(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_179[0x7];                                      // 0x0179(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FEventReply                            CallFunc_Handled_ReturnValue;                      // 0x0180(0x00B8)()
};
static_assert(alignof(WIDGET_Automap_WaypointElement_C_EVENT_MouseButtonDown) == 0x000008, "Wrong alignment on WIDGET_Automap_WaypointElement_C_EVENT_MouseButtonDown");
static_assert(sizeof(WIDGET_Automap_WaypointElement_C_EVENT_MouseButtonDown) == 0x000238, "Wrong size on WIDGET_Automap_WaypointElement_C_EVENT_MouseButtonDown");
static_assert(offsetof(WIDGET_Automap_WaypointElement_C_EVENT_MouseButtonDown, MyGeometry) == 0x000000, "Member 'WIDGET_Automap_WaypointElement_C_EVENT_MouseButtonDown::MyGeometry' has a wrong offset!");
static_assert(offsetof(WIDGET_Automap_WaypointElement_C_EVENT_MouseButtonDown, MouseEvent) == 0x000038, "Member 'WIDGET_Automap_WaypointElement_C_EVENT_MouseButtonDown::MouseEvent' has a wrong offset!");
static_assert(offsetof(WIDGET_Automap_WaypointElement_C_EVENT_MouseButtonDown, ReturnValue) == 0x0000A8, "Member 'WIDGET_Automap_WaypointElement_C_EVENT_MouseButtonDown::ReturnValue' has a wrong offset!");
static_assert(offsetof(WIDGET_Automap_WaypointElement_C_EVENT_MouseButtonDown, Hacker) == 0x000160, "Member 'WIDGET_Automap_WaypointElement_C_EVENT_MouseButtonDown::Hacker' has a wrong offset!");
static_assert(offsetof(WIDGET_Automap_WaypointElement_C_EVENT_MouseButtonDown, CurrentFilterTag) == 0x000168, "Member 'WIDGET_Automap_WaypointElement_C_EVENT_MouseButtonDown::CurrentFilterTag' has a wrong offset!");
static_assert(offsetof(WIDGET_Automap_WaypointElement_C_EVENT_MouseButtonDown, CallFunc_PlayAnimation_ReturnValue) == 0x000170, "Member 'WIDGET_Automap_WaypointElement_C_EVENT_MouseButtonDown::CallFunc_PlayAnimation_ReturnValue' has a wrong offset!");
static_assert(offsetof(WIDGET_Automap_WaypointElement_C_EVENT_MouseButtonDown, CallFunc_Not_PreBool_ReturnValue) == 0x000178, "Member 'WIDGET_Automap_WaypointElement_C_EVENT_MouseButtonDown::CallFunc_Not_PreBool_ReturnValue' has a wrong offset!");
static_assert(offsetof(WIDGET_Automap_WaypointElement_C_EVENT_MouseButtonDown, CallFunc_Handled_ReturnValue) == 0x000180, "Member 'WIDGET_Automap_WaypointElement_C_EVENT_MouseButtonDown::CallFunc_Handled_ReturnValue' has a wrong offset!");

// Function WIDGET_Automap_WaypointElement.WIDGET_Automap_WaypointElement_C.UpdateVisualState
// 0x0030 (0x0030 - 0x0000)
struct WIDGET_Automap_WaypointElement_C_UpdateVisualState final
{
public:
	bool                                          Temp_bool_Variable;                                // 0x0000(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Temp_bool_Variable_1;                              // 0x0001(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Temp_bool_Variable_2;                              // 0x0002(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_3[0x5];                                        // 0x0003(0x0005)(Fixing Size After Last Property [ Dumper-7 ])
	class UMaterialInstanceDynamic*               CallFunc_GetDynamicMaterial_DynamicMaterial;       // 0x0008(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FColor                                 CallFunc_GetHighlightedInactiveTextColor_Color;    // 0x0010(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_SelectFloat_ReturnValue;                  // 0x0014(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FColor                                 CallFunc_GetHighlightedActiveTextColor_Color;      // 0x0018(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FColor                                 CallFunc_GetInactiveTextColor_Color;               // 0x001C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FColor                                 K2Node_Select_Default;                             // 0x0020(0x0004)(ConstParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FColor                                 CallFunc_GetActiveTextColor_Color;                 // 0x0024(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FColor                                 K2Node_Select_Default_1;                           // 0x0028(0x0004)(ConstParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FColor                                 K2Node_Select_Default_2;                           // 0x002C(0x0004)(ConstParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(WIDGET_Automap_WaypointElement_C_UpdateVisualState) == 0x000008, "Wrong alignment on WIDGET_Automap_WaypointElement_C_UpdateVisualState");
static_assert(sizeof(WIDGET_Automap_WaypointElement_C_UpdateVisualState) == 0x000030, "Wrong size on WIDGET_Automap_WaypointElement_C_UpdateVisualState");
static_assert(offsetof(WIDGET_Automap_WaypointElement_C_UpdateVisualState, Temp_bool_Variable) == 0x000000, "Member 'WIDGET_Automap_WaypointElement_C_UpdateVisualState::Temp_bool_Variable' has a wrong offset!");
static_assert(offsetof(WIDGET_Automap_WaypointElement_C_UpdateVisualState, Temp_bool_Variable_1) == 0x000001, "Member 'WIDGET_Automap_WaypointElement_C_UpdateVisualState::Temp_bool_Variable_1' has a wrong offset!");
static_assert(offsetof(WIDGET_Automap_WaypointElement_C_UpdateVisualState, Temp_bool_Variable_2) == 0x000002, "Member 'WIDGET_Automap_WaypointElement_C_UpdateVisualState::Temp_bool_Variable_2' has a wrong offset!");
static_assert(offsetof(WIDGET_Automap_WaypointElement_C_UpdateVisualState, CallFunc_GetDynamicMaterial_DynamicMaterial) == 0x000008, "Member 'WIDGET_Automap_WaypointElement_C_UpdateVisualState::CallFunc_GetDynamicMaterial_DynamicMaterial' has a wrong offset!");
static_assert(offsetof(WIDGET_Automap_WaypointElement_C_UpdateVisualState, CallFunc_GetHighlightedInactiveTextColor_Color) == 0x000010, "Member 'WIDGET_Automap_WaypointElement_C_UpdateVisualState::CallFunc_GetHighlightedInactiveTextColor_Color' has a wrong offset!");
static_assert(offsetof(WIDGET_Automap_WaypointElement_C_UpdateVisualState, CallFunc_SelectFloat_ReturnValue) == 0x000014, "Member 'WIDGET_Automap_WaypointElement_C_UpdateVisualState::CallFunc_SelectFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(WIDGET_Automap_WaypointElement_C_UpdateVisualState, CallFunc_GetHighlightedActiveTextColor_Color) == 0x000018, "Member 'WIDGET_Automap_WaypointElement_C_UpdateVisualState::CallFunc_GetHighlightedActiveTextColor_Color' has a wrong offset!");
static_assert(offsetof(WIDGET_Automap_WaypointElement_C_UpdateVisualState, CallFunc_GetInactiveTextColor_Color) == 0x00001C, "Member 'WIDGET_Automap_WaypointElement_C_UpdateVisualState::CallFunc_GetInactiveTextColor_Color' has a wrong offset!");
static_assert(offsetof(WIDGET_Automap_WaypointElement_C_UpdateVisualState, K2Node_Select_Default) == 0x000020, "Member 'WIDGET_Automap_WaypointElement_C_UpdateVisualState::K2Node_Select_Default' has a wrong offset!");
static_assert(offsetof(WIDGET_Automap_WaypointElement_C_UpdateVisualState, CallFunc_GetActiveTextColor_Color) == 0x000024, "Member 'WIDGET_Automap_WaypointElement_C_UpdateVisualState::CallFunc_GetActiveTextColor_Color' has a wrong offset!");
static_assert(offsetof(WIDGET_Automap_WaypointElement_C_UpdateVisualState, K2Node_Select_Default_1) == 0x000028, "Member 'WIDGET_Automap_WaypointElement_C_UpdateVisualState::K2Node_Select_Default_1' has a wrong offset!");
static_assert(offsetof(WIDGET_Automap_WaypointElement_C_UpdateVisualState, K2Node_Select_Default_2) == 0x00002C, "Member 'WIDGET_Automap_WaypointElement_C_UpdateVisualState::K2Node_Select_Default_2' has a wrong offset!");

// Function WIDGET_Automap_WaypointElement.WIDGET_Automap_WaypointElement_C.GetActiveTextColor
// 0x0008 (0x0008 - 0x0000)
struct WIDGET_Automap_WaypointElement_C_GetActiveTextColor final
{
public:
	struct FColor                                 Color;                                             // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FColor                                 CallFunc_GetMeshUIColor_Color;                     // 0x0004(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(WIDGET_Automap_WaypointElement_C_GetActiveTextColor) == 0x000004, "Wrong alignment on WIDGET_Automap_WaypointElement_C_GetActiveTextColor");
static_assert(sizeof(WIDGET_Automap_WaypointElement_C_GetActiveTextColor) == 0x000008, "Wrong size on WIDGET_Automap_WaypointElement_C_GetActiveTextColor");
static_assert(offsetof(WIDGET_Automap_WaypointElement_C_GetActiveTextColor, Color) == 0x000000, "Member 'WIDGET_Automap_WaypointElement_C_GetActiveTextColor::Color' has a wrong offset!");
static_assert(offsetof(WIDGET_Automap_WaypointElement_C_GetActiveTextColor, CallFunc_GetMeshUIColor_Color) == 0x000004, "Member 'WIDGET_Automap_WaypointElement_C_GetActiveTextColor::CallFunc_GetMeshUIColor_Color' has a wrong offset!");

// Function WIDGET_Automap_WaypointElement.WIDGET_Automap_WaypointElement_C.GetInactiveTextColor
// 0x0008 (0x0008 - 0x0000)
struct WIDGET_Automap_WaypointElement_C_GetInactiveTextColor final
{
public:
	struct FColor                                 Color;                                             // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FColor                                 CallFunc_GetMeshUIColor_Color;                     // 0x0004(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(WIDGET_Automap_WaypointElement_C_GetInactiveTextColor) == 0x000004, "Wrong alignment on WIDGET_Automap_WaypointElement_C_GetInactiveTextColor");
static_assert(sizeof(WIDGET_Automap_WaypointElement_C_GetInactiveTextColor) == 0x000008, "Wrong size on WIDGET_Automap_WaypointElement_C_GetInactiveTextColor");
static_assert(offsetof(WIDGET_Automap_WaypointElement_C_GetInactiveTextColor, Color) == 0x000000, "Member 'WIDGET_Automap_WaypointElement_C_GetInactiveTextColor::Color' has a wrong offset!");
static_assert(offsetof(WIDGET_Automap_WaypointElement_C_GetInactiveTextColor, CallFunc_GetMeshUIColor_Color) == 0x000004, "Member 'WIDGET_Automap_WaypointElement_C_GetInactiveTextColor::CallFunc_GetMeshUIColor_Color' has a wrong offset!");

// Function WIDGET_Automap_WaypointElement.WIDGET_Automap_WaypointElement_C.GetHighlightedActiveTextColor
// 0x0008 (0x0008 - 0x0000)
struct WIDGET_Automap_WaypointElement_C_GetHighlightedActiveTextColor final
{
public:
	struct FColor                                 Color;                                             // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FColor                                 CallFunc_GetMeshUIColor_Color;                     // 0x0004(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(WIDGET_Automap_WaypointElement_C_GetHighlightedActiveTextColor) == 0x000004, "Wrong alignment on WIDGET_Automap_WaypointElement_C_GetHighlightedActiveTextColor");
static_assert(sizeof(WIDGET_Automap_WaypointElement_C_GetHighlightedActiveTextColor) == 0x000008, "Wrong size on WIDGET_Automap_WaypointElement_C_GetHighlightedActiveTextColor");
static_assert(offsetof(WIDGET_Automap_WaypointElement_C_GetHighlightedActiveTextColor, Color) == 0x000000, "Member 'WIDGET_Automap_WaypointElement_C_GetHighlightedActiveTextColor::Color' has a wrong offset!");
static_assert(offsetof(WIDGET_Automap_WaypointElement_C_GetHighlightedActiveTextColor, CallFunc_GetMeshUIColor_Color) == 0x000004, "Member 'WIDGET_Automap_WaypointElement_C_GetHighlightedActiveTextColor::CallFunc_GetMeshUIColor_Color' has a wrong offset!");

// Function WIDGET_Automap_WaypointElement.WIDGET_Automap_WaypointElement_C.GetHighlightedInactiveTextColor
// 0x0008 (0x0008 - 0x0000)
struct WIDGET_Automap_WaypointElement_C_GetHighlightedInactiveTextColor final
{
public:
	struct FColor                                 Color;                                             // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FColor                                 CallFunc_GetMeshUIColor_Color;                     // 0x0004(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(WIDGET_Automap_WaypointElement_C_GetHighlightedInactiveTextColor) == 0x000004, "Wrong alignment on WIDGET_Automap_WaypointElement_C_GetHighlightedInactiveTextColor");
static_assert(sizeof(WIDGET_Automap_WaypointElement_C_GetHighlightedInactiveTextColor) == 0x000008, "Wrong size on WIDGET_Automap_WaypointElement_C_GetHighlightedInactiveTextColor");
static_assert(offsetof(WIDGET_Automap_WaypointElement_C_GetHighlightedInactiveTextColor, Color) == 0x000000, "Member 'WIDGET_Automap_WaypointElement_C_GetHighlightedInactiveTextColor::Color' has a wrong offset!");
static_assert(offsetof(WIDGET_Automap_WaypointElement_C_GetHighlightedInactiveTextColor, CallFunc_GetMeshUIColor_Color) == 0x000004, "Member 'WIDGET_Automap_WaypointElement_C_GetHighlightedInactiveTextColor::CallFunc_GetMeshUIColor_Color' has a wrong offset!");

// Function WIDGET_Automap_WaypointElement.WIDGET_Automap_WaypointElement_C.SetTexture
// 0x0038 (0x0038 - 0x0000)
struct WIDGET_Automap_WaypointElement_C_SetTexture final
{
public:
	ENUM_Automap_WaypointInteraction              Temp_byte_Variable;                                // 0x0000(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UMaterialInterface*                     Temp_object_Variable;                              // 0x0008(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UMaterialInterface*                     Temp_object_Variable_1;                            // 0x0010(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UMaterialInterface*                     Temp_object_Variable_2;                            // 0x0018(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UMaterialInstanceDynamic*               CallFunc_GetDynamicMaterial_DynamicMaterial;       // 0x0020(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UMaterialInstanceDynamic*               CallFunc_GetDynamicMaterial_DynamicMaterial_1;     // 0x0028(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UMaterialInterface*                     K2Node_Select_Default;                             // 0x0030(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(WIDGET_Automap_WaypointElement_C_SetTexture) == 0x000008, "Wrong alignment on WIDGET_Automap_WaypointElement_C_SetTexture");
static_assert(sizeof(WIDGET_Automap_WaypointElement_C_SetTexture) == 0x000038, "Wrong size on WIDGET_Automap_WaypointElement_C_SetTexture");
static_assert(offsetof(WIDGET_Automap_WaypointElement_C_SetTexture, Temp_byte_Variable) == 0x000000, "Member 'WIDGET_Automap_WaypointElement_C_SetTexture::Temp_byte_Variable' has a wrong offset!");
static_assert(offsetof(WIDGET_Automap_WaypointElement_C_SetTexture, Temp_object_Variable) == 0x000008, "Member 'WIDGET_Automap_WaypointElement_C_SetTexture::Temp_object_Variable' has a wrong offset!");
static_assert(offsetof(WIDGET_Automap_WaypointElement_C_SetTexture, Temp_object_Variable_1) == 0x000010, "Member 'WIDGET_Automap_WaypointElement_C_SetTexture::Temp_object_Variable_1' has a wrong offset!");
static_assert(offsetof(WIDGET_Automap_WaypointElement_C_SetTexture, Temp_object_Variable_2) == 0x000018, "Member 'WIDGET_Automap_WaypointElement_C_SetTexture::Temp_object_Variable_2' has a wrong offset!");
static_assert(offsetof(WIDGET_Automap_WaypointElement_C_SetTexture, CallFunc_GetDynamicMaterial_DynamicMaterial) == 0x000020, "Member 'WIDGET_Automap_WaypointElement_C_SetTexture::CallFunc_GetDynamicMaterial_DynamicMaterial' has a wrong offset!");
static_assert(offsetof(WIDGET_Automap_WaypointElement_C_SetTexture, CallFunc_GetDynamicMaterial_DynamicMaterial_1) == 0x000028, "Member 'WIDGET_Automap_WaypointElement_C_SetTexture::CallFunc_GetDynamicMaterial_DynamicMaterial_1' has a wrong offset!");
static_assert(offsetof(WIDGET_Automap_WaypointElement_C_SetTexture, K2Node_Select_Default) == 0x000030, "Member 'WIDGET_Automap_WaypointElement_C_SetTexture::K2Node_Select_Default' has a wrong offset!");

// Function WIDGET_Automap_WaypointElement.WIDGET_Automap_WaypointElement_C.GetDynamicMaterial
// 0x0018 (0x0018 - 0x0000)
struct WIDGET_Automap_WaypointElement_C_GetDynamicMaterial final
{
public:
	class UMaterialInstanceDynamic*               DynamicMaterial_0;                                 // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0008(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UMaterialInstanceDynamic*               CallFunc_ConvertToDynamicMaterialInstance_ReturnValue; // 0x0010(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(WIDGET_Automap_WaypointElement_C_GetDynamicMaterial) == 0x000008, "Wrong alignment on WIDGET_Automap_WaypointElement_C_GetDynamicMaterial");
static_assert(sizeof(WIDGET_Automap_WaypointElement_C_GetDynamicMaterial) == 0x000018, "Wrong size on WIDGET_Automap_WaypointElement_C_GetDynamicMaterial");
static_assert(offsetof(WIDGET_Automap_WaypointElement_C_GetDynamicMaterial, DynamicMaterial_0) == 0x000000, "Member 'WIDGET_Automap_WaypointElement_C_GetDynamicMaterial::DynamicMaterial_0' has a wrong offset!");
static_assert(offsetof(WIDGET_Automap_WaypointElement_C_GetDynamicMaterial, CallFunc_IsValid_ReturnValue) == 0x000008, "Member 'WIDGET_Automap_WaypointElement_C_GetDynamicMaterial::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(WIDGET_Automap_WaypointElement_C_GetDynamicMaterial, CallFunc_ConvertToDynamicMaterialInstance_ReturnValue) == 0x000010, "Member 'WIDGET_Automap_WaypointElement_C_GetDynamicMaterial::CallFunc_ConvertToDynamicMaterialInstance_ReturnValue' has a wrong offset!");

// Function WIDGET_Automap_WaypointElement.WIDGET_Automap_WaypointElement_C.InitializeWaypointElement
// 0x0008 (0x0008 - 0x0000)
struct WIDGET_Automap_WaypointElement_C_InitializeWaypointElement final
{
public:
	class UWIDGET_Automap_Waypoints_C*            WaypointWidget_0;                                  // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(WIDGET_Automap_WaypointElement_C_InitializeWaypointElement) == 0x000008, "Wrong alignment on WIDGET_Automap_WaypointElement_C_InitializeWaypointElement");
static_assert(sizeof(WIDGET_Automap_WaypointElement_C_InitializeWaypointElement) == 0x000008, "Wrong size on WIDGET_Automap_WaypointElement_C_InitializeWaypointElement");
static_assert(offsetof(WIDGET_Automap_WaypointElement_C_InitializeWaypointElement, WaypointWidget_0) == 0x000000, "Member 'WIDGET_Automap_WaypointElement_C_InitializeWaypointElement::WaypointWidget_0' has a wrong offset!");

// Function WIDGET_Automap_WaypointElement.WIDGET_Automap_WaypointElement_C.SetElementActive
// 0x0002 (0x0002 - 0x0000)
struct WIDGET_Automap_WaypointElement_C_SetElementActive final
{
public:
	bool                                          IsActive;                                          // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_NotEqual_BoolBool_ReturnValue;            // 0x0001(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(WIDGET_Automap_WaypointElement_C_SetElementActive) == 0x000001, "Wrong alignment on WIDGET_Automap_WaypointElement_C_SetElementActive");
static_assert(sizeof(WIDGET_Automap_WaypointElement_C_SetElementActive) == 0x000002, "Wrong size on WIDGET_Automap_WaypointElement_C_SetElementActive");
static_assert(offsetof(WIDGET_Automap_WaypointElement_C_SetElementActive, IsActive) == 0x000000, "Member 'WIDGET_Automap_WaypointElement_C_SetElementActive::IsActive' has a wrong offset!");
static_assert(offsetof(WIDGET_Automap_WaypointElement_C_SetElementActive, CallFunc_NotEqual_BoolBool_ReturnValue) == 0x000001, "Member 'WIDGET_Automap_WaypointElement_C_SetElementActive::CallFunc_NotEqual_BoolBool_ReturnValue' has a wrong offset!");

// Function WIDGET_Automap_WaypointElement.WIDGET_Automap_WaypointElement_C.ReceiveWaypointInput
// 0x0070 (0x0070 - 0x0000)
struct WIDGET_Automap_WaypointElement_C_ReceiveWaypointInput final
{
public:
	struct FVector                                WorldLocation;                                     // 0x0000(0x000C)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         WaypointIndex;                                     // 0x000C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UCOMP_VoxelScanner_C*                   ScannerComponent;                                  // 0x0010(0x0008)(Edit, BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class APlayerController*                      CallFunc_GetPlayerController_ReturnValue;          // 0x0018(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_GreaterEqual_IntInt_ReturnValue;          // 0x0020(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_21[0x7];                                       // 0x0021(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class ACON_Hacker_C*                          K2Node_DynamicCast_AsCON_Hacker;                   // 0x0028(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0030(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsUsingGamepad_Result;                    // 0x0031(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Not_PreBool_ReturnValue;                  // 0x0032(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_33[0x1];                                       // 0x0033(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_GetWaypointIndexAtLocation_ReturnValue;   // 0x0034(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_RemoveWaypointByIndex_ReturnValue;        // 0x0038(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_39[0x3];                                       // 0x0039(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_GetWaypointIndexAtLocation_ReturnValue_1; // 0x003C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_GreaterEqual_IntInt_ReturnValue_1;        // 0x0040(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_41[0x7];                                       // 0x0041(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class APawn*                                  CallFunc_GetPlayerPawn_ReturnValue;                // 0x0048(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_GreaterEqual_IntInt_ReturnValue_2;        // 0x0050(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_51[0x7];                                       // 0x0051(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class APAWN_Hacker_Implant_C*                 K2Node_DynamicCast_AsPAWN_Hacker_Implant;          // 0x0058(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess_1;                     // 0x0060(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_61[0x3];                                       // 0x0061(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_AddWaypointAtLocation_ReturnValue;        // 0x0064(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_SwitchEnum_CmpSuccess;                      // 0x0068(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(WIDGET_Automap_WaypointElement_C_ReceiveWaypointInput) == 0x000008, "Wrong alignment on WIDGET_Automap_WaypointElement_C_ReceiveWaypointInput");
static_assert(sizeof(WIDGET_Automap_WaypointElement_C_ReceiveWaypointInput) == 0x000070, "Wrong size on WIDGET_Automap_WaypointElement_C_ReceiveWaypointInput");
static_assert(offsetof(WIDGET_Automap_WaypointElement_C_ReceiveWaypointInput, WorldLocation) == 0x000000, "Member 'WIDGET_Automap_WaypointElement_C_ReceiveWaypointInput::WorldLocation' has a wrong offset!");
static_assert(offsetof(WIDGET_Automap_WaypointElement_C_ReceiveWaypointInput, WaypointIndex) == 0x00000C, "Member 'WIDGET_Automap_WaypointElement_C_ReceiveWaypointInput::WaypointIndex' has a wrong offset!");
static_assert(offsetof(WIDGET_Automap_WaypointElement_C_ReceiveWaypointInput, ScannerComponent) == 0x000010, "Member 'WIDGET_Automap_WaypointElement_C_ReceiveWaypointInput::ScannerComponent' has a wrong offset!");
static_assert(offsetof(WIDGET_Automap_WaypointElement_C_ReceiveWaypointInput, CallFunc_GetPlayerController_ReturnValue) == 0x000018, "Member 'WIDGET_Automap_WaypointElement_C_ReceiveWaypointInput::CallFunc_GetPlayerController_ReturnValue' has a wrong offset!");
static_assert(offsetof(WIDGET_Automap_WaypointElement_C_ReceiveWaypointInput, CallFunc_GreaterEqual_IntInt_ReturnValue) == 0x000020, "Member 'WIDGET_Automap_WaypointElement_C_ReceiveWaypointInput::CallFunc_GreaterEqual_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(WIDGET_Automap_WaypointElement_C_ReceiveWaypointInput, K2Node_DynamicCast_AsCON_Hacker) == 0x000028, "Member 'WIDGET_Automap_WaypointElement_C_ReceiveWaypointInput::K2Node_DynamicCast_AsCON_Hacker' has a wrong offset!");
static_assert(offsetof(WIDGET_Automap_WaypointElement_C_ReceiveWaypointInput, K2Node_DynamicCast_bSuccess) == 0x000030, "Member 'WIDGET_Automap_WaypointElement_C_ReceiveWaypointInput::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(WIDGET_Automap_WaypointElement_C_ReceiveWaypointInput, CallFunc_IsUsingGamepad_Result) == 0x000031, "Member 'WIDGET_Automap_WaypointElement_C_ReceiveWaypointInput::CallFunc_IsUsingGamepad_Result' has a wrong offset!");
static_assert(offsetof(WIDGET_Automap_WaypointElement_C_ReceiveWaypointInput, CallFunc_Not_PreBool_ReturnValue) == 0x000032, "Member 'WIDGET_Automap_WaypointElement_C_ReceiveWaypointInput::CallFunc_Not_PreBool_ReturnValue' has a wrong offset!");
static_assert(offsetof(WIDGET_Automap_WaypointElement_C_ReceiveWaypointInput, CallFunc_GetWaypointIndexAtLocation_ReturnValue) == 0x000034, "Member 'WIDGET_Automap_WaypointElement_C_ReceiveWaypointInput::CallFunc_GetWaypointIndexAtLocation_ReturnValue' has a wrong offset!");
static_assert(offsetof(WIDGET_Automap_WaypointElement_C_ReceiveWaypointInput, CallFunc_RemoveWaypointByIndex_ReturnValue) == 0x000038, "Member 'WIDGET_Automap_WaypointElement_C_ReceiveWaypointInput::CallFunc_RemoveWaypointByIndex_ReturnValue' has a wrong offset!");
static_assert(offsetof(WIDGET_Automap_WaypointElement_C_ReceiveWaypointInput, CallFunc_GetWaypointIndexAtLocation_ReturnValue_1) == 0x00003C, "Member 'WIDGET_Automap_WaypointElement_C_ReceiveWaypointInput::CallFunc_GetWaypointIndexAtLocation_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(WIDGET_Automap_WaypointElement_C_ReceiveWaypointInput, CallFunc_GreaterEqual_IntInt_ReturnValue_1) == 0x000040, "Member 'WIDGET_Automap_WaypointElement_C_ReceiveWaypointInput::CallFunc_GreaterEqual_IntInt_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(WIDGET_Automap_WaypointElement_C_ReceiveWaypointInput, CallFunc_GetPlayerPawn_ReturnValue) == 0x000048, "Member 'WIDGET_Automap_WaypointElement_C_ReceiveWaypointInput::CallFunc_GetPlayerPawn_ReturnValue' has a wrong offset!");
static_assert(offsetof(WIDGET_Automap_WaypointElement_C_ReceiveWaypointInput, CallFunc_GreaterEqual_IntInt_ReturnValue_2) == 0x000050, "Member 'WIDGET_Automap_WaypointElement_C_ReceiveWaypointInput::CallFunc_GreaterEqual_IntInt_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(WIDGET_Automap_WaypointElement_C_ReceiveWaypointInput, K2Node_DynamicCast_AsPAWN_Hacker_Implant) == 0x000058, "Member 'WIDGET_Automap_WaypointElement_C_ReceiveWaypointInput::K2Node_DynamicCast_AsPAWN_Hacker_Implant' has a wrong offset!");
static_assert(offsetof(WIDGET_Automap_WaypointElement_C_ReceiveWaypointInput, K2Node_DynamicCast_bSuccess_1) == 0x000060, "Member 'WIDGET_Automap_WaypointElement_C_ReceiveWaypointInput::K2Node_DynamicCast_bSuccess_1' has a wrong offset!");
static_assert(offsetof(WIDGET_Automap_WaypointElement_C_ReceiveWaypointInput, CallFunc_AddWaypointAtLocation_ReturnValue) == 0x000064, "Member 'WIDGET_Automap_WaypointElement_C_ReceiveWaypointInput::CallFunc_AddWaypointAtLocation_ReturnValue' has a wrong offset!");
static_assert(offsetof(WIDGET_Automap_WaypointElement_C_ReceiveWaypointInput, K2Node_SwitchEnum_CmpSuccess) == 0x000068, "Member 'WIDGET_Automap_WaypointElement_C_ReceiveWaypointInput::K2Node_SwitchEnum_CmpSuccess' has a wrong offset!");

}

