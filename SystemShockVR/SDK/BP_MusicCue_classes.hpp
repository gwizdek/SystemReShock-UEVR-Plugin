#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_MusicCue

#include "Basic.hpp"

#include "ENUM_BeatType_structs.hpp"
#include "Engine_structs.hpp"
#include "CoreGame_classes.hpp"
#include "ENUM_MusicPlayState_structs.hpp"
#include "ENUM_IntensityThresholds_structs.hpp"


namespace SDK
{

// BlueprintGeneratedClass BP_MusicCue.BP_MusicCue_C
// 0x00C8 (0x00F0 - 0x0028)
class UBP_MusicCue_C : public UWorldObject
{
public:
	float                                         BPM;                                               // 0x0028(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Beats;                                             // 0x002C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ENUM_BeatType                                 BeatType;                                          // 0x0030(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_31[0x3];                                       // 0x0031(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         MillisecondsPerBeat;                               // 0x0034(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         MilliscondsPerBar;                                 // 0x0038(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_3C[0x4];                                       // 0x003C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UDataTable*                             MusicLayersTable;                                  // 0x0040(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TArray<class UBP_MusicLayer_C*>               MusicLayerObjects;                                 // 0x0048(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance)
	class UCurveFloat*                            FadeInCurve;                                       // 0x0058(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UCurveFloat*                            FadeOutCurve;                                      // 0x0060(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FTimerHandle                           FadeTimerHandle;                                   // 0x0068(0x0008)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	struct FTimerHandle                           FadeTickTimerHandle;                               // 0x0070(0x0008)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	float                                         CurrentVolume;                                     // 0x0078(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         InterruptedVolume;                                 // 0x007C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         InterruptFadeDuration;                             // 0x0080(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CachedVolumeScale;                                 // 0x0084(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TArray<class FName>                           FadeInBypassedLayerNames;                          // 0x0088(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance)
	float                                         StateEnteredTimestamp;                             // 0x0098(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ENUM_MusicPlayState                           CurrentPlayState;                                  // 0x009C(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_9D[0x3];                                       // 0x009D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	FMulticastInlineDelegateProperty_             OnMusicFinished;                                   // 0x00A0(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)
	class FName                                   ClockName;                                         // 0x00B0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UQuartzClockHandle*                     ClockHandle;                                       // 0x00B8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	FMulticastInlineDelegateProperty_             OnMeasure;                                         // 0x00C0(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)
	class UCurveFloat*                            ExploreIntensityCurve;                             // 0x00D0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CurrentExploreIntensityLinear;                     // 0x00D8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_DC[0x4];                                       // 0x00DC(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UCurveFloat*                            CombatIntensityCurve;                              // 0x00E0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CurrentCombatIntensityLinear;                      // 0x00E8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          DebugLogMusicStates;                               // 0x00EC(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)

public:
	void OnMusicFinished__DelegateSignature(class UBP_MusicCue_C* MusicCue);
	void OnMeasure__DelegateSignature(int32 NumBars, float CurrentExploreMusicIntensity, float CurrentCombatMusicIntensity);
	void IsMusicPlaying(bool* Result);
	void GetCurrentPlayState(ENUM_MusicPlayState* Result);
	void GetCurrentVolume(float* Result);
	void GetMillisecondsOfMeasures(int32 RetriggerTimeInMeasures, int32* MillisecondsPerBar);
	void GetRealTimeInMilliseconds(int32* Result);
	void GetElapsedTimeInCurrentPlayState(float* Result);
	void GetShouldRetrigger(struct FSTRUCT_MusicCue_Layer& Layer, bool* bShouldRetrigger);
	void SetPlaybackState(ENUM_MusicPlayState PlaybackState);
	void SetFadeInBypassList();
	void GetShouldComponentFadeIn(class UAudioComponent*& AudioComponent, bool* bShouldFadeIn);
	void CreateMusicLayerObjects();
	void GetMusicLayerByName(class FName& Name_0, class UBP_MusicLayer_C** Layer);
	void GetLayerOfAudioComponent(class UAudioComponent*& Audio, class UBP_MusicLayer_C** Layer);
	void PrintCurrentAudioComponents();
	void ValidateSegmentVirtualizationType();
	void ValidatedUniqueLayerNames();
	void PrintFadeBypassedNames();
	void InitializeMusicCue(float ExploreIntensity);
	void InitClock();
	void PlayMusic();
	void UpdateMusic(float DeltaTime);
	void FadeInMusic();
	void FadeOutMusic();
	void ForceStopMusic();
	void StopMusic();
	void StopMusicInternal();
	void UpdateExplorationIntensity(float Intensity);
	void UpdateFadeVolume(class UCurveFloat*& FadeCurve);
	void OnFadeFinished();
	void RemoveInactiveAudioComponents();
	void GetQuartzBeatType(EQuartzTimeSignatureQuantization* Quantization);
	void EVENT_OnQuartzBar(class FName ClockName_0, EQuartzCommandQuantization QuantizationType, int32 NumBars, int32 Beat, float BeatFraction);
	void PrintCurrentExploreIntensity();
	void IsMusicDebugLoggingEnabled(bool* Result);
	void UpdateCombatIntensity(float Intensity);

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"BP_MusicCue_C">();
	}
	static class UBP_MusicCue_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<UBP_MusicCue_C>();
	}
};
static_assert(alignof(UBP_MusicCue_C) == 0x000008, "Wrong alignment on UBP_MusicCue_C");
static_assert(sizeof(UBP_MusicCue_C) == 0x0000F0, "Wrong size on UBP_MusicCue_C");
static_assert(offsetof(UBP_MusicCue_C, BPM) == 0x000028, "Member 'UBP_MusicCue_C::BPM' has a wrong offset!");
static_assert(offsetof(UBP_MusicCue_C, Beats) == 0x00002C, "Member 'UBP_MusicCue_C::Beats' has a wrong offset!");
static_assert(offsetof(UBP_MusicCue_C, BeatType) == 0x000030, "Member 'UBP_MusicCue_C::BeatType' has a wrong offset!");
static_assert(offsetof(UBP_MusicCue_C, MillisecondsPerBeat) == 0x000034, "Member 'UBP_MusicCue_C::MillisecondsPerBeat' has a wrong offset!");
static_assert(offsetof(UBP_MusicCue_C, MilliscondsPerBar) == 0x000038, "Member 'UBP_MusicCue_C::MilliscondsPerBar' has a wrong offset!");
static_assert(offsetof(UBP_MusicCue_C, MusicLayersTable) == 0x000040, "Member 'UBP_MusicCue_C::MusicLayersTable' has a wrong offset!");
static_assert(offsetof(UBP_MusicCue_C, MusicLayerObjects) == 0x000048, "Member 'UBP_MusicCue_C::MusicLayerObjects' has a wrong offset!");
static_assert(offsetof(UBP_MusicCue_C, FadeInCurve) == 0x000058, "Member 'UBP_MusicCue_C::FadeInCurve' has a wrong offset!");
static_assert(offsetof(UBP_MusicCue_C, FadeOutCurve) == 0x000060, "Member 'UBP_MusicCue_C::FadeOutCurve' has a wrong offset!");
static_assert(offsetof(UBP_MusicCue_C, FadeTimerHandle) == 0x000068, "Member 'UBP_MusicCue_C::FadeTimerHandle' has a wrong offset!");
static_assert(offsetof(UBP_MusicCue_C, FadeTickTimerHandle) == 0x000070, "Member 'UBP_MusicCue_C::FadeTickTimerHandle' has a wrong offset!");
static_assert(offsetof(UBP_MusicCue_C, CurrentVolume) == 0x000078, "Member 'UBP_MusicCue_C::CurrentVolume' has a wrong offset!");
static_assert(offsetof(UBP_MusicCue_C, InterruptedVolume) == 0x00007C, "Member 'UBP_MusicCue_C::InterruptedVolume' has a wrong offset!");
static_assert(offsetof(UBP_MusicCue_C, InterruptFadeDuration) == 0x000080, "Member 'UBP_MusicCue_C::InterruptFadeDuration' has a wrong offset!");
static_assert(offsetof(UBP_MusicCue_C, CachedVolumeScale) == 0x000084, "Member 'UBP_MusicCue_C::CachedVolumeScale' has a wrong offset!");
static_assert(offsetof(UBP_MusicCue_C, FadeInBypassedLayerNames) == 0x000088, "Member 'UBP_MusicCue_C::FadeInBypassedLayerNames' has a wrong offset!");
static_assert(offsetof(UBP_MusicCue_C, StateEnteredTimestamp) == 0x000098, "Member 'UBP_MusicCue_C::StateEnteredTimestamp' has a wrong offset!");
static_assert(offsetof(UBP_MusicCue_C, CurrentPlayState) == 0x00009C, "Member 'UBP_MusicCue_C::CurrentPlayState' has a wrong offset!");
static_assert(offsetof(UBP_MusicCue_C, OnMusicFinished) == 0x0000A0, "Member 'UBP_MusicCue_C::OnMusicFinished' has a wrong offset!");
static_assert(offsetof(UBP_MusicCue_C, ClockName) == 0x0000B0, "Member 'UBP_MusicCue_C::ClockName' has a wrong offset!");
static_assert(offsetof(UBP_MusicCue_C, ClockHandle) == 0x0000B8, "Member 'UBP_MusicCue_C::ClockHandle' has a wrong offset!");
static_assert(offsetof(UBP_MusicCue_C, OnMeasure) == 0x0000C0, "Member 'UBP_MusicCue_C::OnMeasure' has a wrong offset!");
static_assert(offsetof(UBP_MusicCue_C, ExploreIntensityCurve) == 0x0000D0, "Member 'UBP_MusicCue_C::ExploreIntensityCurve' has a wrong offset!");
static_assert(offsetof(UBP_MusicCue_C, CurrentExploreIntensityLinear) == 0x0000D8, "Member 'UBP_MusicCue_C::CurrentExploreIntensityLinear' has a wrong offset!");
static_assert(offsetof(UBP_MusicCue_C, CombatIntensityCurve) == 0x0000E0, "Member 'UBP_MusicCue_C::CombatIntensityCurve' has a wrong offset!");
static_assert(offsetof(UBP_MusicCue_C, CurrentCombatIntensityLinear) == 0x0000E8, "Member 'UBP_MusicCue_C::CurrentCombatIntensityLinear' has a wrong offset!");
static_assert(offsetof(UBP_MusicCue_C, DebugLogMusicStates) == 0x0000EC, "Member 'UBP_MusicCue_C::DebugLogMusicStates' has a wrong offset!");

}

