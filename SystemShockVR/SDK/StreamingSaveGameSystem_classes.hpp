#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: StreamingSaveGameSystem

#include "Basic.hpp"

#include "Engine_classes.hpp"
#include "CoreUObject_structs.hpp"
#include "CoreUObject_classes.hpp"
#include "DeveloperSettings_classes.hpp"


namespace SDK
{

// Class StreamingSaveGameSystem.SingleplayerGameMode
// 0x0020 (0x02E0 - 0x02C0)
class ASingleplayerGameMode : public AGameModeBase
{
public:
	FMulticastInlineDelegateProperty_             OnPausedEvent;                                     // 0x02C0(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, Protected, NativeAccessSpecifierProtected)
	FMulticastInlineDelegateProperty_             OnUnpausedEvent;                                   // 0x02D0(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, Protected, NativeAccessSpecifierProtected)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"SingleplayerGameMode">();
	}
	static class ASingleplayerGameMode* GetDefaultObj()
	{
		return GetDefaultObjImpl<ASingleplayerGameMode>();
	}
};
static_assert(alignof(ASingleplayerGameMode) == 0x000008, "Wrong alignment on ASingleplayerGameMode");
static_assert(sizeof(ASingleplayerGameMode) == 0x0002E0, "Wrong size on ASingleplayerGameMode");
static_assert(offsetof(ASingleplayerGameMode, OnPausedEvent) == 0x0002C0, "Member 'ASingleplayerGameMode::OnPausedEvent' has a wrong offset!");
static_assert(offsetof(ASingleplayerGameMode, OnUnpausedEvent) == 0x0002D0, "Member 'ASingleplayerGameMode::OnUnpausedEvent' has a wrong offset!");

// Class StreamingSaveGameSystem.SingleplayerGameInstance
// 0x0080 (0x0228 - 0x01A8)
class USingleplayerGameInstance : public UGameInstance
{
public:
	int64                                         GameUniqueID;                                      // 0x01A8(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, SaveGame, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	int32                                         GameDefaultDifficulty;                             // 0x01B0(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         GameSessionStartTime;                              // 0x01B4(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UStreamingSaveGameSession*              GameSession;                                       // 0x01B8(0x0008)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_1C0[0x60];                                     // 0x01C0(0x0060)(Fixing Size After Last Property [ Dumper-7 ])
	TSubclassOf<class UStreamingSaveGameSession>  SaveSessionType;                                   // 0x0220(0x0008)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)

public:
	bool CreateSaveDataForLevel(class ULevel* Level);
	class UStreamingSaveGameSession* GetGameSession();
	bool InitializeLevelFromSaveData(class ULevel* Level);
	void OnControllerConnectionChange(bool bIsConnected, int32 UserIndex);
	void OnFinishedLoadingGame();
	void OnFinishedLoadingLevel(const class FString& MapName);
	bool OnNewGameStarted();
	void OnOnlineConnectionStatusChange(bool bIsConnected);
	void OnStartedLoadingGame();
	void OnTick(float DeltaSeconds);
	void SetGameDefaultDifficulty(int32 DefaultDifficulty);
	void StartNewGame();

	float GetTotalPlayTimeSeconds() const;
	bool IsInGame() const;
	bool IsSavePendingAsyncCompletion(const class FString& SaveName) const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"SingleplayerGameInstance">();
	}
	static class USingleplayerGameInstance* GetDefaultObj()
	{
		return GetDefaultObjImpl<USingleplayerGameInstance>();
	}
};
static_assert(alignof(USingleplayerGameInstance) == 0x000008, "Wrong alignment on USingleplayerGameInstance");
static_assert(sizeof(USingleplayerGameInstance) == 0x000228, "Wrong size on USingleplayerGameInstance");
static_assert(offsetof(USingleplayerGameInstance, GameUniqueID) == 0x0001A8, "Member 'USingleplayerGameInstance::GameUniqueID' has a wrong offset!");
static_assert(offsetof(USingleplayerGameInstance, GameDefaultDifficulty) == 0x0001B0, "Member 'USingleplayerGameInstance::GameDefaultDifficulty' has a wrong offset!");
static_assert(offsetof(USingleplayerGameInstance, GameSessionStartTime) == 0x0001B4, "Member 'USingleplayerGameInstance::GameSessionStartTime' has a wrong offset!");
static_assert(offsetof(USingleplayerGameInstance, GameSession) == 0x0001B8, "Member 'USingleplayerGameInstance::GameSession' has a wrong offset!");
static_assert(offsetof(USingleplayerGameInstance, SaveSessionType) == 0x000220, "Member 'USingleplayerGameInstance::SaveSessionType' has a wrong offset!");

// Class StreamingSaveGameSystem.StreamingSaveGameActorInterface
// 0x0000 (0x0028 - 0x0028)
class IStreamingSaveGameActorInterface final : public IInterface
{
public:
	bool ReceivePendingBodyTransforms(class USkeletalMeshComponent* SkeletalMeshComponent, const TArray<struct FTransform>& BodyTransforms);
	bool ReceivePendingCharacterVelocity(const struct FVector& Velocity);
	bool ShouldSaveActor(struct FStreamingSaveGameActorParams* Params_0);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"StreamingSaveGameActorInterface">();
	}
	static class IStreamingSaveGameActorInterface* GetDefaultObj()
	{
		return GetDefaultObjImpl<IStreamingSaveGameActorInterface>();
	}
};
static_assert(alignof(IStreamingSaveGameActorInterface) == 0x000008, "Wrong alignment on IStreamingSaveGameActorInterface");
static_assert(sizeof(IStreamingSaveGameActorInterface) == 0x000028, "Wrong size on IStreamingSaveGameActorInterface");

// Class StreamingSaveGameSystem.StreamingSaveGameComponentInterface
// 0x0000 (0x0028 - 0x0028)
class IStreamingSaveGameComponentInterface final : public IInterface
{
public:
	bool ShouldSaveComponent(struct FStreamingSaveGameComponentParams* Params_0);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"StreamingSaveGameComponentInterface">();
	}
	static class IStreamingSaveGameComponentInterface* GetDefaultObj()
	{
		return GetDefaultObjImpl<IStreamingSaveGameComponentInterface>();
	}
};
static_assert(alignof(IStreamingSaveGameComponentInterface) == 0x000008, "Wrong alignment on IStreamingSaveGameComponentInterface");
static_assert(sizeof(IStreamingSaveGameComponentInterface) == 0x000028, "Wrong size on IStreamingSaveGameComponentInterface");

// Class StreamingSaveGameSystem.StreamingSaveGameFunctionLibrary
// 0x0000 (0x0028 - 0x0028)
class UStreamingSaveGameFunctionLibrary final : public UBlueprintFunctionLibrary
{
public:
	static class UStreamingSaveGameProfile* CreateGameProfile(class UObject* WorldContextObject, const class FString& SaveName, const class FString& SaveCaption, int32 UserIndex);
	static bool DeleteSaveGameByName(class UObject* WorldContextObject, const class FString& SaveName, int32 UserIndex);
	static TArray<class FString> GetExistingSaveGameNames(int32 UserIndex, const class FString& IgnoreSaveName, bool bSort);
	static float GetPlayTimeInSeconds(class UObject* WorldContextObject);
	static bool IsValidSaveName(const class FString& SaveName, int32 UserIndex);
	static class UStreamingSaveGameProfile* LoadGameProfile(class UObject* WorldContextObject, const class FString& SaveName, int32 UserIndex);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"StreamingSaveGameFunctionLibrary">();
	}
	static class UStreamingSaveGameFunctionLibrary* GetDefaultObj()
	{
		return GetDefaultObjImpl<UStreamingSaveGameFunctionLibrary>();
	}
};
static_assert(alignof(UStreamingSaveGameFunctionLibrary) == 0x000008, "Wrong alignment on UStreamingSaveGameFunctionLibrary");
static_assert(sizeof(UStreamingSaveGameFunctionLibrary) == 0x000028, "Wrong size on UStreamingSaveGameFunctionLibrary");

// Class StreamingSaveGameSystem.StreamingSaveGameProfile
// 0x0050 (0x0078 - 0x0028)
class UStreamingSaveGameProfile : public UObject
{
public:
	class FString                                 SaveName;                                          // 0x0028(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class FString                                 SaveCaption;                                       // 0x0038(0x0010)(BlueprintVisible, ZeroConstructor, SaveGame, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class FName                                   PersistentLevelName;                               // 0x0048(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, SaveGame, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class FName                                   SubLevelName;                                      // 0x0050(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, SaveGame, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	int32                                         Difficulty;                                        // 0x0058(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, SaveGame, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         PlayTimeSeconds;                                   // 0x005C(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, SaveGame, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	struct FDateTime                              SaveDate;                                          // 0x0060(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, SaveGame, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UTexture2D*                             IconTexture;                                       // 0x0068(0x0008)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_70[0x8];                                       // 0x0070(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void SetDifficulty(int32 NewDifficulty);
	void SetIconFromImage(class UImage* Image);
	void SetIconFromRenderTarget(class UTextureRenderTarget2D* TextureRenderTarget);
	void SetSubLevelName(class FName LevelName);

	bool IsValidProfile() const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"StreamingSaveGameProfile">();
	}
	static class UStreamingSaveGameProfile* GetDefaultObj()
	{
		return GetDefaultObjImpl<UStreamingSaveGameProfile>();
	}
};
static_assert(alignof(UStreamingSaveGameProfile) == 0x000008, "Wrong alignment on UStreamingSaveGameProfile");
static_assert(sizeof(UStreamingSaveGameProfile) == 0x000078, "Wrong size on UStreamingSaveGameProfile");
static_assert(offsetof(UStreamingSaveGameProfile, SaveName) == 0x000028, "Member 'UStreamingSaveGameProfile::SaveName' has a wrong offset!");
static_assert(offsetof(UStreamingSaveGameProfile, SaveCaption) == 0x000038, "Member 'UStreamingSaveGameProfile::SaveCaption' has a wrong offset!");
static_assert(offsetof(UStreamingSaveGameProfile, PersistentLevelName) == 0x000048, "Member 'UStreamingSaveGameProfile::PersistentLevelName' has a wrong offset!");
static_assert(offsetof(UStreamingSaveGameProfile, SubLevelName) == 0x000050, "Member 'UStreamingSaveGameProfile::SubLevelName' has a wrong offset!");
static_assert(offsetof(UStreamingSaveGameProfile, Difficulty) == 0x000058, "Member 'UStreamingSaveGameProfile::Difficulty' has a wrong offset!");
static_assert(offsetof(UStreamingSaveGameProfile, PlayTimeSeconds) == 0x00005C, "Member 'UStreamingSaveGameProfile::PlayTimeSeconds' has a wrong offset!");
static_assert(offsetof(UStreamingSaveGameProfile, SaveDate) == 0x000060, "Member 'UStreamingSaveGameProfile::SaveDate' has a wrong offset!");
static_assert(offsetof(UStreamingSaveGameProfile, IconTexture) == 0x000068, "Member 'UStreamingSaveGameProfile::IconTexture' has a wrong offset!");

// Class StreamingSaveGameSystem.StreamingSaveGameSession
// 0x00A0 (0x0118 - 0x0078)
class UStreamingSaveGameSession : public UStreamingSaveGameProfile
{
public:
	uint8                                         Pad_78[0xA0];                                      // 0x0078(0x00A0)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	bool AsyncSaveGame(const class FString& InSaveName, const class FString& InSaveCaption, int32 UserIndex);
	bool AsyncSaveGameWithEvent(const class FString& InSaveName, const class FString& InSaveCaption, int32 UserIndex, const TDelegate<void(const class FString& SaveName, int32 UserIndex, bool bSuccess)>& SavedDelegate);
	bool LoadGame(const class FString& InSaveName, int32 UserIndex);
	bool LoadGameWithEvent(const class FString& InSaveName, int32 UserIndex, const TDelegate<void()>& PreMapMoveEvent);
	void OnPostLoad();

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"StreamingSaveGameSession">();
	}
	static class UStreamingSaveGameSession* GetDefaultObj()
	{
		return GetDefaultObjImpl<UStreamingSaveGameSession>();
	}
};
static_assert(alignof(UStreamingSaveGameSession) == 0x000008, "Wrong alignment on UStreamingSaveGameSession");
static_assert(sizeof(UStreamingSaveGameSession) == 0x000118, "Wrong size on UStreamingSaveGameSession");

// Class StreamingSaveGameSystem.StreamingSaveGameSettings
// 0x0058 (0x0090 - 0x0038)
class UStreamingSaveGameSettings final : public UDeveloperSettings
{
public:
	uint8                                         bIgnoreSaveGameVersion : 1;                        // 0x0038(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Edit, Config, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         Pad_39[0x7];                                       // 0x0039(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TMap<class FString, class FString>            ClassPathRedirectors;                              // 0x0040(0x0050)(Edit, Config, NativeAccessSpecifierPublic)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"StreamingSaveGameSettings">();
	}
	static class UStreamingSaveGameSettings* GetDefaultObj()
	{
		return GetDefaultObjImpl<UStreamingSaveGameSettings>();
	}
};
static_assert(alignof(UStreamingSaveGameSettings) == 0x000008, "Wrong alignment on UStreamingSaveGameSettings");
static_assert(sizeof(UStreamingSaveGameSettings) == 0x000090, "Wrong size on UStreamingSaveGameSettings");
static_assert(offsetof(UStreamingSaveGameSettings, ClassPathRedirectors) == 0x000040, "Member 'UStreamingSaveGameSettings::ClassPathRedirectors' has a wrong offset!");

}

