#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: DismembermentLimb_Base

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "Engine_classes.hpp"
#include "CoreUObject_structs.hpp"


namespace SDK
{

// BlueprintGeneratedClass DismembermentLimb_Base.DismembermentLimb_Base_C
// 0x0078 (0x0298 - 0x0220)
class ADismembermentLimb_Base_C : public AActor
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x0220(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	class UCOMP_SkinnedDecalSampler_C*            COMP_SkinnedDecalSampler;                          // 0x0228(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UCOMP_Descriptor_C*                     COMP_Descriptor;                                   // 0x0230(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UCOMP_PhysicsImpactHandler_C*           COMP_PhysicsImpactHandler;                         // 0x0238(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UCOMP_VoxelCullable_C*                  COMP_VoxelCullable;                                // 0x0240(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UCOMP_DismembermentManager_C*           COMP_DismembermentManager;                         // 0x0248(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UAttribManagerComponent*                AttribManager;                                     // 0x0250(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USkeletalMeshComponent*                 LimbSkeletalMesh;                                  // 0x0258(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	bool                                          IsWaitingToDie;                                    // 0x0260(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_261[0x3];                                      // 0x0261(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                Impact_Point;                                      // 0x0264(0x000C)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FName                                   Bone_Name;                                         // 0x0270(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                Linear_Impulse;                                    // 0x0278(0x000C)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         DismembermentTimestamp;                            // 0x0284(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FTimerHandle                           TeleportTimerHandle;                               // 0x0288(0x0008)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	struct FTimerHandle                           PhysicsSleepTimerHandle;                           // 0x0290(0x0008)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)

public:
	void ExecuteUbergraph_DismembermentLimb_Base(int32 EntryPoint);
	void BndEvt__DismembermentLimb_Base_COMP_DismembermentManager_K2Node_ComponentBoundEvent_1_OnDynaDamage__DelegateSignature(class FName DynaElementName, bool OnBeginPlay);
	void ReceiveTick(float DeltaSeconds);
	void BndEvt__COMP_VoxelCullable_K2Node_ComponentBoundEvent_0_CullableVisibilitySignature__DelegateSignature(bool bVisibleState);
	void TryInitializeBindings();
	void ReceiveBeginPlay();
	void InitializeLimbActor(class USkeletalMesh* DisplayMesh, class USkeletalMeshComponent* SourcePoseMesh, class UOBJ_ImpactData_C* ImpactData);
	void UpdateVisibility(bool VisibilityState);
	void OnDynaDamage(class FName DynaElement, bool OnBeginPlay);
	void UpdateMeshComponentTicks(bool State);
	void InitDismembermentForce(class UOBJ_ImpactData_C* ImpactData);
	void ApplyDismembermentForce();
	void IsTeleporting(bool* Result);
	void CanTeleportLimb(bool* Result);
	void TryTeleportLimb(const struct FVector& Location, const struct FRotator& Rotation, float MaterializeDuration, class USoundCue* SoundCue, class UNiagaraSystem* TeleportFX, bool* Result);
	void EVENT_OnDamageReceived(class AActor* OtherActor, const struct FAttribDamageInstance& DamageInstance, class UObject* UserParams);
	void EVENT_OnTryStopPhysics();
	void EVENT_OnFinishedMaterializingFromTeleport();
	void TryStartPhysicsSleepTimer();
	void TryEnablePhysics();
	bool ShouldSaveActor(struct FStreamingSaveGameActorParams* Params_0);
	bool ReceivePendingBodyTransforms(class USkeletalMeshComponent* SkeletalMeshComponent, const TArray<struct FTransform>& BodyTransforms);
	bool ReceivePendingCharacterVelocity(const struct FVector& Velocity);

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"DismembermentLimb_Base_C">();
	}
	static class ADismembermentLimb_Base_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<ADismembermentLimb_Base_C>();
	}
};
static_assert(alignof(ADismembermentLimb_Base_C) == 0x000008, "Wrong alignment on ADismembermentLimb_Base_C");
static_assert(sizeof(ADismembermentLimb_Base_C) == 0x000298, "Wrong size on ADismembermentLimb_Base_C");
static_assert(offsetof(ADismembermentLimb_Base_C, UberGraphFrame) == 0x000220, "Member 'ADismembermentLimb_Base_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(ADismembermentLimb_Base_C, COMP_SkinnedDecalSampler) == 0x000228, "Member 'ADismembermentLimb_Base_C::COMP_SkinnedDecalSampler' has a wrong offset!");
static_assert(offsetof(ADismembermentLimb_Base_C, COMP_Descriptor) == 0x000230, "Member 'ADismembermentLimb_Base_C::COMP_Descriptor' has a wrong offset!");
static_assert(offsetof(ADismembermentLimb_Base_C, COMP_PhysicsImpactHandler) == 0x000238, "Member 'ADismembermentLimb_Base_C::COMP_PhysicsImpactHandler' has a wrong offset!");
static_assert(offsetof(ADismembermentLimb_Base_C, COMP_VoxelCullable) == 0x000240, "Member 'ADismembermentLimb_Base_C::COMP_VoxelCullable' has a wrong offset!");
static_assert(offsetof(ADismembermentLimb_Base_C, COMP_DismembermentManager) == 0x000248, "Member 'ADismembermentLimb_Base_C::COMP_DismembermentManager' has a wrong offset!");
static_assert(offsetof(ADismembermentLimb_Base_C, AttribManager) == 0x000250, "Member 'ADismembermentLimb_Base_C::AttribManager' has a wrong offset!");
static_assert(offsetof(ADismembermentLimb_Base_C, LimbSkeletalMesh) == 0x000258, "Member 'ADismembermentLimb_Base_C::LimbSkeletalMesh' has a wrong offset!");
static_assert(offsetof(ADismembermentLimb_Base_C, IsWaitingToDie) == 0x000260, "Member 'ADismembermentLimb_Base_C::IsWaitingToDie' has a wrong offset!");
static_assert(offsetof(ADismembermentLimb_Base_C, Impact_Point) == 0x000264, "Member 'ADismembermentLimb_Base_C::Impact_Point' has a wrong offset!");
static_assert(offsetof(ADismembermentLimb_Base_C, Bone_Name) == 0x000270, "Member 'ADismembermentLimb_Base_C::Bone_Name' has a wrong offset!");
static_assert(offsetof(ADismembermentLimb_Base_C, Linear_Impulse) == 0x000278, "Member 'ADismembermentLimb_Base_C::Linear_Impulse' has a wrong offset!");
static_assert(offsetof(ADismembermentLimb_Base_C, DismembermentTimestamp) == 0x000284, "Member 'ADismembermentLimb_Base_C::DismembermentTimestamp' has a wrong offset!");
static_assert(offsetof(ADismembermentLimb_Base_C, TeleportTimerHandle) == 0x000288, "Member 'ADismembermentLimb_Base_C::TeleportTimerHandle' has a wrong offset!");
static_assert(offsetof(ADismembermentLimb_Base_C, PhysicsSleepTimerHandle) == 0x000290, "Member 'ADismembermentLimb_Base_C::PhysicsSleepTimerHandle' has a wrong offset!");

}

