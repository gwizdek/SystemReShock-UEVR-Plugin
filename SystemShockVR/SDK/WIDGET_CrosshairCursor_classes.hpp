#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: WIDGET_CrosshairCursor

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "CoreUObject_structs.hpp"
#include "UMG_classes.hpp"
#include "ENUM_CursorMode_structs.hpp"


namespace SDK
{

// WidgetBlueprintGeneratedClass WIDGET_CrosshairCursor.WIDGET_CrosshairCursor_C
// 0x00F8 (0x0358 - 0x0260)
class UWIDGET_CrosshairCursor_C final : public UUserWidget
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x0260(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	class UWidgetAnimation*                       TransitionHighlight;                               // 0x0268(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, RepSkip, NoDestructor, HasGetValueTypeHash)
	class UWidgetAnimation*                       TransitionCursor;                                  // 0x0270(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, RepSkip, NoDestructor, HasGetValueTypeHash)
	class UGridMeshWidget*                        MESH_Brackets;                                     // 0x0278(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UGridMeshWidget*                        MESH_CrosshairCursor;                              // 0x0280(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UGridMeshWidget*                        MESH_CursorBrackets;                               // 0x0288(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UGridMeshWidget*                        MESH_CursorHit;                                    // 0x0290(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UGridMeshWidget*                        MESH_InteractChannel;                              // 0x0298(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UGridMeshWidget*                        MESH_SelectionRegion;                              // 0x02A0(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UCanvasPanel*                           PANEL_Brackets;                                    // 0x02A8(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UCanvasPanel*                           PANEL_Crosshair;                                   // 0x02B0(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UWIDGET_PlayerHUD_C*                    PlayerHUD;                                         // 0x02B8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         GridCellSize;                                      // 0x02C0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         HitTransitionDuration;                             // 0x02C4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         LastAttribSpreadRatio;                             // 0x02C8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         LastDisplayedSpreadRatio;                          // 0x02CC(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         LastDamageDealtTimestamp;                          // 0x02D0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector2D                              InitCursorSize;                                    // 0x02D4(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          bIsCursor;                                         // 0x02DC(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          bIsHighlighted;                                    // 0x02DD(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_2DE[0x2];                                      // 0x02DE(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	class UMaterialInterface*                     CursorMaterial;                                    // 0x02E0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UMaterialInstanceDynamic*               ItemMaterial;                                      // 0x02E8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          ItemDropActive;                                    // 0x02F0(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          InteractionSelectionActive;                        // 0x02F1(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          SelectionActive;                                   // 0x02F2(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          SelectionActivating;                               // 0x02F3(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          SelectionDeactivating;                             // 0x02F4(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_2F5[0x3];                                      // 0x02F5(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         SelectionTransitionTimestamp;                      // 0x02F8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         SelectionTransitionDuration;                       // 0x02FC(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector2D                              CursorBracketSize;                                 // 0x0300(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector2D                              SelectionBracketCurrentPosition;                   // 0x0308(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector2D                              SelectionBracketSourcePosition;                    // 0x0310(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector2D                              SelectionBracketTargetPosition;                    // 0x0318(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector2D                              SelectionCurrentSize;                              // 0x0320(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector2D                              SelectionSourceSize;                               // 0x0328(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector2D                              SelectionTargetSize;                               // 0x0330(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UShapeComponent*                        LastShapeComponent;                                // 0x0338(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UPrimitiveComponent*                    LastBracketPrimitive;                              // 0x0340(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UMaterialInstanceDynamic*               HitMaterial;                                       // 0x0348(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UMaterialInstanceDynamic*               InteractChannelMaterial;                           // 0x0350(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

public:
	void ExecuteUbergraph_WIDGET_CrosshairCursor(int32 EntryPoint);
	void Tick(const struct FGeometry& MyGeometry, float InDeltaTime);
	void Construct();
	void InitializeCursor(class UWIDGET_PlayerHUD_C* HUD);
	void SetDefaultCursor();
	void SetItemCursor(class UTexture* Texture, const struct FVector2D& CursorSize, bool IsRotated);
	void CreateItemDynamicMaterial();
	void SetCursorMode(ENUM_CursorMode Mode);
	void SetHighlighted(bool bShouldHighlight);
	void UpdateSelectionRegionParent(class UGridMeshWidget* ParentGridMeshWidget);
	void UpdateBracketsParent(class UCanvasPanel* ParentPanel);
	void UpdateBracketTransition();
	void UpdateCursorItemBrackets(class UITEM_Base_C* Item, class UInventoryBag_C* Bag, class UGridMeshWidget* BagMeshWidget, const struct FIntPoint& CursorItemGridCoords, bool UpdatePosition);
	void GetSelectionRegionWindowPosition(const struct FVector2D& WidgetOffset, struct FVector2D* Result);
	void UpdateItemUnderCursorBrackets(class UITEM_Base_C* Item, class UInventoryBagUI_C* BagUI, const struct FVector2D& CursorScreenPosition);
	void UpdateInteractionBrackets(class UObject* Interactable, class UPrimitiveComponent* Primitive, const struct FVector2D& CursorScreenPosition, bool* Result);
	void UpdateBrackets(const struct FVector2D& CursorScreenPosition, const struct FVector2D& SelectionPosition, const struct FVector2D& SelectionSize, bool RequiresTransitionUpdate, bool* Result);
	void DeactivateBrackets(const struct FVector2D& CursorScreenPosition);
	void HideSelectionBrackets();
	void HideSelection();
	void UpdateCrosshairSpread();
	void EVENT_OnDamageDealt(class AActor* OtherActor, const struct FAttribDamageInstance& DamageInstance, class UObject* UserParams);
	void SetChannelProgress(float Progress);
	void UpdateCursorHitTransition();
	void GetCurrentSpreadAngleRatio(float* Result);

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"WIDGET_CrosshairCursor_C">();
	}
	static class UWIDGET_CrosshairCursor_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<UWIDGET_CrosshairCursor_C>();
	}
};
static_assert(alignof(UWIDGET_CrosshairCursor_C) == 0x000008, "Wrong alignment on UWIDGET_CrosshairCursor_C");
static_assert(sizeof(UWIDGET_CrosshairCursor_C) == 0x000358, "Wrong size on UWIDGET_CrosshairCursor_C");
static_assert(offsetof(UWIDGET_CrosshairCursor_C, UberGraphFrame) == 0x000260, "Member 'UWIDGET_CrosshairCursor_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(UWIDGET_CrosshairCursor_C, TransitionHighlight) == 0x000268, "Member 'UWIDGET_CrosshairCursor_C::TransitionHighlight' has a wrong offset!");
static_assert(offsetof(UWIDGET_CrosshairCursor_C, TransitionCursor) == 0x000270, "Member 'UWIDGET_CrosshairCursor_C::TransitionCursor' has a wrong offset!");
static_assert(offsetof(UWIDGET_CrosshairCursor_C, MESH_Brackets) == 0x000278, "Member 'UWIDGET_CrosshairCursor_C::MESH_Brackets' has a wrong offset!");
static_assert(offsetof(UWIDGET_CrosshairCursor_C, MESH_CrosshairCursor) == 0x000280, "Member 'UWIDGET_CrosshairCursor_C::MESH_CrosshairCursor' has a wrong offset!");
static_assert(offsetof(UWIDGET_CrosshairCursor_C, MESH_CursorBrackets) == 0x000288, "Member 'UWIDGET_CrosshairCursor_C::MESH_CursorBrackets' has a wrong offset!");
static_assert(offsetof(UWIDGET_CrosshairCursor_C, MESH_CursorHit) == 0x000290, "Member 'UWIDGET_CrosshairCursor_C::MESH_CursorHit' has a wrong offset!");
static_assert(offsetof(UWIDGET_CrosshairCursor_C, MESH_InteractChannel) == 0x000298, "Member 'UWIDGET_CrosshairCursor_C::MESH_InteractChannel' has a wrong offset!");
static_assert(offsetof(UWIDGET_CrosshairCursor_C, MESH_SelectionRegion) == 0x0002A0, "Member 'UWIDGET_CrosshairCursor_C::MESH_SelectionRegion' has a wrong offset!");
static_assert(offsetof(UWIDGET_CrosshairCursor_C, PANEL_Brackets) == 0x0002A8, "Member 'UWIDGET_CrosshairCursor_C::PANEL_Brackets' has a wrong offset!");
static_assert(offsetof(UWIDGET_CrosshairCursor_C, PANEL_Crosshair) == 0x0002B0, "Member 'UWIDGET_CrosshairCursor_C::PANEL_Crosshair' has a wrong offset!");
static_assert(offsetof(UWIDGET_CrosshairCursor_C, PlayerHUD) == 0x0002B8, "Member 'UWIDGET_CrosshairCursor_C::PlayerHUD' has a wrong offset!");
static_assert(offsetof(UWIDGET_CrosshairCursor_C, GridCellSize) == 0x0002C0, "Member 'UWIDGET_CrosshairCursor_C::GridCellSize' has a wrong offset!");
static_assert(offsetof(UWIDGET_CrosshairCursor_C, HitTransitionDuration) == 0x0002C4, "Member 'UWIDGET_CrosshairCursor_C::HitTransitionDuration' has a wrong offset!");
static_assert(offsetof(UWIDGET_CrosshairCursor_C, LastAttribSpreadRatio) == 0x0002C8, "Member 'UWIDGET_CrosshairCursor_C::LastAttribSpreadRatio' has a wrong offset!");
static_assert(offsetof(UWIDGET_CrosshairCursor_C, LastDisplayedSpreadRatio) == 0x0002CC, "Member 'UWIDGET_CrosshairCursor_C::LastDisplayedSpreadRatio' has a wrong offset!");
static_assert(offsetof(UWIDGET_CrosshairCursor_C, LastDamageDealtTimestamp) == 0x0002D0, "Member 'UWIDGET_CrosshairCursor_C::LastDamageDealtTimestamp' has a wrong offset!");
static_assert(offsetof(UWIDGET_CrosshairCursor_C, InitCursorSize) == 0x0002D4, "Member 'UWIDGET_CrosshairCursor_C::InitCursorSize' has a wrong offset!");
static_assert(offsetof(UWIDGET_CrosshairCursor_C, bIsCursor) == 0x0002DC, "Member 'UWIDGET_CrosshairCursor_C::bIsCursor' has a wrong offset!");
static_assert(offsetof(UWIDGET_CrosshairCursor_C, bIsHighlighted) == 0x0002DD, "Member 'UWIDGET_CrosshairCursor_C::bIsHighlighted' has a wrong offset!");
static_assert(offsetof(UWIDGET_CrosshairCursor_C, CursorMaterial) == 0x0002E0, "Member 'UWIDGET_CrosshairCursor_C::CursorMaterial' has a wrong offset!");
static_assert(offsetof(UWIDGET_CrosshairCursor_C, ItemMaterial) == 0x0002E8, "Member 'UWIDGET_CrosshairCursor_C::ItemMaterial' has a wrong offset!");
static_assert(offsetof(UWIDGET_CrosshairCursor_C, ItemDropActive) == 0x0002F0, "Member 'UWIDGET_CrosshairCursor_C::ItemDropActive' has a wrong offset!");
static_assert(offsetof(UWIDGET_CrosshairCursor_C, InteractionSelectionActive) == 0x0002F1, "Member 'UWIDGET_CrosshairCursor_C::InteractionSelectionActive' has a wrong offset!");
static_assert(offsetof(UWIDGET_CrosshairCursor_C, SelectionActive) == 0x0002F2, "Member 'UWIDGET_CrosshairCursor_C::SelectionActive' has a wrong offset!");
static_assert(offsetof(UWIDGET_CrosshairCursor_C, SelectionActivating) == 0x0002F3, "Member 'UWIDGET_CrosshairCursor_C::SelectionActivating' has a wrong offset!");
static_assert(offsetof(UWIDGET_CrosshairCursor_C, SelectionDeactivating) == 0x0002F4, "Member 'UWIDGET_CrosshairCursor_C::SelectionDeactivating' has a wrong offset!");
static_assert(offsetof(UWIDGET_CrosshairCursor_C, SelectionTransitionTimestamp) == 0x0002F8, "Member 'UWIDGET_CrosshairCursor_C::SelectionTransitionTimestamp' has a wrong offset!");
static_assert(offsetof(UWIDGET_CrosshairCursor_C, SelectionTransitionDuration) == 0x0002FC, "Member 'UWIDGET_CrosshairCursor_C::SelectionTransitionDuration' has a wrong offset!");
static_assert(offsetof(UWIDGET_CrosshairCursor_C, CursorBracketSize) == 0x000300, "Member 'UWIDGET_CrosshairCursor_C::CursorBracketSize' has a wrong offset!");
static_assert(offsetof(UWIDGET_CrosshairCursor_C, SelectionBracketCurrentPosition) == 0x000308, "Member 'UWIDGET_CrosshairCursor_C::SelectionBracketCurrentPosition' has a wrong offset!");
static_assert(offsetof(UWIDGET_CrosshairCursor_C, SelectionBracketSourcePosition) == 0x000310, "Member 'UWIDGET_CrosshairCursor_C::SelectionBracketSourcePosition' has a wrong offset!");
static_assert(offsetof(UWIDGET_CrosshairCursor_C, SelectionBracketTargetPosition) == 0x000318, "Member 'UWIDGET_CrosshairCursor_C::SelectionBracketTargetPosition' has a wrong offset!");
static_assert(offsetof(UWIDGET_CrosshairCursor_C, SelectionCurrentSize) == 0x000320, "Member 'UWIDGET_CrosshairCursor_C::SelectionCurrentSize' has a wrong offset!");
static_assert(offsetof(UWIDGET_CrosshairCursor_C, SelectionSourceSize) == 0x000328, "Member 'UWIDGET_CrosshairCursor_C::SelectionSourceSize' has a wrong offset!");
static_assert(offsetof(UWIDGET_CrosshairCursor_C, SelectionTargetSize) == 0x000330, "Member 'UWIDGET_CrosshairCursor_C::SelectionTargetSize' has a wrong offset!");
static_assert(offsetof(UWIDGET_CrosshairCursor_C, LastShapeComponent) == 0x000338, "Member 'UWIDGET_CrosshairCursor_C::LastShapeComponent' has a wrong offset!");
static_assert(offsetof(UWIDGET_CrosshairCursor_C, LastBracketPrimitive) == 0x000340, "Member 'UWIDGET_CrosshairCursor_C::LastBracketPrimitive' has a wrong offset!");
static_assert(offsetof(UWIDGET_CrosshairCursor_C, HitMaterial) == 0x000348, "Member 'UWIDGET_CrosshairCursor_C::HitMaterial' has a wrong offset!");
static_assert(offsetof(UWIDGET_CrosshairCursor_C, InteractChannelMaterial) == 0x000350, "Member 'UWIDGET_CrosshairCursor_C::InteractChannelMaterial' has a wrong offset!");

}

