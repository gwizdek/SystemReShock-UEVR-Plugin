#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: PROJECTILE_Cyberspace_Base

#include "Basic.hpp"

#include "PROJECTILE_Cyberspace_Base_classes.hpp"
#include "PROJECTILE_Cyberspace_Base_parameters.hpp"


namespace SDK
{

// Function PROJECTILE_Cyberspace_Base.PROJECTILE_Cyberspace_Base_C.ExecuteUbergraph_PROJECTILE_Cyberspace_Base
// (Final, UbergraphFunction)
// Parameters:
// int32                                   EntryPoint                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void APROJECTILE_Cyberspace_Base_C::ExecuteUbergraph_PROJECTILE_Cyberspace_Base(int32 EntryPoint)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("PROJECTILE_Cyberspace_Base_C", "ExecuteUbergraph_PROJECTILE_Cyberspace_Base");

	Params::PROJECTILE_Cyberspace_Base_C_ExecuteUbergraph_PROJECTILE_Cyberspace_Base Parms{};

	Parms.EntryPoint = EntryPoint;

	UObject::ProcessEvent(Func, &Parms);
}


// Function PROJECTILE_Cyberspace_Base.PROJECTILE_Cyberspace_Base_C.ReceiveBeginPlay
// (Event, Protected, BlueprintEvent)

void APROJECTILE_Cyberspace_Base_C::ReceiveBeginPlay()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("PROJECTILE_Cyberspace_Base_C", "ReceiveBeginPlay");

	UObject::ProcessEvent(Func, nullptr);
}


// Function PROJECTILE_Cyberspace_Base.PROJECTILE_Cyberspace_Base_C.ReceiveTick
// (Event, Public, BlueprintEvent)
// Parameters:
// float                                   DeltaSeconds                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void APROJECTILE_Cyberspace_Base_C::ReceiveTick(float DeltaSeconds)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("PROJECTILE_Cyberspace_Base_C", "ReceiveTick");

	Params::PROJECTILE_Cyberspace_Base_C_ReceiveTick Parms{};

	Parms.DeltaSeconds = DeltaSeconds;

	UObject::ProcessEvent(Func, &Parms);
}


// Function PROJECTILE_Cyberspace_Base.PROJECTILE_Cyberspace_Base_C.UpdateProjectileAcceleration
// (Protected, BlueprintCallable, BlueprintEvent)
// Parameters:
// float                                   DeltaTime                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void APROJECTILE_Cyberspace_Base_C::UpdateProjectileAcceleration(float DeltaTime)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("PROJECTILE_Cyberspace_Base_C", "UpdateProjectileAcceleration");

	Params::PROJECTILE_Cyberspace_Base_C_UpdateProjectileAcceleration Parms{};

	Parms.DeltaTime = DeltaTime;

	UObject::ProcessEvent(Func, &Parms);
}


// Function PROJECTILE_Cyberspace_Base.PROJECTILE_Cyberspace_Base_C.DestroyProjectile
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// struct FVector                          ImpactNormal                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void APROJECTILE_Cyberspace_Base_C::DestroyProjectile(const struct FVector& ImpactNormal)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("PROJECTILE_Cyberspace_Base_C", "DestroyProjectile");

	Params::PROJECTILE_Cyberspace_Base_C_DestroyProjectile Parms{};

	Parms.ImpactNormal = std::move(ImpactNormal);

	UObject::ProcessEvent(Func, &Parms);
}


// Function PROJECTILE_Cyberspace_Base.PROJECTILE_Cyberspace_Base_C.OverlapProjectile
// (Protected, BlueprintCallable, BlueprintEvent)
// Parameters:
// class APROJECTILE_Cyberspace_Base_C*    OtherProjectile                                        (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FVector                          OtherProjectileForward                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void APROJECTILE_Cyberspace_Base_C::OverlapProjectile(class APROJECTILE_Cyberspace_Base_C* OtherProjectile, const struct FVector& OtherProjectileForward)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("PROJECTILE_Cyberspace_Base_C", "OverlapProjectile");

	Params::PROJECTILE_Cyberspace_Base_C_OverlapProjectile Parms{};

	Parms.OtherProjectile = OtherProjectile;
	Parms.OtherProjectileForward = std::move(OtherProjectileForward);

	UObject::ProcessEvent(Func, &Parms);
}


// Function PROJECTILE_Cyberspace_Base.PROJECTILE_Cyberspace_Base_C.GetRicochetDirection
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// struct FVector                          SourceForward                                          (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FVector                          OtherForward                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FVector                          RicochetDirection                                      (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void APROJECTILE_Cyberspace_Base_C::GetRicochetDirection(const struct FVector& SourceForward, const struct FVector& OtherForward, struct FVector* RicochetDirection)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("PROJECTILE_Cyberspace_Base_C", "GetRicochetDirection");

	Params::PROJECTILE_Cyberspace_Base_C_GetRicochetDirection Parms{};

	Parms.SourceForward = std::move(SourceForward);
	Parms.OtherForward = std::move(OtherForward);

	UObject::ProcessEvent(Func, &Parms);

	if (RicochetDirection != nullptr)
		*RicochetDirection = std::move(Parms.RicochetDirection);
}


// Function PROJECTILE_Cyberspace_Base.PROJECTILE_Cyberspace_Base_C.TryBulletCollision
// (Protected, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// struct FHitResult                       Hit                                                    (BlueprintVisible, BlueprintReadOnly, Parm, IsPlainOldData, NoDestructor, ContainsInstancedReference)
// float                                   FrameHitDeltaTime                                      (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    Result                                                 (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void APROJECTILE_Cyberspace_Base_C::TryBulletCollision(const struct FHitResult& Hit, float FrameHitDeltaTime, bool* Result)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("PROJECTILE_Cyberspace_Base_C", "TryBulletCollision");

	Params::PROJECTILE_Cyberspace_Base_C_TryBulletCollision Parms{};

	Parms.Hit = std::move(Hit);
	Parms.FrameHitDeltaTime = FrameHitDeltaTime;

	UObject::ProcessEvent(Func, &Parms);

	if (Result != nullptr)
		*Result = Parms.Result;
}


// Function PROJECTILE_Cyberspace_Base.PROJECTILE_Cyberspace_Base_C.CanAttribManagerBeDamaged
// (Protected, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// class UAttribManagerComponent*          AttribManager                                          (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    Result                                                 (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void APROJECTILE_Cyberspace_Base_C::CanAttribManagerBeDamaged(class UAttribManagerComponent* AttribManager, bool* Result)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("PROJECTILE_Cyberspace_Base_C", "CanAttribManagerBeDamaged");

	Params::PROJECTILE_Cyberspace_Base_C_CanAttribManagerBeDamaged Parms{};

	Parms.AttribManager = AttribManager;

	UObject::ProcessEvent(Func, &Parms);

	if (Result != nullptr)
		*Result = Parms.Result;
}


// Function PROJECTILE_Cyberspace_Base.PROJECTILE_Cyberspace_Base_C.GetIgnoreCollisionActors
// (Protected, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// TArray<class AActor*>                   Result                                                 (Parm, OutParm)

void APROJECTILE_Cyberspace_Base_C::GetIgnoreCollisionActors(TArray<class AActor*>* Result)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("PROJECTILE_Cyberspace_Base_C", "GetIgnoreCollisionActors");

	Params::PROJECTILE_Cyberspace_Base_C_GetIgnoreCollisionActors Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (Result != nullptr)
		*Result = std::move(Parms.Result);
}


// Function PROJECTILE_Cyberspace_Base.PROJECTILE_Cyberspace_Base_C.CleanupBulletProjectile
// (Protected, BlueprintCallable, BlueprintEvent)

void APROJECTILE_Cyberspace_Base_C::CleanupBulletProjectile()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("PROJECTILE_Cyberspace_Base_C", "CleanupBulletProjectile");

	UObject::ProcessEvent(Func, nullptr);
}


// Function PROJECTILE_Cyberspace_Base.PROJECTILE_Cyberspace_Base_C.TryCreateSoundDetectionEvent
// (Protected, BlueprintCallable, BlueprintEvent)
// Parameters:
// struct FVector                          ImpactLocation                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void APROJECTILE_Cyberspace_Base_C::TryCreateSoundDetectionEvent(const struct FVector& ImpactLocation)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("PROJECTILE_Cyberspace_Base_C", "TryCreateSoundDetectionEvent");

	Params::PROJECTILE_Cyberspace_Base_C_TryCreateSoundDetectionEvent Parms{};

	Parms.ImpactLocation = std::move(ImpactLocation);

	UObject::ProcessEvent(Func, &Parms);
}

}

