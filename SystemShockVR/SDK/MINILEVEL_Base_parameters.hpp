#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: MINILEVEL_Base

#include "Basic.hpp"


namespace SDK::Params
{

// Function MINILEVEL_Base.MINILEVEL_Base_C.ExecuteUbergraph_MINILEVEL_Base
// 0x0048 (0x0048 - 0x0000)
struct MINILEVEL_Base_C_ExecuteUbergraph_MINILEVEL_Base final
{
public:
	int32                                         EntryPoint;                                        // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TDelegate<void()>                             K2Node_CreateDelegate_OutputDelegate;              // 0x0004(0x0010)(ZeroConstructor, NoDestructor)
	float                                         K2Node_Event_DeltaSeconds;                         // 0x0014(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_UpdateMinigame_Result;                    // 0x0018(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_19[0x7];                                       // 0x0019(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class AGameModeBase*                          CallFunc_GetGameMode_ReturnValue;                  // 0x0020(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TDelegate<void(class APlayerController* PlayerController)> K2Node_CreateDelegate_OutputDelegate_1;            // 0x0028(0x0010)(ZeroConstructor, NoDestructor)
	class AGM_SinglePlayer_C*                     K2Node_DynamicCast_AsGM_Single_Player;             // 0x0038(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0040(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(MINILEVEL_Base_C_ExecuteUbergraph_MINILEVEL_Base) == 0x000008, "Wrong alignment on MINILEVEL_Base_C_ExecuteUbergraph_MINILEVEL_Base");
static_assert(sizeof(MINILEVEL_Base_C_ExecuteUbergraph_MINILEVEL_Base) == 0x000048, "Wrong size on MINILEVEL_Base_C_ExecuteUbergraph_MINILEVEL_Base");
static_assert(offsetof(MINILEVEL_Base_C_ExecuteUbergraph_MINILEVEL_Base, EntryPoint) == 0x000000, "Member 'MINILEVEL_Base_C_ExecuteUbergraph_MINILEVEL_Base::EntryPoint' has a wrong offset!");
static_assert(offsetof(MINILEVEL_Base_C_ExecuteUbergraph_MINILEVEL_Base, K2Node_CreateDelegate_OutputDelegate) == 0x000004, "Member 'MINILEVEL_Base_C_ExecuteUbergraph_MINILEVEL_Base::K2Node_CreateDelegate_OutputDelegate' has a wrong offset!");
static_assert(offsetof(MINILEVEL_Base_C_ExecuteUbergraph_MINILEVEL_Base, K2Node_Event_DeltaSeconds) == 0x000014, "Member 'MINILEVEL_Base_C_ExecuteUbergraph_MINILEVEL_Base::K2Node_Event_DeltaSeconds' has a wrong offset!");
static_assert(offsetof(MINILEVEL_Base_C_ExecuteUbergraph_MINILEVEL_Base, CallFunc_UpdateMinigame_Result) == 0x000018, "Member 'MINILEVEL_Base_C_ExecuteUbergraph_MINILEVEL_Base::CallFunc_UpdateMinigame_Result' has a wrong offset!");
static_assert(offsetof(MINILEVEL_Base_C_ExecuteUbergraph_MINILEVEL_Base, CallFunc_GetGameMode_ReturnValue) == 0x000020, "Member 'MINILEVEL_Base_C_ExecuteUbergraph_MINILEVEL_Base::CallFunc_GetGameMode_ReturnValue' has a wrong offset!");
static_assert(offsetof(MINILEVEL_Base_C_ExecuteUbergraph_MINILEVEL_Base, K2Node_CreateDelegate_OutputDelegate_1) == 0x000028, "Member 'MINILEVEL_Base_C_ExecuteUbergraph_MINILEVEL_Base::K2Node_CreateDelegate_OutputDelegate_1' has a wrong offset!");
static_assert(offsetof(MINILEVEL_Base_C_ExecuteUbergraph_MINILEVEL_Base, K2Node_DynamicCast_AsGM_Single_Player) == 0x000038, "Member 'MINILEVEL_Base_C_ExecuteUbergraph_MINILEVEL_Base::K2Node_DynamicCast_AsGM_Single_Player' has a wrong offset!");
static_assert(offsetof(MINILEVEL_Base_C_ExecuteUbergraph_MINILEVEL_Base, K2Node_DynamicCast_bSuccess) == 0x000040, "Member 'MINILEVEL_Base_C_ExecuteUbergraph_MINILEVEL_Base::K2Node_DynamicCast_bSuccess' has a wrong offset!");

// Function MINILEVEL_Base.MINILEVEL_Base_C.ReceiveTick
// 0x0004 (0x0004 - 0x0000)
struct MINILEVEL_Base_C_ReceiveTick final
{
public:
	float                                         DeltaSeconds;                                      // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(MINILEVEL_Base_C_ReceiveTick) == 0x000004, "Wrong alignment on MINILEVEL_Base_C_ReceiveTick");
static_assert(sizeof(MINILEVEL_Base_C_ReceiveTick) == 0x000004, "Wrong size on MINILEVEL_Base_C_ReceiveTick");
static_assert(offsetof(MINILEVEL_Base_C_ReceiveTick, DeltaSeconds) == 0x000000, "Member 'MINILEVEL_Base_C_ReceiveTick::DeltaSeconds' has a wrong offset!");

// Function MINILEVEL_Base.MINILEVEL_Base_C.InitializeMinigame
// 0x0020 (0x0020 - 0x0000)
struct MINILEVEL_Base_C_InitializeMinigame final
{
public:
	class ACON_Hacker_C*                          PlayerController_0;                                // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class APAWN_Hacker_Simple_C*                  PlayerPawn;                                        // 0x0008(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class USceneCaptureComponent2D*               SceneCaptureComponent_0;                           // 0x0010(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Result;                                            // 0x0018(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(MINILEVEL_Base_C_InitializeMinigame) == 0x000008, "Wrong alignment on MINILEVEL_Base_C_InitializeMinigame");
static_assert(sizeof(MINILEVEL_Base_C_InitializeMinigame) == 0x000020, "Wrong size on MINILEVEL_Base_C_InitializeMinigame");
static_assert(offsetof(MINILEVEL_Base_C_InitializeMinigame, PlayerController_0) == 0x000000, "Member 'MINILEVEL_Base_C_InitializeMinigame::PlayerController_0' has a wrong offset!");
static_assert(offsetof(MINILEVEL_Base_C_InitializeMinigame, PlayerPawn) == 0x000008, "Member 'MINILEVEL_Base_C_InitializeMinigame::PlayerPawn' has a wrong offset!");
static_assert(offsetof(MINILEVEL_Base_C_InitializeMinigame, SceneCaptureComponent_0) == 0x000010, "Member 'MINILEVEL_Base_C_InitializeMinigame::SceneCaptureComponent_0' has a wrong offset!");
static_assert(offsetof(MINILEVEL_Base_C_InitializeMinigame, Result) == 0x000018, "Member 'MINILEVEL_Base_C_InitializeMinigame::Result' has a wrong offset!");

// Function MINILEVEL_Base.MINILEVEL_Base_C.UpdateMinigame
// 0x0008 (0x0008 - 0x0000)
struct MINILEVEL_Base_C_UpdateMinigame final
{
public:
	float                                         DeltaTime;                                         // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Result;                                            // 0x0004(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(MINILEVEL_Base_C_UpdateMinigame) == 0x000004, "Wrong alignment on MINILEVEL_Base_C_UpdateMinigame");
static_assert(sizeof(MINILEVEL_Base_C_UpdateMinigame) == 0x000008, "Wrong size on MINILEVEL_Base_C_UpdateMinigame");
static_assert(offsetof(MINILEVEL_Base_C_UpdateMinigame, DeltaTime) == 0x000000, "Member 'MINILEVEL_Base_C_UpdateMinigame::DeltaTime' has a wrong offset!");
static_assert(offsetof(MINILEVEL_Base_C_UpdateMinigame, Result) == 0x000004, "Member 'MINILEVEL_Base_C_UpdateMinigame::Result' has a wrong offset!");

// Function MINILEVEL_Base.MINILEVEL_Base_C.UnloadMinigame
// 0x0020 (0x0020 - 0x0000)
struct MINILEVEL_Base_C_UnloadMinigame final
{
public:
	bool                                          Result;                                            // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class AActor*                                 CallFunc_GetChannelingInteractable_Result;         // 0x0008(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AINTERACT_GamePig_C*                    K2Node_DynamicCast_AsINTERACT_Game_Pig;            // 0x0010(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0018(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_PossessMinigamePawn_Result;               // 0x0019(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(MINILEVEL_Base_C_UnloadMinigame) == 0x000008, "Wrong alignment on MINILEVEL_Base_C_UnloadMinigame");
static_assert(sizeof(MINILEVEL_Base_C_UnloadMinigame) == 0x000020, "Wrong size on MINILEVEL_Base_C_UnloadMinigame");
static_assert(offsetof(MINILEVEL_Base_C_UnloadMinigame, Result) == 0x000000, "Member 'MINILEVEL_Base_C_UnloadMinigame::Result' has a wrong offset!");
static_assert(offsetof(MINILEVEL_Base_C_UnloadMinigame, CallFunc_GetChannelingInteractable_Result) == 0x000008, "Member 'MINILEVEL_Base_C_UnloadMinigame::CallFunc_GetChannelingInteractable_Result' has a wrong offset!");
static_assert(offsetof(MINILEVEL_Base_C_UnloadMinigame, K2Node_DynamicCast_AsINTERACT_Game_Pig) == 0x000010, "Member 'MINILEVEL_Base_C_UnloadMinigame::K2Node_DynamicCast_AsINTERACT_Game_Pig' has a wrong offset!");
static_assert(offsetof(MINILEVEL_Base_C_UnloadMinigame, K2Node_DynamicCast_bSuccess) == 0x000018, "Member 'MINILEVEL_Base_C_UnloadMinigame::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(MINILEVEL_Base_C_UnloadMinigame, CallFunc_PossessMinigamePawn_Result) == 0x000019, "Member 'MINILEVEL_Base_C_UnloadMinigame::CallFunc_PossessMinigamePawn_Result' has a wrong offset!");

// Function MINILEVEL_Base.MINILEVEL_Base_C.PossessMinigamePawn
// 0x0020 (0x0020 - 0x0000)
struct MINILEVEL_Base_C_PossessMinigamePawn final
{
public:
	class APawn*                                  TargetPawn;                                        // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class APAWN_Hacker_Simple_C*                  HackerPawn_0;                                      // 0x0008(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class ACON_Hacker_C*                          Controller;                                        // 0x0010(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Result;                                            // 0x0018(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(MINILEVEL_Base_C_PossessMinigamePawn) == 0x000008, "Wrong alignment on MINILEVEL_Base_C_PossessMinigamePawn");
static_assert(sizeof(MINILEVEL_Base_C_PossessMinigamePawn) == 0x000020, "Wrong size on MINILEVEL_Base_C_PossessMinigamePawn");
static_assert(offsetof(MINILEVEL_Base_C_PossessMinigamePawn, TargetPawn) == 0x000000, "Member 'MINILEVEL_Base_C_PossessMinigamePawn::TargetPawn' has a wrong offset!");
static_assert(offsetof(MINILEVEL_Base_C_PossessMinigamePawn, HackerPawn_0) == 0x000008, "Member 'MINILEVEL_Base_C_PossessMinigamePawn::HackerPawn_0' has a wrong offset!");
static_assert(offsetof(MINILEVEL_Base_C_PossessMinigamePawn, Controller) == 0x000010, "Member 'MINILEVEL_Base_C_PossessMinigamePawn::Controller' has a wrong offset!");
static_assert(offsetof(MINILEVEL_Base_C_PossessMinigamePawn, Result) == 0x000018, "Member 'MINILEVEL_Base_C_PossessMinigamePawn::Result' has a wrong offset!");

// Function MINILEVEL_Base.MINILEVEL_Base_C.TogglePause
// 0x0002 (0x0002 - 0x0000)
struct MINILEVEL_Base_C_TogglePause final
{
public:
	bool                                          CallFunc_SetGamePaused_ReturnValue;                // 0x0000(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Not_PreBool_ReturnValue;                  // 0x0001(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(MINILEVEL_Base_C_TogglePause) == 0x000001, "Wrong alignment on MINILEVEL_Base_C_TogglePause");
static_assert(sizeof(MINILEVEL_Base_C_TogglePause) == 0x000002, "Wrong size on MINILEVEL_Base_C_TogglePause");
static_assert(offsetof(MINILEVEL_Base_C_TogglePause, CallFunc_SetGamePaused_ReturnValue) == 0x000000, "Member 'MINILEVEL_Base_C_TogglePause::CallFunc_SetGamePaused_ReturnValue' has a wrong offset!");
static_assert(offsetof(MINILEVEL_Base_C_TogglePause, CallFunc_Not_PreBool_ReturnValue) == 0x000001, "Member 'MINILEVEL_Base_C_TogglePause::CallFunc_Not_PreBool_ReturnValue' has a wrong offset!");

// Function MINILEVEL_Base.MINILEVEL_Base_C.OnGamePaused
// 0x0010 (0x0010 - 0x0000)
struct MINILEVEL_Base_C_OnGamePaused final
{
public:
	class APlayerController*                      PlayerController_0;                                // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Not_PreBool_ReturnValue;                  // 0x0008(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(MINILEVEL_Base_C_OnGamePaused) == 0x000008, "Wrong alignment on MINILEVEL_Base_C_OnGamePaused");
static_assert(sizeof(MINILEVEL_Base_C_OnGamePaused) == 0x000010, "Wrong size on MINILEVEL_Base_C_OnGamePaused");
static_assert(offsetof(MINILEVEL_Base_C_OnGamePaused, PlayerController_0) == 0x000000, "Member 'MINILEVEL_Base_C_OnGamePaused::PlayerController_0' has a wrong offset!");
static_assert(offsetof(MINILEVEL_Base_C_OnGamePaused, CallFunc_Not_PreBool_ReturnValue) == 0x000008, "Member 'MINILEVEL_Base_C_OnGamePaused::CallFunc_Not_PreBool_ReturnValue' has a wrong offset!");

// Function MINILEVEL_Base.MINILEVEL_Base_C.PlayMinigameSound
// 0x0030 (0x0030 - 0x0000)
struct MINILEVEL_Base_C_PlayMinigameSound final
{
public:
	class USoundCue*                              SoundCue;                                          // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UAudioComponent*                        AudioComponent;                                    // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 CallFunc_GetChannelingInteractable_Result;         // 0x0010(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AINTERACT_GamePig_C*                    K2Node_DynamicCast_AsINTERACT_Game_Pig;            // 0x0018(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0020(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_21[0x7];                                       // 0x0021(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UAudioComponent*                        CallFunc_PlayMinigameSound_AudioComponent;         // 0x0028(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(MINILEVEL_Base_C_PlayMinigameSound) == 0x000008, "Wrong alignment on MINILEVEL_Base_C_PlayMinigameSound");
static_assert(sizeof(MINILEVEL_Base_C_PlayMinigameSound) == 0x000030, "Wrong size on MINILEVEL_Base_C_PlayMinigameSound");
static_assert(offsetof(MINILEVEL_Base_C_PlayMinigameSound, SoundCue) == 0x000000, "Member 'MINILEVEL_Base_C_PlayMinigameSound::SoundCue' has a wrong offset!");
static_assert(offsetof(MINILEVEL_Base_C_PlayMinigameSound, AudioComponent) == 0x000008, "Member 'MINILEVEL_Base_C_PlayMinigameSound::AudioComponent' has a wrong offset!");
static_assert(offsetof(MINILEVEL_Base_C_PlayMinigameSound, CallFunc_GetChannelingInteractable_Result) == 0x000010, "Member 'MINILEVEL_Base_C_PlayMinigameSound::CallFunc_GetChannelingInteractable_Result' has a wrong offset!");
static_assert(offsetof(MINILEVEL_Base_C_PlayMinigameSound, K2Node_DynamicCast_AsINTERACT_Game_Pig) == 0x000018, "Member 'MINILEVEL_Base_C_PlayMinigameSound::K2Node_DynamicCast_AsINTERACT_Game_Pig' has a wrong offset!");
static_assert(offsetof(MINILEVEL_Base_C_PlayMinigameSound, K2Node_DynamicCast_bSuccess) == 0x000020, "Member 'MINILEVEL_Base_C_PlayMinigameSound::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(MINILEVEL_Base_C_PlayMinigameSound, CallFunc_PlayMinigameSound_AudioComponent) == 0x000028, "Member 'MINILEVEL_Base_C_PlayMinigameSound::CallFunc_PlayMinigameSound_AudioComponent' has a wrong offset!");

}

