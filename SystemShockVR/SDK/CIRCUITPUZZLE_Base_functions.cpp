#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: CIRCUITPUZZLE_Base

#include "Basic.hpp"

#include "CIRCUITPUZZLE_Base_classes.hpp"
#include "CIRCUITPUZZLE_Base_parameters.hpp"


namespace SDK
{

// Function CIRCUITPUZZLE_Base.CIRCUITPUZZLE_Base_C.ExecuteUbergraph_CIRCUITPUZZLE_Base
// (Final, UbergraphFunction)
// Parameters:
// int32                                   EntryPoint                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ACIRCUITPUZZLE_Base_C::ExecuteUbergraph_CIRCUITPUZZLE_Base(int32 EntryPoint)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CIRCUITPUZZLE_Base_C", "ExecuteUbergraph_CIRCUITPUZZLE_Base");

	Params::CIRCUITPUZZLE_Base_C_ExecuteUbergraph_CIRCUITPUZZLE_Base Parms{};

	Parms.EntryPoint = EntryPoint;

	UObject::ProcessEvent(Func, &Parms);
}


// Function CIRCUITPUZZLE_Base.CIRCUITPUZZLE_Base_C.ReceiveBeginPlay
// (Event, Protected, BlueprintEvent)

void ACIRCUITPUZZLE_Base_C::ReceiveBeginPlay()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CIRCUITPUZZLE_Base_C", "ReceiveBeginPlay");

	UObject::ProcessEvent(Func, nullptr);
}


// Function CIRCUITPUZZLE_Base.CIRCUITPUZZLE_Base_C.UserConstructionScript
// (Event, Public, HasDefaults, BlueprintCallable, BlueprintEvent)

void ACIRCUITPUZZLE_Base_C::UserConstructionScript()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CIRCUITPUZZLE_Base_C", "UserConstructionScript");

	UObject::ProcessEvent(Func, nullptr);
}


// Function CIRCUITPUZZLE_Base.CIRCUITPUZZLE_Base_C.GetCircuitMesh
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// class UCOMP_CircuitMesh_C*              CircuitMesh                                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FSTRUCT_MeshTransform            MeshTransform                                          (Parm, OutParm, HasGetValueTypeHash)

void ACIRCUITPUZZLE_Base_C::GetCircuitMesh(class UCOMP_CircuitMesh_C* CircuitMesh, struct FSTRUCT_MeshTransform* MeshTransform)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CIRCUITPUZZLE_Base_C", "GetCircuitMesh");

	Params::CIRCUITPUZZLE_Base_C_GetCircuitMesh Parms{};

	Parms.CircuitMesh = CircuitMesh;

	UObject::ProcessEvent(Func, &Parms);

	if (MeshTransform != nullptr)
		*MeshTransform = std::move(Parms.MeshTransform);
}


// Function CIRCUITPUZZLE_Base.CIRCUITPUZZLE_Base_C.GetConnectedNeighborCells
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// class UCOMP_CircuitMesh_C*              CircuitMesh                                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// TArray<class UCOMP_CircuitMesh_C*>      Neighbors                                              (Parm, OutParm, ContainsInstancedReference)

void ACIRCUITPUZZLE_Base_C::GetConnectedNeighborCells(class UCOMP_CircuitMesh_C* CircuitMesh, TArray<class UCOMP_CircuitMesh_C*>* Neighbors)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CIRCUITPUZZLE_Base_C", "GetConnectedNeighborCells");

	Params::CIRCUITPUZZLE_Base_C_GetConnectedNeighborCells Parms{};

	Parms.CircuitMesh = CircuitMesh;

	UObject::ProcessEvent(Func, &Parms);

	if (Neighbors != nullptr)
		*Neighbors = std::move(Parms.Neighbors);
}


// Function CIRCUITPUZZLE_Base.CIRCUITPUZZLE_Base_C.ColumnRowToIndex
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// int32                                   Column                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// int32                                   Row                                                    (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// int32                                   Index_0                                                (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ACIRCUITPUZZLE_Base_C::ColumnRowToIndex(int32 Column, int32 Row, int32* Index_0)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CIRCUITPUZZLE_Base_C", "ColumnRowToIndex");

	Params::CIRCUITPUZZLE_Base_C_ColumnRowToIndex Parms{};

	Parms.Column = Column;
	Parms.Row = Row;

	UObject::ProcessEvent(Func, &Parms);

	if (Index_0 != nullptr)
		*Index_0 = Parms.Index_0;
}


// Function CIRCUITPUZZLE_Base.CIRCUITPUZZLE_Base_C.EVENT_OnTargetStateChanged
// (Private, BlueprintCallable, BlueprintEvent)
// Parameters:
// class UCOMP_CircuitMesh_C*              Circuit                                                (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// ENUM_PowerState                         PowerState                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ACIRCUITPUZZLE_Base_C::EVENT_OnTargetStateChanged(class UCOMP_CircuitMesh_C* Circuit, ENUM_PowerState PowerState)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CIRCUITPUZZLE_Base_C", "EVENT_OnTargetStateChanged");

	Params::CIRCUITPUZZLE_Base_C_EVENT_OnTargetStateChanged Parms{};

	Parms.Circuit = Circuit;
	Parms.PowerState = PowerState;

	UObject::ProcessEvent(Func, &Parms);
}


// Function CIRCUITPUZZLE_Base.CIRCUITPUZZLE_Base_C.EvaluateCellPower
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)

void ACIRCUITPUZZLE_Base_C::EvaluateCellPower()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CIRCUITPUZZLE_Base_C", "EvaluateCellPower");

	UObject::ProcessEvent(Func, nullptr);
}


// Function CIRCUITPUZZLE_Base.CIRCUITPUZZLE_Base_C.RegisterCircuitCellComponents
// (Protected, HasDefaults, BlueprintCallable, BlueprintEvent)

void ACIRCUITPUZZLE_Base_C::RegisterCircuitCellComponents()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CIRCUITPUZZLE_Base_C", "RegisterCircuitCellComponents");

	UObject::ProcessEvent(Func, nullptr);
}


// Function CIRCUITPUZZLE_Base.CIRCUITPUZZLE_Base_C.InteractWithPuzzlePrimitive
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// class UPrimitiveComponent*              CursorPrimitive                                        (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// ENUM_InteractResultType                 Result                                                 (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class FText                             ResultText                                             (Parm, OutParm)

void ACIRCUITPUZZLE_Base_C::InteractWithPuzzlePrimitive(class UPrimitiveComponent* CursorPrimitive, ENUM_InteractResultType* Result, class FText* ResultText)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CIRCUITPUZZLE_Base_C", "InteractWithPuzzlePrimitive");

	Params::CIRCUITPUZZLE_Base_C_InteractWithPuzzlePrimitive Parms{};

	Parms.CursorPrimitive = CursorPrimitive;

	UObject::ProcessEvent(Func, &Parms);

	if (Result != nullptr)
		*Result = Parms.Result;

	if (ResultText != nullptr)
		*ResultText = std::move(Parms.ResultText);
}


// Function CIRCUITPUZZLE_Base.CIRCUITPUZZLE_Base_C.GetPuzzleShape
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// class UPrimitiveComponent*              CursorPrimitive                                        (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class UShapeComponent*                  TargetShape                                            (Parm, OutParm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ACIRCUITPUZZLE_Base_C::GetPuzzleShape(class UPrimitiveComponent* CursorPrimitive, class UShapeComponent** TargetShape)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CIRCUITPUZZLE_Base_C", "GetPuzzleShape");

	Params::CIRCUITPUZZLE_Base_C_GetPuzzleShape Parms{};

	Parms.CursorPrimitive = CursorPrimitive;

	UObject::ProcessEvent(Func, &Parms);

	if (TargetShape != nullptr)
		*TargetShape = Parms.TargetShape;
}


// Function CIRCUITPUZZLE_Base.CIRCUITPUZZLE_Base_C.CellToIndex
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// class UCOMP_CircuitMesh_C*              CircuitCell                                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// int32                                   Index_0                                                (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ACIRCUITPUZZLE_Base_C::CellToIndex(class UCOMP_CircuitMesh_C* CircuitCell, int32* Index_0)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CIRCUITPUZZLE_Base_C", "CellToIndex");

	Params::CIRCUITPUZZLE_Base_C_CellToIndex Parms{};

	Parms.CircuitCell = CircuitCell;

	UObject::ProcessEvent(Func, &Parms);

	if (Index_0 != nullptr)
		*Index_0 = Parms.Index_0;
}


// Function CIRCUITPUZZLE_Base.CIRCUITPUZZLE_Base_C.InitializePuzzle
// (Protected, BlueprintCallable, BlueprintEvent)

void ACIRCUITPUZZLE_Base_C::InitializePuzzle()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CIRCUITPUZZLE_Base_C", "InitializePuzzle");

	UObject::ProcessEvent(Func, nullptr);
}


// Function CIRCUITPUZZLE_Base.CIRCUITPUZZLE_Base_C.GetModifiedCellDirections
// (Private, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// uint8                                   Type                                                   (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// uint8                                   Rotations                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// int32                                   Directions                                             (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ACIRCUITPUZZLE_Base_C::GetModifiedCellDirections(uint8 Type, uint8 Rotations, int32* Directions)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CIRCUITPUZZLE_Base_C", "GetModifiedCellDirections");

	Params::CIRCUITPUZZLE_Base_C_GetModifiedCellDirections Parms{};

	Parms.Type = Type;
	Parms.Rotations = Rotations;

	UObject::ProcessEvent(Func, &Parms);

	if (Directions != nullptr)
		*Directions = Parms.Directions;
}


// Function CIRCUITPUZZLE_Base.CIRCUITPUZZLE_Base_C.LoadPuzzleFromDataTable
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)

void ACIRCUITPUZZLE_Base_C::LoadPuzzleFromDataTable()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CIRCUITPUZZLE_Base_C", "LoadPuzzleFromDataTable");

	UObject::ProcessEvent(Func, nullptr);
}

}

