#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: SKILL_Projectile_Base

#include "Basic.hpp"

#include "Skill_classes.hpp"


namespace SDK
{

// BlueprintGeneratedClass SKILL_Projectile_Base.SKILL_Projectile_Base_C
// 0x0020 (0x00B0 - 0x0090)
class USKILL_Projectile_Base_C : public USkill_C
{
public:
	TArray<class FName>                           BarrelSocketNames;                                 // 0x0090(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance)
	float                                         MaxAngleToTarget;                                  // 0x00A0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         PredictionAccuracy;                                // 0x00A4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         MaxPredictTime;                                    // 0x00A8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

public:
	void GetAccuracyRatio(float* Ratio);
	void GetBarrelLocation(class FName BarrelName, struct FVector* BarrelLocation);
	void GetBarrelTransform(class FName BarrelName, struct FTransform* Transform);
	void GetPredictedLocationToShoot(const struct FVector& SourceLocation, struct FVector* PredictedLocation);
	void IsBoneWithinAngle(class FName BoneName, bool* Result);
	void GetProjectileSpeed(float* Speed);
	void CanUseSkill(bool* Result);

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"SKILL_Projectile_Base_C">();
	}
	static class USKILL_Projectile_Base_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<USKILL_Projectile_Base_C>();
	}
};
static_assert(alignof(USKILL_Projectile_Base_C) == 0x000008, "Wrong alignment on USKILL_Projectile_Base_C");
static_assert(sizeof(USKILL_Projectile_Base_C) == 0x0000B0, "Wrong size on USKILL_Projectile_Base_C");
static_assert(offsetof(USKILL_Projectile_Base_C, BarrelSocketNames) == 0x000090, "Member 'USKILL_Projectile_Base_C::BarrelSocketNames' has a wrong offset!");
static_assert(offsetof(USKILL_Projectile_Base_C, MaxAngleToTarget) == 0x0000A0, "Member 'USKILL_Projectile_Base_C::MaxAngleToTarget' has a wrong offset!");
static_assert(offsetof(USKILL_Projectile_Base_C, PredictionAccuracy) == 0x0000A4, "Member 'USKILL_Projectile_Base_C::PredictionAccuracy' has a wrong offset!");
static_assert(offsetof(USKILL_Projectile_Base_C, MaxPredictTime) == 0x0000A8, "Member 'USKILL_Projectile_Base_C::MaxPredictTime' has a wrong offset!");

}

