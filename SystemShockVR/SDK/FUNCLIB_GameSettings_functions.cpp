#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: FUNCLIB_GameSettings

#include "Basic.hpp"

#include "FUNCLIB_GameSettings_classes.hpp"
#include "FUNCLIB_GameSettings_parameters.hpp"


namespace SDK
{

// Function FUNCLIB_GameSettings.FUNCLIB_GameSettings_C.GetBoundKey
// (Static, Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// class FName                             ActionName                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// ENUM_PrimarySecondary                   Rank                                                   (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// TMap<class FName, struct FSTRUCT_BoundInputActionPair>KeyActionMap                                           (BlueprintVisible, BlueprintReadOnly, Parm)
// class UObject*                          __WorldContext                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FKey                             BoundKey                                               (Parm, OutParm, HasGetValueTypeHash)

void UFUNCLIB_GameSettings_C::GetBoundKey(class FName ActionName, ENUM_PrimarySecondary Rank, const TMap<class FName, struct FSTRUCT_BoundInputActionPair>& KeyActionMap, class UObject* __WorldContext, struct FKey* BoundKey)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("FUNCLIB_GameSettings_C", "GetBoundKey");

	Params::FUNCLIB_GameSettings_C_GetBoundKey Parms{};

	Parms.ActionName = ActionName;
	Parms.Rank = Rank;
	Parms.KeyActionMap = std::move(KeyActionMap);
	Parms.__WorldContext = __WorldContext;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	if (BoundKey != nullptr)
		*BoundKey = std::move(Parms.BoundKey);
}


// Function FUNCLIB_GameSettings.FUNCLIB_GameSettings_C.GetBoundKeyForCurrentUser
// (Static, Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// class FName                             ActionName                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// ENUM_PrimarySecondary                   Rank                                                   (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class UObject*                          __WorldContext                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FKey                             BoundKey                                               (Parm, OutParm, HasGetValueTypeHash)

void UFUNCLIB_GameSettings_C::GetBoundKeyForCurrentUser(class FName ActionName, ENUM_PrimarySecondary Rank, class UObject* __WorldContext, struct FKey* BoundKey)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("FUNCLIB_GameSettings_C", "GetBoundKeyForCurrentUser");

	Params::FUNCLIB_GameSettings_C_GetBoundKeyForCurrentUser Parms{};

	Parms.ActionName = ActionName;
	Parms.Rank = Rank;
	Parms.__WorldContext = __WorldContext;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	if (BoundKey != nullptr)
		*BoundKey = std::move(Parms.BoundKey);
}


// Function FUNCLIB_GameSettings.FUNCLIB_GameSettings_C.IsValidKeyToBind
// (Static, Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// struct FKey                             Key                                                    (BlueprintVisible, BlueprintReadOnly, Parm, HasGetValueTypeHash)
// class UObject*                          __WorldContext                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    Result                                                 (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void UFUNCLIB_GameSettings_C::IsValidKeyToBind(const struct FKey& Key, class UObject* __WorldContext, bool* Result)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("FUNCLIB_GameSettings_C", "IsValidKeyToBind");

	Params::FUNCLIB_GameSettings_C_IsValidKeyToBind Parms{};

	Parms.Key = std::move(Key);
	Parms.__WorldContext = __WorldContext;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	if (Result != nullptr)
		*Result = Parms.Result;
}


// Function FUNCLIB_GameSettings.FUNCLIB_GameSettings_C.SetKeyAction
// (Static, Private, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// class FName                             ActionName                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FKey                             Key                                                    (BlueprintVisible, BlueprintReadOnly, Parm, HasGetValueTypeHash)
// ENUM_PrimarySecondary                   Rank                                                   (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// TMap<class FName, struct FSTRUCT_BoundInputActionPair>KeyActionMap                                           (BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
// class UObject*                          __WorldContext                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    Result                                                 (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void UFUNCLIB_GameSettings_C::SetKeyAction(class FName ActionName, const struct FKey& Key, ENUM_PrimarySecondary Rank, TMap<class FName, struct FSTRUCT_BoundInputActionPair>& KeyActionMap, class UObject* __WorldContext, bool* Result)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("FUNCLIB_GameSettings_C", "SetKeyAction");

	Params::FUNCLIB_GameSettings_C_SetKeyAction Parms{};

	Parms.ActionName = ActionName;
	Parms.Key = std::move(Key);
	Parms.Rank = Rank;
	Parms.KeyActionMap = std::move(KeyActionMap);
	Parms.__WorldContext = __WorldContext;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	KeyActionMap = std::move(Parms.KeyActionMap);

	if (Result != nullptr)
		*Result = Parms.Result;
}


// Function FUNCLIB_GameSettings.FUNCLIB_GameSettings_C.BindKeyAction
// (Static, Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// class FName                             ActionName                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FKey                             Key                                                    (BlueprintVisible, BlueprintReadOnly, Parm, HasGetValueTypeHash)
// ENUM_PrimarySecondary                   Rank                                                   (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// TMap<class FName, struct FSTRUCT_BoundInputActionPair>KeyActionMap                                           (BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
// class UObject*                          __WorldContext                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// TArray<class FName>                     ChangedActionNames                                     (Parm, OutParm)

void UFUNCLIB_GameSettings_C::BindKeyAction(class FName ActionName, const struct FKey& Key, ENUM_PrimarySecondary Rank, TMap<class FName, struct FSTRUCT_BoundInputActionPair>& KeyActionMap, class UObject* __WorldContext, TArray<class FName>* ChangedActionNames)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("FUNCLIB_GameSettings_C", "BindKeyAction");

	Params::FUNCLIB_GameSettings_C_BindKeyAction Parms{};

	Parms.ActionName = ActionName;
	Parms.Key = std::move(Key);
	Parms.Rank = Rank;
	Parms.KeyActionMap = std::move(KeyActionMap);
	Parms.__WorldContext = __WorldContext;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	KeyActionMap = std::move(Parms.KeyActionMap);

	if (ChangedActionNames != nullptr)
		*ChangedActionNames = std::move(Parms.ChangedActionNames);
}


// Function FUNCLIB_GameSettings.FUNCLIB_GameSettings_C.UnbindActionsByKey
// (Static, Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// struct FKey                             ActionKey                                              (BlueprintVisible, BlueprintReadOnly, Parm, HasGetValueTypeHash)
// TMap<class FName, struct FSTRUCT_BoundInputActionPair>KeyActionMap                                           (BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
// class UObject*                          __WorldContext                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// TArray<class FName>                     ChangedActionNames                                     (Parm, OutParm)

void UFUNCLIB_GameSettings_C::UnbindActionsByKey(const struct FKey& ActionKey, TMap<class FName, struct FSTRUCT_BoundInputActionPair>& KeyActionMap, class UObject* __WorldContext, TArray<class FName>* ChangedActionNames)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("FUNCLIB_GameSettings_C", "UnbindActionsByKey");

	Params::FUNCLIB_GameSettings_C_UnbindActionsByKey Parms{};

	Parms.ActionKey = std::move(ActionKey);
	Parms.KeyActionMap = std::move(KeyActionMap);
	Parms.__WorldContext = __WorldContext;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	KeyActionMap = std::move(Parms.KeyActionMap);

	if (ChangedActionNames != nullptr)
		*ChangedActionNames = std::move(Parms.ChangedActionNames);
}


// Function FUNCLIB_GameSettings.FUNCLIB_GameSettings_C.UnbindKeyByActionName
// (Static, Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// class FName                             ActionName                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// ENUM_PrimarySecondary                   InputRank                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// TMap<class FName, struct FSTRUCT_BoundInputActionPair>KeyActionMap                                           (BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
// class UObject*                          __WorldContext                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    Result                                                 (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void UFUNCLIB_GameSettings_C::UnbindKeyByActionName(class FName ActionName, ENUM_PrimarySecondary InputRank, TMap<class FName, struct FSTRUCT_BoundInputActionPair>& KeyActionMap, class UObject* __WorldContext, bool* Result)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("FUNCLIB_GameSettings_C", "UnbindKeyByActionName");

	Params::FUNCLIB_GameSettings_C_UnbindKeyByActionName Parms{};

	Parms.ActionName = ActionName;
	Parms.InputRank = InputRank;
	Parms.KeyActionMap = std::move(KeyActionMap);
	Parms.__WorldContext = __WorldContext;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	KeyActionMap = std::move(Parms.KeyActionMap);

	if (Result != nullptr)
		*Result = Parms.Result;
}


// Function FUNCLIB_GameSettings.FUNCLIB_GameSettings_C.UnbindKeysByActionName
// (Static, Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// class FName                             ActionName                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// TMap<class FName, struct FSTRUCT_BoundInputActionPair>KeyActionMap                                           (BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
// class UObject*                          __WorldContext                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    Result                                                 (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void UFUNCLIB_GameSettings_C::UnbindKeysByActionName(class FName ActionName, TMap<class FName, struct FSTRUCT_BoundInputActionPair>& KeyActionMap, class UObject* __WorldContext, bool* Result)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("FUNCLIB_GameSettings_C", "UnbindKeysByActionName");

	Params::FUNCLIB_GameSettings_C_UnbindKeysByActionName Parms{};

	Parms.ActionName = ActionName;
	Parms.KeyActionMap = std::move(KeyActionMap);
	Parms.__WorldContext = __WorldContext;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	KeyActionMap = std::move(Parms.KeyActionMap);

	if (Result != nullptr)
		*Result = Parms.Result;
}


// Function FUNCLIB_GameSettings.FUNCLIB_GameSettings_C.GetShockSettingsForCurrentUser
// (Static, Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// class UObject*                          __WorldContext                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class USAVE_Settings_C*                 Settings                                               (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UFUNCLIB_GameSettings_C::GetShockSettingsForCurrentUser(class UObject* __WorldContext, class USAVE_Settings_C** Settings)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("FUNCLIB_GameSettings_C", "GetShockSettingsForCurrentUser");

	Params::FUNCLIB_GameSettings_C_GetShockSettingsForCurrentUser Parms{};

	Parms.__WorldContext = __WorldContext;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	if (Settings != nullptr)
		*Settings = Parms.Settings;
}


// Function FUNCLIB_GameSettings.FUNCLIB_GameSettings_C.LoadDeveloperSettings
// (Static, Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// class UObject*                          __WorldContext                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class USAVE_DeveloperSettings_C*        DevSettings                                            (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UFUNCLIB_GameSettings_C::LoadDeveloperSettings(class UObject* __WorldContext, class USAVE_DeveloperSettings_C** DevSettings)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("FUNCLIB_GameSettings_C", "LoadDeveloperSettings");

	Params::FUNCLIB_GameSettings_C_LoadDeveloperSettings Parms{};

	Parms.__WorldContext = __WorldContext;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	if (DevSettings != nullptr)
		*DevSettings = Parms.DevSettings;
}


// Function FUNCLIB_GameSettings.FUNCLIB_GameSettings_C.SaveDeveloperSettings
// (Static, Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// class USAVE_DeveloperSettings_C*        DeveloperSettings                                      (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class UObject*                          __WorldContext                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UFUNCLIB_GameSettings_C::SaveDeveloperSettings(class USAVE_DeveloperSettings_C* DeveloperSettings, class UObject* __WorldContext)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("FUNCLIB_GameSettings_C", "SaveDeveloperSettings");

	Params::FUNCLIB_GameSettings_C_SaveDeveloperSettings Parms{};

	Parms.DeveloperSettings = DeveloperSettings;
	Parms.__WorldContext = __WorldContext;

	GetDefaultObj()->ProcessEvent(Func, &Parms);
}


// Function FUNCLIB_GameSettings.FUNCLIB_GameSettings_C.GetDeveloperSettingsSlotName
// (Static, Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// class UObject*                          __WorldContext                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class FString                           SlotName                                               (Parm, OutParm, ZeroConstructor, HasGetValueTypeHash)

void UFUNCLIB_GameSettings_C::GetDeveloperSettingsSlotName(class UObject* __WorldContext, class FString* SlotName)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("FUNCLIB_GameSettings_C", "GetDeveloperSettingsSlotName");

	Params::FUNCLIB_GameSettings_C_GetDeveloperSettingsSlotName Parms{};

	Parms.__WorldContext = __WorldContext;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	if (SlotName != nullptr)
		*SlotName = std::move(Parms.SlotName);
}


// Function FUNCLIB_GameSettings.FUNCLIB_GameSettings_C.ShouldShowIntroSequence
// (Static, Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// class UObject*                          __WorldContext                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    Result                                                 (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void UFUNCLIB_GameSettings_C::ShouldShowIntroSequence(class UObject* __WorldContext, bool* Result)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("FUNCLIB_GameSettings_C", "ShouldShowIntroSequence");

	Params::FUNCLIB_GameSettings_C_ShouldShowIntroSequence Parms{};

	Parms.__WorldContext = __WorldContext;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	if (Result != nullptr)
		*Result = Parms.Result;
}


// Function FUNCLIB_GameSettings.FUNCLIB_GameSettings_C.GetShockSettingsForSpecificUser
// (Static, Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// int32                                   UserIndex                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class UObject*                          __WorldContext                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class USAVE_Settings_C*                 Settings                                               (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UFUNCLIB_GameSettings_C::GetShockSettingsForSpecificUser(int32 UserIndex, class UObject* __WorldContext, class USAVE_Settings_C** Settings)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("FUNCLIB_GameSettings_C", "GetShockSettingsForSpecificUser");

	Params::FUNCLIB_GameSettings_C_GetShockSettingsForSpecificUser Parms{};

	Parms.UserIndex = UserIndex;
	Parms.__WorldContext = __WorldContext;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	if (Settings != nullptr)
		*Settings = Parms.Settings;
}


// Function FUNCLIB_GameSettings.FUNCLIB_GameSettings_C.GetShockDifficultyValuesFromBitfield
// (Static, Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// int32                                   DifficultyBitfield                                     (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class UObject*                          __WorldContext                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// ENUM_GameDifficulty                     Combat                                                 (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// ENUM_GameDifficulty                     Mission                                                (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// ENUM_GameDifficulty                     Puzzle                                                 (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// ENUM_GameDifficulty                     Cyber                                                  (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UFUNCLIB_GameSettings_C::GetShockDifficultyValuesFromBitfield(int32 DifficultyBitfield, class UObject* __WorldContext, ENUM_GameDifficulty* Combat, ENUM_GameDifficulty* Mission, ENUM_GameDifficulty* Puzzle, ENUM_GameDifficulty* Cyber)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("FUNCLIB_GameSettings_C", "GetShockDifficultyValuesFromBitfield");

	Params::FUNCLIB_GameSettings_C_GetShockDifficultyValuesFromBitfield Parms{};

	Parms.DifficultyBitfield = DifficultyBitfield;
	Parms.__WorldContext = __WorldContext;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	if (Combat != nullptr)
		*Combat = Parms.Combat;

	if (Mission != nullptr)
		*Mission = Parms.Mission;

	if (Puzzle != nullptr)
		*Puzzle = Parms.Puzzle;

	if (Cyber != nullptr)
		*Cyber = Parms.Cyber;
}


// Function FUNCLIB_GameSettings.FUNCLIB_GameSettings_C.GetShockDifficultyByType
// (Static, Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// int32                                   Bitfield                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// ENUM_GameDifficultyConfigCategory       Type                                                   (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class UObject*                          __WorldContext                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// ENUM_GameDifficulty                     Difficulty                                             (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UFUNCLIB_GameSettings_C::GetShockDifficultyByType(int32 Bitfield, ENUM_GameDifficultyConfigCategory Type, class UObject* __WorldContext, ENUM_GameDifficulty* Difficulty)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("FUNCLIB_GameSettings_C", "GetShockDifficultyByType");

	Params::FUNCLIB_GameSettings_C_GetShockDifficultyByType Parms{};

	Parms.Bitfield = Bitfield;
	Parms.Type = Type;
	Parms.__WorldContext = __WorldContext;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	if (Difficulty != nullptr)
		*Difficulty = Parms.Difficulty;
}


// Function FUNCLIB_GameSettings.FUNCLIB_GameSettings_C.MakeShockDifficultyBitfield
// (Static, Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// ENUM_GameDifficulty                     Combat                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// ENUM_GameDifficulty                     Mission                                                (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// ENUM_GameDifficulty                     Puzzle                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// ENUM_GameDifficulty                     Cyber                                                  (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class UObject*                          __WorldContext                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// int32                                   DifficultyBitfield                                     (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UFUNCLIB_GameSettings_C::MakeShockDifficultyBitfield(ENUM_GameDifficulty Combat, ENUM_GameDifficulty Mission, ENUM_GameDifficulty Puzzle, ENUM_GameDifficulty Cyber, class UObject* __WorldContext, int32* DifficultyBitfield)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("FUNCLIB_GameSettings_C", "MakeShockDifficultyBitfield");

	Params::FUNCLIB_GameSettings_C_MakeShockDifficultyBitfield Parms{};

	Parms.Combat = Combat;
	Parms.Mission = Mission;
	Parms.Puzzle = Puzzle;
	Parms.Cyber = Cyber;
	Parms.__WorldContext = __WorldContext;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	if (DifficultyBitfield != nullptr)
		*DifficultyBitfield = Parms.DifficultyBitfield;
}


// Function FUNCLIB_GameSettings.FUNCLIB_GameSettings_C.IsGamepadInputAction
// (Static, Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// class FName                             ActionName                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class UObject*                          __WorldContext                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    Result                                                 (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void UFUNCLIB_GameSettings_C::IsGamepadInputAction(class FName ActionName, class UObject* __WorldContext, bool* Result)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("FUNCLIB_GameSettings_C", "IsGamepadInputAction");

	Params::FUNCLIB_GameSettings_C_IsGamepadInputAction Parms{};

	Parms.ActionName = ActionName;
	Parms.__WorldContext = __WorldContext;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	if (Result != nullptr)
		*Result = Parms.Result;
}


// Function FUNCLIB_GameSettings.FUNCLIB_GameSettings_C.GetGamepadInputActionPrefix
// (Static, Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// class UObject*                          __WorldContext                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class FString                           Result                                                 (Parm, OutParm, ZeroConstructor, HasGetValueTypeHash)

void UFUNCLIB_GameSettings_C::GetGamepadInputActionPrefix(class UObject* __WorldContext, class FString* Result)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("FUNCLIB_GameSettings_C", "GetGamepadInputActionPrefix");

	Params::FUNCLIB_GameSettings_C_GetGamepadInputActionPrefix Parms{};

	Parms.__WorldContext = __WorldContext;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	if (Result != nullptr)
		*Result = std::move(Parms.Result);
}


// Function FUNCLIB_GameSettings.FUNCLIB_GameSettings_C.GetInputActionPrefixForCategory
// (Static, Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// ENUM_InputCategory                      InputCategory                                          (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class UObject*                          __WorldContext                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class FString                           Result                                                 (Parm, OutParm, ZeroConstructor, HasGetValueTypeHash)

void UFUNCLIB_GameSettings_C::GetInputActionPrefixForCategory(ENUM_InputCategory InputCategory, class UObject* __WorldContext, class FString* Result)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("FUNCLIB_GameSettings_C", "GetInputActionPrefixForCategory");

	Params::FUNCLIB_GameSettings_C_GetInputActionPrefixForCategory Parms{};

	Parms.InputCategory = InputCategory;
	Parms.__WorldContext = __WorldContext;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	if (Result != nullptr)
		*Result = std::move(Parms.Result);
}


// Function FUNCLIB_GameSettings.FUNCLIB_GameSettings_C.GetInputCategoryFromActionName
// (Static, Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// class FName                             ActionName                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class UObject*                          __WorldContext                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    Found                                                  (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
// ENUM_InputCategory                      Result                                                 (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UFUNCLIB_GameSettings_C::GetInputCategoryFromActionName(class FName ActionName, class UObject* __WorldContext, bool* Found, ENUM_InputCategory* Result)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("FUNCLIB_GameSettings_C", "GetInputCategoryFromActionName");

	Params::FUNCLIB_GameSettings_C_GetInputCategoryFromActionName Parms{};

	Parms.ActionName = ActionName;
	Parms.__WorldContext = __WorldContext;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	if (Found != nullptr)
		*Found = Parms.Found;

	if (Result != nullptr)
		*Result = Parms.Result;
}


// Function FUNCLIB_GameSettings.FUNCLIB_GameSettings_C.IsMedicalDemo
// (Static, Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// class UObject*                          __WorldContext                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    Result                                                 (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void UFUNCLIB_GameSettings_C::IsMedicalDemo(class UObject* __WorldContext, bool* Result)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("FUNCLIB_GameSettings_C", "IsMedicalDemo");

	Params::FUNCLIB_GameSettings_C_IsMedicalDemo Parms{};

	Parms.__WorldContext = __WorldContext;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	if (Result != nullptr)
		*Result = Parms.Result;
}


// Function FUNCLIB_GameSettings.FUNCLIB_GameSettings_C.IsDismembermentAllowed
// (Static, Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// class UObject*                          __WorldContext                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    Result                                                 (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void UFUNCLIB_GameSettings_C::IsDismembermentAllowed(class UObject* __WorldContext, bool* Result)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("FUNCLIB_GameSettings_C", "IsDismembermentAllowed");

	Params::FUNCLIB_GameSettings_C_IsDismembermentAllowed Parms{};

	Parms.__WorldContext = __WorldContext;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	if (Result != nullptr)
		*Result = Parms.Result;
}


// Function FUNCLIB_GameSettings.FUNCLIB_GameSettings_C.GetAcceleratedGamepadInputRotation
// (Static, Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// struct FVector2D                        LookVector                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// float                                   DeltaTime                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    ShowMouseCrusor                                        (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// class UObject*                          __WorldContext                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FVector2D                        Result                                                 (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UFUNCLIB_GameSettings_C::GetAcceleratedGamepadInputRotation(const struct FVector2D& LookVector, float DeltaTime, bool ShowMouseCrusor, class UObject* __WorldContext, struct FVector2D* Result)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("FUNCLIB_GameSettings_C", "GetAcceleratedGamepadInputRotation");

	Params::FUNCLIB_GameSettings_C_GetAcceleratedGamepadInputRotation Parms{};

	Parms.LookVector = std::move(LookVector);
	Parms.DeltaTime = DeltaTime;
	Parms.ShowMouseCrusor = ShowMouseCrusor;
	Parms.__WorldContext = __WorldContext;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	if (Result != nullptr)
		*Result = std::move(Parms.Result);
}

}

