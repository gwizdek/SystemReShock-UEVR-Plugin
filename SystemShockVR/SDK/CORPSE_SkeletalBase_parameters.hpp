#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: CORPSE_SkeletalBase

#include "Basic.hpp"

#include "CoreUObject_structs.hpp"
#include "Engine_structs.hpp"
#include "AttributeSystem_structs.hpp"
#include "STRUCT_DismemberableLimb_structs.hpp"


namespace SDK::Params
{

// Function CORPSE_SkeletalBase.CORPSE_SkeletalBase_C.ExecuteUbergraph_CORPSE_SkeletalBase
// 0x000C (0x000C - 0x0000)
struct CORPSE_SkeletalBase_C_ExecuteUbergraph_CORPSE_SkeletalBase final
{
public:
	int32                                         EntryPoint;                                        // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_ComponentBoundEvent_bVisibleState;          // 0x0004(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         K2Node_Event_DeltaSeconds;                         // 0x0008(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(CORPSE_SkeletalBase_C_ExecuteUbergraph_CORPSE_SkeletalBase) == 0x000004, "Wrong alignment on CORPSE_SkeletalBase_C_ExecuteUbergraph_CORPSE_SkeletalBase");
static_assert(sizeof(CORPSE_SkeletalBase_C_ExecuteUbergraph_CORPSE_SkeletalBase) == 0x00000C, "Wrong size on CORPSE_SkeletalBase_C_ExecuteUbergraph_CORPSE_SkeletalBase");
static_assert(offsetof(CORPSE_SkeletalBase_C_ExecuteUbergraph_CORPSE_SkeletalBase, EntryPoint) == 0x000000, "Member 'CORPSE_SkeletalBase_C_ExecuteUbergraph_CORPSE_SkeletalBase::EntryPoint' has a wrong offset!");
static_assert(offsetof(CORPSE_SkeletalBase_C_ExecuteUbergraph_CORPSE_SkeletalBase, K2Node_ComponentBoundEvent_bVisibleState) == 0x000004, "Member 'CORPSE_SkeletalBase_C_ExecuteUbergraph_CORPSE_SkeletalBase::K2Node_ComponentBoundEvent_bVisibleState' has a wrong offset!");
static_assert(offsetof(CORPSE_SkeletalBase_C_ExecuteUbergraph_CORPSE_SkeletalBase, K2Node_Event_DeltaSeconds) == 0x000008, "Member 'CORPSE_SkeletalBase_C_ExecuteUbergraph_CORPSE_SkeletalBase::K2Node_Event_DeltaSeconds' has a wrong offset!");

// Function CORPSE_SkeletalBase.CORPSE_SkeletalBase_C.ReceiveTick
// 0x0004 (0x0004 - 0x0000)
struct CORPSE_SkeletalBase_C_ReceiveTick final
{
public:
	float                                         DeltaSeconds;                                      // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(CORPSE_SkeletalBase_C_ReceiveTick) == 0x000004, "Wrong alignment on CORPSE_SkeletalBase_C_ReceiveTick");
static_assert(sizeof(CORPSE_SkeletalBase_C_ReceiveTick) == 0x000004, "Wrong size on CORPSE_SkeletalBase_C_ReceiveTick");
static_assert(offsetof(CORPSE_SkeletalBase_C_ReceiveTick, DeltaSeconds) == 0x000000, "Member 'CORPSE_SkeletalBase_C_ReceiveTick::DeltaSeconds' has a wrong offset!");

// Function CORPSE_SkeletalBase.CORPSE_SkeletalBase_C.BndEvt__COMP_VoxelCullable_K2Node_ComponentBoundEvent_0_CullableVisibilitySignature__DelegateSignature
// 0x0001 (0x0001 - 0x0000)
struct CORPSE_SkeletalBase_C_BndEvt__COMP_VoxelCullable_K2Node_ComponentBoundEvent_0_CullableVisibilitySignature__DelegateSignature final
{
public:
	bool                                          bVisibleState;                                     // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(CORPSE_SkeletalBase_C_BndEvt__COMP_VoxelCullable_K2Node_ComponentBoundEvent_0_CullableVisibilitySignature__DelegateSignature) == 0x000001, "Wrong alignment on CORPSE_SkeletalBase_C_BndEvt__COMP_VoxelCullable_K2Node_ComponentBoundEvent_0_CullableVisibilitySignature__DelegateSignature");
static_assert(sizeof(CORPSE_SkeletalBase_C_BndEvt__COMP_VoxelCullable_K2Node_ComponentBoundEvent_0_CullableVisibilitySignature__DelegateSignature) == 0x000001, "Wrong size on CORPSE_SkeletalBase_C_BndEvt__COMP_VoxelCullable_K2Node_ComponentBoundEvent_0_CullableVisibilitySignature__DelegateSignature");
static_assert(offsetof(CORPSE_SkeletalBase_C_BndEvt__COMP_VoxelCullable_K2Node_ComponentBoundEvent_0_CullableVisibilitySignature__DelegateSignature, bVisibleState) == 0x000000, "Member 'CORPSE_SkeletalBase_C_BndEvt__COMP_VoxelCullable_K2Node_ComponentBoundEvent_0_CullableVisibilitySignature__DelegateSignature::bVisibleState' has a wrong offset!");

// Function CORPSE_SkeletalBase.CORPSE_SkeletalBase_C.InitializeCorpse
// 0x0018 (0x0018 - 0x0000)
struct CORPSE_SkeletalBase_C_InitializeCorpse final
{
public:
	bool                                          CallFunc_TryApplyPendingBoneTransforms_Result;     // 0x0000(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Not_PreBool_ReturnValue;                  // 0x0001(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsAnySimulatingPhysics_ReturnValue;       // 0x0002(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_3[0x1];                                        // 0x0003(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	TDelegate<void(class UPrimitiveComponent* HitComponent, class AActor* OtherActor, class UPrimitiveComponent* OtherComp, const struct FVector& NormalImpulse, struct FHitResult& Hit)> K2Node_CreateDelegate_OutputDelegate;              // 0x0004(0x0010)(ZeroConstructor, NoDestructor)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0014(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(CORPSE_SkeletalBase_C_InitializeCorpse) == 0x000004, "Wrong alignment on CORPSE_SkeletalBase_C_InitializeCorpse");
static_assert(sizeof(CORPSE_SkeletalBase_C_InitializeCorpse) == 0x000018, "Wrong size on CORPSE_SkeletalBase_C_InitializeCorpse");
static_assert(offsetof(CORPSE_SkeletalBase_C_InitializeCorpse, CallFunc_TryApplyPendingBoneTransforms_Result) == 0x000000, "Member 'CORPSE_SkeletalBase_C_InitializeCorpse::CallFunc_TryApplyPendingBoneTransforms_Result' has a wrong offset!");
static_assert(offsetof(CORPSE_SkeletalBase_C_InitializeCorpse, CallFunc_Not_PreBool_ReturnValue) == 0x000001, "Member 'CORPSE_SkeletalBase_C_InitializeCorpse::CallFunc_Not_PreBool_ReturnValue' has a wrong offset!");
static_assert(offsetof(CORPSE_SkeletalBase_C_InitializeCorpse, CallFunc_IsAnySimulatingPhysics_ReturnValue) == 0x000002, "Member 'CORPSE_SkeletalBase_C_InitializeCorpse::CallFunc_IsAnySimulatingPhysics_ReturnValue' has a wrong offset!");
static_assert(offsetof(CORPSE_SkeletalBase_C_InitializeCorpse, K2Node_CreateDelegate_OutputDelegate) == 0x000004, "Member 'CORPSE_SkeletalBase_C_InitializeCorpse::K2Node_CreateDelegate_OutputDelegate' has a wrong offset!");
static_assert(offsetof(CORPSE_SkeletalBase_C_InitializeCorpse, CallFunc_IsValid_ReturnValue) == 0x000014, "Member 'CORPSE_SkeletalBase_C_InitializeCorpse::CallFunc_IsValid_ReturnValue' has a wrong offset!");

// Function CORPSE_SkeletalBase.CORPSE_SkeletalBase_C.TryInitializeBindings
// 0x001C (0x001C - 0x0000)
struct CORPSE_SkeletalBase_C_TryInitializeBindings final
{
public:
	class FName                                   CallFunc_GetLimbName_Limb;                         // 0x0000(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_NotEqual_NameName_ReturnValue;            // 0x0008(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	TDelegate<void(class AActor* OtherActor, const struct FAttribDamageInstance& DamageInstance, class UObject* UserParams)> K2Node_CreateDelegate_OutputDelegate;              // 0x000C(0x0010)(ZeroConstructor, NoDestructor)
};
static_assert(alignof(CORPSE_SkeletalBase_C_TryInitializeBindings) == 0x000004, "Wrong alignment on CORPSE_SkeletalBase_C_TryInitializeBindings");
static_assert(sizeof(CORPSE_SkeletalBase_C_TryInitializeBindings) == 0x00001C, "Wrong size on CORPSE_SkeletalBase_C_TryInitializeBindings");
static_assert(offsetof(CORPSE_SkeletalBase_C_TryInitializeBindings, CallFunc_GetLimbName_Limb) == 0x000000, "Member 'CORPSE_SkeletalBase_C_TryInitializeBindings::CallFunc_GetLimbName_Limb' has a wrong offset!");
static_assert(offsetof(CORPSE_SkeletalBase_C_TryInitializeBindings, CallFunc_NotEqual_NameName_ReturnValue) == 0x000008, "Member 'CORPSE_SkeletalBase_C_TryInitializeBindings::CallFunc_NotEqual_NameName_ReturnValue' has a wrong offset!");
static_assert(offsetof(CORPSE_SkeletalBase_C_TryInitializeBindings, K2Node_CreateDelegate_OutputDelegate) == 0x00000C, "Member 'CORPSE_SkeletalBase_C_TryInitializeBindings::K2Node_CreateDelegate_OutputDelegate' has a wrong offset!");

// Function CORPSE_SkeletalBase.CORPSE_SkeletalBase_C.TryReattachCullableComponent
// 0x00F0 (0x00F0 - 0x0000)
struct CORPSE_SkeletalBase_C_TryReattachCullableComponent final
{
public:
	class UCOMP_VoxelCullable_C*                  CullableTemplate;                                  // 0x0000(0x0008)(Edit, BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0008(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTransform                             CallFunc_K2_GetComponentToWorld_ReturnValue;       // 0x0010(0x0030)(IsPlainOldData, NoDestructor)
	struct FVector                                CallFunc_TransformLocation_ReturnValue;            // 0x0040(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FHitResult                             CallFunc_K2_SetWorldLocation_SweepHitResult;       // 0x004C(0x0088)(IsPlainOldData, NoDestructor, ContainsInstancedReference)
	uint8                                         Pad_D4[0x4];                                       // 0x00D4(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UClass*                                 CallFunc_GetObjectClass_ReturnValue;               // 0x00D8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UCOMP_VoxelCullable_C*                  CallFunc_GetClassComponentTemplate_ReturnValue;    // 0x00E0(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_K2_AttachToComponent_ReturnValue;         // 0x00E8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_NotEqual_NameName_ReturnValue;            // 0x00E9(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(CORPSE_SkeletalBase_C_TryReattachCullableComponent) == 0x000010, "Wrong alignment on CORPSE_SkeletalBase_C_TryReattachCullableComponent");
static_assert(sizeof(CORPSE_SkeletalBase_C_TryReattachCullableComponent) == 0x0000F0, "Wrong size on CORPSE_SkeletalBase_C_TryReattachCullableComponent");
static_assert(offsetof(CORPSE_SkeletalBase_C_TryReattachCullableComponent, CullableTemplate) == 0x000000, "Member 'CORPSE_SkeletalBase_C_TryReattachCullableComponent::CullableTemplate' has a wrong offset!");
static_assert(offsetof(CORPSE_SkeletalBase_C_TryReattachCullableComponent, CallFunc_IsValid_ReturnValue) == 0x000008, "Member 'CORPSE_SkeletalBase_C_TryReattachCullableComponent::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(CORPSE_SkeletalBase_C_TryReattachCullableComponent, CallFunc_K2_GetComponentToWorld_ReturnValue) == 0x000010, "Member 'CORPSE_SkeletalBase_C_TryReattachCullableComponent::CallFunc_K2_GetComponentToWorld_ReturnValue' has a wrong offset!");
static_assert(offsetof(CORPSE_SkeletalBase_C_TryReattachCullableComponent, CallFunc_TransformLocation_ReturnValue) == 0x000040, "Member 'CORPSE_SkeletalBase_C_TryReattachCullableComponent::CallFunc_TransformLocation_ReturnValue' has a wrong offset!");
static_assert(offsetof(CORPSE_SkeletalBase_C_TryReattachCullableComponent, CallFunc_K2_SetWorldLocation_SweepHitResult) == 0x00004C, "Member 'CORPSE_SkeletalBase_C_TryReattachCullableComponent::CallFunc_K2_SetWorldLocation_SweepHitResult' has a wrong offset!");
static_assert(offsetof(CORPSE_SkeletalBase_C_TryReattachCullableComponent, CallFunc_GetObjectClass_ReturnValue) == 0x0000D8, "Member 'CORPSE_SkeletalBase_C_TryReattachCullableComponent::CallFunc_GetObjectClass_ReturnValue' has a wrong offset!");
static_assert(offsetof(CORPSE_SkeletalBase_C_TryReattachCullableComponent, CallFunc_GetClassComponentTemplate_ReturnValue) == 0x0000E0, "Member 'CORPSE_SkeletalBase_C_TryReattachCullableComponent::CallFunc_GetClassComponentTemplate_ReturnValue' has a wrong offset!");
static_assert(offsetof(CORPSE_SkeletalBase_C_TryReattachCullableComponent, CallFunc_K2_AttachToComponent_ReturnValue) == 0x0000E8, "Member 'CORPSE_SkeletalBase_C_TryReattachCullableComponent::CallFunc_K2_AttachToComponent_ReturnValue' has a wrong offset!");
static_assert(offsetof(CORPSE_SkeletalBase_C_TryReattachCullableComponent, CallFunc_NotEqual_NameName_ReturnValue) == 0x0000E9, "Member 'CORPSE_SkeletalBase_C_TryReattachCullableComponent::CallFunc_NotEqual_NameName_ReturnValue' has a wrong offset!");

// Function CORPSE_SkeletalBase.CORPSE_SkeletalBase_C.UpdateCorpseVisibility
// 0x0001 (0x0001 - 0x0000)
struct CORPSE_SkeletalBase_C_UpdateCorpseVisibility final
{
public:
	bool                                          VisibilityState;                                   // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(CORPSE_SkeletalBase_C_UpdateCorpseVisibility) == 0x000001, "Wrong alignment on CORPSE_SkeletalBase_C_UpdateCorpseVisibility");
static_assert(sizeof(CORPSE_SkeletalBase_C_UpdateCorpseVisibility) == 0x000001, "Wrong size on CORPSE_SkeletalBase_C_UpdateCorpseVisibility");
static_assert(offsetof(CORPSE_SkeletalBase_C_UpdateCorpseVisibility, VisibilityState) == 0x000000, "Member 'CORPSE_SkeletalBase_C_UpdateCorpseVisibility::VisibilityState' has a wrong offset!");

// Function CORPSE_SkeletalBase.CORPSE_SkeletalBase_C.OnLimbDismembered
// 0x00B0 (0x00B0 - 0x0000)
struct CORPSE_SkeletalBase_C_OnLimbDismembered final
{
public:
	class FName                                   Limb;                                              // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FSTRUCT_DismemberableLimb              LimbData;                                          // 0x0008(0x0098)(BlueprintVisible, BlueprintReadOnly, Parm, ContainsInstancedReference, HasGetValueTypeHash)
	class ADismembermentLimb_Base_C*              LimbActor;                                         // 0x00A0(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          OnBeginPlay;                                       // 0x00A8(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(CORPSE_SkeletalBase_C_OnLimbDismembered) == 0x000008, "Wrong alignment on CORPSE_SkeletalBase_C_OnLimbDismembered");
static_assert(sizeof(CORPSE_SkeletalBase_C_OnLimbDismembered) == 0x0000B0, "Wrong size on CORPSE_SkeletalBase_C_OnLimbDismembered");
static_assert(offsetof(CORPSE_SkeletalBase_C_OnLimbDismembered, Limb) == 0x000000, "Member 'CORPSE_SkeletalBase_C_OnLimbDismembered::Limb' has a wrong offset!");
static_assert(offsetof(CORPSE_SkeletalBase_C_OnLimbDismembered, LimbData) == 0x000008, "Member 'CORPSE_SkeletalBase_C_OnLimbDismembered::LimbData' has a wrong offset!");
static_assert(offsetof(CORPSE_SkeletalBase_C_OnLimbDismembered, LimbActor) == 0x0000A0, "Member 'CORPSE_SkeletalBase_C_OnLimbDismembered::LimbActor' has a wrong offset!");
static_assert(offsetof(CORPSE_SkeletalBase_C_OnLimbDismembered, OnBeginPlay) == 0x0000A8, "Member 'CORPSE_SkeletalBase_C_OnLimbDismembered::OnBeginPlay' has a wrong offset!");

// Function CORPSE_SkeletalBase.CORPSE_SkeletalBase_C.OnDynaDamage
// 0x000C (0x000C - 0x0000)
struct CORPSE_SkeletalBase_C_OnDynaDamage final
{
public:
	class FName                                   DynaElement;                                       // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          OnBeginPlay;                                       // 0x0008(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(CORPSE_SkeletalBase_C_OnDynaDamage) == 0x000004, "Wrong alignment on CORPSE_SkeletalBase_C_OnDynaDamage");
static_assert(sizeof(CORPSE_SkeletalBase_C_OnDynaDamage) == 0x00000C, "Wrong size on CORPSE_SkeletalBase_C_OnDynaDamage");
static_assert(offsetof(CORPSE_SkeletalBase_C_OnDynaDamage, DynaElement) == 0x000000, "Member 'CORPSE_SkeletalBase_C_OnDynaDamage::DynaElement' has a wrong offset!");
static_assert(offsetof(CORPSE_SkeletalBase_C_OnDynaDamage, OnBeginPlay) == 0x000008, "Member 'CORPSE_SkeletalBase_C_OnDynaDamage::OnBeginPlay' has a wrong offset!");

// Function CORPSE_SkeletalBase.CORPSE_SkeletalBase_C.EVENT_OnDamageReceived
// 0x0060 (0x0060 - 0x0000)
struct CORPSE_SkeletalBase_C_EVENT_OnDamageReceived final
{
public:
	class AActor*                                 OtherActor;                                        // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FAttribDamageInstance                  DamageInstance;                                    // 0x0008(0x0028)(BlueprintVisible, BlueprintReadOnly, Parm)
	class UObject*                                UserParams;                                        // 0x0030(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          HasImpulse;                                        // 0x0038(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_39[0x7];                                       // 0x0039(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UOBJ_ImpactData_C*                      ImpactData;                                        // 0x0040(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Vector_IsZero_ReturnValue;                // 0x0048(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_49[0x7];                                       // 0x0049(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UOBJ_ImpactData_C*                      K2Node_DynamicCast_AsOBJ_Impact_Data;              // 0x0050(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0058(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Not_PreBool_ReturnValue;                  // 0x0059(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BooleanAND_ReturnValue;                   // 0x005A(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_ShouldDestroyLimbActor_Result;            // 0x005B(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_ReceiveDamage_LegDismembered;             // 0x005C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_ReceiveDamage_LimbDismembered;            // 0x005D(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(CORPSE_SkeletalBase_C_EVENT_OnDamageReceived) == 0x000008, "Wrong alignment on CORPSE_SkeletalBase_C_EVENT_OnDamageReceived");
static_assert(sizeof(CORPSE_SkeletalBase_C_EVENT_OnDamageReceived) == 0x000060, "Wrong size on CORPSE_SkeletalBase_C_EVENT_OnDamageReceived");
static_assert(offsetof(CORPSE_SkeletalBase_C_EVENT_OnDamageReceived, OtherActor) == 0x000000, "Member 'CORPSE_SkeletalBase_C_EVENT_OnDamageReceived::OtherActor' has a wrong offset!");
static_assert(offsetof(CORPSE_SkeletalBase_C_EVENT_OnDamageReceived, DamageInstance) == 0x000008, "Member 'CORPSE_SkeletalBase_C_EVENT_OnDamageReceived::DamageInstance' has a wrong offset!");
static_assert(offsetof(CORPSE_SkeletalBase_C_EVENT_OnDamageReceived, UserParams) == 0x000030, "Member 'CORPSE_SkeletalBase_C_EVENT_OnDamageReceived::UserParams' has a wrong offset!");
static_assert(offsetof(CORPSE_SkeletalBase_C_EVENT_OnDamageReceived, HasImpulse) == 0x000038, "Member 'CORPSE_SkeletalBase_C_EVENT_OnDamageReceived::HasImpulse' has a wrong offset!");
static_assert(offsetof(CORPSE_SkeletalBase_C_EVENT_OnDamageReceived, ImpactData) == 0x000040, "Member 'CORPSE_SkeletalBase_C_EVENT_OnDamageReceived::ImpactData' has a wrong offset!");
static_assert(offsetof(CORPSE_SkeletalBase_C_EVENT_OnDamageReceived, CallFunc_Vector_IsZero_ReturnValue) == 0x000048, "Member 'CORPSE_SkeletalBase_C_EVENT_OnDamageReceived::CallFunc_Vector_IsZero_ReturnValue' has a wrong offset!");
static_assert(offsetof(CORPSE_SkeletalBase_C_EVENT_OnDamageReceived, K2Node_DynamicCast_AsOBJ_Impact_Data) == 0x000050, "Member 'CORPSE_SkeletalBase_C_EVENT_OnDamageReceived::K2Node_DynamicCast_AsOBJ_Impact_Data' has a wrong offset!");
static_assert(offsetof(CORPSE_SkeletalBase_C_EVENT_OnDamageReceived, K2Node_DynamicCast_bSuccess) == 0x000058, "Member 'CORPSE_SkeletalBase_C_EVENT_OnDamageReceived::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(CORPSE_SkeletalBase_C_EVENT_OnDamageReceived, CallFunc_Not_PreBool_ReturnValue) == 0x000059, "Member 'CORPSE_SkeletalBase_C_EVENT_OnDamageReceived::CallFunc_Not_PreBool_ReturnValue' has a wrong offset!");
static_assert(offsetof(CORPSE_SkeletalBase_C_EVENT_OnDamageReceived, CallFunc_BooleanAND_ReturnValue) == 0x00005A, "Member 'CORPSE_SkeletalBase_C_EVENT_OnDamageReceived::CallFunc_BooleanAND_ReturnValue' has a wrong offset!");
static_assert(offsetof(CORPSE_SkeletalBase_C_EVENT_OnDamageReceived, CallFunc_ShouldDestroyLimbActor_Result) == 0x00005B, "Member 'CORPSE_SkeletalBase_C_EVENT_OnDamageReceived::CallFunc_ShouldDestroyLimbActor_Result' has a wrong offset!");
static_assert(offsetof(CORPSE_SkeletalBase_C_EVENT_OnDamageReceived, CallFunc_ReceiveDamage_LegDismembered) == 0x00005C, "Member 'CORPSE_SkeletalBase_C_EVENT_OnDamageReceived::CallFunc_ReceiveDamage_LegDismembered' has a wrong offset!");
static_assert(offsetof(CORPSE_SkeletalBase_C_EVENT_OnDamageReceived, CallFunc_ReceiveDamage_LimbDismembered) == 0x00005D, "Member 'CORPSE_SkeletalBase_C_EVENT_OnDamageReceived::CallFunc_ReceiveDamage_LimbDismembered' has a wrong offset!");

// Function CORPSE_SkeletalBase.CORPSE_SkeletalBase_C.GetScanShape
// 0x0010 (0x0010 - 0x0000)
struct CORPSE_SkeletalBase_C_GetScanShape final
{
public:
	class UShapeComponent*                        Result;                                            // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UShapeComponent*                        CallFunc_GetChildComponentByTag_ReturnValue;       // 0x0008(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(CORPSE_SkeletalBase_C_GetScanShape) == 0x000008, "Wrong alignment on CORPSE_SkeletalBase_C_GetScanShape");
static_assert(sizeof(CORPSE_SkeletalBase_C_GetScanShape) == 0x000010, "Wrong size on CORPSE_SkeletalBase_C_GetScanShape");
static_assert(offsetof(CORPSE_SkeletalBase_C_GetScanShape, Result) == 0x000000, "Member 'CORPSE_SkeletalBase_C_GetScanShape::Result' has a wrong offset!");
static_assert(offsetof(CORPSE_SkeletalBase_C_GetScanShape, CallFunc_GetChildComponentByTag_ReturnValue) == 0x000008, "Member 'CORPSE_SkeletalBase_C_GetScanShape::CallFunc_GetChildComponentByTag_ReturnValue' has a wrong offset!");

// Function CORPSE_SkeletalBase.CORPSE_SkeletalBase_C.SetDamageEnablesPhysics
// 0x0001 (0x0001 - 0x0000)
struct CORPSE_SkeletalBase_C_SetDamageEnablesPhysics final
{
public:
	bool                                          State;                                             // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(CORPSE_SkeletalBase_C_SetDamageEnablesPhysics) == 0x000001, "Wrong alignment on CORPSE_SkeletalBase_C_SetDamageEnablesPhysics");
static_assert(sizeof(CORPSE_SkeletalBase_C_SetDamageEnablesPhysics) == 0x000001, "Wrong size on CORPSE_SkeletalBase_C_SetDamageEnablesPhysics");
static_assert(offsetof(CORPSE_SkeletalBase_C_SetDamageEnablesPhysics, State) == 0x000000, "Member 'CORPSE_SkeletalBase_C_SetDamageEnablesPhysics::State' has a wrong offset!");

// Function CORPSE_SkeletalBase.CORPSE_SkeletalBase_C.EVENT_TryStopPhysics
// 0x0002 (0x0002 - 0x0000)
struct CORPSE_SkeletalBase_C_EVENT_TryStopPhysics final
{
public:
	bool                                          CallFunc_IsAnyRigidBodyAwake_ReturnValue;          // 0x0000(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Not_PreBool_ReturnValue;                  // 0x0001(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(CORPSE_SkeletalBase_C_EVENT_TryStopPhysics) == 0x000001, "Wrong alignment on CORPSE_SkeletalBase_C_EVENT_TryStopPhysics");
static_assert(sizeof(CORPSE_SkeletalBase_C_EVENT_TryStopPhysics) == 0x000002, "Wrong size on CORPSE_SkeletalBase_C_EVENT_TryStopPhysics");
static_assert(offsetof(CORPSE_SkeletalBase_C_EVENT_TryStopPhysics, CallFunc_IsAnyRigidBodyAwake_ReturnValue) == 0x000000, "Member 'CORPSE_SkeletalBase_C_EVENT_TryStopPhysics::CallFunc_IsAnyRigidBodyAwake_ReturnValue' has a wrong offset!");
static_assert(offsetof(CORPSE_SkeletalBase_C_EVENT_TryStopPhysics, CallFunc_Not_PreBool_ReturnValue) == 0x000001, "Member 'CORPSE_SkeletalBase_C_EVENT_TryStopPhysics::CallFunc_Not_PreBool_ReturnValue' has a wrong offset!");

// Function CORPSE_SkeletalBase.CORPSE_SkeletalBase_C.TryEnableSimulatePhysics
// 0x0002 (0x0002 - 0x0000)
struct CORPSE_SkeletalBase_C_TryEnableSimulatePhysics final
{
public:
	bool                                          CallFunc_IsSimulatingPhysics_ReturnValue;          // 0x0000(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Not_PreBool_ReturnValue;                  // 0x0001(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(CORPSE_SkeletalBase_C_TryEnableSimulatePhysics) == 0x000001, "Wrong alignment on CORPSE_SkeletalBase_C_TryEnableSimulatePhysics");
static_assert(sizeof(CORPSE_SkeletalBase_C_TryEnableSimulatePhysics) == 0x000002, "Wrong size on CORPSE_SkeletalBase_C_TryEnableSimulatePhysics");
static_assert(offsetof(CORPSE_SkeletalBase_C_TryEnableSimulatePhysics, CallFunc_IsSimulatingPhysics_ReturnValue) == 0x000000, "Member 'CORPSE_SkeletalBase_C_TryEnableSimulatePhysics::CallFunc_IsSimulatingPhysics_ReturnValue' has a wrong offset!");
static_assert(offsetof(CORPSE_SkeletalBase_C_TryEnableSimulatePhysics, CallFunc_Not_PreBool_ReturnValue) == 0x000001, "Member 'CORPSE_SkeletalBase_C_TryEnableSimulatePhysics::CallFunc_Not_PreBool_ReturnValue' has a wrong offset!");

// Function CORPSE_SkeletalBase.CORPSE_SkeletalBase_C.TryStartPhysicsSleepTimer
// 0x0028 (0x0028 - 0x0000)
struct CORPSE_SkeletalBase_C_TryStartPhysicsSleepTimer final
{
public:
	TDelegate<void()>                             K2Node_CreateDelegate_OutputDelegate;              // 0x0000(0x0010)(ZeroConstructor, NoDestructor)
	bool                                          CallFunc_K2_IsTimerActiveHandle_ReturnValue;       // 0x0010(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTimerHandle                           CallFunc_K2_SetTimerDelegate_ReturnValue;          // 0x0018(0x0008)(NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Not_PreBool_ReturnValue;                  // 0x0020(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(CORPSE_SkeletalBase_C_TryStartPhysicsSleepTimer) == 0x000008, "Wrong alignment on CORPSE_SkeletalBase_C_TryStartPhysicsSleepTimer");
static_assert(sizeof(CORPSE_SkeletalBase_C_TryStartPhysicsSleepTimer) == 0x000028, "Wrong size on CORPSE_SkeletalBase_C_TryStartPhysicsSleepTimer");
static_assert(offsetof(CORPSE_SkeletalBase_C_TryStartPhysicsSleepTimer, K2Node_CreateDelegate_OutputDelegate) == 0x000000, "Member 'CORPSE_SkeletalBase_C_TryStartPhysicsSleepTimer::K2Node_CreateDelegate_OutputDelegate' has a wrong offset!");
static_assert(offsetof(CORPSE_SkeletalBase_C_TryStartPhysicsSleepTimer, CallFunc_K2_IsTimerActiveHandle_ReturnValue) == 0x000010, "Member 'CORPSE_SkeletalBase_C_TryStartPhysicsSleepTimer::CallFunc_K2_IsTimerActiveHandle_ReturnValue' has a wrong offset!");
static_assert(offsetof(CORPSE_SkeletalBase_C_TryStartPhysicsSleepTimer, CallFunc_K2_SetTimerDelegate_ReturnValue) == 0x000018, "Member 'CORPSE_SkeletalBase_C_TryStartPhysicsSleepTimer::CallFunc_K2_SetTimerDelegate_ReturnValue' has a wrong offset!");
static_assert(offsetof(CORPSE_SkeletalBase_C_TryStartPhysicsSleepTimer, CallFunc_Not_PreBool_ReturnValue) == 0x000020, "Member 'CORPSE_SkeletalBase_C_TryStartPhysicsSleepTimer::CallFunc_Not_PreBool_ReturnValue' has a wrong offset!");

// Function CORPSE_SkeletalBase.CORPSE_SkeletalBase_C.EVENT_OnLinkedDebrisHit
// 0x0150 (0x0150 - 0x0000)
struct CORPSE_SkeletalBase_C_EVENT_OnLinkedDebrisHit final
{
public:
	class UPrimitiveComponent*                    HitComponent;                                      // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 OtherActor;                                        // 0x0008(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UPrimitiveComponent*                    OtherComp;                                         // 0x0010(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                NormalImpulse;                                     // 0x0018(0x000C)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FHitResult                             Hit;                                               // 0x0024(0x0088)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, ContainsInstancedReference)
	struct FVector                                CallFunc_GetComponentBounds_Origin;                // 0x00AC(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_GetComponentBounds_BoxExtent;             // 0x00B8(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_GetComponentBounds_SphereRadius;          // 0x00C4(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_GetComponentBounds_Origin_1;              // 0x00C8(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_GetComponentBounds_BoxExtent_1;           // 0x00D4(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_GetComponentBounds_SphereRadius_1;        // 0x00E0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Add_VectorVector_ReturnValue;             // 0x00E4(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Add_VectorVector_ReturnValue_1;           // 0x00F0(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Subtract_VectorVector_ReturnValue;        // 0x00FC(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Subtract_VectorVector_ReturnValue_1;      // 0x0108(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FBox                                   CallFunc_MakeBox_ReturnValue;                      // 0x0114(0x001C)(ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FBox                                   CallFunc_MakeBox_ReturnValue_1;                    // 0x0130(0x001C)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IntersectBoxes_ReturnValue;               // 0x014C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(CORPSE_SkeletalBase_C_EVENT_OnLinkedDebrisHit) == 0x000008, "Wrong alignment on CORPSE_SkeletalBase_C_EVENT_OnLinkedDebrisHit");
static_assert(sizeof(CORPSE_SkeletalBase_C_EVENT_OnLinkedDebrisHit) == 0x000150, "Wrong size on CORPSE_SkeletalBase_C_EVENT_OnLinkedDebrisHit");
static_assert(offsetof(CORPSE_SkeletalBase_C_EVENT_OnLinkedDebrisHit, HitComponent) == 0x000000, "Member 'CORPSE_SkeletalBase_C_EVENT_OnLinkedDebrisHit::HitComponent' has a wrong offset!");
static_assert(offsetof(CORPSE_SkeletalBase_C_EVENT_OnLinkedDebrisHit, OtherActor) == 0x000008, "Member 'CORPSE_SkeletalBase_C_EVENT_OnLinkedDebrisHit::OtherActor' has a wrong offset!");
static_assert(offsetof(CORPSE_SkeletalBase_C_EVENT_OnLinkedDebrisHit, OtherComp) == 0x000010, "Member 'CORPSE_SkeletalBase_C_EVENT_OnLinkedDebrisHit::OtherComp' has a wrong offset!");
static_assert(offsetof(CORPSE_SkeletalBase_C_EVENT_OnLinkedDebrisHit, NormalImpulse) == 0x000018, "Member 'CORPSE_SkeletalBase_C_EVENT_OnLinkedDebrisHit::NormalImpulse' has a wrong offset!");
static_assert(offsetof(CORPSE_SkeletalBase_C_EVENT_OnLinkedDebrisHit, Hit) == 0x000024, "Member 'CORPSE_SkeletalBase_C_EVENT_OnLinkedDebrisHit::Hit' has a wrong offset!");
static_assert(offsetof(CORPSE_SkeletalBase_C_EVENT_OnLinkedDebrisHit, CallFunc_GetComponentBounds_Origin) == 0x0000AC, "Member 'CORPSE_SkeletalBase_C_EVENT_OnLinkedDebrisHit::CallFunc_GetComponentBounds_Origin' has a wrong offset!");
static_assert(offsetof(CORPSE_SkeletalBase_C_EVENT_OnLinkedDebrisHit, CallFunc_GetComponentBounds_BoxExtent) == 0x0000B8, "Member 'CORPSE_SkeletalBase_C_EVENT_OnLinkedDebrisHit::CallFunc_GetComponentBounds_BoxExtent' has a wrong offset!");
static_assert(offsetof(CORPSE_SkeletalBase_C_EVENT_OnLinkedDebrisHit, CallFunc_GetComponentBounds_SphereRadius) == 0x0000C4, "Member 'CORPSE_SkeletalBase_C_EVENT_OnLinkedDebrisHit::CallFunc_GetComponentBounds_SphereRadius' has a wrong offset!");
static_assert(offsetof(CORPSE_SkeletalBase_C_EVENT_OnLinkedDebrisHit, CallFunc_GetComponentBounds_Origin_1) == 0x0000C8, "Member 'CORPSE_SkeletalBase_C_EVENT_OnLinkedDebrisHit::CallFunc_GetComponentBounds_Origin_1' has a wrong offset!");
static_assert(offsetof(CORPSE_SkeletalBase_C_EVENT_OnLinkedDebrisHit, CallFunc_GetComponentBounds_BoxExtent_1) == 0x0000D4, "Member 'CORPSE_SkeletalBase_C_EVENT_OnLinkedDebrisHit::CallFunc_GetComponentBounds_BoxExtent_1' has a wrong offset!");
static_assert(offsetof(CORPSE_SkeletalBase_C_EVENT_OnLinkedDebrisHit, CallFunc_GetComponentBounds_SphereRadius_1) == 0x0000E0, "Member 'CORPSE_SkeletalBase_C_EVENT_OnLinkedDebrisHit::CallFunc_GetComponentBounds_SphereRadius_1' has a wrong offset!");
static_assert(offsetof(CORPSE_SkeletalBase_C_EVENT_OnLinkedDebrisHit, CallFunc_Add_VectorVector_ReturnValue) == 0x0000E4, "Member 'CORPSE_SkeletalBase_C_EVENT_OnLinkedDebrisHit::CallFunc_Add_VectorVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(CORPSE_SkeletalBase_C_EVENT_OnLinkedDebrisHit, CallFunc_Add_VectorVector_ReturnValue_1) == 0x0000F0, "Member 'CORPSE_SkeletalBase_C_EVENT_OnLinkedDebrisHit::CallFunc_Add_VectorVector_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(CORPSE_SkeletalBase_C_EVENT_OnLinkedDebrisHit, CallFunc_Subtract_VectorVector_ReturnValue) == 0x0000FC, "Member 'CORPSE_SkeletalBase_C_EVENT_OnLinkedDebrisHit::CallFunc_Subtract_VectorVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(CORPSE_SkeletalBase_C_EVENT_OnLinkedDebrisHit, CallFunc_Subtract_VectorVector_ReturnValue_1) == 0x000108, "Member 'CORPSE_SkeletalBase_C_EVENT_OnLinkedDebrisHit::CallFunc_Subtract_VectorVector_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(CORPSE_SkeletalBase_C_EVENT_OnLinkedDebrisHit, CallFunc_MakeBox_ReturnValue) == 0x000114, "Member 'CORPSE_SkeletalBase_C_EVENT_OnLinkedDebrisHit::CallFunc_MakeBox_ReturnValue' has a wrong offset!");
static_assert(offsetof(CORPSE_SkeletalBase_C_EVENT_OnLinkedDebrisHit, CallFunc_MakeBox_ReturnValue_1) == 0x000130, "Member 'CORPSE_SkeletalBase_C_EVENT_OnLinkedDebrisHit::CallFunc_MakeBox_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(CORPSE_SkeletalBase_C_EVENT_OnLinkedDebrisHit, CallFunc_IntersectBoxes_ReturnValue) == 0x00014C, "Member 'CORPSE_SkeletalBase_C_EVENT_OnLinkedDebrisHit::CallFunc_IntersectBoxes_ReturnValue' has a wrong offset!");

// Function CORPSE_SkeletalBase.CORPSE_SkeletalBase_C.TryApplyPendingBoneTransforms
// 0x000C (0x000C - 0x0000)
struct CORPSE_SkeletalBase_C_TryApplyPendingBoneTransforms final
{
public:
	bool                                          Result;                                            // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Array_Length_ReturnValue;                 // 0x0004(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Greater_IntInt_ReturnValue;               // 0x0008(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(CORPSE_SkeletalBase_C_TryApplyPendingBoneTransforms) == 0x000004, "Wrong alignment on CORPSE_SkeletalBase_C_TryApplyPendingBoneTransforms");
static_assert(sizeof(CORPSE_SkeletalBase_C_TryApplyPendingBoneTransforms) == 0x00000C, "Wrong size on CORPSE_SkeletalBase_C_TryApplyPendingBoneTransforms");
static_assert(offsetof(CORPSE_SkeletalBase_C_TryApplyPendingBoneTransforms, Result) == 0x000000, "Member 'CORPSE_SkeletalBase_C_TryApplyPendingBoneTransforms::Result' has a wrong offset!");
static_assert(offsetof(CORPSE_SkeletalBase_C_TryApplyPendingBoneTransforms, CallFunc_Array_Length_ReturnValue) == 0x000004, "Member 'CORPSE_SkeletalBase_C_TryApplyPendingBoneTransforms::CallFunc_Array_Length_ReturnValue' has a wrong offset!");
static_assert(offsetof(CORPSE_SkeletalBase_C_TryApplyPendingBoneTransforms, CallFunc_Greater_IntInt_ReturnValue) == 0x000008, "Member 'CORPSE_SkeletalBase_C_TryApplyPendingBoneTransforms::CallFunc_Greater_IntInt_ReturnValue' has a wrong offset!");

// Function CORPSE_SkeletalBase.CORPSE_SkeletalBase_C.HasHighPriorityTargetShape
// 0x0001 (0x0001 - 0x0000)
struct CORPSE_SkeletalBase_C_HasHighPriorityTargetShape final
{
public:
	bool                                          Result;                                            // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(CORPSE_SkeletalBase_C_HasHighPriorityTargetShape) == 0x000001, "Wrong alignment on CORPSE_SkeletalBase_C_HasHighPriorityTargetShape");
static_assert(sizeof(CORPSE_SkeletalBase_C_HasHighPriorityTargetShape) == 0x000001, "Wrong size on CORPSE_SkeletalBase_C_HasHighPriorityTargetShape");
static_assert(offsetof(CORPSE_SkeletalBase_C_HasHighPriorityTargetShape, Result) == 0x000000, "Member 'CORPSE_SkeletalBase_C_HasHighPriorityTargetShape::Result' has a wrong offset!");

// Function CORPSE_SkeletalBase.CORPSE_SkeletalBase_C.ReceivePendingBodyTransforms
// 0x0020 (0x0020 - 0x0000)
struct CORPSE_SkeletalBase_C_ReceivePendingBodyTransforms final
{
public:
	class USkeletalMeshComponent*                 SkeletalMeshComponent;                             // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TArray<struct FTransform>                     BodyTransforms;                                    // 0x0008(0x0010)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
	bool                                          ReturnValue;                                       // 0x0018(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor)
};
static_assert(alignof(CORPSE_SkeletalBase_C_ReceivePendingBodyTransforms) == 0x000008, "Wrong alignment on CORPSE_SkeletalBase_C_ReceivePendingBodyTransforms");
static_assert(sizeof(CORPSE_SkeletalBase_C_ReceivePendingBodyTransforms) == 0x000020, "Wrong size on CORPSE_SkeletalBase_C_ReceivePendingBodyTransforms");
static_assert(offsetof(CORPSE_SkeletalBase_C_ReceivePendingBodyTransforms, SkeletalMeshComponent) == 0x000000, "Member 'CORPSE_SkeletalBase_C_ReceivePendingBodyTransforms::SkeletalMeshComponent' has a wrong offset!");
static_assert(offsetof(CORPSE_SkeletalBase_C_ReceivePendingBodyTransforms, BodyTransforms) == 0x000008, "Member 'CORPSE_SkeletalBase_C_ReceivePendingBodyTransforms::BodyTransforms' has a wrong offset!");
static_assert(offsetof(CORPSE_SkeletalBase_C_ReceivePendingBodyTransforms, ReturnValue) == 0x000018, "Member 'CORPSE_SkeletalBase_C_ReceivePendingBodyTransforms::ReturnValue' has a wrong offset!");

}

