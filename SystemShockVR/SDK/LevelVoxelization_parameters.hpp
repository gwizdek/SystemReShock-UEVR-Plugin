#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: LevelVoxelization

#include "Basic.hpp"

#include "CoreUObject_structs.hpp"
#include "LevelVoxelization_structs.hpp"
#include "Engine_structs.hpp"


namespace SDK::Params
{

// Function LevelVoxelization.LevelVoxelizationData.GetBlendedVoxelMeshSurfaceNormal
// 0x0070 (0x0070 - 0x0000)
struct LevelVoxelizationData_GetBlendedVoxelMeshSurfaceNormal final
{
public:
	struct FTransform                             SourceTransform;                                   // 0x0000(0x0030)(ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	float                                         SnapDistance;                                      // 0x0030(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         BlendAmount;                                       // 0x0034(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FVector>                        LocalTraceOffsets;                                 // 0x0038(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
	struct FVector                                LevelOffset;                                       // 0x0048(0x000C)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIncludePerspectiveMeshes;                         // 0x0054(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bDebugDrawTraces;                                  // 0x0055(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_56[0x2];                                       // 0x0056(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                OutNormal;                                         // 0x0058(0x000C)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         OutDistance;                                       // 0x0064(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0068(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_69[0x7];                                       // 0x0069(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(LevelVoxelizationData_GetBlendedVoxelMeshSurfaceNormal) == 0x000010, "Wrong alignment on LevelVoxelizationData_GetBlendedVoxelMeshSurfaceNormal");
static_assert(sizeof(LevelVoxelizationData_GetBlendedVoxelMeshSurfaceNormal) == 0x000070, "Wrong size on LevelVoxelizationData_GetBlendedVoxelMeshSurfaceNormal");
static_assert(offsetof(LevelVoxelizationData_GetBlendedVoxelMeshSurfaceNormal, SourceTransform) == 0x000000, "Member 'LevelVoxelizationData_GetBlendedVoxelMeshSurfaceNormal::SourceTransform' has a wrong offset!");
static_assert(offsetof(LevelVoxelizationData_GetBlendedVoxelMeshSurfaceNormal, SnapDistance) == 0x000030, "Member 'LevelVoxelizationData_GetBlendedVoxelMeshSurfaceNormal::SnapDistance' has a wrong offset!");
static_assert(offsetof(LevelVoxelizationData_GetBlendedVoxelMeshSurfaceNormal, BlendAmount) == 0x000034, "Member 'LevelVoxelizationData_GetBlendedVoxelMeshSurfaceNormal::BlendAmount' has a wrong offset!");
static_assert(offsetof(LevelVoxelizationData_GetBlendedVoxelMeshSurfaceNormal, LocalTraceOffsets) == 0x000038, "Member 'LevelVoxelizationData_GetBlendedVoxelMeshSurfaceNormal::LocalTraceOffsets' has a wrong offset!");
static_assert(offsetof(LevelVoxelizationData_GetBlendedVoxelMeshSurfaceNormal, LevelOffset) == 0x000048, "Member 'LevelVoxelizationData_GetBlendedVoxelMeshSurfaceNormal::LevelOffset' has a wrong offset!");
static_assert(offsetof(LevelVoxelizationData_GetBlendedVoxelMeshSurfaceNormal, bIncludePerspectiveMeshes) == 0x000054, "Member 'LevelVoxelizationData_GetBlendedVoxelMeshSurfaceNormal::bIncludePerspectiveMeshes' has a wrong offset!");
static_assert(offsetof(LevelVoxelizationData_GetBlendedVoxelMeshSurfaceNormal, bDebugDrawTraces) == 0x000055, "Member 'LevelVoxelizationData_GetBlendedVoxelMeshSurfaceNormal::bDebugDrawTraces' has a wrong offset!");
static_assert(offsetof(LevelVoxelizationData_GetBlendedVoxelMeshSurfaceNormal, OutNormal) == 0x000058, "Member 'LevelVoxelizationData_GetBlendedVoxelMeshSurfaceNormal::OutNormal' has a wrong offset!");
static_assert(offsetof(LevelVoxelizationData_GetBlendedVoxelMeshSurfaceNormal, OutDistance) == 0x000064, "Member 'LevelVoxelizationData_GetBlendedVoxelMeshSurfaceNormal::OutDistance' has a wrong offset!");
static_assert(offsetof(LevelVoxelizationData_GetBlendedVoxelMeshSurfaceNormal, ReturnValue) == 0x000068, "Member 'LevelVoxelizationData_GetBlendedVoxelMeshSurfaceNormal::ReturnValue' has a wrong offset!");

// Function LevelVoxelization.LevelVoxelizationData.GetColumnLocationFromVoxelLocation2D
// 0x0010 (0x0010 - 0x0000)
struct LevelVoxelizationData_GetColumnLocationFromVoxelLocation2D final
{
public:
	struct FIntPoint                              VoxelLocation2D;                                   // 0x0000(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FIntPoint                              ReturnValue;                                       // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LevelVoxelizationData_GetColumnLocationFromVoxelLocation2D) == 0x000004, "Wrong alignment on LevelVoxelizationData_GetColumnLocationFromVoxelLocation2D");
static_assert(sizeof(LevelVoxelizationData_GetColumnLocationFromVoxelLocation2D) == 0x000010, "Wrong size on LevelVoxelizationData_GetColumnLocationFromVoxelLocation2D");
static_assert(offsetof(LevelVoxelizationData_GetColumnLocationFromVoxelLocation2D, VoxelLocation2D) == 0x000000, "Member 'LevelVoxelizationData_GetColumnLocationFromVoxelLocation2D::VoxelLocation2D' has a wrong offset!");
static_assert(offsetof(LevelVoxelizationData_GetColumnLocationFromVoxelLocation2D, ReturnValue) == 0x000008, "Member 'LevelVoxelizationData_GetColumnLocationFromVoxelLocation2D::ReturnValue' has a wrong offset!");

// Function LevelVoxelization.LevelVoxelizationData.GetNeighborWallLocations
// 0x0020 (0x0020 - 0x0000)
struct LevelVoxelizationData_GetNeighborWallLocations final
{
public:
	struct FVoxelWallLocation                     WallLocation;                                      // 0x0000(0x0010)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FVoxelWallLocation>             ReturnValue;                                       // 0x0010(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(LevelVoxelizationData_GetNeighborWallLocations) == 0x000008, "Wrong alignment on LevelVoxelizationData_GetNeighborWallLocations");
static_assert(sizeof(LevelVoxelizationData_GetNeighborWallLocations) == 0x000020, "Wrong size on LevelVoxelizationData_GetNeighborWallLocations");
static_assert(offsetof(LevelVoxelizationData_GetNeighborWallLocations, WallLocation) == 0x000000, "Member 'LevelVoxelizationData_GetNeighborWallLocations::WallLocation' has a wrong offset!");
static_assert(offsetof(LevelVoxelizationData_GetNeighborWallLocations, ReturnValue) == 0x000010, "Member 'LevelVoxelizationData_GetNeighborWallLocations::ReturnValue' has a wrong offset!");

// Function LevelVoxelization.LevelVoxelizationData.GetPortalCount
// 0x0004 (0x0004 - 0x0000)
struct LevelVoxelizationData_GetPortalCount final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LevelVoxelizationData_GetPortalCount) == 0x000004, "Wrong alignment on LevelVoxelizationData_GetPortalCount");
static_assert(sizeof(LevelVoxelizationData_GetPortalCount) == 0x000004, "Wrong size on LevelVoxelizationData_GetPortalCount");
static_assert(offsetof(LevelVoxelizationData_GetPortalCount, ReturnValue) == 0x000000, "Member 'LevelVoxelizationData_GetPortalCount::ReturnValue' has a wrong offset!");

// Function LevelVoxelization.LevelVoxelizationData.GetRegionRowHandleForWorldLocation
// 0x0040 (0x0040 - 0x0000)
struct LevelVoxelizationData_GetRegionRowHandleForWorldLocation final
{
public:
	struct FVector                                WorldLocation;                                     // 0x0000(0x000C)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                WorldForwardVector;                                // 0x000C(0x000C)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                WorldRightVector;                                  // 0x0018(0x000C)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                LevelOffset;                                       // 0x0024(0x000C)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FDataTableRowHandle                    ReturnValue;                                       // 0x0030(0x0010)(Parm, OutParm, ReturnParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(LevelVoxelizationData_GetRegionRowHandleForWorldLocation) == 0x000008, "Wrong alignment on LevelVoxelizationData_GetRegionRowHandleForWorldLocation");
static_assert(sizeof(LevelVoxelizationData_GetRegionRowHandleForWorldLocation) == 0x000040, "Wrong size on LevelVoxelizationData_GetRegionRowHandleForWorldLocation");
static_assert(offsetof(LevelVoxelizationData_GetRegionRowHandleForWorldLocation, WorldLocation) == 0x000000, "Member 'LevelVoxelizationData_GetRegionRowHandleForWorldLocation::WorldLocation' has a wrong offset!");
static_assert(offsetof(LevelVoxelizationData_GetRegionRowHandleForWorldLocation, WorldForwardVector) == 0x00000C, "Member 'LevelVoxelizationData_GetRegionRowHandleForWorldLocation::WorldForwardVector' has a wrong offset!");
static_assert(offsetof(LevelVoxelizationData_GetRegionRowHandleForWorldLocation, WorldRightVector) == 0x000018, "Member 'LevelVoxelizationData_GetRegionRowHandleForWorldLocation::WorldRightVector' has a wrong offset!");
static_assert(offsetof(LevelVoxelizationData_GetRegionRowHandleForWorldLocation, LevelOffset) == 0x000024, "Member 'LevelVoxelizationData_GetRegionRowHandleForWorldLocation::LevelOffset' has a wrong offset!");
static_assert(offsetof(LevelVoxelizationData_GetRegionRowHandleForWorldLocation, ReturnValue) == 0x000030, "Member 'LevelVoxelizationData_GetRegionRowHandleForWorldLocation::ReturnValue' has a wrong offset!");

// Function LevelVoxelization.LevelVoxelizationData.GetRegionRowHandleFromColumnLocation
// 0x0018 (0x0018 - 0x0000)
struct LevelVoxelizationData_GetRegionRowHandleFromColumnLocation final
{
public:
	struct FIntPoint                              ColumnLocation;                                    // 0x0000(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FDataTableRowHandle                    ReturnValue;                                       // 0x0008(0x0010)(Parm, OutParm, ReturnParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(LevelVoxelizationData_GetRegionRowHandleFromColumnLocation) == 0x000008, "Wrong alignment on LevelVoxelizationData_GetRegionRowHandleFromColumnLocation");
static_assert(sizeof(LevelVoxelizationData_GetRegionRowHandleFromColumnLocation) == 0x000018, "Wrong size on LevelVoxelizationData_GetRegionRowHandleFromColumnLocation");
static_assert(offsetof(LevelVoxelizationData_GetRegionRowHandleFromColumnLocation, ColumnLocation) == 0x000000, "Member 'LevelVoxelizationData_GetRegionRowHandleFromColumnLocation::ColumnLocation' has a wrong offset!");
static_assert(offsetof(LevelVoxelizationData_GetRegionRowHandleFromColumnLocation, ReturnValue) == 0x000008, "Member 'LevelVoxelizationData_GetRegionRowHandleFromColumnLocation::ReturnValue' has a wrong offset!");

// Function LevelVoxelization.LevelVoxelizationData.GetRoomCount
// 0x0004 (0x0004 - 0x0000)
struct LevelVoxelizationData_GetRoomCount final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LevelVoxelizationData_GetRoomCount) == 0x000004, "Wrong alignment on LevelVoxelizationData_GetRoomCount");
static_assert(sizeof(LevelVoxelizationData_GetRoomCount) == 0x000004, "Wrong size on LevelVoxelizationData_GetRoomCount");
static_assert(offsetof(LevelVoxelizationData_GetRoomCount, ReturnValue) == 0x000000, "Member 'LevelVoxelizationData_GetRoomCount::ReturnValue' has a wrong offset!");

// Function LevelVoxelization.LevelVoxelizationData.GetVoxelLocation2DFromColumnLocation
// 0x0010 (0x0010 - 0x0000)
struct LevelVoxelizationData_GetVoxelLocation2DFromColumnLocation final
{
public:
	struct FIntPoint                              ColumnLocation;                                    // 0x0000(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FIntPoint                              ReturnValue;                                       // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LevelVoxelizationData_GetVoxelLocation2DFromColumnLocation) == 0x000004, "Wrong alignment on LevelVoxelizationData_GetVoxelLocation2DFromColumnLocation");
static_assert(sizeof(LevelVoxelizationData_GetVoxelLocation2DFromColumnLocation) == 0x000010, "Wrong size on LevelVoxelizationData_GetVoxelLocation2DFromColumnLocation");
static_assert(offsetof(LevelVoxelizationData_GetVoxelLocation2DFromColumnLocation, ColumnLocation) == 0x000000, "Member 'LevelVoxelizationData_GetVoxelLocation2DFromColumnLocation::ColumnLocation' has a wrong offset!");
static_assert(offsetof(LevelVoxelizationData_GetVoxelLocation2DFromColumnLocation, ReturnValue) == 0x000008, "Member 'LevelVoxelizationData_GetVoxelLocation2DFromColumnLocation::ReturnValue' has a wrong offset!");

// Function LevelVoxelization.LevelVoxelizationData.GetVoxelMeshSurfaceTransform
// 0x00A0 (0x00A0 - 0x0000)
struct LevelVoxelizationData_GetVoxelMeshSurfaceTransform final
{
public:
	struct FTransform                             SourceTransform;                                   // 0x0000(0x0030)(ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	float                                         SourceRadius;                                      // 0x0030(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         SnapDistance;                                      // 0x0034(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                DesiredTranslation;                                // 0x0038(0x000C)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                LevelOffset;                                       // 0x0044(0x000C)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIncludePerspectiveMeshes;                         // 0x0050(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bClosestSurfaceFallback;                           // 0x0051(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_52[0xE];                                       // 0x0052(0x000E)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTransform                             OutSurfaceTransform;                               // 0x0060(0x0030)(Parm, OutParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0090(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_91[0xF];                                       // 0x0091(0x000F)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(LevelVoxelizationData_GetVoxelMeshSurfaceTransform) == 0x000010, "Wrong alignment on LevelVoxelizationData_GetVoxelMeshSurfaceTransform");
static_assert(sizeof(LevelVoxelizationData_GetVoxelMeshSurfaceTransform) == 0x0000A0, "Wrong size on LevelVoxelizationData_GetVoxelMeshSurfaceTransform");
static_assert(offsetof(LevelVoxelizationData_GetVoxelMeshSurfaceTransform, SourceTransform) == 0x000000, "Member 'LevelVoxelizationData_GetVoxelMeshSurfaceTransform::SourceTransform' has a wrong offset!");
static_assert(offsetof(LevelVoxelizationData_GetVoxelMeshSurfaceTransform, SourceRadius) == 0x000030, "Member 'LevelVoxelizationData_GetVoxelMeshSurfaceTransform::SourceRadius' has a wrong offset!");
static_assert(offsetof(LevelVoxelizationData_GetVoxelMeshSurfaceTransform, SnapDistance) == 0x000034, "Member 'LevelVoxelizationData_GetVoxelMeshSurfaceTransform::SnapDistance' has a wrong offset!");
static_assert(offsetof(LevelVoxelizationData_GetVoxelMeshSurfaceTransform, DesiredTranslation) == 0x000038, "Member 'LevelVoxelizationData_GetVoxelMeshSurfaceTransform::DesiredTranslation' has a wrong offset!");
static_assert(offsetof(LevelVoxelizationData_GetVoxelMeshSurfaceTransform, LevelOffset) == 0x000044, "Member 'LevelVoxelizationData_GetVoxelMeshSurfaceTransform::LevelOffset' has a wrong offset!");
static_assert(offsetof(LevelVoxelizationData_GetVoxelMeshSurfaceTransform, bIncludePerspectiveMeshes) == 0x000050, "Member 'LevelVoxelizationData_GetVoxelMeshSurfaceTransform::bIncludePerspectiveMeshes' has a wrong offset!");
static_assert(offsetof(LevelVoxelizationData_GetVoxelMeshSurfaceTransform, bClosestSurfaceFallback) == 0x000051, "Member 'LevelVoxelizationData_GetVoxelMeshSurfaceTransform::bClosestSurfaceFallback' has a wrong offset!");
static_assert(offsetof(LevelVoxelizationData_GetVoxelMeshSurfaceTransform, OutSurfaceTransform) == 0x000060, "Member 'LevelVoxelizationData_GetVoxelMeshSurfaceTransform::OutSurfaceTransform' has a wrong offset!");
static_assert(offsetof(LevelVoxelizationData_GetVoxelMeshSurfaceTransform, ReturnValue) == 0x000090, "Member 'LevelVoxelizationData_GetVoxelMeshSurfaceTransform::ReturnValue' has a wrong offset!");

// Function LevelVoxelization.LevelVoxelizationData.GetWallComponentCount
// 0x0004 (0x0004 - 0x0000)
struct LevelVoxelizationData_GetWallComponentCount final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LevelVoxelizationData_GetWallComponentCount) == 0x000004, "Wrong alignment on LevelVoxelizationData_GetWallComponentCount");
static_assert(sizeof(LevelVoxelizationData_GetWallComponentCount) == 0x000004, "Wrong size on LevelVoxelizationData_GetWallComponentCount");
static_assert(offsetof(LevelVoxelizationData_GetWallComponentCount, ReturnValue) == 0x000000, "Member 'LevelVoxelizationData_GetWallComponentCount::ReturnValue' has a wrong offset!");

// Function LevelVoxelization.LevelVoxelizationData.GetWallComponentIndexAtWallLocation
// 0x0014 (0x0014 - 0x0000)
struct LevelVoxelizationData_GetWallComponentIndexAtWallLocation final
{
public:
	struct FVoxelWallLocation                     WallLocation;                                      // 0x0000(0x0010)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ReturnValue;                                       // 0x0010(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LevelVoxelizationData_GetWallComponentIndexAtWallLocation) == 0x000004, "Wrong alignment on LevelVoxelizationData_GetWallComponentIndexAtWallLocation");
static_assert(sizeof(LevelVoxelizationData_GetWallComponentIndexAtWallLocation) == 0x000014, "Wrong size on LevelVoxelizationData_GetWallComponentIndexAtWallLocation");
static_assert(offsetof(LevelVoxelizationData_GetWallComponentIndexAtWallLocation, WallLocation) == 0x000000, "Member 'LevelVoxelizationData_GetWallComponentIndexAtWallLocation::WallLocation' has a wrong offset!");
static_assert(offsetof(LevelVoxelizationData_GetWallComponentIndexAtWallLocation, ReturnValue) == 0x000010, "Member 'LevelVoxelizationData_GetWallComponentIndexAtWallLocation::ReturnValue' has a wrong offset!");

// Function LevelVoxelization.LevelVoxelizationData.GetWallComponentPathNameFromIndex
// 0x0018 (0x0018 - 0x0000)
struct LevelVoxelizationData_GetWallComponentPathNameFromIndex final
{
public:
	int32                                         ComponentIndex;                                    // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 ReturnValue;                                       // 0x0008(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LevelVoxelizationData_GetWallComponentPathNameFromIndex) == 0x000008, "Wrong alignment on LevelVoxelizationData_GetWallComponentPathNameFromIndex");
static_assert(sizeof(LevelVoxelizationData_GetWallComponentPathNameFromIndex) == 0x000018, "Wrong size on LevelVoxelizationData_GetWallComponentPathNameFromIndex");
static_assert(offsetof(LevelVoxelizationData_GetWallComponentPathNameFromIndex, ComponentIndex) == 0x000000, "Member 'LevelVoxelizationData_GetWallComponentPathNameFromIndex::ComponentIndex' has a wrong offset!");
static_assert(offsetof(LevelVoxelizationData_GetWallComponentPathNameFromIndex, ReturnValue) == 0x000008, "Member 'LevelVoxelizationData_GetWallComponentPathNameFromIndex::ReturnValue' has a wrong offset!");

// Function LevelVoxelization.LevelVoxelizationData.GetWallLocationForPrimitiveComponentAtVoxelLocation
// 0x0030 (0x0030 - 0x0000)
struct LevelVoxelizationData_GetWallLocationForPrimitiveComponentAtVoxelLocation final
{
public:
	class UPrimitiveComponent*                    PrimitiveComponent;                                // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FIntVector                             VoxelLocation;                                     // 0x0008(0x000C)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UObject*                                WorldContextObject;                                // 0x0018(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVoxelWallLocation                     ReturnValue;                                       // 0x0020(0x0010)(Parm, OutParm, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LevelVoxelizationData_GetWallLocationForPrimitiveComponentAtVoxelLocation) == 0x000008, "Wrong alignment on LevelVoxelizationData_GetWallLocationForPrimitiveComponentAtVoxelLocation");
static_assert(sizeof(LevelVoxelizationData_GetWallLocationForPrimitiveComponentAtVoxelLocation) == 0x000030, "Wrong size on LevelVoxelizationData_GetWallLocationForPrimitiveComponentAtVoxelLocation");
static_assert(offsetof(LevelVoxelizationData_GetWallLocationForPrimitiveComponentAtVoxelLocation, PrimitiveComponent) == 0x000000, "Member 'LevelVoxelizationData_GetWallLocationForPrimitiveComponentAtVoxelLocation::PrimitiveComponent' has a wrong offset!");
static_assert(offsetof(LevelVoxelizationData_GetWallLocationForPrimitiveComponentAtVoxelLocation, VoxelLocation) == 0x000008, "Member 'LevelVoxelizationData_GetWallLocationForPrimitiveComponentAtVoxelLocation::VoxelLocation' has a wrong offset!");
static_assert(offsetof(LevelVoxelizationData_GetWallLocationForPrimitiveComponentAtVoxelLocation, WorldContextObject) == 0x000018, "Member 'LevelVoxelizationData_GetWallLocationForPrimitiveComponentAtVoxelLocation::WorldContextObject' has a wrong offset!");
static_assert(offsetof(LevelVoxelizationData_GetWallLocationForPrimitiveComponentAtVoxelLocation, ReturnValue) == 0x000020, "Member 'LevelVoxelizationData_GetWallLocationForPrimitiveComponentAtVoxelLocation::ReturnValue' has a wrong offset!");

// Function LevelVoxelization.LevelVoxelizationData.GetWallLocationsForPrimitiveComponentAtVoxelLocations
// 0x0030 (0x0030 - 0x0000)
struct LevelVoxelizationData_GetWallLocationsForPrimitiveComponentAtVoxelLocations final
{
public:
	class UPrimitiveComponent*                    PrimitiveComponent;                                // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FIntVector>                     VoxelLocations;                                    // 0x0008(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
	class UObject*                                WorldContextObject;                                // 0x0018(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FVoxelWallLocation>             ReturnValue;                                       // 0x0020(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(LevelVoxelizationData_GetWallLocationsForPrimitiveComponentAtVoxelLocations) == 0x000008, "Wrong alignment on LevelVoxelizationData_GetWallLocationsForPrimitiveComponentAtVoxelLocations");
static_assert(sizeof(LevelVoxelizationData_GetWallLocationsForPrimitiveComponentAtVoxelLocations) == 0x000030, "Wrong size on LevelVoxelizationData_GetWallLocationsForPrimitiveComponentAtVoxelLocations");
static_assert(offsetof(LevelVoxelizationData_GetWallLocationsForPrimitiveComponentAtVoxelLocations, PrimitiveComponent) == 0x000000, "Member 'LevelVoxelizationData_GetWallLocationsForPrimitiveComponentAtVoxelLocations::PrimitiveComponent' has a wrong offset!");
static_assert(offsetof(LevelVoxelizationData_GetWallLocationsForPrimitiveComponentAtVoxelLocations, VoxelLocations) == 0x000008, "Member 'LevelVoxelizationData_GetWallLocationsForPrimitiveComponentAtVoxelLocations::VoxelLocations' has a wrong offset!");
static_assert(offsetof(LevelVoxelizationData_GetWallLocationsForPrimitiveComponentAtVoxelLocations, WorldContextObject) == 0x000018, "Member 'LevelVoxelizationData_GetWallLocationsForPrimitiveComponentAtVoxelLocations::WorldContextObject' has a wrong offset!");
static_assert(offsetof(LevelVoxelizationData_GetWallLocationsForPrimitiveComponentAtVoxelLocations, ReturnValue) == 0x000020, "Member 'LevelVoxelizationData_GetWallLocationsForPrimitiveComponentAtVoxelLocations::ReturnValue' has a wrong offset!");

// Function LevelVoxelization.LevelVoxelizationData.GetWallLocationsForPrimitiveComponentInVoxelBounds
// 0x0038 (0x0038 - 0x0000)
struct LevelVoxelizationData_GetWallLocationsForPrimitiveComponentInVoxelBounds final
{
public:
	class UPrimitiveComponent*                    PrimitiveComponent;                                // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FIntVector                             MinVoxelLocation;                                  // 0x0008(0x000C)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FIntVector                             MaxVoxelLocation;                                  // 0x0014(0x000C)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UObject*                                WorldContextObject;                                // 0x0020(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FVoxelWallLocation>             ReturnValue;                                       // 0x0028(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(LevelVoxelizationData_GetWallLocationsForPrimitiveComponentInVoxelBounds) == 0x000008, "Wrong alignment on LevelVoxelizationData_GetWallLocationsForPrimitiveComponentInVoxelBounds");
static_assert(sizeof(LevelVoxelizationData_GetWallLocationsForPrimitiveComponentInVoxelBounds) == 0x000038, "Wrong size on LevelVoxelizationData_GetWallLocationsForPrimitiveComponentInVoxelBounds");
static_assert(offsetof(LevelVoxelizationData_GetWallLocationsForPrimitiveComponentInVoxelBounds, PrimitiveComponent) == 0x000000, "Member 'LevelVoxelizationData_GetWallLocationsForPrimitiveComponentInVoxelBounds::PrimitiveComponent' has a wrong offset!");
static_assert(offsetof(LevelVoxelizationData_GetWallLocationsForPrimitiveComponentInVoxelBounds, MinVoxelLocation) == 0x000008, "Member 'LevelVoxelizationData_GetWallLocationsForPrimitiveComponentInVoxelBounds::MinVoxelLocation' has a wrong offset!");
static_assert(offsetof(LevelVoxelizationData_GetWallLocationsForPrimitiveComponentInVoxelBounds, MaxVoxelLocation) == 0x000014, "Member 'LevelVoxelizationData_GetWallLocationsForPrimitiveComponentInVoxelBounds::MaxVoxelLocation' has a wrong offset!");
static_assert(offsetof(LevelVoxelizationData_GetWallLocationsForPrimitiveComponentInVoxelBounds, WorldContextObject) == 0x000020, "Member 'LevelVoxelizationData_GetWallLocationsForPrimitiveComponentInVoxelBounds::WorldContextObject' has a wrong offset!");
static_assert(offsetof(LevelVoxelizationData_GetWallLocationsForPrimitiveComponentInVoxelBounds, ReturnValue) == 0x000028, "Member 'LevelVoxelizationData_GetWallLocationsForPrimitiveComponentInVoxelBounds::ReturnValue' has a wrong offset!");

// Function LevelVoxelization.LevelVoxelizationData.RayTraceThroughVoxels
// 0x0048 (0x0048 - 0x0000)
struct LevelVoxelizationData_RayTraceThroughVoxels final
{
public:
	struct FVector                                SourceLocation;                                    // 0x0000(0x000C)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                TraceDirection;                                    // 0x000C(0x000C)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         TraceDistance;                                     // 0x0018(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                LevelOffset;                                       // 0x001C(0x000C)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FIntVector                             OutHitVoxelLocation;                               // 0x0028(0x000C)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                OutWorldLocation;                                  // 0x0034(0x000C)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         OutHitPolygonIndex;                                // 0x0040(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0044(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_45[0x3];                                       // 0x0045(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(LevelVoxelizationData_RayTraceThroughVoxels) == 0x000004, "Wrong alignment on LevelVoxelizationData_RayTraceThroughVoxels");
static_assert(sizeof(LevelVoxelizationData_RayTraceThroughVoxels) == 0x000048, "Wrong size on LevelVoxelizationData_RayTraceThroughVoxels");
static_assert(offsetof(LevelVoxelizationData_RayTraceThroughVoxels, SourceLocation) == 0x000000, "Member 'LevelVoxelizationData_RayTraceThroughVoxels::SourceLocation' has a wrong offset!");
static_assert(offsetof(LevelVoxelizationData_RayTraceThroughVoxels, TraceDirection) == 0x00000C, "Member 'LevelVoxelizationData_RayTraceThroughVoxels::TraceDirection' has a wrong offset!");
static_assert(offsetof(LevelVoxelizationData_RayTraceThroughVoxels, TraceDistance) == 0x000018, "Member 'LevelVoxelizationData_RayTraceThroughVoxels::TraceDistance' has a wrong offset!");
static_assert(offsetof(LevelVoxelizationData_RayTraceThroughVoxels, LevelOffset) == 0x00001C, "Member 'LevelVoxelizationData_RayTraceThroughVoxels::LevelOffset' has a wrong offset!");
static_assert(offsetof(LevelVoxelizationData_RayTraceThroughVoxels, OutHitVoxelLocation) == 0x000028, "Member 'LevelVoxelizationData_RayTraceThroughVoxels::OutHitVoxelLocation' has a wrong offset!");
static_assert(offsetof(LevelVoxelizationData_RayTraceThroughVoxels, OutWorldLocation) == 0x000034, "Member 'LevelVoxelizationData_RayTraceThroughVoxels::OutWorldLocation' has a wrong offset!");
static_assert(offsetof(LevelVoxelizationData_RayTraceThroughVoxels, OutHitPolygonIndex) == 0x000040, "Member 'LevelVoxelizationData_RayTraceThroughVoxels::OutHitPolygonIndex' has a wrong offset!");
static_assert(offsetof(LevelVoxelizationData_RayTraceThroughVoxels, ReturnValue) == 0x000044, "Member 'LevelVoxelizationData_RayTraceThroughVoxels::ReturnValue' has a wrong offset!");

// Function LevelVoxelization.LevelVoxelizationData.RayTraverseThroughVoxels
// 0x0038 (0x0038 - 0x0000)
struct LevelVoxelizationData_RayTraverseThroughVoxels final
{
public:
	struct FVector                                SourceLocation;                                    // 0x0000(0x000C)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                TraceDirection;                                    // 0x000C(0x000C)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         TraceDistance;                                     // 0x0018(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                LevelOffset;                                       // 0x001C(0x000C)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FIntVector                             OutHitVoxelLocation;                               // 0x0028(0x000C)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0034(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_35[0x3];                                       // 0x0035(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(LevelVoxelizationData_RayTraverseThroughVoxels) == 0x000004, "Wrong alignment on LevelVoxelizationData_RayTraverseThroughVoxels");
static_assert(sizeof(LevelVoxelizationData_RayTraverseThroughVoxels) == 0x000038, "Wrong size on LevelVoxelizationData_RayTraverseThroughVoxels");
static_assert(offsetof(LevelVoxelizationData_RayTraverseThroughVoxels, SourceLocation) == 0x000000, "Member 'LevelVoxelizationData_RayTraverseThroughVoxels::SourceLocation' has a wrong offset!");
static_assert(offsetof(LevelVoxelizationData_RayTraverseThroughVoxels, TraceDirection) == 0x00000C, "Member 'LevelVoxelizationData_RayTraverseThroughVoxels::TraceDirection' has a wrong offset!");
static_assert(offsetof(LevelVoxelizationData_RayTraverseThroughVoxels, TraceDistance) == 0x000018, "Member 'LevelVoxelizationData_RayTraverseThroughVoxels::TraceDistance' has a wrong offset!");
static_assert(offsetof(LevelVoxelizationData_RayTraverseThroughVoxels, LevelOffset) == 0x00001C, "Member 'LevelVoxelizationData_RayTraverseThroughVoxels::LevelOffset' has a wrong offset!");
static_assert(offsetof(LevelVoxelizationData_RayTraverseThroughVoxels, OutHitVoxelLocation) == 0x000028, "Member 'LevelVoxelizationData_RayTraverseThroughVoxels::OutHitVoxelLocation' has a wrong offset!");
static_assert(offsetof(LevelVoxelizationData_RayTraverseThroughVoxels, ReturnValue) == 0x000034, "Member 'LevelVoxelizationData_RayTraverseThroughVoxels::ReturnValue' has a wrong offset!");

// Function LevelVoxelization.BatchedLevelVoxelization.GetVoxelDataForLevelByName
// 0x0010 (0x0010 - 0x0000)
struct BatchedLevelVoxelization_GetVoxelDataForLevelByName final
{
public:
	class FName                                   LevelName;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class ULevelVoxelizationData*                 ReturnValue;                                       // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BatchedLevelVoxelization_GetVoxelDataForLevelByName) == 0x000008, "Wrong alignment on BatchedLevelVoxelization_GetVoxelDataForLevelByName");
static_assert(sizeof(BatchedLevelVoxelization_GetVoxelDataForLevelByName) == 0x000010, "Wrong size on BatchedLevelVoxelization_GetVoxelDataForLevelByName");
static_assert(offsetof(BatchedLevelVoxelization_GetVoxelDataForLevelByName, LevelName) == 0x000000, "Member 'BatchedLevelVoxelization_GetVoxelDataForLevelByName::LevelName' has a wrong offset!");
static_assert(offsetof(BatchedLevelVoxelization_GetVoxelDataForLevelByName, ReturnValue) == 0x000008, "Member 'BatchedLevelVoxelization_GetVoxelDataForLevelByName::ReturnValue' has a wrong offset!");

// Function LevelVoxelization.BatchedLevelVoxelization.GetVoxelLocation2DFromWorldLocation2D
// 0x0018 (0x0018 - 0x0000)
struct BatchedLevelVoxelization_GetVoxelLocation2DFromWorldLocation2D final
{
public:
	struct FVector2D                              WorldLocation2D;                                   // 0x0000(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector2D                              LevelOffset2D;                                     // 0x0008(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FIntPoint                              ReturnValue;                                       // 0x0010(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BatchedLevelVoxelization_GetVoxelLocation2DFromWorldLocation2D) == 0x000004, "Wrong alignment on BatchedLevelVoxelization_GetVoxelLocation2DFromWorldLocation2D");
static_assert(sizeof(BatchedLevelVoxelization_GetVoxelLocation2DFromWorldLocation2D) == 0x000018, "Wrong size on BatchedLevelVoxelization_GetVoxelLocation2DFromWorldLocation2D");
static_assert(offsetof(BatchedLevelVoxelization_GetVoxelLocation2DFromWorldLocation2D, WorldLocation2D) == 0x000000, "Member 'BatchedLevelVoxelization_GetVoxelLocation2DFromWorldLocation2D::WorldLocation2D' has a wrong offset!");
static_assert(offsetof(BatchedLevelVoxelization_GetVoxelLocation2DFromWorldLocation2D, LevelOffset2D) == 0x000008, "Member 'BatchedLevelVoxelization_GetVoxelLocation2DFromWorldLocation2D::LevelOffset2D' has a wrong offset!");
static_assert(offsetof(BatchedLevelVoxelization_GetVoxelLocation2DFromWorldLocation2D, ReturnValue) == 0x000010, "Member 'BatchedLevelVoxelization_GetVoxelLocation2DFromWorldLocation2D::ReturnValue' has a wrong offset!");

// Function LevelVoxelization.BatchedLevelVoxelization.GetVoxelLocationFromWorldLocation
// 0x0024 (0x0024 - 0x0000)
struct BatchedLevelVoxelization_GetVoxelLocationFromWorldLocation final
{
public:
	struct FVector                                WorldLocation;                                     // 0x0000(0x000C)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                LevelOffset;                                       // 0x000C(0x000C)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FIntVector                             ReturnValue;                                       // 0x0018(0x000C)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BatchedLevelVoxelization_GetVoxelLocationFromWorldLocation) == 0x000004, "Wrong alignment on BatchedLevelVoxelization_GetVoxelLocationFromWorldLocation");
static_assert(sizeof(BatchedLevelVoxelization_GetVoxelLocationFromWorldLocation) == 0x000024, "Wrong size on BatchedLevelVoxelization_GetVoxelLocationFromWorldLocation");
static_assert(offsetof(BatchedLevelVoxelization_GetVoxelLocationFromWorldLocation, WorldLocation) == 0x000000, "Member 'BatchedLevelVoxelization_GetVoxelLocationFromWorldLocation::WorldLocation' has a wrong offset!");
static_assert(offsetof(BatchedLevelVoxelization_GetVoxelLocationFromWorldLocation, LevelOffset) == 0x00000C, "Member 'BatchedLevelVoxelization_GetVoxelLocationFromWorldLocation::LevelOffset' has a wrong offset!");
static_assert(offsetof(BatchedLevelVoxelization_GetVoxelLocationFromWorldLocation, ReturnValue) == 0x000018, "Member 'BatchedLevelVoxelization_GetVoxelLocationFromWorldLocation::ReturnValue' has a wrong offset!");

// Function LevelVoxelization.BatchedLevelVoxelization.GetWorldCenterLocation2DFromVoxelLocation2D
// 0x0018 (0x0018 - 0x0000)
struct BatchedLevelVoxelization_GetWorldCenterLocation2DFromVoxelLocation2D final
{
public:
	struct FIntPoint                              VoxelLocation2D;                                   // 0x0000(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector2D                              LevelOffset2D;                                     // 0x0008(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector2D                              ReturnValue;                                       // 0x0010(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BatchedLevelVoxelization_GetWorldCenterLocation2DFromVoxelLocation2D) == 0x000004, "Wrong alignment on BatchedLevelVoxelization_GetWorldCenterLocation2DFromVoxelLocation2D");
static_assert(sizeof(BatchedLevelVoxelization_GetWorldCenterLocation2DFromVoxelLocation2D) == 0x000018, "Wrong size on BatchedLevelVoxelization_GetWorldCenterLocation2DFromVoxelLocation2D");
static_assert(offsetof(BatchedLevelVoxelization_GetWorldCenterLocation2DFromVoxelLocation2D, VoxelLocation2D) == 0x000000, "Member 'BatchedLevelVoxelization_GetWorldCenterLocation2DFromVoxelLocation2D::VoxelLocation2D' has a wrong offset!");
static_assert(offsetof(BatchedLevelVoxelization_GetWorldCenterLocation2DFromVoxelLocation2D, LevelOffset2D) == 0x000008, "Member 'BatchedLevelVoxelization_GetWorldCenterLocation2DFromVoxelLocation2D::LevelOffset2D' has a wrong offset!");
static_assert(offsetof(BatchedLevelVoxelization_GetWorldCenterLocation2DFromVoxelLocation2D, ReturnValue) == 0x000010, "Member 'BatchedLevelVoxelization_GetWorldCenterLocation2DFromVoxelLocation2D::ReturnValue' has a wrong offset!");

// Function LevelVoxelization.BatchedLevelVoxelization.GetWorldCenterLocationFromVoxelLocation
// 0x0024 (0x0024 - 0x0000)
struct BatchedLevelVoxelization_GetWorldCenterLocationFromVoxelLocation final
{
public:
	struct FIntVector                             VoxelLocation;                                     // 0x0000(0x000C)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                LevelOffset;                                       // 0x000C(0x000C)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                ReturnValue;                                       // 0x0018(0x000C)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BatchedLevelVoxelization_GetWorldCenterLocationFromVoxelLocation) == 0x000004, "Wrong alignment on BatchedLevelVoxelization_GetWorldCenterLocationFromVoxelLocation");
static_assert(sizeof(BatchedLevelVoxelization_GetWorldCenterLocationFromVoxelLocation) == 0x000024, "Wrong size on BatchedLevelVoxelization_GetWorldCenterLocationFromVoxelLocation");
static_assert(offsetof(BatchedLevelVoxelization_GetWorldCenterLocationFromVoxelLocation, VoxelLocation) == 0x000000, "Member 'BatchedLevelVoxelization_GetWorldCenterLocationFromVoxelLocation::VoxelLocation' has a wrong offset!");
static_assert(offsetof(BatchedLevelVoxelization_GetWorldCenterLocationFromVoxelLocation, LevelOffset) == 0x00000C, "Member 'BatchedLevelVoxelization_GetWorldCenterLocationFromVoxelLocation::LevelOffset' has a wrong offset!");
static_assert(offsetof(BatchedLevelVoxelization_GetWorldCenterLocationFromVoxelLocation, ReturnValue) == 0x000018, "Member 'BatchedLevelVoxelization_GetWorldCenterLocationFromVoxelLocation::ReturnValue' has a wrong offset!");

// Function LevelVoxelization.BatchedLevelVoxelization.GetWorldCornerLocationFromVoxelLocation
// 0x0024 (0x0024 - 0x0000)
struct BatchedLevelVoxelization_GetWorldCornerLocationFromVoxelLocation final
{
public:
	struct FIntVector                             VoxelLocation;                                     // 0x0000(0x000C)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                LevelOffset;                                       // 0x000C(0x000C)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                ReturnValue;                                       // 0x0018(0x000C)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BatchedLevelVoxelization_GetWorldCornerLocationFromVoxelLocation) == 0x000004, "Wrong alignment on BatchedLevelVoxelization_GetWorldCornerLocationFromVoxelLocation");
static_assert(sizeof(BatchedLevelVoxelization_GetWorldCornerLocationFromVoxelLocation) == 0x000024, "Wrong size on BatchedLevelVoxelization_GetWorldCornerLocationFromVoxelLocation");
static_assert(offsetof(BatchedLevelVoxelization_GetWorldCornerLocationFromVoxelLocation, VoxelLocation) == 0x000000, "Member 'BatchedLevelVoxelization_GetWorldCornerLocationFromVoxelLocation::VoxelLocation' has a wrong offset!");
static_assert(offsetof(BatchedLevelVoxelization_GetWorldCornerLocationFromVoxelLocation, LevelOffset) == 0x00000C, "Member 'BatchedLevelVoxelization_GetWorldCornerLocationFromVoxelLocation::LevelOffset' has a wrong offset!");
static_assert(offsetof(BatchedLevelVoxelization_GetWorldCornerLocationFromVoxelLocation, ReturnValue) == 0x000018, "Member 'BatchedLevelVoxelization_GetWorldCornerLocationFromVoxelLocation::ReturnValue' has a wrong offset!");

// Function LevelVoxelization.VoxelActorComponent.GetVoxelLevelManager
// 0x0008 (0x0008 - 0x0000)
struct VoxelActorComponent_GetVoxelLevelManager final
{
public:
	class UVoxelLevelManager*                     ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VoxelActorComponent_GetVoxelLevelManager) == 0x000008, "Wrong alignment on VoxelActorComponent_GetVoxelLevelManager");
static_assert(sizeof(VoxelActorComponent_GetVoxelLevelManager) == 0x000008, "Wrong size on VoxelActorComponent_GetVoxelLevelManager");
static_assert(offsetof(VoxelActorComponent_GetVoxelLevelManager, ReturnValue) == 0x000000, "Member 'VoxelActorComponent_GetVoxelLevelManager::ReturnValue' has a wrong offset!");

// Function LevelVoxelization.VoxelActorComponent.SetHalfExtent
// 0x000C (0x000C - 0x0000)
struct VoxelActorComponent_SetHalfExtent final
{
public:
	struct FVector                                InHalfExtent;                                      // 0x0000(0x000C)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VoxelActorComponent_SetHalfExtent) == 0x000004, "Wrong alignment on VoxelActorComponent_SetHalfExtent");
static_assert(sizeof(VoxelActorComponent_SetHalfExtent) == 0x00000C, "Wrong size on VoxelActorComponent_SetHalfExtent");
static_assert(offsetof(VoxelActorComponent_SetHalfExtent, InHalfExtent) == 0x000000, "Member 'VoxelActorComponent_SetHalfExtent::InHalfExtent' has a wrong offset!");

// Function LevelVoxelization.CullableVoxelActorComponent.SetRoomAssignmentType
// 0x0002 (0x0002 - 0x0000)
struct CullableVoxelActorComponent_SetRoomAssignmentType final
{
public:
	ECullableRoomAssignmentType                   NewAssignmentType;                                 // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0001(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CullableVoxelActorComponent_SetRoomAssignmentType) == 0x000001, "Wrong alignment on CullableVoxelActorComponent_SetRoomAssignmentType");
static_assert(sizeof(CullableVoxelActorComponent_SetRoomAssignmentType) == 0x000002, "Wrong size on CullableVoxelActorComponent_SetRoomAssignmentType");
static_assert(offsetof(CullableVoxelActorComponent_SetRoomAssignmentType, NewAssignmentType) == 0x000000, "Member 'CullableVoxelActorComponent_SetRoomAssignmentType::NewAssignmentType' has a wrong offset!");
static_assert(offsetof(CullableVoxelActorComponent_SetRoomAssignmentType, ReturnValue) == 0x000001, "Member 'CullableVoxelActorComponent_SetRoomAssignmentType::ReturnValue' has a wrong offset!");

// Function LevelVoxelization.CullableVoxelActorComponent.UpdateSunLightChannel
// 0x0001 (0x0001 - 0x0000)
struct CullableVoxelActorComponent_UpdateSunLightChannel final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CullableVoxelActorComponent_UpdateSunLightChannel) == 0x000001, "Wrong alignment on CullableVoxelActorComponent_UpdateSunLightChannel");
static_assert(sizeof(CullableVoxelActorComponent_UpdateSunLightChannel) == 0x000001, "Wrong size on CullableVoxelActorComponent_UpdateSunLightChannel");
static_assert(offsetof(CullableVoxelActorComponent_UpdateSunLightChannel, ReturnValue) == 0x000000, "Member 'CullableVoxelActorComponent_UpdateSunLightChannel::ReturnValue' has a wrong offset!");

// Function LevelVoxelization.CullableVoxelActorComponent.IsVisibleToCullingCamera
// 0x0001 (0x0001 - 0x0000)
struct CullableVoxelActorComponent_IsVisibleToCullingCamera final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CullableVoxelActorComponent_IsVisibleToCullingCamera) == 0x000001, "Wrong alignment on CullableVoxelActorComponent_IsVisibleToCullingCamera");
static_assert(sizeof(CullableVoxelActorComponent_IsVisibleToCullingCamera) == 0x000001, "Wrong size on CullableVoxelActorComponent_IsVisibleToCullingCamera");
static_assert(offsetof(CullableVoxelActorComponent_IsVisibleToCullingCamera, ReturnValue) == 0x000000, "Member 'CullableVoxelActorComponent_IsVisibleToCullingCamera::ReturnValue' has a wrong offset!");

// Function LevelVoxelization.CullableExteriorActorComponent.GetVoxelLevelManager
// 0x0008 (0x0008 - 0x0000)
struct CullableExteriorActorComponent_GetVoxelLevelManager final
{
public:
	class UVoxelLevelManager*                     ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CullableExteriorActorComponent_GetVoxelLevelManager) == 0x000008, "Wrong alignment on CullableExteriorActorComponent_GetVoxelLevelManager");
static_assert(sizeof(CullableExteriorActorComponent_GetVoxelLevelManager) == 0x000008, "Wrong size on CullableExteriorActorComponent_GetVoxelLevelManager");
static_assert(offsetof(CullableExteriorActorComponent_GetVoxelLevelManager, ReturnValue) == 0x000000, "Member 'CullableExteriorActorComponent_GetVoxelLevelManager::ReturnValue' has a wrong offset!");

// Function LevelVoxelization.ScannableVoxelActorComponent.GetVoxelLevelManager
// 0x0008 (0x0008 - 0x0000)
struct ScannableVoxelActorComponent_GetVoxelLevelManager final
{
public:
	class UVoxelLevelManager*                     ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ScannableVoxelActorComponent_GetVoxelLevelManager) == 0x000008, "Wrong alignment on ScannableVoxelActorComponent_GetVoxelLevelManager");
static_assert(sizeof(ScannableVoxelActorComponent_GetVoxelLevelManager) == 0x000008, "Wrong size on ScannableVoxelActorComponent_GetVoxelLevelManager");
static_assert(offsetof(ScannableVoxelActorComponent_GetVoxelLevelManager, ReturnValue) == 0x000000, "Member 'ScannableVoxelActorComponent_GetVoxelLevelManager::ReturnValue' has a wrong offset!");

// Function LevelVoxelization.ScannableVoxelActorComponent.SetBillboardIconMaterial
// 0x0008 (0x0008 - 0x0000)
struct ScannableVoxelActorComponent_SetBillboardIconMaterial final
{
public:
	class UMaterialInterface*                     NewMaterial;                                       // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ScannableVoxelActorComponent_SetBillboardIconMaterial) == 0x000008, "Wrong alignment on ScannableVoxelActorComponent_SetBillboardIconMaterial");
static_assert(sizeof(ScannableVoxelActorComponent_SetBillboardIconMaterial) == 0x000008, "Wrong size on ScannableVoxelActorComponent_SetBillboardIconMaterial");
static_assert(offsetof(ScannableVoxelActorComponent_SetBillboardIconMaterial, NewMaterial) == 0x000000, "Member 'ScannableVoxelActorComponent_SetBillboardIconMaterial::NewMaterial' has a wrong offset!");

// Function LevelVoxelization.ScannableVoxelActorComponent.SetBillboardIconShouldRotate
// 0x0001 (0x0001 - 0x0000)
struct ScannableVoxelActorComponent_SetBillboardIconShouldRotate final
{
public:
	bool                                          bShouldRotate;                                     // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ScannableVoxelActorComponent_SetBillboardIconShouldRotate) == 0x000001, "Wrong alignment on ScannableVoxelActorComponent_SetBillboardIconShouldRotate");
static_assert(sizeof(ScannableVoxelActorComponent_SetBillboardIconShouldRotate) == 0x000001, "Wrong size on ScannableVoxelActorComponent_SetBillboardIconShouldRotate");
static_assert(offsetof(ScannableVoxelActorComponent_SetBillboardIconShouldRotate, bShouldRotate) == 0x000000, "Member 'ScannableVoxelActorComponent_SetBillboardIconShouldRotate::bShouldRotate' has a wrong offset!");

// Function LevelVoxelization.ScannableVoxelActorComponent.SetInitialMeshMaterial
// 0x0008 (0x0008 - 0x0000)
struct ScannableVoxelActorComponent_SetInitialMeshMaterial final
{
public:
	class UMaterialInterface*                     NewMaterial;                                       // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ScannableVoxelActorComponent_SetInitialMeshMaterial) == 0x000008, "Wrong alignment on ScannableVoxelActorComponent_SetInitialMeshMaterial");
static_assert(sizeof(ScannableVoxelActorComponent_SetInitialMeshMaterial) == 0x000008, "Wrong size on ScannableVoxelActorComponent_SetInitialMeshMaterial");
static_assert(offsetof(ScannableVoxelActorComponent_SetInitialMeshMaterial, NewMaterial) == 0x000000, "Member 'ScannableVoxelActorComponent_SetInitialMeshMaterial::NewMaterial' has a wrong offset!");

// Function LevelVoxelization.ScannableVoxelActorComponent.SetInitialScannableColumnFlags
// 0x0003 (0x0003 - 0x0000)
struct ScannableVoxelActorComponent_SetInitialScannableColumnFlags final
{
public:
	bool                                          bInStaticColumnLocation;                           // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bInBlockScanner;                                   // 0x0001(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bInWallObject;                                     // 0x0002(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ScannableVoxelActorComponent_SetInitialScannableColumnFlags) == 0x000001, "Wrong alignment on ScannableVoxelActorComponent_SetInitialScannableColumnFlags");
static_assert(sizeof(ScannableVoxelActorComponent_SetInitialScannableColumnFlags) == 0x000003, "Wrong size on ScannableVoxelActorComponent_SetInitialScannableColumnFlags");
static_assert(offsetof(ScannableVoxelActorComponent_SetInitialScannableColumnFlags, bInStaticColumnLocation) == 0x000000, "Member 'ScannableVoxelActorComponent_SetInitialScannableColumnFlags::bInStaticColumnLocation' has a wrong offset!");
static_assert(offsetof(ScannableVoxelActorComponent_SetInitialScannableColumnFlags, bInBlockScanner) == 0x000001, "Member 'ScannableVoxelActorComponent_SetInitialScannableColumnFlags::bInBlockScanner' has a wrong offset!");
static_assert(offsetof(ScannableVoxelActorComponent_SetInitialScannableColumnFlags, bInWallObject) == 0x000002, "Member 'ScannableVoxelActorComponent_SetInitialScannableColumnFlags::bInWallObject' has a wrong offset!");

// Function LevelVoxelization.ScannableVoxelActorComponent.SetScannableEnabled
// 0x0001 (0x0001 - 0x0000)
struct ScannableVoxelActorComponent_SetScannableEnabled final
{
public:
	bool                                          bState;                                            // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ScannableVoxelActorComponent_SetScannableEnabled) == 0x000001, "Wrong alignment on ScannableVoxelActorComponent_SetScannableEnabled");
static_assert(sizeof(ScannableVoxelActorComponent_SetScannableEnabled) == 0x000001, "Wrong size on ScannableVoxelActorComponent_SetScannableEnabled");
static_assert(offsetof(ScannableVoxelActorComponent_SetScannableEnabled, bState) == 0x000000, "Member 'ScannableVoxelActorComponent_SetScannableEnabled::bState' has a wrong offset!");

// Function LevelVoxelization.ScannableVoxelActorComponent.SetScannableFilterTag
// 0x0008 (0x0008 - 0x0000)
struct ScannableVoxelActorComponent_SetScannableFilterTag final
{
public:
	class FName                                   NewTag;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ScannableVoxelActorComponent_SetScannableFilterTag) == 0x000004, "Wrong alignment on ScannableVoxelActorComponent_SetScannableFilterTag");
static_assert(sizeof(ScannableVoxelActorComponent_SetScannableFilterTag) == 0x000008, "Wrong size on ScannableVoxelActorComponent_SetScannableFilterTag");
static_assert(offsetof(ScannableVoxelActorComponent_SetScannableFilterTag, NewTag) == 0x000000, "Member 'ScannableVoxelActorComponent_SetScannableFilterTag::NewTag' has a wrong offset!");

// Function LevelVoxelization.ScannableVoxelActorComponent.SetScannableProceduralMeshData
// 0x0018 (0x0018 - 0x0000)
struct ScannableVoxelActorComponent_SetScannableProceduralMeshData final
{
public:
	struct FVector                                NewBoxHalfExtents;                                 // 0x0000(0x000C)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FColor                                 NewMeshColor;                                      // 0x000C(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UMaterialInterface*                     NewMaterial;                                       // 0x0010(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ScannableVoxelActorComponent_SetScannableProceduralMeshData) == 0x000008, "Wrong alignment on ScannableVoxelActorComponent_SetScannableProceduralMeshData");
static_assert(sizeof(ScannableVoxelActorComponent_SetScannableProceduralMeshData) == 0x000018, "Wrong size on ScannableVoxelActorComponent_SetScannableProceduralMeshData");
static_assert(offsetof(ScannableVoxelActorComponent_SetScannableProceduralMeshData, NewBoxHalfExtents) == 0x000000, "Member 'ScannableVoxelActorComponent_SetScannableProceduralMeshData::NewBoxHalfExtents' has a wrong offset!");
static_assert(offsetof(ScannableVoxelActorComponent_SetScannableProceduralMeshData, NewMeshColor) == 0x00000C, "Member 'ScannableVoxelActorComponent_SetScannableProceduralMeshData::NewMeshColor' has a wrong offset!");
static_assert(offsetof(ScannableVoxelActorComponent_SetScannableProceduralMeshData, NewMaterial) == 0x000010, "Member 'ScannableVoxelActorComponent_SetScannableProceduralMeshData::NewMaterial' has a wrong offset!");

// Function LevelVoxelization.ScannableVoxelActorComponent.ShowMeshComponents
// 0x0001 (0x0001 - 0x0000)
struct ScannableVoxelActorComponent_ShowMeshComponents final
{
public:
	bool                                          bShow;                                             // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ScannableVoxelActorComponent_ShowMeshComponents) == 0x000001, "Wrong alignment on ScannableVoxelActorComponent_ShowMeshComponents");
static_assert(sizeof(ScannableVoxelActorComponent_ShowMeshComponents) == 0x000001, "Wrong size on ScannableVoxelActorComponent_ShowMeshComponents");
static_assert(offsetof(ScannableVoxelActorComponent_ShowMeshComponents, bShow) == 0x000000, "Member 'ScannableVoxelActorComponent_ShowMeshComponents::bShow' has a wrong offset!");

// Function LevelVoxelization.ScannableVoxelActorComponent.ShowMeshComponentsInitially
// 0x0001 (0x0001 - 0x0000)
struct ScannableVoxelActorComponent_ShowMeshComponentsInitially final
{
public:
	bool                                          bShow;                                             // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ScannableVoxelActorComponent_ShowMeshComponentsInitially) == 0x000001, "Wrong alignment on ScannableVoxelActorComponent_ShowMeshComponentsInitially");
static_assert(sizeof(ScannableVoxelActorComponent_ShowMeshComponentsInitially) == 0x000001, "Wrong size on ScannableVoxelActorComponent_ShowMeshComponentsInitially");
static_assert(offsetof(ScannableVoxelActorComponent_ShowMeshComponentsInitially, bShow) == 0x000000, "Member 'ScannableVoxelActorComponent_ShowMeshComponentsInitially::bShow' has a wrong offset!");

// Function LevelVoxelization.VoxelAudioComponent.FadeIn
// 0x0010 (0x0010 - 0x0000)
struct VoxelAudioComponent_FadeIn final
{
public:
	float                                         FadeInDuration;                                    // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         FadeVolumeLevel;                                   // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         StartTime;                                         // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EAudioFaderCurve                              FadeCurve;                                         // 0x000C(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_D[0x3];                                        // 0x000D(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(VoxelAudioComponent_FadeIn) == 0x000004, "Wrong alignment on VoxelAudioComponent_FadeIn");
static_assert(sizeof(VoxelAudioComponent_FadeIn) == 0x000010, "Wrong size on VoxelAudioComponent_FadeIn");
static_assert(offsetof(VoxelAudioComponent_FadeIn, FadeInDuration) == 0x000000, "Member 'VoxelAudioComponent_FadeIn::FadeInDuration' has a wrong offset!");
static_assert(offsetof(VoxelAudioComponent_FadeIn, FadeVolumeLevel) == 0x000004, "Member 'VoxelAudioComponent_FadeIn::FadeVolumeLevel' has a wrong offset!");
static_assert(offsetof(VoxelAudioComponent_FadeIn, StartTime) == 0x000008, "Member 'VoxelAudioComponent_FadeIn::StartTime' has a wrong offset!");
static_assert(offsetof(VoxelAudioComponent_FadeIn, FadeCurve) == 0x00000C, "Member 'VoxelAudioComponent_FadeIn::FadeCurve' has a wrong offset!");

// Function LevelVoxelization.VoxelAudioComponent.FadeOut
// 0x0008 (0x0008 - 0x0000)
struct VoxelAudioComponent_FadeOut final
{
public:
	float                                         FadeOutDuration;                                   // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EAudioFaderCurve                              FadeCurve;                                         // 0x0004(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(VoxelAudioComponent_FadeOut) == 0x000004, "Wrong alignment on VoxelAudioComponent_FadeOut");
static_assert(sizeof(VoxelAudioComponent_FadeOut) == 0x000008, "Wrong size on VoxelAudioComponent_FadeOut");
static_assert(offsetof(VoxelAudioComponent_FadeOut, FadeOutDuration) == 0x000000, "Member 'VoxelAudioComponent_FadeOut::FadeOutDuration' has a wrong offset!");
static_assert(offsetof(VoxelAudioComponent_FadeOut, FadeCurve) == 0x000004, "Member 'VoxelAudioComponent_FadeOut::FadeCurve' has a wrong offset!");

// Function LevelVoxelization.VoxelAudioComponent.Play
// 0x0004 (0x0004 - 0x0000)
struct VoxelAudioComponent_Play final
{
public:
	float                                         StartTime;                                         // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VoxelAudioComponent_Play) == 0x000004, "Wrong alignment on VoxelAudioComponent_Play");
static_assert(sizeof(VoxelAudioComponent_Play) == 0x000004, "Wrong size on VoxelAudioComponent_Play");
static_assert(offsetof(VoxelAudioComponent_Play, StartTime) == 0x000000, "Member 'VoxelAudioComponent_Play::StartTime' has a wrong offset!");

// Function LevelVoxelization.VoxelAudioComponent.SetAutoDestroy
// 0x0001 (0x0001 - 0x0000)
struct VoxelAudioComponent_SetAutoDestroy final
{
public:
	bool                                          bNewAutoDestroy;                                   // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VoxelAudioComponent_SetAutoDestroy) == 0x000001, "Wrong alignment on VoxelAudioComponent_SetAutoDestroy");
static_assert(sizeof(VoxelAudioComponent_SetAutoDestroy) == 0x000001, "Wrong size on VoxelAudioComponent_SetAutoDestroy");
static_assert(offsetof(VoxelAudioComponent_SetAutoDestroy, bNewAutoDestroy) == 0x000000, "Member 'VoxelAudioComponent_SetAutoDestroy::bNewAutoDestroy' has a wrong offset!");

// Function LevelVoxelization.VoxelAudioComponent.SetBoolParameter
// 0x000C (0x000C - 0x0000)
struct VoxelAudioComponent_SetBoolParameter final
{
public:
	class FName                                   InName;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          InBool;                                            // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(VoxelAudioComponent_SetBoolParameter) == 0x000004, "Wrong alignment on VoxelAudioComponent_SetBoolParameter");
static_assert(sizeof(VoxelAudioComponent_SetBoolParameter) == 0x00000C, "Wrong size on VoxelAudioComponent_SetBoolParameter");
static_assert(offsetof(VoxelAudioComponent_SetBoolParameter, InName) == 0x000000, "Member 'VoxelAudioComponent_SetBoolParameter::InName' has a wrong offset!");
static_assert(offsetof(VoxelAudioComponent_SetBoolParameter, InBool) == 0x000008, "Member 'VoxelAudioComponent_SetBoolParameter::InBool' has a wrong offset!");

// Function LevelVoxelization.VoxelAudioComponent.SetDefaultOcclusion
// 0x0004 (0x0004 - 0x0000)
struct VoxelAudioComponent_SetDefaultOcclusion final
{
public:
	float                                         NewValue;                                          // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VoxelAudioComponent_SetDefaultOcclusion) == 0x000004, "Wrong alignment on VoxelAudioComponent_SetDefaultOcclusion");
static_assert(sizeof(VoxelAudioComponent_SetDefaultOcclusion) == 0x000004, "Wrong size on VoxelAudioComponent_SetDefaultOcclusion");
static_assert(offsetof(VoxelAudioComponent_SetDefaultOcclusion, NewValue) == 0x000000, "Member 'VoxelAudioComponent_SetDefaultOcclusion::NewValue' has a wrong offset!");

// Function LevelVoxelization.VoxelAudioComponent.SetFloatParameter
// 0x000C (0x000C - 0x0000)
struct VoxelAudioComponent_SetFloatParameter final
{
public:
	class FName                                   InName;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         InFloat;                                           // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VoxelAudioComponent_SetFloatParameter) == 0x000004, "Wrong alignment on VoxelAudioComponent_SetFloatParameter");
static_assert(sizeof(VoxelAudioComponent_SetFloatParameter) == 0x00000C, "Wrong size on VoxelAudioComponent_SetFloatParameter");
static_assert(offsetof(VoxelAudioComponent_SetFloatParameter, InName) == 0x000000, "Member 'VoxelAudioComponent_SetFloatParameter::InName' has a wrong offset!");
static_assert(offsetof(VoxelAudioComponent_SetFloatParameter, InFloat) == 0x000008, "Member 'VoxelAudioComponent_SetFloatParameter::InFloat' has a wrong offset!");

// Function LevelVoxelization.VoxelAudioComponent.SetIntegerParameter
// 0x000C (0x000C - 0x0000)
struct VoxelAudioComponent_SetIntegerParameter final
{
public:
	class FName                                   InName;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         InInt;                                             // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VoxelAudioComponent_SetIntegerParameter) == 0x000004, "Wrong alignment on VoxelAudioComponent_SetIntegerParameter");
static_assert(sizeof(VoxelAudioComponent_SetIntegerParameter) == 0x00000C, "Wrong size on VoxelAudioComponent_SetIntegerParameter");
static_assert(offsetof(VoxelAudioComponent_SetIntegerParameter, InName) == 0x000000, "Member 'VoxelAudioComponent_SetIntegerParameter::InName' has a wrong offset!");
static_assert(offsetof(VoxelAudioComponent_SetIntegerParameter, InInt) == 0x000008, "Member 'VoxelAudioComponent_SetIntegerParameter::InInt' has a wrong offset!");

// Function LevelVoxelization.VoxelAudioComponent.SetMaxVoiceCount
// 0x0004 (0x0004 - 0x0000)
struct VoxelAudioComponent_SetMaxVoiceCount final
{
public:
	int32                                         NewCount;                                          // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VoxelAudioComponent_SetMaxVoiceCount) == 0x000004, "Wrong alignment on VoxelAudioComponent_SetMaxVoiceCount");
static_assert(sizeof(VoxelAudioComponent_SetMaxVoiceCount) == 0x000004, "Wrong size on VoxelAudioComponent_SetMaxVoiceCount");
static_assert(offsetof(VoxelAudioComponent_SetMaxVoiceCount, NewCount) == 0x000000, "Member 'VoxelAudioComponent_SetMaxVoiceCount::NewCount' has a wrong offset!");

// Function LevelVoxelization.VoxelAudioComponent.SetPitchMultiplier
// 0x0004 (0x0004 - 0x0000)
struct VoxelAudioComponent_SetPitchMultiplier final
{
public:
	float                                         NewValue;                                          // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VoxelAudioComponent_SetPitchMultiplier) == 0x000004, "Wrong alignment on VoxelAudioComponent_SetPitchMultiplier");
static_assert(sizeof(VoxelAudioComponent_SetPitchMultiplier) == 0x000004, "Wrong size on VoxelAudioComponent_SetPitchMultiplier");
static_assert(offsetof(VoxelAudioComponent_SetPitchMultiplier, NewValue) == 0x000000, "Member 'VoxelAudioComponent_SetPitchMultiplier::NewValue' has a wrong offset!");

// Function LevelVoxelization.VoxelAudioComponent.SetSound
// 0x0008 (0x0008 - 0x0000)
struct VoxelAudioComponent_SetSound final
{
public:
	class USoundBase*                             NewSound;                                          // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VoxelAudioComponent_SetSound) == 0x000008, "Wrong alignment on VoxelAudioComponent_SetSound");
static_assert(sizeof(VoxelAudioComponent_SetSound) == 0x000008, "Wrong size on VoxelAudioComponent_SetSound");
static_assert(offsetof(VoxelAudioComponent_SetSound, NewSound) == 0x000000, "Member 'VoxelAudioComponent_SetSound::NewSound' has a wrong offset!");

// Function LevelVoxelization.VoxelAudioComponent.SetSoundAndFadeIn
// 0x0018 (0x0018 - 0x0000)
struct VoxelAudioComponent_SetSoundAndFadeIn final
{
public:
	class USoundBase*                             NewSound;                                          // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         FadeInDuration;                                    // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         FadeVolumeLevel;                                   // 0x000C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         StartTime;                                         // 0x0010(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EAudioFaderCurve                              FadeCurve;                                         // 0x0014(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_15[0x3];                                       // 0x0015(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(VoxelAudioComponent_SetSoundAndFadeIn) == 0x000008, "Wrong alignment on VoxelAudioComponent_SetSoundAndFadeIn");
static_assert(sizeof(VoxelAudioComponent_SetSoundAndFadeIn) == 0x000018, "Wrong size on VoxelAudioComponent_SetSoundAndFadeIn");
static_assert(offsetof(VoxelAudioComponent_SetSoundAndFadeIn, NewSound) == 0x000000, "Member 'VoxelAudioComponent_SetSoundAndFadeIn::NewSound' has a wrong offset!");
static_assert(offsetof(VoxelAudioComponent_SetSoundAndFadeIn, FadeInDuration) == 0x000008, "Member 'VoxelAudioComponent_SetSoundAndFadeIn::FadeInDuration' has a wrong offset!");
static_assert(offsetof(VoxelAudioComponent_SetSoundAndFadeIn, FadeVolumeLevel) == 0x00000C, "Member 'VoxelAudioComponent_SetSoundAndFadeIn::FadeVolumeLevel' has a wrong offset!");
static_assert(offsetof(VoxelAudioComponent_SetSoundAndFadeIn, StartTime) == 0x000010, "Member 'VoxelAudioComponent_SetSoundAndFadeIn::StartTime' has a wrong offset!");
static_assert(offsetof(VoxelAudioComponent_SetSoundAndFadeIn, FadeCurve) == 0x000014, "Member 'VoxelAudioComponent_SetSoundAndFadeIn::FadeCurve' has a wrong offset!");

// Function LevelVoxelization.VoxelAudioComponent.SetSoundAndPlay
// 0x0010 (0x0010 - 0x0000)
struct VoxelAudioComponent_SetSoundAndPlay final
{
public:
	class USoundBase*                             NewSound;                                          // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         StartTime;                                         // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(VoxelAudioComponent_SetSoundAndPlay) == 0x000008, "Wrong alignment on VoxelAudioComponent_SetSoundAndPlay");
static_assert(sizeof(VoxelAudioComponent_SetSoundAndPlay) == 0x000010, "Wrong size on VoxelAudioComponent_SetSoundAndPlay");
static_assert(offsetof(VoxelAudioComponent_SetSoundAndPlay, NewSound) == 0x000000, "Member 'VoxelAudioComponent_SetSoundAndPlay::NewSound' has a wrong offset!");
static_assert(offsetof(VoxelAudioComponent_SetSoundAndPlay, StartTime) == 0x000008, "Member 'VoxelAudioComponent_SetSoundAndPlay::StartTime' has a wrong offset!");

// Function LevelVoxelization.VoxelAudioComponent.SetVolumeMultiplier
// 0x0004 (0x0004 - 0x0000)
struct VoxelAudioComponent_SetVolumeMultiplier final
{
public:
	float                                         NewValue;                                          // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VoxelAudioComponent_SetVolumeMultiplier) == 0x000004, "Wrong alignment on VoxelAudioComponent_SetVolumeMultiplier");
static_assert(sizeof(VoxelAudioComponent_SetVolumeMultiplier) == 0x000004, "Wrong size on VoxelAudioComponent_SetVolumeMultiplier");
static_assert(offsetof(VoxelAudioComponent_SetVolumeMultiplier, NewValue) == 0x000000, "Member 'VoxelAudioComponent_SetVolumeMultiplier::NewValue' has a wrong offset!");

// Function LevelVoxelization.VoxelAudioComponent.GetSoundElapsedTime
// 0x0004 (0x0004 - 0x0000)
struct VoxelAudioComponent_GetSoundElapsedTime final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VoxelAudioComponent_GetSoundElapsedTime) == 0x000004, "Wrong alignment on VoxelAudioComponent_GetSoundElapsedTime");
static_assert(sizeof(VoxelAudioComponent_GetSoundElapsedTime) == 0x000004, "Wrong size on VoxelAudioComponent_GetSoundElapsedTime");
static_assert(offsetof(VoxelAudioComponent_GetSoundElapsedTime, ReturnValue) == 0x000000, "Member 'VoxelAudioComponent_GetSoundElapsedTime::ReturnValue' has a wrong offset!");

// Function LevelVoxelization.VoxelAudioComponent.GetSoundRange
// 0x0004 (0x0004 - 0x0000)
struct VoxelAudioComponent_GetSoundRange final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VoxelAudioComponent_GetSoundRange) == 0x000004, "Wrong alignment on VoxelAudioComponent_GetSoundRange");
static_assert(sizeof(VoxelAudioComponent_GetSoundRange) == 0x000004, "Wrong size on VoxelAudioComponent_GetSoundRange");
static_assert(offsetof(VoxelAudioComponent_GetSoundRange, ReturnValue) == 0x000000, "Member 'VoxelAudioComponent_GetSoundRange::ReturnValue' has a wrong offset!");

// Function LevelVoxelization.VoxelAudioComponent.IsSoundPlaying
// 0x0001 (0x0001 - 0x0000)
struct VoxelAudioComponent_IsSoundPlaying final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VoxelAudioComponent_IsSoundPlaying) == 0x000001, "Wrong alignment on VoxelAudioComponent_IsSoundPlaying");
static_assert(sizeof(VoxelAudioComponent_IsSoundPlaying) == 0x000001, "Wrong size on VoxelAudioComponent_IsSoundPlaying");
static_assert(offsetof(VoxelAudioComponent_IsSoundPlaying, ReturnValue) == 0x000000, "Member 'VoxelAudioComponent_IsSoundPlaying::ReturnValue' has a wrong offset!");

// Function LevelVoxelization.VoxelCullableManager.AddHiddenEffectsComponents
// 0x0010 (0x0010 - 0x0000)
struct VoxelCullableManager_AddHiddenEffectsComponents final
{
public:
	TArray<class UFXSystemComponent*>             EffectsComponents;                                 // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, ContainsInstancedReference, NativeAccessSpecifierPublic)
};
static_assert(alignof(VoxelCullableManager_AddHiddenEffectsComponents) == 0x000008, "Wrong alignment on VoxelCullableManager_AddHiddenEffectsComponents");
static_assert(sizeof(VoxelCullableManager_AddHiddenEffectsComponents) == 0x000010, "Wrong size on VoxelCullableManager_AddHiddenEffectsComponents");
static_assert(offsetof(VoxelCullableManager_AddHiddenEffectsComponents, EffectsComponents) == 0x000000, "Member 'VoxelCullableManager_AddHiddenEffectsComponents::EffectsComponents' has a wrong offset!");

// Function LevelVoxelization.VoxelCullableManager.AddHiddenLightComponents
// 0x0010 (0x0010 - 0x0000)
struct VoxelCullableManager_AddHiddenLightComponents final
{
public:
	TArray<class ULocalLightComponent*>           LightComponents;                                   // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, ContainsInstancedReference, NativeAccessSpecifierPublic)
};
static_assert(alignof(VoxelCullableManager_AddHiddenLightComponents) == 0x000008, "Wrong alignment on VoxelCullableManager_AddHiddenLightComponents");
static_assert(sizeof(VoxelCullableManager_AddHiddenLightComponents) == 0x000010, "Wrong size on VoxelCullableManager_AddHiddenLightComponents");
static_assert(offsetof(VoxelCullableManager_AddHiddenLightComponents, LightComponents) == 0x000000, "Member 'VoxelCullableManager_AddHiddenLightComponents::LightComponents' has a wrong offset!");

// Function LevelVoxelization.VoxelCullableManager.RemoveHiddenEffectsComponents
// 0x0010 (0x0010 - 0x0000)
struct VoxelCullableManager_RemoveHiddenEffectsComponents final
{
public:
	TArray<class UFXSystemComponent*>             EffectsComponents;                                 // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, ContainsInstancedReference, NativeAccessSpecifierPublic)
};
static_assert(alignof(VoxelCullableManager_RemoveHiddenEffectsComponents) == 0x000008, "Wrong alignment on VoxelCullableManager_RemoveHiddenEffectsComponents");
static_assert(sizeof(VoxelCullableManager_RemoveHiddenEffectsComponents) == 0x000010, "Wrong size on VoxelCullableManager_RemoveHiddenEffectsComponents");
static_assert(offsetof(VoxelCullableManager_RemoveHiddenEffectsComponents, EffectsComponents) == 0x000000, "Member 'VoxelCullableManager_RemoveHiddenEffectsComponents::EffectsComponents' has a wrong offset!");

// Function LevelVoxelization.VoxelCullableManager.RemoveHiddenLightComponents
// 0x0010 (0x0010 - 0x0000)
struct VoxelCullableManager_RemoveHiddenLightComponents final
{
public:
	TArray<class ULocalLightComponent*>           LightComponents;                                   // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, ContainsInstancedReference, NativeAccessSpecifierPublic)
};
static_assert(alignof(VoxelCullableManager_RemoveHiddenLightComponents) == 0x000008, "Wrong alignment on VoxelCullableManager_RemoveHiddenLightComponents");
static_assert(sizeof(VoxelCullableManager_RemoveHiddenLightComponents) == 0x000010, "Wrong size on VoxelCullableManager_RemoveHiddenLightComponents");
static_assert(offsetof(VoxelCullableManager_RemoveHiddenLightComponents, LightComponents) == 0x000000, "Member 'VoxelCullableManager_RemoveHiddenLightComponents::LightComponents' has a wrong offset!");

// Function LevelVoxelization.VoxelCullableManager.GetCullableActorsInAudibleRangeToPoint
// 0x0070 (0x0070 - 0x0000)
struct VoxelCullableManager_GetCullableActorsInAudibleRangeToPoint final
{
public:
	struct FVector                                SoundLocation;                                     // 0x0000(0x000C)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         SoundRange;                                        // 0x000C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<TSubclassOf<class AActor>>             FilterByClasses;                                   // 0x0010(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, UObjectWrapper, NativeAccessSpecifierPublic)
	TMap<class AActor*, struct FVector2D>         ReturnValue;                                       // 0x0020(0x0050)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(VoxelCullableManager_GetCullableActorsInAudibleRangeToPoint) == 0x000008, "Wrong alignment on VoxelCullableManager_GetCullableActorsInAudibleRangeToPoint");
static_assert(sizeof(VoxelCullableManager_GetCullableActorsInAudibleRangeToPoint) == 0x000070, "Wrong size on VoxelCullableManager_GetCullableActorsInAudibleRangeToPoint");
static_assert(offsetof(VoxelCullableManager_GetCullableActorsInAudibleRangeToPoint, SoundLocation) == 0x000000, "Member 'VoxelCullableManager_GetCullableActorsInAudibleRangeToPoint::SoundLocation' has a wrong offset!");
static_assert(offsetof(VoxelCullableManager_GetCullableActorsInAudibleRangeToPoint, SoundRange) == 0x00000C, "Member 'VoxelCullableManager_GetCullableActorsInAudibleRangeToPoint::SoundRange' has a wrong offset!");
static_assert(offsetof(VoxelCullableManager_GetCullableActorsInAudibleRangeToPoint, FilterByClasses) == 0x000010, "Member 'VoxelCullableManager_GetCullableActorsInAudibleRangeToPoint::FilterByClasses' has a wrong offset!");
static_assert(offsetof(VoxelCullableManager_GetCullableActorsInAudibleRangeToPoint, ReturnValue) == 0x000020, "Member 'VoxelCullableManager_GetCullableActorsInAudibleRangeToPoint::ReturnValue' has a wrong offset!");

// Function LevelVoxelization.VoxelCullableManager.GetRoomAudibilityBetweenPoints
// 0x0028 (0x0028 - 0x0000)
struct VoxelCullableManager_GetRoomAudibilityBetweenPoints final
{
public:
	struct FVector                                SourceLocation;                                    // 0x0000(0x000C)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                TargetLocation;                                    // 0x000C(0x000C)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         SoundRange;                                        // 0x0018(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         OutObstruction;                                    // 0x001C(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         OutOcclusion;                                      // 0x0020(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0024(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_25[0x3];                                       // 0x0025(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(VoxelCullableManager_GetRoomAudibilityBetweenPoints) == 0x000004, "Wrong alignment on VoxelCullableManager_GetRoomAudibilityBetweenPoints");
static_assert(sizeof(VoxelCullableManager_GetRoomAudibilityBetweenPoints) == 0x000028, "Wrong size on VoxelCullableManager_GetRoomAudibilityBetweenPoints");
static_assert(offsetof(VoxelCullableManager_GetRoomAudibilityBetweenPoints, SourceLocation) == 0x000000, "Member 'VoxelCullableManager_GetRoomAudibilityBetweenPoints::SourceLocation' has a wrong offset!");
static_assert(offsetof(VoxelCullableManager_GetRoomAudibilityBetweenPoints, TargetLocation) == 0x00000C, "Member 'VoxelCullableManager_GetRoomAudibilityBetweenPoints::TargetLocation' has a wrong offset!");
static_assert(offsetof(VoxelCullableManager_GetRoomAudibilityBetweenPoints, SoundRange) == 0x000018, "Member 'VoxelCullableManager_GetRoomAudibilityBetweenPoints::SoundRange' has a wrong offset!");
static_assert(offsetof(VoxelCullableManager_GetRoomAudibilityBetweenPoints, OutObstruction) == 0x00001C, "Member 'VoxelCullableManager_GetRoomAudibilityBetweenPoints::OutObstruction' has a wrong offset!");
static_assert(offsetof(VoxelCullableManager_GetRoomAudibilityBetweenPoints, OutOcclusion) == 0x000020, "Member 'VoxelCullableManager_GetRoomAudibilityBetweenPoints::OutOcclusion' has a wrong offset!");
static_assert(offsetof(VoxelCullableManager_GetRoomAudibilityBetweenPoints, ReturnValue) == 0x000024, "Member 'VoxelCullableManager_GetRoomAudibilityBetweenPoints::ReturnValue' has a wrong offset!");

// Function LevelVoxelization.VoxelCullableManager.GetRoomVisibilityBetweenPoints
// 0x001C (0x001C - 0x0000)
struct VoxelCullableManager_GetRoomVisibilityBetweenPoints final
{
public:
	struct FVector                                SourceLocation;                                    // 0x0000(0x000C)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                TargetLocation;                                    // 0x000C(0x000C)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0018(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_19[0x3];                                       // 0x0019(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(VoxelCullableManager_GetRoomVisibilityBetweenPoints) == 0x000004, "Wrong alignment on VoxelCullableManager_GetRoomVisibilityBetweenPoints");
static_assert(sizeof(VoxelCullableManager_GetRoomVisibilityBetweenPoints) == 0x00001C, "Wrong size on VoxelCullableManager_GetRoomVisibilityBetweenPoints");
static_assert(offsetof(VoxelCullableManager_GetRoomVisibilityBetweenPoints, SourceLocation) == 0x000000, "Member 'VoxelCullableManager_GetRoomVisibilityBetweenPoints::SourceLocation' has a wrong offset!");
static_assert(offsetof(VoxelCullableManager_GetRoomVisibilityBetweenPoints, TargetLocation) == 0x00000C, "Member 'VoxelCullableManager_GetRoomVisibilityBetweenPoints::TargetLocation' has a wrong offset!");
static_assert(offsetof(VoxelCullableManager_GetRoomVisibilityBetweenPoints, ReturnValue) == 0x000018, "Member 'VoxelCullableManager_GetRoomVisibilityBetweenPoints::ReturnValue' has a wrong offset!");

// Function LevelVoxelization.VoxelCullableManager.TraceVoxelVisibilityBetweenPoints
// 0x001C (0x001C - 0x0000)
struct VoxelCullableManager_TraceVoxelVisibilityBetweenPoints final
{
public:
	struct FVector                                SourceLocation;                                    // 0x0000(0x000C)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                TargetLocation;                                    // 0x000C(0x000C)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0018(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_19[0x3];                                       // 0x0019(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(VoxelCullableManager_TraceVoxelVisibilityBetweenPoints) == 0x000004, "Wrong alignment on VoxelCullableManager_TraceVoxelVisibilityBetweenPoints");
static_assert(sizeof(VoxelCullableManager_TraceVoxelVisibilityBetweenPoints) == 0x00001C, "Wrong size on VoxelCullableManager_TraceVoxelVisibilityBetweenPoints");
static_assert(offsetof(VoxelCullableManager_TraceVoxelVisibilityBetweenPoints, SourceLocation) == 0x000000, "Member 'VoxelCullableManager_TraceVoxelVisibilityBetweenPoints::SourceLocation' has a wrong offset!");
static_assert(offsetof(VoxelCullableManager_TraceVoxelVisibilityBetweenPoints, TargetLocation) == 0x00000C, "Member 'VoxelCullableManager_TraceVoxelVisibilityBetweenPoints::TargetLocation' has a wrong offset!");
static_assert(offsetof(VoxelCullableManager_TraceVoxelVisibilityBetweenPoints, ReturnValue) == 0x000018, "Member 'VoxelCullableManager_TraceVoxelVisibilityBetweenPoints::ReturnValue' has a wrong offset!");

// Function LevelVoxelization.VoxelCullingComponent.SetRoomProxyLocation
// 0x000C (0x000C - 0x0000)
struct VoxelCullingComponent_SetRoomProxyLocation final
{
public:
	struct FVector                                WorldLocation;                                     // 0x0000(0x000C)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VoxelCullingComponent_SetRoomProxyLocation) == 0x000004, "Wrong alignment on VoxelCullingComponent_SetRoomProxyLocation");
static_assert(sizeof(VoxelCullingComponent_SetRoomProxyLocation) == 0x00000C, "Wrong size on VoxelCullingComponent_SetRoomProxyLocation");
static_assert(offsetof(VoxelCullingComponent_SetRoomProxyLocation, WorldLocation) == 0x000000, "Member 'VoxelCullingComponent_SetRoomProxyLocation::WorldLocation' has a wrong offset!");

// Function LevelVoxelization.VoxelCullingComponent.GetFirstCullableActorInLineOfSight
// 0x0030 (0x0030 - 0x0000)
struct VoxelCullingComponent_GetFirstCullableActorInLineOfSight final
{
public:
	float                                         TraceRadius;                                       // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         TraceDistance;                                     // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<TSubclassOf<class AActor>>             FilterByClasses;                                   // 0x0008(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, UObjectWrapper, NativeAccessSpecifierPublic)
	struct FVector                                OutTraceHitLocation;                               // 0x0018(0x000C)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_24[0x4];                                       // 0x0024(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class AActor*                                 ReturnValue;                                       // 0x0028(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VoxelCullingComponent_GetFirstCullableActorInLineOfSight) == 0x000008, "Wrong alignment on VoxelCullingComponent_GetFirstCullableActorInLineOfSight");
static_assert(sizeof(VoxelCullingComponent_GetFirstCullableActorInLineOfSight) == 0x000030, "Wrong size on VoxelCullingComponent_GetFirstCullableActorInLineOfSight");
static_assert(offsetof(VoxelCullingComponent_GetFirstCullableActorInLineOfSight, TraceRadius) == 0x000000, "Member 'VoxelCullingComponent_GetFirstCullableActorInLineOfSight::TraceRadius' has a wrong offset!");
static_assert(offsetof(VoxelCullingComponent_GetFirstCullableActorInLineOfSight, TraceDistance) == 0x000004, "Member 'VoxelCullingComponent_GetFirstCullableActorInLineOfSight::TraceDistance' has a wrong offset!");
static_assert(offsetof(VoxelCullingComponent_GetFirstCullableActorInLineOfSight, FilterByClasses) == 0x000008, "Member 'VoxelCullingComponent_GetFirstCullableActorInLineOfSight::FilterByClasses' has a wrong offset!");
static_assert(offsetof(VoxelCullingComponent_GetFirstCullableActorInLineOfSight, OutTraceHitLocation) == 0x000018, "Member 'VoxelCullingComponent_GetFirstCullableActorInLineOfSight::OutTraceHitLocation' has a wrong offset!");
static_assert(offsetof(VoxelCullingComponent_GetFirstCullableActorInLineOfSight, ReturnValue) == 0x000028, "Member 'VoxelCullingComponent_GetFirstCullableActorInLineOfSight::ReturnValue' has a wrong offset!");

// Function LevelVoxelization.VoxelCullingComponent.GetRoomPerceptibilityAtWorldLocation
// 0x0010 (0x0010 - 0x0000)
struct VoxelCullingComponent_GetRoomPerceptibilityAtWorldLocation final
{
public:
	struct FVector                                WorldLocation;                                     // 0x0000(0x000C)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bOutIsVisible;                                     // 0x000C(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bOutIsAudible;                                     // 0x000D(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_E[0x2];                                        // 0x000E(0x0002)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(VoxelCullingComponent_GetRoomPerceptibilityAtWorldLocation) == 0x000004, "Wrong alignment on VoxelCullingComponent_GetRoomPerceptibilityAtWorldLocation");
static_assert(sizeof(VoxelCullingComponent_GetRoomPerceptibilityAtWorldLocation) == 0x000010, "Wrong size on VoxelCullingComponent_GetRoomPerceptibilityAtWorldLocation");
static_assert(offsetof(VoxelCullingComponent_GetRoomPerceptibilityAtWorldLocation, WorldLocation) == 0x000000, "Member 'VoxelCullingComponent_GetRoomPerceptibilityAtWorldLocation::WorldLocation' has a wrong offset!");
static_assert(offsetof(VoxelCullingComponent_GetRoomPerceptibilityAtWorldLocation, bOutIsVisible) == 0x00000C, "Member 'VoxelCullingComponent_GetRoomPerceptibilityAtWorldLocation::bOutIsVisible' has a wrong offset!");
static_assert(offsetof(VoxelCullingComponent_GetRoomPerceptibilityAtWorldLocation, bOutIsAudible) == 0x00000D, "Member 'VoxelCullingComponent_GetRoomPerceptibilityAtWorldLocation::bOutIsAudible' has a wrong offset!");

// Function LevelVoxelization.VoxelCullingComponent.IsAnyRoomPerceptibleBetweenWorldPoints
// 0x001C (0x001C - 0x0000)
struct VoxelCullingComponent_IsAnyRoomPerceptibleBetweenWorldPoints final
{
public:
	struct FVector                                SourceLocation;                                    // 0x0000(0x000C)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                TargetLocation;                                    // 0x000C(0x000C)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bQueryVisible;                                     // 0x0018(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bQueryAudible;                                     // 0x0019(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x001A(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1B[0x1];                                       // 0x001B(0x0001)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(VoxelCullingComponent_IsAnyRoomPerceptibleBetweenWorldPoints) == 0x000004, "Wrong alignment on VoxelCullingComponent_IsAnyRoomPerceptibleBetweenWorldPoints");
static_assert(sizeof(VoxelCullingComponent_IsAnyRoomPerceptibleBetweenWorldPoints) == 0x00001C, "Wrong size on VoxelCullingComponent_IsAnyRoomPerceptibleBetweenWorldPoints");
static_assert(offsetof(VoxelCullingComponent_IsAnyRoomPerceptibleBetweenWorldPoints, SourceLocation) == 0x000000, "Member 'VoxelCullingComponent_IsAnyRoomPerceptibleBetweenWorldPoints::SourceLocation' has a wrong offset!");
static_assert(offsetof(VoxelCullingComponent_IsAnyRoomPerceptibleBetweenWorldPoints, TargetLocation) == 0x00000C, "Member 'VoxelCullingComponent_IsAnyRoomPerceptibleBetweenWorldPoints::TargetLocation' has a wrong offset!");
static_assert(offsetof(VoxelCullingComponent_IsAnyRoomPerceptibleBetweenWorldPoints, bQueryVisible) == 0x000018, "Member 'VoxelCullingComponent_IsAnyRoomPerceptibleBetweenWorldPoints::bQueryVisible' has a wrong offset!");
static_assert(offsetof(VoxelCullingComponent_IsAnyRoomPerceptibleBetweenWorldPoints, bQueryAudible) == 0x000019, "Member 'VoxelCullingComponent_IsAnyRoomPerceptibleBetweenWorldPoints::bQueryAudible' has a wrong offset!");
static_assert(offsetof(VoxelCullingComponent_IsAnyRoomPerceptibleBetweenWorldPoints, ReturnValue) == 0x00001A, "Member 'VoxelCullingComponent_IsAnyRoomPerceptibleBetweenWorldPoints::ReturnValue' has a wrong offset!");

// Function LevelVoxelization.VoxelLevelFunctionLibrary.SpawnVoxelSoundAtLocation
// 0x0030 (0x0030 - 0x0000)
struct VoxelLevelFunctionLibrary_SpawnVoxelSoundAtLocation final
{
public:
	class UVoxelLevelManager*                     LevelManager;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class USoundBase*                             Sound;                                             // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                WorldLocation;                                     // 0x0010(0x000C)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         VolumeMultiplier;                                  // 0x001C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         PitchMultiplier;                                   // 0x0020(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         MaxVoiceCount;                                     // 0x0024(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UVoxelAudioComponent*                   ReturnValue;                                       // 0x0028(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VoxelLevelFunctionLibrary_SpawnVoxelSoundAtLocation) == 0x000008, "Wrong alignment on VoxelLevelFunctionLibrary_SpawnVoxelSoundAtLocation");
static_assert(sizeof(VoxelLevelFunctionLibrary_SpawnVoxelSoundAtLocation) == 0x000030, "Wrong size on VoxelLevelFunctionLibrary_SpawnVoxelSoundAtLocation");
static_assert(offsetof(VoxelLevelFunctionLibrary_SpawnVoxelSoundAtLocation, LevelManager) == 0x000000, "Member 'VoxelLevelFunctionLibrary_SpawnVoxelSoundAtLocation::LevelManager' has a wrong offset!");
static_assert(offsetof(VoxelLevelFunctionLibrary_SpawnVoxelSoundAtLocation, Sound) == 0x000008, "Member 'VoxelLevelFunctionLibrary_SpawnVoxelSoundAtLocation::Sound' has a wrong offset!");
static_assert(offsetof(VoxelLevelFunctionLibrary_SpawnVoxelSoundAtLocation, WorldLocation) == 0x000010, "Member 'VoxelLevelFunctionLibrary_SpawnVoxelSoundAtLocation::WorldLocation' has a wrong offset!");
static_assert(offsetof(VoxelLevelFunctionLibrary_SpawnVoxelSoundAtLocation, VolumeMultiplier) == 0x00001C, "Member 'VoxelLevelFunctionLibrary_SpawnVoxelSoundAtLocation::VolumeMultiplier' has a wrong offset!");
static_assert(offsetof(VoxelLevelFunctionLibrary_SpawnVoxelSoundAtLocation, PitchMultiplier) == 0x000020, "Member 'VoxelLevelFunctionLibrary_SpawnVoxelSoundAtLocation::PitchMultiplier' has a wrong offset!");
static_assert(offsetof(VoxelLevelFunctionLibrary_SpawnVoxelSoundAtLocation, MaxVoiceCount) == 0x000024, "Member 'VoxelLevelFunctionLibrary_SpawnVoxelSoundAtLocation::MaxVoiceCount' has a wrong offset!");
static_assert(offsetof(VoxelLevelFunctionLibrary_SpawnVoxelSoundAtLocation, ReturnValue) == 0x000028, "Member 'VoxelLevelFunctionLibrary_SpawnVoxelSoundAtLocation::ReturnValue' has a wrong offset!");

// Function LevelVoxelization.VoxelLevelFunctionLibrary.SpawnVoxelSoundAtLocationFromClass
// 0x0038 (0x0038 - 0x0000)
struct VoxelLevelFunctionLibrary_SpawnVoxelSoundAtLocationFromClass final
{
public:
	const class UObject*                          WorldContextObject;                                // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSubclassOf<class UVoxelAudioComponent>       ComponentClass;                                    // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class USoundBase*                             Sound;                                             // 0x0010(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                WorldLocation;                                     // 0x0018(0x000C)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         VolumeMultiplier;                                  // 0x0024(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         PitchMultiplier;                                   // 0x0028(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         MaxVoiceCount;                                     // 0x002C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UVoxelAudioComponent*                   ReturnValue;                                       // 0x0030(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VoxelLevelFunctionLibrary_SpawnVoxelSoundAtLocationFromClass) == 0x000008, "Wrong alignment on VoxelLevelFunctionLibrary_SpawnVoxelSoundAtLocationFromClass");
static_assert(sizeof(VoxelLevelFunctionLibrary_SpawnVoxelSoundAtLocationFromClass) == 0x000038, "Wrong size on VoxelLevelFunctionLibrary_SpawnVoxelSoundAtLocationFromClass");
static_assert(offsetof(VoxelLevelFunctionLibrary_SpawnVoxelSoundAtLocationFromClass, WorldContextObject) == 0x000000, "Member 'VoxelLevelFunctionLibrary_SpawnVoxelSoundAtLocationFromClass::WorldContextObject' has a wrong offset!");
static_assert(offsetof(VoxelLevelFunctionLibrary_SpawnVoxelSoundAtLocationFromClass, ComponentClass) == 0x000008, "Member 'VoxelLevelFunctionLibrary_SpawnVoxelSoundAtLocationFromClass::ComponentClass' has a wrong offset!");
static_assert(offsetof(VoxelLevelFunctionLibrary_SpawnVoxelSoundAtLocationFromClass, Sound) == 0x000010, "Member 'VoxelLevelFunctionLibrary_SpawnVoxelSoundAtLocationFromClass::Sound' has a wrong offset!");
static_assert(offsetof(VoxelLevelFunctionLibrary_SpawnVoxelSoundAtLocationFromClass, WorldLocation) == 0x000018, "Member 'VoxelLevelFunctionLibrary_SpawnVoxelSoundAtLocationFromClass::WorldLocation' has a wrong offset!");
static_assert(offsetof(VoxelLevelFunctionLibrary_SpawnVoxelSoundAtLocationFromClass, VolumeMultiplier) == 0x000024, "Member 'VoxelLevelFunctionLibrary_SpawnVoxelSoundAtLocationFromClass::VolumeMultiplier' has a wrong offset!");
static_assert(offsetof(VoxelLevelFunctionLibrary_SpawnVoxelSoundAtLocationFromClass, PitchMultiplier) == 0x000028, "Member 'VoxelLevelFunctionLibrary_SpawnVoxelSoundAtLocationFromClass::PitchMultiplier' has a wrong offset!");
static_assert(offsetof(VoxelLevelFunctionLibrary_SpawnVoxelSoundAtLocationFromClass, MaxVoiceCount) == 0x00002C, "Member 'VoxelLevelFunctionLibrary_SpawnVoxelSoundAtLocationFromClass::MaxVoiceCount' has a wrong offset!");
static_assert(offsetof(VoxelLevelFunctionLibrary_SpawnVoxelSoundAtLocationFromClass, ReturnValue) == 0x000030, "Member 'VoxelLevelFunctionLibrary_SpawnVoxelSoundAtLocationFromClass::ReturnValue' has a wrong offset!");

// Function LevelVoxelization.VoxelLevelFunctionLibrary.SpawnVoxelSoundAttached
// 0x0050 (0x0050 - 0x0000)
struct VoxelLevelFunctionLibrary_SpawnVoxelSoundAttached final
{
public:
	class UVoxelLevelManager*                     LevelManager;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class USoundBase*                             Sound;                                             // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class USceneComponent*                        AttachToComponent;                                 // 0x0010(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   AttachPointName;                                   // 0x0018(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                RelativeLocation;                                  // 0x0020(0x000C)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FRotator                               RelativeRotation;                                  // 0x002C(0x000C)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, NativeAccessSpecifierPublic)
	float                                         VolumeMultiplier;                                  // 0x0038(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         PitchMultiplier;                                   // 0x003C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         MaxVoiceCount;                                     // 0x0040(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bAutoDestroy;                                      // 0x0044(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_45[0x3];                                       // 0x0045(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class UVoxelAudioComponent*                   ReturnValue;                                       // 0x0048(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VoxelLevelFunctionLibrary_SpawnVoxelSoundAttached) == 0x000008, "Wrong alignment on VoxelLevelFunctionLibrary_SpawnVoxelSoundAttached");
static_assert(sizeof(VoxelLevelFunctionLibrary_SpawnVoxelSoundAttached) == 0x000050, "Wrong size on VoxelLevelFunctionLibrary_SpawnVoxelSoundAttached");
static_assert(offsetof(VoxelLevelFunctionLibrary_SpawnVoxelSoundAttached, LevelManager) == 0x000000, "Member 'VoxelLevelFunctionLibrary_SpawnVoxelSoundAttached::LevelManager' has a wrong offset!");
static_assert(offsetof(VoxelLevelFunctionLibrary_SpawnVoxelSoundAttached, Sound) == 0x000008, "Member 'VoxelLevelFunctionLibrary_SpawnVoxelSoundAttached::Sound' has a wrong offset!");
static_assert(offsetof(VoxelLevelFunctionLibrary_SpawnVoxelSoundAttached, AttachToComponent) == 0x000010, "Member 'VoxelLevelFunctionLibrary_SpawnVoxelSoundAttached::AttachToComponent' has a wrong offset!");
static_assert(offsetof(VoxelLevelFunctionLibrary_SpawnVoxelSoundAttached, AttachPointName) == 0x000018, "Member 'VoxelLevelFunctionLibrary_SpawnVoxelSoundAttached::AttachPointName' has a wrong offset!");
static_assert(offsetof(VoxelLevelFunctionLibrary_SpawnVoxelSoundAttached, RelativeLocation) == 0x000020, "Member 'VoxelLevelFunctionLibrary_SpawnVoxelSoundAttached::RelativeLocation' has a wrong offset!");
static_assert(offsetof(VoxelLevelFunctionLibrary_SpawnVoxelSoundAttached, RelativeRotation) == 0x00002C, "Member 'VoxelLevelFunctionLibrary_SpawnVoxelSoundAttached::RelativeRotation' has a wrong offset!");
static_assert(offsetof(VoxelLevelFunctionLibrary_SpawnVoxelSoundAttached, VolumeMultiplier) == 0x000038, "Member 'VoxelLevelFunctionLibrary_SpawnVoxelSoundAttached::VolumeMultiplier' has a wrong offset!");
static_assert(offsetof(VoxelLevelFunctionLibrary_SpawnVoxelSoundAttached, PitchMultiplier) == 0x00003C, "Member 'VoxelLevelFunctionLibrary_SpawnVoxelSoundAttached::PitchMultiplier' has a wrong offset!");
static_assert(offsetof(VoxelLevelFunctionLibrary_SpawnVoxelSoundAttached, MaxVoiceCount) == 0x000040, "Member 'VoxelLevelFunctionLibrary_SpawnVoxelSoundAttached::MaxVoiceCount' has a wrong offset!");
static_assert(offsetof(VoxelLevelFunctionLibrary_SpawnVoxelSoundAttached, bAutoDestroy) == 0x000044, "Member 'VoxelLevelFunctionLibrary_SpawnVoxelSoundAttached::bAutoDestroy' has a wrong offset!");
static_assert(offsetof(VoxelLevelFunctionLibrary_SpawnVoxelSoundAttached, ReturnValue) == 0x000048, "Member 'VoxelLevelFunctionLibrary_SpawnVoxelSoundAttached::ReturnValue' has a wrong offset!");

// Function LevelVoxelization.VoxelLevelFunctionLibrary.SpawnVoxelSoundAttachedFromClass
// 0x0050 (0x0050 - 0x0000)
struct VoxelLevelFunctionLibrary_SpawnVoxelSoundAttachedFromClass final
{
public:
	TSubclassOf<class UVoxelAudioComponent>       ComponentClass;                                    // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class USoundBase*                             Sound;                                             // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class USceneComponent*                        AttachToComponent;                                 // 0x0010(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   AttachPointName;                                   // 0x0018(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                RelativeLocation;                                  // 0x0020(0x000C)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FRotator                               RelativeRotation;                                  // 0x002C(0x000C)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, NativeAccessSpecifierPublic)
	float                                         VolumeMultiplier;                                  // 0x0038(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         PitchMultiplier;                                   // 0x003C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         MaxVoiceCount;                                     // 0x0040(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bAutoDestroy;                                      // 0x0044(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_45[0x3];                                       // 0x0045(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class UVoxelAudioComponent*                   ReturnValue;                                       // 0x0048(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VoxelLevelFunctionLibrary_SpawnVoxelSoundAttachedFromClass) == 0x000008, "Wrong alignment on VoxelLevelFunctionLibrary_SpawnVoxelSoundAttachedFromClass");
static_assert(sizeof(VoxelLevelFunctionLibrary_SpawnVoxelSoundAttachedFromClass) == 0x000050, "Wrong size on VoxelLevelFunctionLibrary_SpawnVoxelSoundAttachedFromClass");
static_assert(offsetof(VoxelLevelFunctionLibrary_SpawnVoxelSoundAttachedFromClass, ComponentClass) == 0x000000, "Member 'VoxelLevelFunctionLibrary_SpawnVoxelSoundAttachedFromClass::ComponentClass' has a wrong offset!");
static_assert(offsetof(VoxelLevelFunctionLibrary_SpawnVoxelSoundAttachedFromClass, Sound) == 0x000008, "Member 'VoxelLevelFunctionLibrary_SpawnVoxelSoundAttachedFromClass::Sound' has a wrong offset!");
static_assert(offsetof(VoxelLevelFunctionLibrary_SpawnVoxelSoundAttachedFromClass, AttachToComponent) == 0x000010, "Member 'VoxelLevelFunctionLibrary_SpawnVoxelSoundAttachedFromClass::AttachToComponent' has a wrong offset!");
static_assert(offsetof(VoxelLevelFunctionLibrary_SpawnVoxelSoundAttachedFromClass, AttachPointName) == 0x000018, "Member 'VoxelLevelFunctionLibrary_SpawnVoxelSoundAttachedFromClass::AttachPointName' has a wrong offset!");
static_assert(offsetof(VoxelLevelFunctionLibrary_SpawnVoxelSoundAttachedFromClass, RelativeLocation) == 0x000020, "Member 'VoxelLevelFunctionLibrary_SpawnVoxelSoundAttachedFromClass::RelativeLocation' has a wrong offset!");
static_assert(offsetof(VoxelLevelFunctionLibrary_SpawnVoxelSoundAttachedFromClass, RelativeRotation) == 0x00002C, "Member 'VoxelLevelFunctionLibrary_SpawnVoxelSoundAttachedFromClass::RelativeRotation' has a wrong offset!");
static_assert(offsetof(VoxelLevelFunctionLibrary_SpawnVoxelSoundAttachedFromClass, VolumeMultiplier) == 0x000038, "Member 'VoxelLevelFunctionLibrary_SpawnVoxelSoundAttachedFromClass::VolumeMultiplier' has a wrong offset!");
static_assert(offsetof(VoxelLevelFunctionLibrary_SpawnVoxelSoundAttachedFromClass, PitchMultiplier) == 0x00003C, "Member 'VoxelLevelFunctionLibrary_SpawnVoxelSoundAttachedFromClass::PitchMultiplier' has a wrong offset!");
static_assert(offsetof(VoxelLevelFunctionLibrary_SpawnVoxelSoundAttachedFromClass, MaxVoiceCount) == 0x000040, "Member 'VoxelLevelFunctionLibrary_SpawnVoxelSoundAttachedFromClass::MaxVoiceCount' has a wrong offset!");
static_assert(offsetof(VoxelLevelFunctionLibrary_SpawnVoxelSoundAttachedFromClass, bAutoDestroy) == 0x000044, "Member 'VoxelLevelFunctionLibrary_SpawnVoxelSoundAttachedFromClass::bAutoDestroy' has a wrong offset!");
static_assert(offsetof(VoxelLevelFunctionLibrary_SpawnVoxelSoundAttachedFromClass, ReturnValue) == 0x000048, "Member 'VoxelLevelFunctionLibrary_SpawnVoxelSoundAttachedFromClass::ReturnValue' has a wrong offset!");

// Function LevelVoxelization.VoxelLevelManager.SetCurrentLevel
// 0x0018 (0x0018 - 0x0000)
struct VoxelLevelManager_SetCurrentLevel final
{
public:
	class FName                                   LevelName;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                LevelOffset;                                       // 0x0008(0x000C)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0014(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_15[0x3];                                       // 0x0015(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(VoxelLevelManager_SetCurrentLevel) == 0x000004, "Wrong alignment on VoxelLevelManager_SetCurrentLevel");
static_assert(sizeof(VoxelLevelManager_SetCurrentLevel) == 0x000018, "Wrong size on VoxelLevelManager_SetCurrentLevel");
static_assert(offsetof(VoxelLevelManager_SetCurrentLevel, LevelName) == 0x000000, "Member 'VoxelLevelManager_SetCurrentLevel::LevelName' has a wrong offset!");
static_assert(offsetof(VoxelLevelManager_SetCurrentLevel, LevelOffset) == 0x000008, "Member 'VoxelLevelManager_SetCurrentLevel::LevelOffset' has a wrong offset!");
static_assert(offsetof(VoxelLevelManager_SetCurrentLevel, ReturnValue) == 0x000014, "Member 'VoxelLevelManager_SetCurrentLevel::ReturnValue' has a wrong offset!");

// Function LevelVoxelization.VoxelLevelManager.SetCurrentPawn
// 0x0008 (0x0008 - 0x0000)
struct VoxelLevelManager_SetCurrentPawn final
{
public:
	class APawn*                                  Pawn;                                              // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VoxelLevelManager_SetCurrentPawn) == 0x000008, "Wrong alignment on VoxelLevelManager_SetCurrentPawn");
static_assert(sizeof(VoxelLevelManager_SetCurrentPawn) == 0x000008, "Wrong size on VoxelLevelManager_SetCurrentPawn");
static_assert(offsetof(VoxelLevelManager_SetCurrentPawn, Pawn) == 0x000000, "Member 'VoxelLevelManager_SetCurrentPawn::Pawn' has a wrong offset!");

// Function LevelVoxelization.VoxelLevelManager.IsLevelLoadComplete
// 0x0001 (0x0001 - 0x0000)
struct VoxelLevelManager_IsLevelLoadComplete final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VoxelLevelManager_IsLevelLoadComplete) == 0x000001, "Wrong alignment on VoxelLevelManager_IsLevelLoadComplete");
static_assert(sizeof(VoxelLevelManager_IsLevelLoadComplete) == 0x000001, "Wrong size on VoxelLevelManager_IsLevelLoadComplete");
static_assert(offsetof(VoxelLevelManager_IsLevelLoadComplete, ReturnValue) == 0x000000, "Member 'VoxelLevelManager_IsLevelLoadComplete::ReturnValue' has a wrong offset!");

// Function LevelVoxelization.VoxelNavAgentComponent.CreateSpatialNavigationQuery
// 0x0010 (0x0010 - 0x0000)
struct VoxelNavAgentComponent_CreateSpatialNavigationQuery final
{
public:
	bool                                          bAllowObstacleManipulation;                        // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UVoxelSpatialNavigationQuery*           ReturnValue;                                       // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VoxelNavAgentComponent_CreateSpatialNavigationQuery) == 0x000008, "Wrong alignment on VoxelNavAgentComponent_CreateSpatialNavigationQuery");
static_assert(sizeof(VoxelNavAgentComponent_CreateSpatialNavigationQuery) == 0x000010, "Wrong size on VoxelNavAgentComponent_CreateSpatialNavigationQuery");
static_assert(offsetof(VoxelNavAgentComponent_CreateSpatialNavigationQuery, bAllowObstacleManipulation) == 0x000000, "Member 'VoxelNavAgentComponent_CreateSpatialNavigationQuery::bAllowObstacleManipulation' has a wrong offset!");
static_assert(offsetof(VoxelNavAgentComponent_CreateSpatialNavigationQuery, ReturnValue) == 0x000008, "Member 'VoxelNavAgentComponent_CreateSpatialNavigationQuery::ReturnValue' has a wrong offset!");

// Function LevelVoxelization.VoxelNavAgentComponent.OnOverlapHazardLevelChanged
// 0x0003 (0x0003 - 0x0000)
struct VoxelNavAgentComponent_OnOverlapHazardLevelChanged final
{
public:
	uint8                                         HazardType;                                        // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         HazardLevel;                                       // 0x0001(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0002(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VoxelNavAgentComponent_OnOverlapHazardLevelChanged) == 0x000001, "Wrong alignment on VoxelNavAgentComponent_OnOverlapHazardLevelChanged");
static_assert(sizeof(VoxelNavAgentComponent_OnOverlapHazardLevelChanged) == 0x000003, "Wrong size on VoxelNavAgentComponent_OnOverlapHazardLevelChanged");
static_assert(offsetof(VoxelNavAgentComponent_OnOverlapHazardLevelChanged, HazardType) == 0x000000, "Member 'VoxelNavAgentComponent_OnOverlapHazardLevelChanged::HazardType' has a wrong offset!");
static_assert(offsetof(VoxelNavAgentComponent_OnOverlapHazardLevelChanged, HazardLevel) == 0x000001, "Member 'VoxelNavAgentComponent_OnOverlapHazardLevelChanged::HazardLevel' has a wrong offset!");
static_assert(offsetof(VoxelNavAgentComponent_OnOverlapHazardLevelChanged, ReturnValue) == 0x000002, "Member 'VoxelNavAgentComponent_OnOverlapHazardLevelChanged::ReturnValue' has a wrong offset!");

// Function LevelVoxelization.VoxelNavAgentComponent.PauseRepathUpdates
// 0x0001 (0x0001 - 0x0000)
struct VoxelNavAgentComponent_PauseRepathUpdates final
{
public:
	bool                                          bPause;                                            // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VoxelNavAgentComponent_PauseRepathUpdates) == 0x000001, "Wrong alignment on VoxelNavAgentComponent_PauseRepathUpdates");
static_assert(sizeof(VoxelNavAgentComponent_PauseRepathUpdates) == 0x000001, "Wrong size on VoxelNavAgentComponent_PauseRepathUpdates");
static_assert(offsetof(VoxelNavAgentComponent_PauseRepathUpdates, bPause) == 0x000000, "Member 'VoxelNavAgentComponent_PauseRepathUpdates::bPause' has a wrong offset!");

// Function LevelVoxelization.VoxelNavAgentComponent.SetNavigationType
// 0x0001 (0x0001 - 0x0000)
struct VoxelNavAgentComponent_SetNavigationType final
{
public:
	EVoxelNavigationType                          NewNavigationType;                                 // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VoxelNavAgentComponent_SetNavigationType) == 0x000001, "Wrong alignment on VoxelNavAgentComponent_SetNavigationType");
static_assert(sizeof(VoxelNavAgentComponent_SetNavigationType) == 0x000001, "Wrong size on VoxelNavAgentComponent_SetNavigationType");
static_assert(offsetof(VoxelNavAgentComponent_SetNavigationType, NewNavigationType) == 0x000000, "Member 'VoxelNavAgentComponent_SetNavigationType::NewNavigationType' has a wrong offset!");

// Function LevelVoxelization.VoxelNavAgentComponent.SetStepCostPenalty
// 0x0004 (0x0004 - 0x0000)
struct VoxelNavAgentComponent_SetStepCostPenalty final
{
public:
	int32                                         CostPenalty;                                       // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VoxelNavAgentComponent_SetStepCostPenalty) == 0x000004, "Wrong alignment on VoxelNavAgentComponent_SetStepCostPenalty");
static_assert(sizeof(VoxelNavAgentComponent_SetStepCostPenalty) == 0x000004, "Wrong size on VoxelNavAgentComponent_SetStepCostPenalty");
static_assert(offsetof(VoxelNavAgentComponent_SetStepCostPenalty, CostPenalty) == 0x000000, "Member 'VoxelNavAgentComponent_SetStepCostPenalty::CostPenalty' has a wrong offset!");

// Function LevelVoxelization.VoxelNavAgentComponent.StartPeriodicPathProximityUpdate
// 0x0018 (0x0018 - 0x0000)
struct VoxelNavAgentComponent_StartPeriodicPathProximityUpdate final
{
public:
	class UVoxelNavAgentComponent*                TargetComponent;                                   // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         PathProximityRange;                                // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         UpdateInterval;                                    // 0x000C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0010(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(VoxelNavAgentComponent_StartPeriodicPathProximityUpdate) == 0x000008, "Wrong alignment on VoxelNavAgentComponent_StartPeriodicPathProximityUpdate");
static_assert(sizeof(VoxelNavAgentComponent_StartPeriodicPathProximityUpdate) == 0x000018, "Wrong size on VoxelNavAgentComponent_StartPeriodicPathProximityUpdate");
static_assert(offsetof(VoxelNavAgentComponent_StartPeriodicPathProximityUpdate, TargetComponent) == 0x000000, "Member 'VoxelNavAgentComponent_StartPeriodicPathProximityUpdate::TargetComponent' has a wrong offset!");
static_assert(offsetof(VoxelNavAgentComponent_StartPeriodicPathProximityUpdate, PathProximityRange) == 0x000008, "Member 'VoxelNavAgentComponent_StartPeriodicPathProximityUpdate::PathProximityRange' has a wrong offset!");
static_assert(offsetof(VoxelNavAgentComponent_StartPeriodicPathProximityUpdate, UpdateInterval) == 0x00000C, "Member 'VoxelNavAgentComponent_StartPeriodicPathProximityUpdate::UpdateInterval' has a wrong offset!");
static_assert(offsetof(VoxelNavAgentComponent_StartPeriodicPathProximityUpdate, ReturnValue) == 0x000010, "Member 'VoxelNavAgentComponent_StartPeriodicPathProximityUpdate::ReturnValue' has a wrong offset!");

// Function LevelVoxelization.VoxelNavAgentComponent.StartTrackingLocation
// 0x0002 (0x0002 - 0x0000)
struct VoxelNavAgentComponent_StartTrackingLocation final
{
public:
	bool                                          bWantsPropagationOverlaps;                         // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0001(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VoxelNavAgentComponent_StartTrackingLocation) == 0x000001, "Wrong alignment on VoxelNavAgentComponent_StartTrackingLocation");
static_assert(sizeof(VoxelNavAgentComponent_StartTrackingLocation) == 0x000002, "Wrong size on VoxelNavAgentComponent_StartTrackingLocation");
static_assert(offsetof(VoxelNavAgentComponent_StartTrackingLocation, bWantsPropagationOverlaps) == 0x000000, "Member 'VoxelNavAgentComponent_StartTrackingLocation::bWantsPropagationOverlaps' has a wrong offset!");
static_assert(offsetof(VoxelNavAgentComponent_StartTrackingLocation, ReturnValue) == 0x000001, "Member 'VoxelNavAgentComponent_StartTrackingLocation::ReturnValue' has a wrong offset!");

// Function LevelVoxelization.VoxelNavAgentComponent.StopPeriodicPathProximityUpdate
// 0x0001 (0x0001 - 0x0000)
struct VoxelNavAgentComponent_StopPeriodicPathProximityUpdate final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VoxelNavAgentComponent_StopPeriodicPathProximityUpdate) == 0x000001, "Wrong alignment on VoxelNavAgentComponent_StopPeriodicPathProximityUpdate");
static_assert(sizeof(VoxelNavAgentComponent_StopPeriodicPathProximityUpdate) == 0x000001, "Wrong size on VoxelNavAgentComponent_StopPeriodicPathProximityUpdate");
static_assert(offsetof(VoxelNavAgentComponent_StopPeriodicPathProximityUpdate, ReturnValue) == 0x000000, "Member 'VoxelNavAgentComponent_StopPeriodicPathProximityUpdate::ReturnValue' has a wrong offset!");

// Function LevelVoxelization.VoxelNavAgentComponent.StopTrackingLocation
// 0x0001 (0x0001 - 0x0000)
struct VoxelNavAgentComponent_StopTrackingLocation final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VoxelNavAgentComponent_StopTrackingLocation) == 0x000001, "Wrong alignment on VoxelNavAgentComponent_StopTrackingLocation");
static_assert(sizeof(VoxelNavAgentComponent_StopTrackingLocation) == 0x000001, "Wrong size on VoxelNavAgentComponent_StopTrackingLocation");
static_assert(offsetof(VoxelNavAgentComponent_StopTrackingLocation, ReturnValue) == 0x000000, "Member 'VoxelNavAgentComponent_StopTrackingLocation::ReturnValue' has a wrong offset!");

// Function LevelVoxelization.VoxelNavAgentComponent.TryClaimPointOfInterest
// 0x0010 (0x0010 - 0x0000)
struct VoxelNavAgentComponent_TryClaimPointOfInterest final
{
public:
	class USceneComponent*                        SceneComponent;                                    // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(VoxelNavAgentComponent_TryClaimPointOfInterest) == 0x000008, "Wrong alignment on VoxelNavAgentComponent_TryClaimPointOfInterest");
static_assert(sizeof(VoxelNavAgentComponent_TryClaimPointOfInterest) == 0x000010, "Wrong size on VoxelNavAgentComponent_TryClaimPointOfInterest");
static_assert(offsetof(VoxelNavAgentComponent_TryClaimPointOfInterest, SceneComponent) == 0x000000, "Member 'VoxelNavAgentComponent_TryClaimPointOfInterest::SceneComponent' has a wrong offset!");
static_assert(offsetof(VoxelNavAgentComponent_TryClaimPointOfInterest, ReturnValue) == 0x000008, "Member 'VoxelNavAgentComponent_TryClaimPointOfInterest::ReturnValue' has a wrong offset!");

// Function LevelVoxelization.VoxelNavAgentComponent.TryPathToAgent
// 0x0018 (0x0018 - 0x0000)
struct VoxelNavAgentComponent_TryPathToAgent final
{
public:
	class UVoxelNavAgentComponent*                TargetComponent;                                   // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                TargetOffetLocation;                               // 0x0008(0x000C)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bFindFastPathImmediately;                          // 0x0014(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0015(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_16[0x2];                                       // 0x0016(0x0002)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(VoxelNavAgentComponent_TryPathToAgent) == 0x000008, "Wrong alignment on VoxelNavAgentComponent_TryPathToAgent");
static_assert(sizeof(VoxelNavAgentComponent_TryPathToAgent) == 0x000018, "Wrong size on VoxelNavAgentComponent_TryPathToAgent");
static_assert(offsetof(VoxelNavAgentComponent_TryPathToAgent, TargetComponent) == 0x000000, "Member 'VoxelNavAgentComponent_TryPathToAgent::TargetComponent' has a wrong offset!");
static_assert(offsetof(VoxelNavAgentComponent_TryPathToAgent, TargetOffetLocation) == 0x000008, "Member 'VoxelNavAgentComponent_TryPathToAgent::TargetOffetLocation' has a wrong offset!");
static_assert(offsetof(VoxelNavAgentComponent_TryPathToAgent, bFindFastPathImmediately) == 0x000014, "Member 'VoxelNavAgentComponent_TryPathToAgent::bFindFastPathImmediately' has a wrong offset!");
static_assert(offsetof(VoxelNavAgentComponent_TryPathToAgent, ReturnValue) == 0x000015, "Member 'VoxelNavAgentComponent_TryPathToAgent::ReturnValue' has a wrong offset!");

// Function LevelVoxelization.VoxelNavAgentComponent.TryPathToBounds
// 0x0020 (0x0020 - 0x0000)
struct VoxelNavAgentComponent_TryPathToBounds final
{
public:
	struct FBox                                   TargetBounds;                                      // 0x0000(0x001C)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	bool                                          bFindFastPathImmediately;                          // 0x001C(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x001D(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1E[0x2];                                       // 0x001E(0x0002)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(VoxelNavAgentComponent_TryPathToBounds) == 0x000004, "Wrong alignment on VoxelNavAgentComponent_TryPathToBounds");
static_assert(sizeof(VoxelNavAgentComponent_TryPathToBounds) == 0x000020, "Wrong size on VoxelNavAgentComponent_TryPathToBounds");
static_assert(offsetof(VoxelNavAgentComponent_TryPathToBounds, TargetBounds) == 0x000000, "Member 'VoxelNavAgentComponent_TryPathToBounds::TargetBounds' has a wrong offset!");
static_assert(offsetof(VoxelNavAgentComponent_TryPathToBounds, bFindFastPathImmediately) == 0x00001C, "Member 'VoxelNavAgentComponent_TryPathToBounds::bFindFastPathImmediately' has a wrong offset!");
static_assert(offsetof(VoxelNavAgentComponent_TryPathToBounds, ReturnValue) == 0x00001D, "Member 'VoxelNavAgentComponent_TryPathToBounds::ReturnValue' has a wrong offset!");

// Function LevelVoxelization.VoxelNavAgentComponent.TryPathToLocation
// 0x0010 (0x0010 - 0x0000)
struct VoxelNavAgentComponent_TryPathToLocation final
{
public:
	struct FVector                                TargetLocation;                                    // 0x0000(0x000C)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bFindFastPathImmediately;                          // 0x000C(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x000D(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_E[0x2];                                        // 0x000E(0x0002)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(VoxelNavAgentComponent_TryPathToLocation) == 0x000004, "Wrong alignment on VoxelNavAgentComponent_TryPathToLocation");
static_assert(sizeof(VoxelNavAgentComponent_TryPathToLocation) == 0x000010, "Wrong size on VoxelNavAgentComponent_TryPathToLocation");
static_assert(offsetof(VoxelNavAgentComponent_TryPathToLocation, TargetLocation) == 0x000000, "Member 'VoxelNavAgentComponent_TryPathToLocation::TargetLocation' has a wrong offset!");
static_assert(offsetof(VoxelNavAgentComponent_TryPathToLocation, bFindFastPathImmediately) == 0x00000C, "Member 'VoxelNavAgentComponent_TryPathToLocation::bFindFastPathImmediately' has a wrong offset!");
static_assert(offsetof(VoxelNavAgentComponent_TryPathToLocation, ReturnValue) == 0x00000D, "Member 'VoxelNavAgentComponent_TryPathToLocation::ReturnValue' has a wrong offset!");

// Function LevelVoxelization.VoxelNavAgentComponent.TryPathToSpatialQueryLocation
// 0x0010 (0x0010 - 0x0000)
struct VoxelNavAgentComponent_TryPathToSpatialQueryLocation final
{
public:
	class UVoxelSpatialNavigationQuery*           SpatialQuery;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(VoxelNavAgentComponent_TryPathToSpatialQueryLocation) == 0x000008, "Wrong alignment on VoxelNavAgentComponent_TryPathToSpatialQueryLocation");
static_assert(sizeof(VoxelNavAgentComponent_TryPathToSpatialQueryLocation) == 0x000010, "Wrong size on VoxelNavAgentComponent_TryPathToSpatialQueryLocation");
static_assert(offsetof(VoxelNavAgentComponent_TryPathToSpatialQueryLocation, SpatialQuery) == 0x000000, "Member 'VoxelNavAgentComponent_TryPathToSpatialQueryLocation::SpatialQuery' has a wrong offset!");
static_assert(offsetof(VoxelNavAgentComponent_TryPathToSpatialQueryLocation, ReturnValue) == 0x000008, "Member 'VoxelNavAgentComponent_TryPathToSpatialQueryLocation::ReturnValue' has a wrong offset!");

// Function LevelVoxelization.VoxelNavAgentComponent.TryPathToTransform
// 0x0040 (0x0040 - 0x0000)
struct VoxelNavAgentComponent_TryPathToTransform final
{
public:
	struct FTransform                             TargetTransform;                                   // 0x0000(0x0030)(ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	bool                                          bFindFastPathImmediately;                          // 0x0030(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0031(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_32[0xE];                                       // 0x0032(0x000E)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(VoxelNavAgentComponent_TryPathToTransform) == 0x000010, "Wrong alignment on VoxelNavAgentComponent_TryPathToTransform");
static_assert(sizeof(VoxelNavAgentComponent_TryPathToTransform) == 0x000040, "Wrong size on VoxelNavAgentComponent_TryPathToTransform");
static_assert(offsetof(VoxelNavAgentComponent_TryPathToTransform, TargetTransform) == 0x000000, "Member 'VoxelNavAgentComponent_TryPathToTransform::TargetTransform' has a wrong offset!");
static_assert(offsetof(VoxelNavAgentComponent_TryPathToTransform, bFindFastPathImmediately) == 0x000030, "Member 'VoxelNavAgentComponent_TryPathToTransform::bFindFastPathImmediately' has a wrong offset!");
static_assert(offsetof(VoxelNavAgentComponent_TryPathToTransform, ReturnValue) == 0x000031, "Member 'VoxelNavAgentComponent_TryPathToTransform::ReturnValue' has a wrong offset!");

// Function LevelVoxelization.VoxelNavAgentComponent.TryStopPathing
// 0x0001 (0x0001 - 0x0000)
struct VoxelNavAgentComponent_TryStopPathing final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VoxelNavAgentComponent_TryStopPathing) == 0x000001, "Wrong alignment on VoxelNavAgentComponent_TryStopPathing");
static_assert(sizeof(VoxelNavAgentComponent_TryStopPathing) == 0x000001, "Wrong size on VoxelNavAgentComponent_TryStopPathing");
static_assert(offsetof(VoxelNavAgentComponent_TryStopPathing, ReturnValue) == 0x000000, "Member 'VoxelNavAgentComponent_TryStopPathing::ReturnValue' has a wrong offset!");

// Function LevelVoxelization.VoxelNavAgentComponent.TryUnclaimCurrentPointOfInterest
// 0x0001 (0x0001 - 0x0000)
struct VoxelNavAgentComponent_TryUnclaimCurrentPointOfInterest final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VoxelNavAgentComponent_TryUnclaimCurrentPointOfInterest) == 0x000001, "Wrong alignment on VoxelNavAgentComponent_TryUnclaimCurrentPointOfInterest");
static_assert(sizeof(VoxelNavAgentComponent_TryUnclaimCurrentPointOfInterest) == 0x000001, "Wrong size on VoxelNavAgentComponent_TryUnclaimCurrentPointOfInterest");
static_assert(offsetof(VoxelNavAgentComponent_TryUnclaimCurrentPointOfInterest, ReturnValue) == 0x000000, "Member 'VoxelNavAgentComponent_TryUnclaimCurrentPointOfInterest::ReturnValue' has a wrong offset!");

// Function LevelVoxelization.VoxelNavAgentComponent.CanFitAtCurrentLocation
// 0x0001 (0x0001 - 0x0000)
struct VoxelNavAgentComponent_CanFitAtCurrentLocation final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VoxelNavAgentComponent_CanFitAtCurrentLocation) == 0x000001, "Wrong alignment on VoxelNavAgentComponent_CanFitAtCurrentLocation");
static_assert(sizeof(VoxelNavAgentComponent_CanFitAtCurrentLocation) == 0x000001, "Wrong size on VoxelNavAgentComponent_CanFitAtCurrentLocation");
static_assert(offsetof(VoxelNavAgentComponent_CanFitAtCurrentLocation, ReturnValue) == 0x000000, "Member 'VoxelNavAgentComponent_CanFitAtCurrentLocation::ReturnValue' has a wrong offset!");

// Function LevelVoxelization.VoxelNavAgentComponent.CanFitAtWorldLocation
// 0x0010 (0x0010 - 0x0000)
struct VoxelNavAgentComponent_CanFitAtWorldLocation final
{
public:
	struct FVector                                WorldLocation;                                     // 0x0000(0x000C)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x000C(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_D[0x3];                                        // 0x000D(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(VoxelNavAgentComponent_CanFitAtWorldLocation) == 0x000004, "Wrong alignment on VoxelNavAgentComponent_CanFitAtWorldLocation");
static_assert(sizeof(VoxelNavAgentComponent_CanFitAtWorldLocation) == 0x000010, "Wrong size on VoxelNavAgentComponent_CanFitAtWorldLocation");
static_assert(offsetof(VoxelNavAgentComponent_CanFitAtWorldLocation, WorldLocation) == 0x000000, "Member 'VoxelNavAgentComponent_CanFitAtWorldLocation::WorldLocation' has a wrong offset!");
static_assert(offsetof(VoxelNavAgentComponent_CanFitAtWorldLocation, ReturnValue) == 0x00000C, "Member 'VoxelNavAgentComponent_CanFitAtWorldLocation::ReturnValue' has a wrong offset!");

// Function LevelVoxelization.VoxelNavAgentComponent.CanNavigateInDirection
// 0x0010 (0x0010 - 0x0000)
struct VoxelNavAgentComponent_CanNavigateInDirection final
{
public:
	struct FVector                                DirectionVector;                                   // 0x0000(0x000C)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x000C(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_D[0x3];                                        // 0x000D(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(VoxelNavAgentComponent_CanNavigateInDirection) == 0x000004, "Wrong alignment on VoxelNavAgentComponent_CanNavigateInDirection");
static_assert(sizeof(VoxelNavAgentComponent_CanNavigateInDirection) == 0x000010, "Wrong size on VoxelNavAgentComponent_CanNavigateInDirection");
static_assert(offsetof(VoxelNavAgentComponent_CanNavigateInDirection, DirectionVector) == 0x000000, "Member 'VoxelNavAgentComponent_CanNavigateInDirection::DirectionVector' has a wrong offset!");
static_assert(offsetof(VoxelNavAgentComponent_CanNavigateInDirection, ReturnValue) == 0x00000C, "Member 'VoxelNavAgentComponent_CanNavigateInDirection::ReturnValue' has a wrong offset!");

// Function LevelVoxelization.VoxelNavAgentComponent.GetAdjustedNavigationWorldLocation
// 0x0010 (0x0010 - 0x0000)
struct VoxelNavAgentComponent_GetAdjustedNavigationWorldLocation final
{
public:
	bool                                          bPerformLineTrace;                                 // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                ReturnValue;                                       // 0x0004(0x000C)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VoxelNavAgentComponent_GetAdjustedNavigationWorldLocation) == 0x000004, "Wrong alignment on VoxelNavAgentComponent_GetAdjustedNavigationWorldLocation");
static_assert(sizeof(VoxelNavAgentComponent_GetAdjustedNavigationWorldLocation) == 0x000010, "Wrong size on VoxelNavAgentComponent_GetAdjustedNavigationWorldLocation");
static_assert(offsetof(VoxelNavAgentComponent_GetAdjustedNavigationWorldLocation, bPerformLineTrace) == 0x000000, "Member 'VoxelNavAgentComponent_GetAdjustedNavigationWorldLocation::bPerformLineTrace' has a wrong offset!");
static_assert(offsetof(VoxelNavAgentComponent_GetAdjustedNavigationWorldLocation, ReturnValue) == 0x000004, "Member 'VoxelNavAgentComponent_GetAdjustedNavigationWorldLocation::ReturnValue' has a wrong offset!");

// Function LevelVoxelization.VoxelNavAgentComponent.GetAdjustedNavigationWorldLocationAtWorldTransform
// 0x0034 (0x0034 - 0x0000)
struct VoxelNavAgentComponent_GetAdjustedNavigationWorldLocationAtWorldTransform final
{
public:
	struct FVector                                WorldLocation;                                     // 0x0000(0x000C)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FRotator                               WorldRotation;                                     // 0x000C(0x000C)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	bool                                          bPerformLineTrace;                                 // 0x0018(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_19[0x3];                                       // 0x0019(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FRotator                               OutAdjustedWorldRotation;                          // 0x001C(0x000C)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	struct FVector                                ReturnValue;                                       // 0x0028(0x000C)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VoxelNavAgentComponent_GetAdjustedNavigationWorldLocationAtWorldTransform) == 0x000004, "Wrong alignment on VoxelNavAgentComponent_GetAdjustedNavigationWorldLocationAtWorldTransform");
static_assert(sizeof(VoxelNavAgentComponent_GetAdjustedNavigationWorldLocationAtWorldTransform) == 0x000034, "Wrong size on VoxelNavAgentComponent_GetAdjustedNavigationWorldLocationAtWorldTransform");
static_assert(offsetof(VoxelNavAgentComponent_GetAdjustedNavigationWorldLocationAtWorldTransform, WorldLocation) == 0x000000, "Member 'VoxelNavAgentComponent_GetAdjustedNavigationWorldLocationAtWorldTransform::WorldLocation' has a wrong offset!");
static_assert(offsetof(VoxelNavAgentComponent_GetAdjustedNavigationWorldLocationAtWorldTransform, WorldRotation) == 0x00000C, "Member 'VoxelNavAgentComponent_GetAdjustedNavigationWorldLocationAtWorldTransform::WorldRotation' has a wrong offset!");
static_assert(offsetof(VoxelNavAgentComponent_GetAdjustedNavigationWorldLocationAtWorldTransform, bPerformLineTrace) == 0x000018, "Member 'VoxelNavAgentComponent_GetAdjustedNavigationWorldLocationAtWorldTransform::bPerformLineTrace' has a wrong offset!");
static_assert(offsetof(VoxelNavAgentComponent_GetAdjustedNavigationWorldLocationAtWorldTransform, OutAdjustedWorldRotation) == 0x00001C, "Member 'VoxelNavAgentComponent_GetAdjustedNavigationWorldLocationAtWorldTransform::OutAdjustedWorldRotation' has a wrong offset!");
static_assert(offsetof(VoxelNavAgentComponent_GetAdjustedNavigationWorldLocationAtWorldTransform, ReturnValue) == 0x000028, "Member 'VoxelNavAgentComponent_GetAdjustedNavigationWorldLocationAtWorldTransform::ReturnValue' has a wrong offset!");

// Function LevelVoxelization.VoxelNavAgentComponent.GetAgentVoxelDimensions
// 0x0008 (0x0008 - 0x0000)
struct VoxelNavAgentComponent_GetAgentVoxelDimensions final
{
public:
	struct FIntPoint                              ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VoxelNavAgentComponent_GetAgentVoxelDimensions) == 0x000004, "Wrong alignment on VoxelNavAgentComponent_GetAgentVoxelDimensions");
static_assert(sizeof(VoxelNavAgentComponent_GetAgentVoxelDimensions) == 0x000008, "Wrong size on VoxelNavAgentComponent_GetAgentVoxelDimensions");
static_assert(offsetof(VoxelNavAgentComponent_GetAgentVoxelDimensions, ReturnValue) == 0x000000, "Member 'VoxelNavAgentComponent_GetAgentVoxelDimensions::ReturnValue' has a wrong offset!");

// Function LevelVoxelization.VoxelNavAgentComponent.GetClaimedPointOfInterest
// 0x0008 (0x0008 - 0x0000)
struct VoxelNavAgentComponent_GetClaimedPointOfInterest final
{
public:
	class USceneComponent*                        ReturnValue;                                       // 0x0000(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VoxelNavAgentComponent_GetClaimedPointOfInterest) == 0x000008, "Wrong alignment on VoxelNavAgentComponent_GetClaimedPointOfInterest");
static_assert(sizeof(VoxelNavAgentComponent_GetClaimedPointOfInterest) == 0x000008, "Wrong size on VoxelNavAgentComponent_GetClaimedPointOfInterest");
static_assert(offsetof(VoxelNavAgentComponent_GetClaimedPointOfInterest, ReturnValue) == 0x000000, "Member 'VoxelNavAgentComponent_GetClaimedPointOfInterest::ReturnValue' has a wrong offset!");

// Function LevelVoxelization.VoxelNavAgentComponent.GetCurrentNavigationTargetLocation
// 0x000C (0x000C - 0x0000)
struct VoxelNavAgentComponent_GetCurrentNavigationTargetLocation final
{
public:
	struct FVector                                ReturnValue;                                       // 0x0000(0x000C)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VoxelNavAgentComponent_GetCurrentNavigationTargetLocation) == 0x000004, "Wrong alignment on VoxelNavAgentComponent_GetCurrentNavigationTargetLocation");
static_assert(sizeof(VoxelNavAgentComponent_GetCurrentNavigationTargetLocation) == 0x00000C, "Wrong size on VoxelNavAgentComponent_GetCurrentNavigationTargetLocation");
static_assert(offsetof(VoxelNavAgentComponent_GetCurrentNavigationTargetLocation, ReturnValue) == 0x000000, "Member 'VoxelNavAgentComponent_GetCurrentNavigationTargetLocation::ReturnValue' has a wrong offset!");

// Function LevelVoxelization.VoxelNavAgentComponent.GetFirstPathObstacleActor
// 0x0010 (0x0010 - 0x0000)
struct VoxelNavAgentComponent_GetFirstPathObstacleActor final
{
public:
	int32                                         OutStartPathNodeIndex;                             // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         OutEndPathNodeIndex;                               // 0x0004(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 ReturnValue;                                       // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VoxelNavAgentComponent_GetFirstPathObstacleActor) == 0x000008, "Wrong alignment on VoxelNavAgentComponent_GetFirstPathObstacleActor");
static_assert(sizeof(VoxelNavAgentComponent_GetFirstPathObstacleActor) == 0x000010, "Wrong size on VoxelNavAgentComponent_GetFirstPathObstacleActor");
static_assert(offsetof(VoxelNavAgentComponent_GetFirstPathObstacleActor, OutStartPathNodeIndex) == 0x000000, "Member 'VoxelNavAgentComponent_GetFirstPathObstacleActor::OutStartPathNodeIndex' has a wrong offset!");
static_assert(offsetof(VoxelNavAgentComponent_GetFirstPathObstacleActor, OutEndPathNodeIndex) == 0x000004, "Member 'VoxelNavAgentComponent_GetFirstPathObstacleActor::OutEndPathNodeIndex' has a wrong offset!");
static_assert(offsetof(VoxelNavAgentComponent_GetFirstPathObstacleActor, ReturnValue) == 0x000008, "Member 'VoxelNavAgentComponent_GetFirstPathObstacleActor::ReturnValue' has a wrong offset!");

// Function LevelVoxelization.VoxelNavAgentComponent.GetImmediateWorldPathPoints
// 0x0034 (0x0034 - 0x0000)
struct VoxelNavAgentComponent_GetImmediateWorldPathPoints final
{
public:
	bool                                          bInterpolateForNavigation;                         // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTwoVectors                            OutNormals;                                        // 0x0004(0x0018)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	struct FTwoVectors                            ReturnValue;                                       // 0x001C(0x0018)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(VoxelNavAgentComponent_GetImmediateWorldPathPoints) == 0x000004, "Wrong alignment on VoxelNavAgentComponent_GetImmediateWorldPathPoints");
static_assert(sizeof(VoxelNavAgentComponent_GetImmediateWorldPathPoints) == 0x000034, "Wrong size on VoxelNavAgentComponent_GetImmediateWorldPathPoints");
static_assert(offsetof(VoxelNavAgentComponent_GetImmediateWorldPathPoints, bInterpolateForNavigation) == 0x000000, "Member 'VoxelNavAgentComponent_GetImmediateWorldPathPoints::bInterpolateForNavigation' has a wrong offset!");
static_assert(offsetof(VoxelNavAgentComponent_GetImmediateWorldPathPoints, OutNormals) == 0x000004, "Member 'VoxelNavAgentComponent_GetImmediateWorldPathPoints::OutNormals' has a wrong offset!");
static_assert(offsetof(VoxelNavAgentComponent_GetImmediateWorldPathPoints, ReturnValue) == 0x00001C, "Member 'VoxelNavAgentComponent_GetImmediateWorldPathPoints::ReturnValue' has a wrong offset!");

// Function LevelVoxelization.VoxelNavAgentComponent.GetMaxOverlapHazardLevelAndType
// 0x0018 (0x0018 - 0x0000)
struct VoxelNavAgentComponent_GetMaxOverlapHazardLevelAndType final
{
public:
	TArray<uint8>                                 CandidateHazardTypes;                              // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
	uint8                                         OutHazardType;                                     // 0x0010(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         ReturnValue;                                       // 0x0011(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_12[0x6];                                       // 0x0012(0x0006)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(VoxelNavAgentComponent_GetMaxOverlapHazardLevelAndType) == 0x000008, "Wrong alignment on VoxelNavAgentComponent_GetMaxOverlapHazardLevelAndType");
static_assert(sizeof(VoxelNavAgentComponent_GetMaxOverlapHazardLevelAndType) == 0x000018, "Wrong size on VoxelNavAgentComponent_GetMaxOverlapHazardLevelAndType");
static_assert(offsetof(VoxelNavAgentComponent_GetMaxOverlapHazardLevelAndType, CandidateHazardTypes) == 0x000000, "Member 'VoxelNavAgentComponent_GetMaxOverlapHazardLevelAndType::CandidateHazardTypes' has a wrong offset!");
static_assert(offsetof(VoxelNavAgentComponent_GetMaxOverlapHazardLevelAndType, OutHazardType) == 0x000010, "Member 'VoxelNavAgentComponent_GetMaxOverlapHazardLevelAndType::OutHazardType' has a wrong offset!");
static_assert(offsetof(VoxelNavAgentComponent_GetMaxOverlapHazardLevelAndType, ReturnValue) == 0x000011, "Member 'VoxelNavAgentComponent_GetMaxOverlapHazardLevelAndType::ReturnValue' has a wrong offset!");

// Function LevelVoxelization.VoxelNavAgentComponent.GetOverlapHazardLevelForHazardType
// 0x0018 (0x0018 - 0x0000)
struct VoxelNavAgentComponent_GetOverlapHazardLevelForHazardType final
{
public:
	uint8                                         HazardType;                                        // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UVoxelPropagatorComponent*              IgnorePropagator;                                  // 0x0008(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         ReturnValue;                                       // 0x0010(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(VoxelNavAgentComponent_GetOverlapHazardLevelForHazardType) == 0x000008, "Wrong alignment on VoxelNavAgentComponent_GetOverlapHazardLevelForHazardType");
static_assert(sizeof(VoxelNavAgentComponent_GetOverlapHazardLevelForHazardType) == 0x000018, "Wrong size on VoxelNavAgentComponent_GetOverlapHazardLevelForHazardType");
static_assert(offsetof(VoxelNavAgentComponent_GetOverlapHazardLevelForHazardType, HazardType) == 0x000000, "Member 'VoxelNavAgentComponent_GetOverlapHazardLevelForHazardType::HazardType' has a wrong offset!");
static_assert(offsetof(VoxelNavAgentComponent_GetOverlapHazardLevelForHazardType, IgnorePropagator) == 0x000008, "Member 'VoxelNavAgentComponent_GetOverlapHazardLevelForHazardType::IgnorePropagator' has a wrong offset!");
static_assert(offsetof(VoxelNavAgentComponent_GetOverlapHazardLevelForHazardType, ReturnValue) == 0x000010, "Member 'VoxelNavAgentComponent_GetOverlapHazardLevelForHazardType::ReturnValue' has a wrong offset!");

// Function LevelVoxelization.VoxelNavAgentComponent.GetOverlappingNavigationModifierCost
// 0x0008 (0x0008 - 0x0000)
struct VoxelNavAgentComponent_GetOverlappingNavigationModifierCost final
{
public:
	EVoxelNavModifierType                         ModifierType;                                      // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         ReturnValue;                                       // 0x0004(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VoxelNavAgentComponent_GetOverlappingNavigationModifierCost) == 0x000004, "Wrong alignment on VoxelNavAgentComponent_GetOverlappingNavigationModifierCost");
static_assert(sizeof(VoxelNavAgentComponent_GetOverlappingNavigationModifierCost) == 0x000008, "Wrong size on VoxelNavAgentComponent_GetOverlappingNavigationModifierCost");
static_assert(offsetof(VoxelNavAgentComponent_GetOverlappingNavigationModifierCost, ModifierType) == 0x000000, "Member 'VoxelNavAgentComponent_GetOverlappingNavigationModifierCost::ModifierType' has a wrong offset!");
static_assert(offsetof(VoxelNavAgentComponent_GetOverlappingNavigationModifierCost, ReturnValue) == 0x000004, "Member 'VoxelNavAgentComponent_GetOverlappingNavigationModifierCost::ReturnValue' has a wrong offset!");

// Function LevelVoxelization.VoxelNavAgentComponent.GetUnclaimedPointsOfInterestInRoomPathRange
// 0x0068 (0x0068 - 0x0000)
struct VoxelNavAgentComponent_GetUnclaimedPointsOfInterestInRoomPathRange final
{
public:
	float                                         RoomPathRange;                                     // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TSet<class USceneComponent*>                  ExcludePOIs;                                       // 0x0008(0x0050)(ConstParm, Parm, OutParm, ReferenceParm, ContainsInstancedReference, NativeAccessSpecifierPublic)
	TArray<class USceneComponent*>                ReturnValue;                                       // 0x0058(0x0010)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, ContainsInstancedReference, NativeAccessSpecifierPublic)
};
static_assert(alignof(VoxelNavAgentComponent_GetUnclaimedPointsOfInterestInRoomPathRange) == 0x000008, "Wrong alignment on VoxelNavAgentComponent_GetUnclaimedPointsOfInterestInRoomPathRange");
static_assert(sizeof(VoxelNavAgentComponent_GetUnclaimedPointsOfInterestInRoomPathRange) == 0x000068, "Wrong size on VoxelNavAgentComponent_GetUnclaimedPointsOfInterestInRoomPathRange");
static_assert(offsetof(VoxelNavAgentComponent_GetUnclaimedPointsOfInterestInRoomPathRange, RoomPathRange) == 0x000000, "Member 'VoxelNavAgentComponent_GetUnclaimedPointsOfInterestInRoomPathRange::RoomPathRange' has a wrong offset!");
static_assert(offsetof(VoxelNavAgentComponent_GetUnclaimedPointsOfInterestInRoomPathRange, ExcludePOIs) == 0x000008, "Member 'VoxelNavAgentComponent_GetUnclaimedPointsOfInterestInRoomPathRange::ExcludePOIs' has a wrong offset!");
static_assert(offsetof(VoxelNavAgentComponent_GetUnclaimedPointsOfInterestInRoomPathRange, ReturnValue) == 0x000058, "Member 'VoxelNavAgentComponent_GetUnclaimedPointsOfInterestInRoomPathRange::ReturnValue' has a wrong offset!");

// Function LevelVoxelization.VoxelNavAgentComponent.GetVoxelPathLength
// 0x0004 (0x0004 - 0x0000)
struct VoxelNavAgentComponent_GetVoxelPathLength final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VoxelNavAgentComponent_GetVoxelPathLength) == 0x000004, "Wrong alignment on VoxelNavAgentComponent_GetVoxelPathLength");
static_assert(sizeof(VoxelNavAgentComponent_GetVoxelPathLength) == 0x000004, "Wrong size on VoxelNavAgentComponent_GetVoxelPathLength");
static_assert(offsetof(VoxelNavAgentComponent_GetVoxelPathLength, ReturnValue) == 0x000000, "Member 'VoxelNavAgentComponent_GetVoxelPathLength::ReturnValue' has a wrong offset!");

// Function LevelVoxelization.VoxelNavAgentComponent.GetWorldPathPointAtNodeIndex
// 0x0020 (0x0020 - 0x0000)
struct VoxelNavAgentComponent_GetWorldPathPointAtNodeIndex final
{
public:
	int32                                         PathNodeIndex;                                     // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bInterpolateForNavigation;                         // 0x0004(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                OutNormal;                                         // 0x0008(0x000C)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                ReturnValue;                                       // 0x0014(0x000C)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VoxelNavAgentComponent_GetWorldPathPointAtNodeIndex) == 0x000004, "Wrong alignment on VoxelNavAgentComponent_GetWorldPathPointAtNodeIndex");
static_assert(sizeof(VoxelNavAgentComponent_GetWorldPathPointAtNodeIndex) == 0x000020, "Wrong size on VoxelNavAgentComponent_GetWorldPathPointAtNodeIndex");
static_assert(offsetof(VoxelNavAgentComponent_GetWorldPathPointAtNodeIndex, PathNodeIndex) == 0x000000, "Member 'VoxelNavAgentComponent_GetWorldPathPointAtNodeIndex::PathNodeIndex' has a wrong offset!");
static_assert(offsetof(VoxelNavAgentComponent_GetWorldPathPointAtNodeIndex, bInterpolateForNavigation) == 0x000004, "Member 'VoxelNavAgentComponent_GetWorldPathPointAtNodeIndex::bInterpolateForNavigation' has a wrong offset!");
static_assert(offsetof(VoxelNavAgentComponent_GetWorldPathPointAtNodeIndex, OutNormal) == 0x000008, "Member 'VoxelNavAgentComponent_GetWorldPathPointAtNodeIndex::OutNormal' has a wrong offset!");
static_assert(offsetof(VoxelNavAgentComponent_GetWorldPathPointAtNodeIndex, ReturnValue) == 0x000014, "Member 'VoxelNavAgentComponent_GetWorldPathPointAtNodeIndex::ReturnValue' has a wrong offset!");

// Function LevelVoxelization.VoxelNavAgentComponent.HasCurrentNavigationTarget
// 0x0001 (0x0001 - 0x0000)
struct VoxelNavAgentComponent_HasCurrentNavigationTarget final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VoxelNavAgentComponent_HasCurrentNavigationTarget) == 0x000001, "Wrong alignment on VoxelNavAgentComponent_HasCurrentNavigationTarget");
static_assert(sizeof(VoxelNavAgentComponent_HasCurrentNavigationTarget) == 0x000001, "Wrong size on VoxelNavAgentComponent_HasCurrentNavigationTarget");
static_assert(offsetof(VoxelNavAgentComponent_HasCurrentNavigationTarget, ReturnValue) == 0x000000, "Member 'VoxelNavAgentComponent_HasCurrentNavigationTarget::ReturnValue' has a wrong offset!");

// Function LevelVoxelization.VoxelNavAgentComponent.IsAgentLocationTracked
// 0x0001 (0x0001 - 0x0000)
struct VoxelNavAgentComponent_IsAgentLocationTracked final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VoxelNavAgentComponent_IsAgentLocationTracked) == 0x000001, "Wrong alignment on VoxelNavAgentComponent_IsAgentLocationTracked");
static_assert(sizeof(VoxelNavAgentComponent_IsAgentLocationTracked) == 0x000001, "Wrong size on VoxelNavAgentComponent_IsAgentLocationTracked");
static_assert(offsetof(VoxelNavAgentComponent_IsAgentLocationTracked, ReturnValue) == 0x000000, "Member 'VoxelNavAgentComponent_IsAgentLocationTracked::ReturnValue' has a wrong offset!");

// Function LevelVoxelization.VoxelNavAgentComponent.IsAgentOverlappingAnyHazards
// 0x0001 (0x0001 - 0x0000)
struct VoxelNavAgentComponent_IsAgentOverlappingAnyHazards final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VoxelNavAgentComponent_IsAgentOverlappingAnyHazards) == 0x000001, "Wrong alignment on VoxelNavAgentComponent_IsAgentOverlappingAnyHazards");
static_assert(sizeof(VoxelNavAgentComponent_IsAgentOverlappingAnyHazards) == 0x000001, "Wrong size on VoxelNavAgentComponent_IsAgentOverlappingAnyHazards");
static_assert(offsetof(VoxelNavAgentComponent_IsAgentOverlappingAnyHazards, ReturnValue) == 0x000000, "Member 'VoxelNavAgentComponent_IsAgentOverlappingAnyHazards::ReturnValue' has a wrong offset!");

// Function LevelVoxelization.VoxelNavAgentComponent.IsAgentOverlappingSpecificHazards
// 0x0018 (0x0018 - 0x0000)
struct VoxelNavAgentComponent_IsAgentOverlappingSpecificHazards final
{
public:
	TArray<uint8>                                 HazardTypes;                                       // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0010(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(VoxelNavAgentComponent_IsAgentOverlappingSpecificHazards) == 0x000008, "Wrong alignment on VoxelNavAgentComponent_IsAgentOverlappingSpecificHazards");
static_assert(sizeof(VoxelNavAgentComponent_IsAgentOverlappingSpecificHazards) == 0x000018, "Wrong size on VoxelNavAgentComponent_IsAgentOverlappingSpecificHazards");
static_assert(offsetof(VoxelNavAgentComponent_IsAgentOverlappingSpecificHazards, HazardTypes) == 0x000000, "Member 'VoxelNavAgentComponent_IsAgentOverlappingSpecificHazards::HazardTypes' has a wrong offset!");
static_assert(offsetof(VoxelNavAgentComponent_IsAgentOverlappingSpecificHazards, ReturnValue) == 0x000010, "Member 'VoxelNavAgentComponent_IsAgentOverlappingSpecificHazards::ReturnValue' has a wrong offset!");

// Function LevelVoxelization.VoxelNavAgentComponent.IsPathObstructedInDirection
// 0x0038 (0x0038 - 0x0000)
struct VoxelNavAgentComponent_IsPathObstructedInDirection final
{
public:
	struct FVector                                Direction;                                         // 0x0000(0x000C)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Distance;                                          // 0x000C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                OutHitWorldLocation;                               // 0x0010(0x000C)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1C[0x4];                                       // 0x001C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class UVoxelNavAgentComponent*>        OutNavAgentsInPath;                                // 0x0020(0x0010)(Parm, OutParm, ZeroConstructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0030(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_31[0x7];                                       // 0x0031(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(VoxelNavAgentComponent_IsPathObstructedInDirection) == 0x000008, "Wrong alignment on VoxelNavAgentComponent_IsPathObstructedInDirection");
static_assert(sizeof(VoxelNavAgentComponent_IsPathObstructedInDirection) == 0x000038, "Wrong size on VoxelNavAgentComponent_IsPathObstructedInDirection");
static_assert(offsetof(VoxelNavAgentComponent_IsPathObstructedInDirection, Direction) == 0x000000, "Member 'VoxelNavAgentComponent_IsPathObstructedInDirection::Direction' has a wrong offset!");
static_assert(offsetof(VoxelNavAgentComponent_IsPathObstructedInDirection, Distance) == 0x00000C, "Member 'VoxelNavAgentComponent_IsPathObstructedInDirection::Distance' has a wrong offset!");
static_assert(offsetof(VoxelNavAgentComponent_IsPathObstructedInDirection, OutHitWorldLocation) == 0x000010, "Member 'VoxelNavAgentComponent_IsPathObstructedInDirection::OutHitWorldLocation' has a wrong offset!");
static_assert(offsetof(VoxelNavAgentComponent_IsPathObstructedInDirection, OutNavAgentsInPath) == 0x000020, "Member 'VoxelNavAgentComponent_IsPathObstructedInDirection::OutNavAgentsInPath' has a wrong offset!");
static_assert(offsetof(VoxelNavAgentComponent_IsPathObstructedInDirection, ReturnValue) == 0x000030, "Member 'VoxelNavAgentComponent_IsPathObstructedInDirection::ReturnValue' has a wrong offset!");

// Function LevelVoxelization.VoxelNavAgentComponent.WasRecentlyAbleToPathNearProximityTarget
// 0x0001 (0x0001 - 0x0000)
struct VoxelNavAgentComponent_WasRecentlyAbleToPathNearProximityTarget final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VoxelNavAgentComponent_WasRecentlyAbleToPathNearProximityTarget) == 0x000001, "Wrong alignment on VoxelNavAgentComponent_WasRecentlyAbleToPathNearProximityTarget");
static_assert(sizeof(VoxelNavAgentComponent_WasRecentlyAbleToPathNearProximityTarget) == 0x000001, "Wrong size on VoxelNavAgentComponent_WasRecentlyAbleToPathNearProximityTarget");
static_assert(offsetof(VoxelNavAgentComponent_WasRecentlyAbleToPathNearProximityTarget, ReturnValue) == 0x000000, "Member 'VoxelNavAgentComponent_WasRecentlyAbleToPathNearProximityTarget::ReturnValue' has a wrong offset!");

// Function LevelVoxelization.VoxelNavigationManager.CreateSpatialNavigationQueryAtWorldLocation
// 0x0030 (0x0030 - 0x0000)
struct VoxelNavigationManager_CreateSpatialNavigationQueryAtWorldLocation final
{
public:
	EVoxelNavigationType                          NavigationType;                                    // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                WorldLocation;                                     // 0x0004(0x000C)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         AgentVoxelWidth;                                   // 0x0010(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         AgentVoxelHeight;                                  // 0x0014(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         MaxVoxelStepHeight;                                // 0x0018(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         MaxVoxelFallHeight;                                // 0x001C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bCanOpenDoors;                                     // 0x0020(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bCanChangeNavModifiers;                            // 0x0021(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_22[0x6];                                       // 0x0022(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class UVoxelSpatialNavigationQuery*           ReturnValue;                                       // 0x0028(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VoxelNavigationManager_CreateSpatialNavigationQueryAtWorldLocation) == 0x000008, "Wrong alignment on VoxelNavigationManager_CreateSpatialNavigationQueryAtWorldLocation");
static_assert(sizeof(VoxelNavigationManager_CreateSpatialNavigationQueryAtWorldLocation) == 0x000030, "Wrong size on VoxelNavigationManager_CreateSpatialNavigationQueryAtWorldLocation");
static_assert(offsetof(VoxelNavigationManager_CreateSpatialNavigationQueryAtWorldLocation, NavigationType) == 0x000000, "Member 'VoxelNavigationManager_CreateSpatialNavigationQueryAtWorldLocation::NavigationType' has a wrong offset!");
static_assert(offsetof(VoxelNavigationManager_CreateSpatialNavigationQueryAtWorldLocation, WorldLocation) == 0x000004, "Member 'VoxelNavigationManager_CreateSpatialNavigationQueryAtWorldLocation::WorldLocation' has a wrong offset!");
static_assert(offsetof(VoxelNavigationManager_CreateSpatialNavigationQueryAtWorldLocation, AgentVoxelWidth) == 0x000010, "Member 'VoxelNavigationManager_CreateSpatialNavigationQueryAtWorldLocation::AgentVoxelWidth' has a wrong offset!");
static_assert(offsetof(VoxelNavigationManager_CreateSpatialNavigationQueryAtWorldLocation, AgentVoxelHeight) == 0x000014, "Member 'VoxelNavigationManager_CreateSpatialNavigationQueryAtWorldLocation::AgentVoxelHeight' has a wrong offset!");
static_assert(offsetof(VoxelNavigationManager_CreateSpatialNavigationQueryAtWorldLocation, MaxVoxelStepHeight) == 0x000018, "Member 'VoxelNavigationManager_CreateSpatialNavigationQueryAtWorldLocation::MaxVoxelStepHeight' has a wrong offset!");
static_assert(offsetof(VoxelNavigationManager_CreateSpatialNavigationQueryAtWorldLocation, MaxVoxelFallHeight) == 0x00001C, "Member 'VoxelNavigationManager_CreateSpatialNavigationQueryAtWorldLocation::MaxVoxelFallHeight' has a wrong offset!");
static_assert(offsetof(VoxelNavigationManager_CreateSpatialNavigationQueryAtWorldLocation, bCanOpenDoors) == 0x000020, "Member 'VoxelNavigationManager_CreateSpatialNavigationQueryAtWorldLocation::bCanOpenDoors' has a wrong offset!");
static_assert(offsetof(VoxelNavigationManager_CreateSpatialNavigationQueryAtWorldLocation, bCanChangeNavModifiers) == 0x000021, "Member 'VoxelNavigationManager_CreateSpatialNavigationQueryAtWorldLocation::bCanChangeNavModifiers' has a wrong offset!");
static_assert(offsetof(VoxelNavigationManager_CreateSpatialNavigationQueryAtWorldLocation, ReturnValue) == 0x000028, "Member 'VoxelNavigationManager_CreateSpatialNavigationQueryAtWorldLocation::ReturnValue' has a wrong offset!");

// Function LevelVoxelization.VoxelNavigationManager.RegisterPointOfInterest
// 0x0008 (0x0008 - 0x0000)
struct VoxelNavigationManager_RegisterPointOfInterest final
{
public:
	class USceneComponent*                        SceneComponent;                                    // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VoxelNavigationManager_RegisterPointOfInterest) == 0x000008, "Wrong alignment on VoxelNavigationManager_RegisterPointOfInterest");
static_assert(sizeof(VoxelNavigationManager_RegisterPointOfInterest) == 0x000008, "Wrong size on VoxelNavigationManager_RegisterPointOfInterest");
static_assert(offsetof(VoxelNavigationManager_RegisterPointOfInterest, SceneComponent) == 0x000000, "Member 'VoxelNavigationManager_RegisterPointOfInterest::SceneComponent' has a wrong offset!");

// Function LevelVoxelization.VoxelNavigationManager.CanAgentWithSizeFitAtWorldLocation
// 0x001C (0x001C - 0x0000)
struct VoxelNavigationManager_CanAgentWithSizeFitAtWorldLocation final
{
public:
	EVoxelNavigationType                          NavigationType;                                    // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FIntPoint                              AgentDimensions;                                   // 0x0004(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                WorldLocation;                                     // 0x000C(0x000C)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0018(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_19[0x3];                                       // 0x0019(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(VoxelNavigationManager_CanAgentWithSizeFitAtWorldLocation) == 0x000004, "Wrong alignment on VoxelNavigationManager_CanAgentWithSizeFitAtWorldLocation");
static_assert(sizeof(VoxelNavigationManager_CanAgentWithSizeFitAtWorldLocation) == 0x00001C, "Wrong size on VoxelNavigationManager_CanAgentWithSizeFitAtWorldLocation");
static_assert(offsetof(VoxelNavigationManager_CanAgentWithSizeFitAtWorldLocation, NavigationType) == 0x000000, "Member 'VoxelNavigationManager_CanAgentWithSizeFitAtWorldLocation::NavigationType' has a wrong offset!");
static_assert(offsetof(VoxelNavigationManager_CanAgentWithSizeFitAtWorldLocation, AgentDimensions) == 0x000004, "Member 'VoxelNavigationManager_CanAgentWithSizeFitAtWorldLocation::AgentDimensions' has a wrong offset!");
static_assert(offsetof(VoxelNavigationManager_CanAgentWithSizeFitAtWorldLocation, WorldLocation) == 0x00000C, "Member 'VoxelNavigationManager_CanAgentWithSizeFitAtWorldLocation::WorldLocation' has a wrong offset!");
static_assert(offsetof(VoxelNavigationManager_CanAgentWithSizeFitAtWorldLocation, ReturnValue) == 0x000018, "Member 'VoxelNavigationManager_CanAgentWithSizeFitAtWorldLocation::ReturnValue' has a wrong offset!");

// Function LevelVoxelization.VoxelNavigationManager.GetFloorForAgentCapsule
// 0x0048 (0x0048 - 0x0000)
struct VoxelNavigationManager_GetFloorForAgentCapsule final
{
public:
	struct FVector                                LastLocation;                                      // 0x0000(0x000C)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                CurrLocation;                                      // 0x000C(0x000C)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                CylinderVector;                                    // 0x0018(0x000C)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         CapsuleRadius;                                     // 0x0024(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                OutCollisionPoint;                                 // 0x0028(0x000C)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                OutCollisionNormal;                                // 0x0034(0x000C)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         OutPenetrationDepth;                               // 0x0040(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0044(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_45[0x3];                                       // 0x0045(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(VoxelNavigationManager_GetFloorForAgentCapsule) == 0x000004, "Wrong alignment on VoxelNavigationManager_GetFloorForAgentCapsule");
static_assert(sizeof(VoxelNavigationManager_GetFloorForAgentCapsule) == 0x000048, "Wrong size on VoxelNavigationManager_GetFloorForAgentCapsule");
static_assert(offsetof(VoxelNavigationManager_GetFloorForAgentCapsule, LastLocation) == 0x000000, "Member 'VoxelNavigationManager_GetFloorForAgentCapsule::LastLocation' has a wrong offset!");
static_assert(offsetof(VoxelNavigationManager_GetFloorForAgentCapsule, CurrLocation) == 0x00000C, "Member 'VoxelNavigationManager_GetFloorForAgentCapsule::CurrLocation' has a wrong offset!");
static_assert(offsetof(VoxelNavigationManager_GetFloorForAgentCapsule, CylinderVector) == 0x000018, "Member 'VoxelNavigationManager_GetFloorForAgentCapsule::CylinderVector' has a wrong offset!");
static_assert(offsetof(VoxelNavigationManager_GetFloorForAgentCapsule, CapsuleRadius) == 0x000024, "Member 'VoxelNavigationManager_GetFloorForAgentCapsule::CapsuleRadius' has a wrong offset!");
static_assert(offsetof(VoxelNavigationManager_GetFloorForAgentCapsule, OutCollisionPoint) == 0x000028, "Member 'VoxelNavigationManager_GetFloorForAgentCapsule::OutCollisionPoint' has a wrong offset!");
static_assert(offsetof(VoxelNavigationManager_GetFloorForAgentCapsule, OutCollisionNormal) == 0x000034, "Member 'VoxelNavigationManager_GetFloorForAgentCapsule::OutCollisionNormal' has a wrong offset!");
static_assert(offsetof(VoxelNavigationManager_GetFloorForAgentCapsule, OutPenetrationDepth) == 0x000040, "Member 'VoxelNavigationManager_GetFloorForAgentCapsule::OutPenetrationDepth' has a wrong offset!");
static_assert(offsetof(VoxelNavigationManager_GetFloorForAgentCapsule, ReturnValue) == 0x000044, "Member 'VoxelNavigationManager_GetFloorForAgentCapsule::ReturnValue' has a wrong offset!");

// Function LevelVoxelization.VoxelNavigationManager.GetNavigationAgentsInWorldBounds
// 0x0060 (0x0060 - 0x0000)
struct VoxelNavigationManager_GetNavigationAgentsInWorldBounds final
{
public:
	struct FBox                                   WorldBounds;                                       // 0x0000(0x001C)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_1C[0x4];                                       // 0x001C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TSoftClassPtr<class UClass>                   RequireClass;                                      // 0x0020(0x0028)(Parm, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 IgnoreActor;                                       // 0x0048(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class UVoxelNavAgentComponent*>        ReturnValue;                                       // 0x0050(0x0010)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, ContainsInstancedReference, NativeAccessSpecifierPublic)
};
static_assert(alignof(VoxelNavigationManager_GetNavigationAgentsInWorldBounds) == 0x000008, "Wrong alignment on VoxelNavigationManager_GetNavigationAgentsInWorldBounds");
static_assert(sizeof(VoxelNavigationManager_GetNavigationAgentsInWorldBounds) == 0x000060, "Wrong size on VoxelNavigationManager_GetNavigationAgentsInWorldBounds");
static_assert(offsetof(VoxelNavigationManager_GetNavigationAgentsInWorldBounds, WorldBounds) == 0x000000, "Member 'VoxelNavigationManager_GetNavigationAgentsInWorldBounds::WorldBounds' has a wrong offset!");
static_assert(offsetof(VoxelNavigationManager_GetNavigationAgentsInWorldBounds, RequireClass) == 0x000020, "Member 'VoxelNavigationManager_GetNavigationAgentsInWorldBounds::RequireClass' has a wrong offset!");
static_assert(offsetof(VoxelNavigationManager_GetNavigationAgentsInWorldBounds, IgnoreActor) == 0x000048, "Member 'VoxelNavigationManager_GetNavigationAgentsInWorldBounds::IgnoreActor' has a wrong offset!");
static_assert(offsetof(VoxelNavigationManager_GetNavigationAgentsInWorldBounds, ReturnValue) == 0x000050, "Member 'VoxelNavigationManager_GetNavigationAgentsInWorldBounds::ReturnValue' has a wrong offset!");

// Function LevelVoxelization.VoxelNavigationManager.GetNavigationAgentsUsingSphereTrace
// 0x0050 (0x0050 - 0x0000)
struct VoxelNavigationManager_GetNavigationAgentsUsingSphereTrace final
{
public:
	struct FVector                                TraceSourceLocation;                               // 0x0000(0x000C)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                TraceTargetLocation;                               // 0x000C(0x000C)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         TraceRadius;                                       // 0x0018(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1C[0x4];                                       // 0x001C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class AActor*>                         IgnoreActors;                                      // 0x0020(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
	TArray<class UVoxelNavAgentComponent*>        IncludeUntrackedAgents;                            // 0x0030(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, ContainsInstancedReference, NativeAccessSpecifierPublic)
	TArray<struct FVoxelNavAgentTraceResult>      ReturnValue;                                       // 0x0040(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, ContainsInstancedReference, NativeAccessSpecifierPublic)
};
static_assert(alignof(VoxelNavigationManager_GetNavigationAgentsUsingSphereTrace) == 0x000008, "Wrong alignment on VoxelNavigationManager_GetNavigationAgentsUsingSphereTrace");
static_assert(sizeof(VoxelNavigationManager_GetNavigationAgentsUsingSphereTrace) == 0x000050, "Wrong size on VoxelNavigationManager_GetNavigationAgentsUsingSphereTrace");
static_assert(offsetof(VoxelNavigationManager_GetNavigationAgentsUsingSphereTrace, TraceSourceLocation) == 0x000000, "Member 'VoxelNavigationManager_GetNavigationAgentsUsingSphereTrace::TraceSourceLocation' has a wrong offset!");
static_assert(offsetof(VoxelNavigationManager_GetNavigationAgentsUsingSphereTrace, TraceTargetLocation) == 0x00000C, "Member 'VoxelNavigationManager_GetNavigationAgentsUsingSphereTrace::TraceTargetLocation' has a wrong offset!");
static_assert(offsetof(VoxelNavigationManager_GetNavigationAgentsUsingSphereTrace, TraceRadius) == 0x000018, "Member 'VoxelNavigationManager_GetNavigationAgentsUsingSphereTrace::TraceRadius' has a wrong offset!");
static_assert(offsetof(VoxelNavigationManager_GetNavigationAgentsUsingSphereTrace, IgnoreActors) == 0x000020, "Member 'VoxelNavigationManager_GetNavigationAgentsUsingSphereTrace::IgnoreActors' has a wrong offset!");
static_assert(offsetof(VoxelNavigationManager_GetNavigationAgentsUsingSphereTrace, IncludeUntrackedAgents) == 0x000030, "Member 'VoxelNavigationManager_GetNavigationAgentsUsingSphereTrace::IncludeUntrackedAgents' has a wrong offset!");
static_assert(offsetof(VoxelNavigationManager_GetNavigationAgentsUsingSphereTrace, ReturnValue) == 0x000040, "Member 'VoxelNavigationManager_GetNavigationAgentsUsingSphereTrace::ReturnValue' has a wrong offset!");

// Function LevelVoxelization.VoxelSpatialNavigationQuery.AddAllGroundVoxelsInBox
// 0x001C (0x001C - 0x0000)
struct VoxelSpatialNavigationQuery_AddAllGroundVoxelsInBox final
{
public:
	struct FVector                                BoxLocation;                                       // 0x0000(0x000C)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                BoxHalfExtent;                                     // 0x000C(0x000C)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0018(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_19[0x3];                                       // 0x0019(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(VoxelSpatialNavigationQuery_AddAllGroundVoxelsInBox) == 0x000004, "Wrong alignment on VoxelSpatialNavigationQuery_AddAllGroundVoxelsInBox");
static_assert(sizeof(VoxelSpatialNavigationQuery_AddAllGroundVoxelsInBox) == 0x00001C, "Wrong size on VoxelSpatialNavigationQuery_AddAllGroundVoxelsInBox");
static_assert(offsetof(VoxelSpatialNavigationQuery_AddAllGroundVoxelsInBox, BoxLocation) == 0x000000, "Member 'VoxelSpatialNavigationQuery_AddAllGroundVoxelsInBox::BoxLocation' has a wrong offset!");
static_assert(offsetof(VoxelSpatialNavigationQuery_AddAllGroundVoxelsInBox, BoxHalfExtent) == 0x00000C, "Member 'VoxelSpatialNavigationQuery_AddAllGroundVoxelsInBox::BoxHalfExtent' has a wrong offset!");
static_assert(offsetof(VoxelSpatialNavigationQuery_AddAllGroundVoxelsInBox, ReturnValue) == 0x000018, "Member 'VoxelSpatialNavigationQuery_AddAllGroundVoxelsInBox::ReturnValue' has a wrong offset!");

// Function LevelVoxelization.VoxelSpatialNavigationQuery.AddPathableVoxelsInBox
// 0x002C (0x002C - 0x0000)
struct VoxelSpatialNavigationQuery_AddPathableVoxelsInBox final
{
public:
	struct FVector                                BoxLocation;                                       // 0x0000(0x000C)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                BoxHalfExtent;                                     // 0x000C(0x000C)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EVoxelSpatialQueryFuncType                    WeightType;                                        // 0x0018(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_19[0x3];                                       // 0x0019(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         WeightScale;                                       // 0x001C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         MinPathDistance;                                   // 0x0020(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         MaxPathDistance;                                   // 0x0024(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0028(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_29[0x3];                                       // 0x0029(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(VoxelSpatialNavigationQuery_AddPathableVoxelsInBox) == 0x000004, "Wrong alignment on VoxelSpatialNavigationQuery_AddPathableVoxelsInBox");
static_assert(sizeof(VoxelSpatialNavigationQuery_AddPathableVoxelsInBox) == 0x00002C, "Wrong size on VoxelSpatialNavigationQuery_AddPathableVoxelsInBox");
static_assert(offsetof(VoxelSpatialNavigationQuery_AddPathableVoxelsInBox, BoxLocation) == 0x000000, "Member 'VoxelSpatialNavigationQuery_AddPathableVoxelsInBox::BoxLocation' has a wrong offset!");
static_assert(offsetof(VoxelSpatialNavigationQuery_AddPathableVoxelsInBox, BoxHalfExtent) == 0x00000C, "Member 'VoxelSpatialNavigationQuery_AddPathableVoxelsInBox::BoxHalfExtent' has a wrong offset!");
static_assert(offsetof(VoxelSpatialNavigationQuery_AddPathableVoxelsInBox, WeightType) == 0x000018, "Member 'VoxelSpatialNavigationQuery_AddPathableVoxelsInBox::WeightType' has a wrong offset!");
static_assert(offsetof(VoxelSpatialNavigationQuery_AddPathableVoxelsInBox, WeightScale) == 0x00001C, "Member 'VoxelSpatialNavigationQuery_AddPathableVoxelsInBox::WeightScale' has a wrong offset!");
static_assert(offsetof(VoxelSpatialNavigationQuery_AddPathableVoxelsInBox, MinPathDistance) == 0x000020, "Member 'VoxelSpatialNavigationQuery_AddPathableVoxelsInBox::MinPathDistance' has a wrong offset!");
static_assert(offsetof(VoxelSpatialNavigationQuery_AddPathableVoxelsInBox, MaxPathDistance) == 0x000024, "Member 'VoxelSpatialNavigationQuery_AddPathableVoxelsInBox::MaxPathDistance' has a wrong offset!");
static_assert(offsetof(VoxelSpatialNavigationQuery_AddPathableVoxelsInBox, ReturnValue) == 0x000028, "Member 'VoxelSpatialNavigationQuery_AddPathableVoxelsInBox::ReturnValue' has a wrong offset!");

// Function LevelVoxelization.VoxelSpatialNavigationQuery.ExecuteQueryInBackground
// 0x000C (0x000C - 0x0000)
struct VoxelSpatialNavigationQuery_ExecuteQueryInBackground final
{
public:
	int32                                         DesiredLocationCount;                              // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         WeightFilterPercent;                               // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(VoxelSpatialNavigationQuery_ExecuteQueryInBackground) == 0x000004, "Wrong alignment on VoxelSpatialNavigationQuery_ExecuteQueryInBackground");
static_assert(sizeof(VoxelSpatialNavigationQuery_ExecuteQueryInBackground) == 0x00000C, "Wrong size on VoxelSpatialNavigationQuery_ExecuteQueryInBackground");
static_assert(offsetof(VoxelSpatialNavigationQuery_ExecuteQueryInBackground, DesiredLocationCount) == 0x000000, "Member 'VoxelSpatialNavigationQuery_ExecuteQueryInBackground::DesiredLocationCount' has a wrong offset!");
static_assert(offsetof(VoxelSpatialNavigationQuery_ExecuteQueryInBackground, WeightFilterPercent) == 0x000004, "Member 'VoxelSpatialNavigationQuery_ExecuteQueryInBackground::WeightFilterPercent' has a wrong offset!");
static_assert(offsetof(VoxelSpatialNavigationQuery_ExecuteQueryInBackground, ReturnValue) == 0x000008, "Member 'VoxelSpatialNavigationQuery_ExecuteQueryInBackground::ReturnValue' has a wrong offset!");

// Function LevelVoxelization.VoxelSpatialNavigationQuery.FilterByVisibilityToPoint
// 0x0028 (0x0028 - 0x0000)
struct VoxelSpatialNavigationQuery_FilterByVisibilityToPoint final
{
public:
	struct FVector                                Point;                                             // 0x0000(0x000C)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bKeepIfVisible;                                    // 0x000C(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bTraceComplex;                                     // 0x000D(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_E[0x2];                                        // 0x000E(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class AActor*>                         ActorsToIgnore;                                    // 0x0010(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
	int32                                         LocationFlags;                                     // 0x0020(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ECollisionChannel                             TraceChannel;                                      // 0x0024(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0025(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_26[0x2];                                       // 0x0026(0x0002)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(VoxelSpatialNavigationQuery_FilterByVisibilityToPoint) == 0x000008, "Wrong alignment on VoxelSpatialNavigationQuery_FilterByVisibilityToPoint");
static_assert(sizeof(VoxelSpatialNavigationQuery_FilterByVisibilityToPoint) == 0x000028, "Wrong size on VoxelSpatialNavigationQuery_FilterByVisibilityToPoint");
static_assert(offsetof(VoxelSpatialNavigationQuery_FilterByVisibilityToPoint, Point) == 0x000000, "Member 'VoxelSpatialNavigationQuery_FilterByVisibilityToPoint::Point' has a wrong offset!");
static_assert(offsetof(VoxelSpatialNavigationQuery_FilterByVisibilityToPoint, bKeepIfVisible) == 0x00000C, "Member 'VoxelSpatialNavigationQuery_FilterByVisibilityToPoint::bKeepIfVisible' has a wrong offset!");
static_assert(offsetof(VoxelSpatialNavigationQuery_FilterByVisibilityToPoint, bTraceComplex) == 0x00000D, "Member 'VoxelSpatialNavigationQuery_FilterByVisibilityToPoint::bTraceComplex' has a wrong offset!");
static_assert(offsetof(VoxelSpatialNavigationQuery_FilterByVisibilityToPoint, ActorsToIgnore) == 0x000010, "Member 'VoxelSpatialNavigationQuery_FilterByVisibilityToPoint::ActorsToIgnore' has a wrong offset!");
static_assert(offsetof(VoxelSpatialNavigationQuery_FilterByVisibilityToPoint, LocationFlags) == 0x000020, "Member 'VoxelSpatialNavigationQuery_FilterByVisibilityToPoint::LocationFlags' has a wrong offset!");
static_assert(offsetof(VoxelSpatialNavigationQuery_FilterByVisibilityToPoint, TraceChannel) == 0x000024, "Member 'VoxelSpatialNavigationQuery_FilterByVisibilityToPoint::TraceChannel' has a wrong offset!");
static_assert(offsetof(VoxelSpatialNavigationQuery_FilterByVisibilityToPoint, ReturnValue) == 0x000025, "Member 'VoxelSpatialNavigationQuery_FilterByVisibilityToPoint::ReturnValue' has a wrong offset!");

// Function LevelVoxelization.VoxelSpatialNavigationQuery.FilterOutActorLocations
// 0x0020 (0x0020 - 0x0000)
struct VoxelSpatialNavigationQuery_FilterOutActorLocations final
{
public:
	TSubclassOf<class AActor>                     ClassFilter;                                       // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 ActorToIgnore;                                     // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Radius;                                            // 0x0010(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         AddedCost;                                         // 0x0014(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0018(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_19[0x7];                                       // 0x0019(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(VoxelSpatialNavigationQuery_FilterOutActorLocations) == 0x000008, "Wrong alignment on VoxelSpatialNavigationQuery_FilterOutActorLocations");
static_assert(sizeof(VoxelSpatialNavigationQuery_FilterOutActorLocations) == 0x000020, "Wrong size on VoxelSpatialNavigationQuery_FilterOutActorLocations");
static_assert(offsetof(VoxelSpatialNavigationQuery_FilterOutActorLocations, ClassFilter) == 0x000000, "Member 'VoxelSpatialNavigationQuery_FilterOutActorLocations::ClassFilter' has a wrong offset!");
static_assert(offsetof(VoxelSpatialNavigationQuery_FilterOutActorLocations, ActorToIgnore) == 0x000008, "Member 'VoxelSpatialNavigationQuery_FilterOutActorLocations::ActorToIgnore' has a wrong offset!");
static_assert(offsetof(VoxelSpatialNavigationQuery_FilterOutActorLocations, Radius) == 0x000010, "Member 'VoxelSpatialNavigationQuery_FilterOutActorLocations::Radius' has a wrong offset!");
static_assert(offsetof(VoxelSpatialNavigationQuery_FilterOutActorLocations, AddedCost) == 0x000014, "Member 'VoxelSpatialNavigationQuery_FilterOutActorLocations::AddedCost' has a wrong offset!");
static_assert(offsetof(VoxelSpatialNavigationQuery_FilterOutActorLocations, ReturnValue) == 0x000018, "Member 'VoxelSpatialNavigationQuery_FilterOutActorLocations::ReturnValue' has a wrong offset!");

// Function LevelVoxelization.VoxelSpatialNavigationQuery.FilterOutWorldLocations
// 0x0020 (0x0020 - 0x0000)
struct VoxelSpatialNavigationQuery_FilterOutWorldLocations final
{
public:
	TArray<struct FVector>                        WorldLocations;                                    // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
	float                                         Radius;                                            // 0x0010(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         AddedCost;                                         // 0x0014(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0018(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_19[0x7];                                       // 0x0019(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(VoxelSpatialNavigationQuery_FilterOutWorldLocations) == 0x000008, "Wrong alignment on VoxelSpatialNavigationQuery_FilterOutWorldLocations");
static_assert(sizeof(VoxelSpatialNavigationQuery_FilterOutWorldLocations) == 0x000020, "Wrong size on VoxelSpatialNavigationQuery_FilterOutWorldLocations");
static_assert(offsetof(VoxelSpatialNavigationQuery_FilterOutWorldLocations, WorldLocations) == 0x000000, "Member 'VoxelSpatialNavigationQuery_FilterOutWorldLocations::WorldLocations' has a wrong offset!");
static_assert(offsetof(VoxelSpatialNavigationQuery_FilterOutWorldLocations, Radius) == 0x000010, "Member 'VoxelSpatialNavigationQuery_FilterOutWorldLocations::Radius' has a wrong offset!");
static_assert(offsetof(VoxelSpatialNavigationQuery_FilterOutWorldLocations, AddedCost) == 0x000014, "Member 'VoxelSpatialNavigationQuery_FilterOutWorldLocations::AddedCost' has a wrong offset!");
static_assert(offsetof(VoxelSpatialNavigationQuery_FilterOutWorldLocations, ReturnValue) == 0x000018, "Member 'VoxelSpatialNavigationQuery_FilterOutWorldLocations::ReturnValue' has a wrong offset!");

// Function LevelVoxelization.VoxelSpatialNavigationQuery.WeightByAngleFromViewpoint
// 0x0034 (0x0034 - 0x0000)
struct VoxelSpatialNavigationQuery_WeightByAngleFromViewpoint final
{
public:
	struct FVector                                ViewLocation;                                      // 0x0000(0x000C)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                ViewDirection;                                     // 0x000C(0x000C)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EVoxelSpatialQueryFuncType                    WeightType;                                        // 0x0018(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_19[0x3];                                       // 0x0019(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         WeightScale;                                       // 0x001C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MidpointBias;                                      // 0x0020(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          b2D;                                               // 0x0024(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_25[0x3];                                       // 0x0025(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         MinAngle;                                          // 0x0028(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         MaxAngle;                                          // 0x002C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0030(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_31[0x3];                                       // 0x0031(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(VoxelSpatialNavigationQuery_WeightByAngleFromViewpoint) == 0x000004, "Wrong alignment on VoxelSpatialNavigationQuery_WeightByAngleFromViewpoint");
static_assert(sizeof(VoxelSpatialNavigationQuery_WeightByAngleFromViewpoint) == 0x000034, "Wrong size on VoxelSpatialNavigationQuery_WeightByAngleFromViewpoint");
static_assert(offsetof(VoxelSpatialNavigationQuery_WeightByAngleFromViewpoint, ViewLocation) == 0x000000, "Member 'VoxelSpatialNavigationQuery_WeightByAngleFromViewpoint::ViewLocation' has a wrong offset!");
static_assert(offsetof(VoxelSpatialNavigationQuery_WeightByAngleFromViewpoint, ViewDirection) == 0x00000C, "Member 'VoxelSpatialNavigationQuery_WeightByAngleFromViewpoint::ViewDirection' has a wrong offset!");
static_assert(offsetof(VoxelSpatialNavigationQuery_WeightByAngleFromViewpoint, WeightType) == 0x000018, "Member 'VoxelSpatialNavigationQuery_WeightByAngleFromViewpoint::WeightType' has a wrong offset!");
static_assert(offsetof(VoxelSpatialNavigationQuery_WeightByAngleFromViewpoint, WeightScale) == 0x00001C, "Member 'VoxelSpatialNavigationQuery_WeightByAngleFromViewpoint::WeightScale' has a wrong offset!");
static_assert(offsetof(VoxelSpatialNavigationQuery_WeightByAngleFromViewpoint, MidpointBias) == 0x000020, "Member 'VoxelSpatialNavigationQuery_WeightByAngleFromViewpoint::MidpointBias' has a wrong offset!");
static_assert(offsetof(VoxelSpatialNavigationQuery_WeightByAngleFromViewpoint, b2D) == 0x000024, "Member 'VoxelSpatialNavigationQuery_WeightByAngleFromViewpoint::b2D' has a wrong offset!");
static_assert(offsetof(VoxelSpatialNavigationQuery_WeightByAngleFromViewpoint, MinAngle) == 0x000028, "Member 'VoxelSpatialNavigationQuery_WeightByAngleFromViewpoint::MinAngle' has a wrong offset!");
static_assert(offsetof(VoxelSpatialNavigationQuery_WeightByAngleFromViewpoint, MaxAngle) == 0x00002C, "Member 'VoxelSpatialNavigationQuery_WeightByAngleFromViewpoint::MaxAngle' has a wrong offset!");
static_assert(offsetof(VoxelSpatialNavigationQuery_WeightByAngleFromViewpoint, ReturnValue) == 0x000030, "Member 'VoxelSpatialNavigationQuery_WeightByAngleFromViewpoint::ReturnValue' has a wrong offset!");

// Function LevelVoxelization.VoxelSpatialNavigationQuery.WeightByDistanceFromObstacles
// 0x000C (0x000C - 0x0000)
struct VoxelSpatialNavigationQuery_WeightByDistanceFromObstacles final
{
public:
	float                                         DistanceCutoff;                                    // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         WeightScale;                                       // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(VoxelSpatialNavigationQuery_WeightByDistanceFromObstacles) == 0x000004, "Wrong alignment on VoxelSpatialNavigationQuery_WeightByDistanceFromObstacles");
static_assert(sizeof(VoxelSpatialNavigationQuery_WeightByDistanceFromObstacles) == 0x00000C, "Wrong size on VoxelSpatialNavigationQuery_WeightByDistanceFromObstacles");
static_assert(offsetof(VoxelSpatialNavigationQuery_WeightByDistanceFromObstacles, DistanceCutoff) == 0x000000, "Member 'VoxelSpatialNavigationQuery_WeightByDistanceFromObstacles::DistanceCutoff' has a wrong offset!");
static_assert(offsetof(VoxelSpatialNavigationQuery_WeightByDistanceFromObstacles, WeightScale) == 0x000004, "Member 'VoxelSpatialNavigationQuery_WeightByDistanceFromObstacles::WeightScale' has a wrong offset!");
static_assert(offsetof(VoxelSpatialNavigationQuery_WeightByDistanceFromObstacles, ReturnValue) == 0x000008, "Member 'VoxelSpatialNavigationQuery_WeightByDistanceFromObstacles::ReturnValue' has a wrong offset!");

// Function LevelVoxelization.VoxelSpatialNavigationQuery.WeightByDistanceFromPoint
// 0x0028 (0x0028 - 0x0000)
struct VoxelSpatialNavigationQuery_WeightByDistanceFromPoint final
{
public:
	struct FVector                                Point;                                             // 0x0000(0x000C)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EVoxelSpatialQueryFuncType                    WeightType;                                        // 0x000C(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_D[0x3];                                        // 0x000D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         WeightScale;                                       // 0x0010(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MidpointBias;                                      // 0x0014(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          b2D;                                               // 0x0018(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_19[0x3];                                       // 0x0019(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         MinDistance;                                       // 0x001C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         MaxDistance;                                       // 0x0020(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0024(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_25[0x3];                                       // 0x0025(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(VoxelSpatialNavigationQuery_WeightByDistanceFromPoint) == 0x000004, "Wrong alignment on VoxelSpatialNavigationQuery_WeightByDistanceFromPoint");
static_assert(sizeof(VoxelSpatialNavigationQuery_WeightByDistanceFromPoint) == 0x000028, "Wrong size on VoxelSpatialNavigationQuery_WeightByDistanceFromPoint");
static_assert(offsetof(VoxelSpatialNavigationQuery_WeightByDistanceFromPoint, Point) == 0x000000, "Member 'VoxelSpatialNavigationQuery_WeightByDistanceFromPoint::Point' has a wrong offset!");
static_assert(offsetof(VoxelSpatialNavigationQuery_WeightByDistanceFromPoint, WeightType) == 0x00000C, "Member 'VoxelSpatialNavigationQuery_WeightByDistanceFromPoint::WeightType' has a wrong offset!");
static_assert(offsetof(VoxelSpatialNavigationQuery_WeightByDistanceFromPoint, WeightScale) == 0x000010, "Member 'VoxelSpatialNavigationQuery_WeightByDistanceFromPoint::WeightScale' has a wrong offset!");
static_assert(offsetof(VoxelSpatialNavigationQuery_WeightByDistanceFromPoint, MidpointBias) == 0x000014, "Member 'VoxelSpatialNavigationQuery_WeightByDistanceFromPoint::MidpointBias' has a wrong offset!");
static_assert(offsetof(VoxelSpatialNavigationQuery_WeightByDistanceFromPoint, b2D) == 0x000018, "Member 'VoxelSpatialNavigationQuery_WeightByDistanceFromPoint::b2D' has a wrong offset!");
static_assert(offsetof(VoxelSpatialNavigationQuery_WeightByDistanceFromPoint, MinDistance) == 0x00001C, "Member 'VoxelSpatialNavigationQuery_WeightByDistanceFromPoint::MinDistance' has a wrong offset!");
static_assert(offsetof(VoxelSpatialNavigationQuery_WeightByDistanceFromPoint, MaxDistance) == 0x000020, "Member 'VoxelSpatialNavigationQuery_WeightByDistanceFromPoint::MaxDistance' has a wrong offset!");
static_assert(offsetof(VoxelSpatialNavigationQuery_WeightByDistanceFromPoint, ReturnValue) == 0x000024, "Member 'VoxelSpatialNavigationQuery_WeightByDistanceFromPoint::ReturnValue' has a wrong offset!");

// Function LevelVoxelization.VoxelSpatialNavigationQuery.WeightByHeightRange
// 0x001C (0x001C - 0x0000)
struct VoxelSpatialNavigationQuery_WeightByHeightRange final
{
public:
	float                                         WorldZLocation;                                    // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EVoxelSpatialQueryFuncType                    WeightType;                                        // 0x0004(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         WeightScale;                                       // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MidpointBias;                                      // 0x000C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bAbove;                                            // 0x0010(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bBelow;                                            // 0x0011(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_12[0x2];                                       // 0x0012(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         MaxHeightRange;                                    // 0x0014(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0018(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_19[0x3];                                       // 0x0019(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(VoxelSpatialNavigationQuery_WeightByHeightRange) == 0x000004, "Wrong alignment on VoxelSpatialNavigationQuery_WeightByHeightRange");
static_assert(sizeof(VoxelSpatialNavigationQuery_WeightByHeightRange) == 0x00001C, "Wrong size on VoxelSpatialNavigationQuery_WeightByHeightRange");
static_assert(offsetof(VoxelSpatialNavigationQuery_WeightByHeightRange, WorldZLocation) == 0x000000, "Member 'VoxelSpatialNavigationQuery_WeightByHeightRange::WorldZLocation' has a wrong offset!");
static_assert(offsetof(VoxelSpatialNavigationQuery_WeightByHeightRange, WeightType) == 0x000004, "Member 'VoxelSpatialNavigationQuery_WeightByHeightRange::WeightType' has a wrong offset!");
static_assert(offsetof(VoxelSpatialNavigationQuery_WeightByHeightRange, WeightScale) == 0x000008, "Member 'VoxelSpatialNavigationQuery_WeightByHeightRange::WeightScale' has a wrong offset!");
static_assert(offsetof(VoxelSpatialNavigationQuery_WeightByHeightRange, MidpointBias) == 0x00000C, "Member 'VoxelSpatialNavigationQuery_WeightByHeightRange::MidpointBias' has a wrong offset!");
static_assert(offsetof(VoxelSpatialNavigationQuery_WeightByHeightRange, bAbove) == 0x000010, "Member 'VoxelSpatialNavigationQuery_WeightByHeightRange::bAbove' has a wrong offset!");
static_assert(offsetof(VoxelSpatialNavigationQuery_WeightByHeightRange, bBelow) == 0x000011, "Member 'VoxelSpatialNavigationQuery_WeightByHeightRange::bBelow' has a wrong offset!");
static_assert(offsetof(VoxelSpatialNavigationQuery_WeightByHeightRange, MaxHeightRange) == 0x000014, "Member 'VoxelSpatialNavigationQuery_WeightByHeightRange::MaxHeightRange' has a wrong offset!");
static_assert(offsetof(VoxelSpatialNavigationQuery_WeightByHeightRange, ReturnValue) == 0x000018, "Member 'VoxelSpatialNavigationQuery_WeightByHeightRange::ReturnValue' has a wrong offset!");

// Function LevelVoxelization.VoxelSpatialNavigationQuery.GetWeightedLocations
// 0x0018 (0x0018 - 0x0000)
struct VoxelSpatialNavigationQuery_GetWeightedLocations final
{
public:
	bool                                          bOnlyTopWeightedLocations;                         // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FVector4>                       ReturnValue;                                       // 0x0008(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(VoxelSpatialNavigationQuery_GetWeightedLocations) == 0x000008, "Wrong alignment on VoxelSpatialNavigationQuery_GetWeightedLocations");
static_assert(sizeof(VoxelSpatialNavigationQuery_GetWeightedLocations) == 0x000018, "Wrong size on VoxelSpatialNavigationQuery_GetWeightedLocations");
static_assert(offsetof(VoxelSpatialNavigationQuery_GetWeightedLocations, bOnlyTopWeightedLocations) == 0x000000, "Member 'VoxelSpatialNavigationQuery_GetWeightedLocations::bOnlyTopWeightedLocations' has a wrong offset!");
static_assert(offsetof(VoxelSpatialNavigationQuery_GetWeightedLocations, ReturnValue) == 0x000008, "Member 'VoxelSpatialNavigationQuery_GetWeightedLocations::ReturnValue' has a wrong offset!");

// Function LevelVoxelization.VoxelNavModifierComponent.SetAddedPathCost
// 0x0004 (0x0004 - 0x0000)
struct VoxelNavModifierComponent_SetAddedPathCost final
{
public:
	int32                                         NewCost;                                           // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VoxelNavModifierComponent_SetAddedPathCost) == 0x000004, "Wrong alignment on VoxelNavModifierComponent_SetAddedPathCost");
static_assert(sizeof(VoxelNavModifierComponent_SetAddedPathCost) == 0x000004, "Wrong size on VoxelNavModifierComponent_SetAddedPathCost");
static_assert(offsetof(VoxelNavModifierComponent_SetAddedPathCost, NewCost) == 0x000000, "Member 'VoxelNavModifierComponent_SetAddedPathCost::NewCost' has a wrong offset!");

// Function LevelVoxelization.VoxelNavModifierComponent.SetCanNavAgentsChange
// 0x0001 (0x0001 - 0x0000)
struct VoxelNavModifierComponent_SetCanNavAgentsChange final
{
public:
	bool                                          bEnable;                                           // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VoxelNavModifierComponent_SetCanNavAgentsChange) == 0x000001, "Wrong alignment on VoxelNavModifierComponent_SetCanNavAgentsChange");
static_assert(sizeof(VoxelNavModifierComponent_SetCanNavAgentsChange) == 0x000001, "Wrong size on VoxelNavModifierComponent_SetCanNavAgentsChange");
static_assert(offsetof(VoxelNavModifierComponent_SetCanNavAgentsChange, bEnable) == 0x000000, "Member 'VoxelNavModifierComponent_SetCanNavAgentsChange::bEnable' has a wrong offset!");

// Function LevelVoxelization.VoxelNavModifierComponent.SetModifierState
// 0x0001 (0x0001 - 0x0000)
struct VoxelNavModifierComponent_SetModifierState final
{
public:
	EVoxelNavModifierState                        NewState;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VoxelNavModifierComponent_SetModifierState) == 0x000001, "Wrong alignment on VoxelNavModifierComponent_SetModifierState");
static_assert(sizeof(VoxelNavModifierComponent_SetModifierState) == 0x000001, "Wrong size on VoxelNavModifierComponent_SetModifierState");
static_assert(offsetof(VoxelNavModifierComponent_SetModifierState, NewState) == 0x000000, "Member 'VoxelNavModifierComponent_SetModifierState::NewState' has a wrong offset!");

// Function LevelVoxelization.VoxelNavModifierComponent.SetModifierType
// 0x0001 (0x0001 - 0x0000)
struct VoxelNavModifierComponent_SetModifierType final
{
public:
	EVoxelNavModifierType                         NewType;                                           // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VoxelNavModifierComponent_SetModifierType) == 0x000001, "Wrong alignment on VoxelNavModifierComponent_SetModifierType");
static_assert(sizeof(VoxelNavModifierComponent_SetModifierType) == 0x000001, "Wrong size on VoxelNavModifierComponent_SetModifierType");
static_assert(offsetof(VoxelNavModifierComponent_SetModifierType, NewType) == 0x000000, "Member 'VoxelNavModifierComponent_SetModifierType::NewType' has a wrong offset!");

// Function LevelVoxelization.VoxelObserverComponent.SetObserverEnabled
// 0x0001 (0x0001 - 0x0000)
struct VoxelObserverComponent_SetObserverEnabled final
{
public:
	bool                                          bEnable;                                           // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VoxelObserverComponent_SetObserverEnabled) == 0x000001, "Wrong alignment on VoxelObserverComponent_SetObserverEnabled");
static_assert(sizeof(VoxelObserverComponent_SetObserverEnabled) == 0x000001, "Wrong size on VoxelObserverComponent_SetObserverEnabled");
static_assert(offsetof(VoxelObserverComponent_SetObserverEnabled, bEnable) == 0x000000, "Member 'VoxelObserverComponent_SetObserverEnabled::bEnable' has a wrong offset!");

// Function LevelVoxelization.VoxelObserverComponent.SetObserverEyeComponent
// 0x0008 (0x0008 - 0x0000)
struct VoxelObserverComponent_SetObserverEyeComponent final
{
public:
	class USceneCaptureComponent2D*               SceneCaptureComponent;                             // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VoxelObserverComponent_SetObserverEyeComponent) == 0x000008, "Wrong alignment on VoxelObserverComponent_SetObserverEyeComponent");
static_assert(sizeof(VoxelObserverComponent_SetObserverEyeComponent) == 0x000008, "Wrong size on VoxelObserverComponent_SetObserverEyeComponent");
static_assert(offsetof(VoxelObserverComponent_SetObserverEyeComponent, SceneCaptureComponent) == 0x000000, "Member 'VoxelObserverComponent_SetObserverEyeComponent::SceneCaptureComponent' has a wrong offset!");

// Function LevelVoxelization.VoxelOccluderComponent.SetCanNavAgentsUnblock
// 0x0001 (0x0001 - 0x0000)
struct VoxelOccluderComponent_SetCanNavAgentsUnblock final
{
public:
	bool                                          bEnable;                                           // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VoxelOccluderComponent_SetCanNavAgentsUnblock) == 0x000001, "Wrong alignment on VoxelOccluderComponent_SetCanNavAgentsUnblock");
static_assert(sizeof(VoxelOccluderComponent_SetCanNavAgentsUnblock) == 0x000001, "Wrong size on VoxelOccluderComponent_SetCanNavAgentsUnblock");
static_assert(offsetof(VoxelOccluderComponent_SetCanNavAgentsUnblock, bEnable) == 0x000000, "Member 'VoxelOccluderComponent_SetCanNavAgentsUnblock::bEnable' has a wrong offset!");

// Function LevelVoxelization.VoxelOccluderComponent.SetDoorOccluderIsClosing
// 0x000C (0x000C - 0x0000)
struct VoxelOccluderComponent_SetDoorOccluderIsClosing final
{
public:
	float                                         CloseElapsedTime;                                  // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         CloseEndTime;                                      // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         SoundTransitionDuration;                           // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VoxelOccluderComponent_SetDoorOccluderIsClosing) == 0x000004, "Wrong alignment on VoxelOccluderComponent_SetDoorOccluderIsClosing");
static_assert(sizeof(VoxelOccluderComponent_SetDoorOccluderIsClosing) == 0x00000C, "Wrong size on VoxelOccluderComponent_SetDoorOccluderIsClosing");
static_assert(offsetof(VoxelOccluderComponent_SetDoorOccluderIsClosing, CloseElapsedTime) == 0x000000, "Member 'VoxelOccluderComponent_SetDoorOccluderIsClosing::CloseElapsedTime' has a wrong offset!");
static_assert(offsetof(VoxelOccluderComponent_SetDoorOccluderIsClosing, CloseEndTime) == 0x000004, "Member 'VoxelOccluderComponent_SetDoorOccluderIsClosing::CloseEndTime' has a wrong offset!");
static_assert(offsetof(VoxelOccluderComponent_SetDoorOccluderIsClosing, SoundTransitionDuration) == 0x000008, "Member 'VoxelOccluderComponent_SetDoorOccluderIsClosing::SoundTransitionDuration' has a wrong offset!");

// Function LevelVoxelization.VoxelOccluderComponent.SetDoorOccluderIsOpening
// 0x000C (0x000C - 0x0000)
struct VoxelOccluderComponent_SetDoorOccluderIsOpening final
{
public:
	float                                         OpenElapsedTime;                                   // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         OpenDelayTime;                                     // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         SoundTransitionDuration;                           // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VoxelOccluderComponent_SetDoorOccluderIsOpening) == 0x000004, "Wrong alignment on VoxelOccluderComponent_SetDoorOccluderIsOpening");
static_assert(sizeof(VoxelOccluderComponent_SetDoorOccluderIsOpening) == 0x00000C, "Wrong size on VoxelOccluderComponent_SetDoorOccluderIsOpening");
static_assert(offsetof(VoxelOccluderComponent_SetDoorOccluderIsOpening, OpenElapsedTime) == 0x000000, "Member 'VoxelOccluderComponent_SetDoorOccluderIsOpening::OpenElapsedTime' has a wrong offset!");
static_assert(offsetof(VoxelOccluderComponent_SetDoorOccluderIsOpening, OpenDelayTime) == 0x000004, "Member 'VoxelOccluderComponent_SetDoorOccluderIsOpening::OpenDelayTime' has a wrong offset!");
static_assert(offsetof(VoxelOccluderComponent_SetDoorOccluderIsOpening, SoundTransitionDuration) == 0x000008, "Member 'VoxelOccluderComponent_SetDoorOccluderIsOpening::SoundTransitionDuration' has a wrong offset!");

// Function LevelVoxelization.VoxelOccluderComponent.SetOccluderEnabled
// 0x0008 (0x0008 - 0x0000)
struct VoxelOccluderComponent_SetOccluderEnabled final
{
public:
	bool                                          bEnable;                                           // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         SoundTransitionDuration;                           // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VoxelOccluderComponent_SetOccluderEnabled) == 0x000004, "Wrong alignment on VoxelOccluderComponent_SetOccluderEnabled");
static_assert(sizeof(VoxelOccluderComponent_SetOccluderEnabled) == 0x000008, "Wrong size on VoxelOccluderComponent_SetOccluderEnabled");
static_assert(offsetof(VoxelOccluderComponent_SetOccluderEnabled, bEnable) == 0x000000, "Member 'VoxelOccluderComponent_SetOccluderEnabled::bEnable' has a wrong offset!");
static_assert(offsetof(VoxelOccluderComponent_SetOccluderEnabled, SoundTransitionDuration) == 0x000004, "Member 'VoxelOccluderComponent_SetOccluderEnabled::SoundTransitionDuration' has a wrong offset!");

// Function LevelVoxelization.VoxelOccluderComponent.SetShouldOccludeVisibility
// 0x0001 (0x0001 - 0x0000)
struct VoxelOccluderComponent_SetShouldOccludeVisibility final
{
public:
	bool                                          bEnable;                                           // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VoxelOccluderComponent_SetShouldOccludeVisibility) == 0x000001, "Wrong alignment on VoxelOccluderComponent_SetShouldOccludeVisibility");
static_assert(sizeof(VoxelOccluderComponent_SetShouldOccludeVisibility) == 0x000001, "Wrong size on VoxelOccluderComponent_SetShouldOccludeVisibility");
static_assert(offsetof(VoxelOccluderComponent_SetShouldOccludeVisibility, bEnable) == 0x000000, "Member 'VoxelOccluderComponent_SetShouldOccludeVisibility::bEnable' has a wrong offset!");

// Function LevelVoxelization.VoxelPropagationManager.GetUnobstructedCullableDynamicActorsInSphere
// 0x0030 (0x0030 - 0x0000)
struct VoxelPropagationManager_GetUnobstructedCullableDynamicActorsInSphere final
{
public:
	struct FVector                                SphereLocation;                                    // 0x0000(0x000C)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         SphereRadius;                                      // 0x000C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<TSubclassOf<class AActor>>             FilterByClasses;                                   // 0x0010(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, UObjectWrapper, NativeAccessSpecifierPublic)
	TArray<class AActor*>                         ReturnValue;                                       // 0x0020(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(VoxelPropagationManager_GetUnobstructedCullableDynamicActorsInSphere) == 0x000008, "Wrong alignment on VoxelPropagationManager_GetUnobstructedCullableDynamicActorsInSphere");
static_assert(sizeof(VoxelPropagationManager_GetUnobstructedCullableDynamicActorsInSphere) == 0x000030, "Wrong size on VoxelPropagationManager_GetUnobstructedCullableDynamicActorsInSphere");
static_assert(offsetof(VoxelPropagationManager_GetUnobstructedCullableDynamicActorsInSphere, SphereLocation) == 0x000000, "Member 'VoxelPropagationManager_GetUnobstructedCullableDynamicActorsInSphere::SphereLocation' has a wrong offset!");
static_assert(offsetof(VoxelPropagationManager_GetUnobstructedCullableDynamicActorsInSphere, SphereRadius) == 0x00000C, "Member 'VoxelPropagationManager_GetUnobstructedCullableDynamicActorsInSphere::SphereRadius' has a wrong offset!");
static_assert(offsetof(VoxelPropagationManager_GetUnobstructedCullableDynamicActorsInSphere, FilterByClasses) == 0x000010, "Member 'VoxelPropagationManager_GetUnobstructedCullableDynamicActorsInSphere::FilterByClasses' has a wrong offset!");
static_assert(offsetof(VoxelPropagationManager_GetUnobstructedCullableDynamicActorsInSphere, ReturnValue) == 0x000020, "Member 'VoxelPropagationManager_GetUnobstructedCullableDynamicActorsInSphere::ReturnValue' has a wrong offset!");

// Function LevelVoxelization.VoxelPropagationManager.GetUnobstructedCullableStaticMeshComponentsInSphere
// 0x0028 (0x0028 - 0x0000)
struct VoxelPropagationManager_GetUnobstructedCullableStaticMeshComponentsInSphere final
{
public:
	struct FVector                                SphereLocation;                                    // 0x0000(0x000C)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         SphereRadius;                                      // 0x000C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSubclassOf<class AActor>                     IgnoreActorClass;                                  // 0x0010(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class UStaticMeshComponent*>           ReturnValue;                                       // 0x0018(0x0010)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, ContainsInstancedReference, NativeAccessSpecifierPublic)
};
static_assert(alignof(VoxelPropagationManager_GetUnobstructedCullableStaticMeshComponentsInSphere) == 0x000008, "Wrong alignment on VoxelPropagationManager_GetUnobstructedCullableStaticMeshComponentsInSphere");
static_assert(sizeof(VoxelPropagationManager_GetUnobstructedCullableStaticMeshComponentsInSphere) == 0x000028, "Wrong size on VoxelPropagationManager_GetUnobstructedCullableStaticMeshComponentsInSphere");
static_assert(offsetof(VoxelPropagationManager_GetUnobstructedCullableStaticMeshComponentsInSphere, SphereLocation) == 0x000000, "Member 'VoxelPropagationManager_GetUnobstructedCullableStaticMeshComponentsInSphere::SphereLocation' has a wrong offset!");
static_assert(offsetof(VoxelPropagationManager_GetUnobstructedCullableStaticMeshComponentsInSphere, SphereRadius) == 0x00000C, "Member 'VoxelPropagationManager_GetUnobstructedCullableStaticMeshComponentsInSphere::SphereRadius' has a wrong offset!");
static_assert(offsetof(VoxelPropagationManager_GetUnobstructedCullableStaticMeshComponentsInSphere, IgnoreActorClass) == 0x000010, "Member 'VoxelPropagationManager_GetUnobstructedCullableStaticMeshComponentsInSphere::IgnoreActorClass' has a wrong offset!");
static_assert(offsetof(VoxelPropagationManager_GetUnobstructedCullableStaticMeshComponentsInSphere, ReturnValue) == 0x000018, "Member 'VoxelPropagationManager_GetUnobstructedCullableStaticMeshComponentsInSphere::ReturnValue' has a wrong offset!");

// Function LevelVoxelization.VoxelPropagationManager.HasAnyPropagationPathToPrimitiveInSphere
// 0x0020 (0x0020 - 0x0000)
struct VoxelPropagationManager_HasAnyPropagationPathToPrimitiveInSphere final
{
public:
	struct FVector                                SphereLocation;                                    // 0x0000(0x000C)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         SphereRadius;                                      // 0x000C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UPrimitiveComponent*                    PrimitiveComponent;                                // 0x0010(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0018(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_19[0x7];                                       // 0x0019(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(VoxelPropagationManager_HasAnyPropagationPathToPrimitiveInSphere) == 0x000008, "Wrong alignment on VoxelPropagationManager_HasAnyPropagationPathToPrimitiveInSphere");
static_assert(sizeof(VoxelPropagationManager_HasAnyPropagationPathToPrimitiveInSphere) == 0x000020, "Wrong size on VoxelPropagationManager_HasAnyPropagationPathToPrimitiveInSphere");
static_assert(offsetof(VoxelPropagationManager_HasAnyPropagationPathToPrimitiveInSphere, SphereLocation) == 0x000000, "Member 'VoxelPropagationManager_HasAnyPropagationPathToPrimitiveInSphere::SphereLocation' has a wrong offset!");
static_assert(offsetof(VoxelPropagationManager_HasAnyPropagationPathToPrimitiveInSphere, SphereRadius) == 0x00000C, "Member 'VoxelPropagationManager_HasAnyPropagationPathToPrimitiveInSphere::SphereRadius' has a wrong offset!");
static_assert(offsetof(VoxelPropagationManager_HasAnyPropagationPathToPrimitiveInSphere, PrimitiveComponent) == 0x000010, "Member 'VoxelPropagationManager_HasAnyPropagationPathToPrimitiveInSphere::PrimitiveComponent' has a wrong offset!");
static_assert(offsetof(VoxelPropagationManager_HasAnyPropagationPathToPrimitiveInSphere, ReturnValue) == 0x000018, "Member 'VoxelPropagationManager_HasAnyPropagationPathToPrimitiveInSphere::ReturnValue' has a wrong offset!");

// Function LevelVoxelization.VoxelPropagationManager.HasUnobstructedPropagationPathBetweenPoints
// 0x001C (0x001C - 0x0000)
struct VoxelPropagationManager_HasUnobstructedPropagationPathBetweenPoints final
{
public:
	struct FVector                                SourceLocation;                                    // 0x0000(0x000C)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                TargetLocation;                                    // 0x000C(0x000C)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bTraceVoxels;                                      // 0x0018(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0019(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1A[0x2];                                       // 0x001A(0x0002)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(VoxelPropagationManager_HasUnobstructedPropagationPathBetweenPoints) == 0x000004, "Wrong alignment on VoxelPropagationManager_HasUnobstructedPropagationPathBetweenPoints");
static_assert(sizeof(VoxelPropagationManager_HasUnobstructedPropagationPathBetweenPoints) == 0x00001C, "Wrong size on VoxelPropagationManager_HasUnobstructedPropagationPathBetweenPoints");
static_assert(offsetof(VoxelPropagationManager_HasUnobstructedPropagationPathBetweenPoints, SourceLocation) == 0x000000, "Member 'VoxelPropagationManager_HasUnobstructedPropagationPathBetweenPoints::SourceLocation' has a wrong offset!");
static_assert(offsetof(VoxelPropagationManager_HasUnobstructedPropagationPathBetweenPoints, TargetLocation) == 0x00000C, "Member 'VoxelPropagationManager_HasUnobstructedPropagationPathBetweenPoints::TargetLocation' has a wrong offset!");
static_assert(offsetof(VoxelPropagationManager_HasUnobstructedPropagationPathBetweenPoints, bTraceVoxels) == 0x000018, "Member 'VoxelPropagationManager_HasUnobstructedPropagationPathBetweenPoints::bTraceVoxels' has a wrong offset!");
static_assert(offsetof(VoxelPropagationManager_HasUnobstructedPropagationPathBetweenPoints, ReturnValue) == 0x000019, "Member 'VoxelPropagationManager_HasUnobstructedPropagationPathBetweenPoints::ReturnValue' has a wrong offset!");

// Function LevelVoxelization.VoxelPropagatorComponent.GetElapsedPlayTime
// 0x0004 (0x0004 - 0x0000)
struct VoxelPropagatorComponent_GetElapsedPlayTime final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VoxelPropagatorComponent_GetElapsedPlayTime) == 0x000004, "Wrong alignment on VoxelPropagatorComponent_GetElapsedPlayTime");
static_assert(sizeof(VoxelPropagatorComponent_GetElapsedPlayTime) == 0x000004, "Wrong size on VoxelPropagatorComponent_GetElapsedPlayTime");
static_assert(offsetof(VoxelPropagatorComponent_GetElapsedPlayTime, ReturnValue) == 0x000000, "Member 'VoxelPropagatorComponent_GetElapsedPlayTime::ReturnValue' has a wrong offset!");

// Function LevelVoxelization.VoxelPropagatorComponent.GetRelativePropagationOriginOffset
// 0x000C (0x000C - 0x0000)
struct VoxelPropagatorComponent_GetRelativePropagationOriginOffset final
{
public:
	struct FVector                                ReturnValue;                                       // 0x0000(0x000C)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VoxelPropagatorComponent_GetRelativePropagationOriginOffset) == 0x000004, "Wrong alignment on VoxelPropagatorComponent_GetRelativePropagationOriginOffset");
static_assert(sizeof(VoxelPropagatorComponent_GetRelativePropagationOriginOffset) == 0x00000C, "Wrong size on VoxelPropagatorComponent_GetRelativePropagationOriginOffset");
static_assert(offsetof(VoxelPropagatorComponent_GetRelativePropagationOriginOffset, ReturnValue) == 0x000000, "Member 'VoxelPropagatorComponent_GetRelativePropagationOriginOffset::ReturnValue' has a wrong offset!");

// Function LevelVoxelization.VoxelPropagatorComponent.SetMaxPropagationDensity
// 0x0001 (0x0001 - 0x0000)
struct VoxelPropagatorComponent_SetMaxPropagationDensity final
{
public:
	uint8                                         MaxDensity;                                        // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VoxelPropagatorComponent_SetMaxPropagationDensity) == 0x000001, "Wrong alignment on VoxelPropagatorComponent_SetMaxPropagationDensity");
static_assert(sizeof(VoxelPropagatorComponent_SetMaxPropagationDensity) == 0x000001, "Wrong size on VoxelPropagatorComponent_SetMaxPropagationDensity");
static_assert(offsetof(VoxelPropagatorComponent_SetMaxPropagationDensity, MaxDensity) == 0x000000, "Member 'VoxelPropagatorComponent_SetMaxPropagationDensity::MaxDensity' has a wrong offset!");

// Function LevelVoxelization.VoxelPropagatorComponent.SetPropagationTickInterval
// 0x0004 (0x0004 - 0x0000)
struct VoxelPropagatorComponent_SetPropagationTickInterval final
{
public:
	float                                         TickInterval;                                      // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VoxelPropagatorComponent_SetPropagationTickInterval) == 0x000004, "Wrong alignment on VoxelPropagatorComponent_SetPropagationTickInterval");
static_assert(sizeof(VoxelPropagatorComponent_SetPropagationTickInterval) == 0x000004, "Wrong size on VoxelPropagatorComponent_SetPropagationTickInterval");
static_assert(offsetof(VoxelPropagatorComponent_SetPropagationTickInterval, TickInterval) == 0x000000, "Member 'VoxelPropagatorComponent_SetPropagationTickInterval::TickInterval' has a wrong offset!");

// Function LevelVoxelization.VoxelScannerBillboardComponent.AddElement
// 0x0020 (0x0020 - 0x0000)
struct VoxelScannerBillboardComponent_AddElement final
{
public:
	class USceneComponent*                        SceneComponent;                                    // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector2D                              BaseSize;                                          // 0x0008(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                LocalOffset;                                       // 0x0010(0x000C)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bShouldRotate;                                     // 0x001C(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bVisibility;                                       // 0x001D(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x001E(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1F[0x1];                                       // 0x001F(0x0001)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(VoxelScannerBillboardComponent_AddElement) == 0x000008, "Wrong alignment on VoxelScannerBillboardComponent_AddElement");
static_assert(sizeof(VoxelScannerBillboardComponent_AddElement) == 0x000020, "Wrong size on VoxelScannerBillboardComponent_AddElement");
static_assert(offsetof(VoxelScannerBillboardComponent_AddElement, SceneComponent) == 0x000000, "Member 'VoxelScannerBillboardComponent_AddElement::SceneComponent' has a wrong offset!");
static_assert(offsetof(VoxelScannerBillboardComponent_AddElement, BaseSize) == 0x000008, "Member 'VoxelScannerBillboardComponent_AddElement::BaseSize' has a wrong offset!");
static_assert(offsetof(VoxelScannerBillboardComponent_AddElement, LocalOffset) == 0x000010, "Member 'VoxelScannerBillboardComponent_AddElement::LocalOffset' has a wrong offset!");
static_assert(offsetof(VoxelScannerBillboardComponent_AddElement, bShouldRotate) == 0x00001C, "Member 'VoxelScannerBillboardComponent_AddElement::bShouldRotate' has a wrong offset!");
static_assert(offsetof(VoxelScannerBillboardComponent_AddElement, bVisibility) == 0x00001D, "Member 'VoxelScannerBillboardComponent_AddElement::bVisibility' has a wrong offset!");
static_assert(offsetof(VoxelScannerBillboardComponent_AddElement, ReturnValue) == 0x00001E, "Member 'VoxelScannerBillboardComponent_AddElement::ReturnValue' has a wrong offset!");

// Function LevelVoxelization.VoxelScannerBillboardComponent.RemoveElement
// 0x0010 (0x0010 - 0x0000)
struct VoxelScannerBillboardComponent_RemoveElement final
{
public:
	class USceneComponent*                        SceneComponent;                                    // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(VoxelScannerBillboardComponent_RemoveElement) == 0x000008, "Wrong alignment on VoxelScannerBillboardComponent_RemoveElement");
static_assert(sizeof(VoxelScannerBillboardComponent_RemoveElement) == 0x000010, "Wrong size on VoxelScannerBillboardComponent_RemoveElement");
static_assert(offsetof(VoxelScannerBillboardComponent_RemoveElement, SceneComponent) == 0x000000, "Member 'VoxelScannerBillboardComponent_RemoveElement::SceneComponent' has a wrong offset!");
static_assert(offsetof(VoxelScannerBillboardComponent_RemoveElement, ReturnValue) == 0x000008, "Member 'VoxelScannerBillboardComponent_RemoveElement::ReturnValue' has a wrong offset!");

// Function LevelVoxelization.VoxelScannerBillboardComponent.SetElementShouldRotate
// 0x0010 (0x0010 - 0x0000)
struct VoxelScannerBillboardComponent_SetElementShouldRotate final
{
public:
	class USceneComponent*                        SceneComponent;                                    // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bNewState;                                         // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0009(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_A[0x6];                                        // 0x000A(0x0006)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(VoxelScannerBillboardComponent_SetElementShouldRotate) == 0x000008, "Wrong alignment on VoxelScannerBillboardComponent_SetElementShouldRotate");
static_assert(sizeof(VoxelScannerBillboardComponent_SetElementShouldRotate) == 0x000010, "Wrong size on VoxelScannerBillboardComponent_SetElementShouldRotate");
static_assert(offsetof(VoxelScannerBillboardComponent_SetElementShouldRotate, SceneComponent) == 0x000000, "Member 'VoxelScannerBillboardComponent_SetElementShouldRotate::SceneComponent' has a wrong offset!");
static_assert(offsetof(VoxelScannerBillboardComponent_SetElementShouldRotate, bNewState) == 0x000008, "Member 'VoxelScannerBillboardComponent_SetElementShouldRotate::bNewState' has a wrong offset!");
static_assert(offsetof(VoxelScannerBillboardComponent_SetElementShouldRotate, ReturnValue) == 0x000009, "Member 'VoxelScannerBillboardComponent_SetElementShouldRotate::ReturnValue' has a wrong offset!");

// Function LevelVoxelization.VoxelScannerBillboardComponent.SetElementVisibility
// 0x0010 (0x0010 - 0x0000)
struct VoxelScannerBillboardComponent_SetElementVisibility final
{
public:
	class USceneComponent*                        SceneComponent;                                    // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bNewVisibility;                                    // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0009(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_A[0x6];                                        // 0x000A(0x0006)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(VoxelScannerBillboardComponent_SetElementVisibility) == 0x000008, "Wrong alignment on VoxelScannerBillboardComponent_SetElementVisibility");
static_assert(sizeof(VoxelScannerBillboardComponent_SetElementVisibility) == 0x000010, "Wrong size on VoxelScannerBillboardComponent_SetElementVisibility");
static_assert(offsetof(VoxelScannerBillboardComponent_SetElementVisibility, SceneComponent) == 0x000000, "Member 'VoxelScannerBillboardComponent_SetElementVisibility::SceneComponent' has a wrong offset!");
static_assert(offsetof(VoxelScannerBillboardComponent_SetElementVisibility, bNewVisibility) == 0x000008, "Member 'VoxelScannerBillboardComponent_SetElementVisibility::bNewVisibility' has a wrong offset!");
static_assert(offsetof(VoxelScannerBillboardComponent_SetElementVisibility, ReturnValue) == 0x000009, "Member 'VoxelScannerBillboardComponent_SetElementVisibility::ReturnValue' has a wrong offset!");

// Function LevelVoxelization.VoxelScannerBillboardComponent.SetOrthographicScaleParameters
// 0x0010 (0x0010 - 0x0000)
struct VoxelScannerBillboardComponent_SetOrthographicScaleParameters final
{
public:
	class UCurveFloat*                            InOrthoScaleCurve;                                 // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector2D                              InOrthoWidthRange;                                 // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VoxelScannerBillboardComponent_SetOrthographicScaleParameters) == 0x000008, "Wrong alignment on VoxelScannerBillboardComponent_SetOrthographicScaleParameters");
static_assert(sizeof(VoxelScannerBillboardComponent_SetOrthographicScaleParameters) == 0x000010, "Wrong size on VoxelScannerBillboardComponent_SetOrthographicScaleParameters");
static_assert(offsetof(VoxelScannerBillboardComponent_SetOrthographicScaleParameters, InOrthoScaleCurve) == 0x000000, "Member 'VoxelScannerBillboardComponent_SetOrthographicScaleParameters::InOrthoScaleCurve' has a wrong offset!");
static_assert(offsetof(VoxelScannerBillboardComponent_SetOrthographicScaleParameters, InOrthoWidthRange) == 0x000008, "Member 'VoxelScannerBillboardComponent_SetOrthographicScaleParameters::InOrthoWidthRange' has a wrong offset!");

// Function LevelVoxelization.VoxelScannerBillboardComponent.GetElementCount
// 0x0004 (0x0004 - 0x0000)
struct VoxelScannerBillboardComponent_GetElementCount final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VoxelScannerBillboardComponent_GetElementCount) == 0x000004, "Wrong alignment on VoxelScannerBillboardComponent_GetElementCount");
static_assert(sizeof(VoxelScannerBillboardComponent_GetElementCount) == 0x000004, "Wrong size on VoxelScannerBillboardComponent_GetElementCount");
static_assert(offsetof(VoxelScannerBillboardComponent_GetElementCount, ReturnValue) == 0x000000, "Member 'VoxelScannerBillboardComponent_GetElementCount::ReturnValue' has a wrong offset!");

// Function LevelVoxelization.VoxelScannerComponent.AddAvailableScannableFilterTags
// 0x0050 (0x0050 - 0x0000)
struct VoxelScannerComponent_AddAvailableScannableFilterTags final
{
public:
	TSet<class FName>                             Tags;                                              // 0x0000(0x0050)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(VoxelScannerComponent_AddAvailableScannableFilterTags) == 0x000008, "Wrong alignment on VoxelScannerComponent_AddAvailableScannableFilterTags");
static_assert(sizeof(VoxelScannerComponent_AddAvailableScannableFilterTags) == 0x000050, "Wrong size on VoxelScannerComponent_AddAvailableScannableFilterTags");
static_assert(offsetof(VoxelScannerComponent_AddAvailableScannableFilterTags, Tags) == 0x000000, "Member 'VoxelScannerComponent_AddAvailableScannableFilterTags::Tags' has a wrong offset!");

// Function LevelVoxelization.VoxelScannerComponent.AddWaypointAtLocation
// 0x0028 (0x0028 - 0x0000)
struct VoxelScannerComponent_AddWaypointAtLocation final
{
public:
	struct FVector                                WorldLocation;                                     // 0x0000(0x000C)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 Message;                                           // 0x0010(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ReturnValue;                                       // 0x0020(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_24[0x4];                                       // 0x0024(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(VoxelScannerComponent_AddWaypointAtLocation) == 0x000008, "Wrong alignment on VoxelScannerComponent_AddWaypointAtLocation");
static_assert(sizeof(VoxelScannerComponent_AddWaypointAtLocation) == 0x000028, "Wrong size on VoxelScannerComponent_AddWaypointAtLocation");
static_assert(offsetof(VoxelScannerComponent_AddWaypointAtLocation, WorldLocation) == 0x000000, "Member 'VoxelScannerComponent_AddWaypointAtLocation::WorldLocation' has a wrong offset!");
static_assert(offsetof(VoxelScannerComponent_AddWaypointAtLocation, Message) == 0x000010, "Member 'VoxelScannerComponent_AddWaypointAtLocation::Message' has a wrong offset!");
static_assert(offsetof(VoxelScannerComponent_AddWaypointAtLocation, ReturnValue) == 0x000020, "Member 'VoxelScannerComponent_AddWaypointAtLocation::ReturnValue' has a wrong offset!");

// Function LevelVoxelization.VoxelScannerComponent.GetRegionAtWorldLocation
// 0x0028 (0x0028 - 0x0000)
struct VoxelScannerComponent_GetRegionAtWorldLocation final
{
public:
	EVoxelLevelInstanceType                       InstanceType;                                      // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                WorldLocation;                                     // 0x0004(0x000C)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         VoxelSearchRadius;                                 // 0x0010(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FDataTableRowHandle                    ReturnValue;                                       // 0x0018(0x0010)(Parm, OutParm, ReturnParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(VoxelScannerComponent_GetRegionAtWorldLocation) == 0x000008, "Wrong alignment on VoxelScannerComponent_GetRegionAtWorldLocation");
static_assert(sizeof(VoxelScannerComponent_GetRegionAtWorldLocation) == 0x000028, "Wrong size on VoxelScannerComponent_GetRegionAtWorldLocation");
static_assert(offsetof(VoxelScannerComponent_GetRegionAtWorldLocation, InstanceType) == 0x000000, "Member 'VoxelScannerComponent_GetRegionAtWorldLocation::InstanceType' has a wrong offset!");
static_assert(offsetof(VoxelScannerComponent_GetRegionAtWorldLocation, WorldLocation) == 0x000004, "Member 'VoxelScannerComponent_GetRegionAtWorldLocation::WorldLocation' has a wrong offset!");
static_assert(offsetof(VoxelScannerComponent_GetRegionAtWorldLocation, VoxelSearchRadius) == 0x000010, "Member 'VoxelScannerComponent_GetRegionAtWorldLocation::VoxelSearchRadius' has a wrong offset!");
static_assert(offsetof(VoxelScannerComponent_GetRegionAtWorldLocation, ReturnValue) == 0x000018, "Member 'VoxelScannerComponent_GetRegionAtWorldLocation::ReturnValue' has a wrong offset!");

// Function LevelVoxelization.VoxelScannerComponent.GetWaypointFontForCultureName
// 0x0018 (0x0018 - 0x0000)
struct VoxelScannerComponent_GetWaypointFontForCultureName final
{
public:
	class FString                                 CultureName;                                       // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UFont*                                  ReturnValue;                                       // 0x0010(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VoxelScannerComponent_GetWaypointFontForCultureName) == 0x000008, "Wrong alignment on VoxelScannerComponent_GetWaypointFontForCultureName");
static_assert(sizeof(VoxelScannerComponent_GetWaypointFontForCultureName) == 0x000018, "Wrong size on VoxelScannerComponent_GetWaypointFontForCultureName");
static_assert(offsetof(VoxelScannerComponent_GetWaypointFontForCultureName, CultureName) == 0x000000, "Member 'VoxelScannerComponent_GetWaypointFontForCultureName::CultureName' has a wrong offset!");
static_assert(offsetof(VoxelScannerComponent_GetWaypointFontForCultureName, ReturnValue) == 0x000010, "Member 'VoxelScannerComponent_GetWaypointFontForCultureName::ReturnValue' has a wrong offset!");

// Function LevelVoxelization.VoxelScannerComponent.HighlightRegion
// 0x0010 (0x0010 - 0x0000)
struct VoxelScannerComponent_HighlightRegion final
{
public:
	struct FDataTableRowHandle                    RegionHandle;                                      // 0x0000(0x0010)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(VoxelScannerComponent_HighlightRegion) == 0x000008, "Wrong alignment on VoxelScannerComponent_HighlightRegion");
static_assert(sizeof(VoxelScannerComponent_HighlightRegion) == 0x000010, "Wrong size on VoxelScannerComponent_HighlightRegion");
static_assert(offsetof(VoxelScannerComponent_HighlightRegion, RegionHandle) == 0x000000, "Member 'VoxelScannerComponent_HighlightRegion::RegionHandle' has a wrong offset!");

// Function LevelVoxelization.VoxelScannerComponent.LoadScanDataForLevelIntoInstance
// 0x001C (0x001C - 0x0000)
struct VoxelScannerComponent_LoadScanDataForLevelIntoInstance final
{
public:
	EVoxelLevelInstanceType                       LevelInstanceType;                                 // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   LevelName;                                         // 0x0004(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                LevelOffset;                                       // 0x000C(0x000C)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0018(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_19[0x3];                                       // 0x0019(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(VoxelScannerComponent_LoadScanDataForLevelIntoInstance) == 0x000004, "Wrong alignment on VoxelScannerComponent_LoadScanDataForLevelIntoInstance");
static_assert(sizeof(VoxelScannerComponent_LoadScanDataForLevelIntoInstance) == 0x00001C, "Wrong size on VoxelScannerComponent_LoadScanDataForLevelIntoInstance");
static_assert(offsetof(VoxelScannerComponent_LoadScanDataForLevelIntoInstance, LevelInstanceType) == 0x000000, "Member 'VoxelScannerComponent_LoadScanDataForLevelIntoInstance::LevelInstanceType' has a wrong offset!");
static_assert(offsetof(VoxelScannerComponent_LoadScanDataForLevelIntoInstance, LevelName) == 0x000004, "Member 'VoxelScannerComponent_LoadScanDataForLevelIntoInstance::LevelName' has a wrong offset!");
static_assert(offsetof(VoxelScannerComponent_LoadScanDataForLevelIntoInstance, LevelOffset) == 0x00000C, "Member 'VoxelScannerComponent_LoadScanDataForLevelIntoInstance::LevelOffset' has a wrong offset!");
static_assert(offsetof(VoxelScannerComponent_LoadScanDataForLevelIntoInstance, ReturnValue) == 0x000018, "Member 'VoxelScannerComponent_LoadScanDataForLevelIntoInstance::ReturnValue' has a wrong offset!");

// Function LevelVoxelization.VoxelScannerComponent.OnDynamicScannerUpdate
// 0x0001 (0x0001 - 0x0000)
struct VoxelScannerComponent_OnDynamicScannerUpdate final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VoxelScannerComponent_OnDynamicScannerUpdate) == 0x000001, "Wrong alignment on VoxelScannerComponent_OnDynamicScannerUpdate");
static_assert(sizeof(VoxelScannerComponent_OnDynamicScannerUpdate) == 0x000001, "Wrong size on VoxelScannerComponent_OnDynamicScannerUpdate");
static_assert(offsetof(VoxelScannerComponent_OnDynamicScannerUpdate, ReturnValue) == 0x000000, "Member 'VoxelScannerComponent_OnDynamicScannerUpdate::ReturnValue' has a wrong offset!");

// Function LevelVoxelization.VoxelScannerComponent.OnLevelRegionDiscovered
// 0x0018 (0x0018 - 0x0000)
struct VoxelScannerComponent_OnLevelRegionDiscovered final
{
public:
	struct FDataTableRowHandle                    RegionRowHandle;                                   // 0x0000(0x0010)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0010(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(VoxelScannerComponent_OnLevelRegionDiscovered) == 0x000008, "Wrong alignment on VoxelScannerComponent_OnLevelRegionDiscovered");
static_assert(sizeof(VoxelScannerComponent_OnLevelRegionDiscovered) == 0x000018, "Wrong size on VoxelScannerComponent_OnLevelRegionDiscovered");
static_assert(offsetof(VoxelScannerComponent_OnLevelRegionDiscovered, RegionRowHandle) == 0x000000, "Member 'VoxelScannerComponent_OnLevelRegionDiscovered::RegionRowHandle' has a wrong offset!");
static_assert(offsetof(VoxelScannerComponent_OnLevelRegionDiscovered, ReturnValue) == 0x000010, "Member 'VoxelScannerComponent_OnLevelRegionDiscovered::ReturnValue' has a wrong offset!");

// Function LevelVoxelization.VoxelScannerComponent.OnVoxelColumnsRevealed
// 0x0008 (0x0008 - 0x0000)
struct VoxelScannerComponent_OnVoxelColumnsRevealed final
{
public:
	int32                                         VoxelColumnCount;                                  // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0004(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(VoxelScannerComponent_OnVoxelColumnsRevealed) == 0x000004, "Wrong alignment on VoxelScannerComponent_OnVoxelColumnsRevealed");
static_assert(sizeof(VoxelScannerComponent_OnVoxelColumnsRevealed) == 0x000008, "Wrong size on VoxelScannerComponent_OnVoxelColumnsRevealed");
static_assert(offsetof(VoxelScannerComponent_OnVoxelColumnsRevealed, VoxelColumnCount) == 0x000000, "Member 'VoxelScannerComponent_OnVoxelColumnsRevealed::VoxelColumnCount' has a wrong offset!");
static_assert(offsetof(VoxelScannerComponent_OnVoxelColumnsRevealed, ReturnValue) == 0x000004, "Member 'VoxelScannerComponent_OnVoxelColumnsRevealed::ReturnValue' has a wrong offset!");

// Function LevelVoxelization.VoxelScannerComponent.RemoveAvailableScannableFilterTags
// 0x0050 (0x0050 - 0x0000)
struct VoxelScannerComponent_RemoveAvailableScannableFilterTags final
{
public:
	TSet<class FName>                             Tags;                                              // 0x0000(0x0050)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(VoxelScannerComponent_RemoveAvailableScannableFilterTags) == 0x000008, "Wrong alignment on VoxelScannerComponent_RemoveAvailableScannableFilterTags");
static_assert(sizeof(VoxelScannerComponent_RemoveAvailableScannableFilterTags) == 0x000050, "Wrong size on VoxelScannerComponent_RemoveAvailableScannableFilterTags");
static_assert(offsetof(VoxelScannerComponent_RemoveAvailableScannableFilterTags, Tags) == 0x000000, "Member 'VoxelScannerComponent_RemoveAvailableScannableFilterTags::Tags' has a wrong offset!");

// Function LevelVoxelization.VoxelScannerComponent.RemoveWaypointByIndex
// 0x0008 (0x0008 - 0x0000)
struct VoxelScannerComponent_RemoveWaypointByIndex final
{
public:
	int32                                         WaypointIndex;                                     // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0004(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(VoxelScannerComponent_RemoveWaypointByIndex) == 0x000004, "Wrong alignment on VoxelScannerComponent_RemoveWaypointByIndex");
static_assert(sizeof(VoxelScannerComponent_RemoveWaypointByIndex) == 0x000008, "Wrong size on VoxelScannerComponent_RemoveWaypointByIndex");
static_assert(offsetof(VoxelScannerComponent_RemoveWaypointByIndex, WaypointIndex) == 0x000000, "Member 'VoxelScannerComponent_RemoveWaypointByIndex::WaypointIndex' has a wrong offset!");
static_assert(offsetof(VoxelScannerComponent_RemoveWaypointByIndex, ReturnValue) == 0x000004, "Member 'VoxelScannerComponent_RemoveWaypointByIndex::ReturnValue' has a wrong offset!");

// Function LevelVoxelization.VoxelScannerComponent.SetAvailableFilterTags
// 0x0050 (0x0050 - 0x0000)
struct VoxelScannerComponent_SetAvailableFilterTags final
{
public:
	TSet<class FName>                             Tags;                                              // 0x0000(0x0050)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(VoxelScannerComponent_SetAvailableFilterTags) == 0x000008, "Wrong alignment on VoxelScannerComponent_SetAvailableFilterTags");
static_assert(sizeof(VoxelScannerComponent_SetAvailableFilterTags) == 0x000050, "Wrong size on VoxelScannerComponent_SetAvailableFilterTags");
static_assert(offsetof(VoxelScannerComponent_SetAvailableFilterTags, Tags) == 0x000000, "Member 'VoxelScannerComponent_SetAvailableFilterTags::Tags' has a wrong offset!");

// Function LevelVoxelization.VoxelScannerComponent.SetDynamicScannerParams
// 0x0014 (0x0014 - 0x0000)
struct VoxelScannerComponent_SetDynamicScannerParams final
{
public:
	float                                         InnerRadius;                                       // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         OuterRadius;                                       // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         OuterRevealTime;                                   // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         UpdateTime;                                        // 0x000C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bRevealThroughWalls;                               // 0x0010(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x3];                                       // 0x0011(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(VoxelScannerComponent_SetDynamicScannerParams) == 0x000004, "Wrong alignment on VoxelScannerComponent_SetDynamicScannerParams");
static_assert(sizeof(VoxelScannerComponent_SetDynamicScannerParams) == 0x000014, "Wrong size on VoxelScannerComponent_SetDynamicScannerParams");
static_assert(offsetof(VoxelScannerComponent_SetDynamicScannerParams, InnerRadius) == 0x000000, "Member 'VoxelScannerComponent_SetDynamicScannerParams::InnerRadius' has a wrong offset!");
static_assert(offsetof(VoxelScannerComponent_SetDynamicScannerParams, OuterRadius) == 0x000004, "Member 'VoxelScannerComponent_SetDynamicScannerParams::OuterRadius' has a wrong offset!");
static_assert(offsetof(VoxelScannerComponent_SetDynamicScannerParams, OuterRevealTime) == 0x000008, "Member 'VoxelScannerComponent_SetDynamicScannerParams::OuterRevealTime' has a wrong offset!");
static_assert(offsetof(VoxelScannerComponent_SetDynamicScannerParams, UpdateTime) == 0x00000C, "Member 'VoxelScannerComponent_SetDynamicScannerParams::UpdateTime' has a wrong offset!");
static_assert(offsetof(VoxelScannerComponent_SetDynamicScannerParams, bRevealThroughWalls) == 0x000010, "Member 'VoxelScannerComponent_SetDynamicScannerParams::bRevealThroughWalls' has a wrong offset!");

// Function LevelVoxelization.VoxelScannerComponent.SetPrimarySceneCaptureRotationFollowsOwner
// 0x0001 (0x0001 - 0x0000)
struct VoxelScannerComponent_SetPrimarySceneCaptureRotationFollowsOwner final
{
public:
	bool                                          bEnable;                                           // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VoxelScannerComponent_SetPrimarySceneCaptureRotationFollowsOwner) == 0x000001, "Wrong alignment on VoxelScannerComponent_SetPrimarySceneCaptureRotationFollowsOwner");
static_assert(sizeof(VoxelScannerComponent_SetPrimarySceneCaptureRotationFollowsOwner) == 0x000001, "Wrong size on VoxelScannerComponent_SetPrimarySceneCaptureRotationFollowsOwner");
static_assert(offsetof(VoxelScannerComponent_SetPrimarySceneCaptureRotationFollowsOwner, bEnable) == 0x000000, "Member 'VoxelScannerComponent_SetPrimarySceneCaptureRotationFollowsOwner::bEnable' has a wrong offset!");

// Function LevelVoxelization.VoxelScannerComponent.SetRevealDuration
// 0x0004 (0x0004 - 0x0000)
struct VoxelScannerComponent_SetRevealDuration final
{
public:
	float                                         RevealDuration;                                    // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VoxelScannerComponent_SetRevealDuration) == 0x000004, "Wrong alignment on VoxelScannerComponent_SetRevealDuration");
static_assert(sizeof(VoxelScannerComponent_SetRevealDuration) == 0x000004, "Wrong size on VoxelScannerComponent_SetRevealDuration");
static_assert(offsetof(VoxelScannerComponent_SetRevealDuration, RevealDuration) == 0x000000, "Member 'VoxelScannerComponent_SetRevealDuration::RevealDuration' has a wrong offset!");

// Function LevelVoxelization.VoxelScannerComponent.SetScannerActive
// 0x0001 (0x0001 - 0x0000)
struct VoxelScannerComponent_SetScannerActive final
{
public:
	bool                                          bEnable;                                           // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VoxelScannerComponent_SetScannerActive) == 0x000001, "Wrong alignment on VoxelScannerComponent_SetScannerActive");
static_assert(sizeof(VoxelScannerComponent_SetScannerActive) == 0x000001, "Wrong size on VoxelScannerComponent_SetScannerActive");
static_assert(offsetof(VoxelScannerComponent_SetScannerActive, bEnable) == 0x000000, "Member 'VoxelScannerComponent_SetScannerActive::bEnable' has a wrong offset!");

// Function LevelVoxelization.VoxelScannerComponent.SetShouldDoPerspectiveUpdate
// 0x0001 (0x0001 - 0x0000)
struct VoxelScannerComponent_SetShouldDoPerspectiveUpdate final
{
public:
	bool                                          bEnable;                                           // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VoxelScannerComponent_SetShouldDoPerspectiveUpdate) == 0x000001, "Wrong alignment on VoxelScannerComponent_SetShouldDoPerspectiveUpdate");
static_assert(sizeof(VoxelScannerComponent_SetShouldDoPerspectiveUpdate) == 0x000001, "Wrong size on VoxelScannerComponent_SetShouldDoPerspectiveUpdate");
static_assert(offsetof(VoxelScannerComponent_SetShouldDoPerspectiveUpdate, bEnable) == 0x000000, "Member 'VoxelScannerComponent_SetShouldDoPerspectiveUpdate::bEnable' has a wrong offset!");

// Function LevelVoxelization.VoxelScannerComponent.SetShouldShowScannableElementsByTag
// 0x000C (0x000C - 0x0000)
struct VoxelScannerComponent_SetShouldShowScannableElementsByTag final
{
public:
	class FName                                   Tag;                                               // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bEnable;                                           // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(VoxelScannerComponent_SetShouldShowScannableElementsByTag) == 0x000004, "Wrong alignment on VoxelScannerComponent_SetShouldShowScannableElementsByTag");
static_assert(sizeof(VoxelScannerComponent_SetShouldShowScannableElementsByTag) == 0x00000C, "Wrong size on VoxelScannerComponent_SetShouldShowScannableElementsByTag");
static_assert(offsetof(VoxelScannerComponent_SetShouldShowScannableElementsByTag, Tag) == 0x000000, "Member 'VoxelScannerComponent_SetShouldShowScannableElementsByTag::Tag' has a wrong offset!");
static_assert(offsetof(VoxelScannerComponent_SetShouldShowScannableElementsByTag, bEnable) == 0x000008, "Member 'VoxelScannerComponent_SetShouldShowScannableElementsByTag::bEnable' has a wrong offset!");

// Function LevelVoxelization.VoxelScannerComponent.SetWallRadius
// 0x0004 (0x0004 - 0x0000)
struct VoxelScannerComponent_SetWallRadius final
{
public:
	float                                         Radius;                                            // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VoxelScannerComponent_SetWallRadius) == 0x000004, "Wrong alignment on VoxelScannerComponent_SetWallRadius");
static_assert(sizeof(VoxelScannerComponent_SetWallRadius) == 0x000004, "Wrong size on VoxelScannerComponent_SetWallRadius");
static_assert(offsetof(VoxelScannerComponent_SetWallRadius, Radius) == 0x000000, "Member 'VoxelScannerComponent_SetWallRadius::Radius' has a wrong offset!");

// Function LevelVoxelization.VoxelScannerComponent.SetWaypointLocationByIndex
// 0x0014 (0x0014 - 0x0000)
struct VoxelScannerComponent_SetWaypointLocationByIndex final
{
public:
	int32                                         WaypointIndex;                                     // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                WorldLocation;                                     // 0x0004(0x000C)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0010(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x3];                                       // 0x0011(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(VoxelScannerComponent_SetWaypointLocationByIndex) == 0x000004, "Wrong alignment on VoxelScannerComponent_SetWaypointLocationByIndex");
static_assert(sizeof(VoxelScannerComponent_SetWaypointLocationByIndex) == 0x000014, "Wrong size on VoxelScannerComponent_SetWaypointLocationByIndex");
static_assert(offsetof(VoxelScannerComponent_SetWaypointLocationByIndex, WaypointIndex) == 0x000000, "Member 'VoxelScannerComponent_SetWaypointLocationByIndex::WaypointIndex' has a wrong offset!");
static_assert(offsetof(VoxelScannerComponent_SetWaypointLocationByIndex, WorldLocation) == 0x000004, "Member 'VoxelScannerComponent_SetWaypointLocationByIndex::WorldLocation' has a wrong offset!");
static_assert(offsetof(VoxelScannerComponent_SetWaypointLocationByIndex, ReturnValue) == 0x000010, "Member 'VoxelScannerComponent_SetWaypointLocationByIndex::ReturnValue' has a wrong offset!");

// Function LevelVoxelization.VoxelScannerComponent.SetWaypointMessageByIndex
// 0x0020 (0x0020 - 0x0000)
struct VoxelScannerComponent_SetWaypointMessageByIndex final
{
public:
	int32                                         WaypointIndex;                                     // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 Message;                                           // 0x0008(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0018(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_19[0x7];                                       // 0x0019(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(VoxelScannerComponent_SetWaypointMessageByIndex) == 0x000008, "Wrong alignment on VoxelScannerComponent_SetWaypointMessageByIndex");
static_assert(sizeof(VoxelScannerComponent_SetWaypointMessageByIndex) == 0x000020, "Wrong size on VoxelScannerComponent_SetWaypointMessageByIndex");
static_assert(offsetof(VoxelScannerComponent_SetWaypointMessageByIndex, WaypointIndex) == 0x000000, "Member 'VoxelScannerComponent_SetWaypointMessageByIndex::WaypointIndex' has a wrong offset!");
static_assert(offsetof(VoxelScannerComponent_SetWaypointMessageByIndex, Message) == 0x000008, "Member 'VoxelScannerComponent_SetWaypointMessageByIndex::Message' has a wrong offset!");
static_assert(offsetof(VoxelScannerComponent_SetWaypointMessageByIndex, ReturnValue) == 0x000018, "Member 'VoxelScannerComponent_SetWaypointMessageByIndex::ReturnValue' has a wrong offset!");

// Function LevelVoxelization.VoxelScannerComponent.SetWaypointMessageFont
// 0x0010 (0x0010 - 0x0000)
struct VoxelScannerComponent_SetWaypointMessageFont final
{
public:
	class UFont*                                  Font;                                              // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(VoxelScannerComponent_SetWaypointMessageFont) == 0x000008, "Wrong alignment on VoxelScannerComponent_SetWaypointMessageFont");
static_assert(sizeof(VoxelScannerComponent_SetWaypointMessageFont) == 0x000010, "Wrong size on VoxelScannerComponent_SetWaypointMessageFont");
static_assert(offsetof(VoxelScannerComponent_SetWaypointMessageFont, Font) == 0x000000, "Member 'VoxelScannerComponent_SetWaypointMessageFont::Font' has a wrong offset!");
static_assert(offsetof(VoxelScannerComponent_SetWaypointMessageFont, ReturnValue) == 0x000008, "Member 'VoxelScannerComponent_SetWaypointMessageFont::ReturnValue' has a wrong offset!");

// Function LevelVoxelization.VoxelScannerComponent.DoLevelInstancesShareScanData
// 0x0001 (0x0001 - 0x0000)
struct VoxelScannerComponent_DoLevelInstancesShareScanData final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VoxelScannerComponent_DoLevelInstancesShareScanData) == 0x000001, "Wrong alignment on VoxelScannerComponent_DoLevelInstancesShareScanData");
static_assert(sizeof(VoxelScannerComponent_DoLevelInstancesShareScanData) == 0x000001, "Wrong size on VoxelScannerComponent_DoLevelInstancesShareScanData");
static_assert(offsetof(VoxelScannerComponent_DoLevelInstancesShareScanData, ReturnValue) == 0x000000, "Member 'VoxelScannerComponent_DoLevelInstancesShareScanData::ReturnValue' has a wrong offset!");

// Function LevelVoxelization.VoxelScannerComponent.GetActiveWaypointCount
// 0x0004 (0x0004 - 0x0000)
struct VoxelScannerComponent_GetActiveWaypointCount final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VoxelScannerComponent_GetActiveWaypointCount) == 0x000004, "Wrong alignment on VoxelScannerComponent_GetActiveWaypointCount");
static_assert(sizeof(VoxelScannerComponent_GetActiveWaypointCount) == 0x000004, "Wrong size on VoxelScannerComponent_GetActiveWaypointCount");
static_assert(offsetof(VoxelScannerComponent_GetActiveWaypointCount, ReturnValue) == 0x000000, "Member 'VoxelScannerComponent_GetActiveWaypointCount::ReturnValue' has a wrong offset!");

// Function LevelVoxelization.VoxelScannerComponent.GetLevelActorForLevelInstance
// 0x0010 (0x0010 - 0x0000)
struct VoxelScannerComponent_GetLevelActorForLevelInstance final
{
public:
	EVoxelLevelInstanceType                       InstanceType;                                      // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class AActor*                                 ReturnValue;                                       // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VoxelScannerComponent_GetLevelActorForLevelInstance) == 0x000008, "Wrong alignment on VoxelScannerComponent_GetLevelActorForLevelInstance");
static_assert(sizeof(VoxelScannerComponent_GetLevelActorForLevelInstance) == 0x000010, "Wrong size on VoxelScannerComponent_GetLevelActorForLevelInstance");
static_assert(offsetof(VoxelScannerComponent_GetLevelActorForLevelInstance, InstanceType) == 0x000000, "Member 'VoxelScannerComponent_GetLevelActorForLevelInstance::InstanceType' has a wrong offset!");
static_assert(offsetof(VoxelScannerComponent_GetLevelActorForLevelInstance, ReturnValue) == 0x000008, "Member 'VoxelScannerComponent_GetLevelActorForLevelInstance::ReturnValue' has a wrong offset!");

// Function LevelVoxelization.VoxelScannerComponent.GetPrimarySceneCaptureRotationFollowsOwner
// 0x0001 (0x0001 - 0x0000)
struct VoxelScannerComponent_GetPrimarySceneCaptureRotationFollowsOwner final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VoxelScannerComponent_GetPrimarySceneCaptureRotationFollowsOwner) == 0x000001, "Wrong alignment on VoxelScannerComponent_GetPrimarySceneCaptureRotationFollowsOwner");
static_assert(sizeof(VoxelScannerComponent_GetPrimarySceneCaptureRotationFollowsOwner) == 0x000001, "Wrong size on VoxelScannerComponent_GetPrimarySceneCaptureRotationFollowsOwner");
static_assert(offsetof(VoxelScannerComponent_GetPrimarySceneCaptureRotationFollowsOwner, ReturnValue) == 0x000000, "Member 'VoxelScannerComponent_GetPrimarySceneCaptureRotationFollowsOwner::ReturnValue' has a wrong offset!");

// Function LevelVoxelization.VoxelScannerComponent.GetProceduralLevelMeshComponent
// 0x0010 (0x0010 - 0x0000)
struct VoxelScannerComponent_GetProceduralLevelMeshComponent final
{
public:
	EVoxelLevelInstanceType                       LevelInstanceType;                                 // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UVoxelScannerMeshComponent*             ReturnValue;                                       // 0x0008(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VoxelScannerComponent_GetProceduralLevelMeshComponent) == 0x000008, "Wrong alignment on VoxelScannerComponent_GetProceduralLevelMeshComponent");
static_assert(sizeof(VoxelScannerComponent_GetProceduralLevelMeshComponent) == 0x000010, "Wrong size on VoxelScannerComponent_GetProceduralLevelMeshComponent");
static_assert(offsetof(VoxelScannerComponent_GetProceduralLevelMeshComponent, LevelInstanceType) == 0x000000, "Member 'VoxelScannerComponent_GetProceduralLevelMeshComponent::LevelInstanceType' has a wrong offset!");
static_assert(offsetof(VoxelScannerComponent_GetProceduralLevelMeshComponent, ReturnValue) == 0x000008, "Member 'VoxelScannerComponent_GetProceduralLevelMeshComponent::ReturnValue' has a wrong offset!");

// Function LevelVoxelization.VoxelScannerComponent.GetProceduralWallEdgeMeshComponent
// 0x0010 (0x0010 - 0x0000)
struct VoxelScannerComponent_GetProceduralWallEdgeMeshComponent final
{
public:
	EVoxelLevelInstanceType                       LevelInstanceType;                                 // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UVoxelScannerMeshComponent*             ReturnValue;                                       // 0x0008(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VoxelScannerComponent_GetProceduralWallEdgeMeshComponent) == 0x000008, "Wrong alignment on VoxelScannerComponent_GetProceduralWallEdgeMeshComponent");
static_assert(sizeof(VoxelScannerComponent_GetProceduralWallEdgeMeshComponent) == 0x000010, "Wrong size on VoxelScannerComponent_GetProceduralWallEdgeMeshComponent");
static_assert(offsetof(VoxelScannerComponent_GetProceduralWallEdgeMeshComponent, LevelInstanceType) == 0x000000, "Member 'VoxelScannerComponent_GetProceduralWallEdgeMeshComponent::LevelInstanceType' has a wrong offset!");
static_assert(offsetof(VoxelScannerComponent_GetProceduralWallEdgeMeshComponent, ReturnValue) == 0x000008, "Member 'VoxelScannerComponent_GetProceduralWallEdgeMeshComponent::ReturnValue' has a wrong offset!");

// Function LevelVoxelization.VoxelScannerComponent.GetSceneCaptureComponent
// 0x0010 (0x0010 - 0x0000)
struct VoxelScannerComponent_GetSceneCaptureComponent final
{
public:
	EVoxelLevelInstanceType                       LevelInstanceType;                                 // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class USceneCaptureComponent2D*               ReturnValue;                                       // 0x0008(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VoxelScannerComponent_GetSceneCaptureComponent) == 0x000008, "Wrong alignment on VoxelScannerComponent_GetSceneCaptureComponent");
static_assert(sizeof(VoxelScannerComponent_GetSceneCaptureComponent) == 0x000010, "Wrong size on VoxelScannerComponent_GetSceneCaptureComponent");
static_assert(offsetof(VoxelScannerComponent_GetSceneCaptureComponent, LevelInstanceType) == 0x000000, "Member 'VoxelScannerComponent_GetSceneCaptureComponent::LevelInstanceType' has a wrong offset!");
static_assert(offsetof(VoxelScannerComponent_GetSceneCaptureComponent, ReturnValue) == 0x000008, "Member 'VoxelScannerComponent_GetSceneCaptureComponent::ReturnValue' has a wrong offset!");

// Function LevelVoxelization.VoxelScannerComponent.GetShouldDoPerspectiveUpdate
// 0x0001 (0x0001 - 0x0000)
struct VoxelScannerComponent_GetShouldDoPerspectiveUpdate final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VoxelScannerComponent_GetShouldDoPerspectiveUpdate) == 0x000001, "Wrong alignment on VoxelScannerComponent_GetShouldDoPerspectiveUpdate");
static_assert(sizeof(VoxelScannerComponent_GetShouldDoPerspectiveUpdate) == 0x000001, "Wrong size on VoxelScannerComponent_GetShouldDoPerspectiveUpdate");
static_assert(offsetof(VoxelScannerComponent_GetShouldDoPerspectiveUpdate, ReturnValue) == 0x000000, "Member 'VoxelScannerComponent_GetShouldDoPerspectiveUpdate::ReturnValue' has a wrong offset!");

// Function LevelVoxelization.VoxelScannerComponent.GetWaypointIndexAtLocation
// 0x0014 (0x0014 - 0x0000)
struct VoxelScannerComponent_GetWaypointIndexAtLocation final
{
public:
	struct FVector                                WorldLocation;                                     // 0x0000(0x000C)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         SearchRadius;                                      // 0x000C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ReturnValue;                                       // 0x0010(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VoxelScannerComponent_GetWaypointIndexAtLocation) == 0x000004, "Wrong alignment on VoxelScannerComponent_GetWaypointIndexAtLocation");
static_assert(sizeof(VoxelScannerComponent_GetWaypointIndexAtLocation) == 0x000014, "Wrong size on VoxelScannerComponent_GetWaypointIndexAtLocation");
static_assert(offsetof(VoxelScannerComponent_GetWaypointIndexAtLocation, WorldLocation) == 0x000000, "Member 'VoxelScannerComponent_GetWaypointIndexAtLocation::WorldLocation' has a wrong offset!");
static_assert(offsetof(VoxelScannerComponent_GetWaypointIndexAtLocation, SearchRadius) == 0x00000C, "Member 'VoxelScannerComponent_GetWaypointIndexAtLocation::SearchRadius' has a wrong offset!");
static_assert(offsetof(VoxelScannerComponent_GetWaypointIndexAtLocation, ReturnValue) == 0x000010, "Member 'VoxelScannerComponent_GetWaypointIndexAtLocation::ReturnValue' has a wrong offset!");

// Function LevelVoxelization.VoxelScannerComponent.GetWaypointMessageByIndex
// 0x0020 (0x0020 - 0x0000)
struct VoxelScannerComponent_GetWaypointMessageByIndex final
{
public:
	int32                                         WaypointIndex;                                     // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 OutMessage;                                        // 0x0008(0x0010)(Parm, OutParm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0018(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_19[0x7];                                       // 0x0019(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(VoxelScannerComponent_GetWaypointMessageByIndex) == 0x000008, "Wrong alignment on VoxelScannerComponent_GetWaypointMessageByIndex");
static_assert(sizeof(VoxelScannerComponent_GetWaypointMessageByIndex) == 0x000020, "Wrong size on VoxelScannerComponent_GetWaypointMessageByIndex");
static_assert(offsetof(VoxelScannerComponent_GetWaypointMessageByIndex, WaypointIndex) == 0x000000, "Member 'VoxelScannerComponent_GetWaypointMessageByIndex::WaypointIndex' has a wrong offset!");
static_assert(offsetof(VoxelScannerComponent_GetWaypointMessageByIndex, OutMessage) == 0x000008, "Member 'VoxelScannerComponent_GetWaypointMessageByIndex::OutMessage' has a wrong offset!");
static_assert(offsetof(VoxelScannerComponent_GetWaypointMessageByIndex, ReturnValue) == 0x000018, "Member 'VoxelScannerComponent_GetWaypointMessageByIndex::ReturnValue' has a wrong offset!");

// Function LevelVoxelization.VoxelScannerComponent.HasScanDataForLevel
// 0x000C (0x000C - 0x0000)
struct VoxelScannerComponent_HasScanDataForLevel final
{
public:
	class FName                                   LevelName;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(VoxelScannerComponent_HasScanDataForLevel) == 0x000004, "Wrong alignment on VoxelScannerComponent_HasScanDataForLevel");
static_assert(sizeof(VoxelScannerComponent_HasScanDataForLevel) == 0x00000C, "Wrong size on VoxelScannerComponent_HasScanDataForLevel");
static_assert(offsetof(VoxelScannerComponent_HasScanDataForLevel, LevelName) == 0x000000, "Member 'VoxelScannerComponent_HasScanDataForLevel::LevelName' has a wrong offset!");
static_assert(offsetof(VoxelScannerComponent_HasScanDataForLevel, ReturnValue) == 0x000008, "Member 'VoxelScannerComponent_HasScanDataForLevel::ReturnValue' has a wrong offset!");

// Function LevelVoxelization.VoxelScannerComponent.HasScannedVoxelColumnLocation
// 0x0010 (0x0010 - 0x0000)
struct VoxelScannerComponent_HasScannedVoxelColumnLocation final
{
public:
	EVoxelLevelInstanceType                       LevelInstanceType;                                 // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FIntPoint                              ColumnLocation;                                    // 0x0004(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x000C(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_D[0x3];                                        // 0x000D(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(VoxelScannerComponent_HasScannedVoxelColumnLocation) == 0x000004, "Wrong alignment on VoxelScannerComponent_HasScannedVoxelColumnLocation");
static_assert(sizeof(VoxelScannerComponent_HasScannedVoxelColumnLocation) == 0x000010, "Wrong size on VoxelScannerComponent_HasScannedVoxelColumnLocation");
static_assert(offsetof(VoxelScannerComponent_HasScannedVoxelColumnLocation, LevelInstanceType) == 0x000000, "Member 'VoxelScannerComponent_HasScannedVoxelColumnLocation::LevelInstanceType' has a wrong offset!");
static_assert(offsetof(VoxelScannerComponent_HasScannedVoxelColumnLocation, ColumnLocation) == 0x000004, "Member 'VoxelScannerComponent_HasScannedVoxelColumnLocation::ColumnLocation' has a wrong offset!");
static_assert(offsetof(VoxelScannerComponent_HasScannedVoxelColumnLocation, ReturnValue) == 0x00000C, "Member 'VoxelScannerComponent_HasScannedVoxelColumnLocation::ReturnValue' has a wrong offset!");

// Function LevelVoxelization.VoxelScannerComponent.IsScannableFilterTagAvailable
// 0x000C (0x000C - 0x0000)
struct VoxelScannerComponent_IsScannableFilterTagAvailable final
{
public:
	class FName                                   Tag;                                               // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(VoxelScannerComponent_IsScannableFilterTagAvailable) == 0x000004, "Wrong alignment on VoxelScannerComponent_IsScannableFilterTagAvailable");
static_assert(sizeof(VoxelScannerComponent_IsScannableFilterTagAvailable) == 0x00000C, "Wrong size on VoxelScannerComponent_IsScannableFilterTagAvailable");
static_assert(offsetof(VoxelScannerComponent_IsScannableFilterTagAvailable, Tag) == 0x000000, "Member 'VoxelScannerComponent_IsScannableFilterTagAvailable::Tag' has a wrong offset!");
static_assert(offsetof(VoxelScannerComponent_IsScannableFilterTagAvailable, ReturnValue) == 0x000008, "Member 'VoxelScannerComponent_IsScannableFilterTagAvailable::ReturnValue' has a wrong offset!");

// Function LevelVoxelization.VoxelScannerComponent.ShouldScannableElementBeVisible
// 0x000C (0x000C - 0x0000)
struct VoxelScannerComponent_ShouldScannableElementBeVisible final
{
public:
	class FName                                   ScannableFilterTag;                                // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(VoxelScannerComponent_ShouldScannableElementBeVisible) == 0x000004, "Wrong alignment on VoxelScannerComponent_ShouldScannableElementBeVisible");
static_assert(sizeof(VoxelScannerComponent_ShouldScannableElementBeVisible) == 0x00000C, "Wrong size on VoxelScannerComponent_ShouldScannableElementBeVisible");
static_assert(offsetof(VoxelScannerComponent_ShouldScannableElementBeVisible, ScannableFilterTag) == 0x000000, "Member 'VoxelScannerComponent_ShouldScannableElementBeVisible::ScannableFilterTag' has a wrong offset!");
static_assert(offsetof(VoxelScannerComponent_ShouldScannableElementBeVisible, ReturnValue) == 0x000008, "Member 'VoxelScannerComponent_ShouldScannableElementBeVisible::ReturnValue' has a wrong offset!");

}

