#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: ITEM_UpgradeBase

#include "Basic.hpp"

#include "ENUM_UpgradeResult_structs.hpp"
#include "STRUCT_HardItemParams_structs.hpp"


namespace SDK::Params
{

// Function ITEM_UpgradeBase.ITEM_UpgradeBase_C.ApplyUpgrade
// 0x00E0 (0x00E0 - 0x0000)
struct ITEM_UpgradeBase_C_ApplyUpgrade final
{
public:
	class UITEM_UpgradeBase_C*                    UpgradeItem;                                       // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UClass*                                 UpgradeClass;                                      // 0x0008(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ENUM_UpgradeResult                            UpgradeResult;                                     // 0x0010(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UITEM_UpgradeBase_C*                    CreatedUpgradeItem;                                // 0x0018(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         ModuleIndex;                                       // 0x0020(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         PreviousSlotIndex;                                 // 0x0024(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UInventoryBag_C*                        PreviousBag;                                       // 0x0028(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ENUM_UpgradeResult                            UpgradeType;                                       // 0x0030(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_31[0x7];                                       // 0x0031(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UCOMP_Inventory_C*                      CallFunc_GetInventory_Inventory;                   // 0x0038(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ENUM_UpgradeResult                            CallFunc_GetUpgradeType_Result;                    // 0x0040(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_SetInventory_Result;                      // 0x0041(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_42[0x6];                                       // 0x0042(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class UCOMP_Inventory_C*                      CallFunc_GetInventory_Inventory_1;                 // 0x0048(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_GreaterEqual_IntInt_ReturnValue;          // 0x0050(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_51[0x3];                                       // 0x0051(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_GetBestModuleIndexForUpgrade_Index;       // 0x0054(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UClass*                                 CallFunc_GetObjectClass_ReturnValue;               // 0x0058(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UClass*                                 K2Node_ClassDynamicCast_AsITEM_Upgrade_Base;       // 0x0060(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_ClassDynamicCast_bSuccess;                  // 0x0068(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_69[0x7];                                       // 0x0069(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UCOMP_Inventory_C*                      CallFunc_GetInventory_Inventory_2;                 // 0x0070(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_ByteByte_ReturnValue;          // 0x0078(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_OnUpgradedItem_Result;                    // 0x0079(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_7A[0x6];                                       // 0x007A(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class UITEM_Base_C*                           CallFunc_RemoveItem_RemovedItem;                   // 0x0080(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0088(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_89[0x7];                                       // 0x0089(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FSTRUCT_HardItemParams                 K2Node_MakeStruct_STRUCT_HardItemParams;           // 0x0090(0x0010)(IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue_1;                    // 0x00A0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_A1[0x7];                                       // 0x00A1(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UITEM_Base_C*                           CallFunc_CreateItem_Item;                          // 0x00A8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UITEM_UpgradeBase_C*                    K2Node_DynamicCast_AsITEM_Upgrade_Base;            // 0x00B0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x00B8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_OnUpgradedItem_Result_1;                  // 0x00B9(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_BA[0x6];                                       // 0x00BA(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class UInventoryBag_C*                        CallFunc_GetBag_Result;                            // 0x00C0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_MakeLiteralInt_ReturnValue;               // 0x00C8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_GetSlotIndex_Result;                      // 0x00CC(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UITEM_Base_C*                           CallFunc_CreateItemInSlot_ItemCreated;             // 0x00D0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_NotEqual_ByteByte_ReturnValue;            // 0x00D8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(ITEM_UpgradeBase_C_ApplyUpgrade) == 0x000008, "Wrong alignment on ITEM_UpgradeBase_C_ApplyUpgrade");
static_assert(sizeof(ITEM_UpgradeBase_C_ApplyUpgrade) == 0x0000E0, "Wrong size on ITEM_UpgradeBase_C_ApplyUpgrade");
static_assert(offsetof(ITEM_UpgradeBase_C_ApplyUpgrade, UpgradeItem) == 0x000000, "Member 'ITEM_UpgradeBase_C_ApplyUpgrade::UpgradeItem' has a wrong offset!");
static_assert(offsetof(ITEM_UpgradeBase_C_ApplyUpgrade, UpgradeClass) == 0x000008, "Member 'ITEM_UpgradeBase_C_ApplyUpgrade::UpgradeClass' has a wrong offset!");
static_assert(offsetof(ITEM_UpgradeBase_C_ApplyUpgrade, UpgradeResult) == 0x000010, "Member 'ITEM_UpgradeBase_C_ApplyUpgrade::UpgradeResult' has a wrong offset!");
static_assert(offsetof(ITEM_UpgradeBase_C_ApplyUpgrade, CreatedUpgradeItem) == 0x000018, "Member 'ITEM_UpgradeBase_C_ApplyUpgrade::CreatedUpgradeItem' has a wrong offset!");
static_assert(offsetof(ITEM_UpgradeBase_C_ApplyUpgrade, ModuleIndex) == 0x000020, "Member 'ITEM_UpgradeBase_C_ApplyUpgrade::ModuleIndex' has a wrong offset!");
static_assert(offsetof(ITEM_UpgradeBase_C_ApplyUpgrade, PreviousSlotIndex) == 0x000024, "Member 'ITEM_UpgradeBase_C_ApplyUpgrade::PreviousSlotIndex' has a wrong offset!");
static_assert(offsetof(ITEM_UpgradeBase_C_ApplyUpgrade, PreviousBag) == 0x000028, "Member 'ITEM_UpgradeBase_C_ApplyUpgrade::PreviousBag' has a wrong offset!");
static_assert(offsetof(ITEM_UpgradeBase_C_ApplyUpgrade, UpgradeType) == 0x000030, "Member 'ITEM_UpgradeBase_C_ApplyUpgrade::UpgradeType' has a wrong offset!");
static_assert(offsetof(ITEM_UpgradeBase_C_ApplyUpgrade, CallFunc_GetInventory_Inventory) == 0x000038, "Member 'ITEM_UpgradeBase_C_ApplyUpgrade::CallFunc_GetInventory_Inventory' has a wrong offset!");
static_assert(offsetof(ITEM_UpgradeBase_C_ApplyUpgrade, CallFunc_GetUpgradeType_Result) == 0x000040, "Member 'ITEM_UpgradeBase_C_ApplyUpgrade::CallFunc_GetUpgradeType_Result' has a wrong offset!");
static_assert(offsetof(ITEM_UpgradeBase_C_ApplyUpgrade, CallFunc_SetInventory_Result) == 0x000041, "Member 'ITEM_UpgradeBase_C_ApplyUpgrade::CallFunc_SetInventory_Result' has a wrong offset!");
static_assert(offsetof(ITEM_UpgradeBase_C_ApplyUpgrade, CallFunc_GetInventory_Inventory_1) == 0x000048, "Member 'ITEM_UpgradeBase_C_ApplyUpgrade::CallFunc_GetInventory_Inventory_1' has a wrong offset!");
static_assert(offsetof(ITEM_UpgradeBase_C_ApplyUpgrade, CallFunc_GreaterEqual_IntInt_ReturnValue) == 0x000050, "Member 'ITEM_UpgradeBase_C_ApplyUpgrade::CallFunc_GreaterEqual_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(ITEM_UpgradeBase_C_ApplyUpgrade, CallFunc_GetBestModuleIndexForUpgrade_Index) == 0x000054, "Member 'ITEM_UpgradeBase_C_ApplyUpgrade::CallFunc_GetBestModuleIndexForUpgrade_Index' has a wrong offset!");
static_assert(offsetof(ITEM_UpgradeBase_C_ApplyUpgrade, CallFunc_GetObjectClass_ReturnValue) == 0x000058, "Member 'ITEM_UpgradeBase_C_ApplyUpgrade::CallFunc_GetObjectClass_ReturnValue' has a wrong offset!");
static_assert(offsetof(ITEM_UpgradeBase_C_ApplyUpgrade, K2Node_ClassDynamicCast_AsITEM_Upgrade_Base) == 0x000060, "Member 'ITEM_UpgradeBase_C_ApplyUpgrade::K2Node_ClassDynamicCast_AsITEM_Upgrade_Base' has a wrong offset!");
static_assert(offsetof(ITEM_UpgradeBase_C_ApplyUpgrade, K2Node_ClassDynamicCast_bSuccess) == 0x000068, "Member 'ITEM_UpgradeBase_C_ApplyUpgrade::K2Node_ClassDynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(ITEM_UpgradeBase_C_ApplyUpgrade, CallFunc_GetInventory_Inventory_2) == 0x000070, "Member 'ITEM_UpgradeBase_C_ApplyUpgrade::CallFunc_GetInventory_Inventory_2' has a wrong offset!");
static_assert(offsetof(ITEM_UpgradeBase_C_ApplyUpgrade, CallFunc_EqualEqual_ByteByte_ReturnValue) == 0x000078, "Member 'ITEM_UpgradeBase_C_ApplyUpgrade::CallFunc_EqualEqual_ByteByte_ReturnValue' has a wrong offset!");
static_assert(offsetof(ITEM_UpgradeBase_C_ApplyUpgrade, CallFunc_OnUpgradedItem_Result) == 0x000079, "Member 'ITEM_UpgradeBase_C_ApplyUpgrade::CallFunc_OnUpgradedItem_Result' has a wrong offset!");
static_assert(offsetof(ITEM_UpgradeBase_C_ApplyUpgrade, CallFunc_RemoveItem_RemovedItem) == 0x000080, "Member 'ITEM_UpgradeBase_C_ApplyUpgrade::CallFunc_RemoveItem_RemovedItem' has a wrong offset!");
static_assert(offsetof(ITEM_UpgradeBase_C_ApplyUpgrade, CallFunc_IsValid_ReturnValue) == 0x000088, "Member 'ITEM_UpgradeBase_C_ApplyUpgrade::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(ITEM_UpgradeBase_C_ApplyUpgrade, K2Node_MakeStruct_STRUCT_HardItemParams) == 0x000090, "Member 'ITEM_UpgradeBase_C_ApplyUpgrade::K2Node_MakeStruct_STRUCT_HardItemParams' has a wrong offset!");
static_assert(offsetof(ITEM_UpgradeBase_C_ApplyUpgrade, CallFunc_IsValid_ReturnValue_1) == 0x0000A0, "Member 'ITEM_UpgradeBase_C_ApplyUpgrade::CallFunc_IsValid_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(ITEM_UpgradeBase_C_ApplyUpgrade, CallFunc_CreateItem_Item) == 0x0000A8, "Member 'ITEM_UpgradeBase_C_ApplyUpgrade::CallFunc_CreateItem_Item' has a wrong offset!");
static_assert(offsetof(ITEM_UpgradeBase_C_ApplyUpgrade, K2Node_DynamicCast_AsITEM_Upgrade_Base) == 0x0000B0, "Member 'ITEM_UpgradeBase_C_ApplyUpgrade::K2Node_DynamicCast_AsITEM_Upgrade_Base' has a wrong offset!");
static_assert(offsetof(ITEM_UpgradeBase_C_ApplyUpgrade, K2Node_DynamicCast_bSuccess) == 0x0000B8, "Member 'ITEM_UpgradeBase_C_ApplyUpgrade::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(ITEM_UpgradeBase_C_ApplyUpgrade, CallFunc_OnUpgradedItem_Result_1) == 0x0000B9, "Member 'ITEM_UpgradeBase_C_ApplyUpgrade::CallFunc_OnUpgradedItem_Result_1' has a wrong offset!");
static_assert(offsetof(ITEM_UpgradeBase_C_ApplyUpgrade, CallFunc_GetBag_Result) == 0x0000C0, "Member 'ITEM_UpgradeBase_C_ApplyUpgrade::CallFunc_GetBag_Result' has a wrong offset!");
static_assert(offsetof(ITEM_UpgradeBase_C_ApplyUpgrade, CallFunc_MakeLiteralInt_ReturnValue) == 0x0000C8, "Member 'ITEM_UpgradeBase_C_ApplyUpgrade::CallFunc_MakeLiteralInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(ITEM_UpgradeBase_C_ApplyUpgrade, CallFunc_GetSlotIndex_Result) == 0x0000CC, "Member 'ITEM_UpgradeBase_C_ApplyUpgrade::CallFunc_GetSlotIndex_Result' has a wrong offset!");
static_assert(offsetof(ITEM_UpgradeBase_C_ApplyUpgrade, CallFunc_CreateItemInSlot_ItemCreated) == 0x0000D0, "Member 'ITEM_UpgradeBase_C_ApplyUpgrade::CallFunc_CreateItemInSlot_ItemCreated' has a wrong offset!");
static_assert(offsetof(ITEM_UpgradeBase_C_ApplyUpgrade, CallFunc_NotEqual_ByteByte_ReturnValue) == 0x0000D8, "Member 'ITEM_UpgradeBase_C_ApplyUpgrade::CallFunc_NotEqual_ByteByte_ReturnValue' has a wrong offset!");

// Function ITEM_UpgradeBase.ITEM_UpgradeBase_C.GetVersionNumber
// 0x0018 (0x0018 - 0x0000)
struct ITEM_UpgradeBase_C_GetVersionNumber final
{
public:
	int32                                         Version;                                           // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_GreaterEqual_IntInt_ReturnValue;          // 0x0004(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class UClass*                                 CallFunc_GetObjectClass_ReturnValue;               // 0x0008(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_GetUpgradeVersionNumber_Version;          // 0x0010(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(ITEM_UpgradeBase_C_GetVersionNumber) == 0x000008, "Wrong alignment on ITEM_UpgradeBase_C_GetVersionNumber");
static_assert(sizeof(ITEM_UpgradeBase_C_GetVersionNumber) == 0x000018, "Wrong size on ITEM_UpgradeBase_C_GetVersionNumber");
static_assert(offsetof(ITEM_UpgradeBase_C_GetVersionNumber, Version) == 0x000000, "Member 'ITEM_UpgradeBase_C_GetVersionNumber::Version' has a wrong offset!");
static_assert(offsetof(ITEM_UpgradeBase_C_GetVersionNumber, CallFunc_GreaterEqual_IntInt_ReturnValue) == 0x000004, "Member 'ITEM_UpgradeBase_C_GetVersionNumber::CallFunc_GreaterEqual_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(ITEM_UpgradeBase_C_GetVersionNumber, CallFunc_GetObjectClass_ReturnValue) == 0x000008, "Member 'ITEM_UpgradeBase_C_GetVersionNumber::CallFunc_GetObjectClass_ReturnValue' has a wrong offset!");
static_assert(offsetof(ITEM_UpgradeBase_C_GetVersionNumber, CallFunc_GetUpgradeVersionNumber_Version) == 0x000010, "Member 'ITEM_UpgradeBase_C_GetVersionNumber::CallFunc_GetUpgradeVersionNumber_Version' has a wrong offset!");

// Function ITEM_UpgradeBase.ITEM_UpgradeBase_C.OnUpgradedItem
// 0x0010 (0x0010 - 0x0000)
struct ITEM_UpgradeBase_C_OnUpgradedItem final
{
public:
	class UITEM_UpgradeBase_C*                    PreviousItem;                                      // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Result;                                            // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(ITEM_UpgradeBase_C_OnUpgradedItem) == 0x000008, "Wrong alignment on ITEM_UpgradeBase_C_OnUpgradedItem");
static_assert(sizeof(ITEM_UpgradeBase_C_OnUpgradedItem) == 0x000010, "Wrong size on ITEM_UpgradeBase_C_OnUpgradedItem");
static_assert(offsetof(ITEM_UpgradeBase_C_OnUpgradedItem, PreviousItem) == 0x000000, "Member 'ITEM_UpgradeBase_C_OnUpgradedItem::PreviousItem' has a wrong offset!");
static_assert(offsetof(ITEM_UpgradeBase_C_OnUpgradedItem, Result) == 0x000008, "Member 'ITEM_UpgradeBase_C_OnUpgradedItem::Result' has a wrong offset!");

// Function ITEM_UpgradeBase.ITEM_UpgradeBase_C.GetVersionHistory
// 0x0050 (0x0050 - 0x0000)
struct ITEM_UpgradeBase_C_GetVersionHistory final
{
public:
	TArray<class FText>                           VersionHistory;                                    // 0x0000(0x0010)(Parm, OutParm)
	TArray<class FText>                           VersionHistoryArray;                               // 0x0010(0x0010)(Edit, BlueprintVisible)
	class UClass*                                 CurrentClass;                                      // 0x0020(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UClass*                                 CallFunc_GetObjectClass_ReturnValue;               // 0x0028(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValidClass_ReturnValue;                 // 0x0030(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_31[0x7];                                       // 0x0031(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UClass*                                 CallFunc_LoadClassAsset_Blocking_ReturnValue;      // 0x0038(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UClass*                                 K2Node_ClassDynamicCast_AsITEM_Upgrade_Base;       // 0x0040(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_ClassDynamicCast_bSuccess;                  // 0x0048(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(ITEM_UpgradeBase_C_GetVersionHistory) == 0x000008, "Wrong alignment on ITEM_UpgradeBase_C_GetVersionHistory");
static_assert(sizeof(ITEM_UpgradeBase_C_GetVersionHistory) == 0x000050, "Wrong size on ITEM_UpgradeBase_C_GetVersionHistory");
static_assert(offsetof(ITEM_UpgradeBase_C_GetVersionHistory, VersionHistory) == 0x000000, "Member 'ITEM_UpgradeBase_C_GetVersionHistory::VersionHistory' has a wrong offset!");
static_assert(offsetof(ITEM_UpgradeBase_C_GetVersionHistory, VersionHistoryArray) == 0x000010, "Member 'ITEM_UpgradeBase_C_GetVersionHistory::VersionHistoryArray' has a wrong offset!");
static_assert(offsetof(ITEM_UpgradeBase_C_GetVersionHistory, CurrentClass) == 0x000020, "Member 'ITEM_UpgradeBase_C_GetVersionHistory::CurrentClass' has a wrong offset!");
static_assert(offsetof(ITEM_UpgradeBase_C_GetVersionHistory, CallFunc_GetObjectClass_ReturnValue) == 0x000028, "Member 'ITEM_UpgradeBase_C_GetVersionHistory::CallFunc_GetObjectClass_ReturnValue' has a wrong offset!");
static_assert(offsetof(ITEM_UpgradeBase_C_GetVersionHistory, CallFunc_IsValidClass_ReturnValue) == 0x000030, "Member 'ITEM_UpgradeBase_C_GetVersionHistory::CallFunc_IsValidClass_ReturnValue' has a wrong offset!");
static_assert(offsetof(ITEM_UpgradeBase_C_GetVersionHistory, CallFunc_LoadClassAsset_Blocking_ReturnValue) == 0x000038, "Member 'ITEM_UpgradeBase_C_GetVersionHistory::CallFunc_LoadClassAsset_Blocking_ReturnValue' has a wrong offset!");
static_assert(offsetof(ITEM_UpgradeBase_C_GetVersionHistory, K2Node_ClassDynamicCast_AsITEM_Upgrade_Base) == 0x000040, "Member 'ITEM_UpgradeBase_C_GetVersionHistory::K2Node_ClassDynamicCast_AsITEM_Upgrade_Base' has a wrong offset!");
static_assert(offsetof(ITEM_UpgradeBase_C_GetVersionHistory, K2Node_ClassDynamicCast_bSuccess) == 0x000048, "Member 'ITEM_UpgradeBase_C_GetVersionHistory::K2Node_ClassDynamicCast_bSuccess' has a wrong offset!");

// Function ITEM_UpgradeBase.ITEM_UpgradeBase_C.GetUpgradeType
// 0x0040 (0x0040 - 0x0000)
struct ITEM_UpgradeBase_C_GetUpgradeType final
{
public:
	class UClass*                                 UpgradeClass;                                      // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ENUM_UpgradeResult                            Result;                                            // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UClass*                                 DowngradeClass;                                    // 0x0010(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         ModuleIndex;                                       // 0x0018(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1C[0x4];                                       // 0x001C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UClass*                                 CallFunc_GetInstalledModuleAtIndex_UpgradeClass;   // 0x0020(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_GreaterEqual_IntInt_ReturnValue;          // 0x0028(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_EqualEqual_ClassClass_ReturnValue;        // 0x0029(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_2A[0x2];                                       // 0x002A(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_GetBestModuleIndexForUpgrade_Index;       // 0x002C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UClass*                                 CallFunc_GetObjectClass_ReturnValue;               // 0x0030(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValidClass_ReturnValue;                 // 0x0038(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsUpgradeRecurse_Result;                  // 0x0039(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsUpgradeRecurse_Result_1;                // 0x003A(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_NotEqual_ClassClass_ReturnValue;          // 0x003B(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(ITEM_UpgradeBase_C_GetUpgradeType) == 0x000008, "Wrong alignment on ITEM_UpgradeBase_C_GetUpgradeType");
static_assert(sizeof(ITEM_UpgradeBase_C_GetUpgradeType) == 0x000040, "Wrong size on ITEM_UpgradeBase_C_GetUpgradeType");
static_assert(offsetof(ITEM_UpgradeBase_C_GetUpgradeType, UpgradeClass) == 0x000000, "Member 'ITEM_UpgradeBase_C_GetUpgradeType::UpgradeClass' has a wrong offset!");
static_assert(offsetof(ITEM_UpgradeBase_C_GetUpgradeType, Result) == 0x000008, "Member 'ITEM_UpgradeBase_C_GetUpgradeType::Result' has a wrong offset!");
static_assert(offsetof(ITEM_UpgradeBase_C_GetUpgradeType, DowngradeClass) == 0x000010, "Member 'ITEM_UpgradeBase_C_GetUpgradeType::DowngradeClass' has a wrong offset!");
static_assert(offsetof(ITEM_UpgradeBase_C_GetUpgradeType, ModuleIndex) == 0x000018, "Member 'ITEM_UpgradeBase_C_GetUpgradeType::ModuleIndex' has a wrong offset!");
static_assert(offsetof(ITEM_UpgradeBase_C_GetUpgradeType, CallFunc_GetInstalledModuleAtIndex_UpgradeClass) == 0x000020, "Member 'ITEM_UpgradeBase_C_GetUpgradeType::CallFunc_GetInstalledModuleAtIndex_UpgradeClass' has a wrong offset!");
static_assert(offsetof(ITEM_UpgradeBase_C_GetUpgradeType, CallFunc_GreaterEqual_IntInt_ReturnValue) == 0x000028, "Member 'ITEM_UpgradeBase_C_GetUpgradeType::CallFunc_GreaterEqual_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(ITEM_UpgradeBase_C_GetUpgradeType, CallFunc_EqualEqual_ClassClass_ReturnValue) == 0x000029, "Member 'ITEM_UpgradeBase_C_GetUpgradeType::CallFunc_EqualEqual_ClassClass_ReturnValue' has a wrong offset!");
static_assert(offsetof(ITEM_UpgradeBase_C_GetUpgradeType, CallFunc_GetBestModuleIndexForUpgrade_Index) == 0x00002C, "Member 'ITEM_UpgradeBase_C_GetUpgradeType::CallFunc_GetBestModuleIndexForUpgrade_Index' has a wrong offset!");
static_assert(offsetof(ITEM_UpgradeBase_C_GetUpgradeType, CallFunc_GetObjectClass_ReturnValue) == 0x000030, "Member 'ITEM_UpgradeBase_C_GetUpgradeType::CallFunc_GetObjectClass_ReturnValue' has a wrong offset!");
static_assert(offsetof(ITEM_UpgradeBase_C_GetUpgradeType, CallFunc_IsValidClass_ReturnValue) == 0x000038, "Member 'ITEM_UpgradeBase_C_GetUpgradeType::CallFunc_IsValidClass_ReturnValue' has a wrong offset!");
static_assert(offsetof(ITEM_UpgradeBase_C_GetUpgradeType, CallFunc_IsUpgradeRecurse_Result) == 0x000039, "Member 'ITEM_UpgradeBase_C_GetUpgradeType::CallFunc_IsUpgradeRecurse_Result' has a wrong offset!");
static_assert(offsetof(ITEM_UpgradeBase_C_GetUpgradeType, CallFunc_IsUpgradeRecurse_Result_1) == 0x00003A, "Member 'ITEM_UpgradeBase_C_GetUpgradeType::CallFunc_IsUpgradeRecurse_Result_1' has a wrong offset!");
static_assert(offsetof(ITEM_UpgradeBase_C_GetUpgradeType, CallFunc_NotEqual_ClassClass_ReturnValue) == 0x00003B, "Member 'ITEM_UpgradeBase_C_GetUpgradeType::CallFunc_NotEqual_ClassClass_ReturnValue' has a wrong offset!");

// Function ITEM_UpgradeBase.ITEM_UpgradeBase_C.IsUpgradeModule
// 0x0018 (0x0018 - 0x0000)
struct ITEM_UpgradeBase_C_IsUpgradeModule final
{
public:
	class UClass*                                 UpgradeClass;                                      // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Result;                                            // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_GetBestModuleIndexForUpgrade_Index;       // 0x000C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_GreaterEqual_IntInt_ReturnValue;          // 0x0010(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(ITEM_UpgradeBase_C_IsUpgradeModule) == 0x000008, "Wrong alignment on ITEM_UpgradeBase_C_IsUpgradeModule");
static_assert(sizeof(ITEM_UpgradeBase_C_IsUpgradeModule) == 0x000018, "Wrong size on ITEM_UpgradeBase_C_IsUpgradeModule");
static_assert(offsetof(ITEM_UpgradeBase_C_IsUpgradeModule, UpgradeClass) == 0x000000, "Member 'ITEM_UpgradeBase_C_IsUpgradeModule::UpgradeClass' has a wrong offset!");
static_assert(offsetof(ITEM_UpgradeBase_C_IsUpgradeModule, Result) == 0x000008, "Member 'ITEM_UpgradeBase_C_IsUpgradeModule::Result' has a wrong offset!");
static_assert(offsetof(ITEM_UpgradeBase_C_IsUpgradeModule, CallFunc_GetBestModuleIndexForUpgrade_Index) == 0x00000C, "Member 'ITEM_UpgradeBase_C_IsUpgradeModule::CallFunc_GetBestModuleIndexForUpgrade_Index' has a wrong offset!");
static_assert(offsetof(ITEM_UpgradeBase_C_IsUpgradeModule, CallFunc_GreaterEqual_IntInt_ReturnValue) == 0x000010, "Member 'ITEM_UpgradeBase_C_IsUpgradeModule::CallFunc_GreaterEqual_IntInt_ReturnValue' has a wrong offset!");

// Function ITEM_UpgradeBase.ITEM_UpgradeBase_C.GetBestModuleIndexForUpgrade
// 0x0090 (0x0090 - 0x0000)
struct ITEM_UpgradeBase_C_GetBestModuleIndexForUpgrade final
{
public:
	class UClass*                                 UpgradeClass;                                      // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Index_0;                                           // 0x0008(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UClass*                                 InstalledModuleClass;                              // 0x0010(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CurrentModuleIndex;                                // 0x0018(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         BestModuleIndex;                                   // 0x001C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Array_Index_Variable;                     // 0x0020(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValidSoftClassReference_ReturnValue;    // 0x0024(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Not_PreBool_ReturnValue;                  // 0x0025(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_26[0x2];                                       // 0x0026(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Temp_int_Loop_Counter_Variable;                    // 0x0028(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue;                   // 0x002C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValidClass_ReturnValue;                 // 0x0030(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_NotEqual_ClassClass_ReturnValue;          // 0x0031(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_32[0x6];                                       // 0x0032(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class UClass*                                 CallFunc_GetInstalledModuleAtIndex_UpgradeClass;   // 0x0038(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue;                  // 0x0040(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BooleanOR_ReturnValue;                    // 0x0041(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_42[0x6];                                       // 0x0042(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class UClass*                                 CallFunc_GetObjectClass_ReturnValue;               // 0x0048(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TSoftClassPtr<class UClass>                   CallFunc_Conv_ClassToSoftClassReference_ReturnValue; // 0x0050(0x0028)(UObjectWrapper, HasGetValueTypeHash)
	class UClass*                                 CallFunc_Array_Get_Item;                           // 0x0078(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_SoftClassReference_ReturnValue; // 0x0080(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_ClassIsChildOf_ReturnValue;               // 0x0081(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BooleanOR_ReturnValue_1;                  // 0x0082(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_83[0x1];                                       // 0x0083(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Array_Length_ReturnValue;                 // 0x0084(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue_1;                // 0x0088(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(ITEM_UpgradeBase_C_GetBestModuleIndexForUpgrade) == 0x000008, "Wrong alignment on ITEM_UpgradeBase_C_GetBestModuleIndexForUpgrade");
static_assert(sizeof(ITEM_UpgradeBase_C_GetBestModuleIndexForUpgrade) == 0x000090, "Wrong size on ITEM_UpgradeBase_C_GetBestModuleIndexForUpgrade");
static_assert(offsetof(ITEM_UpgradeBase_C_GetBestModuleIndexForUpgrade, UpgradeClass) == 0x000000, "Member 'ITEM_UpgradeBase_C_GetBestModuleIndexForUpgrade::UpgradeClass' has a wrong offset!");
static_assert(offsetof(ITEM_UpgradeBase_C_GetBestModuleIndexForUpgrade, Index_0) == 0x000008, "Member 'ITEM_UpgradeBase_C_GetBestModuleIndexForUpgrade::Index_0' has a wrong offset!");
static_assert(offsetof(ITEM_UpgradeBase_C_GetBestModuleIndexForUpgrade, InstalledModuleClass) == 0x000010, "Member 'ITEM_UpgradeBase_C_GetBestModuleIndexForUpgrade::InstalledModuleClass' has a wrong offset!");
static_assert(offsetof(ITEM_UpgradeBase_C_GetBestModuleIndexForUpgrade, CurrentModuleIndex) == 0x000018, "Member 'ITEM_UpgradeBase_C_GetBestModuleIndexForUpgrade::CurrentModuleIndex' has a wrong offset!");
static_assert(offsetof(ITEM_UpgradeBase_C_GetBestModuleIndexForUpgrade, BestModuleIndex) == 0x00001C, "Member 'ITEM_UpgradeBase_C_GetBestModuleIndexForUpgrade::BestModuleIndex' has a wrong offset!");
static_assert(offsetof(ITEM_UpgradeBase_C_GetBestModuleIndexForUpgrade, Temp_int_Array_Index_Variable) == 0x000020, "Member 'ITEM_UpgradeBase_C_GetBestModuleIndexForUpgrade::Temp_int_Array_Index_Variable' has a wrong offset!");
static_assert(offsetof(ITEM_UpgradeBase_C_GetBestModuleIndexForUpgrade, CallFunc_IsValidSoftClassReference_ReturnValue) == 0x000024, "Member 'ITEM_UpgradeBase_C_GetBestModuleIndexForUpgrade::CallFunc_IsValidSoftClassReference_ReturnValue' has a wrong offset!");
static_assert(offsetof(ITEM_UpgradeBase_C_GetBestModuleIndexForUpgrade, CallFunc_Not_PreBool_ReturnValue) == 0x000025, "Member 'ITEM_UpgradeBase_C_GetBestModuleIndexForUpgrade::CallFunc_Not_PreBool_ReturnValue' has a wrong offset!");
static_assert(offsetof(ITEM_UpgradeBase_C_GetBestModuleIndexForUpgrade, Temp_int_Loop_Counter_Variable) == 0x000028, "Member 'ITEM_UpgradeBase_C_GetBestModuleIndexForUpgrade::Temp_int_Loop_Counter_Variable' has a wrong offset!");
static_assert(offsetof(ITEM_UpgradeBase_C_GetBestModuleIndexForUpgrade, CallFunc_Add_IntInt_ReturnValue) == 0x00002C, "Member 'ITEM_UpgradeBase_C_GetBestModuleIndexForUpgrade::CallFunc_Add_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(ITEM_UpgradeBase_C_GetBestModuleIndexForUpgrade, CallFunc_IsValidClass_ReturnValue) == 0x000030, "Member 'ITEM_UpgradeBase_C_GetBestModuleIndexForUpgrade::CallFunc_IsValidClass_ReturnValue' has a wrong offset!");
static_assert(offsetof(ITEM_UpgradeBase_C_GetBestModuleIndexForUpgrade, CallFunc_NotEqual_ClassClass_ReturnValue) == 0x000031, "Member 'ITEM_UpgradeBase_C_GetBestModuleIndexForUpgrade::CallFunc_NotEqual_ClassClass_ReturnValue' has a wrong offset!");
static_assert(offsetof(ITEM_UpgradeBase_C_GetBestModuleIndexForUpgrade, CallFunc_GetInstalledModuleAtIndex_UpgradeClass) == 0x000038, "Member 'ITEM_UpgradeBase_C_GetBestModuleIndexForUpgrade::CallFunc_GetInstalledModuleAtIndex_UpgradeClass' has a wrong offset!");
static_assert(offsetof(ITEM_UpgradeBase_C_GetBestModuleIndexForUpgrade, CallFunc_Less_IntInt_ReturnValue) == 0x000040, "Member 'ITEM_UpgradeBase_C_GetBestModuleIndexForUpgrade::CallFunc_Less_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(ITEM_UpgradeBase_C_GetBestModuleIndexForUpgrade, CallFunc_BooleanOR_ReturnValue) == 0x000041, "Member 'ITEM_UpgradeBase_C_GetBestModuleIndexForUpgrade::CallFunc_BooleanOR_ReturnValue' has a wrong offset!");
static_assert(offsetof(ITEM_UpgradeBase_C_GetBestModuleIndexForUpgrade, CallFunc_GetObjectClass_ReturnValue) == 0x000048, "Member 'ITEM_UpgradeBase_C_GetBestModuleIndexForUpgrade::CallFunc_GetObjectClass_ReturnValue' has a wrong offset!");
static_assert(offsetof(ITEM_UpgradeBase_C_GetBestModuleIndexForUpgrade, CallFunc_Conv_ClassToSoftClassReference_ReturnValue) == 0x000050, "Member 'ITEM_UpgradeBase_C_GetBestModuleIndexForUpgrade::CallFunc_Conv_ClassToSoftClassReference_ReturnValue' has a wrong offset!");
static_assert(offsetof(ITEM_UpgradeBase_C_GetBestModuleIndexForUpgrade, CallFunc_Array_Get_Item) == 0x000078, "Member 'ITEM_UpgradeBase_C_GetBestModuleIndexForUpgrade::CallFunc_Array_Get_Item' has a wrong offset!");
static_assert(offsetof(ITEM_UpgradeBase_C_GetBestModuleIndexForUpgrade, CallFunc_EqualEqual_SoftClassReference_ReturnValue) == 0x000080, "Member 'ITEM_UpgradeBase_C_GetBestModuleIndexForUpgrade::CallFunc_EqualEqual_SoftClassReference_ReturnValue' has a wrong offset!");
static_assert(offsetof(ITEM_UpgradeBase_C_GetBestModuleIndexForUpgrade, CallFunc_ClassIsChildOf_ReturnValue) == 0x000081, "Member 'ITEM_UpgradeBase_C_GetBestModuleIndexForUpgrade::CallFunc_ClassIsChildOf_ReturnValue' has a wrong offset!");
static_assert(offsetof(ITEM_UpgradeBase_C_GetBestModuleIndexForUpgrade, CallFunc_BooleanOR_ReturnValue_1) == 0x000082, "Member 'ITEM_UpgradeBase_C_GetBestModuleIndexForUpgrade::CallFunc_BooleanOR_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(ITEM_UpgradeBase_C_GetBestModuleIndexForUpgrade, CallFunc_Array_Length_ReturnValue) == 0x000084, "Member 'ITEM_UpgradeBase_C_GetBestModuleIndexForUpgrade::CallFunc_Array_Length_ReturnValue' has a wrong offset!");
static_assert(offsetof(ITEM_UpgradeBase_C_GetBestModuleIndexForUpgrade, CallFunc_Less_IntInt_ReturnValue_1) == 0x000088, "Member 'ITEM_UpgradeBase_C_GetBestModuleIndexForUpgrade::CallFunc_Less_IntInt_ReturnValue_1' has a wrong offset!");

// Function ITEM_UpgradeBase.ITEM_UpgradeBase_C.GetInstalledModuleAtIndex
// 0x0020 (0x0020 - 0x0000)
struct ITEM_UpgradeBase_C_GetInstalledModuleAtIndex final
{
public:
	int32                                         ModuleIndex;                                       // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UClass*                                 UpgradeClass;                                      // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UClass*                                 CallFunc_Array_Get_Item;                           // 0x0010(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Array_IsValidIndex_ReturnValue;           // 0x0018(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(ITEM_UpgradeBase_C_GetInstalledModuleAtIndex) == 0x000008, "Wrong alignment on ITEM_UpgradeBase_C_GetInstalledModuleAtIndex");
static_assert(sizeof(ITEM_UpgradeBase_C_GetInstalledModuleAtIndex) == 0x000020, "Wrong size on ITEM_UpgradeBase_C_GetInstalledModuleAtIndex");
static_assert(offsetof(ITEM_UpgradeBase_C_GetInstalledModuleAtIndex, ModuleIndex) == 0x000000, "Member 'ITEM_UpgradeBase_C_GetInstalledModuleAtIndex::ModuleIndex' has a wrong offset!");
static_assert(offsetof(ITEM_UpgradeBase_C_GetInstalledModuleAtIndex, UpgradeClass) == 0x000008, "Member 'ITEM_UpgradeBase_C_GetInstalledModuleAtIndex::UpgradeClass' has a wrong offset!");
static_assert(offsetof(ITEM_UpgradeBase_C_GetInstalledModuleAtIndex, CallFunc_Array_Get_Item) == 0x000010, "Member 'ITEM_UpgradeBase_C_GetInstalledModuleAtIndex::CallFunc_Array_Get_Item' has a wrong offset!");
static_assert(offsetof(ITEM_UpgradeBase_C_GetInstalledModuleAtIndex, CallFunc_Array_IsValidIndex_ReturnValue) == 0x000018, "Member 'ITEM_UpgradeBase_C_GetInstalledModuleAtIndex::CallFunc_Array_IsValidIndex_ReturnValue' has a wrong offset!");

}

