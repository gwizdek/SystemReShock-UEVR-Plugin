#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_MusicLayer

#include "Basic.hpp"

#include "CoreGame_classes.hpp"
#include "CoreUObject_structs.hpp"


namespace SDK
{

// BlueprintGeneratedClass BP_MusicLayer.BP_MusicLayer_C
// 0x00A0 (0x00C8 - 0x0028)
class UBP_MusicLayer_C final : public UWorldObject
{
public:
	class FName                                   Name_0;                                            // 0x0028(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash)
	int32                                         PreMinusDelay__measures_;                          // 0x0030(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash)
	int32                                         RetriggerTime__measures_;                          // 0x0034(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash)
	float                                         ChanceToPlay;                                      // 0x0038(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash)
	float                                         BaseVolumeMultiplier;                              // 0x003C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash)
	float                                         RequiredExploreIntensityToPlay;                    // 0x0040(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash)
	struct FVector2D                              RequiredCombatIntensityToPlay;                     // 0x0044(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash)
	bool                                          bShouldApplyFadeIn;                                // 0x004C(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, ExposeOnSpawn)
	bool                                          bHasPlayed;                                        // 0x004D(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_4E[0x2];                                       // 0x004E(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class USoundWave*>                     MusicSegments;                                     // 0x0050(0x0010)(Edit, BlueprintVisible, ExposeOnSpawn)
	TArray<class UAudioComponent*>                CurrentAudioComponents;                            // 0x0060(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance, ContainsInstancedReference)
	TMap<class FString, float>                    ActiveVolumeMultipliers;                           // 0x0070(0x0050)(Edit, BlueprintVisible, DisableEditOnInstance)
	int32                                         NextPlayableMeasure;                               // 0x00C0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         INVALID_MEASURE;                                   // 0x00C4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

public:
	void GetRandomSegment(class USoundWave** MusicSegment);
	void GetShouldRetrigger(bool* bShouldRetrigger);
	void CalculateLayerVolume(float* LayerVolume);
	void ApplyVolumeMultiplier(const class FString& MultiplierKey, float Value);
	void UpdateLayerVolume();
	void SpawnSegmentAudioComponent();
	void RemoveInactiveAudioComponents();
	void PrintCurrentAudioComponents();
	void StopAll();
	void GetCanPlay(bool* Return);
	void GetActiveSegmentCount(int32* Result);
	void GetNextPlayableMeasure(int32* Measure);
	void SetNextPlayableMeasure(int32 Measure);
	void InitializeLayer(class UBP_MusicLayer_C** Layer);
	void ScheduleNextSegment(int32* ScheduledMeasure);
	void EVENT_OnMeasure(int32 NumBars, float CurrentExploreMusicIntensity, float CurrentCombatMusicIntensity);
	void CalcShouldPlaySegment(float CurrentExploreMusicIntensity, float CurrentCombatMusicIntensity, bool* bShouldPlay);

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"BP_MusicLayer_C">();
	}
	static class UBP_MusicLayer_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<UBP_MusicLayer_C>();
	}
};
static_assert(alignof(UBP_MusicLayer_C) == 0x000008, "Wrong alignment on UBP_MusicLayer_C");
static_assert(sizeof(UBP_MusicLayer_C) == 0x0000C8, "Wrong size on UBP_MusicLayer_C");
static_assert(offsetof(UBP_MusicLayer_C, Name_0) == 0x000028, "Member 'UBP_MusicLayer_C::Name_0' has a wrong offset!");
static_assert(offsetof(UBP_MusicLayer_C, PreMinusDelay__measures_) == 0x000030, "Member 'UBP_MusicLayer_C::PreMinusDelay__measures_' has a wrong offset!");
static_assert(offsetof(UBP_MusicLayer_C, RetriggerTime__measures_) == 0x000034, "Member 'UBP_MusicLayer_C::RetriggerTime__measures_' has a wrong offset!");
static_assert(offsetof(UBP_MusicLayer_C, ChanceToPlay) == 0x000038, "Member 'UBP_MusicLayer_C::ChanceToPlay' has a wrong offset!");
static_assert(offsetof(UBP_MusicLayer_C, BaseVolumeMultiplier) == 0x00003C, "Member 'UBP_MusicLayer_C::BaseVolumeMultiplier' has a wrong offset!");
static_assert(offsetof(UBP_MusicLayer_C, RequiredExploreIntensityToPlay) == 0x000040, "Member 'UBP_MusicLayer_C::RequiredExploreIntensityToPlay' has a wrong offset!");
static_assert(offsetof(UBP_MusicLayer_C, RequiredCombatIntensityToPlay) == 0x000044, "Member 'UBP_MusicLayer_C::RequiredCombatIntensityToPlay' has a wrong offset!");
static_assert(offsetof(UBP_MusicLayer_C, bShouldApplyFadeIn) == 0x00004C, "Member 'UBP_MusicLayer_C::bShouldApplyFadeIn' has a wrong offset!");
static_assert(offsetof(UBP_MusicLayer_C, bHasPlayed) == 0x00004D, "Member 'UBP_MusicLayer_C::bHasPlayed' has a wrong offset!");
static_assert(offsetof(UBP_MusicLayer_C, MusicSegments) == 0x000050, "Member 'UBP_MusicLayer_C::MusicSegments' has a wrong offset!");
static_assert(offsetof(UBP_MusicLayer_C, CurrentAudioComponents) == 0x000060, "Member 'UBP_MusicLayer_C::CurrentAudioComponents' has a wrong offset!");
static_assert(offsetof(UBP_MusicLayer_C, ActiveVolumeMultipliers) == 0x000070, "Member 'UBP_MusicLayer_C::ActiveVolumeMultipliers' has a wrong offset!");
static_assert(offsetof(UBP_MusicLayer_C, NextPlayableMeasure) == 0x0000C0, "Member 'UBP_MusicLayer_C::NextPlayableMeasure' has a wrong offset!");
static_assert(offsetof(UBP_MusicLayer_C, INVALID_MEASURE) == 0x0000C4, "Member 'UBP_MusicLayer_C::INVALID_MEASURE' has a wrong offset!");

}

