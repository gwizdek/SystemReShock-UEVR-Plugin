#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: WIREPUZZLE_Base

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "CoreUObject_structs.hpp"
#include "PUZZLE_Base_classes.hpp"
#include "ENUM_InteractResultType_structs.hpp"
#include "ENUM_PuzzleSolveType_structs.hpp"


namespace SDK
{

// BlueprintGeneratedClass WIREPUZZLE_Base.WIREPUZZLE_Base_C
// 0x0178 (0x07D8 - 0x0660)
class AWIREPUZZLE_Base_C : public APUZZLE_Base_C
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame_WIREPUZZLE_Base_C;                  // 0x0660(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	class UBoxComponent*                          TargetBox_Element;                                 // 0x0668(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	TArray<class AWIREPUZZLE_WirePlug_C*>         WirePlugActors;                                    // 0x0670(0x0010)(Edit, BlueprintVisible, DisableEditOnTemplate, DisableEditOnInstance)
	TArray<class UAudioComponent*>                PropagationAudioComponents;                        // 0x0680(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance, ContainsInstancedReference)
	int32                                         CurrentActiveWireTraces;                           // 0x0690(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_694[0x4];                                      // 0x0694(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TSoftObjectPtr<class USoundCue>               PowerPropagateLoopCue;                             // 0x0698(0x0028)(Edit, BlueprintVisible, DisableEditOnInstance, HasGetValueTypeHash)
	TSoftObjectPtr<class USoundCue>               PowerPropagateOffCue;                              // 0x06C0(0x0028)(Edit, BlueprintVisible, DisableEditOnInstance, HasGetValueTypeHash)
	TMap<struct FIntVector, int32>                InputPower;                                        // 0x06E8(0x0050)(Edit, BlueprintVisible, DisableEditOnInstance)
	FMulticastInlineDelegateProperty_             OnPowerLevelChanged;                               // 0x0738(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)
	float                                         CurrentPower;                                      // 0x0748(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         TargetInputPower;                                  // 0x074C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         PixelSize;                                         // 0x0750(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         PuzzleSolvedTimestamp;                             // 0x0754(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         MinRequiredPower;                                  // 0x0758(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         MaxRequiredPower;                                  // 0x075C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UCOMP_WirePuzzle_Cell_Base_C*           SelectedWireSourceCell;                            // 0x0760(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         TargetMatchCounter;                                // 0x0768(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_76C[0x4];                                      // 0x076C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TMap<int32, class AWIREPUZZLE_WirePlug_C*>    WireOffsets;                                       // 0x0770(0x0050)(Edit, BlueprintVisible, DisableEditOnInstance)
	class UCOMP_WirePuzzle_Cell_Base_C*           SelectedWireCell;                                  // 0x07C0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UUserStaticMeshComponent*               MaxPowerBracketComponent;                          // 0x07C8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UUserStaticMeshComponent*               MinPowerBracketComponent;                          // 0x07D0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

public:
	void OnPowerLevelChanged__DelegateSignature(int32 TotalPowerLevel);
	void ExecuteUbergraph_WIREPUZZLE_Base(int32 EntryPoint);
	void ReceiveTick(float DeltaSeconds);
	void RegisterActiveTrace();
	void UpdatePropagationAudio();
	void UnregisterActiveTrace();
	void SetBatteryInput(const struct FIntPoint& BatteryLocation, int32 BatteryInputSocket, int32 PowerLevel);
	void UpdateBatteryPower(float DeltaSeconds);
	void GetSelectedWireSourceCell(class UCOMP_WirePuzzle_Cell_Base_C** SelectedCell);
	void SetSelectedWireSourceCell(class UCOMP_WirePuzzle_Cell_Base_C* NewSelection);
	void ReserveWireDepthOffset(class AWIREPUZZLE_WirePlug_C* Plug, float* Offset);
	void ReleaseWireDepthOffset(class AWIREPUZZLE_WirePlug_C* Plug);
	void GetBatteryCells(TArray<class UCOMP_WirePuzzle_Cell_Base_C*>* Cells);
	void UpdateWireRetraction();
	void StopChanneling(class AActor* NewChannelingInteract, bool* Result);
	bool SortBatteries(const class UObject* ObjectA, const class UObject* ObjectB);
	void EVENT_OnPuzzleBoxClosed();
	void InteractWithPuzzlePrimitive(class UPrimitiveComponent* CursorPrimitive, ENUM_InteractResultType* Result, class FText* ResultText);
	void GetPuzzleShape(class UPrimitiveComponent* CursorPrimitive, class UShapeComponent** TargetShape);
	void SetPuzzleSolved(ENUM_PuzzleSolveType SolveType);
	void LoadPuzzleFromDataTable();
	void IsVerticalAxisReversed(bool* Result);
	void GetCellComponentFromPrimitive(class UPrimitiveComponent* PrimitiveComponent, class UCOMP_PuzzleCell_Base_C** Result);

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"WIREPUZZLE_Base_C">();
	}
	static class AWIREPUZZLE_Base_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<AWIREPUZZLE_Base_C>();
	}
};
static_assert(alignof(AWIREPUZZLE_Base_C) == 0x000008, "Wrong alignment on AWIREPUZZLE_Base_C");
static_assert(sizeof(AWIREPUZZLE_Base_C) == 0x0007D8, "Wrong size on AWIREPUZZLE_Base_C");
static_assert(offsetof(AWIREPUZZLE_Base_C, UberGraphFrame_WIREPUZZLE_Base_C) == 0x000660, "Member 'AWIREPUZZLE_Base_C::UberGraphFrame_WIREPUZZLE_Base_C' has a wrong offset!");
static_assert(offsetof(AWIREPUZZLE_Base_C, TargetBox_Element) == 0x000668, "Member 'AWIREPUZZLE_Base_C::TargetBox_Element' has a wrong offset!");
static_assert(offsetof(AWIREPUZZLE_Base_C, WirePlugActors) == 0x000670, "Member 'AWIREPUZZLE_Base_C::WirePlugActors' has a wrong offset!");
static_assert(offsetof(AWIREPUZZLE_Base_C, PropagationAudioComponents) == 0x000680, "Member 'AWIREPUZZLE_Base_C::PropagationAudioComponents' has a wrong offset!");
static_assert(offsetof(AWIREPUZZLE_Base_C, CurrentActiveWireTraces) == 0x000690, "Member 'AWIREPUZZLE_Base_C::CurrentActiveWireTraces' has a wrong offset!");
static_assert(offsetof(AWIREPUZZLE_Base_C, PowerPropagateLoopCue) == 0x000698, "Member 'AWIREPUZZLE_Base_C::PowerPropagateLoopCue' has a wrong offset!");
static_assert(offsetof(AWIREPUZZLE_Base_C, PowerPropagateOffCue) == 0x0006C0, "Member 'AWIREPUZZLE_Base_C::PowerPropagateOffCue' has a wrong offset!");
static_assert(offsetof(AWIREPUZZLE_Base_C, InputPower) == 0x0006E8, "Member 'AWIREPUZZLE_Base_C::InputPower' has a wrong offset!");
static_assert(offsetof(AWIREPUZZLE_Base_C, OnPowerLevelChanged) == 0x000738, "Member 'AWIREPUZZLE_Base_C::OnPowerLevelChanged' has a wrong offset!");
static_assert(offsetof(AWIREPUZZLE_Base_C, CurrentPower) == 0x000748, "Member 'AWIREPUZZLE_Base_C::CurrentPower' has a wrong offset!");
static_assert(offsetof(AWIREPUZZLE_Base_C, TargetInputPower) == 0x00074C, "Member 'AWIREPUZZLE_Base_C::TargetInputPower' has a wrong offset!");
static_assert(offsetof(AWIREPUZZLE_Base_C, PixelSize) == 0x000750, "Member 'AWIREPUZZLE_Base_C::PixelSize' has a wrong offset!");
static_assert(offsetof(AWIREPUZZLE_Base_C, PuzzleSolvedTimestamp) == 0x000754, "Member 'AWIREPUZZLE_Base_C::PuzzleSolvedTimestamp' has a wrong offset!");
static_assert(offsetof(AWIREPUZZLE_Base_C, MinRequiredPower) == 0x000758, "Member 'AWIREPUZZLE_Base_C::MinRequiredPower' has a wrong offset!");
static_assert(offsetof(AWIREPUZZLE_Base_C, MaxRequiredPower) == 0x00075C, "Member 'AWIREPUZZLE_Base_C::MaxRequiredPower' has a wrong offset!");
static_assert(offsetof(AWIREPUZZLE_Base_C, SelectedWireSourceCell) == 0x000760, "Member 'AWIREPUZZLE_Base_C::SelectedWireSourceCell' has a wrong offset!");
static_assert(offsetof(AWIREPUZZLE_Base_C, TargetMatchCounter) == 0x000768, "Member 'AWIREPUZZLE_Base_C::TargetMatchCounter' has a wrong offset!");
static_assert(offsetof(AWIREPUZZLE_Base_C, WireOffsets) == 0x000770, "Member 'AWIREPUZZLE_Base_C::WireOffsets' has a wrong offset!");
static_assert(offsetof(AWIREPUZZLE_Base_C, SelectedWireCell) == 0x0007C0, "Member 'AWIREPUZZLE_Base_C::SelectedWireCell' has a wrong offset!");
static_assert(offsetof(AWIREPUZZLE_Base_C, MaxPowerBracketComponent) == 0x0007C8, "Member 'AWIREPUZZLE_Base_C::MaxPowerBracketComponent' has a wrong offset!");
static_assert(offsetof(AWIREPUZZLE_Base_C, MinPowerBracketComponent) == 0x0007D0, "Member 'AWIREPUZZLE_Base_C::MinPowerBracketComponent' has a wrong offset!");

}

