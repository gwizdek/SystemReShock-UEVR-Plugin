#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: OPTION_Display_Resolution

#include "Basic.hpp"

#include "CoreUObject_structs.hpp"
#include "WIDGET_Settings_MultiSelector_classes.hpp"


namespace SDK
{

// WidgetBlueprintGeneratedClass OPTION_Display_Resolution.OPTION_Display_Resolution_C
// 0x0070 (0x0420 - 0x03B0)
class UOPTION_Display_Resolution_C final : public UWIDGET_Settings_MultiSelector_C
{
public:
	TArray<struct FIntPoint>                      SupportedResolutions;                              // 0x03B0(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance)
	TMap<struct FIntPoint, int32>                 ResolutionIndexMap;                                // 0x03C0(0x0050)(Edit, BlueprintVisible, DisableEditOnInstance)
	TArray<struct FIntPoint>                      Resolutions;                                       // 0x0410(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance)

public:
	void ApplyDirtyValue();
	void ApplyCleanValue();
	void PopulateUniqueSettings();
	void ResolutionToText(const struct FIntPoint& Value, class FText* Result);
	void TextToResolution(const class FText& Value, struct FIntPoint* Result);
	void AcceptCurrentValue();
	void UpdateVisuals();
	void IsDirty(bool* Param_IsDirty_0);
	void SelectDefaultValue();
	void IsDefault(bool* Result);
	void InitializeMenuListItem(class UWIDGET_MenuListBase_C* ParentList, int32 Index_0);

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"OPTION_Display_Resolution_C">();
	}
	static class UOPTION_Display_Resolution_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<UOPTION_Display_Resolution_C>();
	}
};
static_assert(alignof(UOPTION_Display_Resolution_C) == 0x000008, "Wrong alignment on UOPTION_Display_Resolution_C");
static_assert(sizeof(UOPTION_Display_Resolution_C) == 0x000420, "Wrong size on UOPTION_Display_Resolution_C");
static_assert(offsetof(UOPTION_Display_Resolution_C, SupportedResolutions) == 0x0003B0, "Member 'UOPTION_Display_Resolution_C::SupportedResolutions' has a wrong offset!");
static_assert(offsetof(UOPTION_Display_Resolution_C, ResolutionIndexMap) == 0x0003C0, "Member 'UOPTION_Display_Resolution_C::ResolutionIndexMap' has a wrong offset!");
static_assert(offsetof(UOPTION_Display_Resolution_C, Resolutions) == 0x000410, "Member 'UOPTION_Display_Resolution_C::Resolutions' has a wrong offset!");

}

