#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: PAWN_Hacker_Implant

#include "Basic.hpp"

#include "InputCore_structs.hpp"
#include "CoreUObject_structs.hpp"
#include "ENUM_MFDTabCategory_structs.hpp"
#include "ENUM_HotbarStyle_structs.hpp"


namespace SDK::Params
{

// Function PAWN_Hacker_Implant.PAWN_Hacker_Implant_C.ExecuteUbergraph_PAWN_Hacker_Implant
// 0x06B0 (0x06B0 - 0x0000)
struct PAWN_Hacker_Implant_C_ExecuteUbergraph_PAWN_Hacker_Implant final
{
public:
	int32                                         EntryPoint;                                        // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FKey                                   K2Node_InputActionEvent_Key_21;                    // 0x0008(0x0018)(HasGetValueTypeHash)
	struct FKey                                   K2Node_InputActionEvent_Key_18;                    // 0x0020(0x0018)(HasGetValueTypeHash)
	struct FKey                                   Temp_struct_Variable;                              // 0x0038(0x0018)(HasGetValueTypeHash)
	struct FKey                                   K2Node_InputActionEvent_Key_17;                    // 0x0050(0x0018)(HasGetValueTypeHash)
	struct FKey                                   K2Node_InputActionEvent_Key_16;                    // 0x0068(0x0018)(HasGetValueTypeHash)
	struct FKey                                   Temp_struct_Variable_1;                            // 0x0080(0x0018)(HasGetValueTypeHash)
	struct FKey                                   K2Node_InputActionEvent_Key_15;                    // 0x0098(0x0018)(HasGetValueTypeHash)
	struct FKey                                   K2Node_InputActionEvent_Key_14;                    // 0x00B0(0x0018)(HasGetValueTypeHash)
	struct FKey                                   Temp_struct_Variable_2;                            // 0x00C8(0x0018)(HasGetValueTypeHash)
	struct FKey                                   K2Node_InputActionEvent_Key_13;                    // 0x00E0(0x0018)(HasGetValueTypeHash)
	struct FKey                                   K2Node_InputActionEvent_Key_12;                    // 0x00F8(0x0018)(HasGetValueTypeHash)
	struct FKey                                   Temp_struct_Variable_3;                            // 0x0110(0x0018)(HasGetValueTypeHash)
	struct FKey                                   K2Node_InputActionEvent_Key_11;                    // 0x0128(0x0018)(HasGetValueTypeHash)
	struct FKey                                   K2Node_InputActionEvent_Key_10;                    // 0x0140(0x0018)(HasGetValueTypeHash)
	struct FKey                                   Temp_struct_Variable_4;                            // 0x0158(0x0018)(HasGetValueTypeHash)
	struct FKey                                   K2Node_InputActionEvent_Key_9;                     // 0x0170(0x0018)(HasGetValueTypeHash)
	struct FKey                                   K2Node_InputActionEvent_Key_8;                     // 0x0188(0x0018)(HasGetValueTypeHash)
	struct FKey                                   Temp_struct_Variable_5;                            // 0x01A0(0x0018)(HasGetValueTypeHash)
	struct FKey                                   K2Node_InputActionEvent_Key_7;                     // 0x01B8(0x0018)(HasGetValueTypeHash)
	struct FKey                                   K2Node_InputActionEvent_Key_6;                     // 0x01D0(0x0018)(HasGetValueTypeHash)
	struct FKey                                   Temp_struct_Variable_6;                            // 0x01E8(0x0018)(HasGetValueTypeHash)
	struct FKey                                   K2Node_InputActionEvent_Key_5;                     // 0x0200(0x0018)(HasGetValueTypeHash)
	struct FKey                                   K2Node_InputActionEvent_Key_4;                     // 0x0218(0x0018)(HasGetValueTypeHash)
	struct FKey                                   Temp_struct_Variable_7;                            // 0x0230(0x0018)(HasGetValueTypeHash)
	struct FKey                                   K2Node_InputActionEvent_Key_3;                     // 0x0248(0x0018)(HasGetValueTypeHash)
	struct FKey                                   K2Node_InputActionEvent_Key_2;                     // 0x0260(0x0018)(HasGetValueTypeHash)
	struct FKey                                   Temp_struct_Variable_8;                            // 0x0278(0x0018)(HasGetValueTypeHash)
	struct FKey                                   K2Node_InputActionEvent_Key_1;                     // 0x0290(0x0018)(HasGetValueTypeHash)
	struct FKey                                   K2Node_InputActionEvent_Key;                       // 0x02A8(0x0018)(HasGetValueTypeHash)
	struct FKey                                   Temp_struct_Variable_9;                            // 0x02C0(0x0018)(HasGetValueTypeHash)
	struct FKey                                   K2Node_InputActionEvent_Key_22;                    // 0x02D8(0x0018)(HasGetValueTypeHash)
	struct FKey                                   K2Node_InputActionEvent_Key_23;                    // 0x02F0(0x0018)(HasGetValueTypeHash)
	struct FKey                                   K2Node_InputActionEvent_Key_24;                    // 0x0308(0x0018)(HasGetValueTypeHash)
	struct FKey                                   K2Node_InputActionEvent_Key_25;                    // 0x0320(0x0018)(HasGetValueTypeHash)
	struct FKey                                   K2Node_InputActionEvent_Key_26;                    // 0x0338(0x0018)(HasGetValueTypeHash)
	struct FKey                                   K2Node_InputActionEvent_Key_27;                    // 0x0350(0x0018)(HasGetValueTypeHash)
	struct FKey                                   K2Node_InputActionEvent_Key_28;                    // 0x0368(0x0018)(HasGetValueTypeHash)
	class UWIDGET_PlayerHUD_C*                    CallFunc_GetNeuralHUD_Result;                      // 0x0380(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UWIDGET_PlayerHUD_C*                    CallFunc_GetNeuralHUD_Result_1;                    // 0x0388(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UWIDGET_PlayerHUD_C*                    CallFunc_GetNeuralHUD_Result_2;                    // 0x0390(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UWIDGET_PlayerHUD_C*                    CallFunc_GetNeuralHUD_Result_3;                    // 0x0398(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UWIDGET_PlayerHUD_C*                    CallFunc_GetNeuralHUD_Result_4;                    // 0x03A0(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UWIDGET_PlayerHUD_C*                    CallFunc_GetNeuralHUD_Result_5;                    // 0x03A8(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UWIDGET_PlayerHUD_C*                    CallFunc_GetNeuralHUD_Result_6;                    // 0x03B0(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UWIDGET_PlayerHUD_C*                    CallFunc_GetNeuralHUD_Result_7;                    // 0x03B8(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FKey                                   Temp_struct_Variable_10;                           // 0x03C0(0x0018)(HasGetValueTypeHash)
	struct FKey                                   K2Node_InputActionEvent_Key_29;                    // 0x03D8(0x0018)(HasGetValueTypeHash)
	struct FKey                                   K2Node_InputActionEvent_Key_30;                    // 0x03F0(0x0018)(HasGetValueTypeHash)
	struct FKey                                   Temp_struct_Variable_11;                           // 0x0408(0x0018)(HasGetValueTypeHash)
	class AController*                            CallFunc_GetController_ReturnValue;                // 0x0420(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AController*                            CallFunc_GetController_ReturnValue_1;              // 0x0428(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class APlayerController*                      K2Node_DynamicCast_AsPlayer_Controller;            // 0x0430(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0438(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_439[0x7];                                      // 0x0439(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class APlayerController*                      K2Node_DynamicCast_AsPlayer_Controller_1;          // 0x0440(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess_1;                     // 0x0448(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_449[0x7];                                      // 0x0449(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FKey                                   K2Node_InputActionEvent_Key_19;                    // 0x0450(0x0018)(HasGetValueTypeHash)
	struct FKey                                   K2Node_InputActionEvent_Key_31;                    // 0x0468(0x0018)(HasGetValueTypeHash)
	struct FKey                                   K2Node_InputActionEvent_Key_32;                    // 0x0480(0x0018)(HasGetValueTypeHash)
	struct FKey                                   K2Node_InputActionEvent_Key_33;                    // 0x0498(0x0018)(HasGetValueTypeHash)
	struct FKey                                   Temp_struct_Variable_12;                           // 0x04B0(0x0018)(HasGetValueTypeHash)
	struct FKey                                   K2Node_InputActionEvent_Key_34;                    // 0x04C8(0x0018)(HasGetValueTypeHash)
	struct FKey                                   K2Node_InputActionEvent_Key_35;                    // 0x04E0(0x0018)(HasGetValueTypeHash)
	struct FKey                                   K2Node_InputActionEvent_Key_36;                    // 0x04F8(0x0018)(HasGetValueTypeHash)
	struct FKey                                   K2Node_InputActionEvent_Key_37;                    // 0x0510(0x0018)(HasGetValueTypeHash)
	struct FKey                                   K2Node_InputActionEvent_Key_38;                    // 0x0528(0x0018)(HasGetValueTypeHash)
	struct FKey                                   K2Node_InputActionEvent_Key_39;                    // 0x0540(0x0018)(HasGetValueTypeHash)
	struct FKey                                   K2Node_InputActionEvent_Key_40;                    // 0x0558(0x0018)(HasGetValueTypeHash)
	struct FKey                                   K2Node_InputActionEvent_Key_41;                    // 0x0570(0x0018)(HasGetValueTypeHash)
	struct FKey                                   K2Node_InputActionEvent_Key_42;                    // 0x0588(0x0018)(HasGetValueTypeHash)
	struct FKey                                   K2Node_InputActionEvent_Key_43;                    // 0x05A0(0x0018)(HasGetValueTypeHash)
	struct FKey                                   K2Node_InputActionEvent_Key_44;                    // 0x05B8(0x0018)(HasGetValueTypeHash)
	struct FKey                                   K2Node_InputActionEvent_Key_45;                    // 0x05D0(0x0018)(HasGetValueTypeHash)
	struct FKey                                   K2Node_InputActionEvent_Key_46;                    // 0x05E8(0x0018)(HasGetValueTypeHash)
	class UWIDGET_PlayerHUD_C*                    CallFunc_GetNeuralHUD_Result_8;                    // 0x0600(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UWIDGET_PlayerHUD_C*                    CallFunc_GetNeuralHUD_Result_9;                    // 0x0608(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_ToggleMultiFunctionDisplay_MainDisplayVisible; // 0x0610(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_611[0x7];                                      // 0x0611(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UWIDGET_PlayerHUD_C*                    CallFunc_GetNeuralHUD_Result_10;                   // 0x0618(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UWIDGET_PlayerHUD_C*                    CallFunc_GetNeuralHUD_Result_11;                   // 0x0620(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UWIDGET_PlayerHUD_C*                    CallFunc_GetNeuralHUD_Result_12;                   // 0x0628(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UWIDGET_PlayerHUD_C*                    CallFunc_GetNeuralHUD_Result_13;                   // 0x0630(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UWIDGET_PlayerHUD_C*                    CallFunc_GetNeuralHUD_Result_14;                   // 0x0638(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UWIDGET_PlayerHUD_C*                    CallFunc_GetNeuralHUD_Result_15;                   // 0x0640(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UWIDGET_PlayerHUD_C*                    CallFunc_GetNeuralHUD_Result_16;                   // 0x0648(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UWIDGET_PlayerHUD_C*                    CallFunc_GetNeuralHUD_Result_17;                   // 0x0650(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UWIDGET_PlayerHUD_C*                    CallFunc_GetNeuralHUD_Result_18;                   // 0x0658(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UWIDGET_PlayerHUD_C*                    CallFunc_GetNeuralHUD_Result_19;                   // 0x0660(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UWIDGET_PlayerHUD_C*                    CallFunc_GetNeuralHUD_Result_20;                   // 0x0668(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UWIDGET_PlayerHUD_C*                    CallFunc_GetNeuralHUD_Result_21;                   // 0x0670(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UWIDGET_PlayerHUD_C*                    CallFunc_GetNeuralHUD_Result_22;                   // 0x0678(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_TryUseConsumableAtSlot_Result;            // 0x0680(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_681[0x7];                                      // 0x0681(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class AController*                            K2Node_Event_OldController;                        // 0x0688(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_TryUseConsumableAtSlot_Result_1;          // 0x0690(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_691[0x7];                                      // 0x0691(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FKey                                   K2Node_InputActionEvent_Key_20;                    // 0x0698(0x0018)(HasGetValueTypeHash)
};
static_assert(alignof(PAWN_Hacker_Implant_C_ExecuteUbergraph_PAWN_Hacker_Implant) == 0x000008, "Wrong alignment on PAWN_Hacker_Implant_C_ExecuteUbergraph_PAWN_Hacker_Implant");
static_assert(sizeof(PAWN_Hacker_Implant_C_ExecuteUbergraph_PAWN_Hacker_Implant) == 0x0006B0, "Wrong size on PAWN_Hacker_Implant_C_ExecuteUbergraph_PAWN_Hacker_Implant");
static_assert(offsetof(PAWN_Hacker_Implant_C_ExecuteUbergraph_PAWN_Hacker_Implant, EntryPoint) == 0x000000, "Member 'PAWN_Hacker_Implant_C_ExecuteUbergraph_PAWN_Hacker_Implant::EntryPoint' has a wrong offset!");
static_assert(offsetof(PAWN_Hacker_Implant_C_ExecuteUbergraph_PAWN_Hacker_Implant, K2Node_InputActionEvent_Key_21) == 0x000008, "Member 'PAWN_Hacker_Implant_C_ExecuteUbergraph_PAWN_Hacker_Implant::K2Node_InputActionEvent_Key_21' has a wrong offset!");
static_assert(offsetof(PAWN_Hacker_Implant_C_ExecuteUbergraph_PAWN_Hacker_Implant, K2Node_InputActionEvent_Key_18) == 0x000020, "Member 'PAWN_Hacker_Implant_C_ExecuteUbergraph_PAWN_Hacker_Implant::K2Node_InputActionEvent_Key_18' has a wrong offset!");
static_assert(offsetof(PAWN_Hacker_Implant_C_ExecuteUbergraph_PAWN_Hacker_Implant, Temp_struct_Variable) == 0x000038, "Member 'PAWN_Hacker_Implant_C_ExecuteUbergraph_PAWN_Hacker_Implant::Temp_struct_Variable' has a wrong offset!");
static_assert(offsetof(PAWN_Hacker_Implant_C_ExecuteUbergraph_PAWN_Hacker_Implant, K2Node_InputActionEvent_Key_17) == 0x000050, "Member 'PAWN_Hacker_Implant_C_ExecuteUbergraph_PAWN_Hacker_Implant::K2Node_InputActionEvent_Key_17' has a wrong offset!");
static_assert(offsetof(PAWN_Hacker_Implant_C_ExecuteUbergraph_PAWN_Hacker_Implant, K2Node_InputActionEvent_Key_16) == 0x000068, "Member 'PAWN_Hacker_Implant_C_ExecuteUbergraph_PAWN_Hacker_Implant::K2Node_InputActionEvent_Key_16' has a wrong offset!");
static_assert(offsetof(PAWN_Hacker_Implant_C_ExecuteUbergraph_PAWN_Hacker_Implant, Temp_struct_Variable_1) == 0x000080, "Member 'PAWN_Hacker_Implant_C_ExecuteUbergraph_PAWN_Hacker_Implant::Temp_struct_Variable_1' has a wrong offset!");
static_assert(offsetof(PAWN_Hacker_Implant_C_ExecuteUbergraph_PAWN_Hacker_Implant, K2Node_InputActionEvent_Key_15) == 0x000098, "Member 'PAWN_Hacker_Implant_C_ExecuteUbergraph_PAWN_Hacker_Implant::K2Node_InputActionEvent_Key_15' has a wrong offset!");
static_assert(offsetof(PAWN_Hacker_Implant_C_ExecuteUbergraph_PAWN_Hacker_Implant, K2Node_InputActionEvent_Key_14) == 0x0000B0, "Member 'PAWN_Hacker_Implant_C_ExecuteUbergraph_PAWN_Hacker_Implant::K2Node_InputActionEvent_Key_14' has a wrong offset!");
static_assert(offsetof(PAWN_Hacker_Implant_C_ExecuteUbergraph_PAWN_Hacker_Implant, Temp_struct_Variable_2) == 0x0000C8, "Member 'PAWN_Hacker_Implant_C_ExecuteUbergraph_PAWN_Hacker_Implant::Temp_struct_Variable_2' has a wrong offset!");
static_assert(offsetof(PAWN_Hacker_Implant_C_ExecuteUbergraph_PAWN_Hacker_Implant, K2Node_InputActionEvent_Key_13) == 0x0000E0, "Member 'PAWN_Hacker_Implant_C_ExecuteUbergraph_PAWN_Hacker_Implant::K2Node_InputActionEvent_Key_13' has a wrong offset!");
static_assert(offsetof(PAWN_Hacker_Implant_C_ExecuteUbergraph_PAWN_Hacker_Implant, K2Node_InputActionEvent_Key_12) == 0x0000F8, "Member 'PAWN_Hacker_Implant_C_ExecuteUbergraph_PAWN_Hacker_Implant::K2Node_InputActionEvent_Key_12' has a wrong offset!");
static_assert(offsetof(PAWN_Hacker_Implant_C_ExecuteUbergraph_PAWN_Hacker_Implant, Temp_struct_Variable_3) == 0x000110, "Member 'PAWN_Hacker_Implant_C_ExecuteUbergraph_PAWN_Hacker_Implant::Temp_struct_Variable_3' has a wrong offset!");
static_assert(offsetof(PAWN_Hacker_Implant_C_ExecuteUbergraph_PAWN_Hacker_Implant, K2Node_InputActionEvent_Key_11) == 0x000128, "Member 'PAWN_Hacker_Implant_C_ExecuteUbergraph_PAWN_Hacker_Implant::K2Node_InputActionEvent_Key_11' has a wrong offset!");
static_assert(offsetof(PAWN_Hacker_Implant_C_ExecuteUbergraph_PAWN_Hacker_Implant, K2Node_InputActionEvent_Key_10) == 0x000140, "Member 'PAWN_Hacker_Implant_C_ExecuteUbergraph_PAWN_Hacker_Implant::K2Node_InputActionEvent_Key_10' has a wrong offset!");
static_assert(offsetof(PAWN_Hacker_Implant_C_ExecuteUbergraph_PAWN_Hacker_Implant, Temp_struct_Variable_4) == 0x000158, "Member 'PAWN_Hacker_Implant_C_ExecuteUbergraph_PAWN_Hacker_Implant::Temp_struct_Variable_4' has a wrong offset!");
static_assert(offsetof(PAWN_Hacker_Implant_C_ExecuteUbergraph_PAWN_Hacker_Implant, K2Node_InputActionEvent_Key_9) == 0x000170, "Member 'PAWN_Hacker_Implant_C_ExecuteUbergraph_PAWN_Hacker_Implant::K2Node_InputActionEvent_Key_9' has a wrong offset!");
static_assert(offsetof(PAWN_Hacker_Implant_C_ExecuteUbergraph_PAWN_Hacker_Implant, K2Node_InputActionEvent_Key_8) == 0x000188, "Member 'PAWN_Hacker_Implant_C_ExecuteUbergraph_PAWN_Hacker_Implant::K2Node_InputActionEvent_Key_8' has a wrong offset!");
static_assert(offsetof(PAWN_Hacker_Implant_C_ExecuteUbergraph_PAWN_Hacker_Implant, Temp_struct_Variable_5) == 0x0001A0, "Member 'PAWN_Hacker_Implant_C_ExecuteUbergraph_PAWN_Hacker_Implant::Temp_struct_Variable_5' has a wrong offset!");
static_assert(offsetof(PAWN_Hacker_Implant_C_ExecuteUbergraph_PAWN_Hacker_Implant, K2Node_InputActionEvent_Key_7) == 0x0001B8, "Member 'PAWN_Hacker_Implant_C_ExecuteUbergraph_PAWN_Hacker_Implant::K2Node_InputActionEvent_Key_7' has a wrong offset!");
static_assert(offsetof(PAWN_Hacker_Implant_C_ExecuteUbergraph_PAWN_Hacker_Implant, K2Node_InputActionEvent_Key_6) == 0x0001D0, "Member 'PAWN_Hacker_Implant_C_ExecuteUbergraph_PAWN_Hacker_Implant::K2Node_InputActionEvent_Key_6' has a wrong offset!");
static_assert(offsetof(PAWN_Hacker_Implant_C_ExecuteUbergraph_PAWN_Hacker_Implant, Temp_struct_Variable_6) == 0x0001E8, "Member 'PAWN_Hacker_Implant_C_ExecuteUbergraph_PAWN_Hacker_Implant::Temp_struct_Variable_6' has a wrong offset!");
static_assert(offsetof(PAWN_Hacker_Implant_C_ExecuteUbergraph_PAWN_Hacker_Implant, K2Node_InputActionEvent_Key_5) == 0x000200, "Member 'PAWN_Hacker_Implant_C_ExecuteUbergraph_PAWN_Hacker_Implant::K2Node_InputActionEvent_Key_5' has a wrong offset!");
static_assert(offsetof(PAWN_Hacker_Implant_C_ExecuteUbergraph_PAWN_Hacker_Implant, K2Node_InputActionEvent_Key_4) == 0x000218, "Member 'PAWN_Hacker_Implant_C_ExecuteUbergraph_PAWN_Hacker_Implant::K2Node_InputActionEvent_Key_4' has a wrong offset!");
static_assert(offsetof(PAWN_Hacker_Implant_C_ExecuteUbergraph_PAWN_Hacker_Implant, Temp_struct_Variable_7) == 0x000230, "Member 'PAWN_Hacker_Implant_C_ExecuteUbergraph_PAWN_Hacker_Implant::Temp_struct_Variable_7' has a wrong offset!");
static_assert(offsetof(PAWN_Hacker_Implant_C_ExecuteUbergraph_PAWN_Hacker_Implant, K2Node_InputActionEvent_Key_3) == 0x000248, "Member 'PAWN_Hacker_Implant_C_ExecuteUbergraph_PAWN_Hacker_Implant::K2Node_InputActionEvent_Key_3' has a wrong offset!");
static_assert(offsetof(PAWN_Hacker_Implant_C_ExecuteUbergraph_PAWN_Hacker_Implant, K2Node_InputActionEvent_Key_2) == 0x000260, "Member 'PAWN_Hacker_Implant_C_ExecuteUbergraph_PAWN_Hacker_Implant::K2Node_InputActionEvent_Key_2' has a wrong offset!");
static_assert(offsetof(PAWN_Hacker_Implant_C_ExecuteUbergraph_PAWN_Hacker_Implant, Temp_struct_Variable_8) == 0x000278, "Member 'PAWN_Hacker_Implant_C_ExecuteUbergraph_PAWN_Hacker_Implant::Temp_struct_Variable_8' has a wrong offset!");
static_assert(offsetof(PAWN_Hacker_Implant_C_ExecuteUbergraph_PAWN_Hacker_Implant, K2Node_InputActionEvent_Key_1) == 0x000290, "Member 'PAWN_Hacker_Implant_C_ExecuteUbergraph_PAWN_Hacker_Implant::K2Node_InputActionEvent_Key_1' has a wrong offset!");
static_assert(offsetof(PAWN_Hacker_Implant_C_ExecuteUbergraph_PAWN_Hacker_Implant, K2Node_InputActionEvent_Key) == 0x0002A8, "Member 'PAWN_Hacker_Implant_C_ExecuteUbergraph_PAWN_Hacker_Implant::K2Node_InputActionEvent_Key' has a wrong offset!");
static_assert(offsetof(PAWN_Hacker_Implant_C_ExecuteUbergraph_PAWN_Hacker_Implant, Temp_struct_Variable_9) == 0x0002C0, "Member 'PAWN_Hacker_Implant_C_ExecuteUbergraph_PAWN_Hacker_Implant::Temp_struct_Variable_9' has a wrong offset!");
static_assert(offsetof(PAWN_Hacker_Implant_C_ExecuteUbergraph_PAWN_Hacker_Implant, K2Node_InputActionEvent_Key_22) == 0x0002D8, "Member 'PAWN_Hacker_Implant_C_ExecuteUbergraph_PAWN_Hacker_Implant::K2Node_InputActionEvent_Key_22' has a wrong offset!");
static_assert(offsetof(PAWN_Hacker_Implant_C_ExecuteUbergraph_PAWN_Hacker_Implant, K2Node_InputActionEvent_Key_23) == 0x0002F0, "Member 'PAWN_Hacker_Implant_C_ExecuteUbergraph_PAWN_Hacker_Implant::K2Node_InputActionEvent_Key_23' has a wrong offset!");
static_assert(offsetof(PAWN_Hacker_Implant_C_ExecuteUbergraph_PAWN_Hacker_Implant, K2Node_InputActionEvent_Key_24) == 0x000308, "Member 'PAWN_Hacker_Implant_C_ExecuteUbergraph_PAWN_Hacker_Implant::K2Node_InputActionEvent_Key_24' has a wrong offset!");
static_assert(offsetof(PAWN_Hacker_Implant_C_ExecuteUbergraph_PAWN_Hacker_Implant, K2Node_InputActionEvent_Key_25) == 0x000320, "Member 'PAWN_Hacker_Implant_C_ExecuteUbergraph_PAWN_Hacker_Implant::K2Node_InputActionEvent_Key_25' has a wrong offset!");
static_assert(offsetof(PAWN_Hacker_Implant_C_ExecuteUbergraph_PAWN_Hacker_Implant, K2Node_InputActionEvent_Key_26) == 0x000338, "Member 'PAWN_Hacker_Implant_C_ExecuteUbergraph_PAWN_Hacker_Implant::K2Node_InputActionEvent_Key_26' has a wrong offset!");
static_assert(offsetof(PAWN_Hacker_Implant_C_ExecuteUbergraph_PAWN_Hacker_Implant, K2Node_InputActionEvent_Key_27) == 0x000350, "Member 'PAWN_Hacker_Implant_C_ExecuteUbergraph_PAWN_Hacker_Implant::K2Node_InputActionEvent_Key_27' has a wrong offset!");
static_assert(offsetof(PAWN_Hacker_Implant_C_ExecuteUbergraph_PAWN_Hacker_Implant, K2Node_InputActionEvent_Key_28) == 0x000368, "Member 'PAWN_Hacker_Implant_C_ExecuteUbergraph_PAWN_Hacker_Implant::K2Node_InputActionEvent_Key_28' has a wrong offset!");
static_assert(offsetof(PAWN_Hacker_Implant_C_ExecuteUbergraph_PAWN_Hacker_Implant, CallFunc_GetNeuralHUD_Result) == 0x000380, "Member 'PAWN_Hacker_Implant_C_ExecuteUbergraph_PAWN_Hacker_Implant::CallFunc_GetNeuralHUD_Result' has a wrong offset!");
static_assert(offsetof(PAWN_Hacker_Implant_C_ExecuteUbergraph_PAWN_Hacker_Implant, CallFunc_GetNeuralHUD_Result_1) == 0x000388, "Member 'PAWN_Hacker_Implant_C_ExecuteUbergraph_PAWN_Hacker_Implant::CallFunc_GetNeuralHUD_Result_1' has a wrong offset!");
static_assert(offsetof(PAWN_Hacker_Implant_C_ExecuteUbergraph_PAWN_Hacker_Implant, CallFunc_GetNeuralHUD_Result_2) == 0x000390, "Member 'PAWN_Hacker_Implant_C_ExecuteUbergraph_PAWN_Hacker_Implant::CallFunc_GetNeuralHUD_Result_2' has a wrong offset!");
static_assert(offsetof(PAWN_Hacker_Implant_C_ExecuteUbergraph_PAWN_Hacker_Implant, CallFunc_GetNeuralHUD_Result_3) == 0x000398, "Member 'PAWN_Hacker_Implant_C_ExecuteUbergraph_PAWN_Hacker_Implant::CallFunc_GetNeuralHUD_Result_3' has a wrong offset!");
static_assert(offsetof(PAWN_Hacker_Implant_C_ExecuteUbergraph_PAWN_Hacker_Implant, CallFunc_GetNeuralHUD_Result_4) == 0x0003A0, "Member 'PAWN_Hacker_Implant_C_ExecuteUbergraph_PAWN_Hacker_Implant::CallFunc_GetNeuralHUD_Result_4' has a wrong offset!");
static_assert(offsetof(PAWN_Hacker_Implant_C_ExecuteUbergraph_PAWN_Hacker_Implant, CallFunc_GetNeuralHUD_Result_5) == 0x0003A8, "Member 'PAWN_Hacker_Implant_C_ExecuteUbergraph_PAWN_Hacker_Implant::CallFunc_GetNeuralHUD_Result_5' has a wrong offset!");
static_assert(offsetof(PAWN_Hacker_Implant_C_ExecuteUbergraph_PAWN_Hacker_Implant, CallFunc_GetNeuralHUD_Result_6) == 0x0003B0, "Member 'PAWN_Hacker_Implant_C_ExecuteUbergraph_PAWN_Hacker_Implant::CallFunc_GetNeuralHUD_Result_6' has a wrong offset!");
static_assert(offsetof(PAWN_Hacker_Implant_C_ExecuteUbergraph_PAWN_Hacker_Implant, CallFunc_GetNeuralHUD_Result_7) == 0x0003B8, "Member 'PAWN_Hacker_Implant_C_ExecuteUbergraph_PAWN_Hacker_Implant::CallFunc_GetNeuralHUD_Result_7' has a wrong offset!");
static_assert(offsetof(PAWN_Hacker_Implant_C_ExecuteUbergraph_PAWN_Hacker_Implant, Temp_struct_Variable_10) == 0x0003C0, "Member 'PAWN_Hacker_Implant_C_ExecuteUbergraph_PAWN_Hacker_Implant::Temp_struct_Variable_10' has a wrong offset!");
static_assert(offsetof(PAWN_Hacker_Implant_C_ExecuteUbergraph_PAWN_Hacker_Implant, K2Node_InputActionEvent_Key_29) == 0x0003D8, "Member 'PAWN_Hacker_Implant_C_ExecuteUbergraph_PAWN_Hacker_Implant::K2Node_InputActionEvent_Key_29' has a wrong offset!");
static_assert(offsetof(PAWN_Hacker_Implant_C_ExecuteUbergraph_PAWN_Hacker_Implant, K2Node_InputActionEvent_Key_30) == 0x0003F0, "Member 'PAWN_Hacker_Implant_C_ExecuteUbergraph_PAWN_Hacker_Implant::K2Node_InputActionEvent_Key_30' has a wrong offset!");
static_assert(offsetof(PAWN_Hacker_Implant_C_ExecuteUbergraph_PAWN_Hacker_Implant, Temp_struct_Variable_11) == 0x000408, "Member 'PAWN_Hacker_Implant_C_ExecuteUbergraph_PAWN_Hacker_Implant::Temp_struct_Variable_11' has a wrong offset!");
static_assert(offsetof(PAWN_Hacker_Implant_C_ExecuteUbergraph_PAWN_Hacker_Implant, CallFunc_GetController_ReturnValue) == 0x000420, "Member 'PAWN_Hacker_Implant_C_ExecuteUbergraph_PAWN_Hacker_Implant::CallFunc_GetController_ReturnValue' has a wrong offset!");
static_assert(offsetof(PAWN_Hacker_Implant_C_ExecuteUbergraph_PAWN_Hacker_Implant, CallFunc_GetController_ReturnValue_1) == 0x000428, "Member 'PAWN_Hacker_Implant_C_ExecuteUbergraph_PAWN_Hacker_Implant::CallFunc_GetController_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(PAWN_Hacker_Implant_C_ExecuteUbergraph_PAWN_Hacker_Implant, K2Node_DynamicCast_AsPlayer_Controller) == 0x000430, "Member 'PAWN_Hacker_Implant_C_ExecuteUbergraph_PAWN_Hacker_Implant::K2Node_DynamicCast_AsPlayer_Controller' has a wrong offset!");
static_assert(offsetof(PAWN_Hacker_Implant_C_ExecuteUbergraph_PAWN_Hacker_Implant, K2Node_DynamicCast_bSuccess) == 0x000438, "Member 'PAWN_Hacker_Implant_C_ExecuteUbergraph_PAWN_Hacker_Implant::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(PAWN_Hacker_Implant_C_ExecuteUbergraph_PAWN_Hacker_Implant, K2Node_DynamicCast_AsPlayer_Controller_1) == 0x000440, "Member 'PAWN_Hacker_Implant_C_ExecuteUbergraph_PAWN_Hacker_Implant::K2Node_DynamicCast_AsPlayer_Controller_1' has a wrong offset!");
static_assert(offsetof(PAWN_Hacker_Implant_C_ExecuteUbergraph_PAWN_Hacker_Implant, K2Node_DynamicCast_bSuccess_1) == 0x000448, "Member 'PAWN_Hacker_Implant_C_ExecuteUbergraph_PAWN_Hacker_Implant::K2Node_DynamicCast_bSuccess_1' has a wrong offset!");
static_assert(offsetof(PAWN_Hacker_Implant_C_ExecuteUbergraph_PAWN_Hacker_Implant, K2Node_InputActionEvent_Key_19) == 0x000450, "Member 'PAWN_Hacker_Implant_C_ExecuteUbergraph_PAWN_Hacker_Implant::K2Node_InputActionEvent_Key_19' has a wrong offset!");
static_assert(offsetof(PAWN_Hacker_Implant_C_ExecuteUbergraph_PAWN_Hacker_Implant, K2Node_InputActionEvent_Key_31) == 0x000468, "Member 'PAWN_Hacker_Implant_C_ExecuteUbergraph_PAWN_Hacker_Implant::K2Node_InputActionEvent_Key_31' has a wrong offset!");
static_assert(offsetof(PAWN_Hacker_Implant_C_ExecuteUbergraph_PAWN_Hacker_Implant, K2Node_InputActionEvent_Key_32) == 0x000480, "Member 'PAWN_Hacker_Implant_C_ExecuteUbergraph_PAWN_Hacker_Implant::K2Node_InputActionEvent_Key_32' has a wrong offset!");
static_assert(offsetof(PAWN_Hacker_Implant_C_ExecuteUbergraph_PAWN_Hacker_Implant, K2Node_InputActionEvent_Key_33) == 0x000498, "Member 'PAWN_Hacker_Implant_C_ExecuteUbergraph_PAWN_Hacker_Implant::K2Node_InputActionEvent_Key_33' has a wrong offset!");
static_assert(offsetof(PAWN_Hacker_Implant_C_ExecuteUbergraph_PAWN_Hacker_Implant, Temp_struct_Variable_12) == 0x0004B0, "Member 'PAWN_Hacker_Implant_C_ExecuteUbergraph_PAWN_Hacker_Implant::Temp_struct_Variable_12' has a wrong offset!");
static_assert(offsetof(PAWN_Hacker_Implant_C_ExecuteUbergraph_PAWN_Hacker_Implant, K2Node_InputActionEvent_Key_34) == 0x0004C8, "Member 'PAWN_Hacker_Implant_C_ExecuteUbergraph_PAWN_Hacker_Implant::K2Node_InputActionEvent_Key_34' has a wrong offset!");
static_assert(offsetof(PAWN_Hacker_Implant_C_ExecuteUbergraph_PAWN_Hacker_Implant, K2Node_InputActionEvent_Key_35) == 0x0004E0, "Member 'PAWN_Hacker_Implant_C_ExecuteUbergraph_PAWN_Hacker_Implant::K2Node_InputActionEvent_Key_35' has a wrong offset!");
static_assert(offsetof(PAWN_Hacker_Implant_C_ExecuteUbergraph_PAWN_Hacker_Implant, K2Node_InputActionEvent_Key_36) == 0x0004F8, "Member 'PAWN_Hacker_Implant_C_ExecuteUbergraph_PAWN_Hacker_Implant::K2Node_InputActionEvent_Key_36' has a wrong offset!");
static_assert(offsetof(PAWN_Hacker_Implant_C_ExecuteUbergraph_PAWN_Hacker_Implant, K2Node_InputActionEvent_Key_37) == 0x000510, "Member 'PAWN_Hacker_Implant_C_ExecuteUbergraph_PAWN_Hacker_Implant::K2Node_InputActionEvent_Key_37' has a wrong offset!");
static_assert(offsetof(PAWN_Hacker_Implant_C_ExecuteUbergraph_PAWN_Hacker_Implant, K2Node_InputActionEvent_Key_38) == 0x000528, "Member 'PAWN_Hacker_Implant_C_ExecuteUbergraph_PAWN_Hacker_Implant::K2Node_InputActionEvent_Key_38' has a wrong offset!");
static_assert(offsetof(PAWN_Hacker_Implant_C_ExecuteUbergraph_PAWN_Hacker_Implant, K2Node_InputActionEvent_Key_39) == 0x000540, "Member 'PAWN_Hacker_Implant_C_ExecuteUbergraph_PAWN_Hacker_Implant::K2Node_InputActionEvent_Key_39' has a wrong offset!");
static_assert(offsetof(PAWN_Hacker_Implant_C_ExecuteUbergraph_PAWN_Hacker_Implant, K2Node_InputActionEvent_Key_40) == 0x000558, "Member 'PAWN_Hacker_Implant_C_ExecuteUbergraph_PAWN_Hacker_Implant::K2Node_InputActionEvent_Key_40' has a wrong offset!");
static_assert(offsetof(PAWN_Hacker_Implant_C_ExecuteUbergraph_PAWN_Hacker_Implant, K2Node_InputActionEvent_Key_41) == 0x000570, "Member 'PAWN_Hacker_Implant_C_ExecuteUbergraph_PAWN_Hacker_Implant::K2Node_InputActionEvent_Key_41' has a wrong offset!");
static_assert(offsetof(PAWN_Hacker_Implant_C_ExecuteUbergraph_PAWN_Hacker_Implant, K2Node_InputActionEvent_Key_42) == 0x000588, "Member 'PAWN_Hacker_Implant_C_ExecuteUbergraph_PAWN_Hacker_Implant::K2Node_InputActionEvent_Key_42' has a wrong offset!");
static_assert(offsetof(PAWN_Hacker_Implant_C_ExecuteUbergraph_PAWN_Hacker_Implant, K2Node_InputActionEvent_Key_43) == 0x0005A0, "Member 'PAWN_Hacker_Implant_C_ExecuteUbergraph_PAWN_Hacker_Implant::K2Node_InputActionEvent_Key_43' has a wrong offset!");
static_assert(offsetof(PAWN_Hacker_Implant_C_ExecuteUbergraph_PAWN_Hacker_Implant, K2Node_InputActionEvent_Key_44) == 0x0005B8, "Member 'PAWN_Hacker_Implant_C_ExecuteUbergraph_PAWN_Hacker_Implant::K2Node_InputActionEvent_Key_44' has a wrong offset!");
static_assert(offsetof(PAWN_Hacker_Implant_C_ExecuteUbergraph_PAWN_Hacker_Implant, K2Node_InputActionEvent_Key_45) == 0x0005D0, "Member 'PAWN_Hacker_Implant_C_ExecuteUbergraph_PAWN_Hacker_Implant::K2Node_InputActionEvent_Key_45' has a wrong offset!");
static_assert(offsetof(PAWN_Hacker_Implant_C_ExecuteUbergraph_PAWN_Hacker_Implant, K2Node_InputActionEvent_Key_46) == 0x0005E8, "Member 'PAWN_Hacker_Implant_C_ExecuteUbergraph_PAWN_Hacker_Implant::K2Node_InputActionEvent_Key_46' has a wrong offset!");
static_assert(offsetof(PAWN_Hacker_Implant_C_ExecuteUbergraph_PAWN_Hacker_Implant, CallFunc_GetNeuralHUD_Result_8) == 0x000600, "Member 'PAWN_Hacker_Implant_C_ExecuteUbergraph_PAWN_Hacker_Implant::CallFunc_GetNeuralHUD_Result_8' has a wrong offset!");
static_assert(offsetof(PAWN_Hacker_Implant_C_ExecuteUbergraph_PAWN_Hacker_Implant, CallFunc_GetNeuralHUD_Result_9) == 0x000608, "Member 'PAWN_Hacker_Implant_C_ExecuteUbergraph_PAWN_Hacker_Implant::CallFunc_GetNeuralHUD_Result_9' has a wrong offset!");
static_assert(offsetof(PAWN_Hacker_Implant_C_ExecuteUbergraph_PAWN_Hacker_Implant, CallFunc_ToggleMultiFunctionDisplay_MainDisplayVisible) == 0x000610, "Member 'PAWN_Hacker_Implant_C_ExecuteUbergraph_PAWN_Hacker_Implant::CallFunc_ToggleMultiFunctionDisplay_MainDisplayVisible' has a wrong offset!");
static_assert(offsetof(PAWN_Hacker_Implant_C_ExecuteUbergraph_PAWN_Hacker_Implant, CallFunc_GetNeuralHUD_Result_10) == 0x000618, "Member 'PAWN_Hacker_Implant_C_ExecuteUbergraph_PAWN_Hacker_Implant::CallFunc_GetNeuralHUD_Result_10' has a wrong offset!");
static_assert(offsetof(PAWN_Hacker_Implant_C_ExecuteUbergraph_PAWN_Hacker_Implant, CallFunc_GetNeuralHUD_Result_11) == 0x000620, "Member 'PAWN_Hacker_Implant_C_ExecuteUbergraph_PAWN_Hacker_Implant::CallFunc_GetNeuralHUD_Result_11' has a wrong offset!");
static_assert(offsetof(PAWN_Hacker_Implant_C_ExecuteUbergraph_PAWN_Hacker_Implant, CallFunc_GetNeuralHUD_Result_12) == 0x000628, "Member 'PAWN_Hacker_Implant_C_ExecuteUbergraph_PAWN_Hacker_Implant::CallFunc_GetNeuralHUD_Result_12' has a wrong offset!");
static_assert(offsetof(PAWN_Hacker_Implant_C_ExecuteUbergraph_PAWN_Hacker_Implant, CallFunc_GetNeuralHUD_Result_13) == 0x000630, "Member 'PAWN_Hacker_Implant_C_ExecuteUbergraph_PAWN_Hacker_Implant::CallFunc_GetNeuralHUD_Result_13' has a wrong offset!");
static_assert(offsetof(PAWN_Hacker_Implant_C_ExecuteUbergraph_PAWN_Hacker_Implant, CallFunc_GetNeuralHUD_Result_14) == 0x000638, "Member 'PAWN_Hacker_Implant_C_ExecuteUbergraph_PAWN_Hacker_Implant::CallFunc_GetNeuralHUD_Result_14' has a wrong offset!");
static_assert(offsetof(PAWN_Hacker_Implant_C_ExecuteUbergraph_PAWN_Hacker_Implant, CallFunc_GetNeuralHUD_Result_15) == 0x000640, "Member 'PAWN_Hacker_Implant_C_ExecuteUbergraph_PAWN_Hacker_Implant::CallFunc_GetNeuralHUD_Result_15' has a wrong offset!");
static_assert(offsetof(PAWN_Hacker_Implant_C_ExecuteUbergraph_PAWN_Hacker_Implant, CallFunc_GetNeuralHUD_Result_16) == 0x000648, "Member 'PAWN_Hacker_Implant_C_ExecuteUbergraph_PAWN_Hacker_Implant::CallFunc_GetNeuralHUD_Result_16' has a wrong offset!");
static_assert(offsetof(PAWN_Hacker_Implant_C_ExecuteUbergraph_PAWN_Hacker_Implant, CallFunc_GetNeuralHUD_Result_17) == 0x000650, "Member 'PAWN_Hacker_Implant_C_ExecuteUbergraph_PAWN_Hacker_Implant::CallFunc_GetNeuralHUD_Result_17' has a wrong offset!");
static_assert(offsetof(PAWN_Hacker_Implant_C_ExecuteUbergraph_PAWN_Hacker_Implant, CallFunc_GetNeuralHUD_Result_18) == 0x000658, "Member 'PAWN_Hacker_Implant_C_ExecuteUbergraph_PAWN_Hacker_Implant::CallFunc_GetNeuralHUD_Result_18' has a wrong offset!");
static_assert(offsetof(PAWN_Hacker_Implant_C_ExecuteUbergraph_PAWN_Hacker_Implant, CallFunc_GetNeuralHUD_Result_19) == 0x000660, "Member 'PAWN_Hacker_Implant_C_ExecuteUbergraph_PAWN_Hacker_Implant::CallFunc_GetNeuralHUD_Result_19' has a wrong offset!");
static_assert(offsetof(PAWN_Hacker_Implant_C_ExecuteUbergraph_PAWN_Hacker_Implant, CallFunc_GetNeuralHUD_Result_20) == 0x000668, "Member 'PAWN_Hacker_Implant_C_ExecuteUbergraph_PAWN_Hacker_Implant::CallFunc_GetNeuralHUD_Result_20' has a wrong offset!");
static_assert(offsetof(PAWN_Hacker_Implant_C_ExecuteUbergraph_PAWN_Hacker_Implant, CallFunc_GetNeuralHUD_Result_21) == 0x000670, "Member 'PAWN_Hacker_Implant_C_ExecuteUbergraph_PAWN_Hacker_Implant::CallFunc_GetNeuralHUD_Result_21' has a wrong offset!");
static_assert(offsetof(PAWN_Hacker_Implant_C_ExecuteUbergraph_PAWN_Hacker_Implant, CallFunc_GetNeuralHUD_Result_22) == 0x000678, "Member 'PAWN_Hacker_Implant_C_ExecuteUbergraph_PAWN_Hacker_Implant::CallFunc_GetNeuralHUD_Result_22' has a wrong offset!");
static_assert(offsetof(PAWN_Hacker_Implant_C_ExecuteUbergraph_PAWN_Hacker_Implant, CallFunc_TryUseConsumableAtSlot_Result) == 0x000680, "Member 'PAWN_Hacker_Implant_C_ExecuteUbergraph_PAWN_Hacker_Implant::CallFunc_TryUseConsumableAtSlot_Result' has a wrong offset!");
static_assert(offsetof(PAWN_Hacker_Implant_C_ExecuteUbergraph_PAWN_Hacker_Implant, K2Node_Event_OldController) == 0x000688, "Member 'PAWN_Hacker_Implant_C_ExecuteUbergraph_PAWN_Hacker_Implant::K2Node_Event_OldController' has a wrong offset!");
static_assert(offsetof(PAWN_Hacker_Implant_C_ExecuteUbergraph_PAWN_Hacker_Implant, CallFunc_TryUseConsumableAtSlot_Result_1) == 0x000690, "Member 'PAWN_Hacker_Implant_C_ExecuteUbergraph_PAWN_Hacker_Implant::CallFunc_TryUseConsumableAtSlot_Result_1' has a wrong offset!");
static_assert(offsetof(PAWN_Hacker_Implant_C_ExecuteUbergraph_PAWN_Hacker_Implant, K2Node_InputActionEvent_Key_20) == 0x000698, "Member 'PAWN_Hacker_Implant_C_ExecuteUbergraph_PAWN_Hacker_Implant::K2Node_InputActionEvent_Key_20' has a wrong offset!");

// Function PAWN_Hacker_Implant.PAWN_Hacker_Implant_C.InpActEvt_Locked_Hotbar9_K2Node_InputActionEvent_0
// 0x0018 (0x0018 - 0x0000)
struct PAWN_Hacker_Implant_C_InpActEvt_Locked_Hotbar9_K2Node_InputActionEvent_0 final
{
public:
	struct FKey                                   Key;                                               // 0x0000(0x0018)(BlueprintVisible, BlueprintReadOnly, Parm, HasGetValueTypeHash)
};
static_assert(alignof(PAWN_Hacker_Implant_C_InpActEvt_Locked_Hotbar9_K2Node_InputActionEvent_0) == 0x000008, "Wrong alignment on PAWN_Hacker_Implant_C_InpActEvt_Locked_Hotbar9_K2Node_InputActionEvent_0");
static_assert(sizeof(PAWN_Hacker_Implant_C_InpActEvt_Locked_Hotbar9_K2Node_InputActionEvent_0) == 0x000018, "Wrong size on PAWN_Hacker_Implant_C_InpActEvt_Locked_Hotbar9_K2Node_InputActionEvent_0");
static_assert(offsetof(PAWN_Hacker_Implant_C_InpActEvt_Locked_Hotbar9_K2Node_InputActionEvent_0, Key) == 0x000000, "Member 'PAWN_Hacker_Implant_C_InpActEvt_Locked_Hotbar9_K2Node_InputActionEvent_0::Key' has a wrong offset!");

// Function PAWN_Hacker_Implant.PAWN_Hacker_Implant_C.InpActEvt_Locked_Hotbar9_K2Node_InputActionEvent_1
// 0x0018 (0x0018 - 0x0000)
struct PAWN_Hacker_Implant_C_InpActEvt_Locked_Hotbar9_K2Node_InputActionEvent_1 final
{
public:
	struct FKey                                   Key;                                               // 0x0000(0x0018)(BlueprintVisible, BlueprintReadOnly, Parm, HasGetValueTypeHash)
};
static_assert(alignof(PAWN_Hacker_Implant_C_InpActEvt_Locked_Hotbar9_K2Node_InputActionEvent_1) == 0x000008, "Wrong alignment on PAWN_Hacker_Implant_C_InpActEvt_Locked_Hotbar9_K2Node_InputActionEvent_1");
static_assert(sizeof(PAWN_Hacker_Implant_C_InpActEvt_Locked_Hotbar9_K2Node_InputActionEvent_1) == 0x000018, "Wrong size on PAWN_Hacker_Implant_C_InpActEvt_Locked_Hotbar9_K2Node_InputActionEvent_1");
static_assert(offsetof(PAWN_Hacker_Implant_C_InpActEvt_Locked_Hotbar9_K2Node_InputActionEvent_1, Key) == 0x000000, "Member 'PAWN_Hacker_Implant_C_InpActEvt_Locked_Hotbar9_K2Node_InputActionEvent_1::Key' has a wrong offset!");

// Function PAWN_Hacker_Implant.PAWN_Hacker_Implant_C.InpActEvt_Locked_Hotbar8_K2Node_InputActionEvent_2
// 0x0018 (0x0018 - 0x0000)
struct PAWN_Hacker_Implant_C_InpActEvt_Locked_Hotbar8_K2Node_InputActionEvent_2 final
{
public:
	struct FKey                                   Key;                                               // 0x0000(0x0018)(BlueprintVisible, BlueprintReadOnly, Parm, HasGetValueTypeHash)
};
static_assert(alignof(PAWN_Hacker_Implant_C_InpActEvt_Locked_Hotbar8_K2Node_InputActionEvent_2) == 0x000008, "Wrong alignment on PAWN_Hacker_Implant_C_InpActEvt_Locked_Hotbar8_K2Node_InputActionEvent_2");
static_assert(sizeof(PAWN_Hacker_Implant_C_InpActEvt_Locked_Hotbar8_K2Node_InputActionEvent_2) == 0x000018, "Wrong size on PAWN_Hacker_Implant_C_InpActEvt_Locked_Hotbar8_K2Node_InputActionEvent_2");
static_assert(offsetof(PAWN_Hacker_Implant_C_InpActEvt_Locked_Hotbar8_K2Node_InputActionEvent_2, Key) == 0x000000, "Member 'PAWN_Hacker_Implant_C_InpActEvt_Locked_Hotbar8_K2Node_InputActionEvent_2::Key' has a wrong offset!");

// Function PAWN_Hacker_Implant.PAWN_Hacker_Implant_C.InpActEvt_Locked_Hotbar8_K2Node_InputActionEvent_3
// 0x0018 (0x0018 - 0x0000)
struct PAWN_Hacker_Implant_C_InpActEvt_Locked_Hotbar8_K2Node_InputActionEvent_3 final
{
public:
	struct FKey                                   Key;                                               // 0x0000(0x0018)(BlueprintVisible, BlueprintReadOnly, Parm, HasGetValueTypeHash)
};
static_assert(alignof(PAWN_Hacker_Implant_C_InpActEvt_Locked_Hotbar8_K2Node_InputActionEvent_3) == 0x000008, "Wrong alignment on PAWN_Hacker_Implant_C_InpActEvt_Locked_Hotbar8_K2Node_InputActionEvent_3");
static_assert(sizeof(PAWN_Hacker_Implant_C_InpActEvt_Locked_Hotbar8_K2Node_InputActionEvent_3) == 0x000018, "Wrong size on PAWN_Hacker_Implant_C_InpActEvt_Locked_Hotbar8_K2Node_InputActionEvent_3");
static_assert(offsetof(PAWN_Hacker_Implant_C_InpActEvt_Locked_Hotbar8_K2Node_InputActionEvent_3, Key) == 0x000000, "Member 'PAWN_Hacker_Implant_C_InpActEvt_Locked_Hotbar8_K2Node_InputActionEvent_3::Key' has a wrong offset!");

// Function PAWN_Hacker_Implant.PAWN_Hacker_Implant_C.InpActEvt_Locked_Hotbar7_K2Node_InputActionEvent_4
// 0x0018 (0x0018 - 0x0000)
struct PAWN_Hacker_Implant_C_InpActEvt_Locked_Hotbar7_K2Node_InputActionEvent_4 final
{
public:
	struct FKey                                   Key;                                               // 0x0000(0x0018)(BlueprintVisible, BlueprintReadOnly, Parm, HasGetValueTypeHash)
};
static_assert(alignof(PAWN_Hacker_Implant_C_InpActEvt_Locked_Hotbar7_K2Node_InputActionEvent_4) == 0x000008, "Wrong alignment on PAWN_Hacker_Implant_C_InpActEvt_Locked_Hotbar7_K2Node_InputActionEvent_4");
static_assert(sizeof(PAWN_Hacker_Implant_C_InpActEvt_Locked_Hotbar7_K2Node_InputActionEvent_4) == 0x000018, "Wrong size on PAWN_Hacker_Implant_C_InpActEvt_Locked_Hotbar7_K2Node_InputActionEvent_4");
static_assert(offsetof(PAWN_Hacker_Implant_C_InpActEvt_Locked_Hotbar7_K2Node_InputActionEvent_4, Key) == 0x000000, "Member 'PAWN_Hacker_Implant_C_InpActEvt_Locked_Hotbar7_K2Node_InputActionEvent_4::Key' has a wrong offset!");

// Function PAWN_Hacker_Implant.PAWN_Hacker_Implant_C.InpActEvt_Locked_Hotbar7_K2Node_InputActionEvent_5
// 0x0018 (0x0018 - 0x0000)
struct PAWN_Hacker_Implant_C_InpActEvt_Locked_Hotbar7_K2Node_InputActionEvent_5 final
{
public:
	struct FKey                                   Key;                                               // 0x0000(0x0018)(BlueprintVisible, BlueprintReadOnly, Parm, HasGetValueTypeHash)
};
static_assert(alignof(PAWN_Hacker_Implant_C_InpActEvt_Locked_Hotbar7_K2Node_InputActionEvent_5) == 0x000008, "Wrong alignment on PAWN_Hacker_Implant_C_InpActEvt_Locked_Hotbar7_K2Node_InputActionEvent_5");
static_assert(sizeof(PAWN_Hacker_Implant_C_InpActEvt_Locked_Hotbar7_K2Node_InputActionEvent_5) == 0x000018, "Wrong size on PAWN_Hacker_Implant_C_InpActEvt_Locked_Hotbar7_K2Node_InputActionEvent_5");
static_assert(offsetof(PAWN_Hacker_Implant_C_InpActEvt_Locked_Hotbar7_K2Node_InputActionEvent_5, Key) == 0x000000, "Member 'PAWN_Hacker_Implant_C_InpActEvt_Locked_Hotbar7_K2Node_InputActionEvent_5::Key' has a wrong offset!");

// Function PAWN_Hacker_Implant.PAWN_Hacker_Implant_C.InpActEvt_Locked_Hotbar6_K2Node_InputActionEvent_6
// 0x0018 (0x0018 - 0x0000)
struct PAWN_Hacker_Implant_C_InpActEvt_Locked_Hotbar6_K2Node_InputActionEvent_6 final
{
public:
	struct FKey                                   Key;                                               // 0x0000(0x0018)(BlueprintVisible, BlueprintReadOnly, Parm, HasGetValueTypeHash)
};
static_assert(alignof(PAWN_Hacker_Implant_C_InpActEvt_Locked_Hotbar6_K2Node_InputActionEvent_6) == 0x000008, "Wrong alignment on PAWN_Hacker_Implant_C_InpActEvt_Locked_Hotbar6_K2Node_InputActionEvent_6");
static_assert(sizeof(PAWN_Hacker_Implant_C_InpActEvt_Locked_Hotbar6_K2Node_InputActionEvent_6) == 0x000018, "Wrong size on PAWN_Hacker_Implant_C_InpActEvt_Locked_Hotbar6_K2Node_InputActionEvent_6");
static_assert(offsetof(PAWN_Hacker_Implant_C_InpActEvt_Locked_Hotbar6_K2Node_InputActionEvent_6, Key) == 0x000000, "Member 'PAWN_Hacker_Implant_C_InpActEvt_Locked_Hotbar6_K2Node_InputActionEvent_6::Key' has a wrong offset!");

// Function PAWN_Hacker_Implant.PAWN_Hacker_Implant_C.InpActEvt_Locked_Hotbar6_K2Node_InputActionEvent_7
// 0x0018 (0x0018 - 0x0000)
struct PAWN_Hacker_Implant_C_InpActEvt_Locked_Hotbar6_K2Node_InputActionEvent_7 final
{
public:
	struct FKey                                   Key;                                               // 0x0000(0x0018)(BlueprintVisible, BlueprintReadOnly, Parm, HasGetValueTypeHash)
};
static_assert(alignof(PAWN_Hacker_Implant_C_InpActEvt_Locked_Hotbar6_K2Node_InputActionEvent_7) == 0x000008, "Wrong alignment on PAWN_Hacker_Implant_C_InpActEvt_Locked_Hotbar6_K2Node_InputActionEvent_7");
static_assert(sizeof(PAWN_Hacker_Implant_C_InpActEvt_Locked_Hotbar6_K2Node_InputActionEvent_7) == 0x000018, "Wrong size on PAWN_Hacker_Implant_C_InpActEvt_Locked_Hotbar6_K2Node_InputActionEvent_7");
static_assert(offsetof(PAWN_Hacker_Implant_C_InpActEvt_Locked_Hotbar6_K2Node_InputActionEvent_7, Key) == 0x000000, "Member 'PAWN_Hacker_Implant_C_InpActEvt_Locked_Hotbar6_K2Node_InputActionEvent_7::Key' has a wrong offset!");

// Function PAWN_Hacker_Implant.PAWN_Hacker_Implant_C.InpActEvt_Locked_Hotbar5_K2Node_InputActionEvent_8
// 0x0018 (0x0018 - 0x0000)
struct PAWN_Hacker_Implant_C_InpActEvt_Locked_Hotbar5_K2Node_InputActionEvent_8 final
{
public:
	struct FKey                                   Key;                                               // 0x0000(0x0018)(BlueprintVisible, BlueprintReadOnly, Parm, HasGetValueTypeHash)
};
static_assert(alignof(PAWN_Hacker_Implant_C_InpActEvt_Locked_Hotbar5_K2Node_InputActionEvent_8) == 0x000008, "Wrong alignment on PAWN_Hacker_Implant_C_InpActEvt_Locked_Hotbar5_K2Node_InputActionEvent_8");
static_assert(sizeof(PAWN_Hacker_Implant_C_InpActEvt_Locked_Hotbar5_K2Node_InputActionEvent_8) == 0x000018, "Wrong size on PAWN_Hacker_Implant_C_InpActEvt_Locked_Hotbar5_K2Node_InputActionEvent_8");
static_assert(offsetof(PAWN_Hacker_Implant_C_InpActEvt_Locked_Hotbar5_K2Node_InputActionEvent_8, Key) == 0x000000, "Member 'PAWN_Hacker_Implant_C_InpActEvt_Locked_Hotbar5_K2Node_InputActionEvent_8::Key' has a wrong offset!");

// Function PAWN_Hacker_Implant.PAWN_Hacker_Implant_C.InpActEvt_Locked_Hotbar5_K2Node_InputActionEvent_9
// 0x0018 (0x0018 - 0x0000)
struct PAWN_Hacker_Implant_C_InpActEvt_Locked_Hotbar5_K2Node_InputActionEvent_9 final
{
public:
	struct FKey                                   Key;                                               // 0x0000(0x0018)(BlueprintVisible, BlueprintReadOnly, Parm, HasGetValueTypeHash)
};
static_assert(alignof(PAWN_Hacker_Implant_C_InpActEvt_Locked_Hotbar5_K2Node_InputActionEvent_9) == 0x000008, "Wrong alignment on PAWN_Hacker_Implant_C_InpActEvt_Locked_Hotbar5_K2Node_InputActionEvent_9");
static_assert(sizeof(PAWN_Hacker_Implant_C_InpActEvt_Locked_Hotbar5_K2Node_InputActionEvent_9) == 0x000018, "Wrong size on PAWN_Hacker_Implant_C_InpActEvt_Locked_Hotbar5_K2Node_InputActionEvent_9");
static_assert(offsetof(PAWN_Hacker_Implant_C_InpActEvt_Locked_Hotbar5_K2Node_InputActionEvent_9, Key) == 0x000000, "Member 'PAWN_Hacker_Implant_C_InpActEvt_Locked_Hotbar5_K2Node_InputActionEvent_9::Key' has a wrong offset!");

// Function PAWN_Hacker_Implant.PAWN_Hacker_Implant_C.InpActEvt_Locked_Hotbar4_K2Node_InputActionEvent_10
// 0x0018 (0x0018 - 0x0000)
struct PAWN_Hacker_Implant_C_InpActEvt_Locked_Hotbar4_K2Node_InputActionEvent_10 final
{
public:
	struct FKey                                   Key;                                               // 0x0000(0x0018)(BlueprintVisible, BlueprintReadOnly, Parm, HasGetValueTypeHash)
};
static_assert(alignof(PAWN_Hacker_Implant_C_InpActEvt_Locked_Hotbar4_K2Node_InputActionEvent_10) == 0x000008, "Wrong alignment on PAWN_Hacker_Implant_C_InpActEvt_Locked_Hotbar4_K2Node_InputActionEvent_10");
static_assert(sizeof(PAWN_Hacker_Implant_C_InpActEvt_Locked_Hotbar4_K2Node_InputActionEvent_10) == 0x000018, "Wrong size on PAWN_Hacker_Implant_C_InpActEvt_Locked_Hotbar4_K2Node_InputActionEvent_10");
static_assert(offsetof(PAWN_Hacker_Implant_C_InpActEvt_Locked_Hotbar4_K2Node_InputActionEvent_10, Key) == 0x000000, "Member 'PAWN_Hacker_Implant_C_InpActEvt_Locked_Hotbar4_K2Node_InputActionEvent_10::Key' has a wrong offset!");

// Function PAWN_Hacker_Implant.PAWN_Hacker_Implant_C.InpActEvt_Locked_Hotbar4_K2Node_InputActionEvent_11
// 0x0018 (0x0018 - 0x0000)
struct PAWN_Hacker_Implant_C_InpActEvt_Locked_Hotbar4_K2Node_InputActionEvent_11 final
{
public:
	struct FKey                                   Key;                                               // 0x0000(0x0018)(BlueprintVisible, BlueprintReadOnly, Parm, HasGetValueTypeHash)
};
static_assert(alignof(PAWN_Hacker_Implant_C_InpActEvt_Locked_Hotbar4_K2Node_InputActionEvent_11) == 0x000008, "Wrong alignment on PAWN_Hacker_Implant_C_InpActEvt_Locked_Hotbar4_K2Node_InputActionEvent_11");
static_assert(sizeof(PAWN_Hacker_Implant_C_InpActEvt_Locked_Hotbar4_K2Node_InputActionEvent_11) == 0x000018, "Wrong size on PAWN_Hacker_Implant_C_InpActEvt_Locked_Hotbar4_K2Node_InputActionEvent_11");
static_assert(offsetof(PAWN_Hacker_Implant_C_InpActEvt_Locked_Hotbar4_K2Node_InputActionEvent_11, Key) == 0x000000, "Member 'PAWN_Hacker_Implant_C_InpActEvt_Locked_Hotbar4_K2Node_InputActionEvent_11::Key' has a wrong offset!");

// Function PAWN_Hacker_Implant.PAWN_Hacker_Implant_C.InpActEvt_Locked_Hotbar3_K2Node_InputActionEvent_12
// 0x0018 (0x0018 - 0x0000)
struct PAWN_Hacker_Implant_C_InpActEvt_Locked_Hotbar3_K2Node_InputActionEvent_12 final
{
public:
	struct FKey                                   Key;                                               // 0x0000(0x0018)(BlueprintVisible, BlueprintReadOnly, Parm, HasGetValueTypeHash)
};
static_assert(alignof(PAWN_Hacker_Implant_C_InpActEvt_Locked_Hotbar3_K2Node_InputActionEvent_12) == 0x000008, "Wrong alignment on PAWN_Hacker_Implant_C_InpActEvt_Locked_Hotbar3_K2Node_InputActionEvent_12");
static_assert(sizeof(PAWN_Hacker_Implant_C_InpActEvt_Locked_Hotbar3_K2Node_InputActionEvent_12) == 0x000018, "Wrong size on PAWN_Hacker_Implant_C_InpActEvt_Locked_Hotbar3_K2Node_InputActionEvent_12");
static_assert(offsetof(PAWN_Hacker_Implant_C_InpActEvt_Locked_Hotbar3_K2Node_InputActionEvent_12, Key) == 0x000000, "Member 'PAWN_Hacker_Implant_C_InpActEvt_Locked_Hotbar3_K2Node_InputActionEvent_12::Key' has a wrong offset!");

// Function PAWN_Hacker_Implant.PAWN_Hacker_Implant_C.InpActEvt_Locked_Hotbar3_K2Node_InputActionEvent_13
// 0x0018 (0x0018 - 0x0000)
struct PAWN_Hacker_Implant_C_InpActEvt_Locked_Hotbar3_K2Node_InputActionEvent_13 final
{
public:
	struct FKey                                   Key;                                               // 0x0000(0x0018)(BlueprintVisible, BlueprintReadOnly, Parm, HasGetValueTypeHash)
};
static_assert(alignof(PAWN_Hacker_Implant_C_InpActEvt_Locked_Hotbar3_K2Node_InputActionEvent_13) == 0x000008, "Wrong alignment on PAWN_Hacker_Implant_C_InpActEvt_Locked_Hotbar3_K2Node_InputActionEvent_13");
static_assert(sizeof(PAWN_Hacker_Implant_C_InpActEvt_Locked_Hotbar3_K2Node_InputActionEvent_13) == 0x000018, "Wrong size on PAWN_Hacker_Implant_C_InpActEvt_Locked_Hotbar3_K2Node_InputActionEvent_13");
static_assert(offsetof(PAWN_Hacker_Implant_C_InpActEvt_Locked_Hotbar3_K2Node_InputActionEvent_13, Key) == 0x000000, "Member 'PAWN_Hacker_Implant_C_InpActEvt_Locked_Hotbar3_K2Node_InputActionEvent_13::Key' has a wrong offset!");

// Function PAWN_Hacker_Implant.PAWN_Hacker_Implant_C.InpActEvt_Locked_Hotbar2_K2Node_InputActionEvent_14
// 0x0018 (0x0018 - 0x0000)
struct PAWN_Hacker_Implant_C_InpActEvt_Locked_Hotbar2_K2Node_InputActionEvent_14 final
{
public:
	struct FKey                                   Key;                                               // 0x0000(0x0018)(BlueprintVisible, BlueprintReadOnly, Parm, HasGetValueTypeHash)
};
static_assert(alignof(PAWN_Hacker_Implant_C_InpActEvt_Locked_Hotbar2_K2Node_InputActionEvent_14) == 0x000008, "Wrong alignment on PAWN_Hacker_Implant_C_InpActEvt_Locked_Hotbar2_K2Node_InputActionEvent_14");
static_assert(sizeof(PAWN_Hacker_Implant_C_InpActEvt_Locked_Hotbar2_K2Node_InputActionEvent_14) == 0x000018, "Wrong size on PAWN_Hacker_Implant_C_InpActEvt_Locked_Hotbar2_K2Node_InputActionEvent_14");
static_assert(offsetof(PAWN_Hacker_Implant_C_InpActEvt_Locked_Hotbar2_K2Node_InputActionEvent_14, Key) == 0x000000, "Member 'PAWN_Hacker_Implant_C_InpActEvt_Locked_Hotbar2_K2Node_InputActionEvent_14::Key' has a wrong offset!");

// Function PAWN_Hacker_Implant.PAWN_Hacker_Implant_C.InpActEvt_Locked_Hotbar2_K2Node_InputActionEvent_15
// 0x0018 (0x0018 - 0x0000)
struct PAWN_Hacker_Implant_C_InpActEvt_Locked_Hotbar2_K2Node_InputActionEvent_15 final
{
public:
	struct FKey                                   Key;                                               // 0x0000(0x0018)(BlueprintVisible, BlueprintReadOnly, Parm, HasGetValueTypeHash)
};
static_assert(alignof(PAWN_Hacker_Implant_C_InpActEvt_Locked_Hotbar2_K2Node_InputActionEvent_15) == 0x000008, "Wrong alignment on PAWN_Hacker_Implant_C_InpActEvt_Locked_Hotbar2_K2Node_InputActionEvent_15");
static_assert(sizeof(PAWN_Hacker_Implant_C_InpActEvt_Locked_Hotbar2_K2Node_InputActionEvent_15) == 0x000018, "Wrong size on PAWN_Hacker_Implant_C_InpActEvt_Locked_Hotbar2_K2Node_InputActionEvent_15");
static_assert(offsetof(PAWN_Hacker_Implant_C_InpActEvt_Locked_Hotbar2_K2Node_InputActionEvent_15, Key) == 0x000000, "Member 'PAWN_Hacker_Implant_C_InpActEvt_Locked_Hotbar2_K2Node_InputActionEvent_15::Key' has a wrong offset!");

// Function PAWN_Hacker_Implant.PAWN_Hacker_Implant_C.InpActEvt_Locked_Hotbar1_K2Node_InputActionEvent_16
// 0x0018 (0x0018 - 0x0000)
struct PAWN_Hacker_Implant_C_InpActEvt_Locked_Hotbar1_K2Node_InputActionEvent_16 final
{
public:
	struct FKey                                   Key;                                               // 0x0000(0x0018)(BlueprintVisible, BlueprintReadOnly, Parm, HasGetValueTypeHash)
};
static_assert(alignof(PAWN_Hacker_Implant_C_InpActEvt_Locked_Hotbar1_K2Node_InputActionEvent_16) == 0x000008, "Wrong alignment on PAWN_Hacker_Implant_C_InpActEvt_Locked_Hotbar1_K2Node_InputActionEvent_16");
static_assert(sizeof(PAWN_Hacker_Implant_C_InpActEvt_Locked_Hotbar1_K2Node_InputActionEvent_16) == 0x000018, "Wrong size on PAWN_Hacker_Implant_C_InpActEvt_Locked_Hotbar1_K2Node_InputActionEvent_16");
static_assert(offsetof(PAWN_Hacker_Implant_C_InpActEvt_Locked_Hotbar1_K2Node_InputActionEvent_16, Key) == 0x000000, "Member 'PAWN_Hacker_Implant_C_InpActEvt_Locked_Hotbar1_K2Node_InputActionEvent_16::Key' has a wrong offset!");

// Function PAWN_Hacker_Implant.PAWN_Hacker_Implant_C.InpActEvt_Locked_Hotbar1_K2Node_InputActionEvent_17
// 0x0018 (0x0018 - 0x0000)
struct PAWN_Hacker_Implant_C_InpActEvt_Locked_Hotbar1_K2Node_InputActionEvent_17 final
{
public:
	struct FKey                                   Key;                                               // 0x0000(0x0018)(BlueprintVisible, BlueprintReadOnly, Parm, HasGetValueTypeHash)
};
static_assert(alignof(PAWN_Hacker_Implant_C_InpActEvt_Locked_Hotbar1_K2Node_InputActionEvent_17) == 0x000008, "Wrong alignment on PAWN_Hacker_Implant_C_InpActEvt_Locked_Hotbar1_K2Node_InputActionEvent_17");
static_assert(sizeof(PAWN_Hacker_Implant_C_InpActEvt_Locked_Hotbar1_K2Node_InputActionEvent_17) == 0x000018, "Wrong size on PAWN_Hacker_Implant_C_InpActEvt_Locked_Hotbar1_K2Node_InputActionEvent_17");
static_assert(offsetof(PAWN_Hacker_Implant_C_InpActEvt_Locked_Hotbar1_K2Node_InputActionEvent_17, Key) == 0x000000, "Member 'PAWN_Hacker_Implant_C_InpActEvt_Locked_Hotbar1_K2Node_InputActionEvent_17::Key' has a wrong offset!");

// Function PAWN_Hacker_Implant.PAWN_Hacker_Implant_C.InpActEvt_Locked_Hotbar0_K2Node_InputActionEvent_18
// 0x0018 (0x0018 - 0x0000)
struct PAWN_Hacker_Implant_C_InpActEvt_Locked_Hotbar0_K2Node_InputActionEvent_18 final
{
public:
	struct FKey                                   Key;                                               // 0x0000(0x0018)(BlueprintVisible, BlueprintReadOnly, Parm, HasGetValueTypeHash)
};
static_assert(alignof(PAWN_Hacker_Implant_C_InpActEvt_Locked_Hotbar0_K2Node_InputActionEvent_18) == 0x000008, "Wrong alignment on PAWN_Hacker_Implant_C_InpActEvt_Locked_Hotbar0_K2Node_InputActionEvent_18");
static_assert(sizeof(PAWN_Hacker_Implant_C_InpActEvt_Locked_Hotbar0_K2Node_InputActionEvent_18) == 0x000018, "Wrong size on PAWN_Hacker_Implant_C_InpActEvt_Locked_Hotbar0_K2Node_InputActionEvent_18");
static_assert(offsetof(PAWN_Hacker_Implant_C_InpActEvt_Locked_Hotbar0_K2Node_InputActionEvent_18, Key) == 0x000000, "Member 'PAWN_Hacker_Implant_C_InpActEvt_Locked_Hotbar0_K2Node_InputActionEvent_18::Key' has a wrong offset!");

// Function PAWN_Hacker_Implant.PAWN_Hacker_Implant_C.InpActEvt_Locked_Hotbar0_K2Node_InputActionEvent_19
// 0x0018 (0x0018 - 0x0000)
struct PAWN_Hacker_Implant_C_InpActEvt_Locked_Hotbar0_K2Node_InputActionEvent_19 final
{
public:
	struct FKey                                   Key;                                               // 0x0000(0x0018)(BlueprintVisible, BlueprintReadOnly, Parm, HasGetValueTypeHash)
};
static_assert(alignof(PAWN_Hacker_Implant_C_InpActEvt_Locked_Hotbar0_K2Node_InputActionEvent_19) == 0x000008, "Wrong alignment on PAWN_Hacker_Implant_C_InpActEvt_Locked_Hotbar0_K2Node_InputActionEvent_19");
static_assert(sizeof(PAWN_Hacker_Implant_C_InpActEvt_Locked_Hotbar0_K2Node_InputActionEvent_19) == 0x000018, "Wrong size on PAWN_Hacker_Implant_C_InpActEvt_Locked_Hotbar0_K2Node_InputActionEvent_19");
static_assert(offsetof(PAWN_Hacker_Implant_C_InpActEvt_Locked_Hotbar0_K2Node_InputActionEvent_19, Key) == 0x000000, "Member 'PAWN_Hacker_Implant_C_InpActEvt_Locked_Hotbar0_K2Node_InputActionEvent_19::Key' has a wrong offset!");

// Function PAWN_Hacker_Implant.PAWN_Hacker_Implant_C.InpActEvt_Locked_SimplifiedSelectConsumable_K2Node_InputActionEvent_20
// 0x0018 (0x0018 - 0x0000)
struct PAWN_Hacker_Implant_C_InpActEvt_Locked_SimplifiedSelectConsumable_K2Node_InputActionEvent_20 final
{
public:
	struct FKey                                   Key;                                               // 0x0000(0x0018)(BlueprintVisible, BlueprintReadOnly, Parm, HasGetValueTypeHash)
};
static_assert(alignof(PAWN_Hacker_Implant_C_InpActEvt_Locked_SimplifiedSelectConsumable_K2Node_InputActionEvent_20) == 0x000008, "Wrong alignment on PAWN_Hacker_Implant_C_InpActEvt_Locked_SimplifiedSelectConsumable_K2Node_InputActionEvent_20");
static_assert(sizeof(PAWN_Hacker_Implant_C_InpActEvt_Locked_SimplifiedSelectConsumable_K2Node_InputActionEvent_20) == 0x000018, "Wrong size on PAWN_Hacker_Implant_C_InpActEvt_Locked_SimplifiedSelectConsumable_K2Node_InputActionEvent_20");
static_assert(offsetof(PAWN_Hacker_Implant_C_InpActEvt_Locked_SimplifiedSelectConsumable_K2Node_InputActionEvent_20, Key) == 0x000000, "Member 'PAWN_Hacker_Implant_C_InpActEvt_Locked_SimplifiedSelectConsumable_K2Node_InputActionEvent_20::Key' has a wrong offset!");

// Function PAWN_Hacker_Implant.PAWN_Hacker_Implant_C.InpActEvt_Locked_SimplifiedSelectExplosive_K2Node_InputActionEvent_21
// 0x0018 (0x0018 - 0x0000)
struct PAWN_Hacker_Implant_C_InpActEvt_Locked_SimplifiedSelectExplosive_K2Node_InputActionEvent_21 final
{
public:
	struct FKey                                   Key;                                               // 0x0000(0x0018)(BlueprintVisible, BlueprintReadOnly, Parm, HasGetValueTypeHash)
};
static_assert(alignof(PAWN_Hacker_Implant_C_InpActEvt_Locked_SimplifiedSelectExplosive_K2Node_InputActionEvent_21) == 0x000008, "Wrong alignment on PAWN_Hacker_Implant_C_InpActEvt_Locked_SimplifiedSelectExplosive_K2Node_InputActionEvent_21");
static_assert(sizeof(PAWN_Hacker_Implant_C_InpActEvt_Locked_SimplifiedSelectExplosive_K2Node_InputActionEvent_21) == 0x000018, "Wrong size on PAWN_Hacker_Implant_C_InpActEvt_Locked_SimplifiedSelectExplosive_K2Node_InputActionEvent_21");
static_assert(offsetof(PAWN_Hacker_Implant_C_InpActEvt_Locked_SimplifiedSelectExplosive_K2Node_InputActionEvent_21, Key) == 0x000000, "Member 'PAWN_Hacker_Implant_C_InpActEvt_Locked_SimplifiedSelectExplosive_K2Node_InputActionEvent_21::Key' has a wrong offset!");

// Function PAWN_Hacker_Implant.PAWN_Hacker_Implant_C.InpActEvt_Locked_SimplifiedSelectHardware_K2Node_InputActionEvent_22
// 0x0018 (0x0018 - 0x0000)
struct PAWN_Hacker_Implant_C_InpActEvt_Locked_SimplifiedSelectHardware_K2Node_InputActionEvent_22 final
{
public:
	struct FKey                                   Key;                                               // 0x0000(0x0018)(BlueprintVisible, BlueprintReadOnly, Parm, HasGetValueTypeHash)
};
static_assert(alignof(PAWN_Hacker_Implant_C_InpActEvt_Locked_SimplifiedSelectHardware_K2Node_InputActionEvent_22) == 0x000008, "Wrong alignment on PAWN_Hacker_Implant_C_InpActEvt_Locked_SimplifiedSelectHardware_K2Node_InputActionEvent_22");
static_assert(sizeof(PAWN_Hacker_Implant_C_InpActEvt_Locked_SimplifiedSelectHardware_K2Node_InputActionEvent_22) == 0x000018, "Wrong size on PAWN_Hacker_Implant_C_InpActEvt_Locked_SimplifiedSelectHardware_K2Node_InputActionEvent_22");
static_assert(offsetof(PAWN_Hacker_Implant_C_InpActEvt_Locked_SimplifiedSelectHardware_K2Node_InputActionEvent_22, Key) == 0x000000, "Member 'PAWN_Hacker_Implant_C_InpActEvt_Locked_SimplifiedSelectHardware_K2Node_InputActionEvent_22::Key' has a wrong offset!");

// Function PAWN_Hacker_Implant.PAWN_Hacker_Implant_C.InpActEvt_Locked_SimplifiedSelectWeapon_K2Node_InputActionEvent_23
// 0x0018 (0x0018 - 0x0000)
struct PAWN_Hacker_Implant_C_InpActEvt_Locked_SimplifiedSelectWeapon_K2Node_InputActionEvent_23 final
{
public:
	struct FKey                                   Key;                                               // 0x0000(0x0018)(BlueprintVisible, BlueprintReadOnly, Parm, HasGetValueTypeHash)
};
static_assert(alignof(PAWN_Hacker_Implant_C_InpActEvt_Locked_SimplifiedSelectWeapon_K2Node_InputActionEvent_23) == 0x000008, "Wrong alignment on PAWN_Hacker_Implant_C_InpActEvt_Locked_SimplifiedSelectWeapon_K2Node_InputActionEvent_23");
static_assert(sizeof(PAWN_Hacker_Implant_C_InpActEvt_Locked_SimplifiedSelectWeapon_K2Node_InputActionEvent_23) == 0x000018, "Wrong size on PAWN_Hacker_Implant_C_InpActEvt_Locked_SimplifiedSelectWeapon_K2Node_InputActionEvent_23");
static_assert(offsetof(PAWN_Hacker_Implant_C_InpActEvt_Locked_SimplifiedSelectWeapon_K2Node_InputActionEvent_23, Key) == 0x000000, "Member 'PAWN_Hacker_Implant_C_InpActEvt_Locked_SimplifiedSelectWeapon_K2Node_InputActionEvent_23::Key' has a wrong offset!");

// Function PAWN_Hacker_Implant.PAWN_Hacker_Implant_C.InpActEvt_Locked_SimplifiedHotbar1_K2Node_InputActionEvent_24
// 0x0018 (0x0018 - 0x0000)
struct PAWN_Hacker_Implant_C_InpActEvt_Locked_SimplifiedHotbar1_K2Node_InputActionEvent_24 final
{
public:
	struct FKey                                   Key;                                               // 0x0000(0x0018)(BlueprintVisible, BlueprintReadOnly, Parm, HasGetValueTypeHash)
};
static_assert(alignof(PAWN_Hacker_Implant_C_InpActEvt_Locked_SimplifiedHotbar1_K2Node_InputActionEvent_24) == 0x000008, "Wrong alignment on PAWN_Hacker_Implant_C_InpActEvt_Locked_SimplifiedHotbar1_K2Node_InputActionEvent_24");
static_assert(sizeof(PAWN_Hacker_Implant_C_InpActEvt_Locked_SimplifiedHotbar1_K2Node_InputActionEvent_24) == 0x000018, "Wrong size on PAWN_Hacker_Implant_C_InpActEvt_Locked_SimplifiedHotbar1_K2Node_InputActionEvent_24");
static_assert(offsetof(PAWN_Hacker_Implant_C_InpActEvt_Locked_SimplifiedHotbar1_K2Node_InputActionEvent_24, Key) == 0x000000, "Member 'PAWN_Hacker_Implant_C_InpActEvt_Locked_SimplifiedHotbar1_K2Node_InputActionEvent_24::Key' has a wrong offset!");

// Function PAWN_Hacker_Implant.PAWN_Hacker_Implant_C.InpActEvt_Locked_SimplifiedHotbar2_K2Node_InputActionEvent_25
// 0x0018 (0x0018 - 0x0000)
struct PAWN_Hacker_Implant_C_InpActEvt_Locked_SimplifiedHotbar2_K2Node_InputActionEvent_25 final
{
public:
	struct FKey                                   Key;                                               // 0x0000(0x0018)(BlueprintVisible, BlueprintReadOnly, Parm, HasGetValueTypeHash)
};
static_assert(alignof(PAWN_Hacker_Implant_C_InpActEvt_Locked_SimplifiedHotbar2_K2Node_InputActionEvent_25) == 0x000008, "Wrong alignment on PAWN_Hacker_Implant_C_InpActEvt_Locked_SimplifiedHotbar2_K2Node_InputActionEvent_25");
static_assert(sizeof(PAWN_Hacker_Implant_C_InpActEvt_Locked_SimplifiedHotbar2_K2Node_InputActionEvent_25) == 0x000018, "Wrong size on PAWN_Hacker_Implant_C_InpActEvt_Locked_SimplifiedHotbar2_K2Node_InputActionEvent_25");
static_assert(offsetof(PAWN_Hacker_Implant_C_InpActEvt_Locked_SimplifiedHotbar2_K2Node_InputActionEvent_25, Key) == 0x000000, "Member 'PAWN_Hacker_Implant_C_InpActEvt_Locked_SimplifiedHotbar2_K2Node_InputActionEvent_25::Key' has a wrong offset!");

// Function PAWN_Hacker_Implant.PAWN_Hacker_Implant_C.InpActEvt_Locked_SimplifiedHotbar3_K2Node_InputActionEvent_26
// 0x0018 (0x0018 - 0x0000)
struct PAWN_Hacker_Implant_C_InpActEvt_Locked_SimplifiedHotbar3_K2Node_InputActionEvent_26 final
{
public:
	struct FKey                                   Key;                                               // 0x0000(0x0018)(BlueprintVisible, BlueprintReadOnly, Parm, HasGetValueTypeHash)
};
static_assert(alignof(PAWN_Hacker_Implant_C_InpActEvt_Locked_SimplifiedHotbar3_K2Node_InputActionEvent_26) == 0x000008, "Wrong alignment on PAWN_Hacker_Implant_C_InpActEvt_Locked_SimplifiedHotbar3_K2Node_InputActionEvent_26");
static_assert(sizeof(PAWN_Hacker_Implant_C_InpActEvt_Locked_SimplifiedHotbar3_K2Node_InputActionEvent_26) == 0x000018, "Wrong size on PAWN_Hacker_Implant_C_InpActEvt_Locked_SimplifiedHotbar3_K2Node_InputActionEvent_26");
static_assert(offsetof(PAWN_Hacker_Implant_C_InpActEvt_Locked_SimplifiedHotbar3_K2Node_InputActionEvent_26, Key) == 0x000000, "Member 'PAWN_Hacker_Implant_C_InpActEvt_Locked_SimplifiedHotbar3_K2Node_InputActionEvent_26::Key' has a wrong offset!");

// Function PAWN_Hacker_Implant.PAWN_Hacker_Implant_C.InpActEvt_Gamepad_Real_UseConsumable_K2Node_InputActionEvent_27
// 0x0018 (0x0018 - 0x0000)
struct PAWN_Hacker_Implant_C_InpActEvt_Gamepad_Real_UseConsumable_K2Node_InputActionEvent_27 final
{
public:
	struct FKey                                   Key;                                               // 0x0000(0x0018)(BlueprintVisible, BlueprintReadOnly, Parm, HasGetValueTypeHash)
};
static_assert(alignof(PAWN_Hacker_Implant_C_InpActEvt_Gamepad_Real_UseConsumable_K2Node_InputActionEvent_27) == 0x000008, "Wrong alignment on PAWN_Hacker_Implant_C_InpActEvt_Gamepad_Real_UseConsumable_K2Node_InputActionEvent_27");
static_assert(sizeof(PAWN_Hacker_Implant_C_InpActEvt_Gamepad_Real_UseConsumable_K2Node_InputActionEvent_27) == 0x000018, "Wrong size on PAWN_Hacker_Implant_C_InpActEvt_Gamepad_Real_UseConsumable_K2Node_InputActionEvent_27");
static_assert(offsetof(PAWN_Hacker_Implant_C_InpActEvt_Gamepad_Real_UseConsumable_K2Node_InputActionEvent_27, Key) == 0x000000, "Member 'PAWN_Hacker_Implant_C_InpActEvt_Gamepad_Real_UseConsumable_K2Node_InputActionEvent_27::Key' has a wrong offset!");

// Function PAWN_Hacker_Implant.PAWN_Hacker_Implant_C.InpActEvt_Gamepad_Real_UseExplosive_K2Node_InputActionEvent_28
// 0x0018 (0x0018 - 0x0000)
struct PAWN_Hacker_Implant_C_InpActEvt_Gamepad_Real_UseExplosive_K2Node_InputActionEvent_28 final
{
public:
	struct FKey                                   Key;                                               // 0x0000(0x0018)(BlueprintVisible, BlueprintReadOnly, Parm, HasGetValueTypeHash)
};
static_assert(alignof(PAWN_Hacker_Implant_C_InpActEvt_Gamepad_Real_UseExplosive_K2Node_InputActionEvent_28) == 0x000008, "Wrong alignment on PAWN_Hacker_Implant_C_InpActEvt_Gamepad_Real_UseExplosive_K2Node_InputActionEvent_28");
static_assert(sizeof(PAWN_Hacker_Implant_C_InpActEvt_Gamepad_Real_UseExplosive_K2Node_InputActionEvent_28) == 0x000018, "Wrong size on PAWN_Hacker_Implant_C_InpActEvt_Gamepad_Real_UseExplosive_K2Node_InputActionEvent_28");
static_assert(offsetof(PAWN_Hacker_Implant_C_InpActEvt_Gamepad_Real_UseExplosive_K2Node_InputActionEvent_28, Key) == 0x000000, "Member 'PAWN_Hacker_Implant_C_InpActEvt_Gamepad_Real_UseExplosive_K2Node_InputActionEvent_28::Key' has a wrong offset!");

// Function PAWN_Hacker_Implant.PAWN_Hacker_Implant_C.InpActEvt_Real_AcquireTarget_K2Node_InputActionEvent_29
// 0x0018 (0x0018 - 0x0000)
struct PAWN_Hacker_Implant_C_InpActEvt_Real_AcquireTarget_K2Node_InputActionEvent_29 final
{
public:
	struct FKey                                   Key;                                               // 0x0000(0x0018)(BlueprintVisible, BlueprintReadOnly, Parm, HasGetValueTypeHash)
};
static_assert(alignof(PAWN_Hacker_Implant_C_InpActEvt_Real_AcquireTarget_K2Node_InputActionEvent_29) == 0x000008, "Wrong alignment on PAWN_Hacker_Implant_C_InpActEvt_Real_AcquireTarget_K2Node_InputActionEvent_29");
static_assert(sizeof(PAWN_Hacker_Implant_C_InpActEvt_Real_AcquireTarget_K2Node_InputActionEvent_29) == 0x000018, "Wrong size on PAWN_Hacker_Implant_C_InpActEvt_Real_AcquireTarget_K2Node_InputActionEvent_29");
static_assert(offsetof(PAWN_Hacker_Implant_C_InpActEvt_Real_AcquireTarget_K2Node_InputActionEvent_29, Key) == 0x000000, "Member 'PAWN_Hacker_Implant_C_InpActEvt_Real_AcquireTarget_K2Node_InputActionEvent_29::Key' has a wrong offset!");

// Function PAWN_Hacker_Implant.PAWN_Hacker_Implant_C.InpActEvt_Real_AcquireTarget_K2Node_InputActionEvent_30
// 0x0018 (0x0018 - 0x0000)
struct PAWN_Hacker_Implant_C_InpActEvt_Real_AcquireTarget_K2Node_InputActionEvent_30 final
{
public:
	struct FKey                                   Key;                                               // 0x0000(0x0018)(BlueprintVisible, BlueprintReadOnly, Parm, HasGetValueTypeHash)
};
static_assert(alignof(PAWN_Hacker_Implant_C_InpActEvt_Real_AcquireTarget_K2Node_InputActionEvent_30) == 0x000008, "Wrong alignment on PAWN_Hacker_Implant_C_InpActEvt_Real_AcquireTarget_K2Node_InputActionEvent_30");
static_assert(sizeof(PAWN_Hacker_Implant_C_InpActEvt_Real_AcquireTarget_K2Node_InputActionEvent_30) == 0x000018, "Wrong size on PAWN_Hacker_Implant_C_InpActEvt_Real_AcquireTarget_K2Node_InputActionEvent_30");
static_assert(offsetof(PAWN_Hacker_Implant_C_InpActEvt_Real_AcquireTarget_K2Node_InputActionEvent_30, Key) == 0x000000, "Member 'PAWN_Hacker_Implant_C_InpActEvt_Real_AcquireTarget_K2Node_InputActionEvent_30::Key' has a wrong offset!");

// Function PAWN_Hacker_Implant.PAWN_Hacker_Implant_C.InpActEvt_Gamepad_Real_AcquireTarget_K2Node_InputActionEvent_31
// 0x0018 (0x0018 - 0x0000)
struct PAWN_Hacker_Implant_C_InpActEvt_Gamepad_Real_AcquireTarget_K2Node_InputActionEvent_31 final
{
public:
	struct FKey                                   Key;                                               // 0x0000(0x0018)(BlueprintVisible, BlueprintReadOnly, Parm, HasGetValueTypeHash)
};
static_assert(alignof(PAWN_Hacker_Implant_C_InpActEvt_Gamepad_Real_AcquireTarget_K2Node_InputActionEvent_31) == 0x000008, "Wrong alignment on PAWN_Hacker_Implant_C_InpActEvt_Gamepad_Real_AcquireTarget_K2Node_InputActionEvent_31");
static_assert(sizeof(PAWN_Hacker_Implant_C_InpActEvt_Gamepad_Real_AcquireTarget_K2Node_InputActionEvent_31) == 0x000018, "Wrong size on PAWN_Hacker_Implant_C_InpActEvt_Gamepad_Real_AcquireTarget_K2Node_InputActionEvent_31");
static_assert(offsetof(PAWN_Hacker_Implant_C_InpActEvt_Gamepad_Real_AcquireTarget_K2Node_InputActionEvent_31, Key) == 0x000000, "Member 'PAWN_Hacker_Implant_C_InpActEvt_Gamepad_Real_AcquireTarget_K2Node_InputActionEvent_31::Key' has a wrong offset!");

// Function PAWN_Hacker_Implant.PAWN_Hacker_Implant_C.InpActEvt_Gamepad_Real_AcquireTarget_K2Node_InputActionEvent_32
// 0x0018 (0x0018 - 0x0000)
struct PAWN_Hacker_Implant_C_InpActEvt_Gamepad_Real_AcquireTarget_K2Node_InputActionEvent_32 final
{
public:
	struct FKey                                   Key;                                               // 0x0000(0x0018)(BlueprintVisible, BlueprintReadOnly, Parm, HasGetValueTypeHash)
};
static_assert(alignof(PAWN_Hacker_Implant_C_InpActEvt_Gamepad_Real_AcquireTarget_K2Node_InputActionEvent_32) == 0x000008, "Wrong alignment on PAWN_Hacker_Implant_C_InpActEvt_Gamepad_Real_AcquireTarget_K2Node_InputActionEvent_32");
static_assert(sizeof(PAWN_Hacker_Implant_C_InpActEvt_Gamepad_Real_AcquireTarget_K2Node_InputActionEvent_32) == 0x000018, "Wrong size on PAWN_Hacker_Implant_C_InpActEvt_Gamepad_Real_AcquireTarget_K2Node_InputActionEvent_32");
static_assert(offsetof(PAWN_Hacker_Implant_C_InpActEvt_Gamepad_Real_AcquireTarget_K2Node_InputActionEvent_32, Key) == 0x000000, "Member 'PAWN_Hacker_Implant_C_InpActEvt_Gamepad_Real_AcquireTarget_K2Node_InputActionEvent_32::Key' has a wrong offset!");

// Function PAWN_Hacker_Implant.PAWN_Hacker_Implant_C.InpActEvt_Real_HardwareLantern_K2Node_InputActionEvent_33
// 0x0018 (0x0018 - 0x0000)
struct PAWN_Hacker_Implant_C_InpActEvt_Real_HardwareLantern_K2Node_InputActionEvent_33 final
{
public:
	struct FKey                                   Key;                                               // 0x0000(0x0018)(BlueprintVisible, BlueprintReadOnly, Parm, HasGetValueTypeHash)
};
static_assert(alignof(PAWN_Hacker_Implant_C_InpActEvt_Real_HardwareLantern_K2Node_InputActionEvent_33) == 0x000008, "Wrong alignment on PAWN_Hacker_Implant_C_InpActEvt_Real_HardwareLantern_K2Node_InputActionEvent_33");
static_assert(sizeof(PAWN_Hacker_Implant_C_InpActEvt_Real_HardwareLantern_K2Node_InputActionEvent_33) == 0x000018, "Wrong size on PAWN_Hacker_Implant_C_InpActEvt_Real_HardwareLantern_K2Node_InputActionEvent_33");
static_assert(offsetof(PAWN_Hacker_Implant_C_InpActEvt_Real_HardwareLantern_K2Node_InputActionEvent_33, Key) == 0x000000, "Member 'PAWN_Hacker_Implant_C_InpActEvt_Real_HardwareLantern_K2Node_InputActionEvent_33::Key' has a wrong offset!");

// Function PAWN_Hacker_Implant.PAWN_Hacker_Implant_C.InpActEvt_Real_Accept_K2Node_InputActionEvent_34
// 0x0018 (0x0018 - 0x0000)
struct PAWN_Hacker_Implant_C_InpActEvt_Real_Accept_K2Node_InputActionEvent_34 final
{
public:
	struct FKey                                   Key;                                               // 0x0000(0x0018)(BlueprintVisible, BlueprintReadOnly, Parm, HasGetValueTypeHash)
};
static_assert(alignof(PAWN_Hacker_Implant_C_InpActEvt_Real_Accept_K2Node_InputActionEvent_34) == 0x000008, "Wrong alignment on PAWN_Hacker_Implant_C_InpActEvt_Real_Accept_K2Node_InputActionEvent_34");
static_assert(sizeof(PAWN_Hacker_Implant_C_InpActEvt_Real_Accept_K2Node_InputActionEvent_34) == 0x000018, "Wrong size on PAWN_Hacker_Implant_C_InpActEvt_Real_Accept_K2Node_InputActionEvent_34");
static_assert(offsetof(PAWN_Hacker_Implant_C_InpActEvt_Real_Accept_K2Node_InputActionEvent_34, Key) == 0x000000, "Member 'PAWN_Hacker_Implant_C_InpActEvt_Real_Accept_K2Node_InputActionEvent_34::Key' has a wrong offset!");

// Function PAWN_Hacker_Implant.PAWN_Hacker_Implant_C.InpActEvt_Real_Accept_K2Node_InputActionEvent_35
// 0x0018 (0x0018 - 0x0000)
struct PAWN_Hacker_Implant_C_InpActEvt_Real_Accept_K2Node_InputActionEvent_35 final
{
public:
	struct FKey                                   Key;                                               // 0x0000(0x0018)(BlueprintVisible, BlueprintReadOnly, Parm, HasGetValueTypeHash)
};
static_assert(alignof(PAWN_Hacker_Implant_C_InpActEvt_Real_Accept_K2Node_InputActionEvent_35) == 0x000008, "Wrong alignment on PAWN_Hacker_Implant_C_InpActEvt_Real_Accept_K2Node_InputActionEvent_35");
static_assert(sizeof(PAWN_Hacker_Implant_C_InpActEvt_Real_Accept_K2Node_InputActionEvent_35) == 0x000018, "Wrong size on PAWN_Hacker_Implant_C_InpActEvt_Real_Accept_K2Node_InputActionEvent_35");
static_assert(offsetof(PAWN_Hacker_Implant_C_InpActEvt_Real_Accept_K2Node_InputActionEvent_35, Key) == 0x000000, "Member 'PAWN_Hacker_Implant_C_InpActEvt_Real_Accept_K2Node_InputActionEvent_35::Key' has a wrong offset!");

// Function PAWN_Hacker_Implant.PAWN_Hacker_Implant_C.InpActEvt_Gamepad_Real_ToggleMFD_K2Node_InputActionEvent_36
// 0x0018 (0x0018 - 0x0000)
struct PAWN_Hacker_Implant_C_InpActEvt_Gamepad_Real_ToggleMFD_K2Node_InputActionEvent_36 final
{
public:
	struct FKey                                   Key;                                               // 0x0000(0x0018)(BlueprintVisible, BlueprintReadOnly, Parm, HasGetValueTypeHash)
};
static_assert(alignof(PAWN_Hacker_Implant_C_InpActEvt_Gamepad_Real_ToggleMFD_K2Node_InputActionEvent_36) == 0x000008, "Wrong alignment on PAWN_Hacker_Implant_C_InpActEvt_Gamepad_Real_ToggleMFD_K2Node_InputActionEvent_36");
static_assert(sizeof(PAWN_Hacker_Implant_C_InpActEvt_Gamepad_Real_ToggleMFD_K2Node_InputActionEvent_36) == 0x000018, "Wrong size on PAWN_Hacker_Implant_C_InpActEvt_Gamepad_Real_ToggleMFD_K2Node_InputActionEvent_36");
static_assert(offsetof(PAWN_Hacker_Implant_C_InpActEvt_Gamepad_Real_ToggleMFD_K2Node_InputActionEvent_36, Key) == 0x000000, "Member 'PAWN_Hacker_Implant_C_InpActEvt_Gamepad_Real_ToggleMFD_K2Node_InputActionEvent_36::Key' has a wrong offset!");

// Function PAWN_Hacker_Implant.PAWN_Hacker_Implant_C.InpActEvt_Real_ToggleMFD_K2Node_InputActionEvent_37
// 0x0018 (0x0018 - 0x0000)
struct PAWN_Hacker_Implant_C_InpActEvt_Real_ToggleMFD_K2Node_InputActionEvent_37 final
{
public:
	struct FKey                                   Key;                                               // 0x0000(0x0018)(BlueprintVisible, BlueprintReadOnly, Parm, HasGetValueTypeHash)
};
static_assert(alignof(PAWN_Hacker_Implant_C_InpActEvt_Real_ToggleMFD_K2Node_InputActionEvent_37) == 0x000008, "Wrong alignment on PAWN_Hacker_Implant_C_InpActEvt_Real_ToggleMFD_K2Node_InputActionEvent_37");
static_assert(sizeof(PAWN_Hacker_Implant_C_InpActEvt_Real_ToggleMFD_K2Node_InputActionEvent_37) == 0x000018, "Wrong size on PAWN_Hacker_Implant_C_InpActEvt_Real_ToggleMFD_K2Node_InputActionEvent_37");
static_assert(offsetof(PAWN_Hacker_Implant_C_InpActEvt_Real_ToggleMFD_K2Node_InputActionEvent_37, Key) == 0x000000, "Member 'PAWN_Hacker_Implant_C_InpActEvt_Real_ToggleMFD_K2Node_InputActionEvent_37::Key' has a wrong offset!");

// Function PAWN_Hacker_Implant.PAWN_Hacker_Implant_C.InpActEvt_Real_ToggleInventory_K2Node_InputActionEvent_38
// 0x0018 (0x0018 - 0x0000)
struct PAWN_Hacker_Implant_C_InpActEvt_Real_ToggleInventory_K2Node_InputActionEvent_38 final
{
public:
	struct FKey                                   Key;                                               // 0x0000(0x0018)(BlueprintVisible, BlueprintReadOnly, Parm, HasGetValueTypeHash)
};
static_assert(alignof(PAWN_Hacker_Implant_C_InpActEvt_Real_ToggleInventory_K2Node_InputActionEvent_38) == 0x000008, "Wrong alignment on PAWN_Hacker_Implant_C_InpActEvt_Real_ToggleInventory_K2Node_InputActionEvent_38");
static_assert(sizeof(PAWN_Hacker_Implant_C_InpActEvt_Real_ToggleInventory_K2Node_InputActionEvent_38) == 0x000018, "Wrong size on PAWN_Hacker_Implant_C_InpActEvt_Real_ToggleInventory_K2Node_InputActionEvent_38");
static_assert(offsetof(PAWN_Hacker_Implant_C_InpActEvt_Real_ToggleInventory_K2Node_InputActionEvent_38, Key) == 0x000000, "Member 'PAWN_Hacker_Implant_C_InpActEvt_Real_ToggleInventory_K2Node_InputActionEvent_38::Key' has a wrong offset!");

// Function PAWN_Hacker_Implant.PAWN_Hacker_Implant_C.InpActEvt_Real_ToggleMap_K2Node_InputActionEvent_39
// 0x0018 (0x0018 - 0x0000)
struct PAWN_Hacker_Implant_C_InpActEvt_Real_ToggleMap_K2Node_InputActionEvent_39 final
{
public:
	struct FKey                                   Key;                                               // 0x0000(0x0018)(BlueprintVisible, BlueprintReadOnly, Parm, HasGetValueTypeHash)
};
static_assert(alignof(PAWN_Hacker_Implant_C_InpActEvt_Real_ToggleMap_K2Node_InputActionEvent_39) == 0x000008, "Wrong alignment on PAWN_Hacker_Implant_C_InpActEvt_Real_ToggleMap_K2Node_InputActionEvent_39");
static_assert(sizeof(PAWN_Hacker_Implant_C_InpActEvt_Real_ToggleMap_K2Node_InputActionEvent_39) == 0x000018, "Wrong size on PAWN_Hacker_Implant_C_InpActEvt_Real_ToggleMap_K2Node_InputActionEvent_39");
static_assert(offsetof(PAWN_Hacker_Implant_C_InpActEvt_Real_ToggleMap_K2Node_InputActionEvent_39, Key) == 0x000000, "Member 'PAWN_Hacker_Implant_C_InpActEvt_Real_ToggleMap_K2Node_InputActionEvent_39::Key' has a wrong offset!");

// Function PAWN_Hacker_Implant.PAWN_Hacker_Implant_C.InpActEvt_Real_HardwareSensaround_K2Node_InputActionEvent_40
// 0x0018 (0x0018 - 0x0000)
struct PAWN_Hacker_Implant_C_InpActEvt_Real_HardwareSensaround_K2Node_InputActionEvent_40 final
{
public:
	struct FKey                                   Key;                                               // 0x0000(0x0018)(BlueprintVisible, BlueprintReadOnly, Parm, HasGetValueTypeHash)
};
static_assert(alignof(PAWN_Hacker_Implant_C_InpActEvt_Real_HardwareSensaround_K2Node_InputActionEvent_40) == 0x000008, "Wrong alignment on PAWN_Hacker_Implant_C_InpActEvt_Real_HardwareSensaround_K2Node_InputActionEvent_40");
static_assert(sizeof(PAWN_Hacker_Implant_C_InpActEvt_Real_HardwareSensaround_K2Node_InputActionEvent_40) == 0x000018, "Wrong size on PAWN_Hacker_Implant_C_InpActEvt_Real_HardwareSensaround_K2Node_InputActionEvent_40");
static_assert(offsetof(PAWN_Hacker_Implant_C_InpActEvt_Real_HardwareSensaround_K2Node_InputActionEvent_40, Key) == 0x000000, "Member 'PAWN_Hacker_Implant_C_InpActEvt_Real_HardwareSensaround_K2Node_InputActionEvent_40::Key' has a wrong offset!");

// Function PAWN_Hacker_Implant.PAWN_Hacker_Implant_C.InpActEvt_Real_HardwareTargetID_K2Node_InputActionEvent_41
// 0x0018 (0x0018 - 0x0000)
struct PAWN_Hacker_Implant_C_InpActEvt_Real_HardwareTargetID_K2Node_InputActionEvent_41 final
{
public:
	struct FKey                                   Key;                                               // 0x0000(0x0018)(BlueprintVisible, BlueprintReadOnly, Parm, HasGetValueTypeHash)
};
static_assert(alignof(PAWN_Hacker_Implant_C_InpActEvt_Real_HardwareTargetID_K2Node_InputActionEvent_41) == 0x000008, "Wrong alignment on PAWN_Hacker_Implant_C_InpActEvt_Real_HardwareTargetID_K2Node_InputActionEvent_41");
static_assert(sizeof(PAWN_Hacker_Implant_C_InpActEvt_Real_HardwareTargetID_K2Node_InputActionEvent_41) == 0x000018, "Wrong size on PAWN_Hacker_Implant_C_InpActEvt_Real_HardwareTargetID_K2Node_InputActionEvent_41");
static_assert(offsetof(PAWN_Hacker_Implant_C_InpActEvt_Real_HardwareTargetID_K2Node_InputActionEvent_41, Key) == 0x000000, "Member 'PAWN_Hacker_Implant_C_InpActEvt_Real_HardwareTargetID_K2Node_InputActionEvent_41::Key' has a wrong offset!");

// Function PAWN_Hacker_Implant.PAWN_Hacker_Implant_C.InpActEvt_Real_HardwareShield_K2Node_InputActionEvent_42
// 0x0018 (0x0018 - 0x0000)
struct PAWN_Hacker_Implant_C_InpActEvt_Real_HardwareShield_K2Node_InputActionEvent_42 final
{
public:
	struct FKey                                   Key;                                               // 0x0000(0x0018)(BlueprintVisible, BlueprintReadOnly, Parm, HasGetValueTypeHash)
};
static_assert(alignof(PAWN_Hacker_Implant_C_InpActEvt_Real_HardwareShield_K2Node_InputActionEvent_42) == 0x000008, "Wrong alignment on PAWN_Hacker_Implant_C_InpActEvt_Real_HardwareShield_K2Node_InputActionEvent_42");
static_assert(sizeof(PAWN_Hacker_Implant_C_InpActEvt_Real_HardwareShield_K2Node_InputActionEvent_42) == 0x000018, "Wrong size on PAWN_Hacker_Implant_C_InpActEvt_Real_HardwareShield_K2Node_InputActionEvent_42");
static_assert(offsetof(PAWN_Hacker_Implant_C_InpActEvt_Real_HardwareShield_K2Node_InputActionEvent_42, Key) == 0x000000, "Member 'PAWN_Hacker_Implant_C_InpActEvt_Real_HardwareShield_K2Node_InputActionEvent_42::Key' has a wrong offset!");

// Function PAWN_Hacker_Implant.PAWN_Hacker_Implant_C.InpActEvt_Real_HardwareNavUnit_K2Node_InputActionEvent_43
// 0x0018 (0x0018 - 0x0000)
struct PAWN_Hacker_Implant_C_InpActEvt_Real_HardwareNavUnit_K2Node_InputActionEvent_43 final
{
public:
	struct FKey                                   Key;                                               // 0x0000(0x0018)(BlueprintVisible, BlueprintReadOnly, Parm, HasGetValueTypeHash)
};
static_assert(alignof(PAWN_Hacker_Implant_C_InpActEvt_Real_HardwareNavUnit_K2Node_InputActionEvent_43) == 0x000008, "Wrong alignment on PAWN_Hacker_Implant_C_InpActEvt_Real_HardwareNavUnit_K2Node_InputActionEvent_43");
static_assert(sizeof(PAWN_Hacker_Implant_C_InpActEvt_Real_HardwareNavUnit_K2Node_InputActionEvent_43) == 0x000018, "Wrong size on PAWN_Hacker_Implant_C_InpActEvt_Real_HardwareNavUnit_K2Node_InputActionEvent_43");
static_assert(offsetof(PAWN_Hacker_Implant_C_InpActEvt_Real_HardwareNavUnit_K2Node_InputActionEvent_43, Key) == 0x000000, "Member 'PAWN_Hacker_Implant_C_InpActEvt_Real_HardwareNavUnit_K2Node_InputActionEvent_43::Key' has a wrong offset!");

// Function PAWN_Hacker_Implant.PAWN_Hacker_Implant_C.InpActEvt_Real_HardwareEnviropack_K2Node_InputActionEvent_44
// 0x0018 (0x0018 - 0x0000)
struct PAWN_Hacker_Implant_C_InpActEvt_Real_HardwareEnviropack_K2Node_InputActionEvent_44 final
{
public:
	struct FKey                                   Key;                                               // 0x0000(0x0018)(BlueprintVisible, BlueprintReadOnly, Parm, HasGetValueTypeHash)
};
static_assert(alignof(PAWN_Hacker_Implant_C_InpActEvt_Real_HardwareEnviropack_K2Node_InputActionEvent_44) == 0x000008, "Wrong alignment on PAWN_Hacker_Implant_C_InpActEvt_Real_HardwareEnviropack_K2Node_InputActionEvent_44");
static_assert(sizeof(PAWN_Hacker_Implant_C_InpActEvt_Real_HardwareEnviropack_K2Node_InputActionEvent_44) == 0x000018, "Wrong size on PAWN_Hacker_Implant_C_InpActEvt_Real_HardwareEnviropack_K2Node_InputActionEvent_44");
static_assert(offsetof(PAWN_Hacker_Implant_C_InpActEvt_Real_HardwareEnviropack_K2Node_InputActionEvent_44, Key) == 0x000000, "Member 'PAWN_Hacker_Implant_C_InpActEvt_Real_HardwareEnviropack_K2Node_InputActionEvent_44::Key' has a wrong offset!");

// Function PAWN_Hacker_Implant.PAWN_Hacker_Implant_C.InpActEvt_Real_HardwareBoots_K2Node_InputActionEvent_45
// 0x0018 (0x0018 - 0x0000)
struct PAWN_Hacker_Implant_C_InpActEvt_Real_HardwareBoots_K2Node_InputActionEvent_45 final
{
public:
	struct FKey                                   Key;                                               // 0x0000(0x0018)(BlueprintVisible, BlueprintReadOnly, Parm, HasGetValueTypeHash)
};
static_assert(alignof(PAWN_Hacker_Implant_C_InpActEvt_Real_HardwareBoots_K2Node_InputActionEvent_45) == 0x000008, "Wrong alignment on PAWN_Hacker_Implant_C_InpActEvt_Real_HardwareBoots_K2Node_InputActionEvent_45");
static_assert(sizeof(PAWN_Hacker_Implant_C_InpActEvt_Real_HardwareBoots_K2Node_InputActionEvent_45) == 0x000018, "Wrong size on PAWN_Hacker_Implant_C_InpActEvt_Real_HardwareBoots_K2Node_InputActionEvent_45");
static_assert(offsetof(PAWN_Hacker_Implant_C_InpActEvt_Real_HardwareBoots_K2Node_InputActionEvent_45, Key) == 0x000000, "Member 'PAWN_Hacker_Implant_C_InpActEvt_Real_HardwareBoots_K2Node_InputActionEvent_45::Key' has a wrong offset!");

// Function PAWN_Hacker_Implant.PAWN_Hacker_Implant_C.InpActEvt_Real_HardwareBioScan_K2Node_InputActionEvent_46
// 0x0018 (0x0018 - 0x0000)
struct PAWN_Hacker_Implant_C_InpActEvt_Real_HardwareBioScan_K2Node_InputActionEvent_46 final
{
public:
	struct FKey                                   Key;                                               // 0x0000(0x0018)(BlueprintVisible, BlueprintReadOnly, Parm, HasGetValueTypeHash)
};
static_assert(alignof(PAWN_Hacker_Implant_C_InpActEvt_Real_HardwareBioScan_K2Node_InputActionEvent_46) == 0x000008, "Wrong alignment on PAWN_Hacker_Implant_C_InpActEvt_Real_HardwareBioScan_K2Node_InputActionEvent_46");
static_assert(sizeof(PAWN_Hacker_Implant_C_InpActEvt_Real_HardwareBioScan_K2Node_InputActionEvent_46) == 0x000018, "Wrong size on PAWN_Hacker_Implant_C_InpActEvt_Real_HardwareBioScan_K2Node_InputActionEvent_46");
static_assert(offsetof(PAWN_Hacker_Implant_C_InpActEvt_Real_HardwareBioScan_K2Node_InputActionEvent_46, Key) == 0x000000, "Member 'PAWN_Hacker_Implant_C_InpActEvt_Real_HardwareBioScan_K2Node_InputActionEvent_46::Key' has a wrong offset!");

// Function PAWN_Hacker_Implant.PAWN_Hacker_Implant_C.IsMultiFunctionDisplayVisible
// 0x0010 (0x0010 - 0x0000)
struct PAWN_Hacker_Implant_C_IsMultiFunctionDisplayVisible final
{
public:
	bool                                          Result;                                            // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UWIDGET_PlayerHUD_C*                    CallFunc_GetNeuralHUD_Result;                      // 0x0008(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(PAWN_Hacker_Implant_C_IsMultiFunctionDisplayVisible) == 0x000008, "Wrong alignment on PAWN_Hacker_Implant_C_IsMultiFunctionDisplayVisible");
static_assert(sizeof(PAWN_Hacker_Implant_C_IsMultiFunctionDisplayVisible) == 0x000010, "Wrong size on PAWN_Hacker_Implant_C_IsMultiFunctionDisplayVisible");
static_assert(offsetof(PAWN_Hacker_Implant_C_IsMultiFunctionDisplayVisible, Result) == 0x000000, "Member 'PAWN_Hacker_Implant_C_IsMultiFunctionDisplayVisible::Result' has a wrong offset!");
static_assert(offsetof(PAWN_Hacker_Implant_C_IsMultiFunctionDisplayVisible, CallFunc_GetNeuralHUD_Result) == 0x000008, "Member 'PAWN_Hacker_Implant_C_IsMultiFunctionDisplayVisible::CallFunc_GetNeuralHUD_Result' has a wrong offset!");

// Function PAWN_Hacker_Implant.PAWN_Hacker_Implant_C.GetNeuralHUD
// 0x0018 (0x0018 - 0x0000)
struct PAWN_Hacker_Implant_C_GetNeuralHUD final
{
public:
	class UWIDGET_PlayerHUD_C*                    Result;                                            // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UWIDGET_PlayerHUD_C*                    K2Node_DynamicCast_AsWIDGET_Player_HUD;            // 0x0008(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0010(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(PAWN_Hacker_Implant_C_GetNeuralHUD) == 0x000008, "Wrong alignment on PAWN_Hacker_Implant_C_GetNeuralHUD");
static_assert(sizeof(PAWN_Hacker_Implant_C_GetNeuralHUD) == 0x000018, "Wrong size on PAWN_Hacker_Implant_C_GetNeuralHUD");
static_assert(offsetof(PAWN_Hacker_Implant_C_GetNeuralHUD, Result) == 0x000000, "Member 'PAWN_Hacker_Implant_C_GetNeuralHUD::Result' has a wrong offset!");
static_assert(offsetof(PAWN_Hacker_Implant_C_GetNeuralHUD, K2Node_DynamicCast_AsWIDGET_Player_HUD) == 0x000008, "Member 'PAWN_Hacker_Implant_C_GetNeuralHUD::K2Node_DynamicCast_AsWIDGET_Player_HUD' has a wrong offset!");
static_assert(offsetof(PAWN_Hacker_Implant_C_GetNeuralHUD, K2Node_DynamicCast_bSuccess) == 0x000010, "Member 'PAWN_Hacker_Implant_C_GetNeuralHUD::K2Node_DynamicCast_bSuccess' has a wrong offset!");

// Function PAWN_Hacker_Implant.PAWN_Hacker_Implant_C.ReceiveInputForHotbarSlotByIndex
// 0x00E0 (0x00E0 - 0x0000)
struct PAWN_Hacker_Implant_C_ReceiveInputForHotbarSlotByIndex final
{
public:
	int32                                         SlotNumber;                                        // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Activate;                                          // 0x0004(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class UITEM_Base_C*                           ItemUnderCursor;                                   // 0x0008(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UITEM_Base_C*                           ItemHeldByCursor;                                  // 0x0010(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         SlotIndex;                                         // 0x0018(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1C[0x4];                                       // 0x001C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UWIDGET_PlayerHUD_C*                    NeuralHUD;                                         // 0x0020(0x0008)(Edit, BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ENUM_MFDTabCategory                           Temp_byte_Variable;                                // 0x0028(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ENUM_MFDTabCategory                           Temp_byte_Variable_1;                              // 0x0029(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ENUM_MFDTabCategory                           Temp_byte_Variable_2;                              // 0x002A(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x002B(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	ENUM_MFDTabCategory                           Temp_byte_Variable_3;                              // 0x002C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Not_PreBool_ReturnValue;                  // 0x002D(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_GetHotbarSlottableObject_Valid;           // 0x002E(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_2F[0x1];                                       // 0x002F(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	TScriptInterface<class IINTERF_HotbarSlottable_C> CallFunc_GetHotbarSlottableObject_SlottableObject; // 0x0030(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_AddToSlot_Result;                         // 0x0040(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_41[0x7];                                       // 0x0041(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UITEM_Base_C*                           CallFunc_GetCursorItem_Result;                     // 0x0048(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue_1;                    // 0x0050(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_51[0x7];                                       // 0x0051(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UITEM_Base_C*                           CallFunc_GetSlotItem_Item;                         // 0x0058(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UWIDGET_PlayerHUD_C*                    CallFunc_GetNeuralHUD_Result;                      // 0x0060(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_UndoCursorItemMove_Result;                // 0x0068(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_69[0x7];                                       // 0x0069(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UWIDGET_PlayerHUD_C*                    CallFunc_GetNeuralHUD_Result_1;                    // 0x0070(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue_2;                    // 0x0078(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_79[0x7];                                       // 0x0079(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UWIDGET_PlayerHUD_C*                    CallFunc_GetNeuralHUD_Result_2;                    // 0x0080(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UWIDGET_PlayerHUD_C*                    CallFunc_GetNeuralHUD_Result_3;                    // 0x0088(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class USAVE_Settings_C*                       CallFunc_GetShockSettingsForCurrentUser_Settings;  // 0x0090(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_GetSlotIndexFromNumber_Index;             // 0x0098(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ENUM_HotbarStyle                              CallFunc_GetHotbarStyle_Result;                    // 0x009C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_NotEqual_ByteByte_ReturnValue;            // 0x009D(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	ENUM_MFDTabCategory                           Temp_byte_Variable_4;                              // 0x009E(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_ActivateSlot_Result;                      // 0x009F(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	int32                                         Temp_int_Variable;                                 // 0x00A0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_DeactivateSlot_Result;                    // 0x00A4(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	ENUM_MFDTabCategory                           K2Node_Select_Default;                             // 0x00A5(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_A6[0x2];                                       // 0x00A6(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	class UCOMP_Inventory_C*                      CallFunc_GetInventory_Inventory;                   // 0x00A8(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_NotEqual_ByteByte_ReturnValue_1;          // 0x00B0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_B1[0x7];                                       // 0x00B1(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class AActor*                                 CallFunc_GetOwner_ReturnValue;                     // 0x00B8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_ObjectObject_ReturnValue;      // 0x00C0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_GetHotbarSlottableObject_Valid_1;         // 0x00C1(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_C2[0x6];                                       // 0x00C2(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	TScriptInterface<class IINTERF_HotbarSlottable_C> CallFunc_GetHotbarSlottableObject_SlottableObject_1; // 0x00C8(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_AddToSlot_Result_1;                       // 0x00D8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(PAWN_Hacker_Implant_C_ReceiveInputForHotbarSlotByIndex) == 0x000008, "Wrong alignment on PAWN_Hacker_Implant_C_ReceiveInputForHotbarSlotByIndex");
static_assert(sizeof(PAWN_Hacker_Implant_C_ReceiveInputForHotbarSlotByIndex) == 0x0000E0, "Wrong size on PAWN_Hacker_Implant_C_ReceiveInputForHotbarSlotByIndex");
static_assert(offsetof(PAWN_Hacker_Implant_C_ReceiveInputForHotbarSlotByIndex, SlotNumber) == 0x000000, "Member 'PAWN_Hacker_Implant_C_ReceiveInputForHotbarSlotByIndex::SlotNumber' has a wrong offset!");
static_assert(offsetof(PAWN_Hacker_Implant_C_ReceiveInputForHotbarSlotByIndex, Activate) == 0x000004, "Member 'PAWN_Hacker_Implant_C_ReceiveInputForHotbarSlotByIndex::Activate' has a wrong offset!");
static_assert(offsetof(PAWN_Hacker_Implant_C_ReceiveInputForHotbarSlotByIndex, ItemUnderCursor) == 0x000008, "Member 'PAWN_Hacker_Implant_C_ReceiveInputForHotbarSlotByIndex::ItemUnderCursor' has a wrong offset!");
static_assert(offsetof(PAWN_Hacker_Implant_C_ReceiveInputForHotbarSlotByIndex, ItemHeldByCursor) == 0x000010, "Member 'PAWN_Hacker_Implant_C_ReceiveInputForHotbarSlotByIndex::ItemHeldByCursor' has a wrong offset!");
static_assert(offsetof(PAWN_Hacker_Implant_C_ReceiveInputForHotbarSlotByIndex, SlotIndex) == 0x000018, "Member 'PAWN_Hacker_Implant_C_ReceiveInputForHotbarSlotByIndex::SlotIndex' has a wrong offset!");
static_assert(offsetof(PAWN_Hacker_Implant_C_ReceiveInputForHotbarSlotByIndex, NeuralHUD) == 0x000020, "Member 'PAWN_Hacker_Implant_C_ReceiveInputForHotbarSlotByIndex::NeuralHUD' has a wrong offset!");
static_assert(offsetof(PAWN_Hacker_Implant_C_ReceiveInputForHotbarSlotByIndex, Temp_byte_Variable) == 0x000028, "Member 'PAWN_Hacker_Implant_C_ReceiveInputForHotbarSlotByIndex::Temp_byte_Variable' has a wrong offset!");
static_assert(offsetof(PAWN_Hacker_Implant_C_ReceiveInputForHotbarSlotByIndex, Temp_byte_Variable_1) == 0x000029, "Member 'PAWN_Hacker_Implant_C_ReceiveInputForHotbarSlotByIndex::Temp_byte_Variable_1' has a wrong offset!");
static_assert(offsetof(PAWN_Hacker_Implant_C_ReceiveInputForHotbarSlotByIndex, Temp_byte_Variable_2) == 0x00002A, "Member 'PAWN_Hacker_Implant_C_ReceiveInputForHotbarSlotByIndex::Temp_byte_Variable_2' has a wrong offset!");
static_assert(offsetof(PAWN_Hacker_Implant_C_ReceiveInputForHotbarSlotByIndex, CallFunc_IsValid_ReturnValue) == 0x00002B, "Member 'PAWN_Hacker_Implant_C_ReceiveInputForHotbarSlotByIndex::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(PAWN_Hacker_Implant_C_ReceiveInputForHotbarSlotByIndex, Temp_byte_Variable_3) == 0x00002C, "Member 'PAWN_Hacker_Implant_C_ReceiveInputForHotbarSlotByIndex::Temp_byte_Variable_3' has a wrong offset!");
static_assert(offsetof(PAWN_Hacker_Implant_C_ReceiveInputForHotbarSlotByIndex, CallFunc_Not_PreBool_ReturnValue) == 0x00002D, "Member 'PAWN_Hacker_Implant_C_ReceiveInputForHotbarSlotByIndex::CallFunc_Not_PreBool_ReturnValue' has a wrong offset!");
static_assert(offsetof(PAWN_Hacker_Implant_C_ReceiveInputForHotbarSlotByIndex, CallFunc_GetHotbarSlottableObject_Valid) == 0x00002E, "Member 'PAWN_Hacker_Implant_C_ReceiveInputForHotbarSlotByIndex::CallFunc_GetHotbarSlottableObject_Valid' has a wrong offset!");
static_assert(offsetof(PAWN_Hacker_Implant_C_ReceiveInputForHotbarSlotByIndex, CallFunc_GetHotbarSlottableObject_SlottableObject) == 0x000030, "Member 'PAWN_Hacker_Implant_C_ReceiveInputForHotbarSlotByIndex::CallFunc_GetHotbarSlottableObject_SlottableObject' has a wrong offset!");
static_assert(offsetof(PAWN_Hacker_Implant_C_ReceiveInputForHotbarSlotByIndex, CallFunc_AddToSlot_Result) == 0x000040, "Member 'PAWN_Hacker_Implant_C_ReceiveInputForHotbarSlotByIndex::CallFunc_AddToSlot_Result' has a wrong offset!");
static_assert(offsetof(PAWN_Hacker_Implant_C_ReceiveInputForHotbarSlotByIndex, CallFunc_GetCursorItem_Result) == 0x000048, "Member 'PAWN_Hacker_Implant_C_ReceiveInputForHotbarSlotByIndex::CallFunc_GetCursorItem_Result' has a wrong offset!");
static_assert(offsetof(PAWN_Hacker_Implant_C_ReceiveInputForHotbarSlotByIndex, CallFunc_IsValid_ReturnValue_1) == 0x000050, "Member 'PAWN_Hacker_Implant_C_ReceiveInputForHotbarSlotByIndex::CallFunc_IsValid_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(PAWN_Hacker_Implant_C_ReceiveInputForHotbarSlotByIndex, CallFunc_GetSlotItem_Item) == 0x000058, "Member 'PAWN_Hacker_Implant_C_ReceiveInputForHotbarSlotByIndex::CallFunc_GetSlotItem_Item' has a wrong offset!");
static_assert(offsetof(PAWN_Hacker_Implant_C_ReceiveInputForHotbarSlotByIndex, CallFunc_GetNeuralHUD_Result) == 0x000060, "Member 'PAWN_Hacker_Implant_C_ReceiveInputForHotbarSlotByIndex::CallFunc_GetNeuralHUD_Result' has a wrong offset!");
static_assert(offsetof(PAWN_Hacker_Implant_C_ReceiveInputForHotbarSlotByIndex, CallFunc_UndoCursorItemMove_Result) == 0x000068, "Member 'PAWN_Hacker_Implant_C_ReceiveInputForHotbarSlotByIndex::CallFunc_UndoCursorItemMove_Result' has a wrong offset!");
static_assert(offsetof(PAWN_Hacker_Implant_C_ReceiveInputForHotbarSlotByIndex, CallFunc_GetNeuralHUD_Result_1) == 0x000070, "Member 'PAWN_Hacker_Implant_C_ReceiveInputForHotbarSlotByIndex::CallFunc_GetNeuralHUD_Result_1' has a wrong offset!");
static_assert(offsetof(PAWN_Hacker_Implant_C_ReceiveInputForHotbarSlotByIndex, CallFunc_IsValid_ReturnValue_2) == 0x000078, "Member 'PAWN_Hacker_Implant_C_ReceiveInputForHotbarSlotByIndex::CallFunc_IsValid_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(PAWN_Hacker_Implant_C_ReceiveInputForHotbarSlotByIndex, CallFunc_GetNeuralHUD_Result_2) == 0x000080, "Member 'PAWN_Hacker_Implant_C_ReceiveInputForHotbarSlotByIndex::CallFunc_GetNeuralHUD_Result_2' has a wrong offset!");
static_assert(offsetof(PAWN_Hacker_Implant_C_ReceiveInputForHotbarSlotByIndex, CallFunc_GetNeuralHUD_Result_3) == 0x000088, "Member 'PAWN_Hacker_Implant_C_ReceiveInputForHotbarSlotByIndex::CallFunc_GetNeuralHUD_Result_3' has a wrong offset!");
static_assert(offsetof(PAWN_Hacker_Implant_C_ReceiveInputForHotbarSlotByIndex, CallFunc_GetShockSettingsForCurrentUser_Settings) == 0x000090, "Member 'PAWN_Hacker_Implant_C_ReceiveInputForHotbarSlotByIndex::CallFunc_GetShockSettingsForCurrentUser_Settings' has a wrong offset!");
static_assert(offsetof(PAWN_Hacker_Implant_C_ReceiveInputForHotbarSlotByIndex, CallFunc_GetSlotIndexFromNumber_Index) == 0x000098, "Member 'PAWN_Hacker_Implant_C_ReceiveInputForHotbarSlotByIndex::CallFunc_GetSlotIndexFromNumber_Index' has a wrong offset!");
static_assert(offsetof(PAWN_Hacker_Implant_C_ReceiveInputForHotbarSlotByIndex, CallFunc_GetHotbarStyle_Result) == 0x00009C, "Member 'PAWN_Hacker_Implant_C_ReceiveInputForHotbarSlotByIndex::CallFunc_GetHotbarStyle_Result' has a wrong offset!");
static_assert(offsetof(PAWN_Hacker_Implant_C_ReceiveInputForHotbarSlotByIndex, CallFunc_NotEqual_ByteByte_ReturnValue) == 0x00009D, "Member 'PAWN_Hacker_Implant_C_ReceiveInputForHotbarSlotByIndex::CallFunc_NotEqual_ByteByte_ReturnValue' has a wrong offset!");
static_assert(offsetof(PAWN_Hacker_Implant_C_ReceiveInputForHotbarSlotByIndex, Temp_byte_Variable_4) == 0x00009E, "Member 'PAWN_Hacker_Implant_C_ReceiveInputForHotbarSlotByIndex::Temp_byte_Variable_4' has a wrong offset!");
static_assert(offsetof(PAWN_Hacker_Implant_C_ReceiveInputForHotbarSlotByIndex, CallFunc_ActivateSlot_Result) == 0x00009F, "Member 'PAWN_Hacker_Implant_C_ReceiveInputForHotbarSlotByIndex::CallFunc_ActivateSlot_Result' has a wrong offset!");
static_assert(offsetof(PAWN_Hacker_Implant_C_ReceiveInputForHotbarSlotByIndex, Temp_int_Variable) == 0x0000A0, "Member 'PAWN_Hacker_Implant_C_ReceiveInputForHotbarSlotByIndex::Temp_int_Variable' has a wrong offset!");
static_assert(offsetof(PAWN_Hacker_Implant_C_ReceiveInputForHotbarSlotByIndex, CallFunc_DeactivateSlot_Result) == 0x0000A4, "Member 'PAWN_Hacker_Implant_C_ReceiveInputForHotbarSlotByIndex::CallFunc_DeactivateSlot_Result' has a wrong offset!");
static_assert(offsetof(PAWN_Hacker_Implant_C_ReceiveInputForHotbarSlotByIndex, K2Node_Select_Default) == 0x0000A5, "Member 'PAWN_Hacker_Implant_C_ReceiveInputForHotbarSlotByIndex::K2Node_Select_Default' has a wrong offset!");
static_assert(offsetof(PAWN_Hacker_Implant_C_ReceiveInputForHotbarSlotByIndex, CallFunc_GetInventory_Inventory) == 0x0000A8, "Member 'PAWN_Hacker_Implant_C_ReceiveInputForHotbarSlotByIndex::CallFunc_GetInventory_Inventory' has a wrong offset!");
static_assert(offsetof(PAWN_Hacker_Implant_C_ReceiveInputForHotbarSlotByIndex, CallFunc_NotEqual_ByteByte_ReturnValue_1) == 0x0000B0, "Member 'PAWN_Hacker_Implant_C_ReceiveInputForHotbarSlotByIndex::CallFunc_NotEqual_ByteByte_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(PAWN_Hacker_Implant_C_ReceiveInputForHotbarSlotByIndex, CallFunc_GetOwner_ReturnValue) == 0x0000B8, "Member 'PAWN_Hacker_Implant_C_ReceiveInputForHotbarSlotByIndex::CallFunc_GetOwner_ReturnValue' has a wrong offset!");
static_assert(offsetof(PAWN_Hacker_Implant_C_ReceiveInputForHotbarSlotByIndex, CallFunc_EqualEqual_ObjectObject_ReturnValue) == 0x0000C0, "Member 'PAWN_Hacker_Implant_C_ReceiveInputForHotbarSlotByIndex::CallFunc_EqualEqual_ObjectObject_ReturnValue' has a wrong offset!");
static_assert(offsetof(PAWN_Hacker_Implant_C_ReceiveInputForHotbarSlotByIndex, CallFunc_GetHotbarSlottableObject_Valid_1) == 0x0000C1, "Member 'PAWN_Hacker_Implant_C_ReceiveInputForHotbarSlotByIndex::CallFunc_GetHotbarSlottableObject_Valid_1' has a wrong offset!");
static_assert(offsetof(PAWN_Hacker_Implant_C_ReceiveInputForHotbarSlotByIndex, CallFunc_GetHotbarSlottableObject_SlottableObject_1) == 0x0000C8, "Member 'PAWN_Hacker_Implant_C_ReceiveInputForHotbarSlotByIndex::CallFunc_GetHotbarSlottableObject_SlottableObject_1' has a wrong offset!");
static_assert(offsetof(PAWN_Hacker_Implant_C_ReceiveInputForHotbarSlotByIndex, CallFunc_AddToSlot_Result_1) == 0x0000D8, "Member 'PAWN_Hacker_Implant_C_ReceiveInputForHotbarSlotByIndex::CallFunc_AddToSlot_Result_1' has a wrong offset!");

// Function PAWN_Hacker_Implant.PAWN_Hacker_Implant_C.SetMinimapCameraFollowsYaw
// 0x0001 (0x0001 - 0x0000)
struct PAWN_Hacker_Implant_C_SetMinimapCameraFollowsYaw final
{
public:
	bool                                          Enable;                                            // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(PAWN_Hacker_Implant_C_SetMinimapCameraFollowsYaw) == 0x000001, "Wrong alignment on PAWN_Hacker_Implant_C_SetMinimapCameraFollowsYaw");
static_assert(sizeof(PAWN_Hacker_Implant_C_SetMinimapCameraFollowsYaw) == 0x000001, "Wrong size on PAWN_Hacker_Implant_C_SetMinimapCameraFollowsYaw");
static_assert(offsetof(PAWN_Hacker_Implant_C_SetMinimapCameraFollowsYaw, Enable) == 0x000000, "Member 'PAWN_Hacker_Implant_C_SetMinimapCameraFollowsYaw::Enable' has a wrong offset!");

// Function PAWN_Hacker_Implant.PAWN_Hacker_Implant_C.HandleReceiveMediaKey
// 0x0048 (0x0048 - 0x0000)
struct PAWN_Hacker_Implant_C_HandleReceiveMediaKey final
{
public:
	bool                                          IsDown;                                            // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UWIDGET_PlayerHUD_C*                    CallFunc_GetNeuralHUD_Result;                      // 0x0008(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UWIDGET_PlayerHUD_C*                    CallFunc_GetNeuralHUD_Result_1;                    // 0x0010(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_ByteByte_ReturnValue;          // 0x0018(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_19[0x7];                                       // 0x0019(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UWIDGET_PlayerHUD_C*                    CallFunc_GetNeuralHUD_Result_2;                    // 0x0020(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UWIDGET_PlayerHUD_C*                    CallFunc_GetNeuralHUD_Result_3;                    // 0x0028(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UWIDGET_PlayerHUD_C*                    CallFunc_GetNeuralHUD_Result_4;                    // 0x0030(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UWIDGET_PlayerHUD_C*                    CallFunc_GetNeuralHUD_Result_5;                    // 0x0038(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_CanHoldKeyToPlayLog_Result;               // 0x0040(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(PAWN_Hacker_Implant_C_HandleReceiveMediaKey) == 0x000008, "Wrong alignment on PAWN_Hacker_Implant_C_HandleReceiveMediaKey");
static_assert(sizeof(PAWN_Hacker_Implant_C_HandleReceiveMediaKey) == 0x000048, "Wrong size on PAWN_Hacker_Implant_C_HandleReceiveMediaKey");
static_assert(offsetof(PAWN_Hacker_Implant_C_HandleReceiveMediaKey, IsDown) == 0x000000, "Member 'PAWN_Hacker_Implant_C_HandleReceiveMediaKey::IsDown' has a wrong offset!");
static_assert(offsetof(PAWN_Hacker_Implant_C_HandleReceiveMediaKey, CallFunc_GetNeuralHUD_Result) == 0x000008, "Member 'PAWN_Hacker_Implant_C_HandleReceiveMediaKey::CallFunc_GetNeuralHUD_Result' has a wrong offset!");
static_assert(offsetof(PAWN_Hacker_Implant_C_HandleReceiveMediaKey, CallFunc_GetNeuralHUD_Result_1) == 0x000010, "Member 'PAWN_Hacker_Implant_C_HandleReceiveMediaKey::CallFunc_GetNeuralHUD_Result_1' has a wrong offset!");
static_assert(offsetof(PAWN_Hacker_Implant_C_HandleReceiveMediaKey, CallFunc_EqualEqual_ByteByte_ReturnValue) == 0x000018, "Member 'PAWN_Hacker_Implant_C_HandleReceiveMediaKey::CallFunc_EqualEqual_ByteByte_ReturnValue' has a wrong offset!");
static_assert(offsetof(PAWN_Hacker_Implant_C_HandleReceiveMediaKey, CallFunc_GetNeuralHUD_Result_2) == 0x000020, "Member 'PAWN_Hacker_Implant_C_HandleReceiveMediaKey::CallFunc_GetNeuralHUD_Result_2' has a wrong offset!");
static_assert(offsetof(PAWN_Hacker_Implant_C_HandleReceiveMediaKey, CallFunc_GetNeuralHUD_Result_3) == 0x000028, "Member 'PAWN_Hacker_Implant_C_HandleReceiveMediaKey::CallFunc_GetNeuralHUD_Result_3' has a wrong offset!");
static_assert(offsetof(PAWN_Hacker_Implant_C_HandleReceiveMediaKey, CallFunc_GetNeuralHUD_Result_4) == 0x000030, "Member 'PAWN_Hacker_Implant_C_HandleReceiveMediaKey::CallFunc_GetNeuralHUD_Result_4' has a wrong offset!");
static_assert(offsetof(PAWN_Hacker_Implant_C_HandleReceiveMediaKey, CallFunc_GetNeuralHUD_Result_5) == 0x000038, "Member 'PAWN_Hacker_Implant_C_HandleReceiveMediaKey::CallFunc_GetNeuralHUD_Result_5' has a wrong offset!");
static_assert(offsetof(PAWN_Hacker_Implant_C_HandleReceiveMediaKey, CallFunc_CanHoldKeyToPlayLog_Result) == 0x000040, "Member 'PAWN_Hacker_Implant_C_HandleReceiveMediaKey::CallFunc_CanHoldKeyToPlayLog_Result' has a wrong offset!");

// Function PAWN_Hacker_Implant.PAWN_Hacker_Implant_C.EVENT_OnLTEChanged
// 0x0060 (0x0060 - 0x0000)
struct PAWN_Hacker_Implant_C_EVENT_OnLTEChanged final
{
public:
	float                                         CurrValue;                                         // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         LastValue;                                         // 0x0004(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UAttribMod*                             BioPoisoningMod;                                   // 0x0008(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UAttribMod*                             ThermalDamageMod;                                  // 0x0010(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UWIDGET_PlayerHUD_C*                    CallFunc_GetNeuralHUD_Result;                      // 0x0018(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Greater_FloatFloat_ReturnValue;           // 0x0020(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_21[0x7];                                       // 0x0021(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UWIDGET_PlayerHUD_C*                    CallFunc_GetNeuralHUD_Result_1;                    // 0x0028(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UWIDGET_PlayerHUD_C*                    CallFunc_GetNeuralHUD_Result_2;                    // 0x0030(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_FTrunc_ReturnValue;                       // 0x0038(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_NotEqual_FloatFloat_ReturnValue;          // 0x003C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_3D[0x3];                                       // 0x003D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_GetAttribValue_ReturnValue;               // 0x0040(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_FTrunc_ReturnValue_1;                     // 0x0044(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0048(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_49[0x7];                                       // 0x0049(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UAttribMod*                             CallFunc_GetActiveModWithCategory_ReturnValue;     // 0x0050(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UAttribMod*                             CallFunc_GetActiveModWithCategory_ReturnValue_1;   // 0x0058(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(PAWN_Hacker_Implant_C_EVENT_OnLTEChanged) == 0x000008, "Wrong alignment on PAWN_Hacker_Implant_C_EVENT_OnLTEChanged");
static_assert(sizeof(PAWN_Hacker_Implant_C_EVENT_OnLTEChanged) == 0x000060, "Wrong size on PAWN_Hacker_Implant_C_EVENT_OnLTEChanged");
static_assert(offsetof(PAWN_Hacker_Implant_C_EVENT_OnLTEChanged, CurrValue) == 0x000000, "Member 'PAWN_Hacker_Implant_C_EVENT_OnLTEChanged::CurrValue' has a wrong offset!");
static_assert(offsetof(PAWN_Hacker_Implant_C_EVENT_OnLTEChanged, LastValue) == 0x000004, "Member 'PAWN_Hacker_Implant_C_EVENT_OnLTEChanged::LastValue' has a wrong offset!");
static_assert(offsetof(PAWN_Hacker_Implant_C_EVENT_OnLTEChanged, BioPoisoningMod) == 0x000008, "Member 'PAWN_Hacker_Implant_C_EVENT_OnLTEChanged::BioPoisoningMod' has a wrong offset!");
static_assert(offsetof(PAWN_Hacker_Implant_C_EVENT_OnLTEChanged, ThermalDamageMod) == 0x000010, "Member 'PAWN_Hacker_Implant_C_EVENT_OnLTEChanged::ThermalDamageMod' has a wrong offset!");
static_assert(offsetof(PAWN_Hacker_Implant_C_EVENT_OnLTEChanged, CallFunc_GetNeuralHUD_Result) == 0x000018, "Member 'PAWN_Hacker_Implant_C_EVENT_OnLTEChanged::CallFunc_GetNeuralHUD_Result' has a wrong offset!");
static_assert(offsetof(PAWN_Hacker_Implant_C_EVENT_OnLTEChanged, CallFunc_Greater_FloatFloat_ReturnValue) == 0x000020, "Member 'PAWN_Hacker_Implant_C_EVENT_OnLTEChanged::CallFunc_Greater_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(PAWN_Hacker_Implant_C_EVENT_OnLTEChanged, CallFunc_GetNeuralHUD_Result_1) == 0x000028, "Member 'PAWN_Hacker_Implant_C_EVENT_OnLTEChanged::CallFunc_GetNeuralHUD_Result_1' has a wrong offset!");
static_assert(offsetof(PAWN_Hacker_Implant_C_EVENT_OnLTEChanged, CallFunc_GetNeuralHUD_Result_2) == 0x000030, "Member 'PAWN_Hacker_Implant_C_EVENT_OnLTEChanged::CallFunc_GetNeuralHUD_Result_2' has a wrong offset!");
static_assert(offsetof(PAWN_Hacker_Implant_C_EVENT_OnLTEChanged, CallFunc_FTrunc_ReturnValue) == 0x000038, "Member 'PAWN_Hacker_Implant_C_EVENT_OnLTEChanged::CallFunc_FTrunc_ReturnValue' has a wrong offset!");
static_assert(offsetof(PAWN_Hacker_Implant_C_EVENT_OnLTEChanged, CallFunc_NotEqual_FloatFloat_ReturnValue) == 0x00003C, "Member 'PAWN_Hacker_Implant_C_EVENT_OnLTEChanged::CallFunc_NotEqual_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(PAWN_Hacker_Implant_C_EVENT_OnLTEChanged, CallFunc_GetAttribValue_ReturnValue) == 0x000040, "Member 'PAWN_Hacker_Implant_C_EVENT_OnLTEChanged::CallFunc_GetAttribValue_ReturnValue' has a wrong offset!");
static_assert(offsetof(PAWN_Hacker_Implant_C_EVENT_OnLTEChanged, CallFunc_FTrunc_ReturnValue_1) == 0x000044, "Member 'PAWN_Hacker_Implant_C_EVENT_OnLTEChanged::CallFunc_FTrunc_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(PAWN_Hacker_Implant_C_EVENT_OnLTEChanged, CallFunc_IsValid_ReturnValue) == 0x000048, "Member 'PAWN_Hacker_Implant_C_EVENT_OnLTEChanged::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(PAWN_Hacker_Implant_C_EVENT_OnLTEChanged, CallFunc_GetActiveModWithCategory_ReturnValue) == 0x000050, "Member 'PAWN_Hacker_Implant_C_EVENT_OnLTEChanged::CallFunc_GetActiveModWithCategory_ReturnValue' has a wrong offset!");
static_assert(offsetof(PAWN_Hacker_Implant_C_EVENT_OnLTEChanged, CallFunc_GetActiveModWithCategory_ReturnValue_1) == 0x000058, "Member 'PAWN_Hacker_Implant_C_EVENT_OnLTEChanged::CallFunc_GetActiveModWithCategory_ReturnValue_1' has a wrong offset!");

// Function PAWN_Hacker_Implant.PAWN_Hacker_Implant_C.EVENT_OnRespawnHacker
// 0x0080 (0x0080 - 0x0000)
struct PAWN_Hacker_Implant_C_EVENT_OnRespawnHacker final
{
public:
	class AINTERACT_RespawnChamber_C*             RespawnChamber;                                    // 0x0000(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class ULevelStreaming*                        PrimaryStreamingLevel;                             // 0x0008(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UGI_SinglePlayer_C*                     GameInstance;                                      // 0x0010(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsRespawnChamberActivated_Result;         // 0x0018(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_19[0x3];                                       // 0x0019(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FRotator                               CallFunc_K2_GetComponentRotation_ReturnValue;      // 0x001C(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FVector                                CallFunc_K2_GetComponentLocation_ReturnValue;      // 0x0028(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0034(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_35[0x3];                                       // 0x0035(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class ULevel*                                 CallFunc_GetLoadedLevel_ReturnValue;               // 0x0038(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AINTERACT_RespawnChamber_C*             CallFunc_GetActorOfClass_ReturnValue;              // 0x0040(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AINTERACT_RespawnChamber_C*             CallFunc_GetActorOfClassInSubLevel_ReturnValue;    // 0x0048(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class ULevelStreaming*                        CallFunc_GetPrimaryStreamingLevel_Level;           // 0x0050(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TDelegate<void()>                             K2Node_CreateDelegate_OutputDelegate;              // 0x0058(0x0010)(ZeroConstructor, NoDestructor)
	class UGameInstance*                          CallFunc_GetGameInstance_ReturnValue;              // 0x0068(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UGI_SinglePlayer_C*                     K2Node_DynamicCast_AsGI_Single_Player;             // 0x0070(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0078(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsValid_ReturnValue_1;                    // 0x0079(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(PAWN_Hacker_Implant_C_EVENT_OnRespawnHacker) == 0x000008, "Wrong alignment on PAWN_Hacker_Implant_C_EVENT_OnRespawnHacker");
static_assert(sizeof(PAWN_Hacker_Implant_C_EVENT_OnRespawnHacker) == 0x000080, "Wrong size on PAWN_Hacker_Implant_C_EVENT_OnRespawnHacker");
static_assert(offsetof(PAWN_Hacker_Implant_C_EVENT_OnRespawnHacker, RespawnChamber) == 0x000000, "Member 'PAWN_Hacker_Implant_C_EVENT_OnRespawnHacker::RespawnChamber' has a wrong offset!");
static_assert(offsetof(PAWN_Hacker_Implant_C_EVENT_OnRespawnHacker, PrimaryStreamingLevel) == 0x000008, "Member 'PAWN_Hacker_Implant_C_EVENT_OnRespawnHacker::PrimaryStreamingLevel' has a wrong offset!");
static_assert(offsetof(PAWN_Hacker_Implant_C_EVENT_OnRespawnHacker, GameInstance) == 0x000010, "Member 'PAWN_Hacker_Implant_C_EVENT_OnRespawnHacker::GameInstance' has a wrong offset!");
static_assert(offsetof(PAWN_Hacker_Implant_C_EVENT_OnRespawnHacker, CallFunc_IsRespawnChamberActivated_Result) == 0x000018, "Member 'PAWN_Hacker_Implant_C_EVENT_OnRespawnHacker::CallFunc_IsRespawnChamberActivated_Result' has a wrong offset!");
static_assert(offsetof(PAWN_Hacker_Implant_C_EVENT_OnRespawnHacker, CallFunc_K2_GetComponentRotation_ReturnValue) == 0x00001C, "Member 'PAWN_Hacker_Implant_C_EVENT_OnRespawnHacker::CallFunc_K2_GetComponentRotation_ReturnValue' has a wrong offset!");
static_assert(offsetof(PAWN_Hacker_Implant_C_EVENT_OnRespawnHacker, CallFunc_K2_GetComponentLocation_ReturnValue) == 0x000028, "Member 'PAWN_Hacker_Implant_C_EVENT_OnRespawnHacker::CallFunc_K2_GetComponentLocation_ReturnValue' has a wrong offset!");
static_assert(offsetof(PAWN_Hacker_Implant_C_EVENT_OnRespawnHacker, CallFunc_IsValid_ReturnValue) == 0x000034, "Member 'PAWN_Hacker_Implant_C_EVENT_OnRespawnHacker::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(PAWN_Hacker_Implant_C_EVENT_OnRespawnHacker, CallFunc_GetLoadedLevel_ReturnValue) == 0x000038, "Member 'PAWN_Hacker_Implant_C_EVENT_OnRespawnHacker::CallFunc_GetLoadedLevel_ReturnValue' has a wrong offset!");
static_assert(offsetof(PAWN_Hacker_Implant_C_EVENT_OnRespawnHacker, CallFunc_GetActorOfClass_ReturnValue) == 0x000040, "Member 'PAWN_Hacker_Implant_C_EVENT_OnRespawnHacker::CallFunc_GetActorOfClass_ReturnValue' has a wrong offset!");
static_assert(offsetof(PAWN_Hacker_Implant_C_EVENT_OnRespawnHacker, CallFunc_GetActorOfClassInSubLevel_ReturnValue) == 0x000048, "Member 'PAWN_Hacker_Implant_C_EVENT_OnRespawnHacker::CallFunc_GetActorOfClassInSubLevel_ReturnValue' has a wrong offset!");
static_assert(offsetof(PAWN_Hacker_Implant_C_EVENT_OnRespawnHacker, CallFunc_GetPrimaryStreamingLevel_Level) == 0x000050, "Member 'PAWN_Hacker_Implant_C_EVENT_OnRespawnHacker::CallFunc_GetPrimaryStreamingLevel_Level' has a wrong offset!");
static_assert(offsetof(PAWN_Hacker_Implant_C_EVENT_OnRespawnHacker, K2Node_CreateDelegate_OutputDelegate) == 0x000058, "Member 'PAWN_Hacker_Implant_C_EVENT_OnRespawnHacker::K2Node_CreateDelegate_OutputDelegate' has a wrong offset!");
static_assert(offsetof(PAWN_Hacker_Implant_C_EVENT_OnRespawnHacker, CallFunc_GetGameInstance_ReturnValue) == 0x000068, "Member 'PAWN_Hacker_Implant_C_EVENT_OnRespawnHacker::CallFunc_GetGameInstance_ReturnValue' has a wrong offset!");
static_assert(offsetof(PAWN_Hacker_Implant_C_EVENT_OnRespawnHacker, K2Node_DynamicCast_AsGI_Single_Player) == 0x000070, "Member 'PAWN_Hacker_Implant_C_EVENT_OnRespawnHacker::K2Node_DynamicCast_AsGI_Single_Player' has a wrong offset!");
static_assert(offsetof(PAWN_Hacker_Implant_C_EVENT_OnRespawnHacker, K2Node_DynamicCast_bSuccess) == 0x000078, "Member 'PAWN_Hacker_Implant_C_EVENT_OnRespawnHacker::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(PAWN_Hacker_Implant_C_EVENT_OnRespawnHacker, CallFunc_IsValid_ReturnValue_1) == 0x000079, "Member 'PAWN_Hacker_Implant_C_EVENT_OnRespawnHacker::CallFunc_IsValid_ReturnValue_1' has a wrong offset!");

// Function PAWN_Hacker_Implant.PAWN_Hacker_Implant_C.OnDeathSequenceFinished
// 0x0058 (0x0058 - 0x0000)
struct PAWN_Hacker_Implant_C_OnDeathSequenceFinished final
{
public:
	class FName                                   RespawnLevelName;                                  // 0x0000(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UGI_SinglePlayer_C*                     GameInstance;                                      // 0x0008(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TDelegate<void()>                             K2Node_CreateDelegate_OutputDelegate;              // 0x0010(0x0010)(ZeroConstructor, NoDestructor)
	bool                                          CallFunc_TryStopPublicAddressMessage_Result;       // 0x0020(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsStreamingLevels_Result;                 // 0x0021(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Not_PreBool_ReturnValue;                  // 0x0022(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_HasActivatedAnyRespawnChambers_Result;    // 0x0023(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_24[0x4];                                       // 0x0024(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UGameInstance*                          CallFunc_GetGameInstance_ReturnValue;              // 0x0028(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BooleanAND_ReturnValue;                   // 0x0030(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_31[0x7];                                       // 0x0031(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UGI_SinglePlayer_C*                     K2Node_DynamicCast_AsGI_Single_Player;             // 0x0038(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0040(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_41[0x3];                                       // 0x0041(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   CallFunc_GetBestRespawnChamberLevel_LevelName;     // 0x0044(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FName                                   CallFunc_GetCurrentLevelName_Result;               // 0x004C(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_NameName_ReturnValue;          // 0x0054(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_NotEqual_NameName_ReturnValue;            // 0x0055(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(PAWN_Hacker_Implant_C_OnDeathSequenceFinished) == 0x000008, "Wrong alignment on PAWN_Hacker_Implant_C_OnDeathSequenceFinished");
static_assert(sizeof(PAWN_Hacker_Implant_C_OnDeathSequenceFinished) == 0x000058, "Wrong size on PAWN_Hacker_Implant_C_OnDeathSequenceFinished");
static_assert(offsetof(PAWN_Hacker_Implant_C_OnDeathSequenceFinished, RespawnLevelName) == 0x000000, "Member 'PAWN_Hacker_Implant_C_OnDeathSequenceFinished::RespawnLevelName' has a wrong offset!");
static_assert(offsetof(PAWN_Hacker_Implant_C_OnDeathSequenceFinished, GameInstance) == 0x000008, "Member 'PAWN_Hacker_Implant_C_OnDeathSequenceFinished::GameInstance' has a wrong offset!");
static_assert(offsetof(PAWN_Hacker_Implant_C_OnDeathSequenceFinished, K2Node_CreateDelegate_OutputDelegate) == 0x000010, "Member 'PAWN_Hacker_Implant_C_OnDeathSequenceFinished::K2Node_CreateDelegate_OutputDelegate' has a wrong offset!");
static_assert(offsetof(PAWN_Hacker_Implant_C_OnDeathSequenceFinished, CallFunc_TryStopPublicAddressMessage_Result) == 0x000020, "Member 'PAWN_Hacker_Implant_C_OnDeathSequenceFinished::CallFunc_TryStopPublicAddressMessage_Result' has a wrong offset!");
static_assert(offsetof(PAWN_Hacker_Implant_C_OnDeathSequenceFinished, CallFunc_IsStreamingLevels_Result) == 0x000021, "Member 'PAWN_Hacker_Implant_C_OnDeathSequenceFinished::CallFunc_IsStreamingLevels_Result' has a wrong offset!");
static_assert(offsetof(PAWN_Hacker_Implant_C_OnDeathSequenceFinished, CallFunc_Not_PreBool_ReturnValue) == 0x000022, "Member 'PAWN_Hacker_Implant_C_OnDeathSequenceFinished::CallFunc_Not_PreBool_ReturnValue' has a wrong offset!");
static_assert(offsetof(PAWN_Hacker_Implant_C_OnDeathSequenceFinished, CallFunc_HasActivatedAnyRespawnChambers_Result) == 0x000023, "Member 'PAWN_Hacker_Implant_C_OnDeathSequenceFinished::CallFunc_HasActivatedAnyRespawnChambers_Result' has a wrong offset!");
static_assert(offsetof(PAWN_Hacker_Implant_C_OnDeathSequenceFinished, CallFunc_GetGameInstance_ReturnValue) == 0x000028, "Member 'PAWN_Hacker_Implant_C_OnDeathSequenceFinished::CallFunc_GetGameInstance_ReturnValue' has a wrong offset!");
static_assert(offsetof(PAWN_Hacker_Implant_C_OnDeathSequenceFinished, CallFunc_BooleanAND_ReturnValue) == 0x000030, "Member 'PAWN_Hacker_Implant_C_OnDeathSequenceFinished::CallFunc_BooleanAND_ReturnValue' has a wrong offset!");
static_assert(offsetof(PAWN_Hacker_Implant_C_OnDeathSequenceFinished, K2Node_DynamicCast_AsGI_Single_Player) == 0x000038, "Member 'PAWN_Hacker_Implant_C_OnDeathSequenceFinished::K2Node_DynamicCast_AsGI_Single_Player' has a wrong offset!");
static_assert(offsetof(PAWN_Hacker_Implant_C_OnDeathSequenceFinished, K2Node_DynamicCast_bSuccess) == 0x000040, "Member 'PAWN_Hacker_Implant_C_OnDeathSequenceFinished::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(PAWN_Hacker_Implant_C_OnDeathSequenceFinished, CallFunc_GetBestRespawnChamberLevel_LevelName) == 0x000044, "Member 'PAWN_Hacker_Implant_C_OnDeathSequenceFinished::CallFunc_GetBestRespawnChamberLevel_LevelName' has a wrong offset!");
static_assert(offsetof(PAWN_Hacker_Implant_C_OnDeathSequenceFinished, CallFunc_GetCurrentLevelName_Result) == 0x00004C, "Member 'PAWN_Hacker_Implant_C_OnDeathSequenceFinished::CallFunc_GetCurrentLevelName_Result' has a wrong offset!");
static_assert(offsetof(PAWN_Hacker_Implant_C_OnDeathSequenceFinished, CallFunc_EqualEqual_NameName_ReturnValue) == 0x000054, "Member 'PAWN_Hacker_Implant_C_OnDeathSequenceFinished::CallFunc_EqualEqual_NameName_ReturnValue' has a wrong offset!");
static_assert(offsetof(PAWN_Hacker_Implant_C_OnDeathSequenceFinished, CallFunc_NotEqual_NameName_ReturnValue) == 0x000055, "Member 'PAWN_Hacker_Implant_C_OnDeathSequenceFinished::CallFunc_NotEqual_NameName_ReturnValue' has a wrong offset!");

// Function PAWN_Hacker_Implant.PAWN_Hacker_Implant_C.SetCanHackerRespawn
// 0x0001 (0x0001 - 0x0000)
struct PAWN_Hacker_Implant_C_SetCanHackerRespawn final
{
public:
	bool                                          CanRespawn;                                        // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(PAWN_Hacker_Implant_C_SetCanHackerRespawn) == 0x000001, "Wrong alignment on PAWN_Hacker_Implant_C_SetCanHackerRespawn");
static_assert(sizeof(PAWN_Hacker_Implant_C_SetCanHackerRespawn) == 0x000001, "Wrong size on PAWN_Hacker_Implant_C_SetCanHackerRespawn");
static_assert(offsetof(PAWN_Hacker_Implant_C_SetCanHackerRespawn, CanRespawn) == 0x000000, "Member 'PAWN_Hacker_Implant_C_SetCanHackerRespawn::CanRespawn' has a wrong offset!");

// Function PAWN_Hacker_Implant.PAWN_Hacker_Implant_C.SetCanSaveGames
// 0x0001 (0x0001 - 0x0000)
struct PAWN_Hacker_Implant_C_SetCanSaveGames final
{
public:
	bool                                          Enable;                                            // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(PAWN_Hacker_Implant_C_SetCanSaveGames) == 0x000001, "Wrong alignment on PAWN_Hacker_Implant_C_SetCanSaveGames");
static_assert(sizeof(PAWN_Hacker_Implant_C_SetCanSaveGames) == 0x000001, "Wrong size on PAWN_Hacker_Implant_C_SetCanSaveGames");
static_assert(offsetof(PAWN_Hacker_Implant_C_SetCanSaveGames, Enable) == 0x000000, "Member 'PAWN_Hacker_Implant_C_SetCanSaveGames::Enable' has a wrong offset!");

// Function PAWN_Hacker_Implant.PAWN_Hacker_Implant_C.OnDisorientationChanged
// 0x0020 (0x0020 - 0x0000)
struct PAWN_Hacker_Implant_C_OnDisorientationChanged final
{
public:
	float                                         DisorientationAmount;                              // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Greater_FloatFloat_ReturnValue;           // 0x0004(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_FMin_ReturnValue;                         // 0x0008(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_RegisterMoveControl_Result;               // 0x000C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_D[0x3];                                        // 0x000D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class UMOVECONTROL_DisorientedMove_C*         CallFunc_SpawnObject_ReturnValue;                  // 0x0010(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0018(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_ExpireMoveControl_Result;                 // 0x0019(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsValid_ReturnValue_1;                    // 0x001A(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(PAWN_Hacker_Implant_C_OnDisorientationChanged) == 0x000008, "Wrong alignment on PAWN_Hacker_Implant_C_OnDisorientationChanged");
static_assert(sizeof(PAWN_Hacker_Implant_C_OnDisorientationChanged) == 0x000020, "Wrong size on PAWN_Hacker_Implant_C_OnDisorientationChanged");
static_assert(offsetof(PAWN_Hacker_Implant_C_OnDisorientationChanged, DisorientationAmount) == 0x000000, "Member 'PAWN_Hacker_Implant_C_OnDisorientationChanged::DisorientationAmount' has a wrong offset!");
static_assert(offsetof(PAWN_Hacker_Implant_C_OnDisorientationChanged, CallFunc_Greater_FloatFloat_ReturnValue) == 0x000004, "Member 'PAWN_Hacker_Implant_C_OnDisorientationChanged::CallFunc_Greater_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(PAWN_Hacker_Implant_C_OnDisorientationChanged, CallFunc_FMin_ReturnValue) == 0x000008, "Member 'PAWN_Hacker_Implant_C_OnDisorientationChanged::CallFunc_FMin_ReturnValue' has a wrong offset!");
static_assert(offsetof(PAWN_Hacker_Implant_C_OnDisorientationChanged, CallFunc_RegisterMoveControl_Result) == 0x00000C, "Member 'PAWN_Hacker_Implant_C_OnDisorientationChanged::CallFunc_RegisterMoveControl_Result' has a wrong offset!");
static_assert(offsetof(PAWN_Hacker_Implant_C_OnDisorientationChanged, CallFunc_SpawnObject_ReturnValue) == 0x000010, "Member 'PAWN_Hacker_Implant_C_OnDisorientationChanged::CallFunc_SpawnObject_ReturnValue' has a wrong offset!");
static_assert(offsetof(PAWN_Hacker_Implant_C_OnDisorientationChanged, CallFunc_IsValid_ReturnValue) == 0x000018, "Member 'PAWN_Hacker_Implant_C_OnDisorientationChanged::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(PAWN_Hacker_Implant_C_OnDisorientationChanged, CallFunc_ExpireMoveControl_Result) == 0x000019, "Member 'PAWN_Hacker_Implant_C_OnDisorientationChanged::CallFunc_ExpireMoveControl_Result' has a wrong offset!");
static_assert(offsetof(PAWN_Hacker_Implant_C_OnDisorientationChanged, CallFunc_IsValid_ReturnValue_1) == 0x00001A, "Member 'PAWN_Hacker_Implant_C_OnDisorientationChanged::CallFunc_IsValid_ReturnValue_1' has a wrong offset!");

// Function PAWN_Hacker_Implant.PAWN_Hacker_Implant_C.EVENT_OnDrunkAttribChanged
// 0x0010 (0x0010 - 0x0000)
struct PAWN_Hacker_Implant_C_EVENT_OnDrunkAttribChanged final
{
public:
	float                                         CurrValue;                                         // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         LastValue;                                         // 0x0004(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_GetAttribValue_ReturnValue;               // 0x0008(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_FMax_ReturnValue;                         // 0x000C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(PAWN_Hacker_Implant_C_EVENT_OnDrunkAttribChanged) == 0x000004, "Wrong alignment on PAWN_Hacker_Implant_C_EVENT_OnDrunkAttribChanged");
static_assert(sizeof(PAWN_Hacker_Implant_C_EVENT_OnDrunkAttribChanged) == 0x000010, "Wrong size on PAWN_Hacker_Implant_C_EVENT_OnDrunkAttribChanged");
static_assert(offsetof(PAWN_Hacker_Implant_C_EVENT_OnDrunkAttribChanged, CurrValue) == 0x000000, "Member 'PAWN_Hacker_Implant_C_EVENT_OnDrunkAttribChanged::CurrValue' has a wrong offset!");
static_assert(offsetof(PAWN_Hacker_Implant_C_EVENT_OnDrunkAttribChanged, LastValue) == 0x000004, "Member 'PAWN_Hacker_Implant_C_EVENT_OnDrunkAttribChanged::LastValue' has a wrong offset!");
static_assert(offsetof(PAWN_Hacker_Implant_C_EVENT_OnDrunkAttribChanged, CallFunc_GetAttribValue_ReturnValue) == 0x000008, "Member 'PAWN_Hacker_Implant_C_EVENT_OnDrunkAttribChanged::CallFunc_GetAttribValue_ReturnValue' has a wrong offset!");
static_assert(offsetof(PAWN_Hacker_Implant_C_EVENT_OnDrunkAttribChanged, CallFunc_FMax_ReturnValue) == 0x00000C, "Member 'PAWN_Hacker_Implant_C_EVENT_OnDrunkAttribChanged::CallFunc_FMax_ReturnValue' has a wrong offset!");

// Function PAWN_Hacker_Implant.PAWN_Hacker_Implant_C.ReceiveUnpossessed
// 0x0008 (0x0008 - 0x0000)
struct PAWN_Hacker_Implant_C_ReceiveUnpossessed final
{
public:
	class AController*                            OldController;                                     // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(PAWN_Hacker_Implant_C_ReceiveUnpossessed) == 0x000008, "Wrong alignment on PAWN_Hacker_Implant_C_ReceiveUnpossessed");
static_assert(sizeof(PAWN_Hacker_Implant_C_ReceiveUnpossessed) == 0x000008, "Wrong size on PAWN_Hacker_Implant_C_ReceiveUnpossessed");
static_assert(offsetof(PAWN_Hacker_Implant_C_ReceiveUnpossessed, OldController) == 0x000000, "Member 'PAWN_Hacker_Implant_C_ReceiveUnpossessed::OldController' has a wrong offset!");

// Function PAWN_Hacker_Implant.PAWN_Hacker_Implant_C.OnInteractionFailed
// 0x0020 (0x0020 - 0x0000)
struct PAWN_Hacker_Implant_C_OnInteractionFailed final
{
public:
	class FText                                   FailedText;                                        // 0x0000(0x0018)(BlueprintVisible, BlueprintReadOnly, Parm)
	class UWIDGET_PlayerHUD_C*                    CallFunc_GetNeuralHUD_Result;                      // 0x0018(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(PAWN_Hacker_Implant_C_OnInteractionFailed) == 0x000008, "Wrong alignment on PAWN_Hacker_Implant_C_OnInteractionFailed");
static_assert(sizeof(PAWN_Hacker_Implant_C_OnInteractionFailed) == 0x000020, "Wrong size on PAWN_Hacker_Implant_C_OnInteractionFailed");
static_assert(offsetof(PAWN_Hacker_Implant_C_OnInteractionFailed, FailedText) == 0x000000, "Member 'PAWN_Hacker_Implant_C_OnInteractionFailed::FailedText' has a wrong offset!");
static_assert(offsetof(PAWN_Hacker_Implant_C_OnInteractionFailed, CallFunc_GetNeuralHUD_Result) == 0x000018, "Member 'PAWN_Hacker_Implant_C_OnInteractionFailed::CallFunc_GetNeuralHUD_Result' has a wrong offset!");

// Function PAWN_Hacker_Implant.PAWN_Hacker_Implant_C.InitializeAttributes
// 0x0028 (0x0028 - 0x0000)
struct PAWN_Hacker_Implant_C_InitializeAttributes final
{
public:
	TDelegate<void(float CurrValue, float LastValue)> K2Node_CreateDelegate_OutputDelegate;              // 0x0000(0x0010)(ZeroConstructor, NoDestructor)
	float                                         CallFunc_GetAttribValue_ReturnValue;               // 0x0010(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TDelegate<void(float CurrValue, float LastValue)> K2Node_CreateDelegate_OutputDelegate_1;            // 0x0014(0x0010)(ZeroConstructor, NoDestructor)
	float                                         CallFunc_GetAttribValue_ReturnValue_1;             // 0x0024(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(PAWN_Hacker_Implant_C_InitializeAttributes) == 0x000004, "Wrong alignment on PAWN_Hacker_Implant_C_InitializeAttributes");
static_assert(sizeof(PAWN_Hacker_Implant_C_InitializeAttributes) == 0x000028, "Wrong size on PAWN_Hacker_Implant_C_InitializeAttributes");
static_assert(offsetof(PAWN_Hacker_Implant_C_InitializeAttributes, K2Node_CreateDelegate_OutputDelegate) == 0x000000, "Member 'PAWN_Hacker_Implant_C_InitializeAttributes::K2Node_CreateDelegate_OutputDelegate' has a wrong offset!");
static_assert(offsetof(PAWN_Hacker_Implant_C_InitializeAttributes, CallFunc_GetAttribValue_ReturnValue) == 0x000010, "Member 'PAWN_Hacker_Implant_C_InitializeAttributes::CallFunc_GetAttribValue_ReturnValue' has a wrong offset!");
static_assert(offsetof(PAWN_Hacker_Implant_C_InitializeAttributes, K2Node_CreateDelegate_OutputDelegate_1) == 0x000014, "Member 'PAWN_Hacker_Implant_C_InitializeAttributes::K2Node_CreateDelegate_OutputDelegate_1' has a wrong offset!");
static_assert(offsetof(PAWN_Hacker_Implant_C_InitializeAttributes, CallFunc_GetAttribValue_ReturnValue_1) == 0x000024, "Member 'PAWN_Hacker_Implant_C_InitializeAttributes::CallFunc_GetAttribValue_ReturnValue_1' has a wrong offset!");

// Function PAWN_Hacker_Implant.PAWN_Hacker_Implant_C.GamepadInteract
// 0x0048 (0x0048 - 0x0000)
struct PAWN_Hacker_Implant_C_GamepadInteract final
{
public:
	bool                                          IsDown;                                            // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UWIDGET_PlayerHUD_C*                    CallFunc_GetNeuralHUD_Result;                      // 0x0008(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UWIDGET_PlayerHUD_C*                    CallFunc_GetNeuralHUD_Result_1;                    // 0x0010(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UWIDGET_PlayerHUD_C*                    CallFunc_GetNeuralHUD_Result_2;                    // 0x0018(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UITEM_Base_C*                           CallFunc_GetCursorItem_Result;                     // 0x0020(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0028(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_29[0x7];                                       // 0x0029(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UWIDGET_PlayerHUD_C*                    CallFunc_GetNeuralHUD_Result_3;                    // 0x0030(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UWIDGET_PlayerHUD_C*                    CallFunc_GetNeuralHUD_Result_4;                    // 0x0038(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsVisible_ReturnValue;                    // 0x0040(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Not_PreBool_ReturnValue;                  // 0x0041(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(PAWN_Hacker_Implant_C_GamepadInteract) == 0x000008, "Wrong alignment on PAWN_Hacker_Implant_C_GamepadInteract");
static_assert(sizeof(PAWN_Hacker_Implant_C_GamepadInteract) == 0x000048, "Wrong size on PAWN_Hacker_Implant_C_GamepadInteract");
static_assert(offsetof(PAWN_Hacker_Implant_C_GamepadInteract, IsDown) == 0x000000, "Member 'PAWN_Hacker_Implant_C_GamepadInteract::IsDown' has a wrong offset!");
static_assert(offsetof(PAWN_Hacker_Implant_C_GamepadInteract, CallFunc_GetNeuralHUD_Result) == 0x000008, "Member 'PAWN_Hacker_Implant_C_GamepadInteract::CallFunc_GetNeuralHUD_Result' has a wrong offset!");
static_assert(offsetof(PAWN_Hacker_Implant_C_GamepadInteract, CallFunc_GetNeuralHUD_Result_1) == 0x000010, "Member 'PAWN_Hacker_Implant_C_GamepadInteract::CallFunc_GetNeuralHUD_Result_1' has a wrong offset!");
static_assert(offsetof(PAWN_Hacker_Implant_C_GamepadInteract, CallFunc_GetNeuralHUD_Result_2) == 0x000018, "Member 'PAWN_Hacker_Implant_C_GamepadInteract::CallFunc_GetNeuralHUD_Result_2' has a wrong offset!");
static_assert(offsetof(PAWN_Hacker_Implant_C_GamepadInteract, CallFunc_GetCursorItem_Result) == 0x000020, "Member 'PAWN_Hacker_Implant_C_GamepadInteract::CallFunc_GetCursorItem_Result' has a wrong offset!");
static_assert(offsetof(PAWN_Hacker_Implant_C_GamepadInteract, CallFunc_IsValid_ReturnValue) == 0x000028, "Member 'PAWN_Hacker_Implant_C_GamepadInteract::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(PAWN_Hacker_Implant_C_GamepadInteract, CallFunc_GetNeuralHUD_Result_3) == 0x000030, "Member 'PAWN_Hacker_Implant_C_GamepadInteract::CallFunc_GetNeuralHUD_Result_3' has a wrong offset!");
static_assert(offsetof(PAWN_Hacker_Implant_C_GamepadInteract, CallFunc_GetNeuralHUD_Result_4) == 0x000038, "Member 'PAWN_Hacker_Implant_C_GamepadInteract::CallFunc_GetNeuralHUD_Result_4' has a wrong offset!");
static_assert(offsetof(PAWN_Hacker_Implant_C_GamepadInteract, CallFunc_IsVisible_ReturnValue) == 0x000040, "Member 'PAWN_Hacker_Implant_C_GamepadInteract::CallFunc_IsVisible_ReturnValue' has a wrong offset!");
static_assert(offsetof(PAWN_Hacker_Implant_C_GamepadInteract, CallFunc_Not_PreBool_ReturnValue) == 0x000041, "Member 'PAWN_Hacker_Implant_C_GamepadInteract::CallFunc_Not_PreBool_ReturnValue' has a wrong offset!");

// Function PAWN_Hacker_Implant.PAWN_Hacker_Implant_C.OnBioPoisoningChanged
// 0x0020 (0x0020 - 0x0000)
struct PAWN_Hacker_Implant_C_OnBioPoisoningChanged final
{
public:
	class UAttribMod*                             HazardMod;                                         // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CurrValue;                                         // 0x0008(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         LastValue;                                         // 0x000C(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UWIDGET_PlayerHUD_C*                    CallFunc_GetNeuralHUD_Result;                      // 0x0010(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_FFloor_ReturnValue;                       // 0x0018(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(PAWN_Hacker_Implant_C_OnBioPoisoningChanged) == 0x000008, "Wrong alignment on PAWN_Hacker_Implant_C_OnBioPoisoningChanged");
static_assert(sizeof(PAWN_Hacker_Implant_C_OnBioPoisoningChanged) == 0x000020, "Wrong size on PAWN_Hacker_Implant_C_OnBioPoisoningChanged");
static_assert(offsetof(PAWN_Hacker_Implant_C_OnBioPoisoningChanged, HazardMod) == 0x000000, "Member 'PAWN_Hacker_Implant_C_OnBioPoisoningChanged::HazardMod' has a wrong offset!");
static_assert(offsetof(PAWN_Hacker_Implant_C_OnBioPoisoningChanged, CurrValue) == 0x000008, "Member 'PAWN_Hacker_Implant_C_OnBioPoisoningChanged::CurrValue' has a wrong offset!");
static_assert(offsetof(PAWN_Hacker_Implant_C_OnBioPoisoningChanged, LastValue) == 0x00000C, "Member 'PAWN_Hacker_Implant_C_OnBioPoisoningChanged::LastValue' has a wrong offset!");
static_assert(offsetof(PAWN_Hacker_Implant_C_OnBioPoisoningChanged, CallFunc_GetNeuralHUD_Result) == 0x000010, "Member 'PAWN_Hacker_Implant_C_OnBioPoisoningChanged::CallFunc_GetNeuralHUD_Result' has a wrong offset!");
static_assert(offsetof(PAWN_Hacker_Implant_C_OnBioPoisoningChanged, CallFunc_FFloor_ReturnValue) == 0x000018, "Member 'PAWN_Hacker_Implant_C_OnBioPoisoningChanged::CallFunc_FFloor_ReturnValue' has a wrong offset!");

// Function PAWN_Hacker_Implant.PAWN_Hacker_Implant_C.CanSaveGames
// 0x0004 (0x0004 - 0x0000)
struct PAWN_Hacker_Implant_C_CanSaveGames final
{
public:
	bool                                          Result;                                            // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsDirectlyThreatenedByAnyEnemy_Result;    // 0x0001(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Not_PreBool_ReturnValue;                  // 0x0002(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BooleanAND_ReturnValue;                   // 0x0003(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(PAWN_Hacker_Implant_C_CanSaveGames) == 0x000001, "Wrong alignment on PAWN_Hacker_Implant_C_CanSaveGames");
static_assert(sizeof(PAWN_Hacker_Implant_C_CanSaveGames) == 0x000004, "Wrong size on PAWN_Hacker_Implant_C_CanSaveGames");
static_assert(offsetof(PAWN_Hacker_Implant_C_CanSaveGames, Result) == 0x000000, "Member 'PAWN_Hacker_Implant_C_CanSaveGames::Result' has a wrong offset!");
static_assert(offsetof(PAWN_Hacker_Implant_C_CanSaveGames, CallFunc_IsDirectlyThreatenedByAnyEnemy_Result) == 0x000001, "Member 'PAWN_Hacker_Implant_C_CanSaveGames::CallFunc_IsDirectlyThreatenedByAnyEnemy_Result' has a wrong offset!");
static_assert(offsetof(PAWN_Hacker_Implant_C_CanSaveGames, CallFunc_Not_PreBool_ReturnValue) == 0x000002, "Member 'PAWN_Hacker_Implant_C_CanSaveGames::CallFunc_Not_PreBool_ReturnValue' has a wrong offset!");
static_assert(offsetof(PAWN_Hacker_Implant_C_CanSaveGames, CallFunc_BooleanAND_ReturnValue) == 0x000003, "Member 'PAWN_Hacker_Implant_C_CanSaveGames::CallFunc_BooleanAND_ReturnValue' has a wrong offset!");

// Function PAWN_Hacker_Implant.PAWN_Hacker_Implant_C.SetEmissiveStrength
// 0x0004 (0x0004 - 0x0000)
struct PAWN_Hacker_Implant_C_SetEmissiveStrength final
{
public:
	float                                         Strength;                                          // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(PAWN_Hacker_Implant_C_SetEmissiveStrength) == 0x000004, "Wrong alignment on PAWN_Hacker_Implant_C_SetEmissiveStrength");
static_assert(sizeof(PAWN_Hacker_Implant_C_SetEmissiveStrength) == 0x000004, "Wrong size on PAWN_Hacker_Implant_C_SetEmissiveStrength");
static_assert(offsetof(PAWN_Hacker_Implant_C_SetEmissiveStrength, Strength) == 0x000000, "Member 'PAWN_Hacker_Implant_C_SetEmissiveStrength::Strength' has a wrong offset!");

// Function PAWN_Hacker_Implant.PAWN_Hacker_Implant_C.InitializeEmissiveStrength
// 0x000C (0x000C - 0x0000)
struct PAWN_Hacker_Implant_C_InitializeEmissiveStrength final
{
public:
	bool                                          BeginPlay;                                         // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_GetAttribValue_ReturnValue;               // 0x0004(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Subtract_FloatFloat_ReturnValue;          // 0x0008(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(PAWN_Hacker_Implant_C_InitializeEmissiveStrength) == 0x000004, "Wrong alignment on PAWN_Hacker_Implant_C_InitializeEmissiveStrength");
static_assert(sizeof(PAWN_Hacker_Implant_C_InitializeEmissiveStrength) == 0x00000C, "Wrong size on PAWN_Hacker_Implant_C_InitializeEmissiveStrength");
static_assert(offsetof(PAWN_Hacker_Implant_C_InitializeEmissiveStrength, BeginPlay) == 0x000000, "Member 'PAWN_Hacker_Implant_C_InitializeEmissiveStrength::BeginPlay' has a wrong offset!");
static_assert(offsetof(PAWN_Hacker_Implant_C_InitializeEmissiveStrength, CallFunc_GetAttribValue_ReturnValue) == 0x000004, "Member 'PAWN_Hacker_Implant_C_InitializeEmissiveStrength::CallFunc_GetAttribValue_ReturnValue' has a wrong offset!");
static_assert(offsetof(PAWN_Hacker_Implant_C_InitializeEmissiveStrength, CallFunc_Subtract_FloatFloat_ReturnValue) == 0x000008, "Member 'PAWN_Hacker_Implant_C_InitializeEmissiveStrength::CallFunc_Subtract_FloatFloat_ReturnValue' has a wrong offset!");

// Function PAWN_Hacker_Implant.PAWN_Hacker_Implant_C.EVENT_OnDisableAttribChanged
// 0x0014 (0x0014 - 0x0000)
struct PAWN_Hacker_Implant_C_EVENT_OnDisableAttribChanged final
{
public:
	float                                         CurrValue;                                         // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         LastValue;                                         // 0x0004(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Subtract_FloatFloat_ReturnValue;          // 0x0008(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_GetAttribValue_ReturnValue;               // 0x000C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_FMax_ReturnValue;                         // 0x0010(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(PAWN_Hacker_Implant_C_EVENT_OnDisableAttribChanged) == 0x000004, "Wrong alignment on PAWN_Hacker_Implant_C_EVENT_OnDisableAttribChanged");
static_assert(sizeof(PAWN_Hacker_Implant_C_EVENT_OnDisableAttribChanged) == 0x000014, "Wrong size on PAWN_Hacker_Implant_C_EVENT_OnDisableAttribChanged");
static_assert(offsetof(PAWN_Hacker_Implant_C_EVENT_OnDisableAttribChanged, CurrValue) == 0x000000, "Member 'PAWN_Hacker_Implant_C_EVENT_OnDisableAttribChanged::CurrValue' has a wrong offset!");
static_assert(offsetof(PAWN_Hacker_Implant_C_EVENT_OnDisableAttribChanged, LastValue) == 0x000004, "Member 'PAWN_Hacker_Implant_C_EVENT_OnDisableAttribChanged::LastValue' has a wrong offset!");
static_assert(offsetof(PAWN_Hacker_Implant_C_EVENT_OnDisableAttribChanged, CallFunc_Subtract_FloatFloat_ReturnValue) == 0x000008, "Member 'PAWN_Hacker_Implant_C_EVENT_OnDisableAttribChanged::CallFunc_Subtract_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(PAWN_Hacker_Implant_C_EVENT_OnDisableAttribChanged, CallFunc_GetAttribValue_ReturnValue) == 0x00000C, "Member 'PAWN_Hacker_Implant_C_EVENT_OnDisableAttribChanged::CallFunc_GetAttribValue_ReturnValue' has a wrong offset!");
static_assert(offsetof(PAWN_Hacker_Implant_C_EVENT_OnDisableAttribChanged, CallFunc_FMax_ReturnValue) == 0x000010, "Member 'PAWN_Hacker_Implant_C_EVENT_OnDisableAttribChanged::CallFunc_FMax_ReturnValue' has a wrong offset!");

// Function PAWN_Hacker_Implant.PAWN_Hacker_Implant_C.InitializeCharacter
// 0x0002 (0x0002 - 0x0000)
struct PAWN_Hacker_Implant_C_InitializeCharacter final
{
public:
	bool                                          Result;                                            // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_InitializeCharacter_Result;               // 0x0001(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(PAWN_Hacker_Implant_C_InitializeCharacter) == 0x000001, "Wrong alignment on PAWN_Hacker_Implant_C_InitializeCharacter");
static_assert(sizeof(PAWN_Hacker_Implant_C_InitializeCharacter) == 0x000002, "Wrong size on PAWN_Hacker_Implant_C_InitializeCharacter");
static_assert(offsetof(PAWN_Hacker_Implant_C_InitializeCharacter, Result) == 0x000000, "Member 'PAWN_Hacker_Implant_C_InitializeCharacter::Result' has a wrong offset!");
static_assert(offsetof(PAWN_Hacker_Implant_C_InitializeCharacter, CallFunc_InitializeCharacter_Result) == 0x000001, "Member 'PAWN_Hacker_Implant_C_InitializeCharacter::CallFunc_InitializeCharacter_Result' has a wrong offset!");

}

