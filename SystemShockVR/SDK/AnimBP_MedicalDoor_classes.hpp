#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: AnimBP_MedicalDoor

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "Engine_classes.hpp"
#include "AnimGraphRuntime_structs.hpp"


namespace SDK
{

// AnimBlueprintGeneratedClass AnimBP_MedicalDoor.AnimBP_MedicalDoor_C
// 0x05E0 (0x08A0 - 0x02C0)
class UAnimBP_MedicalDoor_C final : public UAnimInstance
{
public:
	uint8                                         Pad_2B8[0x8];                                      // 0x02B8(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x02C0(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	struct FAnimNode_Root                         AnimGraphNode_Root;                                // 0x02C8(0x0030)()
	struct FAnimNode_ApplyAdditive                AnimGraphNode_ApplyAdditive_1;                     // 0x02F8(0x00C8)()
	struct FAnimNode_ApplyAdditive                AnimGraphNode_ApplyAdditive;                       // 0x03C0(0x00C8)()
	struct FAnimNode_SequencePlayer               AnimGraphNode_SequencePlayer_4;                    // 0x0488(0x0080)()
	struct FAnimNode_SequencePlayer               AnimGraphNode_SequencePlayer_3;                    // 0x0508(0x0080)()
	struct FAnimNode_BlendListByBool              AnimGraphNode_BlendListByBool_1;                   // 0x0588(0x00A0)()
	struct FAnimNode_SequencePlayer               AnimGraphNode_SequencePlayer_2;                    // 0x0628(0x0080)()
	struct FAnimNode_SequencePlayer               AnimGraphNode_SequencePlayer_1;                    // 0x06A8(0x0080)()
	struct FAnimNode_Slot                         AnimGraphNode_Slot;                                // 0x0728(0x0048)()
	struct FAnimNode_SequencePlayer               AnimGraphNode_SequencePlayer;                      // 0x0770(0x0080)()
	struct FAnimNode_BlendListByBool              AnimGraphNode_BlendListByBool;                     // 0x07F0(0x00A0)()
	bool                                          Open;                                              // 0x0890(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          Locked;                                            // 0x0891(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          NoButton_Front;                                    // 0x0892(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          NoButton_Back;                                     // 0x0893(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)

public:
	void ExecuteUbergraph_AnimBP_MedicalDoor(int32 EntryPoint);
	void EvaluateGraphExposedInputs_ExecuteUbergraph_AnimBP_MedicalDoor_AnimGraphNode_ApplyAdditive_2C36D1DE44838503DA4209B977366814();
	void EvaluateGraphExposedInputs_ExecuteUbergraph_AnimBP_MedicalDoor_AnimGraphNode_ApplyAdditive_25412EDB4DF833F49F2BF2AA05F68091();
	void FinishUnlocking();
	void AnimGraph(struct FPoseLink* AnimGraph_0);
	void OpenDoor(bool* Result);
	void CloseDoor(bool* Result);
	void IsLocked(bool* Result);
	void SetLocked(bool LockedState, bool* Result);
	void HideFrontButton(bool HideState, bool* Result);
	void HideBackButton(bool HideState, bool* Result);
	void UnlockDoor(bool* Result);

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"AnimBP_MedicalDoor_C">();
	}
	static class UAnimBP_MedicalDoor_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<UAnimBP_MedicalDoor_C>();
	}
};
static_assert(alignof(UAnimBP_MedicalDoor_C) == 0x000010, "Wrong alignment on UAnimBP_MedicalDoor_C");
static_assert(sizeof(UAnimBP_MedicalDoor_C) == 0x0008A0, "Wrong size on UAnimBP_MedicalDoor_C");
static_assert(offsetof(UAnimBP_MedicalDoor_C, UberGraphFrame) == 0x0002C0, "Member 'UAnimBP_MedicalDoor_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(UAnimBP_MedicalDoor_C, AnimGraphNode_Root) == 0x0002C8, "Member 'UAnimBP_MedicalDoor_C::AnimGraphNode_Root' has a wrong offset!");
static_assert(offsetof(UAnimBP_MedicalDoor_C, AnimGraphNode_ApplyAdditive_1) == 0x0002F8, "Member 'UAnimBP_MedicalDoor_C::AnimGraphNode_ApplyAdditive_1' has a wrong offset!");
static_assert(offsetof(UAnimBP_MedicalDoor_C, AnimGraphNode_ApplyAdditive) == 0x0003C0, "Member 'UAnimBP_MedicalDoor_C::AnimGraphNode_ApplyAdditive' has a wrong offset!");
static_assert(offsetof(UAnimBP_MedicalDoor_C, AnimGraphNode_SequencePlayer_4) == 0x000488, "Member 'UAnimBP_MedicalDoor_C::AnimGraphNode_SequencePlayer_4' has a wrong offset!");
static_assert(offsetof(UAnimBP_MedicalDoor_C, AnimGraphNode_SequencePlayer_3) == 0x000508, "Member 'UAnimBP_MedicalDoor_C::AnimGraphNode_SequencePlayer_3' has a wrong offset!");
static_assert(offsetof(UAnimBP_MedicalDoor_C, AnimGraphNode_BlendListByBool_1) == 0x000588, "Member 'UAnimBP_MedicalDoor_C::AnimGraphNode_BlendListByBool_1' has a wrong offset!");
static_assert(offsetof(UAnimBP_MedicalDoor_C, AnimGraphNode_SequencePlayer_2) == 0x000628, "Member 'UAnimBP_MedicalDoor_C::AnimGraphNode_SequencePlayer_2' has a wrong offset!");
static_assert(offsetof(UAnimBP_MedicalDoor_C, AnimGraphNode_SequencePlayer_1) == 0x0006A8, "Member 'UAnimBP_MedicalDoor_C::AnimGraphNode_SequencePlayer_1' has a wrong offset!");
static_assert(offsetof(UAnimBP_MedicalDoor_C, AnimGraphNode_Slot) == 0x000728, "Member 'UAnimBP_MedicalDoor_C::AnimGraphNode_Slot' has a wrong offset!");
static_assert(offsetof(UAnimBP_MedicalDoor_C, AnimGraphNode_SequencePlayer) == 0x000770, "Member 'UAnimBP_MedicalDoor_C::AnimGraphNode_SequencePlayer' has a wrong offset!");
static_assert(offsetof(UAnimBP_MedicalDoor_C, AnimGraphNode_BlendListByBool) == 0x0007F0, "Member 'UAnimBP_MedicalDoor_C::AnimGraphNode_BlendListByBool' has a wrong offset!");
static_assert(offsetof(UAnimBP_MedicalDoor_C, Open) == 0x000890, "Member 'UAnimBP_MedicalDoor_C::Open' has a wrong offset!");
static_assert(offsetof(UAnimBP_MedicalDoor_C, Locked) == 0x000891, "Member 'UAnimBP_MedicalDoor_C::Locked' has a wrong offset!");
static_assert(offsetof(UAnimBP_MedicalDoor_C, NoButton_Front) == 0x000892, "Member 'UAnimBP_MedicalDoor_C::NoButton_Front' has a wrong offset!");
static_assert(offsetof(UAnimBP_MedicalDoor_C, NoButton_Back) == 0x000893, "Member 'UAnimBP_MedicalDoor_C::NoButton_Back' has a wrong offset!");

}

