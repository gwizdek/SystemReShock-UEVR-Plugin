#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: DEBRIS_Breakable_Base

#include "Basic.hpp"

#include "AttributeSystem_structs.hpp"


namespace SDK::Params
{

// Function DEBRIS_Breakable_Base.DEBRIS_Breakable_Base_C.ExecuteUbergraph_DEBRIS_Breakable_Base
// 0x0004 (0x0004 - 0x0000)
struct DEBRIS_Breakable_Base_C_ExecuteUbergraph_DEBRIS_Breakable_Base final
{
public:
	int32                                         EntryPoint;                                        // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(DEBRIS_Breakable_Base_C_ExecuteUbergraph_DEBRIS_Breakable_Base) == 0x000004, "Wrong alignment on DEBRIS_Breakable_Base_C_ExecuteUbergraph_DEBRIS_Breakable_Base");
static_assert(sizeof(DEBRIS_Breakable_Base_C_ExecuteUbergraph_DEBRIS_Breakable_Base) == 0x000004, "Wrong size on DEBRIS_Breakable_Base_C_ExecuteUbergraph_DEBRIS_Breakable_Base");
static_assert(offsetof(DEBRIS_Breakable_Base_C_ExecuteUbergraph_DEBRIS_Breakable_Base, EntryPoint) == 0x000000, "Member 'DEBRIS_Breakable_Base_C_ExecuteUbergraph_DEBRIS_Breakable_Base::EntryPoint' has a wrong offset!");

// Function DEBRIS_Breakable_Base.DEBRIS_Breakable_Base_C.InitializeBreakableDebris
// 0x0018 (0x0018 - 0x0000)
struct DEBRIS_Breakable_Base_C_InitializeBreakableDebris final
{
public:
	bool                                          CallFunc_IsBroken_Result;                          // 0x0000(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	TDelegate<void(class AActor* OtherActor, const struct FAttribDamageInstance& DamageInstance, class UObject* UserParams)> K2Node_CreateDelegate_OutputDelegate;              // 0x0004(0x0010)(ZeroConstructor, NoDestructor)
	bool                                          CallFunc_HasAttribHandler_ReturnValue;             // 0x0014(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Not_PreBool_ReturnValue;                  // 0x0015(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(DEBRIS_Breakable_Base_C_InitializeBreakableDebris) == 0x000004, "Wrong alignment on DEBRIS_Breakable_Base_C_InitializeBreakableDebris");
static_assert(sizeof(DEBRIS_Breakable_Base_C_InitializeBreakableDebris) == 0x000018, "Wrong size on DEBRIS_Breakable_Base_C_InitializeBreakableDebris");
static_assert(offsetof(DEBRIS_Breakable_Base_C_InitializeBreakableDebris, CallFunc_IsBroken_Result) == 0x000000, "Member 'DEBRIS_Breakable_Base_C_InitializeBreakableDebris::CallFunc_IsBroken_Result' has a wrong offset!");
static_assert(offsetof(DEBRIS_Breakable_Base_C_InitializeBreakableDebris, K2Node_CreateDelegate_OutputDelegate) == 0x000004, "Member 'DEBRIS_Breakable_Base_C_InitializeBreakableDebris::K2Node_CreateDelegate_OutputDelegate' has a wrong offset!");
static_assert(offsetof(DEBRIS_Breakable_Base_C_InitializeBreakableDebris, CallFunc_HasAttribHandler_ReturnValue) == 0x000014, "Member 'DEBRIS_Breakable_Base_C_InitializeBreakableDebris::CallFunc_HasAttribHandler_ReturnValue' has a wrong offset!");
static_assert(offsetof(DEBRIS_Breakable_Base_C_InitializeBreakableDebris, CallFunc_Not_PreBool_ReturnValue) == 0x000015, "Member 'DEBRIS_Breakable_Base_C_InitializeBreakableDebris::CallFunc_Not_PreBool_ReturnValue' has a wrong offset!");

// Function DEBRIS_Breakable_Base.DEBRIS_Breakable_Base_C.IsBroken
// 0x0018 (0x0018 - 0x0000)
struct DEBRIS_Breakable_Base_C_IsBroken final
{
public:
	bool                                          Result;                                            // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UAttributeDef*                          CallFunc_GetHealthAttrib_ReturnValue;              // 0x0008(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_GetAttribValue_ReturnValue;               // 0x0010(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_HasAttribHandler_ReturnValue;             // 0x0014(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_LessEqual_FloatFloat_ReturnValue;         // 0x0015(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(DEBRIS_Breakable_Base_C_IsBroken) == 0x000008, "Wrong alignment on DEBRIS_Breakable_Base_C_IsBroken");
static_assert(sizeof(DEBRIS_Breakable_Base_C_IsBroken) == 0x000018, "Wrong size on DEBRIS_Breakable_Base_C_IsBroken");
static_assert(offsetof(DEBRIS_Breakable_Base_C_IsBroken, Result) == 0x000000, "Member 'DEBRIS_Breakable_Base_C_IsBroken::Result' has a wrong offset!");
static_assert(offsetof(DEBRIS_Breakable_Base_C_IsBroken, CallFunc_GetHealthAttrib_ReturnValue) == 0x000008, "Member 'DEBRIS_Breakable_Base_C_IsBroken::CallFunc_GetHealthAttrib_ReturnValue' has a wrong offset!");
static_assert(offsetof(DEBRIS_Breakable_Base_C_IsBroken, CallFunc_GetAttribValue_ReturnValue) == 0x000010, "Member 'DEBRIS_Breakable_Base_C_IsBroken::CallFunc_GetAttribValue_ReturnValue' has a wrong offset!");
static_assert(offsetof(DEBRIS_Breakable_Base_C_IsBroken, CallFunc_HasAttribHandler_ReturnValue) == 0x000014, "Member 'DEBRIS_Breakable_Base_C_IsBroken::CallFunc_HasAttribHandler_ReturnValue' has a wrong offset!");
static_assert(offsetof(DEBRIS_Breakable_Base_C_IsBroken, CallFunc_LessEqual_FloatFloat_ReturnValue) == 0x000015, "Member 'DEBRIS_Breakable_Base_C_IsBroken::CallFunc_LessEqual_FloatFloat_ReturnValue' has a wrong offset!");

// Function DEBRIS_Breakable_Base.DEBRIS_Breakable_Base_C.OnApplyDamageImpulse
// 0x0050 (0x0050 - 0x0000)
struct DEBRIS_Breakable_Base_C_OnApplyDamageImpulse final
{
public:
	class AActor*                                 OtherActor;                                        // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FAttribDamageInstance                  DamageInstance;                                    // 0x0008(0x0028)(BlueprintVisible, BlueprintReadOnly, Parm)
	class UObject*                                UserParams;                                        // 0x0030(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UOBJ_ImpactData_C*                      ImpactData;                                        // 0x0038(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UOBJ_ImpactData_C*                      K2Node_DynamicCast_AsOBJ_Impact_Data;              // 0x0040(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0048(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Vector_IsNearlyZero_ReturnValue;          // 0x0049(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Not_PreBool_ReturnValue;                  // 0x004A(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x004B(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(DEBRIS_Breakable_Base_C_OnApplyDamageImpulse) == 0x000008, "Wrong alignment on DEBRIS_Breakable_Base_C_OnApplyDamageImpulse");
static_assert(sizeof(DEBRIS_Breakable_Base_C_OnApplyDamageImpulse) == 0x000050, "Wrong size on DEBRIS_Breakable_Base_C_OnApplyDamageImpulse");
static_assert(offsetof(DEBRIS_Breakable_Base_C_OnApplyDamageImpulse, OtherActor) == 0x000000, "Member 'DEBRIS_Breakable_Base_C_OnApplyDamageImpulse::OtherActor' has a wrong offset!");
static_assert(offsetof(DEBRIS_Breakable_Base_C_OnApplyDamageImpulse, DamageInstance) == 0x000008, "Member 'DEBRIS_Breakable_Base_C_OnApplyDamageImpulse::DamageInstance' has a wrong offset!");
static_assert(offsetof(DEBRIS_Breakable_Base_C_OnApplyDamageImpulse, UserParams) == 0x000030, "Member 'DEBRIS_Breakable_Base_C_OnApplyDamageImpulse::UserParams' has a wrong offset!");
static_assert(offsetof(DEBRIS_Breakable_Base_C_OnApplyDamageImpulse, ImpactData) == 0x000038, "Member 'DEBRIS_Breakable_Base_C_OnApplyDamageImpulse::ImpactData' has a wrong offset!");
static_assert(offsetof(DEBRIS_Breakable_Base_C_OnApplyDamageImpulse, K2Node_DynamicCast_AsOBJ_Impact_Data) == 0x000040, "Member 'DEBRIS_Breakable_Base_C_OnApplyDamageImpulse::K2Node_DynamicCast_AsOBJ_Impact_Data' has a wrong offset!");
static_assert(offsetof(DEBRIS_Breakable_Base_C_OnApplyDamageImpulse, K2Node_DynamicCast_bSuccess) == 0x000048, "Member 'DEBRIS_Breakable_Base_C_OnApplyDamageImpulse::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(DEBRIS_Breakable_Base_C_OnApplyDamageImpulse, CallFunc_Vector_IsNearlyZero_ReturnValue) == 0x000049, "Member 'DEBRIS_Breakable_Base_C_OnApplyDamageImpulse::CallFunc_Vector_IsNearlyZero_ReturnValue' has a wrong offset!");
static_assert(offsetof(DEBRIS_Breakable_Base_C_OnApplyDamageImpulse, CallFunc_Not_PreBool_ReturnValue) == 0x00004A, "Member 'DEBRIS_Breakable_Base_C_OnApplyDamageImpulse::CallFunc_Not_PreBool_ReturnValue' has a wrong offset!");
static_assert(offsetof(DEBRIS_Breakable_Base_C_OnApplyDamageImpulse, CallFunc_IsValid_ReturnValue) == 0x00004B, "Member 'DEBRIS_Breakable_Base_C_OnApplyDamageImpulse::CallFunc_IsValid_ReturnValue' has a wrong offset!");

// Function DEBRIS_Breakable_Base.DEBRIS_Breakable_Base_C.OnBreak
// 0x0028 (0x0028 - 0x0000)
struct DEBRIS_Breakable_Base_C_OnBreak final
{
public:
	bool                                          Result;                                            // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class UAttributeDef*>                  Temp_object_Variable;                              // 0x0008(0x0010)(ConstParm, ReferenceParm)
	TDelegate<void(class AActor* OtherActor, const struct FAttribDamageInstance& DamageInstance, class UObject* UserParams)> K2Node_CreateDelegate_OutputDelegate;              // 0x0018(0x0010)(ZeroConstructor, NoDestructor)
};
static_assert(alignof(DEBRIS_Breakable_Base_C_OnBreak) == 0x000008, "Wrong alignment on DEBRIS_Breakable_Base_C_OnBreak");
static_assert(sizeof(DEBRIS_Breakable_Base_C_OnBreak) == 0x000028, "Wrong size on DEBRIS_Breakable_Base_C_OnBreak");
static_assert(offsetof(DEBRIS_Breakable_Base_C_OnBreak, Result) == 0x000000, "Member 'DEBRIS_Breakable_Base_C_OnBreak::Result' has a wrong offset!");
static_assert(offsetof(DEBRIS_Breakable_Base_C_OnBreak, Temp_object_Variable) == 0x000008, "Member 'DEBRIS_Breakable_Base_C_OnBreak::Temp_object_Variable' has a wrong offset!");
static_assert(offsetof(DEBRIS_Breakable_Base_C_OnBreak, K2Node_CreateDelegate_OutputDelegate) == 0x000018, "Member 'DEBRIS_Breakable_Base_C_OnBreak::K2Node_CreateDelegate_OutputDelegate' has a wrong offset!");

// Function DEBRIS_Breakable_Base.DEBRIS_Breakable_Base_C.OnDamaged
// 0x0010 (0x0010 - 0x0000)
struct DEBRIS_Breakable_Base_C_OnDamaged final
{
public:
	class UOBJ_ImpactData_C*                      ImpactData;                                        // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Result;                                            // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(DEBRIS_Breakable_Base_C_OnDamaged) == 0x000008, "Wrong alignment on DEBRIS_Breakable_Base_C_OnDamaged");
static_assert(sizeof(DEBRIS_Breakable_Base_C_OnDamaged) == 0x000010, "Wrong size on DEBRIS_Breakable_Base_C_OnDamaged");
static_assert(offsetof(DEBRIS_Breakable_Base_C_OnDamaged, ImpactData) == 0x000000, "Member 'DEBRIS_Breakable_Base_C_OnDamaged::ImpactData' has a wrong offset!");
static_assert(offsetof(DEBRIS_Breakable_Base_C_OnDamaged, Result) == 0x000008, "Member 'DEBRIS_Breakable_Base_C_OnDamaged::Result' has a wrong offset!");

// Function DEBRIS_Breakable_Base.DEBRIS_Breakable_Base_C.UpdateBrokenSettings
// 0x0001 (0x0001 - 0x0000)
struct DEBRIS_Breakable_Base_C_UpdateBrokenSettings final
{
public:
	bool                                          DuringBeginPlay;                                   // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(DEBRIS_Breakable_Base_C_UpdateBrokenSettings) == 0x000001, "Wrong alignment on DEBRIS_Breakable_Base_C_UpdateBrokenSettings");
static_assert(sizeof(DEBRIS_Breakable_Base_C_UpdateBrokenSettings) == 0x000001, "Wrong size on DEBRIS_Breakable_Base_C_UpdateBrokenSettings");
static_assert(offsetof(DEBRIS_Breakable_Base_C_UpdateBrokenSettings, DuringBeginPlay) == 0x000000, "Member 'DEBRIS_Breakable_Base_C_UpdateBrokenSettings::DuringBeginPlay' has a wrong offset!");

// Function DEBRIS_Breakable_Base.DEBRIS_Breakable_Base_C.EVENT_OnDamageReceived
// 0x0060 (0x0060 - 0x0000)
struct DEBRIS_Breakable_Base_C_EVENT_OnDamageReceived final
{
public:
	class AActor*                                 OtherActor;                                        // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FAttribDamageInstance                  DamageInstance;                                    // 0x0008(0x0028)(BlueprintVisible, BlueprintReadOnly, Parm)
	class UObject*                                UserParams;                                        // 0x0030(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_OnBreak_Result;                           // 0x0038(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_39[0x7];                                       // 0x0039(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UOBJ_ImpactData_C*                      K2Node_DynamicCast_AsOBJ_Impact_Data;              // 0x0040(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0048(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_OnDamaged_Result;                         // 0x0049(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_4A[0x6];                                       // 0x004A(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class UAttributeDef*                          CallFunc_GetHealthAttrib_ReturnValue;              // 0x0050(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_GetAttribValue_ReturnValue;               // 0x0058(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_LessEqual_FloatFloat_ReturnValue;         // 0x005C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(DEBRIS_Breakable_Base_C_EVENT_OnDamageReceived) == 0x000008, "Wrong alignment on DEBRIS_Breakable_Base_C_EVENT_OnDamageReceived");
static_assert(sizeof(DEBRIS_Breakable_Base_C_EVENT_OnDamageReceived) == 0x000060, "Wrong size on DEBRIS_Breakable_Base_C_EVENT_OnDamageReceived");
static_assert(offsetof(DEBRIS_Breakable_Base_C_EVENT_OnDamageReceived, OtherActor) == 0x000000, "Member 'DEBRIS_Breakable_Base_C_EVENT_OnDamageReceived::OtherActor' has a wrong offset!");
static_assert(offsetof(DEBRIS_Breakable_Base_C_EVENT_OnDamageReceived, DamageInstance) == 0x000008, "Member 'DEBRIS_Breakable_Base_C_EVENT_OnDamageReceived::DamageInstance' has a wrong offset!");
static_assert(offsetof(DEBRIS_Breakable_Base_C_EVENT_OnDamageReceived, UserParams) == 0x000030, "Member 'DEBRIS_Breakable_Base_C_EVENT_OnDamageReceived::UserParams' has a wrong offset!");
static_assert(offsetof(DEBRIS_Breakable_Base_C_EVENT_OnDamageReceived, CallFunc_OnBreak_Result) == 0x000038, "Member 'DEBRIS_Breakable_Base_C_EVENT_OnDamageReceived::CallFunc_OnBreak_Result' has a wrong offset!");
static_assert(offsetof(DEBRIS_Breakable_Base_C_EVENT_OnDamageReceived, K2Node_DynamicCast_AsOBJ_Impact_Data) == 0x000040, "Member 'DEBRIS_Breakable_Base_C_EVENT_OnDamageReceived::K2Node_DynamicCast_AsOBJ_Impact_Data' has a wrong offset!");
static_assert(offsetof(DEBRIS_Breakable_Base_C_EVENT_OnDamageReceived, K2Node_DynamicCast_bSuccess) == 0x000048, "Member 'DEBRIS_Breakable_Base_C_EVENT_OnDamageReceived::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(DEBRIS_Breakable_Base_C_EVENT_OnDamageReceived, CallFunc_OnDamaged_Result) == 0x000049, "Member 'DEBRIS_Breakable_Base_C_EVENT_OnDamageReceived::CallFunc_OnDamaged_Result' has a wrong offset!");
static_assert(offsetof(DEBRIS_Breakable_Base_C_EVENT_OnDamageReceived, CallFunc_GetHealthAttrib_ReturnValue) == 0x000050, "Member 'DEBRIS_Breakable_Base_C_EVENT_OnDamageReceived::CallFunc_GetHealthAttrib_ReturnValue' has a wrong offset!");
static_assert(offsetof(DEBRIS_Breakable_Base_C_EVENT_OnDamageReceived, CallFunc_GetAttribValue_ReturnValue) == 0x000058, "Member 'DEBRIS_Breakable_Base_C_EVENT_OnDamageReceived::CallFunc_GetAttribValue_ReturnValue' has a wrong offset!");
static_assert(offsetof(DEBRIS_Breakable_Base_C_EVENT_OnDamageReceived, CallFunc_LessEqual_FloatFloat_ReturnValue) == 0x00005C, "Member 'DEBRIS_Breakable_Base_C_EVENT_OnDamageReceived::CallFunc_LessEqual_FloatFloat_ReturnValue' has a wrong offset!");

}

