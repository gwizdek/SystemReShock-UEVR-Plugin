#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: LevelVoxelization

#include "Basic.hpp"

#include "CoreUObject_structs.hpp"


namespace SDK
{

// Enum LevelVoxelization.ECullableRoomAssignmentType
// NumValues: 0x0005
enum class ECullableRoomAssignmentType : uint8
{
	Disabled                                 = 0,
	NearestRoom                              = 1,
	ConnectedRooms                           = 2,
	OverlappingRooms                         = 3,
	ECullableRoomAssignmentType_MAX          = 4,
};

// Enum LevelVoxelization.EVoxelGridDirection
// NumValues: 0x0008
enum class EVoxelGridDirection : uint8
{
	Forward                                  = 0,
	Backward                                 = 1,
	Right                                    = 2,
	Left                                     = 3,
	Up                                       = 4,
	Down                                     = 5,
	Count                                    = 6,
	EVoxelGridDirection_MAX                  = 7,
};

// Enum LevelVoxelization.EVoxelNavigationResult
// NumValues: 0x0005
enum class EVoxelNavigationResult : uint8
{
	Invalid                                  = 0,
	Incomplete                               = 1,
	Closest                                  = 2,
	Success                                  = 3,
	EVoxelNavigationResult_MAX               = 4,
};

// Enum LevelVoxelization.EVoxelNavigationType
// NumValues: 0x0004
enum class EVoxelNavigationType : uint8
{
	Walk                                     = 0,
	Climb                                    = 1,
	Fly                                      = 2,
	EVoxelNavigationType_MAX                 = 3,
};

// Enum LevelVoxelization.EVoxelSpatialQueryFuncType
// NumValues: 0x0007
enum class EVoxelSpatialQueryFuncType : uint8
{
	Constant                                 = 0,
	LinearDecay                              = 1,
	LinearGrowth                             = 2,
	SquareDecay                              = 3,
	SquareGrowth                             = 4,
	MidpointGrowth                           = 5,
	EVoxelSpatialQueryFuncType_MAX           = 6,
};

// Enum LevelVoxelization.EVoxelNavAgentVisLocationType
// NumValues: 0x0006
enum class EVoxelNavAgentVisLocationType : uint8
{
	Head                                     = 0,
	Body                                     = 1,
	RightArm                                 = 2,
	LeftArm                                  = 3,
	Legs                                     = 4,
	EVoxelNavAgentVisLocationType_MAX        = 5,
};

// Enum LevelVoxelization.EVoxelNavModifierState
// NumValues: 0x0004
enum class EVoxelNavModifierState : uint8
{
	Disabled                                 = 0,
	Enabled                                  = 1,
	EnabledReverse                           = 2,
	EVoxelNavModifierState_MAX               = 3,
};

// Enum LevelVoxelization.EVoxelNavModifierType
// NumValues: 0x0005
enum class EVoxelNavModifierType : uint8
{
	Blocker                                  = 0,
	Transporter                              = 1,
	Hazard                                   = 2,
	ForcedCost                               = 3,
	EVoxelNavModifierType_MAX                = 4,
};

// Enum LevelVoxelization.EVoxelSoundOcclusionTransitionState
// NumValues: 0x0004
enum class EVoxelSoundOcclusionTransitionState : uint8
{
	None                                     = 0,
	Opening                                  = 1,
	Closing                                  = 2,
	EVoxelSoundOcclusionTransitionState_MAX  = 3,
};

// Enum LevelVoxelization.EVoxelLevelInstanceType
// NumValues: 0x0003
enum class EVoxelLevelInstanceType : uint8
{
	Primary                                  = 0,
	Secondary                                = 1,
	EVoxelLevelInstanceType_MAX              = 2,
};

// ScriptStruct LevelVoxelization.VoxelizableLevel
// 0x0050 (0x0050 - 0x0000)
struct FVoxelizableLevel final
{
public:
	TSoftObjectPtr<class UWorld>                  TraceLevel;                                        // 0x0000(0x0028)(Edit, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class UDataTable>              LevelRegionDataTable;                              // 0x0028(0x0028)(Edit, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FVoxelizableLevel) == 0x000008, "Wrong alignment on FVoxelizableLevel");
static_assert(sizeof(FVoxelizableLevel) == 0x000050, "Wrong size on FVoxelizableLevel");
static_assert(offsetof(FVoxelizableLevel, TraceLevel) == 0x000000, "Member 'FVoxelizableLevel::TraceLevel' has a wrong offset!");
static_assert(offsetof(FVoxelizableLevel, LevelRegionDataTable) == 0x000028, "Member 'FVoxelizableLevel::LevelRegionDataTable' has a wrong offset!");

// ScriptStruct LevelVoxelization.VoxelWallLocation
// 0x0010 (0x0010 - 0x0000)
struct FVoxelWallLocation final
{
public:
	struct FIntVector                             VoxelLocation;                                     // 0x0000(0x000C)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         DirectionFlags;                                    // 0x000C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FVoxelWallLocation) == 0x000004, "Wrong alignment on FVoxelWallLocation");
static_assert(sizeof(FVoxelWallLocation) == 0x000010, "Wrong size on FVoxelWallLocation");
static_assert(offsetof(FVoxelWallLocation, VoxelLocation) == 0x000000, "Member 'FVoxelWallLocation::VoxelLocation' has a wrong offset!");
static_assert(offsetof(FVoxelWallLocation, DirectionFlags) == 0x00000C, "Member 'FVoxelWallLocation::DirectionFlags' has a wrong offset!");

// ScriptStruct LevelVoxelization.SoundPropagationInterpData
// 0x002C (0x002C - 0x0000)
struct alignas(0x04) FSoundPropagationInterpData final
{
public:
	uint8                                         Pad_0[0x2C];                                       // 0x0000(0x002C)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FSoundPropagationInterpData) == 0x000004, "Wrong alignment on FSoundPropagationInterpData");
static_assert(sizeof(FSoundPropagationInterpData) == 0x00002C, "Wrong size on FSoundPropagationInterpData");

// ScriptStruct LevelVoxelization.VoxelNavAgentTraceResult
// 0x0010 (0x0010 - 0x0000)
struct FVoxelNavAgentTraceResult final
{
public:
	class UVoxelNavAgentComponent*                AgentComponent;                                    // 0x0000(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         IntersectTime;                                     // 0x0008(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FVoxelNavAgentTraceResult) == 0x000008, "Wrong alignment on FVoxelNavAgentTraceResult");
static_assert(sizeof(FVoxelNavAgentTraceResult) == 0x000010, "Wrong size on FVoxelNavAgentTraceResult");
static_assert(offsetof(FVoxelNavAgentTraceResult, AgentComponent) == 0x000000, "Member 'FVoxelNavAgentTraceResult::AgentComponent' has a wrong offset!");
static_assert(offsetof(FVoxelNavAgentTraceResult, IntersectTime) == 0x000008, "Member 'FVoxelNavAgentTraceResult::IntersectTime' has a wrong offset!");

// ScriptStruct LevelVoxelization.VoxelScannerSpriteElement
// 0x001C (0x001C - 0x0000)
struct FVoxelScannerSpriteElement final
{
public:
	struct FVector2D                              BaseSize;                                          // 0x0000(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                Location;                                          // 0x0008(0x000C)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Rotation;                                          // 0x0014(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bShouldRotate;                                     // 0x0018(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bSpriteVisible;                                    // 0x0019(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1A[0x2];                                       // 0x001A(0x0002)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FVoxelScannerSpriteElement) == 0x000004, "Wrong alignment on FVoxelScannerSpriteElement");
static_assert(sizeof(FVoxelScannerSpriteElement) == 0x00001C, "Wrong size on FVoxelScannerSpriteElement");
static_assert(offsetof(FVoxelScannerSpriteElement, BaseSize) == 0x000000, "Member 'FVoxelScannerSpriteElement::BaseSize' has a wrong offset!");
static_assert(offsetof(FVoxelScannerSpriteElement, Location) == 0x000008, "Member 'FVoxelScannerSpriteElement::Location' has a wrong offset!");
static_assert(offsetof(FVoxelScannerSpriteElement, Rotation) == 0x000014, "Member 'FVoxelScannerSpriteElement::Rotation' has a wrong offset!");
static_assert(offsetof(FVoxelScannerSpriteElement, bShouldRotate) == 0x000018, "Member 'FVoxelScannerSpriteElement::bShouldRotate' has a wrong offset!");
static_assert(offsetof(FVoxelScannerSpriteElement, bSpriteVisible) == 0x000019, "Member 'FVoxelScannerSpriteElement::bSpriteVisible' has a wrong offset!");

}

