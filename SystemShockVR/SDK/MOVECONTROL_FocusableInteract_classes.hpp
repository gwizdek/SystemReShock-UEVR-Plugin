#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: MOVECONTROL_FocusableInteract

#include "Basic.hpp"

#include "CoreUObject_structs.hpp"
#include "MOVECONTROL_Base_classes.hpp"


namespace SDK
{

// BlueprintGeneratedClass MOVECONTROL_FocusableInteract.MOVECONTROL_FocusableInteract_C
// 0x0050 (0x00E8 - 0x0098)
class UMOVECONTROL_FocusableInteract_C final : public UMOVECONTROL_Base_C
{
public:
	struct FVector                                SourceLocation;                                    // 0x0094(0x000C)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash)
	struct FVector                                TargetLocation;                                    // 0x00A0(0x000C)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash)
	struct FRotator                               SourceRotation;                                    // 0x00AC(0x000C)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, ExposeOnSpawn)
	struct FRotator                               TargetRotation;                                    // 0x00B8(0x000C)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, ExposeOnSpawn)
	bool                                          IsExpiring;                                        // 0x00C4(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          IsFinishedTransitioning;                           // 0x00C5(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          ShouldUseCharacterMovement;                        // 0x00C6(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_C7[0x1];                                       // 0x00C7(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         ElapsedTime;                                       // 0x00C8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_CC[0x4];                                       // 0x00CC(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	FMulticastInlineDelegateProperty_             OnFinishedTransitioning;                           // 0x00D0(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)
	float                                         InitialVerticalFOV;                                // 0x00E0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

public:
	void OnFinishedTransitioning__DelegateSignature();
	void InitializeMoveControl(class APAWN_Hacker_Simple_C* Player_0, float GameTime, const struct FSTRUCT_MoveControlParams& InitialControlParams, bool* Result);
	void UpdateMoveControl(const struct FVector2D& MoveInput, const struct FVector2D& LookInput, const struct FSTRUCT_MoveControlParams& ControlParams, TArray<float>& ActionInputValues, float MoveInputScale, float Delta_Time, bool* ShouldExpire);
	void ExpireFocusMovement();

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"MOVECONTROL_FocusableInteract_C">();
	}
	static class UMOVECONTROL_FocusableInteract_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMOVECONTROL_FocusableInteract_C>();
	}
};
static_assert(alignof(UMOVECONTROL_FocusableInteract_C) == 0x000008, "Wrong alignment on UMOVECONTROL_FocusableInteract_C");
static_assert(sizeof(UMOVECONTROL_FocusableInteract_C) == 0x0000E8, "Wrong size on UMOVECONTROL_FocusableInteract_C");
static_assert(offsetof(UMOVECONTROL_FocusableInteract_C, SourceLocation) == 0x000094, "Member 'UMOVECONTROL_FocusableInteract_C::SourceLocation' has a wrong offset!");
static_assert(offsetof(UMOVECONTROL_FocusableInteract_C, TargetLocation) == 0x0000A0, "Member 'UMOVECONTROL_FocusableInteract_C::TargetLocation' has a wrong offset!");
static_assert(offsetof(UMOVECONTROL_FocusableInteract_C, SourceRotation) == 0x0000AC, "Member 'UMOVECONTROL_FocusableInteract_C::SourceRotation' has a wrong offset!");
static_assert(offsetof(UMOVECONTROL_FocusableInteract_C, TargetRotation) == 0x0000B8, "Member 'UMOVECONTROL_FocusableInteract_C::TargetRotation' has a wrong offset!");
static_assert(offsetof(UMOVECONTROL_FocusableInteract_C, IsExpiring) == 0x0000C4, "Member 'UMOVECONTROL_FocusableInteract_C::IsExpiring' has a wrong offset!");
static_assert(offsetof(UMOVECONTROL_FocusableInteract_C, IsFinishedTransitioning) == 0x0000C5, "Member 'UMOVECONTROL_FocusableInteract_C::IsFinishedTransitioning' has a wrong offset!");
static_assert(offsetof(UMOVECONTROL_FocusableInteract_C, ShouldUseCharacterMovement) == 0x0000C6, "Member 'UMOVECONTROL_FocusableInteract_C::ShouldUseCharacterMovement' has a wrong offset!");
static_assert(offsetof(UMOVECONTROL_FocusableInteract_C, ElapsedTime) == 0x0000C8, "Member 'UMOVECONTROL_FocusableInteract_C::ElapsedTime' has a wrong offset!");
static_assert(offsetof(UMOVECONTROL_FocusableInteract_C, OnFinishedTransitioning) == 0x0000D0, "Member 'UMOVECONTROL_FocusableInteract_C::OnFinishedTransitioning' has a wrong offset!");
static_assert(offsetof(UMOVECONTROL_FocusableInteract_C, InitialVerticalFOV) == 0x0000E0, "Member 'UMOVECONTROL_FocusableInteract_C::InitialVerticalFOV' has a wrong offset!");

}

