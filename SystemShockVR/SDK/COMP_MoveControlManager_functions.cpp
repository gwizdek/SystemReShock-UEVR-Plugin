#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: COMP_MoveControlManager

#include "Basic.hpp"

#include "COMP_MoveControlManager_classes.hpp"
#include "COMP_MoveControlManager_parameters.hpp"


namespace SDK
{

// Function COMP_MoveControlManager.COMP_MoveControlManager_C.OnMoveControlRegistered__DelegateSignature
// (Public, Delegate, BlueprintCallable, BlueprintEvent)
// Parameters:
// class UMOVECONTROL_Base_C*              MoveControl                                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UCOMP_MoveControlManager_C::OnMoveControlRegistered__DelegateSignature(class UMOVECONTROL_Base_C* MoveControl)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("COMP_MoveControlManager_C", "OnMoveControlRegistered__DelegateSignature");

	Params::COMP_MoveControlManager_C_OnMoveControlRegistered__DelegateSignature Parms{};

	Parms.MoveControl = MoveControl;

	UObject::ProcessEvent(Func, &Parms);
}


// Function COMP_MoveControlManager.COMP_MoveControlManager_C.InitializeMoveControls
// (Public, BlueprintCallable, BlueprintEvent)

void UCOMP_MoveControlManager_C::InitializeMoveControls()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("COMP_MoveControlManager_C", "InitializeMoveControls");

	UObject::ProcessEvent(Func, nullptr);
}


// Function COMP_MoveControlManager.COMP_MoveControlManager_C.UpdateMoveControls
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// float                                   DeltaTime                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FVector2D                        MoveInputAxes                                          (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FVector2D                        LookInputAxes                                          (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UCOMP_MoveControlManager_C::UpdateMoveControls(float DeltaTime, const struct FVector2D& MoveInputAxes, const struct FVector2D& LookInputAxes)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("COMP_MoveControlManager_C", "UpdateMoveControls");

	Params::COMP_MoveControlManager_C_UpdateMoveControls Parms{};

	Parms.DeltaTime = DeltaTime;
	Parms.MoveInputAxes = std::move(MoveInputAxes);
	Parms.LookInputAxes = std::move(LookInputAxes);

	UObject::ProcessEvent(Func, &Parms);
}


// Function COMP_MoveControlManager.COMP_MoveControlManager_C.RegisterMoveControl
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// class UMOVECONTROL_Base_C*              MoveControl                                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    LowPriority                                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// bool                                    Result                                                 (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void UCOMP_MoveControlManager_C::RegisterMoveControl(class UMOVECONTROL_Base_C* MoveControl, bool LowPriority, bool* Result)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("COMP_MoveControlManager_C", "RegisterMoveControl");

	Params::COMP_MoveControlManager_C_RegisterMoveControl Parms{};

	Parms.MoveControl = MoveControl;
	Parms.LowPriority = LowPriority;

	UObject::ProcessEvent(Func, &Parms);

	if (Result != nullptr)
		*Result = Parms.Result;
}


// Function COMP_MoveControlManager.COMP_MoveControlManager_C.GetActiveMoveControl
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// class UMOVECONTROL_Base_C*              ActiveMoveControl                                      (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UCOMP_MoveControlManager_C::GetActiveMoveControl(class UMOVECONTROL_Base_C** ActiveMoveControl)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("COMP_MoveControlManager_C", "GetActiveMoveControl");

	Params::COMP_MoveControlManager_C_GetActiveMoveControl Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (ActiveMoveControl != nullptr)
		*ActiveMoveControl = Parms.ActiveMoveControl;
}


// Function COMP_MoveControlManager.COMP_MoveControlManager_C.MoveActionChanged
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// struct FSTRUCT_MoveInputAction          Action                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    Relative                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// bool                                    Result                                                 (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void UCOMP_MoveControlManager_C::MoveActionChanged(const struct FSTRUCT_MoveInputAction& Action, bool Relative, bool* Result)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("COMP_MoveControlManager_C", "MoveActionChanged");

	Params::COMP_MoveControlManager_C_MoveActionChanged Parms{};

	Parms.Action = std::move(Action);
	Parms.Relative = Relative;

	UObject::ProcessEvent(Func, &Parms);

	if (Result != nullptr)
		*Result = Parms.Result;
}


// Function COMP_MoveControlManager.COMP_MoveControlManager_C.ExpireMoveControlByIndex
// (Private, BlueprintCallable, BlueprintEvent)
// Parameters:
// int32                                   MoveControlIndex                                       (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UCOMP_MoveControlManager_C::ExpireMoveControlByIndex(int32 MoveControlIndex)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("COMP_MoveControlManager_C", "ExpireMoveControlByIndex");

	Params::COMP_MoveControlManager_C_ExpireMoveControlByIndex Parms{};

	Parms.MoveControlIndex = MoveControlIndex;

	UObject::ProcessEvent(Func, &Parms);
}


// Function COMP_MoveControlManager.COMP_MoveControlManager_C.UpdateJump
// (Protected, BlueprintCallable, BlueprintEvent)

void UCOMP_MoveControlManager_C::UpdateJump()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("COMP_MoveControlManager_C", "UpdateJump");

	UObject::ProcessEvent(Func, nullptr);
}


// Function COMP_MoveControlManager.COMP_MoveControlManager_C.UpdateSprintWalkFall
// (Protected, BlueprintCallable, BlueprintEvent)

void UCOMP_MoveControlManager_C::UpdateSprintWalkFall()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("COMP_MoveControlManager_C", "UpdateSprintWalkFall");

	UObject::ProcessEvent(Func, nullptr);
}


// Function COMP_MoveControlManager.COMP_MoveControlManager_C.UpdateSprintDirectionSpeed
// (Protected, BlueprintCallable, BlueprintEvent)

void UCOMP_MoveControlManager_C::UpdateSprintDirectionSpeed()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("COMP_MoveControlManager_C", "UpdateSprintDirectionSpeed");

	UObject::ProcessEvent(Func, nullptr);
}


// Function COMP_MoveControlManager.COMP_MoveControlManager_C.UpdateCrouch
// (Protected, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// float                                   DeltaTime                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UCOMP_MoveControlManager_C::UpdateCrouch(float DeltaTime)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("COMP_MoveControlManager_C", "UpdateCrouch");

	Params::COMP_MoveControlManager_C_UpdateCrouch Parms{};

	Parms.DeltaTime = DeltaTime;

	UObject::ProcessEvent(Func, &Parms);
}


// Function COMP_MoveControlManager.COMP_MoveControlManager_C.UpdateSlump
// (Protected, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// float                                   MinCrouchProgress                                      (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UCOMP_MoveControlManager_C::UpdateSlump(float* MinCrouchProgress)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("COMP_MoveControlManager_C", "UpdateSlump");

	Params::COMP_MoveControlManager_C_UpdateSlump Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (MinCrouchProgress != nullptr)
		*MinCrouchProgress = Parms.MinCrouchProgress;
}


// Function COMP_MoveControlManager.COMP_MoveControlManager_C.UpdateAim
// (Protected, BlueprintCallable, BlueprintEvent)
// Parameters:
// float                                   DeltaTime                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UCOMP_MoveControlManager_C::UpdateAim(float DeltaTime)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("COMP_MoveControlManager_C", "UpdateAim");

	Params::COMP_MoveControlManager_C_UpdateAim Parms{};

	Parms.DeltaTime = DeltaTime;

	UObject::ProcessEvent(Func, &Parms);
}


// Function COMP_MoveControlManager.COMP_MoveControlManager_C.UpdateLean
// (Protected, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// float                                   DeltaTime                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UCOMP_MoveControlManager_C::UpdateLean(float DeltaTime)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("COMP_MoveControlManager_C", "UpdateLean");

	Params::COMP_MoveControlManager_C_UpdateLean Parms{};

	Parms.DeltaTime = DeltaTime;

	UObject::ProcessEvent(Func, &Parms);
}


// Function COMP_MoveControlManager.COMP_MoveControlManager_C.UpdateMoveActions
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// float                                   DeltaTime                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UCOMP_MoveControlManager_C::UpdateMoveActions(float DeltaTime)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("COMP_MoveControlManager_C", "UpdateMoveActions");

	Params::COMP_MoveControlManager_C_UpdateMoveActions Parms{};

	Parms.DeltaTime = DeltaTime;

	UObject::ProcessEvent(Func, &Parms);
}


// Function COMP_MoveControlManager.COMP_MoveControlManager_C.GetMoveActionInputValue
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// ENUM_MoveInputActionType                ActionType                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// float                                   Value                                                  (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UCOMP_MoveControlManager_C::GetMoveActionInputValue(ENUM_MoveInputActionType ActionType, float* Value)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("COMP_MoveControlManager_C", "GetMoveActionInputValue");

	Params::COMP_MoveControlManager_C_GetMoveActionInputValue Parms{};

	Parms.ActionType = ActionType;

	UObject::ProcessEvent(Func, &Parms);

	if (Value != nullptr)
		*Value = Parms.Value;
}


// Function COMP_MoveControlManager.COMP_MoveControlManager_C.TakeMeasurements
// (Private, BlueprintCallable, BlueprintEvent)

void UCOMP_MoveControlManager_C::TakeMeasurements()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("COMP_MoveControlManager_C", "TakeMeasurements");

	UObject::ProcessEvent(Func, nullptr);
}


// Function COMP_MoveControlManager.COMP_MoveControlManager_C.TryResetToDefaultMeasurements
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)

void UCOMP_MoveControlManager_C::TryResetToDefaultMeasurements()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("COMP_MoveControlManager_C", "TryResetToDefaultMeasurements");

	UObject::ProcessEvent(Func, nullptr);
}


// Function COMP_MoveControlManager.COMP_MoveControlManager_C.InitializeOwnerGender
// (Protected, BlueprintCallable, BlueprintEvent)

void UCOMP_MoveControlManager_C::InitializeOwnerGender()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("COMP_MoveControlManager_C", "InitializeOwnerGender");

	UObject::ProcessEvent(Func, nullptr);
}


// Function COMP_MoveControlManager.COMP_MoveControlManager_C.InitializeValuesFromAttributes
// (Public, BlueprintCallable, BlueprintEvent)

void UCOMP_MoveControlManager_C::InitializeValuesFromAttributes()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("COMP_MoveControlManager_C", "InitializeValuesFromAttributes");

	UObject::ProcessEvent(Func, nullptr);
}


// Function COMP_MoveControlManager.COMP_MoveControlManager_C.InitializeValuesFromInventory
// (Public, BlueprintCallable, BlueprintEvent)

void UCOMP_MoveControlManager_C::InitializeValuesFromInventory()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("COMP_MoveControlManager_C", "InitializeValuesFromInventory");

	UObject::ProcessEvent(Func, nullptr);
}


// Function COMP_MoveControlManager.COMP_MoveControlManager_C.DeactivateTurboBoots
// (Private, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    SkatesOnly                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)

void UCOMP_MoveControlManager_C::DeactivateTurboBoots(bool SkatesOnly)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("COMP_MoveControlManager_C", "DeactivateTurboBoots");

	Params::COMP_MoveControlManager_C_DeactivateTurboBoots Parms{};

	Parms.SkatesOnly = SkatesOnly;

	UObject::ProcessEvent(Func, &Parms);
}


// Function COMP_MoveControlManager.COMP_MoveControlManager_C.CanStandUp
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// bool                                    Result                                                 (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void UCOMP_MoveControlManager_C::CanStandUp(bool* Result)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("COMP_MoveControlManager_C", "CanStandUp");

	Params::COMP_MoveControlManager_C_CanStandUp Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (Result != nullptr)
		*Result = Parms.Result;
}


// Function COMP_MoveControlManager.COMP_MoveControlManager_C.SetMoveActionInputValue
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// ENUM_MoveInputActionType                ActionType                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// float                                   InputValue                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UCOMP_MoveControlManager_C::SetMoveActionInputValue(ENUM_MoveInputActionType ActionType, float InputValue)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("COMP_MoveControlManager_C", "SetMoveActionInputValue");

	Params::COMP_MoveControlManager_C_SetMoveActionInputValue Parms{};

	Parms.ActionType = ActionType;
	Parms.InputValue = InputValue;

	UObject::ProcessEvent(Func, &Parms);
}


// Function COMP_MoveControlManager.COMP_MoveControlManager_C.UpdateCameraBanking
// (Protected, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// float                                   DeltaTime                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// float                                   AccessibilityScale                                     (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UCOMP_MoveControlManager_C::UpdateCameraBanking(float DeltaTime, float AccessibilityScale)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("COMP_MoveControlManager_C", "UpdateCameraBanking");

	Params::COMP_MoveControlManager_C_UpdateCameraBanking Parms{};

	Parms.DeltaTime = DeltaTime;
	Parms.AccessibilityScale = AccessibilityScale;

	UObject::ProcessEvent(Func, &Parms);
}


// Function COMP_MoveControlManager.COMP_MoveControlManager_C.UpdateFootsteps
// (Protected, BlueprintCallable, BlueprintEvent)
// Parameters:
// float                                   DeltaTime                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UCOMP_MoveControlManager_C::UpdateFootsteps(float DeltaTime)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("COMP_MoveControlManager_C", "UpdateFootsteps");

	Params::COMP_MoveControlManager_C_UpdateFootsteps Parms{};

	Parms.DeltaTime = DeltaTime;

	UObject::ProcessEvent(Func, &Parms);
}


// Function COMP_MoveControlManager.COMP_MoveControlManager_C.UpdateCameraBobbing
// (Protected, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// float                                   DeltaTime                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// float                                   AccessibilityScale                                     (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UCOMP_MoveControlManager_C::UpdateCameraBobbing(float DeltaTime, float AccessibilityScale)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("COMP_MoveControlManager_C", "UpdateCameraBobbing");

	Params::COMP_MoveControlManager_C_UpdateCameraBobbing Parms{};

	Parms.DeltaTime = DeltaTime;
	Parms.AccessibilityScale = AccessibilityScale;

	UObject::ProcessEvent(Func, &Parms);
}


// Function COMP_MoveControlManager.COMP_MoveControlManager_C.ApplyJumpGroundSpeedReduction
// (Protected, BlueprintCallable, BlueprintEvent)

void UCOMP_MoveControlManager_C::ApplyJumpGroundSpeedReduction()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("COMP_MoveControlManager_C", "ApplyJumpGroundSpeedReduction");

	UObject::ProcessEvent(Func, nullptr);
}


// Function COMP_MoveControlManager.COMP_MoveControlManager_C.DoJumpingFootstep
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)

void UCOMP_MoveControlManager_C::DoJumpingFootstep()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("COMP_MoveControlManager_C", "DoJumpingFootstep");

	UObject::ProcessEvent(Func, nullptr);
}


// Function COMP_MoveControlManager.COMP_MoveControlManager_C.DoWalkingFootstep
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// float                                   MovespeedScale                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// float                                   StrideScale                                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UCOMP_MoveControlManager_C::DoWalkingFootstep(float MovespeedScale, float StrideScale)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("COMP_MoveControlManager_C", "DoWalkingFootstep");

	Params::COMP_MoveControlManager_C_DoWalkingFootstep Parms{};

	Parms.MovespeedScale = MovespeedScale;
	Parms.StrideScale = StrideScale;

	UObject::ProcessEvent(Func, &Parms);
}


// Function COMP_MoveControlManager.COMP_MoveControlManager_C.UpdateBreathing
// (Protected, BlueprintCallable, BlueprintEvent)
// Parameters:
// float                                   DeltaTime                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UCOMP_MoveControlManager_C::UpdateBreathing(float DeltaTime)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("COMP_MoveControlManager_C", "UpdateBreathing");

	Params::COMP_MoveControlManager_C_UpdateBreathing Parms{};

	Parms.DeltaTime = DeltaTime;

	UObject::ProcessEvent(Func, &Parms);
}


// Function COMP_MoveControlManager.COMP_MoveControlManager_C.UpdateMovementFlags
// (Protected, BlueprintCallable, BlueprintEvent)

void UCOMP_MoveControlManager_C::UpdateMovementFlags()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("COMP_MoveControlManager_C", "UpdateMovementFlags");

	UObject::ProcessEvent(Func, nullptr);
}


// Function COMP_MoveControlManager.COMP_MoveControlManager_C.SetCameraBobType
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// ENUM_CameraBobType                      CameraBobType                                          (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UCOMP_MoveControlManager_C::SetCameraBobType(ENUM_CameraBobType CameraBobType)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("COMP_MoveControlManager_C", "SetCameraBobType");

	Params::COMP_MoveControlManager_C_SetCameraBobType Parms{};

	Parms.CameraBobType = CameraBobType;

	UObject::ProcessEvent(Func, &Parms);
}


// Function COMP_MoveControlManager.COMP_MoveControlManager_C.GetParamValue
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// struct FVector2D                        Interval                                               (BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// float                                   Scale                                                  (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// float                                   Value                                                  (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UCOMP_MoveControlManager_C::GetParamValue(struct FVector2D& Interval, float Scale, float* Value)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("COMP_MoveControlManager_C", "GetParamValue");

	Params::COMP_MoveControlManager_C_GetParamValue Parms{};

	Parms.Interval = std::move(Interval);
	Parms.Scale = Scale;

	UObject::ProcessEvent(Func, &Parms);

	Interval = std::move(Parms.Interval);

	if (Value != nullptr)
		*Value = Parms.Value;
}


// Function COMP_MoveControlManager.COMP_MoveControlManager_C.HandleAirLanding
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// struct FHitResult                       Hit                                                    (BlueprintVisible, BlueprintReadOnly, Parm, IsPlainOldData, NoDestructor, ContainsInstancedReference)

void UCOMP_MoveControlManager_C::HandleAirLanding(const struct FHitResult& Hit)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("COMP_MoveControlManager_C", "HandleAirLanding");

	Params::COMP_MoveControlManager_C_HandleAirLanding Parms{};

	Parms.Hit = std::move(Hit);

	UObject::ProcessEvent(Func, &Parms);
}


// Function COMP_MoveControlManager.COMP_MoveControlManager_C.HandleHitSomething
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// struct FVector                          NormalImpulse                                          (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FHitResult                       Hit                                                    (BlueprintVisible, BlueprintReadOnly, Parm, IsPlainOldData, NoDestructor, ContainsInstancedReference)

void UCOMP_MoveControlManager_C::HandleHitSomething(const struct FVector& NormalImpulse, const struct FHitResult& Hit)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("COMP_MoveControlManager_C", "HandleHitSomething");

	Params::COMP_MoveControlManager_C_HandleHitSomething Parms{};

	Parms.NormalImpulse = std::move(NormalImpulse);
	Parms.Hit = std::move(Hit);

	UObject::ProcessEvent(Func, &Parms);
}


// Function COMP_MoveControlManager.COMP_MoveControlManager_C.IsLeaning
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// bool                                    Result                                                 (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void UCOMP_MoveControlManager_C::IsLeaning(bool* Result)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("COMP_MoveControlManager_C", "IsLeaning");

	Params::COMP_MoveControlManager_C_IsLeaning Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (Result != nullptr)
		*Result = Parms.Result;
}


// Function COMP_MoveControlManager.COMP_MoveControlManager_C.IsUsingTurboBoots
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// bool                                    Result                                                 (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void UCOMP_MoveControlManager_C::IsUsingTurboBoots(bool* Result)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("COMP_MoveControlManager_C", "IsUsingTurboBoots");

	Params::COMP_MoveControlManager_C_IsUsingTurboBoots Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (Result != nullptr)
		*Result = Parms.Result;
}


// Function COMP_MoveControlManager.COMP_MoveControlManager_C.IsCrouchingOrTransitioning
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// bool                                    Result                                                 (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void UCOMP_MoveControlManager_C::IsCrouchingOrTransitioning(bool* Result)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("COMP_MoveControlManager_C", "IsCrouchingOrTransitioning");

	Params::COMP_MoveControlManager_C_IsCrouchingOrTransitioning Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (Result != nullptr)
		*Result = Parms.Result;
}


// Function COMP_MoveControlManager.COMP_MoveControlManager_C.GetHalfHeightStanding
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// float                                   Result                                                 (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UCOMP_MoveControlManager_C::GetHalfHeightStanding(float* Result)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("COMP_MoveControlManager_C", "GetHalfHeightStanding");

	Params::COMP_MoveControlManager_C_GetHalfHeightStanding Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (Result != nullptr)
		*Result = Parms.Result;
}


// Function COMP_MoveControlManager.COMP_MoveControlManager_C.GetHalfHeightCurrent
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// float                                   Result                                                 (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UCOMP_MoveControlManager_C::GetHalfHeightCurrent(float* Result)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("COMP_MoveControlManager_C", "GetHalfHeightCurrent");

	Params::COMP_MoveControlManager_C_GetHalfHeightCurrent Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (Result != nullptr)
		*Result = Parms.Result;
}


// Function COMP_MoveControlManager.COMP_MoveControlManager_C.GetTorsoToEyeHeightCurrent
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// float                                   Result                                                 (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UCOMP_MoveControlManager_C::GetTorsoToEyeHeightCurrent(float* Result)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("COMP_MoveControlManager_C", "GetTorsoToEyeHeightCurrent");

	Params::COMP_MoveControlManager_C_GetTorsoToEyeHeightCurrent Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (Result != nullptr)
		*Result = Parms.Result;
}


// Function COMP_MoveControlManager.COMP_MoveControlManager_C.GetTorsoToEyeHeightStanding
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// float                                   Result                                                 (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UCOMP_MoveControlManager_C::GetTorsoToEyeHeightStanding(float* Result)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("COMP_MoveControlManager_C", "GetTorsoToEyeHeightStanding");

	Params::COMP_MoveControlManager_C_GetTorsoToEyeHeightStanding Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (Result != nullptr)
		*Result = Parms.Result;
}


// Function COMP_MoveControlManager.COMP_MoveControlManager_C.GetCurrentBaseSprintSpeed
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// float                                   Speed                                                  (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UCOMP_MoveControlManager_C::GetCurrentBaseSprintSpeed(float* Speed)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("COMP_MoveControlManager_C", "GetCurrentBaseSprintSpeed");

	Params::COMP_MoveControlManager_C_GetCurrentBaseSprintSpeed Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (Speed != nullptr)
		*Speed = Parms.Speed;
}


// Function COMP_MoveControlManager.COMP_MoveControlManager_C.GetCurrentMaxSprintSpeed
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// float                                   Speed                                                  (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UCOMP_MoveControlManager_C::GetCurrentMaxSprintSpeed(float* Speed)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("COMP_MoveControlManager_C", "GetCurrentMaxSprintSpeed");

	Params::COMP_MoveControlManager_C_GetCurrentMaxSprintSpeed Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (Speed != nullptr)
		*Speed = Parms.Speed;
}


// Function COMP_MoveControlManager.COMP_MoveControlManager_C.GetFootIndexFromSign
// (Private, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// int32                                   Index_0                                                (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UCOMP_MoveControlManager_C::GetFootIndexFromSign(int32* Index_0)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("COMP_MoveControlManager_C", "GetFootIndexFromSign");

	Params::COMP_MoveControlManager_C_GetFootIndexFromSign Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (Index_0 != nullptr)
		*Index_0 = Parms.Index_0;
}


// Function COMP_MoveControlManager.COMP_MoveControlManager_C.ClampAndCacheMoveInput
// (Protected, BlueprintCallable, BlueprintEvent)
// Parameters:
// struct FVector2D                        MoveInput                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UCOMP_MoveControlManager_C::ClampAndCacheMoveInput(const struct FVector2D& MoveInput)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("COMP_MoveControlManager_C", "ClampAndCacheMoveInput");

	Params::COMP_MoveControlManager_C_ClampAndCacheMoveInput Parms{};

	Parms.MoveInput = std::move(MoveInput);

	UObject::ProcessEvent(Func, &Parms);
}


// Function COMP_MoveControlManager.COMP_MoveControlManager_C.GetPlayerMoveSpeedType
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// ENUM_PlayerMoveSpeed                    Type                                                   (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UCOMP_MoveControlManager_C::GetPlayerMoveSpeedType(ENUM_PlayerMoveSpeed* Type)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("COMP_MoveControlManager_C", "GetPlayerMoveSpeedType");

	Params::COMP_MoveControlManager_C_GetPlayerMoveSpeedType Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (Type != nullptr)
		*Type = Parms.Type;
}


// Function COMP_MoveControlManager.COMP_MoveControlManager_C.ExpireMoveControl
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// class UMOVECONTROL_Base_C*              MoveControl                                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    Result                                                 (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void UCOMP_MoveControlManager_C::ExpireMoveControl(class UMOVECONTROL_Base_C* MoveControl, bool* Result)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("COMP_MoveControlManager_C", "ExpireMoveControl");

	Params::COMP_MoveControlManager_C_ExpireMoveControl Parms{};

	Parms.MoveControl = MoveControl;

	UObject::ProcessEvent(Func, &Parms);

	if (Result != nullptr)
		*Result = Parms.Result;
}


// Function COMP_MoveControlManager.COMP_MoveControlManager_C.EVENT_OnStaminaChanged
// (Private, BlueprintCallable, BlueprintEvent)
// Parameters:
// float                                   CurrValue                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// float                                   LastValue                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UCOMP_MoveControlManager_C::EVENT_OnStaminaChanged(float CurrValue, float LastValue)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("COMP_MoveControlManager_C", "EVENT_OnStaminaChanged");

	Params::COMP_MoveControlManager_C_EVENT_OnStaminaChanged Parms{};

	Parms.CurrValue = CurrValue;
	Parms.LastValue = LastValue;

	UObject::ProcessEvent(Func, &Parms);
}


// Function COMP_MoveControlManager.COMP_MoveControlManager_C.EVENT_OnStaminaDepleted
// (Private, BlueprintCallable, BlueprintEvent)

void UCOMP_MoveControlManager_C::EVENT_OnStaminaDepleted()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("COMP_MoveControlManager_C", "EVENT_OnStaminaDepleted");

	UObject::ProcessEvent(Func, nullptr);
}


// Function COMP_MoveControlManager.COMP_MoveControlManager_C.EVENT_OnHardwareBagChanged
// (Private, BlueprintCallable, BlueprintEvent)
// Parameters:
// int32                                   SlotIndex                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UCOMP_MoveControlManager_C::EVENT_OnHardwareBagChanged(int32 SlotIndex)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("COMP_MoveControlManager_C", "EVENT_OnHardwareBagChanged");

	Params::COMP_MoveControlManager_C_EVENT_OnHardwareBagChanged Parms{};

	Parms.SlotIndex = SlotIndex;

	UObject::ProcessEvent(Func, &Parms);
}


// Function COMP_MoveControlManager.COMP_MoveControlManager_C.EVENT_TurboBootsStateChanged
// (Private, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    State                                                  (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)

void UCOMP_MoveControlManager_C::EVENT_TurboBootsStateChanged(bool State)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("COMP_MoveControlManager_C", "EVENT_TurboBootsStateChanged");

	Params::COMP_MoveControlManager_C_EVENT_TurboBootsStateChanged Parms{};

	Parms.State = State;

	UObject::ProcessEvent(Func, &Parms);
}


// Function COMP_MoveControlManager.COMP_MoveControlManager_C.GetCharacterSurfaceMoveScale
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// float                                   Result                                                 (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UCOMP_MoveControlManager_C::GetCharacterSurfaceMoveScale(float* Result)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("COMP_MoveControlManager_C", "GetCharacterSurfaceMoveScale");

	Params::COMP_MoveControlManager_C_GetCharacterSurfaceMoveScale Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (Result != nullptr)
		*Result = Parms.Result;
}


// Function COMP_MoveControlManager.COMP_MoveControlManager_C.EVENT_OnWalkSpeedChanged
// (Private, BlueprintCallable, BlueprintEvent)
// Parameters:
// float                                   CurrValue                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// float                                   LastValue                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UCOMP_MoveControlManager_C::EVENT_OnWalkSpeedChanged(float CurrValue, float LastValue)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("COMP_MoveControlManager_C", "EVENT_OnWalkSpeedChanged");

	Params::COMP_MoveControlManager_C_EVENT_OnWalkSpeedChanged Parms{};

	Parms.CurrValue = CurrValue;
	Parms.LastValue = LastValue;

	UObject::ProcessEvent(Func, &Parms);
}


// Function COMP_MoveControlManager.COMP_MoveControlManager_C.EVENT_OnJumpSpeedChanged
// (Private, BlueprintCallable, BlueprintEvent)
// Parameters:
// float                                   CurrValue                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// float                                   LastValue                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UCOMP_MoveControlManager_C::EVENT_OnJumpSpeedChanged(float CurrValue, float LastValue)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("COMP_MoveControlManager_C", "EVENT_OnJumpSpeedChanged");

	Params::COMP_MoveControlManager_C_EVENT_OnJumpSpeedChanged Parms{};

	Parms.CurrValue = CurrValue;
	Parms.LastValue = LastValue;

	UObject::ProcessEvent(Func, &Parms);
}


// Function COMP_MoveControlManager.COMP_MoveControlManager_C.EVENT_OnGroundFrictionChanged
// (Private, BlueprintCallable, BlueprintEvent)
// Parameters:
// float                                   CurrValue                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// float                                   LastValue                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UCOMP_MoveControlManager_C::EVENT_OnGroundFrictionChanged(float CurrValue, float LastValue)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("COMP_MoveControlManager_C", "EVENT_OnGroundFrictionChanged");

	Params::COMP_MoveControlManager_C_EVENT_OnGroundFrictionChanged Parms{};

	Parms.CurrValue = CurrValue;
	Parms.LastValue = LastValue;

	UObject::ProcessEvent(Func, &Parms);
}


// Function COMP_MoveControlManager.COMP_MoveControlManager_C.EVENT_OnMoveAccelerationChanged
// (Private, BlueprintCallable, BlueprintEvent)
// Parameters:
// float                                   CurrValue                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// float                                   LastValue                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UCOMP_MoveControlManager_C::EVENT_OnMoveAccelerationChanged(float CurrValue, float LastValue)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("COMP_MoveControlManager_C", "EVENT_OnMoveAccelerationChanged");

	Params::COMP_MoveControlManager_C_EVENT_OnMoveAccelerationChanged Parms{};

	Parms.CurrValue = CurrValue;
	Parms.LastValue = LastValue;

	UObject::ProcessEvent(Func, &Parms);
}


// Function COMP_MoveControlManager.COMP_MoveControlManager_C.EVENT_OnBrakingDecelerationChanged
// (Private, BlueprintCallable, BlueprintEvent)
// Parameters:
// float                                   CurrValue                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// float                                   LastValue                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UCOMP_MoveControlManager_C::EVENT_OnBrakingDecelerationChanged(float CurrValue, float LastValue)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("COMP_MoveControlManager_C", "EVENT_OnBrakingDecelerationChanged");

	Params::COMP_MoveControlManager_C_EVENT_OnBrakingDecelerationChanged Parms{};

	Parms.CurrValue = CurrValue;
	Parms.LastValue = LastValue;

	UObject::ProcessEvent(Func, &Parms);
}


// Function COMP_MoveControlManager.COMP_MoveControlManager_C.UpdateFatigueState
// (Private, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    IsFatigued                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)

void UCOMP_MoveControlManager_C::UpdateFatigueState(bool IsFatigued)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("COMP_MoveControlManager_C", "UpdateFatigueState");

	Params::COMP_MoveControlManager_C_UpdateFatigueState Parms{};

	Parms.IsFatigued = IsFatigued;

	UObject::ProcessEvent(Func, &Parms);
}


// Function COMP_MoveControlManager.COMP_MoveControlManager_C.ShouldSkateWhileSprinting
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// bool                                    Result                                                 (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void UCOMP_MoveControlManager_C::ShouldSkateWhileSprinting(bool* Result)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("COMP_MoveControlManager_C", "ShouldSkateWhileSprinting");

	Params::COMP_MoveControlManager_C_ShouldSkateWhileSprinting Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (Result != nullptr)
		*Result = Parms.Result;
}


// Function COMP_MoveControlManager.COMP_MoveControlManager_C.ClearMoveActionInputValues
// (Public, BlueprintCallable, BlueprintEvent)

void UCOMP_MoveControlManager_C::ClearMoveActionInputValues()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("COMP_MoveControlManager_C", "ClearMoveActionInputValues");

	UObject::ProcessEvent(Func, nullptr);
}


// Function COMP_MoveControlManager.COMP_MoveControlManager_C.EVENT_OnAirControlChanged
// (Private, BlueprintCallable, BlueprintEvent)
// Parameters:
// float                                   CurrValue                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// float                                   LastValue                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UCOMP_MoveControlManager_C::EVENT_OnAirControlChanged(float CurrValue, float LastValue)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("COMP_MoveControlManager_C", "EVENT_OnAirControlChanged");

	Params::COMP_MoveControlManager_C_EVENT_OnAirControlChanged Parms{};

	Parms.CurrValue = CurrValue;
	Parms.LastValue = LastValue;

	UObject::ProcessEvent(Func, &Parms);
}


// Function COMP_MoveControlManager.COMP_MoveControlManager_C.ShouldSaveComponent
// (Event, Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// struct FStreamingSaveGameComponentParamsParams_0                                               (Parm, OutParm, NoDestructor)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor)

bool UCOMP_MoveControlManager_C::ShouldSaveComponent(struct FStreamingSaveGameComponentParams* Params_0)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("COMP_MoveControlManager_C", "ShouldSaveComponent");

	Params::COMP_MoveControlManager_C_ShouldSaveComponent Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (Params_0 != nullptr)
		*Params_0 = std::move(Parms.Params_0);

	return Parms.ReturnValue;
}

}

