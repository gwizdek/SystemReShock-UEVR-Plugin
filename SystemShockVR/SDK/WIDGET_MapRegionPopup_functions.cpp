#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: WIDGET_MapRegionPopup

#include "Basic.hpp"

#include "WIDGET_MapRegionPopup_classes.hpp"
#include "WIDGET_MapRegionPopup_parameters.hpp"


namespace SDK
{

// Function WIDGET_MapRegionPopup.WIDGET_MapRegionPopup_C.ExecuteUbergraph_WIDGET_MapRegionPopup
// (Final, UbergraphFunction, HasDefaults)
// Parameters:
// int32                                   EntryPoint                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UWIDGET_MapRegionPopup_C::ExecuteUbergraph_WIDGET_MapRegionPopup(int32 EntryPoint)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("WIDGET_MapRegionPopup_C", "ExecuteUbergraph_WIDGET_MapRegionPopup");

	Params::WIDGET_MapRegionPopup_C_ExecuteUbergraph_WIDGET_MapRegionPopup Parms{};

	Parms.EntryPoint = EntryPoint;

	UObject::ProcessEvent(Func, &Parms);
}


// Function WIDGET_MapRegionPopup.WIDGET_MapRegionPopup_C.Tick
// (BlueprintCosmetic, Event, Public, BlueprintEvent)
// Parameters:
// struct FGeometry                        MyGeometry                                             (BlueprintVisible, BlueprintReadOnly, Parm, IsPlainOldData, NoDestructor)
// float                                   InDeltaTime                                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UWIDGET_MapRegionPopup_C::Tick(const struct FGeometry& MyGeometry, float InDeltaTime)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("WIDGET_MapRegionPopup_C", "Tick");

	Params::WIDGET_MapRegionPopup_C_Tick Parms{};

	Parms.MyGeometry = std::move(MyGeometry);
	Parms.InDeltaTime = InDeltaTime;

	UObject::ProcessEvent(Func, &Parms);
}


// Function WIDGET_MapRegionPopup.WIDGET_MapRegionPopup_C.Construct
// (BlueprintCosmetic, Event, Public, BlueprintEvent)

void UWIDGET_MapRegionPopup_C::Construct()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("WIDGET_MapRegionPopup_C", "Construct");

	UObject::ProcessEvent(Func, nullptr);
}


// Function WIDGET_MapRegionPopup.WIDGET_MapRegionPopup_C.SetRegionName
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// class FText                             Name_0                                                 (BlueprintVisible, BlueprintReadOnly, Parm)

void UWIDGET_MapRegionPopup_C::SetRegionName(const class FText& Name_0)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("WIDGET_MapRegionPopup_C", "SetRegionName");

	Params::WIDGET_MapRegionPopup_C_SetRegionName Parms{};

	Parms.Name_0 = std::move(Name_0);

	UObject::ProcessEvent(Func, &Parms);
}


// Function WIDGET_MapRegionPopup.WIDGET_MapRegionPopup_C.UpdateTextTransition
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)

void UWIDGET_MapRegionPopup_C::UpdateTextTransition()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("WIDGET_MapRegionPopup_C", "UpdateTextTransition");

	UObject::ProcessEvent(Func, nullptr);
}


// Function WIDGET_MapRegionPopup.WIDGET_MapRegionPopup_C.GetDimensionsForText
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// class FText                             Text                                                   (BlueprintVisible, BlueprintReadOnly, Parm)
// struct FVector2D                        Dimensions                                             (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UWIDGET_MapRegionPopup_C::GetDimensionsForText(const class FText& Text, struct FVector2D* Dimensions)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("WIDGET_MapRegionPopup_C", "GetDimensionsForText");

	Params::WIDGET_MapRegionPopup_C_GetDimensionsForText Parms{};

	Parms.Text = std::move(Text);

	UObject::ProcessEvent(Func, &Parms);

	if (Dimensions != nullptr)
		*Dimensions = std::move(Parms.Dimensions);
}

}

