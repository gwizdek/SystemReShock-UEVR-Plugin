#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: LimbDamageAccumulator

#include "Basic.hpp"

#include "CoreUObject_classes.hpp"
#include "STRUCT_LimbDamageTimestamp_structs.hpp"


namespace SDK
{

// BlueprintGeneratedClass LimbDamageAccumulator.LimbDamageAccumulator_C
// 0x0018 (0x0040 - 0x0028)
class ULimbDamageAccumulator_C final : public UObject
{
public:
	float                                         MaxTimeBetweenDamageInstances;                     // 0x0028(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_2C[0x4];                                       // 0x002C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FSTRUCT_LimbDamageTimestamp>    DamageInstances;                                   // 0x0030(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance)

public:
	void AddDamageInstance(int32 DamageValue, float CurrentTime, int32* NetDamage);
	void RemoveDamageAmount(int32 DamageAmount);
	void RemovedExpiredDamageInstances(float CurrentTimestamp);

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"LimbDamageAccumulator_C">();
	}
	static class ULimbDamageAccumulator_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<ULimbDamageAccumulator_C>();
	}
};
static_assert(alignof(ULimbDamageAccumulator_C) == 0x000008, "Wrong alignment on ULimbDamageAccumulator_C");
static_assert(sizeof(ULimbDamageAccumulator_C) == 0x000040, "Wrong size on ULimbDamageAccumulator_C");
static_assert(offsetof(ULimbDamageAccumulator_C, MaxTimeBetweenDamageInstances) == 0x000028, "Member 'ULimbDamageAccumulator_C::MaxTimeBetweenDamageInstances' has a wrong offset!");
static_assert(offsetof(ULimbDamageAccumulator_C, DamageInstances) == 0x000030, "Member 'ULimbDamageAccumulator_C::DamageInstances' has a wrong offset!");

}

