#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: ITEM_Base

#include "Basic.hpp"

#include "ENUM_ItemType_structs.hpp"
#include "CoreGame_classes.hpp"


namespace SDK
{

// BlueprintGeneratedClass ITEM_Base.ITEM_Base_C
// 0x00D8 (0x0100 - 0x0028)
class UITEM_Base_C : public UWorldObject
{
public:
	class FText                                   DisplayName;                                       // 0x0028(0x0018)(Edit, BlueprintVisible)
	class FText                                   ShortDisplayName;                                  // 0x0040(0x0018)(Edit, BlueprintVisible)
	class FText                                   Description;                                       // 0x0058(0x0018)(Edit, BlueprintVisible)
	ENUM_ItemType                                 ItemType;                                          // 0x0070(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_71[0x3];                                       // 0x0071(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         MaxStackCount;                                     // 0x0074(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Count;                                             // 0x0078(0x0004)(Edit, BlueprintVisible, ZeroConstructor, SaveGame, IsPlainOldData, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash)
	int32                                         GridWidth;                                         // 0x007C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         GridHeight;                                        // 0x0080(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          AutoEquip;                                         // 0x0084(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          ForceEquip;                                        // 0x0085(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Destructible;                                      // 0x0086(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Activatable;                                       // 0x0087(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          IsRotated;                                         // 0x0088(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, SaveGame, IsPlainOldData, NoDestructor)
	uint8                                         Pad_89[0x7];                                       // 0x0089(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TSoftClassPtr<class UClass>                   PickupClass;                                       // 0x0090(0x0028)(Edit, BlueprintVisible, HasGetValueTypeHash)
	class UInventoryBag_C*                        Bag;                                               // 0x00B8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         SlotIndex;                                         // 0x00C0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, SaveGame, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_C4[0x4];                                       // 0x00C4(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class APICKUP_Base_C*                         LinkedPickupActor;                                 // 0x00C8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	FMulticastInlineDelegateProperty_             DropEvent;                                         // 0x00D0(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)
	FMulticastInlineDelegateProperty_             CountChanged;                                      // 0x00E0(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)
	TArray<TSoftClassPtr<class UClass>>           ContextOptions;                                    // 0x00F0(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance)

public:
	void DropEvent__DelegateSignature(class APICKUP_Base_C* Pickup);
	void CountChanged__DelegateSignature(class UITEM_Base_C* Item, int32 Count_0);
	void GetInventory(class UCOMP_Inventory_C** Inventory);
	void IsStackable(bool* Result);
	void ShouldAutoEquip(bool* Result);
	void HasLinkedPickup(bool* Result);
	void GetLinkedPickup(class APICKUP_Base_C** Result);
	void DestroyLinkedPickup();
	void AddCount(int32 CountToAdd, class UITEM_Base_C* SourceItem, int32* ResultCount);
	void SetInventory(class UCOMP_Inventory_C* NewInventory, bool* Result);
	void OnInventoryChanged(class UCOMP_Inventory_C* PrevInventory, bool* Result);
	void InitializeItem(class UInventoryBag_C* Bag_0);
	void SetInventoryLocation(class UInventoryBag_C* NewBag, int32 NewSlotIndex);
	void OnAddedToInventory();
	void GetCount(int32* Result);
	void GetSlotIndex(int32* Result);
	void GetBag(class UInventoryBag_C** Result);
	void ShouldForceEquip(bool* Result);
	void CanUnslot(bool* Result);
	void OnBeginPlay();
	void CanDropItem(bool* Result);
	void IsDestructible(bool* Result);
	void DestroyItem(bool* Result);
	void OnRemovedFromInventory();
	void TryDropItem(class USceneComponent* SceneComponent, const struct FVector2D& RelativeOffset, bool* Result);
	void IsDeployed(bool* Result);
	void TryDropAndPushItem(class USceneComponent* SceneComponent, const struct FVector2D& RelativeOffset, bool* Result);
	void CreateDroppedPickupItem(class USceneComponent* SceneComponent, const struct FVector2D& RelativeOffset, class APICKUP_Base_C** PickupActor);
	void CreateLinkedPickupItem(const struct FTransform& PickupTransform, class APICKUP_Base_C** PickupActor);
	void SetLinkedPickup(class APICKUP_Base_C* PickupActor);
	void IsSlotted(bool* Result);
	void IsEquipped(bool* Result);
	void IsActivatable(bool* Result);
	void SetItemGridSize(const struct FIntPoint& NewSize, bool* Result);
	void OnBecomeActivatable(bool* Result);
	void OnBecomeUnactivatable(bool* Result);
	void SetEquipped(bool State, bool* Result);
	void SetActivatableInternal(bool State);
	void Activate(class APAWN_SystemShockCharacter_C* Character, bool* Result);
	void Deactivate(bool* Result);
	void IsEquippable(bool* Result);
	void GetInventoryItemDetailsClass(class UClass** InventoryItemDetailsWidget);
	void TryHandleDropEvent(class USceneComponent* SceneComponent, const struct FVector2D& RelativeOffset, bool* Result);
	void ForceHandleDropEvent(class USceneComponent* SceneComponent, const struct FVector2D& RelativeOffset);
	void CanBecomeActivatable(bool* Result);
	void GetHotbarSlottableObject(bool* Valid, TScriptInterface<class IINTERF_HotbarSlottable_C>* SlottableObject);
	void GetIsActivated(bool* Result);
	void GetDisplayName(class FText* Result);
	void GetShortDisplayName(class FText* Result);
	void GetDescription(class FText* Result);
	void CanActivate(class APAWN_SystemShockCharacter_C* Character, bool* Result);
	void GetOwnerActor(bool PrevIfNoInventory, class AActor** Actor);
	void GetOwnerCharacter(class APAWN_SystemShockCharacter_C** Character);
	void GetBestPickupClass(class UClass** Result);
	void GetIconRenderClassCollection(struct FObjectClassCollection* Result);
	void TryRotateItem(bool* Result, bool* RequiresUnslot);
	void SetIsRotated(bool NewIsRotated, bool* Success);
	void CanRotateItem(bool* Result, bool* RequiresUnslot);
	void IsItemRotated(bool* Result);
	void GetOriginalGridSize(struct FIntPoint* Result);
	void GetRotatedGridSize(struct FIntPoint* Result);
	void EVENT_OnPushDroppedPickup(class APICKUP_Base_C* Pickup);
	void GetGridSizeForDesiredRotation(bool DesiredState, struct FIntPoint* Result);
	void HasWorldInteraction(bool* Result);

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"ITEM_Base_C">();
	}
	static class UITEM_Base_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<UITEM_Base_C>();
	}
};
static_assert(alignof(UITEM_Base_C) == 0x000008, "Wrong alignment on UITEM_Base_C");
static_assert(sizeof(UITEM_Base_C) == 0x000100, "Wrong size on UITEM_Base_C");
static_assert(offsetof(UITEM_Base_C, DisplayName) == 0x000028, "Member 'UITEM_Base_C::DisplayName' has a wrong offset!");
static_assert(offsetof(UITEM_Base_C, ShortDisplayName) == 0x000040, "Member 'UITEM_Base_C::ShortDisplayName' has a wrong offset!");
static_assert(offsetof(UITEM_Base_C, Description) == 0x000058, "Member 'UITEM_Base_C::Description' has a wrong offset!");
static_assert(offsetof(UITEM_Base_C, ItemType) == 0x000070, "Member 'UITEM_Base_C::ItemType' has a wrong offset!");
static_assert(offsetof(UITEM_Base_C, MaxStackCount) == 0x000074, "Member 'UITEM_Base_C::MaxStackCount' has a wrong offset!");
static_assert(offsetof(UITEM_Base_C, Count) == 0x000078, "Member 'UITEM_Base_C::Count' has a wrong offset!");
static_assert(offsetof(UITEM_Base_C, GridWidth) == 0x00007C, "Member 'UITEM_Base_C::GridWidth' has a wrong offset!");
static_assert(offsetof(UITEM_Base_C, GridHeight) == 0x000080, "Member 'UITEM_Base_C::GridHeight' has a wrong offset!");
static_assert(offsetof(UITEM_Base_C, AutoEquip) == 0x000084, "Member 'UITEM_Base_C::AutoEquip' has a wrong offset!");
static_assert(offsetof(UITEM_Base_C, ForceEquip) == 0x000085, "Member 'UITEM_Base_C::ForceEquip' has a wrong offset!");
static_assert(offsetof(UITEM_Base_C, Destructible) == 0x000086, "Member 'UITEM_Base_C::Destructible' has a wrong offset!");
static_assert(offsetof(UITEM_Base_C, Activatable) == 0x000087, "Member 'UITEM_Base_C::Activatable' has a wrong offset!");
static_assert(offsetof(UITEM_Base_C, IsRotated) == 0x000088, "Member 'UITEM_Base_C::IsRotated' has a wrong offset!");
static_assert(offsetof(UITEM_Base_C, PickupClass) == 0x000090, "Member 'UITEM_Base_C::PickupClass' has a wrong offset!");
static_assert(offsetof(UITEM_Base_C, Bag) == 0x0000B8, "Member 'UITEM_Base_C::Bag' has a wrong offset!");
static_assert(offsetof(UITEM_Base_C, SlotIndex) == 0x0000C0, "Member 'UITEM_Base_C::SlotIndex' has a wrong offset!");
static_assert(offsetof(UITEM_Base_C, LinkedPickupActor) == 0x0000C8, "Member 'UITEM_Base_C::LinkedPickupActor' has a wrong offset!");
static_assert(offsetof(UITEM_Base_C, DropEvent) == 0x0000D0, "Member 'UITEM_Base_C::DropEvent' has a wrong offset!");
static_assert(offsetof(UITEM_Base_C, CountChanged) == 0x0000E0, "Member 'UITEM_Base_C::CountChanged' has a wrong offset!");
static_assert(offsetof(UITEM_Base_C, ContextOptions) == 0x0000F0, "Member 'UITEM_Base_C::ContextOptions' has a wrong offset!");

}

