#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: WIDGET_TargetID_TargetingReticle

#include "Basic.hpp"

#include "CoreUObject_structs.hpp"
#include "STRUCT_WeaponMode_structs.hpp"
#include "SlateCore_structs.hpp"


namespace SDK::Params
{

// Function WIDGET_TargetID_TargetingReticle.WIDGET_TargetID_TargetingReticle_C.ExecuteUbergraph_WIDGET_TargetID_TargetingReticle
// 0x0048 (0x0048 - 0x0000)
struct WIDGET_TargetID_TargetingReticle_C_ExecuteUbergraph_WIDGET_TargetID_TargetingReticle final
{
public:
	int32                                         EntryPoint;                                        // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FGeometry                              K2Node_Event_MyGeometry;                           // 0x0004(0x0038)(IsPlainOldData, NoDestructor)
	float                                         K2Node_Event_InDeltaTime;                          // 0x003C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UMaterialInstanceDynamic*               CallFunc_ConvertToDynamicMaterialInstance_ReturnValue; // 0x0040(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(WIDGET_TargetID_TargetingReticle_C_ExecuteUbergraph_WIDGET_TargetID_TargetingReticle) == 0x000008, "Wrong alignment on WIDGET_TargetID_TargetingReticle_C_ExecuteUbergraph_WIDGET_TargetID_TargetingReticle");
static_assert(sizeof(WIDGET_TargetID_TargetingReticle_C_ExecuteUbergraph_WIDGET_TargetID_TargetingReticle) == 0x000048, "Wrong size on WIDGET_TargetID_TargetingReticle_C_ExecuteUbergraph_WIDGET_TargetID_TargetingReticle");
static_assert(offsetof(WIDGET_TargetID_TargetingReticle_C_ExecuteUbergraph_WIDGET_TargetID_TargetingReticle, EntryPoint) == 0x000000, "Member 'WIDGET_TargetID_TargetingReticle_C_ExecuteUbergraph_WIDGET_TargetID_TargetingReticle::EntryPoint' has a wrong offset!");
static_assert(offsetof(WIDGET_TargetID_TargetingReticle_C_ExecuteUbergraph_WIDGET_TargetID_TargetingReticle, K2Node_Event_MyGeometry) == 0x000004, "Member 'WIDGET_TargetID_TargetingReticle_C_ExecuteUbergraph_WIDGET_TargetID_TargetingReticle::K2Node_Event_MyGeometry' has a wrong offset!");
static_assert(offsetof(WIDGET_TargetID_TargetingReticle_C_ExecuteUbergraph_WIDGET_TargetID_TargetingReticle, K2Node_Event_InDeltaTime) == 0x00003C, "Member 'WIDGET_TargetID_TargetingReticle_C_ExecuteUbergraph_WIDGET_TargetID_TargetingReticle::K2Node_Event_InDeltaTime' has a wrong offset!");
static_assert(offsetof(WIDGET_TargetID_TargetingReticle_C_ExecuteUbergraph_WIDGET_TargetID_TargetingReticle, CallFunc_ConvertToDynamicMaterialInstance_ReturnValue) == 0x000040, "Member 'WIDGET_TargetID_TargetingReticle_C_ExecuteUbergraph_WIDGET_TargetID_TargetingReticle::CallFunc_ConvertToDynamicMaterialInstance_ReturnValue' has a wrong offset!");

// Function WIDGET_TargetID_TargetingReticle.WIDGET_TargetID_TargetingReticle_C.Tick
// 0x003C (0x003C - 0x0000)
struct WIDGET_TargetID_TargetingReticle_C_Tick final
{
public:
	struct FGeometry                              MyGeometry;                                        // 0x0000(0x0038)(BlueprintVisible, BlueprintReadOnly, Parm, IsPlainOldData, NoDestructor)
	float                                         InDeltaTime;                                       // 0x0038(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(WIDGET_TargetID_TargetingReticle_C_Tick) == 0x000004, "Wrong alignment on WIDGET_TargetID_TargetingReticle_C_Tick");
static_assert(sizeof(WIDGET_TargetID_TargetingReticle_C_Tick) == 0x00003C, "Wrong size on WIDGET_TargetID_TargetingReticle_C_Tick");
static_assert(offsetof(WIDGET_TargetID_TargetingReticle_C_Tick, MyGeometry) == 0x000000, "Member 'WIDGET_TargetID_TargetingReticle_C_Tick::MyGeometry' has a wrong offset!");
static_assert(offsetof(WIDGET_TargetID_TargetingReticle_C_Tick, InDeltaTime) == 0x000038, "Member 'WIDGET_TargetID_TargetingReticle_C_Tick::InDeltaTime' has a wrong offset!");

// Function WIDGET_TargetID_TargetingReticle.WIDGET_TargetID_TargetingReticle_C.OnAcquireTarget
// 0x0040 (0x0040 - 0x0000)
struct WIDGET_TargetID_TargetingReticle_C_OnAcquireTarget final
{
public:
	class APAWN_Enemy_C*                          Enemy;                                             // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TDelegate<void()>                             K2Node_CreateDelegate_OutputDelegate;              // 0x0008(0x0010)(ZeroConstructor, NoDestructor)
	TDelegate<void()>                             K2Node_CreateDelegate_OutputDelegate_1;            // 0x0018(0x0010)(ZeroConstructor, NoDestructor)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0028(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_29[0x7];                                       // 0x0029(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UUMGSequencePlayer*                     CallFunc_PlayAnimation_ReturnValue;                // 0x0030(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UUMGSequencePlayer*                     CallFunc_PlayAnimation_ReturnValue_1;              // 0x0038(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(WIDGET_TargetID_TargetingReticle_C_OnAcquireTarget) == 0x000008, "Wrong alignment on WIDGET_TargetID_TargetingReticle_C_OnAcquireTarget");
static_assert(sizeof(WIDGET_TargetID_TargetingReticle_C_OnAcquireTarget) == 0x000040, "Wrong size on WIDGET_TargetID_TargetingReticle_C_OnAcquireTarget");
static_assert(offsetof(WIDGET_TargetID_TargetingReticle_C_OnAcquireTarget, Enemy) == 0x000000, "Member 'WIDGET_TargetID_TargetingReticle_C_OnAcquireTarget::Enemy' has a wrong offset!");
static_assert(offsetof(WIDGET_TargetID_TargetingReticle_C_OnAcquireTarget, K2Node_CreateDelegate_OutputDelegate) == 0x000008, "Member 'WIDGET_TargetID_TargetingReticle_C_OnAcquireTarget::K2Node_CreateDelegate_OutputDelegate' has a wrong offset!");
static_assert(offsetof(WIDGET_TargetID_TargetingReticle_C_OnAcquireTarget, K2Node_CreateDelegate_OutputDelegate_1) == 0x000018, "Member 'WIDGET_TargetID_TargetingReticle_C_OnAcquireTarget::K2Node_CreateDelegate_OutputDelegate_1' has a wrong offset!");
static_assert(offsetof(WIDGET_TargetID_TargetingReticle_C_OnAcquireTarget, CallFunc_IsValid_ReturnValue) == 0x000028, "Member 'WIDGET_TargetID_TargetingReticle_C_OnAcquireTarget::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(WIDGET_TargetID_TargetingReticle_C_OnAcquireTarget, CallFunc_PlayAnimation_ReturnValue) == 0x000030, "Member 'WIDGET_TargetID_TargetingReticle_C_OnAcquireTarget::CallFunc_PlayAnimation_ReturnValue' has a wrong offset!");
static_assert(offsetof(WIDGET_TargetID_TargetingReticle_C_OnAcquireTarget, CallFunc_PlayAnimation_ReturnValue_1) == 0x000038, "Member 'WIDGET_TargetID_TargetingReticle_C_OnAcquireTarget::CallFunc_PlayAnimation_ReturnValue_1' has a wrong offset!");

// Function WIDGET_TargetID_TargetingReticle.WIDGET_TargetID_TargetingReticle_C.OnCursorAligned
// 0x0018 (0x0018 - 0x0000)
struct WIDGET_TargetID_TargetingReticle_C_OnCursorAligned final
{
public:
	bool                                          IsAligned;                                         // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_NotEqual_BoolBool_ReturnValue;            // 0x0001(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_2[0x6];                                        // 0x0002(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class UUMGSequencePlayer*                     CallFunc_PlayAnimation_ReturnValue;                // 0x0008(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UUMGSequencePlayer*                     CallFunc_PlayAnimation_ReturnValue_1;              // 0x0010(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(WIDGET_TargetID_TargetingReticle_C_OnCursorAligned) == 0x000008, "Wrong alignment on WIDGET_TargetID_TargetingReticle_C_OnCursorAligned");
static_assert(sizeof(WIDGET_TargetID_TargetingReticle_C_OnCursorAligned) == 0x000018, "Wrong size on WIDGET_TargetID_TargetingReticle_C_OnCursorAligned");
static_assert(offsetof(WIDGET_TargetID_TargetingReticle_C_OnCursorAligned, IsAligned) == 0x000000, "Member 'WIDGET_TargetID_TargetingReticle_C_OnCursorAligned::IsAligned' has a wrong offset!");
static_assert(offsetof(WIDGET_TargetID_TargetingReticle_C_OnCursorAligned, CallFunc_NotEqual_BoolBool_ReturnValue) == 0x000001, "Member 'WIDGET_TargetID_TargetingReticle_C_OnCursorAligned::CallFunc_NotEqual_BoolBool_ReturnValue' has a wrong offset!");
static_assert(offsetof(WIDGET_TargetID_TargetingReticle_C_OnCursorAligned, CallFunc_PlayAnimation_ReturnValue) == 0x000008, "Member 'WIDGET_TargetID_TargetingReticle_C_OnCursorAligned::CallFunc_PlayAnimation_ReturnValue' has a wrong offset!");
static_assert(offsetof(WIDGET_TargetID_TargetingReticle_C_OnCursorAligned, CallFunc_PlayAnimation_ReturnValue_1) == 0x000010, "Member 'WIDGET_TargetID_TargetingReticle_C_OnCursorAligned::CallFunc_PlayAnimation_ReturnValue_1' has a wrong offset!");

// Function WIDGET_TargetID_TargetingReticle.WIDGET_TargetID_TargetingReticle_C.TryUpdateCursorOver
// 0x0002 (0x0002 - 0x0000)
struct WIDGET_TargetID_TargetingReticle_C_TryUpdateCursorOver final
{
public:
	bool                                          State;                                             // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_NotEqual_BoolBool_ReturnValue;            // 0x0001(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(WIDGET_TargetID_TargetingReticle_C_TryUpdateCursorOver) == 0x000001, "Wrong alignment on WIDGET_TargetID_TargetingReticle_C_TryUpdateCursorOver");
static_assert(sizeof(WIDGET_TargetID_TargetingReticle_C_TryUpdateCursorOver) == 0x000002, "Wrong size on WIDGET_TargetID_TargetingReticle_C_TryUpdateCursorOver");
static_assert(offsetof(WIDGET_TargetID_TargetingReticle_C_TryUpdateCursorOver, State) == 0x000000, "Member 'WIDGET_TargetID_TargetingReticle_C_TryUpdateCursorOver::State' has a wrong offset!");
static_assert(offsetof(WIDGET_TargetID_TargetingReticle_C_TryUpdateCursorOver, CallFunc_NotEqual_BoolBool_ReturnValue) == 0x000001, "Member 'WIDGET_TargetID_TargetingReticle_C_TryUpdateCursorOver::CallFunc_NotEqual_BoolBool_ReturnValue' has a wrong offset!");

// Function WIDGET_TargetID_TargetingReticle.WIDGET_TargetID_TargetingReticle_C.UpdateWeakspotLocation
// 0x0288 (0x0288 - 0x0000)
struct WIDGET_TargetID_TargetingReticle_C_UpdateWeakspotLocation final
{
public:
	struct FVector2D                              CursorDelta;                                       // 0x0000(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector2D                              ScreenSize;                                        // 0x0008(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector2D                              WeakspotWidgetLocation;                            // 0x0010(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FName                                   WeakspotBoneName;                                  // 0x0018(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         AttackArmorPenetration;                            // 0x0020(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                AttackLocation;                                    // 0x0024(0x000C)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CurrentTimestamp;                                  // 0x0030(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_34[0x4];                                       // 0x0034(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UITEM_WeaponBase_C*                     EquippedWeapon;                                    // 0x0038(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class APAWN_Hacker_Implant_C*                 HackerPawn;                                        // 0x0040(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_GetGameTimeInSeconds_ReturnValue;         // 0x0048(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Add_FloatFloat_ReturnValue;               // 0x004C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Square_ReturnValue;                       // 0x0050(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_VSize2DSquared_ReturnValue;               // 0x0054(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_LessEqual_FloatFloat_ReturnValue;         // 0x0058(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_59[0x3];                                       // 0x0059(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector2D                              CallFunc_Multiply_Vector2DFloat_ReturnValue;       // 0x005C(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector2D                              CallFunc_Subtract_Vector2DVector2D_ReturnValue;    // 0x0064(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_6C[0x4];                                       // 0x006C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UWIDGET_PlayerHUD_C*                    CallFunc_GetNeuralHUD_Result;                      // 0x0070(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FGeometry                              CallFunc_GetCachedGeometry_ReturnValue;            // 0x0078(0x0038)(ConstParm, IsPlainOldData, NoDestructor)
	class UWIDGET_PlayerHUD_C*                    CallFunc_GetNeuralHUD_Result_1;                    // 0x00B0(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector2D                              CallFunc_GetLocalSize_ReturnValue;                 // 0x00B8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class APlayerController*                      CallFunc_GetOwningPlayer_ReturnValue;              // 0x00C0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FGeometry                              CallFunc_GetCachedGeometry_ReturnValue_1;          // 0x00C8(0x0038)(ConstParm, IsPlainOldData, NoDestructor)
	struct FVector2D                              CallFunc_ProjectWorldLocationToWidgetPosition_ScreenPosition; // 0x0100(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_ProjectWorldLocationToWidgetPosition_ReturnValue; // 0x0108(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0109(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_10A[0x2];                                      // 0x010A(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector2D                              CallFunc_LocalToAbsolute_ReturnValue;              // 0x010C(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector2D                              CallFunc_GetWindowPointFromScreenPoint_ReturnValue; // 0x0114(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector2D                              CallFunc_GetWidgetOffsetFromWindowPoint_WidgetOffset; // 0x011C(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_GetWidgetOffsetFromWindowPoint_ReturnValue; // 0x0124(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_125[0x3];                                      // 0x0125(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class UCanvasPanelSlot*                       CallFunc_SlotAsCanvasSlot_ReturnValue;             // 0x0128(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UITEM_WeaponBase_C*                     CallFunc_GetEquippedWeapon_Weapon;                 // 0x0130(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_GetSocketLocation_ReturnValue;            // 0x0138(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue_1;                    // 0x0144(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_145[0x3];                                      // 0x0145(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                CallFunc_K2_GetComponentLocation_ReturnValue;      // 0x0148(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_154[0x4];                                      // 0x0154(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FSTRUCT_WeaponMode                     CallFunc_GetCurrentMode_Mode;                      // 0x0158(0x0100)(HasGetValueTypeHash)
	bool                                          CallFunc_GreaterEqual_FloatFloat_ReturnValue;      // 0x0258(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_259[0x7];                                      // 0x0259(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class APlayerController*                      CallFunc_GetOwningPlayer_ReturnValue_1;            // 0x0260(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class APawn*                                  CallFunc_K2_GetPawn_ReturnValue;                   // 0x0268(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FName                                   CallFunc_GetWeakspotBoneNameForAttack_ResultBoneName; // 0x0270(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class APAWN_Hacker_Implant_C*                 K2Node_DynamicCast_AsPAWN_Hacker_Implant;          // 0x0278(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0280(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(WIDGET_TargetID_TargetingReticle_C_UpdateWeakspotLocation) == 0x000008, "Wrong alignment on WIDGET_TargetID_TargetingReticle_C_UpdateWeakspotLocation");
static_assert(sizeof(WIDGET_TargetID_TargetingReticle_C_UpdateWeakspotLocation) == 0x000288, "Wrong size on WIDGET_TargetID_TargetingReticle_C_UpdateWeakspotLocation");
static_assert(offsetof(WIDGET_TargetID_TargetingReticle_C_UpdateWeakspotLocation, CursorDelta) == 0x000000, "Member 'WIDGET_TargetID_TargetingReticle_C_UpdateWeakspotLocation::CursorDelta' has a wrong offset!");
static_assert(offsetof(WIDGET_TargetID_TargetingReticle_C_UpdateWeakspotLocation, ScreenSize) == 0x000008, "Member 'WIDGET_TargetID_TargetingReticle_C_UpdateWeakspotLocation::ScreenSize' has a wrong offset!");
static_assert(offsetof(WIDGET_TargetID_TargetingReticle_C_UpdateWeakspotLocation, WeakspotWidgetLocation) == 0x000010, "Member 'WIDGET_TargetID_TargetingReticle_C_UpdateWeakspotLocation::WeakspotWidgetLocation' has a wrong offset!");
static_assert(offsetof(WIDGET_TargetID_TargetingReticle_C_UpdateWeakspotLocation, WeakspotBoneName) == 0x000018, "Member 'WIDGET_TargetID_TargetingReticle_C_UpdateWeakspotLocation::WeakspotBoneName' has a wrong offset!");
static_assert(offsetof(WIDGET_TargetID_TargetingReticle_C_UpdateWeakspotLocation, AttackArmorPenetration) == 0x000020, "Member 'WIDGET_TargetID_TargetingReticle_C_UpdateWeakspotLocation::AttackArmorPenetration' has a wrong offset!");
static_assert(offsetof(WIDGET_TargetID_TargetingReticle_C_UpdateWeakspotLocation, AttackLocation) == 0x000024, "Member 'WIDGET_TargetID_TargetingReticle_C_UpdateWeakspotLocation::AttackLocation' has a wrong offset!");
static_assert(offsetof(WIDGET_TargetID_TargetingReticle_C_UpdateWeakspotLocation, CurrentTimestamp) == 0x000030, "Member 'WIDGET_TargetID_TargetingReticle_C_UpdateWeakspotLocation::CurrentTimestamp' has a wrong offset!");
static_assert(offsetof(WIDGET_TargetID_TargetingReticle_C_UpdateWeakspotLocation, EquippedWeapon) == 0x000038, "Member 'WIDGET_TargetID_TargetingReticle_C_UpdateWeakspotLocation::EquippedWeapon' has a wrong offset!");
static_assert(offsetof(WIDGET_TargetID_TargetingReticle_C_UpdateWeakspotLocation, HackerPawn) == 0x000040, "Member 'WIDGET_TargetID_TargetingReticle_C_UpdateWeakspotLocation::HackerPawn' has a wrong offset!");
static_assert(offsetof(WIDGET_TargetID_TargetingReticle_C_UpdateWeakspotLocation, CallFunc_GetGameTimeInSeconds_ReturnValue) == 0x000048, "Member 'WIDGET_TargetID_TargetingReticle_C_UpdateWeakspotLocation::CallFunc_GetGameTimeInSeconds_ReturnValue' has a wrong offset!");
static_assert(offsetof(WIDGET_TargetID_TargetingReticle_C_UpdateWeakspotLocation, CallFunc_Add_FloatFloat_ReturnValue) == 0x00004C, "Member 'WIDGET_TargetID_TargetingReticle_C_UpdateWeakspotLocation::CallFunc_Add_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(WIDGET_TargetID_TargetingReticle_C_UpdateWeakspotLocation, CallFunc_Square_ReturnValue) == 0x000050, "Member 'WIDGET_TargetID_TargetingReticle_C_UpdateWeakspotLocation::CallFunc_Square_ReturnValue' has a wrong offset!");
static_assert(offsetof(WIDGET_TargetID_TargetingReticle_C_UpdateWeakspotLocation, CallFunc_VSize2DSquared_ReturnValue) == 0x000054, "Member 'WIDGET_TargetID_TargetingReticle_C_UpdateWeakspotLocation::CallFunc_VSize2DSquared_ReturnValue' has a wrong offset!");
static_assert(offsetof(WIDGET_TargetID_TargetingReticle_C_UpdateWeakspotLocation, CallFunc_LessEqual_FloatFloat_ReturnValue) == 0x000058, "Member 'WIDGET_TargetID_TargetingReticle_C_UpdateWeakspotLocation::CallFunc_LessEqual_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(WIDGET_TargetID_TargetingReticle_C_UpdateWeakspotLocation, CallFunc_Multiply_Vector2DFloat_ReturnValue) == 0x00005C, "Member 'WIDGET_TargetID_TargetingReticle_C_UpdateWeakspotLocation::CallFunc_Multiply_Vector2DFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(WIDGET_TargetID_TargetingReticle_C_UpdateWeakspotLocation, CallFunc_Subtract_Vector2DVector2D_ReturnValue) == 0x000064, "Member 'WIDGET_TargetID_TargetingReticle_C_UpdateWeakspotLocation::CallFunc_Subtract_Vector2DVector2D_ReturnValue' has a wrong offset!");
static_assert(offsetof(WIDGET_TargetID_TargetingReticle_C_UpdateWeakspotLocation, CallFunc_GetNeuralHUD_Result) == 0x000070, "Member 'WIDGET_TargetID_TargetingReticle_C_UpdateWeakspotLocation::CallFunc_GetNeuralHUD_Result' has a wrong offset!");
static_assert(offsetof(WIDGET_TargetID_TargetingReticle_C_UpdateWeakspotLocation, CallFunc_GetCachedGeometry_ReturnValue) == 0x000078, "Member 'WIDGET_TargetID_TargetingReticle_C_UpdateWeakspotLocation::CallFunc_GetCachedGeometry_ReturnValue' has a wrong offset!");
static_assert(offsetof(WIDGET_TargetID_TargetingReticle_C_UpdateWeakspotLocation, CallFunc_GetNeuralHUD_Result_1) == 0x0000B0, "Member 'WIDGET_TargetID_TargetingReticle_C_UpdateWeakspotLocation::CallFunc_GetNeuralHUD_Result_1' has a wrong offset!");
static_assert(offsetof(WIDGET_TargetID_TargetingReticle_C_UpdateWeakspotLocation, CallFunc_GetLocalSize_ReturnValue) == 0x0000B8, "Member 'WIDGET_TargetID_TargetingReticle_C_UpdateWeakspotLocation::CallFunc_GetLocalSize_ReturnValue' has a wrong offset!");
static_assert(offsetof(WIDGET_TargetID_TargetingReticle_C_UpdateWeakspotLocation, CallFunc_GetOwningPlayer_ReturnValue) == 0x0000C0, "Member 'WIDGET_TargetID_TargetingReticle_C_UpdateWeakspotLocation::CallFunc_GetOwningPlayer_ReturnValue' has a wrong offset!");
static_assert(offsetof(WIDGET_TargetID_TargetingReticle_C_UpdateWeakspotLocation, CallFunc_GetCachedGeometry_ReturnValue_1) == 0x0000C8, "Member 'WIDGET_TargetID_TargetingReticle_C_UpdateWeakspotLocation::CallFunc_GetCachedGeometry_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(WIDGET_TargetID_TargetingReticle_C_UpdateWeakspotLocation, CallFunc_ProjectWorldLocationToWidgetPosition_ScreenPosition) == 0x000100, "Member 'WIDGET_TargetID_TargetingReticle_C_UpdateWeakspotLocation::CallFunc_ProjectWorldLocationToWidgetPosition_ScreenPosition' has a wrong offset!");
static_assert(offsetof(WIDGET_TargetID_TargetingReticle_C_UpdateWeakspotLocation, CallFunc_ProjectWorldLocationToWidgetPosition_ReturnValue) == 0x000108, "Member 'WIDGET_TargetID_TargetingReticle_C_UpdateWeakspotLocation::CallFunc_ProjectWorldLocationToWidgetPosition_ReturnValue' has a wrong offset!");
static_assert(offsetof(WIDGET_TargetID_TargetingReticle_C_UpdateWeakspotLocation, CallFunc_IsValid_ReturnValue) == 0x000109, "Member 'WIDGET_TargetID_TargetingReticle_C_UpdateWeakspotLocation::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(WIDGET_TargetID_TargetingReticle_C_UpdateWeakspotLocation, CallFunc_LocalToAbsolute_ReturnValue) == 0x00010C, "Member 'WIDGET_TargetID_TargetingReticle_C_UpdateWeakspotLocation::CallFunc_LocalToAbsolute_ReturnValue' has a wrong offset!");
static_assert(offsetof(WIDGET_TargetID_TargetingReticle_C_UpdateWeakspotLocation, CallFunc_GetWindowPointFromScreenPoint_ReturnValue) == 0x000114, "Member 'WIDGET_TargetID_TargetingReticle_C_UpdateWeakspotLocation::CallFunc_GetWindowPointFromScreenPoint_ReturnValue' has a wrong offset!");
static_assert(offsetof(WIDGET_TargetID_TargetingReticle_C_UpdateWeakspotLocation, CallFunc_GetWidgetOffsetFromWindowPoint_WidgetOffset) == 0x00011C, "Member 'WIDGET_TargetID_TargetingReticle_C_UpdateWeakspotLocation::CallFunc_GetWidgetOffsetFromWindowPoint_WidgetOffset' has a wrong offset!");
static_assert(offsetof(WIDGET_TargetID_TargetingReticle_C_UpdateWeakspotLocation, CallFunc_GetWidgetOffsetFromWindowPoint_ReturnValue) == 0x000124, "Member 'WIDGET_TargetID_TargetingReticle_C_UpdateWeakspotLocation::CallFunc_GetWidgetOffsetFromWindowPoint_ReturnValue' has a wrong offset!");
static_assert(offsetof(WIDGET_TargetID_TargetingReticle_C_UpdateWeakspotLocation, CallFunc_SlotAsCanvasSlot_ReturnValue) == 0x000128, "Member 'WIDGET_TargetID_TargetingReticle_C_UpdateWeakspotLocation::CallFunc_SlotAsCanvasSlot_ReturnValue' has a wrong offset!");
static_assert(offsetof(WIDGET_TargetID_TargetingReticle_C_UpdateWeakspotLocation, CallFunc_GetEquippedWeapon_Weapon) == 0x000130, "Member 'WIDGET_TargetID_TargetingReticle_C_UpdateWeakspotLocation::CallFunc_GetEquippedWeapon_Weapon' has a wrong offset!");
static_assert(offsetof(WIDGET_TargetID_TargetingReticle_C_UpdateWeakspotLocation, CallFunc_GetSocketLocation_ReturnValue) == 0x000138, "Member 'WIDGET_TargetID_TargetingReticle_C_UpdateWeakspotLocation::CallFunc_GetSocketLocation_ReturnValue' has a wrong offset!");
static_assert(offsetof(WIDGET_TargetID_TargetingReticle_C_UpdateWeakspotLocation, CallFunc_IsValid_ReturnValue_1) == 0x000144, "Member 'WIDGET_TargetID_TargetingReticle_C_UpdateWeakspotLocation::CallFunc_IsValid_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(WIDGET_TargetID_TargetingReticle_C_UpdateWeakspotLocation, CallFunc_K2_GetComponentLocation_ReturnValue) == 0x000148, "Member 'WIDGET_TargetID_TargetingReticle_C_UpdateWeakspotLocation::CallFunc_K2_GetComponentLocation_ReturnValue' has a wrong offset!");
static_assert(offsetof(WIDGET_TargetID_TargetingReticle_C_UpdateWeakspotLocation, CallFunc_GetCurrentMode_Mode) == 0x000158, "Member 'WIDGET_TargetID_TargetingReticle_C_UpdateWeakspotLocation::CallFunc_GetCurrentMode_Mode' has a wrong offset!");
static_assert(offsetof(WIDGET_TargetID_TargetingReticle_C_UpdateWeakspotLocation, CallFunc_GreaterEqual_FloatFloat_ReturnValue) == 0x000258, "Member 'WIDGET_TargetID_TargetingReticle_C_UpdateWeakspotLocation::CallFunc_GreaterEqual_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(WIDGET_TargetID_TargetingReticle_C_UpdateWeakspotLocation, CallFunc_GetOwningPlayer_ReturnValue_1) == 0x000260, "Member 'WIDGET_TargetID_TargetingReticle_C_UpdateWeakspotLocation::CallFunc_GetOwningPlayer_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(WIDGET_TargetID_TargetingReticle_C_UpdateWeakspotLocation, CallFunc_K2_GetPawn_ReturnValue) == 0x000268, "Member 'WIDGET_TargetID_TargetingReticle_C_UpdateWeakspotLocation::CallFunc_K2_GetPawn_ReturnValue' has a wrong offset!");
static_assert(offsetof(WIDGET_TargetID_TargetingReticle_C_UpdateWeakspotLocation, CallFunc_GetWeakspotBoneNameForAttack_ResultBoneName) == 0x000270, "Member 'WIDGET_TargetID_TargetingReticle_C_UpdateWeakspotLocation::CallFunc_GetWeakspotBoneNameForAttack_ResultBoneName' has a wrong offset!");
static_assert(offsetof(WIDGET_TargetID_TargetingReticle_C_UpdateWeakspotLocation, K2Node_DynamicCast_AsPAWN_Hacker_Implant) == 0x000278, "Member 'WIDGET_TargetID_TargetingReticle_C_UpdateWeakspotLocation::K2Node_DynamicCast_AsPAWN_Hacker_Implant' has a wrong offset!");
static_assert(offsetof(WIDGET_TargetID_TargetingReticle_C_UpdateWeakspotLocation, K2Node_DynamicCast_bSuccess) == 0x000280, "Member 'WIDGET_TargetID_TargetingReticle_C_UpdateWeakspotLocation::K2Node_DynamicCast_bSuccess' has a wrong offset!");

// Function WIDGET_TargetID_TargetingReticle.WIDGET_TargetID_TargetingReticle_C.EVENT_OnDismissAnimationFinished
// 0x0010 (0x0010 - 0x0000)
struct WIDGET_TargetID_TargetingReticle_C_EVENT_OnDismissAnimationFinished final
{
public:
	TDelegate<void()>                             K2Node_CreateDelegate_OutputDelegate;              // 0x0000(0x0010)(ZeroConstructor, NoDestructor)
};
static_assert(alignof(WIDGET_TargetID_TargetingReticle_C_EVENT_OnDismissAnimationFinished) == 0x000004, "Wrong alignment on WIDGET_TargetID_TargetingReticle_C_EVENT_OnDismissAnimationFinished");
static_assert(sizeof(WIDGET_TargetID_TargetingReticle_C_EVENT_OnDismissAnimationFinished) == 0x000010, "Wrong size on WIDGET_TargetID_TargetingReticle_C_EVENT_OnDismissAnimationFinished");
static_assert(offsetof(WIDGET_TargetID_TargetingReticle_C_EVENT_OnDismissAnimationFinished, K2Node_CreateDelegate_OutputDelegate) == 0x000000, "Member 'WIDGET_TargetID_TargetingReticle_C_EVENT_OnDismissAnimationFinished::K2Node_CreateDelegate_OutputDelegate' has a wrong offset!");

}

