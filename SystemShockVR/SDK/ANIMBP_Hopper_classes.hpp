#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: ANIMBP_Hopper

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "Engine_classes.hpp"
#include "AnimGraphRuntime_structs.hpp"
#include "CoreUObject_structs.hpp"
#include "ENUM_DeathBlowType_structs.hpp"
#include "ENUM_Emotions_structs.hpp"


namespace SDK
{

// AnimBlueprintGeneratedClass ANIMBP_Hopper.ANIMBP_Hopper_C
// 0x0810 (0x0AD0 - 0x02C0)
class UANIMBP_Hopper_C final : public UAnimInstance
{
public:
	uint8                                         Pad_2B8[0x8];                                      // 0x02B8(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x02C0(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	struct FAnimNode_Root                         AnimGraphNode_Root;                                // 0x02C8(0x0030)()
	struct FAnimNode_SequenceEvaluator            AnimGraphNode_SequenceEvaluator;                   // 0x02F8(0x0050)()
	struct FAnimNode_ConvertComponentToLocalSpace AnimGraphNode_ComponentToLocalSpace;               // 0x0348(0x0020)()
	struct FAnimNode_ModifyBone                   AnimGraphNode_ModifyBone_1;                        // 0x0368(0x0108)()
	struct FAnimNode_Slot                         AnimGraphNode_Slot;                                // 0x0470(0x0048)()
	struct FAnimNode_ApplyAdditive                AnimGraphNode_ApplyAdditive;                       // 0x04B8(0x00C8)()
	struct FAnimNode_BlendListByBool              AnimGraphNode_BlendListByBool_2;                   // 0x0580(0x00A0)()
	struct FAnimNode_SequencePlayer               AnimGraphNode_SequencePlayer_3;                    // 0x0620(0x0080)()
	struct FAnimNode_ConvertLocalToComponentSpace AnimGraphNode_LocalToComponentSpace;               // 0x06A0(0x0020)()
	struct FAnimNode_ModifyBone                   AnimGraphNode_ModifyBone;                          // 0x06C0(0x0108)()
	struct FAnimNode_SequencePlayer               AnimGraphNode_SequencePlayer_2;                    // 0x07C8(0x0080)()
	struct FAnimNode_BlendListByBool              AnimGraphNode_BlendListByBool_1;                   // 0x0848(0x00A0)()
	struct FAnimNode_SequencePlayer               AnimGraphNode_SequencePlayer_1;                    // 0x08E8(0x0080)()
	struct FAnimNode_SequencePlayer               AnimGraphNode_SequencePlayer;                      // 0x0968(0x0080)()
	struct FAnimNode_BlendListByBool              AnimGraphNode_BlendListByBool;                     // 0x09E8(0x00A0)()
	bool                                          UseIdleOverride;                                   // 0x0A88(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_A89[0x7];                                      // 0x0A89(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UAnimSequenceBase*                      IdleOverride;                                      // 0x0A90(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UOBJ_EnemyTarget_C*                     AimTarget;                                         // 0x0A98(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         AimVertical;                                       // 0x0AA0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         SourcePitch;                                       // 0x0AA4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               AdjustedRootOffset;                                // 0x0AA8(0x000C)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	struct FRotator                               AdjustedSpineOffset;                               // 0x0AB4(0x000C)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	class UAnimSequenceBase*                      StunnedAnimSequence;                               // 0x0AC0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          UseStunnedSequence;                                // 0x0AC8(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          LoopIdleAnimation;                                 // 0x0AC9(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)

public:
	void ExecuteUbergraph_ANIMBP_Hopper(int32 EntryPoint);
	void AnimNotify_StopHopperHoverAudio();
	void AnimNotify_StartHopperHoverSound();
	void BlueprintUpdateAnimation(float DeltaTimeX);
	void UpdateBodyRotation();
	void UpdateAimSettings(float DeltaTime);
	void AnimGraph(struct FPoseLink* AnimGraph_0);
	void SetVoiceAmplitude(float VoiceAmplitude, bool* Result);
	void IsStunned(bool* Result);
	void SetStunnedSequence(class UAnimSequence* StunnedSequence, bool* Result);
	void SetSprintEnabled(bool SprintEnabled, bool* Result);
	void SetTravelMode(bool TravelModeOn, bool* Result);
	void GetAimTarget(class UOBJ_EnemyTarget_C** Target);
	void SetAimTarget(class UOBJ_EnemyTarget_C* Target, bool* Result);
	void GetIdleOverrideSequence(class UAnimSequenceBase** IdleOverride_0);
	void SetIdleOverrideSequence(class UAnimSequenceBase* IdleOverride_0, bool* Result);
	void SetRelativeAimAngleOffset(float YawOffset, float PitchOffset, float Alpha, bool* Result);
	void GetRotation(struct FRotator* AnimRotationPerSecond, float* AnimRotationAlpha);
	void GetStance(ENUM_Emotions* Stance);
	void SetStance(ENUM_Emotions Stance, bool* Result);
	void SetCatatonic(bool State, bool* Result);
	void SetStandingTurn(float SignedAngleToTarget, bool IsStanding, bool* Result);
	void ReceiveDeathBlow(ENUM_DeathBlowType BodyPart, bool* Result);
	void ReceiveImpact(const struct FVector& Impulse, const struct FVector& ImpactLocation, const struct FVector& ImpactNormal, class FName BoneName, const class FString& DamageType, float DamageAmount, float FlinchTime, bool* Result);
	void SetIsAlive(bool IsAlive, bool* Result);
	void SetMovementParameters(const struct FVector& Velocity, const struct FRotator& Rotation, const struct FRotator& DesiredRotation, bool* Result);
	void SetLookAtAlpha(float Alpha, bool* Result);
	void SetLookAtLocation(const struct FVector& Location, bool* Result);

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"ANIMBP_Hopper_C">();
	}
	static class UANIMBP_Hopper_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<UANIMBP_Hopper_C>();
	}
};
static_assert(alignof(UANIMBP_Hopper_C) == 0x000010, "Wrong alignment on UANIMBP_Hopper_C");
static_assert(sizeof(UANIMBP_Hopper_C) == 0x000AD0, "Wrong size on UANIMBP_Hopper_C");
static_assert(offsetof(UANIMBP_Hopper_C, UberGraphFrame) == 0x0002C0, "Member 'UANIMBP_Hopper_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(UANIMBP_Hopper_C, AnimGraphNode_Root) == 0x0002C8, "Member 'UANIMBP_Hopper_C::AnimGraphNode_Root' has a wrong offset!");
static_assert(offsetof(UANIMBP_Hopper_C, AnimGraphNode_SequenceEvaluator) == 0x0002F8, "Member 'UANIMBP_Hopper_C::AnimGraphNode_SequenceEvaluator' has a wrong offset!");
static_assert(offsetof(UANIMBP_Hopper_C, AnimGraphNode_ComponentToLocalSpace) == 0x000348, "Member 'UANIMBP_Hopper_C::AnimGraphNode_ComponentToLocalSpace' has a wrong offset!");
static_assert(offsetof(UANIMBP_Hopper_C, AnimGraphNode_ModifyBone_1) == 0x000368, "Member 'UANIMBP_Hopper_C::AnimGraphNode_ModifyBone_1' has a wrong offset!");
static_assert(offsetof(UANIMBP_Hopper_C, AnimGraphNode_Slot) == 0x000470, "Member 'UANIMBP_Hopper_C::AnimGraphNode_Slot' has a wrong offset!");
static_assert(offsetof(UANIMBP_Hopper_C, AnimGraphNode_ApplyAdditive) == 0x0004B8, "Member 'UANIMBP_Hopper_C::AnimGraphNode_ApplyAdditive' has a wrong offset!");
static_assert(offsetof(UANIMBP_Hopper_C, AnimGraphNode_BlendListByBool_2) == 0x000580, "Member 'UANIMBP_Hopper_C::AnimGraphNode_BlendListByBool_2' has a wrong offset!");
static_assert(offsetof(UANIMBP_Hopper_C, AnimGraphNode_SequencePlayer_3) == 0x000620, "Member 'UANIMBP_Hopper_C::AnimGraphNode_SequencePlayer_3' has a wrong offset!");
static_assert(offsetof(UANIMBP_Hopper_C, AnimGraphNode_LocalToComponentSpace) == 0x0006A0, "Member 'UANIMBP_Hopper_C::AnimGraphNode_LocalToComponentSpace' has a wrong offset!");
static_assert(offsetof(UANIMBP_Hopper_C, AnimGraphNode_ModifyBone) == 0x0006C0, "Member 'UANIMBP_Hopper_C::AnimGraphNode_ModifyBone' has a wrong offset!");
static_assert(offsetof(UANIMBP_Hopper_C, AnimGraphNode_SequencePlayer_2) == 0x0007C8, "Member 'UANIMBP_Hopper_C::AnimGraphNode_SequencePlayer_2' has a wrong offset!");
static_assert(offsetof(UANIMBP_Hopper_C, AnimGraphNode_BlendListByBool_1) == 0x000848, "Member 'UANIMBP_Hopper_C::AnimGraphNode_BlendListByBool_1' has a wrong offset!");
static_assert(offsetof(UANIMBP_Hopper_C, AnimGraphNode_SequencePlayer_1) == 0x0008E8, "Member 'UANIMBP_Hopper_C::AnimGraphNode_SequencePlayer_1' has a wrong offset!");
static_assert(offsetof(UANIMBP_Hopper_C, AnimGraphNode_SequencePlayer) == 0x000968, "Member 'UANIMBP_Hopper_C::AnimGraphNode_SequencePlayer' has a wrong offset!");
static_assert(offsetof(UANIMBP_Hopper_C, AnimGraphNode_BlendListByBool) == 0x0009E8, "Member 'UANIMBP_Hopper_C::AnimGraphNode_BlendListByBool' has a wrong offset!");
static_assert(offsetof(UANIMBP_Hopper_C, UseIdleOverride) == 0x000A88, "Member 'UANIMBP_Hopper_C::UseIdleOverride' has a wrong offset!");
static_assert(offsetof(UANIMBP_Hopper_C, IdleOverride) == 0x000A90, "Member 'UANIMBP_Hopper_C::IdleOverride' has a wrong offset!");
static_assert(offsetof(UANIMBP_Hopper_C, AimTarget) == 0x000A98, "Member 'UANIMBP_Hopper_C::AimTarget' has a wrong offset!");
static_assert(offsetof(UANIMBP_Hopper_C, AimVertical) == 0x000AA0, "Member 'UANIMBP_Hopper_C::AimVertical' has a wrong offset!");
static_assert(offsetof(UANIMBP_Hopper_C, SourcePitch) == 0x000AA4, "Member 'UANIMBP_Hopper_C::SourcePitch' has a wrong offset!");
static_assert(offsetof(UANIMBP_Hopper_C, AdjustedRootOffset) == 0x000AA8, "Member 'UANIMBP_Hopper_C::AdjustedRootOffset' has a wrong offset!");
static_assert(offsetof(UANIMBP_Hopper_C, AdjustedSpineOffset) == 0x000AB4, "Member 'UANIMBP_Hopper_C::AdjustedSpineOffset' has a wrong offset!");
static_assert(offsetof(UANIMBP_Hopper_C, StunnedAnimSequence) == 0x000AC0, "Member 'UANIMBP_Hopper_C::StunnedAnimSequence' has a wrong offset!");
static_assert(offsetof(UANIMBP_Hopper_C, UseStunnedSequence) == 0x000AC8, "Member 'UANIMBP_Hopper_C::UseStunnedSequence' has a wrong offset!");
static_assert(offsetof(UANIMBP_Hopper_C, LoopIdleAnimation) == 0x000AC9, "Member 'UANIMBP_Hopper_C::LoopIdleAnimation' has a wrong offset!");

}

