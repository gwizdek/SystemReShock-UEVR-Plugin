#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: COMP_MoveControlManager

#include "Basic.hpp"

#include "StreamingSaveGameSystem_structs.hpp"
#include "Engine_structs.hpp"
#include "CoreUObject_structs.hpp"
#include "ENUM_PlayerMoveSpeed_structs.hpp"
#include "STRUCT_EffectParams_structs.hpp"
#include "AttributeSystem_structs.hpp"
#include "ENUM_HackerGender_structs.hpp"
#include "STRUCT_ImpactEffectResults_structs.hpp"
#include "ENUM_CameraBobType_structs.hpp"
#include "NamedInteger_structs.hpp"
#include "ENUM_MoveInputActionType_structs.hpp"
#include "ENUM_OffReducedNormal_structs.hpp"
#include "STRUCT_MoveInputAction_structs.hpp"


namespace SDK::Params
{

// Function COMP_MoveControlManager.COMP_MoveControlManager_C.OnMoveControlRegistered__DelegateSignature
// 0x0008 (0x0008 - 0x0000)
struct COMP_MoveControlManager_C_OnMoveControlRegistered__DelegateSignature final
{
public:
	class UMOVECONTROL_Base_C*                    MoveControl;                                       // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(COMP_MoveControlManager_C_OnMoveControlRegistered__DelegateSignature) == 0x000008, "Wrong alignment on COMP_MoveControlManager_C_OnMoveControlRegistered__DelegateSignature");
static_assert(sizeof(COMP_MoveControlManager_C_OnMoveControlRegistered__DelegateSignature) == 0x000008, "Wrong size on COMP_MoveControlManager_C_OnMoveControlRegistered__DelegateSignature");
static_assert(offsetof(COMP_MoveControlManager_C_OnMoveControlRegistered__DelegateSignature, MoveControl) == 0x000000, "Member 'COMP_MoveControlManager_C_OnMoveControlRegistered__DelegateSignature::MoveControl' has a wrong offset!");

// Function COMP_MoveControlManager.COMP_MoveControlManager_C.InitializeMoveControls
// 0x0060 (0x0060 - 0x0000)
struct COMP_MoveControlManager_C_InitializeMoveControls final
{
public:
	float                                         Temp_float_Variable;                               // 0x0000(0x0004)(ConstParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_MakeLiteralInt_ReturnValue;               // 0x0004(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class USAVE_Settings_C*                       CallFunc_GetShockSettingsForCurrentUser_Settings;  // 0x0008(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_GetCrouchToggle_Result;                   // 0x0010(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BooleanAND_ReturnValue;                   // 0x0011(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_12[0x6];                                       // 0x0012(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class UWeightedAverageVec2*                   CallFunc_SpawnObject_ReturnValue;                  // 0x0018(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         CallFunc_MakeLiteralByte_ReturnValue;              // 0x0020(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_21[0x7];                                       // 0x0021(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UWeightedAverageVec2*                   CallFunc_SpawnObject_ReturnValue_1;                // 0x0028(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         CallFunc_MakeLiteralByte_ReturnValue_1;            // 0x0030(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_31[0x7];                                       // 0x0031(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UWeightedAverageFloat*                  CallFunc_SpawnObject_ReturnValue_2;                // 0x0038(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Conv_ByteToInt_ReturnValue;               // 0x0040(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_44[0x4];                                       // 0x0044(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class AActor*                                 CallFunc_GetOwner_ReturnValue;                     // 0x0048(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class APAWN_Hacker_Simple_C*                  K2Node_DynamicCast_AsPAWN_Hacker_Simple;           // 0x0050(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0058(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(COMP_MoveControlManager_C_InitializeMoveControls) == 0x000008, "Wrong alignment on COMP_MoveControlManager_C_InitializeMoveControls");
static_assert(sizeof(COMP_MoveControlManager_C_InitializeMoveControls) == 0x000060, "Wrong size on COMP_MoveControlManager_C_InitializeMoveControls");
static_assert(offsetof(COMP_MoveControlManager_C_InitializeMoveControls, Temp_float_Variable) == 0x000000, "Member 'COMP_MoveControlManager_C_InitializeMoveControls::Temp_float_Variable' has a wrong offset!");
static_assert(offsetof(COMP_MoveControlManager_C_InitializeMoveControls, CallFunc_MakeLiteralInt_ReturnValue) == 0x000004, "Member 'COMP_MoveControlManager_C_InitializeMoveControls::CallFunc_MakeLiteralInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(COMP_MoveControlManager_C_InitializeMoveControls, CallFunc_GetShockSettingsForCurrentUser_Settings) == 0x000008, "Member 'COMP_MoveControlManager_C_InitializeMoveControls::CallFunc_GetShockSettingsForCurrentUser_Settings' has a wrong offset!");
static_assert(offsetof(COMP_MoveControlManager_C_InitializeMoveControls, CallFunc_GetCrouchToggle_Result) == 0x000010, "Member 'COMP_MoveControlManager_C_InitializeMoveControls::CallFunc_GetCrouchToggle_Result' has a wrong offset!");
static_assert(offsetof(COMP_MoveControlManager_C_InitializeMoveControls, CallFunc_BooleanAND_ReturnValue) == 0x000011, "Member 'COMP_MoveControlManager_C_InitializeMoveControls::CallFunc_BooleanAND_ReturnValue' has a wrong offset!");
static_assert(offsetof(COMP_MoveControlManager_C_InitializeMoveControls, CallFunc_SpawnObject_ReturnValue) == 0x000018, "Member 'COMP_MoveControlManager_C_InitializeMoveControls::CallFunc_SpawnObject_ReturnValue' has a wrong offset!");
static_assert(offsetof(COMP_MoveControlManager_C_InitializeMoveControls, CallFunc_MakeLiteralByte_ReturnValue) == 0x000020, "Member 'COMP_MoveControlManager_C_InitializeMoveControls::CallFunc_MakeLiteralByte_ReturnValue' has a wrong offset!");
static_assert(offsetof(COMP_MoveControlManager_C_InitializeMoveControls, CallFunc_SpawnObject_ReturnValue_1) == 0x000028, "Member 'COMP_MoveControlManager_C_InitializeMoveControls::CallFunc_SpawnObject_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(COMP_MoveControlManager_C_InitializeMoveControls, CallFunc_MakeLiteralByte_ReturnValue_1) == 0x000030, "Member 'COMP_MoveControlManager_C_InitializeMoveControls::CallFunc_MakeLiteralByte_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(COMP_MoveControlManager_C_InitializeMoveControls, CallFunc_SpawnObject_ReturnValue_2) == 0x000038, "Member 'COMP_MoveControlManager_C_InitializeMoveControls::CallFunc_SpawnObject_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(COMP_MoveControlManager_C_InitializeMoveControls, CallFunc_Conv_ByteToInt_ReturnValue) == 0x000040, "Member 'COMP_MoveControlManager_C_InitializeMoveControls::CallFunc_Conv_ByteToInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(COMP_MoveControlManager_C_InitializeMoveControls, CallFunc_GetOwner_ReturnValue) == 0x000048, "Member 'COMP_MoveControlManager_C_InitializeMoveControls::CallFunc_GetOwner_ReturnValue' has a wrong offset!");
static_assert(offsetof(COMP_MoveControlManager_C_InitializeMoveControls, K2Node_DynamicCast_AsPAWN_Hacker_Simple) == 0x000050, "Member 'COMP_MoveControlManager_C_InitializeMoveControls::K2Node_DynamicCast_AsPAWN_Hacker_Simple' has a wrong offset!");
static_assert(offsetof(COMP_MoveControlManager_C_InitializeMoveControls, K2Node_DynamicCast_bSuccess) == 0x000058, "Member 'COMP_MoveControlManager_C_InitializeMoveControls::K2Node_DynamicCast_bSuccess' has a wrong offset!");

// Function COMP_MoveControlManager.COMP_MoveControlManager_C.UpdateMoveControls
// 0x04F8 (0x04F8 - 0x0000)
struct COMP_MoveControlManager_C_UpdateMoveControls final
{
public:
	float                                         DeltaTime;                                         // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector2D                              MoveInputAxes;                                     // 0x0004(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector2D                              LookInputAxes;                                     // 0x000C(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         DeltaCameraYaw;                                    // 0x0014(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         DesiredCameraYaw;                                  // 0x0018(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         DesiredCameraPitch;                                // 0x001C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         AdjustedLookSensitivity;                           // 0x0020(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_24[0x4];                                       // 0x0024(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UMOVECONTROL_Base_C*                    ActiveMoveControl;                                 // 0x0028(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Variable;                                // 0x0030(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_31[0x3];                                       // 0x0031(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         Temp_float_Variable;                               // 0x0034(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Temp_float_Variable_1;                             // 0x0038(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_SwitchEnum_CmpSuccess;                      // 0x003C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_3D[0x3];                                       // 0x003D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_BreakRotator_Roll;                        // 0x0040(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakRotator_Pitch;                       // 0x0044(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakRotator_Yaw;                         // 0x0048(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector_X;                            // 0x004C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector_Y;                            // 0x0050(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector_Z;                            // 0x0054(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               CallFunc_MakeRotator_ReturnValue;                  // 0x0058(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                         CallFunc_BreakVector_X_1;                          // 0x0064(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector_Y_1;                          // 0x0068(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector_Z_1;                          // 0x006C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_K2_SetActorRotation_ReturnValue;          // 0x0070(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_71[0x3];                                       // 0x0071(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FRotator                               CallFunc_MakeRotator_ReturnValue_1;                // 0x0074(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FHitResult                             CallFunc_K2_SetRelativeRotation_SweepHitResult;    // 0x0080(0x0088)(IsPlainOldData, NoDestructor, ContainsInstancedReference)
	float                                         CallFunc_BreakRotator_Roll_1;                      // 0x0108(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakRotator_Pitch_1;                     // 0x010C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakRotator_Yaw_1;                       // 0x0110(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector_X_2;                          // 0x0114(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector_Y_2;                          // 0x0118(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector_Z_2;                          // 0x011C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Add_FloatFloat_ReturnValue;               // 0x0120(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Add_FloatFloat_ReturnValue_1;             // 0x0124(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector2D                              CallFunc_MakeVector2D_ReturnValue;                 // 0x0128(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_FInterpTo_ReturnValue;                    // 0x0130(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector2D                              CallFunc_ClampPointToLozenge2D_ReturnValue;        // 0x0134(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_ClampAxis_ReturnValue;                    // 0x013C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector2D_X;                          // 0x0140(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector2D_Y;                          // 0x0144(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_ClampAxis_ReturnValue_1;                  // 0x0148(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_ClampAxis_ReturnValue_2;                  // 0x014C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               CallFunc_MakeRotator_ReturnValue_2;                // 0x0150(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FHitResult                             CallFunc_K2_SetRelativeRotation_SweepHitResult_1;  // 0x015C(0x0088)(IsPlainOldData, NoDestructor, ContainsInstancedReference)
	float                                         CallFunc_BreakRotator_Roll_2;                      // 0x01E4(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakRotator_Pitch_2;                     // 0x01E8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakRotator_Yaw_2;                       // 0x01EC(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_NearlyEqual_FloatFloat_ReturnValue;       // 0x01F0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Not_PreBool_ReturnValue;                  // 0x01F1(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_1F2[0x2];                                      // 0x01F2(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_BreakVector_X_3;                          // 0x01F4(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector_Y_3;                          // 0x01F8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector_Z_3;                          // 0x01FC(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               CallFunc_K2_GetActorRotation_ReturnValue;          // 0x0200(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                         CallFunc_BreakRotator_Roll_3;                      // 0x020C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakRotator_Pitch_3;                     // 0x0210(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakRotator_Yaw_3;                       // 0x0214(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Add_FloatFloat_ReturnValue_2;             // 0x0218(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               CallFunc_MakeRotator_ReturnValue_3;                // 0x021C(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_K2_SetActorRotation_ReturnValue_1;        // 0x0228(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_229[0x3];                                      // 0x0229(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_BreakVector_X_4;                          // 0x022C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector_Y_4;                          // 0x0230(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector_Z_4;                          // 0x0234(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               CallFunc_K2_GetActorRotation_ReturnValue_1;        // 0x0238(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                         CallFunc_BreakRotator_Roll_4;                      // 0x0244(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakRotator_Pitch_4;                     // 0x0248(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakRotator_Yaw_4;                       // 0x024C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Add_FloatFloat_ReturnValue_3;             // 0x0250(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakRotator_Roll_5;                      // 0x0254(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakRotator_Pitch_5;                     // 0x0258(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakRotator_Yaw_5;                       // 0x025C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector_X_5;                          // 0x0260(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector_Y_5;                          // 0x0264(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector_Z_5;                          // 0x0268(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Add_FloatFloat_ReturnValue_4;             // 0x026C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               CallFunc_MakeRotator_ReturnValue_4;                // 0x0270(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FHitResult                             CallFunc_K2_SetRelativeRotation_SweepHitResult_2;  // 0x027C(0x0088)(IsPlainOldData, NoDestructor, ContainsInstancedReference)
	float                                         CallFunc_ClampAngle_ReturnValue;                   // 0x0304(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_ClampAxis_ReturnValue_3;                  // 0x0308(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               CallFunc_MakeRotator_ReturnValue_5;                // 0x030C(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                         CallFunc_Add_FloatFloat_ReturnValue_5;             // 0x0318(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FHitResult                             CallFunc_K2_SetRelativeRotation_SweepHitResult_3;  // 0x031C(0x0088)(IsPlainOldData, NoDestructor, ContainsInstancedReference)
	struct FRotator                               CallFunc_MakeRotator_ReturnValue_6;                // 0x03A4(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_K2_SetActorRotation_ReturnValue_2;        // 0x03B0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_3B1[0x3];                                      // 0x03B1(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_BreakRotator_Roll_6;                      // 0x03B4(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakRotator_Pitch_6;                     // 0x03B8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakRotator_Yaw_6;                       // 0x03BC(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Subtract_FloatFloat_ReturnValue;          // 0x03C0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_GetActorRightVector_ReturnValue;          // 0x03C4(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_GetActorForwardVector_ReturnValue;        // 0x03D0(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_SwitchEnum_CmpSuccess_1;                    // 0x03DC(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_3DD[0x3];                                      // 0x03DD(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_BreakVector_X_6;                          // 0x03E0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector_Y_6;                          // 0x03E4(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector_Z_6;                          // 0x03E8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Multiply_VectorFloat_ReturnValue;         // 0x03EC(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FHitResult                             CallFunc_K2_SetActorRelativeLocation_SweepHitResult; // 0x03F8(0x0088)(IsPlainOldData, NoDestructor, ContainsInstancedReference)
	struct FVector                                CallFunc_Multiply_VectorFloat_ReturnValue_1;       // 0x0480(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Add_VectorVector_ReturnValue;             // 0x048C(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Normal_ReturnValue;                       // 0x0498(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_GetCharacterSurfaceMoveScale_Result;      // 0x04A4(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Multiply_FloatFloat_ReturnValue;          // 0x04A8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_GetRealspaceInvertY_Result;               // 0x04AC(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_4AD[0x3];                                      // 0x04AD(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_GetRealspaceLookSensitivity_Result;       // 0x04B0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         K2Node_Select_Default;                             // 0x04B4(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Divide_FloatFloat_ReturnValue;            // 0x04B8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_4BC[0x4];                                      // 0x04BC(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UMOVECONTROL_Base_C*                    CallFunc_GetActiveMoveControl_ActiveMoveControl;   // 0x04C0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_ByteByte_ReturnValue;          // 0x04C8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_4C9[0x3];                                      // 0x04C9(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_GetValue_ReturnValue;                     // 0x04CC(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Multiply_FloatFloat_ReturnValue_1;        // 0x04D0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Multiply_FloatFloat_ReturnValue_2;        // 0x04D4(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector2D                              CallFunc_MakeVector2D_ReturnValue_1;               // 0x04D8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector2D                              CallFunc_Multiply_Vector2DVector2D_ReturnValue;    // 0x04E0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_ByteByte_ReturnValue_1;        // 0x04E8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_4E9[0x3];                                      // 0x04E9(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Array_LastIndex_ReturnValue;              // 0x04EC(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_ByteByte_ReturnValue_2;        // 0x04F0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_NotEqual_BoolBool_ReturnValue;            // 0x04F1(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_UpdateMoveControl_ShouldExpire;           // 0x04F2(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(COMP_MoveControlManager_C_UpdateMoveControls) == 0x000008, "Wrong alignment on COMP_MoveControlManager_C_UpdateMoveControls");
static_assert(sizeof(COMP_MoveControlManager_C_UpdateMoveControls) == 0x0004F8, "Wrong size on COMP_MoveControlManager_C_UpdateMoveControls");
static_assert(offsetof(COMP_MoveControlManager_C_UpdateMoveControls, DeltaTime) == 0x000000, "Member 'COMP_MoveControlManager_C_UpdateMoveControls::DeltaTime' has a wrong offset!");
static_assert(offsetof(COMP_MoveControlManager_C_UpdateMoveControls, MoveInputAxes) == 0x000004, "Member 'COMP_MoveControlManager_C_UpdateMoveControls::MoveInputAxes' has a wrong offset!");
static_assert(offsetof(COMP_MoveControlManager_C_UpdateMoveControls, LookInputAxes) == 0x00000C, "Member 'COMP_MoveControlManager_C_UpdateMoveControls::LookInputAxes' has a wrong offset!");
static_assert(offsetof(COMP_MoveControlManager_C_UpdateMoveControls, DeltaCameraYaw) == 0x000014, "Member 'COMP_MoveControlManager_C_UpdateMoveControls::DeltaCameraYaw' has a wrong offset!");
static_assert(offsetof(COMP_MoveControlManager_C_UpdateMoveControls, DesiredCameraYaw) == 0x000018, "Member 'COMP_MoveControlManager_C_UpdateMoveControls::DesiredCameraYaw' has a wrong offset!");
static_assert(offsetof(COMP_MoveControlManager_C_UpdateMoveControls, DesiredCameraPitch) == 0x00001C, "Member 'COMP_MoveControlManager_C_UpdateMoveControls::DesiredCameraPitch' has a wrong offset!");
static_assert(offsetof(COMP_MoveControlManager_C_UpdateMoveControls, AdjustedLookSensitivity) == 0x000020, "Member 'COMP_MoveControlManager_C_UpdateMoveControls::AdjustedLookSensitivity' has a wrong offset!");
static_assert(offsetof(COMP_MoveControlManager_C_UpdateMoveControls, ActiveMoveControl) == 0x000028, "Member 'COMP_MoveControlManager_C_UpdateMoveControls::ActiveMoveControl' has a wrong offset!");
static_assert(offsetof(COMP_MoveControlManager_C_UpdateMoveControls, Temp_bool_Variable) == 0x000030, "Member 'COMP_MoveControlManager_C_UpdateMoveControls::Temp_bool_Variable' has a wrong offset!");
static_assert(offsetof(COMP_MoveControlManager_C_UpdateMoveControls, Temp_float_Variable) == 0x000034, "Member 'COMP_MoveControlManager_C_UpdateMoveControls::Temp_float_Variable' has a wrong offset!");
static_assert(offsetof(COMP_MoveControlManager_C_UpdateMoveControls, Temp_float_Variable_1) == 0x000038, "Member 'COMP_MoveControlManager_C_UpdateMoveControls::Temp_float_Variable_1' has a wrong offset!");
static_assert(offsetof(COMP_MoveControlManager_C_UpdateMoveControls, K2Node_SwitchEnum_CmpSuccess) == 0x00003C, "Member 'COMP_MoveControlManager_C_UpdateMoveControls::K2Node_SwitchEnum_CmpSuccess' has a wrong offset!");
static_assert(offsetof(COMP_MoveControlManager_C_UpdateMoveControls, CallFunc_BreakRotator_Roll) == 0x000040, "Member 'COMP_MoveControlManager_C_UpdateMoveControls::CallFunc_BreakRotator_Roll' has a wrong offset!");
static_assert(offsetof(COMP_MoveControlManager_C_UpdateMoveControls, CallFunc_BreakRotator_Pitch) == 0x000044, "Member 'COMP_MoveControlManager_C_UpdateMoveControls::CallFunc_BreakRotator_Pitch' has a wrong offset!");
static_assert(offsetof(COMP_MoveControlManager_C_UpdateMoveControls, CallFunc_BreakRotator_Yaw) == 0x000048, "Member 'COMP_MoveControlManager_C_UpdateMoveControls::CallFunc_BreakRotator_Yaw' has a wrong offset!");
static_assert(offsetof(COMP_MoveControlManager_C_UpdateMoveControls, CallFunc_BreakVector_X) == 0x00004C, "Member 'COMP_MoveControlManager_C_UpdateMoveControls::CallFunc_BreakVector_X' has a wrong offset!");
static_assert(offsetof(COMP_MoveControlManager_C_UpdateMoveControls, CallFunc_BreakVector_Y) == 0x000050, "Member 'COMP_MoveControlManager_C_UpdateMoveControls::CallFunc_BreakVector_Y' has a wrong offset!");
static_assert(offsetof(COMP_MoveControlManager_C_UpdateMoveControls, CallFunc_BreakVector_Z) == 0x000054, "Member 'COMP_MoveControlManager_C_UpdateMoveControls::CallFunc_BreakVector_Z' has a wrong offset!");
static_assert(offsetof(COMP_MoveControlManager_C_UpdateMoveControls, CallFunc_MakeRotator_ReturnValue) == 0x000058, "Member 'COMP_MoveControlManager_C_UpdateMoveControls::CallFunc_MakeRotator_ReturnValue' has a wrong offset!");
static_assert(offsetof(COMP_MoveControlManager_C_UpdateMoveControls, CallFunc_BreakVector_X_1) == 0x000064, "Member 'COMP_MoveControlManager_C_UpdateMoveControls::CallFunc_BreakVector_X_1' has a wrong offset!");
static_assert(offsetof(COMP_MoveControlManager_C_UpdateMoveControls, CallFunc_BreakVector_Y_1) == 0x000068, "Member 'COMP_MoveControlManager_C_UpdateMoveControls::CallFunc_BreakVector_Y_1' has a wrong offset!");
static_assert(offsetof(COMP_MoveControlManager_C_UpdateMoveControls, CallFunc_BreakVector_Z_1) == 0x00006C, "Member 'COMP_MoveControlManager_C_UpdateMoveControls::CallFunc_BreakVector_Z_1' has a wrong offset!");
static_assert(offsetof(COMP_MoveControlManager_C_UpdateMoveControls, CallFunc_K2_SetActorRotation_ReturnValue) == 0x000070, "Member 'COMP_MoveControlManager_C_UpdateMoveControls::CallFunc_K2_SetActorRotation_ReturnValue' has a wrong offset!");
static_assert(offsetof(COMP_MoveControlManager_C_UpdateMoveControls, CallFunc_MakeRotator_ReturnValue_1) == 0x000074, "Member 'COMP_MoveControlManager_C_UpdateMoveControls::CallFunc_MakeRotator_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(COMP_MoveControlManager_C_UpdateMoveControls, CallFunc_K2_SetRelativeRotation_SweepHitResult) == 0x000080, "Member 'COMP_MoveControlManager_C_UpdateMoveControls::CallFunc_K2_SetRelativeRotation_SweepHitResult' has a wrong offset!");
static_assert(offsetof(COMP_MoveControlManager_C_UpdateMoveControls, CallFunc_BreakRotator_Roll_1) == 0x000108, "Member 'COMP_MoveControlManager_C_UpdateMoveControls::CallFunc_BreakRotator_Roll_1' has a wrong offset!");
static_assert(offsetof(COMP_MoveControlManager_C_UpdateMoveControls, CallFunc_BreakRotator_Pitch_1) == 0x00010C, "Member 'COMP_MoveControlManager_C_UpdateMoveControls::CallFunc_BreakRotator_Pitch_1' has a wrong offset!");
static_assert(offsetof(COMP_MoveControlManager_C_UpdateMoveControls, CallFunc_BreakRotator_Yaw_1) == 0x000110, "Member 'COMP_MoveControlManager_C_UpdateMoveControls::CallFunc_BreakRotator_Yaw_1' has a wrong offset!");
static_assert(offsetof(COMP_MoveControlManager_C_UpdateMoveControls, CallFunc_BreakVector_X_2) == 0x000114, "Member 'COMP_MoveControlManager_C_UpdateMoveControls::CallFunc_BreakVector_X_2' has a wrong offset!");
static_assert(offsetof(COMP_MoveControlManager_C_UpdateMoveControls, CallFunc_BreakVector_Y_2) == 0x000118, "Member 'COMP_MoveControlManager_C_UpdateMoveControls::CallFunc_BreakVector_Y_2' has a wrong offset!");
static_assert(offsetof(COMP_MoveControlManager_C_UpdateMoveControls, CallFunc_BreakVector_Z_2) == 0x00011C, "Member 'COMP_MoveControlManager_C_UpdateMoveControls::CallFunc_BreakVector_Z_2' has a wrong offset!");
static_assert(offsetof(COMP_MoveControlManager_C_UpdateMoveControls, CallFunc_Add_FloatFloat_ReturnValue) == 0x000120, "Member 'COMP_MoveControlManager_C_UpdateMoveControls::CallFunc_Add_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(COMP_MoveControlManager_C_UpdateMoveControls, CallFunc_Add_FloatFloat_ReturnValue_1) == 0x000124, "Member 'COMP_MoveControlManager_C_UpdateMoveControls::CallFunc_Add_FloatFloat_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(COMP_MoveControlManager_C_UpdateMoveControls, CallFunc_MakeVector2D_ReturnValue) == 0x000128, "Member 'COMP_MoveControlManager_C_UpdateMoveControls::CallFunc_MakeVector2D_ReturnValue' has a wrong offset!");
static_assert(offsetof(COMP_MoveControlManager_C_UpdateMoveControls, CallFunc_FInterpTo_ReturnValue) == 0x000130, "Member 'COMP_MoveControlManager_C_UpdateMoveControls::CallFunc_FInterpTo_ReturnValue' has a wrong offset!");
static_assert(offsetof(COMP_MoveControlManager_C_UpdateMoveControls, CallFunc_ClampPointToLozenge2D_ReturnValue) == 0x000134, "Member 'COMP_MoveControlManager_C_UpdateMoveControls::CallFunc_ClampPointToLozenge2D_ReturnValue' has a wrong offset!");
static_assert(offsetof(COMP_MoveControlManager_C_UpdateMoveControls, CallFunc_ClampAxis_ReturnValue) == 0x00013C, "Member 'COMP_MoveControlManager_C_UpdateMoveControls::CallFunc_ClampAxis_ReturnValue' has a wrong offset!");
static_assert(offsetof(COMP_MoveControlManager_C_UpdateMoveControls, CallFunc_BreakVector2D_X) == 0x000140, "Member 'COMP_MoveControlManager_C_UpdateMoveControls::CallFunc_BreakVector2D_X' has a wrong offset!");
static_assert(offsetof(COMP_MoveControlManager_C_UpdateMoveControls, CallFunc_BreakVector2D_Y) == 0x000144, "Member 'COMP_MoveControlManager_C_UpdateMoveControls::CallFunc_BreakVector2D_Y' has a wrong offset!");
static_assert(offsetof(COMP_MoveControlManager_C_UpdateMoveControls, CallFunc_ClampAxis_ReturnValue_1) == 0x000148, "Member 'COMP_MoveControlManager_C_UpdateMoveControls::CallFunc_ClampAxis_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(COMP_MoveControlManager_C_UpdateMoveControls, CallFunc_ClampAxis_ReturnValue_2) == 0x00014C, "Member 'COMP_MoveControlManager_C_UpdateMoveControls::CallFunc_ClampAxis_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(COMP_MoveControlManager_C_UpdateMoveControls, CallFunc_MakeRotator_ReturnValue_2) == 0x000150, "Member 'COMP_MoveControlManager_C_UpdateMoveControls::CallFunc_MakeRotator_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(COMP_MoveControlManager_C_UpdateMoveControls, CallFunc_K2_SetRelativeRotation_SweepHitResult_1) == 0x00015C, "Member 'COMP_MoveControlManager_C_UpdateMoveControls::CallFunc_K2_SetRelativeRotation_SweepHitResult_1' has a wrong offset!");
static_assert(offsetof(COMP_MoveControlManager_C_UpdateMoveControls, CallFunc_BreakRotator_Roll_2) == 0x0001E4, "Member 'COMP_MoveControlManager_C_UpdateMoveControls::CallFunc_BreakRotator_Roll_2' has a wrong offset!");
static_assert(offsetof(COMP_MoveControlManager_C_UpdateMoveControls, CallFunc_BreakRotator_Pitch_2) == 0x0001E8, "Member 'COMP_MoveControlManager_C_UpdateMoveControls::CallFunc_BreakRotator_Pitch_2' has a wrong offset!");
static_assert(offsetof(COMP_MoveControlManager_C_UpdateMoveControls, CallFunc_BreakRotator_Yaw_2) == 0x0001EC, "Member 'COMP_MoveControlManager_C_UpdateMoveControls::CallFunc_BreakRotator_Yaw_2' has a wrong offset!");
static_assert(offsetof(COMP_MoveControlManager_C_UpdateMoveControls, CallFunc_NearlyEqual_FloatFloat_ReturnValue) == 0x0001F0, "Member 'COMP_MoveControlManager_C_UpdateMoveControls::CallFunc_NearlyEqual_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(COMP_MoveControlManager_C_UpdateMoveControls, CallFunc_Not_PreBool_ReturnValue) == 0x0001F1, "Member 'COMP_MoveControlManager_C_UpdateMoveControls::CallFunc_Not_PreBool_ReturnValue' has a wrong offset!");
static_assert(offsetof(COMP_MoveControlManager_C_UpdateMoveControls, CallFunc_BreakVector_X_3) == 0x0001F4, "Member 'COMP_MoveControlManager_C_UpdateMoveControls::CallFunc_BreakVector_X_3' has a wrong offset!");
static_assert(offsetof(COMP_MoveControlManager_C_UpdateMoveControls, CallFunc_BreakVector_Y_3) == 0x0001F8, "Member 'COMP_MoveControlManager_C_UpdateMoveControls::CallFunc_BreakVector_Y_3' has a wrong offset!");
static_assert(offsetof(COMP_MoveControlManager_C_UpdateMoveControls, CallFunc_BreakVector_Z_3) == 0x0001FC, "Member 'COMP_MoveControlManager_C_UpdateMoveControls::CallFunc_BreakVector_Z_3' has a wrong offset!");
static_assert(offsetof(COMP_MoveControlManager_C_UpdateMoveControls, CallFunc_K2_GetActorRotation_ReturnValue) == 0x000200, "Member 'COMP_MoveControlManager_C_UpdateMoveControls::CallFunc_K2_GetActorRotation_ReturnValue' has a wrong offset!");
static_assert(offsetof(COMP_MoveControlManager_C_UpdateMoveControls, CallFunc_BreakRotator_Roll_3) == 0x00020C, "Member 'COMP_MoveControlManager_C_UpdateMoveControls::CallFunc_BreakRotator_Roll_3' has a wrong offset!");
static_assert(offsetof(COMP_MoveControlManager_C_UpdateMoveControls, CallFunc_BreakRotator_Pitch_3) == 0x000210, "Member 'COMP_MoveControlManager_C_UpdateMoveControls::CallFunc_BreakRotator_Pitch_3' has a wrong offset!");
static_assert(offsetof(COMP_MoveControlManager_C_UpdateMoveControls, CallFunc_BreakRotator_Yaw_3) == 0x000214, "Member 'COMP_MoveControlManager_C_UpdateMoveControls::CallFunc_BreakRotator_Yaw_3' has a wrong offset!");
static_assert(offsetof(COMP_MoveControlManager_C_UpdateMoveControls, CallFunc_Add_FloatFloat_ReturnValue_2) == 0x000218, "Member 'COMP_MoveControlManager_C_UpdateMoveControls::CallFunc_Add_FloatFloat_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(COMP_MoveControlManager_C_UpdateMoveControls, CallFunc_MakeRotator_ReturnValue_3) == 0x00021C, "Member 'COMP_MoveControlManager_C_UpdateMoveControls::CallFunc_MakeRotator_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(COMP_MoveControlManager_C_UpdateMoveControls, CallFunc_K2_SetActorRotation_ReturnValue_1) == 0x000228, "Member 'COMP_MoveControlManager_C_UpdateMoveControls::CallFunc_K2_SetActorRotation_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(COMP_MoveControlManager_C_UpdateMoveControls, CallFunc_BreakVector_X_4) == 0x00022C, "Member 'COMP_MoveControlManager_C_UpdateMoveControls::CallFunc_BreakVector_X_4' has a wrong offset!");
static_assert(offsetof(COMP_MoveControlManager_C_UpdateMoveControls, CallFunc_BreakVector_Y_4) == 0x000230, "Member 'COMP_MoveControlManager_C_UpdateMoveControls::CallFunc_BreakVector_Y_4' has a wrong offset!");
static_assert(offsetof(COMP_MoveControlManager_C_UpdateMoveControls, CallFunc_BreakVector_Z_4) == 0x000234, "Member 'COMP_MoveControlManager_C_UpdateMoveControls::CallFunc_BreakVector_Z_4' has a wrong offset!");
static_assert(offsetof(COMP_MoveControlManager_C_UpdateMoveControls, CallFunc_K2_GetActorRotation_ReturnValue_1) == 0x000238, "Member 'COMP_MoveControlManager_C_UpdateMoveControls::CallFunc_K2_GetActorRotation_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(COMP_MoveControlManager_C_UpdateMoveControls, CallFunc_BreakRotator_Roll_4) == 0x000244, "Member 'COMP_MoveControlManager_C_UpdateMoveControls::CallFunc_BreakRotator_Roll_4' has a wrong offset!");
static_assert(offsetof(COMP_MoveControlManager_C_UpdateMoveControls, CallFunc_BreakRotator_Pitch_4) == 0x000248, "Member 'COMP_MoveControlManager_C_UpdateMoveControls::CallFunc_BreakRotator_Pitch_4' has a wrong offset!");
static_assert(offsetof(COMP_MoveControlManager_C_UpdateMoveControls, CallFunc_BreakRotator_Yaw_4) == 0x00024C, "Member 'COMP_MoveControlManager_C_UpdateMoveControls::CallFunc_BreakRotator_Yaw_4' has a wrong offset!");
static_assert(offsetof(COMP_MoveControlManager_C_UpdateMoveControls, CallFunc_Add_FloatFloat_ReturnValue_3) == 0x000250, "Member 'COMP_MoveControlManager_C_UpdateMoveControls::CallFunc_Add_FloatFloat_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(COMP_MoveControlManager_C_UpdateMoveControls, CallFunc_BreakRotator_Roll_5) == 0x000254, "Member 'COMP_MoveControlManager_C_UpdateMoveControls::CallFunc_BreakRotator_Roll_5' has a wrong offset!");
static_assert(offsetof(COMP_MoveControlManager_C_UpdateMoveControls, CallFunc_BreakRotator_Pitch_5) == 0x000258, "Member 'COMP_MoveControlManager_C_UpdateMoveControls::CallFunc_BreakRotator_Pitch_5' has a wrong offset!");
static_assert(offsetof(COMP_MoveControlManager_C_UpdateMoveControls, CallFunc_BreakRotator_Yaw_5) == 0x00025C, "Member 'COMP_MoveControlManager_C_UpdateMoveControls::CallFunc_BreakRotator_Yaw_5' has a wrong offset!");
static_assert(offsetof(COMP_MoveControlManager_C_UpdateMoveControls, CallFunc_BreakVector_X_5) == 0x000260, "Member 'COMP_MoveControlManager_C_UpdateMoveControls::CallFunc_BreakVector_X_5' has a wrong offset!");
static_assert(offsetof(COMP_MoveControlManager_C_UpdateMoveControls, CallFunc_BreakVector_Y_5) == 0x000264, "Member 'COMP_MoveControlManager_C_UpdateMoveControls::CallFunc_BreakVector_Y_5' has a wrong offset!");
static_assert(offsetof(COMP_MoveControlManager_C_UpdateMoveControls, CallFunc_BreakVector_Z_5) == 0x000268, "Member 'COMP_MoveControlManager_C_UpdateMoveControls::CallFunc_BreakVector_Z_5' has a wrong offset!");
static_assert(offsetof(COMP_MoveControlManager_C_UpdateMoveControls, CallFunc_Add_FloatFloat_ReturnValue_4) == 0x00026C, "Member 'COMP_MoveControlManager_C_UpdateMoveControls::CallFunc_Add_FloatFloat_ReturnValue_4' has a wrong offset!");
static_assert(offsetof(COMP_MoveControlManager_C_UpdateMoveControls, CallFunc_MakeRotator_ReturnValue_4) == 0x000270, "Member 'COMP_MoveControlManager_C_UpdateMoveControls::CallFunc_MakeRotator_ReturnValue_4' has a wrong offset!");
static_assert(offsetof(COMP_MoveControlManager_C_UpdateMoveControls, CallFunc_K2_SetRelativeRotation_SweepHitResult_2) == 0x00027C, "Member 'COMP_MoveControlManager_C_UpdateMoveControls::CallFunc_K2_SetRelativeRotation_SweepHitResult_2' has a wrong offset!");
static_assert(offsetof(COMP_MoveControlManager_C_UpdateMoveControls, CallFunc_ClampAngle_ReturnValue) == 0x000304, "Member 'COMP_MoveControlManager_C_UpdateMoveControls::CallFunc_ClampAngle_ReturnValue' has a wrong offset!");
static_assert(offsetof(COMP_MoveControlManager_C_UpdateMoveControls, CallFunc_ClampAxis_ReturnValue_3) == 0x000308, "Member 'COMP_MoveControlManager_C_UpdateMoveControls::CallFunc_ClampAxis_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(COMP_MoveControlManager_C_UpdateMoveControls, CallFunc_MakeRotator_ReturnValue_5) == 0x00030C, "Member 'COMP_MoveControlManager_C_UpdateMoveControls::CallFunc_MakeRotator_ReturnValue_5' has a wrong offset!");
static_assert(offsetof(COMP_MoveControlManager_C_UpdateMoveControls, CallFunc_Add_FloatFloat_ReturnValue_5) == 0x000318, "Member 'COMP_MoveControlManager_C_UpdateMoveControls::CallFunc_Add_FloatFloat_ReturnValue_5' has a wrong offset!");
static_assert(offsetof(COMP_MoveControlManager_C_UpdateMoveControls, CallFunc_K2_SetRelativeRotation_SweepHitResult_3) == 0x00031C, "Member 'COMP_MoveControlManager_C_UpdateMoveControls::CallFunc_K2_SetRelativeRotation_SweepHitResult_3' has a wrong offset!");
static_assert(offsetof(COMP_MoveControlManager_C_UpdateMoveControls, CallFunc_MakeRotator_ReturnValue_6) == 0x0003A4, "Member 'COMP_MoveControlManager_C_UpdateMoveControls::CallFunc_MakeRotator_ReturnValue_6' has a wrong offset!");
static_assert(offsetof(COMP_MoveControlManager_C_UpdateMoveControls, CallFunc_K2_SetActorRotation_ReturnValue_2) == 0x0003B0, "Member 'COMP_MoveControlManager_C_UpdateMoveControls::CallFunc_K2_SetActorRotation_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(COMP_MoveControlManager_C_UpdateMoveControls, CallFunc_BreakRotator_Roll_6) == 0x0003B4, "Member 'COMP_MoveControlManager_C_UpdateMoveControls::CallFunc_BreakRotator_Roll_6' has a wrong offset!");
static_assert(offsetof(COMP_MoveControlManager_C_UpdateMoveControls, CallFunc_BreakRotator_Pitch_6) == 0x0003B8, "Member 'COMP_MoveControlManager_C_UpdateMoveControls::CallFunc_BreakRotator_Pitch_6' has a wrong offset!");
static_assert(offsetof(COMP_MoveControlManager_C_UpdateMoveControls, CallFunc_BreakRotator_Yaw_6) == 0x0003BC, "Member 'COMP_MoveControlManager_C_UpdateMoveControls::CallFunc_BreakRotator_Yaw_6' has a wrong offset!");
static_assert(offsetof(COMP_MoveControlManager_C_UpdateMoveControls, CallFunc_Subtract_FloatFloat_ReturnValue) == 0x0003C0, "Member 'COMP_MoveControlManager_C_UpdateMoveControls::CallFunc_Subtract_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(COMP_MoveControlManager_C_UpdateMoveControls, CallFunc_GetActorRightVector_ReturnValue) == 0x0003C4, "Member 'COMP_MoveControlManager_C_UpdateMoveControls::CallFunc_GetActorRightVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(COMP_MoveControlManager_C_UpdateMoveControls, CallFunc_GetActorForwardVector_ReturnValue) == 0x0003D0, "Member 'COMP_MoveControlManager_C_UpdateMoveControls::CallFunc_GetActorForwardVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(COMP_MoveControlManager_C_UpdateMoveControls, K2Node_SwitchEnum_CmpSuccess_1) == 0x0003DC, "Member 'COMP_MoveControlManager_C_UpdateMoveControls::K2Node_SwitchEnum_CmpSuccess_1' has a wrong offset!");
static_assert(offsetof(COMP_MoveControlManager_C_UpdateMoveControls, CallFunc_BreakVector_X_6) == 0x0003E0, "Member 'COMP_MoveControlManager_C_UpdateMoveControls::CallFunc_BreakVector_X_6' has a wrong offset!");
static_assert(offsetof(COMP_MoveControlManager_C_UpdateMoveControls, CallFunc_BreakVector_Y_6) == 0x0003E4, "Member 'COMP_MoveControlManager_C_UpdateMoveControls::CallFunc_BreakVector_Y_6' has a wrong offset!");
static_assert(offsetof(COMP_MoveControlManager_C_UpdateMoveControls, CallFunc_BreakVector_Z_6) == 0x0003E8, "Member 'COMP_MoveControlManager_C_UpdateMoveControls::CallFunc_BreakVector_Z_6' has a wrong offset!");
static_assert(offsetof(COMP_MoveControlManager_C_UpdateMoveControls, CallFunc_Multiply_VectorFloat_ReturnValue) == 0x0003EC, "Member 'COMP_MoveControlManager_C_UpdateMoveControls::CallFunc_Multiply_VectorFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(COMP_MoveControlManager_C_UpdateMoveControls, CallFunc_K2_SetActorRelativeLocation_SweepHitResult) == 0x0003F8, "Member 'COMP_MoveControlManager_C_UpdateMoveControls::CallFunc_K2_SetActorRelativeLocation_SweepHitResult' has a wrong offset!");
static_assert(offsetof(COMP_MoveControlManager_C_UpdateMoveControls, CallFunc_Multiply_VectorFloat_ReturnValue_1) == 0x000480, "Member 'COMP_MoveControlManager_C_UpdateMoveControls::CallFunc_Multiply_VectorFloat_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(COMP_MoveControlManager_C_UpdateMoveControls, CallFunc_Add_VectorVector_ReturnValue) == 0x00048C, "Member 'COMP_MoveControlManager_C_UpdateMoveControls::CallFunc_Add_VectorVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(COMP_MoveControlManager_C_UpdateMoveControls, CallFunc_Normal_ReturnValue) == 0x000498, "Member 'COMP_MoveControlManager_C_UpdateMoveControls::CallFunc_Normal_ReturnValue' has a wrong offset!");
static_assert(offsetof(COMP_MoveControlManager_C_UpdateMoveControls, CallFunc_GetCharacterSurfaceMoveScale_Result) == 0x0004A4, "Member 'COMP_MoveControlManager_C_UpdateMoveControls::CallFunc_GetCharacterSurfaceMoveScale_Result' has a wrong offset!");
static_assert(offsetof(COMP_MoveControlManager_C_UpdateMoveControls, CallFunc_Multiply_FloatFloat_ReturnValue) == 0x0004A8, "Member 'COMP_MoveControlManager_C_UpdateMoveControls::CallFunc_Multiply_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(COMP_MoveControlManager_C_UpdateMoveControls, CallFunc_GetRealspaceInvertY_Result) == 0x0004AC, "Member 'COMP_MoveControlManager_C_UpdateMoveControls::CallFunc_GetRealspaceInvertY_Result' has a wrong offset!");
static_assert(offsetof(COMP_MoveControlManager_C_UpdateMoveControls, CallFunc_GetRealspaceLookSensitivity_Result) == 0x0004B0, "Member 'COMP_MoveControlManager_C_UpdateMoveControls::CallFunc_GetRealspaceLookSensitivity_Result' has a wrong offset!");
static_assert(offsetof(COMP_MoveControlManager_C_UpdateMoveControls, K2Node_Select_Default) == 0x0004B4, "Member 'COMP_MoveControlManager_C_UpdateMoveControls::K2Node_Select_Default' has a wrong offset!");
static_assert(offsetof(COMP_MoveControlManager_C_UpdateMoveControls, CallFunc_Divide_FloatFloat_ReturnValue) == 0x0004B8, "Member 'COMP_MoveControlManager_C_UpdateMoveControls::CallFunc_Divide_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(COMP_MoveControlManager_C_UpdateMoveControls, CallFunc_GetActiveMoveControl_ActiveMoveControl) == 0x0004C0, "Member 'COMP_MoveControlManager_C_UpdateMoveControls::CallFunc_GetActiveMoveControl_ActiveMoveControl' has a wrong offset!");
static_assert(offsetof(COMP_MoveControlManager_C_UpdateMoveControls, CallFunc_EqualEqual_ByteByte_ReturnValue) == 0x0004C8, "Member 'COMP_MoveControlManager_C_UpdateMoveControls::CallFunc_EqualEqual_ByteByte_ReturnValue' has a wrong offset!");
static_assert(offsetof(COMP_MoveControlManager_C_UpdateMoveControls, CallFunc_GetValue_ReturnValue) == 0x0004CC, "Member 'COMP_MoveControlManager_C_UpdateMoveControls::CallFunc_GetValue_ReturnValue' has a wrong offset!");
static_assert(offsetof(COMP_MoveControlManager_C_UpdateMoveControls, CallFunc_Multiply_FloatFloat_ReturnValue_1) == 0x0004D0, "Member 'COMP_MoveControlManager_C_UpdateMoveControls::CallFunc_Multiply_FloatFloat_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(COMP_MoveControlManager_C_UpdateMoveControls, CallFunc_Multiply_FloatFloat_ReturnValue_2) == 0x0004D4, "Member 'COMP_MoveControlManager_C_UpdateMoveControls::CallFunc_Multiply_FloatFloat_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(COMP_MoveControlManager_C_UpdateMoveControls, CallFunc_MakeVector2D_ReturnValue_1) == 0x0004D8, "Member 'COMP_MoveControlManager_C_UpdateMoveControls::CallFunc_MakeVector2D_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(COMP_MoveControlManager_C_UpdateMoveControls, CallFunc_Multiply_Vector2DVector2D_ReturnValue) == 0x0004E0, "Member 'COMP_MoveControlManager_C_UpdateMoveControls::CallFunc_Multiply_Vector2DVector2D_ReturnValue' has a wrong offset!");
static_assert(offsetof(COMP_MoveControlManager_C_UpdateMoveControls, CallFunc_EqualEqual_ByteByte_ReturnValue_1) == 0x0004E8, "Member 'COMP_MoveControlManager_C_UpdateMoveControls::CallFunc_EqualEqual_ByteByte_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(COMP_MoveControlManager_C_UpdateMoveControls, CallFunc_Array_LastIndex_ReturnValue) == 0x0004EC, "Member 'COMP_MoveControlManager_C_UpdateMoveControls::CallFunc_Array_LastIndex_ReturnValue' has a wrong offset!");
static_assert(offsetof(COMP_MoveControlManager_C_UpdateMoveControls, CallFunc_EqualEqual_ByteByte_ReturnValue_2) == 0x0004F0, "Member 'COMP_MoveControlManager_C_UpdateMoveControls::CallFunc_EqualEqual_ByteByte_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(COMP_MoveControlManager_C_UpdateMoveControls, CallFunc_NotEqual_BoolBool_ReturnValue) == 0x0004F1, "Member 'COMP_MoveControlManager_C_UpdateMoveControls::CallFunc_NotEqual_BoolBool_ReturnValue' has a wrong offset!");
static_assert(offsetof(COMP_MoveControlManager_C_UpdateMoveControls, CallFunc_UpdateMoveControl_ShouldExpire) == 0x0004F2, "Member 'COMP_MoveControlManager_C_UpdateMoveControls::CallFunc_UpdateMoveControl_ShouldExpire' has a wrong offset!");

// Function COMP_MoveControlManager.COMP_MoveControlManager_C.RegisterMoveControl
// 0x0028 (0x0028 - 0x0000)
struct COMP_MoveControlManager_C_RegisterMoveControl final
{
public:
	class UMOVECONTROL_Base_C*                    MoveControl;                                       // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          LowPriority;                                       // 0x0008(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Result;                                            // 0x0009(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x000A(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_NotEqual_ByteByte_ReturnValue;            // 0x000B(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	int32                                         CallFunc_Array_LastIndex_ReturnValue;              // 0x000C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Subtract_IntInt_ReturnValue;              // 0x0010(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Max_ReturnValue;                          // 0x0014(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Add_ReturnValue;                    // 0x0018(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_GetPlayTimeInSeconds_ReturnValue;         // 0x001C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_InitializeMoveControl_Result;             // 0x0020(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(COMP_MoveControlManager_C_RegisterMoveControl) == 0x000008, "Wrong alignment on COMP_MoveControlManager_C_RegisterMoveControl");
static_assert(sizeof(COMP_MoveControlManager_C_RegisterMoveControl) == 0x000028, "Wrong size on COMP_MoveControlManager_C_RegisterMoveControl");
static_assert(offsetof(COMP_MoveControlManager_C_RegisterMoveControl, MoveControl) == 0x000000, "Member 'COMP_MoveControlManager_C_RegisterMoveControl::MoveControl' has a wrong offset!");
static_assert(offsetof(COMP_MoveControlManager_C_RegisterMoveControl, LowPriority) == 0x000008, "Member 'COMP_MoveControlManager_C_RegisterMoveControl::LowPriority' has a wrong offset!");
static_assert(offsetof(COMP_MoveControlManager_C_RegisterMoveControl, Result) == 0x000009, "Member 'COMP_MoveControlManager_C_RegisterMoveControl::Result' has a wrong offset!");
static_assert(offsetof(COMP_MoveControlManager_C_RegisterMoveControl, CallFunc_IsValid_ReturnValue) == 0x00000A, "Member 'COMP_MoveControlManager_C_RegisterMoveControl::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(COMP_MoveControlManager_C_RegisterMoveControl, CallFunc_NotEqual_ByteByte_ReturnValue) == 0x00000B, "Member 'COMP_MoveControlManager_C_RegisterMoveControl::CallFunc_NotEqual_ByteByte_ReturnValue' has a wrong offset!");
static_assert(offsetof(COMP_MoveControlManager_C_RegisterMoveControl, CallFunc_Array_LastIndex_ReturnValue) == 0x00000C, "Member 'COMP_MoveControlManager_C_RegisterMoveControl::CallFunc_Array_LastIndex_ReturnValue' has a wrong offset!");
static_assert(offsetof(COMP_MoveControlManager_C_RegisterMoveControl, CallFunc_Subtract_IntInt_ReturnValue) == 0x000010, "Member 'COMP_MoveControlManager_C_RegisterMoveControl::CallFunc_Subtract_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(COMP_MoveControlManager_C_RegisterMoveControl, CallFunc_Max_ReturnValue) == 0x000014, "Member 'COMP_MoveControlManager_C_RegisterMoveControl::CallFunc_Max_ReturnValue' has a wrong offset!");
static_assert(offsetof(COMP_MoveControlManager_C_RegisterMoveControl, CallFunc_Array_Add_ReturnValue) == 0x000018, "Member 'COMP_MoveControlManager_C_RegisterMoveControl::CallFunc_Array_Add_ReturnValue' has a wrong offset!");
static_assert(offsetof(COMP_MoveControlManager_C_RegisterMoveControl, CallFunc_GetPlayTimeInSeconds_ReturnValue) == 0x00001C, "Member 'COMP_MoveControlManager_C_RegisterMoveControl::CallFunc_GetPlayTimeInSeconds_ReturnValue' has a wrong offset!");
static_assert(offsetof(COMP_MoveControlManager_C_RegisterMoveControl, CallFunc_InitializeMoveControl_Result) == 0x000020, "Member 'COMP_MoveControlManager_C_RegisterMoveControl::CallFunc_InitializeMoveControl_Result' has a wrong offset!");

// Function COMP_MoveControlManager.COMP_MoveControlManager_C.GetActiveMoveControl
// 0x0018 (0x0018 - 0x0000)
struct COMP_MoveControlManager_C_GetActiveMoveControl final
{
public:
	class UMOVECONTROL_Base_C*                    ActiveMoveControl;                                 // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_LastIndex_ReturnValue;              // 0x0008(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UMOVECONTROL_Base_C*                    CallFunc_Array_Get_Item;                           // 0x0010(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(COMP_MoveControlManager_C_GetActiveMoveControl) == 0x000008, "Wrong alignment on COMP_MoveControlManager_C_GetActiveMoveControl");
static_assert(sizeof(COMP_MoveControlManager_C_GetActiveMoveControl) == 0x000018, "Wrong size on COMP_MoveControlManager_C_GetActiveMoveControl");
static_assert(offsetof(COMP_MoveControlManager_C_GetActiveMoveControl, ActiveMoveControl) == 0x000000, "Member 'COMP_MoveControlManager_C_GetActiveMoveControl::ActiveMoveControl' has a wrong offset!");
static_assert(offsetof(COMP_MoveControlManager_C_GetActiveMoveControl, CallFunc_Array_LastIndex_ReturnValue) == 0x000008, "Member 'COMP_MoveControlManager_C_GetActiveMoveControl::CallFunc_Array_LastIndex_ReturnValue' has a wrong offset!");
static_assert(offsetof(COMP_MoveControlManager_C_GetActiveMoveControl, CallFunc_Array_Get_Item) == 0x000010, "Member 'COMP_MoveControlManager_C_GetActiveMoveControl::CallFunc_Array_Get_Item' has a wrong offset!");

// Function COMP_MoveControlManager.COMP_MoveControlManager_C.MoveActionChanged
// 0x0024 (0x0024 - 0x0000)
struct COMP_MoveControlManager_C_MoveActionChanged final
{
public:
	struct FSTRUCT_MoveInputAction                Action;                                            // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Relative;                                          // 0x0008(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Result;                                            // 0x0009(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_A[0x2];                                        // 0x000A(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         NewInputValue;                                     // 0x000C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Not_PreBool_ReturnValue;                  // 0x0010(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_11[0x3];                                       // 0x0011(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Conv_ByteToInt_ReturnValue;               // 0x0014(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Conv_ByteToInt_ReturnValue_1;             // 0x0018(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Array_Get_Item;                           // 0x001C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Add_FloatFloat_ReturnValue;               // 0x0020(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(COMP_MoveControlManager_C_MoveActionChanged) == 0x000004, "Wrong alignment on COMP_MoveControlManager_C_MoveActionChanged");
static_assert(sizeof(COMP_MoveControlManager_C_MoveActionChanged) == 0x000024, "Wrong size on COMP_MoveControlManager_C_MoveActionChanged");
static_assert(offsetof(COMP_MoveControlManager_C_MoveActionChanged, Action) == 0x000000, "Member 'COMP_MoveControlManager_C_MoveActionChanged::Action' has a wrong offset!");
static_assert(offsetof(COMP_MoveControlManager_C_MoveActionChanged, Relative) == 0x000008, "Member 'COMP_MoveControlManager_C_MoveActionChanged::Relative' has a wrong offset!");
static_assert(offsetof(COMP_MoveControlManager_C_MoveActionChanged, Result) == 0x000009, "Member 'COMP_MoveControlManager_C_MoveActionChanged::Result' has a wrong offset!");
static_assert(offsetof(COMP_MoveControlManager_C_MoveActionChanged, NewInputValue) == 0x00000C, "Member 'COMP_MoveControlManager_C_MoveActionChanged::NewInputValue' has a wrong offset!");
static_assert(offsetof(COMP_MoveControlManager_C_MoveActionChanged, CallFunc_Not_PreBool_ReturnValue) == 0x000010, "Member 'COMP_MoveControlManager_C_MoveActionChanged::CallFunc_Not_PreBool_ReturnValue' has a wrong offset!");
static_assert(offsetof(COMP_MoveControlManager_C_MoveActionChanged, CallFunc_Conv_ByteToInt_ReturnValue) == 0x000014, "Member 'COMP_MoveControlManager_C_MoveActionChanged::CallFunc_Conv_ByteToInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(COMP_MoveControlManager_C_MoveActionChanged, CallFunc_Conv_ByteToInt_ReturnValue_1) == 0x000018, "Member 'COMP_MoveControlManager_C_MoveActionChanged::CallFunc_Conv_ByteToInt_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(COMP_MoveControlManager_C_MoveActionChanged, CallFunc_Array_Get_Item) == 0x00001C, "Member 'COMP_MoveControlManager_C_MoveActionChanged::CallFunc_Array_Get_Item' has a wrong offset!");
static_assert(offsetof(COMP_MoveControlManager_C_MoveActionChanged, CallFunc_Add_FloatFloat_ReturnValue) == 0x000020, "Member 'COMP_MoveControlManager_C_MoveActionChanged::CallFunc_Add_FloatFloat_ReturnValue' has a wrong offset!");

// Function COMP_MoveControlManager.COMP_MoveControlManager_C.ExpireMoveControlByIndex
// 0x0020 (0x0020 - 0x0000)
struct COMP_MoveControlManager_C_ExpireMoveControlByIndex final
{
public:
	int32                                         MoveControlIndex;                                  // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UMOVECONTROL_Base_C*                    MoveControl;                                       // 0x0008(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0010(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UMOVECONTROL_Base_C*                    CallFunc_Array_Get_Item;                           // 0x0018(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(COMP_MoveControlManager_C_ExpireMoveControlByIndex) == 0x000008, "Wrong alignment on COMP_MoveControlManager_C_ExpireMoveControlByIndex");
static_assert(sizeof(COMP_MoveControlManager_C_ExpireMoveControlByIndex) == 0x000020, "Wrong size on COMP_MoveControlManager_C_ExpireMoveControlByIndex");
static_assert(offsetof(COMP_MoveControlManager_C_ExpireMoveControlByIndex, MoveControlIndex) == 0x000000, "Member 'COMP_MoveControlManager_C_ExpireMoveControlByIndex::MoveControlIndex' has a wrong offset!");
static_assert(offsetof(COMP_MoveControlManager_C_ExpireMoveControlByIndex, MoveControl) == 0x000008, "Member 'COMP_MoveControlManager_C_ExpireMoveControlByIndex::MoveControl' has a wrong offset!");
static_assert(offsetof(COMP_MoveControlManager_C_ExpireMoveControlByIndex, CallFunc_IsValid_ReturnValue) == 0x000010, "Member 'COMP_MoveControlManager_C_ExpireMoveControlByIndex::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(COMP_MoveControlManager_C_ExpireMoveControlByIndex, CallFunc_Array_Get_Item) == 0x000018, "Member 'COMP_MoveControlManager_C_ExpireMoveControlByIndex::CallFunc_Array_Get_Item' has a wrong offset!");

// Function COMP_MoveControlManager.COMP_MoveControlManager_C.UpdateJump
// 0x00C0 (0x00C0 - 0x0000)
struct COMP_MoveControlManager_C_UpdateJump final
{
public:
	int32                                         Temp_int_Variable;                                 // 0x0000(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Variable;                                // 0x0004(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Temp_bool_Variable_1;                              // 0x0005(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_6[0x2];                                        // 0x0006(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	class USoundBase*                             Temp_object_Variable;                              // 0x0008(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UCOMP_VoxelAudio_C*                     CallFunc_GetAudioComponentByLocationType_Result;   // 0x0010(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Not_PreBool_ReturnValue;                  // 0x0018(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_19[0x7];                                       // 0x0019(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UHARDWARE_TurboBoots_V2_C*              K2Node_DynamicCast_AsHARDWARE_Turbo_Boots_V2;      // 0x0020(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0028(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_29[0x3];                                       // 0x0029(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_GetVersionNumber_Version;                 // 0x002C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_IntInt_ReturnValue;            // 0x0030(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_ActivateTurboMechanism_Result;            // 0x0031(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_32[0x2];                                       // 0x0032(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         K2Node_Select_Default;                             // 0x0034(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class USoundBase*                             Temp_object_Variable_1;                            // 0x0038(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UHARDWARE_TurboBoots_V2_C*              K2Node_DynamicCast_AsHARDWARE_Turbo_Boots_V2_1;    // 0x0040(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess_1;                     // 0x0048(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_49[0x3];                                       // 0x0049(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_GetVersionNumber_Version_1;               // 0x004C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UHARDWARE_TurboBoots_V2_C*              K2Node_DynamicCast_AsHARDWARE_Turbo_Boots_V2_2;    // 0x0050(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess_2;                     // 0x0058(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_DeactivateTurboMechanism_Result;          // 0x0059(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Greater_FloatFloat_ReturnValue;           // 0x005A(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_5B[0x1];                                       // 0x005B(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Temp_int_Variable_1;                               // 0x005C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ENUM_HackerGender                             Temp_byte_Variable;                                // 0x0060(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_61[0x7];                                       // 0x0061(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class USkeletalMeshComponent*                 CallFunc_GetActionMeshComponent_SkeletalMeshComponent; // 0x0068(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class USoundBase*                             K2Node_Select_Default_1;                           // 0x0070(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UAnimInstance*                          CallFunc_GetAnimInstance_ReturnValue;              // 0x0078(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TScriptInterface<class IINTERF_ANIM_Hacker_C> K2Node_DynamicCast_AsINTERF_ANIM_Hacker;           // 0x0080(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          K2Node_DynamicCast_bSuccess_3;                     // 0x0090(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_SetIsGrounded_Result;                     // 0x0091(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_92[0x6];                                       // 0x0092(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class UAnimMontage*                           K2Node_Select_Default_2;                           // 0x0098(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UCharacterAction_C*                     CallFunc_TryBeginAction_Action;                    // 0x00A0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Multiply_IntInt_ReturnValue;              // 0x00A8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_CanJump_ReturnValue;                      // 0x00AC(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_AD[0x3];                                       // 0x00AD(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class UAttribMod*                             CallFunc_ApplyMod_ReturnValue;                     // 0x00B0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_GetMoveActionInputValue_Value;            // 0x00B8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Greater_FloatFloat_ReturnValue_1;         // 0x00BC(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BooleanAND_ReturnValue;                   // 0x00BD(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(COMP_MoveControlManager_C_UpdateJump) == 0x000008, "Wrong alignment on COMP_MoveControlManager_C_UpdateJump");
static_assert(sizeof(COMP_MoveControlManager_C_UpdateJump) == 0x0000C0, "Wrong size on COMP_MoveControlManager_C_UpdateJump");
static_assert(offsetof(COMP_MoveControlManager_C_UpdateJump, Temp_int_Variable) == 0x000000, "Member 'COMP_MoveControlManager_C_UpdateJump::Temp_int_Variable' has a wrong offset!");
static_assert(offsetof(COMP_MoveControlManager_C_UpdateJump, Temp_bool_Variable) == 0x000004, "Member 'COMP_MoveControlManager_C_UpdateJump::Temp_bool_Variable' has a wrong offset!");
static_assert(offsetof(COMP_MoveControlManager_C_UpdateJump, Temp_bool_Variable_1) == 0x000005, "Member 'COMP_MoveControlManager_C_UpdateJump::Temp_bool_Variable_1' has a wrong offset!");
static_assert(offsetof(COMP_MoveControlManager_C_UpdateJump, Temp_object_Variable) == 0x000008, "Member 'COMP_MoveControlManager_C_UpdateJump::Temp_object_Variable' has a wrong offset!");
static_assert(offsetof(COMP_MoveControlManager_C_UpdateJump, CallFunc_GetAudioComponentByLocationType_Result) == 0x000010, "Member 'COMP_MoveControlManager_C_UpdateJump::CallFunc_GetAudioComponentByLocationType_Result' has a wrong offset!");
static_assert(offsetof(COMP_MoveControlManager_C_UpdateJump, CallFunc_Not_PreBool_ReturnValue) == 0x000018, "Member 'COMP_MoveControlManager_C_UpdateJump::CallFunc_Not_PreBool_ReturnValue' has a wrong offset!");
static_assert(offsetof(COMP_MoveControlManager_C_UpdateJump, K2Node_DynamicCast_AsHARDWARE_Turbo_Boots_V2) == 0x000020, "Member 'COMP_MoveControlManager_C_UpdateJump::K2Node_DynamicCast_AsHARDWARE_Turbo_Boots_V2' has a wrong offset!");
static_assert(offsetof(COMP_MoveControlManager_C_UpdateJump, K2Node_DynamicCast_bSuccess) == 0x000028, "Member 'COMP_MoveControlManager_C_UpdateJump::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(COMP_MoveControlManager_C_UpdateJump, CallFunc_GetVersionNumber_Version) == 0x00002C, "Member 'COMP_MoveControlManager_C_UpdateJump::CallFunc_GetVersionNumber_Version' has a wrong offset!");
static_assert(offsetof(COMP_MoveControlManager_C_UpdateJump, CallFunc_EqualEqual_IntInt_ReturnValue) == 0x000030, "Member 'COMP_MoveControlManager_C_UpdateJump::CallFunc_EqualEqual_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(COMP_MoveControlManager_C_UpdateJump, CallFunc_ActivateTurboMechanism_Result) == 0x000031, "Member 'COMP_MoveControlManager_C_UpdateJump::CallFunc_ActivateTurboMechanism_Result' has a wrong offset!");
static_assert(offsetof(COMP_MoveControlManager_C_UpdateJump, K2Node_Select_Default) == 0x000034, "Member 'COMP_MoveControlManager_C_UpdateJump::K2Node_Select_Default' has a wrong offset!");
static_assert(offsetof(COMP_MoveControlManager_C_UpdateJump, Temp_object_Variable_1) == 0x000038, "Member 'COMP_MoveControlManager_C_UpdateJump::Temp_object_Variable_1' has a wrong offset!");
static_assert(offsetof(COMP_MoveControlManager_C_UpdateJump, K2Node_DynamicCast_AsHARDWARE_Turbo_Boots_V2_1) == 0x000040, "Member 'COMP_MoveControlManager_C_UpdateJump::K2Node_DynamicCast_AsHARDWARE_Turbo_Boots_V2_1' has a wrong offset!");
static_assert(offsetof(COMP_MoveControlManager_C_UpdateJump, K2Node_DynamicCast_bSuccess_1) == 0x000048, "Member 'COMP_MoveControlManager_C_UpdateJump::K2Node_DynamicCast_bSuccess_1' has a wrong offset!");
static_assert(offsetof(COMP_MoveControlManager_C_UpdateJump, CallFunc_GetVersionNumber_Version_1) == 0x00004C, "Member 'COMP_MoveControlManager_C_UpdateJump::CallFunc_GetVersionNumber_Version_1' has a wrong offset!");
static_assert(offsetof(COMP_MoveControlManager_C_UpdateJump, K2Node_DynamicCast_AsHARDWARE_Turbo_Boots_V2_2) == 0x000050, "Member 'COMP_MoveControlManager_C_UpdateJump::K2Node_DynamicCast_AsHARDWARE_Turbo_Boots_V2_2' has a wrong offset!");
static_assert(offsetof(COMP_MoveControlManager_C_UpdateJump, K2Node_DynamicCast_bSuccess_2) == 0x000058, "Member 'COMP_MoveControlManager_C_UpdateJump::K2Node_DynamicCast_bSuccess_2' has a wrong offset!");
static_assert(offsetof(COMP_MoveControlManager_C_UpdateJump, CallFunc_DeactivateTurboMechanism_Result) == 0x000059, "Member 'COMP_MoveControlManager_C_UpdateJump::CallFunc_DeactivateTurboMechanism_Result' has a wrong offset!");
static_assert(offsetof(COMP_MoveControlManager_C_UpdateJump, CallFunc_Greater_FloatFloat_ReturnValue) == 0x00005A, "Member 'COMP_MoveControlManager_C_UpdateJump::CallFunc_Greater_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(COMP_MoveControlManager_C_UpdateJump, Temp_int_Variable_1) == 0x00005C, "Member 'COMP_MoveControlManager_C_UpdateJump::Temp_int_Variable_1' has a wrong offset!");
static_assert(offsetof(COMP_MoveControlManager_C_UpdateJump, Temp_byte_Variable) == 0x000060, "Member 'COMP_MoveControlManager_C_UpdateJump::Temp_byte_Variable' has a wrong offset!");
static_assert(offsetof(COMP_MoveControlManager_C_UpdateJump, CallFunc_GetActionMeshComponent_SkeletalMeshComponent) == 0x000068, "Member 'COMP_MoveControlManager_C_UpdateJump::CallFunc_GetActionMeshComponent_SkeletalMeshComponent' has a wrong offset!");
static_assert(offsetof(COMP_MoveControlManager_C_UpdateJump, K2Node_Select_Default_1) == 0x000070, "Member 'COMP_MoveControlManager_C_UpdateJump::K2Node_Select_Default_1' has a wrong offset!");
static_assert(offsetof(COMP_MoveControlManager_C_UpdateJump, CallFunc_GetAnimInstance_ReturnValue) == 0x000078, "Member 'COMP_MoveControlManager_C_UpdateJump::CallFunc_GetAnimInstance_ReturnValue' has a wrong offset!");
static_assert(offsetof(COMP_MoveControlManager_C_UpdateJump, K2Node_DynamicCast_AsINTERF_ANIM_Hacker) == 0x000080, "Member 'COMP_MoveControlManager_C_UpdateJump::K2Node_DynamicCast_AsINTERF_ANIM_Hacker' has a wrong offset!");
static_assert(offsetof(COMP_MoveControlManager_C_UpdateJump, K2Node_DynamicCast_bSuccess_3) == 0x000090, "Member 'COMP_MoveControlManager_C_UpdateJump::K2Node_DynamicCast_bSuccess_3' has a wrong offset!");
static_assert(offsetof(COMP_MoveControlManager_C_UpdateJump, CallFunc_SetIsGrounded_Result) == 0x000091, "Member 'COMP_MoveControlManager_C_UpdateJump::CallFunc_SetIsGrounded_Result' has a wrong offset!");
static_assert(offsetof(COMP_MoveControlManager_C_UpdateJump, K2Node_Select_Default_2) == 0x000098, "Member 'COMP_MoveControlManager_C_UpdateJump::K2Node_Select_Default_2' has a wrong offset!");
static_assert(offsetof(COMP_MoveControlManager_C_UpdateJump, CallFunc_TryBeginAction_Action) == 0x0000A0, "Member 'COMP_MoveControlManager_C_UpdateJump::CallFunc_TryBeginAction_Action' has a wrong offset!");
static_assert(offsetof(COMP_MoveControlManager_C_UpdateJump, CallFunc_Multiply_IntInt_ReturnValue) == 0x0000A8, "Member 'COMP_MoveControlManager_C_UpdateJump::CallFunc_Multiply_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(COMP_MoveControlManager_C_UpdateJump, CallFunc_CanJump_ReturnValue) == 0x0000AC, "Member 'COMP_MoveControlManager_C_UpdateJump::CallFunc_CanJump_ReturnValue' has a wrong offset!");
static_assert(offsetof(COMP_MoveControlManager_C_UpdateJump, CallFunc_ApplyMod_ReturnValue) == 0x0000B0, "Member 'COMP_MoveControlManager_C_UpdateJump::CallFunc_ApplyMod_ReturnValue' has a wrong offset!");
static_assert(offsetof(COMP_MoveControlManager_C_UpdateJump, CallFunc_GetMoveActionInputValue_Value) == 0x0000B8, "Member 'COMP_MoveControlManager_C_UpdateJump::CallFunc_GetMoveActionInputValue_Value' has a wrong offset!");
static_assert(offsetof(COMP_MoveControlManager_C_UpdateJump, CallFunc_Greater_FloatFloat_ReturnValue_1) == 0x0000BC, "Member 'COMP_MoveControlManager_C_UpdateJump::CallFunc_Greater_FloatFloat_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(COMP_MoveControlManager_C_UpdateJump, CallFunc_BooleanAND_ReturnValue) == 0x0000BD, "Member 'COMP_MoveControlManager_C_UpdateJump::CallFunc_BooleanAND_ReturnValue' has a wrong offset!");

// Function COMP_MoveControlManager.COMP_MoveControlManager_C.UpdateSprintWalkFall
// 0x00E8 (0x00E8 - 0x0000)
struct COMP_MoveControlManager_C_UpdateSprintWalkFall final
{
public:
	bool                                          ShouldSkate;                                       // 0x0000(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_ExpireModsMatchingCategory_ReturnValue;   // 0x0004(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_ShouldSkateWhileSprinting_Result;         // 0x0008(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UAttribMod*                             CallFunc_ApplyMod_ReturnValue;                     // 0x0010(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_ActivateTurboMechanism_Result;            // 0x0018(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_NotEqual_FloatFloat_ReturnValue;          // 0x0019(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_1A[0x2];                                       // 0x001A(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_ExpireModsMatchingCategory_ReturnValue_1; // 0x001C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_HasActiveModWithCategory_ReturnValue;     // 0x0020(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Not_PreBool_ReturnValue;                  // 0x0021(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_HasActiveModWithCategory_ReturnValue_1;   // 0x0022(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Not_PreBool_ReturnValue_1;                // 0x0023(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_HasActiveModWithCategory_ReturnValue_2;   // 0x0024(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_HasActiveModWithCategory_ReturnValue_3;   // 0x0025(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BooleanOR_ReturnValue;                    // 0x0026(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_27[0x1];                                       // 0x0027(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_ExpireModsMatchingCategory_ReturnValue_2; // 0x0028(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_ExpireModsMatchingCategory_ReturnValue_3; // 0x002C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Not_PreBool_ReturnValue_2;                // 0x0030(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BooleanAND_ReturnValue;                   // 0x0031(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_32[0x6];                                       // 0x0032(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class UAttributeDef*                          Temp_object_Variable;                              // 0x0038(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Variable;                                // 0x0040(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_41[0x7];                                       // 0x0041(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UAnimInstance*                          CallFunc_GetAnimInstance_ReturnValue;              // 0x0048(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TScriptInterface<class IINTERF_ANIM_Hacker_C> K2Node_DynamicCast_AsINTERF_ANIM_Hacker;           // 0x0050(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0060(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_61[0x7];                                       // 0x0061(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UAnimInstance*                          CallFunc_GetAnimInstance_ReturnValue_1;            // 0x0068(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_SetIsSprinting_Result;                    // 0x0070(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_71[0x7];                                       // 0x0071(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TScriptInterface<class IINTERF_ANIM_Hacker_C> K2Node_DynamicCast_AsINTERF_ANIM_Hacker_1;         // 0x0078(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          K2Node_DynamicCast_bSuccess_1;                     // 0x0088(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_SetIsSprinting_Result_1;                  // 0x0089(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Not_PreBool_ReturnValue_3;                // 0x008A(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_8B[0x5];                                       // 0x008B(0x0005)(Fixing Size After Last Property [ Dumper-7 ])
	class UAttribMod*                             CallFunc_ApplyMod_ReturnValue_1;                   // 0x0090(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Greater_FloatFloat_ReturnValue;           // 0x0098(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_HasActiveModWithCategory_ReturnValue_4;   // 0x0099(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Not_PreBool_ReturnValue_4;                // 0x009A(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_9B[0x5];                                       // 0x009B(0x0005)(Fixing Size After Last Property [ Dumper-7 ])
	class UAttribMod*                             CallFunc_ApplyMod_ReturnValue_2;                   // 0x00A0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_HasActiveModWithCategory_ReturnValue_5;   // 0x00A8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_A9[0x3];                                       // 0x00A9(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_ExpireModsMatchingCategory_ReturnValue_4; // 0x00AC(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_HasActiveModWithCategory_ReturnValue_6;   // 0x00B0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_B1[0x3];                                       // 0x00B1(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_ExpireModsMatchingCategory_ReturnValue_5; // 0x00B4(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Not_PreBool_ReturnValue_5;                // 0x00B8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_B9[0x7];                                       // 0x00B9(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UAttributeDef*                          Temp_object_Variable_1;                            // 0x00C0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UAttributeDef*                          K2Node_Select_Default;                             // 0x00C8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UAttribMod*                             CallFunc_ApplyMod_ReturnValue_3;                   // 0x00D0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x00D8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_D9[0x3];                                       // 0x00D9(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_GetMoveActionInputValue_Value;            // 0x00DC(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Greater_FloatFloat_ReturnValue_1;         // 0x00E0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BooleanOR_ReturnValue_1;                  // 0x00E1(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BooleanAND_ReturnValue_1;                 // 0x00E2(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BooleanAND_ReturnValue_2;                 // 0x00E3(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BooleanAND_ReturnValue_3;                 // 0x00E4(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(COMP_MoveControlManager_C_UpdateSprintWalkFall) == 0x000008, "Wrong alignment on COMP_MoveControlManager_C_UpdateSprintWalkFall");
static_assert(sizeof(COMP_MoveControlManager_C_UpdateSprintWalkFall) == 0x0000E8, "Wrong size on COMP_MoveControlManager_C_UpdateSprintWalkFall");
static_assert(offsetof(COMP_MoveControlManager_C_UpdateSprintWalkFall, ShouldSkate) == 0x000000, "Member 'COMP_MoveControlManager_C_UpdateSprintWalkFall::ShouldSkate' has a wrong offset!");
static_assert(offsetof(COMP_MoveControlManager_C_UpdateSprintWalkFall, CallFunc_ExpireModsMatchingCategory_ReturnValue) == 0x000004, "Member 'COMP_MoveControlManager_C_UpdateSprintWalkFall::CallFunc_ExpireModsMatchingCategory_ReturnValue' has a wrong offset!");
static_assert(offsetof(COMP_MoveControlManager_C_UpdateSprintWalkFall, CallFunc_ShouldSkateWhileSprinting_Result) == 0x000008, "Member 'COMP_MoveControlManager_C_UpdateSprintWalkFall::CallFunc_ShouldSkateWhileSprinting_Result' has a wrong offset!");
static_assert(offsetof(COMP_MoveControlManager_C_UpdateSprintWalkFall, CallFunc_ApplyMod_ReturnValue) == 0x000010, "Member 'COMP_MoveControlManager_C_UpdateSprintWalkFall::CallFunc_ApplyMod_ReturnValue' has a wrong offset!");
static_assert(offsetof(COMP_MoveControlManager_C_UpdateSprintWalkFall, CallFunc_ActivateTurboMechanism_Result) == 0x000018, "Member 'COMP_MoveControlManager_C_UpdateSprintWalkFall::CallFunc_ActivateTurboMechanism_Result' has a wrong offset!");
static_assert(offsetof(COMP_MoveControlManager_C_UpdateSprintWalkFall, CallFunc_NotEqual_FloatFloat_ReturnValue) == 0x000019, "Member 'COMP_MoveControlManager_C_UpdateSprintWalkFall::CallFunc_NotEqual_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(COMP_MoveControlManager_C_UpdateSprintWalkFall, CallFunc_ExpireModsMatchingCategory_ReturnValue_1) == 0x00001C, "Member 'COMP_MoveControlManager_C_UpdateSprintWalkFall::CallFunc_ExpireModsMatchingCategory_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(COMP_MoveControlManager_C_UpdateSprintWalkFall, CallFunc_HasActiveModWithCategory_ReturnValue) == 0x000020, "Member 'COMP_MoveControlManager_C_UpdateSprintWalkFall::CallFunc_HasActiveModWithCategory_ReturnValue' has a wrong offset!");
static_assert(offsetof(COMP_MoveControlManager_C_UpdateSprintWalkFall, CallFunc_Not_PreBool_ReturnValue) == 0x000021, "Member 'COMP_MoveControlManager_C_UpdateSprintWalkFall::CallFunc_Not_PreBool_ReturnValue' has a wrong offset!");
static_assert(offsetof(COMP_MoveControlManager_C_UpdateSprintWalkFall, CallFunc_HasActiveModWithCategory_ReturnValue_1) == 0x000022, "Member 'COMP_MoveControlManager_C_UpdateSprintWalkFall::CallFunc_HasActiveModWithCategory_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(COMP_MoveControlManager_C_UpdateSprintWalkFall, CallFunc_Not_PreBool_ReturnValue_1) == 0x000023, "Member 'COMP_MoveControlManager_C_UpdateSprintWalkFall::CallFunc_Not_PreBool_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(COMP_MoveControlManager_C_UpdateSprintWalkFall, CallFunc_HasActiveModWithCategory_ReturnValue_2) == 0x000024, "Member 'COMP_MoveControlManager_C_UpdateSprintWalkFall::CallFunc_HasActiveModWithCategory_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(COMP_MoveControlManager_C_UpdateSprintWalkFall, CallFunc_HasActiveModWithCategory_ReturnValue_3) == 0x000025, "Member 'COMP_MoveControlManager_C_UpdateSprintWalkFall::CallFunc_HasActiveModWithCategory_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(COMP_MoveControlManager_C_UpdateSprintWalkFall, CallFunc_BooleanOR_ReturnValue) == 0x000026, "Member 'COMP_MoveControlManager_C_UpdateSprintWalkFall::CallFunc_BooleanOR_ReturnValue' has a wrong offset!");
static_assert(offsetof(COMP_MoveControlManager_C_UpdateSprintWalkFall, CallFunc_ExpireModsMatchingCategory_ReturnValue_2) == 0x000028, "Member 'COMP_MoveControlManager_C_UpdateSprintWalkFall::CallFunc_ExpireModsMatchingCategory_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(COMP_MoveControlManager_C_UpdateSprintWalkFall, CallFunc_ExpireModsMatchingCategory_ReturnValue_3) == 0x00002C, "Member 'COMP_MoveControlManager_C_UpdateSprintWalkFall::CallFunc_ExpireModsMatchingCategory_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(COMP_MoveControlManager_C_UpdateSprintWalkFall, CallFunc_Not_PreBool_ReturnValue_2) == 0x000030, "Member 'COMP_MoveControlManager_C_UpdateSprintWalkFall::CallFunc_Not_PreBool_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(COMP_MoveControlManager_C_UpdateSprintWalkFall, CallFunc_BooleanAND_ReturnValue) == 0x000031, "Member 'COMP_MoveControlManager_C_UpdateSprintWalkFall::CallFunc_BooleanAND_ReturnValue' has a wrong offset!");
static_assert(offsetof(COMP_MoveControlManager_C_UpdateSprintWalkFall, Temp_object_Variable) == 0x000038, "Member 'COMP_MoveControlManager_C_UpdateSprintWalkFall::Temp_object_Variable' has a wrong offset!");
static_assert(offsetof(COMP_MoveControlManager_C_UpdateSprintWalkFall, Temp_bool_Variable) == 0x000040, "Member 'COMP_MoveControlManager_C_UpdateSprintWalkFall::Temp_bool_Variable' has a wrong offset!");
static_assert(offsetof(COMP_MoveControlManager_C_UpdateSprintWalkFall, CallFunc_GetAnimInstance_ReturnValue) == 0x000048, "Member 'COMP_MoveControlManager_C_UpdateSprintWalkFall::CallFunc_GetAnimInstance_ReturnValue' has a wrong offset!");
static_assert(offsetof(COMP_MoveControlManager_C_UpdateSprintWalkFall, K2Node_DynamicCast_AsINTERF_ANIM_Hacker) == 0x000050, "Member 'COMP_MoveControlManager_C_UpdateSprintWalkFall::K2Node_DynamicCast_AsINTERF_ANIM_Hacker' has a wrong offset!");
static_assert(offsetof(COMP_MoveControlManager_C_UpdateSprintWalkFall, K2Node_DynamicCast_bSuccess) == 0x000060, "Member 'COMP_MoveControlManager_C_UpdateSprintWalkFall::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(COMP_MoveControlManager_C_UpdateSprintWalkFall, CallFunc_GetAnimInstance_ReturnValue_1) == 0x000068, "Member 'COMP_MoveControlManager_C_UpdateSprintWalkFall::CallFunc_GetAnimInstance_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(COMP_MoveControlManager_C_UpdateSprintWalkFall, CallFunc_SetIsSprinting_Result) == 0x000070, "Member 'COMP_MoveControlManager_C_UpdateSprintWalkFall::CallFunc_SetIsSprinting_Result' has a wrong offset!");
static_assert(offsetof(COMP_MoveControlManager_C_UpdateSprintWalkFall, K2Node_DynamicCast_AsINTERF_ANIM_Hacker_1) == 0x000078, "Member 'COMP_MoveControlManager_C_UpdateSprintWalkFall::K2Node_DynamicCast_AsINTERF_ANIM_Hacker_1' has a wrong offset!");
static_assert(offsetof(COMP_MoveControlManager_C_UpdateSprintWalkFall, K2Node_DynamicCast_bSuccess_1) == 0x000088, "Member 'COMP_MoveControlManager_C_UpdateSprintWalkFall::K2Node_DynamicCast_bSuccess_1' has a wrong offset!");
static_assert(offsetof(COMP_MoveControlManager_C_UpdateSprintWalkFall, CallFunc_SetIsSprinting_Result_1) == 0x000089, "Member 'COMP_MoveControlManager_C_UpdateSprintWalkFall::CallFunc_SetIsSprinting_Result_1' has a wrong offset!");
static_assert(offsetof(COMP_MoveControlManager_C_UpdateSprintWalkFall, CallFunc_Not_PreBool_ReturnValue_3) == 0x00008A, "Member 'COMP_MoveControlManager_C_UpdateSprintWalkFall::CallFunc_Not_PreBool_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(COMP_MoveControlManager_C_UpdateSprintWalkFall, CallFunc_ApplyMod_ReturnValue_1) == 0x000090, "Member 'COMP_MoveControlManager_C_UpdateSprintWalkFall::CallFunc_ApplyMod_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(COMP_MoveControlManager_C_UpdateSprintWalkFall, CallFunc_Greater_FloatFloat_ReturnValue) == 0x000098, "Member 'COMP_MoveControlManager_C_UpdateSprintWalkFall::CallFunc_Greater_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(COMP_MoveControlManager_C_UpdateSprintWalkFall, CallFunc_HasActiveModWithCategory_ReturnValue_4) == 0x000099, "Member 'COMP_MoveControlManager_C_UpdateSprintWalkFall::CallFunc_HasActiveModWithCategory_ReturnValue_4' has a wrong offset!");
static_assert(offsetof(COMP_MoveControlManager_C_UpdateSprintWalkFall, CallFunc_Not_PreBool_ReturnValue_4) == 0x00009A, "Member 'COMP_MoveControlManager_C_UpdateSprintWalkFall::CallFunc_Not_PreBool_ReturnValue_4' has a wrong offset!");
static_assert(offsetof(COMP_MoveControlManager_C_UpdateSprintWalkFall, CallFunc_ApplyMod_ReturnValue_2) == 0x0000A0, "Member 'COMP_MoveControlManager_C_UpdateSprintWalkFall::CallFunc_ApplyMod_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(COMP_MoveControlManager_C_UpdateSprintWalkFall, CallFunc_HasActiveModWithCategory_ReturnValue_5) == 0x0000A8, "Member 'COMP_MoveControlManager_C_UpdateSprintWalkFall::CallFunc_HasActiveModWithCategory_ReturnValue_5' has a wrong offset!");
static_assert(offsetof(COMP_MoveControlManager_C_UpdateSprintWalkFall, CallFunc_ExpireModsMatchingCategory_ReturnValue_4) == 0x0000AC, "Member 'COMP_MoveControlManager_C_UpdateSprintWalkFall::CallFunc_ExpireModsMatchingCategory_ReturnValue_4' has a wrong offset!");
static_assert(offsetof(COMP_MoveControlManager_C_UpdateSprintWalkFall, CallFunc_HasActiveModWithCategory_ReturnValue_6) == 0x0000B0, "Member 'COMP_MoveControlManager_C_UpdateSprintWalkFall::CallFunc_HasActiveModWithCategory_ReturnValue_6' has a wrong offset!");
static_assert(offsetof(COMP_MoveControlManager_C_UpdateSprintWalkFall, CallFunc_ExpireModsMatchingCategory_ReturnValue_5) == 0x0000B4, "Member 'COMP_MoveControlManager_C_UpdateSprintWalkFall::CallFunc_ExpireModsMatchingCategory_ReturnValue_5' has a wrong offset!");
static_assert(offsetof(COMP_MoveControlManager_C_UpdateSprintWalkFall, CallFunc_Not_PreBool_ReturnValue_5) == 0x0000B8, "Member 'COMP_MoveControlManager_C_UpdateSprintWalkFall::CallFunc_Not_PreBool_ReturnValue_5' has a wrong offset!");
static_assert(offsetof(COMP_MoveControlManager_C_UpdateSprintWalkFall, Temp_object_Variable_1) == 0x0000C0, "Member 'COMP_MoveControlManager_C_UpdateSprintWalkFall::Temp_object_Variable_1' has a wrong offset!");
static_assert(offsetof(COMP_MoveControlManager_C_UpdateSprintWalkFall, K2Node_Select_Default) == 0x0000C8, "Member 'COMP_MoveControlManager_C_UpdateSprintWalkFall::K2Node_Select_Default' has a wrong offset!");
static_assert(offsetof(COMP_MoveControlManager_C_UpdateSprintWalkFall, CallFunc_ApplyMod_ReturnValue_3) == 0x0000D0, "Member 'COMP_MoveControlManager_C_UpdateSprintWalkFall::CallFunc_ApplyMod_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(COMP_MoveControlManager_C_UpdateSprintWalkFall, CallFunc_IsValid_ReturnValue) == 0x0000D8, "Member 'COMP_MoveControlManager_C_UpdateSprintWalkFall::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(COMP_MoveControlManager_C_UpdateSprintWalkFall, CallFunc_GetMoveActionInputValue_Value) == 0x0000DC, "Member 'COMP_MoveControlManager_C_UpdateSprintWalkFall::CallFunc_GetMoveActionInputValue_Value' has a wrong offset!");
static_assert(offsetof(COMP_MoveControlManager_C_UpdateSprintWalkFall, CallFunc_Greater_FloatFloat_ReturnValue_1) == 0x0000E0, "Member 'COMP_MoveControlManager_C_UpdateSprintWalkFall::CallFunc_Greater_FloatFloat_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(COMP_MoveControlManager_C_UpdateSprintWalkFall, CallFunc_BooleanOR_ReturnValue_1) == 0x0000E1, "Member 'COMP_MoveControlManager_C_UpdateSprintWalkFall::CallFunc_BooleanOR_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(COMP_MoveControlManager_C_UpdateSprintWalkFall, CallFunc_BooleanAND_ReturnValue_1) == 0x0000E2, "Member 'COMP_MoveControlManager_C_UpdateSprintWalkFall::CallFunc_BooleanAND_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(COMP_MoveControlManager_C_UpdateSprintWalkFall, CallFunc_BooleanAND_ReturnValue_2) == 0x0000E3, "Member 'COMP_MoveControlManager_C_UpdateSprintWalkFall::CallFunc_BooleanAND_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(COMP_MoveControlManager_C_UpdateSprintWalkFall, CallFunc_BooleanAND_ReturnValue_3) == 0x0000E4, "Member 'COMP_MoveControlManager_C_UpdateSprintWalkFall::CallFunc_BooleanAND_ReturnValue_3' has a wrong offset!");

// Function COMP_MoveControlManager.COMP_MoveControlManager_C.UpdateSprintDirectionSpeed
// 0x0028 (0x0028 - 0x0000)
struct COMP_MoveControlManager_C_UpdateSprintDirectionSpeed final
{
public:
	class UAttribMod*                             ActiveMod;                                         // 0x0000(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         DesiredBonusValue;                                 // 0x0008(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x000C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_D[0x3];                                        // 0x000D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class UAttribMod*                             CallFunc_GetActiveModWithCategory_ReturnValue;     // 0x0010(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UAttribMod*                             CallFunc_ApplyMod_ReturnValue;                     // 0x0018(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_DotProduct2D_ReturnValue;                 // 0x0020(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Multiply_FloatFloat_ReturnValue;          // 0x0024(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(COMP_MoveControlManager_C_UpdateSprintDirectionSpeed) == 0x000008, "Wrong alignment on COMP_MoveControlManager_C_UpdateSprintDirectionSpeed");
static_assert(sizeof(COMP_MoveControlManager_C_UpdateSprintDirectionSpeed) == 0x000028, "Wrong size on COMP_MoveControlManager_C_UpdateSprintDirectionSpeed");
static_assert(offsetof(COMP_MoveControlManager_C_UpdateSprintDirectionSpeed, ActiveMod) == 0x000000, "Member 'COMP_MoveControlManager_C_UpdateSprintDirectionSpeed::ActiveMod' has a wrong offset!");
static_assert(offsetof(COMP_MoveControlManager_C_UpdateSprintDirectionSpeed, DesiredBonusValue) == 0x000008, "Member 'COMP_MoveControlManager_C_UpdateSprintDirectionSpeed::DesiredBonusValue' has a wrong offset!");
static_assert(offsetof(COMP_MoveControlManager_C_UpdateSprintDirectionSpeed, CallFunc_IsValid_ReturnValue) == 0x00000C, "Member 'COMP_MoveControlManager_C_UpdateSprintDirectionSpeed::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(COMP_MoveControlManager_C_UpdateSprintDirectionSpeed, CallFunc_GetActiveModWithCategory_ReturnValue) == 0x000010, "Member 'COMP_MoveControlManager_C_UpdateSprintDirectionSpeed::CallFunc_GetActiveModWithCategory_ReturnValue' has a wrong offset!");
static_assert(offsetof(COMP_MoveControlManager_C_UpdateSprintDirectionSpeed, CallFunc_ApplyMod_ReturnValue) == 0x000018, "Member 'COMP_MoveControlManager_C_UpdateSprintDirectionSpeed::CallFunc_ApplyMod_ReturnValue' has a wrong offset!");
static_assert(offsetof(COMP_MoveControlManager_C_UpdateSprintDirectionSpeed, CallFunc_DotProduct2D_ReturnValue) == 0x000020, "Member 'COMP_MoveControlManager_C_UpdateSprintDirectionSpeed::CallFunc_DotProduct2D_ReturnValue' has a wrong offset!");
static_assert(offsetof(COMP_MoveControlManager_C_UpdateSprintDirectionSpeed, CallFunc_Multiply_FloatFloat_ReturnValue) == 0x000024, "Member 'COMP_MoveControlManager_C_UpdateSprintDirectionSpeed::CallFunc_Multiply_FloatFloat_ReturnValue' has a wrong offset!");

// Function COMP_MoveControlManager.COMP_MoveControlManager_C.UpdateCrouch
// 0x04B0 (0x04B0 - 0x0000)
struct COMP_MoveControlManager_C_UpdateCrouch final
{
public:
	float                                         DeltaTime;                                         // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         NewLeanPivotHeight;                                // 0x0004(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         LastLeanPivotHeight;                               // 0x0008(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         MinCrouchProgress;                                 // 0x000C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          IsDuckingDownInAir;                                // 0x0010(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          IsDuckingDown;                                     // 0x0011(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_12[0x6];                                       // 0x0012(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class UCapsuleComponent*                      PlayerCapsule;                                     // 0x0018(0x0008)(Edit, BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FName                                   CrouchSpeedModCategory;                            // 0x0020(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_GetScaledCapsuleHalfHeight_ReturnValue;   // 0x0028(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_GreaterEqual_FloatFloat_ReturnValue;      // 0x002C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_EqualEqual_FloatFloat_ReturnValue;        // 0x002D(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_2E[0x2];                                       // 0x002E(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_Ease_ReturnValue;                         // 0x0030(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Multiply_FloatFloat_ReturnValue;          // 0x0034(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Not_PreBool_ReturnValue;                  // 0x0038(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BooleanAND_ReturnValue;                   // 0x0039(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_3A[0x2];                                       // 0x003A(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                CallFunc_MakeVector_ReturnValue;                   // 0x003C(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_GetUnscaledCapsuleHalfHeight_ReturnValue; // 0x0048(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Subtract_FloatFloat_ReturnValue;          // 0x004C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Multiply_FloatFloat_ReturnValue_1;        // 0x0050(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Subtract_FloatFloat_ReturnValue_1;        // 0x0054(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Add_FloatFloat_ReturnValue;               // 0x0058(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Ease_ReturnValue_1;                       // 0x005C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Subtract_FloatFloat_ReturnValue_2;        // 0x0060(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_K2_GetActorLocation_ReturnValue;          // 0x0064(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector_X;                            // 0x0070(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector_Y;                            // 0x0074(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector_Z;                            // 0x0078(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_GetScaledCapsuleHalfHeight_ReturnValue_1; // 0x007C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Subtract_FloatFloat_ReturnValue_3;        // 0x0080(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Add_FloatFloat_ReturnValue_1;             // 0x0084(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_GetScaledCapsuleHalfHeight_ReturnValue_2; // 0x0088(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_MakeVector_ReturnValue_1;                 // 0x008C(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Subtract_FloatFloat_ReturnValue_4;        // 0x0098(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Temp_float_Variable;                               // 0x009C(0x0004)(ConstParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_K2_GetActorLocation_ReturnValue_1;        // 0x00A0(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector_X_1;                          // 0x00AC(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector_Y_1;                          // 0x00B0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector_Z_1;                          // 0x00B4(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Not_PreBool_ReturnValue_1;                // 0x00B8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_B9[0x3];                                       // 0x00B9(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_Add_FloatFloat_ReturnValue_2;             // 0x00BC(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_MakeVector_ReturnValue_2;                 // 0x00C0(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         CallFunc_MakeLiteralByte_ReturnValue;              // 0x00CC(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_CD[0x3];                                       // 0x00CD(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Conv_ByteToInt_ReturnValue;               // 0x00D0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Subtract_FloatFloat_ReturnValue_5;        // 0x00D4(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_MakeVector_ReturnValue_3;                 // 0x00D8(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FHitResult                             CallFunc_K2_AddActorWorldOffset_SweepHitResult;    // 0x00E4(0x0088)(IsPlainOldData, NoDestructor, ContainsInstancedReference)
	float                                         CallFunc_BreakVector_X_2;                          // 0x016C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector_Y_2;                          // 0x0170(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector_Z_2;                          // 0x0174(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Variable;                                 // 0x0178(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_NotEqual_FloatFloat_ReturnValue;          // 0x017C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_17D[0x3];                                      // 0x017D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_UpdateSlump_MinCrouchProgress;            // 0x0180(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Multiply_FloatFloat_ReturnValue_2;        // 0x0184(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Not_PreBool_ReturnValue_2;                // 0x0188(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Less_FloatFloat_ReturnValue;              // 0x0189(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BooleanAND_ReturnValue_1;                 // 0x018A(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_18B[0x1];                                      // 0x018B(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Temp_int_Variable_1;                               // 0x018C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_NotEqual_BoolBool_ReturnValue;            // 0x0190(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Temp_bool_Variable;                                // 0x0191(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_192[0x2];                                      // 0x0192(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         K2Node_Select_Default;                             // 0x0194(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Greater_FloatFloat_ReturnValue;           // 0x0198(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BooleanOR_ReturnValue;                    // 0x0199(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_19A[0x2];                                      // 0x019A(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_ExpireModsMatchingCategory_ReturnValue;   // 0x019C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UAttribMod*                             CallFunc_ApplyMod_ReturnValue;                     // 0x01A0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Multiply_FloatFloat_ReturnValue_3;        // 0x01A8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_MakeVector_ReturnValue_4;                 // 0x01AC(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FHitResult                             CallFunc_K2_SetRelativeLocation_SweepHitResult;    // 0x01B8(0x0088)(IsPlainOldData, NoDestructor, ContainsInstancedReference)
	struct FVector                                CallFunc_MakeVector_ReturnValue_5;                 // 0x0240(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FHitResult                             CallFunc_K2_SetRelativeLocation_SweepHitResult_1;  // 0x024C(0x0088)(IsPlainOldData, NoDestructor, ContainsInstancedReference)
	bool                                          CallFunc_Not_PreBool_ReturnValue_3;                // 0x02D4(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_2D5[0x3];                                      // 0x02D5(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FHitResult                             CallFunc_K2_SetRelativeLocation_SweepHitResult_2;  // 0x02D8(0x0088)(IsPlainOldData, NoDestructor, ContainsInstancedReference)
	bool                                          CallFunc_NotEqual_ByteByte_ReturnValue;            // 0x0360(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Temp_bool_Variable_1;                              // 0x0361(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BooleanOR_ReturnValue_1;                  // 0x0362(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_363[0x1];                                      // 0x0363(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         K2Node_Select_Default_1;                           // 0x0364(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Divide_FloatFloat_ReturnValue;            // 0x0368(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Multiply_IntFloat_ReturnValue;            // 0x036C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FHitResult                             CallFunc_K2_SetActorLocation_SweepHitResult;       // 0x0370(0x0088)(IsPlainOldData, NoDestructor, ContainsInstancedReference)
	bool                                          CallFunc_K2_SetActorLocation_ReturnValue;          // 0x03F8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_CanStandUp_Result;                        // 0x03F9(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_3FA[0x2];                                      // 0x03FA(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	struct FHitResult                             CallFunc_K2_SetActorLocation_SweepHitResult_1;     // 0x03FC(0x0088)(IsPlainOldData, NoDestructor, ContainsInstancedReference)
	bool                                          CallFunc_K2_SetActorLocation_ReturnValue_1;        // 0x0484(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_485[0x3];                                      // 0x0485(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_Multiply_FloatFloat_ReturnValue_4;        // 0x0488(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_NotEqual_FloatFloat_ReturnValue_1;        // 0x048C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Not_PreBool_ReturnValue_4;                // 0x048D(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_HasQueuedOrActiveCinematicAction_Result;  // 0x048E(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Not_PreBool_ReturnValue_5;                // 0x048F(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_EqualEqual_FloatFloat_ReturnValue_1;      // 0x0490(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_491[0x3];                                      // 0x0491(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_Add_FloatFloat_ReturnValue_3;             // 0x0494(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BooleanOR_ReturnValue_2;                  // 0x0498(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_499[0x3];                                      // 0x0499(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_FClamp_ReturnValue;                       // 0x049C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_NotEqual_FloatFloat_ReturnValue_2;        // 0x04A0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_4A1[0x3];                                      // 0x04A1(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_GetMoveActionInputValue_Value;            // 0x04A4(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Greater_FloatFloat_ReturnValue_1;         // 0x04A8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BooleanAND_ReturnValue_2;                 // 0x04A9(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BooleanAND_ReturnValue_3;                 // 0x04AA(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(COMP_MoveControlManager_C_UpdateCrouch) == 0x000008, "Wrong alignment on COMP_MoveControlManager_C_UpdateCrouch");
static_assert(sizeof(COMP_MoveControlManager_C_UpdateCrouch) == 0x0004B0, "Wrong size on COMP_MoveControlManager_C_UpdateCrouch");
static_assert(offsetof(COMP_MoveControlManager_C_UpdateCrouch, DeltaTime) == 0x000000, "Member 'COMP_MoveControlManager_C_UpdateCrouch::DeltaTime' has a wrong offset!");
static_assert(offsetof(COMP_MoveControlManager_C_UpdateCrouch, NewLeanPivotHeight) == 0x000004, "Member 'COMP_MoveControlManager_C_UpdateCrouch::NewLeanPivotHeight' has a wrong offset!");
static_assert(offsetof(COMP_MoveControlManager_C_UpdateCrouch, LastLeanPivotHeight) == 0x000008, "Member 'COMP_MoveControlManager_C_UpdateCrouch::LastLeanPivotHeight' has a wrong offset!");
static_assert(offsetof(COMP_MoveControlManager_C_UpdateCrouch, MinCrouchProgress) == 0x00000C, "Member 'COMP_MoveControlManager_C_UpdateCrouch::MinCrouchProgress' has a wrong offset!");
static_assert(offsetof(COMP_MoveControlManager_C_UpdateCrouch, IsDuckingDownInAir) == 0x000010, "Member 'COMP_MoveControlManager_C_UpdateCrouch::IsDuckingDownInAir' has a wrong offset!");
static_assert(offsetof(COMP_MoveControlManager_C_UpdateCrouch, IsDuckingDown) == 0x000011, "Member 'COMP_MoveControlManager_C_UpdateCrouch::IsDuckingDown' has a wrong offset!");
static_assert(offsetof(COMP_MoveControlManager_C_UpdateCrouch, PlayerCapsule) == 0x000018, "Member 'COMP_MoveControlManager_C_UpdateCrouch::PlayerCapsule' has a wrong offset!");
static_assert(offsetof(COMP_MoveControlManager_C_UpdateCrouch, CrouchSpeedModCategory) == 0x000020, "Member 'COMP_MoveControlManager_C_UpdateCrouch::CrouchSpeedModCategory' has a wrong offset!");
static_assert(offsetof(COMP_MoveControlManager_C_UpdateCrouch, CallFunc_GetScaledCapsuleHalfHeight_ReturnValue) == 0x000028, "Member 'COMP_MoveControlManager_C_UpdateCrouch::CallFunc_GetScaledCapsuleHalfHeight_ReturnValue' has a wrong offset!");
static_assert(offsetof(COMP_MoveControlManager_C_UpdateCrouch, CallFunc_GreaterEqual_FloatFloat_ReturnValue) == 0x00002C, "Member 'COMP_MoveControlManager_C_UpdateCrouch::CallFunc_GreaterEqual_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(COMP_MoveControlManager_C_UpdateCrouch, CallFunc_EqualEqual_FloatFloat_ReturnValue) == 0x00002D, "Member 'COMP_MoveControlManager_C_UpdateCrouch::CallFunc_EqualEqual_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(COMP_MoveControlManager_C_UpdateCrouch, CallFunc_Ease_ReturnValue) == 0x000030, "Member 'COMP_MoveControlManager_C_UpdateCrouch::CallFunc_Ease_ReturnValue' has a wrong offset!");
static_assert(offsetof(COMP_MoveControlManager_C_UpdateCrouch, CallFunc_Multiply_FloatFloat_ReturnValue) == 0x000034, "Member 'COMP_MoveControlManager_C_UpdateCrouch::CallFunc_Multiply_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(COMP_MoveControlManager_C_UpdateCrouch, CallFunc_Not_PreBool_ReturnValue) == 0x000038, "Member 'COMP_MoveControlManager_C_UpdateCrouch::CallFunc_Not_PreBool_ReturnValue' has a wrong offset!");
static_assert(offsetof(COMP_MoveControlManager_C_UpdateCrouch, CallFunc_BooleanAND_ReturnValue) == 0x000039, "Member 'COMP_MoveControlManager_C_UpdateCrouch::CallFunc_BooleanAND_ReturnValue' has a wrong offset!");
static_assert(offsetof(COMP_MoveControlManager_C_UpdateCrouch, CallFunc_MakeVector_ReturnValue) == 0x00003C, "Member 'COMP_MoveControlManager_C_UpdateCrouch::CallFunc_MakeVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(COMP_MoveControlManager_C_UpdateCrouch, CallFunc_GetUnscaledCapsuleHalfHeight_ReturnValue) == 0x000048, "Member 'COMP_MoveControlManager_C_UpdateCrouch::CallFunc_GetUnscaledCapsuleHalfHeight_ReturnValue' has a wrong offset!");
static_assert(offsetof(COMP_MoveControlManager_C_UpdateCrouch, CallFunc_Subtract_FloatFloat_ReturnValue) == 0x00004C, "Member 'COMP_MoveControlManager_C_UpdateCrouch::CallFunc_Subtract_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(COMP_MoveControlManager_C_UpdateCrouch, CallFunc_Multiply_FloatFloat_ReturnValue_1) == 0x000050, "Member 'COMP_MoveControlManager_C_UpdateCrouch::CallFunc_Multiply_FloatFloat_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(COMP_MoveControlManager_C_UpdateCrouch, CallFunc_Subtract_FloatFloat_ReturnValue_1) == 0x000054, "Member 'COMP_MoveControlManager_C_UpdateCrouch::CallFunc_Subtract_FloatFloat_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(COMP_MoveControlManager_C_UpdateCrouch, CallFunc_Add_FloatFloat_ReturnValue) == 0x000058, "Member 'COMP_MoveControlManager_C_UpdateCrouch::CallFunc_Add_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(COMP_MoveControlManager_C_UpdateCrouch, CallFunc_Ease_ReturnValue_1) == 0x00005C, "Member 'COMP_MoveControlManager_C_UpdateCrouch::CallFunc_Ease_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(COMP_MoveControlManager_C_UpdateCrouch, CallFunc_Subtract_FloatFloat_ReturnValue_2) == 0x000060, "Member 'COMP_MoveControlManager_C_UpdateCrouch::CallFunc_Subtract_FloatFloat_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(COMP_MoveControlManager_C_UpdateCrouch, CallFunc_K2_GetActorLocation_ReturnValue) == 0x000064, "Member 'COMP_MoveControlManager_C_UpdateCrouch::CallFunc_K2_GetActorLocation_ReturnValue' has a wrong offset!");
static_assert(offsetof(COMP_MoveControlManager_C_UpdateCrouch, CallFunc_BreakVector_X) == 0x000070, "Member 'COMP_MoveControlManager_C_UpdateCrouch::CallFunc_BreakVector_X' has a wrong offset!");
static_assert(offsetof(COMP_MoveControlManager_C_UpdateCrouch, CallFunc_BreakVector_Y) == 0x000074, "Member 'COMP_MoveControlManager_C_UpdateCrouch::CallFunc_BreakVector_Y' has a wrong offset!");
static_assert(offsetof(COMP_MoveControlManager_C_UpdateCrouch, CallFunc_BreakVector_Z) == 0x000078, "Member 'COMP_MoveControlManager_C_UpdateCrouch::CallFunc_BreakVector_Z' has a wrong offset!");
static_assert(offsetof(COMP_MoveControlManager_C_UpdateCrouch, CallFunc_GetScaledCapsuleHalfHeight_ReturnValue_1) == 0x00007C, "Member 'COMP_MoveControlManager_C_UpdateCrouch::CallFunc_GetScaledCapsuleHalfHeight_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(COMP_MoveControlManager_C_UpdateCrouch, CallFunc_Subtract_FloatFloat_ReturnValue_3) == 0x000080, "Member 'COMP_MoveControlManager_C_UpdateCrouch::CallFunc_Subtract_FloatFloat_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(COMP_MoveControlManager_C_UpdateCrouch, CallFunc_Add_FloatFloat_ReturnValue_1) == 0x000084, "Member 'COMP_MoveControlManager_C_UpdateCrouch::CallFunc_Add_FloatFloat_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(COMP_MoveControlManager_C_UpdateCrouch, CallFunc_GetScaledCapsuleHalfHeight_ReturnValue_2) == 0x000088, "Member 'COMP_MoveControlManager_C_UpdateCrouch::CallFunc_GetScaledCapsuleHalfHeight_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(COMP_MoveControlManager_C_UpdateCrouch, CallFunc_MakeVector_ReturnValue_1) == 0x00008C, "Member 'COMP_MoveControlManager_C_UpdateCrouch::CallFunc_MakeVector_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(COMP_MoveControlManager_C_UpdateCrouch, CallFunc_Subtract_FloatFloat_ReturnValue_4) == 0x000098, "Member 'COMP_MoveControlManager_C_UpdateCrouch::CallFunc_Subtract_FloatFloat_ReturnValue_4' has a wrong offset!");
static_assert(offsetof(COMP_MoveControlManager_C_UpdateCrouch, Temp_float_Variable) == 0x00009C, "Member 'COMP_MoveControlManager_C_UpdateCrouch::Temp_float_Variable' has a wrong offset!");
static_assert(offsetof(COMP_MoveControlManager_C_UpdateCrouch, CallFunc_K2_GetActorLocation_ReturnValue_1) == 0x0000A0, "Member 'COMP_MoveControlManager_C_UpdateCrouch::CallFunc_K2_GetActorLocation_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(COMP_MoveControlManager_C_UpdateCrouch, CallFunc_BreakVector_X_1) == 0x0000AC, "Member 'COMP_MoveControlManager_C_UpdateCrouch::CallFunc_BreakVector_X_1' has a wrong offset!");
static_assert(offsetof(COMP_MoveControlManager_C_UpdateCrouch, CallFunc_BreakVector_Y_1) == 0x0000B0, "Member 'COMP_MoveControlManager_C_UpdateCrouch::CallFunc_BreakVector_Y_1' has a wrong offset!");
static_assert(offsetof(COMP_MoveControlManager_C_UpdateCrouch, CallFunc_BreakVector_Z_1) == 0x0000B4, "Member 'COMP_MoveControlManager_C_UpdateCrouch::CallFunc_BreakVector_Z_1' has a wrong offset!");
static_assert(offsetof(COMP_MoveControlManager_C_UpdateCrouch, CallFunc_Not_PreBool_ReturnValue_1) == 0x0000B8, "Member 'COMP_MoveControlManager_C_UpdateCrouch::CallFunc_Not_PreBool_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(COMP_MoveControlManager_C_UpdateCrouch, CallFunc_Add_FloatFloat_ReturnValue_2) == 0x0000BC, "Member 'COMP_MoveControlManager_C_UpdateCrouch::CallFunc_Add_FloatFloat_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(COMP_MoveControlManager_C_UpdateCrouch, CallFunc_MakeVector_ReturnValue_2) == 0x0000C0, "Member 'COMP_MoveControlManager_C_UpdateCrouch::CallFunc_MakeVector_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(COMP_MoveControlManager_C_UpdateCrouch, CallFunc_MakeLiteralByte_ReturnValue) == 0x0000CC, "Member 'COMP_MoveControlManager_C_UpdateCrouch::CallFunc_MakeLiteralByte_ReturnValue' has a wrong offset!");
static_assert(offsetof(COMP_MoveControlManager_C_UpdateCrouch, CallFunc_Conv_ByteToInt_ReturnValue) == 0x0000D0, "Member 'COMP_MoveControlManager_C_UpdateCrouch::CallFunc_Conv_ByteToInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(COMP_MoveControlManager_C_UpdateCrouch, CallFunc_Subtract_FloatFloat_ReturnValue_5) == 0x0000D4, "Member 'COMP_MoveControlManager_C_UpdateCrouch::CallFunc_Subtract_FloatFloat_ReturnValue_5' has a wrong offset!");
static_assert(offsetof(COMP_MoveControlManager_C_UpdateCrouch, CallFunc_MakeVector_ReturnValue_3) == 0x0000D8, "Member 'COMP_MoveControlManager_C_UpdateCrouch::CallFunc_MakeVector_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(COMP_MoveControlManager_C_UpdateCrouch, CallFunc_K2_AddActorWorldOffset_SweepHitResult) == 0x0000E4, "Member 'COMP_MoveControlManager_C_UpdateCrouch::CallFunc_K2_AddActorWorldOffset_SweepHitResult' has a wrong offset!");
static_assert(offsetof(COMP_MoveControlManager_C_UpdateCrouch, CallFunc_BreakVector_X_2) == 0x00016C, "Member 'COMP_MoveControlManager_C_UpdateCrouch::CallFunc_BreakVector_X_2' has a wrong offset!");
static_assert(offsetof(COMP_MoveControlManager_C_UpdateCrouch, CallFunc_BreakVector_Y_2) == 0x000170, "Member 'COMP_MoveControlManager_C_UpdateCrouch::CallFunc_BreakVector_Y_2' has a wrong offset!");
static_assert(offsetof(COMP_MoveControlManager_C_UpdateCrouch, CallFunc_BreakVector_Z_2) == 0x000174, "Member 'COMP_MoveControlManager_C_UpdateCrouch::CallFunc_BreakVector_Z_2' has a wrong offset!");
static_assert(offsetof(COMP_MoveControlManager_C_UpdateCrouch, Temp_int_Variable) == 0x000178, "Member 'COMP_MoveControlManager_C_UpdateCrouch::Temp_int_Variable' has a wrong offset!");
static_assert(offsetof(COMP_MoveControlManager_C_UpdateCrouch, CallFunc_NotEqual_FloatFloat_ReturnValue) == 0x00017C, "Member 'COMP_MoveControlManager_C_UpdateCrouch::CallFunc_NotEqual_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(COMP_MoveControlManager_C_UpdateCrouch, CallFunc_UpdateSlump_MinCrouchProgress) == 0x000180, "Member 'COMP_MoveControlManager_C_UpdateCrouch::CallFunc_UpdateSlump_MinCrouchProgress' has a wrong offset!");
static_assert(offsetof(COMP_MoveControlManager_C_UpdateCrouch, CallFunc_Multiply_FloatFloat_ReturnValue_2) == 0x000184, "Member 'COMP_MoveControlManager_C_UpdateCrouch::CallFunc_Multiply_FloatFloat_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(COMP_MoveControlManager_C_UpdateCrouch, CallFunc_Not_PreBool_ReturnValue_2) == 0x000188, "Member 'COMP_MoveControlManager_C_UpdateCrouch::CallFunc_Not_PreBool_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(COMP_MoveControlManager_C_UpdateCrouch, CallFunc_Less_FloatFloat_ReturnValue) == 0x000189, "Member 'COMP_MoveControlManager_C_UpdateCrouch::CallFunc_Less_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(COMP_MoveControlManager_C_UpdateCrouch, CallFunc_BooleanAND_ReturnValue_1) == 0x00018A, "Member 'COMP_MoveControlManager_C_UpdateCrouch::CallFunc_BooleanAND_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(COMP_MoveControlManager_C_UpdateCrouch, Temp_int_Variable_1) == 0x00018C, "Member 'COMP_MoveControlManager_C_UpdateCrouch::Temp_int_Variable_1' has a wrong offset!");
static_assert(offsetof(COMP_MoveControlManager_C_UpdateCrouch, CallFunc_NotEqual_BoolBool_ReturnValue) == 0x000190, "Member 'COMP_MoveControlManager_C_UpdateCrouch::CallFunc_NotEqual_BoolBool_ReturnValue' has a wrong offset!");
static_assert(offsetof(COMP_MoveControlManager_C_UpdateCrouch, Temp_bool_Variable) == 0x000191, "Member 'COMP_MoveControlManager_C_UpdateCrouch::Temp_bool_Variable' has a wrong offset!");
static_assert(offsetof(COMP_MoveControlManager_C_UpdateCrouch, K2Node_Select_Default) == 0x000194, "Member 'COMP_MoveControlManager_C_UpdateCrouch::K2Node_Select_Default' has a wrong offset!");
static_assert(offsetof(COMP_MoveControlManager_C_UpdateCrouch, CallFunc_Greater_FloatFloat_ReturnValue) == 0x000198, "Member 'COMP_MoveControlManager_C_UpdateCrouch::CallFunc_Greater_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(COMP_MoveControlManager_C_UpdateCrouch, CallFunc_BooleanOR_ReturnValue) == 0x000199, "Member 'COMP_MoveControlManager_C_UpdateCrouch::CallFunc_BooleanOR_ReturnValue' has a wrong offset!");
static_assert(offsetof(COMP_MoveControlManager_C_UpdateCrouch, CallFunc_ExpireModsMatchingCategory_ReturnValue) == 0x00019C, "Member 'COMP_MoveControlManager_C_UpdateCrouch::CallFunc_ExpireModsMatchingCategory_ReturnValue' has a wrong offset!");
static_assert(offsetof(COMP_MoveControlManager_C_UpdateCrouch, CallFunc_ApplyMod_ReturnValue) == 0x0001A0, "Member 'COMP_MoveControlManager_C_UpdateCrouch::CallFunc_ApplyMod_ReturnValue' has a wrong offset!");
static_assert(offsetof(COMP_MoveControlManager_C_UpdateCrouch, CallFunc_Multiply_FloatFloat_ReturnValue_3) == 0x0001A8, "Member 'COMP_MoveControlManager_C_UpdateCrouch::CallFunc_Multiply_FloatFloat_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(COMP_MoveControlManager_C_UpdateCrouch, CallFunc_MakeVector_ReturnValue_4) == 0x0001AC, "Member 'COMP_MoveControlManager_C_UpdateCrouch::CallFunc_MakeVector_ReturnValue_4' has a wrong offset!");
static_assert(offsetof(COMP_MoveControlManager_C_UpdateCrouch, CallFunc_K2_SetRelativeLocation_SweepHitResult) == 0x0001B8, "Member 'COMP_MoveControlManager_C_UpdateCrouch::CallFunc_K2_SetRelativeLocation_SweepHitResult' has a wrong offset!");
static_assert(offsetof(COMP_MoveControlManager_C_UpdateCrouch, CallFunc_MakeVector_ReturnValue_5) == 0x000240, "Member 'COMP_MoveControlManager_C_UpdateCrouch::CallFunc_MakeVector_ReturnValue_5' has a wrong offset!");
static_assert(offsetof(COMP_MoveControlManager_C_UpdateCrouch, CallFunc_K2_SetRelativeLocation_SweepHitResult_1) == 0x00024C, "Member 'COMP_MoveControlManager_C_UpdateCrouch::CallFunc_K2_SetRelativeLocation_SweepHitResult_1' has a wrong offset!");
static_assert(offsetof(COMP_MoveControlManager_C_UpdateCrouch, CallFunc_Not_PreBool_ReturnValue_3) == 0x0002D4, "Member 'COMP_MoveControlManager_C_UpdateCrouch::CallFunc_Not_PreBool_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(COMP_MoveControlManager_C_UpdateCrouch, CallFunc_K2_SetRelativeLocation_SweepHitResult_2) == 0x0002D8, "Member 'COMP_MoveControlManager_C_UpdateCrouch::CallFunc_K2_SetRelativeLocation_SweepHitResult_2' has a wrong offset!");
static_assert(offsetof(COMP_MoveControlManager_C_UpdateCrouch, CallFunc_NotEqual_ByteByte_ReturnValue) == 0x000360, "Member 'COMP_MoveControlManager_C_UpdateCrouch::CallFunc_NotEqual_ByteByte_ReturnValue' has a wrong offset!");
static_assert(offsetof(COMP_MoveControlManager_C_UpdateCrouch, Temp_bool_Variable_1) == 0x000361, "Member 'COMP_MoveControlManager_C_UpdateCrouch::Temp_bool_Variable_1' has a wrong offset!");
static_assert(offsetof(COMP_MoveControlManager_C_UpdateCrouch, CallFunc_BooleanOR_ReturnValue_1) == 0x000362, "Member 'COMP_MoveControlManager_C_UpdateCrouch::CallFunc_BooleanOR_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(COMP_MoveControlManager_C_UpdateCrouch, K2Node_Select_Default_1) == 0x000364, "Member 'COMP_MoveControlManager_C_UpdateCrouch::K2Node_Select_Default_1' has a wrong offset!");
static_assert(offsetof(COMP_MoveControlManager_C_UpdateCrouch, CallFunc_Divide_FloatFloat_ReturnValue) == 0x000368, "Member 'COMP_MoveControlManager_C_UpdateCrouch::CallFunc_Divide_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(COMP_MoveControlManager_C_UpdateCrouch, CallFunc_Multiply_IntFloat_ReturnValue) == 0x00036C, "Member 'COMP_MoveControlManager_C_UpdateCrouch::CallFunc_Multiply_IntFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(COMP_MoveControlManager_C_UpdateCrouch, CallFunc_K2_SetActorLocation_SweepHitResult) == 0x000370, "Member 'COMP_MoveControlManager_C_UpdateCrouch::CallFunc_K2_SetActorLocation_SweepHitResult' has a wrong offset!");
static_assert(offsetof(COMP_MoveControlManager_C_UpdateCrouch, CallFunc_K2_SetActorLocation_ReturnValue) == 0x0003F8, "Member 'COMP_MoveControlManager_C_UpdateCrouch::CallFunc_K2_SetActorLocation_ReturnValue' has a wrong offset!");
static_assert(offsetof(COMP_MoveControlManager_C_UpdateCrouch, CallFunc_CanStandUp_Result) == 0x0003F9, "Member 'COMP_MoveControlManager_C_UpdateCrouch::CallFunc_CanStandUp_Result' has a wrong offset!");
static_assert(offsetof(COMP_MoveControlManager_C_UpdateCrouch, CallFunc_K2_SetActorLocation_SweepHitResult_1) == 0x0003FC, "Member 'COMP_MoveControlManager_C_UpdateCrouch::CallFunc_K2_SetActorLocation_SweepHitResult_1' has a wrong offset!");
static_assert(offsetof(COMP_MoveControlManager_C_UpdateCrouch, CallFunc_K2_SetActorLocation_ReturnValue_1) == 0x000484, "Member 'COMP_MoveControlManager_C_UpdateCrouch::CallFunc_K2_SetActorLocation_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(COMP_MoveControlManager_C_UpdateCrouch, CallFunc_Multiply_FloatFloat_ReturnValue_4) == 0x000488, "Member 'COMP_MoveControlManager_C_UpdateCrouch::CallFunc_Multiply_FloatFloat_ReturnValue_4' has a wrong offset!");
static_assert(offsetof(COMP_MoveControlManager_C_UpdateCrouch, CallFunc_NotEqual_FloatFloat_ReturnValue_1) == 0x00048C, "Member 'COMP_MoveControlManager_C_UpdateCrouch::CallFunc_NotEqual_FloatFloat_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(COMP_MoveControlManager_C_UpdateCrouch, CallFunc_Not_PreBool_ReturnValue_4) == 0x00048D, "Member 'COMP_MoveControlManager_C_UpdateCrouch::CallFunc_Not_PreBool_ReturnValue_4' has a wrong offset!");
static_assert(offsetof(COMP_MoveControlManager_C_UpdateCrouch, CallFunc_HasQueuedOrActiveCinematicAction_Result) == 0x00048E, "Member 'COMP_MoveControlManager_C_UpdateCrouch::CallFunc_HasQueuedOrActiveCinematicAction_Result' has a wrong offset!");
static_assert(offsetof(COMP_MoveControlManager_C_UpdateCrouch, CallFunc_Not_PreBool_ReturnValue_5) == 0x00048F, "Member 'COMP_MoveControlManager_C_UpdateCrouch::CallFunc_Not_PreBool_ReturnValue_5' has a wrong offset!");
static_assert(offsetof(COMP_MoveControlManager_C_UpdateCrouch, CallFunc_EqualEqual_FloatFloat_ReturnValue_1) == 0x000490, "Member 'COMP_MoveControlManager_C_UpdateCrouch::CallFunc_EqualEqual_FloatFloat_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(COMP_MoveControlManager_C_UpdateCrouch, CallFunc_Add_FloatFloat_ReturnValue_3) == 0x000494, "Member 'COMP_MoveControlManager_C_UpdateCrouch::CallFunc_Add_FloatFloat_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(COMP_MoveControlManager_C_UpdateCrouch, CallFunc_BooleanOR_ReturnValue_2) == 0x000498, "Member 'COMP_MoveControlManager_C_UpdateCrouch::CallFunc_BooleanOR_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(COMP_MoveControlManager_C_UpdateCrouch, CallFunc_FClamp_ReturnValue) == 0x00049C, "Member 'COMP_MoveControlManager_C_UpdateCrouch::CallFunc_FClamp_ReturnValue' has a wrong offset!");
static_assert(offsetof(COMP_MoveControlManager_C_UpdateCrouch, CallFunc_NotEqual_FloatFloat_ReturnValue_2) == 0x0004A0, "Member 'COMP_MoveControlManager_C_UpdateCrouch::CallFunc_NotEqual_FloatFloat_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(COMP_MoveControlManager_C_UpdateCrouch, CallFunc_GetMoveActionInputValue_Value) == 0x0004A4, "Member 'COMP_MoveControlManager_C_UpdateCrouch::CallFunc_GetMoveActionInputValue_Value' has a wrong offset!");
static_assert(offsetof(COMP_MoveControlManager_C_UpdateCrouch, CallFunc_Greater_FloatFloat_ReturnValue_1) == 0x0004A8, "Member 'COMP_MoveControlManager_C_UpdateCrouch::CallFunc_Greater_FloatFloat_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(COMP_MoveControlManager_C_UpdateCrouch, CallFunc_BooleanAND_ReturnValue_2) == 0x0004A9, "Member 'COMP_MoveControlManager_C_UpdateCrouch::CallFunc_BooleanAND_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(COMP_MoveControlManager_C_UpdateCrouch, CallFunc_BooleanAND_ReturnValue_3) == 0x0004AA, "Member 'COMP_MoveControlManager_C_UpdateCrouch::CallFunc_BooleanAND_ReturnValue_3' has a wrong offset!");

// Function COMP_MoveControlManager.COMP_MoveControlManager_C.UpdateSlump
// 0x003C (0x003C - 0x0000)
struct COMP_MoveControlManager_C_UpdateSlump final
{
public:
	float                                         MinCrouchProgress;                                 // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         SlumpProgress;                                     // 0x0004(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         ElapsedSlumpTime;                                  // 0x0008(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_GreaterEqual_FloatFloat_ReturnValue;      // 0x000C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_D[0x3];                                        // 0x000D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_GetFloatValue_ReturnValue;                // 0x0010(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_GetFloatValue_ReturnValue_1;              // 0x0014(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Lerp_ReturnValue;                         // 0x0018(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Multiply_FloatFloat_ReturnValue;          // 0x001C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Multiply_FloatFloat_ReturnValue_1;        // 0x0020(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_MapRangeClamped_ReturnValue;              // 0x0024(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Divide_FloatFloat_ReturnValue;            // 0x0028(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_GetGameTimeInSeconds_ReturnValue;         // 0x002C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_FMin_ReturnValue;                         // 0x0030(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Subtract_FloatFloat_ReturnValue;          // 0x0034(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Greater_FloatFloat_ReturnValue;           // 0x0038(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(COMP_MoveControlManager_C_UpdateSlump) == 0x000004, "Wrong alignment on COMP_MoveControlManager_C_UpdateSlump");
static_assert(sizeof(COMP_MoveControlManager_C_UpdateSlump) == 0x00003C, "Wrong size on COMP_MoveControlManager_C_UpdateSlump");
static_assert(offsetof(COMP_MoveControlManager_C_UpdateSlump, MinCrouchProgress) == 0x000000, "Member 'COMP_MoveControlManager_C_UpdateSlump::MinCrouchProgress' has a wrong offset!");
static_assert(offsetof(COMP_MoveControlManager_C_UpdateSlump, SlumpProgress) == 0x000004, "Member 'COMP_MoveControlManager_C_UpdateSlump::SlumpProgress' has a wrong offset!");
static_assert(offsetof(COMP_MoveControlManager_C_UpdateSlump, ElapsedSlumpTime) == 0x000008, "Member 'COMP_MoveControlManager_C_UpdateSlump::ElapsedSlumpTime' has a wrong offset!");
static_assert(offsetof(COMP_MoveControlManager_C_UpdateSlump, CallFunc_GreaterEqual_FloatFloat_ReturnValue) == 0x00000C, "Member 'COMP_MoveControlManager_C_UpdateSlump::CallFunc_GreaterEqual_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(COMP_MoveControlManager_C_UpdateSlump, CallFunc_GetFloatValue_ReturnValue) == 0x000010, "Member 'COMP_MoveControlManager_C_UpdateSlump::CallFunc_GetFloatValue_ReturnValue' has a wrong offset!");
static_assert(offsetof(COMP_MoveControlManager_C_UpdateSlump, CallFunc_GetFloatValue_ReturnValue_1) == 0x000014, "Member 'COMP_MoveControlManager_C_UpdateSlump::CallFunc_GetFloatValue_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(COMP_MoveControlManager_C_UpdateSlump, CallFunc_Lerp_ReturnValue) == 0x000018, "Member 'COMP_MoveControlManager_C_UpdateSlump::CallFunc_Lerp_ReturnValue' has a wrong offset!");
static_assert(offsetof(COMP_MoveControlManager_C_UpdateSlump, CallFunc_Multiply_FloatFloat_ReturnValue) == 0x00001C, "Member 'COMP_MoveControlManager_C_UpdateSlump::CallFunc_Multiply_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(COMP_MoveControlManager_C_UpdateSlump, CallFunc_Multiply_FloatFloat_ReturnValue_1) == 0x000020, "Member 'COMP_MoveControlManager_C_UpdateSlump::CallFunc_Multiply_FloatFloat_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(COMP_MoveControlManager_C_UpdateSlump, CallFunc_MapRangeClamped_ReturnValue) == 0x000024, "Member 'COMP_MoveControlManager_C_UpdateSlump::CallFunc_MapRangeClamped_ReturnValue' has a wrong offset!");
static_assert(offsetof(COMP_MoveControlManager_C_UpdateSlump, CallFunc_Divide_FloatFloat_ReturnValue) == 0x000028, "Member 'COMP_MoveControlManager_C_UpdateSlump::CallFunc_Divide_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(COMP_MoveControlManager_C_UpdateSlump, CallFunc_GetGameTimeInSeconds_ReturnValue) == 0x00002C, "Member 'COMP_MoveControlManager_C_UpdateSlump::CallFunc_GetGameTimeInSeconds_ReturnValue' has a wrong offset!");
static_assert(offsetof(COMP_MoveControlManager_C_UpdateSlump, CallFunc_FMin_ReturnValue) == 0x000030, "Member 'COMP_MoveControlManager_C_UpdateSlump::CallFunc_FMin_ReturnValue' has a wrong offset!");
static_assert(offsetof(COMP_MoveControlManager_C_UpdateSlump, CallFunc_Subtract_FloatFloat_ReturnValue) == 0x000034, "Member 'COMP_MoveControlManager_C_UpdateSlump::CallFunc_Subtract_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(COMP_MoveControlManager_C_UpdateSlump, CallFunc_Greater_FloatFloat_ReturnValue) == 0x000038, "Member 'COMP_MoveControlManager_C_UpdateSlump::CallFunc_Greater_FloatFloat_ReturnValue' has a wrong offset!");

// Function COMP_MoveControlManager.COMP_MoveControlManager_C.UpdateAim
// 0x00C8 (0x00C8 - 0x0000)
struct COMP_MoveControlManager_C_UpdateAim final
{
public:
	float                                         DeltaTime;                                         // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         DefaultFOV;                                        // 0x0004(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         DeltaSign;                                         // 0x0008(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         TargetAimProgress;                                 // 0x000C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CanAimWithEquippedWeapon;                          // 0x0010(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UITEM_WeaponBase_C*                     EquippedWeapon;                                    // 0x0018(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_GetFOV_Result;                            // 0x0020(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_24[0x4];                                       // 0x0024(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class AController*                            CallFunc_GetController_ReturnValue;                // 0x0028(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class ACON_Hacker_C*                          K2Node_DynamicCast_AsCON_Hacker;                   // 0x0030(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0038(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsUsingGamepad_Result;                    // 0x0039(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Temp_bool_Variable;                                // 0x003A(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_CanAimWithWeapon_Result;                  // 0x003B(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_3C[0x4];                                       // 0x003C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UITEM_WeaponBase_C*                     CallFunc_GetEquippedWeapon_Weapon;                 // 0x0040(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UAnimInstance*                          CallFunc_GetAnimInstance_ReturnValue;              // 0x0048(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TScriptInterface<class IINTERF_ANIM_Hacker_C> K2Node_DynamicCast_AsINTERF_ANIM_Hacker;           // 0x0050(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          K2Node_DynamicCast_bSuccess_1;                     // 0x0060(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_61[0x3];                                       // 0x0061(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_Multiply_FloatFloat_ReturnValue;          // 0x0064(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_SetAimProgress_Result;                    // 0x0068(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_69[0x3];                                       // 0x0069(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_Ease_ReturnValue;                         // 0x006C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0070(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_71[0x3];                                       // 0x0071(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_ExpireModsWithCategory_ReturnValue;       // 0x0074(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Temp_float_Variable;                               // 0x0078(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_7C[0x4];                                       // 0x007C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UAttribMod*                             CallFunc_ApplyMod_ReturnValue;                     // 0x0080(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Multiply_FloatFloat_ReturnValue_1;        // 0x0088(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Multiply_FloatFloat_ReturnValue_2;        // 0x008C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Add_FloatFloat_ReturnValue;               // 0x0090(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_FClamp_ReturnValue;                       // 0x0094(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_ExpireModsWithCategory_ReturnValue_1;     // 0x0098(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_9C[0x4];                                       // 0x009C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UAttribMod*                             CallFunc_ApplyMod_ReturnValue_1;                   // 0x00A0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_FloatFloat_ReturnValue;              // 0x00A8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_NotEqual_FloatFloat_ReturnValue;          // 0x00A9(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Not_PreBool_ReturnValue;                  // 0x00AA(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_AB[0x1];                                       // 0x00AB(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         Temp_float_Variable_1;                             // 0x00AC(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Greater_FloatFloat_ReturnValue;           // 0x00B0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_B1[0x3];                                       // 0x00B1(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         K2Node_Select_Default;                             // 0x00B4(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_GetMoveActionInputValue_Value;            // 0x00B8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_GreaterEqual_FloatFloat_ReturnValue;      // 0x00BC(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BooleanAND_ReturnValue;                   // 0x00BD(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BooleanAND_ReturnValue_1;                 // 0x00BE(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_BF[0x1];                                       // 0x00BF(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_Conv_BoolToFloat_ReturnValue;             // 0x00C0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(COMP_MoveControlManager_C_UpdateAim) == 0x000008, "Wrong alignment on COMP_MoveControlManager_C_UpdateAim");
static_assert(sizeof(COMP_MoveControlManager_C_UpdateAim) == 0x0000C8, "Wrong size on COMP_MoveControlManager_C_UpdateAim");
static_assert(offsetof(COMP_MoveControlManager_C_UpdateAim, DeltaTime) == 0x000000, "Member 'COMP_MoveControlManager_C_UpdateAim::DeltaTime' has a wrong offset!");
static_assert(offsetof(COMP_MoveControlManager_C_UpdateAim, DefaultFOV) == 0x000004, "Member 'COMP_MoveControlManager_C_UpdateAim::DefaultFOV' has a wrong offset!");
static_assert(offsetof(COMP_MoveControlManager_C_UpdateAim, DeltaSign) == 0x000008, "Member 'COMP_MoveControlManager_C_UpdateAim::DeltaSign' has a wrong offset!");
static_assert(offsetof(COMP_MoveControlManager_C_UpdateAim, TargetAimProgress) == 0x00000C, "Member 'COMP_MoveControlManager_C_UpdateAim::TargetAimProgress' has a wrong offset!");
static_assert(offsetof(COMP_MoveControlManager_C_UpdateAim, CanAimWithEquippedWeapon) == 0x000010, "Member 'COMP_MoveControlManager_C_UpdateAim::CanAimWithEquippedWeapon' has a wrong offset!");
static_assert(offsetof(COMP_MoveControlManager_C_UpdateAim, EquippedWeapon) == 0x000018, "Member 'COMP_MoveControlManager_C_UpdateAim::EquippedWeapon' has a wrong offset!");
static_assert(offsetof(COMP_MoveControlManager_C_UpdateAim, CallFunc_GetFOV_Result) == 0x000020, "Member 'COMP_MoveControlManager_C_UpdateAim::CallFunc_GetFOV_Result' has a wrong offset!");
static_assert(offsetof(COMP_MoveControlManager_C_UpdateAim, CallFunc_GetController_ReturnValue) == 0x000028, "Member 'COMP_MoveControlManager_C_UpdateAim::CallFunc_GetController_ReturnValue' has a wrong offset!");
static_assert(offsetof(COMP_MoveControlManager_C_UpdateAim, K2Node_DynamicCast_AsCON_Hacker) == 0x000030, "Member 'COMP_MoveControlManager_C_UpdateAim::K2Node_DynamicCast_AsCON_Hacker' has a wrong offset!");
static_assert(offsetof(COMP_MoveControlManager_C_UpdateAim, K2Node_DynamicCast_bSuccess) == 0x000038, "Member 'COMP_MoveControlManager_C_UpdateAim::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(COMP_MoveControlManager_C_UpdateAim, CallFunc_IsUsingGamepad_Result) == 0x000039, "Member 'COMP_MoveControlManager_C_UpdateAim::CallFunc_IsUsingGamepad_Result' has a wrong offset!");
static_assert(offsetof(COMP_MoveControlManager_C_UpdateAim, Temp_bool_Variable) == 0x00003A, "Member 'COMP_MoveControlManager_C_UpdateAim::Temp_bool_Variable' has a wrong offset!");
static_assert(offsetof(COMP_MoveControlManager_C_UpdateAim, CallFunc_CanAimWithWeapon_Result) == 0x00003B, "Member 'COMP_MoveControlManager_C_UpdateAim::CallFunc_CanAimWithWeapon_Result' has a wrong offset!");
static_assert(offsetof(COMP_MoveControlManager_C_UpdateAim, CallFunc_GetEquippedWeapon_Weapon) == 0x000040, "Member 'COMP_MoveControlManager_C_UpdateAim::CallFunc_GetEquippedWeapon_Weapon' has a wrong offset!");
static_assert(offsetof(COMP_MoveControlManager_C_UpdateAim, CallFunc_GetAnimInstance_ReturnValue) == 0x000048, "Member 'COMP_MoveControlManager_C_UpdateAim::CallFunc_GetAnimInstance_ReturnValue' has a wrong offset!");
static_assert(offsetof(COMP_MoveControlManager_C_UpdateAim, K2Node_DynamicCast_AsINTERF_ANIM_Hacker) == 0x000050, "Member 'COMP_MoveControlManager_C_UpdateAim::K2Node_DynamicCast_AsINTERF_ANIM_Hacker' has a wrong offset!");
static_assert(offsetof(COMP_MoveControlManager_C_UpdateAim, K2Node_DynamicCast_bSuccess_1) == 0x000060, "Member 'COMP_MoveControlManager_C_UpdateAim::K2Node_DynamicCast_bSuccess_1' has a wrong offset!");
static_assert(offsetof(COMP_MoveControlManager_C_UpdateAim, CallFunc_Multiply_FloatFloat_ReturnValue) == 0x000064, "Member 'COMP_MoveControlManager_C_UpdateAim::CallFunc_Multiply_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(COMP_MoveControlManager_C_UpdateAim, CallFunc_SetAimProgress_Result) == 0x000068, "Member 'COMP_MoveControlManager_C_UpdateAim::CallFunc_SetAimProgress_Result' has a wrong offset!");
static_assert(offsetof(COMP_MoveControlManager_C_UpdateAim, CallFunc_Ease_ReturnValue) == 0x00006C, "Member 'COMP_MoveControlManager_C_UpdateAim::CallFunc_Ease_ReturnValue' has a wrong offset!");
static_assert(offsetof(COMP_MoveControlManager_C_UpdateAim, CallFunc_IsValid_ReturnValue) == 0x000070, "Member 'COMP_MoveControlManager_C_UpdateAim::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(COMP_MoveControlManager_C_UpdateAim, CallFunc_ExpireModsWithCategory_ReturnValue) == 0x000074, "Member 'COMP_MoveControlManager_C_UpdateAim::CallFunc_ExpireModsWithCategory_ReturnValue' has a wrong offset!");
static_assert(offsetof(COMP_MoveControlManager_C_UpdateAim, Temp_float_Variable) == 0x000078, "Member 'COMP_MoveControlManager_C_UpdateAim::Temp_float_Variable' has a wrong offset!");
static_assert(offsetof(COMP_MoveControlManager_C_UpdateAim, CallFunc_ApplyMod_ReturnValue) == 0x000080, "Member 'COMP_MoveControlManager_C_UpdateAim::CallFunc_ApplyMod_ReturnValue' has a wrong offset!");
static_assert(offsetof(COMP_MoveControlManager_C_UpdateAim, CallFunc_Multiply_FloatFloat_ReturnValue_1) == 0x000088, "Member 'COMP_MoveControlManager_C_UpdateAim::CallFunc_Multiply_FloatFloat_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(COMP_MoveControlManager_C_UpdateAim, CallFunc_Multiply_FloatFloat_ReturnValue_2) == 0x00008C, "Member 'COMP_MoveControlManager_C_UpdateAim::CallFunc_Multiply_FloatFloat_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(COMP_MoveControlManager_C_UpdateAim, CallFunc_Add_FloatFloat_ReturnValue) == 0x000090, "Member 'COMP_MoveControlManager_C_UpdateAim::CallFunc_Add_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(COMP_MoveControlManager_C_UpdateAim, CallFunc_FClamp_ReturnValue) == 0x000094, "Member 'COMP_MoveControlManager_C_UpdateAim::CallFunc_FClamp_ReturnValue' has a wrong offset!");
static_assert(offsetof(COMP_MoveControlManager_C_UpdateAim, CallFunc_ExpireModsWithCategory_ReturnValue_1) == 0x000098, "Member 'COMP_MoveControlManager_C_UpdateAim::CallFunc_ExpireModsWithCategory_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(COMP_MoveControlManager_C_UpdateAim, CallFunc_ApplyMod_ReturnValue_1) == 0x0000A0, "Member 'COMP_MoveControlManager_C_UpdateAim::CallFunc_ApplyMod_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(COMP_MoveControlManager_C_UpdateAim, CallFunc_Less_FloatFloat_ReturnValue) == 0x0000A8, "Member 'COMP_MoveControlManager_C_UpdateAim::CallFunc_Less_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(COMP_MoveControlManager_C_UpdateAim, CallFunc_NotEqual_FloatFloat_ReturnValue) == 0x0000A9, "Member 'COMP_MoveControlManager_C_UpdateAim::CallFunc_NotEqual_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(COMP_MoveControlManager_C_UpdateAim, CallFunc_Not_PreBool_ReturnValue) == 0x0000AA, "Member 'COMP_MoveControlManager_C_UpdateAim::CallFunc_Not_PreBool_ReturnValue' has a wrong offset!");
static_assert(offsetof(COMP_MoveControlManager_C_UpdateAim, Temp_float_Variable_1) == 0x0000AC, "Member 'COMP_MoveControlManager_C_UpdateAim::Temp_float_Variable_1' has a wrong offset!");
static_assert(offsetof(COMP_MoveControlManager_C_UpdateAim, CallFunc_Greater_FloatFloat_ReturnValue) == 0x0000B0, "Member 'COMP_MoveControlManager_C_UpdateAim::CallFunc_Greater_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(COMP_MoveControlManager_C_UpdateAim, K2Node_Select_Default) == 0x0000B4, "Member 'COMP_MoveControlManager_C_UpdateAim::K2Node_Select_Default' has a wrong offset!");
static_assert(offsetof(COMP_MoveControlManager_C_UpdateAim, CallFunc_GetMoveActionInputValue_Value) == 0x0000B8, "Member 'COMP_MoveControlManager_C_UpdateAim::CallFunc_GetMoveActionInputValue_Value' has a wrong offset!");
static_assert(offsetof(COMP_MoveControlManager_C_UpdateAim, CallFunc_GreaterEqual_FloatFloat_ReturnValue) == 0x0000BC, "Member 'COMP_MoveControlManager_C_UpdateAim::CallFunc_GreaterEqual_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(COMP_MoveControlManager_C_UpdateAim, CallFunc_BooleanAND_ReturnValue) == 0x0000BD, "Member 'COMP_MoveControlManager_C_UpdateAim::CallFunc_BooleanAND_ReturnValue' has a wrong offset!");
static_assert(offsetof(COMP_MoveControlManager_C_UpdateAim, CallFunc_BooleanAND_ReturnValue_1) == 0x0000BE, "Member 'COMP_MoveControlManager_C_UpdateAim::CallFunc_BooleanAND_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(COMP_MoveControlManager_C_UpdateAim, CallFunc_Conv_BoolToFloat_ReturnValue) == 0x0000C0, "Member 'COMP_MoveControlManager_C_UpdateAim::CallFunc_Conv_BoolToFloat_ReturnValue' has a wrong offset!");

// Function COMP_MoveControlManager.COMP_MoveControlManager_C.UpdateLean
// 0x0380 (0x0380 - 0x0000)
struct COMP_MoveControlManager_C_UpdateLean final
{
public:
	float                                         DeltaTime;                                         // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         SignedAntiClipDistance;                            // 0x0004(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CraneDirection;                                    // 0x0008(0x000C)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         LeanHitDistance;                                   // 0x0014(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                TargetLeanLocation;                                // 0x0018(0x000C)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                SourceLeanLocation;                                // 0x0024(0x000C)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CurrentCraneOffset;                                // 0x0030(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          LeanHit;                                           // 0x0034(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_35[0x3];                                       // 0x0035(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         TargetSignedLeanRatio;                             // 0x0038(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_3C[0x4];                                       // 0x003C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class AActor*>                         Temp_object_Variable;                              // 0x0040(0x0010)(ConstParm, ReferenceParm)
	bool                                          Temp_bool_Variable;                                // 0x0050(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_NotEqual_FloatFloat_ReturnValue;          // 0x0051(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_52[0x2];                                       // 0x0052(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_Multiply_FloatFloat_ReturnValue;          // 0x0054(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Multiply_FloatFloat_ReturnValue_1;        // 0x0058(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Subtract_FloatFloat_ReturnValue;          // 0x005C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               CallFunc_MakeRotator_ReturnValue;                  // 0x0060(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                         CallFunc_Multiply_FloatFloat_ReturnValue_2;        // 0x006C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Multiply_FloatFloat_ReturnValue_3;        // 0x0070(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FHitResult                             CallFunc_K2_SetRelativeRotation_SweepHitResult;    // 0x0074(0x0088)(IsPlainOldData, NoDestructor, ContainsInstancedReference)
	float                                         CallFunc_Lerp_ReturnValue;                         // 0x00FC(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Multiply_FloatFloat_ReturnValue_4;        // 0x0100(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Multiply_FloatFloat_ReturnValue_5;        // 0x0104(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_SignOfFloat_ReturnValue;                  // 0x0108(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Multiply_FloatFloat_ReturnValue_6;        // 0x010C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Multiply_VectorFloat_ReturnValue;         // 0x0110(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Add_VectorVector_ReturnValue;             // 0x011C(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Add_FloatFloat_ReturnValue;               // 0x0128(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_GetActorRightVector_ReturnValue;          // 0x012C(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Multiply_VectorFloat_ReturnValue_1;       // 0x0138(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Add_VectorVector_ReturnValue_1;           // 0x0144(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_MakeVector_ReturnValue;                   // 0x0150(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_15C[0x4];                                      // 0x015C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTransform                             CallFunc_K2_GetComponentToWorld_ReturnValue;       // 0x0160(0x0030)(IsPlainOldData, NoDestructor)
	struct FHitResult                             CallFunc_SphereTraceSingle_OutHit;                 // 0x0190(0x0088)(IsPlainOldData, NoDestructor, ContainsInstancedReference)
	bool                                          CallFunc_SphereTraceSingle_ReturnValue;            // 0x0218(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_219[0x3];                                      // 0x0219(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                CallFunc_TransformLocation_ReturnValue;            // 0x021C(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BreakHitResult_bBlockingHit;              // 0x0228(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BreakHitResult_bInitialOverlap;           // 0x0229(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_22A[0x2];                                      // 0x022A(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_BreakHitResult_Time;                      // 0x022C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakHitResult_Distance;                  // 0x0230(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakHitResult_Location;                  // 0x0234(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakHitResult_ImpactPoint;               // 0x0240(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakHitResult_Normal;                    // 0x024C(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakHitResult_ImpactNormal;              // 0x0258(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_264[0x4];                                      // 0x0264(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UPhysicalMaterial*                      CallFunc_BreakHitResult_PhysMat;                   // 0x0268(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 CallFunc_BreakHitResult_HitActor;                  // 0x0270(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UPrimitiveComponent*                    CallFunc_BreakHitResult_HitComponent;              // 0x0278(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FName                                   CallFunc_BreakHitResult_HitBoneName;               // 0x0280(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_BreakHitResult_HitItem;                   // 0x0288(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_BreakHitResult_ElementIndex;              // 0x028C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_BreakHitResult_FaceIndex;                 // 0x0290(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakHitResult_TraceStart;                // 0x0294(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakHitResult_TraceEnd;                  // 0x02A0(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                K2Node_Select_Default;                             // 0x02AC(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FHitResult                             CallFunc_K2_SetWorldLocation_SweepHitResult;       // 0x02B8(0x0088)(IsPlainOldData, NoDestructor, ContainsInstancedReference)
	class UAnimInstance*                          CallFunc_GetAnimInstance_ReturnValue;              // 0x0340(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TScriptInterface<class IINTERF_ANIM_Hacker_C> K2Node_DynamicCast_AsINTERF_ANIM_Hacker;           // 0x0348(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0358(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_359[0x3];                                      // 0x0359(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_Divide_FloatFloat_ReturnValue;            // 0x035C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_SetLeanProgress_Result;                   // 0x0360(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_361[0x3];                                      // 0x0361(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_FInterpTo_Constant_ReturnValue;           // 0x0364(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Not_PreBool_ReturnValue;                  // 0x0368(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_369[0x3];                                      // 0x0369(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_GetMoveActionInputValue_Value;            // 0x036C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Conv_BoolToFloat_ReturnValue;             // 0x0370(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Multiply_FloatFloat_ReturnValue_7;        // 0x0374(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_NotEqual_FloatFloat_ReturnValue_1;        // 0x0378(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(COMP_MoveControlManager_C_UpdateLean) == 0x000010, "Wrong alignment on COMP_MoveControlManager_C_UpdateLean");
static_assert(sizeof(COMP_MoveControlManager_C_UpdateLean) == 0x000380, "Wrong size on COMP_MoveControlManager_C_UpdateLean");
static_assert(offsetof(COMP_MoveControlManager_C_UpdateLean, DeltaTime) == 0x000000, "Member 'COMP_MoveControlManager_C_UpdateLean::DeltaTime' has a wrong offset!");
static_assert(offsetof(COMP_MoveControlManager_C_UpdateLean, SignedAntiClipDistance) == 0x000004, "Member 'COMP_MoveControlManager_C_UpdateLean::SignedAntiClipDistance' has a wrong offset!");
static_assert(offsetof(COMP_MoveControlManager_C_UpdateLean, CraneDirection) == 0x000008, "Member 'COMP_MoveControlManager_C_UpdateLean::CraneDirection' has a wrong offset!");
static_assert(offsetof(COMP_MoveControlManager_C_UpdateLean, LeanHitDistance) == 0x000014, "Member 'COMP_MoveControlManager_C_UpdateLean::LeanHitDistance' has a wrong offset!");
static_assert(offsetof(COMP_MoveControlManager_C_UpdateLean, TargetLeanLocation) == 0x000018, "Member 'COMP_MoveControlManager_C_UpdateLean::TargetLeanLocation' has a wrong offset!");
static_assert(offsetof(COMP_MoveControlManager_C_UpdateLean, SourceLeanLocation) == 0x000024, "Member 'COMP_MoveControlManager_C_UpdateLean::SourceLeanLocation' has a wrong offset!");
static_assert(offsetof(COMP_MoveControlManager_C_UpdateLean, CurrentCraneOffset) == 0x000030, "Member 'COMP_MoveControlManager_C_UpdateLean::CurrentCraneOffset' has a wrong offset!");
static_assert(offsetof(COMP_MoveControlManager_C_UpdateLean, LeanHit) == 0x000034, "Member 'COMP_MoveControlManager_C_UpdateLean::LeanHit' has a wrong offset!");
static_assert(offsetof(COMP_MoveControlManager_C_UpdateLean, TargetSignedLeanRatio) == 0x000038, "Member 'COMP_MoveControlManager_C_UpdateLean::TargetSignedLeanRatio' has a wrong offset!");
static_assert(offsetof(COMP_MoveControlManager_C_UpdateLean, Temp_object_Variable) == 0x000040, "Member 'COMP_MoveControlManager_C_UpdateLean::Temp_object_Variable' has a wrong offset!");
static_assert(offsetof(COMP_MoveControlManager_C_UpdateLean, Temp_bool_Variable) == 0x000050, "Member 'COMP_MoveControlManager_C_UpdateLean::Temp_bool_Variable' has a wrong offset!");
static_assert(offsetof(COMP_MoveControlManager_C_UpdateLean, CallFunc_NotEqual_FloatFloat_ReturnValue) == 0x000051, "Member 'COMP_MoveControlManager_C_UpdateLean::CallFunc_NotEqual_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(COMP_MoveControlManager_C_UpdateLean, CallFunc_Multiply_FloatFloat_ReturnValue) == 0x000054, "Member 'COMP_MoveControlManager_C_UpdateLean::CallFunc_Multiply_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(COMP_MoveControlManager_C_UpdateLean, CallFunc_Multiply_FloatFloat_ReturnValue_1) == 0x000058, "Member 'COMP_MoveControlManager_C_UpdateLean::CallFunc_Multiply_FloatFloat_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(COMP_MoveControlManager_C_UpdateLean, CallFunc_Subtract_FloatFloat_ReturnValue) == 0x00005C, "Member 'COMP_MoveControlManager_C_UpdateLean::CallFunc_Subtract_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(COMP_MoveControlManager_C_UpdateLean, CallFunc_MakeRotator_ReturnValue) == 0x000060, "Member 'COMP_MoveControlManager_C_UpdateLean::CallFunc_MakeRotator_ReturnValue' has a wrong offset!");
static_assert(offsetof(COMP_MoveControlManager_C_UpdateLean, CallFunc_Multiply_FloatFloat_ReturnValue_2) == 0x00006C, "Member 'COMP_MoveControlManager_C_UpdateLean::CallFunc_Multiply_FloatFloat_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(COMP_MoveControlManager_C_UpdateLean, CallFunc_Multiply_FloatFloat_ReturnValue_3) == 0x000070, "Member 'COMP_MoveControlManager_C_UpdateLean::CallFunc_Multiply_FloatFloat_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(COMP_MoveControlManager_C_UpdateLean, CallFunc_K2_SetRelativeRotation_SweepHitResult) == 0x000074, "Member 'COMP_MoveControlManager_C_UpdateLean::CallFunc_K2_SetRelativeRotation_SweepHitResult' has a wrong offset!");
static_assert(offsetof(COMP_MoveControlManager_C_UpdateLean, CallFunc_Lerp_ReturnValue) == 0x0000FC, "Member 'COMP_MoveControlManager_C_UpdateLean::CallFunc_Lerp_ReturnValue' has a wrong offset!");
static_assert(offsetof(COMP_MoveControlManager_C_UpdateLean, CallFunc_Multiply_FloatFloat_ReturnValue_4) == 0x000100, "Member 'COMP_MoveControlManager_C_UpdateLean::CallFunc_Multiply_FloatFloat_ReturnValue_4' has a wrong offset!");
static_assert(offsetof(COMP_MoveControlManager_C_UpdateLean, CallFunc_Multiply_FloatFloat_ReturnValue_5) == 0x000104, "Member 'COMP_MoveControlManager_C_UpdateLean::CallFunc_Multiply_FloatFloat_ReturnValue_5' has a wrong offset!");
static_assert(offsetof(COMP_MoveControlManager_C_UpdateLean, CallFunc_SignOfFloat_ReturnValue) == 0x000108, "Member 'COMP_MoveControlManager_C_UpdateLean::CallFunc_SignOfFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(COMP_MoveControlManager_C_UpdateLean, CallFunc_Multiply_FloatFloat_ReturnValue_6) == 0x00010C, "Member 'COMP_MoveControlManager_C_UpdateLean::CallFunc_Multiply_FloatFloat_ReturnValue_6' has a wrong offset!");
static_assert(offsetof(COMP_MoveControlManager_C_UpdateLean, CallFunc_Multiply_VectorFloat_ReturnValue) == 0x000110, "Member 'COMP_MoveControlManager_C_UpdateLean::CallFunc_Multiply_VectorFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(COMP_MoveControlManager_C_UpdateLean, CallFunc_Add_VectorVector_ReturnValue) == 0x00011C, "Member 'COMP_MoveControlManager_C_UpdateLean::CallFunc_Add_VectorVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(COMP_MoveControlManager_C_UpdateLean, CallFunc_Add_FloatFloat_ReturnValue) == 0x000128, "Member 'COMP_MoveControlManager_C_UpdateLean::CallFunc_Add_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(COMP_MoveControlManager_C_UpdateLean, CallFunc_GetActorRightVector_ReturnValue) == 0x00012C, "Member 'COMP_MoveControlManager_C_UpdateLean::CallFunc_GetActorRightVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(COMP_MoveControlManager_C_UpdateLean, CallFunc_Multiply_VectorFloat_ReturnValue_1) == 0x000138, "Member 'COMP_MoveControlManager_C_UpdateLean::CallFunc_Multiply_VectorFloat_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(COMP_MoveControlManager_C_UpdateLean, CallFunc_Add_VectorVector_ReturnValue_1) == 0x000144, "Member 'COMP_MoveControlManager_C_UpdateLean::CallFunc_Add_VectorVector_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(COMP_MoveControlManager_C_UpdateLean, CallFunc_MakeVector_ReturnValue) == 0x000150, "Member 'COMP_MoveControlManager_C_UpdateLean::CallFunc_MakeVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(COMP_MoveControlManager_C_UpdateLean, CallFunc_K2_GetComponentToWorld_ReturnValue) == 0x000160, "Member 'COMP_MoveControlManager_C_UpdateLean::CallFunc_K2_GetComponentToWorld_ReturnValue' has a wrong offset!");
static_assert(offsetof(COMP_MoveControlManager_C_UpdateLean, CallFunc_SphereTraceSingle_OutHit) == 0x000190, "Member 'COMP_MoveControlManager_C_UpdateLean::CallFunc_SphereTraceSingle_OutHit' has a wrong offset!");
static_assert(offsetof(COMP_MoveControlManager_C_UpdateLean, CallFunc_SphereTraceSingle_ReturnValue) == 0x000218, "Member 'COMP_MoveControlManager_C_UpdateLean::CallFunc_SphereTraceSingle_ReturnValue' has a wrong offset!");
static_assert(offsetof(COMP_MoveControlManager_C_UpdateLean, CallFunc_TransformLocation_ReturnValue) == 0x00021C, "Member 'COMP_MoveControlManager_C_UpdateLean::CallFunc_TransformLocation_ReturnValue' has a wrong offset!");
static_assert(offsetof(COMP_MoveControlManager_C_UpdateLean, CallFunc_BreakHitResult_bBlockingHit) == 0x000228, "Member 'COMP_MoveControlManager_C_UpdateLean::CallFunc_BreakHitResult_bBlockingHit' has a wrong offset!");
static_assert(offsetof(COMP_MoveControlManager_C_UpdateLean, CallFunc_BreakHitResult_bInitialOverlap) == 0x000229, "Member 'COMP_MoveControlManager_C_UpdateLean::CallFunc_BreakHitResult_bInitialOverlap' has a wrong offset!");
static_assert(offsetof(COMP_MoveControlManager_C_UpdateLean, CallFunc_BreakHitResult_Time) == 0x00022C, "Member 'COMP_MoveControlManager_C_UpdateLean::CallFunc_BreakHitResult_Time' has a wrong offset!");
static_assert(offsetof(COMP_MoveControlManager_C_UpdateLean, CallFunc_BreakHitResult_Distance) == 0x000230, "Member 'COMP_MoveControlManager_C_UpdateLean::CallFunc_BreakHitResult_Distance' has a wrong offset!");
static_assert(offsetof(COMP_MoveControlManager_C_UpdateLean, CallFunc_BreakHitResult_Location) == 0x000234, "Member 'COMP_MoveControlManager_C_UpdateLean::CallFunc_BreakHitResult_Location' has a wrong offset!");
static_assert(offsetof(COMP_MoveControlManager_C_UpdateLean, CallFunc_BreakHitResult_ImpactPoint) == 0x000240, "Member 'COMP_MoveControlManager_C_UpdateLean::CallFunc_BreakHitResult_ImpactPoint' has a wrong offset!");
static_assert(offsetof(COMP_MoveControlManager_C_UpdateLean, CallFunc_BreakHitResult_Normal) == 0x00024C, "Member 'COMP_MoveControlManager_C_UpdateLean::CallFunc_BreakHitResult_Normal' has a wrong offset!");
static_assert(offsetof(COMP_MoveControlManager_C_UpdateLean, CallFunc_BreakHitResult_ImpactNormal) == 0x000258, "Member 'COMP_MoveControlManager_C_UpdateLean::CallFunc_BreakHitResult_ImpactNormal' has a wrong offset!");
static_assert(offsetof(COMP_MoveControlManager_C_UpdateLean, CallFunc_BreakHitResult_PhysMat) == 0x000268, "Member 'COMP_MoveControlManager_C_UpdateLean::CallFunc_BreakHitResult_PhysMat' has a wrong offset!");
static_assert(offsetof(COMP_MoveControlManager_C_UpdateLean, CallFunc_BreakHitResult_HitActor) == 0x000270, "Member 'COMP_MoveControlManager_C_UpdateLean::CallFunc_BreakHitResult_HitActor' has a wrong offset!");
static_assert(offsetof(COMP_MoveControlManager_C_UpdateLean, CallFunc_BreakHitResult_HitComponent) == 0x000278, "Member 'COMP_MoveControlManager_C_UpdateLean::CallFunc_BreakHitResult_HitComponent' has a wrong offset!");
static_assert(offsetof(COMP_MoveControlManager_C_UpdateLean, CallFunc_BreakHitResult_HitBoneName) == 0x000280, "Member 'COMP_MoveControlManager_C_UpdateLean::CallFunc_BreakHitResult_HitBoneName' has a wrong offset!");
static_assert(offsetof(COMP_MoveControlManager_C_UpdateLean, CallFunc_BreakHitResult_HitItem) == 0x000288, "Member 'COMP_MoveControlManager_C_UpdateLean::CallFunc_BreakHitResult_HitItem' has a wrong offset!");
static_assert(offsetof(COMP_MoveControlManager_C_UpdateLean, CallFunc_BreakHitResult_ElementIndex) == 0x00028C, "Member 'COMP_MoveControlManager_C_UpdateLean::CallFunc_BreakHitResult_ElementIndex' has a wrong offset!");
static_assert(offsetof(COMP_MoveControlManager_C_UpdateLean, CallFunc_BreakHitResult_FaceIndex) == 0x000290, "Member 'COMP_MoveControlManager_C_UpdateLean::CallFunc_BreakHitResult_FaceIndex' has a wrong offset!");
static_assert(offsetof(COMP_MoveControlManager_C_UpdateLean, CallFunc_BreakHitResult_TraceStart) == 0x000294, "Member 'COMP_MoveControlManager_C_UpdateLean::CallFunc_BreakHitResult_TraceStart' has a wrong offset!");
static_assert(offsetof(COMP_MoveControlManager_C_UpdateLean, CallFunc_BreakHitResult_TraceEnd) == 0x0002A0, "Member 'COMP_MoveControlManager_C_UpdateLean::CallFunc_BreakHitResult_TraceEnd' has a wrong offset!");
static_assert(offsetof(COMP_MoveControlManager_C_UpdateLean, K2Node_Select_Default) == 0x0002AC, "Member 'COMP_MoveControlManager_C_UpdateLean::K2Node_Select_Default' has a wrong offset!");
static_assert(offsetof(COMP_MoveControlManager_C_UpdateLean, CallFunc_K2_SetWorldLocation_SweepHitResult) == 0x0002B8, "Member 'COMP_MoveControlManager_C_UpdateLean::CallFunc_K2_SetWorldLocation_SweepHitResult' has a wrong offset!");
static_assert(offsetof(COMP_MoveControlManager_C_UpdateLean, CallFunc_GetAnimInstance_ReturnValue) == 0x000340, "Member 'COMP_MoveControlManager_C_UpdateLean::CallFunc_GetAnimInstance_ReturnValue' has a wrong offset!");
static_assert(offsetof(COMP_MoveControlManager_C_UpdateLean, K2Node_DynamicCast_AsINTERF_ANIM_Hacker) == 0x000348, "Member 'COMP_MoveControlManager_C_UpdateLean::K2Node_DynamicCast_AsINTERF_ANIM_Hacker' has a wrong offset!");
static_assert(offsetof(COMP_MoveControlManager_C_UpdateLean, K2Node_DynamicCast_bSuccess) == 0x000358, "Member 'COMP_MoveControlManager_C_UpdateLean::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(COMP_MoveControlManager_C_UpdateLean, CallFunc_Divide_FloatFloat_ReturnValue) == 0x00035C, "Member 'COMP_MoveControlManager_C_UpdateLean::CallFunc_Divide_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(COMP_MoveControlManager_C_UpdateLean, CallFunc_SetLeanProgress_Result) == 0x000360, "Member 'COMP_MoveControlManager_C_UpdateLean::CallFunc_SetLeanProgress_Result' has a wrong offset!");
static_assert(offsetof(COMP_MoveControlManager_C_UpdateLean, CallFunc_FInterpTo_Constant_ReturnValue) == 0x000364, "Member 'COMP_MoveControlManager_C_UpdateLean::CallFunc_FInterpTo_Constant_ReturnValue' has a wrong offset!");
static_assert(offsetof(COMP_MoveControlManager_C_UpdateLean, CallFunc_Not_PreBool_ReturnValue) == 0x000368, "Member 'COMP_MoveControlManager_C_UpdateLean::CallFunc_Not_PreBool_ReturnValue' has a wrong offset!");
static_assert(offsetof(COMP_MoveControlManager_C_UpdateLean, CallFunc_GetMoveActionInputValue_Value) == 0x00036C, "Member 'COMP_MoveControlManager_C_UpdateLean::CallFunc_GetMoveActionInputValue_Value' has a wrong offset!");
static_assert(offsetof(COMP_MoveControlManager_C_UpdateLean, CallFunc_Conv_BoolToFloat_ReturnValue) == 0x000370, "Member 'COMP_MoveControlManager_C_UpdateLean::CallFunc_Conv_BoolToFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(COMP_MoveControlManager_C_UpdateLean, CallFunc_Multiply_FloatFloat_ReturnValue_7) == 0x000374, "Member 'COMP_MoveControlManager_C_UpdateLean::CallFunc_Multiply_FloatFloat_ReturnValue_7' has a wrong offset!");
static_assert(offsetof(COMP_MoveControlManager_C_UpdateLean, CallFunc_NotEqual_FloatFloat_ReturnValue_1) == 0x000378, "Member 'COMP_MoveControlManager_C_UpdateLean::CallFunc_NotEqual_FloatFloat_ReturnValue_1' has a wrong offset!");

// Function COMP_MoveControlManager.COMP_MoveControlManager_C.UpdateMoveActions
// 0x0130 (0x0130 - 0x0000)
struct COMP_MoveControlManager_C_UpdateMoveActions final
{
public:
	float                                         DeltaTime;                                         // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         AccessibilityBobScale;                             // 0x0004(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ENUM_OffReducedNormal                         Temp_byte_Variable;                                // 0x0008(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         Temp_float_Variable;                               // 0x000C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Temp_float_Variable_1;                             // 0x0010(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Temp_float_Variable_2;                             // 0x0014(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ENUM_OffReducedNormal                         CallFunc_GetHeadbobAmount_Result;                  // 0x0018(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Greater_FloatFloat_ReturnValue;           // 0x0019(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_1A[0x2];                                       // 0x001A(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         K2Node_Select_Default;                             // 0x001C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FHitResult                             CallFunc_K2_SetRelativeLocation_SweepHitResult;    // 0x0020(0x0088)(IsPlainOldData, NoDestructor, ContainsInstancedReference)
	struct FHitResult                             CallFunc_K2_SetRelativeRotation_SweepHitResult;    // 0x00A8(0x0088)(IsPlainOldData, NoDestructor, ContainsInstancedReference)
};
static_assert(alignof(COMP_MoveControlManager_C_UpdateMoveActions) == 0x000004, "Wrong alignment on COMP_MoveControlManager_C_UpdateMoveActions");
static_assert(sizeof(COMP_MoveControlManager_C_UpdateMoveActions) == 0x000130, "Wrong size on COMP_MoveControlManager_C_UpdateMoveActions");
static_assert(offsetof(COMP_MoveControlManager_C_UpdateMoveActions, DeltaTime) == 0x000000, "Member 'COMP_MoveControlManager_C_UpdateMoveActions::DeltaTime' has a wrong offset!");
static_assert(offsetof(COMP_MoveControlManager_C_UpdateMoveActions, AccessibilityBobScale) == 0x000004, "Member 'COMP_MoveControlManager_C_UpdateMoveActions::AccessibilityBobScale' has a wrong offset!");
static_assert(offsetof(COMP_MoveControlManager_C_UpdateMoveActions, Temp_byte_Variable) == 0x000008, "Member 'COMP_MoveControlManager_C_UpdateMoveActions::Temp_byte_Variable' has a wrong offset!");
static_assert(offsetof(COMP_MoveControlManager_C_UpdateMoveActions, Temp_float_Variable) == 0x00000C, "Member 'COMP_MoveControlManager_C_UpdateMoveActions::Temp_float_Variable' has a wrong offset!");
static_assert(offsetof(COMP_MoveControlManager_C_UpdateMoveActions, Temp_float_Variable_1) == 0x000010, "Member 'COMP_MoveControlManager_C_UpdateMoveActions::Temp_float_Variable_1' has a wrong offset!");
static_assert(offsetof(COMP_MoveControlManager_C_UpdateMoveActions, Temp_float_Variable_2) == 0x000014, "Member 'COMP_MoveControlManager_C_UpdateMoveActions::Temp_float_Variable_2' has a wrong offset!");
static_assert(offsetof(COMP_MoveControlManager_C_UpdateMoveActions, CallFunc_GetHeadbobAmount_Result) == 0x000018, "Member 'COMP_MoveControlManager_C_UpdateMoveActions::CallFunc_GetHeadbobAmount_Result' has a wrong offset!");
static_assert(offsetof(COMP_MoveControlManager_C_UpdateMoveActions, CallFunc_Greater_FloatFloat_ReturnValue) == 0x000019, "Member 'COMP_MoveControlManager_C_UpdateMoveActions::CallFunc_Greater_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(COMP_MoveControlManager_C_UpdateMoveActions, K2Node_Select_Default) == 0x00001C, "Member 'COMP_MoveControlManager_C_UpdateMoveActions::K2Node_Select_Default' has a wrong offset!");
static_assert(offsetof(COMP_MoveControlManager_C_UpdateMoveActions, CallFunc_K2_SetRelativeLocation_SweepHitResult) == 0x000020, "Member 'COMP_MoveControlManager_C_UpdateMoveActions::CallFunc_K2_SetRelativeLocation_SweepHitResult' has a wrong offset!");
static_assert(offsetof(COMP_MoveControlManager_C_UpdateMoveActions, CallFunc_K2_SetRelativeRotation_SweepHitResult) == 0x0000A8, "Member 'COMP_MoveControlManager_C_UpdateMoveActions::CallFunc_K2_SetRelativeRotation_SweepHitResult' has a wrong offset!");

// Function COMP_MoveControlManager.COMP_MoveControlManager_C.GetMoveActionInputValue
// 0x0014 (0x0014 - 0x0000)
struct COMP_MoveControlManager_C_GetMoveActionInputValue final
{
public:
	ENUM_MoveInputActionType                      ActionType;                                        // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         Value;                                             // 0x0004(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Conv_ByteToInt_ReturnValue;               // 0x0008(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Array_Get_Item;                           // 0x000C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_ByteByte_ReturnValue;          // 0x0010(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(COMP_MoveControlManager_C_GetMoveActionInputValue) == 0x000004, "Wrong alignment on COMP_MoveControlManager_C_GetMoveActionInputValue");
static_assert(sizeof(COMP_MoveControlManager_C_GetMoveActionInputValue) == 0x000014, "Wrong size on COMP_MoveControlManager_C_GetMoveActionInputValue");
static_assert(offsetof(COMP_MoveControlManager_C_GetMoveActionInputValue, ActionType) == 0x000000, "Member 'COMP_MoveControlManager_C_GetMoveActionInputValue::ActionType' has a wrong offset!");
static_assert(offsetof(COMP_MoveControlManager_C_GetMoveActionInputValue, Value) == 0x000004, "Member 'COMP_MoveControlManager_C_GetMoveActionInputValue::Value' has a wrong offset!");
static_assert(offsetof(COMP_MoveControlManager_C_GetMoveActionInputValue, CallFunc_Conv_ByteToInt_ReturnValue) == 0x000008, "Member 'COMP_MoveControlManager_C_GetMoveActionInputValue::CallFunc_Conv_ByteToInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(COMP_MoveControlManager_C_GetMoveActionInputValue, CallFunc_Array_Get_Item) == 0x00000C, "Member 'COMP_MoveControlManager_C_GetMoveActionInputValue::CallFunc_Array_Get_Item' has a wrong offset!");
static_assert(offsetof(COMP_MoveControlManager_C_GetMoveActionInputValue, CallFunc_EqualEqual_ByteByte_ReturnValue) == 0x000010, "Member 'COMP_MoveControlManager_C_GetMoveActionInputValue::CallFunc_EqualEqual_ByteByte_ReturnValue' has a wrong offset!");

// Function COMP_MoveControlManager.COMP_MoveControlManager_C.TakeMeasurements
// 0x0018 (0x0018 - 0x0000)
struct COMP_MoveControlManager_C_TakeMeasurements final
{
public:
	float                                         CallFunc_GetHalfHeightCurrent_Result;              // 0x0000(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_GetTorsoToEyeHeightCurrent_Result;        // 0x0004(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_LessEqual_FloatFloat_ReturnValue;         // 0x0008(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_BreakVector_X;                            // 0x000C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector_Y;                            // 0x0010(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector_Z;                            // 0x0014(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(COMP_MoveControlManager_C_TakeMeasurements) == 0x000004, "Wrong alignment on COMP_MoveControlManager_C_TakeMeasurements");
static_assert(sizeof(COMP_MoveControlManager_C_TakeMeasurements) == 0x000018, "Wrong size on COMP_MoveControlManager_C_TakeMeasurements");
static_assert(offsetof(COMP_MoveControlManager_C_TakeMeasurements, CallFunc_GetHalfHeightCurrent_Result) == 0x000000, "Member 'COMP_MoveControlManager_C_TakeMeasurements::CallFunc_GetHalfHeightCurrent_Result' has a wrong offset!");
static_assert(offsetof(COMP_MoveControlManager_C_TakeMeasurements, CallFunc_GetTorsoToEyeHeightCurrent_Result) == 0x000004, "Member 'COMP_MoveControlManager_C_TakeMeasurements::CallFunc_GetTorsoToEyeHeightCurrent_Result' has a wrong offset!");
static_assert(offsetof(COMP_MoveControlManager_C_TakeMeasurements, CallFunc_LessEqual_FloatFloat_ReturnValue) == 0x000008, "Member 'COMP_MoveControlManager_C_TakeMeasurements::CallFunc_LessEqual_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(COMP_MoveControlManager_C_TakeMeasurements, CallFunc_BreakVector_X) == 0x00000C, "Member 'COMP_MoveControlManager_C_TakeMeasurements::CallFunc_BreakVector_X' has a wrong offset!");
static_assert(offsetof(COMP_MoveControlManager_C_TakeMeasurements, CallFunc_BreakVector_Y) == 0x000010, "Member 'COMP_MoveControlManager_C_TakeMeasurements::CallFunc_BreakVector_Y' has a wrong offset!");
static_assert(offsetof(COMP_MoveControlManager_C_TakeMeasurements, CallFunc_BreakVector_Z) == 0x000014, "Member 'COMP_MoveControlManager_C_TakeMeasurements::CallFunc_BreakVector_Z' has a wrong offset!");

// Function COMP_MoveControlManager.COMP_MoveControlManager_C.TryResetToDefaultMeasurements
// 0x012C (0x012C - 0x0000)
struct COMP_MoveControlManager_C_TryResetToDefaultMeasurements final
{
public:
	struct FVector                                CallFunc_MakeVector_ReturnValue;                   // 0x0000(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_MakeVector_ReturnValue_1;                 // 0x000C(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FHitResult                             CallFunc_K2_SetRelativeLocation_SweepHitResult;    // 0x0018(0x0088)(IsPlainOldData, NoDestructor, ContainsInstancedReference)
	bool                                          CallFunc_Greater_FloatFloat_ReturnValue;           // 0x00A0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_A1[0x3];                                       // 0x00A1(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FHitResult                             CallFunc_K2_SetRelativeLocation_SweepHitResult_1;  // 0x00A4(0x0088)(IsPlainOldData, NoDestructor, ContainsInstancedReference)
};
static_assert(alignof(COMP_MoveControlManager_C_TryResetToDefaultMeasurements) == 0x000004, "Wrong alignment on COMP_MoveControlManager_C_TryResetToDefaultMeasurements");
static_assert(sizeof(COMP_MoveControlManager_C_TryResetToDefaultMeasurements) == 0x00012C, "Wrong size on COMP_MoveControlManager_C_TryResetToDefaultMeasurements");
static_assert(offsetof(COMP_MoveControlManager_C_TryResetToDefaultMeasurements, CallFunc_MakeVector_ReturnValue) == 0x000000, "Member 'COMP_MoveControlManager_C_TryResetToDefaultMeasurements::CallFunc_MakeVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(COMP_MoveControlManager_C_TryResetToDefaultMeasurements, CallFunc_MakeVector_ReturnValue_1) == 0x00000C, "Member 'COMP_MoveControlManager_C_TryResetToDefaultMeasurements::CallFunc_MakeVector_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(COMP_MoveControlManager_C_TryResetToDefaultMeasurements, CallFunc_K2_SetRelativeLocation_SweepHitResult) == 0x000018, "Member 'COMP_MoveControlManager_C_TryResetToDefaultMeasurements::CallFunc_K2_SetRelativeLocation_SweepHitResult' has a wrong offset!");
static_assert(offsetof(COMP_MoveControlManager_C_TryResetToDefaultMeasurements, CallFunc_Greater_FloatFloat_ReturnValue) == 0x0000A0, "Member 'COMP_MoveControlManager_C_TryResetToDefaultMeasurements::CallFunc_Greater_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(COMP_MoveControlManager_C_TryResetToDefaultMeasurements, CallFunc_K2_SetRelativeLocation_SweepHitResult_1) == 0x0000A4, "Member 'COMP_MoveControlManager_C_TryResetToDefaultMeasurements::CallFunc_K2_SetRelativeLocation_SweepHitResult_1' has a wrong offset!");

// Function COMP_MoveControlManager.COMP_MoveControlManager_C.InitializeOwnerGender
// 0x0018 (0x0018 - 0x0000)
struct COMP_MoveControlManager_C_InitializeOwnerGender final
{
public:
	class UGameInstance*                          CallFunc_GetGameInstance_ReturnValue;              // 0x0000(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UGI_SinglePlayer_C*                     K2Node_DynamicCast_AsGI_Single_Player;             // 0x0008(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0010(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	ENUM_HackerGender                             CallFunc_GetHackerGender_Result;                   // 0x0011(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(COMP_MoveControlManager_C_InitializeOwnerGender) == 0x000008, "Wrong alignment on COMP_MoveControlManager_C_InitializeOwnerGender");
static_assert(sizeof(COMP_MoveControlManager_C_InitializeOwnerGender) == 0x000018, "Wrong size on COMP_MoveControlManager_C_InitializeOwnerGender");
static_assert(offsetof(COMP_MoveControlManager_C_InitializeOwnerGender, CallFunc_GetGameInstance_ReturnValue) == 0x000000, "Member 'COMP_MoveControlManager_C_InitializeOwnerGender::CallFunc_GetGameInstance_ReturnValue' has a wrong offset!");
static_assert(offsetof(COMP_MoveControlManager_C_InitializeOwnerGender, K2Node_DynamicCast_AsGI_Single_Player) == 0x000008, "Member 'COMP_MoveControlManager_C_InitializeOwnerGender::K2Node_DynamicCast_AsGI_Single_Player' has a wrong offset!");
static_assert(offsetof(COMP_MoveControlManager_C_InitializeOwnerGender, K2Node_DynamicCast_bSuccess) == 0x000010, "Member 'COMP_MoveControlManager_C_InitializeOwnerGender::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(COMP_MoveControlManager_C_InitializeOwnerGender, CallFunc_GetHackerGender_Result) == 0x000011, "Member 'COMP_MoveControlManager_C_InitializeOwnerGender::CallFunc_GetHackerGender_Result' has a wrong offset!");

// Function COMP_MoveControlManager.COMP_MoveControlManager_C.InitializeValuesFromAttributes
// 0x0138 (0x0138 - 0x0000)
struct COMP_MoveControlManager_C_InitializeValuesFromAttributes final
{
public:
	class UAttribInstance*                        BrakingDecelerationAttribInstance;                 // 0x0000(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UAttribInstance*                        MoveAccelerationAttribInstance;                    // 0x0008(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UAttribInstance*                        GroundFrictionAttribInstance;                      // 0x0010(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Multiply_FloatFloat_ReturnValue;          // 0x0018(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1C[0x4];                                       // 0x001C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UAttribInstance*                        CallFunc_GetOrCreateAttribInstance_ReturnValue;    // 0x0020(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UAttribInstance*                        CallFunc_GetAttribInstance_ReturnValue;            // 0x0028(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_GetDefaultAttribValue_ReturnValue;        // 0x0030(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_GetDefaultAttribValue_ReturnValue_1;      // 0x0034(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UAttribInstance*                        CallFunc_GetAttribInstance_ReturnValue_1;          // 0x0038(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_GetValue_ReturnValue;                     // 0x0040(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TDelegate<void(float CurrValue, float LastValue)> K2Node_CreateDelegate_OutputDelegate;              // 0x0044(0x0010)(ZeroConstructor, NoDestructor)
	float                                         CallFunc_GetValue_ReturnValue_1;                   // 0x0054(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TDelegate<void(float CurrValue, float LastValue)> K2Node_CreateDelegate_OutputDelegate_1;            // 0x0058(0x0010)(ZeroConstructor, NoDestructor)
	class UAttribInstance*                        CallFunc_GetAttribInstance_ReturnValue_2;          // 0x0068(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UAttribInstance*                        CallFunc_GetAttribInstance_ReturnValue_3;          // 0x0070(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TDelegate<void()>                             K2Node_CreateDelegate_OutputDelegate_2;            // 0x0078(0x0010)(ZeroConstructor, NoDestructor)
	class UAttribInstance*                        CallFunc_GetAttribInstance_ReturnValue_4;          // 0x0088(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TDelegate<void(float CurrValue, float LastValue)> K2Node_CreateDelegate_OutputDelegate_3;            // 0x0090(0x0010)(ZeroConstructor, NoDestructor)
	float                                         CallFunc_GetValue_ReturnValue_2;                   // 0x00A0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_GetValue_ReturnValue_3;                   // 0x00A4(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_GetValue_ReturnValue_4;                   // 0x00A8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TDelegate<void(float CurrValue, float LastValue)> K2Node_CreateDelegate_OutputDelegate_4;            // 0x00AC(0x0010)(ZeroConstructor, NoDestructor)
	TDelegate<void(float CurrValue, float LastValue)> K2Node_CreateDelegate_OutputDelegate_5;            // 0x00BC(0x0010)(ZeroConstructor, NoDestructor)
	uint8                                         Pad_CC[0x4];                                       // 0x00CC(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UAttribInstance*                        CallFunc_GetOrCreateAttribInstance_ReturnValue_1;  // 0x00D0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_GetValue_ReturnValue_5;                   // 0x00D8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_DC[0x4];                                       // 0x00DC(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UAttribInstance*                        CallFunc_GetOrCreateAttribInstance_ReturnValue_2;  // 0x00E0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TDelegate<void(float CurrValue, float LastValue)> K2Node_CreateDelegate_OutputDelegate_6;            // 0x00E8(0x0010)(ZeroConstructor, NoDestructor)
	class UAttribInstance*                        CallFunc_GetOrCreateAttribInstance_ReturnValue_3;  // 0x00F8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_GetValue_ReturnValue_6;                   // 0x0100(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TDelegate<void(float CurrValue, float LastValue)> K2Node_CreateDelegate_OutputDelegate_7;            // 0x0104(0x0010)(ZeroConstructor, NoDestructor)
	float                                         CallFunc_Multiply_FloatFloat_ReturnValue_1;        // 0x0114(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UAttribInstance*                        CallFunc_GetAttribInstance_ReturnValue_5;          // 0x0118(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Multiply_FloatFloat_ReturnValue_2;        // 0x0120(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_124[0x4];                                      // 0x0124(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UAttribInstance*                        CallFunc_GetAttribInstance_ReturnValue_6;          // 0x0128(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_GetBaseValue_ReturnValue;                 // 0x0130(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(COMP_MoveControlManager_C_InitializeValuesFromAttributes) == 0x000008, "Wrong alignment on COMP_MoveControlManager_C_InitializeValuesFromAttributes");
static_assert(sizeof(COMP_MoveControlManager_C_InitializeValuesFromAttributes) == 0x000138, "Wrong size on COMP_MoveControlManager_C_InitializeValuesFromAttributes");
static_assert(offsetof(COMP_MoveControlManager_C_InitializeValuesFromAttributes, BrakingDecelerationAttribInstance) == 0x000000, "Member 'COMP_MoveControlManager_C_InitializeValuesFromAttributes::BrakingDecelerationAttribInstance' has a wrong offset!");
static_assert(offsetof(COMP_MoveControlManager_C_InitializeValuesFromAttributes, MoveAccelerationAttribInstance) == 0x000008, "Member 'COMP_MoveControlManager_C_InitializeValuesFromAttributes::MoveAccelerationAttribInstance' has a wrong offset!");
static_assert(offsetof(COMP_MoveControlManager_C_InitializeValuesFromAttributes, GroundFrictionAttribInstance) == 0x000010, "Member 'COMP_MoveControlManager_C_InitializeValuesFromAttributes::GroundFrictionAttribInstance' has a wrong offset!");
static_assert(offsetof(COMP_MoveControlManager_C_InitializeValuesFromAttributes, CallFunc_Multiply_FloatFloat_ReturnValue) == 0x000018, "Member 'COMP_MoveControlManager_C_InitializeValuesFromAttributes::CallFunc_Multiply_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(COMP_MoveControlManager_C_InitializeValuesFromAttributes, CallFunc_GetOrCreateAttribInstance_ReturnValue) == 0x000020, "Member 'COMP_MoveControlManager_C_InitializeValuesFromAttributes::CallFunc_GetOrCreateAttribInstance_ReturnValue' has a wrong offset!");
static_assert(offsetof(COMP_MoveControlManager_C_InitializeValuesFromAttributes, CallFunc_GetAttribInstance_ReturnValue) == 0x000028, "Member 'COMP_MoveControlManager_C_InitializeValuesFromAttributes::CallFunc_GetAttribInstance_ReturnValue' has a wrong offset!");
static_assert(offsetof(COMP_MoveControlManager_C_InitializeValuesFromAttributes, CallFunc_GetDefaultAttribValue_ReturnValue) == 0x000030, "Member 'COMP_MoveControlManager_C_InitializeValuesFromAttributes::CallFunc_GetDefaultAttribValue_ReturnValue' has a wrong offset!");
static_assert(offsetof(COMP_MoveControlManager_C_InitializeValuesFromAttributes, CallFunc_GetDefaultAttribValue_ReturnValue_1) == 0x000034, "Member 'COMP_MoveControlManager_C_InitializeValuesFromAttributes::CallFunc_GetDefaultAttribValue_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(COMP_MoveControlManager_C_InitializeValuesFromAttributes, CallFunc_GetAttribInstance_ReturnValue_1) == 0x000038, "Member 'COMP_MoveControlManager_C_InitializeValuesFromAttributes::CallFunc_GetAttribInstance_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(COMP_MoveControlManager_C_InitializeValuesFromAttributes, CallFunc_GetValue_ReturnValue) == 0x000040, "Member 'COMP_MoveControlManager_C_InitializeValuesFromAttributes::CallFunc_GetValue_ReturnValue' has a wrong offset!");
static_assert(offsetof(COMP_MoveControlManager_C_InitializeValuesFromAttributes, K2Node_CreateDelegate_OutputDelegate) == 0x000044, "Member 'COMP_MoveControlManager_C_InitializeValuesFromAttributes::K2Node_CreateDelegate_OutputDelegate' has a wrong offset!");
static_assert(offsetof(COMP_MoveControlManager_C_InitializeValuesFromAttributes, CallFunc_GetValue_ReturnValue_1) == 0x000054, "Member 'COMP_MoveControlManager_C_InitializeValuesFromAttributes::CallFunc_GetValue_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(COMP_MoveControlManager_C_InitializeValuesFromAttributes, K2Node_CreateDelegate_OutputDelegate_1) == 0x000058, "Member 'COMP_MoveControlManager_C_InitializeValuesFromAttributes::K2Node_CreateDelegate_OutputDelegate_1' has a wrong offset!");
static_assert(offsetof(COMP_MoveControlManager_C_InitializeValuesFromAttributes, CallFunc_GetAttribInstance_ReturnValue_2) == 0x000068, "Member 'COMP_MoveControlManager_C_InitializeValuesFromAttributes::CallFunc_GetAttribInstance_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(COMP_MoveControlManager_C_InitializeValuesFromAttributes, CallFunc_GetAttribInstance_ReturnValue_3) == 0x000070, "Member 'COMP_MoveControlManager_C_InitializeValuesFromAttributes::CallFunc_GetAttribInstance_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(COMP_MoveControlManager_C_InitializeValuesFromAttributes, K2Node_CreateDelegate_OutputDelegate_2) == 0x000078, "Member 'COMP_MoveControlManager_C_InitializeValuesFromAttributes::K2Node_CreateDelegate_OutputDelegate_2' has a wrong offset!");
static_assert(offsetof(COMP_MoveControlManager_C_InitializeValuesFromAttributes, CallFunc_GetAttribInstance_ReturnValue_4) == 0x000088, "Member 'COMP_MoveControlManager_C_InitializeValuesFromAttributes::CallFunc_GetAttribInstance_ReturnValue_4' has a wrong offset!");
static_assert(offsetof(COMP_MoveControlManager_C_InitializeValuesFromAttributes, K2Node_CreateDelegate_OutputDelegate_3) == 0x000090, "Member 'COMP_MoveControlManager_C_InitializeValuesFromAttributes::K2Node_CreateDelegate_OutputDelegate_3' has a wrong offset!");
static_assert(offsetof(COMP_MoveControlManager_C_InitializeValuesFromAttributes, CallFunc_GetValue_ReturnValue_2) == 0x0000A0, "Member 'COMP_MoveControlManager_C_InitializeValuesFromAttributes::CallFunc_GetValue_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(COMP_MoveControlManager_C_InitializeValuesFromAttributes, CallFunc_GetValue_ReturnValue_3) == 0x0000A4, "Member 'COMP_MoveControlManager_C_InitializeValuesFromAttributes::CallFunc_GetValue_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(COMP_MoveControlManager_C_InitializeValuesFromAttributes, CallFunc_GetValue_ReturnValue_4) == 0x0000A8, "Member 'COMP_MoveControlManager_C_InitializeValuesFromAttributes::CallFunc_GetValue_ReturnValue_4' has a wrong offset!");
static_assert(offsetof(COMP_MoveControlManager_C_InitializeValuesFromAttributes, K2Node_CreateDelegate_OutputDelegate_4) == 0x0000AC, "Member 'COMP_MoveControlManager_C_InitializeValuesFromAttributes::K2Node_CreateDelegate_OutputDelegate_4' has a wrong offset!");
static_assert(offsetof(COMP_MoveControlManager_C_InitializeValuesFromAttributes, K2Node_CreateDelegate_OutputDelegate_5) == 0x0000BC, "Member 'COMP_MoveControlManager_C_InitializeValuesFromAttributes::K2Node_CreateDelegate_OutputDelegate_5' has a wrong offset!");
static_assert(offsetof(COMP_MoveControlManager_C_InitializeValuesFromAttributes, CallFunc_GetOrCreateAttribInstance_ReturnValue_1) == 0x0000D0, "Member 'COMP_MoveControlManager_C_InitializeValuesFromAttributes::CallFunc_GetOrCreateAttribInstance_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(COMP_MoveControlManager_C_InitializeValuesFromAttributes, CallFunc_GetValue_ReturnValue_5) == 0x0000D8, "Member 'COMP_MoveControlManager_C_InitializeValuesFromAttributes::CallFunc_GetValue_ReturnValue_5' has a wrong offset!");
static_assert(offsetof(COMP_MoveControlManager_C_InitializeValuesFromAttributes, CallFunc_GetOrCreateAttribInstance_ReturnValue_2) == 0x0000E0, "Member 'COMP_MoveControlManager_C_InitializeValuesFromAttributes::CallFunc_GetOrCreateAttribInstance_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(COMP_MoveControlManager_C_InitializeValuesFromAttributes, K2Node_CreateDelegate_OutputDelegate_6) == 0x0000E8, "Member 'COMP_MoveControlManager_C_InitializeValuesFromAttributes::K2Node_CreateDelegate_OutputDelegate_6' has a wrong offset!");
static_assert(offsetof(COMP_MoveControlManager_C_InitializeValuesFromAttributes, CallFunc_GetOrCreateAttribInstance_ReturnValue_3) == 0x0000F8, "Member 'COMP_MoveControlManager_C_InitializeValuesFromAttributes::CallFunc_GetOrCreateAttribInstance_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(COMP_MoveControlManager_C_InitializeValuesFromAttributes, CallFunc_GetValue_ReturnValue_6) == 0x000100, "Member 'COMP_MoveControlManager_C_InitializeValuesFromAttributes::CallFunc_GetValue_ReturnValue_6' has a wrong offset!");
static_assert(offsetof(COMP_MoveControlManager_C_InitializeValuesFromAttributes, K2Node_CreateDelegate_OutputDelegate_7) == 0x000104, "Member 'COMP_MoveControlManager_C_InitializeValuesFromAttributes::K2Node_CreateDelegate_OutputDelegate_7' has a wrong offset!");
static_assert(offsetof(COMP_MoveControlManager_C_InitializeValuesFromAttributes, CallFunc_Multiply_FloatFloat_ReturnValue_1) == 0x000114, "Member 'COMP_MoveControlManager_C_InitializeValuesFromAttributes::CallFunc_Multiply_FloatFloat_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(COMP_MoveControlManager_C_InitializeValuesFromAttributes, CallFunc_GetAttribInstance_ReturnValue_5) == 0x000118, "Member 'COMP_MoveControlManager_C_InitializeValuesFromAttributes::CallFunc_GetAttribInstance_ReturnValue_5' has a wrong offset!");
static_assert(offsetof(COMP_MoveControlManager_C_InitializeValuesFromAttributes, CallFunc_Multiply_FloatFloat_ReturnValue_2) == 0x000120, "Member 'COMP_MoveControlManager_C_InitializeValuesFromAttributes::CallFunc_Multiply_FloatFloat_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(COMP_MoveControlManager_C_InitializeValuesFromAttributes, CallFunc_GetAttribInstance_ReturnValue_6) == 0x000128, "Member 'COMP_MoveControlManager_C_InitializeValuesFromAttributes::CallFunc_GetAttribInstance_ReturnValue_6' has a wrong offset!");
static_assert(offsetof(COMP_MoveControlManager_C_InitializeValuesFromAttributes, CallFunc_GetBaseValue_ReturnValue) == 0x000130, "Member 'COMP_MoveControlManager_C_InitializeValuesFromAttributes::CallFunc_GetBaseValue_ReturnValue' has a wrong offset!");

// Function COMP_MoveControlManager.COMP_MoveControlManager_C.InitializeValuesFromInventory
// 0x0050 (0x0050 - 0x0000)
struct COMP_MoveControlManager_C_InitializeValuesFromInventory final
{
public:
	class UHARDWARE_TurboBoots_V3_C*              K2Node_DynamicCast_AsHARDWARE_Turbo_Boots_V3;      // 0x0000(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0008(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	TDelegate<void(int32 SlotIndex)>              K2Node_CreateDelegate_OutputDelegate;              // 0x000C(0x0010)(ZeroConstructor, NoDestructor)
	TDelegate<void(bool State)>                   K2Node_CreateDelegate_OutputDelegate_1;            // 0x001C(0x0010)(ZeroConstructor, NoDestructor)
	uint8                                         Pad_2C[0x4];                                       // 0x002C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UITEM_Base_C*                           CallFunc_FindItem_FoundItem;                       // 0x0030(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UInventoryBag_C*                        CallFunc_GetBagByType_Bag;                         // 0x0038(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UHARDWARE_TurboBoots_Base_C*            K2Node_DynamicCast_AsHARDWARE_Turbo_Boots_Base;    // 0x0040(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess_1;                     // 0x0048(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0049(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(COMP_MoveControlManager_C_InitializeValuesFromInventory) == 0x000008, "Wrong alignment on COMP_MoveControlManager_C_InitializeValuesFromInventory");
static_assert(sizeof(COMP_MoveControlManager_C_InitializeValuesFromInventory) == 0x000050, "Wrong size on COMP_MoveControlManager_C_InitializeValuesFromInventory");
static_assert(offsetof(COMP_MoveControlManager_C_InitializeValuesFromInventory, K2Node_DynamicCast_AsHARDWARE_Turbo_Boots_V3) == 0x000000, "Member 'COMP_MoveControlManager_C_InitializeValuesFromInventory::K2Node_DynamicCast_AsHARDWARE_Turbo_Boots_V3' has a wrong offset!");
static_assert(offsetof(COMP_MoveControlManager_C_InitializeValuesFromInventory, K2Node_DynamicCast_bSuccess) == 0x000008, "Member 'COMP_MoveControlManager_C_InitializeValuesFromInventory::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(COMP_MoveControlManager_C_InitializeValuesFromInventory, K2Node_CreateDelegate_OutputDelegate) == 0x00000C, "Member 'COMP_MoveControlManager_C_InitializeValuesFromInventory::K2Node_CreateDelegate_OutputDelegate' has a wrong offset!");
static_assert(offsetof(COMP_MoveControlManager_C_InitializeValuesFromInventory, K2Node_CreateDelegate_OutputDelegate_1) == 0x00001C, "Member 'COMP_MoveControlManager_C_InitializeValuesFromInventory::K2Node_CreateDelegate_OutputDelegate_1' has a wrong offset!");
static_assert(offsetof(COMP_MoveControlManager_C_InitializeValuesFromInventory, CallFunc_FindItem_FoundItem) == 0x000030, "Member 'COMP_MoveControlManager_C_InitializeValuesFromInventory::CallFunc_FindItem_FoundItem' has a wrong offset!");
static_assert(offsetof(COMP_MoveControlManager_C_InitializeValuesFromInventory, CallFunc_GetBagByType_Bag) == 0x000038, "Member 'COMP_MoveControlManager_C_InitializeValuesFromInventory::CallFunc_GetBagByType_Bag' has a wrong offset!");
static_assert(offsetof(COMP_MoveControlManager_C_InitializeValuesFromInventory, K2Node_DynamicCast_AsHARDWARE_Turbo_Boots_Base) == 0x000040, "Member 'COMP_MoveControlManager_C_InitializeValuesFromInventory::K2Node_DynamicCast_AsHARDWARE_Turbo_Boots_Base' has a wrong offset!");
static_assert(offsetof(COMP_MoveControlManager_C_InitializeValuesFromInventory, K2Node_DynamicCast_bSuccess_1) == 0x000048, "Member 'COMP_MoveControlManager_C_InitializeValuesFromInventory::K2Node_DynamicCast_bSuccess_1' has a wrong offset!");
static_assert(offsetof(COMP_MoveControlManager_C_InitializeValuesFromInventory, CallFunc_IsValid_ReturnValue) == 0x000049, "Member 'COMP_MoveControlManager_C_InitializeValuesFromInventory::CallFunc_IsValid_ReturnValue' has a wrong offset!");

// Function COMP_MoveControlManager.COMP_MoveControlManager_C.DeactivateTurboBoots
// 0x0014 (0x0014 - 0x0000)
struct COMP_MoveControlManager_C_DeactivateTurboBoots final
{
public:
	bool                                          SkatesOnly;                                        // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_GetActiveVersionNumber_VersionNumber;     // 0x0004(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Not_PreBool_ReturnValue;                  // 0x0008(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_EqualEqual_IntInt_ReturnValue;            // 0x0009(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BooleanOR_ReturnValue;                    // 0x000A(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x000B(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	int32                                         CallFunc_GetActiveVersionNumber_VersionNumber_1;   // 0x000C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_DeactivateTurboMechanism_Result;          // 0x0010(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(COMP_MoveControlManager_C_DeactivateTurboBoots) == 0x000004, "Wrong alignment on COMP_MoveControlManager_C_DeactivateTurboBoots");
static_assert(sizeof(COMP_MoveControlManager_C_DeactivateTurboBoots) == 0x000014, "Wrong size on COMP_MoveControlManager_C_DeactivateTurboBoots");
static_assert(offsetof(COMP_MoveControlManager_C_DeactivateTurboBoots, SkatesOnly) == 0x000000, "Member 'COMP_MoveControlManager_C_DeactivateTurboBoots::SkatesOnly' has a wrong offset!");
static_assert(offsetof(COMP_MoveControlManager_C_DeactivateTurboBoots, CallFunc_GetActiveVersionNumber_VersionNumber) == 0x000004, "Member 'COMP_MoveControlManager_C_DeactivateTurboBoots::CallFunc_GetActiveVersionNumber_VersionNumber' has a wrong offset!");
static_assert(offsetof(COMP_MoveControlManager_C_DeactivateTurboBoots, CallFunc_Not_PreBool_ReturnValue) == 0x000008, "Member 'COMP_MoveControlManager_C_DeactivateTurboBoots::CallFunc_Not_PreBool_ReturnValue' has a wrong offset!");
static_assert(offsetof(COMP_MoveControlManager_C_DeactivateTurboBoots, CallFunc_EqualEqual_IntInt_ReturnValue) == 0x000009, "Member 'COMP_MoveControlManager_C_DeactivateTurboBoots::CallFunc_EqualEqual_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(COMP_MoveControlManager_C_DeactivateTurboBoots, CallFunc_BooleanOR_ReturnValue) == 0x00000A, "Member 'COMP_MoveControlManager_C_DeactivateTurboBoots::CallFunc_BooleanOR_ReturnValue' has a wrong offset!");
static_assert(offsetof(COMP_MoveControlManager_C_DeactivateTurboBoots, CallFunc_IsValid_ReturnValue) == 0x00000B, "Member 'COMP_MoveControlManager_C_DeactivateTurboBoots::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(COMP_MoveControlManager_C_DeactivateTurboBoots, CallFunc_GetActiveVersionNumber_VersionNumber_1) == 0x00000C, "Member 'COMP_MoveControlManager_C_DeactivateTurboBoots::CallFunc_GetActiveVersionNumber_VersionNumber_1' has a wrong offset!");
static_assert(offsetof(COMP_MoveControlManager_C_DeactivateTurboBoots, CallFunc_DeactivateTurboMechanism_Result) == 0x000010, "Member 'COMP_MoveControlManager_C_DeactivateTurboBoots::CallFunc_DeactivateTurboMechanism_Result' has a wrong offset!");

// Function COMP_MoveControlManager.COMP_MoveControlManager_C.CanStandUp
// 0x01A8 (0x01A8 - 0x0000)
struct COMP_MoveControlManager_C_CanStandUp final
{
public:
	bool                                          Result;                                            // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                StandingCylinderTopLocation;                       // 0x0004(0x000C)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CurrentBotLocation;                                // 0x0010(0x000C)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1C[0x4];                                       // 0x001C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FVector>                        CylinderBotLocations;                              // 0x0020(0x0010)(Edit, BlueprintVisible)
	struct FVector                                PlayerCenterLocation;                              // 0x0030(0x000C)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CapsuleHalfHeight;                                 // 0x003C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CapsuleRadius;                                     // 0x0040(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_44[0x4];                                       // 0x0044(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class AActor*>                         Temp_object_Variable;                              // 0x0048(0x0010)(ConstParm, ReferenceParm)
	int32                                         Temp_int_Array_Index_Variable;                     // 0x0058(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector_X;                            // 0x005C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector_Y;                            // 0x0060(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector_Z;                            // 0x0064(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Subtract_FloatFloat_ReturnValue;          // 0x0068(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Add_FloatFloat_ReturnValue;               // 0x006C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_MakeVector_ReturnValue;                   // 0x0070(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Add_ReturnValue;                    // 0x007C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Array_Get_Item;                           // 0x0080(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Length_ReturnValue;                 // 0x008C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector_X_1;                          // 0x0090(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector_Y_1;                          // 0x0094(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector_Z_1;                          // 0x0098(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector_X_2;                          // 0x009C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector_Y_2;                          // 0x00A0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector_Z_2;                          // 0x00A4(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Subtract_FloatFloat_ReturnValue_1;        // 0x00A8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Loop_Counter_Variable;                    // 0x00AC(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue;                  // 0x00B0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_B1[0x3];                                       // 0x00B1(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Add_IntInt_ReturnValue;                   // 0x00B4(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 CallFunc_GetChannelingInteractable_Result;         // 0x00B8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Multiply_FloatFloat_ReturnValue;          // 0x00C0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_C4[0x4];                                       // 0x00C4(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class AINTERACT_Ladder_C*                     K2Node_DynamicCast_AsINTERACT_Ladder;              // 0x00C8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x00D0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_D1[0x3];                                       // 0x00D1(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_Add_FloatFloat_ReturnValue_1;             // 0x00D4(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_MakeVector_ReturnValue_1;                 // 0x00D8(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_K2_GetComponentLocation_ReturnValue;      // 0x00E4(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Add_ReturnValue_1;                  // 0x00F0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_GetScaledCapsuleHalfHeight_ReturnValue;   // 0x00F4(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_GetScaledCapsuleRadius_ReturnValue;       // 0x00F8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Multiply_FloatFloat_ReturnValue_1;        // 0x00FC(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Add_FloatFloat_ReturnValue_2;             // 0x0100(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FHitResult                             CallFunc_SphereTraceSingle_OutHit;                 // 0x0104(0x0088)(IsPlainOldData, NoDestructor, ContainsInstancedReference)
	bool                                          CallFunc_SphereTraceSingle_ReturnValue;            // 0x018C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_18D[0x3];                                      // 0x018D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_Add_FloatFloat_ReturnValue_3;             // 0x0190(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Not_PreBool_ReturnValue;                  // 0x0194(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_195[0x3];                                      // 0x0195(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                CallFunc_MakeVector_ReturnValue_2;                 // 0x0198(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(COMP_MoveControlManager_C_CanStandUp) == 0x000008, "Wrong alignment on COMP_MoveControlManager_C_CanStandUp");
static_assert(sizeof(COMP_MoveControlManager_C_CanStandUp) == 0x0001A8, "Wrong size on COMP_MoveControlManager_C_CanStandUp");
static_assert(offsetof(COMP_MoveControlManager_C_CanStandUp, Result) == 0x000000, "Member 'COMP_MoveControlManager_C_CanStandUp::Result' has a wrong offset!");
static_assert(offsetof(COMP_MoveControlManager_C_CanStandUp, StandingCylinderTopLocation) == 0x000004, "Member 'COMP_MoveControlManager_C_CanStandUp::StandingCylinderTopLocation' has a wrong offset!");
static_assert(offsetof(COMP_MoveControlManager_C_CanStandUp, CurrentBotLocation) == 0x000010, "Member 'COMP_MoveControlManager_C_CanStandUp::CurrentBotLocation' has a wrong offset!");
static_assert(offsetof(COMP_MoveControlManager_C_CanStandUp, CylinderBotLocations) == 0x000020, "Member 'COMP_MoveControlManager_C_CanStandUp::CylinderBotLocations' has a wrong offset!");
static_assert(offsetof(COMP_MoveControlManager_C_CanStandUp, PlayerCenterLocation) == 0x000030, "Member 'COMP_MoveControlManager_C_CanStandUp::PlayerCenterLocation' has a wrong offset!");
static_assert(offsetof(COMP_MoveControlManager_C_CanStandUp, CapsuleHalfHeight) == 0x00003C, "Member 'COMP_MoveControlManager_C_CanStandUp::CapsuleHalfHeight' has a wrong offset!");
static_assert(offsetof(COMP_MoveControlManager_C_CanStandUp, CapsuleRadius) == 0x000040, "Member 'COMP_MoveControlManager_C_CanStandUp::CapsuleRadius' has a wrong offset!");
static_assert(offsetof(COMP_MoveControlManager_C_CanStandUp, Temp_object_Variable) == 0x000048, "Member 'COMP_MoveControlManager_C_CanStandUp::Temp_object_Variable' has a wrong offset!");
static_assert(offsetof(COMP_MoveControlManager_C_CanStandUp, Temp_int_Array_Index_Variable) == 0x000058, "Member 'COMP_MoveControlManager_C_CanStandUp::Temp_int_Array_Index_Variable' has a wrong offset!");
static_assert(offsetof(COMP_MoveControlManager_C_CanStandUp, CallFunc_BreakVector_X) == 0x00005C, "Member 'COMP_MoveControlManager_C_CanStandUp::CallFunc_BreakVector_X' has a wrong offset!");
static_assert(offsetof(COMP_MoveControlManager_C_CanStandUp, CallFunc_BreakVector_Y) == 0x000060, "Member 'COMP_MoveControlManager_C_CanStandUp::CallFunc_BreakVector_Y' has a wrong offset!");
static_assert(offsetof(COMP_MoveControlManager_C_CanStandUp, CallFunc_BreakVector_Z) == 0x000064, "Member 'COMP_MoveControlManager_C_CanStandUp::CallFunc_BreakVector_Z' has a wrong offset!");
static_assert(offsetof(COMP_MoveControlManager_C_CanStandUp, CallFunc_Subtract_FloatFloat_ReturnValue) == 0x000068, "Member 'COMP_MoveControlManager_C_CanStandUp::CallFunc_Subtract_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(COMP_MoveControlManager_C_CanStandUp, CallFunc_Add_FloatFloat_ReturnValue) == 0x00006C, "Member 'COMP_MoveControlManager_C_CanStandUp::CallFunc_Add_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(COMP_MoveControlManager_C_CanStandUp, CallFunc_MakeVector_ReturnValue) == 0x000070, "Member 'COMP_MoveControlManager_C_CanStandUp::CallFunc_MakeVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(COMP_MoveControlManager_C_CanStandUp, CallFunc_Array_Add_ReturnValue) == 0x00007C, "Member 'COMP_MoveControlManager_C_CanStandUp::CallFunc_Array_Add_ReturnValue' has a wrong offset!");
static_assert(offsetof(COMP_MoveControlManager_C_CanStandUp, CallFunc_Array_Get_Item) == 0x000080, "Member 'COMP_MoveControlManager_C_CanStandUp::CallFunc_Array_Get_Item' has a wrong offset!");
static_assert(offsetof(COMP_MoveControlManager_C_CanStandUp, CallFunc_Array_Length_ReturnValue) == 0x00008C, "Member 'COMP_MoveControlManager_C_CanStandUp::CallFunc_Array_Length_ReturnValue' has a wrong offset!");
static_assert(offsetof(COMP_MoveControlManager_C_CanStandUp, CallFunc_BreakVector_X_1) == 0x000090, "Member 'COMP_MoveControlManager_C_CanStandUp::CallFunc_BreakVector_X_1' has a wrong offset!");
static_assert(offsetof(COMP_MoveControlManager_C_CanStandUp, CallFunc_BreakVector_Y_1) == 0x000094, "Member 'COMP_MoveControlManager_C_CanStandUp::CallFunc_BreakVector_Y_1' has a wrong offset!");
static_assert(offsetof(COMP_MoveControlManager_C_CanStandUp, CallFunc_BreakVector_Z_1) == 0x000098, "Member 'COMP_MoveControlManager_C_CanStandUp::CallFunc_BreakVector_Z_1' has a wrong offset!");
static_assert(offsetof(COMP_MoveControlManager_C_CanStandUp, CallFunc_BreakVector_X_2) == 0x00009C, "Member 'COMP_MoveControlManager_C_CanStandUp::CallFunc_BreakVector_X_2' has a wrong offset!");
static_assert(offsetof(COMP_MoveControlManager_C_CanStandUp, CallFunc_BreakVector_Y_2) == 0x0000A0, "Member 'COMP_MoveControlManager_C_CanStandUp::CallFunc_BreakVector_Y_2' has a wrong offset!");
static_assert(offsetof(COMP_MoveControlManager_C_CanStandUp, CallFunc_BreakVector_Z_2) == 0x0000A4, "Member 'COMP_MoveControlManager_C_CanStandUp::CallFunc_BreakVector_Z_2' has a wrong offset!");
static_assert(offsetof(COMP_MoveControlManager_C_CanStandUp, CallFunc_Subtract_FloatFloat_ReturnValue_1) == 0x0000A8, "Member 'COMP_MoveControlManager_C_CanStandUp::CallFunc_Subtract_FloatFloat_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(COMP_MoveControlManager_C_CanStandUp, Temp_int_Loop_Counter_Variable) == 0x0000AC, "Member 'COMP_MoveControlManager_C_CanStandUp::Temp_int_Loop_Counter_Variable' has a wrong offset!");
static_assert(offsetof(COMP_MoveControlManager_C_CanStandUp, CallFunc_Less_IntInt_ReturnValue) == 0x0000B0, "Member 'COMP_MoveControlManager_C_CanStandUp::CallFunc_Less_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(COMP_MoveControlManager_C_CanStandUp, CallFunc_Add_IntInt_ReturnValue) == 0x0000B4, "Member 'COMP_MoveControlManager_C_CanStandUp::CallFunc_Add_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(COMP_MoveControlManager_C_CanStandUp, CallFunc_GetChannelingInteractable_Result) == 0x0000B8, "Member 'COMP_MoveControlManager_C_CanStandUp::CallFunc_GetChannelingInteractable_Result' has a wrong offset!");
static_assert(offsetof(COMP_MoveControlManager_C_CanStandUp, CallFunc_Multiply_FloatFloat_ReturnValue) == 0x0000C0, "Member 'COMP_MoveControlManager_C_CanStandUp::CallFunc_Multiply_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(COMP_MoveControlManager_C_CanStandUp, K2Node_DynamicCast_AsINTERACT_Ladder) == 0x0000C8, "Member 'COMP_MoveControlManager_C_CanStandUp::K2Node_DynamicCast_AsINTERACT_Ladder' has a wrong offset!");
static_assert(offsetof(COMP_MoveControlManager_C_CanStandUp, K2Node_DynamicCast_bSuccess) == 0x0000D0, "Member 'COMP_MoveControlManager_C_CanStandUp::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(COMP_MoveControlManager_C_CanStandUp, CallFunc_Add_FloatFloat_ReturnValue_1) == 0x0000D4, "Member 'COMP_MoveControlManager_C_CanStandUp::CallFunc_Add_FloatFloat_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(COMP_MoveControlManager_C_CanStandUp, CallFunc_MakeVector_ReturnValue_1) == 0x0000D8, "Member 'COMP_MoveControlManager_C_CanStandUp::CallFunc_MakeVector_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(COMP_MoveControlManager_C_CanStandUp, CallFunc_K2_GetComponentLocation_ReturnValue) == 0x0000E4, "Member 'COMP_MoveControlManager_C_CanStandUp::CallFunc_K2_GetComponentLocation_ReturnValue' has a wrong offset!");
static_assert(offsetof(COMP_MoveControlManager_C_CanStandUp, CallFunc_Array_Add_ReturnValue_1) == 0x0000F0, "Member 'COMP_MoveControlManager_C_CanStandUp::CallFunc_Array_Add_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(COMP_MoveControlManager_C_CanStandUp, CallFunc_GetScaledCapsuleHalfHeight_ReturnValue) == 0x0000F4, "Member 'COMP_MoveControlManager_C_CanStandUp::CallFunc_GetScaledCapsuleHalfHeight_ReturnValue' has a wrong offset!");
static_assert(offsetof(COMP_MoveControlManager_C_CanStandUp, CallFunc_GetScaledCapsuleRadius_ReturnValue) == 0x0000F8, "Member 'COMP_MoveControlManager_C_CanStandUp::CallFunc_GetScaledCapsuleRadius_ReturnValue' has a wrong offset!");
static_assert(offsetof(COMP_MoveControlManager_C_CanStandUp, CallFunc_Multiply_FloatFloat_ReturnValue_1) == 0x0000FC, "Member 'COMP_MoveControlManager_C_CanStandUp::CallFunc_Multiply_FloatFloat_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(COMP_MoveControlManager_C_CanStandUp, CallFunc_Add_FloatFloat_ReturnValue_2) == 0x000100, "Member 'COMP_MoveControlManager_C_CanStandUp::CallFunc_Add_FloatFloat_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(COMP_MoveControlManager_C_CanStandUp, CallFunc_SphereTraceSingle_OutHit) == 0x000104, "Member 'COMP_MoveControlManager_C_CanStandUp::CallFunc_SphereTraceSingle_OutHit' has a wrong offset!");
static_assert(offsetof(COMP_MoveControlManager_C_CanStandUp, CallFunc_SphereTraceSingle_ReturnValue) == 0x00018C, "Member 'COMP_MoveControlManager_C_CanStandUp::CallFunc_SphereTraceSingle_ReturnValue' has a wrong offset!");
static_assert(offsetof(COMP_MoveControlManager_C_CanStandUp, CallFunc_Add_FloatFloat_ReturnValue_3) == 0x000190, "Member 'COMP_MoveControlManager_C_CanStandUp::CallFunc_Add_FloatFloat_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(COMP_MoveControlManager_C_CanStandUp, CallFunc_Not_PreBool_ReturnValue) == 0x000194, "Member 'COMP_MoveControlManager_C_CanStandUp::CallFunc_Not_PreBool_ReturnValue' has a wrong offset!");
static_assert(offsetof(COMP_MoveControlManager_C_CanStandUp, CallFunc_MakeVector_ReturnValue_2) == 0x000198, "Member 'COMP_MoveControlManager_C_CanStandUp::CallFunc_MakeVector_ReturnValue_2' has a wrong offset!");

// Function COMP_MoveControlManager.COMP_MoveControlManager_C.SetMoveActionInputValue
// 0x0014 (0x0014 - 0x0000)
struct COMP_MoveControlManager_C_SetMoveActionInputValue final
{
public:
	ENUM_MoveInputActionType                      ActionType;                                        // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         InputValue;                                        // 0x0004(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Conv_ByteToInt_ReturnValue;               // 0x0008(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Array_IsValidIndex_ReturnValue;           // 0x000C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_D[0x3];                                        // 0x000D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Conv_ByteToInt_ReturnValue_1;             // 0x0010(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(COMP_MoveControlManager_C_SetMoveActionInputValue) == 0x000004, "Wrong alignment on COMP_MoveControlManager_C_SetMoveActionInputValue");
static_assert(sizeof(COMP_MoveControlManager_C_SetMoveActionInputValue) == 0x000014, "Wrong size on COMP_MoveControlManager_C_SetMoveActionInputValue");
static_assert(offsetof(COMP_MoveControlManager_C_SetMoveActionInputValue, ActionType) == 0x000000, "Member 'COMP_MoveControlManager_C_SetMoveActionInputValue::ActionType' has a wrong offset!");
static_assert(offsetof(COMP_MoveControlManager_C_SetMoveActionInputValue, InputValue) == 0x000004, "Member 'COMP_MoveControlManager_C_SetMoveActionInputValue::InputValue' has a wrong offset!");
static_assert(offsetof(COMP_MoveControlManager_C_SetMoveActionInputValue, CallFunc_Conv_ByteToInt_ReturnValue) == 0x000008, "Member 'COMP_MoveControlManager_C_SetMoveActionInputValue::CallFunc_Conv_ByteToInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(COMP_MoveControlManager_C_SetMoveActionInputValue, CallFunc_Array_IsValidIndex_ReturnValue) == 0x00000C, "Member 'COMP_MoveControlManager_C_SetMoveActionInputValue::CallFunc_Array_IsValidIndex_ReturnValue' has a wrong offset!");
static_assert(offsetof(COMP_MoveControlManager_C_SetMoveActionInputValue, CallFunc_Conv_ByteToInt_ReturnValue_1) == 0x000010, "Member 'COMP_MoveControlManager_C_SetMoveActionInputValue::CallFunc_Conv_ByteToInt_ReturnValue_1' has a wrong offset!");

// Function COMP_MoveControlManager.COMP_MoveControlManager_C.UpdateCameraBanking
// 0x0188 (0x0188 - 0x0000)
struct COMP_MoveControlManager_C_UpdateCameraBanking final
{
public:
	float                                         DeltaTime;                                         // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         AccessibilityScale;                                // 0x0004(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         TargetStrafeBankScale;                             // 0x0008(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         StrafeSpeed;                                       // 0x000C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         TargetStrafeBankRoll;                              // 0x0010(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         TargetTurnBankRoll;                                // 0x0014(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Temp_float_Variable;                               // 0x0018(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Temp_float_Variable_1;                             // 0x001C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Variable;                                // 0x0020(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Temp_bool_Variable_1;                              // 0x0021(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Temp_bool_Variable_2;                              // 0x0022(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_23[0x1];                                       // 0x0023(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         Temp_float_Variable_2;                             // 0x0024(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector2D_X;                          // 0x0028(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector2D_Y;                          // 0x002C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_SignOfFloat_ReturnValue;                  // 0x0030(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector2D_X_1;                        // 0x0034(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector2D_Y_1;                        // 0x0038(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Variable_3;                              // 0x003C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_3D[0x3];                                       // 0x003D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_Divide_FloatFloat_ReturnValue;            // 0x0040(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_GetCurrentBaseSprintSpeed_Speed;          // 0x0044(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_GetGameTimeInSeconds_ReturnValue;         // 0x0048(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector2D_X_2;                        // 0x004C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector2D_Y_2;                        // 0x0050(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_NotEqual_FloatFloat_ReturnValue;          // 0x0054(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_55[0x3];                                       // 0x0055(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         K2Node_Select_Default;                             // 0x0058(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Divide_FloatFloat_ReturnValue_1;          // 0x005C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector2D_X_3;                        // 0x0060(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector2D_Y_3;                        // 0x0064(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_NotEqual_FloatFloat_ReturnValue_1;        // 0x0068(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_69[0x3];                                       // 0x0069(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         K2Node_Select_Default_1;                           // 0x006C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Multiply_FloatFloat_ReturnValue;          // 0x0070(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector2D_X_4;                        // 0x0074(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector2D_Y_4;                        // 0x0078(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Divide_FloatFloat_ReturnValue_2;          // 0x007C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Abs_ReturnValue;                          // 0x0080(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_FMin_ReturnValue;                         // 0x0084(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         K2Node_Select_Default_2;                           // 0x0088(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Ease_ReturnValue;                         // 0x008C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Multiply_FloatFloat_ReturnValue_1;        // 0x0090(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Multiply_FloatFloat_ReturnValue_2;        // 0x0094(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Multiply_FloatFloat_ReturnValue_3;        // 0x0098(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Multiply_FloatFloat_ReturnValue_4;        // 0x009C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Add_FloatFloat_ReturnValue;               // 0x00A0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_FClamp_ReturnValue;                       // 0x00A4(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_SignOfFloat_ReturnValue_1;                // 0x00A8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Abs_ReturnValue_1;                        // 0x00AC(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         K2Node_Select_Default_3;                           // 0x00B0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector2D_X_5;                        // 0x00B4(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector2D_Y_5;                        // 0x00B8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Ease_ReturnValue_1;                       // 0x00BC(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Abs_ReturnValue_2;                        // 0x00C0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Multiply_FloatFloat_ReturnValue_5;        // 0x00C4(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Multiply_FloatFloat_ReturnValue_6;        // 0x00C8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Divide_FloatFloat_ReturnValue_3;          // 0x00CC(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_FClamp_ReturnValue_1;                     // 0x00D0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_GetActorRightVector_ReturnValue;          // 0x00D4(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Dot_VectorVector_ReturnValue;             // 0x00E0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Add_FloatFloat_ReturnValue_1;             // 0x00E4(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_GetSmoothedFloat_ReturnValue;             // 0x00E8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Multiply_FloatFloat_ReturnValue_7;        // 0x00EC(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Add_FloatFloat_ReturnValue_2;             // 0x00F0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               CallFunc_MakeRotator_ReturnValue;                  // 0x00F4(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FHitResult                             CallFunc_K2_SetRelativeRotation_SweepHitResult;    // 0x0100(0x0088)(IsPlainOldData, NoDestructor, ContainsInstancedReference)
};
static_assert(alignof(COMP_MoveControlManager_C_UpdateCameraBanking) == 0x000004, "Wrong alignment on COMP_MoveControlManager_C_UpdateCameraBanking");
static_assert(sizeof(COMP_MoveControlManager_C_UpdateCameraBanking) == 0x000188, "Wrong size on COMP_MoveControlManager_C_UpdateCameraBanking");
static_assert(offsetof(COMP_MoveControlManager_C_UpdateCameraBanking, DeltaTime) == 0x000000, "Member 'COMP_MoveControlManager_C_UpdateCameraBanking::DeltaTime' has a wrong offset!");
static_assert(offsetof(COMP_MoveControlManager_C_UpdateCameraBanking, AccessibilityScale) == 0x000004, "Member 'COMP_MoveControlManager_C_UpdateCameraBanking::AccessibilityScale' has a wrong offset!");
static_assert(offsetof(COMP_MoveControlManager_C_UpdateCameraBanking, TargetStrafeBankScale) == 0x000008, "Member 'COMP_MoveControlManager_C_UpdateCameraBanking::TargetStrafeBankScale' has a wrong offset!");
static_assert(offsetof(COMP_MoveControlManager_C_UpdateCameraBanking, StrafeSpeed) == 0x00000C, "Member 'COMP_MoveControlManager_C_UpdateCameraBanking::StrafeSpeed' has a wrong offset!");
static_assert(offsetof(COMP_MoveControlManager_C_UpdateCameraBanking, TargetStrafeBankRoll) == 0x000010, "Member 'COMP_MoveControlManager_C_UpdateCameraBanking::TargetStrafeBankRoll' has a wrong offset!");
static_assert(offsetof(COMP_MoveControlManager_C_UpdateCameraBanking, TargetTurnBankRoll) == 0x000014, "Member 'COMP_MoveControlManager_C_UpdateCameraBanking::TargetTurnBankRoll' has a wrong offset!");
static_assert(offsetof(COMP_MoveControlManager_C_UpdateCameraBanking, Temp_float_Variable) == 0x000018, "Member 'COMP_MoveControlManager_C_UpdateCameraBanking::Temp_float_Variable' has a wrong offset!");
static_assert(offsetof(COMP_MoveControlManager_C_UpdateCameraBanking, Temp_float_Variable_1) == 0x00001C, "Member 'COMP_MoveControlManager_C_UpdateCameraBanking::Temp_float_Variable_1' has a wrong offset!");
static_assert(offsetof(COMP_MoveControlManager_C_UpdateCameraBanking, Temp_bool_Variable) == 0x000020, "Member 'COMP_MoveControlManager_C_UpdateCameraBanking::Temp_bool_Variable' has a wrong offset!");
static_assert(offsetof(COMP_MoveControlManager_C_UpdateCameraBanking, Temp_bool_Variable_1) == 0x000021, "Member 'COMP_MoveControlManager_C_UpdateCameraBanking::Temp_bool_Variable_1' has a wrong offset!");
static_assert(offsetof(COMP_MoveControlManager_C_UpdateCameraBanking, Temp_bool_Variable_2) == 0x000022, "Member 'COMP_MoveControlManager_C_UpdateCameraBanking::Temp_bool_Variable_2' has a wrong offset!");
static_assert(offsetof(COMP_MoveControlManager_C_UpdateCameraBanking, Temp_float_Variable_2) == 0x000024, "Member 'COMP_MoveControlManager_C_UpdateCameraBanking::Temp_float_Variable_2' has a wrong offset!");
static_assert(offsetof(COMP_MoveControlManager_C_UpdateCameraBanking, CallFunc_BreakVector2D_X) == 0x000028, "Member 'COMP_MoveControlManager_C_UpdateCameraBanking::CallFunc_BreakVector2D_X' has a wrong offset!");
static_assert(offsetof(COMP_MoveControlManager_C_UpdateCameraBanking, CallFunc_BreakVector2D_Y) == 0x00002C, "Member 'COMP_MoveControlManager_C_UpdateCameraBanking::CallFunc_BreakVector2D_Y' has a wrong offset!");
static_assert(offsetof(COMP_MoveControlManager_C_UpdateCameraBanking, CallFunc_SignOfFloat_ReturnValue) == 0x000030, "Member 'COMP_MoveControlManager_C_UpdateCameraBanking::CallFunc_SignOfFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(COMP_MoveControlManager_C_UpdateCameraBanking, CallFunc_BreakVector2D_X_1) == 0x000034, "Member 'COMP_MoveControlManager_C_UpdateCameraBanking::CallFunc_BreakVector2D_X_1' has a wrong offset!");
static_assert(offsetof(COMP_MoveControlManager_C_UpdateCameraBanking, CallFunc_BreakVector2D_Y_1) == 0x000038, "Member 'COMP_MoveControlManager_C_UpdateCameraBanking::CallFunc_BreakVector2D_Y_1' has a wrong offset!");
static_assert(offsetof(COMP_MoveControlManager_C_UpdateCameraBanking, Temp_bool_Variable_3) == 0x00003C, "Member 'COMP_MoveControlManager_C_UpdateCameraBanking::Temp_bool_Variable_3' has a wrong offset!");
static_assert(offsetof(COMP_MoveControlManager_C_UpdateCameraBanking, CallFunc_Divide_FloatFloat_ReturnValue) == 0x000040, "Member 'COMP_MoveControlManager_C_UpdateCameraBanking::CallFunc_Divide_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(COMP_MoveControlManager_C_UpdateCameraBanking, CallFunc_GetCurrentBaseSprintSpeed_Speed) == 0x000044, "Member 'COMP_MoveControlManager_C_UpdateCameraBanking::CallFunc_GetCurrentBaseSprintSpeed_Speed' has a wrong offset!");
static_assert(offsetof(COMP_MoveControlManager_C_UpdateCameraBanking, CallFunc_GetGameTimeInSeconds_ReturnValue) == 0x000048, "Member 'COMP_MoveControlManager_C_UpdateCameraBanking::CallFunc_GetGameTimeInSeconds_ReturnValue' has a wrong offset!");
static_assert(offsetof(COMP_MoveControlManager_C_UpdateCameraBanking, CallFunc_BreakVector2D_X_2) == 0x00004C, "Member 'COMP_MoveControlManager_C_UpdateCameraBanking::CallFunc_BreakVector2D_X_2' has a wrong offset!");
static_assert(offsetof(COMP_MoveControlManager_C_UpdateCameraBanking, CallFunc_BreakVector2D_Y_2) == 0x000050, "Member 'COMP_MoveControlManager_C_UpdateCameraBanking::CallFunc_BreakVector2D_Y_2' has a wrong offset!");
static_assert(offsetof(COMP_MoveControlManager_C_UpdateCameraBanking, CallFunc_NotEqual_FloatFloat_ReturnValue) == 0x000054, "Member 'COMP_MoveControlManager_C_UpdateCameraBanking::CallFunc_NotEqual_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(COMP_MoveControlManager_C_UpdateCameraBanking, K2Node_Select_Default) == 0x000058, "Member 'COMP_MoveControlManager_C_UpdateCameraBanking::K2Node_Select_Default' has a wrong offset!");
static_assert(offsetof(COMP_MoveControlManager_C_UpdateCameraBanking, CallFunc_Divide_FloatFloat_ReturnValue_1) == 0x00005C, "Member 'COMP_MoveControlManager_C_UpdateCameraBanking::CallFunc_Divide_FloatFloat_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(COMP_MoveControlManager_C_UpdateCameraBanking, CallFunc_BreakVector2D_X_3) == 0x000060, "Member 'COMP_MoveControlManager_C_UpdateCameraBanking::CallFunc_BreakVector2D_X_3' has a wrong offset!");
static_assert(offsetof(COMP_MoveControlManager_C_UpdateCameraBanking, CallFunc_BreakVector2D_Y_3) == 0x000064, "Member 'COMP_MoveControlManager_C_UpdateCameraBanking::CallFunc_BreakVector2D_Y_3' has a wrong offset!");
static_assert(offsetof(COMP_MoveControlManager_C_UpdateCameraBanking, CallFunc_NotEqual_FloatFloat_ReturnValue_1) == 0x000068, "Member 'COMP_MoveControlManager_C_UpdateCameraBanking::CallFunc_NotEqual_FloatFloat_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(COMP_MoveControlManager_C_UpdateCameraBanking, K2Node_Select_Default_1) == 0x00006C, "Member 'COMP_MoveControlManager_C_UpdateCameraBanking::K2Node_Select_Default_1' has a wrong offset!");
static_assert(offsetof(COMP_MoveControlManager_C_UpdateCameraBanking, CallFunc_Multiply_FloatFloat_ReturnValue) == 0x000070, "Member 'COMP_MoveControlManager_C_UpdateCameraBanking::CallFunc_Multiply_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(COMP_MoveControlManager_C_UpdateCameraBanking, CallFunc_BreakVector2D_X_4) == 0x000074, "Member 'COMP_MoveControlManager_C_UpdateCameraBanking::CallFunc_BreakVector2D_X_4' has a wrong offset!");
static_assert(offsetof(COMP_MoveControlManager_C_UpdateCameraBanking, CallFunc_BreakVector2D_Y_4) == 0x000078, "Member 'COMP_MoveControlManager_C_UpdateCameraBanking::CallFunc_BreakVector2D_Y_4' has a wrong offset!");
static_assert(offsetof(COMP_MoveControlManager_C_UpdateCameraBanking, CallFunc_Divide_FloatFloat_ReturnValue_2) == 0x00007C, "Member 'COMP_MoveControlManager_C_UpdateCameraBanking::CallFunc_Divide_FloatFloat_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(COMP_MoveControlManager_C_UpdateCameraBanking, CallFunc_Abs_ReturnValue) == 0x000080, "Member 'COMP_MoveControlManager_C_UpdateCameraBanking::CallFunc_Abs_ReturnValue' has a wrong offset!");
static_assert(offsetof(COMP_MoveControlManager_C_UpdateCameraBanking, CallFunc_FMin_ReturnValue) == 0x000084, "Member 'COMP_MoveControlManager_C_UpdateCameraBanking::CallFunc_FMin_ReturnValue' has a wrong offset!");
static_assert(offsetof(COMP_MoveControlManager_C_UpdateCameraBanking, K2Node_Select_Default_2) == 0x000088, "Member 'COMP_MoveControlManager_C_UpdateCameraBanking::K2Node_Select_Default_2' has a wrong offset!");
static_assert(offsetof(COMP_MoveControlManager_C_UpdateCameraBanking, CallFunc_Ease_ReturnValue) == 0x00008C, "Member 'COMP_MoveControlManager_C_UpdateCameraBanking::CallFunc_Ease_ReturnValue' has a wrong offset!");
static_assert(offsetof(COMP_MoveControlManager_C_UpdateCameraBanking, CallFunc_Multiply_FloatFloat_ReturnValue_1) == 0x000090, "Member 'COMP_MoveControlManager_C_UpdateCameraBanking::CallFunc_Multiply_FloatFloat_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(COMP_MoveControlManager_C_UpdateCameraBanking, CallFunc_Multiply_FloatFloat_ReturnValue_2) == 0x000094, "Member 'COMP_MoveControlManager_C_UpdateCameraBanking::CallFunc_Multiply_FloatFloat_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(COMP_MoveControlManager_C_UpdateCameraBanking, CallFunc_Multiply_FloatFloat_ReturnValue_3) == 0x000098, "Member 'COMP_MoveControlManager_C_UpdateCameraBanking::CallFunc_Multiply_FloatFloat_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(COMP_MoveControlManager_C_UpdateCameraBanking, CallFunc_Multiply_FloatFloat_ReturnValue_4) == 0x00009C, "Member 'COMP_MoveControlManager_C_UpdateCameraBanking::CallFunc_Multiply_FloatFloat_ReturnValue_4' has a wrong offset!");
static_assert(offsetof(COMP_MoveControlManager_C_UpdateCameraBanking, CallFunc_Add_FloatFloat_ReturnValue) == 0x0000A0, "Member 'COMP_MoveControlManager_C_UpdateCameraBanking::CallFunc_Add_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(COMP_MoveControlManager_C_UpdateCameraBanking, CallFunc_FClamp_ReturnValue) == 0x0000A4, "Member 'COMP_MoveControlManager_C_UpdateCameraBanking::CallFunc_FClamp_ReturnValue' has a wrong offset!");
static_assert(offsetof(COMP_MoveControlManager_C_UpdateCameraBanking, CallFunc_SignOfFloat_ReturnValue_1) == 0x0000A8, "Member 'COMP_MoveControlManager_C_UpdateCameraBanking::CallFunc_SignOfFloat_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(COMP_MoveControlManager_C_UpdateCameraBanking, CallFunc_Abs_ReturnValue_1) == 0x0000AC, "Member 'COMP_MoveControlManager_C_UpdateCameraBanking::CallFunc_Abs_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(COMP_MoveControlManager_C_UpdateCameraBanking, K2Node_Select_Default_3) == 0x0000B0, "Member 'COMP_MoveControlManager_C_UpdateCameraBanking::K2Node_Select_Default_3' has a wrong offset!");
static_assert(offsetof(COMP_MoveControlManager_C_UpdateCameraBanking, CallFunc_BreakVector2D_X_5) == 0x0000B4, "Member 'COMP_MoveControlManager_C_UpdateCameraBanking::CallFunc_BreakVector2D_X_5' has a wrong offset!");
static_assert(offsetof(COMP_MoveControlManager_C_UpdateCameraBanking, CallFunc_BreakVector2D_Y_5) == 0x0000B8, "Member 'COMP_MoveControlManager_C_UpdateCameraBanking::CallFunc_BreakVector2D_Y_5' has a wrong offset!");
static_assert(offsetof(COMP_MoveControlManager_C_UpdateCameraBanking, CallFunc_Ease_ReturnValue_1) == 0x0000BC, "Member 'COMP_MoveControlManager_C_UpdateCameraBanking::CallFunc_Ease_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(COMP_MoveControlManager_C_UpdateCameraBanking, CallFunc_Abs_ReturnValue_2) == 0x0000C0, "Member 'COMP_MoveControlManager_C_UpdateCameraBanking::CallFunc_Abs_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(COMP_MoveControlManager_C_UpdateCameraBanking, CallFunc_Multiply_FloatFloat_ReturnValue_5) == 0x0000C4, "Member 'COMP_MoveControlManager_C_UpdateCameraBanking::CallFunc_Multiply_FloatFloat_ReturnValue_5' has a wrong offset!");
static_assert(offsetof(COMP_MoveControlManager_C_UpdateCameraBanking, CallFunc_Multiply_FloatFloat_ReturnValue_6) == 0x0000C8, "Member 'COMP_MoveControlManager_C_UpdateCameraBanking::CallFunc_Multiply_FloatFloat_ReturnValue_6' has a wrong offset!");
static_assert(offsetof(COMP_MoveControlManager_C_UpdateCameraBanking, CallFunc_Divide_FloatFloat_ReturnValue_3) == 0x0000CC, "Member 'COMP_MoveControlManager_C_UpdateCameraBanking::CallFunc_Divide_FloatFloat_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(COMP_MoveControlManager_C_UpdateCameraBanking, CallFunc_FClamp_ReturnValue_1) == 0x0000D0, "Member 'COMP_MoveControlManager_C_UpdateCameraBanking::CallFunc_FClamp_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(COMP_MoveControlManager_C_UpdateCameraBanking, CallFunc_GetActorRightVector_ReturnValue) == 0x0000D4, "Member 'COMP_MoveControlManager_C_UpdateCameraBanking::CallFunc_GetActorRightVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(COMP_MoveControlManager_C_UpdateCameraBanking, CallFunc_Dot_VectorVector_ReturnValue) == 0x0000E0, "Member 'COMP_MoveControlManager_C_UpdateCameraBanking::CallFunc_Dot_VectorVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(COMP_MoveControlManager_C_UpdateCameraBanking, CallFunc_Add_FloatFloat_ReturnValue_1) == 0x0000E4, "Member 'COMP_MoveControlManager_C_UpdateCameraBanking::CallFunc_Add_FloatFloat_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(COMP_MoveControlManager_C_UpdateCameraBanking, CallFunc_GetSmoothedFloat_ReturnValue) == 0x0000E8, "Member 'COMP_MoveControlManager_C_UpdateCameraBanking::CallFunc_GetSmoothedFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(COMP_MoveControlManager_C_UpdateCameraBanking, CallFunc_Multiply_FloatFloat_ReturnValue_7) == 0x0000EC, "Member 'COMP_MoveControlManager_C_UpdateCameraBanking::CallFunc_Multiply_FloatFloat_ReturnValue_7' has a wrong offset!");
static_assert(offsetof(COMP_MoveControlManager_C_UpdateCameraBanking, CallFunc_Add_FloatFloat_ReturnValue_2) == 0x0000F0, "Member 'COMP_MoveControlManager_C_UpdateCameraBanking::CallFunc_Add_FloatFloat_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(COMP_MoveControlManager_C_UpdateCameraBanking, CallFunc_MakeRotator_ReturnValue) == 0x0000F4, "Member 'COMP_MoveControlManager_C_UpdateCameraBanking::CallFunc_MakeRotator_ReturnValue' has a wrong offset!");
static_assert(offsetof(COMP_MoveControlManager_C_UpdateCameraBanking, CallFunc_K2_SetRelativeRotation_SweepHitResult) == 0x000100, "Member 'COMP_MoveControlManager_C_UpdateCameraBanking::CallFunc_K2_SetRelativeRotation_SweepHitResult' has a wrong offset!");

// Function COMP_MoveControlManager.COMP_MoveControlManager_C.UpdateFootsteps
// 0x00C8 (0x00C8 - 0x0000)
struct COMP_MoveControlManager_C_UpdateFootsteps final
{
public:
	float                                         DeltaTime;                                         // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         MovespeedScale;                                    // 0x0004(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CurrentFootstepDuration;                           // 0x0008(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Multiply_FloatFloat_ReturnValue;          // 0x000C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_GetCurrentMaxSprintSpeed_Speed;           // 0x0010(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_GetCurrentMaxSprintSpeed_Speed_1;         // 0x0014(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UAnimInstance*                          CallFunc_GetAnimInstance_ReturnValue;              // 0x0018(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TScriptInterface<class IINTERF_ANIM_Hacker_C> K2Node_DynamicCast_AsINTERF_ANIM_Hacker;           // 0x0020(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0030(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_31[0x3];                                       // 0x0031(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Multiply_IntInt_ReturnValue;              // 0x0034(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_SetWalkPhase_Result;                      // 0x0038(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_39[0x3];                                       // 0x0039(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_Divide_FloatFloat_ReturnValue;            // 0x003C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Subtract_FloatFloat_ReturnValue;          // 0x0040(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_FMin_ReturnValue;                         // 0x0044(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Variable;                                 // 0x0048(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Subtract_FloatFloat_ReturnValue_1;        // 0x004C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Greater_FloatFloat_ReturnValue;           // 0x0050(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_51[0x3];                                       // 0x0051(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_Subtract_FloatFloat_ReturnValue_2;        // 0x0054(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Divide_FloatFloat_ReturnValue_1;          // 0x0058(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_FMin_ReturnValue_1;                       // 0x005C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Add_FloatFloat_ReturnValue;               // 0x0060(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Divide_FloatFloat_ReturnValue_2;          // 0x0064(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Subtract_FloatFloat_ReturnValue_3;        // 0x0068(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Divide_FloatFloat_ReturnValue_3;          // 0x006C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Greater_FloatFloat_ReturnValue_1;         // 0x0070(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_71[0x3];                                       // 0x0071(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_FMin_ReturnValue_2;                       // 0x0074(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Add_FloatFloat_ReturnValue_1;             // 0x0078(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Divide_FloatFloat_ReturnValue_4;          // 0x007C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Temp_float_Variable;                               // 0x0080(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Add_FloatFloat_ReturnValue_2;             // 0x0084(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_FloatFloat_ReturnValue;              // 0x0088(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Less_FloatFloat_ReturnValue_1;            // 0x0089(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_8A[0x2];                                       // 0x008A(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_Add_FloatFloat_ReturnValue_3;             // 0x008C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_GreaterEqual_FloatFloat_ReturnValue;      // 0x0090(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BooleanOR_ReturnValue;                    // 0x0091(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_GreaterEqual_FloatFloat_ReturnValue_1;    // 0x0092(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BooleanAND_ReturnValue;                   // 0x0093(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                         CallFunc_Subtract_FloatFloat_ReturnValue_4;        // 0x0094(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_GreaterEqual_FloatFloat_ReturnValue_2;    // 0x0098(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Less_IntInt_ReturnValue;                  // 0x0099(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Greater_IntInt_ReturnValue;               // 0x009A(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_9B[0x1];                                       // 0x009B(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_Divide_FloatFloat_ReturnValue_5;          // 0x009C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector2D_X;                          // 0x00A0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector2D_Y;                          // 0x00A4(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Add_FloatFloat_ReturnValue_4;             // 0x00A8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Lerp_ReturnValue;                         // 0x00AC(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector2D_X_1;                        // 0x00B0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector2D_Y_1;                        // 0x00B4(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector2D_X_2;                        // 0x00B8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector2D_Y_2;                        // 0x00BC(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Lerp_ReturnValue_1;                       // 0x00C0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Greater_FloatFloat_ReturnValue_2;         // 0x00C4(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Greater_FloatFloat_ReturnValue_3;         // 0x00C5(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BooleanAND_ReturnValue_1;                 // 0x00C6(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(COMP_MoveControlManager_C_UpdateFootsteps) == 0x000008, "Wrong alignment on COMP_MoveControlManager_C_UpdateFootsteps");
static_assert(sizeof(COMP_MoveControlManager_C_UpdateFootsteps) == 0x0000C8, "Wrong size on COMP_MoveControlManager_C_UpdateFootsteps");
static_assert(offsetof(COMP_MoveControlManager_C_UpdateFootsteps, DeltaTime) == 0x000000, "Member 'COMP_MoveControlManager_C_UpdateFootsteps::DeltaTime' has a wrong offset!");
static_assert(offsetof(COMP_MoveControlManager_C_UpdateFootsteps, MovespeedScale) == 0x000004, "Member 'COMP_MoveControlManager_C_UpdateFootsteps::MovespeedScale' has a wrong offset!");
static_assert(offsetof(COMP_MoveControlManager_C_UpdateFootsteps, CurrentFootstepDuration) == 0x000008, "Member 'COMP_MoveControlManager_C_UpdateFootsteps::CurrentFootstepDuration' has a wrong offset!");
static_assert(offsetof(COMP_MoveControlManager_C_UpdateFootsteps, CallFunc_Multiply_FloatFloat_ReturnValue) == 0x00000C, "Member 'COMP_MoveControlManager_C_UpdateFootsteps::CallFunc_Multiply_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(COMP_MoveControlManager_C_UpdateFootsteps, CallFunc_GetCurrentMaxSprintSpeed_Speed) == 0x000010, "Member 'COMP_MoveControlManager_C_UpdateFootsteps::CallFunc_GetCurrentMaxSprintSpeed_Speed' has a wrong offset!");
static_assert(offsetof(COMP_MoveControlManager_C_UpdateFootsteps, CallFunc_GetCurrentMaxSprintSpeed_Speed_1) == 0x000014, "Member 'COMP_MoveControlManager_C_UpdateFootsteps::CallFunc_GetCurrentMaxSprintSpeed_Speed_1' has a wrong offset!");
static_assert(offsetof(COMP_MoveControlManager_C_UpdateFootsteps, CallFunc_GetAnimInstance_ReturnValue) == 0x000018, "Member 'COMP_MoveControlManager_C_UpdateFootsteps::CallFunc_GetAnimInstance_ReturnValue' has a wrong offset!");
static_assert(offsetof(COMP_MoveControlManager_C_UpdateFootsteps, K2Node_DynamicCast_AsINTERF_ANIM_Hacker) == 0x000020, "Member 'COMP_MoveControlManager_C_UpdateFootsteps::K2Node_DynamicCast_AsINTERF_ANIM_Hacker' has a wrong offset!");
static_assert(offsetof(COMP_MoveControlManager_C_UpdateFootsteps, K2Node_DynamicCast_bSuccess) == 0x000030, "Member 'COMP_MoveControlManager_C_UpdateFootsteps::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(COMP_MoveControlManager_C_UpdateFootsteps, CallFunc_Multiply_IntInt_ReturnValue) == 0x000034, "Member 'COMP_MoveControlManager_C_UpdateFootsteps::CallFunc_Multiply_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(COMP_MoveControlManager_C_UpdateFootsteps, CallFunc_SetWalkPhase_Result) == 0x000038, "Member 'COMP_MoveControlManager_C_UpdateFootsteps::CallFunc_SetWalkPhase_Result' has a wrong offset!");
static_assert(offsetof(COMP_MoveControlManager_C_UpdateFootsteps, CallFunc_Divide_FloatFloat_ReturnValue) == 0x00003C, "Member 'COMP_MoveControlManager_C_UpdateFootsteps::CallFunc_Divide_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(COMP_MoveControlManager_C_UpdateFootsteps, CallFunc_Subtract_FloatFloat_ReturnValue) == 0x000040, "Member 'COMP_MoveControlManager_C_UpdateFootsteps::CallFunc_Subtract_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(COMP_MoveControlManager_C_UpdateFootsteps, CallFunc_FMin_ReturnValue) == 0x000044, "Member 'COMP_MoveControlManager_C_UpdateFootsteps::CallFunc_FMin_ReturnValue' has a wrong offset!");
static_assert(offsetof(COMP_MoveControlManager_C_UpdateFootsteps, Temp_int_Variable) == 0x000048, "Member 'COMP_MoveControlManager_C_UpdateFootsteps::Temp_int_Variable' has a wrong offset!");
static_assert(offsetof(COMP_MoveControlManager_C_UpdateFootsteps, CallFunc_Subtract_FloatFloat_ReturnValue_1) == 0x00004C, "Member 'COMP_MoveControlManager_C_UpdateFootsteps::CallFunc_Subtract_FloatFloat_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(COMP_MoveControlManager_C_UpdateFootsteps, CallFunc_Greater_FloatFloat_ReturnValue) == 0x000050, "Member 'COMP_MoveControlManager_C_UpdateFootsteps::CallFunc_Greater_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(COMP_MoveControlManager_C_UpdateFootsteps, CallFunc_Subtract_FloatFloat_ReturnValue_2) == 0x000054, "Member 'COMP_MoveControlManager_C_UpdateFootsteps::CallFunc_Subtract_FloatFloat_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(COMP_MoveControlManager_C_UpdateFootsteps, CallFunc_Divide_FloatFloat_ReturnValue_1) == 0x000058, "Member 'COMP_MoveControlManager_C_UpdateFootsteps::CallFunc_Divide_FloatFloat_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(COMP_MoveControlManager_C_UpdateFootsteps, CallFunc_FMin_ReturnValue_1) == 0x00005C, "Member 'COMP_MoveControlManager_C_UpdateFootsteps::CallFunc_FMin_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(COMP_MoveControlManager_C_UpdateFootsteps, CallFunc_Add_FloatFloat_ReturnValue) == 0x000060, "Member 'COMP_MoveControlManager_C_UpdateFootsteps::CallFunc_Add_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(COMP_MoveControlManager_C_UpdateFootsteps, CallFunc_Divide_FloatFloat_ReturnValue_2) == 0x000064, "Member 'COMP_MoveControlManager_C_UpdateFootsteps::CallFunc_Divide_FloatFloat_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(COMP_MoveControlManager_C_UpdateFootsteps, CallFunc_Subtract_FloatFloat_ReturnValue_3) == 0x000068, "Member 'COMP_MoveControlManager_C_UpdateFootsteps::CallFunc_Subtract_FloatFloat_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(COMP_MoveControlManager_C_UpdateFootsteps, CallFunc_Divide_FloatFloat_ReturnValue_3) == 0x00006C, "Member 'COMP_MoveControlManager_C_UpdateFootsteps::CallFunc_Divide_FloatFloat_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(COMP_MoveControlManager_C_UpdateFootsteps, CallFunc_Greater_FloatFloat_ReturnValue_1) == 0x000070, "Member 'COMP_MoveControlManager_C_UpdateFootsteps::CallFunc_Greater_FloatFloat_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(COMP_MoveControlManager_C_UpdateFootsteps, CallFunc_FMin_ReturnValue_2) == 0x000074, "Member 'COMP_MoveControlManager_C_UpdateFootsteps::CallFunc_FMin_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(COMP_MoveControlManager_C_UpdateFootsteps, CallFunc_Add_FloatFloat_ReturnValue_1) == 0x000078, "Member 'COMP_MoveControlManager_C_UpdateFootsteps::CallFunc_Add_FloatFloat_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(COMP_MoveControlManager_C_UpdateFootsteps, CallFunc_Divide_FloatFloat_ReturnValue_4) == 0x00007C, "Member 'COMP_MoveControlManager_C_UpdateFootsteps::CallFunc_Divide_FloatFloat_ReturnValue_4' has a wrong offset!");
static_assert(offsetof(COMP_MoveControlManager_C_UpdateFootsteps, Temp_float_Variable) == 0x000080, "Member 'COMP_MoveControlManager_C_UpdateFootsteps::Temp_float_Variable' has a wrong offset!");
static_assert(offsetof(COMP_MoveControlManager_C_UpdateFootsteps, CallFunc_Add_FloatFloat_ReturnValue_2) == 0x000084, "Member 'COMP_MoveControlManager_C_UpdateFootsteps::CallFunc_Add_FloatFloat_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(COMP_MoveControlManager_C_UpdateFootsteps, CallFunc_Less_FloatFloat_ReturnValue) == 0x000088, "Member 'COMP_MoveControlManager_C_UpdateFootsteps::CallFunc_Less_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(COMP_MoveControlManager_C_UpdateFootsteps, CallFunc_Less_FloatFloat_ReturnValue_1) == 0x000089, "Member 'COMP_MoveControlManager_C_UpdateFootsteps::CallFunc_Less_FloatFloat_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(COMP_MoveControlManager_C_UpdateFootsteps, CallFunc_Add_FloatFloat_ReturnValue_3) == 0x00008C, "Member 'COMP_MoveControlManager_C_UpdateFootsteps::CallFunc_Add_FloatFloat_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(COMP_MoveControlManager_C_UpdateFootsteps, CallFunc_GreaterEqual_FloatFloat_ReturnValue) == 0x000090, "Member 'COMP_MoveControlManager_C_UpdateFootsteps::CallFunc_GreaterEqual_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(COMP_MoveControlManager_C_UpdateFootsteps, CallFunc_BooleanOR_ReturnValue) == 0x000091, "Member 'COMP_MoveControlManager_C_UpdateFootsteps::CallFunc_BooleanOR_ReturnValue' has a wrong offset!");
static_assert(offsetof(COMP_MoveControlManager_C_UpdateFootsteps, CallFunc_GreaterEqual_FloatFloat_ReturnValue_1) == 0x000092, "Member 'COMP_MoveControlManager_C_UpdateFootsteps::CallFunc_GreaterEqual_FloatFloat_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(COMP_MoveControlManager_C_UpdateFootsteps, CallFunc_BooleanAND_ReturnValue) == 0x000093, "Member 'COMP_MoveControlManager_C_UpdateFootsteps::CallFunc_BooleanAND_ReturnValue' has a wrong offset!");
static_assert(offsetof(COMP_MoveControlManager_C_UpdateFootsteps, CallFunc_Subtract_FloatFloat_ReturnValue_4) == 0x000094, "Member 'COMP_MoveControlManager_C_UpdateFootsteps::CallFunc_Subtract_FloatFloat_ReturnValue_4' has a wrong offset!");
static_assert(offsetof(COMP_MoveControlManager_C_UpdateFootsteps, CallFunc_GreaterEqual_FloatFloat_ReturnValue_2) == 0x000098, "Member 'COMP_MoveControlManager_C_UpdateFootsteps::CallFunc_GreaterEqual_FloatFloat_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(COMP_MoveControlManager_C_UpdateFootsteps, CallFunc_Less_IntInt_ReturnValue) == 0x000099, "Member 'COMP_MoveControlManager_C_UpdateFootsteps::CallFunc_Less_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(COMP_MoveControlManager_C_UpdateFootsteps, CallFunc_Greater_IntInt_ReturnValue) == 0x00009A, "Member 'COMP_MoveControlManager_C_UpdateFootsteps::CallFunc_Greater_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(COMP_MoveControlManager_C_UpdateFootsteps, CallFunc_Divide_FloatFloat_ReturnValue_5) == 0x00009C, "Member 'COMP_MoveControlManager_C_UpdateFootsteps::CallFunc_Divide_FloatFloat_ReturnValue_5' has a wrong offset!");
static_assert(offsetof(COMP_MoveControlManager_C_UpdateFootsteps, CallFunc_BreakVector2D_X) == 0x0000A0, "Member 'COMP_MoveControlManager_C_UpdateFootsteps::CallFunc_BreakVector2D_X' has a wrong offset!");
static_assert(offsetof(COMP_MoveControlManager_C_UpdateFootsteps, CallFunc_BreakVector2D_Y) == 0x0000A4, "Member 'COMP_MoveControlManager_C_UpdateFootsteps::CallFunc_BreakVector2D_Y' has a wrong offset!");
static_assert(offsetof(COMP_MoveControlManager_C_UpdateFootsteps, CallFunc_Add_FloatFloat_ReturnValue_4) == 0x0000A8, "Member 'COMP_MoveControlManager_C_UpdateFootsteps::CallFunc_Add_FloatFloat_ReturnValue_4' has a wrong offset!");
static_assert(offsetof(COMP_MoveControlManager_C_UpdateFootsteps, CallFunc_Lerp_ReturnValue) == 0x0000AC, "Member 'COMP_MoveControlManager_C_UpdateFootsteps::CallFunc_Lerp_ReturnValue' has a wrong offset!");
static_assert(offsetof(COMP_MoveControlManager_C_UpdateFootsteps, CallFunc_BreakVector2D_X_1) == 0x0000B0, "Member 'COMP_MoveControlManager_C_UpdateFootsteps::CallFunc_BreakVector2D_X_1' has a wrong offset!");
static_assert(offsetof(COMP_MoveControlManager_C_UpdateFootsteps, CallFunc_BreakVector2D_Y_1) == 0x0000B4, "Member 'COMP_MoveControlManager_C_UpdateFootsteps::CallFunc_BreakVector2D_Y_1' has a wrong offset!");
static_assert(offsetof(COMP_MoveControlManager_C_UpdateFootsteps, CallFunc_BreakVector2D_X_2) == 0x0000B8, "Member 'COMP_MoveControlManager_C_UpdateFootsteps::CallFunc_BreakVector2D_X_2' has a wrong offset!");
static_assert(offsetof(COMP_MoveControlManager_C_UpdateFootsteps, CallFunc_BreakVector2D_Y_2) == 0x0000BC, "Member 'COMP_MoveControlManager_C_UpdateFootsteps::CallFunc_BreakVector2D_Y_2' has a wrong offset!");
static_assert(offsetof(COMP_MoveControlManager_C_UpdateFootsteps, CallFunc_Lerp_ReturnValue_1) == 0x0000C0, "Member 'COMP_MoveControlManager_C_UpdateFootsteps::CallFunc_Lerp_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(COMP_MoveControlManager_C_UpdateFootsteps, CallFunc_Greater_FloatFloat_ReturnValue_2) == 0x0000C4, "Member 'COMP_MoveControlManager_C_UpdateFootsteps::CallFunc_Greater_FloatFloat_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(COMP_MoveControlManager_C_UpdateFootsteps, CallFunc_Greater_FloatFloat_ReturnValue_3) == 0x0000C5, "Member 'COMP_MoveControlManager_C_UpdateFootsteps::CallFunc_Greater_FloatFloat_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(COMP_MoveControlManager_C_UpdateFootsteps, CallFunc_BooleanAND_ReturnValue_1) == 0x0000C6, "Member 'COMP_MoveControlManager_C_UpdateFootsteps::CallFunc_BooleanAND_ReturnValue_1' has a wrong offset!");

// Function COMP_MoveControlManager.COMP_MoveControlManager_C.UpdateCameraBobbing
// 0x0254 (0x0254 - 0x0000)
struct COMP_MoveControlManager_C_UpdateCameraBobbing final
{
public:
	float                                         DeltaTime;                                         // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         AccessibilityScale;                                // 0x0004(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         SinProgress4PI;                                    // 0x0008(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         SinProgress2PI;                                    // 0x000C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector2D                              AngularOffset;                                     // 0x0010(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector2D                              PositionOffset;                                    // 0x0018(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         HalfVariance;                                      // 0x0020(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          GenerateVariance;                                  // 0x0024(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_25[0x3];                                       // 0x0025(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_GetGameTimeInSeconds_ReturnValue;         // 0x0028(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_GetGameTimeInSeconds_ReturnValue_1;       // 0x002C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector2D                              CallFunc_GetSmoothedVec2_ReturnValue;              // 0x0030(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector2D_X;                          // 0x0038(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector2D_Y;                          // 0x003C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               CallFunc_MakeRotator_ReturnValue;                  // 0x0040(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FVector2D                              CallFunc_GetSmoothedVec2_ReturnValue_1;            // 0x004C(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FHitResult                             CallFunc_K2_SetRelativeRotation_SweepHitResult;    // 0x0054(0x0088)(IsPlainOldData, NoDestructor, ContainsInstancedReference)
	float                                         CallFunc_BreakVector2D_X_1;                        // 0x00DC(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector2D_Y_1;                        // 0x00E0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_MakeVector_ReturnValue;                   // 0x00E4(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FHitResult                             CallFunc_K2_SetRelativeLocation_SweepHitResult;    // 0x00F0(0x0088)(IsPlainOldData, NoDestructor, ContainsInstancedReference)
	float                                         CallFunc_BreakVector2D_X_2;                        // 0x0178(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector2D_Y_2;                        // 0x017C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector2D_X_3;                        // 0x0180(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector2D_Y_3;                        // 0x0184(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_GetParamValue_Value;                      // 0x0188(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_GetParamValue_Value_1;                    // 0x018C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Multiply_FloatFloat_ReturnValue;          // 0x0190(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Multiply_FloatFloat_ReturnValue_1;        // 0x0194(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Multiply_FloatFloat_ReturnValue_2;        // 0x0198(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Multiply_FloatFloat_ReturnValue_3;        // 0x019C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Multiply_FloatFloat_ReturnValue_4;        // 0x01A0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Multiply_FloatFloat_ReturnValue_5;        // 0x01A4(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Multiply_FloatFloat_ReturnValue_6;        // 0x01A8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector2D                              CallFunc_MakeVector2D_ReturnValue;                 // 0x01AC(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector2D_X_4;                        // 0x01B4(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector2D_Y_4;                        // 0x01B8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector2D_X_5;                        // 0x01BC(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector2D_Y_5;                        // 0x01C0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Add_FloatFloat_ReturnValue;               // 0x01C4(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Subtract_FloatFloat_ReturnValue;          // 0x01C8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_RandomFloatInRange_ReturnValue;           // 0x01CC(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector2D                              CallFunc_MakeVector2D_ReturnValue_1;               // 0x01D0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_GetPI_ReturnValue;                        // 0x01D8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_GetParamValue_Value_2;                    // 0x01DC(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Multiply_FloatFloat_ReturnValue_7;        // 0x01E0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Multiply_FloatFloat_ReturnValue_8;        // 0x01E4(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Multiply_FloatFloat_ReturnValue_9;        // 0x01E8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Multiply_FloatFloat_ReturnValue_10;       // 0x01EC(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Multiply_FloatFloat_ReturnValue_11;       // 0x01F0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Sin_ReturnValue;                          // 0x01F4(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_GetPI_ReturnValue_1;                      // 0x01F8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Multiply_FloatFloat_ReturnValue_12;       // 0x01FC(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Multiply_FloatFloat_ReturnValue_13;       // 0x0200(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Sin_ReturnValue_1;                        // 0x0204(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_GetParamValue_Value_3;                    // 0x0208(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Multiply_FloatFloat_ReturnValue_14;       // 0x020C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Multiply_FloatFloat_ReturnValue_15;       // 0x0210(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Add_FloatFloat_ReturnValue_1;             // 0x0214(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Multiply_FloatFloat_ReturnValue_16;       // 0x0218(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector2D                              CallFunc_MakeVector2D_ReturnValue_2;               // 0x021C(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Subtract_FloatFloat_ReturnValue_1;        // 0x0224(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_RandomFloatInRange_ReturnValue_1;         // 0x0228(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector2D                              CallFunc_MakeVector2D_ReturnValue_3;               // 0x022C(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Greater_FloatFloat_ReturnValue;           // 0x0234(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Greater_FloatFloat_ReturnValue_1;         // 0x0235(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_236[0x2];                                      // 0x0236(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_GetParamValue_Value_4;                    // 0x0238(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_GetParamValue_Value_5;                    // 0x023C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Multiply_FloatFloat_ReturnValue_17;       // 0x0240(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Multiply_FloatFloat_ReturnValue_18;       // 0x0244(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Multiply_FloatFloat_ReturnValue_19;       // 0x0248(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Multiply_FloatFloat_ReturnValue_20;       // 0x024C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_SwitchEnum_CmpSuccess;                      // 0x0250(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(COMP_MoveControlManager_C_UpdateCameraBobbing) == 0x000004, "Wrong alignment on COMP_MoveControlManager_C_UpdateCameraBobbing");
static_assert(sizeof(COMP_MoveControlManager_C_UpdateCameraBobbing) == 0x000254, "Wrong size on COMP_MoveControlManager_C_UpdateCameraBobbing");
static_assert(offsetof(COMP_MoveControlManager_C_UpdateCameraBobbing, DeltaTime) == 0x000000, "Member 'COMP_MoveControlManager_C_UpdateCameraBobbing::DeltaTime' has a wrong offset!");
static_assert(offsetof(COMP_MoveControlManager_C_UpdateCameraBobbing, AccessibilityScale) == 0x000004, "Member 'COMP_MoveControlManager_C_UpdateCameraBobbing::AccessibilityScale' has a wrong offset!");
static_assert(offsetof(COMP_MoveControlManager_C_UpdateCameraBobbing, SinProgress4PI) == 0x000008, "Member 'COMP_MoveControlManager_C_UpdateCameraBobbing::SinProgress4PI' has a wrong offset!");
static_assert(offsetof(COMP_MoveControlManager_C_UpdateCameraBobbing, SinProgress2PI) == 0x00000C, "Member 'COMP_MoveControlManager_C_UpdateCameraBobbing::SinProgress2PI' has a wrong offset!");
static_assert(offsetof(COMP_MoveControlManager_C_UpdateCameraBobbing, AngularOffset) == 0x000010, "Member 'COMP_MoveControlManager_C_UpdateCameraBobbing::AngularOffset' has a wrong offset!");
static_assert(offsetof(COMP_MoveControlManager_C_UpdateCameraBobbing, PositionOffset) == 0x000018, "Member 'COMP_MoveControlManager_C_UpdateCameraBobbing::PositionOffset' has a wrong offset!");
static_assert(offsetof(COMP_MoveControlManager_C_UpdateCameraBobbing, HalfVariance) == 0x000020, "Member 'COMP_MoveControlManager_C_UpdateCameraBobbing::HalfVariance' has a wrong offset!");
static_assert(offsetof(COMP_MoveControlManager_C_UpdateCameraBobbing, GenerateVariance) == 0x000024, "Member 'COMP_MoveControlManager_C_UpdateCameraBobbing::GenerateVariance' has a wrong offset!");
static_assert(offsetof(COMP_MoveControlManager_C_UpdateCameraBobbing, CallFunc_GetGameTimeInSeconds_ReturnValue) == 0x000028, "Member 'COMP_MoveControlManager_C_UpdateCameraBobbing::CallFunc_GetGameTimeInSeconds_ReturnValue' has a wrong offset!");
static_assert(offsetof(COMP_MoveControlManager_C_UpdateCameraBobbing, CallFunc_GetGameTimeInSeconds_ReturnValue_1) == 0x00002C, "Member 'COMP_MoveControlManager_C_UpdateCameraBobbing::CallFunc_GetGameTimeInSeconds_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(COMP_MoveControlManager_C_UpdateCameraBobbing, CallFunc_GetSmoothedVec2_ReturnValue) == 0x000030, "Member 'COMP_MoveControlManager_C_UpdateCameraBobbing::CallFunc_GetSmoothedVec2_ReturnValue' has a wrong offset!");
static_assert(offsetof(COMP_MoveControlManager_C_UpdateCameraBobbing, CallFunc_BreakVector2D_X) == 0x000038, "Member 'COMP_MoveControlManager_C_UpdateCameraBobbing::CallFunc_BreakVector2D_X' has a wrong offset!");
static_assert(offsetof(COMP_MoveControlManager_C_UpdateCameraBobbing, CallFunc_BreakVector2D_Y) == 0x00003C, "Member 'COMP_MoveControlManager_C_UpdateCameraBobbing::CallFunc_BreakVector2D_Y' has a wrong offset!");
static_assert(offsetof(COMP_MoveControlManager_C_UpdateCameraBobbing, CallFunc_MakeRotator_ReturnValue) == 0x000040, "Member 'COMP_MoveControlManager_C_UpdateCameraBobbing::CallFunc_MakeRotator_ReturnValue' has a wrong offset!");
static_assert(offsetof(COMP_MoveControlManager_C_UpdateCameraBobbing, CallFunc_GetSmoothedVec2_ReturnValue_1) == 0x00004C, "Member 'COMP_MoveControlManager_C_UpdateCameraBobbing::CallFunc_GetSmoothedVec2_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(COMP_MoveControlManager_C_UpdateCameraBobbing, CallFunc_K2_SetRelativeRotation_SweepHitResult) == 0x000054, "Member 'COMP_MoveControlManager_C_UpdateCameraBobbing::CallFunc_K2_SetRelativeRotation_SweepHitResult' has a wrong offset!");
static_assert(offsetof(COMP_MoveControlManager_C_UpdateCameraBobbing, CallFunc_BreakVector2D_X_1) == 0x0000DC, "Member 'COMP_MoveControlManager_C_UpdateCameraBobbing::CallFunc_BreakVector2D_X_1' has a wrong offset!");
static_assert(offsetof(COMP_MoveControlManager_C_UpdateCameraBobbing, CallFunc_BreakVector2D_Y_1) == 0x0000E0, "Member 'COMP_MoveControlManager_C_UpdateCameraBobbing::CallFunc_BreakVector2D_Y_1' has a wrong offset!");
static_assert(offsetof(COMP_MoveControlManager_C_UpdateCameraBobbing, CallFunc_MakeVector_ReturnValue) == 0x0000E4, "Member 'COMP_MoveControlManager_C_UpdateCameraBobbing::CallFunc_MakeVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(COMP_MoveControlManager_C_UpdateCameraBobbing, CallFunc_K2_SetRelativeLocation_SweepHitResult) == 0x0000F0, "Member 'COMP_MoveControlManager_C_UpdateCameraBobbing::CallFunc_K2_SetRelativeLocation_SweepHitResult' has a wrong offset!");
static_assert(offsetof(COMP_MoveControlManager_C_UpdateCameraBobbing, CallFunc_BreakVector2D_X_2) == 0x000178, "Member 'COMP_MoveControlManager_C_UpdateCameraBobbing::CallFunc_BreakVector2D_X_2' has a wrong offset!");
static_assert(offsetof(COMP_MoveControlManager_C_UpdateCameraBobbing, CallFunc_BreakVector2D_Y_2) == 0x00017C, "Member 'COMP_MoveControlManager_C_UpdateCameraBobbing::CallFunc_BreakVector2D_Y_2' has a wrong offset!");
static_assert(offsetof(COMP_MoveControlManager_C_UpdateCameraBobbing, CallFunc_BreakVector2D_X_3) == 0x000180, "Member 'COMP_MoveControlManager_C_UpdateCameraBobbing::CallFunc_BreakVector2D_X_3' has a wrong offset!");
static_assert(offsetof(COMP_MoveControlManager_C_UpdateCameraBobbing, CallFunc_BreakVector2D_Y_3) == 0x000184, "Member 'COMP_MoveControlManager_C_UpdateCameraBobbing::CallFunc_BreakVector2D_Y_3' has a wrong offset!");
static_assert(offsetof(COMP_MoveControlManager_C_UpdateCameraBobbing, CallFunc_GetParamValue_Value) == 0x000188, "Member 'COMP_MoveControlManager_C_UpdateCameraBobbing::CallFunc_GetParamValue_Value' has a wrong offset!");
static_assert(offsetof(COMP_MoveControlManager_C_UpdateCameraBobbing, CallFunc_GetParamValue_Value_1) == 0x00018C, "Member 'COMP_MoveControlManager_C_UpdateCameraBobbing::CallFunc_GetParamValue_Value_1' has a wrong offset!");
static_assert(offsetof(COMP_MoveControlManager_C_UpdateCameraBobbing, CallFunc_Multiply_FloatFloat_ReturnValue) == 0x000190, "Member 'COMP_MoveControlManager_C_UpdateCameraBobbing::CallFunc_Multiply_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(COMP_MoveControlManager_C_UpdateCameraBobbing, CallFunc_Multiply_FloatFloat_ReturnValue_1) == 0x000194, "Member 'COMP_MoveControlManager_C_UpdateCameraBobbing::CallFunc_Multiply_FloatFloat_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(COMP_MoveControlManager_C_UpdateCameraBobbing, CallFunc_Multiply_FloatFloat_ReturnValue_2) == 0x000198, "Member 'COMP_MoveControlManager_C_UpdateCameraBobbing::CallFunc_Multiply_FloatFloat_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(COMP_MoveControlManager_C_UpdateCameraBobbing, CallFunc_Multiply_FloatFloat_ReturnValue_3) == 0x00019C, "Member 'COMP_MoveControlManager_C_UpdateCameraBobbing::CallFunc_Multiply_FloatFloat_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(COMP_MoveControlManager_C_UpdateCameraBobbing, CallFunc_Multiply_FloatFloat_ReturnValue_4) == 0x0001A0, "Member 'COMP_MoveControlManager_C_UpdateCameraBobbing::CallFunc_Multiply_FloatFloat_ReturnValue_4' has a wrong offset!");
static_assert(offsetof(COMP_MoveControlManager_C_UpdateCameraBobbing, CallFunc_Multiply_FloatFloat_ReturnValue_5) == 0x0001A4, "Member 'COMP_MoveControlManager_C_UpdateCameraBobbing::CallFunc_Multiply_FloatFloat_ReturnValue_5' has a wrong offset!");
static_assert(offsetof(COMP_MoveControlManager_C_UpdateCameraBobbing, CallFunc_Multiply_FloatFloat_ReturnValue_6) == 0x0001A8, "Member 'COMP_MoveControlManager_C_UpdateCameraBobbing::CallFunc_Multiply_FloatFloat_ReturnValue_6' has a wrong offset!");
static_assert(offsetof(COMP_MoveControlManager_C_UpdateCameraBobbing, CallFunc_MakeVector2D_ReturnValue) == 0x0001AC, "Member 'COMP_MoveControlManager_C_UpdateCameraBobbing::CallFunc_MakeVector2D_ReturnValue' has a wrong offset!");
static_assert(offsetof(COMP_MoveControlManager_C_UpdateCameraBobbing, CallFunc_BreakVector2D_X_4) == 0x0001B4, "Member 'COMP_MoveControlManager_C_UpdateCameraBobbing::CallFunc_BreakVector2D_X_4' has a wrong offset!");
static_assert(offsetof(COMP_MoveControlManager_C_UpdateCameraBobbing, CallFunc_BreakVector2D_Y_4) == 0x0001B8, "Member 'COMP_MoveControlManager_C_UpdateCameraBobbing::CallFunc_BreakVector2D_Y_4' has a wrong offset!");
static_assert(offsetof(COMP_MoveControlManager_C_UpdateCameraBobbing, CallFunc_BreakVector2D_X_5) == 0x0001BC, "Member 'COMP_MoveControlManager_C_UpdateCameraBobbing::CallFunc_BreakVector2D_X_5' has a wrong offset!");
static_assert(offsetof(COMP_MoveControlManager_C_UpdateCameraBobbing, CallFunc_BreakVector2D_Y_5) == 0x0001C0, "Member 'COMP_MoveControlManager_C_UpdateCameraBobbing::CallFunc_BreakVector2D_Y_5' has a wrong offset!");
static_assert(offsetof(COMP_MoveControlManager_C_UpdateCameraBobbing, CallFunc_Add_FloatFloat_ReturnValue) == 0x0001C4, "Member 'COMP_MoveControlManager_C_UpdateCameraBobbing::CallFunc_Add_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(COMP_MoveControlManager_C_UpdateCameraBobbing, CallFunc_Subtract_FloatFloat_ReturnValue) == 0x0001C8, "Member 'COMP_MoveControlManager_C_UpdateCameraBobbing::CallFunc_Subtract_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(COMP_MoveControlManager_C_UpdateCameraBobbing, CallFunc_RandomFloatInRange_ReturnValue) == 0x0001CC, "Member 'COMP_MoveControlManager_C_UpdateCameraBobbing::CallFunc_RandomFloatInRange_ReturnValue' has a wrong offset!");
static_assert(offsetof(COMP_MoveControlManager_C_UpdateCameraBobbing, CallFunc_MakeVector2D_ReturnValue_1) == 0x0001D0, "Member 'COMP_MoveControlManager_C_UpdateCameraBobbing::CallFunc_MakeVector2D_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(COMP_MoveControlManager_C_UpdateCameraBobbing, CallFunc_GetPI_ReturnValue) == 0x0001D8, "Member 'COMP_MoveControlManager_C_UpdateCameraBobbing::CallFunc_GetPI_ReturnValue' has a wrong offset!");
static_assert(offsetof(COMP_MoveControlManager_C_UpdateCameraBobbing, CallFunc_GetParamValue_Value_2) == 0x0001DC, "Member 'COMP_MoveControlManager_C_UpdateCameraBobbing::CallFunc_GetParamValue_Value_2' has a wrong offset!");
static_assert(offsetof(COMP_MoveControlManager_C_UpdateCameraBobbing, CallFunc_Multiply_FloatFloat_ReturnValue_7) == 0x0001E0, "Member 'COMP_MoveControlManager_C_UpdateCameraBobbing::CallFunc_Multiply_FloatFloat_ReturnValue_7' has a wrong offset!");
static_assert(offsetof(COMP_MoveControlManager_C_UpdateCameraBobbing, CallFunc_Multiply_FloatFloat_ReturnValue_8) == 0x0001E4, "Member 'COMP_MoveControlManager_C_UpdateCameraBobbing::CallFunc_Multiply_FloatFloat_ReturnValue_8' has a wrong offset!");
static_assert(offsetof(COMP_MoveControlManager_C_UpdateCameraBobbing, CallFunc_Multiply_FloatFloat_ReturnValue_9) == 0x0001E8, "Member 'COMP_MoveControlManager_C_UpdateCameraBobbing::CallFunc_Multiply_FloatFloat_ReturnValue_9' has a wrong offset!");
static_assert(offsetof(COMP_MoveControlManager_C_UpdateCameraBobbing, CallFunc_Multiply_FloatFloat_ReturnValue_10) == 0x0001EC, "Member 'COMP_MoveControlManager_C_UpdateCameraBobbing::CallFunc_Multiply_FloatFloat_ReturnValue_10' has a wrong offset!");
static_assert(offsetof(COMP_MoveControlManager_C_UpdateCameraBobbing, CallFunc_Multiply_FloatFloat_ReturnValue_11) == 0x0001F0, "Member 'COMP_MoveControlManager_C_UpdateCameraBobbing::CallFunc_Multiply_FloatFloat_ReturnValue_11' has a wrong offset!");
static_assert(offsetof(COMP_MoveControlManager_C_UpdateCameraBobbing, CallFunc_Sin_ReturnValue) == 0x0001F4, "Member 'COMP_MoveControlManager_C_UpdateCameraBobbing::CallFunc_Sin_ReturnValue' has a wrong offset!");
static_assert(offsetof(COMP_MoveControlManager_C_UpdateCameraBobbing, CallFunc_GetPI_ReturnValue_1) == 0x0001F8, "Member 'COMP_MoveControlManager_C_UpdateCameraBobbing::CallFunc_GetPI_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(COMP_MoveControlManager_C_UpdateCameraBobbing, CallFunc_Multiply_FloatFloat_ReturnValue_12) == 0x0001FC, "Member 'COMP_MoveControlManager_C_UpdateCameraBobbing::CallFunc_Multiply_FloatFloat_ReturnValue_12' has a wrong offset!");
static_assert(offsetof(COMP_MoveControlManager_C_UpdateCameraBobbing, CallFunc_Multiply_FloatFloat_ReturnValue_13) == 0x000200, "Member 'COMP_MoveControlManager_C_UpdateCameraBobbing::CallFunc_Multiply_FloatFloat_ReturnValue_13' has a wrong offset!");
static_assert(offsetof(COMP_MoveControlManager_C_UpdateCameraBobbing, CallFunc_Sin_ReturnValue_1) == 0x000204, "Member 'COMP_MoveControlManager_C_UpdateCameraBobbing::CallFunc_Sin_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(COMP_MoveControlManager_C_UpdateCameraBobbing, CallFunc_GetParamValue_Value_3) == 0x000208, "Member 'COMP_MoveControlManager_C_UpdateCameraBobbing::CallFunc_GetParamValue_Value_3' has a wrong offset!");
static_assert(offsetof(COMP_MoveControlManager_C_UpdateCameraBobbing, CallFunc_Multiply_FloatFloat_ReturnValue_14) == 0x00020C, "Member 'COMP_MoveControlManager_C_UpdateCameraBobbing::CallFunc_Multiply_FloatFloat_ReturnValue_14' has a wrong offset!");
static_assert(offsetof(COMP_MoveControlManager_C_UpdateCameraBobbing, CallFunc_Multiply_FloatFloat_ReturnValue_15) == 0x000210, "Member 'COMP_MoveControlManager_C_UpdateCameraBobbing::CallFunc_Multiply_FloatFloat_ReturnValue_15' has a wrong offset!");
static_assert(offsetof(COMP_MoveControlManager_C_UpdateCameraBobbing, CallFunc_Add_FloatFloat_ReturnValue_1) == 0x000214, "Member 'COMP_MoveControlManager_C_UpdateCameraBobbing::CallFunc_Add_FloatFloat_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(COMP_MoveControlManager_C_UpdateCameraBobbing, CallFunc_Multiply_FloatFloat_ReturnValue_16) == 0x000218, "Member 'COMP_MoveControlManager_C_UpdateCameraBobbing::CallFunc_Multiply_FloatFloat_ReturnValue_16' has a wrong offset!");
static_assert(offsetof(COMP_MoveControlManager_C_UpdateCameraBobbing, CallFunc_MakeVector2D_ReturnValue_2) == 0x00021C, "Member 'COMP_MoveControlManager_C_UpdateCameraBobbing::CallFunc_MakeVector2D_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(COMP_MoveControlManager_C_UpdateCameraBobbing, CallFunc_Subtract_FloatFloat_ReturnValue_1) == 0x000224, "Member 'COMP_MoveControlManager_C_UpdateCameraBobbing::CallFunc_Subtract_FloatFloat_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(COMP_MoveControlManager_C_UpdateCameraBobbing, CallFunc_RandomFloatInRange_ReturnValue_1) == 0x000228, "Member 'COMP_MoveControlManager_C_UpdateCameraBobbing::CallFunc_RandomFloatInRange_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(COMP_MoveControlManager_C_UpdateCameraBobbing, CallFunc_MakeVector2D_ReturnValue_3) == 0x00022C, "Member 'COMP_MoveControlManager_C_UpdateCameraBobbing::CallFunc_MakeVector2D_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(COMP_MoveControlManager_C_UpdateCameraBobbing, CallFunc_Greater_FloatFloat_ReturnValue) == 0x000234, "Member 'COMP_MoveControlManager_C_UpdateCameraBobbing::CallFunc_Greater_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(COMP_MoveControlManager_C_UpdateCameraBobbing, CallFunc_Greater_FloatFloat_ReturnValue_1) == 0x000235, "Member 'COMP_MoveControlManager_C_UpdateCameraBobbing::CallFunc_Greater_FloatFloat_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(COMP_MoveControlManager_C_UpdateCameraBobbing, CallFunc_GetParamValue_Value_4) == 0x000238, "Member 'COMP_MoveControlManager_C_UpdateCameraBobbing::CallFunc_GetParamValue_Value_4' has a wrong offset!");
static_assert(offsetof(COMP_MoveControlManager_C_UpdateCameraBobbing, CallFunc_GetParamValue_Value_5) == 0x00023C, "Member 'COMP_MoveControlManager_C_UpdateCameraBobbing::CallFunc_GetParamValue_Value_5' has a wrong offset!");
static_assert(offsetof(COMP_MoveControlManager_C_UpdateCameraBobbing, CallFunc_Multiply_FloatFloat_ReturnValue_17) == 0x000240, "Member 'COMP_MoveControlManager_C_UpdateCameraBobbing::CallFunc_Multiply_FloatFloat_ReturnValue_17' has a wrong offset!");
static_assert(offsetof(COMP_MoveControlManager_C_UpdateCameraBobbing, CallFunc_Multiply_FloatFloat_ReturnValue_18) == 0x000244, "Member 'COMP_MoveControlManager_C_UpdateCameraBobbing::CallFunc_Multiply_FloatFloat_ReturnValue_18' has a wrong offset!");
static_assert(offsetof(COMP_MoveControlManager_C_UpdateCameraBobbing, CallFunc_Multiply_FloatFloat_ReturnValue_19) == 0x000248, "Member 'COMP_MoveControlManager_C_UpdateCameraBobbing::CallFunc_Multiply_FloatFloat_ReturnValue_19' has a wrong offset!");
static_assert(offsetof(COMP_MoveControlManager_C_UpdateCameraBobbing, CallFunc_Multiply_FloatFloat_ReturnValue_20) == 0x00024C, "Member 'COMP_MoveControlManager_C_UpdateCameraBobbing::CallFunc_Multiply_FloatFloat_ReturnValue_20' has a wrong offset!");
static_assert(offsetof(COMP_MoveControlManager_C_UpdateCameraBobbing, K2Node_SwitchEnum_CmpSuccess) == 0x000250, "Member 'COMP_MoveControlManager_C_UpdateCameraBobbing::K2Node_SwitchEnum_CmpSuccess' has a wrong offset!");

// Function COMP_MoveControlManager.COMP_MoveControlManager_C.ApplyJumpGroundSpeedReduction
// 0x001C (0x001C - 0x0000)
struct COMP_MoveControlManager_C_ApplyJumpGroundSpeedReduction final
{
public:
	bool                                          CallFunc_Not_PreBool_ReturnValue;                  // 0x0000(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                CallFunc_Multiply_VectorFloat_ReturnValue;         // 0x0004(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Subtract_VectorVector_ReturnValue;        // 0x0010(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(COMP_MoveControlManager_C_ApplyJumpGroundSpeedReduction) == 0x000004, "Wrong alignment on COMP_MoveControlManager_C_ApplyJumpGroundSpeedReduction");
static_assert(sizeof(COMP_MoveControlManager_C_ApplyJumpGroundSpeedReduction) == 0x00001C, "Wrong size on COMP_MoveControlManager_C_ApplyJumpGroundSpeedReduction");
static_assert(offsetof(COMP_MoveControlManager_C_ApplyJumpGroundSpeedReduction, CallFunc_Not_PreBool_ReturnValue) == 0x000000, "Member 'COMP_MoveControlManager_C_ApplyJumpGroundSpeedReduction::CallFunc_Not_PreBool_ReturnValue' has a wrong offset!");
static_assert(offsetof(COMP_MoveControlManager_C_ApplyJumpGroundSpeedReduction, CallFunc_Multiply_VectorFloat_ReturnValue) == 0x000004, "Member 'COMP_MoveControlManager_C_ApplyJumpGroundSpeedReduction::CallFunc_Multiply_VectorFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(COMP_MoveControlManager_C_ApplyJumpGroundSpeedReduction, CallFunc_Subtract_VectorVector_ReturnValue) == 0x000010, "Member 'COMP_MoveControlManager_C_ApplyJumpGroundSpeedReduction::CallFunc_Subtract_VectorVector_ReturnValue' has a wrong offset!");

// Function COMP_MoveControlManager.COMP_MoveControlManager_C.DoJumpingFootstep
// 0x01F8 (0x01F8 - 0x0000)
struct COMP_MoveControlManager_C_DoJumpingFootstep final
{
public:
	struct FVector                                RaycastTarget;                                     // 0x0000(0x000C)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                RaycastSource;                                     // 0x000C(0x000C)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TArray<class AActor*>                         Temp_object_Variable;                              // 0x0018(0x0010)(ConstParm, ReferenceParm)
	int32                                         CallFunc_GetFootIndexFromSign_Index;               // 0x0028(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FNamedInteger                          K2Node_MakeStruct_NamedInteger;                    // 0x002C(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TArray<struct FNamedInteger>                  K2Node_MakeArray_Array;                            // 0x0038(0x0010)(ReferenceParm)
	struct FSTRUCT_EffectParams                   K2Node_MakeStruct_STRUCT_EffectParams;             // 0x0048(0x0030)(HasGetValueTypeHash)
	struct FVector                                CallFunc_Add_VectorVector_ReturnValue;             // 0x0078(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_GetActorRightVector_ReturnValue;          // 0x0084(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_K2_GetActorLocation_ReturnValue;          // 0x0090(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Multiply_VectorInt_ReturnValue;           // 0x009C(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Multiply_VectorFloat_ReturnValue;         // 0x00A8(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Add_VectorVector_ReturnValue_1;           // 0x00B4(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TArray<EObjectTypeQuery>                      K2Node_MakeArray_Array_1;                          // 0x00C0(0x0010)(ConstParm, ReferenceParm)
	struct FHitResult                             CallFunc_LineTraceSingleForObjects_OutHit;         // 0x00D0(0x0088)(IsPlainOldData, NoDestructor, ContainsInstancedReference)
	bool                                          CallFunc_LineTraceSingleForObjects_ReturnValue;    // 0x0158(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BreakHitResult_bBlockingHit;              // 0x0159(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BreakHitResult_bInitialOverlap;           // 0x015A(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_15B[0x1];                                      // 0x015B(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_BreakHitResult_Time;                      // 0x015C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakHitResult_Distance;                  // 0x0160(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakHitResult_Location;                  // 0x0164(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakHitResult_ImpactPoint;               // 0x0170(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakHitResult_Normal;                    // 0x017C(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakHitResult_ImpactNormal;              // 0x0188(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_194[0x4];                                      // 0x0194(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UPhysicalMaterial*                      CallFunc_BreakHitResult_PhysMat;                   // 0x0198(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 CallFunc_BreakHitResult_HitActor;                  // 0x01A0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UPrimitiveComponent*                    CallFunc_BreakHitResult_HitComponent;              // 0x01A8(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FName                                   CallFunc_BreakHitResult_HitBoneName;               // 0x01B0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_BreakHitResult_HitItem;                   // 0x01B8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_BreakHitResult_ElementIndex;              // 0x01BC(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_BreakHitResult_FaceIndex;                 // 0x01C0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakHitResult_TraceStart;                // 0x01C4(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakHitResult_TraceEnd;                  // 0x01D0(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_CreateImpactEffects_Success;              // 0x01DC(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_1DD[0x3];                                      // 0x01DD(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FSTRUCT_ImpactEffectResults            CallFunc_CreateImpactEffects_Results;              // 0x01E0(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, ContainsInstancedReference, HasGetValueTypeHash)
};
static_assert(alignof(COMP_MoveControlManager_C_DoJumpingFootstep) == 0x000008, "Wrong alignment on COMP_MoveControlManager_C_DoJumpingFootstep");
static_assert(sizeof(COMP_MoveControlManager_C_DoJumpingFootstep) == 0x0001F8, "Wrong size on COMP_MoveControlManager_C_DoJumpingFootstep");
static_assert(offsetof(COMP_MoveControlManager_C_DoJumpingFootstep, RaycastTarget) == 0x000000, "Member 'COMP_MoveControlManager_C_DoJumpingFootstep::RaycastTarget' has a wrong offset!");
static_assert(offsetof(COMP_MoveControlManager_C_DoJumpingFootstep, RaycastSource) == 0x00000C, "Member 'COMP_MoveControlManager_C_DoJumpingFootstep::RaycastSource' has a wrong offset!");
static_assert(offsetof(COMP_MoveControlManager_C_DoJumpingFootstep, Temp_object_Variable) == 0x000018, "Member 'COMP_MoveControlManager_C_DoJumpingFootstep::Temp_object_Variable' has a wrong offset!");
static_assert(offsetof(COMP_MoveControlManager_C_DoJumpingFootstep, CallFunc_GetFootIndexFromSign_Index) == 0x000028, "Member 'COMP_MoveControlManager_C_DoJumpingFootstep::CallFunc_GetFootIndexFromSign_Index' has a wrong offset!");
static_assert(offsetof(COMP_MoveControlManager_C_DoJumpingFootstep, K2Node_MakeStruct_NamedInteger) == 0x00002C, "Member 'COMP_MoveControlManager_C_DoJumpingFootstep::K2Node_MakeStruct_NamedInteger' has a wrong offset!");
static_assert(offsetof(COMP_MoveControlManager_C_DoJumpingFootstep, K2Node_MakeArray_Array) == 0x000038, "Member 'COMP_MoveControlManager_C_DoJumpingFootstep::K2Node_MakeArray_Array' has a wrong offset!");
static_assert(offsetof(COMP_MoveControlManager_C_DoJumpingFootstep, K2Node_MakeStruct_STRUCT_EffectParams) == 0x000048, "Member 'COMP_MoveControlManager_C_DoJumpingFootstep::K2Node_MakeStruct_STRUCT_EffectParams' has a wrong offset!");
static_assert(offsetof(COMP_MoveControlManager_C_DoJumpingFootstep, CallFunc_Add_VectorVector_ReturnValue) == 0x000078, "Member 'COMP_MoveControlManager_C_DoJumpingFootstep::CallFunc_Add_VectorVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(COMP_MoveControlManager_C_DoJumpingFootstep, CallFunc_GetActorRightVector_ReturnValue) == 0x000084, "Member 'COMP_MoveControlManager_C_DoJumpingFootstep::CallFunc_GetActorRightVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(COMP_MoveControlManager_C_DoJumpingFootstep, CallFunc_K2_GetActorLocation_ReturnValue) == 0x000090, "Member 'COMP_MoveControlManager_C_DoJumpingFootstep::CallFunc_K2_GetActorLocation_ReturnValue' has a wrong offset!");
static_assert(offsetof(COMP_MoveControlManager_C_DoJumpingFootstep, CallFunc_Multiply_VectorInt_ReturnValue) == 0x00009C, "Member 'COMP_MoveControlManager_C_DoJumpingFootstep::CallFunc_Multiply_VectorInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(COMP_MoveControlManager_C_DoJumpingFootstep, CallFunc_Multiply_VectorFloat_ReturnValue) == 0x0000A8, "Member 'COMP_MoveControlManager_C_DoJumpingFootstep::CallFunc_Multiply_VectorFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(COMP_MoveControlManager_C_DoJumpingFootstep, CallFunc_Add_VectorVector_ReturnValue_1) == 0x0000B4, "Member 'COMP_MoveControlManager_C_DoJumpingFootstep::CallFunc_Add_VectorVector_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(COMP_MoveControlManager_C_DoJumpingFootstep, K2Node_MakeArray_Array_1) == 0x0000C0, "Member 'COMP_MoveControlManager_C_DoJumpingFootstep::K2Node_MakeArray_Array_1' has a wrong offset!");
static_assert(offsetof(COMP_MoveControlManager_C_DoJumpingFootstep, CallFunc_LineTraceSingleForObjects_OutHit) == 0x0000D0, "Member 'COMP_MoveControlManager_C_DoJumpingFootstep::CallFunc_LineTraceSingleForObjects_OutHit' has a wrong offset!");
static_assert(offsetof(COMP_MoveControlManager_C_DoJumpingFootstep, CallFunc_LineTraceSingleForObjects_ReturnValue) == 0x000158, "Member 'COMP_MoveControlManager_C_DoJumpingFootstep::CallFunc_LineTraceSingleForObjects_ReturnValue' has a wrong offset!");
static_assert(offsetof(COMP_MoveControlManager_C_DoJumpingFootstep, CallFunc_BreakHitResult_bBlockingHit) == 0x000159, "Member 'COMP_MoveControlManager_C_DoJumpingFootstep::CallFunc_BreakHitResult_bBlockingHit' has a wrong offset!");
static_assert(offsetof(COMP_MoveControlManager_C_DoJumpingFootstep, CallFunc_BreakHitResult_bInitialOverlap) == 0x00015A, "Member 'COMP_MoveControlManager_C_DoJumpingFootstep::CallFunc_BreakHitResult_bInitialOverlap' has a wrong offset!");
static_assert(offsetof(COMP_MoveControlManager_C_DoJumpingFootstep, CallFunc_BreakHitResult_Time) == 0x00015C, "Member 'COMP_MoveControlManager_C_DoJumpingFootstep::CallFunc_BreakHitResult_Time' has a wrong offset!");
static_assert(offsetof(COMP_MoveControlManager_C_DoJumpingFootstep, CallFunc_BreakHitResult_Distance) == 0x000160, "Member 'COMP_MoveControlManager_C_DoJumpingFootstep::CallFunc_BreakHitResult_Distance' has a wrong offset!");
static_assert(offsetof(COMP_MoveControlManager_C_DoJumpingFootstep, CallFunc_BreakHitResult_Location) == 0x000164, "Member 'COMP_MoveControlManager_C_DoJumpingFootstep::CallFunc_BreakHitResult_Location' has a wrong offset!");
static_assert(offsetof(COMP_MoveControlManager_C_DoJumpingFootstep, CallFunc_BreakHitResult_ImpactPoint) == 0x000170, "Member 'COMP_MoveControlManager_C_DoJumpingFootstep::CallFunc_BreakHitResult_ImpactPoint' has a wrong offset!");
static_assert(offsetof(COMP_MoveControlManager_C_DoJumpingFootstep, CallFunc_BreakHitResult_Normal) == 0x00017C, "Member 'COMP_MoveControlManager_C_DoJumpingFootstep::CallFunc_BreakHitResult_Normal' has a wrong offset!");
static_assert(offsetof(COMP_MoveControlManager_C_DoJumpingFootstep, CallFunc_BreakHitResult_ImpactNormal) == 0x000188, "Member 'COMP_MoveControlManager_C_DoJumpingFootstep::CallFunc_BreakHitResult_ImpactNormal' has a wrong offset!");
static_assert(offsetof(COMP_MoveControlManager_C_DoJumpingFootstep, CallFunc_BreakHitResult_PhysMat) == 0x000198, "Member 'COMP_MoveControlManager_C_DoJumpingFootstep::CallFunc_BreakHitResult_PhysMat' has a wrong offset!");
static_assert(offsetof(COMP_MoveControlManager_C_DoJumpingFootstep, CallFunc_BreakHitResult_HitActor) == 0x0001A0, "Member 'COMP_MoveControlManager_C_DoJumpingFootstep::CallFunc_BreakHitResult_HitActor' has a wrong offset!");
static_assert(offsetof(COMP_MoveControlManager_C_DoJumpingFootstep, CallFunc_BreakHitResult_HitComponent) == 0x0001A8, "Member 'COMP_MoveControlManager_C_DoJumpingFootstep::CallFunc_BreakHitResult_HitComponent' has a wrong offset!");
static_assert(offsetof(COMP_MoveControlManager_C_DoJumpingFootstep, CallFunc_BreakHitResult_HitBoneName) == 0x0001B0, "Member 'COMP_MoveControlManager_C_DoJumpingFootstep::CallFunc_BreakHitResult_HitBoneName' has a wrong offset!");
static_assert(offsetof(COMP_MoveControlManager_C_DoJumpingFootstep, CallFunc_BreakHitResult_HitItem) == 0x0001B8, "Member 'COMP_MoveControlManager_C_DoJumpingFootstep::CallFunc_BreakHitResult_HitItem' has a wrong offset!");
static_assert(offsetof(COMP_MoveControlManager_C_DoJumpingFootstep, CallFunc_BreakHitResult_ElementIndex) == 0x0001BC, "Member 'COMP_MoveControlManager_C_DoJumpingFootstep::CallFunc_BreakHitResult_ElementIndex' has a wrong offset!");
static_assert(offsetof(COMP_MoveControlManager_C_DoJumpingFootstep, CallFunc_BreakHitResult_FaceIndex) == 0x0001C0, "Member 'COMP_MoveControlManager_C_DoJumpingFootstep::CallFunc_BreakHitResult_FaceIndex' has a wrong offset!");
static_assert(offsetof(COMP_MoveControlManager_C_DoJumpingFootstep, CallFunc_BreakHitResult_TraceStart) == 0x0001C4, "Member 'COMP_MoveControlManager_C_DoJumpingFootstep::CallFunc_BreakHitResult_TraceStart' has a wrong offset!");
static_assert(offsetof(COMP_MoveControlManager_C_DoJumpingFootstep, CallFunc_BreakHitResult_TraceEnd) == 0x0001D0, "Member 'COMP_MoveControlManager_C_DoJumpingFootstep::CallFunc_BreakHitResult_TraceEnd' has a wrong offset!");
static_assert(offsetof(COMP_MoveControlManager_C_DoJumpingFootstep, CallFunc_CreateImpactEffects_Success) == 0x0001DC, "Member 'COMP_MoveControlManager_C_DoJumpingFootstep::CallFunc_CreateImpactEffects_Success' has a wrong offset!");
static_assert(offsetof(COMP_MoveControlManager_C_DoJumpingFootstep, CallFunc_CreateImpactEffects_Results) == 0x0001E0, "Member 'COMP_MoveControlManager_C_DoJumpingFootstep::CallFunc_CreateImpactEffects_Results' has a wrong offset!");

// Function COMP_MoveControlManager.COMP_MoveControlManager_C.DoWalkingFootstep
// 0x02F8 (0x02F8 - 0x0000)
struct COMP_MoveControlManager_C_DoWalkingFootstep final
{
public:
	float                                         MovespeedScale;                                    // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         StrideScale;                                       // 0x0004(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FSTRUCT_EffectParams                   SoundParameters;                                   // 0x0008(0x0030)(Edit, BlueprintVisible, HasGetValueTypeHash)
	struct FVector                                ImpactLocation;                                    // 0x0038(0x000C)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                RaycastTarget;                                     // 0x0044(0x000C)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                RaycastSource;                                     // 0x0050(0x000C)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_5C[0x4];                                       // 0x005C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UDataTable*                             CurrentFootstepTable;                              // 0x0060(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ENUM_PlayerMoveSpeed                          Temp_byte_Variable;                                // 0x0068(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0069(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_6A[0x2];                                       // 0x006A(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Temp_int_Variable;                                 // 0x006C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Variable_1;                               // 0x0070(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Variable_2;                               // 0x0074(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Variable;                                // 0x0078(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_79[0x3];                                       // 0x0079(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         Temp_float_Variable;                               // 0x007C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TArray<class AActor*>                         Temp_object_Variable;                              // 0x0080(0x0010)(ConstParm, ReferenceParm)
	bool                                          Temp_bool_Variable_1;                              // 0x0090(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	ENUM_PlayerMoveSpeed                          CallFunc_GetPlayerMoveSpeedType_Type;              // 0x0091(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_92[0x2];                                       // 0x0092(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         K2Node_Select_Default;                             // 0x0094(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_GetFootIndexFromSign_Index;               // 0x0098(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FNamedInteger                          K2Node_MakeStruct_NamedInteger;                    // 0x009C(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FNamedInteger                          K2Node_MakeStruct_NamedInteger_1;                  // 0x00A8(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_B4[0x4];                                       // 0x00B4(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FNamedInteger>                  K2Node_MakeArray_Array;                            // 0x00B8(0x0010)(ReferenceParm)
	struct FNamedFloat                            K2Node_MakeStruct_NamedFloat;                      // 0x00C8(0x000C)(NoDestructor)
	uint8                                         Pad_D4[0x4];                                       // 0x00D4(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FNamedFloat>                    K2Node_MakeArray_Array_1;                          // 0x00D8(0x0010)(ReferenceParm)
	struct FSTRUCT_EffectParams                   K2Node_MakeStruct_STRUCT_EffectParams;             // 0x00E8(0x0030)(HasGetValueTypeHash)
	float                                         CallFunc_Multiply_FloatFloat_ReturnValue;          // 0x0118(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         K2Node_Select_Default_1;                           // 0x011C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Conv_Vector2DToVector_ReturnValue;        // 0x0120(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_12C[0x4];                                      // 0x012C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<EObjectTypeQuery>                      K2Node_MakeArray_Array_2;                          // 0x0130(0x0010)(ConstParm, ReferenceParm)
	struct FHitResult                             CallFunc_LineTraceSingleForObjects_OutHit;         // 0x0140(0x0088)(IsPlainOldData, NoDestructor, ContainsInstancedReference)
	bool                                          CallFunc_LineTraceSingleForObjects_ReturnValue;    // 0x01C8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_1C9[0x3];                                      // 0x01C9(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                CallFunc_K2_GetActorLocation_ReturnValue;          // 0x01CC(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BreakHitResult_bBlockingHit;              // 0x01D8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BreakHitResult_bInitialOverlap;           // 0x01D9(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_1DA[0x2];                                      // 0x01DA(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_BreakHitResult_Time;                      // 0x01DC(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakHitResult_Distance;                  // 0x01E0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakHitResult_Location;                  // 0x01E4(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakHitResult_ImpactPoint;               // 0x01F0(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakHitResult_Normal;                    // 0x01FC(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakHitResult_ImpactNormal;              // 0x0208(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_214[0x4];                                      // 0x0214(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UPhysicalMaterial*                      CallFunc_BreakHitResult_PhysMat;                   // 0x0218(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 CallFunc_BreakHitResult_HitActor;                  // 0x0220(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UPrimitiveComponent*                    CallFunc_BreakHitResult_HitComponent;              // 0x0228(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FName                                   CallFunc_BreakHitResult_HitBoneName;               // 0x0230(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_BreakHitResult_HitItem;                   // 0x0238(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_BreakHitResult_ElementIndex;              // 0x023C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_BreakHitResult_FaceIndex;                 // 0x0240(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakHitResult_TraceStart;                // 0x0244(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakHitResult_TraceEnd;                  // 0x0250(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_CreateImpactEffects_Success;              // 0x025C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_25D[0x3];                                      // 0x025D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FSTRUCT_ImpactEffectResults            CallFunc_CreateImpactEffects_Results;              // 0x0260(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, ContainsInstancedReference, HasGetValueTypeHash)
	struct FVector                                CallFunc_Add_VectorVector_ReturnValue;             // 0x0278(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_284[0x4];                                      // 0x0284(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UAudioComponent*                        CallFunc_SpawnSoundAttached_ReturnValue;           // 0x0288(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Variable_2;                              // 0x0290(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_291[0x3];                                      // 0x0291(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                CallFunc_GetActorRightVector_ReturnValue;          // 0x0294(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UDataTable*                             K2Node_Select_Default_2;                           // 0x02A0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Lerp_ReturnValue;                         // 0x02A8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Subtract_FloatFloat_ReturnValue;          // 0x02AC(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Greater_FloatFloat_ReturnValue;           // 0x02B0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_2B1[0x3];                                      // 0x02B1(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_Lerp_ReturnValue_1;                       // 0x02B4(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Multiply_FloatFloat_ReturnValue_1;        // 0x02B8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         K2Node_Select_Default_3;                           // 0x02BC(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Multiply_IntFloat_ReturnValue;            // 0x02C0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Multiply_VectorFloat_ReturnValue;         // 0x02C4(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Multiply_VectorFloat_ReturnValue_1;       // 0x02D0(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Add_VectorVector_ReturnValue_1;           // 0x02DC(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Add_VectorVector_ReturnValue_2;           // 0x02E8(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(COMP_MoveControlManager_C_DoWalkingFootstep) == 0x000008, "Wrong alignment on COMP_MoveControlManager_C_DoWalkingFootstep");
static_assert(sizeof(COMP_MoveControlManager_C_DoWalkingFootstep) == 0x0002F8, "Wrong size on COMP_MoveControlManager_C_DoWalkingFootstep");
static_assert(offsetof(COMP_MoveControlManager_C_DoWalkingFootstep, MovespeedScale) == 0x000000, "Member 'COMP_MoveControlManager_C_DoWalkingFootstep::MovespeedScale' has a wrong offset!");
static_assert(offsetof(COMP_MoveControlManager_C_DoWalkingFootstep, StrideScale) == 0x000004, "Member 'COMP_MoveControlManager_C_DoWalkingFootstep::StrideScale' has a wrong offset!");
static_assert(offsetof(COMP_MoveControlManager_C_DoWalkingFootstep, SoundParameters) == 0x000008, "Member 'COMP_MoveControlManager_C_DoWalkingFootstep::SoundParameters' has a wrong offset!");
static_assert(offsetof(COMP_MoveControlManager_C_DoWalkingFootstep, ImpactLocation) == 0x000038, "Member 'COMP_MoveControlManager_C_DoWalkingFootstep::ImpactLocation' has a wrong offset!");
static_assert(offsetof(COMP_MoveControlManager_C_DoWalkingFootstep, RaycastTarget) == 0x000044, "Member 'COMP_MoveControlManager_C_DoWalkingFootstep::RaycastTarget' has a wrong offset!");
static_assert(offsetof(COMP_MoveControlManager_C_DoWalkingFootstep, RaycastSource) == 0x000050, "Member 'COMP_MoveControlManager_C_DoWalkingFootstep::RaycastSource' has a wrong offset!");
static_assert(offsetof(COMP_MoveControlManager_C_DoWalkingFootstep, CurrentFootstepTable) == 0x000060, "Member 'COMP_MoveControlManager_C_DoWalkingFootstep::CurrentFootstepTable' has a wrong offset!");
static_assert(offsetof(COMP_MoveControlManager_C_DoWalkingFootstep, Temp_byte_Variable) == 0x000068, "Member 'COMP_MoveControlManager_C_DoWalkingFootstep::Temp_byte_Variable' has a wrong offset!");
static_assert(offsetof(COMP_MoveControlManager_C_DoWalkingFootstep, CallFunc_IsValid_ReturnValue) == 0x000069, "Member 'COMP_MoveControlManager_C_DoWalkingFootstep::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(COMP_MoveControlManager_C_DoWalkingFootstep, Temp_int_Variable) == 0x00006C, "Member 'COMP_MoveControlManager_C_DoWalkingFootstep::Temp_int_Variable' has a wrong offset!");
static_assert(offsetof(COMP_MoveControlManager_C_DoWalkingFootstep, Temp_int_Variable_1) == 0x000070, "Member 'COMP_MoveControlManager_C_DoWalkingFootstep::Temp_int_Variable_1' has a wrong offset!");
static_assert(offsetof(COMP_MoveControlManager_C_DoWalkingFootstep, Temp_int_Variable_2) == 0x000074, "Member 'COMP_MoveControlManager_C_DoWalkingFootstep::Temp_int_Variable_2' has a wrong offset!");
static_assert(offsetof(COMP_MoveControlManager_C_DoWalkingFootstep, Temp_bool_Variable) == 0x000078, "Member 'COMP_MoveControlManager_C_DoWalkingFootstep::Temp_bool_Variable' has a wrong offset!");
static_assert(offsetof(COMP_MoveControlManager_C_DoWalkingFootstep, Temp_float_Variable) == 0x00007C, "Member 'COMP_MoveControlManager_C_DoWalkingFootstep::Temp_float_Variable' has a wrong offset!");
static_assert(offsetof(COMP_MoveControlManager_C_DoWalkingFootstep, Temp_object_Variable) == 0x000080, "Member 'COMP_MoveControlManager_C_DoWalkingFootstep::Temp_object_Variable' has a wrong offset!");
static_assert(offsetof(COMP_MoveControlManager_C_DoWalkingFootstep, Temp_bool_Variable_1) == 0x000090, "Member 'COMP_MoveControlManager_C_DoWalkingFootstep::Temp_bool_Variable_1' has a wrong offset!");
static_assert(offsetof(COMP_MoveControlManager_C_DoWalkingFootstep, CallFunc_GetPlayerMoveSpeedType_Type) == 0x000091, "Member 'COMP_MoveControlManager_C_DoWalkingFootstep::CallFunc_GetPlayerMoveSpeedType_Type' has a wrong offset!");
static_assert(offsetof(COMP_MoveControlManager_C_DoWalkingFootstep, K2Node_Select_Default) == 0x000094, "Member 'COMP_MoveControlManager_C_DoWalkingFootstep::K2Node_Select_Default' has a wrong offset!");
static_assert(offsetof(COMP_MoveControlManager_C_DoWalkingFootstep, CallFunc_GetFootIndexFromSign_Index) == 0x000098, "Member 'COMP_MoveControlManager_C_DoWalkingFootstep::CallFunc_GetFootIndexFromSign_Index' has a wrong offset!");
static_assert(offsetof(COMP_MoveControlManager_C_DoWalkingFootstep, K2Node_MakeStruct_NamedInteger) == 0x00009C, "Member 'COMP_MoveControlManager_C_DoWalkingFootstep::K2Node_MakeStruct_NamedInteger' has a wrong offset!");
static_assert(offsetof(COMP_MoveControlManager_C_DoWalkingFootstep, K2Node_MakeStruct_NamedInteger_1) == 0x0000A8, "Member 'COMP_MoveControlManager_C_DoWalkingFootstep::K2Node_MakeStruct_NamedInteger_1' has a wrong offset!");
static_assert(offsetof(COMP_MoveControlManager_C_DoWalkingFootstep, K2Node_MakeArray_Array) == 0x0000B8, "Member 'COMP_MoveControlManager_C_DoWalkingFootstep::K2Node_MakeArray_Array' has a wrong offset!");
static_assert(offsetof(COMP_MoveControlManager_C_DoWalkingFootstep, K2Node_MakeStruct_NamedFloat) == 0x0000C8, "Member 'COMP_MoveControlManager_C_DoWalkingFootstep::K2Node_MakeStruct_NamedFloat' has a wrong offset!");
static_assert(offsetof(COMP_MoveControlManager_C_DoWalkingFootstep, K2Node_MakeArray_Array_1) == 0x0000D8, "Member 'COMP_MoveControlManager_C_DoWalkingFootstep::K2Node_MakeArray_Array_1' has a wrong offset!");
static_assert(offsetof(COMP_MoveControlManager_C_DoWalkingFootstep, K2Node_MakeStruct_STRUCT_EffectParams) == 0x0000E8, "Member 'COMP_MoveControlManager_C_DoWalkingFootstep::K2Node_MakeStruct_STRUCT_EffectParams' has a wrong offset!");
static_assert(offsetof(COMP_MoveControlManager_C_DoWalkingFootstep, CallFunc_Multiply_FloatFloat_ReturnValue) == 0x000118, "Member 'COMP_MoveControlManager_C_DoWalkingFootstep::CallFunc_Multiply_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(COMP_MoveControlManager_C_DoWalkingFootstep, K2Node_Select_Default_1) == 0x00011C, "Member 'COMP_MoveControlManager_C_DoWalkingFootstep::K2Node_Select_Default_1' has a wrong offset!");
static_assert(offsetof(COMP_MoveControlManager_C_DoWalkingFootstep, CallFunc_Conv_Vector2DToVector_ReturnValue) == 0x000120, "Member 'COMP_MoveControlManager_C_DoWalkingFootstep::CallFunc_Conv_Vector2DToVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(COMP_MoveControlManager_C_DoWalkingFootstep, K2Node_MakeArray_Array_2) == 0x000130, "Member 'COMP_MoveControlManager_C_DoWalkingFootstep::K2Node_MakeArray_Array_2' has a wrong offset!");
static_assert(offsetof(COMP_MoveControlManager_C_DoWalkingFootstep, CallFunc_LineTraceSingleForObjects_OutHit) == 0x000140, "Member 'COMP_MoveControlManager_C_DoWalkingFootstep::CallFunc_LineTraceSingleForObjects_OutHit' has a wrong offset!");
static_assert(offsetof(COMP_MoveControlManager_C_DoWalkingFootstep, CallFunc_LineTraceSingleForObjects_ReturnValue) == 0x0001C8, "Member 'COMP_MoveControlManager_C_DoWalkingFootstep::CallFunc_LineTraceSingleForObjects_ReturnValue' has a wrong offset!");
static_assert(offsetof(COMP_MoveControlManager_C_DoWalkingFootstep, CallFunc_K2_GetActorLocation_ReturnValue) == 0x0001CC, "Member 'COMP_MoveControlManager_C_DoWalkingFootstep::CallFunc_K2_GetActorLocation_ReturnValue' has a wrong offset!");
static_assert(offsetof(COMP_MoveControlManager_C_DoWalkingFootstep, CallFunc_BreakHitResult_bBlockingHit) == 0x0001D8, "Member 'COMP_MoveControlManager_C_DoWalkingFootstep::CallFunc_BreakHitResult_bBlockingHit' has a wrong offset!");
static_assert(offsetof(COMP_MoveControlManager_C_DoWalkingFootstep, CallFunc_BreakHitResult_bInitialOverlap) == 0x0001D9, "Member 'COMP_MoveControlManager_C_DoWalkingFootstep::CallFunc_BreakHitResult_bInitialOverlap' has a wrong offset!");
static_assert(offsetof(COMP_MoveControlManager_C_DoWalkingFootstep, CallFunc_BreakHitResult_Time) == 0x0001DC, "Member 'COMP_MoveControlManager_C_DoWalkingFootstep::CallFunc_BreakHitResult_Time' has a wrong offset!");
static_assert(offsetof(COMP_MoveControlManager_C_DoWalkingFootstep, CallFunc_BreakHitResult_Distance) == 0x0001E0, "Member 'COMP_MoveControlManager_C_DoWalkingFootstep::CallFunc_BreakHitResult_Distance' has a wrong offset!");
static_assert(offsetof(COMP_MoveControlManager_C_DoWalkingFootstep, CallFunc_BreakHitResult_Location) == 0x0001E4, "Member 'COMP_MoveControlManager_C_DoWalkingFootstep::CallFunc_BreakHitResult_Location' has a wrong offset!");
static_assert(offsetof(COMP_MoveControlManager_C_DoWalkingFootstep, CallFunc_BreakHitResult_ImpactPoint) == 0x0001F0, "Member 'COMP_MoveControlManager_C_DoWalkingFootstep::CallFunc_BreakHitResult_ImpactPoint' has a wrong offset!");
static_assert(offsetof(COMP_MoveControlManager_C_DoWalkingFootstep, CallFunc_BreakHitResult_Normal) == 0x0001FC, "Member 'COMP_MoveControlManager_C_DoWalkingFootstep::CallFunc_BreakHitResult_Normal' has a wrong offset!");
static_assert(offsetof(COMP_MoveControlManager_C_DoWalkingFootstep, CallFunc_BreakHitResult_ImpactNormal) == 0x000208, "Member 'COMP_MoveControlManager_C_DoWalkingFootstep::CallFunc_BreakHitResult_ImpactNormal' has a wrong offset!");
static_assert(offsetof(COMP_MoveControlManager_C_DoWalkingFootstep, CallFunc_BreakHitResult_PhysMat) == 0x000218, "Member 'COMP_MoveControlManager_C_DoWalkingFootstep::CallFunc_BreakHitResult_PhysMat' has a wrong offset!");
static_assert(offsetof(COMP_MoveControlManager_C_DoWalkingFootstep, CallFunc_BreakHitResult_HitActor) == 0x000220, "Member 'COMP_MoveControlManager_C_DoWalkingFootstep::CallFunc_BreakHitResult_HitActor' has a wrong offset!");
static_assert(offsetof(COMP_MoveControlManager_C_DoWalkingFootstep, CallFunc_BreakHitResult_HitComponent) == 0x000228, "Member 'COMP_MoveControlManager_C_DoWalkingFootstep::CallFunc_BreakHitResult_HitComponent' has a wrong offset!");
static_assert(offsetof(COMP_MoveControlManager_C_DoWalkingFootstep, CallFunc_BreakHitResult_HitBoneName) == 0x000230, "Member 'COMP_MoveControlManager_C_DoWalkingFootstep::CallFunc_BreakHitResult_HitBoneName' has a wrong offset!");
static_assert(offsetof(COMP_MoveControlManager_C_DoWalkingFootstep, CallFunc_BreakHitResult_HitItem) == 0x000238, "Member 'COMP_MoveControlManager_C_DoWalkingFootstep::CallFunc_BreakHitResult_HitItem' has a wrong offset!");
static_assert(offsetof(COMP_MoveControlManager_C_DoWalkingFootstep, CallFunc_BreakHitResult_ElementIndex) == 0x00023C, "Member 'COMP_MoveControlManager_C_DoWalkingFootstep::CallFunc_BreakHitResult_ElementIndex' has a wrong offset!");
static_assert(offsetof(COMP_MoveControlManager_C_DoWalkingFootstep, CallFunc_BreakHitResult_FaceIndex) == 0x000240, "Member 'COMP_MoveControlManager_C_DoWalkingFootstep::CallFunc_BreakHitResult_FaceIndex' has a wrong offset!");
static_assert(offsetof(COMP_MoveControlManager_C_DoWalkingFootstep, CallFunc_BreakHitResult_TraceStart) == 0x000244, "Member 'COMP_MoveControlManager_C_DoWalkingFootstep::CallFunc_BreakHitResult_TraceStart' has a wrong offset!");
static_assert(offsetof(COMP_MoveControlManager_C_DoWalkingFootstep, CallFunc_BreakHitResult_TraceEnd) == 0x000250, "Member 'COMP_MoveControlManager_C_DoWalkingFootstep::CallFunc_BreakHitResult_TraceEnd' has a wrong offset!");
static_assert(offsetof(COMP_MoveControlManager_C_DoWalkingFootstep, CallFunc_CreateImpactEffects_Success) == 0x00025C, "Member 'COMP_MoveControlManager_C_DoWalkingFootstep::CallFunc_CreateImpactEffects_Success' has a wrong offset!");
static_assert(offsetof(COMP_MoveControlManager_C_DoWalkingFootstep, CallFunc_CreateImpactEffects_Results) == 0x000260, "Member 'COMP_MoveControlManager_C_DoWalkingFootstep::CallFunc_CreateImpactEffects_Results' has a wrong offset!");
static_assert(offsetof(COMP_MoveControlManager_C_DoWalkingFootstep, CallFunc_Add_VectorVector_ReturnValue) == 0x000278, "Member 'COMP_MoveControlManager_C_DoWalkingFootstep::CallFunc_Add_VectorVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(COMP_MoveControlManager_C_DoWalkingFootstep, CallFunc_SpawnSoundAttached_ReturnValue) == 0x000288, "Member 'COMP_MoveControlManager_C_DoWalkingFootstep::CallFunc_SpawnSoundAttached_ReturnValue' has a wrong offset!");
static_assert(offsetof(COMP_MoveControlManager_C_DoWalkingFootstep, Temp_bool_Variable_2) == 0x000290, "Member 'COMP_MoveControlManager_C_DoWalkingFootstep::Temp_bool_Variable_2' has a wrong offset!");
static_assert(offsetof(COMP_MoveControlManager_C_DoWalkingFootstep, CallFunc_GetActorRightVector_ReturnValue) == 0x000294, "Member 'COMP_MoveControlManager_C_DoWalkingFootstep::CallFunc_GetActorRightVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(COMP_MoveControlManager_C_DoWalkingFootstep, K2Node_Select_Default_2) == 0x0002A0, "Member 'COMP_MoveControlManager_C_DoWalkingFootstep::K2Node_Select_Default_2' has a wrong offset!");
static_assert(offsetof(COMP_MoveControlManager_C_DoWalkingFootstep, CallFunc_Lerp_ReturnValue) == 0x0002A8, "Member 'COMP_MoveControlManager_C_DoWalkingFootstep::CallFunc_Lerp_ReturnValue' has a wrong offset!");
static_assert(offsetof(COMP_MoveControlManager_C_DoWalkingFootstep, CallFunc_Subtract_FloatFloat_ReturnValue) == 0x0002AC, "Member 'COMP_MoveControlManager_C_DoWalkingFootstep::CallFunc_Subtract_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(COMP_MoveControlManager_C_DoWalkingFootstep, CallFunc_Greater_FloatFloat_ReturnValue) == 0x0002B0, "Member 'COMP_MoveControlManager_C_DoWalkingFootstep::CallFunc_Greater_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(COMP_MoveControlManager_C_DoWalkingFootstep, CallFunc_Lerp_ReturnValue_1) == 0x0002B4, "Member 'COMP_MoveControlManager_C_DoWalkingFootstep::CallFunc_Lerp_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(COMP_MoveControlManager_C_DoWalkingFootstep, CallFunc_Multiply_FloatFloat_ReturnValue_1) == 0x0002B8, "Member 'COMP_MoveControlManager_C_DoWalkingFootstep::CallFunc_Multiply_FloatFloat_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(COMP_MoveControlManager_C_DoWalkingFootstep, K2Node_Select_Default_3) == 0x0002BC, "Member 'COMP_MoveControlManager_C_DoWalkingFootstep::K2Node_Select_Default_3' has a wrong offset!");
static_assert(offsetof(COMP_MoveControlManager_C_DoWalkingFootstep, CallFunc_Multiply_IntFloat_ReturnValue) == 0x0002C0, "Member 'COMP_MoveControlManager_C_DoWalkingFootstep::CallFunc_Multiply_IntFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(COMP_MoveControlManager_C_DoWalkingFootstep, CallFunc_Multiply_VectorFloat_ReturnValue) == 0x0002C4, "Member 'COMP_MoveControlManager_C_DoWalkingFootstep::CallFunc_Multiply_VectorFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(COMP_MoveControlManager_C_DoWalkingFootstep, CallFunc_Multiply_VectorFloat_ReturnValue_1) == 0x0002D0, "Member 'COMP_MoveControlManager_C_DoWalkingFootstep::CallFunc_Multiply_VectorFloat_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(COMP_MoveControlManager_C_DoWalkingFootstep, CallFunc_Add_VectorVector_ReturnValue_1) == 0x0002DC, "Member 'COMP_MoveControlManager_C_DoWalkingFootstep::CallFunc_Add_VectorVector_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(COMP_MoveControlManager_C_DoWalkingFootstep, CallFunc_Add_VectorVector_ReturnValue_2) == 0x0002E8, "Member 'COMP_MoveControlManager_C_DoWalkingFootstep::CallFunc_Add_VectorVector_ReturnValue_2' has a wrong offset!");

// Function COMP_MoveControlManager.COMP_MoveControlManager_C.UpdateBreathing
// 0x0028 (0x0028 - 0x0000)
struct COMP_MoveControlManager_C_UpdateBreathing final
{
public:
	float                                         DeltaTime;                                         // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         LastBreathProgress;                                // 0x0004(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Temp_float_Variable;                               // 0x0008(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector2D_X;                          // 0x000C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector2D_Y;                          // 0x0010(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Subtract_FloatFloat_ReturnValue;          // 0x0014(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_GreaterEqual_FloatFloat_ReturnValue;      // 0x0018(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_19[0x3];                                       // 0x0019(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_Lerp_ReturnValue;                         // 0x001C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Divide_FloatFloat_ReturnValue;            // 0x0020(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Add_FloatFloat_ReturnValue;               // 0x0024(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(COMP_MoveControlManager_C_UpdateBreathing) == 0x000004, "Wrong alignment on COMP_MoveControlManager_C_UpdateBreathing");
static_assert(sizeof(COMP_MoveControlManager_C_UpdateBreathing) == 0x000028, "Wrong size on COMP_MoveControlManager_C_UpdateBreathing");
static_assert(offsetof(COMP_MoveControlManager_C_UpdateBreathing, DeltaTime) == 0x000000, "Member 'COMP_MoveControlManager_C_UpdateBreathing::DeltaTime' has a wrong offset!");
static_assert(offsetof(COMP_MoveControlManager_C_UpdateBreathing, LastBreathProgress) == 0x000004, "Member 'COMP_MoveControlManager_C_UpdateBreathing::LastBreathProgress' has a wrong offset!");
static_assert(offsetof(COMP_MoveControlManager_C_UpdateBreathing, Temp_float_Variable) == 0x000008, "Member 'COMP_MoveControlManager_C_UpdateBreathing::Temp_float_Variable' has a wrong offset!");
static_assert(offsetof(COMP_MoveControlManager_C_UpdateBreathing, CallFunc_BreakVector2D_X) == 0x00000C, "Member 'COMP_MoveControlManager_C_UpdateBreathing::CallFunc_BreakVector2D_X' has a wrong offset!");
static_assert(offsetof(COMP_MoveControlManager_C_UpdateBreathing, CallFunc_BreakVector2D_Y) == 0x000010, "Member 'COMP_MoveControlManager_C_UpdateBreathing::CallFunc_BreakVector2D_Y' has a wrong offset!");
static_assert(offsetof(COMP_MoveControlManager_C_UpdateBreathing, CallFunc_Subtract_FloatFloat_ReturnValue) == 0x000014, "Member 'COMP_MoveControlManager_C_UpdateBreathing::CallFunc_Subtract_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(COMP_MoveControlManager_C_UpdateBreathing, CallFunc_GreaterEqual_FloatFloat_ReturnValue) == 0x000018, "Member 'COMP_MoveControlManager_C_UpdateBreathing::CallFunc_GreaterEqual_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(COMP_MoveControlManager_C_UpdateBreathing, CallFunc_Lerp_ReturnValue) == 0x00001C, "Member 'COMP_MoveControlManager_C_UpdateBreathing::CallFunc_Lerp_ReturnValue' has a wrong offset!");
static_assert(offsetof(COMP_MoveControlManager_C_UpdateBreathing, CallFunc_Divide_FloatFloat_ReturnValue) == 0x000020, "Member 'COMP_MoveControlManager_C_UpdateBreathing::CallFunc_Divide_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(COMP_MoveControlManager_C_UpdateBreathing, CallFunc_Add_FloatFloat_ReturnValue) == 0x000024, "Member 'COMP_MoveControlManager_C_UpdateBreathing::CallFunc_Add_FloatFloat_ReturnValue' has a wrong offset!");

// Function COMP_MoveControlManager.COMP_MoveControlManager_C.UpdateMovementFlags
// 0x0040 (0x0040 - 0x0000)
struct COMP_MoveControlManager_C_UpdateMovementFlags final
{
public:
	class UAnimInstance*                          CallFunc_GetAnimInstance_ReturnValue;              // 0x0000(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Greater_FloatFloat_ReturnValue;           // 0x0008(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TScriptInterface<class IINTERF_ANIM_Hacker_C> K2Node_DynamicCast_AsINTERF_ANIM_Hacker;           // 0x0010(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0020(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_SetMovementParameters_Result;             // 0x0021(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_22[0x2];                                       // 0x0022(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_VSizeXY_ReturnValue;                      // 0x0024(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsFalling_ReturnValue;                    // 0x0028(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Not_PreBool_ReturnValue;                  // 0x0029(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_2A[0x2];                                       // 0x002A(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector2D                              CallFunc_Conv_VectorToVector2D_ReturnValue;        // 0x002C(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector2D                              CallFunc_Normal2D_ReturnValue;                     // 0x0034(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Greater_FloatFloat_ReturnValue_1;         // 0x003C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(COMP_MoveControlManager_C_UpdateMovementFlags) == 0x000008, "Wrong alignment on COMP_MoveControlManager_C_UpdateMovementFlags");
static_assert(sizeof(COMP_MoveControlManager_C_UpdateMovementFlags) == 0x000040, "Wrong size on COMP_MoveControlManager_C_UpdateMovementFlags");
static_assert(offsetof(COMP_MoveControlManager_C_UpdateMovementFlags, CallFunc_GetAnimInstance_ReturnValue) == 0x000000, "Member 'COMP_MoveControlManager_C_UpdateMovementFlags::CallFunc_GetAnimInstance_ReturnValue' has a wrong offset!");
static_assert(offsetof(COMP_MoveControlManager_C_UpdateMovementFlags, CallFunc_Greater_FloatFloat_ReturnValue) == 0x000008, "Member 'COMP_MoveControlManager_C_UpdateMovementFlags::CallFunc_Greater_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(COMP_MoveControlManager_C_UpdateMovementFlags, K2Node_DynamicCast_AsINTERF_ANIM_Hacker) == 0x000010, "Member 'COMP_MoveControlManager_C_UpdateMovementFlags::K2Node_DynamicCast_AsINTERF_ANIM_Hacker' has a wrong offset!");
static_assert(offsetof(COMP_MoveControlManager_C_UpdateMovementFlags, K2Node_DynamicCast_bSuccess) == 0x000020, "Member 'COMP_MoveControlManager_C_UpdateMovementFlags::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(COMP_MoveControlManager_C_UpdateMovementFlags, CallFunc_SetMovementParameters_Result) == 0x000021, "Member 'COMP_MoveControlManager_C_UpdateMovementFlags::CallFunc_SetMovementParameters_Result' has a wrong offset!");
static_assert(offsetof(COMP_MoveControlManager_C_UpdateMovementFlags, CallFunc_VSizeXY_ReturnValue) == 0x000024, "Member 'COMP_MoveControlManager_C_UpdateMovementFlags::CallFunc_VSizeXY_ReturnValue' has a wrong offset!");
static_assert(offsetof(COMP_MoveControlManager_C_UpdateMovementFlags, CallFunc_IsFalling_ReturnValue) == 0x000028, "Member 'COMP_MoveControlManager_C_UpdateMovementFlags::CallFunc_IsFalling_ReturnValue' has a wrong offset!");
static_assert(offsetof(COMP_MoveControlManager_C_UpdateMovementFlags, CallFunc_Not_PreBool_ReturnValue) == 0x000029, "Member 'COMP_MoveControlManager_C_UpdateMovementFlags::CallFunc_Not_PreBool_ReturnValue' has a wrong offset!");
static_assert(offsetof(COMP_MoveControlManager_C_UpdateMovementFlags, CallFunc_Conv_VectorToVector2D_ReturnValue) == 0x00002C, "Member 'COMP_MoveControlManager_C_UpdateMovementFlags::CallFunc_Conv_VectorToVector2D_ReturnValue' has a wrong offset!");
static_assert(offsetof(COMP_MoveControlManager_C_UpdateMovementFlags, CallFunc_Normal2D_ReturnValue) == 0x000034, "Member 'COMP_MoveControlManager_C_UpdateMovementFlags::CallFunc_Normal2D_ReturnValue' has a wrong offset!");
static_assert(offsetof(COMP_MoveControlManager_C_UpdateMovementFlags, CallFunc_Greater_FloatFloat_ReturnValue_1) == 0x00003C, "Member 'COMP_MoveControlManager_C_UpdateMovementFlags::CallFunc_Greater_FloatFloat_ReturnValue_1' has a wrong offset!");

// Function COMP_MoveControlManager.COMP_MoveControlManager_C.SetCameraBobType
// 0x0003 (0x0003 - 0x0000)
struct COMP_MoveControlManager_C_SetCameraBobType final
{
public:
	ENUM_CameraBobType                            CameraBobType;                                     // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_SwitchEnum_CmpSuccess;                      // 0x0001(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_NotEqual_ByteByte_ReturnValue;            // 0x0002(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(COMP_MoveControlManager_C_SetCameraBobType) == 0x000001, "Wrong alignment on COMP_MoveControlManager_C_SetCameraBobType");
static_assert(sizeof(COMP_MoveControlManager_C_SetCameraBobType) == 0x000003, "Wrong size on COMP_MoveControlManager_C_SetCameraBobType");
static_assert(offsetof(COMP_MoveControlManager_C_SetCameraBobType, CameraBobType) == 0x000000, "Member 'COMP_MoveControlManager_C_SetCameraBobType::CameraBobType' has a wrong offset!");
static_assert(offsetof(COMP_MoveControlManager_C_SetCameraBobType, K2Node_SwitchEnum_CmpSuccess) == 0x000001, "Member 'COMP_MoveControlManager_C_SetCameraBobType::K2Node_SwitchEnum_CmpSuccess' has a wrong offset!");
static_assert(offsetof(COMP_MoveControlManager_C_SetCameraBobType, CallFunc_NotEqual_ByteByte_ReturnValue) == 0x000002, "Member 'COMP_MoveControlManager_C_SetCameraBobType::CallFunc_NotEqual_ByteByte_ReturnValue' has a wrong offset!");

// Function COMP_MoveControlManager.COMP_MoveControlManager_C.GetParamValue
// 0x0030 (0x0030 - 0x0000)
struct COMP_MoveControlManager_C_GetParamValue final
{
public:
	struct FVector2D                              Interval;                                          // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Scale;                                             // 0x0008(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Value;                                             // 0x000C(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector2D_X;                          // 0x0010(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector2D_Y;                          // 0x0014(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector2D_X_1;                        // 0x0018(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector2D_Y_1;                        // 0x001C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Lerp_ReturnValue;                         // 0x0020(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Subtract_FloatFloat_ReturnValue;          // 0x0024(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Lerp_ReturnValue_1;                       // 0x0028(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Greater_FloatFloat_ReturnValue;           // 0x002C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(COMP_MoveControlManager_C_GetParamValue) == 0x000004, "Wrong alignment on COMP_MoveControlManager_C_GetParamValue");
static_assert(sizeof(COMP_MoveControlManager_C_GetParamValue) == 0x000030, "Wrong size on COMP_MoveControlManager_C_GetParamValue");
static_assert(offsetof(COMP_MoveControlManager_C_GetParamValue, Interval) == 0x000000, "Member 'COMP_MoveControlManager_C_GetParamValue::Interval' has a wrong offset!");
static_assert(offsetof(COMP_MoveControlManager_C_GetParamValue, Scale) == 0x000008, "Member 'COMP_MoveControlManager_C_GetParamValue::Scale' has a wrong offset!");
static_assert(offsetof(COMP_MoveControlManager_C_GetParamValue, Value) == 0x00000C, "Member 'COMP_MoveControlManager_C_GetParamValue::Value' has a wrong offset!");
static_assert(offsetof(COMP_MoveControlManager_C_GetParamValue, CallFunc_BreakVector2D_X) == 0x000010, "Member 'COMP_MoveControlManager_C_GetParamValue::CallFunc_BreakVector2D_X' has a wrong offset!");
static_assert(offsetof(COMP_MoveControlManager_C_GetParamValue, CallFunc_BreakVector2D_Y) == 0x000014, "Member 'COMP_MoveControlManager_C_GetParamValue::CallFunc_BreakVector2D_Y' has a wrong offset!");
static_assert(offsetof(COMP_MoveControlManager_C_GetParamValue, CallFunc_BreakVector2D_X_1) == 0x000018, "Member 'COMP_MoveControlManager_C_GetParamValue::CallFunc_BreakVector2D_X_1' has a wrong offset!");
static_assert(offsetof(COMP_MoveControlManager_C_GetParamValue, CallFunc_BreakVector2D_Y_1) == 0x00001C, "Member 'COMP_MoveControlManager_C_GetParamValue::CallFunc_BreakVector2D_Y_1' has a wrong offset!");
static_assert(offsetof(COMP_MoveControlManager_C_GetParamValue, CallFunc_Lerp_ReturnValue) == 0x000020, "Member 'COMP_MoveControlManager_C_GetParamValue::CallFunc_Lerp_ReturnValue' has a wrong offset!");
static_assert(offsetof(COMP_MoveControlManager_C_GetParamValue, CallFunc_Subtract_FloatFloat_ReturnValue) == 0x000024, "Member 'COMP_MoveControlManager_C_GetParamValue::CallFunc_Subtract_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(COMP_MoveControlManager_C_GetParamValue, CallFunc_Lerp_ReturnValue_1) == 0x000028, "Member 'COMP_MoveControlManager_C_GetParamValue::CallFunc_Lerp_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(COMP_MoveControlManager_C_GetParamValue, CallFunc_Greater_FloatFloat_ReturnValue) == 0x00002C, "Member 'COMP_MoveControlManager_C_GetParamValue::CallFunc_Greater_FloatFloat_ReturnValue' has a wrong offset!");

// Function COMP_MoveControlManager.COMP_MoveControlManager_C.HandleAirLanding
// 0x0610 (0x0610 - 0x0000)
struct COMP_MoveControlManager_C_HandleAirLanding final
{
public:
	struct FHitResult                             Hit;                                               // 0x0000(0x0088)(BlueprintVisible, BlueprintReadOnly, Parm, IsPlainOldData, NoDestructor, ContainsInstancedReference)
	struct FAttribModApplyData                    StaminaDamageMod;                                  // 0x0088(0x00A0)(Edit, BlueprintVisible)
	struct FAttribModApplyData                    FallSpeedReductionMod;                             // 0x0128(0x00A0)(Edit, BlueprintVisible)
	struct FAttribModApplyData                    FallDamageMod;                                     // 0x01C8(0x00A0)(Edit, BlueprintVisible)
	float                                         FallDamage;                                        // 0x0268(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         DamageScale;                                       // 0x026C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         LandingSpeedForSlump;                              // 0x0270(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         VerticalLandingSpeed;                              // 0x0274(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                RaycastTarget;                                     // 0x0278(0x000C)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                RaycastSource;                                     // 0x0284(0x000C)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ENUM_HackerGender                             Temp_byte_Variable;                                // 0x0290(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_291[0x7];                                      // 0x0291(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class USoundBase*                             Temp_object_Variable;                              // 0x0298(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class USoundBase*                             Temp_object_Variable_1;                            // 0x02A0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TArray<class AActor*>                         Temp_object_Variable_2;                            // 0x02A8(0x0010)(ConstParm, ReferenceParm)
	class UCOMP_VoxelAudio_C*                     CallFunc_GetAudioComponentByLocationType_Result;   // 0x02B8(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_ShouldSkateWhileSprinting_Result;         // 0x02C0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_2C1[0x3];                                      // 0x02C1(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_BreakVector_X;                            // 0x02C4(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector_Y;                            // 0x02C8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector_Z;                            // 0x02CC(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_GetGameTimeInSeconds_ReturnValue;         // 0x02D0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Abs_ReturnValue;                          // 0x02D4(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector2D                              CallFunc_MakeVector2D_ReturnValue;                 // 0x02D8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_VSize2D_ReturnValue;                      // 0x02E0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Multiply_FloatFloat_ReturnValue;          // 0x02E4(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_MapRangeClamped_ReturnValue;              // 0x02E8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Add_FloatFloat_ReturnValue;               // 0x02EC(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_GreaterEqual_FloatFloat_ReturnValue;      // 0x02F0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_2F1[0x3];                                      // 0x02F1(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_GetMoveActionInputValue_Value;            // 0x02F4(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_LessEqual_FloatFloat_ReturnValue;         // 0x02F8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BooleanOR_ReturnValue;                    // 0x02F9(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Greater_FloatFloat_ReturnValue;           // 0x02FA(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_2FB[0x5];                                      // 0x02FB(0x0005)(Fixing Size After Last Property [ Dumper-7 ])
	class UAttribInstance*                        CallFunc_GetAttribInstance_ReturnValue;            // 0x0300(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_GetMaxValue_ReturnValue;                  // 0x0308(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Divide_FloatFloat_ReturnValue;            // 0x030C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_MapRangeClamped_ReturnValue_1;            // 0x0310(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_MapRangeClamped_ReturnValue_2;            // 0x0314(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UAttribMod*                             CallFunc_ApplyMod_ReturnValue;                     // 0x0318(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Greater_FloatFloat_ReturnValue_1;         // 0x0320(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_321[0x7];                                      // 0x0321(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UAttribMod*                             CallFunc_ApplyMod_ReturnValue_1;                   // 0x0328(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Greater_FloatFloat_ReturnValue_2;         // 0x0330(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_331[0x3];                                      // 0x0331(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_MapRangeClamped_ReturnValue_3;            // 0x0334(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Ease_ReturnValue;                         // 0x0338(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_GreaterEqual_FloatFloat_ReturnValue_1;    // 0x033C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_33D[0x3];                                      // 0x033D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_MapRangeClamped_ReturnValue_4;            // 0x0340(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_344[0x4];                                      // 0x0344(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UOBJ_ImpactData_C*                      CallFunc_SpawnObject_ReturnValue;                  // 0x0348(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BreakHitResult_bBlockingHit;              // 0x0350(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BreakHitResult_bInitialOverlap;           // 0x0351(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_352[0x2];                                      // 0x0352(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_BreakHitResult_Time;                      // 0x0354(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakHitResult_Distance;                  // 0x0358(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakHitResult_Location;                  // 0x035C(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakHitResult_ImpactPoint;               // 0x0368(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakHitResult_Normal;                    // 0x0374(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakHitResult_ImpactNormal;              // 0x0380(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_38C[0x4];                                      // 0x038C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UPhysicalMaterial*                      CallFunc_BreakHitResult_PhysMat;                   // 0x0390(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 CallFunc_BreakHitResult_HitActor;                  // 0x0398(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UPrimitiveComponent*                    CallFunc_BreakHitResult_HitComponent;              // 0x03A0(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FName                                   CallFunc_BreakHitResult_HitBoneName;               // 0x03A8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_BreakHitResult_HitItem;                   // 0x03B0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_BreakHitResult_ElementIndex;              // 0x03B4(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_BreakHitResult_FaceIndex;                 // 0x03B8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakHitResult_TraceStart;                // 0x03BC(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakHitResult_TraceEnd;                  // 0x03C8(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_3D4[0x4];                                      // 0x03D4(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UAttribMod*                             CallFunc_ApplyMod_ReturnValue_2;                   // 0x03D8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Variable;                                // 0x03E0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_3E1[0x7];                                      // 0x03E1(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UAttribInstance*                        CallFunc_GetAttribInstance_ReturnValue_1;          // 0x03E8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_GetMaxValue_ReturnValue_1;                // 0x03F0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Multiply_FloatFloat_ReturnValue_1;        // 0x03F4(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_FMax_ReturnValue;                         // 0x03F8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_3FC[0x4];                                      // 0x03FC(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UAnimInstance*                          CallFunc_GetAnimInstance_ReturnValue;              // 0x0400(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TScriptInterface<class IINTERF_ANIM_Hacker_C> K2Node_DynamicCast_AsINTERF_ANIM_Hacker;           // 0x0408(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0418(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_SetAirLandingScale_Result;                // 0x0419(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_41A[0x6];                                      // 0x041A(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class UAnimMontage*                           K2Node_Select_Default;                             // 0x0420(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UCharacterAction_C*                     CallFunc_TryBeginAction_Action;                    // 0x0428(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UAnimInstance*                          CallFunc_GetAnimInstance_ReturnValue_1;            // 0x0430(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector_X_1;                          // 0x0438(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector_Y_1;                          // 0x043C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector_Z_1;                          // 0x0440(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_444[0x4];                                      // 0x0444(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TScriptInterface<class IINTERF_ANIM_Hacker_C> K2Node_DynamicCast_AsINTERF_ANIM_Hacker_1;         // 0x0448(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          K2Node_DynamicCast_bSuccess_1;                     // 0x0458(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_459[0x3];                                      // 0x0459(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_Abs_ReturnValue_1;                        // 0x045C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_SetIsGrounded_Result;                     // 0x0460(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_461[0x3];                                      // 0x0461(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FNamedFloat                            K2Node_MakeStruct_NamedFloat;                      // 0x0464(0x000C)(NoDestructor)
	class USoundBase*                             K2Node_Select_Default_1;                           // 0x0470(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TArray<struct FNamedFloat>                    K2Node_MakeArray_Array;                            // 0x0478(0x0010)(ReferenceParm)
	struct FSTRUCT_EffectParams                   K2Node_MakeStruct_STRUCT_EffectParams;             // 0x0488(0x0030)(HasGetValueTypeHash)
	TArray<EObjectTypeQuery>                      K2Node_MakeArray_Array_1;                          // 0x04B8(0x0010)(ConstParm, ReferenceParm)
	struct FHitResult                             CallFunc_LineTraceSingleForObjects_OutHit;         // 0x04C8(0x0088)(IsPlainOldData, NoDestructor, ContainsInstancedReference)
	bool                                          CallFunc_LineTraceSingleForObjects_ReturnValue;    // 0x0550(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_551[0x3];                                      // 0x0551(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                CallFunc_Add_VectorVector_ReturnValue;             // 0x0554(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BreakHitResult_bBlockingHit_1;            // 0x0560(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BreakHitResult_bInitialOverlap_1;         // 0x0561(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_562[0x2];                                      // 0x0562(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_BreakHitResult_Time_1;                    // 0x0564(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakHitResult_Distance_1;                // 0x0568(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakHitResult_Location_1;                // 0x056C(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakHitResult_ImpactPoint_1;             // 0x0578(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakHitResult_Normal_1;                  // 0x0584(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakHitResult_ImpactNormal_1;            // 0x0590(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_59C[0x4];                                      // 0x059C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UPhysicalMaterial*                      CallFunc_BreakHitResult_PhysMat_1;                 // 0x05A0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 CallFunc_BreakHitResult_HitActor_1;                // 0x05A8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UPrimitiveComponent*                    CallFunc_BreakHitResult_HitComponent_1;            // 0x05B0(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FName                                   CallFunc_BreakHitResult_HitBoneName_1;             // 0x05B8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_BreakHitResult_HitItem_1;                 // 0x05C0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_BreakHitResult_ElementIndex_1;            // 0x05C4(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_BreakHitResult_FaceIndex_1;               // 0x05C8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakHitResult_TraceStart_1;              // 0x05CC(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakHitResult_TraceEnd_1;                // 0x05D8(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_CreateImpactEffects_Success;              // 0x05E4(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_5E5[0x3];                                      // 0x05E5(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FSTRUCT_ImpactEffectResults            CallFunc_CreateImpactEffects_Results;              // 0x05E8(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, ContainsInstancedReference, HasGetValueTypeHash)
	struct FVector                                CallFunc_K2_GetActorLocation_ReturnValue;          // 0x0600(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(COMP_MoveControlManager_C_HandleAirLanding) == 0x000008, "Wrong alignment on COMP_MoveControlManager_C_HandleAirLanding");
static_assert(sizeof(COMP_MoveControlManager_C_HandleAirLanding) == 0x000610, "Wrong size on COMP_MoveControlManager_C_HandleAirLanding");
static_assert(offsetof(COMP_MoveControlManager_C_HandleAirLanding, Hit) == 0x000000, "Member 'COMP_MoveControlManager_C_HandleAirLanding::Hit' has a wrong offset!");
static_assert(offsetof(COMP_MoveControlManager_C_HandleAirLanding, StaminaDamageMod) == 0x000088, "Member 'COMP_MoveControlManager_C_HandleAirLanding::StaminaDamageMod' has a wrong offset!");
static_assert(offsetof(COMP_MoveControlManager_C_HandleAirLanding, FallSpeedReductionMod) == 0x000128, "Member 'COMP_MoveControlManager_C_HandleAirLanding::FallSpeedReductionMod' has a wrong offset!");
static_assert(offsetof(COMP_MoveControlManager_C_HandleAirLanding, FallDamageMod) == 0x0001C8, "Member 'COMP_MoveControlManager_C_HandleAirLanding::FallDamageMod' has a wrong offset!");
static_assert(offsetof(COMP_MoveControlManager_C_HandleAirLanding, FallDamage) == 0x000268, "Member 'COMP_MoveControlManager_C_HandleAirLanding::FallDamage' has a wrong offset!");
static_assert(offsetof(COMP_MoveControlManager_C_HandleAirLanding, DamageScale) == 0x00026C, "Member 'COMP_MoveControlManager_C_HandleAirLanding::DamageScale' has a wrong offset!");
static_assert(offsetof(COMP_MoveControlManager_C_HandleAirLanding, LandingSpeedForSlump) == 0x000270, "Member 'COMP_MoveControlManager_C_HandleAirLanding::LandingSpeedForSlump' has a wrong offset!");
static_assert(offsetof(COMP_MoveControlManager_C_HandleAirLanding, VerticalLandingSpeed) == 0x000274, "Member 'COMP_MoveControlManager_C_HandleAirLanding::VerticalLandingSpeed' has a wrong offset!");
static_assert(offsetof(COMP_MoveControlManager_C_HandleAirLanding, RaycastTarget) == 0x000278, "Member 'COMP_MoveControlManager_C_HandleAirLanding::RaycastTarget' has a wrong offset!");
static_assert(offsetof(COMP_MoveControlManager_C_HandleAirLanding, RaycastSource) == 0x000284, "Member 'COMP_MoveControlManager_C_HandleAirLanding::RaycastSource' has a wrong offset!");
static_assert(offsetof(COMP_MoveControlManager_C_HandleAirLanding, Temp_byte_Variable) == 0x000290, "Member 'COMP_MoveControlManager_C_HandleAirLanding::Temp_byte_Variable' has a wrong offset!");
static_assert(offsetof(COMP_MoveControlManager_C_HandleAirLanding, Temp_object_Variable) == 0x000298, "Member 'COMP_MoveControlManager_C_HandleAirLanding::Temp_object_Variable' has a wrong offset!");
static_assert(offsetof(COMP_MoveControlManager_C_HandleAirLanding, Temp_object_Variable_1) == 0x0002A0, "Member 'COMP_MoveControlManager_C_HandleAirLanding::Temp_object_Variable_1' has a wrong offset!");
static_assert(offsetof(COMP_MoveControlManager_C_HandleAirLanding, Temp_object_Variable_2) == 0x0002A8, "Member 'COMP_MoveControlManager_C_HandleAirLanding::Temp_object_Variable_2' has a wrong offset!");
static_assert(offsetof(COMP_MoveControlManager_C_HandleAirLanding, CallFunc_GetAudioComponentByLocationType_Result) == 0x0002B8, "Member 'COMP_MoveControlManager_C_HandleAirLanding::CallFunc_GetAudioComponentByLocationType_Result' has a wrong offset!");
static_assert(offsetof(COMP_MoveControlManager_C_HandleAirLanding, CallFunc_ShouldSkateWhileSprinting_Result) == 0x0002C0, "Member 'COMP_MoveControlManager_C_HandleAirLanding::CallFunc_ShouldSkateWhileSprinting_Result' has a wrong offset!");
static_assert(offsetof(COMP_MoveControlManager_C_HandleAirLanding, CallFunc_BreakVector_X) == 0x0002C4, "Member 'COMP_MoveControlManager_C_HandleAirLanding::CallFunc_BreakVector_X' has a wrong offset!");
static_assert(offsetof(COMP_MoveControlManager_C_HandleAirLanding, CallFunc_BreakVector_Y) == 0x0002C8, "Member 'COMP_MoveControlManager_C_HandleAirLanding::CallFunc_BreakVector_Y' has a wrong offset!");
static_assert(offsetof(COMP_MoveControlManager_C_HandleAirLanding, CallFunc_BreakVector_Z) == 0x0002CC, "Member 'COMP_MoveControlManager_C_HandleAirLanding::CallFunc_BreakVector_Z' has a wrong offset!");
static_assert(offsetof(COMP_MoveControlManager_C_HandleAirLanding, CallFunc_GetGameTimeInSeconds_ReturnValue) == 0x0002D0, "Member 'COMP_MoveControlManager_C_HandleAirLanding::CallFunc_GetGameTimeInSeconds_ReturnValue' has a wrong offset!");
static_assert(offsetof(COMP_MoveControlManager_C_HandleAirLanding, CallFunc_Abs_ReturnValue) == 0x0002D4, "Member 'COMP_MoveControlManager_C_HandleAirLanding::CallFunc_Abs_ReturnValue' has a wrong offset!");
static_assert(offsetof(COMP_MoveControlManager_C_HandleAirLanding, CallFunc_MakeVector2D_ReturnValue) == 0x0002D8, "Member 'COMP_MoveControlManager_C_HandleAirLanding::CallFunc_MakeVector2D_ReturnValue' has a wrong offset!");
static_assert(offsetof(COMP_MoveControlManager_C_HandleAirLanding, CallFunc_VSize2D_ReturnValue) == 0x0002E0, "Member 'COMP_MoveControlManager_C_HandleAirLanding::CallFunc_VSize2D_ReturnValue' has a wrong offset!");
static_assert(offsetof(COMP_MoveControlManager_C_HandleAirLanding, CallFunc_Multiply_FloatFloat_ReturnValue) == 0x0002E4, "Member 'COMP_MoveControlManager_C_HandleAirLanding::CallFunc_Multiply_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(COMP_MoveControlManager_C_HandleAirLanding, CallFunc_MapRangeClamped_ReturnValue) == 0x0002E8, "Member 'COMP_MoveControlManager_C_HandleAirLanding::CallFunc_MapRangeClamped_ReturnValue' has a wrong offset!");
static_assert(offsetof(COMP_MoveControlManager_C_HandleAirLanding, CallFunc_Add_FloatFloat_ReturnValue) == 0x0002EC, "Member 'COMP_MoveControlManager_C_HandleAirLanding::CallFunc_Add_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(COMP_MoveControlManager_C_HandleAirLanding, CallFunc_GreaterEqual_FloatFloat_ReturnValue) == 0x0002F0, "Member 'COMP_MoveControlManager_C_HandleAirLanding::CallFunc_GreaterEqual_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(COMP_MoveControlManager_C_HandleAirLanding, CallFunc_GetMoveActionInputValue_Value) == 0x0002F4, "Member 'COMP_MoveControlManager_C_HandleAirLanding::CallFunc_GetMoveActionInputValue_Value' has a wrong offset!");
static_assert(offsetof(COMP_MoveControlManager_C_HandleAirLanding, CallFunc_LessEqual_FloatFloat_ReturnValue) == 0x0002F8, "Member 'COMP_MoveControlManager_C_HandleAirLanding::CallFunc_LessEqual_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(COMP_MoveControlManager_C_HandleAirLanding, CallFunc_BooleanOR_ReturnValue) == 0x0002F9, "Member 'COMP_MoveControlManager_C_HandleAirLanding::CallFunc_BooleanOR_ReturnValue' has a wrong offset!");
static_assert(offsetof(COMP_MoveControlManager_C_HandleAirLanding, CallFunc_Greater_FloatFloat_ReturnValue) == 0x0002FA, "Member 'COMP_MoveControlManager_C_HandleAirLanding::CallFunc_Greater_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(COMP_MoveControlManager_C_HandleAirLanding, CallFunc_GetAttribInstance_ReturnValue) == 0x000300, "Member 'COMP_MoveControlManager_C_HandleAirLanding::CallFunc_GetAttribInstance_ReturnValue' has a wrong offset!");
static_assert(offsetof(COMP_MoveControlManager_C_HandleAirLanding, CallFunc_GetMaxValue_ReturnValue) == 0x000308, "Member 'COMP_MoveControlManager_C_HandleAirLanding::CallFunc_GetMaxValue_ReturnValue' has a wrong offset!");
static_assert(offsetof(COMP_MoveControlManager_C_HandleAirLanding, CallFunc_Divide_FloatFloat_ReturnValue) == 0x00030C, "Member 'COMP_MoveControlManager_C_HandleAirLanding::CallFunc_Divide_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(COMP_MoveControlManager_C_HandleAirLanding, CallFunc_MapRangeClamped_ReturnValue_1) == 0x000310, "Member 'COMP_MoveControlManager_C_HandleAirLanding::CallFunc_MapRangeClamped_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(COMP_MoveControlManager_C_HandleAirLanding, CallFunc_MapRangeClamped_ReturnValue_2) == 0x000314, "Member 'COMP_MoveControlManager_C_HandleAirLanding::CallFunc_MapRangeClamped_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(COMP_MoveControlManager_C_HandleAirLanding, CallFunc_ApplyMod_ReturnValue) == 0x000318, "Member 'COMP_MoveControlManager_C_HandleAirLanding::CallFunc_ApplyMod_ReturnValue' has a wrong offset!");
static_assert(offsetof(COMP_MoveControlManager_C_HandleAirLanding, CallFunc_Greater_FloatFloat_ReturnValue_1) == 0x000320, "Member 'COMP_MoveControlManager_C_HandleAirLanding::CallFunc_Greater_FloatFloat_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(COMP_MoveControlManager_C_HandleAirLanding, CallFunc_ApplyMod_ReturnValue_1) == 0x000328, "Member 'COMP_MoveControlManager_C_HandleAirLanding::CallFunc_ApplyMod_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(COMP_MoveControlManager_C_HandleAirLanding, CallFunc_Greater_FloatFloat_ReturnValue_2) == 0x000330, "Member 'COMP_MoveControlManager_C_HandleAirLanding::CallFunc_Greater_FloatFloat_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(COMP_MoveControlManager_C_HandleAirLanding, CallFunc_MapRangeClamped_ReturnValue_3) == 0x000334, "Member 'COMP_MoveControlManager_C_HandleAirLanding::CallFunc_MapRangeClamped_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(COMP_MoveControlManager_C_HandleAirLanding, CallFunc_Ease_ReturnValue) == 0x000338, "Member 'COMP_MoveControlManager_C_HandleAirLanding::CallFunc_Ease_ReturnValue' has a wrong offset!");
static_assert(offsetof(COMP_MoveControlManager_C_HandleAirLanding, CallFunc_GreaterEqual_FloatFloat_ReturnValue_1) == 0x00033C, "Member 'COMP_MoveControlManager_C_HandleAirLanding::CallFunc_GreaterEqual_FloatFloat_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(COMP_MoveControlManager_C_HandleAirLanding, CallFunc_MapRangeClamped_ReturnValue_4) == 0x000340, "Member 'COMP_MoveControlManager_C_HandleAirLanding::CallFunc_MapRangeClamped_ReturnValue_4' has a wrong offset!");
static_assert(offsetof(COMP_MoveControlManager_C_HandleAirLanding, CallFunc_SpawnObject_ReturnValue) == 0x000348, "Member 'COMP_MoveControlManager_C_HandleAirLanding::CallFunc_SpawnObject_ReturnValue' has a wrong offset!");
static_assert(offsetof(COMP_MoveControlManager_C_HandleAirLanding, CallFunc_BreakHitResult_bBlockingHit) == 0x000350, "Member 'COMP_MoveControlManager_C_HandleAirLanding::CallFunc_BreakHitResult_bBlockingHit' has a wrong offset!");
static_assert(offsetof(COMP_MoveControlManager_C_HandleAirLanding, CallFunc_BreakHitResult_bInitialOverlap) == 0x000351, "Member 'COMP_MoveControlManager_C_HandleAirLanding::CallFunc_BreakHitResult_bInitialOverlap' has a wrong offset!");
static_assert(offsetof(COMP_MoveControlManager_C_HandleAirLanding, CallFunc_BreakHitResult_Time) == 0x000354, "Member 'COMP_MoveControlManager_C_HandleAirLanding::CallFunc_BreakHitResult_Time' has a wrong offset!");
static_assert(offsetof(COMP_MoveControlManager_C_HandleAirLanding, CallFunc_BreakHitResult_Distance) == 0x000358, "Member 'COMP_MoveControlManager_C_HandleAirLanding::CallFunc_BreakHitResult_Distance' has a wrong offset!");
static_assert(offsetof(COMP_MoveControlManager_C_HandleAirLanding, CallFunc_BreakHitResult_Location) == 0x00035C, "Member 'COMP_MoveControlManager_C_HandleAirLanding::CallFunc_BreakHitResult_Location' has a wrong offset!");
static_assert(offsetof(COMP_MoveControlManager_C_HandleAirLanding, CallFunc_BreakHitResult_ImpactPoint) == 0x000368, "Member 'COMP_MoveControlManager_C_HandleAirLanding::CallFunc_BreakHitResult_ImpactPoint' has a wrong offset!");
static_assert(offsetof(COMP_MoveControlManager_C_HandleAirLanding, CallFunc_BreakHitResult_Normal) == 0x000374, "Member 'COMP_MoveControlManager_C_HandleAirLanding::CallFunc_BreakHitResult_Normal' has a wrong offset!");
static_assert(offsetof(COMP_MoveControlManager_C_HandleAirLanding, CallFunc_BreakHitResult_ImpactNormal) == 0x000380, "Member 'COMP_MoveControlManager_C_HandleAirLanding::CallFunc_BreakHitResult_ImpactNormal' has a wrong offset!");
static_assert(offsetof(COMP_MoveControlManager_C_HandleAirLanding, CallFunc_BreakHitResult_PhysMat) == 0x000390, "Member 'COMP_MoveControlManager_C_HandleAirLanding::CallFunc_BreakHitResult_PhysMat' has a wrong offset!");
static_assert(offsetof(COMP_MoveControlManager_C_HandleAirLanding, CallFunc_BreakHitResult_HitActor) == 0x000398, "Member 'COMP_MoveControlManager_C_HandleAirLanding::CallFunc_BreakHitResult_HitActor' has a wrong offset!");
static_assert(offsetof(COMP_MoveControlManager_C_HandleAirLanding, CallFunc_BreakHitResult_HitComponent) == 0x0003A0, "Member 'COMP_MoveControlManager_C_HandleAirLanding::CallFunc_BreakHitResult_HitComponent' has a wrong offset!");
static_assert(offsetof(COMP_MoveControlManager_C_HandleAirLanding, CallFunc_BreakHitResult_HitBoneName) == 0x0003A8, "Member 'COMP_MoveControlManager_C_HandleAirLanding::CallFunc_BreakHitResult_HitBoneName' has a wrong offset!");
static_assert(offsetof(COMP_MoveControlManager_C_HandleAirLanding, CallFunc_BreakHitResult_HitItem) == 0x0003B0, "Member 'COMP_MoveControlManager_C_HandleAirLanding::CallFunc_BreakHitResult_HitItem' has a wrong offset!");
static_assert(offsetof(COMP_MoveControlManager_C_HandleAirLanding, CallFunc_BreakHitResult_ElementIndex) == 0x0003B4, "Member 'COMP_MoveControlManager_C_HandleAirLanding::CallFunc_BreakHitResult_ElementIndex' has a wrong offset!");
static_assert(offsetof(COMP_MoveControlManager_C_HandleAirLanding, CallFunc_BreakHitResult_FaceIndex) == 0x0003B8, "Member 'COMP_MoveControlManager_C_HandleAirLanding::CallFunc_BreakHitResult_FaceIndex' has a wrong offset!");
static_assert(offsetof(COMP_MoveControlManager_C_HandleAirLanding, CallFunc_BreakHitResult_TraceStart) == 0x0003BC, "Member 'COMP_MoveControlManager_C_HandleAirLanding::CallFunc_BreakHitResult_TraceStart' has a wrong offset!");
static_assert(offsetof(COMP_MoveControlManager_C_HandleAirLanding, CallFunc_BreakHitResult_TraceEnd) == 0x0003C8, "Member 'COMP_MoveControlManager_C_HandleAirLanding::CallFunc_BreakHitResult_TraceEnd' has a wrong offset!");
static_assert(offsetof(COMP_MoveControlManager_C_HandleAirLanding, CallFunc_ApplyMod_ReturnValue_2) == 0x0003D8, "Member 'COMP_MoveControlManager_C_HandleAirLanding::CallFunc_ApplyMod_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(COMP_MoveControlManager_C_HandleAirLanding, Temp_bool_Variable) == 0x0003E0, "Member 'COMP_MoveControlManager_C_HandleAirLanding::Temp_bool_Variable' has a wrong offset!");
static_assert(offsetof(COMP_MoveControlManager_C_HandleAirLanding, CallFunc_GetAttribInstance_ReturnValue_1) == 0x0003E8, "Member 'COMP_MoveControlManager_C_HandleAirLanding::CallFunc_GetAttribInstance_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(COMP_MoveControlManager_C_HandleAirLanding, CallFunc_GetMaxValue_ReturnValue_1) == 0x0003F0, "Member 'COMP_MoveControlManager_C_HandleAirLanding::CallFunc_GetMaxValue_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(COMP_MoveControlManager_C_HandleAirLanding, CallFunc_Multiply_FloatFloat_ReturnValue_1) == 0x0003F4, "Member 'COMP_MoveControlManager_C_HandleAirLanding::CallFunc_Multiply_FloatFloat_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(COMP_MoveControlManager_C_HandleAirLanding, CallFunc_FMax_ReturnValue) == 0x0003F8, "Member 'COMP_MoveControlManager_C_HandleAirLanding::CallFunc_FMax_ReturnValue' has a wrong offset!");
static_assert(offsetof(COMP_MoveControlManager_C_HandleAirLanding, CallFunc_GetAnimInstance_ReturnValue) == 0x000400, "Member 'COMP_MoveControlManager_C_HandleAirLanding::CallFunc_GetAnimInstance_ReturnValue' has a wrong offset!");
static_assert(offsetof(COMP_MoveControlManager_C_HandleAirLanding, K2Node_DynamicCast_AsINTERF_ANIM_Hacker) == 0x000408, "Member 'COMP_MoveControlManager_C_HandleAirLanding::K2Node_DynamicCast_AsINTERF_ANIM_Hacker' has a wrong offset!");
static_assert(offsetof(COMP_MoveControlManager_C_HandleAirLanding, K2Node_DynamicCast_bSuccess) == 0x000418, "Member 'COMP_MoveControlManager_C_HandleAirLanding::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(COMP_MoveControlManager_C_HandleAirLanding, CallFunc_SetAirLandingScale_Result) == 0x000419, "Member 'COMP_MoveControlManager_C_HandleAirLanding::CallFunc_SetAirLandingScale_Result' has a wrong offset!");
static_assert(offsetof(COMP_MoveControlManager_C_HandleAirLanding, K2Node_Select_Default) == 0x000420, "Member 'COMP_MoveControlManager_C_HandleAirLanding::K2Node_Select_Default' has a wrong offset!");
static_assert(offsetof(COMP_MoveControlManager_C_HandleAirLanding, CallFunc_TryBeginAction_Action) == 0x000428, "Member 'COMP_MoveControlManager_C_HandleAirLanding::CallFunc_TryBeginAction_Action' has a wrong offset!");
static_assert(offsetof(COMP_MoveControlManager_C_HandleAirLanding, CallFunc_GetAnimInstance_ReturnValue_1) == 0x000430, "Member 'COMP_MoveControlManager_C_HandleAirLanding::CallFunc_GetAnimInstance_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(COMP_MoveControlManager_C_HandleAirLanding, CallFunc_BreakVector_X_1) == 0x000438, "Member 'COMP_MoveControlManager_C_HandleAirLanding::CallFunc_BreakVector_X_1' has a wrong offset!");
static_assert(offsetof(COMP_MoveControlManager_C_HandleAirLanding, CallFunc_BreakVector_Y_1) == 0x00043C, "Member 'COMP_MoveControlManager_C_HandleAirLanding::CallFunc_BreakVector_Y_1' has a wrong offset!");
static_assert(offsetof(COMP_MoveControlManager_C_HandleAirLanding, CallFunc_BreakVector_Z_1) == 0x000440, "Member 'COMP_MoveControlManager_C_HandleAirLanding::CallFunc_BreakVector_Z_1' has a wrong offset!");
static_assert(offsetof(COMP_MoveControlManager_C_HandleAirLanding, K2Node_DynamicCast_AsINTERF_ANIM_Hacker_1) == 0x000448, "Member 'COMP_MoveControlManager_C_HandleAirLanding::K2Node_DynamicCast_AsINTERF_ANIM_Hacker_1' has a wrong offset!");
static_assert(offsetof(COMP_MoveControlManager_C_HandleAirLanding, K2Node_DynamicCast_bSuccess_1) == 0x000458, "Member 'COMP_MoveControlManager_C_HandleAirLanding::K2Node_DynamicCast_bSuccess_1' has a wrong offset!");
static_assert(offsetof(COMP_MoveControlManager_C_HandleAirLanding, CallFunc_Abs_ReturnValue_1) == 0x00045C, "Member 'COMP_MoveControlManager_C_HandleAirLanding::CallFunc_Abs_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(COMP_MoveControlManager_C_HandleAirLanding, CallFunc_SetIsGrounded_Result) == 0x000460, "Member 'COMP_MoveControlManager_C_HandleAirLanding::CallFunc_SetIsGrounded_Result' has a wrong offset!");
static_assert(offsetof(COMP_MoveControlManager_C_HandleAirLanding, K2Node_MakeStruct_NamedFloat) == 0x000464, "Member 'COMP_MoveControlManager_C_HandleAirLanding::K2Node_MakeStruct_NamedFloat' has a wrong offset!");
static_assert(offsetof(COMP_MoveControlManager_C_HandleAirLanding, K2Node_Select_Default_1) == 0x000470, "Member 'COMP_MoveControlManager_C_HandleAirLanding::K2Node_Select_Default_1' has a wrong offset!");
static_assert(offsetof(COMP_MoveControlManager_C_HandleAirLanding, K2Node_MakeArray_Array) == 0x000478, "Member 'COMP_MoveControlManager_C_HandleAirLanding::K2Node_MakeArray_Array' has a wrong offset!");
static_assert(offsetof(COMP_MoveControlManager_C_HandleAirLanding, K2Node_MakeStruct_STRUCT_EffectParams) == 0x000488, "Member 'COMP_MoveControlManager_C_HandleAirLanding::K2Node_MakeStruct_STRUCT_EffectParams' has a wrong offset!");
static_assert(offsetof(COMP_MoveControlManager_C_HandleAirLanding, K2Node_MakeArray_Array_1) == 0x0004B8, "Member 'COMP_MoveControlManager_C_HandleAirLanding::K2Node_MakeArray_Array_1' has a wrong offset!");
static_assert(offsetof(COMP_MoveControlManager_C_HandleAirLanding, CallFunc_LineTraceSingleForObjects_OutHit) == 0x0004C8, "Member 'COMP_MoveControlManager_C_HandleAirLanding::CallFunc_LineTraceSingleForObjects_OutHit' has a wrong offset!");
static_assert(offsetof(COMP_MoveControlManager_C_HandleAirLanding, CallFunc_LineTraceSingleForObjects_ReturnValue) == 0x000550, "Member 'COMP_MoveControlManager_C_HandleAirLanding::CallFunc_LineTraceSingleForObjects_ReturnValue' has a wrong offset!");
static_assert(offsetof(COMP_MoveControlManager_C_HandleAirLanding, CallFunc_Add_VectorVector_ReturnValue) == 0x000554, "Member 'COMP_MoveControlManager_C_HandleAirLanding::CallFunc_Add_VectorVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(COMP_MoveControlManager_C_HandleAirLanding, CallFunc_BreakHitResult_bBlockingHit_1) == 0x000560, "Member 'COMP_MoveControlManager_C_HandleAirLanding::CallFunc_BreakHitResult_bBlockingHit_1' has a wrong offset!");
static_assert(offsetof(COMP_MoveControlManager_C_HandleAirLanding, CallFunc_BreakHitResult_bInitialOverlap_1) == 0x000561, "Member 'COMP_MoveControlManager_C_HandleAirLanding::CallFunc_BreakHitResult_bInitialOverlap_1' has a wrong offset!");
static_assert(offsetof(COMP_MoveControlManager_C_HandleAirLanding, CallFunc_BreakHitResult_Time_1) == 0x000564, "Member 'COMP_MoveControlManager_C_HandleAirLanding::CallFunc_BreakHitResult_Time_1' has a wrong offset!");
static_assert(offsetof(COMP_MoveControlManager_C_HandleAirLanding, CallFunc_BreakHitResult_Distance_1) == 0x000568, "Member 'COMP_MoveControlManager_C_HandleAirLanding::CallFunc_BreakHitResult_Distance_1' has a wrong offset!");
static_assert(offsetof(COMP_MoveControlManager_C_HandleAirLanding, CallFunc_BreakHitResult_Location_1) == 0x00056C, "Member 'COMP_MoveControlManager_C_HandleAirLanding::CallFunc_BreakHitResult_Location_1' has a wrong offset!");
static_assert(offsetof(COMP_MoveControlManager_C_HandleAirLanding, CallFunc_BreakHitResult_ImpactPoint_1) == 0x000578, "Member 'COMP_MoveControlManager_C_HandleAirLanding::CallFunc_BreakHitResult_ImpactPoint_1' has a wrong offset!");
static_assert(offsetof(COMP_MoveControlManager_C_HandleAirLanding, CallFunc_BreakHitResult_Normal_1) == 0x000584, "Member 'COMP_MoveControlManager_C_HandleAirLanding::CallFunc_BreakHitResult_Normal_1' has a wrong offset!");
static_assert(offsetof(COMP_MoveControlManager_C_HandleAirLanding, CallFunc_BreakHitResult_ImpactNormal_1) == 0x000590, "Member 'COMP_MoveControlManager_C_HandleAirLanding::CallFunc_BreakHitResult_ImpactNormal_1' has a wrong offset!");
static_assert(offsetof(COMP_MoveControlManager_C_HandleAirLanding, CallFunc_BreakHitResult_PhysMat_1) == 0x0005A0, "Member 'COMP_MoveControlManager_C_HandleAirLanding::CallFunc_BreakHitResult_PhysMat_1' has a wrong offset!");
static_assert(offsetof(COMP_MoveControlManager_C_HandleAirLanding, CallFunc_BreakHitResult_HitActor_1) == 0x0005A8, "Member 'COMP_MoveControlManager_C_HandleAirLanding::CallFunc_BreakHitResult_HitActor_1' has a wrong offset!");
static_assert(offsetof(COMP_MoveControlManager_C_HandleAirLanding, CallFunc_BreakHitResult_HitComponent_1) == 0x0005B0, "Member 'COMP_MoveControlManager_C_HandleAirLanding::CallFunc_BreakHitResult_HitComponent_1' has a wrong offset!");
static_assert(offsetof(COMP_MoveControlManager_C_HandleAirLanding, CallFunc_BreakHitResult_HitBoneName_1) == 0x0005B8, "Member 'COMP_MoveControlManager_C_HandleAirLanding::CallFunc_BreakHitResult_HitBoneName_1' has a wrong offset!");
static_assert(offsetof(COMP_MoveControlManager_C_HandleAirLanding, CallFunc_BreakHitResult_HitItem_1) == 0x0005C0, "Member 'COMP_MoveControlManager_C_HandleAirLanding::CallFunc_BreakHitResult_HitItem_1' has a wrong offset!");
static_assert(offsetof(COMP_MoveControlManager_C_HandleAirLanding, CallFunc_BreakHitResult_ElementIndex_1) == 0x0005C4, "Member 'COMP_MoveControlManager_C_HandleAirLanding::CallFunc_BreakHitResult_ElementIndex_1' has a wrong offset!");
static_assert(offsetof(COMP_MoveControlManager_C_HandleAirLanding, CallFunc_BreakHitResult_FaceIndex_1) == 0x0005C8, "Member 'COMP_MoveControlManager_C_HandleAirLanding::CallFunc_BreakHitResult_FaceIndex_1' has a wrong offset!");
static_assert(offsetof(COMP_MoveControlManager_C_HandleAirLanding, CallFunc_BreakHitResult_TraceStart_1) == 0x0005CC, "Member 'COMP_MoveControlManager_C_HandleAirLanding::CallFunc_BreakHitResult_TraceStart_1' has a wrong offset!");
static_assert(offsetof(COMP_MoveControlManager_C_HandleAirLanding, CallFunc_BreakHitResult_TraceEnd_1) == 0x0005D8, "Member 'COMP_MoveControlManager_C_HandleAirLanding::CallFunc_BreakHitResult_TraceEnd_1' has a wrong offset!");
static_assert(offsetof(COMP_MoveControlManager_C_HandleAirLanding, CallFunc_CreateImpactEffects_Success) == 0x0005E4, "Member 'COMP_MoveControlManager_C_HandleAirLanding::CallFunc_CreateImpactEffects_Success' has a wrong offset!");
static_assert(offsetof(COMP_MoveControlManager_C_HandleAirLanding, CallFunc_CreateImpactEffects_Results) == 0x0005E8, "Member 'COMP_MoveControlManager_C_HandleAirLanding::CallFunc_CreateImpactEffects_Results' has a wrong offset!");
static_assert(offsetof(COMP_MoveControlManager_C_HandleAirLanding, CallFunc_K2_GetActorLocation_ReturnValue) == 0x000600, "Member 'COMP_MoveControlManager_C_HandleAirLanding::CallFunc_K2_GetActorLocation_ReturnValue' has a wrong offset!");

// Function COMP_MoveControlManager.COMP_MoveControlManager_C.HandleHitSomething
// 0x0270 (0x0270 - 0x0000)
struct COMP_MoveControlManager_C_HandleHitSomething final
{
public:
	struct FVector                                NormalImpulse;                                     // 0x0000(0x000C)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FHitResult                             Hit;                                               // 0x000C(0x0088)(BlueprintVisible, BlueprintReadOnly, Parm, IsPlainOldData, NoDestructor, ContainsInstancedReference)
	struct FVector                                CallFunc_GetLastUpdateVelocity_ReturnValue;        // 0x0094(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BreakHitResult_bBlockingHit;              // 0x00A0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BreakHitResult_bInitialOverlap;           // 0x00A1(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_A2[0x2];                                       // 0x00A2(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_BreakHitResult_Time;                      // 0x00A4(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakHitResult_Distance;                  // 0x00A8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakHitResult_Location;                  // 0x00AC(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakHitResult_ImpactPoint;               // 0x00B8(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakHitResult_Normal;                    // 0x00C4(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakHitResult_ImpactNormal;              // 0x00D0(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_DC[0x4];                                       // 0x00DC(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UPhysicalMaterial*                      CallFunc_BreakHitResult_PhysMat;                   // 0x00E0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 CallFunc_BreakHitResult_HitActor;                  // 0x00E8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UPrimitiveComponent*                    CallFunc_BreakHitResult_HitComponent;              // 0x00F0(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FName                                   CallFunc_BreakHitResult_HitBoneName;               // 0x00F8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_BreakHitResult_HitItem;                   // 0x0100(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_BreakHitResult_ElementIndex;              // 0x0104(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_BreakHitResult_FaceIndex;                 // 0x0108(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakHitResult_TraceStart;                // 0x010C(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakHitResult_TraceEnd;                  // 0x0118(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_GetLastUpdateVelocity_ReturnValue_1;      // 0x0124(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_GetReflectionVector_ReturnValue;          // 0x0130(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_VSizeSquared_ReturnValue;                 // 0x013C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Multiply_VectorFloat_ReturnValue;         // 0x0140(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_GreaterEqual_FloatFloat_ReturnValue;      // 0x014C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BreakHitResult_bBlockingHit_1;            // 0x014D(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BreakHitResult_bInitialOverlap_1;         // 0x014E(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_14F[0x1];                                      // 0x014F(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_BreakHitResult_Time_1;                    // 0x0150(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakHitResult_Distance_1;                // 0x0154(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakHitResult_Location_1;                // 0x0158(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakHitResult_ImpactPoint_1;             // 0x0164(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakHitResult_Normal_1;                  // 0x0170(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakHitResult_ImpactNormal_1;            // 0x017C(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UPhysicalMaterial*                      CallFunc_BreakHitResult_PhysMat_1;                 // 0x0188(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 CallFunc_BreakHitResult_HitActor_1;                // 0x0190(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UPrimitiveComponent*                    CallFunc_BreakHitResult_HitComponent_1;            // 0x0198(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FName                                   CallFunc_BreakHitResult_HitBoneName_1;             // 0x01A0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_BreakHitResult_HitItem_1;                 // 0x01A8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_BreakHitResult_ElementIndex_1;            // 0x01AC(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_BreakHitResult_FaceIndex_1;               // 0x01B0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakHitResult_TraceStart_1;              // 0x01B4(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakHitResult_TraceEnd_1;                // 0x01C0(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BreakHitResult_bBlockingHit_2;            // 0x01CC(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BreakHitResult_bInitialOverlap_2;         // 0x01CD(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_1CE[0x2];                                      // 0x01CE(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_BreakHitResult_Time_2;                    // 0x01D0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakHitResult_Distance_2;                // 0x01D4(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakHitResult_Location_2;                // 0x01D8(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakHitResult_ImpactPoint_2;             // 0x01E4(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakHitResult_Normal_2;                  // 0x01F0(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakHitResult_ImpactNormal_2;            // 0x01FC(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UPhysicalMaterial*                      CallFunc_BreakHitResult_PhysMat_2;                 // 0x0208(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 CallFunc_BreakHitResult_HitActor_2;                // 0x0210(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UPrimitiveComponent*                    CallFunc_BreakHitResult_HitComponent_2;            // 0x0218(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FName                                   CallFunc_BreakHitResult_HitBoneName_2;             // 0x0220(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_BreakHitResult_HitItem_2;                 // 0x0228(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_BreakHitResult_ElementIndex_2;            // 0x022C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_BreakHitResult_FaceIndex_2;               // 0x0230(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakHitResult_TraceStart_2;              // 0x0234(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakHitResult_TraceEnd_2;                // 0x0240(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x024C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_24D[0x3];                                      // 0x024D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_GetMass_ReturnValue;                      // 0x0250(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_GreaterEqual_FloatFloat_ReturnValue_1;    // 0x0254(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_NotEqual_ByteByte_ReturnValue;            // 0x0255(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_256[0x2];                                      // 0x0256(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                CallFunc_Vector_Up_ReturnValue;                    // 0x0258(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Dot_VectorVector_ReturnValue;             // 0x0264(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_FloatFloat_ReturnValue;              // 0x0268(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(COMP_MoveControlManager_C_HandleHitSomething) == 0x000008, "Wrong alignment on COMP_MoveControlManager_C_HandleHitSomething");
static_assert(sizeof(COMP_MoveControlManager_C_HandleHitSomething) == 0x000270, "Wrong size on COMP_MoveControlManager_C_HandleHitSomething");
static_assert(offsetof(COMP_MoveControlManager_C_HandleHitSomething, NormalImpulse) == 0x000000, "Member 'COMP_MoveControlManager_C_HandleHitSomething::NormalImpulse' has a wrong offset!");
static_assert(offsetof(COMP_MoveControlManager_C_HandleHitSomething, Hit) == 0x00000C, "Member 'COMP_MoveControlManager_C_HandleHitSomething::Hit' has a wrong offset!");
static_assert(offsetof(COMP_MoveControlManager_C_HandleHitSomething, CallFunc_GetLastUpdateVelocity_ReturnValue) == 0x000094, "Member 'COMP_MoveControlManager_C_HandleHitSomething::CallFunc_GetLastUpdateVelocity_ReturnValue' has a wrong offset!");
static_assert(offsetof(COMP_MoveControlManager_C_HandleHitSomething, CallFunc_BreakHitResult_bBlockingHit) == 0x0000A0, "Member 'COMP_MoveControlManager_C_HandleHitSomething::CallFunc_BreakHitResult_bBlockingHit' has a wrong offset!");
static_assert(offsetof(COMP_MoveControlManager_C_HandleHitSomething, CallFunc_BreakHitResult_bInitialOverlap) == 0x0000A1, "Member 'COMP_MoveControlManager_C_HandleHitSomething::CallFunc_BreakHitResult_bInitialOverlap' has a wrong offset!");
static_assert(offsetof(COMP_MoveControlManager_C_HandleHitSomething, CallFunc_BreakHitResult_Time) == 0x0000A4, "Member 'COMP_MoveControlManager_C_HandleHitSomething::CallFunc_BreakHitResult_Time' has a wrong offset!");
static_assert(offsetof(COMP_MoveControlManager_C_HandleHitSomething, CallFunc_BreakHitResult_Distance) == 0x0000A8, "Member 'COMP_MoveControlManager_C_HandleHitSomething::CallFunc_BreakHitResult_Distance' has a wrong offset!");
static_assert(offsetof(COMP_MoveControlManager_C_HandleHitSomething, CallFunc_BreakHitResult_Location) == 0x0000AC, "Member 'COMP_MoveControlManager_C_HandleHitSomething::CallFunc_BreakHitResult_Location' has a wrong offset!");
static_assert(offsetof(COMP_MoveControlManager_C_HandleHitSomething, CallFunc_BreakHitResult_ImpactPoint) == 0x0000B8, "Member 'COMP_MoveControlManager_C_HandleHitSomething::CallFunc_BreakHitResult_ImpactPoint' has a wrong offset!");
static_assert(offsetof(COMP_MoveControlManager_C_HandleHitSomething, CallFunc_BreakHitResult_Normal) == 0x0000C4, "Member 'COMP_MoveControlManager_C_HandleHitSomething::CallFunc_BreakHitResult_Normal' has a wrong offset!");
static_assert(offsetof(COMP_MoveControlManager_C_HandleHitSomething, CallFunc_BreakHitResult_ImpactNormal) == 0x0000D0, "Member 'COMP_MoveControlManager_C_HandleHitSomething::CallFunc_BreakHitResult_ImpactNormal' has a wrong offset!");
static_assert(offsetof(COMP_MoveControlManager_C_HandleHitSomething, CallFunc_BreakHitResult_PhysMat) == 0x0000E0, "Member 'COMP_MoveControlManager_C_HandleHitSomething::CallFunc_BreakHitResult_PhysMat' has a wrong offset!");
static_assert(offsetof(COMP_MoveControlManager_C_HandleHitSomething, CallFunc_BreakHitResult_HitActor) == 0x0000E8, "Member 'COMP_MoveControlManager_C_HandleHitSomething::CallFunc_BreakHitResult_HitActor' has a wrong offset!");
static_assert(offsetof(COMP_MoveControlManager_C_HandleHitSomething, CallFunc_BreakHitResult_HitComponent) == 0x0000F0, "Member 'COMP_MoveControlManager_C_HandleHitSomething::CallFunc_BreakHitResult_HitComponent' has a wrong offset!");
static_assert(offsetof(COMP_MoveControlManager_C_HandleHitSomething, CallFunc_BreakHitResult_HitBoneName) == 0x0000F8, "Member 'COMP_MoveControlManager_C_HandleHitSomething::CallFunc_BreakHitResult_HitBoneName' has a wrong offset!");
static_assert(offsetof(COMP_MoveControlManager_C_HandleHitSomething, CallFunc_BreakHitResult_HitItem) == 0x000100, "Member 'COMP_MoveControlManager_C_HandleHitSomething::CallFunc_BreakHitResult_HitItem' has a wrong offset!");
static_assert(offsetof(COMP_MoveControlManager_C_HandleHitSomething, CallFunc_BreakHitResult_ElementIndex) == 0x000104, "Member 'COMP_MoveControlManager_C_HandleHitSomething::CallFunc_BreakHitResult_ElementIndex' has a wrong offset!");
static_assert(offsetof(COMP_MoveControlManager_C_HandleHitSomething, CallFunc_BreakHitResult_FaceIndex) == 0x000108, "Member 'COMP_MoveControlManager_C_HandleHitSomething::CallFunc_BreakHitResult_FaceIndex' has a wrong offset!");
static_assert(offsetof(COMP_MoveControlManager_C_HandleHitSomething, CallFunc_BreakHitResult_TraceStart) == 0x00010C, "Member 'COMP_MoveControlManager_C_HandleHitSomething::CallFunc_BreakHitResult_TraceStart' has a wrong offset!");
static_assert(offsetof(COMP_MoveControlManager_C_HandleHitSomething, CallFunc_BreakHitResult_TraceEnd) == 0x000118, "Member 'COMP_MoveControlManager_C_HandleHitSomething::CallFunc_BreakHitResult_TraceEnd' has a wrong offset!");
static_assert(offsetof(COMP_MoveControlManager_C_HandleHitSomething, CallFunc_GetLastUpdateVelocity_ReturnValue_1) == 0x000124, "Member 'COMP_MoveControlManager_C_HandleHitSomething::CallFunc_GetLastUpdateVelocity_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(COMP_MoveControlManager_C_HandleHitSomething, CallFunc_GetReflectionVector_ReturnValue) == 0x000130, "Member 'COMP_MoveControlManager_C_HandleHitSomething::CallFunc_GetReflectionVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(COMP_MoveControlManager_C_HandleHitSomething, CallFunc_VSizeSquared_ReturnValue) == 0x00013C, "Member 'COMP_MoveControlManager_C_HandleHitSomething::CallFunc_VSizeSquared_ReturnValue' has a wrong offset!");
static_assert(offsetof(COMP_MoveControlManager_C_HandleHitSomething, CallFunc_Multiply_VectorFloat_ReturnValue) == 0x000140, "Member 'COMP_MoveControlManager_C_HandleHitSomething::CallFunc_Multiply_VectorFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(COMP_MoveControlManager_C_HandleHitSomething, CallFunc_GreaterEqual_FloatFloat_ReturnValue) == 0x00014C, "Member 'COMP_MoveControlManager_C_HandleHitSomething::CallFunc_GreaterEqual_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(COMP_MoveControlManager_C_HandleHitSomething, CallFunc_BreakHitResult_bBlockingHit_1) == 0x00014D, "Member 'COMP_MoveControlManager_C_HandleHitSomething::CallFunc_BreakHitResult_bBlockingHit_1' has a wrong offset!");
static_assert(offsetof(COMP_MoveControlManager_C_HandleHitSomething, CallFunc_BreakHitResult_bInitialOverlap_1) == 0x00014E, "Member 'COMP_MoveControlManager_C_HandleHitSomething::CallFunc_BreakHitResult_bInitialOverlap_1' has a wrong offset!");
static_assert(offsetof(COMP_MoveControlManager_C_HandleHitSomething, CallFunc_BreakHitResult_Time_1) == 0x000150, "Member 'COMP_MoveControlManager_C_HandleHitSomething::CallFunc_BreakHitResult_Time_1' has a wrong offset!");
static_assert(offsetof(COMP_MoveControlManager_C_HandleHitSomething, CallFunc_BreakHitResult_Distance_1) == 0x000154, "Member 'COMP_MoveControlManager_C_HandleHitSomething::CallFunc_BreakHitResult_Distance_1' has a wrong offset!");
static_assert(offsetof(COMP_MoveControlManager_C_HandleHitSomething, CallFunc_BreakHitResult_Location_1) == 0x000158, "Member 'COMP_MoveControlManager_C_HandleHitSomething::CallFunc_BreakHitResult_Location_1' has a wrong offset!");
static_assert(offsetof(COMP_MoveControlManager_C_HandleHitSomething, CallFunc_BreakHitResult_ImpactPoint_1) == 0x000164, "Member 'COMP_MoveControlManager_C_HandleHitSomething::CallFunc_BreakHitResult_ImpactPoint_1' has a wrong offset!");
static_assert(offsetof(COMP_MoveControlManager_C_HandleHitSomething, CallFunc_BreakHitResult_Normal_1) == 0x000170, "Member 'COMP_MoveControlManager_C_HandleHitSomething::CallFunc_BreakHitResult_Normal_1' has a wrong offset!");
static_assert(offsetof(COMP_MoveControlManager_C_HandleHitSomething, CallFunc_BreakHitResult_ImpactNormal_1) == 0x00017C, "Member 'COMP_MoveControlManager_C_HandleHitSomething::CallFunc_BreakHitResult_ImpactNormal_1' has a wrong offset!");
static_assert(offsetof(COMP_MoveControlManager_C_HandleHitSomething, CallFunc_BreakHitResult_PhysMat_1) == 0x000188, "Member 'COMP_MoveControlManager_C_HandleHitSomething::CallFunc_BreakHitResult_PhysMat_1' has a wrong offset!");
static_assert(offsetof(COMP_MoveControlManager_C_HandleHitSomething, CallFunc_BreakHitResult_HitActor_1) == 0x000190, "Member 'COMP_MoveControlManager_C_HandleHitSomething::CallFunc_BreakHitResult_HitActor_1' has a wrong offset!");
static_assert(offsetof(COMP_MoveControlManager_C_HandleHitSomething, CallFunc_BreakHitResult_HitComponent_1) == 0x000198, "Member 'COMP_MoveControlManager_C_HandleHitSomething::CallFunc_BreakHitResult_HitComponent_1' has a wrong offset!");
static_assert(offsetof(COMP_MoveControlManager_C_HandleHitSomething, CallFunc_BreakHitResult_HitBoneName_1) == 0x0001A0, "Member 'COMP_MoveControlManager_C_HandleHitSomething::CallFunc_BreakHitResult_HitBoneName_1' has a wrong offset!");
static_assert(offsetof(COMP_MoveControlManager_C_HandleHitSomething, CallFunc_BreakHitResult_HitItem_1) == 0x0001A8, "Member 'COMP_MoveControlManager_C_HandleHitSomething::CallFunc_BreakHitResult_HitItem_1' has a wrong offset!");
static_assert(offsetof(COMP_MoveControlManager_C_HandleHitSomething, CallFunc_BreakHitResult_ElementIndex_1) == 0x0001AC, "Member 'COMP_MoveControlManager_C_HandleHitSomething::CallFunc_BreakHitResult_ElementIndex_1' has a wrong offset!");
static_assert(offsetof(COMP_MoveControlManager_C_HandleHitSomething, CallFunc_BreakHitResult_FaceIndex_1) == 0x0001B0, "Member 'COMP_MoveControlManager_C_HandleHitSomething::CallFunc_BreakHitResult_FaceIndex_1' has a wrong offset!");
static_assert(offsetof(COMP_MoveControlManager_C_HandleHitSomething, CallFunc_BreakHitResult_TraceStart_1) == 0x0001B4, "Member 'COMP_MoveControlManager_C_HandleHitSomething::CallFunc_BreakHitResult_TraceStart_1' has a wrong offset!");
static_assert(offsetof(COMP_MoveControlManager_C_HandleHitSomething, CallFunc_BreakHitResult_TraceEnd_1) == 0x0001C0, "Member 'COMP_MoveControlManager_C_HandleHitSomething::CallFunc_BreakHitResult_TraceEnd_1' has a wrong offset!");
static_assert(offsetof(COMP_MoveControlManager_C_HandleHitSomething, CallFunc_BreakHitResult_bBlockingHit_2) == 0x0001CC, "Member 'COMP_MoveControlManager_C_HandleHitSomething::CallFunc_BreakHitResult_bBlockingHit_2' has a wrong offset!");
static_assert(offsetof(COMP_MoveControlManager_C_HandleHitSomething, CallFunc_BreakHitResult_bInitialOverlap_2) == 0x0001CD, "Member 'COMP_MoveControlManager_C_HandleHitSomething::CallFunc_BreakHitResult_bInitialOverlap_2' has a wrong offset!");
static_assert(offsetof(COMP_MoveControlManager_C_HandleHitSomething, CallFunc_BreakHitResult_Time_2) == 0x0001D0, "Member 'COMP_MoveControlManager_C_HandleHitSomething::CallFunc_BreakHitResult_Time_2' has a wrong offset!");
static_assert(offsetof(COMP_MoveControlManager_C_HandleHitSomething, CallFunc_BreakHitResult_Distance_2) == 0x0001D4, "Member 'COMP_MoveControlManager_C_HandleHitSomething::CallFunc_BreakHitResult_Distance_2' has a wrong offset!");
static_assert(offsetof(COMP_MoveControlManager_C_HandleHitSomething, CallFunc_BreakHitResult_Location_2) == 0x0001D8, "Member 'COMP_MoveControlManager_C_HandleHitSomething::CallFunc_BreakHitResult_Location_2' has a wrong offset!");
static_assert(offsetof(COMP_MoveControlManager_C_HandleHitSomething, CallFunc_BreakHitResult_ImpactPoint_2) == 0x0001E4, "Member 'COMP_MoveControlManager_C_HandleHitSomething::CallFunc_BreakHitResult_ImpactPoint_2' has a wrong offset!");
static_assert(offsetof(COMP_MoveControlManager_C_HandleHitSomething, CallFunc_BreakHitResult_Normal_2) == 0x0001F0, "Member 'COMP_MoveControlManager_C_HandleHitSomething::CallFunc_BreakHitResult_Normal_2' has a wrong offset!");
static_assert(offsetof(COMP_MoveControlManager_C_HandleHitSomething, CallFunc_BreakHitResult_ImpactNormal_2) == 0x0001FC, "Member 'COMP_MoveControlManager_C_HandleHitSomething::CallFunc_BreakHitResult_ImpactNormal_2' has a wrong offset!");
static_assert(offsetof(COMP_MoveControlManager_C_HandleHitSomething, CallFunc_BreakHitResult_PhysMat_2) == 0x000208, "Member 'COMP_MoveControlManager_C_HandleHitSomething::CallFunc_BreakHitResult_PhysMat_2' has a wrong offset!");
static_assert(offsetof(COMP_MoveControlManager_C_HandleHitSomething, CallFunc_BreakHitResult_HitActor_2) == 0x000210, "Member 'COMP_MoveControlManager_C_HandleHitSomething::CallFunc_BreakHitResult_HitActor_2' has a wrong offset!");
static_assert(offsetof(COMP_MoveControlManager_C_HandleHitSomething, CallFunc_BreakHitResult_HitComponent_2) == 0x000218, "Member 'COMP_MoveControlManager_C_HandleHitSomething::CallFunc_BreakHitResult_HitComponent_2' has a wrong offset!");
static_assert(offsetof(COMP_MoveControlManager_C_HandleHitSomething, CallFunc_BreakHitResult_HitBoneName_2) == 0x000220, "Member 'COMP_MoveControlManager_C_HandleHitSomething::CallFunc_BreakHitResult_HitBoneName_2' has a wrong offset!");
static_assert(offsetof(COMP_MoveControlManager_C_HandleHitSomething, CallFunc_BreakHitResult_HitItem_2) == 0x000228, "Member 'COMP_MoveControlManager_C_HandleHitSomething::CallFunc_BreakHitResult_HitItem_2' has a wrong offset!");
static_assert(offsetof(COMP_MoveControlManager_C_HandleHitSomething, CallFunc_BreakHitResult_ElementIndex_2) == 0x00022C, "Member 'COMP_MoveControlManager_C_HandleHitSomething::CallFunc_BreakHitResult_ElementIndex_2' has a wrong offset!");
static_assert(offsetof(COMP_MoveControlManager_C_HandleHitSomething, CallFunc_BreakHitResult_FaceIndex_2) == 0x000230, "Member 'COMP_MoveControlManager_C_HandleHitSomething::CallFunc_BreakHitResult_FaceIndex_2' has a wrong offset!");
static_assert(offsetof(COMP_MoveControlManager_C_HandleHitSomething, CallFunc_BreakHitResult_TraceStart_2) == 0x000234, "Member 'COMP_MoveControlManager_C_HandleHitSomething::CallFunc_BreakHitResult_TraceStart_2' has a wrong offset!");
static_assert(offsetof(COMP_MoveControlManager_C_HandleHitSomething, CallFunc_BreakHitResult_TraceEnd_2) == 0x000240, "Member 'COMP_MoveControlManager_C_HandleHitSomething::CallFunc_BreakHitResult_TraceEnd_2' has a wrong offset!");
static_assert(offsetof(COMP_MoveControlManager_C_HandleHitSomething, CallFunc_IsValid_ReturnValue) == 0x00024C, "Member 'COMP_MoveControlManager_C_HandleHitSomething::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(COMP_MoveControlManager_C_HandleHitSomething, CallFunc_GetMass_ReturnValue) == 0x000250, "Member 'COMP_MoveControlManager_C_HandleHitSomething::CallFunc_GetMass_ReturnValue' has a wrong offset!");
static_assert(offsetof(COMP_MoveControlManager_C_HandleHitSomething, CallFunc_GreaterEqual_FloatFloat_ReturnValue_1) == 0x000254, "Member 'COMP_MoveControlManager_C_HandleHitSomething::CallFunc_GreaterEqual_FloatFloat_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(COMP_MoveControlManager_C_HandleHitSomething, CallFunc_NotEqual_ByteByte_ReturnValue) == 0x000255, "Member 'COMP_MoveControlManager_C_HandleHitSomething::CallFunc_NotEqual_ByteByte_ReturnValue' has a wrong offset!");
static_assert(offsetof(COMP_MoveControlManager_C_HandleHitSomething, CallFunc_Vector_Up_ReturnValue) == 0x000258, "Member 'COMP_MoveControlManager_C_HandleHitSomething::CallFunc_Vector_Up_ReturnValue' has a wrong offset!");
static_assert(offsetof(COMP_MoveControlManager_C_HandleHitSomething, CallFunc_Dot_VectorVector_ReturnValue) == 0x000264, "Member 'COMP_MoveControlManager_C_HandleHitSomething::CallFunc_Dot_VectorVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(COMP_MoveControlManager_C_HandleHitSomething, CallFunc_Less_FloatFloat_ReturnValue) == 0x000268, "Member 'COMP_MoveControlManager_C_HandleHitSomething::CallFunc_Less_FloatFloat_ReturnValue' has a wrong offset!");

// Function COMP_MoveControlManager.COMP_MoveControlManager_C.IsLeaning
// 0x0002 (0x0002 - 0x0000)
struct COMP_MoveControlManager_C_IsLeaning final
{
public:
	bool                                          Result;                                            // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_NotEqual_FloatFloat_ReturnValue;          // 0x0001(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(COMP_MoveControlManager_C_IsLeaning) == 0x000001, "Wrong alignment on COMP_MoveControlManager_C_IsLeaning");
static_assert(sizeof(COMP_MoveControlManager_C_IsLeaning) == 0x000002, "Wrong size on COMP_MoveControlManager_C_IsLeaning");
static_assert(offsetof(COMP_MoveControlManager_C_IsLeaning, Result) == 0x000000, "Member 'COMP_MoveControlManager_C_IsLeaning::Result' has a wrong offset!");
static_assert(offsetof(COMP_MoveControlManager_C_IsLeaning, CallFunc_NotEqual_FloatFloat_ReturnValue) == 0x000001, "Member 'COMP_MoveControlManager_C_IsLeaning::CallFunc_NotEqual_FloatFloat_ReturnValue' has a wrong offset!");

// Function COMP_MoveControlManager.COMP_MoveControlManager_C.IsUsingTurboBoots
// 0x000C (0x000C - 0x0000)
struct COMP_MoveControlManager_C_IsUsingTurboBoots final
{
public:
	bool                                          Result;                                            // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_GetActiveVersionNumber_VersionNumber;     // 0x0004(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0008(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_GreaterEqual_IntInt_ReturnValue;          // 0x0009(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(COMP_MoveControlManager_C_IsUsingTurboBoots) == 0x000004, "Wrong alignment on COMP_MoveControlManager_C_IsUsingTurboBoots");
static_assert(sizeof(COMP_MoveControlManager_C_IsUsingTurboBoots) == 0x00000C, "Wrong size on COMP_MoveControlManager_C_IsUsingTurboBoots");
static_assert(offsetof(COMP_MoveControlManager_C_IsUsingTurboBoots, Result) == 0x000000, "Member 'COMP_MoveControlManager_C_IsUsingTurboBoots::Result' has a wrong offset!");
static_assert(offsetof(COMP_MoveControlManager_C_IsUsingTurboBoots, CallFunc_GetActiveVersionNumber_VersionNumber) == 0x000004, "Member 'COMP_MoveControlManager_C_IsUsingTurboBoots::CallFunc_GetActiveVersionNumber_VersionNumber' has a wrong offset!");
static_assert(offsetof(COMP_MoveControlManager_C_IsUsingTurboBoots, CallFunc_IsValid_ReturnValue) == 0x000008, "Member 'COMP_MoveControlManager_C_IsUsingTurboBoots::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(COMP_MoveControlManager_C_IsUsingTurboBoots, CallFunc_GreaterEqual_IntInt_ReturnValue) == 0x000009, "Member 'COMP_MoveControlManager_C_IsUsingTurboBoots::CallFunc_GreaterEqual_IntInt_ReturnValue' has a wrong offset!");

// Function COMP_MoveControlManager.COMP_MoveControlManager_C.IsCrouchingOrTransitioning
// 0x0003 (0x0003 - 0x0000)
struct COMP_MoveControlManager_C_IsCrouchingOrTransitioning final
{
public:
	bool                                          Result;                                            // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_NotEqual_FloatFloat_ReturnValue;          // 0x0001(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BooleanOR_ReturnValue;                    // 0x0002(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(COMP_MoveControlManager_C_IsCrouchingOrTransitioning) == 0x000001, "Wrong alignment on COMP_MoveControlManager_C_IsCrouchingOrTransitioning");
static_assert(sizeof(COMP_MoveControlManager_C_IsCrouchingOrTransitioning) == 0x000003, "Wrong size on COMP_MoveControlManager_C_IsCrouchingOrTransitioning");
static_assert(offsetof(COMP_MoveControlManager_C_IsCrouchingOrTransitioning, Result) == 0x000000, "Member 'COMP_MoveControlManager_C_IsCrouchingOrTransitioning::Result' has a wrong offset!");
static_assert(offsetof(COMP_MoveControlManager_C_IsCrouchingOrTransitioning, CallFunc_NotEqual_FloatFloat_ReturnValue) == 0x000001, "Member 'COMP_MoveControlManager_C_IsCrouchingOrTransitioning::CallFunc_NotEqual_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(COMP_MoveControlManager_C_IsCrouchingOrTransitioning, CallFunc_BooleanOR_ReturnValue) == 0x000002, "Member 'COMP_MoveControlManager_C_IsCrouchingOrTransitioning::CallFunc_BooleanOR_ReturnValue' has a wrong offset!");

// Function COMP_MoveControlManager.COMP_MoveControlManager_C.GetHalfHeightStanding
// 0x0004 (0x0004 - 0x0000)
struct COMP_MoveControlManager_C_GetHalfHeightStanding final
{
public:
	float                                         Result;                                            // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(COMP_MoveControlManager_C_GetHalfHeightStanding) == 0x000004, "Wrong alignment on COMP_MoveControlManager_C_GetHalfHeightStanding");
static_assert(sizeof(COMP_MoveControlManager_C_GetHalfHeightStanding) == 0x000004, "Wrong size on COMP_MoveControlManager_C_GetHalfHeightStanding");
static_assert(offsetof(COMP_MoveControlManager_C_GetHalfHeightStanding, Result) == 0x000000, "Member 'COMP_MoveControlManager_C_GetHalfHeightStanding::Result' has a wrong offset!");

// Function COMP_MoveControlManager.COMP_MoveControlManager_C.GetHalfHeightCurrent
// 0x0008 (0x0008 - 0x0000)
struct COMP_MoveControlManager_C_GetHalfHeightCurrent final
{
public:
	float                                         Result;                                            // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_GetScaledCapsuleHalfHeight_ReturnValue;   // 0x0004(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(COMP_MoveControlManager_C_GetHalfHeightCurrent) == 0x000004, "Wrong alignment on COMP_MoveControlManager_C_GetHalfHeightCurrent");
static_assert(sizeof(COMP_MoveControlManager_C_GetHalfHeightCurrent) == 0x000008, "Wrong size on COMP_MoveControlManager_C_GetHalfHeightCurrent");
static_assert(offsetof(COMP_MoveControlManager_C_GetHalfHeightCurrent, Result) == 0x000000, "Member 'COMP_MoveControlManager_C_GetHalfHeightCurrent::Result' has a wrong offset!");
static_assert(offsetof(COMP_MoveControlManager_C_GetHalfHeightCurrent, CallFunc_GetScaledCapsuleHalfHeight_ReturnValue) == 0x000004, "Member 'COMP_MoveControlManager_C_GetHalfHeightCurrent::CallFunc_GetScaledCapsuleHalfHeight_ReturnValue' has a wrong offset!");

// Function COMP_MoveControlManager.COMP_MoveControlManager_C.GetTorsoToEyeHeightCurrent
// 0x0038 (0x0038 - 0x0000)
struct COMP_MoveControlManager_C_GetTorsoToEyeHeightCurrent final
{
public:
	float                                         Result;                                            // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_K2_GetComponentLocation_ReturnValue;      // 0x0004(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_K2_GetComponentLocation_ReturnValue_1;    // 0x0010(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector_X;                            // 0x001C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector_Y;                            // 0x0020(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector_Z;                            // 0x0024(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector_X_1;                          // 0x0028(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector_Y_1;                          // 0x002C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector_Z_1;                          // 0x0030(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Subtract_FloatFloat_ReturnValue;          // 0x0034(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(COMP_MoveControlManager_C_GetTorsoToEyeHeightCurrent) == 0x000004, "Wrong alignment on COMP_MoveControlManager_C_GetTorsoToEyeHeightCurrent");
static_assert(sizeof(COMP_MoveControlManager_C_GetTorsoToEyeHeightCurrent) == 0x000038, "Wrong size on COMP_MoveControlManager_C_GetTorsoToEyeHeightCurrent");
static_assert(offsetof(COMP_MoveControlManager_C_GetTorsoToEyeHeightCurrent, Result) == 0x000000, "Member 'COMP_MoveControlManager_C_GetTorsoToEyeHeightCurrent::Result' has a wrong offset!");
static_assert(offsetof(COMP_MoveControlManager_C_GetTorsoToEyeHeightCurrent, CallFunc_K2_GetComponentLocation_ReturnValue) == 0x000004, "Member 'COMP_MoveControlManager_C_GetTorsoToEyeHeightCurrent::CallFunc_K2_GetComponentLocation_ReturnValue' has a wrong offset!");
static_assert(offsetof(COMP_MoveControlManager_C_GetTorsoToEyeHeightCurrent, CallFunc_K2_GetComponentLocation_ReturnValue_1) == 0x000010, "Member 'COMP_MoveControlManager_C_GetTorsoToEyeHeightCurrent::CallFunc_K2_GetComponentLocation_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(COMP_MoveControlManager_C_GetTorsoToEyeHeightCurrent, CallFunc_BreakVector_X) == 0x00001C, "Member 'COMP_MoveControlManager_C_GetTorsoToEyeHeightCurrent::CallFunc_BreakVector_X' has a wrong offset!");
static_assert(offsetof(COMP_MoveControlManager_C_GetTorsoToEyeHeightCurrent, CallFunc_BreakVector_Y) == 0x000020, "Member 'COMP_MoveControlManager_C_GetTorsoToEyeHeightCurrent::CallFunc_BreakVector_Y' has a wrong offset!");
static_assert(offsetof(COMP_MoveControlManager_C_GetTorsoToEyeHeightCurrent, CallFunc_BreakVector_Z) == 0x000024, "Member 'COMP_MoveControlManager_C_GetTorsoToEyeHeightCurrent::CallFunc_BreakVector_Z' has a wrong offset!");
static_assert(offsetof(COMP_MoveControlManager_C_GetTorsoToEyeHeightCurrent, CallFunc_BreakVector_X_1) == 0x000028, "Member 'COMP_MoveControlManager_C_GetTorsoToEyeHeightCurrent::CallFunc_BreakVector_X_1' has a wrong offset!");
static_assert(offsetof(COMP_MoveControlManager_C_GetTorsoToEyeHeightCurrent, CallFunc_BreakVector_Y_1) == 0x00002C, "Member 'COMP_MoveControlManager_C_GetTorsoToEyeHeightCurrent::CallFunc_BreakVector_Y_1' has a wrong offset!");
static_assert(offsetof(COMP_MoveControlManager_C_GetTorsoToEyeHeightCurrent, CallFunc_BreakVector_Z_1) == 0x000030, "Member 'COMP_MoveControlManager_C_GetTorsoToEyeHeightCurrent::CallFunc_BreakVector_Z_1' has a wrong offset!");
static_assert(offsetof(COMP_MoveControlManager_C_GetTorsoToEyeHeightCurrent, CallFunc_Subtract_FloatFloat_ReturnValue) == 0x000034, "Member 'COMP_MoveControlManager_C_GetTorsoToEyeHeightCurrent::CallFunc_Subtract_FloatFloat_ReturnValue' has a wrong offset!");

// Function COMP_MoveControlManager.COMP_MoveControlManager_C.GetTorsoToEyeHeightStanding
// 0x0004 (0x0004 - 0x0000)
struct COMP_MoveControlManager_C_GetTorsoToEyeHeightStanding final
{
public:
	float                                         Result;                                            // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(COMP_MoveControlManager_C_GetTorsoToEyeHeightStanding) == 0x000004, "Wrong alignment on COMP_MoveControlManager_C_GetTorsoToEyeHeightStanding");
static_assert(sizeof(COMP_MoveControlManager_C_GetTorsoToEyeHeightStanding) == 0x000004, "Wrong size on COMP_MoveControlManager_C_GetTorsoToEyeHeightStanding");
static_assert(offsetof(COMP_MoveControlManager_C_GetTorsoToEyeHeightStanding, Result) == 0x000000, "Member 'COMP_MoveControlManager_C_GetTorsoToEyeHeightStanding::Result' has a wrong offset!");

// Function COMP_MoveControlManager.COMP_MoveControlManager_C.GetCurrentBaseSprintSpeed
// 0x000C (0x000C - 0x0000)
struct COMP_MoveControlManager_C_GetCurrentBaseSprintSpeed final
{
public:
	float                                         Speed;                                             // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Variable;                                // 0x0004(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         K2Node_Select_Default;                             // 0x0008(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(COMP_MoveControlManager_C_GetCurrentBaseSprintSpeed) == 0x000004, "Wrong alignment on COMP_MoveControlManager_C_GetCurrentBaseSprintSpeed");
static_assert(sizeof(COMP_MoveControlManager_C_GetCurrentBaseSprintSpeed) == 0x00000C, "Wrong size on COMP_MoveControlManager_C_GetCurrentBaseSprintSpeed");
static_assert(offsetof(COMP_MoveControlManager_C_GetCurrentBaseSprintSpeed, Speed) == 0x000000, "Member 'COMP_MoveControlManager_C_GetCurrentBaseSprintSpeed::Speed' has a wrong offset!");
static_assert(offsetof(COMP_MoveControlManager_C_GetCurrentBaseSprintSpeed, Temp_bool_Variable) == 0x000004, "Member 'COMP_MoveControlManager_C_GetCurrentBaseSprintSpeed::Temp_bool_Variable' has a wrong offset!");
static_assert(offsetof(COMP_MoveControlManager_C_GetCurrentBaseSprintSpeed, K2Node_Select_Default) == 0x000008, "Member 'COMP_MoveControlManager_C_GetCurrentBaseSprintSpeed::K2Node_Select_Default' has a wrong offset!");

// Function COMP_MoveControlManager.COMP_MoveControlManager_C.GetCurrentMaxSprintSpeed
// 0x000C (0x000C - 0x0000)
struct COMP_MoveControlManager_C_GetCurrentMaxSprintSpeed final
{
public:
	float                                         Speed;                                             // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Variable;                                // 0x0004(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         K2Node_Select_Default;                             // 0x0008(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(COMP_MoveControlManager_C_GetCurrentMaxSprintSpeed) == 0x000004, "Wrong alignment on COMP_MoveControlManager_C_GetCurrentMaxSprintSpeed");
static_assert(sizeof(COMP_MoveControlManager_C_GetCurrentMaxSprintSpeed) == 0x00000C, "Wrong size on COMP_MoveControlManager_C_GetCurrentMaxSprintSpeed");
static_assert(offsetof(COMP_MoveControlManager_C_GetCurrentMaxSprintSpeed, Speed) == 0x000000, "Member 'COMP_MoveControlManager_C_GetCurrentMaxSprintSpeed::Speed' has a wrong offset!");
static_assert(offsetof(COMP_MoveControlManager_C_GetCurrentMaxSprintSpeed, Temp_bool_Variable) == 0x000004, "Member 'COMP_MoveControlManager_C_GetCurrentMaxSprintSpeed::Temp_bool_Variable' has a wrong offset!");
static_assert(offsetof(COMP_MoveControlManager_C_GetCurrentMaxSprintSpeed, K2Node_Select_Default) == 0x000008, "Member 'COMP_MoveControlManager_C_GetCurrentMaxSprintSpeed::K2Node_Select_Default' has a wrong offset!");

// Function COMP_MoveControlManager.COMP_MoveControlManager_C.GetFootIndexFromSign
// 0x0008 (0x0008 - 0x0000)
struct COMP_MoveControlManager_C_GetFootIndexFromSign final
{
public:
	int32                                         Index_0;                                           // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue;                  // 0x0004(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(COMP_MoveControlManager_C_GetFootIndexFromSign) == 0x000004, "Wrong alignment on COMP_MoveControlManager_C_GetFootIndexFromSign");
static_assert(sizeof(COMP_MoveControlManager_C_GetFootIndexFromSign) == 0x000008, "Wrong size on COMP_MoveControlManager_C_GetFootIndexFromSign");
static_assert(offsetof(COMP_MoveControlManager_C_GetFootIndexFromSign, Index_0) == 0x000000, "Member 'COMP_MoveControlManager_C_GetFootIndexFromSign::Index_0' has a wrong offset!");
static_assert(offsetof(COMP_MoveControlManager_C_GetFootIndexFromSign, CallFunc_Less_IntInt_ReturnValue) == 0x000004, "Member 'COMP_MoveControlManager_C_GetFootIndexFromSign::CallFunc_Less_IntInt_ReturnValue' has a wrong offset!");

// Function COMP_MoveControlManager.COMP_MoveControlManager_C.ClampAndCacheMoveInput
// 0x0028 (0x0028 - 0x0000)
struct COMP_MoveControlManager_C_ClampAndCacheMoveInput final
{
public:
	struct FVector2D                              MoveInput;                                         // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         ClampedMagnitude;                                  // 0x0008(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Magnitude;                                         // 0x000C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Divide_FloatFloat_ReturnValue;            // 0x0010(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Greater_FloatFloat_ReturnValue;           // 0x0014(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_15[0x3];                                       // 0x0015(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector2D                              CallFunc_Multiply_Vector2DFloat_ReturnValue;       // 0x0018(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_FClamp_ReturnValue;                       // 0x0020(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_VSize2D_ReturnValue;                      // 0x0024(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(COMP_MoveControlManager_C_ClampAndCacheMoveInput) == 0x000004, "Wrong alignment on COMP_MoveControlManager_C_ClampAndCacheMoveInput");
static_assert(sizeof(COMP_MoveControlManager_C_ClampAndCacheMoveInput) == 0x000028, "Wrong size on COMP_MoveControlManager_C_ClampAndCacheMoveInput");
static_assert(offsetof(COMP_MoveControlManager_C_ClampAndCacheMoveInput, MoveInput) == 0x000000, "Member 'COMP_MoveControlManager_C_ClampAndCacheMoveInput::MoveInput' has a wrong offset!");
static_assert(offsetof(COMP_MoveControlManager_C_ClampAndCacheMoveInput, ClampedMagnitude) == 0x000008, "Member 'COMP_MoveControlManager_C_ClampAndCacheMoveInput::ClampedMagnitude' has a wrong offset!");
static_assert(offsetof(COMP_MoveControlManager_C_ClampAndCacheMoveInput, Magnitude) == 0x00000C, "Member 'COMP_MoveControlManager_C_ClampAndCacheMoveInput::Magnitude' has a wrong offset!");
static_assert(offsetof(COMP_MoveControlManager_C_ClampAndCacheMoveInput, CallFunc_Divide_FloatFloat_ReturnValue) == 0x000010, "Member 'COMP_MoveControlManager_C_ClampAndCacheMoveInput::CallFunc_Divide_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(COMP_MoveControlManager_C_ClampAndCacheMoveInput, CallFunc_Greater_FloatFloat_ReturnValue) == 0x000014, "Member 'COMP_MoveControlManager_C_ClampAndCacheMoveInput::CallFunc_Greater_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(COMP_MoveControlManager_C_ClampAndCacheMoveInput, CallFunc_Multiply_Vector2DFloat_ReturnValue) == 0x000018, "Member 'COMP_MoveControlManager_C_ClampAndCacheMoveInput::CallFunc_Multiply_Vector2DFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(COMP_MoveControlManager_C_ClampAndCacheMoveInput, CallFunc_FClamp_ReturnValue) == 0x000020, "Member 'COMP_MoveControlManager_C_ClampAndCacheMoveInput::CallFunc_FClamp_ReturnValue' has a wrong offset!");
static_assert(offsetof(COMP_MoveControlManager_C_ClampAndCacheMoveInput, CallFunc_VSize2D_ReturnValue) == 0x000024, "Member 'COMP_MoveControlManager_C_ClampAndCacheMoveInput::CallFunc_VSize2D_ReturnValue' has a wrong offset!");

// Function COMP_MoveControlManager.COMP_MoveControlManager_C.GetPlayerMoveSpeedType
// 0x0001 (0x0001 - 0x0000)
struct COMP_MoveControlManager_C_GetPlayerMoveSpeedType final
{
public:
	ENUM_PlayerMoveSpeed                          Type;                                              // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(COMP_MoveControlManager_C_GetPlayerMoveSpeedType) == 0x000001, "Wrong alignment on COMP_MoveControlManager_C_GetPlayerMoveSpeedType");
static_assert(sizeof(COMP_MoveControlManager_C_GetPlayerMoveSpeedType) == 0x000001, "Wrong size on COMP_MoveControlManager_C_GetPlayerMoveSpeedType");
static_assert(offsetof(COMP_MoveControlManager_C_GetPlayerMoveSpeedType, Type) == 0x000000, "Member 'COMP_MoveControlManager_C_GetPlayerMoveSpeedType::Type' has a wrong offset!");

// Function COMP_MoveControlManager.COMP_MoveControlManager_C.ExpireMoveControl
// 0x0018 (0x0018 - 0x0000)
struct COMP_MoveControlManager_C_ExpireMoveControl final
{
public:
	class UMOVECONTROL_Base_C*                    MoveControl;                                       // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Result;                                            // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         MoveControlIndex;                                  // 0x000C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0010(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_GreaterEqual_IntInt_ReturnValue;          // 0x0011(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_12[0x2];                                       // 0x0012(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Array_Find_ReturnValue;                   // 0x0014(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(COMP_MoveControlManager_C_ExpireMoveControl) == 0x000008, "Wrong alignment on COMP_MoveControlManager_C_ExpireMoveControl");
static_assert(sizeof(COMP_MoveControlManager_C_ExpireMoveControl) == 0x000018, "Wrong size on COMP_MoveControlManager_C_ExpireMoveControl");
static_assert(offsetof(COMP_MoveControlManager_C_ExpireMoveControl, MoveControl) == 0x000000, "Member 'COMP_MoveControlManager_C_ExpireMoveControl::MoveControl' has a wrong offset!");
static_assert(offsetof(COMP_MoveControlManager_C_ExpireMoveControl, Result) == 0x000008, "Member 'COMP_MoveControlManager_C_ExpireMoveControl::Result' has a wrong offset!");
static_assert(offsetof(COMP_MoveControlManager_C_ExpireMoveControl, MoveControlIndex) == 0x00000C, "Member 'COMP_MoveControlManager_C_ExpireMoveControl::MoveControlIndex' has a wrong offset!");
static_assert(offsetof(COMP_MoveControlManager_C_ExpireMoveControl, CallFunc_IsValid_ReturnValue) == 0x000010, "Member 'COMP_MoveControlManager_C_ExpireMoveControl::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(COMP_MoveControlManager_C_ExpireMoveControl, CallFunc_GreaterEqual_IntInt_ReturnValue) == 0x000011, "Member 'COMP_MoveControlManager_C_ExpireMoveControl::CallFunc_GreaterEqual_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(COMP_MoveControlManager_C_ExpireMoveControl, CallFunc_Array_Find_ReturnValue) == 0x000014, "Member 'COMP_MoveControlManager_C_ExpireMoveControl::CallFunc_Array_Find_ReturnValue' has a wrong offset!");

// Function COMP_MoveControlManager.COMP_MoveControlManager_C.EVENT_OnStaminaChanged
// 0x0014 (0x0014 - 0x0000)
struct COMP_MoveControlManager_C_EVENT_OnStaminaChanged final
{
public:
	float                                         CurrValue;                                         // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         LastValue;                                         // 0x0004(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Divide_FloatFloat_ReturnValue;            // 0x0008(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Subtract_FloatFloat_ReturnValue;          // 0x000C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_GreaterEqual_FloatFloat_ReturnValue;      // 0x0010(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(COMP_MoveControlManager_C_EVENT_OnStaminaChanged) == 0x000004, "Wrong alignment on COMP_MoveControlManager_C_EVENT_OnStaminaChanged");
static_assert(sizeof(COMP_MoveControlManager_C_EVENT_OnStaminaChanged) == 0x000014, "Wrong size on COMP_MoveControlManager_C_EVENT_OnStaminaChanged");
static_assert(offsetof(COMP_MoveControlManager_C_EVENT_OnStaminaChanged, CurrValue) == 0x000000, "Member 'COMP_MoveControlManager_C_EVENT_OnStaminaChanged::CurrValue' has a wrong offset!");
static_assert(offsetof(COMP_MoveControlManager_C_EVENT_OnStaminaChanged, LastValue) == 0x000004, "Member 'COMP_MoveControlManager_C_EVENT_OnStaminaChanged::LastValue' has a wrong offset!");
static_assert(offsetof(COMP_MoveControlManager_C_EVENT_OnStaminaChanged, CallFunc_Divide_FloatFloat_ReturnValue) == 0x000008, "Member 'COMP_MoveControlManager_C_EVENT_OnStaminaChanged::CallFunc_Divide_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(COMP_MoveControlManager_C_EVENT_OnStaminaChanged, CallFunc_Subtract_FloatFloat_ReturnValue) == 0x00000C, "Member 'COMP_MoveControlManager_C_EVENT_OnStaminaChanged::CallFunc_Subtract_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(COMP_MoveControlManager_C_EVENT_OnStaminaChanged, CallFunc_GreaterEqual_FloatFloat_ReturnValue) == 0x000010, "Member 'COMP_MoveControlManager_C_EVENT_OnStaminaChanged::CallFunc_GreaterEqual_FloatFloat_ReturnValue' has a wrong offset!");

// Function COMP_MoveControlManager.COMP_MoveControlManager_C.EVENT_OnHardwareBagChanged
// 0x0050 (0x0050 - 0x0000)
struct COMP_MoveControlManager_C_EVENT_OnHardwareBagChanged final
{
public:
	int32                                         SlotIndex;                                         // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TDelegate<void(int32 SlotIndex)>              K2Node_CreateDelegate_OutputDelegate;              // 0x0004(0x0010)(ZeroConstructor, NoDestructor)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UHARDWARE_TurboBoots_V3_C*              K2Node_DynamicCast_AsHARDWARE_Turbo_Boots_V3;      // 0x0018(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0020(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_21[0x3];                                       // 0x0021(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	TDelegate<void(bool State)>                   K2Node_CreateDelegate_OutputDelegate_1;            // 0x0024(0x0010)(ZeroConstructor, NoDestructor)
	uint8                                         Pad_34[0x4];                                       // 0x0034(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UITEM_Base_C*                           CallFunc_GetSlotItem_Item;                         // 0x0038(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UHARDWARE_TurboBoots_Base_C*            K2Node_DynamicCast_AsHARDWARE_Turbo_Boots_Base;    // 0x0040(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess_1;                     // 0x0048(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(COMP_MoveControlManager_C_EVENT_OnHardwareBagChanged) == 0x000008, "Wrong alignment on COMP_MoveControlManager_C_EVENT_OnHardwareBagChanged");
static_assert(sizeof(COMP_MoveControlManager_C_EVENT_OnHardwareBagChanged) == 0x000050, "Wrong size on COMP_MoveControlManager_C_EVENT_OnHardwareBagChanged");
static_assert(offsetof(COMP_MoveControlManager_C_EVENT_OnHardwareBagChanged, SlotIndex) == 0x000000, "Member 'COMP_MoveControlManager_C_EVENT_OnHardwareBagChanged::SlotIndex' has a wrong offset!");
static_assert(offsetof(COMP_MoveControlManager_C_EVENT_OnHardwareBagChanged, K2Node_CreateDelegate_OutputDelegate) == 0x000004, "Member 'COMP_MoveControlManager_C_EVENT_OnHardwareBagChanged::K2Node_CreateDelegate_OutputDelegate' has a wrong offset!");
static_assert(offsetof(COMP_MoveControlManager_C_EVENT_OnHardwareBagChanged, K2Node_DynamicCast_AsHARDWARE_Turbo_Boots_V3) == 0x000018, "Member 'COMP_MoveControlManager_C_EVENT_OnHardwareBagChanged::K2Node_DynamicCast_AsHARDWARE_Turbo_Boots_V3' has a wrong offset!");
static_assert(offsetof(COMP_MoveControlManager_C_EVENT_OnHardwareBagChanged, K2Node_DynamicCast_bSuccess) == 0x000020, "Member 'COMP_MoveControlManager_C_EVENT_OnHardwareBagChanged::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(COMP_MoveControlManager_C_EVENT_OnHardwareBagChanged, K2Node_CreateDelegate_OutputDelegate_1) == 0x000024, "Member 'COMP_MoveControlManager_C_EVENT_OnHardwareBagChanged::K2Node_CreateDelegate_OutputDelegate_1' has a wrong offset!");
static_assert(offsetof(COMP_MoveControlManager_C_EVENT_OnHardwareBagChanged, CallFunc_GetSlotItem_Item) == 0x000038, "Member 'COMP_MoveControlManager_C_EVENT_OnHardwareBagChanged::CallFunc_GetSlotItem_Item' has a wrong offset!");
static_assert(offsetof(COMP_MoveControlManager_C_EVENT_OnHardwareBagChanged, K2Node_DynamicCast_AsHARDWARE_Turbo_Boots_Base) == 0x000040, "Member 'COMP_MoveControlManager_C_EVENT_OnHardwareBagChanged::K2Node_DynamicCast_AsHARDWARE_Turbo_Boots_Base' has a wrong offset!");
static_assert(offsetof(COMP_MoveControlManager_C_EVENT_OnHardwareBagChanged, K2Node_DynamicCast_bSuccess_1) == 0x000048, "Member 'COMP_MoveControlManager_C_EVENT_OnHardwareBagChanged::K2Node_DynamicCast_bSuccess_1' has a wrong offset!");

// Function COMP_MoveControlManager.COMP_MoveControlManager_C.EVENT_TurboBootsStateChanged
// 0x0003 (0x0003 - 0x0000)
struct COMP_MoveControlManager_C_EVENT_TurboBootsStateChanged final
{
public:
	bool                                          State;                                             // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Not_PreBool_ReturnValue;                  // 0x0001(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BooleanAND_ReturnValue;                   // 0x0002(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(COMP_MoveControlManager_C_EVENT_TurboBootsStateChanged) == 0x000001, "Wrong alignment on COMP_MoveControlManager_C_EVENT_TurboBootsStateChanged");
static_assert(sizeof(COMP_MoveControlManager_C_EVENT_TurboBootsStateChanged) == 0x000003, "Wrong size on COMP_MoveControlManager_C_EVENT_TurboBootsStateChanged");
static_assert(offsetof(COMP_MoveControlManager_C_EVENT_TurboBootsStateChanged, State) == 0x000000, "Member 'COMP_MoveControlManager_C_EVENT_TurboBootsStateChanged::State' has a wrong offset!");
static_assert(offsetof(COMP_MoveControlManager_C_EVENT_TurboBootsStateChanged, CallFunc_Not_PreBool_ReturnValue) == 0x000001, "Member 'COMP_MoveControlManager_C_EVENT_TurboBootsStateChanged::CallFunc_Not_PreBool_ReturnValue' has a wrong offset!");
static_assert(offsetof(COMP_MoveControlManager_C_EVENT_TurboBootsStateChanged, CallFunc_BooleanAND_ReturnValue) == 0x000002, "Member 'COMP_MoveControlManager_C_EVENT_TurboBootsStateChanged::CallFunc_BooleanAND_ReturnValue' has a wrong offset!");

// Function COMP_MoveControlManager.COMP_MoveControlManager_C.GetCharacterSurfaceMoveScale
// 0x0018 (0x0018 - 0x0000)
struct COMP_MoveControlManager_C_GetCharacterSurfaceMoveScale final
{
public:
	float                                         Result;                                            // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UHARDWARE_TurboBoots_V1_C*              K2Node_DynamicCast_AsHARDWARE_Turbo_Boots_V1;      // 0x0008(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0010(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_11[0x3];                                       // 0x0011(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_GetLastSurfaceMoveScale_Result;           // 0x0014(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(COMP_MoveControlManager_C_GetCharacterSurfaceMoveScale) == 0x000008, "Wrong alignment on COMP_MoveControlManager_C_GetCharacterSurfaceMoveScale");
static_assert(sizeof(COMP_MoveControlManager_C_GetCharacterSurfaceMoveScale) == 0x000018, "Wrong size on COMP_MoveControlManager_C_GetCharacterSurfaceMoveScale");
static_assert(offsetof(COMP_MoveControlManager_C_GetCharacterSurfaceMoveScale, Result) == 0x000000, "Member 'COMP_MoveControlManager_C_GetCharacterSurfaceMoveScale::Result' has a wrong offset!");
static_assert(offsetof(COMP_MoveControlManager_C_GetCharacterSurfaceMoveScale, K2Node_DynamicCast_AsHARDWARE_Turbo_Boots_V1) == 0x000008, "Member 'COMP_MoveControlManager_C_GetCharacterSurfaceMoveScale::K2Node_DynamicCast_AsHARDWARE_Turbo_Boots_V1' has a wrong offset!");
static_assert(offsetof(COMP_MoveControlManager_C_GetCharacterSurfaceMoveScale, K2Node_DynamicCast_bSuccess) == 0x000010, "Member 'COMP_MoveControlManager_C_GetCharacterSurfaceMoveScale::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(COMP_MoveControlManager_C_GetCharacterSurfaceMoveScale, CallFunc_GetLastSurfaceMoveScale_Result) == 0x000014, "Member 'COMP_MoveControlManager_C_GetCharacterSurfaceMoveScale::CallFunc_GetLastSurfaceMoveScale_Result' has a wrong offset!");

// Function COMP_MoveControlManager.COMP_MoveControlManager_C.EVENT_OnWalkSpeedChanged
// 0x0008 (0x0008 - 0x0000)
struct COMP_MoveControlManager_C_EVENT_OnWalkSpeedChanged final
{
public:
	float                                         CurrValue;                                         // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         LastValue;                                         // 0x0004(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(COMP_MoveControlManager_C_EVENT_OnWalkSpeedChanged) == 0x000004, "Wrong alignment on COMP_MoveControlManager_C_EVENT_OnWalkSpeedChanged");
static_assert(sizeof(COMP_MoveControlManager_C_EVENT_OnWalkSpeedChanged) == 0x000008, "Wrong size on COMP_MoveControlManager_C_EVENT_OnWalkSpeedChanged");
static_assert(offsetof(COMP_MoveControlManager_C_EVENT_OnWalkSpeedChanged, CurrValue) == 0x000000, "Member 'COMP_MoveControlManager_C_EVENT_OnWalkSpeedChanged::CurrValue' has a wrong offset!");
static_assert(offsetof(COMP_MoveControlManager_C_EVENT_OnWalkSpeedChanged, LastValue) == 0x000004, "Member 'COMP_MoveControlManager_C_EVENT_OnWalkSpeedChanged::LastValue' has a wrong offset!");

// Function COMP_MoveControlManager.COMP_MoveControlManager_C.EVENT_OnJumpSpeedChanged
// 0x0008 (0x0008 - 0x0000)
struct COMP_MoveControlManager_C_EVENT_OnJumpSpeedChanged final
{
public:
	float                                         CurrValue;                                         // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         LastValue;                                         // 0x0004(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(COMP_MoveControlManager_C_EVENT_OnJumpSpeedChanged) == 0x000004, "Wrong alignment on COMP_MoveControlManager_C_EVENT_OnJumpSpeedChanged");
static_assert(sizeof(COMP_MoveControlManager_C_EVENT_OnJumpSpeedChanged) == 0x000008, "Wrong size on COMP_MoveControlManager_C_EVENT_OnJumpSpeedChanged");
static_assert(offsetof(COMP_MoveControlManager_C_EVENT_OnJumpSpeedChanged, CurrValue) == 0x000000, "Member 'COMP_MoveControlManager_C_EVENT_OnJumpSpeedChanged::CurrValue' has a wrong offset!");
static_assert(offsetof(COMP_MoveControlManager_C_EVENT_OnJumpSpeedChanged, LastValue) == 0x000004, "Member 'COMP_MoveControlManager_C_EVENT_OnJumpSpeedChanged::LastValue' has a wrong offset!");

// Function COMP_MoveControlManager.COMP_MoveControlManager_C.EVENT_OnGroundFrictionChanged
// 0x0008 (0x0008 - 0x0000)
struct COMP_MoveControlManager_C_EVENT_OnGroundFrictionChanged final
{
public:
	float                                         CurrValue;                                         // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         LastValue;                                         // 0x0004(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(COMP_MoveControlManager_C_EVENT_OnGroundFrictionChanged) == 0x000004, "Wrong alignment on COMP_MoveControlManager_C_EVENT_OnGroundFrictionChanged");
static_assert(sizeof(COMP_MoveControlManager_C_EVENT_OnGroundFrictionChanged) == 0x000008, "Wrong size on COMP_MoveControlManager_C_EVENT_OnGroundFrictionChanged");
static_assert(offsetof(COMP_MoveControlManager_C_EVENT_OnGroundFrictionChanged, CurrValue) == 0x000000, "Member 'COMP_MoveControlManager_C_EVENT_OnGroundFrictionChanged::CurrValue' has a wrong offset!");
static_assert(offsetof(COMP_MoveControlManager_C_EVENT_OnGroundFrictionChanged, LastValue) == 0x000004, "Member 'COMP_MoveControlManager_C_EVENT_OnGroundFrictionChanged::LastValue' has a wrong offset!");

// Function COMP_MoveControlManager.COMP_MoveControlManager_C.EVENT_OnMoveAccelerationChanged
// 0x0008 (0x0008 - 0x0000)
struct COMP_MoveControlManager_C_EVENT_OnMoveAccelerationChanged final
{
public:
	float                                         CurrValue;                                         // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         LastValue;                                         // 0x0004(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(COMP_MoveControlManager_C_EVENT_OnMoveAccelerationChanged) == 0x000004, "Wrong alignment on COMP_MoveControlManager_C_EVENT_OnMoveAccelerationChanged");
static_assert(sizeof(COMP_MoveControlManager_C_EVENT_OnMoveAccelerationChanged) == 0x000008, "Wrong size on COMP_MoveControlManager_C_EVENT_OnMoveAccelerationChanged");
static_assert(offsetof(COMP_MoveControlManager_C_EVENT_OnMoveAccelerationChanged, CurrValue) == 0x000000, "Member 'COMP_MoveControlManager_C_EVENT_OnMoveAccelerationChanged::CurrValue' has a wrong offset!");
static_assert(offsetof(COMP_MoveControlManager_C_EVENT_OnMoveAccelerationChanged, LastValue) == 0x000004, "Member 'COMP_MoveControlManager_C_EVENT_OnMoveAccelerationChanged::LastValue' has a wrong offset!");

// Function COMP_MoveControlManager.COMP_MoveControlManager_C.EVENT_OnBrakingDecelerationChanged
// 0x0008 (0x0008 - 0x0000)
struct COMP_MoveControlManager_C_EVENT_OnBrakingDecelerationChanged final
{
public:
	float                                         CurrValue;                                         // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         LastValue;                                         // 0x0004(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(COMP_MoveControlManager_C_EVENT_OnBrakingDecelerationChanged) == 0x000004, "Wrong alignment on COMP_MoveControlManager_C_EVENT_OnBrakingDecelerationChanged");
static_assert(sizeof(COMP_MoveControlManager_C_EVENT_OnBrakingDecelerationChanged) == 0x000008, "Wrong size on COMP_MoveControlManager_C_EVENT_OnBrakingDecelerationChanged");
static_assert(offsetof(COMP_MoveControlManager_C_EVENT_OnBrakingDecelerationChanged, CurrValue) == 0x000000, "Member 'COMP_MoveControlManager_C_EVENT_OnBrakingDecelerationChanged::CurrValue' has a wrong offset!");
static_assert(offsetof(COMP_MoveControlManager_C_EVENT_OnBrakingDecelerationChanged, LastValue) == 0x000004, "Member 'COMP_MoveControlManager_C_EVENT_OnBrakingDecelerationChanged::LastValue' has a wrong offset!");

// Function COMP_MoveControlManager.COMP_MoveControlManager_C.UpdateFatigueState
// 0x0020 (0x0020 - 0x0000)
struct COMP_MoveControlManager_C_UpdateFatigueState final
{
public:
	bool                                          IsFatigued;                                        // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UAttribMod*                             CallFunc_ApplyMod_ReturnValue;                     // 0x0008(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_ExpireModsMatchingCategory_ReturnValue;   // 0x0010(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_ExpireModsMatchingCategory_ReturnValue_1; // 0x0014(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UAttribMod*                             CallFunc_ApplyMod_ReturnValue_1;                   // 0x0018(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(COMP_MoveControlManager_C_UpdateFatigueState) == 0x000008, "Wrong alignment on COMP_MoveControlManager_C_UpdateFatigueState");
static_assert(sizeof(COMP_MoveControlManager_C_UpdateFatigueState) == 0x000020, "Wrong size on COMP_MoveControlManager_C_UpdateFatigueState");
static_assert(offsetof(COMP_MoveControlManager_C_UpdateFatigueState, IsFatigued) == 0x000000, "Member 'COMP_MoveControlManager_C_UpdateFatigueState::IsFatigued' has a wrong offset!");
static_assert(offsetof(COMP_MoveControlManager_C_UpdateFatigueState, CallFunc_ApplyMod_ReturnValue) == 0x000008, "Member 'COMP_MoveControlManager_C_UpdateFatigueState::CallFunc_ApplyMod_ReturnValue' has a wrong offset!");
static_assert(offsetof(COMP_MoveControlManager_C_UpdateFatigueState, CallFunc_ExpireModsMatchingCategory_ReturnValue) == 0x000010, "Member 'COMP_MoveControlManager_C_UpdateFatigueState::CallFunc_ExpireModsMatchingCategory_ReturnValue' has a wrong offset!");
static_assert(offsetof(COMP_MoveControlManager_C_UpdateFatigueState, CallFunc_ExpireModsMatchingCategory_ReturnValue_1) == 0x000014, "Member 'COMP_MoveControlManager_C_UpdateFatigueState::CallFunc_ExpireModsMatchingCategory_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(COMP_MoveControlManager_C_UpdateFatigueState, CallFunc_ApplyMod_ReturnValue_1) == 0x000018, "Member 'COMP_MoveControlManager_C_UpdateFatigueState::CallFunc_ApplyMod_ReturnValue_1' has a wrong offset!");

// Function COMP_MoveControlManager.COMP_MoveControlManager_C.ShouldSkateWhileSprinting
// 0x0003 (0x0003 - 0x0000)
struct COMP_MoveControlManager_C_ShouldSkateWhileSprinting final
{
public:
	bool                                          Result;                                            // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_CanActivateTurboMechanism_Result;         // 0x0001(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0002(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(COMP_MoveControlManager_C_ShouldSkateWhileSprinting) == 0x000001, "Wrong alignment on COMP_MoveControlManager_C_ShouldSkateWhileSprinting");
static_assert(sizeof(COMP_MoveControlManager_C_ShouldSkateWhileSprinting) == 0x000003, "Wrong size on COMP_MoveControlManager_C_ShouldSkateWhileSprinting");
static_assert(offsetof(COMP_MoveControlManager_C_ShouldSkateWhileSprinting, Result) == 0x000000, "Member 'COMP_MoveControlManager_C_ShouldSkateWhileSprinting::Result' has a wrong offset!");
static_assert(offsetof(COMP_MoveControlManager_C_ShouldSkateWhileSprinting, CallFunc_CanActivateTurboMechanism_Result) == 0x000001, "Member 'COMP_MoveControlManager_C_ShouldSkateWhileSprinting::CallFunc_CanActivateTurboMechanism_Result' has a wrong offset!");
static_assert(offsetof(COMP_MoveControlManager_C_ShouldSkateWhileSprinting, CallFunc_IsValid_ReturnValue) == 0x000002, "Member 'COMP_MoveControlManager_C_ShouldSkateWhileSprinting::CallFunc_IsValid_ReturnValue' has a wrong offset!");

// Function COMP_MoveControlManager.COMP_MoveControlManager_C.ClearMoveActionInputValues
// 0x0014 (0x0014 - 0x0000)
struct COMP_MoveControlManager_C_ClearMoveActionInputValues final
{
public:
	int32                                         Temp_int_Variable;                                 // 0x0000(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue;                   // 0x0004(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Temp_float_Variable;                               // 0x0008(0x0004)(ConstParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_LastIndex_ReturnValue;              // 0x000C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_LessEqual_IntInt_ReturnValue;             // 0x0010(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(COMP_MoveControlManager_C_ClearMoveActionInputValues) == 0x000004, "Wrong alignment on COMP_MoveControlManager_C_ClearMoveActionInputValues");
static_assert(sizeof(COMP_MoveControlManager_C_ClearMoveActionInputValues) == 0x000014, "Wrong size on COMP_MoveControlManager_C_ClearMoveActionInputValues");
static_assert(offsetof(COMP_MoveControlManager_C_ClearMoveActionInputValues, Temp_int_Variable) == 0x000000, "Member 'COMP_MoveControlManager_C_ClearMoveActionInputValues::Temp_int_Variable' has a wrong offset!");
static_assert(offsetof(COMP_MoveControlManager_C_ClearMoveActionInputValues, CallFunc_Add_IntInt_ReturnValue) == 0x000004, "Member 'COMP_MoveControlManager_C_ClearMoveActionInputValues::CallFunc_Add_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(COMP_MoveControlManager_C_ClearMoveActionInputValues, Temp_float_Variable) == 0x000008, "Member 'COMP_MoveControlManager_C_ClearMoveActionInputValues::Temp_float_Variable' has a wrong offset!");
static_assert(offsetof(COMP_MoveControlManager_C_ClearMoveActionInputValues, CallFunc_Array_LastIndex_ReturnValue) == 0x00000C, "Member 'COMP_MoveControlManager_C_ClearMoveActionInputValues::CallFunc_Array_LastIndex_ReturnValue' has a wrong offset!");
static_assert(offsetof(COMP_MoveControlManager_C_ClearMoveActionInputValues, CallFunc_LessEqual_IntInt_ReturnValue) == 0x000010, "Member 'COMP_MoveControlManager_C_ClearMoveActionInputValues::CallFunc_LessEqual_IntInt_ReturnValue' has a wrong offset!");

// Function COMP_MoveControlManager.COMP_MoveControlManager_C.EVENT_OnAirControlChanged
// 0x0008 (0x0008 - 0x0000)
struct COMP_MoveControlManager_C_EVENT_OnAirControlChanged final
{
public:
	float                                         CurrValue;                                         // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         LastValue;                                         // 0x0004(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(COMP_MoveControlManager_C_EVENT_OnAirControlChanged) == 0x000004, "Wrong alignment on COMP_MoveControlManager_C_EVENT_OnAirControlChanged");
static_assert(sizeof(COMP_MoveControlManager_C_EVENT_OnAirControlChanged) == 0x000008, "Wrong size on COMP_MoveControlManager_C_EVENT_OnAirControlChanged");
static_assert(offsetof(COMP_MoveControlManager_C_EVENT_OnAirControlChanged, CurrValue) == 0x000000, "Member 'COMP_MoveControlManager_C_EVENT_OnAirControlChanged::CurrValue' has a wrong offset!");
static_assert(offsetof(COMP_MoveControlManager_C_EVENT_OnAirControlChanged, LastValue) == 0x000004, "Member 'COMP_MoveControlManager_C_EVENT_OnAirControlChanged::LastValue' has a wrong offset!");

// Function COMP_MoveControlManager.COMP_MoveControlManager_C.ShouldSaveComponent
// 0x000C (0x000C - 0x0000)
struct COMP_MoveControlManager_C_ShouldSaveComponent final
{
public:
	struct FStreamingSaveGameComponentParams      Params_0;                                          // 0x0000(0x0004)(Parm, OutParm, NoDestructor)
	bool                                          ReturnValue;                                       // 0x0004(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FStreamingSaveGameComponentParams      K2Node_MakeStruct_StreamingSaveGameComponentParams; // 0x0008(0x0004)(NoDestructor)
};
static_assert(alignof(COMP_MoveControlManager_C_ShouldSaveComponent) == 0x000004, "Wrong alignment on COMP_MoveControlManager_C_ShouldSaveComponent");
static_assert(sizeof(COMP_MoveControlManager_C_ShouldSaveComponent) == 0x00000C, "Wrong size on COMP_MoveControlManager_C_ShouldSaveComponent");
static_assert(offsetof(COMP_MoveControlManager_C_ShouldSaveComponent, Params_0) == 0x000000, "Member 'COMP_MoveControlManager_C_ShouldSaveComponent::Params_0' has a wrong offset!");
static_assert(offsetof(COMP_MoveControlManager_C_ShouldSaveComponent, ReturnValue) == 0x000004, "Member 'COMP_MoveControlManager_C_ShouldSaveComponent::ReturnValue' has a wrong offset!");
static_assert(offsetof(COMP_MoveControlManager_C_ShouldSaveComponent, K2Node_MakeStruct_StreamingSaveGameComponentParams) == 0x000008, "Member 'COMP_MoveControlManager_C_ShouldSaveComponent::K2Node_MakeStruct_StreamingSaveGameComponentParams' has a wrong offset!");

}

