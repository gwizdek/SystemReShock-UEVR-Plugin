#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: WIDGET_Minimap

#include "Basic.hpp"

#include "UMG_structs.hpp"
#include "STRUCT_ScannableRegionData_structs.hpp"
#include "STRUCT_LevelInfo_structs.hpp"
#include "SlateCore_structs.hpp"


namespace SDK::Params
{

// Function WIDGET_Minimap.WIDGET_Minimap_C.ExecuteUbergraph_WIDGET_Minimap
// 0x0050 (0x0050 - 0x0000)
struct WIDGET_Minimap_C_ExecuteUbergraph_WIDGET_Minimap final
{
public:
	int32                                         EntryPoint;                                        // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_Event_IsDesignTime;                         // 0x0004(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FGeometry                              K2Node_Event_MyGeometry;                           // 0x0008(0x0038)(IsPlainOldData, NoDestructor)
	float                                         K2Node_Event_InDeltaTime;                          // 0x0040(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_44[0x4];                                       // 0x0044(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UMaterialInstanceDynamic*               CallFunc_ConvertToDynamicMaterialInstance_ReturnValue; // 0x0048(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(WIDGET_Minimap_C_ExecuteUbergraph_WIDGET_Minimap) == 0x000008, "Wrong alignment on WIDGET_Minimap_C_ExecuteUbergraph_WIDGET_Minimap");
static_assert(sizeof(WIDGET_Minimap_C_ExecuteUbergraph_WIDGET_Minimap) == 0x000050, "Wrong size on WIDGET_Minimap_C_ExecuteUbergraph_WIDGET_Minimap");
static_assert(offsetof(WIDGET_Minimap_C_ExecuteUbergraph_WIDGET_Minimap, EntryPoint) == 0x000000, "Member 'WIDGET_Minimap_C_ExecuteUbergraph_WIDGET_Minimap::EntryPoint' has a wrong offset!");
static_assert(offsetof(WIDGET_Minimap_C_ExecuteUbergraph_WIDGET_Minimap, K2Node_Event_IsDesignTime) == 0x000004, "Member 'WIDGET_Minimap_C_ExecuteUbergraph_WIDGET_Minimap::K2Node_Event_IsDesignTime' has a wrong offset!");
static_assert(offsetof(WIDGET_Minimap_C_ExecuteUbergraph_WIDGET_Minimap, K2Node_Event_MyGeometry) == 0x000008, "Member 'WIDGET_Minimap_C_ExecuteUbergraph_WIDGET_Minimap::K2Node_Event_MyGeometry' has a wrong offset!");
static_assert(offsetof(WIDGET_Minimap_C_ExecuteUbergraph_WIDGET_Minimap, K2Node_Event_InDeltaTime) == 0x000040, "Member 'WIDGET_Minimap_C_ExecuteUbergraph_WIDGET_Minimap::K2Node_Event_InDeltaTime' has a wrong offset!");
static_assert(offsetof(WIDGET_Minimap_C_ExecuteUbergraph_WIDGET_Minimap, CallFunc_ConvertToDynamicMaterialInstance_ReturnValue) == 0x000048, "Member 'WIDGET_Minimap_C_ExecuteUbergraph_WIDGET_Minimap::CallFunc_ConvertToDynamicMaterialInstance_ReturnValue' has a wrong offset!");

// Function WIDGET_Minimap.WIDGET_Minimap_C.Tick
// 0x003C (0x003C - 0x0000)
struct WIDGET_Minimap_C_Tick final
{
public:
	struct FGeometry                              MyGeometry;                                        // 0x0000(0x0038)(BlueprintVisible, BlueprintReadOnly, Parm, IsPlainOldData, NoDestructor)
	float                                         InDeltaTime;                                       // 0x0038(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(WIDGET_Minimap_C_Tick) == 0x000004, "Wrong alignment on WIDGET_Minimap_C_Tick");
static_assert(sizeof(WIDGET_Minimap_C_Tick) == 0x00003C, "Wrong size on WIDGET_Minimap_C_Tick");
static_assert(offsetof(WIDGET_Minimap_C_Tick, MyGeometry) == 0x000000, "Member 'WIDGET_Minimap_C_Tick::MyGeometry' has a wrong offset!");
static_assert(offsetof(WIDGET_Minimap_C_Tick, InDeltaTime) == 0x000038, "Member 'WIDGET_Minimap_C_Tick::InDeltaTime' has a wrong offset!");

// Function WIDGET_Minimap.WIDGET_Minimap_C.PreConstruct
// 0x0001 (0x0001 - 0x0000)
struct WIDGET_Minimap_C_PreConstruct final
{
public:
	bool                                          IsDesignTime;                                      // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(WIDGET_Minimap_C_PreConstruct) == 0x000001, "Wrong alignment on WIDGET_Minimap_C_PreConstruct");
static_assert(sizeof(WIDGET_Minimap_C_PreConstruct) == 0x000001, "Wrong size on WIDGET_Minimap_C_PreConstruct");
static_assert(offsetof(WIDGET_Minimap_C_PreConstruct, IsDesignTime) == 0x000000, "Member 'WIDGET_Minimap_C_PreConstruct::IsDesignTime' has a wrong offset!");

// Function WIDGET_Minimap.WIDGET_Minimap_C.InitializeMinimap
// 0x0070 (0x0070 - 0x0000)
struct WIDGET_Minimap_C_InitializeMinimap final
{
public:
	class UWIDGET_PlayerHUD_C*                    HUD;                                               // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UInventoryBag_C*                        CallFunc_GetBagByType_Bag;                         // 0x0008(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TDelegate<void()>                             K2Node_CreateDelegate_OutputDelegate;              // 0x0010(0x0010)(ZeroConstructor, NoDestructor)
	class UGameInstance*                          CallFunc_GetGameInstance_ReturnValue;              // 0x0020(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TDelegate<void()>                             K2Node_CreateDelegate_OutputDelegate_1;            // 0x0028(0x0010)(ZeroConstructor, NoDestructor)
	class UGI_SinglePlayer_C*                     K2Node_DynamicCast_AsGI_Single_Player;             // 0x0038(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0040(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_41[0x3];                                       // 0x0041(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	TDelegate<void(int32 SlotIndex)>              K2Node_CreateDelegate_OutputDelegate_2;            // 0x0044(0x0010)(ZeroConstructor, NoDestructor)
	uint8                                         Pad_54[0x4];                                       // 0x0054(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UITEM_Base_C*                           CallFunc_FindItem_FoundItem;                       // 0x0058(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UHARDWARE_NavUnit_Base_C*               K2Node_DynamicCast_AsHARDWARE_Nav_Unit_Base;       // 0x0060(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess_1;                     // 0x0068(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(WIDGET_Minimap_C_InitializeMinimap) == 0x000008, "Wrong alignment on WIDGET_Minimap_C_InitializeMinimap");
static_assert(sizeof(WIDGET_Minimap_C_InitializeMinimap) == 0x000070, "Wrong size on WIDGET_Minimap_C_InitializeMinimap");
static_assert(offsetof(WIDGET_Minimap_C_InitializeMinimap, HUD) == 0x000000, "Member 'WIDGET_Minimap_C_InitializeMinimap::HUD' has a wrong offset!");
static_assert(offsetof(WIDGET_Minimap_C_InitializeMinimap, CallFunc_GetBagByType_Bag) == 0x000008, "Member 'WIDGET_Minimap_C_InitializeMinimap::CallFunc_GetBagByType_Bag' has a wrong offset!");
static_assert(offsetof(WIDGET_Minimap_C_InitializeMinimap, K2Node_CreateDelegate_OutputDelegate) == 0x000010, "Member 'WIDGET_Minimap_C_InitializeMinimap::K2Node_CreateDelegate_OutputDelegate' has a wrong offset!");
static_assert(offsetof(WIDGET_Minimap_C_InitializeMinimap, CallFunc_GetGameInstance_ReturnValue) == 0x000020, "Member 'WIDGET_Minimap_C_InitializeMinimap::CallFunc_GetGameInstance_ReturnValue' has a wrong offset!");
static_assert(offsetof(WIDGET_Minimap_C_InitializeMinimap, K2Node_CreateDelegate_OutputDelegate_1) == 0x000028, "Member 'WIDGET_Minimap_C_InitializeMinimap::K2Node_CreateDelegate_OutputDelegate_1' has a wrong offset!");
static_assert(offsetof(WIDGET_Minimap_C_InitializeMinimap, K2Node_DynamicCast_AsGI_Single_Player) == 0x000038, "Member 'WIDGET_Minimap_C_InitializeMinimap::K2Node_DynamicCast_AsGI_Single_Player' has a wrong offset!");
static_assert(offsetof(WIDGET_Minimap_C_InitializeMinimap, K2Node_DynamicCast_bSuccess) == 0x000040, "Member 'WIDGET_Minimap_C_InitializeMinimap::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(WIDGET_Minimap_C_InitializeMinimap, K2Node_CreateDelegate_OutputDelegate_2) == 0x000044, "Member 'WIDGET_Minimap_C_InitializeMinimap::K2Node_CreateDelegate_OutputDelegate_2' has a wrong offset!");
static_assert(offsetof(WIDGET_Minimap_C_InitializeMinimap, CallFunc_FindItem_FoundItem) == 0x000058, "Member 'WIDGET_Minimap_C_InitializeMinimap::CallFunc_FindItem_FoundItem' has a wrong offset!");
static_assert(offsetof(WIDGET_Minimap_C_InitializeMinimap, K2Node_DynamicCast_AsHARDWARE_Nav_Unit_Base) == 0x000060, "Member 'WIDGET_Minimap_C_InitializeMinimap::K2Node_DynamicCast_AsHARDWARE_Nav_Unit_Base' has a wrong offset!");
static_assert(offsetof(WIDGET_Minimap_C_InitializeMinimap, K2Node_DynamicCast_bSuccess_1) == 0x000068, "Member 'WIDGET_Minimap_C_InitializeMinimap::K2Node_DynamicCast_bSuccess_1' has a wrong offset!");

// Function WIDGET_Minimap.WIDGET_Minimap_C.SetMinimapVisibility
// 0x0010 (0x0010 - 0x0000)
struct WIDGET_Minimap_C_SetMinimapVisibility final
{
public:
	bool                                          Visible;                                           // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Temp_bool_Variable;                                // 0x0001(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	ESlateVisibility                              Temp_byte_Variable;                                // 0x0002(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ESlateVisibility                              Temp_byte_Variable_1;                              // 0x0003(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ESlateVisibility                              K2Node_Select_Default;                             // 0x0004(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_GetGameTimeInSeconds_ReturnValue;         // 0x0008(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BooleanAND_ReturnValue;                   // 0x000C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(WIDGET_Minimap_C_SetMinimapVisibility) == 0x000004, "Wrong alignment on WIDGET_Minimap_C_SetMinimapVisibility");
static_assert(sizeof(WIDGET_Minimap_C_SetMinimapVisibility) == 0x000010, "Wrong size on WIDGET_Minimap_C_SetMinimapVisibility");
static_assert(offsetof(WIDGET_Minimap_C_SetMinimapVisibility, Visible) == 0x000000, "Member 'WIDGET_Minimap_C_SetMinimapVisibility::Visible' has a wrong offset!");
static_assert(offsetof(WIDGET_Minimap_C_SetMinimapVisibility, Temp_bool_Variable) == 0x000001, "Member 'WIDGET_Minimap_C_SetMinimapVisibility::Temp_bool_Variable' has a wrong offset!");
static_assert(offsetof(WIDGET_Minimap_C_SetMinimapVisibility, Temp_byte_Variable) == 0x000002, "Member 'WIDGET_Minimap_C_SetMinimapVisibility::Temp_byte_Variable' has a wrong offset!");
static_assert(offsetof(WIDGET_Minimap_C_SetMinimapVisibility, Temp_byte_Variable_1) == 0x000003, "Member 'WIDGET_Minimap_C_SetMinimapVisibility::Temp_byte_Variable_1' has a wrong offset!");
static_assert(offsetof(WIDGET_Minimap_C_SetMinimapVisibility, K2Node_Select_Default) == 0x000004, "Member 'WIDGET_Minimap_C_SetMinimapVisibility::K2Node_Select_Default' has a wrong offset!");
static_assert(offsetof(WIDGET_Minimap_C_SetMinimapVisibility, CallFunc_GetGameTimeInSeconds_ReturnValue) == 0x000008, "Member 'WIDGET_Minimap_C_SetMinimapVisibility::CallFunc_GetGameTimeInSeconds_ReturnValue' has a wrong offset!");
static_assert(offsetof(WIDGET_Minimap_C_SetMinimapVisibility, CallFunc_BooleanAND_ReturnValue) == 0x00000C, "Member 'WIDGET_Minimap_C_SetMinimapVisibility::CallFunc_BooleanAND_ReturnValue' has a wrong offset!");

// Function WIDGET_Minimap.WIDGET_Minimap_C.EVENT_OnLevelChanged
// 0x0108 (0x0108 - 0x0000)
struct WIDGET_Minimap_C_EVENT_OnLevelChanged final
{
public:
	class UGameInstance*                          CallFunc_GetGameInstance_ReturnValue;              // 0x0000(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UGI_SinglePlayer_C*                     K2Node_DynamicCast_AsGI_Single_Player;             // 0x0008(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0010(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_11[0x3];                                       // 0x0011(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   CallFunc_GetCurrentLevelName_Result;               // 0x0014(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1C[0x4];                                       // 0x001C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FSTRUCT_LevelInfo                      CallFunc_GetLevelInfo_LevelInfo;                   // 0x0020(0x00C8)(HasGetValueTypeHash)
	bool                                          CallFunc_GetLevelInfo_Found;                       // 0x00E8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_E9[0x7];                                       // 0x00E9(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   CallFunc_Conv_StringToText_ReturnValue;            // 0x00F0(0x0018)()
};
static_assert(alignof(WIDGET_Minimap_C_EVENT_OnLevelChanged) == 0x000008, "Wrong alignment on WIDGET_Minimap_C_EVENT_OnLevelChanged");
static_assert(sizeof(WIDGET_Minimap_C_EVENT_OnLevelChanged) == 0x000108, "Wrong size on WIDGET_Minimap_C_EVENT_OnLevelChanged");
static_assert(offsetof(WIDGET_Minimap_C_EVENT_OnLevelChanged, CallFunc_GetGameInstance_ReturnValue) == 0x000000, "Member 'WIDGET_Minimap_C_EVENT_OnLevelChanged::CallFunc_GetGameInstance_ReturnValue' has a wrong offset!");
static_assert(offsetof(WIDGET_Minimap_C_EVENT_OnLevelChanged, K2Node_DynamicCast_AsGI_Single_Player) == 0x000008, "Member 'WIDGET_Minimap_C_EVENT_OnLevelChanged::K2Node_DynamicCast_AsGI_Single_Player' has a wrong offset!");
static_assert(offsetof(WIDGET_Minimap_C_EVENT_OnLevelChanged, K2Node_DynamicCast_bSuccess) == 0x000010, "Member 'WIDGET_Minimap_C_EVENT_OnLevelChanged::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(WIDGET_Minimap_C_EVENT_OnLevelChanged, CallFunc_GetCurrentLevelName_Result) == 0x000014, "Member 'WIDGET_Minimap_C_EVENT_OnLevelChanged::CallFunc_GetCurrentLevelName_Result' has a wrong offset!");
static_assert(offsetof(WIDGET_Minimap_C_EVENT_OnLevelChanged, CallFunc_GetLevelInfo_LevelInfo) == 0x000020, "Member 'WIDGET_Minimap_C_EVENT_OnLevelChanged::CallFunc_GetLevelInfo_LevelInfo' has a wrong offset!");
static_assert(offsetof(WIDGET_Minimap_C_EVENT_OnLevelChanged, CallFunc_GetLevelInfo_Found) == 0x0000E8, "Member 'WIDGET_Minimap_C_EVENT_OnLevelChanged::CallFunc_GetLevelInfo_Found' has a wrong offset!");
static_assert(offsetof(WIDGET_Minimap_C_EVENT_OnLevelChanged, CallFunc_Conv_StringToText_ReturnValue) == 0x0000F0, "Member 'WIDGET_Minimap_C_EVENT_OnLevelChanged::CallFunc_Conv_StringToText_ReturnValue' has a wrong offset!");

// Function WIDGET_Minimap.WIDGET_Minimap_C.EVENT_OnLevelRegionChanged
// 0x0050 (0x0050 - 0x0000)
struct WIDGET_Minimap_C_EVENT_OnLevelRegionChanged final
{
public:
	class APawn*                                  CallFunc_GetPlayerPawn_ReturnValue;                // 0x0000(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class APAWN_Hacker_Implant_C*                 K2Node_DynamicCast_AsPAWN_Hacker_Implant;          // 0x0008(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0010(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0011(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_12[0x6];                                       // 0x0012(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	struct FSTRUCT_ScannableRegionData            CallFunc_GetDataTableRowFromName_OutRow;           // 0x0018(0x0030)(HasGetValueTypeHash)
	bool                                          CallFunc_GetDataTableRowFromName_ReturnValue;      // 0x0048(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(WIDGET_Minimap_C_EVENT_OnLevelRegionChanged) == 0x000008, "Wrong alignment on WIDGET_Minimap_C_EVENT_OnLevelRegionChanged");
static_assert(sizeof(WIDGET_Minimap_C_EVENT_OnLevelRegionChanged) == 0x000050, "Wrong size on WIDGET_Minimap_C_EVENT_OnLevelRegionChanged");
static_assert(offsetof(WIDGET_Minimap_C_EVENT_OnLevelRegionChanged, CallFunc_GetPlayerPawn_ReturnValue) == 0x000000, "Member 'WIDGET_Minimap_C_EVENT_OnLevelRegionChanged::CallFunc_GetPlayerPawn_ReturnValue' has a wrong offset!");
static_assert(offsetof(WIDGET_Minimap_C_EVENT_OnLevelRegionChanged, K2Node_DynamicCast_AsPAWN_Hacker_Implant) == 0x000008, "Member 'WIDGET_Minimap_C_EVENT_OnLevelRegionChanged::K2Node_DynamicCast_AsPAWN_Hacker_Implant' has a wrong offset!");
static_assert(offsetof(WIDGET_Minimap_C_EVENT_OnLevelRegionChanged, K2Node_DynamicCast_bSuccess) == 0x000010, "Member 'WIDGET_Minimap_C_EVENT_OnLevelRegionChanged::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(WIDGET_Minimap_C_EVENT_OnLevelRegionChanged, CallFunc_IsValid_ReturnValue) == 0x000011, "Member 'WIDGET_Minimap_C_EVENT_OnLevelRegionChanged::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(WIDGET_Minimap_C_EVENT_OnLevelRegionChanged, CallFunc_GetDataTableRowFromName_OutRow) == 0x000018, "Member 'WIDGET_Minimap_C_EVENT_OnLevelRegionChanged::CallFunc_GetDataTableRowFromName_OutRow' has a wrong offset!");
static_assert(offsetof(WIDGET_Minimap_C_EVENT_OnLevelRegionChanged, CallFunc_GetDataTableRowFromName_ReturnValue) == 0x000048, "Member 'WIDGET_Minimap_C_EVENT_OnLevelRegionChanged::CallFunc_GetDataTableRowFromName_ReturnValue' has a wrong offset!");

// Function WIDGET_Minimap.WIDGET_Minimap_C.EVENT_OnHardwareBagChanged
// 0x0020 (0x0020 - 0x0000)
struct WIDGET_Minimap_C_EVENT_OnHardwareBagChanged final
{
public:
	int32                                         SlotIndex;                                         // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UITEM_Base_C*                           CallFunc_GetSlotItem_Item;                         // 0x0008(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UHARDWARE_NavUnit_Base_C*               K2Node_DynamicCast_AsHARDWARE_Nav_Unit_Base;       // 0x0010(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0018(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(WIDGET_Minimap_C_EVENT_OnHardwareBagChanged) == 0x000008, "Wrong alignment on WIDGET_Minimap_C_EVENT_OnHardwareBagChanged");
static_assert(sizeof(WIDGET_Minimap_C_EVENT_OnHardwareBagChanged) == 0x000020, "Wrong size on WIDGET_Minimap_C_EVENT_OnHardwareBagChanged");
static_assert(offsetof(WIDGET_Minimap_C_EVENT_OnHardwareBagChanged, SlotIndex) == 0x000000, "Member 'WIDGET_Minimap_C_EVENT_OnHardwareBagChanged::SlotIndex' has a wrong offset!");
static_assert(offsetof(WIDGET_Minimap_C_EVENT_OnHardwareBagChanged, CallFunc_GetSlotItem_Item) == 0x000008, "Member 'WIDGET_Minimap_C_EVENT_OnHardwareBagChanged::CallFunc_GetSlotItem_Item' has a wrong offset!");
static_assert(offsetof(WIDGET_Minimap_C_EVENT_OnHardwareBagChanged, K2Node_DynamicCast_AsHARDWARE_Nav_Unit_Base) == 0x000010, "Member 'WIDGET_Minimap_C_EVENT_OnHardwareBagChanged::K2Node_DynamicCast_AsHARDWARE_Nav_Unit_Base' has a wrong offset!");
static_assert(offsetof(WIDGET_Minimap_C_EVENT_OnHardwareBagChanged, K2Node_DynamicCast_bSuccess) == 0x000018, "Member 'WIDGET_Minimap_C_EVENT_OnHardwareBagChanged::K2Node_DynamicCast_bSuccess' has a wrong offset!");

// Function WIDGET_Minimap.WIDGET_Minimap_C.EVENT_OnHardwareStateChanged
// 0x0004 (0x0004 - 0x0000)
struct WIDGET_Minimap_C_EVENT_OnHardwareStateChanged final
{
public:
	bool                                          Activated;                                         // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          MagLocked;                                         // 0x0001(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Not_PreBool_ReturnValue;                  // 0x0002(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BooleanAND_ReturnValue;                   // 0x0003(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(WIDGET_Minimap_C_EVENT_OnHardwareStateChanged) == 0x000001, "Wrong alignment on WIDGET_Minimap_C_EVENT_OnHardwareStateChanged");
static_assert(sizeof(WIDGET_Minimap_C_EVENT_OnHardwareStateChanged) == 0x000004, "Wrong size on WIDGET_Minimap_C_EVENT_OnHardwareStateChanged");
static_assert(offsetof(WIDGET_Minimap_C_EVENT_OnHardwareStateChanged, Activated) == 0x000000, "Member 'WIDGET_Minimap_C_EVENT_OnHardwareStateChanged::Activated' has a wrong offset!");
static_assert(offsetof(WIDGET_Minimap_C_EVENT_OnHardwareStateChanged, MagLocked) == 0x000001, "Member 'WIDGET_Minimap_C_EVENT_OnHardwareStateChanged::MagLocked' has a wrong offset!");
static_assert(offsetof(WIDGET_Minimap_C_EVENT_OnHardwareStateChanged, CallFunc_Not_PreBool_ReturnValue) == 0x000002, "Member 'WIDGET_Minimap_C_EVENT_OnHardwareStateChanged::CallFunc_Not_PreBool_ReturnValue' has a wrong offset!");
static_assert(offsetof(WIDGET_Minimap_C_EVENT_OnHardwareStateChanged, CallFunc_BooleanAND_ReturnValue) == 0x000003, "Member 'WIDGET_Minimap_C_EVENT_OnHardwareStateChanged::CallFunc_BooleanAND_ReturnValue' has a wrong offset!");

// Function WIDGET_Minimap.WIDGET_Minimap_C.UpdateMinimap
// 0x0068 (0x0068 - 0x0000)
struct WIDGET_Minimap_C_UpdateMinimap final
{
public:
	float                                         FadeInProgress;                                    // 0x0000(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class USceneCaptureComponent2D*               MinimapCaptureComponent;                           // 0x0008(0x0008)(Edit, BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UCOMP_VoxelScanner_C*                   ScannerComponent;                                  // 0x0010(0x0008)(Edit, BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Variable;                                // 0x0018(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_19[0x7];                                       // 0x0019(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UMaterialInterface*                     Temp_object_Variable;                              // 0x0020(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UMaterialInterface*                     Temp_object_Variable_1;                            // 0x0028(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0030(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_31[0x7];                                       // 0x0031(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class USceneCaptureComponent2D*               CallFunc_GetSceneCaptureComponent_ReturnValue;     // 0x0038(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_GetPrimarySceneCaptureRotationFollowsOwner_ReturnValue; // 0x0040(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Not_PreBool_ReturnValue;                  // 0x0041(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_42[0x6];                                       // 0x0042(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class UMaterialInterface*                     K2Node_Select_Default;                             // 0x0048(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_GreaterEqual_FloatFloat_ReturnValue;      // 0x0050(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_51[0x3];                                       // 0x0051(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_GetGameTimeInSeconds_ReturnValue;         // 0x0054(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Subtract_FloatFloat_ReturnValue;          // 0x0058(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Greater_FloatFloat_ReturnValue;           // 0x005C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_5D[0x3];                                       // 0x005D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_Divide_FloatFloat_ReturnValue;            // 0x0060(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_FMin_ReturnValue;                         // 0x0064(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(WIDGET_Minimap_C_UpdateMinimap) == 0x000008, "Wrong alignment on WIDGET_Minimap_C_UpdateMinimap");
static_assert(sizeof(WIDGET_Minimap_C_UpdateMinimap) == 0x000068, "Wrong size on WIDGET_Minimap_C_UpdateMinimap");
static_assert(offsetof(WIDGET_Minimap_C_UpdateMinimap, FadeInProgress) == 0x000000, "Member 'WIDGET_Minimap_C_UpdateMinimap::FadeInProgress' has a wrong offset!");
static_assert(offsetof(WIDGET_Minimap_C_UpdateMinimap, MinimapCaptureComponent) == 0x000008, "Member 'WIDGET_Minimap_C_UpdateMinimap::MinimapCaptureComponent' has a wrong offset!");
static_assert(offsetof(WIDGET_Minimap_C_UpdateMinimap, ScannerComponent) == 0x000010, "Member 'WIDGET_Minimap_C_UpdateMinimap::ScannerComponent' has a wrong offset!");
static_assert(offsetof(WIDGET_Minimap_C_UpdateMinimap, Temp_bool_Variable) == 0x000018, "Member 'WIDGET_Minimap_C_UpdateMinimap::Temp_bool_Variable' has a wrong offset!");
static_assert(offsetof(WIDGET_Minimap_C_UpdateMinimap, Temp_object_Variable) == 0x000020, "Member 'WIDGET_Minimap_C_UpdateMinimap::Temp_object_Variable' has a wrong offset!");
static_assert(offsetof(WIDGET_Minimap_C_UpdateMinimap, Temp_object_Variable_1) == 0x000028, "Member 'WIDGET_Minimap_C_UpdateMinimap::Temp_object_Variable_1' has a wrong offset!");
static_assert(offsetof(WIDGET_Minimap_C_UpdateMinimap, CallFunc_IsValid_ReturnValue) == 0x000030, "Member 'WIDGET_Minimap_C_UpdateMinimap::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(WIDGET_Minimap_C_UpdateMinimap, CallFunc_GetSceneCaptureComponent_ReturnValue) == 0x000038, "Member 'WIDGET_Minimap_C_UpdateMinimap::CallFunc_GetSceneCaptureComponent_ReturnValue' has a wrong offset!");
static_assert(offsetof(WIDGET_Minimap_C_UpdateMinimap, CallFunc_GetPrimarySceneCaptureRotationFollowsOwner_ReturnValue) == 0x000040, "Member 'WIDGET_Minimap_C_UpdateMinimap::CallFunc_GetPrimarySceneCaptureRotationFollowsOwner_ReturnValue' has a wrong offset!");
static_assert(offsetof(WIDGET_Minimap_C_UpdateMinimap, CallFunc_Not_PreBool_ReturnValue) == 0x000041, "Member 'WIDGET_Minimap_C_UpdateMinimap::CallFunc_Not_PreBool_ReturnValue' has a wrong offset!");
static_assert(offsetof(WIDGET_Minimap_C_UpdateMinimap, K2Node_Select_Default) == 0x000048, "Member 'WIDGET_Minimap_C_UpdateMinimap::K2Node_Select_Default' has a wrong offset!");
static_assert(offsetof(WIDGET_Minimap_C_UpdateMinimap, CallFunc_GreaterEqual_FloatFloat_ReturnValue) == 0x000050, "Member 'WIDGET_Minimap_C_UpdateMinimap::CallFunc_GreaterEqual_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(WIDGET_Minimap_C_UpdateMinimap, CallFunc_GetGameTimeInSeconds_ReturnValue) == 0x000054, "Member 'WIDGET_Minimap_C_UpdateMinimap::CallFunc_GetGameTimeInSeconds_ReturnValue' has a wrong offset!");
static_assert(offsetof(WIDGET_Minimap_C_UpdateMinimap, CallFunc_Subtract_FloatFloat_ReturnValue) == 0x000058, "Member 'WIDGET_Minimap_C_UpdateMinimap::CallFunc_Subtract_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(WIDGET_Minimap_C_UpdateMinimap, CallFunc_Greater_FloatFloat_ReturnValue) == 0x00005C, "Member 'WIDGET_Minimap_C_UpdateMinimap::CallFunc_Greater_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(WIDGET_Minimap_C_UpdateMinimap, CallFunc_Divide_FloatFloat_ReturnValue) == 0x000060, "Member 'WIDGET_Minimap_C_UpdateMinimap::CallFunc_Divide_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(WIDGET_Minimap_C_UpdateMinimap, CallFunc_FMin_ReturnValue) == 0x000064, "Member 'WIDGET_Minimap_C_UpdateMinimap::CallFunc_FMin_ReturnValue' has a wrong offset!");

// Function WIDGET_Minimap.WIDGET_Minimap_C.SetHardwareItem
// 0x0038 (0x0038 - 0x0000)
struct WIDGET_Minimap_C_SetHardwareItem final
{
public:
	class UHARDWARE_NavUnit_Base_C*               Item;                                              // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          HadHardwareItem;                                   // 0x0008(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          ShouldBeVisible;                                   // 0x0009(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_A[0x2];                                        // 0x000A(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	TDelegate<void(bool Activated, bool MagLocked)> K2Node_CreateDelegate_OutputDelegate;              // 0x000C(0x0010)(ZeroConstructor, NoDestructor)
	bool                                          CallFunc_GetIsActivated_Result;                    // 0x001C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x001D(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_1E[0x2];                                       // 0x001E(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	TDelegate<void(bool Activated, bool MagLocked)> K2Node_CreateDelegate_OutputDelegate_1;            // 0x0020(0x0010)(ZeroConstructor, NoDestructor)
	bool                                          CallFunc_IsValid_ReturnValue_1;                    // 0x0030(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(WIDGET_Minimap_C_SetHardwareItem) == 0x000008, "Wrong alignment on WIDGET_Minimap_C_SetHardwareItem");
static_assert(sizeof(WIDGET_Minimap_C_SetHardwareItem) == 0x000038, "Wrong size on WIDGET_Minimap_C_SetHardwareItem");
static_assert(offsetof(WIDGET_Minimap_C_SetHardwareItem, Item) == 0x000000, "Member 'WIDGET_Minimap_C_SetHardwareItem::Item' has a wrong offset!");
static_assert(offsetof(WIDGET_Minimap_C_SetHardwareItem, HadHardwareItem) == 0x000008, "Member 'WIDGET_Minimap_C_SetHardwareItem::HadHardwareItem' has a wrong offset!");
static_assert(offsetof(WIDGET_Minimap_C_SetHardwareItem, ShouldBeVisible) == 0x000009, "Member 'WIDGET_Minimap_C_SetHardwareItem::ShouldBeVisible' has a wrong offset!");
static_assert(offsetof(WIDGET_Minimap_C_SetHardwareItem, K2Node_CreateDelegate_OutputDelegate) == 0x00000C, "Member 'WIDGET_Minimap_C_SetHardwareItem::K2Node_CreateDelegate_OutputDelegate' has a wrong offset!");
static_assert(offsetof(WIDGET_Minimap_C_SetHardwareItem, CallFunc_GetIsActivated_Result) == 0x00001C, "Member 'WIDGET_Minimap_C_SetHardwareItem::CallFunc_GetIsActivated_Result' has a wrong offset!");
static_assert(offsetof(WIDGET_Minimap_C_SetHardwareItem, CallFunc_IsValid_ReturnValue) == 0x00001D, "Member 'WIDGET_Minimap_C_SetHardwareItem::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(WIDGET_Minimap_C_SetHardwareItem, K2Node_CreateDelegate_OutputDelegate_1) == 0x000020, "Member 'WIDGET_Minimap_C_SetHardwareItem::K2Node_CreateDelegate_OutputDelegate_1' has a wrong offset!");
static_assert(offsetof(WIDGET_Minimap_C_SetHardwareItem, CallFunc_IsValid_ReturnValue_1) == 0x000030, "Member 'WIDGET_Minimap_C_SetHardwareItem::CallFunc_IsValid_ReturnValue_1' has a wrong offset!");

// Function WIDGET_Minimap.WIDGET_Minimap_C.DisableFlickerEffect
// 0x0001 (0x0001 - 0x0000)
struct WIDGET_Minimap_C_DisableFlickerEffect final
{
public:
	bool                                          Result;                                            // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(WIDGET_Minimap_C_DisableFlickerEffect) == 0x000001, "Wrong alignment on WIDGET_Minimap_C_DisableFlickerEffect");
static_assert(sizeof(WIDGET_Minimap_C_DisableFlickerEffect) == 0x000001, "Wrong size on WIDGET_Minimap_C_DisableFlickerEffect");
static_assert(offsetof(WIDGET_Minimap_C_DisableFlickerEffect, Result) == 0x000000, "Member 'WIDGET_Minimap_C_DisableFlickerEffect::Result' has a wrong offset!");

// Function WIDGET_Minimap.WIDGET_Minimap_C.EnableFlickerEffect
// 0x0001 (0x0001 - 0x0000)
struct WIDGET_Minimap_C_EnableFlickerEffect final
{
public:
	bool                                          Result;                                            // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(WIDGET_Minimap_C_EnableFlickerEffect) == 0x000001, "Wrong alignment on WIDGET_Minimap_C_EnableFlickerEffect");
static_assert(sizeof(WIDGET_Minimap_C_EnableFlickerEffect) == 0x000001, "Wrong size on WIDGET_Minimap_C_EnableFlickerEffect");
static_assert(offsetof(WIDGET_Minimap_C_EnableFlickerEffect, Result) == 0x000000, "Member 'WIDGET_Minimap_C_EnableFlickerEffect::Result' has a wrong offset!");

// Function WIDGET_Minimap.WIDGET_Minimap_C.OnMouseExit
// 0x0001 (0x0001 - 0x0000)
struct WIDGET_Minimap_C_OnMouseExit final
{
public:
	bool                                          Result;                                            // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(WIDGET_Minimap_C_OnMouseExit) == 0x000001, "Wrong alignment on WIDGET_Minimap_C_OnMouseExit");
static_assert(sizeof(WIDGET_Minimap_C_OnMouseExit) == 0x000001, "Wrong size on WIDGET_Minimap_C_OnMouseExit");
static_assert(offsetof(WIDGET_Minimap_C_OnMouseExit, Result) == 0x000000, "Member 'WIDGET_Minimap_C_OnMouseExit::Result' has a wrong offset!");

// Function WIDGET_Minimap.WIDGET_Minimap_C.OnMouseOver
// 0x0001 (0x0001 - 0x0000)
struct WIDGET_Minimap_C_OnMouseOver final
{
public:
	bool                                          Result;                                            // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(WIDGET_Minimap_C_OnMouseOver) == 0x000001, "Wrong alignment on WIDGET_Minimap_C_OnMouseOver");
static_assert(sizeof(WIDGET_Minimap_C_OnMouseOver) == 0x000001, "Wrong size on WIDGET_Minimap_C_OnMouseOver");
static_assert(offsetof(WIDGET_Minimap_C_OnMouseOver, Result) == 0x000000, "Member 'WIDGET_Minimap_C_OnMouseOver::Result' has a wrong offset!");

// Function WIDGET_Minimap.WIDGET_Minimap_C.GetMeshWidget
// 0x0008 (0x0008 - 0x0000)
struct WIDGET_Minimap_C_GetMeshWidget final
{
public:
	class UGridMeshWidget*                        Result;                                            // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(WIDGET_Minimap_C_GetMeshWidget) == 0x000008, "Wrong alignment on WIDGET_Minimap_C_GetMeshWidget");
static_assert(sizeof(WIDGET_Minimap_C_GetMeshWidget) == 0x000008, "Wrong size on WIDGET_Minimap_C_GetMeshWidget");
static_assert(offsetof(WIDGET_Minimap_C_GetMeshWidget, Result) == 0x000000, "Member 'WIDGET_Minimap_C_GetMeshWidget::Result' has a wrong offset!");

}

