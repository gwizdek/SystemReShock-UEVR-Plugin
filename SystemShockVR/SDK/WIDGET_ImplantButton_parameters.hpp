#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: WIDGET_ImplantButton

#include "Basic.hpp"

#include "SystemReShock_structs.hpp"
#include "UMG_structs.hpp"
#include "Engine_structs.hpp"
#include "Slate_structs.hpp"
#include "SlateCore_structs.hpp"
#include "CoreUObject_structs.hpp"


namespace SDK::Params
{

// Function WIDGET_ImplantButton.WIDGET_ImplantButton_C.ExecuteUbergraph_WIDGET_ImplantButton
// 0x00A0 (0x00A0 - 0x0000)
struct WIDGET_ImplantButton_C_ExecuteUbergraph_WIDGET_ImplantButton final
{
public:
	int32                                         EntryPoint;                                        // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Variable;                                // 0x0004(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         Temp_float_Variable;                               // 0x0008(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Temp_float_Variable_1;                             // 0x000C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Variable_1;                              // 0x0010(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Temp_bool_Variable_2;                              // 0x0011(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_12[0x2];                                       // 0x0012(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         Temp_float_Variable_2;                             // 0x0014(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Temp_float_Variable_3;                             // 0x0018(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Variable_3;                              // 0x001C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	ETextMeshWidgetHorizontalAligment             Temp_byte_Variable;                                // 0x001D(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ETextMeshWidgetHorizontalAligment             Temp_byte_Variable_1;                              // 0x001E(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_Event_IsDesignTime;                         // 0x001F(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	ETextMeshWidgetHorizontalAligment             K2Node_Select_Default;                             // 0x0020(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_21[0x7];                                       // 0x0021(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UCanvasPanelSlot*                       CallFunc_SlotAsCanvasSlot_ReturnValue;             // 0x0028(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         K2Node_Select_Default_1;                           // 0x0030(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_34[0x4];                                       // 0x0034(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UCanvasPanelSlot*                       CallFunc_SlotAsCanvasSlot_ReturnValue_1;           // 0x0038(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector2D                              CallFunc_MakeVector2D_ReturnValue;                 // 0x0040(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FAnchors                               K2Node_MakeStruct_Anchors;                         // 0x0048(0x0010)(NoDestructor)
	struct FAnchors                               K2Node_MakeStruct_Anchors_1;                       // 0x0058(0x0010)(NoDestructor)
	struct FAnchors                               K2Node_Select_Default_2;                           // 0x0068(0x0010)(NoDestructor)
	class UCanvasPanelSlot*                       CallFunc_SlotAsCanvasSlot_ReturnValue_2;           // 0x0078(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UCanvasPanelSlot*                       CallFunc_SlotAsCanvasSlot_ReturnValue_3;           // 0x0080(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         K2Node_Select_Default_3;                           // 0x0088(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector2D                              CallFunc_MakeVector2D_ReturnValue_1;               // 0x008C(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_94[0x4];                                       // 0x0094(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UCanvasPanelSlot*                       CallFunc_SlotAsCanvasSlot_ReturnValue_4;           // 0x0098(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(WIDGET_ImplantButton_C_ExecuteUbergraph_WIDGET_ImplantButton) == 0x000008, "Wrong alignment on WIDGET_ImplantButton_C_ExecuteUbergraph_WIDGET_ImplantButton");
static_assert(sizeof(WIDGET_ImplantButton_C_ExecuteUbergraph_WIDGET_ImplantButton) == 0x0000A0, "Wrong size on WIDGET_ImplantButton_C_ExecuteUbergraph_WIDGET_ImplantButton");
static_assert(offsetof(WIDGET_ImplantButton_C_ExecuteUbergraph_WIDGET_ImplantButton, EntryPoint) == 0x000000, "Member 'WIDGET_ImplantButton_C_ExecuteUbergraph_WIDGET_ImplantButton::EntryPoint' has a wrong offset!");
static_assert(offsetof(WIDGET_ImplantButton_C_ExecuteUbergraph_WIDGET_ImplantButton, Temp_bool_Variable) == 0x000004, "Member 'WIDGET_ImplantButton_C_ExecuteUbergraph_WIDGET_ImplantButton::Temp_bool_Variable' has a wrong offset!");
static_assert(offsetof(WIDGET_ImplantButton_C_ExecuteUbergraph_WIDGET_ImplantButton, Temp_float_Variable) == 0x000008, "Member 'WIDGET_ImplantButton_C_ExecuteUbergraph_WIDGET_ImplantButton::Temp_float_Variable' has a wrong offset!");
static_assert(offsetof(WIDGET_ImplantButton_C_ExecuteUbergraph_WIDGET_ImplantButton, Temp_float_Variable_1) == 0x00000C, "Member 'WIDGET_ImplantButton_C_ExecuteUbergraph_WIDGET_ImplantButton::Temp_float_Variable_1' has a wrong offset!");
static_assert(offsetof(WIDGET_ImplantButton_C_ExecuteUbergraph_WIDGET_ImplantButton, Temp_bool_Variable_1) == 0x000010, "Member 'WIDGET_ImplantButton_C_ExecuteUbergraph_WIDGET_ImplantButton::Temp_bool_Variable_1' has a wrong offset!");
static_assert(offsetof(WIDGET_ImplantButton_C_ExecuteUbergraph_WIDGET_ImplantButton, Temp_bool_Variable_2) == 0x000011, "Member 'WIDGET_ImplantButton_C_ExecuteUbergraph_WIDGET_ImplantButton::Temp_bool_Variable_2' has a wrong offset!");
static_assert(offsetof(WIDGET_ImplantButton_C_ExecuteUbergraph_WIDGET_ImplantButton, Temp_float_Variable_2) == 0x000014, "Member 'WIDGET_ImplantButton_C_ExecuteUbergraph_WIDGET_ImplantButton::Temp_float_Variable_2' has a wrong offset!");
static_assert(offsetof(WIDGET_ImplantButton_C_ExecuteUbergraph_WIDGET_ImplantButton, Temp_float_Variable_3) == 0x000018, "Member 'WIDGET_ImplantButton_C_ExecuteUbergraph_WIDGET_ImplantButton::Temp_float_Variable_3' has a wrong offset!");
static_assert(offsetof(WIDGET_ImplantButton_C_ExecuteUbergraph_WIDGET_ImplantButton, Temp_bool_Variable_3) == 0x00001C, "Member 'WIDGET_ImplantButton_C_ExecuteUbergraph_WIDGET_ImplantButton::Temp_bool_Variable_3' has a wrong offset!");
static_assert(offsetof(WIDGET_ImplantButton_C_ExecuteUbergraph_WIDGET_ImplantButton, Temp_byte_Variable) == 0x00001D, "Member 'WIDGET_ImplantButton_C_ExecuteUbergraph_WIDGET_ImplantButton::Temp_byte_Variable' has a wrong offset!");
static_assert(offsetof(WIDGET_ImplantButton_C_ExecuteUbergraph_WIDGET_ImplantButton, Temp_byte_Variable_1) == 0x00001E, "Member 'WIDGET_ImplantButton_C_ExecuteUbergraph_WIDGET_ImplantButton::Temp_byte_Variable_1' has a wrong offset!");
static_assert(offsetof(WIDGET_ImplantButton_C_ExecuteUbergraph_WIDGET_ImplantButton, K2Node_Event_IsDesignTime) == 0x00001F, "Member 'WIDGET_ImplantButton_C_ExecuteUbergraph_WIDGET_ImplantButton::K2Node_Event_IsDesignTime' has a wrong offset!");
static_assert(offsetof(WIDGET_ImplantButton_C_ExecuteUbergraph_WIDGET_ImplantButton, K2Node_Select_Default) == 0x000020, "Member 'WIDGET_ImplantButton_C_ExecuteUbergraph_WIDGET_ImplantButton::K2Node_Select_Default' has a wrong offset!");
static_assert(offsetof(WIDGET_ImplantButton_C_ExecuteUbergraph_WIDGET_ImplantButton, CallFunc_SlotAsCanvasSlot_ReturnValue) == 0x000028, "Member 'WIDGET_ImplantButton_C_ExecuteUbergraph_WIDGET_ImplantButton::CallFunc_SlotAsCanvasSlot_ReturnValue' has a wrong offset!");
static_assert(offsetof(WIDGET_ImplantButton_C_ExecuteUbergraph_WIDGET_ImplantButton, K2Node_Select_Default_1) == 0x000030, "Member 'WIDGET_ImplantButton_C_ExecuteUbergraph_WIDGET_ImplantButton::K2Node_Select_Default_1' has a wrong offset!");
static_assert(offsetof(WIDGET_ImplantButton_C_ExecuteUbergraph_WIDGET_ImplantButton, CallFunc_SlotAsCanvasSlot_ReturnValue_1) == 0x000038, "Member 'WIDGET_ImplantButton_C_ExecuteUbergraph_WIDGET_ImplantButton::CallFunc_SlotAsCanvasSlot_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(WIDGET_ImplantButton_C_ExecuteUbergraph_WIDGET_ImplantButton, CallFunc_MakeVector2D_ReturnValue) == 0x000040, "Member 'WIDGET_ImplantButton_C_ExecuteUbergraph_WIDGET_ImplantButton::CallFunc_MakeVector2D_ReturnValue' has a wrong offset!");
static_assert(offsetof(WIDGET_ImplantButton_C_ExecuteUbergraph_WIDGET_ImplantButton, K2Node_MakeStruct_Anchors) == 0x000048, "Member 'WIDGET_ImplantButton_C_ExecuteUbergraph_WIDGET_ImplantButton::K2Node_MakeStruct_Anchors' has a wrong offset!");
static_assert(offsetof(WIDGET_ImplantButton_C_ExecuteUbergraph_WIDGET_ImplantButton, K2Node_MakeStruct_Anchors_1) == 0x000058, "Member 'WIDGET_ImplantButton_C_ExecuteUbergraph_WIDGET_ImplantButton::K2Node_MakeStruct_Anchors_1' has a wrong offset!");
static_assert(offsetof(WIDGET_ImplantButton_C_ExecuteUbergraph_WIDGET_ImplantButton, K2Node_Select_Default_2) == 0x000068, "Member 'WIDGET_ImplantButton_C_ExecuteUbergraph_WIDGET_ImplantButton::K2Node_Select_Default_2' has a wrong offset!");
static_assert(offsetof(WIDGET_ImplantButton_C_ExecuteUbergraph_WIDGET_ImplantButton, CallFunc_SlotAsCanvasSlot_ReturnValue_2) == 0x000078, "Member 'WIDGET_ImplantButton_C_ExecuteUbergraph_WIDGET_ImplantButton::CallFunc_SlotAsCanvasSlot_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(WIDGET_ImplantButton_C_ExecuteUbergraph_WIDGET_ImplantButton, CallFunc_SlotAsCanvasSlot_ReturnValue_3) == 0x000080, "Member 'WIDGET_ImplantButton_C_ExecuteUbergraph_WIDGET_ImplantButton::CallFunc_SlotAsCanvasSlot_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(WIDGET_ImplantButton_C_ExecuteUbergraph_WIDGET_ImplantButton, K2Node_Select_Default_3) == 0x000088, "Member 'WIDGET_ImplantButton_C_ExecuteUbergraph_WIDGET_ImplantButton::K2Node_Select_Default_3' has a wrong offset!");
static_assert(offsetof(WIDGET_ImplantButton_C_ExecuteUbergraph_WIDGET_ImplantButton, CallFunc_MakeVector2D_ReturnValue_1) == 0x00008C, "Member 'WIDGET_ImplantButton_C_ExecuteUbergraph_WIDGET_ImplantButton::CallFunc_MakeVector2D_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(WIDGET_ImplantButton_C_ExecuteUbergraph_WIDGET_ImplantButton, CallFunc_SlotAsCanvasSlot_ReturnValue_4) == 0x000098, "Member 'WIDGET_ImplantButton_C_ExecuteUbergraph_WIDGET_ImplantButton::CallFunc_SlotAsCanvasSlot_ReturnValue_4' has a wrong offset!");

// Function WIDGET_ImplantButton.WIDGET_ImplantButton_C.PreConstruct
// 0x0001 (0x0001 - 0x0000)
struct WIDGET_ImplantButton_C_PreConstruct final
{
public:
	bool                                          IsDesignTime;                                      // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(WIDGET_ImplantButton_C_PreConstruct) == 0x000001, "Wrong alignment on WIDGET_ImplantButton_C_PreConstruct");
static_assert(sizeof(WIDGET_ImplantButton_C_PreConstruct) == 0x000001, "Wrong size on WIDGET_ImplantButton_C_PreConstruct");
static_assert(offsetof(WIDGET_ImplantButton_C_PreConstruct, IsDesignTime) == 0x000000, "Member 'WIDGET_ImplantButton_C_PreConstruct::IsDesignTime' has a wrong offset!");

// Function WIDGET_ImplantButton.WIDGET_ImplantButton_C.InitializeImpantButton
// 0x0030 (0x0030 - 0x0000)
struct WIDGET_ImplantButton_C_InitializeImpantButton final
{
public:
	class UWIDGET_PlayerHUD_C*                    PlayerHUD_0;                                       // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_GetIsActivated_Result;                    // 0x0008(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0009(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_A[0x6];                                        // 0x000A(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class UITEM_HardwareBase_C*                   CallFunc_FindHardwareItem_Item;                    // 0x0010(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UInventoryBag_C*                        CallFunc_FindHardwareBag_Bag;                      // 0x0018(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TDelegate<void(int32 SlotIndex)>              K2Node_CreateDelegate_OutputDelegate;              // 0x0020(0x0010)(ZeroConstructor, NoDestructor)
};
static_assert(alignof(WIDGET_ImplantButton_C_InitializeImpantButton) == 0x000008, "Wrong alignment on WIDGET_ImplantButton_C_InitializeImpantButton");
static_assert(sizeof(WIDGET_ImplantButton_C_InitializeImpantButton) == 0x000030, "Wrong size on WIDGET_ImplantButton_C_InitializeImpantButton");
static_assert(offsetof(WIDGET_ImplantButton_C_InitializeImpantButton, PlayerHUD_0) == 0x000000, "Member 'WIDGET_ImplantButton_C_InitializeImpantButton::PlayerHUD_0' has a wrong offset!");
static_assert(offsetof(WIDGET_ImplantButton_C_InitializeImpantButton, CallFunc_GetIsActivated_Result) == 0x000008, "Member 'WIDGET_ImplantButton_C_InitializeImpantButton::CallFunc_GetIsActivated_Result' has a wrong offset!");
static_assert(offsetof(WIDGET_ImplantButton_C_InitializeImpantButton, CallFunc_IsValid_ReturnValue) == 0x000009, "Member 'WIDGET_ImplantButton_C_InitializeImpantButton::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(WIDGET_ImplantButton_C_InitializeImpantButton, CallFunc_FindHardwareItem_Item) == 0x000010, "Member 'WIDGET_ImplantButton_C_InitializeImpantButton::CallFunc_FindHardwareItem_Item' has a wrong offset!");
static_assert(offsetof(WIDGET_ImplantButton_C_InitializeImpantButton, CallFunc_FindHardwareBag_Bag) == 0x000018, "Member 'WIDGET_ImplantButton_C_InitializeImpantButton::CallFunc_FindHardwareBag_Bag' has a wrong offset!");
static_assert(offsetof(WIDGET_ImplantButton_C_InitializeImpantButton, K2Node_CreateDelegate_OutputDelegate) == 0x000020, "Member 'WIDGET_ImplantButton_C_InitializeImpantButton::K2Node_CreateDelegate_OutputDelegate' has a wrong offset!");

// Function WIDGET_ImplantButton.WIDGET_ImplantButton_C.EVENT_OnMouseEnter
// 0x00A8 (0x00A8 - 0x0000)
struct WIDGET_ImplantButton_C_EVENT_OnMouseEnter final
{
public:
	struct FGeometry                              MyGeometry;                                        // 0x0000(0x0038)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor)
	struct FPointerEvent                          MouseEvent;                                        // 0x0038(0x0070)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
};
static_assert(alignof(WIDGET_ImplantButton_C_EVENT_OnMouseEnter) == 0x000008, "Wrong alignment on WIDGET_ImplantButton_C_EVENT_OnMouseEnter");
static_assert(sizeof(WIDGET_ImplantButton_C_EVENT_OnMouseEnter) == 0x0000A8, "Wrong size on WIDGET_ImplantButton_C_EVENT_OnMouseEnter");
static_assert(offsetof(WIDGET_ImplantButton_C_EVENT_OnMouseEnter, MyGeometry) == 0x000000, "Member 'WIDGET_ImplantButton_C_EVENT_OnMouseEnter::MyGeometry' has a wrong offset!");
static_assert(offsetof(WIDGET_ImplantButton_C_EVENT_OnMouseEnter, MouseEvent) == 0x000038, "Member 'WIDGET_ImplantButton_C_EVENT_OnMouseEnter::MouseEvent' has a wrong offset!");

// Function WIDGET_ImplantButton.WIDGET_ImplantButton_C.EVENT_OnMouseLeave
// 0x0070 (0x0070 - 0x0000)
struct WIDGET_ImplantButton_C_EVENT_OnMouseLeave final
{
public:
	struct FPointerEvent                          MouseEvent;                                        // 0x0000(0x0070)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
};
static_assert(alignof(WIDGET_ImplantButton_C_EVENT_OnMouseLeave) == 0x000008, "Wrong alignment on WIDGET_ImplantButton_C_EVENT_OnMouseLeave");
static_assert(sizeof(WIDGET_ImplantButton_C_EVENT_OnMouseLeave) == 0x000070, "Wrong size on WIDGET_ImplantButton_C_EVENT_OnMouseLeave");
static_assert(offsetof(WIDGET_ImplantButton_C_EVENT_OnMouseLeave, MouseEvent) == 0x000000, "Member 'WIDGET_ImplantButton_C_EVENT_OnMouseLeave::MouseEvent' has a wrong offset!");

// Function WIDGET_ImplantButton.WIDGET_ImplantButton_C.EVENT_OnMouseDown
// 0x0230 (0x0230 - 0x0000)
struct WIDGET_ImplantButton_C_EVENT_OnMouseDown final
{
public:
	struct FGeometry                              MyGeometry;                                        // 0x0000(0x0038)(BlueprintVisible, BlueprintReadOnly, Parm, IsPlainOldData, NoDestructor)
	struct FPointerEvent                          MouseEvent;                                        // 0x0038(0x0070)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
	struct FEventReply                            ReturnValue;                                       // 0x00A8(0x00B8)(Parm, OutParm, ReturnParm)
	class UITEM_HardwareBase_C*                   Item;                                              // 0x0160(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_ToggleHardware_State;                     // 0x0168(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0169(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_16A[0x6];                                      // 0x016A(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class UITEM_HardwareBase_C*                   CallFunc_FindHardwareItem_Item;                    // 0x0170(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FEventReply                            CallFunc_Handled_ReturnValue;                      // 0x0178(0x00B8)()
};
static_assert(alignof(WIDGET_ImplantButton_C_EVENT_OnMouseDown) == 0x000008, "Wrong alignment on WIDGET_ImplantButton_C_EVENT_OnMouseDown");
static_assert(sizeof(WIDGET_ImplantButton_C_EVENT_OnMouseDown) == 0x000230, "Wrong size on WIDGET_ImplantButton_C_EVENT_OnMouseDown");
static_assert(offsetof(WIDGET_ImplantButton_C_EVENT_OnMouseDown, MyGeometry) == 0x000000, "Member 'WIDGET_ImplantButton_C_EVENT_OnMouseDown::MyGeometry' has a wrong offset!");
static_assert(offsetof(WIDGET_ImplantButton_C_EVENT_OnMouseDown, MouseEvent) == 0x000038, "Member 'WIDGET_ImplantButton_C_EVENT_OnMouseDown::MouseEvent' has a wrong offset!");
static_assert(offsetof(WIDGET_ImplantButton_C_EVENT_OnMouseDown, ReturnValue) == 0x0000A8, "Member 'WIDGET_ImplantButton_C_EVENT_OnMouseDown::ReturnValue' has a wrong offset!");
static_assert(offsetof(WIDGET_ImplantButton_C_EVENT_OnMouseDown, Item) == 0x000160, "Member 'WIDGET_ImplantButton_C_EVENT_OnMouseDown::Item' has a wrong offset!");
static_assert(offsetof(WIDGET_ImplantButton_C_EVENT_OnMouseDown, CallFunc_ToggleHardware_State) == 0x000168, "Member 'WIDGET_ImplantButton_C_EVENT_OnMouseDown::CallFunc_ToggleHardware_State' has a wrong offset!");
static_assert(offsetof(WIDGET_ImplantButton_C_EVENT_OnMouseDown, CallFunc_IsValid_ReturnValue) == 0x000169, "Member 'WIDGET_ImplantButton_C_EVENT_OnMouseDown::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(WIDGET_ImplantButton_C_EVENT_OnMouseDown, CallFunc_FindHardwareItem_Item) == 0x000170, "Member 'WIDGET_ImplantButton_C_EVENT_OnMouseDown::CallFunc_FindHardwareItem_Item' has a wrong offset!");
static_assert(offsetof(WIDGET_ImplantButton_C_EVENT_OnMouseDown, CallFunc_Handled_ReturnValue) == 0x000178, "Member 'WIDGET_ImplantButton_C_EVENT_OnMouseDown::CallFunc_Handled_ReturnValue' has a wrong offset!");

// Function WIDGET_ImplantButton.WIDGET_ImplantButton_C.EVENT_OnBagChanged
// 0x0048 (0x0048 - 0x0000)
struct WIDGET_ImplantButton_C_EVENT_OnBagChanged final
{
public:
	int32                                         Slot_0;                                            // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          HadHardwareItem;                                   // 0x0004(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class UITEM_HardwareBase_C*                   ModifiedItem;                                      // 0x0008(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Not_PreBool_ReturnValue;                  // 0x0010(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_GetIsActivated_Result;                    // 0x0011(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0012(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_13[0x5];                                       // 0x0013(0x0005)(Fixing Size After Last Property [ Dumper-7 ])
	class UInventoryBag_C*                        CallFunc_FindHardwareBag_Bag;                      // 0x0018(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UClass*                                 CallFunc_GetObjectClass_ReturnValue;               // 0x0020(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UITEM_Base_C*                           CallFunc_GetSlotItem_Item;                         // 0x0028(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_ClassIsChildOf_ReturnValue;               // 0x0030(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_31[0x7];                                       // 0x0031(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UITEM_HardwareBase_C*                   K2Node_DynamicCast_AsITEM_Hardware_Base;           // 0x0038(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0040(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(WIDGET_ImplantButton_C_EVENT_OnBagChanged) == 0x000008, "Wrong alignment on WIDGET_ImplantButton_C_EVENT_OnBagChanged");
static_assert(sizeof(WIDGET_ImplantButton_C_EVENT_OnBagChanged) == 0x000048, "Wrong size on WIDGET_ImplantButton_C_EVENT_OnBagChanged");
static_assert(offsetof(WIDGET_ImplantButton_C_EVENT_OnBagChanged, Slot_0) == 0x000000, "Member 'WIDGET_ImplantButton_C_EVENT_OnBagChanged::Slot_0' has a wrong offset!");
static_assert(offsetof(WIDGET_ImplantButton_C_EVENT_OnBagChanged, HadHardwareItem) == 0x000004, "Member 'WIDGET_ImplantButton_C_EVENT_OnBagChanged::HadHardwareItem' has a wrong offset!");
static_assert(offsetof(WIDGET_ImplantButton_C_EVENT_OnBagChanged, ModifiedItem) == 0x000008, "Member 'WIDGET_ImplantButton_C_EVENT_OnBagChanged::ModifiedItem' has a wrong offset!");
static_assert(offsetof(WIDGET_ImplantButton_C_EVENT_OnBagChanged, CallFunc_Not_PreBool_ReturnValue) == 0x000010, "Member 'WIDGET_ImplantButton_C_EVENT_OnBagChanged::CallFunc_Not_PreBool_ReturnValue' has a wrong offset!");
static_assert(offsetof(WIDGET_ImplantButton_C_EVENT_OnBagChanged, CallFunc_GetIsActivated_Result) == 0x000011, "Member 'WIDGET_ImplantButton_C_EVENT_OnBagChanged::CallFunc_GetIsActivated_Result' has a wrong offset!");
static_assert(offsetof(WIDGET_ImplantButton_C_EVENT_OnBagChanged, CallFunc_IsValid_ReturnValue) == 0x000012, "Member 'WIDGET_ImplantButton_C_EVENT_OnBagChanged::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(WIDGET_ImplantButton_C_EVENT_OnBagChanged, CallFunc_FindHardwareBag_Bag) == 0x000018, "Member 'WIDGET_ImplantButton_C_EVENT_OnBagChanged::CallFunc_FindHardwareBag_Bag' has a wrong offset!");
static_assert(offsetof(WIDGET_ImplantButton_C_EVENT_OnBagChanged, CallFunc_GetObjectClass_ReturnValue) == 0x000020, "Member 'WIDGET_ImplantButton_C_EVENT_OnBagChanged::CallFunc_GetObjectClass_ReturnValue' has a wrong offset!");
static_assert(offsetof(WIDGET_ImplantButton_C_EVENT_OnBagChanged, CallFunc_GetSlotItem_Item) == 0x000028, "Member 'WIDGET_ImplantButton_C_EVENT_OnBagChanged::CallFunc_GetSlotItem_Item' has a wrong offset!");
static_assert(offsetof(WIDGET_ImplantButton_C_EVENT_OnBagChanged, CallFunc_ClassIsChildOf_ReturnValue) == 0x000030, "Member 'WIDGET_ImplantButton_C_EVENT_OnBagChanged::CallFunc_ClassIsChildOf_ReturnValue' has a wrong offset!");
static_assert(offsetof(WIDGET_ImplantButton_C_EVENT_OnBagChanged, K2Node_DynamicCast_AsITEM_Hardware_Base) == 0x000038, "Member 'WIDGET_ImplantButton_C_EVENT_OnBagChanged::K2Node_DynamicCast_AsITEM_Hardware_Base' has a wrong offset!");
static_assert(offsetof(WIDGET_ImplantButton_C_EVENT_OnBagChanged, K2Node_DynamicCast_bSuccess) == 0x000040, "Member 'WIDGET_ImplantButton_C_EVENT_OnBagChanged::K2Node_DynamicCast_bSuccess' has a wrong offset!");

// Function WIDGET_ImplantButton.WIDGET_ImplantButton_C.EVENT_OnHardwareStateChanged
// 0x0002 (0x0002 - 0x0000)
struct WIDGET_ImplantButton_C_EVENT_OnHardwareStateChanged final
{
public:
	bool                                          Activated;                                         // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          MagLocked;                                         // 0x0001(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(WIDGET_ImplantButton_C_EVENT_OnHardwareStateChanged) == 0x000001, "Wrong alignment on WIDGET_ImplantButton_C_EVENT_OnHardwareStateChanged");
static_assert(sizeof(WIDGET_ImplantButton_C_EVENT_OnHardwareStateChanged) == 0x000002, "Wrong size on WIDGET_ImplantButton_C_EVENT_OnHardwareStateChanged");
static_assert(offsetof(WIDGET_ImplantButton_C_EVENT_OnHardwareStateChanged, Activated) == 0x000000, "Member 'WIDGET_ImplantButton_C_EVENT_OnHardwareStateChanged::Activated' has a wrong offset!");
static_assert(offsetof(WIDGET_ImplantButton_C_EVENT_OnHardwareStateChanged, MagLocked) == 0x000001, "Member 'WIDGET_ImplantButton_C_EVENT_OnHardwareStateChanged::MagLocked' has a wrong offset!");

// Function WIDGET_ImplantButton.WIDGET_ImplantButton_C.FindHardwareItem
// 0x0038 (0x0038 - 0x0000)
struct WIDGET_ImplantButton_C_FindHardwareItem final
{
public:
	class UITEM_HardwareBase_C*                   Item;                                              // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class APawn*                                  CallFunc_GetPlayerPawn_ReturnValue;                // 0x0008(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class APAWN_Hacker_Simple_C*                  K2Node_DynamicCast_AsPAWN_Hacker_Simple;           // 0x0010(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0018(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_19[0x7];                                       // 0x0019(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UITEM_Base_C*                           CallFunc_FindItem_FoundItem;                       // 0x0020(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UITEM_HardwareBase_C*                   K2Node_DynamicCast_AsITEM_Hardware_Base;           // 0x0028(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess_1;                     // 0x0030(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(WIDGET_ImplantButton_C_FindHardwareItem) == 0x000008, "Wrong alignment on WIDGET_ImplantButton_C_FindHardwareItem");
static_assert(sizeof(WIDGET_ImplantButton_C_FindHardwareItem) == 0x000038, "Wrong size on WIDGET_ImplantButton_C_FindHardwareItem");
static_assert(offsetof(WIDGET_ImplantButton_C_FindHardwareItem, Item) == 0x000000, "Member 'WIDGET_ImplantButton_C_FindHardwareItem::Item' has a wrong offset!");
static_assert(offsetof(WIDGET_ImplantButton_C_FindHardwareItem, CallFunc_GetPlayerPawn_ReturnValue) == 0x000008, "Member 'WIDGET_ImplantButton_C_FindHardwareItem::CallFunc_GetPlayerPawn_ReturnValue' has a wrong offset!");
static_assert(offsetof(WIDGET_ImplantButton_C_FindHardwareItem, K2Node_DynamicCast_AsPAWN_Hacker_Simple) == 0x000010, "Member 'WIDGET_ImplantButton_C_FindHardwareItem::K2Node_DynamicCast_AsPAWN_Hacker_Simple' has a wrong offset!");
static_assert(offsetof(WIDGET_ImplantButton_C_FindHardwareItem, K2Node_DynamicCast_bSuccess) == 0x000018, "Member 'WIDGET_ImplantButton_C_FindHardwareItem::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(WIDGET_ImplantButton_C_FindHardwareItem, CallFunc_FindItem_FoundItem) == 0x000020, "Member 'WIDGET_ImplantButton_C_FindHardwareItem::CallFunc_FindItem_FoundItem' has a wrong offset!");
static_assert(offsetof(WIDGET_ImplantButton_C_FindHardwareItem, K2Node_DynamicCast_AsITEM_Hardware_Base) == 0x000028, "Member 'WIDGET_ImplantButton_C_FindHardwareItem::K2Node_DynamicCast_AsITEM_Hardware_Base' has a wrong offset!");
static_assert(offsetof(WIDGET_ImplantButton_C_FindHardwareItem, K2Node_DynamicCast_bSuccess_1) == 0x000030, "Member 'WIDGET_ImplantButton_C_FindHardwareItem::K2Node_DynamicCast_bSuccess_1' has a wrong offset!");

// Function WIDGET_ImplantButton.WIDGET_ImplantButton_C.FindHardwareBag
// 0x0010 (0x0010 - 0x0000)
struct WIDGET_ImplantButton_C_FindHardwareBag final
{
public:
	class UInventoryBag_C*                        Bag;                                               // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UInventoryBag_C*                        CallFunc_GetBagByType_Bag;                         // 0x0008(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(WIDGET_ImplantButton_C_FindHardwareBag) == 0x000008, "Wrong alignment on WIDGET_ImplantButton_C_FindHardwareBag");
static_assert(sizeof(WIDGET_ImplantButton_C_FindHardwareBag) == 0x000010, "Wrong size on WIDGET_ImplantButton_C_FindHardwareBag");
static_assert(offsetof(WIDGET_ImplantButton_C_FindHardwareBag, Bag) == 0x000000, "Member 'WIDGET_ImplantButton_C_FindHardwareBag::Bag' has a wrong offset!");
static_assert(offsetof(WIDGET_ImplantButton_C_FindHardwareBag, CallFunc_GetBagByType_Bag) == 0x000008, "Member 'WIDGET_ImplantButton_C_FindHardwareBag::CallFunc_GetBagByType_Bag' has a wrong offset!");

// Function WIDGET_ImplantButton.WIDGET_ImplantButton_C.SetMouseOver
// 0x0028 (0x0028 - 0x0000)
struct WIDGET_ImplantButton_C_SetMouseOver final
{
public:
	bool                                          MouseOver;                                         // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Instant;                                           // 0x0001(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Temp_bool_Variable;                                // 0x0002(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	EUMGSequencePlayMode                          Temp_byte_Variable;                                // 0x0003(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EUMGSequencePlayMode                          Temp_byte_Variable_1;                              // 0x0004(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Variable_1;                              // 0x0005(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_6[0x2];                                        // 0x0006(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         Temp_float_Variable;                               // 0x0008(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Temp_float_Variable_1;                             // 0x000C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EUMGSequencePlayMode                          K2Node_Select_Default;                             // 0x0010(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_11[0x3];                                       // 0x0011(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         K2Node_Select_Default_1;                           // 0x0014(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UUMGSequencePlayer*                     CallFunc_PlayAnimation_ReturnValue;                // 0x0018(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UMaterialInstanceDynamic*               CallFunc_ConvertToDynamicMaterialInstance_ReturnValue; // 0x0020(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(WIDGET_ImplantButton_C_SetMouseOver) == 0x000008, "Wrong alignment on WIDGET_ImplantButton_C_SetMouseOver");
static_assert(sizeof(WIDGET_ImplantButton_C_SetMouseOver) == 0x000028, "Wrong size on WIDGET_ImplantButton_C_SetMouseOver");
static_assert(offsetof(WIDGET_ImplantButton_C_SetMouseOver, MouseOver) == 0x000000, "Member 'WIDGET_ImplantButton_C_SetMouseOver::MouseOver' has a wrong offset!");
static_assert(offsetof(WIDGET_ImplantButton_C_SetMouseOver, Instant) == 0x000001, "Member 'WIDGET_ImplantButton_C_SetMouseOver::Instant' has a wrong offset!");
static_assert(offsetof(WIDGET_ImplantButton_C_SetMouseOver, Temp_bool_Variable) == 0x000002, "Member 'WIDGET_ImplantButton_C_SetMouseOver::Temp_bool_Variable' has a wrong offset!");
static_assert(offsetof(WIDGET_ImplantButton_C_SetMouseOver, Temp_byte_Variable) == 0x000003, "Member 'WIDGET_ImplantButton_C_SetMouseOver::Temp_byte_Variable' has a wrong offset!");
static_assert(offsetof(WIDGET_ImplantButton_C_SetMouseOver, Temp_byte_Variable_1) == 0x000004, "Member 'WIDGET_ImplantButton_C_SetMouseOver::Temp_byte_Variable_1' has a wrong offset!");
static_assert(offsetof(WIDGET_ImplantButton_C_SetMouseOver, Temp_bool_Variable_1) == 0x000005, "Member 'WIDGET_ImplantButton_C_SetMouseOver::Temp_bool_Variable_1' has a wrong offset!");
static_assert(offsetof(WIDGET_ImplantButton_C_SetMouseOver, Temp_float_Variable) == 0x000008, "Member 'WIDGET_ImplantButton_C_SetMouseOver::Temp_float_Variable' has a wrong offset!");
static_assert(offsetof(WIDGET_ImplantButton_C_SetMouseOver, Temp_float_Variable_1) == 0x00000C, "Member 'WIDGET_ImplantButton_C_SetMouseOver::Temp_float_Variable_1' has a wrong offset!");
static_assert(offsetof(WIDGET_ImplantButton_C_SetMouseOver, K2Node_Select_Default) == 0x000010, "Member 'WIDGET_ImplantButton_C_SetMouseOver::K2Node_Select_Default' has a wrong offset!");
static_assert(offsetof(WIDGET_ImplantButton_C_SetMouseOver, K2Node_Select_Default_1) == 0x000014, "Member 'WIDGET_ImplantButton_C_SetMouseOver::K2Node_Select_Default_1' has a wrong offset!");
static_assert(offsetof(WIDGET_ImplantButton_C_SetMouseOver, CallFunc_PlayAnimation_ReturnValue) == 0x000018, "Member 'WIDGET_ImplantButton_C_SetMouseOver::CallFunc_PlayAnimation_ReturnValue' has a wrong offset!");
static_assert(offsetof(WIDGET_ImplantButton_C_SetMouseOver, CallFunc_ConvertToDynamicMaterialInstance_ReturnValue) == 0x000020, "Member 'WIDGET_ImplantButton_C_SetMouseOver::CallFunc_ConvertToDynamicMaterialInstance_ReturnValue' has a wrong offset!");

// Function WIDGET_ImplantButton.WIDGET_ImplantButton_C.SetHardwareItem
// 0x0118 (0x0118 - 0x0000)
struct WIDGET_ImplantButton_C_SetHardwareItem final
{
public:
	class UITEM_HardwareBase_C*                   Item;                                              // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Instant;                                           // 0x0008(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UMaterialInstanceDynamic*               IconMaterial;                                      // 0x0010(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Temp_float_Variable;                               // 0x0018(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Temp_float_Variable_1;                             // 0x001C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Variable;                                // 0x0020(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_21[0x3];                                       // 0x0021(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         Temp_float_Variable_2;                             // 0x0024(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Temp_float_Variable_3;                             // 0x0028(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Variable_1;                              // 0x002C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x002D(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsValid_ReturnValue_1;                    // 0x002E(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_2F[0x1];                                       // 0x002F(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	class UMaterialInstanceDynamic*               CallFunc_ConvertToDynamicMaterialInstance_ReturnValue; // 0x0030(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Variable_2;                              // 0x0038(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsValid_ReturnValue_2;                    // 0x0039(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsValid_ReturnValue_3;                    // 0x003A(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsValid_ReturnValue_4;                    // 0x003B(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                         K2Node_Select_Default;                             // 0x003C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TDelegate<void(bool Activated, bool MagLocked)> K2Node_CreateDelegate_OutputDelegate;              // 0x0040(0x0010)(ZeroConstructor, NoDestructor)
	bool                                          CallFunc_IsValid_ReturnValue_5;                    // 0x0050(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Not_PreBool_ReturnValue;                  // 0x0051(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsValid_ReturnValue_6;                    // 0x0052(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_53[0x1];                                       // 0x0053(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         K2Node_Select_Default_1;                           // 0x0054(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TDelegate<void(bool Activated, bool MagLocked)> K2Node_CreateDelegate_OutputDelegate_1;            // 0x0058(0x0010)(ZeroConstructor, NoDestructor)
	EUMGSequencePlayMode                          Temp_byte_Variable;                                // 0x0068(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue_7;                    // 0x0069(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_NotEqual_ObjectObject_ReturnValue;        // 0x006A(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BooleanOR_ReturnValue;                    // 0x006B(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	int32                                         CallFunc_GetVersionNumber_Version;                 // 0x006C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FText                                   CallFunc_Conv_IntToText_ReturnValue;               // 0x0070(0x0018)()
	struct FFormatArgumentData                    K2Node_MakeStruct_FormatArgumentData;              // 0x0088(0x0040)(HasGetValueTypeHash)
	TArray<struct FFormatArgumentData>            K2Node_MakeArray_Array;                            // 0x00C8(0x0010)(ReferenceParm)
	class FText                                   CallFunc_MakeLiteralText_ReturnValue;              // 0x00D8(0x0018)()
	class FText                                   CallFunc_Format_ReturnValue;                       // 0x00F0(0x0018)()
	EUMGSequencePlayMode                          Temp_byte_Variable_1;                              // 0x0108(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EUMGSequencePlayMode                          K2Node_Select_Default_2;                           // 0x0109(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_10A[0x6];                                      // 0x010A(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class UUMGSequencePlayer*                     CallFunc_PlayAnimation_ReturnValue;                // 0x0110(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(WIDGET_ImplantButton_C_SetHardwareItem) == 0x000008, "Wrong alignment on WIDGET_ImplantButton_C_SetHardwareItem");
static_assert(sizeof(WIDGET_ImplantButton_C_SetHardwareItem) == 0x000118, "Wrong size on WIDGET_ImplantButton_C_SetHardwareItem");
static_assert(offsetof(WIDGET_ImplantButton_C_SetHardwareItem, Item) == 0x000000, "Member 'WIDGET_ImplantButton_C_SetHardwareItem::Item' has a wrong offset!");
static_assert(offsetof(WIDGET_ImplantButton_C_SetHardwareItem, Instant) == 0x000008, "Member 'WIDGET_ImplantButton_C_SetHardwareItem::Instant' has a wrong offset!");
static_assert(offsetof(WIDGET_ImplantButton_C_SetHardwareItem, IconMaterial) == 0x000010, "Member 'WIDGET_ImplantButton_C_SetHardwareItem::IconMaterial' has a wrong offset!");
static_assert(offsetof(WIDGET_ImplantButton_C_SetHardwareItem, Temp_float_Variable) == 0x000018, "Member 'WIDGET_ImplantButton_C_SetHardwareItem::Temp_float_Variable' has a wrong offset!");
static_assert(offsetof(WIDGET_ImplantButton_C_SetHardwareItem, Temp_float_Variable_1) == 0x00001C, "Member 'WIDGET_ImplantButton_C_SetHardwareItem::Temp_float_Variable_1' has a wrong offset!");
static_assert(offsetof(WIDGET_ImplantButton_C_SetHardwareItem, Temp_bool_Variable) == 0x000020, "Member 'WIDGET_ImplantButton_C_SetHardwareItem::Temp_bool_Variable' has a wrong offset!");
static_assert(offsetof(WIDGET_ImplantButton_C_SetHardwareItem, Temp_float_Variable_2) == 0x000024, "Member 'WIDGET_ImplantButton_C_SetHardwareItem::Temp_float_Variable_2' has a wrong offset!");
static_assert(offsetof(WIDGET_ImplantButton_C_SetHardwareItem, Temp_float_Variable_3) == 0x000028, "Member 'WIDGET_ImplantButton_C_SetHardwareItem::Temp_float_Variable_3' has a wrong offset!");
static_assert(offsetof(WIDGET_ImplantButton_C_SetHardwareItem, Temp_bool_Variable_1) == 0x00002C, "Member 'WIDGET_ImplantButton_C_SetHardwareItem::Temp_bool_Variable_1' has a wrong offset!");
static_assert(offsetof(WIDGET_ImplantButton_C_SetHardwareItem, CallFunc_IsValid_ReturnValue) == 0x00002D, "Member 'WIDGET_ImplantButton_C_SetHardwareItem::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(WIDGET_ImplantButton_C_SetHardwareItem, CallFunc_IsValid_ReturnValue_1) == 0x00002E, "Member 'WIDGET_ImplantButton_C_SetHardwareItem::CallFunc_IsValid_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(WIDGET_ImplantButton_C_SetHardwareItem, CallFunc_ConvertToDynamicMaterialInstance_ReturnValue) == 0x000030, "Member 'WIDGET_ImplantButton_C_SetHardwareItem::CallFunc_ConvertToDynamicMaterialInstance_ReturnValue' has a wrong offset!");
static_assert(offsetof(WIDGET_ImplantButton_C_SetHardwareItem, Temp_bool_Variable_2) == 0x000038, "Member 'WIDGET_ImplantButton_C_SetHardwareItem::Temp_bool_Variable_2' has a wrong offset!");
static_assert(offsetof(WIDGET_ImplantButton_C_SetHardwareItem, CallFunc_IsValid_ReturnValue_2) == 0x000039, "Member 'WIDGET_ImplantButton_C_SetHardwareItem::CallFunc_IsValid_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(WIDGET_ImplantButton_C_SetHardwareItem, CallFunc_IsValid_ReturnValue_3) == 0x00003A, "Member 'WIDGET_ImplantButton_C_SetHardwareItem::CallFunc_IsValid_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(WIDGET_ImplantButton_C_SetHardwareItem, CallFunc_IsValid_ReturnValue_4) == 0x00003B, "Member 'WIDGET_ImplantButton_C_SetHardwareItem::CallFunc_IsValid_ReturnValue_4' has a wrong offset!");
static_assert(offsetof(WIDGET_ImplantButton_C_SetHardwareItem, K2Node_Select_Default) == 0x00003C, "Member 'WIDGET_ImplantButton_C_SetHardwareItem::K2Node_Select_Default' has a wrong offset!");
static_assert(offsetof(WIDGET_ImplantButton_C_SetHardwareItem, K2Node_CreateDelegate_OutputDelegate) == 0x000040, "Member 'WIDGET_ImplantButton_C_SetHardwareItem::K2Node_CreateDelegate_OutputDelegate' has a wrong offset!");
static_assert(offsetof(WIDGET_ImplantButton_C_SetHardwareItem, CallFunc_IsValid_ReturnValue_5) == 0x000050, "Member 'WIDGET_ImplantButton_C_SetHardwareItem::CallFunc_IsValid_ReturnValue_5' has a wrong offset!");
static_assert(offsetof(WIDGET_ImplantButton_C_SetHardwareItem, CallFunc_Not_PreBool_ReturnValue) == 0x000051, "Member 'WIDGET_ImplantButton_C_SetHardwareItem::CallFunc_Not_PreBool_ReturnValue' has a wrong offset!");
static_assert(offsetof(WIDGET_ImplantButton_C_SetHardwareItem, CallFunc_IsValid_ReturnValue_6) == 0x000052, "Member 'WIDGET_ImplantButton_C_SetHardwareItem::CallFunc_IsValid_ReturnValue_6' has a wrong offset!");
static_assert(offsetof(WIDGET_ImplantButton_C_SetHardwareItem, K2Node_Select_Default_1) == 0x000054, "Member 'WIDGET_ImplantButton_C_SetHardwareItem::K2Node_Select_Default_1' has a wrong offset!");
static_assert(offsetof(WIDGET_ImplantButton_C_SetHardwareItem, K2Node_CreateDelegate_OutputDelegate_1) == 0x000058, "Member 'WIDGET_ImplantButton_C_SetHardwareItem::K2Node_CreateDelegate_OutputDelegate_1' has a wrong offset!");
static_assert(offsetof(WIDGET_ImplantButton_C_SetHardwareItem, Temp_byte_Variable) == 0x000068, "Member 'WIDGET_ImplantButton_C_SetHardwareItem::Temp_byte_Variable' has a wrong offset!");
static_assert(offsetof(WIDGET_ImplantButton_C_SetHardwareItem, CallFunc_IsValid_ReturnValue_7) == 0x000069, "Member 'WIDGET_ImplantButton_C_SetHardwareItem::CallFunc_IsValid_ReturnValue_7' has a wrong offset!");
static_assert(offsetof(WIDGET_ImplantButton_C_SetHardwareItem, CallFunc_NotEqual_ObjectObject_ReturnValue) == 0x00006A, "Member 'WIDGET_ImplantButton_C_SetHardwareItem::CallFunc_NotEqual_ObjectObject_ReturnValue' has a wrong offset!");
static_assert(offsetof(WIDGET_ImplantButton_C_SetHardwareItem, CallFunc_BooleanOR_ReturnValue) == 0x00006B, "Member 'WIDGET_ImplantButton_C_SetHardwareItem::CallFunc_BooleanOR_ReturnValue' has a wrong offset!");
static_assert(offsetof(WIDGET_ImplantButton_C_SetHardwareItem, CallFunc_GetVersionNumber_Version) == 0x00006C, "Member 'WIDGET_ImplantButton_C_SetHardwareItem::CallFunc_GetVersionNumber_Version' has a wrong offset!");
static_assert(offsetof(WIDGET_ImplantButton_C_SetHardwareItem, CallFunc_Conv_IntToText_ReturnValue) == 0x000070, "Member 'WIDGET_ImplantButton_C_SetHardwareItem::CallFunc_Conv_IntToText_ReturnValue' has a wrong offset!");
static_assert(offsetof(WIDGET_ImplantButton_C_SetHardwareItem, K2Node_MakeStruct_FormatArgumentData) == 0x000088, "Member 'WIDGET_ImplantButton_C_SetHardwareItem::K2Node_MakeStruct_FormatArgumentData' has a wrong offset!");
static_assert(offsetof(WIDGET_ImplantButton_C_SetHardwareItem, K2Node_MakeArray_Array) == 0x0000C8, "Member 'WIDGET_ImplantButton_C_SetHardwareItem::K2Node_MakeArray_Array' has a wrong offset!");
static_assert(offsetof(WIDGET_ImplantButton_C_SetHardwareItem, CallFunc_MakeLiteralText_ReturnValue) == 0x0000D8, "Member 'WIDGET_ImplantButton_C_SetHardwareItem::CallFunc_MakeLiteralText_ReturnValue' has a wrong offset!");
static_assert(offsetof(WIDGET_ImplantButton_C_SetHardwareItem, CallFunc_Format_ReturnValue) == 0x0000F0, "Member 'WIDGET_ImplantButton_C_SetHardwareItem::CallFunc_Format_ReturnValue' has a wrong offset!");
static_assert(offsetof(WIDGET_ImplantButton_C_SetHardwareItem, Temp_byte_Variable_1) == 0x000108, "Member 'WIDGET_ImplantButton_C_SetHardwareItem::Temp_byte_Variable_1' has a wrong offset!");
static_assert(offsetof(WIDGET_ImplantButton_C_SetHardwareItem, K2Node_Select_Default_2) == 0x000109, "Member 'WIDGET_ImplantButton_C_SetHardwareItem::K2Node_Select_Default_2' has a wrong offset!");
static_assert(offsetof(WIDGET_ImplantButton_C_SetHardwareItem, CallFunc_PlayAnimation_ReturnValue) == 0x000110, "Member 'WIDGET_ImplantButton_C_SetHardwareItem::CallFunc_PlayAnimation_ReturnValue' has a wrong offset!");

// Function WIDGET_ImplantButton.WIDGET_ImplantButton_C.SetHardwareActivated
// 0x0058 (0x0058 - 0x0000)
struct WIDGET_ImplantButton_C_SetHardwareActivated final
{
public:
	bool                                          Activated;                                         // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Instant;                                           // 0x0001(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_2[0x6];                                        // 0x0002(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class USoundBase*                             Temp_object_Variable;                              // 0x0008(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Variable;                                // 0x0010(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	EUMGSequencePlayMode                          Temp_byte_Variable;                                // 0x0011(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EUMGSequencePlayMode                          Temp_byte_Variable_1;                              // 0x0012(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Variable_1;                              // 0x0013(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                         Temp_float_Variable;                               // 0x0014(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Temp_float_Variable_1;                             // 0x0018(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1C[0x4];                                       // 0x001C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class USoundBase*                             Temp_object_Variable_1;                            // 0x0020(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_NotEqual_BoolBool_ReturnValue;            // 0x0028(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	EUMGSequencePlayMode                          K2Node_Select_Default;                             // 0x0029(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_2A[0x6];                                       // 0x002A(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class UUMGSequencePlayer*                     CallFunc_PlayAnimation_ReturnValue;                // 0x0030(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Variable_2;                              // 0x0038(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_39[0x3];                                       // 0x0039(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         K2Node_Select_Default_1;                           // 0x003C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class USoundBase*                             K2Node_Select_Default_2;                           // 0x0040(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UMaterialInstanceDynamic*               CallFunc_ConvertToDynamicMaterialInstance_ReturnValue; // 0x0048(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0050(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(WIDGET_ImplantButton_C_SetHardwareActivated) == 0x000008, "Wrong alignment on WIDGET_ImplantButton_C_SetHardwareActivated");
static_assert(sizeof(WIDGET_ImplantButton_C_SetHardwareActivated) == 0x000058, "Wrong size on WIDGET_ImplantButton_C_SetHardwareActivated");
static_assert(offsetof(WIDGET_ImplantButton_C_SetHardwareActivated, Activated) == 0x000000, "Member 'WIDGET_ImplantButton_C_SetHardwareActivated::Activated' has a wrong offset!");
static_assert(offsetof(WIDGET_ImplantButton_C_SetHardwareActivated, Instant) == 0x000001, "Member 'WIDGET_ImplantButton_C_SetHardwareActivated::Instant' has a wrong offset!");
static_assert(offsetof(WIDGET_ImplantButton_C_SetHardwareActivated, Temp_object_Variable) == 0x000008, "Member 'WIDGET_ImplantButton_C_SetHardwareActivated::Temp_object_Variable' has a wrong offset!");
static_assert(offsetof(WIDGET_ImplantButton_C_SetHardwareActivated, Temp_bool_Variable) == 0x000010, "Member 'WIDGET_ImplantButton_C_SetHardwareActivated::Temp_bool_Variable' has a wrong offset!");
static_assert(offsetof(WIDGET_ImplantButton_C_SetHardwareActivated, Temp_byte_Variable) == 0x000011, "Member 'WIDGET_ImplantButton_C_SetHardwareActivated::Temp_byte_Variable' has a wrong offset!");
static_assert(offsetof(WIDGET_ImplantButton_C_SetHardwareActivated, Temp_byte_Variable_1) == 0x000012, "Member 'WIDGET_ImplantButton_C_SetHardwareActivated::Temp_byte_Variable_1' has a wrong offset!");
static_assert(offsetof(WIDGET_ImplantButton_C_SetHardwareActivated, Temp_bool_Variable_1) == 0x000013, "Member 'WIDGET_ImplantButton_C_SetHardwareActivated::Temp_bool_Variable_1' has a wrong offset!");
static_assert(offsetof(WIDGET_ImplantButton_C_SetHardwareActivated, Temp_float_Variable) == 0x000014, "Member 'WIDGET_ImplantButton_C_SetHardwareActivated::Temp_float_Variable' has a wrong offset!");
static_assert(offsetof(WIDGET_ImplantButton_C_SetHardwareActivated, Temp_float_Variable_1) == 0x000018, "Member 'WIDGET_ImplantButton_C_SetHardwareActivated::Temp_float_Variable_1' has a wrong offset!");
static_assert(offsetof(WIDGET_ImplantButton_C_SetHardwareActivated, Temp_object_Variable_1) == 0x000020, "Member 'WIDGET_ImplantButton_C_SetHardwareActivated::Temp_object_Variable_1' has a wrong offset!");
static_assert(offsetof(WIDGET_ImplantButton_C_SetHardwareActivated, CallFunc_NotEqual_BoolBool_ReturnValue) == 0x000028, "Member 'WIDGET_ImplantButton_C_SetHardwareActivated::CallFunc_NotEqual_BoolBool_ReturnValue' has a wrong offset!");
static_assert(offsetof(WIDGET_ImplantButton_C_SetHardwareActivated, K2Node_Select_Default) == 0x000029, "Member 'WIDGET_ImplantButton_C_SetHardwareActivated::K2Node_Select_Default' has a wrong offset!");
static_assert(offsetof(WIDGET_ImplantButton_C_SetHardwareActivated, CallFunc_PlayAnimation_ReturnValue) == 0x000030, "Member 'WIDGET_ImplantButton_C_SetHardwareActivated::CallFunc_PlayAnimation_ReturnValue' has a wrong offset!");
static_assert(offsetof(WIDGET_ImplantButton_C_SetHardwareActivated, Temp_bool_Variable_2) == 0x000038, "Member 'WIDGET_ImplantButton_C_SetHardwareActivated::Temp_bool_Variable_2' has a wrong offset!");
static_assert(offsetof(WIDGET_ImplantButton_C_SetHardwareActivated, K2Node_Select_Default_1) == 0x00003C, "Member 'WIDGET_ImplantButton_C_SetHardwareActivated::K2Node_Select_Default_1' has a wrong offset!");
static_assert(offsetof(WIDGET_ImplantButton_C_SetHardwareActivated, K2Node_Select_Default_2) == 0x000040, "Member 'WIDGET_ImplantButton_C_SetHardwareActivated::K2Node_Select_Default_2' has a wrong offset!");
static_assert(offsetof(WIDGET_ImplantButton_C_SetHardwareActivated, CallFunc_ConvertToDynamicMaterialInstance_ReturnValue) == 0x000048, "Member 'WIDGET_ImplantButton_C_SetHardwareActivated::CallFunc_ConvertToDynamicMaterialInstance_ReturnValue' has a wrong offset!");
static_assert(offsetof(WIDGET_ImplantButton_C_SetHardwareActivated, CallFunc_IsValid_ReturnValue) == 0x000050, "Member 'WIDGET_ImplantButton_C_SetHardwareActivated::CallFunc_IsValid_ReturnValue' has a wrong offset!");

// Function WIDGET_ImplantButton.WIDGET_ImplantButton_C.UpdateVisibilityState
// 0x000B (0x000B - 0x0000)
struct WIDGET_ImplantButton_C_UpdateVisibilityState final
{
public:
	bool                                          Temp_bool_Variable;                                // 0x0000(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	ESlateVisibility                              Temp_byte_Variable;                                // 0x0001(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ESlateVisibility                              Temp_byte_Variable_1;                              // 0x0002(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Variable_1;                              // 0x0003(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	ESlateVisibility                              Temp_byte_Variable_2;                              // 0x0004(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ESlateVisibility                              Temp_byte_Variable_3;                              // 0x0005(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0006(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsValid_ReturnValue_1;                    // 0x0007(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	ESlateVisibility                              K2Node_Select_Default;                             // 0x0008(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ESlateVisibility                              K2Node_Select_Default_1;                           // 0x0009(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue_2;                    // 0x000A(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(WIDGET_ImplantButton_C_UpdateVisibilityState) == 0x000001, "Wrong alignment on WIDGET_ImplantButton_C_UpdateVisibilityState");
static_assert(sizeof(WIDGET_ImplantButton_C_UpdateVisibilityState) == 0x00000B, "Wrong size on WIDGET_ImplantButton_C_UpdateVisibilityState");
static_assert(offsetof(WIDGET_ImplantButton_C_UpdateVisibilityState, Temp_bool_Variable) == 0x000000, "Member 'WIDGET_ImplantButton_C_UpdateVisibilityState::Temp_bool_Variable' has a wrong offset!");
static_assert(offsetof(WIDGET_ImplantButton_C_UpdateVisibilityState, Temp_byte_Variable) == 0x000001, "Member 'WIDGET_ImplantButton_C_UpdateVisibilityState::Temp_byte_Variable' has a wrong offset!");
static_assert(offsetof(WIDGET_ImplantButton_C_UpdateVisibilityState, Temp_byte_Variable_1) == 0x000002, "Member 'WIDGET_ImplantButton_C_UpdateVisibilityState::Temp_byte_Variable_1' has a wrong offset!");
static_assert(offsetof(WIDGET_ImplantButton_C_UpdateVisibilityState, Temp_bool_Variable_1) == 0x000003, "Member 'WIDGET_ImplantButton_C_UpdateVisibilityState::Temp_bool_Variable_1' has a wrong offset!");
static_assert(offsetof(WIDGET_ImplantButton_C_UpdateVisibilityState, Temp_byte_Variable_2) == 0x000004, "Member 'WIDGET_ImplantButton_C_UpdateVisibilityState::Temp_byte_Variable_2' has a wrong offset!");
static_assert(offsetof(WIDGET_ImplantButton_C_UpdateVisibilityState, Temp_byte_Variable_3) == 0x000005, "Member 'WIDGET_ImplantButton_C_UpdateVisibilityState::Temp_byte_Variable_3' has a wrong offset!");
static_assert(offsetof(WIDGET_ImplantButton_C_UpdateVisibilityState, CallFunc_IsValid_ReturnValue) == 0x000006, "Member 'WIDGET_ImplantButton_C_UpdateVisibilityState::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(WIDGET_ImplantButton_C_UpdateVisibilityState, CallFunc_IsValid_ReturnValue_1) == 0x000007, "Member 'WIDGET_ImplantButton_C_UpdateVisibilityState::CallFunc_IsValid_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(WIDGET_ImplantButton_C_UpdateVisibilityState, K2Node_Select_Default) == 0x000008, "Member 'WIDGET_ImplantButton_C_UpdateVisibilityState::K2Node_Select_Default' has a wrong offset!");
static_assert(offsetof(WIDGET_ImplantButton_C_UpdateVisibilityState, K2Node_Select_Default_1) == 0x000009, "Member 'WIDGET_ImplantButton_C_UpdateVisibilityState::K2Node_Select_Default_1' has a wrong offset!");
static_assert(offsetof(WIDGET_ImplantButton_C_UpdateVisibilityState, CallFunc_IsValid_ReturnValue_2) == 0x00000A, "Member 'WIDGET_ImplantButton_C_UpdateVisibilityState::CallFunc_IsValid_ReturnValue_2' has a wrong offset!");

}

