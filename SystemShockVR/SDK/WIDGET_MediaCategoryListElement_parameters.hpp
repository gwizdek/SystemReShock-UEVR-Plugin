#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: WIDGET_MediaCategoryListElement

#include "Basic.hpp"

#include "CoreUObject_structs.hpp"
#include "UMG_structs.hpp"
#include "SlateCore_structs.hpp"


namespace SDK::Params
{

// Function WIDGET_MediaCategoryListElement.WIDGET_MediaCategoryListElement_C.ExecuteUbergraph_WIDGET_MediaCategoryListElement
// 0x0058 (0x0058 - 0x0000)
struct WIDGET_MediaCategoryListElement_C_ExecuteUbergraph_WIDGET_MediaCategoryListElement final
{
public:
	int32                                         EntryPoint;                                        // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Temp_float_Variable;                               // 0x0004(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Temp_float_Variable_1;                             // 0x0008(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_Event_IsDesignTime;                         // 0x000C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Temp_bool_Variable;                                // 0x000D(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_E[0x2];                                        // 0x000E(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	class UMaterialInstanceDynamic*               CallFunc_ConvertToDynamicMaterialInstance_ReturnValue; // 0x0010(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         K2Node_Select_Default;                             // 0x0018(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FGeometry                              K2Node_Event_MyGeometry;                           // 0x001C(0x0038)(IsPlainOldData, NoDestructor)
	float                                         K2Node_Event_InDeltaTime;                          // 0x0054(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(WIDGET_MediaCategoryListElement_C_ExecuteUbergraph_WIDGET_MediaCategoryListElement) == 0x000008, "Wrong alignment on WIDGET_MediaCategoryListElement_C_ExecuteUbergraph_WIDGET_MediaCategoryListElement");
static_assert(sizeof(WIDGET_MediaCategoryListElement_C_ExecuteUbergraph_WIDGET_MediaCategoryListElement) == 0x000058, "Wrong size on WIDGET_MediaCategoryListElement_C_ExecuteUbergraph_WIDGET_MediaCategoryListElement");
static_assert(offsetof(WIDGET_MediaCategoryListElement_C_ExecuteUbergraph_WIDGET_MediaCategoryListElement, EntryPoint) == 0x000000, "Member 'WIDGET_MediaCategoryListElement_C_ExecuteUbergraph_WIDGET_MediaCategoryListElement::EntryPoint' has a wrong offset!");
static_assert(offsetof(WIDGET_MediaCategoryListElement_C_ExecuteUbergraph_WIDGET_MediaCategoryListElement, Temp_float_Variable) == 0x000004, "Member 'WIDGET_MediaCategoryListElement_C_ExecuteUbergraph_WIDGET_MediaCategoryListElement::Temp_float_Variable' has a wrong offset!");
static_assert(offsetof(WIDGET_MediaCategoryListElement_C_ExecuteUbergraph_WIDGET_MediaCategoryListElement, Temp_float_Variable_1) == 0x000008, "Member 'WIDGET_MediaCategoryListElement_C_ExecuteUbergraph_WIDGET_MediaCategoryListElement::Temp_float_Variable_1' has a wrong offset!");
static_assert(offsetof(WIDGET_MediaCategoryListElement_C_ExecuteUbergraph_WIDGET_MediaCategoryListElement, K2Node_Event_IsDesignTime) == 0x00000C, "Member 'WIDGET_MediaCategoryListElement_C_ExecuteUbergraph_WIDGET_MediaCategoryListElement::K2Node_Event_IsDesignTime' has a wrong offset!");
static_assert(offsetof(WIDGET_MediaCategoryListElement_C_ExecuteUbergraph_WIDGET_MediaCategoryListElement, Temp_bool_Variable) == 0x00000D, "Member 'WIDGET_MediaCategoryListElement_C_ExecuteUbergraph_WIDGET_MediaCategoryListElement::Temp_bool_Variable' has a wrong offset!");
static_assert(offsetof(WIDGET_MediaCategoryListElement_C_ExecuteUbergraph_WIDGET_MediaCategoryListElement, CallFunc_ConvertToDynamicMaterialInstance_ReturnValue) == 0x000010, "Member 'WIDGET_MediaCategoryListElement_C_ExecuteUbergraph_WIDGET_MediaCategoryListElement::CallFunc_ConvertToDynamicMaterialInstance_ReturnValue' has a wrong offset!");
static_assert(offsetof(WIDGET_MediaCategoryListElement_C_ExecuteUbergraph_WIDGET_MediaCategoryListElement, K2Node_Select_Default) == 0x000018, "Member 'WIDGET_MediaCategoryListElement_C_ExecuteUbergraph_WIDGET_MediaCategoryListElement::K2Node_Select_Default' has a wrong offset!");
static_assert(offsetof(WIDGET_MediaCategoryListElement_C_ExecuteUbergraph_WIDGET_MediaCategoryListElement, K2Node_Event_MyGeometry) == 0x00001C, "Member 'WIDGET_MediaCategoryListElement_C_ExecuteUbergraph_WIDGET_MediaCategoryListElement::K2Node_Event_MyGeometry' has a wrong offset!");
static_assert(offsetof(WIDGET_MediaCategoryListElement_C_ExecuteUbergraph_WIDGET_MediaCategoryListElement, K2Node_Event_InDeltaTime) == 0x000054, "Member 'WIDGET_MediaCategoryListElement_C_ExecuteUbergraph_WIDGET_MediaCategoryListElement::K2Node_Event_InDeltaTime' has a wrong offset!");

// Function WIDGET_MediaCategoryListElement.WIDGET_MediaCategoryListElement_C.Tick
// 0x003C (0x003C - 0x0000)
struct WIDGET_MediaCategoryListElement_C_Tick final
{
public:
	struct FGeometry                              MyGeometry;                                        // 0x0000(0x0038)(BlueprintVisible, BlueprintReadOnly, Parm, IsPlainOldData, NoDestructor)
	float                                         InDeltaTime;                                       // 0x0038(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(WIDGET_MediaCategoryListElement_C_Tick) == 0x000004, "Wrong alignment on WIDGET_MediaCategoryListElement_C_Tick");
static_assert(sizeof(WIDGET_MediaCategoryListElement_C_Tick) == 0x00003C, "Wrong size on WIDGET_MediaCategoryListElement_C_Tick");
static_assert(offsetof(WIDGET_MediaCategoryListElement_C_Tick, MyGeometry) == 0x000000, "Member 'WIDGET_MediaCategoryListElement_C_Tick::MyGeometry' has a wrong offset!");
static_assert(offsetof(WIDGET_MediaCategoryListElement_C_Tick, InDeltaTime) == 0x000038, "Member 'WIDGET_MediaCategoryListElement_C_Tick::InDeltaTime' has a wrong offset!");

// Function WIDGET_MediaCategoryListElement.WIDGET_MediaCategoryListElement_C.PreConstruct
// 0x0001 (0x0001 - 0x0000)
struct WIDGET_MediaCategoryListElement_C_PreConstruct final
{
public:
	bool                                          IsDesignTime;                                      // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(WIDGET_MediaCategoryListElement_C_PreConstruct) == 0x000001, "Wrong alignment on WIDGET_MediaCategoryListElement_C_PreConstruct");
static_assert(sizeof(WIDGET_MediaCategoryListElement_C_PreConstruct) == 0x000001, "Wrong size on WIDGET_MediaCategoryListElement_C_PreConstruct");
static_assert(offsetof(WIDGET_MediaCategoryListElement_C_PreConstruct, IsDesignTime) == 0x000000, "Member 'WIDGET_MediaCategoryListElement_C_PreConstruct::IsDesignTime' has a wrong offset!");

// Function WIDGET_MediaCategoryListElement.WIDGET_MediaCategoryListElement_C.InitializeMediaCategoryListElement
// 0x0010 (0x0010 - 0x0000)
struct WIDGET_MediaCategoryListElement_C_InitializeMediaCategoryListElement final
{
public:
	class UWIDGET_MediaPanel_C*                   MediaPanel_0;                                      // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UWIDGET_PlayerHUD_C*                    PlayerHUD_0;                                       // 0x0008(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(WIDGET_MediaCategoryListElement_C_InitializeMediaCategoryListElement) == 0x000008, "Wrong alignment on WIDGET_MediaCategoryListElement_C_InitializeMediaCategoryListElement");
static_assert(sizeof(WIDGET_MediaCategoryListElement_C_InitializeMediaCategoryListElement) == 0x000010, "Wrong size on WIDGET_MediaCategoryListElement_C_InitializeMediaCategoryListElement");
static_assert(offsetof(WIDGET_MediaCategoryListElement_C_InitializeMediaCategoryListElement, MediaPanel_0) == 0x000000, "Member 'WIDGET_MediaCategoryListElement_C_InitializeMediaCategoryListElement::MediaPanel_0' has a wrong offset!");
static_assert(offsetof(WIDGET_MediaCategoryListElement_C_InitializeMediaCategoryListElement, PlayerHUD_0) == 0x000008, "Member 'WIDGET_MediaCategoryListElement_C_InitializeMediaCategoryListElement::PlayerHUD_0' has a wrong offset!");

// Function WIDGET_MediaCategoryListElement.WIDGET_MediaCategoryListElement_C.EVENT_OnMouseEnter
// 0x00D8 (0x00D8 - 0x0000)
struct WIDGET_MediaCategoryListElement_C_EVENT_OnMouseEnter final
{
public:
	struct FGeometry                              MyGeometry;                                        // 0x0000(0x0038)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor)
	struct FPointerEvent                          MouseEvent;                                        // 0x0038(0x0070)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
	class APlayerController*                      CallFunc_GetPlayerController_ReturnValue;          // 0x00A8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class ACON_Hacker_C*                          K2Node_DynamicCast_AsCON_Hacker;                   // 0x00B0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x00B8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsUsingGamepad_Result;                    // 0x00B9(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_BA[0x6];                                       // 0x00BA(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class APawn*                                  CallFunc_K2_GetPawn_ReturnValue;                   // 0x00C0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class APAWN_Hacker_Simple_C*                  K2Node_DynamicCast_AsPAWN_Hacker_Simple;           // 0x00C8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess_1;                     // 0x00D0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_HasGamepadMovedCursorRecently_Result;     // 0x00D1(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(WIDGET_MediaCategoryListElement_C_EVENT_OnMouseEnter) == 0x000008, "Wrong alignment on WIDGET_MediaCategoryListElement_C_EVENT_OnMouseEnter");
static_assert(sizeof(WIDGET_MediaCategoryListElement_C_EVENT_OnMouseEnter) == 0x0000D8, "Wrong size on WIDGET_MediaCategoryListElement_C_EVENT_OnMouseEnter");
static_assert(offsetof(WIDGET_MediaCategoryListElement_C_EVENT_OnMouseEnter, MyGeometry) == 0x000000, "Member 'WIDGET_MediaCategoryListElement_C_EVENT_OnMouseEnter::MyGeometry' has a wrong offset!");
static_assert(offsetof(WIDGET_MediaCategoryListElement_C_EVENT_OnMouseEnter, MouseEvent) == 0x000038, "Member 'WIDGET_MediaCategoryListElement_C_EVENT_OnMouseEnter::MouseEvent' has a wrong offset!");
static_assert(offsetof(WIDGET_MediaCategoryListElement_C_EVENT_OnMouseEnter, CallFunc_GetPlayerController_ReturnValue) == 0x0000A8, "Member 'WIDGET_MediaCategoryListElement_C_EVENT_OnMouseEnter::CallFunc_GetPlayerController_ReturnValue' has a wrong offset!");
static_assert(offsetof(WIDGET_MediaCategoryListElement_C_EVENT_OnMouseEnter, K2Node_DynamicCast_AsCON_Hacker) == 0x0000B0, "Member 'WIDGET_MediaCategoryListElement_C_EVENT_OnMouseEnter::K2Node_DynamicCast_AsCON_Hacker' has a wrong offset!");
static_assert(offsetof(WIDGET_MediaCategoryListElement_C_EVENT_OnMouseEnter, K2Node_DynamicCast_bSuccess) == 0x0000B8, "Member 'WIDGET_MediaCategoryListElement_C_EVENT_OnMouseEnter::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(WIDGET_MediaCategoryListElement_C_EVENT_OnMouseEnter, CallFunc_IsUsingGamepad_Result) == 0x0000B9, "Member 'WIDGET_MediaCategoryListElement_C_EVENT_OnMouseEnter::CallFunc_IsUsingGamepad_Result' has a wrong offset!");
static_assert(offsetof(WIDGET_MediaCategoryListElement_C_EVENT_OnMouseEnter, CallFunc_K2_GetPawn_ReturnValue) == 0x0000C0, "Member 'WIDGET_MediaCategoryListElement_C_EVENT_OnMouseEnter::CallFunc_K2_GetPawn_ReturnValue' has a wrong offset!");
static_assert(offsetof(WIDGET_MediaCategoryListElement_C_EVENT_OnMouseEnter, K2Node_DynamicCast_AsPAWN_Hacker_Simple) == 0x0000C8, "Member 'WIDGET_MediaCategoryListElement_C_EVENT_OnMouseEnter::K2Node_DynamicCast_AsPAWN_Hacker_Simple' has a wrong offset!");
static_assert(offsetof(WIDGET_MediaCategoryListElement_C_EVENT_OnMouseEnter, K2Node_DynamicCast_bSuccess_1) == 0x0000D0, "Member 'WIDGET_MediaCategoryListElement_C_EVENT_OnMouseEnter::K2Node_DynamicCast_bSuccess_1' has a wrong offset!");
static_assert(offsetof(WIDGET_MediaCategoryListElement_C_EVENT_OnMouseEnter, CallFunc_HasGamepadMovedCursorRecently_Result) == 0x0000D1, "Member 'WIDGET_MediaCategoryListElement_C_EVENT_OnMouseEnter::CallFunc_HasGamepadMovedCursorRecently_Result' has a wrong offset!");

// Function WIDGET_MediaCategoryListElement.WIDGET_MediaCategoryListElement_C.EVENT_OnMouseLeave
// 0x0070 (0x0070 - 0x0000)
struct WIDGET_MediaCategoryListElement_C_EVENT_OnMouseLeave final
{
public:
	struct FPointerEvent                          MouseEvent;                                        // 0x0000(0x0070)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
};
static_assert(alignof(WIDGET_MediaCategoryListElement_C_EVENT_OnMouseLeave) == 0x000008, "Wrong alignment on WIDGET_MediaCategoryListElement_C_EVENT_OnMouseLeave");
static_assert(sizeof(WIDGET_MediaCategoryListElement_C_EVENT_OnMouseLeave) == 0x000070, "Wrong size on WIDGET_MediaCategoryListElement_C_EVENT_OnMouseLeave");
static_assert(offsetof(WIDGET_MediaCategoryListElement_C_EVENT_OnMouseLeave, MouseEvent) == 0x000000, "Member 'WIDGET_MediaCategoryListElement_C_EVENT_OnMouseLeave::MouseEvent' has a wrong offset!");

// Function WIDGET_MediaCategoryListElement.WIDGET_MediaCategoryListElement_C.EVENT_OnMouseDown
// 0x0218 (0x0218 - 0x0000)
struct WIDGET_MediaCategoryListElement_C_EVENT_OnMouseDown final
{
public:
	struct FGeometry                              MyGeometry;                                        // 0x0000(0x0038)(BlueprintVisible, BlueprintReadOnly, Parm, IsPlainOldData, NoDestructor)
	struct FPointerEvent                          MouseEvent;                                        // 0x0038(0x0070)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
	struct FEventReply                            ReturnValue;                                       // 0x00A8(0x00B8)(Parm, OutParm, ReturnParm)
	struct FEventReply                            K2Node_MakeStruct_EventReply;                      // 0x0160(0x00B8)()
};
static_assert(alignof(WIDGET_MediaCategoryListElement_C_EVENT_OnMouseDown) == 0x000008, "Wrong alignment on WIDGET_MediaCategoryListElement_C_EVENT_OnMouseDown");
static_assert(sizeof(WIDGET_MediaCategoryListElement_C_EVENT_OnMouseDown) == 0x000218, "Wrong size on WIDGET_MediaCategoryListElement_C_EVENT_OnMouseDown");
static_assert(offsetof(WIDGET_MediaCategoryListElement_C_EVENT_OnMouseDown, MyGeometry) == 0x000000, "Member 'WIDGET_MediaCategoryListElement_C_EVENT_OnMouseDown::MyGeometry' has a wrong offset!");
static_assert(offsetof(WIDGET_MediaCategoryListElement_C_EVENT_OnMouseDown, MouseEvent) == 0x000038, "Member 'WIDGET_MediaCategoryListElement_C_EVENT_OnMouseDown::MouseEvent' has a wrong offset!");
static_assert(offsetof(WIDGET_MediaCategoryListElement_C_EVENT_OnMouseDown, ReturnValue) == 0x0000A8, "Member 'WIDGET_MediaCategoryListElement_C_EVENT_OnMouseDown::ReturnValue' has a wrong offset!");
static_assert(offsetof(WIDGET_MediaCategoryListElement_C_EVENT_OnMouseDown, K2Node_MakeStruct_EventReply) == 0x000160, "Member 'WIDGET_MediaCategoryListElement_C_EVENT_OnMouseDown::K2Node_MakeStruct_EventReply' has a wrong offset!");

// Function WIDGET_MediaCategoryListElement.WIDGET_MediaCategoryListElement_C.SetMediaCount
// 0x0028 (0x0028 - 0x0000)
struct WIDGET_MediaCategoryListElement_C_SetMediaCount final
{
public:
	int32                                         Messages;                                          // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   CallFunc_Conv_IntToText_ReturnValue;               // 0x0008(0x0018)()
	bool                                          CallFunc_NotEqual_IntInt_ReturnValue;              // 0x0020(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(WIDGET_MediaCategoryListElement_C_SetMediaCount) == 0x000008, "Wrong alignment on WIDGET_MediaCategoryListElement_C_SetMediaCount");
static_assert(sizeof(WIDGET_MediaCategoryListElement_C_SetMediaCount) == 0x000028, "Wrong size on WIDGET_MediaCategoryListElement_C_SetMediaCount");
static_assert(offsetof(WIDGET_MediaCategoryListElement_C_SetMediaCount, Messages) == 0x000000, "Member 'WIDGET_MediaCategoryListElement_C_SetMediaCount::Messages' has a wrong offset!");
static_assert(offsetof(WIDGET_MediaCategoryListElement_C_SetMediaCount, CallFunc_Conv_IntToText_ReturnValue) == 0x000008, "Member 'WIDGET_MediaCategoryListElement_C_SetMediaCount::CallFunc_Conv_IntToText_ReturnValue' has a wrong offset!");
static_assert(offsetof(WIDGET_MediaCategoryListElement_C_SetMediaCount, CallFunc_NotEqual_IntInt_ReturnValue) == 0x000020, "Member 'WIDGET_MediaCategoryListElement_C_SetMediaCount::CallFunc_NotEqual_IntInt_ReturnValue' has a wrong offset!");

// Function WIDGET_MediaCategoryListElement.WIDGET_MediaCategoryListElement_C.SetAllMediaViewed
// 0x0005 (0x0005 - 0x0000)
struct WIDGET_MediaCategoryListElement_C_SetAllMediaViewed final
{
public:
	bool                                          AllMessagesViewed;                                 // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Temp_bool_Variable;                                // 0x0001(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	ESlateVisibility                              Temp_byte_Variable;                                // 0x0002(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ESlateVisibility                              Temp_byte_Variable_1;                              // 0x0003(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ESlateVisibility                              K2Node_Select_Default;                             // 0x0004(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(WIDGET_MediaCategoryListElement_C_SetAllMediaViewed) == 0x000001, "Wrong alignment on WIDGET_MediaCategoryListElement_C_SetAllMediaViewed");
static_assert(sizeof(WIDGET_MediaCategoryListElement_C_SetAllMediaViewed) == 0x000005, "Wrong size on WIDGET_MediaCategoryListElement_C_SetAllMediaViewed");
static_assert(offsetof(WIDGET_MediaCategoryListElement_C_SetAllMediaViewed, AllMessagesViewed) == 0x000000, "Member 'WIDGET_MediaCategoryListElement_C_SetAllMediaViewed::AllMessagesViewed' has a wrong offset!");
static_assert(offsetof(WIDGET_MediaCategoryListElement_C_SetAllMediaViewed, Temp_bool_Variable) == 0x000001, "Member 'WIDGET_MediaCategoryListElement_C_SetAllMediaViewed::Temp_bool_Variable' has a wrong offset!");
static_assert(offsetof(WIDGET_MediaCategoryListElement_C_SetAllMediaViewed, Temp_byte_Variable) == 0x000002, "Member 'WIDGET_MediaCategoryListElement_C_SetAllMediaViewed::Temp_byte_Variable' has a wrong offset!");
static_assert(offsetof(WIDGET_MediaCategoryListElement_C_SetAllMediaViewed, Temp_byte_Variable_1) == 0x000003, "Member 'WIDGET_MediaCategoryListElement_C_SetAllMediaViewed::Temp_byte_Variable_1' has a wrong offset!");
static_assert(offsetof(WIDGET_MediaCategoryListElement_C_SetAllMediaViewed, K2Node_Select_Default) == 0x000004, "Member 'WIDGET_MediaCategoryListElement_C_SetAllMediaViewed::K2Node_Select_Default' has a wrong offset!");

// Function WIDGET_MediaCategoryListElement.WIDGET_MediaCategoryListElement_C.SetCategorySelected
// 0x0002 (0x0002 - 0x0000)
struct WIDGET_MediaCategoryListElement_C_SetCategorySelected final
{
public:
	bool                                          NewState;                                          // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_NotEqual_BoolBool_ReturnValue;            // 0x0001(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(WIDGET_MediaCategoryListElement_C_SetCategorySelected) == 0x000001, "Wrong alignment on WIDGET_MediaCategoryListElement_C_SetCategorySelected");
static_assert(sizeof(WIDGET_MediaCategoryListElement_C_SetCategorySelected) == 0x000002, "Wrong size on WIDGET_MediaCategoryListElement_C_SetCategorySelected");
static_assert(offsetof(WIDGET_MediaCategoryListElement_C_SetCategorySelected, NewState) == 0x000000, "Member 'WIDGET_MediaCategoryListElement_C_SetCategorySelected::NewState' has a wrong offset!");
static_assert(offsetof(WIDGET_MediaCategoryListElement_C_SetCategorySelected, CallFunc_NotEqual_BoolBool_ReturnValue) == 0x000001, "Member 'WIDGET_MediaCategoryListElement_C_SetCategorySelected::CallFunc_NotEqual_BoolBool_ReturnValue' has a wrong offset!");

// Function WIDGET_MediaCategoryListElement.WIDGET_MediaCategoryListElement_C.OnCategorySelected
// 0x0010 (0x0010 - 0x0000)
struct WIDGET_MediaCategoryListElement_C_OnCategorySelected final
{
public:
	bool                                          AutoHighlightFirstItem;                            // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Not_PreBool_ReturnValue;                  // 0x0001(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_2[0x6];                                        // 0x0002(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class UUMGSequencePlayer*                     CallFunc_PlayAnimation_ReturnValue;                // 0x0008(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(WIDGET_MediaCategoryListElement_C_OnCategorySelected) == 0x000008, "Wrong alignment on WIDGET_MediaCategoryListElement_C_OnCategorySelected");
static_assert(sizeof(WIDGET_MediaCategoryListElement_C_OnCategorySelected) == 0x000010, "Wrong size on WIDGET_MediaCategoryListElement_C_OnCategorySelected");
static_assert(offsetof(WIDGET_MediaCategoryListElement_C_OnCategorySelected, AutoHighlightFirstItem) == 0x000000, "Member 'WIDGET_MediaCategoryListElement_C_OnCategorySelected::AutoHighlightFirstItem' has a wrong offset!");
static_assert(offsetof(WIDGET_MediaCategoryListElement_C_OnCategorySelected, CallFunc_Not_PreBool_ReturnValue) == 0x000001, "Member 'WIDGET_MediaCategoryListElement_C_OnCategorySelected::CallFunc_Not_PreBool_ReturnValue' has a wrong offset!");
static_assert(offsetof(WIDGET_MediaCategoryListElement_C_OnCategorySelected, CallFunc_PlayAnimation_ReturnValue) == 0x000008, "Member 'WIDGET_MediaCategoryListElement_C_OnCategorySelected::CallFunc_PlayAnimation_ReturnValue' has a wrong offset!");

// Function WIDGET_MediaCategoryListElement.WIDGET_MediaCategoryListElement_C.OnCategoryHighlighted
// 0x0018 (0x0018 - 0x0000)
struct WIDGET_MediaCategoryListElement_C_OnCategoryHighlighted final
{
public:
	bool                                          IsHighlighted;                                     // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Not_PreBool_ReturnValue;                  // 0x0001(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_2[0x6];                                        // 0x0002(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class UUMGSequencePlayer*                     CallFunc_PlayAnimation_ReturnValue;                // 0x0008(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Not_PreBool_ReturnValue_1;                // 0x0010(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(WIDGET_MediaCategoryListElement_C_OnCategoryHighlighted) == 0x000008, "Wrong alignment on WIDGET_MediaCategoryListElement_C_OnCategoryHighlighted");
static_assert(sizeof(WIDGET_MediaCategoryListElement_C_OnCategoryHighlighted) == 0x000018, "Wrong size on WIDGET_MediaCategoryListElement_C_OnCategoryHighlighted");
static_assert(offsetof(WIDGET_MediaCategoryListElement_C_OnCategoryHighlighted, IsHighlighted) == 0x000000, "Member 'WIDGET_MediaCategoryListElement_C_OnCategoryHighlighted::IsHighlighted' has a wrong offset!");
static_assert(offsetof(WIDGET_MediaCategoryListElement_C_OnCategoryHighlighted, CallFunc_Not_PreBool_ReturnValue) == 0x000001, "Member 'WIDGET_MediaCategoryListElement_C_OnCategoryHighlighted::CallFunc_Not_PreBool_ReturnValue' has a wrong offset!");
static_assert(offsetof(WIDGET_MediaCategoryListElement_C_OnCategoryHighlighted, CallFunc_PlayAnimation_ReturnValue) == 0x000008, "Member 'WIDGET_MediaCategoryListElement_C_OnCategoryHighlighted::CallFunc_PlayAnimation_ReturnValue' has a wrong offset!");
static_assert(offsetof(WIDGET_MediaCategoryListElement_C_OnCategoryHighlighted, CallFunc_Not_PreBool_ReturnValue_1) == 0x000010, "Member 'WIDGET_MediaCategoryListElement_C_OnCategoryHighlighted::CallFunc_Not_PreBool_ReturnValue_1' has a wrong offset!");

// Function WIDGET_MediaCategoryListElement.WIDGET_MediaCategoryListElement_C.RefreshText
// 0x0010 (0x0010 - 0x0000)
struct WIDGET_MediaCategoryListElement_C_RefreshText final
{
public:
	float                                         PulseProgress;                                     // 0x0000(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FColor                                 CallFunc_GetMeshUIColor_Color;                     // 0x0004(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FColor                                 CallFunc_GetMeshUIColor_Color_1;                   // 0x0008(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FColor                                 CallFunc_GetMeshUIColor_Color_2;                   // 0x000C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(WIDGET_MediaCategoryListElement_C_RefreshText) == 0x000004, "Wrong alignment on WIDGET_MediaCategoryListElement_C_RefreshText");
static_assert(sizeof(WIDGET_MediaCategoryListElement_C_RefreshText) == 0x000010, "Wrong size on WIDGET_MediaCategoryListElement_C_RefreshText");
static_assert(offsetof(WIDGET_MediaCategoryListElement_C_RefreshText, PulseProgress) == 0x000000, "Member 'WIDGET_MediaCategoryListElement_C_RefreshText::PulseProgress' has a wrong offset!");
static_assert(offsetof(WIDGET_MediaCategoryListElement_C_RefreshText, CallFunc_GetMeshUIColor_Color) == 0x000004, "Member 'WIDGET_MediaCategoryListElement_C_RefreshText::CallFunc_GetMeshUIColor_Color' has a wrong offset!");
static_assert(offsetof(WIDGET_MediaCategoryListElement_C_RefreshText, CallFunc_GetMeshUIColor_Color_1) == 0x000008, "Member 'WIDGET_MediaCategoryListElement_C_RefreshText::CallFunc_GetMeshUIColor_Color_1' has a wrong offset!");
static_assert(offsetof(WIDGET_MediaCategoryListElement_C_RefreshText, CallFunc_GetMeshUIColor_Color_2) == 0x00000C, "Member 'WIDGET_MediaCategoryListElement_C_RefreshText::CallFunc_GetMeshUIColor_Color_2' has a wrong offset!");

// Function WIDGET_MediaCategoryListElement.WIDGET_MediaCategoryListElement_C.UpdateMediaCategoryListElement
// 0x0001 (0x0001 - 0x0000)
struct WIDGET_MediaCategoryListElement_C_UpdateMediaCategoryListElement final
{
public:
	bool                                          CallFunc_Not_PreBool_ReturnValue;                  // 0x0000(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(WIDGET_MediaCategoryListElement_C_UpdateMediaCategoryListElement) == 0x000001, "Wrong alignment on WIDGET_MediaCategoryListElement_C_UpdateMediaCategoryListElement");
static_assert(sizeof(WIDGET_MediaCategoryListElement_C_UpdateMediaCategoryListElement) == 0x000001, "Wrong size on WIDGET_MediaCategoryListElement_C_UpdateMediaCategoryListElement");
static_assert(offsetof(WIDGET_MediaCategoryListElement_C_UpdateMediaCategoryListElement, CallFunc_Not_PreBool_ReturnValue) == 0x000000, "Member 'WIDGET_MediaCategoryListElement_C_UpdateMediaCategoryListElement::CallFunc_Not_PreBool_ReturnValue' has a wrong offset!");

// Function WIDGET_MediaCategoryListElement.WIDGET_MediaCategoryListElement_C.RefreshBackground
// 0x0058 (0x0058 - 0x0000)
struct WIDGET_MediaCategoryListElement_C_RefreshBackground final
{
public:
	float                                         PulseProgress;                                     // 0x0000(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_GetGameTimeInSeconds_ReturnValue;         // 0x0004(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Multiply_FloatFloat_ReturnValue;          // 0x0008(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_MakePulsatingValue_ReturnValue;           // 0x000C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Ease_ReturnValue;                         // 0x0010(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FColor                                 CallFunc_GetMeshUIColor_Color;                     // 0x0014(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FColor                                 CallFunc_GetMeshUIColor_Color_1;                   // 0x0018(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FColor                                 K2Node_MakeStruct_Color;                           // 0x001C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FColor                                 K2Node_MakeStruct_Color_1;                         // 0x0020(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           CallFunc_Conv_ColorToLinearColor_ReturnValue;      // 0x0024(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           CallFunc_Conv_ColorToLinearColor_ReturnValue_1;    // 0x0034(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           CallFunc_LinearColorLerp_ReturnValue;              // 0x0044(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FColor                                 CallFunc_Conv_LinearColorToColor_ReturnValue;      // 0x0054(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(WIDGET_MediaCategoryListElement_C_RefreshBackground) == 0x000004, "Wrong alignment on WIDGET_MediaCategoryListElement_C_RefreshBackground");
static_assert(sizeof(WIDGET_MediaCategoryListElement_C_RefreshBackground) == 0x000058, "Wrong size on WIDGET_MediaCategoryListElement_C_RefreshBackground");
static_assert(offsetof(WIDGET_MediaCategoryListElement_C_RefreshBackground, PulseProgress) == 0x000000, "Member 'WIDGET_MediaCategoryListElement_C_RefreshBackground::PulseProgress' has a wrong offset!");
static_assert(offsetof(WIDGET_MediaCategoryListElement_C_RefreshBackground, CallFunc_GetGameTimeInSeconds_ReturnValue) == 0x000004, "Member 'WIDGET_MediaCategoryListElement_C_RefreshBackground::CallFunc_GetGameTimeInSeconds_ReturnValue' has a wrong offset!");
static_assert(offsetof(WIDGET_MediaCategoryListElement_C_RefreshBackground, CallFunc_Multiply_FloatFloat_ReturnValue) == 0x000008, "Member 'WIDGET_MediaCategoryListElement_C_RefreshBackground::CallFunc_Multiply_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(WIDGET_MediaCategoryListElement_C_RefreshBackground, CallFunc_MakePulsatingValue_ReturnValue) == 0x00000C, "Member 'WIDGET_MediaCategoryListElement_C_RefreshBackground::CallFunc_MakePulsatingValue_ReturnValue' has a wrong offset!");
static_assert(offsetof(WIDGET_MediaCategoryListElement_C_RefreshBackground, CallFunc_Ease_ReturnValue) == 0x000010, "Member 'WIDGET_MediaCategoryListElement_C_RefreshBackground::CallFunc_Ease_ReturnValue' has a wrong offset!");
static_assert(offsetof(WIDGET_MediaCategoryListElement_C_RefreshBackground, CallFunc_GetMeshUIColor_Color) == 0x000014, "Member 'WIDGET_MediaCategoryListElement_C_RefreshBackground::CallFunc_GetMeshUIColor_Color' has a wrong offset!");
static_assert(offsetof(WIDGET_MediaCategoryListElement_C_RefreshBackground, CallFunc_GetMeshUIColor_Color_1) == 0x000018, "Member 'WIDGET_MediaCategoryListElement_C_RefreshBackground::CallFunc_GetMeshUIColor_Color_1' has a wrong offset!");
static_assert(offsetof(WIDGET_MediaCategoryListElement_C_RefreshBackground, K2Node_MakeStruct_Color) == 0x00001C, "Member 'WIDGET_MediaCategoryListElement_C_RefreshBackground::K2Node_MakeStruct_Color' has a wrong offset!");
static_assert(offsetof(WIDGET_MediaCategoryListElement_C_RefreshBackground, K2Node_MakeStruct_Color_1) == 0x000020, "Member 'WIDGET_MediaCategoryListElement_C_RefreshBackground::K2Node_MakeStruct_Color_1' has a wrong offset!");
static_assert(offsetof(WIDGET_MediaCategoryListElement_C_RefreshBackground, CallFunc_Conv_ColorToLinearColor_ReturnValue) == 0x000024, "Member 'WIDGET_MediaCategoryListElement_C_RefreshBackground::CallFunc_Conv_ColorToLinearColor_ReturnValue' has a wrong offset!");
static_assert(offsetof(WIDGET_MediaCategoryListElement_C_RefreshBackground, CallFunc_Conv_ColorToLinearColor_ReturnValue_1) == 0x000034, "Member 'WIDGET_MediaCategoryListElement_C_RefreshBackground::CallFunc_Conv_ColorToLinearColor_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(WIDGET_MediaCategoryListElement_C_RefreshBackground, CallFunc_LinearColorLerp_ReturnValue) == 0x000044, "Member 'WIDGET_MediaCategoryListElement_C_RefreshBackground::CallFunc_LinearColorLerp_ReturnValue' has a wrong offset!");
static_assert(offsetof(WIDGET_MediaCategoryListElement_C_RefreshBackground, CallFunc_Conv_LinearColorToColor_ReturnValue) == 0x000054, "Member 'WIDGET_MediaCategoryListElement_C_RefreshBackground::CallFunc_Conv_LinearColorToColor_ReturnValue' has a wrong offset!");

// Function WIDGET_MediaCategoryListElement.WIDGET_MediaCategoryListElement_C.UpdateMediaFilterType
// 0x0018 (0x0018 - 0x0000)
struct WIDGET_MediaCategoryListElement_C_UpdateMediaFilterType final
{
public:
	class FText                                   CallFunc_GetEnumText_MediaTabFilterType_EnumText;  // 0x0000(0x0018)()
};
static_assert(alignof(WIDGET_MediaCategoryListElement_C_UpdateMediaFilterType) == 0x000008, "Wrong alignment on WIDGET_MediaCategoryListElement_C_UpdateMediaFilterType");
static_assert(sizeof(WIDGET_MediaCategoryListElement_C_UpdateMediaFilterType) == 0x000018, "Wrong size on WIDGET_MediaCategoryListElement_C_UpdateMediaFilterType");
static_assert(offsetof(WIDGET_MediaCategoryListElement_C_UpdateMediaFilterType, CallFunc_GetEnumText_MediaTabFilterType_EnumText) == 0x000000, "Member 'WIDGET_MediaCategoryListElement_C_UpdateMediaFilterType::CallFunc_GetEnumText_MediaTabFilterType_EnumText' has a wrong offset!");

// Function WIDGET_MediaCategoryListElement.WIDGET_MediaCategoryListElement_C.UpdateClearMouseOverState
// 0x0038 (0x0038 - 0x0000)
struct WIDGET_MediaCategoryListElement_C_UpdateClearMouseOverState final
{
public:
	class APlayerController*                      CallFunc_GetPlayerController_ReturnValue;          // 0x0000(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class ACON_Hacker_C*                          K2Node_DynamicCast_AsCON_Hacker;                   // 0x0008(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0010(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class APawn*                                  CallFunc_K2_GetPawn_ReturnValue;                   // 0x0018(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsUsingGamepad_Result;                    // 0x0020(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_21[0x7];                                       // 0x0021(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class APAWN_Hacker_Simple_C*                  K2Node_DynamicCast_AsPAWN_Hacker_Simple;           // 0x0028(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess_1;                     // 0x0030(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_HasGamepadMovedCursorRecently_Result;     // 0x0031(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(WIDGET_MediaCategoryListElement_C_UpdateClearMouseOverState) == 0x000008, "Wrong alignment on WIDGET_MediaCategoryListElement_C_UpdateClearMouseOverState");
static_assert(sizeof(WIDGET_MediaCategoryListElement_C_UpdateClearMouseOverState) == 0x000038, "Wrong size on WIDGET_MediaCategoryListElement_C_UpdateClearMouseOverState");
static_assert(offsetof(WIDGET_MediaCategoryListElement_C_UpdateClearMouseOverState, CallFunc_GetPlayerController_ReturnValue) == 0x000000, "Member 'WIDGET_MediaCategoryListElement_C_UpdateClearMouseOverState::CallFunc_GetPlayerController_ReturnValue' has a wrong offset!");
static_assert(offsetof(WIDGET_MediaCategoryListElement_C_UpdateClearMouseOverState, K2Node_DynamicCast_AsCON_Hacker) == 0x000008, "Member 'WIDGET_MediaCategoryListElement_C_UpdateClearMouseOverState::K2Node_DynamicCast_AsCON_Hacker' has a wrong offset!");
static_assert(offsetof(WIDGET_MediaCategoryListElement_C_UpdateClearMouseOverState, K2Node_DynamicCast_bSuccess) == 0x000010, "Member 'WIDGET_MediaCategoryListElement_C_UpdateClearMouseOverState::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(WIDGET_MediaCategoryListElement_C_UpdateClearMouseOverState, CallFunc_K2_GetPawn_ReturnValue) == 0x000018, "Member 'WIDGET_MediaCategoryListElement_C_UpdateClearMouseOverState::CallFunc_K2_GetPawn_ReturnValue' has a wrong offset!");
static_assert(offsetof(WIDGET_MediaCategoryListElement_C_UpdateClearMouseOverState, CallFunc_IsUsingGamepad_Result) == 0x000020, "Member 'WIDGET_MediaCategoryListElement_C_UpdateClearMouseOverState::CallFunc_IsUsingGamepad_Result' has a wrong offset!");
static_assert(offsetof(WIDGET_MediaCategoryListElement_C_UpdateClearMouseOverState, K2Node_DynamicCast_AsPAWN_Hacker_Simple) == 0x000028, "Member 'WIDGET_MediaCategoryListElement_C_UpdateClearMouseOverState::K2Node_DynamicCast_AsPAWN_Hacker_Simple' has a wrong offset!");
static_assert(offsetof(WIDGET_MediaCategoryListElement_C_UpdateClearMouseOverState, K2Node_DynamicCast_bSuccess_1) == 0x000030, "Member 'WIDGET_MediaCategoryListElement_C_UpdateClearMouseOverState::K2Node_DynamicCast_bSuccess_1' has a wrong offset!");
static_assert(offsetof(WIDGET_MediaCategoryListElement_C_UpdateClearMouseOverState, CallFunc_HasGamepadMovedCursorRecently_Result) == 0x000031, "Member 'WIDGET_MediaCategoryListElement_C_UpdateClearMouseOverState::CallFunc_HasGamepadMovedCursorRecently_Result' has a wrong offset!");

// Function WIDGET_MediaCategoryListElement.WIDGET_MediaCategoryListElement_C.ToggleInteractivity
// 0x0001 (0x0001 - 0x0000)
struct WIDGET_MediaCategoryListElement_C_ToggleInteractivity final
{
public:
	bool                                          IsInteractive;                                     // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(WIDGET_MediaCategoryListElement_C_ToggleInteractivity) == 0x000001, "Wrong alignment on WIDGET_MediaCategoryListElement_C_ToggleInteractivity");
static_assert(sizeof(WIDGET_MediaCategoryListElement_C_ToggleInteractivity) == 0x000001, "Wrong size on WIDGET_MediaCategoryListElement_C_ToggleInteractivity");
static_assert(offsetof(WIDGET_MediaCategoryListElement_C_ToggleInteractivity, IsInteractive) == 0x000000, "Member 'WIDGET_MediaCategoryListElement_C_ToggleInteractivity::IsInteractive' has a wrong offset!");

// Function WIDGET_MediaCategoryListElement.WIDGET_MediaCategoryListElement_C.GetMeshWidget
// 0x0008 (0x0008 - 0x0000)
struct WIDGET_MediaCategoryListElement_C_GetMeshWidget final
{
public:
	class UGridMeshWidget*                        Result;                                            // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(WIDGET_MediaCategoryListElement_C_GetMeshWidget) == 0x000008, "Wrong alignment on WIDGET_MediaCategoryListElement_C_GetMeshWidget");
static_assert(sizeof(WIDGET_MediaCategoryListElement_C_GetMeshWidget) == 0x000008, "Wrong size on WIDGET_MediaCategoryListElement_C_GetMeshWidget");
static_assert(offsetof(WIDGET_MediaCategoryListElement_C_GetMeshWidget, Result) == 0x000000, "Member 'WIDGET_MediaCategoryListElement_C_GetMeshWidget::Result' has a wrong offset!");

// Function WIDGET_MediaCategoryListElement.WIDGET_MediaCategoryListElement_C.OnMouseOver
// 0x0001 (0x0001 - 0x0000)
struct WIDGET_MediaCategoryListElement_C_OnMouseOver final
{
public:
	bool                                          Result;                                            // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(WIDGET_MediaCategoryListElement_C_OnMouseOver) == 0x000001, "Wrong alignment on WIDGET_MediaCategoryListElement_C_OnMouseOver");
static_assert(sizeof(WIDGET_MediaCategoryListElement_C_OnMouseOver) == 0x000001, "Wrong size on WIDGET_MediaCategoryListElement_C_OnMouseOver");
static_assert(offsetof(WIDGET_MediaCategoryListElement_C_OnMouseOver, Result) == 0x000000, "Member 'WIDGET_MediaCategoryListElement_C_OnMouseOver::Result' has a wrong offset!");

// Function WIDGET_MediaCategoryListElement.WIDGET_MediaCategoryListElement_C.OnMouseExit
// 0x0001 (0x0001 - 0x0000)
struct WIDGET_MediaCategoryListElement_C_OnMouseExit final
{
public:
	bool                                          Result;                                            // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(WIDGET_MediaCategoryListElement_C_OnMouseExit) == 0x000001, "Wrong alignment on WIDGET_MediaCategoryListElement_C_OnMouseExit");
static_assert(sizeof(WIDGET_MediaCategoryListElement_C_OnMouseExit) == 0x000001, "Wrong size on WIDGET_MediaCategoryListElement_C_OnMouseExit");
static_assert(offsetof(WIDGET_MediaCategoryListElement_C_OnMouseExit, Result) == 0x000000, "Member 'WIDGET_MediaCategoryListElement_C_OnMouseExit::Result' has a wrong offset!");

// Function WIDGET_MediaCategoryListElement.WIDGET_MediaCategoryListElement_C.EnableFlickerEffect
// 0x0001 (0x0001 - 0x0000)
struct WIDGET_MediaCategoryListElement_C_EnableFlickerEffect final
{
public:
	bool                                          Result;                                            // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(WIDGET_MediaCategoryListElement_C_EnableFlickerEffect) == 0x000001, "Wrong alignment on WIDGET_MediaCategoryListElement_C_EnableFlickerEffect");
static_assert(sizeof(WIDGET_MediaCategoryListElement_C_EnableFlickerEffect) == 0x000001, "Wrong size on WIDGET_MediaCategoryListElement_C_EnableFlickerEffect");
static_assert(offsetof(WIDGET_MediaCategoryListElement_C_EnableFlickerEffect, Result) == 0x000000, "Member 'WIDGET_MediaCategoryListElement_C_EnableFlickerEffect::Result' has a wrong offset!");

// Function WIDGET_MediaCategoryListElement.WIDGET_MediaCategoryListElement_C.DisableFlickerEffect
// 0x0001 (0x0001 - 0x0000)
struct WIDGET_MediaCategoryListElement_C_DisableFlickerEffect final
{
public:
	bool                                          Result;                                            // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(WIDGET_MediaCategoryListElement_C_DisableFlickerEffect) == 0x000001, "Wrong alignment on WIDGET_MediaCategoryListElement_C_DisableFlickerEffect");
static_assert(sizeof(WIDGET_MediaCategoryListElement_C_DisableFlickerEffect) == 0x000001, "Wrong size on WIDGET_MediaCategoryListElement_C_DisableFlickerEffect");
static_assert(offsetof(WIDGET_MediaCategoryListElement_C_DisableFlickerEffect, Result) == 0x000000, "Member 'WIDGET_MediaCategoryListElement_C_DisableFlickerEffect::Result' has a wrong offset!");

}

