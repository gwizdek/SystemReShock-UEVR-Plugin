#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: PROP_Med_SmallWallLight

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "CoreUObject_structs.hpp"


namespace SDK::Params
{

// Function PROP_Med_SmallWallLight.PROP_Med_SmallWallLight_C.ExecuteUbergraph_PROP_Med_SmallWallLight
// 0x0008 (0x0008 - 0x0000)
struct PROP_Med_SmallWallLight_C_ExecuteUbergraph_PROP_Med_SmallWallLight final
{
public:
	int32                                         EntryPoint;                                        // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_ComponentBoundEvent_bVisibleState;          // 0x0004(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsWallLightFunctional_Result;             // 0x0005(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsVisible_ReturnValue;                    // 0x0006(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsWallLightFunctional_Result_1;           // 0x0007(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(PROP_Med_SmallWallLight_C_ExecuteUbergraph_PROP_Med_SmallWallLight) == 0x000004, "Wrong alignment on PROP_Med_SmallWallLight_C_ExecuteUbergraph_PROP_Med_SmallWallLight");
static_assert(sizeof(PROP_Med_SmallWallLight_C_ExecuteUbergraph_PROP_Med_SmallWallLight) == 0x000008, "Wrong size on PROP_Med_SmallWallLight_C_ExecuteUbergraph_PROP_Med_SmallWallLight");
static_assert(offsetof(PROP_Med_SmallWallLight_C_ExecuteUbergraph_PROP_Med_SmallWallLight, EntryPoint) == 0x000000, "Member 'PROP_Med_SmallWallLight_C_ExecuteUbergraph_PROP_Med_SmallWallLight::EntryPoint' has a wrong offset!");
static_assert(offsetof(PROP_Med_SmallWallLight_C_ExecuteUbergraph_PROP_Med_SmallWallLight, K2Node_ComponentBoundEvent_bVisibleState) == 0x000004, "Member 'PROP_Med_SmallWallLight_C_ExecuteUbergraph_PROP_Med_SmallWallLight::K2Node_ComponentBoundEvent_bVisibleState' has a wrong offset!");
static_assert(offsetof(PROP_Med_SmallWallLight_C_ExecuteUbergraph_PROP_Med_SmallWallLight, CallFunc_IsWallLightFunctional_Result) == 0x000005, "Member 'PROP_Med_SmallWallLight_C_ExecuteUbergraph_PROP_Med_SmallWallLight::CallFunc_IsWallLightFunctional_Result' has a wrong offset!");
static_assert(offsetof(PROP_Med_SmallWallLight_C_ExecuteUbergraph_PROP_Med_SmallWallLight, CallFunc_IsVisible_ReturnValue) == 0x000006, "Member 'PROP_Med_SmallWallLight_C_ExecuteUbergraph_PROP_Med_SmallWallLight::CallFunc_IsVisible_ReturnValue' has a wrong offset!");
static_assert(offsetof(PROP_Med_SmallWallLight_C_ExecuteUbergraph_PROP_Med_SmallWallLight, CallFunc_IsWallLightFunctional_Result_1) == 0x000007, "Member 'PROP_Med_SmallWallLight_C_ExecuteUbergraph_PROP_Med_SmallWallLight::CallFunc_IsWallLightFunctional_Result_1' has a wrong offset!");

// Function PROP_Med_SmallWallLight.PROP_Med_SmallWallLight_C.BndEvt__PROP_Med_SmallWallLight_COMP_VoxelCullable_K2Node_ComponentBoundEvent_0_CullableVisibilitySignature__DelegateSignature
// 0x0001 (0x0001 - 0x0000)
struct PROP_Med_SmallWallLight_C_BndEvt__PROP_Med_SmallWallLight_COMP_VoxelCullable_K2Node_ComponentBoundEvent_0_CullableVisibilitySignature__DelegateSignature final
{
public:
	bool                                          bVisibleState;                                     // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(PROP_Med_SmallWallLight_C_BndEvt__PROP_Med_SmallWallLight_COMP_VoxelCullable_K2Node_ComponentBoundEvent_0_CullableVisibilitySignature__DelegateSignature) == 0x000001, "Wrong alignment on PROP_Med_SmallWallLight_C_BndEvt__PROP_Med_SmallWallLight_COMP_VoxelCullable_K2Node_ComponentBoundEvent_0_CullableVisibilitySignature__DelegateSignature");
static_assert(sizeof(PROP_Med_SmallWallLight_C_BndEvt__PROP_Med_SmallWallLight_COMP_VoxelCullable_K2Node_ComponentBoundEvent_0_CullableVisibilitySignature__DelegateSignature) == 0x000001, "Wrong size on PROP_Med_SmallWallLight_C_BndEvt__PROP_Med_SmallWallLight_COMP_VoxelCullable_K2Node_ComponentBoundEvent_0_CullableVisibilitySignature__DelegateSignature");
static_assert(offsetof(PROP_Med_SmallWallLight_C_BndEvt__PROP_Med_SmallWallLight_COMP_VoxelCullable_K2Node_ComponentBoundEvent_0_CullableVisibilitySignature__DelegateSignature, bVisibleState) == 0x000000, "Member 'PROP_Med_SmallWallLight_C_BndEvt__PROP_Med_SmallWallLight_COMP_VoxelCullable_K2Node_ComponentBoundEvent_0_CullableVisibilitySignature__DelegateSignature::bVisibleState' has a wrong offset!");

// Function PROP_Med_SmallWallLight.PROP_Med_SmallWallLight_C.InitializeWallLight
// 0x0014 (0x0014 - 0x0000)
struct PROP_Med_SmallWallLight_C_InitializeWallLight final
{
public:
	TDelegate<void(float CurrValue, float LastValue)> K2Node_CreateDelegate_OutputDelegate;              // 0x0000(0x0010)(ZeroConstructor, NoDestructor)
	float                                         CallFunc_GetAttribValue_ReturnValue;               // 0x0010(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(PROP_Med_SmallWallLight_C_InitializeWallLight) == 0x000004, "Wrong alignment on PROP_Med_SmallWallLight_C_InitializeWallLight");
static_assert(sizeof(PROP_Med_SmallWallLight_C_InitializeWallLight) == 0x000014, "Wrong size on PROP_Med_SmallWallLight_C_InitializeWallLight");
static_assert(offsetof(PROP_Med_SmallWallLight_C_InitializeWallLight, K2Node_CreateDelegate_OutputDelegate) == 0x000000, "Member 'PROP_Med_SmallWallLight_C_InitializeWallLight::K2Node_CreateDelegate_OutputDelegate' has a wrong offset!");
static_assert(offsetof(PROP_Med_SmallWallLight_C_InitializeWallLight, CallFunc_GetAttribValue_ReturnValue) == 0x000010, "Member 'PROP_Med_SmallWallLight_C_InitializeWallLight::CallFunc_GetAttribValue_ReturnValue' has a wrong offset!");

// Function PROP_Med_SmallWallLight.PROP_Med_SmallWallLight_C.UpdateWallLightVisibility
// 0x0002 (0x0002 - 0x0000)
struct PROP_Med_SmallWallLight_C_UpdateWallLightVisibility final
{
public:
	bool                                          VisibilityState;                                   // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsWallLightFunctional_Result;             // 0x0001(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(PROP_Med_SmallWallLight_C_UpdateWallLightVisibility) == 0x000001, "Wrong alignment on PROP_Med_SmallWallLight_C_UpdateWallLightVisibility");
static_assert(sizeof(PROP_Med_SmallWallLight_C_UpdateWallLightVisibility) == 0x000002, "Wrong size on PROP_Med_SmallWallLight_C_UpdateWallLightVisibility");
static_assert(offsetof(PROP_Med_SmallWallLight_C_UpdateWallLightVisibility, VisibilityState) == 0x000000, "Member 'PROP_Med_SmallWallLight_C_UpdateWallLightVisibility::VisibilityState' has a wrong offset!");
static_assert(offsetof(PROP_Med_SmallWallLight_C_UpdateWallLightVisibility, CallFunc_IsWallLightFunctional_Result) == 0x000001, "Member 'PROP_Med_SmallWallLight_C_UpdateWallLightVisibility::CallFunc_IsWallLightFunctional_Result' has a wrong offset!");

// Function PROP_Med_SmallWallLight.PROP_Med_SmallWallLight_C.EVENT_OnDisableAttribChanged
// 0x000C (0x000C - 0x0000)
struct PROP_Med_SmallWallLight_C_EVENT_OnDisableAttribChanged final
{
public:
	float                                         CurrValue;                                         // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         LastValue;                                         // 0x0004(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_LessEqual_FloatFloat_ReturnValue;         // 0x0008(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsVisible_ReturnValue;                    // 0x0009(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_LessEqual_FloatFloat_ReturnValue_1;       // 0x000A(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(PROP_Med_SmallWallLight_C_EVENT_OnDisableAttribChanged) == 0x000004, "Wrong alignment on PROP_Med_SmallWallLight_C_EVENT_OnDisableAttribChanged");
static_assert(sizeof(PROP_Med_SmallWallLight_C_EVENT_OnDisableAttribChanged) == 0x00000C, "Wrong size on PROP_Med_SmallWallLight_C_EVENT_OnDisableAttribChanged");
static_assert(offsetof(PROP_Med_SmallWallLight_C_EVENT_OnDisableAttribChanged, CurrValue) == 0x000000, "Member 'PROP_Med_SmallWallLight_C_EVENT_OnDisableAttribChanged::CurrValue' has a wrong offset!");
static_assert(offsetof(PROP_Med_SmallWallLight_C_EVENT_OnDisableAttribChanged, LastValue) == 0x000004, "Member 'PROP_Med_SmallWallLight_C_EVENT_OnDisableAttribChanged::LastValue' has a wrong offset!");
static_assert(offsetof(PROP_Med_SmallWallLight_C_EVENT_OnDisableAttribChanged, CallFunc_LessEqual_FloatFloat_ReturnValue) == 0x000008, "Member 'PROP_Med_SmallWallLight_C_EVENT_OnDisableAttribChanged::CallFunc_LessEqual_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(PROP_Med_SmallWallLight_C_EVENT_OnDisableAttribChanged, CallFunc_IsVisible_ReturnValue) == 0x000009, "Member 'PROP_Med_SmallWallLight_C_EVENT_OnDisableAttribChanged::CallFunc_IsVisible_ReturnValue' has a wrong offset!");
static_assert(offsetof(PROP_Med_SmallWallLight_C_EVENT_OnDisableAttribChanged, CallFunc_LessEqual_FloatFloat_ReturnValue_1) == 0x00000A, "Member 'PROP_Med_SmallWallLight_C_EVENT_OnDisableAttribChanged::CallFunc_LessEqual_FloatFloat_ReturnValue_1' has a wrong offset!");

// Function PROP_Med_SmallWallLight.PROP_Med_SmallWallLight_C.UpdateEmissiveStrength
// 0x0020 (0x0020 - 0x0000)
struct PROP_Med_SmallWallLight_C_UpdateEmissiveStrength final
{
public:
	float                                         Scale;                                             // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          IsFunctional;                                      // 0x0004(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Temp_bool_Variable;                                // 0x0005(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_6[0x2];                                        // 0x0006(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         Temp_float_Variable;                               // 0x0008(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Multiply_FloatFloat_ReturnValue;          // 0x000C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         K2Node_Select_Default;                             // 0x0010(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Lerp_ReturnValue;                         // 0x0014(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector2D                              CallFunc_MakeVector2D_ReturnValue;                 // 0x0018(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(PROP_Med_SmallWallLight_C_UpdateEmissiveStrength) == 0x000004, "Wrong alignment on PROP_Med_SmallWallLight_C_UpdateEmissiveStrength");
static_assert(sizeof(PROP_Med_SmallWallLight_C_UpdateEmissiveStrength) == 0x000020, "Wrong size on PROP_Med_SmallWallLight_C_UpdateEmissiveStrength");
static_assert(offsetof(PROP_Med_SmallWallLight_C_UpdateEmissiveStrength, Scale) == 0x000000, "Member 'PROP_Med_SmallWallLight_C_UpdateEmissiveStrength::Scale' has a wrong offset!");
static_assert(offsetof(PROP_Med_SmallWallLight_C_UpdateEmissiveStrength, IsFunctional) == 0x000004, "Member 'PROP_Med_SmallWallLight_C_UpdateEmissiveStrength::IsFunctional' has a wrong offset!");
static_assert(offsetof(PROP_Med_SmallWallLight_C_UpdateEmissiveStrength, Temp_bool_Variable) == 0x000005, "Member 'PROP_Med_SmallWallLight_C_UpdateEmissiveStrength::Temp_bool_Variable' has a wrong offset!");
static_assert(offsetof(PROP_Med_SmallWallLight_C_UpdateEmissiveStrength, Temp_float_Variable) == 0x000008, "Member 'PROP_Med_SmallWallLight_C_UpdateEmissiveStrength::Temp_float_Variable' has a wrong offset!");
static_assert(offsetof(PROP_Med_SmallWallLight_C_UpdateEmissiveStrength, CallFunc_Multiply_FloatFloat_ReturnValue) == 0x00000C, "Member 'PROP_Med_SmallWallLight_C_UpdateEmissiveStrength::CallFunc_Multiply_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(PROP_Med_SmallWallLight_C_UpdateEmissiveStrength, K2Node_Select_Default) == 0x000010, "Member 'PROP_Med_SmallWallLight_C_UpdateEmissiveStrength::K2Node_Select_Default' has a wrong offset!");
static_assert(offsetof(PROP_Med_SmallWallLight_C_UpdateEmissiveStrength, CallFunc_Lerp_ReturnValue) == 0x000014, "Member 'PROP_Med_SmallWallLight_C_UpdateEmissiveStrength::CallFunc_Lerp_ReturnValue' has a wrong offset!");
static_assert(offsetof(PROP_Med_SmallWallLight_C_UpdateEmissiveStrength, CallFunc_MakeVector2D_ReturnValue) == 0x000018, "Member 'PROP_Med_SmallWallLight_C_UpdateEmissiveStrength::CallFunc_MakeVector2D_ReturnValue' has a wrong offset!");

// Function PROP_Med_SmallWallLight.PROP_Med_SmallWallLight_C.TryStartBlinkTimer
// 0x0038 (0x0038 - 0x0000)
struct PROP_Med_SmallWallLight_C_TryStartBlinkTimer final
{
public:
	bool                                          FromVisStateChange;                                // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Temp_bool_Variable;                                // 0x0001(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_2[0x2];                                        // 0x0002(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         Temp_float_Variable;                               // 0x0004(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Temp_float_Variable_1;                             // 0x0008(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TDelegate<void()>                             K2Node_CreateDelegate_OutputDelegate;              // 0x000C(0x0010)(ZeroConstructor, NoDestructor)
	float                                         K2Node_Select_Default;                             // 0x001C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_K2_IsTimerActiveHandle_ReturnValue;       // 0x0020(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_21[0x3];                                       // 0x0021(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_RandomFloatInRange_ReturnValue;           // 0x0024(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Not_PreBool_ReturnValue;                  // 0x0028(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_29[0x7];                                       // 0x0029(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTimerHandle                           CallFunc_K2_SetTimerDelegate_ReturnValue;          // 0x0030(0x0008)(NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(PROP_Med_SmallWallLight_C_TryStartBlinkTimer) == 0x000008, "Wrong alignment on PROP_Med_SmallWallLight_C_TryStartBlinkTimer");
static_assert(sizeof(PROP_Med_SmallWallLight_C_TryStartBlinkTimer) == 0x000038, "Wrong size on PROP_Med_SmallWallLight_C_TryStartBlinkTimer");
static_assert(offsetof(PROP_Med_SmallWallLight_C_TryStartBlinkTimer, FromVisStateChange) == 0x000000, "Member 'PROP_Med_SmallWallLight_C_TryStartBlinkTimer::FromVisStateChange' has a wrong offset!");
static_assert(offsetof(PROP_Med_SmallWallLight_C_TryStartBlinkTimer, Temp_bool_Variable) == 0x000001, "Member 'PROP_Med_SmallWallLight_C_TryStartBlinkTimer::Temp_bool_Variable' has a wrong offset!");
static_assert(offsetof(PROP_Med_SmallWallLight_C_TryStartBlinkTimer, Temp_float_Variable) == 0x000004, "Member 'PROP_Med_SmallWallLight_C_TryStartBlinkTimer::Temp_float_Variable' has a wrong offset!");
static_assert(offsetof(PROP_Med_SmallWallLight_C_TryStartBlinkTimer, Temp_float_Variable_1) == 0x000008, "Member 'PROP_Med_SmallWallLight_C_TryStartBlinkTimer::Temp_float_Variable_1' has a wrong offset!");
static_assert(offsetof(PROP_Med_SmallWallLight_C_TryStartBlinkTimer, K2Node_CreateDelegate_OutputDelegate) == 0x00000C, "Member 'PROP_Med_SmallWallLight_C_TryStartBlinkTimer::K2Node_CreateDelegate_OutputDelegate' has a wrong offset!");
static_assert(offsetof(PROP_Med_SmallWallLight_C_TryStartBlinkTimer, K2Node_Select_Default) == 0x00001C, "Member 'PROP_Med_SmallWallLight_C_TryStartBlinkTimer::K2Node_Select_Default' has a wrong offset!");
static_assert(offsetof(PROP_Med_SmallWallLight_C_TryStartBlinkTimer, CallFunc_K2_IsTimerActiveHandle_ReturnValue) == 0x000020, "Member 'PROP_Med_SmallWallLight_C_TryStartBlinkTimer::CallFunc_K2_IsTimerActiveHandle_ReturnValue' has a wrong offset!");
static_assert(offsetof(PROP_Med_SmallWallLight_C_TryStartBlinkTimer, CallFunc_RandomFloatInRange_ReturnValue) == 0x000024, "Member 'PROP_Med_SmallWallLight_C_TryStartBlinkTimer::CallFunc_RandomFloatInRange_ReturnValue' has a wrong offset!");
static_assert(offsetof(PROP_Med_SmallWallLight_C_TryStartBlinkTimer, CallFunc_Not_PreBool_ReturnValue) == 0x000028, "Member 'PROP_Med_SmallWallLight_C_TryStartBlinkTimer::CallFunc_Not_PreBool_ReturnValue' has a wrong offset!");
static_assert(offsetof(PROP_Med_SmallWallLight_C_TryStartBlinkTimer, CallFunc_K2_SetTimerDelegate_ReturnValue) == 0x000030, "Member 'PROP_Med_SmallWallLight_C_TryStartBlinkTimer::CallFunc_K2_SetTimerDelegate_ReturnValue' has a wrong offset!");

// Function PROP_Med_SmallWallLight.PROP_Med_SmallWallLight_C.IsWallLightFunctional
// 0x000C (0x000C - 0x0000)
struct PROP_Med_SmallWallLight_C_IsWallLightFunctional final
{
public:
	bool                                          Result;                                            // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_GetAttribValue_ReturnValue;               // 0x0004(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_LessEqual_FloatFloat_ReturnValue;         // 0x0008(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(PROP_Med_SmallWallLight_C_IsWallLightFunctional) == 0x000004, "Wrong alignment on PROP_Med_SmallWallLight_C_IsWallLightFunctional");
static_assert(sizeof(PROP_Med_SmallWallLight_C_IsWallLightFunctional) == 0x00000C, "Wrong size on PROP_Med_SmallWallLight_C_IsWallLightFunctional");
static_assert(offsetof(PROP_Med_SmallWallLight_C_IsWallLightFunctional, Result) == 0x000000, "Member 'PROP_Med_SmallWallLight_C_IsWallLightFunctional::Result' has a wrong offset!");
static_assert(offsetof(PROP_Med_SmallWallLight_C_IsWallLightFunctional, CallFunc_GetAttribValue_ReturnValue) == 0x000004, "Member 'PROP_Med_SmallWallLight_C_IsWallLightFunctional::CallFunc_GetAttribValue_ReturnValue' has a wrong offset!");
static_assert(offsetof(PROP_Med_SmallWallLight_C_IsWallLightFunctional, CallFunc_LessEqual_FloatFloat_ReturnValue) == 0x000008, "Member 'PROP_Med_SmallWallLight_C_IsWallLightFunctional::CallFunc_LessEqual_FloatFloat_ReturnValue' has a wrong offset!");

}

