#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: INTERACT_SentryTurret_HostileBase

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "CoreUObject_structs.hpp"
#include "INTERACT_SentryTurret_Base_classes.hpp"
#include "ENUM_DetectionState_structs.hpp"
#include "ENUM_DoorState_structs.hpp"
#include "ENUM_VisionTraceType_structs.hpp"


namespace SDK
{

// BlueprintGeneratedClass INTERACT_SentryTurret_HostileBase.INTERACT_SentryTurret_HostileBase_C
// 0x00B0 (0x0580 - 0x04D0)
class AINTERACT_SentryTurret_HostileBase_C final : public AINTERACT_SentryTurret_Base_C
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame_INTERACT_SentryTurret_HostileBase_C; // 0x04D0(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	class UCOMP_EnemySensingComponent_C*          COMP_EnemySensingComponent;                        // 0x04D8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UStaticMeshComponent*                   BodyMesh;                                          // 0x04E0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UCOMP_EnemyDetection_C*                 COMP_EnemyDetection;                               // 0x04E8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	struct FVector2D                              PitchRange;                                        // 0x04F0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector2D                              BodyProjectionRange;                               // 0x04F8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FTimerHandle                           AwarenessTimerHandle;                              // 0x0500(0x0008)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	float                                         TurretAttackTimestamp;                             // 0x0508(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, SaveGame, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         TurretRotationSpeed;                               // 0x050C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         TurretAttackRange;                                 // 0x0510(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         TurretCurrentYaw;                                  // 0x0514(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, SaveGame, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         TurretAttackMaxYaw;                                // 0x0518(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         TurretCurrentPitch;                                // 0x051C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, SaveGame, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         TurretAttackMaxPitch;                              // 0x0520(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         TurretPredictionTime;                              // 0x0524(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         TurretDeployDetectingRating;                       // 0x0528(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          IsTurretAware;                                     // 0x052C(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_52D[0x3];                                      // 0x052D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	TSoftObjectPtr<class USoundCue>               AlertSoundCue;                                     // 0x0530(0x0028)(Edit, BlueprintVisible, DisableEditOnInstance, HasGetValueTypeHash)
	TSoftObjectPtr<class USoundCue>               LostTargetSoundCue;                                // 0x0558(0x0028)(Edit, BlueprintVisible, DisableEditOnInstance, HasGetValueTypeHash)

public:
	void ExecuteUbergraph_INTERACT_SentryTurret_HostileBase(int32 EntryPoint);
	void BndEvt__INTERACT_SentryTurret_HostileBase_COMP_EnemyDetection_K2Node_ComponentBoundEvent_2_OnDetectionStateChanged__DelegateSignature(class APAWN_SystemShockCharacter_C* Character, const struct FVector& EventLocation, ENUM_DetectionState NewState, ENUM_DetectionState OldState);
	void BndEvt__INTERACT_SentryTurret_HostileBase_COMP_EnemySensingComponent_K2Node_ComponentBoundEvent_1_OnHearPawn__DelegateSignature(class APAWN_SystemShockCharacter_C* Pawn, const struct FVector& Location, float Loudness);
	void BndEvt__INTERACT_SentryTurret_HostileBase_COMP_EnemySensingComponent_K2Node_ComponentBoundEvent_0_OnSeePawn__DelegateSignature(class APAWN_SystemShockCharacter_C* Pawn, const struct FVector& Location);
	void TickSentryTurret(float DeltaSeconds);
	void UpdateSentryTurretTransition(float StateProgress);
	void InitializeSentryTurretRotation();
	void UpdateBodyMeshLocation(float DeployProgress);
	void TrySetSentryTurretIsAware(bool State, bool* Result);
	void EVENT_OnTryMakeUnawareTick();
	void CanDeploySentryTurret(bool* Result);
	void HasTickBehaviorWhilePerceptible(bool* Result);
	void OnTickStateChanged(bool State);
	void HasCriticalTickBehavior(bool* Result);
	void OnSentryTurretAwarenessChanged();
	void OnDetectionStateChanged(class APAWN_SystemShockCharacter_C* Character, const struct FVector& EventLocation, ENUM_DetectionState DetectionState);
	void SetSentryAlertState(bool State, bool IsDuringBeginPlay);
	void SetSentryHostileState(bool State);
	void RotateTurretToTargetYaw(float DesiredYaw, float DeltaSeconds, bool* Changed);
	void RotateTurretToTargetPitch(float DesiredPitch, float DeltaSeconds, bool* Changed);
	void IsSentryTurretAware(bool* Result);
	void IsLocationInTurretRange(const struct FVector& Location, bool* Result);
	void IsAttackCooldownFinished(bool* Result);
	void StartSentryTurretAttack();
	void CanAttackTarget(bool IsTargetVisible, bool* Result);
	void GetAttackCooldownDuration(float* Result);
	void CancelSentryTurretAttack();
	void GetElapsedTimeSinceLastAttack(float* Result);
	void OnMagneticDisableStateChanged(bool DisableState);
	void TryDeploySentryTurret(class AActor* SourceActor, bool* Result);
	void InitializeDestructible();
	void OnTakeDamage(class AActor* OtherActor, const struct FAttribDamageInstance& DamageInstance, class UObject* UserParams, bool* Result);
	void OnDeath(class AActor* SourceActor, bool* Result);
	void UpdateDeathSettings(bool DuringBeginPlay, bool* Result);
	void GetThreatLevel(int32* ThreatLevel);
	void CanHackDestructible(class APAWN_SystemShockCharacter_C* SourceCharacter, bool* Result);
	void GetDetectionComponent(class UCOMP_EnemyDetection_C** Result);

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"INTERACT_SentryTurret_HostileBase_C">();
	}
	static class AINTERACT_SentryTurret_HostileBase_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<AINTERACT_SentryTurret_HostileBase_C>();
	}
};
static_assert(alignof(AINTERACT_SentryTurret_HostileBase_C) == 0x000008, "Wrong alignment on AINTERACT_SentryTurret_HostileBase_C");
static_assert(sizeof(AINTERACT_SentryTurret_HostileBase_C) == 0x000580, "Wrong size on AINTERACT_SentryTurret_HostileBase_C");
static_assert(offsetof(AINTERACT_SentryTurret_HostileBase_C, UberGraphFrame_INTERACT_SentryTurret_HostileBase_C) == 0x0004D0, "Member 'AINTERACT_SentryTurret_HostileBase_C::UberGraphFrame_INTERACT_SentryTurret_HostileBase_C' has a wrong offset!");
static_assert(offsetof(AINTERACT_SentryTurret_HostileBase_C, COMP_EnemySensingComponent) == 0x0004D8, "Member 'AINTERACT_SentryTurret_HostileBase_C::COMP_EnemySensingComponent' has a wrong offset!");
static_assert(offsetof(AINTERACT_SentryTurret_HostileBase_C, BodyMesh) == 0x0004E0, "Member 'AINTERACT_SentryTurret_HostileBase_C::BodyMesh' has a wrong offset!");
static_assert(offsetof(AINTERACT_SentryTurret_HostileBase_C, COMP_EnemyDetection) == 0x0004E8, "Member 'AINTERACT_SentryTurret_HostileBase_C::COMP_EnemyDetection' has a wrong offset!");
static_assert(offsetof(AINTERACT_SentryTurret_HostileBase_C, PitchRange) == 0x0004F0, "Member 'AINTERACT_SentryTurret_HostileBase_C::PitchRange' has a wrong offset!");
static_assert(offsetof(AINTERACT_SentryTurret_HostileBase_C, BodyProjectionRange) == 0x0004F8, "Member 'AINTERACT_SentryTurret_HostileBase_C::BodyProjectionRange' has a wrong offset!");
static_assert(offsetof(AINTERACT_SentryTurret_HostileBase_C, AwarenessTimerHandle) == 0x000500, "Member 'AINTERACT_SentryTurret_HostileBase_C::AwarenessTimerHandle' has a wrong offset!");
static_assert(offsetof(AINTERACT_SentryTurret_HostileBase_C, TurretAttackTimestamp) == 0x000508, "Member 'AINTERACT_SentryTurret_HostileBase_C::TurretAttackTimestamp' has a wrong offset!");
static_assert(offsetof(AINTERACT_SentryTurret_HostileBase_C, TurretRotationSpeed) == 0x00050C, "Member 'AINTERACT_SentryTurret_HostileBase_C::TurretRotationSpeed' has a wrong offset!");
static_assert(offsetof(AINTERACT_SentryTurret_HostileBase_C, TurretAttackRange) == 0x000510, "Member 'AINTERACT_SentryTurret_HostileBase_C::TurretAttackRange' has a wrong offset!");
static_assert(offsetof(AINTERACT_SentryTurret_HostileBase_C, TurretCurrentYaw) == 0x000514, "Member 'AINTERACT_SentryTurret_HostileBase_C::TurretCurrentYaw' has a wrong offset!");
static_assert(offsetof(AINTERACT_SentryTurret_HostileBase_C, TurretAttackMaxYaw) == 0x000518, "Member 'AINTERACT_SentryTurret_HostileBase_C::TurretAttackMaxYaw' has a wrong offset!");
static_assert(offsetof(AINTERACT_SentryTurret_HostileBase_C, TurretCurrentPitch) == 0x00051C, "Member 'AINTERACT_SentryTurret_HostileBase_C::TurretCurrentPitch' has a wrong offset!");
static_assert(offsetof(AINTERACT_SentryTurret_HostileBase_C, TurretAttackMaxPitch) == 0x000520, "Member 'AINTERACT_SentryTurret_HostileBase_C::TurretAttackMaxPitch' has a wrong offset!");
static_assert(offsetof(AINTERACT_SentryTurret_HostileBase_C, TurretPredictionTime) == 0x000524, "Member 'AINTERACT_SentryTurret_HostileBase_C::TurretPredictionTime' has a wrong offset!");
static_assert(offsetof(AINTERACT_SentryTurret_HostileBase_C, TurretDeployDetectingRating) == 0x000528, "Member 'AINTERACT_SentryTurret_HostileBase_C::TurretDeployDetectingRating' has a wrong offset!");
static_assert(offsetof(AINTERACT_SentryTurret_HostileBase_C, IsTurretAware) == 0x00052C, "Member 'AINTERACT_SentryTurret_HostileBase_C::IsTurretAware' has a wrong offset!");
static_assert(offsetof(AINTERACT_SentryTurret_HostileBase_C, AlertSoundCue) == 0x000530, "Member 'AINTERACT_SentryTurret_HostileBase_C::AlertSoundCue' has a wrong offset!");
static_assert(offsetof(AINTERACT_SentryTurret_HostileBase_C, LostTargetSoundCue) == 0x000558, "Member 'AINTERACT_SentryTurret_HostileBase_C::LostTargetSoundCue' has a wrong offset!");

}

