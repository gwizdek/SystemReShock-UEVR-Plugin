#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: FUNCLIB_CoreUtility

#include "Basic.hpp"

#include "ENUM_HotbarStyle_structs.hpp"
#include "Engine_structs.hpp"
#include "ENUM_TargetID_TargetStatus_structs.hpp"
#include "ENUM_LaserRapierColor_structs.hpp"
#include "ENUM_SaveLoad_structs.hpp"
#include "ENUM_OffReducedNormal_structs.hpp"
#include "ENUM_OffLowMediumHigh_structs.hpp"
#include "ENUM_MediaTabFilterType_structs.hpp"
#include "CoreUObject_structs.hpp"
#include "ENUM_GameDifficultyConfigCategory_structs.hpp"
#include "STRUCT_LevelInfo_structs.hpp"
#include "STRUCT_EffectParams_structs.hpp"
#include "NamedInteger_structs.hpp"
#include "ENUM_Axis_structs.hpp"


namespace SDK::Params
{

// Function FUNCLIB_CoreUtility.FUNCLIB_CoreUtility_C.GetStandardName
// 0x02A8 (0x02A8 - 0x0000)
struct FUNCLIB_CoreUtility_C_GetStandardName final
{
public:
	class FText                                   FirstName;                                         // 0x0000(0x0018)(BlueprintVisible, BlueprintReadOnly, Parm)
	class FText                                   MiddleOrNickname;                                  // 0x0018(0x0018)(BlueprintVisible, BlueprintReadOnly, Parm)
	class FText                                   LastName;                                          // 0x0030(0x0018)(BlueprintVisible, BlueprintReadOnly, Parm)
	class FText                                   Title;                                             // 0x0048(0x0018)(BlueprintVisible, BlueprintReadOnly, Parm)
	class UObject*                                __WorldContext;                                    // 0x0060(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FText                                   Result;                                            // 0x0068(0x0018)(Parm, OutParm)
	class FText                                   Prefix;                                            // 0x0080(0x0018)(Edit, BlueprintVisible)
	class FText                                   Name_0;                                            // 0x0098(0x0018)(Edit, BlueprintVisible)
	bool                                          Temp_bool_Variable;                                // 0x00B0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_B1[0x7];                                       // 0x00B1(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FFormatArgumentData                    K2Node_MakeStruct_FormatArgumentData;              // 0x00B8(0x0040)(HasGetValueTypeHash)
	struct FFormatArgumentData                    K2Node_MakeStruct_FormatArgumentData_1;            // 0x00F8(0x0040)(HasGetValueTypeHash)
	TArray<struct FFormatArgumentData>            K2Node_MakeArray_Array;                            // 0x0138(0x0010)(ReferenceParm)
	class FText                                   CallFunc_Format_ReturnValue;                       // 0x0148(0x0018)()
	bool                                          CallFunc_TextIsEmpty_ReturnValue;                  // 0x0160(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_TextIsEmpty_ReturnValue_1;                // 0x0161(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_162[0x6];                                      // 0x0162(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	struct FFormatArgumentData                    K2Node_MakeStruct_FormatArgumentData_2;            // 0x0168(0x0040)(HasGetValueTypeHash)
	TArray<struct FFormatArgumentData>            K2Node_MakeArray_Array_1;                          // 0x01A8(0x0010)(ReferenceParm)
	struct FFormatArgumentData                    K2Node_MakeStruct_FormatArgumentData_3;            // 0x01B8(0x0040)(HasGetValueTypeHash)
	class FText                                   CallFunc_Format_ReturnValue_1;                     // 0x01F8(0x0018)()
	class FText                                   CallFunc_GetEmptyText_ReturnValue;                 // 0x0210(0x0018)()
	struct FFormatArgumentData                    K2Node_MakeStruct_FormatArgumentData_4;            // 0x0228(0x0040)(HasGetValueTypeHash)
	class FText                                   K2Node_Select_Default;                             // 0x0268(0x0018)()
	TArray<struct FFormatArgumentData>            K2Node_MakeArray_Array_2;                          // 0x0280(0x0010)(ReferenceParm)
	class FText                                   CallFunc_Format_ReturnValue_2;                     // 0x0290(0x0018)()
};
static_assert(alignof(FUNCLIB_CoreUtility_C_GetStandardName) == 0x000008, "Wrong alignment on FUNCLIB_CoreUtility_C_GetStandardName");
static_assert(sizeof(FUNCLIB_CoreUtility_C_GetStandardName) == 0x0002A8, "Wrong size on FUNCLIB_CoreUtility_C_GetStandardName");
static_assert(offsetof(FUNCLIB_CoreUtility_C_GetStandardName, FirstName) == 0x000000, "Member 'FUNCLIB_CoreUtility_C_GetStandardName::FirstName' has a wrong offset!");
static_assert(offsetof(FUNCLIB_CoreUtility_C_GetStandardName, MiddleOrNickname) == 0x000018, "Member 'FUNCLIB_CoreUtility_C_GetStandardName::MiddleOrNickname' has a wrong offset!");
static_assert(offsetof(FUNCLIB_CoreUtility_C_GetStandardName, LastName) == 0x000030, "Member 'FUNCLIB_CoreUtility_C_GetStandardName::LastName' has a wrong offset!");
static_assert(offsetof(FUNCLIB_CoreUtility_C_GetStandardName, Title) == 0x000048, "Member 'FUNCLIB_CoreUtility_C_GetStandardName::Title' has a wrong offset!");
static_assert(offsetof(FUNCLIB_CoreUtility_C_GetStandardName, __WorldContext) == 0x000060, "Member 'FUNCLIB_CoreUtility_C_GetStandardName::__WorldContext' has a wrong offset!");
static_assert(offsetof(FUNCLIB_CoreUtility_C_GetStandardName, Result) == 0x000068, "Member 'FUNCLIB_CoreUtility_C_GetStandardName::Result' has a wrong offset!");
static_assert(offsetof(FUNCLIB_CoreUtility_C_GetStandardName, Prefix) == 0x000080, "Member 'FUNCLIB_CoreUtility_C_GetStandardName::Prefix' has a wrong offset!");
static_assert(offsetof(FUNCLIB_CoreUtility_C_GetStandardName, Name_0) == 0x000098, "Member 'FUNCLIB_CoreUtility_C_GetStandardName::Name_0' has a wrong offset!");
static_assert(offsetof(FUNCLIB_CoreUtility_C_GetStandardName, Temp_bool_Variable) == 0x0000B0, "Member 'FUNCLIB_CoreUtility_C_GetStandardName::Temp_bool_Variable' has a wrong offset!");
static_assert(offsetof(FUNCLIB_CoreUtility_C_GetStandardName, K2Node_MakeStruct_FormatArgumentData) == 0x0000B8, "Member 'FUNCLIB_CoreUtility_C_GetStandardName::K2Node_MakeStruct_FormatArgumentData' has a wrong offset!");
static_assert(offsetof(FUNCLIB_CoreUtility_C_GetStandardName, K2Node_MakeStruct_FormatArgumentData_1) == 0x0000F8, "Member 'FUNCLIB_CoreUtility_C_GetStandardName::K2Node_MakeStruct_FormatArgumentData_1' has a wrong offset!");
static_assert(offsetof(FUNCLIB_CoreUtility_C_GetStandardName, K2Node_MakeArray_Array) == 0x000138, "Member 'FUNCLIB_CoreUtility_C_GetStandardName::K2Node_MakeArray_Array' has a wrong offset!");
static_assert(offsetof(FUNCLIB_CoreUtility_C_GetStandardName, CallFunc_Format_ReturnValue) == 0x000148, "Member 'FUNCLIB_CoreUtility_C_GetStandardName::CallFunc_Format_ReturnValue' has a wrong offset!");
static_assert(offsetof(FUNCLIB_CoreUtility_C_GetStandardName, CallFunc_TextIsEmpty_ReturnValue) == 0x000160, "Member 'FUNCLIB_CoreUtility_C_GetStandardName::CallFunc_TextIsEmpty_ReturnValue' has a wrong offset!");
static_assert(offsetof(FUNCLIB_CoreUtility_C_GetStandardName, CallFunc_TextIsEmpty_ReturnValue_1) == 0x000161, "Member 'FUNCLIB_CoreUtility_C_GetStandardName::CallFunc_TextIsEmpty_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(FUNCLIB_CoreUtility_C_GetStandardName, K2Node_MakeStruct_FormatArgumentData_2) == 0x000168, "Member 'FUNCLIB_CoreUtility_C_GetStandardName::K2Node_MakeStruct_FormatArgumentData_2' has a wrong offset!");
static_assert(offsetof(FUNCLIB_CoreUtility_C_GetStandardName, K2Node_MakeArray_Array_1) == 0x0001A8, "Member 'FUNCLIB_CoreUtility_C_GetStandardName::K2Node_MakeArray_Array_1' has a wrong offset!");
static_assert(offsetof(FUNCLIB_CoreUtility_C_GetStandardName, K2Node_MakeStruct_FormatArgumentData_3) == 0x0001B8, "Member 'FUNCLIB_CoreUtility_C_GetStandardName::K2Node_MakeStruct_FormatArgumentData_3' has a wrong offset!");
static_assert(offsetof(FUNCLIB_CoreUtility_C_GetStandardName, CallFunc_Format_ReturnValue_1) == 0x0001F8, "Member 'FUNCLIB_CoreUtility_C_GetStandardName::CallFunc_Format_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(FUNCLIB_CoreUtility_C_GetStandardName, CallFunc_GetEmptyText_ReturnValue) == 0x000210, "Member 'FUNCLIB_CoreUtility_C_GetStandardName::CallFunc_GetEmptyText_ReturnValue' has a wrong offset!");
static_assert(offsetof(FUNCLIB_CoreUtility_C_GetStandardName, K2Node_MakeStruct_FormatArgumentData_4) == 0x000228, "Member 'FUNCLIB_CoreUtility_C_GetStandardName::K2Node_MakeStruct_FormatArgumentData_4' has a wrong offset!");
static_assert(offsetof(FUNCLIB_CoreUtility_C_GetStandardName, K2Node_Select_Default) == 0x000268, "Member 'FUNCLIB_CoreUtility_C_GetStandardName::K2Node_Select_Default' has a wrong offset!");
static_assert(offsetof(FUNCLIB_CoreUtility_C_GetStandardName, K2Node_MakeArray_Array_2) == 0x000280, "Member 'FUNCLIB_CoreUtility_C_GetStandardName::K2Node_MakeArray_Array_2' has a wrong offset!");
static_assert(offsetof(FUNCLIB_CoreUtility_C_GetStandardName, CallFunc_Format_ReturnValue_2) == 0x000290, "Member 'FUNCLIB_CoreUtility_C_GetStandardName::CallFunc_Format_ReturnValue_2' has a wrong offset!");

// Function FUNCLIB_CoreUtility.FUNCLIB_CoreUtility_C.GetFullName
// 0x03A0 (0x03A0 - 0x0000)
struct FUNCLIB_CoreUtility_C_GetFullName final
{
public:
	class FText                                   FirstName;                                         // 0x0000(0x0018)(BlueprintVisible, BlueprintReadOnly, Parm)
	class FText                                   MiddleOrNickname;                                  // 0x0018(0x0018)(BlueprintVisible, BlueprintReadOnly, Parm)
	class FText                                   LastName;                                          // 0x0030(0x0018)(BlueprintVisible, BlueprintReadOnly, Parm)
	class FText                                   Title;                                             // 0x0048(0x0018)(BlueprintVisible, BlueprintReadOnly, Parm)
	class UObject*                                __WorldContext;                                    // 0x0060(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FText                                   Result;                                            // 0x0068(0x0018)(Parm, OutParm)
	class FText                                   Prefix;                                            // 0x0080(0x0018)(Edit, BlueprintVisible)
	class FText                                   Name_0;                                            // 0x0098(0x0018)(Edit, BlueprintVisible)
	bool                                          Temp_bool_Variable;                                // 0x00B0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_B1[0x7];                                       // 0x00B1(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FFormatArgumentData                    K2Node_MakeStruct_FormatArgumentData;              // 0x00B8(0x0040)(HasGetValueTypeHash)
	struct FFormatArgumentData                    K2Node_MakeStruct_FormatArgumentData_1;            // 0x00F8(0x0040)(HasGetValueTypeHash)
	struct FFormatArgumentData                    K2Node_MakeStruct_FormatArgumentData_2;            // 0x0138(0x0040)(HasGetValueTypeHash)
	struct FFormatArgumentData                    K2Node_MakeStruct_FormatArgumentData_3;            // 0x0178(0x0040)(HasGetValueTypeHash)
	TArray<struct FFormatArgumentData>            K2Node_MakeArray_Array;                            // 0x01B8(0x0010)(ReferenceParm)
	class FText                                   CallFunc_Format_ReturnValue;                       // 0x01C8(0x0018)()
	struct FFormatArgumentData                    K2Node_MakeStruct_FormatArgumentData_4;            // 0x01E0(0x0040)(HasGetValueTypeHash)
	TArray<struct FFormatArgumentData>            K2Node_MakeArray_Array_1;                          // 0x0220(0x0010)(ReferenceParm)
	class FText                                   CallFunc_Format_ReturnValue_1;                     // 0x0230(0x0018)()
	bool                                          CallFunc_TextIsEmpty_ReturnValue;                  // 0x0248(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_249[0x7];                                      // 0x0249(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FFormatArgumentData                    K2Node_MakeStruct_FormatArgumentData_5;            // 0x0250(0x0040)(HasGetValueTypeHash)
	TArray<struct FFormatArgumentData>            K2Node_MakeArray_Array_2;                          // 0x0290(0x0010)(ReferenceParm)
	bool                                          CallFunc_TextIsEmpty_ReturnValue_1;                // 0x02A0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_2A1[0x7];                                      // 0x02A1(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   CallFunc_Format_ReturnValue_2;                     // 0x02A8(0x0018)()
	bool                                          CallFunc_TextIsEmpty_ReturnValue_2;                // 0x02C0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_2C1[0x7];                                      // 0x02C1(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FFormatArgumentData                    K2Node_MakeStruct_FormatArgumentData_6;            // 0x02C8(0x0040)(HasGetValueTypeHash)
	class FText                                   CallFunc_GetEmptyText_ReturnValue;                 // 0x0308(0x0018)()
	struct FFormatArgumentData                    K2Node_MakeStruct_FormatArgumentData_7;            // 0x0320(0x0040)(HasGetValueTypeHash)
	class FText                                   K2Node_Select_Default;                             // 0x0360(0x0018)()
	TArray<struct FFormatArgumentData>            K2Node_MakeArray_Array_3;                          // 0x0378(0x0010)(ReferenceParm)
	class FText                                   CallFunc_Format_ReturnValue_3;                     // 0x0388(0x0018)()
};
static_assert(alignof(FUNCLIB_CoreUtility_C_GetFullName) == 0x000008, "Wrong alignment on FUNCLIB_CoreUtility_C_GetFullName");
static_assert(sizeof(FUNCLIB_CoreUtility_C_GetFullName) == 0x0003A0, "Wrong size on FUNCLIB_CoreUtility_C_GetFullName");
static_assert(offsetof(FUNCLIB_CoreUtility_C_GetFullName, FirstName) == 0x000000, "Member 'FUNCLIB_CoreUtility_C_GetFullName::FirstName' has a wrong offset!");
static_assert(offsetof(FUNCLIB_CoreUtility_C_GetFullName, MiddleOrNickname) == 0x000018, "Member 'FUNCLIB_CoreUtility_C_GetFullName::MiddleOrNickname' has a wrong offset!");
static_assert(offsetof(FUNCLIB_CoreUtility_C_GetFullName, LastName) == 0x000030, "Member 'FUNCLIB_CoreUtility_C_GetFullName::LastName' has a wrong offset!");
static_assert(offsetof(FUNCLIB_CoreUtility_C_GetFullName, Title) == 0x000048, "Member 'FUNCLIB_CoreUtility_C_GetFullName::Title' has a wrong offset!");
static_assert(offsetof(FUNCLIB_CoreUtility_C_GetFullName, __WorldContext) == 0x000060, "Member 'FUNCLIB_CoreUtility_C_GetFullName::__WorldContext' has a wrong offset!");
static_assert(offsetof(FUNCLIB_CoreUtility_C_GetFullName, Result) == 0x000068, "Member 'FUNCLIB_CoreUtility_C_GetFullName::Result' has a wrong offset!");
static_assert(offsetof(FUNCLIB_CoreUtility_C_GetFullName, Prefix) == 0x000080, "Member 'FUNCLIB_CoreUtility_C_GetFullName::Prefix' has a wrong offset!");
static_assert(offsetof(FUNCLIB_CoreUtility_C_GetFullName, Name_0) == 0x000098, "Member 'FUNCLIB_CoreUtility_C_GetFullName::Name_0' has a wrong offset!");
static_assert(offsetof(FUNCLIB_CoreUtility_C_GetFullName, Temp_bool_Variable) == 0x0000B0, "Member 'FUNCLIB_CoreUtility_C_GetFullName::Temp_bool_Variable' has a wrong offset!");
static_assert(offsetof(FUNCLIB_CoreUtility_C_GetFullName, K2Node_MakeStruct_FormatArgumentData) == 0x0000B8, "Member 'FUNCLIB_CoreUtility_C_GetFullName::K2Node_MakeStruct_FormatArgumentData' has a wrong offset!");
static_assert(offsetof(FUNCLIB_CoreUtility_C_GetFullName, K2Node_MakeStruct_FormatArgumentData_1) == 0x0000F8, "Member 'FUNCLIB_CoreUtility_C_GetFullName::K2Node_MakeStruct_FormatArgumentData_1' has a wrong offset!");
static_assert(offsetof(FUNCLIB_CoreUtility_C_GetFullName, K2Node_MakeStruct_FormatArgumentData_2) == 0x000138, "Member 'FUNCLIB_CoreUtility_C_GetFullName::K2Node_MakeStruct_FormatArgumentData_2' has a wrong offset!");
static_assert(offsetof(FUNCLIB_CoreUtility_C_GetFullName, K2Node_MakeStruct_FormatArgumentData_3) == 0x000178, "Member 'FUNCLIB_CoreUtility_C_GetFullName::K2Node_MakeStruct_FormatArgumentData_3' has a wrong offset!");
static_assert(offsetof(FUNCLIB_CoreUtility_C_GetFullName, K2Node_MakeArray_Array) == 0x0001B8, "Member 'FUNCLIB_CoreUtility_C_GetFullName::K2Node_MakeArray_Array' has a wrong offset!");
static_assert(offsetof(FUNCLIB_CoreUtility_C_GetFullName, CallFunc_Format_ReturnValue) == 0x0001C8, "Member 'FUNCLIB_CoreUtility_C_GetFullName::CallFunc_Format_ReturnValue' has a wrong offset!");
static_assert(offsetof(FUNCLIB_CoreUtility_C_GetFullName, K2Node_MakeStruct_FormatArgumentData_4) == 0x0001E0, "Member 'FUNCLIB_CoreUtility_C_GetFullName::K2Node_MakeStruct_FormatArgumentData_4' has a wrong offset!");
static_assert(offsetof(FUNCLIB_CoreUtility_C_GetFullName, K2Node_MakeArray_Array_1) == 0x000220, "Member 'FUNCLIB_CoreUtility_C_GetFullName::K2Node_MakeArray_Array_1' has a wrong offset!");
static_assert(offsetof(FUNCLIB_CoreUtility_C_GetFullName, CallFunc_Format_ReturnValue_1) == 0x000230, "Member 'FUNCLIB_CoreUtility_C_GetFullName::CallFunc_Format_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(FUNCLIB_CoreUtility_C_GetFullName, CallFunc_TextIsEmpty_ReturnValue) == 0x000248, "Member 'FUNCLIB_CoreUtility_C_GetFullName::CallFunc_TextIsEmpty_ReturnValue' has a wrong offset!");
static_assert(offsetof(FUNCLIB_CoreUtility_C_GetFullName, K2Node_MakeStruct_FormatArgumentData_5) == 0x000250, "Member 'FUNCLIB_CoreUtility_C_GetFullName::K2Node_MakeStruct_FormatArgumentData_5' has a wrong offset!");
static_assert(offsetof(FUNCLIB_CoreUtility_C_GetFullName, K2Node_MakeArray_Array_2) == 0x000290, "Member 'FUNCLIB_CoreUtility_C_GetFullName::K2Node_MakeArray_Array_2' has a wrong offset!");
static_assert(offsetof(FUNCLIB_CoreUtility_C_GetFullName, CallFunc_TextIsEmpty_ReturnValue_1) == 0x0002A0, "Member 'FUNCLIB_CoreUtility_C_GetFullName::CallFunc_TextIsEmpty_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(FUNCLIB_CoreUtility_C_GetFullName, CallFunc_Format_ReturnValue_2) == 0x0002A8, "Member 'FUNCLIB_CoreUtility_C_GetFullName::CallFunc_Format_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(FUNCLIB_CoreUtility_C_GetFullName, CallFunc_TextIsEmpty_ReturnValue_2) == 0x0002C0, "Member 'FUNCLIB_CoreUtility_C_GetFullName::CallFunc_TextIsEmpty_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(FUNCLIB_CoreUtility_C_GetFullName, K2Node_MakeStruct_FormatArgumentData_6) == 0x0002C8, "Member 'FUNCLIB_CoreUtility_C_GetFullName::K2Node_MakeStruct_FormatArgumentData_6' has a wrong offset!");
static_assert(offsetof(FUNCLIB_CoreUtility_C_GetFullName, CallFunc_GetEmptyText_ReturnValue) == 0x000308, "Member 'FUNCLIB_CoreUtility_C_GetFullName::CallFunc_GetEmptyText_ReturnValue' has a wrong offset!");
static_assert(offsetof(FUNCLIB_CoreUtility_C_GetFullName, K2Node_MakeStruct_FormatArgumentData_7) == 0x000320, "Member 'FUNCLIB_CoreUtility_C_GetFullName::K2Node_MakeStruct_FormatArgumentData_7' has a wrong offset!");
static_assert(offsetof(FUNCLIB_CoreUtility_C_GetFullName, K2Node_Select_Default) == 0x000360, "Member 'FUNCLIB_CoreUtility_C_GetFullName::K2Node_Select_Default' has a wrong offset!");
static_assert(offsetof(FUNCLIB_CoreUtility_C_GetFullName, K2Node_MakeArray_Array_3) == 0x000378, "Member 'FUNCLIB_CoreUtility_C_GetFullName::K2Node_MakeArray_Array_3' has a wrong offset!");
static_assert(offsetof(FUNCLIB_CoreUtility_C_GetFullName, CallFunc_Format_ReturnValue_3) == 0x000388, "Member 'FUNCLIB_CoreUtility_C_GetFullName::CallFunc_Format_ReturnValue_3' has a wrong offset!");

// Function FUNCLIB_CoreUtility.FUNCLIB_CoreUtility_C.SetVectorElementFromAxis
// 0x0070 (0x0070 - 0x0000)
struct FUNCLIB_CoreUtility_C_SetVectorElementFromAxis final
{
public:
	struct FVector                                Vector;                                            // 0x0000(0x000C)(BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Value;                                             // 0x000C(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ENUM_Axis                                     Axis;                                              // 0x0010(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UObject*                                __WorldContext;                                    // 0x0018(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_SwitchEnum_CmpSuccess;                      // 0x0020(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_21[0x3];                                       // 0x0021(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_BreakVector_X;                            // 0x0024(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector_Y;                            // 0x0028(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector_Z;                            // 0x002C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_MakeVector_ReturnValue;                   // 0x0030(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector_X_1;                          // 0x003C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector_Y_1;                          // 0x0040(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector_Z_1;                          // 0x0044(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_MakeVector_ReturnValue_1;                 // 0x0048(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector_X_2;                          // 0x0054(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector_Y_2;                          // 0x0058(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector_Z_2;                          // 0x005C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_MakeVector_ReturnValue_2;                 // 0x0060(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(FUNCLIB_CoreUtility_C_SetVectorElementFromAxis) == 0x000008, "Wrong alignment on FUNCLIB_CoreUtility_C_SetVectorElementFromAxis");
static_assert(sizeof(FUNCLIB_CoreUtility_C_SetVectorElementFromAxis) == 0x000070, "Wrong size on FUNCLIB_CoreUtility_C_SetVectorElementFromAxis");
static_assert(offsetof(FUNCLIB_CoreUtility_C_SetVectorElementFromAxis, Vector) == 0x000000, "Member 'FUNCLIB_CoreUtility_C_SetVectorElementFromAxis::Vector' has a wrong offset!");
static_assert(offsetof(FUNCLIB_CoreUtility_C_SetVectorElementFromAxis, Value) == 0x00000C, "Member 'FUNCLIB_CoreUtility_C_SetVectorElementFromAxis::Value' has a wrong offset!");
static_assert(offsetof(FUNCLIB_CoreUtility_C_SetVectorElementFromAxis, Axis) == 0x000010, "Member 'FUNCLIB_CoreUtility_C_SetVectorElementFromAxis::Axis' has a wrong offset!");
static_assert(offsetof(FUNCLIB_CoreUtility_C_SetVectorElementFromAxis, __WorldContext) == 0x000018, "Member 'FUNCLIB_CoreUtility_C_SetVectorElementFromAxis::__WorldContext' has a wrong offset!");
static_assert(offsetof(FUNCLIB_CoreUtility_C_SetVectorElementFromAxis, K2Node_SwitchEnum_CmpSuccess) == 0x000020, "Member 'FUNCLIB_CoreUtility_C_SetVectorElementFromAxis::K2Node_SwitchEnum_CmpSuccess' has a wrong offset!");
static_assert(offsetof(FUNCLIB_CoreUtility_C_SetVectorElementFromAxis, CallFunc_BreakVector_X) == 0x000024, "Member 'FUNCLIB_CoreUtility_C_SetVectorElementFromAxis::CallFunc_BreakVector_X' has a wrong offset!");
static_assert(offsetof(FUNCLIB_CoreUtility_C_SetVectorElementFromAxis, CallFunc_BreakVector_Y) == 0x000028, "Member 'FUNCLIB_CoreUtility_C_SetVectorElementFromAxis::CallFunc_BreakVector_Y' has a wrong offset!");
static_assert(offsetof(FUNCLIB_CoreUtility_C_SetVectorElementFromAxis, CallFunc_BreakVector_Z) == 0x00002C, "Member 'FUNCLIB_CoreUtility_C_SetVectorElementFromAxis::CallFunc_BreakVector_Z' has a wrong offset!");
static_assert(offsetof(FUNCLIB_CoreUtility_C_SetVectorElementFromAxis, CallFunc_MakeVector_ReturnValue) == 0x000030, "Member 'FUNCLIB_CoreUtility_C_SetVectorElementFromAxis::CallFunc_MakeVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(FUNCLIB_CoreUtility_C_SetVectorElementFromAxis, CallFunc_BreakVector_X_1) == 0x00003C, "Member 'FUNCLIB_CoreUtility_C_SetVectorElementFromAxis::CallFunc_BreakVector_X_1' has a wrong offset!");
static_assert(offsetof(FUNCLIB_CoreUtility_C_SetVectorElementFromAxis, CallFunc_BreakVector_Y_1) == 0x000040, "Member 'FUNCLIB_CoreUtility_C_SetVectorElementFromAxis::CallFunc_BreakVector_Y_1' has a wrong offset!");
static_assert(offsetof(FUNCLIB_CoreUtility_C_SetVectorElementFromAxis, CallFunc_BreakVector_Z_1) == 0x000044, "Member 'FUNCLIB_CoreUtility_C_SetVectorElementFromAxis::CallFunc_BreakVector_Z_1' has a wrong offset!");
static_assert(offsetof(FUNCLIB_CoreUtility_C_SetVectorElementFromAxis, CallFunc_MakeVector_ReturnValue_1) == 0x000048, "Member 'FUNCLIB_CoreUtility_C_SetVectorElementFromAxis::CallFunc_MakeVector_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(FUNCLIB_CoreUtility_C_SetVectorElementFromAxis, CallFunc_BreakVector_X_2) == 0x000054, "Member 'FUNCLIB_CoreUtility_C_SetVectorElementFromAxis::CallFunc_BreakVector_X_2' has a wrong offset!");
static_assert(offsetof(FUNCLIB_CoreUtility_C_SetVectorElementFromAxis, CallFunc_BreakVector_Y_2) == 0x000058, "Member 'FUNCLIB_CoreUtility_C_SetVectorElementFromAxis::CallFunc_BreakVector_Y_2' has a wrong offset!");
static_assert(offsetof(FUNCLIB_CoreUtility_C_SetVectorElementFromAxis, CallFunc_BreakVector_Z_2) == 0x00005C, "Member 'FUNCLIB_CoreUtility_C_SetVectorElementFromAxis::CallFunc_BreakVector_Z_2' has a wrong offset!");
static_assert(offsetof(FUNCLIB_CoreUtility_C_SetVectorElementFromAxis, CallFunc_MakeVector_ReturnValue_2) == 0x000060, "Member 'FUNCLIB_CoreUtility_C_SetVectorElementFromAxis::CallFunc_MakeVector_ReturnValue_2' has a wrong offset!");

// Function FUNCLIB_CoreUtility.FUNCLIB_CoreUtility_C.GetVectorElementFromAxis
// 0x0030 (0x0030 - 0x0000)
struct FUNCLIB_CoreUtility_C_GetVectorElementFromAxis final
{
public:
	struct FVector                                Vector;                                            // 0x0000(0x000C)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ENUM_Axis                                     Axis;                                              // 0x000C(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_D[0x3];                                        // 0x000D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class UObject*                                __WorldContext;                                    // 0x0010(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Result;                                            // 0x0018(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector_X;                            // 0x001C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector_Y;                            // 0x0020(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector_Z;                            // 0x0024(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_SwitchEnum_CmpSuccess;                      // 0x0028(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(FUNCLIB_CoreUtility_C_GetVectorElementFromAxis) == 0x000008, "Wrong alignment on FUNCLIB_CoreUtility_C_GetVectorElementFromAxis");
static_assert(sizeof(FUNCLIB_CoreUtility_C_GetVectorElementFromAxis) == 0x000030, "Wrong size on FUNCLIB_CoreUtility_C_GetVectorElementFromAxis");
static_assert(offsetof(FUNCLIB_CoreUtility_C_GetVectorElementFromAxis, Vector) == 0x000000, "Member 'FUNCLIB_CoreUtility_C_GetVectorElementFromAxis::Vector' has a wrong offset!");
static_assert(offsetof(FUNCLIB_CoreUtility_C_GetVectorElementFromAxis, Axis) == 0x00000C, "Member 'FUNCLIB_CoreUtility_C_GetVectorElementFromAxis::Axis' has a wrong offset!");
static_assert(offsetof(FUNCLIB_CoreUtility_C_GetVectorElementFromAxis, __WorldContext) == 0x000010, "Member 'FUNCLIB_CoreUtility_C_GetVectorElementFromAxis::__WorldContext' has a wrong offset!");
static_assert(offsetof(FUNCLIB_CoreUtility_C_GetVectorElementFromAxis, Result) == 0x000018, "Member 'FUNCLIB_CoreUtility_C_GetVectorElementFromAxis::Result' has a wrong offset!");
static_assert(offsetof(FUNCLIB_CoreUtility_C_GetVectorElementFromAxis, CallFunc_BreakVector_X) == 0x00001C, "Member 'FUNCLIB_CoreUtility_C_GetVectorElementFromAxis::CallFunc_BreakVector_X' has a wrong offset!");
static_assert(offsetof(FUNCLIB_CoreUtility_C_GetVectorElementFromAxis, CallFunc_BreakVector_Y) == 0x000020, "Member 'FUNCLIB_CoreUtility_C_GetVectorElementFromAxis::CallFunc_BreakVector_Y' has a wrong offset!");
static_assert(offsetof(FUNCLIB_CoreUtility_C_GetVectorElementFromAxis, CallFunc_BreakVector_Z) == 0x000024, "Member 'FUNCLIB_CoreUtility_C_GetVectorElementFromAxis::CallFunc_BreakVector_Z' has a wrong offset!");
static_assert(offsetof(FUNCLIB_CoreUtility_C_GetVectorElementFromAxis, K2Node_SwitchEnum_CmpSuccess) == 0x000028, "Member 'FUNCLIB_CoreUtility_C_GetVectorElementFromAxis::K2Node_SwitchEnum_CmpSuccess' has a wrong offset!");

// Function FUNCLIB_CoreUtility.FUNCLIB_CoreUtility_C.SetVector4ElementByIndex
// 0x0070 (0x0070 - 0x0000)
struct FUNCLIB_CoreUtility_C_SetVector4ElementByIndex final
{
public:
	struct FVector4                               Vector;                                            // 0x0000(0x0010)(BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Element;                                           // 0x0010(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Index_0;                                           // 0x0014(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UObject*                                __WorldContext;                                    // 0x0018(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_SwitchInteger_CmpSuccess;                   // 0x0020(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_21[0xF];                                       // 0x0021(0x000F)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector4                               K2Node_MakeStruct_Vector4;                         // 0x0030(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector4                               K2Node_MakeStruct_Vector4_1;                       // 0x0040(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector4                               K2Node_MakeStruct_Vector4_2;                       // 0x0050(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector4                               K2Node_MakeStruct_Vector4_3;                       // 0x0060(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(FUNCLIB_CoreUtility_C_SetVector4ElementByIndex) == 0x000010, "Wrong alignment on FUNCLIB_CoreUtility_C_SetVector4ElementByIndex");
static_assert(sizeof(FUNCLIB_CoreUtility_C_SetVector4ElementByIndex) == 0x000070, "Wrong size on FUNCLIB_CoreUtility_C_SetVector4ElementByIndex");
static_assert(offsetof(FUNCLIB_CoreUtility_C_SetVector4ElementByIndex, Vector) == 0x000000, "Member 'FUNCLIB_CoreUtility_C_SetVector4ElementByIndex::Vector' has a wrong offset!");
static_assert(offsetof(FUNCLIB_CoreUtility_C_SetVector4ElementByIndex, Element) == 0x000010, "Member 'FUNCLIB_CoreUtility_C_SetVector4ElementByIndex::Element' has a wrong offset!");
static_assert(offsetof(FUNCLIB_CoreUtility_C_SetVector4ElementByIndex, Index_0) == 0x000014, "Member 'FUNCLIB_CoreUtility_C_SetVector4ElementByIndex::Index_0' has a wrong offset!");
static_assert(offsetof(FUNCLIB_CoreUtility_C_SetVector4ElementByIndex, __WorldContext) == 0x000018, "Member 'FUNCLIB_CoreUtility_C_SetVector4ElementByIndex::__WorldContext' has a wrong offset!");
static_assert(offsetof(FUNCLIB_CoreUtility_C_SetVector4ElementByIndex, K2Node_SwitchInteger_CmpSuccess) == 0x000020, "Member 'FUNCLIB_CoreUtility_C_SetVector4ElementByIndex::K2Node_SwitchInteger_CmpSuccess' has a wrong offset!");
static_assert(offsetof(FUNCLIB_CoreUtility_C_SetVector4ElementByIndex, K2Node_MakeStruct_Vector4) == 0x000030, "Member 'FUNCLIB_CoreUtility_C_SetVector4ElementByIndex::K2Node_MakeStruct_Vector4' has a wrong offset!");
static_assert(offsetof(FUNCLIB_CoreUtility_C_SetVector4ElementByIndex, K2Node_MakeStruct_Vector4_1) == 0x000040, "Member 'FUNCLIB_CoreUtility_C_SetVector4ElementByIndex::K2Node_MakeStruct_Vector4_1' has a wrong offset!");
static_assert(offsetof(FUNCLIB_CoreUtility_C_SetVector4ElementByIndex, K2Node_MakeStruct_Vector4_2) == 0x000050, "Member 'FUNCLIB_CoreUtility_C_SetVector4ElementByIndex::K2Node_MakeStruct_Vector4_2' has a wrong offset!");
static_assert(offsetof(FUNCLIB_CoreUtility_C_SetVector4ElementByIndex, K2Node_MakeStruct_Vector4_3) == 0x000060, "Member 'FUNCLIB_CoreUtility_C_SetVector4ElementByIndex::K2Node_MakeStruct_Vector4_3' has a wrong offset!");

// Function FUNCLIB_CoreUtility.FUNCLIB_CoreUtility_C.GetBestAxisDirection
// 0x0100 (0x0100 - 0x0000)
struct FUNCLIB_CoreUtility_C_GetBestAxisDirection final
{
public:
	struct FVector                                InputDirection;                                    // 0x0000(0x000C)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Threshold;                                         // 0x000C(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UObject*                                __WorldContext;                                    // 0x0010(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                AxisDirection;                                     // 0x0018(0x000C)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                AbsInputVector;                                    // 0x0024(0x000C)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector_X;                            // 0x0030(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector_Y;                            // 0x0034(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector_Z;                            // 0x0038(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_SignOfFloat_ReturnValue;                  // 0x003C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_MakeVector_ReturnValue;                   // 0x0040(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Vector_GetAbs_ReturnValue;                // 0x004C(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector_X_1;                          // 0x0058(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector_Y_1;                          // 0x005C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector_Z_1;                          // 0x0060(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_SignOfFloat_ReturnValue_1;                // 0x0064(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_MakeVector_ReturnValue_1;                 // 0x0068(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector_X_2;                          // 0x0074(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector_Y_2;                          // 0x0078(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector_Z_2;                          // 0x007C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_SignOfFloat_ReturnValue_2;                // 0x0080(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_MakeVector_ReturnValue_2;                 // 0x0084(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector_X_3;                          // 0x0090(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector_Y_3;                          // 0x0094(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector_Z_3;                          // 0x0098(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Add_FloatFloat_ReturnValue;               // 0x009C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_GreaterEqual_FloatFloat_ReturnValue;      // 0x00A0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_A1[0x3];                                       // 0x00A1(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_BreakVector_X_4;                          // 0x00A4(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector_Y_4;                          // 0x00A8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector_Z_4;                          // 0x00AC(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Add_FloatFloat_ReturnValue_1;             // 0x00B0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_GreaterEqual_FloatFloat_ReturnValue_1;    // 0x00B4(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_B5[0x3];                                       // 0x00B5(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_BreakVector_X_5;                          // 0x00B8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector_Y_5;                          // 0x00BC(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector_Z_5;                          // 0x00C0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Add_FloatFloat_ReturnValue_2;             // 0x00C4(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_GreaterEqual_FloatFloat_ReturnValue_2;    // 0x00C8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_C9[0x3];                                       // 0x00C9(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_BreakVector_X_6;                          // 0x00CC(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector_Y_6;                          // 0x00D0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector_Z_6;                          // 0x00D4(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_FloatFloat_ReturnValue;              // 0x00D8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_D9[0x3];                                       // 0x00D9(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_BreakVector_X_7;                          // 0x00DC(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector_Y_7;                          // 0x00E0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector_Z_7;                          // 0x00E4(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Greater_FloatFloat_ReturnValue;           // 0x00E8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_E9[0x3];                                       // 0x00E9(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_BreakVector_X_8;                          // 0x00EC(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector_Y_8;                          // 0x00F0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector_Z_8;                          // 0x00F4(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Greater_FloatFloat_ReturnValue_1;         // 0x00F8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(FUNCLIB_CoreUtility_C_GetBestAxisDirection) == 0x000008, "Wrong alignment on FUNCLIB_CoreUtility_C_GetBestAxisDirection");
static_assert(sizeof(FUNCLIB_CoreUtility_C_GetBestAxisDirection) == 0x000100, "Wrong size on FUNCLIB_CoreUtility_C_GetBestAxisDirection");
static_assert(offsetof(FUNCLIB_CoreUtility_C_GetBestAxisDirection, InputDirection) == 0x000000, "Member 'FUNCLIB_CoreUtility_C_GetBestAxisDirection::InputDirection' has a wrong offset!");
static_assert(offsetof(FUNCLIB_CoreUtility_C_GetBestAxisDirection, Threshold) == 0x00000C, "Member 'FUNCLIB_CoreUtility_C_GetBestAxisDirection::Threshold' has a wrong offset!");
static_assert(offsetof(FUNCLIB_CoreUtility_C_GetBestAxisDirection, __WorldContext) == 0x000010, "Member 'FUNCLIB_CoreUtility_C_GetBestAxisDirection::__WorldContext' has a wrong offset!");
static_assert(offsetof(FUNCLIB_CoreUtility_C_GetBestAxisDirection, AxisDirection) == 0x000018, "Member 'FUNCLIB_CoreUtility_C_GetBestAxisDirection::AxisDirection' has a wrong offset!");
static_assert(offsetof(FUNCLIB_CoreUtility_C_GetBestAxisDirection, AbsInputVector) == 0x000024, "Member 'FUNCLIB_CoreUtility_C_GetBestAxisDirection::AbsInputVector' has a wrong offset!");
static_assert(offsetof(FUNCLIB_CoreUtility_C_GetBestAxisDirection, CallFunc_BreakVector_X) == 0x000030, "Member 'FUNCLIB_CoreUtility_C_GetBestAxisDirection::CallFunc_BreakVector_X' has a wrong offset!");
static_assert(offsetof(FUNCLIB_CoreUtility_C_GetBestAxisDirection, CallFunc_BreakVector_Y) == 0x000034, "Member 'FUNCLIB_CoreUtility_C_GetBestAxisDirection::CallFunc_BreakVector_Y' has a wrong offset!");
static_assert(offsetof(FUNCLIB_CoreUtility_C_GetBestAxisDirection, CallFunc_BreakVector_Z) == 0x000038, "Member 'FUNCLIB_CoreUtility_C_GetBestAxisDirection::CallFunc_BreakVector_Z' has a wrong offset!");
static_assert(offsetof(FUNCLIB_CoreUtility_C_GetBestAxisDirection, CallFunc_SignOfFloat_ReturnValue) == 0x00003C, "Member 'FUNCLIB_CoreUtility_C_GetBestAxisDirection::CallFunc_SignOfFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(FUNCLIB_CoreUtility_C_GetBestAxisDirection, CallFunc_MakeVector_ReturnValue) == 0x000040, "Member 'FUNCLIB_CoreUtility_C_GetBestAxisDirection::CallFunc_MakeVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(FUNCLIB_CoreUtility_C_GetBestAxisDirection, CallFunc_Vector_GetAbs_ReturnValue) == 0x00004C, "Member 'FUNCLIB_CoreUtility_C_GetBestAxisDirection::CallFunc_Vector_GetAbs_ReturnValue' has a wrong offset!");
static_assert(offsetof(FUNCLIB_CoreUtility_C_GetBestAxisDirection, CallFunc_BreakVector_X_1) == 0x000058, "Member 'FUNCLIB_CoreUtility_C_GetBestAxisDirection::CallFunc_BreakVector_X_1' has a wrong offset!");
static_assert(offsetof(FUNCLIB_CoreUtility_C_GetBestAxisDirection, CallFunc_BreakVector_Y_1) == 0x00005C, "Member 'FUNCLIB_CoreUtility_C_GetBestAxisDirection::CallFunc_BreakVector_Y_1' has a wrong offset!");
static_assert(offsetof(FUNCLIB_CoreUtility_C_GetBestAxisDirection, CallFunc_BreakVector_Z_1) == 0x000060, "Member 'FUNCLIB_CoreUtility_C_GetBestAxisDirection::CallFunc_BreakVector_Z_1' has a wrong offset!");
static_assert(offsetof(FUNCLIB_CoreUtility_C_GetBestAxisDirection, CallFunc_SignOfFloat_ReturnValue_1) == 0x000064, "Member 'FUNCLIB_CoreUtility_C_GetBestAxisDirection::CallFunc_SignOfFloat_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(FUNCLIB_CoreUtility_C_GetBestAxisDirection, CallFunc_MakeVector_ReturnValue_1) == 0x000068, "Member 'FUNCLIB_CoreUtility_C_GetBestAxisDirection::CallFunc_MakeVector_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(FUNCLIB_CoreUtility_C_GetBestAxisDirection, CallFunc_BreakVector_X_2) == 0x000074, "Member 'FUNCLIB_CoreUtility_C_GetBestAxisDirection::CallFunc_BreakVector_X_2' has a wrong offset!");
static_assert(offsetof(FUNCLIB_CoreUtility_C_GetBestAxisDirection, CallFunc_BreakVector_Y_2) == 0x000078, "Member 'FUNCLIB_CoreUtility_C_GetBestAxisDirection::CallFunc_BreakVector_Y_2' has a wrong offset!");
static_assert(offsetof(FUNCLIB_CoreUtility_C_GetBestAxisDirection, CallFunc_BreakVector_Z_2) == 0x00007C, "Member 'FUNCLIB_CoreUtility_C_GetBestAxisDirection::CallFunc_BreakVector_Z_2' has a wrong offset!");
static_assert(offsetof(FUNCLIB_CoreUtility_C_GetBestAxisDirection, CallFunc_SignOfFloat_ReturnValue_2) == 0x000080, "Member 'FUNCLIB_CoreUtility_C_GetBestAxisDirection::CallFunc_SignOfFloat_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(FUNCLIB_CoreUtility_C_GetBestAxisDirection, CallFunc_MakeVector_ReturnValue_2) == 0x000084, "Member 'FUNCLIB_CoreUtility_C_GetBestAxisDirection::CallFunc_MakeVector_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(FUNCLIB_CoreUtility_C_GetBestAxisDirection, CallFunc_BreakVector_X_3) == 0x000090, "Member 'FUNCLIB_CoreUtility_C_GetBestAxisDirection::CallFunc_BreakVector_X_3' has a wrong offset!");
static_assert(offsetof(FUNCLIB_CoreUtility_C_GetBestAxisDirection, CallFunc_BreakVector_Y_3) == 0x000094, "Member 'FUNCLIB_CoreUtility_C_GetBestAxisDirection::CallFunc_BreakVector_Y_3' has a wrong offset!");
static_assert(offsetof(FUNCLIB_CoreUtility_C_GetBestAxisDirection, CallFunc_BreakVector_Z_3) == 0x000098, "Member 'FUNCLIB_CoreUtility_C_GetBestAxisDirection::CallFunc_BreakVector_Z_3' has a wrong offset!");
static_assert(offsetof(FUNCLIB_CoreUtility_C_GetBestAxisDirection, CallFunc_Add_FloatFloat_ReturnValue) == 0x00009C, "Member 'FUNCLIB_CoreUtility_C_GetBestAxisDirection::CallFunc_Add_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(FUNCLIB_CoreUtility_C_GetBestAxisDirection, CallFunc_GreaterEqual_FloatFloat_ReturnValue) == 0x0000A0, "Member 'FUNCLIB_CoreUtility_C_GetBestAxisDirection::CallFunc_GreaterEqual_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(FUNCLIB_CoreUtility_C_GetBestAxisDirection, CallFunc_BreakVector_X_4) == 0x0000A4, "Member 'FUNCLIB_CoreUtility_C_GetBestAxisDirection::CallFunc_BreakVector_X_4' has a wrong offset!");
static_assert(offsetof(FUNCLIB_CoreUtility_C_GetBestAxisDirection, CallFunc_BreakVector_Y_4) == 0x0000A8, "Member 'FUNCLIB_CoreUtility_C_GetBestAxisDirection::CallFunc_BreakVector_Y_4' has a wrong offset!");
static_assert(offsetof(FUNCLIB_CoreUtility_C_GetBestAxisDirection, CallFunc_BreakVector_Z_4) == 0x0000AC, "Member 'FUNCLIB_CoreUtility_C_GetBestAxisDirection::CallFunc_BreakVector_Z_4' has a wrong offset!");
static_assert(offsetof(FUNCLIB_CoreUtility_C_GetBestAxisDirection, CallFunc_Add_FloatFloat_ReturnValue_1) == 0x0000B0, "Member 'FUNCLIB_CoreUtility_C_GetBestAxisDirection::CallFunc_Add_FloatFloat_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(FUNCLIB_CoreUtility_C_GetBestAxisDirection, CallFunc_GreaterEqual_FloatFloat_ReturnValue_1) == 0x0000B4, "Member 'FUNCLIB_CoreUtility_C_GetBestAxisDirection::CallFunc_GreaterEqual_FloatFloat_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(FUNCLIB_CoreUtility_C_GetBestAxisDirection, CallFunc_BreakVector_X_5) == 0x0000B8, "Member 'FUNCLIB_CoreUtility_C_GetBestAxisDirection::CallFunc_BreakVector_X_5' has a wrong offset!");
static_assert(offsetof(FUNCLIB_CoreUtility_C_GetBestAxisDirection, CallFunc_BreakVector_Y_5) == 0x0000BC, "Member 'FUNCLIB_CoreUtility_C_GetBestAxisDirection::CallFunc_BreakVector_Y_5' has a wrong offset!");
static_assert(offsetof(FUNCLIB_CoreUtility_C_GetBestAxisDirection, CallFunc_BreakVector_Z_5) == 0x0000C0, "Member 'FUNCLIB_CoreUtility_C_GetBestAxisDirection::CallFunc_BreakVector_Z_5' has a wrong offset!");
static_assert(offsetof(FUNCLIB_CoreUtility_C_GetBestAxisDirection, CallFunc_Add_FloatFloat_ReturnValue_2) == 0x0000C4, "Member 'FUNCLIB_CoreUtility_C_GetBestAxisDirection::CallFunc_Add_FloatFloat_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(FUNCLIB_CoreUtility_C_GetBestAxisDirection, CallFunc_GreaterEqual_FloatFloat_ReturnValue_2) == 0x0000C8, "Member 'FUNCLIB_CoreUtility_C_GetBestAxisDirection::CallFunc_GreaterEqual_FloatFloat_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(FUNCLIB_CoreUtility_C_GetBestAxisDirection, CallFunc_BreakVector_X_6) == 0x0000CC, "Member 'FUNCLIB_CoreUtility_C_GetBestAxisDirection::CallFunc_BreakVector_X_6' has a wrong offset!");
static_assert(offsetof(FUNCLIB_CoreUtility_C_GetBestAxisDirection, CallFunc_BreakVector_Y_6) == 0x0000D0, "Member 'FUNCLIB_CoreUtility_C_GetBestAxisDirection::CallFunc_BreakVector_Y_6' has a wrong offset!");
static_assert(offsetof(FUNCLIB_CoreUtility_C_GetBestAxisDirection, CallFunc_BreakVector_Z_6) == 0x0000D4, "Member 'FUNCLIB_CoreUtility_C_GetBestAxisDirection::CallFunc_BreakVector_Z_6' has a wrong offset!");
static_assert(offsetof(FUNCLIB_CoreUtility_C_GetBestAxisDirection, CallFunc_Less_FloatFloat_ReturnValue) == 0x0000D8, "Member 'FUNCLIB_CoreUtility_C_GetBestAxisDirection::CallFunc_Less_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(FUNCLIB_CoreUtility_C_GetBestAxisDirection, CallFunc_BreakVector_X_7) == 0x0000DC, "Member 'FUNCLIB_CoreUtility_C_GetBestAxisDirection::CallFunc_BreakVector_X_7' has a wrong offset!");
static_assert(offsetof(FUNCLIB_CoreUtility_C_GetBestAxisDirection, CallFunc_BreakVector_Y_7) == 0x0000E0, "Member 'FUNCLIB_CoreUtility_C_GetBestAxisDirection::CallFunc_BreakVector_Y_7' has a wrong offset!");
static_assert(offsetof(FUNCLIB_CoreUtility_C_GetBestAxisDirection, CallFunc_BreakVector_Z_7) == 0x0000E4, "Member 'FUNCLIB_CoreUtility_C_GetBestAxisDirection::CallFunc_BreakVector_Z_7' has a wrong offset!");
static_assert(offsetof(FUNCLIB_CoreUtility_C_GetBestAxisDirection, CallFunc_Greater_FloatFloat_ReturnValue) == 0x0000E8, "Member 'FUNCLIB_CoreUtility_C_GetBestAxisDirection::CallFunc_Greater_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(FUNCLIB_CoreUtility_C_GetBestAxisDirection, CallFunc_BreakVector_X_8) == 0x0000EC, "Member 'FUNCLIB_CoreUtility_C_GetBestAxisDirection::CallFunc_BreakVector_X_8' has a wrong offset!");
static_assert(offsetof(FUNCLIB_CoreUtility_C_GetBestAxisDirection, CallFunc_BreakVector_Y_8) == 0x0000F0, "Member 'FUNCLIB_CoreUtility_C_GetBestAxisDirection::CallFunc_BreakVector_Y_8' has a wrong offset!");
static_assert(offsetof(FUNCLIB_CoreUtility_C_GetBestAxisDirection, CallFunc_BreakVector_Z_8) == 0x0000F4, "Member 'FUNCLIB_CoreUtility_C_GetBestAxisDirection::CallFunc_BreakVector_Z_8' has a wrong offset!");
static_assert(offsetof(FUNCLIB_CoreUtility_C_GetBestAxisDirection, CallFunc_Greater_FloatFloat_ReturnValue_1) == 0x0000F8, "Member 'FUNCLIB_CoreUtility_C_GetBestAxisDirection::CallFunc_Greater_FloatFloat_ReturnValue_1' has a wrong offset!");

// Function FUNCLIB_CoreUtility.FUNCLIB_CoreUtility_C.GetLargestAxesFromVector
// 0x0088 (0x0088 - 0x0000)
struct FUNCLIB_CoreUtility_C_GetLargestAxesFromVector final
{
public:
	struct FVector                                Vector;                                            // 0x0000(0x000C)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UObject*                                __WorldContext;                                    // 0x0010(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ENUM_Axis                                     AxisA;                                             // 0x0018(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ENUM_Axis                                     AxisB;                                             // 0x0019(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ENUM_Axis                                     AxisC;                                             // 0x001A(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1B[0x1];                                       // 0x001B(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                AbsInputVector;                                    // 0x001C(0x000C)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Vector_GetAbs_ReturnValue;                // 0x0028(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector_X;                            // 0x0034(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector_Y;                            // 0x0038(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector_Z;                            // 0x003C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Greater_FloatFloat_ReturnValue;           // 0x0040(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_41[0x3];                                       // 0x0041(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_BreakVector_X_1;                          // 0x0044(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector_Y_1;                          // 0x0048(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector_Z_1;                          // 0x004C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Greater_FloatFloat_ReturnValue_1;         // 0x0050(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_51[0x3];                                       // 0x0051(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_BreakVector_X_2;                          // 0x0054(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector_Y_2;                          // 0x0058(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector_Z_2;                          // 0x005C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Greater_FloatFloat_ReturnValue_2;         // 0x0060(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_61[0x3];                                       // 0x0061(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_BreakVector_X_3;                          // 0x0064(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector_Y_3;                          // 0x0068(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector_Z_3;                          // 0x006C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Greater_FloatFloat_ReturnValue_3;         // 0x0070(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_71[0x3];                                       // 0x0071(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_BreakVector_X_4;                          // 0x0074(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector_Y_4;                          // 0x0078(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector_Z_4;                          // 0x007C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Greater_FloatFloat_ReturnValue_4;         // 0x0080(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(FUNCLIB_CoreUtility_C_GetLargestAxesFromVector) == 0x000008, "Wrong alignment on FUNCLIB_CoreUtility_C_GetLargestAxesFromVector");
static_assert(sizeof(FUNCLIB_CoreUtility_C_GetLargestAxesFromVector) == 0x000088, "Wrong size on FUNCLIB_CoreUtility_C_GetLargestAxesFromVector");
static_assert(offsetof(FUNCLIB_CoreUtility_C_GetLargestAxesFromVector, Vector) == 0x000000, "Member 'FUNCLIB_CoreUtility_C_GetLargestAxesFromVector::Vector' has a wrong offset!");
static_assert(offsetof(FUNCLIB_CoreUtility_C_GetLargestAxesFromVector, __WorldContext) == 0x000010, "Member 'FUNCLIB_CoreUtility_C_GetLargestAxesFromVector::__WorldContext' has a wrong offset!");
static_assert(offsetof(FUNCLIB_CoreUtility_C_GetLargestAxesFromVector, AxisA) == 0x000018, "Member 'FUNCLIB_CoreUtility_C_GetLargestAxesFromVector::AxisA' has a wrong offset!");
static_assert(offsetof(FUNCLIB_CoreUtility_C_GetLargestAxesFromVector, AxisB) == 0x000019, "Member 'FUNCLIB_CoreUtility_C_GetLargestAxesFromVector::AxisB' has a wrong offset!");
static_assert(offsetof(FUNCLIB_CoreUtility_C_GetLargestAxesFromVector, AxisC) == 0x00001A, "Member 'FUNCLIB_CoreUtility_C_GetLargestAxesFromVector::AxisC' has a wrong offset!");
static_assert(offsetof(FUNCLIB_CoreUtility_C_GetLargestAxesFromVector, AbsInputVector) == 0x00001C, "Member 'FUNCLIB_CoreUtility_C_GetLargestAxesFromVector::AbsInputVector' has a wrong offset!");
static_assert(offsetof(FUNCLIB_CoreUtility_C_GetLargestAxesFromVector, CallFunc_Vector_GetAbs_ReturnValue) == 0x000028, "Member 'FUNCLIB_CoreUtility_C_GetLargestAxesFromVector::CallFunc_Vector_GetAbs_ReturnValue' has a wrong offset!");
static_assert(offsetof(FUNCLIB_CoreUtility_C_GetLargestAxesFromVector, CallFunc_BreakVector_X) == 0x000034, "Member 'FUNCLIB_CoreUtility_C_GetLargestAxesFromVector::CallFunc_BreakVector_X' has a wrong offset!");
static_assert(offsetof(FUNCLIB_CoreUtility_C_GetLargestAxesFromVector, CallFunc_BreakVector_Y) == 0x000038, "Member 'FUNCLIB_CoreUtility_C_GetLargestAxesFromVector::CallFunc_BreakVector_Y' has a wrong offset!");
static_assert(offsetof(FUNCLIB_CoreUtility_C_GetLargestAxesFromVector, CallFunc_BreakVector_Z) == 0x00003C, "Member 'FUNCLIB_CoreUtility_C_GetLargestAxesFromVector::CallFunc_BreakVector_Z' has a wrong offset!");
static_assert(offsetof(FUNCLIB_CoreUtility_C_GetLargestAxesFromVector, CallFunc_Greater_FloatFloat_ReturnValue) == 0x000040, "Member 'FUNCLIB_CoreUtility_C_GetLargestAxesFromVector::CallFunc_Greater_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(FUNCLIB_CoreUtility_C_GetLargestAxesFromVector, CallFunc_BreakVector_X_1) == 0x000044, "Member 'FUNCLIB_CoreUtility_C_GetLargestAxesFromVector::CallFunc_BreakVector_X_1' has a wrong offset!");
static_assert(offsetof(FUNCLIB_CoreUtility_C_GetLargestAxesFromVector, CallFunc_BreakVector_Y_1) == 0x000048, "Member 'FUNCLIB_CoreUtility_C_GetLargestAxesFromVector::CallFunc_BreakVector_Y_1' has a wrong offset!");
static_assert(offsetof(FUNCLIB_CoreUtility_C_GetLargestAxesFromVector, CallFunc_BreakVector_Z_1) == 0x00004C, "Member 'FUNCLIB_CoreUtility_C_GetLargestAxesFromVector::CallFunc_BreakVector_Z_1' has a wrong offset!");
static_assert(offsetof(FUNCLIB_CoreUtility_C_GetLargestAxesFromVector, CallFunc_Greater_FloatFloat_ReturnValue_1) == 0x000050, "Member 'FUNCLIB_CoreUtility_C_GetLargestAxesFromVector::CallFunc_Greater_FloatFloat_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(FUNCLIB_CoreUtility_C_GetLargestAxesFromVector, CallFunc_BreakVector_X_2) == 0x000054, "Member 'FUNCLIB_CoreUtility_C_GetLargestAxesFromVector::CallFunc_BreakVector_X_2' has a wrong offset!");
static_assert(offsetof(FUNCLIB_CoreUtility_C_GetLargestAxesFromVector, CallFunc_BreakVector_Y_2) == 0x000058, "Member 'FUNCLIB_CoreUtility_C_GetLargestAxesFromVector::CallFunc_BreakVector_Y_2' has a wrong offset!");
static_assert(offsetof(FUNCLIB_CoreUtility_C_GetLargestAxesFromVector, CallFunc_BreakVector_Z_2) == 0x00005C, "Member 'FUNCLIB_CoreUtility_C_GetLargestAxesFromVector::CallFunc_BreakVector_Z_2' has a wrong offset!");
static_assert(offsetof(FUNCLIB_CoreUtility_C_GetLargestAxesFromVector, CallFunc_Greater_FloatFloat_ReturnValue_2) == 0x000060, "Member 'FUNCLIB_CoreUtility_C_GetLargestAxesFromVector::CallFunc_Greater_FloatFloat_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(FUNCLIB_CoreUtility_C_GetLargestAxesFromVector, CallFunc_BreakVector_X_3) == 0x000064, "Member 'FUNCLIB_CoreUtility_C_GetLargestAxesFromVector::CallFunc_BreakVector_X_3' has a wrong offset!");
static_assert(offsetof(FUNCLIB_CoreUtility_C_GetLargestAxesFromVector, CallFunc_BreakVector_Y_3) == 0x000068, "Member 'FUNCLIB_CoreUtility_C_GetLargestAxesFromVector::CallFunc_BreakVector_Y_3' has a wrong offset!");
static_assert(offsetof(FUNCLIB_CoreUtility_C_GetLargestAxesFromVector, CallFunc_BreakVector_Z_3) == 0x00006C, "Member 'FUNCLIB_CoreUtility_C_GetLargestAxesFromVector::CallFunc_BreakVector_Z_3' has a wrong offset!");
static_assert(offsetof(FUNCLIB_CoreUtility_C_GetLargestAxesFromVector, CallFunc_Greater_FloatFloat_ReturnValue_3) == 0x000070, "Member 'FUNCLIB_CoreUtility_C_GetLargestAxesFromVector::CallFunc_Greater_FloatFloat_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(FUNCLIB_CoreUtility_C_GetLargestAxesFromVector, CallFunc_BreakVector_X_4) == 0x000074, "Member 'FUNCLIB_CoreUtility_C_GetLargestAxesFromVector::CallFunc_BreakVector_X_4' has a wrong offset!");
static_assert(offsetof(FUNCLIB_CoreUtility_C_GetLargestAxesFromVector, CallFunc_BreakVector_Y_4) == 0x000078, "Member 'FUNCLIB_CoreUtility_C_GetLargestAxesFromVector::CallFunc_BreakVector_Y_4' has a wrong offset!");
static_assert(offsetof(FUNCLIB_CoreUtility_C_GetLargestAxesFromVector, CallFunc_BreakVector_Z_4) == 0x00007C, "Member 'FUNCLIB_CoreUtility_C_GetLargestAxesFromVector::CallFunc_BreakVector_Z_4' has a wrong offset!");
static_assert(offsetof(FUNCLIB_CoreUtility_C_GetLargestAxesFromVector, CallFunc_Greater_FloatFloat_ReturnValue_4) == 0x000080, "Member 'FUNCLIB_CoreUtility_C_GetLargestAxesFromVector::CallFunc_Greater_FloatFloat_ReturnValue_4' has a wrong offset!");

// Function FUNCLIB_CoreUtility.FUNCLIB_CoreUtility_C.GetUnitVectorFromAxis
// 0x0020 (0x0020 - 0x0000)
struct FUNCLIB_CoreUtility_C_GetUnitVectorFromAxis final
{
public:
	ENUM_Axis                                     Axis;                                              // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UObject*                                __WorldContext;                                    // 0x0008(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                Result;                                            // 0x0010(0x000C)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_SwitchEnum_CmpSuccess;                      // 0x001C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(FUNCLIB_CoreUtility_C_GetUnitVectorFromAxis) == 0x000008, "Wrong alignment on FUNCLIB_CoreUtility_C_GetUnitVectorFromAxis");
static_assert(sizeof(FUNCLIB_CoreUtility_C_GetUnitVectorFromAxis) == 0x000020, "Wrong size on FUNCLIB_CoreUtility_C_GetUnitVectorFromAxis");
static_assert(offsetof(FUNCLIB_CoreUtility_C_GetUnitVectorFromAxis, Axis) == 0x000000, "Member 'FUNCLIB_CoreUtility_C_GetUnitVectorFromAxis::Axis' has a wrong offset!");
static_assert(offsetof(FUNCLIB_CoreUtility_C_GetUnitVectorFromAxis, __WorldContext) == 0x000008, "Member 'FUNCLIB_CoreUtility_C_GetUnitVectorFromAxis::__WorldContext' has a wrong offset!");
static_assert(offsetof(FUNCLIB_CoreUtility_C_GetUnitVectorFromAxis, Result) == 0x000010, "Member 'FUNCLIB_CoreUtility_C_GetUnitVectorFromAxis::Result' has a wrong offset!");
static_assert(offsetof(FUNCLIB_CoreUtility_C_GetUnitVectorFromAxis, K2Node_SwitchEnum_CmpSuccess) == 0x00001C, "Member 'FUNCLIB_CoreUtility_C_GetUnitVectorFromAxis::K2Node_SwitchEnum_CmpSuccess' has a wrong offset!");

// Function FUNCLIB_CoreUtility.FUNCLIB_CoreUtility_C.GetTextureSizeX
// 0x0038 (0x0038 - 0x0000)
struct FUNCLIB_CoreUtility_C_GetTextureSizeX final
{
public:
	class UTexture*                               Texture;                                           // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UObject*                                __WorldContext;                                    // 0x0008(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         SizeX;                                             // 0x0010(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UTexture2D*                             K2Node_DynamicCast_AsTexture_2D;                   // 0x0018(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0020(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_21[0x7];                                       // 0x0021(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UTextureRenderTarget2D*                 K2Node_DynamicCast_AsTexture_Render_Target_2D;     // 0x0028(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess_1;                     // 0x0030(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_31[0x3];                                       // 0x0031(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Blueprint_GetSizeX_ReturnValue;           // 0x0034(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(FUNCLIB_CoreUtility_C_GetTextureSizeX) == 0x000008, "Wrong alignment on FUNCLIB_CoreUtility_C_GetTextureSizeX");
static_assert(sizeof(FUNCLIB_CoreUtility_C_GetTextureSizeX) == 0x000038, "Wrong size on FUNCLIB_CoreUtility_C_GetTextureSizeX");
static_assert(offsetof(FUNCLIB_CoreUtility_C_GetTextureSizeX, Texture) == 0x000000, "Member 'FUNCLIB_CoreUtility_C_GetTextureSizeX::Texture' has a wrong offset!");
static_assert(offsetof(FUNCLIB_CoreUtility_C_GetTextureSizeX, __WorldContext) == 0x000008, "Member 'FUNCLIB_CoreUtility_C_GetTextureSizeX::__WorldContext' has a wrong offset!");
static_assert(offsetof(FUNCLIB_CoreUtility_C_GetTextureSizeX, SizeX) == 0x000010, "Member 'FUNCLIB_CoreUtility_C_GetTextureSizeX::SizeX' has a wrong offset!");
static_assert(offsetof(FUNCLIB_CoreUtility_C_GetTextureSizeX, K2Node_DynamicCast_AsTexture_2D) == 0x000018, "Member 'FUNCLIB_CoreUtility_C_GetTextureSizeX::K2Node_DynamicCast_AsTexture_2D' has a wrong offset!");
static_assert(offsetof(FUNCLIB_CoreUtility_C_GetTextureSizeX, K2Node_DynamicCast_bSuccess) == 0x000020, "Member 'FUNCLIB_CoreUtility_C_GetTextureSizeX::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(FUNCLIB_CoreUtility_C_GetTextureSizeX, K2Node_DynamicCast_AsTexture_Render_Target_2D) == 0x000028, "Member 'FUNCLIB_CoreUtility_C_GetTextureSizeX::K2Node_DynamicCast_AsTexture_Render_Target_2D' has a wrong offset!");
static_assert(offsetof(FUNCLIB_CoreUtility_C_GetTextureSizeX, K2Node_DynamicCast_bSuccess_1) == 0x000030, "Member 'FUNCLIB_CoreUtility_C_GetTextureSizeX::K2Node_DynamicCast_bSuccess_1' has a wrong offset!");
static_assert(offsetof(FUNCLIB_CoreUtility_C_GetTextureSizeX, CallFunc_Blueprint_GetSizeX_ReturnValue) == 0x000034, "Member 'FUNCLIB_CoreUtility_C_GetTextureSizeX::CallFunc_Blueprint_GetSizeX_ReturnValue' has a wrong offset!");

// Function FUNCLIB_CoreUtility.FUNCLIB_CoreUtility_C.GetTextureSizeY
// 0x0038 (0x0038 - 0x0000)
struct FUNCLIB_CoreUtility_C_GetTextureSizeY final
{
public:
	class UTexture*                               Texture;                                           // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UObject*                                __WorldContext;                                    // 0x0008(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         SizeY;                                             // 0x0010(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UTexture2D*                             K2Node_DynamicCast_AsTexture_2D;                   // 0x0018(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0020(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_21[0x7];                                       // 0x0021(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UTextureRenderTarget2D*                 K2Node_DynamicCast_AsTexture_Render_Target_2D;     // 0x0028(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess_1;                     // 0x0030(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_31[0x3];                                       // 0x0031(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Blueprint_GetSizeY_ReturnValue;           // 0x0034(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(FUNCLIB_CoreUtility_C_GetTextureSizeY) == 0x000008, "Wrong alignment on FUNCLIB_CoreUtility_C_GetTextureSizeY");
static_assert(sizeof(FUNCLIB_CoreUtility_C_GetTextureSizeY) == 0x000038, "Wrong size on FUNCLIB_CoreUtility_C_GetTextureSizeY");
static_assert(offsetof(FUNCLIB_CoreUtility_C_GetTextureSizeY, Texture) == 0x000000, "Member 'FUNCLIB_CoreUtility_C_GetTextureSizeY::Texture' has a wrong offset!");
static_assert(offsetof(FUNCLIB_CoreUtility_C_GetTextureSizeY, __WorldContext) == 0x000008, "Member 'FUNCLIB_CoreUtility_C_GetTextureSizeY::__WorldContext' has a wrong offset!");
static_assert(offsetof(FUNCLIB_CoreUtility_C_GetTextureSizeY, SizeY) == 0x000010, "Member 'FUNCLIB_CoreUtility_C_GetTextureSizeY::SizeY' has a wrong offset!");
static_assert(offsetof(FUNCLIB_CoreUtility_C_GetTextureSizeY, K2Node_DynamicCast_AsTexture_2D) == 0x000018, "Member 'FUNCLIB_CoreUtility_C_GetTextureSizeY::K2Node_DynamicCast_AsTexture_2D' has a wrong offset!");
static_assert(offsetof(FUNCLIB_CoreUtility_C_GetTextureSizeY, K2Node_DynamicCast_bSuccess) == 0x000020, "Member 'FUNCLIB_CoreUtility_C_GetTextureSizeY::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(FUNCLIB_CoreUtility_C_GetTextureSizeY, K2Node_DynamicCast_AsTexture_Render_Target_2D) == 0x000028, "Member 'FUNCLIB_CoreUtility_C_GetTextureSizeY::K2Node_DynamicCast_AsTexture_Render_Target_2D' has a wrong offset!");
static_assert(offsetof(FUNCLIB_CoreUtility_C_GetTextureSizeY, K2Node_DynamicCast_bSuccess_1) == 0x000030, "Member 'FUNCLIB_CoreUtility_C_GetTextureSizeY::K2Node_DynamicCast_bSuccess_1' has a wrong offset!");
static_assert(offsetof(FUNCLIB_CoreUtility_C_GetTextureSizeY, CallFunc_Blueprint_GetSizeY_ReturnValue) == 0x000034, "Member 'FUNCLIB_CoreUtility_C_GetTextureSizeY::CallFunc_Blueprint_GetSizeY_ReturnValue' has a wrong offset!");

// Function FUNCLIB_CoreUtility.FUNCLIB_CoreUtility_C.GetSoundLoudness
// 0x0068 (0x0068 - 0x0000)
struct FUNCLIB_CoreUtility_C_GetSoundLoudness final
{
public:
	struct FVector                                SourceLocation;                                    // 0x0000(0x000C)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                TargetLocation;                                    // 0x000C(0x000C)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         SoundRange;                                        // 0x0018(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Obstruction;                                       // 0x001C(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Occlusion;                                         // 0x0020(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_24[0x4];                                       // 0x0024(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UObject*                                __WorldContext;                                    // 0x0028(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Result;                                            // 0x0030(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Loudness;                                          // 0x0034(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Subtract_VectorVector_ReturnValue;        // 0x0038(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Subtract_FloatFloat_ReturnValue;          // 0x0044(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_VSize_ReturnValue;                        // 0x0048(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Divide_FloatFloat_ReturnValue;            // 0x004C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Subtract_FloatFloat_ReturnValue_1;        // 0x0050(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Subtract_FloatFloat_ReturnValue_2;        // 0x0054(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Multiply_FloatFloat_ReturnValue;          // 0x0058(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_FMax_ReturnValue;                         // 0x005C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Multiply_FloatFloat_ReturnValue_1;        // 0x0060(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(FUNCLIB_CoreUtility_C_GetSoundLoudness) == 0x000008, "Wrong alignment on FUNCLIB_CoreUtility_C_GetSoundLoudness");
static_assert(sizeof(FUNCLIB_CoreUtility_C_GetSoundLoudness) == 0x000068, "Wrong size on FUNCLIB_CoreUtility_C_GetSoundLoudness");
static_assert(offsetof(FUNCLIB_CoreUtility_C_GetSoundLoudness, SourceLocation) == 0x000000, "Member 'FUNCLIB_CoreUtility_C_GetSoundLoudness::SourceLocation' has a wrong offset!");
static_assert(offsetof(FUNCLIB_CoreUtility_C_GetSoundLoudness, TargetLocation) == 0x00000C, "Member 'FUNCLIB_CoreUtility_C_GetSoundLoudness::TargetLocation' has a wrong offset!");
static_assert(offsetof(FUNCLIB_CoreUtility_C_GetSoundLoudness, SoundRange) == 0x000018, "Member 'FUNCLIB_CoreUtility_C_GetSoundLoudness::SoundRange' has a wrong offset!");
static_assert(offsetof(FUNCLIB_CoreUtility_C_GetSoundLoudness, Obstruction) == 0x00001C, "Member 'FUNCLIB_CoreUtility_C_GetSoundLoudness::Obstruction' has a wrong offset!");
static_assert(offsetof(FUNCLIB_CoreUtility_C_GetSoundLoudness, Occlusion) == 0x000020, "Member 'FUNCLIB_CoreUtility_C_GetSoundLoudness::Occlusion' has a wrong offset!");
static_assert(offsetof(FUNCLIB_CoreUtility_C_GetSoundLoudness, __WorldContext) == 0x000028, "Member 'FUNCLIB_CoreUtility_C_GetSoundLoudness::__WorldContext' has a wrong offset!");
static_assert(offsetof(FUNCLIB_CoreUtility_C_GetSoundLoudness, Result) == 0x000030, "Member 'FUNCLIB_CoreUtility_C_GetSoundLoudness::Result' has a wrong offset!");
static_assert(offsetof(FUNCLIB_CoreUtility_C_GetSoundLoudness, Loudness) == 0x000034, "Member 'FUNCLIB_CoreUtility_C_GetSoundLoudness::Loudness' has a wrong offset!");
static_assert(offsetof(FUNCLIB_CoreUtility_C_GetSoundLoudness, CallFunc_Subtract_VectorVector_ReturnValue) == 0x000038, "Member 'FUNCLIB_CoreUtility_C_GetSoundLoudness::CallFunc_Subtract_VectorVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(FUNCLIB_CoreUtility_C_GetSoundLoudness, CallFunc_Subtract_FloatFloat_ReturnValue) == 0x000044, "Member 'FUNCLIB_CoreUtility_C_GetSoundLoudness::CallFunc_Subtract_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(FUNCLIB_CoreUtility_C_GetSoundLoudness, CallFunc_VSize_ReturnValue) == 0x000048, "Member 'FUNCLIB_CoreUtility_C_GetSoundLoudness::CallFunc_VSize_ReturnValue' has a wrong offset!");
static_assert(offsetof(FUNCLIB_CoreUtility_C_GetSoundLoudness, CallFunc_Divide_FloatFloat_ReturnValue) == 0x00004C, "Member 'FUNCLIB_CoreUtility_C_GetSoundLoudness::CallFunc_Divide_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(FUNCLIB_CoreUtility_C_GetSoundLoudness, CallFunc_Subtract_FloatFloat_ReturnValue_1) == 0x000050, "Member 'FUNCLIB_CoreUtility_C_GetSoundLoudness::CallFunc_Subtract_FloatFloat_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(FUNCLIB_CoreUtility_C_GetSoundLoudness, CallFunc_Subtract_FloatFloat_ReturnValue_2) == 0x000054, "Member 'FUNCLIB_CoreUtility_C_GetSoundLoudness::CallFunc_Subtract_FloatFloat_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(FUNCLIB_CoreUtility_C_GetSoundLoudness, CallFunc_Multiply_FloatFloat_ReturnValue) == 0x000058, "Member 'FUNCLIB_CoreUtility_C_GetSoundLoudness::CallFunc_Multiply_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(FUNCLIB_CoreUtility_C_GetSoundLoudness, CallFunc_FMax_ReturnValue) == 0x00005C, "Member 'FUNCLIB_CoreUtility_C_GetSoundLoudness::CallFunc_FMax_ReturnValue' has a wrong offset!");
static_assert(offsetof(FUNCLIB_CoreUtility_C_GetSoundLoudness, CallFunc_Multiply_FloatFloat_ReturnValue_1) == 0x000060, "Member 'FUNCLIB_CoreUtility_C_GetSoundLoudness::CallFunc_Multiply_FloatFloat_ReturnValue_1' has a wrong offset!");

// Function FUNCLIB_CoreUtility.FUNCLIB_CoreUtility_C.SetSoundEffectParameters
// 0x0080 (0x0080 - 0x0000)
struct FUNCLIB_CoreUtility_C_SetSoundEffectParameters final
{
public:
	class UAudioComponent*                        AudioComponent;                                    // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FSTRUCT_EffectParams                   SoundParameters;                                   // 0x0008(0x0030)(BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm, HasGetValueTypeHash)
	class UObject*                                __WorldContext;                                    // 0x0038(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0040(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_41[0x3];                                       // 0x0041(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Temp_int_Loop_Counter_Variable;                    // 0x0044(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue;                   // 0x0048(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Array_Index_Variable;                     // 0x004C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Loop_Counter_Variable_1;                  // 0x0050(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue_1;                 // 0x0054(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Array_Index_Variable_1;                   // 0x0058(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FNamedFloat                            CallFunc_Array_Get_Item;                           // 0x005C(0x000C)(NoDestructor)
	struct FNamedInteger                          CallFunc_Array_Get_Item_1;                         // 0x0068(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Length_ReturnValue;                 // 0x0074(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Length_ReturnValue_1;               // 0x0078(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue;                  // 0x007C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Less_IntInt_ReturnValue_1;                // 0x007D(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(FUNCLIB_CoreUtility_C_SetSoundEffectParameters) == 0x000008, "Wrong alignment on FUNCLIB_CoreUtility_C_SetSoundEffectParameters");
static_assert(sizeof(FUNCLIB_CoreUtility_C_SetSoundEffectParameters) == 0x000080, "Wrong size on FUNCLIB_CoreUtility_C_SetSoundEffectParameters");
static_assert(offsetof(FUNCLIB_CoreUtility_C_SetSoundEffectParameters, AudioComponent) == 0x000000, "Member 'FUNCLIB_CoreUtility_C_SetSoundEffectParameters::AudioComponent' has a wrong offset!");
static_assert(offsetof(FUNCLIB_CoreUtility_C_SetSoundEffectParameters, SoundParameters) == 0x000008, "Member 'FUNCLIB_CoreUtility_C_SetSoundEffectParameters::SoundParameters' has a wrong offset!");
static_assert(offsetof(FUNCLIB_CoreUtility_C_SetSoundEffectParameters, __WorldContext) == 0x000038, "Member 'FUNCLIB_CoreUtility_C_SetSoundEffectParameters::__WorldContext' has a wrong offset!");
static_assert(offsetof(FUNCLIB_CoreUtility_C_SetSoundEffectParameters, CallFunc_IsValid_ReturnValue) == 0x000040, "Member 'FUNCLIB_CoreUtility_C_SetSoundEffectParameters::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(FUNCLIB_CoreUtility_C_SetSoundEffectParameters, Temp_int_Loop_Counter_Variable) == 0x000044, "Member 'FUNCLIB_CoreUtility_C_SetSoundEffectParameters::Temp_int_Loop_Counter_Variable' has a wrong offset!");
static_assert(offsetof(FUNCLIB_CoreUtility_C_SetSoundEffectParameters, CallFunc_Add_IntInt_ReturnValue) == 0x000048, "Member 'FUNCLIB_CoreUtility_C_SetSoundEffectParameters::CallFunc_Add_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(FUNCLIB_CoreUtility_C_SetSoundEffectParameters, Temp_int_Array_Index_Variable) == 0x00004C, "Member 'FUNCLIB_CoreUtility_C_SetSoundEffectParameters::Temp_int_Array_Index_Variable' has a wrong offset!");
static_assert(offsetof(FUNCLIB_CoreUtility_C_SetSoundEffectParameters, Temp_int_Loop_Counter_Variable_1) == 0x000050, "Member 'FUNCLIB_CoreUtility_C_SetSoundEffectParameters::Temp_int_Loop_Counter_Variable_1' has a wrong offset!");
static_assert(offsetof(FUNCLIB_CoreUtility_C_SetSoundEffectParameters, CallFunc_Add_IntInt_ReturnValue_1) == 0x000054, "Member 'FUNCLIB_CoreUtility_C_SetSoundEffectParameters::CallFunc_Add_IntInt_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(FUNCLIB_CoreUtility_C_SetSoundEffectParameters, Temp_int_Array_Index_Variable_1) == 0x000058, "Member 'FUNCLIB_CoreUtility_C_SetSoundEffectParameters::Temp_int_Array_Index_Variable_1' has a wrong offset!");
static_assert(offsetof(FUNCLIB_CoreUtility_C_SetSoundEffectParameters, CallFunc_Array_Get_Item) == 0x00005C, "Member 'FUNCLIB_CoreUtility_C_SetSoundEffectParameters::CallFunc_Array_Get_Item' has a wrong offset!");
static_assert(offsetof(FUNCLIB_CoreUtility_C_SetSoundEffectParameters, CallFunc_Array_Get_Item_1) == 0x000068, "Member 'FUNCLIB_CoreUtility_C_SetSoundEffectParameters::CallFunc_Array_Get_Item_1' has a wrong offset!");
static_assert(offsetof(FUNCLIB_CoreUtility_C_SetSoundEffectParameters, CallFunc_Array_Length_ReturnValue) == 0x000074, "Member 'FUNCLIB_CoreUtility_C_SetSoundEffectParameters::CallFunc_Array_Length_ReturnValue' has a wrong offset!");
static_assert(offsetof(FUNCLIB_CoreUtility_C_SetSoundEffectParameters, CallFunc_Array_Length_ReturnValue_1) == 0x000078, "Member 'FUNCLIB_CoreUtility_C_SetSoundEffectParameters::CallFunc_Array_Length_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(FUNCLIB_CoreUtility_C_SetSoundEffectParameters, CallFunc_Less_IntInt_ReturnValue) == 0x00007C, "Member 'FUNCLIB_CoreUtility_C_SetSoundEffectParameters::CallFunc_Less_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(FUNCLIB_CoreUtility_C_SetSoundEffectParameters, CallFunc_Less_IntInt_ReturnValue_1) == 0x00007D, "Member 'FUNCLIB_CoreUtility_C_SetSoundEffectParameters::CallFunc_Less_IntInt_ReturnValue_1' has a wrong offset!");

// Function FUNCLIB_CoreUtility.FUNCLIB_CoreUtility_C.SetVoxelSoundEffectParameters
// 0x0080 (0x0080 - 0x0000)
struct FUNCLIB_CoreUtility_C_SetVoxelSoundEffectParameters final
{
public:
	class UVoxelAudioComponent*                   AudioComponent;                                    // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FSTRUCT_EffectParams                   SoundParameters;                                   // 0x0008(0x0030)(BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm, HasGetValueTypeHash)
	class UObject*                                __WorldContext;                                    // 0x0038(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0040(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_41[0x3];                                       // 0x0041(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Temp_int_Loop_Counter_Variable;                    // 0x0044(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue;                   // 0x0048(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Array_Index_Variable;                     // 0x004C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Loop_Counter_Variable_1;                  // 0x0050(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue_1;                 // 0x0054(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Array_Index_Variable_1;                   // 0x0058(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FNamedFloat                            CallFunc_Array_Get_Item;                           // 0x005C(0x000C)(NoDestructor)
	struct FNamedInteger                          CallFunc_Array_Get_Item_1;                         // 0x0068(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Length_ReturnValue;                 // 0x0074(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Length_ReturnValue_1;               // 0x0078(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue;                  // 0x007C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Less_IntInt_ReturnValue_1;                // 0x007D(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(FUNCLIB_CoreUtility_C_SetVoxelSoundEffectParameters) == 0x000008, "Wrong alignment on FUNCLIB_CoreUtility_C_SetVoxelSoundEffectParameters");
static_assert(sizeof(FUNCLIB_CoreUtility_C_SetVoxelSoundEffectParameters) == 0x000080, "Wrong size on FUNCLIB_CoreUtility_C_SetVoxelSoundEffectParameters");
static_assert(offsetof(FUNCLIB_CoreUtility_C_SetVoxelSoundEffectParameters, AudioComponent) == 0x000000, "Member 'FUNCLIB_CoreUtility_C_SetVoxelSoundEffectParameters::AudioComponent' has a wrong offset!");
static_assert(offsetof(FUNCLIB_CoreUtility_C_SetVoxelSoundEffectParameters, SoundParameters) == 0x000008, "Member 'FUNCLIB_CoreUtility_C_SetVoxelSoundEffectParameters::SoundParameters' has a wrong offset!");
static_assert(offsetof(FUNCLIB_CoreUtility_C_SetVoxelSoundEffectParameters, __WorldContext) == 0x000038, "Member 'FUNCLIB_CoreUtility_C_SetVoxelSoundEffectParameters::__WorldContext' has a wrong offset!");
static_assert(offsetof(FUNCLIB_CoreUtility_C_SetVoxelSoundEffectParameters, CallFunc_IsValid_ReturnValue) == 0x000040, "Member 'FUNCLIB_CoreUtility_C_SetVoxelSoundEffectParameters::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(FUNCLIB_CoreUtility_C_SetVoxelSoundEffectParameters, Temp_int_Loop_Counter_Variable) == 0x000044, "Member 'FUNCLIB_CoreUtility_C_SetVoxelSoundEffectParameters::Temp_int_Loop_Counter_Variable' has a wrong offset!");
static_assert(offsetof(FUNCLIB_CoreUtility_C_SetVoxelSoundEffectParameters, CallFunc_Add_IntInt_ReturnValue) == 0x000048, "Member 'FUNCLIB_CoreUtility_C_SetVoxelSoundEffectParameters::CallFunc_Add_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(FUNCLIB_CoreUtility_C_SetVoxelSoundEffectParameters, Temp_int_Array_Index_Variable) == 0x00004C, "Member 'FUNCLIB_CoreUtility_C_SetVoxelSoundEffectParameters::Temp_int_Array_Index_Variable' has a wrong offset!");
static_assert(offsetof(FUNCLIB_CoreUtility_C_SetVoxelSoundEffectParameters, Temp_int_Loop_Counter_Variable_1) == 0x000050, "Member 'FUNCLIB_CoreUtility_C_SetVoxelSoundEffectParameters::Temp_int_Loop_Counter_Variable_1' has a wrong offset!");
static_assert(offsetof(FUNCLIB_CoreUtility_C_SetVoxelSoundEffectParameters, CallFunc_Add_IntInt_ReturnValue_1) == 0x000054, "Member 'FUNCLIB_CoreUtility_C_SetVoxelSoundEffectParameters::CallFunc_Add_IntInt_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(FUNCLIB_CoreUtility_C_SetVoxelSoundEffectParameters, Temp_int_Array_Index_Variable_1) == 0x000058, "Member 'FUNCLIB_CoreUtility_C_SetVoxelSoundEffectParameters::Temp_int_Array_Index_Variable_1' has a wrong offset!");
static_assert(offsetof(FUNCLIB_CoreUtility_C_SetVoxelSoundEffectParameters, CallFunc_Array_Get_Item) == 0x00005C, "Member 'FUNCLIB_CoreUtility_C_SetVoxelSoundEffectParameters::CallFunc_Array_Get_Item' has a wrong offset!");
static_assert(offsetof(FUNCLIB_CoreUtility_C_SetVoxelSoundEffectParameters, CallFunc_Array_Get_Item_1) == 0x000068, "Member 'FUNCLIB_CoreUtility_C_SetVoxelSoundEffectParameters::CallFunc_Array_Get_Item_1' has a wrong offset!");
static_assert(offsetof(FUNCLIB_CoreUtility_C_SetVoxelSoundEffectParameters, CallFunc_Array_Length_ReturnValue) == 0x000074, "Member 'FUNCLIB_CoreUtility_C_SetVoxelSoundEffectParameters::CallFunc_Array_Length_ReturnValue' has a wrong offset!");
static_assert(offsetof(FUNCLIB_CoreUtility_C_SetVoxelSoundEffectParameters, CallFunc_Array_Length_ReturnValue_1) == 0x000078, "Member 'FUNCLIB_CoreUtility_C_SetVoxelSoundEffectParameters::CallFunc_Array_Length_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(FUNCLIB_CoreUtility_C_SetVoxelSoundEffectParameters, CallFunc_Less_IntInt_ReturnValue) == 0x00007C, "Member 'FUNCLIB_CoreUtility_C_SetVoxelSoundEffectParameters::CallFunc_Less_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(FUNCLIB_CoreUtility_C_SetVoxelSoundEffectParameters, CallFunc_Less_IntInt_ReturnValue_1) == 0x00007D, "Member 'FUNCLIB_CoreUtility_C_SetVoxelSoundEffectParameters::CallFunc_Less_IntInt_ReturnValue_1' has a wrong offset!");

// Function FUNCLIB_CoreUtility.FUNCLIB_CoreUtility_C.SetParticleEffectParameters
// 0x00B0 (0x00B0 - 0x0000)
struct FUNCLIB_CoreUtility_C_SetParticleEffectParameters final
{
public:
	class UFXSystemComponent*                     EffectsComponent;                                  // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FSTRUCT_EffectParams                   EffectParameters;                                  // 0x0008(0x0030)(BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm, HasGetValueTypeHash)
	class UObject*                                __WorldContext;                                    // 0x0038(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Loop_Counter_Variable;                    // 0x0040(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0044(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_45[0x3];                                       // 0x0045(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Add_IntInt_ReturnValue;                   // 0x0048(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Array_Index_Variable;                     // 0x004C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Loop_Counter_Variable_1;                  // 0x0050(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue_1;                 // 0x0054(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Array_Index_Variable_1;                   // 0x0058(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Loop_Counter_Variable_2;                  // 0x005C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue_2;                 // 0x0060(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Array_Index_Variable_2;                   // 0x0064(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FNamedVector                           CallFunc_Array_Get_Item;                           // 0x0068(0x0014)(NoDestructor)
	struct FNamedInteger                          CallFunc_Array_Get_Item_1;                         // 0x007C(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Length_ReturnValue;                 // 0x0088(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue;                  // 0x008C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_8D[0x3];                                       // 0x008D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Array_Length_ReturnValue_1;               // 0x0090(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue_1;                // 0x0094(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_95[0x3];                                       // 0x0095(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FNamedFloat                            CallFunc_Array_Get_Item_2;                         // 0x0098(0x000C)(NoDestructor)
	int32                                         CallFunc_Array_Length_ReturnValue_2;               // 0x00A4(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue_2;                // 0x00A8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(FUNCLIB_CoreUtility_C_SetParticleEffectParameters) == 0x000008, "Wrong alignment on FUNCLIB_CoreUtility_C_SetParticleEffectParameters");
static_assert(sizeof(FUNCLIB_CoreUtility_C_SetParticleEffectParameters) == 0x0000B0, "Wrong size on FUNCLIB_CoreUtility_C_SetParticleEffectParameters");
static_assert(offsetof(FUNCLIB_CoreUtility_C_SetParticleEffectParameters, EffectsComponent) == 0x000000, "Member 'FUNCLIB_CoreUtility_C_SetParticleEffectParameters::EffectsComponent' has a wrong offset!");
static_assert(offsetof(FUNCLIB_CoreUtility_C_SetParticleEffectParameters, EffectParameters) == 0x000008, "Member 'FUNCLIB_CoreUtility_C_SetParticleEffectParameters::EffectParameters' has a wrong offset!");
static_assert(offsetof(FUNCLIB_CoreUtility_C_SetParticleEffectParameters, __WorldContext) == 0x000038, "Member 'FUNCLIB_CoreUtility_C_SetParticleEffectParameters::__WorldContext' has a wrong offset!");
static_assert(offsetof(FUNCLIB_CoreUtility_C_SetParticleEffectParameters, Temp_int_Loop_Counter_Variable) == 0x000040, "Member 'FUNCLIB_CoreUtility_C_SetParticleEffectParameters::Temp_int_Loop_Counter_Variable' has a wrong offset!");
static_assert(offsetof(FUNCLIB_CoreUtility_C_SetParticleEffectParameters, CallFunc_IsValid_ReturnValue) == 0x000044, "Member 'FUNCLIB_CoreUtility_C_SetParticleEffectParameters::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(FUNCLIB_CoreUtility_C_SetParticleEffectParameters, CallFunc_Add_IntInt_ReturnValue) == 0x000048, "Member 'FUNCLIB_CoreUtility_C_SetParticleEffectParameters::CallFunc_Add_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(FUNCLIB_CoreUtility_C_SetParticleEffectParameters, Temp_int_Array_Index_Variable) == 0x00004C, "Member 'FUNCLIB_CoreUtility_C_SetParticleEffectParameters::Temp_int_Array_Index_Variable' has a wrong offset!");
static_assert(offsetof(FUNCLIB_CoreUtility_C_SetParticleEffectParameters, Temp_int_Loop_Counter_Variable_1) == 0x000050, "Member 'FUNCLIB_CoreUtility_C_SetParticleEffectParameters::Temp_int_Loop_Counter_Variable_1' has a wrong offset!");
static_assert(offsetof(FUNCLIB_CoreUtility_C_SetParticleEffectParameters, CallFunc_Add_IntInt_ReturnValue_1) == 0x000054, "Member 'FUNCLIB_CoreUtility_C_SetParticleEffectParameters::CallFunc_Add_IntInt_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(FUNCLIB_CoreUtility_C_SetParticleEffectParameters, Temp_int_Array_Index_Variable_1) == 0x000058, "Member 'FUNCLIB_CoreUtility_C_SetParticleEffectParameters::Temp_int_Array_Index_Variable_1' has a wrong offset!");
static_assert(offsetof(FUNCLIB_CoreUtility_C_SetParticleEffectParameters, Temp_int_Loop_Counter_Variable_2) == 0x00005C, "Member 'FUNCLIB_CoreUtility_C_SetParticleEffectParameters::Temp_int_Loop_Counter_Variable_2' has a wrong offset!");
static_assert(offsetof(FUNCLIB_CoreUtility_C_SetParticleEffectParameters, CallFunc_Add_IntInt_ReturnValue_2) == 0x000060, "Member 'FUNCLIB_CoreUtility_C_SetParticleEffectParameters::CallFunc_Add_IntInt_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(FUNCLIB_CoreUtility_C_SetParticleEffectParameters, Temp_int_Array_Index_Variable_2) == 0x000064, "Member 'FUNCLIB_CoreUtility_C_SetParticleEffectParameters::Temp_int_Array_Index_Variable_2' has a wrong offset!");
static_assert(offsetof(FUNCLIB_CoreUtility_C_SetParticleEffectParameters, CallFunc_Array_Get_Item) == 0x000068, "Member 'FUNCLIB_CoreUtility_C_SetParticleEffectParameters::CallFunc_Array_Get_Item' has a wrong offset!");
static_assert(offsetof(FUNCLIB_CoreUtility_C_SetParticleEffectParameters, CallFunc_Array_Get_Item_1) == 0x00007C, "Member 'FUNCLIB_CoreUtility_C_SetParticleEffectParameters::CallFunc_Array_Get_Item_1' has a wrong offset!");
static_assert(offsetof(FUNCLIB_CoreUtility_C_SetParticleEffectParameters, CallFunc_Array_Length_ReturnValue) == 0x000088, "Member 'FUNCLIB_CoreUtility_C_SetParticleEffectParameters::CallFunc_Array_Length_ReturnValue' has a wrong offset!");
static_assert(offsetof(FUNCLIB_CoreUtility_C_SetParticleEffectParameters, CallFunc_Less_IntInt_ReturnValue) == 0x00008C, "Member 'FUNCLIB_CoreUtility_C_SetParticleEffectParameters::CallFunc_Less_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(FUNCLIB_CoreUtility_C_SetParticleEffectParameters, CallFunc_Array_Length_ReturnValue_1) == 0x000090, "Member 'FUNCLIB_CoreUtility_C_SetParticleEffectParameters::CallFunc_Array_Length_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(FUNCLIB_CoreUtility_C_SetParticleEffectParameters, CallFunc_Less_IntInt_ReturnValue_1) == 0x000094, "Member 'FUNCLIB_CoreUtility_C_SetParticleEffectParameters::CallFunc_Less_IntInt_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(FUNCLIB_CoreUtility_C_SetParticleEffectParameters, CallFunc_Array_Get_Item_2) == 0x000098, "Member 'FUNCLIB_CoreUtility_C_SetParticleEffectParameters::CallFunc_Array_Get_Item_2' has a wrong offset!");
static_assert(offsetof(FUNCLIB_CoreUtility_C_SetParticleEffectParameters, CallFunc_Array_Length_ReturnValue_2) == 0x0000A4, "Member 'FUNCLIB_CoreUtility_C_SetParticleEffectParameters::CallFunc_Array_Length_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(FUNCLIB_CoreUtility_C_SetParticleEffectParameters, CallFunc_Less_IntInt_ReturnValue_2) == 0x0000A8, "Member 'FUNCLIB_CoreUtility_C_SetParticleEffectParameters::CallFunc_Less_IntInt_ReturnValue_2' has a wrong offset!");

// Function FUNCLIB_CoreUtility.FUNCLIB_CoreUtility_C.GetClosestActor
// 0x0070 (0x0070 - 0x0000)
struct FUNCLIB_CoreUtility_C_GetClosestActor final
{
public:
	class AActor*                                 Actor;                                             // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TArray<class AActor*>                         OtherActors;                                       // 0x0008(0x0010)(BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
	class UObject*                                __WorldContext;                                    // 0x0018(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 ClosestActor;                                      // 0x0020(0x0008)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         DistanceSquared;                                   // 0x0028(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CurrentDistanceSquared;                            // 0x002C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         ClosestDistanceSquared;                            // 0x0030(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_34[0x4];                                       // 0x0034(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class AActor*                                 OtherActor;                                        // 0x0038(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 ClosestOtherActor;                                 // 0x0040(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Length_ReturnValue;                 // 0x0048(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Array_Index_Variable;                     // 0x004C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Loop_Counter_Variable;                    // 0x0050(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_54[0x4];                                       // 0x0054(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class AActor*                                 CallFunc_Array_Get_Item;                           // 0x0058(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue;                  // 0x0060(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_61[0x3];                                       // 0x0061(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Add_IntInt_ReturnValue;                   // 0x0064(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_NotEqual_ObjectObject_ReturnValue;        // 0x0068(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Less_FloatFloat_ReturnValue;              // 0x0069(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_6A[0x2];                                       // 0x006A(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_GetSquaredDistanceTo_ReturnValue;         // 0x006C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(FUNCLIB_CoreUtility_C_GetClosestActor) == 0x000008, "Wrong alignment on FUNCLIB_CoreUtility_C_GetClosestActor");
static_assert(sizeof(FUNCLIB_CoreUtility_C_GetClosestActor) == 0x000070, "Wrong size on FUNCLIB_CoreUtility_C_GetClosestActor");
static_assert(offsetof(FUNCLIB_CoreUtility_C_GetClosestActor, Actor) == 0x000000, "Member 'FUNCLIB_CoreUtility_C_GetClosestActor::Actor' has a wrong offset!");
static_assert(offsetof(FUNCLIB_CoreUtility_C_GetClosestActor, OtherActors) == 0x000008, "Member 'FUNCLIB_CoreUtility_C_GetClosestActor::OtherActors' has a wrong offset!");
static_assert(offsetof(FUNCLIB_CoreUtility_C_GetClosestActor, __WorldContext) == 0x000018, "Member 'FUNCLIB_CoreUtility_C_GetClosestActor::__WorldContext' has a wrong offset!");
static_assert(offsetof(FUNCLIB_CoreUtility_C_GetClosestActor, ClosestActor) == 0x000020, "Member 'FUNCLIB_CoreUtility_C_GetClosestActor::ClosestActor' has a wrong offset!");
static_assert(offsetof(FUNCLIB_CoreUtility_C_GetClosestActor, DistanceSquared) == 0x000028, "Member 'FUNCLIB_CoreUtility_C_GetClosestActor::DistanceSquared' has a wrong offset!");
static_assert(offsetof(FUNCLIB_CoreUtility_C_GetClosestActor, CurrentDistanceSquared) == 0x00002C, "Member 'FUNCLIB_CoreUtility_C_GetClosestActor::CurrentDistanceSquared' has a wrong offset!");
static_assert(offsetof(FUNCLIB_CoreUtility_C_GetClosestActor, ClosestDistanceSquared) == 0x000030, "Member 'FUNCLIB_CoreUtility_C_GetClosestActor::ClosestDistanceSquared' has a wrong offset!");
static_assert(offsetof(FUNCLIB_CoreUtility_C_GetClosestActor, OtherActor) == 0x000038, "Member 'FUNCLIB_CoreUtility_C_GetClosestActor::OtherActor' has a wrong offset!");
static_assert(offsetof(FUNCLIB_CoreUtility_C_GetClosestActor, ClosestOtherActor) == 0x000040, "Member 'FUNCLIB_CoreUtility_C_GetClosestActor::ClosestOtherActor' has a wrong offset!");
static_assert(offsetof(FUNCLIB_CoreUtility_C_GetClosestActor, CallFunc_Array_Length_ReturnValue) == 0x000048, "Member 'FUNCLIB_CoreUtility_C_GetClosestActor::CallFunc_Array_Length_ReturnValue' has a wrong offset!");
static_assert(offsetof(FUNCLIB_CoreUtility_C_GetClosestActor, Temp_int_Array_Index_Variable) == 0x00004C, "Member 'FUNCLIB_CoreUtility_C_GetClosestActor::Temp_int_Array_Index_Variable' has a wrong offset!");
static_assert(offsetof(FUNCLIB_CoreUtility_C_GetClosestActor, Temp_int_Loop_Counter_Variable) == 0x000050, "Member 'FUNCLIB_CoreUtility_C_GetClosestActor::Temp_int_Loop_Counter_Variable' has a wrong offset!");
static_assert(offsetof(FUNCLIB_CoreUtility_C_GetClosestActor, CallFunc_Array_Get_Item) == 0x000058, "Member 'FUNCLIB_CoreUtility_C_GetClosestActor::CallFunc_Array_Get_Item' has a wrong offset!");
static_assert(offsetof(FUNCLIB_CoreUtility_C_GetClosestActor, CallFunc_Less_IntInt_ReturnValue) == 0x000060, "Member 'FUNCLIB_CoreUtility_C_GetClosestActor::CallFunc_Less_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(FUNCLIB_CoreUtility_C_GetClosestActor, CallFunc_Add_IntInt_ReturnValue) == 0x000064, "Member 'FUNCLIB_CoreUtility_C_GetClosestActor::CallFunc_Add_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(FUNCLIB_CoreUtility_C_GetClosestActor, CallFunc_NotEqual_ObjectObject_ReturnValue) == 0x000068, "Member 'FUNCLIB_CoreUtility_C_GetClosestActor::CallFunc_NotEqual_ObjectObject_ReturnValue' has a wrong offset!");
static_assert(offsetof(FUNCLIB_CoreUtility_C_GetClosestActor, CallFunc_Less_FloatFloat_ReturnValue) == 0x000069, "Member 'FUNCLIB_CoreUtility_C_GetClosestActor::CallFunc_Less_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(FUNCLIB_CoreUtility_C_GetClosestActor, CallFunc_GetSquaredDistanceTo_ReturnValue) == 0x00006C, "Member 'FUNCLIB_CoreUtility_C_GetClosestActor::CallFunc_GetSquaredDistanceTo_ReturnValue' has a wrong offset!");

// Function FUNCLIB_CoreUtility.FUNCLIB_CoreUtility_C.CreateRandomSeedForContext
// 0x0048 (0x0048 - 0x0000)
struct FUNCLIB_CoreUtility_C_CreateRandomSeedForContext final
{
public:
	class FString                                 Context;                                           // 0x0000(0x0010)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, HasGetValueTypeHash)
	class UObject*                                __WorldContext;                                    // 0x0010(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Seed;                                              // 0x0018(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         SessionId;                                         // 0x001C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UGameInstance*                          CallFunc_GetGameInstance_ReturnValue;              // 0x0020(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UGI_SinglePlayer_C*                     K2Node_DynamicCast_AsGI_Single_Player;             // 0x0028(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0030(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_31[0x3];                                       // 0x0031(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_HashString_ReturnValue;                   // 0x0034(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_HashCombineInt32_ReturnValue;             // 0x0038(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_HashInt64_ReturnValue;                    // 0x003C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Greater_Int64Int64_ReturnValue;           // 0x0040(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(FUNCLIB_CoreUtility_C_CreateRandomSeedForContext) == 0x000008, "Wrong alignment on FUNCLIB_CoreUtility_C_CreateRandomSeedForContext");
static_assert(sizeof(FUNCLIB_CoreUtility_C_CreateRandomSeedForContext) == 0x000048, "Wrong size on FUNCLIB_CoreUtility_C_CreateRandomSeedForContext");
static_assert(offsetof(FUNCLIB_CoreUtility_C_CreateRandomSeedForContext, Context) == 0x000000, "Member 'FUNCLIB_CoreUtility_C_CreateRandomSeedForContext::Context' has a wrong offset!");
static_assert(offsetof(FUNCLIB_CoreUtility_C_CreateRandomSeedForContext, __WorldContext) == 0x000010, "Member 'FUNCLIB_CoreUtility_C_CreateRandomSeedForContext::__WorldContext' has a wrong offset!");
static_assert(offsetof(FUNCLIB_CoreUtility_C_CreateRandomSeedForContext, Seed) == 0x000018, "Member 'FUNCLIB_CoreUtility_C_CreateRandomSeedForContext::Seed' has a wrong offset!");
static_assert(offsetof(FUNCLIB_CoreUtility_C_CreateRandomSeedForContext, SessionId) == 0x00001C, "Member 'FUNCLIB_CoreUtility_C_CreateRandomSeedForContext::SessionId' has a wrong offset!");
static_assert(offsetof(FUNCLIB_CoreUtility_C_CreateRandomSeedForContext, CallFunc_GetGameInstance_ReturnValue) == 0x000020, "Member 'FUNCLIB_CoreUtility_C_CreateRandomSeedForContext::CallFunc_GetGameInstance_ReturnValue' has a wrong offset!");
static_assert(offsetof(FUNCLIB_CoreUtility_C_CreateRandomSeedForContext, K2Node_DynamicCast_AsGI_Single_Player) == 0x000028, "Member 'FUNCLIB_CoreUtility_C_CreateRandomSeedForContext::K2Node_DynamicCast_AsGI_Single_Player' has a wrong offset!");
static_assert(offsetof(FUNCLIB_CoreUtility_C_CreateRandomSeedForContext, K2Node_DynamicCast_bSuccess) == 0x000030, "Member 'FUNCLIB_CoreUtility_C_CreateRandomSeedForContext::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(FUNCLIB_CoreUtility_C_CreateRandomSeedForContext, CallFunc_HashString_ReturnValue) == 0x000034, "Member 'FUNCLIB_CoreUtility_C_CreateRandomSeedForContext::CallFunc_HashString_ReturnValue' has a wrong offset!");
static_assert(offsetof(FUNCLIB_CoreUtility_C_CreateRandomSeedForContext, CallFunc_HashCombineInt32_ReturnValue) == 0x000038, "Member 'FUNCLIB_CoreUtility_C_CreateRandomSeedForContext::CallFunc_HashCombineInt32_ReturnValue' has a wrong offset!");
static_assert(offsetof(FUNCLIB_CoreUtility_C_CreateRandomSeedForContext, CallFunc_HashInt64_ReturnValue) == 0x00003C, "Member 'FUNCLIB_CoreUtility_C_CreateRandomSeedForContext::CallFunc_HashInt64_ReturnValue' has a wrong offset!");
static_assert(offsetof(FUNCLIB_CoreUtility_C_CreateRandomSeedForContext, CallFunc_Greater_Int64Int64_ReturnValue) == 0x000040, "Member 'FUNCLIB_CoreUtility_C_CreateRandomSeedForContext::CallFunc_Greater_Int64Int64_ReturnValue' has a wrong offset!");

// Function FUNCLIB_CoreUtility.FUNCLIB_CoreUtility_C.GetEnumText_GameDifficultyConfigCategory
// 0x00A8 (0x00A8 - 0x0000)
struct FUNCLIB_CoreUtility_C_GetEnumText_GameDifficultyConfigCategory final
{
public:
	ENUM_GameDifficultyConfigCategory             EnumGameDifficultyConfigCategory;                  // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UObject*                                __WorldContext;                                    // 0x0008(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FText                                   EnumText;                                          // 0x0010(0x0018)(Parm, OutParm)
	ENUM_GameDifficultyConfigCategory             Temp_byte_Variable;                                // 0x0028(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_29[0x7];                                       // 0x0029(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   Temp_text_Variable;                                // 0x0030(0x0018)()
	class FText                                   Temp_text_Variable_1;                              // 0x0048(0x0018)()
	class FText                                   Temp_text_Variable_2;                              // 0x0060(0x0018)()
	class FText                                   Temp_text_Variable_3;                              // 0x0078(0x0018)()
	class FText                                   K2Node_Select_Default;                             // 0x0090(0x0018)()
};
static_assert(alignof(FUNCLIB_CoreUtility_C_GetEnumText_GameDifficultyConfigCategory) == 0x000008, "Wrong alignment on FUNCLIB_CoreUtility_C_GetEnumText_GameDifficultyConfigCategory");
static_assert(sizeof(FUNCLIB_CoreUtility_C_GetEnumText_GameDifficultyConfigCategory) == 0x0000A8, "Wrong size on FUNCLIB_CoreUtility_C_GetEnumText_GameDifficultyConfigCategory");
static_assert(offsetof(FUNCLIB_CoreUtility_C_GetEnumText_GameDifficultyConfigCategory, EnumGameDifficultyConfigCategory) == 0x000000, "Member 'FUNCLIB_CoreUtility_C_GetEnumText_GameDifficultyConfigCategory::EnumGameDifficultyConfigCategory' has a wrong offset!");
static_assert(offsetof(FUNCLIB_CoreUtility_C_GetEnumText_GameDifficultyConfigCategory, __WorldContext) == 0x000008, "Member 'FUNCLIB_CoreUtility_C_GetEnumText_GameDifficultyConfigCategory::__WorldContext' has a wrong offset!");
static_assert(offsetof(FUNCLIB_CoreUtility_C_GetEnumText_GameDifficultyConfigCategory, EnumText) == 0x000010, "Member 'FUNCLIB_CoreUtility_C_GetEnumText_GameDifficultyConfigCategory::EnumText' has a wrong offset!");
static_assert(offsetof(FUNCLIB_CoreUtility_C_GetEnumText_GameDifficultyConfigCategory, Temp_byte_Variable) == 0x000028, "Member 'FUNCLIB_CoreUtility_C_GetEnumText_GameDifficultyConfigCategory::Temp_byte_Variable' has a wrong offset!");
static_assert(offsetof(FUNCLIB_CoreUtility_C_GetEnumText_GameDifficultyConfigCategory, Temp_text_Variable) == 0x000030, "Member 'FUNCLIB_CoreUtility_C_GetEnumText_GameDifficultyConfigCategory::Temp_text_Variable' has a wrong offset!");
static_assert(offsetof(FUNCLIB_CoreUtility_C_GetEnumText_GameDifficultyConfigCategory, Temp_text_Variable_1) == 0x000048, "Member 'FUNCLIB_CoreUtility_C_GetEnumText_GameDifficultyConfigCategory::Temp_text_Variable_1' has a wrong offset!");
static_assert(offsetof(FUNCLIB_CoreUtility_C_GetEnumText_GameDifficultyConfigCategory, Temp_text_Variable_2) == 0x000060, "Member 'FUNCLIB_CoreUtility_C_GetEnumText_GameDifficultyConfigCategory::Temp_text_Variable_2' has a wrong offset!");
static_assert(offsetof(FUNCLIB_CoreUtility_C_GetEnumText_GameDifficultyConfigCategory, Temp_text_Variable_3) == 0x000078, "Member 'FUNCLIB_CoreUtility_C_GetEnumText_GameDifficultyConfigCategory::Temp_text_Variable_3' has a wrong offset!");
static_assert(offsetof(FUNCLIB_CoreUtility_C_GetEnumText_GameDifficultyConfigCategory, K2Node_Select_Default) == 0x000090, "Member 'FUNCLIB_CoreUtility_C_GetEnumText_GameDifficultyConfigCategory::K2Node_Select_Default' has a wrong offset!");

// Function FUNCLIB_CoreUtility.FUNCLIB_CoreUtility_C.GetEnumText_HotbarStyle
// 0x00A8 (0x00A8 - 0x0000)
struct FUNCLIB_CoreUtility_C_GetEnumText_HotbarStyle final
{
public:
	ENUM_HotbarStyle                              EnumHotbarStyle;                                   // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UObject*                                __WorldContext;                                    // 0x0008(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FText                                   EnumText;                                          // 0x0010(0x0018)(Parm, OutParm)
	ENUM_HotbarStyle                              Temp_byte_Variable;                                // 0x0028(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_29[0x7];                                       // 0x0029(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   Temp_text_Variable;                                // 0x0030(0x0018)()
	class FText                                   Temp_text_Variable_1;                              // 0x0048(0x0018)()
	class FText                                   Temp_text_Variable_2;                              // 0x0060(0x0018)()
	class FText                                   Temp_text_Variable_3;                              // 0x0078(0x0018)()
	class FText                                   K2Node_Select_Default;                             // 0x0090(0x0018)()
};
static_assert(alignof(FUNCLIB_CoreUtility_C_GetEnumText_HotbarStyle) == 0x000008, "Wrong alignment on FUNCLIB_CoreUtility_C_GetEnumText_HotbarStyle");
static_assert(sizeof(FUNCLIB_CoreUtility_C_GetEnumText_HotbarStyle) == 0x0000A8, "Wrong size on FUNCLIB_CoreUtility_C_GetEnumText_HotbarStyle");
static_assert(offsetof(FUNCLIB_CoreUtility_C_GetEnumText_HotbarStyle, EnumHotbarStyle) == 0x000000, "Member 'FUNCLIB_CoreUtility_C_GetEnumText_HotbarStyle::EnumHotbarStyle' has a wrong offset!");
static_assert(offsetof(FUNCLIB_CoreUtility_C_GetEnumText_HotbarStyle, __WorldContext) == 0x000008, "Member 'FUNCLIB_CoreUtility_C_GetEnumText_HotbarStyle::__WorldContext' has a wrong offset!");
static_assert(offsetof(FUNCLIB_CoreUtility_C_GetEnumText_HotbarStyle, EnumText) == 0x000010, "Member 'FUNCLIB_CoreUtility_C_GetEnumText_HotbarStyle::EnumText' has a wrong offset!");
static_assert(offsetof(FUNCLIB_CoreUtility_C_GetEnumText_HotbarStyle, Temp_byte_Variable) == 0x000028, "Member 'FUNCLIB_CoreUtility_C_GetEnumText_HotbarStyle::Temp_byte_Variable' has a wrong offset!");
static_assert(offsetof(FUNCLIB_CoreUtility_C_GetEnumText_HotbarStyle, Temp_text_Variable) == 0x000030, "Member 'FUNCLIB_CoreUtility_C_GetEnumText_HotbarStyle::Temp_text_Variable' has a wrong offset!");
static_assert(offsetof(FUNCLIB_CoreUtility_C_GetEnumText_HotbarStyle, Temp_text_Variable_1) == 0x000048, "Member 'FUNCLIB_CoreUtility_C_GetEnumText_HotbarStyle::Temp_text_Variable_1' has a wrong offset!");
static_assert(offsetof(FUNCLIB_CoreUtility_C_GetEnumText_HotbarStyle, Temp_text_Variable_2) == 0x000060, "Member 'FUNCLIB_CoreUtility_C_GetEnumText_HotbarStyle::Temp_text_Variable_2' has a wrong offset!");
static_assert(offsetof(FUNCLIB_CoreUtility_C_GetEnumText_HotbarStyle, Temp_text_Variable_3) == 0x000078, "Member 'FUNCLIB_CoreUtility_C_GetEnumText_HotbarStyle::Temp_text_Variable_3' has a wrong offset!");
static_assert(offsetof(FUNCLIB_CoreUtility_C_GetEnumText_HotbarStyle, K2Node_Select_Default) == 0x000090, "Member 'FUNCLIB_CoreUtility_C_GetEnumText_HotbarStyle::K2Node_Select_Default' has a wrong offset!");

// Function FUNCLIB_CoreUtility.FUNCLIB_CoreUtility_C.GetEnumText_LaserRapierColor
// 0x0138 (0x0138 - 0x0000)
struct FUNCLIB_CoreUtility_C_GetEnumText_LaserRapierColor final
{
public:
	ENUM_LaserRapierColor                         EnumLaserRapierColor;                              // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UObject*                                __WorldContext;                                    // 0x0008(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FText                                   EnumText;                                          // 0x0010(0x0018)(Parm, OutParm)
	ENUM_LaserRapierColor                         Temp_byte_Variable;                                // 0x0028(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_29[0x7];                                       // 0x0029(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   Temp_text_Variable;                                // 0x0030(0x0018)()
	class FText                                   Temp_text_Variable_1;                              // 0x0048(0x0018)()
	class FText                                   Temp_text_Variable_2;                              // 0x0060(0x0018)()
	class FText                                   Temp_text_Variable_3;                              // 0x0078(0x0018)()
	class FText                                   Temp_text_Variable_4;                              // 0x0090(0x0018)()
	class FText                                   Temp_text_Variable_5;                              // 0x00A8(0x0018)()
	class FText                                   Temp_text_Variable_6;                              // 0x00C0(0x0018)()
	class FText                                   Temp_text_Variable_7;                              // 0x00D8(0x0018)()
	class FText                                   Temp_text_Variable_8;                              // 0x00F0(0x0018)()
	class FText                                   Temp_text_Variable_9;                              // 0x0108(0x0018)()
	class FText                                   K2Node_Select_Default;                             // 0x0120(0x0018)()
};
static_assert(alignof(FUNCLIB_CoreUtility_C_GetEnumText_LaserRapierColor) == 0x000008, "Wrong alignment on FUNCLIB_CoreUtility_C_GetEnumText_LaserRapierColor");
static_assert(sizeof(FUNCLIB_CoreUtility_C_GetEnumText_LaserRapierColor) == 0x000138, "Wrong size on FUNCLIB_CoreUtility_C_GetEnumText_LaserRapierColor");
static_assert(offsetof(FUNCLIB_CoreUtility_C_GetEnumText_LaserRapierColor, EnumLaserRapierColor) == 0x000000, "Member 'FUNCLIB_CoreUtility_C_GetEnumText_LaserRapierColor::EnumLaserRapierColor' has a wrong offset!");
static_assert(offsetof(FUNCLIB_CoreUtility_C_GetEnumText_LaserRapierColor, __WorldContext) == 0x000008, "Member 'FUNCLIB_CoreUtility_C_GetEnumText_LaserRapierColor::__WorldContext' has a wrong offset!");
static_assert(offsetof(FUNCLIB_CoreUtility_C_GetEnumText_LaserRapierColor, EnumText) == 0x000010, "Member 'FUNCLIB_CoreUtility_C_GetEnumText_LaserRapierColor::EnumText' has a wrong offset!");
static_assert(offsetof(FUNCLIB_CoreUtility_C_GetEnumText_LaserRapierColor, Temp_byte_Variable) == 0x000028, "Member 'FUNCLIB_CoreUtility_C_GetEnumText_LaserRapierColor::Temp_byte_Variable' has a wrong offset!");
static_assert(offsetof(FUNCLIB_CoreUtility_C_GetEnumText_LaserRapierColor, Temp_text_Variable) == 0x000030, "Member 'FUNCLIB_CoreUtility_C_GetEnumText_LaserRapierColor::Temp_text_Variable' has a wrong offset!");
static_assert(offsetof(FUNCLIB_CoreUtility_C_GetEnumText_LaserRapierColor, Temp_text_Variable_1) == 0x000048, "Member 'FUNCLIB_CoreUtility_C_GetEnumText_LaserRapierColor::Temp_text_Variable_1' has a wrong offset!");
static_assert(offsetof(FUNCLIB_CoreUtility_C_GetEnumText_LaserRapierColor, Temp_text_Variable_2) == 0x000060, "Member 'FUNCLIB_CoreUtility_C_GetEnumText_LaserRapierColor::Temp_text_Variable_2' has a wrong offset!");
static_assert(offsetof(FUNCLIB_CoreUtility_C_GetEnumText_LaserRapierColor, Temp_text_Variable_3) == 0x000078, "Member 'FUNCLIB_CoreUtility_C_GetEnumText_LaserRapierColor::Temp_text_Variable_3' has a wrong offset!");
static_assert(offsetof(FUNCLIB_CoreUtility_C_GetEnumText_LaserRapierColor, Temp_text_Variable_4) == 0x000090, "Member 'FUNCLIB_CoreUtility_C_GetEnumText_LaserRapierColor::Temp_text_Variable_4' has a wrong offset!");
static_assert(offsetof(FUNCLIB_CoreUtility_C_GetEnumText_LaserRapierColor, Temp_text_Variable_5) == 0x0000A8, "Member 'FUNCLIB_CoreUtility_C_GetEnumText_LaserRapierColor::Temp_text_Variable_5' has a wrong offset!");
static_assert(offsetof(FUNCLIB_CoreUtility_C_GetEnumText_LaserRapierColor, Temp_text_Variable_6) == 0x0000C0, "Member 'FUNCLIB_CoreUtility_C_GetEnumText_LaserRapierColor::Temp_text_Variable_6' has a wrong offset!");
static_assert(offsetof(FUNCLIB_CoreUtility_C_GetEnumText_LaserRapierColor, Temp_text_Variable_7) == 0x0000D8, "Member 'FUNCLIB_CoreUtility_C_GetEnumText_LaserRapierColor::Temp_text_Variable_7' has a wrong offset!");
static_assert(offsetof(FUNCLIB_CoreUtility_C_GetEnumText_LaserRapierColor, Temp_text_Variable_8) == 0x0000F0, "Member 'FUNCLIB_CoreUtility_C_GetEnumText_LaserRapierColor::Temp_text_Variable_8' has a wrong offset!");
static_assert(offsetof(FUNCLIB_CoreUtility_C_GetEnumText_LaserRapierColor, Temp_text_Variable_9) == 0x000108, "Member 'FUNCLIB_CoreUtility_C_GetEnumText_LaserRapierColor::Temp_text_Variable_9' has a wrong offset!");
static_assert(offsetof(FUNCLIB_CoreUtility_C_GetEnumText_LaserRapierColor, K2Node_Select_Default) == 0x000120, "Member 'FUNCLIB_CoreUtility_C_GetEnumText_LaserRapierColor::K2Node_Select_Default' has a wrong offset!");

// Function FUNCLIB_CoreUtility.FUNCLIB_CoreUtility_C.GetEnumText_MediaTabFilterType
// 0x00A8 (0x00A8 - 0x0000)
struct FUNCLIB_CoreUtility_C_GetEnumText_MediaTabFilterType final
{
public:
	ENUM_MediaTabFilterType                       EnumMediaTabFilterType;                            // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UObject*                                __WorldContext;                                    // 0x0008(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FText                                   EnumText;                                          // 0x0010(0x0018)(Parm, OutParm)
	ENUM_MediaTabFilterType                       Temp_byte_Variable;                                // 0x0028(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_29[0x7];                                       // 0x0029(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   Temp_text_Variable;                                // 0x0030(0x0018)()
	class FText                                   Temp_text_Variable_1;                              // 0x0048(0x0018)()
	class FText                                   Temp_text_Variable_2;                              // 0x0060(0x0018)()
	class FText                                   Temp_text_Variable_3;                              // 0x0078(0x0018)()
	class FText                                   K2Node_Select_Default;                             // 0x0090(0x0018)()
};
static_assert(alignof(FUNCLIB_CoreUtility_C_GetEnumText_MediaTabFilterType) == 0x000008, "Wrong alignment on FUNCLIB_CoreUtility_C_GetEnumText_MediaTabFilterType");
static_assert(sizeof(FUNCLIB_CoreUtility_C_GetEnumText_MediaTabFilterType) == 0x0000A8, "Wrong size on FUNCLIB_CoreUtility_C_GetEnumText_MediaTabFilterType");
static_assert(offsetof(FUNCLIB_CoreUtility_C_GetEnumText_MediaTabFilterType, EnumMediaTabFilterType) == 0x000000, "Member 'FUNCLIB_CoreUtility_C_GetEnumText_MediaTabFilterType::EnumMediaTabFilterType' has a wrong offset!");
static_assert(offsetof(FUNCLIB_CoreUtility_C_GetEnumText_MediaTabFilterType, __WorldContext) == 0x000008, "Member 'FUNCLIB_CoreUtility_C_GetEnumText_MediaTabFilterType::__WorldContext' has a wrong offset!");
static_assert(offsetof(FUNCLIB_CoreUtility_C_GetEnumText_MediaTabFilterType, EnumText) == 0x000010, "Member 'FUNCLIB_CoreUtility_C_GetEnumText_MediaTabFilterType::EnumText' has a wrong offset!");
static_assert(offsetof(FUNCLIB_CoreUtility_C_GetEnumText_MediaTabFilterType, Temp_byte_Variable) == 0x000028, "Member 'FUNCLIB_CoreUtility_C_GetEnumText_MediaTabFilterType::Temp_byte_Variable' has a wrong offset!");
static_assert(offsetof(FUNCLIB_CoreUtility_C_GetEnumText_MediaTabFilterType, Temp_text_Variable) == 0x000030, "Member 'FUNCLIB_CoreUtility_C_GetEnumText_MediaTabFilterType::Temp_text_Variable' has a wrong offset!");
static_assert(offsetof(FUNCLIB_CoreUtility_C_GetEnumText_MediaTabFilterType, Temp_text_Variable_1) == 0x000048, "Member 'FUNCLIB_CoreUtility_C_GetEnumText_MediaTabFilterType::Temp_text_Variable_1' has a wrong offset!");
static_assert(offsetof(FUNCLIB_CoreUtility_C_GetEnumText_MediaTabFilterType, Temp_text_Variable_2) == 0x000060, "Member 'FUNCLIB_CoreUtility_C_GetEnumText_MediaTabFilterType::Temp_text_Variable_2' has a wrong offset!");
static_assert(offsetof(FUNCLIB_CoreUtility_C_GetEnumText_MediaTabFilterType, Temp_text_Variable_3) == 0x000078, "Member 'FUNCLIB_CoreUtility_C_GetEnumText_MediaTabFilterType::Temp_text_Variable_3' has a wrong offset!");
static_assert(offsetof(FUNCLIB_CoreUtility_C_GetEnumText_MediaTabFilterType, K2Node_Select_Default) == 0x000090, "Member 'FUNCLIB_CoreUtility_C_GetEnumText_MediaTabFilterType::K2Node_Select_Default' has a wrong offset!");

// Function FUNCLIB_CoreUtility.FUNCLIB_CoreUtility_C.GetEnumText_OffReducedNormal
// 0x0090 (0x0090 - 0x0000)
struct FUNCLIB_CoreUtility_C_GetEnumText_OffReducedNormal final
{
public:
	ENUM_OffReducedNormal                         ENUM_OffReducedNormal;                             // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UObject*                                __WorldContext;                                    // 0x0008(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FText                                   EnumText;                                          // 0x0010(0x0018)(Parm, OutParm)
	ENUM_OffReducedNormal                         Temp_byte_Variable;                                // 0x0028(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_29[0x7];                                       // 0x0029(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   CallFunc_MakeLiteralText_ReturnValue;              // 0x0030(0x0018)()
	class FText                                   CallFunc_MakeLiteralText_ReturnValue_1;            // 0x0048(0x0018)()
	class FText                                   CallFunc_MakeLiteralText_ReturnValue_2;            // 0x0060(0x0018)()
	class FText                                   K2Node_Select_Default;                             // 0x0078(0x0018)()
};
static_assert(alignof(FUNCLIB_CoreUtility_C_GetEnumText_OffReducedNormal) == 0x000008, "Wrong alignment on FUNCLIB_CoreUtility_C_GetEnumText_OffReducedNormal");
static_assert(sizeof(FUNCLIB_CoreUtility_C_GetEnumText_OffReducedNormal) == 0x000090, "Wrong size on FUNCLIB_CoreUtility_C_GetEnumText_OffReducedNormal");
static_assert(offsetof(FUNCLIB_CoreUtility_C_GetEnumText_OffReducedNormal, ENUM_OffReducedNormal) == 0x000000, "Member 'FUNCLIB_CoreUtility_C_GetEnumText_OffReducedNormal::ENUM_OffReducedNormal' has a wrong offset!");
static_assert(offsetof(FUNCLIB_CoreUtility_C_GetEnumText_OffReducedNormal, __WorldContext) == 0x000008, "Member 'FUNCLIB_CoreUtility_C_GetEnumText_OffReducedNormal::__WorldContext' has a wrong offset!");
static_assert(offsetof(FUNCLIB_CoreUtility_C_GetEnumText_OffReducedNormal, EnumText) == 0x000010, "Member 'FUNCLIB_CoreUtility_C_GetEnumText_OffReducedNormal::EnumText' has a wrong offset!");
static_assert(offsetof(FUNCLIB_CoreUtility_C_GetEnumText_OffReducedNormal, Temp_byte_Variable) == 0x000028, "Member 'FUNCLIB_CoreUtility_C_GetEnumText_OffReducedNormal::Temp_byte_Variable' has a wrong offset!");
static_assert(offsetof(FUNCLIB_CoreUtility_C_GetEnumText_OffReducedNormal, CallFunc_MakeLiteralText_ReturnValue) == 0x000030, "Member 'FUNCLIB_CoreUtility_C_GetEnumText_OffReducedNormal::CallFunc_MakeLiteralText_ReturnValue' has a wrong offset!");
static_assert(offsetof(FUNCLIB_CoreUtility_C_GetEnumText_OffReducedNormal, CallFunc_MakeLiteralText_ReturnValue_1) == 0x000048, "Member 'FUNCLIB_CoreUtility_C_GetEnumText_OffReducedNormal::CallFunc_MakeLiteralText_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(FUNCLIB_CoreUtility_C_GetEnumText_OffReducedNormal, CallFunc_MakeLiteralText_ReturnValue_2) == 0x000060, "Member 'FUNCLIB_CoreUtility_C_GetEnumText_OffReducedNormal::CallFunc_MakeLiteralText_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(FUNCLIB_CoreUtility_C_GetEnumText_OffReducedNormal, K2Node_Select_Default) == 0x000078, "Member 'FUNCLIB_CoreUtility_C_GetEnumText_OffReducedNormal::K2Node_Select_Default' has a wrong offset!");

// Function FUNCLIB_CoreUtility.FUNCLIB_CoreUtility_C.GetEnumText_OffLowMediumHigh
// 0x00A8 (0x00A8 - 0x0000)
struct FUNCLIB_CoreUtility_C_GetEnumText_OffLowMediumHigh final
{
public:
	ENUM_OffLowMediumHigh                         EnumOffLowMediumHigh;                              // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UObject*                                __WorldContext;                                    // 0x0008(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FText                                   EnumText;                                          // 0x0010(0x0018)(Parm, OutParm)
	ENUM_OffLowMediumHigh                         Temp_byte_Variable;                                // 0x0028(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_29[0x7];                                       // 0x0029(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   Temp_text_Variable;                                // 0x0030(0x0018)()
	class FText                                   Temp_text_Variable_1;                              // 0x0048(0x0018)()
	class FText                                   Temp_text_Variable_2;                              // 0x0060(0x0018)()
	class FText                                   Temp_text_Variable_3;                              // 0x0078(0x0018)()
	class FText                                   K2Node_Select_Default;                             // 0x0090(0x0018)()
};
static_assert(alignof(FUNCLIB_CoreUtility_C_GetEnumText_OffLowMediumHigh) == 0x000008, "Wrong alignment on FUNCLIB_CoreUtility_C_GetEnumText_OffLowMediumHigh");
static_assert(sizeof(FUNCLIB_CoreUtility_C_GetEnumText_OffLowMediumHigh) == 0x0000A8, "Wrong size on FUNCLIB_CoreUtility_C_GetEnumText_OffLowMediumHigh");
static_assert(offsetof(FUNCLIB_CoreUtility_C_GetEnumText_OffLowMediumHigh, EnumOffLowMediumHigh) == 0x000000, "Member 'FUNCLIB_CoreUtility_C_GetEnumText_OffLowMediumHigh::EnumOffLowMediumHigh' has a wrong offset!");
static_assert(offsetof(FUNCLIB_CoreUtility_C_GetEnumText_OffLowMediumHigh, __WorldContext) == 0x000008, "Member 'FUNCLIB_CoreUtility_C_GetEnumText_OffLowMediumHigh::__WorldContext' has a wrong offset!");
static_assert(offsetof(FUNCLIB_CoreUtility_C_GetEnumText_OffLowMediumHigh, EnumText) == 0x000010, "Member 'FUNCLIB_CoreUtility_C_GetEnumText_OffLowMediumHigh::EnumText' has a wrong offset!");
static_assert(offsetof(FUNCLIB_CoreUtility_C_GetEnumText_OffLowMediumHigh, Temp_byte_Variable) == 0x000028, "Member 'FUNCLIB_CoreUtility_C_GetEnumText_OffLowMediumHigh::Temp_byte_Variable' has a wrong offset!");
static_assert(offsetof(FUNCLIB_CoreUtility_C_GetEnumText_OffLowMediumHigh, Temp_text_Variable) == 0x000030, "Member 'FUNCLIB_CoreUtility_C_GetEnumText_OffLowMediumHigh::Temp_text_Variable' has a wrong offset!");
static_assert(offsetof(FUNCLIB_CoreUtility_C_GetEnumText_OffLowMediumHigh, Temp_text_Variable_1) == 0x000048, "Member 'FUNCLIB_CoreUtility_C_GetEnumText_OffLowMediumHigh::Temp_text_Variable_1' has a wrong offset!");
static_assert(offsetof(FUNCLIB_CoreUtility_C_GetEnumText_OffLowMediumHigh, Temp_text_Variable_2) == 0x000060, "Member 'FUNCLIB_CoreUtility_C_GetEnumText_OffLowMediumHigh::Temp_text_Variable_2' has a wrong offset!");
static_assert(offsetof(FUNCLIB_CoreUtility_C_GetEnumText_OffLowMediumHigh, Temp_text_Variable_3) == 0x000078, "Member 'FUNCLIB_CoreUtility_C_GetEnumText_OffLowMediumHigh::Temp_text_Variable_3' has a wrong offset!");
static_assert(offsetof(FUNCLIB_CoreUtility_C_GetEnumText_OffLowMediumHigh, K2Node_Select_Default) == 0x000090, "Member 'FUNCLIB_CoreUtility_C_GetEnumText_OffLowMediumHigh::K2Node_Select_Default' has a wrong offset!");

// Function FUNCLIB_CoreUtility.FUNCLIB_CoreUtility_C.GetEnumText_SaveLoad
// 0x0078 (0x0078 - 0x0000)
struct FUNCLIB_CoreUtility_C_GetEnumText_SaveLoad final
{
public:
	ENUM_SaveLoad                                 EnumSaveLoad;                                      // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UObject*                                __WorldContext;                                    // 0x0008(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FText                                   EnumText;                                          // 0x0010(0x0018)(Parm, OutParm)
	ENUM_SaveLoad                                 Temp_byte_Variable;                                // 0x0028(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_29[0x7];                                       // 0x0029(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   Temp_text_Variable;                                // 0x0030(0x0018)()
	class FText                                   Temp_text_Variable_1;                              // 0x0048(0x0018)()
	class FText                                   K2Node_Select_Default;                             // 0x0060(0x0018)()
};
static_assert(alignof(FUNCLIB_CoreUtility_C_GetEnumText_SaveLoad) == 0x000008, "Wrong alignment on FUNCLIB_CoreUtility_C_GetEnumText_SaveLoad");
static_assert(sizeof(FUNCLIB_CoreUtility_C_GetEnumText_SaveLoad) == 0x000078, "Wrong size on FUNCLIB_CoreUtility_C_GetEnumText_SaveLoad");
static_assert(offsetof(FUNCLIB_CoreUtility_C_GetEnumText_SaveLoad, EnumSaveLoad) == 0x000000, "Member 'FUNCLIB_CoreUtility_C_GetEnumText_SaveLoad::EnumSaveLoad' has a wrong offset!");
static_assert(offsetof(FUNCLIB_CoreUtility_C_GetEnumText_SaveLoad, __WorldContext) == 0x000008, "Member 'FUNCLIB_CoreUtility_C_GetEnumText_SaveLoad::__WorldContext' has a wrong offset!");
static_assert(offsetof(FUNCLIB_CoreUtility_C_GetEnumText_SaveLoad, EnumText) == 0x000010, "Member 'FUNCLIB_CoreUtility_C_GetEnumText_SaveLoad::EnumText' has a wrong offset!");
static_assert(offsetof(FUNCLIB_CoreUtility_C_GetEnumText_SaveLoad, Temp_byte_Variable) == 0x000028, "Member 'FUNCLIB_CoreUtility_C_GetEnumText_SaveLoad::Temp_byte_Variable' has a wrong offset!");
static_assert(offsetof(FUNCLIB_CoreUtility_C_GetEnumText_SaveLoad, Temp_text_Variable) == 0x000030, "Member 'FUNCLIB_CoreUtility_C_GetEnumText_SaveLoad::Temp_text_Variable' has a wrong offset!");
static_assert(offsetof(FUNCLIB_CoreUtility_C_GetEnumText_SaveLoad, Temp_text_Variable_1) == 0x000048, "Member 'FUNCLIB_CoreUtility_C_GetEnumText_SaveLoad::Temp_text_Variable_1' has a wrong offset!");
static_assert(offsetof(FUNCLIB_CoreUtility_C_GetEnumText_SaveLoad, K2Node_Select_Default) == 0x000060, "Member 'FUNCLIB_CoreUtility_C_GetEnumText_SaveLoad::K2Node_Select_Default' has a wrong offset!");

// Function FUNCLIB_CoreUtility.FUNCLIB_CoreUtility_C.GetEnumText_TargetIDTargetStatus
// 0x00F0 (0x00F0 - 0x0000)
struct FUNCLIB_CoreUtility_C_GetEnumText_TargetIDTargetStatus final
{
public:
	ENUM_TargetID_TargetStatus                    EnumTargetIDTargetStatus;                          // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UObject*                                __WorldContext;                                    // 0x0008(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FText                                   EnumText;                                          // 0x0010(0x0018)(Parm, OutParm)
	ENUM_TargetID_TargetStatus                    Temp_byte_Variable;                                // 0x0028(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_29[0x7];                                       // 0x0029(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   Temp_text_Variable;                                // 0x0030(0x0018)()
	class FText                                   Temp_text_Variable_1;                              // 0x0048(0x0018)()
	class FText                                   Temp_text_Variable_2;                              // 0x0060(0x0018)()
	class FText                                   Temp_text_Variable_3;                              // 0x0078(0x0018)()
	class FText                                   Temp_text_Variable_4;                              // 0x0090(0x0018)()
	class FText                                   Temp_text_Variable_5;                              // 0x00A8(0x0018)()
	class FText                                   Temp_text_Variable_6;                              // 0x00C0(0x0018)()
	class FText                                   K2Node_Select_Default;                             // 0x00D8(0x0018)()
};
static_assert(alignof(FUNCLIB_CoreUtility_C_GetEnumText_TargetIDTargetStatus) == 0x000008, "Wrong alignment on FUNCLIB_CoreUtility_C_GetEnumText_TargetIDTargetStatus");
static_assert(sizeof(FUNCLIB_CoreUtility_C_GetEnumText_TargetIDTargetStatus) == 0x0000F0, "Wrong size on FUNCLIB_CoreUtility_C_GetEnumText_TargetIDTargetStatus");
static_assert(offsetof(FUNCLIB_CoreUtility_C_GetEnumText_TargetIDTargetStatus, EnumTargetIDTargetStatus) == 0x000000, "Member 'FUNCLIB_CoreUtility_C_GetEnumText_TargetIDTargetStatus::EnumTargetIDTargetStatus' has a wrong offset!");
static_assert(offsetof(FUNCLIB_CoreUtility_C_GetEnumText_TargetIDTargetStatus, __WorldContext) == 0x000008, "Member 'FUNCLIB_CoreUtility_C_GetEnumText_TargetIDTargetStatus::__WorldContext' has a wrong offset!");
static_assert(offsetof(FUNCLIB_CoreUtility_C_GetEnumText_TargetIDTargetStatus, EnumText) == 0x000010, "Member 'FUNCLIB_CoreUtility_C_GetEnumText_TargetIDTargetStatus::EnumText' has a wrong offset!");
static_assert(offsetof(FUNCLIB_CoreUtility_C_GetEnumText_TargetIDTargetStatus, Temp_byte_Variable) == 0x000028, "Member 'FUNCLIB_CoreUtility_C_GetEnumText_TargetIDTargetStatus::Temp_byte_Variable' has a wrong offset!");
static_assert(offsetof(FUNCLIB_CoreUtility_C_GetEnumText_TargetIDTargetStatus, Temp_text_Variable) == 0x000030, "Member 'FUNCLIB_CoreUtility_C_GetEnumText_TargetIDTargetStatus::Temp_text_Variable' has a wrong offset!");
static_assert(offsetof(FUNCLIB_CoreUtility_C_GetEnumText_TargetIDTargetStatus, Temp_text_Variable_1) == 0x000048, "Member 'FUNCLIB_CoreUtility_C_GetEnumText_TargetIDTargetStatus::Temp_text_Variable_1' has a wrong offset!");
static_assert(offsetof(FUNCLIB_CoreUtility_C_GetEnumText_TargetIDTargetStatus, Temp_text_Variable_2) == 0x000060, "Member 'FUNCLIB_CoreUtility_C_GetEnumText_TargetIDTargetStatus::Temp_text_Variable_2' has a wrong offset!");
static_assert(offsetof(FUNCLIB_CoreUtility_C_GetEnumText_TargetIDTargetStatus, Temp_text_Variable_3) == 0x000078, "Member 'FUNCLIB_CoreUtility_C_GetEnumText_TargetIDTargetStatus::Temp_text_Variable_3' has a wrong offset!");
static_assert(offsetof(FUNCLIB_CoreUtility_C_GetEnumText_TargetIDTargetStatus, Temp_text_Variable_4) == 0x000090, "Member 'FUNCLIB_CoreUtility_C_GetEnumText_TargetIDTargetStatus::Temp_text_Variable_4' has a wrong offset!");
static_assert(offsetof(FUNCLIB_CoreUtility_C_GetEnumText_TargetIDTargetStatus, Temp_text_Variable_5) == 0x0000A8, "Member 'FUNCLIB_CoreUtility_C_GetEnumText_TargetIDTargetStatus::Temp_text_Variable_5' has a wrong offset!");
static_assert(offsetof(FUNCLIB_CoreUtility_C_GetEnumText_TargetIDTargetStatus, Temp_text_Variable_6) == 0x0000C0, "Member 'FUNCLIB_CoreUtility_C_GetEnumText_TargetIDTargetStatus::Temp_text_Variable_6' has a wrong offset!");
static_assert(offsetof(FUNCLIB_CoreUtility_C_GetEnumText_TargetIDTargetStatus, K2Node_Select_Default) == 0x0000D8, "Member 'FUNCLIB_CoreUtility_C_GetEnumText_TargetIDTargetStatus::K2Node_Select_Default' has a wrong offset!");

// Function FUNCLIB_CoreUtility.FUNCLIB_CoreUtility_C.IsCinematicMontage
// 0x0018 (0x0018 - 0x0000)
struct FUNCLIB_CoreUtility_C_IsCinematicMontage final
{
public:
	class UAnimMontage*                           Montage;                                           // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UObject*                                __WorldContext;                                    // 0x0008(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Result;                                            // 0x0010(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0011(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsMontageUsingSlotName_ReturnValue;       // 0x0012(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(FUNCLIB_CoreUtility_C_IsCinematicMontage) == 0x000008, "Wrong alignment on FUNCLIB_CoreUtility_C_IsCinematicMontage");
static_assert(sizeof(FUNCLIB_CoreUtility_C_IsCinematicMontage) == 0x000018, "Wrong size on FUNCLIB_CoreUtility_C_IsCinematicMontage");
static_assert(offsetof(FUNCLIB_CoreUtility_C_IsCinematicMontage, Montage) == 0x000000, "Member 'FUNCLIB_CoreUtility_C_IsCinematicMontage::Montage' has a wrong offset!");
static_assert(offsetof(FUNCLIB_CoreUtility_C_IsCinematicMontage, __WorldContext) == 0x000008, "Member 'FUNCLIB_CoreUtility_C_IsCinematicMontage::__WorldContext' has a wrong offset!");
static_assert(offsetof(FUNCLIB_CoreUtility_C_IsCinematicMontage, Result) == 0x000010, "Member 'FUNCLIB_CoreUtility_C_IsCinematicMontage::Result' has a wrong offset!");
static_assert(offsetof(FUNCLIB_CoreUtility_C_IsCinematicMontage, CallFunc_IsValid_ReturnValue) == 0x000011, "Member 'FUNCLIB_CoreUtility_C_IsCinematicMontage::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(FUNCLIB_CoreUtility_C_IsCinematicMontage, CallFunc_IsMontageUsingSlotName_ReturnValue) == 0x000012, "Member 'FUNCLIB_CoreUtility_C_IsCinematicMontage::CallFunc_IsMontageUsingSlotName_ReturnValue' has a wrong offset!");

// Function FUNCLIB_CoreUtility.FUNCLIB_CoreUtility_C.GetLevelNameByDeckSymbol
// 0x0128 (0x0128 - 0x0000)
struct FUNCLIB_CoreUtility_C_GetLevelNameByDeckSymbol final
{
public:
	class FString                                 DeckSymbol;                                        // 0x0000(0x0010)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, HasGetValueTypeHash)
	class UObject*                                __WorldContext;                                    // 0x0010(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FName                                   LevelName;                                         // 0x0018(0x0008)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FName                                   CurrentLevelName;                                  // 0x0020(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Array_Index_Variable;                     // 0x0028(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Loop_Counter_Variable;                    // 0x002C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue;                   // 0x0030(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_34[0x4];                                       // 0x0034(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FSTRUCT_LevelInfo                      CallFunc_GetDataTableRowFromName_OutRow;           // 0x0038(0x00C8)(HasGetValueTypeHash)
	bool                                          CallFunc_GetDataTableRowFromName_ReturnValue;      // 0x0100(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_101[0x7];                                      // 0x0101(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class FName>                           CallFunc_GetDataTableRowNames_OutRowNames;         // 0x0108(0x0010)(ReferenceParm)
	class FName                                   CallFunc_Array_Get_Item;                           // 0x0118(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Length_ReturnValue;                 // 0x0120(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue;                  // 0x0124(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_EqualEqual_StrStr_ReturnValue;            // 0x0125(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(FUNCLIB_CoreUtility_C_GetLevelNameByDeckSymbol) == 0x000008, "Wrong alignment on FUNCLIB_CoreUtility_C_GetLevelNameByDeckSymbol");
static_assert(sizeof(FUNCLIB_CoreUtility_C_GetLevelNameByDeckSymbol) == 0x000128, "Wrong size on FUNCLIB_CoreUtility_C_GetLevelNameByDeckSymbol");
static_assert(offsetof(FUNCLIB_CoreUtility_C_GetLevelNameByDeckSymbol, DeckSymbol) == 0x000000, "Member 'FUNCLIB_CoreUtility_C_GetLevelNameByDeckSymbol::DeckSymbol' has a wrong offset!");
static_assert(offsetof(FUNCLIB_CoreUtility_C_GetLevelNameByDeckSymbol, __WorldContext) == 0x000010, "Member 'FUNCLIB_CoreUtility_C_GetLevelNameByDeckSymbol::__WorldContext' has a wrong offset!");
static_assert(offsetof(FUNCLIB_CoreUtility_C_GetLevelNameByDeckSymbol, LevelName) == 0x000018, "Member 'FUNCLIB_CoreUtility_C_GetLevelNameByDeckSymbol::LevelName' has a wrong offset!");
static_assert(offsetof(FUNCLIB_CoreUtility_C_GetLevelNameByDeckSymbol, CurrentLevelName) == 0x000020, "Member 'FUNCLIB_CoreUtility_C_GetLevelNameByDeckSymbol::CurrentLevelName' has a wrong offset!");
static_assert(offsetof(FUNCLIB_CoreUtility_C_GetLevelNameByDeckSymbol, Temp_int_Array_Index_Variable) == 0x000028, "Member 'FUNCLIB_CoreUtility_C_GetLevelNameByDeckSymbol::Temp_int_Array_Index_Variable' has a wrong offset!");
static_assert(offsetof(FUNCLIB_CoreUtility_C_GetLevelNameByDeckSymbol, Temp_int_Loop_Counter_Variable) == 0x00002C, "Member 'FUNCLIB_CoreUtility_C_GetLevelNameByDeckSymbol::Temp_int_Loop_Counter_Variable' has a wrong offset!");
static_assert(offsetof(FUNCLIB_CoreUtility_C_GetLevelNameByDeckSymbol, CallFunc_Add_IntInt_ReturnValue) == 0x000030, "Member 'FUNCLIB_CoreUtility_C_GetLevelNameByDeckSymbol::CallFunc_Add_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(FUNCLIB_CoreUtility_C_GetLevelNameByDeckSymbol, CallFunc_GetDataTableRowFromName_OutRow) == 0x000038, "Member 'FUNCLIB_CoreUtility_C_GetLevelNameByDeckSymbol::CallFunc_GetDataTableRowFromName_OutRow' has a wrong offset!");
static_assert(offsetof(FUNCLIB_CoreUtility_C_GetLevelNameByDeckSymbol, CallFunc_GetDataTableRowFromName_ReturnValue) == 0x000100, "Member 'FUNCLIB_CoreUtility_C_GetLevelNameByDeckSymbol::CallFunc_GetDataTableRowFromName_ReturnValue' has a wrong offset!");
static_assert(offsetof(FUNCLIB_CoreUtility_C_GetLevelNameByDeckSymbol, CallFunc_GetDataTableRowNames_OutRowNames) == 0x000108, "Member 'FUNCLIB_CoreUtility_C_GetLevelNameByDeckSymbol::CallFunc_GetDataTableRowNames_OutRowNames' has a wrong offset!");
static_assert(offsetof(FUNCLIB_CoreUtility_C_GetLevelNameByDeckSymbol, CallFunc_Array_Get_Item) == 0x000118, "Member 'FUNCLIB_CoreUtility_C_GetLevelNameByDeckSymbol::CallFunc_Array_Get_Item' has a wrong offset!");
static_assert(offsetof(FUNCLIB_CoreUtility_C_GetLevelNameByDeckSymbol, CallFunc_Array_Length_ReturnValue) == 0x000120, "Member 'FUNCLIB_CoreUtility_C_GetLevelNameByDeckSymbol::CallFunc_Array_Length_ReturnValue' has a wrong offset!");
static_assert(offsetof(FUNCLIB_CoreUtility_C_GetLevelNameByDeckSymbol, CallFunc_Less_IntInt_ReturnValue) == 0x000124, "Member 'FUNCLIB_CoreUtility_C_GetLevelNameByDeckSymbol::CallFunc_Less_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(FUNCLIB_CoreUtility_C_GetLevelNameByDeckSymbol, CallFunc_EqualEqual_StrStr_ReturnValue) == 0x000125, "Member 'FUNCLIB_CoreUtility_C_GetLevelNameByDeckSymbol::CallFunc_EqualEqual_StrStr_ReturnValue' has a wrong offset!");

}

