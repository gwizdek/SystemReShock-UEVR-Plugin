#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: COMP_VoiceManager

#include "Basic.hpp"

#include "ENUM_ActionPriority_structs.hpp"
#include "Engine_structs.hpp"
#include "Engine_classes.hpp"
#include "ENUM_EnemyChant_structs.hpp"
#include "ENUM_DetectionState_structs.hpp"
#include "ENUM_EnemyBark_structs.hpp"


namespace SDK
{

// BlueprintGeneratedClass COMP_VoiceManager.COMP_VoiceManager_C
// 0x0090 (0x0140 - 0x00B0)
class UCOMP_VoiceManager_C final : public UActorComponent
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x00B0(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	TSoftObjectPtr<class USoundCue>               CurrentBarkCue;                                    // 0x00B8(0x0028)(Edit, BlueprintVisible, DisableEditOnInstance, HasGetValueTypeHash)
	struct FDataTableRowHandle                    VocalizationTemplate;                              // 0x00E0(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor)
	ENUM_EnemyChant                               ChantState;                                        // 0x00F0(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_F1[0x3];                                       // 0x00F1(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CueFadeOutDuration;                                // 0x00F4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         VocalPitchMultiplier;                              // 0x00F8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_FC[0x4];                                       // 0x00FC(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTimerHandle                           VocalFadeTimer;                                    // 0x0100(0x0008)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	ENUM_ActionPriority                           CurrentBarkPriority;                               // 0x0108(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_109[0x7];                                      // 0x0109(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TSoftObjectPtr<class USoundCue>               QueuedBarkCue;                                     // 0x0110(0x0028)(Edit, BlueprintVisible, DisableEditOnInstance, HasGetValueTypeHash)
	ENUM_EnemyChant                               QueuedChantState;                                  // 0x0138(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          IsVoiceEnabled;                                    // 0x0139(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	ENUM_ActionPriority                           QueuedBarkPriority;                                // 0x013A(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

public:
	void ExecuteUbergraph_COMP_VoiceManager(int32 EntryPoint);
	void AsyncPlayVocalCue(TSoftObjectPtr<class USoundCue> SoundCue, bool AsChant);
	void OnLoaded_9505B12B47A71F6AD1B44B96904D28D3(class UObject* Loaded);
	void IsBarking(bool* Result);
	void GetBarkSoundCue(ENUM_EnemyBark BarkType, TSoftObjectPtr<class USoundCue>* SoundCue);
	void CanOverridePriority(ENUM_ActionPriority NewPriority, ENUM_ActionPriority OldPriority, bool* Result);
	void TryPlayBarkInternal(TSoftObjectPtr<class USoundCue> NewBarkCue, ENUM_ActionPriority NewPriority);
	void IsChanting(bool* Result);
	void GetChantSoundCue(ENUM_EnemyChant ChantType, TSoftObjectPtr<class USoundCue>* SoundCue);
	void TryPlayChant(ENUM_EnemyChant NewChant);
	void TryFadeOutChant();
	void InitializeVoiceManager();
	void OnPlayerDetectionStateChanged(ENUM_DetectionState NewState, ENUM_DetectionState OldState);
	void PlayVocalCueImmediately(class USoundCue* SoundCue, bool AsChant);
	void PlayVocalCue(TSoftObjectPtr<class USoundCue> SoundCue, bool AsChant);
	void EVENT_OnPawnDied(class APAWN_SystemShockCharacter_C* Character);
	void EVENT_OnFinishedVocalCue();
	void SetVoiceEnabled(bool State);
	void GetOwnerPawn(class APAWN_Enemy_C** EnemyPawn);
	void TryFadeOutBark();
	void EVENT_OnDetectionStateChanged(class APAWN_SystemShockCharacter_C* Character, const struct FVector& EventLocation, ENUM_DetectionState NewState, ENUM_DetectionState OldState);
	void TryStopChanting();
	void TryPlayBarkTemplate(ENUM_EnemyBark NewBark, ENUM_ActionPriority NewPriority);
	void TryPlayBark(const struct FGameplayTag& NewBarkTag, ENUM_ActionPriority NewPriority);

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"COMP_VoiceManager_C">();
	}
	static class UCOMP_VoiceManager_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<UCOMP_VoiceManager_C>();
	}
};
static_assert(alignof(UCOMP_VoiceManager_C) == 0x000008, "Wrong alignment on UCOMP_VoiceManager_C");
static_assert(sizeof(UCOMP_VoiceManager_C) == 0x000140, "Wrong size on UCOMP_VoiceManager_C");
static_assert(offsetof(UCOMP_VoiceManager_C, UberGraphFrame) == 0x0000B0, "Member 'UCOMP_VoiceManager_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(UCOMP_VoiceManager_C, CurrentBarkCue) == 0x0000B8, "Member 'UCOMP_VoiceManager_C::CurrentBarkCue' has a wrong offset!");
static_assert(offsetof(UCOMP_VoiceManager_C, VocalizationTemplate) == 0x0000E0, "Member 'UCOMP_VoiceManager_C::VocalizationTemplate' has a wrong offset!");
static_assert(offsetof(UCOMP_VoiceManager_C, ChantState) == 0x0000F0, "Member 'UCOMP_VoiceManager_C::ChantState' has a wrong offset!");
static_assert(offsetof(UCOMP_VoiceManager_C, CueFadeOutDuration) == 0x0000F4, "Member 'UCOMP_VoiceManager_C::CueFadeOutDuration' has a wrong offset!");
static_assert(offsetof(UCOMP_VoiceManager_C, VocalPitchMultiplier) == 0x0000F8, "Member 'UCOMP_VoiceManager_C::VocalPitchMultiplier' has a wrong offset!");
static_assert(offsetof(UCOMP_VoiceManager_C, VocalFadeTimer) == 0x000100, "Member 'UCOMP_VoiceManager_C::VocalFadeTimer' has a wrong offset!");
static_assert(offsetof(UCOMP_VoiceManager_C, CurrentBarkPriority) == 0x000108, "Member 'UCOMP_VoiceManager_C::CurrentBarkPriority' has a wrong offset!");
static_assert(offsetof(UCOMP_VoiceManager_C, QueuedBarkCue) == 0x000110, "Member 'UCOMP_VoiceManager_C::QueuedBarkCue' has a wrong offset!");
static_assert(offsetof(UCOMP_VoiceManager_C, QueuedChantState) == 0x000138, "Member 'UCOMP_VoiceManager_C::QueuedChantState' has a wrong offset!");
static_assert(offsetof(UCOMP_VoiceManager_C, IsVoiceEnabled) == 0x000139, "Member 'UCOMP_VoiceManager_C::IsVoiceEnabled' has a wrong offset!");
static_assert(offsetof(UCOMP_VoiceManager_C, QueuedBarkPriority) == 0x00013A, "Member 'UCOMP_VoiceManager_C::QueuedBarkPriority' has a wrong offset!");

}

