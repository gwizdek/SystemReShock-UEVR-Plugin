#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: COMP_LootableInventory

#include "Basic.hpp"

#include "COMP_LootableInventory_classes.hpp"
#include "COMP_LootableInventory_parameters.hpp"


namespace SDK
{

// Function COMP_LootableInventory.COMP_LootableInventory_C.OnLootInventoryInitialized__DelegateSignature
// (Public, Delegate, BlueprintCallable, BlueprintEvent)

void UCOMP_LootableInventory_C::OnLootInventoryInitialized__DelegateSignature()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("COMP_LootableInventory_C", "OnLootInventoryInitialized__DelegateSignature");

	UObject::ProcessEvent(Func, nullptr);
}


// Function COMP_LootableInventory.COMP_LootableInventory_C.ExecuteUbergraph_COMP_LootableInventory
// (Final, UbergraphFunction)
// Parameters:
// int32                                   EntryPoint                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UCOMP_LootableInventory_C::ExecuteUbergraph_COMP_LootableInventory(int32 EntryPoint)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("COMP_LootableInventory_C", "ExecuteUbergraph_COMP_LootableInventory");

	Params::COMP_LootableInventory_C_ExecuteUbergraph_COMP_LootableInventory Parms{};

	Parms.EntryPoint = EntryPoint;

	UObject::ProcessEvent(Func, &Parms);
}


// Function COMP_LootableInventory.COMP_LootableInventory_C.ReceiveBeginPlay
// (Event, Public, BlueprintEvent)

void UCOMP_LootableInventory_C::ReceiveBeginPlay()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("COMP_LootableInventory_C", "ReceiveBeginPlay");

	UObject::ProcessEvent(Func, nullptr);
}


// Function COMP_LootableInventory.COMP_LootableInventory_C.HasGeneratedLoot
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// bool                                    Result                                                 (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void UCOMP_LootableInventory_C::HasGeneratedLoot(bool* Result)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("COMP_LootableInventory_C", "HasGeneratedLoot");

	Params::COMP_LootableInventory_C_HasGeneratedLoot Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (Result != nullptr)
		*Result = Parms.Result;
}


// Function COMP_LootableInventory.COMP_LootableInventory_C.IsLootInventoryEmpty
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    Result                                                 (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void UCOMP_LootableInventory_C::IsLootInventoryEmpty(bool* Result)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("COMP_LootableInventory_C", "IsLootInventoryEmpty");

	Params::COMP_LootableInventory_C_IsLootInventoryEmpty Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (Result != nullptr)
		*Result = Parms.Result;
}


// Function COMP_LootableInventory.COMP_LootableInventory_C.GetLootItemRotation
// (Protected, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// class UITEM_Base_C*                     LootItem                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class UInventoryBag_C*                  LootBag                                                (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class APICKUP_Base_C*                   LootPickup                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FRotator                         Rotation                                               (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void UCOMP_LootableInventory_C::GetLootItemRotation(class UITEM_Base_C* LootItem, class UInventoryBag_C* LootBag, class APICKUP_Base_C* LootPickup, struct FRotator* Rotation)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("COMP_LootableInventory_C", "GetLootItemRotation");

	Params::COMP_LootableInventory_C_GetLootItemRotation Parms{};

	Parms.LootItem = LootItem;
	Parms.LootBag = LootBag;
	Parms.LootPickup = LootPickup;

	UObject::ProcessEvent(Func, &Parms);

	if (Rotation != nullptr)
		*Rotation = std::move(Parms.Rotation);
}


// Function COMP_LootableInventory.COMP_LootableInventory_C.TryInitializeLootInventory
// (Public, BlueprintCallable, BlueprintEvent)

void UCOMP_LootableInventory_C::TryInitializeLootInventory()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("COMP_LootableInventory_C", "TryInitializeLootInventory");

	UObject::ProcessEvent(Func, nullptr);
}


// Function COMP_LootableInventory.COMP_LootableInventory_C.TryGenerateLoot
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)

void UCOMP_LootableInventory_C::TryGenerateLoot()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("COMP_LootableInventory_C", "TryGenerateLoot");

	UObject::ProcessEvent(Func, nullptr);
}


// Function COMP_LootableInventory.COMP_LootableInventory_C.BindLootBagEvents
// (Protected, BlueprintCallable, BlueprintEvent)

void UCOMP_LootableInventory_C::BindLootBagEvents()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("COMP_LootableInventory_C", "BindLootBagEvents");

	UObject::ProcessEvent(Func, nullptr);
}


// Function COMP_LootableInventory.COMP_LootableInventory_C.TryBindCompartmentEvents
// (Protected, BlueprintCallable, BlueprintEvent)

void UCOMP_LootableInventory_C::TryBindCompartmentEvents()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("COMP_LootableInventory_C", "TryBindCompartmentEvents");

	UObject::ProcessEvent(Func, nullptr);
}


// Function COMP_LootableInventory.COMP_LootableInventory_C.TrySetLootVisibility
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    VisibilityState                                        (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// bool                                    Result                                                 (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void UCOMP_LootableInventory_C::TrySetLootVisibility(bool VisibilityState, bool* Result)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("COMP_LootableInventory_C", "TrySetLootVisibility");

	Params::COMP_LootableInventory_C_TrySetLootVisibility Parms{};

	Parms.VisibilityState = VisibilityState;

	UObject::ProcessEvent(Func, &Parms);

	if (Result != nullptr)
		*Result = Parms.Result;
}


// Function COMP_LootableInventory.COMP_LootableInventory_C.ForceSetLootVisibility
// (Private, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    VisibilityState                                        (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)

void UCOMP_LootableInventory_C::ForceSetLootVisibility(bool VisibilityState)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("COMP_LootableInventory_C", "ForceSetLootVisibility");

	Params::COMP_LootableInventory_C_ForceSetLootVisibility Parms{};

	Parms.VisibilityState = VisibilityState;

	UObject::ProcessEvent(Func, &Parms);
}


// Function COMP_LootableInventory.COMP_LootableInventory_C.ForceUpdatePickupVisibility
// (Private, BlueprintCallable, BlueprintEvent)
// Parameters:
// class APICKUP_Base_C*                   PickupActor                                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UCOMP_LootableInventory_C::ForceUpdatePickupVisibility(class APICKUP_Base_C* PickupActor)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("COMP_LootableInventory_C", "ForceUpdatePickupVisibility");

	Params::COMP_LootableInventory_C_ForceUpdatePickupVisibility Parms{};

	Parms.PickupActor = PickupActor;

	UObject::ProcessEvent(Func, &Parms);
}


// Function COMP_LootableInventory.COMP_LootableInventory_C.TrySpawnPickupItem
// (Protected, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// class UITEM_Base_C*                     LootItem                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class UInventoryBag_C*                  LootBag                                                (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class APICKUP_Base_C*                   PickupItem                                             (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UCOMP_LootableInventory_C::TrySpawnPickupItem(class UITEM_Base_C* LootItem, class UInventoryBag_C* LootBag, class APICKUP_Base_C** PickupItem)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("COMP_LootableInventory_C", "TrySpawnPickupItem");

	Params::COMP_LootableInventory_C_TrySpawnPickupItem Parms{};

	Parms.LootItem = LootItem;
	Parms.LootBag = LootBag;

	UObject::ProcessEvent(Func, &Parms);

	if (PickupItem != nullptr)
		*PickupItem = Parms.PickupItem;
}


// Function COMP_LootableInventory.COMP_LootableInventory_C.EVENT_OnBagLootChanged
// (Private, BlueprintCallable, BlueprintEvent)
// Parameters:
// class UInventoryBag_C*                  Bag                                                    (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// int32                                   SlotIndex                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UCOMP_LootableInventory_C::EVENT_OnBagLootChanged(class UInventoryBag_C* Bag, int32 SlotIndex)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("COMP_LootableInventory_C", "EVENT_OnBagLootChanged");

	Params::COMP_LootableInventory_C_EVENT_OnBagLootChanged Parms{};

	Parms.Bag = Bag;
	Parms.SlotIndex = SlotIndex;

	UObject::ProcessEvent(Func, &Parms);
}


// Function COMP_LootableInventory.COMP_LootableInventory_C.TrySpawnPickupItems
// (Protected, HasDefaults, BlueprintCallable, BlueprintEvent)

void UCOMP_LootableInventory_C::TrySpawnPickupItems()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("COMP_LootableInventory_C", "TrySpawnPickupItems");

	UObject::ProcessEvent(Func, nullptr);
}


// Function COMP_LootableInventory.COMP_LootableInventory_C.OpenLootWindow
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// class APAWN_Hacker_Implant_C*           Hacker                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class UPrimitiveComponent*              CursorPrimitive                                        (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UCOMP_LootableInventory_C::OpenLootWindow(class APAWN_Hacker_Implant_C* Hacker, class UPrimitiveComponent* CursorPrimitive)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("COMP_LootableInventory_C", "OpenLootWindow");

	Params::COMP_LootableInventory_C_OpenLootWindow Parms{};

	Parms.Hacker = Hacker;
	Parms.CursorPrimitive = CursorPrimitive;

	UObject::ProcessEvent(Func, &Parms);
}


// Function COMP_LootableInventory.COMP_LootableInventory_C.CloseLootWindow
// (Public, BlueprintCallable, BlueprintEvent)

void UCOMP_LootableInventory_C::CloseLootWindow()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("COMP_LootableInventory_C", "CloseLootWindow");

	UObject::ProcessEvent(Func, nullptr);
}


// Function COMP_LootableInventory.COMP_LootableInventory_C.EVENT_OnBeginCompartmentOverlap
// (Private, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// class UPrimitiveComponent*              OverlappedComponent                                    (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class AActor*                           OtherActor                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class UPrimitiveComponent*              OtherComp                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// int32                                   OtherBodyIndex                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    bFromSweep                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// struct FHitResult                       SweepResult                                            (ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, ContainsInstancedReference)

void UCOMP_LootableInventory_C::EVENT_OnBeginCompartmentOverlap(class UPrimitiveComponent* OverlappedComponent, class AActor* OtherActor, class UPrimitiveComponent* OtherComp, int32 OtherBodyIndex, bool bFromSweep, const struct FHitResult& SweepResult)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("COMP_LootableInventory_C", "EVENT_OnBeginCompartmentOverlap");

	Params::COMP_LootableInventory_C_EVENT_OnBeginCompartmentOverlap Parms{};

	Parms.OverlappedComponent = OverlappedComponent;
	Parms.OtherActor = OtherActor;
	Parms.OtherComp = OtherComp;
	Parms.OtherBodyIndex = OtherBodyIndex;
	Parms.bFromSweep = bFromSweep;
	Parms.SweepResult = std::move(SweepResult);

	UObject::ProcessEvent(Func, &Parms);
}


// Function COMP_LootableInventory.COMP_LootableInventory_C.InitializeInventory
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    GrantDefaultInventory                                  (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)

void UCOMP_LootableInventory_C::InitializeInventory(bool GrantDefaultInventory)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("COMP_LootableInventory_C", "InitializeInventory");

	Params::COMP_LootableInventory_C_InitializeInventory Parms{};

	Parms.GrantDefaultInventory = GrantDefaultInventory;

	UObject::ProcessEvent(Func, &Parms);
}


// Function COMP_LootableInventory.COMP_LootableInventory_C.ShouldCreateLinkedPickups
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// bool                                    Result                                                 (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void UCOMP_LootableInventory_C::ShouldCreateLinkedPickups(bool* Result)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("COMP_LootableInventory_C", "ShouldCreateLinkedPickups");

	Params::COMP_LootableInventory_C_ShouldCreateLinkedPickups Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (Result != nullptr)
		*Result = Parms.Result;
}

}

