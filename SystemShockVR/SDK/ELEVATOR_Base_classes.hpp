#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: ELEVATOR_Base

#include "Basic.hpp"

#include "ENUM_FailSucceedIgnore_structs.hpp"
#include "CoreUObject_structs.hpp"
#include "Engine_structs.hpp"
#include "LevelVoxelization_structs.hpp"
#include "ENUM_UpDown_structs.hpp"
#include "ENUM_DoorState_structs.hpp"
#include "INTERACT_Base_classes.hpp"
#include "ENUM_InnerOuter_structs.hpp"
#include "ENUM_InteractionType_structs.hpp"


namespace SDK
{

// BlueprintGeneratedClass ELEVATOR_Base.ELEVATOR_Base_C
// 0x0398 (0x06A0 - 0x0308)
class AELEVATOR_Base_C : public AINTERACT_Base_C
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame_ELEVATOR_Base_C;                    // 0x0308(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	class UCOMP_AttribManager_C*                  COMP_AttribManager;                                // 0x0310(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UCOMP_VoxelAudio_C*                     ElevatorSpeakerAudio;                              // 0x0318(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UAudioComponent*                        MoveLoopAudio;                                     // 0x0320(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UCOMP_VoxelCullable_C*                  COMP_VoxelCullable;                                // 0x0328(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UBoxComponent*                          SafetySensor;                                      // 0x0330(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USkeletalMeshComponent*                 DoorMesh_Inside;                                   // 0x0338(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UStaticMeshComponent*                   ElevatorMesh;                                      // 0x0340(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UBoxComponent*                          CompartmentSensor;                                 // 0x0348(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	float                                         AutoCloseTimer;                                    // 0x0350(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash)
	float                                         InnerDoorDelay_Open;                               // 0x0354(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash)
	float                                         OuterDoorDelay_Open;                               // 0x0358(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         OuterDoorDelay_Close;                              // 0x035C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash)
	struct FTimerHandle                           DoorDelayTimerHandle;                              // 0x0360(0x0008)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	struct FDataTableRowHandle                    ElevatorInfoRow;                                   // 0x0368(0x0010)(Edit, BlueprintVisible, NoDestructor)
	struct FDataTableRowHandle                    ElevatorAtmosphere;                                // 0x0378(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor)
	class USkeletalMeshComponent*                 OutsideDoorsMesh;                                  // 0x0388(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FName                                   TargetLevel;                                       // 0x0390(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FName                                   CinematicLevelName;                                // 0x0398(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class APAWN_Hacker_Implant_C*                 PlayerHacker;                                      // 0x03A0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         LastMovementTimestamp;                             // 0x03A8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         MinimumMoveDistance;                               // 0x03AC(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash)
	float                                         MaximumMoveDistance;                               // 0x03B0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash)
	float                                         ElevatorMaxHeightForTeleport;                      // 0x03B4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CurrentMoveDistance;                               // 0x03B8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         ElevatorMoveSpeed;                                 // 0x03BC(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash)
	struct FVector                                MovementDirection;                                 // 0x03C0(0x000C)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_3CC[0x4];                                      // 0x03CC(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTimerHandle                           MovementTickTimerHandle;                           // 0x03D0(0x0008)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	struct FTimerHandle                           AutoCloseTimerHandle;                              // 0x03D8(0x0008)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	struct FTimerHandle                           AtmosphereTransitionTimerHandle;                   // 0x03E0(0x0008)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	struct FTimerHandle                           LocationFixupTimerHandle;                          // 0x03E8(0x0008)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	class UCameraShakeBase*                       CameraShake;                                       // 0x03F0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          FinishedLoadingLevelCollection;                    // 0x03F8(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          FinishedUnloadingLevelCollection;                  // 0x03F9(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_3FA[0x2];                                      // 0x03FA(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         ElevatorWaitingHeight;                             // 0x03FC(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         ElevatorUnoccupiedHeight;                          // 0x0400(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          IsPublicAddressActive;                             // 0x0404(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          IsElevatorInMotion;                                // 0x0405(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          IsElevatorTeleporting;                             // 0x0406(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          FinishedMinimumMovement;                           // 0x0407(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	TSoftObjectPtr<class UAnimMontage>            OpeningInnerDoors;                                 // 0x0408(0x0028)(Edit, BlueprintVisible, DisableEditOnInstance, HasGetValueTypeHash)
	TSoftObjectPtr<class UAnimMontage>            ClosingInnerDoors;                                 // 0x0430(0x0028)(Edit, BlueprintVisible, DisableEditOnInstance, HasGetValueTypeHash)
	TSoftObjectPtr<class UAnimMontage>            OpeningOuterDoors;                                 // 0x0458(0x0028)(Edit, BlueprintVisible, DisableEditOnInstance, HasGetValueTypeHash)
	TSoftObjectPtr<class UAnimMontage>            ClosingOuterDoors;                                 // 0x0480(0x0028)(Edit, BlueprintVisible, DisableEditOnInstance, HasGetValueTypeHash)
	ENUM_DoorState                                InnerDoorsState;                                   // 0x04A8(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ENUM_DoorState                                OuterDoorsState;                                   // 0x04A9(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_4AA[0x6];                                      // 0x04AA(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTimerHandle                           InnerDoorMontageTimer;                             // 0x04B0(0x0008)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	struct FTimerHandle                           OuterDoorMontageTimer;                             // 0x04B8(0x0008)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	bool                                          ShouldTeleportWhileUsedByPlayer;                   // 0x04C0(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          HasPlayedMovementStopSound;                        // 0x04C1(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_4C2[0x2];                                      // 0x04C2(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         ElevatorPreTeleportDelay;                          // 0x04C4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         ElevatorLevelTransitionDelay;                      // 0x04C8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_4CC[0x4];                                      // 0x04CC(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTimerHandle                           PreTeleportDelayTimerHandle;                       // 0x04D0(0x0008)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	struct FVector                                ElevatorSpawnLocation;                             // 0x04D8(0x000C)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                ElevatorStartMoveLocation;                         // 0x04E4(0x000C)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               ElevatorSpawnRotation;                             // 0x04F0(0x000C)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	struct FRotator                               ElevatorStartMoveRotation;                         // 0x04FC(0x000C)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	class FText                                   ElevatorInMotionMessage;                           // 0x0508(0x0018)(Edit, BlueprintVisible, DisableEditOnInstance)
	class FText                                   ElevatorActivatedMessage;                          // 0x0520(0x0018)(Edit, BlueprintVisible, DisableEditOnInstance)
	class FText                                   ElevatorAtDestinationMessage;                      // 0x0538(0x0018)(Edit, BlueprintVisible, DisableEditOnInstance)
	class FText                                   ElevatorDoorsBlockedMessage;                       // 0x0550(0x0018)(Edit, BlueprintVisible, DisableEditOnInstance)
	class FText                                   ElevatorDoorsAreOpenMessage;                       // 0x0568(0x0018)(Edit, BlueprintVisible, DisableEditOnInstance)
	TArray<class UBoxComponent*>                  ControlButtonTargetBoxes;                          // 0x0580(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance, ContainsInstancedReference)
	int32                                         ActiveControlButtonIndex;                          // 0x0590(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          DebugActiveElevators;                              // 0x0594(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_595[0x3];                                      // 0x0595(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         LoopSoundFadeInDuration;                           // 0x0598(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         LoopSoundFadeOutDuration;                          // 0x059C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TSoftObjectPtr<class USoundCue>               MoveStartSoundCue;                                 // 0x05A0(0x0028)(Edit, BlueprintVisible, DisableEditOnInstance, HasGetValueTypeHash)
	TSoftObjectPtr<class USoundCue>               MoveStopSoundCue;                                  // 0x05C8(0x0028)(Edit, BlueprintVisible, DisableEditOnInstance, HasGetValueTypeHash)
	TSoftObjectPtr<class USoundCue>               ButtonActivateCue;                                 // 0x05F0(0x0028)(Edit, BlueprintVisible, DisableEditOnInstance, HasGetValueTypeHash)
	struct FDataTableRowHandle                    CompleteQuestForCinematic;                         // 0x0618(0x0010)(Edit, BlueprintVisible, NoDestructor)
	float                                         CinematicSequenceDelay;                            // 0x0628(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_62C[0x4];                                      // 0x062C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class ALevelSequenceActor*                    CinematicSequenceActor;                            // 0x0630(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TSoftClassPtr<class UClass>                   MusicCueClass;                                     // 0x0638(0x0028)(Edit, BlueprintVisible, HasGetValueTypeHash)
	struct FDataTableRowHandle                    RequiredQuest;                                     // 0x0660(0x0010)(Edit, BlueprintVisible, NoDestructor)
	struct FDataTableRowHandle                    QuestLockMediaHandle;                              // 0x0670(0x0010)(Edit, BlueprintVisible, NoDestructor)
	class FText                                   QuestRestrictionMessage;                           // 0x0680(0x0018)(Edit, BlueprintVisible)
	bool                                          LockWhenQuestCompleted;                            // 0x0698(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          IsLockedByQuest;                                   // 0x0699(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)

public:
	void ExecuteUbergraph_ELEVATOR_Base(int32 EntryPoint);
	void PlayElevatorMovementSound(TSoftObjectPtr<class USoundCue> SoundCue);
	void ReceiveTick(float DeltaSeconds);
	void BndEvt__ELEVATOR_Base_CompartmentSensor_K2Node_ComponentBoundEvent_5_ComponentEndOverlapSignature__DelegateSignature(class UPrimitiveComponent* OverlappedComponent, class AActor* OtherActor, class UPrimitiveComponent* OtherComp, int32 OtherBodyIndex);
	void BndEvt__ELEVATOR_Base_COMP_VoxelCullable_K2Node_ComponentBoundEvent_4_CullableAudibilitySignature__DelegateSignature(bool bAudibleState);
	void StreamOutCinematicLevel();
	void StreamInCinematicLevel();
	void BndEvt__CompartmentSensor_K2Node_ComponentBoundEvent_1_ComponentBeginOverlapSignature__DelegateSignature(class UPrimitiveComponent* OverlappedComponent, class AActor* OtherActor, class UPrimitiveComponent* OtherComp, int32 OtherBodyIndex, bool bFromSweep, const struct FHitResult& SweepResult);
	void BndEvt__COMP_VoxelCullable_K2Node_ComponentBoundEvent_0_CullableVisibilitySignature__DelegateSignature(bool bVisibleState);
	void BndEvt__SafetySensor_K2Node_ComponentBoundEvent_3_ComponentEndOverlapSignature__DelegateSignature(class UPrimitiveComponent* OverlappedComponent, class AActor* OtherActor, class UPrimitiveComponent* OtherComp, int32 OtherBodyIndex);
	void BndEvt__SafetySensor_K2Node_ComponentBoundEvent_2_ComponentBeginOverlapSignature__DelegateSignature(class UPrimitiveComponent* OverlappedComponent, class AActor* OtherActor, class UPrimitiveComponent* OtherComp, int32 OtherBodyIndex, bool bFromSweep, const struct FHitResult& SweepResult);
	void ReceiveEndPlay(EEndPlayReason EndPlayReason);
	void ReceiveBeginPlay();
	void OnLoaded_E8AF5A7C4E1C8638BDB1439B3EE08341(class UObject* Loaded);
	void UserConstructionScript();
	void EVENT_StartOpeningOuterDoor();
	void EVENT_StartClosingOuterDoor();
	void EVENT_StartOpeningInnerDoor();
	void EVENT_OnStartedUnloadingLevelCollection();
	void EVENT_OnFinishedLoadingLevelCollection();
	void InitializeElevator();
	void InitializeAttributes();
	void SetElevatorEnabled(bool Enabled);
	void EVENT_OnFinishedUnloadingLevelCollection();
	void IsElevatorOccupiedByPawn(bool* Result);
	void IsSafetySensorOccupiedByPawn(bool* Result);
	void TryOpenElevatorDoors(bool Force, bool* Result);
	void TryCloseElevatorDoors(bool* Result);
	void StartAutoCloseTimer();
	void EVENT_OnMovementTick();
	void EVENT_AutoCloseDoors();
	void IsOverlappingAnyLivingEnemy(bool* Result);
	void IsValidOccupant(class AActor* Actor, bool* Result);
	bool CanOpenDoors(bool Force);
	void TryInteract(class AActor* SourceActor, class UPrimitiveComponent* CursorPrimitive, ENUM_InteractionType InteractionType, struct FSTRUCT_InteractResults* InteractResults);
	bool CanCloseDoors();
	void CanUseElevator(class APAWN_Hacker_Simple_C* Hacker, class UPrimitiveComponent* CursorPrimitive, bool* Success, class FText* FailMessage);
	void StartLevelTransition();
	void TryFixupPlayerPosition();
	void TryFinishElevatorMove();
	void IsAnyDoorOpening(bool* Result);
	void IsAnyDoorClosing(bool* Result);
	void IsEveryDoorClosed(bool* Result);
	void TeleportElevator(const struct FTransform& NewTransform);
	void ActivateDoor(ENUM_InnerOuter TargetDoor, bool Open, bool* Result);
	void EVENT_InnerDoorsMontageFinished();
	void EVENT_OuterDoorsMontageFinished();
	void IsElevatorFunctional(bool* Result);
	void GetTargetDoorState(ENUM_InnerOuter TargetType, ENUM_DoorState* State);
	void GetDoorMontage(ENUM_InnerOuter Target, bool Open, class UAnimMontage** Montage);
	void GetDoorAnimInstance(ENUM_InnerOuter Target, class UAnimInstance** AnimInstance);
	void SetDoorState(ENUM_InnerOuter Target, ENUM_DoorState NewState);
	void TransferOccupantsToLevel(class AINTERACT_ElevatorDoors_Base_C* ElevatorDoors);
	void EVENT_DelayedUnloadActions();
	void UpdateScannableComponent(bool Open);
	void GetTargetLevelName(class UPrimitiveComponent* CursorPrimitive, class FName* TargetLevel_0);
	void GetDirectionToTargetLevelFromSource(class FName SourceLevel, class FName TargetLevel_0, ENUM_UpDown* DirectionToTarget);
	void GetTargetLevel(class FName* TargetLevel_0);
	void UpdateRoomAssignmentTypes(bool IsArriving);
	void UpdateEmissiveStrength(float Scale);
	void SetElevatorTargetLevel(class UPrimitiveComponent* CursorPrimitive, class FName NewTargetLevel);
	void StartElevatorMotion(bool* Result);
	void GetElevatorDoor(class AINTERACT_ElevatorDoors_Base_C** Door);
	void GetDeckSymbolByLevelName(class FName LevelName, class FString* DeckSymbol);
	void SetElevatorVisibility(bool VisibilityState);
	void GetOccupantPrimitiveComponent(class AActor* OccupantActor, class UPrimitiveComponent** PrimitiveComponent);
	void GetTargetShape(class UPrimitiveComponent* CursorPrimitive, class UShapeComponent** ShapeComponent);
	void GetControlsMeshComponent(class UStaticMeshComponent** MeshComponent);
	void UpdateButtonColor(int32 ButtonIndex, ENUM_FailSucceedIgnore ButtonState);
	void GetMoveDirectionVector(class FName TargetLevel_0, struct FVector* Direction);
	void OnCinematicLevelLoaded();
	void UpdateElevatorAudibility(bool AudibilityState);
	void TryStartAtmosphereTransition(bool* Result);
	void EVENT_UpdateAtmosphereSettings();
	void TryUnselectActiveControlButton(bool* Result);
	void TryStartElevatorMusic(bool* Result);
	void TryStopElevatorMusic(bool* Result);
	void PlayElevatorStartSoundFX();
	void PlayElevatorStopSoundFX();
	void TryStreamInTargetLevelCollection(bool* Result);
	void SetHackerPassengerPawn(class APAWN_Hacker_Implant_C* HackerPawn);
	void EVENT_OnHackerPassengerDied(class APAWN_SystemShockCharacter_C* Character);
	void EVENT_OnCinematicFinished();
	void EVENT_OnPublicAddressStateChanged(class USoundCue* SoundCue, TSoftObjectPtr<class UTexture2D> PortraitTexture, int32 RowCount, int32 ColCount, int32 FrameRate);
	void EVENT_OnDisableAttribChanged(float CurrValue, float LastValue);
	void UpdateControlLockState(bool IsLocked);
	void EVENT_OnStoryQuestChanged(class FName StoryQuestName, bool Value);

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"ELEVATOR_Base_C">();
	}
	static class AELEVATOR_Base_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<AELEVATOR_Base_C>();
	}
};
static_assert(alignof(AELEVATOR_Base_C) == 0x000008, "Wrong alignment on AELEVATOR_Base_C");
static_assert(sizeof(AELEVATOR_Base_C) == 0x0006A0, "Wrong size on AELEVATOR_Base_C");
static_assert(offsetof(AELEVATOR_Base_C, UberGraphFrame_ELEVATOR_Base_C) == 0x000308, "Member 'AELEVATOR_Base_C::UberGraphFrame_ELEVATOR_Base_C' has a wrong offset!");
static_assert(offsetof(AELEVATOR_Base_C, COMP_AttribManager) == 0x000310, "Member 'AELEVATOR_Base_C::COMP_AttribManager' has a wrong offset!");
static_assert(offsetof(AELEVATOR_Base_C, ElevatorSpeakerAudio) == 0x000318, "Member 'AELEVATOR_Base_C::ElevatorSpeakerAudio' has a wrong offset!");
static_assert(offsetof(AELEVATOR_Base_C, MoveLoopAudio) == 0x000320, "Member 'AELEVATOR_Base_C::MoveLoopAudio' has a wrong offset!");
static_assert(offsetof(AELEVATOR_Base_C, COMP_VoxelCullable) == 0x000328, "Member 'AELEVATOR_Base_C::COMP_VoxelCullable' has a wrong offset!");
static_assert(offsetof(AELEVATOR_Base_C, SafetySensor) == 0x000330, "Member 'AELEVATOR_Base_C::SafetySensor' has a wrong offset!");
static_assert(offsetof(AELEVATOR_Base_C, DoorMesh_Inside) == 0x000338, "Member 'AELEVATOR_Base_C::DoorMesh_Inside' has a wrong offset!");
static_assert(offsetof(AELEVATOR_Base_C, ElevatorMesh) == 0x000340, "Member 'AELEVATOR_Base_C::ElevatorMesh' has a wrong offset!");
static_assert(offsetof(AELEVATOR_Base_C, CompartmentSensor) == 0x000348, "Member 'AELEVATOR_Base_C::CompartmentSensor' has a wrong offset!");
static_assert(offsetof(AELEVATOR_Base_C, AutoCloseTimer) == 0x000350, "Member 'AELEVATOR_Base_C::AutoCloseTimer' has a wrong offset!");
static_assert(offsetof(AELEVATOR_Base_C, InnerDoorDelay_Open) == 0x000354, "Member 'AELEVATOR_Base_C::InnerDoorDelay_Open' has a wrong offset!");
static_assert(offsetof(AELEVATOR_Base_C, OuterDoorDelay_Open) == 0x000358, "Member 'AELEVATOR_Base_C::OuterDoorDelay_Open' has a wrong offset!");
static_assert(offsetof(AELEVATOR_Base_C, OuterDoorDelay_Close) == 0x00035C, "Member 'AELEVATOR_Base_C::OuterDoorDelay_Close' has a wrong offset!");
static_assert(offsetof(AELEVATOR_Base_C, DoorDelayTimerHandle) == 0x000360, "Member 'AELEVATOR_Base_C::DoorDelayTimerHandle' has a wrong offset!");
static_assert(offsetof(AELEVATOR_Base_C, ElevatorInfoRow) == 0x000368, "Member 'AELEVATOR_Base_C::ElevatorInfoRow' has a wrong offset!");
static_assert(offsetof(AELEVATOR_Base_C, ElevatorAtmosphere) == 0x000378, "Member 'AELEVATOR_Base_C::ElevatorAtmosphere' has a wrong offset!");
static_assert(offsetof(AELEVATOR_Base_C, OutsideDoorsMesh) == 0x000388, "Member 'AELEVATOR_Base_C::OutsideDoorsMesh' has a wrong offset!");
static_assert(offsetof(AELEVATOR_Base_C, TargetLevel) == 0x000390, "Member 'AELEVATOR_Base_C::TargetLevel' has a wrong offset!");
static_assert(offsetof(AELEVATOR_Base_C, CinematicLevelName) == 0x000398, "Member 'AELEVATOR_Base_C::CinematicLevelName' has a wrong offset!");
static_assert(offsetof(AELEVATOR_Base_C, PlayerHacker) == 0x0003A0, "Member 'AELEVATOR_Base_C::PlayerHacker' has a wrong offset!");
static_assert(offsetof(AELEVATOR_Base_C, LastMovementTimestamp) == 0x0003A8, "Member 'AELEVATOR_Base_C::LastMovementTimestamp' has a wrong offset!");
static_assert(offsetof(AELEVATOR_Base_C, MinimumMoveDistance) == 0x0003AC, "Member 'AELEVATOR_Base_C::MinimumMoveDistance' has a wrong offset!");
static_assert(offsetof(AELEVATOR_Base_C, MaximumMoveDistance) == 0x0003B0, "Member 'AELEVATOR_Base_C::MaximumMoveDistance' has a wrong offset!");
static_assert(offsetof(AELEVATOR_Base_C, ElevatorMaxHeightForTeleport) == 0x0003B4, "Member 'AELEVATOR_Base_C::ElevatorMaxHeightForTeleport' has a wrong offset!");
static_assert(offsetof(AELEVATOR_Base_C, CurrentMoveDistance) == 0x0003B8, "Member 'AELEVATOR_Base_C::CurrentMoveDistance' has a wrong offset!");
static_assert(offsetof(AELEVATOR_Base_C, ElevatorMoveSpeed) == 0x0003BC, "Member 'AELEVATOR_Base_C::ElevatorMoveSpeed' has a wrong offset!");
static_assert(offsetof(AELEVATOR_Base_C, MovementDirection) == 0x0003C0, "Member 'AELEVATOR_Base_C::MovementDirection' has a wrong offset!");
static_assert(offsetof(AELEVATOR_Base_C, MovementTickTimerHandle) == 0x0003D0, "Member 'AELEVATOR_Base_C::MovementTickTimerHandle' has a wrong offset!");
static_assert(offsetof(AELEVATOR_Base_C, AutoCloseTimerHandle) == 0x0003D8, "Member 'AELEVATOR_Base_C::AutoCloseTimerHandle' has a wrong offset!");
static_assert(offsetof(AELEVATOR_Base_C, AtmosphereTransitionTimerHandle) == 0x0003E0, "Member 'AELEVATOR_Base_C::AtmosphereTransitionTimerHandle' has a wrong offset!");
static_assert(offsetof(AELEVATOR_Base_C, LocationFixupTimerHandle) == 0x0003E8, "Member 'AELEVATOR_Base_C::LocationFixupTimerHandle' has a wrong offset!");
static_assert(offsetof(AELEVATOR_Base_C, CameraShake) == 0x0003F0, "Member 'AELEVATOR_Base_C::CameraShake' has a wrong offset!");
static_assert(offsetof(AELEVATOR_Base_C, FinishedLoadingLevelCollection) == 0x0003F8, "Member 'AELEVATOR_Base_C::FinishedLoadingLevelCollection' has a wrong offset!");
static_assert(offsetof(AELEVATOR_Base_C, FinishedUnloadingLevelCollection) == 0x0003F9, "Member 'AELEVATOR_Base_C::FinishedUnloadingLevelCollection' has a wrong offset!");
static_assert(offsetof(AELEVATOR_Base_C, ElevatorWaitingHeight) == 0x0003FC, "Member 'AELEVATOR_Base_C::ElevatorWaitingHeight' has a wrong offset!");
static_assert(offsetof(AELEVATOR_Base_C, ElevatorUnoccupiedHeight) == 0x000400, "Member 'AELEVATOR_Base_C::ElevatorUnoccupiedHeight' has a wrong offset!");
static_assert(offsetof(AELEVATOR_Base_C, IsPublicAddressActive) == 0x000404, "Member 'AELEVATOR_Base_C::IsPublicAddressActive' has a wrong offset!");
static_assert(offsetof(AELEVATOR_Base_C, IsElevatorInMotion) == 0x000405, "Member 'AELEVATOR_Base_C::IsElevatorInMotion' has a wrong offset!");
static_assert(offsetof(AELEVATOR_Base_C, IsElevatorTeleporting) == 0x000406, "Member 'AELEVATOR_Base_C::IsElevatorTeleporting' has a wrong offset!");
static_assert(offsetof(AELEVATOR_Base_C, FinishedMinimumMovement) == 0x000407, "Member 'AELEVATOR_Base_C::FinishedMinimumMovement' has a wrong offset!");
static_assert(offsetof(AELEVATOR_Base_C, OpeningInnerDoors) == 0x000408, "Member 'AELEVATOR_Base_C::OpeningInnerDoors' has a wrong offset!");
static_assert(offsetof(AELEVATOR_Base_C, ClosingInnerDoors) == 0x000430, "Member 'AELEVATOR_Base_C::ClosingInnerDoors' has a wrong offset!");
static_assert(offsetof(AELEVATOR_Base_C, OpeningOuterDoors) == 0x000458, "Member 'AELEVATOR_Base_C::OpeningOuterDoors' has a wrong offset!");
static_assert(offsetof(AELEVATOR_Base_C, ClosingOuterDoors) == 0x000480, "Member 'AELEVATOR_Base_C::ClosingOuterDoors' has a wrong offset!");
static_assert(offsetof(AELEVATOR_Base_C, InnerDoorsState) == 0x0004A8, "Member 'AELEVATOR_Base_C::InnerDoorsState' has a wrong offset!");
static_assert(offsetof(AELEVATOR_Base_C, OuterDoorsState) == 0x0004A9, "Member 'AELEVATOR_Base_C::OuterDoorsState' has a wrong offset!");
static_assert(offsetof(AELEVATOR_Base_C, InnerDoorMontageTimer) == 0x0004B0, "Member 'AELEVATOR_Base_C::InnerDoorMontageTimer' has a wrong offset!");
static_assert(offsetof(AELEVATOR_Base_C, OuterDoorMontageTimer) == 0x0004B8, "Member 'AELEVATOR_Base_C::OuterDoorMontageTimer' has a wrong offset!");
static_assert(offsetof(AELEVATOR_Base_C, ShouldTeleportWhileUsedByPlayer) == 0x0004C0, "Member 'AELEVATOR_Base_C::ShouldTeleportWhileUsedByPlayer' has a wrong offset!");
static_assert(offsetof(AELEVATOR_Base_C, HasPlayedMovementStopSound) == 0x0004C1, "Member 'AELEVATOR_Base_C::HasPlayedMovementStopSound' has a wrong offset!");
static_assert(offsetof(AELEVATOR_Base_C, ElevatorPreTeleportDelay) == 0x0004C4, "Member 'AELEVATOR_Base_C::ElevatorPreTeleportDelay' has a wrong offset!");
static_assert(offsetof(AELEVATOR_Base_C, ElevatorLevelTransitionDelay) == 0x0004C8, "Member 'AELEVATOR_Base_C::ElevatorLevelTransitionDelay' has a wrong offset!");
static_assert(offsetof(AELEVATOR_Base_C, PreTeleportDelayTimerHandle) == 0x0004D0, "Member 'AELEVATOR_Base_C::PreTeleportDelayTimerHandle' has a wrong offset!");
static_assert(offsetof(AELEVATOR_Base_C, ElevatorSpawnLocation) == 0x0004D8, "Member 'AELEVATOR_Base_C::ElevatorSpawnLocation' has a wrong offset!");
static_assert(offsetof(AELEVATOR_Base_C, ElevatorStartMoveLocation) == 0x0004E4, "Member 'AELEVATOR_Base_C::ElevatorStartMoveLocation' has a wrong offset!");
static_assert(offsetof(AELEVATOR_Base_C, ElevatorSpawnRotation) == 0x0004F0, "Member 'AELEVATOR_Base_C::ElevatorSpawnRotation' has a wrong offset!");
static_assert(offsetof(AELEVATOR_Base_C, ElevatorStartMoveRotation) == 0x0004FC, "Member 'AELEVATOR_Base_C::ElevatorStartMoveRotation' has a wrong offset!");
static_assert(offsetof(AELEVATOR_Base_C, ElevatorInMotionMessage) == 0x000508, "Member 'AELEVATOR_Base_C::ElevatorInMotionMessage' has a wrong offset!");
static_assert(offsetof(AELEVATOR_Base_C, ElevatorActivatedMessage) == 0x000520, "Member 'AELEVATOR_Base_C::ElevatorActivatedMessage' has a wrong offset!");
static_assert(offsetof(AELEVATOR_Base_C, ElevatorAtDestinationMessage) == 0x000538, "Member 'AELEVATOR_Base_C::ElevatorAtDestinationMessage' has a wrong offset!");
static_assert(offsetof(AELEVATOR_Base_C, ElevatorDoorsBlockedMessage) == 0x000550, "Member 'AELEVATOR_Base_C::ElevatorDoorsBlockedMessage' has a wrong offset!");
static_assert(offsetof(AELEVATOR_Base_C, ElevatorDoorsAreOpenMessage) == 0x000568, "Member 'AELEVATOR_Base_C::ElevatorDoorsAreOpenMessage' has a wrong offset!");
static_assert(offsetof(AELEVATOR_Base_C, ControlButtonTargetBoxes) == 0x000580, "Member 'AELEVATOR_Base_C::ControlButtonTargetBoxes' has a wrong offset!");
static_assert(offsetof(AELEVATOR_Base_C, ActiveControlButtonIndex) == 0x000590, "Member 'AELEVATOR_Base_C::ActiveControlButtonIndex' has a wrong offset!");
static_assert(offsetof(AELEVATOR_Base_C, DebugActiveElevators) == 0x000594, "Member 'AELEVATOR_Base_C::DebugActiveElevators' has a wrong offset!");
static_assert(offsetof(AELEVATOR_Base_C, LoopSoundFadeInDuration) == 0x000598, "Member 'AELEVATOR_Base_C::LoopSoundFadeInDuration' has a wrong offset!");
static_assert(offsetof(AELEVATOR_Base_C, LoopSoundFadeOutDuration) == 0x00059C, "Member 'AELEVATOR_Base_C::LoopSoundFadeOutDuration' has a wrong offset!");
static_assert(offsetof(AELEVATOR_Base_C, MoveStartSoundCue) == 0x0005A0, "Member 'AELEVATOR_Base_C::MoveStartSoundCue' has a wrong offset!");
static_assert(offsetof(AELEVATOR_Base_C, MoveStopSoundCue) == 0x0005C8, "Member 'AELEVATOR_Base_C::MoveStopSoundCue' has a wrong offset!");
static_assert(offsetof(AELEVATOR_Base_C, ButtonActivateCue) == 0x0005F0, "Member 'AELEVATOR_Base_C::ButtonActivateCue' has a wrong offset!");
static_assert(offsetof(AELEVATOR_Base_C, CompleteQuestForCinematic) == 0x000618, "Member 'AELEVATOR_Base_C::CompleteQuestForCinematic' has a wrong offset!");
static_assert(offsetof(AELEVATOR_Base_C, CinematicSequenceDelay) == 0x000628, "Member 'AELEVATOR_Base_C::CinematicSequenceDelay' has a wrong offset!");
static_assert(offsetof(AELEVATOR_Base_C, CinematicSequenceActor) == 0x000630, "Member 'AELEVATOR_Base_C::CinematicSequenceActor' has a wrong offset!");
static_assert(offsetof(AELEVATOR_Base_C, MusicCueClass) == 0x000638, "Member 'AELEVATOR_Base_C::MusicCueClass' has a wrong offset!");
static_assert(offsetof(AELEVATOR_Base_C, RequiredQuest) == 0x000660, "Member 'AELEVATOR_Base_C::RequiredQuest' has a wrong offset!");
static_assert(offsetof(AELEVATOR_Base_C, QuestLockMediaHandle) == 0x000670, "Member 'AELEVATOR_Base_C::QuestLockMediaHandle' has a wrong offset!");
static_assert(offsetof(AELEVATOR_Base_C, QuestRestrictionMessage) == 0x000680, "Member 'AELEVATOR_Base_C::QuestRestrictionMessage' has a wrong offset!");
static_assert(offsetof(AELEVATOR_Base_C, LockWhenQuestCompleted) == 0x000698, "Member 'AELEVATOR_Base_C::LockWhenQuestCompleted' has a wrong offset!");
static_assert(offsetof(AELEVATOR_Base_C, IsLockedByQuest) == 0x000699, "Member 'AELEVATOR_Base_C::IsLockedByQuest' has a wrong offset!");

}

