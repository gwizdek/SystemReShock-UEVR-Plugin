#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: COMP_EnemyMovement

#include "Basic.hpp"

#include "ENUM_TargetType_structs.hpp"
#include "STRUCT_InteractResults_structs.hpp"
#include "CoreUObject_structs.hpp"
#include "ENUM_SpeedType_structs.hpp"
#include "GameplayTags_structs.hpp"
#include "Engine_structs.hpp"
#include "ENUM_MoveSpeed_structs.hpp"
#include "ENUM_TargetAssignmentType_structs.hpp"


namespace SDK::Params
{

// Function COMP_EnemyMovement.COMP_EnemyMovement_C.OnLocomotionChanged__DelegateSignature
// 0x0001 (0x0001 - 0x0000)
struct COMP_EnemyMovement_C_OnLocomotionChanged__DelegateSignature final
{
public:
	bool                                          IsMoving;                                          // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(COMP_EnemyMovement_C_OnLocomotionChanged__DelegateSignature) == 0x000001, "Wrong alignment on COMP_EnemyMovement_C_OnLocomotionChanged__DelegateSignature");
static_assert(sizeof(COMP_EnemyMovement_C_OnLocomotionChanged__DelegateSignature) == 0x000001, "Wrong size on COMP_EnemyMovement_C_OnLocomotionChanged__DelegateSignature");
static_assert(offsetof(COMP_EnemyMovement_C_OnLocomotionChanged__DelegateSignature, IsMoving) == 0x000000, "Member 'COMP_EnemyMovement_C_OnLocomotionChanged__DelegateSignature::IsMoving' has a wrong offset!");

// Function COMP_EnemyMovement.COMP_EnemyMovement_C.OnTurningChanged__DelegateSignature
// 0x0001 (0x0001 - 0x0000)
struct COMP_EnemyMovement_C_OnTurningChanged__DelegateSignature final
{
public:
	bool                                          IsTurning;                                         // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(COMP_EnemyMovement_C_OnTurningChanged__DelegateSignature) == 0x000001, "Wrong alignment on COMP_EnemyMovement_C_OnTurningChanged__DelegateSignature");
static_assert(sizeof(COMP_EnemyMovement_C_OnTurningChanged__DelegateSignature) == 0x000001, "Wrong size on COMP_EnemyMovement_C_OnTurningChanged__DelegateSignature");
static_assert(offsetof(COMP_EnemyMovement_C_OnTurningChanged__DelegateSignature, IsTurning) == 0x000000, "Member 'COMP_EnemyMovement_C_OnTurningChanged__DelegateSignature::IsTurning' has a wrong offset!");

// Function COMP_EnemyMovement.COMP_EnemyMovement_C.ExecuteUbergraph_COMP_EnemyMovement
// 0x0008 (0x0008 - 0x0000)
struct COMP_EnemyMovement_C_ExecuteUbergraph_COMP_EnemyMovement final
{
public:
	int32                                         EntryPoint;                                        // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         K2Node_Event_DeltaSeconds;                         // 0x0004(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(COMP_EnemyMovement_C_ExecuteUbergraph_COMP_EnemyMovement) == 0x000004, "Wrong alignment on COMP_EnemyMovement_C_ExecuteUbergraph_COMP_EnemyMovement");
static_assert(sizeof(COMP_EnemyMovement_C_ExecuteUbergraph_COMP_EnemyMovement) == 0x000008, "Wrong size on COMP_EnemyMovement_C_ExecuteUbergraph_COMP_EnemyMovement");
static_assert(offsetof(COMP_EnemyMovement_C_ExecuteUbergraph_COMP_EnemyMovement, EntryPoint) == 0x000000, "Member 'COMP_EnemyMovement_C_ExecuteUbergraph_COMP_EnemyMovement::EntryPoint' has a wrong offset!");
static_assert(offsetof(COMP_EnemyMovement_C_ExecuteUbergraph_COMP_EnemyMovement, K2Node_Event_DeltaSeconds) == 0x000004, "Member 'COMP_EnemyMovement_C_ExecuteUbergraph_COMP_EnemyMovement::K2Node_Event_DeltaSeconds' has a wrong offset!");

// Function COMP_EnemyMovement.COMP_EnemyMovement_C.ReceiveTick
// 0x0004 (0x0004 - 0x0000)
struct COMP_EnemyMovement_C_ReceiveTick final
{
public:
	float                                         DeltaSeconds;                                      // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(COMP_EnemyMovement_C_ReceiveTick) == 0x000004, "Wrong alignment on COMP_EnemyMovement_C_ReceiveTick");
static_assert(sizeof(COMP_EnemyMovement_C_ReceiveTick) == 0x000004, "Wrong size on COMP_EnemyMovement_C_ReceiveTick");
static_assert(offsetof(COMP_EnemyMovement_C_ReceiveTick, DeltaSeconds) == 0x000000, "Member 'COMP_EnemyMovement_C_ReceiveTick::DeltaSeconds' has a wrong offset!");

// Function COMP_EnemyMovement.COMP_EnemyMovement_C.SetMovePath
// 0x00B0 (0x00B0 - 0x0000)
struct COMP_EnemyMovement_C_SetMovePath final
{
public:
	bool                                          AutoStop;                                          // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UCOMP_VoxelCullableNavAgent_C*          TargetNavComponent;                                // 0x0008(0x0008)(Edit, BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class APAWN_SystemShockCharacter_C*           DetectedPawn;                                      // 0x0010(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UOBJ_EnemyTarget_C*                     NavTarget;                                         // 0x0018(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0020(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_EqualEqual_ByteByte_ReturnValue;          // 0x0021(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsValid_ReturnValue_1;                    // 0x0022(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_NotEqual_ByteByte_ReturnValue;            // 0x0023(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BooleanAND_ReturnValue;                   // 0x0024(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_25[0x3];                                       // 0x0025(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Conv_BoolToInt_ReturnValue;               // 0x0028(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_GetEventLocation_EventLocation;           // 0x002C(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Multiply_VectorInt_ReturnValue;           // 0x0038(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_TryPathToLocation_ReturnValue;            // 0x0044(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_GetIsIdentified_IsDetected;               // 0x0045(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_TryStopPathing_ReturnValue;               // 0x0046(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_47[0x9];                                       // 0x0047(0x0009)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTransform                             CallFunc_GetTargetTransform_Result;                // 0x0050(0x0030)(IsPlainOldData, NoDestructor)
	bool                                          CallFunc_TryPathToTransform_ReturnValue;           // 0x0080(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_TryPathToAgent_ReturnValue;               // 0x0081(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_82[0x6];                                       // 0x0082(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class UCOMP_VoxelCullableNavAgent_C*          CallFunc_GetComponentByClass_ReturnValue;          // 0x0088(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class APAWN_SystemShockCharacter_C*           CallFunc_GetDetectedPawn_Pawn;                     // 0x0090(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue_2;                    // 0x0098(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsValid_ReturnValue_3;                    // 0x0099(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          K2Node_SwitchEnum_CmpSuccess;                      // 0x009A(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_9B[0x5];                                       // 0x009B(0x0005)(Fixing Size After Last Property [ Dumper-7 ])
	class UOBJ_EnemyTarget_C*                     CallFunc_GetNavigationTarget_target;               // 0x00A0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(COMP_EnemyMovement_C_SetMovePath) == 0x000010, "Wrong alignment on COMP_EnemyMovement_C_SetMovePath");
static_assert(sizeof(COMP_EnemyMovement_C_SetMovePath) == 0x0000B0, "Wrong size on COMP_EnemyMovement_C_SetMovePath");
static_assert(offsetof(COMP_EnemyMovement_C_SetMovePath, AutoStop) == 0x000000, "Member 'COMP_EnemyMovement_C_SetMovePath::AutoStop' has a wrong offset!");
static_assert(offsetof(COMP_EnemyMovement_C_SetMovePath, TargetNavComponent) == 0x000008, "Member 'COMP_EnemyMovement_C_SetMovePath::TargetNavComponent' has a wrong offset!");
static_assert(offsetof(COMP_EnemyMovement_C_SetMovePath, DetectedPawn) == 0x000010, "Member 'COMP_EnemyMovement_C_SetMovePath::DetectedPawn' has a wrong offset!");
static_assert(offsetof(COMP_EnemyMovement_C_SetMovePath, NavTarget) == 0x000018, "Member 'COMP_EnemyMovement_C_SetMovePath::NavTarget' has a wrong offset!");
static_assert(offsetof(COMP_EnemyMovement_C_SetMovePath, CallFunc_IsValid_ReturnValue) == 0x000020, "Member 'COMP_EnemyMovement_C_SetMovePath::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(COMP_EnemyMovement_C_SetMovePath, CallFunc_EqualEqual_ByteByte_ReturnValue) == 0x000021, "Member 'COMP_EnemyMovement_C_SetMovePath::CallFunc_EqualEqual_ByteByte_ReturnValue' has a wrong offset!");
static_assert(offsetof(COMP_EnemyMovement_C_SetMovePath, CallFunc_IsValid_ReturnValue_1) == 0x000022, "Member 'COMP_EnemyMovement_C_SetMovePath::CallFunc_IsValid_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(COMP_EnemyMovement_C_SetMovePath, CallFunc_NotEqual_ByteByte_ReturnValue) == 0x000023, "Member 'COMP_EnemyMovement_C_SetMovePath::CallFunc_NotEqual_ByteByte_ReturnValue' has a wrong offset!");
static_assert(offsetof(COMP_EnemyMovement_C_SetMovePath, CallFunc_BooleanAND_ReturnValue) == 0x000024, "Member 'COMP_EnemyMovement_C_SetMovePath::CallFunc_BooleanAND_ReturnValue' has a wrong offset!");
static_assert(offsetof(COMP_EnemyMovement_C_SetMovePath, CallFunc_Conv_BoolToInt_ReturnValue) == 0x000028, "Member 'COMP_EnemyMovement_C_SetMovePath::CallFunc_Conv_BoolToInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(COMP_EnemyMovement_C_SetMovePath, CallFunc_GetEventLocation_EventLocation) == 0x00002C, "Member 'COMP_EnemyMovement_C_SetMovePath::CallFunc_GetEventLocation_EventLocation' has a wrong offset!");
static_assert(offsetof(COMP_EnemyMovement_C_SetMovePath, CallFunc_Multiply_VectorInt_ReturnValue) == 0x000038, "Member 'COMP_EnemyMovement_C_SetMovePath::CallFunc_Multiply_VectorInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(COMP_EnemyMovement_C_SetMovePath, CallFunc_TryPathToLocation_ReturnValue) == 0x000044, "Member 'COMP_EnemyMovement_C_SetMovePath::CallFunc_TryPathToLocation_ReturnValue' has a wrong offset!");
static_assert(offsetof(COMP_EnemyMovement_C_SetMovePath, CallFunc_GetIsIdentified_IsDetected) == 0x000045, "Member 'COMP_EnemyMovement_C_SetMovePath::CallFunc_GetIsIdentified_IsDetected' has a wrong offset!");
static_assert(offsetof(COMP_EnemyMovement_C_SetMovePath, CallFunc_TryStopPathing_ReturnValue) == 0x000046, "Member 'COMP_EnemyMovement_C_SetMovePath::CallFunc_TryStopPathing_ReturnValue' has a wrong offset!");
static_assert(offsetof(COMP_EnemyMovement_C_SetMovePath, CallFunc_GetTargetTransform_Result) == 0x000050, "Member 'COMP_EnemyMovement_C_SetMovePath::CallFunc_GetTargetTransform_Result' has a wrong offset!");
static_assert(offsetof(COMP_EnemyMovement_C_SetMovePath, CallFunc_TryPathToTransform_ReturnValue) == 0x000080, "Member 'COMP_EnemyMovement_C_SetMovePath::CallFunc_TryPathToTransform_ReturnValue' has a wrong offset!");
static_assert(offsetof(COMP_EnemyMovement_C_SetMovePath, CallFunc_TryPathToAgent_ReturnValue) == 0x000081, "Member 'COMP_EnemyMovement_C_SetMovePath::CallFunc_TryPathToAgent_ReturnValue' has a wrong offset!");
static_assert(offsetof(COMP_EnemyMovement_C_SetMovePath, CallFunc_GetComponentByClass_ReturnValue) == 0x000088, "Member 'COMP_EnemyMovement_C_SetMovePath::CallFunc_GetComponentByClass_ReturnValue' has a wrong offset!");
static_assert(offsetof(COMP_EnemyMovement_C_SetMovePath, CallFunc_GetDetectedPawn_Pawn) == 0x000090, "Member 'COMP_EnemyMovement_C_SetMovePath::CallFunc_GetDetectedPawn_Pawn' has a wrong offset!");
static_assert(offsetof(COMP_EnemyMovement_C_SetMovePath, CallFunc_IsValid_ReturnValue_2) == 0x000098, "Member 'COMP_EnemyMovement_C_SetMovePath::CallFunc_IsValid_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(COMP_EnemyMovement_C_SetMovePath, CallFunc_IsValid_ReturnValue_3) == 0x000099, "Member 'COMP_EnemyMovement_C_SetMovePath::CallFunc_IsValid_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(COMP_EnemyMovement_C_SetMovePath, K2Node_SwitchEnum_CmpSuccess) == 0x00009A, "Member 'COMP_EnemyMovement_C_SetMovePath::K2Node_SwitchEnum_CmpSuccess' has a wrong offset!");
static_assert(offsetof(COMP_EnemyMovement_C_SetMovePath, CallFunc_GetNavigationTarget_target) == 0x0000A0, "Member 'COMP_EnemyMovement_C_SetMovePath::CallFunc_GetNavigationTarget_target' has a wrong offset!");

// Function COMP_EnemyMovement.COMP_EnemyMovement_C.SetBodyTarget
// 0x0008 (0x0008 - 0x0000)
struct COMP_EnemyMovement_C_SetBodyTarget final
{
public:
	class UOBJ_EnemyTarget_C*                     Target;                                            // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(COMP_EnemyMovement_C_SetBodyTarget) == 0x000008, "Wrong alignment on COMP_EnemyMovement_C_SetBodyTarget");
static_assert(sizeof(COMP_EnemyMovement_C_SetBodyTarget) == 0x000008, "Wrong size on COMP_EnemyMovement_C_SetBodyTarget");
static_assert(offsetof(COMP_EnemyMovement_C_SetBodyTarget, Target) == 0x000000, "Member 'COMP_EnemyMovement_C_SetBodyTarget::Target' has a wrong offset!");

// Function COMP_EnemyMovement.COMP_EnemyMovement_C.UpdateMoveSpeed
// 0x000C (0x000C - 0x0000)
struct COMP_EnemyMovement_C_UpdateMoveSpeed final
{
public:
	float                                         CallFunc_GetUnscaledMoveSpeedCurrent_MoveSpeedCurrent; // 0x0000(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0004(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_Multiply_FloatFloat_ReturnValue;          // 0x0008(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(COMP_EnemyMovement_C_UpdateMoveSpeed) == 0x000004, "Wrong alignment on COMP_EnemyMovement_C_UpdateMoveSpeed");
static_assert(sizeof(COMP_EnemyMovement_C_UpdateMoveSpeed) == 0x00000C, "Wrong size on COMP_EnemyMovement_C_UpdateMoveSpeed");
static_assert(offsetof(COMP_EnemyMovement_C_UpdateMoveSpeed, CallFunc_GetUnscaledMoveSpeedCurrent_MoveSpeedCurrent) == 0x000000, "Member 'COMP_EnemyMovement_C_UpdateMoveSpeed::CallFunc_GetUnscaledMoveSpeedCurrent_MoveSpeedCurrent' has a wrong offset!");
static_assert(offsetof(COMP_EnemyMovement_C_UpdateMoveSpeed, CallFunc_IsValid_ReturnValue) == 0x000004, "Member 'COMP_EnemyMovement_C_UpdateMoveSpeed::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(COMP_EnemyMovement_C_UpdateMoveSpeed, CallFunc_Multiply_FloatFloat_ReturnValue) == 0x000008, "Member 'COMP_EnemyMovement_C_UpdateMoveSpeed::CallFunc_Multiply_FloatFloat_ReturnValue' has a wrong offset!");

// Function COMP_EnemyMovement.COMP_EnemyMovement_C.SetTargetMoveSpeed
// 0x0002 (0x0002 - 0x0000)
struct COMP_EnemyMovement_C_SetTargetMoveSpeed final
{
public:
	ENUM_MoveSpeed                                Speed;                                             // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ENUM_SpeedType                                ChangeRate;                                        // 0x0001(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(COMP_EnemyMovement_C_SetTargetMoveSpeed) == 0x000001, "Wrong alignment on COMP_EnemyMovement_C_SetTargetMoveSpeed");
static_assert(sizeof(COMP_EnemyMovement_C_SetTargetMoveSpeed) == 0x000002, "Wrong size on COMP_EnemyMovement_C_SetTargetMoveSpeed");
static_assert(offsetof(COMP_EnemyMovement_C_SetTargetMoveSpeed, Speed) == 0x000000, "Member 'COMP_EnemyMovement_C_SetTargetMoveSpeed::Speed' has a wrong offset!");
static_assert(offsetof(COMP_EnemyMovement_C_SetTargetMoveSpeed, ChangeRate) == 0x000001, "Member 'COMP_EnemyMovement_C_SetTargetMoveSpeed::ChangeRate' has a wrong offset!");

// Function COMP_EnemyMovement.COMP_EnemyMovement_C.SetBodyRotateSpeed
// 0x0003 (0x0003 - 0x0000)
struct COMP_EnemyMovement_C_SetBodyRotateSpeed final
{
public:
	ENUM_SpeedType                                RotateSpeed;                                       // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Changed;                                           // 0x0001(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_NotEqual_ByteByte_ReturnValue;            // 0x0002(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(COMP_EnemyMovement_C_SetBodyRotateSpeed) == 0x000001, "Wrong alignment on COMP_EnemyMovement_C_SetBodyRotateSpeed");
static_assert(sizeof(COMP_EnemyMovement_C_SetBodyRotateSpeed) == 0x000003, "Wrong size on COMP_EnemyMovement_C_SetBodyRotateSpeed");
static_assert(offsetof(COMP_EnemyMovement_C_SetBodyRotateSpeed, RotateSpeed) == 0x000000, "Member 'COMP_EnemyMovement_C_SetBodyRotateSpeed::RotateSpeed' has a wrong offset!");
static_assert(offsetof(COMP_EnemyMovement_C_SetBodyRotateSpeed, Changed) == 0x000001, "Member 'COMP_EnemyMovement_C_SetBodyRotateSpeed::Changed' has a wrong offset!");
static_assert(offsetof(COMP_EnemyMovement_C_SetBodyRotateSpeed, CallFunc_NotEqual_ByteByte_ReturnValue) == 0x000002, "Member 'COMP_EnemyMovement_C_SetBodyRotateSpeed::CallFunc_NotEqual_ByteByte_ReturnValue' has a wrong offset!");

// Function COMP_EnemyMovement.COMP_EnemyMovement_C.CanRotateMoveDirectionInstantly
// 0x000C (0x000C - 0x0000)
struct COMP_EnemyMovement_C_CanRotateMoveDirectionInstantly final
{
public:
	bool                                          Result;                                            // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_GetUnscaledMoveSpeedCurrent_MoveSpeedCurrent; // 0x0004(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Vector_IsNearlyZero_ReturnValue;          // 0x0008(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_NearlyEqual_FloatFloat_ReturnValue;       // 0x0009(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          K2Node_SwitchEnum_CmpSuccess;                      // 0x000A(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(COMP_EnemyMovement_C_CanRotateMoveDirectionInstantly) == 0x000004, "Wrong alignment on COMP_EnemyMovement_C_CanRotateMoveDirectionInstantly");
static_assert(sizeof(COMP_EnemyMovement_C_CanRotateMoveDirectionInstantly) == 0x00000C, "Wrong size on COMP_EnemyMovement_C_CanRotateMoveDirectionInstantly");
static_assert(offsetof(COMP_EnemyMovement_C_CanRotateMoveDirectionInstantly, Result) == 0x000000, "Member 'COMP_EnemyMovement_C_CanRotateMoveDirectionInstantly::Result' has a wrong offset!");
static_assert(offsetof(COMP_EnemyMovement_C_CanRotateMoveDirectionInstantly, CallFunc_GetUnscaledMoveSpeedCurrent_MoveSpeedCurrent) == 0x000004, "Member 'COMP_EnemyMovement_C_CanRotateMoveDirectionInstantly::CallFunc_GetUnscaledMoveSpeedCurrent_MoveSpeedCurrent' has a wrong offset!");
static_assert(offsetof(COMP_EnemyMovement_C_CanRotateMoveDirectionInstantly, CallFunc_Vector_IsNearlyZero_ReturnValue) == 0x000008, "Member 'COMP_EnemyMovement_C_CanRotateMoveDirectionInstantly::CallFunc_Vector_IsNearlyZero_ReturnValue' has a wrong offset!");
static_assert(offsetof(COMP_EnemyMovement_C_CanRotateMoveDirectionInstantly, CallFunc_NearlyEqual_FloatFloat_ReturnValue) == 0x000009, "Member 'COMP_EnemyMovement_C_CanRotateMoveDirectionInstantly::CallFunc_NearlyEqual_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(COMP_EnemyMovement_C_CanRotateMoveDirectionInstantly, K2Node_SwitchEnum_CmpSuccess) == 0x00000A, "Member 'COMP_EnemyMovement_C_CanRotateMoveDirectionInstantly::K2Node_SwitchEnum_CmpSuccess' has a wrong offset!");

// Function COMP_EnemyMovement.COMP_EnemyMovement_C.GetMoveDirection_Current
// 0x000C (0x000C - 0x0000)
struct COMP_EnemyMovement_C_GetMoveDirection_Current final
{
public:
	struct FVector                                Direction;                                         // 0x0000(0x000C)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(COMP_EnemyMovement_C_GetMoveDirection_Current) == 0x000004, "Wrong alignment on COMP_EnemyMovement_C_GetMoveDirection_Current");
static_assert(sizeof(COMP_EnemyMovement_C_GetMoveDirection_Current) == 0x00000C, "Wrong size on COMP_EnemyMovement_C_GetMoveDirection_Current");
static_assert(offsetof(COMP_EnemyMovement_C_GetMoveDirection_Current, Direction) == 0x000000, "Member 'COMP_EnemyMovement_C_GetMoveDirection_Current::Direction' has a wrong offset!");

// Function COMP_EnemyMovement.COMP_EnemyMovement_C.GetMoveDirection_RotationSpeed
// 0x0001 (0x0001 - 0x0000)
struct COMP_EnemyMovement_C_GetMoveDirection_RotationSpeed final
{
public:
	ENUM_SpeedType                                RotationSpeed;                                     // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(COMP_EnemyMovement_C_GetMoveDirection_RotationSpeed) == 0x000001, "Wrong alignment on COMP_EnemyMovement_C_GetMoveDirection_RotationSpeed");
static_assert(sizeof(COMP_EnemyMovement_C_GetMoveDirection_RotationSpeed) == 0x000001, "Wrong size on COMP_EnemyMovement_C_GetMoveDirection_RotationSpeed");
static_assert(offsetof(COMP_EnemyMovement_C_GetMoveDirection_RotationSpeed, RotationSpeed) == 0x000000, "Member 'COMP_EnemyMovement_C_GetMoveDirection_RotationSpeed::RotationSpeed' has a wrong offset!");

// Function COMP_EnemyMovement.COMP_EnemyMovement_C.SetMoveDirection_Current
// 0x000C (0x000C - 0x0000)
struct COMP_EnemyMovement_C_SetMoveDirection_Current final
{
public:
	struct FVector                                MoveDirection;                                     // 0x0000(0x000C)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(COMP_EnemyMovement_C_SetMoveDirection_Current) == 0x000004, "Wrong alignment on COMP_EnemyMovement_C_SetMoveDirection_Current");
static_assert(sizeof(COMP_EnemyMovement_C_SetMoveDirection_Current) == 0x00000C, "Wrong size on COMP_EnemyMovement_C_SetMoveDirection_Current");
static_assert(offsetof(COMP_EnemyMovement_C_SetMoveDirection_Current, MoveDirection) == 0x000000, "Member 'COMP_EnemyMovement_C_SetMoveDirection_Current::MoveDirection' has a wrong offset!");

// Function COMP_EnemyMovement.COMP_EnemyMovement_C.SetMoveDirection_RotationSpeed
// 0x0003 (0x0003 - 0x0000)
struct COMP_EnemyMovement_C_SetMoveDirection_RotationSpeed final
{
public:
	ENUM_SpeedType                                RotationSpeed;                                     // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Changed;                                           // 0x0001(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_NotEqual_ByteByte_ReturnValue;            // 0x0002(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(COMP_EnemyMovement_C_SetMoveDirection_RotationSpeed) == 0x000001, "Wrong alignment on COMP_EnemyMovement_C_SetMoveDirection_RotationSpeed");
static_assert(sizeof(COMP_EnemyMovement_C_SetMoveDirection_RotationSpeed) == 0x000003, "Wrong size on COMP_EnemyMovement_C_SetMoveDirection_RotationSpeed");
static_assert(offsetof(COMP_EnemyMovement_C_SetMoveDirection_RotationSpeed, RotationSpeed) == 0x000000, "Member 'COMP_EnemyMovement_C_SetMoveDirection_RotationSpeed::RotationSpeed' has a wrong offset!");
static_assert(offsetof(COMP_EnemyMovement_C_SetMoveDirection_RotationSpeed, Changed) == 0x000001, "Member 'COMP_EnemyMovement_C_SetMoveDirection_RotationSpeed::Changed' has a wrong offset!");
static_assert(offsetof(COMP_EnemyMovement_C_SetMoveDirection_RotationSpeed, CallFunc_NotEqual_ByteByte_ReturnValue) == 0x000002, "Member 'COMP_EnemyMovement_C_SetMoveDirection_RotationSpeed::CallFunc_NotEqual_ByteByte_ReturnValue' has a wrong offset!");

// Function COMP_EnemyMovement.COMP_EnemyMovement_C.GetTargetMoveSpeed
// 0x0002 (0x0002 - 0x0000)
struct COMP_EnemyMovement_C_GetTargetMoveSpeed final
{
public:
	ENUM_MoveSpeed                                MoveSpeed;                                         // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ENUM_SpeedType                                ChangeRate;                                        // 0x0001(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(COMP_EnemyMovement_C_GetTargetMoveSpeed) == 0x000001, "Wrong alignment on COMP_EnemyMovement_C_GetTargetMoveSpeed");
static_assert(sizeof(COMP_EnemyMovement_C_GetTargetMoveSpeed) == 0x000002, "Wrong size on COMP_EnemyMovement_C_GetTargetMoveSpeed");
static_assert(offsetof(COMP_EnemyMovement_C_GetTargetMoveSpeed, MoveSpeed) == 0x000000, "Member 'COMP_EnemyMovement_C_GetTargetMoveSpeed::MoveSpeed' has a wrong offset!");
static_assert(offsetof(COMP_EnemyMovement_C_GetTargetMoveSpeed, ChangeRate) == 0x000001, "Member 'COMP_EnemyMovement_C_GetTargetMoveSpeed::ChangeRate' has a wrong offset!");

// Function COMP_EnemyMovement.COMP_EnemyMovement_C.GetMoveSpeedValue
// 0x000C (0x000C - 0x0000)
struct COMP_EnemyMovement_C_GetMoveSpeedValue final
{
public:
	ENUM_MoveSpeed                                MoveSpeed;                                         // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         Speed;                                             // 0x0004(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_SwitchEnum_CmpSuccess;                      // 0x0008(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(COMP_EnemyMovement_C_GetMoveSpeedValue) == 0x000004, "Wrong alignment on COMP_EnemyMovement_C_GetMoveSpeedValue");
static_assert(sizeof(COMP_EnemyMovement_C_GetMoveSpeedValue) == 0x00000C, "Wrong size on COMP_EnemyMovement_C_GetMoveSpeedValue");
static_assert(offsetof(COMP_EnemyMovement_C_GetMoveSpeedValue, MoveSpeed) == 0x000000, "Member 'COMP_EnemyMovement_C_GetMoveSpeedValue::MoveSpeed' has a wrong offset!");
static_assert(offsetof(COMP_EnemyMovement_C_GetMoveSpeedValue, Speed) == 0x000004, "Member 'COMP_EnemyMovement_C_GetMoveSpeedValue::Speed' has a wrong offset!");
static_assert(offsetof(COMP_EnemyMovement_C_GetMoveSpeedValue, K2Node_SwitchEnum_CmpSuccess) == 0x000008, "Member 'COMP_EnemyMovement_C_GetMoveSpeedValue::K2Node_SwitchEnum_CmpSuccess' has a wrong offset!");

// Function COMP_EnemyMovement.COMP_EnemyMovement_C.SetBodyTargetType
// 0x0001 (0x0001 - 0x0000)
struct COMP_EnemyMovement_C_SetBodyTargetType final
{
public:
	ENUM_TargetType                               TargetType;                                        // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(COMP_EnemyMovement_C_SetBodyTargetType) == 0x000001, "Wrong alignment on COMP_EnemyMovement_C_SetBodyTargetType");
static_assert(sizeof(COMP_EnemyMovement_C_SetBodyTargetType) == 0x000001, "Wrong size on COMP_EnemyMovement_C_SetBodyTargetType");
static_assert(offsetof(COMP_EnemyMovement_C_SetBodyTargetType, TargetType) == 0x000000, "Member 'COMP_EnemyMovement_C_SetBodyTargetType::TargetType' has a wrong offset!");

// Function COMP_EnemyMovement.COMP_EnemyMovement_C.DebugDrawAll
// 0x0100 (0x0100 - 0x0000)
struct COMP_EnemyMovement_C_DebugDrawAll final
{
public:
	struct FVector                                CallFunc_GetMoveDirection_Current_Direction;       // 0x0000(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Multiply_VectorFloat_ReturnValue;         // 0x000C(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Multiply_VectorFloat_ReturnValue_1;       // 0x0018(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Multiply_VectorFloat_ReturnValue_2;       // 0x0024(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_K2_GetActorLocation_ReturnValue;          // 0x0030(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_GetActorForwardVector_ReturnValue;        // 0x003C(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Multiply_VectorFloat_ReturnValue_3;       // 0x0048(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_K2_GetActorLocation_ReturnValue_1;        // 0x0054(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Add_VectorVector_ReturnValue;             // 0x0060(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_K2_GetActorLocation_ReturnValue_2;        // 0x006C(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Add_VectorVector_ReturnValue_1;           // 0x0078(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Multiply_VectorFloat_ReturnValue_4;       // 0x0084(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Add_VectorVector_ReturnValue_2;           // 0x0090(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsPackagedForDistribution_ReturnValue;    // 0x009C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Not_PreBool_ReturnValue;                  // 0x009D(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_9E[0x2];                                       // 0x009E(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                CallFunc_K2_GetActorLocation_ReturnValue_3;        // 0x00A0(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Add_VectorVector_ReturnValue_3;           // 0x00AC(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_GetActorUpVector_ReturnValue;             // 0x00B8(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Multiply_VectorFloat_ReturnValue_5;       // 0x00C4(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_K2_GetActorLocation_ReturnValue_4;        // 0x00D0(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Add_VectorVector_ReturnValue_4;           // 0x00DC(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_K2_GetActorLocation_ReturnValue_5;        // 0x00E8(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Add_VectorVector_ReturnValue_5;           // 0x00F4(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(COMP_EnemyMovement_C_DebugDrawAll) == 0x000004, "Wrong alignment on COMP_EnemyMovement_C_DebugDrawAll");
static_assert(sizeof(COMP_EnemyMovement_C_DebugDrawAll) == 0x000100, "Wrong size on COMP_EnemyMovement_C_DebugDrawAll");
static_assert(offsetof(COMP_EnemyMovement_C_DebugDrawAll, CallFunc_GetMoveDirection_Current_Direction) == 0x000000, "Member 'COMP_EnemyMovement_C_DebugDrawAll::CallFunc_GetMoveDirection_Current_Direction' has a wrong offset!");
static_assert(offsetof(COMP_EnemyMovement_C_DebugDrawAll, CallFunc_Multiply_VectorFloat_ReturnValue) == 0x00000C, "Member 'COMP_EnemyMovement_C_DebugDrawAll::CallFunc_Multiply_VectorFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(COMP_EnemyMovement_C_DebugDrawAll, CallFunc_Multiply_VectorFloat_ReturnValue_1) == 0x000018, "Member 'COMP_EnemyMovement_C_DebugDrawAll::CallFunc_Multiply_VectorFloat_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(COMP_EnemyMovement_C_DebugDrawAll, CallFunc_Multiply_VectorFloat_ReturnValue_2) == 0x000024, "Member 'COMP_EnemyMovement_C_DebugDrawAll::CallFunc_Multiply_VectorFloat_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(COMP_EnemyMovement_C_DebugDrawAll, CallFunc_K2_GetActorLocation_ReturnValue) == 0x000030, "Member 'COMP_EnemyMovement_C_DebugDrawAll::CallFunc_K2_GetActorLocation_ReturnValue' has a wrong offset!");
static_assert(offsetof(COMP_EnemyMovement_C_DebugDrawAll, CallFunc_GetActorForwardVector_ReturnValue) == 0x00003C, "Member 'COMP_EnemyMovement_C_DebugDrawAll::CallFunc_GetActorForwardVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(COMP_EnemyMovement_C_DebugDrawAll, CallFunc_Multiply_VectorFloat_ReturnValue_3) == 0x000048, "Member 'COMP_EnemyMovement_C_DebugDrawAll::CallFunc_Multiply_VectorFloat_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(COMP_EnemyMovement_C_DebugDrawAll, CallFunc_K2_GetActorLocation_ReturnValue_1) == 0x000054, "Member 'COMP_EnemyMovement_C_DebugDrawAll::CallFunc_K2_GetActorLocation_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(COMP_EnemyMovement_C_DebugDrawAll, CallFunc_Add_VectorVector_ReturnValue) == 0x000060, "Member 'COMP_EnemyMovement_C_DebugDrawAll::CallFunc_Add_VectorVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(COMP_EnemyMovement_C_DebugDrawAll, CallFunc_K2_GetActorLocation_ReturnValue_2) == 0x00006C, "Member 'COMP_EnemyMovement_C_DebugDrawAll::CallFunc_K2_GetActorLocation_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(COMP_EnemyMovement_C_DebugDrawAll, CallFunc_Add_VectorVector_ReturnValue_1) == 0x000078, "Member 'COMP_EnemyMovement_C_DebugDrawAll::CallFunc_Add_VectorVector_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(COMP_EnemyMovement_C_DebugDrawAll, CallFunc_Multiply_VectorFloat_ReturnValue_4) == 0x000084, "Member 'COMP_EnemyMovement_C_DebugDrawAll::CallFunc_Multiply_VectorFloat_ReturnValue_4' has a wrong offset!");
static_assert(offsetof(COMP_EnemyMovement_C_DebugDrawAll, CallFunc_Add_VectorVector_ReturnValue_2) == 0x000090, "Member 'COMP_EnemyMovement_C_DebugDrawAll::CallFunc_Add_VectorVector_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(COMP_EnemyMovement_C_DebugDrawAll, CallFunc_IsPackagedForDistribution_ReturnValue) == 0x00009C, "Member 'COMP_EnemyMovement_C_DebugDrawAll::CallFunc_IsPackagedForDistribution_ReturnValue' has a wrong offset!");
static_assert(offsetof(COMP_EnemyMovement_C_DebugDrawAll, CallFunc_Not_PreBool_ReturnValue) == 0x00009D, "Member 'COMP_EnemyMovement_C_DebugDrawAll::CallFunc_Not_PreBool_ReturnValue' has a wrong offset!");
static_assert(offsetof(COMP_EnemyMovement_C_DebugDrawAll, CallFunc_K2_GetActorLocation_ReturnValue_3) == 0x0000A0, "Member 'COMP_EnemyMovement_C_DebugDrawAll::CallFunc_K2_GetActorLocation_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(COMP_EnemyMovement_C_DebugDrawAll, CallFunc_Add_VectorVector_ReturnValue_3) == 0x0000AC, "Member 'COMP_EnemyMovement_C_DebugDrawAll::CallFunc_Add_VectorVector_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(COMP_EnemyMovement_C_DebugDrawAll, CallFunc_GetActorUpVector_ReturnValue) == 0x0000B8, "Member 'COMP_EnemyMovement_C_DebugDrawAll::CallFunc_GetActorUpVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(COMP_EnemyMovement_C_DebugDrawAll, CallFunc_Multiply_VectorFloat_ReturnValue_5) == 0x0000C4, "Member 'COMP_EnemyMovement_C_DebugDrawAll::CallFunc_Multiply_VectorFloat_ReturnValue_5' has a wrong offset!");
static_assert(offsetof(COMP_EnemyMovement_C_DebugDrawAll, CallFunc_K2_GetActorLocation_ReturnValue_4) == 0x0000D0, "Member 'COMP_EnemyMovement_C_DebugDrawAll::CallFunc_K2_GetActorLocation_ReturnValue_4' has a wrong offset!");
static_assert(offsetof(COMP_EnemyMovement_C_DebugDrawAll, CallFunc_Add_VectorVector_ReturnValue_4) == 0x0000DC, "Member 'COMP_EnemyMovement_C_DebugDrawAll::CallFunc_Add_VectorVector_ReturnValue_4' has a wrong offset!");
static_assert(offsetof(COMP_EnemyMovement_C_DebugDrawAll, CallFunc_K2_GetActorLocation_ReturnValue_5) == 0x0000E8, "Member 'COMP_EnemyMovement_C_DebugDrawAll::CallFunc_K2_GetActorLocation_ReturnValue_5' has a wrong offset!");
static_assert(offsetof(COMP_EnemyMovement_C_DebugDrawAll, CallFunc_Add_VectorVector_ReturnValue_5) == 0x0000F4, "Member 'COMP_EnemyMovement_C_DebugDrawAll::CallFunc_Add_VectorVector_ReturnValue_5' has a wrong offset!");

// Function COMP_EnemyMovement.COMP_EnemyMovement_C.GetBodyRotationTargetType
// 0x0001 (0x0001 - 0x0000)
struct COMP_EnemyMovement_C_GetBodyRotationTargetType final
{
public:
	ENUM_TargetType                               BodyRotationType_0;                                // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(COMP_EnemyMovement_C_GetBodyRotationTargetType) == 0x000001, "Wrong alignment on COMP_EnemyMovement_C_GetBodyRotationTargetType");
static_assert(sizeof(COMP_EnemyMovement_C_GetBodyRotationTargetType) == 0x000001, "Wrong size on COMP_EnemyMovement_C_GetBodyRotationTargetType");
static_assert(offsetof(COMP_EnemyMovement_C_GetBodyRotationTargetType, BodyRotationType_0) == 0x000000, "Member 'COMP_EnemyMovement_C_GetBodyRotationTargetType::BodyRotationType_0' has a wrong offset!");

// Function COMP_EnemyMovement.COMP_EnemyMovement_C.GetBodyRotateSpeed
// 0x0001 (0x0001 - 0x0000)
struct COMP_EnemyMovement_C_GetBodyRotateSpeed final
{
public:
	ENUM_SpeedType                                RotateSpeed;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(COMP_EnemyMovement_C_GetBodyRotateSpeed) == 0x000001, "Wrong alignment on COMP_EnemyMovement_C_GetBodyRotateSpeed");
static_assert(sizeof(COMP_EnemyMovement_C_GetBodyRotateSpeed) == 0x000001, "Wrong size on COMP_EnemyMovement_C_GetBodyRotateSpeed");
static_assert(offsetof(COMP_EnemyMovement_C_GetBodyRotateSpeed, RotateSpeed) == 0x000000, "Member 'COMP_EnemyMovement_C_GetBodyRotateSpeed::RotateSpeed' has a wrong offset!");

// Function COMP_EnemyMovement.COMP_EnemyMovement_C.SetBodyDirectionCurrent
// 0x0030 (0x0030 - 0x0000)
struct COMP_EnemyMovement_C_SetBodyDirectionCurrent final
{
public:
	struct FVector                                BodyDirection;                                     // 0x0000(0x000C)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         DeltaSeconds;                                      // 0x000C(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          HasDirectionChanged;                               // 0x0010(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_11[0x3];                                       // 0x0011(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                NewDirection;                                      // 0x0014(0x000C)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_NotEqualExactly_VectorVector_ReturnValue; // 0x0020(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_NearlyEqual_FloatFloat_ReturnValue;       // 0x0021(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Not_PreBool_ReturnValue;                  // 0x0022(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_NotEqual_FloatFloat_ReturnValue;          // 0x0023(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                         CallFunc_AngleBetweenNormals_ReturnValue;          // 0x0024(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Multiply_FloatFloat_ReturnValue;          // 0x0028(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Multiply_FloatFloat_ReturnValue_1;        // 0x002C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(COMP_EnemyMovement_C_SetBodyDirectionCurrent) == 0x000004, "Wrong alignment on COMP_EnemyMovement_C_SetBodyDirectionCurrent");
static_assert(sizeof(COMP_EnemyMovement_C_SetBodyDirectionCurrent) == 0x000030, "Wrong size on COMP_EnemyMovement_C_SetBodyDirectionCurrent");
static_assert(offsetof(COMP_EnemyMovement_C_SetBodyDirectionCurrent, BodyDirection) == 0x000000, "Member 'COMP_EnemyMovement_C_SetBodyDirectionCurrent::BodyDirection' has a wrong offset!");
static_assert(offsetof(COMP_EnemyMovement_C_SetBodyDirectionCurrent, DeltaSeconds) == 0x00000C, "Member 'COMP_EnemyMovement_C_SetBodyDirectionCurrent::DeltaSeconds' has a wrong offset!");
static_assert(offsetof(COMP_EnemyMovement_C_SetBodyDirectionCurrent, HasDirectionChanged) == 0x000010, "Member 'COMP_EnemyMovement_C_SetBodyDirectionCurrent::HasDirectionChanged' has a wrong offset!");
static_assert(offsetof(COMP_EnemyMovement_C_SetBodyDirectionCurrent, NewDirection) == 0x000014, "Member 'COMP_EnemyMovement_C_SetBodyDirectionCurrent::NewDirection' has a wrong offset!");
static_assert(offsetof(COMP_EnemyMovement_C_SetBodyDirectionCurrent, CallFunc_NotEqualExactly_VectorVector_ReturnValue) == 0x000020, "Member 'COMP_EnemyMovement_C_SetBodyDirectionCurrent::CallFunc_NotEqualExactly_VectorVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(COMP_EnemyMovement_C_SetBodyDirectionCurrent, CallFunc_NearlyEqual_FloatFloat_ReturnValue) == 0x000021, "Member 'COMP_EnemyMovement_C_SetBodyDirectionCurrent::CallFunc_NearlyEqual_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(COMP_EnemyMovement_C_SetBodyDirectionCurrent, CallFunc_Not_PreBool_ReturnValue) == 0x000022, "Member 'COMP_EnemyMovement_C_SetBodyDirectionCurrent::CallFunc_Not_PreBool_ReturnValue' has a wrong offset!");
static_assert(offsetof(COMP_EnemyMovement_C_SetBodyDirectionCurrent, CallFunc_NotEqual_FloatFloat_ReturnValue) == 0x000023, "Member 'COMP_EnemyMovement_C_SetBodyDirectionCurrent::CallFunc_NotEqual_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(COMP_EnemyMovement_C_SetBodyDirectionCurrent, CallFunc_AngleBetweenNormals_ReturnValue) == 0x000024, "Member 'COMP_EnemyMovement_C_SetBodyDirectionCurrent::CallFunc_AngleBetweenNormals_ReturnValue' has a wrong offset!");
static_assert(offsetof(COMP_EnemyMovement_C_SetBodyDirectionCurrent, CallFunc_Multiply_FloatFloat_ReturnValue) == 0x000028, "Member 'COMP_EnemyMovement_C_SetBodyDirectionCurrent::CallFunc_Multiply_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(COMP_EnemyMovement_C_SetBodyDirectionCurrent, CallFunc_Multiply_FloatFloat_ReturnValue_1) == 0x00002C, "Member 'COMP_EnemyMovement_C_SetBodyDirectionCurrent::CallFunc_Multiply_FloatFloat_ReturnValue_1' has a wrong offset!");

// Function COMP_EnemyMovement.COMP_EnemyMovement_C.GetBodyDirectionCurrent
// 0x001C (0x001C - 0x0000)
struct COMP_EnemyMovement_C_GetBodyDirectionCurrent final
{
public:
	bool                                          TwoD;                                              // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                BodyDirectionCurrent;                              // 0x0004(0x000C)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Vector_Normal2D_ReturnValue;              // 0x0010(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(COMP_EnemyMovement_C_GetBodyDirectionCurrent) == 0x000004, "Wrong alignment on COMP_EnemyMovement_C_GetBodyDirectionCurrent");
static_assert(sizeof(COMP_EnemyMovement_C_GetBodyDirectionCurrent) == 0x00001C, "Wrong size on COMP_EnemyMovement_C_GetBodyDirectionCurrent");
static_assert(offsetof(COMP_EnemyMovement_C_GetBodyDirectionCurrent, TwoD) == 0x000000, "Member 'COMP_EnemyMovement_C_GetBodyDirectionCurrent::TwoD' has a wrong offset!");
static_assert(offsetof(COMP_EnemyMovement_C_GetBodyDirectionCurrent, BodyDirectionCurrent) == 0x000004, "Member 'COMP_EnemyMovement_C_GetBodyDirectionCurrent::BodyDirectionCurrent' has a wrong offset!");
static_assert(offsetof(COMP_EnemyMovement_C_GetBodyDirectionCurrent, CallFunc_Vector_Normal2D_ReturnValue) == 0x000010, "Member 'COMP_EnemyMovement_C_GetBodyDirectionCurrent::CallFunc_Vector_Normal2D_ReturnValue' has a wrong offset!");

// Function COMP_EnemyMovement.COMP_EnemyMovement_C.GetUnscaledMoveSpeedCurrent
// 0x0004 (0x0004 - 0x0000)
struct COMP_EnemyMovement_C_GetUnscaledMoveSpeedCurrent final
{
public:
	float                                         MoveSpeedCurrent;                                  // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(COMP_EnemyMovement_C_GetUnscaledMoveSpeedCurrent) == 0x000004, "Wrong alignment on COMP_EnemyMovement_C_GetUnscaledMoveSpeedCurrent");
static_assert(sizeof(COMP_EnemyMovement_C_GetUnscaledMoveSpeedCurrent) == 0x000004, "Wrong size on COMP_EnemyMovement_C_GetUnscaledMoveSpeedCurrent");
static_assert(offsetof(COMP_EnemyMovement_C_GetUnscaledMoveSpeedCurrent, MoveSpeedCurrent) == 0x000000, "Member 'COMP_EnemyMovement_C_GetUnscaledMoveSpeedCurrent::MoveSpeedCurrent' has a wrong offset!");

// Function COMP_EnemyMovement.COMP_EnemyMovement_C.SetMoveSpeedCurrent
// 0x0004 (0x0004 - 0x0000)
struct COMP_EnemyMovement_C_SetMoveSpeedCurrent final
{
public:
	float                                         MoveSpeedCurrent;                                  // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(COMP_EnemyMovement_C_SetMoveSpeedCurrent) == 0x000004, "Wrong alignment on COMP_EnemyMovement_C_SetMoveSpeedCurrent");
static_assert(sizeof(COMP_EnemyMovement_C_SetMoveSpeedCurrent) == 0x000004, "Wrong size on COMP_EnemyMovement_C_SetMoveSpeedCurrent");
static_assert(offsetof(COMP_EnemyMovement_C_SetMoveSpeedCurrent, MoveSpeedCurrent) == 0x000000, "Member 'COMP_EnemyMovement_C_SetMoveSpeedCurrent::MoveSpeedCurrent' has a wrong offset!");

// Function COMP_EnemyMovement.COMP_EnemyMovement_C.GetBodyRotateSpeedValueByType
// 0x0008 (0x0008 - 0x0000)
struct COMP_EnemyMovement_C_GetBodyRotateSpeedValueByType final
{
public:
	float                                         BodyRotateSpeed_0;                                 // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_SwitchEnum_CmpSuccess;                      // 0x0004(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(COMP_EnemyMovement_C_GetBodyRotateSpeedValueByType) == 0x000004, "Wrong alignment on COMP_EnemyMovement_C_GetBodyRotateSpeedValueByType");
static_assert(sizeof(COMP_EnemyMovement_C_GetBodyRotateSpeedValueByType) == 0x000008, "Wrong size on COMP_EnemyMovement_C_GetBodyRotateSpeedValueByType");
static_assert(offsetof(COMP_EnemyMovement_C_GetBodyRotateSpeedValueByType, BodyRotateSpeed_0) == 0x000000, "Member 'COMP_EnemyMovement_C_GetBodyRotateSpeedValueByType::BodyRotateSpeed_0' has a wrong offset!");
static_assert(offsetof(COMP_EnemyMovement_C_GetBodyRotateSpeedValueByType, K2Node_SwitchEnum_CmpSuccess) == 0x000004, "Member 'COMP_EnemyMovement_C_GetBodyRotateSpeedValueByType::K2Node_SwitchEnum_CmpSuccess' has a wrong offset!");

// Function COMP_EnemyMovement.COMP_EnemyMovement_C.SetAcceptanceRadius
// 0x000C (0x000C - 0x0000)
struct COMP_EnemyMovement_C_SetAcceptanceRadius final
{
public:
	float                                         AcceptanceRadius;                                  // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_FMax_ReturnValue;                         // 0x0004(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Square_ReturnValue;                       // 0x0008(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(COMP_EnemyMovement_C_SetAcceptanceRadius) == 0x000004, "Wrong alignment on COMP_EnemyMovement_C_SetAcceptanceRadius");
static_assert(sizeof(COMP_EnemyMovement_C_SetAcceptanceRadius) == 0x00000C, "Wrong size on COMP_EnemyMovement_C_SetAcceptanceRadius");
static_assert(offsetof(COMP_EnemyMovement_C_SetAcceptanceRadius, AcceptanceRadius) == 0x000000, "Member 'COMP_EnemyMovement_C_SetAcceptanceRadius::AcceptanceRadius' has a wrong offset!");
static_assert(offsetof(COMP_EnemyMovement_C_SetAcceptanceRadius, CallFunc_FMax_ReturnValue) == 0x000004, "Member 'COMP_EnemyMovement_C_SetAcceptanceRadius::CallFunc_FMax_ReturnValue' has a wrong offset!");
static_assert(offsetof(COMP_EnemyMovement_C_SetAcceptanceRadius, CallFunc_Square_ReturnValue) == 0x000008, "Member 'COMP_EnemyMovement_C_SetAcceptanceRadius::CallFunc_Square_ReturnValue' has a wrong offset!");

// Function COMP_EnemyMovement.COMP_EnemyMovement_C.GetPawn
// 0x0008 (0x0008 - 0x0000)
struct COMP_EnemyMovement_C_GetPawn final
{
public:
	class APAWN_Enemy_C*                          Pawn_0;                                            // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(COMP_EnemyMovement_C_GetPawn) == 0x000008, "Wrong alignment on COMP_EnemyMovement_C_GetPawn");
static_assert(sizeof(COMP_EnemyMovement_C_GetPawn) == 0x000008, "Wrong size on COMP_EnemyMovement_C_GetPawn");
static_assert(offsetof(COMP_EnemyMovement_C_GetPawn, Pawn_0) == 0x000000, "Member 'COMP_EnemyMovement_C_GetPawn::Pawn_0' has a wrong offset!");

// Function COMP_EnemyMovement.COMP_EnemyMovement_C.GetBodyTarget
// 0x0008 (0x0008 - 0x0000)
struct COMP_EnemyMovement_C_GetBodyTarget final
{
public:
	class UOBJ_EnemyTarget_C*                     Target;                                            // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(COMP_EnemyMovement_C_GetBodyTarget) == 0x000008, "Wrong alignment on COMP_EnemyMovement_C_GetBodyTarget");
static_assert(sizeof(COMP_EnemyMovement_C_GetBodyTarget) == 0x000008, "Wrong size on COMP_EnemyMovement_C_GetBodyTarget");
static_assert(offsetof(COMP_EnemyMovement_C_GetBodyTarget, Target) == 0x000000, "Member 'COMP_EnemyMovement_C_GetBodyTarget::Target' has a wrong offset!");

// Function COMP_EnemyMovement.COMP_EnemyMovement_C.UpdateMoveDirection
// 0x0138 (0x0138 - 0x0000)
struct COMP_EnemyMovement_C_UpdateMoveDirection final
{
public:
	float                                         DeltaSeconds;                                      // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ENUM_SpeedType                                MoveTurnType;                                      // 0x0004(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          UseBodyValues;                                     // 0x0005(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_6[0x2];                                        // 0x0006(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                RotationAxis;                                      // 0x0008(0x000C)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         TurnSpeed;                                         // 0x0014(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                TargetDirection;                                   // 0x0018(0x000C)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_GetUnscaledMoveSpeedCurrent_MoveSpeedCurrent; // 0x0024(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UOBJ_EnemyTarget_C*                     CallFunc_GetBodyTarget_Target;                     // 0x0028(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_NearlyEqual_FloatFloat_ReturnValue;       // 0x0030(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0031(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	ENUM_SpeedType                                CallFunc_GetMoveDirection_RotationSpeed_RotationSpeed; // 0x0032(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_NotEqual_ByteByte_ReturnValue;            // 0x0033(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_NotEqual_ByteByte_ReturnValue_1;          // 0x0034(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsOnVerticalPathSection_Result;           // 0x0035(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_EqualEqual_ByteByte_ReturnValue;          // 0x0036(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Not_PreBool_ReturnValue;                  // 0x0037(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_CanRotateMoveDirectionInstantly_Result;   // 0x0038(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_39[0x3];                                       // 0x0039(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                CallFunc_GetActorRightVector_ReturnValue;          // 0x003C(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BooleanOR_ReturnValue;                    // 0x0048(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_49[0x3];                                       // 0x0049(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                CallFunc_GetImmediateMoveDirection_Direction;      // 0x004C(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_CanRotateMoveDirectionInstantly_Result_1; // 0x0058(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_59[0x3];                                       // 0x0059(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_AngleBetweenNormals_ReturnValue;          // 0x005C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_MapRangeClamped_ReturnValue;              // 0x0060(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_ByteByte_ReturnValue_1;        // 0x0064(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_65[0x3];                                       // 0x0065(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_Ease_ReturnValue;                         // 0x0068(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_6C[0x4];                                       // 0x006C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UOBJ_EnemyTarget_C*                     CallFunc_GetBodyTarget_Target_1;                   // 0x0070(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue_1;                    // 0x0078(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_NotEqual_ByteByte_ReturnValue_2;          // 0x0079(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_7A[0x2];                                       // 0x007A(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                CallFunc_GetMoveDirection_Current_Direction;       // 0x007C(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ENUM_SpeedType                                CallFunc_GetBodyRotateSpeed_RotateSpeed;           // 0x0088(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BooleanAND_ReturnValue;                   // 0x0089(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_8A[0x6];                                       // 0x008A(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class UOBJ_EnemyTarget_C*                     CallFunc_GetBodyTarget_Target_2;                   // 0x0090(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Get_Target_Direction_Direction;           // 0x0098(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_RotateDirectionTowards_OutFinished;       // 0x00A4(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_A5[0x3];                                       // 0x00A5(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                CallFunc_RotateDirectionTowards_ReturnValue;       // 0x00A8(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_GetMoveDirection_Current_Direction_1;     // 0x00B4(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Cross_VectorVector_ReturnValue;           // 0x00C0(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsUsingCustomOrFlyingMovement_UsingCustomMovement; // 0x00CC(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_CD[0x3];                                       // 0x00CD(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         Temp_float_Variable;                               // 0x00D0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_GetMoveDirection_Current_Direction_2;     // 0x00D4(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Temp_float_Variable_1;                             // 0x00E0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_NotEqual_VectorVector_ReturnValue;        // 0x00E4(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_E5[0x3];                                       // 0x00E5(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                CallFunc_GetImmediateMoveDirection_Direction_1;    // 0x00E8(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ENUM_SpeedType                                Temp_byte_Variable;                                // 0x00F4(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_F5[0x3];                                       // 0x00F5(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                CallFunc_GetMoveDirection_Current_Direction_3;     // 0x00F8(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ENUM_SpeedType                                CallFunc_GetMoveDirection_RotationSpeed_RotationSpeed_1; // 0x0104(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_NotEqual_VectorVector_ReturnValue_1;      // 0x0105(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_NotEqual_ByteByte_ReturnValue_3;          // 0x0106(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_107[0x1];                                      // 0x0107(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                CallFunc_GetMoveDirection_Current_Direction_4;     // 0x0108(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ENUM_SpeedType                                CallFunc_GetMoveDirection_RotationSpeed_RotationSpeed_2; // 0x0114(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_115[0x3];                                      // 0x0115(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_VSizeSquared_ReturnValue;                 // 0x0118(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_FloatFloat_ReturnValue;              // 0x011C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_11D[0x3];                                      // 0x011D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_GetUnscaledMoveSpeedCurrent_MoveSpeedCurrent_1; // 0x0120(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_NearlyEqual_FloatFloat_ReturnValue_1;     // 0x0124(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BooleanOR_ReturnValue_1;                  // 0x0125(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BooleanAND_ReturnValue_1;                 // 0x0126(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BooleanAND_ReturnValue_2;                 // 0x0127(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BooleanOR_ReturnValue_2;                  // 0x0128(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_129[0x3];                                      // 0x0129(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         K2Node_Select_Default;                             // 0x012C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Multiply_FloatFloat_ReturnValue;          // 0x0130(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(COMP_EnemyMovement_C_UpdateMoveDirection) == 0x000008, "Wrong alignment on COMP_EnemyMovement_C_UpdateMoveDirection");
static_assert(sizeof(COMP_EnemyMovement_C_UpdateMoveDirection) == 0x000138, "Wrong size on COMP_EnemyMovement_C_UpdateMoveDirection");
static_assert(offsetof(COMP_EnemyMovement_C_UpdateMoveDirection, DeltaSeconds) == 0x000000, "Member 'COMP_EnemyMovement_C_UpdateMoveDirection::DeltaSeconds' has a wrong offset!");
static_assert(offsetof(COMP_EnemyMovement_C_UpdateMoveDirection, MoveTurnType) == 0x000004, "Member 'COMP_EnemyMovement_C_UpdateMoveDirection::MoveTurnType' has a wrong offset!");
static_assert(offsetof(COMP_EnemyMovement_C_UpdateMoveDirection, UseBodyValues) == 0x000005, "Member 'COMP_EnemyMovement_C_UpdateMoveDirection::UseBodyValues' has a wrong offset!");
static_assert(offsetof(COMP_EnemyMovement_C_UpdateMoveDirection, RotationAxis) == 0x000008, "Member 'COMP_EnemyMovement_C_UpdateMoveDirection::RotationAxis' has a wrong offset!");
static_assert(offsetof(COMP_EnemyMovement_C_UpdateMoveDirection, TurnSpeed) == 0x000014, "Member 'COMP_EnemyMovement_C_UpdateMoveDirection::TurnSpeed' has a wrong offset!");
static_assert(offsetof(COMP_EnemyMovement_C_UpdateMoveDirection, TargetDirection) == 0x000018, "Member 'COMP_EnemyMovement_C_UpdateMoveDirection::TargetDirection' has a wrong offset!");
static_assert(offsetof(COMP_EnemyMovement_C_UpdateMoveDirection, CallFunc_GetUnscaledMoveSpeedCurrent_MoveSpeedCurrent) == 0x000024, "Member 'COMP_EnemyMovement_C_UpdateMoveDirection::CallFunc_GetUnscaledMoveSpeedCurrent_MoveSpeedCurrent' has a wrong offset!");
static_assert(offsetof(COMP_EnemyMovement_C_UpdateMoveDirection, CallFunc_GetBodyTarget_Target) == 0x000028, "Member 'COMP_EnemyMovement_C_UpdateMoveDirection::CallFunc_GetBodyTarget_Target' has a wrong offset!");
static_assert(offsetof(COMP_EnemyMovement_C_UpdateMoveDirection, CallFunc_NearlyEqual_FloatFloat_ReturnValue) == 0x000030, "Member 'COMP_EnemyMovement_C_UpdateMoveDirection::CallFunc_NearlyEqual_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(COMP_EnemyMovement_C_UpdateMoveDirection, CallFunc_IsValid_ReturnValue) == 0x000031, "Member 'COMP_EnemyMovement_C_UpdateMoveDirection::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(COMP_EnemyMovement_C_UpdateMoveDirection, CallFunc_GetMoveDirection_RotationSpeed_RotationSpeed) == 0x000032, "Member 'COMP_EnemyMovement_C_UpdateMoveDirection::CallFunc_GetMoveDirection_RotationSpeed_RotationSpeed' has a wrong offset!");
static_assert(offsetof(COMP_EnemyMovement_C_UpdateMoveDirection, CallFunc_NotEqual_ByteByte_ReturnValue) == 0x000033, "Member 'COMP_EnemyMovement_C_UpdateMoveDirection::CallFunc_NotEqual_ByteByte_ReturnValue' has a wrong offset!");
static_assert(offsetof(COMP_EnemyMovement_C_UpdateMoveDirection, CallFunc_NotEqual_ByteByte_ReturnValue_1) == 0x000034, "Member 'COMP_EnemyMovement_C_UpdateMoveDirection::CallFunc_NotEqual_ByteByte_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(COMP_EnemyMovement_C_UpdateMoveDirection, CallFunc_IsOnVerticalPathSection_Result) == 0x000035, "Member 'COMP_EnemyMovement_C_UpdateMoveDirection::CallFunc_IsOnVerticalPathSection_Result' has a wrong offset!");
static_assert(offsetof(COMP_EnemyMovement_C_UpdateMoveDirection, CallFunc_EqualEqual_ByteByte_ReturnValue) == 0x000036, "Member 'COMP_EnemyMovement_C_UpdateMoveDirection::CallFunc_EqualEqual_ByteByte_ReturnValue' has a wrong offset!");
static_assert(offsetof(COMP_EnemyMovement_C_UpdateMoveDirection, CallFunc_Not_PreBool_ReturnValue) == 0x000037, "Member 'COMP_EnemyMovement_C_UpdateMoveDirection::CallFunc_Not_PreBool_ReturnValue' has a wrong offset!");
static_assert(offsetof(COMP_EnemyMovement_C_UpdateMoveDirection, CallFunc_CanRotateMoveDirectionInstantly_Result) == 0x000038, "Member 'COMP_EnemyMovement_C_UpdateMoveDirection::CallFunc_CanRotateMoveDirectionInstantly_Result' has a wrong offset!");
static_assert(offsetof(COMP_EnemyMovement_C_UpdateMoveDirection, CallFunc_GetActorRightVector_ReturnValue) == 0x00003C, "Member 'COMP_EnemyMovement_C_UpdateMoveDirection::CallFunc_GetActorRightVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(COMP_EnemyMovement_C_UpdateMoveDirection, CallFunc_BooleanOR_ReturnValue) == 0x000048, "Member 'COMP_EnemyMovement_C_UpdateMoveDirection::CallFunc_BooleanOR_ReturnValue' has a wrong offset!");
static_assert(offsetof(COMP_EnemyMovement_C_UpdateMoveDirection, CallFunc_GetImmediateMoveDirection_Direction) == 0x00004C, "Member 'COMP_EnemyMovement_C_UpdateMoveDirection::CallFunc_GetImmediateMoveDirection_Direction' has a wrong offset!");
static_assert(offsetof(COMP_EnemyMovement_C_UpdateMoveDirection, CallFunc_CanRotateMoveDirectionInstantly_Result_1) == 0x000058, "Member 'COMP_EnemyMovement_C_UpdateMoveDirection::CallFunc_CanRotateMoveDirectionInstantly_Result_1' has a wrong offset!");
static_assert(offsetof(COMP_EnemyMovement_C_UpdateMoveDirection, CallFunc_AngleBetweenNormals_ReturnValue) == 0x00005C, "Member 'COMP_EnemyMovement_C_UpdateMoveDirection::CallFunc_AngleBetweenNormals_ReturnValue' has a wrong offset!");
static_assert(offsetof(COMP_EnemyMovement_C_UpdateMoveDirection, CallFunc_MapRangeClamped_ReturnValue) == 0x000060, "Member 'COMP_EnemyMovement_C_UpdateMoveDirection::CallFunc_MapRangeClamped_ReturnValue' has a wrong offset!");
static_assert(offsetof(COMP_EnemyMovement_C_UpdateMoveDirection, CallFunc_EqualEqual_ByteByte_ReturnValue_1) == 0x000064, "Member 'COMP_EnemyMovement_C_UpdateMoveDirection::CallFunc_EqualEqual_ByteByte_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(COMP_EnemyMovement_C_UpdateMoveDirection, CallFunc_Ease_ReturnValue) == 0x000068, "Member 'COMP_EnemyMovement_C_UpdateMoveDirection::CallFunc_Ease_ReturnValue' has a wrong offset!");
static_assert(offsetof(COMP_EnemyMovement_C_UpdateMoveDirection, CallFunc_GetBodyTarget_Target_1) == 0x000070, "Member 'COMP_EnemyMovement_C_UpdateMoveDirection::CallFunc_GetBodyTarget_Target_1' has a wrong offset!");
static_assert(offsetof(COMP_EnemyMovement_C_UpdateMoveDirection, CallFunc_IsValid_ReturnValue_1) == 0x000078, "Member 'COMP_EnemyMovement_C_UpdateMoveDirection::CallFunc_IsValid_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(COMP_EnemyMovement_C_UpdateMoveDirection, CallFunc_NotEqual_ByteByte_ReturnValue_2) == 0x000079, "Member 'COMP_EnemyMovement_C_UpdateMoveDirection::CallFunc_NotEqual_ByteByte_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(COMP_EnemyMovement_C_UpdateMoveDirection, CallFunc_GetMoveDirection_Current_Direction) == 0x00007C, "Member 'COMP_EnemyMovement_C_UpdateMoveDirection::CallFunc_GetMoveDirection_Current_Direction' has a wrong offset!");
static_assert(offsetof(COMP_EnemyMovement_C_UpdateMoveDirection, CallFunc_GetBodyRotateSpeed_RotateSpeed) == 0x000088, "Member 'COMP_EnemyMovement_C_UpdateMoveDirection::CallFunc_GetBodyRotateSpeed_RotateSpeed' has a wrong offset!");
static_assert(offsetof(COMP_EnemyMovement_C_UpdateMoveDirection, CallFunc_BooleanAND_ReturnValue) == 0x000089, "Member 'COMP_EnemyMovement_C_UpdateMoveDirection::CallFunc_BooleanAND_ReturnValue' has a wrong offset!");
static_assert(offsetof(COMP_EnemyMovement_C_UpdateMoveDirection, CallFunc_GetBodyTarget_Target_2) == 0x000090, "Member 'COMP_EnemyMovement_C_UpdateMoveDirection::CallFunc_GetBodyTarget_Target_2' has a wrong offset!");
static_assert(offsetof(COMP_EnemyMovement_C_UpdateMoveDirection, CallFunc_Get_Target_Direction_Direction) == 0x000098, "Member 'COMP_EnemyMovement_C_UpdateMoveDirection::CallFunc_Get_Target_Direction_Direction' has a wrong offset!");
static_assert(offsetof(COMP_EnemyMovement_C_UpdateMoveDirection, CallFunc_RotateDirectionTowards_OutFinished) == 0x0000A4, "Member 'COMP_EnemyMovement_C_UpdateMoveDirection::CallFunc_RotateDirectionTowards_OutFinished' has a wrong offset!");
static_assert(offsetof(COMP_EnemyMovement_C_UpdateMoveDirection, CallFunc_RotateDirectionTowards_ReturnValue) == 0x0000A8, "Member 'COMP_EnemyMovement_C_UpdateMoveDirection::CallFunc_RotateDirectionTowards_ReturnValue' has a wrong offset!");
static_assert(offsetof(COMP_EnemyMovement_C_UpdateMoveDirection, CallFunc_GetMoveDirection_Current_Direction_1) == 0x0000B4, "Member 'COMP_EnemyMovement_C_UpdateMoveDirection::CallFunc_GetMoveDirection_Current_Direction_1' has a wrong offset!");
static_assert(offsetof(COMP_EnemyMovement_C_UpdateMoveDirection, CallFunc_Cross_VectorVector_ReturnValue) == 0x0000C0, "Member 'COMP_EnemyMovement_C_UpdateMoveDirection::CallFunc_Cross_VectorVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(COMP_EnemyMovement_C_UpdateMoveDirection, CallFunc_IsUsingCustomOrFlyingMovement_UsingCustomMovement) == 0x0000CC, "Member 'COMP_EnemyMovement_C_UpdateMoveDirection::CallFunc_IsUsingCustomOrFlyingMovement_UsingCustomMovement' has a wrong offset!");
static_assert(offsetof(COMP_EnemyMovement_C_UpdateMoveDirection, Temp_float_Variable) == 0x0000D0, "Member 'COMP_EnemyMovement_C_UpdateMoveDirection::Temp_float_Variable' has a wrong offset!");
static_assert(offsetof(COMP_EnemyMovement_C_UpdateMoveDirection, CallFunc_GetMoveDirection_Current_Direction_2) == 0x0000D4, "Member 'COMP_EnemyMovement_C_UpdateMoveDirection::CallFunc_GetMoveDirection_Current_Direction_2' has a wrong offset!");
static_assert(offsetof(COMP_EnemyMovement_C_UpdateMoveDirection, Temp_float_Variable_1) == 0x0000E0, "Member 'COMP_EnemyMovement_C_UpdateMoveDirection::Temp_float_Variable_1' has a wrong offset!");
static_assert(offsetof(COMP_EnemyMovement_C_UpdateMoveDirection, CallFunc_NotEqual_VectorVector_ReturnValue) == 0x0000E4, "Member 'COMP_EnemyMovement_C_UpdateMoveDirection::CallFunc_NotEqual_VectorVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(COMP_EnemyMovement_C_UpdateMoveDirection, CallFunc_GetImmediateMoveDirection_Direction_1) == 0x0000E8, "Member 'COMP_EnemyMovement_C_UpdateMoveDirection::CallFunc_GetImmediateMoveDirection_Direction_1' has a wrong offset!");
static_assert(offsetof(COMP_EnemyMovement_C_UpdateMoveDirection, Temp_byte_Variable) == 0x0000F4, "Member 'COMP_EnemyMovement_C_UpdateMoveDirection::Temp_byte_Variable' has a wrong offset!");
static_assert(offsetof(COMP_EnemyMovement_C_UpdateMoveDirection, CallFunc_GetMoveDirection_Current_Direction_3) == 0x0000F8, "Member 'COMP_EnemyMovement_C_UpdateMoveDirection::CallFunc_GetMoveDirection_Current_Direction_3' has a wrong offset!");
static_assert(offsetof(COMP_EnemyMovement_C_UpdateMoveDirection, CallFunc_GetMoveDirection_RotationSpeed_RotationSpeed_1) == 0x000104, "Member 'COMP_EnemyMovement_C_UpdateMoveDirection::CallFunc_GetMoveDirection_RotationSpeed_RotationSpeed_1' has a wrong offset!");
static_assert(offsetof(COMP_EnemyMovement_C_UpdateMoveDirection, CallFunc_NotEqual_VectorVector_ReturnValue_1) == 0x000105, "Member 'COMP_EnemyMovement_C_UpdateMoveDirection::CallFunc_NotEqual_VectorVector_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(COMP_EnemyMovement_C_UpdateMoveDirection, CallFunc_NotEqual_ByteByte_ReturnValue_3) == 0x000106, "Member 'COMP_EnemyMovement_C_UpdateMoveDirection::CallFunc_NotEqual_ByteByte_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(COMP_EnemyMovement_C_UpdateMoveDirection, CallFunc_GetMoveDirection_Current_Direction_4) == 0x000108, "Member 'COMP_EnemyMovement_C_UpdateMoveDirection::CallFunc_GetMoveDirection_Current_Direction_4' has a wrong offset!");
static_assert(offsetof(COMP_EnemyMovement_C_UpdateMoveDirection, CallFunc_GetMoveDirection_RotationSpeed_RotationSpeed_2) == 0x000114, "Member 'COMP_EnemyMovement_C_UpdateMoveDirection::CallFunc_GetMoveDirection_RotationSpeed_RotationSpeed_2' has a wrong offset!");
static_assert(offsetof(COMP_EnemyMovement_C_UpdateMoveDirection, CallFunc_VSizeSquared_ReturnValue) == 0x000118, "Member 'COMP_EnemyMovement_C_UpdateMoveDirection::CallFunc_VSizeSquared_ReturnValue' has a wrong offset!");
static_assert(offsetof(COMP_EnemyMovement_C_UpdateMoveDirection, CallFunc_Less_FloatFloat_ReturnValue) == 0x00011C, "Member 'COMP_EnemyMovement_C_UpdateMoveDirection::CallFunc_Less_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(COMP_EnemyMovement_C_UpdateMoveDirection, CallFunc_GetUnscaledMoveSpeedCurrent_MoveSpeedCurrent_1) == 0x000120, "Member 'COMP_EnemyMovement_C_UpdateMoveDirection::CallFunc_GetUnscaledMoveSpeedCurrent_MoveSpeedCurrent_1' has a wrong offset!");
static_assert(offsetof(COMP_EnemyMovement_C_UpdateMoveDirection, CallFunc_NearlyEqual_FloatFloat_ReturnValue_1) == 0x000124, "Member 'COMP_EnemyMovement_C_UpdateMoveDirection::CallFunc_NearlyEqual_FloatFloat_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(COMP_EnemyMovement_C_UpdateMoveDirection, CallFunc_BooleanOR_ReturnValue_1) == 0x000125, "Member 'COMP_EnemyMovement_C_UpdateMoveDirection::CallFunc_BooleanOR_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(COMP_EnemyMovement_C_UpdateMoveDirection, CallFunc_BooleanAND_ReturnValue_1) == 0x000126, "Member 'COMP_EnemyMovement_C_UpdateMoveDirection::CallFunc_BooleanAND_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(COMP_EnemyMovement_C_UpdateMoveDirection, CallFunc_BooleanAND_ReturnValue_2) == 0x000127, "Member 'COMP_EnemyMovement_C_UpdateMoveDirection::CallFunc_BooleanAND_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(COMP_EnemyMovement_C_UpdateMoveDirection, CallFunc_BooleanOR_ReturnValue_2) == 0x000128, "Member 'COMP_EnemyMovement_C_UpdateMoveDirection::CallFunc_BooleanOR_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(COMP_EnemyMovement_C_UpdateMoveDirection, K2Node_Select_Default) == 0x00012C, "Member 'COMP_EnemyMovement_C_UpdateMoveDirection::K2Node_Select_Default' has a wrong offset!");
static_assert(offsetof(COMP_EnemyMovement_C_UpdateMoveDirection, CallFunc_Multiply_FloatFloat_ReturnValue) == 0x000130, "Member 'COMP_EnemyMovement_C_UpdateMoveDirection::CallFunc_Multiply_FloatFloat_ReturnValue' has a wrong offset!");

// Function COMP_EnemyMovement.COMP_EnemyMovement_C.UpdateSpeedTransition
// 0x0088 (0x0088 - 0x0000)
struct COMP_EnemyMovement_C_UpdateSpeedTransition final
{
public:
	float                                         DeltaSeconds;                                      // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         AngleToTargetDirection;                            // 0x0004(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         AbsoluteDifference;                                // 0x0008(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         FrameChangeAmount;                                 // 0x000C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         TargetSpeed;                                       // 0x0010(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_GetUnscaledMoveSpeedCurrent_MoveSpeedCurrent; // 0x0014(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ENUM_MoveSpeed                                CallFunc_GetTargetMoveSpeed_MoveSpeed;             // 0x0018(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ENUM_SpeedType                                CallFunc_GetTargetMoveSpeed_ChangeRate;            // 0x0019(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Greater_FloatFloat_ReturnValue;           // 0x001A(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_NotEqual_ByteByte_ReturnValue;            // 0x001B(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BooleanOR_ReturnValue;                    // 0x001C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_1D[0x3];                                       // 0x001D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_GetMoveSpeedTurnMultiplier_Multiplier;    // 0x0020(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ENUM_MoveSpeed                                CallFunc_GetTargetMoveSpeed_MoveSpeed_1;           // 0x0024(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ENUM_SpeedType                                CallFunc_GetTargetMoveSpeed_ChangeRate_1;          // 0x0025(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_26[0x2];                                       // 0x0026(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         Temp_float_Variable;                               // 0x0028(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ENUM_MoveSpeed                                CallFunc_GetTargetMoveSpeed_MoveSpeed_2;           // 0x002C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ENUM_SpeedType                                CallFunc_GetTargetMoveSpeed_ChangeRate_2;          // 0x002D(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_ByteByte_ReturnValue;          // 0x002E(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_2F[0x1];                                       // 0x002F(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         Temp_float_Variable_1;                             // 0x0030(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_NotEqual_FloatFloat_ReturnValue;          // 0x0034(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_35[0x3];                                       // 0x0035(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_GetUnscaledMoveSpeedCurrent_MoveSpeedCurrent_1; // 0x0038(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Add_FloatFloat_ReturnValue;               // 0x003C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Greater_FloatFloat_ReturnValue_1;         // 0x0040(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_EqualEqual_FloatFloat_ReturnValue;        // 0x0041(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_42[0x2];                                       // 0x0042(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_GetUnscaledMoveSpeedCurrent_MoveSpeedCurrent_2; // 0x0044(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_GetUnscaledMoveSpeedCurrent_MoveSpeedCurrent_3; // 0x0048(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_FloatFloat_ReturnValue_1;      // 0x004C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_4D[0x3];                                       // 0x004D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_GetUnscaledMoveSpeedCurrent_MoveSpeedCurrent_4; // 0x0050(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_GetUnscaledMoveSpeedCurrent_MoveSpeedCurrent_5; // 0x0054(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_GetUnscaledMoveSpeedCurrent_MoveSpeedCurrent_6; // 0x0058(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ENUM_MoveSpeed                                CallFunc_GetTargetMoveSpeed_MoveSpeed_3;           // 0x005C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ENUM_SpeedType                                CallFunc_GetTargetMoveSpeed_ChangeRate_3;          // 0x005D(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_5E[0x2];                                       // 0x005E(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_GetMoveSpeedValue_Speed;                  // 0x0060(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Multiply_FloatFloat_ReturnValue;          // 0x0064(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Subtract_FloatFloat_ReturnValue;          // 0x0068(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Abs_ReturnValue;                          // 0x006C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Greater_FloatFloat_ReturnValue_2;         // 0x0070(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	ENUM_SpeedType                                Temp_byte_Variable;                                // 0x0071(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_NearlyEqual_FloatFloat_ReturnValue;       // 0x0072(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Not_PreBool_ReturnValue;                  // 0x0073(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                         CallFunc_Add_FloatFloat_ReturnValue_1;             // 0x0074(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Multiply_FloatFloat_ReturnValue_1;        // 0x0078(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Greater_FloatFloat_ReturnValue_3;         // 0x007C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_7D[0x3];                                       // 0x007D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         K2Node_Select_Default;                             // 0x0080(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Multiply_FloatFloat_ReturnValue_2;        // 0x0084(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(COMP_EnemyMovement_C_UpdateSpeedTransition) == 0x000004, "Wrong alignment on COMP_EnemyMovement_C_UpdateSpeedTransition");
static_assert(sizeof(COMP_EnemyMovement_C_UpdateSpeedTransition) == 0x000088, "Wrong size on COMP_EnemyMovement_C_UpdateSpeedTransition");
static_assert(offsetof(COMP_EnemyMovement_C_UpdateSpeedTransition, DeltaSeconds) == 0x000000, "Member 'COMP_EnemyMovement_C_UpdateSpeedTransition::DeltaSeconds' has a wrong offset!");
static_assert(offsetof(COMP_EnemyMovement_C_UpdateSpeedTransition, AngleToTargetDirection) == 0x000004, "Member 'COMP_EnemyMovement_C_UpdateSpeedTransition::AngleToTargetDirection' has a wrong offset!");
static_assert(offsetof(COMP_EnemyMovement_C_UpdateSpeedTransition, AbsoluteDifference) == 0x000008, "Member 'COMP_EnemyMovement_C_UpdateSpeedTransition::AbsoluteDifference' has a wrong offset!");
static_assert(offsetof(COMP_EnemyMovement_C_UpdateSpeedTransition, FrameChangeAmount) == 0x00000C, "Member 'COMP_EnemyMovement_C_UpdateSpeedTransition::FrameChangeAmount' has a wrong offset!");
static_assert(offsetof(COMP_EnemyMovement_C_UpdateSpeedTransition, TargetSpeed) == 0x000010, "Member 'COMP_EnemyMovement_C_UpdateSpeedTransition::TargetSpeed' has a wrong offset!");
static_assert(offsetof(COMP_EnemyMovement_C_UpdateSpeedTransition, CallFunc_GetUnscaledMoveSpeedCurrent_MoveSpeedCurrent) == 0x000014, "Member 'COMP_EnemyMovement_C_UpdateSpeedTransition::CallFunc_GetUnscaledMoveSpeedCurrent_MoveSpeedCurrent' has a wrong offset!");
static_assert(offsetof(COMP_EnemyMovement_C_UpdateSpeedTransition, CallFunc_GetTargetMoveSpeed_MoveSpeed) == 0x000018, "Member 'COMP_EnemyMovement_C_UpdateSpeedTransition::CallFunc_GetTargetMoveSpeed_MoveSpeed' has a wrong offset!");
static_assert(offsetof(COMP_EnemyMovement_C_UpdateSpeedTransition, CallFunc_GetTargetMoveSpeed_ChangeRate) == 0x000019, "Member 'COMP_EnemyMovement_C_UpdateSpeedTransition::CallFunc_GetTargetMoveSpeed_ChangeRate' has a wrong offset!");
static_assert(offsetof(COMP_EnemyMovement_C_UpdateSpeedTransition, CallFunc_Greater_FloatFloat_ReturnValue) == 0x00001A, "Member 'COMP_EnemyMovement_C_UpdateSpeedTransition::CallFunc_Greater_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(COMP_EnemyMovement_C_UpdateSpeedTransition, CallFunc_NotEqual_ByteByte_ReturnValue) == 0x00001B, "Member 'COMP_EnemyMovement_C_UpdateSpeedTransition::CallFunc_NotEqual_ByteByte_ReturnValue' has a wrong offset!");
static_assert(offsetof(COMP_EnemyMovement_C_UpdateSpeedTransition, CallFunc_BooleanOR_ReturnValue) == 0x00001C, "Member 'COMP_EnemyMovement_C_UpdateSpeedTransition::CallFunc_BooleanOR_ReturnValue' has a wrong offset!");
static_assert(offsetof(COMP_EnemyMovement_C_UpdateSpeedTransition, CallFunc_GetMoveSpeedTurnMultiplier_Multiplier) == 0x000020, "Member 'COMP_EnemyMovement_C_UpdateSpeedTransition::CallFunc_GetMoveSpeedTurnMultiplier_Multiplier' has a wrong offset!");
static_assert(offsetof(COMP_EnemyMovement_C_UpdateSpeedTransition, CallFunc_GetTargetMoveSpeed_MoveSpeed_1) == 0x000024, "Member 'COMP_EnemyMovement_C_UpdateSpeedTransition::CallFunc_GetTargetMoveSpeed_MoveSpeed_1' has a wrong offset!");
static_assert(offsetof(COMP_EnemyMovement_C_UpdateSpeedTransition, CallFunc_GetTargetMoveSpeed_ChangeRate_1) == 0x000025, "Member 'COMP_EnemyMovement_C_UpdateSpeedTransition::CallFunc_GetTargetMoveSpeed_ChangeRate_1' has a wrong offset!");
static_assert(offsetof(COMP_EnemyMovement_C_UpdateSpeedTransition, Temp_float_Variable) == 0x000028, "Member 'COMP_EnemyMovement_C_UpdateSpeedTransition::Temp_float_Variable' has a wrong offset!");
static_assert(offsetof(COMP_EnemyMovement_C_UpdateSpeedTransition, CallFunc_GetTargetMoveSpeed_MoveSpeed_2) == 0x00002C, "Member 'COMP_EnemyMovement_C_UpdateSpeedTransition::CallFunc_GetTargetMoveSpeed_MoveSpeed_2' has a wrong offset!");
static_assert(offsetof(COMP_EnemyMovement_C_UpdateSpeedTransition, CallFunc_GetTargetMoveSpeed_ChangeRate_2) == 0x00002D, "Member 'COMP_EnemyMovement_C_UpdateSpeedTransition::CallFunc_GetTargetMoveSpeed_ChangeRate_2' has a wrong offset!");
static_assert(offsetof(COMP_EnemyMovement_C_UpdateSpeedTransition, CallFunc_EqualEqual_ByteByte_ReturnValue) == 0x00002E, "Member 'COMP_EnemyMovement_C_UpdateSpeedTransition::CallFunc_EqualEqual_ByteByte_ReturnValue' has a wrong offset!");
static_assert(offsetof(COMP_EnemyMovement_C_UpdateSpeedTransition, Temp_float_Variable_1) == 0x000030, "Member 'COMP_EnemyMovement_C_UpdateSpeedTransition::Temp_float_Variable_1' has a wrong offset!");
static_assert(offsetof(COMP_EnemyMovement_C_UpdateSpeedTransition, CallFunc_NotEqual_FloatFloat_ReturnValue) == 0x000034, "Member 'COMP_EnemyMovement_C_UpdateSpeedTransition::CallFunc_NotEqual_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(COMP_EnemyMovement_C_UpdateSpeedTransition, CallFunc_GetUnscaledMoveSpeedCurrent_MoveSpeedCurrent_1) == 0x000038, "Member 'COMP_EnemyMovement_C_UpdateSpeedTransition::CallFunc_GetUnscaledMoveSpeedCurrent_MoveSpeedCurrent_1' has a wrong offset!");
static_assert(offsetof(COMP_EnemyMovement_C_UpdateSpeedTransition, CallFunc_Add_FloatFloat_ReturnValue) == 0x00003C, "Member 'COMP_EnemyMovement_C_UpdateSpeedTransition::CallFunc_Add_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(COMP_EnemyMovement_C_UpdateSpeedTransition, CallFunc_Greater_FloatFloat_ReturnValue_1) == 0x000040, "Member 'COMP_EnemyMovement_C_UpdateSpeedTransition::CallFunc_Greater_FloatFloat_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(COMP_EnemyMovement_C_UpdateSpeedTransition, CallFunc_EqualEqual_FloatFloat_ReturnValue) == 0x000041, "Member 'COMP_EnemyMovement_C_UpdateSpeedTransition::CallFunc_EqualEqual_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(COMP_EnemyMovement_C_UpdateSpeedTransition, CallFunc_GetUnscaledMoveSpeedCurrent_MoveSpeedCurrent_2) == 0x000044, "Member 'COMP_EnemyMovement_C_UpdateSpeedTransition::CallFunc_GetUnscaledMoveSpeedCurrent_MoveSpeedCurrent_2' has a wrong offset!");
static_assert(offsetof(COMP_EnemyMovement_C_UpdateSpeedTransition, CallFunc_GetUnscaledMoveSpeedCurrent_MoveSpeedCurrent_3) == 0x000048, "Member 'COMP_EnemyMovement_C_UpdateSpeedTransition::CallFunc_GetUnscaledMoveSpeedCurrent_MoveSpeedCurrent_3' has a wrong offset!");
static_assert(offsetof(COMP_EnemyMovement_C_UpdateSpeedTransition, CallFunc_EqualEqual_FloatFloat_ReturnValue_1) == 0x00004C, "Member 'COMP_EnemyMovement_C_UpdateSpeedTransition::CallFunc_EqualEqual_FloatFloat_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(COMP_EnemyMovement_C_UpdateSpeedTransition, CallFunc_GetUnscaledMoveSpeedCurrent_MoveSpeedCurrent_4) == 0x000050, "Member 'COMP_EnemyMovement_C_UpdateSpeedTransition::CallFunc_GetUnscaledMoveSpeedCurrent_MoveSpeedCurrent_4' has a wrong offset!");
static_assert(offsetof(COMP_EnemyMovement_C_UpdateSpeedTransition, CallFunc_GetUnscaledMoveSpeedCurrent_MoveSpeedCurrent_5) == 0x000054, "Member 'COMP_EnemyMovement_C_UpdateSpeedTransition::CallFunc_GetUnscaledMoveSpeedCurrent_MoveSpeedCurrent_5' has a wrong offset!");
static_assert(offsetof(COMP_EnemyMovement_C_UpdateSpeedTransition, CallFunc_GetUnscaledMoveSpeedCurrent_MoveSpeedCurrent_6) == 0x000058, "Member 'COMP_EnemyMovement_C_UpdateSpeedTransition::CallFunc_GetUnscaledMoveSpeedCurrent_MoveSpeedCurrent_6' has a wrong offset!");
static_assert(offsetof(COMP_EnemyMovement_C_UpdateSpeedTransition, CallFunc_GetTargetMoveSpeed_MoveSpeed_3) == 0x00005C, "Member 'COMP_EnemyMovement_C_UpdateSpeedTransition::CallFunc_GetTargetMoveSpeed_MoveSpeed_3' has a wrong offset!");
static_assert(offsetof(COMP_EnemyMovement_C_UpdateSpeedTransition, CallFunc_GetTargetMoveSpeed_ChangeRate_3) == 0x00005D, "Member 'COMP_EnemyMovement_C_UpdateSpeedTransition::CallFunc_GetTargetMoveSpeed_ChangeRate_3' has a wrong offset!");
static_assert(offsetof(COMP_EnemyMovement_C_UpdateSpeedTransition, CallFunc_GetMoveSpeedValue_Speed) == 0x000060, "Member 'COMP_EnemyMovement_C_UpdateSpeedTransition::CallFunc_GetMoveSpeedValue_Speed' has a wrong offset!");
static_assert(offsetof(COMP_EnemyMovement_C_UpdateSpeedTransition, CallFunc_Multiply_FloatFloat_ReturnValue) == 0x000064, "Member 'COMP_EnemyMovement_C_UpdateSpeedTransition::CallFunc_Multiply_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(COMP_EnemyMovement_C_UpdateSpeedTransition, CallFunc_Subtract_FloatFloat_ReturnValue) == 0x000068, "Member 'COMP_EnemyMovement_C_UpdateSpeedTransition::CallFunc_Subtract_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(COMP_EnemyMovement_C_UpdateSpeedTransition, CallFunc_Abs_ReturnValue) == 0x00006C, "Member 'COMP_EnemyMovement_C_UpdateSpeedTransition::CallFunc_Abs_ReturnValue' has a wrong offset!");
static_assert(offsetof(COMP_EnemyMovement_C_UpdateSpeedTransition, CallFunc_Greater_FloatFloat_ReturnValue_2) == 0x000070, "Member 'COMP_EnemyMovement_C_UpdateSpeedTransition::CallFunc_Greater_FloatFloat_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(COMP_EnemyMovement_C_UpdateSpeedTransition, Temp_byte_Variable) == 0x000071, "Member 'COMP_EnemyMovement_C_UpdateSpeedTransition::Temp_byte_Variable' has a wrong offset!");
static_assert(offsetof(COMP_EnemyMovement_C_UpdateSpeedTransition, CallFunc_NearlyEqual_FloatFloat_ReturnValue) == 0x000072, "Member 'COMP_EnemyMovement_C_UpdateSpeedTransition::CallFunc_NearlyEqual_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(COMP_EnemyMovement_C_UpdateSpeedTransition, CallFunc_Not_PreBool_ReturnValue) == 0x000073, "Member 'COMP_EnemyMovement_C_UpdateSpeedTransition::CallFunc_Not_PreBool_ReturnValue' has a wrong offset!");
static_assert(offsetof(COMP_EnemyMovement_C_UpdateSpeedTransition, CallFunc_Add_FloatFloat_ReturnValue_1) == 0x000074, "Member 'COMP_EnemyMovement_C_UpdateSpeedTransition::CallFunc_Add_FloatFloat_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(COMP_EnemyMovement_C_UpdateSpeedTransition, CallFunc_Multiply_FloatFloat_ReturnValue_1) == 0x000078, "Member 'COMP_EnemyMovement_C_UpdateSpeedTransition::CallFunc_Multiply_FloatFloat_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(COMP_EnemyMovement_C_UpdateSpeedTransition, CallFunc_Greater_FloatFloat_ReturnValue_3) == 0x00007C, "Member 'COMP_EnemyMovement_C_UpdateSpeedTransition::CallFunc_Greater_FloatFloat_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(COMP_EnemyMovement_C_UpdateSpeedTransition, K2Node_Select_Default) == 0x000080, "Member 'COMP_EnemyMovement_C_UpdateSpeedTransition::K2Node_Select_Default' has a wrong offset!");
static_assert(offsetof(COMP_EnemyMovement_C_UpdateSpeedTransition, CallFunc_Multiply_FloatFloat_ReturnValue_2) == 0x000084, "Member 'COMP_EnemyMovement_C_UpdateSpeedTransition::CallFunc_Multiply_FloatFloat_ReturnValue_2' has a wrong offset!");

// Function COMP_EnemyMovement.COMP_EnemyMovement_C.UpdateBodyForward
// 0x0098 (0x0098 - 0x0000)
struct COMP_EnemyMovement_C_UpdateBodyForward final
{
public:
	float                                         DeltaSeconds;                                      // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                RotationAxis;                                      // 0x0004(0x000C)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_NotEqualExactly_VectorVector_ReturnValue; // 0x0010(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          K2Node_SwitchEnum_CmpSuccess;                      // 0x0011(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Not_PreBool_ReturnValue;                  // 0x0012(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsUsingCustomOrFlyingMovement_UsingCustomMovement; // 0x0013(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BooleanAND_ReturnValue;                   // 0x0014(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_15[0x3];                                       // 0x0015(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class UOBJ_EnemyTarget_C*                     CallFunc_GetBodyTarget_Target;                     // 0x0018(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Get_Target_Direction_Direction;           // 0x0020(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_GetActorForwardVector_ReturnValue;        // 0x002C(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UOBJ_EnemyTarget_C*                     CallFunc_GetBodyTarget_Target_1;                   // 0x0038(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0040(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_41[0x3];                                       // 0x0041(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                CallFunc_GetActorForwardVector_ReturnValue_1;      // 0x0044(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Cross_VectorVector_ReturnValue;           // 0x0050(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_GetActorForwardVector_ReturnValue_2;      // 0x005C(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_GetActorForwardVector_ReturnValue_3;      // 0x0068(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_GetActorForwardVector_ReturnValue_4;      // 0x0074(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_NotEqual_VectorVector_ReturnValue;        // 0x0080(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_81[0x3];                                       // 0x0081(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_GetBodyRotateSpeedValueByType_BodyRotateSpeed; // 0x0084(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_RotateDirectionTowards_OutFinished;       // 0x0088(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_89[0x3];                                       // 0x0089(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                CallFunc_RotateDirectionTowards_ReturnValue;       // 0x008C(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(COMP_EnemyMovement_C_UpdateBodyForward) == 0x000008, "Wrong alignment on COMP_EnemyMovement_C_UpdateBodyForward");
static_assert(sizeof(COMP_EnemyMovement_C_UpdateBodyForward) == 0x000098, "Wrong size on COMP_EnemyMovement_C_UpdateBodyForward");
static_assert(offsetof(COMP_EnemyMovement_C_UpdateBodyForward, DeltaSeconds) == 0x000000, "Member 'COMP_EnemyMovement_C_UpdateBodyForward::DeltaSeconds' has a wrong offset!");
static_assert(offsetof(COMP_EnemyMovement_C_UpdateBodyForward, RotationAxis) == 0x000004, "Member 'COMP_EnemyMovement_C_UpdateBodyForward::RotationAxis' has a wrong offset!");
static_assert(offsetof(COMP_EnemyMovement_C_UpdateBodyForward, CallFunc_NotEqualExactly_VectorVector_ReturnValue) == 0x000010, "Member 'COMP_EnemyMovement_C_UpdateBodyForward::CallFunc_NotEqualExactly_VectorVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(COMP_EnemyMovement_C_UpdateBodyForward, K2Node_SwitchEnum_CmpSuccess) == 0x000011, "Member 'COMP_EnemyMovement_C_UpdateBodyForward::K2Node_SwitchEnum_CmpSuccess' has a wrong offset!");
static_assert(offsetof(COMP_EnemyMovement_C_UpdateBodyForward, CallFunc_Not_PreBool_ReturnValue) == 0x000012, "Member 'COMP_EnemyMovement_C_UpdateBodyForward::CallFunc_Not_PreBool_ReturnValue' has a wrong offset!");
static_assert(offsetof(COMP_EnemyMovement_C_UpdateBodyForward, CallFunc_IsUsingCustomOrFlyingMovement_UsingCustomMovement) == 0x000013, "Member 'COMP_EnemyMovement_C_UpdateBodyForward::CallFunc_IsUsingCustomOrFlyingMovement_UsingCustomMovement' has a wrong offset!");
static_assert(offsetof(COMP_EnemyMovement_C_UpdateBodyForward, CallFunc_BooleanAND_ReturnValue) == 0x000014, "Member 'COMP_EnemyMovement_C_UpdateBodyForward::CallFunc_BooleanAND_ReturnValue' has a wrong offset!");
static_assert(offsetof(COMP_EnemyMovement_C_UpdateBodyForward, CallFunc_GetBodyTarget_Target) == 0x000018, "Member 'COMP_EnemyMovement_C_UpdateBodyForward::CallFunc_GetBodyTarget_Target' has a wrong offset!");
static_assert(offsetof(COMP_EnemyMovement_C_UpdateBodyForward, CallFunc_Get_Target_Direction_Direction) == 0x000020, "Member 'COMP_EnemyMovement_C_UpdateBodyForward::CallFunc_Get_Target_Direction_Direction' has a wrong offset!");
static_assert(offsetof(COMP_EnemyMovement_C_UpdateBodyForward, CallFunc_GetActorForwardVector_ReturnValue) == 0x00002C, "Member 'COMP_EnemyMovement_C_UpdateBodyForward::CallFunc_GetActorForwardVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(COMP_EnemyMovement_C_UpdateBodyForward, CallFunc_GetBodyTarget_Target_1) == 0x000038, "Member 'COMP_EnemyMovement_C_UpdateBodyForward::CallFunc_GetBodyTarget_Target_1' has a wrong offset!");
static_assert(offsetof(COMP_EnemyMovement_C_UpdateBodyForward, CallFunc_IsValid_ReturnValue) == 0x000040, "Member 'COMP_EnemyMovement_C_UpdateBodyForward::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(COMP_EnemyMovement_C_UpdateBodyForward, CallFunc_GetActorForwardVector_ReturnValue_1) == 0x000044, "Member 'COMP_EnemyMovement_C_UpdateBodyForward::CallFunc_GetActorForwardVector_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(COMP_EnemyMovement_C_UpdateBodyForward, CallFunc_Cross_VectorVector_ReturnValue) == 0x000050, "Member 'COMP_EnemyMovement_C_UpdateBodyForward::CallFunc_Cross_VectorVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(COMP_EnemyMovement_C_UpdateBodyForward, CallFunc_GetActorForwardVector_ReturnValue_2) == 0x00005C, "Member 'COMP_EnemyMovement_C_UpdateBodyForward::CallFunc_GetActorForwardVector_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(COMP_EnemyMovement_C_UpdateBodyForward, CallFunc_GetActorForwardVector_ReturnValue_3) == 0x000068, "Member 'COMP_EnemyMovement_C_UpdateBodyForward::CallFunc_GetActorForwardVector_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(COMP_EnemyMovement_C_UpdateBodyForward, CallFunc_GetActorForwardVector_ReturnValue_4) == 0x000074, "Member 'COMP_EnemyMovement_C_UpdateBodyForward::CallFunc_GetActorForwardVector_ReturnValue_4' has a wrong offset!");
static_assert(offsetof(COMP_EnemyMovement_C_UpdateBodyForward, CallFunc_NotEqual_VectorVector_ReturnValue) == 0x000080, "Member 'COMP_EnemyMovement_C_UpdateBodyForward::CallFunc_NotEqual_VectorVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(COMP_EnemyMovement_C_UpdateBodyForward, CallFunc_GetBodyRotateSpeedValueByType_BodyRotateSpeed) == 0x000084, "Member 'COMP_EnemyMovement_C_UpdateBodyForward::CallFunc_GetBodyRotateSpeedValueByType_BodyRotateSpeed' has a wrong offset!");
static_assert(offsetof(COMP_EnemyMovement_C_UpdateBodyForward, CallFunc_RotateDirectionTowards_OutFinished) == 0x000088, "Member 'COMP_EnemyMovement_C_UpdateBodyForward::CallFunc_RotateDirectionTowards_OutFinished' has a wrong offset!");
static_assert(offsetof(COMP_EnemyMovement_C_UpdateBodyForward, CallFunc_RotateDirectionTowards_ReturnValue) == 0x00008C, "Member 'COMP_EnemyMovement_C_UpdateBodyForward::CallFunc_RotateDirectionTowards_ReturnValue' has a wrong offset!");

// Function COMP_EnemyMovement.COMP_EnemyMovement_C.ApplyStandardMovement
// 0x0150 (0x0150 - 0x0000)
struct COMP_EnemyMovement_C_ApplyStandardMovement final
{
public:
	float                                         DeltaSeconds;                                      // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               TargetBodyRotation;                                // 0x0004(0x000C)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FRotator                               SourceBodyRotation;                                // 0x0010(0x000C)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FVector                                MoveVelocity;                                      // 0x001C(0x000C)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_NotEqual_FloatFloat_ReturnValue;          // 0x0028(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_29[0x3];                                       // 0x0029(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                CallFunc_GetActorUpVector_ReturnValue;             // 0x002C(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               CallFunc_MakeRotFromXZ_ReturnValue;                // 0x0038(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FVector                                CallFunc_GetActorUpVector_ReturnValue_1;           // 0x0044(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               CallFunc_MakeRotFromXZ_ReturnValue_1;              // 0x0050(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_NotEqual_ByteByte_ReturnValue;            // 0x005C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_NotEqual_ByteByte_ReturnValue_1;          // 0x005D(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_5E[0x2];                                       // 0x005E(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                CallFunc_Multiply_VectorFloat_ReturnValue;         // 0x0060(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_GetMoveDirection_Current_Direction;       // 0x006C(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Multiply_VectorFloat_ReturnValue_1;       // 0x0078(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FHitResult                             CallFunc_K2_AddActorWorldOffset_SweepHitResult;    // 0x0084(0x0088)(IsPlainOldData, NoDestructor, ContainsInstancedReference)
	bool                                          CallFunc_IsUsingCustomOrFlyingMovement_UsingCustomMovement; // 0x010C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Not_PreBool_ReturnValue;                  // 0x010D(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_10E[0x2];                                      // 0x010E(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	struct FRotator                               CallFunc_MakeRotFromXZ_ReturnValue_2;              // 0x0110(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_K2_SetActorRotation_ReturnValue;          // 0x011C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_NotEqualExactly_VectorVector_ReturnValue; // 0x011D(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_11E[0x2];                                      // 0x011E(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	class UAnimInstance*                          CallFunc_GetAnimInstance_ReturnValue;              // 0x0120(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_GetMoveDirection_Current_Direction_1;     // 0x0128(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_134[0x4];                                      // 0x0134(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TScriptInterface<class IINTERF_ANIM_Character_C> K2Node_DynamicCast_AsINTERF_ANIM_Character;        // 0x0138(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0148(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_SetMovementParameters_Result;             // 0x0149(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(COMP_EnemyMovement_C_ApplyStandardMovement) == 0x000008, "Wrong alignment on COMP_EnemyMovement_C_ApplyStandardMovement");
static_assert(sizeof(COMP_EnemyMovement_C_ApplyStandardMovement) == 0x000150, "Wrong size on COMP_EnemyMovement_C_ApplyStandardMovement");
static_assert(offsetof(COMP_EnemyMovement_C_ApplyStandardMovement, DeltaSeconds) == 0x000000, "Member 'COMP_EnemyMovement_C_ApplyStandardMovement::DeltaSeconds' has a wrong offset!");
static_assert(offsetof(COMP_EnemyMovement_C_ApplyStandardMovement, TargetBodyRotation) == 0x000004, "Member 'COMP_EnemyMovement_C_ApplyStandardMovement::TargetBodyRotation' has a wrong offset!");
static_assert(offsetof(COMP_EnemyMovement_C_ApplyStandardMovement, SourceBodyRotation) == 0x000010, "Member 'COMP_EnemyMovement_C_ApplyStandardMovement::SourceBodyRotation' has a wrong offset!");
static_assert(offsetof(COMP_EnemyMovement_C_ApplyStandardMovement, MoveVelocity) == 0x00001C, "Member 'COMP_EnemyMovement_C_ApplyStandardMovement::MoveVelocity' has a wrong offset!");
static_assert(offsetof(COMP_EnemyMovement_C_ApplyStandardMovement, CallFunc_NotEqual_FloatFloat_ReturnValue) == 0x000028, "Member 'COMP_EnemyMovement_C_ApplyStandardMovement::CallFunc_NotEqual_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(COMP_EnemyMovement_C_ApplyStandardMovement, CallFunc_GetActorUpVector_ReturnValue) == 0x00002C, "Member 'COMP_EnemyMovement_C_ApplyStandardMovement::CallFunc_GetActorUpVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(COMP_EnemyMovement_C_ApplyStandardMovement, CallFunc_MakeRotFromXZ_ReturnValue) == 0x000038, "Member 'COMP_EnemyMovement_C_ApplyStandardMovement::CallFunc_MakeRotFromXZ_ReturnValue' has a wrong offset!");
static_assert(offsetof(COMP_EnemyMovement_C_ApplyStandardMovement, CallFunc_GetActorUpVector_ReturnValue_1) == 0x000044, "Member 'COMP_EnemyMovement_C_ApplyStandardMovement::CallFunc_GetActorUpVector_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(COMP_EnemyMovement_C_ApplyStandardMovement, CallFunc_MakeRotFromXZ_ReturnValue_1) == 0x000050, "Member 'COMP_EnemyMovement_C_ApplyStandardMovement::CallFunc_MakeRotFromXZ_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(COMP_EnemyMovement_C_ApplyStandardMovement, CallFunc_NotEqual_ByteByte_ReturnValue) == 0x00005C, "Member 'COMP_EnemyMovement_C_ApplyStandardMovement::CallFunc_NotEqual_ByteByte_ReturnValue' has a wrong offset!");
static_assert(offsetof(COMP_EnemyMovement_C_ApplyStandardMovement, CallFunc_NotEqual_ByteByte_ReturnValue_1) == 0x00005D, "Member 'COMP_EnemyMovement_C_ApplyStandardMovement::CallFunc_NotEqual_ByteByte_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(COMP_EnemyMovement_C_ApplyStandardMovement, CallFunc_Multiply_VectorFloat_ReturnValue) == 0x000060, "Member 'COMP_EnemyMovement_C_ApplyStandardMovement::CallFunc_Multiply_VectorFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(COMP_EnemyMovement_C_ApplyStandardMovement, CallFunc_GetMoveDirection_Current_Direction) == 0x00006C, "Member 'COMP_EnemyMovement_C_ApplyStandardMovement::CallFunc_GetMoveDirection_Current_Direction' has a wrong offset!");
static_assert(offsetof(COMP_EnemyMovement_C_ApplyStandardMovement, CallFunc_Multiply_VectorFloat_ReturnValue_1) == 0x000078, "Member 'COMP_EnemyMovement_C_ApplyStandardMovement::CallFunc_Multiply_VectorFloat_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(COMP_EnemyMovement_C_ApplyStandardMovement, CallFunc_K2_AddActorWorldOffset_SweepHitResult) == 0x000084, "Member 'COMP_EnemyMovement_C_ApplyStandardMovement::CallFunc_K2_AddActorWorldOffset_SweepHitResult' has a wrong offset!");
static_assert(offsetof(COMP_EnemyMovement_C_ApplyStandardMovement, CallFunc_IsUsingCustomOrFlyingMovement_UsingCustomMovement) == 0x00010C, "Member 'COMP_EnemyMovement_C_ApplyStandardMovement::CallFunc_IsUsingCustomOrFlyingMovement_UsingCustomMovement' has a wrong offset!");
static_assert(offsetof(COMP_EnemyMovement_C_ApplyStandardMovement, CallFunc_Not_PreBool_ReturnValue) == 0x00010D, "Member 'COMP_EnemyMovement_C_ApplyStandardMovement::CallFunc_Not_PreBool_ReturnValue' has a wrong offset!");
static_assert(offsetof(COMP_EnemyMovement_C_ApplyStandardMovement, CallFunc_MakeRotFromXZ_ReturnValue_2) == 0x000110, "Member 'COMP_EnemyMovement_C_ApplyStandardMovement::CallFunc_MakeRotFromXZ_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(COMP_EnemyMovement_C_ApplyStandardMovement, CallFunc_K2_SetActorRotation_ReturnValue) == 0x00011C, "Member 'COMP_EnemyMovement_C_ApplyStandardMovement::CallFunc_K2_SetActorRotation_ReturnValue' has a wrong offset!");
static_assert(offsetof(COMP_EnemyMovement_C_ApplyStandardMovement, CallFunc_NotEqualExactly_VectorVector_ReturnValue) == 0x00011D, "Member 'COMP_EnemyMovement_C_ApplyStandardMovement::CallFunc_NotEqualExactly_VectorVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(COMP_EnemyMovement_C_ApplyStandardMovement, CallFunc_GetAnimInstance_ReturnValue) == 0x000120, "Member 'COMP_EnemyMovement_C_ApplyStandardMovement::CallFunc_GetAnimInstance_ReturnValue' has a wrong offset!");
static_assert(offsetof(COMP_EnemyMovement_C_ApplyStandardMovement, CallFunc_GetMoveDirection_Current_Direction_1) == 0x000128, "Member 'COMP_EnemyMovement_C_ApplyStandardMovement::CallFunc_GetMoveDirection_Current_Direction_1' has a wrong offset!");
static_assert(offsetof(COMP_EnemyMovement_C_ApplyStandardMovement, K2Node_DynamicCast_AsINTERF_ANIM_Character) == 0x000138, "Member 'COMP_EnemyMovement_C_ApplyStandardMovement::K2Node_DynamicCast_AsINTERF_ANIM_Character' has a wrong offset!");
static_assert(offsetof(COMP_EnemyMovement_C_ApplyStandardMovement, K2Node_DynamicCast_bSuccess) == 0x000148, "Member 'COMP_EnemyMovement_C_ApplyStandardMovement::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(COMP_EnemyMovement_C_ApplyStandardMovement, CallFunc_SetMovementParameters_Result) == 0x000149, "Member 'COMP_EnemyMovement_C_ApplyStandardMovement::CallFunc_SetMovementParameters_Result' has a wrong offset!");

// Function COMP_EnemyMovement.COMP_EnemyMovement_C.ApplyClimbingMovement
// 0x0300 (0x0300 - 0x0000)
struct COMP_EnemyMovement_C_ApplyClimbingMovement final
{
public:
	float                                         DeltaSeconds;                                      // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               MeshWorldRotation;                                 // 0x0004(0x000C)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FTransform                             ClimbingFloorTransform;                            // 0x0010(0x0030)(Edit, BlueprintVisible, IsPlainOldData, NoDestructor)
	class UBatchedLevelVoxelization*              BatchedLevelVoxelization;                          // 0x0040(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class ULevelVoxelizationData*                 CurrentLevelVoxelData;                             // 0x0048(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CurrentLevelOffset;                                // 0x0050(0x000C)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         SnapDistance;                                      // 0x005C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CapsuleHalfHeight;                                 // 0x0060(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                DesiredMoveTranslation;                            // 0x0064(0x000C)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         ImmediateMoveDistance;                             // 0x0070(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                ImmediateMoveDirection;                            // 0x0074(0x000C)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                ImmediateMoveVector;                               // 0x0080(0x000C)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsGroundAlignmentEnabled_Result;          // 0x008C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_8D[0x3];                                       // 0x008D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FHitResult                             CallFunc_K2_SetWorldRotation_SweepHitResult;       // 0x0090(0x0088)(IsPlainOldData, NoDestructor, ContainsInstancedReference)
	struct FRotator                               CallFunc_K2_GetComponentRotation_ReturnValue;      // 0x0118(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                         CallFunc_GetScaledCapsuleRadius_ReturnValue;       // 0x0124(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_128[0x8];                                      // 0x0128(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTransform                             CallFunc_GetTransform_ReturnValue;                 // 0x0130(0x0030)(ConstParm, IsPlainOldData, NoDestructor)
	float                                         CallFunc_GetScaledCapsuleHalfHeight_ReturnValue;   // 0x0160(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_K2_GetActorLocation_ReturnValue;          // 0x0164(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakTransform_Location;                  // 0x0170(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               CallFunc_BreakTransform_Rotation;                  // 0x017C(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FVector                                CallFunc_BreakTransform_Scale;                     // 0x0188(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_GetUpVector_ReturnValue;                  // 0x0194(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Multiply_VectorFloat_ReturnValue;         // 0x01A0(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Add_VectorVector_ReturnValue;             // 0x01AC(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1B8[0x8];                                      // 0x01B8(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTransform                             CallFunc_GetVoxelMeshSurfaceTransform_OutSurfaceTransform; // 0x01C0(0x0030)(IsPlainOldData, NoDestructor)
	bool                                          CallFunc_GetVoxelMeshSurfaceTransform_ReturnValue; // 0x01F0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_1F1[0xF];                                      // 0x01F1(0x000F)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTransform                             CallFunc_MakeTransform_ReturnValue;                // 0x0200(0x0030)(IsPlainOldData, NoDestructor)
	struct FHitResult                             CallFunc_K2_SetActorTransform_SweepHitResult;      // 0x0230(0x0088)(IsPlainOldData, NoDestructor, ContainsInstancedReference)
	bool                                          CallFunc_K2_SetActorTransform_ReturnValue;         // 0x02B8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_2B9[0x3];                                      // 0x02B9(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_Conv_IntToFloat_ReturnValue;              // 0x02BC(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Add_FloatFloat_ReturnValue;               // 0x02C0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_GetVectorNormalAndLength_OutLength;       // 0x02C4(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_GetVectorNormalAndLength_ReturnValue;     // 0x02C8(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_GetImmediateMoveLocation_Location;        // 0x02D4(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Subtract_VectorVector_ReturnValue;        // 0x02E0(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Multiply_FloatFloat_ReturnValue;          // 0x02EC(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_FMin_ReturnValue;                         // 0x02F0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Multiply_VectorFloat_ReturnValue_1;       // 0x02F4(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(COMP_EnemyMovement_C_ApplyClimbingMovement) == 0x000010, "Wrong alignment on COMP_EnemyMovement_C_ApplyClimbingMovement");
static_assert(sizeof(COMP_EnemyMovement_C_ApplyClimbingMovement) == 0x000300, "Wrong size on COMP_EnemyMovement_C_ApplyClimbingMovement");
static_assert(offsetof(COMP_EnemyMovement_C_ApplyClimbingMovement, DeltaSeconds) == 0x000000, "Member 'COMP_EnemyMovement_C_ApplyClimbingMovement::DeltaSeconds' has a wrong offset!");
static_assert(offsetof(COMP_EnemyMovement_C_ApplyClimbingMovement, MeshWorldRotation) == 0x000004, "Member 'COMP_EnemyMovement_C_ApplyClimbingMovement::MeshWorldRotation' has a wrong offset!");
static_assert(offsetof(COMP_EnemyMovement_C_ApplyClimbingMovement, ClimbingFloorTransform) == 0x000010, "Member 'COMP_EnemyMovement_C_ApplyClimbingMovement::ClimbingFloorTransform' has a wrong offset!");
static_assert(offsetof(COMP_EnemyMovement_C_ApplyClimbingMovement, BatchedLevelVoxelization) == 0x000040, "Member 'COMP_EnemyMovement_C_ApplyClimbingMovement::BatchedLevelVoxelization' has a wrong offset!");
static_assert(offsetof(COMP_EnemyMovement_C_ApplyClimbingMovement, CurrentLevelVoxelData) == 0x000048, "Member 'COMP_EnemyMovement_C_ApplyClimbingMovement::CurrentLevelVoxelData' has a wrong offset!");
static_assert(offsetof(COMP_EnemyMovement_C_ApplyClimbingMovement, CurrentLevelOffset) == 0x000050, "Member 'COMP_EnemyMovement_C_ApplyClimbingMovement::CurrentLevelOffset' has a wrong offset!");
static_assert(offsetof(COMP_EnemyMovement_C_ApplyClimbingMovement, SnapDistance) == 0x00005C, "Member 'COMP_EnemyMovement_C_ApplyClimbingMovement::SnapDistance' has a wrong offset!");
static_assert(offsetof(COMP_EnemyMovement_C_ApplyClimbingMovement, CapsuleHalfHeight) == 0x000060, "Member 'COMP_EnemyMovement_C_ApplyClimbingMovement::CapsuleHalfHeight' has a wrong offset!");
static_assert(offsetof(COMP_EnemyMovement_C_ApplyClimbingMovement, DesiredMoveTranslation) == 0x000064, "Member 'COMP_EnemyMovement_C_ApplyClimbingMovement::DesiredMoveTranslation' has a wrong offset!");
static_assert(offsetof(COMP_EnemyMovement_C_ApplyClimbingMovement, ImmediateMoveDistance) == 0x000070, "Member 'COMP_EnemyMovement_C_ApplyClimbingMovement::ImmediateMoveDistance' has a wrong offset!");
static_assert(offsetof(COMP_EnemyMovement_C_ApplyClimbingMovement, ImmediateMoveDirection) == 0x000074, "Member 'COMP_EnemyMovement_C_ApplyClimbingMovement::ImmediateMoveDirection' has a wrong offset!");
static_assert(offsetof(COMP_EnemyMovement_C_ApplyClimbingMovement, ImmediateMoveVector) == 0x000080, "Member 'COMP_EnemyMovement_C_ApplyClimbingMovement::ImmediateMoveVector' has a wrong offset!");
static_assert(offsetof(COMP_EnemyMovement_C_ApplyClimbingMovement, CallFunc_IsGroundAlignmentEnabled_Result) == 0x00008C, "Member 'COMP_EnemyMovement_C_ApplyClimbingMovement::CallFunc_IsGroundAlignmentEnabled_Result' has a wrong offset!");
static_assert(offsetof(COMP_EnemyMovement_C_ApplyClimbingMovement, CallFunc_K2_SetWorldRotation_SweepHitResult) == 0x000090, "Member 'COMP_EnemyMovement_C_ApplyClimbingMovement::CallFunc_K2_SetWorldRotation_SweepHitResult' has a wrong offset!");
static_assert(offsetof(COMP_EnemyMovement_C_ApplyClimbingMovement, CallFunc_K2_GetComponentRotation_ReturnValue) == 0x000118, "Member 'COMP_EnemyMovement_C_ApplyClimbingMovement::CallFunc_K2_GetComponentRotation_ReturnValue' has a wrong offset!");
static_assert(offsetof(COMP_EnemyMovement_C_ApplyClimbingMovement, CallFunc_GetScaledCapsuleRadius_ReturnValue) == 0x000124, "Member 'COMP_EnemyMovement_C_ApplyClimbingMovement::CallFunc_GetScaledCapsuleRadius_ReturnValue' has a wrong offset!");
static_assert(offsetof(COMP_EnemyMovement_C_ApplyClimbingMovement, CallFunc_GetTransform_ReturnValue) == 0x000130, "Member 'COMP_EnemyMovement_C_ApplyClimbingMovement::CallFunc_GetTransform_ReturnValue' has a wrong offset!");
static_assert(offsetof(COMP_EnemyMovement_C_ApplyClimbingMovement, CallFunc_GetScaledCapsuleHalfHeight_ReturnValue) == 0x000160, "Member 'COMP_EnemyMovement_C_ApplyClimbingMovement::CallFunc_GetScaledCapsuleHalfHeight_ReturnValue' has a wrong offset!");
static_assert(offsetof(COMP_EnemyMovement_C_ApplyClimbingMovement, CallFunc_K2_GetActorLocation_ReturnValue) == 0x000164, "Member 'COMP_EnemyMovement_C_ApplyClimbingMovement::CallFunc_K2_GetActorLocation_ReturnValue' has a wrong offset!");
static_assert(offsetof(COMP_EnemyMovement_C_ApplyClimbingMovement, CallFunc_BreakTransform_Location) == 0x000170, "Member 'COMP_EnemyMovement_C_ApplyClimbingMovement::CallFunc_BreakTransform_Location' has a wrong offset!");
static_assert(offsetof(COMP_EnemyMovement_C_ApplyClimbingMovement, CallFunc_BreakTransform_Rotation) == 0x00017C, "Member 'COMP_EnemyMovement_C_ApplyClimbingMovement::CallFunc_BreakTransform_Rotation' has a wrong offset!");
static_assert(offsetof(COMP_EnemyMovement_C_ApplyClimbingMovement, CallFunc_BreakTransform_Scale) == 0x000188, "Member 'COMP_EnemyMovement_C_ApplyClimbingMovement::CallFunc_BreakTransform_Scale' has a wrong offset!");
static_assert(offsetof(COMP_EnemyMovement_C_ApplyClimbingMovement, CallFunc_GetUpVector_ReturnValue) == 0x000194, "Member 'COMP_EnemyMovement_C_ApplyClimbingMovement::CallFunc_GetUpVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(COMP_EnemyMovement_C_ApplyClimbingMovement, CallFunc_Multiply_VectorFloat_ReturnValue) == 0x0001A0, "Member 'COMP_EnemyMovement_C_ApplyClimbingMovement::CallFunc_Multiply_VectorFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(COMP_EnemyMovement_C_ApplyClimbingMovement, CallFunc_Add_VectorVector_ReturnValue) == 0x0001AC, "Member 'COMP_EnemyMovement_C_ApplyClimbingMovement::CallFunc_Add_VectorVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(COMP_EnemyMovement_C_ApplyClimbingMovement, CallFunc_GetVoxelMeshSurfaceTransform_OutSurfaceTransform) == 0x0001C0, "Member 'COMP_EnemyMovement_C_ApplyClimbingMovement::CallFunc_GetVoxelMeshSurfaceTransform_OutSurfaceTransform' has a wrong offset!");
static_assert(offsetof(COMP_EnemyMovement_C_ApplyClimbingMovement, CallFunc_GetVoxelMeshSurfaceTransform_ReturnValue) == 0x0001F0, "Member 'COMP_EnemyMovement_C_ApplyClimbingMovement::CallFunc_GetVoxelMeshSurfaceTransform_ReturnValue' has a wrong offset!");
static_assert(offsetof(COMP_EnemyMovement_C_ApplyClimbingMovement, CallFunc_MakeTransform_ReturnValue) == 0x000200, "Member 'COMP_EnemyMovement_C_ApplyClimbingMovement::CallFunc_MakeTransform_ReturnValue' has a wrong offset!");
static_assert(offsetof(COMP_EnemyMovement_C_ApplyClimbingMovement, CallFunc_K2_SetActorTransform_SweepHitResult) == 0x000230, "Member 'COMP_EnemyMovement_C_ApplyClimbingMovement::CallFunc_K2_SetActorTransform_SweepHitResult' has a wrong offset!");
static_assert(offsetof(COMP_EnemyMovement_C_ApplyClimbingMovement, CallFunc_K2_SetActorTransform_ReturnValue) == 0x0002B8, "Member 'COMP_EnemyMovement_C_ApplyClimbingMovement::CallFunc_K2_SetActorTransform_ReturnValue' has a wrong offset!");
static_assert(offsetof(COMP_EnemyMovement_C_ApplyClimbingMovement, CallFunc_Conv_IntToFloat_ReturnValue) == 0x0002BC, "Member 'COMP_EnemyMovement_C_ApplyClimbingMovement::CallFunc_Conv_IntToFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(COMP_EnemyMovement_C_ApplyClimbingMovement, CallFunc_Add_FloatFloat_ReturnValue) == 0x0002C0, "Member 'COMP_EnemyMovement_C_ApplyClimbingMovement::CallFunc_Add_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(COMP_EnemyMovement_C_ApplyClimbingMovement, CallFunc_GetVectorNormalAndLength_OutLength) == 0x0002C4, "Member 'COMP_EnemyMovement_C_ApplyClimbingMovement::CallFunc_GetVectorNormalAndLength_OutLength' has a wrong offset!");
static_assert(offsetof(COMP_EnemyMovement_C_ApplyClimbingMovement, CallFunc_GetVectorNormalAndLength_ReturnValue) == 0x0002C8, "Member 'COMP_EnemyMovement_C_ApplyClimbingMovement::CallFunc_GetVectorNormalAndLength_ReturnValue' has a wrong offset!");
static_assert(offsetof(COMP_EnemyMovement_C_ApplyClimbingMovement, CallFunc_GetImmediateMoveLocation_Location) == 0x0002D4, "Member 'COMP_EnemyMovement_C_ApplyClimbingMovement::CallFunc_GetImmediateMoveLocation_Location' has a wrong offset!");
static_assert(offsetof(COMP_EnemyMovement_C_ApplyClimbingMovement, CallFunc_Subtract_VectorVector_ReturnValue) == 0x0002E0, "Member 'COMP_EnemyMovement_C_ApplyClimbingMovement::CallFunc_Subtract_VectorVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(COMP_EnemyMovement_C_ApplyClimbingMovement, CallFunc_Multiply_FloatFloat_ReturnValue) == 0x0002EC, "Member 'COMP_EnemyMovement_C_ApplyClimbingMovement::CallFunc_Multiply_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(COMP_EnemyMovement_C_ApplyClimbingMovement, CallFunc_FMin_ReturnValue) == 0x0002F0, "Member 'COMP_EnemyMovement_C_ApplyClimbingMovement::CallFunc_FMin_ReturnValue' has a wrong offset!");
static_assert(offsetof(COMP_EnemyMovement_C_ApplyClimbingMovement, CallFunc_Multiply_VectorFloat_ReturnValue_1) == 0x0002F4, "Member 'COMP_EnemyMovement_C_ApplyClimbingMovement::CallFunc_Multiply_VectorFloat_ReturnValue_1' has a wrong offset!");

// Function COMP_EnemyMovement.COMP_EnemyMovement_C.SetIsAlive
// 0x0003 (0x0003 - 0x0000)
struct COMP_EnemyMovement_C_SetIsAlive final
{
public:
	bool                                          IsAlive;                                           // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0001(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Not_PreBool_ReturnValue;                  // 0x0002(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(COMP_EnemyMovement_C_SetIsAlive) == 0x000001, "Wrong alignment on COMP_EnemyMovement_C_SetIsAlive");
static_assert(sizeof(COMP_EnemyMovement_C_SetIsAlive) == 0x000003, "Wrong size on COMP_EnemyMovement_C_SetIsAlive");
static_assert(offsetof(COMP_EnemyMovement_C_SetIsAlive, IsAlive) == 0x000000, "Member 'COMP_EnemyMovement_C_SetIsAlive::IsAlive' has a wrong offset!");
static_assert(offsetof(COMP_EnemyMovement_C_SetIsAlive, CallFunc_IsValid_ReturnValue) == 0x000001, "Member 'COMP_EnemyMovement_C_SetIsAlive::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(COMP_EnemyMovement_C_SetIsAlive, CallFunc_Not_PreBool_ReturnValue) == 0x000002, "Member 'COMP_EnemyMovement_C_SetIsAlive::CallFunc_Not_PreBool_ReturnValue' has a wrong offset!");

// Function COMP_EnemyMovement.COMP_EnemyMovement_C.Can Move Automatically
// 0x0001 (0x0001 - 0x0000)
struct COMP_EnemyMovement_C_Can_Move_Automatically final
{
public:
	bool                                          Result;                                            // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(COMP_EnemyMovement_C_Can_Move_Automatically) == 0x000001, "Wrong alignment on COMP_EnemyMovement_C_Can_Move_Automatically");
static_assert(sizeof(COMP_EnemyMovement_C_Can_Move_Automatically) == 0x000001, "Wrong size on COMP_EnemyMovement_C_Can_Move_Automatically");
static_assert(offsetof(COMP_EnemyMovement_C_Can_Move_Automatically, Result) == 0x000000, "Member 'COMP_EnemyMovement_C_Can_Move_Automatically::Result' has a wrong offset!");

// Function COMP_EnemyMovement.COMP_EnemyMovement_C.HasFullPathToTarget
// 0x0002 (0x0002 - 0x0000)
struct COMP_EnemyMovement_C_HasFullPathToTarget final
{
public:
	bool                                          IsValid;                                           // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          K2Node_SwitchEnum_CmpSuccess;                      // 0x0001(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(COMP_EnemyMovement_C_HasFullPathToTarget) == 0x000001, "Wrong alignment on COMP_EnemyMovement_C_HasFullPathToTarget");
static_assert(sizeof(COMP_EnemyMovement_C_HasFullPathToTarget) == 0x000002, "Wrong size on COMP_EnemyMovement_C_HasFullPathToTarget");
static_assert(offsetof(COMP_EnemyMovement_C_HasFullPathToTarget, IsValid) == 0x000000, "Member 'COMP_EnemyMovement_C_HasFullPathToTarget::IsValid' has a wrong offset!");
static_assert(offsetof(COMP_EnemyMovement_C_HasFullPathToTarget, K2Node_SwitchEnum_CmpSuccess) == 0x000001, "Member 'COMP_EnemyMovement_C_HasFullPathToTarget::K2Node_SwitchEnum_CmpSuccess' has a wrong offset!");

// Function COMP_EnemyMovement.COMP_EnemyMovement_C.GetAngleToTarget
// 0x00B0 (0x00B0 - 0x0000)
struct COMP_EnemyMovement_C_GetAngleToTarget final
{
public:
	ENUM_TargetAssignmentType                     Type;                                              // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         AngleToTarget;                                     // 0x0004(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          IsFlier;                                           // 0x0008(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UOBJ_EnemyTarget_C*                     CallFunc_GetTarget_Target;                         // 0x0010(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0018(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsUsingCustomOrFlyingMovement_UsingCustomMovement; // 0x0019(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Not_PreBool_ReturnValue;                  // 0x001A(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_1B[0x1];                                       // 0x001B(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                CallFunc_GetBodyDirectionCurrent_BodyDirectionCurrent; // 0x001C(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Not_PreBool_ReturnValue_1;                // 0x0028(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Not_PreBool_ReturnValue_2;                // 0x0029(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Not_PreBool_ReturnValue_3;                // 0x002A(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_2B[0x1];                                       // 0x002B(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                CallFunc_GetBodyDirectionCurrent_BodyDirectionCurrent_1; // 0x002C(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BooleanOR_ReturnValue;                    // 0x0038(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Not_PreBool_ReturnValue_4;                // 0x0039(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Not_PreBool_ReturnValue_5;                // 0x003A(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_3B[0x1];                                       // 0x003B(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                CallFunc_GetBodyDirectionCurrent_BodyDirectionCurrent_2; // 0x003C(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UOBJ_EnemyTarget_C*                     CallFunc_GetBodyTarget_Target;                     // 0x0048(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Get_Target_Direction_Direction;           // 0x0050(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_5C[0x4];                                       // 0x005C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UOBJ_EnemyTarget_C*                     CallFunc_GetBodyTarget_Target_1;                   // 0x0060(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_SignedAngleBetweenNormals_ReturnValue;    // 0x0068(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue_1;                    // 0x006C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_6D[0x3];                                       // 0x006D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class UOBJ_EnemyTarget_C*                     CallFunc_GetNavigationTarget_target;               // 0x0070(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue_2;                    // 0x0078(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          K2Node_SwitchEnum_CmpSuccess;                      // 0x0079(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_7A[0x6];                                       // 0x007A(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class UOBJ_EnemyTarget_C*                     CallFunc_GetNavigationTarget_target_1;             // 0x0080(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UOBJ_EnemyTarget_C*                     CallFunc_GetTarget_Target_1;                       // 0x0088(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Get_Target_Direction_Direction_1;         // 0x0090(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Get_Target_Direction_Direction_2;         // 0x009C(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_SignedAngleBetweenNormals_ReturnValue_1;  // 0x00A8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_SignedAngleBetweenNormals_ReturnValue_2;  // 0x00AC(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(COMP_EnemyMovement_C_GetAngleToTarget) == 0x000008, "Wrong alignment on COMP_EnemyMovement_C_GetAngleToTarget");
static_assert(sizeof(COMP_EnemyMovement_C_GetAngleToTarget) == 0x0000B0, "Wrong size on COMP_EnemyMovement_C_GetAngleToTarget");
static_assert(offsetof(COMP_EnemyMovement_C_GetAngleToTarget, Type) == 0x000000, "Member 'COMP_EnemyMovement_C_GetAngleToTarget::Type' has a wrong offset!");
static_assert(offsetof(COMP_EnemyMovement_C_GetAngleToTarget, AngleToTarget) == 0x000004, "Member 'COMP_EnemyMovement_C_GetAngleToTarget::AngleToTarget' has a wrong offset!");
static_assert(offsetof(COMP_EnemyMovement_C_GetAngleToTarget, IsFlier) == 0x000008, "Member 'COMP_EnemyMovement_C_GetAngleToTarget::IsFlier' has a wrong offset!");
static_assert(offsetof(COMP_EnemyMovement_C_GetAngleToTarget, CallFunc_GetTarget_Target) == 0x000010, "Member 'COMP_EnemyMovement_C_GetAngleToTarget::CallFunc_GetTarget_Target' has a wrong offset!");
static_assert(offsetof(COMP_EnemyMovement_C_GetAngleToTarget, CallFunc_IsValid_ReturnValue) == 0x000018, "Member 'COMP_EnemyMovement_C_GetAngleToTarget::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(COMP_EnemyMovement_C_GetAngleToTarget, CallFunc_IsUsingCustomOrFlyingMovement_UsingCustomMovement) == 0x000019, "Member 'COMP_EnemyMovement_C_GetAngleToTarget::CallFunc_IsUsingCustomOrFlyingMovement_UsingCustomMovement' has a wrong offset!");
static_assert(offsetof(COMP_EnemyMovement_C_GetAngleToTarget, CallFunc_Not_PreBool_ReturnValue) == 0x00001A, "Member 'COMP_EnemyMovement_C_GetAngleToTarget::CallFunc_Not_PreBool_ReturnValue' has a wrong offset!");
static_assert(offsetof(COMP_EnemyMovement_C_GetAngleToTarget, CallFunc_GetBodyDirectionCurrent_BodyDirectionCurrent) == 0x00001C, "Member 'COMP_EnemyMovement_C_GetAngleToTarget::CallFunc_GetBodyDirectionCurrent_BodyDirectionCurrent' has a wrong offset!");
static_assert(offsetof(COMP_EnemyMovement_C_GetAngleToTarget, CallFunc_Not_PreBool_ReturnValue_1) == 0x000028, "Member 'COMP_EnemyMovement_C_GetAngleToTarget::CallFunc_Not_PreBool_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(COMP_EnemyMovement_C_GetAngleToTarget, CallFunc_Not_PreBool_ReturnValue_2) == 0x000029, "Member 'COMP_EnemyMovement_C_GetAngleToTarget::CallFunc_Not_PreBool_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(COMP_EnemyMovement_C_GetAngleToTarget, CallFunc_Not_PreBool_ReturnValue_3) == 0x00002A, "Member 'COMP_EnemyMovement_C_GetAngleToTarget::CallFunc_Not_PreBool_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(COMP_EnemyMovement_C_GetAngleToTarget, CallFunc_GetBodyDirectionCurrent_BodyDirectionCurrent_1) == 0x00002C, "Member 'COMP_EnemyMovement_C_GetAngleToTarget::CallFunc_GetBodyDirectionCurrent_BodyDirectionCurrent_1' has a wrong offset!");
static_assert(offsetof(COMP_EnemyMovement_C_GetAngleToTarget, CallFunc_BooleanOR_ReturnValue) == 0x000038, "Member 'COMP_EnemyMovement_C_GetAngleToTarget::CallFunc_BooleanOR_ReturnValue' has a wrong offset!");
static_assert(offsetof(COMP_EnemyMovement_C_GetAngleToTarget, CallFunc_Not_PreBool_ReturnValue_4) == 0x000039, "Member 'COMP_EnemyMovement_C_GetAngleToTarget::CallFunc_Not_PreBool_ReturnValue_4' has a wrong offset!");
static_assert(offsetof(COMP_EnemyMovement_C_GetAngleToTarget, CallFunc_Not_PreBool_ReturnValue_5) == 0x00003A, "Member 'COMP_EnemyMovement_C_GetAngleToTarget::CallFunc_Not_PreBool_ReturnValue_5' has a wrong offset!");
static_assert(offsetof(COMP_EnemyMovement_C_GetAngleToTarget, CallFunc_GetBodyDirectionCurrent_BodyDirectionCurrent_2) == 0x00003C, "Member 'COMP_EnemyMovement_C_GetAngleToTarget::CallFunc_GetBodyDirectionCurrent_BodyDirectionCurrent_2' has a wrong offset!");
static_assert(offsetof(COMP_EnemyMovement_C_GetAngleToTarget, CallFunc_GetBodyTarget_Target) == 0x000048, "Member 'COMP_EnemyMovement_C_GetAngleToTarget::CallFunc_GetBodyTarget_Target' has a wrong offset!");
static_assert(offsetof(COMP_EnemyMovement_C_GetAngleToTarget, CallFunc_Get_Target_Direction_Direction) == 0x000050, "Member 'COMP_EnemyMovement_C_GetAngleToTarget::CallFunc_Get_Target_Direction_Direction' has a wrong offset!");
static_assert(offsetof(COMP_EnemyMovement_C_GetAngleToTarget, CallFunc_GetBodyTarget_Target_1) == 0x000060, "Member 'COMP_EnemyMovement_C_GetAngleToTarget::CallFunc_GetBodyTarget_Target_1' has a wrong offset!");
static_assert(offsetof(COMP_EnemyMovement_C_GetAngleToTarget, CallFunc_SignedAngleBetweenNormals_ReturnValue) == 0x000068, "Member 'COMP_EnemyMovement_C_GetAngleToTarget::CallFunc_SignedAngleBetweenNormals_ReturnValue' has a wrong offset!");
static_assert(offsetof(COMP_EnemyMovement_C_GetAngleToTarget, CallFunc_IsValid_ReturnValue_1) == 0x00006C, "Member 'COMP_EnemyMovement_C_GetAngleToTarget::CallFunc_IsValid_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(COMP_EnemyMovement_C_GetAngleToTarget, CallFunc_GetNavigationTarget_target) == 0x000070, "Member 'COMP_EnemyMovement_C_GetAngleToTarget::CallFunc_GetNavigationTarget_target' has a wrong offset!");
static_assert(offsetof(COMP_EnemyMovement_C_GetAngleToTarget, CallFunc_IsValid_ReturnValue_2) == 0x000078, "Member 'COMP_EnemyMovement_C_GetAngleToTarget::CallFunc_IsValid_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(COMP_EnemyMovement_C_GetAngleToTarget, K2Node_SwitchEnum_CmpSuccess) == 0x000079, "Member 'COMP_EnemyMovement_C_GetAngleToTarget::K2Node_SwitchEnum_CmpSuccess' has a wrong offset!");
static_assert(offsetof(COMP_EnemyMovement_C_GetAngleToTarget, CallFunc_GetNavigationTarget_target_1) == 0x000080, "Member 'COMP_EnemyMovement_C_GetAngleToTarget::CallFunc_GetNavigationTarget_target_1' has a wrong offset!");
static_assert(offsetof(COMP_EnemyMovement_C_GetAngleToTarget, CallFunc_GetTarget_Target_1) == 0x000088, "Member 'COMP_EnemyMovement_C_GetAngleToTarget::CallFunc_GetTarget_Target_1' has a wrong offset!");
static_assert(offsetof(COMP_EnemyMovement_C_GetAngleToTarget, CallFunc_Get_Target_Direction_Direction_1) == 0x000090, "Member 'COMP_EnemyMovement_C_GetAngleToTarget::CallFunc_Get_Target_Direction_Direction_1' has a wrong offset!");
static_assert(offsetof(COMP_EnemyMovement_C_GetAngleToTarget, CallFunc_Get_Target_Direction_Direction_2) == 0x00009C, "Member 'COMP_EnemyMovement_C_GetAngleToTarget::CallFunc_Get_Target_Direction_Direction_2' has a wrong offset!");
static_assert(offsetof(COMP_EnemyMovement_C_GetAngleToTarget, CallFunc_SignedAngleBetweenNormals_ReturnValue_1) == 0x0000A8, "Member 'COMP_EnemyMovement_C_GetAngleToTarget::CallFunc_SignedAngleBetweenNormals_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(COMP_EnemyMovement_C_GetAngleToTarget, CallFunc_SignedAngleBetweenNormals_ReturnValue_2) == 0x0000AC, "Member 'COMP_EnemyMovement_C_GetAngleToTarget::CallFunc_SignedAngleBetweenNormals_ReturnValue_2' has a wrong offset!");

// Function COMP_EnemyMovement.COMP_EnemyMovement_C.GetImmediateMoveLocation
// 0x0044 (0x0044 - 0x0000)
struct COMP_EnemyMovement_C_GetImmediateMoveLocation final
{
public:
	struct FVector                                Location;                                          // 0x0000(0x000C)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_GetVoxelPathLength_ReturnValue;           // 0x000C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FTwoVectors                            CallFunc_GetImmediateWorldPathPoints_OutNormals;   // 0x0010(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FTwoVectors                            CallFunc_GetImmediateWorldPathPoints_ReturnValue;  // 0x0028(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Greater_IntInt_ReturnValue;               // 0x0040(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(COMP_EnemyMovement_C_GetImmediateMoveLocation) == 0x000004, "Wrong alignment on COMP_EnemyMovement_C_GetImmediateMoveLocation");
static_assert(sizeof(COMP_EnemyMovement_C_GetImmediateMoveLocation) == 0x000044, "Wrong size on COMP_EnemyMovement_C_GetImmediateMoveLocation");
static_assert(offsetof(COMP_EnemyMovement_C_GetImmediateMoveLocation, Location) == 0x000000, "Member 'COMP_EnemyMovement_C_GetImmediateMoveLocation::Location' has a wrong offset!");
static_assert(offsetof(COMP_EnemyMovement_C_GetImmediateMoveLocation, CallFunc_GetVoxelPathLength_ReturnValue) == 0x00000C, "Member 'COMP_EnemyMovement_C_GetImmediateMoveLocation::CallFunc_GetVoxelPathLength_ReturnValue' has a wrong offset!");
static_assert(offsetof(COMP_EnemyMovement_C_GetImmediateMoveLocation, CallFunc_GetImmediateWorldPathPoints_OutNormals) == 0x000010, "Member 'COMP_EnemyMovement_C_GetImmediateMoveLocation::CallFunc_GetImmediateWorldPathPoints_OutNormals' has a wrong offset!");
static_assert(offsetof(COMP_EnemyMovement_C_GetImmediateMoveLocation, CallFunc_GetImmediateWorldPathPoints_ReturnValue) == 0x000028, "Member 'COMP_EnemyMovement_C_GetImmediateMoveLocation::CallFunc_GetImmediateWorldPathPoints_ReturnValue' has a wrong offset!");
static_assert(offsetof(COMP_EnemyMovement_C_GetImmediateMoveLocation, CallFunc_Greater_IntInt_ReturnValue) == 0x000040, "Member 'COMP_EnemyMovement_C_GetImmediateMoveLocation::CallFunc_Greater_IntInt_ReturnValue' has a wrong offset!");

// Function COMP_EnemyMovement.COMP_EnemyMovement_C.GetImmediateMoveDirection
// 0x00C8 (0x00C8 - 0x0000)
struct COMP_EnemyMovement_C_GetImmediateMoveDirection final
{
public:
	struct FVector                                Direction;                                         // 0x0000(0x000C)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                MoveVector;                                        // 0x000C(0x000C)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_GetMoveDirection_Current_Direction;       // 0x0018(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Normal_ReturnValue;                       // 0x0024(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_GetMoveDirection_Current_Direction_1;     // 0x0030(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Normal_ReturnValue_1;                     // 0x003C(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_GetShockAgentLocation_Location;           // 0x0048(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector_X;                            // 0x0054(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector_Y;                            // 0x0058(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector_Z;                            // 0x005C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_MakeVector_ReturnValue;                   // 0x0060(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_SwitchEnum_CmpSuccess;                      // 0x006C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_6D[0x3];                                       // 0x006D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                CallFunc_GetShockAgentLocation_Location_1;         // 0x0070(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_NotEqual_VectorVector_ReturnValue;        // 0x007C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_HasFullPathToTarget_IsValid;              // 0x007D(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_NotEqual_VectorVector_ReturnValue_1;      // 0x007E(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_7F[0x1];                                       // 0x007F(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                CallFunc_GetImmediateMoveLocation_Location;        // 0x0080(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector_X_1;                          // 0x008C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector_Y_1;                          // 0x0090(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector_Z_1;                          // 0x0094(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_GetImmediateMoveLocation_Location_1;      // 0x0098(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_MakeVector_ReturnValue_1;                 // 0x00A4(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Subtract_VectorVector_ReturnValue;        // 0x00B0(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Subtract_VectorVector_ReturnValue_1;      // 0x00BC(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(COMP_EnemyMovement_C_GetImmediateMoveDirection) == 0x000004, "Wrong alignment on COMP_EnemyMovement_C_GetImmediateMoveDirection");
static_assert(sizeof(COMP_EnemyMovement_C_GetImmediateMoveDirection) == 0x0000C8, "Wrong size on COMP_EnemyMovement_C_GetImmediateMoveDirection");
static_assert(offsetof(COMP_EnemyMovement_C_GetImmediateMoveDirection, Direction) == 0x000000, "Member 'COMP_EnemyMovement_C_GetImmediateMoveDirection::Direction' has a wrong offset!");
static_assert(offsetof(COMP_EnemyMovement_C_GetImmediateMoveDirection, MoveVector) == 0x00000C, "Member 'COMP_EnemyMovement_C_GetImmediateMoveDirection::MoveVector' has a wrong offset!");
static_assert(offsetof(COMP_EnemyMovement_C_GetImmediateMoveDirection, CallFunc_GetMoveDirection_Current_Direction) == 0x000018, "Member 'COMP_EnemyMovement_C_GetImmediateMoveDirection::CallFunc_GetMoveDirection_Current_Direction' has a wrong offset!");
static_assert(offsetof(COMP_EnemyMovement_C_GetImmediateMoveDirection, CallFunc_Normal_ReturnValue) == 0x000024, "Member 'COMP_EnemyMovement_C_GetImmediateMoveDirection::CallFunc_Normal_ReturnValue' has a wrong offset!");
static_assert(offsetof(COMP_EnemyMovement_C_GetImmediateMoveDirection, CallFunc_GetMoveDirection_Current_Direction_1) == 0x000030, "Member 'COMP_EnemyMovement_C_GetImmediateMoveDirection::CallFunc_GetMoveDirection_Current_Direction_1' has a wrong offset!");
static_assert(offsetof(COMP_EnemyMovement_C_GetImmediateMoveDirection, CallFunc_Normal_ReturnValue_1) == 0x00003C, "Member 'COMP_EnemyMovement_C_GetImmediateMoveDirection::CallFunc_Normal_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(COMP_EnemyMovement_C_GetImmediateMoveDirection, CallFunc_GetShockAgentLocation_Location) == 0x000048, "Member 'COMP_EnemyMovement_C_GetImmediateMoveDirection::CallFunc_GetShockAgentLocation_Location' has a wrong offset!");
static_assert(offsetof(COMP_EnemyMovement_C_GetImmediateMoveDirection, CallFunc_BreakVector_X) == 0x000054, "Member 'COMP_EnemyMovement_C_GetImmediateMoveDirection::CallFunc_BreakVector_X' has a wrong offset!");
static_assert(offsetof(COMP_EnemyMovement_C_GetImmediateMoveDirection, CallFunc_BreakVector_Y) == 0x000058, "Member 'COMP_EnemyMovement_C_GetImmediateMoveDirection::CallFunc_BreakVector_Y' has a wrong offset!");
static_assert(offsetof(COMP_EnemyMovement_C_GetImmediateMoveDirection, CallFunc_BreakVector_Z) == 0x00005C, "Member 'COMP_EnemyMovement_C_GetImmediateMoveDirection::CallFunc_BreakVector_Z' has a wrong offset!");
static_assert(offsetof(COMP_EnemyMovement_C_GetImmediateMoveDirection, CallFunc_MakeVector_ReturnValue) == 0x000060, "Member 'COMP_EnemyMovement_C_GetImmediateMoveDirection::CallFunc_MakeVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(COMP_EnemyMovement_C_GetImmediateMoveDirection, K2Node_SwitchEnum_CmpSuccess) == 0x00006C, "Member 'COMP_EnemyMovement_C_GetImmediateMoveDirection::K2Node_SwitchEnum_CmpSuccess' has a wrong offset!");
static_assert(offsetof(COMP_EnemyMovement_C_GetImmediateMoveDirection, CallFunc_GetShockAgentLocation_Location_1) == 0x000070, "Member 'COMP_EnemyMovement_C_GetImmediateMoveDirection::CallFunc_GetShockAgentLocation_Location_1' has a wrong offset!");
static_assert(offsetof(COMP_EnemyMovement_C_GetImmediateMoveDirection, CallFunc_NotEqual_VectorVector_ReturnValue) == 0x00007C, "Member 'COMP_EnemyMovement_C_GetImmediateMoveDirection::CallFunc_NotEqual_VectorVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(COMP_EnemyMovement_C_GetImmediateMoveDirection, CallFunc_HasFullPathToTarget_IsValid) == 0x00007D, "Member 'COMP_EnemyMovement_C_GetImmediateMoveDirection::CallFunc_HasFullPathToTarget_IsValid' has a wrong offset!");
static_assert(offsetof(COMP_EnemyMovement_C_GetImmediateMoveDirection, CallFunc_NotEqual_VectorVector_ReturnValue_1) == 0x00007E, "Member 'COMP_EnemyMovement_C_GetImmediateMoveDirection::CallFunc_NotEqual_VectorVector_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(COMP_EnemyMovement_C_GetImmediateMoveDirection, CallFunc_GetImmediateMoveLocation_Location) == 0x000080, "Member 'COMP_EnemyMovement_C_GetImmediateMoveDirection::CallFunc_GetImmediateMoveLocation_Location' has a wrong offset!");
static_assert(offsetof(COMP_EnemyMovement_C_GetImmediateMoveDirection, CallFunc_BreakVector_X_1) == 0x00008C, "Member 'COMP_EnemyMovement_C_GetImmediateMoveDirection::CallFunc_BreakVector_X_1' has a wrong offset!");
static_assert(offsetof(COMP_EnemyMovement_C_GetImmediateMoveDirection, CallFunc_BreakVector_Y_1) == 0x000090, "Member 'COMP_EnemyMovement_C_GetImmediateMoveDirection::CallFunc_BreakVector_Y_1' has a wrong offset!");
static_assert(offsetof(COMP_EnemyMovement_C_GetImmediateMoveDirection, CallFunc_BreakVector_Z_1) == 0x000094, "Member 'COMP_EnemyMovement_C_GetImmediateMoveDirection::CallFunc_BreakVector_Z_1' has a wrong offset!");
static_assert(offsetof(COMP_EnemyMovement_C_GetImmediateMoveDirection, CallFunc_GetImmediateMoveLocation_Location_1) == 0x000098, "Member 'COMP_EnemyMovement_C_GetImmediateMoveDirection::CallFunc_GetImmediateMoveLocation_Location_1' has a wrong offset!");
static_assert(offsetof(COMP_EnemyMovement_C_GetImmediateMoveDirection, CallFunc_MakeVector_ReturnValue_1) == 0x0000A4, "Member 'COMP_EnemyMovement_C_GetImmediateMoveDirection::CallFunc_MakeVector_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(COMP_EnemyMovement_C_GetImmediateMoveDirection, CallFunc_Subtract_VectorVector_ReturnValue) == 0x0000B0, "Member 'COMP_EnemyMovement_C_GetImmediateMoveDirection::CallFunc_Subtract_VectorVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(COMP_EnemyMovement_C_GetImmediateMoveDirection, CallFunc_Subtract_VectorVector_ReturnValue_1) == 0x0000BC, "Member 'COMP_EnemyMovement_C_GetImmediateMoveDirection::CallFunc_Subtract_VectorVector_ReturnValue_1' has a wrong offset!");

// Function COMP_EnemyMovement.COMP_EnemyMovement_C.TickEnemyMovement
// 0x0020 (0x0020 - 0x0000)
struct COMP_EnemyMovement_C_TickEnemyMovement final
{
public:
	float                                         DeltaSeconds;                                      // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_ByteByte_ReturnValue;          // 0x0004(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_NotEqual_FloatFloat_ReturnValue;          // 0x0005(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsUsingCustomOrFlyingMovement_UsingCustomMovement; // 0x0006(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Not_PreBool_ReturnValue;                  // 0x0007(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FVector                                CallFunc_GetMoveDirection_Current_Direction;       // 0x0008(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BooleanAND_ReturnValue;                   // 0x0014(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_GreaterEqual_FloatFloat_ReturnValue;      // 0x0015(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_16[0x2];                                       // 0x0016(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_Add_FloatFloat_ReturnValue;               // 0x0018(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_LessEqual_FloatFloat_ReturnValue;         // 0x001C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(COMP_EnemyMovement_C_TickEnemyMovement) == 0x000004, "Wrong alignment on COMP_EnemyMovement_C_TickEnemyMovement");
static_assert(sizeof(COMP_EnemyMovement_C_TickEnemyMovement) == 0x000020, "Wrong size on COMP_EnemyMovement_C_TickEnemyMovement");
static_assert(offsetof(COMP_EnemyMovement_C_TickEnemyMovement, DeltaSeconds) == 0x000000, "Member 'COMP_EnemyMovement_C_TickEnemyMovement::DeltaSeconds' has a wrong offset!");
static_assert(offsetof(COMP_EnemyMovement_C_TickEnemyMovement, CallFunc_EqualEqual_ByteByte_ReturnValue) == 0x000004, "Member 'COMP_EnemyMovement_C_TickEnemyMovement::CallFunc_EqualEqual_ByteByte_ReturnValue' has a wrong offset!");
static_assert(offsetof(COMP_EnemyMovement_C_TickEnemyMovement, CallFunc_NotEqual_FloatFloat_ReturnValue) == 0x000005, "Member 'COMP_EnemyMovement_C_TickEnemyMovement::CallFunc_NotEqual_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(COMP_EnemyMovement_C_TickEnemyMovement, CallFunc_IsUsingCustomOrFlyingMovement_UsingCustomMovement) == 0x000006, "Member 'COMP_EnemyMovement_C_TickEnemyMovement::CallFunc_IsUsingCustomOrFlyingMovement_UsingCustomMovement' has a wrong offset!");
static_assert(offsetof(COMP_EnemyMovement_C_TickEnemyMovement, CallFunc_Not_PreBool_ReturnValue) == 0x000007, "Member 'COMP_EnemyMovement_C_TickEnemyMovement::CallFunc_Not_PreBool_ReturnValue' has a wrong offset!");
static_assert(offsetof(COMP_EnemyMovement_C_TickEnemyMovement, CallFunc_GetMoveDirection_Current_Direction) == 0x000008, "Member 'COMP_EnemyMovement_C_TickEnemyMovement::CallFunc_GetMoveDirection_Current_Direction' has a wrong offset!");
static_assert(offsetof(COMP_EnemyMovement_C_TickEnemyMovement, CallFunc_BooleanAND_ReturnValue) == 0x000014, "Member 'COMP_EnemyMovement_C_TickEnemyMovement::CallFunc_BooleanAND_ReturnValue' has a wrong offset!");
static_assert(offsetof(COMP_EnemyMovement_C_TickEnemyMovement, CallFunc_GreaterEqual_FloatFloat_ReturnValue) == 0x000015, "Member 'COMP_EnemyMovement_C_TickEnemyMovement::CallFunc_GreaterEqual_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(COMP_EnemyMovement_C_TickEnemyMovement, CallFunc_Add_FloatFloat_ReturnValue) == 0x000018, "Member 'COMP_EnemyMovement_C_TickEnemyMovement::CallFunc_Add_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(COMP_EnemyMovement_C_TickEnemyMovement, CallFunc_LessEqual_FloatFloat_ReturnValue) == 0x00001C, "Member 'COMP_EnemyMovement_C_TickEnemyMovement::CallFunc_LessEqual_FloatFloat_ReturnValue' has a wrong offset!");

// Function COMP_EnemyMovement.COMP_EnemyMovement_C.UpdateEnemyMovement
// 0x0020 (0x0020 - 0x0000)
struct COMP_EnemyMovement_C_UpdateEnemyMovement final
{
public:
	float                                         DeltaSeconds;                                      // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_ByteByte_ReturnValue;          // 0x0004(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_GetVoxelPathLength_ReturnValue;           // 0x0008(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_LessEqual_IntInt_ReturnValue;             // 0x000C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          K2Node_SwitchEnum_CmpSuccess;                      // 0x000D(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_HasFullPathToTarget_IsValid;              // 0x000E(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BooleanOR_ReturnValue;                    // 0x000F(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BooleanAND_ReturnValue;                   // 0x0010(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_11[0x3];                                       // 0x0011(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_GetUnscaledMoveSpeedCurrent_MoveSpeedCurrent; // 0x0014(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ENUM_MoveSpeed                                CallFunc_GetTargetMoveSpeed_MoveSpeed;             // 0x0018(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ENUM_SpeedType                                CallFunc_GetTargetMoveSpeed_ChangeRate;            // 0x0019(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Greater_FloatFloat_ReturnValue;           // 0x001A(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_NotEqual_ByteByte_ReturnValue;            // 0x001B(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BooleanOR_ReturnValue_1;                  // 0x001C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BooleanOR_ReturnValue_2;                  // 0x001D(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(COMP_EnemyMovement_C_UpdateEnemyMovement) == 0x000004, "Wrong alignment on COMP_EnemyMovement_C_UpdateEnemyMovement");
static_assert(sizeof(COMP_EnemyMovement_C_UpdateEnemyMovement) == 0x000020, "Wrong size on COMP_EnemyMovement_C_UpdateEnemyMovement");
static_assert(offsetof(COMP_EnemyMovement_C_UpdateEnemyMovement, DeltaSeconds) == 0x000000, "Member 'COMP_EnemyMovement_C_UpdateEnemyMovement::DeltaSeconds' has a wrong offset!");
static_assert(offsetof(COMP_EnemyMovement_C_UpdateEnemyMovement, CallFunc_EqualEqual_ByteByte_ReturnValue) == 0x000004, "Member 'COMP_EnemyMovement_C_UpdateEnemyMovement::CallFunc_EqualEqual_ByteByte_ReturnValue' has a wrong offset!");
static_assert(offsetof(COMP_EnemyMovement_C_UpdateEnemyMovement, CallFunc_GetVoxelPathLength_ReturnValue) == 0x000008, "Member 'COMP_EnemyMovement_C_UpdateEnemyMovement::CallFunc_GetVoxelPathLength_ReturnValue' has a wrong offset!");
static_assert(offsetof(COMP_EnemyMovement_C_UpdateEnemyMovement, CallFunc_LessEqual_IntInt_ReturnValue) == 0x00000C, "Member 'COMP_EnemyMovement_C_UpdateEnemyMovement::CallFunc_LessEqual_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(COMP_EnemyMovement_C_UpdateEnemyMovement, K2Node_SwitchEnum_CmpSuccess) == 0x00000D, "Member 'COMP_EnemyMovement_C_UpdateEnemyMovement::K2Node_SwitchEnum_CmpSuccess' has a wrong offset!");
static_assert(offsetof(COMP_EnemyMovement_C_UpdateEnemyMovement, CallFunc_HasFullPathToTarget_IsValid) == 0x00000E, "Member 'COMP_EnemyMovement_C_UpdateEnemyMovement::CallFunc_HasFullPathToTarget_IsValid' has a wrong offset!");
static_assert(offsetof(COMP_EnemyMovement_C_UpdateEnemyMovement, CallFunc_BooleanOR_ReturnValue) == 0x00000F, "Member 'COMP_EnemyMovement_C_UpdateEnemyMovement::CallFunc_BooleanOR_ReturnValue' has a wrong offset!");
static_assert(offsetof(COMP_EnemyMovement_C_UpdateEnemyMovement, CallFunc_BooleanAND_ReturnValue) == 0x000010, "Member 'COMP_EnemyMovement_C_UpdateEnemyMovement::CallFunc_BooleanAND_ReturnValue' has a wrong offset!");
static_assert(offsetof(COMP_EnemyMovement_C_UpdateEnemyMovement, CallFunc_GetUnscaledMoveSpeedCurrent_MoveSpeedCurrent) == 0x000014, "Member 'COMP_EnemyMovement_C_UpdateEnemyMovement::CallFunc_GetUnscaledMoveSpeedCurrent_MoveSpeedCurrent' has a wrong offset!");
static_assert(offsetof(COMP_EnemyMovement_C_UpdateEnemyMovement, CallFunc_GetTargetMoveSpeed_MoveSpeed) == 0x000018, "Member 'COMP_EnemyMovement_C_UpdateEnemyMovement::CallFunc_GetTargetMoveSpeed_MoveSpeed' has a wrong offset!");
static_assert(offsetof(COMP_EnemyMovement_C_UpdateEnemyMovement, CallFunc_GetTargetMoveSpeed_ChangeRate) == 0x000019, "Member 'COMP_EnemyMovement_C_UpdateEnemyMovement::CallFunc_GetTargetMoveSpeed_ChangeRate' has a wrong offset!");
static_assert(offsetof(COMP_EnemyMovement_C_UpdateEnemyMovement, CallFunc_Greater_FloatFloat_ReturnValue) == 0x00001A, "Member 'COMP_EnemyMovement_C_UpdateEnemyMovement::CallFunc_Greater_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(COMP_EnemyMovement_C_UpdateEnemyMovement, CallFunc_NotEqual_ByteByte_ReturnValue) == 0x00001B, "Member 'COMP_EnemyMovement_C_UpdateEnemyMovement::CallFunc_NotEqual_ByteByte_ReturnValue' has a wrong offset!");
static_assert(offsetof(COMP_EnemyMovement_C_UpdateEnemyMovement, CallFunc_BooleanOR_ReturnValue_1) == 0x00001C, "Member 'COMP_EnemyMovement_C_UpdateEnemyMovement::CallFunc_BooleanOR_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(COMP_EnemyMovement_C_UpdateEnemyMovement, CallFunc_BooleanOR_ReturnValue_2) == 0x00001D, "Member 'COMP_EnemyMovement_C_UpdateEnemyMovement::CallFunc_BooleanOR_ReturnValue_2' has a wrong offset!");

// Function COMP_EnemyMovement.COMP_EnemyMovement_C.InitializeEnemyMovement
// 0x0068 (0x0068 - 0x0000)
struct COMP_EnemyMovement_C_InitializeEnemyMovement final
{
public:
	class UAttribInstance*                        WalkAttrib;                                        // 0x0000(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_GetActorUpVector_ReturnValue;             // 0x0008(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Vector_Up_ReturnValue;                    // 0x0014(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_ByteByte_ReturnValue;          // 0x0020(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_21[0x3];                                       // 0x0021(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	TDelegate<void(float CurrValue, float LastValue)> K2Node_CreateDelegate_OutputDelegate;              // 0x0024(0x0010)(ZeroConstructor, NoDestructor)
	float                                         CallFunc_GetValue_ReturnValue;                     // 0x0034(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UAttribInstance*                        CallFunc_GetOrCreateAttribInstance_ReturnValue;    // 0x0038(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_GetActorForwardVector_ReturnValue;        // 0x0040(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_4C[0x4];                                       // 0x004C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class AActor*                                 CallFunc_GetOwner_ReturnValue;                     // 0x0050(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class APAWN_Enemy_C*                          K2Node_DynamicCast_AsPAWN_Enemy;                   // 0x0058(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0060(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(COMP_EnemyMovement_C_InitializeEnemyMovement) == 0x000008, "Wrong alignment on COMP_EnemyMovement_C_InitializeEnemyMovement");
static_assert(sizeof(COMP_EnemyMovement_C_InitializeEnemyMovement) == 0x000068, "Wrong size on COMP_EnemyMovement_C_InitializeEnemyMovement");
static_assert(offsetof(COMP_EnemyMovement_C_InitializeEnemyMovement, WalkAttrib) == 0x000000, "Member 'COMP_EnemyMovement_C_InitializeEnemyMovement::WalkAttrib' has a wrong offset!");
static_assert(offsetof(COMP_EnemyMovement_C_InitializeEnemyMovement, CallFunc_GetActorUpVector_ReturnValue) == 0x000008, "Member 'COMP_EnemyMovement_C_InitializeEnemyMovement::CallFunc_GetActorUpVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(COMP_EnemyMovement_C_InitializeEnemyMovement, CallFunc_Vector_Up_ReturnValue) == 0x000014, "Member 'COMP_EnemyMovement_C_InitializeEnemyMovement::CallFunc_Vector_Up_ReturnValue' has a wrong offset!");
static_assert(offsetof(COMP_EnemyMovement_C_InitializeEnemyMovement, CallFunc_EqualEqual_ByteByte_ReturnValue) == 0x000020, "Member 'COMP_EnemyMovement_C_InitializeEnemyMovement::CallFunc_EqualEqual_ByteByte_ReturnValue' has a wrong offset!");
static_assert(offsetof(COMP_EnemyMovement_C_InitializeEnemyMovement, K2Node_CreateDelegate_OutputDelegate) == 0x000024, "Member 'COMP_EnemyMovement_C_InitializeEnemyMovement::K2Node_CreateDelegate_OutputDelegate' has a wrong offset!");
static_assert(offsetof(COMP_EnemyMovement_C_InitializeEnemyMovement, CallFunc_GetValue_ReturnValue) == 0x000034, "Member 'COMP_EnemyMovement_C_InitializeEnemyMovement::CallFunc_GetValue_ReturnValue' has a wrong offset!");
static_assert(offsetof(COMP_EnemyMovement_C_InitializeEnemyMovement, CallFunc_GetOrCreateAttribInstance_ReturnValue) == 0x000038, "Member 'COMP_EnemyMovement_C_InitializeEnemyMovement::CallFunc_GetOrCreateAttribInstance_ReturnValue' has a wrong offset!");
static_assert(offsetof(COMP_EnemyMovement_C_InitializeEnemyMovement, CallFunc_GetActorForwardVector_ReturnValue) == 0x000040, "Member 'COMP_EnemyMovement_C_InitializeEnemyMovement::CallFunc_GetActorForwardVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(COMP_EnemyMovement_C_InitializeEnemyMovement, CallFunc_GetOwner_ReturnValue) == 0x000050, "Member 'COMP_EnemyMovement_C_InitializeEnemyMovement::CallFunc_GetOwner_ReturnValue' has a wrong offset!");
static_assert(offsetof(COMP_EnemyMovement_C_InitializeEnemyMovement, K2Node_DynamicCast_AsPAWN_Enemy) == 0x000058, "Member 'COMP_EnemyMovement_C_InitializeEnemyMovement::K2Node_DynamicCast_AsPAWN_Enemy' has a wrong offset!");
static_assert(offsetof(COMP_EnemyMovement_C_InitializeEnemyMovement, K2Node_DynamicCast_bSuccess) == 0x000060, "Member 'COMP_EnemyMovement_C_InitializeEnemyMovement::K2Node_DynamicCast_bSuccess' has a wrong offset!");

// Function COMP_EnemyMovement.COMP_EnemyMovement_C.EVENT_OnWalkScaleAttribChanged
// 0x0008 (0x0008 - 0x0000)
struct COMP_EnemyMovement_C_EVENT_OnWalkScaleAttribChanged final
{
public:
	float                                         CurrValue;                                         // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         LastValue;                                         // 0x0004(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(COMP_EnemyMovement_C_EVENT_OnWalkScaleAttribChanged) == 0x000004, "Wrong alignment on COMP_EnemyMovement_C_EVENT_OnWalkScaleAttribChanged");
static_assert(sizeof(COMP_EnemyMovement_C_EVENT_OnWalkScaleAttribChanged) == 0x000008, "Wrong size on COMP_EnemyMovement_C_EVENT_OnWalkScaleAttribChanged");
static_assert(offsetof(COMP_EnemyMovement_C_EVENT_OnWalkScaleAttribChanged, CurrValue) == 0x000000, "Member 'COMP_EnemyMovement_C_EVENT_OnWalkScaleAttribChanged::CurrValue' has a wrong offset!");
static_assert(offsetof(COMP_EnemyMovement_C_EVENT_OnWalkScaleAttribChanged, LastValue) == 0x000004, "Member 'COMP_EnemyMovement_C_EVENT_OnWalkScaleAttribChanged::LastValue' has a wrong offset!");

// Function COMP_EnemyMovement.COMP_EnemyMovement_C.ResetBodyDirection
// 0x000C (0x000C - 0x0000)
struct COMP_EnemyMovement_C_ResetBodyDirection final
{
public:
	struct FVector                                CallFunc_GetActorForwardVector_ReturnValue;        // 0x0000(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(COMP_EnemyMovement_C_ResetBodyDirection) == 0x000004, "Wrong alignment on COMP_EnemyMovement_C_ResetBodyDirection");
static_assert(sizeof(COMP_EnemyMovement_C_ResetBodyDirection) == 0x00000C, "Wrong size on COMP_EnemyMovement_C_ResetBodyDirection");
static_assert(offsetof(COMP_EnemyMovement_C_ResetBodyDirection, CallFunc_GetActorForwardVector_ReturnValue) == 0x000000, "Member 'COMP_EnemyMovement_C_ResetBodyDirection::CallFunc_GetActorForwardVector_ReturnValue' has a wrong offset!");

// Function COMP_EnemyMovement.COMP_EnemyMovement_C.InitializeClimberTransform
// 0x0238 (0x0238 - 0x0000)
struct COMP_EnemyMovement_C_InitializeClimberTransform final
{
public:
	struct FVector                                ImpactPoint;                                       // 0x0000(0x000C)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         ClosestDistance;                                   // 0x000C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         TraceDistance;                                     // 0x0010(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_GetActorUpVector_ReturnValue;             // 0x0014(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_GetScaledCapsuleHalfHeight_ReturnValue;   // 0x0020(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Multiply_FloatFloat_ReturnValue;          // 0x0024(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Add_FloatFloat_ReturnValue;               // 0x0028(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_GetActorUpVector_ReturnValue_1;           // 0x002C(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_K2_GetActorLocation_ReturnValue;          // 0x0038(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Multiply_VectorFloat_ReturnValue;         // 0x0044(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Multiply_VectorFloat_ReturnValue_1;       // 0x0050(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Add_VectorVector_ReturnValue;             // 0x005C(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TArray<class AActor*>                         Temp_object_Variable;                              // 0x0068(0x0010)(ConstParm, ReferenceParm)
	struct FHitResult                             CallFunc_K2_SetActorLocation_SweepHitResult;       // 0x0078(0x0088)(IsPlainOldData, NoDestructor, ContainsInstancedReference)
	bool                                          CallFunc_K2_SetActorLocation_ReturnValue;          // 0x0100(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_NotEqual_VectorVector_ReturnValue;        // 0x0101(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_102[0x2];                                      // 0x0102(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	struct FRotator                               CallFunc_MakeRotFromZ_ReturnValue;                 // 0x0104(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_K2_SetActorRotation_ReturnValue;          // 0x0110(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_111[0x3];                                      // 0x0111(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                CallFunc_Multiply_VectorFloat_ReturnValue_2;       // 0x0114(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Add_VectorVector_ReturnValue_1;           // 0x0120(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FHitResult                             CallFunc_LineTraceSingle_OutHit;                   // 0x012C(0x0088)(IsPlainOldData, NoDestructor, ContainsInstancedReference)
	bool                                          CallFunc_LineTraceSingle_ReturnValue;              // 0x01B4(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BreakHitResult_bBlockingHit;              // 0x01B5(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BreakHitResult_bInitialOverlap;           // 0x01B6(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_1B7[0x1];                                      // 0x01B7(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_BreakHitResult_Time;                      // 0x01B8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakHitResult_Distance;                  // 0x01BC(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakHitResult_Location;                  // 0x01C0(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakHitResult_ImpactPoint;               // 0x01CC(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakHitResult_Normal;                    // 0x01D8(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakHitResult_ImpactNormal;              // 0x01E4(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UPhysicalMaterial*                      CallFunc_BreakHitResult_PhysMat;                   // 0x01F0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 CallFunc_BreakHitResult_HitActor;                  // 0x01F8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UPrimitiveComponent*                    CallFunc_BreakHitResult_HitComponent;              // 0x0200(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FName                                   CallFunc_BreakHitResult_HitBoneName;               // 0x0208(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_BreakHitResult_HitItem;                   // 0x0210(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_BreakHitResult_ElementIndex;              // 0x0214(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_BreakHitResult_FaceIndex;                 // 0x0218(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakHitResult_TraceStart;                // 0x021C(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakHitResult_TraceEnd;                  // 0x0228(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(COMP_EnemyMovement_C_InitializeClimberTransform) == 0x000008, "Wrong alignment on COMP_EnemyMovement_C_InitializeClimberTransform");
static_assert(sizeof(COMP_EnemyMovement_C_InitializeClimberTransform) == 0x000238, "Wrong size on COMP_EnemyMovement_C_InitializeClimberTransform");
static_assert(offsetof(COMP_EnemyMovement_C_InitializeClimberTransform, ImpactPoint) == 0x000000, "Member 'COMP_EnemyMovement_C_InitializeClimberTransform::ImpactPoint' has a wrong offset!");
static_assert(offsetof(COMP_EnemyMovement_C_InitializeClimberTransform, ClosestDistance) == 0x00000C, "Member 'COMP_EnemyMovement_C_InitializeClimberTransform::ClosestDistance' has a wrong offset!");
static_assert(offsetof(COMP_EnemyMovement_C_InitializeClimberTransform, TraceDistance) == 0x000010, "Member 'COMP_EnemyMovement_C_InitializeClimberTransform::TraceDistance' has a wrong offset!");
static_assert(offsetof(COMP_EnemyMovement_C_InitializeClimberTransform, CallFunc_GetActorUpVector_ReturnValue) == 0x000014, "Member 'COMP_EnemyMovement_C_InitializeClimberTransform::CallFunc_GetActorUpVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(COMP_EnemyMovement_C_InitializeClimberTransform, CallFunc_GetScaledCapsuleHalfHeight_ReturnValue) == 0x000020, "Member 'COMP_EnemyMovement_C_InitializeClimberTransform::CallFunc_GetScaledCapsuleHalfHeight_ReturnValue' has a wrong offset!");
static_assert(offsetof(COMP_EnemyMovement_C_InitializeClimberTransform, CallFunc_Multiply_FloatFloat_ReturnValue) == 0x000024, "Member 'COMP_EnemyMovement_C_InitializeClimberTransform::CallFunc_Multiply_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(COMP_EnemyMovement_C_InitializeClimberTransform, CallFunc_Add_FloatFloat_ReturnValue) == 0x000028, "Member 'COMP_EnemyMovement_C_InitializeClimberTransform::CallFunc_Add_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(COMP_EnemyMovement_C_InitializeClimberTransform, CallFunc_GetActorUpVector_ReturnValue_1) == 0x00002C, "Member 'COMP_EnemyMovement_C_InitializeClimberTransform::CallFunc_GetActorUpVector_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(COMP_EnemyMovement_C_InitializeClimberTransform, CallFunc_K2_GetActorLocation_ReturnValue) == 0x000038, "Member 'COMP_EnemyMovement_C_InitializeClimberTransform::CallFunc_K2_GetActorLocation_ReturnValue' has a wrong offset!");
static_assert(offsetof(COMP_EnemyMovement_C_InitializeClimberTransform, CallFunc_Multiply_VectorFloat_ReturnValue) == 0x000044, "Member 'COMP_EnemyMovement_C_InitializeClimberTransform::CallFunc_Multiply_VectorFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(COMP_EnemyMovement_C_InitializeClimberTransform, CallFunc_Multiply_VectorFloat_ReturnValue_1) == 0x000050, "Member 'COMP_EnemyMovement_C_InitializeClimberTransform::CallFunc_Multiply_VectorFloat_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(COMP_EnemyMovement_C_InitializeClimberTransform, CallFunc_Add_VectorVector_ReturnValue) == 0x00005C, "Member 'COMP_EnemyMovement_C_InitializeClimberTransform::CallFunc_Add_VectorVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(COMP_EnemyMovement_C_InitializeClimberTransform, Temp_object_Variable) == 0x000068, "Member 'COMP_EnemyMovement_C_InitializeClimberTransform::Temp_object_Variable' has a wrong offset!");
static_assert(offsetof(COMP_EnemyMovement_C_InitializeClimberTransform, CallFunc_K2_SetActorLocation_SweepHitResult) == 0x000078, "Member 'COMP_EnemyMovement_C_InitializeClimberTransform::CallFunc_K2_SetActorLocation_SweepHitResult' has a wrong offset!");
static_assert(offsetof(COMP_EnemyMovement_C_InitializeClimberTransform, CallFunc_K2_SetActorLocation_ReturnValue) == 0x000100, "Member 'COMP_EnemyMovement_C_InitializeClimberTransform::CallFunc_K2_SetActorLocation_ReturnValue' has a wrong offset!");
static_assert(offsetof(COMP_EnemyMovement_C_InitializeClimberTransform, CallFunc_NotEqual_VectorVector_ReturnValue) == 0x000101, "Member 'COMP_EnemyMovement_C_InitializeClimberTransform::CallFunc_NotEqual_VectorVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(COMP_EnemyMovement_C_InitializeClimberTransform, CallFunc_MakeRotFromZ_ReturnValue) == 0x000104, "Member 'COMP_EnemyMovement_C_InitializeClimberTransform::CallFunc_MakeRotFromZ_ReturnValue' has a wrong offset!");
static_assert(offsetof(COMP_EnemyMovement_C_InitializeClimberTransform, CallFunc_K2_SetActorRotation_ReturnValue) == 0x000110, "Member 'COMP_EnemyMovement_C_InitializeClimberTransform::CallFunc_K2_SetActorRotation_ReturnValue' has a wrong offset!");
static_assert(offsetof(COMP_EnemyMovement_C_InitializeClimberTransform, CallFunc_Multiply_VectorFloat_ReturnValue_2) == 0x000114, "Member 'COMP_EnemyMovement_C_InitializeClimberTransform::CallFunc_Multiply_VectorFloat_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(COMP_EnemyMovement_C_InitializeClimberTransform, CallFunc_Add_VectorVector_ReturnValue_1) == 0x000120, "Member 'COMP_EnemyMovement_C_InitializeClimberTransform::CallFunc_Add_VectorVector_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(COMP_EnemyMovement_C_InitializeClimberTransform, CallFunc_LineTraceSingle_OutHit) == 0x00012C, "Member 'COMP_EnemyMovement_C_InitializeClimberTransform::CallFunc_LineTraceSingle_OutHit' has a wrong offset!");
static_assert(offsetof(COMP_EnemyMovement_C_InitializeClimberTransform, CallFunc_LineTraceSingle_ReturnValue) == 0x0001B4, "Member 'COMP_EnemyMovement_C_InitializeClimberTransform::CallFunc_LineTraceSingle_ReturnValue' has a wrong offset!");
static_assert(offsetof(COMP_EnemyMovement_C_InitializeClimberTransform, CallFunc_BreakHitResult_bBlockingHit) == 0x0001B5, "Member 'COMP_EnemyMovement_C_InitializeClimberTransform::CallFunc_BreakHitResult_bBlockingHit' has a wrong offset!");
static_assert(offsetof(COMP_EnemyMovement_C_InitializeClimberTransform, CallFunc_BreakHitResult_bInitialOverlap) == 0x0001B6, "Member 'COMP_EnemyMovement_C_InitializeClimberTransform::CallFunc_BreakHitResult_bInitialOverlap' has a wrong offset!");
static_assert(offsetof(COMP_EnemyMovement_C_InitializeClimberTransform, CallFunc_BreakHitResult_Time) == 0x0001B8, "Member 'COMP_EnemyMovement_C_InitializeClimberTransform::CallFunc_BreakHitResult_Time' has a wrong offset!");
static_assert(offsetof(COMP_EnemyMovement_C_InitializeClimberTransform, CallFunc_BreakHitResult_Distance) == 0x0001BC, "Member 'COMP_EnemyMovement_C_InitializeClimberTransform::CallFunc_BreakHitResult_Distance' has a wrong offset!");
static_assert(offsetof(COMP_EnemyMovement_C_InitializeClimberTransform, CallFunc_BreakHitResult_Location) == 0x0001C0, "Member 'COMP_EnemyMovement_C_InitializeClimberTransform::CallFunc_BreakHitResult_Location' has a wrong offset!");
static_assert(offsetof(COMP_EnemyMovement_C_InitializeClimberTransform, CallFunc_BreakHitResult_ImpactPoint) == 0x0001CC, "Member 'COMP_EnemyMovement_C_InitializeClimberTransform::CallFunc_BreakHitResult_ImpactPoint' has a wrong offset!");
static_assert(offsetof(COMP_EnemyMovement_C_InitializeClimberTransform, CallFunc_BreakHitResult_Normal) == 0x0001D8, "Member 'COMP_EnemyMovement_C_InitializeClimberTransform::CallFunc_BreakHitResult_Normal' has a wrong offset!");
static_assert(offsetof(COMP_EnemyMovement_C_InitializeClimberTransform, CallFunc_BreakHitResult_ImpactNormal) == 0x0001E4, "Member 'COMP_EnemyMovement_C_InitializeClimberTransform::CallFunc_BreakHitResult_ImpactNormal' has a wrong offset!");
static_assert(offsetof(COMP_EnemyMovement_C_InitializeClimberTransform, CallFunc_BreakHitResult_PhysMat) == 0x0001F0, "Member 'COMP_EnemyMovement_C_InitializeClimberTransform::CallFunc_BreakHitResult_PhysMat' has a wrong offset!");
static_assert(offsetof(COMP_EnemyMovement_C_InitializeClimberTransform, CallFunc_BreakHitResult_HitActor) == 0x0001F8, "Member 'COMP_EnemyMovement_C_InitializeClimberTransform::CallFunc_BreakHitResult_HitActor' has a wrong offset!");
static_assert(offsetof(COMP_EnemyMovement_C_InitializeClimberTransform, CallFunc_BreakHitResult_HitComponent) == 0x000200, "Member 'COMP_EnemyMovement_C_InitializeClimberTransform::CallFunc_BreakHitResult_HitComponent' has a wrong offset!");
static_assert(offsetof(COMP_EnemyMovement_C_InitializeClimberTransform, CallFunc_BreakHitResult_HitBoneName) == 0x000208, "Member 'COMP_EnemyMovement_C_InitializeClimberTransform::CallFunc_BreakHitResult_HitBoneName' has a wrong offset!");
static_assert(offsetof(COMP_EnemyMovement_C_InitializeClimberTransform, CallFunc_BreakHitResult_HitItem) == 0x000210, "Member 'COMP_EnemyMovement_C_InitializeClimberTransform::CallFunc_BreakHitResult_HitItem' has a wrong offset!");
static_assert(offsetof(COMP_EnemyMovement_C_InitializeClimberTransform, CallFunc_BreakHitResult_ElementIndex) == 0x000214, "Member 'COMP_EnemyMovement_C_InitializeClimberTransform::CallFunc_BreakHitResult_ElementIndex' has a wrong offset!");
static_assert(offsetof(COMP_EnemyMovement_C_InitializeClimberTransform, CallFunc_BreakHitResult_FaceIndex) == 0x000218, "Member 'COMP_EnemyMovement_C_InitializeClimberTransform::CallFunc_BreakHitResult_FaceIndex' has a wrong offset!");
static_assert(offsetof(COMP_EnemyMovement_C_InitializeClimberTransform, CallFunc_BreakHitResult_TraceStart) == 0x00021C, "Member 'COMP_EnemyMovement_C_InitializeClimberTransform::CallFunc_BreakHitResult_TraceStart' has a wrong offset!");
static_assert(offsetof(COMP_EnemyMovement_C_InitializeClimberTransform, CallFunc_BreakHitResult_TraceEnd) == 0x000228, "Member 'COMP_EnemyMovement_C_InitializeClimberTransform::CallFunc_BreakHitResult_TraceEnd' has a wrong offset!");

// Function COMP_EnemyMovement.COMP_EnemyMovement_C.SetMovementTickInterval
// 0x0004 (0x0004 - 0x0000)
struct COMP_EnemyMovement_C_SetMovementTickInterval final
{
public:
	float                                         NewInterval;                                       // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(COMP_EnemyMovement_C_SetMovementTickInterval) == 0x000004, "Wrong alignment on COMP_EnemyMovement_C_SetMovementTickInterval");
static_assert(sizeof(COMP_EnemyMovement_C_SetMovementTickInterval) == 0x000004, "Wrong size on COMP_EnemyMovement_C_SetMovementTickInterval");
static_assert(offsetof(COMP_EnemyMovement_C_SetMovementTickInterval, NewInterval) == 0x000000, "Member 'COMP_EnemyMovement_C_SetMovementTickInterval::NewInterval' has a wrong offset!");

// Function COMP_EnemyMovement.COMP_EnemyMovement_C.SetForceUpdatePath
// 0x0001 (0x0001 - 0x0000)
struct COMP_EnemyMovement_C_SetForceUpdatePath final
{
public:
	bool                                          ForceUpdatePath_0;                                 // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(COMP_EnemyMovement_C_SetForceUpdatePath) == 0x000001, "Wrong alignment on COMP_EnemyMovement_C_SetForceUpdatePath");
static_assert(sizeof(COMP_EnemyMovement_C_SetForceUpdatePath) == 0x000001, "Wrong size on COMP_EnemyMovement_C_SetForceUpdatePath");
static_assert(offsetof(COMP_EnemyMovement_C_SetForceUpdatePath, ForceUpdatePath_0) == 0x000000, "Member 'COMP_EnemyMovement_C_SetForceUpdatePath::ForceUpdatePath_0' has a wrong offset!");

// Function COMP_EnemyMovement.COMP_EnemyMovement_C.GetNavigationTarget
// 0x0008 (0x0008 - 0x0000)
struct COMP_EnemyMovement_C_GetNavigationTarget final
{
public:
	class UOBJ_EnemyTarget_C*                     Target;                                            // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(COMP_EnemyMovement_C_GetNavigationTarget) == 0x000008, "Wrong alignment on COMP_EnemyMovement_C_GetNavigationTarget");
static_assert(sizeof(COMP_EnemyMovement_C_GetNavigationTarget) == 0x000008, "Wrong size on COMP_EnemyMovement_C_GetNavigationTarget");
static_assert(offsetof(COMP_EnemyMovement_C_GetNavigationTarget, Target) == 0x000000, "Member 'COMP_EnemyMovement_C_GetNavigationTarget::Target' has a wrong offset!");

// Function COMP_EnemyMovement.COMP_EnemyMovement_C.SetNavigationTarget
// 0x0020 (0x0020 - 0x0000)
struct COMP_EnemyMovement_C_SetNavigationTarget final
{
public:
	class UOBJ_EnemyTarget_C*                     Target;                                            // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CreatePath;                                        // 0x0008(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                NavTargetLocation;                                 // 0x000C(0x000C)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UObject*                                NavTargetEvent;                                    // 0x0018(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(COMP_EnemyMovement_C_SetNavigationTarget) == 0x000008, "Wrong alignment on COMP_EnemyMovement_C_SetNavigationTarget");
static_assert(sizeof(COMP_EnemyMovement_C_SetNavigationTarget) == 0x000020, "Wrong size on COMP_EnemyMovement_C_SetNavigationTarget");
static_assert(offsetof(COMP_EnemyMovement_C_SetNavigationTarget, Target) == 0x000000, "Member 'COMP_EnemyMovement_C_SetNavigationTarget::Target' has a wrong offset!");
static_assert(offsetof(COMP_EnemyMovement_C_SetNavigationTarget, CreatePath) == 0x000008, "Member 'COMP_EnemyMovement_C_SetNavigationTarget::CreatePath' has a wrong offset!");
static_assert(offsetof(COMP_EnemyMovement_C_SetNavigationTarget, NavTargetLocation) == 0x00000C, "Member 'COMP_EnemyMovement_C_SetNavigationTarget::NavTargetLocation' has a wrong offset!");
static_assert(offsetof(COMP_EnemyMovement_C_SetNavigationTarget, NavTargetEvent) == 0x000018, "Member 'COMP_EnemyMovement_C_SetNavigationTarget::NavTargetEvent' has a wrong offset!");

// Function COMP_EnemyMovement.COMP_EnemyMovement_C.IsOnVerticalPathSection
// 0x0088 (0x0088 - 0x0000)
struct COMP_EnemyMovement_C_IsOnVerticalPathSection final
{
public:
	bool                                          Result;                                            // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                PathLocation1;                                     // 0x0004(0x000C)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                PathLocation0;                                     // 0x0010(0x000C)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1C[0x4];                                       // 0x001C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UCOMP_VoxelCullableNavAgent_C*          VoxelNavAgent;                                     // 0x0020(0x0008)(Edit, BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector_X;                            // 0x0028(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector_Y;                            // 0x002C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector_Z;                            // 0x0030(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector_X_1;                          // 0x0034(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector_Y_1;                          // 0x0038(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector_Z_1;                          // 0x003C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FTwoVectors                            CallFunc_GetImmediateWorldPathPoints_OutNormals;   // 0x0040(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FTwoVectors                            CallFunc_GetImmediateWorldPathPoints_ReturnValue;  // 0x0058(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_NotEqual_FloatFloat_ReturnValue;          // 0x0070(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_71[0x3];                                       // 0x0071(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_Vector_Distance2DSquared_ReturnValue;     // 0x0074(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_FloatFloat_ReturnValue;              // 0x0078(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BooleanAND_ReturnValue;                   // 0x0079(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_7A[0x2];                                       // 0x007A(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_GetVoxelPathLength_ReturnValue;           // 0x007C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Greater_IntInt_ReturnValue;               // 0x0080(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(COMP_EnemyMovement_C_IsOnVerticalPathSection) == 0x000008, "Wrong alignment on COMP_EnemyMovement_C_IsOnVerticalPathSection");
static_assert(sizeof(COMP_EnemyMovement_C_IsOnVerticalPathSection) == 0x000088, "Wrong size on COMP_EnemyMovement_C_IsOnVerticalPathSection");
static_assert(offsetof(COMP_EnemyMovement_C_IsOnVerticalPathSection, Result) == 0x000000, "Member 'COMP_EnemyMovement_C_IsOnVerticalPathSection::Result' has a wrong offset!");
static_assert(offsetof(COMP_EnemyMovement_C_IsOnVerticalPathSection, PathLocation1) == 0x000004, "Member 'COMP_EnemyMovement_C_IsOnVerticalPathSection::PathLocation1' has a wrong offset!");
static_assert(offsetof(COMP_EnemyMovement_C_IsOnVerticalPathSection, PathLocation0) == 0x000010, "Member 'COMP_EnemyMovement_C_IsOnVerticalPathSection::PathLocation0' has a wrong offset!");
static_assert(offsetof(COMP_EnemyMovement_C_IsOnVerticalPathSection, VoxelNavAgent) == 0x000020, "Member 'COMP_EnemyMovement_C_IsOnVerticalPathSection::VoxelNavAgent' has a wrong offset!");
static_assert(offsetof(COMP_EnemyMovement_C_IsOnVerticalPathSection, CallFunc_BreakVector_X) == 0x000028, "Member 'COMP_EnemyMovement_C_IsOnVerticalPathSection::CallFunc_BreakVector_X' has a wrong offset!");
static_assert(offsetof(COMP_EnemyMovement_C_IsOnVerticalPathSection, CallFunc_BreakVector_Y) == 0x00002C, "Member 'COMP_EnemyMovement_C_IsOnVerticalPathSection::CallFunc_BreakVector_Y' has a wrong offset!");
static_assert(offsetof(COMP_EnemyMovement_C_IsOnVerticalPathSection, CallFunc_BreakVector_Z) == 0x000030, "Member 'COMP_EnemyMovement_C_IsOnVerticalPathSection::CallFunc_BreakVector_Z' has a wrong offset!");
static_assert(offsetof(COMP_EnemyMovement_C_IsOnVerticalPathSection, CallFunc_BreakVector_X_1) == 0x000034, "Member 'COMP_EnemyMovement_C_IsOnVerticalPathSection::CallFunc_BreakVector_X_1' has a wrong offset!");
static_assert(offsetof(COMP_EnemyMovement_C_IsOnVerticalPathSection, CallFunc_BreakVector_Y_1) == 0x000038, "Member 'COMP_EnemyMovement_C_IsOnVerticalPathSection::CallFunc_BreakVector_Y_1' has a wrong offset!");
static_assert(offsetof(COMP_EnemyMovement_C_IsOnVerticalPathSection, CallFunc_BreakVector_Z_1) == 0x00003C, "Member 'COMP_EnemyMovement_C_IsOnVerticalPathSection::CallFunc_BreakVector_Z_1' has a wrong offset!");
static_assert(offsetof(COMP_EnemyMovement_C_IsOnVerticalPathSection, CallFunc_GetImmediateWorldPathPoints_OutNormals) == 0x000040, "Member 'COMP_EnemyMovement_C_IsOnVerticalPathSection::CallFunc_GetImmediateWorldPathPoints_OutNormals' has a wrong offset!");
static_assert(offsetof(COMP_EnemyMovement_C_IsOnVerticalPathSection, CallFunc_GetImmediateWorldPathPoints_ReturnValue) == 0x000058, "Member 'COMP_EnemyMovement_C_IsOnVerticalPathSection::CallFunc_GetImmediateWorldPathPoints_ReturnValue' has a wrong offset!");
static_assert(offsetof(COMP_EnemyMovement_C_IsOnVerticalPathSection, CallFunc_NotEqual_FloatFloat_ReturnValue) == 0x000070, "Member 'COMP_EnemyMovement_C_IsOnVerticalPathSection::CallFunc_NotEqual_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(COMP_EnemyMovement_C_IsOnVerticalPathSection, CallFunc_Vector_Distance2DSquared_ReturnValue) == 0x000074, "Member 'COMP_EnemyMovement_C_IsOnVerticalPathSection::CallFunc_Vector_Distance2DSquared_ReturnValue' has a wrong offset!");
static_assert(offsetof(COMP_EnemyMovement_C_IsOnVerticalPathSection, CallFunc_Less_FloatFloat_ReturnValue) == 0x000078, "Member 'COMP_EnemyMovement_C_IsOnVerticalPathSection::CallFunc_Less_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(COMP_EnemyMovement_C_IsOnVerticalPathSection, CallFunc_BooleanAND_ReturnValue) == 0x000079, "Member 'COMP_EnemyMovement_C_IsOnVerticalPathSection::CallFunc_BooleanAND_ReturnValue' has a wrong offset!");
static_assert(offsetof(COMP_EnemyMovement_C_IsOnVerticalPathSection, CallFunc_GetVoxelPathLength_ReturnValue) == 0x00007C, "Member 'COMP_EnemyMovement_C_IsOnVerticalPathSection::CallFunc_GetVoxelPathLength_ReturnValue' has a wrong offset!");
static_assert(offsetof(COMP_EnemyMovement_C_IsOnVerticalPathSection, CallFunc_Greater_IntInt_ReturnValue) == 0x000080, "Member 'COMP_EnemyMovement_C_IsOnVerticalPathSection::CallFunc_Greater_IntInt_ReturnValue' has a wrong offset!");

// Function COMP_EnemyMovement.COMP_EnemyMovement_C.IsUsingCustomOrFlyingMovement
// 0x0004 (0x0004 - 0x0000)
struct COMP_EnemyMovement_C_IsUsingCustomOrFlyingMovement final
{
public:
	bool                                          UsingCustomMovement;                               // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_EqualEqual_ByteByte_ReturnValue;          // 0x0001(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_EqualEqual_ByteByte_ReturnValue_1;        // 0x0002(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BooleanOR_ReturnValue;                    // 0x0003(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(COMP_EnemyMovement_C_IsUsingCustomOrFlyingMovement) == 0x000001, "Wrong alignment on COMP_EnemyMovement_C_IsUsingCustomOrFlyingMovement");
static_assert(sizeof(COMP_EnemyMovement_C_IsUsingCustomOrFlyingMovement) == 0x000004, "Wrong size on COMP_EnemyMovement_C_IsUsingCustomOrFlyingMovement");
static_assert(offsetof(COMP_EnemyMovement_C_IsUsingCustomOrFlyingMovement, UsingCustomMovement) == 0x000000, "Member 'COMP_EnemyMovement_C_IsUsingCustomOrFlyingMovement::UsingCustomMovement' has a wrong offset!");
static_assert(offsetof(COMP_EnemyMovement_C_IsUsingCustomOrFlyingMovement, CallFunc_EqualEqual_ByteByte_ReturnValue) == 0x000001, "Member 'COMP_EnemyMovement_C_IsUsingCustomOrFlyingMovement::CallFunc_EqualEqual_ByteByte_ReturnValue' has a wrong offset!");
static_assert(offsetof(COMP_EnemyMovement_C_IsUsingCustomOrFlyingMovement, CallFunc_EqualEqual_ByteByte_ReturnValue_1) == 0x000002, "Member 'COMP_EnemyMovement_C_IsUsingCustomOrFlyingMovement::CallFunc_EqualEqual_ByteByte_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(COMP_EnemyMovement_C_IsUsingCustomOrFlyingMovement, CallFunc_BooleanOR_ReturnValue) == 0x000003, "Member 'COMP_EnemyMovement_C_IsUsingCustomOrFlyingMovement::CallFunc_BooleanOR_ReturnValue' has a wrong offset!");

// Function COMP_EnemyMovement.COMP_EnemyMovement_C.DebugDrawNavPath
// 0x0190 (0x0190 - 0x0000)
struct COMP_EnemyMovement_C_DebugDrawNavPath final
{
public:
	struct FTwoVectors                            NextPointNormalPair;                               // 0x0000(0x0018)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FTwoVectors                            CurrPointNormalPair;                               // 0x0018(0x0018)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FVector                                DebugPointRadius;                                  // 0x0030(0x000C)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CurrentIndex;                                      // 0x003C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TArray<struct FTwoVectors>                    PathPointNormalPairs;                              // 0x0040(0x0010)(Edit, BlueprintVisible)
	class UCOMP_VoxelCullableNavAgent_C*          VoxelNavAgent;                                     // 0x0050(0x0008)(Edit, BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UBatchedLevelVoxelization*              BatchedLevelVoxelization;                          // 0x0058(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UVoxelLevelManager*                     VoxelLevelManager;                                 // 0x0060(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0068(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_69[0x3];                                       // 0x0069(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Temp_int_Variable;                                 // 0x006C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue;                   // 0x0070(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Multiply_IntFloat_ReturnValue;            // 0x0074(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Multiply_VectorFloat_ReturnValue;         // 0x0078(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Add_VectorVector_ReturnValue;             // 0x0084(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue_1;                    // 0x0090(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_91[0x3];                                       // 0x0091(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_GetVoxelPathLength_ReturnValue;           // 0x0094(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_GetWorldPathPointAtNodeIndex_OutNormal;   // 0x0098(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_GetWorldPathPointAtNodeIndex_ReturnValue; // 0x00A4(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Subtract_IntInt_ReturnValue;              // 0x00B0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FTwoVectors                            K2Node_MakeStruct_TwoVectors;                      // 0x00B4(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor)
	int32                                         CallFunc_Array_Add_ReturnValue;                    // 0x00CC(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Multiply_IntFloat_ReturnValue_1;          // 0x00D0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Subtract_FloatFloat_ReturnValue;          // 0x00D4(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_MakeVector_ReturnValue;                   // 0x00D8(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Variable_1;                               // 0x00E4(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FIntVector                             CallFunc_GetVoxelLocationFromWorldLocation_ReturnValue; // 0x00E8(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_GetWorldCenterLocationFromVoxelLocation_ReturnValue; // 0x00F4(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_LessEqual_IntInt_ReturnValue;             // 0x0100(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_101[0x3];                                      // 0x0101(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Add_IntInt_ReturnValue_1;                 // 0x0104(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UGameInstance*                          CallFunc_GetGameInstance_ReturnValue;              // 0x0108(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UGI_SinglePlayer_C*                     K2Node_DynamicCast_AsGI_Single_Player;             // 0x0110(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0118(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_EqualEqual_IntInt_ReturnValue;            // 0x0119(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_11A[0x2];                                      // 0x011A(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	struct FLinearColor                           CallFunc_SelectColor_ReturnValue;                  // 0x011C(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Length_ReturnValue;                 // 0x012C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Subtract_IntInt_ReturnValue_1;            // 0x0130(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FTwoVectors                            CallFunc_Array_Get_Item;                           // 0x0134(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor)
	int32                                         CallFunc_Add_IntInt_ReturnValue_2;                 // 0x014C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FTwoVectors                            CallFunc_Array_Get_Item_1;                         // 0x0150(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FTwoVectors                            CallFunc_Array_Get_Item_2;                         // 0x0168(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor)
	int32                                         CallFunc_Array_Length_ReturnValue_1;               // 0x0180(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Greater_IntInt_ReturnValue;               // 0x0184(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_185[0x3];                                      // 0x0185(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Subtract_IntInt_ReturnValue_2;            // 0x0188(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_LessEqual_IntInt_ReturnValue_1;           // 0x018C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(COMP_EnemyMovement_C_DebugDrawNavPath) == 0x000008, "Wrong alignment on COMP_EnemyMovement_C_DebugDrawNavPath");
static_assert(sizeof(COMP_EnemyMovement_C_DebugDrawNavPath) == 0x000190, "Wrong size on COMP_EnemyMovement_C_DebugDrawNavPath");
static_assert(offsetof(COMP_EnemyMovement_C_DebugDrawNavPath, NextPointNormalPair) == 0x000000, "Member 'COMP_EnemyMovement_C_DebugDrawNavPath::NextPointNormalPair' has a wrong offset!");
static_assert(offsetof(COMP_EnemyMovement_C_DebugDrawNavPath, CurrPointNormalPair) == 0x000018, "Member 'COMP_EnemyMovement_C_DebugDrawNavPath::CurrPointNormalPair' has a wrong offset!");
static_assert(offsetof(COMP_EnemyMovement_C_DebugDrawNavPath, DebugPointRadius) == 0x000030, "Member 'COMP_EnemyMovement_C_DebugDrawNavPath::DebugPointRadius' has a wrong offset!");
static_assert(offsetof(COMP_EnemyMovement_C_DebugDrawNavPath, CurrentIndex) == 0x00003C, "Member 'COMP_EnemyMovement_C_DebugDrawNavPath::CurrentIndex' has a wrong offset!");
static_assert(offsetof(COMP_EnemyMovement_C_DebugDrawNavPath, PathPointNormalPairs) == 0x000040, "Member 'COMP_EnemyMovement_C_DebugDrawNavPath::PathPointNormalPairs' has a wrong offset!");
static_assert(offsetof(COMP_EnemyMovement_C_DebugDrawNavPath, VoxelNavAgent) == 0x000050, "Member 'COMP_EnemyMovement_C_DebugDrawNavPath::VoxelNavAgent' has a wrong offset!");
static_assert(offsetof(COMP_EnemyMovement_C_DebugDrawNavPath, BatchedLevelVoxelization) == 0x000058, "Member 'COMP_EnemyMovement_C_DebugDrawNavPath::BatchedLevelVoxelization' has a wrong offset!");
static_assert(offsetof(COMP_EnemyMovement_C_DebugDrawNavPath, VoxelLevelManager) == 0x000060, "Member 'COMP_EnemyMovement_C_DebugDrawNavPath::VoxelLevelManager' has a wrong offset!");
static_assert(offsetof(COMP_EnemyMovement_C_DebugDrawNavPath, CallFunc_IsValid_ReturnValue) == 0x000068, "Member 'COMP_EnemyMovement_C_DebugDrawNavPath::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(COMP_EnemyMovement_C_DebugDrawNavPath, Temp_int_Variable) == 0x00006C, "Member 'COMP_EnemyMovement_C_DebugDrawNavPath::Temp_int_Variable' has a wrong offset!");
static_assert(offsetof(COMP_EnemyMovement_C_DebugDrawNavPath, CallFunc_Add_IntInt_ReturnValue) == 0x000070, "Member 'COMP_EnemyMovement_C_DebugDrawNavPath::CallFunc_Add_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(COMP_EnemyMovement_C_DebugDrawNavPath, CallFunc_Multiply_IntFloat_ReturnValue) == 0x000074, "Member 'COMP_EnemyMovement_C_DebugDrawNavPath::CallFunc_Multiply_IntFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(COMP_EnemyMovement_C_DebugDrawNavPath, CallFunc_Multiply_VectorFloat_ReturnValue) == 0x000078, "Member 'COMP_EnemyMovement_C_DebugDrawNavPath::CallFunc_Multiply_VectorFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(COMP_EnemyMovement_C_DebugDrawNavPath, CallFunc_Add_VectorVector_ReturnValue) == 0x000084, "Member 'COMP_EnemyMovement_C_DebugDrawNavPath::CallFunc_Add_VectorVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(COMP_EnemyMovement_C_DebugDrawNavPath, CallFunc_IsValid_ReturnValue_1) == 0x000090, "Member 'COMP_EnemyMovement_C_DebugDrawNavPath::CallFunc_IsValid_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(COMP_EnemyMovement_C_DebugDrawNavPath, CallFunc_GetVoxelPathLength_ReturnValue) == 0x000094, "Member 'COMP_EnemyMovement_C_DebugDrawNavPath::CallFunc_GetVoxelPathLength_ReturnValue' has a wrong offset!");
static_assert(offsetof(COMP_EnemyMovement_C_DebugDrawNavPath, CallFunc_GetWorldPathPointAtNodeIndex_OutNormal) == 0x000098, "Member 'COMP_EnemyMovement_C_DebugDrawNavPath::CallFunc_GetWorldPathPointAtNodeIndex_OutNormal' has a wrong offset!");
static_assert(offsetof(COMP_EnemyMovement_C_DebugDrawNavPath, CallFunc_GetWorldPathPointAtNodeIndex_ReturnValue) == 0x0000A4, "Member 'COMP_EnemyMovement_C_DebugDrawNavPath::CallFunc_GetWorldPathPointAtNodeIndex_ReturnValue' has a wrong offset!");
static_assert(offsetof(COMP_EnemyMovement_C_DebugDrawNavPath, CallFunc_Subtract_IntInt_ReturnValue) == 0x0000B0, "Member 'COMP_EnemyMovement_C_DebugDrawNavPath::CallFunc_Subtract_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(COMP_EnemyMovement_C_DebugDrawNavPath, K2Node_MakeStruct_TwoVectors) == 0x0000B4, "Member 'COMP_EnemyMovement_C_DebugDrawNavPath::K2Node_MakeStruct_TwoVectors' has a wrong offset!");
static_assert(offsetof(COMP_EnemyMovement_C_DebugDrawNavPath, CallFunc_Array_Add_ReturnValue) == 0x0000CC, "Member 'COMP_EnemyMovement_C_DebugDrawNavPath::CallFunc_Array_Add_ReturnValue' has a wrong offset!");
static_assert(offsetof(COMP_EnemyMovement_C_DebugDrawNavPath, CallFunc_Multiply_IntFloat_ReturnValue_1) == 0x0000D0, "Member 'COMP_EnemyMovement_C_DebugDrawNavPath::CallFunc_Multiply_IntFloat_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(COMP_EnemyMovement_C_DebugDrawNavPath, CallFunc_Subtract_FloatFloat_ReturnValue) == 0x0000D4, "Member 'COMP_EnemyMovement_C_DebugDrawNavPath::CallFunc_Subtract_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(COMP_EnemyMovement_C_DebugDrawNavPath, CallFunc_MakeVector_ReturnValue) == 0x0000D8, "Member 'COMP_EnemyMovement_C_DebugDrawNavPath::CallFunc_MakeVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(COMP_EnemyMovement_C_DebugDrawNavPath, Temp_int_Variable_1) == 0x0000E4, "Member 'COMP_EnemyMovement_C_DebugDrawNavPath::Temp_int_Variable_1' has a wrong offset!");
static_assert(offsetof(COMP_EnemyMovement_C_DebugDrawNavPath, CallFunc_GetVoxelLocationFromWorldLocation_ReturnValue) == 0x0000E8, "Member 'COMP_EnemyMovement_C_DebugDrawNavPath::CallFunc_GetVoxelLocationFromWorldLocation_ReturnValue' has a wrong offset!");
static_assert(offsetof(COMP_EnemyMovement_C_DebugDrawNavPath, CallFunc_GetWorldCenterLocationFromVoxelLocation_ReturnValue) == 0x0000F4, "Member 'COMP_EnemyMovement_C_DebugDrawNavPath::CallFunc_GetWorldCenterLocationFromVoxelLocation_ReturnValue' has a wrong offset!");
static_assert(offsetof(COMP_EnemyMovement_C_DebugDrawNavPath, CallFunc_LessEqual_IntInt_ReturnValue) == 0x000100, "Member 'COMP_EnemyMovement_C_DebugDrawNavPath::CallFunc_LessEqual_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(COMP_EnemyMovement_C_DebugDrawNavPath, CallFunc_Add_IntInt_ReturnValue_1) == 0x000104, "Member 'COMP_EnemyMovement_C_DebugDrawNavPath::CallFunc_Add_IntInt_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(COMP_EnemyMovement_C_DebugDrawNavPath, CallFunc_GetGameInstance_ReturnValue) == 0x000108, "Member 'COMP_EnemyMovement_C_DebugDrawNavPath::CallFunc_GetGameInstance_ReturnValue' has a wrong offset!");
static_assert(offsetof(COMP_EnemyMovement_C_DebugDrawNavPath, K2Node_DynamicCast_AsGI_Single_Player) == 0x000110, "Member 'COMP_EnemyMovement_C_DebugDrawNavPath::K2Node_DynamicCast_AsGI_Single_Player' has a wrong offset!");
static_assert(offsetof(COMP_EnemyMovement_C_DebugDrawNavPath, K2Node_DynamicCast_bSuccess) == 0x000118, "Member 'COMP_EnemyMovement_C_DebugDrawNavPath::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(COMP_EnemyMovement_C_DebugDrawNavPath, CallFunc_EqualEqual_IntInt_ReturnValue) == 0x000119, "Member 'COMP_EnemyMovement_C_DebugDrawNavPath::CallFunc_EqualEqual_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(COMP_EnemyMovement_C_DebugDrawNavPath, CallFunc_SelectColor_ReturnValue) == 0x00011C, "Member 'COMP_EnemyMovement_C_DebugDrawNavPath::CallFunc_SelectColor_ReturnValue' has a wrong offset!");
static_assert(offsetof(COMP_EnemyMovement_C_DebugDrawNavPath, CallFunc_Array_Length_ReturnValue) == 0x00012C, "Member 'COMP_EnemyMovement_C_DebugDrawNavPath::CallFunc_Array_Length_ReturnValue' has a wrong offset!");
static_assert(offsetof(COMP_EnemyMovement_C_DebugDrawNavPath, CallFunc_Subtract_IntInt_ReturnValue_1) == 0x000130, "Member 'COMP_EnemyMovement_C_DebugDrawNavPath::CallFunc_Subtract_IntInt_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(COMP_EnemyMovement_C_DebugDrawNavPath, CallFunc_Array_Get_Item) == 0x000134, "Member 'COMP_EnemyMovement_C_DebugDrawNavPath::CallFunc_Array_Get_Item' has a wrong offset!");
static_assert(offsetof(COMP_EnemyMovement_C_DebugDrawNavPath, CallFunc_Add_IntInt_ReturnValue_2) == 0x00014C, "Member 'COMP_EnemyMovement_C_DebugDrawNavPath::CallFunc_Add_IntInt_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(COMP_EnemyMovement_C_DebugDrawNavPath, CallFunc_Array_Get_Item_1) == 0x000150, "Member 'COMP_EnemyMovement_C_DebugDrawNavPath::CallFunc_Array_Get_Item_1' has a wrong offset!");
static_assert(offsetof(COMP_EnemyMovement_C_DebugDrawNavPath, CallFunc_Array_Get_Item_2) == 0x000168, "Member 'COMP_EnemyMovement_C_DebugDrawNavPath::CallFunc_Array_Get_Item_2' has a wrong offset!");
static_assert(offsetof(COMP_EnemyMovement_C_DebugDrawNavPath, CallFunc_Array_Length_ReturnValue_1) == 0x000180, "Member 'COMP_EnemyMovement_C_DebugDrawNavPath::CallFunc_Array_Length_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(COMP_EnemyMovement_C_DebugDrawNavPath, CallFunc_Greater_IntInt_ReturnValue) == 0x000184, "Member 'COMP_EnemyMovement_C_DebugDrawNavPath::CallFunc_Greater_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(COMP_EnemyMovement_C_DebugDrawNavPath, CallFunc_Subtract_IntInt_ReturnValue_2) == 0x000188, "Member 'COMP_EnemyMovement_C_DebugDrawNavPath::CallFunc_Subtract_IntInt_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(COMP_EnemyMovement_C_DebugDrawNavPath, CallFunc_LessEqual_IntInt_ReturnValue_1) == 0x00018C, "Member 'COMP_EnemyMovement_C_DebugDrawNavPath::CallFunc_LessEqual_IntInt_ReturnValue_1' has a wrong offset!");

// Function COMP_EnemyMovement.COMP_EnemyMovement_C.HasReachedDestination
// 0x0088 (0x0088 - 0x0000)
struct COMP_EnemyMovement_C_HasReachedDestination final
{
public:
	bool                                          Result;                                            // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                SourceLocation;                                    // 0x0004(0x000C)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                TargetLocation;                                    // 0x0010(0x000C)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         PathLength;                                        // 0x001C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_SwitchEnum_CmpSuccess;                      // 0x0020(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_21[0x3];                                       // 0x0021(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                CallFunc_GetShockAgentLocation_Location;           // 0x0024(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_GetVoxelPathLength_ReturnValue;           // 0x0030(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Subtract_IntInt_ReturnValue;              // 0x0034(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_GetWorldPathPointAtNodeIndex_OutNormal;   // 0x0038(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_GetWorldPathPointAtNodeIndex_ReturnValue; // 0x0044(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Vector_DistanceSquared_ReturnValue;       // 0x0050(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_LessEqual_FloatFloat_ReturnValue;         // 0x0054(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_55[0x3];                                       // 0x0055(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_Multiply_FloatFloat_ReturnValue;          // 0x0058(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector_X;                            // 0x005C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector_Y;                            // 0x0060(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector_Z;                            // 0x0064(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector_X_1;                          // 0x0068(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector_Y_1;                          // 0x006C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector_Z_1;                          // 0x0070(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Subtract_FloatFloat_ReturnValue;          // 0x0074(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Abs_ReturnValue;                          // 0x0078(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_LessEqual_FloatFloat_ReturnValue_1;       // 0x007C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_7D[0x3];                                       // 0x007D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_Vector_Distance2DSquared_ReturnValue;     // 0x0080(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_LessEqual_FloatFloat_ReturnValue_2;       // 0x0084(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_LessEqual_IntInt_ReturnValue;             // 0x0085(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(COMP_EnemyMovement_C_HasReachedDestination) == 0x000004, "Wrong alignment on COMP_EnemyMovement_C_HasReachedDestination");
static_assert(sizeof(COMP_EnemyMovement_C_HasReachedDestination) == 0x000088, "Wrong size on COMP_EnemyMovement_C_HasReachedDestination");
static_assert(offsetof(COMP_EnemyMovement_C_HasReachedDestination, Result) == 0x000000, "Member 'COMP_EnemyMovement_C_HasReachedDestination::Result' has a wrong offset!");
static_assert(offsetof(COMP_EnemyMovement_C_HasReachedDestination, SourceLocation) == 0x000004, "Member 'COMP_EnemyMovement_C_HasReachedDestination::SourceLocation' has a wrong offset!");
static_assert(offsetof(COMP_EnemyMovement_C_HasReachedDestination, TargetLocation) == 0x000010, "Member 'COMP_EnemyMovement_C_HasReachedDestination::TargetLocation' has a wrong offset!");
static_assert(offsetof(COMP_EnemyMovement_C_HasReachedDestination, PathLength) == 0x00001C, "Member 'COMP_EnemyMovement_C_HasReachedDestination::PathLength' has a wrong offset!");
static_assert(offsetof(COMP_EnemyMovement_C_HasReachedDestination, K2Node_SwitchEnum_CmpSuccess) == 0x000020, "Member 'COMP_EnemyMovement_C_HasReachedDestination::K2Node_SwitchEnum_CmpSuccess' has a wrong offset!");
static_assert(offsetof(COMP_EnemyMovement_C_HasReachedDestination, CallFunc_GetShockAgentLocation_Location) == 0x000024, "Member 'COMP_EnemyMovement_C_HasReachedDestination::CallFunc_GetShockAgentLocation_Location' has a wrong offset!");
static_assert(offsetof(COMP_EnemyMovement_C_HasReachedDestination, CallFunc_GetVoxelPathLength_ReturnValue) == 0x000030, "Member 'COMP_EnemyMovement_C_HasReachedDestination::CallFunc_GetVoxelPathLength_ReturnValue' has a wrong offset!");
static_assert(offsetof(COMP_EnemyMovement_C_HasReachedDestination, CallFunc_Subtract_IntInt_ReturnValue) == 0x000034, "Member 'COMP_EnemyMovement_C_HasReachedDestination::CallFunc_Subtract_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(COMP_EnemyMovement_C_HasReachedDestination, CallFunc_GetWorldPathPointAtNodeIndex_OutNormal) == 0x000038, "Member 'COMP_EnemyMovement_C_HasReachedDestination::CallFunc_GetWorldPathPointAtNodeIndex_OutNormal' has a wrong offset!");
static_assert(offsetof(COMP_EnemyMovement_C_HasReachedDestination, CallFunc_GetWorldPathPointAtNodeIndex_ReturnValue) == 0x000044, "Member 'COMP_EnemyMovement_C_HasReachedDestination::CallFunc_GetWorldPathPointAtNodeIndex_ReturnValue' has a wrong offset!");
static_assert(offsetof(COMP_EnemyMovement_C_HasReachedDestination, CallFunc_Vector_DistanceSquared_ReturnValue) == 0x000050, "Member 'COMP_EnemyMovement_C_HasReachedDestination::CallFunc_Vector_DistanceSquared_ReturnValue' has a wrong offset!");
static_assert(offsetof(COMP_EnemyMovement_C_HasReachedDestination, CallFunc_LessEqual_FloatFloat_ReturnValue) == 0x000054, "Member 'COMP_EnemyMovement_C_HasReachedDestination::CallFunc_LessEqual_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(COMP_EnemyMovement_C_HasReachedDestination, CallFunc_Multiply_FloatFloat_ReturnValue) == 0x000058, "Member 'COMP_EnemyMovement_C_HasReachedDestination::CallFunc_Multiply_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(COMP_EnemyMovement_C_HasReachedDestination, CallFunc_BreakVector_X) == 0x00005C, "Member 'COMP_EnemyMovement_C_HasReachedDestination::CallFunc_BreakVector_X' has a wrong offset!");
static_assert(offsetof(COMP_EnemyMovement_C_HasReachedDestination, CallFunc_BreakVector_Y) == 0x000060, "Member 'COMP_EnemyMovement_C_HasReachedDestination::CallFunc_BreakVector_Y' has a wrong offset!");
static_assert(offsetof(COMP_EnemyMovement_C_HasReachedDestination, CallFunc_BreakVector_Z) == 0x000064, "Member 'COMP_EnemyMovement_C_HasReachedDestination::CallFunc_BreakVector_Z' has a wrong offset!");
static_assert(offsetof(COMP_EnemyMovement_C_HasReachedDestination, CallFunc_BreakVector_X_1) == 0x000068, "Member 'COMP_EnemyMovement_C_HasReachedDestination::CallFunc_BreakVector_X_1' has a wrong offset!");
static_assert(offsetof(COMP_EnemyMovement_C_HasReachedDestination, CallFunc_BreakVector_Y_1) == 0x00006C, "Member 'COMP_EnemyMovement_C_HasReachedDestination::CallFunc_BreakVector_Y_1' has a wrong offset!");
static_assert(offsetof(COMP_EnemyMovement_C_HasReachedDestination, CallFunc_BreakVector_Z_1) == 0x000070, "Member 'COMP_EnemyMovement_C_HasReachedDestination::CallFunc_BreakVector_Z_1' has a wrong offset!");
static_assert(offsetof(COMP_EnemyMovement_C_HasReachedDestination, CallFunc_Subtract_FloatFloat_ReturnValue) == 0x000074, "Member 'COMP_EnemyMovement_C_HasReachedDestination::CallFunc_Subtract_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(COMP_EnemyMovement_C_HasReachedDestination, CallFunc_Abs_ReturnValue) == 0x000078, "Member 'COMP_EnemyMovement_C_HasReachedDestination::CallFunc_Abs_ReturnValue' has a wrong offset!");
static_assert(offsetof(COMP_EnemyMovement_C_HasReachedDestination, CallFunc_LessEqual_FloatFloat_ReturnValue_1) == 0x00007C, "Member 'COMP_EnemyMovement_C_HasReachedDestination::CallFunc_LessEqual_FloatFloat_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(COMP_EnemyMovement_C_HasReachedDestination, CallFunc_Vector_Distance2DSquared_ReturnValue) == 0x000080, "Member 'COMP_EnemyMovement_C_HasReachedDestination::CallFunc_Vector_Distance2DSquared_ReturnValue' has a wrong offset!");
static_assert(offsetof(COMP_EnemyMovement_C_HasReachedDestination, CallFunc_LessEqual_FloatFloat_ReturnValue_2) == 0x000084, "Member 'COMP_EnemyMovement_C_HasReachedDestination::CallFunc_LessEqual_FloatFloat_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(COMP_EnemyMovement_C_HasReachedDestination, CallFunc_LessEqual_IntInt_ReturnValue) == 0x000085, "Member 'COMP_EnemyMovement_C_HasReachedDestination::CallFunc_LessEqual_IntInt_ReturnValue' has a wrong offset!");

// Function COMP_EnemyMovement.COMP_EnemyMovement_C.SetAutoStopEnabled
// 0x0001 (0x0001 - 0x0000)
struct COMP_EnemyMovement_C_SetAutoStopEnabled final
{
public:
	bool                                          Enabled;                                           // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(COMP_EnemyMovement_C_SetAutoStopEnabled) == 0x000001, "Wrong alignment on COMP_EnemyMovement_C_SetAutoStopEnabled");
static_assert(sizeof(COMP_EnemyMovement_C_SetAutoStopEnabled) == 0x000001, "Wrong size on COMP_EnemyMovement_C_SetAutoStopEnabled");
static_assert(offsetof(COMP_EnemyMovement_C_SetAutoStopEnabled, Enabled) == 0x000000, "Member 'COMP_EnemyMovement_C_SetAutoStopEnabled::Enabled' has a wrong offset!");

// Function COMP_EnemyMovement.COMP_EnemyMovement_C.HandleNavObstacles
// 0x01F8 (0x01F8 - 0x0000)
struct COMP_EnemyMovement_C_HandleNavObstacles final
{
public:
	int32                                         LastObstaclePathNodeIndex;                         // 0x0000(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FGameplayTag                           VocalizationTag;                                   // 0x0004(0x0008)(Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash)
	bool                                          DestinationIsCloserToTop;                          // 0x000C(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_D[0x3];                                        // 0x000D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FSTRUCT_InteractResults                InteractResults;                                   // 0x0010(0x0020)(Edit, BlueprintVisible, HasGetValueTypeHash)
	class AINTERACT_RepulsorLift_C*               RepulsorObstacleActor;                             // 0x0030(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash)
	class AINTERACT_ForceBridge_C*                BridgeObstacleActor;                               // 0x0038(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash)
	class AINTERACT_DoorBase_C*                   DoorObstacleActor;                                 // 0x0040(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash)
	class AActor*                                 ObstacleActor;                                     // 0x0048(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0050(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_51[0x3];                                       // 0x0051(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                CallFunc_GetWorldPathPointAtNodeIndex_OutNormal;   // 0x0054(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_GetWorldPathPointAtNodeIndex_ReturnValue; // 0x0060(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector_X;                            // 0x006C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector_Y;                            // 0x0070(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector_Z;                            // 0x0074(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsGameplayTagValid_ReturnValue;           // 0x0078(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_79[0x7];                                       // 0x0079(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TScriptInterface<class IINTERF_Interactable_C> CallFunc_TryInteract_self_CastInput;               // 0x0080(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FSTRUCT_InteractResults                CallFunc_TryInteract_InteractResults;              // 0x0090(0x0020)(HasGetValueTypeHash)
	bool                                          CallFunc_Not_PreBool_ReturnValue;                  // 0x00B0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_B1[0x3];                                       // 0x00B1(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         Temp_float_Variable;                               // 0x00B4(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_ByteByte_ReturnValue;          // 0x00B8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BooleanAND_ReturnValue;                   // 0x00B9(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_EqualEqual_ByteByte_ReturnValue_1;        // 0x00BA(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_BB[0x1];                                       // 0x00BB(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_Conv_IntToFloat_ReturnValue;              // 0x00BC(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BooleanAND_ReturnValue_1;                 // 0x00C0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_C1[0x3];                                       // 0x00C1(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                CallFunc_K2_GetActorLocation_ReturnValue;          // 0x00C4(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector_X_1;                          // 0x00D0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector_Y_1;                          // 0x00D4(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector_Z_1;                          // 0x00D8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_DC[0x4];                                       // 0x00DC(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TScriptInterface<class IINTERF_Interactable_C> CallFunc_TryInteract_self_CastInput_1;             // 0x00E0(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FSTRUCT_InteractResults                CallFunc_TryInteract_InteractResults_1;            // 0x00F0(0x0020)(HasGetValueTypeHash)
	float                                         CallFunc_Subtract_FloatFloat_ReturnValue;          // 0x0110(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Abs_ReturnValue;                          // 0x0114(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Add_FloatFloat_ReturnValue;               // 0x0118(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Subtract_FloatFloat_ReturnValue_1;        // 0x011C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AINTERACT_RepulsorLift_C*               K2Node_DynamicCast_AsINTERACT_Repulsor_Lift;       // 0x0120(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0128(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_129[0x3];                                      // 0x0129(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_Abs_ReturnValue_1;                        // 0x012C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Greater_FloatFloat_ReturnValue;           // 0x0130(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Temp_bool_Variable;                                // 0x0131(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_132[0x6];                                      // 0x0132(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	TScriptInterface<class IINTERF_Interactable_C> CallFunc_TryInteract_self_CastInput_2;             // 0x0138(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FSTRUCT_InteractResults                CallFunc_TryInteract_InteractResults_2;            // 0x0148(0x0020)(HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_ByteByte_ReturnValue_2;        // 0x0168(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_169[0x3];                                      // 0x0169(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         K2Node_Select_Default;                             // 0x016C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsForceBridgeActivated_Result;            // 0x0170(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_171[0x7];                                      // 0x0171(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class AINTERACT_ForceBridge_C*                K2Node_DynamicCast_AsINTERACT_Force_Bridge;        // 0x0178(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess_1;                     // 0x0180(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Not_PreBool_ReturnValue_1;                // 0x0181(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_182[0x6];                                      // 0x0182(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class AINTERACT_DoorBase_C*                   K2Node_DynamicCast_AsINTERACT_Door_Base;           // 0x0188(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess_2;                     // 0x0190(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_191[0x3];                                      // 0x0191(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_GetVoxelPathLength_ReturnValue;           // 0x0194(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue;                  // 0x0198(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_199[0x3];                                      // 0x0199(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_GetPlayTimeInSeconds_ReturnValue;         // 0x019C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Add_FloatFloat_ReturnValue_1;             // 0x01A0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_GetPlayTimeInSeconds_ReturnValue_1;       // 0x01A4(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_GreaterEqual_FloatFloat_ReturnValue;      // 0x01A8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_1A9[0x7];                                      // 0x01A9(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TScriptInterface<class IINTERF_Interactable_C> CallFunc_TryInteract_self_CastInput_3;             // 0x01B0(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FSTRUCT_InteractResults                CallFunc_TryInteract_InteractResults_3;            // 0x01C0(0x0020)(HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_ByteByte_ReturnValue_3;        // 0x01E0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_1E1[0x3];                                      // 0x01E1(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_GetFirstPathObstacleActor_OutStartPathNodeIndex; // 0x01E4(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_GetFirstPathObstacleActor_OutEndPathNodeIndex; // 0x01E8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1EC[0x4];                                      // 0x01EC(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class AActor*                                 CallFunc_GetFirstPathObstacleActor_ReturnValue;    // 0x01F0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(COMP_EnemyMovement_C_HandleNavObstacles) == 0x000008, "Wrong alignment on COMP_EnemyMovement_C_HandleNavObstacles");
static_assert(sizeof(COMP_EnemyMovement_C_HandleNavObstacles) == 0x0001F8, "Wrong size on COMP_EnemyMovement_C_HandleNavObstacles");
static_assert(offsetof(COMP_EnemyMovement_C_HandleNavObstacles, LastObstaclePathNodeIndex) == 0x000000, "Member 'COMP_EnemyMovement_C_HandleNavObstacles::LastObstaclePathNodeIndex' has a wrong offset!");
static_assert(offsetof(COMP_EnemyMovement_C_HandleNavObstacles, VocalizationTag) == 0x000004, "Member 'COMP_EnemyMovement_C_HandleNavObstacles::VocalizationTag' has a wrong offset!");
static_assert(offsetof(COMP_EnemyMovement_C_HandleNavObstacles, DestinationIsCloserToTop) == 0x00000C, "Member 'COMP_EnemyMovement_C_HandleNavObstacles::DestinationIsCloserToTop' has a wrong offset!");
static_assert(offsetof(COMP_EnemyMovement_C_HandleNavObstacles, InteractResults) == 0x000010, "Member 'COMP_EnemyMovement_C_HandleNavObstacles::InteractResults' has a wrong offset!");
static_assert(offsetof(COMP_EnemyMovement_C_HandleNavObstacles, RepulsorObstacleActor) == 0x000030, "Member 'COMP_EnemyMovement_C_HandleNavObstacles::RepulsorObstacleActor' has a wrong offset!");
static_assert(offsetof(COMP_EnemyMovement_C_HandleNavObstacles, BridgeObstacleActor) == 0x000038, "Member 'COMP_EnemyMovement_C_HandleNavObstacles::BridgeObstacleActor' has a wrong offset!");
static_assert(offsetof(COMP_EnemyMovement_C_HandleNavObstacles, DoorObstacleActor) == 0x000040, "Member 'COMP_EnemyMovement_C_HandleNavObstacles::DoorObstacleActor' has a wrong offset!");
static_assert(offsetof(COMP_EnemyMovement_C_HandleNavObstacles, ObstacleActor) == 0x000048, "Member 'COMP_EnemyMovement_C_HandleNavObstacles::ObstacleActor' has a wrong offset!");
static_assert(offsetof(COMP_EnemyMovement_C_HandleNavObstacles, CallFunc_IsValid_ReturnValue) == 0x000050, "Member 'COMP_EnemyMovement_C_HandleNavObstacles::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(COMP_EnemyMovement_C_HandleNavObstacles, CallFunc_GetWorldPathPointAtNodeIndex_OutNormal) == 0x000054, "Member 'COMP_EnemyMovement_C_HandleNavObstacles::CallFunc_GetWorldPathPointAtNodeIndex_OutNormal' has a wrong offset!");
static_assert(offsetof(COMP_EnemyMovement_C_HandleNavObstacles, CallFunc_GetWorldPathPointAtNodeIndex_ReturnValue) == 0x000060, "Member 'COMP_EnemyMovement_C_HandleNavObstacles::CallFunc_GetWorldPathPointAtNodeIndex_ReturnValue' has a wrong offset!");
static_assert(offsetof(COMP_EnemyMovement_C_HandleNavObstacles, CallFunc_BreakVector_X) == 0x00006C, "Member 'COMP_EnemyMovement_C_HandleNavObstacles::CallFunc_BreakVector_X' has a wrong offset!");
static_assert(offsetof(COMP_EnemyMovement_C_HandleNavObstacles, CallFunc_BreakVector_Y) == 0x000070, "Member 'COMP_EnemyMovement_C_HandleNavObstacles::CallFunc_BreakVector_Y' has a wrong offset!");
static_assert(offsetof(COMP_EnemyMovement_C_HandleNavObstacles, CallFunc_BreakVector_Z) == 0x000074, "Member 'COMP_EnemyMovement_C_HandleNavObstacles::CallFunc_BreakVector_Z' has a wrong offset!");
static_assert(offsetof(COMP_EnemyMovement_C_HandleNavObstacles, CallFunc_IsGameplayTagValid_ReturnValue) == 0x000078, "Member 'COMP_EnemyMovement_C_HandleNavObstacles::CallFunc_IsGameplayTagValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(COMP_EnemyMovement_C_HandleNavObstacles, CallFunc_TryInteract_self_CastInput) == 0x000080, "Member 'COMP_EnemyMovement_C_HandleNavObstacles::CallFunc_TryInteract_self_CastInput' has a wrong offset!");
static_assert(offsetof(COMP_EnemyMovement_C_HandleNavObstacles, CallFunc_TryInteract_InteractResults) == 0x000090, "Member 'COMP_EnemyMovement_C_HandleNavObstacles::CallFunc_TryInteract_InteractResults' has a wrong offset!");
static_assert(offsetof(COMP_EnemyMovement_C_HandleNavObstacles, CallFunc_Not_PreBool_ReturnValue) == 0x0000B0, "Member 'COMP_EnemyMovement_C_HandleNavObstacles::CallFunc_Not_PreBool_ReturnValue' has a wrong offset!");
static_assert(offsetof(COMP_EnemyMovement_C_HandleNavObstacles, Temp_float_Variable) == 0x0000B4, "Member 'COMP_EnemyMovement_C_HandleNavObstacles::Temp_float_Variable' has a wrong offset!");
static_assert(offsetof(COMP_EnemyMovement_C_HandleNavObstacles, CallFunc_EqualEqual_ByteByte_ReturnValue) == 0x0000B8, "Member 'COMP_EnemyMovement_C_HandleNavObstacles::CallFunc_EqualEqual_ByteByte_ReturnValue' has a wrong offset!");
static_assert(offsetof(COMP_EnemyMovement_C_HandleNavObstacles, CallFunc_BooleanAND_ReturnValue) == 0x0000B9, "Member 'COMP_EnemyMovement_C_HandleNavObstacles::CallFunc_BooleanAND_ReturnValue' has a wrong offset!");
static_assert(offsetof(COMP_EnemyMovement_C_HandleNavObstacles, CallFunc_EqualEqual_ByteByte_ReturnValue_1) == 0x0000BA, "Member 'COMP_EnemyMovement_C_HandleNavObstacles::CallFunc_EqualEqual_ByteByte_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(COMP_EnemyMovement_C_HandleNavObstacles, CallFunc_Conv_IntToFloat_ReturnValue) == 0x0000BC, "Member 'COMP_EnemyMovement_C_HandleNavObstacles::CallFunc_Conv_IntToFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(COMP_EnemyMovement_C_HandleNavObstacles, CallFunc_BooleanAND_ReturnValue_1) == 0x0000C0, "Member 'COMP_EnemyMovement_C_HandleNavObstacles::CallFunc_BooleanAND_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(COMP_EnemyMovement_C_HandleNavObstacles, CallFunc_K2_GetActorLocation_ReturnValue) == 0x0000C4, "Member 'COMP_EnemyMovement_C_HandleNavObstacles::CallFunc_K2_GetActorLocation_ReturnValue' has a wrong offset!");
static_assert(offsetof(COMP_EnemyMovement_C_HandleNavObstacles, CallFunc_BreakVector_X_1) == 0x0000D0, "Member 'COMP_EnemyMovement_C_HandleNavObstacles::CallFunc_BreakVector_X_1' has a wrong offset!");
static_assert(offsetof(COMP_EnemyMovement_C_HandleNavObstacles, CallFunc_BreakVector_Y_1) == 0x0000D4, "Member 'COMP_EnemyMovement_C_HandleNavObstacles::CallFunc_BreakVector_Y_1' has a wrong offset!");
static_assert(offsetof(COMP_EnemyMovement_C_HandleNavObstacles, CallFunc_BreakVector_Z_1) == 0x0000D8, "Member 'COMP_EnemyMovement_C_HandleNavObstacles::CallFunc_BreakVector_Z_1' has a wrong offset!");
static_assert(offsetof(COMP_EnemyMovement_C_HandleNavObstacles, CallFunc_TryInteract_self_CastInput_1) == 0x0000E0, "Member 'COMP_EnemyMovement_C_HandleNavObstacles::CallFunc_TryInteract_self_CastInput_1' has a wrong offset!");
static_assert(offsetof(COMP_EnemyMovement_C_HandleNavObstacles, CallFunc_TryInteract_InteractResults_1) == 0x0000F0, "Member 'COMP_EnemyMovement_C_HandleNavObstacles::CallFunc_TryInteract_InteractResults_1' has a wrong offset!");
static_assert(offsetof(COMP_EnemyMovement_C_HandleNavObstacles, CallFunc_Subtract_FloatFloat_ReturnValue) == 0x000110, "Member 'COMP_EnemyMovement_C_HandleNavObstacles::CallFunc_Subtract_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(COMP_EnemyMovement_C_HandleNavObstacles, CallFunc_Abs_ReturnValue) == 0x000114, "Member 'COMP_EnemyMovement_C_HandleNavObstacles::CallFunc_Abs_ReturnValue' has a wrong offset!");
static_assert(offsetof(COMP_EnemyMovement_C_HandleNavObstacles, CallFunc_Add_FloatFloat_ReturnValue) == 0x000118, "Member 'COMP_EnemyMovement_C_HandleNavObstacles::CallFunc_Add_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(COMP_EnemyMovement_C_HandleNavObstacles, CallFunc_Subtract_FloatFloat_ReturnValue_1) == 0x00011C, "Member 'COMP_EnemyMovement_C_HandleNavObstacles::CallFunc_Subtract_FloatFloat_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(COMP_EnemyMovement_C_HandleNavObstacles, K2Node_DynamicCast_AsINTERACT_Repulsor_Lift) == 0x000120, "Member 'COMP_EnemyMovement_C_HandleNavObstacles::K2Node_DynamicCast_AsINTERACT_Repulsor_Lift' has a wrong offset!");
static_assert(offsetof(COMP_EnemyMovement_C_HandleNavObstacles, K2Node_DynamicCast_bSuccess) == 0x000128, "Member 'COMP_EnemyMovement_C_HandleNavObstacles::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(COMP_EnemyMovement_C_HandleNavObstacles, CallFunc_Abs_ReturnValue_1) == 0x00012C, "Member 'COMP_EnemyMovement_C_HandleNavObstacles::CallFunc_Abs_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(COMP_EnemyMovement_C_HandleNavObstacles, CallFunc_Greater_FloatFloat_ReturnValue) == 0x000130, "Member 'COMP_EnemyMovement_C_HandleNavObstacles::CallFunc_Greater_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(COMP_EnemyMovement_C_HandleNavObstacles, Temp_bool_Variable) == 0x000131, "Member 'COMP_EnemyMovement_C_HandleNavObstacles::Temp_bool_Variable' has a wrong offset!");
static_assert(offsetof(COMP_EnemyMovement_C_HandleNavObstacles, CallFunc_TryInteract_self_CastInput_2) == 0x000138, "Member 'COMP_EnemyMovement_C_HandleNavObstacles::CallFunc_TryInteract_self_CastInput_2' has a wrong offset!");
static_assert(offsetof(COMP_EnemyMovement_C_HandleNavObstacles, CallFunc_TryInteract_InteractResults_2) == 0x000148, "Member 'COMP_EnemyMovement_C_HandleNavObstacles::CallFunc_TryInteract_InteractResults_2' has a wrong offset!");
static_assert(offsetof(COMP_EnemyMovement_C_HandleNavObstacles, CallFunc_EqualEqual_ByteByte_ReturnValue_2) == 0x000168, "Member 'COMP_EnemyMovement_C_HandleNavObstacles::CallFunc_EqualEqual_ByteByte_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(COMP_EnemyMovement_C_HandleNavObstacles, K2Node_Select_Default) == 0x00016C, "Member 'COMP_EnemyMovement_C_HandleNavObstacles::K2Node_Select_Default' has a wrong offset!");
static_assert(offsetof(COMP_EnemyMovement_C_HandleNavObstacles, CallFunc_IsForceBridgeActivated_Result) == 0x000170, "Member 'COMP_EnemyMovement_C_HandleNavObstacles::CallFunc_IsForceBridgeActivated_Result' has a wrong offset!");
static_assert(offsetof(COMP_EnemyMovement_C_HandleNavObstacles, K2Node_DynamicCast_AsINTERACT_Force_Bridge) == 0x000178, "Member 'COMP_EnemyMovement_C_HandleNavObstacles::K2Node_DynamicCast_AsINTERACT_Force_Bridge' has a wrong offset!");
static_assert(offsetof(COMP_EnemyMovement_C_HandleNavObstacles, K2Node_DynamicCast_bSuccess_1) == 0x000180, "Member 'COMP_EnemyMovement_C_HandleNavObstacles::K2Node_DynamicCast_bSuccess_1' has a wrong offset!");
static_assert(offsetof(COMP_EnemyMovement_C_HandleNavObstacles, CallFunc_Not_PreBool_ReturnValue_1) == 0x000181, "Member 'COMP_EnemyMovement_C_HandleNavObstacles::CallFunc_Not_PreBool_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(COMP_EnemyMovement_C_HandleNavObstacles, K2Node_DynamicCast_AsINTERACT_Door_Base) == 0x000188, "Member 'COMP_EnemyMovement_C_HandleNavObstacles::K2Node_DynamicCast_AsINTERACT_Door_Base' has a wrong offset!");
static_assert(offsetof(COMP_EnemyMovement_C_HandleNavObstacles, K2Node_DynamicCast_bSuccess_2) == 0x000190, "Member 'COMP_EnemyMovement_C_HandleNavObstacles::K2Node_DynamicCast_bSuccess_2' has a wrong offset!");
static_assert(offsetof(COMP_EnemyMovement_C_HandleNavObstacles, CallFunc_GetVoxelPathLength_ReturnValue) == 0x000194, "Member 'COMP_EnemyMovement_C_HandleNavObstacles::CallFunc_GetVoxelPathLength_ReturnValue' has a wrong offset!");
static_assert(offsetof(COMP_EnemyMovement_C_HandleNavObstacles, CallFunc_Less_IntInt_ReturnValue) == 0x000198, "Member 'COMP_EnemyMovement_C_HandleNavObstacles::CallFunc_Less_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(COMP_EnemyMovement_C_HandleNavObstacles, CallFunc_GetPlayTimeInSeconds_ReturnValue) == 0x00019C, "Member 'COMP_EnemyMovement_C_HandleNavObstacles::CallFunc_GetPlayTimeInSeconds_ReturnValue' has a wrong offset!");
static_assert(offsetof(COMP_EnemyMovement_C_HandleNavObstacles, CallFunc_Add_FloatFloat_ReturnValue_1) == 0x0001A0, "Member 'COMP_EnemyMovement_C_HandleNavObstacles::CallFunc_Add_FloatFloat_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(COMP_EnemyMovement_C_HandleNavObstacles, CallFunc_GetPlayTimeInSeconds_ReturnValue_1) == 0x0001A4, "Member 'COMP_EnemyMovement_C_HandleNavObstacles::CallFunc_GetPlayTimeInSeconds_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(COMP_EnemyMovement_C_HandleNavObstacles, CallFunc_GreaterEqual_FloatFloat_ReturnValue) == 0x0001A8, "Member 'COMP_EnemyMovement_C_HandleNavObstacles::CallFunc_GreaterEqual_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(COMP_EnemyMovement_C_HandleNavObstacles, CallFunc_TryInteract_self_CastInput_3) == 0x0001B0, "Member 'COMP_EnemyMovement_C_HandleNavObstacles::CallFunc_TryInteract_self_CastInput_3' has a wrong offset!");
static_assert(offsetof(COMP_EnemyMovement_C_HandleNavObstacles, CallFunc_TryInteract_InteractResults_3) == 0x0001C0, "Member 'COMP_EnemyMovement_C_HandleNavObstacles::CallFunc_TryInteract_InteractResults_3' has a wrong offset!");
static_assert(offsetof(COMP_EnemyMovement_C_HandleNavObstacles, CallFunc_EqualEqual_ByteByte_ReturnValue_3) == 0x0001E0, "Member 'COMP_EnemyMovement_C_HandleNavObstacles::CallFunc_EqualEqual_ByteByte_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(COMP_EnemyMovement_C_HandleNavObstacles, CallFunc_GetFirstPathObstacleActor_OutStartPathNodeIndex) == 0x0001E4, "Member 'COMP_EnemyMovement_C_HandleNavObstacles::CallFunc_GetFirstPathObstacleActor_OutStartPathNodeIndex' has a wrong offset!");
static_assert(offsetof(COMP_EnemyMovement_C_HandleNavObstacles, CallFunc_GetFirstPathObstacleActor_OutEndPathNodeIndex) == 0x0001E8, "Member 'COMP_EnemyMovement_C_HandleNavObstacles::CallFunc_GetFirstPathObstacleActor_OutEndPathNodeIndex' has a wrong offset!");
static_assert(offsetof(COMP_EnemyMovement_C_HandleNavObstacles, CallFunc_GetFirstPathObstacleActor_ReturnValue) == 0x0001F0, "Member 'COMP_EnemyMovement_C_HandleNavObstacles::CallFunc_GetFirstPathObstacleActor_ReturnValue' has a wrong offset!");

// Function COMP_EnemyMovement.COMP_EnemyMovement_C.GetMoveSpeedTurnMultiplier
// 0x0044 (0x0044 - 0x0000)
struct COMP_EnemyMovement_C_GetMoveSpeedTurnMultiplier final
{
public:
	float                                         Multiplier;                                        // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         AngleToTargetDirection;                            // 0x0004(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_MapRangeClamped_ReturnValue;              // 0x0008(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Ease_ReturnValue;                         // 0x000C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsOnVerticalPathSection_Result;           // 0x0010(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_EqualEqual_ByteByte_ReturnValue;          // 0x0011(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BooleanAND_ReturnValue;                   // 0x0012(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Not_PreBool_ReturnValue;                  // 0x0013(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_EqualEqual_ByteByte_ReturnValue_1;        // 0x0014(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_15[0x3];                                       // 0x0015(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                CallFunc_Vector_Up_ReturnValue;                    // 0x0018(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_GetImmediateMoveDirection_Direction;      // 0x0024(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_GetImmediateMoveDirection_Direction_1;    // 0x0030(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_SignedAngleBetweenOnPlane_ReturnValue;    // 0x003C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_AngleBetweenNormals_ReturnValue;          // 0x0040(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(COMP_EnemyMovement_C_GetMoveSpeedTurnMultiplier) == 0x000004, "Wrong alignment on COMP_EnemyMovement_C_GetMoveSpeedTurnMultiplier");
static_assert(sizeof(COMP_EnemyMovement_C_GetMoveSpeedTurnMultiplier) == 0x000044, "Wrong size on COMP_EnemyMovement_C_GetMoveSpeedTurnMultiplier");
static_assert(offsetof(COMP_EnemyMovement_C_GetMoveSpeedTurnMultiplier, Multiplier) == 0x000000, "Member 'COMP_EnemyMovement_C_GetMoveSpeedTurnMultiplier::Multiplier' has a wrong offset!");
static_assert(offsetof(COMP_EnemyMovement_C_GetMoveSpeedTurnMultiplier, AngleToTargetDirection) == 0x000004, "Member 'COMP_EnemyMovement_C_GetMoveSpeedTurnMultiplier::AngleToTargetDirection' has a wrong offset!");
static_assert(offsetof(COMP_EnemyMovement_C_GetMoveSpeedTurnMultiplier, CallFunc_MapRangeClamped_ReturnValue) == 0x000008, "Member 'COMP_EnemyMovement_C_GetMoveSpeedTurnMultiplier::CallFunc_MapRangeClamped_ReturnValue' has a wrong offset!");
static_assert(offsetof(COMP_EnemyMovement_C_GetMoveSpeedTurnMultiplier, CallFunc_Ease_ReturnValue) == 0x00000C, "Member 'COMP_EnemyMovement_C_GetMoveSpeedTurnMultiplier::CallFunc_Ease_ReturnValue' has a wrong offset!");
static_assert(offsetof(COMP_EnemyMovement_C_GetMoveSpeedTurnMultiplier, CallFunc_IsOnVerticalPathSection_Result) == 0x000010, "Member 'COMP_EnemyMovement_C_GetMoveSpeedTurnMultiplier::CallFunc_IsOnVerticalPathSection_Result' has a wrong offset!");
static_assert(offsetof(COMP_EnemyMovement_C_GetMoveSpeedTurnMultiplier, CallFunc_EqualEqual_ByteByte_ReturnValue) == 0x000011, "Member 'COMP_EnemyMovement_C_GetMoveSpeedTurnMultiplier::CallFunc_EqualEqual_ByteByte_ReturnValue' has a wrong offset!");
static_assert(offsetof(COMP_EnemyMovement_C_GetMoveSpeedTurnMultiplier, CallFunc_BooleanAND_ReturnValue) == 0x000012, "Member 'COMP_EnemyMovement_C_GetMoveSpeedTurnMultiplier::CallFunc_BooleanAND_ReturnValue' has a wrong offset!");
static_assert(offsetof(COMP_EnemyMovement_C_GetMoveSpeedTurnMultiplier, CallFunc_Not_PreBool_ReturnValue) == 0x000013, "Member 'COMP_EnemyMovement_C_GetMoveSpeedTurnMultiplier::CallFunc_Not_PreBool_ReturnValue' has a wrong offset!");
static_assert(offsetof(COMP_EnemyMovement_C_GetMoveSpeedTurnMultiplier, CallFunc_EqualEqual_ByteByte_ReturnValue_1) == 0x000014, "Member 'COMP_EnemyMovement_C_GetMoveSpeedTurnMultiplier::CallFunc_EqualEqual_ByteByte_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(COMP_EnemyMovement_C_GetMoveSpeedTurnMultiplier, CallFunc_Vector_Up_ReturnValue) == 0x000018, "Member 'COMP_EnemyMovement_C_GetMoveSpeedTurnMultiplier::CallFunc_Vector_Up_ReturnValue' has a wrong offset!");
static_assert(offsetof(COMP_EnemyMovement_C_GetMoveSpeedTurnMultiplier, CallFunc_GetImmediateMoveDirection_Direction) == 0x000024, "Member 'COMP_EnemyMovement_C_GetMoveSpeedTurnMultiplier::CallFunc_GetImmediateMoveDirection_Direction' has a wrong offset!");
static_assert(offsetof(COMP_EnemyMovement_C_GetMoveSpeedTurnMultiplier, CallFunc_GetImmediateMoveDirection_Direction_1) == 0x000030, "Member 'COMP_EnemyMovement_C_GetMoveSpeedTurnMultiplier::CallFunc_GetImmediateMoveDirection_Direction_1' has a wrong offset!");
static_assert(offsetof(COMP_EnemyMovement_C_GetMoveSpeedTurnMultiplier, CallFunc_SignedAngleBetweenOnPlane_ReturnValue) == 0x00003C, "Member 'COMP_EnemyMovement_C_GetMoveSpeedTurnMultiplier::CallFunc_SignedAngleBetweenOnPlane_ReturnValue' has a wrong offset!");
static_assert(offsetof(COMP_EnemyMovement_C_GetMoveSpeedTurnMultiplier, CallFunc_AngleBetweenNormals_ReturnValue) == 0x000040, "Member 'COMP_EnemyMovement_C_GetMoveSpeedTurnMultiplier::CallFunc_AngleBetweenNormals_ReturnValue' has a wrong offset!");

}

