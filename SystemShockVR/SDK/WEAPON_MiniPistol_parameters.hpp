#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: WEAPON_MiniPistol

#include "Basic.hpp"

#include "STRUCT_WeaponMode_structs.hpp"
#include "CoreUObject_structs.hpp"
#include "Engine_structs.hpp"


namespace SDK::Params
{

// Function WEAPON_MiniPistol.WEAPON_MiniPistol_C.ExecuteUbergraph_WEAPON_MiniPistol
// 0x0068 (0x0068 - 0x0000)
struct WEAPON_MiniPistol_C_ExecuteUbergraph_WEAPON_MiniPistol final
{
public:
	int32                                         EntryPoint;                                        // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UObject*                                Temp_object_Variable;                              // 0x0008(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class USoundCue*                              K2Node_DynamicCast_AsSound_Cue;                    // 0x0010(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0018(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_19[0x7];                                       // 0x0019(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UObject*                                CallFunc_Conv_SoftObjectReferenceToObject_ReturnValue; // 0x0020(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UMeshComponent*                         CallFunc_GetWeaponMeshComponent_Result;            // 0x0028(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class USoundCue*                              K2Node_DynamicCast_AsSound_Cue_1;                  // 0x0030(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess_1;                     // 0x0038(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_39[0x3];                                       // 0x0039(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                CallFunc_GetSocketLocation_ReturnValue;            // 0x003C(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0048(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_49[0x7];                                       // 0x0049(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UObject*                                K2Node_CustomEvent_Loaded;                         // 0x0050(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TDelegate<void(class UObject* Loaded)>        K2Node_CreateDelegate_OutputDelegate;              // 0x0058(0x0010)(ZeroConstructor, NoDestructor)
};
static_assert(alignof(WEAPON_MiniPistol_C_ExecuteUbergraph_WEAPON_MiniPistol) == 0x000008, "Wrong alignment on WEAPON_MiniPistol_C_ExecuteUbergraph_WEAPON_MiniPistol");
static_assert(sizeof(WEAPON_MiniPistol_C_ExecuteUbergraph_WEAPON_MiniPistol) == 0x000068, "Wrong size on WEAPON_MiniPistol_C_ExecuteUbergraph_WEAPON_MiniPistol");
static_assert(offsetof(WEAPON_MiniPistol_C_ExecuteUbergraph_WEAPON_MiniPistol, EntryPoint) == 0x000000, "Member 'WEAPON_MiniPistol_C_ExecuteUbergraph_WEAPON_MiniPistol::EntryPoint' has a wrong offset!");
static_assert(offsetof(WEAPON_MiniPistol_C_ExecuteUbergraph_WEAPON_MiniPistol, Temp_object_Variable) == 0x000008, "Member 'WEAPON_MiniPistol_C_ExecuteUbergraph_WEAPON_MiniPistol::Temp_object_Variable' has a wrong offset!");
static_assert(offsetof(WEAPON_MiniPistol_C_ExecuteUbergraph_WEAPON_MiniPistol, K2Node_DynamicCast_AsSound_Cue) == 0x000010, "Member 'WEAPON_MiniPistol_C_ExecuteUbergraph_WEAPON_MiniPistol::K2Node_DynamicCast_AsSound_Cue' has a wrong offset!");
static_assert(offsetof(WEAPON_MiniPistol_C_ExecuteUbergraph_WEAPON_MiniPistol, K2Node_DynamicCast_bSuccess) == 0x000018, "Member 'WEAPON_MiniPistol_C_ExecuteUbergraph_WEAPON_MiniPistol::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(WEAPON_MiniPistol_C_ExecuteUbergraph_WEAPON_MiniPistol, CallFunc_Conv_SoftObjectReferenceToObject_ReturnValue) == 0x000020, "Member 'WEAPON_MiniPistol_C_ExecuteUbergraph_WEAPON_MiniPistol::CallFunc_Conv_SoftObjectReferenceToObject_ReturnValue' has a wrong offset!");
static_assert(offsetof(WEAPON_MiniPistol_C_ExecuteUbergraph_WEAPON_MiniPistol, CallFunc_GetWeaponMeshComponent_Result) == 0x000028, "Member 'WEAPON_MiniPistol_C_ExecuteUbergraph_WEAPON_MiniPistol::CallFunc_GetWeaponMeshComponent_Result' has a wrong offset!");
static_assert(offsetof(WEAPON_MiniPistol_C_ExecuteUbergraph_WEAPON_MiniPistol, K2Node_DynamicCast_AsSound_Cue_1) == 0x000030, "Member 'WEAPON_MiniPistol_C_ExecuteUbergraph_WEAPON_MiniPistol::K2Node_DynamicCast_AsSound_Cue_1' has a wrong offset!");
static_assert(offsetof(WEAPON_MiniPistol_C_ExecuteUbergraph_WEAPON_MiniPistol, K2Node_DynamicCast_bSuccess_1) == 0x000038, "Member 'WEAPON_MiniPistol_C_ExecuteUbergraph_WEAPON_MiniPistol::K2Node_DynamicCast_bSuccess_1' has a wrong offset!");
static_assert(offsetof(WEAPON_MiniPistol_C_ExecuteUbergraph_WEAPON_MiniPistol, CallFunc_GetSocketLocation_ReturnValue) == 0x00003C, "Member 'WEAPON_MiniPistol_C_ExecuteUbergraph_WEAPON_MiniPistol::CallFunc_GetSocketLocation_ReturnValue' has a wrong offset!");
static_assert(offsetof(WEAPON_MiniPistol_C_ExecuteUbergraph_WEAPON_MiniPistol, CallFunc_IsValid_ReturnValue) == 0x000048, "Member 'WEAPON_MiniPistol_C_ExecuteUbergraph_WEAPON_MiniPistol::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(WEAPON_MiniPistol_C_ExecuteUbergraph_WEAPON_MiniPistol, K2Node_CustomEvent_Loaded) == 0x000050, "Member 'WEAPON_MiniPistol_C_ExecuteUbergraph_WEAPON_MiniPistol::K2Node_CustomEvent_Loaded' has a wrong offset!");
static_assert(offsetof(WEAPON_MiniPistol_C_ExecuteUbergraph_WEAPON_MiniPistol, K2Node_CreateDelegate_OutputDelegate) == 0x000058, "Member 'WEAPON_MiniPistol_C_ExecuteUbergraph_WEAPON_MiniPistol::K2Node_CreateDelegate_OutputDelegate' has a wrong offset!");

// Function WEAPON_MiniPistol.WEAPON_MiniPistol_C.OnLoaded_2CC67EA24D4297D5895AF4B7131E9430
// 0x0008 (0x0008 - 0x0000)
struct WEAPON_MiniPistol_C_OnLoaded_2CC67EA24D4297D5895AF4B7131E9430 final
{
public:
	class UObject*                                Loaded;                                            // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(WEAPON_MiniPistol_C_OnLoaded_2CC67EA24D4297D5895AF4B7131E9430) == 0x000008, "Wrong alignment on WEAPON_MiniPistol_C_OnLoaded_2CC67EA24D4297D5895AF4B7131E9430");
static_assert(sizeof(WEAPON_MiniPistol_C_OnLoaded_2CC67EA24D4297D5895AF4B7131E9430) == 0x000008, "Wrong size on WEAPON_MiniPistol_C_OnLoaded_2CC67EA24D4297D5895AF4B7131E9430");
static_assert(offsetof(WEAPON_MiniPistol_C_OnLoaded_2CC67EA24D4297D5895AF4B7131E9430, Loaded) == 0x000000, "Member 'WEAPON_MiniPistol_C_OnLoaded_2CC67EA24D4297D5895AF4B7131E9430::Loaded' has a wrong offset!");

// Function WEAPON_MiniPistol.WEAPON_MiniPistol_C.OnWeaponBecameActivatable
// 0x0010 (0x0010 - 0x0000)
struct WEAPON_MiniPistol_C_OnWeaponBecameActivatable final
{
public:
	class APAWN_SystemShockCharacter_C*           Character;                                         // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          ShowImmediately;                                   // 0x0008(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(WEAPON_MiniPistol_C_OnWeaponBecameActivatable) == 0x000008, "Wrong alignment on WEAPON_MiniPistol_C_OnWeaponBecameActivatable");
static_assert(sizeof(WEAPON_MiniPistol_C_OnWeaponBecameActivatable) == 0x000010, "Wrong size on WEAPON_MiniPistol_C_OnWeaponBecameActivatable");
static_assert(offsetof(WEAPON_MiniPistol_C_OnWeaponBecameActivatable, Character) == 0x000000, "Member 'WEAPON_MiniPistol_C_OnWeaponBecameActivatable::Character' has a wrong offset!");
static_assert(offsetof(WEAPON_MiniPistol_C_OnWeaponBecameActivatable, ShowImmediately) == 0x000008, "Member 'WEAPON_MiniPistol_C_OnWeaponBecameActivatable::ShowImmediately' has a wrong offset!");

// Function WEAPON_MiniPistol.WEAPON_MiniPistol_C.SetHasBarrelExtension
// 0x0001 (0x0001 - 0x0000)
struct WEAPON_MiniPistol_C_SetHasBarrelExtension final
{
public:
	bool                                          State;                                             // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(WEAPON_MiniPistol_C_SetHasBarrelExtension) == 0x000001, "Wrong alignment on WEAPON_MiniPistol_C_SetHasBarrelExtension");
static_assert(sizeof(WEAPON_MiniPistol_C_SetHasBarrelExtension) == 0x000001, "Wrong size on WEAPON_MiniPistol_C_SetHasBarrelExtension");
static_assert(offsetof(WEAPON_MiniPistol_C_SetHasBarrelExtension, State) == 0x000000, "Member 'WEAPON_MiniPistol_C_SetHasBarrelExtension::State' has a wrong offset!");

// Function WEAPON_MiniPistol.WEAPON_MiniPistol_C.UpdateDryIdleSequence
// 0x0058 (0x0058 - 0x0000)
struct WEAPON_MiniPistol_C_UpdateDryIdleSequence final
{
public:
	class APAWN_SystemShockCharacter_C*           OwnerCharacter;                                    // 0x0000(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UAnimInstance*                          CallFunc_GetAnimInstance_ReturnValue;              // 0x0008(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UAnimInstance*                          CallFunc_GetAnimInstance_ReturnValue_1;            // 0x0010(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TScriptInterface<class IINTERF_ANIM_Hacker_C> K2Node_DynamicCast_AsINTERF_ANIM_Hacker;           // 0x0018(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0028(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_29[0x7];                                       // 0x0029(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TScriptInterface<class IINTERF_ANIM_Hacker_C> K2Node_DynamicCast_AsINTERF_ANIM_Hacker_1;         // 0x0030(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          K2Node_DynamicCast_bSuccess_1;                     // 0x0040(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_41[0x7];                                       // 0x0041(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class APAWN_SystemShockCharacter_C*           CallFunc_GetOwnerCharacter_Character;              // 0x0048(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_SetOverrideIdleSequence_Result;           // 0x0050(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_SetOverrideIdleSequence_Result_1;         // 0x0051(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0052(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_HasAmmoInMagazineOrChamber_Result;        // 0x0053(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Not_PreBool_ReturnValue;                  // 0x0054(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(WEAPON_MiniPistol_C_UpdateDryIdleSequence) == 0x000008, "Wrong alignment on WEAPON_MiniPistol_C_UpdateDryIdleSequence");
static_assert(sizeof(WEAPON_MiniPistol_C_UpdateDryIdleSequence) == 0x000058, "Wrong size on WEAPON_MiniPistol_C_UpdateDryIdleSequence");
static_assert(offsetof(WEAPON_MiniPistol_C_UpdateDryIdleSequence, OwnerCharacter) == 0x000000, "Member 'WEAPON_MiniPistol_C_UpdateDryIdleSequence::OwnerCharacter' has a wrong offset!");
static_assert(offsetof(WEAPON_MiniPistol_C_UpdateDryIdleSequence, CallFunc_GetAnimInstance_ReturnValue) == 0x000008, "Member 'WEAPON_MiniPistol_C_UpdateDryIdleSequence::CallFunc_GetAnimInstance_ReturnValue' has a wrong offset!");
static_assert(offsetof(WEAPON_MiniPistol_C_UpdateDryIdleSequence, CallFunc_GetAnimInstance_ReturnValue_1) == 0x000010, "Member 'WEAPON_MiniPistol_C_UpdateDryIdleSequence::CallFunc_GetAnimInstance_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(WEAPON_MiniPistol_C_UpdateDryIdleSequence, K2Node_DynamicCast_AsINTERF_ANIM_Hacker) == 0x000018, "Member 'WEAPON_MiniPistol_C_UpdateDryIdleSequence::K2Node_DynamicCast_AsINTERF_ANIM_Hacker' has a wrong offset!");
static_assert(offsetof(WEAPON_MiniPistol_C_UpdateDryIdleSequence, K2Node_DynamicCast_bSuccess) == 0x000028, "Member 'WEAPON_MiniPistol_C_UpdateDryIdleSequence::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(WEAPON_MiniPistol_C_UpdateDryIdleSequence, K2Node_DynamicCast_AsINTERF_ANIM_Hacker_1) == 0x000030, "Member 'WEAPON_MiniPistol_C_UpdateDryIdleSequence::K2Node_DynamicCast_AsINTERF_ANIM_Hacker_1' has a wrong offset!");
static_assert(offsetof(WEAPON_MiniPistol_C_UpdateDryIdleSequence, K2Node_DynamicCast_bSuccess_1) == 0x000040, "Member 'WEAPON_MiniPistol_C_UpdateDryIdleSequence::K2Node_DynamicCast_bSuccess_1' has a wrong offset!");
static_assert(offsetof(WEAPON_MiniPistol_C_UpdateDryIdleSequence, CallFunc_GetOwnerCharacter_Character) == 0x000048, "Member 'WEAPON_MiniPistol_C_UpdateDryIdleSequence::CallFunc_GetOwnerCharacter_Character' has a wrong offset!");
static_assert(offsetof(WEAPON_MiniPistol_C_UpdateDryIdleSequence, CallFunc_SetOverrideIdleSequence_Result) == 0x000050, "Member 'WEAPON_MiniPistol_C_UpdateDryIdleSequence::CallFunc_SetOverrideIdleSequence_Result' has a wrong offset!");
static_assert(offsetof(WEAPON_MiniPistol_C_UpdateDryIdleSequence, CallFunc_SetOverrideIdleSequence_Result_1) == 0x000051, "Member 'WEAPON_MiniPistol_C_UpdateDryIdleSequence::CallFunc_SetOverrideIdleSequence_Result_1' has a wrong offset!");
static_assert(offsetof(WEAPON_MiniPistol_C_UpdateDryIdleSequence, CallFunc_IsValid_ReturnValue) == 0x000052, "Member 'WEAPON_MiniPistol_C_UpdateDryIdleSequence::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(WEAPON_MiniPistol_C_UpdateDryIdleSequence, CallFunc_HasAmmoInMagazineOrChamber_Result) == 0x000053, "Member 'WEAPON_MiniPistol_C_UpdateDryIdleSequence::CallFunc_HasAmmoInMagazineOrChamber_Result' has a wrong offset!");
static_assert(offsetof(WEAPON_MiniPistol_C_UpdateDryIdleSequence, CallFunc_Not_PreBool_ReturnValue) == 0x000054, "Member 'WEAPON_MiniPistol_C_UpdateDryIdleSequence::CallFunc_Not_PreBool_ReturnValue' has a wrong offset!");

// Function WEAPON_MiniPistol.WEAPON_MiniPistol_C.FireProjectile
// 0x0068 (0x0068 - 0x0000)
struct WEAPON_MiniPistol_C_FireProjectile final
{
public:
	class AActor*                                 FiredProjectile;                                   // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                Direction;                                         // 0x0008(0x000C)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Temp_float_Variable;                               // 0x0014(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Temp_float_Variable_1;                             // 0x0018(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Variable;                                // 0x001C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_1D[0x3];                                       // 0x001D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         K2Node_Select_Default;                             // 0x0020(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TDelegate<void()>                             K2Node_CreateDelegate_OutputDelegate;              // 0x0024(0x0010)(ZeroConstructor, NoDestructor)
	uint8                                         Pad_34[0x4];                                       // 0x0034(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class AActor*                                 CallFunc_FireProjectile_FiredProjectile;           // 0x0038(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_FireProjectile_Direction;                 // 0x0040(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_4C[0x4];                                       // 0x004C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTimerHandle                           CallFunc_K2_SetTimerDelegate_ReturnValue;          // 0x0050(0x0008)(NoDestructor, HasGetValueTypeHash)
	class ASmallBulletProjectile_C*               K2Node_DynamicCast_AsSmall_Bullet_Projectile;      // 0x0058(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0060(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(WEAPON_MiniPistol_C_FireProjectile) == 0x000008, "Wrong alignment on WEAPON_MiniPistol_C_FireProjectile");
static_assert(sizeof(WEAPON_MiniPistol_C_FireProjectile) == 0x000068, "Wrong size on WEAPON_MiniPistol_C_FireProjectile");
static_assert(offsetof(WEAPON_MiniPistol_C_FireProjectile, FiredProjectile) == 0x000000, "Member 'WEAPON_MiniPistol_C_FireProjectile::FiredProjectile' has a wrong offset!");
static_assert(offsetof(WEAPON_MiniPistol_C_FireProjectile, Direction) == 0x000008, "Member 'WEAPON_MiniPistol_C_FireProjectile::Direction' has a wrong offset!");
static_assert(offsetof(WEAPON_MiniPistol_C_FireProjectile, Temp_float_Variable) == 0x000014, "Member 'WEAPON_MiniPistol_C_FireProjectile::Temp_float_Variable' has a wrong offset!");
static_assert(offsetof(WEAPON_MiniPistol_C_FireProjectile, Temp_float_Variable_1) == 0x000018, "Member 'WEAPON_MiniPistol_C_FireProjectile::Temp_float_Variable_1' has a wrong offset!");
static_assert(offsetof(WEAPON_MiniPistol_C_FireProjectile, Temp_bool_Variable) == 0x00001C, "Member 'WEAPON_MiniPistol_C_FireProjectile::Temp_bool_Variable' has a wrong offset!");
static_assert(offsetof(WEAPON_MiniPistol_C_FireProjectile, K2Node_Select_Default) == 0x000020, "Member 'WEAPON_MiniPistol_C_FireProjectile::K2Node_Select_Default' has a wrong offset!");
static_assert(offsetof(WEAPON_MiniPistol_C_FireProjectile, K2Node_CreateDelegate_OutputDelegate) == 0x000024, "Member 'WEAPON_MiniPistol_C_FireProjectile::K2Node_CreateDelegate_OutputDelegate' has a wrong offset!");
static_assert(offsetof(WEAPON_MiniPistol_C_FireProjectile, CallFunc_FireProjectile_FiredProjectile) == 0x000038, "Member 'WEAPON_MiniPistol_C_FireProjectile::CallFunc_FireProjectile_FiredProjectile' has a wrong offset!");
static_assert(offsetof(WEAPON_MiniPistol_C_FireProjectile, CallFunc_FireProjectile_Direction) == 0x000040, "Member 'WEAPON_MiniPistol_C_FireProjectile::CallFunc_FireProjectile_Direction' has a wrong offset!");
static_assert(offsetof(WEAPON_MiniPistol_C_FireProjectile, CallFunc_K2_SetTimerDelegate_ReturnValue) == 0x000050, "Member 'WEAPON_MiniPistol_C_FireProjectile::CallFunc_K2_SetTimerDelegate_ReturnValue' has a wrong offset!");
static_assert(offsetof(WEAPON_MiniPistol_C_FireProjectile, K2Node_DynamicCast_AsSmall_Bullet_Projectile) == 0x000058, "Member 'WEAPON_MiniPistol_C_FireProjectile::K2Node_DynamicCast_AsSmall_Bullet_Projectile' has a wrong offset!");
static_assert(offsetof(WEAPON_MiniPistol_C_FireProjectile, K2Node_DynamicCast_bSuccess) == 0x000060, "Member 'WEAPON_MiniPistol_C_FireProjectile::K2Node_DynamicCast_bSuccess' has a wrong offset!");

// Function WEAPON_MiniPistol.WEAPON_MiniPistol_C.GetProjectileClass
// 0x0008 (0x0008 - 0x0000)
struct WEAPON_MiniPistol_C_GetProjectileClass final
{
public:
	class UClass*                                 Result;                                            // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(WEAPON_MiniPistol_C_GetProjectileClass) == 0x000008, "Wrong alignment on WEAPON_MiniPistol_C_GetProjectileClass");
static_assert(sizeof(WEAPON_MiniPistol_C_GetProjectileClass) == 0x000008, "Wrong size on WEAPON_MiniPistol_C_GetProjectileClass");
static_assert(offsetof(WEAPON_MiniPistol_C_GetProjectileClass, Result) == 0x000000, "Member 'WEAPON_MiniPistol_C_GetProjectileClass::Result' has a wrong offset!");

// Function WEAPON_MiniPistol.WEAPON_MiniPistol_C.OnBecomeUnactivatable
// 0x0002 (0x0002 - 0x0000)
struct WEAPON_MiniPistol_C_OnBecomeUnactivatable final
{
public:
	bool                                          Result;                                            // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_OnBecomeUnactivatable_Result;             // 0x0001(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(WEAPON_MiniPistol_C_OnBecomeUnactivatable) == 0x000001, "Wrong alignment on WEAPON_MiniPistol_C_OnBecomeUnactivatable");
static_assert(sizeof(WEAPON_MiniPistol_C_OnBecomeUnactivatable) == 0x000002, "Wrong size on WEAPON_MiniPistol_C_OnBecomeUnactivatable");
static_assert(offsetof(WEAPON_MiniPistol_C_OnBecomeUnactivatable, Result) == 0x000000, "Member 'WEAPON_MiniPistol_C_OnBecomeUnactivatable::Result' has a wrong offset!");
static_assert(offsetof(WEAPON_MiniPistol_C_OnBecomeUnactivatable, CallFunc_OnBecomeUnactivatable_Result) == 0x000001, "Member 'WEAPON_MiniPistol_C_OnBecomeUnactivatable::CallFunc_OnBecomeUnactivatable_Result' has a wrong offset!");

// Function WEAPON_MiniPistol.WEAPON_MiniPistol_C.HasBurstFireOption
// 0x0001 (0x0001 - 0x0000)
struct WEAPON_MiniPistol_C_HasBurstFireOption final
{
public:
	bool                                          Result;                                            // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(WEAPON_MiniPistol_C_HasBurstFireOption) == 0x000001, "Wrong alignment on WEAPON_MiniPistol_C_HasBurstFireOption");
static_assert(sizeof(WEAPON_MiniPistol_C_HasBurstFireOption) == 0x000001, "Wrong size on WEAPON_MiniPistol_C_HasBurstFireOption");
static_assert(offsetof(WEAPON_MiniPistol_C_HasBurstFireOption, Result) == 0x000000, "Member 'WEAPON_MiniPistol_C_HasBurstFireOption::Result' has a wrong offset!");

// Function WEAPON_MiniPistol.WEAPON_MiniPistol_C.IsUsingBurstFire
// 0x0003 (0x0003 - 0x0000)
struct WEAPON_MiniPistol_C_IsUsingBurstFire final
{
public:
	bool                                          Result;                                            // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_HasBurstFireOption_Result;                // 0x0001(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Not_PreBool_ReturnValue;                  // 0x0002(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(WEAPON_MiniPistol_C_IsUsingBurstFire) == 0x000001, "Wrong alignment on WEAPON_MiniPistol_C_IsUsingBurstFire");
static_assert(sizeof(WEAPON_MiniPistol_C_IsUsingBurstFire) == 0x000003, "Wrong size on WEAPON_MiniPistol_C_IsUsingBurstFire");
static_assert(offsetof(WEAPON_MiniPistol_C_IsUsingBurstFire, Result) == 0x000000, "Member 'WEAPON_MiniPistol_C_IsUsingBurstFire::Result' has a wrong offset!");
static_assert(offsetof(WEAPON_MiniPistol_C_IsUsingBurstFire, CallFunc_HasBurstFireOption_Result) == 0x000001, "Member 'WEAPON_MiniPistol_C_IsUsingBurstFire::CallFunc_HasBurstFireOption_Result' has a wrong offset!");
static_assert(offsetof(WEAPON_MiniPistol_C_IsUsingBurstFire, CallFunc_Not_PreBool_ReturnValue) == 0x000002, "Member 'WEAPON_MiniPistol_C_IsUsingBurstFire::CallFunc_Not_PreBool_ReturnValue' has a wrong offset!");

// Function WEAPON_MiniPistol.WEAPON_MiniPistol_C.GetWeaponModeDefaults
// 0x0310 (0x0310 - 0x0000)
struct WEAPON_MiniPistol_C_GetWeaponModeDefaults final
{
public:
	int32                                         Index_0;                                           // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FSTRUCT_WeaponMode                     Mode;                                              // 0x0008(0x0100)(Parm, OutParm, HasGetValueTypeHash)
	struct FSTRUCT_WeaponMode                     ModeDefaults;                                      // 0x0108(0x0100)(Edit, BlueprintVisible, HasGetValueTypeHash)
	struct FSTRUCT_WeaponMode                     CallFunc_GetWeaponModeDefaults_Mode;               // 0x0208(0x0100)(HasGetValueTypeHash)
	bool                                          CallFunc_IsUsingBurstFire_Result;                  // 0x0308(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(WEAPON_MiniPistol_C_GetWeaponModeDefaults) == 0x000008, "Wrong alignment on WEAPON_MiniPistol_C_GetWeaponModeDefaults");
static_assert(sizeof(WEAPON_MiniPistol_C_GetWeaponModeDefaults) == 0x000310, "Wrong size on WEAPON_MiniPistol_C_GetWeaponModeDefaults");
static_assert(offsetof(WEAPON_MiniPistol_C_GetWeaponModeDefaults, Index_0) == 0x000000, "Member 'WEAPON_MiniPistol_C_GetWeaponModeDefaults::Index_0' has a wrong offset!");
static_assert(offsetof(WEAPON_MiniPistol_C_GetWeaponModeDefaults, Mode) == 0x000008, "Member 'WEAPON_MiniPistol_C_GetWeaponModeDefaults::Mode' has a wrong offset!");
static_assert(offsetof(WEAPON_MiniPistol_C_GetWeaponModeDefaults, ModeDefaults) == 0x000108, "Member 'WEAPON_MiniPistol_C_GetWeaponModeDefaults::ModeDefaults' has a wrong offset!");
static_assert(offsetof(WEAPON_MiniPistol_C_GetWeaponModeDefaults, CallFunc_GetWeaponModeDefaults_Mode) == 0x000208, "Member 'WEAPON_MiniPistol_C_GetWeaponModeDefaults::CallFunc_GetWeaponModeDefaults_Mode' has a wrong offset!");
static_assert(offsetof(WEAPON_MiniPistol_C_GetWeaponModeDefaults, CallFunc_IsUsingBurstFire_Result) == 0x000308, "Member 'WEAPON_MiniPistol_C_GetWeaponModeDefaults::CallFunc_IsUsingBurstFire_Result' has a wrong offset!");

// Function WEAPON_MiniPistol.WEAPON_MiniPistol_C.SetUsingBurstFire
// 0x0003 (0x0003 - 0x0000)
struct WEAPON_MiniPistol_C_SetUsingBurstFire final
{
public:
	bool                                          State;                                             // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_HasBurstFireOption_Result;                // 0x0001(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Not_PreBool_ReturnValue;                  // 0x0002(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(WEAPON_MiniPistol_C_SetUsingBurstFire) == 0x000001, "Wrong alignment on WEAPON_MiniPistol_C_SetUsingBurstFire");
static_assert(sizeof(WEAPON_MiniPistol_C_SetUsingBurstFire) == 0x000003, "Wrong size on WEAPON_MiniPistol_C_SetUsingBurstFire");
static_assert(offsetof(WEAPON_MiniPistol_C_SetUsingBurstFire, State) == 0x000000, "Member 'WEAPON_MiniPistol_C_SetUsingBurstFire::State' has a wrong offset!");
static_assert(offsetof(WEAPON_MiniPistol_C_SetUsingBurstFire, CallFunc_HasBurstFireOption_Result) == 0x000001, "Member 'WEAPON_MiniPistol_C_SetUsingBurstFire::CallFunc_HasBurstFireOption_Result' has a wrong offset!");
static_assert(offsetof(WEAPON_MiniPistol_C_SetUsingBurstFire, CallFunc_Not_PreBool_ReturnValue) == 0x000002, "Member 'WEAPON_MiniPistol_C_SetUsingBurstFire::CallFunc_Not_PreBool_ReturnValue' has a wrong offset!");

}

