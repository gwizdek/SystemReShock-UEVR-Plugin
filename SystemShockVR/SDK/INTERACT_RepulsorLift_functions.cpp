#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: INTERACT_RepulsorLift

#include "Basic.hpp"

#include "INTERACT_RepulsorLift_classes.hpp"
#include "INTERACT_RepulsorLift_parameters.hpp"


namespace SDK
{

// Function INTERACT_RepulsorLift.INTERACT_RepulsorLift_C.ExecuteUbergraph_INTERACT_RepulsorLift
// (Final, UbergraphFunction, HasDefaults)
// Parameters:
// int32                                   EntryPoint                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void AINTERACT_RepulsorLift_C::ExecuteUbergraph_INTERACT_RepulsorLift(int32 EntryPoint)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("INTERACT_RepulsorLift_C", "ExecuteUbergraph_INTERACT_RepulsorLift");

	Params::INTERACT_RepulsorLift_C_ExecuteUbergraph_INTERACT_RepulsorLift Parms{};

	Parms.EntryPoint = EntryPoint;

	UObject::ProcessEvent(Func, &Parms);
}


// Function INTERACT_RepulsorLift.INTERACT_RepulsorLift_C.BndEvt__COMP_CullableNavModifier_K2Node_ComponentBoundEvent_3_CullableVisibilitySignature__DelegateSignature
// (BlueprintEvent)
// Parameters:
// bool                                    bVisibleState                                          (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)

void AINTERACT_RepulsorLift_C::BndEvt__COMP_CullableNavModifier_K2Node_ComponentBoundEvent_3_CullableVisibilitySignature__DelegateSignature(bool bVisibleState)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("INTERACT_RepulsorLift_C", "BndEvt__COMP_CullableNavModifier_K2Node_ComponentBoundEvent_3_CullableVisibilitySignature__DelegateSignature");

	Params::INTERACT_RepulsorLift_C_BndEvt__COMP_CullableNavModifier_K2Node_ComponentBoundEvent_3_CullableVisibilitySignature__DelegateSignature Parms{};

	Parms.bVisibleState = bVisibleState;

	UObject::ProcessEvent(Func, &Parms);
}


// Function INTERACT_RepulsorLift.INTERACT_RepulsorLift_C.BndEvt__RepulsorField_K2Node_ComponentBoundEvent_1_ComponentEndOverlapSignature__DelegateSignature
// (BlueprintEvent)
// Parameters:
// class UPrimitiveComponent*              OverlappedComponent                                    (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class AActor*                           OtherActor                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class UPrimitiveComponent*              OtherComp                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// int32                                   OtherBodyIndex                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void AINTERACT_RepulsorLift_C::BndEvt__RepulsorField_K2Node_ComponentBoundEvent_1_ComponentEndOverlapSignature__DelegateSignature(class UPrimitiveComponent* OverlappedComponent, class AActor* OtherActor, class UPrimitiveComponent* OtherComp, int32 OtherBodyIndex)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("INTERACT_RepulsorLift_C", "BndEvt__RepulsorField_K2Node_ComponentBoundEvent_1_ComponentEndOverlapSignature__DelegateSignature");

	Params::INTERACT_RepulsorLift_C_BndEvt__RepulsorField_K2Node_ComponentBoundEvent_1_ComponentEndOverlapSignature__DelegateSignature Parms{};

	Parms.OverlappedComponent = OverlappedComponent;
	Parms.OtherActor = OtherActor;
	Parms.OtherComp = OtherComp;
	Parms.OtherBodyIndex = OtherBodyIndex;

	UObject::ProcessEvent(Func, &Parms);
}


// Function INTERACT_RepulsorLift.INTERACT_RepulsorLift_C.BndEvt__RepulsorField_K2Node_ComponentBoundEvent_0_ComponentBeginOverlapSignature__DelegateSignature
// (HasOutParams, BlueprintEvent)
// Parameters:
// class UPrimitiveComponent*              OverlappedComponent                                    (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class AActor*                           OtherActor                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class UPrimitiveComponent*              OtherComp                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// int32                                   OtherBodyIndex                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    bFromSweep                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// struct FHitResult                       SweepResult                                            (ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, ContainsInstancedReference)

void AINTERACT_RepulsorLift_C::BndEvt__RepulsorField_K2Node_ComponentBoundEvent_0_ComponentBeginOverlapSignature__DelegateSignature(class UPrimitiveComponent* OverlappedComponent, class AActor* OtherActor, class UPrimitiveComponent* OtherComp, int32 OtherBodyIndex, bool bFromSweep, const struct FHitResult& SweepResult)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("INTERACT_RepulsorLift_C", "BndEvt__RepulsorField_K2Node_ComponentBoundEvent_0_ComponentBeginOverlapSignature__DelegateSignature");

	Params::INTERACT_RepulsorLift_C_BndEvt__RepulsorField_K2Node_ComponentBoundEvent_0_ComponentBeginOverlapSignature__DelegateSignature Parms{};

	Parms.OverlappedComponent = OverlappedComponent;
	Parms.OtherActor = OtherActor;
	Parms.OtherComp = OtherComp;
	Parms.OtherBodyIndex = OtherBodyIndex;
	Parms.bFromSweep = bFromSweep;
	Parms.SweepResult = std::move(SweepResult);

	UObject::ProcessEvent(Func, &Parms);
}


// Function INTERACT_RepulsorLift.INTERACT_RepulsorLift_C.ReceiveTick
// (Event, Public, BlueprintEvent)
// Parameters:
// float                                   DeltaSeconds                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void AINTERACT_RepulsorLift_C::ReceiveTick(float DeltaSeconds)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("INTERACT_RepulsorLift_C", "ReceiveTick");

	Params::INTERACT_RepulsorLift_C_ReceiveTick Parms{};

	Parms.DeltaSeconds = DeltaSeconds;

	UObject::ProcessEvent(Func, &Parms);
}


// Function INTERACT_RepulsorLift.INTERACT_RepulsorLift_C.ReceiveBeginPlay
// (Event, Protected, BlueprintEvent)

void AINTERACT_RepulsorLift_C::ReceiveBeginPlay()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("INTERACT_RepulsorLift_C", "ReceiveBeginPlay");

	UObject::ProcessEvent(Func, nullptr);
}


// Function INTERACT_RepulsorLift.INTERACT_RepulsorLift_C.UserConstructionScript
// (Event, Public, HasDefaults, BlueprintCallable, BlueprintEvent)

void AINTERACT_RepulsorLift_C::UserConstructionScript()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("INTERACT_RepulsorLift_C", "UserConstructionScript");

	UObject::ProcessEvent(Func, nullptr);
}


// Function INTERACT_RepulsorLift.INTERACT_RepulsorLift_C.InitializeRepulsorLift
// (Protected, BlueprintCallable, BlueprintEvent)

void AINTERACT_RepulsorLift_C::InitializeRepulsorLift()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("INTERACT_RepulsorLift_C", "InitializeRepulsorLift");

	UObject::ProcessEvent(Func, nullptr);
}


// Function INTERACT_RepulsorLift.INTERACT_RepulsorLift_C.InitializeAttributes
// (Protected, BlueprintCallable, BlueprintEvent)

void AINTERACT_RepulsorLift_C::InitializeAttributes()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("INTERACT_RepulsorLift_C", "InitializeAttributes");

	UObject::ProcessEvent(Func, nullptr);
}


// Function INTERACT_RepulsorLift.INTERACT_RepulsorLift_C.UpdateRepulsorField
// (Protected, HasDefaults, BlueprintCallable, BlueprintEvent)

void AINTERACT_RepulsorLift_C::UpdateRepulsorField()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("INTERACT_RepulsorLift_C", "UpdateRepulsorField");

	UObject::ProcessEvent(Func, nullptr);
}


// Function INTERACT_RepulsorLift.INTERACT_RepulsorLift_C.BeginOverlapActor
// (Private, BlueprintCallable, BlueprintEvent)
// Parameters:
// class AActor*                           Actor                                                  (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void AINTERACT_RepulsorLift_C::BeginOverlapActor(class AActor* Actor)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("INTERACT_RepulsorLift_C", "BeginOverlapActor");

	Params::INTERACT_RepulsorLift_C_BeginOverlapActor Parms{};

	Parms.Actor = Actor;

	UObject::ProcessEvent(Func, &Parms);
}


// Function INTERACT_RepulsorLift.INTERACT_RepulsorLift_C.EndOverlapActor
// (Private, BlueprintCallable, BlueprintEvent)
// Parameters:
// class AActor*                           Actor                                                  (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void AINTERACT_RepulsorLift_C::EndOverlapActor(class AActor* Actor)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("INTERACT_RepulsorLift_C", "EndOverlapActor");

	Params::INTERACT_RepulsorLift_C_EndOverlapActor Parms{};

	Parms.Actor = Actor;

	UObject::ProcessEvent(Func, &Parms);
}


// Function INTERACT_RepulsorLift.INTERACT_RepulsorLift_C.UpdateInitialOverlaps
// (Private, HasDefaults, BlueprintCallable, BlueprintEvent)

void AINTERACT_RepulsorLift_C::UpdateInitialOverlaps()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("INTERACT_RepulsorLift_C", "UpdateInitialOverlaps");

	UObject::ProcessEvent(Func, nullptr);
}


// Function INTERACT_RepulsorLift.INTERACT_RepulsorLift_C.OnRepulsorStateChanged
// (Private, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    State                                                  (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)

void AINTERACT_RepulsorLift_C::OnRepulsorStateChanged(bool State)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("INTERACT_RepulsorLift_C", "OnRepulsorStateChanged");

	Params::INTERACT_RepulsorLift_C_OnRepulsorStateChanged Parms{};

	Parms.State = State;

	UObject::ProcessEvent(Func, &Parms);
}


// Function INTERACT_RepulsorLift.INTERACT_RepulsorLift_C.SetRepulsorEnabled
// (Private, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    IsEnabled_0                                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)

void AINTERACT_RepulsorLift_C::SetRepulsorEnabled(bool IsEnabled_0)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("INTERACT_RepulsorLift_C", "SetRepulsorEnabled");

	Params::INTERACT_RepulsorLift_C_SetRepulsorEnabled Parms{};

	Parms.IsEnabled_0 = IsEnabled_0;

	UObject::ProcessEvent(Func, &Parms);
}


// Function INTERACT_RepulsorLift.INTERACT_RepulsorLift_C.CanAffectCharacter
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// class APAWN_SystemShockCharacter_C*     Character                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    Result                                                 (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void AINTERACT_RepulsorLift_C::CanAffectCharacter(class APAWN_SystemShockCharacter_C* Character, bool* Result)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("INTERACT_RepulsorLift_C", "CanAffectCharacter");

	Params::INTERACT_RepulsorLift_C_CanAffectCharacter Parms{};

	Parms.Character = Character;

	UObject::ProcessEvent(Func, &Parms);

	if (Result != nullptr)
		*Result = Parms.Result;
}


// Function INTERACT_RepulsorLift.INTERACT_RepulsorLift_C.ShouldApplyMods
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// class APAWN_SystemShockCharacter_C*     Character                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    Result                                                 (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void AINTERACT_RepulsorLift_C::ShouldApplyMods(class APAWN_SystemShockCharacter_C* Character, bool* Result)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("INTERACT_RepulsorLift_C", "ShouldApplyMods");

	Params::INTERACT_RepulsorLift_C_ShouldApplyMods Parms{};

	Parms.Character = Character;

	UObject::ProcessEvent(Func, &Parms);

	if (Result != nullptr)
		*Result = Parms.Result;
}


// Function INTERACT_RepulsorLift.INTERACT_RepulsorLift_C.ShouldRemoveMods
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// class APAWN_SystemShockCharacter_C*     Character                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    Result                                                 (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void AINTERACT_RepulsorLift_C::ShouldRemoveMods(class APAWN_SystemShockCharacter_C* Character, bool* Result)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("INTERACT_RepulsorLift_C", "ShouldRemoveMods");

	Params::INTERACT_RepulsorLift_C_ShouldRemoveMods Parms{};

	Parms.Character = Character;

	UObject::ProcessEvent(Func, &Parms);

	if (Result != nullptr)
		*Result = Parms.Result;
}


// Function INTERACT_RepulsorLift.INTERACT_RepulsorLift_C.TryRemoveMods
// (Private, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// class APAWN_SystemShockCharacter_C*     Character                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void AINTERACT_RepulsorLift_C::TryRemoveMods(class APAWN_SystemShockCharacter_C* Character)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("INTERACT_RepulsorLift_C", "TryRemoveMods");

	Params::INTERACT_RepulsorLift_C_TryRemoveMods Parms{};

	Parms.Character = Character;

	UObject::ProcessEvent(Func, &Parms);
}


// Function INTERACT_RepulsorLift.INTERACT_RepulsorLift_C.TryApplyMods
// (Private, BlueprintCallable, BlueprintEvent)
// Parameters:
// class APAWN_SystemShockCharacter_C*     Character                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void AINTERACT_RepulsorLift_C::TryApplyMods(class APAWN_SystemShockCharacter_C* Character)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("INTERACT_RepulsorLift_C", "TryApplyMods");

	Params::INTERACT_RepulsorLift_C_TryApplyMods Parms{};

	Parms.Character = Character;

	UObject::ProcessEvent(Func, &Parms);
}


// Function INTERACT_RepulsorLift.INTERACT_RepulsorLift_C.OnCharacterEndOverlapRepulsor
// (Private, BlueprintCallable, BlueprintEvent)
// Parameters:
// class AActor*                           OverlappedActor                                        (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class AActor*                           OtherActor                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void AINTERACT_RepulsorLift_C::OnCharacterEndOverlapRepulsor(class AActor* OverlappedActor, class AActor* OtherActor)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("INTERACT_RepulsorLift_C", "OnCharacterEndOverlapRepulsor");

	Params::INTERACT_RepulsorLift_C_OnCharacterEndOverlapRepulsor Parms{};

	Parms.OverlappedActor = OverlappedActor;
	Parms.OtherActor = OtherActor;

	UObject::ProcessEvent(Func, &Parms);
}


// Function INTERACT_RepulsorLift.INTERACT_RepulsorLift_C.InitializeMaterials
// (Private, BlueprintCallable, BlueprintEvent)

void AINTERACT_RepulsorLift_C::InitializeMaterials()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("INTERACT_RepulsorLift_C", "InitializeMaterials");

	UObject::ProcessEvent(Func, nullptr);
}


// Function INTERACT_RepulsorLift.INTERACT_RepulsorLift_C.UpdateMaterials
// (Private, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    State                                                  (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)

void AINTERACT_RepulsorLift_C::UpdateMaterials(bool State)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("INTERACT_RepulsorLift_C", "UpdateMaterials");

	Params::INTERACT_RepulsorLift_C_UpdateMaterials Parms{};

	Parms.State = State;

	UObject::ProcessEvent(Func, &Parms);
}


// Function INTERACT_RepulsorLift.INTERACT_RepulsorLift_C.ReverseRepulsorField
// (Private, BlueprintCallable, BlueprintEvent)

void AINTERACT_RepulsorLift_C::ReverseRepulsorField()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("INTERACT_RepulsorLift_C", "ReverseRepulsorField");

	UObject::ProcessEvent(Func, nullptr);
}


// Function INTERACT_RepulsorLift.INTERACT_RepulsorLift_C.SetRepulsorTarget
// (Private, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// ENUM_RepulsorTargets                    NewTarget                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    NewParam                                               (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void AINTERACT_RepulsorLift_C::SetRepulsorTarget(ENUM_RepulsorTargets NewTarget, bool* NewParam)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("INTERACT_RepulsorLift_C", "SetRepulsorTarget");

	Params::INTERACT_RepulsorLift_C_SetRepulsorTarget Parms{};

	Parms.NewTarget = NewTarget;

	UObject::ProcessEvent(Func, &Parms);

	if (NewParam != nullptr)
		*NewParam = Parms.NewParam;
}


// Function INTERACT_RepulsorLift.INTERACT_RepulsorLift_C.UpdateParticleSystems
// (Private, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    State                                                  (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)

void AINTERACT_RepulsorLift_C::UpdateParticleSystems(bool State)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("INTERACT_RepulsorLift_C", "UpdateParticleSystems");

	Params::INTERACT_RepulsorLift_C_UpdateParticleSystems Parms{};

	Parms.State = State;

	UObject::ProcessEvent(Func, &Parms);
}


// Function INTERACT_RepulsorLift.INTERACT_RepulsorLift_C.UpdateRepulsorLight
// (Private, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    State                                                  (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)

void AINTERACT_RepulsorLift_C::UpdateRepulsorLight(bool State)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("INTERACT_RepulsorLift_C", "UpdateRepulsorLight");

	Params::INTERACT_RepulsorLift_C_UpdateRepulsorLight Parms{};

	Parms.State = State;

	UObject::ProcessEvent(Func, &Parms);
}


// Function INTERACT_RepulsorLift.INTERACT_RepulsorLift_C.RepulseSkeletalMeshComponent
// (Private, BlueprintCallable, BlueprintEvent)
// Parameters:
// class USkeletalMeshComponent*           SkeletalMeshComponent                                  (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void AINTERACT_RepulsorLift_C::RepulseSkeletalMeshComponent(class USkeletalMeshComponent* SkeletalMeshComponent)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("INTERACT_RepulsorLift_C", "RepulseSkeletalMeshComponent");

	Params::INTERACT_RepulsorLift_C_RepulseSkeletalMeshComponent Parms{};

	Parms.SkeletalMeshComponent = SkeletalMeshComponent;

	UObject::ProcessEvent(Func, &Parms);
}


// Function INTERACT_RepulsorLift.INTERACT_RepulsorLift_C.ShouldFlipParticleDirection
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// bool                                    Result                                                 (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void AINTERACT_RepulsorLift_C::ShouldFlipParticleDirection(bool* Result)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("INTERACT_RepulsorLift_C", "ShouldFlipParticleDirection");

	Params::INTERACT_RepulsorLift_C_ShouldFlipParticleDirection Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (Result != nullptr)
		*Result = Parms.Result;
}


// Function INTERACT_RepulsorLift.INTERACT_RepulsorLift_C.GetRepulsorImpulseAtLocation
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// class AActor*                           CurrentActor                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FVector                          ActorLocation                                          (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FVector                          ActorVelocity                                          (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FVector                          Impulse                                                (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void AINTERACT_RepulsorLift_C::GetRepulsorImpulseAtLocation(class AActor* CurrentActor, const struct FVector& ActorLocation, const struct FVector& ActorVelocity, struct FVector* Impulse)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("INTERACT_RepulsorLift_C", "GetRepulsorImpulseAtLocation");

	Params::INTERACT_RepulsorLift_C_GetRepulsorImpulseAtLocation Parms{};

	Parms.CurrentActor = CurrentActor;
	Parms.ActorLocation = std::move(ActorLocation);
	Parms.ActorVelocity = std::move(ActorVelocity);

	UObject::ProcessEvent(Func, &Parms);

	if (Impulse != nullptr)
		*Impulse = std::move(Parms.Impulse);
}


// Function INTERACT_RepulsorLift.INTERACT_RepulsorLift_C.GetHorizontalDampingImpulse
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// struct FVector                          ActorVelocity                                          (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FVector                          DampingImpulse                                         (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void AINTERACT_RepulsorLift_C::GetHorizontalDampingImpulse(const struct FVector& ActorVelocity, struct FVector* DampingImpulse)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("INTERACT_RepulsorLift_C", "GetHorizontalDampingImpulse");

	Params::INTERACT_RepulsorLift_C_GetHorizontalDampingImpulse Parms{};

	Parms.ActorVelocity = std::move(ActorVelocity);

	UObject::ProcessEvent(Func, &Parms);

	if (DampingImpulse != nullptr)
		*DampingImpulse = std::move(Parms.DampingImpulse);
}


// Function INTERACT_RepulsorLift.INTERACT_RepulsorLift_C.SetShouldBeVisible
// (Private, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    State                                                  (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)

void AINTERACT_RepulsorLift_C::SetShouldBeVisible(bool State)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("INTERACT_RepulsorLift_C", "SetShouldBeVisible");

	Params::INTERACT_RepulsorLift_C_SetShouldBeVisible Parms{};

	Parms.State = State;

	UObject::ProcessEvent(Func, &Parms);
}


// Function INTERACT_RepulsorLift.INTERACT_RepulsorLift_C.TryEnableLowFiBehavior
// (Protected, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    Result                                                 (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void AINTERACT_RepulsorLift_C::TryEnableLowFiBehavior(bool* Result)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("INTERACT_RepulsorLift_C", "TryEnableLowFiBehavior");

	Params::INTERACT_RepulsorLift_C_TryEnableLowFiBehavior Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (Result != nullptr)
		*Result = Parms.Result;
}


// Function INTERACT_RepulsorLift.INTERACT_RepulsorLift_C.TryDisableLowFiBehavior
// (Protected, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    Result                                                 (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void AINTERACT_RepulsorLift_C::TryDisableLowFiBehavior(bool* Result)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("INTERACT_RepulsorLift_C", "TryDisableLowFiBehavior");

	Params::INTERACT_RepulsorLift_C_TryDisableLowFiBehavior Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (Result != nullptr)
		*Result = Parms.Result;
}


// Function INTERACT_RepulsorLift.INTERACT_RepulsorLift_C.PrepareActorForNewFidelity
// (Protected, BlueprintCallable, BlueprintEvent)
// Parameters:
// class AActor*                           Actor                                                  (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    LowFi                                                  (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)

void AINTERACT_RepulsorLift_C::PrepareActorForNewFidelity(class AActor* Actor, bool LowFi)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("INTERACT_RepulsorLift_C", "PrepareActorForNewFidelity");

	Params::INTERACT_RepulsorLift_C_PrepareActorForNewFidelity Parms{};

	Parms.Actor = Actor;
	Parms.LowFi = LowFi;

	UObject::ProcessEvent(Func, &Parms);
}


// Function INTERACT_RepulsorLift.INTERACT_RepulsorLift_C.UpdateHumPitchMultiplier
// (Private, BlueprintCallable, BlueprintEvent)

void AINTERACT_RepulsorLift_C::UpdateHumPitchMultiplier()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("INTERACT_RepulsorLift_C", "UpdateHumPitchMultiplier");

	UObject::ProcessEvent(Func, nullptr);
}


// Function INTERACT_RepulsorLift.INTERACT_RepulsorLift_C.UpdateNavAgentsCanChange
// (Protected, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    State                                                  (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)

void AINTERACT_RepulsorLift_C::UpdateNavAgentsCanChange(bool State)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("INTERACT_RepulsorLift_C", "UpdateNavAgentsCanChange");

	Params::INTERACT_RepulsorLift_C_UpdateNavAgentsCanChange Parms{};

	Parms.State = State;

	UObject::ProcessEvent(Func, &Parms);
}


// Function INTERACT_RepulsorLift.INTERACT_RepulsorLift_C.UpdateNavModifierDirection
// (Private, BlueprintCallable, BlueprintEvent)

void AINTERACT_RepulsorLift_C::UpdateNavModifierDirection()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("INTERACT_RepulsorLift_C", "UpdateNavModifierDirection");

	UObject::ProcessEvent(Func, nullptr);
}


// Function INTERACT_RepulsorLift.INTERACT_RepulsorLift_C.IsRepulsorLiftEnabledAndPowered
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// bool                                    Result                                                 (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void AINTERACT_RepulsorLift_C::IsRepulsorLiftEnabledAndPowered(bool* Result)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("INTERACT_RepulsorLift_C", "IsRepulsorLiftEnabledAndPowered");

	Params::INTERACT_RepulsorLift_C_IsRepulsorLiftEnabledAndPowered Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (Result != nullptr)
		*Result = Parms.Result;
}


// Function INTERACT_RepulsorLift.INTERACT_RepulsorLift_C.IsRepulsorLiftPowered
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// bool                                    Result                                                 (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void AINTERACT_RepulsorLift_C::IsRepulsorLiftPowered(bool* Result)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("INTERACT_RepulsorLift_C", "IsRepulsorLiftPowered");

	Params::INTERACT_RepulsorLift_C_IsRepulsorLiftPowered Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (Result != nullptr)
		*Result = Parms.Result;
}


// Function INTERACT_RepulsorLift.INTERACT_RepulsorLift_C.IsLockedBySecurity
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// bool                                    Result                                                 (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void AINTERACT_RepulsorLift_C::IsLockedBySecurity(bool* Result)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("INTERACT_RepulsorLift_C", "IsLockedBySecurity");

	Params::INTERACT_RepulsorLift_C_IsLockedBySecurity Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (Result != nullptr)
		*Result = Parms.Result;
}


// Function INTERACT_RepulsorLift.INTERACT_RepulsorLift_C.EVENT_OnLevelSecurityChanged
// (Private, BlueprintCallable, BlueprintEvent)
// Parameters:
// int32                                   NewSecurityLevel                                       (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void AINTERACT_RepulsorLift_C::EVENT_OnLevelSecurityChanged(int32 NewSecurityLevel)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("INTERACT_RepulsorLift_C", "EVENT_OnLevelSecurityChanged");

	Params::INTERACT_RepulsorLift_C_EVENT_OnLevelSecurityChanged Parms{};

	Parms.NewSecurityLevel = NewSecurityLevel;

	UObject::ProcessEvent(Func, &Parms);
}


// Function INTERACT_RepulsorLift.INTERACT_RepulsorLift_C.EVENT_OnDisableAttribChanged
// (Private, BlueprintCallable, BlueprintEvent)
// Parameters:
// float                                   CurrValue                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// float                                   LastValue                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void AINTERACT_RepulsorLift_C::EVENT_OnDisableAttribChanged(float CurrValue, float LastValue)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("INTERACT_RepulsorLift_C", "EVENT_OnDisableAttribChanged");

	Params::INTERACT_RepulsorLift_C_EVENT_OnDisableAttribChanged Parms{};

	Parms.CurrValue = CurrValue;
	Parms.LastValue = LastValue;

	UObject::ProcessEvent(Func, &Parms);
}


// Function INTERACT_RepulsorLift.INTERACT_RepulsorLift_C.EVENT_UpdateLightColor
// (Private, BlueprintCallable, BlueprintEvent)

void AINTERACT_RepulsorLift_C::EVENT_UpdateLightColor()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("INTERACT_RepulsorLift_C", "EVENT_UpdateLightColor");

	UObject::ProcessEvent(Func, nullptr);
}


// Function INTERACT_RepulsorLift.INTERACT_RepulsorLift_C.UpdateMeshEmissiveStrength
// (Protected, BlueprintCallable, BlueprintEvent)
// Parameters:
// float                                   Scale                                                  (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void AINTERACT_RepulsorLift_C::UpdateMeshEmissiveStrength(float Scale)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("INTERACT_RepulsorLift_C", "UpdateMeshEmissiveStrength");

	Params::INTERACT_RepulsorLift_C_UpdateMeshEmissiveStrength Parms{};

	Parms.Scale = Scale;

	UObject::ProcessEvent(Func, &Parms);
}


// Function INTERACT_RepulsorLift.INTERACT_RepulsorLift_C.StartLightColorUpdate
// (Protected, HasDefaults, BlueprintCallable, BlueprintEvent)

void AINTERACT_RepulsorLift_C::StartLightColorUpdate()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("INTERACT_RepulsorLift_C", "StartLightColorUpdate");

	UObject::ProcessEvent(Func, nullptr);
}


// Function INTERACT_RepulsorLift.INTERACT_RepulsorLift_C.CanEnableLowFiBehavior
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// bool                                    Result                                                 (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void AINTERACT_RepulsorLift_C::CanEnableLowFiBehavior(bool* Result)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("INTERACT_RepulsorLift_C", "CanEnableLowFiBehavior");

	Params::INTERACT_RepulsorLift_C_CanEnableLowFiBehavior Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (Result != nullptr)
		*Result = Parms.Result;
}


// Function INTERACT_RepulsorLift.INTERACT_RepulsorLift_C.TryInteract
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// class AActor*                           SourceActor                                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class UPrimitiveComponent*              CursorPrimitive                                        (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// ENUM_InteractionType                    InteractionType                                        (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FSTRUCT_InteractResults          InteractResults                                        (Parm, OutParm, HasGetValueTypeHash)

void AINTERACT_RepulsorLift_C::TryInteract(class AActor* SourceActor, class UPrimitiveComponent* CursorPrimitive, ENUM_InteractionType InteractionType, struct FSTRUCT_InteractResults* InteractResults)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("INTERACT_RepulsorLift_C", "TryInteract");

	Params::INTERACT_RepulsorLift_C_TryInteract Parms{};

	Parms.SourceActor = SourceActor;
	Parms.CursorPrimitive = CursorPrimitive;
	Parms.InteractionType = InteractionType;

	UObject::ProcessEvent(Func, &Parms);

	if (InteractResults != nullptr)
		*InteractResults = std::move(Parms.InteractResults);
}


// Function INTERACT_RepulsorLift.INTERACT_RepulsorLift_C.GetInteractLocked
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// class AActor*                           SourceActor                                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    Result                                                 (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
// class FText                             LockMessage                                            (Parm, OutParm)

void AINTERACT_RepulsorLift_C::GetInteractLocked(class AActor* SourceActor, bool* Result, class FText* LockMessage)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("INTERACT_RepulsorLift_C", "GetInteractLocked");

	Params::INTERACT_RepulsorLift_C_GetInteractLocked Parms{};

	Parms.SourceActor = SourceActor;

	UObject::ProcessEvent(Func, &Parms);

	if (Result != nullptr)
		*Result = Parms.Result;

	if (LockMessage != nullptr)
		*LockMessage = std::move(Parms.LockMessage);
}


// Function INTERACT_RepulsorLift.INTERACT_RepulsorLift_C.IsInteractActivated
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    Result                                                 (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void AINTERACT_RepulsorLift_C::IsInteractActivated(bool* Result)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("INTERACT_RepulsorLift_C", "IsInteractActivated");

	Params::INTERACT_RepulsorLift_C_IsInteractActivated Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (Result != nullptr)
		*Result = Parms.Result;
}


// Function INTERACT_RepulsorLift.INTERACT_RepulsorLift_C.SetInteractLocked
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    Locked                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// bool                                    Result                                                 (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void AINTERACT_RepulsorLift_C::SetInteractLocked(bool Locked, bool* Result)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("INTERACT_RepulsorLift_C", "SetInteractLocked");

	Params::INTERACT_RepulsorLift_C_SetInteractLocked Parms{};

	Parms.Locked = Locked;

	UObject::ProcessEvent(Func, &Parms);

	if (Result != nullptr)
		*Result = Parms.Result;
}


// Function INTERACT_RepulsorLift.INTERACT_RepulsorLift_C.SetInteractPowered
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    State                                                  (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// bool                                    Result                                                 (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void AINTERACT_RepulsorLift_C::SetInteractPowered(bool State, bool* Result)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("INTERACT_RepulsorLift_C", "SetInteractPowered");

	Params::INTERACT_RepulsorLift_C_SetInteractPowered Parms{};

	Parms.State = State;

	UObject::ProcessEvent(Func, &Parms);

	if (Result != nullptr)
		*Result = Parms.Result;
}


// Function INTERACT_RepulsorLift.INTERACT_RepulsorLift_C.CanModifyInteractPower
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    Result                                                 (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void AINTERACT_RepulsorLift_C::CanModifyInteractPower(bool* Result)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("INTERACT_RepulsorLift_C", "CanModifyInteractPower");

	Params::INTERACT_RepulsorLift_C_CanModifyInteractPower Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (Result != nullptr)
		*Result = Parms.Result;
}

}

