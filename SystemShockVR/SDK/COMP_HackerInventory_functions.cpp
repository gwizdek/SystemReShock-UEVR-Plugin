#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: COMP_HackerInventory

#include "Basic.hpp"

#include "COMP_HackerInventory_classes.hpp"
#include "COMP_HackerInventory_parameters.hpp"


namespace SDK
{

// Function COMP_HackerInventory.COMP_HackerInventory_C.OnWeaponHolstered__DelegateSignature
// (Public, Delegate, BlueprintCallable, BlueprintEvent)
// Parameters:
// class UITEM_WeaponBase_C*               Weapon                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UCOMP_HackerInventory_C::OnWeaponHolstered__DelegateSignature(class UITEM_WeaponBase_C* Weapon)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("COMP_HackerInventory_C", "OnWeaponHolstered__DelegateSignature");

	Params::COMP_HackerInventory_C_OnWeaponHolstered__DelegateSignature Parms{};

	Parms.Weapon = Weapon;

	UObject::ProcessEvent(Func, &Parms);
}


// Function COMP_HackerInventory.COMP_HackerInventory_C.OnWeaponDrawn__DelegateSignature
// (Public, Delegate, BlueprintCallable, BlueprintEvent)
// Parameters:
// class UITEM_WeaponBase_C*               Weapon                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UCOMP_HackerInventory_C::OnWeaponDrawn__DelegateSignature(class UITEM_WeaponBase_C* Weapon)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("COMP_HackerInventory_C", "OnWeaponDrawn__DelegateSignature");

	Params::COMP_HackerInventory_C_OnWeaponDrawn__DelegateSignature Parms{};

	Parms.Weapon = Weapon;

	UObject::ProcessEvent(Func, &Parms);
}


// Function COMP_HackerInventory.COMP_HackerInventory_C.OnEquippedWeaponChanged__DelegateSignature
// (Public, Delegate, BlueprintCallable, BlueprintEvent)
// Parameters:
// class UITEM_WeaponBase_C*               EquippedWeapon                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UCOMP_HackerInventory_C::OnEquippedWeaponChanged__DelegateSignature(class UITEM_WeaponBase_C* EquippedWeapon)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("COMP_HackerInventory_C", "OnEquippedWeaponChanged__DelegateSignature");

	Params::COMP_HackerInventory_C_OnEquippedWeaponChanged__DelegateSignature Parms{};

	Parms.EquippedWeapon = EquippedWeapon;

	UObject::ProcessEvent(Func, &Parms);
}


// Function COMP_HackerInventory.COMP_HackerInventory_C.ExecuteUbergraph_COMP_HackerInventory
// (Final, UbergraphFunction)
// Parameters:
// int32                                   EntryPoint                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UCOMP_HackerInventory_C::ExecuteUbergraph_COMP_HackerInventory(int32 EntryPoint)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("COMP_HackerInventory_C", "ExecuteUbergraph_COMP_HackerInventory");

	Params::COMP_HackerInventory_C_ExecuteUbergraph_COMP_HackerInventory Parms{};

	Parms.EntryPoint = EntryPoint;

	UObject::ProcessEvent(Func, &Parms);
}


// Function COMP_HackerInventory.COMP_HackerInventory_C.ReceiveTick
// (Event, Public, BlueprintEvent)
// Parameters:
// float                                   DeltaSeconds                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UCOMP_HackerInventory_C::ReceiveTick(float DeltaSeconds)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("COMP_HackerInventory_C", "ReceiveTick");

	Params::COMP_HackerInventory_C_ReceiveTick Parms{};

	Parms.DeltaSeconds = DeltaSeconds;

	UObject::ProcessEvent(Func, &Parms);
}


// Function COMP_HackerInventory.COMP_HackerInventory_C.HasDiscoveredHeroicItem
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// class UClass*                           HeroicItemClass                                        (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    Result                                                 (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void UCOMP_HackerInventory_C::HasDiscoveredHeroicItem(class UClass* HeroicItemClass, bool* Result)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("COMP_HackerInventory_C", "HasDiscoveredHeroicItem");

	Params::COMP_HackerInventory_C_HasDiscoveredHeroicItem Parms{};

	Parms.HeroicItemClass = HeroicItemClass;

	UObject::ProcessEvent(Func, &Parms);

	if (Result != nullptr)
		*Result = Parms.Result;
}


// Function COMP_HackerInventory.COMP_HackerInventory_C.HasDiscoveredSuperiorHeroicItem
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// class UClass*                           HeroicItemClass                                        (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    Result                                                 (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void UCOMP_HackerInventory_C::HasDiscoveredSuperiorHeroicItem(class UClass* HeroicItemClass, bool* Result)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("COMP_HackerInventory_C", "HasDiscoveredSuperiorHeroicItem");

	Params::COMP_HackerInventory_C_HasDiscoveredSuperiorHeroicItem Parms{};

	Parms.HeroicItemClass = HeroicItemClass;

	UObject::ProcessEvent(Func, &Parms);

	if (Result != nullptr)
		*Result = Parms.Result;
}


// Function COMP_HackerInventory.COMP_HackerInventory_C.CanPlayHeroicAction
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// TSoftObjectPtr<class UAnimMontage>      Montage                                                (BlueprintVisible, BlueprintReadOnly, Parm, HasGetValueTypeHash)
// bool                                    Result                                                 (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void UCOMP_HackerInventory_C::CanPlayHeroicAction(TSoftObjectPtr<class UAnimMontage> Montage, bool* Result)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("COMP_HackerInventory_C", "CanPlayHeroicAction");

	Params::COMP_HackerInventory_C_CanPlayHeroicAction Parms{};

	Parms.Montage = Montage;

	UObject::ProcessEvent(Func, &Parms);

	if (Result != nullptr)
		*Result = Parms.Result;
}


// Function COMP_HackerInventory.COMP_HackerInventory_C.IsHeroicActionQueued
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// bool                                    Result                                                 (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void UCOMP_HackerInventory_C::IsHeroicActionQueued(bool* Result)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("COMP_HackerInventory_C", "IsHeroicActionQueued");

	Params::COMP_HackerInventory_C_IsHeroicActionQueued Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (Result != nullptr)
		*Result = Parms.Result;
}


// Function COMP_HackerInventory.COMP_HackerInventory_C.HasQueuedCinematicHeroicAction
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// bool                                    Result                                                 (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void UCOMP_HackerInventory_C::HasQueuedCinematicHeroicAction(bool* Result)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("COMP_HackerInventory_C", "HasQueuedCinematicHeroicAction");

	Params::COMP_HackerInventory_C_HasQueuedCinematicHeroicAction Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (Result != nullptr)
		*Result = Parms.Result;
}


// Function COMP_HackerInventory.COMP_HackerInventory_C.GetOverrideHandheldDisplayProperties
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// class USkeletalMesh*                    SkeletalMesh                                           (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class UClass*                           AnimInstanceClass                                      (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class UMaterialInterface*               OverrideMaterial                                       (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UCOMP_HackerInventory_C::GetOverrideHandheldDisplayProperties(class USkeletalMesh** SkeletalMesh, class UClass** AnimInstanceClass, class UMaterialInterface** OverrideMaterial)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("COMP_HackerInventory_C", "GetOverrideHandheldDisplayProperties");

	Params::COMP_HackerInventory_C_GetOverrideHandheldDisplayProperties Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (SkeletalMesh != nullptr)
		*SkeletalMesh = Parms.SkeletalMesh;

	if (AnimInstanceClass != nullptr)
		*AnimInstanceClass = Parms.AnimInstanceClass;

	if (OverrideMaterial != nullptr)
		*OverrideMaterial = Parms.OverrideMaterial;
}


// Function COMP_HackerInventory.COMP_HackerInventory_C.GrantHeroicItem
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// class UITEM_Base_C*                     HeroicItem                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// TSoftObjectPtr<class UAnimMontage>      HeroicMontage                                          (BlueprintVisible, BlueprintReadOnly, Parm, HasGetValueTypeHash)
// class UInventoryBag_C*                  PreferredBag                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// int32                                   PreferredSlotIndex                                     (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UCOMP_HackerInventory_C::GrantHeroicItem(class UITEM_Base_C* HeroicItem, TSoftObjectPtr<class UAnimMontage> HeroicMontage, class UInventoryBag_C* PreferredBag, int32 PreferredSlotIndex)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("COMP_HackerInventory_C", "GrantHeroicItem");

	Params::COMP_HackerInventory_C_GrantHeroicItem Parms{};

	Parms.HeroicItem = HeroicItem;
	Parms.HeroicMontage = HeroicMontage;
	Parms.PreferredBag = PreferredBag;
	Parms.PreferredSlotIndex = PreferredSlotIndex;

	UObject::ProcessEvent(Func, &Parms);
}


// Function COMP_HackerInventory.COMP_HackerInventory_C.TryAddHeroicItemToInventory
// (Private, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    Result                                                 (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void UCOMP_HackerInventory_C::TryAddHeroicItemToInventory(bool* Result)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("COMP_HackerInventory_C", "TryAddHeroicItemToInventory");

	Params::COMP_HackerInventory_C_TryAddHeroicItemToInventory Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (Result != nullptr)
		*Result = Parms.Result;
}


// Function COMP_HackerInventory.COMP_HackerInventory_C.PostInitializeEquipmentState
// (Public, BlueprintCallable, BlueprintEvent)

void UCOMP_HackerInventory_C::PostInitializeEquipmentState()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("COMP_HackerInventory_C", "PostInitializeEquipmentState");

	UObject::ProcessEvent(Func, nullptr);
}


// Function COMP_HackerInventory.COMP_HackerInventory_C.MoveGrabBagItemsToInventory
// (Protected, HasDefaults, BlueprintCallable, BlueprintEvent)

void UCOMP_HackerInventory_C::MoveGrabBagItemsToInventory()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("COMP_HackerInventory_C", "MoveGrabBagItemsToInventory");

	UObject::ProcessEvent(Func, nullptr);
}


// Function COMP_HackerInventory.COMP_HackerInventory_C.ReceiveAnimationMessage
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// class FString                           Message                                                (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, HasGetValueTypeHash)
// bool                                    Result                                                 (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void UCOMP_HackerInventory_C::ReceiveAnimationMessage(const class FString& Message, bool* Result)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("COMP_HackerInventory_C", "ReceiveAnimationMessage");

	Params::COMP_HackerInventory_C_ReceiveAnimationMessage Parms{};

	Parms.Message = std::move(Message);

	UObject::ProcessEvent(Func, &Parms);

	if (Result != nullptr)
		*Result = Parms.Result;
}


// Function COMP_HackerInventory.COMP_HackerInventory_C.EVENT_PlayHeroicAction
// (Private, HasDefaults, BlueprintCallable, BlueprintEvent)

void UCOMP_HackerInventory_C::EVENT_PlayHeroicAction()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("COMP_HackerInventory_C", "EVENT_PlayHeroicAction");

	UObject::ProcessEvent(Func, nullptr);
}


// Function COMP_HackerInventory.COMP_HackerInventory_C.SetOverrideItemBeingHeld
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// class UITEM_Base_C*                     OverrideItem                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class UCharacterAction_C*               Action                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UCOMP_HackerInventory_C::SetOverrideItemBeingHeld(class UITEM_Base_C* OverrideItem, class UCharacterAction_C* Action)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("COMP_HackerInventory_C", "SetOverrideItemBeingHeld");

	Params::COMP_HackerInventory_C_SetOverrideItemBeingHeld Parms{};

	Parms.OverrideItem = OverrideItem;
	Parms.Action = Action;

	UObject::ProcessEvent(Func, &Parms);
}


// Function COMP_HackerInventory.COMP_HackerInventory_C.GetHackerOwner
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// class APAWN_Hacker_Simple_C*            Hacker                                                 (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UCOMP_HackerInventory_C::GetHackerOwner(class APAWN_Hacker_Simple_C** Hacker)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("COMP_HackerInventory_C", "GetHackerOwner");

	Params::COMP_HackerInventory_C_GetHackerOwner Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (Hacker != nullptr)
		*Hacker = Parms.Hacker;
}


// Function COMP_HackerInventory.COMP_HackerInventory_C.GetEquippedWeapon
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// class UITEM_WeaponBase_C*               Weapon                                                 (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UCOMP_HackerInventory_C::GetEquippedWeapon(class UITEM_WeaponBase_C** Weapon)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("COMP_HackerInventory_C", "GetEquippedWeapon");

	Params::COMP_HackerInventory_C_GetEquippedWeapon Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (Weapon != nullptr)
		*Weapon = Parms.Weapon;
}


// Function COMP_HackerInventory.COMP_HackerInventory_C.EVENT_OnOverrideHandheldMontageEnded
// (Private, BlueprintCallable, BlueprintEvent)

void UCOMP_HackerInventory_C::EVENT_OnOverrideHandheldMontageEnded()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("COMP_HackerInventory_C", "EVENT_OnOverrideHandheldMontageEnded");

	UObject::ProcessEvent(Func, nullptr);
}


// Function COMP_HackerInventory.COMP_HackerInventory_C.SetCurrentEquippedWeapon
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// class UITEM_WeaponBase_C*               Weapon                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UCOMP_HackerInventory_C::SetCurrentEquippedWeapon(class UITEM_WeaponBase_C* Weapon)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("COMP_HackerInventory_C", "SetCurrentEquippedWeapon");

	Params::COMP_HackerInventory_C_SetCurrentEquippedWeapon Parms{};

	Parms.Weapon = Weapon;

	UObject::ProcessEvent(Func, &Parms);
}


// Function COMP_HackerInventory.COMP_HackerInventory_C.HandlePrimaryAttack
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    InputState                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)

void UCOMP_HackerInventory_C::HandlePrimaryAttack(bool InputState)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("COMP_HackerInventory_C", "HandlePrimaryAttack");

	Params::COMP_HackerInventory_C_HandlePrimaryAttack Parms{};

	Parms.InputState = InputState;

	UObject::ProcessEvent(Func, &Parms);
}


// Function COMP_HackerInventory.COMP_HackerInventory_C.ToggleWeaponEquipState
// (Public, BlueprintCallable, BlueprintEvent)

void UCOMP_HackerInventory_C::ToggleWeaponEquipState()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("COMP_HackerInventory_C", "ToggleWeaponEquipState");

	UObject::ProcessEvent(Func, nullptr);
}


// Function COMP_HackerInventory.COMP_HackerInventory_C.CycleWeaponMode
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    Previous                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)

void UCOMP_HackerInventory_C::CycleWeaponMode(bool Previous)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("COMP_HackerInventory_C", "CycleWeaponMode");

	Params::COMP_HackerInventory_C_CycleWeaponMode Parms{};

	Parms.Previous = Previous;

	UObject::ProcessEvent(Func, &Parms);
}


// Function COMP_HackerInventory.COMP_HackerInventory_C.TryReloadWeapon
// (Public, BlueprintCallable, BlueprintEvent)

void UCOMP_HackerInventory_C::TryReloadWeapon()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("COMP_HackerInventory_C", "TryReloadWeapon");

	UObject::ProcessEvent(Func, nullptr);
}


// Function COMP_HackerInventory.COMP_HackerInventory_C.GetEquippedWeaponHotbarSlot
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// class UCOMP_Hotbar_C*                   HotbarComponent                                        (Parm, OutParm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// int32                                   HotbarSlotIndex                                        (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UCOMP_HackerInventory_C::GetEquippedWeaponHotbarSlot(class UCOMP_Hotbar_C** HotbarComponent, int32* HotbarSlotIndex)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("COMP_HackerInventory_C", "GetEquippedWeaponHotbarSlot");

	Params::COMP_HackerInventory_C_GetEquippedWeaponHotbarSlot Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (HotbarComponent != nullptr)
		*HotbarComponent = Parms.HotbarComponent;

	if (HotbarSlotIndex != nullptr)
		*HotbarSlotIndex = Parms.HotbarSlotIndex;
}


// Function COMP_HackerInventory.COMP_HackerInventory_C.CycleEquippedWeaponFromHotbarSlot
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// class UCOMP_Hotbar_C*                   HotbarComponent                                        (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// int32                                   HotbarSlotIndex                                        (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    Previous                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// class UClass*                           IgnoreClass                                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    Success                                                (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void UCOMP_HackerInventory_C::CycleEquippedWeaponFromHotbarSlot(class UCOMP_Hotbar_C* HotbarComponent, int32 HotbarSlotIndex, bool Previous, class UClass* IgnoreClass, bool* Success)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("COMP_HackerInventory_C", "CycleEquippedWeaponFromHotbarSlot");

	Params::COMP_HackerInventory_C_CycleEquippedWeaponFromHotbarSlot Parms{};

	Parms.HotbarComponent = HotbarComponent;
	Parms.HotbarSlotIndex = HotbarSlotIndex;
	Parms.Previous = Previous;
	Parms.IgnoreClass = IgnoreClass;

	UObject::ProcessEvent(Func, &Parms);

	if (Success != nullptr)
		*Success = Parms.Success;
}


// Function COMP_HackerInventory.COMP_HackerInventory_C.CycleEquippedWeapon
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    Previous                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// class UClass*                           IgnoreClass                                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    Success                                                (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void UCOMP_HackerInventory_C::CycleEquippedWeapon(bool Previous, class UClass* IgnoreClass, bool* Success)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("COMP_HackerInventory_C", "CycleEquippedWeapon");

	Params::COMP_HackerInventory_C_CycleEquippedWeapon Parms{};

	Parms.Previous = Previous;
	Parms.IgnoreClass = IgnoreClass;

	UObject::ProcessEvent(Func, &Parms);

	if (Success != nullptr)
		*Success = Parms.Success;
}


// Function COMP_HackerInventory.COMP_HackerInventory_C.IsEquipmentDisabled
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// bool                                    Result                                                 (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void UCOMP_HackerInventory_C::IsEquipmentDisabled(bool* Result)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("COMP_HackerInventory_C", "IsEquipmentDisabled");

	Params::COMP_HackerInventory_C_IsEquipmentDisabled Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (Result != nullptr)
		*Result = Parms.Result;
}


// Function COMP_HackerInventory.COMP_HackerInventory_C.UpdateItemActivationState
// (Private, BlueprintCallable, BlueprintEvent)
// Parameters:
// class UITEM_Base_C*                     Item                                                   (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UCOMP_HackerInventory_C::UpdateItemActivationState(class UITEM_Base_C* Item)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("COMP_HackerInventory_C", "UpdateItemActivationState");

	Params::COMP_HackerInventory_C_UpdateItemActivationState Parms{};

	Parms.Item = Item;

	UObject::ProcessEvent(Func, &Parms);
}


// Function COMP_HackerInventory.COMP_HackerInventory_C.SetEquipmentDisabled
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    Disable                                                (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)

void UCOMP_HackerInventory_C::SetEquipmentDisabled(bool Disable)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("COMP_HackerInventory_C", "SetEquipmentDisabled");

	Params::COMP_HackerInventory_C_SetEquipmentDisabled Parms{};

	Parms.Disable = Disable;

	UObject::ProcessEvent(Func, &Parms);
}


// Function COMP_HackerInventory.COMP_HackerInventory_C.UpdateEquippedWeaponState
// (Public, BlueprintCallable, BlueprintEvent)

void UCOMP_HackerInventory_C::UpdateEquippedWeaponState()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("COMP_HackerInventory_C", "UpdateEquippedWeaponState");

	UObject::ProcessEvent(Func, nullptr);
}


// Function COMP_HackerInventory.COMP_HackerInventory_C.IsOverrideHandheldBeingUsed
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// class UITEM_Base_C*                     Item                                                   (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    Result                                                 (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void UCOMP_HackerInventory_C::IsOverrideHandheldBeingUsed(class UITEM_Base_C* Item, bool* Result)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("COMP_HackerInventory_C", "IsOverrideHandheldBeingUsed");

	Params::COMP_HackerInventory_C_IsOverrideHandheldBeingUsed Parms{};

	Parms.Item = Item;

	UObject::ProcessEvent(Func, &Parms);

	if (Result != nullptr)
		*Result = Parms.Result;
}


// Function COMP_HackerInventory.COMP_HackerInventory_C.DeactivateCurrentItem
// (Public, BlueprintCallable, BlueprintEvent)

void UCOMP_HackerInventory_C::DeactivateCurrentItem()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("COMP_HackerInventory_C", "DeactivateCurrentItem");

	UObject::ProcessEvent(Func, nullptr);
}


// Function COMP_HackerInventory.COMP_HackerInventory_C.UpdateItemActivationStates
// (Public, BlueprintCallable, BlueprintEvent)

void UCOMP_HackerInventory_C::UpdateItemActivationStates()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("COMP_HackerInventory_C", "UpdateItemActivationStates");

	UObject::ProcessEvent(Func, nullptr);
}


// Function COMP_HackerInventory.COMP_HackerInventory_C.HasReachedEquipCapacity
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// class UInventoryBag_C*                  Bag                                                    (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class UITEM_Base_C*                     Item                                                   (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    Result                                                 (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void UCOMP_HackerInventory_C::HasReachedEquipCapacity(class UInventoryBag_C* Bag, class UITEM_Base_C* Item, bool* Result)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("COMP_HackerInventory_C", "HasReachedEquipCapacity");

	Params::COMP_HackerInventory_C_HasReachedEquipCapacity Parms{};

	Parms.Bag = Bag;
	Parms.Item = Item;

	UObject::ProcessEvent(Func, &Parms);

	if (Result != nullptr)
		*Result = Parms.Result;
}


// Function COMP_HackerInventory.COMP_HackerInventory_C.GetFirstEquippedItem
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// class UInventoryBag_C*                  Bag                                                    (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class UITEM_Base_C*                     Item                                                   (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UCOMP_HackerInventory_C::GetFirstEquippedItem(class UInventoryBag_C* Bag, class UITEM_Base_C** Item)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("COMP_HackerInventory_C", "GetFirstEquippedItem");

	Params::COMP_HackerInventory_C_GetFirstEquippedItem Parms{};

	Parms.Bag = Bag;

	UObject::ProcessEvent(Func, &Parms);

	if (Item != nullptr)
		*Item = Parms.Item;
}


// Function COMP_HackerInventory.COMP_HackerInventory_C.InitializeBags
// (Public, BlueprintCallable, BlueprintEvent)

void UCOMP_HackerInventory_C::InitializeBags()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("COMP_HackerInventory_C", "InitializeBags");

	UObject::ProcessEvent(Func, nullptr);
}


// Function COMP_HackerInventory.COMP_HackerInventory_C.TickCurrentEquippedWeapon
// (Protected, BlueprintCallable, BlueprintEvent)
// Parameters:
// float                                   DeltaTime                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UCOMP_HackerInventory_C::TickCurrentEquippedWeapon(float DeltaTime)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("COMP_HackerInventory_C", "TickCurrentEquippedWeapon");

	Params::COMP_HackerInventory_C_TickCurrentEquippedWeapon Parms{};

	Parms.DeltaTime = DeltaTime;

	UObject::ProcessEvent(Func, &Parms);
}


// Function COMP_HackerInventory.COMP_HackerInventory_C.GetHeroicItemClass
// (Protected, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// class UClass*                           ItemClass                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class UClass*                           HeroicItemClass                                        (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UCOMP_HackerInventory_C::GetHeroicItemClass(class UClass* ItemClass, class UClass** HeroicItemClass)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("COMP_HackerInventory_C", "GetHeroicItemClass");

	Params::COMP_HackerInventory_C_GetHeroicItemClass Parms{};

	Parms.ItemClass = ItemClass;

	UObject::ProcessEvent(Func, &Parms);

	if (HeroicItemClass != nullptr)
		*HeroicItemClass = Parms.HeroicItemClass;
}


// Function COMP_HackerInventory.COMP_HackerInventory_C.OnWeaponDrawStarted
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// class UITEM_WeaponBase_C*               Weapon                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UCOMP_HackerInventory_C::OnWeaponDrawStarted(class UITEM_WeaponBase_C* Weapon)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("COMP_HackerInventory_C", "OnWeaponDrawStarted");

	Params::COMP_HackerInventory_C_OnWeaponDrawStarted Parms{};

	Parms.Weapon = Weapon;

	UObject::ProcessEvent(Func, &Parms);
}


// Function COMP_HackerInventory.COMP_HackerInventory_C.OnWeaponHolsterStarted
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// class UITEM_WeaponBase_C*               Weapon                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UCOMP_HackerInventory_C::OnWeaponHolsterStarted(class UITEM_WeaponBase_C* Weapon)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("COMP_HackerInventory_C", "OnWeaponHolsterStarted");

	Params::COMP_HackerInventory_C_OnWeaponHolsterStarted Parms{};

	Parms.Weapon = Weapon;

	UObject::ProcessEvent(Func, &Parms);
}


// Function COMP_HackerInventory.COMP_HackerInventory_C.OnWeaponHolsterFinished
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// class UITEM_WeaponBase_C*               Weapon                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UCOMP_HackerInventory_C::OnWeaponHolsterFinished(class UITEM_WeaponBase_C* Weapon)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("COMP_HackerInventory_C", "OnWeaponHolsterFinished");

	Params::COMP_HackerInventory_C_OnWeaponHolsterFinished Parms{};

	Parms.Weapon = Weapon;

	UObject::ProcessEvent(Func, &Parms);
}


// Function COMP_HackerInventory.COMP_HackerInventory_C.UpdateWeaponObstruction
// (Private, BlueprintCallable, BlueprintEvent)

void UCOMP_HackerInventory_C::UpdateWeaponObstruction()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("COMP_HackerInventory_C", "UpdateWeaponObstruction");

	UObject::ProcessEvent(Func, nullptr);
}


// Function COMP_HackerInventory.COMP_HackerInventory_C.GetCurrentObstructionDistance
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// float                                   Distance                                               (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UCOMP_HackerInventory_C::GetCurrentObstructionDistance(float* Distance)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("COMP_HackerInventory_C", "GetCurrentObstructionDistance");

	Params::COMP_HackerInventory_C_GetCurrentObstructionDistance Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (Distance != nullptr)
		*Distance = Parms.Distance;
}


// Function COMP_HackerInventory.COMP_HackerInventory_C.UpdateWeaponObstructionDistance
// (Public, BlueprintCallable, BlueprintEvent)

void UCOMP_HackerInventory_C::UpdateWeaponObstructionDistance()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("COMP_HackerInventory_C", "UpdateWeaponObstructionDistance");

	UObject::ProcessEvent(Func, nullptr);
}


// Function COMP_HackerInventory.COMP_HackerInventory_C.TraceWeaponObstruction
// (Protected, HasDefaults, BlueprintCallable, BlueprintEvent)

void UCOMP_HackerInventory_C::TraceWeaponObstruction()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("COMP_HackerInventory_C", "TraceWeaponObstruction");

	UObject::ProcessEvent(Func, nullptr);
}


// Function COMP_HackerInventory.COMP_HackerInventory_C.ClearWeaponObstruction
// (Protected, BlueprintCallable, BlueprintEvent)

void UCOMP_HackerInventory_C::ClearWeaponObstruction()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("COMP_HackerInventory_C", "ClearWeaponObstruction");

	UObject::ProcessEvent(Func, nullptr);
}


// Function COMP_HackerInventory.COMP_HackerInventory_C.VaporizeJunkItems
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)

void UCOMP_HackerInventory_C::VaporizeJunkItems()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("COMP_HackerInventory_C", "VaporizeJunkItems");

	UObject::ProcessEvent(Func, nullptr);
}


// Function COMP_HackerInventory.COMP_HackerInventory_C.SortMainInventory
// (Public, BlueprintCallable, BlueprintEvent)

void UCOMP_HackerInventory_C::SortMainInventory()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("COMP_HackerInventory_C", "SortMainInventory");

	UObject::ProcessEvent(Func, nullptr);
}

}

