#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BulletProjectile_MagPulse

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "BulletProjectile_Base_classes.hpp"


namespace SDK
{

// BlueprintGeneratedClass BulletProjectile_MagPulse.BulletProjectile_MagPulse_C
// 0x0018 (0x0338 - 0x0320)
class ABulletProjectile_MagPulse_C final : public ABulletProjectile_Base_C
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame_BulletProjectile_MagPulse_C;        // 0x0320(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	bool                                          IsUpgraded;                                        // 0x0328(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, SaveGame, IsPlainOldData, NoDestructor)
	uint8                                         ChargeCount;                                       // 0x0329(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, SaveGame, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_32A[0x2];                                      // 0x032A(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         MagneticDamage;                                    // 0x032C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, SaveGame, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         ElectricDamage;                                    // 0x0330(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, SaveGame, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

public:
	void ExecuteUbergraph_BulletProjectile_MagPulse(int32 EntryPoint);
	void ReceiveBeginPlay();
	void ReceiveTick(float DeltaSeconds);
	void SetChargeState(uint8 Count, int32 MagneticDamage_0, int32 ElectricDamage_0, bool IsUpgraded_0);
	void TryBulletCollision(const struct FHitResult& Hit, float FrameHitDeltaTime, bool* Result);
	void UpdatePropertiesFromChargeCount();
	void UpdateProjectileTrajectory(float DeltaTime);
	void ApplyRadialDamageAroundHit(const struct FHitResult& Hit);
	void CreateElectromagneticVortex(const struct FHitResult& Hit);
	void GetImpactEffectParameters(const struct FHitResult& Hit, bool IsDeathBlow, struct FSTRUCT_EffectParams* EffectParams);
	void OnSpawnedBulletImpactEffects(class UNiagaraComponent* EffectsComponent);

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"BulletProjectile_MagPulse_C">();
	}
	static class ABulletProjectile_MagPulse_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<ABulletProjectile_MagPulse_C>();
	}
};
static_assert(alignof(ABulletProjectile_MagPulse_C) == 0x000008, "Wrong alignment on ABulletProjectile_MagPulse_C");
static_assert(sizeof(ABulletProjectile_MagPulse_C) == 0x000338, "Wrong size on ABulletProjectile_MagPulse_C");
static_assert(offsetof(ABulletProjectile_MagPulse_C, UberGraphFrame_BulletProjectile_MagPulse_C) == 0x000320, "Member 'ABulletProjectile_MagPulse_C::UberGraphFrame_BulletProjectile_MagPulse_C' has a wrong offset!");
static_assert(offsetof(ABulletProjectile_MagPulse_C, IsUpgraded) == 0x000328, "Member 'ABulletProjectile_MagPulse_C::IsUpgraded' has a wrong offset!");
static_assert(offsetof(ABulletProjectile_MagPulse_C, ChargeCount) == 0x000329, "Member 'ABulletProjectile_MagPulse_C::ChargeCount' has a wrong offset!");
static_assert(offsetof(ABulletProjectile_MagPulse_C, MagneticDamage) == 0x00032C, "Member 'ABulletProjectile_MagPulse_C::MagneticDamage' has a wrong offset!");
static_assert(offsetof(ABulletProjectile_MagPulse_C, ElectricDamage) == 0x000330, "Member 'ABulletProjectile_MagPulse_C::ElectricDamage' has a wrong offset!");

}

