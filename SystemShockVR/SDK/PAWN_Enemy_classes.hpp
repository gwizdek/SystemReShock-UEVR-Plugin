#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: PAWN_Enemy

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "ENUM_LocalBehaviorType_structs.hpp"
#include "CoreUObject_structs.hpp"
#include "ENUM_PreferredCombatStyle_structs.hpp"
#include "STRUCT_ReferencedLootTable_structs.hpp"
#include "STRUCT_DeathBlowData_structs.hpp"
#include "STRUCT_LocalBehaviorAnimations_structs.hpp"
#include "ENUM_Emotions_structs.hpp"
#include "ENUM_StayNearSkillTargetState_structs.hpp"
#include "PAWN_SystemShockCharacter_classes.hpp"
#include "ENUM_InteractionType_structs.hpp"
#include "ENUM_EnemyType_structs.hpp"
#include "ENUM_GameDifficulty_structs.hpp"
#include "SystemReShock_structs.hpp"
#include "ENUM_TargetAssignmentType_structs.hpp"


namespace SDK
{

// BlueprintGeneratedClass PAWN_Enemy.PAWN_Enemy_C
// 0x0390 (0x0A10 - 0x0680)
#pragma pack(push, 0x1)
class alignas(0x10) APAWN_Enemy_C : public APAWN_SystemShockCharacter_C
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame_PAWN_Enemy_C;                       // 0x0680(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	class UCOMP_SkinnedDecalSampler_C*            COMP_SkinnedDecalSampler;                          // 0x0688(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UCOMP_PhysicsImpactHandler_C*           COMP_PhysicsImpactHandler;                         // 0x0690(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UCOMP_DismembermentManager_C*           COMP_DismembermentManager;                         // 0x0698(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UCOMP_VoiceManager_C*                   COMP_VoiceManager;                                 // 0x06A0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UCOMP_VoxelCullableNavAgent_C*          COMP_VoxelCullableNavAgent;                        // 0x06A8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UCOMP_EnemySensingComponent_C*          COMP_EnemySensingComponent;                        // 0x06B0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UPhysicalAnimationComponent*            PhysicalAnimation;                                 // 0x06B8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UCOMP_Descriptor_C*                     COMP_Descriptor;                                   // 0x06C0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UCOMP_ScannableObject_C*                COMP_ScannableObject;                              // 0x06C8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UCOMP_SkillManager_C*                   COMP_SkillManager;                                 // 0x06D0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UCOMP_EnemyDetection_C*                 COMP_EnemyDetection;                               // 0x06D8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UCOMP_Headlook_C*                       COMP_Headlook;                                     // 0x06E0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UCOMP_EnemyMovement_C*                  COMP_EnemyMovement;                                // 0x06E8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class APatrolNode_C*                          PatrolNode;                                        // 0x06F0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UOBJ_EnemyTarget_C*                     SkillTarget;                                       // 0x06F8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, SaveGame, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FSTRUCT_ReferencedLootTable            LootTable;                                         // 0x0700(0x0010)(Edit, BlueprintVisible, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FDataTableRowHandle                    BadgeRowHandle;                                    // 0x0710(0x0010)(Edit, BlueprintVisible, NoDestructor)
	TArray<TSoftObjectPtr<class UAnimMontage>>    PainMontages;                                      // 0x0720(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance)
	TSoftObjectPtr<class UAnimMontage>            EnterStunMontage;                                  // 0x0730(0x0028)(Edit, BlueprintVisible, DisableEditOnInstance, HasGetValueTypeHash)
	TSoftObjectPtr<class UAnimMontage>            ExitStunMontage;                                   // 0x0758(0x0028)(Edit, BlueprintVisible, DisableEditOnInstance, HasGetValueTypeHash)
	TSoftObjectPtr<class UAnimSequenceBase>       StunLoop;                                          // 0x0780(0x0028)(Edit, BlueprintVisible, DisableEditOnInstance, HasGetValueTypeHash)
	class FName                                   PelvisBone;                                        // 0x07A8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TArray<class FName>                           UniversalWeakpointSocketNames;                     // 0x07B0(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance)
	TArray<struct FSTRUCT_DeathBlowData>          DeathBlows;                                        // 0x07C0(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance)
	bool                                          IsLowFiVisibility;                                 // 0x07D0(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          IsLowFiAudibility;                                 // 0x07D1(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          IsLowFiBehavior;                                   // 0x07D2(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	ENUM_PreferredCombatStyle                     PreferredCombatStyle;                              // 0x07D3(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          IsScannedByRadar;                                  // 0x07D4(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          WasPhysicsAsleep;                                  // 0x07D5(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          DisableBehaviorCullingWhilePatrolling;             // 0x07D6(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_7D7[0x1];                                      // 0x07D7(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         LastLowFiBehaviorTimestamp;                        // 0x07D8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_7DC[0x4];                                      // 0x07DC(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTimerHandle                           RetryLowFiTimerHandle;                             // 0x07E0(0x0008)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	TArray<TSoftObjectPtr<class UAnimMontage>>    IdleFidgetMontages;                                // 0x07E8(0x0010)(Edit, BlueprintVisible)
	class UBehaviorTree*                          InitialCustomIdleBehavior;                         // 0x07F8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UBehaviorTree*                          InitialCustomCombatBehavior;                       // 0x0800(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          IsAware;                                           // 0x0808(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_809[0x7];                                      // 0x0809(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class ACON_Enemy_C*                           EnemyController;                                   // 0x0810(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          IsMobile;                                          // 0x0818(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_819[0x7];                                      // 0x0819(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	FMulticastInlineDelegateProperty_             OnEnemyBehaviorStateChanged;                       // 0x0820(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)
	bool                                          IsHackable;                                        // 0x0830(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          HasBeenInitialized;                                // 0x0831(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_832[0x2];                                      // 0x0832(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                SpawnLocation;                                     // 0x0834(0x000C)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, SaveGame, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                SpawnDirection;                                    // 0x0840(0x000C)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, SaveGame, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ENUM_Emotions                                 PawnEmotion;                                       // 0x084C(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_84D[0x3];                                      // 0x084D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                ManeuverLocation;                                  // 0x0850(0x000C)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, SaveGame, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          IsManeuverLocationValid;                           // 0x085C(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, SaveGame, IsPlainOldData, NoDestructor)
	bool                                          ExplorePointsOfInterestAtStart;                    // 0x085D(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          ShouldExplorePointsOfInterest;                     // 0x085E(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, SaveGame, IsPlainOldData, NoDestructor)
	uint8                                         Pad_85F[0x1];                                      // 0x085F(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	TMap<ENUM_LocalBehaviorType, struct FSTRUCT_LocalBehaviorAnimations> LocalBehaviorAnimationMap;                         // 0x0860(0x0050)(Edit, BlueprintVisible, DisableEditOnInstance)
	class ULocalBehaviorComponent_C*              LocalBehaviorComponent;                            // 0x08B0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, InstancedReference, SaveGame, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UBehaviorTree*                          CustomIdleBehavior;                                // 0x08B8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, SaveGame, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UBehaviorTree*                          CustomCombatBehavior;                              // 0x08C0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, SaveGame, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UBehaviorTree*                          CustomPatrolBehavior;                              // 0x08C8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, SaveGame, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FString                                 StartRagdollMessage;                               // 0x08D0(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, HasGetValueTypeHash)
	struct FDataTableRowHandle                    EnemyStatsRowHandle;                               // 0x08E0(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor)
	bool                                          IsScannable;                                       // 0x08F0(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_8F1[0x7];                                      // 0x08F1(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FTransform>                     PendingBodyTransforms;                             // 0x08F8(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance)
	class FText                                   EnemyDisplayName;                                  // 0x0908(0x0018)(Edit, BlueprintVisible, DisableEditOnInstance)
	bool                                          PreferAboveTargetInCombat;                         // 0x0920(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_921[0x3];                                      // 0x0921(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         LastThreatenedTimestamp;                           // 0x0924(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         ThreatenedDuration;                                // 0x0928(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                GroundManeuverLocation;                            // 0x092C(0x000C)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          IsGroundManeuverLocationValid;                     // 0x0938(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	ENUM_StayNearSkillTargetState                 GroundManeuverStateCurrent;                        // 0x0939(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_93A[0x6];                                      // 0x093A(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class ULightTransitionManager_C*              EnemyLightManager;                                 // 0x0940(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         LightEmissiveCustomPrimitiveDataIndex;             // 0x0948(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         LightFlickerFrequencyOnDeath;                      // 0x094C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         LightFadeDurationOnDeath;                          // 0x0950(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         LightEmissiveIntensityDefault;                     // 0x0954(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          DebugGroundAlignment;                              // 0x0958(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_959[0x7];                                      // 0x0959(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FVector>                        GroundAlignRaycastOffsets;                         // 0x0960(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance)
	struct FVector                                GroundAlignRaycastOffset;                          // 0x0970(0x000C)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         GroundAlignRaycastDistance;                        // 0x097C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         GroundAlignRatio;                                  // 0x0980(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         GroundAlignmentSmoothing;                          // 0x0984(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UWeightedAverageVec3*                   GroundAlignNormalHistory;                          // 0x0988(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FTimerHandle                           GroundAlignTimerHandle;                            // 0x0990(0x0008)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	TSet<class USceneComponent*>                  ExcludedPOIs;                                      // 0x0998(0x0050)(Edit, BlueprintVisible, DisableEditOnInstance, ContainsInstancedReference)
	class UPhysicsAsset*                          HitReactPhysicsAsset;                              // 0x09E8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FColor                                 BloodColor;                                        // 0x09F0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          DebugDamageBonuses;                                // 0x09F4(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_9F5[0x3];                                      // 0x09F5(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTimerHandle                           StopLogicTimerHandle;                              // 0x09F8(0x0008)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	bool                                          CanStaggerFromDamage;                              // 0x0A00(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)

public:
	void OnEnemyBehaviorStateChanged__DelegateSignature(class APAWN_Enemy_C* Enemy);
	void ExecuteUbergraph_PAWN_Enemy(int32 EntryPoint);
	void BndEvt__PAWN_Enemy_COMP_DismembermentManager_K2Node_ComponentBoundEvent_6_OnDynaDamage__DelegateSignature(class FName DynaElementName, bool OnBeginPlay);
	void BndEvt__PAWN_Enemy_COMP_DismembermentManager_K2Node_ComponentBoundEvent_1_OnLimbDismembered__DelegateSignature(class FName LimbName, const struct FSTRUCT_DismemberableLimb& LimbData, class ADismembermentLimb_Base_C* LimbActor, bool OnBeginPlay);
	void BndEvt__PAWN_Enemy_COMP_ScannableObject_K2Node_ComponentBoundEvent_5_VoxelScannableVisibilitySignature__DelegateSignature(bool bVisibleState);
	void BndEvt__PAWN_Enemy_COMP_VoxelCullableNavAgent_K2Node_ComponentBoundEvent_4_CullableAudibilitySignature__DelegateSignature(bool bAudibleState);
	void ReceiveEndPlay(EEndPlayReason EndPlayReason);
	void BndEvt__COMP_VoxelNavAgent_K2Node_ComponentBoundEvent_3_CullableVisibilitySignature__DelegateSignature(bool bVisibleState);
	void ReceivePossessed(class AController* NewController);
	void BndEvt__COMP_EnemySensingComponent_K2Node_ComponentBoundEvent_0_OnHearPawn__DelegateSignature(class APAWN_SystemShockCharacter_C* Pawn, const struct FVector& Location, float Loudness);
	void BndEvt__COMP_EnemySensingComponent_K2Node_ComponentBoundEvent_2_OnSeePawn__DelegateSignature(class APAWN_SystemShockCharacter_C* Pawn, const struct FVector& Location);
	void OnCursorLeave(class UPrimitiveComponent* Cursor_Primitive);
	void OnCursorEnter(class UPrimitiveComponent* Cursor_Primitive);
	void UserConstructionScript();
	void SetTarget(ENUM_TargetAssignmentType AssignType, class UOBJ_EnemyTarget_C* Target);
	void GetTarget(ENUM_TargetAssignmentType Type, class UOBJ_EnemyTarget_C** Target);
	void OnCharacterDied(class UOBJ_ImpactData_C* ImpactData, const struct FAttribDamageInstance& DamageInstance, class AActor* OtherActor, bool* Result);
	bool ReceiveAnimationMessage(const EActorMessagePriority& Priority, const class FString& Message);
	void TryAssignInitialBehavior();
	void TryRestoreLocalBehavior();
	void TrySetEnemyName(bool* Result);
	void TrySetSpawnData(bool* Result);
	void TryGenerateLoot(bool* Result);
	void ShouldCloseLootWindow(class AActor* NewChannelingInteract, bool* Result);
	void GetExploitDamagePercentage(class AActor* SourceActor, class FName BoneName, const struct FVector& ImpactLocation, const struct FVector& AttackDirection, float AttackRadius, bool AllowSneakAttack, float* ExploitDamagePercent);
	void GetArmorAugmentationPercentage(class FName BoneName, const struct FVector& ImpactLocation, float* ArmorAugmentPercent);
	void GrantDefaultCharacterLoadout();
	void SetLowFiVisibilityState(bool NewLowFiState);
	void SetLowFiBehaviorState(bool NewLowFiState);
	void AttemptToEnterLowFiBehavior();
	void ForceRetryLowFiBehaviorAfterDuration(float Duration);
	void SetBehaviorEnabled(bool State);
	void IsBehaviorDisabled(bool* Result);
	void HasImportantBehavior(bool* Result);
	void IsAnyBehaviorEnabled(bool* Result);
	void InitializeDynamicBehaviors();
	void SetDynamicCombatBehavior(class UBehaviorTree* DynamicBehavior);
	void SetDynamicIdleBehavior(class UBehaviorTree* DynamicBehavior);
	void OnLowFiBehaviorStateChanged(bool NewLowFiState);
	void SetDisableBehaviorCullingWhilePatrolling(bool State);
	void ShouldDisableBehaviorCullingWhilePatrolling(bool* Result);
	void AddElapsedLowFiBehaviorTime(float ElapsedTime);
	void UpdateLastLowFiBehaviorTimestamp();
	void GetElapsedTimeSinceLastLowFiBehavior(float* Result);
	void IsLowFiBehaviorEnabled(bool* Result);
	void IsLowFiVisibilityEnabled(bool* Result);
	void IsLowFiAudibilityEnabled(bool* Result);
	void IsLowFiBehaviorAndVisibilityEnabled(bool* Result);
	void CanSetLowFiBehaviorEnabled(bool* Result);
	void IsNearSpawnLocation(bool CheckRotation, bool* Result);
	void IsEnemyAware(bool* Result);
	void IsEnemyMobile(bool* Result);
	void SetIsAware(bool State);
	void SetIsMobile(bool State);
	void ValidateDefaultAwareness();
	void OnEnemyAwarenessChanged();
	void OnEnemyMobilityChanged();
	void InitializeCharacterAsDead(bool* Result);
	void OnCharacterHurt(class AActor* OtherActor, const struct FAttribDamageInstance& DamageInstance, class UOBJ_ImpactData_C* ImpactData, bool* Result);
	void SetCharacterPropertiesToDead(bool* Result);
	void SetMeshPropertiesToDead(bool LowFiUpdated);
	void GetDeadDisplayName(class FText* Result);
	void GetDeadDescriptionText(class FText* Text);
	void GetDeathBlow(class UOBJ_ImpactData_C* ImpactData, const struct FAttribDamageInstance& Damage, struct FSTRUCT_DeathBlowData* DeathBlow);
	void GetPawnEmotion(ENUM_Emotions* Emotion);
	void SetPawnEmotion(ENUM_Emotions NewEmotion);
	void OnDeathImpact(const struct FAttribDamageInstance& DamageInstance, class UOBJ_ImpactData_C* ImpactData, bool* Result);
	void SetManeuverLocation(bool IsValid, const struct FVector& Location);
	void GetManeuverLocation(bool* IsValid, struct FVector* Location);
	void SetDynamicPatrolBehavior(class UBehaviorTree* DynamicBehavior);
	void OnEnemyShouldBeVisible(bool VisibilityState);
	void OnEnemyMightBeAudible(bool AudibilityState);
	void AssignNextPatrolNode();
	void TryPrintExploitDamageBonus(float BonusPercent, class FName BoneName);
	void TryStaggerFromDamage(const struct FAttribDamageInstance& DamageInstance);
	void SetDynamicStaggerBehavior(class UBehaviorTree* DynamicBehavior);
	void SetAnimStance(ENUM_Emotions Stance, bool* Result);
	void InitializeCharacter(bool* Result);
	void SpawnHeroGib(class UClass* Class_0, const struct FTransform& SpawnTransform, const struct FVector& Impulse, const struct FVector& Angular_Velocity);
	void OnLimbDismembered(class FName Limb, const struct FSTRUCT_DismemberableLimb& LimbData, class ADismembermentLimb_Base_C* LimbActor, bool OnBeginPlay);
	void OnDynaDamage(class FName DynaElement, bool OnBeginPlay);
	void GetDefaultAttributeOverrides(TArray<struct FDefaultAttribute>* OverrideAttribs);
	bool ShouldSaveActor(struct FStreamingSaveGameActorParams* Params_0);
	void HasCustomDeathBehavior(bool* Result);
	void GetEnemyScanShape(class UShapeComponent** ShapeComponent);
	void IsEnemyScannable(bool* Result);
	void CanHackEnemy(class APAWN_SystemShockCharacter_C* SourceCharacter, bool* Result);
	void GetEnemyType(ENUM_EnemyType* Result);
	void GetActorLinkedToEnemy(class AActor** Result);
	void UpdateEnemyScannableSettings();
	void SpawnLootPickups();
	void UpdateCustomDeathBehavior(bool* IsFinished);
	void OnStaggerFinished();
	void CanShootFromSocket(class FName SocketName, const struct FVector& BarrelLocation, bool* Result);
	void GetWeakspotBoneNameForAttack(const struct FVector& SourceLocation, int32 ArmorPenetration, class FName* ResultBoneName);
	void ClearUniversalWeakpointSockets();
	void SetCanStaggerFromDamage(bool State);
	void GetPreferredRangeBias(float* Bias);
	bool ReceivePendingBodyTransforms(class USkeletalMeshComponent* SkeletalMeshComponent, const TArray<struct FTransform>& BodyTransforms);
	void SetLocalBehaviorComponent(class ULocalBehaviorComponent_C* LocalBehaviorComponent_0);
	void GetLocalBehaviorComponent(class ULocalBehaviorComponent_C** LocalBehaviorComponent_0);
	void OnLivingCharacterDestroyed(bool RemovedDuringMapChange);
	void GetThreatLevel(int32* Result);
	void IsStunned(bool* Result);
	void GetShockAgentLocation(struct FVector* Location);
	void IsUnderImmediateThreat(bool* Result);
	void SetImmediatelyThreatened();
	void EVENT_OnDisableAttribChanged(float CurrValue, float LastValue);
	void OnEnemyCorpseDestroyed(bool OnBeginPlay);
	void OnMagneticDisableStateChanged(bool DisableState);
	void IsStaggered(bool* Result);
	void GetEnemyLightManager(class ULightTransitionManager_C** Result);
	void GetLightFadeDurationOnDeath(float* Result);
	void IsGroundAlignmentEnabled(bool* Result);
	void TryInitializeGroundAlignmentSystem();
	void EVENT_UpdateGroundAlignment();
	void TryModifyGroundAlignmentTimerState(bool State);
	void ForceStartNextGroundAlignmentTick();
	void TryStartGroundAlignmentTimer(bool* Result);
	void TryStopGroundAlignmentTimer(bool* Result);
	void ComputeGroundAlignmentNormal(struct FVector* Normal, float* Distance);
	void SetShouldExplorePointsOfInterest(bool State);
	void GetShouldExplorePointsOfInterest(bool* Result);
	void GetLocalBehaviorAnimationDataByType(ENUM_LocalBehaviorType BehaviorType, bool* Found, struct FSTRUCT_LocalBehaviorAnimations* Result);
	void TryClaimNextPointOfInterest(bool* Result);
	void TryUnclaimCurrentPointOfInterest(bool AddToExcludeList);
	void TryAssignNextLocalBehavior();
	void TryStartPointOfInterestCreationTimer();
	void EVENT_TryCreatePointOfInterest();
	void InitializePointOfInterestAfterDeath(class USpawnedPointOfInterest_C* Component);
	void EVENT_OnDelayedStopLogic();
	void EVENT_OnTryCleanupBeforeUnloadLevelCollection();
	void OnEnemyRadarScannedStateChanged(bool State);
	void GetMeshComponentsForTeleport(TArray<class UMeshComponent*>* MeshComponents);
	void UpdateCharacterStateForTeleport(bool ShouldUpdateVisibility);
	void SetDefaultLightEmissiveIntensity(float Intensity, float TransitionDuration);
	void OnEnemySpawned(class APatrolNode_C* InitialPatrolNode, TSoftClassPtr<class UClass> UniqueLootItem, bool AdjustToFloor);
	void IsCharacterVisible(bool* Result);
	void OnCharacterVisibilityChanged(bool VisibilityState);
	void OnSkillTargetChanged();
	void GetLocalVisionRotation(struct FRotator* Result);
	void TryUpdateSpawnLocation(bool* Result);
	void IsRealspaceCharacter(bool* Result);
	void GetInteractBroken(bool* Result, class FText* BrokenMessage);
	void GetInteractLocked(class AActor* SourceActor, bool* Result, class FText* LockMessage);
	void GetInteractBusy(bool* Result, class FText* BusyMessage);
	void SetInteractLocked(bool Locked, bool* Result);
	void StopChanneling(class AActor* NewChannelingInteract, bool* Result);
	void GetTargetShape(class UPrimitiveComponent* CursorPrimitive, class UShapeComponent** ShapeComponent);
	void TryInteract(class AActor* SourceActor, class UPrimitiveComponent* CursorPrimitive, ENUM_InteractionType InteractionType, struct FSTRUCT_InteractResults* InteractResults);
	void TryReceiveItem(class UITEM_Base_C* Item, bool* Result);
	void IsHiddenInteractablePrimitive(class APAWN_SystemShockCharacter_C* Character, class UPrimitiveComponent* CursorPrimitive, bool* Result);
	void ShouldIgnoreInteractRange(bool* Result);
	void CanReceiveItem(class UITEM_Base_C* Item, bool* Result);
	void IsInteractActivated(bool* Result);
	void GetInteractDestroyed(bool* Result);
	void CanInteractBeDestroyed(bool* Result);
	void SetInteractPowered(bool State, bool* Result);
	void CanModifyInteractPower(bool* Result);
	void GetChannelingHoldDuration(float* Result);
	void FinishedChannelingHoldInteraction(class APAWN_SystemShockCharacter_C* Character, bool* Result);
	void TryDetachInteract(bool SimulatePhysics, bool* Result);

	void GetEnemyDisplayName(class FText* Text) const;

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"PAWN_Enemy_C">();
	}
	static class APAWN_Enemy_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<APAWN_Enemy_C>();
	}
};
#pragma pack(pop)
static_assert(alignof(APAWN_Enemy_C) == 0x000010, "Wrong alignment on APAWN_Enemy_C");
static_assert(sizeof(APAWN_Enemy_C) == 0x000A10, "Wrong size on APAWN_Enemy_C");
static_assert(offsetof(APAWN_Enemy_C, UberGraphFrame_PAWN_Enemy_C) == 0x000680, "Member 'APAWN_Enemy_C::UberGraphFrame_PAWN_Enemy_C' has a wrong offset!");
static_assert(offsetof(APAWN_Enemy_C, COMP_SkinnedDecalSampler) == 0x000688, "Member 'APAWN_Enemy_C::COMP_SkinnedDecalSampler' has a wrong offset!");
static_assert(offsetof(APAWN_Enemy_C, COMP_PhysicsImpactHandler) == 0x000690, "Member 'APAWN_Enemy_C::COMP_PhysicsImpactHandler' has a wrong offset!");
static_assert(offsetof(APAWN_Enemy_C, COMP_DismembermentManager) == 0x000698, "Member 'APAWN_Enemy_C::COMP_DismembermentManager' has a wrong offset!");
static_assert(offsetof(APAWN_Enemy_C, COMP_VoiceManager) == 0x0006A0, "Member 'APAWN_Enemy_C::COMP_VoiceManager' has a wrong offset!");
static_assert(offsetof(APAWN_Enemy_C, COMP_VoxelCullableNavAgent) == 0x0006A8, "Member 'APAWN_Enemy_C::COMP_VoxelCullableNavAgent' has a wrong offset!");
static_assert(offsetof(APAWN_Enemy_C, COMP_EnemySensingComponent) == 0x0006B0, "Member 'APAWN_Enemy_C::COMP_EnemySensingComponent' has a wrong offset!");
static_assert(offsetof(APAWN_Enemy_C, PhysicalAnimation) == 0x0006B8, "Member 'APAWN_Enemy_C::PhysicalAnimation' has a wrong offset!");
static_assert(offsetof(APAWN_Enemy_C, COMP_Descriptor) == 0x0006C0, "Member 'APAWN_Enemy_C::COMP_Descriptor' has a wrong offset!");
static_assert(offsetof(APAWN_Enemy_C, COMP_ScannableObject) == 0x0006C8, "Member 'APAWN_Enemy_C::COMP_ScannableObject' has a wrong offset!");
static_assert(offsetof(APAWN_Enemy_C, COMP_SkillManager) == 0x0006D0, "Member 'APAWN_Enemy_C::COMP_SkillManager' has a wrong offset!");
static_assert(offsetof(APAWN_Enemy_C, COMP_EnemyDetection) == 0x0006D8, "Member 'APAWN_Enemy_C::COMP_EnemyDetection' has a wrong offset!");
static_assert(offsetof(APAWN_Enemy_C, COMP_Headlook) == 0x0006E0, "Member 'APAWN_Enemy_C::COMP_Headlook' has a wrong offset!");
static_assert(offsetof(APAWN_Enemy_C, COMP_EnemyMovement) == 0x0006E8, "Member 'APAWN_Enemy_C::COMP_EnemyMovement' has a wrong offset!");
static_assert(offsetof(APAWN_Enemy_C, PatrolNode) == 0x0006F0, "Member 'APAWN_Enemy_C::PatrolNode' has a wrong offset!");
static_assert(offsetof(APAWN_Enemy_C, SkillTarget) == 0x0006F8, "Member 'APAWN_Enemy_C::SkillTarget' has a wrong offset!");
static_assert(offsetof(APAWN_Enemy_C, LootTable) == 0x000700, "Member 'APAWN_Enemy_C::LootTable' has a wrong offset!");
static_assert(offsetof(APAWN_Enemy_C, BadgeRowHandle) == 0x000710, "Member 'APAWN_Enemy_C::BadgeRowHandle' has a wrong offset!");
static_assert(offsetof(APAWN_Enemy_C, PainMontages) == 0x000720, "Member 'APAWN_Enemy_C::PainMontages' has a wrong offset!");
static_assert(offsetof(APAWN_Enemy_C, EnterStunMontage) == 0x000730, "Member 'APAWN_Enemy_C::EnterStunMontage' has a wrong offset!");
static_assert(offsetof(APAWN_Enemy_C, ExitStunMontage) == 0x000758, "Member 'APAWN_Enemy_C::ExitStunMontage' has a wrong offset!");
static_assert(offsetof(APAWN_Enemy_C, StunLoop) == 0x000780, "Member 'APAWN_Enemy_C::StunLoop' has a wrong offset!");
static_assert(offsetof(APAWN_Enemy_C, PelvisBone) == 0x0007A8, "Member 'APAWN_Enemy_C::PelvisBone' has a wrong offset!");
static_assert(offsetof(APAWN_Enemy_C, UniversalWeakpointSocketNames) == 0x0007B0, "Member 'APAWN_Enemy_C::UniversalWeakpointSocketNames' has a wrong offset!");
static_assert(offsetof(APAWN_Enemy_C, DeathBlows) == 0x0007C0, "Member 'APAWN_Enemy_C::DeathBlows' has a wrong offset!");
static_assert(offsetof(APAWN_Enemy_C, IsLowFiVisibility) == 0x0007D0, "Member 'APAWN_Enemy_C::IsLowFiVisibility' has a wrong offset!");
static_assert(offsetof(APAWN_Enemy_C, IsLowFiAudibility) == 0x0007D1, "Member 'APAWN_Enemy_C::IsLowFiAudibility' has a wrong offset!");
static_assert(offsetof(APAWN_Enemy_C, IsLowFiBehavior) == 0x0007D2, "Member 'APAWN_Enemy_C::IsLowFiBehavior' has a wrong offset!");
static_assert(offsetof(APAWN_Enemy_C, PreferredCombatStyle) == 0x0007D3, "Member 'APAWN_Enemy_C::PreferredCombatStyle' has a wrong offset!");
static_assert(offsetof(APAWN_Enemy_C, IsScannedByRadar) == 0x0007D4, "Member 'APAWN_Enemy_C::IsScannedByRadar' has a wrong offset!");
static_assert(offsetof(APAWN_Enemy_C, WasPhysicsAsleep) == 0x0007D5, "Member 'APAWN_Enemy_C::WasPhysicsAsleep' has a wrong offset!");
static_assert(offsetof(APAWN_Enemy_C, DisableBehaviorCullingWhilePatrolling) == 0x0007D6, "Member 'APAWN_Enemy_C::DisableBehaviorCullingWhilePatrolling' has a wrong offset!");
static_assert(offsetof(APAWN_Enemy_C, LastLowFiBehaviorTimestamp) == 0x0007D8, "Member 'APAWN_Enemy_C::LastLowFiBehaviorTimestamp' has a wrong offset!");
static_assert(offsetof(APAWN_Enemy_C, RetryLowFiTimerHandle) == 0x0007E0, "Member 'APAWN_Enemy_C::RetryLowFiTimerHandle' has a wrong offset!");
static_assert(offsetof(APAWN_Enemy_C, IdleFidgetMontages) == 0x0007E8, "Member 'APAWN_Enemy_C::IdleFidgetMontages' has a wrong offset!");
static_assert(offsetof(APAWN_Enemy_C, InitialCustomIdleBehavior) == 0x0007F8, "Member 'APAWN_Enemy_C::InitialCustomIdleBehavior' has a wrong offset!");
static_assert(offsetof(APAWN_Enemy_C, InitialCustomCombatBehavior) == 0x000800, "Member 'APAWN_Enemy_C::InitialCustomCombatBehavior' has a wrong offset!");
static_assert(offsetof(APAWN_Enemy_C, IsAware) == 0x000808, "Member 'APAWN_Enemy_C::IsAware' has a wrong offset!");
static_assert(offsetof(APAWN_Enemy_C, EnemyController) == 0x000810, "Member 'APAWN_Enemy_C::EnemyController' has a wrong offset!");
static_assert(offsetof(APAWN_Enemy_C, IsMobile) == 0x000818, "Member 'APAWN_Enemy_C::IsMobile' has a wrong offset!");
static_assert(offsetof(APAWN_Enemy_C, OnEnemyBehaviorStateChanged) == 0x000820, "Member 'APAWN_Enemy_C::OnEnemyBehaviorStateChanged' has a wrong offset!");
static_assert(offsetof(APAWN_Enemy_C, IsHackable) == 0x000830, "Member 'APAWN_Enemy_C::IsHackable' has a wrong offset!");
static_assert(offsetof(APAWN_Enemy_C, HasBeenInitialized) == 0x000831, "Member 'APAWN_Enemy_C::HasBeenInitialized' has a wrong offset!");
static_assert(offsetof(APAWN_Enemy_C, SpawnLocation) == 0x000834, "Member 'APAWN_Enemy_C::SpawnLocation' has a wrong offset!");
static_assert(offsetof(APAWN_Enemy_C, SpawnDirection) == 0x000840, "Member 'APAWN_Enemy_C::SpawnDirection' has a wrong offset!");
static_assert(offsetof(APAWN_Enemy_C, PawnEmotion) == 0x00084C, "Member 'APAWN_Enemy_C::PawnEmotion' has a wrong offset!");
static_assert(offsetof(APAWN_Enemy_C, ManeuverLocation) == 0x000850, "Member 'APAWN_Enemy_C::ManeuverLocation' has a wrong offset!");
static_assert(offsetof(APAWN_Enemy_C, IsManeuverLocationValid) == 0x00085C, "Member 'APAWN_Enemy_C::IsManeuverLocationValid' has a wrong offset!");
static_assert(offsetof(APAWN_Enemy_C, ExplorePointsOfInterestAtStart) == 0x00085D, "Member 'APAWN_Enemy_C::ExplorePointsOfInterestAtStart' has a wrong offset!");
static_assert(offsetof(APAWN_Enemy_C, ShouldExplorePointsOfInterest) == 0x00085E, "Member 'APAWN_Enemy_C::ShouldExplorePointsOfInterest' has a wrong offset!");
static_assert(offsetof(APAWN_Enemy_C, LocalBehaviorAnimationMap) == 0x000860, "Member 'APAWN_Enemy_C::LocalBehaviorAnimationMap' has a wrong offset!");
static_assert(offsetof(APAWN_Enemy_C, LocalBehaviorComponent) == 0x0008B0, "Member 'APAWN_Enemy_C::LocalBehaviorComponent' has a wrong offset!");
static_assert(offsetof(APAWN_Enemy_C, CustomIdleBehavior) == 0x0008B8, "Member 'APAWN_Enemy_C::CustomIdleBehavior' has a wrong offset!");
static_assert(offsetof(APAWN_Enemy_C, CustomCombatBehavior) == 0x0008C0, "Member 'APAWN_Enemy_C::CustomCombatBehavior' has a wrong offset!");
static_assert(offsetof(APAWN_Enemy_C, CustomPatrolBehavior) == 0x0008C8, "Member 'APAWN_Enemy_C::CustomPatrolBehavior' has a wrong offset!");
static_assert(offsetof(APAWN_Enemy_C, StartRagdollMessage) == 0x0008D0, "Member 'APAWN_Enemy_C::StartRagdollMessage' has a wrong offset!");
static_assert(offsetof(APAWN_Enemy_C, EnemyStatsRowHandle) == 0x0008E0, "Member 'APAWN_Enemy_C::EnemyStatsRowHandle' has a wrong offset!");
static_assert(offsetof(APAWN_Enemy_C, IsScannable) == 0x0008F0, "Member 'APAWN_Enemy_C::IsScannable' has a wrong offset!");
static_assert(offsetof(APAWN_Enemy_C, PendingBodyTransforms) == 0x0008F8, "Member 'APAWN_Enemy_C::PendingBodyTransforms' has a wrong offset!");
static_assert(offsetof(APAWN_Enemy_C, EnemyDisplayName) == 0x000908, "Member 'APAWN_Enemy_C::EnemyDisplayName' has a wrong offset!");
static_assert(offsetof(APAWN_Enemy_C, PreferAboveTargetInCombat) == 0x000920, "Member 'APAWN_Enemy_C::PreferAboveTargetInCombat' has a wrong offset!");
static_assert(offsetof(APAWN_Enemy_C, LastThreatenedTimestamp) == 0x000924, "Member 'APAWN_Enemy_C::LastThreatenedTimestamp' has a wrong offset!");
static_assert(offsetof(APAWN_Enemy_C, ThreatenedDuration) == 0x000928, "Member 'APAWN_Enemy_C::ThreatenedDuration' has a wrong offset!");
static_assert(offsetof(APAWN_Enemy_C, GroundManeuverLocation) == 0x00092C, "Member 'APAWN_Enemy_C::GroundManeuverLocation' has a wrong offset!");
static_assert(offsetof(APAWN_Enemy_C, IsGroundManeuverLocationValid) == 0x000938, "Member 'APAWN_Enemy_C::IsGroundManeuverLocationValid' has a wrong offset!");
static_assert(offsetof(APAWN_Enemy_C, GroundManeuverStateCurrent) == 0x000939, "Member 'APAWN_Enemy_C::GroundManeuverStateCurrent' has a wrong offset!");
static_assert(offsetof(APAWN_Enemy_C, EnemyLightManager) == 0x000940, "Member 'APAWN_Enemy_C::EnemyLightManager' has a wrong offset!");
static_assert(offsetof(APAWN_Enemy_C, LightEmissiveCustomPrimitiveDataIndex) == 0x000948, "Member 'APAWN_Enemy_C::LightEmissiveCustomPrimitiveDataIndex' has a wrong offset!");
static_assert(offsetof(APAWN_Enemy_C, LightFlickerFrequencyOnDeath) == 0x00094C, "Member 'APAWN_Enemy_C::LightFlickerFrequencyOnDeath' has a wrong offset!");
static_assert(offsetof(APAWN_Enemy_C, LightFadeDurationOnDeath) == 0x000950, "Member 'APAWN_Enemy_C::LightFadeDurationOnDeath' has a wrong offset!");
static_assert(offsetof(APAWN_Enemy_C, LightEmissiveIntensityDefault) == 0x000954, "Member 'APAWN_Enemy_C::LightEmissiveIntensityDefault' has a wrong offset!");
static_assert(offsetof(APAWN_Enemy_C, DebugGroundAlignment) == 0x000958, "Member 'APAWN_Enemy_C::DebugGroundAlignment' has a wrong offset!");
static_assert(offsetof(APAWN_Enemy_C, GroundAlignRaycastOffsets) == 0x000960, "Member 'APAWN_Enemy_C::GroundAlignRaycastOffsets' has a wrong offset!");
static_assert(offsetof(APAWN_Enemy_C, GroundAlignRaycastOffset) == 0x000970, "Member 'APAWN_Enemy_C::GroundAlignRaycastOffset' has a wrong offset!");
static_assert(offsetof(APAWN_Enemy_C, GroundAlignRaycastDistance) == 0x00097C, "Member 'APAWN_Enemy_C::GroundAlignRaycastDistance' has a wrong offset!");
static_assert(offsetof(APAWN_Enemy_C, GroundAlignRatio) == 0x000980, "Member 'APAWN_Enemy_C::GroundAlignRatio' has a wrong offset!");
static_assert(offsetof(APAWN_Enemy_C, GroundAlignmentSmoothing) == 0x000984, "Member 'APAWN_Enemy_C::GroundAlignmentSmoothing' has a wrong offset!");
static_assert(offsetof(APAWN_Enemy_C, GroundAlignNormalHistory) == 0x000988, "Member 'APAWN_Enemy_C::GroundAlignNormalHistory' has a wrong offset!");
static_assert(offsetof(APAWN_Enemy_C, GroundAlignTimerHandle) == 0x000990, "Member 'APAWN_Enemy_C::GroundAlignTimerHandle' has a wrong offset!");
static_assert(offsetof(APAWN_Enemy_C, ExcludedPOIs) == 0x000998, "Member 'APAWN_Enemy_C::ExcludedPOIs' has a wrong offset!");
static_assert(offsetof(APAWN_Enemy_C, HitReactPhysicsAsset) == 0x0009E8, "Member 'APAWN_Enemy_C::HitReactPhysicsAsset' has a wrong offset!");
static_assert(offsetof(APAWN_Enemy_C, BloodColor) == 0x0009F0, "Member 'APAWN_Enemy_C::BloodColor' has a wrong offset!");
static_assert(offsetof(APAWN_Enemy_C, DebugDamageBonuses) == 0x0009F4, "Member 'APAWN_Enemy_C::DebugDamageBonuses' has a wrong offset!");
static_assert(offsetof(APAWN_Enemy_C, StopLogicTimerHandle) == 0x0009F8, "Member 'APAWN_Enemy_C::StopLogicTimerHandle' has a wrong offset!");
static_assert(offsetof(APAWN_Enemy_C, CanStaggerFromDamage) == 0x000A00, "Member 'APAWN_Enemy_C::CanStaggerFromDamage' has a wrong offset!");

}

