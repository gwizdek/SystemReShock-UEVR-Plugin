#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: INTERACT_Base

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "Engine_classes.hpp"
#include "ENUM_InteractionType_structs.hpp"


namespace SDK
{

// BlueprintGeneratedClass INTERACT_Base.INTERACT_Base_C
// 0x00E8 (0x0308 - 0x0220)
class AINTERACT_Base_C : public AActor
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x0220(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	class UCOMP_Descriptor_C*                     COMP_Descriptor;                                   // 0x0228(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USceneComponent*                        Scene;                                             // 0x0230(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	bool                                          ShouldSaveInteractTransforms;                      // 0x0238(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          ShouldSaveInteractPhysics;                         // 0x0239(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          ShouldSaveInteractPose;                            // 0x023A(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          ShouldSaveInteractActor;                           // 0x023B(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_23C[0x4];                                      // 0x023C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	FMulticastInlineDelegateProperty_             OnInteractLockStateChanged;                        // 0x0240(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)
	class FText                                   SecurityLockMessage;                               // 0x0250(0x0018)(Edit, BlueprintVisible, DisableEditOnInstance)
	class FText                                   ZeroSecurityLockMessage;                           // 0x0268(0x0018)(Edit, BlueprintVisible, DisableEditOnInstance)
	class FText                                   CantUseWhileThreatenedMessage;                     // 0x0280(0x0018)(Edit, BlueprintVisible, DisableEditOnInstance)
	class FText                                   AlreadyInUseMessage;                               // 0x0298(0x0018)(Edit, BlueprintVisible, DisableEditOnInstance)
	FMulticastInlineDelegateProperty_             OnInteractDestroyed;                               // 0x02B0(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)
	class FText                                   AlreadyActivatedMessage;                           // 0x02C0(0x0018)(Edit, BlueprintVisible, DisableEditOnInstance)
	class FText                                   AlreadyDeactivatedMessage;                         // 0x02D8(0x0018)(Edit, BlueprintVisible, DisableEditOnInstance)
	class FText                                   NotFunctionalMessage;                              // 0x02F0(0x0018)(Edit, BlueprintVisible, DisableEditOnInstance)

public:
	void OnInteractLockStateChanged__DelegateSignature(class AINTERACT_Base_C* Interact);
	void OnInteractDestroyed__DelegateSignature(class AINTERACT_Base_C* Interact);
	void ExecuteUbergraph_INTERACT_Base(int32 EntryPoint);
	void OnCursorLeave(class UPrimitiveComponent* Cursor_Primitive);
	void OnCursorEnter(class UPrimitiveComponent* Cursor_Primitive);
	void GetSecurityLockText(int32 RequiredSecurityLevel, class FText* Result);
	void HasHighPriorityTargetShape(bool* Result);
	void GetTargetShape(class UPrimitiveComponent* CursorPrimitive, class UShapeComponent** ShapeComponent);
	void TryInteract(class AActor* SourceActor, class UPrimitiveComponent* CursorPrimitive, ENUM_InteractionType InteractionType, struct FSTRUCT_InteractResults* InteractResults);
	void StopChanneling(class AActor* NewChannelingInteract, bool* Result);
	void SetInteractLocked(bool Locked, bool* Result);
	void GetInteractBusy(bool* Result, class FText* BusyMessage);
	void GetInteractLocked(class AActor* SourceActor, bool* Result, class FText* LockMessage);
	void GetInteractBroken(bool* Result, class FText* BrokenMessage);
	void TryReceiveItem(class UITEM_Base_C* Item, bool* Result);
	void IsHiddenInteractablePrimitive(class APAWN_SystemShockCharacter_C* Character, class UPrimitiveComponent* CursorPrimitive, bool* Result);
	void ShouldIgnoreInteractRange(bool* Result);
	void CanReceiveItem(class UITEM_Base_C* Item, bool* Result);
	void IsInteractActivated(bool* Result);
	void GetInteractDestroyed(bool* Result);
	void CanInteractBeDestroyed(bool* Result);
	void SetInteractPowered(bool State, bool* Result);
	void CanModifyInteractPower(bool* Result);
	void TryDetachInteract(bool SimulatePhysics, bool* Result);
	void GetChannelingHoldDuration(float* Result);
	void FinishedChannelingHoldInteraction(class APAWN_SystemShockCharacter_C* Character, bool* Result);
	bool ShouldSaveActor(struct FStreamingSaveGameActorParams* Params_0);
	bool ReceivePendingBodyTransforms(class USkeletalMeshComponent* SkeletalMeshComponent, const TArray<struct FTransform>& BodyTransforms);
	bool ReceivePendingCharacterVelocity(const struct FVector& Velocity);

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"INTERACT_Base_C">();
	}
	static class AINTERACT_Base_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<AINTERACT_Base_C>();
	}
};
static_assert(alignof(AINTERACT_Base_C) == 0x000008, "Wrong alignment on AINTERACT_Base_C");
static_assert(sizeof(AINTERACT_Base_C) == 0x000308, "Wrong size on AINTERACT_Base_C");
static_assert(offsetof(AINTERACT_Base_C, UberGraphFrame) == 0x000220, "Member 'AINTERACT_Base_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(AINTERACT_Base_C, COMP_Descriptor) == 0x000228, "Member 'AINTERACT_Base_C::COMP_Descriptor' has a wrong offset!");
static_assert(offsetof(AINTERACT_Base_C, Scene) == 0x000230, "Member 'AINTERACT_Base_C::Scene' has a wrong offset!");
static_assert(offsetof(AINTERACT_Base_C, ShouldSaveInteractTransforms) == 0x000238, "Member 'AINTERACT_Base_C::ShouldSaveInteractTransforms' has a wrong offset!");
static_assert(offsetof(AINTERACT_Base_C, ShouldSaveInteractPhysics) == 0x000239, "Member 'AINTERACT_Base_C::ShouldSaveInteractPhysics' has a wrong offset!");
static_assert(offsetof(AINTERACT_Base_C, ShouldSaveInteractPose) == 0x00023A, "Member 'AINTERACT_Base_C::ShouldSaveInteractPose' has a wrong offset!");
static_assert(offsetof(AINTERACT_Base_C, ShouldSaveInteractActor) == 0x00023B, "Member 'AINTERACT_Base_C::ShouldSaveInteractActor' has a wrong offset!");
static_assert(offsetof(AINTERACT_Base_C, OnInteractLockStateChanged) == 0x000240, "Member 'AINTERACT_Base_C::OnInteractLockStateChanged' has a wrong offset!");
static_assert(offsetof(AINTERACT_Base_C, SecurityLockMessage) == 0x000250, "Member 'AINTERACT_Base_C::SecurityLockMessage' has a wrong offset!");
static_assert(offsetof(AINTERACT_Base_C, ZeroSecurityLockMessage) == 0x000268, "Member 'AINTERACT_Base_C::ZeroSecurityLockMessage' has a wrong offset!");
static_assert(offsetof(AINTERACT_Base_C, CantUseWhileThreatenedMessage) == 0x000280, "Member 'AINTERACT_Base_C::CantUseWhileThreatenedMessage' has a wrong offset!");
static_assert(offsetof(AINTERACT_Base_C, AlreadyInUseMessage) == 0x000298, "Member 'AINTERACT_Base_C::AlreadyInUseMessage' has a wrong offset!");
static_assert(offsetof(AINTERACT_Base_C, OnInteractDestroyed) == 0x0002B0, "Member 'AINTERACT_Base_C::OnInteractDestroyed' has a wrong offset!");
static_assert(offsetof(AINTERACT_Base_C, AlreadyActivatedMessage) == 0x0002C0, "Member 'AINTERACT_Base_C::AlreadyActivatedMessage' has a wrong offset!");
static_assert(offsetof(AINTERACT_Base_C, AlreadyDeactivatedMessage) == 0x0002D8, "Member 'AINTERACT_Base_C::AlreadyDeactivatedMessage' has a wrong offset!");
static_assert(offsetof(AINTERACT_Base_C, NotFunctionalMessage) == 0x0002F0, "Member 'AINTERACT_Base_C::NotFunctionalMessage' has a wrong offset!");

}

