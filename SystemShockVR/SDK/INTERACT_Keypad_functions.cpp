#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: INTERACT_Keypad

#include "Basic.hpp"

#include "INTERACT_Keypad_classes.hpp"
#include "INTERACT_Keypad_parameters.hpp"


namespace SDK
{

// Function INTERACT_Keypad.INTERACT_Keypad_C.ExecuteUbergraph_INTERACT_Keypad
// (Final, UbergraphFunction)
// Parameters:
// int32                                   EntryPoint                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void AINTERACT_Keypad_C::ExecuteUbergraph_INTERACT_Keypad(int32 EntryPoint)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("INTERACT_Keypad_C", "ExecuteUbergraph_INTERACT_Keypad");

	Params::INTERACT_Keypad_C_ExecuteUbergraph_INTERACT_Keypad Parms{};

	Parms.EntryPoint = EntryPoint;

	UObject::ProcessEvent(Func, &Parms);
}


// Function INTERACT_Keypad.INTERACT_Keypad_C.BndEvt__COMP_VoxelCullable_K2Node_ComponentBoundEvent_0_CullableVisibilitySignature__DelegateSignature
// (BlueprintEvent)
// Parameters:
// bool                                    bVisibleState                                          (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)

void AINTERACT_Keypad_C::BndEvt__COMP_VoxelCullable_K2Node_ComponentBoundEvent_0_CullableVisibilitySignature__DelegateSignature(bool bVisibleState)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("INTERACT_Keypad_C", "BndEvt__COMP_VoxelCullable_K2Node_ComponentBoundEvent_0_CullableVisibilitySignature__DelegateSignature");

	Params::INTERACT_Keypad_C_BndEvt__COMP_VoxelCullable_K2Node_ComponentBoundEvent_0_CullableVisibilitySignature__DelegateSignature Parms{};

	Parms.bVisibleState = bVisibleState;

	UObject::ProcessEvent(Func, &Parms);
}


// Function INTERACT_Keypad.INTERACT_Keypad_C.ReceiveBeginPlay
// (Event, Protected, BlueprintEvent)

void AINTERACT_Keypad_C::ReceiveBeginPlay()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("INTERACT_Keypad_C", "ReceiveBeginPlay");

	UObject::ProcessEvent(Func, nullptr);
}


// Function INTERACT_Keypad.INTERACT_Keypad_C.ReceiveTick
// (Event, Public, BlueprintEvent)
// Parameters:
// float                                   DeltaSeconds                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void AINTERACT_Keypad_C::ReceiveTick(float DeltaSeconds)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("INTERACT_Keypad_C", "ReceiveTick");

	Params::INTERACT_Keypad_C_ReceiveTick Parms{};

	Parms.DeltaSeconds = DeltaSeconds;

	UObject::ProcessEvent(Func, &Parms);
}


// Function INTERACT_Keypad.INTERACT_Keypad_C.UserConstructionScript
// (Event, Public, BlueprintCallable, BlueprintEvent)

void AINTERACT_Keypad_C::UserConstructionScript()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("INTERACT_Keypad_C", "UserConstructionScript");

	UObject::ProcessEvent(Func, nullptr);
}


// Function INTERACT_Keypad.INTERACT_Keypad_C.IsKeypadFunctional
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// bool                                    Result                                                 (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void AINTERACT_Keypad_C::IsKeypadFunctional(bool* Result)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("INTERACT_Keypad_C", "IsKeypadFunctional");

	Params::INTERACT_Keypad_C_IsKeypadFunctional Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (Result != nullptr)
		*Result = Parms.Result;
}


// Function INTERACT_Keypad.INTERACT_Keypad_C.GetScreenMesh
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// class UMeshComponent*                   MeshComponent                                          (Parm, OutParm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void AINTERACT_Keypad_C::GetScreenMesh(class UMeshComponent** MeshComponent)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("INTERACT_Keypad_C", "GetScreenMesh");

	Params::INTERACT_Keypad_C_GetScreenMesh Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (MeshComponent != nullptr)
		*MeshComponent = Parms.MeshComponent;
}


// Function INTERACT_Keypad.INTERACT_Keypad_C.GetTargetDigitCount
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// int32                                   Result                                                 (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void AINTERACT_Keypad_C::GetTargetDigitCount(int32* Result)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("INTERACT_Keypad_C", "GetTargetDigitCount");

	Params::INTERACT_Keypad_C_GetTargetDigitCount Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (Result != nullptr)
		*Result = Parms.Result;
}


// Function INTERACT_Keypad.INTERACT_Keypad_C.GetKeyFromBoxComponent
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// class UBoxComponent*                    BoxCollision                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// int32                                   Result                                                 (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void AINTERACT_Keypad_C::GetKeyFromBoxComponent(class UBoxComponent* BoxCollision, int32* Result)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("INTERACT_Keypad_C", "GetKeyFromBoxComponent");

	Params::INTERACT_Keypad_C_GetKeyFromBoxComponent Parms{};

	Parms.BoxCollision = BoxCollision;

	UObject::ProcessEvent(Func, &Parms);

	if (Result != nullptr)
		*Result = Parms.Result;
}


// Function INTERACT_Keypad.INTERACT_Keypad_C.InitializeKeypad
// (Protected, BlueprintCallable, BlueprintEvent)

void AINTERACT_Keypad_C::InitializeKeypad()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("INTERACT_Keypad_C", "InitializeKeypad");

	UObject::ProcessEvent(Func, nullptr);
}


// Function INTERACT_Keypad.INTERACT_Keypad_C.InitializeAttributes
// (Protected, BlueprintCallable, BlueprintEvent)

void AINTERACT_Keypad_C::InitializeAttributes()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("INTERACT_Keypad_C", "InitializeAttributes");

	UObject::ProcessEvent(Func, nullptr);
}


// Function INTERACT_Keypad.INTERACT_Keypad_C.UpdateKeypad
// (Protected, BlueprintCallable, BlueprintEvent)
// Parameters:
// float                                   DeltaTime                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void AINTERACT_Keypad_C::UpdateKeypad(float DeltaTime)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("INTERACT_Keypad_C", "UpdateKeypad");

	Params::INTERACT_Keypad_C_UpdateKeypad Parms{};

	Parms.DeltaTime = DeltaTime;

	UObject::ProcessEvent(Func, &Parms);
}


// Function INTERACT_Keypad.INTERACT_Keypad_C.ClearKeypad
// (Private, BlueprintCallable, BlueprintEvent)

void AINTERACT_Keypad_C::ClearKeypad()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("INTERACT_Keypad_C", "ClearKeypad");

	UObject::ProcessEvent(Func, nullptr);
}


// Function INTERACT_Keypad.INTERACT_Keypad_C.EraseLastKeypadEntry
// (Private, HasDefaults, BlueprintCallable, BlueprintEvent)

void AINTERACT_Keypad_C::EraseLastKeypadEntry()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("INTERACT_Keypad_C", "EraseLastKeypadEntry");

	UObject::ProcessEvent(Func, nullptr);
}


// Function INTERACT_Keypad.INTERACT_Keypad_C.RecordKeypadEntry
// (Private, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// int32                                   EntryValue                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FSTRUCT_InteractResults          InteractResults                                        (Parm, OutParm, HasGetValueTypeHash)

void AINTERACT_Keypad_C::RecordKeypadEntry(int32 EntryValue, struct FSTRUCT_InteractResults* InteractResults)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("INTERACT_Keypad_C", "RecordKeypadEntry");

	Params::INTERACT_Keypad_C_RecordKeypadEntry Parms{};

	Parms.EntryValue = EntryValue;

	UObject::ProcessEvent(Func, &Parms);

	if (InteractResults != nullptr)
		*InteractResults = std::move(Parms.InteractResults);
}


// Function INTERACT_Keypad.INTERACT_Keypad_C.UpdateErrorState
// (Private, BlueprintCallable, BlueprintEvent)

void AINTERACT_Keypad_C::UpdateErrorState()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("INTERACT_Keypad_C", "UpdateErrorState");

	UObject::ProcessEvent(Func, nullptr);
}


// Function INTERACT_Keypad.INTERACT_Keypad_C.UpdateValidState
// (Private, HasDefaults, BlueprintCallable, BlueprintEvent)

void AINTERACT_Keypad_C::UpdateValidState()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("INTERACT_Keypad_C", "UpdateValidState");

	UObject::ProcessEvent(Func, nullptr);
}


// Function INTERACT_Keypad.INTERACT_Keypad_C.UpdateMeshEmissiveStrength
// (Protected, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// float                                   Scale                                                  (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void AINTERACT_Keypad_C::UpdateMeshEmissiveStrength(float Scale)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("INTERACT_Keypad_C", "UpdateMeshEmissiveStrength");

	Params::INTERACT_Keypad_C_UpdateMeshEmissiveStrength Parms{};

	Parms.Scale = Scale;

	UObject::ProcessEvent(Func, &Parms);
}


// Function INTERACT_Keypad.INTERACT_Keypad_C.UpdateKeyParameters
// (Private, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    ReceivedKeyEntry                                       (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)

void AINTERACT_Keypad_C::UpdateKeyParameters(bool ReceivedKeyEntry)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("INTERACT_Keypad_C", "UpdateKeyParameters");

	Params::INTERACT_Keypad_C_UpdateKeyParameters Parms{};

	Parms.ReceivedKeyEntry = ReceivedKeyEntry;

	UObject::ProcessEvent(Func, &Parms);
}


// Function INTERACT_Keypad.INTERACT_Keypad_C.SetErrorParameters
// (Private, BlueprintCallable, BlueprintEvent)
// Parameters:
// float                                   ErrorStrength                                          (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void AINTERACT_Keypad_C::SetErrorParameters(float ErrorStrength)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("INTERACT_Keypad_C", "SetErrorParameters");

	Params::INTERACT_Keypad_C_SetErrorParameters Parms{};

	Parms.ErrorStrength = ErrorStrength;

	UObject::ProcessEvent(Func, &Parms);
}


// Function INTERACT_Keypad.INTERACT_Keypad_C.SetAcceptParameters
// (Private, BlueprintCallable, BlueprintEvent)
// Parameters:
// float                                   AcceptStrength                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void AINTERACT_Keypad_C::SetAcceptParameters(float AcceptStrength)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("INTERACT_Keypad_C", "SetAcceptParameters");

	Params::INTERACT_Keypad_C_SetAcceptParameters Parms{};

	Parms.AcceptStrength = AcceptStrength;

	UObject::ProcessEvent(Func, &Parms);
}


// Function INTERACT_Keypad.INTERACT_Keypad_C.SetMeterParameter
// (Private, BlueprintCallable, BlueprintEvent)
// Parameters:
// float                                   Progress                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void AINTERACT_Keypad_C::SetMeterParameter(float Progress)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("INTERACT_Keypad_C", "SetMeterParameter");

	Params::INTERACT_Keypad_C_SetMeterParameter Parms{};

	Parms.Progress = Progress;

	UObject::ProcessEvent(Func, &Parms);
}


// Function INTERACT_Keypad.INTERACT_Keypad_C.ResetKeyParameters
// (Private, BlueprintCallable, BlueprintEvent)
// Parameters:
// int32                                   StartIndex                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void AINTERACT_Keypad_C::ResetKeyParameters(int32 StartIndex)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("INTERACT_Keypad_C", "ResetKeyParameters");

	Params::INTERACT_Keypad_C_ResetKeyParameters Parms{};

	Parms.StartIndex = StartIndex;

	UObject::ProcessEvent(Func, &Parms);
}


// Function INTERACT_Keypad.INTERACT_Keypad_C.UpdateMaterialStrength
// (Private, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// float                                   DeltaTime                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    Finished                                               (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void AINTERACT_Keypad_C::UpdateMaterialStrength(float DeltaTime, bool* Finished)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("INTERACT_Keypad_C", "UpdateMaterialStrength");

	Params::INTERACT_Keypad_C_UpdateMaterialStrength Parms{};

	Parms.DeltaTime = DeltaTime;

	UObject::ProcessEvent(Func, &Parms);

	if (Finished != nullptr)
		*Finished = Parms.Finished;
}


// Function INTERACT_Keypad.INTERACT_Keypad_C.EVENT_OnStoryQuestChanged
// (Private, BlueprintCallable, BlueprintEvent)
// Parameters:
// class FName                             Quest                                                  (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    State                                                  (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)

void AINTERACT_Keypad_C::EVENT_OnStoryQuestChanged(class FName Quest, bool State)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("INTERACT_Keypad_C", "EVENT_OnStoryQuestChanged");

	Params::INTERACT_Keypad_C_EVENT_OnStoryQuestChanged Parms{};

	Parms.Quest = Quest;
	Parms.State = State;

	UObject::ProcessEvent(Func, &Parms);
}


// Function INTERACT_Keypad.INTERACT_Keypad_C.OnLockedInteraction
// (Protected, HasDefaults, BlueprintCallable, BlueprintEvent)

void AINTERACT_Keypad_C::OnLockedInteraction()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("INTERACT_Keypad_C", "OnLockedInteraction");

	UObject::ProcessEvent(Func, nullptr);
}


// Function INTERACT_Keypad.INTERACT_Keypad_C.UpdateMaterialFromKeycodeString
// (Public, BlueprintCallable, BlueprintEvent)

void AINTERACT_Keypad_C::UpdateMaterialFromKeycodeString()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("INTERACT_Keypad_C", "UpdateMaterialFromKeycodeString");

	UObject::ProcessEvent(Func, nullptr);
}


// Function INTERACT_Keypad.INTERACT_Keypad_C.TryCompleteKeypadEntryTutorial
// (Public, BlueprintCallable, BlueprintEvent)

void AINTERACT_Keypad_C::TryCompleteKeypadEntryTutorial()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("INTERACT_Keypad_C", "TryCompleteKeypadEntryTutorial");

	UObject::ProcessEvent(Func, nullptr);
}


// Function INTERACT_Keypad.INTERACT_Keypad_C.EVENT_CreateSoundDetectionEvent
// (Private, HasDefaults, BlueprintCallable, BlueprintEvent)

void AINTERACT_Keypad_C::EVENT_CreateSoundDetectionEvent()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("INTERACT_Keypad_C", "EVENT_CreateSoundDetectionEvent");

	UObject::ProcessEvent(Func, nullptr);
}


// Function INTERACT_Keypad.INTERACT_Keypad_C.TryPressKeypadDigit
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// int32                                   Digit                                                  (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FSTRUCT_InteractResults          InteractResults                                        (Parm, OutParm, HasGetValueTypeHash)

void AINTERACT_Keypad_C::TryPressKeypadDigit(int32 Digit, struct FSTRUCT_InteractResults* InteractResults)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("INTERACT_Keypad_C", "TryPressKeypadDigit");

	Params::INTERACT_Keypad_C_TryPressKeypadDigit Parms{};

	Parms.Digit = Digit;

	UObject::ProcessEvent(Func, &Parms);

	if (InteractResults != nullptr)
		*InteractResults = std::move(Parms.InteractResults);
}


// Function INTERACT_Keypad.INTERACT_Keypad_C.TryPressKeypadClear
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    Result                                                 (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void AINTERACT_Keypad_C::TryPressKeypadClear(bool* Result)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("INTERACT_Keypad_C", "TryPressKeypadClear");

	Params::INTERACT_Keypad_C_TryPressKeypadClear Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (Result != nullptr)
		*Result = Parms.Result;
}


// Function INTERACT_Keypad.INTERACT_Keypad_C.TryPressKeypadEraseLast
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    Result                                                 (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void AINTERACT_Keypad_C::TryPressKeypadEraseLast(bool* Result)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("INTERACT_Keypad_C", "TryPressKeypadEraseLast");

	Params::INTERACT_Keypad_C_TryPressKeypadEraseLast Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (Result != nullptr)
		*Result = Parms.Result;
}


// Function INTERACT_Keypad.INTERACT_Keypad_C.GetBoxComponentFromKey
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// int32                                   Digit                                                  (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class UBoxComponent*                    BoxComponent                                           (Parm, OutParm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void AINTERACT_Keypad_C::GetBoxComponentFromKey(int32 Digit, class UBoxComponent** BoxComponent)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("INTERACT_Keypad_C", "GetBoxComponentFromKey");

	Params::INTERACT_Keypad_C_GetBoxComponentFromKey Parms{};

	Parms.Digit = Digit;

	UObject::ProcessEvent(Func, &Parms);

	if (BoxComponent != nullptr)
		*BoxComponent = Parms.BoxComponent;
}


// Function INTERACT_Keypad.INTERACT_Keypad_C.CanResumeChannelingInteraction
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// bool                                    Result                                                 (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void AINTERACT_Keypad_C::CanResumeChannelingInteraction(bool* Result)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("INTERACT_Keypad_C", "CanResumeChannelingInteraction");

	Params::INTERACT_Keypad_C_CanResumeChannelingInteraction Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (Result != nullptr)
		*Result = Parms.Result;
}


// Function INTERACT_Keypad.INTERACT_Keypad_C.GetFocusWorldTransform
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// struct FTransform                       Transform                                              (Parm, OutParm, IsPlainOldData, NoDestructor)

void AINTERACT_Keypad_C::GetFocusWorldTransform(struct FTransform* Transform)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("INTERACT_Keypad_C", "GetFocusWorldTransform");

	Params::INTERACT_Keypad_C_GetFocusWorldTransform Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (Transform != nullptr)
		*Transform = std::move(Parms.Transform);
}


// Function INTERACT_Keypad.INTERACT_Keypad_C.CycleFocusedPrimitiveComponent
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// class UPrimitiveComponent*              CursorPrimitive                                        (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    Vertical                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// bool                                    Previous                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)

void AINTERACT_Keypad_C::CycleFocusedPrimitiveComponent(class UPrimitiveComponent* CursorPrimitive, bool Vertical, bool Previous)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("INTERACT_Keypad_C", "CycleFocusedPrimitiveComponent");

	Params::INTERACT_Keypad_C_CycleFocusedPrimitiveComponent Parms{};

	Parms.CursorPrimitive = CursorPrimitive;
	Parms.Vertical = Vertical;
	Parms.Previous = Previous;

	UObject::ProcessEvent(Func, &Parms);
}


// Function INTERACT_Keypad.INTERACT_Keypad_C.UpdateNumberColor
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    Valid                                                  (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)

void AINTERACT_Keypad_C::UpdateNumberColor(bool Valid)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("INTERACT_Keypad_C", "UpdateNumberColor");

	Params::INTERACT_Keypad_C_UpdateNumberColor Parms{};

	Parms.Valid = Valid;

	UObject::ProcessEvent(Func, &Parms);
}


// Function INTERACT_Keypad.INTERACT_Keypad_C.UnlockAndTargetInteractables
// (Protected, HasDefaults, BlueprintCallable, BlueprintEvent)

void AINTERACT_Keypad_C::UnlockAndTargetInteractables()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("INTERACT_Keypad_C", "UnlockAndTargetInteractables");

	UObject::ProcessEvent(Func, nullptr);
}


// Function INTERACT_Keypad.INTERACT_Keypad_C.UpdateKeypadVisibility
// (Protected, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    VisibilityState                                        (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)

void AINTERACT_Keypad_C::UpdateKeypadVisibility(bool VisibilityState)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("INTERACT_Keypad_C", "UpdateKeypadVisibility");

	Params::INTERACT_Keypad_C_UpdateKeypadVisibility Parms{};

	Parms.VisibilityState = VisibilityState;

	UObject::ProcessEvent(Func, &Parms);
}


// Function INTERACT_Keypad.INTERACT_Keypad_C.CanInteractWithTargetInteractable
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    Result                                                 (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
// class FText                             FailMessage                                            (Parm, OutParm)

void AINTERACT_Keypad_C::CanInteractWithTargetInteractable(bool* Result, class FText* FailMessage)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("INTERACT_Keypad_C", "CanInteractWithTargetInteractable");

	Params::INTERACT_Keypad_C_CanInteractWithTargetInteractable Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (Result != nullptr)
		*Result = Parms.Result;

	if (FailMessage != nullptr)
		*FailMessage = std::move(Parms.FailMessage);
}


// Function INTERACT_Keypad.INTERACT_Keypad_C.ShouldFocusOnInteract
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// class AController*                      Controller                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    Result                                                 (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void AINTERACT_Keypad_C::ShouldFocusOnInteract(class AController* Controller, bool* Result)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("INTERACT_Keypad_C", "ShouldFocusOnInteract");

	Params::INTERACT_Keypad_C_ShouldFocusOnInteract Parms{};

	Parms.Controller = Controller;

	UObject::ProcessEvent(Func, &Parms);

	if (Result != nullptr)
		*Result = Parms.Result;
}


// Function INTERACT_Keypad.INTERACT_Keypad_C.EVENT_OnDisableAttribChanged
// (Private, BlueprintCallable, BlueprintEvent)
// Parameters:
// float                                   CurrValue                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// float                                   LastValue                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void AINTERACT_Keypad_C::EVENT_OnDisableAttribChanged(float CurrValue, float LastValue)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("INTERACT_Keypad_C", "EVENT_OnDisableAttribChanged");

	Params::INTERACT_Keypad_C_EVENT_OnDisableAttribChanged Parms{};

	Parms.CurrValue = CurrValue;
	Parms.LastValue = LastValue;

	UObject::ProcessEvent(Func, &Parms);
}


// Function INTERACT_Keypad.INTERACT_Keypad_C.GetTargetShape
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// class UPrimitiveComponent*              CursorPrimitive                                        (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class UShapeComponent*                  ShapeComponent                                         (Parm, OutParm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void AINTERACT_Keypad_C::GetTargetShape(class UPrimitiveComponent* CursorPrimitive, class UShapeComponent** ShapeComponent)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("INTERACT_Keypad_C", "GetTargetShape");

	Params::INTERACT_Keypad_C_GetTargetShape Parms{};

	Parms.CursorPrimitive = CursorPrimitive;

	UObject::ProcessEvent(Func, &Parms);

	if (ShapeComponent != nullptr)
		*ShapeComponent = Parms.ShapeComponent;
}


// Function INTERACT_Keypad.INTERACT_Keypad_C.CanModifyInteractPower
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    Result                                                 (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void AINTERACT_Keypad_C::CanModifyInteractPower(bool* Result)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("INTERACT_Keypad_C", "CanModifyInteractPower");

	Params::INTERACT_Keypad_C_CanModifyInteractPower Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (Result != nullptr)
		*Result = Parms.Result;
}


// Function INTERACT_Keypad.INTERACT_Keypad_C.SetInteractPowered
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    State                                                  (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// bool                                    Result                                                 (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void AINTERACT_Keypad_C::SetInteractPowered(bool State, bool* Result)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("INTERACT_Keypad_C", "SetInteractPowered");

	Params::INTERACT_Keypad_C_SetInteractPowered Parms{};

	Parms.State = State;

	UObject::ProcessEvent(Func, &Parms);

	if (Result != nullptr)
		*Result = Parms.Result;
}


// Function INTERACT_Keypad.INTERACT_Keypad_C.ShouldSaveActor
// (Event, Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// struct FStreamingSaveGameActorParams    Params_0                                               (Parm, OutParm)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor)

bool AINTERACT_Keypad_C::ShouldSaveActor(struct FStreamingSaveGameActorParams* Params_0)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("INTERACT_Keypad_C", "ShouldSaveActor");

	Params::INTERACT_Keypad_C_ShouldSaveActor Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (Params_0 != nullptr)
		*Params_0 = std::move(Parms.Params_0);

	return Parms.ReturnValue;
}


// Function INTERACT_Keypad.INTERACT_Keypad_C.TryInteract
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// class AActor*                           SourceActor                                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class UPrimitiveComponent*              CursorPrimitive                                        (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// ENUM_InteractionType                    InteractionType                                        (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FSTRUCT_InteractResults          InteractResults                                        (Parm, OutParm, HasGetValueTypeHash)

void AINTERACT_Keypad_C::TryInteract(class AActor* SourceActor, class UPrimitiveComponent* CursorPrimitive, ENUM_InteractionType InteractionType, struct FSTRUCT_InteractResults* InteractResults)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("INTERACT_Keypad_C", "TryInteract");

	Params::INTERACT_Keypad_C_TryInteract Parms{};

	Parms.SourceActor = SourceActor;
	Parms.CursorPrimitive = CursorPrimitive;
	Parms.InteractionType = InteractionType;

	UObject::ProcessEvent(Func, &Parms);

	if (InteractResults != nullptr)
		*InteractResults = std::move(Parms.InteractResults);
}

}

