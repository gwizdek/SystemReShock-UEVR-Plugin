#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_Loudspeaker

#include "Basic.hpp"

#include "CoreUObject_structs.hpp"


namespace SDK::Params
{

// Function BP_Loudspeaker.BP_Loudspeaker_C.EVENT_OnPublicAddressStateChanged
// 0x0080 (0x0080 - 0x0000)
struct BP_Loudspeaker_C_EVENT_OnPublicAddressStateChanged final
{
public:
	class USoundCue*                              SoundCue;                                          // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TSoftObjectPtr<class UTexture2D>              PortraitTexture;                                   // 0x0008(0x0028)(BlueprintVisible, BlueprintReadOnly, Parm, HasGetValueTypeHash)
	int32                                         RowCount;                                          // 0x0030(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         ColCount;                                          // 0x0034(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         FrameRate;                                         // 0x0038(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         ElapsedTime;                                       // 0x003C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UGI_SinglePlayer_C*                     GameInstance;                                      // 0x0040(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0048(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_49[0x3];                                       // 0x0049(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_GetMaxElement_ReturnValue;                // 0x004C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_GetPublicAddressElapsedTime_Result;       // 0x0050(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_NotEqual_ObjectObject_ReturnValue;        // 0x0054(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Not_PreBool_ReturnValue;                  // 0x0055(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_56[0x2];                                       // 0x0056(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                CallFunc_K2_GetActorLocation_ReturnValue;          // 0x0058(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_64[0x4];                                       // 0x0064(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UGameInstance*                          CallFunc_GetGameInstance_ReturnValue;              // 0x0068(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UGI_SinglePlayer_C*                     K2Node_DynamicCast_AsGI_Single_Player;             // 0x0070(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0078(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_CanPublicAddressReachLocation_Result;     // 0x0079(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_Loudspeaker_C_EVENT_OnPublicAddressStateChanged) == 0x000008, "Wrong alignment on BP_Loudspeaker_C_EVENT_OnPublicAddressStateChanged");
static_assert(sizeof(BP_Loudspeaker_C_EVENT_OnPublicAddressStateChanged) == 0x000080, "Wrong size on BP_Loudspeaker_C_EVENT_OnPublicAddressStateChanged");
static_assert(offsetof(BP_Loudspeaker_C_EVENT_OnPublicAddressStateChanged, SoundCue) == 0x000000, "Member 'BP_Loudspeaker_C_EVENT_OnPublicAddressStateChanged::SoundCue' has a wrong offset!");
static_assert(offsetof(BP_Loudspeaker_C_EVENT_OnPublicAddressStateChanged, PortraitTexture) == 0x000008, "Member 'BP_Loudspeaker_C_EVENT_OnPublicAddressStateChanged::PortraitTexture' has a wrong offset!");
static_assert(offsetof(BP_Loudspeaker_C_EVENT_OnPublicAddressStateChanged, RowCount) == 0x000030, "Member 'BP_Loudspeaker_C_EVENT_OnPublicAddressStateChanged::RowCount' has a wrong offset!");
static_assert(offsetof(BP_Loudspeaker_C_EVENT_OnPublicAddressStateChanged, ColCount) == 0x000034, "Member 'BP_Loudspeaker_C_EVENT_OnPublicAddressStateChanged::ColCount' has a wrong offset!");
static_assert(offsetof(BP_Loudspeaker_C_EVENT_OnPublicAddressStateChanged, FrameRate) == 0x000038, "Member 'BP_Loudspeaker_C_EVENT_OnPublicAddressStateChanged::FrameRate' has a wrong offset!");
static_assert(offsetof(BP_Loudspeaker_C_EVENT_OnPublicAddressStateChanged, ElapsedTime) == 0x00003C, "Member 'BP_Loudspeaker_C_EVENT_OnPublicAddressStateChanged::ElapsedTime' has a wrong offset!");
static_assert(offsetof(BP_Loudspeaker_C_EVENT_OnPublicAddressStateChanged, GameInstance) == 0x000040, "Member 'BP_Loudspeaker_C_EVENT_OnPublicAddressStateChanged::GameInstance' has a wrong offset!");
static_assert(offsetof(BP_Loudspeaker_C_EVENT_OnPublicAddressStateChanged, CallFunc_IsValid_ReturnValue) == 0x000048, "Member 'BP_Loudspeaker_C_EVENT_OnPublicAddressStateChanged::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Loudspeaker_C_EVENT_OnPublicAddressStateChanged, CallFunc_GetMaxElement_ReturnValue) == 0x00004C, "Member 'BP_Loudspeaker_C_EVENT_OnPublicAddressStateChanged::CallFunc_GetMaxElement_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Loudspeaker_C_EVENT_OnPublicAddressStateChanged, CallFunc_GetPublicAddressElapsedTime_Result) == 0x000050, "Member 'BP_Loudspeaker_C_EVENT_OnPublicAddressStateChanged::CallFunc_GetPublicAddressElapsedTime_Result' has a wrong offset!");
static_assert(offsetof(BP_Loudspeaker_C_EVENT_OnPublicAddressStateChanged, CallFunc_NotEqual_ObjectObject_ReturnValue) == 0x000054, "Member 'BP_Loudspeaker_C_EVENT_OnPublicAddressStateChanged::CallFunc_NotEqual_ObjectObject_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Loudspeaker_C_EVENT_OnPublicAddressStateChanged, CallFunc_Not_PreBool_ReturnValue) == 0x000055, "Member 'BP_Loudspeaker_C_EVENT_OnPublicAddressStateChanged::CallFunc_Not_PreBool_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Loudspeaker_C_EVENT_OnPublicAddressStateChanged, CallFunc_K2_GetActorLocation_ReturnValue) == 0x000058, "Member 'BP_Loudspeaker_C_EVENT_OnPublicAddressStateChanged::CallFunc_K2_GetActorLocation_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Loudspeaker_C_EVENT_OnPublicAddressStateChanged, CallFunc_GetGameInstance_ReturnValue) == 0x000068, "Member 'BP_Loudspeaker_C_EVENT_OnPublicAddressStateChanged::CallFunc_GetGameInstance_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Loudspeaker_C_EVENT_OnPublicAddressStateChanged, K2Node_DynamicCast_AsGI_Single_Player) == 0x000070, "Member 'BP_Loudspeaker_C_EVENT_OnPublicAddressStateChanged::K2Node_DynamicCast_AsGI_Single_Player' has a wrong offset!");
static_assert(offsetof(BP_Loudspeaker_C_EVENT_OnPublicAddressStateChanged, K2Node_DynamicCast_bSuccess) == 0x000078, "Member 'BP_Loudspeaker_C_EVENT_OnPublicAddressStateChanged::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(BP_Loudspeaker_C_EVENT_OnPublicAddressStateChanged, CallFunc_CanPublicAddressReachLocation_Result) == 0x000079, "Member 'BP_Loudspeaker_C_EVENT_OnPublicAddressStateChanged::CallFunc_CanPublicAddressReachLocation_Result' has a wrong offset!");

// Function BP_Loudspeaker.BP_Loudspeaker_C.UpdateAlarmSpeakerAudibility
// 0x0050 (0x0050 - 0x0000)
struct BP_Loudspeaker_C_UpdateAlarmSpeakerAudibility final
{
public:
	bool                                          AudibilityState;                                   // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UGI_SinglePlayer_C*                     GameInstance;                                      // 0x0008(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UGI_SinglePlayer_C*                     GameInstance_0;                                    // 0x0010(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TDelegate<void(class USoundCue* SoundCue, TSoftObjectPtr<class UTexture2D> PortraitTexture, int32 RowCount, int32 ColCount, int32 FrameRate)> K2Node_CreateDelegate_OutputDelegate;              // 0x0018(0x0010)(ZeroConstructor, NoDestructor)
	TDelegate<void(class USoundCue* SoundCue, TSoftObjectPtr<class UTexture2D> PortraitTexture, int32 RowCount, int32 ColCount, int32 FrameRate)> K2Node_CreateDelegate_OutputDelegate_1;            // 0x0028(0x0010)(ZeroConstructor, NoDestructor)
	class UGameInstance*                          CallFunc_GetGameInstance_ReturnValue;              // 0x0038(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UGI_SinglePlayer_C*                     K2Node_DynamicCast_AsGI_Single_Player;             // 0x0040(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0048(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_Loudspeaker_C_UpdateAlarmSpeakerAudibility) == 0x000008, "Wrong alignment on BP_Loudspeaker_C_UpdateAlarmSpeakerAudibility");
static_assert(sizeof(BP_Loudspeaker_C_UpdateAlarmSpeakerAudibility) == 0x000050, "Wrong size on BP_Loudspeaker_C_UpdateAlarmSpeakerAudibility");
static_assert(offsetof(BP_Loudspeaker_C_UpdateAlarmSpeakerAudibility, AudibilityState) == 0x000000, "Member 'BP_Loudspeaker_C_UpdateAlarmSpeakerAudibility::AudibilityState' has a wrong offset!");
static_assert(offsetof(BP_Loudspeaker_C_UpdateAlarmSpeakerAudibility, GameInstance) == 0x000008, "Member 'BP_Loudspeaker_C_UpdateAlarmSpeakerAudibility::GameInstance' has a wrong offset!");
static_assert(offsetof(BP_Loudspeaker_C_UpdateAlarmSpeakerAudibility, GameInstance_0) == 0x000010, "Member 'BP_Loudspeaker_C_UpdateAlarmSpeakerAudibility::GameInstance_0' has a wrong offset!");
static_assert(offsetof(BP_Loudspeaker_C_UpdateAlarmSpeakerAudibility, K2Node_CreateDelegate_OutputDelegate) == 0x000018, "Member 'BP_Loudspeaker_C_UpdateAlarmSpeakerAudibility::K2Node_CreateDelegate_OutputDelegate' has a wrong offset!");
static_assert(offsetof(BP_Loudspeaker_C_UpdateAlarmSpeakerAudibility, K2Node_CreateDelegate_OutputDelegate_1) == 0x000028, "Member 'BP_Loudspeaker_C_UpdateAlarmSpeakerAudibility::K2Node_CreateDelegate_OutputDelegate_1' has a wrong offset!");
static_assert(offsetof(BP_Loudspeaker_C_UpdateAlarmSpeakerAudibility, CallFunc_GetGameInstance_ReturnValue) == 0x000038, "Member 'BP_Loudspeaker_C_UpdateAlarmSpeakerAudibility::CallFunc_GetGameInstance_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Loudspeaker_C_UpdateAlarmSpeakerAudibility, K2Node_DynamicCast_AsGI_Single_Player) == 0x000040, "Member 'BP_Loudspeaker_C_UpdateAlarmSpeakerAudibility::K2Node_DynamicCast_AsGI_Single_Player' has a wrong offset!");
static_assert(offsetof(BP_Loudspeaker_C_UpdateAlarmSpeakerAudibility, K2Node_DynamicCast_bSuccess) == 0x000048, "Member 'BP_Loudspeaker_C_UpdateAlarmSpeakerAudibility::K2Node_DynamicCast_bSuccess' has a wrong offset!");

}

