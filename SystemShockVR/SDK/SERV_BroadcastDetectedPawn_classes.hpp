#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: SERV_BroadcastDetectedPawn

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "ENUM_GameDifficulty_structs.hpp"
#include "AIModule_classes.hpp"
#include "ENUM_EnemyType_structs.hpp"


namespace SDK
{

// BlueprintGeneratedClass SERV_BroadcastDetectedPawn.SERV_BroadcastDetectedPawn_C
// 0x0020 (0x00B8 - 0x0098)
class USERV_BroadcastDetectedPawn_C final : public UBTService_BlueprintBase
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x0098(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	float                                         SphereRadius;                                      // 0x00A0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_A4[0x4];                                       // 0x00A4(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class APAWN_Enemy_C*                          EnemyPawn;                                         // 0x00A8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UOBJ_EnemyTarget_C*                     Target;                                            // 0x00B0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

public:
	void ExecuteUbergraph_SERV_BroadcastDetectedPawn(int32 EntryPoint);
	void ReceiveTickAI(class AAIController* OwnerController, class APawn* ControlledPawn, float DeltaSeconds);
	void BroadcastToNearbyEnemies();

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"SERV_BroadcastDetectedPawn_C">();
	}
	static class USERV_BroadcastDetectedPawn_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<USERV_BroadcastDetectedPawn_C>();
	}
};
static_assert(alignof(USERV_BroadcastDetectedPawn_C) == 0x000008, "Wrong alignment on USERV_BroadcastDetectedPawn_C");
static_assert(sizeof(USERV_BroadcastDetectedPawn_C) == 0x0000B8, "Wrong size on USERV_BroadcastDetectedPawn_C");
static_assert(offsetof(USERV_BroadcastDetectedPawn_C, UberGraphFrame) == 0x000098, "Member 'USERV_BroadcastDetectedPawn_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(USERV_BroadcastDetectedPawn_C, SphereRadius) == 0x0000A0, "Member 'USERV_BroadcastDetectedPawn_C::SphereRadius' has a wrong offset!");
static_assert(offsetof(USERV_BroadcastDetectedPawn_C, EnemyPawn) == 0x0000A8, "Member 'USERV_BroadcastDetectedPawn_C::EnemyPawn' has a wrong offset!");
static_assert(offsetof(USERV_BroadcastDetectedPawn_C, Target) == 0x0000B0, "Member 'USERV_BroadcastDetectedPawn_C::Target' has a wrong offset!");

}

