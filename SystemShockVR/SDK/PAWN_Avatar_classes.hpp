#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: PAWN_Avatar

#include "Basic.hpp"

#include "ENUM_PrimarySecondary_structs.hpp"
#include "Engine_structs.hpp"
#include "AttributeSystem_structs.hpp"
#include "CoreUObject_structs.hpp"
#include "PAWN_SystemShockCharacter_classes.hpp"
#include "STRUCT_CameraEffectInstance_structs.hpp"
#include "UMG_structs.hpp"
#include "ENUM_GameDifficulty_structs.hpp"


namespace SDK
{

// BlueprintGeneratedClass PAWN_Avatar.PAWN_Avatar_C
// 0x0270 (0x08F0 - 0x0680)
class APAWN_Avatar_C final : public APAWN_SystemShockCharacter_C
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame_PAWN_Avatar_C;                      // 0x0680(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	class UCOMP_Inventory_C*                      COMP_AvatarInventory;                              // 0x0688(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UCOMP_VoxelCullableNavAgent_C*          COMP_VoxelCullableNavAgent;                        // 0x0690(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UAudioComponent*                        AUDIO_Bounce;                                      // 0x0698(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UNiagaraComponent*                      CyberspaceLocalEffects;                            // 0x06A0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UArrowComponent*                        Arrow1;                                            // 0x06A8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UCameraComponent*                       Camera;                                            // 0x06B0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	float                                         PP_Avatar_Intro_Timeline_blend_1D5DCD0542BE75A8DC22BCAC769F3CCE; // 0x06B8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ETimelineDirection                            PP_Avatar_Intro_Timeline__Direction_1D5DCD0542BE75A8DC22BCAC769F3CCE; // 0x06BC(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_6BD[0x3];                                      // 0x06BD(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class UTimelineComponent*                     PP_Avatar_Intro_Timeline;                          // 0x06C0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         RollRate;                                          // 0x06C8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         RollAcceleration;                                  // 0x06CC(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         MoveStrafeScale;                                   // 0x06D0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         GamepadFramePitch;                                 // 0x06D4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         GamepadFrameYaw;                                   // 0x06D8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         KeyboardFramePitch;                                // 0x06DC(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         KeyboardFrameYaw;                                  // 0x06E0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         FrameRoll;                                         // 0x06E4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                FrameRelativeInput;                                // 0x06E8(0x000C)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                PersistentRelativeInput;                           // 0x06F4(0x000C)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         MoveKeyDownCount;                                  // 0x0700(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         RollScaleTarget;                                   // 0x0704(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         RollScaleCurrent;                                  // 0x0708(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_70C[0x4];                                      // 0x070C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class ACYBR_DomainLink_C*                     CurrentDomainLink;                                 // 0x0710(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class ACYBR_DomainLink_C*                     PreviousDomainLink;                                // 0x0718(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UWIDGET_CyberspaceHUD_C*                CyberspaceUI;                                      // 0x0720(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UWeightedAverageVec2*                   CameraSmoothHistory;                               // 0x0728(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         EnterCyberspaceTimestamp;                          // 0x0730(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         BounceStartTimestamp;                              // 0x0734(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         BounceDuration;                                    // 0x0738(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          IsSecurityTimerActive;                             // 0x073C(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          IsSecurityTimerPaused;                             // 0x073D(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_73E[0x2];                                      // 0x073E(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         SecurityTimeDuration;                              // 0x0740(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         SecurityTimeRemaining;                             // 0x0744(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FAttribModApplyData                    DamageOverflowMod;                                 // 0x0748(0x00A0)(Edit, BlueprintVisible, DisableEditOnInstance)
	bool                                          DomainLinkForward;                                 // 0x07E8(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_7E9[0x3];                                      // 0x07E9(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         ForwardTargetPointDistance;                        // 0x07EC(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UMaterialInstanceDynamic*               PP_Avatar_Intro;                                   // 0x07F0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CameraRoll_Turn_Max;                               // 0x07F8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CameraRoll_Strafe_Max;                             // 0x07FC(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CameraPitch_Move_Max;                              // 0x0800(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         FOV_DomainLink;                                    // 0x0804(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         FOV_WarpIn;                                        // 0x0808(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          AutoLevel;                                         // 0x080C(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_80D[0x3];                                      // 0x080D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         AutoLevelThreshold;                                // 0x0810(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          DEBUG_DrawAutoLevelArrow;                          // 0x0814(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_815[0x3];                                      // 0x0815(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         MaxRollAdjustmentRate;                             // 0x0818(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         ForwardDeviationDomainStrength;                    // 0x081C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CurrentLinkAcceleration;                           // 0x0820(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CurrentLinkDistance;                               // 0x0824(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CurrentLinkSpeed;                                  // 0x0828(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CachedDefaultMaxFlySpeed;                          // 0x082C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CachedCurrentMaxFlySpeed;                          // 0x0830(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CachedDefaultAcceleration;                         // 0x0834(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          WaitingToDie;                                      // 0x0838(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_839[0x7];                                      // 0x0839(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TMap<int32, struct FSTRUCT_CameraEffectInstance> DamageIndicatorInstances;                          // 0x0840(0x0050)(Edit, BlueprintVisible, DisableEditOnInstance)
	TArray<struct FSTRUCT_CameraEffectInstance>   BloodEffectInstances;                              // 0x0890(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance)
	float                                         Blood_Maintain_Duration;                           // 0x08A0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         DamageIndicator_Maintain_Duration_Min;             // 0x08A4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         DamageIndicator_Maintain_Duration_Max;             // 0x08A8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         DamageIndicator_RampUp_Duration;                   // 0x08AC(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         DamageIndicator_RampDown_Duration;                 // 0x08B0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          IsMenuOpen;                                        // 0x08B4(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_8B5[0x3];                                      // 0x08B5(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         TotalSecurityTimeToAdd;                            // 0x08B8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         LastTimeXtendPickupTimestamp;                      // 0x08BC(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         TimeXtendPoolHoldTime;                             // 0x08C0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         TimeXtendHoldTimeRemaining;                        // 0x08C4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         SecurityTimeAddRate;                               // 0x08C8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         SecurityTimeAddCurrent;                            // 0x08CC(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          IsHoldingUp;                                       // 0x08D0(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          IsHoldingDown;                                     // 0x08D1(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          IsHoldingRight;                                    // 0x08D2(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          IsHoldingLeft;                                     // 0x08D3(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          IsHoldingAccept;                                   // 0x08D4(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          IsHoldingBack;                                     // 0x08D5(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          IsHoldingAlt1;                                     // 0x08D6(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          IsHoldingAlt2;                                     // 0x08D7(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          IsHoldingTabLeft;                                  // 0x08D8(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          IsHoldingTabRight;                                 // 0x08D9(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_8DA[0x6];                                      // 0x08DA(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	FMulticastInlineDelegateProperty_             OnNewSecurityTimerSet;                             // 0x08E0(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)

public:
	void OnNewSecurityTimerSet__DelegateSignature();
	void ExecuteUbergraph_PAWN_Avatar(int32 EntryPoint);
	void ReceiveUnpossessed(class AController* OldController);
	void ReceivePossessed(class AController* NewController);
	void ReceiveBeginPlay();
	void ReceiveTick(float DeltaSeconds);
	void InpAxisEvt_MenuNavAxis_Y_K2Node_InputAxisEvent_17(float AxisValue);
	void InpAxisEvt_MenuNavAxis_X_K2Node_InputAxisEvent_16(float AxisValue);
	void InpAxisEvt_Locked_LookPitch_K2Node_InputAxisEvent_16(float AxisValue);
	void InpAxisEvt_Locked_LookYaw_K2Node_InputAxisEvent_15(float AxisValue);
	void InpAxisEvt_Gamepad_Cyber_MoveAxisX_K2Node_InputAxisEvent_14(float AxisValue);
	void InpAxisEvt_Gamepad_Cyber_MoveAxisY_K2Node_InputAxisEvent_13(float AxisValue);
	void InpAxisEvt_Gamepad_LookPitch_K2Node_InputAxisEvent_12(float AxisValue);
	void InpAxisEvt_Gamepad_LookYaw_K2Node_InputAxisEvent_11(float AxisValue);
	void Cyberspace_Intro_Post_Process();
	void BndEvt__COMP_VoxelCullableNavAgent_K2Node_ComponentBoundEvent_0_CullableVisibilitySignature__DelegateSignature(bool bVisibleState);
	void BndEvt__CapsuleComponent_K2Node_ComponentBoundEvent_0_ComponentHitSignature__DelegateSignature(class UPrimitiveComponent* HitComponent, class AActor* OtherActor, class UPrimitiveComponent* OtherComp, const struct FVector& NormalImpulse, const struct FHitResult& Hit);
	void InpActEvt_MenuNav_Down_K2Node_InputActionEvent_0(const struct FKey& Key);
	void InpActEvt_MenuNav_Down_K2Node_InputActionEvent_1(const struct FKey& Key);
	void InpActEvt_MenuNav_Up_K2Node_InputActionEvent_2(const struct FKey& Key);
	void InpActEvt_MenuNav_Up_K2Node_InputActionEvent_3(const struct FKey& Key);
	void InpActEvt_MenuNav_Right_K2Node_InputActionEvent_4(const struct FKey& Key);
	void InpActEvt_MenuNav_Right_K2Node_InputActionEvent_5(const struct FKey& Key);
	void InpActEvt_MenuNav_Left_K2Node_InputActionEvent_6(const struct FKey& Key);
	void InpActEvt_MenuNav_Left_K2Node_InputActionEvent_7(const struct FKey& Key);
	void InpActEvt_Cyber_MoveBackward_K2Node_InputActionEvent_8(const struct FKey& Key);
	void InpActEvt_Cyber_MoveBackward_K2Node_InputActionEvent_9(const struct FKey& Key);
	void InpActEvt_Cyber_MoveLeft_K2Node_InputActionEvent_10(const struct FKey& Key);
	void InpActEvt_Cyber_MoveLeft_K2Node_InputActionEvent_11(const struct FKey& Key);
	void InpActEvt_MenuNav_Alt1_K2Node_InputActionEvent_12(const struct FKey& Key);
	void InpActEvt_MenuNav_Alt1_K2Node_InputActionEvent_13(const struct FKey& Key);
	void InpActEvt_MenuNav_Alt2_K2Node_InputActionEvent_14(const struct FKey& Key);
	void InpActEvt_MenuNav_Alt2_K2Node_InputActionEvent_15(const struct FKey& Key);
	void InpActEvt_PageUp_K2Node_InputKeyEvent_0(const struct FKey& Key);
	void InpActEvt_Gamepad_MenuNav_Back_K2Node_InputActionEvent_16(const struct FKey& Key);
	void InpActEvt_Gamepad_MenuNav_Back_K2Node_InputActionEvent_17(const struct FKey& Key);
	void InpActEvt_Gamepad_MenuNav_Accept_K2Node_InputActionEvent_18(const struct FKey& Key);
	void InpActEvt_Gamepad_MenuNav_Accept_K2Node_InputActionEvent_19(const struct FKey& Key);
	void InpActEvt_Gamepad_Cyber_Power_K2Node_InputActionEvent_20(const struct FKey& Key);
	void InpActEvt_Gamepad_Cyber_Power_K2Node_InputActionEvent_21(const struct FKey& Key);
	void InpActEvt_Cyber_Power_K2Node_InputActionEvent_22(const struct FKey& Key);
	void InpActEvt_Cyber_Power_K2Node_InputActionEvent_23(const struct FKey& Key);
	void InpActEvt_Gamepad_Cyber_Shield_K2Node_InputActionEvent_24(const struct FKey& Key);
	void InpActEvt_Gamepad_Cyber_Shield_K2Node_InputActionEvent_25(const struct FKey& Key);
	void InpActEvt_Cyber_Shield_K2Node_InputActionEvent_26(const struct FKey& Key);
	void InpActEvt_Cyber_Shield_K2Node_InputActionEvent_27(const struct FKey& Key);
	void InpActEvt_Gamepad_MenuNav_Alt2_K2Node_InputActionEvent_28(const struct FKey& Key);
	void InpActEvt_Gamepad_MenuNav_Alt2_K2Node_InputActionEvent_29(const struct FKey& Key);
	void InpActEvt_Gamepad_MenuNav_Alt1_K2Node_InputActionEvent_30(const struct FKey& Key);
	void InpActEvt_Gamepad_MenuNav_Alt1_K2Node_InputActionEvent_31(const struct FKey& Key);
	void InpActEvt_Gamepad_MenuNav_TabLeft_K2Node_InputActionEvent_32(const struct FKey& Key);
	void InpActEvt_Gamepad_MenuNav_TabLeft_K2Node_InputActionEvent_33(const struct FKey& Key);
	void InpActEvt_Gamepad_MenuNav_TabRight_K2Node_InputActionEvent_34(const struct FKey& Key);
	void InpActEvt_Gamepad_MenuNav_TabRight_K2Node_InputActionEvent_35(const struct FKey& Key);
	void InpActEvt_MenuNav_Back_K2Node_InputActionEvent_36(const struct FKey& Key);
	void InpActEvt_MenuNav_Back_K2Node_InputActionEvent_37(const struct FKey& Key);
	void InpActEvt_MenuNav_Accept_K2Node_InputActionEvent_38(const struct FKey& Key);
	void InpActEvt_MenuNav_Accept_K2Node_InputActionEvent_39(const struct FKey& Key);
	void InpActEvt_Gamepad_Cyber_Decoy_K2Node_InputActionEvent_40(const struct FKey& Key);
	void InpActEvt_Gamepad_Cyber_Decoy_K2Node_InputActionEvent_41(const struct FKey& Key);
	void InpActEvt_Cyber_Decoy_K2Node_InputActionEvent_42(const struct FKey& Key);
	void InpActEvt_Cyber_Decoy_K2Node_InputActionEvent_43(const struct FKey& Key);
	void InpActEvt_Gamepad_Cyber_Recall_K2Node_InputActionEvent_44(const struct FKey& Key);
	void InpActEvt_Gamepad_Cyber_Recall_K2Node_InputActionEvent_45(const struct FKey& Key);
	void InpActEvt_Cyber_Recall_K2Node_InputActionEvent_46(const struct FKey& Key);
	void InpActEvt_Cyber_Recall_K2Node_InputActionEvent_47(const struct FKey& Key);
	void InpActEvt_Cyber_MoveRight_K2Node_InputActionEvent_48(const struct FKey& Key);
	void InpActEvt_Cyber_MoveRight_K2Node_InputActionEvent_49(const struct FKey& Key);
	void InpActEvt_Cyber_MoveForward_K2Node_InputActionEvent_50(const struct FKey& Key);
	void InpActEvt_Cyber_MoveForward_K2Node_InputActionEvent_51(const struct FKey& Key);
	void InpActEvt_Gamepad_Escape_K2Node_InputActionEvent_52(const struct FKey& Key);
	void InpActEvt_Locked_Escape_K2Node_InputActionEvent_53(const struct FKey& Key);
	void InpActEvt_Gamepad_Cyber_Ascend_K2Node_InputActionEvent_54(const struct FKey& Key);
	void InpActEvt_Gamepad_Cyber_Ascend_K2Node_InputActionEvent_55(const struct FKey& Key);
	void InpActEvt_Gamepad_Cyber_PrimaryAttack_K2Node_InputActionEvent_56(const struct FKey& Key);
	void InpActEvt_Gamepad_Cyber_PrimaryAttack_K2Node_InputActionEvent_57(const struct FKey& Key);
	void InpActEvt_Gamepad_Cyber_SecondaryAttack_K2Node_InputActionEvent_58(const struct FKey& Key);
	void InpActEvt_Gamepad_Cyber_SecondaryAttack_K2Node_InputActionEvent_59(const struct FKey& Key);
	void InpActEvt_Gamepad_Cyber_TurboDash_K2Node_InputActionEvent_60(const struct FKey& Key);
	void InpActEvt_Gamepad_Cyber_TurboDash_K2Node_InputActionEvent_61(const struct FKey& Key);
	void InpActEvt_Gamepad_Cyber_RollLeft_K2Node_InputActionEvent_62(const struct FKey& Key);
	void InpActEvt_Gamepad_Cyber_RollLeft_K2Node_InputActionEvent_63(const struct FKey& Key);
	void InpActEvt_Gamepad_Cyber_RollRight_K2Node_InputActionEvent_64(const struct FKey& Key);
	void InpActEvt_Gamepad_Cyber_RollRight_K2Node_InputActionEvent_65(const struct FKey& Key);
	void InpActEvt_Gamepad_Cyber_Descend_K2Node_InputActionEvent_66(const struct FKey& Key);
	void InpActEvt_Gamepad_Cyber_Descend_K2Node_InputActionEvent_67(const struct FKey& Key);
	void InpActEvt_Cyber_Descend_K2Node_InputActionEvent_68(const struct FKey& Key);
	void InpActEvt_Cyber_Descend_K2Node_InputActionEvent_69(const struct FKey& Key);
	void InpActEvt_Cyber_RollRight_K2Node_InputActionEvent_70(const struct FKey& Key);
	void InpActEvt_Cyber_RollRight_K2Node_InputActionEvent_71(const struct FKey& Key);
	void InpActEvt_Cyber_RollLeft_K2Node_InputActionEvent_72(const struct FKey& Key);
	void InpActEvt_Cyber_RollLeft_K2Node_InputActionEvent_73(const struct FKey& Key);
	void InpActEvt_Cyber_TurboDash_K2Node_InputActionEvent_74(const struct FKey& Key);
	void InpActEvt_Cyber_TurboDash_K2Node_InputActionEvent_75(const struct FKey& Key);
	void InpActEvt_Cyber_PrimaryAttack_K2Node_InputActionEvent_76(const struct FKey& Key);
	void InpActEvt_Cyber_PrimaryAttack_K2Node_InputActionEvent_77(const struct FKey& Key);
	void InpActEvt_Cyber_SecondaryAttack_K2Node_InputActionEvent_78(const struct FKey& Key);
	void InpActEvt_Cyber_SecondaryAttack_K2Node_InputActionEvent_79(const struct FKey& Key);
	void InpActEvt_Cyber_Ascend_K2Node_InputActionEvent_80(const struct FKey& Key);
	void InpActEvt_Cyber_Ascend_K2Node_InputActionEvent_81(const struct FKey& Key);
	void InpActEvt_Z_K2Node_InputKeyEvent_1(const struct FKey& Key);
	void PP_Avatar_Intro_Timeline__UpdateFunc();
	void PP_Avatar_Intro_Timeline__FinishedFunc();
	void UpdateAvatar(float DeltaTime);
	void UpdateMovement(float DeltaTime);
	void GetWeaponByType(ENUM_PrimarySecondary Type, class UITEM_Base_C** Weapon);
	void ActivateWeapon(ENUM_PrimarySecondary WeaponType);
	void UpdateCameraShake();
	void DeactivateWeapon(ENUM_PrimarySecondary WeaponType);
	void UpdateCameraPOV();
	void OnCharacterHurt(class AActor* OtherActor, const struct FAttribDamageInstance& DamageInstance, class UOBJ_ImpactData_C* ImpactData, bool* Result);
	void UpdateRotation(float DeltaTime);
	void HasCurrentDomainLink(bool* Result);
	void IsCurrentDomainLink(class ACYBR_DomainLink_C* DomainLink, bool* Result);
	void SetDomainLink(class ACYBR_DomainLink_C* DomainLink, bool IsForward);
	void UpdateCameraRotation(float DeltaTime);
	void GetAvatarVelocity(bool LastTick, struct FVector* Velocity);
	void ApplyBounceImpulse(const struct FHitResult& HitResult);
	void ApplyBounceDamage(float Speed);
	void ShouldBounce(class AActor* OtherActor, class UPrimitiveComponent* OtherComponent, bool* Result);
	void UpdateDashPower(float DeltaTime);
	void GetDashItem(class UITEM_CyberDash_C** DashItem);
	void GetInventoryComponent(class UCOMP_Inventory_C** Inventory);
	void OnCharacterDied(class UOBJ_ImpactData_C* ImpactData, const struct FAttribDamageInstance& DamageInstance, class AActor* OtherActor, bool* Result);
	void UpdateDamageEffects(float DeltaTime);
	void Add_Damage_Effects(float Damage, class UOBJ_ImpactData_C* ImpactData, class AActor* SourceActor);
	void GetDamageDirectionIndex(class UOBJ_ImpactData_C* ImpactData, class AActor* SourceActor, int32* Result);
	void GetRampUpRampDown(float StartTime, float CurrentTime, float MaintainDuration, float RampUpDuration, float RampDownDuration, float TargetValue, float* NewValue, bool* IsFinished);
	void ClearPersistentMoveValues();
	void HandleInputMoveAction(const struct FVector& Direction, bool IsDown);
	void HandleInputMoveAxisX(float Value);
	void HandleInputMoveAxisY(float Value);
	void HandleInputLookX(float Value);
	void HandleInputLookY(float Value);
	void SetNewSecurityTimer(float SecurityTime);
	void UpdateSecurityTimer();
	void AddTimeToTimer(float PickUpTimestamp, float TimeAddValue);
	void HandleGamepadInputLookX(float Value);
	void HandleGamepadInputLookY(float Value);
	void HandleRollLeft();
	void HandleRollRight();
	void HandleSoftware(class UClass* SoftwareClass, bool Activate);
	void Handle_Menu_Nav_Up(bool ButtonDown);
	void Handle_Menu_Nav_Down(bool ButtonDown);
	void Handle_Menu_Nav_Right(bool ButtonDown);
	void Handle_Menu_Nav_Left(bool ButtonDown);
	void HandleMenuNavTabLeft(bool ButtonDown);
	void HandleMenuNavTabRight(bool ButtonDown);
	void HandleMenuNavAlt1(bool ButtonDown);
	void HandleMenuNavAlt2(bool ButtonDown);
	void HandleMenuNavAccept(bool ButtonDown);
	void HandleMenuNavBack(bool ButtonDown);
	void HandleEscape();
	void InitializeCharacter(bool* Result);

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"PAWN_Avatar_C">();
	}
	static class APAWN_Avatar_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<APAWN_Avatar_C>();
	}
};
static_assert(alignof(APAWN_Avatar_C) == 0x000010, "Wrong alignment on APAWN_Avatar_C");
static_assert(sizeof(APAWN_Avatar_C) == 0x0008F0, "Wrong size on APAWN_Avatar_C");
static_assert(offsetof(APAWN_Avatar_C, UberGraphFrame_PAWN_Avatar_C) == 0x000680, "Member 'APAWN_Avatar_C::UberGraphFrame_PAWN_Avatar_C' has a wrong offset!");
static_assert(offsetof(APAWN_Avatar_C, COMP_AvatarInventory) == 0x000688, "Member 'APAWN_Avatar_C::COMP_AvatarInventory' has a wrong offset!");
static_assert(offsetof(APAWN_Avatar_C, COMP_VoxelCullableNavAgent) == 0x000690, "Member 'APAWN_Avatar_C::COMP_VoxelCullableNavAgent' has a wrong offset!");
static_assert(offsetof(APAWN_Avatar_C, AUDIO_Bounce) == 0x000698, "Member 'APAWN_Avatar_C::AUDIO_Bounce' has a wrong offset!");
static_assert(offsetof(APAWN_Avatar_C, CyberspaceLocalEffects) == 0x0006A0, "Member 'APAWN_Avatar_C::CyberspaceLocalEffects' has a wrong offset!");
static_assert(offsetof(APAWN_Avatar_C, Arrow1) == 0x0006A8, "Member 'APAWN_Avatar_C::Arrow1' has a wrong offset!");
static_assert(offsetof(APAWN_Avatar_C, Camera) == 0x0006B0, "Member 'APAWN_Avatar_C::Camera' has a wrong offset!");
static_assert(offsetof(APAWN_Avatar_C, PP_Avatar_Intro_Timeline_blend_1D5DCD0542BE75A8DC22BCAC769F3CCE) == 0x0006B8, "Member 'APAWN_Avatar_C::PP_Avatar_Intro_Timeline_blend_1D5DCD0542BE75A8DC22BCAC769F3CCE' has a wrong offset!");
static_assert(offsetof(APAWN_Avatar_C, PP_Avatar_Intro_Timeline__Direction_1D5DCD0542BE75A8DC22BCAC769F3CCE) == 0x0006BC, "Member 'APAWN_Avatar_C::PP_Avatar_Intro_Timeline__Direction_1D5DCD0542BE75A8DC22BCAC769F3CCE' has a wrong offset!");
static_assert(offsetof(APAWN_Avatar_C, PP_Avatar_Intro_Timeline) == 0x0006C0, "Member 'APAWN_Avatar_C::PP_Avatar_Intro_Timeline' has a wrong offset!");
static_assert(offsetof(APAWN_Avatar_C, RollRate) == 0x0006C8, "Member 'APAWN_Avatar_C::RollRate' has a wrong offset!");
static_assert(offsetof(APAWN_Avatar_C, RollAcceleration) == 0x0006CC, "Member 'APAWN_Avatar_C::RollAcceleration' has a wrong offset!");
static_assert(offsetof(APAWN_Avatar_C, MoveStrafeScale) == 0x0006D0, "Member 'APAWN_Avatar_C::MoveStrafeScale' has a wrong offset!");
static_assert(offsetof(APAWN_Avatar_C, GamepadFramePitch) == 0x0006D4, "Member 'APAWN_Avatar_C::GamepadFramePitch' has a wrong offset!");
static_assert(offsetof(APAWN_Avatar_C, GamepadFrameYaw) == 0x0006D8, "Member 'APAWN_Avatar_C::GamepadFrameYaw' has a wrong offset!");
static_assert(offsetof(APAWN_Avatar_C, KeyboardFramePitch) == 0x0006DC, "Member 'APAWN_Avatar_C::KeyboardFramePitch' has a wrong offset!");
static_assert(offsetof(APAWN_Avatar_C, KeyboardFrameYaw) == 0x0006E0, "Member 'APAWN_Avatar_C::KeyboardFrameYaw' has a wrong offset!");
static_assert(offsetof(APAWN_Avatar_C, FrameRoll) == 0x0006E4, "Member 'APAWN_Avatar_C::FrameRoll' has a wrong offset!");
static_assert(offsetof(APAWN_Avatar_C, FrameRelativeInput) == 0x0006E8, "Member 'APAWN_Avatar_C::FrameRelativeInput' has a wrong offset!");
static_assert(offsetof(APAWN_Avatar_C, PersistentRelativeInput) == 0x0006F4, "Member 'APAWN_Avatar_C::PersistentRelativeInput' has a wrong offset!");
static_assert(offsetof(APAWN_Avatar_C, MoveKeyDownCount) == 0x000700, "Member 'APAWN_Avatar_C::MoveKeyDownCount' has a wrong offset!");
static_assert(offsetof(APAWN_Avatar_C, RollScaleTarget) == 0x000704, "Member 'APAWN_Avatar_C::RollScaleTarget' has a wrong offset!");
static_assert(offsetof(APAWN_Avatar_C, RollScaleCurrent) == 0x000708, "Member 'APAWN_Avatar_C::RollScaleCurrent' has a wrong offset!");
static_assert(offsetof(APAWN_Avatar_C, CurrentDomainLink) == 0x000710, "Member 'APAWN_Avatar_C::CurrentDomainLink' has a wrong offset!");
static_assert(offsetof(APAWN_Avatar_C, PreviousDomainLink) == 0x000718, "Member 'APAWN_Avatar_C::PreviousDomainLink' has a wrong offset!");
static_assert(offsetof(APAWN_Avatar_C, CyberspaceUI) == 0x000720, "Member 'APAWN_Avatar_C::CyberspaceUI' has a wrong offset!");
static_assert(offsetof(APAWN_Avatar_C, CameraSmoothHistory) == 0x000728, "Member 'APAWN_Avatar_C::CameraSmoothHistory' has a wrong offset!");
static_assert(offsetof(APAWN_Avatar_C, EnterCyberspaceTimestamp) == 0x000730, "Member 'APAWN_Avatar_C::EnterCyberspaceTimestamp' has a wrong offset!");
static_assert(offsetof(APAWN_Avatar_C, BounceStartTimestamp) == 0x000734, "Member 'APAWN_Avatar_C::BounceStartTimestamp' has a wrong offset!");
static_assert(offsetof(APAWN_Avatar_C, BounceDuration) == 0x000738, "Member 'APAWN_Avatar_C::BounceDuration' has a wrong offset!");
static_assert(offsetof(APAWN_Avatar_C, IsSecurityTimerActive) == 0x00073C, "Member 'APAWN_Avatar_C::IsSecurityTimerActive' has a wrong offset!");
static_assert(offsetof(APAWN_Avatar_C, IsSecurityTimerPaused) == 0x00073D, "Member 'APAWN_Avatar_C::IsSecurityTimerPaused' has a wrong offset!");
static_assert(offsetof(APAWN_Avatar_C, SecurityTimeDuration) == 0x000740, "Member 'APAWN_Avatar_C::SecurityTimeDuration' has a wrong offset!");
static_assert(offsetof(APAWN_Avatar_C, SecurityTimeRemaining) == 0x000744, "Member 'APAWN_Avatar_C::SecurityTimeRemaining' has a wrong offset!");
static_assert(offsetof(APAWN_Avatar_C, DamageOverflowMod) == 0x000748, "Member 'APAWN_Avatar_C::DamageOverflowMod' has a wrong offset!");
static_assert(offsetof(APAWN_Avatar_C, DomainLinkForward) == 0x0007E8, "Member 'APAWN_Avatar_C::DomainLinkForward' has a wrong offset!");
static_assert(offsetof(APAWN_Avatar_C, ForwardTargetPointDistance) == 0x0007EC, "Member 'APAWN_Avatar_C::ForwardTargetPointDistance' has a wrong offset!");
static_assert(offsetof(APAWN_Avatar_C, PP_Avatar_Intro) == 0x0007F0, "Member 'APAWN_Avatar_C::PP_Avatar_Intro' has a wrong offset!");
static_assert(offsetof(APAWN_Avatar_C, CameraRoll_Turn_Max) == 0x0007F8, "Member 'APAWN_Avatar_C::CameraRoll_Turn_Max' has a wrong offset!");
static_assert(offsetof(APAWN_Avatar_C, CameraRoll_Strafe_Max) == 0x0007FC, "Member 'APAWN_Avatar_C::CameraRoll_Strafe_Max' has a wrong offset!");
static_assert(offsetof(APAWN_Avatar_C, CameraPitch_Move_Max) == 0x000800, "Member 'APAWN_Avatar_C::CameraPitch_Move_Max' has a wrong offset!");
static_assert(offsetof(APAWN_Avatar_C, FOV_DomainLink) == 0x000804, "Member 'APAWN_Avatar_C::FOV_DomainLink' has a wrong offset!");
static_assert(offsetof(APAWN_Avatar_C, FOV_WarpIn) == 0x000808, "Member 'APAWN_Avatar_C::FOV_WarpIn' has a wrong offset!");
static_assert(offsetof(APAWN_Avatar_C, AutoLevel) == 0x00080C, "Member 'APAWN_Avatar_C::AutoLevel' has a wrong offset!");
static_assert(offsetof(APAWN_Avatar_C, AutoLevelThreshold) == 0x000810, "Member 'APAWN_Avatar_C::AutoLevelThreshold' has a wrong offset!");
static_assert(offsetof(APAWN_Avatar_C, DEBUG_DrawAutoLevelArrow) == 0x000814, "Member 'APAWN_Avatar_C::DEBUG_DrawAutoLevelArrow' has a wrong offset!");
static_assert(offsetof(APAWN_Avatar_C, MaxRollAdjustmentRate) == 0x000818, "Member 'APAWN_Avatar_C::MaxRollAdjustmentRate' has a wrong offset!");
static_assert(offsetof(APAWN_Avatar_C, ForwardDeviationDomainStrength) == 0x00081C, "Member 'APAWN_Avatar_C::ForwardDeviationDomainStrength' has a wrong offset!");
static_assert(offsetof(APAWN_Avatar_C, CurrentLinkAcceleration) == 0x000820, "Member 'APAWN_Avatar_C::CurrentLinkAcceleration' has a wrong offset!");
static_assert(offsetof(APAWN_Avatar_C, CurrentLinkDistance) == 0x000824, "Member 'APAWN_Avatar_C::CurrentLinkDistance' has a wrong offset!");
static_assert(offsetof(APAWN_Avatar_C, CurrentLinkSpeed) == 0x000828, "Member 'APAWN_Avatar_C::CurrentLinkSpeed' has a wrong offset!");
static_assert(offsetof(APAWN_Avatar_C, CachedDefaultMaxFlySpeed) == 0x00082C, "Member 'APAWN_Avatar_C::CachedDefaultMaxFlySpeed' has a wrong offset!");
static_assert(offsetof(APAWN_Avatar_C, CachedCurrentMaxFlySpeed) == 0x000830, "Member 'APAWN_Avatar_C::CachedCurrentMaxFlySpeed' has a wrong offset!");
static_assert(offsetof(APAWN_Avatar_C, CachedDefaultAcceleration) == 0x000834, "Member 'APAWN_Avatar_C::CachedDefaultAcceleration' has a wrong offset!");
static_assert(offsetof(APAWN_Avatar_C, WaitingToDie) == 0x000838, "Member 'APAWN_Avatar_C::WaitingToDie' has a wrong offset!");
static_assert(offsetof(APAWN_Avatar_C, DamageIndicatorInstances) == 0x000840, "Member 'APAWN_Avatar_C::DamageIndicatorInstances' has a wrong offset!");
static_assert(offsetof(APAWN_Avatar_C, BloodEffectInstances) == 0x000890, "Member 'APAWN_Avatar_C::BloodEffectInstances' has a wrong offset!");
static_assert(offsetof(APAWN_Avatar_C, Blood_Maintain_Duration) == 0x0008A0, "Member 'APAWN_Avatar_C::Blood_Maintain_Duration' has a wrong offset!");
static_assert(offsetof(APAWN_Avatar_C, DamageIndicator_Maintain_Duration_Min) == 0x0008A4, "Member 'APAWN_Avatar_C::DamageIndicator_Maintain_Duration_Min' has a wrong offset!");
static_assert(offsetof(APAWN_Avatar_C, DamageIndicator_Maintain_Duration_Max) == 0x0008A8, "Member 'APAWN_Avatar_C::DamageIndicator_Maintain_Duration_Max' has a wrong offset!");
static_assert(offsetof(APAWN_Avatar_C, DamageIndicator_RampUp_Duration) == 0x0008AC, "Member 'APAWN_Avatar_C::DamageIndicator_RampUp_Duration' has a wrong offset!");
static_assert(offsetof(APAWN_Avatar_C, DamageIndicator_RampDown_Duration) == 0x0008B0, "Member 'APAWN_Avatar_C::DamageIndicator_RampDown_Duration' has a wrong offset!");
static_assert(offsetof(APAWN_Avatar_C, IsMenuOpen) == 0x0008B4, "Member 'APAWN_Avatar_C::IsMenuOpen' has a wrong offset!");
static_assert(offsetof(APAWN_Avatar_C, TotalSecurityTimeToAdd) == 0x0008B8, "Member 'APAWN_Avatar_C::TotalSecurityTimeToAdd' has a wrong offset!");
static_assert(offsetof(APAWN_Avatar_C, LastTimeXtendPickupTimestamp) == 0x0008BC, "Member 'APAWN_Avatar_C::LastTimeXtendPickupTimestamp' has a wrong offset!");
static_assert(offsetof(APAWN_Avatar_C, TimeXtendPoolHoldTime) == 0x0008C0, "Member 'APAWN_Avatar_C::TimeXtendPoolHoldTime' has a wrong offset!");
static_assert(offsetof(APAWN_Avatar_C, TimeXtendHoldTimeRemaining) == 0x0008C4, "Member 'APAWN_Avatar_C::TimeXtendHoldTimeRemaining' has a wrong offset!");
static_assert(offsetof(APAWN_Avatar_C, SecurityTimeAddRate) == 0x0008C8, "Member 'APAWN_Avatar_C::SecurityTimeAddRate' has a wrong offset!");
static_assert(offsetof(APAWN_Avatar_C, SecurityTimeAddCurrent) == 0x0008CC, "Member 'APAWN_Avatar_C::SecurityTimeAddCurrent' has a wrong offset!");
static_assert(offsetof(APAWN_Avatar_C, IsHoldingUp) == 0x0008D0, "Member 'APAWN_Avatar_C::IsHoldingUp' has a wrong offset!");
static_assert(offsetof(APAWN_Avatar_C, IsHoldingDown) == 0x0008D1, "Member 'APAWN_Avatar_C::IsHoldingDown' has a wrong offset!");
static_assert(offsetof(APAWN_Avatar_C, IsHoldingRight) == 0x0008D2, "Member 'APAWN_Avatar_C::IsHoldingRight' has a wrong offset!");
static_assert(offsetof(APAWN_Avatar_C, IsHoldingLeft) == 0x0008D3, "Member 'APAWN_Avatar_C::IsHoldingLeft' has a wrong offset!");
static_assert(offsetof(APAWN_Avatar_C, IsHoldingAccept) == 0x0008D4, "Member 'APAWN_Avatar_C::IsHoldingAccept' has a wrong offset!");
static_assert(offsetof(APAWN_Avatar_C, IsHoldingBack) == 0x0008D5, "Member 'APAWN_Avatar_C::IsHoldingBack' has a wrong offset!");
static_assert(offsetof(APAWN_Avatar_C, IsHoldingAlt1) == 0x0008D6, "Member 'APAWN_Avatar_C::IsHoldingAlt1' has a wrong offset!");
static_assert(offsetof(APAWN_Avatar_C, IsHoldingAlt2) == 0x0008D7, "Member 'APAWN_Avatar_C::IsHoldingAlt2' has a wrong offset!");
static_assert(offsetof(APAWN_Avatar_C, IsHoldingTabLeft) == 0x0008D8, "Member 'APAWN_Avatar_C::IsHoldingTabLeft' has a wrong offset!");
static_assert(offsetof(APAWN_Avatar_C, IsHoldingTabRight) == 0x0008D9, "Member 'APAWN_Avatar_C::IsHoldingTabRight' has a wrong offset!");
static_assert(offsetof(APAWN_Avatar_C, OnNewSecurityTimerSet) == 0x0008E0, "Member 'APAWN_Avatar_C::OnNewSecurityTimerSet' has a wrong offset!");

}

