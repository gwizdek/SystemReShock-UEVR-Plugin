#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: WIDGET_CrosshairCursor

#include "Basic.hpp"

#include "Slate_structs.hpp"
#include "SlateCore_structs.hpp"
#include "CoreUObject_structs.hpp"
#include "AttributeSystem_structs.hpp"
#include "ENUM_CursorMode_structs.hpp"


namespace SDK::Params
{

// Function WIDGET_CrosshairCursor.WIDGET_CrosshairCursor_C.ExecuteUbergraph_WIDGET_CrosshairCursor
// 0x0068 (0x0068 - 0x0000)
struct WIDGET_CrosshairCursor_C_ExecuteUbergraph_WIDGET_CrosshairCursor final
{
public:
	int32                                         EntryPoint;                                        // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UMaterialInstanceDynamic*               CallFunc_ConvertToDynamicMaterialInstance_ReturnValue; // 0x0008(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FGeometry                              K2Node_Event_MyGeometry;                           // 0x0010(0x0038)(IsPlainOldData, NoDestructor)
	float                                         K2Node_Event_InDeltaTime;                          // 0x0048(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x004C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_4D[0x3];                                       // 0x004D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class UCanvasPanelSlot*                       CallFunc_SlotAsCanvasSlot_ReturnValue;             // 0x0050(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector2D                              CallFunc_GetSize_ReturnValue;                      // 0x0058(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UMaterialInstanceDynamic*               CallFunc_ConvertToDynamicMaterialInstance_ReturnValue_1; // 0x0060(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(WIDGET_CrosshairCursor_C_ExecuteUbergraph_WIDGET_CrosshairCursor) == 0x000008, "Wrong alignment on WIDGET_CrosshairCursor_C_ExecuteUbergraph_WIDGET_CrosshairCursor");
static_assert(sizeof(WIDGET_CrosshairCursor_C_ExecuteUbergraph_WIDGET_CrosshairCursor) == 0x000068, "Wrong size on WIDGET_CrosshairCursor_C_ExecuteUbergraph_WIDGET_CrosshairCursor");
static_assert(offsetof(WIDGET_CrosshairCursor_C_ExecuteUbergraph_WIDGET_CrosshairCursor, EntryPoint) == 0x000000, "Member 'WIDGET_CrosshairCursor_C_ExecuteUbergraph_WIDGET_CrosshairCursor::EntryPoint' has a wrong offset!");
static_assert(offsetof(WIDGET_CrosshairCursor_C_ExecuteUbergraph_WIDGET_CrosshairCursor, CallFunc_ConvertToDynamicMaterialInstance_ReturnValue) == 0x000008, "Member 'WIDGET_CrosshairCursor_C_ExecuteUbergraph_WIDGET_CrosshairCursor::CallFunc_ConvertToDynamicMaterialInstance_ReturnValue' has a wrong offset!");
static_assert(offsetof(WIDGET_CrosshairCursor_C_ExecuteUbergraph_WIDGET_CrosshairCursor, K2Node_Event_MyGeometry) == 0x000010, "Member 'WIDGET_CrosshairCursor_C_ExecuteUbergraph_WIDGET_CrosshairCursor::K2Node_Event_MyGeometry' has a wrong offset!");
static_assert(offsetof(WIDGET_CrosshairCursor_C_ExecuteUbergraph_WIDGET_CrosshairCursor, K2Node_Event_InDeltaTime) == 0x000048, "Member 'WIDGET_CrosshairCursor_C_ExecuteUbergraph_WIDGET_CrosshairCursor::K2Node_Event_InDeltaTime' has a wrong offset!");
static_assert(offsetof(WIDGET_CrosshairCursor_C_ExecuteUbergraph_WIDGET_CrosshairCursor, CallFunc_IsValid_ReturnValue) == 0x00004C, "Member 'WIDGET_CrosshairCursor_C_ExecuteUbergraph_WIDGET_CrosshairCursor::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(WIDGET_CrosshairCursor_C_ExecuteUbergraph_WIDGET_CrosshairCursor, CallFunc_SlotAsCanvasSlot_ReturnValue) == 0x000050, "Member 'WIDGET_CrosshairCursor_C_ExecuteUbergraph_WIDGET_CrosshairCursor::CallFunc_SlotAsCanvasSlot_ReturnValue' has a wrong offset!");
static_assert(offsetof(WIDGET_CrosshairCursor_C_ExecuteUbergraph_WIDGET_CrosshairCursor, CallFunc_GetSize_ReturnValue) == 0x000058, "Member 'WIDGET_CrosshairCursor_C_ExecuteUbergraph_WIDGET_CrosshairCursor::CallFunc_GetSize_ReturnValue' has a wrong offset!");
static_assert(offsetof(WIDGET_CrosshairCursor_C_ExecuteUbergraph_WIDGET_CrosshairCursor, CallFunc_ConvertToDynamicMaterialInstance_ReturnValue_1) == 0x000060, "Member 'WIDGET_CrosshairCursor_C_ExecuteUbergraph_WIDGET_CrosshairCursor::CallFunc_ConvertToDynamicMaterialInstance_ReturnValue_1' has a wrong offset!");

// Function WIDGET_CrosshairCursor.WIDGET_CrosshairCursor_C.Tick
// 0x003C (0x003C - 0x0000)
struct WIDGET_CrosshairCursor_C_Tick final
{
public:
	struct FGeometry                              MyGeometry;                                        // 0x0000(0x0038)(BlueprintVisible, BlueprintReadOnly, Parm, IsPlainOldData, NoDestructor)
	float                                         InDeltaTime;                                       // 0x0038(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(WIDGET_CrosshairCursor_C_Tick) == 0x000004, "Wrong alignment on WIDGET_CrosshairCursor_C_Tick");
static_assert(sizeof(WIDGET_CrosshairCursor_C_Tick) == 0x00003C, "Wrong size on WIDGET_CrosshairCursor_C_Tick");
static_assert(offsetof(WIDGET_CrosshairCursor_C_Tick, MyGeometry) == 0x000000, "Member 'WIDGET_CrosshairCursor_C_Tick::MyGeometry' has a wrong offset!");
static_assert(offsetof(WIDGET_CrosshairCursor_C_Tick, InDeltaTime) == 0x000038, "Member 'WIDGET_CrosshairCursor_C_Tick::InDeltaTime' has a wrong offset!");

// Function WIDGET_CrosshairCursor.WIDGET_CrosshairCursor_C.InitializeCursor
// 0x0018 (0x0018 - 0x0000)
struct WIDGET_CrosshairCursor_C_InitializeCursor final
{
public:
	class UWIDGET_PlayerHUD_C*                    HUD;                                               // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TDelegate<void(class AActor* OtherActor, const struct FAttribDamageInstance& DamageInstance, class UObject* UserParams)> K2Node_CreateDelegate_OutputDelegate;              // 0x0008(0x0010)(ZeroConstructor, NoDestructor)
};
static_assert(alignof(WIDGET_CrosshairCursor_C_InitializeCursor) == 0x000008, "Wrong alignment on WIDGET_CrosshairCursor_C_InitializeCursor");
static_assert(sizeof(WIDGET_CrosshairCursor_C_InitializeCursor) == 0x000018, "Wrong size on WIDGET_CrosshairCursor_C_InitializeCursor");
static_assert(offsetof(WIDGET_CrosshairCursor_C_InitializeCursor, HUD) == 0x000000, "Member 'WIDGET_CrosshairCursor_C_InitializeCursor::HUD' has a wrong offset!");
static_assert(offsetof(WIDGET_CrosshairCursor_C_InitializeCursor, K2Node_CreateDelegate_OutputDelegate) == 0x000008, "Member 'WIDGET_CrosshairCursor_C_InitializeCursor::K2Node_CreateDelegate_OutputDelegate' has a wrong offset!");

// Function WIDGET_CrosshairCursor.WIDGET_CrosshairCursor_C.SetDefaultCursor
// 0x0028 (0x0028 - 0x0000)
struct WIDGET_CrosshairCursor_C_SetDefaultCursor final
{
public:
	struct FIntPoint                              CallFunc_Conv_Vector2DToIntPoint_ReturnValue;      // 0x0000(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UCanvasPanelSlot*                       CallFunc_SlotAsCanvasSlot_ReturnValue;             // 0x0008(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UMaterialInstanceDynamic*               CallFunc_ConvertToDynamicMaterialInstance_ReturnValue; // 0x0010(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UCanvasPanelSlot*                       CallFunc_SlotAsCanvasSlot_ReturnValue_1;           // 0x0018(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0020(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(WIDGET_CrosshairCursor_C_SetDefaultCursor) == 0x000008, "Wrong alignment on WIDGET_CrosshairCursor_C_SetDefaultCursor");
static_assert(sizeof(WIDGET_CrosshairCursor_C_SetDefaultCursor) == 0x000028, "Wrong size on WIDGET_CrosshairCursor_C_SetDefaultCursor");
static_assert(offsetof(WIDGET_CrosshairCursor_C_SetDefaultCursor, CallFunc_Conv_Vector2DToIntPoint_ReturnValue) == 0x000000, "Member 'WIDGET_CrosshairCursor_C_SetDefaultCursor::CallFunc_Conv_Vector2DToIntPoint_ReturnValue' has a wrong offset!");
static_assert(offsetof(WIDGET_CrosshairCursor_C_SetDefaultCursor, CallFunc_SlotAsCanvasSlot_ReturnValue) == 0x000008, "Member 'WIDGET_CrosshairCursor_C_SetDefaultCursor::CallFunc_SlotAsCanvasSlot_ReturnValue' has a wrong offset!");
static_assert(offsetof(WIDGET_CrosshairCursor_C_SetDefaultCursor, CallFunc_ConvertToDynamicMaterialInstance_ReturnValue) == 0x000010, "Member 'WIDGET_CrosshairCursor_C_SetDefaultCursor::CallFunc_ConvertToDynamicMaterialInstance_ReturnValue' has a wrong offset!");
static_assert(offsetof(WIDGET_CrosshairCursor_C_SetDefaultCursor, CallFunc_SlotAsCanvasSlot_ReturnValue_1) == 0x000018, "Member 'WIDGET_CrosshairCursor_C_SetDefaultCursor::CallFunc_SlotAsCanvasSlot_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(WIDGET_CrosshairCursor_C_SetDefaultCursor, CallFunc_IsValid_ReturnValue) == 0x000020, "Member 'WIDGET_CrosshairCursor_C_SetDefaultCursor::CallFunc_IsValid_ReturnValue' has a wrong offset!");

// Function WIDGET_CrosshairCursor.WIDGET_CrosshairCursor_C.SetItemCursor
// 0x0030 (0x0030 - 0x0000)
struct WIDGET_CrosshairCursor_C_SetItemCursor final
{
public:
	class UTexture*                               Texture;                                           // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector2D                              CursorSize;                                        // 0x0008(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          IsRotated;                                         // 0x0010(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0011(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_12[0x6];                                       // 0x0012(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class UCanvasPanelSlot*                       CallFunc_SlotAsCanvasSlot_ReturnValue;             // 0x0018(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Conv_BoolToFloat_ReturnValue;             // 0x0020(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FIntPoint                              CallFunc_Conv_Vector2DToIntPoint_ReturnValue;      // 0x0024(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(WIDGET_CrosshairCursor_C_SetItemCursor) == 0x000008, "Wrong alignment on WIDGET_CrosshairCursor_C_SetItemCursor");
static_assert(sizeof(WIDGET_CrosshairCursor_C_SetItemCursor) == 0x000030, "Wrong size on WIDGET_CrosshairCursor_C_SetItemCursor");
static_assert(offsetof(WIDGET_CrosshairCursor_C_SetItemCursor, Texture) == 0x000000, "Member 'WIDGET_CrosshairCursor_C_SetItemCursor::Texture' has a wrong offset!");
static_assert(offsetof(WIDGET_CrosshairCursor_C_SetItemCursor, CursorSize) == 0x000008, "Member 'WIDGET_CrosshairCursor_C_SetItemCursor::CursorSize' has a wrong offset!");
static_assert(offsetof(WIDGET_CrosshairCursor_C_SetItemCursor, IsRotated) == 0x000010, "Member 'WIDGET_CrosshairCursor_C_SetItemCursor::IsRotated' has a wrong offset!");
static_assert(offsetof(WIDGET_CrosshairCursor_C_SetItemCursor, CallFunc_IsValid_ReturnValue) == 0x000011, "Member 'WIDGET_CrosshairCursor_C_SetItemCursor::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(WIDGET_CrosshairCursor_C_SetItemCursor, CallFunc_SlotAsCanvasSlot_ReturnValue) == 0x000018, "Member 'WIDGET_CrosshairCursor_C_SetItemCursor::CallFunc_SlotAsCanvasSlot_ReturnValue' has a wrong offset!");
static_assert(offsetof(WIDGET_CrosshairCursor_C_SetItemCursor, CallFunc_Conv_BoolToFloat_ReturnValue) == 0x000020, "Member 'WIDGET_CrosshairCursor_C_SetItemCursor::CallFunc_Conv_BoolToFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(WIDGET_CrosshairCursor_C_SetItemCursor, CallFunc_Conv_Vector2DToIntPoint_ReturnValue) == 0x000024, "Member 'WIDGET_CrosshairCursor_C_SetItemCursor::CallFunc_Conv_Vector2DToIntPoint_ReturnValue' has a wrong offset!");

// Function WIDGET_CrosshairCursor.WIDGET_CrosshairCursor_C.CreateItemDynamicMaterial
// 0x0010 (0x0010 - 0x0000)
struct WIDGET_CrosshairCursor_C_CreateItemDynamicMaterial final
{
public:
	class UMaterialInstanceDynamic*               CallFunc_CreateDynamicMaterialInstance_ReturnValue; // 0x0000(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0008(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Not_PreBool_ReturnValue;                  // 0x0009(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(WIDGET_CrosshairCursor_C_CreateItemDynamicMaterial) == 0x000008, "Wrong alignment on WIDGET_CrosshairCursor_C_CreateItemDynamicMaterial");
static_assert(sizeof(WIDGET_CrosshairCursor_C_CreateItemDynamicMaterial) == 0x000010, "Wrong size on WIDGET_CrosshairCursor_C_CreateItemDynamicMaterial");
static_assert(offsetof(WIDGET_CrosshairCursor_C_CreateItemDynamicMaterial, CallFunc_CreateDynamicMaterialInstance_ReturnValue) == 0x000000, "Member 'WIDGET_CrosshairCursor_C_CreateItemDynamicMaterial::CallFunc_CreateDynamicMaterialInstance_ReturnValue' has a wrong offset!");
static_assert(offsetof(WIDGET_CrosshairCursor_C_CreateItemDynamicMaterial, CallFunc_IsValid_ReturnValue) == 0x000008, "Member 'WIDGET_CrosshairCursor_C_CreateItemDynamicMaterial::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(WIDGET_CrosshairCursor_C_CreateItemDynamicMaterial, CallFunc_Not_PreBool_ReturnValue) == 0x000009, "Member 'WIDGET_CrosshairCursor_C_CreateItemDynamicMaterial::CallFunc_Not_PreBool_ReturnValue' has a wrong offset!");

// Function WIDGET_CrosshairCursor.WIDGET_CrosshairCursor_C.SetCursorMode
// 0x0038 (0x0038 - 0x0000)
struct WIDGET_CrosshairCursor_C_SetCursorMode final
{
public:
	ENUM_CursorMode                               Mode;                                              // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_SwitchEnum_CmpSuccess;                      // 0x0001(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_2[0x6];                                        // 0x0002(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class UMaterialInstanceDynamic*               CallFunc_ConvertToDynamicMaterialInstance_ReturnValue; // 0x0008(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_ObjectObject_ReturnValue;      // 0x0010(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_11[0x3];                                       // 0x0011(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_Conv_BoolToFloat_ReturnValue;             // 0x0014(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UMaterialInstanceDynamic*               K2Node_DynamicCast_AsMaterial_Instance_Dynamic;    // 0x0018(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0020(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_21[0x7];                                       // 0x0021(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UUMGSequencePlayer*                     CallFunc_PlayAnimationReverse_ReturnValue;         // 0x0028(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UUMGSequencePlayer*                     CallFunc_PlayAnimationForward_ReturnValue;         // 0x0030(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(WIDGET_CrosshairCursor_C_SetCursorMode) == 0x000008, "Wrong alignment on WIDGET_CrosshairCursor_C_SetCursorMode");
static_assert(sizeof(WIDGET_CrosshairCursor_C_SetCursorMode) == 0x000038, "Wrong size on WIDGET_CrosshairCursor_C_SetCursorMode");
static_assert(offsetof(WIDGET_CrosshairCursor_C_SetCursorMode, Mode) == 0x000000, "Member 'WIDGET_CrosshairCursor_C_SetCursorMode::Mode' has a wrong offset!");
static_assert(offsetof(WIDGET_CrosshairCursor_C_SetCursorMode, K2Node_SwitchEnum_CmpSuccess) == 0x000001, "Member 'WIDGET_CrosshairCursor_C_SetCursorMode::K2Node_SwitchEnum_CmpSuccess' has a wrong offset!");
static_assert(offsetof(WIDGET_CrosshairCursor_C_SetCursorMode, CallFunc_ConvertToDynamicMaterialInstance_ReturnValue) == 0x000008, "Member 'WIDGET_CrosshairCursor_C_SetCursorMode::CallFunc_ConvertToDynamicMaterialInstance_ReturnValue' has a wrong offset!");
static_assert(offsetof(WIDGET_CrosshairCursor_C_SetCursorMode, CallFunc_EqualEqual_ObjectObject_ReturnValue) == 0x000010, "Member 'WIDGET_CrosshairCursor_C_SetCursorMode::CallFunc_EqualEqual_ObjectObject_ReturnValue' has a wrong offset!");
static_assert(offsetof(WIDGET_CrosshairCursor_C_SetCursorMode, CallFunc_Conv_BoolToFloat_ReturnValue) == 0x000014, "Member 'WIDGET_CrosshairCursor_C_SetCursorMode::CallFunc_Conv_BoolToFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(WIDGET_CrosshairCursor_C_SetCursorMode, K2Node_DynamicCast_AsMaterial_Instance_Dynamic) == 0x000018, "Member 'WIDGET_CrosshairCursor_C_SetCursorMode::K2Node_DynamicCast_AsMaterial_Instance_Dynamic' has a wrong offset!");
static_assert(offsetof(WIDGET_CrosshairCursor_C_SetCursorMode, K2Node_DynamicCast_bSuccess) == 0x000020, "Member 'WIDGET_CrosshairCursor_C_SetCursorMode::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(WIDGET_CrosshairCursor_C_SetCursorMode, CallFunc_PlayAnimationReverse_ReturnValue) == 0x000028, "Member 'WIDGET_CrosshairCursor_C_SetCursorMode::CallFunc_PlayAnimationReverse_ReturnValue' has a wrong offset!");
static_assert(offsetof(WIDGET_CrosshairCursor_C_SetCursorMode, CallFunc_PlayAnimationForward_ReturnValue) == 0x000030, "Member 'WIDGET_CrosshairCursor_C_SetCursorMode::CallFunc_PlayAnimationForward_ReturnValue' has a wrong offset!");

// Function WIDGET_CrosshairCursor.WIDGET_CrosshairCursor_C.SetHighlighted
// 0x0018 (0x0018 - 0x0000)
struct WIDGET_CrosshairCursor_C_SetHighlighted final
{
public:
	bool                                          bShouldHighlight;                                  // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UUMGSequencePlayer*                     CallFunc_PlayAnimationReverse_ReturnValue;         // 0x0008(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UUMGSequencePlayer*                     CallFunc_PlayAnimationForward_ReturnValue;         // 0x0010(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(WIDGET_CrosshairCursor_C_SetHighlighted) == 0x000008, "Wrong alignment on WIDGET_CrosshairCursor_C_SetHighlighted");
static_assert(sizeof(WIDGET_CrosshairCursor_C_SetHighlighted) == 0x000018, "Wrong size on WIDGET_CrosshairCursor_C_SetHighlighted");
static_assert(offsetof(WIDGET_CrosshairCursor_C_SetHighlighted, bShouldHighlight) == 0x000000, "Member 'WIDGET_CrosshairCursor_C_SetHighlighted::bShouldHighlight' has a wrong offset!");
static_assert(offsetof(WIDGET_CrosshairCursor_C_SetHighlighted, CallFunc_PlayAnimationReverse_ReturnValue) == 0x000008, "Member 'WIDGET_CrosshairCursor_C_SetHighlighted::CallFunc_PlayAnimationReverse_ReturnValue' has a wrong offset!");
static_assert(offsetof(WIDGET_CrosshairCursor_C_SetHighlighted, CallFunc_PlayAnimationForward_ReturnValue) == 0x000010, "Member 'WIDGET_CrosshairCursor_C_SetHighlighted::CallFunc_PlayAnimationForward_ReturnValue' has a wrong offset!");

// Function WIDGET_CrosshairCursor.WIDGET_CrosshairCursor_C.UpdateSelectionRegionParent
// 0x0060 (0x0060 - 0x0000)
struct WIDGET_CrosshairCursor_C_UpdateSelectionRegionParent final
{
public:
	class UGridMeshWidget*                        ParentGridMeshWidget;                              // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UCanvasPanelSlot*                       CallFunc_SlotAsCanvasSlot_ReturnValue;             // 0x0008(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UCanvasPanelSlot*                       CallFunc_SlotAsCanvasSlot_ReturnValue_1;           // 0x0010(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UCanvasPanelSlot*                       CallFunc_SlotAsCanvasSlot_ReturnValue_2;           // 0x0018(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UPanelWidget*                           CallFunc_GetParent_ReturnValue;                    // 0x0020(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UCanvasPanelSlot*                       CallFunc_SlotAsCanvasSlot_ReturnValue_3;           // 0x0028(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FAnchors                               CallFunc_GetAnchors_ReturnValue;                   // 0x0030(0x0010)(NoDestructor)
	class UPanelWidget*                           CallFunc_GetParent_ReturnValue_1;                  // 0x0040(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UPanelSlot*                             CallFunc_AddChild_ReturnValue;                     // 0x0048(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UPanelWidget*                           CallFunc_GetParent_ReturnValue_2;                  // 0x0050(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_NotEqual_ObjectObject_ReturnValue;        // 0x0058(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(WIDGET_CrosshairCursor_C_UpdateSelectionRegionParent) == 0x000008, "Wrong alignment on WIDGET_CrosshairCursor_C_UpdateSelectionRegionParent");
static_assert(sizeof(WIDGET_CrosshairCursor_C_UpdateSelectionRegionParent) == 0x000060, "Wrong size on WIDGET_CrosshairCursor_C_UpdateSelectionRegionParent");
static_assert(offsetof(WIDGET_CrosshairCursor_C_UpdateSelectionRegionParent, ParentGridMeshWidget) == 0x000000, "Member 'WIDGET_CrosshairCursor_C_UpdateSelectionRegionParent::ParentGridMeshWidget' has a wrong offset!");
static_assert(offsetof(WIDGET_CrosshairCursor_C_UpdateSelectionRegionParent, CallFunc_SlotAsCanvasSlot_ReturnValue) == 0x000008, "Member 'WIDGET_CrosshairCursor_C_UpdateSelectionRegionParent::CallFunc_SlotAsCanvasSlot_ReturnValue' has a wrong offset!");
static_assert(offsetof(WIDGET_CrosshairCursor_C_UpdateSelectionRegionParent, CallFunc_SlotAsCanvasSlot_ReturnValue_1) == 0x000010, "Member 'WIDGET_CrosshairCursor_C_UpdateSelectionRegionParent::CallFunc_SlotAsCanvasSlot_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(WIDGET_CrosshairCursor_C_UpdateSelectionRegionParent, CallFunc_SlotAsCanvasSlot_ReturnValue_2) == 0x000018, "Member 'WIDGET_CrosshairCursor_C_UpdateSelectionRegionParent::CallFunc_SlotAsCanvasSlot_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(WIDGET_CrosshairCursor_C_UpdateSelectionRegionParent, CallFunc_GetParent_ReturnValue) == 0x000020, "Member 'WIDGET_CrosshairCursor_C_UpdateSelectionRegionParent::CallFunc_GetParent_ReturnValue' has a wrong offset!");
static_assert(offsetof(WIDGET_CrosshairCursor_C_UpdateSelectionRegionParent, CallFunc_SlotAsCanvasSlot_ReturnValue_3) == 0x000028, "Member 'WIDGET_CrosshairCursor_C_UpdateSelectionRegionParent::CallFunc_SlotAsCanvasSlot_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(WIDGET_CrosshairCursor_C_UpdateSelectionRegionParent, CallFunc_GetAnchors_ReturnValue) == 0x000030, "Member 'WIDGET_CrosshairCursor_C_UpdateSelectionRegionParent::CallFunc_GetAnchors_ReturnValue' has a wrong offset!");
static_assert(offsetof(WIDGET_CrosshairCursor_C_UpdateSelectionRegionParent, CallFunc_GetParent_ReturnValue_1) == 0x000040, "Member 'WIDGET_CrosshairCursor_C_UpdateSelectionRegionParent::CallFunc_GetParent_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(WIDGET_CrosshairCursor_C_UpdateSelectionRegionParent, CallFunc_AddChild_ReturnValue) == 0x000048, "Member 'WIDGET_CrosshairCursor_C_UpdateSelectionRegionParent::CallFunc_AddChild_ReturnValue' has a wrong offset!");
static_assert(offsetof(WIDGET_CrosshairCursor_C_UpdateSelectionRegionParent, CallFunc_GetParent_ReturnValue_2) == 0x000050, "Member 'WIDGET_CrosshairCursor_C_UpdateSelectionRegionParent::CallFunc_GetParent_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(WIDGET_CrosshairCursor_C_UpdateSelectionRegionParent, CallFunc_NotEqual_ObjectObject_ReturnValue) == 0x000058, "Member 'WIDGET_CrosshairCursor_C_UpdateSelectionRegionParent::CallFunc_NotEqual_ObjectObject_ReturnValue' has a wrong offset!");

// Function WIDGET_CrosshairCursor.WIDGET_CrosshairCursor_C.UpdateBracketsParent
// 0x0028 (0x0028 - 0x0000)
struct WIDGET_CrosshairCursor_C_UpdateBracketsParent final
{
public:
	class UCanvasPanel*                           ParentPanel;                                       // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UCanvasPanelSlot*                       CallFunc_SlotAsCanvasSlot_ReturnValue;             // 0x0008(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UPanelWidget*                           CallFunc_GetParent_ReturnValue;                    // 0x0010(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UPanelSlot*                             CallFunc_AddChild_ReturnValue;                     // 0x0018(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_NotEqual_ObjectObject_ReturnValue;        // 0x0020(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(WIDGET_CrosshairCursor_C_UpdateBracketsParent) == 0x000008, "Wrong alignment on WIDGET_CrosshairCursor_C_UpdateBracketsParent");
static_assert(sizeof(WIDGET_CrosshairCursor_C_UpdateBracketsParent) == 0x000028, "Wrong size on WIDGET_CrosshairCursor_C_UpdateBracketsParent");
static_assert(offsetof(WIDGET_CrosshairCursor_C_UpdateBracketsParent, ParentPanel) == 0x000000, "Member 'WIDGET_CrosshairCursor_C_UpdateBracketsParent::ParentPanel' has a wrong offset!");
static_assert(offsetof(WIDGET_CrosshairCursor_C_UpdateBracketsParent, CallFunc_SlotAsCanvasSlot_ReturnValue) == 0x000008, "Member 'WIDGET_CrosshairCursor_C_UpdateBracketsParent::CallFunc_SlotAsCanvasSlot_ReturnValue' has a wrong offset!");
static_assert(offsetof(WIDGET_CrosshairCursor_C_UpdateBracketsParent, CallFunc_GetParent_ReturnValue) == 0x000010, "Member 'WIDGET_CrosshairCursor_C_UpdateBracketsParent::CallFunc_GetParent_ReturnValue' has a wrong offset!");
static_assert(offsetof(WIDGET_CrosshairCursor_C_UpdateBracketsParent, CallFunc_AddChild_ReturnValue) == 0x000018, "Member 'WIDGET_CrosshairCursor_C_UpdateBracketsParent::CallFunc_AddChild_ReturnValue' has a wrong offset!");
static_assert(offsetof(WIDGET_CrosshairCursor_C_UpdateBracketsParent, CallFunc_NotEqual_ObjectObject_ReturnValue) == 0x000020, "Member 'WIDGET_CrosshairCursor_C_UpdateBracketsParent::CallFunc_NotEqual_ObjectObject_ReturnValue' has a wrong offset!");

// Function WIDGET_CrosshairCursor.WIDGET_CrosshairCursor_C.UpdateBracketTransition
// 0x00B0 (0x00B0 - 0x0000)
struct WIDGET_CrosshairCursor_C_UpdateBracketTransition final
{
public:
	float                                         TransitionProgress;                                // 0x0000(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         ElapsedTransitionTime;                             // 0x0004(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ENUM_CursorMode                               Temp_byte_Variable;                                // 0x0008(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ENUM_CursorMode                               Temp_byte_Variable_1;                              // 0x0009(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_A[0x6];                                        // 0x000A(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class UCanvasPanelSlot*                       CallFunc_SlotAsCanvasSlot_ReturnValue;             // 0x0010(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UCanvasPanelSlot*                       CallFunc_SlotAsCanvasSlot_ReturnValue_1;           // 0x0018(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BooleanAND_ReturnValue;                   // 0x0020(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_21[0x7];                                       // 0x0021(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UCanvasPanelSlot*                       CallFunc_SlotAsCanvasSlot_ReturnValue_2;           // 0x0028(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UCanvasPanelSlot*                       CallFunc_SlotAsCanvasSlot_ReturnValue_3;           // 0x0030(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BooleanOR_ReturnValue;                    // 0x0038(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Temp_bool_Variable;                                // 0x0039(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_3A[0x2];                                       // 0x003A(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                CallFunc_Conv_Vector2DToVector_ReturnValue;        // 0x003C(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ENUM_CursorMode                               K2Node_Select_Default;                             // 0x0048(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_49[0x3];                                       // 0x0049(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                CallFunc_Conv_Vector2DToVector_ReturnValue_1;      // 0x004C(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_VEase_ReturnValue;                        // 0x0058(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_GreaterEqual_FloatFloat_ReturnValue;      // 0x0064(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_65[0x3];                                       // 0x0065(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector2D                              CallFunc_Conv_VectorToVector2D_ReturnValue;        // 0x0068(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Conv_Vector2DToVector_ReturnValue_2;      // 0x0070(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Conv_Vector2DToVector_ReturnValue_3;      // 0x007C(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_VEase_ReturnValue_1;                      // 0x0088(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector2D                              CallFunc_Conv_VectorToVector2D_ReturnValue_1;      // 0x0094(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Divide_FloatFloat_ReturnValue;            // 0x009C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_FMin_ReturnValue;                         // 0x00A0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_GetGameTimeInSeconds_ReturnValue;         // 0x00A4(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Subtract_FloatFloat_ReturnValue;          // 0x00A8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(WIDGET_CrosshairCursor_C_UpdateBracketTransition) == 0x000008, "Wrong alignment on WIDGET_CrosshairCursor_C_UpdateBracketTransition");
static_assert(sizeof(WIDGET_CrosshairCursor_C_UpdateBracketTransition) == 0x0000B0, "Wrong size on WIDGET_CrosshairCursor_C_UpdateBracketTransition");
static_assert(offsetof(WIDGET_CrosshairCursor_C_UpdateBracketTransition, TransitionProgress) == 0x000000, "Member 'WIDGET_CrosshairCursor_C_UpdateBracketTransition::TransitionProgress' has a wrong offset!");
static_assert(offsetof(WIDGET_CrosshairCursor_C_UpdateBracketTransition, ElapsedTransitionTime) == 0x000004, "Member 'WIDGET_CrosshairCursor_C_UpdateBracketTransition::ElapsedTransitionTime' has a wrong offset!");
static_assert(offsetof(WIDGET_CrosshairCursor_C_UpdateBracketTransition, Temp_byte_Variable) == 0x000008, "Member 'WIDGET_CrosshairCursor_C_UpdateBracketTransition::Temp_byte_Variable' has a wrong offset!");
static_assert(offsetof(WIDGET_CrosshairCursor_C_UpdateBracketTransition, Temp_byte_Variable_1) == 0x000009, "Member 'WIDGET_CrosshairCursor_C_UpdateBracketTransition::Temp_byte_Variable_1' has a wrong offset!");
static_assert(offsetof(WIDGET_CrosshairCursor_C_UpdateBracketTransition, CallFunc_SlotAsCanvasSlot_ReturnValue) == 0x000010, "Member 'WIDGET_CrosshairCursor_C_UpdateBracketTransition::CallFunc_SlotAsCanvasSlot_ReturnValue' has a wrong offset!");
static_assert(offsetof(WIDGET_CrosshairCursor_C_UpdateBracketTransition, CallFunc_SlotAsCanvasSlot_ReturnValue_1) == 0x000018, "Member 'WIDGET_CrosshairCursor_C_UpdateBracketTransition::CallFunc_SlotAsCanvasSlot_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(WIDGET_CrosshairCursor_C_UpdateBracketTransition, CallFunc_BooleanAND_ReturnValue) == 0x000020, "Member 'WIDGET_CrosshairCursor_C_UpdateBracketTransition::CallFunc_BooleanAND_ReturnValue' has a wrong offset!");
static_assert(offsetof(WIDGET_CrosshairCursor_C_UpdateBracketTransition, CallFunc_SlotAsCanvasSlot_ReturnValue_2) == 0x000028, "Member 'WIDGET_CrosshairCursor_C_UpdateBracketTransition::CallFunc_SlotAsCanvasSlot_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(WIDGET_CrosshairCursor_C_UpdateBracketTransition, CallFunc_SlotAsCanvasSlot_ReturnValue_3) == 0x000030, "Member 'WIDGET_CrosshairCursor_C_UpdateBracketTransition::CallFunc_SlotAsCanvasSlot_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(WIDGET_CrosshairCursor_C_UpdateBracketTransition, CallFunc_BooleanOR_ReturnValue) == 0x000038, "Member 'WIDGET_CrosshairCursor_C_UpdateBracketTransition::CallFunc_BooleanOR_ReturnValue' has a wrong offset!");
static_assert(offsetof(WIDGET_CrosshairCursor_C_UpdateBracketTransition, Temp_bool_Variable) == 0x000039, "Member 'WIDGET_CrosshairCursor_C_UpdateBracketTransition::Temp_bool_Variable' has a wrong offset!");
static_assert(offsetof(WIDGET_CrosshairCursor_C_UpdateBracketTransition, CallFunc_Conv_Vector2DToVector_ReturnValue) == 0x00003C, "Member 'WIDGET_CrosshairCursor_C_UpdateBracketTransition::CallFunc_Conv_Vector2DToVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(WIDGET_CrosshairCursor_C_UpdateBracketTransition, K2Node_Select_Default) == 0x000048, "Member 'WIDGET_CrosshairCursor_C_UpdateBracketTransition::K2Node_Select_Default' has a wrong offset!");
static_assert(offsetof(WIDGET_CrosshairCursor_C_UpdateBracketTransition, CallFunc_Conv_Vector2DToVector_ReturnValue_1) == 0x00004C, "Member 'WIDGET_CrosshairCursor_C_UpdateBracketTransition::CallFunc_Conv_Vector2DToVector_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(WIDGET_CrosshairCursor_C_UpdateBracketTransition, CallFunc_VEase_ReturnValue) == 0x000058, "Member 'WIDGET_CrosshairCursor_C_UpdateBracketTransition::CallFunc_VEase_ReturnValue' has a wrong offset!");
static_assert(offsetof(WIDGET_CrosshairCursor_C_UpdateBracketTransition, CallFunc_GreaterEqual_FloatFloat_ReturnValue) == 0x000064, "Member 'WIDGET_CrosshairCursor_C_UpdateBracketTransition::CallFunc_GreaterEqual_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(WIDGET_CrosshairCursor_C_UpdateBracketTransition, CallFunc_Conv_VectorToVector2D_ReturnValue) == 0x000068, "Member 'WIDGET_CrosshairCursor_C_UpdateBracketTransition::CallFunc_Conv_VectorToVector2D_ReturnValue' has a wrong offset!");
static_assert(offsetof(WIDGET_CrosshairCursor_C_UpdateBracketTransition, CallFunc_Conv_Vector2DToVector_ReturnValue_2) == 0x000070, "Member 'WIDGET_CrosshairCursor_C_UpdateBracketTransition::CallFunc_Conv_Vector2DToVector_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(WIDGET_CrosshairCursor_C_UpdateBracketTransition, CallFunc_Conv_Vector2DToVector_ReturnValue_3) == 0x00007C, "Member 'WIDGET_CrosshairCursor_C_UpdateBracketTransition::CallFunc_Conv_Vector2DToVector_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(WIDGET_CrosshairCursor_C_UpdateBracketTransition, CallFunc_VEase_ReturnValue_1) == 0x000088, "Member 'WIDGET_CrosshairCursor_C_UpdateBracketTransition::CallFunc_VEase_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(WIDGET_CrosshairCursor_C_UpdateBracketTransition, CallFunc_Conv_VectorToVector2D_ReturnValue_1) == 0x000094, "Member 'WIDGET_CrosshairCursor_C_UpdateBracketTransition::CallFunc_Conv_VectorToVector2D_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(WIDGET_CrosshairCursor_C_UpdateBracketTransition, CallFunc_Divide_FloatFloat_ReturnValue) == 0x00009C, "Member 'WIDGET_CrosshairCursor_C_UpdateBracketTransition::CallFunc_Divide_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(WIDGET_CrosshairCursor_C_UpdateBracketTransition, CallFunc_FMin_ReturnValue) == 0x0000A0, "Member 'WIDGET_CrosshairCursor_C_UpdateBracketTransition::CallFunc_FMin_ReturnValue' has a wrong offset!");
static_assert(offsetof(WIDGET_CrosshairCursor_C_UpdateBracketTransition, CallFunc_GetGameTimeInSeconds_ReturnValue) == 0x0000A4, "Member 'WIDGET_CrosshairCursor_C_UpdateBracketTransition::CallFunc_GetGameTimeInSeconds_ReturnValue' has a wrong offset!");
static_assert(offsetof(WIDGET_CrosshairCursor_C_UpdateBracketTransition, CallFunc_Subtract_FloatFloat_ReturnValue) == 0x0000A8, "Member 'WIDGET_CrosshairCursor_C_UpdateBracketTransition::CallFunc_Subtract_FloatFloat_ReturnValue' has a wrong offset!");

// Function WIDGET_CrosshairCursor.WIDGET_CrosshairCursor_C.UpdateCursorItemBrackets
// 0x00C8 (0x00C8 - 0x0000)
struct WIDGET_CrosshairCursor_C_UpdateCursorItemBrackets final
{
public:
	class UITEM_Base_C*                           Item;                                              // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UInventoryBag_C*                        Bag;                                               // 0x0008(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UGridMeshWidget*                        BagMeshWidget;                                     // 0x0010(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FIntPoint                              CursorItemGridCoords;                              // 0x0018(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          UpdatePosition;                                    // 0x0020(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_21[0x3];                                       // 0x0021(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CursorItemSlotIndex;                               // 0x0024(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_CanMoveItem_Result;                       // 0x0028(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Not_PreBool_ReturnValue;                  // 0x0029(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_2A[0x6];                                       // 0x002A(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class UMaterialInstanceDynamic*               CallFunc_ConvertToDynamicMaterialInstance_ReturnValue; // 0x0030(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Conv_BoolToFloat_ReturnValue;             // 0x0038(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_3C[0x4];                                       // 0x003C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UCanvasPanelSlot*                       CallFunc_SlotAsCanvasSlot_ReturnValue;             // 0x0040(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UCanvasPanelSlot*                       CallFunc_SlotAsCanvasSlot_ReturnValue_1;           // 0x0048(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UMaterialInstanceDynamic*               CallFunc_ConvertToDynamicMaterialInstance_ReturnValue_1; // 0x0050(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UCanvasPanelSlot*                       CallFunc_SlotAsCanvasSlot_ReturnValue_2;           // 0x0058(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector2D                              CallFunc_GetPosition_ReturnValue;                  // 0x0060(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector2D                              CallFunc_GetSelectionRegionWindowPosition_Result;  // 0x0068(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector2D                              CallFunc_GetItemWidgetPositionFromCoords_ResultPosition; // 0x0070(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UCanvasPanelSlot*                       CallFunc_SlotAsCanvasSlot_ReturnValue_3;           // 0x0078(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_GetSlotIndexFromGridCoordinates_SlotIndex; // 0x0080(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FIntPoint                              CallFunc_GetRotatedGridSize_Result;                // 0x0084(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_8C[0x4];                                       // 0x008C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UCanvasPanelSlot*                       CallFunc_SlotAsCanvasSlot_ReturnValue_4;           // 0x0090(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_GetDoubleBorderSize_ReturnValue;          // 0x0098(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector2D                              CallFunc_GetSize_ReturnValue;                      // 0x009C(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Conv_IntToFloat_ReturnValue;              // 0x00A4(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector2D                              CallFunc_MakeVector2D_ReturnValue;                 // 0x00A8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UCanvasPanelSlot*                       CallFunc_SlotAsCanvasSlot_ReturnValue_5;           // 0x00B0(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector2D                              CallFunc_GetWidgetSizeFromGridSize_ReturnValue;    // 0x00B8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector2D                              CallFunc_Subtract_Vector2DVector2D_ReturnValue;    // 0x00C0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(WIDGET_CrosshairCursor_C_UpdateCursorItemBrackets) == 0x000008, "Wrong alignment on WIDGET_CrosshairCursor_C_UpdateCursorItemBrackets");
static_assert(sizeof(WIDGET_CrosshairCursor_C_UpdateCursorItemBrackets) == 0x0000C8, "Wrong size on WIDGET_CrosshairCursor_C_UpdateCursorItemBrackets");
static_assert(offsetof(WIDGET_CrosshairCursor_C_UpdateCursorItemBrackets, Item) == 0x000000, "Member 'WIDGET_CrosshairCursor_C_UpdateCursorItemBrackets::Item' has a wrong offset!");
static_assert(offsetof(WIDGET_CrosshairCursor_C_UpdateCursorItemBrackets, Bag) == 0x000008, "Member 'WIDGET_CrosshairCursor_C_UpdateCursorItemBrackets::Bag' has a wrong offset!");
static_assert(offsetof(WIDGET_CrosshairCursor_C_UpdateCursorItemBrackets, BagMeshWidget) == 0x000010, "Member 'WIDGET_CrosshairCursor_C_UpdateCursorItemBrackets::BagMeshWidget' has a wrong offset!");
static_assert(offsetof(WIDGET_CrosshairCursor_C_UpdateCursorItemBrackets, CursorItemGridCoords) == 0x000018, "Member 'WIDGET_CrosshairCursor_C_UpdateCursorItemBrackets::CursorItemGridCoords' has a wrong offset!");
static_assert(offsetof(WIDGET_CrosshairCursor_C_UpdateCursorItemBrackets, UpdatePosition) == 0x000020, "Member 'WIDGET_CrosshairCursor_C_UpdateCursorItemBrackets::UpdatePosition' has a wrong offset!");
static_assert(offsetof(WIDGET_CrosshairCursor_C_UpdateCursorItemBrackets, CursorItemSlotIndex) == 0x000024, "Member 'WIDGET_CrosshairCursor_C_UpdateCursorItemBrackets::CursorItemSlotIndex' has a wrong offset!");
static_assert(offsetof(WIDGET_CrosshairCursor_C_UpdateCursorItemBrackets, CallFunc_CanMoveItem_Result) == 0x000028, "Member 'WIDGET_CrosshairCursor_C_UpdateCursorItemBrackets::CallFunc_CanMoveItem_Result' has a wrong offset!");
static_assert(offsetof(WIDGET_CrosshairCursor_C_UpdateCursorItemBrackets, CallFunc_Not_PreBool_ReturnValue) == 0x000029, "Member 'WIDGET_CrosshairCursor_C_UpdateCursorItemBrackets::CallFunc_Not_PreBool_ReturnValue' has a wrong offset!");
static_assert(offsetof(WIDGET_CrosshairCursor_C_UpdateCursorItemBrackets, CallFunc_ConvertToDynamicMaterialInstance_ReturnValue) == 0x000030, "Member 'WIDGET_CrosshairCursor_C_UpdateCursorItemBrackets::CallFunc_ConvertToDynamicMaterialInstance_ReturnValue' has a wrong offset!");
static_assert(offsetof(WIDGET_CrosshairCursor_C_UpdateCursorItemBrackets, CallFunc_Conv_BoolToFloat_ReturnValue) == 0x000038, "Member 'WIDGET_CrosshairCursor_C_UpdateCursorItemBrackets::CallFunc_Conv_BoolToFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(WIDGET_CrosshairCursor_C_UpdateCursorItemBrackets, CallFunc_SlotAsCanvasSlot_ReturnValue) == 0x000040, "Member 'WIDGET_CrosshairCursor_C_UpdateCursorItemBrackets::CallFunc_SlotAsCanvasSlot_ReturnValue' has a wrong offset!");
static_assert(offsetof(WIDGET_CrosshairCursor_C_UpdateCursorItemBrackets, CallFunc_SlotAsCanvasSlot_ReturnValue_1) == 0x000048, "Member 'WIDGET_CrosshairCursor_C_UpdateCursorItemBrackets::CallFunc_SlotAsCanvasSlot_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(WIDGET_CrosshairCursor_C_UpdateCursorItemBrackets, CallFunc_ConvertToDynamicMaterialInstance_ReturnValue_1) == 0x000050, "Member 'WIDGET_CrosshairCursor_C_UpdateCursorItemBrackets::CallFunc_ConvertToDynamicMaterialInstance_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(WIDGET_CrosshairCursor_C_UpdateCursorItemBrackets, CallFunc_SlotAsCanvasSlot_ReturnValue_2) == 0x000058, "Member 'WIDGET_CrosshairCursor_C_UpdateCursorItemBrackets::CallFunc_SlotAsCanvasSlot_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(WIDGET_CrosshairCursor_C_UpdateCursorItemBrackets, CallFunc_GetPosition_ReturnValue) == 0x000060, "Member 'WIDGET_CrosshairCursor_C_UpdateCursorItemBrackets::CallFunc_GetPosition_ReturnValue' has a wrong offset!");
static_assert(offsetof(WIDGET_CrosshairCursor_C_UpdateCursorItemBrackets, CallFunc_GetSelectionRegionWindowPosition_Result) == 0x000068, "Member 'WIDGET_CrosshairCursor_C_UpdateCursorItemBrackets::CallFunc_GetSelectionRegionWindowPosition_Result' has a wrong offset!");
static_assert(offsetof(WIDGET_CrosshairCursor_C_UpdateCursorItemBrackets, CallFunc_GetItemWidgetPositionFromCoords_ResultPosition) == 0x000070, "Member 'WIDGET_CrosshairCursor_C_UpdateCursorItemBrackets::CallFunc_GetItemWidgetPositionFromCoords_ResultPosition' has a wrong offset!");
static_assert(offsetof(WIDGET_CrosshairCursor_C_UpdateCursorItemBrackets, CallFunc_SlotAsCanvasSlot_ReturnValue_3) == 0x000078, "Member 'WIDGET_CrosshairCursor_C_UpdateCursorItemBrackets::CallFunc_SlotAsCanvasSlot_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(WIDGET_CrosshairCursor_C_UpdateCursorItemBrackets, CallFunc_GetSlotIndexFromGridCoordinates_SlotIndex) == 0x000080, "Member 'WIDGET_CrosshairCursor_C_UpdateCursorItemBrackets::CallFunc_GetSlotIndexFromGridCoordinates_SlotIndex' has a wrong offset!");
static_assert(offsetof(WIDGET_CrosshairCursor_C_UpdateCursorItemBrackets, CallFunc_GetRotatedGridSize_Result) == 0x000084, "Member 'WIDGET_CrosshairCursor_C_UpdateCursorItemBrackets::CallFunc_GetRotatedGridSize_Result' has a wrong offset!");
static_assert(offsetof(WIDGET_CrosshairCursor_C_UpdateCursorItemBrackets, CallFunc_SlotAsCanvasSlot_ReturnValue_4) == 0x000090, "Member 'WIDGET_CrosshairCursor_C_UpdateCursorItemBrackets::CallFunc_SlotAsCanvasSlot_ReturnValue_4' has a wrong offset!");
static_assert(offsetof(WIDGET_CrosshairCursor_C_UpdateCursorItemBrackets, CallFunc_GetDoubleBorderSize_ReturnValue) == 0x000098, "Member 'WIDGET_CrosshairCursor_C_UpdateCursorItemBrackets::CallFunc_GetDoubleBorderSize_ReturnValue' has a wrong offset!");
static_assert(offsetof(WIDGET_CrosshairCursor_C_UpdateCursorItemBrackets, CallFunc_GetSize_ReturnValue) == 0x00009C, "Member 'WIDGET_CrosshairCursor_C_UpdateCursorItemBrackets::CallFunc_GetSize_ReturnValue' has a wrong offset!");
static_assert(offsetof(WIDGET_CrosshairCursor_C_UpdateCursorItemBrackets, CallFunc_Conv_IntToFloat_ReturnValue) == 0x0000A4, "Member 'WIDGET_CrosshairCursor_C_UpdateCursorItemBrackets::CallFunc_Conv_IntToFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(WIDGET_CrosshairCursor_C_UpdateCursorItemBrackets, CallFunc_MakeVector2D_ReturnValue) == 0x0000A8, "Member 'WIDGET_CrosshairCursor_C_UpdateCursorItemBrackets::CallFunc_MakeVector2D_ReturnValue' has a wrong offset!");
static_assert(offsetof(WIDGET_CrosshairCursor_C_UpdateCursorItemBrackets, CallFunc_SlotAsCanvasSlot_ReturnValue_5) == 0x0000B0, "Member 'WIDGET_CrosshairCursor_C_UpdateCursorItemBrackets::CallFunc_SlotAsCanvasSlot_ReturnValue_5' has a wrong offset!");
static_assert(offsetof(WIDGET_CrosshairCursor_C_UpdateCursorItemBrackets, CallFunc_GetWidgetSizeFromGridSize_ReturnValue) == 0x0000B8, "Member 'WIDGET_CrosshairCursor_C_UpdateCursorItemBrackets::CallFunc_GetWidgetSizeFromGridSize_ReturnValue' has a wrong offset!");
static_assert(offsetof(WIDGET_CrosshairCursor_C_UpdateCursorItemBrackets, CallFunc_Subtract_Vector2DVector2D_ReturnValue) == 0x0000C0, "Member 'WIDGET_CrosshairCursor_C_UpdateCursorItemBrackets::CallFunc_Subtract_Vector2DVector2D_ReturnValue' has a wrong offset!");

// Function WIDGET_CrosshairCursor.WIDGET_CrosshairCursor_C.GetSelectionRegionWindowPosition
// 0x0098 (0x0098 - 0x0000)
struct WIDGET_CrosshairCursor_C_GetSelectionRegionWindowPosition final
{
public:
	struct FVector2D                              WidgetOffset;                                      // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector2D                              Result;                                            // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UPanelWidget*                           CallFunc_GetParent_ReturnValue;                    // 0x0010(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UPanelWidget*                           CallFunc_GetParent_ReturnValue_1;                  // 0x0018(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FGeometry                              CallFunc_GetCachedGeometry_ReturnValue;            // 0x0020(0x0038)(ConstParm, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0058(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_59[0x3];                                       // 0x0059(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector2D                              CallFunc_GetLocalSize_ReturnValue;                 // 0x005C(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector2D                              CallFunc_Divide_Vector2DFloat_ReturnValue;         // 0x0064(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector2D                              CallFunc_LocalToViewport_PixelPosition;            // 0x006C(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector2D                              CallFunc_LocalToViewport_ViewportPosition;         // 0x0074(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_7C[0x4];                                       // 0x007C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UPanelWidget*                           CallFunc_GetParent_ReturnValue_2;                  // 0x0080(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector2D                              CallFunc_Add_Vector2DVector2D_ReturnValue;         // 0x0088(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue_1;                    // 0x0090(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(WIDGET_CrosshairCursor_C_GetSelectionRegionWindowPosition) == 0x000008, "Wrong alignment on WIDGET_CrosshairCursor_C_GetSelectionRegionWindowPosition");
static_assert(sizeof(WIDGET_CrosshairCursor_C_GetSelectionRegionWindowPosition) == 0x000098, "Wrong size on WIDGET_CrosshairCursor_C_GetSelectionRegionWindowPosition");
static_assert(offsetof(WIDGET_CrosshairCursor_C_GetSelectionRegionWindowPosition, WidgetOffset) == 0x000000, "Member 'WIDGET_CrosshairCursor_C_GetSelectionRegionWindowPosition::WidgetOffset' has a wrong offset!");
static_assert(offsetof(WIDGET_CrosshairCursor_C_GetSelectionRegionWindowPosition, Result) == 0x000008, "Member 'WIDGET_CrosshairCursor_C_GetSelectionRegionWindowPosition::Result' has a wrong offset!");
static_assert(offsetof(WIDGET_CrosshairCursor_C_GetSelectionRegionWindowPosition, CallFunc_GetParent_ReturnValue) == 0x000010, "Member 'WIDGET_CrosshairCursor_C_GetSelectionRegionWindowPosition::CallFunc_GetParent_ReturnValue' has a wrong offset!");
static_assert(offsetof(WIDGET_CrosshairCursor_C_GetSelectionRegionWindowPosition, CallFunc_GetParent_ReturnValue_1) == 0x000018, "Member 'WIDGET_CrosshairCursor_C_GetSelectionRegionWindowPosition::CallFunc_GetParent_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(WIDGET_CrosshairCursor_C_GetSelectionRegionWindowPosition, CallFunc_GetCachedGeometry_ReturnValue) == 0x000020, "Member 'WIDGET_CrosshairCursor_C_GetSelectionRegionWindowPosition::CallFunc_GetCachedGeometry_ReturnValue' has a wrong offset!");
static_assert(offsetof(WIDGET_CrosshairCursor_C_GetSelectionRegionWindowPosition, CallFunc_IsValid_ReturnValue) == 0x000058, "Member 'WIDGET_CrosshairCursor_C_GetSelectionRegionWindowPosition::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(WIDGET_CrosshairCursor_C_GetSelectionRegionWindowPosition, CallFunc_GetLocalSize_ReturnValue) == 0x00005C, "Member 'WIDGET_CrosshairCursor_C_GetSelectionRegionWindowPosition::CallFunc_GetLocalSize_ReturnValue' has a wrong offset!");
static_assert(offsetof(WIDGET_CrosshairCursor_C_GetSelectionRegionWindowPosition, CallFunc_Divide_Vector2DFloat_ReturnValue) == 0x000064, "Member 'WIDGET_CrosshairCursor_C_GetSelectionRegionWindowPosition::CallFunc_Divide_Vector2DFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(WIDGET_CrosshairCursor_C_GetSelectionRegionWindowPosition, CallFunc_LocalToViewport_PixelPosition) == 0x00006C, "Member 'WIDGET_CrosshairCursor_C_GetSelectionRegionWindowPosition::CallFunc_LocalToViewport_PixelPosition' has a wrong offset!");
static_assert(offsetof(WIDGET_CrosshairCursor_C_GetSelectionRegionWindowPosition, CallFunc_LocalToViewport_ViewportPosition) == 0x000074, "Member 'WIDGET_CrosshairCursor_C_GetSelectionRegionWindowPosition::CallFunc_LocalToViewport_ViewportPosition' has a wrong offset!");
static_assert(offsetof(WIDGET_CrosshairCursor_C_GetSelectionRegionWindowPosition, CallFunc_GetParent_ReturnValue_2) == 0x000080, "Member 'WIDGET_CrosshairCursor_C_GetSelectionRegionWindowPosition::CallFunc_GetParent_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(WIDGET_CrosshairCursor_C_GetSelectionRegionWindowPosition, CallFunc_Add_Vector2DVector2D_ReturnValue) == 0x000088, "Member 'WIDGET_CrosshairCursor_C_GetSelectionRegionWindowPosition::CallFunc_Add_Vector2DVector2D_ReturnValue' has a wrong offset!");
static_assert(offsetof(WIDGET_CrosshairCursor_C_GetSelectionRegionWindowPosition, CallFunc_IsValid_ReturnValue_1) == 0x000090, "Member 'WIDGET_CrosshairCursor_C_GetSelectionRegionWindowPosition::CallFunc_IsValid_ReturnValue_1' has a wrong offset!");

// Function WIDGET_CrosshairCursor.WIDGET_CrosshairCursor_C.UpdateItemUnderCursorBrackets
// 0x00B0 (0x00B0 - 0x0000)
struct WIDGET_CrosshairCursor_C_UpdateItemUnderCursorBrackets final
{
public:
	class UITEM_Base_C*                           Item;                                              // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UInventoryBagUI_C*                      BagUI;                                             // 0x0008(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector2D                              CursorScreenPosition;                              // 0x0010(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          RequiresTransitionUpdate;                          // 0x0018(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_19[0x3];                                       // 0x0019(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector2D                              ItemSelectionWindowPosition;                       // 0x001C(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector2D                              ItemSelectionSize;                                 // 0x0024(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector2D                              ItemSelectionRegionPosition;                       // 0x002C(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_34[0x4];                                       // 0x0034(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UMaterialInstanceDynamic*               CallFunc_ConvertToDynamicMaterialInstance_ReturnValue; // 0x0038(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector2D                              CallFunc_GetSelectionRegionWindowPosition_Result;  // 0x0040(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_NotEqual_Vector2DVector2D_ReturnValue;    // 0x0048(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_NotEqual_Vector2DVector2D_ReturnValue_1;  // 0x0049(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BooleanOR_ReturnValue;                    // 0x004A(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_4B[0x5];                                       // 0x004B(0x0005)(Fixing Size After Last Property [ Dumper-7 ])
	class UMaterialInstanceDynamic*               CallFunc_ConvertToDynamicMaterialInstance_ReturnValue_1; // 0x0050(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UCanvasPanelSlot*                       CallFunc_SlotAsCanvasSlot_ReturnValue;             // 0x0058(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UCanvasPanelSlot*                       CallFunc_SlotAsCanvasSlot_ReturnValue_1;           // 0x0060(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_UpdateBrackets_Result;                    // 0x0068(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_69[0x3];                                       // 0x0069(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FIntPoint                              CallFunc_GetRotatedGridSize_Result;                // 0x006C(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_GetSlotIndex_Result;                      // 0x0074(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UInventoryBag_C*                        CallFunc_GetBag_Result;                            // 0x0078(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Multiply_IntInt_ReturnValue;              // 0x0080(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Multiply_IntInt_ReturnValue_1;            // 0x0084(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Conv_IntToFloat_ReturnValue;              // 0x0088(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Conv_IntToFloat_ReturnValue_1;            // 0x008C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector2D                              CallFunc_MakeVector2D_ReturnValue;                 // 0x0090(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UWIDGET_SlottedItem_C*                  CallFunc_GetWidgetForItemAtSlot_ItemWidget;        // 0x0098(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UCanvasPanelSlot*                       CallFunc_SlotAsCanvasSlot_ReturnValue_2;           // 0x00A0(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector2D                              CallFunc_GetPosition_ReturnValue;                  // 0x00A8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(WIDGET_CrosshairCursor_C_UpdateItemUnderCursorBrackets) == 0x000008, "Wrong alignment on WIDGET_CrosshairCursor_C_UpdateItemUnderCursorBrackets");
static_assert(sizeof(WIDGET_CrosshairCursor_C_UpdateItemUnderCursorBrackets) == 0x0000B0, "Wrong size on WIDGET_CrosshairCursor_C_UpdateItemUnderCursorBrackets");
static_assert(offsetof(WIDGET_CrosshairCursor_C_UpdateItemUnderCursorBrackets, Item) == 0x000000, "Member 'WIDGET_CrosshairCursor_C_UpdateItemUnderCursorBrackets::Item' has a wrong offset!");
static_assert(offsetof(WIDGET_CrosshairCursor_C_UpdateItemUnderCursorBrackets, BagUI) == 0x000008, "Member 'WIDGET_CrosshairCursor_C_UpdateItemUnderCursorBrackets::BagUI' has a wrong offset!");
static_assert(offsetof(WIDGET_CrosshairCursor_C_UpdateItemUnderCursorBrackets, CursorScreenPosition) == 0x000010, "Member 'WIDGET_CrosshairCursor_C_UpdateItemUnderCursorBrackets::CursorScreenPosition' has a wrong offset!");
static_assert(offsetof(WIDGET_CrosshairCursor_C_UpdateItemUnderCursorBrackets, RequiresTransitionUpdate) == 0x000018, "Member 'WIDGET_CrosshairCursor_C_UpdateItemUnderCursorBrackets::RequiresTransitionUpdate' has a wrong offset!");
static_assert(offsetof(WIDGET_CrosshairCursor_C_UpdateItemUnderCursorBrackets, ItemSelectionWindowPosition) == 0x00001C, "Member 'WIDGET_CrosshairCursor_C_UpdateItemUnderCursorBrackets::ItemSelectionWindowPosition' has a wrong offset!");
static_assert(offsetof(WIDGET_CrosshairCursor_C_UpdateItemUnderCursorBrackets, ItemSelectionSize) == 0x000024, "Member 'WIDGET_CrosshairCursor_C_UpdateItemUnderCursorBrackets::ItemSelectionSize' has a wrong offset!");
static_assert(offsetof(WIDGET_CrosshairCursor_C_UpdateItemUnderCursorBrackets, ItemSelectionRegionPosition) == 0x00002C, "Member 'WIDGET_CrosshairCursor_C_UpdateItemUnderCursorBrackets::ItemSelectionRegionPosition' has a wrong offset!");
static_assert(offsetof(WIDGET_CrosshairCursor_C_UpdateItemUnderCursorBrackets, CallFunc_ConvertToDynamicMaterialInstance_ReturnValue) == 0x000038, "Member 'WIDGET_CrosshairCursor_C_UpdateItemUnderCursorBrackets::CallFunc_ConvertToDynamicMaterialInstance_ReturnValue' has a wrong offset!");
static_assert(offsetof(WIDGET_CrosshairCursor_C_UpdateItemUnderCursorBrackets, CallFunc_GetSelectionRegionWindowPosition_Result) == 0x000040, "Member 'WIDGET_CrosshairCursor_C_UpdateItemUnderCursorBrackets::CallFunc_GetSelectionRegionWindowPosition_Result' has a wrong offset!");
static_assert(offsetof(WIDGET_CrosshairCursor_C_UpdateItemUnderCursorBrackets, CallFunc_NotEqual_Vector2DVector2D_ReturnValue) == 0x000048, "Member 'WIDGET_CrosshairCursor_C_UpdateItemUnderCursorBrackets::CallFunc_NotEqual_Vector2DVector2D_ReturnValue' has a wrong offset!");
static_assert(offsetof(WIDGET_CrosshairCursor_C_UpdateItemUnderCursorBrackets, CallFunc_NotEqual_Vector2DVector2D_ReturnValue_1) == 0x000049, "Member 'WIDGET_CrosshairCursor_C_UpdateItemUnderCursorBrackets::CallFunc_NotEqual_Vector2DVector2D_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(WIDGET_CrosshairCursor_C_UpdateItemUnderCursorBrackets, CallFunc_BooleanOR_ReturnValue) == 0x00004A, "Member 'WIDGET_CrosshairCursor_C_UpdateItemUnderCursorBrackets::CallFunc_BooleanOR_ReturnValue' has a wrong offset!");
static_assert(offsetof(WIDGET_CrosshairCursor_C_UpdateItemUnderCursorBrackets, CallFunc_ConvertToDynamicMaterialInstance_ReturnValue_1) == 0x000050, "Member 'WIDGET_CrosshairCursor_C_UpdateItemUnderCursorBrackets::CallFunc_ConvertToDynamicMaterialInstance_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(WIDGET_CrosshairCursor_C_UpdateItemUnderCursorBrackets, CallFunc_SlotAsCanvasSlot_ReturnValue) == 0x000058, "Member 'WIDGET_CrosshairCursor_C_UpdateItemUnderCursorBrackets::CallFunc_SlotAsCanvasSlot_ReturnValue' has a wrong offset!");
static_assert(offsetof(WIDGET_CrosshairCursor_C_UpdateItemUnderCursorBrackets, CallFunc_SlotAsCanvasSlot_ReturnValue_1) == 0x000060, "Member 'WIDGET_CrosshairCursor_C_UpdateItemUnderCursorBrackets::CallFunc_SlotAsCanvasSlot_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(WIDGET_CrosshairCursor_C_UpdateItemUnderCursorBrackets, CallFunc_UpdateBrackets_Result) == 0x000068, "Member 'WIDGET_CrosshairCursor_C_UpdateItemUnderCursorBrackets::CallFunc_UpdateBrackets_Result' has a wrong offset!");
static_assert(offsetof(WIDGET_CrosshairCursor_C_UpdateItemUnderCursorBrackets, CallFunc_GetRotatedGridSize_Result) == 0x00006C, "Member 'WIDGET_CrosshairCursor_C_UpdateItemUnderCursorBrackets::CallFunc_GetRotatedGridSize_Result' has a wrong offset!");
static_assert(offsetof(WIDGET_CrosshairCursor_C_UpdateItemUnderCursorBrackets, CallFunc_GetSlotIndex_Result) == 0x000074, "Member 'WIDGET_CrosshairCursor_C_UpdateItemUnderCursorBrackets::CallFunc_GetSlotIndex_Result' has a wrong offset!");
static_assert(offsetof(WIDGET_CrosshairCursor_C_UpdateItemUnderCursorBrackets, CallFunc_GetBag_Result) == 0x000078, "Member 'WIDGET_CrosshairCursor_C_UpdateItemUnderCursorBrackets::CallFunc_GetBag_Result' has a wrong offset!");
static_assert(offsetof(WIDGET_CrosshairCursor_C_UpdateItemUnderCursorBrackets, CallFunc_Multiply_IntInt_ReturnValue) == 0x000080, "Member 'WIDGET_CrosshairCursor_C_UpdateItemUnderCursorBrackets::CallFunc_Multiply_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(WIDGET_CrosshairCursor_C_UpdateItemUnderCursorBrackets, CallFunc_Multiply_IntInt_ReturnValue_1) == 0x000084, "Member 'WIDGET_CrosshairCursor_C_UpdateItemUnderCursorBrackets::CallFunc_Multiply_IntInt_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(WIDGET_CrosshairCursor_C_UpdateItemUnderCursorBrackets, CallFunc_Conv_IntToFloat_ReturnValue) == 0x000088, "Member 'WIDGET_CrosshairCursor_C_UpdateItemUnderCursorBrackets::CallFunc_Conv_IntToFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(WIDGET_CrosshairCursor_C_UpdateItemUnderCursorBrackets, CallFunc_Conv_IntToFloat_ReturnValue_1) == 0x00008C, "Member 'WIDGET_CrosshairCursor_C_UpdateItemUnderCursorBrackets::CallFunc_Conv_IntToFloat_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(WIDGET_CrosshairCursor_C_UpdateItemUnderCursorBrackets, CallFunc_MakeVector2D_ReturnValue) == 0x000090, "Member 'WIDGET_CrosshairCursor_C_UpdateItemUnderCursorBrackets::CallFunc_MakeVector2D_ReturnValue' has a wrong offset!");
static_assert(offsetof(WIDGET_CrosshairCursor_C_UpdateItemUnderCursorBrackets, CallFunc_GetWidgetForItemAtSlot_ItemWidget) == 0x000098, "Member 'WIDGET_CrosshairCursor_C_UpdateItemUnderCursorBrackets::CallFunc_GetWidgetForItemAtSlot_ItemWidget' has a wrong offset!");
static_assert(offsetof(WIDGET_CrosshairCursor_C_UpdateItemUnderCursorBrackets, CallFunc_SlotAsCanvasSlot_ReturnValue_2) == 0x0000A0, "Member 'WIDGET_CrosshairCursor_C_UpdateItemUnderCursorBrackets::CallFunc_SlotAsCanvasSlot_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(WIDGET_CrosshairCursor_C_UpdateItemUnderCursorBrackets, CallFunc_GetPosition_ReturnValue) == 0x0000A8, "Member 'WIDGET_CrosshairCursor_C_UpdateItemUnderCursorBrackets::CallFunc_GetPosition_ReturnValue' has a wrong offset!");

// Function WIDGET_CrosshairCursor.WIDGET_CrosshairCursor_C.UpdateInteractionBrackets
// 0x00D8 (0x00D8 - 0x0000)
struct WIDGET_CrosshairCursor_C_UpdateInteractionBrackets final
{
public:
	class UObject*                                Interactable;                                      // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UPrimitiveComponent*                    Primitive;                                         // 0x0008(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector2D                              CursorScreenPosition;                              // 0x0010(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Result;                                            // 0x0018(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_19[0x3];                                       // 0x0019(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector2D                              UnprojectedScreenMax;                              // 0x001C(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector2D                              UnprojectedScreenMin;                              // 0x0024(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector2D                              ProjectedScreenMax;                                // 0x002C(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector2D                              ProjectedScreenMin;                                // 0x0034(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          RequiresTransitionUpdate;                          // 0x003C(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_3D[0x3];                                       // 0x003D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector2D                              InteractionBracketSize;                            // 0x0040(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector2D                              InteractionBracketPosition;                        // 0x0048(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UShapeComponent*                        TargetShapeComponent;                              // 0x0050(0x0008)(Edit, BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class APlayerController*                      PlayerController;                                  // 0x0058(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UMaterialInstanceDynamic*               CallFunc_ConvertToDynamicMaterialInstance_ReturnValue; // 0x0060(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector2D                              CallFunc_GetDeprojectedScreenPoint_DeprojectedScreenPosition; // 0x0068(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector2D                              CallFunc_GetDeprojectedScreenPoint_DeprojectedScreenPosition_1; // 0x0070(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector2D                              CallFunc_Subtract_Vector2DVector2D_ReturnValue;    // 0x0078(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_NotEqual_ObjectObject_ReturnValue;        // 0x0080(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_UpdateBrackets_Result;                    // 0x0081(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_82[0x6];                                       // 0x0082(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class AController*                            CallFunc_GetController_ReturnValue;                // 0x0088(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class APlayerController*                      K2Node_DynamicCast_AsPlayer_Controller;            // 0x0090(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0098(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_99[0x7];                                       // 0x0099(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TScriptInterface<class IINTERF_Interactable_C> K2Node_DynamicCast_AsINTERF_Interactable;          // 0x00A0(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          K2Node_DynamicCast_bSuccess_1;                     // 0x00B0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_B1[0x7];                                       // 0x00B1(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UShapeComponent*                        CallFunc_GetTargetShape_ShapeComponent;            // 0x00B8(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FBox2D                                 CallFunc_GetProjectedShapeBoundsInWidget_OutScreenBounds; // 0x00C0(0x0014)(ZeroConstructor, NoDestructor)
	bool                                          CallFunc_GetProjectedShapeBoundsInWidget_ReturnValue; // 0x00D4(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x00D5(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(WIDGET_CrosshairCursor_C_UpdateInteractionBrackets) == 0x000008, "Wrong alignment on WIDGET_CrosshairCursor_C_UpdateInteractionBrackets");
static_assert(sizeof(WIDGET_CrosshairCursor_C_UpdateInteractionBrackets) == 0x0000D8, "Wrong size on WIDGET_CrosshairCursor_C_UpdateInteractionBrackets");
static_assert(offsetof(WIDGET_CrosshairCursor_C_UpdateInteractionBrackets, Interactable) == 0x000000, "Member 'WIDGET_CrosshairCursor_C_UpdateInteractionBrackets::Interactable' has a wrong offset!");
static_assert(offsetof(WIDGET_CrosshairCursor_C_UpdateInteractionBrackets, Primitive) == 0x000008, "Member 'WIDGET_CrosshairCursor_C_UpdateInteractionBrackets::Primitive' has a wrong offset!");
static_assert(offsetof(WIDGET_CrosshairCursor_C_UpdateInteractionBrackets, CursorScreenPosition) == 0x000010, "Member 'WIDGET_CrosshairCursor_C_UpdateInteractionBrackets::CursorScreenPosition' has a wrong offset!");
static_assert(offsetof(WIDGET_CrosshairCursor_C_UpdateInteractionBrackets, Result) == 0x000018, "Member 'WIDGET_CrosshairCursor_C_UpdateInteractionBrackets::Result' has a wrong offset!");
static_assert(offsetof(WIDGET_CrosshairCursor_C_UpdateInteractionBrackets, UnprojectedScreenMax) == 0x00001C, "Member 'WIDGET_CrosshairCursor_C_UpdateInteractionBrackets::UnprojectedScreenMax' has a wrong offset!");
static_assert(offsetof(WIDGET_CrosshairCursor_C_UpdateInteractionBrackets, UnprojectedScreenMin) == 0x000024, "Member 'WIDGET_CrosshairCursor_C_UpdateInteractionBrackets::UnprojectedScreenMin' has a wrong offset!");
static_assert(offsetof(WIDGET_CrosshairCursor_C_UpdateInteractionBrackets, ProjectedScreenMax) == 0x00002C, "Member 'WIDGET_CrosshairCursor_C_UpdateInteractionBrackets::ProjectedScreenMax' has a wrong offset!");
static_assert(offsetof(WIDGET_CrosshairCursor_C_UpdateInteractionBrackets, ProjectedScreenMin) == 0x000034, "Member 'WIDGET_CrosshairCursor_C_UpdateInteractionBrackets::ProjectedScreenMin' has a wrong offset!");
static_assert(offsetof(WIDGET_CrosshairCursor_C_UpdateInteractionBrackets, RequiresTransitionUpdate) == 0x00003C, "Member 'WIDGET_CrosshairCursor_C_UpdateInteractionBrackets::RequiresTransitionUpdate' has a wrong offset!");
static_assert(offsetof(WIDGET_CrosshairCursor_C_UpdateInteractionBrackets, InteractionBracketSize) == 0x000040, "Member 'WIDGET_CrosshairCursor_C_UpdateInteractionBrackets::InteractionBracketSize' has a wrong offset!");
static_assert(offsetof(WIDGET_CrosshairCursor_C_UpdateInteractionBrackets, InteractionBracketPosition) == 0x000048, "Member 'WIDGET_CrosshairCursor_C_UpdateInteractionBrackets::InteractionBracketPosition' has a wrong offset!");
static_assert(offsetof(WIDGET_CrosshairCursor_C_UpdateInteractionBrackets, TargetShapeComponent) == 0x000050, "Member 'WIDGET_CrosshairCursor_C_UpdateInteractionBrackets::TargetShapeComponent' has a wrong offset!");
static_assert(offsetof(WIDGET_CrosshairCursor_C_UpdateInteractionBrackets, PlayerController) == 0x000058, "Member 'WIDGET_CrosshairCursor_C_UpdateInteractionBrackets::PlayerController' has a wrong offset!");
static_assert(offsetof(WIDGET_CrosshairCursor_C_UpdateInteractionBrackets, CallFunc_ConvertToDynamicMaterialInstance_ReturnValue) == 0x000060, "Member 'WIDGET_CrosshairCursor_C_UpdateInteractionBrackets::CallFunc_ConvertToDynamicMaterialInstance_ReturnValue' has a wrong offset!");
static_assert(offsetof(WIDGET_CrosshairCursor_C_UpdateInteractionBrackets, CallFunc_GetDeprojectedScreenPoint_DeprojectedScreenPosition) == 0x000068, "Member 'WIDGET_CrosshairCursor_C_UpdateInteractionBrackets::CallFunc_GetDeprojectedScreenPoint_DeprojectedScreenPosition' has a wrong offset!");
static_assert(offsetof(WIDGET_CrosshairCursor_C_UpdateInteractionBrackets, CallFunc_GetDeprojectedScreenPoint_DeprojectedScreenPosition_1) == 0x000070, "Member 'WIDGET_CrosshairCursor_C_UpdateInteractionBrackets::CallFunc_GetDeprojectedScreenPoint_DeprojectedScreenPosition_1' has a wrong offset!");
static_assert(offsetof(WIDGET_CrosshairCursor_C_UpdateInteractionBrackets, CallFunc_Subtract_Vector2DVector2D_ReturnValue) == 0x000078, "Member 'WIDGET_CrosshairCursor_C_UpdateInteractionBrackets::CallFunc_Subtract_Vector2DVector2D_ReturnValue' has a wrong offset!");
static_assert(offsetof(WIDGET_CrosshairCursor_C_UpdateInteractionBrackets, CallFunc_NotEqual_ObjectObject_ReturnValue) == 0x000080, "Member 'WIDGET_CrosshairCursor_C_UpdateInteractionBrackets::CallFunc_NotEqual_ObjectObject_ReturnValue' has a wrong offset!");
static_assert(offsetof(WIDGET_CrosshairCursor_C_UpdateInteractionBrackets, CallFunc_UpdateBrackets_Result) == 0x000081, "Member 'WIDGET_CrosshairCursor_C_UpdateInteractionBrackets::CallFunc_UpdateBrackets_Result' has a wrong offset!");
static_assert(offsetof(WIDGET_CrosshairCursor_C_UpdateInteractionBrackets, CallFunc_GetController_ReturnValue) == 0x000088, "Member 'WIDGET_CrosshairCursor_C_UpdateInteractionBrackets::CallFunc_GetController_ReturnValue' has a wrong offset!");
static_assert(offsetof(WIDGET_CrosshairCursor_C_UpdateInteractionBrackets, K2Node_DynamicCast_AsPlayer_Controller) == 0x000090, "Member 'WIDGET_CrosshairCursor_C_UpdateInteractionBrackets::K2Node_DynamicCast_AsPlayer_Controller' has a wrong offset!");
static_assert(offsetof(WIDGET_CrosshairCursor_C_UpdateInteractionBrackets, K2Node_DynamicCast_bSuccess) == 0x000098, "Member 'WIDGET_CrosshairCursor_C_UpdateInteractionBrackets::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(WIDGET_CrosshairCursor_C_UpdateInteractionBrackets, K2Node_DynamicCast_AsINTERF_Interactable) == 0x0000A0, "Member 'WIDGET_CrosshairCursor_C_UpdateInteractionBrackets::K2Node_DynamicCast_AsINTERF_Interactable' has a wrong offset!");
static_assert(offsetof(WIDGET_CrosshairCursor_C_UpdateInteractionBrackets, K2Node_DynamicCast_bSuccess_1) == 0x0000B0, "Member 'WIDGET_CrosshairCursor_C_UpdateInteractionBrackets::K2Node_DynamicCast_bSuccess_1' has a wrong offset!");
static_assert(offsetof(WIDGET_CrosshairCursor_C_UpdateInteractionBrackets, CallFunc_GetTargetShape_ShapeComponent) == 0x0000B8, "Member 'WIDGET_CrosshairCursor_C_UpdateInteractionBrackets::CallFunc_GetTargetShape_ShapeComponent' has a wrong offset!");
static_assert(offsetof(WIDGET_CrosshairCursor_C_UpdateInteractionBrackets, CallFunc_GetProjectedShapeBoundsInWidget_OutScreenBounds) == 0x0000C0, "Member 'WIDGET_CrosshairCursor_C_UpdateInteractionBrackets::CallFunc_GetProjectedShapeBoundsInWidget_OutScreenBounds' has a wrong offset!");
static_assert(offsetof(WIDGET_CrosshairCursor_C_UpdateInteractionBrackets, CallFunc_GetProjectedShapeBoundsInWidget_ReturnValue) == 0x0000D4, "Member 'WIDGET_CrosshairCursor_C_UpdateInteractionBrackets::CallFunc_GetProjectedShapeBoundsInWidget_ReturnValue' has a wrong offset!");
static_assert(offsetof(WIDGET_CrosshairCursor_C_UpdateInteractionBrackets, CallFunc_IsValid_ReturnValue) == 0x0000D5, "Member 'WIDGET_CrosshairCursor_C_UpdateInteractionBrackets::CallFunc_IsValid_ReturnValue' has a wrong offset!");

// Function WIDGET_CrosshairCursor.WIDGET_CrosshairCursor_C.UpdateBrackets
// 0x0068 (0x0068 - 0x0000)
struct WIDGET_CrosshairCursor_C_UpdateBrackets final
{
public:
	struct FVector2D                              CursorScreenPosition;                              // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector2D                              SelectionPosition;                                 // 0x0008(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector2D                              SelectionSize;                                     // 0x0010(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          RequiresTransitionUpdate;                          // 0x0018(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Result;                                            // 0x0019(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_1A[0x2];                                       // 0x001A(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector2D                              CallFunc_GetWindowPointFromScreenPoint_ReturnValue; // 0x001C(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector2D                              CallFunc_GetWidgetOffsetFromWindowPoint_WidgetOffset; // 0x0024(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_GetWidgetOffsetFromWindowPoint_ReturnValue; // 0x002C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_2D[0x3];                                       // 0x002D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class UCanvasPanelSlot*                       CallFunc_SlotAsCanvasSlot_ReturnValue;             // 0x0030(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector2D                              CallFunc_GetSize_ReturnValue;                      // 0x0038(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector2D                              CallFunc_Divide_Vector2DFloat_ReturnValue;         // 0x0040(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector2D                              CallFunc_Subtract_Vector2DVector2D_ReturnValue;    // 0x0048(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector2D                              CallFunc_GetPosition_ReturnValue;                  // 0x0050(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_GetGameTimeInSeconds_ReturnValue;         // 0x0058(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Add_FloatFloat_ReturnValue;               // 0x005C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_GetGameTimeInSeconds_ReturnValue_1;       // 0x0060(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Not_PreBool_ReturnValue;                  // 0x0064(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(WIDGET_CrosshairCursor_C_UpdateBrackets) == 0x000008, "Wrong alignment on WIDGET_CrosshairCursor_C_UpdateBrackets");
static_assert(sizeof(WIDGET_CrosshairCursor_C_UpdateBrackets) == 0x000068, "Wrong size on WIDGET_CrosshairCursor_C_UpdateBrackets");
static_assert(offsetof(WIDGET_CrosshairCursor_C_UpdateBrackets, CursorScreenPosition) == 0x000000, "Member 'WIDGET_CrosshairCursor_C_UpdateBrackets::CursorScreenPosition' has a wrong offset!");
static_assert(offsetof(WIDGET_CrosshairCursor_C_UpdateBrackets, SelectionPosition) == 0x000008, "Member 'WIDGET_CrosshairCursor_C_UpdateBrackets::SelectionPosition' has a wrong offset!");
static_assert(offsetof(WIDGET_CrosshairCursor_C_UpdateBrackets, SelectionSize) == 0x000010, "Member 'WIDGET_CrosshairCursor_C_UpdateBrackets::SelectionSize' has a wrong offset!");
static_assert(offsetof(WIDGET_CrosshairCursor_C_UpdateBrackets, RequiresTransitionUpdate) == 0x000018, "Member 'WIDGET_CrosshairCursor_C_UpdateBrackets::RequiresTransitionUpdate' has a wrong offset!");
static_assert(offsetof(WIDGET_CrosshairCursor_C_UpdateBrackets, Result) == 0x000019, "Member 'WIDGET_CrosshairCursor_C_UpdateBrackets::Result' has a wrong offset!");
static_assert(offsetof(WIDGET_CrosshairCursor_C_UpdateBrackets, CallFunc_GetWindowPointFromScreenPoint_ReturnValue) == 0x00001C, "Member 'WIDGET_CrosshairCursor_C_UpdateBrackets::CallFunc_GetWindowPointFromScreenPoint_ReturnValue' has a wrong offset!");
static_assert(offsetof(WIDGET_CrosshairCursor_C_UpdateBrackets, CallFunc_GetWidgetOffsetFromWindowPoint_WidgetOffset) == 0x000024, "Member 'WIDGET_CrosshairCursor_C_UpdateBrackets::CallFunc_GetWidgetOffsetFromWindowPoint_WidgetOffset' has a wrong offset!");
static_assert(offsetof(WIDGET_CrosshairCursor_C_UpdateBrackets, CallFunc_GetWidgetOffsetFromWindowPoint_ReturnValue) == 0x00002C, "Member 'WIDGET_CrosshairCursor_C_UpdateBrackets::CallFunc_GetWidgetOffsetFromWindowPoint_ReturnValue' has a wrong offset!");
static_assert(offsetof(WIDGET_CrosshairCursor_C_UpdateBrackets, CallFunc_SlotAsCanvasSlot_ReturnValue) == 0x000030, "Member 'WIDGET_CrosshairCursor_C_UpdateBrackets::CallFunc_SlotAsCanvasSlot_ReturnValue' has a wrong offset!");
static_assert(offsetof(WIDGET_CrosshairCursor_C_UpdateBrackets, CallFunc_GetSize_ReturnValue) == 0x000038, "Member 'WIDGET_CrosshairCursor_C_UpdateBrackets::CallFunc_GetSize_ReturnValue' has a wrong offset!");
static_assert(offsetof(WIDGET_CrosshairCursor_C_UpdateBrackets, CallFunc_Divide_Vector2DFloat_ReturnValue) == 0x000040, "Member 'WIDGET_CrosshairCursor_C_UpdateBrackets::CallFunc_Divide_Vector2DFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(WIDGET_CrosshairCursor_C_UpdateBrackets, CallFunc_Subtract_Vector2DVector2D_ReturnValue) == 0x000048, "Member 'WIDGET_CrosshairCursor_C_UpdateBrackets::CallFunc_Subtract_Vector2DVector2D_ReturnValue' has a wrong offset!");
static_assert(offsetof(WIDGET_CrosshairCursor_C_UpdateBrackets, CallFunc_GetPosition_ReturnValue) == 0x000050, "Member 'WIDGET_CrosshairCursor_C_UpdateBrackets::CallFunc_GetPosition_ReturnValue' has a wrong offset!");
static_assert(offsetof(WIDGET_CrosshairCursor_C_UpdateBrackets, CallFunc_GetGameTimeInSeconds_ReturnValue) == 0x000058, "Member 'WIDGET_CrosshairCursor_C_UpdateBrackets::CallFunc_GetGameTimeInSeconds_ReturnValue' has a wrong offset!");
static_assert(offsetof(WIDGET_CrosshairCursor_C_UpdateBrackets, CallFunc_Add_FloatFloat_ReturnValue) == 0x00005C, "Member 'WIDGET_CrosshairCursor_C_UpdateBrackets::CallFunc_Add_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(WIDGET_CrosshairCursor_C_UpdateBrackets, CallFunc_GetGameTimeInSeconds_ReturnValue_1) == 0x000060, "Member 'WIDGET_CrosshairCursor_C_UpdateBrackets::CallFunc_GetGameTimeInSeconds_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(WIDGET_CrosshairCursor_C_UpdateBrackets, CallFunc_Not_PreBool_ReturnValue) == 0x000064, "Member 'WIDGET_CrosshairCursor_C_UpdateBrackets::CallFunc_Not_PreBool_ReturnValue' has a wrong offset!");

// Function WIDGET_CrosshairCursor.WIDGET_CrosshairCursor_C.DeactivateBrackets
// 0x0034 (0x0034 - 0x0000)
struct WIDGET_CrosshairCursor_C_DeactivateBrackets final
{
public:
	struct FVector2D                              CursorScreenPosition;                              // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector2D                              CallFunc_GetWindowPointFromScreenPoint_ReturnValue; // 0x0008(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector2D                              CallFunc_GetWidgetOffsetFromWindowPoint_WidgetOffset; // 0x0010(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_GetWidgetOffsetFromWindowPoint_ReturnValue; // 0x0018(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_19[0x3];                                       // 0x0019(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector2D                              CallFunc_Divide_Vector2DFloat_ReturnValue;         // 0x001C(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector2D                              CallFunc_Subtract_Vector2DVector2D_ReturnValue;    // 0x0024(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_GetGameTimeInSeconds_ReturnValue;         // 0x002C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Not_PreBool_ReturnValue;                  // 0x0030(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(WIDGET_CrosshairCursor_C_DeactivateBrackets) == 0x000004, "Wrong alignment on WIDGET_CrosshairCursor_C_DeactivateBrackets");
static_assert(sizeof(WIDGET_CrosshairCursor_C_DeactivateBrackets) == 0x000034, "Wrong size on WIDGET_CrosshairCursor_C_DeactivateBrackets");
static_assert(offsetof(WIDGET_CrosshairCursor_C_DeactivateBrackets, CursorScreenPosition) == 0x000000, "Member 'WIDGET_CrosshairCursor_C_DeactivateBrackets::CursorScreenPosition' has a wrong offset!");
static_assert(offsetof(WIDGET_CrosshairCursor_C_DeactivateBrackets, CallFunc_GetWindowPointFromScreenPoint_ReturnValue) == 0x000008, "Member 'WIDGET_CrosshairCursor_C_DeactivateBrackets::CallFunc_GetWindowPointFromScreenPoint_ReturnValue' has a wrong offset!");
static_assert(offsetof(WIDGET_CrosshairCursor_C_DeactivateBrackets, CallFunc_GetWidgetOffsetFromWindowPoint_WidgetOffset) == 0x000010, "Member 'WIDGET_CrosshairCursor_C_DeactivateBrackets::CallFunc_GetWidgetOffsetFromWindowPoint_WidgetOffset' has a wrong offset!");
static_assert(offsetof(WIDGET_CrosshairCursor_C_DeactivateBrackets, CallFunc_GetWidgetOffsetFromWindowPoint_ReturnValue) == 0x000018, "Member 'WIDGET_CrosshairCursor_C_DeactivateBrackets::CallFunc_GetWidgetOffsetFromWindowPoint_ReturnValue' has a wrong offset!");
static_assert(offsetof(WIDGET_CrosshairCursor_C_DeactivateBrackets, CallFunc_Divide_Vector2DFloat_ReturnValue) == 0x00001C, "Member 'WIDGET_CrosshairCursor_C_DeactivateBrackets::CallFunc_Divide_Vector2DFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(WIDGET_CrosshairCursor_C_DeactivateBrackets, CallFunc_Subtract_Vector2DVector2D_ReturnValue) == 0x000024, "Member 'WIDGET_CrosshairCursor_C_DeactivateBrackets::CallFunc_Subtract_Vector2DVector2D_ReturnValue' has a wrong offset!");
static_assert(offsetof(WIDGET_CrosshairCursor_C_DeactivateBrackets, CallFunc_GetGameTimeInSeconds_ReturnValue) == 0x00002C, "Member 'WIDGET_CrosshairCursor_C_DeactivateBrackets::CallFunc_GetGameTimeInSeconds_ReturnValue' has a wrong offset!");
static_assert(offsetof(WIDGET_CrosshairCursor_C_DeactivateBrackets, CallFunc_Not_PreBool_ReturnValue) == 0x000030, "Member 'WIDGET_CrosshairCursor_C_DeactivateBrackets::CallFunc_Not_PreBool_ReturnValue' has a wrong offset!");

// Function WIDGET_CrosshairCursor.WIDGET_CrosshairCursor_C.UpdateCrosshairSpread
// 0x0028 (0x0028 - 0x0000)
struct WIDGET_CrosshairCursor_C_UpdateCrosshairSpread final
{
public:
	float                                         CurrCrosshairSpreadRatio;                          // 0x0000(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UITEM_WeaponBase_C*                     WeaponItem;                                        // 0x0008(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UMaterialInstanceDynamic*               K2Node_DynamicCast_AsMaterial_Instance_Dynamic;    // 0x0010(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0018(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_19[0x3];                                       // 0x0019(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_GetCurrentSpreadAngleRatio_Result;        // 0x001C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_NotEqual_FloatFloat_ReturnValue;          // 0x0020(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(WIDGET_CrosshairCursor_C_UpdateCrosshairSpread) == 0x000008, "Wrong alignment on WIDGET_CrosshairCursor_C_UpdateCrosshairSpread");
static_assert(sizeof(WIDGET_CrosshairCursor_C_UpdateCrosshairSpread) == 0x000028, "Wrong size on WIDGET_CrosshairCursor_C_UpdateCrosshairSpread");
static_assert(offsetof(WIDGET_CrosshairCursor_C_UpdateCrosshairSpread, CurrCrosshairSpreadRatio) == 0x000000, "Member 'WIDGET_CrosshairCursor_C_UpdateCrosshairSpread::CurrCrosshairSpreadRatio' has a wrong offset!");
static_assert(offsetof(WIDGET_CrosshairCursor_C_UpdateCrosshairSpread, WeaponItem) == 0x000008, "Member 'WIDGET_CrosshairCursor_C_UpdateCrosshairSpread::WeaponItem' has a wrong offset!");
static_assert(offsetof(WIDGET_CrosshairCursor_C_UpdateCrosshairSpread, K2Node_DynamicCast_AsMaterial_Instance_Dynamic) == 0x000010, "Member 'WIDGET_CrosshairCursor_C_UpdateCrosshairSpread::K2Node_DynamicCast_AsMaterial_Instance_Dynamic' has a wrong offset!");
static_assert(offsetof(WIDGET_CrosshairCursor_C_UpdateCrosshairSpread, K2Node_DynamicCast_bSuccess) == 0x000018, "Member 'WIDGET_CrosshairCursor_C_UpdateCrosshairSpread::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(WIDGET_CrosshairCursor_C_UpdateCrosshairSpread, CallFunc_GetCurrentSpreadAngleRatio_Result) == 0x00001C, "Member 'WIDGET_CrosshairCursor_C_UpdateCrosshairSpread::CallFunc_GetCurrentSpreadAngleRatio_Result' has a wrong offset!");
static_assert(offsetof(WIDGET_CrosshairCursor_C_UpdateCrosshairSpread, CallFunc_NotEqual_FloatFloat_ReturnValue) == 0x000020, "Member 'WIDGET_CrosshairCursor_C_UpdateCrosshairSpread::CallFunc_NotEqual_FloatFloat_ReturnValue' has a wrong offset!");

// Function WIDGET_CrosshairCursor.WIDGET_CrosshairCursor_C.EVENT_OnDamageDealt
// 0x0040 (0x0040 - 0x0000)
struct WIDGET_CrosshairCursor_C_EVENT_OnDamageDealt final
{
public:
	class AActor*                                 OtherActor;                                        // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FAttribDamageInstance                  DamageInstance;                                    // 0x0008(0x0028)(BlueprintVisible, BlueprintReadOnly, Parm)
	class UObject*                                UserParams;                                        // 0x0030(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Greater_FloatFloat_ReturnValue;           // 0x0038(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_EqualEqual_ObjectObject_ReturnValue;      // 0x0039(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BooleanAND_ReturnValue;                   // 0x003A(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_3B[0x1];                                       // 0x003B(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_GetGameTimeInSeconds_ReturnValue;         // 0x003C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(WIDGET_CrosshairCursor_C_EVENT_OnDamageDealt) == 0x000008, "Wrong alignment on WIDGET_CrosshairCursor_C_EVENT_OnDamageDealt");
static_assert(sizeof(WIDGET_CrosshairCursor_C_EVENT_OnDamageDealt) == 0x000040, "Wrong size on WIDGET_CrosshairCursor_C_EVENT_OnDamageDealt");
static_assert(offsetof(WIDGET_CrosshairCursor_C_EVENT_OnDamageDealt, OtherActor) == 0x000000, "Member 'WIDGET_CrosshairCursor_C_EVENT_OnDamageDealt::OtherActor' has a wrong offset!");
static_assert(offsetof(WIDGET_CrosshairCursor_C_EVENT_OnDamageDealt, DamageInstance) == 0x000008, "Member 'WIDGET_CrosshairCursor_C_EVENT_OnDamageDealt::DamageInstance' has a wrong offset!");
static_assert(offsetof(WIDGET_CrosshairCursor_C_EVENT_OnDamageDealt, UserParams) == 0x000030, "Member 'WIDGET_CrosshairCursor_C_EVENT_OnDamageDealt::UserParams' has a wrong offset!");
static_assert(offsetof(WIDGET_CrosshairCursor_C_EVENT_OnDamageDealt, CallFunc_Greater_FloatFloat_ReturnValue) == 0x000038, "Member 'WIDGET_CrosshairCursor_C_EVENT_OnDamageDealt::CallFunc_Greater_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(WIDGET_CrosshairCursor_C_EVENT_OnDamageDealt, CallFunc_EqualEqual_ObjectObject_ReturnValue) == 0x000039, "Member 'WIDGET_CrosshairCursor_C_EVENT_OnDamageDealt::CallFunc_EqualEqual_ObjectObject_ReturnValue' has a wrong offset!");
static_assert(offsetof(WIDGET_CrosshairCursor_C_EVENT_OnDamageDealt, CallFunc_BooleanAND_ReturnValue) == 0x00003A, "Member 'WIDGET_CrosshairCursor_C_EVENT_OnDamageDealt::CallFunc_BooleanAND_ReturnValue' has a wrong offset!");
static_assert(offsetof(WIDGET_CrosshairCursor_C_EVENT_OnDamageDealt, CallFunc_GetGameTimeInSeconds_ReturnValue) == 0x00003C, "Member 'WIDGET_CrosshairCursor_C_EVENT_OnDamageDealt::CallFunc_GetGameTimeInSeconds_ReturnValue' has a wrong offset!");

// Function WIDGET_CrosshairCursor.WIDGET_CrosshairCursor_C.SetChannelProgress
// 0x0008 (0x0008 - 0x0000)
struct WIDGET_CrosshairCursor_C_SetChannelProgress final
{
public:
	float                                         Progress;                                          // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Greater_FloatFloat_ReturnValue;           // 0x0004(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0005(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(WIDGET_CrosshairCursor_C_SetChannelProgress) == 0x000004, "Wrong alignment on WIDGET_CrosshairCursor_C_SetChannelProgress");
static_assert(sizeof(WIDGET_CrosshairCursor_C_SetChannelProgress) == 0x000008, "Wrong size on WIDGET_CrosshairCursor_C_SetChannelProgress");
static_assert(offsetof(WIDGET_CrosshairCursor_C_SetChannelProgress, Progress) == 0x000000, "Member 'WIDGET_CrosshairCursor_C_SetChannelProgress::Progress' has a wrong offset!");
static_assert(offsetof(WIDGET_CrosshairCursor_C_SetChannelProgress, CallFunc_Greater_FloatFloat_ReturnValue) == 0x000004, "Member 'WIDGET_CrosshairCursor_C_SetChannelProgress::CallFunc_Greater_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(WIDGET_CrosshairCursor_C_SetChannelProgress, CallFunc_IsValid_ReturnValue) == 0x000005, "Member 'WIDGET_CrosshairCursor_C_SetChannelProgress::CallFunc_IsValid_ReturnValue' has a wrong offset!");

// Function WIDGET_CrosshairCursor.WIDGET_CrosshairCursor_C.UpdateCursorHitTransition
// 0x0024 (0x0024 - 0x0000)
struct WIDGET_CrosshairCursor_C_UpdateCursorHitTransition final
{
public:
	float                                         TransitionProgress;                                // 0x0000(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         ElapsedTransitionTime;                             // 0x0004(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_GreaterEqual_FloatFloat_ReturnValue;      // 0x0008(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_Ease_ReturnValue;                         // 0x000C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Divide_FloatFloat_ReturnValue;            // 0x0010(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_GetGameTimeInSeconds_ReturnValue;         // 0x0014(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_FMin_ReturnValue;                         // 0x0018(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Subtract_FloatFloat_ReturnValue;          // 0x001C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Greater_FloatFloat_ReturnValue;           // 0x0020(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(WIDGET_CrosshairCursor_C_UpdateCursorHitTransition) == 0x000004, "Wrong alignment on WIDGET_CrosshairCursor_C_UpdateCursorHitTransition");
static_assert(sizeof(WIDGET_CrosshairCursor_C_UpdateCursorHitTransition) == 0x000024, "Wrong size on WIDGET_CrosshairCursor_C_UpdateCursorHitTransition");
static_assert(offsetof(WIDGET_CrosshairCursor_C_UpdateCursorHitTransition, TransitionProgress) == 0x000000, "Member 'WIDGET_CrosshairCursor_C_UpdateCursorHitTransition::TransitionProgress' has a wrong offset!");
static_assert(offsetof(WIDGET_CrosshairCursor_C_UpdateCursorHitTransition, ElapsedTransitionTime) == 0x000004, "Member 'WIDGET_CrosshairCursor_C_UpdateCursorHitTransition::ElapsedTransitionTime' has a wrong offset!");
static_assert(offsetof(WIDGET_CrosshairCursor_C_UpdateCursorHitTransition, CallFunc_GreaterEqual_FloatFloat_ReturnValue) == 0x000008, "Member 'WIDGET_CrosshairCursor_C_UpdateCursorHitTransition::CallFunc_GreaterEqual_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(WIDGET_CrosshairCursor_C_UpdateCursorHitTransition, CallFunc_Ease_ReturnValue) == 0x00000C, "Member 'WIDGET_CrosshairCursor_C_UpdateCursorHitTransition::CallFunc_Ease_ReturnValue' has a wrong offset!");
static_assert(offsetof(WIDGET_CrosshairCursor_C_UpdateCursorHitTransition, CallFunc_Divide_FloatFloat_ReturnValue) == 0x000010, "Member 'WIDGET_CrosshairCursor_C_UpdateCursorHitTransition::CallFunc_Divide_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(WIDGET_CrosshairCursor_C_UpdateCursorHitTransition, CallFunc_GetGameTimeInSeconds_ReturnValue) == 0x000014, "Member 'WIDGET_CrosshairCursor_C_UpdateCursorHitTransition::CallFunc_GetGameTimeInSeconds_ReturnValue' has a wrong offset!");
static_assert(offsetof(WIDGET_CrosshairCursor_C_UpdateCursorHitTransition, CallFunc_FMin_ReturnValue) == 0x000018, "Member 'WIDGET_CrosshairCursor_C_UpdateCursorHitTransition::CallFunc_FMin_ReturnValue' has a wrong offset!");
static_assert(offsetof(WIDGET_CrosshairCursor_C_UpdateCursorHitTransition, CallFunc_Subtract_FloatFloat_ReturnValue) == 0x00001C, "Member 'WIDGET_CrosshairCursor_C_UpdateCursorHitTransition::CallFunc_Subtract_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(WIDGET_CrosshairCursor_C_UpdateCursorHitTransition, CallFunc_Greater_FloatFloat_ReturnValue) == 0x000020, "Member 'WIDGET_CrosshairCursor_C_UpdateCursorHitTransition::CallFunc_Greater_FloatFloat_ReturnValue' has a wrong offset!");

// Function WIDGET_CrosshairCursor.WIDGET_CrosshairCursor_C.GetCurrentSpreadAngleRatio
// 0x0070 (0x0070 - 0x0000)
struct WIDGET_CrosshairCursor_C_GetCurrentSpreadAngleRatio final
{
public:
	float                                         Result;                                            // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FGeometry                              CallFunc_GetCachedGeometry_ReturnValue;            // 0x0004(0x0038)(ConstParm, IsPlainOldData, NoDestructor)
	float                                         CallFunc_GetCurrentSpreadAngle_Result;             // 0x003C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector2D                              CallFunc_GetAbsoluteSize_ReturnValue;              // 0x0040(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector2D                              CallFunc_GetViewportSize_ReturnValue;              // 0x0048(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector2D_X;                          // 0x0050(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector2D_Y;                          // 0x0054(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector2D_X_1;                        // 0x0058(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector2D_Y_1;                        // 0x005C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Divide_FloatFloat_ReturnValue;            // 0x0060(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Multiply_FloatFloat_ReturnValue;          // 0x0064(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_SafeDivide_ReturnValue;                   // 0x0068(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_FMin_ReturnValue;                         // 0x006C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(WIDGET_CrosshairCursor_C_GetCurrentSpreadAngleRatio) == 0x000004, "Wrong alignment on WIDGET_CrosshairCursor_C_GetCurrentSpreadAngleRatio");
static_assert(sizeof(WIDGET_CrosshairCursor_C_GetCurrentSpreadAngleRatio) == 0x000070, "Wrong size on WIDGET_CrosshairCursor_C_GetCurrentSpreadAngleRatio");
static_assert(offsetof(WIDGET_CrosshairCursor_C_GetCurrentSpreadAngleRatio, Result) == 0x000000, "Member 'WIDGET_CrosshairCursor_C_GetCurrentSpreadAngleRatio::Result' has a wrong offset!");
static_assert(offsetof(WIDGET_CrosshairCursor_C_GetCurrentSpreadAngleRatio, CallFunc_GetCachedGeometry_ReturnValue) == 0x000004, "Member 'WIDGET_CrosshairCursor_C_GetCurrentSpreadAngleRatio::CallFunc_GetCachedGeometry_ReturnValue' has a wrong offset!");
static_assert(offsetof(WIDGET_CrosshairCursor_C_GetCurrentSpreadAngleRatio, CallFunc_GetCurrentSpreadAngle_Result) == 0x00003C, "Member 'WIDGET_CrosshairCursor_C_GetCurrentSpreadAngleRatio::CallFunc_GetCurrentSpreadAngle_Result' has a wrong offset!");
static_assert(offsetof(WIDGET_CrosshairCursor_C_GetCurrentSpreadAngleRatio, CallFunc_GetAbsoluteSize_ReturnValue) == 0x000040, "Member 'WIDGET_CrosshairCursor_C_GetCurrentSpreadAngleRatio::CallFunc_GetAbsoluteSize_ReturnValue' has a wrong offset!");
static_assert(offsetof(WIDGET_CrosshairCursor_C_GetCurrentSpreadAngleRatio, CallFunc_GetViewportSize_ReturnValue) == 0x000048, "Member 'WIDGET_CrosshairCursor_C_GetCurrentSpreadAngleRatio::CallFunc_GetViewportSize_ReturnValue' has a wrong offset!");
static_assert(offsetof(WIDGET_CrosshairCursor_C_GetCurrentSpreadAngleRatio, CallFunc_BreakVector2D_X) == 0x000050, "Member 'WIDGET_CrosshairCursor_C_GetCurrentSpreadAngleRatio::CallFunc_BreakVector2D_X' has a wrong offset!");
static_assert(offsetof(WIDGET_CrosshairCursor_C_GetCurrentSpreadAngleRatio, CallFunc_BreakVector2D_Y) == 0x000054, "Member 'WIDGET_CrosshairCursor_C_GetCurrentSpreadAngleRatio::CallFunc_BreakVector2D_Y' has a wrong offset!");
static_assert(offsetof(WIDGET_CrosshairCursor_C_GetCurrentSpreadAngleRatio, CallFunc_BreakVector2D_X_1) == 0x000058, "Member 'WIDGET_CrosshairCursor_C_GetCurrentSpreadAngleRatio::CallFunc_BreakVector2D_X_1' has a wrong offset!");
static_assert(offsetof(WIDGET_CrosshairCursor_C_GetCurrentSpreadAngleRatio, CallFunc_BreakVector2D_Y_1) == 0x00005C, "Member 'WIDGET_CrosshairCursor_C_GetCurrentSpreadAngleRatio::CallFunc_BreakVector2D_Y_1' has a wrong offset!");
static_assert(offsetof(WIDGET_CrosshairCursor_C_GetCurrentSpreadAngleRatio, CallFunc_Divide_FloatFloat_ReturnValue) == 0x000060, "Member 'WIDGET_CrosshairCursor_C_GetCurrentSpreadAngleRatio::CallFunc_Divide_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(WIDGET_CrosshairCursor_C_GetCurrentSpreadAngleRatio, CallFunc_Multiply_FloatFloat_ReturnValue) == 0x000064, "Member 'WIDGET_CrosshairCursor_C_GetCurrentSpreadAngleRatio::CallFunc_Multiply_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(WIDGET_CrosshairCursor_C_GetCurrentSpreadAngleRatio, CallFunc_SafeDivide_ReturnValue) == 0x000068, "Member 'WIDGET_CrosshairCursor_C_GetCurrentSpreadAngleRatio::CallFunc_SafeDivide_ReturnValue' has a wrong offset!");
static_assert(offsetof(WIDGET_CrosshairCursor_C_GetCurrentSpreadAngleRatio, CallFunc_FMin_ReturnValue) == 0x00006C, "Member 'WIDGET_CrosshairCursor_C_GetCurrentSpreadAngleRatio::CallFunc_FMin_ReturnValue' has a wrong offset!");

}

