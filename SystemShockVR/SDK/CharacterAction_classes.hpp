#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: CharacterAction

#include "Basic.hpp"

#include "ENUM_ActionPriority_structs.hpp"
#include "CoreUObject_classes.hpp"


namespace SDK
{

// BlueprintGeneratedClass CharacterAction.CharacterAction_C
// 0x0058 (0x0080 - 0x0028)
class UCharacterAction_C final : public UObject
{
public:
	class UCOMP_ActionManager_C*                  ActionManager;                                     // 0x0028(0x0008)(Edit, BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class APAWN_SystemShockCharacter_C*           Character;                                         // 0x0030(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, IsPlainOldData, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash)
	class UAnimMontage*                           Montage;                                           // 0x0038(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, SaveGame, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ENUM_ActionPriority                           Priority;                                          // 0x0040(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, SaveGame, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_41[0x7];                                       // 0x0041(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	FMulticastInlineDelegateProperty_             OnActionInterruptible;                             // 0x0048(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)
	FMulticastInlineDelegateProperty_             OnActionInterrupted;                               // 0x0058(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)
	FMulticastInlineDelegateProperty_             OnActionEnded;                                     // 0x0068(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)
	float                                         ElapsedTime;                                       // 0x0078(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, SaveGame, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         MontageDuration;                                   // 0x007C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

public:
	void OnActionInterruptible__DelegateSignature();
	void OnActionInterrupted__DelegateSignature();
	void OnActionEnded__DelegateSignature();
	void InitializeAction(class UCOMP_ActionManager_C* Manager, class APAWN_SystemShockCharacter_C* Owner);
	void IsInterruptibleAtPriority(ENUM_ActionPriority InterruptPriority, bool* Result);
	void PlayMontage(float PlayRate, float* MontageDuration_0);
	void ResumeMontage(float PlayRate, float* MontageDuration_0);
	void StopMontage(float BlendOutTime);
	void SetMontageWithPriority(class UAnimMontage* Montage_0, ENUM_ActionPriority Priority_0);
	void SetElapsedTime(float NewElapsedTime, bool* IsFinished);
	void GetElapsedPlayTime(float* Result);
	void GetProgress(float* Progress);
	void IsActive(bool* Result);
	void GetMontage(class UAnimMontage** Result);
	void GetPriority(ENUM_ActionPriority* Result);
	void SetPriority(ENUM_ActionPriority NewPriority);

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"CharacterAction_C">();
	}
	static class UCharacterAction_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<UCharacterAction_C>();
	}
};
static_assert(alignof(UCharacterAction_C) == 0x000008, "Wrong alignment on UCharacterAction_C");
static_assert(sizeof(UCharacterAction_C) == 0x000080, "Wrong size on UCharacterAction_C");
static_assert(offsetof(UCharacterAction_C, ActionManager) == 0x000028, "Member 'UCharacterAction_C::ActionManager' has a wrong offset!");
static_assert(offsetof(UCharacterAction_C, Character) == 0x000030, "Member 'UCharacterAction_C::Character' has a wrong offset!");
static_assert(offsetof(UCharacterAction_C, Montage) == 0x000038, "Member 'UCharacterAction_C::Montage' has a wrong offset!");
static_assert(offsetof(UCharacterAction_C, Priority) == 0x000040, "Member 'UCharacterAction_C::Priority' has a wrong offset!");
static_assert(offsetof(UCharacterAction_C, OnActionInterruptible) == 0x000048, "Member 'UCharacterAction_C::OnActionInterruptible' has a wrong offset!");
static_assert(offsetof(UCharacterAction_C, OnActionInterrupted) == 0x000058, "Member 'UCharacterAction_C::OnActionInterrupted' has a wrong offset!");
static_assert(offsetof(UCharacterAction_C, OnActionEnded) == 0x000068, "Member 'UCharacterAction_C::OnActionEnded' has a wrong offset!");
static_assert(offsetof(UCharacterAction_C, ElapsedTime) == 0x000078, "Member 'UCharacterAction_C::ElapsedTime' has a wrong offset!");
static_assert(offsetof(UCharacterAction_C, MontageDuration) == 0x00007C, "Member 'UCharacterAction_C::MontageDuration' has a wrong offset!");

}

