#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_MusicLayer

#include "Basic.hpp"

#include "BP_MusicLayer_classes.hpp"
#include "BP_MusicLayer_parameters.hpp"


namespace SDK
{

// Function BP_MusicLayer.BP_MusicLayer_C.GetRandomSegment
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// class USoundWave*                       MusicSegment                                           (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBP_MusicLayer_C::GetRandomSegment(class USoundWave** MusicSegment)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_MusicLayer_C", "GetRandomSegment");

	Params::BP_MusicLayer_C_GetRandomSegment Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (MusicSegment != nullptr)
		*MusicSegment = Parms.MusicSegment;
}


// Function BP_MusicLayer.BP_MusicLayer_C.GetShouldRetrigger
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// bool                                    bShouldRetrigger                                       (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void UBP_MusicLayer_C::GetShouldRetrigger(bool* bShouldRetrigger)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_MusicLayer_C", "GetShouldRetrigger");

	Params::BP_MusicLayer_C_GetShouldRetrigger Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (bShouldRetrigger != nullptr)
		*bShouldRetrigger = Parms.bShouldRetrigger;
}


// Function BP_MusicLayer.BP_MusicLayer_C.CalculateLayerVolume
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// float                                   LayerVolume                                            (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBP_MusicLayer_C::CalculateLayerVolume(float* LayerVolume)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_MusicLayer_C", "CalculateLayerVolume");

	Params::BP_MusicLayer_C_CalculateLayerVolume Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (LayerVolume != nullptr)
		*LayerVolume = Parms.LayerVolume;
}


// Function BP_MusicLayer.BP_MusicLayer_C.ApplyVolumeMultiplier
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// class FString                           MultiplierKey                                          (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, HasGetValueTypeHash)
// float                                   Value                                                  (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBP_MusicLayer_C::ApplyVolumeMultiplier(const class FString& MultiplierKey, float Value)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_MusicLayer_C", "ApplyVolumeMultiplier");

	Params::BP_MusicLayer_C_ApplyVolumeMultiplier Parms{};

	Parms.MultiplierKey = std::move(MultiplierKey);
	Parms.Value = Value;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_MusicLayer.BP_MusicLayer_C.UpdateLayerVolume
// (Public, BlueprintCallable, BlueprintEvent)

void UBP_MusicLayer_C::UpdateLayerVolume()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_MusicLayer_C", "UpdateLayerVolume");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_MusicLayer.BP_MusicLayer_C.SpawnSegmentAudioComponent
// (Public, BlueprintCallable, BlueprintEvent)

void UBP_MusicLayer_C::SpawnSegmentAudioComponent()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_MusicLayer_C", "SpawnSegmentAudioComponent");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_MusicLayer.BP_MusicLayer_C.RemoveInactiveAudioComponents
// (Public, BlueprintCallable, BlueprintEvent)

void UBP_MusicLayer_C::RemoveInactiveAudioComponents()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_MusicLayer_C", "RemoveInactiveAudioComponents");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_MusicLayer.BP_MusicLayer_C.PrintCurrentAudioComponents
// (Public, BlueprintCallable, BlueprintEvent)

void UBP_MusicLayer_C::PrintCurrentAudioComponents()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_MusicLayer_C", "PrintCurrentAudioComponents");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_MusicLayer.BP_MusicLayer_C.StopAll
// (Public, BlueprintCallable, BlueprintEvent)

void UBP_MusicLayer_C::StopAll()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_MusicLayer_C", "StopAll");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_MusicLayer.BP_MusicLayer_C.GetCanPlay
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// bool                                    Return                                                 (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void UBP_MusicLayer_C::GetCanPlay(bool* Return)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_MusicLayer_C", "GetCanPlay");

	Params::BP_MusicLayer_C_GetCanPlay Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (Return != nullptr)
		*Return = Parms.Return;
}


// Function BP_MusicLayer.BP_MusicLayer_C.GetActiveSegmentCount
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// int32                                   Result                                                 (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBP_MusicLayer_C::GetActiveSegmentCount(int32* Result)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_MusicLayer_C", "GetActiveSegmentCount");

	Params::BP_MusicLayer_C_GetActiveSegmentCount Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (Result != nullptr)
		*Result = Parms.Result;
}


// Function BP_MusicLayer.BP_MusicLayer_C.GetNextPlayableMeasure
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// int32                                   Measure                                                (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBP_MusicLayer_C::GetNextPlayableMeasure(int32* Measure)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_MusicLayer_C", "GetNextPlayableMeasure");

	Params::BP_MusicLayer_C_GetNextPlayableMeasure Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (Measure != nullptr)
		*Measure = Parms.Measure;
}


// Function BP_MusicLayer.BP_MusicLayer_C.SetNextPlayableMeasure
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// int32                                   Measure                                                (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBP_MusicLayer_C::SetNextPlayableMeasure(int32 Measure)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_MusicLayer_C", "SetNextPlayableMeasure");

	Params::BP_MusicLayer_C_SetNextPlayableMeasure Parms{};

	Parms.Measure = Measure;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_MusicLayer.BP_MusicLayer_C.InitializeLayer
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// class UBP_MusicLayer_C*                 Layer                                                  (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBP_MusicLayer_C::InitializeLayer(class UBP_MusicLayer_C** Layer)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_MusicLayer_C", "InitializeLayer");

	Params::BP_MusicLayer_C_InitializeLayer Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (Layer != nullptr)
		*Layer = Parms.Layer;
}


// Function BP_MusicLayer.BP_MusicLayer_C.ScheduleNextSegment
// (Private, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// int32                                   ScheduledMeasure                                       (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBP_MusicLayer_C::ScheduleNextSegment(int32* ScheduledMeasure)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_MusicLayer_C", "ScheduleNextSegment");

	Params::BP_MusicLayer_C_ScheduleNextSegment Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (ScheduledMeasure != nullptr)
		*ScheduledMeasure = Parms.ScheduledMeasure;
}


// Function BP_MusicLayer.BP_MusicLayer_C.EVENT_OnMeasure
// (Private, BlueprintCallable, BlueprintEvent)
// Parameters:
// int32                                   NumBars                                                (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// float                                   CurrentExploreMusicIntensity                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// float                                   CurrentCombatMusicIntensity                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBP_MusicLayer_C::EVENT_OnMeasure(int32 NumBars, float CurrentExploreMusicIntensity, float CurrentCombatMusicIntensity)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_MusicLayer_C", "EVENT_OnMeasure");

	Params::BP_MusicLayer_C_EVENT_OnMeasure Parms{};

	Parms.NumBars = NumBars;
	Parms.CurrentExploreMusicIntensity = CurrentExploreMusicIntensity;
	Parms.CurrentCombatMusicIntensity = CurrentCombatMusicIntensity;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_MusicLayer.BP_MusicLayer_C.CalcShouldPlaySegment
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// float                                   CurrentExploreMusicIntensity                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// float                                   CurrentCombatMusicIntensity                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    bShouldPlay                                            (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void UBP_MusicLayer_C::CalcShouldPlaySegment(float CurrentExploreMusicIntensity, float CurrentCombatMusicIntensity, bool* bShouldPlay)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_MusicLayer_C", "CalcShouldPlaySegment");

	Params::BP_MusicLayer_C_CalcShouldPlaySegment Parms{};

	Parms.CurrentExploreMusicIntensity = CurrentExploreMusicIntensity;
	Parms.CurrentCombatMusicIntensity = CurrentCombatMusicIntensity;

	UObject::ProcessEvent(Func, &Parms);

	if (bShouldPlay != nullptr)
		*bShouldPlay = Parms.bShouldPlay;
}

}

