#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: ITEM_UpgradeBase

#include "Basic.hpp"

#include "ITEM_Base_classes.hpp"
#include "ENUM_UpgradeResult_structs.hpp"


namespace SDK
{

// BlueprintGeneratedClass ITEM_UpgradeBase.ITEM_UpgradeBase_C
// 0x00B0 (0x01B0 - 0x0100)
class UITEM_UpgradeBase_C : public UITEM_Base_C
{
public:
	class FText                                   SuperiorMessage;                                   // 0x0100(0x0018)(Edit, BlueprintVisible)
	class FText                                   DuplicateMessage;                                  // 0x0118(0x0018)(Edit, BlueprintVisible)
	class FText                                   InferiorMessage;                                   // 0x0130(0x0018)(Edit, BlueprintVisible)
	int32                                         CachedVersionNumber;                               // 0x0148(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_14C[0x4];                                      // 0x014C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TSoftClassPtr<class UClass>                   ItemClassToUpgrade;                                // 0x0150(0x0028)(Edit, BlueprintVisible, HasGetValueTypeHash)
	class FText                                   VersionChanges;                                    // 0x0178(0x0018)(Edit, BlueprintVisible)
	TArray<class UClass*>                         UpgradeModules;                                    // 0x0190(0x0010)(Edit, BlueprintVisible)
	TArray<class UClass*>                         InstalledModules;                                  // 0x01A0(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance, SaveGame)

public:
	void ApplyUpgrade(class UITEM_UpgradeBase_C* UpgradeItem, class UClass* UpgradeClass, ENUM_UpgradeResult* UpgradeResult);
	void GetVersionNumber(int32* Version);
	void OnUpgradedItem(class UITEM_UpgradeBase_C* PreviousItem, bool* Result);
	void GetVersionHistory(TArray<class FText>* VersionHistory);
	void GetUpgradeType(class UClass* UpgradeClass, ENUM_UpgradeResult* Result);
	void IsUpgradeModule(class UClass* UpgradeClass, bool* Result);
	void GetBestModuleIndexForUpgrade(class UClass* UpgradeClass, int32* Index_0);
	void GetInstalledModuleAtIndex(int32 ModuleIndex, class UClass** UpgradeClass);

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"ITEM_UpgradeBase_C">();
	}
	static class UITEM_UpgradeBase_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<UITEM_UpgradeBase_C>();
	}
};
static_assert(alignof(UITEM_UpgradeBase_C) == 0x000008, "Wrong alignment on UITEM_UpgradeBase_C");
static_assert(sizeof(UITEM_UpgradeBase_C) == 0x0001B0, "Wrong size on UITEM_UpgradeBase_C");
static_assert(offsetof(UITEM_UpgradeBase_C, SuperiorMessage) == 0x000100, "Member 'UITEM_UpgradeBase_C::SuperiorMessage' has a wrong offset!");
static_assert(offsetof(UITEM_UpgradeBase_C, DuplicateMessage) == 0x000118, "Member 'UITEM_UpgradeBase_C::DuplicateMessage' has a wrong offset!");
static_assert(offsetof(UITEM_UpgradeBase_C, InferiorMessage) == 0x000130, "Member 'UITEM_UpgradeBase_C::InferiorMessage' has a wrong offset!");
static_assert(offsetof(UITEM_UpgradeBase_C, CachedVersionNumber) == 0x000148, "Member 'UITEM_UpgradeBase_C::CachedVersionNumber' has a wrong offset!");
static_assert(offsetof(UITEM_UpgradeBase_C, ItemClassToUpgrade) == 0x000150, "Member 'UITEM_UpgradeBase_C::ItemClassToUpgrade' has a wrong offset!");
static_assert(offsetof(UITEM_UpgradeBase_C, VersionChanges) == 0x000178, "Member 'UITEM_UpgradeBase_C::VersionChanges' has a wrong offset!");
static_assert(offsetof(UITEM_UpgradeBase_C, UpgradeModules) == 0x000190, "Member 'UITEM_UpgradeBase_C::UpgradeModules' has a wrong offset!");
static_assert(offsetof(UITEM_UpgradeBase_C, InstalledModules) == 0x0001A0, "Member 'UITEM_UpgradeBase_C::InstalledModules' has a wrong offset!");

}

