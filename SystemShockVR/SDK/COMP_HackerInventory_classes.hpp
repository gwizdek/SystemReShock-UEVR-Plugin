#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: COMP_HackerInventory

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "AttributeSystem_structs.hpp"
#include "COMP_Inventory_classes.hpp"


namespace SDK
{

// BlueprintGeneratedClass COMP_HackerInventory.COMP_HackerInventory_C
// 0x0228 (0x0330 - 0x0108)
class UCOMP_HackerInventory_C final : public UCOMP_Inventory_C
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x0108(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	class UAnimMontage*                           QueuedHeroicMontage;                               // 0x0110(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FAttribModApplyData                    HeroicMoveMod;                                     // 0x0118(0x00A0)(Edit, BlueprintVisible, DisableEditOnInstance)
	struct FAttribModApplyData                    HeroicDOFMod;                                      // 0x01B8(0x00A0)(Edit, BlueprintVisible, DisableEditOnInstance)
	class FName                                   HeroicModCategory;                                 // 0x0258(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FString                                 GrantHeroicItemMessage;                            // 0x0260(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, HasGetValueTypeHash)
	TSet<class UClass*>                           DiscoveredHeroicItems;                             // 0x0270(0x0050)(Edit, BlueprintVisible, DisableEditOnInstance, SaveGame)
	bool                                          EquipmentDisabled;                                 // 0x02C0(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, SaveGame, IsPlainOldData, NoDestructor)
	uint8                                         Pad_2C1[0x3];                                      // 0x02C1(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         GrantHeroicItemSlotIndex;                          // 0x02C4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UInventoryBag_C*                        GrantHeroicItemBag;                                // 0x02C8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          IsWeaponObstructed;                                // 0x02D0(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          IsScannerObstructed;                               // 0x02D1(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          IsObstructedByEnemy;                               // 0x02D2(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_2D3[0x1];                                      // 0x02D3(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         LastObstructionDistance;                           // 0x02D4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         WeaponObstructionRadius;                           // 0x02D8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_2DC[0x4];                                      // 0x02DC(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UITEM_Base_C*                           OverrideHandheldItem;                              // 0x02E0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, SaveGame, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UITEM_WeaponBase_C*                     CurrentEquippedWeapon;                             // 0x02E8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, SaveGame, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	FMulticastInlineDelegateProperty_             OnEquippedWeaponChanged;                           // 0x02F0(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)
	FMulticastInlineDelegateProperty_             OnWeaponDrawn;                                     // 0x0300(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)
	FMulticastInlineDelegateProperty_             OnWeaponHolstered;                                 // 0x0310(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)
	class UITEM_WeaponBase_C*                     PreviousEquippedWeapon;                            // 0x0320(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UITEM_WeaponBase_C*                     WaitingToHolsterWeapon;                            // 0x0328(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, SaveGame, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

public:
	void OnWeaponHolstered__DelegateSignature(class UITEM_WeaponBase_C* Weapon);
	void OnWeaponDrawn__DelegateSignature(class UITEM_WeaponBase_C* Weapon);
	void OnEquippedWeaponChanged__DelegateSignature(class UITEM_WeaponBase_C* EquippedWeapon);
	void ExecuteUbergraph_COMP_HackerInventory(int32 EntryPoint);
	void ReceiveTick(float DeltaSeconds);
	void HasDiscoveredHeroicItem(class UClass* HeroicItemClass, bool* Result);
	void HasDiscoveredSuperiorHeroicItem(class UClass* HeroicItemClass, bool* Result);
	void CanPlayHeroicAction(TSoftObjectPtr<class UAnimMontage> Montage, bool* Result);
	void IsHeroicActionQueued(bool* Result);
	void HasQueuedCinematicHeroicAction(bool* Result);
	void GetOverrideHandheldDisplayProperties(class USkeletalMesh** SkeletalMesh, class UClass** AnimInstanceClass, class UMaterialInterface** OverrideMaterial);
	void GrantHeroicItem(class UITEM_Base_C* HeroicItem, TSoftObjectPtr<class UAnimMontage> HeroicMontage, class UInventoryBag_C* PreferredBag, int32 PreferredSlotIndex);
	void TryAddHeroicItemToInventory(bool* Result);
	void PostInitializeEquipmentState();
	void MoveGrabBagItemsToInventory();
	void ReceiveAnimationMessage(const class FString& Message, bool* Result);
	void EVENT_PlayHeroicAction();
	void SetOverrideItemBeingHeld(class UITEM_Base_C* OverrideItem, class UCharacterAction_C* Action);
	void GetHackerOwner(class APAWN_Hacker_Simple_C** Hacker);
	void GetEquippedWeapon(class UITEM_WeaponBase_C** Weapon);
	void EVENT_OnOverrideHandheldMontageEnded();
	void SetCurrentEquippedWeapon(class UITEM_WeaponBase_C* Weapon);
	void HandlePrimaryAttack(bool InputState);
	void ToggleWeaponEquipState();
	void CycleWeaponMode(bool Previous);
	void TryReloadWeapon();
	void GetEquippedWeaponHotbarSlot(class UCOMP_Hotbar_C** HotbarComponent, int32* HotbarSlotIndex);
	void CycleEquippedWeaponFromHotbarSlot(class UCOMP_Hotbar_C* HotbarComponent, int32 HotbarSlotIndex, bool Previous, class UClass* IgnoreClass, bool* Success);
	void CycleEquippedWeapon(bool Previous, class UClass* IgnoreClass, bool* Success);
	void IsEquipmentDisabled(bool* Result);
	void UpdateItemActivationState(class UITEM_Base_C* Item);
	void SetEquipmentDisabled(bool Disable);
	void UpdateEquippedWeaponState();
	void IsOverrideHandheldBeingUsed(class UITEM_Base_C* Item, bool* Result);
	void DeactivateCurrentItem();
	void UpdateItemActivationStates();
	void HasReachedEquipCapacity(class UInventoryBag_C* Bag, class UITEM_Base_C* Item, bool* Result);
	void GetFirstEquippedItem(class UInventoryBag_C* Bag, class UITEM_Base_C** Item);
	void InitializeBags();
	void TickCurrentEquippedWeapon(float DeltaTime);
	void GetHeroicItemClass(class UClass* ItemClass, class UClass** HeroicItemClass);
	void OnWeaponDrawStarted(class UITEM_WeaponBase_C* Weapon);
	void OnWeaponHolsterStarted(class UITEM_WeaponBase_C* Weapon);
	void OnWeaponHolsterFinished(class UITEM_WeaponBase_C* Weapon);
	void UpdateWeaponObstruction();
	void GetCurrentObstructionDistance(float* Distance);
	void UpdateWeaponObstructionDistance();
	void TraceWeaponObstruction();
	void ClearWeaponObstruction();
	void VaporizeJunkItems();
	void SortMainInventory();

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"COMP_HackerInventory_C">();
	}
	static class UCOMP_HackerInventory_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<UCOMP_HackerInventory_C>();
	}
};
static_assert(alignof(UCOMP_HackerInventory_C) == 0x000008, "Wrong alignment on UCOMP_HackerInventory_C");
static_assert(sizeof(UCOMP_HackerInventory_C) == 0x000330, "Wrong size on UCOMP_HackerInventory_C");
static_assert(offsetof(UCOMP_HackerInventory_C, UberGraphFrame) == 0x000108, "Member 'UCOMP_HackerInventory_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(UCOMP_HackerInventory_C, QueuedHeroicMontage) == 0x000110, "Member 'UCOMP_HackerInventory_C::QueuedHeroicMontage' has a wrong offset!");
static_assert(offsetof(UCOMP_HackerInventory_C, HeroicMoveMod) == 0x000118, "Member 'UCOMP_HackerInventory_C::HeroicMoveMod' has a wrong offset!");
static_assert(offsetof(UCOMP_HackerInventory_C, HeroicDOFMod) == 0x0001B8, "Member 'UCOMP_HackerInventory_C::HeroicDOFMod' has a wrong offset!");
static_assert(offsetof(UCOMP_HackerInventory_C, HeroicModCategory) == 0x000258, "Member 'UCOMP_HackerInventory_C::HeroicModCategory' has a wrong offset!");
static_assert(offsetof(UCOMP_HackerInventory_C, GrantHeroicItemMessage) == 0x000260, "Member 'UCOMP_HackerInventory_C::GrantHeroicItemMessage' has a wrong offset!");
static_assert(offsetof(UCOMP_HackerInventory_C, DiscoveredHeroicItems) == 0x000270, "Member 'UCOMP_HackerInventory_C::DiscoveredHeroicItems' has a wrong offset!");
static_assert(offsetof(UCOMP_HackerInventory_C, EquipmentDisabled) == 0x0002C0, "Member 'UCOMP_HackerInventory_C::EquipmentDisabled' has a wrong offset!");
static_assert(offsetof(UCOMP_HackerInventory_C, GrantHeroicItemSlotIndex) == 0x0002C4, "Member 'UCOMP_HackerInventory_C::GrantHeroicItemSlotIndex' has a wrong offset!");
static_assert(offsetof(UCOMP_HackerInventory_C, GrantHeroicItemBag) == 0x0002C8, "Member 'UCOMP_HackerInventory_C::GrantHeroicItemBag' has a wrong offset!");
static_assert(offsetof(UCOMP_HackerInventory_C, IsWeaponObstructed) == 0x0002D0, "Member 'UCOMP_HackerInventory_C::IsWeaponObstructed' has a wrong offset!");
static_assert(offsetof(UCOMP_HackerInventory_C, IsScannerObstructed) == 0x0002D1, "Member 'UCOMP_HackerInventory_C::IsScannerObstructed' has a wrong offset!");
static_assert(offsetof(UCOMP_HackerInventory_C, IsObstructedByEnemy) == 0x0002D2, "Member 'UCOMP_HackerInventory_C::IsObstructedByEnemy' has a wrong offset!");
static_assert(offsetof(UCOMP_HackerInventory_C, LastObstructionDistance) == 0x0002D4, "Member 'UCOMP_HackerInventory_C::LastObstructionDistance' has a wrong offset!");
static_assert(offsetof(UCOMP_HackerInventory_C, WeaponObstructionRadius) == 0x0002D8, "Member 'UCOMP_HackerInventory_C::WeaponObstructionRadius' has a wrong offset!");
static_assert(offsetof(UCOMP_HackerInventory_C, OverrideHandheldItem) == 0x0002E0, "Member 'UCOMP_HackerInventory_C::OverrideHandheldItem' has a wrong offset!");
static_assert(offsetof(UCOMP_HackerInventory_C, CurrentEquippedWeapon) == 0x0002E8, "Member 'UCOMP_HackerInventory_C::CurrentEquippedWeapon' has a wrong offset!");
static_assert(offsetof(UCOMP_HackerInventory_C, OnEquippedWeaponChanged) == 0x0002F0, "Member 'UCOMP_HackerInventory_C::OnEquippedWeaponChanged' has a wrong offset!");
static_assert(offsetof(UCOMP_HackerInventory_C, OnWeaponDrawn) == 0x000300, "Member 'UCOMP_HackerInventory_C::OnWeaponDrawn' has a wrong offset!");
static_assert(offsetof(UCOMP_HackerInventory_C, OnWeaponHolstered) == 0x000310, "Member 'UCOMP_HackerInventory_C::OnWeaponHolstered' has a wrong offset!");
static_assert(offsetof(UCOMP_HackerInventory_C, PreviousEquippedWeapon) == 0x000320, "Member 'UCOMP_HackerInventory_C::PreviousEquippedWeapon' has a wrong offset!");
static_assert(offsetof(UCOMP_HackerInventory_C, WaitingToHolsterWeapon) == 0x000328, "Member 'UCOMP_HackerInventory_C::WaitingToHolsterWeapon' has a wrong offset!");

}

