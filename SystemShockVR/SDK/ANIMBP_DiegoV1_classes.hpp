#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: ANIMBP_DiegoV1

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "Engine_classes.hpp"
#include "AnimGraphRuntime_structs.hpp"
#include "CoreUObject_structs.hpp"
#include "ENUM_DeathBlowType_structs.hpp"
#include "ENUM_Emotions_structs.hpp"


namespace SDK
{

// AnimBlueprintGeneratedClass ANIMBP_DiegoV1.ANIMBP_DiegoV1_C
// 0x0DC0 (0x1080 - 0x02C0)
class UANIMBP_DiegoV1_C final : public UAnimInstance
{
public:
	uint8                                         Pad_2B8[0x8];                                      // 0x02B8(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x02C0(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	struct FAnimNode_Root                         AnimGraphNode_Root;                                // 0x02C8(0x0030)()
	struct FAnimNode_BlendSpacePlayer             AnimGraphNode_BlendSpacePlayer_2;                  // 0x02F8(0x00E8)()
	struct FAnimNode_BlendSpacePlayer             AnimGraphNode_BlendSpacePlayer_1;                  // 0x03E0(0x00E8)()
	struct FAnimNode_BlendListByBool              AnimGraphNode_BlendListByBool_4;                   // 0x04C8(0x00A0)()
	struct FAnimNode_SequencePlayer               AnimGraphNode_SequencePlayer_2;                    // 0x0568(0x0080)()
	struct FAnimNode_SequencePlayer               AnimGraphNode_SequencePlayer_1;                    // 0x05E8(0x0080)()
	struct FAnimNode_BlendListByBool              AnimGraphNode_BlendListByBool_3;                   // 0x0668(0x00A0)()
	struct FAnimNode_BlendListByBool              AnimGraphNode_BlendListByBool_2;                   // 0x0708(0x00A0)()
	struct FAnimNode_BlendSpacePlayer             AnimGraphNode_BlendSpacePlayer;                    // 0x07A8(0x00E8)()
	struct FAnimNode_SaveCachedPose               AnimGraphNode_SaveCachedPose_1;                    // 0x0890(0x0158)()
	struct FAnimNode_BlendListByBool              AnimGraphNode_BlendListByBool_1;                   // 0x09E8(0x00A0)()
	struct FAnimNode_LayeredBoneBlend             AnimGraphNode_LayeredBoneBlend_1;                  // 0x0A88(0x00C0)()
	struct FAnimNode_Slot                         AnimGraphNode_Slot_2;                              // 0x0B48(0x0048)()
	struct FAnimNode_UseCachedPose                AnimGraphNode_UseCachedPose_3;                     // 0x0B90(0x0028)()
	struct FAnimNode_UseCachedPose                AnimGraphNode_UseCachedPose_2;                     // 0x0BB8(0x0028)()
	struct FAnimNode_Slot                         AnimGraphNode_Slot_1;                              // 0x0BE0(0x0048)()
	struct FAnimNode_Slot                         AnimGraphNode_Slot;                                // 0x0C28(0x0048)()
	struct FAnimNode_LayeredBoneBlend             AnimGraphNode_LayeredBoneBlend;                    // 0x0C70(0x00C0)()
	struct FAnimNode_SaveCachedPose               AnimGraphNode_SaveCachedPose;                      // 0x0D30(0x0158)()
	struct FAnimNode_UseCachedPose                AnimGraphNode_UseCachedPose_1;                     // 0x0E88(0x0028)()
	struct FAnimNode_UseCachedPose                AnimGraphNode_UseCachedPose;                       // 0x0EB0(0x0028)()
	struct FAnimNode_BlendListByBool              AnimGraphNode_BlendListByBool;                     // 0x0ED8(0x00A0)()
	struct FAnimNode_SequencePlayer               AnimGraphNode_SequencePlayer;                      // 0x0F78(0x0080)()
	struct FVector                                __CustomProperty_ImpactLocation_D383E0E7433A1F5C57017987EB862D45; // 0x0FF8(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          __CustomProperty_weapon_D383E0E7433A1F5C57017987EB862D45; // 0x1004(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_1005[0x3];                                     // 0x1005(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         __CustomProperty_MovementDynamics_D383E0E7433A1F5C57017987EB862D45; // 0x1008(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                __CustomProperty_MovementVector_D383E0E7433A1F5C57017987EB862D45; // 0x100C(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          __CustomProperty_rifle_D383E0E7433A1F5C57017987EB862D45; // 0x1018(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_1019[0x3];                                     // 0x1019(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                __CustomProperty_LookAtLocation_D383E0E7433A1F5C57017987EB862D45; // 0x101C(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         __CustomProperty_LookAtAlpha_D383E0E7433A1F5C57017987EB862D45; // 0x1028(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         LookAtAlpha;                                       // 0x102C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                LookAtLocation;                                    // 0x1030(0x000C)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                Velocity;                                          // 0x103C(0x000C)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UAnimSequenceBase*                      Idle_Override;                                     // 0x1048(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UAnimSequenceBase*                      Idle_Normal;                                       // 0x1050(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          UseIdleOverride;                                   // 0x1058(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          IsSprinting;                                       // 0x1059(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          IsMoving;                                          // 0x105A(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_105B[0x1];                                     // 0x105B(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         MovementAngle;                                     // 0x105C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         MovementSpeed;                                     // 0x1060(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          IsAlive;                                           // 0x1064(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_1065[0x3];                                     // 0x1065(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class UAnimSequence*                          StunnedAnimSequence;                               // 0x1068(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          UseStunnedSequence;                                // 0x1070(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          ProtectHead;                                       // 0x1071(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)

public:
	void ExecuteUbergraph_ANIMBP_DiegoV1(int32 EntryPoint);
	void AnimNotify_DisableSword();
	void AnimNotify_EnableSword();
	void SetUseArmProtection(bool Enabled, bool* Results);
	void AnimGraph(struct FPoseLink* AnimGraph_0);
	void SetSprintEnabled(bool SprintEnabled, bool* Result);
	void SetTravelMode(bool TravelModeOn, bool* Result);
	void GetAimTarget(class UOBJ_EnemyTarget_C** Target);
	void SetAimTarget(class UOBJ_EnemyTarget_C* Target, bool* Result);
	void GetIdleOverrideSequence(class UAnimSequenceBase** IdleOverride);
	void SetIdleOverrideSequence(class UAnimSequenceBase* IdleOverride, bool* Result);
	void SetRelativeAimAngleOffset(float YawOffset, float PitchOffset, float Alpha, bool* Result);
	void GetRotation(struct FRotator* AnimRotationPerSecond, float* AnimRotationAlpha);
	void GetStance(ENUM_Emotions* Stance);
	void SetStance(ENUM_Emotions Stance, bool* Result);
	void SetCatatonic(bool State, bool* Result);
	void SetStandingTurn(float SignedAngleToTarget, bool IsStanding, bool* Result);
	void ReceiveDeathBlow(ENUM_DeathBlowType BodyPart, bool* Result);
	void ReceiveImpact(const struct FVector& Impulse, const struct FVector& ImpactLocation, const struct FVector& ImpactNormal, class FName BoneName, const class FString& DamageType, float DamageAmount, float FlinchTime, bool* Result);
	void SetIsAlive(bool IsAlive_0, bool* Result);
	void SetMovementParameters(const struct FVector& Velocity_0, const struct FRotator& Rotation, const struct FRotator& DesiredRotation, bool* Result);
	void SetLookAtAlpha(float Alpha, bool* Result);
	void SetLookAtLocation(const struct FVector& Location, bool* Result);
	void SetStunnedSequence(class UAnimSequence* StunnedSequence, bool* Result);
	void IsStunned(bool* Result);
	void SetVoiceAmplitude(float VoiceAmplitude, bool* Result);

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"ANIMBP_DiegoV1_C">();
	}
	static class UANIMBP_DiegoV1_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<UANIMBP_DiegoV1_C>();
	}
};
static_assert(alignof(UANIMBP_DiegoV1_C) == 0x000010, "Wrong alignment on UANIMBP_DiegoV1_C");
static_assert(sizeof(UANIMBP_DiegoV1_C) == 0x001080, "Wrong size on UANIMBP_DiegoV1_C");
static_assert(offsetof(UANIMBP_DiegoV1_C, UberGraphFrame) == 0x0002C0, "Member 'UANIMBP_DiegoV1_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(UANIMBP_DiegoV1_C, AnimGraphNode_Root) == 0x0002C8, "Member 'UANIMBP_DiegoV1_C::AnimGraphNode_Root' has a wrong offset!");
static_assert(offsetof(UANIMBP_DiegoV1_C, AnimGraphNode_BlendSpacePlayer_2) == 0x0002F8, "Member 'UANIMBP_DiegoV1_C::AnimGraphNode_BlendSpacePlayer_2' has a wrong offset!");
static_assert(offsetof(UANIMBP_DiegoV1_C, AnimGraphNode_BlendSpacePlayer_1) == 0x0003E0, "Member 'UANIMBP_DiegoV1_C::AnimGraphNode_BlendSpacePlayer_1' has a wrong offset!");
static_assert(offsetof(UANIMBP_DiegoV1_C, AnimGraphNode_BlendListByBool_4) == 0x0004C8, "Member 'UANIMBP_DiegoV1_C::AnimGraphNode_BlendListByBool_4' has a wrong offset!");
static_assert(offsetof(UANIMBP_DiegoV1_C, AnimGraphNode_SequencePlayer_2) == 0x000568, "Member 'UANIMBP_DiegoV1_C::AnimGraphNode_SequencePlayer_2' has a wrong offset!");
static_assert(offsetof(UANIMBP_DiegoV1_C, AnimGraphNode_SequencePlayer_1) == 0x0005E8, "Member 'UANIMBP_DiegoV1_C::AnimGraphNode_SequencePlayer_1' has a wrong offset!");
static_assert(offsetof(UANIMBP_DiegoV1_C, AnimGraphNode_BlendListByBool_3) == 0x000668, "Member 'UANIMBP_DiegoV1_C::AnimGraphNode_BlendListByBool_3' has a wrong offset!");
static_assert(offsetof(UANIMBP_DiegoV1_C, AnimGraphNode_BlendListByBool_2) == 0x000708, "Member 'UANIMBP_DiegoV1_C::AnimGraphNode_BlendListByBool_2' has a wrong offset!");
static_assert(offsetof(UANIMBP_DiegoV1_C, AnimGraphNode_BlendSpacePlayer) == 0x0007A8, "Member 'UANIMBP_DiegoV1_C::AnimGraphNode_BlendSpacePlayer' has a wrong offset!");
static_assert(offsetof(UANIMBP_DiegoV1_C, AnimGraphNode_SaveCachedPose_1) == 0x000890, "Member 'UANIMBP_DiegoV1_C::AnimGraphNode_SaveCachedPose_1' has a wrong offset!");
static_assert(offsetof(UANIMBP_DiegoV1_C, AnimGraphNode_BlendListByBool_1) == 0x0009E8, "Member 'UANIMBP_DiegoV1_C::AnimGraphNode_BlendListByBool_1' has a wrong offset!");
static_assert(offsetof(UANIMBP_DiegoV1_C, AnimGraphNode_LayeredBoneBlend_1) == 0x000A88, "Member 'UANIMBP_DiegoV1_C::AnimGraphNode_LayeredBoneBlend_1' has a wrong offset!");
static_assert(offsetof(UANIMBP_DiegoV1_C, AnimGraphNode_Slot_2) == 0x000B48, "Member 'UANIMBP_DiegoV1_C::AnimGraphNode_Slot_2' has a wrong offset!");
static_assert(offsetof(UANIMBP_DiegoV1_C, AnimGraphNode_UseCachedPose_3) == 0x000B90, "Member 'UANIMBP_DiegoV1_C::AnimGraphNode_UseCachedPose_3' has a wrong offset!");
static_assert(offsetof(UANIMBP_DiegoV1_C, AnimGraphNode_UseCachedPose_2) == 0x000BB8, "Member 'UANIMBP_DiegoV1_C::AnimGraphNode_UseCachedPose_2' has a wrong offset!");
static_assert(offsetof(UANIMBP_DiegoV1_C, AnimGraphNode_Slot_1) == 0x000BE0, "Member 'UANIMBP_DiegoV1_C::AnimGraphNode_Slot_1' has a wrong offset!");
static_assert(offsetof(UANIMBP_DiegoV1_C, AnimGraphNode_Slot) == 0x000C28, "Member 'UANIMBP_DiegoV1_C::AnimGraphNode_Slot' has a wrong offset!");
static_assert(offsetof(UANIMBP_DiegoV1_C, AnimGraphNode_LayeredBoneBlend) == 0x000C70, "Member 'UANIMBP_DiegoV1_C::AnimGraphNode_LayeredBoneBlend' has a wrong offset!");
static_assert(offsetof(UANIMBP_DiegoV1_C, AnimGraphNode_SaveCachedPose) == 0x000D30, "Member 'UANIMBP_DiegoV1_C::AnimGraphNode_SaveCachedPose' has a wrong offset!");
static_assert(offsetof(UANIMBP_DiegoV1_C, AnimGraphNode_UseCachedPose_1) == 0x000E88, "Member 'UANIMBP_DiegoV1_C::AnimGraphNode_UseCachedPose_1' has a wrong offset!");
static_assert(offsetof(UANIMBP_DiegoV1_C, AnimGraphNode_UseCachedPose) == 0x000EB0, "Member 'UANIMBP_DiegoV1_C::AnimGraphNode_UseCachedPose' has a wrong offset!");
static_assert(offsetof(UANIMBP_DiegoV1_C, AnimGraphNode_BlendListByBool) == 0x000ED8, "Member 'UANIMBP_DiegoV1_C::AnimGraphNode_BlendListByBool' has a wrong offset!");
static_assert(offsetof(UANIMBP_DiegoV1_C, AnimGraphNode_SequencePlayer) == 0x000F78, "Member 'UANIMBP_DiegoV1_C::AnimGraphNode_SequencePlayer' has a wrong offset!");
static_assert(offsetof(UANIMBP_DiegoV1_C, __CustomProperty_ImpactLocation_D383E0E7433A1F5C57017987EB862D45) == 0x000FF8, "Member 'UANIMBP_DiegoV1_C::__CustomProperty_ImpactLocation_D383E0E7433A1F5C57017987EB862D45' has a wrong offset!");
static_assert(offsetof(UANIMBP_DiegoV1_C, __CustomProperty_weapon_D383E0E7433A1F5C57017987EB862D45) == 0x001004, "Member 'UANIMBP_DiegoV1_C::__CustomProperty_weapon_D383E0E7433A1F5C57017987EB862D45' has a wrong offset!");
static_assert(offsetof(UANIMBP_DiegoV1_C, __CustomProperty_MovementDynamics_D383E0E7433A1F5C57017987EB862D45) == 0x001008, "Member 'UANIMBP_DiegoV1_C::__CustomProperty_MovementDynamics_D383E0E7433A1F5C57017987EB862D45' has a wrong offset!");
static_assert(offsetof(UANIMBP_DiegoV1_C, __CustomProperty_MovementVector_D383E0E7433A1F5C57017987EB862D45) == 0x00100C, "Member 'UANIMBP_DiegoV1_C::__CustomProperty_MovementVector_D383E0E7433A1F5C57017987EB862D45' has a wrong offset!");
static_assert(offsetof(UANIMBP_DiegoV1_C, __CustomProperty_rifle_D383E0E7433A1F5C57017987EB862D45) == 0x001018, "Member 'UANIMBP_DiegoV1_C::__CustomProperty_rifle_D383E0E7433A1F5C57017987EB862D45' has a wrong offset!");
static_assert(offsetof(UANIMBP_DiegoV1_C, __CustomProperty_LookAtLocation_D383E0E7433A1F5C57017987EB862D45) == 0x00101C, "Member 'UANIMBP_DiegoV1_C::__CustomProperty_LookAtLocation_D383E0E7433A1F5C57017987EB862D45' has a wrong offset!");
static_assert(offsetof(UANIMBP_DiegoV1_C, __CustomProperty_LookAtAlpha_D383E0E7433A1F5C57017987EB862D45) == 0x001028, "Member 'UANIMBP_DiegoV1_C::__CustomProperty_LookAtAlpha_D383E0E7433A1F5C57017987EB862D45' has a wrong offset!");
static_assert(offsetof(UANIMBP_DiegoV1_C, LookAtAlpha) == 0x00102C, "Member 'UANIMBP_DiegoV1_C::LookAtAlpha' has a wrong offset!");
static_assert(offsetof(UANIMBP_DiegoV1_C, LookAtLocation) == 0x001030, "Member 'UANIMBP_DiegoV1_C::LookAtLocation' has a wrong offset!");
static_assert(offsetof(UANIMBP_DiegoV1_C, Velocity) == 0x00103C, "Member 'UANIMBP_DiegoV1_C::Velocity' has a wrong offset!");
static_assert(offsetof(UANIMBP_DiegoV1_C, Idle_Override) == 0x001048, "Member 'UANIMBP_DiegoV1_C::Idle_Override' has a wrong offset!");
static_assert(offsetof(UANIMBP_DiegoV1_C, Idle_Normal) == 0x001050, "Member 'UANIMBP_DiegoV1_C::Idle_Normal' has a wrong offset!");
static_assert(offsetof(UANIMBP_DiegoV1_C, UseIdleOverride) == 0x001058, "Member 'UANIMBP_DiegoV1_C::UseIdleOverride' has a wrong offset!");
static_assert(offsetof(UANIMBP_DiegoV1_C, IsSprinting) == 0x001059, "Member 'UANIMBP_DiegoV1_C::IsSprinting' has a wrong offset!");
static_assert(offsetof(UANIMBP_DiegoV1_C, IsMoving) == 0x00105A, "Member 'UANIMBP_DiegoV1_C::IsMoving' has a wrong offset!");
static_assert(offsetof(UANIMBP_DiegoV1_C, MovementAngle) == 0x00105C, "Member 'UANIMBP_DiegoV1_C::MovementAngle' has a wrong offset!");
static_assert(offsetof(UANIMBP_DiegoV1_C, MovementSpeed) == 0x001060, "Member 'UANIMBP_DiegoV1_C::MovementSpeed' has a wrong offset!");
static_assert(offsetof(UANIMBP_DiegoV1_C, IsAlive) == 0x001064, "Member 'UANIMBP_DiegoV1_C::IsAlive' has a wrong offset!");
static_assert(offsetof(UANIMBP_DiegoV1_C, StunnedAnimSequence) == 0x001068, "Member 'UANIMBP_DiegoV1_C::StunnedAnimSequence' has a wrong offset!");
static_assert(offsetof(UANIMBP_DiegoV1_C, UseStunnedSequence) == 0x001070, "Member 'UANIMBP_DiegoV1_C::UseStunnedSequence' has a wrong offset!");
static_assert(offsetof(UANIMBP_DiegoV1_C, ProtectHead) == 0x001071, "Member 'UANIMBP_DiegoV1_C::ProtectHead' has a wrong offset!");

}

