#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: DEBRIS_BreakableBioTank_Base

#include "Basic.hpp"

#include "ENUM_BiohazardBarrelCondition_structs.hpp"
#include "CoreUObject_structs.hpp"
#include "Engine_structs.hpp"


namespace SDK::Params
{

// Function DEBRIS_BreakableBioTank_Base.DEBRIS_BreakableBioTank_Base_C.ExecuteUbergraph_DEBRIS_BreakableBioTank_Base
// 0x0018 (0x0018 - 0x0000)
struct DEBRIS_BreakableBioTank_Base_C_ExecuteUbergraph_DEBRIS_BreakableBioTank_Base final
{
public:
	int32                                         EntryPoint;                                        // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_ComponentBoundEvent_bVisibleState;          // 0x0004(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class ADecalActor*                            K2Node_CustomEvent_DecalActor;                     // 0x0008(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UMaterialInstanceDynamic*               CallFunc_CreateDynamicMaterialInstance_ReturnValue; // 0x0010(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(DEBRIS_BreakableBioTank_Base_C_ExecuteUbergraph_DEBRIS_BreakableBioTank_Base) == 0x000008, "Wrong alignment on DEBRIS_BreakableBioTank_Base_C_ExecuteUbergraph_DEBRIS_BreakableBioTank_Base");
static_assert(sizeof(DEBRIS_BreakableBioTank_Base_C_ExecuteUbergraph_DEBRIS_BreakableBioTank_Base) == 0x000018, "Wrong size on DEBRIS_BreakableBioTank_Base_C_ExecuteUbergraph_DEBRIS_BreakableBioTank_Base");
static_assert(offsetof(DEBRIS_BreakableBioTank_Base_C_ExecuteUbergraph_DEBRIS_BreakableBioTank_Base, EntryPoint) == 0x000000, "Member 'DEBRIS_BreakableBioTank_Base_C_ExecuteUbergraph_DEBRIS_BreakableBioTank_Base::EntryPoint' has a wrong offset!");
static_assert(offsetof(DEBRIS_BreakableBioTank_Base_C_ExecuteUbergraph_DEBRIS_BreakableBioTank_Base, K2Node_ComponentBoundEvent_bVisibleState) == 0x000004, "Member 'DEBRIS_BreakableBioTank_Base_C_ExecuteUbergraph_DEBRIS_BreakableBioTank_Base::K2Node_ComponentBoundEvent_bVisibleState' has a wrong offset!");
static_assert(offsetof(DEBRIS_BreakableBioTank_Base_C_ExecuteUbergraph_DEBRIS_BreakableBioTank_Base, K2Node_CustomEvent_DecalActor) == 0x000008, "Member 'DEBRIS_BreakableBioTank_Base_C_ExecuteUbergraph_DEBRIS_BreakableBioTank_Base::K2Node_CustomEvent_DecalActor' has a wrong offset!");
static_assert(offsetof(DEBRIS_BreakableBioTank_Base_C_ExecuteUbergraph_DEBRIS_BreakableBioTank_Base, CallFunc_CreateDynamicMaterialInstance_ReturnValue) == 0x000010, "Member 'DEBRIS_BreakableBioTank_Base_C_ExecuteUbergraph_DEBRIS_BreakableBioTank_Base::CallFunc_CreateDynamicMaterialInstance_ReturnValue' has a wrong offset!");

// Function DEBRIS_BreakableBioTank_Base.DEBRIS_BreakableBioTank_Base_C.FadeInDecal
// 0x0008 (0x0008 - 0x0000)
struct DEBRIS_BreakableBioTank_Base_C_FadeInDecal final
{
public:
	class ADecalActor*                            DecalActor;                                        // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(DEBRIS_BreakableBioTank_Base_C_FadeInDecal) == 0x000008, "Wrong alignment on DEBRIS_BreakableBioTank_Base_C_FadeInDecal");
static_assert(sizeof(DEBRIS_BreakableBioTank_Base_C_FadeInDecal) == 0x000008, "Wrong size on DEBRIS_BreakableBioTank_Base_C_FadeInDecal");
static_assert(offsetof(DEBRIS_BreakableBioTank_Base_C_FadeInDecal, DecalActor) == 0x000000, "Member 'DEBRIS_BreakableBioTank_Base_C_FadeInDecal::DecalActor' has a wrong offset!");

// Function DEBRIS_BreakableBioTank_Base.DEBRIS_BreakableBioTank_Base_C.BndEvt__DEBRIS_BreakableBioTank_Base_COMP_VoxelCullablePropagator_K2Node_ComponentBoundEvent_1_CullableVisibilitySignature__DelegateSignature
// 0x0001 (0x0001 - 0x0000)
struct DEBRIS_BreakableBioTank_Base_C_BndEvt__DEBRIS_BreakableBioTank_Base_COMP_VoxelCullablePropagator_K2Node_ComponentBoundEvent_1_CullableVisibilitySignature__DelegateSignature final
{
public:
	bool                                          bVisibleState;                                     // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(DEBRIS_BreakableBioTank_Base_C_BndEvt__DEBRIS_BreakableBioTank_Base_COMP_VoxelCullablePropagator_K2Node_ComponentBoundEvent_1_CullableVisibilitySignature__DelegateSignature) == 0x000001, "Wrong alignment on DEBRIS_BreakableBioTank_Base_C_BndEvt__DEBRIS_BreakableBioTank_Base_COMP_VoxelCullablePropagator_K2Node_ComponentBoundEvent_1_CullableVisibilitySignature__DelegateSignature");
static_assert(sizeof(DEBRIS_BreakableBioTank_Base_C_BndEvt__DEBRIS_BreakableBioTank_Base_COMP_VoxelCullablePropagator_K2Node_ComponentBoundEvent_1_CullableVisibilitySignature__DelegateSignature) == 0x000001, "Wrong size on DEBRIS_BreakableBioTank_Base_C_BndEvt__DEBRIS_BreakableBioTank_Base_COMP_VoxelCullablePropagator_K2Node_ComponentBoundEvent_1_CullableVisibilitySignature__DelegateSignature");
static_assert(offsetof(DEBRIS_BreakableBioTank_Base_C_BndEvt__DEBRIS_BreakableBioTank_Base_COMP_VoxelCullablePropagator_K2Node_ComponentBoundEvent_1_CullableVisibilitySignature__DelegateSignature, bVisibleState) == 0x000000, "Member 'DEBRIS_BreakableBioTank_Base_C_BndEvt__DEBRIS_BreakableBioTank_Base_COMP_VoxelCullablePropagator_K2Node_ComponentBoundEvent_1_CullableVisibilitySignature__DelegateSignature::bVisibleState' has a wrong offset!");

// Function DEBRIS_BreakableBioTank_Base.DEBRIS_BreakableBioTank_Base_C.GetMaxLBP
// 0x0008 (0x0008 - 0x0000)
struct DEBRIS_BreakableBioTank_Base_C_GetMaxLBP final
{
public:
	int32                                         BioLevel;                                          // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Conv_ByteToInt_ReturnValue;               // 0x0004(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(DEBRIS_BreakableBioTank_Base_C_GetMaxLBP) == 0x000004, "Wrong alignment on DEBRIS_BreakableBioTank_Base_C_GetMaxLBP");
static_assert(sizeof(DEBRIS_BreakableBioTank_Base_C_GetMaxLBP) == 0x000008, "Wrong size on DEBRIS_BreakableBioTank_Base_C_GetMaxLBP");
static_assert(offsetof(DEBRIS_BreakableBioTank_Base_C_GetMaxLBP, BioLevel) == 0x000000, "Member 'DEBRIS_BreakableBioTank_Base_C_GetMaxLBP::BioLevel' has a wrong offset!");
static_assert(offsetof(DEBRIS_BreakableBioTank_Base_C_GetMaxLBP, CallFunc_Conv_ByteToInt_ReturnValue) == 0x000004, "Member 'DEBRIS_BreakableBioTank_Base_C_GetMaxLBP::CallFunc_Conv_ByteToInt_ReturnValue' has a wrong offset!");

// Function DEBRIS_BreakableBioTank_Base.DEBRIS_BreakableBioTank_Base_C.InitializeBioTank
// 0x0008 (0x0008 - 0x0000)
struct DEBRIS_BreakableBioTank_Base_C_InitializeBioTank final
{
public:
	class ADecalActor*                            CallFunc_SpawnDecal_Result;                        // 0x0000(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(DEBRIS_BreakableBioTank_Base_C_InitializeBioTank) == 0x000008, "Wrong alignment on DEBRIS_BreakableBioTank_Base_C_InitializeBioTank");
static_assert(sizeof(DEBRIS_BreakableBioTank_Base_C_InitializeBioTank) == 0x000008, "Wrong size on DEBRIS_BreakableBioTank_Base_C_InitializeBioTank");
static_assert(offsetof(DEBRIS_BreakableBioTank_Base_C_InitializeBioTank, CallFunc_SpawnDecal_Result) == 0x000000, "Member 'DEBRIS_BreakableBioTank_Base_C_InitializeBioTank::CallFunc_SpawnDecal_Result' has a wrong offset!");

// Function DEBRIS_BreakableBioTank_Base.DEBRIS_BreakableBioTank_Base_C.UpdateBioTankDescriptor
// 0x0070 (0x0070 - 0x0000)
struct DEBRIS_BreakableBioTank_Base_C_UpdateBioTankDescriptor final
{
public:
	bool                                          CallFunc_IsBroken_Result;                          // 0x0000(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FFormatArgumentData                    K2Node_MakeStruct_FormatArgumentData;              // 0x0008(0x0040)(HasGetValueTypeHash)
	TArray<struct FFormatArgumentData>            K2Node_MakeArray_Array;                            // 0x0048(0x0010)(ReferenceParm)
	class FText                                   CallFunc_Format_ReturnValue;                       // 0x0058(0x0018)()
};
static_assert(alignof(DEBRIS_BreakableBioTank_Base_C_UpdateBioTankDescriptor) == 0x000008, "Wrong alignment on DEBRIS_BreakableBioTank_Base_C_UpdateBioTankDescriptor");
static_assert(sizeof(DEBRIS_BreakableBioTank_Base_C_UpdateBioTankDescriptor) == 0x000070, "Wrong size on DEBRIS_BreakableBioTank_Base_C_UpdateBioTankDescriptor");
static_assert(offsetof(DEBRIS_BreakableBioTank_Base_C_UpdateBioTankDescriptor, CallFunc_IsBroken_Result) == 0x000000, "Member 'DEBRIS_BreakableBioTank_Base_C_UpdateBioTankDescriptor::CallFunc_IsBroken_Result' has a wrong offset!");
static_assert(offsetof(DEBRIS_BreakableBioTank_Base_C_UpdateBioTankDescriptor, K2Node_MakeStruct_FormatArgumentData) == 0x000008, "Member 'DEBRIS_BreakableBioTank_Base_C_UpdateBioTankDescriptor::K2Node_MakeStruct_FormatArgumentData' has a wrong offset!");
static_assert(offsetof(DEBRIS_BreakableBioTank_Base_C_UpdateBioTankDescriptor, K2Node_MakeArray_Array) == 0x000048, "Member 'DEBRIS_BreakableBioTank_Base_C_UpdateBioTankDescriptor::K2Node_MakeArray_Array' has a wrong offset!");
static_assert(offsetof(DEBRIS_BreakableBioTank_Base_C_UpdateBioTankDescriptor, CallFunc_Format_ReturnValue) == 0x000058, "Member 'DEBRIS_BreakableBioTank_Base_C_UpdateBioTankDescriptor::CallFunc_Format_ReturnValue' has a wrong offset!");

// Function DEBRIS_BreakableBioTank_Base.DEBRIS_BreakableBioTank_Base_C.UpdateBioTankMesh
// 0x0090 (0x0090 - 0x0000)
struct DEBRIS_BreakableBioTank_Base_C_UpdateBioTankMesh final
{
public:
	class UStaticMeshComponent*                   WheelsMeshComponent;                               // 0x0000(0x0008)(Edit, BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_K2_AttachToComponent_ReturnValue;         // 0x0008(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0009(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsValid_ReturnValue_1;                    // 0x000A(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_B[0x5];                                        // 0x000B(0x0005)(Fixing Size After Last Property [ Dumper-7 ])
	class UStaticMeshComponent*                   CallFunc_GetBioTankWheelsComponent_MeshComponent;  // 0x0010(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ENUM_BiohazardBarrelCondition                 Temp_byte_Variable;                                // 0x0018(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_19[0x7];                                       // 0x0019(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UStaticMeshComponent*                   CallFunc_GetBioTankWheelsComponent_MeshComponent_1; // 0x0020(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_28[0x8];                                       // 0x0028(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTransform                             CallFunc_MakeTransform_ReturnValue;                // 0x0030(0x0030)(IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsValid_ReturnValue_2;                    // 0x0060(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_61[0x7];                                       // 0x0061(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UStaticMeshComponent*                   CallFunc_AddStaticMeshComponentInEditor_ReturnValue; // 0x0068(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_SetStaticMesh_ReturnValue;                // 0x0070(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsBroken_Result;                          // 0x0071(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_72[0x6];                                       // 0x0072(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class UStaticMesh*                            K2Node_Select_Default;                             // 0x0078(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_SetStaticMesh_ReturnValue_1;              // 0x0080(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(DEBRIS_BreakableBioTank_Base_C_UpdateBioTankMesh) == 0x000010, "Wrong alignment on DEBRIS_BreakableBioTank_Base_C_UpdateBioTankMesh");
static_assert(sizeof(DEBRIS_BreakableBioTank_Base_C_UpdateBioTankMesh) == 0x000090, "Wrong size on DEBRIS_BreakableBioTank_Base_C_UpdateBioTankMesh");
static_assert(offsetof(DEBRIS_BreakableBioTank_Base_C_UpdateBioTankMesh, WheelsMeshComponent) == 0x000000, "Member 'DEBRIS_BreakableBioTank_Base_C_UpdateBioTankMesh::WheelsMeshComponent' has a wrong offset!");
static_assert(offsetof(DEBRIS_BreakableBioTank_Base_C_UpdateBioTankMesh, CallFunc_K2_AttachToComponent_ReturnValue) == 0x000008, "Member 'DEBRIS_BreakableBioTank_Base_C_UpdateBioTankMesh::CallFunc_K2_AttachToComponent_ReturnValue' has a wrong offset!");
static_assert(offsetof(DEBRIS_BreakableBioTank_Base_C_UpdateBioTankMesh, CallFunc_IsValid_ReturnValue) == 0x000009, "Member 'DEBRIS_BreakableBioTank_Base_C_UpdateBioTankMesh::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(DEBRIS_BreakableBioTank_Base_C_UpdateBioTankMesh, CallFunc_IsValid_ReturnValue_1) == 0x00000A, "Member 'DEBRIS_BreakableBioTank_Base_C_UpdateBioTankMesh::CallFunc_IsValid_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(DEBRIS_BreakableBioTank_Base_C_UpdateBioTankMesh, CallFunc_GetBioTankWheelsComponent_MeshComponent) == 0x000010, "Member 'DEBRIS_BreakableBioTank_Base_C_UpdateBioTankMesh::CallFunc_GetBioTankWheelsComponent_MeshComponent' has a wrong offset!");
static_assert(offsetof(DEBRIS_BreakableBioTank_Base_C_UpdateBioTankMesh, Temp_byte_Variable) == 0x000018, "Member 'DEBRIS_BreakableBioTank_Base_C_UpdateBioTankMesh::Temp_byte_Variable' has a wrong offset!");
static_assert(offsetof(DEBRIS_BreakableBioTank_Base_C_UpdateBioTankMesh, CallFunc_GetBioTankWheelsComponent_MeshComponent_1) == 0x000020, "Member 'DEBRIS_BreakableBioTank_Base_C_UpdateBioTankMesh::CallFunc_GetBioTankWheelsComponent_MeshComponent_1' has a wrong offset!");
static_assert(offsetof(DEBRIS_BreakableBioTank_Base_C_UpdateBioTankMesh, CallFunc_MakeTransform_ReturnValue) == 0x000030, "Member 'DEBRIS_BreakableBioTank_Base_C_UpdateBioTankMesh::CallFunc_MakeTransform_ReturnValue' has a wrong offset!");
static_assert(offsetof(DEBRIS_BreakableBioTank_Base_C_UpdateBioTankMesh, CallFunc_IsValid_ReturnValue_2) == 0x000060, "Member 'DEBRIS_BreakableBioTank_Base_C_UpdateBioTankMesh::CallFunc_IsValid_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(DEBRIS_BreakableBioTank_Base_C_UpdateBioTankMesh, CallFunc_AddStaticMeshComponentInEditor_ReturnValue) == 0x000068, "Member 'DEBRIS_BreakableBioTank_Base_C_UpdateBioTankMesh::CallFunc_AddStaticMeshComponentInEditor_ReturnValue' has a wrong offset!");
static_assert(offsetof(DEBRIS_BreakableBioTank_Base_C_UpdateBioTankMesh, CallFunc_SetStaticMesh_ReturnValue) == 0x000070, "Member 'DEBRIS_BreakableBioTank_Base_C_UpdateBioTankMesh::CallFunc_SetStaticMesh_ReturnValue' has a wrong offset!");
static_assert(offsetof(DEBRIS_BreakableBioTank_Base_C_UpdateBioTankMesh, CallFunc_IsBroken_Result) == 0x000071, "Member 'DEBRIS_BreakableBioTank_Base_C_UpdateBioTankMesh::CallFunc_IsBroken_Result' has a wrong offset!");
static_assert(offsetof(DEBRIS_BreakableBioTank_Base_C_UpdateBioTankMesh, K2Node_Select_Default) == 0x000078, "Member 'DEBRIS_BreakableBioTank_Base_C_UpdateBioTankMesh::K2Node_Select_Default' has a wrong offset!");
static_assert(offsetof(DEBRIS_BreakableBioTank_Base_C_UpdateBioTankMesh, CallFunc_SetStaticMesh_ReturnValue_1) == 0x000080, "Member 'DEBRIS_BreakableBioTank_Base_C_UpdateBioTankMesh::CallFunc_SetStaticMesh_ReturnValue_1' has a wrong offset!");

// Function DEBRIS_BreakableBioTank_Base.DEBRIS_BreakableBioTank_Base_C.UpdateBioTankVisibility
// 0x0001 (0x0001 - 0x0000)
struct DEBRIS_BreakableBioTank_Base_C_UpdateBioTankVisibility final
{
public:
	bool                                          VisbilityState;                                    // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(DEBRIS_BreakableBioTank_Base_C_UpdateBioTankVisibility) == 0x000001, "Wrong alignment on DEBRIS_BreakableBioTank_Base_C_UpdateBioTankVisibility");
static_assert(sizeof(DEBRIS_BreakableBioTank_Base_C_UpdateBioTankVisibility) == 0x000001, "Wrong size on DEBRIS_BreakableBioTank_Base_C_UpdateBioTankVisibility");
static_assert(offsetof(DEBRIS_BreakableBioTank_Base_C_UpdateBioTankVisibility, VisbilityState) == 0x000000, "Member 'DEBRIS_BreakableBioTank_Base_C_UpdateBioTankVisibility::VisbilityState' has a wrong offset!");

// Function DEBRIS_BreakableBioTank_Base.DEBRIS_BreakableBioTank_Base_C.SpawnDecal
// 0x0190 (0x0190 - 0x0000)
struct DEBRIS_BreakableBioTank_Base_C_SpawnDecal final
{
public:
	class ADecalActor*                            Result;                                            // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class ADecalActor*                            DecalActor;                                        // 0x0008(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TArray<class AActor*>                         Temp_object_Variable;                              // 0x0010(0x0010)(ConstParm, ReferenceParm)
	struct FVector                                CallFunc_K2_GetActorLocation_ReturnValue;          // 0x0020(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Add_VectorVector_ReturnValue;             // 0x002C(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_K2_GetActorLocation_ReturnValue_1;        // 0x0038(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FHitResult                             CallFunc_LineTraceSingle_OutHit;                   // 0x0044(0x0088)(IsPlainOldData, NoDestructor, ContainsInstancedReference)
	bool                                          CallFunc_LineTraceSingle_ReturnValue;              // 0x00CC(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BreakHitResult_bBlockingHit;              // 0x00CD(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BreakHitResult_bInitialOverlap;           // 0x00CE(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_CF[0x1];                                       // 0x00CF(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_BreakHitResult_Time;                      // 0x00D0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakHitResult_Distance;                  // 0x00D4(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakHitResult_Location;                  // 0x00D8(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakHitResult_ImpactPoint;               // 0x00E4(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakHitResult_Normal;                    // 0x00F0(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakHitResult_ImpactNormal;              // 0x00FC(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UPhysicalMaterial*                      CallFunc_BreakHitResult_PhysMat;                   // 0x0108(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 CallFunc_BreakHitResult_HitActor;                  // 0x0110(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UPrimitiveComponent*                    CallFunc_BreakHitResult_HitComponent;              // 0x0118(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FName                                   CallFunc_BreakHitResult_HitBoneName;               // 0x0120(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_BreakHitResult_HitItem;                   // 0x0128(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_BreakHitResult_ElementIndex;              // 0x012C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_BreakHitResult_FaceIndex;                 // 0x0130(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakHitResult_TraceStart;                // 0x0134(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakHitResult_TraceEnd;                  // 0x0140(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_14C[0x4];                                      // 0x014C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTransform                             CallFunc_MakeTransform_ReturnValue;                // 0x0150(0x0030)(IsPlainOldData, NoDestructor)
	class AActor*                                 CallFunc_BeginDeferredActorSpawnFromClass_ReturnValue; // 0x0180(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class ADecalActor*                            CallFunc_FinishSpawningActor_ReturnValue;          // 0x0188(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(DEBRIS_BreakableBioTank_Base_C_SpawnDecal) == 0x000010, "Wrong alignment on DEBRIS_BreakableBioTank_Base_C_SpawnDecal");
static_assert(sizeof(DEBRIS_BreakableBioTank_Base_C_SpawnDecal) == 0x000190, "Wrong size on DEBRIS_BreakableBioTank_Base_C_SpawnDecal");
static_assert(offsetof(DEBRIS_BreakableBioTank_Base_C_SpawnDecal, Result) == 0x000000, "Member 'DEBRIS_BreakableBioTank_Base_C_SpawnDecal::Result' has a wrong offset!");
static_assert(offsetof(DEBRIS_BreakableBioTank_Base_C_SpawnDecal, DecalActor) == 0x000008, "Member 'DEBRIS_BreakableBioTank_Base_C_SpawnDecal::DecalActor' has a wrong offset!");
static_assert(offsetof(DEBRIS_BreakableBioTank_Base_C_SpawnDecal, Temp_object_Variable) == 0x000010, "Member 'DEBRIS_BreakableBioTank_Base_C_SpawnDecal::Temp_object_Variable' has a wrong offset!");
static_assert(offsetof(DEBRIS_BreakableBioTank_Base_C_SpawnDecal, CallFunc_K2_GetActorLocation_ReturnValue) == 0x000020, "Member 'DEBRIS_BreakableBioTank_Base_C_SpawnDecal::CallFunc_K2_GetActorLocation_ReturnValue' has a wrong offset!");
static_assert(offsetof(DEBRIS_BreakableBioTank_Base_C_SpawnDecal, CallFunc_Add_VectorVector_ReturnValue) == 0x00002C, "Member 'DEBRIS_BreakableBioTank_Base_C_SpawnDecal::CallFunc_Add_VectorVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(DEBRIS_BreakableBioTank_Base_C_SpawnDecal, CallFunc_K2_GetActorLocation_ReturnValue_1) == 0x000038, "Member 'DEBRIS_BreakableBioTank_Base_C_SpawnDecal::CallFunc_K2_GetActorLocation_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(DEBRIS_BreakableBioTank_Base_C_SpawnDecal, CallFunc_LineTraceSingle_OutHit) == 0x000044, "Member 'DEBRIS_BreakableBioTank_Base_C_SpawnDecal::CallFunc_LineTraceSingle_OutHit' has a wrong offset!");
static_assert(offsetof(DEBRIS_BreakableBioTank_Base_C_SpawnDecal, CallFunc_LineTraceSingle_ReturnValue) == 0x0000CC, "Member 'DEBRIS_BreakableBioTank_Base_C_SpawnDecal::CallFunc_LineTraceSingle_ReturnValue' has a wrong offset!");
static_assert(offsetof(DEBRIS_BreakableBioTank_Base_C_SpawnDecal, CallFunc_BreakHitResult_bBlockingHit) == 0x0000CD, "Member 'DEBRIS_BreakableBioTank_Base_C_SpawnDecal::CallFunc_BreakHitResult_bBlockingHit' has a wrong offset!");
static_assert(offsetof(DEBRIS_BreakableBioTank_Base_C_SpawnDecal, CallFunc_BreakHitResult_bInitialOverlap) == 0x0000CE, "Member 'DEBRIS_BreakableBioTank_Base_C_SpawnDecal::CallFunc_BreakHitResult_bInitialOverlap' has a wrong offset!");
static_assert(offsetof(DEBRIS_BreakableBioTank_Base_C_SpawnDecal, CallFunc_BreakHitResult_Time) == 0x0000D0, "Member 'DEBRIS_BreakableBioTank_Base_C_SpawnDecal::CallFunc_BreakHitResult_Time' has a wrong offset!");
static_assert(offsetof(DEBRIS_BreakableBioTank_Base_C_SpawnDecal, CallFunc_BreakHitResult_Distance) == 0x0000D4, "Member 'DEBRIS_BreakableBioTank_Base_C_SpawnDecal::CallFunc_BreakHitResult_Distance' has a wrong offset!");
static_assert(offsetof(DEBRIS_BreakableBioTank_Base_C_SpawnDecal, CallFunc_BreakHitResult_Location) == 0x0000D8, "Member 'DEBRIS_BreakableBioTank_Base_C_SpawnDecal::CallFunc_BreakHitResult_Location' has a wrong offset!");
static_assert(offsetof(DEBRIS_BreakableBioTank_Base_C_SpawnDecal, CallFunc_BreakHitResult_ImpactPoint) == 0x0000E4, "Member 'DEBRIS_BreakableBioTank_Base_C_SpawnDecal::CallFunc_BreakHitResult_ImpactPoint' has a wrong offset!");
static_assert(offsetof(DEBRIS_BreakableBioTank_Base_C_SpawnDecal, CallFunc_BreakHitResult_Normal) == 0x0000F0, "Member 'DEBRIS_BreakableBioTank_Base_C_SpawnDecal::CallFunc_BreakHitResult_Normal' has a wrong offset!");
static_assert(offsetof(DEBRIS_BreakableBioTank_Base_C_SpawnDecal, CallFunc_BreakHitResult_ImpactNormal) == 0x0000FC, "Member 'DEBRIS_BreakableBioTank_Base_C_SpawnDecal::CallFunc_BreakHitResult_ImpactNormal' has a wrong offset!");
static_assert(offsetof(DEBRIS_BreakableBioTank_Base_C_SpawnDecal, CallFunc_BreakHitResult_PhysMat) == 0x000108, "Member 'DEBRIS_BreakableBioTank_Base_C_SpawnDecal::CallFunc_BreakHitResult_PhysMat' has a wrong offset!");
static_assert(offsetof(DEBRIS_BreakableBioTank_Base_C_SpawnDecal, CallFunc_BreakHitResult_HitActor) == 0x000110, "Member 'DEBRIS_BreakableBioTank_Base_C_SpawnDecal::CallFunc_BreakHitResult_HitActor' has a wrong offset!");
static_assert(offsetof(DEBRIS_BreakableBioTank_Base_C_SpawnDecal, CallFunc_BreakHitResult_HitComponent) == 0x000118, "Member 'DEBRIS_BreakableBioTank_Base_C_SpawnDecal::CallFunc_BreakHitResult_HitComponent' has a wrong offset!");
static_assert(offsetof(DEBRIS_BreakableBioTank_Base_C_SpawnDecal, CallFunc_BreakHitResult_HitBoneName) == 0x000120, "Member 'DEBRIS_BreakableBioTank_Base_C_SpawnDecal::CallFunc_BreakHitResult_HitBoneName' has a wrong offset!");
static_assert(offsetof(DEBRIS_BreakableBioTank_Base_C_SpawnDecal, CallFunc_BreakHitResult_HitItem) == 0x000128, "Member 'DEBRIS_BreakableBioTank_Base_C_SpawnDecal::CallFunc_BreakHitResult_HitItem' has a wrong offset!");
static_assert(offsetof(DEBRIS_BreakableBioTank_Base_C_SpawnDecal, CallFunc_BreakHitResult_ElementIndex) == 0x00012C, "Member 'DEBRIS_BreakableBioTank_Base_C_SpawnDecal::CallFunc_BreakHitResult_ElementIndex' has a wrong offset!");
static_assert(offsetof(DEBRIS_BreakableBioTank_Base_C_SpawnDecal, CallFunc_BreakHitResult_FaceIndex) == 0x000130, "Member 'DEBRIS_BreakableBioTank_Base_C_SpawnDecal::CallFunc_BreakHitResult_FaceIndex' has a wrong offset!");
static_assert(offsetof(DEBRIS_BreakableBioTank_Base_C_SpawnDecal, CallFunc_BreakHitResult_TraceStart) == 0x000134, "Member 'DEBRIS_BreakableBioTank_Base_C_SpawnDecal::CallFunc_BreakHitResult_TraceStart' has a wrong offset!");
static_assert(offsetof(DEBRIS_BreakableBioTank_Base_C_SpawnDecal, CallFunc_BreakHitResult_TraceEnd) == 0x000140, "Member 'DEBRIS_BreakableBioTank_Base_C_SpawnDecal::CallFunc_BreakHitResult_TraceEnd' has a wrong offset!");
static_assert(offsetof(DEBRIS_BreakableBioTank_Base_C_SpawnDecal, CallFunc_MakeTransform_ReturnValue) == 0x000150, "Member 'DEBRIS_BreakableBioTank_Base_C_SpawnDecal::CallFunc_MakeTransform_ReturnValue' has a wrong offset!");
static_assert(offsetof(DEBRIS_BreakableBioTank_Base_C_SpawnDecal, CallFunc_BeginDeferredActorSpawnFromClass_ReturnValue) == 0x000180, "Member 'DEBRIS_BreakableBioTank_Base_C_SpawnDecal::CallFunc_BeginDeferredActorSpawnFromClass_ReturnValue' has a wrong offset!");
static_assert(offsetof(DEBRIS_BreakableBioTank_Base_C_SpawnDecal, CallFunc_FinishSpawningActor_ReturnValue) == 0x000188, "Member 'DEBRIS_BreakableBioTank_Base_C_SpawnDecal::CallFunc_FinishSpawningActor_ReturnValue' has a wrong offset!");

// Function DEBRIS_BreakableBioTank_Base.DEBRIS_BreakableBioTank_Base_C.GetBioTankWheelsComponent
// 0x0010 (0x0010 - 0x0000)
struct DEBRIS_BreakableBioTank_Base_C_GetBioTankWheelsComponent final
{
public:
	class UStaticMeshComponent*                   MeshComponent;                                     // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UStaticMeshComponent*                   CallFunc_GetChildComponentByClassAndSuffix_ReturnValue; // 0x0008(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(DEBRIS_BreakableBioTank_Base_C_GetBioTankWheelsComponent) == 0x000008, "Wrong alignment on DEBRIS_BreakableBioTank_Base_C_GetBioTankWheelsComponent");
static_assert(sizeof(DEBRIS_BreakableBioTank_Base_C_GetBioTankWheelsComponent) == 0x000010, "Wrong size on DEBRIS_BreakableBioTank_Base_C_GetBioTankWheelsComponent");
static_assert(offsetof(DEBRIS_BreakableBioTank_Base_C_GetBioTankWheelsComponent, MeshComponent) == 0x000000, "Member 'DEBRIS_BreakableBioTank_Base_C_GetBioTankWheelsComponent::MeshComponent' has a wrong offset!");
static_assert(offsetof(DEBRIS_BreakableBioTank_Base_C_GetBioTankWheelsComponent, CallFunc_GetChildComponentByClassAndSuffix_ReturnValue) == 0x000008, "Member 'DEBRIS_BreakableBioTank_Base_C_GetBioTankWheelsComponent::CallFunc_GetChildComponentByClassAndSuffix_ReturnValue' has a wrong offset!");

// Function DEBRIS_BreakableBioTank_Base.DEBRIS_BreakableBioTank_Base_C.IgnorePhysicsBodyCollisionTemporarily
// 0x0018 (0x0018 - 0x0000)
struct DEBRIS_BreakableBioTank_Base_C_IgnorePhysicsBodyCollisionTemporarily final
{
public:
	float                                         Duration;                                          // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UStaticMeshComponent*                   CallFunc_GetBioTankWheelsComponent_MeshComponent;  // 0x0008(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0010(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(DEBRIS_BreakableBioTank_Base_C_IgnorePhysicsBodyCollisionTemporarily) == 0x000008, "Wrong alignment on DEBRIS_BreakableBioTank_Base_C_IgnorePhysicsBodyCollisionTemporarily");
static_assert(sizeof(DEBRIS_BreakableBioTank_Base_C_IgnorePhysicsBodyCollisionTemporarily) == 0x000018, "Wrong size on DEBRIS_BreakableBioTank_Base_C_IgnorePhysicsBodyCollisionTemporarily");
static_assert(offsetof(DEBRIS_BreakableBioTank_Base_C_IgnorePhysicsBodyCollisionTemporarily, Duration) == 0x000000, "Member 'DEBRIS_BreakableBioTank_Base_C_IgnorePhysicsBodyCollisionTemporarily::Duration' has a wrong offset!");
static_assert(offsetof(DEBRIS_BreakableBioTank_Base_C_IgnorePhysicsBodyCollisionTemporarily, CallFunc_GetBioTankWheelsComponent_MeshComponent) == 0x000008, "Member 'DEBRIS_BreakableBioTank_Base_C_IgnorePhysicsBodyCollisionTemporarily::CallFunc_GetBioTankWheelsComponent_MeshComponent' has a wrong offset!");
static_assert(offsetof(DEBRIS_BreakableBioTank_Base_C_IgnorePhysicsBodyCollisionTemporarily, CallFunc_IsValid_ReturnValue) == 0x000010, "Member 'DEBRIS_BreakableBioTank_Base_C_IgnorePhysicsBodyCollisionTemporarily::CallFunc_IsValid_ReturnValue' has a wrong offset!");

// Function DEBRIS_BreakableBioTank_Base.DEBRIS_BreakableBioTank_Base_C.OnBreak
// 0x00D0 (0x00D0 - 0x0000)
struct DEBRIS_BreakableBioTank_Base_C_OnBreak final
{
public:
	bool                                          Result;                                            // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UGameInstance*                          CallFunc_GetGameInstance_ReturnValue;              // 0x0008(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UGI_SinglePlayer_C*                     K2Node_DynamicCast_AsGI_Single_Player;             // 0x0010(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0018(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         CallFunc_Add_ByteByte_ReturnValue;                 // 0x0019(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1A[0x6];                                       // 0x001A(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class ADecalActor*                            CallFunc_SpawnDecal_Result;                        // 0x0020(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_28[0x8];                                       // 0x0028(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTransform                             CallFunc_K2_GetComponentToWorld_ReturnValue;       // 0x0030(0x0030)(IsPlainOldData, NoDestructor)
	struct FTransform                             CallFunc_K2_GetComponentToWorld_ReturnValue_1;     // 0x0060(0x0030)(IsPlainOldData, NoDestructor)
	class UGameInstance*                          CallFunc_GetGameInstance_ReturnValue_1;            // 0x0090(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_K2_GetComponentLocation_ReturnValue;      // 0x0098(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_A4[0x4];                                       // 0x00A4(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UGI_SinglePlayer_C*                     K2Node_DynamicCast_AsGI_Single_Player_1;           // 0x00A8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess_1;                     // 0x00B0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_B1[0x7];                                       // 0x00B1(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UGameInstance*                          CallFunc_GetGameInstance_ReturnValue_2;            // 0x00B8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UGI_SinglePlayer_C*                     K2Node_DynamicCast_AsGI_Single_Player_2;           // 0x00C0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess_2;                     // 0x00C8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_OnBreak_Result;                           // 0x00C9(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(DEBRIS_BreakableBioTank_Base_C_OnBreak) == 0x000010, "Wrong alignment on DEBRIS_BreakableBioTank_Base_C_OnBreak");
static_assert(sizeof(DEBRIS_BreakableBioTank_Base_C_OnBreak) == 0x0000D0, "Wrong size on DEBRIS_BreakableBioTank_Base_C_OnBreak");
static_assert(offsetof(DEBRIS_BreakableBioTank_Base_C_OnBreak, Result) == 0x000000, "Member 'DEBRIS_BreakableBioTank_Base_C_OnBreak::Result' has a wrong offset!");
static_assert(offsetof(DEBRIS_BreakableBioTank_Base_C_OnBreak, CallFunc_GetGameInstance_ReturnValue) == 0x000008, "Member 'DEBRIS_BreakableBioTank_Base_C_OnBreak::CallFunc_GetGameInstance_ReturnValue' has a wrong offset!");
static_assert(offsetof(DEBRIS_BreakableBioTank_Base_C_OnBreak, K2Node_DynamicCast_AsGI_Single_Player) == 0x000010, "Member 'DEBRIS_BreakableBioTank_Base_C_OnBreak::K2Node_DynamicCast_AsGI_Single_Player' has a wrong offset!");
static_assert(offsetof(DEBRIS_BreakableBioTank_Base_C_OnBreak, K2Node_DynamicCast_bSuccess) == 0x000018, "Member 'DEBRIS_BreakableBioTank_Base_C_OnBreak::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(DEBRIS_BreakableBioTank_Base_C_OnBreak, CallFunc_Add_ByteByte_ReturnValue) == 0x000019, "Member 'DEBRIS_BreakableBioTank_Base_C_OnBreak::CallFunc_Add_ByteByte_ReturnValue' has a wrong offset!");
static_assert(offsetof(DEBRIS_BreakableBioTank_Base_C_OnBreak, CallFunc_SpawnDecal_Result) == 0x000020, "Member 'DEBRIS_BreakableBioTank_Base_C_OnBreak::CallFunc_SpawnDecal_Result' has a wrong offset!");
static_assert(offsetof(DEBRIS_BreakableBioTank_Base_C_OnBreak, CallFunc_K2_GetComponentToWorld_ReturnValue) == 0x000030, "Member 'DEBRIS_BreakableBioTank_Base_C_OnBreak::CallFunc_K2_GetComponentToWorld_ReturnValue' has a wrong offset!");
static_assert(offsetof(DEBRIS_BreakableBioTank_Base_C_OnBreak, CallFunc_K2_GetComponentToWorld_ReturnValue_1) == 0x000060, "Member 'DEBRIS_BreakableBioTank_Base_C_OnBreak::CallFunc_K2_GetComponentToWorld_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(DEBRIS_BreakableBioTank_Base_C_OnBreak, CallFunc_GetGameInstance_ReturnValue_1) == 0x000090, "Member 'DEBRIS_BreakableBioTank_Base_C_OnBreak::CallFunc_GetGameInstance_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(DEBRIS_BreakableBioTank_Base_C_OnBreak, CallFunc_K2_GetComponentLocation_ReturnValue) == 0x000098, "Member 'DEBRIS_BreakableBioTank_Base_C_OnBreak::CallFunc_K2_GetComponentLocation_ReturnValue' has a wrong offset!");
static_assert(offsetof(DEBRIS_BreakableBioTank_Base_C_OnBreak, K2Node_DynamicCast_AsGI_Single_Player_1) == 0x0000A8, "Member 'DEBRIS_BreakableBioTank_Base_C_OnBreak::K2Node_DynamicCast_AsGI_Single_Player_1' has a wrong offset!");
static_assert(offsetof(DEBRIS_BreakableBioTank_Base_C_OnBreak, K2Node_DynamicCast_bSuccess_1) == 0x0000B0, "Member 'DEBRIS_BreakableBioTank_Base_C_OnBreak::K2Node_DynamicCast_bSuccess_1' has a wrong offset!");
static_assert(offsetof(DEBRIS_BreakableBioTank_Base_C_OnBreak, CallFunc_GetGameInstance_ReturnValue_2) == 0x0000B8, "Member 'DEBRIS_BreakableBioTank_Base_C_OnBreak::CallFunc_GetGameInstance_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(DEBRIS_BreakableBioTank_Base_C_OnBreak, K2Node_DynamicCast_AsGI_Single_Player_2) == 0x0000C0, "Member 'DEBRIS_BreakableBioTank_Base_C_OnBreak::K2Node_DynamicCast_AsGI_Single_Player_2' has a wrong offset!");
static_assert(offsetof(DEBRIS_BreakableBioTank_Base_C_OnBreak, K2Node_DynamicCast_bSuccess_2) == 0x0000C8, "Member 'DEBRIS_BreakableBioTank_Base_C_OnBreak::K2Node_DynamicCast_bSuccess_2' has a wrong offset!");
static_assert(offsetof(DEBRIS_BreakableBioTank_Base_C_OnBreak, CallFunc_OnBreak_Result) == 0x0000C9, "Member 'DEBRIS_BreakableBioTank_Base_C_OnBreak::CallFunc_OnBreak_Result' has a wrong offset!");

// Function DEBRIS_BreakableBioTank_Base.DEBRIS_BreakableBioTank_Base_C.UpdateBrokenSettings
// 0x0038 (0x0038 - 0x0000)
struct DEBRIS_BreakableBioTank_Base_C_UpdateBrokenSettings final
{
public:
	bool                                          DuringBeginPlay;                                   // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Temp_bool_Variable;                                // 0x0001(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_2[0x2];                                        // 0x0002(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         Temp_float_Variable;                               // 0x0004(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Temp_float_Variable_1;                             // 0x0008(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TDelegate<void()>                             K2Node_CreateDelegate_OutputDelegate;              // 0x000C(0x0010)(ZeroConstructor, NoDestructor)
	float                                         K2Node_Select_Default;                             // 0x001C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_K2_IsTimerActiveHandle_ReturnValue;       // 0x0020(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_21[0x7];                                       // 0x0021(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTimerHandle                           CallFunc_K2_SetTimerDelegate_ReturnValue;          // 0x0028(0x0008)(NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Not_PreBool_ReturnValue;                  // 0x0030(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Greater_ByteByte_ReturnValue;             // 0x0031(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(DEBRIS_BreakableBioTank_Base_C_UpdateBrokenSettings) == 0x000008, "Wrong alignment on DEBRIS_BreakableBioTank_Base_C_UpdateBrokenSettings");
static_assert(sizeof(DEBRIS_BreakableBioTank_Base_C_UpdateBrokenSettings) == 0x000038, "Wrong size on DEBRIS_BreakableBioTank_Base_C_UpdateBrokenSettings");
static_assert(offsetof(DEBRIS_BreakableBioTank_Base_C_UpdateBrokenSettings, DuringBeginPlay) == 0x000000, "Member 'DEBRIS_BreakableBioTank_Base_C_UpdateBrokenSettings::DuringBeginPlay' has a wrong offset!");
static_assert(offsetof(DEBRIS_BreakableBioTank_Base_C_UpdateBrokenSettings, Temp_bool_Variable) == 0x000001, "Member 'DEBRIS_BreakableBioTank_Base_C_UpdateBrokenSettings::Temp_bool_Variable' has a wrong offset!");
static_assert(offsetof(DEBRIS_BreakableBioTank_Base_C_UpdateBrokenSettings, Temp_float_Variable) == 0x000004, "Member 'DEBRIS_BreakableBioTank_Base_C_UpdateBrokenSettings::Temp_float_Variable' has a wrong offset!");
static_assert(offsetof(DEBRIS_BreakableBioTank_Base_C_UpdateBrokenSettings, Temp_float_Variable_1) == 0x000008, "Member 'DEBRIS_BreakableBioTank_Base_C_UpdateBrokenSettings::Temp_float_Variable_1' has a wrong offset!");
static_assert(offsetof(DEBRIS_BreakableBioTank_Base_C_UpdateBrokenSettings, K2Node_CreateDelegate_OutputDelegate) == 0x00000C, "Member 'DEBRIS_BreakableBioTank_Base_C_UpdateBrokenSettings::K2Node_CreateDelegate_OutputDelegate' has a wrong offset!");
static_assert(offsetof(DEBRIS_BreakableBioTank_Base_C_UpdateBrokenSettings, K2Node_Select_Default) == 0x00001C, "Member 'DEBRIS_BreakableBioTank_Base_C_UpdateBrokenSettings::K2Node_Select_Default' has a wrong offset!");
static_assert(offsetof(DEBRIS_BreakableBioTank_Base_C_UpdateBrokenSettings, CallFunc_K2_IsTimerActiveHandle_ReturnValue) == 0x000020, "Member 'DEBRIS_BreakableBioTank_Base_C_UpdateBrokenSettings::CallFunc_K2_IsTimerActiveHandle_ReturnValue' has a wrong offset!");
static_assert(offsetof(DEBRIS_BreakableBioTank_Base_C_UpdateBrokenSettings, CallFunc_K2_SetTimerDelegate_ReturnValue) == 0x000028, "Member 'DEBRIS_BreakableBioTank_Base_C_UpdateBrokenSettings::CallFunc_K2_SetTimerDelegate_ReturnValue' has a wrong offset!");
static_assert(offsetof(DEBRIS_BreakableBioTank_Base_C_UpdateBrokenSettings, CallFunc_Not_PreBool_ReturnValue) == 0x000030, "Member 'DEBRIS_BreakableBioTank_Base_C_UpdateBrokenSettings::CallFunc_Not_PreBool_ReturnValue' has a wrong offset!");
static_assert(offsetof(DEBRIS_BreakableBioTank_Base_C_UpdateBrokenSettings, CallFunc_Greater_ByteByte_ReturnValue) == 0x000031, "Member 'DEBRIS_BreakableBioTank_Base_C_UpdateBrokenSettings::CallFunc_Greater_ByteByte_ReturnValue' has a wrong offset!");

}

