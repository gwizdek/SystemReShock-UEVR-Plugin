#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: ANIMBP_MobileLaser

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "Engine_classes.hpp"
#include "CoreUObject_structs.hpp"
#include "ENUM_TargetType_structs.hpp"
#include "AnimGraphRuntime_structs.hpp"
#include "ENUM_DeathBlowType_structs.hpp"
#include "ENUM_Emotions_structs.hpp"


namespace SDK
{

// AnimBlueprintGeneratedClass ANIMBP_MobileLaser.ANIMBP_MobileLaser_C
// 0x15A0 (0x1860 - 0x02C0)
class UANIMBP_MobileLaser_C final : public UAnimInstance
{
public:
	uint8                                         Pad_2B8[0x8];                                      // 0x02B8(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x02C0(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	struct FAnimNode_Root                         AnimGraphNode_Root;                                // 0x02C8(0x0030)()
	struct FAnimNode_BlendListByBool              AnimGraphNode_BlendListByBool_2;                   // 0x02F8(0x00A0)()
	struct FAnimNode_SequencePlayer               AnimGraphNode_SequencePlayer_2;                    // 0x0398(0x0080)()
	struct FAnimNode_LayeredBoneBlend             AnimGraphNode_LayeredBoneBlend;                    // 0x0418(0x00C0)()
	struct FAnimNode_SequenceEvaluator            AnimGraphNode_SequenceEvaluator_5;                 // 0x04D8(0x0050)()
	struct FAnimNode_SequenceEvaluator            AnimGraphNode_SequenceEvaluator_4;                 // 0x0528(0x0050)()
	struct FAnimNode_SequencePlayer               AnimGraphNode_SequencePlayer_1;                    // 0x0578(0x0080)()
	struct FAnimNode_ApplyAdditive                AnimGraphNode_ApplyAdditive_3;                     // 0x05F8(0x00C8)()
	struct FAnimNode_ApplyAdditive                AnimGraphNode_ApplyAdditive_2;                     // 0x06C0(0x00C8)()
	struct FAnimNode_SequenceEvaluator            AnimGraphNode_SequenceEvaluator_3;                 // 0x0788(0x0050)()
	struct FAnimNode_ApplyAdditive                AnimGraphNode_ApplyAdditive_1;                     // 0x07D8(0x00C8)()
	struct FAnimNode_SequenceEvaluator            AnimGraphNode_SequenceEvaluator_2;                 // 0x08A0(0x0050)()
	struct FAnimNode_ApplyAdditive                AnimGraphNode_ApplyAdditive;                       // 0x08F0(0x00C8)()
	struct FAnimNode_SequenceEvaluator            AnimGraphNode_SequenceEvaluator_1;                 // 0x09B8(0x0050)()
	struct FAnimNode_SequenceEvaluator            AnimGraphNode_SequenceEvaluator;                   // 0x0A08(0x0050)()
	struct FAnimNode_ConvertLocalToComponentSpace AnimGraphNode_LocalToComponentSpace;               // 0x0A58(0x0020)()
	struct FAnimNode_ModifyBone                   AnimGraphNode_ModifyBone_1;                        // 0x0A78(0x0108)()
	struct FAnimNode_ConvertComponentToLocalSpace AnimGraphNode_ComponentToLocalSpace;               // 0x0B80(0x0020)()
	struct FAnimNode_ModifyBone                   AnimGraphNode_ModifyBone;                          // 0x0BA0(0x0108)()
	uint8                                         Pad_CA8[0x8];                                      // 0x0CA8(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FAnimNode_RigidBody                    AnimGraphNode_RigidBody;                           // 0x0CB0(0x0830)()
	struct FAnimNode_PoseSnapshot                 AnimGraphNode_PoseSnapshot;                        // 0x14E0(0x0090)()
	struct FAnimNode_BlendListByBool              AnimGraphNode_BlendListByBool_1;                   // 0x1570(0x00A0)()
	struct FAnimNode_BlendListByBool              AnimGraphNode_BlendListByBool;                     // 0x1610(0x00A0)()
	struct FAnimNode_SequencePlayer               AnimGraphNode_SequencePlayer;                      // 0x16B0(0x0080)()
	struct FAnimNode_Slot                         AnimGraphNode_Slot;                                // 0x1730(0x0048)()
	bool                                          IsActive;                                          // 0x1778(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_1779[0x7];                                     // 0x1779(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class APAWN_Enemy_C*                          Pawn_Enemy;                                        // 0x1780(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class USkeletalMeshComponent*                 Mesh;                                              // 0x1788(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Delta_Time_X;                                      // 0x1790(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         TrackLeftPhase;                                    // 0x1794(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         TrackRightPhase;                                   // 0x1798(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         HalfTrackLength;                                   // 0x179C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UCapsuleComponent*                      Capsule_Component;                                 // 0x17A0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                PreviousLocation;                                  // 0x17A8(0x000C)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               PreviousRotation;                                  // 0x17B4(0x000C)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	float                                         Distance;                                          // 0x17C0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Rotation;                                          // 0x17C4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         PitchLean;                                         // 0x17C8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         RollLean;                                          // 0x17CC(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         MovementNoise;                                     // 0x17D0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         AimHorizontal;                                     // 0x17D4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         AimVertical;                                       // 0x17D8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               LaserSpinOuter;                                    // 0x17DC(0x000C)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	struct FRotator                               LaserSpinInner;                                    // 0x17E8(0x000C)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	float                                         LeanFixedUpdateRate;                               // 0x17F4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         LeanAccumTime;                                     // 0x17F8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         LeanAccumDistance;                                 // 0x17FC(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         LeanAccumRotation;                                 // 0x1800(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Linear_Speed;                                      // 0x1804(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Angular_Speed;                                     // 0x1808(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CurrentLaserSpinOuter;                             // 0x180C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CurrentLaserSpinInner;                             // 0x1810(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         LaserSpinMultiplier;                               // 0x1814(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         AimHorizontalSkewed;                               // 0x1818(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         AimVerticalSkewed;                                 // 0x181C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         TargetAimHorizontal;                               // 0x1820(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         TargetAimVertical;                                 // 0x1824(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         AimSpeedFactor;                                    // 0x1828(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          IsLockedOnAimTarget;                               // 0x182C(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_182D[0x3];                                     // 0x182D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class UOBJ_EnemyTarget_C*                     AimTarget;                                         // 0x1830(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          AggressiveLaserSpin;                               // 0x1838(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_1839[0x3];                                     // 0x1839(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         LaserSpinChangeRate;                               // 0x183C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector2D                              LaserSpinMinMax;                                   // 0x1840(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ENUM_TargetType                               AimTargetType;                                     // 0x1848(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          IsAlive;                                           // 0x1849(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_184A[0x6];                                     // 0x184A(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class UAnimSequenceBase*                      StunnedAnimSequence;                               // 0x1850(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          UseStunnedSequence;                                // 0x1858(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)

public:
	void ExecuteUbergraph_ANIMBP_MobileLaser(int32 EntryPoint);
	void GetReferences();
	void BlueprintUpdateAnimation(float DeltaTimeX);
	void UpdateLeanParameters(int32* IterationCount, float* LinearSpeed, float* AngularSpeed);
	void UpdateAimSettings(float DeltaTime);
	void UpdateLaserSpin(float DeltaTime);
	void GetTargetLocalAimDirection(struct FVector* TargetLocalDirection);
	void GetCurrentLocalAimDirection(struct FVector* TargetLocalDirection);
	void WorldDirectionToLocalDirection(const struct FVector& WorldDirection, struct FVector* LocalDirection);
	void LocalDirectionToWorldDirection(const struct FVector& WorldDirection, struct FVector* LocalDirection);
	void HorizontalVerticalToLocalRotator(const struct FVector2D& HorizontalVertical, struct FRotator* LocalRotator);
	void LocalRotatorToHorizontalVertical(const struct FRotator& LocalRotator, struct FVector2D* HorizontalVertical);
	void AnimGraph(struct FPoseLink* AnimGraph_0);
	void SetSprintEnabled(bool SprintEnabled, bool* Result);
	void SetTravelMode(bool TravelModeOn, bool* Result);
	void SetAimTarget(class UOBJ_EnemyTarget_C* Target, bool* Result);
	void GetIdleOverrideSequence(class UAnimSequenceBase** IdleOverride);
	void SetIdleOverrideSequence(class UAnimSequenceBase* IdleOverride, bool* Result);
	void SetRelativeAimAngleOffset(float YawOffset, float PitchOffset, float Alpha, bool* Result);
	void GetRotation(struct FRotator* AnimRotationPerSecond, float* AnimRotationAlpha);
	void GetStance(ENUM_Emotions* Stance);
	void SetStance(ENUM_Emotions Stance, bool* Result);
	void SetCatatonic(bool State, bool* Result);
	void SetStandingTurn(float SignedAngleToTarget, bool IsStanding, bool* Result);
	void ReceiveDeathBlow(ENUM_DeathBlowType BodyPart, bool* Result);
	void ReceiveImpact(const struct FVector& Impulse, const struct FVector& ImpactLocation, const struct FVector& ImpactNormal, class FName BoneName, const class FString& DamageType, float DamageAmount, float FlinchTime, bool* Result);
	void SetIsAlive(bool IsAlive_0, bool* Result);
	void SetMovementParameters(const struct FVector& Velocity, const struct FRotator& Rotation_0, const struct FRotator& DesiredRotation, bool* Result);
	void SetLookAtAlpha(float Alpha, bool* Result);
	void SetLookAtLocation(const struct FVector& Location, bool* Result);
	void GetAimTarget(class UOBJ_EnemyTarget_C** Target);
	void SetStunnedSequence(class UAnimSequence* StunnedSequence, bool* Result);
	void IsStunned(bool* Result);
	void SetVoiceAmplitude(float VoiceAmplitude, bool* Result);

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"ANIMBP_MobileLaser_C">();
	}
	static class UANIMBP_MobileLaser_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<UANIMBP_MobileLaser_C>();
	}
};
static_assert(alignof(UANIMBP_MobileLaser_C) == 0x000010, "Wrong alignment on UANIMBP_MobileLaser_C");
static_assert(sizeof(UANIMBP_MobileLaser_C) == 0x001860, "Wrong size on UANIMBP_MobileLaser_C");
static_assert(offsetof(UANIMBP_MobileLaser_C, UberGraphFrame) == 0x0002C0, "Member 'UANIMBP_MobileLaser_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(UANIMBP_MobileLaser_C, AnimGraphNode_Root) == 0x0002C8, "Member 'UANIMBP_MobileLaser_C::AnimGraphNode_Root' has a wrong offset!");
static_assert(offsetof(UANIMBP_MobileLaser_C, AnimGraphNode_BlendListByBool_2) == 0x0002F8, "Member 'UANIMBP_MobileLaser_C::AnimGraphNode_BlendListByBool_2' has a wrong offset!");
static_assert(offsetof(UANIMBP_MobileLaser_C, AnimGraphNode_SequencePlayer_2) == 0x000398, "Member 'UANIMBP_MobileLaser_C::AnimGraphNode_SequencePlayer_2' has a wrong offset!");
static_assert(offsetof(UANIMBP_MobileLaser_C, AnimGraphNode_LayeredBoneBlend) == 0x000418, "Member 'UANIMBP_MobileLaser_C::AnimGraphNode_LayeredBoneBlend' has a wrong offset!");
static_assert(offsetof(UANIMBP_MobileLaser_C, AnimGraphNode_SequenceEvaluator_5) == 0x0004D8, "Member 'UANIMBP_MobileLaser_C::AnimGraphNode_SequenceEvaluator_5' has a wrong offset!");
static_assert(offsetof(UANIMBP_MobileLaser_C, AnimGraphNode_SequenceEvaluator_4) == 0x000528, "Member 'UANIMBP_MobileLaser_C::AnimGraphNode_SequenceEvaluator_4' has a wrong offset!");
static_assert(offsetof(UANIMBP_MobileLaser_C, AnimGraphNode_SequencePlayer_1) == 0x000578, "Member 'UANIMBP_MobileLaser_C::AnimGraphNode_SequencePlayer_1' has a wrong offset!");
static_assert(offsetof(UANIMBP_MobileLaser_C, AnimGraphNode_ApplyAdditive_3) == 0x0005F8, "Member 'UANIMBP_MobileLaser_C::AnimGraphNode_ApplyAdditive_3' has a wrong offset!");
static_assert(offsetof(UANIMBP_MobileLaser_C, AnimGraphNode_ApplyAdditive_2) == 0x0006C0, "Member 'UANIMBP_MobileLaser_C::AnimGraphNode_ApplyAdditive_2' has a wrong offset!");
static_assert(offsetof(UANIMBP_MobileLaser_C, AnimGraphNode_SequenceEvaluator_3) == 0x000788, "Member 'UANIMBP_MobileLaser_C::AnimGraphNode_SequenceEvaluator_3' has a wrong offset!");
static_assert(offsetof(UANIMBP_MobileLaser_C, AnimGraphNode_ApplyAdditive_1) == 0x0007D8, "Member 'UANIMBP_MobileLaser_C::AnimGraphNode_ApplyAdditive_1' has a wrong offset!");
static_assert(offsetof(UANIMBP_MobileLaser_C, AnimGraphNode_SequenceEvaluator_2) == 0x0008A0, "Member 'UANIMBP_MobileLaser_C::AnimGraphNode_SequenceEvaluator_2' has a wrong offset!");
static_assert(offsetof(UANIMBP_MobileLaser_C, AnimGraphNode_ApplyAdditive) == 0x0008F0, "Member 'UANIMBP_MobileLaser_C::AnimGraphNode_ApplyAdditive' has a wrong offset!");
static_assert(offsetof(UANIMBP_MobileLaser_C, AnimGraphNode_SequenceEvaluator_1) == 0x0009B8, "Member 'UANIMBP_MobileLaser_C::AnimGraphNode_SequenceEvaluator_1' has a wrong offset!");
static_assert(offsetof(UANIMBP_MobileLaser_C, AnimGraphNode_SequenceEvaluator) == 0x000A08, "Member 'UANIMBP_MobileLaser_C::AnimGraphNode_SequenceEvaluator' has a wrong offset!");
static_assert(offsetof(UANIMBP_MobileLaser_C, AnimGraphNode_LocalToComponentSpace) == 0x000A58, "Member 'UANIMBP_MobileLaser_C::AnimGraphNode_LocalToComponentSpace' has a wrong offset!");
static_assert(offsetof(UANIMBP_MobileLaser_C, AnimGraphNode_ModifyBone_1) == 0x000A78, "Member 'UANIMBP_MobileLaser_C::AnimGraphNode_ModifyBone_1' has a wrong offset!");
static_assert(offsetof(UANIMBP_MobileLaser_C, AnimGraphNode_ComponentToLocalSpace) == 0x000B80, "Member 'UANIMBP_MobileLaser_C::AnimGraphNode_ComponentToLocalSpace' has a wrong offset!");
static_assert(offsetof(UANIMBP_MobileLaser_C, AnimGraphNode_ModifyBone) == 0x000BA0, "Member 'UANIMBP_MobileLaser_C::AnimGraphNode_ModifyBone' has a wrong offset!");
static_assert(offsetof(UANIMBP_MobileLaser_C, AnimGraphNode_RigidBody) == 0x000CB0, "Member 'UANIMBP_MobileLaser_C::AnimGraphNode_RigidBody' has a wrong offset!");
static_assert(offsetof(UANIMBP_MobileLaser_C, AnimGraphNode_PoseSnapshot) == 0x0014E0, "Member 'UANIMBP_MobileLaser_C::AnimGraphNode_PoseSnapshot' has a wrong offset!");
static_assert(offsetof(UANIMBP_MobileLaser_C, AnimGraphNode_BlendListByBool_1) == 0x001570, "Member 'UANIMBP_MobileLaser_C::AnimGraphNode_BlendListByBool_1' has a wrong offset!");
static_assert(offsetof(UANIMBP_MobileLaser_C, AnimGraphNode_BlendListByBool) == 0x001610, "Member 'UANIMBP_MobileLaser_C::AnimGraphNode_BlendListByBool' has a wrong offset!");
static_assert(offsetof(UANIMBP_MobileLaser_C, AnimGraphNode_SequencePlayer) == 0x0016B0, "Member 'UANIMBP_MobileLaser_C::AnimGraphNode_SequencePlayer' has a wrong offset!");
static_assert(offsetof(UANIMBP_MobileLaser_C, AnimGraphNode_Slot) == 0x001730, "Member 'UANIMBP_MobileLaser_C::AnimGraphNode_Slot' has a wrong offset!");
static_assert(offsetof(UANIMBP_MobileLaser_C, IsActive) == 0x001778, "Member 'UANIMBP_MobileLaser_C::IsActive' has a wrong offset!");
static_assert(offsetof(UANIMBP_MobileLaser_C, Pawn_Enemy) == 0x001780, "Member 'UANIMBP_MobileLaser_C::Pawn_Enemy' has a wrong offset!");
static_assert(offsetof(UANIMBP_MobileLaser_C, Mesh) == 0x001788, "Member 'UANIMBP_MobileLaser_C::Mesh' has a wrong offset!");
static_assert(offsetof(UANIMBP_MobileLaser_C, Delta_Time_X) == 0x001790, "Member 'UANIMBP_MobileLaser_C::Delta_Time_X' has a wrong offset!");
static_assert(offsetof(UANIMBP_MobileLaser_C, TrackLeftPhase) == 0x001794, "Member 'UANIMBP_MobileLaser_C::TrackLeftPhase' has a wrong offset!");
static_assert(offsetof(UANIMBP_MobileLaser_C, TrackRightPhase) == 0x001798, "Member 'UANIMBP_MobileLaser_C::TrackRightPhase' has a wrong offset!");
static_assert(offsetof(UANIMBP_MobileLaser_C, HalfTrackLength) == 0x00179C, "Member 'UANIMBP_MobileLaser_C::HalfTrackLength' has a wrong offset!");
static_assert(offsetof(UANIMBP_MobileLaser_C, Capsule_Component) == 0x0017A0, "Member 'UANIMBP_MobileLaser_C::Capsule_Component' has a wrong offset!");
static_assert(offsetof(UANIMBP_MobileLaser_C, PreviousLocation) == 0x0017A8, "Member 'UANIMBP_MobileLaser_C::PreviousLocation' has a wrong offset!");
static_assert(offsetof(UANIMBP_MobileLaser_C, PreviousRotation) == 0x0017B4, "Member 'UANIMBP_MobileLaser_C::PreviousRotation' has a wrong offset!");
static_assert(offsetof(UANIMBP_MobileLaser_C, Distance) == 0x0017C0, "Member 'UANIMBP_MobileLaser_C::Distance' has a wrong offset!");
static_assert(offsetof(UANIMBP_MobileLaser_C, Rotation) == 0x0017C4, "Member 'UANIMBP_MobileLaser_C::Rotation' has a wrong offset!");
static_assert(offsetof(UANIMBP_MobileLaser_C, PitchLean) == 0x0017C8, "Member 'UANIMBP_MobileLaser_C::PitchLean' has a wrong offset!");
static_assert(offsetof(UANIMBP_MobileLaser_C, RollLean) == 0x0017CC, "Member 'UANIMBP_MobileLaser_C::RollLean' has a wrong offset!");
static_assert(offsetof(UANIMBP_MobileLaser_C, MovementNoise) == 0x0017D0, "Member 'UANIMBP_MobileLaser_C::MovementNoise' has a wrong offset!");
static_assert(offsetof(UANIMBP_MobileLaser_C, AimHorizontal) == 0x0017D4, "Member 'UANIMBP_MobileLaser_C::AimHorizontal' has a wrong offset!");
static_assert(offsetof(UANIMBP_MobileLaser_C, AimVertical) == 0x0017D8, "Member 'UANIMBP_MobileLaser_C::AimVertical' has a wrong offset!");
static_assert(offsetof(UANIMBP_MobileLaser_C, LaserSpinOuter) == 0x0017DC, "Member 'UANIMBP_MobileLaser_C::LaserSpinOuter' has a wrong offset!");
static_assert(offsetof(UANIMBP_MobileLaser_C, LaserSpinInner) == 0x0017E8, "Member 'UANIMBP_MobileLaser_C::LaserSpinInner' has a wrong offset!");
static_assert(offsetof(UANIMBP_MobileLaser_C, LeanFixedUpdateRate) == 0x0017F4, "Member 'UANIMBP_MobileLaser_C::LeanFixedUpdateRate' has a wrong offset!");
static_assert(offsetof(UANIMBP_MobileLaser_C, LeanAccumTime) == 0x0017F8, "Member 'UANIMBP_MobileLaser_C::LeanAccumTime' has a wrong offset!");
static_assert(offsetof(UANIMBP_MobileLaser_C, LeanAccumDistance) == 0x0017FC, "Member 'UANIMBP_MobileLaser_C::LeanAccumDistance' has a wrong offset!");
static_assert(offsetof(UANIMBP_MobileLaser_C, LeanAccumRotation) == 0x001800, "Member 'UANIMBP_MobileLaser_C::LeanAccumRotation' has a wrong offset!");
static_assert(offsetof(UANIMBP_MobileLaser_C, Linear_Speed) == 0x001804, "Member 'UANIMBP_MobileLaser_C::Linear_Speed' has a wrong offset!");
static_assert(offsetof(UANIMBP_MobileLaser_C, Angular_Speed) == 0x001808, "Member 'UANIMBP_MobileLaser_C::Angular_Speed' has a wrong offset!");
static_assert(offsetof(UANIMBP_MobileLaser_C, CurrentLaserSpinOuter) == 0x00180C, "Member 'UANIMBP_MobileLaser_C::CurrentLaserSpinOuter' has a wrong offset!");
static_assert(offsetof(UANIMBP_MobileLaser_C, CurrentLaserSpinInner) == 0x001810, "Member 'UANIMBP_MobileLaser_C::CurrentLaserSpinInner' has a wrong offset!");
static_assert(offsetof(UANIMBP_MobileLaser_C, LaserSpinMultiplier) == 0x001814, "Member 'UANIMBP_MobileLaser_C::LaserSpinMultiplier' has a wrong offset!");
static_assert(offsetof(UANIMBP_MobileLaser_C, AimHorizontalSkewed) == 0x001818, "Member 'UANIMBP_MobileLaser_C::AimHorizontalSkewed' has a wrong offset!");
static_assert(offsetof(UANIMBP_MobileLaser_C, AimVerticalSkewed) == 0x00181C, "Member 'UANIMBP_MobileLaser_C::AimVerticalSkewed' has a wrong offset!");
static_assert(offsetof(UANIMBP_MobileLaser_C, TargetAimHorizontal) == 0x001820, "Member 'UANIMBP_MobileLaser_C::TargetAimHorizontal' has a wrong offset!");
static_assert(offsetof(UANIMBP_MobileLaser_C, TargetAimVertical) == 0x001824, "Member 'UANIMBP_MobileLaser_C::TargetAimVertical' has a wrong offset!");
static_assert(offsetof(UANIMBP_MobileLaser_C, AimSpeedFactor) == 0x001828, "Member 'UANIMBP_MobileLaser_C::AimSpeedFactor' has a wrong offset!");
static_assert(offsetof(UANIMBP_MobileLaser_C, IsLockedOnAimTarget) == 0x00182C, "Member 'UANIMBP_MobileLaser_C::IsLockedOnAimTarget' has a wrong offset!");
static_assert(offsetof(UANIMBP_MobileLaser_C, AimTarget) == 0x001830, "Member 'UANIMBP_MobileLaser_C::AimTarget' has a wrong offset!");
static_assert(offsetof(UANIMBP_MobileLaser_C, AggressiveLaserSpin) == 0x001838, "Member 'UANIMBP_MobileLaser_C::AggressiveLaserSpin' has a wrong offset!");
static_assert(offsetof(UANIMBP_MobileLaser_C, LaserSpinChangeRate) == 0x00183C, "Member 'UANIMBP_MobileLaser_C::LaserSpinChangeRate' has a wrong offset!");
static_assert(offsetof(UANIMBP_MobileLaser_C, LaserSpinMinMax) == 0x001840, "Member 'UANIMBP_MobileLaser_C::LaserSpinMinMax' has a wrong offset!");
static_assert(offsetof(UANIMBP_MobileLaser_C, AimTargetType) == 0x001848, "Member 'UANIMBP_MobileLaser_C::AimTargetType' has a wrong offset!");
static_assert(offsetof(UANIMBP_MobileLaser_C, IsAlive) == 0x001849, "Member 'UANIMBP_MobileLaser_C::IsAlive' has a wrong offset!");
static_assert(offsetof(UANIMBP_MobileLaser_C, StunnedAnimSequence) == 0x001850, "Member 'UANIMBP_MobileLaser_C::StunnedAnimSequence' has a wrong offset!");
static_assert(offsetof(UANIMBP_MobileLaser_C, UseStunnedSequence) == 0x001858, "Member 'UANIMBP_MobileLaser_C::UseStunnedSequence' has a wrong offset!");

}

