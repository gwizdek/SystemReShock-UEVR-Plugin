#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: WIDGET_OptionsMenu_Controls_BindsList

#include "Basic.hpp"

#include "STRUCT_BoundInputActionPair_structs.hpp"
#include "WIDGET_MenuListBase_classes.hpp"
#include "ENUM_PrimarySecondary_structs.hpp"
#include "ENUM_InputCategory_structs.hpp"


namespace SDK
{

// WidgetBlueprintGeneratedClass WIDGET_OptionsMenu_Controls_BindsList.WIDGET_OptionsMenu_Controls_BindsList_C
// 0x0230 (0x04F8 - 0x02C8)
class UWIDGET_OptionsMenu_Controls_BindsList_C : public UWIDGET_MenuListBase_C
{
public:
	bool                                          IsGamepad;                                         // 0x02C2(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          IsAnOptionListeningForInput;                       // 0x02C3(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_2C4[0x4];                                      // 0x02C4(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TMap<class FName, struct FSTRUCT_BoundInputActionPair> RealspaceKeyMap;                                   // 0x02C8(0x0050)(Edit, BlueprintVisible, DisableEditOnInstance)
	TMap<class FName, struct FSTRUCT_BoundInputActionPair> CyberspaceKeyMap;                                  // 0x0318(0x0050)(Edit, BlueprintVisible, DisableEditOnInstance)
	TMap<class FName, struct FSTRUCT_BoundInputActionPair> MinigameKeyMap;                                    // 0x0368(0x0050)(Edit, BlueprintVisible, DisableEditOnInstance)
	TMap<class FName, struct FSTRUCT_BoundInputActionPair> DefaultRealspaceKeyMap;                            // 0x03B8(0x0050)(Edit, BlueprintVisible, DisableEditOnInstance)
	TMap<class FName, struct FSTRUCT_BoundInputActionPair> DefaultCyberspaceKeyMap;                           // 0x0408(0x0050)(Edit, BlueprintVisible, DisableEditOnInstance)
	TMap<class FName, struct FSTRUCT_BoundInputActionPair> DefaultMinigameKeyMap;                             // 0x0458(0x0050)(Edit, BlueprintVisible, DisableEditOnInstance)
	TMap<class FName, class UOPTION_Controls_InputBind_C*> OptionKeyMap;                                      // 0x04A8(0x0050)(Edit, BlueprintVisible, DisableEditOnInstance, ContainsInstancedReference)

public:
	void InitializeList(class UWIDGET_MenuBase_C* ParentScreen);
	void StashKeyAction(class FName ActionName, const struct FKey& KeyMapping, ENUM_PrimarySecondary Rank);
	void GetStashedKeyForAction(class FName ActionName, ENUM_PrimarySecondary Rank, struct FKey* Result);
	void IsGamepadBindsList(bool* Result);
	void SetIsOptionListeningForInput(bool IsListening);
	void GetIsOptionListeningForInput(bool* Result);
	void UpdateCurrentVisuals();
	void HasInputKeyMapChanged(const TMap<class FName, struct FSTRUCT_BoundInputActionPair>& OldKeyMap, const TMap<class FName, struct FSTRUCT_BoundInputActionPair>& NewKeyMap, bool* Result);
	void ResetStashedBinds();
	void OnListClose();
	void OnListOpen();
	void ReceiveNavAlt1(bool InputState, bool* Result);
	void ReceiveNavAlt2(bool InputState, bool* Result);
	void ReceiveNavBack(bool InputState, bool* Result);
	void EVENT_OnOptionChanged();

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"WIDGET_OptionsMenu_Controls_BindsList_C">();
	}
	static class UWIDGET_OptionsMenu_Controls_BindsList_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<UWIDGET_OptionsMenu_Controls_BindsList_C>();
	}
};
static_assert(alignof(UWIDGET_OptionsMenu_Controls_BindsList_C) == 0x000008, "Wrong alignment on UWIDGET_OptionsMenu_Controls_BindsList_C");
static_assert(sizeof(UWIDGET_OptionsMenu_Controls_BindsList_C) == 0x0004F8, "Wrong size on UWIDGET_OptionsMenu_Controls_BindsList_C");
static_assert(offsetof(UWIDGET_OptionsMenu_Controls_BindsList_C, IsGamepad) == 0x0002C2, "Member 'UWIDGET_OptionsMenu_Controls_BindsList_C::IsGamepad' has a wrong offset!");
static_assert(offsetof(UWIDGET_OptionsMenu_Controls_BindsList_C, IsAnOptionListeningForInput) == 0x0002C3, "Member 'UWIDGET_OptionsMenu_Controls_BindsList_C::IsAnOptionListeningForInput' has a wrong offset!");
static_assert(offsetof(UWIDGET_OptionsMenu_Controls_BindsList_C, RealspaceKeyMap) == 0x0002C8, "Member 'UWIDGET_OptionsMenu_Controls_BindsList_C::RealspaceKeyMap' has a wrong offset!");
static_assert(offsetof(UWIDGET_OptionsMenu_Controls_BindsList_C, CyberspaceKeyMap) == 0x000318, "Member 'UWIDGET_OptionsMenu_Controls_BindsList_C::CyberspaceKeyMap' has a wrong offset!");
static_assert(offsetof(UWIDGET_OptionsMenu_Controls_BindsList_C, MinigameKeyMap) == 0x000368, "Member 'UWIDGET_OptionsMenu_Controls_BindsList_C::MinigameKeyMap' has a wrong offset!");
static_assert(offsetof(UWIDGET_OptionsMenu_Controls_BindsList_C, DefaultRealspaceKeyMap) == 0x0003B8, "Member 'UWIDGET_OptionsMenu_Controls_BindsList_C::DefaultRealspaceKeyMap' has a wrong offset!");
static_assert(offsetof(UWIDGET_OptionsMenu_Controls_BindsList_C, DefaultCyberspaceKeyMap) == 0x000408, "Member 'UWIDGET_OptionsMenu_Controls_BindsList_C::DefaultCyberspaceKeyMap' has a wrong offset!");
static_assert(offsetof(UWIDGET_OptionsMenu_Controls_BindsList_C, DefaultMinigameKeyMap) == 0x000458, "Member 'UWIDGET_OptionsMenu_Controls_BindsList_C::DefaultMinigameKeyMap' has a wrong offset!");
static_assert(offsetof(UWIDGET_OptionsMenu_Controls_BindsList_C, OptionKeyMap) == 0x0004A8, "Member 'UWIDGET_OptionsMenu_Controls_BindsList_C::OptionKeyMap' has a wrong offset!");

}

