#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: WIDGET_MenuListBase

#include "Basic.hpp"

#include "UMG_classes.hpp"
#include "ENUM_MenuNavigationInput_structs.hpp"


namespace SDK
{

// WidgetBlueprintGeneratedClass WIDGET_MenuListBase.WIDGET_MenuListBase_C
// 0x0068 (0x02C8 - 0x0260)
#pragma pack(push, 0x1)
class alignas(0x08) UWIDGET_MenuListBase_C : public UUserWidget
{
public:
	int32                                         HighlightedItemIndex;                              // 0x0260(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_264[0x4];                                      // 0x0264(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UWIDGET_MenuBase_C*                     ParentScreenWidget;                                // 0x0268(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UWIDGET_MenuListItemBase_C*             HighlightedMenuListItemWidget;                     // 0x0270(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TArray<class UWIDGET_MenuListItemBase_C*>     MenuListItemArray;                                 // 0x0278(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance, ContainsInstancedReference)
	class UPanelWidget*                           PanelItemListWidget;                               // 0x0288(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	FMulticastInlineDelegateProperty_             OnMenuAction;                                      // 0x0290(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)
	FMulticastInlineDelegateProperty_             OnListDirty;                                       // 0x02A0(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)
	FMulticastInlineDelegateProperty_             OnListFullyDefault;                                // 0x02B0(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)
	bool                                          CanListClose;                                      // 0x02C0(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          IsListInteractive;                                 // 0x02C1(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)

public:
	void OnMenuAction__DelegateSignature(const class FString& Message);
	void OnListDirty__DelegateSignature(bool IsDirty);
	void OnListFullyDefault__DelegateSignature(bool IsDefault);
	void InitializeList(class UWIDGET_MenuBase_C* ParentScreen);
	void SetHighlightedListItem(int32 ItemIndex, bool SelectionState);
	void GetAllMenuListItems(TArray<class UWIDGET_MenuListItemBase_C*>* Options);
	void GetDirtyChildOptions(TArray<class UOPTION_Base_C*>* Options);
	void OnListClose();
	void OnListOpen();
	void InitializeItemArray(TArray<class UWIDGET_MenuListItemBase_C*>* MenuListItems);
	void InvokeNavManager(ENUM_MenuNavigationInput InputType, bool InputState);
	void EVENT_OnOptionChanged();
	void AreOptionsAllDefault(bool* AreAllDefault);
	void OnHighlightedItemChanged();
	void SetListInteractive(bool ListInteractive);
	void ReceiveNavTabRight(bool InputState, bool* Result);
	void ReceiveNavTabLeft(bool InputState, bool* Result);
	void ReceiveNavAlt2(bool InputState, bool* Result);
	void ReceiveNavAlt1(bool InputState, bool* Result);
	void ReceiveNavBack(bool InputState, bool* Result);
	void ReceiveNavAccept(bool InputState, bool* Result);
	void ReceiveNavRight(bool InputState, bool* Result);
	void ReceiveNavLeft(bool InputState, bool* Result);
	void ReceiveNavDown(bool InputState, bool* Result);
	void ReceiveNavUp(bool InputState, bool* Result);

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"WIDGET_MenuListBase_C">();
	}
	static class UWIDGET_MenuListBase_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<UWIDGET_MenuListBase_C>();
	}
};
#pragma pack(pop)
static_assert(alignof(UWIDGET_MenuListBase_C) == 0x000008, "Wrong alignment on UWIDGET_MenuListBase_C");
static_assert(sizeof(UWIDGET_MenuListBase_C) == 0x0002C8, "Wrong size on UWIDGET_MenuListBase_C");
static_assert(offsetof(UWIDGET_MenuListBase_C, HighlightedItemIndex) == 0x000260, "Member 'UWIDGET_MenuListBase_C::HighlightedItemIndex' has a wrong offset!");
static_assert(offsetof(UWIDGET_MenuListBase_C, ParentScreenWidget) == 0x000268, "Member 'UWIDGET_MenuListBase_C::ParentScreenWidget' has a wrong offset!");
static_assert(offsetof(UWIDGET_MenuListBase_C, HighlightedMenuListItemWidget) == 0x000270, "Member 'UWIDGET_MenuListBase_C::HighlightedMenuListItemWidget' has a wrong offset!");
static_assert(offsetof(UWIDGET_MenuListBase_C, MenuListItemArray) == 0x000278, "Member 'UWIDGET_MenuListBase_C::MenuListItemArray' has a wrong offset!");
static_assert(offsetof(UWIDGET_MenuListBase_C, PanelItemListWidget) == 0x000288, "Member 'UWIDGET_MenuListBase_C::PanelItemListWidget' has a wrong offset!");
static_assert(offsetof(UWIDGET_MenuListBase_C, OnMenuAction) == 0x000290, "Member 'UWIDGET_MenuListBase_C::OnMenuAction' has a wrong offset!");
static_assert(offsetof(UWIDGET_MenuListBase_C, OnListDirty) == 0x0002A0, "Member 'UWIDGET_MenuListBase_C::OnListDirty' has a wrong offset!");
static_assert(offsetof(UWIDGET_MenuListBase_C, OnListFullyDefault) == 0x0002B0, "Member 'UWIDGET_MenuListBase_C::OnListFullyDefault' has a wrong offset!");
static_assert(offsetof(UWIDGET_MenuListBase_C, CanListClose) == 0x0002C0, "Member 'UWIDGET_MenuListBase_C::CanListClose' has a wrong offset!");
static_assert(offsetof(UWIDGET_MenuListBase_C, IsListInteractive) == 0x0002C1, "Member 'UWIDGET_MenuListBase_C::IsListInteractive' has a wrong offset!");

}

