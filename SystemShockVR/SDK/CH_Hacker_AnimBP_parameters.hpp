#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: CH_Hacker_AnimBP

#include "Basic.hpp"

#include "ENUM_LeftRight_structs.hpp"
#include "CoreUObject_structs.hpp"
#include "Engine_structs.hpp"


namespace SDK::Params
{

// Function CH_Hacker_AnimBP.CH_Hacker_AnimBP_C.ExecuteUbergraph_CH_Hacker_AnimBP
// 0x0060 (0x0060 - 0x0000)
struct CH_Hacker_AnimBP_C_ExecuteUbergraph_CH_Hacker_AnimBP final
{
public:
	int32                                         EntryPoint;                                        // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_GetWorldDeltaSeconds_ReturnValue;         // 0x0004(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Not_PreBool_ReturnValue;                  // 0x0008(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Not_PreBool_ReturnValue_1;                // 0x0009(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BooleanAND_ReturnValue;                   // 0x000A(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BooleanAND_ReturnValue_1;                 // 0x000B(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BooleanAND_ReturnValue_2;                 // 0x000C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BooleanAND_ReturnValue_3;                 // 0x000D(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Not_PreBool_ReturnValue_2;                // 0x000E(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BooleanAND_ReturnValue_4;                 // 0x000F(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BooleanAND_ReturnValue_5;                 // 0x0010(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Not_PreBool_ReturnValue_3;                // 0x0011(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Not_PreBool_ReturnValue_4;                // 0x0012(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BooleanAND_ReturnValue_6;                 // 0x0013(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BooleanAND_ReturnValue_7;                 // 0x0014(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BooleanAND_ReturnValue_8;                 // 0x0015(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Not_PreBool_ReturnValue_5;                // 0x0016(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BooleanAND_ReturnValue_9;                 // 0x0017(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BooleanAND_ReturnValue_10;                // 0x0018(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BooleanAND_ReturnValue_11;                // 0x0019(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_1A[0x2];                                       // 0x001A(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         K2Node_Event_DeltaTimeX;                           // 0x001C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class APawn*                                  CallFunc_TryGetPawnOwner_ReturnValue;              // 0x0020(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class APAWN_Hacker_Simple_C*                  K2Node_DynamicCast_AsPAWN_Hacker_Simple;           // 0x0028(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0030(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BooleanAND_ReturnValue_12;                // 0x0031(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_32[0x6];                                       // 0x0032(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class UWeightedAverageVec3*                   CallFunc_SpawnObject_ReturnValue;                  // 0x0038(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BooleanAND_ReturnValue_13;                // 0x0040(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BooleanAND_ReturnValue_14;                // 0x0041(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_42[0x6];                                       // 0x0042(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class UWeightedAverageVec3*                   CallFunc_SpawnObject_ReturnValue_1;                // 0x0048(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_SetUseIK_Result;                          // 0x0050(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_51[0x3];                                       // 0x0051(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_SelectFloat_ReturnValue;                  // 0x0054(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_FInterpTo_Constant_ReturnValue;           // 0x0058(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(CH_Hacker_AnimBP_C_ExecuteUbergraph_CH_Hacker_AnimBP) == 0x000008, "Wrong alignment on CH_Hacker_AnimBP_C_ExecuteUbergraph_CH_Hacker_AnimBP");
static_assert(sizeof(CH_Hacker_AnimBP_C_ExecuteUbergraph_CH_Hacker_AnimBP) == 0x000060, "Wrong size on CH_Hacker_AnimBP_C_ExecuteUbergraph_CH_Hacker_AnimBP");
static_assert(offsetof(CH_Hacker_AnimBP_C_ExecuteUbergraph_CH_Hacker_AnimBP, EntryPoint) == 0x000000, "Member 'CH_Hacker_AnimBP_C_ExecuteUbergraph_CH_Hacker_AnimBP::EntryPoint' has a wrong offset!");
static_assert(offsetof(CH_Hacker_AnimBP_C_ExecuteUbergraph_CH_Hacker_AnimBP, CallFunc_GetWorldDeltaSeconds_ReturnValue) == 0x000004, "Member 'CH_Hacker_AnimBP_C_ExecuteUbergraph_CH_Hacker_AnimBP::CallFunc_GetWorldDeltaSeconds_ReturnValue' has a wrong offset!");
static_assert(offsetof(CH_Hacker_AnimBP_C_ExecuteUbergraph_CH_Hacker_AnimBP, CallFunc_Not_PreBool_ReturnValue) == 0x000008, "Member 'CH_Hacker_AnimBP_C_ExecuteUbergraph_CH_Hacker_AnimBP::CallFunc_Not_PreBool_ReturnValue' has a wrong offset!");
static_assert(offsetof(CH_Hacker_AnimBP_C_ExecuteUbergraph_CH_Hacker_AnimBP, CallFunc_Not_PreBool_ReturnValue_1) == 0x000009, "Member 'CH_Hacker_AnimBP_C_ExecuteUbergraph_CH_Hacker_AnimBP::CallFunc_Not_PreBool_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(CH_Hacker_AnimBP_C_ExecuteUbergraph_CH_Hacker_AnimBP, CallFunc_BooleanAND_ReturnValue) == 0x00000A, "Member 'CH_Hacker_AnimBP_C_ExecuteUbergraph_CH_Hacker_AnimBP::CallFunc_BooleanAND_ReturnValue' has a wrong offset!");
static_assert(offsetof(CH_Hacker_AnimBP_C_ExecuteUbergraph_CH_Hacker_AnimBP, CallFunc_BooleanAND_ReturnValue_1) == 0x00000B, "Member 'CH_Hacker_AnimBP_C_ExecuteUbergraph_CH_Hacker_AnimBP::CallFunc_BooleanAND_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(CH_Hacker_AnimBP_C_ExecuteUbergraph_CH_Hacker_AnimBP, CallFunc_BooleanAND_ReturnValue_2) == 0x00000C, "Member 'CH_Hacker_AnimBP_C_ExecuteUbergraph_CH_Hacker_AnimBP::CallFunc_BooleanAND_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(CH_Hacker_AnimBP_C_ExecuteUbergraph_CH_Hacker_AnimBP, CallFunc_BooleanAND_ReturnValue_3) == 0x00000D, "Member 'CH_Hacker_AnimBP_C_ExecuteUbergraph_CH_Hacker_AnimBP::CallFunc_BooleanAND_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(CH_Hacker_AnimBP_C_ExecuteUbergraph_CH_Hacker_AnimBP, CallFunc_Not_PreBool_ReturnValue_2) == 0x00000E, "Member 'CH_Hacker_AnimBP_C_ExecuteUbergraph_CH_Hacker_AnimBP::CallFunc_Not_PreBool_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(CH_Hacker_AnimBP_C_ExecuteUbergraph_CH_Hacker_AnimBP, CallFunc_BooleanAND_ReturnValue_4) == 0x00000F, "Member 'CH_Hacker_AnimBP_C_ExecuteUbergraph_CH_Hacker_AnimBP::CallFunc_BooleanAND_ReturnValue_4' has a wrong offset!");
static_assert(offsetof(CH_Hacker_AnimBP_C_ExecuteUbergraph_CH_Hacker_AnimBP, CallFunc_BooleanAND_ReturnValue_5) == 0x000010, "Member 'CH_Hacker_AnimBP_C_ExecuteUbergraph_CH_Hacker_AnimBP::CallFunc_BooleanAND_ReturnValue_5' has a wrong offset!");
static_assert(offsetof(CH_Hacker_AnimBP_C_ExecuteUbergraph_CH_Hacker_AnimBP, CallFunc_Not_PreBool_ReturnValue_3) == 0x000011, "Member 'CH_Hacker_AnimBP_C_ExecuteUbergraph_CH_Hacker_AnimBP::CallFunc_Not_PreBool_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(CH_Hacker_AnimBP_C_ExecuteUbergraph_CH_Hacker_AnimBP, CallFunc_Not_PreBool_ReturnValue_4) == 0x000012, "Member 'CH_Hacker_AnimBP_C_ExecuteUbergraph_CH_Hacker_AnimBP::CallFunc_Not_PreBool_ReturnValue_4' has a wrong offset!");
static_assert(offsetof(CH_Hacker_AnimBP_C_ExecuteUbergraph_CH_Hacker_AnimBP, CallFunc_BooleanAND_ReturnValue_6) == 0x000013, "Member 'CH_Hacker_AnimBP_C_ExecuteUbergraph_CH_Hacker_AnimBP::CallFunc_BooleanAND_ReturnValue_6' has a wrong offset!");
static_assert(offsetof(CH_Hacker_AnimBP_C_ExecuteUbergraph_CH_Hacker_AnimBP, CallFunc_BooleanAND_ReturnValue_7) == 0x000014, "Member 'CH_Hacker_AnimBP_C_ExecuteUbergraph_CH_Hacker_AnimBP::CallFunc_BooleanAND_ReturnValue_7' has a wrong offset!");
static_assert(offsetof(CH_Hacker_AnimBP_C_ExecuteUbergraph_CH_Hacker_AnimBP, CallFunc_BooleanAND_ReturnValue_8) == 0x000015, "Member 'CH_Hacker_AnimBP_C_ExecuteUbergraph_CH_Hacker_AnimBP::CallFunc_BooleanAND_ReturnValue_8' has a wrong offset!");
static_assert(offsetof(CH_Hacker_AnimBP_C_ExecuteUbergraph_CH_Hacker_AnimBP, CallFunc_Not_PreBool_ReturnValue_5) == 0x000016, "Member 'CH_Hacker_AnimBP_C_ExecuteUbergraph_CH_Hacker_AnimBP::CallFunc_Not_PreBool_ReturnValue_5' has a wrong offset!");
static_assert(offsetof(CH_Hacker_AnimBP_C_ExecuteUbergraph_CH_Hacker_AnimBP, CallFunc_BooleanAND_ReturnValue_9) == 0x000017, "Member 'CH_Hacker_AnimBP_C_ExecuteUbergraph_CH_Hacker_AnimBP::CallFunc_BooleanAND_ReturnValue_9' has a wrong offset!");
static_assert(offsetof(CH_Hacker_AnimBP_C_ExecuteUbergraph_CH_Hacker_AnimBP, CallFunc_BooleanAND_ReturnValue_10) == 0x000018, "Member 'CH_Hacker_AnimBP_C_ExecuteUbergraph_CH_Hacker_AnimBP::CallFunc_BooleanAND_ReturnValue_10' has a wrong offset!");
static_assert(offsetof(CH_Hacker_AnimBP_C_ExecuteUbergraph_CH_Hacker_AnimBP, CallFunc_BooleanAND_ReturnValue_11) == 0x000019, "Member 'CH_Hacker_AnimBP_C_ExecuteUbergraph_CH_Hacker_AnimBP::CallFunc_BooleanAND_ReturnValue_11' has a wrong offset!");
static_assert(offsetof(CH_Hacker_AnimBP_C_ExecuteUbergraph_CH_Hacker_AnimBP, K2Node_Event_DeltaTimeX) == 0x00001C, "Member 'CH_Hacker_AnimBP_C_ExecuteUbergraph_CH_Hacker_AnimBP::K2Node_Event_DeltaTimeX' has a wrong offset!");
static_assert(offsetof(CH_Hacker_AnimBP_C_ExecuteUbergraph_CH_Hacker_AnimBP, CallFunc_TryGetPawnOwner_ReturnValue) == 0x000020, "Member 'CH_Hacker_AnimBP_C_ExecuteUbergraph_CH_Hacker_AnimBP::CallFunc_TryGetPawnOwner_ReturnValue' has a wrong offset!");
static_assert(offsetof(CH_Hacker_AnimBP_C_ExecuteUbergraph_CH_Hacker_AnimBP, K2Node_DynamicCast_AsPAWN_Hacker_Simple) == 0x000028, "Member 'CH_Hacker_AnimBP_C_ExecuteUbergraph_CH_Hacker_AnimBP::K2Node_DynamicCast_AsPAWN_Hacker_Simple' has a wrong offset!");
static_assert(offsetof(CH_Hacker_AnimBP_C_ExecuteUbergraph_CH_Hacker_AnimBP, K2Node_DynamicCast_bSuccess) == 0x000030, "Member 'CH_Hacker_AnimBP_C_ExecuteUbergraph_CH_Hacker_AnimBP::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(CH_Hacker_AnimBP_C_ExecuteUbergraph_CH_Hacker_AnimBP, CallFunc_BooleanAND_ReturnValue_12) == 0x000031, "Member 'CH_Hacker_AnimBP_C_ExecuteUbergraph_CH_Hacker_AnimBP::CallFunc_BooleanAND_ReturnValue_12' has a wrong offset!");
static_assert(offsetof(CH_Hacker_AnimBP_C_ExecuteUbergraph_CH_Hacker_AnimBP, CallFunc_SpawnObject_ReturnValue) == 0x000038, "Member 'CH_Hacker_AnimBP_C_ExecuteUbergraph_CH_Hacker_AnimBP::CallFunc_SpawnObject_ReturnValue' has a wrong offset!");
static_assert(offsetof(CH_Hacker_AnimBP_C_ExecuteUbergraph_CH_Hacker_AnimBP, CallFunc_BooleanAND_ReturnValue_13) == 0x000040, "Member 'CH_Hacker_AnimBP_C_ExecuteUbergraph_CH_Hacker_AnimBP::CallFunc_BooleanAND_ReturnValue_13' has a wrong offset!");
static_assert(offsetof(CH_Hacker_AnimBP_C_ExecuteUbergraph_CH_Hacker_AnimBP, CallFunc_BooleanAND_ReturnValue_14) == 0x000041, "Member 'CH_Hacker_AnimBP_C_ExecuteUbergraph_CH_Hacker_AnimBP::CallFunc_BooleanAND_ReturnValue_14' has a wrong offset!");
static_assert(offsetof(CH_Hacker_AnimBP_C_ExecuteUbergraph_CH_Hacker_AnimBP, CallFunc_SpawnObject_ReturnValue_1) == 0x000048, "Member 'CH_Hacker_AnimBP_C_ExecuteUbergraph_CH_Hacker_AnimBP::CallFunc_SpawnObject_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(CH_Hacker_AnimBP_C_ExecuteUbergraph_CH_Hacker_AnimBP, CallFunc_SetUseIK_Result) == 0x000050, "Member 'CH_Hacker_AnimBP_C_ExecuteUbergraph_CH_Hacker_AnimBP::CallFunc_SetUseIK_Result' has a wrong offset!");
static_assert(offsetof(CH_Hacker_AnimBP_C_ExecuteUbergraph_CH_Hacker_AnimBP, CallFunc_SelectFloat_ReturnValue) == 0x000054, "Member 'CH_Hacker_AnimBP_C_ExecuteUbergraph_CH_Hacker_AnimBP::CallFunc_SelectFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(CH_Hacker_AnimBP_C_ExecuteUbergraph_CH_Hacker_AnimBP, CallFunc_FInterpTo_Constant_ReturnValue) == 0x000058, "Member 'CH_Hacker_AnimBP_C_ExecuteUbergraph_CH_Hacker_AnimBP::CallFunc_FInterpTo_Constant_ReturnValue' has a wrong offset!");

// Function CH_Hacker_AnimBP.CH_Hacker_AnimBP_C.BlueprintUpdateAnimation
// 0x0004 (0x0004 - 0x0000)
struct CH_Hacker_AnimBP_C_BlueprintUpdateAnimation final
{
public:
	float                                         DeltaTimeX;                                        // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(CH_Hacker_AnimBP_C_BlueprintUpdateAnimation) == 0x000004, "Wrong alignment on CH_Hacker_AnimBP_C_BlueprintUpdateAnimation");
static_assert(sizeof(CH_Hacker_AnimBP_C_BlueprintUpdateAnimation) == 0x000004, "Wrong size on CH_Hacker_AnimBP_C_BlueprintUpdateAnimation");
static_assert(offsetof(CH_Hacker_AnimBP_C_BlueprintUpdateAnimation, DeltaTimeX) == 0x000000, "Member 'CH_Hacker_AnimBP_C_BlueprintUpdateAnimation::DeltaTimeX' has a wrong offset!");

// Function CH_Hacker_AnimBP.CH_Hacker_AnimBP_C.ApplyWeightedAverageSmoothing
// 0x00A4 (0x00A4 - 0x0000)
struct CH_Hacker_AnimBP_C_ApplyWeightedAverageSmoothing final
{
public:
	struct FVector                                Location;                                          // 0x0000(0x000C)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               Rotation;                                          // 0x000C(0x000C)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FVector                                ResultLocation;                                    // 0x0018(0x000C)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               ResultRotation;                                    // 0x0024(0x000C)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FRotator                               SmoothedRotation;                                  // 0x0030(0x000C)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FVector                                SmoothedLocation;                                  // 0x003C(0x000C)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                HeadOffset;                                        // 0x0048(0x000C)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakRotator_Roll;                        // 0x0054(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakRotator_Pitch;                       // 0x0058(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakRotator_Yaw;                         // 0x005C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_MakeVector_ReturnValue;                   // 0x0060(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_GetGameTimeInSeconds_ReturnValue;         // 0x006C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_GetSmoothedVec3_ReturnValue;              // 0x0070(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_GetGameTimeInSeconds_ReturnValue_1;       // 0x007C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector_X;                            // 0x0080(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector_Y;                            // 0x0084(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector_Z;                            // 0x0088(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               CallFunc_MakeRotator_ReturnValue;                  // 0x008C(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FVector                                CallFunc_GetSmoothedVec3_ReturnValue_1;            // 0x0098(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(CH_Hacker_AnimBP_C_ApplyWeightedAverageSmoothing) == 0x000004, "Wrong alignment on CH_Hacker_AnimBP_C_ApplyWeightedAverageSmoothing");
static_assert(sizeof(CH_Hacker_AnimBP_C_ApplyWeightedAverageSmoothing) == 0x0000A4, "Wrong size on CH_Hacker_AnimBP_C_ApplyWeightedAverageSmoothing");
static_assert(offsetof(CH_Hacker_AnimBP_C_ApplyWeightedAverageSmoothing, Location) == 0x000000, "Member 'CH_Hacker_AnimBP_C_ApplyWeightedAverageSmoothing::Location' has a wrong offset!");
static_assert(offsetof(CH_Hacker_AnimBP_C_ApplyWeightedAverageSmoothing, Rotation) == 0x00000C, "Member 'CH_Hacker_AnimBP_C_ApplyWeightedAverageSmoothing::Rotation' has a wrong offset!");
static_assert(offsetof(CH_Hacker_AnimBP_C_ApplyWeightedAverageSmoothing, ResultLocation) == 0x000018, "Member 'CH_Hacker_AnimBP_C_ApplyWeightedAverageSmoothing::ResultLocation' has a wrong offset!");
static_assert(offsetof(CH_Hacker_AnimBP_C_ApplyWeightedAverageSmoothing, ResultRotation) == 0x000024, "Member 'CH_Hacker_AnimBP_C_ApplyWeightedAverageSmoothing::ResultRotation' has a wrong offset!");
static_assert(offsetof(CH_Hacker_AnimBP_C_ApplyWeightedAverageSmoothing, SmoothedRotation) == 0x000030, "Member 'CH_Hacker_AnimBP_C_ApplyWeightedAverageSmoothing::SmoothedRotation' has a wrong offset!");
static_assert(offsetof(CH_Hacker_AnimBP_C_ApplyWeightedAverageSmoothing, SmoothedLocation) == 0x00003C, "Member 'CH_Hacker_AnimBP_C_ApplyWeightedAverageSmoothing::SmoothedLocation' has a wrong offset!");
static_assert(offsetof(CH_Hacker_AnimBP_C_ApplyWeightedAverageSmoothing, HeadOffset) == 0x000048, "Member 'CH_Hacker_AnimBP_C_ApplyWeightedAverageSmoothing::HeadOffset' has a wrong offset!");
static_assert(offsetof(CH_Hacker_AnimBP_C_ApplyWeightedAverageSmoothing, CallFunc_BreakRotator_Roll) == 0x000054, "Member 'CH_Hacker_AnimBP_C_ApplyWeightedAverageSmoothing::CallFunc_BreakRotator_Roll' has a wrong offset!");
static_assert(offsetof(CH_Hacker_AnimBP_C_ApplyWeightedAverageSmoothing, CallFunc_BreakRotator_Pitch) == 0x000058, "Member 'CH_Hacker_AnimBP_C_ApplyWeightedAverageSmoothing::CallFunc_BreakRotator_Pitch' has a wrong offset!");
static_assert(offsetof(CH_Hacker_AnimBP_C_ApplyWeightedAverageSmoothing, CallFunc_BreakRotator_Yaw) == 0x00005C, "Member 'CH_Hacker_AnimBP_C_ApplyWeightedAverageSmoothing::CallFunc_BreakRotator_Yaw' has a wrong offset!");
static_assert(offsetof(CH_Hacker_AnimBP_C_ApplyWeightedAverageSmoothing, CallFunc_MakeVector_ReturnValue) == 0x000060, "Member 'CH_Hacker_AnimBP_C_ApplyWeightedAverageSmoothing::CallFunc_MakeVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(CH_Hacker_AnimBP_C_ApplyWeightedAverageSmoothing, CallFunc_GetGameTimeInSeconds_ReturnValue) == 0x00006C, "Member 'CH_Hacker_AnimBP_C_ApplyWeightedAverageSmoothing::CallFunc_GetGameTimeInSeconds_ReturnValue' has a wrong offset!");
static_assert(offsetof(CH_Hacker_AnimBP_C_ApplyWeightedAverageSmoothing, CallFunc_GetSmoothedVec3_ReturnValue) == 0x000070, "Member 'CH_Hacker_AnimBP_C_ApplyWeightedAverageSmoothing::CallFunc_GetSmoothedVec3_ReturnValue' has a wrong offset!");
static_assert(offsetof(CH_Hacker_AnimBP_C_ApplyWeightedAverageSmoothing, CallFunc_GetGameTimeInSeconds_ReturnValue_1) == 0x00007C, "Member 'CH_Hacker_AnimBP_C_ApplyWeightedAverageSmoothing::CallFunc_GetGameTimeInSeconds_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(CH_Hacker_AnimBP_C_ApplyWeightedAverageSmoothing, CallFunc_BreakVector_X) == 0x000080, "Member 'CH_Hacker_AnimBP_C_ApplyWeightedAverageSmoothing::CallFunc_BreakVector_X' has a wrong offset!");
static_assert(offsetof(CH_Hacker_AnimBP_C_ApplyWeightedAverageSmoothing, CallFunc_BreakVector_Y) == 0x000084, "Member 'CH_Hacker_AnimBP_C_ApplyWeightedAverageSmoothing::CallFunc_BreakVector_Y' has a wrong offset!");
static_assert(offsetof(CH_Hacker_AnimBP_C_ApplyWeightedAverageSmoothing, CallFunc_BreakVector_Z) == 0x000088, "Member 'CH_Hacker_AnimBP_C_ApplyWeightedAverageSmoothing::CallFunc_BreakVector_Z' has a wrong offset!");
static_assert(offsetof(CH_Hacker_AnimBP_C_ApplyWeightedAverageSmoothing, CallFunc_MakeRotator_ReturnValue) == 0x00008C, "Member 'CH_Hacker_AnimBP_C_ApplyWeightedAverageSmoothing::CallFunc_MakeRotator_ReturnValue' has a wrong offset!");
static_assert(offsetof(CH_Hacker_AnimBP_C_ApplyWeightedAverageSmoothing, CallFunc_GetSmoothedVec3_ReturnValue_1) == 0x000098, "Member 'CH_Hacker_AnimBP_C_ApplyWeightedAverageSmoothing::CallFunc_GetSmoothedVec3_ReturnValue_1' has a wrong offset!");

// Function CH_Hacker_AnimBP.CH_Hacker_AnimBP_C.UpdateWeaponOffset
// 0x02A0 (0x02A0 - 0x0000)
struct CH_Hacker_AnimBP_C_UpdateWeaponOffset final
{
public:
	float                                         DeltaTime;                                         // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Greater_FloatFloat_ReturnValue;           // 0x0004(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class APawn*                                  CallFunc_TryGetPawnOwner_ReturnValue;              // 0x0008(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               CallFunc_K2_GetActorRotation_ReturnValue;          // 0x0010(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                         CallFunc_Abs_ReturnValue;                          // 0x001C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_MakePulsatingValue_ReturnValue;           // 0x0020(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Abs_ReturnValue_1;                        // 0x0024(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Multiply_FloatFloat_ReturnValue;          // 0x0028(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_MakeVector_ReturnValue;                   // 0x002C(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_SafeDivide_ReturnValue;                   // 0x0038(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Greater_FloatFloat_ReturnValue_1;         // 0x003C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_3D[0x3];                                       // 0x003D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_GetCurveValue_ReturnValue;                // 0x0040(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Subtract_FloatFloat_ReturnValue;          // 0x0044(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               CallFunc_NormalizedDeltaRotator_ReturnValue;       // 0x0048(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                         CallFunc_BreakRotator_Roll;                        // 0x0054(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakRotator_Pitch;                       // 0x0058(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakRotator_Yaw;                         // 0x005C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               CallFunc_Multiply_RotatorFloat_ReturnValue;        // 0x0060(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                         CallFunc_MapRangeClamped_ReturnValue;              // 0x006C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakRotator_Roll_1;                      // 0x0070(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakRotator_Pitch_1;                     // 0x0074(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakRotator_Yaw_1;                       // 0x0078(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_7C[0x4];                                       // 0x007C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTransform                             CallFunc_MakeTransform_ReturnValue;                // 0x0080(0x0030)(IsPlainOldData, NoDestructor)
	float                                         CallFunc_Multiply_FloatFloat_ReturnValue_1;        // 0x00B0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Multiply_FloatFloat_ReturnValue_2;        // 0x00B4(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Abs_ReturnValue_2;                        // 0x00B8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_MultiplyMultiply_FloatFloat_ReturnValue;  // 0x00BC(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class APawn*                                  CallFunc_TryGetPawnOwner_ReturnValue_1;            // 0x00C0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_FClamp_ReturnValue;                       // 0x00C8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_CC[0x4];                                       // 0x00CC(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class APAWN_Hacker_Simple_C*                  K2Node_DynamicCast_AsPAWN_Hacker_Simple;           // 0x00D0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x00D8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_D9[0x3];                                       // 0x00D9(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_Multiply_FloatFloat_ReturnValue_3;        // 0x00DC(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FTransform                             CallFunc_GetTransform_ReturnValue;                 // 0x00E0(0x0030)(ConstParm, IsPlainOldData, NoDestructor)
	float                                         CallFunc_Add_FloatFloat_ReturnValue;               // 0x0110(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakTransform_Location;                  // 0x0114(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               CallFunc_BreakTransform_Rotation;                  // 0x0120(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FVector                                CallFunc_BreakTransform_Scale;                     // 0x012C(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Variable;                                // 0x0138(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_139[0x3];                                      // 0x0139(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                CallFunc_Subtract_VectorVector_ReturnValue;        // 0x013C(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Multiply_VectorFloat_ReturnValue;         // 0x0148(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_154[0xC];                                      // 0x0154(0x000C)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTransform                             K2Node_Select_Default;                             // 0x0160(0x0030)(IsPlainOldData, NoDestructor)
	struct FVector                                CallFunc_LessLess_VectorRotator_ReturnValue;       // 0x0190(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_19C[0x4];                                      // 0x019C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTransform                             CallFunc_TLerp_ReturnValue;                        // 0x01A0(0x0030)(IsPlainOldData, NoDestructor)
	float                                         CallFunc_BreakVector_X;                            // 0x01D0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector_Y;                            // 0x01D4(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector_Z;                            // 0x01D8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakTransform_Location_1;                // 0x01DC(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               CallFunc_BreakTransform_Rotation_1;                // 0x01E8(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FVector                                CallFunc_BreakTransform_Scale_1;                   // 0x01F4(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Multiply_FloatFloat_ReturnValue_4;        // 0x0200(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Multiply_FloatFloat_ReturnValue_5;        // 0x0204(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Add_FloatFloat_ReturnValue_1;             // 0x0208(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Add_FloatFloat_ReturnValue_2;             // 0x020C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_FClamp_ReturnValue_1;                     // 0x0210(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_FClamp_ReturnValue_2;                     // 0x0214(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Add_FloatFloat_ReturnValue_3;             // 0x0218(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               CallFunc_MakeRotator_ReturnValue;                  // 0x021C(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                         CallFunc_Multiply_FloatFloat_ReturnValue_6;        // 0x0228(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               CallFunc_ComposeRotators_ReturnValue;              // 0x022C(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                         CallFunc_Add_FloatFloat_ReturnValue_4;             // 0x0238(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_FClamp_ReturnValue_3;                     // 0x023C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_MakeVector_ReturnValue_1;                 // 0x0240(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Add_VectorVector_ReturnValue;             // 0x024C(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Add_VectorVector_ReturnValue_1;           // 0x0258(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_ApplyWeightedAverageSmoothing_ResultLocation; // 0x0264(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               CallFunc_ApplyWeightedAverageSmoothing_ResultRotation; // 0x0270(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FVector                                CallFunc_VInterpTo_ReturnValue;                    // 0x027C(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               CallFunc_RInterpTo_ReturnValue;                    // 0x0288(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(CH_Hacker_AnimBP_C_UpdateWeaponOffset) == 0x000010, "Wrong alignment on CH_Hacker_AnimBP_C_UpdateWeaponOffset");
static_assert(sizeof(CH_Hacker_AnimBP_C_UpdateWeaponOffset) == 0x0002A0, "Wrong size on CH_Hacker_AnimBP_C_UpdateWeaponOffset");
static_assert(offsetof(CH_Hacker_AnimBP_C_UpdateWeaponOffset, DeltaTime) == 0x000000, "Member 'CH_Hacker_AnimBP_C_UpdateWeaponOffset::DeltaTime' has a wrong offset!");
static_assert(offsetof(CH_Hacker_AnimBP_C_UpdateWeaponOffset, CallFunc_Greater_FloatFloat_ReturnValue) == 0x000004, "Member 'CH_Hacker_AnimBP_C_UpdateWeaponOffset::CallFunc_Greater_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(CH_Hacker_AnimBP_C_UpdateWeaponOffset, CallFunc_TryGetPawnOwner_ReturnValue) == 0x000008, "Member 'CH_Hacker_AnimBP_C_UpdateWeaponOffset::CallFunc_TryGetPawnOwner_ReturnValue' has a wrong offset!");
static_assert(offsetof(CH_Hacker_AnimBP_C_UpdateWeaponOffset, CallFunc_K2_GetActorRotation_ReturnValue) == 0x000010, "Member 'CH_Hacker_AnimBP_C_UpdateWeaponOffset::CallFunc_K2_GetActorRotation_ReturnValue' has a wrong offset!");
static_assert(offsetof(CH_Hacker_AnimBP_C_UpdateWeaponOffset, CallFunc_Abs_ReturnValue) == 0x00001C, "Member 'CH_Hacker_AnimBP_C_UpdateWeaponOffset::CallFunc_Abs_ReturnValue' has a wrong offset!");
static_assert(offsetof(CH_Hacker_AnimBP_C_UpdateWeaponOffset, CallFunc_MakePulsatingValue_ReturnValue) == 0x000020, "Member 'CH_Hacker_AnimBP_C_UpdateWeaponOffset::CallFunc_MakePulsatingValue_ReturnValue' has a wrong offset!");
static_assert(offsetof(CH_Hacker_AnimBP_C_UpdateWeaponOffset, CallFunc_Abs_ReturnValue_1) == 0x000024, "Member 'CH_Hacker_AnimBP_C_UpdateWeaponOffset::CallFunc_Abs_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(CH_Hacker_AnimBP_C_UpdateWeaponOffset, CallFunc_Multiply_FloatFloat_ReturnValue) == 0x000028, "Member 'CH_Hacker_AnimBP_C_UpdateWeaponOffset::CallFunc_Multiply_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(CH_Hacker_AnimBP_C_UpdateWeaponOffset, CallFunc_MakeVector_ReturnValue) == 0x00002C, "Member 'CH_Hacker_AnimBP_C_UpdateWeaponOffset::CallFunc_MakeVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(CH_Hacker_AnimBP_C_UpdateWeaponOffset, CallFunc_SafeDivide_ReturnValue) == 0x000038, "Member 'CH_Hacker_AnimBP_C_UpdateWeaponOffset::CallFunc_SafeDivide_ReturnValue' has a wrong offset!");
static_assert(offsetof(CH_Hacker_AnimBP_C_UpdateWeaponOffset, CallFunc_Greater_FloatFloat_ReturnValue_1) == 0x00003C, "Member 'CH_Hacker_AnimBP_C_UpdateWeaponOffset::CallFunc_Greater_FloatFloat_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(CH_Hacker_AnimBP_C_UpdateWeaponOffset, CallFunc_GetCurveValue_ReturnValue) == 0x000040, "Member 'CH_Hacker_AnimBP_C_UpdateWeaponOffset::CallFunc_GetCurveValue_ReturnValue' has a wrong offset!");
static_assert(offsetof(CH_Hacker_AnimBP_C_UpdateWeaponOffset, CallFunc_Subtract_FloatFloat_ReturnValue) == 0x000044, "Member 'CH_Hacker_AnimBP_C_UpdateWeaponOffset::CallFunc_Subtract_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(CH_Hacker_AnimBP_C_UpdateWeaponOffset, CallFunc_NormalizedDeltaRotator_ReturnValue) == 0x000048, "Member 'CH_Hacker_AnimBP_C_UpdateWeaponOffset::CallFunc_NormalizedDeltaRotator_ReturnValue' has a wrong offset!");
static_assert(offsetof(CH_Hacker_AnimBP_C_UpdateWeaponOffset, CallFunc_BreakRotator_Roll) == 0x000054, "Member 'CH_Hacker_AnimBP_C_UpdateWeaponOffset::CallFunc_BreakRotator_Roll' has a wrong offset!");
static_assert(offsetof(CH_Hacker_AnimBP_C_UpdateWeaponOffset, CallFunc_BreakRotator_Pitch) == 0x000058, "Member 'CH_Hacker_AnimBP_C_UpdateWeaponOffset::CallFunc_BreakRotator_Pitch' has a wrong offset!");
static_assert(offsetof(CH_Hacker_AnimBP_C_UpdateWeaponOffset, CallFunc_BreakRotator_Yaw) == 0x00005C, "Member 'CH_Hacker_AnimBP_C_UpdateWeaponOffset::CallFunc_BreakRotator_Yaw' has a wrong offset!");
static_assert(offsetof(CH_Hacker_AnimBP_C_UpdateWeaponOffset, CallFunc_Multiply_RotatorFloat_ReturnValue) == 0x000060, "Member 'CH_Hacker_AnimBP_C_UpdateWeaponOffset::CallFunc_Multiply_RotatorFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(CH_Hacker_AnimBP_C_UpdateWeaponOffset, CallFunc_MapRangeClamped_ReturnValue) == 0x00006C, "Member 'CH_Hacker_AnimBP_C_UpdateWeaponOffset::CallFunc_MapRangeClamped_ReturnValue' has a wrong offset!");
static_assert(offsetof(CH_Hacker_AnimBP_C_UpdateWeaponOffset, CallFunc_BreakRotator_Roll_1) == 0x000070, "Member 'CH_Hacker_AnimBP_C_UpdateWeaponOffset::CallFunc_BreakRotator_Roll_1' has a wrong offset!");
static_assert(offsetof(CH_Hacker_AnimBP_C_UpdateWeaponOffset, CallFunc_BreakRotator_Pitch_1) == 0x000074, "Member 'CH_Hacker_AnimBP_C_UpdateWeaponOffset::CallFunc_BreakRotator_Pitch_1' has a wrong offset!");
static_assert(offsetof(CH_Hacker_AnimBP_C_UpdateWeaponOffset, CallFunc_BreakRotator_Yaw_1) == 0x000078, "Member 'CH_Hacker_AnimBP_C_UpdateWeaponOffset::CallFunc_BreakRotator_Yaw_1' has a wrong offset!");
static_assert(offsetof(CH_Hacker_AnimBP_C_UpdateWeaponOffset, CallFunc_MakeTransform_ReturnValue) == 0x000080, "Member 'CH_Hacker_AnimBP_C_UpdateWeaponOffset::CallFunc_MakeTransform_ReturnValue' has a wrong offset!");
static_assert(offsetof(CH_Hacker_AnimBP_C_UpdateWeaponOffset, CallFunc_Multiply_FloatFloat_ReturnValue_1) == 0x0000B0, "Member 'CH_Hacker_AnimBP_C_UpdateWeaponOffset::CallFunc_Multiply_FloatFloat_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(CH_Hacker_AnimBP_C_UpdateWeaponOffset, CallFunc_Multiply_FloatFloat_ReturnValue_2) == 0x0000B4, "Member 'CH_Hacker_AnimBP_C_UpdateWeaponOffset::CallFunc_Multiply_FloatFloat_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(CH_Hacker_AnimBP_C_UpdateWeaponOffset, CallFunc_Abs_ReturnValue_2) == 0x0000B8, "Member 'CH_Hacker_AnimBP_C_UpdateWeaponOffset::CallFunc_Abs_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(CH_Hacker_AnimBP_C_UpdateWeaponOffset, CallFunc_MultiplyMultiply_FloatFloat_ReturnValue) == 0x0000BC, "Member 'CH_Hacker_AnimBP_C_UpdateWeaponOffset::CallFunc_MultiplyMultiply_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(CH_Hacker_AnimBP_C_UpdateWeaponOffset, CallFunc_TryGetPawnOwner_ReturnValue_1) == 0x0000C0, "Member 'CH_Hacker_AnimBP_C_UpdateWeaponOffset::CallFunc_TryGetPawnOwner_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(CH_Hacker_AnimBP_C_UpdateWeaponOffset, CallFunc_FClamp_ReturnValue) == 0x0000C8, "Member 'CH_Hacker_AnimBP_C_UpdateWeaponOffset::CallFunc_FClamp_ReturnValue' has a wrong offset!");
static_assert(offsetof(CH_Hacker_AnimBP_C_UpdateWeaponOffset, K2Node_DynamicCast_AsPAWN_Hacker_Simple) == 0x0000D0, "Member 'CH_Hacker_AnimBP_C_UpdateWeaponOffset::K2Node_DynamicCast_AsPAWN_Hacker_Simple' has a wrong offset!");
static_assert(offsetof(CH_Hacker_AnimBP_C_UpdateWeaponOffset, K2Node_DynamicCast_bSuccess) == 0x0000D8, "Member 'CH_Hacker_AnimBP_C_UpdateWeaponOffset::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(CH_Hacker_AnimBP_C_UpdateWeaponOffset, CallFunc_Multiply_FloatFloat_ReturnValue_3) == 0x0000DC, "Member 'CH_Hacker_AnimBP_C_UpdateWeaponOffset::CallFunc_Multiply_FloatFloat_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(CH_Hacker_AnimBP_C_UpdateWeaponOffset, CallFunc_GetTransform_ReturnValue) == 0x0000E0, "Member 'CH_Hacker_AnimBP_C_UpdateWeaponOffset::CallFunc_GetTransform_ReturnValue' has a wrong offset!");
static_assert(offsetof(CH_Hacker_AnimBP_C_UpdateWeaponOffset, CallFunc_Add_FloatFloat_ReturnValue) == 0x000110, "Member 'CH_Hacker_AnimBP_C_UpdateWeaponOffset::CallFunc_Add_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(CH_Hacker_AnimBP_C_UpdateWeaponOffset, CallFunc_BreakTransform_Location) == 0x000114, "Member 'CH_Hacker_AnimBP_C_UpdateWeaponOffset::CallFunc_BreakTransform_Location' has a wrong offset!");
static_assert(offsetof(CH_Hacker_AnimBP_C_UpdateWeaponOffset, CallFunc_BreakTransform_Rotation) == 0x000120, "Member 'CH_Hacker_AnimBP_C_UpdateWeaponOffset::CallFunc_BreakTransform_Rotation' has a wrong offset!");
static_assert(offsetof(CH_Hacker_AnimBP_C_UpdateWeaponOffset, CallFunc_BreakTransform_Scale) == 0x00012C, "Member 'CH_Hacker_AnimBP_C_UpdateWeaponOffset::CallFunc_BreakTransform_Scale' has a wrong offset!");
static_assert(offsetof(CH_Hacker_AnimBP_C_UpdateWeaponOffset, Temp_bool_Variable) == 0x000138, "Member 'CH_Hacker_AnimBP_C_UpdateWeaponOffset::Temp_bool_Variable' has a wrong offset!");
static_assert(offsetof(CH_Hacker_AnimBP_C_UpdateWeaponOffset, CallFunc_Subtract_VectorVector_ReturnValue) == 0x00013C, "Member 'CH_Hacker_AnimBP_C_UpdateWeaponOffset::CallFunc_Subtract_VectorVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(CH_Hacker_AnimBP_C_UpdateWeaponOffset, CallFunc_Multiply_VectorFloat_ReturnValue) == 0x000148, "Member 'CH_Hacker_AnimBP_C_UpdateWeaponOffset::CallFunc_Multiply_VectorFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(CH_Hacker_AnimBP_C_UpdateWeaponOffset, K2Node_Select_Default) == 0x000160, "Member 'CH_Hacker_AnimBP_C_UpdateWeaponOffset::K2Node_Select_Default' has a wrong offset!");
static_assert(offsetof(CH_Hacker_AnimBP_C_UpdateWeaponOffset, CallFunc_LessLess_VectorRotator_ReturnValue) == 0x000190, "Member 'CH_Hacker_AnimBP_C_UpdateWeaponOffset::CallFunc_LessLess_VectorRotator_ReturnValue' has a wrong offset!");
static_assert(offsetof(CH_Hacker_AnimBP_C_UpdateWeaponOffset, CallFunc_TLerp_ReturnValue) == 0x0001A0, "Member 'CH_Hacker_AnimBP_C_UpdateWeaponOffset::CallFunc_TLerp_ReturnValue' has a wrong offset!");
static_assert(offsetof(CH_Hacker_AnimBP_C_UpdateWeaponOffset, CallFunc_BreakVector_X) == 0x0001D0, "Member 'CH_Hacker_AnimBP_C_UpdateWeaponOffset::CallFunc_BreakVector_X' has a wrong offset!");
static_assert(offsetof(CH_Hacker_AnimBP_C_UpdateWeaponOffset, CallFunc_BreakVector_Y) == 0x0001D4, "Member 'CH_Hacker_AnimBP_C_UpdateWeaponOffset::CallFunc_BreakVector_Y' has a wrong offset!");
static_assert(offsetof(CH_Hacker_AnimBP_C_UpdateWeaponOffset, CallFunc_BreakVector_Z) == 0x0001D8, "Member 'CH_Hacker_AnimBP_C_UpdateWeaponOffset::CallFunc_BreakVector_Z' has a wrong offset!");
static_assert(offsetof(CH_Hacker_AnimBP_C_UpdateWeaponOffset, CallFunc_BreakTransform_Location_1) == 0x0001DC, "Member 'CH_Hacker_AnimBP_C_UpdateWeaponOffset::CallFunc_BreakTransform_Location_1' has a wrong offset!");
static_assert(offsetof(CH_Hacker_AnimBP_C_UpdateWeaponOffset, CallFunc_BreakTransform_Rotation_1) == 0x0001E8, "Member 'CH_Hacker_AnimBP_C_UpdateWeaponOffset::CallFunc_BreakTransform_Rotation_1' has a wrong offset!");
static_assert(offsetof(CH_Hacker_AnimBP_C_UpdateWeaponOffset, CallFunc_BreakTransform_Scale_1) == 0x0001F4, "Member 'CH_Hacker_AnimBP_C_UpdateWeaponOffset::CallFunc_BreakTransform_Scale_1' has a wrong offset!");
static_assert(offsetof(CH_Hacker_AnimBP_C_UpdateWeaponOffset, CallFunc_Multiply_FloatFloat_ReturnValue_4) == 0x000200, "Member 'CH_Hacker_AnimBP_C_UpdateWeaponOffset::CallFunc_Multiply_FloatFloat_ReturnValue_4' has a wrong offset!");
static_assert(offsetof(CH_Hacker_AnimBP_C_UpdateWeaponOffset, CallFunc_Multiply_FloatFloat_ReturnValue_5) == 0x000204, "Member 'CH_Hacker_AnimBP_C_UpdateWeaponOffset::CallFunc_Multiply_FloatFloat_ReturnValue_5' has a wrong offset!");
static_assert(offsetof(CH_Hacker_AnimBP_C_UpdateWeaponOffset, CallFunc_Add_FloatFloat_ReturnValue_1) == 0x000208, "Member 'CH_Hacker_AnimBP_C_UpdateWeaponOffset::CallFunc_Add_FloatFloat_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(CH_Hacker_AnimBP_C_UpdateWeaponOffset, CallFunc_Add_FloatFloat_ReturnValue_2) == 0x00020C, "Member 'CH_Hacker_AnimBP_C_UpdateWeaponOffset::CallFunc_Add_FloatFloat_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(CH_Hacker_AnimBP_C_UpdateWeaponOffset, CallFunc_FClamp_ReturnValue_1) == 0x000210, "Member 'CH_Hacker_AnimBP_C_UpdateWeaponOffset::CallFunc_FClamp_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(CH_Hacker_AnimBP_C_UpdateWeaponOffset, CallFunc_FClamp_ReturnValue_2) == 0x000214, "Member 'CH_Hacker_AnimBP_C_UpdateWeaponOffset::CallFunc_FClamp_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(CH_Hacker_AnimBP_C_UpdateWeaponOffset, CallFunc_Add_FloatFloat_ReturnValue_3) == 0x000218, "Member 'CH_Hacker_AnimBP_C_UpdateWeaponOffset::CallFunc_Add_FloatFloat_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(CH_Hacker_AnimBP_C_UpdateWeaponOffset, CallFunc_MakeRotator_ReturnValue) == 0x00021C, "Member 'CH_Hacker_AnimBP_C_UpdateWeaponOffset::CallFunc_MakeRotator_ReturnValue' has a wrong offset!");
static_assert(offsetof(CH_Hacker_AnimBP_C_UpdateWeaponOffset, CallFunc_Multiply_FloatFloat_ReturnValue_6) == 0x000228, "Member 'CH_Hacker_AnimBP_C_UpdateWeaponOffset::CallFunc_Multiply_FloatFloat_ReturnValue_6' has a wrong offset!");
static_assert(offsetof(CH_Hacker_AnimBP_C_UpdateWeaponOffset, CallFunc_ComposeRotators_ReturnValue) == 0x00022C, "Member 'CH_Hacker_AnimBP_C_UpdateWeaponOffset::CallFunc_ComposeRotators_ReturnValue' has a wrong offset!");
static_assert(offsetof(CH_Hacker_AnimBP_C_UpdateWeaponOffset, CallFunc_Add_FloatFloat_ReturnValue_4) == 0x000238, "Member 'CH_Hacker_AnimBP_C_UpdateWeaponOffset::CallFunc_Add_FloatFloat_ReturnValue_4' has a wrong offset!");
static_assert(offsetof(CH_Hacker_AnimBP_C_UpdateWeaponOffset, CallFunc_FClamp_ReturnValue_3) == 0x00023C, "Member 'CH_Hacker_AnimBP_C_UpdateWeaponOffset::CallFunc_FClamp_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(CH_Hacker_AnimBP_C_UpdateWeaponOffset, CallFunc_MakeVector_ReturnValue_1) == 0x000240, "Member 'CH_Hacker_AnimBP_C_UpdateWeaponOffset::CallFunc_MakeVector_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(CH_Hacker_AnimBP_C_UpdateWeaponOffset, CallFunc_Add_VectorVector_ReturnValue) == 0x00024C, "Member 'CH_Hacker_AnimBP_C_UpdateWeaponOffset::CallFunc_Add_VectorVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(CH_Hacker_AnimBP_C_UpdateWeaponOffset, CallFunc_Add_VectorVector_ReturnValue_1) == 0x000258, "Member 'CH_Hacker_AnimBP_C_UpdateWeaponOffset::CallFunc_Add_VectorVector_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(CH_Hacker_AnimBP_C_UpdateWeaponOffset, CallFunc_ApplyWeightedAverageSmoothing_ResultLocation) == 0x000264, "Member 'CH_Hacker_AnimBP_C_UpdateWeaponOffset::CallFunc_ApplyWeightedAverageSmoothing_ResultLocation' has a wrong offset!");
static_assert(offsetof(CH_Hacker_AnimBP_C_UpdateWeaponOffset, CallFunc_ApplyWeightedAverageSmoothing_ResultRotation) == 0x000270, "Member 'CH_Hacker_AnimBP_C_UpdateWeaponOffset::CallFunc_ApplyWeightedAverageSmoothing_ResultRotation' has a wrong offset!");
static_assert(offsetof(CH_Hacker_AnimBP_C_UpdateWeaponOffset, CallFunc_VInterpTo_ReturnValue) == 0x00027C, "Member 'CH_Hacker_AnimBP_C_UpdateWeaponOffset::CallFunc_VInterpTo_ReturnValue' has a wrong offset!");
static_assert(offsetof(CH_Hacker_AnimBP_C_UpdateWeaponOffset, CallFunc_RInterpTo_ReturnValue) == 0x000288, "Member 'CH_Hacker_AnimBP_C_UpdateWeaponOffset::CallFunc_RInterpTo_ReturnValue' has a wrong offset!");

// Function CH_Hacker_AnimBP.CH_Hacker_AnimBP_C.UpdateIdleSequenceAssignment
// 0x0010 (0x0010 - 0x0000)
struct CH_Hacker_AnimBP_C_UpdateIdleSequenceAssignment final
{
public:
	class UAnimSequenceBase*                      CallFunc_GetIdleSequence_Result;                   // 0x0000(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0008(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsValid_ReturnValue_1;                    // 0x0009(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(CH_Hacker_AnimBP_C_UpdateIdleSequenceAssignment) == 0x000008, "Wrong alignment on CH_Hacker_AnimBP_C_UpdateIdleSequenceAssignment");
static_assert(sizeof(CH_Hacker_AnimBP_C_UpdateIdleSequenceAssignment) == 0x000010, "Wrong size on CH_Hacker_AnimBP_C_UpdateIdleSequenceAssignment");
static_assert(offsetof(CH_Hacker_AnimBP_C_UpdateIdleSequenceAssignment, CallFunc_GetIdleSequence_Result) == 0x000000, "Member 'CH_Hacker_AnimBP_C_UpdateIdleSequenceAssignment::CallFunc_GetIdleSequence_Result' has a wrong offset!");
static_assert(offsetof(CH_Hacker_AnimBP_C_UpdateIdleSequenceAssignment, CallFunc_IsValid_ReturnValue) == 0x000008, "Member 'CH_Hacker_AnimBP_C_UpdateIdleSequenceAssignment::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(CH_Hacker_AnimBP_C_UpdateIdleSequenceAssignment, CallFunc_IsValid_ReturnValue_1) == 0x000009, "Member 'CH_Hacker_AnimBP_C_UpdateIdleSequenceAssignment::CallFunc_IsValid_ReturnValue_1' has a wrong offset!");

// Function CH_Hacker_AnimBP.CH_Hacker_AnimBP_C.UpdateWeaponViewOffset
// 0x0110 (0x0110 - 0x0000)
struct CH_Hacker_AnimBP_C_UpdateWeaponViewOffset final
{
public:
	struct FVector                                AimOffset;                                         // 0x0000(0x000C)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                DisplayOffset;                                     // 0x000C(0x000C)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_VLerp_ReturnValue;                        // 0x0018(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_24[0xC];                                       // 0x0024(0x000C)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTransform                             CallFunc_GetSocketTransform_ReturnValue;           // 0x0030(0x0030)(IsPlainOldData, NoDestructor)
	struct FVector                                CallFunc_BreakTransform_Location;                  // 0x0060(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               CallFunc_BreakTransform_Rotation;                  // 0x006C(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FVector                                CallFunc_BreakTransform_Scale;                     // 0x0078(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_84[0xC];                                       // 0x0084(0x000C)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTransform                             CallFunc_GetSocketTransform_ReturnValue_1;         // 0x0090(0x0030)(IsPlainOldData, NoDestructor)
	struct FVector                                CallFunc_BreakTransform_Location_1;                // 0x00C0(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               CallFunc_BreakTransform_Rotation_1;                // 0x00CC(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FVector                                CallFunc_BreakTransform_Scale_1;                   // 0x00D8(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Add_VectorVector_ReturnValue;             // 0x00E4(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_DoesSocketExist_ReturnValue;              // 0x00F0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Greater_FloatFloat_ReturnValue;           // 0x00F1(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_F2[0x2];                                       // 0x00F2(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                CallFunc_Add_VectorVector_ReturnValue_1;           // 0x00F4(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_DoesSocketExist_ReturnValue_1;            // 0x0100(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0101(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(CH_Hacker_AnimBP_C_UpdateWeaponViewOffset) == 0x000010, "Wrong alignment on CH_Hacker_AnimBP_C_UpdateWeaponViewOffset");
static_assert(sizeof(CH_Hacker_AnimBP_C_UpdateWeaponViewOffset) == 0x000110, "Wrong size on CH_Hacker_AnimBP_C_UpdateWeaponViewOffset");
static_assert(offsetof(CH_Hacker_AnimBP_C_UpdateWeaponViewOffset, AimOffset) == 0x000000, "Member 'CH_Hacker_AnimBP_C_UpdateWeaponViewOffset::AimOffset' has a wrong offset!");
static_assert(offsetof(CH_Hacker_AnimBP_C_UpdateWeaponViewOffset, DisplayOffset) == 0x00000C, "Member 'CH_Hacker_AnimBP_C_UpdateWeaponViewOffset::DisplayOffset' has a wrong offset!");
static_assert(offsetof(CH_Hacker_AnimBP_C_UpdateWeaponViewOffset, CallFunc_VLerp_ReturnValue) == 0x000018, "Member 'CH_Hacker_AnimBP_C_UpdateWeaponViewOffset::CallFunc_VLerp_ReturnValue' has a wrong offset!");
static_assert(offsetof(CH_Hacker_AnimBP_C_UpdateWeaponViewOffset, CallFunc_GetSocketTransform_ReturnValue) == 0x000030, "Member 'CH_Hacker_AnimBP_C_UpdateWeaponViewOffset::CallFunc_GetSocketTransform_ReturnValue' has a wrong offset!");
static_assert(offsetof(CH_Hacker_AnimBP_C_UpdateWeaponViewOffset, CallFunc_BreakTransform_Location) == 0x000060, "Member 'CH_Hacker_AnimBP_C_UpdateWeaponViewOffset::CallFunc_BreakTransform_Location' has a wrong offset!");
static_assert(offsetof(CH_Hacker_AnimBP_C_UpdateWeaponViewOffset, CallFunc_BreakTransform_Rotation) == 0x00006C, "Member 'CH_Hacker_AnimBP_C_UpdateWeaponViewOffset::CallFunc_BreakTransform_Rotation' has a wrong offset!");
static_assert(offsetof(CH_Hacker_AnimBP_C_UpdateWeaponViewOffset, CallFunc_BreakTransform_Scale) == 0x000078, "Member 'CH_Hacker_AnimBP_C_UpdateWeaponViewOffset::CallFunc_BreakTransform_Scale' has a wrong offset!");
static_assert(offsetof(CH_Hacker_AnimBP_C_UpdateWeaponViewOffset, CallFunc_GetSocketTransform_ReturnValue_1) == 0x000090, "Member 'CH_Hacker_AnimBP_C_UpdateWeaponViewOffset::CallFunc_GetSocketTransform_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(CH_Hacker_AnimBP_C_UpdateWeaponViewOffset, CallFunc_BreakTransform_Location_1) == 0x0000C0, "Member 'CH_Hacker_AnimBP_C_UpdateWeaponViewOffset::CallFunc_BreakTransform_Location_1' has a wrong offset!");
static_assert(offsetof(CH_Hacker_AnimBP_C_UpdateWeaponViewOffset, CallFunc_BreakTransform_Rotation_1) == 0x0000CC, "Member 'CH_Hacker_AnimBP_C_UpdateWeaponViewOffset::CallFunc_BreakTransform_Rotation_1' has a wrong offset!");
static_assert(offsetof(CH_Hacker_AnimBP_C_UpdateWeaponViewOffset, CallFunc_BreakTransform_Scale_1) == 0x0000D8, "Member 'CH_Hacker_AnimBP_C_UpdateWeaponViewOffset::CallFunc_BreakTransform_Scale_1' has a wrong offset!");
static_assert(offsetof(CH_Hacker_AnimBP_C_UpdateWeaponViewOffset, CallFunc_Add_VectorVector_ReturnValue) == 0x0000E4, "Member 'CH_Hacker_AnimBP_C_UpdateWeaponViewOffset::CallFunc_Add_VectorVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(CH_Hacker_AnimBP_C_UpdateWeaponViewOffset, CallFunc_DoesSocketExist_ReturnValue) == 0x0000F0, "Member 'CH_Hacker_AnimBP_C_UpdateWeaponViewOffset::CallFunc_DoesSocketExist_ReturnValue' has a wrong offset!");
static_assert(offsetof(CH_Hacker_AnimBP_C_UpdateWeaponViewOffset, CallFunc_Greater_FloatFloat_ReturnValue) == 0x0000F1, "Member 'CH_Hacker_AnimBP_C_UpdateWeaponViewOffset::CallFunc_Greater_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(CH_Hacker_AnimBP_C_UpdateWeaponViewOffset, CallFunc_Add_VectorVector_ReturnValue_1) == 0x0000F4, "Member 'CH_Hacker_AnimBP_C_UpdateWeaponViewOffset::CallFunc_Add_VectorVector_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(CH_Hacker_AnimBP_C_UpdateWeaponViewOffset, CallFunc_DoesSocketExist_ReturnValue_1) == 0x000100, "Member 'CH_Hacker_AnimBP_C_UpdateWeaponViewOffset::CallFunc_DoesSocketExist_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(CH_Hacker_AnimBP_C_UpdateWeaponViewOffset, CallFunc_IsValid_ReturnValue) == 0x000101, "Member 'CH_Hacker_AnimBP_C_UpdateWeaponViewOffset::CallFunc_IsValid_ReturnValue' has a wrong offset!");

// Function CH_Hacker_AnimBP.CH_Hacker_AnimBP_C.IsMovingForwardOrBackward
// 0x0028 (0x0028 - 0x0000)
struct CH_Hacker_AnimBP_C_IsMovingForwardOrBackward final
{
public:
	bool                                          Result;                                            // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                CallFunc_Vector_Forward_ReturnValue;               // 0x0004(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Conv_Vector2DToVector_ReturnValue;        // 0x0010(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Dot_VectorVector_ReturnValue;             // 0x001C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Abs_ReturnValue;                          // 0x0020(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Greater_FloatFloat_ReturnValue;           // 0x0024(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(CH_Hacker_AnimBP_C_IsMovingForwardOrBackward) == 0x000004, "Wrong alignment on CH_Hacker_AnimBP_C_IsMovingForwardOrBackward");
static_assert(sizeof(CH_Hacker_AnimBP_C_IsMovingForwardOrBackward) == 0x000028, "Wrong size on CH_Hacker_AnimBP_C_IsMovingForwardOrBackward");
static_assert(offsetof(CH_Hacker_AnimBP_C_IsMovingForwardOrBackward, Result) == 0x000000, "Member 'CH_Hacker_AnimBP_C_IsMovingForwardOrBackward::Result' has a wrong offset!");
static_assert(offsetof(CH_Hacker_AnimBP_C_IsMovingForwardOrBackward, CallFunc_Vector_Forward_ReturnValue) == 0x000004, "Member 'CH_Hacker_AnimBP_C_IsMovingForwardOrBackward::CallFunc_Vector_Forward_ReturnValue' has a wrong offset!");
static_assert(offsetof(CH_Hacker_AnimBP_C_IsMovingForwardOrBackward, CallFunc_Conv_Vector2DToVector_ReturnValue) == 0x000010, "Member 'CH_Hacker_AnimBP_C_IsMovingForwardOrBackward::CallFunc_Conv_Vector2DToVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(CH_Hacker_AnimBP_C_IsMovingForwardOrBackward, CallFunc_Dot_VectorVector_ReturnValue) == 0x00001C, "Member 'CH_Hacker_AnimBP_C_IsMovingForwardOrBackward::CallFunc_Dot_VectorVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(CH_Hacker_AnimBP_C_IsMovingForwardOrBackward, CallFunc_Abs_ReturnValue) == 0x000020, "Member 'CH_Hacker_AnimBP_C_IsMovingForwardOrBackward::CallFunc_Abs_ReturnValue' has a wrong offset!");
static_assert(offsetof(CH_Hacker_AnimBP_C_IsMovingForwardOrBackward, CallFunc_Greater_FloatFloat_ReturnValue) == 0x000024, "Member 'CH_Hacker_AnimBP_C_IsMovingForwardOrBackward::CallFunc_Greater_FloatFloat_ReturnValue' has a wrong offset!");

// Function CH_Hacker_AnimBP.CH_Hacker_AnimBP_C.UpdateLocomotionSequences
// 0x0018 (0x0018 - 0x0000)
struct CH_Hacker_AnimBP_C_UpdateLocomotionSequences final
{
public:
	class UAnimSequenceBase*                      CallFunc_GetSprintSequence_Result;                 // 0x0000(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UAnimSequenceBase*                      CallFunc_GetWalkSequence_Result;                   // 0x0008(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0010(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(CH_Hacker_AnimBP_C_UpdateLocomotionSequences) == 0x000008, "Wrong alignment on CH_Hacker_AnimBP_C_UpdateLocomotionSequences");
static_assert(sizeof(CH_Hacker_AnimBP_C_UpdateLocomotionSequences) == 0x000018, "Wrong size on CH_Hacker_AnimBP_C_UpdateLocomotionSequences");
static_assert(offsetof(CH_Hacker_AnimBP_C_UpdateLocomotionSequences, CallFunc_GetSprintSequence_Result) == 0x000000, "Member 'CH_Hacker_AnimBP_C_UpdateLocomotionSequences::CallFunc_GetSprintSequence_Result' has a wrong offset!");
static_assert(offsetof(CH_Hacker_AnimBP_C_UpdateLocomotionSequences, CallFunc_GetWalkSequence_Result) == 0x000008, "Member 'CH_Hacker_AnimBP_C_UpdateLocomotionSequences::CallFunc_GetWalkSequence_Result' has a wrong offset!");
static_assert(offsetof(CH_Hacker_AnimBP_C_UpdateLocomotionSequences, CallFunc_IsValid_ReturnValue) == 0x000010, "Member 'CH_Hacker_AnimBP_C_UpdateLocomotionSequences::CallFunc_IsValid_ReturnValue' has a wrong offset!");

// Function CH_Hacker_AnimBP.CH_Hacker_AnimBP_C.AnimGraph
// 0x0010 (0x0010 - 0x0000)
struct CH_Hacker_AnimBP_C_AnimGraph final
{
public:
	struct FPoseLink                              AnimGraph_0;                                       // 0x0000(0x0010)(Parm, OutParm, NoDestructor)
};
static_assert(alignof(CH_Hacker_AnimBP_C_AnimGraph) == 0x000008, "Wrong alignment on CH_Hacker_AnimBP_C_AnimGraph");
static_assert(sizeof(CH_Hacker_AnimBP_C_AnimGraph) == 0x000010, "Wrong size on CH_Hacker_AnimBP_C_AnimGraph");
static_assert(offsetof(CH_Hacker_AnimBP_C_AnimGraph, AnimGraph_0) == 0x000000, "Member 'CH_Hacker_AnimBP_C_AnimGraph::AnimGraph_0' has a wrong offset!");

// Function CH_Hacker_AnimBP.CH_Hacker_AnimBP_C.SetWalkPhase
// 0x0014 (0x0014 - 0x0000)
struct CH_Hacker_AnimBP_C_SetWalkPhase final
{
public:
	float                                         FootstepProgress;                                  // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         FootstepSign;                                      // 0x0004(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Result;                                            // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_Multiply_FloatFloat_ReturnValue;          // 0x000C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Multiply_FloatFloat_ReturnValue_1;        // 0x0010(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(CH_Hacker_AnimBP_C_SetWalkPhase) == 0x000004, "Wrong alignment on CH_Hacker_AnimBP_C_SetWalkPhase");
static_assert(sizeof(CH_Hacker_AnimBP_C_SetWalkPhase) == 0x000014, "Wrong size on CH_Hacker_AnimBP_C_SetWalkPhase");
static_assert(offsetof(CH_Hacker_AnimBP_C_SetWalkPhase, FootstepProgress) == 0x000000, "Member 'CH_Hacker_AnimBP_C_SetWalkPhase::FootstepProgress' has a wrong offset!");
static_assert(offsetof(CH_Hacker_AnimBP_C_SetWalkPhase, FootstepSign) == 0x000004, "Member 'CH_Hacker_AnimBP_C_SetWalkPhase::FootstepSign' has a wrong offset!");
static_assert(offsetof(CH_Hacker_AnimBP_C_SetWalkPhase, Result) == 0x000008, "Member 'CH_Hacker_AnimBP_C_SetWalkPhase::Result' has a wrong offset!");
static_assert(offsetof(CH_Hacker_AnimBP_C_SetWalkPhase, CallFunc_Multiply_FloatFloat_ReturnValue) == 0x00000C, "Member 'CH_Hacker_AnimBP_C_SetWalkPhase::CallFunc_Multiply_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(CH_Hacker_AnimBP_C_SetWalkPhase, CallFunc_Multiply_FloatFloat_ReturnValue_1) == 0x000010, "Member 'CH_Hacker_AnimBP_C_SetWalkPhase::CallFunc_Multiply_FloatFloat_ReturnValue_1' has a wrong offset!");

// Function CH_Hacker_AnimBP.CH_Hacker_AnimBP_C.SetEquippedItem
// 0x0010 (0x0010 - 0x0000)
struct CH_Hacker_AnimBP_C_SetEquippedItem final
{
public:
	class UITEM_WeaponBase_C*                     Item;                                              // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Result;                                            // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0009(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsValid_ReturnValue_1;                    // 0x000A(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(CH_Hacker_AnimBP_C_SetEquippedItem) == 0x000008, "Wrong alignment on CH_Hacker_AnimBP_C_SetEquippedItem");
static_assert(sizeof(CH_Hacker_AnimBP_C_SetEquippedItem) == 0x000010, "Wrong size on CH_Hacker_AnimBP_C_SetEquippedItem");
static_assert(offsetof(CH_Hacker_AnimBP_C_SetEquippedItem, Item) == 0x000000, "Member 'CH_Hacker_AnimBP_C_SetEquippedItem::Item' has a wrong offset!");
static_assert(offsetof(CH_Hacker_AnimBP_C_SetEquippedItem, Result) == 0x000008, "Member 'CH_Hacker_AnimBP_C_SetEquippedItem::Result' has a wrong offset!");
static_assert(offsetof(CH_Hacker_AnimBP_C_SetEquippedItem, CallFunc_IsValid_ReturnValue) == 0x000009, "Member 'CH_Hacker_AnimBP_C_SetEquippedItem::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(CH_Hacker_AnimBP_C_SetEquippedItem, CallFunc_IsValid_ReturnValue_1) == 0x00000A, "Member 'CH_Hacker_AnimBP_C_SetEquippedItem::CallFunc_IsValid_ReturnValue_1' has a wrong offset!");

// Function CH_Hacker_AnimBP.CH_Hacker_AnimBP_C.SetMovementParameters
// 0x005C (0x005C - 0x0000)
struct CH_Hacker_AnimBP_C_SetMovementParameters final
{
public:
	float                                         Speed;                                             // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector2D                              Direction;                                         // 0x0004(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CrouchProgress;                                    // 0x000C(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Result;                                            // 0x0010(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Greater_FloatFloat_ReturnValue;           // 0x0011(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_12[0x2];                                       // 0x0012(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	struct FRotator                               CallFunc_K2_GetComponentRotation_ReturnValue;      // 0x0014(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                         CallFunc_BreakRotator_Roll;                        // 0x0020(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakRotator_Pitch;                       // 0x0024(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakRotator_Yaw;                         // 0x0028(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Add_FloatFloat_ReturnValue;               // 0x002C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector2D_X;                          // 0x0030(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector2D_Y;                          // 0x0034(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Multiply_FloatFloat_ReturnValue;          // 0x0038(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Abs_ReturnValue;                          // 0x003C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector2D                              CallFunc_GetRotated2D_ReturnValue;                 // 0x0040(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Greater_FloatFloat_ReturnValue_1;         // 0x0048(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_49[0x3];                                       // 0x0049(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_Subtract_FloatFloat_ReturnValue;          // 0x004C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector2D_X_1;                        // 0x0050(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector2D_Y_1;                        // 0x0054(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Greater_FloatFloat_ReturnValue_2;         // 0x0058(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Greater_FloatFloat_ReturnValue_3;         // 0x0059(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(CH_Hacker_AnimBP_C_SetMovementParameters) == 0x000004, "Wrong alignment on CH_Hacker_AnimBP_C_SetMovementParameters");
static_assert(sizeof(CH_Hacker_AnimBP_C_SetMovementParameters) == 0x00005C, "Wrong size on CH_Hacker_AnimBP_C_SetMovementParameters");
static_assert(offsetof(CH_Hacker_AnimBP_C_SetMovementParameters, Speed) == 0x000000, "Member 'CH_Hacker_AnimBP_C_SetMovementParameters::Speed' has a wrong offset!");
static_assert(offsetof(CH_Hacker_AnimBP_C_SetMovementParameters, Direction) == 0x000004, "Member 'CH_Hacker_AnimBP_C_SetMovementParameters::Direction' has a wrong offset!");
static_assert(offsetof(CH_Hacker_AnimBP_C_SetMovementParameters, CrouchProgress) == 0x00000C, "Member 'CH_Hacker_AnimBP_C_SetMovementParameters::CrouchProgress' has a wrong offset!");
static_assert(offsetof(CH_Hacker_AnimBP_C_SetMovementParameters, Result) == 0x000010, "Member 'CH_Hacker_AnimBP_C_SetMovementParameters::Result' has a wrong offset!");
static_assert(offsetof(CH_Hacker_AnimBP_C_SetMovementParameters, CallFunc_Greater_FloatFloat_ReturnValue) == 0x000011, "Member 'CH_Hacker_AnimBP_C_SetMovementParameters::CallFunc_Greater_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(CH_Hacker_AnimBP_C_SetMovementParameters, CallFunc_K2_GetComponentRotation_ReturnValue) == 0x000014, "Member 'CH_Hacker_AnimBP_C_SetMovementParameters::CallFunc_K2_GetComponentRotation_ReturnValue' has a wrong offset!");
static_assert(offsetof(CH_Hacker_AnimBP_C_SetMovementParameters, CallFunc_BreakRotator_Roll) == 0x000020, "Member 'CH_Hacker_AnimBP_C_SetMovementParameters::CallFunc_BreakRotator_Roll' has a wrong offset!");
static_assert(offsetof(CH_Hacker_AnimBP_C_SetMovementParameters, CallFunc_BreakRotator_Pitch) == 0x000024, "Member 'CH_Hacker_AnimBP_C_SetMovementParameters::CallFunc_BreakRotator_Pitch' has a wrong offset!");
static_assert(offsetof(CH_Hacker_AnimBP_C_SetMovementParameters, CallFunc_BreakRotator_Yaw) == 0x000028, "Member 'CH_Hacker_AnimBP_C_SetMovementParameters::CallFunc_BreakRotator_Yaw' has a wrong offset!");
static_assert(offsetof(CH_Hacker_AnimBP_C_SetMovementParameters, CallFunc_Add_FloatFloat_ReturnValue) == 0x00002C, "Member 'CH_Hacker_AnimBP_C_SetMovementParameters::CallFunc_Add_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(CH_Hacker_AnimBP_C_SetMovementParameters, CallFunc_BreakVector2D_X) == 0x000030, "Member 'CH_Hacker_AnimBP_C_SetMovementParameters::CallFunc_BreakVector2D_X' has a wrong offset!");
static_assert(offsetof(CH_Hacker_AnimBP_C_SetMovementParameters, CallFunc_BreakVector2D_Y) == 0x000034, "Member 'CH_Hacker_AnimBP_C_SetMovementParameters::CallFunc_BreakVector2D_Y' has a wrong offset!");
static_assert(offsetof(CH_Hacker_AnimBP_C_SetMovementParameters, CallFunc_Multiply_FloatFloat_ReturnValue) == 0x000038, "Member 'CH_Hacker_AnimBP_C_SetMovementParameters::CallFunc_Multiply_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(CH_Hacker_AnimBP_C_SetMovementParameters, CallFunc_Abs_ReturnValue) == 0x00003C, "Member 'CH_Hacker_AnimBP_C_SetMovementParameters::CallFunc_Abs_ReturnValue' has a wrong offset!");
static_assert(offsetof(CH_Hacker_AnimBP_C_SetMovementParameters, CallFunc_GetRotated2D_ReturnValue) == 0x000040, "Member 'CH_Hacker_AnimBP_C_SetMovementParameters::CallFunc_GetRotated2D_ReturnValue' has a wrong offset!");
static_assert(offsetof(CH_Hacker_AnimBP_C_SetMovementParameters, CallFunc_Greater_FloatFloat_ReturnValue_1) == 0x000048, "Member 'CH_Hacker_AnimBP_C_SetMovementParameters::CallFunc_Greater_FloatFloat_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(CH_Hacker_AnimBP_C_SetMovementParameters, CallFunc_Subtract_FloatFloat_ReturnValue) == 0x00004C, "Member 'CH_Hacker_AnimBP_C_SetMovementParameters::CallFunc_Subtract_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(CH_Hacker_AnimBP_C_SetMovementParameters, CallFunc_BreakVector2D_X_1) == 0x000050, "Member 'CH_Hacker_AnimBP_C_SetMovementParameters::CallFunc_BreakVector2D_X_1' has a wrong offset!");
static_assert(offsetof(CH_Hacker_AnimBP_C_SetMovementParameters, CallFunc_BreakVector2D_Y_1) == 0x000054, "Member 'CH_Hacker_AnimBP_C_SetMovementParameters::CallFunc_BreakVector2D_Y_1' has a wrong offset!");
static_assert(offsetof(CH_Hacker_AnimBP_C_SetMovementParameters, CallFunc_Greater_FloatFloat_ReturnValue_2) == 0x000058, "Member 'CH_Hacker_AnimBP_C_SetMovementParameters::CallFunc_Greater_FloatFloat_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(CH_Hacker_AnimBP_C_SetMovementParameters, CallFunc_Greater_FloatFloat_ReturnValue_3) == 0x000059, "Member 'CH_Hacker_AnimBP_C_SetMovementParameters::CallFunc_Greater_FloatFloat_ReturnValue_3' has a wrong offset!");

// Function CH_Hacker_AnimBP.CH_Hacker_AnimBP_C.SetIsSprinting
// 0x0002 (0x0002 - 0x0000)
struct CH_Hacker_AnimBP_C_SetIsSprinting final
{
public:
	bool                                          State;                                             // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Result;                                            // 0x0001(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(CH_Hacker_AnimBP_C_SetIsSprinting) == 0x000001, "Wrong alignment on CH_Hacker_AnimBP_C_SetIsSprinting");
static_assert(sizeof(CH_Hacker_AnimBP_C_SetIsSprinting) == 0x000002, "Wrong size on CH_Hacker_AnimBP_C_SetIsSprinting");
static_assert(offsetof(CH_Hacker_AnimBP_C_SetIsSprinting, State) == 0x000000, "Member 'CH_Hacker_AnimBP_C_SetIsSprinting::State' has a wrong offset!");
static_assert(offsetof(CH_Hacker_AnimBP_C_SetIsSprinting, Result) == 0x000001, "Member 'CH_Hacker_AnimBP_C_SetIsSprinting::Result' has a wrong offset!");

// Function CH_Hacker_AnimBP.CH_Hacker_AnimBP_C.SetLeanProgress
// 0x0008 (0x0008 - 0x0000)
struct CH_Hacker_AnimBP_C_SetLeanProgress final
{
public:
	float                                         SignedProgress;                                    // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Result;                                            // 0x0004(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(CH_Hacker_AnimBP_C_SetLeanProgress) == 0x000004, "Wrong alignment on CH_Hacker_AnimBP_C_SetLeanProgress");
static_assert(sizeof(CH_Hacker_AnimBP_C_SetLeanProgress) == 0x000008, "Wrong size on CH_Hacker_AnimBP_C_SetLeanProgress");
static_assert(offsetof(CH_Hacker_AnimBP_C_SetLeanProgress, SignedProgress) == 0x000000, "Member 'CH_Hacker_AnimBP_C_SetLeanProgress::SignedProgress' has a wrong offset!");
static_assert(offsetof(CH_Hacker_AnimBP_C_SetLeanProgress, Result) == 0x000004, "Member 'CH_Hacker_AnimBP_C_SetLeanProgress::Result' has a wrong offset!");

// Function CH_Hacker_AnimBP.CH_Hacker_AnimBP_C.SetCameraTarget
// 0x0070 (0x0070 - 0x0000)
struct CH_Hacker_AnimBP_C_SetCameraTarget final
{
public:
	struct FRotator                               LookRotation;                                      // 0x0000(0x000C)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FVector                                HeadLocation;                                      // 0x000C(0x000C)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Result;                                            // 0x0018(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_19[0x7];                                       // 0x0019(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTransform                             CallFunc_K2_GetComponentToWorld_ReturnValue;       // 0x0020(0x0030)(IsPlainOldData, NoDestructor)
	struct FRotator                               CallFunc_InverseTransformRotation_ReturnValue;     // 0x0050(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FVector                                CallFunc_InverseTransformDirection_ReturnValue;    // 0x005C(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(CH_Hacker_AnimBP_C_SetCameraTarget) == 0x000010, "Wrong alignment on CH_Hacker_AnimBP_C_SetCameraTarget");
static_assert(sizeof(CH_Hacker_AnimBP_C_SetCameraTarget) == 0x000070, "Wrong size on CH_Hacker_AnimBP_C_SetCameraTarget");
static_assert(offsetof(CH_Hacker_AnimBP_C_SetCameraTarget, LookRotation) == 0x000000, "Member 'CH_Hacker_AnimBP_C_SetCameraTarget::LookRotation' has a wrong offset!");
static_assert(offsetof(CH_Hacker_AnimBP_C_SetCameraTarget, HeadLocation) == 0x00000C, "Member 'CH_Hacker_AnimBP_C_SetCameraTarget::HeadLocation' has a wrong offset!");
static_assert(offsetof(CH_Hacker_AnimBP_C_SetCameraTarget, Result) == 0x000018, "Member 'CH_Hacker_AnimBP_C_SetCameraTarget::Result' has a wrong offset!");
static_assert(offsetof(CH_Hacker_AnimBP_C_SetCameraTarget, CallFunc_K2_GetComponentToWorld_ReturnValue) == 0x000020, "Member 'CH_Hacker_AnimBP_C_SetCameraTarget::CallFunc_K2_GetComponentToWorld_ReturnValue' has a wrong offset!");
static_assert(offsetof(CH_Hacker_AnimBP_C_SetCameraTarget, CallFunc_InverseTransformRotation_ReturnValue) == 0x000050, "Member 'CH_Hacker_AnimBP_C_SetCameraTarget::CallFunc_InverseTransformRotation_ReturnValue' has a wrong offset!");
static_assert(offsetof(CH_Hacker_AnimBP_C_SetCameraTarget, CallFunc_InverseTransformDirection_ReturnValue) == 0x00005C, "Member 'CH_Hacker_AnimBP_C_SetCameraTarget::CallFunc_InverseTransformDirection_ReturnValue' has a wrong offset!");

// Function CH_Hacker_AnimBP.CH_Hacker_AnimBP_C.SetOverrideIdleSequence
// 0x0010 (0x0010 - 0x0000)
struct CH_Hacker_AnimBP_C_SetOverrideIdleSequence final
{
public:
	class UAnimSequenceBase*                      OverrideIdleSequence;                              // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          IsCinematic;                                       // 0x0008(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Result;                                            // 0x0009(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x000A(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BooleanAND_ReturnValue;                   // 0x000B(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(CH_Hacker_AnimBP_C_SetOverrideIdleSequence) == 0x000008, "Wrong alignment on CH_Hacker_AnimBP_C_SetOverrideIdleSequence");
static_assert(sizeof(CH_Hacker_AnimBP_C_SetOverrideIdleSequence) == 0x000010, "Wrong size on CH_Hacker_AnimBP_C_SetOverrideIdleSequence");
static_assert(offsetof(CH_Hacker_AnimBP_C_SetOverrideIdleSequence, OverrideIdleSequence) == 0x000000, "Member 'CH_Hacker_AnimBP_C_SetOverrideIdleSequence::OverrideIdleSequence' has a wrong offset!");
static_assert(offsetof(CH_Hacker_AnimBP_C_SetOverrideIdleSequence, IsCinematic) == 0x000008, "Member 'CH_Hacker_AnimBP_C_SetOverrideIdleSequence::IsCinematic' has a wrong offset!");
static_assert(offsetof(CH_Hacker_AnimBP_C_SetOverrideIdleSequence, Result) == 0x000009, "Member 'CH_Hacker_AnimBP_C_SetOverrideIdleSequence::Result' has a wrong offset!");
static_assert(offsetof(CH_Hacker_AnimBP_C_SetOverrideIdleSequence, CallFunc_IsValid_ReturnValue) == 0x00000A, "Member 'CH_Hacker_AnimBP_C_SetOverrideIdleSequence::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(CH_Hacker_AnimBP_C_SetOverrideIdleSequence, CallFunc_BooleanAND_ReturnValue) == 0x00000B, "Member 'CH_Hacker_AnimBP_C_SetOverrideIdleSequence::CallFunc_BooleanAND_ReturnValue' has a wrong offset!");

// Function CH_Hacker_AnimBP.CH_Hacker_AnimBP_C.SetWeaponOffset
// 0x0010 (0x0010 - 0x0000)
struct CH_Hacker_AnimBP_C_SetWeaponOffset final
{
public:
	struct FVector                                Offset;                                            // 0x0000(0x000C)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Result;                                            // 0x000C(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(CH_Hacker_AnimBP_C_SetWeaponOffset) == 0x000004, "Wrong alignment on CH_Hacker_AnimBP_C_SetWeaponOffset");
static_assert(sizeof(CH_Hacker_AnimBP_C_SetWeaponOffset) == 0x000010, "Wrong size on CH_Hacker_AnimBP_C_SetWeaponOffset");
static_assert(offsetof(CH_Hacker_AnimBP_C_SetWeaponOffset, Offset) == 0x000000, "Member 'CH_Hacker_AnimBP_C_SetWeaponOffset::Offset' has a wrong offset!");
static_assert(offsetof(CH_Hacker_AnimBP_C_SetWeaponOffset, Result) == 0x00000C, "Member 'CH_Hacker_AnimBP_C_SetWeaponOffset::Result' has a wrong offset!");

// Function CH_Hacker_AnimBP.CH_Hacker_AnimBP_C.SetUseIK
// 0x0002 (0x0002 - 0x0000)
struct CH_Hacker_AnimBP_C_SetUseIK final
{
public:
	bool                                          UseIK_0;                                           // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Result;                                            // 0x0001(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(CH_Hacker_AnimBP_C_SetUseIK) == 0x000001, "Wrong alignment on CH_Hacker_AnimBP_C_SetUseIK");
static_assert(sizeof(CH_Hacker_AnimBP_C_SetUseIK) == 0x000002, "Wrong size on CH_Hacker_AnimBP_C_SetUseIK");
static_assert(offsetof(CH_Hacker_AnimBP_C_SetUseIK, UseIK_0) == 0x000000, "Member 'CH_Hacker_AnimBP_C_SetUseIK::UseIK_0' has a wrong offset!");
static_assert(offsetof(CH_Hacker_AnimBP_C_SetUseIK, Result) == 0x000001, "Member 'CH_Hacker_AnimBP_C_SetUseIK::Result' has a wrong offset!");

// Function CH_Hacker_AnimBP.CH_Hacker_AnimBP_C.GetCameraRootPos
// 0x0018 (0x0018 - 0x0000)
struct CH_Hacker_AnimBP_C_GetCameraRootPos final
{
public:
	struct FVector                                Location;                                          // 0x0000(0x000C)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_GetSocketLocation_ReturnValue;            // 0x000C(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(CH_Hacker_AnimBP_C_GetCameraRootPos) == 0x000004, "Wrong alignment on CH_Hacker_AnimBP_C_GetCameraRootPos");
static_assert(sizeof(CH_Hacker_AnimBP_C_GetCameraRootPos) == 0x000018, "Wrong size on CH_Hacker_AnimBP_C_GetCameraRootPos");
static_assert(offsetof(CH_Hacker_AnimBP_C_GetCameraRootPos, Location) == 0x000000, "Member 'CH_Hacker_AnimBP_C_GetCameraRootPos::Location' has a wrong offset!");
static_assert(offsetof(CH_Hacker_AnimBP_C_GetCameraRootPos, CallFunc_GetSocketLocation_ReturnValue) == 0x00000C, "Member 'CH_Hacker_AnimBP_C_GetCameraRootPos::CallFunc_GetSocketLocation_ReturnValue' has a wrong offset!");

// Function CH_Hacker_AnimBP.CH_Hacker_AnimBP_C.SetLadderParams
// 0x0003 (0x0003 - 0x0000)
struct CH_Hacker_AnimBP_C_SetLadderParams final
{
public:
	bool                                          IsMounted;                                         // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	ENUM_LeftRight                                RestingFootDown;                                   // 0x0001(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Result;                                            // 0x0002(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(CH_Hacker_AnimBP_C_SetLadderParams) == 0x000001, "Wrong alignment on CH_Hacker_AnimBP_C_SetLadderParams");
static_assert(sizeof(CH_Hacker_AnimBP_C_SetLadderParams) == 0x000003, "Wrong size on CH_Hacker_AnimBP_C_SetLadderParams");
static_assert(offsetof(CH_Hacker_AnimBP_C_SetLadderParams, IsMounted) == 0x000000, "Member 'CH_Hacker_AnimBP_C_SetLadderParams::IsMounted' has a wrong offset!");
static_assert(offsetof(CH_Hacker_AnimBP_C_SetLadderParams, RestingFootDown) == 0x000001, "Member 'CH_Hacker_AnimBP_C_SetLadderParams::RestingFootDown' has a wrong offset!");
static_assert(offsetof(CH_Hacker_AnimBP_C_SetLadderParams, Result) == 0x000002, "Member 'CH_Hacker_AnimBP_C_SetLadderParams::Result' has a wrong offset!");

// Function CH_Hacker_AnimBP.CH_Hacker_AnimBP_C.GetOverrideIdleSequence
// 0x0008 (0x0008 - 0x0000)
struct CH_Hacker_AnimBP_C_GetOverrideIdleSequence final
{
public:
	class UAnimSequenceBase*                      Result;                                            // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(CH_Hacker_AnimBP_C_GetOverrideIdleSequence) == 0x000008, "Wrong alignment on CH_Hacker_AnimBP_C_GetOverrideIdleSequence");
static_assert(sizeof(CH_Hacker_AnimBP_C_GetOverrideIdleSequence) == 0x000008, "Wrong size on CH_Hacker_AnimBP_C_GetOverrideIdleSequence");
static_assert(offsetof(CH_Hacker_AnimBP_C_GetOverrideIdleSequence, Result) == 0x000000, "Member 'CH_Hacker_AnimBP_C_GetOverrideIdleSequence::Result' has a wrong offset!");

// Function CH_Hacker_AnimBP.CH_Hacker_AnimBP_C.SetIsGrounded
// 0x0002 (0x0002 - 0x0000)
struct CH_Hacker_AnimBP_C_SetIsGrounded final
{
public:
	bool                                          IsGrounded_0;                                      // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Result;                                            // 0x0001(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(CH_Hacker_AnimBP_C_SetIsGrounded) == 0x000001, "Wrong alignment on CH_Hacker_AnimBP_C_SetIsGrounded");
static_assert(sizeof(CH_Hacker_AnimBP_C_SetIsGrounded) == 0x000002, "Wrong size on CH_Hacker_AnimBP_C_SetIsGrounded");
static_assert(offsetof(CH_Hacker_AnimBP_C_SetIsGrounded, IsGrounded_0) == 0x000000, "Member 'CH_Hacker_AnimBP_C_SetIsGrounded::IsGrounded_0' has a wrong offset!");
static_assert(offsetof(CH_Hacker_AnimBP_C_SetIsGrounded, Result) == 0x000001, "Member 'CH_Hacker_AnimBP_C_SetIsGrounded::Result' has a wrong offset!");

// Function CH_Hacker_AnimBP.CH_Hacker_AnimBP_C.SetAirLandingScale
// 0x000C (0x000C - 0x0000)
struct CH_Hacker_AnimBP_C_SetAirLandingScale final
{
public:
	float                                         Scale;                                             // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Result;                                            // 0x0004(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_Ease_ReturnValue;                         // 0x0008(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(CH_Hacker_AnimBP_C_SetAirLandingScale) == 0x000004, "Wrong alignment on CH_Hacker_AnimBP_C_SetAirLandingScale");
static_assert(sizeof(CH_Hacker_AnimBP_C_SetAirLandingScale) == 0x00000C, "Wrong size on CH_Hacker_AnimBP_C_SetAirLandingScale");
static_assert(offsetof(CH_Hacker_AnimBP_C_SetAirLandingScale, Scale) == 0x000000, "Member 'CH_Hacker_AnimBP_C_SetAirLandingScale::Scale' has a wrong offset!");
static_assert(offsetof(CH_Hacker_AnimBP_C_SetAirLandingScale, Result) == 0x000004, "Member 'CH_Hacker_AnimBP_C_SetAirLandingScale::Result' has a wrong offset!");
static_assert(offsetof(CH_Hacker_AnimBP_C_SetAirLandingScale, CallFunc_Ease_ReturnValue) == 0x000008, "Member 'CH_Hacker_AnimBP_C_SetAirLandingScale::CallFunc_Ease_ReturnValue' has a wrong offset!");

// Function CH_Hacker_AnimBP.CH_Hacker_AnimBP_C.SetAimProgress
// 0x0008 (0x0008 - 0x0000)
struct CH_Hacker_AnimBP_C_SetAimProgress final
{
public:
	float                                         Progress;                                          // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Result;                                            // 0x0004(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(CH_Hacker_AnimBP_C_SetAimProgress) == 0x000004, "Wrong alignment on CH_Hacker_AnimBP_C_SetAimProgress");
static_assert(sizeof(CH_Hacker_AnimBP_C_SetAimProgress) == 0x000008, "Wrong size on CH_Hacker_AnimBP_C_SetAimProgress");
static_assert(offsetof(CH_Hacker_AnimBP_C_SetAimProgress, Progress) == 0x000000, "Member 'CH_Hacker_AnimBP_C_SetAimProgress::Progress' has a wrong offset!");
static_assert(offsetof(CH_Hacker_AnimBP_C_SetAimProgress, Result) == 0x000004, "Member 'CH_Hacker_AnimBP_C_SetAimProgress::Result' has a wrong offset!");

// Function CH_Hacker_AnimBP.CH_Hacker_AnimBP_C.UpdateEquippedItemSequences
// 0x0001 (0x0001 - 0x0000)
struct CH_Hacker_AnimBP_C_UpdateEquippedItemSequences final
{
public:
	bool                                          Result;                                            // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(CH_Hacker_AnimBP_C_UpdateEquippedItemSequences) == 0x000001, "Wrong alignment on CH_Hacker_AnimBP_C_UpdateEquippedItemSequences");
static_assert(sizeof(CH_Hacker_AnimBP_C_UpdateEquippedItemSequences) == 0x000001, "Wrong size on CH_Hacker_AnimBP_C_UpdateEquippedItemSequences");
static_assert(offsetof(CH_Hacker_AnimBP_C_UpdateEquippedItemSequences, Result) == 0x000000, "Member 'CH_Hacker_AnimBP_C_UpdateEquippedItemSequences::Result' has a wrong offset!");

// Function CH_Hacker_AnimBP.CH_Hacker_AnimBP_C.SetWeaponObstructed
// 0x0002 (0x0002 - 0x0000)
struct CH_Hacker_AnimBP_C_SetWeaponObstructed final
{
public:
	bool                                          Obstructed;                                        // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Result;                                            // 0x0001(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(CH_Hacker_AnimBP_C_SetWeaponObstructed) == 0x000001, "Wrong alignment on CH_Hacker_AnimBP_C_SetWeaponObstructed");
static_assert(sizeof(CH_Hacker_AnimBP_C_SetWeaponObstructed) == 0x000002, "Wrong size on CH_Hacker_AnimBP_C_SetWeaponObstructed");
static_assert(offsetof(CH_Hacker_AnimBP_C_SetWeaponObstructed, Obstructed) == 0x000000, "Member 'CH_Hacker_AnimBP_C_SetWeaponObstructed::Obstructed' has a wrong offset!");
static_assert(offsetof(CH_Hacker_AnimBP_C_SetWeaponObstructed, Result) == 0x000001, "Member 'CH_Hacker_AnimBP_C_SetWeaponObstructed::Result' has a wrong offset!");

}

