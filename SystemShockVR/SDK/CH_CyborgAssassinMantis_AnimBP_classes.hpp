#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: CH_CyborgAssassinMantis_AnimBP

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "Engine_classes.hpp"
#include "AnimGraphRuntime_structs.hpp"
#include "CoreUObject_structs.hpp"
#include "ENUM_DeathBlowType_structs.hpp"
#include "ENUM_Emotions_structs.hpp"


namespace SDK
{

// AnimBlueprintGeneratedClass CH_CyborgAssassinMantis_AnimBP.CH_CyborgAssassinMantis_AnimBP_C
// 0x14B0 (0x1770 - 0x02C0)
class UCH_CyborgAssassinMantis_AnimBP_C final : public UAnimInstance
{
public:
	uint8                                         Pad_2B8[0x8];                                      // 0x02B8(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x02C0(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	struct FAnimNode_TransitionResult             AnimGraphNode_TransitionResult_4;                  // 0x02C8(0x0028)()
	struct FAnimNode_TransitionResult             AnimGraphNode_TransitionResult_3;                  // 0x02F0(0x0028)()
	struct FAnimNode_TransitionResult             AnimGraphNode_TransitionResult_2;                  // 0x0318(0x0028)()
	struct FAnimNode_TransitionResult             AnimGraphNode_TransitionResult_1;                  // 0x0340(0x0028)()
	struct FAnimNode_TransitionResult             AnimGraphNode_TransitionResult;                    // 0x0368(0x0028)()
	struct FAnimNode_BlendSpacePlayer             AnimGraphNode_BlendSpacePlayer_2;                  // 0x0390(0x00E8)()
	struct FAnimNode_StateResult                  AnimGraphNode_StateResult_2;                       // 0x0478(0x0030)()
	struct FAnimNode_SequencePlayer               AnimGraphNode_SequencePlayer_1;                    // 0x04A8(0x0080)()
	struct FAnimNode_Slot                         AnimGraphNode_Slot_4;                              // 0x0528(0x0048)()
	struct FAnimNode_StateResult                  AnimGraphNode_StateResult_1;                       // 0x0570(0x0030)()
	struct FAnimNode_BlendListByBool              AnimGraphNode_BlendListByBool_4;                   // 0x05A0(0x00A0)()
	struct FAnimNode_BlendSpacePlayer             AnimGraphNode_BlendSpacePlayer_1;                  // 0x0640(0x00E8)()
	struct FAnimNode_BlendSpacePlayer             AnimGraphNode_BlendSpacePlayer;                    // 0x0728(0x00E8)()
	struct FAnimNode_StateResult                  AnimGraphNode_StateResult;                         // 0x0810(0x0030)()
	struct FAnimNode_StateMachine                 AnimGraphNode_StateMachine;                        // 0x0840(0x00B0)()
	struct FAnimNode_LookAt                       AnimGraphNode_LookAt;                              // 0x08F0(0x01B0)()
	struct FAnimNode_ConvertComponentToLocalSpace AnimGraphNode_ComponentToLocalSpace_1;             // 0x0AA0(0x0020)()
	struct FAnimNode_Slot                         AnimGraphNode_Slot_3;                              // 0x0AC0(0x0048)()
	struct FAnimNode_LayeredBoneBlend             AnimGraphNode_LayeredBoneBlend;                    // 0x0B08(0x00C0)()
	struct FAnimNode_Slot                         AnimGraphNode_Slot_2;                              // 0x0BC8(0x0048)()
	struct FAnimNode_SaveCachedPose               AnimGraphNode_SaveCachedPose_2;                    // 0x0C10(0x0158)()
	struct FAnimNode_UseCachedPose                AnimGraphNode_UseCachedPose_5;                     // 0x0D68(0x0028)()
	struct FAnimNode_UseCachedPose                AnimGraphNode_UseCachedPose_4;                     // 0x0D90(0x0028)()
	struct FAnimNode_SaveCachedPose               AnimGraphNode_SaveCachedPose_1;                    // 0x0DB8(0x0158)()
	struct FAnimNode_BlendListByBool              AnimGraphNode_BlendListByBool_3;                   // 0x0F10(0x00A0)()
	struct FAnimNode_UseCachedPose                AnimGraphNode_UseCachedPose_3;                     // 0x0FB0(0x0028)()
	struct FAnimNode_UseCachedPose                AnimGraphNode_UseCachedPose_2;                     // 0x0FD8(0x0028)()
	struct FAnimNode_SequencePlayer               AnimGraphNode_SequencePlayer;                      // 0x1000(0x0080)()
	struct FAnimNode_BlendListByBool              AnimGraphNode_BlendListByBool_2;                   // 0x1080(0x00A0)()
	struct FAnimNode_ModifyBone                   AnimGraphNode_ModifyBone;                          // 0x1120(0x0108)()
	struct FAnimNode_ConvertLocalToComponentSpace AnimGraphNode_LocalToComponentSpace_1;             // 0x1228(0x0020)()
	struct FAnimNode_ConvertComponentToLocalSpace AnimGraphNode_ComponentToLocalSpace;               // 0x1248(0x0020)()
	struct FAnimNode_BlendListByBool              AnimGraphNode_BlendListByBool_1;                   // 0x1268(0x00A0)()
	struct FAnimNode_BlendListByBool              AnimGraphNode_BlendListByBool;                     // 0x1308(0x00A0)()
	struct FAnimNode_SaveCachedPose               AnimGraphNode_SaveCachedPose;                      // 0x13A8(0x0158)()
	struct FAnimNode_UseCachedPose                AnimGraphNode_UseCachedPose_1;                     // 0x1500(0x0028)()
	struct FAnimNode_UseCachedPose                AnimGraphNode_UseCachedPose;                       // 0x1528(0x0028)()
	struct FAnimNode_ConvertLocalToComponentSpace AnimGraphNode_LocalToComponentSpace;               // 0x1550(0x0020)()
	struct FAnimNode_Slot                         AnimGraphNode_Slot_1;                              // 0x1570(0x0048)()
	struct FAnimNode_Slot                         AnimGraphNode_Slot;                                // 0x15B8(0x0048)()
	struct FAnimNode_Root                         AnimGraphNode_Root;                                // 0x1600(0x0030)()
	struct FAnimNode_PoseSnapshot                 AnimGraphNode_PoseSnapshot;                        // 0x1630(0x0090)()
	bool                                          IsAlive;                                           // 0x16C0(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_16C1[0x3];                                     // 0x16C1(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         MovementSpeed;                                     // 0x16C4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         MovementAngle;                                     // 0x16C8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                LookAtLocation;                                    // 0x16CC(0x000C)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         LookAtAlpha;                                       // 0x16D8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ENUM_DeathBlowType                            DeathBlow;                                         // 0x16DC(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_16DD[0x3];                                     // 0x16DD(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         VocalisationVolume;                                // 0x16E0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          OverrideDeathPhysics;                              // 0x16E4(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_16E5[0x3];                                     // 0x16E5(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class UAnimSequenceBase*>              IdleFidgets;                                       // 0x16E8(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance)
	class APAWN_Enemy_C*                          PawnEnemy;                                         // 0x16F8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         BodyTargetAngle;                                   // 0x1700(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               LastFrameRotation;                                 // 0x1704(0x000C)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	float                                         RotationDelta;                                     // 0x1710(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         RotationAnimationDuration;                         // 0x1714(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         StartingMoveTargetAngle;                           // 0x1718(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         DeltaSeconds;                                      // 0x171C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          EnableLookAt;                                      // 0x1720(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          StartPivot;                                        // 0x1721(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_1722[0x2];                                     // 0x1722(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                SmoothLookAtLocation;                              // 0x1724(0x000C)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         LookAtLerpRate;                                    // 0x1730(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         IdleFidgetRandomMin;                               // 0x1734(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         IdleFidgetRandomMax;                               // 0x1738(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          IsSprintEnabled;                                   // 0x173C(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_173D[0x3];                                     // 0x173D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class UAnimSequence*                          StunnedAnimSequence;                               // 0x1740(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          UseStunnedSequence;                                // 0x1748(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_1749[0x3];                                     // 0x1749(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         TurnTarget;                                        // 0x174C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         TurnTargetError;                                   // 0x1750(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         TurnDelta;                                         // 0x1754(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         TurnTargetChached;                                 // 0x1758(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         TurnDeltaCached;                                   // 0x175C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CanTurn;                                           // 0x1760(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)

public:
	void ExecuteUbergraph_CH_CyborgAssassinMantis_AnimBP(int32 EntryPoint);
	void AnimNotify_EndPivotRotation();
	void AnimNotify_StartPivotRotation();
	void AnimNotify_StartPhysicsBlend();
	void GetEnemyPawn();
	void BlueprintBeginPlay();
	void StartIdleFidgets();
	void BlueprintInitializeAnimation();
	void BlueprintUpdateAnimation(float DeltaTimeX);
	void EvaluateGraphExposedInputs_ExecuteUbergraph_CH_CyborgAssassinMantis_AnimBP_AnimGraphNode_TransitionResult_2C61046C4C6CA878EF0205B7CA861AAC();
	void EvaluateGraphExposedInputs_ExecuteUbergraph_CH_CyborgAssassinMantis_AnimBP_AnimGraphNode_TransitionResult_C154DB734B246E59C97C9792C62B48D7();
	void EvaluateGraphExposedInputs_ExecuteUbergraph_CH_CyborgAssassinMantis_AnimBP_AnimGraphNode_TransitionResult_1E0C9B0F47D5632E596FD5BFD02F071E();
	void EvaluateGraphExposedInputs_ExecuteUbergraph_CH_CyborgAssassinMantis_AnimBP_AnimGraphNode_TransitionResult_1AAF73064F43BC42245BC4B9DBD96853();
	void EvaluateGraphExposedInputs_ExecuteUbergraph_CH_CyborgAssassinMantis_AnimBP_AnimGraphNode_TransitionResult_549D1FBD48CBCBB759A26081FCD7282A();
	void EvaluateGraphExposedInputs_ExecuteUbergraph_CH_CyborgAssassinMantis_AnimBP_AnimGraphNode_BlendListByBool_DF0823FA40729F5B8FFCC091766D28C4();
	void IsTargetFocused(bool* TargetIsFocused);
	void AnimGraph(struct FPoseLink* AnimGraph_0);
	void ReceiveImpact(const struct FVector& Impulse, const struct FVector& ImpactLocation, const struct FVector& ImpactNormal, class FName BoneName, const class FString& DamageType, float DamageAmount, float FlinchTime, bool* Result);
	void SetIsAlive(bool IsAlive_0, bool* Result);
	void SetMovementParameters(const struct FVector& Velocity, const struct FRotator& Rotation, const struct FRotator& DesiredRotation, bool* Result);
	void SetLookAtAlpha(float Alpha, bool* Result);
	void SetLookAtLocation(const struct FVector& Location, bool* Result);
	void ReceiveDeathBlow(ENUM_DeathBlowType BodyPart, bool* Result);
	void SetStandingTurn(float SignedAngleToTarget, bool IsStanding, bool* Result);
	void SetCatatonic(bool State, bool* Result);
	void SetStance(ENUM_Emotions Stance, bool* Result);
	void GetStance(ENUM_Emotions* Stance);
	void GetRotation(struct FRotator* AnimRotationPerSecond, float* AnimRotationAlpha);
	void SetRelativeAimAngleOffset(float YawOffset, float PitchOffset, float Alpha, bool* Result);
	void SetIdleOverrideSequence(class UAnimSequenceBase* IdleOverride, bool* Result);
	void GetIdleOverrideSequence(class UAnimSequenceBase** IdleOverride);
	void SetAimTarget(class UOBJ_EnemyTarget_C* Target, bool* Result);
	void SetTravelMode(bool TravelModeOn, bool* Result);
	void SetSprintEnabled(bool SprintEnabled, bool* Result);
	void GetAimTarget(class UOBJ_EnemyTarget_C** Target);
	void SetStunnedSequence(class UAnimSequence* StunnedSequence, bool* Result);
	void IsStunned(bool* Result);
	void SetVoiceAmplitude(float VoiceAmplitude, bool* Result);

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"CH_CyborgAssassinMantis_AnimBP_C">();
	}
	static class UCH_CyborgAssassinMantis_AnimBP_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<UCH_CyborgAssassinMantis_AnimBP_C>();
	}
};
static_assert(alignof(UCH_CyborgAssassinMantis_AnimBP_C) == 0x000010, "Wrong alignment on UCH_CyborgAssassinMantis_AnimBP_C");
static_assert(sizeof(UCH_CyborgAssassinMantis_AnimBP_C) == 0x001770, "Wrong size on UCH_CyborgAssassinMantis_AnimBP_C");
static_assert(offsetof(UCH_CyborgAssassinMantis_AnimBP_C, UberGraphFrame) == 0x0002C0, "Member 'UCH_CyborgAssassinMantis_AnimBP_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(UCH_CyborgAssassinMantis_AnimBP_C, AnimGraphNode_TransitionResult_4) == 0x0002C8, "Member 'UCH_CyborgAssassinMantis_AnimBP_C::AnimGraphNode_TransitionResult_4' has a wrong offset!");
static_assert(offsetof(UCH_CyborgAssassinMantis_AnimBP_C, AnimGraphNode_TransitionResult_3) == 0x0002F0, "Member 'UCH_CyborgAssassinMantis_AnimBP_C::AnimGraphNode_TransitionResult_3' has a wrong offset!");
static_assert(offsetof(UCH_CyborgAssassinMantis_AnimBP_C, AnimGraphNode_TransitionResult_2) == 0x000318, "Member 'UCH_CyborgAssassinMantis_AnimBP_C::AnimGraphNode_TransitionResult_2' has a wrong offset!");
static_assert(offsetof(UCH_CyborgAssassinMantis_AnimBP_C, AnimGraphNode_TransitionResult_1) == 0x000340, "Member 'UCH_CyborgAssassinMantis_AnimBP_C::AnimGraphNode_TransitionResult_1' has a wrong offset!");
static_assert(offsetof(UCH_CyborgAssassinMantis_AnimBP_C, AnimGraphNode_TransitionResult) == 0x000368, "Member 'UCH_CyborgAssassinMantis_AnimBP_C::AnimGraphNode_TransitionResult' has a wrong offset!");
static_assert(offsetof(UCH_CyborgAssassinMantis_AnimBP_C, AnimGraphNode_BlendSpacePlayer_2) == 0x000390, "Member 'UCH_CyborgAssassinMantis_AnimBP_C::AnimGraphNode_BlendSpacePlayer_2' has a wrong offset!");
static_assert(offsetof(UCH_CyborgAssassinMantis_AnimBP_C, AnimGraphNode_StateResult_2) == 0x000478, "Member 'UCH_CyborgAssassinMantis_AnimBP_C::AnimGraphNode_StateResult_2' has a wrong offset!");
static_assert(offsetof(UCH_CyborgAssassinMantis_AnimBP_C, AnimGraphNode_SequencePlayer_1) == 0x0004A8, "Member 'UCH_CyborgAssassinMantis_AnimBP_C::AnimGraphNode_SequencePlayer_1' has a wrong offset!");
static_assert(offsetof(UCH_CyborgAssassinMantis_AnimBP_C, AnimGraphNode_Slot_4) == 0x000528, "Member 'UCH_CyborgAssassinMantis_AnimBP_C::AnimGraphNode_Slot_4' has a wrong offset!");
static_assert(offsetof(UCH_CyborgAssassinMantis_AnimBP_C, AnimGraphNode_StateResult_1) == 0x000570, "Member 'UCH_CyborgAssassinMantis_AnimBP_C::AnimGraphNode_StateResult_1' has a wrong offset!");
static_assert(offsetof(UCH_CyborgAssassinMantis_AnimBP_C, AnimGraphNode_BlendListByBool_4) == 0x0005A0, "Member 'UCH_CyborgAssassinMantis_AnimBP_C::AnimGraphNode_BlendListByBool_4' has a wrong offset!");
static_assert(offsetof(UCH_CyborgAssassinMantis_AnimBP_C, AnimGraphNode_BlendSpacePlayer_1) == 0x000640, "Member 'UCH_CyborgAssassinMantis_AnimBP_C::AnimGraphNode_BlendSpacePlayer_1' has a wrong offset!");
static_assert(offsetof(UCH_CyborgAssassinMantis_AnimBP_C, AnimGraphNode_BlendSpacePlayer) == 0x000728, "Member 'UCH_CyborgAssassinMantis_AnimBP_C::AnimGraphNode_BlendSpacePlayer' has a wrong offset!");
static_assert(offsetof(UCH_CyborgAssassinMantis_AnimBP_C, AnimGraphNode_StateResult) == 0x000810, "Member 'UCH_CyborgAssassinMantis_AnimBP_C::AnimGraphNode_StateResult' has a wrong offset!");
static_assert(offsetof(UCH_CyborgAssassinMantis_AnimBP_C, AnimGraphNode_StateMachine) == 0x000840, "Member 'UCH_CyborgAssassinMantis_AnimBP_C::AnimGraphNode_StateMachine' has a wrong offset!");
static_assert(offsetof(UCH_CyborgAssassinMantis_AnimBP_C, AnimGraphNode_LookAt) == 0x0008F0, "Member 'UCH_CyborgAssassinMantis_AnimBP_C::AnimGraphNode_LookAt' has a wrong offset!");
static_assert(offsetof(UCH_CyborgAssassinMantis_AnimBP_C, AnimGraphNode_ComponentToLocalSpace_1) == 0x000AA0, "Member 'UCH_CyborgAssassinMantis_AnimBP_C::AnimGraphNode_ComponentToLocalSpace_1' has a wrong offset!");
static_assert(offsetof(UCH_CyborgAssassinMantis_AnimBP_C, AnimGraphNode_Slot_3) == 0x000AC0, "Member 'UCH_CyborgAssassinMantis_AnimBP_C::AnimGraphNode_Slot_3' has a wrong offset!");
static_assert(offsetof(UCH_CyborgAssassinMantis_AnimBP_C, AnimGraphNode_LayeredBoneBlend) == 0x000B08, "Member 'UCH_CyborgAssassinMantis_AnimBP_C::AnimGraphNode_LayeredBoneBlend' has a wrong offset!");
static_assert(offsetof(UCH_CyborgAssassinMantis_AnimBP_C, AnimGraphNode_Slot_2) == 0x000BC8, "Member 'UCH_CyborgAssassinMantis_AnimBP_C::AnimGraphNode_Slot_2' has a wrong offset!");
static_assert(offsetof(UCH_CyborgAssassinMantis_AnimBP_C, AnimGraphNode_SaveCachedPose_2) == 0x000C10, "Member 'UCH_CyborgAssassinMantis_AnimBP_C::AnimGraphNode_SaveCachedPose_2' has a wrong offset!");
static_assert(offsetof(UCH_CyborgAssassinMantis_AnimBP_C, AnimGraphNode_UseCachedPose_5) == 0x000D68, "Member 'UCH_CyborgAssassinMantis_AnimBP_C::AnimGraphNode_UseCachedPose_5' has a wrong offset!");
static_assert(offsetof(UCH_CyborgAssassinMantis_AnimBP_C, AnimGraphNode_UseCachedPose_4) == 0x000D90, "Member 'UCH_CyborgAssassinMantis_AnimBP_C::AnimGraphNode_UseCachedPose_4' has a wrong offset!");
static_assert(offsetof(UCH_CyborgAssassinMantis_AnimBP_C, AnimGraphNode_SaveCachedPose_1) == 0x000DB8, "Member 'UCH_CyborgAssassinMantis_AnimBP_C::AnimGraphNode_SaveCachedPose_1' has a wrong offset!");
static_assert(offsetof(UCH_CyborgAssassinMantis_AnimBP_C, AnimGraphNode_BlendListByBool_3) == 0x000F10, "Member 'UCH_CyborgAssassinMantis_AnimBP_C::AnimGraphNode_BlendListByBool_3' has a wrong offset!");
static_assert(offsetof(UCH_CyborgAssassinMantis_AnimBP_C, AnimGraphNode_UseCachedPose_3) == 0x000FB0, "Member 'UCH_CyborgAssassinMantis_AnimBP_C::AnimGraphNode_UseCachedPose_3' has a wrong offset!");
static_assert(offsetof(UCH_CyborgAssassinMantis_AnimBP_C, AnimGraphNode_UseCachedPose_2) == 0x000FD8, "Member 'UCH_CyborgAssassinMantis_AnimBP_C::AnimGraphNode_UseCachedPose_2' has a wrong offset!");
static_assert(offsetof(UCH_CyborgAssassinMantis_AnimBP_C, AnimGraphNode_SequencePlayer) == 0x001000, "Member 'UCH_CyborgAssassinMantis_AnimBP_C::AnimGraphNode_SequencePlayer' has a wrong offset!");
static_assert(offsetof(UCH_CyborgAssassinMantis_AnimBP_C, AnimGraphNode_BlendListByBool_2) == 0x001080, "Member 'UCH_CyborgAssassinMantis_AnimBP_C::AnimGraphNode_BlendListByBool_2' has a wrong offset!");
static_assert(offsetof(UCH_CyborgAssassinMantis_AnimBP_C, AnimGraphNode_ModifyBone) == 0x001120, "Member 'UCH_CyborgAssassinMantis_AnimBP_C::AnimGraphNode_ModifyBone' has a wrong offset!");
static_assert(offsetof(UCH_CyborgAssassinMantis_AnimBP_C, AnimGraphNode_LocalToComponentSpace_1) == 0x001228, "Member 'UCH_CyborgAssassinMantis_AnimBP_C::AnimGraphNode_LocalToComponentSpace_1' has a wrong offset!");
static_assert(offsetof(UCH_CyborgAssassinMantis_AnimBP_C, AnimGraphNode_ComponentToLocalSpace) == 0x001248, "Member 'UCH_CyborgAssassinMantis_AnimBP_C::AnimGraphNode_ComponentToLocalSpace' has a wrong offset!");
static_assert(offsetof(UCH_CyborgAssassinMantis_AnimBP_C, AnimGraphNode_BlendListByBool_1) == 0x001268, "Member 'UCH_CyborgAssassinMantis_AnimBP_C::AnimGraphNode_BlendListByBool_1' has a wrong offset!");
static_assert(offsetof(UCH_CyborgAssassinMantis_AnimBP_C, AnimGraphNode_BlendListByBool) == 0x001308, "Member 'UCH_CyborgAssassinMantis_AnimBP_C::AnimGraphNode_BlendListByBool' has a wrong offset!");
static_assert(offsetof(UCH_CyborgAssassinMantis_AnimBP_C, AnimGraphNode_SaveCachedPose) == 0x0013A8, "Member 'UCH_CyborgAssassinMantis_AnimBP_C::AnimGraphNode_SaveCachedPose' has a wrong offset!");
static_assert(offsetof(UCH_CyborgAssassinMantis_AnimBP_C, AnimGraphNode_UseCachedPose_1) == 0x001500, "Member 'UCH_CyborgAssassinMantis_AnimBP_C::AnimGraphNode_UseCachedPose_1' has a wrong offset!");
static_assert(offsetof(UCH_CyborgAssassinMantis_AnimBP_C, AnimGraphNode_UseCachedPose) == 0x001528, "Member 'UCH_CyborgAssassinMantis_AnimBP_C::AnimGraphNode_UseCachedPose' has a wrong offset!");
static_assert(offsetof(UCH_CyborgAssassinMantis_AnimBP_C, AnimGraphNode_LocalToComponentSpace) == 0x001550, "Member 'UCH_CyborgAssassinMantis_AnimBP_C::AnimGraphNode_LocalToComponentSpace' has a wrong offset!");
static_assert(offsetof(UCH_CyborgAssassinMantis_AnimBP_C, AnimGraphNode_Slot_1) == 0x001570, "Member 'UCH_CyborgAssassinMantis_AnimBP_C::AnimGraphNode_Slot_1' has a wrong offset!");
static_assert(offsetof(UCH_CyborgAssassinMantis_AnimBP_C, AnimGraphNode_Slot) == 0x0015B8, "Member 'UCH_CyborgAssassinMantis_AnimBP_C::AnimGraphNode_Slot' has a wrong offset!");
static_assert(offsetof(UCH_CyborgAssassinMantis_AnimBP_C, AnimGraphNode_Root) == 0x001600, "Member 'UCH_CyborgAssassinMantis_AnimBP_C::AnimGraphNode_Root' has a wrong offset!");
static_assert(offsetof(UCH_CyborgAssassinMantis_AnimBP_C, AnimGraphNode_PoseSnapshot) == 0x001630, "Member 'UCH_CyborgAssassinMantis_AnimBP_C::AnimGraphNode_PoseSnapshot' has a wrong offset!");
static_assert(offsetof(UCH_CyborgAssassinMantis_AnimBP_C, IsAlive) == 0x0016C0, "Member 'UCH_CyborgAssassinMantis_AnimBP_C::IsAlive' has a wrong offset!");
static_assert(offsetof(UCH_CyborgAssassinMantis_AnimBP_C, MovementSpeed) == 0x0016C4, "Member 'UCH_CyborgAssassinMantis_AnimBP_C::MovementSpeed' has a wrong offset!");
static_assert(offsetof(UCH_CyborgAssassinMantis_AnimBP_C, MovementAngle) == 0x0016C8, "Member 'UCH_CyborgAssassinMantis_AnimBP_C::MovementAngle' has a wrong offset!");
static_assert(offsetof(UCH_CyborgAssassinMantis_AnimBP_C, LookAtLocation) == 0x0016CC, "Member 'UCH_CyborgAssassinMantis_AnimBP_C::LookAtLocation' has a wrong offset!");
static_assert(offsetof(UCH_CyborgAssassinMantis_AnimBP_C, LookAtAlpha) == 0x0016D8, "Member 'UCH_CyborgAssassinMantis_AnimBP_C::LookAtAlpha' has a wrong offset!");
static_assert(offsetof(UCH_CyborgAssassinMantis_AnimBP_C, DeathBlow) == 0x0016DC, "Member 'UCH_CyborgAssassinMantis_AnimBP_C::DeathBlow' has a wrong offset!");
static_assert(offsetof(UCH_CyborgAssassinMantis_AnimBP_C, VocalisationVolume) == 0x0016E0, "Member 'UCH_CyborgAssassinMantis_AnimBP_C::VocalisationVolume' has a wrong offset!");
static_assert(offsetof(UCH_CyborgAssassinMantis_AnimBP_C, OverrideDeathPhysics) == 0x0016E4, "Member 'UCH_CyborgAssassinMantis_AnimBP_C::OverrideDeathPhysics' has a wrong offset!");
static_assert(offsetof(UCH_CyborgAssassinMantis_AnimBP_C, IdleFidgets) == 0x0016E8, "Member 'UCH_CyborgAssassinMantis_AnimBP_C::IdleFidgets' has a wrong offset!");
static_assert(offsetof(UCH_CyborgAssassinMantis_AnimBP_C, PawnEnemy) == 0x0016F8, "Member 'UCH_CyborgAssassinMantis_AnimBP_C::PawnEnemy' has a wrong offset!");
static_assert(offsetof(UCH_CyborgAssassinMantis_AnimBP_C, BodyTargetAngle) == 0x001700, "Member 'UCH_CyborgAssassinMantis_AnimBP_C::BodyTargetAngle' has a wrong offset!");
static_assert(offsetof(UCH_CyborgAssassinMantis_AnimBP_C, LastFrameRotation) == 0x001704, "Member 'UCH_CyborgAssassinMantis_AnimBP_C::LastFrameRotation' has a wrong offset!");
static_assert(offsetof(UCH_CyborgAssassinMantis_AnimBP_C, RotationDelta) == 0x001710, "Member 'UCH_CyborgAssassinMantis_AnimBP_C::RotationDelta' has a wrong offset!");
static_assert(offsetof(UCH_CyborgAssassinMantis_AnimBP_C, RotationAnimationDuration) == 0x001714, "Member 'UCH_CyborgAssassinMantis_AnimBP_C::RotationAnimationDuration' has a wrong offset!");
static_assert(offsetof(UCH_CyborgAssassinMantis_AnimBP_C, StartingMoveTargetAngle) == 0x001718, "Member 'UCH_CyborgAssassinMantis_AnimBP_C::StartingMoveTargetAngle' has a wrong offset!");
static_assert(offsetof(UCH_CyborgAssassinMantis_AnimBP_C, DeltaSeconds) == 0x00171C, "Member 'UCH_CyborgAssassinMantis_AnimBP_C::DeltaSeconds' has a wrong offset!");
static_assert(offsetof(UCH_CyborgAssassinMantis_AnimBP_C, EnableLookAt) == 0x001720, "Member 'UCH_CyborgAssassinMantis_AnimBP_C::EnableLookAt' has a wrong offset!");
static_assert(offsetof(UCH_CyborgAssassinMantis_AnimBP_C, StartPivot) == 0x001721, "Member 'UCH_CyborgAssassinMantis_AnimBP_C::StartPivot' has a wrong offset!");
static_assert(offsetof(UCH_CyborgAssassinMantis_AnimBP_C, SmoothLookAtLocation) == 0x001724, "Member 'UCH_CyborgAssassinMantis_AnimBP_C::SmoothLookAtLocation' has a wrong offset!");
static_assert(offsetof(UCH_CyborgAssassinMantis_AnimBP_C, LookAtLerpRate) == 0x001730, "Member 'UCH_CyborgAssassinMantis_AnimBP_C::LookAtLerpRate' has a wrong offset!");
static_assert(offsetof(UCH_CyborgAssassinMantis_AnimBP_C, IdleFidgetRandomMin) == 0x001734, "Member 'UCH_CyborgAssassinMantis_AnimBP_C::IdleFidgetRandomMin' has a wrong offset!");
static_assert(offsetof(UCH_CyborgAssassinMantis_AnimBP_C, IdleFidgetRandomMax) == 0x001738, "Member 'UCH_CyborgAssassinMantis_AnimBP_C::IdleFidgetRandomMax' has a wrong offset!");
static_assert(offsetof(UCH_CyborgAssassinMantis_AnimBP_C, IsSprintEnabled) == 0x00173C, "Member 'UCH_CyborgAssassinMantis_AnimBP_C::IsSprintEnabled' has a wrong offset!");
static_assert(offsetof(UCH_CyborgAssassinMantis_AnimBP_C, StunnedAnimSequence) == 0x001740, "Member 'UCH_CyborgAssassinMantis_AnimBP_C::StunnedAnimSequence' has a wrong offset!");
static_assert(offsetof(UCH_CyborgAssassinMantis_AnimBP_C, UseStunnedSequence) == 0x001748, "Member 'UCH_CyborgAssassinMantis_AnimBP_C::UseStunnedSequence' has a wrong offset!");
static_assert(offsetof(UCH_CyborgAssassinMantis_AnimBP_C, TurnTarget) == 0x00174C, "Member 'UCH_CyborgAssassinMantis_AnimBP_C::TurnTarget' has a wrong offset!");
static_assert(offsetof(UCH_CyborgAssassinMantis_AnimBP_C, TurnTargetError) == 0x001750, "Member 'UCH_CyborgAssassinMantis_AnimBP_C::TurnTargetError' has a wrong offset!");
static_assert(offsetof(UCH_CyborgAssassinMantis_AnimBP_C, TurnDelta) == 0x001754, "Member 'UCH_CyborgAssassinMantis_AnimBP_C::TurnDelta' has a wrong offset!");
static_assert(offsetof(UCH_CyborgAssassinMantis_AnimBP_C, TurnTargetChached) == 0x001758, "Member 'UCH_CyborgAssassinMantis_AnimBP_C::TurnTargetChached' has a wrong offset!");
static_assert(offsetof(UCH_CyborgAssassinMantis_AnimBP_C, TurnDeltaCached) == 0x00175C, "Member 'UCH_CyborgAssassinMantis_AnimBP_C::TurnDeltaCached' has a wrong offset!");
static_assert(offsetof(UCH_CyborgAssassinMantis_AnimBP_C, CanTurn) == 0x001760, "Member 'UCH_CyborgAssassinMantis_AnimBP_C::CanTurn' has a wrong offset!");

}

