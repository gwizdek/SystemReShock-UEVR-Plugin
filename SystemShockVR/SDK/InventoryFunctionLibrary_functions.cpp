#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: InventoryFunctionLibrary

#include "Basic.hpp"

#include "InventoryFunctionLibrary_classes.hpp"
#include "InventoryFunctionLibrary_parameters.hpp"


namespace SDK
{

// Function InventoryFunctionLibrary.InventoryFunctionLibrary_C.CreateInventoryItem
// (Static, Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// struct FSTRUCT_HardItemParams           ItemParams                                             (BlueprintVisible, BlueprintReadOnly, Parm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class UObject*                          __WorldContext                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class UITEM_Base_C*                     Item                                                   (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UInventoryFunctionLibrary_C::CreateInventoryItem(const struct FSTRUCT_HardItemParams& ItemParams, class UObject* __WorldContext, class UITEM_Base_C** Item)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("InventoryFunctionLibrary_C", "CreateInventoryItem");

	Params::InventoryFunctionLibrary_C_CreateInventoryItem Parms{};

	Parms.ItemParams = std::move(ItemParams);
	Parms.__WorldContext = __WorldContext;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	if (Item != nullptr)
		*Item = Parms.Item;
}


// Function InventoryFunctionLibrary.InventoryFunctionLibrary_C.CreateHardItemParams
// (Static, Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// struct FSTRUCT_SoftItemParams           SoftParams                                             (BlueprintVisible, BlueprintReadOnly, Parm, HasGetValueTypeHash)
// class UObject*                          __WorldContext                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FSTRUCT_HardItemParams           Result                                                 (Parm, OutParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UInventoryFunctionLibrary_C::CreateHardItemParams(const struct FSTRUCT_SoftItemParams& SoftParams, class UObject* __WorldContext, struct FSTRUCT_HardItemParams* Result)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("InventoryFunctionLibrary_C", "CreateHardItemParams");

	Params::InventoryFunctionLibrary_C_CreateHardItemParams Parms{};

	Parms.SoftParams = std::move(SoftParams);
	Parms.__WorldContext = __WorldContext;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	if (Result != nullptr)
		*Result = std::move(Parms.Result);
}


// Function InventoryFunctionLibrary.InventoryFunctionLibrary_C.UpdateItemWidgetPosition
// (Static, Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// class UInventoryBag_C*                  InventoryBag                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// int32                                   SlotIndex                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class UGridMeshWidget*                  BagMeshWidget                                          (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class UWIDGET_SlottedItem_C*            ItemMeshWidget                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class UObject*                          __WorldContext                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UInventoryFunctionLibrary_C::UpdateItemWidgetPosition(class UInventoryBag_C* InventoryBag, int32 SlotIndex, class UGridMeshWidget* BagMeshWidget, class UWIDGET_SlottedItem_C* ItemMeshWidget, class UObject* __WorldContext)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("InventoryFunctionLibrary_C", "UpdateItemWidgetPosition");

	Params::InventoryFunctionLibrary_C_UpdateItemWidgetPosition Parms{};

	Parms.InventoryBag = InventoryBag;
	Parms.SlotIndex = SlotIndex;
	Parms.BagMeshWidget = BagMeshWidget;
	Parms.ItemMeshWidget = ItemMeshWidget;
	Parms.__WorldContext = __WorldContext;

	GetDefaultObj()->ProcessEvent(Func, &Parms);
}


// Function InventoryFunctionLibrary.InventoryFunctionLibrary_C.GetItemTypePriority
// (Static, Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// ENUM_ItemType                           ItemType                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class UObject*                          __WorldContext                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// int32                                   Result                                                 (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UInventoryFunctionLibrary_C::GetItemTypePriority(ENUM_ItemType ItemType, class UObject* __WorldContext, int32* Result)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("InventoryFunctionLibrary_C", "GetItemTypePriority");

	Params::InventoryFunctionLibrary_C_GetItemTypePriority Parms{};

	Parms.ItemType = ItemType;
	Parms.__WorldContext = __WorldContext;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	if (Result != nullptr)
		*Result = Parms.Result;
}


// Function InventoryFunctionLibrary.InventoryFunctionLibrary_C.GetItemWidgetPositionFromCoords
// (Static, Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// struct FIntPoint                        GridCoords                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class UGridMeshWidget*                  BagMeshWidget                                          (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class UObject*                          __WorldContext                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FVector2D                        ResultPosition                                         (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UInventoryFunctionLibrary_C::GetItemWidgetPositionFromCoords(const struct FIntPoint& GridCoords, class UGridMeshWidget* BagMeshWidget, class UObject* __WorldContext, struct FVector2D* ResultPosition)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("InventoryFunctionLibrary_C", "GetItemWidgetPositionFromCoords");

	Params::InventoryFunctionLibrary_C_GetItemWidgetPositionFromCoords Parms{};

	Parms.GridCoords = std::move(GridCoords);
	Parms.BagMeshWidget = BagMeshWidget;
	Parms.__WorldContext = __WorldContext;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	if (ResultPosition != nullptr)
		*ResultPosition = std::move(Parms.ResultPosition);
}


// Function InventoryFunctionLibrary.InventoryFunctionLibrary_C.IsUpgradeRecurse
// (Static, Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// class UClass*                           UpgradeClass                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class UClass*                           DowngradeClass                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class UObject*                          __WorldContext                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    Result                                                 (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void UInventoryFunctionLibrary_C::IsUpgradeRecurse(class UClass* UpgradeClass, class UClass* DowngradeClass, class UObject* __WorldContext, bool* Result)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("InventoryFunctionLibrary_C", "IsUpgradeRecurse");

	Params::InventoryFunctionLibrary_C_IsUpgradeRecurse Parms{};

	Parms.UpgradeClass = UpgradeClass;
	Parms.DowngradeClass = DowngradeClass;
	Parms.__WorldContext = __WorldContext;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	if (Result != nullptr)
		*Result = Parms.Result;
}


// Function InventoryFunctionLibrary.InventoryFunctionLibrary_C.GetUpgradeMessageFromResult
// (Static, Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// class UClass*                           ItemClass                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// ENUM_UpgradeResult                      UpgradeResult                                          (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class UObject*                          __WorldContext                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class FText                             Result                                                 (Parm, OutParm)

void UInventoryFunctionLibrary_C::GetUpgradeMessageFromResult(class UClass* ItemClass, ENUM_UpgradeResult UpgradeResult, class UObject* __WorldContext, class FText* Result)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("InventoryFunctionLibrary_C", "GetUpgradeMessageFromResult");

	Params::InventoryFunctionLibrary_C_GetUpgradeMessageFromResult Parms{};

	Parms.ItemClass = ItemClass;
	Parms.UpgradeResult = UpgradeResult;
	Parms.__WorldContext = __WorldContext;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	if (Result != nullptr)
		*Result = std::move(Parms.Result);
}


// Function InventoryFunctionLibrary.InventoryFunctionLibrary_C.GetUpgradeVersionNumber
// (Static, Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// class UClass*                           UpgradeClass                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class UObject*                          __WorldContext                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// int32                                   Version                                                (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UInventoryFunctionLibrary_C::GetUpgradeVersionNumber(class UClass* UpgradeClass, class UObject* __WorldContext, int32* Version)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("InventoryFunctionLibrary_C", "GetUpgradeVersionNumber");

	Params::InventoryFunctionLibrary_C_GetUpgradeVersionNumber Parms{};

	Parms.UpgradeClass = UpgradeClass;
	Parms.__WorldContext = __WorldContext;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	if (Version != nullptr)
		*Version = Parms.Version;
}


// Function InventoryFunctionLibrary.InventoryFunctionLibrary_C.GetPickupMessageForItemClass
// (Static, Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// class UClass*                           ItemClass                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class UObject*                          __WorldContext                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class FText                             Result                                                 (Parm, OutParm)

void UInventoryFunctionLibrary_C::GetPickupMessageForItemClass(class UClass* ItemClass, class UObject* __WorldContext, class FText* Result)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("InventoryFunctionLibrary_C", "GetPickupMessageForItemClass");

	Params::InventoryFunctionLibrary_C_GetPickupMessageForItemClass Parms{};

	Parms.ItemClass = ItemClass;
	Parms.__WorldContext = __WorldContext;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	if (Result != nullptr)
		*Result = std::move(Parms.Result);
}


// Function InventoryFunctionLibrary.InventoryFunctionLibrary_C.UpdateItemWidgetPositionFromCoords
// (Static, Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// struct FIntPoint                        GridCoords                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class UGridMeshWidget*                  BagMeshWidget                                          (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class UWIDGET_SlottedItem_C*            ItemMeshWidget                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class UObject*                          __WorldContext                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UInventoryFunctionLibrary_C::UpdateItemWidgetPositionFromCoords(const struct FIntPoint& GridCoords, class UGridMeshWidget* BagMeshWidget, class UWIDGET_SlottedItem_C* ItemMeshWidget, class UObject* __WorldContext)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("InventoryFunctionLibrary_C", "UpdateItemWidgetPositionFromCoords");

	Params::InventoryFunctionLibrary_C_UpdateItemWidgetPositionFromCoords Parms{};

	Parms.GridCoords = std::move(GridCoords);
	Parms.BagMeshWidget = BagMeshWidget;
	Parms.ItemMeshWidget = ItemMeshWidget;
	Parms.__WorldContext = __WorldContext;

	GetDefaultObj()->ProcessEvent(Func, &Parms);
}


// Function InventoryFunctionLibrary.InventoryFunctionLibrary_C.GetInventoryDescriptionText
// (Static, Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// class FText                             BaseMessage                                            (BlueprintVisible, BlueprintReadOnly, Parm)
// bool                                    IsInventoryEmpty                                       (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// class UObject*                          __WorldContext                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class FText                             ResultMessage                                          (Parm, OutParm)

void UInventoryFunctionLibrary_C::GetInventoryDescriptionText(const class FText& BaseMessage, bool IsInventoryEmpty, class UObject* __WorldContext, class FText* ResultMessage)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("InventoryFunctionLibrary_C", "GetInventoryDescriptionText");

	Params::InventoryFunctionLibrary_C_GetInventoryDescriptionText Parms{};

	Parms.BaseMessage = std::move(BaseMessage);
	Parms.IsInventoryEmpty = IsInventoryEmpty;
	Parms.__WorldContext = __WorldContext;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	if (ResultMessage != nullptr)
		*ResultMessage = std::move(Parms.ResultMessage);
}


// Function InventoryFunctionLibrary.InventoryFunctionLibrary_C.GetFormattedWeaponDamageText
// (Static, Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// struct FSTRUCT_WeaponMode               WeaponMode                                             (BlueprintVisible, BlueprintReadOnly, Parm, HasGetValueTypeHash)
// bool                                    IsMaintain                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// bool                                    ShowSecondaryDamage                                    (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// bool                                    CombineDamageValues                                    (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// class UObject*                          __WorldContext                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class FText                             Result                                                 (Parm, OutParm)

void UInventoryFunctionLibrary_C::GetFormattedWeaponDamageText(const struct FSTRUCT_WeaponMode& WeaponMode, bool IsMaintain, bool ShowSecondaryDamage, bool CombineDamageValues, class UObject* __WorldContext, class FText* Result)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("InventoryFunctionLibrary_C", "GetFormattedWeaponDamageText");

	Params::InventoryFunctionLibrary_C_GetFormattedWeaponDamageText Parms{};

	Parms.WeaponMode = std::move(WeaponMode);
	Parms.IsMaintain = IsMaintain;
	Parms.ShowSecondaryDamage = ShowSecondaryDamage;
	Parms.CombineDamageValues = CombineDamageValues;
	Parms.__WorldContext = __WorldContext;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	if (Result != nullptr)
		*Result = std::move(Parms.Result);
}


// Function InventoryFunctionLibrary.InventoryFunctionLibrary_C.GetWeaponModeDamageTypeText
// (Static, Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// struct FSTRUCT_WeaponMode               Mode                                                   (BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm, HasGetValueTypeHash)
// class UObject*                          __WorldContext                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class FText                             Text                                                   (Parm, OutParm)

void UInventoryFunctionLibrary_C::GetWeaponModeDamageTypeText(struct FSTRUCT_WeaponMode& Mode, class UObject* __WorldContext, class FText* Text)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("InventoryFunctionLibrary_C", "GetWeaponModeDamageTypeText");

	Params::InventoryFunctionLibrary_C_GetWeaponModeDamageTypeText Parms{};

	Parms.Mode = std::move(Mode);
	Parms.__WorldContext = __WorldContext;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Mode = std::move(Parms.Mode);

	if (Text != nullptr)
		*Text = std::move(Parms.Text);
}


// Function InventoryFunctionLibrary.InventoryFunctionLibrary_C.GetWeaponModeArmorPenetrationText
// (Static, Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// struct FSTRUCT_WeaponMode               Mode                                                   (BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm, HasGetValueTypeHash)
// bool                                    ShowSecondaryAP                                        (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// class UObject*                          __WorldContext                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class FText                             Text                                                   (Parm, OutParm)

void UInventoryFunctionLibrary_C::GetWeaponModeArmorPenetrationText(struct FSTRUCT_WeaponMode& Mode, bool ShowSecondaryAP, class UObject* __WorldContext, class FText* Text)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("InventoryFunctionLibrary_C", "GetWeaponModeArmorPenetrationText");

	Params::InventoryFunctionLibrary_C_GetWeaponModeArmorPenetrationText Parms{};

	Parms.Mode = std::move(Mode);
	Parms.ShowSecondaryAP = ShowSecondaryAP;
	Parms.__WorldContext = __WorldContext;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Mode = std::move(Parms.Mode);

	if (Text != nullptr)
		*Text = std::move(Parms.Text);
}


// Function InventoryFunctionLibrary.InventoryFunctionLibrary_C.GetWeaponPropertyValueByType
// (Static, Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// struct FSTRUCT_WeaponMode               WeaponMode                                             (BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm, HasGetValueTypeHash)
// ENUM_WeaponProperty                     PropertyType                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class UObject*                          __WorldContext                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// int32                                   Value                                                  (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UInventoryFunctionLibrary_C::GetWeaponPropertyValueByType(struct FSTRUCT_WeaponMode& WeaponMode, ENUM_WeaponProperty PropertyType, class UObject* __WorldContext, int32* Value)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("InventoryFunctionLibrary_C", "GetWeaponPropertyValueByType");

	Params::InventoryFunctionLibrary_C_GetWeaponPropertyValueByType Parms{};

	Parms.WeaponMode = std::move(WeaponMode);
	Parms.PropertyType = PropertyType;
	Parms.__WorldContext = __WorldContext;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	WeaponMode = std::move(Parms.WeaponMode);

	if (Value != nullptr)
		*Value = Parms.Value;
}


// Function InventoryFunctionLibrary.InventoryFunctionLibrary_C.GetWeaponPropertyIndexByType
// (Static, Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// struct FSTRUCT_WeaponMode               WeaponMode                                             (BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm, HasGetValueTypeHash)
// ENUM_WeaponProperty                     PropertyType                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class UObject*                          __WorldContext                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// int32                                   ArrayIndex                                             (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UInventoryFunctionLibrary_C::GetWeaponPropertyIndexByType(struct FSTRUCT_WeaponMode& WeaponMode, ENUM_WeaponProperty PropertyType, class UObject* __WorldContext, int32* ArrayIndex)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("InventoryFunctionLibrary_C", "GetWeaponPropertyIndexByType");

	Params::InventoryFunctionLibrary_C_GetWeaponPropertyIndexByType Parms{};

	Parms.WeaponMode = std::move(WeaponMode);
	Parms.PropertyType = PropertyType;
	Parms.__WorldContext = __WorldContext;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	WeaponMode = std::move(Parms.WeaponMode);

	if (ArrayIndex != nullptr)
		*ArrayIndex = Parms.ArrayIndex;
}


// Function InventoryFunctionLibrary.InventoryFunctionLibrary_C.FindWeaponPropertyByType
// (Static, Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// struct FSTRUCT_WeaponMode               WeaponMode                                             (BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm, HasGetValueTypeHash)
// ENUM_WeaponProperty                     PropertyType                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class UObject*                          __WorldContext                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    Exists                                                 (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
// int32                                   Value                                                  (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UInventoryFunctionLibrary_C::FindWeaponPropertyByType(struct FSTRUCT_WeaponMode& WeaponMode, ENUM_WeaponProperty PropertyType, class UObject* __WorldContext, bool* Exists, int32* Value)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("InventoryFunctionLibrary_C", "FindWeaponPropertyByType");

	Params::InventoryFunctionLibrary_C_FindWeaponPropertyByType Parms{};

	Parms.WeaponMode = std::move(WeaponMode);
	Parms.PropertyType = PropertyType;
	Parms.__WorldContext = __WorldContext;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	WeaponMode = std::move(Parms.WeaponMode);

	if (Exists != nullptr)
		*Exists = Parms.Exists;

	if (Value != nullptr)
		*Value = Parms.Value;
}


// Function InventoryFunctionLibrary.InventoryFunctionLibrary_C.GetWeaponModeIndexForAmmo
// (Static, Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// class UClass*                           WeaponClass                                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class UClass*                           AmmoClass                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class UObject*                          __WorldContext                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// int32                                   ModeIndex                                              (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UInventoryFunctionLibrary_C::GetWeaponModeIndexForAmmo(class UClass* WeaponClass, class UClass* AmmoClass, class UObject* __WorldContext, int32* ModeIndex)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("InventoryFunctionLibrary_C", "GetWeaponModeIndexForAmmo");

	Params::InventoryFunctionLibrary_C_GetWeaponModeIndexForAmmo Parms{};

	Parms.WeaponClass = WeaponClass;
	Parms.AmmoClass = AmmoClass;
	Parms.__WorldContext = __WorldContext;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	if (ModeIndex != nullptr)
		*ModeIndex = Parms.ModeIndex;
}


// Function InventoryFunctionLibrary.InventoryFunctionLibrary_C.GetWeaponModeNameByIndex
// (Static, Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// int32                                   ModeIndex                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class UObject*                          __WorldContext                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class FName                             ModeName                                               (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UInventoryFunctionLibrary_C::GetWeaponModeNameByIndex(int32 ModeIndex, class UObject* __WorldContext, class FName* ModeName)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("InventoryFunctionLibrary_C", "GetWeaponModeNameByIndex");

	Params::InventoryFunctionLibrary_C_GetWeaponModeNameByIndex Parms{};

	Parms.ModeIndex = ModeIndex;
	Parms.__WorldContext = __WorldContext;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	if (ModeName != nullptr)
		*ModeName = Parms.ModeName;
}


// Function InventoryFunctionLibrary.InventoryFunctionLibrary_C.GetIdealDistanceToPickupActor
// (Static, Private, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// class USceneCaptureComponent2D*         CaptureComponent                                       (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class APICKUP_Base_C*                   PickupActor                                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FVector                          BoxHalfExtents                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    SmartDepthAdjust                                       (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// class UObject*                          __WorldContext                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// float                                   ResultDistance                                         (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UInventoryFunctionLibrary_C::GetIdealDistanceToPickupActor(class USceneCaptureComponent2D* CaptureComponent, class APICKUP_Base_C* PickupActor, const struct FVector& BoxHalfExtents, bool SmartDepthAdjust, class UObject* __WorldContext, float* ResultDistance)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("InventoryFunctionLibrary_C", "GetIdealDistanceToPickupActor");

	Params::InventoryFunctionLibrary_C_GetIdealDistanceToPickupActor Parms{};

	Parms.CaptureComponent = CaptureComponent;
	Parms.PickupActor = PickupActor;
	Parms.BoxHalfExtents = std::move(BoxHalfExtents);
	Parms.SmartDepthAdjust = SmartDepthAdjust;
	Parms.__WorldContext = __WorldContext;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	if (ResultDistance != nullptr)
		*ResultDistance = Parms.ResultDistance;
}


// Function InventoryFunctionLibrary.InventoryFunctionLibrary_C.ComputePickupPackingRotation
// (Static, Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// class APICKUP_Base_C*                   PickupActor                                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class UObject*                          __WorldContext                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FRotator                         Rotation                                               (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void UInventoryFunctionLibrary_C::ComputePickupPackingRotation(class APICKUP_Base_C* PickupActor, class UObject* __WorldContext, struct FRotator* Rotation)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("InventoryFunctionLibrary_C", "ComputePickupPackingRotation");

	Params::InventoryFunctionLibrary_C_ComputePickupPackingRotation Parms{};

	Parms.PickupActor = PickupActor;
	Parms.__WorldContext = __WorldContext;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	if (Rotation != nullptr)
		*Rotation = std::move(Parms.Rotation);
}


// Function InventoryFunctionLibrary.InventoryFunctionLibrary_C.ApplyPickupPackingTransform
// (Static, Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// class APICKUP_Base_C*                   PickupActor                                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class UBoxComponent*                    PackingVolume                                          (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FSTRUCT_ItemDetailsIconParams    CustomIconParams                                       (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FRotator                         AdditionalRotation                                     (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// bool                                    IgnoreUniqueRotation                                   (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// class UObject*                          __WorldContext                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FVector                          LocalMeshOrigin                                        (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FVector                          MeshHalfExtents                                        (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UInventoryFunctionLibrary_C::ApplyPickupPackingTransform(class APICKUP_Base_C* PickupActor, class UBoxComponent* PackingVolume, const struct FSTRUCT_ItemDetailsIconParams& CustomIconParams, const struct FRotator& AdditionalRotation, bool IgnoreUniqueRotation, class UObject* __WorldContext, struct FVector* LocalMeshOrigin, struct FVector* MeshHalfExtents)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("InventoryFunctionLibrary_C", "ApplyPickupPackingTransform");

	Params::InventoryFunctionLibrary_C_ApplyPickupPackingTransform Parms{};

	Parms.PickupActor = PickupActor;
	Parms.PackingVolume = PackingVolume;
	Parms.CustomIconParams = std::move(CustomIconParams);
	Parms.AdditionalRotation = std::move(AdditionalRotation);
	Parms.IgnoreUniqueRotation = IgnoreUniqueRotation;
	Parms.__WorldContext = __WorldContext;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	if (LocalMeshOrigin != nullptr)
		*LocalMeshOrigin = std::move(Parms.LocalMeshOrigin);

	if (MeshHalfExtents != nullptr)
		*MeshHalfExtents = std::move(Parms.MeshHalfExtents);
}


// Function InventoryFunctionLibrary.InventoryFunctionLibrary_C.GenerateItemGridIcon
// (Static, Public, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// class USceneCaptureComponent2D*         CaptureComponent                                       (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class APICKUP_Base_C*                   PickupActor                                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class UObject*                          __WorldContext                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UInventoryFunctionLibrary_C::GenerateItemGridIcon(class USceneCaptureComponent2D* CaptureComponent, class APICKUP_Base_C* PickupActor, class UObject* __WorldContext)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("InventoryFunctionLibrary_C", "GenerateItemGridIcon");

	Params::InventoryFunctionLibrary_C_GenerateItemGridIcon Parms{};

	Parms.CaptureComponent = CaptureComponent;
	Parms.PickupActor = PickupActor;
	Parms.__WorldContext = __WorldContext;

	GetDefaultObj()->ProcessEvent(Func, &Parms);
}


// Function InventoryFunctionLibrary.InventoryFunctionLibrary_C.GenerateItemHotbarIcon
// (Static, Public, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// class USceneCaptureComponent2D*         CaptureComponent                                       (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class APICKUP_Base_C*                   PickupActor                                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class UObject*                          __WorldContext                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UInventoryFunctionLibrary_C::GenerateItemHotbarIcon(class USceneCaptureComponent2D* CaptureComponent, class APICKUP_Base_C* PickupActor, class UObject* __WorldContext)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("InventoryFunctionLibrary_C", "GenerateItemHotbarIcon");

	Params::InventoryFunctionLibrary_C_GenerateItemHotbarIcon Parms{};

	Parms.CaptureComponent = CaptureComponent;
	Parms.PickupActor = PickupActor;
	Parms.__WorldContext = __WorldContext;

	GetDefaultObj()->ProcessEvent(Func, &Parms);
}


// Function InventoryFunctionLibrary.InventoryFunctionLibrary_C.UpdateItemDetailsTexture
// (Static, Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// class USceneCaptureComponent2D*         CaptureComponent                                       (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class APICKUP_Base_C*                   PickupActor                                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// float                                   Progress                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FSTRUCT_ItemDetailsIconParams    CustomIconParams                                       (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class UObject*                          __WorldContext                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FSTRUCT_ItemDetailsIconParams    IconParams                                             (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UInventoryFunctionLibrary_C::UpdateItemDetailsTexture(class USceneCaptureComponent2D* CaptureComponent, class APICKUP_Base_C* PickupActor, float Progress, const struct FSTRUCT_ItemDetailsIconParams& CustomIconParams, class UObject* __WorldContext, struct FSTRUCT_ItemDetailsIconParams* IconParams)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("InventoryFunctionLibrary_C", "UpdateItemDetailsTexture");

	Params::InventoryFunctionLibrary_C_UpdateItemDetailsTexture Parms{};

	Parms.CaptureComponent = CaptureComponent;
	Parms.PickupActor = PickupActor;
	Parms.Progress = Progress;
	Parms.CustomIconParams = std::move(CustomIconParams);
	Parms.__WorldContext = __WorldContext;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	if (IconParams != nullptr)
		*IconParams = std::move(Parms.IconParams);
}


// Function InventoryFunctionLibrary.InventoryFunctionLibrary_C.InitializeItemIconCaptureSettings
// (Static, Public, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// class USceneCaptureComponent2D*         CaptureComponent                                       (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    DetailsCapture                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// class UObject*                          __WorldContext                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UInventoryFunctionLibrary_C::InitializeItemIconCaptureSettings(class USceneCaptureComponent2D* CaptureComponent, bool DetailsCapture, class UObject* __WorldContext)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("InventoryFunctionLibrary_C", "InitializeItemIconCaptureSettings");

	Params::InventoryFunctionLibrary_C_InitializeItemIconCaptureSettings Parms{};

	Parms.CaptureComponent = CaptureComponent;
	Parms.DetailsCapture = DetailsCapture;
	Parms.__WorldContext = __WorldContext;

	GetDefaultObj()->ProcessEvent(Func, &Parms);
}


// Function InventoryFunctionLibrary.InventoryFunctionLibrary_C.CreateItemIconSceneSetup
// (Static, Public, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// class USceneCaptureComponent2D*         CaptureComponent                                       (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class UObject*                          __WorldContext                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UInventoryFunctionLibrary_C::CreateItemIconSceneSetup(class USceneCaptureComponent2D* CaptureComponent, class UObject* __WorldContext)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("InventoryFunctionLibrary_C", "CreateItemIconSceneSetup");

	Params::InventoryFunctionLibrary_C_CreateItemIconSceneSetup Parms{};

	Parms.CaptureComponent = CaptureComponent;
	Parms.__WorldContext = __WorldContext;

	GetDefaultObj()->ProcessEvent(Func, &Parms);
}


// Function InventoryFunctionLibrary.InventoryFunctionLibrary_C.FixupPickupActorMaterials
// (Static, Private, BlueprintCallable, BlueprintEvent)
// Parameters:
// class APICKUP_Base_C*                   PickupActor                                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class UObject*                          __WorldContext                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UInventoryFunctionLibrary_C::FixupPickupActorMaterials(class APICKUP_Base_C* PickupActor, class UObject* __WorldContext)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("InventoryFunctionLibrary_C", "FixupPickupActorMaterials");

	Params::InventoryFunctionLibrary_C_FixupPickupActorMaterials Parms{};

	Parms.PickupActor = PickupActor;
	Parms.__WorldContext = __WorldContext;

	GetDefaultObj()->ProcessEvent(Func, &Parms);
}


// Function InventoryFunctionLibrary.InventoryFunctionLibrary_C.SpawnPickupIconActorByClassCollection
// (Static, Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// class USceneCaptureComponent2D*         CaptureComponent                                       (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FObjectClassCollection           ClassCollection                                        (BlueprintVisible, BlueprintReadOnly, Parm, HasGetValueTypeHash)
// class UObject*                          __WorldContext                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class APICKUP_Base_C*                   SpawnedActor                                           (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UInventoryFunctionLibrary_C::SpawnPickupIconActorByClassCollection(class USceneCaptureComponent2D* CaptureComponent, const struct FObjectClassCollection& ClassCollection, class UObject* __WorldContext, class APICKUP_Base_C** SpawnedActor)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("InventoryFunctionLibrary_C", "SpawnPickupIconActorByClassCollection");

	Params::InventoryFunctionLibrary_C_SpawnPickupIconActorByClassCollection Parms{};

	Parms.CaptureComponent = CaptureComponent;
	Parms.ClassCollection = std::move(ClassCollection);
	Parms.__WorldContext = __WorldContext;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	if (SpawnedActor != nullptr)
		*SpawnedActor = Parms.SpawnedActor;
}


// Function InventoryFunctionLibrary.InventoryFunctionLibrary_C.SpawnPickupActorWithItemCount
// (Static, Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// class UClass*                           ItemClass                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// int32                                   ItemCount                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FVector                          Location                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FVector                          Velocity                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class UObject*                          __WorldContext                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class APICKUP_Base_C*                   Result                                                 (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UInventoryFunctionLibrary_C::SpawnPickupActorWithItemCount(class UClass* ItemClass, int32 ItemCount, const struct FVector& Location, const struct FVector& Velocity, class UObject* __WorldContext, class APICKUP_Base_C** Result)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("InventoryFunctionLibrary_C", "SpawnPickupActorWithItemCount");

	Params::InventoryFunctionLibrary_C_SpawnPickupActorWithItemCount Parms{};

	Parms.ItemClass = ItemClass;
	Parms.ItemCount = ItemCount;
	Parms.Location = std::move(Location);
	Parms.Velocity = std::move(Velocity);
	Parms.__WorldContext = __WorldContext;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	if (Result != nullptr)
		*Result = Parms.Result;
}


// Function InventoryFunctionLibrary.InventoryFunctionLibrary_C.SpawnPickupActorFromItemInstance
// (Static, Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// class UITEM_Base_C*                     Item                                                   (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FVector                          Location                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FVector                          Velocity                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class UObject*                          __WorldContext                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class APICKUP_Base_C*                   Result                                                 (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UInventoryFunctionLibrary_C::SpawnPickupActorFromItemInstance(class UITEM_Base_C* Item, const struct FVector& Location, const struct FVector& Velocity, class UObject* __WorldContext, class APICKUP_Base_C** Result)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("InventoryFunctionLibrary_C", "SpawnPickupActorFromItemInstance");

	Params::InventoryFunctionLibrary_C_SpawnPickupActorFromItemInstance Parms{};

	Parms.Item = Item;
	Parms.Location = std::move(Location);
	Parms.Velocity = std::move(Velocity);
	Parms.__WorldContext = __WorldContext;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	if (Result != nullptr)
		*Result = Parms.Result;
}


// Function InventoryFunctionLibrary.InventoryFunctionLibrary_C.GetBestBatteryClassForEnergyLevel
// (Static, Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// int32                                   CurrentEnergy                                          (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// int32                                   MaxEnergy                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class UObject*                          __WorldContext                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    IsValid                                                (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
// TSoftClassPtr<class UClass>             BestClass                                              (Parm, OutParm, HasGetValueTypeHash)
// TSoftClassPtr<class UClass>             FallbackClass                                          (Parm, OutParm, HasGetValueTypeHash)

void UInventoryFunctionLibrary_C::GetBestBatteryClassForEnergyLevel(int32 CurrentEnergy, int32 MaxEnergy, class UObject* __WorldContext, bool* IsValid, TSoftClassPtr<class UClass>* BestClass, TSoftClassPtr<class UClass>* FallbackClass)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("InventoryFunctionLibrary_C", "GetBestBatteryClassForEnergyLevel");

	Params::InventoryFunctionLibrary_C_GetBestBatteryClassForEnergyLevel Parms{};

	Parms.CurrentEnergy = CurrentEnergy;
	Parms.MaxEnergy = MaxEnergy;
	Parms.__WorldContext = __WorldContext;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	if (IsValid != nullptr)
		*IsValid = Parms.IsValid;

	if (BestClass != nullptr)
		*BestClass = Parms.BestClass;

	if (FallbackClass != nullptr)
		*FallbackClass = Parms.FallbackClass;
}

}

