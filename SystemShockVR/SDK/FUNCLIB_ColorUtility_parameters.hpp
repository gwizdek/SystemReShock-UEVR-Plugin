#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: FUNCLIB_ColorUtility

#include "Basic.hpp"

#include "ENUM_ButtonColorType_structs.hpp"
#include "CoreUObject_structs.hpp"
#include "ENUM_MeshColor_structs.hpp"


namespace SDK::Params
{

// Function FUNCLIB_ColorUtility.FUNCLIB_ColorUtility_C.GetColorValue
// 0x00E8 (0x00E8 - 0x0000)
struct FUNCLIB_ColorUtility_C_GetColorValue final
{
public:
	int32                                         Color;                                             // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UObject*                                __WorldContext;                                    // 0x0008(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           ColorValue;                                        // 0x0010(0x0010)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         TintAlpha;                                         // 0x0020(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           TintColor;                                         // 0x0024(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           Orange;                                            // 0x0034(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           Green;                                             // 0x0044(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           Purple;                                            // 0x0054(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           Yellow;                                            // 0x0064(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           Blue;                                              // 0x0074(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           Red;                                               // 0x0084(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_SwitchInteger_CmpSuccess;                   // 0x0094(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_95[0x3];                                       // 0x0095(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FLinearColor                           CallFunc_LinearColorLerp_ReturnValue;              // 0x0098(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           CallFunc_LinearColorLerp_ReturnValue_1;            // 0x00A8(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           CallFunc_LinearColorLerp_ReturnValue_2;            // 0x00B8(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           CallFunc_LinearColorLerp_ReturnValue_3;            // 0x00C8(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           CallFunc_LinearColorLerp_ReturnValue_4;            // 0x00D8(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(FUNCLIB_ColorUtility_C_GetColorValue) == 0x000008, "Wrong alignment on FUNCLIB_ColorUtility_C_GetColorValue");
static_assert(sizeof(FUNCLIB_ColorUtility_C_GetColorValue) == 0x0000E8, "Wrong size on FUNCLIB_ColorUtility_C_GetColorValue");
static_assert(offsetof(FUNCLIB_ColorUtility_C_GetColorValue, Color) == 0x000000, "Member 'FUNCLIB_ColorUtility_C_GetColorValue::Color' has a wrong offset!");
static_assert(offsetof(FUNCLIB_ColorUtility_C_GetColorValue, __WorldContext) == 0x000008, "Member 'FUNCLIB_ColorUtility_C_GetColorValue::__WorldContext' has a wrong offset!");
static_assert(offsetof(FUNCLIB_ColorUtility_C_GetColorValue, ColorValue) == 0x000010, "Member 'FUNCLIB_ColorUtility_C_GetColorValue::ColorValue' has a wrong offset!");
static_assert(offsetof(FUNCLIB_ColorUtility_C_GetColorValue, TintAlpha) == 0x000020, "Member 'FUNCLIB_ColorUtility_C_GetColorValue::TintAlpha' has a wrong offset!");
static_assert(offsetof(FUNCLIB_ColorUtility_C_GetColorValue, TintColor) == 0x000024, "Member 'FUNCLIB_ColorUtility_C_GetColorValue::TintColor' has a wrong offset!");
static_assert(offsetof(FUNCLIB_ColorUtility_C_GetColorValue, Orange) == 0x000034, "Member 'FUNCLIB_ColorUtility_C_GetColorValue::Orange' has a wrong offset!");
static_assert(offsetof(FUNCLIB_ColorUtility_C_GetColorValue, Green) == 0x000044, "Member 'FUNCLIB_ColorUtility_C_GetColorValue::Green' has a wrong offset!");
static_assert(offsetof(FUNCLIB_ColorUtility_C_GetColorValue, Purple) == 0x000054, "Member 'FUNCLIB_ColorUtility_C_GetColorValue::Purple' has a wrong offset!");
static_assert(offsetof(FUNCLIB_ColorUtility_C_GetColorValue, Yellow) == 0x000064, "Member 'FUNCLIB_ColorUtility_C_GetColorValue::Yellow' has a wrong offset!");
static_assert(offsetof(FUNCLIB_ColorUtility_C_GetColorValue, Blue) == 0x000074, "Member 'FUNCLIB_ColorUtility_C_GetColorValue::Blue' has a wrong offset!");
static_assert(offsetof(FUNCLIB_ColorUtility_C_GetColorValue, Red) == 0x000084, "Member 'FUNCLIB_ColorUtility_C_GetColorValue::Red' has a wrong offset!");
static_assert(offsetof(FUNCLIB_ColorUtility_C_GetColorValue, K2Node_SwitchInteger_CmpSuccess) == 0x000094, "Member 'FUNCLIB_ColorUtility_C_GetColorValue::K2Node_SwitchInteger_CmpSuccess' has a wrong offset!");
static_assert(offsetof(FUNCLIB_ColorUtility_C_GetColorValue, CallFunc_LinearColorLerp_ReturnValue) == 0x000098, "Member 'FUNCLIB_ColorUtility_C_GetColorValue::CallFunc_LinearColorLerp_ReturnValue' has a wrong offset!");
static_assert(offsetof(FUNCLIB_ColorUtility_C_GetColorValue, CallFunc_LinearColorLerp_ReturnValue_1) == 0x0000A8, "Member 'FUNCLIB_ColorUtility_C_GetColorValue::CallFunc_LinearColorLerp_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(FUNCLIB_ColorUtility_C_GetColorValue, CallFunc_LinearColorLerp_ReturnValue_2) == 0x0000B8, "Member 'FUNCLIB_ColorUtility_C_GetColorValue::CallFunc_LinearColorLerp_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(FUNCLIB_ColorUtility_C_GetColorValue, CallFunc_LinearColorLerp_ReturnValue_3) == 0x0000C8, "Member 'FUNCLIB_ColorUtility_C_GetColorValue::CallFunc_LinearColorLerp_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(FUNCLIB_ColorUtility_C_GetColorValue, CallFunc_LinearColorLerp_ReturnValue_4) == 0x0000D8, "Member 'FUNCLIB_ColorUtility_C_GetColorValue::CallFunc_LinearColorLerp_ReturnValue_4' has a wrong offset!");

// Function FUNCLIB_ColorUtility.FUNCLIB_ColorUtility_C.IsPrimaryColor
// 0x0020 (0x0020 - 0x0000)
struct FUNCLIB_ColorUtility_C_IsPrimaryColor final
{
public:
	int32                                         Color;                                             // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UObject*                                __WorldContext;                                    // 0x0008(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Result;                                            // 0x0010(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_11[0x3];                                       // 0x0011(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Clamp_ReturnValue;                        // 0x0014(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_IntInt_ReturnValue;            // 0x0018(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(FUNCLIB_ColorUtility_C_IsPrimaryColor) == 0x000008, "Wrong alignment on FUNCLIB_ColorUtility_C_IsPrimaryColor");
static_assert(sizeof(FUNCLIB_ColorUtility_C_IsPrimaryColor) == 0x000020, "Wrong size on FUNCLIB_ColorUtility_C_IsPrimaryColor");
static_assert(offsetof(FUNCLIB_ColorUtility_C_IsPrimaryColor, Color) == 0x000000, "Member 'FUNCLIB_ColorUtility_C_IsPrimaryColor::Color' has a wrong offset!");
static_assert(offsetof(FUNCLIB_ColorUtility_C_IsPrimaryColor, __WorldContext) == 0x000008, "Member 'FUNCLIB_ColorUtility_C_IsPrimaryColor::__WorldContext' has a wrong offset!");
static_assert(offsetof(FUNCLIB_ColorUtility_C_IsPrimaryColor, Result) == 0x000010, "Member 'FUNCLIB_ColorUtility_C_IsPrimaryColor::Result' has a wrong offset!");
static_assert(offsetof(FUNCLIB_ColorUtility_C_IsPrimaryColor, CallFunc_Clamp_ReturnValue) == 0x000014, "Member 'FUNCLIB_ColorUtility_C_IsPrimaryColor::CallFunc_Clamp_ReturnValue' has a wrong offset!");
static_assert(offsetof(FUNCLIB_ColorUtility_C_IsPrimaryColor, CallFunc_EqualEqual_IntInt_ReturnValue) == 0x000018, "Member 'FUNCLIB_ColorUtility_C_IsPrimaryColor::CallFunc_EqualEqual_IntInt_ReturnValue' has a wrong offset!");

// Function FUNCLIB_ColorUtility.FUNCLIB_ColorUtility_C.IsSecondaryColor
// 0x0020 (0x0020 - 0x0000)
struct FUNCLIB_ColorUtility_C_IsSecondaryColor final
{
public:
	int32                                         Color;                                             // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UObject*                                __WorldContext;                                    // 0x0008(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Result;                                            // 0x0010(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_11[0x3];                                       // 0x0011(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Clamp_ReturnValue;                        // 0x0014(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_IntInt_ReturnValue;            // 0x0018(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(FUNCLIB_ColorUtility_C_IsSecondaryColor) == 0x000008, "Wrong alignment on FUNCLIB_ColorUtility_C_IsSecondaryColor");
static_assert(sizeof(FUNCLIB_ColorUtility_C_IsSecondaryColor) == 0x000020, "Wrong size on FUNCLIB_ColorUtility_C_IsSecondaryColor");
static_assert(offsetof(FUNCLIB_ColorUtility_C_IsSecondaryColor, Color) == 0x000000, "Member 'FUNCLIB_ColorUtility_C_IsSecondaryColor::Color' has a wrong offset!");
static_assert(offsetof(FUNCLIB_ColorUtility_C_IsSecondaryColor, __WorldContext) == 0x000008, "Member 'FUNCLIB_ColorUtility_C_IsSecondaryColor::__WorldContext' has a wrong offset!");
static_assert(offsetof(FUNCLIB_ColorUtility_C_IsSecondaryColor, Result) == 0x000010, "Member 'FUNCLIB_ColorUtility_C_IsSecondaryColor::Result' has a wrong offset!");
static_assert(offsetof(FUNCLIB_ColorUtility_C_IsSecondaryColor, CallFunc_Clamp_ReturnValue) == 0x000014, "Member 'FUNCLIB_ColorUtility_C_IsSecondaryColor::CallFunc_Clamp_ReturnValue' has a wrong offset!");
static_assert(offsetof(FUNCLIB_ColorUtility_C_IsSecondaryColor, CallFunc_EqualEqual_IntInt_ReturnValue) == 0x000018, "Member 'FUNCLIB_ColorUtility_C_IsSecondaryColor::CallFunc_EqualEqual_IntInt_ReturnValue' has a wrong offset!");

// Function FUNCLIB_ColorUtility.FUNCLIB_ColorUtility_C.GetComplementaryColor
// 0x0018 (0x0018 - 0x0000)
struct FUNCLIB_ColorUtility_C_GetComplementaryColor final
{
public:
	int32                                         InputColor;                                        // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UObject*                                __WorldContext;                                    // 0x0008(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         OutputColors;                                      // 0x0010(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_SwitchInteger_CmpSuccess;                   // 0x0014(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(FUNCLIB_ColorUtility_C_GetComplementaryColor) == 0x000008, "Wrong alignment on FUNCLIB_ColorUtility_C_GetComplementaryColor");
static_assert(sizeof(FUNCLIB_ColorUtility_C_GetComplementaryColor) == 0x000018, "Wrong size on FUNCLIB_ColorUtility_C_GetComplementaryColor");
static_assert(offsetof(FUNCLIB_ColorUtility_C_GetComplementaryColor, InputColor) == 0x000000, "Member 'FUNCLIB_ColorUtility_C_GetComplementaryColor::InputColor' has a wrong offset!");
static_assert(offsetof(FUNCLIB_ColorUtility_C_GetComplementaryColor, __WorldContext) == 0x000008, "Member 'FUNCLIB_ColorUtility_C_GetComplementaryColor::__WorldContext' has a wrong offset!");
static_assert(offsetof(FUNCLIB_ColorUtility_C_GetComplementaryColor, OutputColors) == 0x000010, "Member 'FUNCLIB_ColorUtility_C_GetComplementaryColor::OutputColors' has a wrong offset!");
static_assert(offsetof(FUNCLIB_ColorUtility_C_GetComplementaryColor, K2Node_SwitchInteger_CmpSuccess) == 0x000014, "Member 'FUNCLIB_ColorUtility_C_GetComplementaryColor::K2Node_SwitchInteger_CmpSuccess' has a wrong offset!");

// Function FUNCLIB_ColorUtility.FUNCLIB_ColorUtility_C.GetAnalogousColors
// 0x0088 (0x0088 - 0x0000)
struct FUNCLIB_ColorUtility_C_GetAnalogousColors final
{
public:
	int32                                         InputColor;                                        // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UObject*                                __WorldContext;                                    // 0x0008(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TArray<int32>                                 AnalogousColors;                                   // 0x0010(0x0010)(Parm, OutParm)
	TArray<int32>                                 K2Node_MakeArray_Array;                            // 0x0020(0x0010)(ReferenceParm)
	bool                                          K2Node_SwitchInteger_CmpSuccess;                   // 0x0030(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_31[0x7];                                       // 0x0031(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<int32>                                 K2Node_MakeArray_Array_1;                          // 0x0038(0x0010)(ReferenceParm)
	TArray<int32>                                 K2Node_MakeArray_Array_2;                          // 0x0048(0x0010)(ReferenceParm)
	TArray<int32>                                 K2Node_MakeArray_Array_3;                          // 0x0058(0x0010)(ReferenceParm)
	TArray<int32>                                 K2Node_MakeArray_Array_4;                          // 0x0068(0x0010)(ReferenceParm)
	TArray<int32>                                 K2Node_MakeArray_Array_5;                          // 0x0078(0x0010)(ReferenceParm)
};
static_assert(alignof(FUNCLIB_ColorUtility_C_GetAnalogousColors) == 0x000008, "Wrong alignment on FUNCLIB_ColorUtility_C_GetAnalogousColors");
static_assert(sizeof(FUNCLIB_ColorUtility_C_GetAnalogousColors) == 0x000088, "Wrong size on FUNCLIB_ColorUtility_C_GetAnalogousColors");
static_assert(offsetof(FUNCLIB_ColorUtility_C_GetAnalogousColors, InputColor) == 0x000000, "Member 'FUNCLIB_ColorUtility_C_GetAnalogousColors::InputColor' has a wrong offset!");
static_assert(offsetof(FUNCLIB_ColorUtility_C_GetAnalogousColors, __WorldContext) == 0x000008, "Member 'FUNCLIB_ColorUtility_C_GetAnalogousColors::__WorldContext' has a wrong offset!");
static_assert(offsetof(FUNCLIB_ColorUtility_C_GetAnalogousColors, AnalogousColors) == 0x000010, "Member 'FUNCLIB_ColorUtility_C_GetAnalogousColors::AnalogousColors' has a wrong offset!");
static_assert(offsetof(FUNCLIB_ColorUtility_C_GetAnalogousColors, K2Node_MakeArray_Array) == 0x000020, "Member 'FUNCLIB_ColorUtility_C_GetAnalogousColors::K2Node_MakeArray_Array' has a wrong offset!");
static_assert(offsetof(FUNCLIB_ColorUtility_C_GetAnalogousColors, K2Node_SwitchInteger_CmpSuccess) == 0x000030, "Member 'FUNCLIB_ColorUtility_C_GetAnalogousColors::K2Node_SwitchInteger_CmpSuccess' has a wrong offset!");
static_assert(offsetof(FUNCLIB_ColorUtility_C_GetAnalogousColors, K2Node_MakeArray_Array_1) == 0x000038, "Member 'FUNCLIB_ColorUtility_C_GetAnalogousColors::K2Node_MakeArray_Array_1' has a wrong offset!");
static_assert(offsetof(FUNCLIB_ColorUtility_C_GetAnalogousColors, K2Node_MakeArray_Array_2) == 0x000048, "Member 'FUNCLIB_ColorUtility_C_GetAnalogousColors::K2Node_MakeArray_Array_2' has a wrong offset!");
static_assert(offsetof(FUNCLIB_ColorUtility_C_GetAnalogousColors, K2Node_MakeArray_Array_3) == 0x000058, "Member 'FUNCLIB_ColorUtility_C_GetAnalogousColors::K2Node_MakeArray_Array_3' has a wrong offset!");
static_assert(offsetof(FUNCLIB_ColorUtility_C_GetAnalogousColors, K2Node_MakeArray_Array_4) == 0x000068, "Member 'FUNCLIB_ColorUtility_C_GetAnalogousColors::K2Node_MakeArray_Array_4' has a wrong offset!");
static_assert(offsetof(FUNCLIB_ColorUtility_C_GetAnalogousColors, K2Node_MakeArray_Array_5) == 0x000078, "Member 'FUNCLIB_ColorUtility_C_GetAnalogousColors::K2Node_MakeArray_Array_5' has a wrong offset!");

// Function FUNCLIB_ColorUtility.FUNCLIB_ColorUtility_C.GetTriadicColors
// 0x0088 (0x0088 - 0x0000)
struct FUNCLIB_ColorUtility_C_GetTriadicColors final
{
public:
	int32                                         InputColor;                                        // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UObject*                                __WorldContext;                                    // 0x0008(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TArray<int32>                                 TriadicColors;                                     // 0x0010(0x0010)(Parm, OutParm)
	TArray<int32>                                 K2Node_MakeArray_Array;                            // 0x0020(0x0010)(ReferenceParm)
	bool                                          K2Node_SwitchInteger_CmpSuccess;                   // 0x0030(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_31[0x7];                                       // 0x0031(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<int32>                                 K2Node_MakeArray_Array_1;                          // 0x0038(0x0010)(ReferenceParm)
	TArray<int32>                                 K2Node_MakeArray_Array_2;                          // 0x0048(0x0010)(ReferenceParm)
	TArray<int32>                                 K2Node_MakeArray_Array_3;                          // 0x0058(0x0010)(ReferenceParm)
	TArray<int32>                                 K2Node_MakeArray_Array_4;                          // 0x0068(0x0010)(ReferenceParm)
	TArray<int32>                                 K2Node_MakeArray_Array_5;                          // 0x0078(0x0010)(ReferenceParm)
};
static_assert(alignof(FUNCLIB_ColorUtility_C_GetTriadicColors) == 0x000008, "Wrong alignment on FUNCLIB_ColorUtility_C_GetTriadicColors");
static_assert(sizeof(FUNCLIB_ColorUtility_C_GetTriadicColors) == 0x000088, "Wrong size on FUNCLIB_ColorUtility_C_GetTriadicColors");
static_assert(offsetof(FUNCLIB_ColorUtility_C_GetTriadicColors, InputColor) == 0x000000, "Member 'FUNCLIB_ColorUtility_C_GetTriadicColors::InputColor' has a wrong offset!");
static_assert(offsetof(FUNCLIB_ColorUtility_C_GetTriadicColors, __WorldContext) == 0x000008, "Member 'FUNCLIB_ColorUtility_C_GetTriadicColors::__WorldContext' has a wrong offset!");
static_assert(offsetof(FUNCLIB_ColorUtility_C_GetTriadicColors, TriadicColors) == 0x000010, "Member 'FUNCLIB_ColorUtility_C_GetTriadicColors::TriadicColors' has a wrong offset!");
static_assert(offsetof(FUNCLIB_ColorUtility_C_GetTriadicColors, K2Node_MakeArray_Array) == 0x000020, "Member 'FUNCLIB_ColorUtility_C_GetTriadicColors::K2Node_MakeArray_Array' has a wrong offset!");
static_assert(offsetof(FUNCLIB_ColorUtility_C_GetTriadicColors, K2Node_SwitchInteger_CmpSuccess) == 0x000030, "Member 'FUNCLIB_ColorUtility_C_GetTriadicColors::K2Node_SwitchInteger_CmpSuccess' has a wrong offset!");
static_assert(offsetof(FUNCLIB_ColorUtility_C_GetTriadicColors, K2Node_MakeArray_Array_1) == 0x000038, "Member 'FUNCLIB_ColorUtility_C_GetTriadicColors::K2Node_MakeArray_Array_1' has a wrong offset!");
static_assert(offsetof(FUNCLIB_ColorUtility_C_GetTriadicColors, K2Node_MakeArray_Array_2) == 0x000048, "Member 'FUNCLIB_ColorUtility_C_GetTriadicColors::K2Node_MakeArray_Array_2' has a wrong offset!");
static_assert(offsetof(FUNCLIB_ColorUtility_C_GetTriadicColors, K2Node_MakeArray_Array_3) == 0x000058, "Member 'FUNCLIB_ColorUtility_C_GetTriadicColors::K2Node_MakeArray_Array_3' has a wrong offset!");
static_assert(offsetof(FUNCLIB_ColorUtility_C_GetTriadicColors, K2Node_MakeArray_Array_4) == 0x000068, "Member 'FUNCLIB_ColorUtility_C_GetTriadicColors::K2Node_MakeArray_Array_4' has a wrong offset!");
static_assert(offsetof(FUNCLIB_ColorUtility_C_GetTriadicColors, K2Node_MakeArray_Array_5) == 0x000078, "Member 'FUNCLIB_ColorUtility_C_GetTriadicColors::K2Node_MakeArray_Array_5' has a wrong offset!");

// Function FUNCLIB_ColorUtility.FUNCLIB_ColorUtility_C.GetCombinedPrimaries
// 0x0058 (0x0058 - 0x0000)
struct FUNCLIB_ColorUtility_C_GetCombinedPrimaries final
{
public:
	TArray<int32>                                 PrimaryColors;                                     // 0x0000(0x0010)(BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
	class UObject*                                __WorldContext;                                    // 0x0010(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Secondary;                                         // 0x0018(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Variable;                                 // 0x001C(0x0004)(ConstParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Length_ReturnValue;                 // 0x0020(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_IntInt_ReturnValue;            // 0x0024(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_25[0x3];                                       // 0x0025(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Temp_int_Array_Index_Variable;                     // 0x0028(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Loop_Counter_Variable;                    // 0x002C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Variable_1;                               // 0x0030(0x0004)(ConstParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue;                   // 0x0034(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Get_Item;                           // 0x0038(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Get_Item_1;                         // 0x003C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_GetComplementaryColor_OutputColors;       // 0x0040(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_NotEqual_IntInt_ReturnValue;              // 0x0044(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Array_Contains_ReturnValue;               // 0x0045(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Array_Contains_ReturnValue_1;             // 0x0046(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_47[0x1];                                       // 0x0047(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Array_Get_Item_2;                         // 0x0048(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Length_ReturnValue_1;               // 0x004C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsPrimaryColor_Result;                    // 0x0050(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Less_IntInt_ReturnValue;                  // 0x0051(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Not_PreBool_ReturnValue;                  // 0x0052(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(FUNCLIB_ColorUtility_C_GetCombinedPrimaries) == 0x000008, "Wrong alignment on FUNCLIB_ColorUtility_C_GetCombinedPrimaries");
static_assert(sizeof(FUNCLIB_ColorUtility_C_GetCombinedPrimaries) == 0x000058, "Wrong size on FUNCLIB_ColorUtility_C_GetCombinedPrimaries");
static_assert(offsetof(FUNCLIB_ColorUtility_C_GetCombinedPrimaries, PrimaryColors) == 0x000000, "Member 'FUNCLIB_ColorUtility_C_GetCombinedPrimaries::PrimaryColors' has a wrong offset!");
static_assert(offsetof(FUNCLIB_ColorUtility_C_GetCombinedPrimaries, __WorldContext) == 0x000010, "Member 'FUNCLIB_ColorUtility_C_GetCombinedPrimaries::__WorldContext' has a wrong offset!");
static_assert(offsetof(FUNCLIB_ColorUtility_C_GetCombinedPrimaries, Secondary) == 0x000018, "Member 'FUNCLIB_ColorUtility_C_GetCombinedPrimaries::Secondary' has a wrong offset!");
static_assert(offsetof(FUNCLIB_ColorUtility_C_GetCombinedPrimaries, Temp_int_Variable) == 0x00001C, "Member 'FUNCLIB_ColorUtility_C_GetCombinedPrimaries::Temp_int_Variable' has a wrong offset!");
static_assert(offsetof(FUNCLIB_ColorUtility_C_GetCombinedPrimaries, CallFunc_Array_Length_ReturnValue) == 0x000020, "Member 'FUNCLIB_ColorUtility_C_GetCombinedPrimaries::CallFunc_Array_Length_ReturnValue' has a wrong offset!");
static_assert(offsetof(FUNCLIB_ColorUtility_C_GetCombinedPrimaries, CallFunc_EqualEqual_IntInt_ReturnValue) == 0x000024, "Member 'FUNCLIB_ColorUtility_C_GetCombinedPrimaries::CallFunc_EqualEqual_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(FUNCLIB_ColorUtility_C_GetCombinedPrimaries, Temp_int_Array_Index_Variable) == 0x000028, "Member 'FUNCLIB_ColorUtility_C_GetCombinedPrimaries::Temp_int_Array_Index_Variable' has a wrong offset!");
static_assert(offsetof(FUNCLIB_ColorUtility_C_GetCombinedPrimaries, Temp_int_Loop_Counter_Variable) == 0x00002C, "Member 'FUNCLIB_ColorUtility_C_GetCombinedPrimaries::Temp_int_Loop_Counter_Variable' has a wrong offset!");
static_assert(offsetof(FUNCLIB_ColorUtility_C_GetCombinedPrimaries, Temp_int_Variable_1) == 0x000030, "Member 'FUNCLIB_ColorUtility_C_GetCombinedPrimaries::Temp_int_Variable_1' has a wrong offset!");
static_assert(offsetof(FUNCLIB_ColorUtility_C_GetCombinedPrimaries, CallFunc_Add_IntInt_ReturnValue) == 0x000034, "Member 'FUNCLIB_ColorUtility_C_GetCombinedPrimaries::CallFunc_Add_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(FUNCLIB_ColorUtility_C_GetCombinedPrimaries, CallFunc_Array_Get_Item) == 0x000038, "Member 'FUNCLIB_ColorUtility_C_GetCombinedPrimaries::CallFunc_Array_Get_Item' has a wrong offset!");
static_assert(offsetof(FUNCLIB_ColorUtility_C_GetCombinedPrimaries, CallFunc_Array_Get_Item_1) == 0x00003C, "Member 'FUNCLIB_ColorUtility_C_GetCombinedPrimaries::CallFunc_Array_Get_Item_1' has a wrong offset!");
static_assert(offsetof(FUNCLIB_ColorUtility_C_GetCombinedPrimaries, CallFunc_GetComplementaryColor_OutputColors) == 0x000040, "Member 'FUNCLIB_ColorUtility_C_GetCombinedPrimaries::CallFunc_GetComplementaryColor_OutputColors' has a wrong offset!");
static_assert(offsetof(FUNCLIB_ColorUtility_C_GetCombinedPrimaries, CallFunc_NotEqual_IntInt_ReturnValue) == 0x000044, "Member 'FUNCLIB_ColorUtility_C_GetCombinedPrimaries::CallFunc_NotEqual_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(FUNCLIB_ColorUtility_C_GetCombinedPrimaries, CallFunc_Array_Contains_ReturnValue) == 0x000045, "Member 'FUNCLIB_ColorUtility_C_GetCombinedPrimaries::CallFunc_Array_Contains_ReturnValue' has a wrong offset!");
static_assert(offsetof(FUNCLIB_ColorUtility_C_GetCombinedPrimaries, CallFunc_Array_Contains_ReturnValue_1) == 0x000046, "Member 'FUNCLIB_ColorUtility_C_GetCombinedPrimaries::CallFunc_Array_Contains_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(FUNCLIB_ColorUtility_C_GetCombinedPrimaries, CallFunc_Array_Get_Item_2) == 0x000048, "Member 'FUNCLIB_ColorUtility_C_GetCombinedPrimaries::CallFunc_Array_Get_Item_2' has a wrong offset!");
static_assert(offsetof(FUNCLIB_ColorUtility_C_GetCombinedPrimaries, CallFunc_Array_Length_ReturnValue_1) == 0x00004C, "Member 'FUNCLIB_ColorUtility_C_GetCombinedPrimaries::CallFunc_Array_Length_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(FUNCLIB_ColorUtility_C_GetCombinedPrimaries, CallFunc_IsPrimaryColor_Result) == 0x000050, "Member 'FUNCLIB_ColorUtility_C_GetCombinedPrimaries::CallFunc_IsPrimaryColor_Result' has a wrong offset!");
static_assert(offsetof(FUNCLIB_ColorUtility_C_GetCombinedPrimaries, CallFunc_Less_IntInt_ReturnValue) == 0x000051, "Member 'FUNCLIB_ColorUtility_C_GetCombinedPrimaries::CallFunc_Less_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(FUNCLIB_ColorUtility_C_GetCombinedPrimaries, CallFunc_Not_PreBool_ReturnValue) == 0x000052, "Member 'FUNCLIB_ColorUtility_C_GetCombinedPrimaries::CallFunc_Not_PreBool_ReturnValue' has a wrong offset!");

// Function FUNCLIB_ColorUtility.FUNCLIB_ColorUtility_C.GetCombinedSecondary
// 0x0058 (0x0058 - 0x0000)
struct FUNCLIB_ColorUtility_C_GetCombinedSecondary final
{
public:
	TArray<int32>                                 Secondaries;                                       // 0x0000(0x0010)(BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
	class UObject*                                __WorldContext;                                    // 0x0010(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Primary;                                           // 0x0018(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Variable;                                 // 0x001C(0x0004)(ConstParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Array_Index_Variable;                     // 0x0020(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Loop_Counter_Variable;                    // 0x0024(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue;                   // 0x0028(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Variable_1;                               // 0x002C(0x0004)(ConstParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Array_Contains_ReturnValue;               // 0x0030(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Array_Contains_ReturnValue_1;             // 0x0031(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_32[0x2];                                       // 0x0032(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Array_Get_Item;                           // 0x0034(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Get_Item_1;                         // 0x0038(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_GetComplementaryColor_OutputColors;       // 0x003C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_NotEqual_IntInt_ReturnValue;              // 0x0040(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_41[0x3];                                       // 0x0041(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Array_Get_Item_2;                         // 0x0044(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Length_ReturnValue;                 // 0x0048(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsPrimaryColor_Result;                    // 0x004C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_EqualEqual_IntInt_ReturnValue;            // 0x004D(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_4E[0x2];                                       // 0x004E(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Array_Length_ReturnValue_1;               // 0x0050(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue;                  // 0x0054(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(FUNCLIB_ColorUtility_C_GetCombinedSecondary) == 0x000008, "Wrong alignment on FUNCLIB_ColorUtility_C_GetCombinedSecondary");
static_assert(sizeof(FUNCLIB_ColorUtility_C_GetCombinedSecondary) == 0x000058, "Wrong size on FUNCLIB_ColorUtility_C_GetCombinedSecondary");
static_assert(offsetof(FUNCLIB_ColorUtility_C_GetCombinedSecondary, Secondaries) == 0x000000, "Member 'FUNCLIB_ColorUtility_C_GetCombinedSecondary::Secondaries' has a wrong offset!");
static_assert(offsetof(FUNCLIB_ColorUtility_C_GetCombinedSecondary, __WorldContext) == 0x000010, "Member 'FUNCLIB_ColorUtility_C_GetCombinedSecondary::__WorldContext' has a wrong offset!");
static_assert(offsetof(FUNCLIB_ColorUtility_C_GetCombinedSecondary, Primary) == 0x000018, "Member 'FUNCLIB_ColorUtility_C_GetCombinedSecondary::Primary' has a wrong offset!");
static_assert(offsetof(FUNCLIB_ColorUtility_C_GetCombinedSecondary, Temp_int_Variable) == 0x00001C, "Member 'FUNCLIB_ColorUtility_C_GetCombinedSecondary::Temp_int_Variable' has a wrong offset!");
static_assert(offsetof(FUNCLIB_ColorUtility_C_GetCombinedSecondary, Temp_int_Array_Index_Variable) == 0x000020, "Member 'FUNCLIB_ColorUtility_C_GetCombinedSecondary::Temp_int_Array_Index_Variable' has a wrong offset!");
static_assert(offsetof(FUNCLIB_ColorUtility_C_GetCombinedSecondary, Temp_int_Loop_Counter_Variable) == 0x000024, "Member 'FUNCLIB_ColorUtility_C_GetCombinedSecondary::Temp_int_Loop_Counter_Variable' has a wrong offset!");
static_assert(offsetof(FUNCLIB_ColorUtility_C_GetCombinedSecondary, CallFunc_Add_IntInt_ReturnValue) == 0x000028, "Member 'FUNCLIB_ColorUtility_C_GetCombinedSecondary::CallFunc_Add_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(FUNCLIB_ColorUtility_C_GetCombinedSecondary, Temp_int_Variable_1) == 0x00002C, "Member 'FUNCLIB_ColorUtility_C_GetCombinedSecondary::Temp_int_Variable_1' has a wrong offset!");
static_assert(offsetof(FUNCLIB_ColorUtility_C_GetCombinedSecondary, CallFunc_Array_Contains_ReturnValue) == 0x000030, "Member 'FUNCLIB_ColorUtility_C_GetCombinedSecondary::CallFunc_Array_Contains_ReturnValue' has a wrong offset!");
static_assert(offsetof(FUNCLIB_ColorUtility_C_GetCombinedSecondary, CallFunc_Array_Contains_ReturnValue_1) == 0x000031, "Member 'FUNCLIB_ColorUtility_C_GetCombinedSecondary::CallFunc_Array_Contains_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(FUNCLIB_ColorUtility_C_GetCombinedSecondary, CallFunc_Array_Get_Item) == 0x000034, "Member 'FUNCLIB_ColorUtility_C_GetCombinedSecondary::CallFunc_Array_Get_Item' has a wrong offset!");
static_assert(offsetof(FUNCLIB_ColorUtility_C_GetCombinedSecondary, CallFunc_Array_Get_Item_1) == 0x000038, "Member 'FUNCLIB_ColorUtility_C_GetCombinedSecondary::CallFunc_Array_Get_Item_1' has a wrong offset!");
static_assert(offsetof(FUNCLIB_ColorUtility_C_GetCombinedSecondary, CallFunc_GetComplementaryColor_OutputColors) == 0x00003C, "Member 'FUNCLIB_ColorUtility_C_GetCombinedSecondary::CallFunc_GetComplementaryColor_OutputColors' has a wrong offset!");
static_assert(offsetof(FUNCLIB_ColorUtility_C_GetCombinedSecondary, CallFunc_NotEqual_IntInt_ReturnValue) == 0x000040, "Member 'FUNCLIB_ColorUtility_C_GetCombinedSecondary::CallFunc_NotEqual_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(FUNCLIB_ColorUtility_C_GetCombinedSecondary, CallFunc_Array_Get_Item_2) == 0x000044, "Member 'FUNCLIB_ColorUtility_C_GetCombinedSecondary::CallFunc_Array_Get_Item_2' has a wrong offset!");
static_assert(offsetof(FUNCLIB_ColorUtility_C_GetCombinedSecondary, CallFunc_Array_Length_ReturnValue) == 0x000048, "Member 'FUNCLIB_ColorUtility_C_GetCombinedSecondary::CallFunc_Array_Length_ReturnValue' has a wrong offset!");
static_assert(offsetof(FUNCLIB_ColorUtility_C_GetCombinedSecondary, CallFunc_IsPrimaryColor_Result) == 0x00004C, "Member 'FUNCLIB_ColorUtility_C_GetCombinedSecondary::CallFunc_IsPrimaryColor_Result' has a wrong offset!");
static_assert(offsetof(FUNCLIB_ColorUtility_C_GetCombinedSecondary, CallFunc_EqualEqual_IntInt_ReturnValue) == 0x00004D, "Member 'FUNCLIB_ColorUtility_C_GetCombinedSecondary::CallFunc_EqualEqual_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(FUNCLIB_ColorUtility_C_GetCombinedSecondary, CallFunc_Array_Length_ReturnValue_1) == 0x000050, "Member 'FUNCLIB_ColorUtility_C_GetCombinedSecondary::CallFunc_Array_Length_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(FUNCLIB_ColorUtility_C_GetCombinedSecondary, CallFunc_Less_IntInt_ReturnValue) == 0x000054, "Member 'FUNCLIB_ColorUtility_C_GetCombinedSecondary::CallFunc_Less_IntInt_ReturnValue' has a wrong offset!");

// Function FUNCLIB_ColorUtility.FUNCLIB_ColorUtility_C.GetMeshUIColor
// 0x0038 (0x0038 - 0x0000)
struct FUNCLIB_ColorUtility_C_GetMeshUIColor final
{
public:
	ENUM_MeshColor                                TargetColor;                                       // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UObject*                                __WorldContext;                                    // 0x0008(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FColor                                 Color;                                             // 0x0010(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FColor                                 K2Node_MakeStruct_Color;                           // 0x0014(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_SwitchEnum_CmpSuccess;                      // 0x0018(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_19[0x3];                                       // 0x0019(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FColor                                 K2Node_MakeStruct_Color_1;                         // 0x001C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FColor                                 K2Node_MakeStruct_Color_2;                         // 0x0020(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FColor                                 K2Node_MakeStruct_Color_3;                         // 0x0024(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FColor                                 K2Node_MakeStruct_Color_4;                         // 0x0028(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FColor                                 K2Node_MakeStruct_Color_5;                         // 0x002C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FColor                                 K2Node_MakeStruct_Color_6;                         // 0x0030(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(FUNCLIB_ColorUtility_C_GetMeshUIColor) == 0x000008, "Wrong alignment on FUNCLIB_ColorUtility_C_GetMeshUIColor");
static_assert(sizeof(FUNCLIB_ColorUtility_C_GetMeshUIColor) == 0x000038, "Wrong size on FUNCLIB_ColorUtility_C_GetMeshUIColor");
static_assert(offsetof(FUNCLIB_ColorUtility_C_GetMeshUIColor, TargetColor) == 0x000000, "Member 'FUNCLIB_ColorUtility_C_GetMeshUIColor::TargetColor' has a wrong offset!");
static_assert(offsetof(FUNCLIB_ColorUtility_C_GetMeshUIColor, __WorldContext) == 0x000008, "Member 'FUNCLIB_ColorUtility_C_GetMeshUIColor::__WorldContext' has a wrong offset!");
static_assert(offsetof(FUNCLIB_ColorUtility_C_GetMeshUIColor, Color) == 0x000010, "Member 'FUNCLIB_ColorUtility_C_GetMeshUIColor::Color' has a wrong offset!");
static_assert(offsetof(FUNCLIB_ColorUtility_C_GetMeshUIColor, K2Node_MakeStruct_Color) == 0x000014, "Member 'FUNCLIB_ColorUtility_C_GetMeshUIColor::K2Node_MakeStruct_Color' has a wrong offset!");
static_assert(offsetof(FUNCLIB_ColorUtility_C_GetMeshUIColor, K2Node_SwitchEnum_CmpSuccess) == 0x000018, "Member 'FUNCLIB_ColorUtility_C_GetMeshUIColor::K2Node_SwitchEnum_CmpSuccess' has a wrong offset!");
static_assert(offsetof(FUNCLIB_ColorUtility_C_GetMeshUIColor, K2Node_MakeStruct_Color_1) == 0x00001C, "Member 'FUNCLIB_ColorUtility_C_GetMeshUIColor::K2Node_MakeStruct_Color_1' has a wrong offset!");
static_assert(offsetof(FUNCLIB_ColorUtility_C_GetMeshUIColor, K2Node_MakeStruct_Color_2) == 0x000020, "Member 'FUNCLIB_ColorUtility_C_GetMeshUIColor::K2Node_MakeStruct_Color_2' has a wrong offset!");
static_assert(offsetof(FUNCLIB_ColorUtility_C_GetMeshUIColor, K2Node_MakeStruct_Color_3) == 0x000024, "Member 'FUNCLIB_ColorUtility_C_GetMeshUIColor::K2Node_MakeStruct_Color_3' has a wrong offset!");
static_assert(offsetof(FUNCLIB_ColorUtility_C_GetMeshUIColor, K2Node_MakeStruct_Color_4) == 0x000028, "Member 'FUNCLIB_ColorUtility_C_GetMeshUIColor::K2Node_MakeStruct_Color_4' has a wrong offset!");
static_assert(offsetof(FUNCLIB_ColorUtility_C_GetMeshUIColor, K2Node_MakeStruct_Color_5) == 0x00002C, "Member 'FUNCLIB_ColorUtility_C_GetMeshUIColor::K2Node_MakeStruct_Color_5' has a wrong offset!");
static_assert(offsetof(FUNCLIB_ColorUtility_C_GetMeshUIColor, K2Node_MakeStruct_Color_6) == 0x000030, "Member 'FUNCLIB_ColorUtility_C_GetMeshUIColor::K2Node_MakeStruct_Color_6' has a wrong offset!");

// Function FUNCLIB_ColorUtility.FUNCLIB_ColorUtility_C.GetButtonColor
// 0x0068 (0x0068 - 0x0000)
struct FUNCLIB_ColorUtility_C_GetButtonColor final
{
public:
	ENUM_ButtonColorType                          ButtonColorType;                                   // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UObject*                                __WorldContext;                                    // 0x0008(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           ButtonColor;                                       // 0x0010(0x0010)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           RestrictedColor;                                   // 0x0020(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           DisabledColor;                                     // 0x0030(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           EnabledColor;                                      // 0x0040(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ENUM_ButtonColorType                          Temp_byte_Variable;                                // 0x0050(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_51[0x3];                                       // 0x0051(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FLinearColor                           K2Node_Select_Default;                             // 0x0054(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(FUNCLIB_ColorUtility_C_GetButtonColor) == 0x000008, "Wrong alignment on FUNCLIB_ColorUtility_C_GetButtonColor");
static_assert(sizeof(FUNCLIB_ColorUtility_C_GetButtonColor) == 0x000068, "Wrong size on FUNCLIB_ColorUtility_C_GetButtonColor");
static_assert(offsetof(FUNCLIB_ColorUtility_C_GetButtonColor, ButtonColorType) == 0x000000, "Member 'FUNCLIB_ColorUtility_C_GetButtonColor::ButtonColorType' has a wrong offset!");
static_assert(offsetof(FUNCLIB_ColorUtility_C_GetButtonColor, __WorldContext) == 0x000008, "Member 'FUNCLIB_ColorUtility_C_GetButtonColor::__WorldContext' has a wrong offset!");
static_assert(offsetof(FUNCLIB_ColorUtility_C_GetButtonColor, ButtonColor) == 0x000010, "Member 'FUNCLIB_ColorUtility_C_GetButtonColor::ButtonColor' has a wrong offset!");
static_assert(offsetof(FUNCLIB_ColorUtility_C_GetButtonColor, RestrictedColor) == 0x000020, "Member 'FUNCLIB_ColorUtility_C_GetButtonColor::RestrictedColor' has a wrong offset!");
static_assert(offsetof(FUNCLIB_ColorUtility_C_GetButtonColor, DisabledColor) == 0x000030, "Member 'FUNCLIB_ColorUtility_C_GetButtonColor::DisabledColor' has a wrong offset!");
static_assert(offsetof(FUNCLIB_ColorUtility_C_GetButtonColor, EnabledColor) == 0x000040, "Member 'FUNCLIB_ColorUtility_C_GetButtonColor::EnabledColor' has a wrong offset!");
static_assert(offsetof(FUNCLIB_ColorUtility_C_GetButtonColor, Temp_byte_Variable) == 0x000050, "Member 'FUNCLIB_ColorUtility_C_GetButtonColor::Temp_byte_Variable' has a wrong offset!");
static_assert(offsetof(FUNCLIB_ColorUtility_C_GetButtonColor, K2Node_Select_Default) == 0x000054, "Member 'FUNCLIB_ColorUtility_C_GetButtonColor::K2Node_Select_Default' has a wrong offset!");

// Function FUNCLIB_ColorUtility.FUNCLIB_ColorUtility_C.GetButtonColorWhilePulsing
// 0x00A0 (0x00A0 - 0x0000)
struct FUNCLIB_ColorUtility_C_GetButtonColorWhilePulsing final
{
public:
	float                                         Progress;                                          // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ENUM_ButtonColorType                          ButtonColorType;                                   // 0x0004(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class UObject*                                __WorldContext;                                    // 0x0008(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           PulseValue;                                        // 0x0010(0x0010)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           BaseColor;                                         // 0x0020(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         NormalizedPulseValue;                              // 0x0030(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_34[0x4];                                       // 0x0034(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UCurveFloat*                            ActivationFailedPulseCurve;                        // 0x0038(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UCurveFloat*                            ActivationSuccessPulseCurve;                       // 0x0040(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Variable;                                // 0x0048(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Temp_bool_Variable_1;                              // 0x0049(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_4A[0x2];                                       // 0x004A(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_Multiply_FloatFloat_ReturnValue;          // 0x004C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_ByteByte_ReturnValue;          // 0x0050(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_51[0x3];                                       // 0x0051(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_Multiply_FloatFloat_ReturnValue_1;        // 0x0054(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         K2Node_Select_Default;                             // 0x0058(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           CallFunc_Multiply_LinearColorFloat_ReturnValue;    // 0x005C(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           CallFunc_GetButtonColor_ButtonColor;               // 0x006C(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_ByteByte_ReturnValue_1;        // 0x007C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_7D[0x3];                                       // 0x007D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_Multiply_FloatFloat_ReturnValue_2;        // 0x0080(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_84[0x4];                                       // 0x0084(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UCurveFloat*                            K2Node_Select_Default_1;                           // 0x0088(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_GetFloatValue_ReturnValue;                // 0x0090(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Divide_FloatFloat_ReturnValue;            // 0x0094(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_FClamp_ReturnValue;                       // 0x0098(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(FUNCLIB_ColorUtility_C_GetButtonColorWhilePulsing) == 0x000008, "Wrong alignment on FUNCLIB_ColorUtility_C_GetButtonColorWhilePulsing");
static_assert(sizeof(FUNCLIB_ColorUtility_C_GetButtonColorWhilePulsing) == 0x0000A0, "Wrong size on FUNCLIB_ColorUtility_C_GetButtonColorWhilePulsing");
static_assert(offsetof(FUNCLIB_ColorUtility_C_GetButtonColorWhilePulsing, Progress) == 0x000000, "Member 'FUNCLIB_ColorUtility_C_GetButtonColorWhilePulsing::Progress' has a wrong offset!");
static_assert(offsetof(FUNCLIB_ColorUtility_C_GetButtonColorWhilePulsing, ButtonColorType) == 0x000004, "Member 'FUNCLIB_ColorUtility_C_GetButtonColorWhilePulsing::ButtonColorType' has a wrong offset!");
static_assert(offsetof(FUNCLIB_ColorUtility_C_GetButtonColorWhilePulsing, __WorldContext) == 0x000008, "Member 'FUNCLIB_ColorUtility_C_GetButtonColorWhilePulsing::__WorldContext' has a wrong offset!");
static_assert(offsetof(FUNCLIB_ColorUtility_C_GetButtonColorWhilePulsing, PulseValue) == 0x000010, "Member 'FUNCLIB_ColorUtility_C_GetButtonColorWhilePulsing::PulseValue' has a wrong offset!");
static_assert(offsetof(FUNCLIB_ColorUtility_C_GetButtonColorWhilePulsing, BaseColor) == 0x000020, "Member 'FUNCLIB_ColorUtility_C_GetButtonColorWhilePulsing::BaseColor' has a wrong offset!");
static_assert(offsetof(FUNCLIB_ColorUtility_C_GetButtonColorWhilePulsing, NormalizedPulseValue) == 0x000030, "Member 'FUNCLIB_ColorUtility_C_GetButtonColorWhilePulsing::NormalizedPulseValue' has a wrong offset!");
static_assert(offsetof(FUNCLIB_ColorUtility_C_GetButtonColorWhilePulsing, ActivationFailedPulseCurve) == 0x000038, "Member 'FUNCLIB_ColorUtility_C_GetButtonColorWhilePulsing::ActivationFailedPulseCurve' has a wrong offset!");
static_assert(offsetof(FUNCLIB_ColorUtility_C_GetButtonColorWhilePulsing, ActivationSuccessPulseCurve) == 0x000040, "Member 'FUNCLIB_ColorUtility_C_GetButtonColorWhilePulsing::ActivationSuccessPulseCurve' has a wrong offset!");
static_assert(offsetof(FUNCLIB_ColorUtility_C_GetButtonColorWhilePulsing, Temp_bool_Variable) == 0x000048, "Member 'FUNCLIB_ColorUtility_C_GetButtonColorWhilePulsing::Temp_bool_Variable' has a wrong offset!");
static_assert(offsetof(FUNCLIB_ColorUtility_C_GetButtonColorWhilePulsing, Temp_bool_Variable_1) == 0x000049, "Member 'FUNCLIB_ColorUtility_C_GetButtonColorWhilePulsing::Temp_bool_Variable_1' has a wrong offset!");
static_assert(offsetof(FUNCLIB_ColorUtility_C_GetButtonColorWhilePulsing, CallFunc_Multiply_FloatFloat_ReturnValue) == 0x00004C, "Member 'FUNCLIB_ColorUtility_C_GetButtonColorWhilePulsing::CallFunc_Multiply_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(FUNCLIB_ColorUtility_C_GetButtonColorWhilePulsing, CallFunc_EqualEqual_ByteByte_ReturnValue) == 0x000050, "Member 'FUNCLIB_ColorUtility_C_GetButtonColorWhilePulsing::CallFunc_EqualEqual_ByteByte_ReturnValue' has a wrong offset!");
static_assert(offsetof(FUNCLIB_ColorUtility_C_GetButtonColorWhilePulsing, CallFunc_Multiply_FloatFloat_ReturnValue_1) == 0x000054, "Member 'FUNCLIB_ColorUtility_C_GetButtonColorWhilePulsing::CallFunc_Multiply_FloatFloat_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(FUNCLIB_ColorUtility_C_GetButtonColorWhilePulsing, K2Node_Select_Default) == 0x000058, "Member 'FUNCLIB_ColorUtility_C_GetButtonColorWhilePulsing::K2Node_Select_Default' has a wrong offset!");
static_assert(offsetof(FUNCLIB_ColorUtility_C_GetButtonColorWhilePulsing, CallFunc_Multiply_LinearColorFloat_ReturnValue) == 0x00005C, "Member 'FUNCLIB_ColorUtility_C_GetButtonColorWhilePulsing::CallFunc_Multiply_LinearColorFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(FUNCLIB_ColorUtility_C_GetButtonColorWhilePulsing, CallFunc_GetButtonColor_ButtonColor) == 0x00006C, "Member 'FUNCLIB_ColorUtility_C_GetButtonColorWhilePulsing::CallFunc_GetButtonColor_ButtonColor' has a wrong offset!");
static_assert(offsetof(FUNCLIB_ColorUtility_C_GetButtonColorWhilePulsing, CallFunc_EqualEqual_ByteByte_ReturnValue_1) == 0x00007C, "Member 'FUNCLIB_ColorUtility_C_GetButtonColorWhilePulsing::CallFunc_EqualEqual_ByteByte_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(FUNCLIB_ColorUtility_C_GetButtonColorWhilePulsing, CallFunc_Multiply_FloatFloat_ReturnValue_2) == 0x000080, "Member 'FUNCLIB_ColorUtility_C_GetButtonColorWhilePulsing::CallFunc_Multiply_FloatFloat_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(FUNCLIB_ColorUtility_C_GetButtonColorWhilePulsing, K2Node_Select_Default_1) == 0x000088, "Member 'FUNCLIB_ColorUtility_C_GetButtonColorWhilePulsing::K2Node_Select_Default_1' has a wrong offset!");
static_assert(offsetof(FUNCLIB_ColorUtility_C_GetButtonColorWhilePulsing, CallFunc_GetFloatValue_ReturnValue) == 0x000090, "Member 'FUNCLIB_ColorUtility_C_GetButtonColorWhilePulsing::CallFunc_GetFloatValue_ReturnValue' has a wrong offset!");
static_assert(offsetof(FUNCLIB_ColorUtility_C_GetButtonColorWhilePulsing, CallFunc_Divide_FloatFloat_ReturnValue) == 0x000094, "Member 'FUNCLIB_ColorUtility_C_GetButtonColorWhilePulsing::CallFunc_Divide_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(FUNCLIB_ColorUtility_C_GetButtonColorWhilePulsing, CallFunc_FClamp_ReturnValue) == 0x000098, "Member 'FUNCLIB_ColorUtility_C_GetButtonColorWhilePulsing::CallFunc_FClamp_ReturnValue' has a wrong offset!");

}

