#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: INTERACT_SurgeryMachine

#include "Basic.hpp"

#include "ENUM_SurgeryMachineState_structs.hpp"
#include "Engine_structs.hpp"
#include "ENUM_LeftRight_structs.hpp"
#include "INTERACT_Channeling_Base_classes.hpp"
#include "ENUM_InteractionType_structs.hpp"


namespace SDK
{

// BlueprintGeneratedClass INTERACT_SurgeryMachine.INTERACT_SurgeryMachine_C
// 0x03A8 (0x06F8 - 0x0350)
class AINTERACT_SurgeryMachine_C final : public AINTERACT_Channeling_Base_C
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame_INTERACT_SurgeryMachine_C;          // 0x0350(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	class UCOMP_VoxelAudio_C*                     SurgeryMachine_Steam_Loop;                         // 0x0358(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UCOMP_AttribManager_C*                  COMP_AttribManager;                                // 0x0360(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UPointOfInterestComponent_C*            PointOfInterestComponent;                          // 0x0368(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UPointLightComponent*                   MedBed_Light;                                      // 0x0370(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UNiagaraComponent*                      NS_Nanobot6;                                       // 0x0378(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UNiagaraComponent*                      NS_Nanobot1;                                       // 0x0380(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UNiagaraComponent*                      NS_Nanobot2;                                       // 0x0388(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UNiagaraComponent*                      NS_Nanobot3;                                       // 0x0390(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UNiagaraComponent*                      NS_Nanobot4;                                       // 0x0398(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UNiagaraComponent*                      NS_Nanobot5;                                       // 0x03A0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UNiagaraComponent*                      NS_Nanobot12;                                      // 0x03A8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UNiagaraComponent*                      NS_Nanobot7;                                       // 0x03B0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UNiagaraComponent*                      NS_Nanobot8;                                       // 0x03B8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UNiagaraComponent*                      NS_Nanobot9;                                       // 0x03C0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UNiagaraComponent*                      NS_Nanobot10;                                      // 0x03C8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UNiagaraComponent*                      NS_Nanobot11;                                      // 0x03D0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UNiagaraComponent*                      NS_HatchOpen_SteamBurst3;                          // 0x03D8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UNiagaraComponent*                      NS_HatchOpen_SteamBurst2;                          // 0x03E0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UNiagaraComponent*                      NS_HatchOpen_SteamBurst1;                          // 0x03E8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UNiagaraComponent*                      NS_HatchOpen_SteamBurst;                           // 0x03F0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USceneComponent*                        MoveTarget_Right_End;                              // 0x03F8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USceneComponent*                        MoveTarget_Left_End;                               // 0x0400(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USceneComponent*                        MoveTarget_Right_Maintain;                         // 0x0408(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USceneComponent*                        MoveTarget_Left_Maintain;                          // 0x0410(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USceneComponent*                        MoveTarget_Right_Start;                            // 0x0418(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USceneComponent*                        MoveTarget_Left_Start;                             // 0x0420(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UCOMP_VoxelCullable_C*                  COMP_VoxelCullable;                                // 0x0428(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UAudioComponent*                        Audio_Scanning;                                    // 0x0430(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UAudioComponent*                        Audio_Healing;                                     // 0x0438(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UParticleSystemComponent*               P_Steam_SurgicalBed1;                              // 0x0440(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UParticleSystemComponent*               P_Steam_SurgicalBed;                               // 0x0448(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USkeletalMeshComponent*                 LaserMesh;                                         // 0x0450(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UStaticMeshComponent*                   MedBedBase;                                        // 0x0458(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UCOMP_ScannableObject_C*                COMP_ScannableObject;                              // 0x0460(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UBoxComponent*                          ScanBox_Right;                                     // 0x0468(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UBoxComponent*                          ScanBox_Left;                                      // 0x0470(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UBoxComponent*                          TargetBox_Right;                                   // 0x0478(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UBoxComponent*                          TargetBox_Left;                                    // 0x0480(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USkeletalMeshComponent*                 SurgicalBedSkelMesh;                               // 0x0488(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	ENUM_SurgeryMachineState                      SurgicalBedState;                                  // 0x0490(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, SaveGame, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_491[0x3];                                      // 0x0491(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         EnterStateTimestamp;                               // 0x0494(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, SaveGame, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ENUM_LeftRight                                SideEntered;                                       // 0x0498(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, SaveGame, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          HasAppliedMod;                                     // 0x0499(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_49A[0x6];                                      // 0x049A(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class UMaterialInstanceDynamic*               SurgicalBedMaterial;                               // 0x04A0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UMaterialInstanceDynamic*               LaserMaterial;                                     // 0x04A8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UMaterialInstanceDynamic*               HealingMaterial;                                   // 0x04B0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         RampDuration;                                      // 0x04B8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          ReverseScan;                                       // 0x04BC(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_4BD[0x3];                                      // 0x04BD(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class UMaterialInstanceDynamic*               SurgicalScreenMaterial;                            // 0x04C0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FDataTableRowHandle                    CompleteTutorial;                                  // 0x04C8(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor)
	TArray<class UNiagaraComponent*>              SmokeParticles;                                    // 0x04D8(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance, ContainsInstancedReference)
	class APAWN_SystemShockCharacter_C*           InteractingCharacter;                              // 0x04E8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UBPC_SurgeryMachine_C*                  SurgicalMoveControl;                               // 0x04F0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UAnimSequenceBase*                      CharacterIdleOverride_Left;                        // 0x04F8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UAnimSequenceBase*                      CharacterIdleOverride_Right;                       // 0x0500(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TSoftObjectPtr<class UAnimMontage>            MONT_Hacker_Left_Enter;                            // 0x0508(0x0028)(Edit, BlueprintVisible, DisableEditOnInstance, HasGetValueTypeHash)
	TSoftObjectPtr<class UAnimMontage>            MONT_Hacker_Left_Exit;                             // 0x0530(0x0028)(Edit, BlueprintVisible, DisableEditOnInstance, HasGetValueTypeHash)
	TSoftObjectPtr<class UAnimMontage>            MONT_Hacker_Right_Enter;                           // 0x0558(0x0028)(Edit, BlueprintVisible, DisableEditOnInstance, HasGetValueTypeHash)
	TSoftObjectPtr<class UAnimMontage>            MONT_Hacker_Right_Exit;                            // 0x0580(0x0028)(Edit, BlueprintVisible, DisableEditOnInstance, HasGetValueTypeHash)
	TArray<class UNiagaraComponent*>              NanoParticles;                                     // 0x05A8(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance, ContainsInstancedReference)
	TSoftObjectPtr<class UNiagaraSystem>          NanoBotFX;                                         // 0x05B8(0x0028)(Edit, BlueprintVisible, DisableEditOnInstance, HasGetValueTypeHash)
	TSoftObjectPtr<class UNiagaraSystem>          SteamHatchOpenFX;                                  // 0x05E0(0x0028)(Edit, BlueprintVisible, DisableEditOnInstance, HasGetValueTypeHash)
	TSoftObjectPtr<class UNiagaraSystem>          SteamHatchClosedFX;                                // 0x0608(0x0028)(Edit, BlueprintVisible, DisableEditOnInstance, HasGetValueTypeHash)
	TSoftObjectPtr<class USoundCue>               ScanningCue;                                       // 0x0630(0x0028)(Edit, BlueprintVisible, DisableEditOnInstance, HasGetValueTypeHash)
	TSoftObjectPtr<class USoundCue>               HealingCue;                                        // 0x0658(0x0028)(Edit, BlueprintVisible, DisableEditOnInstance, HasGetValueTypeHash)
	TSoftObjectPtr<class UAnimMontage>            SurgicalBedOpenMontage;                            // 0x0680(0x0028)(Edit, BlueprintVisible, DisableEditOnInstance, HasGetValueTypeHash)
	TSoftObjectPtr<class UAnimMontage>            SurgicalBedCloseMontage;                           // 0x06A8(0x0028)(Edit, BlueprintVisible, DisableEditOnInstance, HasGetValueTypeHash)
	TSoftObjectPtr<class UAnimMontage>            LaserScanMontage;                                  // 0x06D0(0x0028)(Edit, BlueprintVisible, DisableEditOnInstance, HasGetValueTypeHash)

public:
	void ExecuteUbergraph_INTERACT_SurgeryMachine(int32 EntryPoint);
	void BndEvt__COMP_VoxelCullable_K2Node_ComponentBoundEvent_0_CullableVisibilitySignature__DelegateSignature(bool bVisibleState);
	void StopButtonBlink();
	void ButtonBlink(float TimeIntoBlink);
	void ReceiveBeginPlay();
	void ReceiveTick(float DeltaSeconds);
	void UserConstructionScript();
	void GetTargetShape(class UPrimitiveComponent* CursorPrimitive, class UShapeComponent** ShapeComponent);
	void TryInteract(class AActor* SourceActor, class UPrimitiveComponent* CursorPrimitive, ENUM_InteractionType InteractionType, struct FSTRUCT_InteractResults* InteractResults);
	void InitializeSurgeryMachine();
	void BindAttributeEvents();
	void UpdateMeshEmissiveStrength(float Value);
	void OnSurgeryMachineDestroyed();
	void SpawnDestroyedFX();
	void UpdateDeathSettings(bool DuringBeginPlay, bool* Result);
	void UpdateMaterial();
	void EVENT_OnStateFinished();
	void LaserStartUp();
	void LaserShutDown();
	void LaserMid();
	void PlayNanoBot(bool Activate);
	void PlaySmokeParticle(bool HatchOpening);
	void TryCompleteTutorial();
	void EnterState(ENUM_SurgeryMachineState NewState, float TimeElapsedInState, bool IsResuming);
	void EnterIdle();
	void EnterOpeningToReceive(float TimeElapsedInState);
	void EnterOpenedToReceive(float TimeElapsedInState);
	void EnterClosingToScan(float TimeElapsedInState);
	void EnterWaitingToScan(float TimeElapsedInState);
	void EnterScanRampUp(float TimeElapsedInState);
	void EnterScan(float TimeElapsedInState);
	void EnterScanRampDown(float TimeElapsedInState);
	void EnterWaitingToHeal(float TimeElapsedInState);
	void EnterHealRampUp(float TimeElapsedInState);
	void EnterHeal(float TimeElapsedInState);
	void EnterHealRampDown(float TimeElapsedInState);
	void EnterWaitingToRelease(float TimeElapsedInState);
	void EnterOpeningToRelease(float TimeElapsedInState);
	void EnterOpenedToRelease(float TimeElapsedInState);
	void EnterClosingToRearm(float TimeElapsedInState);
	void EVENT_EnableIdleOverride();
	void EVENT_DisableIdleOverride();
	void EVENT_OnCharacterExitFinished();
	void ApplyEnterMoveControl();
	void UpdateVisibilityState(bool State);
	void EVENT_OnMoveControlExpire(class UMOVECONTROL_Base_C* MoveControl);
	void TryResumeSurgery(class APAWN_SystemShockCharacter_C* Character);
	void VerifyInventoryOnResume(bool* Success);
	void ResumeMontage(class UAnimMontage* Montage, float TimeIntoMontage, bool UseLaserMesh, float* RemainingTime);
	void GetNextState(ENUM_SurgeryMachineState OriginalState, ENUM_SurgeryMachineState* NewState);
	void EnterRearm(float TimeElapsedInState);
	void ResumeChannelingInteraction(class APAWN_Hacker_Simple_C* HackerPawn);
	void StopChanneling(class AActor* NewChannelingInteract, bool* Result);
	void IsSurgeryMachineDestroyed(bool* Result);
	void EVENT_OnDamageReceived(class AActor* OtherActor, const struct FAttribDamageInstance& DamageInstance, class UObject* UserParams);
	void EVENT_OnDisableAttribChanged(float CurrValue, float LastValue);
	void IsSurgeryMachineDisabled(bool* Result);
	void HasActiveChannelingMoveControl(bool* Result);

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"INTERACT_SurgeryMachine_C">();
	}
	static class AINTERACT_SurgeryMachine_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<AINTERACT_SurgeryMachine_C>();
	}
};
static_assert(alignof(AINTERACT_SurgeryMachine_C) == 0x000008, "Wrong alignment on AINTERACT_SurgeryMachine_C");
static_assert(sizeof(AINTERACT_SurgeryMachine_C) == 0x0006F8, "Wrong size on AINTERACT_SurgeryMachine_C");
static_assert(offsetof(AINTERACT_SurgeryMachine_C, UberGraphFrame_INTERACT_SurgeryMachine_C) == 0x000350, "Member 'AINTERACT_SurgeryMachine_C::UberGraphFrame_INTERACT_SurgeryMachine_C' has a wrong offset!");
static_assert(offsetof(AINTERACT_SurgeryMachine_C, SurgeryMachine_Steam_Loop) == 0x000358, "Member 'AINTERACT_SurgeryMachine_C::SurgeryMachine_Steam_Loop' has a wrong offset!");
static_assert(offsetof(AINTERACT_SurgeryMachine_C, COMP_AttribManager) == 0x000360, "Member 'AINTERACT_SurgeryMachine_C::COMP_AttribManager' has a wrong offset!");
static_assert(offsetof(AINTERACT_SurgeryMachine_C, PointOfInterestComponent) == 0x000368, "Member 'AINTERACT_SurgeryMachine_C::PointOfInterestComponent' has a wrong offset!");
static_assert(offsetof(AINTERACT_SurgeryMachine_C, MedBed_Light) == 0x000370, "Member 'AINTERACT_SurgeryMachine_C::MedBed_Light' has a wrong offset!");
static_assert(offsetof(AINTERACT_SurgeryMachine_C, NS_Nanobot6) == 0x000378, "Member 'AINTERACT_SurgeryMachine_C::NS_Nanobot6' has a wrong offset!");
static_assert(offsetof(AINTERACT_SurgeryMachine_C, NS_Nanobot1) == 0x000380, "Member 'AINTERACT_SurgeryMachine_C::NS_Nanobot1' has a wrong offset!");
static_assert(offsetof(AINTERACT_SurgeryMachine_C, NS_Nanobot2) == 0x000388, "Member 'AINTERACT_SurgeryMachine_C::NS_Nanobot2' has a wrong offset!");
static_assert(offsetof(AINTERACT_SurgeryMachine_C, NS_Nanobot3) == 0x000390, "Member 'AINTERACT_SurgeryMachine_C::NS_Nanobot3' has a wrong offset!");
static_assert(offsetof(AINTERACT_SurgeryMachine_C, NS_Nanobot4) == 0x000398, "Member 'AINTERACT_SurgeryMachine_C::NS_Nanobot4' has a wrong offset!");
static_assert(offsetof(AINTERACT_SurgeryMachine_C, NS_Nanobot5) == 0x0003A0, "Member 'AINTERACT_SurgeryMachine_C::NS_Nanobot5' has a wrong offset!");
static_assert(offsetof(AINTERACT_SurgeryMachine_C, NS_Nanobot12) == 0x0003A8, "Member 'AINTERACT_SurgeryMachine_C::NS_Nanobot12' has a wrong offset!");
static_assert(offsetof(AINTERACT_SurgeryMachine_C, NS_Nanobot7) == 0x0003B0, "Member 'AINTERACT_SurgeryMachine_C::NS_Nanobot7' has a wrong offset!");
static_assert(offsetof(AINTERACT_SurgeryMachine_C, NS_Nanobot8) == 0x0003B8, "Member 'AINTERACT_SurgeryMachine_C::NS_Nanobot8' has a wrong offset!");
static_assert(offsetof(AINTERACT_SurgeryMachine_C, NS_Nanobot9) == 0x0003C0, "Member 'AINTERACT_SurgeryMachine_C::NS_Nanobot9' has a wrong offset!");
static_assert(offsetof(AINTERACT_SurgeryMachine_C, NS_Nanobot10) == 0x0003C8, "Member 'AINTERACT_SurgeryMachine_C::NS_Nanobot10' has a wrong offset!");
static_assert(offsetof(AINTERACT_SurgeryMachine_C, NS_Nanobot11) == 0x0003D0, "Member 'AINTERACT_SurgeryMachine_C::NS_Nanobot11' has a wrong offset!");
static_assert(offsetof(AINTERACT_SurgeryMachine_C, NS_HatchOpen_SteamBurst3) == 0x0003D8, "Member 'AINTERACT_SurgeryMachine_C::NS_HatchOpen_SteamBurst3' has a wrong offset!");
static_assert(offsetof(AINTERACT_SurgeryMachine_C, NS_HatchOpen_SteamBurst2) == 0x0003E0, "Member 'AINTERACT_SurgeryMachine_C::NS_HatchOpen_SteamBurst2' has a wrong offset!");
static_assert(offsetof(AINTERACT_SurgeryMachine_C, NS_HatchOpen_SteamBurst1) == 0x0003E8, "Member 'AINTERACT_SurgeryMachine_C::NS_HatchOpen_SteamBurst1' has a wrong offset!");
static_assert(offsetof(AINTERACT_SurgeryMachine_C, NS_HatchOpen_SteamBurst) == 0x0003F0, "Member 'AINTERACT_SurgeryMachine_C::NS_HatchOpen_SteamBurst' has a wrong offset!");
static_assert(offsetof(AINTERACT_SurgeryMachine_C, MoveTarget_Right_End) == 0x0003F8, "Member 'AINTERACT_SurgeryMachine_C::MoveTarget_Right_End' has a wrong offset!");
static_assert(offsetof(AINTERACT_SurgeryMachine_C, MoveTarget_Left_End) == 0x000400, "Member 'AINTERACT_SurgeryMachine_C::MoveTarget_Left_End' has a wrong offset!");
static_assert(offsetof(AINTERACT_SurgeryMachine_C, MoveTarget_Right_Maintain) == 0x000408, "Member 'AINTERACT_SurgeryMachine_C::MoveTarget_Right_Maintain' has a wrong offset!");
static_assert(offsetof(AINTERACT_SurgeryMachine_C, MoveTarget_Left_Maintain) == 0x000410, "Member 'AINTERACT_SurgeryMachine_C::MoveTarget_Left_Maintain' has a wrong offset!");
static_assert(offsetof(AINTERACT_SurgeryMachine_C, MoveTarget_Right_Start) == 0x000418, "Member 'AINTERACT_SurgeryMachine_C::MoveTarget_Right_Start' has a wrong offset!");
static_assert(offsetof(AINTERACT_SurgeryMachine_C, MoveTarget_Left_Start) == 0x000420, "Member 'AINTERACT_SurgeryMachine_C::MoveTarget_Left_Start' has a wrong offset!");
static_assert(offsetof(AINTERACT_SurgeryMachine_C, COMP_VoxelCullable) == 0x000428, "Member 'AINTERACT_SurgeryMachine_C::COMP_VoxelCullable' has a wrong offset!");
static_assert(offsetof(AINTERACT_SurgeryMachine_C, Audio_Scanning) == 0x000430, "Member 'AINTERACT_SurgeryMachine_C::Audio_Scanning' has a wrong offset!");
static_assert(offsetof(AINTERACT_SurgeryMachine_C, Audio_Healing) == 0x000438, "Member 'AINTERACT_SurgeryMachine_C::Audio_Healing' has a wrong offset!");
static_assert(offsetof(AINTERACT_SurgeryMachine_C, P_Steam_SurgicalBed1) == 0x000440, "Member 'AINTERACT_SurgeryMachine_C::P_Steam_SurgicalBed1' has a wrong offset!");
static_assert(offsetof(AINTERACT_SurgeryMachine_C, P_Steam_SurgicalBed) == 0x000448, "Member 'AINTERACT_SurgeryMachine_C::P_Steam_SurgicalBed' has a wrong offset!");
static_assert(offsetof(AINTERACT_SurgeryMachine_C, LaserMesh) == 0x000450, "Member 'AINTERACT_SurgeryMachine_C::LaserMesh' has a wrong offset!");
static_assert(offsetof(AINTERACT_SurgeryMachine_C, MedBedBase) == 0x000458, "Member 'AINTERACT_SurgeryMachine_C::MedBedBase' has a wrong offset!");
static_assert(offsetof(AINTERACT_SurgeryMachine_C, COMP_ScannableObject) == 0x000460, "Member 'AINTERACT_SurgeryMachine_C::COMP_ScannableObject' has a wrong offset!");
static_assert(offsetof(AINTERACT_SurgeryMachine_C, ScanBox_Right) == 0x000468, "Member 'AINTERACT_SurgeryMachine_C::ScanBox_Right' has a wrong offset!");
static_assert(offsetof(AINTERACT_SurgeryMachine_C, ScanBox_Left) == 0x000470, "Member 'AINTERACT_SurgeryMachine_C::ScanBox_Left' has a wrong offset!");
static_assert(offsetof(AINTERACT_SurgeryMachine_C, TargetBox_Right) == 0x000478, "Member 'AINTERACT_SurgeryMachine_C::TargetBox_Right' has a wrong offset!");
static_assert(offsetof(AINTERACT_SurgeryMachine_C, TargetBox_Left) == 0x000480, "Member 'AINTERACT_SurgeryMachine_C::TargetBox_Left' has a wrong offset!");
static_assert(offsetof(AINTERACT_SurgeryMachine_C, SurgicalBedSkelMesh) == 0x000488, "Member 'AINTERACT_SurgeryMachine_C::SurgicalBedSkelMesh' has a wrong offset!");
static_assert(offsetof(AINTERACT_SurgeryMachine_C, SurgicalBedState) == 0x000490, "Member 'AINTERACT_SurgeryMachine_C::SurgicalBedState' has a wrong offset!");
static_assert(offsetof(AINTERACT_SurgeryMachine_C, EnterStateTimestamp) == 0x000494, "Member 'AINTERACT_SurgeryMachine_C::EnterStateTimestamp' has a wrong offset!");
static_assert(offsetof(AINTERACT_SurgeryMachine_C, SideEntered) == 0x000498, "Member 'AINTERACT_SurgeryMachine_C::SideEntered' has a wrong offset!");
static_assert(offsetof(AINTERACT_SurgeryMachine_C, HasAppliedMod) == 0x000499, "Member 'AINTERACT_SurgeryMachine_C::HasAppliedMod' has a wrong offset!");
static_assert(offsetof(AINTERACT_SurgeryMachine_C, SurgicalBedMaterial) == 0x0004A0, "Member 'AINTERACT_SurgeryMachine_C::SurgicalBedMaterial' has a wrong offset!");
static_assert(offsetof(AINTERACT_SurgeryMachine_C, LaserMaterial) == 0x0004A8, "Member 'AINTERACT_SurgeryMachine_C::LaserMaterial' has a wrong offset!");
static_assert(offsetof(AINTERACT_SurgeryMachine_C, HealingMaterial) == 0x0004B0, "Member 'AINTERACT_SurgeryMachine_C::HealingMaterial' has a wrong offset!");
static_assert(offsetof(AINTERACT_SurgeryMachine_C, RampDuration) == 0x0004B8, "Member 'AINTERACT_SurgeryMachine_C::RampDuration' has a wrong offset!");
static_assert(offsetof(AINTERACT_SurgeryMachine_C, ReverseScan) == 0x0004BC, "Member 'AINTERACT_SurgeryMachine_C::ReverseScan' has a wrong offset!");
static_assert(offsetof(AINTERACT_SurgeryMachine_C, SurgicalScreenMaterial) == 0x0004C0, "Member 'AINTERACT_SurgeryMachine_C::SurgicalScreenMaterial' has a wrong offset!");
static_assert(offsetof(AINTERACT_SurgeryMachine_C, CompleteTutorial) == 0x0004C8, "Member 'AINTERACT_SurgeryMachine_C::CompleteTutorial' has a wrong offset!");
static_assert(offsetof(AINTERACT_SurgeryMachine_C, SmokeParticles) == 0x0004D8, "Member 'AINTERACT_SurgeryMachine_C::SmokeParticles' has a wrong offset!");
static_assert(offsetof(AINTERACT_SurgeryMachine_C, InteractingCharacter) == 0x0004E8, "Member 'AINTERACT_SurgeryMachine_C::InteractingCharacter' has a wrong offset!");
static_assert(offsetof(AINTERACT_SurgeryMachine_C, SurgicalMoveControl) == 0x0004F0, "Member 'AINTERACT_SurgeryMachine_C::SurgicalMoveControl' has a wrong offset!");
static_assert(offsetof(AINTERACT_SurgeryMachine_C, CharacterIdleOverride_Left) == 0x0004F8, "Member 'AINTERACT_SurgeryMachine_C::CharacterIdleOverride_Left' has a wrong offset!");
static_assert(offsetof(AINTERACT_SurgeryMachine_C, CharacterIdleOverride_Right) == 0x000500, "Member 'AINTERACT_SurgeryMachine_C::CharacterIdleOverride_Right' has a wrong offset!");
static_assert(offsetof(AINTERACT_SurgeryMachine_C, MONT_Hacker_Left_Enter) == 0x000508, "Member 'AINTERACT_SurgeryMachine_C::MONT_Hacker_Left_Enter' has a wrong offset!");
static_assert(offsetof(AINTERACT_SurgeryMachine_C, MONT_Hacker_Left_Exit) == 0x000530, "Member 'AINTERACT_SurgeryMachine_C::MONT_Hacker_Left_Exit' has a wrong offset!");
static_assert(offsetof(AINTERACT_SurgeryMachine_C, MONT_Hacker_Right_Enter) == 0x000558, "Member 'AINTERACT_SurgeryMachine_C::MONT_Hacker_Right_Enter' has a wrong offset!");
static_assert(offsetof(AINTERACT_SurgeryMachine_C, MONT_Hacker_Right_Exit) == 0x000580, "Member 'AINTERACT_SurgeryMachine_C::MONT_Hacker_Right_Exit' has a wrong offset!");
static_assert(offsetof(AINTERACT_SurgeryMachine_C, NanoParticles) == 0x0005A8, "Member 'AINTERACT_SurgeryMachine_C::NanoParticles' has a wrong offset!");
static_assert(offsetof(AINTERACT_SurgeryMachine_C, NanoBotFX) == 0x0005B8, "Member 'AINTERACT_SurgeryMachine_C::NanoBotFX' has a wrong offset!");
static_assert(offsetof(AINTERACT_SurgeryMachine_C, SteamHatchOpenFX) == 0x0005E0, "Member 'AINTERACT_SurgeryMachine_C::SteamHatchOpenFX' has a wrong offset!");
static_assert(offsetof(AINTERACT_SurgeryMachine_C, SteamHatchClosedFX) == 0x000608, "Member 'AINTERACT_SurgeryMachine_C::SteamHatchClosedFX' has a wrong offset!");
static_assert(offsetof(AINTERACT_SurgeryMachine_C, ScanningCue) == 0x000630, "Member 'AINTERACT_SurgeryMachine_C::ScanningCue' has a wrong offset!");
static_assert(offsetof(AINTERACT_SurgeryMachine_C, HealingCue) == 0x000658, "Member 'AINTERACT_SurgeryMachine_C::HealingCue' has a wrong offset!");
static_assert(offsetof(AINTERACT_SurgeryMachine_C, SurgicalBedOpenMontage) == 0x000680, "Member 'AINTERACT_SurgeryMachine_C::SurgicalBedOpenMontage' has a wrong offset!");
static_assert(offsetof(AINTERACT_SurgeryMachine_C, SurgicalBedCloseMontage) == 0x0006A8, "Member 'AINTERACT_SurgeryMachine_C::SurgicalBedCloseMontage' has a wrong offset!");
static_assert(offsetof(AINTERACT_SurgeryMachine_C, LaserScanMontage) == 0x0006D0, "Member 'AINTERACT_SurgeryMachine_C::LaserScanMontage' has a wrong offset!");

}

