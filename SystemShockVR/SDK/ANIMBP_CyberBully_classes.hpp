#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: ANIMBP_CyberBully

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "Engine_classes.hpp"
#include "AnimGraphRuntime_structs.hpp"
#include "ENUM_Emotions_structs.hpp"
#include "ENUM_DeathBlowType_structs.hpp"


namespace SDK
{

// AnimBlueprintGeneratedClass ANIMBP_CyberBully.ANIMBP_CyberBully_C
// 0x05F0 (0x08B0 - 0x02C0)
class UANIMBP_CyberBully_C final : public UAnimInstance
{
public:
	uint8                                         Pad_2B8[0x8];                                      // 0x02B8(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x02C0(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	struct FAnimNode_Root                         AnimGraphNode_Root;                                // 0x02C8(0x0030)()
	struct FAnimNode_SequencePlayer               AnimGraphNode_SequencePlayer;                      // 0x02F8(0x0080)()
	struct FAnimNode_Slot                         AnimGraphNode_Slot;                                // 0x0378(0x0048)()
	struct FAnimNode_ConvertLocalToComponentSpace AnimGraphNode_LocalToComponentSpace_1;             // 0x03C0(0x0020)()
	struct FAnimNode_ModifyBone                   AnimGraphNode_ModifyBone_1;                        // 0x03E0(0x0108)()
	struct FAnimNode_ConvertComponentToLocalSpace AnimGraphNode_ComponentToLocalSpace_1;             // 0x04E8(0x0020)()
	struct FAnimNode_ModifyBone                   AnimGraphNode_ModifyBone;                          // 0x0508(0x0108)()
	struct FAnimNode_BlendListByBool              AnimGraphNode_BlendListByBool;                     // 0x0610(0x00A0)()
	struct FAnimNode_SaveCachedPose               AnimGraphNode_SaveCachedPose;                      // 0x06B0(0x0158)()
	struct FAnimNode_UseCachedPose                AnimGraphNode_UseCachedPose_1;                     // 0x0808(0x0028)()
	struct FAnimNode_UseCachedPose                AnimGraphNode_UseCachedPose;                       // 0x0830(0x0028)()
	struct FAnimNode_ConvertLocalToComponentSpace AnimGraphNode_LocalToComponentSpace;               // 0x0858(0x0020)()
	struct FAnimNode_ConvertComponentToLocalSpace AnimGraphNode_ComponentToLocalSpace;               // 0x0878(0x0020)()
	class UAnimSequenceBase*                      IdleSequence;                                      // 0x0898(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         SpinProgress;                                      // 0x08A0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         SpinSpeed;                                         // 0x08A4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         SpinSpeedTarget;                                   // 0x08A8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ENUM_Emotions                                 Stance;                                            // 0x08AC(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          ProjectileVisible;                                 // 0x08AD(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)

public:
	void ExecuteUbergraph_ANIMBP_CyberBully(int32 EntryPoint);
	void BlueprintUpdateAnimation(float DeltaTimeX);
	void EvaluateGraphExposedInputs_ExecuteUbergraph_ANIMBP_CyberBully_AnimGraphNode_ModifyBone_A827673B49A81DC0BC409EB33494D43B();
	void AnimGraph(struct FPoseLink* AnimGraph_0);
	void SetTravelMode(bool TravelModeOn, bool* Result);
	void SetAimTarget(class UOBJ_EnemyTarget_C* Target, bool* Result);
	void GetIdleOverrideSequence(class UAnimSequenceBase** IdleOverride);
	void SetIdleOverrideSequence(class UAnimSequenceBase* IdleOverride, bool* Result);
	void SetRelativeAimAngleOffset(float YawOffset, float PitchOffset, float Alpha, bool* Result);
	void GetRotation(struct FRotator* AnimRotationPerSecond, float* AnimRotationAlpha);
	void GetStance(ENUM_Emotions* Stance_0);
	void SetStance(ENUM_Emotions Stance_0, bool* Result);
	void SetCatatonic(bool State, bool* Result);
	void SetStandingTurn(float SignedAngleToTarget, bool IsStanding, bool* Result);
	void ReceiveDeathBlow(ENUM_DeathBlowType BodyPart, bool* Result);
	void ReceiveImpact(const struct FVector& Impulse, const struct FVector& ImpactLocation, const struct FVector& ImpactNormal, class FName BoneName, const class FString& DamageType, float DamageAmount, float FlinchTime, bool* Result);
	void SetIsAlive(bool IsAlive, bool* Result);
	void SetMovementParameters(const struct FVector& Velocity, const struct FRotator& Rotation, const struct FRotator& DesiredRotation, bool* Result);
	void SetLookAtAlpha(float Alpha, bool* Result);
	void SetLookAtLocation(const struct FVector& Location, bool* Result);
	void GetAimTarget(class UOBJ_EnemyTarget_C** Target);
	void SetSprintEnabled(bool SprintEnabled, bool* Result);
	void SetStunnedSequence(class UAnimSequence* StunnedSequence, bool* Result);
	void IsStunned(bool* Result);
	void SetVoiceAmplitude(float VoiceAmplitude, bool* Result);

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"ANIMBP_CyberBully_C">();
	}
	static class UANIMBP_CyberBully_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<UANIMBP_CyberBully_C>();
	}
};
static_assert(alignof(UANIMBP_CyberBully_C) == 0x000010, "Wrong alignment on UANIMBP_CyberBully_C");
static_assert(sizeof(UANIMBP_CyberBully_C) == 0x0008B0, "Wrong size on UANIMBP_CyberBully_C");
static_assert(offsetof(UANIMBP_CyberBully_C, UberGraphFrame) == 0x0002C0, "Member 'UANIMBP_CyberBully_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(UANIMBP_CyberBully_C, AnimGraphNode_Root) == 0x0002C8, "Member 'UANIMBP_CyberBully_C::AnimGraphNode_Root' has a wrong offset!");
static_assert(offsetof(UANIMBP_CyberBully_C, AnimGraphNode_SequencePlayer) == 0x0002F8, "Member 'UANIMBP_CyberBully_C::AnimGraphNode_SequencePlayer' has a wrong offset!");
static_assert(offsetof(UANIMBP_CyberBully_C, AnimGraphNode_Slot) == 0x000378, "Member 'UANIMBP_CyberBully_C::AnimGraphNode_Slot' has a wrong offset!");
static_assert(offsetof(UANIMBP_CyberBully_C, AnimGraphNode_LocalToComponentSpace_1) == 0x0003C0, "Member 'UANIMBP_CyberBully_C::AnimGraphNode_LocalToComponentSpace_1' has a wrong offset!");
static_assert(offsetof(UANIMBP_CyberBully_C, AnimGraphNode_ModifyBone_1) == 0x0003E0, "Member 'UANIMBP_CyberBully_C::AnimGraphNode_ModifyBone_1' has a wrong offset!");
static_assert(offsetof(UANIMBP_CyberBully_C, AnimGraphNode_ComponentToLocalSpace_1) == 0x0004E8, "Member 'UANIMBP_CyberBully_C::AnimGraphNode_ComponentToLocalSpace_1' has a wrong offset!");
static_assert(offsetof(UANIMBP_CyberBully_C, AnimGraphNode_ModifyBone) == 0x000508, "Member 'UANIMBP_CyberBully_C::AnimGraphNode_ModifyBone' has a wrong offset!");
static_assert(offsetof(UANIMBP_CyberBully_C, AnimGraphNode_BlendListByBool) == 0x000610, "Member 'UANIMBP_CyberBully_C::AnimGraphNode_BlendListByBool' has a wrong offset!");
static_assert(offsetof(UANIMBP_CyberBully_C, AnimGraphNode_SaveCachedPose) == 0x0006B0, "Member 'UANIMBP_CyberBully_C::AnimGraphNode_SaveCachedPose' has a wrong offset!");
static_assert(offsetof(UANIMBP_CyberBully_C, AnimGraphNode_UseCachedPose_1) == 0x000808, "Member 'UANIMBP_CyberBully_C::AnimGraphNode_UseCachedPose_1' has a wrong offset!");
static_assert(offsetof(UANIMBP_CyberBully_C, AnimGraphNode_UseCachedPose) == 0x000830, "Member 'UANIMBP_CyberBully_C::AnimGraphNode_UseCachedPose' has a wrong offset!");
static_assert(offsetof(UANIMBP_CyberBully_C, AnimGraphNode_LocalToComponentSpace) == 0x000858, "Member 'UANIMBP_CyberBully_C::AnimGraphNode_LocalToComponentSpace' has a wrong offset!");
static_assert(offsetof(UANIMBP_CyberBully_C, AnimGraphNode_ComponentToLocalSpace) == 0x000878, "Member 'UANIMBP_CyberBully_C::AnimGraphNode_ComponentToLocalSpace' has a wrong offset!");
static_assert(offsetof(UANIMBP_CyberBully_C, IdleSequence) == 0x000898, "Member 'UANIMBP_CyberBully_C::IdleSequence' has a wrong offset!");
static_assert(offsetof(UANIMBP_CyberBully_C, SpinProgress) == 0x0008A0, "Member 'UANIMBP_CyberBully_C::SpinProgress' has a wrong offset!");
static_assert(offsetof(UANIMBP_CyberBully_C, SpinSpeed) == 0x0008A4, "Member 'UANIMBP_CyberBully_C::SpinSpeed' has a wrong offset!");
static_assert(offsetof(UANIMBP_CyberBully_C, SpinSpeedTarget) == 0x0008A8, "Member 'UANIMBP_CyberBully_C::SpinSpeedTarget' has a wrong offset!");
static_assert(offsetof(UANIMBP_CyberBully_C, Stance) == 0x0008AC, "Member 'UANIMBP_CyberBully_C::Stance' has a wrong offset!");
static_assert(offsetof(UANIMBP_CyberBully_C, ProjectileVisible) == 0x0008AD, "Member 'UANIMBP_CyberBully_C::ProjectileVisible' has a wrong offset!");

}

