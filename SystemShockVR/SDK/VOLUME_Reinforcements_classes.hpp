#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: VOLUME_Reinforcements

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "Engine_classes.hpp"
#include "STRUCT_EnemyClassWeight_structs.hpp"


namespace SDK
{

// BlueprintGeneratedClass VOLUME_Reinforcements.VOLUME_Reinforcements_C
// 0x0078 (0x0298 - 0x0220)
class AVOLUME_Reinforcements_C final : public AActor
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x0220(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	class UBillboardComponent*                    Billboard;                                         // 0x0228(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UBoxComponent*                          Volume;                                            // 0x0230(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	TArray<struct FSTRUCT_EnemyClassWeight>       EnemyTypes;                                        // 0x0238(0x0010)(Edit, BlueprintVisible)
	TArray<class AINTERACT_LogisticsLift_C*>      LogisticsLifts;                                    // 0x0248(0x0010)(Edit, BlueprintVisible, DisableEditOnTemplate)
	TArray<class APAWN_Enemy_C*>                  SpawnedEnemies;                                    // 0x0258(0x0010)(Edit, BlueprintVisible, DisableEditOnTemplate, DisableEditOnInstance, SaveGame)
	TSoftClassPtr<class UClass>                   PreferredSpawnEnemyClass;                          // 0x0268(0x0028)(Edit, BlueprintVisible, DisableEditOnInstance, HasGetValueTypeHash)
	float                                         NextReinforcementTimestamp;                        // 0x0290(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, SaveGame, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         ReinforcementCooldown;                             // 0x0294(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

public:
	void ExecuteUbergraph_VOLUME_Reinforcements(int32 EntryPoint);
	void ReceiveEndPlay(EEndPlayReason EndPlayReason);
	void ReceiveBeginPlay();
	void IsReinforcementCooldownFinished(bool* Result);
	void IsVolumePerceptibleForAmbush(class APAWN_Hacker_Simple_C* HackerPawn, bool* Result);
	void GetReinforcementBox(struct FBox* Result);
	void HasAnyFunctionalLogisticsLifts(bool* Result);
	void CanTriggerAmbush(bool* Result);
	void CanSpawnAsEcology(TSoftClassPtr<class UClass> EnemyClass, bool* Result);
	void InitializeReinforcementVolume();
	void OnEnemySpawned(class APAWN_Enemy_C* Enemy);
	void SpawnReinforcementsAsEcology(TSoftClassPtr<class UClass> PreferredEnemyClass, int32 DesiredCount, int32* CountSpawned);
	void EVENT_OnSpawnedEnemyDied(class APAWN_SystemShockCharacter_C* Character);
	void EVENT_OnSpawnEcologyReinforcements(bool bResult, const TArray<struct FVector4>& WeightedWorldLocations);
	void IsReinforcementVolumeOccupied(bool IgnorePlayer, bool* Result);
	void IsHackerNearAnyLogisticsLift(class APAWN_Hacker_Simple_C* HackerPawn, bool* Result);
	void HasNearbyEnemyOfClass(TSoftClassPtr<class UClass> EnemyClass, bool* Result);
	void HasAnyNearbySpawnedEnemies(bool* Result);
	void GetEnemyClassToSpawn(TSoftClassPtr<class UClass>* EnemyClass);
	void GetReinforcedEnemyName(class UClass* EnemyClass, class FName* EnemyName);
	void SpawnReinforcementsAsAmbush(TSoftClassPtr<class UClass> PreferredEnemyClass, int32 DesiredCount, int32* CountSpawned);
	void EVENT_OnSpawnAmbushEnemy(class AINTERACT_LogisticsLift_C* LogisticsLift, class AActor* CargoActor);
	bool ShouldSaveActor(struct FStreamingSaveGameActorParams* Params_0);
	bool ReceivePendingBodyTransforms(class USkeletalMeshComponent* SkeletalMeshComponent, const TArray<struct FTransform>& BodyTransforms);
	bool ReceivePendingCharacterVelocity(const struct FVector& Velocity);

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"VOLUME_Reinforcements_C">();
	}
	static class AVOLUME_Reinforcements_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<AVOLUME_Reinforcements_C>();
	}
};
static_assert(alignof(AVOLUME_Reinforcements_C) == 0x000008, "Wrong alignment on AVOLUME_Reinforcements_C");
static_assert(sizeof(AVOLUME_Reinforcements_C) == 0x000298, "Wrong size on AVOLUME_Reinforcements_C");
static_assert(offsetof(AVOLUME_Reinforcements_C, UberGraphFrame) == 0x000220, "Member 'AVOLUME_Reinforcements_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(AVOLUME_Reinforcements_C, Billboard) == 0x000228, "Member 'AVOLUME_Reinforcements_C::Billboard' has a wrong offset!");
static_assert(offsetof(AVOLUME_Reinforcements_C, Volume) == 0x000230, "Member 'AVOLUME_Reinforcements_C::Volume' has a wrong offset!");
static_assert(offsetof(AVOLUME_Reinforcements_C, EnemyTypes) == 0x000238, "Member 'AVOLUME_Reinforcements_C::EnemyTypes' has a wrong offset!");
static_assert(offsetof(AVOLUME_Reinforcements_C, LogisticsLifts) == 0x000248, "Member 'AVOLUME_Reinforcements_C::LogisticsLifts' has a wrong offset!");
static_assert(offsetof(AVOLUME_Reinforcements_C, SpawnedEnemies) == 0x000258, "Member 'AVOLUME_Reinforcements_C::SpawnedEnemies' has a wrong offset!");
static_assert(offsetof(AVOLUME_Reinforcements_C, PreferredSpawnEnemyClass) == 0x000268, "Member 'AVOLUME_Reinforcements_C::PreferredSpawnEnemyClass' has a wrong offset!");
static_assert(offsetof(AVOLUME_Reinforcements_C, NextReinforcementTimestamp) == 0x000290, "Member 'AVOLUME_Reinforcements_C::NextReinforcementTimestamp' has a wrong offset!");
static_assert(offsetof(AVOLUME_Reinforcements_C, ReinforcementCooldown) == 0x000294, "Member 'AVOLUME_Reinforcements_C::ReinforcementCooldown' has a wrong offset!");

}

