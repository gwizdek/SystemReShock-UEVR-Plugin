#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: TASK_MobileLaser_Beam_CloseRange

#include "Basic.hpp"

#include "CoreUObject_structs.hpp"
#include "Engine_structs.hpp"


namespace SDK::Params
{

// Function TASK_MobileLaser_Beam_CloseRange.TASK_MobileLaser_Beam_CloseRange_C.ExecuteUbergraph_TASK_MobileLaser_Beam_CloseRange
// 0x0050 (0x0050 - 0x0000)
struct TASK_MobileLaser_Beam_CloseRange_C_ExecuteUbergraph_TASK_MobileLaser_Beam_CloseRange final
{
public:
	int32                                         EntryPoint;                                        // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_RandomBool_ReturnValue;                   // 0x0004(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Temp_bool_Variable;                                // 0x0005(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_6[0x2];                                        // 0x0006(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Temp_int_Variable;                                 // 0x0008(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Variable_1;                               // 0x000C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Variable_1;                              // 0x0010(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_11[0x3];                                       // 0x0011(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Temp_int_Variable_2;                               // 0x0014(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Variable_3;                               // 0x0018(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1C[0x4];                                       // 0x001C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class AAIController*                          K2Node_Event_OwnerController;                      // 0x0020(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class APawn*                                  K2Node_Event_ControlledPawn;                       // 0x0028(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         K2Node_Select_Default;                             // 0x0030(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_RandomBool_ReturnValue_1;                 // 0x0034(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_35[0x3];                                       // 0x0035(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         K2Node_Select_Default_1;                           // 0x0038(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FIntPoint                              K2Node_MakeStruct_IntPoint;                        // 0x003C(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector2D                              CallFunc_Conv_IntPointToVector2D_ReturnValue;      // 0x0044(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(TASK_MobileLaser_Beam_CloseRange_C_ExecuteUbergraph_TASK_MobileLaser_Beam_CloseRange) == 0x000008, "Wrong alignment on TASK_MobileLaser_Beam_CloseRange_C_ExecuteUbergraph_TASK_MobileLaser_Beam_CloseRange");
static_assert(sizeof(TASK_MobileLaser_Beam_CloseRange_C_ExecuteUbergraph_TASK_MobileLaser_Beam_CloseRange) == 0x000050, "Wrong size on TASK_MobileLaser_Beam_CloseRange_C_ExecuteUbergraph_TASK_MobileLaser_Beam_CloseRange");
static_assert(offsetof(TASK_MobileLaser_Beam_CloseRange_C_ExecuteUbergraph_TASK_MobileLaser_Beam_CloseRange, EntryPoint) == 0x000000, "Member 'TASK_MobileLaser_Beam_CloseRange_C_ExecuteUbergraph_TASK_MobileLaser_Beam_CloseRange::EntryPoint' has a wrong offset!");
static_assert(offsetof(TASK_MobileLaser_Beam_CloseRange_C_ExecuteUbergraph_TASK_MobileLaser_Beam_CloseRange, CallFunc_RandomBool_ReturnValue) == 0x000004, "Member 'TASK_MobileLaser_Beam_CloseRange_C_ExecuteUbergraph_TASK_MobileLaser_Beam_CloseRange::CallFunc_RandomBool_ReturnValue' has a wrong offset!");
static_assert(offsetof(TASK_MobileLaser_Beam_CloseRange_C_ExecuteUbergraph_TASK_MobileLaser_Beam_CloseRange, Temp_bool_Variable) == 0x000005, "Member 'TASK_MobileLaser_Beam_CloseRange_C_ExecuteUbergraph_TASK_MobileLaser_Beam_CloseRange::Temp_bool_Variable' has a wrong offset!");
static_assert(offsetof(TASK_MobileLaser_Beam_CloseRange_C_ExecuteUbergraph_TASK_MobileLaser_Beam_CloseRange, Temp_int_Variable) == 0x000008, "Member 'TASK_MobileLaser_Beam_CloseRange_C_ExecuteUbergraph_TASK_MobileLaser_Beam_CloseRange::Temp_int_Variable' has a wrong offset!");
static_assert(offsetof(TASK_MobileLaser_Beam_CloseRange_C_ExecuteUbergraph_TASK_MobileLaser_Beam_CloseRange, Temp_int_Variable_1) == 0x00000C, "Member 'TASK_MobileLaser_Beam_CloseRange_C_ExecuteUbergraph_TASK_MobileLaser_Beam_CloseRange::Temp_int_Variable_1' has a wrong offset!");
static_assert(offsetof(TASK_MobileLaser_Beam_CloseRange_C_ExecuteUbergraph_TASK_MobileLaser_Beam_CloseRange, Temp_bool_Variable_1) == 0x000010, "Member 'TASK_MobileLaser_Beam_CloseRange_C_ExecuteUbergraph_TASK_MobileLaser_Beam_CloseRange::Temp_bool_Variable_1' has a wrong offset!");
static_assert(offsetof(TASK_MobileLaser_Beam_CloseRange_C_ExecuteUbergraph_TASK_MobileLaser_Beam_CloseRange, Temp_int_Variable_2) == 0x000014, "Member 'TASK_MobileLaser_Beam_CloseRange_C_ExecuteUbergraph_TASK_MobileLaser_Beam_CloseRange::Temp_int_Variable_2' has a wrong offset!");
static_assert(offsetof(TASK_MobileLaser_Beam_CloseRange_C_ExecuteUbergraph_TASK_MobileLaser_Beam_CloseRange, Temp_int_Variable_3) == 0x000018, "Member 'TASK_MobileLaser_Beam_CloseRange_C_ExecuteUbergraph_TASK_MobileLaser_Beam_CloseRange::Temp_int_Variable_3' has a wrong offset!");
static_assert(offsetof(TASK_MobileLaser_Beam_CloseRange_C_ExecuteUbergraph_TASK_MobileLaser_Beam_CloseRange, K2Node_Event_OwnerController) == 0x000020, "Member 'TASK_MobileLaser_Beam_CloseRange_C_ExecuteUbergraph_TASK_MobileLaser_Beam_CloseRange::K2Node_Event_OwnerController' has a wrong offset!");
static_assert(offsetof(TASK_MobileLaser_Beam_CloseRange_C_ExecuteUbergraph_TASK_MobileLaser_Beam_CloseRange, K2Node_Event_ControlledPawn) == 0x000028, "Member 'TASK_MobileLaser_Beam_CloseRange_C_ExecuteUbergraph_TASK_MobileLaser_Beam_CloseRange::K2Node_Event_ControlledPawn' has a wrong offset!");
static_assert(offsetof(TASK_MobileLaser_Beam_CloseRange_C_ExecuteUbergraph_TASK_MobileLaser_Beam_CloseRange, K2Node_Select_Default) == 0x000030, "Member 'TASK_MobileLaser_Beam_CloseRange_C_ExecuteUbergraph_TASK_MobileLaser_Beam_CloseRange::K2Node_Select_Default' has a wrong offset!");
static_assert(offsetof(TASK_MobileLaser_Beam_CloseRange_C_ExecuteUbergraph_TASK_MobileLaser_Beam_CloseRange, CallFunc_RandomBool_ReturnValue_1) == 0x000034, "Member 'TASK_MobileLaser_Beam_CloseRange_C_ExecuteUbergraph_TASK_MobileLaser_Beam_CloseRange::CallFunc_RandomBool_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(TASK_MobileLaser_Beam_CloseRange_C_ExecuteUbergraph_TASK_MobileLaser_Beam_CloseRange, K2Node_Select_Default_1) == 0x000038, "Member 'TASK_MobileLaser_Beam_CloseRange_C_ExecuteUbergraph_TASK_MobileLaser_Beam_CloseRange::K2Node_Select_Default_1' has a wrong offset!");
static_assert(offsetof(TASK_MobileLaser_Beam_CloseRange_C_ExecuteUbergraph_TASK_MobileLaser_Beam_CloseRange, K2Node_MakeStruct_IntPoint) == 0x00003C, "Member 'TASK_MobileLaser_Beam_CloseRange_C_ExecuteUbergraph_TASK_MobileLaser_Beam_CloseRange::K2Node_MakeStruct_IntPoint' has a wrong offset!");
static_assert(offsetof(TASK_MobileLaser_Beam_CloseRange_C_ExecuteUbergraph_TASK_MobileLaser_Beam_CloseRange, CallFunc_Conv_IntPointToVector2D_ReturnValue) == 0x000044, "Member 'TASK_MobileLaser_Beam_CloseRange_C_ExecuteUbergraph_TASK_MobileLaser_Beam_CloseRange::CallFunc_Conv_IntPointToVector2D_ReturnValue' has a wrong offset!");

// Function TASK_MobileLaser_Beam_CloseRange.TASK_MobileLaser_Beam_CloseRange_C.ReceiveExecuteAI
// 0x0010 (0x0010 - 0x0000)
struct TASK_MobileLaser_Beam_CloseRange_C_ReceiveExecuteAI final
{
public:
	class AAIController*                          OwnerController;                                   // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class APawn*                                  ControlledPawn;                                    // 0x0008(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(TASK_MobileLaser_Beam_CloseRange_C_ReceiveExecuteAI) == 0x000008, "Wrong alignment on TASK_MobileLaser_Beam_CloseRange_C_ReceiveExecuteAI");
static_assert(sizeof(TASK_MobileLaser_Beam_CloseRange_C_ReceiveExecuteAI) == 0x000010, "Wrong size on TASK_MobileLaser_Beam_CloseRange_C_ReceiveExecuteAI");
static_assert(offsetof(TASK_MobileLaser_Beam_CloseRange_C_ReceiveExecuteAI, OwnerController) == 0x000000, "Member 'TASK_MobileLaser_Beam_CloseRange_C_ReceiveExecuteAI::OwnerController' has a wrong offset!");
static_assert(offsetof(TASK_MobileLaser_Beam_CloseRange_C_ReceiveExecuteAI, ControlledPawn) == 0x000008, "Member 'TASK_MobileLaser_Beam_CloseRange_C_ReceiveExecuteAI::ControlledPawn' has a wrong offset!");

// Function TASK_MobileLaser_Beam_CloseRange.TASK_MobileLaser_Beam_CloseRange_C.UpdateBeamOn
// 0x01D0 (0x01D0 - 0x0000)
struct TASK_MobileLaser_Beam_CloseRange_C_UpdateBeamOn final
{
public:
	float                                         DeltaSeconds;                                      // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                FrameDirection;                                    // 0x0004(0x000C)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                RotationAxis;                                      // 0x0010(0x000C)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                LocalTargetDirection;                              // 0x001C(0x000C)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                LocalSourceDirection;                              // 0x0028(0x000C)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         SignedAngleBetween;                                // 0x0034(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector2D                              SignedSwayAmount;                                  // 0x0038(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         SignedSwayYawAmount;                               // 0x0040(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Progress;                                          // 0x0044(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                TargetLocation;                                    // 0x0048(0x000C)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                BarrelLocation;                                    // 0x0054(0x000C)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TArray<struct FHitResult>                     CallFunc_BeamDamageTraceFromSockets_HitResults;    // 0x0060(0x0010)(ReferenceParm, ContainsInstancedReference)
	struct FVector                                CallFunc_Get_Target_Direction_Direction;           // 0x0070(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector2D_X;                          // 0x007C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector2D_Y;                          // 0x0080(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector2D_X_1;                        // 0x0084(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector2D_Y_1;                        // 0x0088(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_GetPI_ReturnValue;                        // 0x008C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Multiply_FloatFloat_ReturnValue;          // 0x0090(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector2D_X_2;                        // 0x0094(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector2D_Y_2;                        // 0x0098(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Multiply_FloatFloat_ReturnValue_1;        // 0x009C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Multiply_FloatFloat_ReturnValue_2;        // 0x00A0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Sin_ReturnValue;                          // 0x00A4(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Multiply_FloatFloat_ReturnValue_3;        // 0x00A8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Multiply_FloatFloat_ReturnValue_4;        // 0x00AC(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_GetActorUpVector_ReturnValue;             // 0x00B0(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector2D_X_3;                        // 0x00BC(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector2D_Y_3;                        // 0x00C0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Multiply_VectorFloat_ReturnValue;         // 0x00C4(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Multiply_FloatFloat_ReturnValue_5;        // 0x00D0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Multiply_FloatFloat_ReturnValue_6;        // 0x00D4(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_GetPI_ReturnValue_1;                      // 0x00D8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Multiply_FloatFloat_ReturnValue_7;        // 0x00DC(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_GetActorRightVector_ReturnValue;          // 0x00E0(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Multiply_FloatFloat_ReturnValue_8;        // 0x00EC(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Multiply_VectorFloat_ReturnValue_1;       // 0x00F0(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Sin_ReturnValue_1;                        // 0x00FC(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Multiply_FloatFloat_ReturnValue_9;        // 0x0100(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Multiply_FloatFloat_ReturnValue_10;       // 0x0104(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector2D                              CallFunc_MakeVector2D_ReturnValue;                 // 0x0108(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_GetLocalUpDirection_UpDirection;          // 0x0110(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_SignOfFloat_ReturnValue;                  // 0x011C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Multiply_FloatFloat_ReturnValue_11;       // 0x0120(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Multiply_FloatFloat_ReturnValue_12;       // 0x0124(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_FClamp_ReturnValue;                       // 0x0128(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_VectorVector_ReturnValue;      // 0x012C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_12D[0x3];                                      // 0x012D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_SignedAngleBetweenOnPlane_ReturnValue;    // 0x0130(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_RotateAngleAxis_ReturnValue;              // 0x0134(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_ClampDirection_ClampedLocalDirection;     // 0x0140(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Cross_VectorVector_ReturnValue;           // 0x014C(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Normal_ReturnValue;                       // 0x0158(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Add_VectorVector_ReturnValue;             // 0x0164(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Add_VectorVector_ReturnValue_1;           // 0x0170(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_GetDirectionUnitVector_ReturnValue;       // 0x017C(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_GreaterEqual_FloatFloat_ReturnValue;      // 0x0188(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_189[0x3];                                      // 0x0189(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                CallFunc_WorldDirectionToLocalDirection_LocalDirection; // 0x018C(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_GetPlayTimeInSeconds_ReturnValue;         // 0x0198(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Subtract_FloatFloat_ReturnValue;          // 0x019C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Divide_FloatFloat_ReturnValue;            // 0x01A0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1A4[0x4];                                      // 0x01A4(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UOBJ_EnemyTarget_C*                     CallFunc_GetTarget_Target;                         // 0x01A8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_FClamp_ReturnValue_1;                     // 0x01B0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Get_Target_Location_Location;             // 0x01B4(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_GetBarrelWorldLocation_BarrelLocation;    // 0x01C0(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(TASK_MobileLaser_Beam_CloseRange_C_UpdateBeamOn) == 0x000008, "Wrong alignment on TASK_MobileLaser_Beam_CloseRange_C_UpdateBeamOn");
static_assert(sizeof(TASK_MobileLaser_Beam_CloseRange_C_UpdateBeamOn) == 0x0001D0, "Wrong size on TASK_MobileLaser_Beam_CloseRange_C_UpdateBeamOn");
static_assert(offsetof(TASK_MobileLaser_Beam_CloseRange_C_UpdateBeamOn, DeltaSeconds) == 0x000000, "Member 'TASK_MobileLaser_Beam_CloseRange_C_UpdateBeamOn::DeltaSeconds' has a wrong offset!");
static_assert(offsetof(TASK_MobileLaser_Beam_CloseRange_C_UpdateBeamOn, FrameDirection) == 0x000004, "Member 'TASK_MobileLaser_Beam_CloseRange_C_UpdateBeamOn::FrameDirection' has a wrong offset!");
static_assert(offsetof(TASK_MobileLaser_Beam_CloseRange_C_UpdateBeamOn, RotationAxis) == 0x000010, "Member 'TASK_MobileLaser_Beam_CloseRange_C_UpdateBeamOn::RotationAxis' has a wrong offset!");
static_assert(offsetof(TASK_MobileLaser_Beam_CloseRange_C_UpdateBeamOn, LocalTargetDirection) == 0x00001C, "Member 'TASK_MobileLaser_Beam_CloseRange_C_UpdateBeamOn::LocalTargetDirection' has a wrong offset!");
static_assert(offsetof(TASK_MobileLaser_Beam_CloseRange_C_UpdateBeamOn, LocalSourceDirection) == 0x000028, "Member 'TASK_MobileLaser_Beam_CloseRange_C_UpdateBeamOn::LocalSourceDirection' has a wrong offset!");
static_assert(offsetof(TASK_MobileLaser_Beam_CloseRange_C_UpdateBeamOn, SignedAngleBetween) == 0x000034, "Member 'TASK_MobileLaser_Beam_CloseRange_C_UpdateBeamOn::SignedAngleBetween' has a wrong offset!");
static_assert(offsetof(TASK_MobileLaser_Beam_CloseRange_C_UpdateBeamOn, SignedSwayAmount) == 0x000038, "Member 'TASK_MobileLaser_Beam_CloseRange_C_UpdateBeamOn::SignedSwayAmount' has a wrong offset!");
static_assert(offsetof(TASK_MobileLaser_Beam_CloseRange_C_UpdateBeamOn, SignedSwayYawAmount) == 0x000040, "Member 'TASK_MobileLaser_Beam_CloseRange_C_UpdateBeamOn::SignedSwayYawAmount' has a wrong offset!");
static_assert(offsetof(TASK_MobileLaser_Beam_CloseRange_C_UpdateBeamOn, Progress) == 0x000044, "Member 'TASK_MobileLaser_Beam_CloseRange_C_UpdateBeamOn::Progress' has a wrong offset!");
static_assert(offsetof(TASK_MobileLaser_Beam_CloseRange_C_UpdateBeamOn, TargetLocation) == 0x000048, "Member 'TASK_MobileLaser_Beam_CloseRange_C_UpdateBeamOn::TargetLocation' has a wrong offset!");
static_assert(offsetof(TASK_MobileLaser_Beam_CloseRange_C_UpdateBeamOn, BarrelLocation) == 0x000054, "Member 'TASK_MobileLaser_Beam_CloseRange_C_UpdateBeamOn::BarrelLocation' has a wrong offset!");
static_assert(offsetof(TASK_MobileLaser_Beam_CloseRange_C_UpdateBeamOn, CallFunc_BeamDamageTraceFromSockets_HitResults) == 0x000060, "Member 'TASK_MobileLaser_Beam_CloseRange_C_UpdateBeamOn::CallFunc_BeamDamageTraceFromSockets_HitResults' has a wrong offset!");
static_assert(offsetof(TASK_MobileLaser_Beam_CloseRange_C_UpdateBeamOn, CallFunc_Get_Target_Direction_Direction) == 0x000070, "Member 'TASK_MobileLaser_Beam_CloseRange_C_UpdateBeamOn::CallFunc_Get_Target_Direction_Direction' has a wrong offset!");
static_assert(offsetof(TASK_MobileLaser_Beam_CloseRange_C_UpdateBeamOn, CallFunc_BreakVector2D_X) == 0x00007C, "Member 'TASK_MobileLaser_Beam_CloseRange_C_UpdateBeamOn::CallFunc_BreakVector2D_X' has a wrong offset!");
static_assert(offsetof(TASK_MobileLaser_Beam_CloseRange_C_UpdateBeamOn, CallFunc_BreakVector2D_Y) == 0x000080, "Member 'TASK_MobileLaser_Beam_CloseRange_C_UpdateBeamOn::CallFunc_BreakVector2D_Y' has a wrong offset!");
static_assert(offsetof(TASK_MobileLaser_Beam_CloseRange_C_UpdateBeamOn, CallFunc_BreakVector2D_X_1) == 0x000084, "Member 'TASK_MobileLaser_Beam_CloseRange_C_UpdateBeamOn::CallFunc_BreakVector2D_X_1' has a wrong offset!");
static_assert(offsetof(TASK_MobileLaser_Beam_CloseRange_C_UpdateBeamOn, CallFunc_BreakVector2D_Y_1) == 0x000088, "Member 'TASK_MobileLaser_Beam_CloseRange_C_UpdateBeamOn::CallFunc_BreakVector2D_Y_1' has a wrong offset!");
static_assert(offsetof(TASK_MobileLaser_Beam_CloseRange_C_UpdateBeamOn, CallFunc_GetPI_ReturnValue) == 0x00008C, "Member 'TASK_MobileLaser_Beam_CloseRange_C_UpdateBeamOn::CallFunc_GetPI_ReturnValue' has a wrong offset!");
static_assert(offsetof(TASK_MobileLaser_Beam_CloseRange_C_UpdateBeamOn, CallFunc_Multiply_FloatFloat_ReturnValue) == 0x000090, "Member 'TASK_MobileLaser_Beam_CloseRange_C_UpdateBeamOn::CallFunc_Multiply_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(TASK_MobileLaser_Beam_CloseRange_C_UpdateBeamOn, CallFunc_BreakVector2D_X_2) == 0x000094, "Member 'TASK_MobileLaser_Beam_CloseRange_C_UpdateBeamOn::CallFunc_BreakVector2D_X_2' has a wrong offset!");
static_assert(offsetof(TASK_MobileLaser_Beam_CloseRange_C_UpdateBeamOn, CallFunc_BreakVector2D_Y_2) == 0x000098, "Member 'TASK_MobileLaser_Beam_CloseRange_C_UpdateBeamOn::CallFunc_BreakVector2D_Y_2' has a wrong offset!");
static_assert(offsetof(TASK_MobileLaser_Beam_CloseRange_C_UpdateBeamOn, CallFunc_Multiply_FloatFloat_ReturnValue_1) == 0x00009C, "Member 'TASK_MobileLaser_Beam_CloseRange_C_UpdateBeamOn::CallFunc_Multiply_FloatFloat_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(TASK_MobileLaser_Beam_CloseRange_C_UpdateBeamOn, CallFunc_Multiply_FloatFloat_ReturnValue_2) == 0x0000A0, "Member 'TASK_MobileLaser_Beam_CloseRange_C_UpdateBeamOn::CallFunc_Multiply_FloatFloat_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(TASK_MobileLaser_Beam_CloseRange_C_UpdateBeamOn, CallFunc_Sin_ReturnValue) == 0x0000A4, "Member 'TASK_MobileLaser_Beam_CloseRange_C_UpdateBeamOn::CallFunc_Sin_ReturnValue' has a wrong offset!");
static_assert(offsetof(TASK_MobileLaser_Beam_CloseRange_C_UpdateBeamOn, CallFunc_Multiply_FloatFloat_ReturnValue_3) == 0x0000A8, "Member 'TASK_MobileLaser_Beam_CloseRange_C_UpdateBeamOn::CallFunc_Multiply_FloatFloat_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(TASK_MobileLaser_Beam_CloseRange_C_UpdateBeamOn, CallFunc_Multiply_FloatFloat_ReturnValue_4) == 0x0000AC, "Member 'TASK_MobileLaser_Beam_CloseRange_C_UpdateBeamOn::CallFunc_Multiply_FloatFloat_ReturnValue_4' has a wrong offset!");
static_assert(offsetof(TASK_MobileLaser_Beam_CloseRange_C_UpdateBeamOn, CallFunc_GetActorUpVector_ReturnValue) == 0x0000B0, "Member 'TASK_MobileLaser_Beam_CloseRange_C_UpdateBeamOn::CallFunc_GetActorUpVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(TASK_MobileLaser_Beam_CloseRange_C_UpdateBeamOn, CallFunc_BreakVector2D_X_3) == 0x0000BC, "Member 'TASK_MobileLaser_Beam_CloseRange_C_UpdateBeamOn::CallFunc_BreakVector2D_X_3' has a wrong offset!");
static_assert(offsetof(TASK_MobileLaser_Beam_CloseRange_C_UpdateBeamOn, CallFunc_BreakVector2D_Y_3) == 0x0000C0, "Member 'TASK_MobileLaser_Beam_CloseRange_C_UpdateBeamOn::CallFunc_BreakVector2D_Y_3' has a wrong offset!");
static_assert(offsetof(TASK_MobileLaser_Beam_CloseRange_C_UpdateBeamOn, CallFunc_Multiply_VectorFloat_ReturnValue) == 0x0000C4, "Member 'TASK_MobileLaser_Beam_CloseRange_C_UpdateBeamOn::CallFunc_Multiply_VectorFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(TASK_MobileLaser_Beam_CloseRange_C_UpdateBeamOn, CallFunc_Multiply_FloatFloat_ReturnValue_5) == 0x0000D0, "Member 'TASK_MobileLaser_Beam_CloseRange_C_UpdateBeamOn::CallFunc_Multiply_FloatFloat_ReturnValue_5' has a wrong offset!");
static_assert(offsetof(TASK_MobileLaser_Beam_CloseRange_C_UpdateBeamOn, CallFunc_Multiply_FloatFloat_ReturnValue_6) == 0x0000D4, "Member 'TASK_MobileLaser_Beam_CloseRange_C_UpdateBeamOn::CallFunc_Multiply_FloatFloat_ReturnValue_6' has a wrong offset!");
static_assert(offsetof(TASK_MobileLaser_Beam_CloseRange_C_UpdateBeamOn, CallFunc_GetPI_ReturnValue_1) == 0x0000D8, "Member 'TASK_MobileLaser_Beam_CloseRange_C_UpdateBeamOn::CallFunc_GetPI_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(TASK_MobileLaser_Beam_CloseRange_C_UpdateBeamOn, CallFunc_Multiply_FloatFloat_ReturnValue_7) == 0x0000DC, "Member 'TASK_MobileLaser_Beam_CloseRange_C_UpdateBeamOn::CallFunc_Multiply_FloatFloat_ReturnValue_7' has a wrong offset!");
static_assert(offsetof(TASK_MobileLaser_Beam_CloseRange_C_UpdateBeamOn, CallFunc_GetActorRightVector_ReturnValue) == 0x0000E0, "Member 'TASK_MobileLaser_Beam_CloseRange_C_UpdateBeamOn::CallFunc_GetActorRightVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(TASK_MobileLaser_Beam_CloseRange_C_UpdateBeamOn, CallFunc_Multiply_FloatFloat_ReturnValue_8) == 0x0000EC, "Member 'TASK_MobileLaser_Beam_CloseRange_C_UpdateBeamOn::CallFunc_Multiply_FloatFloat_ReturnValue_8' has a wrong offset!");
static_assert(offsetof(TASK_MobileLaser_Beam_CloseRange_C_UpdateBeamOn, CallFunc_Multiply_VectorFloat_ReturnValue_1) == 0x0000F0, "Member 'TASK_MobileLaser_Beam_CloseRange_C_UpdateBeamOn::CallFunc_Multiply_VectorFloat_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(TASK_MobileLaser_Beam_CloseRange_C_UpdateBeamOn, CallFunc_Sin_ReturnValue_1) == 0x0000FC, "Member 'TASK_MobileLaser_Beam_CloseRange_C_UpdateBeamOn::CallFunc_Sin_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(TASK_MobileLaser_Beam_CloseRange_C_UpdateBeamOn, CallFunc_Multiply_FloatFloat_ReturnValue_9) == 0x000100, "Member 'TASK_MobileLaser_Beam_CloseRange_C_UpdateBeamOn::CallFunc_Multiply_FloatFloat_ReturnValue_9' has a wrong offset!");
static_assert(offsetof(TASK_MobileLaser_Beam_CloseRange_C_UpdateBeamOn, CallFunc_Multiply_FloatFloat_ReturnValue_10) == 0x000104, "Member 'TASK_MobileLaser_Beam_CloseRange_C_UpdateBeamOn::CallFunc_Multiply_FloatFloat_ReturnValue_10' has a wrong offset!");
static_assert(offsetof(TASK_MobileLaser_Beam_CloseRange_C_UpdateBeamOn, CallFunc_MakeVector2D_ReturnValue) == 0x000108, "Member 'TASK_MobileLaser_Beam_CloseRange_C_UpdateBeamOn::CallFunc_MakeVector2D_ReturnValue' has a wrong offset!");
static_assert(offsetof(TASK_MobileLaser_Beam_CloseRange_C_UpdateBeamOn, CallFunc_GetLocalUpDirection_UpDirection) == 0x000110, "Member 'TASK_MobileLaser_Beam_CloseRange_C_UpdateBeamOn::CallFunc_GetLocalUpDirection_UpDirection' has a wrong offset!");
static_assert(offsetof(TASK_MobileLaser_Beam_CloseRange_C_UpdateBeamOn, CallFunc_SignOfFloat_ReturnValue) == 0x00011C, "Member 'TASK_MobileLaser_Beam_CloseRange_C_UpdateBeamOn::CallFunc_SignOfFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(TASK_MobileLaser_Beam_CloseRange_C_UpdateBeamOn, CallFunc_Multiply_FloatFloat_ReturnValue_11) == 0x000120, "Member 'TASK_MobileLaser_Beam_CloseRange_C_UpdateBeamOn::CallFunc_Multiply_FloatFloat_ReturnValue_11' has a wrong offset!");
static_assert(offsetof(TASK_MobileLaser_Beam_CloseRange_C_UpdateBeamOn, CallFunc_Multiply_FloatFloat_ReturnValue_12) == 0x000124, "Member 'TASK_MobileLaser_Beam_CloseRange_C_UpdateBeamOn::CallFunc_Multiply_FloatFloat_ReturnValue_12' has a wrong offset!");
static_assert(offsetof(TASK_MobileLaser_Beam_CloseRange_C_UpdateBeamOn, CallFunc_FClamp_ReturnValue) == 0x000128, "Member 'TASK_MobileLaser_Beam_CloseRange_C_UpdateBeamOn::CallFunc_FClamp_ReturnValue' has a wrong offset!");
static_assert(offsetof(TASK_MobileLaser_Beam_CloseRange_C_UpdateBeamOn, CallFunc_EqualEqual_VectorVector_ReturnValue) == 0x00012C, "Member 'TASK_MobileLaser_Beam_CloseRange_C_UpdateBeamOn::CallFunc_EqualEqual_VectorVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(TASK_MobileLaser_Beam_CloseRange_C_UpdateBeamOn, CallFunc_SignedAngleBetweenOnPlane_ReturnValue) == 0x000130, "Member 'TASK_MobileLaser_Beam_CloseRange_C_UpdateBeamOn::CallFunc_SignedAngleBetweenOnPlane_ReturnValue' has a wrong offset!");
static_assert(offsetof(TASK_MobileLaser_Beam_CloseRange_C_UpdateBeamOn, CallFunc_RotateAngleAxis_ReturnValue) == 0x000134, "Member 'TASK_MobileLaser_Beam_CloseRange_C_UpdateBeamOn::CallFunc_RotateAngleAxis_ReturnValue' has a wrong offset!");
static_assert(offsetof(TASK_MobileLaser_Beam_CloseRange_C_UpdateBeamOn, CallFunc_ClampDirection_ClampedLocalDirection) == 0x000140, "Member 'TASK_MobileLaser_Beam_CloseRange_C_UpdateBeamOn::CallFunc_ClampDirection_ClampedLocalDirection' has a wrong offset!");
static_assert(offsetof(TASK_MobileLaser_Beam_CloseRange_C_UpdateBeamOn, CallFunc_Cross_VectorVector_ReturnValue) == 0x00014C, "Member 'TASK_MobileLaser_Beam_CloseRange_C_UpdateBeamOn::CallFunc_Cross_VectorVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(TASK_MobileLaser_Beam_CloseRange_C_UpdateBeamOn, CallFunc_Normal_ReturnValue) == 0x000158, "Member 'TASK_MobileLaser_Beam_CloseRange_C_UpdateBeamOn::CallFunc_Normal_ReturnValue' has a wrong offset!");
static_assert(offsetof(TASK_MobileLaser_Beam_CloseRange_C_UpdateBeamOn, CallFunc_Add_VectorVector_ReturnValue) == 0x000164, "Member 'TASK_MobileLaser_Beam_CloseRange_C_UpdateBeamOn::CallFunc_Add_VectorVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(TASK_MobileLaser_Beam_CloseRange_C_UpdateBeamOn, CallFunc_Add_VectorVector_ReturnValue_1) == 0x000170, "Member 'TASK_MobileLaser_Beam_CloseRange_C_UpdateBeamOn::CallFunc_Add_VectorVector_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(TASK_MobileLaser_Beam_CloseRange_C_UpdateBeamOn, CallFunc_GetDirectionUnitVector_ReturnValue) == 0x00017C, "Member 'TASK_MobileLaser_Beam_CloseRange_C_UpdateBeamOn::CallFunc_GetDirectionUnitVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(TASK_MobileLaser_Beam_CloseRange_C_UpdateBeamOn, CallFunc_GreaterEqual_FloatFloat_ReturnValue) == 0x000188, "Member 'TASK_MobileLaser_Beam_CloseRange_C_UpdateBeamOn::CallFunc_GreaterEqual_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(TASK_MobileLaser_Beam_CloseRange_C_UpdateBeamOn, CallFunc_WorldDirectionToLocalDirection_LocalDirection) == 0x00018C, "Member 'TASK_MobileLaser_Beam_CloseRange_C_UpdateBeamOn::CallFunc_WorldDirectionToLocalDirection_LocalDirection' has a wrong offset!");
static_assert(offsetof(TASK_MobileLaser_Beam_CloseRange_C_UpdateBeamOn, CallFunc_GetPlayTimeInSeconds_ReturnValue) == 0x000198, "Member 'TASK_MobileLaser_Beam_CloseRange_C_UpdateBeamOn::CallFunc_GetPlayTimeInSeconds_ReturnValue' has a wrong offset!");
static_assert(offsetof(TASK_MobileLaser_Beam_CloseRange_C_UpdateBeamOn, CallFunc_Subtract_FloatFloat_ReturnValue) == 0x00019C, "Member 'TASK_MobileLaser_Beam_CloseRange_C_UpdateBeamOn::CallFunc_Subtract_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(TASK_MobileLaser_Beam_CloseRange_C_UpdateBeamOn, CallFunc_Divide_FloatFloat_ReturnValue) == 0x0001A0, "Member 'TASK_MobileLaser_Beam_CloseRange_C_UpdateBeamOn::CallFunc_Divide_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(TASK_MobileLaser_Beam_CloseRange_C_UpdateBeamOn, CallFunc_GetTarget_Target) == 0x0001A8, "Member 'TASK_MobileLaser_Beam_CloseRange_C_UpdateBeamOn::CallFunc_GetTarget_Target' has a wrong offset!");
static_assert(offsetof(TASK_MobileLaser_Beam_CloseRange_C_UpdateBeamOn, CallFunc_FClamp_ReturnValue_1) == 0x0001B0, "Member 'TASK_MobileLaser_Beam_CloseRange_C_UpdateBeamOn::CallFunc_FClamp_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(TASK_MobileLaser_Beam_CloseRange_C_UpdateBeamOn, CallFunc_Get_Target_Location_Location) == 0x0001B4, "Member 'TASK_MobileLaser_Beam_CloseRange_C_UpdateBeamOn::CallFunc_Get_Target_Location_Location' has a wrong offset!");
static_assert(offsetof(TASK_MobileLaser_Beam_CloseRange_C_UpdateBeamOn, CallFunc_GetBarrelWorldLocation_BarrelLocation) == 0x0001C0, "Member 'TASK_MobileLaser_Beam_CloseRange_C_UpdateBeamOn::CallFunc_GetBarrelWorldLocation_BarrelLocation' has a wrong offset!");

// Function TASK_MobileLaser_Beam_CloseRange.TASK_MobileLaser_Beam_CloseRange_C.UpdateBeamTurningOn
// 0x0010 (0x0010 - 0x0000)
struct TASK_MobileLaser_Beam_CloseRange_C_UpdateBeamTurningOn final
{
public:
	float                                         DeltaSeconds;                                      // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Progress;                                          // 0x0004(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_UpdateBeamTurningOn_Progress;             // 0x0008(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_GreaterEqual_FloatFloat_ReturnValue;      // 0x000C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(TASK_MobileLaser_Beam_CloseRange_C_UpdateBeamTurningOn) == 0x000004, "Wrong alignment on TASK_MobileLaser_Beam_CloseRange_C_UpdateBeamTurningOn");
static_assert(sizeof(TASK_MobileLaser_Beam_CloseRange_C_UpdateBeamTurningOn) == 0x000010, "Wrong size on TASK_MobileLaser_Beam_CloseRange_C_UpdateBeamTurningOn");
static_assert(offsetof(TASK_MobileLaser_Beam_CloseRange_C_UpdateBeamTurningOn, DeltaSeconds) == 0x000000, "Member 'TASK_MobileLaser_Beam_CloseRange_C_UpdateBeamTurningOn::DeltaSeconds' has a wrong offset!");
static_assert(offsetof(TASK_MobileLaser_Beam_CloseRange_C_UpdateBeamTurningOn, Progress) == 0x000004, "Member 'TASK_MobileLaser_Beam_CloseRange_C_UpdateBeamTurningOn::Progress' has a wrong offset!");
static_assert(offsetof(TASK_MobileLaser_Beam_CloseRange_C_UpdateBeamTurningOn, CallFunc_UpdateBeamTurningOn_Progress) == 0x000008, "Member 'TASK_MobileLaser_Beam_CloseRange_C_UpdateBeamTurningOn::CallFunc_UpdateBeamTurningOn_Progress' has a wrong offset!");
static_assert(offsetof(TASK_MobileLaser_Beam_CloseRange_C_UpdateBeamTurningOn, CallFunc_GreaterEqual_FloatFloat_ReturnValue) == 0x00000C, "Member 'TASK_MobileLaser_Beam_CloseRange_C_UpdateBeamTurningOn::CallFunc_GreaterEqual_FloatFloat_ReturnValue' has a wrong offset!");

}

