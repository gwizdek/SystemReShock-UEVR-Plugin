#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: ITEM_HandheldConsumable_Base

#include "Basic.hpp"


namespace SDK::Params
{

// Function ITEM_HandheldConsumable_Base.ITEM_HandheldConsumable_Base_C.ConsumableCountChanged__DelegateSignature
// 0x0010 (0x0010 - 0x0000)
struct ITEM_HandheldConsumable_Base_C_ConsumableCountChanged__DelegateSignature final
{
public:
	class UITEM_Base_C*                           HandheldItem;                                      // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Count_0;                                           // 0x0008(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(ITEM_HandheldConsumable_Base_C_ConsumableCountChanged__DelegateSignature) == 0x000008, "Wrong alignment on ITEM_HandheldConsumable_Base_C_ConsumableCountChanged__DelegateSignature");
static_assert(sizeof(ITEM_HandheldConsumable_Base_C_ConsumableCountChanged__DelegateSignature) == 0x000010, "Wrong size on ITEM_HandheldConsumable_Base_C_ConsumableCountChanged__DelegateSignature");
static_assert(offsetof(ITEM_HandheldConsumable_Base_C_ConsumableCountChanged__DelegateSignature, HandheldItem) == 0x000000, "Member 'ITEM_HandheldConsumable_Base_C_ConsumableCountChanged__DelegateSignature::HandheldItem' has a wrong offset!");
static_assert(offsetof(ITEM_HandheldConsumable_Base_C_ConsumableCountChanged__DelegateSignature, Count_0) == 0x000008, "Member 'ITEM_HandheldConsumable_Base_C_ConsumableCountChanged__DelegateSignature::Count_0' has a wrong offset!");

// Function ITEM_HandheldConsumable_Base.ITEM_HandheldConsumable_Base_C.EVENT_OnConsumableBagChanged
// 0x0100 (0x0100 - 0x0000)
struct ITEM_HandheldConsumable_Base_C_EVENT_OnConsumableBagChanged final
{
public:
	class UInventoryBag_C*                        Bag_0;                                             // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         SlotIndex_0;                                       // 0x0008(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class APAWN_Hacker_Simple_C*                  HackerPawn;                                        // 0x0010(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UITEM_ConsumableBase_C*                 ConsumableSlotItem;                                // 0x0018(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CountAtSlotIndex;                                  // 0x0020(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         PreviousConsumableCount;                           // 0x0024(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Subtract_IntInt_ReturnValue;              // 0x0028(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Greater_IntInt_ReturnValue;               // 0x002C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsEquipped_Result;                        // 0x002D(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_2E[0x2];                                       // 0x002E(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_GetSlotIndex_Result;                      // 0x0030(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_34[0x4];                                       // 0x0034(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UInventoryBag_C*                        CallFunc_GetBag_Result;                            // 0x0038(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_ForceEquipItemInSlot_Result;              // 0x0040(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0041(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Not_PreBool_ReturnValue;                  // 0x0042(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_43[0x5];                                       // 0x0043(0x0005)(Fixing Size After Last Property [ Dumper-7 ])
	class UITEM_WeaponBase_C*                     CallFunc_GetEquippedWeapon_Weapon;                 // 0x0048(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class APAWN_SystemShockCharacter_C*           CallFunc_GetOwnerCharacter_Character;              // 0x0050(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue_1;                    // 0x0058(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_59[0x7];                                       // 0x0059(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class APAWN_Hacker_Simple_C*                  K2Node_DynamicCast_AsPAWN_Hacker_Simple;           // 0x0060(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0068(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Not_PreBool_ReturnValue_1;                // 0x0069(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_ShouldAutoEquip_Result;                   // 0x006A(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_6B[0x1];                                       // 0x006B(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Subtract_IntInt_ReturnValue_1;            // 0x006C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_IntInt_ReturnValue;            // 0x0070(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_EqualEqual_IntInt_ReturnValue_1;          // 0x0071(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_72[0x2];                                       // 0x0072(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Subtract_IntInt_ReturnValue_2;            // 0x0074(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UClass*                                 CallFunc_GetObjectClass_ReturnValue;               // 0x0078(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_ClassClass_ReturnValue;        // 0x0080(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_81[0x7];                                       // 0x0081(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UClass*                                 CallFunc_GetObjectClass_ReturnValue_1;             // 0x0088(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_ClassClass_ReturnValue_1;      // 0x0090(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Greater_IntInt_ReturnValue_1;             // 0x0091(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_92[0x2];                                       // 0x0092(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Subtract_IntInt_ReturnValue_3;            // 0x0094(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Greater_IntInt_ReturnValue_2;             // 0x0098(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_99[0x3];                                       // 0x0099(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_GetCount_Result;                          // 0x009C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Subtract_IntInt_ReturnValue_4;            // 0x00A0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue;                   // 0x00A4(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_GetCount_Result_1;                        // 0x00A8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_AC[0x4];                                       // 0x00AC(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UITEM_Base_C*                           CallFunc_GetSlotItem_Item;                         // 0x00B0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UITEM_ConsumableBase_C*                 K2Node_DynamicCast_AsITEM_Consumable_Base;         // 0x00B8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess_1;                     // 0x00C0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsOverflowBag_Result;                     // 0x00C1(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_EqualEqual_ObjectObject_ReturnValue;      // 0x00C2(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_C3[0x1];                                       // 0x00C3(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Map_Find_Value;                           // 0x00C4(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Map_Find_ReturnValue;                     // 0x00C8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsValid_ReturnValue_2;                    // 0x00C9(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_CA[0x2];                                       // 0x00CA(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Subtract_IntInt_ReturnValue_5;            // 0x00CC(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Map_Remove_ReturnValue;                   // 0x00D0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsValid_ReturnValue_3;                    // 0x00D1(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_D2[0x2];                                       // 0x00D2(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_GetCount_Result_2;                        // 0x00D4(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_GetCount_Result_3;                        // 0x00D8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Subtract_IntInt_ReturnValue_6;            // 0x00DC(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue_1;                 // 0x00E0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_E4[0x4];                                       // 0x00E4(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UITEM_Base_C*                           CallFunc_GetSlotItem_Item_1;                       // 0x00E8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UITEM_ConsumableBase_C*                 K2Node_DynamicCast_AsITEM_Consumable_Base_1;       // 0x00F0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess_2;                     // 0x00F8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(ITEM_HandheldConsumable_Base_C_EVENT_OnConsumableBagChanged) == 0x000008, "Wrong alignment on ITEM_HandheldConsumable_Base_C_EVENT_OnConsumableBagChanged");
static_assert(sizeof(ITEM_HandheldConsumable_Base_C_EVENT_OnConsumableBagChanged) == 0x000100, "Wrong size on ITEM_HandheldConsumable_Base_C_EVENT_OnConsumableBagChanged");
static_assert(offsetof(ITEM_HandheldConsumable_Base_C_EVENT_OnConsumableBagChanged, Bag_0) == 0x000000, "Member 'ITEM_HandheldConsumable_Base_C_EVENT_OnConsumableBagChanged::Bag_0' has a wrong offset!");
static_assert(offsetof(ITEM_HandheldConsumable_Base_C_EVENT_OnConsumableBagChanged, SlotIndex_0) == 0x000008, "Member 'ITEM_HandheldConsumable_Base_C_EVENT_OnConsumableBagChanged::SlotIndex_0' has a wrong offset!");
static_assert(offsetof(ITEM_HandheldConsumable_Base_C_EVENT_OnConsumableBagChanged, HackerPawn) == 0x000010, "Member 'ITEM_HandheldConsumable_Base_C_EVENT_OnConsumableBagChanged::HackerPawn' has a wrong offset!");
static_assert(offsetof(ITEM_HandheldConsumable_Base_C_EVENT_OnConsumableBagChanged, ConsumableSlotItem) == 0x000018, "Member 'ITEM_HandheldConsumable_Base_C_EVENT_OnConsumableBagChanged::ConsumableSlotItem' has a wrong offset!");
static_assert(offsetof(ITEM_HandheldConsumable_Base_C_EVENT_OnConsumableBagChanged, CountAtSlotIndex) == 0x000020, "Member 'ITEM_HandheldConsumable_Base_C_EVENT_OnConsumableBagChanged::CountAtSlotIndex' has a wrong offset!");
static_assert(offsetof(ITEM_HandheldConsumable_Base_C_EVENT_OnConsumableBagChanged, PreviousConsumableCount) == 0x000024, "Member 'ITEM_HandheldConsumable_Base_C_EVENT_OnConsumableBagChanged::PreviousConsumableCount' has a wrong offset!");
static_assert(offsetof(ITEM_HandheldConsumable_Base_C_EVENT_OnConsumableBagChanged, CallFunc_Subtract_IntInt_ReturnValue) == 0x000028, "Member 'ITEM_HandheldConsumable_Base_C_EVENT_OnConsumableBagChanged::CallFunc_Subtract_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(ITEM_HandheldConsumable_Base_C_EVENT_OnConsumableBagChanged, CallFunc_Greater_IntInt_ReturnValue) == 0x00002C, "Member 'ITEM_HandheldConsumable_Base_C_EVENT_OnConsumableBagChanged::CallFunc_Greater_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(ITEM_HandheldConsumable_Base_C_EVENT_OnConsumableBagChanged, CallFunc_IsEquipped_Result) == 0x00002D, "Member 'ITEM_HandheldConsumable_Base_C_EVENT_OnConsumableBagChanged::CallFunc_IsEquipped_Result' has a wrong offset!");
static_assert(offsetof(ITEM_HandheldConsumable_Base_C_EVENT_OnConsumableBagChanged, CallFunc_GetSlotIndex_Result) == 0x000030, "Member 'ITEM_HandheldConsumable_Base_C_EVENT_OnConsumableBagChanged::CallFunc_GetSlotIndex_Result' has a wrong offset!");
static_assert(offsetof(ITEM_HandheldConsumable_Base_C_EVENT_OnConsumableBagChanged, CallFunc_GetBag_Result) == 0x000038, "Member 'ITEM_HandheldConsumable_Base_C_EVENT_OnConsumableBagChanged::CallFunc_GetBag_Result' has a wrong offset!");
static_assert(offsetof(ITEM_HandheldConsumable_Base_C_EVENT_OnConsumableBagChanged, CallFunc_ForceEquipItemInSlot_Result) == 0x000040, "Member 'ITEM_HandheldConsumable_Base_C_EVENT_OnConsumableBagChanged::CallFunc_ForceEquipItemInSlot_Result' has a wrong offset!");
static_assert(offsetof(ITEM_HandheldConsumable_Base_C_EVENT_OnConsumableBagChanged, CallFunc_IsValid_ReturnValue) == 0x000041, "Member 'ITEM_HandheldConsumable_Base_C_EVENT_OnConsumableBagChanged::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(ITEM_HandheldConsumable_Base_C_EVENT_OnConsumableBagChanged, CallFunc_Not_PreBool_ReturnValue) == 0x000042, "Member 'ITEM_HandheldConsumable_Base_C_EVENT_OnConsumableBagChanged::CallFunc_Not_PreBool_ReturnValue' has a wrong offset!");
static_assert(offsetof(ITEM_HandheldConsumable_Base_C_EVENT_OnConsumableBagChanged, CallFunc_GetEquippedWeapon_Weapon) == 0x000048, "Member 'ITEM_HandheldConsumable_Base_C_EVENT_OnConsumableBagChanged::CallFunc_GetEquippedWeapon_Weapon' has a wrong offset!");
static_assert(offsetof(ITEM_HandheldConsumable_Base_C_EVENT_OnConsumableBagChanged, CallFunc_GetOwnerCharacter_Character) == 0x000050, "Member 'ITEM_HandheldConsumable_Base_C_EVENT_OnConsumableBagChanged::CallFunc_GetOwnerCharacter_Character' has a wrong offset!");
static_assert(offsetof(ITEM_HandheldConsumable_Base_C_EVENT_OnConsumableBagChanged, CallFunc_IsValid_ReturnValue_1) == 0x000058, "Member 'ITEM_HandheldConsumable_Base_C_EVENT_OnConsumableBagChanged::CallFunc_IsValid_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(ITEM_HandheldConsumable_Base_C_EVENT_OnConsumableBagChanged, K2Node_DynamicCast_AsPAWN_Hacker_Simple) == 0x000060, "Member 'ITEM_HandheldConsumable_Base_C_EVENT_OnConsumableBagChanged::K2Node_DynamicCast_AsPAWN_Hacker_Simple' has a wrong offset!");
static_assert(offsetof(ITEM_HandheldConsumable_Base_C_EVENT_OnConsumableBagChanged, K2Node_DynamicCast_bSuccess) == 0x000068, "Member 'ITEM_HandheldConsumable_Base_C_EVENT_OnConsumableBagChanged::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(ITEM_HandheldConsumable_Base_C_EVENT_OnConsumableBagChanged, CallFunc_Not_PreBool_ReturnValue_1) == 0x000069, "Member 'ITEM_HandheldConsumable_Base_C_EVENT_OnConsumableBagChanged::CallFunc_Not_PreBool_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(ITEM_HandheldConsumable_Base_C_EVENT_OnConsumableBagChanged, CallFunc_ShouldAutoEquip_Result) == 0x00006A, "Member 'ITEM_HandheldConsumable_Base_C_EVENT_OnConsumableBagChanged::CallFunc_ShouldAutoEquip_Result' has a wrong offset!");
static_assert(offsetof(ITEM_HandheldConsumable_Base_C_EVENT_OnConsumableBagChanged, CallFunc_Subtract_IntInt_ReturnValue_1) == 0x00006C, "Member 'ITEM_HandheldConsumable_Base_C_EVENT_OnConsumableBagChanged::CallFunc_Subtract_IntInt_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(ITEM_HandheldConsumable_Base_C_EVENT_OnConsumableBagChanged, CallFunc_EqualEqual_IntInt_ReturnValue) == 0x000070, "Member 'ITEM_HandheldConsumable_Base_C_EVENT_OnConsumableBagChanged::CallFunc_EqualEqual_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(ITEM_HandheldConsumable_Base_C_EVENT_OnConsumableBagChanged, CallFunc_EqualEqual_IntInt_ReturnValue_1) == 0x000071, "Member 'ITEM_HandheldConsumable_Base_C_EVENT_OnConsumableBagChanged::CallFunc_EqualEqual_IntInt_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(ITEM_HandheldConsumable_Base_C_EVENT_OnConsumableBagChanged, CallFunc_Subtract_IntInt_ReturnValue_2) == 0x000074, "Member 'ITEM_HandheldConsumable_Base_C_EVENT_OnConsumableBagChanged::CallFunc_Subtract_IntInt_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(ITEM_HandheldConsumable_Base_C_EVENT_OnConsumableBagChanged, CallFunc_GetObjectClass_ReturnValue) == 0x000078, "Member 'ITEM_HandheldConsumable_Base_C_EVENT_OnConsumableBagChanged::CallFunc_GetObjectClass_ReturnValue' has a wrong offset!");
static_assert(offsetof(ITEM_HandheldConsumable_Base_C_EVENT_OnConsumableBagChanged, CallFunc_EqualEqual_ClassClass_ReturnValue) == 0x000080, "Member 'ITEM_HandheldConsumable_Base_C_EVENT_OnConsumableBagChanged::CallFunc_EqualEqual_ClassClass_ReturnValue' has a wrong offset!");
static_assert(offsetof(ITEM_HandheldConsumable_Base_C_EVENT_OnConsumableBagChanged, CallFunc_GetObjectClass_ReturnValue_1) == 0x000088, "Member 'ITEM_HandheldConsumable_Base_C_EVENT_OnConsumableBagChanged::CallFunc_GetObjectClass_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(ITEM_HandheldConsumable_Base_C_EVENT_OnConsumableBagChanged, CallFunc_EqualEqual_ClassClass_ReturnValue_1) == 0x000090, "Member 'ITEM_HandheldConsumable_Base_C_EVENT_OnConsumableBagChanged::CallFunc_EqualEqual_ClassClass_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(ITEM_HandheldConsumable_Base_C_EVENT_OnConsumableBagChanged, CallFunc_Greater_IntInt_ReturnValue_1) == 0x000091, "Member 'ITEM_HandheldConsumable_Base_C_EVENT_OnConsumableBagChanged::CallFunc_Greater_IntInt_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(ITEM_HandheldConsumable_Base_C_EVENT_OnConsumableBagChanged, CallFunc_Subtract_IntInt_ReturnValue_3) == 0x000094, "Member 'ITEM_HandheldConsumable_Base_C_EVENT_OnConsumableBagChanged::CallFunc_Subtract_IntInt_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(ITEM_HandheldConsumable_Base_C_EVENT_OnConsumableBagChanged, CallFunc_Greater_IntInt_ReturnValue_2) == 0x000098, "Member 'ITEM_HandheldConsumable_Base_C_EVENT_OnConsumableBagChanged::CallFunc_Greater_IntInt_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(ITEM_HandheldConsumable_Base_C_EVENT_OnConsumableBagChanged, CallFunc_GetCount_Result) == 0x00009C, "Member 'ITEM_HandheldConsumable_Base_C_EVENT_OnConsumableBagChanged::CallFunc_GetCount_Result' has a wrong offset!");
static_assert(offsetof(ITEM_HandheldConsumable_Base_C_EVENT_OnConsumableBagChanged, CallFunc_Subtract_IntInt_ReturnValue_4) == 0x0000A0, "Member 'ITEM_HandheldConsumable_Base_C_EVENT_OnConsumableBagChanged::CallFunc_Subtract_IntInt_ReturnValue_4' has a wrong offset!");
static_assert(offsetof(ITEM_HandheldConsumable_Base_C_EVENT_OnConsumableBagChanged, CallFunc_Add_IntInt_ReturnValue) == 0x0000A4, "Member 'ITEM_HandheldConsumable_Base_C_EVENT_OnConsumableBagChanged::CallFunc_Add_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(ITEM_HandheldConsumable_Base_C_EVENT_OnConsumableBagChanged, CallFunc_GetCount_Result_1) == 0x0000A8, "Member 'ITEM_HandheldConsumable_Base_C_EVENT_OnConsumableBagChanged::CallFunc_GetCount_Result_1' has a wrong offset!");
static_assert(offsetof(ITEM_HandheldConsumable_Base_C_EVENT_OnConsumableBagChanged, CallFunc_GetSlotItem_Item) == 0x0000B0, "Member 'ITEM_HandheldConsumable_Base_C_EVENT_OnConsumableBagChanged::CallFunc_GetSlotItem_Item' has a wrong offset!");
static_assert(offsetof(ITEM_HandheldConsumable_Base_C_EVENT_OnConsumableBagChanged, K2Node_DynamicCast_AsITEM_Consumable_Base) == 0x0000B8, "Member 'ITEM_HandheldConsumable_Base_C_EVENT_OnConsumableBagChanged::K2Node_DynamicCast_AsITEM_Consumable_Base' has a wrong offset!");
static_assert(offsetof(ITEM_HandheldConsumable_Base_C_EVENT_OnConsumableBagChanged, K2Node_DynamicCast_bSuccess_1) == 0x0000C0, "Member 'ITEM_HandheldConsumable_Base_C_EVENT_OnConsumableBagChanged::K2Node_DynamicCast_bSuccess_1' has a wrong offset!");
static_assert(offsetof(ITEM_HandheldConsumable_Base_C_EVENT_OnConsumableBagChanged, CallFunc_IsOverflowBag_Result) == 0x0000C1, "Member 'ITEM_HandheldConsumable_Base_C_EVENT_OnConsumableBagChanged::CallFunc_IsOverflowBag_Result' has a wrong offset!");
static_assert(offsetof(ITEM_HandheldConsumable_Base_C_EVENT_OnConsumableBagChanged, CallFunc_EqualEqual_ObjectObject_ReturnValue) == 0x0000C2, "Member 'ITEM_HandheldConsumable_Base_C_EVENT_OnConsumableBagChanged::CallFunc_EqualEqual_ObjectObject_ReturnValue' has a wrong offset!");
static_assert(offsetof(ITEM_HandheldConsumable_Base_C_EVENT_OnConsumableBagChanged, CallFunc_Map_Find_Value) == 0x0000C4, "Member 'ITEM_HandheldConsumable_Base_C_EVENT_OnConsumableBagChanged::CallFunc_Map_Find_Value' has a wrong offset!");
static_assert(offsetof(ITEM_HandheldConsumable_Base_C_EVENT_OnConsumableBagChanged, CallFunc_Map_Find_ReturnValue) == 0x0000C8, "Member 'ITEM_HandheldConsumable_Base_C_EVENT_OnConsumableBagChanged::CallFunc_Map_Find_ReturnValue' has a wrong offset!");
static_assert(offsetof(ITEM_HandheldConsumable_Base_C_EVENT_OnConsumableBagChanged, CallFunc_IsValid_ReturnValue_2) == 0x0000C9, "Member 'ITEM_HandheldConsumable_Base_C_EVENT_OnConsumableBagChanged::CallFunc_IsValid_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(ITEM_HandheldConsumable_Base_C_EVENT_OnConsumableBagChanged, CallFunc_Subtract_IntInt_ReturnValue_5) == 0x0000CC, "Member 'ITEM_HandheldConsumable_Base_C_EVENT_OnConsumableBagChanged::CallFunc_Subtract_IntInt_ReturnValue_5' has a wrong offset!");
static_assert(offsetof(ITEM_HandheldConsumable_Base_C_EVENT_OnConsumableBagChanged, CallFunc_Map_Remove_ReturnValue) == 0x0000D0, "Member 'ITEM_HandheldConsumable_Base_C_EVENT_OnConsumableBagChanged::CallFunc_Map_Remove_ReturnValue' has a wrong offset!");
static_assert(offsetof(ITEM_HandheldConsumable_Base_C_EVENT_OnConsumableBagChanged, CallFunc_IsValid_ReturnValue_3) == 0x0000D1, "Member 'ITEM_HandheldConsumable_Base_C_EVENT_OnConsumableBagChanged::CallFunc_IsValid_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(ITEM_HandheldConsumable_Base_C_EVENT_OnConsumableBagChanged, CallFunc_GetCount_Result_2) == 0x0000D4, "Member 'ITEM_HandheldConsumable_Base_C_EVENT_OnConsumableBagChanged::CallFunc_GetCount_Result_2' has a wrong offset!");
static_assert(offsetof(ITEM_HandheldConsumable_Base_C_EVENT_OnConsumableBagChanged, CallFunc_GetCount_Result_3) == 0x0000D8, "Member 'ITEM_HandheldConsumable_Base_C_EVENT_OnConsumableBagChanged::CallFunc_GetCount_Result_3' has a wrong offset!");
static_assert(offsetof(ITEM_HandheldConsumable_Base_C_EVENT_OnConsumableBagChanged, CallFunc_Subtract_IntInt_ReturnValue_6) == 0x0000DC, "Member 'ITEM_HandheldConsumable_Base_C_EVENT_OnConsumableBagChanged::CallFunc_Subtract_IntInt_ReturnValue_6' has a wrong offset!");
static_assert(offsetof(ITEM_HandheldConsumable_Base_C_EVENT_OnConsumableBagChanged, CallFunc_Add_IntInt_ReturnValue_1) == 0x0000E0, "Member 'ITEM_HandheldConsumable_Base_C_EVENT_OnConsumableBagChanged::CallFunc_Add_IntInt_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(ITEM_HandheldConsumable_Base_C_EVENT_OnConsumableBagChanged, CallFunc_GetSlotItem_Item_1) == 0x0000E8, "Member 'ITEM_HandheldConsumable_Base_C_EVENT_OnConsumableBagChanged::CallFunc_GetSlotItem_Item_1' has a wrong offset!");
static_assert(offsetof(ITEM_HandheldConsumable_Base_C_EVENT_OnConsumableBagChanged, K2Node_DynamicCast_AsITEM_Consumable_Base_1) == 0x0000F0, "Member 'ITEM_HandheldConsumable_Base_C_EVENT_OnConsumableBagChanged::K2Node_DynamicCast_AsITEM_Consumable_Base_1' has a wrong offset!");
static_assert(offsetof(ITEM_HandheldConsumable_Base_C_EVENT_OnConsumableBagChanged, K2Node_DynamicCast_bSuccess_2) == 0x0000F8, "Member 'ITEM_HandheldConsumable_Base_C_EVENT_OnConsumableBagChanged::K2Node_DynamicCast_bSuccess_2' has a wrong offset!");

// Function ITEM_HandheldConsumable_Base.ITEM_HandheldConsumable_Base_C.InitializeHandheldConsumableData
// 0x0080 (0x0080 - 0x0000)
struct ITEM_HandheldConsumable_Base_C_InitializeHandheldConsumableData final
{
public:
	class UITEM_Base_C*                           CurrentItem;                                       // 0x0000(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Array_Index_Variable;                     // 0x0008(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x000C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_D[0x3];                                        // 0x000D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class UCOMP_Inventory_C*                      CallFunc_GetInventory_Inventory;                   // 0x0010(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TArray<class UITEM_Base_C*>                   CallFunc_GetItemArray_Items;                       // 0x0018(0x0010)(ReferenceParm)
	class UITEM_Base_C*                           CallFunc_Array_Get_Item;                           // 0x0028(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_GetCount_Result;                          // 0x0030(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Length_ReturnValue;                 // 0x0034(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue;                   // 0x0038(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_GetCount_Result_1;                        // 0x003C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_GetSlotIndex_Result;                      // 0x0040(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TDelegate<void(class UInventoryBag_C* Bag, int32 SlotIndex)> K2Node_CreateDelegate_OutputDelegate;              // 0x0044(0x0010)(ZeroConstructor, NoDestructor)
	uint8                                         Pad_54[0x4];                                       // 0x0054(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UClass*                                 CallFunc_GetObjectClass_ReturnValue;               // 0x0058(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_ClassClass_ReturnValue;        // 0x0060(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_61[0x3];                                       // 0x0061(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Temp_int_Loop_Counter_Variable;                    // 0x0064(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue;                  // 0x0068(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_69[0x3];                                       // 0x0069(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Add_IntInt_ReturnValue_1;                 // 0x006C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UCOMP_Inventory_C*                      CallFunc_GetInventory_Inventory_1;                 // 0x0070(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UInventoryBag_C*                        CallFunc_GetBagByType_Bag;                         // 0x0078(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(ITEM_HandheldConsumable_Base_C_InitializeHandheldConsumableData) == 0x000008, "Wrong alignment on ITEM_HandheldConsumable_Base_C_InitializeHandheldConsumableData");
static_assert(sizeof(ITEM_HandheldConsumable_Base_C_InitializeHandheldConsumableData) == 0x000080, "Wrong size on ITEM_HandheldConsumable_Base_C_InitializeHandheldConsumableData");
static_assert(offsetof(ITEM_HandheldConsumable_Base_C_InitializeHandheldConsumableData, CurrentItem) == 0x000000, "Member 'ITEM_HandheldConsumable_Base_C_InitializeHandheldConsumableData::CurrentItem' has a wrong offset!");
static_assert(offsetof(ITEM_HandheldConsumable_Base_C_InitializeHandheldConsumableData, Temp_int_Array_Index_Variable) == 0x000008, "Member 'ITEM_HandheldConsumable_Base_C_InitializeHandheldConsumableData::Temp_int_Array_Index_Variable' has a wrong offset!");
static_assert(offsetof(ITEM_HandheldConsumable_Base_C_InitializeHandheldConsumableData, CallFunc_IsValid_ReturnValue) == 0x00000C, "Member 'ITEM_HandheldConsumable_Base_C_InitializeHandheldConsumableData::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(ITEM_HandheldConsumable_Base_C_InitializeHandheldConsumableData, CallFunc_GetInventory_Inventory) == 0x000010, "Member 'ITEM_HandheldConsumable_Base_C_InitializeHandheldConsumableData::CallFunc_GetInventory_Inventory' has a wrong offset!");
static_assert(offsetof(ITEM_HandheldConsumable_Base_C_InitializeHandheldConsumableData, CallFunc_GetItemArray_Items) == 0x000018, "Member 'ITEM_HandheldConsumable_Base_C_InitializeHandheldConsumableData::CallFunc_GetItemArray_Items' has a wrong offset!");
static_assert(offsetof(ITEM_HandheldConsumable_Base_C_InitializeHandheldConsumableData, CallFunc_Array_Get_Item) == 0x000028, "Member 'ITEM_HandheldConsumable_Base_C_InitializeHandheldConsumableData::CallFunc_Array_Get_Item' has a wrong offset!");
static_assert(offsetof(ITEM_HandheldConsumable_Base_C_InitializeHandheldConsumableData, CallFunc_GetCount_Result) == 0x000030, "Member 'ITEM_HandheldConsumable_Base_C_InitializeHandheldConsumableData::CallFunc_GetCount_Result' has a wrong offset!");
static_assert(offsetof(ITEM_HandheldConsumable_Base_C_InitializeHandheldConsumableData, CallFunc_Array_Length_ReturnValue) == 0x000034, "Member 'ITEM_HandheldConsumable_Base_C_InitializeHandheldConsumableData::CallFunc_Array_Length_ReturnValue' has a wrong offset!");
static_assert(offsetof(ITEM_HandheldConsumable_Base_C_InitializeHandheldConsumableData, CallFunc_Add_IntInt_ReturnValue) == 0x000038, "Member 'ITEM_HandheldConsumable_Base_C_InitializeHandheldConsumableData::CallFunc_Add_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(ITEM_HandheldConsumable_Base_C_InitializeHandheldConsumableData, CallFunc_GetCount_Result_1) == 0x00003C, "Member 'ITEM_HandheldConsumable_Base_C_InitializeHandheldConsumableData::CallFunc_GetCount_Result_1' has a wrong offset!");
static_assert(offsetof(ITEM_HandheldConsumable_Base_C_InitializeHandheldConsumableData, CallFunc_GetSlotIndex_Result) == 0x000040, "Member 'ITEM_HandheldConsumable_Base_C_InitializeHandheldConsumableData::CallFunc_GetSlotIndex_Result' has a wrong offset!");
static_assert(offsetof(ITEM_HandheldConsumable_Base_C_InitializeHandheldConsumableData, K2Node_CreateDelegate_OutputDelegate) == 0x000044, "Member 'ITEM_HandheldConsumable_Base_C_InitializeHandheldConsumableData::K2Node_CreateDelegate_OutputDelegate' has a wrong offset!");
static_assert(offsetof(ITEM_HandheldConsumable_Base_C_InitializeHandheldConsumableData, CallFunc_GetObjectClass_ReturnValue) == 0x000058, "Member 'ITEM_HandheldConsumable_Base_C_InitializeHandheldConsumableData::CallFunc_GetObjectClass_ReturnValue' has a wrong offset!");
static_assert(offsetof(ITEM_HandheldConsumable_Base_C_InitializeHandheldConsumableData, CallFunc_EqualEqual_ClassClass_ReturnValue) == 0x000060, "Member 'ITEM_HandheldConsumable_Base_C_InitializeHandheldConsumableData::CallFunc_EqualEqual_ClassClass_ReturnValue' has a wrong offset!");
static_assert(offsetof(ITEM_HandheldConsumable_Base_C_InitializeHandheldConsumableData, Temp_int_Loop_Counter_Variable) == 0x000064, "Member 'ITEM_HandheldConsumable_Base_C_InitializeHandheldConsumableData::Temp_int_Loop_Counter_Variable' has a wrong offset!");
static_assert(offsetof(ITEM_HandheldConsumable_Base_C_InitializeHandheldConsumableData, CallFunc_Less_IntInt_ReturnValue) == 0x000068, "Member 'ITEM_HandheldConsumable_Base_C_InitializeHandheldConsumableData::CallFunc_Less_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(ITEM_HandheldConsumable_Base_C_InitializeHandheldConsumableData, CallFunc_Add_IntInt_ReturnValue_1) == 0x00006C, "Member 'ITEM_HandheldConsumable_Base_C_InitializeHandheldConsumableData::CallFunc_Add_IntInt_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(ITEM_HandheldConsumable_Base_C_InitializeHandheldConsumableData, CallFunc_GetInventory_Inventory_1) == 0x000070, "Member 'ITEM_HandheldConsumable_Base_C_InitializeHandheldConsumableData::CallFunc_GetInventory_Inventory_1' has a wrong offset!");
static_assert(offsetof(ITEM_HandheldConsumable_Base_C_InitializeHandheldConsumableData, CallFunc_GetBagByType_Bag) == 0x000078, "Member 'ITEM_HandheldConsumable_Base_C_InitializeHandheldConsumableData::CallFunc_GetBagByType_Bag' has a wrong offset!");

// Function ITEM_HandheldConsumable_Base.ITEM_HandheldConsumable_Base_C.CleanupHandheldConsumableData
// 0x0020 (0x0020 - 0x0000)
struct ITEM_HandheldConsumable_Base_C_CleanupHandheldConsumableData final
{
public:
	class UCOMP_Inventory_C*                      CallFunc_GetInventory_Inventory;                   // 0x0000(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0008(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	TDelegate<void(class UInventoryBag_C* Bag, int32 SlotIndex)> K2Node_CreateDelegate_OutputDelegate;              // 0x000C(0x0010)(ZeroConstructor, NoDestructor)
};
static_assert(alignof(ITEM_HandheldConsumable_Base_C_CleanupHandheldConsumableData) == 0x000008, "Wrong alignment on ITEM_HandheldConsumable_Base_C_CleanupHandheldConsumableData");
static_assert(sizeof(ITEM_HandheldConsumable_Base_C_CleanupHandheldConsumableData) == 0x000020, "Wrong size on ITEM_HandheldConsumable_Base_C_CleanupHandheldConsumableData");
static_assert(offsetof(ITEM_HandheldConsumable_Base_C_CleanupHandheldConsumableData, CallFunc_GetInventory_Inventory) == 0x000000, "Member 'ITEM_HandheldConsumable_Base_C_CleanupHandheldConsumableData::CallFunc_GetInventory_Inventory' has a wrong offset!");
static_assert(offsetof(ITEM_HandheldConsumable_Base_C_CleanupHandheldConsumableData, CallFunc_IsValid_ReturnValue) == 0x000008, "Member 'ITEM_HandheldConsumable_Base_C_CleanupHandheldConsumableData::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(ITEM_HandheldConsumable_Base_C_CleanupHandheldConsumableData, K2Node_CreateDelegate_OutputDelegate) == 0x00000C, "Member 'ITEM_HandheldConsumable_Base_C_CleanupHandheldConsumableData::K2Node_CreateDelegate_OutputDelegate' has a wrong offset!");

// Function ITEM_HandheldConsumable_Base.ITEM_HandheldConsumable_Base_C.GetBestSlottedItemToConsume
// 0x0068 (0x0068 - 0x0000)
struct ITEM_HandheldConsumable_Base_C_GetBestSlottedItemToConsume final
{
public:
	class UITEM_ConsumableBase_C*                 ConsumableItem;                                    // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         ConsumableItemCount;                               // 0x0008(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         ConsumableSlotIndex;                               // 0x000C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         SmallestStackCount;                                // 0x0010(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         BestSlotIndex;                                     // 0x0014(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Array_Index_Variable;                     // 0x0018(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Loop_Counter_Variable;                    // 0x001C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue;                   // 0x0020(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue;                  // 0x0024(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_25[0x3];                                       // 0x0025(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Map_Find_Value;                           // 0x0028(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Map_Find_ReturnValue;                     // 0x002C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_2D[0x3];                                       // 0x002D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class UITEM_Base_C*                           CallFunc_GetSlotItem_Item;                         // 0x0030(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TArray<int32>                                 CallFunc_Map_Keys_Keys;                            // 0x0038(0x0010)(ReferenceParm)
	class UITEM_ConsumableBase_C*                 K2Node_DynamicCast_AsITEM_Consumable_Base;         // 0x0048(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0050(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_51[0x3];                                       // 0x0051(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Array_Get_Item;                           // 0x0054(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Length_ReturnValue;                 // 0x0058(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue_1;                // 0x005C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_5D[0x3];                                       // 0x005D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Map_Length_ReturnValue;                   // 0x0060(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Greater_IntInt_ReturnValue;               // 0x0064(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(ITEM_HandheldConsumable_Base_C_GetBestSlottedItemToConsume) == 0x000008, "Wrong alignment on ITEM_HandheldConsumable_Base_C_GetBestSlottedItemToConsume");
static_assert(sizeof(ITEM_HandheldConsumable_Base_C_GetBestSlottedItemToConsume) == 0x000068, "Wrong size on ITEM_HandheldConsumable_Base_C_GetBestSlottedItemToConsume");
static_assert(offsetof(ITEM_HandheldConsumable_Base_C_GetBestSlottedItemToConsume, ConsumableItem) == 0x000000, "Member 'ITEM_HandheldConsumable_Base_C_GetBestSlottedItemToConsume::ConsumableItem' has a wrong offset!");
static_assert(offsetof(ITEM_HandheldConsumable_Base_C_GetBestSlottedItemToConsume, ConsumableItemCount) == 0x000008, "Member 'ITEM_HandheldConsumable_Base_C_GetBestSlottedItemToConsume::ConsumableItemCount' has a wrong offset!");
static_assert(offsetof(ITEM_HandheldConsumable_Base_C_GetBestSlottedItemToConsume, ConsumableSlotIndex) == 0x00000C, "Member 'ITEM_HandheldConsumable_Base_C_GetBestSlottedItemToConsume::ConsumableSlotIndex' has a wrong offset!");
static_assert(offsetof(ITEM_HandheldConsumable_Base_C_GetBestSlottedItemToConsume, SmallestStackCount) == 0x000010, "Member 'ITEM_HandheldConsumable_Base_C_GetBestSlottedItemToConsume::SmallestStackCount' has a wrong offset!");
static_assert(offsetof(ITEM_HandheldConsumable_Base_C_GetBestSlottedItemToConsume, BestSlotIndex) == 0x000014, "Member 'ITEM_HandheldConsumable_Base_C_GetBestSlottedItemToConsume::BestSlotIndex' has a wrong offset!");
static_assert(offsetof(ITEM_HandheldConsumable_Base_C_GetBestSlottedItemToConsume, Temp_int_Array_Index_Variable) == 0x000018, "Member 'ITEM_HandheldConsumable_Base_C_GetBestSlottedItemToConsume::Temp_int_Array_Index_Variable' has a wrong offset!");
static_assert(offsetof(ITEM_HandheldConsumable_Base_C_GetBestSlottedItemToConsume, Temp_int_Loop_Counter_Variable) == 0x00001C, "Member 'ITEM_HandheldConsumable_Base_C_GetBestSlottedItemToConsume::Temp_int_Loop_Counter_Variable' has a wrong offset!");
static_assert(offsetof(ITEM_HandheldConsumable_Base_C_GetBestSlottedItemToConsume, CallFunc_Add_IntInt_ReturnValue) == 0x000020, "Member 'ITEM_HandheldConsumable_Base_C_GetBestSlottedItemToConsume::CallFunc_Add_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(ITEM_HandheldConsumable_Base_C_GetBestSlottedItemToConsume, CallFunc_Less_IntInt_ReturnValue) == 0x000024, "Member 'ITEM_HandheldConsumable_Base_C_GetBestSlottedItemToConsume::CallFunc_Less_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(ITEM_HandheldConsumable_Base_C_GetBestSlottedItemToConsume, CallFunc_Map_Find_Value) == 0x000028, "Member 'ITEM_HandheldConsumable_Base_C_GetBestSlottedItemToConsume::CallFunc_Map_Find_Value' has a wrong offset!");
static_assert(offsetof(ITEM_HandheldConsumable_Base_C_GetBestSlottedItemToConsume, CallFunc_Map_Find_ReturnValue) == 0x00002C, "Member 'ITEM_HandheldConsumable_Base_C_GetBestSlottedItemToConsume::CallFunc_Map_Find_ReturnValue' has a wrong offset!");
static_assert(offsetof(ITEM_HandheldConsumable_Base_C_GetBestSlottedItemToConsume, CallFunc_GetSlotItem_Item) == 0x000030, "Member 'ITEM_HandheldConsumable_Base_C_GetBestSlottedItemToConsume::CallFunc_GetSlotItem_Item' has a wrong offset!");
static_assert(offsetof(ITEM_HandheldConsumable_Base_C_GetBestSlottedItemToConsume, CallFunc_Map_Keys_Keys) == 0x000038, "Member 'ITEM_HandheldConsumable_Base_C_GetBestSlottedItemToConsume::CallFunc_Map_Keys_Keys' has a wrong offset!");
static_assert(offsetof(ITEM_HandheldConsumable_Base_C_GetBestSlottedItemToConsume, K2Node_DynamicCast_AsITEM_Consumable_Base) == 0x000048, "Member 'ITEM_HandheldConsumable_Base_C_GetBestSlottedItemToConsume::K2Node_DynamicCast_AsITEM_Consumable_Base' has a wrong offset!");
static_assert(offsetof(ITEM_HandheldConsumable_Base_C_GetBestSlottedItemToConsume, K2Node_DynamicCast_bSuccess) == 0x000050, "Member 'ITEM_HandheldConsumable_Base_C_GetBestSlottedItemToConsume::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(ITEM_HandheldConsumable_Base_C_GetBestSlottedItemToConsume, CallFunc_Array_Get_Item) == 0x000054, "Member 'ITEM_HandheldConsumable_Base_C_GetBestSlottedItemToConsume::CallFunc_Array_Get_Item' has a wrong offset!");
static_assert(offsetof(ITEM_HandheldConsumable_Base_C_GetBestSlottedItemToConsume, CallFunc_Array_Length_ReturnValue) == 0x000058, "Member 'ITEM_HandheldConsumable_Base_C_GetBestSlottedItemToConsume::CallFunc_Array_Length_ReturnValue' has a wrong offset!");
static_assert(offsetof(ITEM_HandheldConsumable_Base_C_GetBestSlottedItemToConsume, CallFunc_Less_IntInt_ReturnValue_1) == 0x00005C, "Member 'ITEM_HandheldConsumable_Base_C_GetBestSlottedItemToConsume::CallFunc_Less_IntInt_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(ITEM_HandheldConsumable_Base_C_GetBestSlottedItemToConsume, CallFunc_Map_Length_ReturnValue) == 0x000060, "Member 'ITEM_HandheldConsumable_Base_C_GetBestSlottedItemToConsume::CallFunc_Map_Length_ReturnValue' has a wrong offset!");
static_assert(offsetof(ITEM_HandheldConsumable_Base_C_GetBestSlottedItemToConsume, CallFunc_Greater_IntInt_ReturnValue) == 0x000064, "Member 'ITEM_HandheldConsumable_Base_C_GetBestSlottedItemToConsume::CallFunc_Greater_IntInt_ReturnValue' has a wrong offset!");

// Function ITEM_HandheldConsumable_Base.ITEM_HandheldConsumable_Base_C.GetConsumableItems
// 0x0068 (0x0068 - 0x0000)
struct ITEM_HandheldConsumable_Base_C_GetConsumableItems final
{
public:
	TArray<class UITEM_ConsumableBase_C*>         ConsumableItems;                                   // 0x0000(0x0010)(Parm, OutParm)
	TArray<class UITEM_ConsumableBase_C*>         ConsumableItemArray;                               // 0x0010(0x0010)(Edit, BlueprintVisible)
	int32                                         Temp_int_Array_Index_Variable;                     // 0x0020(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Loop_Counter_Variable;                    // 0x0024(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue;                   // 0x0028(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_2C[0x4];                                       // 0x002C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<int32>                                 CallFunc_Map_Keys_Keys;                            // 0x0030(0x0010)(ReferenceParm)
	int32                                         CallFunc_Array_Length_ReturnValue;                 // 0x0040(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Get_Item;                           // 0x0044(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue;                  // 0x0048(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_49[0x7];                                       // 0x0049(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UITEM_Base_C*                           CallFunc_GetSlotItem_Item;                         // 0x0050(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UITEM_ConsumableBase_C*                 K2Node_DynamicCast_AsITEM_Consumable_Base;         // 0x0058(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0060(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_61[0x3];                                       // 0x0061(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Array_Add_ReturnValue;                    // 0x0064(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(ITEM_HandheldConsumable_Base_C_GetConsumableItems) == 0x000008, "Wrong alignment on ITEM_HandheldConsumable_Base_C_GetConsumableItems");
static_assert(sizeof(ITEM_HandheldConsumable_Base_C_GetConsumableItems) == 0x000068, "Wrong size on ITEM_HandheldConsumable_Base_C_GetConsumableItems");
static_assert(offsetof(ITEM_HandheldConsumable_Base_C_GetConsumableItems, ConsumableItems) == 0x000000, "Member 'ITEM_HandheldConsumable_Base_C_GetConsumableItems::ConsumableItems' has a wrong offset!");
static_assert(offsetof(ITEM_HandheldConsumable_Base_C_GetConsumableItems, ConsumableItemArray) == 0x000010, "Member 'ITEM_HandheldConsumable_Base_C_GetConsumableItems::ConsumableItemArray' has a wrong offset!");
static_assert(offsetof(ITEM_HandheldConsumable_Base_C_GetConsumableItems, Temp_int_Array_Index_Variable) == 0x000020, "Member 'ITEM_HandheldConsumable_Base_C_GetConsumableItems::Temp_int_Array_Index_Variable' has a wrong offset!");
static_assert(offsetof(ITEM_HandheldConsumable_Base_C_GetConsumableItems, Temp_int_Loop_Counter_Variable) == 0x000024, "Member 'ITEM_HandheldConsumable_Base_C_GetConsumableItems::Temp_int_Loop_Counter_Variable' has a wrong offset!");
static_assert(offsetof(ITEM_HandheldConsumable_Base_C_GetConsumableItems, CallFunc_Add_IntInt_ReturnValue) == 0x000028, "Member 'ITEM_HandheldConsumable_Base_C_GetConsumableItems::CallFunc_Add_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(ITEM_HandheldConsumable_Base_C_GetConsumableItems, CallFunc_Map_Keys_Keys) == 0x000030, "Member 'ITEM_HandheldConsumable_Base_C_GetConsumableItems::CallFunc_Map_Keys_Keys' has a wrong offset!");
static_assert(offsetof(ITEM_HandheldConsumable_Base_C_GetConsumableItems, CallFunc_Array_Length_ReturnValue) == 0x000040, "Member 'ITEM_HandheldConsumable_Base_C_GetConsumableItems::CallFunc_Array_Length_ReturnValue' has a wrong offset!");
static_assert(offsetof(ITEM_HandheldConsumable_Base_C_GetConsumableItems, CallFunc_Array_Get_Item) == 0x000044, "Member 'ITEM_HandheldConsumable_Base_C_GetConsumableItems::CallFunc_Array_Get_Item' has a wrong offset!");
static_assert(offsetof(ITEM_HandheldConsumable_Base_C_GetConsumableItems, CallFunc_Less_IntInt_ReturnValue) == 0x000048, "Member 'ITEM_HandheldConsumable_Base_C_GetConsumableItems::CallFunc_Less_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(ITEM_HandheldConsumable_Base_C_GetConsumableItems, CallFunc_GetSlotItem_Item) == 0x000050, "Member 'ITEM_HandheldConsumable_Base_C_GetConsumableItems::CallFunc_GetSlotItem_Item' has a wrong offset!");
static_assert(offsetof(ITEM_HandheldConsumable_Base_C_GetConsumableItems, K2Node_DynamicCast_AsITEM_Consumable_Base) == 0x000058, "Member 'ITEM_HandheldConsumable_Base_C_GetConsumableItems::K2Node_DynamicCast_AsITEM_Consumable_Base' has a wrong offset!");
static_assert(offsetof(ITEM_HandheldConsumable_Base_C_GetConsumableItems, K2Node_DynamicCast_bSuccess) == 0x000060, "Member 'ITEM_HandheldConsumable_Base_C_GetConsumableItems::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(ITEM_HandheldConsumable_Base_C_GetConsumableItems, CallFunc_Array_Add_ReturnValue) == 0x000064, "Member 'ITEM_HandheldConsumable_Base_C_GetConsumableItems::CallFunc_Array_Add_ReturnValue' has a wrong offset!");

// Function ITEM_HandheldConsumable_Base.ITEM_HandheldConsumable_Base_C.GetActiveConsumableItem
// 0x0008 (0x0008 - 0x0000)
struct ITEM_HandheldConsumable_Base_C_GetActiveConsumableItem final
{
public:
	class UITEM_ConsumableBase_C*                 Result;                                            // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(ITEM_HandheldConsumable_Base_C_GetActiveConsumableItem) == 0x000008, "Wrong alignment on ITEM_HandheldConsumable_Base_C_GetActiveConsumableItem");
static_assert(sizeof(ITEM_HandheldConsumable_Base_C_GetActiveConsumableItem) == 0x000008, "Wrong size on ITEM_HandheldConsumable_Base_C_GetActiveConsumableItem");
static_assert(offsetof(ITEM_HandheldConsumable_Base_C_GetActiveConsumableItem, Result) == 0x000000, "Member 'ITEM_HandheldConsumable_Base_C_GetActiveConsumableItem::Result' has a wrong offset!");

// Function ITEM_HandheldConsumable_Base.ITEM_HandheldConsumable_Base_C.SetActiveConsumableItem
// 0x0008 (0x0008 - 0x0000)
struct ITEM_HandheldConsumable_Base_C_SetActiveConsumableItem final
{
public:
	class UITEM_ConsumableBase_C*                 ConsumableItem;                                    // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(ITEM_HandheldConsumable_Base_C_SetActiveConsumableItem) == 0x000008, "Wrong alignment on ITEM_HandheldConsumable_Base_C_SetActiveConsumableItem");
static_assert(sizeof(ITEM_HandheldConsumable_Base_C_SetActiveConsumableItem) == 0x000008, "Wrong size on ITEM_HandheldConsumable_Base_C_SetActiveConsumableItem");
static_assert(offsetof(ITEM_HandheldConsumable_Base_C_SetActiveConsumableItem, ConsumableItem) == 0x000000, "Member 'ITEM_HandheldConsumable_Base_C_SetActiveConsumableItem::ConsumableItem' has a wrong offset!");

// Function ITEM_HandheldConsumable_Base.ITEM_HandheldConsumable_Base_C.GetTotalConsumableItemCount
// 0x0004 (0x0004 - 0x0000)
struct ITEM_HandheldConsumable_Base_C_GetTotalConsumableItemCount final
{
public:
	int32                                         Result;                                            // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(ITEM_HandheldConsumable_Base_C_GetTotalConsumableItemCount) == 0x000004, "Wrong alignment on ITEM_HandheldConsumable_Base_C_GetTotalConsumableItemCount");
static_assert(sizeof(ITEM_HandheldConsumable_Base_C_GetTotalConsumableItemCount) == 0x000004, "Wrong size on ITEM_HandheldConsumable_Base_C_GetTotalConsumableItemCount");
static_assert(offsetof(ITEM_HandheldConsumable_Base_C_GetTotalConsumableItemCount, Result) == 0x000000, "Member 'ITEM_HandheldConsumable_Base_C_GetTotalConsumableItemCount::Result' has a wrong offset!");

// Function ITEM_HandheldConsumable_Base.ITEM_HandheldConsumable_Base_C.GetHotbarIcon
// 0x0028 (0x0028 - 0x0000)
struct ITEM_HandheldConsumable_Base_C_GetHotbarIcon final
{
public:
	class UTexture*                               ResultIcon;                                        // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UGameInstance*                          CallFunc_GetGameInstance_ReturnValue;              // 0x0008(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UGI_SinglePlayer_C*                     K2Node_DynamicCast_AsGI_Single_Player;             // 0x0010(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0018(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_19[0x7];                                       // 0x0019(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UTextureRenderTarget2D*                 CallFunc_GetItemHotbarRenderTargetForItemClass_Result; // 0x0020(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(ITEM_HandheldConsumable_Base_C_GetHotbarIcon) == 0x000008, "Wrong alignment on ITEM_HandheldConsumable_Base_C_GetHotbarIcon");
static_assert(sizeof(ITEM_HandheldConsumable_Base_C_GetHotbarIcon) == 0x000028, "Wrong size on ITEM_HandheldConsumable_Base_C_GetHotbarIcon");
static_assert(offsetof(ITEM_HandheldConsumable_Base_C_GetHotbarIcon, ResultIcon) == 0x000000, "Member 'ITEM_HandheldConsumable_Base_C_GetHotbarIcon::ResultIcon' has a wrong offset!");
static_assert(offsetof(ITEM_HandheldConsumable_Base_C_GetHotbarIcon, CallFunc_GetGameInstance_ReturnValue) == 0x000008, "Member 'ITEM_HandheldConsumable_Base_C_GetHotbarIcon::CallFunc_GetGameInstance_ReturnValue' has a wrong offset!");
static_assert(offsetof(ITEM_HandheldConsumable_Base_C_GetHotbarIcon, K2Node_DynamicCast_AsGI_Single_Player) == 0x000010, "Member 'ITEM_HandheldConsumable_Base_C_GetHotbarIcon::K2Node_DynamicCast_AsGI_Single_Player' has a wrong offset!");
static_assert(offsetof(ITEM_HandheldConsumable_Base_C_GetHotbarIcon, K2Node_DynamicCast_bSuccess) == 0x000018, "Member 'ITEM_HandheldConsumable_Base_C_GetHotbarIcon::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(ITEM_HandheldConsumable_Base_C_GetHotbarIcon, CallFunc_GetItemHotbarRenderTargetForItemClass_Result) == 0x000020, "Member 'ITEM_HandheldConsumable_Base_C_GetHotbarIcon::CallFunc_GetItemHotbarRenderTargetForItemClass_Result' has a wrong offset!");

// Function ITEM_HandheldConsumable_Base.ITEM_HandheldConsumable_Base_C.GetHotbarDisplayName
// 0x0018 (0x0018 - 0x0000)
struct ITEM_HandheldConsumable_Base_C_GetHotbarDisplayName final
{
public:
	class FText                                   Result;                                            // 0x0000(0x0018)(Parm, OutParm)
};
static_assert(alignof(ITEM_HandheldConsumable_Base_C_GetHotbarDisplayName) == 0x000008, "Wrong alignment on ITEM_HandheldConsumable_Base_C_GetHotbarDisplayName");
static_assert(sizeof(ITEM_HandheldConsumable_Base_C_GetHotbarDisplayName) == 0x000018, "Wrong size on ITEM_HandheldConsumable_Base_C_GetHotbarDisplayName");
static_assert(offsetof(ITEM_HandheldConsumable_Base_C_GetHotbarDisplayName, Result) == 0x000000, "Member 'ITEM_HandheldConsumable_Base_C_GetHotbarDisplayName::Result' has a wrong offset!");

// Function ITEM_HandheldConsumable_Base.ITEM_HandheldConsumable_Base_C.GetHotbarCount
// 0x0004 (0x0004 - 0x0000)
struct ITEM_HandheldConsumable_Base_C_GetHotbarCount final
{
public:
	int32                                         ResultCount;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(ITEM_HandheldConsumable_Base_C_GetHotbarCount) == 0x000004, "Wrong alignment on ITEM_HandheldConsumable_Base_C_GetHotbarCount");
static_assert(sizeof(ITEM_HandheldConsumable_Base_C_GetHotbarCount) == 0x000004, "Wrong size on ITEM_HandheldConsumable_Base_C_GetHotbarCount");
static_assert(offsetof(ITEM_HandheldConsumable_Base_C_GetHotbarCount, ResultCount) == 0x000000, "Member 'ITEM_HandheldConsumable_Base_C_GetHotbarCount::ResultCount' has a wrong offset!");

// Function ITEM_HandheldConsumable_Base.ITEM_HandheldConsumable_Base_C.GetEquipState
// 0x0002 (0x0002 - 0x0000)
struct ITEM_HandheldConsumable_Base_C_GetEquipState final
{
public:
	bool                                          Result;                                            // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsEquipped_Result;                        // 0x0001(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(ITEM_HandheldConsumable_Base_C_GetEquipState) == 0x000001, "Wrong alignment on ITEM_HandheldConsumable_Base_C_GetEquipState");
static_assert(sizeof(ITEM_HandheldConsumable_Base_C_GetEquipState) == 0x000002, "Wrong size on ITEM_HandheldConsumable_Base_C_GetEquipState");
static_assert(offsetof(ITEM_HandheldConsumable_Base_C_GetEquipState, Result) == 0x000000, "Member 'ITEM_HandheldConsumable_Base_C_GetEquipState::Result' has a wrong offset!");
static_assert(offsetof(ITEM_HandheldConsumable_Base_C_GetEquipState, CallFunc_IsEquipped_Result) == 0x000001, "Member 'ITEM_HandheldConsumable_Base_C_GetEquipState::CallFunc_IsEquipped_Result' has a wrong offset!");

// Function ITEM_HandheldConsumable_Base.ITEM_HandheldConsumable_Base_C.TryUseConsumable
// 0x0028 (0x0028 - 0x0000)
struct ITEM_HandheldConsumable_Base_C_TryUseConsumable final
{
public:
	bool                                          Result;                                            // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UITEM_ConsumableBase_C*                 ConsumeableToUse;                                  // 0x0008(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class APAWN_SystemShockCharacter_C*           CallFunc_GetOwnerCharacter_Character;              // 0x0010(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Activate_Result;                          // 0x0018(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0019(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_1A[0x6];                                       // 0x001A(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class UITEM_ConsumableBase_C*                 CallFunc_GetBestSlottedItemToConsume_ConsumableItem; // 0x0020(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(ITEM_HandheldConsumable_Base_C_TryUseConsumable) == 0x000008, "Wrong alignment on ITEM_HandheldConsumable_Base_C_TryUseConsumable");
static_assert(sizeof(ITEM_HandheldConsumable_Base_C_TryUseConsumable) == 0x000028, "Wrong size on ITEM_HandheldConsumable_Base_C_TryUseConsumable");
static_assert(offsetof(ITEM_HandheldConsumable_Base_C_TryUseConsumable, Result) == 0x000000, "Member 'ITEM_HandheldConsumable_Base_C_TryUseConsumable::Result' has a wrong offset!");
static_assert(offsetof(ITEM_HandheldConsumable_Base_C_TryUseConsumable, ConsumeableToUse) == 0x000008, "Member 'ITEM_HandheldConsumable_Base_C_TryUseConsumable::ConsumeableToUse' has a wrong offset!");
static_assert(offsetof(ITEM_HandheldConsumable_Base_C_TryUseConsumable, CallFunc_GetOwnerCharacter_Character) == 0x000010, "Member 'ITEM_HandheldConsumable_Base_C_TryUseConsumable::CallFunc_GetOwnerCharacter_Character' has a wrong offset!");
static_assert(offsetof(ITEM_HandheldConsumable_Base_C_TryUseConsumable, CallFunc_Activate_Result) == 0x000018, "Member 'ITEM_HandheldConsumable_Base_C_TryUseConsumable::CallFunc_Activate_Result' has a wrong offset!");
static_assert(offsetof(ITEM_HandheldConsumable_Base_C_TryUseConsumable, CallFunc_IsValid_ReturnValue) == 0x000019, "Member 'ITEM_HandheldConsumable_Base_C_TryUseConsumable::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(ITEM_HandheldConsumable_Base_C_TryUseConsumable, CallFunc_GetBestSlottedItemToConsume_ConsumableItem) == 0x000020, "Member 'ITEM_HandheldConsumable_Base_C_TryUseConsumable::CallFunc_GetBestSlottedItemToConsume_ConsumableItem' has a wrong offset!");

// Function ITEM_HandheldConsumable_Base.ITEM_HandheldConsumable_Base_C.ShouldAutoEquip
// 0x000C (0x000C - 0x0000)
struct ITEM_HandheldConsumable_Base_C_ShouldAutoEquip final
{
public:
	bool                                          Result;                                            // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Subtract_IntInt_ReturnValue;              // 0x0004(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Greater_IntInt_ReturnValue;               // 0x0008(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BooleanAND_ReturnValue;                   // 0x0009(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(ITEM_HandheldConsumable_Base_C_ShouldAutoEquip) == 0x000004, "Wrong alignment on ITEM_HandheldConsumable_Base_C_ShouldAutoEquip");
static_assert(sizeof(ITEM_HandheldConsumable_Base_C_ShouldAutoEquip) == 0x00000C, "Wrong size on ITEM_HandheldConsumable_Base_C_ShouldAutoEquip");
static_assert(offsetof(ITEM_HandheldConsumable_Base_C_ShouldAutoEquip, Result) == 0x000000, "Member 'ITEM_HandheldConsumable_Base_C_ShouldAutoEquip::Result' has a wrong offset!");
static_assert(offsetof(ITEM_HandheldConsumable_Base_C_ShouldAutoEquip, CallFunc_Subtract_IntInt_ReturnValue) == 0x000004, "Member 'ITEM_HandheldConsumable_Base_C_ShouldAutoEquip::CallFunc_Subtract_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(ITEM_HandheldConsumable_Base_C_ShouldAutoEquip, CallFunc_Greater_IntInt_ReturnValue) == 0x000008, "Member 'ITEM_HandheldConsumable_Base_C_ShouldAutoEquip::CallFunc_Greater_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(ITEM_HandheldConsumable_Base_C_ShouldAutoEquip, CallFunc_BooleanAND_ReturnValue) == 0x000009, "Member 'ITEM_HandheldConsumable_Base_C_ShouldAutoEquip::CallFunc_BooleanAND_ReturnValue' has a wrong offset!");

// Function ITEM_HandheldConsumable_Base.ITEM_HandheldConsumable_Base_C.ShouldForceEquip
// 0x000C (0x000C - 0x0000)
struct ITEM_HandheldConsumable_Base_C_ShouldForceEquip final
{
public:
	bool                                          Result;                                            // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Subtract_IntInt_ReturnValue;              // 0x0004(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Greater_IntInt_ReturnValue;               // 0x0008(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BooleanAND_ReturnValue;                   // 0x0009(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(ITEM_HandheldConsumable_Base_C_ShouldForceEquip) == 0x000004, "Wrong alignment on ITEM_HandheldConsumable_Base_C_ShouldForceEquip");
static_assert(sizeof(ITEM_HandheldConsumable_Base_C_ShouldForceEquip) == 0x00000C, "Wrong size on ITEM_HandheldConsumable_Base_C_ShouldForceEquip");
static_assert(offsetof(ITEM_HandheldConsumable_Base_C_ShouldForceEquip, Result) == 0x000000, "Member 'ITEM_HandheldConsumable_Base_C_ShouldForceEquip::Result' has a wrong offset!");
static_assert(offsetof(ITEM_HandheldConsumable_Base_C_ShouldForceEquip, CallFunc_Subtract_IntInt_ReturnValue) == 0x000004, "Member 'ITEM_HandheldConsumable_Base_C_ShouldForceEquip::CallFunc_Subtract_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(ITEM_HandheldConsumable_Base_C_ShouldForceEquip, CallFunc_Greater_IntInt_ReturnValue) == 0x000008, "Member 'ITEM_HandheldConsumable_Base_C_ShouldForceEquip::CallFunc_Greater_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(ITEM_HandheldConsumable_Base_C_ShouldForceEquip, CallFunc_BooleanAND_ReturnValue) == 0x000009, "Member 'ITEM_HandheldConsumable_Base_C_ShouldForceEquip::CallFunc_BooleanAND_ReturnValue' has a wrong offset!");

// Function ITEM_HandheldConsumable_Base.ITEM_HandheldConsumable_Base_C.OnInventoryChanged
// 0x0010 (0x0010 - 0x0000)
struct ITEM_HandheldConsumable_Base_C_OnInventoryChanged final
{
public:
	class UCOMP_Inventory_C*                      PrevInventory;                                     // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Result;                                            // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(ITEM_HandheldConsumable_Base_C_OnInventoryChanged) == 0x000008, "Wrong alignment on ITEM_HandheldConsumable_Base_C_OnInventoryChanged");
static_assert(sizeof(ITEM_HandheldConsumable_Base_C_OnInventoryChanged) == 0x000010, "Wrong size on ITEM_HandheldConsumable_Base_C_OnInventoryChanged");
static_assert(offsetof(ITEM_HandheldConsumable_Base_C_OnInventoryChanged, PrevInventory) == 0x000000, "Member 'ITEM_HandheldConsumable_Base_C_OnInventoryChanged::PrevInventory' has a wrong offset!");
static_assert(offsetof(ITEM_HandheldConsumable_Base_C_OnInventoryChanged, Result) == 0x000008, "Member 'ITEM_HandheldConsumable_Base_C_OnInventoryChanged::Result' has a wrong offset!");

}

