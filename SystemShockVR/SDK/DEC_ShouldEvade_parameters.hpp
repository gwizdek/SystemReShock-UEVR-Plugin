#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: DEC_ShouldEvade

#include "Basic.hpp"

#include "CoreUObject_structs.hpp"


namespace SDK::Params
{

// Function DEC_ShouldEvade.DEC_ShouldEvade_C.PerformConditionCheckAI
// 0x0030 (0x0030 - 0x0000)
struct DEC_ShouldEvade_C_PerformConditionCheckAI final
{
public:
	class AAIController*                          OwnerController;                                   // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class APawn*                                  ControlledPawn;                                    // 0x0008(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          ReturnValue;                                       // 0x0010(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class APAWN_Enemy_C*                          EnemyPawn;                                         // 0x0018(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class APAWN_Enemy_C*                          K2Node_DynamicCast_AsPAWN_Enemy;                   // 0x0020(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0028(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_HasAvailableEvadeCombo_Result;            // 0x0029(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsUnderImmediateThreat_Result;            // 0x002A(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(DEC_ShouldEvade_C_PerformConditionCheckAI) == 0x000008, "Wrong alignment on DEC_ShouldEvade_C_PerformConditionCheckAI");
static_assert(sizeof(DEC_ShouldEvade_C_PerformConditionCheckAI) == 0x000030, "Wrong size on DEC_ShouldEvade_C_PerformConditionCheckAI");
static_assert(offsetof(DEC_ShouldEvade_C_PerformConditionCheckAI, OwnerController) == 0x000000, "Member 'DEC_ShouldEvade_C_PerformConditionCheckAI::OwnerController' has a wrong offset!");
static_assert(offsetof(DEC_ShouldEvade_C_PerformConditionCheckAI, ControlledPawn) == 0x000008, "Member 'DEC_ShouldEvade_C_PerformConditionCheckAI::ControlledPawn' has a wrong offset!");
static_assert(offsetof(DEC_ShouldEvade_C_PerformConditionCheckAI, ReturnValue) == 0x000010, "Member 'DEC_ShouldEvade_C_PerformConditionCheckAI::ReturnValue' has a wrong offset!");
static_assert(offsetof(DEC_ShouldEvade_C_PerformConditionCheckAI, EnemyPawn) == 0x000018, "Member 'DEC_ShouldEvade_C_PerformConditionCheckAI::EnemyPawn' has a wrong offset!");
static_assert(offsetof(DEC_ShouldEvade_C_PerformConditionCheckAI, K2Node_DynamicCast_AsPAWN_Enemy) == 0x000020, "Member 'DEC_ShouldEvade_C_PerformConditionCheckAI::K2Node_DynamicCast_AsPAWN_Enemy' has a wrong offset!");
static_assert(offsetof(DEC_ShouldEvade_C_PerformConditionCheckAI, K2Node_DynamicCast_bSuccess) == 0x000028, "Member 'DEC_ShouldEvade_C_PerformConditionCheckAI::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(DEC_ShouldEvade_C_PerformConditionCheckAI, CallFunc_HasAvailableEvadeCombo_Result) == 0x000029, "Member 'DEC_ShouldEvade_C_PerformConditionCheckAI::CallFunc_HasAvailableEvadeCombo_Result' has a wrong offset!");
static_assert(offsetof(DEC_ShouldEvade_C_PerformConditionCheckAI, CallFunc_IsUnderImmediateThreat_Result) == 0x00002A, "Member 'DEC_ShouldEvade_C_PerformConditionCheckAI::CallFunc_IsUnderImmediateThreat_Result' has a wrong offset!");

// Function DEC_ShouldEvade.DEC_ShouldEvade_C.HasNearbyTarget
// 0x0068 (0x0068 - 0x0000)
struct DEC_ShouldEvade_C_HasNearbyTarget final
{
public:
	class APAWN_Enemy_C*                          Pawn;                                              // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Result;                                            // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Temp_int_Array_Index_Variable;                     // 0x000C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Loop_Counter_Variable;                    // 0x0010(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue;                   // 0x0014(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_K2_GetActorLocation_ReturnValue;          // 0x0018(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_24[0x4];                                       // 0x0024(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class UOBJ_DetectionEvent_C*>          CallFunc_GetEventsWithDetectionState_DetectionEvents; // 0x0028(0x0010)(ReferenceParm)
	class UOBJ_DetectionEvent_C*                  CallFunc_Array_Get_Item;                           // 0x0038(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Length_ReturnValue;                 // 0x0040(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_GetEventLocation_EventLocation;           // 0x0044(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue;                  // 0x0050(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_51[0x3];                                       // 0x0051(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                CallFunc_Subtract_VectorVector_ReturnValue;        // 0x0054(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_VSize_ReturnValue;                        // 0x0060(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_FloatFloat_ReturnValue;              // 0x0064(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(DEC_ShouldEvade_C_HasNearbyTarget) == 0x000008, "Wrong alignment on DEC_ShouldEvade_C_HasNearbyTarget");
static_assert(sizeof(DEC_ShouldEvade_C_HasNearbyTarget) == 0x000068, "Wrong size on DEC_ShouldEvade_C_HasNearbyTarget");
static_assert(offsetof(DEC_ShouldEvade_C_HasNearbyTarget, Pawn) == 0x000000, "Member 'DEC_ShouldEvade_C_HasNearbyTarget::Pawn' has a wrong offset!");
static_assert(offsetof(DEC_ShouldEvade_C_HasNearbyTarget, Result) == 0x000008, "Member 'DEC_ShouldEvade_C_HasNearbyTarget::Result' has a wrong offset!");
static_assert(offsetof(DEC_ShouldEvade_C_HasNearbyTarget, Temp_int_Array_Index_Variable) == 0x00000C, "Member 'DEC_ShouldEvade_C_HasNearbyTarget::Temp_int_Array_Index_Variable' has a wrong offset!");
static_assert(offsetof(DEC_ShouldEvade_C_HasNearbyTarget, Temp_int_Loop_Counter_Variable) == 0x000010, "Member 'DEC_ShouldEvade_C_HasNearbyTarget::Temp_int_Loop_Counter_Variable' has a wrong offset!");
static_assert(offsetof(DEC_ShouldEvade_C_HasNearbyTarget, CallFunc_Add_IntInt_ReturnValue) == 0x000014, "Member 'DEC_ShouldEvade_C_HasNearbyTarget::CallFunc_Add_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(DEC_ShouldEvade_C_HasNearbyTarget, CallFunc_K2_GetActorLocation_ReturnValue) == 0x000018, "Member 'DEC_ShouldEvade_C_HasNearbyTarget::CallFunc_K2_GetActorLocation_ReturnValue' has a wrong offset!");
static_assert(offsetof(DEC_ShouldEvade_C_HasNearbyTarget, CallFunc_GetEventsWithDetectionState_DetectionEvents) == 0x000028, "Member 'DEC_ShouldEvade_C_HasNearbyTarget::CallFunc_GetEventsWithDetectionState_DetectionEvents' has a wrong offset!");
static_assert(offsetof(DEC_ShouldEvade_C_HasNearbyTarget, CallFunc_Array_Get_Item) == 0x000038, "Member 'DEC_ShouldEvade_C_HasNearbyTarget::CallFunc_Array_Get_Item' has a wrong offset!");
static_assert(offsetof(DEC_ShouldEvade_C_HasNearbyTarget, CallFunc_Array_Length_ReturnValue) == 0x000040, "Member 'DEC_ShouldEvade_C_HasNearbyTarget::CallFunc_Array_Length_ReturnValue' has a wrong offset!");
static_assert(offsetof(DEC_ShouldEvade_C_HasNearbyTarget, CallFunc_GetEventLocation_EventLocation) == 0x000044, "Member 'DEC_ShouldEvade_C_HasNearbyTarget::CallFunc_GetEventLocation_EventLocation' has a wrong offset!");
static_assert(offsetof(DEC_ShouldEvade_C_HasNearbyTarget, CallFunc_Less_IntInt_ReturnValue) == 0x000050, "Member 'DEC_ShouldEvade_C_HasNearbyTarget::CallFunc_Less_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(DEC_ShouldEvade_C_HasNearbyTarget, CallFunc_Subtract_VectorVector_ReturnValue) == 0x000054, "Member 'DEC_ShouldEvade_C_HasNearbyTarget::CallFunc_Subtract_VectorVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(DEC_ShouldEvade_C_HasNearbyTarget, CallFunc_VSize_ReturnValue) == 0x000060, "Member 'DEC_ShouldEvade_C_HasNearbyTarget::CallFunc_VSize_ReturnValue' has a wrong offset!");
static_assert(offsetof(DEC_ShouldEvade_C_HasNearbyTarget, CallFunc_Less_FloatFloat_ReturnValue) == 0x000064, "Member 'DEC_ShouldEvade_C_HasNearbyTarget::CallFunc_Less_FloatFloat_ReturnValue' has a wrong offset!");

// Function DEC_ShouldEvade.DEC_ShouldEvade_C.HasAvailableEvadeCombo
// 0x0010 (0x0010 - 0x0000)
struct DEC_ShouldEvade_C_HasAvailableEvadeCombo final
{
public:
	class APAWN_Enemy_C*                          Pawn;                                              // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Result;                                            // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_CanStartAnyComboOfType_Result;            // 0x0009(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(DEC_ShouldEvade_C_HasAvailableEvadeCombo) == 0x000008, "Wrong alignment on DEC_ShouldEvade_C_HasAvailableEvadeCombo");
static_assert(sizeof(DEC_ShouldEvade_C_HasAvailableEvadeCombo) == 0x000010, "Wrong size on DEC_ShouldEvade_C_HasAvailableEvadeCombo");
static_assert(offsetof(DEC_ShouldEvade_C_HasAvailableEvadeCombo, Pawn) == 0x000000, "Member 'DEC_ShouldEvade_C_HasAvailableEvadeCombo::Pawn' has a wrong offset!");
static_assert(offsetof(DEC_ShouldEvade_C_HasAvailableEvadeCombo, Result) == 0x000008, "Member 'DEC_ShouldEvade_C_HasAvailableEvadeCombo::Result' has a wrong offset!");
static_assert(offsetof(DEC_ShouldEvade_C_HasAvailableEvadeCombo, CallFunc_CanStartAnyComboOfType_Result) == 0x000009, "Member 'DEC_ShouldEvade_C_HasAvailableEvadeCombo::CallFunc_CanStartAnyComboOfType_Result' has a wrong offset!");

}

