#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: HARDWARE_TargetIdentifier_Base

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "AttributeSystem_structs.hpp"
#include "ENUM_EnemyType_structs.hpp"
#include "ITEM_HardwareBase_classes.hpp"


namespace SDK
{

// BlueprintGeneratedClass HARDWARE_TargetIdentifier_Base.HARDWARE_TargetIdentifier_Base_C
// 0x0118 (0x0398 - 0x0280)
class UHARDWARE_TargetIdentifier_Base_C : public UITEM_HardwareBase_C
{
public:
	float                                         TargetTraceRadius;                                 // 0x0280(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         TargetIdentifierRange;                             // 0x0284(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         TargetIdentifierHackHalfAngle;                     // 0x0288(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         TargetAcquireHoldDuration;                         // 0x028C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         TargetHackHoldDuration;                            // 0x0290(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         TargetHackProgress;                                // 0x0294(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         HackEnergyCost;                                    // 0x0298(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_29C[0x4];                                      // 0x029C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class AActor*                                 AcquiredTargetActor;                               // 0x02A0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, SaveGame, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 CandidateTargetActor;                              // 0x02A8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	FMulticastInlineDelegateProperty_             OnAcquiredTargetChanged;                           // 0x02B0(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)
	FMulticastInlineDelegateProperty_             OnCandidateTargetChanged;                          // 0x02C0(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)
	struct FTimerHandle                           TickTimerHandle;                                   // 0x02D0(0x0008)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	FMulticastInlineDelegateProperty_             OnHackingProgressChanged;                          // 0x02D8(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)
	struct FAttribModApplyData                    AlertnessModApplyData;                             // 0x02E8(0x00A0)(Edit, BlueprintVisible, DisableEditOnInstance)
	struct FDataTableRowHandle                    HackAchievementHandle;                             // 0x0388(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor)

public:
	void OnAcquiredTargetChanged__DelegateSignature(class AActor* Actor);
	void OnCandidateTargetChanged__DelegateSignature(class AActor* Actor);
	void OnHackingProgressChanged__DelegateSignature(float Progress);
	void HasEnergyForHack(bool* Result);
	void IsHackingSupported(bool* Result);
	void CanHackAcquiredTarget(bool* Result);
	void IsActorInTargetingRange(class AActor* TargetActor, bool* Result);
	void IsActorInTargetingCone(class AActor* TargetActor, bool* Result);
	void GetTargetIdentifierRange(float* Range);
	void GetAcquiredTargetActor(class AActor** Result);
	void GetCandidateTargetActor(class AActor** Result);
	void GetTargetAcquireHoldDuration(float* Duration);
	void GetTargetHackHoldDuration(float* Duration);
	void TryAcquireCandidateActor(bool* Result);
	void TryUnacquireTargetActor(bool* Result);
	void TryStartUploadingHackToAcquiredTarget(bool* Result);
	void TryStopUploadingHackToCurrentTarget(bool* Result);
	void ApplyHackToAcquiredTarget();
	void PerformTargetTrace(class AActor** ResultActor);
	void SetTargetHackProgress(float Progress);
	void ForceStartNextTargetTick();
	void TryStartTargetTicks();
	void TryStopTargetTicks();
	void OnUpgradedItem(class UITEM_UpgradeBase_C* PreviousItem, bool* Result);
	void EVENT_OnTargetTick();
	void UpdateHardwareState(bool IsEnabled, bool* Result);
	void EVENT_OnHackQueryFinished(bool bResult, const TArray<struct FVector4>& WeightedWorldLocations);
	void GetHackModCategoryName(class FName* Result);
	void GetHardwareFeatures(TArray<struct FSTRUCT_HardwareFeature>* Result);
	void OnBeginPlay();

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"HARDWARE_TargetIdentifier_Base_C">();
	}
	static class UHARDWARE_TargetIdentifier_Base_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<UHARDWARE_TargetIdentifier_Base_C>();
	}
};
static_assert(alignof(UHARDWARE_TargetIdentifier_Base_C) == 0x000008, "Wrong alignment on UHARDWARE_TargetIdentifier_Base_C");
static_assert(sizeof(UHARDWARE_TargetIdentifier_Base_C) == 0x000398, "Wrong size on UHARDWARE_TargetIdentifier_Base_C");
static_assert(offsetof(UHARDWARE_TargetIdentifier_Base_C, TargetTraceRadius) == 0x000280, "Member 'UHARDWARE_TargetIdentifier_Base_C::TargetTraceRadius' has a wrong offset!");
static_assert(offsetof(UHARDWARE_TargetIdentifier_Base_C, TargetIdentifierRange) == 0x000284, "Member 'UHARDWARE_TargetIdentifier_Base_C::TargetIdentifierRange' has a wrong offset!");
static_assert(offsetof(UHARDWARE_TargetIdentifier_Base_C, TargetIdentifierHackHalfAngle) == 0x000288, "Member 'UHARDWARE_TargetIdentifier_Base_C::TargetIdentifierHackHalfAngle' has a wrong offset!");
static_assert(offsetof(UHARDWARE_TargetIdentifier_Base_C, TargetAcquireHoldDuration) == 0x00028C, "Member 'UHARDWARE_TargetIdentifier_Base_C::TargetAcquireHoldDuration' has a wrong offset!");
static_assert(offsetof(UHARDWARE_TargetIdentifier_Base_C, TargetHackHoldDuration) == 0x000290, "Member 'UHARDWARE_TargetIdentifier_Base_C::TargetHackHoldDuration' has a wrong offset!");
static_assert(offsetof(UHARDWARE_TargetIdentifier_Base_C, TargetHackProgress) == 0x000294, "Member 'UHARDWARE_TargetIdentifier_Base_C::TargetHackProgress' has a wrong offset!");
static_assert(offsetof(UHARDWARE_TargetIdentifier_Base_C, HackEnergyCost) == 0x000298, "Member 'UHARDWARE_TargetIdentifier_Base_C::HackEnergyCost' has a wrong offset!");
static_assert(offsetof(UHARDWARE_TargetIdentifier_Base_C, AcquiredTargetActor) == 0x0002A0, "Member 'UHARDWARE_TargetIdentifier_Base_C::AcquiredTargetActor' has a wrong offset!");
static_assert(offsetof(UHARDWARE_TargetIdentifier_Base_C, CandidateTargetActor) == 0x0002A8, "Member 'UHARDWARE_TargetIdentifier_Base_C::CandidateTargetActor' has a wrong offset!");
static_assert(offsetof(UHARDWARE_TargetIdentifier_Base_C, OnAcquiredTargetChanged) == 0x0002B0, "Member 'UHARDWARE_TargetIdentifier_Base_C::OnAcquiredTargetChanged' has a wrong offset!");
static_assert(offsetof(UHARDWARE_TargetIdentifier_Base_C, OnCandidateTargetChanged) == 0x0002C0, "Member 'UHARDWARE_TargetIdentifier_Base_C::OnCandidateTargetChanged' has a wrong offset!");
static_assert(offsetof(UHARDWARE_TargetIdentifier_Base_C, TickTimerHandle) == 0x0002D0, "Member 'UHARDWARE_TargetIdentifier_Base_C::TickTimerHandle' has a wrong offset!");
static_assert(offsetof(UHARDWARE_TargetIdentifier_Base_C, OnHackingProgressChanged) == 0x0002D8, "Member 'UHARDWARE_TargetIdentifier_Base_C::OnHackingProgressChanged' has a wrong offset!");
static_assert(offsetof(UHARDWARE_TargetIdentifier_Base_C, AlertnessModApplyData) == 0x0002E8, "Member 'UHARDWARE_TargetIdentifier_Base_C::AlertnessModApplyData' has a wrong offset!");
static_assert(offsetof(UHARDWARE_TargetIdentifier_Base_C, HackAchievementHandle) == 0x000388, "Member 'UHARDWARE_TargetIdentifier_Base_C::HackAchievementHandle' has a wrong offset!");

}

