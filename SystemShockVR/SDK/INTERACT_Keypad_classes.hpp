#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: INTERACT_Keypad

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "ENUM_KeypadState_structs.hpp"
#include "INTERACT_Focusable_Base_classes.hpp"
#include "ENUM_InteractionType_structs.hpp"


namespace SDK
{

// BlueprintGeneratedClass INTERACT_Keypad.INTERACT_Keypad_C
// 0x0210 (0x0598 - 0x0388)
class AINTERACT_Keypad_C final : public AINTERACT_Focusable_Base_C
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame_INTERACT_Keypad_C;                  // 0x0388(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	class UCOMP_AttribManager_C*                  COMP_AttribManager;                                // 0x0390(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USceneComponent*                        FocusNode;                                         // 0x0398(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UBoxComponent*                          TargetBoxPanel;                                    // 0x03A0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UBoxComponent*                          TargetBoxBack;                                     // 0x03A8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UBoxComponent*                          TargetBoxClear;                                    // 0x03B0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UBoxComponent*                          TargetBox9;                                        // 0x03B8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UBoxComponent*                          TargetBox8;                                        // 0x03C0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UBoxComponent*                          TargetBox7;                                        // 0x03C8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UBoxComponent*                          TargetBox6;                                        // 0x03D0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UBoxComponent*                          TargetBox5;                                        // 0x03D8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UBoxComponent*                          TargetBox4;                                        // 0x03E0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UBoxComponent*                          TargetBox3;                                        // 0x03E8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UBoxComponent*                          TargetBox2;                                        // 0x03F0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UBoxComponent*                          TargetBox1;                                        // 0x03F8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UBoxComponent*                          TargetBox0;                                        // 0x0400(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UCOMP_VoxelCullable_C*                  COMP_VoxelCullable;                                // 0x0408(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UCOMP_ScannableObject_C*                COMP_ScannableObject;                              // 0x0410(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USkeletalMeshComponent*                 KeypadMesh;                                        // 0x0418(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class FText                                   InvalidKeycode;                                    // 0x0420(0x0018)(Edit, BlueprintVisible)
	class FText                                   QuestLockMessage;                                  // 0x0438(0x0018)(Edit, BlueprintVisible)
	class AINTERACT_Base_C*                       TargetInteractable;                                // 0x0450(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FString                                 CurrentKeycodeString;                              // 0x0458(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, SaveGame, HasGetValueTypeHash)
	class AINTERACT_Base_C*                       OnLocked_TargetInteractable;                       // 0x0468(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash)
	struct FDataTableRowHandle                    KeycodeHandle;                                     // 0x0470(0x0010)(Edit, BlueprintVisible, NoDestructor)
	int32                                         TargetKeycodeValue;                                // 0x0480(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         StateTimestamp;                                    // 0x0484(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, SaveGame, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ENUM_KeypadState                              KeypadState;                                       // 0x0488(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, SaveGame, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_489[0x3];                                      // 0x0489(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         ErrorPulses;                                       // 0x048C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash)
	float                                         PulseRate;                                         // 0x0490(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash)
	bool                                          IsFirstPulse;                                      // 0x0494(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, SaveGame, IsPlainOldData, NoDestructor)
	uint8                                         Pad_495[0x3];                                      // 0x0495(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         MeterValueDataIndex;                               // 0x0498(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         MeterColorDataIndex;                               // 0x049C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         NumberColorDataIndex;                              // 0x04A0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         DefaultDigitValue;                                 // 0x04A4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         IdleDigitStrength;                                 // 0x04A8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         EntryDigitStrength;                                // 0x04AC(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         StrengthChangeRate;                                // 0x04B0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          IsAccepted;                                        // 0x04B4(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          IsPowered;                                         // 0x04B5(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          PulseState;                                        // 0x04B6(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_4B7[0x1];                                      // 0x04B7(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	struct FDataTableRowHandle                    RequiredStoryQuest;                                // 0x04B8(0x0010)(Edit, BlueprintVisible, NoDestructor)
	TArray<class AINTERACT_Base_C*>               UnlockInteracts;                                   // 0x04C8(0x0010)(Edit, BlueprintVisible, DisableEditOnTemplate)
	bool                                          IsLockedByQuest;                                   // 0x04D8(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_4D9[0x7];                                      // 0x04D9(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FDataTableRowHandle                    CompleteTutorialOnKeypadEntry;                     // 0x04E0(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor)
	bool                                          CreateSoundDetectionEvent;                         // 0x04F0(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay)
	uint8                                         Pad_4F1[0x3];                                      // 0x04F1(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         SoundDetectionEventDelay;                          // 0x04F4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash)
	struct FTimerHandle                           SoundDetectionEventTimer;                          // 0x04F8(0x0008)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	TSoftObjectPtr<class USoundCue>               SuccessCue;                                        // 0x0500(0x0028)(Edit, BlueprintVisible, HasGetValueTypeHash)
	TSoftObjectPtr<class USoundCue>               FailureCue;                                        // 0x0528(0x0028)(Edit, BlueprintVisible, HasGetValueTypeHash)
	TSoftObjectPtr<class USoundCue>               ErrorCue;                                          // 0x0550(0x0028)(Edit, BlueprintVisible, HasGetValueTypeHash)
	TArray<float>                                 CurrentStrengthPerDigit;                           // 0x0578(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance)
	TArray<float>                                 TargetStrengthPerDigit;                            // 0x0588(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance)

public:
	void ExecuteUbergraph_INTERACT_Keypad(int32 EntryPoint);
	void BndEvt__COMP_VoxelCullable_K2Node_ComponentBoundEvent_0_CullableVisibilitySignature__DelegateSignature(bool bVisibleState);
	void ReceiveBeginPlay();
	void ReceiveTick(float DeltaSeconds);
	void UserConstructionScript();
	void IsKeypadFunctional(bool* Result);
	void GetScreenMesh(class UMeshComponent** MeshComponent);
	void GetTargetDigitCount(int32* Result);
	void GetKeyFromBoxComponent(class UBoxComponent* BoxCollision, int32* Result);
	void InitializeKeypad();
	void InitializeAttributes();
	void UpdateKeypad(float DeltaTime);
	void ClearKeypad();
	void EraseLastKeypadEntry();
	void RecordKeypadEntry(int32 EntryValue, struct FSTRUCT_InteractResults* InteractResults);
	void UpdateErrorState();
	void UpdateValidState();
	void UpdateMeshEmissiveStrength(float Scale);
	void UpdateKeyParameters(bool ReceivedKeyEntry);
	void SetErrorParameters(float ErrorStrength);
	void SetAcceptParameters(float AcceptStrength);
	void SetMeterParameter(float Progress);
	void ResetKeyParameters(int32 StartIndex);
	void UpdateMaterialStrength(float DeltaTime, bool* Finished);
	void EVENT_OnStoryQuestChanged(class FName Quest, bool State);
	void OnLockedInteraction();
	void UpdateMaterialFromKeycodeString();
	void TryCompleteKeypadEntryTutorial();
	void EVENT_CreateSoundDetectionEvent();
	void TryPressKeypadDigit(int32 Digit, struct FSTRUCT_InteractResults* InteractResults);
	void TryPressKeypadClear(bool* Result);
	void TryPressKeypadEraseLast(bool* Result);
	void GetBoxComponentFromKey(int32 Digit, class UBoxComponent** BoxComponent);
	void CanResumeChannelingInteraction(bool* Result);
	void GetFocusWorldTransform(struct FTransform* Transform);
	void CycleFocusedPrimitiveComponent(class UPrimitiveComponent* CursorPrimitive, bool Vertical, bool Previous);
	void UpdateNumberColor(bool Valid);
	void UnlockAndTargetInteractables();
	void UpdateKeypadVisibility(bool VisibilityState);
	void CanInteractWithTargetInteractable(bool* Result, class FText* FailMessage);
	void ShouldFocusOnInteract(class AController* Controller, bool* Result);
	void EVENT_OnDisableAttribChanged(float CurrValue, float LastValue);
	void GetTargetShape(class UPrimitiveComponent* CursorPrimitive, class UShapeComponent** ShapeComponent);
	void CanModifyInteractPower(bool* Result);
	void SetInteractPowered(bool State, bool* Result);
	bool ShouldSaveActor(struct FStreamingSaveGameActorParams* Params_0);
	void TryInteract(class AActor* SourceActor, class UPrimitiveComponent* CursorPrimitive, ENUM_InteractionType InteractionType, struct FSTRUCT_InteractResults* InteractResults);

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"INTERACT_Keypad_C">();
	}
	static class AINTERACT_Keypad_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<AINTERACT_Keypad_C>();
	}
};
static_assert(alignof(AINTERACT_Keypad_C) == 0x000008, "Wrong alignment on AINTERACT_Keypad_C");
static_assert(sizeof(AINTERACT_Keypad_C) == 0x000598, "Wrong size on AINTERACT_Keypad_C");
static_assert(offsetof(AINTERACT_Keypad_C, UberGraphFrame_INTERACT_Keypad_C) == 0x000388, "Member 'AINTERACT_Keypad_C::UberGraphFrame_INTERACT_Keypad_C' has a wrong offset!");
static_assert(offsetof(AINTERACT_Keypad_C, COMP_AttribManager) == 0x000390, "Member 'AINTERACT_Keypad_C::COMP_AttribManager' has a wrong offset!");
static_assert(offsetof(AINTERACT_Keypad_C, FocusNode) == 0x000398, "Member 'AINTERACT_Keypad_C::FocusNode' has a wrong offset!");
static_assert(offsetof(AINTERACT_Keypad_C, TargetBoxPanel) == 0x0003A0, "Member 'AINTERACT_Keypad_C::TargetBoxPanel' has a wrong offset!");
static_assert(offsetof(AINTERACT_Keypad_C, TargetBoxBack) == 0x0003A8, "Member 'AINTERACT_Keypad_C::TargetBoxBack' has a wrong offset!");
static_assert(offsetof(AINTERACT_Keypad_C, TargetBoxClear) == 0x0003B0, "Member 'AINTERACT_Keypad_C::TargetBoxClear' has a wrong offset!");
static_assert(offsetof(AINTERACT_Keypad_C, TargetBox9) == 0x0003B8, "Member 'AINTERACT_Keypad_C::TargetBox9' has a wrong offset!");
static_assert(offsetof(AINTERACT_Keypad_C, TargetBox8) == 0x0003C0, "Member 'AINTERACT_Keypad_C::TargetBox8' has a wrong offset!");
static_assert(offsetof(AINTERACT_Keypad_C, TargetBox7) == 0x0003C8, "Member 'AINTERACT_Keypad_C::TargetBox7' has a wrong offset!");
static_assert(offsetof(AINTERACT_Keypad_C, TargetBox6) == 0x0003D0, "Member 'AINTERACT_Keypad_C::TargetBox6' has a wrong offset!");
static_assert(offsetof(AINTERACT_Keypad_C, TargetBox5) == 0x0003D8, "Member 'AINTERACT_Keypad_C::TargetBox5' has a wrong offset!");
static_assert(offsetof(AINTERACT_Keypad_C, TargetBox4) == 0x0003E0, "Member 'AINTERACT_Keypad_C::TargetBox4' has a wrong offset!");
static_assert(offsetof(AINTERACT_Keypad_C, TargetBox3) == 0x0003E8, "Member 'AINTERACT_Keypad_C::TargetBox3' has a wrong offset!");
static_assert(offsetof(AINTERACT_Keypad_C, TargetBox2) == 0x0003F0, "Member 'AINTERACT_Keypad_C::TargetBox2' has a wrong offset!");
static_assert(offsetof(AINTERACT_Keypad_C, TargetBox1) == 0x0003F8, "Member 'AINTERACT_Keypad_C::TargetBox1' has a wrong offset!");
static_assert(offsetof(AINTERACT_Keypad_C, TargetBox0) == 0x000400, "Member 'AINTERACT_Keypad_C::TargetBox0' has a wrong offset!");
static_assert(offsetof(AINTERACT_Keypad_C, COMP_VoxelCullable) == 0x000408, "Member 'AINTERACT_Keypad_C::COMP_VoxelCullable' has a wrong offset!");
static_assert(offsetof(AINTERACT_Keypad_C, COMP_ScannableObject) == 0x000410, "Member 'AINTERACT_Keypad_C::COMP_ScannableObject' has a wrong offset!");
static_assert(offsetof(AINTERACT_Keypad_C, KeypadMesh) == 0x000418, "Member 'AINTERACT_Keypad_C::KeypadMesh' has a wrong offset!");
static_assert(offsetof(AINTERACT_Keypad_C, InvalidKeycode) == 0x000420, "Member 'AINTERACT_Keypad_C::InvalidKeycode' has a wrong offset!");
static_assert(offsetof(AINTERACT_Keypad_C, QuestLockMessage) == 0x000438, "Member 'AINTERACT_Keypad_C::QuestLockMessage' has a wrong offset!");
static_assert(offsetof(AINTERACT_Keypad_C, TargetInteractable) == 0x000450, "Member 'AINTERACT_Keypad_C::TargetInteractable' has a wrong offset!");
static_assert(offsetof(AINTERACT_Keypad_C, CurrentKeycodeString) == 0x000458, "Member 'AINTERACT_Keypad_C::CurrentKeycodeString' has a wrong offset!");
static_assert(offsetof(AINTERACT_Keypad_C, OnLocked_TargetInteractable) == 0x000468, "Member 'AINTERACT_Keypad_C::OnLocked_TargetInteractable' has a wrong offset!");
static_assert(offsetof(AINTERACT_Keypad_C, KeycodeHandle) == 0x000470, "Member 'AINTERACT_Keypad_C::KeycodeHandle' has a wrong offset!");
static_assert(offsetof(AINTERACT_Keypad_C, TargetKeycodeValue) == 0x000480, "Member 'AINTERACT_Keypad_C::TargetKeycodeValue' has a wrong offset!");
static_assert(offsetof(AINTERACT_Keypad_C, StateTimestamp) == 0x000484, "Member 'AINTERACT_Keypad_C::StateTimestamp' has a wrong offset!");
static_assert(offsetof(AINTERACT_Keypad_C, KeypadState) == 0x000488, "Member 'AINTERACT_Keypad_C::KeypadState' has a wrong offset!");
static_assert(offsetof(AINTERACT_Keypad_C, ErrorPulses) == 0x00048C, "Member 'AINTERACT_Keypad_C::ErrorPulses' has a wrong offset!");
static_assert(offsetof(AINTERACT_Keypad_C, PulseRate) == 0x000490, "Member 'AINTERACT_Keypad_C::PulseRate' has a wrong offset!");
static_assert(offsetof(AINTERACT_Keypad_C, IsFirstPulse) == 0x000494, "Member 'AINTERACT_Keypad_C::IsFirstPulse' has a wrong offset!");
static_assert(offsetof(AINTERACT_Keypad_C, MeterValueDataIndex) == 0x000498, "Member 'AINTERACT_Keypad_C::MeterValueDataIndex' has a wrong offset!");
static_assert(offsetof(AINTERACT_Keypad_C, MeterColorDataIndex) == 0x00049C, "Member 'AINTERACT_Keypad_C::MeterColorDataIndex' has a wrong offset!");
static_assert(offsetof(AINTERACT_Keypad_C, NumberColorDataIndex) == 0x0004A0, "Member 'AINTERACT_Keypad_C::NumberColorDataIndex' has a wrong offset!");
static_assert(offsetof(AINTERACT_Keypad_C, DefaultDigitValue) == 0x0004A4, "Member 'AINTERACT_Keypad_C::DefaultDigitValue' has a wrong offset!");
static_assert(offsetof(AINTERACT_Keypad_C, IdleDigitStrength) == 0x0004A8, "Member 'AINTERACT_Keypad_C::IdleDigitStrength' has a wrong offset!");
static_assert(offsetof(AINTERACT_Keypad_C, EntryDigitStrength) == 0x0004AC, "Member 'AINTERACT_Keypad_C::EntryDigitStrength' has a wrong offset!");
static_assert(offsetof(AINTERACT_Keypad_C, StrengthChangeRate) == 0x0004B0, "Member 'AINTERACT_Keypad_C::StrengthChangeRate' has a wrong offset!");
static_assert(offsetof(AINTERACT_Keypad_C, IsAccepted) == 0x0004B4, "Member 'AINTERACT_Keypad_C::IsAccepted' has a wrong offset!");
static_assert(offsetof(AINTERACT_Keypad_C, IsPowered) == 0x0004B5, "Member 'AINTERACT_Keypad_C::IsPowered' has a wrong offset!");
static_assert(offsetof(AINTERACT_Keypad_C, PulseState) == 0x0004B6, "Member 'AINTERACT_Keypad_C::PulseState' has a wrong offset!");
static_assert(offsetof(AINTERACT_Keypad_C, RequiredStoryQuest) == 0x0004B8, "Member 'AINTERACT_Keypad_C::RequiredStoryQuest' has a wrong offset!");
static_assert(offsetof(AINTERACT_Keypad_C, UnlockInteracts) == 0x0004C8, "Member 'AINTERACT_Keypad_C::UnlockInteracts' has a wrong offset!");
static_assert(offsetof(AINTERACT_Keypad_C, IsLockedByQuest) == 0x0004D8, "Member 'AINTERACT_Keypad_C::IsLockedByQuest' has a wrong offset!");
static_assert(offsetof(AINTERACT_Keypad_C, CompleteTutorialOnKeypadEntry) == 0x0004E0, "Member 'AINTERACT_Keypad_C::CompleteTutorialOnKeypadEntry' has a wrong offset!");
static_assert(offsetof(AINTERACT_Keypad_C, CreateSoundDetectionEvent) == 0x0004F0, "Member 'AINTERACT_Keypad_C::CreateSoundDetectionEvent' has a wrong offset!");
static_assert(offsetof(AINTERACT_Keypad_C, SoundDetectionEventDelay) == 0x0004F4, "Member 'AINTERACT_Keypad_C::SoundDetectionEventDelay' has a wrong offset!");
static_assert(offsetof(AINTERACT_Keypad_C, SoundDetectionEventTimer) == 0x0004F8, "Member 'AINTERACT_Keypad_C::SoundDetectionEventTimer' has a wrong offset!");
static_assert(offsetof(AINTERACT_Keypad_C, SuccessCue) == 0x000500, "Member 'AINTERACT_Keypad_C::SuccessCue' has a wrong offset!");
static_assert(offsetof(AINTERACT_Keypad_C, FailureCue) == 0x000528, "Member 'AINTERACT_Keypad_C::FailureCue' has a wrong offset!");
static_assert(offsetof(AINTERACT_Keypad_C, ErrorCue) == 0x000550, "Member 'AINTERACT_Keypad_C::ErrorCue' has a wrong offset!");
static_assert(offsetof(AINTERACT_Keypad_C, CurrentStrengthPerDigit) == 0x000578, "Member 'AINTERACT_Keypad_C::CurrentStrengthPerDigit' has a wrong offset!");
static_assert(offsetof(AINTERACT_Keypad_C, TargetStrengthPerDigit) == 0x000588, "Member 'AINTERACT_Keypad_C::TargetStrengthPerDigit' has a wrong offset!");

}

