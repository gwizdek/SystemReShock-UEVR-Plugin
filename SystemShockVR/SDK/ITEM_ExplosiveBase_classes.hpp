#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: ITEM_ExplosiveBase

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "CoreUObject_structs.hpp"
#include "ITEM_ConsumableBase_classes.hpp"


namespace SDK
{

// BlueprintGeneratedClass ITEM_ExplosiveBase.ITEM_ExplosiveBase_C
// 0x0060 (0x0240 - 0x01E0)
class UITEM_ExplosiveBase_C : public UITEM_ConsumableBase_C
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame_ITEM_ExplosiveBase_C;               // 0x01E0(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	class UClass*                                 ProjectileClass;                                   // 0x01E8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         TossSpeed;                                         // 0x01F0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         ThrowSpeed;                                        // 0x01F4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         MaxThrowDistance;                                  // 0x01F8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                LastTargetWorldLocation;                           // 0x01FC(0x000C)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         LastDesiredSpeed;                                  // 0x0208(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_20C[0x4];                                      // 0x020C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TSoftObjectPtr<class UAnimMontage>            TossMontage;                                       // 0x0210(0x0028)(Edit, BlueprintVisible, DisableEditOnInstance, HasGetValueTypeHash)
	class UAnimMontage*                           CachedTossMontage;                                 // 0x0238(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

public:
	void ExecuteUbergraph_ITEM_ExplosiveBase(int32 EntryPoint);
	void StreamConsumableAssets();
	void OnLoaded_F37DADE146CFC9EF519785AF17393ED0(class UObject* Loaded);
	void IsExplosiveArmed(bool* Result);
	void GetIdealSpawnTransform(class APAWN_SystemShockCharacter_C* CharacterOwner, struct FTransform* Transform);
	void SpawnExplosive(const struct FTransform& Transform, class APAWN_SystemShockCharacter_C* Instigator, class AExplosiveProjectile_Base_C** Result);
	void UseConsumable(class APAWN_SystemShockCharacter_C* Character, class UITEM_ConsumableBase_C** ConsumedItem);
	void GetContactDamageFromSpeed(float Speed, int32* ContactDamage);
	void GetActivateMontage(class UAnimMontage** Montage);
	void CanActivate(class APAWN_SystemShockCharacter_C* Character, bool* Result);
	void Activate(class APAWN_SystemShockCharacter_C* Character, bool* Result);
	void GetInventoryItemDetailsClass(class UClass** InventoryItemDetailsWidget);
	void HasWorldInteraction(bool* Result);

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"ITEM_ExplosiveBase_C">();
	}
	static class UITEM_ExplosiveBase_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<UITEM_ExplosiveBase_C>();
	}
};
static_assert(alignof(UITEM_ExplosiveBase_C) == 0x000008, "Wrong alignment on UITEM_ExplosiveBase_C");
static_assert(sizeof(UITEM_ExplosiveBase_C) == 0x000240, "Wrong size on UITEM_ExplosiveBase_C");
static_assert(offsetof(UITEM_ExplosiveBase_C, UberGraphFrame_ITEM_ExplosiveBase_C) == 0x0001E0, "Member 'UITEM_ExplosiveBase_C::UberGraphFrame_ITEM_ExplosiveBase_C' has a wrong offset!");
static_assert(offsetof(UITEM_ExplosiveBase_C, ProjectileClass) == 0x0001E8, "Member 'UITEM_ExplosiveBase_C::ProjectileClass' has a wrong offset!");
static_assert(offsetof(UITEM_ExplosiveBase_C, TossSpeed) == 0x0001F0, "Member 'UITEM_ExplosiveBase_C::TossSpeed' has a wrong offset!");
static_assert(offsetof(UITEM_ExplosiveBase_C, ThrowSpeed) == 0x0001F4, "Member 'UITEM_ExplosiveBase_C::ThrowSpeed' has a wrong offset!");
static_assert(offsetof(UITEM_ExplosiveBase_C, MaxThrowDistance) == 0x0001F8, "Member 'UITEM_ExplosiveBase_C::MaxThrowDistance' has a wrong offset!");
static_assert(offsetof(UITEM_ExplosiveBase_C, LastTargetWorldLocation) == 0x0001FC, "Member 'UITEM_ExplosiveBase_C::LastTargetWorldLocation' has a wrong offset!");
static_assert(offsetof(UITEM_ExplosiveBase_C, LastDesiredSpeed) == 0x000208, "Member 'UITEM_ExplosiveBase_C::LastDesiredSpeed' has a wrong offset!");
static_assert(offsetof(UITEM_ExplosiveBase_C, TossMontage) == 0x000210, "Member 'UITEM_ExplosiveBase_C::TossMontage' has a wrong offset!");
static_assert(offsetof(UITEM_ExplosiveBase_C, CachedTossMontage) == 0x000238, "Member 'UITEM_ExplosiveBase_C::CachedTossMontage' has a wrong offset!");

}

