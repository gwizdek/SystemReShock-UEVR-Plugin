#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: ITEM_HandheldConsumable_Base

#include "Basic.hpp"

#include "ITEM_WeaponBase_classes.hpp"


namespace SDK
{

// BlueprintGeneratedClass ITEM_HandheldConsumable_Base.ITEM_HandheldConsumable_Base_C
// 0x0080 (0x03D0 - 0x0350)
class UITEM_HandheldConsumable_Base_C : public UITEM_WeaponBase_C
{
public:
	class UClass*                                 ConsumableItemClass;                               // 0x0350(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UInventoryBag_C*                        ConsumableBag;                                     // 0x0358(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UITEM_ConsumableBase_C*                 ActiveConsumableItem;                              // 0x0360(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TMap<int32, int32>                            ConsumableItemSlotCountMap;                        // 0x0368(0x0050)(Edit, BlueprintVisible, DisableEditOnInstance)
	int32                                         OverflowConsumableItemCount;                       // 0x03B8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         TotalConsumableCount;                              // 0x03BC(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	FMulticastInlineDelegateProperty_             ConsumableCountChanged;                            // 0x03C0(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)

public:
	void ConsumableCountChanged__DelegateSignature(class UITEM_Base_C* HandheldItem, int32 Count_0);
	void EVENT_OnConsumableBagChanged(class UInventoryBag_C* Bag_0, int32 SlotIndex_0);
	void InitializeHandheldConsumableData();
	void CleanupHandheldConsumableData();
	void GetBestSlottedItemToConsume(class UITEM_ConsumableBase_C** ConsumableItem);
	void GetConsumableItems(TArray<class UITEM_ConsumableBase_C*>* ConsumableItems);
	void GetActiveConsumableItem(class UITEM_ConsumableBase_C** Result);
	void SetActiveConsumableItem(class UITEM_ConsumableBase_C* ConsumableItem);
	void GetTotalConsumableItemCount(int32* Result);
	void GetHotbarIcon(class UTexture** ResultIcon);
	void GetHotbarDisplayName(class FText* Result);
	void GetHotbarCount(int32* ResultCount);
	void GetEquipState(bool* Result);
	void TryUseConsumable(bool* Result);
	void ShouldAutoEquip(bool* Result);
	void ShouldForceEquip(bool* Result);
	void OnInventoryChanged(class UCOMP_Inventory_C* PrevInventory, bool* Result);
	void OnBeginPlay();

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"ITEM_HandheldConsumable_Base_C">();
	}
	static class UITEM_HandheldConsumable_Base_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<UITEM_HandheldConsumable_Base_C>();
	}
};
static_assert(alignof(UITEM_HandheldConsumable_Base_C) == 0x000008, "Wrong alignment on UITEM_HandheldConsumable_Base_C");
static_assert(sizeof(UITEM_HandheldConsumable_Base_C) == 0x0003D0, "Wrong size on UITEM_HandheldConsumable_Base_C");
static_assert(offsetof(UITEM_HandheldConsumable_Base_C, ConsumableItemClass) == 0x000350, "Member 'UITEM_HandheldConsumable_Base_C::ConsumableItemClass' has a wrong offset!");
static_assert(offsetof(UITEM_HandheldConsumable_Base_C, ConsumableBag) == 0x000358, "Member 'UITEM_HandheldConsumable_Base_C::ConsumableBag' has a wrong offset!");
static_assert(offsetof(UITEM_HandheldConsumable_Base_C, ActiveConsumableItem) == 0x000360, "Member 'UITEM_HandheldConsumable_Base_C::ActiveConsumableItem' has a wrong offset!");
static_assert(offsetof(UITEM_HandheldConsumable_Base_C, ConsumableItemSlotCountMap) == 0x000368, "Member 'UITEM_HandheldConsumable_Base_C::ConsumableItemSlotCountMap' has a wrong offset!");
static_assert(offsetof(UITEM_HandheldConsumable_Base_C, OverflowConsumableItemCount) == 0x0003B8, "Member 'UITEM_HandheldConsumable_Base_C::OverflowConsumableItemCount' has a wrong offset!");
static_assert(offsetof(UITEM_HandheldConsumable_Base_C, TotalConsumableCount) == 0x0003BC, "Member 'UITEM_HandheldConsumable_Base_C::TotalConsumableCount' has a wrong offset!");
static_assert(offsetof(UITEM_HandheldConsumable_Base_C, ConsumableCountChanged) == 0x0003C0, "Member 'UITEM_HandheldConsumable_Base_C::ConsumableCountChanged' has a wrong offset!");

}

