#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: SystemReShock

#include "Basic.hpp"

#include "CoreUObject_structs.hpp"
#include "Engine_structs.hpp"


namespace SDK
{

// Enum SystemReShock.EChessSquare
// NumValues: 0x0042
enum class EChessSquare : uint8
{
	A1                                       = 0,
	B1                                       = 1,
	C1                                       = 2,
	D1                                       = 3,
	E1                                       = 4,
	F1                                       = 5,
	G1                                       = 6,
	H1                                       = 7,
	A2                                       = 8,
	B2                                       = 9,
	C2                                       = 10,
	D2                                       = 11,
	E2                                       = 12,
	F2                                       = 13,
	G2                                       = 14,
	H2                                       = 15,
	A3                                       = 16,
	B3                                       = 17,
	C3                                       = 18,
	D3                                       = 19,
	E3                                       = 20,
	F3                                       = 21,
	G3                                       = 22,
	H3                                       = 23,
	A4                                       = 24,
	B4                                       = 25,
	C4                                       = 26,
	D4                                       = 27,
	E4                                       = 28,
	F4                                       = 29,
	G4                                       = 30,
	H4                                       = 31,
	A5                                       = 32,
	B5                                       = 33,
	C5                                       = 34,
	D5                                       = 35,
	E5                                       = 36,
	F5                                       = 37,
	G5                                       = 38,
	H5                                       = 39,
	A6                                       = 40,
	B6                                       = 41,
	C6                                       = 42,
	D6                                       = 43,
	E6                                       = 44,
	F6                                       = 45,
	G6                                       = 46,
	H6                                       = 47,
	A7                                       = 48,
	B7                                       = 49,
	C7                                       = 50,
	D7                                       = 51,
	E7                                       = 52,
	F7                                       = 53,
	G7                                       = 54,
	H7                                       = 55,
	A8                                       = 56,
	B8                                       = 57,
	C8                                       = 58,
	D8                                       = 59,
	E8                                       = 60,
	F8                                       = 61,
	G8                                       = 62,
	H8                                       = 63,
	Invalid                                  = 64,
	EChessSquare_MAX                         = 65,
};

// Enum SystemReShock.EActorMessagePriority
// NumValues: 0x0004
enum class EActorMessagePriority : uint8
{
	Low                                      = 0,
	Medium                                   = 1,
	High                                     = 2,
	EActorMessagePriority_MAX                = 3,
};

// Enum SystemReShock.ECameraWidgetRenderMode
// NumValues: 0x0003
enum class ECameraWidgetRenderMode : uint8
{
	Scene                                    = 0,
	Surface                                  = 1,
	ECameraWidgetRenderMode_MAX              = 2,
};

// Enum SystemReShock.EGridMeshBorderAxis
// NumValues: 0x0004
enum class EGridMeshBorderAxis : uint8
{
	Horizontal                               = 0,
	Vertical                                 = 1,
	Both                                     = 2,
	EGridMeshBorderAxis_MAX                  = 3,
};

// Enum SystemReShock.EMeshWidgetMouseDetectionType
// NumValues: 0x0003
enum class EMeshWidgetMouseDetectionType : uint8
{
	Simple                                   = 0,
	Complex                                  = 1,
	EMeshWidgetMouseDetectionType_MAX        = 2,
};

// Enum SystemReShock.EShockActivityOutcome
// NumValues: 0x0004
enum class EShockActivityOutcome : uint8
{
	Completed                                = 0,
	Failed                                   = 1,
	Cancelled                                = 2,
	EShockActivityOutcome_MAX                = 3,
};

// Enum SystemReShock.EChessColor
// NumValues: 0x0003
enum class EChessColor : uint8
{
	White                                    = 0,
	Black                                    = 1,
	EChessColor_MAX                          = 2,
};

// Enum SystemReShock.EChessPiece
// NumValues: 0x0008
enum class EChessPiece : uint8
{
	None                                     = 0,
	Pawn                                     = 1,
	Rook                                     = 2,
	Knight                                   = 3,
	Bishop                                   = 4,
	Queen                                    = 5,
	King                                     = 6,
	EChessPiece_MAX                          = 7,
};

// Enum SystemReShock.EMeshWidgetScalingType
// NumValues: 0x0006
enum class EMeshWidgetScalingType : uint8
{
	Disabled                                 = 0,
	DominantAxis                             = 1,
	MatchX                                   = 2,
	MatchY                                   = 3,
	Stretch                                  = 4,
	EMeshWidgetScalingType_MAX               = 5,
};

// Enum SystemReShock.ETextMeshWidgetVerticalAligment
// NumValues: 0x0004
enum class ETextMeshWidgetVerticalAligment : uint8
{
	TMVA_Top                                 = 0,
	TMVA_Center                              = 1,
	TMVA_Bottom                              = 2,
	TMVA_MAX                                 = 3,
};

// Enum SystemReShock.ETextMeshWidgetHorizontalAligment
// NumValues: 0x0004
enum class ETextMeshWidgetHorizontalAligment : uint8
{
	TMHA_Left                                = 0,
	TMHA_Center                              = 1,
	TMHA_Right                               = 2,
	TMHA_MAX                                 = 3,
};

// ScriptStruct SystemReShock.GridMeshBorderParams
// 0x0020 (0x0020 - 0x0000)
struct FGridMeshBorderParams final
{
public:
	int32                                         Size;                                              // 0x0000(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FColor                                 Color;                                             // 0x0004(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ClickableRatio;                                    // 0x0008(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         bCombineWithMainMaterial : 1;                      // 0x000C(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         Pad_D[0x3];                                        // 0x000D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class UMaterialInterface*                     Material;                                          // 0x0010(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UMaterialInterface*                     CornerMaterial;                                    // 0x0018(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FGridMeshBorderParams) == 0x000008, "Wrong alignment on FGridMeshBorderParams");
static_assert(sizeof(FGridMeshBorderParams) == 0x000020, "Wrong size on FGridMeshBorderParams");
static_assert(offsetof(FGridMeshBorderParams, Size) == 0x000000, "Member 'FGridMeshBorderParams::Size' has a wrong offset!");
static_assert(offsetof(FGridMeshBorderParams, Color) == 0x000004, "Member 'FGridMeshBorderParams::Color' has a wrong offset!");
static_assert(offsetof(FGridMeshBorderParams, ClickableRatio) == 0x000008, "Member 'FGridMeshBorderParams::ClickableRatio' has a wrong offset!");
static_assert(offsetof(FGridMeshBorderParams, Material) == 0x000010, "Member 'FGridMeshBorderParams::Material' has a wrong offset!");
static_assert(offsetof(FGridMeshBorderParams, CornerMaterial) == 0x000018, "Member 'FGridMeshBorderParams::CornerMaterial' has a wrong offset!");

// ScriptStruct SystemReShock.GridMeshFadeParams
// 0x0010 (0x0010 - 0x0000)
struct FGridMeshFadeParams final
{
public:
	int32                                         LeftCells;                                         // 0x0000(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         RightCells;                                        // 0x0004(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         BotCells;                                          // 0x0008(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         TopCells;                                          // 0x000C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FGridMeshFadeParams) == 0x000004, "Wrong alignment on FGridMeshFadeParams");
static_assert(sizeof(FGridMeshFadeParams) == 0x000010, "Wrong size on FGridMeshFadeParams");
static_assert(offsetof(FGridMeshFadeParams, LeftCells) == 0x000000, "Member 'FGridMeshFadeParams::LeftCells' has a wrong offset!");
static_assert(offsetof(FGridMeshFadeParams, RightCells) == 0x000004, "Member 'FGridMeshFadeParams::RightCells' has a wrong offset!");
static_assert(offsetof(FGridMeshFadeParams, BotCells) == 0x000008, "Member 'FGridMeshFadeParams::BotCells' has a wrong offset!");
static_assert(offsetof(FGridMeshFadeParams, TopCells) == 0x00000C, "Member 'FGridMeshFadeParams::TopCells' has a wrong offset!");

// ScriptStruct SystemReShock.LifePatternData
// 0x0018 (0x0020 - 0x0008)
struct FLifePatternData final : public FTableRowBase
{
public:
	int32                                         PatternSizeX;                                      // 0x0008(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         PatternSizeY;                                      // 0x000C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<int32>                                 CoordinateIndices;                                 // 0x0010(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FLifePatternData) == 0x000008, "Wrong alignment on FLifePatternData");
static_assert(sizeof(FLifePatternData) == 0x000020, "Wrong size on FLifePatternData");
static_assert(offsetof(FLifePatternData, PatternSizeX) == 0x000008, "Member 'FLifePatternData::PatternSizeX' has a wrong offset!");
static_assert(offsetof(FLifePatternData, PatternSizeY) == 0x00000C, "Member 'FLifePatternData::PatternSizeY' has a wrong offset!");
static_assert(offsetof(FLifePatternData, CoordinateIndices) == 0x000010, "Member 'FLifePatternData::CoordinateIndices' has a wrong offset!");

// ScriptStruct SystemReShock.Chessboard
// 0x0080 (0x0080 - 0x0000)
struct FChessboard final
{
public:
	uint8                                         FlagsPerSquare[0x40];                              // 0x0000(0x0001)(ZeroConstructor, SaveGame, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	TArray<uint32>                                MoveHistoryKeys;                                   // 0x0040(0x0010)(ZeroConstructor, SaveGame, Protected, NativeAccessSpecifierProtected)
	uint8                                         Pad_50[0x30];                                      // 0x0050(0x0030)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FChessboard) == 0x000008, "Wrong alignment on FChessboard");
static_assert(sizeof(FChessboard) == 0x000080, "Wrong size on FChessboard");
static_assert(offsetof(FChessboard, FlagsPerSquare) == 0x000000, "Member 'FChessboard::FlagsPerSquare' has a wrong offset!");
static_assert(offsetof(FChessboard, MoveHistoryKeys) == 0x000040, "Member 'FChessboard::MoveHistoryKeys' has a wrong offset!");

// ScriptStruct SystemReShock.ChessMoveRequest
// 0x0002 (0x0002 - 0x0000)
struct FChessMoveRequest final
{
public:
	EChessSquare                                  SourceSquare;                                      // 0x0000(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EChessSquare                                  TargetSquare;                                      // 0x0001(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FChessMoveRequest) == 0x000001, "Wrong alignment on FChessMoveRequest");
static_assert(sizeof(FChessMoveRequest) == 0x000002, "Wrong size on FChessMoveRequest");
static_assert(offsetof(FChessMoveRequest, SourceSquare) == 0x000000, "Member 'FChessMoveRequest::SourceSquare' has a wrong offset!");
static_assert(offsetof(FChessMoveRequest, TargetSquare) == 0x000001, "Member 'FChessMoveRequest::TargetSquare' has a wrong offset!");

// ScriptStruct SystemReShock.PerspectiveSlateVertex
// 0x0028 (0x0028 - 0x0000)
struct FPerspectiveSlateVertex final
{
public:
	struct FVector2D                              Position;                                          // 0x0000(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Depth;                                             // 0x0008(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FColor                                 Color;                                             // 0x000C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector2D                              UV0;                                               // 0x0010(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector2D                              UV1;                                               // 0x0018(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector2D                              UV2;                                               // 0x0020(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FPerspectiveSlateVertex) == 0x000004, "Wrong alignment on FPerspectiveSlateVertex");
static_assert(sizeof(FPerspectiveSlateVertex) == 0x000028, "Wrong size on FPerspectiveSlateVertex");
static_assert(offsetof(FPerspectiveSlateVertex, Position) == 0x000000, "Member 'FPerspectiveSlateVertex::Position' has a wrong offset!");
static_assert(offsetof(FPerspectiveSlateVertex, Depth) == 0x000008, "Member 'FPerspectiveSlateVertex::Depth' has a wrong offset!");
static_assert(offsetof(FPerspectiveSlateVertex, Color) == 0x00000C, "Member 'FPerspectiveSlateVertex::Color' has a wrong offset!");
static_assert(offsetof(FPerspectiveSlateVertex, UV0) == 0x000010, "Member 'FPerspectiveSlateVertex::UV0' has a wrong offset!");
static_assert(offsetof(FPerspectiveSlateVertex, UV1) == 0x000018, "Member 'FPerspectiveSlateVertex::UV1' has a wrong offset!");
static_assert(offsetof(FPerspectiveSlateVertex, UV2) == 0x000020, "Member 'FPerspectiveSlateVertex::UV2' has a wrong offset!");

// ScriptStruct SystemReShock.TextMeshCultureFont
// 0x0008 (0x0010 - 0x0008)
struct FTextMeshCultureFont final : public FTableRowBase
{
public:
	class UFont*                                  Font;                                              // 0x0008(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FTextMeshCultureFont) == 0x000008, "Wrong alignment on FTextMeshCultureFont");
static_assert(sizeof(FTextMeshCultureFont) == 0x000010, "Wrong size on FTextMeshCultureFont");
static_assert(offsetof(FTextMeshCultureFont, Font) == 0x000008, "Member 'FTextMeshCultureFont::Font' has a wrong offset!");

}

