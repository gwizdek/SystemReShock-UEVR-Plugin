#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_Medical_Cryobed

#include "Basic.hpp"

#include "TILE_Prefab_classes.hpp"


namespace SDK
{

// BlueprintGeneratedClass BP_Medical_Cryobed.BP_Medical_Cryobed_C
// 0x0060 (0x0290 - 0x0230)
class ABP_Medical_Cryobed_C final : public ATILE_Prefab_C
{
public:
	class UCOMP_VoxelAudio_C*                     COMP_VoxelAudio;                                   // 0x0230(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UPointOfInterestComponent_C*            PointOfInterestComponent;                          // 0x0238(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UPointLightComponent*                   PointLight2;                                       // 0x0240(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UArrowComponent*                        Arrow1;                                            // 0x0248(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USpotLightComponent*                    SpotLight;                                         // 0x0250(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UParticleSystemComponent*               ParticleSystem;                                    // 0x0258(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UPointLightComponent*                   PointLight1;                                       // 0x0260(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UPointLightComponent*                   PointLight;                                        // 0x0268(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UDrawSphereComponent*                   DrawSphere1;                                       // 0x0270(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UDrawSphereComponent*                   DrawSphere;                                        // 0x0278(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UBillboardComponent*                    Billboard1;                                        // 0x0280(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UBillboardComponent*                    Billboard;                                         // 0x0288(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"BP_Medical_Cryobed_C">();
	}
	static class ABP_Medical_Cryobed_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<ABP_Medical_Cryobed_C>();
	}
};
static_assert(alignof(ABP_Medical_Cryobed_C) == 0x000008, "Wrong alignment on ABP_Medical_Cryobed_C");
static_assert(sizeof(ABP_Medical_Cryobed_C) == 0x000290, "Wrong size on ABP_Medical_Cryobed_C");
static_assert(offsetof(ABP_Medical_Cryobed_C, COMP_VoxelAudio) == 0x000230, "Member 'ABP_Medical_Cryobed_C::COMP_VoxelAudio' has a wrong offset!");
static_assert(offsetof(ABP_Medical_Cryobed_C, PointOfInterestComponent) == 0x000238, "Member 'ABP_Medical_Cryobed_C::PointOfInterestComponent' has a wrong offset!");
static_assert(offsetof(ABP_Medical_Cryobed_C, PointLight2) == 0x000240, "Member 'ABP_Medical_Cryobed_C::PointLight2' has a wrong offset!");
static_assert(offsetof(ABP_Medical_Cryobed_C, Arrow1) == 0x000248, "Member 'ABP_Medical_Cryobed_C::Arrow1' has a wrong offset!");
static_assert(offsetof(ABP_Medical_Cryobed_C, SpotLight) == 0x000250, "Member 'ABP_Medical_Cryobed_C::SpotLight' has a wrong offset!");
static_assert(offsetof(ABP_Medical_Cryobed_C, ParticleSystem) == 0x000258, "Member 'ABP_Medical_Cryobed_C::ParticleSystem' has a wrong offset!");
static_assert(offsetof(ABP_Medical_Cryobed_C, PointLight1) == 0x000260, "Member 'ABP_Medical_Cryobed_C::PointLight1' has a wrong offset!");
static_assert(offsetof(ABP_Medical_Cryobed_C, PointLight) == 0x000268, "Member 'ABP_Medical_Cryobed_C::PointLight' has a wrong offset!");
static_assert(offsetof(ABP_Medical_Cryobed_C, DrawSphere1) == 0x000270, "Member 'ABP_Medical_Cryobed_C::DrawSphere1' has a wrong offset!");
static_assert(offsetof(ABP_Medical_Cryobed_C, DrawSphere) == 0x000278, "Member 'ABP_Medical_Cryobed_C::DrawSphere' has a wrong offset!");
static_assert(offsetof(ABP_Medical_Cryobed_C, Billboard1) == 0x000280, "Member 'ABP_Medical_Cryobed_C::Billboard1' has a wrong offset!");
static_assert(offsetof(ABP_Medical_Cryobed_C, Billboard) == 0x000288, "Member 'ABP_Medical_Cryobed_C::Billboard' has a wrong offset!");

}

