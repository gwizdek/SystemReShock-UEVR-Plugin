#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: DEC_HasEnemyTarget

#include "Basic.hpp"

#include "AIModule_classes.hpp"


namespace SDK
{

// BlueprintGeneratedClass DEC_HasEnemyTarget.DEC_HasEnemyTarget_C
// 0x0008 (0x00A8 - 0x00A0)
class UDEC_HasEnemyTarget_C final : public UBTDecorator_BlueprintBase
{
public:
	bool                                          HasBodyTarget;                                     // 0x00A0(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          HasHeadTarget;                                     // 0x00A1(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          HasNavigationTarget;                               // 0x00A2(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          HasSkillTarget;                                    // 0x00A3(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CheckIdentifiedState;                              // 0x00A4(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          IdentifiedState;                                   // 0x00A5(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)

public:
	bool PerformConditionCheckAI(class AAIController* OwnerController, class APawn* ControlledPawn);

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"DEC_HasEnemyTarget_C">();
	}
	static class UDEC_HasEnemyTarget_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<UDEC_HasEnemyTarget_C>();
	}
};
static_assert(alignof(UDEC_HasEnemyTarget_C) == 0x000008, "Wrong alignment on UDEC_HasEnemyTarget_C");
static_assert(sizeof(UDEC_HasEnemyTarget_C) == 0x0000A8, "Wrong size on UDEC_HasEnemyTarget_C");
static_assert(offsetof(UDEC_HasEnemyTarget_C, HasBodyTarget) == 0x0000A0, "Member 'UDEC_HasEnemyTarget_C::HasBodyTarget' has a wrong offset!");
static_assert(offsetof(UDEC_HasEnemyTarget_C, HasHeadTarget) == 0x0000A1, "Member 'UDEC_HasEnemyTarget_C::HasHeadTarget' has a wrong offset!");
static_assert(offsetof(UDEC_HasEnemyTarget_C, HasNavigationTarget) == 0x0000A2, "Member 'UDEC_HasEnemyTarget_C::HasNavigationTarget' has a wrong offset!");
static_assert(offsetof(UDEC_HasEnemyTarget_C, HasSkillTarget) == 0x0000A3, "Member 'UDEC_HasEnemyTarget_C::HasSkillTarget' has a wrong offset!");
static_assert(offsetof(UDEC_HasEnemyTarget_C, CheckIdentifiedState) == 0x0000A4, "Member 'UDEC_HasEnemyTarget_C::CheckIdentifiedState' has a wrong offset!");
static_assert(offsetof(UDEC_HasEnemyTarget_C, IdentifiedState) == 0x0000A5, "Member 'UDEC_HasEnemyTarget_C::IdentifiedState' has a wrong offset!");

}

