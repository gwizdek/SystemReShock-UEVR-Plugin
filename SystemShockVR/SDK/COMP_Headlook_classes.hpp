#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: COMP_Headlook

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "Engine_classes.hpp"


namespace SDK
{

// BlueprintGeneratedClass COMP_Headlook.COMP_Headlook_C
// 0x0040 (0x00F0 - 0x00B0)
class UCOMP_Headlook_C final : public UActorComponent
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x00B0(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	class UOBJ_EnemyTarget_C*                     EnemyTarget;                                       // 0x00B8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          DEBUG_DrawLookTarget;                              // 0x00C0(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_C1[0x3];                                       // 0x00C1(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   HeadSocketName;                                    // 0x00C4(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         NextGazeIndexTimestamp;                            // 0x00CC(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CurrentGazeIndex;                                  // 0x00D0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         GazeTime;                                          // 0x00D4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         GazeVariance;                                      // 0x00D8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         HeadlookAlpha_Target;                              // 0x00DC(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         HeadlookAlpha_Rate;                                // 0x00E0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         HeadlookAlpha_Current;                             // 0x00E4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class APAWN_Enemy_C*                          Pawn;                                              // 0x00E8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

public:
	void ExecuteUbergraph_COMP_Headlook(int32 EntryPoint);
	void ReceiveBeginPlay();
	void ReceiveTick(float DeltaSeconds);
	void SetHeadlookTarget(class UOBJ_EnemyTarget_C* Target);
	void UpdateHeadlook();
	void ChooseGazeLocation(TArray<struct FVector>& GazeLocations, struct FVector* Location);
	void GetHeadlookTarget(class UOBJ_EnemyTarget_C** Target);
	void SetIsAlive(bool IsAlive);

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"COMP_Headlook_C">();
	}
	static class UCOMP_Headlook_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<UCOMP_Headlook_C>();
	}
};
static_assert(alignof(UCOMP_Headlook_C) == 0x000008, "Wrong alignment on UCOMP_Headlook_C");
static_assert(sizeof(UCOMP_Headlook_C) == 0x0000F0, "Wrong size on UCOMP_Headlook_C");
static_assert(offsetof(UCOMP_Headlook_C, UberGraphFrame) == 0x0000B0, "Member 'UCOMP_Headlook_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(UCOMP_Headlook_C, EnemyTarget) == 0x0000B8, "Member 'UCOMP_Headlook_C::EnemyTarget' has a wrong offset!");
static_assert(offsetof(UCOMP_Headlook_C, DEBUG_DrawLookTarget) == 0x0000C0, "Member 'UCOMP_Headlook_C::DEBUG_DrawLookTarget' has a wrong offset!");
static_assert(offsetof(UCOMP_Headlook_C, HeadSocketName) == 0x0000C4, "Member 'UCOMP_Headlook_C::HeadSocketName' has a wrong offset!");
static_assert(offsetof(UCOMP_Headlook_C, NextGazeIndexTimestamp) == 0x0000CC, "Member 'UCOMP_Headlook_C::NextGazeIndexTimestamp' has a wrong offset!");
static_assert(offsetof(UCOMP_Headlook_C, CurrentGazeIndex) == 0x0000D0, "Member 'UCOMP_Headlook_C::CurrentGazeIndex' has a wrong offset!");
static_assert(offsetof(UCOMP_Headlook_C, GazeTime) == 0x0000D4, "Member 'UCOMP_Headlook_C::GazeTime' has a wrong offset!");
static_assert(offsetof(UCOMP_Headlook_C, GazeVariance) == 0x0000D8, "Member 'UCOMP_Headlook_C::GazeVariance' has a wrong offset!");
static_assert(offsetof(UCOMP_Headlook_C, HeadlookAlpha_Target) == 0x0000DC, "Member 'UCOMP_Headlook_C::HeadlookAlpha_Target' has a wrong offset!");
static_assert(offsetof(UCOMP_Headlook_C, HeadlookAlpha_Rate) == 0x0000E0, "Member 'UCOMP_Headlook_C::HeadlookAlpha_Rate' has a wrong offset!");
static_assert(offsetof(UCOMP_Headlook_C, HeadlookAlpha_Current) == 0x0000E4, "Member 'UCOMP_Headlook_C::HeadlookAlpha_Current' has a wrong offset!");
static_assert(offsetof(UCOMP_Headlook_C, Pawn) == 0x0000E8, "Member 'UCOMP_Headlook_C::Pawn' has a wrong offset!");

}

