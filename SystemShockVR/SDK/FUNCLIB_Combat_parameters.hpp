#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: FUNCLIB_Combat

#include "Basic.hpp"

#include "CoreUObject_structs.hpp"
#include "STRUCT_EnemyStats_structs.hpp"
#include "Engine_structs.hpp"
#include "AttributeSystem_structs.hpp"
#include "ENUM_EnemyAttackType_structs.hpp"
#include "LevelVoxelization_structs.hpp"
#include "ENUM_GameDifficulty_structs.hpp"
#include "STRUCT_CombatDifficultySettings_structs.hpp"


namespace SDK::Params
{

// Function FUNCLIB_Combat.FUNCLIB_Combat_C.HasClearShotToTargetFromLocation
// 0x01E0 (0x01E0 - 0x0000)
struct FUNCLIB_Combat_C_HasClearShotToTargetFromLocation final
{
public:
	class APAWN_Enemy_C*                          Enemy;                                             // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                BarrelLocation;                                    // 0x0008(0x000C)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         BulletRadius;                                      // 0x0014(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UObject*                                __WorldContext;                                    // 0x0018(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Result;                                            // 0x0020(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_21[0x7];                                       // 0x0021(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class AActor*                                 LinkedActor;                                       // 0x0028(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                AimTargetLocation;                                 // 0x0030(0x000C)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_3C[0x4];                                       // 0x003C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UOBJ_EnemyTarget_C*                     SkillTarget;                                       // 0x0040(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0048(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_49[0x7];                                       // 0x0049(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class AActor*>                         K2Node_MakeArray_Array;                            // 0x0050(0x0010)(ConstParm, ReferenceParm)
	class AActor*                                 CallFunc_GetActorLinkedToEnemy_Result;             // 0x0060(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class APAWN_SystemShockCharacter_C*           CallFunc_GetDetectedPawn_Pawn;                     // 0x0068(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TArray<class AActor*>                         K2Node_MakeArray_Array_1;                          // 0x0070(0x0010)(ConstParm, ReferenceParm)
	struct FHitResult                             CallFunc_SphereTraceSingle_OutHit;                 // 0x0080(0x0088)(IsPlainOldData, NoDestructor, ContainsInstancedReference)
	bool                                          CallFunc_SphereTraceSingle_ReturnValue;            // 0x0108(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Not_PreBool_ReturnValue;                  // 0x0109(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_10A[0x6];                                      // 0x010A(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class UGameInstance*                          CallFunc_GetGameInstance_ReturnValue;              // 0x0110(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UGI_SinglePlayer_C*                     K2Node_DynamicCast_AsGI_Single_Player;             // 0x0118(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0120(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_121[0x3];                                      // 0x0121(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                CallFunc_GetSkillTargetAimLocation_Locations;      // 0x0124(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_HasUnobstructedPropagationPathBetweenPoints_ReturnValue; // 0x0130(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_131[0x3];                                      // 0x0131(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                CallFunc_K2_GetActorLocation_ReturnValue;          // 0x0134(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FHitResult                             CallFunc_LineTraceSingle_OutHit;                   // 0x0140(0x0088)(IsPlainOldData, NoDestructor, ContainsInstancedReference)
	bool                                          CallFunc_LineTraceSingle_ReturnValue;              // 0x01C8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Not_PreBool_ReturnValue_1;                // 0x01C9(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_1CA[0x6];                                      // 0x01CA(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class UOBJ_EnemyTarget_C*                     CallFunc_GetTarget_Target;                         // 0x01D0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue_1;                    // 0x01D8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(FUNCLIB_Combat_C_HasClearShotToTargetFromLocation) == 0x000008, "Wrong alignment on FUNCLIB_Combat_C_HasClearShotToTargetFromLocation");
static_assert(sizeof(FUNCLIB_Combat_C_HasClearShotToTargetFromLocation) == 0x0001E0, "Wrong size on FUNCLIB_Combat_C_HasClearShotToTargetFromLocation");
static_assert(offsetof(FUNCLIB_Combat_C_HasClearShotToTargetFromLocation, Enemy) == 0x000000, "Member 'FUNCLIB_Combat_C_HasClearShotToTargetFromLocation::Enemy' has a wrong offset!");
static_assert(offsetof(FUNCLIB_Combat_C_HasClearShotToTargetFromLocation, BarrelLocation) == 0x000008, "Member 'FUNCLIB_Combat_C_HasClearShotToTargetFromLocation::BarrelLocation' has a wrong offset!");
static_assert(offsetof(FUNCLIB_Combat_C_HasClearShotToTargetFromLocation, BulletRadius) == 0x000014, "Member 'FUNCLIB_Combat_C_HasClearShotToTargetFromLocation::BulletRadius' has a wrong offset!");
static_assert(offsetof(FUNCLIB_Combat_C_HasClearShotToTargetFromLocation, __WorldContext) == 0x000018, "Member 'FUNCLIB_Combat_C_HasClearShotToTargetFromLocation::__WorldContext' has a wrong offset!");
static_assert(offsetof(FUNCLIB_Combat_C_HasClearShotToTargetFromLocation, Result) == 0x000020, "Member 'FUNCLIB_Combat_C_HasClearShotToTargetFromLocation::Result' has a wrong offset!");
static_assert(offsetof(FUNCLIB_Combat_C_HasClearShotToTargetFromLocation, LinkedActor) == 0x000028, "Member 'FUNCLIB_Combat_C_HasClearShotToTargetFromLocation::LinkedActor' has a wrong offset!");
static_assert(offsetof(FUNCLIB_Combat_C_HasClearShotToTargetFromLocation, AimTargetLocation) == 0x000030, "Member 'FUNCLIB_Combat_C_HasClearShotToTargetFromLocation::AimTargetLocation' has a wrong offset!");
static_assert(offsetof(FUNCLIB_Combat_C_HasClearShotToTargetFromLocation, SkillTarget) == 0x000040, "Member 'FUNCLIB_Combat_C_HasClearShotToTargetFromLocation::SkillTarget' has a wrong offset!");
static_assert(offsetof(FUNCLIB_Combat_C_HasClearShotToTargetFromLocation, CallFunc_IsValid_ReturnValue) == 0x000048, "Member 'FUNCLIB_Combat_C_HasClearShotToTargetFromLocation::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(FUNCLIB_Combat_C_HasClearShotToTargetFromLocation, K2Node_MakeArray_Array) == 0x000050, "Member 'FUNCLIB_Combat_C_HasClearShotToTargetFromLocation::K2Node_MakeArray_Array' has a wrong offset!");
static_assert(offsetof(FUNCLIB_Combat_C_HasClearShotToTargetFromLocation, CallFunc_GetActorLinkedToEnemy_Result) == 0x000060, "Member 'FUNCLIB_Combat_C_HasClearShotToTargetFromLocation::CallFunc_GetActorLinkedToEnemy_Result' has a wrong offset!");
static_assert(offsetof(FUNCLIB_Combat_C_HasClearShotToTargetFromLocation, CallFunc_GetDetectedPawn_Pawn) == 0x000068, "Member 'FUNCLIB_Combat_C_HasClearShotToTargetFromLocation::CallFunc_GetDetectedPawn_Pawn' has a wrong offset!");
static_assert(offsetof(FUNCLIB_Combat_C_HasClearShotToTargetFromLocation, K2Node_MakeArray_Array_1) == 0x000070, "Member 'FUNCLIB_Combat_C_HasClearShotToTargetFromLocation::K2Node_MakeArray_Array_1' has a wrong offset!");
static_assert(offsetof(FUNCLIB_Combat_C_HasClearShotToTargetFromLocation, CallFunc_SphereTraceSingle_OutHit) == 0x000080, "Member 'FUNCLIB_Combat_C_HasClearShotToTargetFromLocation::CallFunc_SphereTraceSingle_OutHit' has a wrong offset!");
static_assert(offsetof(FUNCLIB_Combat_C_HasClearShotToTargetFromLocation, CallFunc_SphereTraceSingle_ReturnValue) == 0x000108, "Member 'FUNCLIB_Combat_C_HasClearShotToTargetFromLocation::CallFunc_SphereTraceSingle_ReturnValue' has a wrong offset!");
static_assert(offsetof(FUNCLIB_Combat_C_HasClearShotToTargetFromLocation, CallFunc_Not_PreBool_ReturnValue) == 0x000109, "Member 'FUNCLIB_Combat_C_HasClearShotToTargetFromLocation::CallFunc_Not_PreBool_ReturnValue' has a wrong offset!");
static_assert(offsetof(FUNCLIB_Combat_C_HasClearShotToTargetFromLocation, CallFunc_GetGameInstance_ReturnValue) == 0x000110, "Member 'FUNCLIB_Combat_C_HasClearShotToTargetFromLocation::CallFunc_GetGameInstance_ReturnValue' has a wrong offset!");
static_assert(offsetof(FUNCLIB_Combat_C_HasClearShotToTargetFromLocation, K2Node_DynamicCast_AsGI_Single_Player) == 0x000118, "Member 'FUNCLIB_Combat_C_HasClearShotToTargetFromLocation::K2Node_DynamicCast_AsGI_Single_Player' has a wrong offset!");
static_assert(offsetof(FUNCLIB_Combat_C_HasClearShotToTargetFromLocation, K2Node_DynamicCast_bSuccess) == 0x000120, "Member 'FUNCLIB_Combat_C_HasClearShotToTargetFromLocation::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(FUNCLIB_Combat_C_HasClearShotToTargetFromLocation, CallFunc_GetSkillTargetAimLocation_Locations) == 0x000124, "Member 'FUNCLIB_Combat_C_HasClearShotToTargetFromLocation::CallFunc_GetSkillTargetAimLocation_Locations' has a wrong offset!");
static_assert(offsetof(FUNCLIB_Combat_C_HasClearShotToTargetFromLocation, CallFunc_HasUnobstructedPropagationPathBetweenPoints_ReturnValue) == 0x000130, "Member 'FUNCLIB_Combat_C_HasClearShotToTargetFromLocation::CallFunc_HasUnobstructedPropagationPathBetweenPoints_ReturnValue' has a wrong offset!");
static_assert(offsetof(FUNCLIB_Combat_C_HasClearShotToTargetFromLocation, CallFunc_K2_GetActorLocation_ReturnValue) == 0x000134, "Member 'FUNCLIB_Combat_C_HasClearShotToTargetFromLocation::CallFunc_K2_GetActorLocation_ReturnValue' has a wrong offset!");
static_assert(offsetof(FUNCLIB_Combat_C_HasClearShotToTargetFromLocation, CallFunc_LineTraceSingle_OutHit) == 0x000140, "Member 'FUNCLIB_Combat_C_HasClearShotToTargetFromLocation::CallFunc_LineTraceSingle_OutHit' has a wrong offset!");
static_assert(offsetof(FUNCLIB_Combat_C_HasClearShotToTargetFromLocation, CallFunc_LineTraceSingle_ReturnValue) == 0x0001C8, "Member 'FUNCLIB_Combat_C_HasClearShotToTargetFromLocation::CallFunc_LineTraceSingle_ReturnValue' has a wrong offset!");
static_assert(offsetof(FUNCLIB_Combat_C_HasClearShotToTargetFromLocation, CallFunc_Not_PreBool_ReturnValue_1) == 0x0001C9, "Member 'FUNCLIB_Combat_C_HasClearShotToTargetFromLocation::CallFunc_Not_PreBool_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(FUNCLIB_Combat_C_HasClearShotToTargetFromLocation, CallFunc_GetTarget_Target) == 0x0001D0, "Member 'FUNCLIB_Combat_C_HasClearShotToTargetFromLocation::CallFunc_GetTarget_Target' has a wrong offset!");
static_assert(offsetof(FUNCLIB_Combat_C_HasClearShotToTargetFromLocation, CallFunc_IsValid_ReturnValue_1) == 0x0001D8, "Member 'FUNCLIB_Combat_C_HasClearShotToTargetFromLocation::CallFunc_IsValid_ReturnValue_1' has a wrong offset!");

// Function FUNCLIB_Combat.FUNCLIB_Combat_C.HasClearShotToTargetFromSocket
// 0x00A0 (0x00A0 - 0x0000)
struct FUNCLIB_Combat_C_HasClearShotToTargetFromSocket final
{
public:
	class APAWN_Enemy_C*                          Enemy;                                             // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FName                                   BarrelSocket;                                      // 0x0008(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         BulletRadius;                                      // 0x0010(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UObject*                                __WorldContext;                                    // 0x0018(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Result;                                            // 0x0020(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_21[0x7];                                       // 0x0021(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class AActor*                                 LinkedActor;                                       // 0x0028(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                AimTargetLocation;                                 // 0x0030(0x000C)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                BarrelLocation;                                    // 0x003C(0x000C)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UOBJ_EnemyTarget_C*                     SkillTarget;                                       // 0x0048(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_GetPlayTimeInSeconds_ReturnValue;         // 0x0050(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_HasClearShotToTargetFromLocation_Result;  // 0x0054(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_55[0x3];                                       // 0x0055(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                CallFunc_K2_GetActorLocation_ReturnValue;          // 0x0058(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_NameName_ReturnValue;          // 0x0064(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_65[0x3];                                       // 0x0065(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                CallFunc_GetSocketLocation_ReturnValue;            // 0x0068(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_GetSkillTargetAimLocation_Locations;      // 0x0074(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_GetLastSeenTimestamp_LastSeenTimestamp;   // 0x0080(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_84[0x4];                                       // 0x0084(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class APAWN_SystemShockCharacter_C*           CallFunc_GetDetectedPawn_Pawn;                     // 0x0088(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Subtract_FloatFloat_ReturnValue;          // 0x0090(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0094(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Less_FloatFloat_ReturnValue;              // 0x0095(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsValid_ReturnValue_1;                    // 0x0096(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsValid_ReturnValue_2;                    // 0x0097(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	class UOBJ_EnemyTarget_C*                     CallFunc_GetTarget_Target;                         // 0x0098(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(FUNCLIB_Combat_C_HasClearShotToTargetFromSocket) == 0x000008, "Wrong alignment on FUNCLIB_Combat_C_HasClearShotToTargetFromSocket");
static_assert(sizeof(FUNCLIB_Combat_C_HasClearShotToTargetFromSocket) == 0x0000A0, "Wrong size on FUNCLIB_Combat_C_HasClearShotToTargetFromSocket");
static_assert(offsetof(FUNCLIB_Combat_C_HasClearShotToTargetFromSocket, Enemy) == 0x000000, "Member 'FUNCLIB_Combat_C_HasClearShotToTargetFromSocket::Enemy' has a wrong offset!");
static_assert(offsetof(FUNCLIB_Combat_C_HasClearShotToTargetFromSocket, BarrelSocket) == 0x000008, "Member 'FUNCLIB_Combat_C_HasClearShotToTargetFromSocket::BarrelSocket' has a wrong offset!");
static_assert(offsetof(FUNCLIB_Combat_C_HasClearShotToTargetFromSocket, BulletRadius) == 0x000010, "Member 'FUNCLIB_Combat_C_HasClearShotToTargetFromSocket::BulletRadius' has a wrong offset!");
static_assert(offsetof(FUNCLIB_Combat_C_HasClearShotToTargetFromSocket, __WorldContext) == 0x000018, "Member 'FUNCLIB_Combat_C_HasClearShotToTargetFromSocket::__WorldContext' has a wrong offset!");
static_assert(offsetof(FUNCLIB_Combat_C_HasClearShotToTargetFromSocket, Result) == 0x000020, "Member 'FUNCLIB_Combat_C_HasClearShotToTargetFromSocket::Result' has a wrong offset!");
static_assert(offsetof(FUNCLIB_Combat_C_HasClearShotToTargetFromSocket, LinkedActor) == 0x000028, "Member 'FUNCLIB_Combat_C_HasClearShotToTargetFromSocket::LinkedActor' has a wrong offset!");
static_assert(offsetof(FUNCLIB_Combat_C_HasClearShotToTargetFromSocket, AimTargetLocation) == 0x000030, "Member 'FUNCLIB_Combat_C_HasClearShotToTargetFromSocket::AimTargetLocation' has a wrong offset!");
static_assert(offsetof(FUNCLIB_Combat_C_HasClearShotToTargetFromSocket, BarrelLocation) == 0x00003C, "Member 'FUNCLIB_Combat_C_HasClearShotToTargetFromSocket::BarrelLocation' has a wrong offset!");
static_assert(offsetof(FUNCLIB_Combat_C_HasClearShotToTargetFromSocket, SkillTarget) == 0x000048, "Member 'FUNCLIB_Combat_C_HasClearShotToTargetFromSocket::SkillTarget' has a wrong offset!");
static_assert(offsetof(FUNCLIB_Combat_C_HasClearShotToTargetFromSocket, CallFunc_GetPlayTimeInSeconds_ReturnValue) == 0x000050, "Member 'FUNCLIB_Combat_C_HasClearShotToTargetFromSocket::CallFunc_GetPlayTimeInSeconds_ReturnValue' has a wrong offset!");
static_assert(offsetof(FUNCLIB_Combat_C_HasClearShotToTargetFromSocket, CallFunc_HasClearShotToTargetFromLocation_Result) == 0x000054, "Member 'FUNCLIB_Combat_C_HasClearShotToTargetFromSocket::CallFunc_HasClearShotToTargetFromLocation_Result' has a wrong offset!");
static_assert(offsetof(FUNCLIB_Combat_C_HasClearShotToTargetFromSocket, CallFunc_K2_GetActorLocation_ReturnValue) == 0x000058, "Member 'FUNCLIB_Combat_C_HasClearShotToTargetFromSocket::CallFunc_K2_GetActorLocation_ReturnValue' has a wrong offset!");
static_assert(offsetof(FUNCLIB_Combat_C_HasClearShotToTargetFromSocket, CallFunc_EqualEqual_NameName_ReturnValue) == 0x000064, "Member 'FUNCLIB_Combat_C_HasClearShotToTargetFromSocket::CallFunc_EqualEqual_NameName_ReturnValue' has a wrong offset!");
static_assert(offsetof(FUNCLIB_Combat_C_HasClearShotToTargetFromSocket, CallFunc_GetSocketLocation_ReturnValue) == 0x000068, "Member 'FUNCLIB_Combat_C_HasClearShotToTargetFromSocket::CallFunc_GetSocketLocation_ReturnValue' has a wrong offset!");
static_assert(offsetof(FUNCLIB_Combat_C_HasClearShotToTargetFromSocket, CallFunc_GetSkillTargetAimLocation_Locations) == 0x000074, "Member 'FUNCLIB_Combat_C_HasClearShotToTargetFromSocket::CallFunc_GetSkillTargetAimLocation_Locations' has a wrong offset!");
static_assert(offsetof(FUNCLIB_Combat_C_HasClearShotToTargetFromSocket, CallFunc_GetLastSeenTimestamp_LastSeenTimestamp) == 0x000080, "Member 'FUNCLIB_Combat_C_HasClearShotToTargetFromSocket::CallFunc_GetLastSeenTimestamp_LastSeenTimestamp' has a wrong offset!");
static_assert(offsetof(FUNCLIB_Combat_C_HasClearShotToTargetFromSocket, CallFunc_GetDetectedPawn_Pawn) == 0x000088, "Member 'FUNCLIB_Combat_C_HasClearShotToTargetFromSocket::CallFunc_GetDetectedPawn_Pawn' has a wrong offset!");
static_assert(offsetof(FUNCLIB_Combat_C_HasClearShotToTargetFromSocket, CallFunc_Subtract_FloatFloat_ReturnValue) == 0x000090, "Member 'FUNCLIB_Combat_C_HasClearShotToTargetFromSocket::CallFunc_Subtract_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(FUNCLIB_Combat_C_HasClearShotToTargetFromSocket, CallFunc_IsValid_ReturnValue) == 0x000094, "Member 'FUNCLIB_Combat_C_HasClearShotToTargetFromSocket::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(FUNCLIB_Combat_C_HasClearShotToTargetFromSocket, CallFunc_Less_FloatFloat_ReturnValue) == 0x000095, "Member 'FUNCLIB_Combat_C_HasClearShotToTargetFromSocket::CallFunc_Less_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(FUNCLIB_Combat_C_HasClearShotToTargetFromSocket, CallFunc_IsValid_ReturnValue_1) == 0x000096, "Member 'FUNCLIB_Combat_C_HasClearShotToTargetFromSocket::CallFunc_IsValid_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(FUNCLIB_Combat_C_HasClearShotToTargetFromSocket, CallFunc_IsValid_ReturnValue_2) == 0x000097, "Member 'FUNCLIB_Combat_C_HasClearShotToTargetFromSocket::CallFunc_IsValid_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(FUNCLIB_Combat_C_HasClearShotToTargetFromSocket, CallFunc_GetTarget_Target) == 0x000098, "Member 'FUNCLIB_Combat_C_HasClearShotToTargetFromSocket::CallFunc_GetTarget_Target' has a wrong offset!");

// Function FUNCLIB_Combat.FUNCLIB_Combat_C.GetEffectiveArmorRatioFromDamage
// 0x0070 (0x0070 - 0x0000)
struct FUNCLIB_Combat_C_GetEffectiveArmorRatioFromDamage final
{
public:
	struct FAttribDamageInstance                  DamageInstance;                                    // 0x0000(0x0028)(BlueprintVisible, BlueprintReadOnly, Parm)
	class UObject*                                __WorldContext;                                    // 0x0028(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         BlockRatio;                                        // 0x0030(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Length_ReturnValue;                 // 0x0034(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FAttribDamageTickResult                CallFunc_Array_Get_Item;                           // 0x0038(0x0024)(NoDestructor)
	bool                                          CallFunc_Greater_IntInt_ReturnValue;               // 0x005C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_5D[0x3];                                       // 0x005D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_Subtract_FloatFloat_ReturnValue;          // 0x0060(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_FMax_ReturnValue;                         // 0x0064(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Divide_FloatFloat_ReturnValue;            // 0x0068(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(FUNCLIB_Combat_C_GetEffectiveArmorRatioFromDamage) == 0x000008, "Wrong alignment on FUNCLIB_Combat_C_GetEffectiveArmorRatioFromDamage");
static_assert(sizeof(FUNCLIB_Combat_C_GetEffectiveArmorRatioFromDamage) == 0x000070, "Wrong size on FUNCLIB_Combat_C_GetEffectiveArmorRatioFromDamage");
static_assert(offsetof(FUNCLIB_Combat_C_GetEffectiveArmorRatioFromDamage, DamageInstance) == 0x000000, "Member 'FUNCLIB_Combat_C_GetEffectiveArmorRatioFromDamage::DamageInstance' has a wrong offset!");
static_assert(offsetof(FUNCLIB_Combat_C_GetEffectiveArmorRatioFromDamage, __WorldContext) == 0x000028, "Member 'FUNCLIB_Combat_C_GetEffectiveArmorRatioFromDamage::__WorldContext' has a wrong offset!");
static_assert(offsetof(FUNCLIB_Combat_C_GetEffectiveArmorRatioFromDamage, BlockRatio) == 0x000030, "Member 'FUNCLIB_Combat_C_GetEffectiveArmorRatioFromDamage::BlockRatio' has a wrong offset!");
static_assert(offsetof(FUNCLIB_Combat_C_GetEffectiveArmorRatioFromDamage, CallFunc_Array_Length_ReturnValue) == 0x000034, "Member 'FUNCLIB_Combat_C_GetEffectiveArmorRatioFromDamage::CallFunc_Array_Length_ReturnValue' has a wrong offset!");
static_assert(offsetof(FUNCLIB_Combat_C_GetEffectiveArmorRatioFromDamage, CallFunc_Array_Get_Item) == 0x000038, "Member 'FUNCLIB_Combat_C_GetEffectiveArmorRatioFromDamage::CallFunc_Array_Get_Item' has a wrong offset!");
static_assert(offsetof(FUNCLIB_Combat_C_GetEffectiveArmorRatioFromDamage, CallFunc_Greater_IntInt_ReturnValue) == 0x00005C, "Member 'FUNCLIB_Combat_C_GetEffectiveArmorRatioFromDamage::CallFunc_Greater_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(FUNCLIB_Combat_C_GetEffectiveArmorRatioFromDamage, CallFunc_Subtract_FloatFloat_ReturnValue) == 0x000060, "Member 'FUNCLIB_Combat_C_GetEffectiveArmorRatioFromDamage::CallFunc_Subtract_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(FUNCLIB_Combat_C_GetEffectiveArmorRatioFromDamage, CallFunc_FMax_ReturnValue) == 0x000064, "Member 'FUNCLIB_Combat_C_GetEffectiveArmorRatioFromDamage::CallFunc_FMax_ReturnValue' has a wrong offset!");
static_assert(offsetof(FUNCLIB_Combat_C_GetEffectiveArmorRatioFromDamage, CallFunc_Divide_FloatFloat_ReturnValue) == 0x000068, "Member 'FUNCLIB_Combat_C_GetEffectiveArmorRatioFromDamage::CallFunc_Divide_FloatFloat_ReturnValue' has a wrong offset!");

// Function FUNCLIB_Combat.FUNCLIB_Combat_C.GetMaxCombatTraceDistance
// 0x0010 (0x0010 - 0x0000)
struct FUNCLIB_Combat_C_GetMaxCombatTraceDistance final
{
public:
	class UObject*                                __WorldContext;                                    // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Distance;                                          // 0x0008(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(FUNCLIB_Combat_C_GetMaxCombatTraceDistance) == 0x000008, "Wrong alignment on FUNCLIB_Combat_C_GetMaxCombatTraceDistance");
static_assert(sizeof(FUNCLIB_Combat_C_GetMaxCombatTraceDistance) == 0x000010, "Wrong size on FUNCLIB_Combat_C_GetMaxCombatTraceDistance");
static_assert(offsetof(FUNCLIB_Combat_C_GetMaxCombatTraceDistance, __WorldContext) == 0x000000, "Member 'FUNCLIB_Combat_C_GetMaxCombatTraceDistance::__WorldContext' has a wrong offset!");
static_assert(offsetof(FUNCLIB_Combat_C_GetMaxCombatTraceDistance, Distance) == 0x000008, "Member 'FUNCLIB_Combat_C_GetMaxCombatTraceDistance::Distance' has a wrong offset!");

// Function FUNCLIB_Combat.FUNCLIB_Combat_C.GetSkillTargetAimLocation
// 0x00B0 (0x00B0 - 0x0000)
struct FUNCLIB_Combat_C_GetSkillTargetAimLocation final
{
public:
	class APAWN_Enemy_C*                          SourcePawn;                                        // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UObject*                                __WorldContext;                                    // 0x0008(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                Locations;                                         // 0x0010(0x000C)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1C[0x4];                                       // 0x001C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UOBJ_EnemyTarget_C*                     Target;                                            // 0x0020(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Get_Target_Location_Location;             // 0x0028(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_34[0x4];                                       // 0x0034(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class APAWN_SystemShockCharacter_C*           CallFunc_GetDetectedPawn_Pawn;                     // 0x0038(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0040(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsValid_ReturnValue_1;                    // 0x0041(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_42[0xE];                                       // 0x0042(0x000E)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTransform                             CallFunc_GetHeadTransform_Transform;               // 0x0050(0x0030)(IsPlainOldData, NoDestructor)
	struct FVector                                CallFunc_BreakTransform_Location;                  // 0x0080(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               CallFunc_BreakTransform_Rotation;                  // 0x008C(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FVector                                CallFunc_BreakTransform_Scale;                     // 0x0098(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue_2;                    // 0x00A4(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_A5[0x3];                                       // 0x00A5(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class UOBJ_EnemyTarget_C*                     CallFunc_GetTarget_Target;                         // 0x00A8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(FUNCLIB_Combat_C_GetSkillTargetAimLocation) == 0x000010, "Wrong alignment on FUNCLIB_Combat_C_GetSkillTargetAimLocation");
static_assert(sizeof(FUNCLIB_Combat_C_GetSkillTargetAimLocation) == 0x0000B0, "Wrong size on FUNCLIB_Combat_C_GetSkillTargetAimLocation");
static_assert(offsetof(FUNCLIB_Combat_C_GetSkillTargetAimLocation, SourcePawn) == 0x000000, "Member 'FUNCLIB_Combat_C_GetSkillTargetAimLocation::SourcePawn' has a wrong offset!");
static_assert(offsetof(FUNCLIB_Combat_C_GetSkillTargetAimLocation, __WorldContext) == 0x000008, "Member 'FUNCLIB_Combat_C_GetSkillTargetAimLocation::__WorldContext' has a wrong offset!");
static_assert(offsetof(FUNCLIB_Combat_C_GetSkillTargetAimLocation, Locations) == 0x000010, "Member 'FUNCLIB_Combat_C_GetSkillTargetAimLocation::Locations' has a wrong offset!");
static_assert(offsetof(FUNCLIB_Combat_C_GetSkillTargetAimLocation, Target) == 0x000020, "Member 'FUNCLIB_Combat_C_GetSkillTargetAimLocation::Target' has a wrong offset!");
static_assert(offsetof(FUNCLIB_Combat_C_GetSkillTargetAimLocation, CallFunc_Get_Target_Location_Location) == 0x000028, "Member 'FUNCLIB_Combat_C_GetSkillTargetAimLocation::CallFunc_Get_Target_Location_Location' has a wrong offset!");
static_assert(offsetof(FUNCLIB_Combat_C_GetSkillTargetAimLocation, CallFunc_GetDetectedPawn_Pawn) == 0x000038, "Member 'FUNCLIB_Combat_C_GetSkillTargetAimLocation::CallFunc_GetDetectedPawn_Pawn' has a wrong offset!");
static_assert(offsetof(FUNCLIB_Combat_C_GetSkillTargetAimLocation, CallFunc_IsValid_ReturnValue) == 0x000040, "Member 'FUNCLIB_Combat_C_GetSkillTargetAimLocation::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(FUNCLIB_Combat_C_GetSkillTargetAimLocation, CallFunc_IsValid_ReturnValue_1) == 0x000041, "Member 'FUNCLIB_Combat_C_GetSkillTargetAimLocation::CallFunc_IsValid_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(FUNCLIB_Combat_C_GetSkillTargetAimLocation, CallFunc_GetHeadTransform_Transform) == 0x000050, "Member 'FUNCLIB_Combat_C_GetSkillTargetAimLocation::CallFunc_GetHeadTransform_Transform' has a wrong offset!");
static_assert(offsetof(FUNCLIB_Combat_C_GetSkillTargetAimLocation, CallFunc_BreakTransform_Location) == 0x000080, "Member 'FUNCLIB_Combat_C_GetSkillTargetAimLocation::CallFunc_BreakTransform_Location' has a wrong offset!");
static_assert(offsetof(FUNCLIB_Combat_C_GetSkillTargetAimLocation, CallFunc_BreakTransform_Rotation) == 0x00008C, "Member 'FUNCLIB_Combat_C_GetSkillTargetAimLocation::CallFunc_BreakTransform_Rotation' has a wrong offset!");
static_assert(offsetof(FUNCLIB_Combat_C_GetSkillTargetAimLocation, CallFunc_BreakTransform_Scale) == 0x000098, "Member 'FUNCLIB_Combat_C_GetSkillTargetAimLocation::CallFunc_BreakTransform_Scale' has a wrong offset!");
static_assert(offsetof(FUNCLIB_Combat_C_GetSkillTargetAimLocation, CallFunc_IsValid_ReturnValue_2) == 0x0000A4, "Member 'FUNCLIB_Combat_C_GetSkillTargetAimLocation::CallFunc_IsValid_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(FUNCLIB_Combat_C_GetSkillTargetAimLocation, CallFunc_GetTarget_Target) == 0x0000A8, "Member 'FUNCLIB_Combat_C_GetSkillTargetAimLocation::CallFunc_GetTarget_Target' has a wrong offset!");

// Function FUNCLIB_Combat.FUNCLIB_Combat_C.GetScaledCombatDamage
// 0x0090 (0x0090 - 0x0000)
struct FUNCLIB_Combat_C_GetScaledCombatDamage final
{
public:
	int32                                         BaseDamage;                                        // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          IsCyberspace;                                      // 0x0004(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class UObject*                                __WorldContext;                                    // 0x0008(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         DamageValue;                                       // 0x0010(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Variable;                                // 0x0014(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_15[0x3];                                       // 0x0015(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class UGameInstance*                          CallFunc_GetGameInstance_ReturnValue;              // 0x0018(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UGI_SinglePlayer_C*                     K2Node_DynamicCast_AsGI_Single_Player;             // 0x0020(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0028(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	ENUM_GameDifficulty                           CallFunc_GetDifficultyValues_Combat;               // 0x0029(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ENUM_GameDifficulty                           CallFunc_GetDifficultyValues_Mission;              // 0x002A(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ENUM_GameDifficulty                           CallFunc_GetDifficultyValues_Puzzle;               // 0x002B(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ENUM_GameDifficulty                           CallFunc_GetDifficultyValues_Cyber;                // 0x002C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ENUM_GameDifficulty                           K2Node_Select_Default;                             // 0x002D(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_2E[0x2];                                       // 0x002E(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 CallFunc_GetEnumeratorUserFriendlyName_ReturnValue; // 0x0030(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	class FName                                   CallFunc_Conv_StringToName_ReturnValue;            // 0x0040(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FSTRUCT_CombatDifficultySettings       CallFunc_GetDataTableRowFromName_OutRow;           // 0x0048(0x0034)(IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_GetDataTableRowFromName_ReturnValue;      // 0x007C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_7D[0x3];                                       // 0x007D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_Conv_IntToFloat_ReturnValue;              // 0x0080(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Divide_FloatFloat_ReturnValue;            // 0x0084(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Multiply_IntFloat_ReturnValue;            // 0x0088(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Round_ReturnValue;                        // 0x008C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(FUNCLIB_Combat_C_GetScaledCombatDamage) == 0x000008, "Wrong alignment on FUNCLIB_Combat_C_GetScaledCombatDamage");
static_assert(sizeof(FUNCLIB_Combat_C_GetScaledCombatDamage) == 0x000090, "Wrong size on FUNCLIB_Combat_C_GetScaledCombatDamage");
static_assert(offsetof(FUNCLIB_Combat_C_GetScaledCombatDamage, BaseDamage) == 0x000000, "Member 'FUNCLIB_Combat_C_GetScaledCombatDamage::BaseDamage' has a wrong offset!");
static_assert(offsetof(FUNCLIB_Combat_C_GetScaledCombatDamage, IsCyberspace) == 0x000004, "Member 'FUNCLIB_Combat_C_GetScaledCombatDamage::IsCyberspace' has a wrong offset!");
static_assert(offsetof(FUNCLIB_Combat_C_GetScaledCombatDamage, __WorldContext) == 0x000008, "Member 'FUNCLIB_Combat_C_GetScaledCombatDamage::__WorldContext' has a wrong offset!");
static_assert(offsetof(FUNCLIB_Combat_C_GetScaledCombatDamage, DamageValue) == 0x000010, "Member 'FUNCLIB_Combat_C_GetScaledCombatDamage::DamageValue' has a wrong offset!");
static_assert(offsetof(FUNCLIB_Combat_C_GetScaledCombatDamage, Temp_bool_Variable) == 0x000014, "Member 'FUNCLIB_Combat_C_GetScaledCombatDamage::Temp_bool_Variable' has a wrong offset!");
static_assert(offsetof(FUNCLIB_Combat_C_GetScaledCombatDamage, CallFunc_GetGameInstance_ReturnValue) == 0x000018, "Member 'FUNCLIB_Combat_C_GetScaledCombatDamage::CallFunc_GetGameInstance_ReturnValue' has a wrong offset!");
static_assert(offsetof(FUNCLIB_Combat_C_GetScaledCombatDamage, K2Node_DynamicCast_AsGI_Single_Player) == 0x000020, "Member 'FUNCLIB_Combat_C_GetScaledCombatDamage::K2Node_DynamicCast_AsGI_Single_Player' has a wrong offset!");
static_assert(offsetof(FUNCLIB_Combat_C_GetScaledCombatDamage, K2Node_DynamicCast_bSuccess) == 0x000028, "Member 'FUNCLIB_Combat_C_GetScaledCombatDamage::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(FUNCLIB_Combat_C_GetScaledCombatDamage, CallFunc_GetDifficultyValues_Combat) == 0x000029, "Member 'FUNCLIB_Combat_C_GetScaledCombatDamage::CallFunc_GetDifficultyValues_Combat' has a wrong offset!");
static_assert(offsetof(FUNCLIB_Combat_C_GetScaledCombatDamage, CallFunc_GetDifficultyValues_Mission) == 0x00002A, "Member 'FUNCLIB_Combat_C_GetScaledCombatDamage::CallFunc_GetDifficultyValues_Mission' has a wrong offset!");
static_assert(offsetof(FUNCLIB_Combat_C_GetScaledCombatDamage, CallFunc_GetDifficultyValues_Puzzle) == 0x00002B, "Member 'FUNCLIB_Combat_C_GetScaledCombatDamage::CallFunc_GetDifficultyValues_Puzzle' has a wrong offset!");
static_assert(offsetof(FUNCLIB_Combat_C_GetScaledCombatDamage, CallFunc_GetDifficultyValues_Cyber) == 0x00002C, "Member 'FUNCLIB_Combat_C_GetScaledCombatDamage::CallFunc_GetDifficultyValues_Cyber' has a wrong offset!");
static_assert(offsetof(FUNCLIB_Combat_C_GetScaledCombatDamage, K2Node_Select_Default) == 0x00002D, "Member 'FUNCLIB_Combat_C_GetScaledCombatDamage::K2Node_Select_Default' has a wrong offset!");
static_assert(offsetof(FUNCLIB_Combat_C_GetScaledCombatDamage, CallFunc_GetEnumeratorUserFriendlyName_ReturnValue) == 0x000030, "Member 'FUNCLIB_Combat_C_GetScaledCombatDamage::CallFunc_GetEnumeratorUserFriendlyName_ReturnValue' has a wrong offset!");
static_assert(offsetof(FUNCLIB_Combat_C_GetScaledCombatDamage, CallFunc_Conv_StringToName_ReturnValue) == 0x000040, "Member 'FUNCLIB_Combat_C_GetScaledCombatDamage::CallFunc_Conv_StringToName_ReturnValue' has a wrong offset!");
static_assert(offsetof(FUNCLIB_Combat_C_GetScaledCombatDamage, CallFunc_GetDataTableRowFromName_OutRow) == 0x000048, "Member 'FUNCLIB_Combat_C_GetScaledCombatDamage::CallFunc_GetDataTableRowFromName_OutRow' has a wrong offset!");
static_assert(offsetof(FUNCLIB_Combat_C_GetScaledCombatDamage, CallFunc_GetDataTableRowFromName_ReturnValue) == 0x00007C, "Member 'FUNCLIB_Combat_C_GetScaledCombatDamage::CallFunc_GetDataTableRowFromName_ReturnValue' has a wrong offset!");
static_assert(offsetof(FUNCLIB_Combat_C_GetScaledCombatDamage, CallFunc_Conv_IntToFloat_ReturnValue) == 0x000080, "Member 'FUNCLIB_Combat_C_GetScaledCombatDamage::CallFunc_Conv_IntToFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(FUNCLIB_Combat_C_GetScaledCombatDamage, CallFunc_Divide_FloatFloat_ReturnValue) == 0x000084, "Member 'FUNCLIB_Combat_C_GetScaledCombatDamage::CallFunc_Divide_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(FUNCLIB_Combat_C_GetScaledCombatDamage, CallFunc_Multiply_IntFloat_ReturnValue) == 0x000088, "Member 'FUNCLIB_Combat_C_GetScaledCombatDamage::CallFunc_Multiply_IntFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(FUNCLIB_Combat_C_GetScaledCombatDamage, CallFunc_Round_ReturnValue) == 0x00008C, "Member 'FUNCLIB_Combat_C_GetScaledCombatDamage::CallFunc_Round_ReturnValue' has a wrong offset!");

// Function FUNCLIB_Combat.FUNCLIB_Combat_C.GetScaledEnemyStatsDamage
// 0x0088 (0x0088 - 0x0000)
struct FUNCLIB_Combat_C_GetScaledEnemyStatsDamage final
{
public:
	struct FDataTableRowHandle                    EnemyStatsRowHandle;                               // 0x0000(0x0010)(BlueprintVisible, BlueprintReadOnly, Parm, NoDestructor)
	ENUM_EnemyAttackType                          AttackType;                                        // 0x0010(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UObject*                                __WorldContext;                                    // 0x0018(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         DamageValue;                                       // 0x0020(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         BaseDamage;                                        // 0x0024(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ENUM_EnemyAttackType                          Temp_byte_Variable;                                // 0x0028(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_29[0x7];                                       // 0x0029(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FSTRUCT_EnemyStats                     CallFunc_GetDataTableRowFromName_OutRow;           // 0x0030(0x0048)(HasGetValueTypeHash)
	bool                                          CallFunc_GetDataTableRowFromName_ReturnValue;      // 0x0078(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_EqualEqual_ByteByte_ReturnValue;          // 0x0079(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_7A[0x2];                                       // 0x007A(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_GetScaledCombatDamage_DamageValue;        // 0x007C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         K2Node_Select_Default;                             // 0x0080(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(FUNCLIB_Combat_C_GetScaledEnemyStatsDamage) == 0x000008, "Wrong alignment on FUNCLIB_Combat_C_GetScaledEnemyStatsDamage");
static_assert(sizeof(FUNCLIB_Combat_C_GetScaledEnemyStatsDamage) == 0x000088, "Wrong size on FUNCLIB_Combat_C_GetScaledEnemyStatsDamage");
static_assert(offsetof(FUNCLIB_Combat_C_GetScaledEnemyStatsDamage, EnemyStatsRowHandle) == 0x000000, "Member 'FUNCLIB_Combat_C_GetScaledEnemyStatsDamage::EnemyStatsRowHandle' has a wrong offset!");
static_assert(offsetof(FUNCLIB_Combat_C_GetScaledEnemyStatsDamage, AttackType) == 0x000010, "Member 'FUNCLIB_Combat_C_GetScaledEnemyStatsDamage::AttackType' has a wrong offset!");
static_assert(offsetof(FUNCLIB_Combat_C_GetScaledEnemyStatsDamage, __WorldContext) == 0x000018, "Member 'FUNCLIB_Combat_C_GetScaledEnemyStatsDamage::__WorldContext' has a wrong offset!");
static_assert(offsetof(FUNCLIB_Combat_C_GetScaledEnemyStatsDamage, DamageValue) == 0x000020, "Member 'FUNCLIB_Combat_C_GetScaledEnemyStatsDamage::DamageValue' has a wrong offset!");
static_assert(offsetof(FUNCLIB_Combat_C_GetScaledEnemyStatsDamage, BaseDamage) == 0x000024, "Member 'FUNCLIB_Combat_C_GetScaledEnemyStatsDamage::BaseDamage' has a wrong offset!");
static_assert(offsetof(FUNCLIB_Combat_C_GetScaledEnemyStatsDamage, Temp_byte_Variable) == 0x000028, "Member 'FUNCLIB_Combat_C_GetScaledEnemyStatsDamage::Temp_byte_Variable' has a wrong offset!");
static_assert(offsetof(FUNCLIB_Combat_C_GetScaledEnemyStatsDamage, CallFunc_GetDataTableRowFromName_OutRow) == 0x000030, "Member 'FUNCLIB_Combat_C_GetScaledEnemyStatsDamage::CallFunc_GetDataTableRowFromName_OutRow' has a wrong offset!");
static_assert(offsetof(FUNCLIB_Combat_C_GetScaledEnemyStatsDamage, CallFunc_GetDataTableRowFromName_ReturnValue) == 0x000078, "Member 'FUNCLIB_Combat_C_GetScaledEnemyStatsDamage::CallFunc_GetDataTableRowFromName_ReturnValue' has a wrong offset!");
static_assert(offsetof(FUNCLIB_Combat_C_GetScaledEnemyStatsDamage, CallFunc_EqualEqual_ByteByte_ReturnValue) == 0x000079, "Member 'FUNCLIB_Combat_C_GetScaledEnemyStatsDamage::CallFunc_EqualEqual_ByteByte_ReturnValue' has a wrong offset!");
static_assert(offsetof(FUNCLIB_Combat_C_GetScaledEnemyStatsDamage, CallFunc_GetScaledCombatDamage_DamageValue) == 0x00007C, "Member 'FUNCLIB_Combat_C_GetScaledEnemyStatsDamage::CallFunc_GetScaledCombatDamage_DamageValue' has a wrong offset!");
static_assert(offsetof(FUNCLIB_Combat_C_GetScaledEnemyStatsDamage, K2Node_Select_Default) == 0x000080, "Member 'FUNCLIB_Combat_C_GetScaledEnemyStatsDamage::K2Node_Select_Default' has a wrong offset!");

// Function FUNCLIB_Combat.FUNCLIB_Combat_C.GetScaledEnemyDamage
// 0x0020 (0x0020 - 0x0000)
struct FUNCLIB_Combat_C_GetScaledEnemyDamage final
{
public:
	class APAWN_Enemy_C*                          Pawn;                                              // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ENUM_EnemyAttackType                          AttackType;                                        // 0x0008(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UObject*                                __WorldContext;                                    // 0x0010(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         DamageValue;                                       // 0x0018(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_GetScaledEnemyStatsDamage_DamageValue;    // 0x001C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(FUNCLIB_Combat_C_GetScaledEnemyDamage) == 0x000008, "Wrong alignment on FUNCLIB_Combat_C_GetScaledEnemyDamage");
static_assert(sizeof(FUNCLIB_Combat_C_GetScaledEnemyDamage) == 0x000020, "Wrong size on FUNCLIB_Combat_C_GetScaledEnemyDamage");
static_assert(offsetof(FUNCLIB_Combat_C_GetScaledEnemyDamage, Pawn) == 0x000000, "Member 'FUNCLIB_Combat_C_GetScaledEnemyDamage::Pawn' has a wrong offset!");
static_assert(offsetof(FUNCLIB_Combat_C_GetScaledEnemyDamage, AttackType) == 0x000008, "Member 'FUNCLIB_Combat_C_GetScaledEnemyDamage::AttackType' has a wrong offset!");
static_assert(offsetof(FUNCLIB_Combat_C_GetScaledEnemyDamage, __WorldContext) == 0x000010, "Member 'FUNCLIB_Combat_C_GetScaledEnemyDamage::__WorldContext' has a wrong offset!");
static_assert(offsetof(FUNCLIB_Combat_C_GetScaledEnemyDamage, DamageValue) == 0x000018, "Member 'FUNCLIB_Combat_C_GetScaledEnemyDamage::DamageValue' has a wrong offset!");
static_assert(offsetof(FUNCLIB_Combat_C_GetScaledEnemyDamage, CallFunc_GetScaledEnemyStatsDamage_DamageValue) == 0x00001C, "Member 'FUNCLIB_Combat_C_GetScaledEnemyDamage::CallFunc_GetScaledEnemyStatsDamage_DamageValue' has a wrong offset!");

// Function FUNCLIB_Combat.FUNCLIB_Combat_C.GetSolidShieldPhysicalMaterial
// 0x0010 (0x0010 - 0x0000)
struct FUNCLIB_Combat_C_GetSolidShieldPhysicalMaterial final
{
public:
	class UObject*                                __WorldContext;                                    // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UPhysicalMaterial*                      Result;                                            // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(FUNCLIB_Combat_C_GetSolidShieldPhysicalMaterial) == 0x000008, "Wrong alignment on FUNCLIB_Combat_C_GetSolidShieldPhysicalMaterial");
static_assert(sizeof(FUNCLIB_Combat_C_GetSolidShieldPhysicalMaterial) == 0x000010, "Wrong size on FUNCLIB_Combat_C_GetSolidShieldPhysicalMaterial");
static_assert(offsetof(FUNCLIB_Combat_C_GetSolidShieldPhysicalMaterial, __WorldContext) == 0x000000, "Member 'FUNCLIB_Combat_C_GetSolidShieldPhysicalMaterial::__WorldContext' has a wrong offset!");
static_assert(offsetof(FUNCLIB_Combat_C_GetSolidShieldPhysicalMaterial, Result) == 0x000008, "Member 'FUNCLIB_Combat_C_GetSolidShieldPhysicalMaterial::Result' has a wrong offset!");

// Function FUNCLIB_Combat.FUNCLIB_Combat_C.GetPermeableShieldPhysicalMaterial
// 0x0010 (0x0010 - 0x0000)
struct FUNCLIB_Combat_C_GetPermeableShieldPhysicalMaterial final
{
public:
	class UObject*                                __WorldContext;                                    // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UPhysicalMaterial*                      Result;                                            // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(FUNCLIB_Combat_C_GetPermeableShieldPhysicalMaterial) == 0x000008, "Wrong alignment on FUNCLIB_Combat_C_GetPermeableShieldPhysicalMaterial");
static_assert(sizeof(FUNCLIB_Combat_C_GetPermeableShieldPhysicalMaterial) == 0x000010, "Wrong size on FUNCLIB_Combat_C_GetPermeableShieldPhysicalMaterial");
static_assert(offsetof(FUNCLIB_Combat_C_GetPermeableShieldPhysicalMaterial, __WorldContext) == 0x000000, "Member 'FUNCLIB_Combat_C_GetPermeableShieldPhysicalMaterial::__WorldContext' has a wrong offset!");
static_assert(offsetof(FUNCLIB_Combat_C_GetPermeableShieldPhysicalMaterial, Result) == 0x000008, "Member 'FUNCLIB_Combat_C_GetPermeableShieldPhysicalMaterial::Result' has a wrong offset!");

// Function FUNCLIB_Combat.FUNCLIB_Combat_C.GetAccuracyAdjustedRandomTargetDirection
// 0x00A0 (0x00A0 - 0x0000)
struct FUNCLIB_Combat_C_GetAccuracyAdjustedRandomTargetDirection final
{
public:
	struct FVector                                BarrelLocation;                                    // 0x0000(0x000C)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                TargetLocation;                                    // 0x000C(0x000C)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Accuracy;                                          // 0x0018(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector2D                              MinMaxSpreadRadius;                                // 0x001C(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         MaxRangeForSpreadCals;                             // 0x0024(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UObject*                                __WorldContext;                                    // 0x0028(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                AdjustedTargetDirection;                           // 0x0030(0x000C)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         ScaledSpreadRadius;                                // 0x003C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         DistanceToTarget;                                  // 0x0040(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         SpreadHalfAngle;                                   // 0x0044(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                DirectionToTarget;                                 // 0x0048(0x000C)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Subtract_VectorVector_ReturnValue;        // 0x0054(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_GetVectorNormalAndLength_OutLength;       // 0x0060(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_GetVectorNormalAndLength_ReturnValue;     // 0x0064(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Divide_FloatFloat_ReturnValue;            // 0x0070(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Subtract_FloatFloat_ReturnValue;          // 0x0074(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Divide_FloatFloat_ReturnValue_1;          // 0x0078(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Add_FloatFloat_ReturnValue;               // 0x007C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector2D_X;                          // 0x0080(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector2D_Y;                          // 0x0084(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_FClamp_ReturnValue;                       // 0x0088(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Lerp_ReturnValue;                         // 0x008C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_DegAtan2_ReturnValue;                     // 0x0090(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_GetRandomWeaponSpreadDirection_SpreadDirection; // 0x0094(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(FUNCLIB_Combat_C_GetAccuracyAdjustedRandomTargetDirection) == 0x000008, "Wrong alignment on FUNCLIB_Combat_C_GetAccuracyAdjustedRandomTargetDirection");
static_assert(sizeof(FUNCLIB_Combat_C_GetAccuracyAdjustedRandomTargetDirection) == 0x0000A0, "Wrong size on FUNCLIB_Combat_C_GetAccuracyAdjustedRandomTargetDirection");
static_assert(offsetof(FUNCLIB_Combat_C_GetAccuracyAdjustedRandomTargetDirection, BarrelLocation) == 0x000000, "Member 'FUNCLIB_Combat_C_GetAccuracyAdjustedRandomTargetDirection::BarrelLocation' has a wrong offset!");
static_assert(offsetof(FUNCLIB_Combat_C_GetAccuracyAdjustedRandomTargetDirection, TargetLocation) == 0x00000C, "Member 'FUNCLIB_Combat_C_GetAccuracyAdjustedRandomTargetDirection::TargetLocation' has a wrong offset!");
static_assert(offsetof(FUNCLIB_Combat_C_GetAccuracyAdjustedRandomTargetDirection, Accuracy) == 0x000018, "Member 'FUNCLIB_Combat_C_GetAccuracyAdjustedRandomTargetDirection::Accuracy' has a wrong offset!");
static_assert(offsetof(FUNCLIB_Combat_C_GetAccuracyAdjustedRandomTargetDirection, MinMaxSpreadRadius) == 0x00001C, "Member 'FUNCLIB_Combat_C_GetAccuracyAdjustedRandomTargetDirection::MinMaxSpreadRadius' has a wrong offset!");
static_assert(offsetof(FUNCLIB_Combat_C_GetAccuracyAdjustedRandomTargetDirection, MaxRangeForSpreadCals) == 0x000024, "Member 'FUNCLIB_Combat_C_GetAccuracyAdjustedRandomTargetDirection::MaxRangeForSpreadCals' has a wrong offset!");
static_assert(offsetof(FUNCLIB_Combat_C_GetAccuracyAdjustedRandomTargetDirection, __WorldContext) == 0x000028, "Member 'FUNCLIB_Combat_C_GetAccuracyAdjustedRandomTargetDirection::__WorldContext' has a wrong offset!");
static_assert(offsetof(FUNCLIB_Combat_C_GetAccuracyAdjustedRandomTargetDirection, AdjustedTargetDirection) == 0x000030, "Member 'FUNCLIB_Combat_C_GetAccuracyAdjustedRandomTargetDirection::AdjustedTargetDirection' has a wrong offset!");
static_assert(offsetof(FUNCLIB_Combat_C_GetAccuracyAdjustedRandomTargetDirection, ScaledSpreadRadius) == 0x00003C, "Member 'FUNCLIB_Combat_C_GetAccuracyAdjustedRandomTargetDirection::ScaledSpreadRadius' has a wrong offset!");
static_assert(offsetof(FUNCLIB_Combat_C_GetAccuracyAdjustedRandomTargetDirection, DistanceToTarget) == 0x000040, "Member 'FUNCLIB_Combat_C_GetAccuracyAdjustedRandomTargetDirection::DistanceToTarget' has a wrong offset!");
static_assert(offsetof(FUNCLIB_Combat_C_GetAccuracyAdjustedRandomTargetDirection, SpreadHalfAngle) == 0x000044, "Member 'FUNCLIB_Combat_C_GetAccuracyAdjustedRandomTargetDirection::SpreadHalfAngle' has a wrong offset!");
static_assert(offsetof(FUNCLIB_Combat_C_GetAccuracyAdjustedRandomTargetDirection, DirectionToTarget) == 0x000048, "Member 'FUNCLIB_Combat_C_GetAccuracyAdjustedRandomTargetDirection::DirectionToTarget' has a wrong offset!");
static_assert(offsetof(FUNCLIB_Combat_C_GetAccuracyAdjustedRandomTargetDirection, CallFunc_Subtract_VectorVector_ReturnValue) == 0x000054, "Member 'FUNCLIB_Combat_C_GetAccuracyAdjustedRandomTargetDirection::CallFunc_Subtract_VectorVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(FUNCLIB_Combat_C_GetAccuracyAdjustedRandomTargetDirection, CallFunc_GetVectorNormalAndLength_OutLength) == 0x000060, "Member 'FUNCLIB_Combat_C_GetAccuracyAdjustedRandomTargetDirection::CallFunc_GetVectorNormalAndLength_OutLength' has a wrong offset!");
static_assert(offsetof(FUNCLIB_Combat_C_GetAccuracyAdjustedRandomTargetDirection, CallFunc_GetVectorNormalAndLength_ReturnValue) == 0x000064, "Member 'FUNCLIB_Combat_C_GetAccuracyAdjustedRandomTargetDirection::CallFunc_GetVectorNormalAndLength_ReturnValue' has a wrong offset!");
static_assert(offsetof(FUNCLIB_Combat_C_GetAccuracyAdjustedRandomTargetDirection, CallFunc_Divide_FloatFloat_ReturnValue) == 0x000070, "Member 'FUNCLIB_Combat_C_GetAccuracyAdjustedRandomTargetDirection::CallFunc_Divide_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(FUNCLIB_Combat_C_GetAccuracyAdjustedRandomTargetDirection, CallFunc_Subtract_FloatFloat_ReturnValue) == 0x000074, "Member 'FUNCLIB_Combat_C_GetAccuracyAdjustedRandomTargetDirection::CallFunc_Subtract_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(FUNCLIB_Combat_C_GetAccuracyAdjustedRandomTargetDirection, CallFunc_Divide_FloatFloat_ReturnValue_1) == 0x000078, "Member 'FUNCLIB_Combat_C_GetAccuracyAdjustedRandomTargetDirection::CallFunc_Divide_FloatFloat_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(FUNCLIB_Combat_C_GetAccuracyAdjustedRandomTargetDirection, CallFunc_Add_FloatFloat_ReturnValue) == 0x00007C, "Member 'FUNCLIB_Combat_C_GetAccuracyAdjustedRandomTargetDirection::CallFunc_Add_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(FUNCLIB_Combat_C_GetAccuracyAdjustedRandomTargetDirection, CallFunc_BreakVector2D_X) == 0x000080, "Member 'FUNCLIB_Combat_C_GetAccuracyAdjustedRandomTargetDirection::CallFunc_BreakVector2D_X' has a wrong offset!");
static_assert(offsetof(FUNCLIB_Combat_C_GetAccuracyAdjustedRandomTargetDirection, CallFunc_BreakVector2D_Y) == 0x000084, "Member 'FUNCLIB_Combat_C_GetAccuracyAdjustedRandomTargetDirection::CallFunc_BreakVector2D_Y' has a wrong offset!");
static_assert(offsetof(FUNCLIB_Combat_C_GetAccuracyAdjustedRandomTargetDirection, CallFunc_FClamp_ReturnValue) == 0x000088, "Member 'FUNCLIB_Combat_C_GetAccuracyAdjustedRandomTargetDirection::CallFunc_FClamp_ReturnValue' has a wrong offset!");
static_assert(offsetof(FUNCLIB_Combat_C_GetAccuracyAdjustedRandomTargetDirection, CallFunc_Lerp_ReturnValue) == 0x00008C, "Member 'FUNCLIB_Combat_C_GetAccuracyAdjustedRandomTargetDirection::CallFunc_Lerp_ReturnValue' has a wrong offset!");
static_assert(offsetof(FUNCLIB_Combat_C_GetAccuracyAdjustedRandomTargetDirection, CallFunc_DegAtan2_ReturnValue) == 0x000090, "Member 'FUNCLIB_Combat_C_GetAccuracyAdjustedRandomTargetDirection::CallFunc_DegAtan2_ReturnValue' has a wrong offset!");
static_assert(offsetof(FUNCLIB_Combat_C_GetAccuracyAdjustedRandomTargetDirection, CallFunc_GetRandomWeaponSpreadDirection_SpreadDirection) == 0x000094, "Member 'FUNCLIB_Combat_C_GetAccuracyAdjustedRandomTargetDirection::CallFunc_GetRandomWeaponSpreadDirection_SpreadDirection' has a wrong offset!");

// Function FUNCLIB_Combat.FUNCLIB_Combat_C.GetRandomWeaponSpreadDirection
// 0x0040 (0x0040 - 0x0000)
struct FUNCLIB_Combat_C_GetRandomWeaponSpreadDirection final
{
public:
	struct FVector                                BarrelDirection;                                   // 0x0000(0x000C)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         SpreadHalfAngle;                                   // 0x000C(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UObject*                                __WorldContext;                                    // 0x0010(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                SpreadDirection;                                   // 0x0018(0x000C)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         ActualDeviationAngle;                              // 0x0024(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Greater_FloatFloat_ReturnValue;           // 0x0028(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_29[0x3];                                       // 0x0029(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                CallFunc_GetExactWeaponSpreadDirection_SpreadDirection; // 0x002C(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_RandomFloatInRange_ReturnValue;           // 0x0038(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Ease_ReturnValue;                         // 0x003C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(FUNCLIB_Combat_C_GetRandomWeaponSpreadDirection) == 0x000008, "Wrong alignment on FUNCLIB_Combat_C_GetRandomWeaponSpreadDirection");
static_assert(sizeof(FUNCLIB_Combat_C_GetRandomWeaponSpreadDirection) == 0x000040, "Wrong size on FUNCLIB_Combat_C_GetRandomWeaponSpreadDirection");
static_assert(offsetof(FUNCLIB_Combat_C_GetRandomWeaponSpreadDirection, BarrelDirection) == 0x000000, "Member 'FUNCLIB_Combat_C_GetRandomWeaponSpreadDirection::BarrelDirection' has a wrong offset!");
static_assert(offsetof(FUNCLIB_Combat_C_GetRandomWeaponSpreadDirection, SpreadHalfAngle) == 0x00000C, "Member 'FUNCLIB_Combat_C_GetRandomWeaponSpreadDirection::SpreadHalfAngle' has a wrong offset!");
static_assert(offsetof(FUNCLIB_Combat_C_GetRandomWeaponSpreadDirection, __WorldContext) == 0x000010, "Member 'FUNCLIB_Combat_C_GetRandomWeaponSpreadDirection::__WorldContext' has a wrong offset!");
static_assert(offsetof(FUNCLIB_Combat_C_GetRandomWeaponSpreadDirection, SpreadDirection) == 0x000018, "Member 'FUNCLIB_Combat_C_GetRandomWeaponSpreadDirection::SpreadDirection' has a wrong offset!");
static_assert(offsetof(FUNCLIB_Combat_C_GetRandomWeaponSpreadDirection, ActualDeviationAngle) == 0x000024, "Member 'FUNCLIB_Combat_C_GetRandomWeaponSpreadDirection::ActualDeviationAngle' has a wrong offset!");
static_assert(offsetof(FUNCLIB_Combat_C_GetRandomWeaponSpreadDirection, CallFunc_Greater_FloatFloat_ReturnValue) == 0x000028, "Member 'FUNCLIB_Combat_C_GetRandomWeaponSpreadDirection::CallFunc_Greater_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(FUNCLIB_Combat_C_GetRandomWeaponSpreadDirection, CallFunc_GetExactWeaponSpreadDirection_SpreadDirection) == 0x00002C, "Member 'FUNCLIB_Combat_C_GetRandomWeaponSpreadDirection::CallFunc_GetExactWeaponSpreadDirection_SpreadDirection' has a wrong offset!");
static_assert(offsetof(FUNCLIB_Combat_C_GetRandomWeaponSpreadDirection, CallFunc_RandomFloatInRange_ReturnValue) == 0x000038, "Member 'FUNCLIB_Combat_C_GetRandomWeaponSpreadDirection::CallFunc_RandomFloatInRange_ReturnValue' has a wrong offset!");
static_assert(offsetof(FUNCLIB_Combat_C_GetRandomWeaponSpreadDirection, CallFunc_Ease_ReturnValue) == 0x00003C, "Member 'FUNCLIB_Combat_C_GetRandomWeaponSpreadDirection::CallFunc_Ease_ReturnValue' has a wrong offset!");

// Function FUNCLIB_Combat.FUNCLIB_Combat_C.GetExactWeaponSpreadDirection
// 0x0070 (0x0070 - 0x0000)
struct FUNCLIB_Combat_C_GetExactWeaponSpreadDirection final
{
public:
	struct FVector                                BarrelDirection;                                   // 0x0000(0x000C)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         ActualDeviationAngle;                              // 0x000C(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UObject*                                __WorldContext;                                    // 0x0010(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                SpreadDirection;                                   // 0x0018(0x000C)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         AngleAroundCenter;                                 // 0x0024(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                DeviationDirection;                                // 0x0028(0x000C)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Vector_Up_ReturnValue;                    // 0x0034(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Greater_FloatFloat_ReturnValue;           // 0x0040(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_41[0x3];                                       // 0x0041(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                CallFunc_Cross_VectorVector_ReturnValue;           // 0x0044(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_RotateAngleAxis_ReturnValue;              // 0x0050(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_RotateAngleAxis_ReturnValue_1;            // 0x005C(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_RandomFloatInRange_ReturnValue;           // 0x0068(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(FUNCLIB_Combat_C_GetExactWeaponSpreadDirection) == 0x000008, "Wrong alignment on FUNCLIB_Combat_C_GetExactWeaponSpreadDirection");
static_assert(sizeof(FUNCLIB_Combat_C_GetExactWeaponSpreadDirection) == 0x000070, "Wrong size on FUNCLIB_Combat_C_GetExactWeaponSpreadDirection");
static_assert(offsetof(FUNCLIB_Combat_C_GetExactWeaponSpreadDirection, BarrelDirection) == 0x000000, "Member 'FUNCLIB_Combat_C_GetExactWeaponSpreadDirection::BarrelDirection' has a wrong offset!");
static_assert(offsetof(FUNCLIB_Combat_C_GetExactWeaponSpreadDirection, ActualDeviationAngle) == 0x00000C, "Member 'FUNCLIB_Combat_C_GetExactWeaponSpreadDirection::ActualDeviationAngle' has a wrong offset!");
static_assert(offsetof(FUNCLIB_Combat_C_GetExactWeaponSpreadDirection, __WorldContext) == 0x000010, "Member 'FUNCLIB_Combat_C_GetExactWeaponSpreadDirection::__WorldContext' has a wrong offset!");
static_assert(offsetof(FUNCLIB_Combat_C_GetExactWeaponSpreadDirection, SpreadDirection) == 0x000018, "Member 'FUNCLIB_Combat_C_GetExactWeaponSpreadDirection::SpreadDirection' has a wrong offset!");
static_assert(offsetof(FUNCLIB_Combat_C_GetExactWeaponSpreadDirection, AngleAroundCenter) == 0x000024, "Member 'FUNCLIB_Combat_C_GetExactWeaponSpreadDirection::AngleAroundCenter' has a wrong offset!");
static_assert(offsetof(FUNCLIB_Combat_C_GetExactWeaponSpreadDirection, DeviationDirection) == 0x000028, "Member 'FUNCLIB_Combat_C_GetExactWeaponSpreadDirection::DeviationDirection' has a wrong offset!");
static_assert(offsetof(FUNCLIB_Combat_C_GetExactWeaponSpreadDirection, CallFunc_Vector_Up_ReturnValue) == 0x000034, "Member 'FUNCLIB_Combat_C_GetExactWeaponSpreadDirection::CallFunc_Vector_Up_ReturnValue' has a wrong offset!");
static_assert(offsetof(FUNCLIB_Combat_C_GetExactWeaponSpreadDirection, CallFunc_Greater_FloatFloat_ReturnValue) == 0x000040, "Member 'FUNCLIB_Combat_C_GetExactWeaponSpreadDirection::CallFunc_Greater_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(FUNCLIB_Combat_C_GetExactWeaponSpreadDirection, CallFunc_Cross_VectorVector_ReturnValue) == 0x000044, "Member 'FUNCLIB_Combat_C_GetExactWeaponSpreadDirection::CallFunc_Cross_VectorVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(FUNCLIB_Combat_C_GetExactWeaponSpreadDirection, CallFunc_RotateAngleAxis_ReturnValue) == 0x000050, "Member 'FUNCLIB_Combat_C_GetExactWeaponSpreadDirection::CallFunc_RotateAngleAxis_ReturnValue' has a wrong offset!");
static_assert(offsetof(FUNCLIB_Combat_C_GetExactWeaponSpreadDirection, CallFunc_RotateAngleAxis_ReturnValue_1) == 0x00005C, "Member 'FUNCLIB_Combat_C_GetExactWeaponSpreadDirection::CallFunc_RotateAngleAxis_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(FUNCLIB_Combat_C_GetExactWeaponSpreadDirection, CallFunc_RandomFloatInRange_ReturnValue) == 0x000068, "Member 'FUNCLIB_Combat_C_GetExactWeaponSpreadDirection::CallFunc_RandomFloatInRange_ReturnValue' has a wrong offset!");

// Function FUNCLIB_Combat.FUNCLIB_Combat_C.GetLaunchVelocityForProjectile
// 0x0138 (0x0138 - 0x0000)
struct FUNCLIB_Combat_C_GetLaunchVelocityForProjectile final
{
public:
	float                                         Speed;                                             // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                VectorToTarget;                                    // 0x0004(0x000C)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Gravity;                                           // 0x0010(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UObject*                                __WorldContext;                                    // 0x0018(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                Veclocity;                                         // 0x0020(0x000C)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         LaunchAngleToTarget;                               // 0x002C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         R;                                                 // 0x0030(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         T;                                                 // 0x0034(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         R2;                                                // 0x0038(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         G;                                                 // 0x003C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         V2;                                                // 0x0040(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         V;                                                 // 0x0044(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Y;                                                 // 0x0048(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         X;                                                 // 0x004C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector2D                              HorizontalDirection;                               // 0x0050(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         HorizontalDistance;                                // 0x0058(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector2D                              HorizontalVector;                                  // 0x005C(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector_X;                            // 0x0064(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector_Y;                            // 0x0068(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector_Z;                            // 0x006C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector_X_1;                          // 0x0070(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector_Y_1;                          // 0x0074(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector_Z_1;                          // 0x0078(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector2D                              CallFunc_MakeVector2D_ReturnValue;                 // 0x007C(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector2D_X;                          // 0x0084(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector2D_Y;                          // 0x0088(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Multiply_FloatFloat_ReturnValue;          // 0x008C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector2D_X_1;                        // 0x0090(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector2D_Y_1;                        // 0x0094(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector2D                              CallFunc_MakeVector2D_ReturnValue_1;               // 0x0098(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector2D                              CallFunc_MakeVector2D_ReturnValue_2;               // 0x00A0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Conv_Vector2DToVector_ReturnValue;        // 0x00A8(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Conv_Vector2DToVector_ReturnValue_1;      // 0x00B4(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_RotateAngleAxis_ReturnValue;              // 0x00C0(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Normal_ReturnValue;                       // 0x00CC(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_DegAtan_ReturnValue;                      // 0x00D8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Multiply_VectorFloat_ReturnValue;         // 0x00DC(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Multiply_FloatFloat_ReturnValue_1;        // 0x00E8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Sqrt_ReturnValue;                         // 0x00EC(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Subtract_FloatFloat_ReturnValue;          // 0x00F0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Divide_FloatFloat_ReturnValue;            // 0x00F4(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Greater_FloatFloat_ReturnValue;           // 0x00F8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_F9[0x3];                                       // 0x00F9(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_Multiply_FloatFloat_ReturnValue_2;        // 0x00FC(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Square_ReturnValue;                       // 0x0100(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Multiply_FloatFloat_ReturnValue_3;        // 0x0104(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Multiply_FloatFloat_ReturnValue_4;        // 0x0108(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Square_ReturnValue_1;                     // 0x010C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Multiply_FloatFloat_ReturnValue_5;        // 0x0110(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Add_FloatFloat_ReturnValue;               // 0x0114(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Multiply_FloatFloat_ReturnValue_6;        // 0x0118(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_NotEqual_FloatFloat_ReturnValue;          // 0x011C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_11D[0x3];                                      // 0x011D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_Subtract_FloatFloat_ReturnValue_1;        // 0x0120(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Abs_ReturnValue;                          // 0x0124(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector2D                              CallFunc_ToDirectionAndLength2D_OutDir;            // 0x0128(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_ToDirectionAndLength2D_OutLength;         // 0x0130(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(FUNCLIB_Combat_C_GetLaunchVelocityForProjectile) == 0x000008, "Wrong alignment on FUNCLIB_Combat_C_GetLaunchVelocityForProjectile");
static_assert(sizeof(FUNCLIB_Combat_C_GetLaunchVelocityForProjectile) == 0x000138, "Wrong size on FUNCLIB_Combat_C_GetLaunchVelocityForProjectile");
static_assert(offsetof(FUNCLIB_Combat_C_GetLaunchVelocityForProjectile, Speed) == 0x000000, "Member 'FUNCLIB_Combat_C_GetLaunchVelocityForProjectile::Speed' has a wrong offset!");
static_assert(offsetof(FUNCLIB_Combat_C_GetLaunchVelocityForProjectile, VectorToTarget) == 0x000004, "Member 'FUNCLIB_Combat_C_GetLaunchVelocityForProjectile::VectorToTarget' has a wrong offset!");
static_assert(offsetof(FUNCLIB_Combat_C_GetLaunchVelocityForProjectile, Gravity) == 0x000010, "Member 'FUNCLIB_Combat_C_GetLaunchVelocityForProjectile::Gravity' has a wrong offset!");
static_assert(offsetof(FUNCLIB_Combat_C_GetLaunchVelocityForProjectile, __WorldContext) == 0x000018, "Member 'FUNCLIB_Combat_C_GetLaunchVelocityForProjectile::__WorldContext' has a wrong offset!");
static_assert(offsetof(FUNCLIB_Combat_C_GetLaunchVelocityForProjectile, Veclocity) == 0x000020, "Member 'FUNCLIB_Combat_C_GetLaunchVelocityForProjectile::Veclocity' has a wrong offset!");
static_assert(offsetof(FUNCLIB_Combat_C_GetLaunchVelocityForProjectile, LaunchAngleToTarget) == 0x00002C, "Member 'FUNCLIB_Combat_C_GetLaunchVelocityForProjectile::LaunchAngleToTarget' has a wrong offset!");
static_assert(offsetof(FUNCLIB_Combat_C_GetLaunchVelocityForProjectile, R) == 0x000030, "Member 'FUNCLIB_Combat_C_GetLaunchVelocityForProjectile::R' has a wrong offset!");
static_assert(offsetof(FUNCLIB_Combat_C_GetLaunchVelocityForProjectile, T) == 0x000034, "Member 'FUNCLIB_Combat_C_GetLaunchVelocityForProjectile::T' has a wrong offset!");
static_assert(offsetof(FUNCLIB_Combat_C_GetLaunchVelocityForProjectile, R2) == 0x000038, "Member 'FUNCLIB_Combat_C_GetLaunchVelocityForProjectile::R2' has a wrong offset!");
static_assert(offsetof(FUNCLIB_Combat_C_GetLaunchVelocityForProjectile, G) == 0x00003C, "Member 'FUNCLIB_Combat_C_GetLaunchVelocityForProjectile::G' has a wrong offset!");
static_assert(offsetof(FUNCLIB_Combat_C_GetLaunchVelocityForProjectile, V2) == 0x000040, "Member 'FUNCLIB_Combat_C_GetLaunchVelocityForProjectile::V2' has a wrong offset!");
static_assert(offsetof(FUNCLIB_Combat_C_GetLaunchVelocityForProjectile, V) == 0x000044, "Member 'FUNCLIB_Combat_C_GetLaunchVelocityForProjectile::V' has a wrong offset!");
static_assert(offsetof(FUNCLIB_Combat_C_GetLaunchVelocityForProjectile, Y) == 0x000048, "Member 'FUNCLIB_Combat_C_GetLaunchVelocityForProjectile::Y' has a wrong offset!");
static_assert(offsetof(FUNCLIB_Combat_C_GetLaunchVelocityForProjectile, X) == 0x00004C, "Member 'FUNCLIB_Combat_C_GetLaunchVelocityForProjectile::X' has a wrong offset!");
static_assert(offsetof(FUNCLIB_Combat_C_GetLaunchVelocityForProjectile, HorizontalDirection) == 0x000050, "Member 'FUNCLIB_Combat_C_GetLaunchVelocityForProjectile::HorizontalDirection' has a wrong offset!");
static_assert(offsetof(FUNCLIB_Combat_C_GetLaunchVelocityForProjectile, HorizontalDistance) == 0x000058, "Member 'FUNCLIB_Combat_C_GetLaunchVelocityForProjectile::HorizontalDistance' has a wrong offset!");
static_assert(offsetof(FUNCLIB_Combat_C_GetLaunchVelocityForProjectile, HorizontalVector) == 0x00005C, "Member 'FUNCLIB_Combat_C_GetLaunchVelocityForProjectile::HorizontalVector' has a wrong offset!");
static_assert(offsetof(FUNCLIB_Combat_C_GetLaunchVelocityForProjectile, CallFunc_BreakVector_X) == 0x000064, "Member 'FUNCLIB_Combat_C_GetLaunchVelocityForProjectile::CallFunc_BreakVector_X' has a wrong offset!");
static_assert(offsetof(FUNCLIB_Combat_C_GetLaunchVelocityForProjectile, CallFunc_BreakVector_Y) == 0x000068, "Member 'FUNCLIB_Combat_C_GetLaunchVelocityForProjectile::CallFunc_BreakVector_Y' has a wrong offset!");
static_assert(offsetof(FUNCLIB_Combat_C_GetLaunchVelocityForProjectile, CallFunc_BreakVector_Z) == 0x00006C, "Member 'FUNCLIB_Combat_C_GetLaunchVelocityForProjectile::CallFunc_BreakVector_Z' has a wrong offset!");
static_assert(offsetof(FUNCLIB_Combat_C_GetLaunchVelocityForProjectile, CallFunc_BreakVector_X_1) == 0x000070, "Member 'FUNCLIB_Combat_C_GetLaunchVelocityForProjectile::CallFunc_BreakVector_X_1' has a wrong offset!");
static_assert(offsetof(FUNCLIB_Combat_C_GetLaunchVelocityForProjectile, CallFunc_BreakVector_Y_1) == 0x000074, "Member 'FUNCLIB_Combat_C_GetLaunchVelocityForProjectile::CallFunc_BreakVector_Y_1' has a wrong offset!");
static_assert(offsetof(FUNCLIB_Combat_C_GetLaunchVelocityForProjectile, CallFunc_BreakVector_Z_1) == 0x000078, "Member 'FUNCLIB_Combat_C_GetLaunchVelocityForProjectile::CallFunc_BreakVector_Z_1' has a wrong offset!");
static_assert(offsetof(FUNCLIB_Combat_C_GetLaunchVelocityForProjectile, CallFunc_MakeVector2D_ReturnValue) == 0x00007C, "Member 'FUNCLIB_Combat_C_GetLaunchVelocityForProjectile::CallFunc_MakeVector2D_ReturnValue' has a wrong offset!");
static_assert(offsetof(FUNCLIB_Combat_C_GetLaunchVelocityForProjectile, CallFunc_BreakVector2D_X) == 0x000084, "Member 'FUNCLIB_Combat_C_GetLaunchVelocityForProjectile::CallFunc_BreakVector2D_X' has a wrong offset!");
static_assert(offsetof(FUNCLIB_Combat_C_GetLaunchVelocityForProjectile, CallFunc_BreakVector2D_Y) == 0x000088, "Member 'FUNCLIB_Combat_C_GetLaunchVelocityForProjectile::CallFunc_BreakVector2D_Y' has a wrong offset!");
static_assert(offsetof(FUNCLIB_Combat_C_GetLaunchVelocityForProjectile, CallFunc_Multiply_FloatFloat_ReturnValue) == 0x00008C, "Member 'FUNCLIB_Combat_C_GetLaunchVelocityForProjectile::CallFunc_Multiply_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(FUNCLIB_Combat_C_GetLaunchVelocityForProjectile, CallFunc_BreakVector2D_X_1) == 0x000090, "Member 'FUNCLIB_Combat_C_GetLaunchVelocityForProjectile::CallFunc_BreakVector2D_X_1' has a wrong offset!");
static_assert(offsetof(FUNCLIB_Combat_C_GetLaunchVelocityForProjectile, CallFunc_BreakVector2D_Y_1) == 0x000094, "Member 'FUNCLIB_Combat_C_GetLaunchVelocityForProjectile::CallFunc_BreakVector2D_Y_1' has a wrong offset!");
static_assert(offsetof(FUNCLIB_Combat_C_GetLaunchVelocityForProjectile, CallFunc_MakeVector2D_ReturnValue_1) == 0x000098, "Member 'FUNCLIB_Combat_C_GetLaunchVelocityForProjectile::CallFunc_MakeVector2D_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(FUNCLIB_Combat_C_GetLaunchVelocityForProjectile, CallFunc_MakeVector2D_ReturnValue_2) == 0x0000A0, "Member 'FUNCLIB_Combat_C_GetLaunchVelocityForProjectile::CallFunc_MakeVector2D_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(FUNCLIB_Combat_C_GetLaunchVelocityForProjectile, CallFunc_Conv_Vector2DToVector_ReturnValue) == 0x0000A8, "Member 'FUNCLIB_Combat_C_GetLaunchVelocityForProjectile::CallFunc_Conv_Vector2DToVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(FUNCLIB_Combat_C_GetLaunchVelocityForProjectile, CallFunc_Conv_Vector2DToVector_ReturnValue_1) == 0x0000B4, "Member 'FUNCLIB_Combat_C_GetLaunchVelocityForProjectile::CallFunc_Conv_Vector2DToVector_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(FUNCLIB_Combat_C_GetLaunchVelocityForProjectile, CallFunc_RotateAngleAxis_ReturnValue) == 0x0000C0, "Member 'FUNCLIB_Combat_C_GetLaunchVelocityForProjectile::CallFunc_RotateAngleAxis_ReturnValue' has a wrong offset!");
static_assert(offsetof(FUNCLIB_Combat_C_GetLaunchVelocityForProjectile, CallFunc_Normal_ReturnValue) == 0x0000CC, "Member 'FUNCLIB_Combat_C_GetLaunchVelocityForProjectile::CallFunc_Normal_ReturnValue' has a wrong offset!");
static_assert(offsetof(FUNCLIB_Combat_C_GetLaunchVelocityForProjectile, CallFunc_DegAtan_ReturnValue) == 0x0000D8, "Member 'FUNCLIB_Combat_C_GetLaunchVelocityForProjectile::CallFunc_DegAtan_ReturnValue' has a wrong offset!");
static_assert(offsetof(FUNCLIB_Combat_C_GetLaunchVelocityForProjectile, CallFunc_Multiply_VectorFloat_ReturnValue) == 0x0000DC, "Member 'FUNCLIB_Combat_C_GetLaunchVelocityForProjectile::CallFunc_Multiply_VectorFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(FUNCLIB_Combat_C_GetLaunchVelocityForProjectile, CallFunc_Multiply_FloatFloat_ReturnValue_1) == 0x0000E8, "Member 'FUNCLIB_Combat_C_GetLaunchVelocityForProjectile::CallFunc_Multiply_FloatFloat_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(FUNCLIB_Combat_C_GetLaunchVelocityForProjectile, CallFunc_Sqrt_ReturnValue) == 0x0000EC, "Member 'FUNCLIB_Combat_C_GetLaunchVelocityForProjectile::CallFunc_Sqrt_ReturnValue' has a wrong offset!");
static_assert(offsetof(FUNCLIB_Combat_C_GetLaunchVelocityForProjectile, CallFunc_Subtract_FloatFloat_ReturnValue) == 0x0000F0, "Member 'FUNCLIB_Combat_C_GetLaunchVelocityForProjectile::CallFunc_Subtract_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(FUNCLIB_Combat_C_GetLaunchVelocityForProjectile, CallFunc_Divide_FloatFloat_ReturnValue) == 0x0000F4, "Member 'FUNCLIB_Combat_C_GetLaunchVelocityForProjectile::CallFunc_Divide_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(FUNCLIB_Combat_C_GetLaunchVelocityForProjectile, CallFunc_Greater_FloatFloat_ReturnValue) == 0x0000F8, "Member 'FUNCLIB_Combat_C_GetLaunchVelocityForProjectile::CallFunc_Greater_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(FUNCLIB_Combat_C_GetLaunchVelocityForProjectile, CallFunc_Multiply_FloatFloat_ReturnValue_2) == 0x0000FC, "Member 'FUNCLIB_Combat_C_GetLaunchVelocityForProjectile::CallFunc_Multiply_FloatFloat_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(FUNCLIB_Combat_C_GetLaunchVelocityForProjectile, CallFunc_Square_ReturnValue) == 0x000100, "Member 'FUNCLIB_Combat_C_GetLaunchVelocityForProjectile::CallFunc_Square_ReturnValue' has a wrong offset!");
static_assert(offsetof(FUNCLIB_Combat_C_GetLaunchVelocityForProjectile, CallFunc_Multiply_FloatFloat_ReturnValue_3) == 0x000104, "Member 'FUNCLIB_Combat_C_GetLaunchVelocityForProjectile::CallFunc_Multiply_FloatFloat_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(FUNCLIB_Combat_C_GetLaunchVelocityForProjectile, CallFunc_Multiply_FloatFloat_ReturnValue_4) == 0x000108, "Member 'FUNCLIB_Combat_C_GetLaunchVelocityForProjectile::CallFunc_Multiply_FloatFloat_ReturnValue_4' has a wrong offset!");
static_assert(offsetof(FUNCLIB_Combat_C_GetLaunchVelocityForProjectile, CallFunc_Square_ReturnValue_1) == 0x00010C, "Member 'FUNCLIB_Combat_C_GetLaunchVelocityForProjectile::CallFunc_Square_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(FUNCLIB_Combat_C_GetLaunchVelocityForProjectile, CallFunc_Multiply_FloatFloat_ReturnValue_5) == 0x000110, "Member 'FUNCLIB_Combat_C_GetLaunchVelocityForProjectile::CallFunc_Multiply_FloatFloat_ReturnValue_5' has a wrong offset!");
static_assert(offsetof(FUNCLIB_Combat_C_GetLaunchVelocityForProjectile, CallFunc_Add_FloatFloat_ReturnValue) == 0x000114, "Member 'FUNCLIB_Combat_C_GetLaunchVelocityForProjectile::CallFunc_Add_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(FUNCLIB_Combat_C_GetLaunchVelocityForProjectile, CallFunc_Multiply_FloatFloat_ReturnValue_6) == 0x000118, "Member 'FUNCLIB_Combat_C_GetLaunchVelocityForProjectile::CallFunc_Multiply_FloatFloat_ReturnValue_6' has a wrong offset!");
static_assert(offsetof(FUNCLIB_Combat_C_GetLaunchVelocityForProjectile, CallFunc_NotEqual_FloatFloat_ReturnValue) == 0x00011C, "Member 'FUNCLIB_Combat_C_GetLaunchVelocityForProjectile::CallFunc_NotEqual_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(FUNCLIB_Combat_C_GetLaunchVelocityForProjectile, CallFunc_Subtract_FloatFloat_ReturnValue_1) == 0x000120, "Member 'FUNCLIB_Combat_C_GetLaunchVelocityForProjectile::CallFunc_Subtract_FloatFloat_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(FUNCLIB_Combat_C_GetLaunchVelocityForProjectile, CallFunc_Abs_ReturnValue) == 0x000124, "Member 'FUNCLIB_Combat_C_GetLaunchVelocityForProjectile::CallFunc_Abs_ReturnValue' has a wrong offset!");
static_assert(offsetof(FUNCLIB_Combat_C_GetLaunchVelocityForProjectile, CallFunc_ToDirectionAndLength2D_OutDir) == 0x000128, "Member 'FUNCLIB_Combat_C_GetLaunchVelocityForProjectile::CallFunc_ToDirectionAndLength2D_OutDir' has a wrong offset!");
static_assert(offsetof(FUNCLIB_Combat_C_GetLaunchVelocityForProjectile, CallFunc_ToDirectionAndLength2D_OutLength) == 0x000130, "Member 'FUNCLIB_Combat_C_GetLaunchVelocityForProjectile::CallFunc_ToDirectionAndLength2D_OutLength' has a wrong offset!");

// Function FUNCLIB_Combat.FUNCLIB_Combat_C.ApplyExplosiveDamageAndImpulse
// 0x00D8 (0x00D8 - 0x0000)
struct FUNCLIB_Combat_C_ApplyExplosiveDamageAndImpulse final
{
public:
	struct FVector                                BlastLocation;                                     // 0x0000(0x000C)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         BlastRadius;                                       // 0x000C(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         BlastImpulse;                                      // 0x0010(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         MinimumDamage;                                     // 0x0014(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         MaximumDamage;                                     // 0x0018(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         ArmorPenetration;                                  // 0x001C(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 IgnoreActor;                                       // 0x0020(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          IgnoreSameInstigator;                              // 0x0028(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_29[0x7];                                       // 0x0029(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UObject*                                __WorldContext;                                    // 0x0030(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TMap<class UAttribMod*, struct FAttribDamageInstance> DamageInstances;                                   // 0x0038(0x0050)(Parm, OutParm)
	TMap<class UAttribMod*, struct FAttribDamageInstance> CallFunc_ApplyRadialDamageAndImpulse_DamageInstances; // 0x0088(0x0050)()
};
static_assert(alignof(FUNCLIB_Combat_C_ApplyExplosiveDamageAndImpulse) == 0x000008, "Wrong alignment on FUNCLIB_Combat_C_ApplyExplosiveDamageAndImpulse");
static_assert(sizeof(FUNCLIB_Combat_C_ApplyExplosiveDamageAndImpulse) == 0x0000D8, "Wrong size on FUNCLIB_Combat_C_ApplyExplosiveDamageAndImpulse");
static_assert(offsetof(FUNCLIB_Combat_C_ApplyExplosiveDamageAndImpulse, BlastLocation) == 0x000000, "Member 'FUNCLIB_Combat_C_ApplyExplosiveDamageAndImpulse::BlastLocation' has a wrong offset!");
static_assert(offsetof(FUNCLIB_Combat_C_ApplyExplosiveDamageAndImpulse, BlastRadius) == 0x00000C, "Member 'FUNCLIB_Combat_C_ApplyExplosiveDamageAndImpulse::BlastRadius' has a wrong offset!");
static_assert(offsetof(FUNCLIB_Combat_C_ApplyExplosiveDamageAndImpulse, BlastImpulse) == 0x000010, "Member 'FUNCLIB_Combat_C_ApplyExplosiveDamageAndImpulse::BlastImpulse' has a wrong offset!");
static_assert(offsetof(FUNCLIB_Combat_C_ApplyExplosiveDamageAndImpulse, MinimumDamage) == 0x000014, "Member 'FUNCLIB_Combat_C_ApplyExplosiveDamageAndImpulse::MinimumDamage' has a wrong offset!");
static_assert(offsetof(FUNCLIB_Combat_C_ApplyExplosiveDamageAndImpulse, MaximumDamage) == 0x000018, "Member 'FUNCLIB_Combat_C_ApplyExplosiveDamageAndImpulse::MaximumDamage' has a wrong offset!");
static_assert(offsetof(FUNCLIB_Combat_C_ApplyExplosiveDamageAndImpulse, ArmorPenetration) == 0x00001C, "Member 'FUNCLIB_Combat_C_ApplyExplosiveDamageAndImpulse::ArmorPenetration' has a wrong offset!");
static_assert(offsetof(FUNCLIB_Combat_C_ApplyExplosiveDamageAndImpulse, IgnoreActor) == 0x000020, "Member 'FUNCLIB_Combat_C_ApplyExplosiveDamageAndImpulse::IgnoreActor' has a wrong offset!");
static_assert(offsetof(FUNCLIB_Combat_C_ApplyExplosiveDamageAndImpulse, IgnoreSameInstigator) == 0x000028, "Member 'FUNCLIB_Combat_C_ApplyExplosiveDamageAndImpulse::IgnoreSameInstigator' has a wrong offset!");
static_assert(offsetof(FUNCLIB_Combat_C_ApplyExplosiveDamageAndImpulse, __WorldContext) == 0x000030, "Member 'FUNCLIB_Combat_C_ApplyExplosiveDamageAndImpulse::__WorldContext' has a wrong offset!");
static_assert(offsetof(FUNCLIB_Combat_C_ApplyExplosiveDamageAndImpulse, DamageInstances) == 0x000038, "Member 'FUNCLIB_Combat_C_ApplyExplosiveDamageAndImpulse::DamageInstances' has a wrong offset!");
static_assert(offsetof(FUNCLIB_Combat_C_ApplyExplosiveDamageAndImpulse, CallFunc_ApplyRadialDamageAndImpulse_DamageInstances) == 0x000088, "Member 'FUNCLIB_Combat_C_ApplyExplosiveDamageAndImpulse::CallFunc_ApplyRadialDamageAndImpulse_DamageInstances' has a wrong offset!");

// Function FUNCLIB_Combat.FUNCLIB_Combat_C.ApplyRadialDamageAndImpulse
// 0x0590 (0x0590 - 0x0000)
struct FUNCLIB_Combat_C_ApplyRadialDamageAndImpulse final
{
public:
	struct FVector                                BlastLocation;                                     // 0x0000(0x000C)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         BlastRadius;                                       // 0x000C(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         BlastImpulse;                                      // 0x0010(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UAttribDamageType*                      DamageType;                                        // 0x0018(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         MinimumDamage;                                     // 0x0020(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         MaximumDamage;                                     // 0x0024(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         ArmorPenetration;                                  // 0x0028(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_2C[0x4];                                       // 0x002C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class AActor*                                 IgnoreActor;                                       // 0x0030(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          IgnoreSameInstigator;                              // 0x0038(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_39[0x7];                                       // 0x0039(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UObject*                                __WorldContext;                                    // 0x0040(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TMap<class UAttribMod*, struct FAttribDamageInstance> DamageInstances;                                   // 0x0048(0x0050)(Parm, OutParm)
	TArray<class UStaticMeshComponent*>           TileComponentsToDisable;                           // 0x0098(0x0010)(Edit, BlueprintVisible, ContainsInstancedReference)
	class UAttribManagerComponent*                AttribManager;                                     // 0x00A8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         ImpactDistance;                                    // 0x00B0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                ImpactDirection;                                   // 0x00B4(0x000C)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                ImpactPoint;                                       // 0x00C0(0x000C)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                PreviousImpactPoint;                               // 0x00CC(0x000C)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class APAWN_SystemShockCharacter_C*           HitCharacter;                                      // 0x00D8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 HitActor;                                          // 0x00E0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UPrimitiveComponent*                    HitComponent;                                      // 0x00E8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 Instigator;                                        // 0x00F0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TMap<class AActor*, struct FVector>           HitActorLocationMap;                               // 0x00F8(0x0050)(Edit, BlueprintVisible, DisableEditOnTemplate)
	TSet<class APAWN_SystemShockCharacter_C*>     HitCharacters;                                     // 0x0148(0x0050)(Edit, BlueprintVisible, DisableEditOnTemplate)
	TMap<class UAttribMod*, struct FAttribDamageInstance> DamageInstancesApplied;                            // 0x0198(0x0050)(Edit, BlueprintVisible)
	struct FAttribModApplyData                    DamageModToApply;                                  // 0x01E8(0x00A0)(Edit, BlueprintVisible)
	class UGI_SinglePlayer_C*                     GameInstance;                                      // 0x0288(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UForceFeedbackEffect*                   Temp_object_Variable;                              // 0x0290(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Loop_Counter_Variable;                    // 0x0298(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue;                   // 0x029C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Variable;                                // 0x02A0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_2A1[0x3];                                      // 0x02A1(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Temp_int_Array_Index_Variable;                     // 0x02A4(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Loop_Counter_Variable_1;                  // 0x02A8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue_1;                 // 0x02AC(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Array_Index_Variable_1;                   // 0x02B0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_GreaterEqual_FloatFloat_ReturnValue;      // 0x02B4(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_HasAnyPropagationPathToPrimitiveInSphere_ReturnValue; // 0x02B5(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_2B6[0x2];                                      // 0x02B6(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_Divide_FloatFloat_ReturnValue;            // 0x02B8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Subtract_FloatFloat_ReturnValue;          // 0x02BC(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_FMax_ReturnValue;                         // 0x02C0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_2C4[0x4];                                      // 0x02C4(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class UStaticMeshComponent*>           CallFunc_GetUnobstructedCullableStaticMeshComponentsInSphere_ReturnValue; // 0x02C8(0x0010)(ReferenceParm, ContainsInstancedReference)
	bool                                          CallFunc_EqualEqual_ObjectObject_ReturnValue;      // 0x02D8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_2D9[0x3];                                      // 0x02D9(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                CallFunc_Map_Find_Value;                           // 0x02DC(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Map_Find_ReturnValue;                     // 0x02E8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x02E9(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsValid_ReturnValue_1;                    // 0x02EA(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsValid_ReturnValue_2;                    // 0x02EB(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_2EC[0x4];                                      // 0x02EC(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UAttribManagerComponent*                CallFunc_GetComponentByClass_ReturnValue;          // 0x02F0(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TArray<class AActor*>                         CallFunc_Map_Keys_Keys;                            // 0x02F8(0x0010)(ReferenceParm)
	class AActor*                                 CallFunc_Array_Get_Item;                           // 0x0308(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Length_ReturnValue;                 // 0x0310(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue;                  // 0x0314(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_315[0x3];                                      // 0x0315(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_Vector_DistanceSquared_ReturnValue;       // 0x0318(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Vector_DistanceSquared_ReturnValue_1;     // 0x031C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_FloatFloat_ReturnValue;              // 0x0320(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_321[0x3];                                      // 0x0321(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                CallFunc_Map_Find_Value_1;                         // 0x0324(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Map_Find_ReturnValue_1;                   // 0x0330(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_331[0x3];                                      // 0x0331(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                CallFunc_GetComponentOriginForExplosiveDamage_Origin; // 0x0334(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Set_Contains_ReturnValue;                 // 0x0340(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_341[0x7];                                      // 0x0341(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class APlayerController*                      CallFunc_GetPlayerController_ReturnValue;          // 0x0348(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Not_PreBool_ReturnValue;                  // 0x0350(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_351[0x7];                                      // 0x0351(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UForceFeedbackAttenuation*              CallFunc_GetForceFeedbackExplosionAttenuation_Attenuation; // 0x0358(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_ObjectObject_ReturnValue_1;    // 0x0360(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_NotEqual_ObjectObject_ReturnValue;        // 0x0361(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Not_PreBool_ReturnValue_1;                // 0x0362(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BooleanOR_ReturnValue;                    // 0x0363(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsSimulatingPhysics_ReturnValue;          // 0x0364(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_365[0x3];                                      // 0x0365(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                CallFunc_K2_GetComponentLocation_ReturnValue;      // 0x0368(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue_3;                    // 0x0374(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_375[0x3];                                      // 0x0375(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class UAttributeDef*                          Temp_object_Variable_1;                            // 0x0378(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class APAWN_SystemShockCharacter_C*           K2Node_DynamicCast_AsPAWN_System_Shock_Character;  // 0x0380(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0388(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsValid_ReturnValue_4;                    // 0x0389(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_38A[0x2];                                      // 0x038A(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_Conv_IntToFloat_ReturnValue;              // 0x038C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_GetClosestPointOnCollision_OutPointOnBody; // 0x0390(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_GetClosestPointOnCollision_ReturnValue;   // 0x039C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Conv_IntToFloat_ReturnValue_1;            // 0x03A0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_3A4[0x4];                                      // 0x03A4(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class AActor*>                         K2Node_MakeArray_Array;                            // 0x03A8(0x0010)(ConstParm, ReferenceParm)
	bool                                          CallFunc_EqualEqual_ObjectObject_ReturnValue_2;    // 0x03B8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_3B9[0x7];                                      // 0x03B9(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UGameInstance*                          CallFunc_GetGameInstance_ReturnValue;              // 0x03C0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UGI_SinglePlayer_C*                     K2Node_DynamicCast_AsGI_Single_Player;             // 0x03C8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess_1;                     // 0x03D0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_3D1[0x3];                                      // 0x03D1(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                CallFunc_Subtract_VectorVector_ReturnValue;        // 0x03D4(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_GetVectorNormalAndLength_OutLength;       // 0x03E0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_GetVectorNormalAndLength_ReturnValue;     // 0x03E4(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Subtract_VectorVector_ReturnValue_1;      // 0x03F0(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_GetVectorNormalAndLength_OutLength_1;     // 0x03FC(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_GetVectorNormalAndLength_ReturnValue_1;   // 0x0400(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Subtract_VectorVector_ReturnValue_2;      // 0x040C(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_GetVectorNormalAndLength_OutLength_2;     // 0x0418(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_GetVectorNormalAndLength_ReturnValue_2;   // 0x041C(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_ComputeExplosiveImpulseAtDistance_Impulse; // 0x0428(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Multiply_VectorFloat_ReturnValue;         // 0x042C(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UAttributeDef*                          Temp_object_Variable_2;                            // 0x0438(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_ComputeExplosiveDamageAtDistance_Damage;  // 0x0440(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_ComputeExplosiveImpulseAtDistance_Impulse_1; // 0x0444(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_ComputeExplosiveDamageAtDistance_Damage_1; // 0x0448(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Variable_1;                              // 0x044C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_44D[0x3];                                      // 0x044D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_ComputeExplosiveImpulseAtDistance_Impulse_2; // 0x0450(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_454[0x4];                                      // 0x0454(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UAttributeDef*                          K2Node_Select_Default;                             // 0x0458(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UOBJ_ImpactData_C*                      CallFunc_SpawnObject_ReturnValue;                  // 0x0460(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Multiply_VectorFloat_ReturnValue_1;       // 0x0468(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Length_ReturnValue_1;               // 0x0474(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Greater_IntInt_ReturnValue;               // 0x0478(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_479[0x3];                                      // 0x0479(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                CallFunc_GetClosestPointOnCollision_OutPointOnBody_1; // 0x047C(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_GetClosestPointOnCollision_ReturnValue_1; // 0x0488(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_48C[0x4];                                      // 0x048C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class APAWN_SystemShockCharacter_C*           K2Node_DynamicCast_AsPAWN_System_Shock_Character_1; // 0x0490(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess_2;                     // 0x0498(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_HasUnobstructedPropagationPathBetweenPoints_ReturnValue; // 0x0499(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_49A[0x2];                                      // 0x049A(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                CallFunc_Multiply_VectorFloat_ReturnValue_2;       // 0x049C(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FAttribDamageInstance                  CallFunc_ApplyDamageMod_OutDamageInstance;         // 0x04A8(0x0028)()
	class UAttribMod*                             CallFunc_ApplyDamageMod_ReturnValue;               // 0x04D0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UAttribManagerComponent*                CallFunc_GetComponentByClass_ReturnValue_1;        // 0x04D8(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 CallFunc_GetOwner_ReturnValue;                     // 0x04E0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue_5;                    // 0x04E8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_4E9[0x7];                                      // 0x04E9(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UForceFeedbackEffect*                   Temp_object_Variable_3;                            // 0x04F0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UForceFeedbackEffect*                   K2Node_Select_Default_1;                           // 0x04F8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UForceFeedbackComponent*                CallFunc_SpawnForceFeedbackAtLocation_ReturnValue; // 0x0500(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Multiply_VectorFloat_ReturnValue_3;       // 0x0508(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Multiply_VectorFloat_ReturnValue_4;       // 0x0514(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UOBJ_ImpactData_C*                      CallFunc_SpawnObject_ReturnValue_1;                // 0x0520(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FAttribDamageInstance                  CallFunc_ApplyDamageMod_OutDamageInstance_1;       // 0x0528(0x0028)()
	class UAttribMod*                             CallFunc_ApplyDamageMod_ReturnValue_1;             // 0x0550(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TArray<EObjectTypeQuery>                      K2Node_MakeArray_Array_1;                          // 0x0558(0x0010)(ConstParm, ReferenceParm)
	TArray<class UPrimitiveComponent*>            CallFunc_SphereOverlapComponents_OutComponents;    // 0x0568(0x0010)(ReferenceParm, ContainsInstancedReference)
	bool                                          CallFunc_SphereOverlapComponents_ReturnValue;      // 0x0578(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_579[0x3];                                      // 0x0579(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Array_Length_ReturnValue_2;               // 0x057C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UPrimitiveComponent*                    CallFunc_Array_Get_Item_1;                         // 0x0580(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue_1;                // 0x0588(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(FUNCLIB_Combat_C_ApplyRadialDamageAndImpulse) == 0x000008, "Wrong alignment on FUNCLIB_Combat_C_ApplyRadialDamageAndImpulse");
static_assert(sizeof(FUNCLIB_Combat_C_ApplyRadialDamageAndImpulse) == 0x000590, "Wrong size on FUNCLIB_Combat_C_ApplyRadialDamageAndImpulse");
static_assert(offsetof(FUNCLIB_Combat_C_ApplyRadialDamageAndImpulse, BlastLocation) == 0x000000, "Member 'FUNCLIB_Combat_C_ApplyRadialDamageAndImpulse::BlastLocation' has a wrong offset!");
static_assert(offsetof(FUNCLIB_Combat_C_ApplyRadialDamageAndImpulse, BlastRadius) == 0x00000C, "Member 'FUNCLIB_Combat_C_ApplyRadialDamageAndImpulse::BlastRadius' has a wrong offset!");
static_assert(offsetof(FUNCLIB_Combat_C_ApplyRadialDamageAndImpulse, BlastImpulse) == 0x000010, "Member 'FUNCLIB_Combat_C_ApplyRadialDamageAndImpulse::BlastImpulse' has a wrong offset!");
static_assert(offsetof(FUNCLIB_Combat_C_ApplyRadialDamageAndImpulse, DamageType) == 0x000018, "Member 'FUNCLIB_Combat_C_ApplyRadialDamageAndImpulse::DamageType' has a wrong offset!");
static_assert(offsetof(FUNCLIB_Combat_C_ApplyRadialDamageAndImpulse, MinimumDamage) == 0x000020, "Member 'FUNCLIB_Combat_C_ApplyRadialDamageAndImpulse::MinimumDamage' has a wrong offset!");
static_assert(offsetof(FUNCLIB_Combat_C_ApplyRadialDamageAndImpulse, MaximumDamage) == 0x000024, "Member 'FUNCLIB_Combat_C_ApplyRadialDamageAndImpulse::MaximumDamage' has a wrong offset!");
static_assert(offsetof(FUNCLIB_Combat_C_ApplyRadialDamageAndImpulse, ArmorPenetration) == 0x000028, "Member 'FUNCLIB_Combat_C_ApplyRadialDamageAndImpulse::ArmorPenetration' has a wrong offset!");
static_assert(offsetof(FUNCLIB_Combat_C_ApplyRadialDamageAndImpulse, IgnoreActor) == 0x000030, "Member 'FUNCLIB_Combat_C_ApplyRadialDamageAndImpulse::IgnoreActor' has a wrong offset!");
static_assert(offsetof(FUNCLIB_Combat_C_ApplyRadialDamageAndImpulse, IgnoreSameInstigator) == 0x000038, "Member 'FUNCLIB_Combat_C_ApplyRadialDamageAndImpulse::IgnoreSameInstigator' has a wrong offset!");
static_assert(offsetof(FUNCLIB_Combat_C_ApplyRadialDamageAndImpulse, __WorldContext) == 0x000040, "Member 'FUNCLIB_Combat_C_ApplyRadialDamageAndImpulse::__WorldContext' has a wrong offset!");
static_assert(offsetof(FUNCLIB_Combat_C_ApplyRadialDamageAndImpulse, DamageInstances) == 0x000048, "Member 'FUNCLIB_Combat_C_ApplyRadialDamageAndImpulse::DamageInstances' has a wrong offset!");
static_assert(offsetof(FUNCLIB_Combat_C_ApplyRadialDamageAndImpulse, TileComponentsToDisable) == 0x000098, "Member 'FUNCLIB_Combat_C_ApplyRadialDamageAndImpulse::TileComponentsToDisable' has a wrong offset!");
static_assert(offsetof(FUNCLIB_Combat_C_ApplyRadialDamageAndImpulse, AttribManager) == 0x0000A8, "Member 'FUNCLIB_Combat_C_ApplyRadialDamageAndImpulse::AttribManager' has a wrong offset!");
static_assert(offsetof(FUNCLIB_Combat_C_ApplyRadialDamageAndImpulse, ImpactDistance) == 0x0000B0, "Member 'FUNCLIB_Combat_C_ApplyRadialDamageAndImpulse::ImpactDistance' has a wrong offset!");
static_assert(offsetof(FUNCLIB_Combat_C_ApplyRadialDamageAndImpulse, ImpactDirection) == 0x0000B4, "Member 'FUNCLIB_Combat_C_ApplyRadialDamageAndImpulse::ImpactDirection' has a wrong offset!");
static_assert(offsetof(FUNCLIB_Combat_C_ApplyRadialDamageAndImpulse, ImpactPoint) == 0x0000C0, "Member 'FUNCLIB_Combat_C_ApplyRadialDamageAndImpulse::ImpactPoint' has a wrong offset!");
static_assert(offsetof(FUNCLIB_Combat_C_ApplyRadialDamageAndImpulse, PreviousImpactPoint) == 0x0000CC, "Member 'FUNCLIB_Combat_C_ApplyRadialDamageAndImpulse::PreviousImpactPoint' has a wrong offset!");
static_assert(offsetof(FUNCLIB_Combat_C_ApplyRadialDamageAndImpulse, HitCharacter) == 0x0000D8, "Member 'FUNCLIB_Combat_C_ApplyRadialDamageAndImpulse::HitCharacter' has a wrong offset!");
static_assert(offsetof(FUNCLIB_Combat_C_ApplyRadialDamageAndImpulse, HitActor) == 0x0000E0, "Member 'FUNCLIB_Combat_C_ApplyRadialDamageAndImpulse::HitActor' has a wrong offset!");
static_assert(offsetof(FUNCLIB_Combat_C_ApplyRadialDamageAndImpulse, HitComponent) == 0x0000E8, "Member 'FUNCLIB_Combat_C_ApplyRadialDamageAndImpulse::HitComponent' has a wrong offset!");
static_assert(offsetof(FUNCLIB_Combat_C_ApplyRadialDamageAndImpulse, Instigator) == 0x0000F0, "Member 'FUNCLIB_Combat_C_ApplyRadialDamageAndImpulse::Instigator' has a wrong offset!");
static_assert(offsetof(FUNCLIB_Combat_C_ApplyRadialDamageAndImpulse, HitActorLocationMap) == 0x0000F8, "Member 'FUNCLIB_Combat_C_ApplyRadialDamageAndImpulse::HitActorLocationMap' has a wrong offset!");
static_assert(offsetof(FUNCLIB_Combat_C_ApplyRadialDamageAndImpulse, HitCharacters) == 0x000148, "Member 'FUNCLIB_Combat_C_ApplyRadialDamageAndImpulse::HitCharacters' has a wrong offset!");
static_assert(offsetof(FUNCLIB_Combat_C_ApplyRadialDamageAndImpulse, DamageInstancesApplied) == 0x000198, "Member 'FUNCLIB_Combat_C_ApplyRadialDamageAndImpulse::DamageInstancesApplied' has a wrong offset!");
static_assert(offsetof(FUNCLIB_Combat_C_ApplyRadialDamageAndImpulse, DamageModToApply) == 0x0001E8, "Member 'FUNCLIB_Combat_C_ApplyRadialDamageAndImpulse::DamageModToApply' has a wrong offset!");
static_assert(offsetof(FUNCLIB_Combat_C_ApplyRadialDamageAndImpulse, GameInstance) == 0x000288, "Member 'FUNCLIB_Combat_C_ApplyRadialDamageAndImpulse::GameInstance' has a wrong offset!");
static_assert(offsetof(FUNCLIB_Combat_C_ApplyRadialDamageAndImpulse, Temp_object_Variable) == 0x000290, "Member 'FUNCLIB_Combat_C_ApplyRadialDamageAndImpulse::Temp_object_Variable' has a wrong offset!");
static_assert(offsetof(FUNCLIB_Combat_C_ApplyRadialDamageAndImpulse, Temp_int_Loop_Counter_Variable) == 0x000298, "Member 'FUNCLIB_Combat_C_ApplyRadialDamageAndImpulse::Temp_int_Loop_Counter_Variable' has a wrong offset!");
static_assert(offsetof(FUNCLIB_Combat_C_ApplyRadialDamageAndImpulse, CallFunc_Add_IntInt_ReturnValue) == 0x00029C, "Member 'FUNCLIB_Combat_C_ApplyRadialDamageAndImpulse::CallFunc_Add_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(FUNCLIB_Combat_C_ApplyRadialDamageAndImpulse, Temp_bool_Variable) == 0x0002A0, "Member 'FUNCLIB_Combat_C_ApplyRadialDamageAndImpulse::Temp_bool_Variable' has a wrong offset!");
static_assert(offsetof(FUNCLIB_Combat_C_ApplyRadialDamageAndImpulse, Temp_int_Array_Index_Variable) == 0x0002A4, "Member 'FUNCLIB_Combat_C_ApplyRadialDamageAndImpulse::Temp_int_Array_Index_Variable' has a wrong offset!");
static_assert(offsetof(FUNCLIB_Combat_C_ApplyRadialDamageAndImpulse, Temp_int_Loop_Counter_Variable_1) == 0x0002A8, "Member 'FUNCLIB_Combat_C_ApplyRadialDamageAndImpulse::Temp_int_Loop_Counter_Variable_1' has a wrong offset!");
static_assert(offsetof(FUNCLIB_Combat_C_ApplyRadialDamageAndImpulse, CallFunc_Add_IntInt_ReturnValue_1) == 0x0002AC, "Member 'FUNCLIB_Combat_C_ApplyRadialDamageAndImpulse::CallFunc_Add_IntInt_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(FUNCLIB_Combat_C_ApplyRadialDamageAndImpulse, Temp_int_Array_Index_Variable_1) == 0x0002B0, "Member 'FUNCLIB_Combat_C_ApplyRadialDamageAndImpulse::Temp_int_Array_Index_Variable_1' has a wrong offset!");
static_assert(offsetof(FUNCLIB_Combat_C_ApplyRadialDamageAndImpulse, CallFunc_GreaterEqual_FloatFloat_ReturnValue) == 0x0002B4, "Member 'FUNCLIB_Combat_C_ApplyRadialDamageAndImpulse::CallFunc_GreaterEqual_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(FUNCLIB_Combat_C_ApplyRadialDamageAndImpulse, CallFunc_HasAnyPropagationPathToPrimitiveInSphere_ReturnValue) == 0x0002B5, "Member 'FUNCLIB_Combat_C_ApplyRadialDamageAndImpulse::CallFunc_HasAnyPropagationPathToPrimitiveInSphere_ReturnValue' has a wrong offset!");
static_assert(offsetof(FUNCLIB_Combat_C_ApplyRadialDamageAndImpulse, CallFunc_Divide_FloatFloat_ReturnValue) == 0x0002B8, "Member 'FUNCLIB_Combat_C_ApplyRadialDamageAndImpulse::CallFunc_Divide_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(FUNCLIB_Combat_C_ApplyRadialDamageAndImpulse, CallFunc_Subtract_FloatFloat_ReturnValue) == 0x0002BC, "Member 'FUNCLIB_Combat_C_ApplyRadialDamageAndImpulse::CallFunc_Subtract_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(FUNCLIB_Combat_C_ApplyRadialDamageAndImpulse, CallFunc_FMax_ReturnValue) == 0x0002C0, "Member 'FUNCLIB_Combat_C_ApplyRadialDamageAndImpulse::CallFunc_FMax_ReturnValue' has a wrong offset!");
static_assert(offsetof(FUNCLIB_Combat_C_ApplyRadialDamageAndImpulse, CallFunc_GetUnobstructedCullableStaticMeshComponentsInSphere_ReturnValue) == 0x0002C8, "Member 'FUNCLIB_Combat_C_ApplyRadialDamageAndImpulse::CallFunc_GetUnobstructedCullableStaticMeshComponentsInSphere_ReturnValue' has a wrong offset!");
static_assert(offsetof(FUNCLIB_Combat_C_ApplyRadialDamageAndImpulse, CallFunc_EqualEqual_ObjectObject_ReturnValue) == 0x0002D8, "Member 'FUNCLIB_Combat_C_ApplyRadialDamageAndImpulse::CallFunc_EqualEqual_ObjectObject_ReturnValue' has a wrong offset!");
static_assert(offsetof(FUNCLIB_Combat_C_ApplyRadialDamageAndImpulse, CallFunc_Map_Find_Value) == 0x0002DC, "Member 'FUNCLIB_Combat_C_ApplyRadialDamageAndImpulse::CallFunc_Map_Find_Value' has a wrong offset!");
static_assert(offsetof(FUNCLIB_Combat_C_ApplyRadialDamageAndImpulse, CallFunc_Map_Find_ReturnValue) == 0x0002E8, "Member 'FUNCLIB_Combat_C_ApplyRadialDamageAndImpulse::CallFunc_Map_Find_ReturnValue' has a wrong offset!");
static_assert(offsetof(FUNCLIB_Combat_C_ApplyRadialDamageAndImpulse, CallFunc_IsValid_ReturnValue) == 0x0002E9, "Member 'FUNCLIB_Combat_C_ApplyRadialDamageAndImpulse::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(FUNCLIB_Combat_C_ApplyRadialDamageAndImpulse, CallFunc_IsValid_ReturnValue_1) == 0x0002EA, "Member 'FUNCLIB_Combat_C_ApplyRadialDamageAndImpulse::CallFunc_IsValid_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(FUNCLIB_Combat_C_ApplyRadialDamageAndImpulse, CallFunc_IsValid_ReturnValue_2) == 0x0002EB, "Member 'FUNCLIB_Combat_C_ApplyRadialDamageAndImpulse::CallFunc_IsValid_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(FUNCLIB_Combat_C_ApplyRadialDamageAndImpulse, CallFunc_GetComponentByClass_ReturnValue) == 0x0002F0, "Member 'FUNCLIB_Combat_C_ApplyRadialDamageAndImpulse::CallFunc_GetComponentByClass_ReturnValue' has a wrong offset!");
static_assert(offsetof(FUNCLIB_Combat_C_ApplyRadialDamageAndImpulse, CallFunc_Map_Keys_Keys) == 0x0002F8, "Member 'FUNCLIB_Combat_C_ApplyRadialDamageAndImpulse::CallFunc_Map_Keys_Keys' has a wrong offset!");
static_assert(offsetof(FUNCLIB_Combat_C_ApplyRadialDamageAndImpulse, CallFunc_Array_Get_Item) == 0x000308, "Member 'FUNCLIB_Combat_C_ApplyRadialDamageAndImpulse::CallFunc_Array_Get_Item' has a wrong offset!");
static_assert(offsetof(FUNCLIB_Combat_C_ApplyRadialDamageAndImpulse, CallFunc_Array_Length_ReturnValue) == 0x000310, "Member 'FUNCLIB_Combat_C_ApplyRadialDamageAndImpulse::CallFunc_Array_Length_ReturnValue' has a wrong offset!");
static_assert(offsetof(FUNCLIB_Combat_C_ApplyRadialDamageAndImpulse, CallFunc_Less_IntInt_ReturnValue) == 0x000314, "Member 'FUNCLIB_Combat_C_ApplyRadialDamageAndImpulse::CallFunc_Less_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(FUNCLIB_Combat_C_ApplyRadialDamageAndImpulse, CallFunc_Vector_DistanceSquared_ReturnValue) == 0x000318, "Member 'FUNCLIB_Combat_C_ApplyRadialDamageAndImpulse::CallFunc_Vector_DistanceSquared_ReturnValue' has a wrong offset!");
static_assert(offsetof(FUNCLIB_Combat_C_ApplyRadialDamageAndImpulse, CallFunc_Vector_DistanceSquared_ReturnValue_1) == 0x00031C, "Member 'FUNCLIB_Combat_C_ApplyRadialDamageAndImpulse::CallFunc_Vector_DistanceSquared_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(FUNCLIB_Combat_C_ApplyRadialDamageAndImpulse, CallFunc_Less_FloatFloat_ReturnValue) == 0x000320, "Member 'FUNCLIB_Combat_C_ApplyRadialDamageAndImpulse::CallFunc_Less_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(FUNCLIB_Combat_C_ApplyRadialDamageAndImpulse, CallFunc_Map_Find_Value_1) == 0x000324, "Member 'FUNCLIB_Combat_C_ApplyRadialDamageAndImpulse::CallFunc_Map_Find_Value_1' has a wrong offset!");
static_assert(offsetof(FUNCLIB_Combat_C_ApplyRadialDamageAndImpulse, CallFunc_Map_Find_ReturnValue_1) == 0x000330, "Member 'FUNCLIB_Combat_C_ApplyRadialDamageAndImpulse::CallFunc_Map_Find_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(FUNCLIB_Combat_C_ApplyRadialDamageAndImpulse, CallFunc_GetComponentOriginForExplosiveDamage_Origin) == 0x000334, "Member 'FUNCLIB_Combat_C_ApplyRadialDamageAndImpulse::CallFunc_GetComponentOriginForExplosiveDamage_Origin' has a wrong offset!");
static_assert(offsetof(FUNCLIB_Combat_C_ApplyRadialDamageAndImpulse, CallFunc_Set_Contains_ReturnValue) == 0x000340, "Member 'FUNCLIB_Combat_C_ApplyRadialDamageAndImpulse::CallFunc_Set_Contains_ReturnValue' has a wrong offset!");
static_assert(offsetof(FUNCLIB_Combat_C_ApplyRadialDamageAndImpulse, CallFunc_GetPlayerController_ReturnValue) == 0x000348, "Member 'FUNCLIB_Combat_C_ApplyRadialDamageAndImpulse::CallFunc_GetPlayerController_ReturnValue' has a wrong offset!");
static_assert(offsetof(FUNCLIB_Combat_C_ApplyRadialDamageAndImpulse, CallFunc_Not_PreBool_ReturnValue) == 0x000350, "Member 'FUNCLIB_Combat_C_ApplyRadialDamageAndImpulse::CallFunc_Not_PreBool_ReturnValue' has a wrong offset!");
static_assert(offsetof(FUNCLIB_Combat_C_ApplyRadialDamageAndImpulse, CallFunc_GetForceFeedbackExplosionAttenuation_Attenuation) == 0x000358, "Member 'FUNCLIB_Combat_C_ApplyRadialDamageAndImpulse::CallFunc_GetForceFeedbackExplosionAttenuation_Attenuation' has a wrong offset!");
static_assert(offsetof(FUNCLIB_Combat_C_ApplyRadialDamageAndImpulse, CallFunc_EqualEqual_ObjectObject_ReturnValue_1) == 0x000360, "Member 'FUNCLIB_Combat_C_ApplyRadialDamageAndImpulse::CallFunc_EqualEqual_ObjectObject_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(FUNCLIB_Combat_C_ApplyRadialDamageAndImpulse, CallFunc_NotEqual_ObjectObject_ReturnValue) == 0x000361, "Member 'FUNCLIB_Combat_C_ApplyRadialDamageAndImpulse::CallFunc_NotEqual_ObjectObject_ReturnValue' has a wrong offset!");
static_assert(offsetof(FUNCLIB_Combat_C_ApplyRadialDamageAndImpulse, CallFunc_Not_PreBool_ReturnValue_1) == 0x000362, "Member 'FUNCLIB_Combat_C_ApplyRadialDamageAndImpulse::CallFunc_Not_PreBool_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(FUNCLIB_Combat_C_ApplyRadialDamageAndImpulse, CallFunc_BooleanOR_ReturnValue) == 0x000363, "Member 'FUNCLIB_Combat_C_ApplyRadialDamageAndImpulse::CallFunc_BooleanOR_ReturnValue' has a wrong offset!");
static_assert(offsetof(FUNCLIB_Combat_C_ApplyRadialDamageAndImpulse, CallFunc_IsSimulatingPhysics_ReturnValue) == 0x000364, "Member 'FUNCLIB_Combat_C_ApplyRadialDamageAndImpulse::CallFunc_IsSimulatingPhysics_ReturnValue' has a wrong offset!");
static_assert(offsetof(FUNCLIB_Combat_C_ApplyRadialDamageAndImpulse, CallFunc_K2_GetComponentLocation_ReturnValue) == 0x000368, "Member 'FUNCLIB_Combat_C_ApplyRadialDamageAndImpulse::CallFunc_K2_GetComponentLocation_ReturnValue' has a wrong offset!");
static_assert(offsetof(FUNCLIB_Combat_C_ApplyRadialDamageAndImpulse, CallFunc_IsValid_ReturnValue_3) == 0x000374, "Member 'FUNCLIB_Combat_C_ApplyRadialDamageAndImpulse::CallFunc_IsValid_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(FUNCLIB_Combat_C_ApplyRadialDamageAndImpulse, Temp_object_Variable_1) == 0x000378, "Member 'FUNCLIB_Combat_C_ApplyRadialDamageAndImpulse::Temp_object_Variable_1' has a wrong offset!");
static_assert(offsetof(FUNCLIB_Combat_C_ApplyRadialDamageAndImpulse, K2Node_DynamicCast_AsPAWN_System_Shock_Character) == 0x000380, "Member 'FUNCLIB_Combat_C_ApplyRadialDamageAndImpulse::K2Node_DynamicCast_AsPAWN_System_Shock_Character' has a wrong offset!");
static_assert(offsetof(FUNCLIB_Combat_C_ApplyRadialDamageAndImpulse, K2Node_DynamicCast_bSuccess) == 0x000388, "Member 'FUNCLIB_Combat_C_ApplyRadialDamageAndImpulse::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(FUNCLIB_Combat_C_ApplyRadialDamageAndImpulse, CallFunc_IsValid_ReturnValue_4) == 0x000389, "Member 'FUNCLIB_Combat_C_ApplyRadialDamageAndImpulse::CallFunc_IsValid_ReturnValue_4' has a wrong offset!");
static_assert(offsetof(FUNCLIB_Combat_C_ApplyRadialDamageAndImpulse, CallFunc_Conv_IntToFloat_ReturnValue) == 0x00038C, "Member 'FUNCLIB_Combat_C_ApplyRadialDamageAndImpulse::CallFunc_Conv_IntToFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(FUNCLIB_Combat_C_ApplyRadialDamageAndImpulse, CallFunc_GetClosestPointOnCollision_OutPointOnBody) == 0x000390, "Member 'FUNCLIB_Combat_C_ApplyRadialDamageAndImpulse::CallFunc_GetClosestPointOnCollision_OutPointOnBody' has a wrong offset!");
static_assert(offsetof(FUNCLIB_Combat_C_ApplyRadialDamageAndImpulse, CallFunc_GetClosestPointOnCollision_ReturnValue) == 0x00039C, "Member 'FUNCLIB_Combat_C_ApplyRadialDamageAndImpulse::CallFunc_GetClosestPointOnCollision_ReturnValue' has a wrong offset!");
static_assert(offsetof(FUNCLIB_Combat_C_ApplyRadialDamageAndImpulse, CallFunc_Conv_IntToFloat_ReturnValue_1) == 0x0003A0, "Member 'FUNCLIB_Combat_C_ApplyRadialDamageAndImpulse::CallFunc_Conv_IntToFloat_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(FUNCLIB_Combat_C_ApplyRadialDamageAndImpulse, K2Node_MakeArray_Array) == 0x0003A8, "Member 'FUNCLIB_Combat_C_ApplyRadialDamageAndImpulse::K2Node_MakeArray_Array' has a wrong offset!");
static_assert(offsetof(FUNCLIB_Combat_C_ApplyRadialDamageAndImpulse, CallFunc_EqualEqual_ObjectObject_ReturnValue_2) == 0x0003B8, "Member 'FUNCLIB_Combat_C_ApplyRadialDamageAndImpulse::CallFunc_EqualEqual_ObjectObject_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(FUNCLIB_Combat_C_ApplyRadialDamageAndImpulse, CallFunc_GetGameInstance_ReturnValue) == 0x0003C0, "Member 'FUNCLIB_Combat_C_ApplyRadialDamageAndImpulse::CallFunc_GetGameInstance_ReturnValue' has a wrong offset!");
static_assert(offsetof(FUNCLIB_Combat_C_ApplyRadialDamageAndImpulse, K2Node_DynamicCast_AsGI_Single_Player) == 0x0003C8, "Member 'FUNCLIB_Combat_C_ApplyRadialDamageAndImpulse::K2Node_DynamicCast_AsGI_Single_Player' has a wrong offset!");
static_assert(offsetof(FUNCLIB_Combat_C_ApplyRadialDamageAndImpulse, K2Node_DynamicCast_bSuccess_1) == 0x0003D0, "Member 'FUNCLIB_Combat_C_ApplyRadialDamageAndImpulse::K2Node_DynamicCast_bSuccess_1' has a wrong offset!");
static_assert(offsetof(FUNCLIB_Combat_C_ApplyRadialDamageAndImpulse, CallFunc_Subtract_VectorVector_ReturnValue) == 0x0003D4, "Member 'FUNCLIB_Combat_C_ApplyRadialDamageAndImpulse::CallFunc_Subtract_VectorVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(FUNCLIB_Combat_C_ApplyRadialDamageAndImpulse, CallFunc_GetVectorNormalAndLength_OutLength) == 0x0003E0, "Member 'FUNCLIB_Combat_C_ApplyRadialDamageAndImpulse::CallFunc_GetVectorNormalAndLength_OutLength' has a wrong offset!");
static_assert(offsetof(FUNCLIB_Combat_C_ApplyRadialDamageAndImpulse, CallFunc_GetVectorNormalAndLength_ReturnValue) == 0x0003E4, "Member 'FUNCLIB_Combat_C_ApplyRadialDamageAndImpulse::CallFunc_GetVectorNormalAndLength_ReturnValue' has a wrong offset!");
static_assert(offsetof(FUNCLIB_Combat_C_ApplyRadialDamageAndImpulse, CallFunc_Subtract_VectorVector_ReturnValue_1) == 0x0003F0, "Member 'FUNCLIB_Combat_C_ApplyRadialDamageAndImpulse::CallFunc_Subtract_VectorVector_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(FUNCLIB_Combat_C_ApplyRadialDamageAndImpulse, CallFunc_GetVectorNormalAndLength_OutLength_1) == 0x0003FC, "Member 'FUNCLIB_Combat_C_ApplyRadialDamageAndImpulse::CallFunc_GetVectorNormalAndLength_OutLength_1' has a wrong offset!");
static_assert(offsetof(FUNCLIB_Combat_C_ApplyRadialDamageAndImpulse, CallFunc_GetVectorNormalAndLength_ReturnValue_1) == 0x000400, "Member 'FUNCLIB_Combat_C_ApplyRadialDamageAndImpulse::CallFunc_GetVectorNormalAndLength_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(FUNCLIB_Combat_C_ApplyRadialDamageAndImpulse, CallFunc_Subtract_VectorVector_ReturnValue_2) == 0x00040C, "Member 'FUNCLIB_Combat_C_ApplyRadialDamageAndImpulse::CallFunc_Subtract_VectorVector_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(FUNCLIB_Combat_C_ApplyRadialDamageAndImpulse, CallFunc_GetVectorNormalAndLength_OutLength_2) == 0x000418, "Member 'FUNCLIB_Combat_C_ApplyRadialDamageAndImpulse::CallFunc_GetVectorNormalAndLength_OutLength_2' has a wrong offset!");
static_assert(offsetof(FUNCLIB_Combat_C_ApplyRadialDamageAndImpulse, CallFunc_GetVectorNormalAndLength_ReturnValue_2) == 0x00041C, "Member 'FUNCLIB_Combat_C_ApplyRadialDamageAndImpulse::CallFunc_GetVectorNormalAndLength_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(FUNCLIB_Combat_C_ApplyRadialDamageAndImpulse, CallFunc_ComputeExplosiveImpulseAtDistance_Impulse) == 0x000428, "Member 'FUNCLIB_Combat_C_ApplyRadialDamageAndImpulse::CallFunc_ComputeExplosiveImpulseAtDistance_Impulse' has a wrong offset!");
static_assert(offsetof(FUNCLIB_Combat_C_ApplyRadialDamageAndImpulse, CallFunc_Multiply_VectorFloat_ReturnValue) == 0x00042C, "Member 'FUNCLIB_Combat_C_ApplyRadialDamageAndImpulse::CallFunc_Multiply_VectorFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(FUNCLIB_Combat_C_ApplyRadialDamageAndImpulse, Temp_object_Variable_2) == 0x000438, "Member 'FUNCLIB_Combat_C_ApplyRadialDamageAndImpulse::Temp_object_Variable_2' has a wrong offset!");
static_assert(offsetof(FUNCLIB_Combat_C_ApplyRadialDamageAndImpulse, CallFunc_ComputeExplosiveDamageAtDistance_Damage) == 0x000440, "Member 'FUNCLIB_Combat_C_ApplyRadialDamageAndImpulse::CallFunc_ComputeExplosiveDamageAtDistance_Damage' has a wrong offset!");
static_assert(offsetof(FUNCLIB_Combat_C_ApplyRadialDamageAndImpulse, CallFunc_ComputeExplosiveImpulseAtDistance_Impulse_1) == 0x000444, "Member 'FUNCLIB_Combat_C_ApplyRadialDamageAndImpulse::CallFunc_ComputeExplosiveImpulseAtDistance_Impulse_1' has a wrong offset!");
static_assert(offsetof(FUNCLIB_Combat_C_ApplyRadialDamageAndImpulse, CallFunc_ComputeExplosiveDamageAtDistance_Damage_1) == 0x000448, "Member 'FUNCLIB_Combat_C_ApplyRadialDamageAndImpulse::CallFunc_ComputeExplosiveDamageAtDistance_Damage_1' has a wrong offset!");
static_assert(offsetof(FUNCLIB_Combat_C_ApplyRadialDamageAndImpulse, Temp_bool_Variable_1) == 0x00044C, "Member 'FUNCLIB_Combat_C_ApplyRadialDamageAndImpulse::Temp_bool_Variable_1' has a wrong offset!");
static_assert(offsetof(FUNCLIB_Combat_C_ApplyRadialDamageAndImpulse, CallFunc_ComputeExplosiveImpulseAtDistance_Impulse_2) == 0x000450, "Member 'FUNCLIB_Combat_C_ApplyRadialDamageAndImpulse::CallFunc_ComputeExplosiveImpulseAtDistance_Impulse_2' has a wrong offset!");
static_assert(offsetof(FUNCLIB_Combat_C_ApplyRadialDamageAndImpulse, K2Node_Select_Default) == 0x000458, "Member 'FUNCLIB_Combat_C_ApplyRadialDamageAndImpulse::K2Node_Select_Default' has a wrong offset!");
static_assert(offsetof(FUNCLIB_Combat_C_ApplyRadialDamageAndImpulse, CallFunc_SpawnObject_ReturnValue) == 0x000460, "Member 'FUNCLIB_Combat_C_ApplyRadialDamageAndImpulse::CallFunc_SpawnObject_ReturnValue' has a wrong offset!");
static_assert(offsetof(FUNCLIB_Combat_C_ApplyRadialDamageAndImpulse, CallFunc_Multiply_VectorFloat_ReturnValue_1) == 0x000468, "Member 'FUNCLIB_Combat_C_ApplyRadialDamageAndImpulse::CallFunc_Multiply_VectorFloat_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(FUNCLIB_Combat_C_ApplyRadialDamageAndImpulse, CallFunc_Array_Length_ReturnValue_1) == 0x000474, "Member 'FUNCLIB_Combat_C_ApplyRadialDamageAndImpulse::CallFunc_Array_Length_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(FUNCLIB_Combat_C_ApplyRadialDamageAndImpulse, CallFunc_Greater_IntInt_ReturnValue) == 0x000478, "Member 'FUNCLIB_Combat_C_ApplyRadialDamageAndImpulse::CallFunc_Greater_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(FUNCLIB_Combat_C_ApplyRadialDamageAndImpulse, CallFunc_GetClosestPointOnCollision_OutPointOnBody_1) == 0x00047C, "Member 'FUNCLIB_Combat_C_ApplyRadialDamageAndImpulse::CallFunc_GetClosestPointOnCollision_OutPointOnBody_1' has a wrong offset!");
static_assert(offsetof(FUNCLIB_Combat_C_ApplyRadialDamageAndImpulse, CallFunc_GetClosestPointOnCollision_ReturnValue_1) == 0x000488, "Member 'FUNCLIB_Combat_C_ApplyRadialDamageAndImpulse::CallFunc_GetClosestPointOnCollision_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(FUNCLIB_Combat_C_ApplyRadialDamageAndImpulse, K2Node_DynamicCast_AsPAWN_System_Shock_Character_1) == 0x000490, "Member 'FUNCLIB_Combat_C_ApplyRadialDamageAndImpulse::K2Node_DynamicCast_AsPAWN_System_Shock_Character_1' has a wrong offset!");
static_assert(offsetof(FUNCLIB_Combat_C_ApplyRadialDamageAndImpulse, K2Node_DynamicCast_bSuccess_2) == 0x000498, "Member 'FUNCLIB_Combat_C_ApplyRadialDamageAndImpulse::K2Node_DynamicCast_bSuccess_2' has a wrong offset!");
static_assert(offsetof(FUNCLIB_Combat_C_ApplyRadialDamageAndImpulse, CallFunc_HasUnobstructedPropagationPathBetweenPoints_ReturnValue) == 0x000499, "Member 'FUNCLIB_Combat_C_ApplyRadialDamageAndImpulse::CallFunc_HasUnobstructedPropagationPathBetweenPoints_ReturnValue' has a wrong offset!");
static_assert(offsetof(FUNCLIB_Combat_C_ApplyRadialDamageAndImpulse, CallFunc_Multiply_VectorFloat_ReturnValue_2) == 0x00049C, "Member 'FUNCLIB_Combat_C_ApplyRadialDamageAndImpulse::CallFunc_Multiply_VectorFloat_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(FUNCLIB_Combat_C_ApplyRadialDamageAndImpulse, CallFunc_ApplyDamageMod_OutDamageInstance) == 0x0004A8, "Member 'FUNCLIB_Combat_C_ApplyRadialDamageAndImpulse::CallFunc_ApplyDamageMod_OutDamageInstance' has a wrong offset!");
static_assert(offsetof(FUNCLIB_Combat_C_ApplyRadialDamageAndImpulse, CallFunc_ApplyDamageMod_ReturnValue) == 0x0004D0, "Member 'FUNCLIB_Combat_C_ApplyRadialDamageAndImpulse::CallFunc_ApplyDamageMod_ReturnValue' has a wrong offset!");
static_assert(offsetof(FUNCLIB_Combat_C_ApplyRadialDamageAndImpulse, CallFunc_GetComponentByClass_ReturnValue_1) == 0x0004D8, "Member 'FUNCLIB_Combat_C_ApplyRadialDamageAndImpulse::CallFunc_GetComponentByClass_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(FUNCLIB_Combat_C_ApplyRadialDamageAndImpulse, CallFunc_GetOwner_ReturnValue) == 0x0004E0, "Member 'FUNCLIB_Combat_C_ApplyRadialDamageAndImpulse::CallFunc_GetOwner_ReturnValue' has a wrong offset!");
static_assert(offsetof(FUNCLIB_Combat_C_ApplyRadialDamageAndImpulse, CallFunc_IsValid_ReturnValue_5) == 0x0004E8, "Member 'FUNCLIB_Combat_C_ApplyRadialDamageAndImpulse::CallFunc_IsValid_ReturnValue_5' has a wrong offset!");
static_assert(offsetof(FUNCLIB_Combat_C_ApplyRadialDamageAndImpulse, Temp_object_Variable_3) == 0x0004F0, "Member 'FUNCLIB_Combat_C_ApplyRadialDamageAndImpulse::Temp_object_Variable_3' has a wrong offset!");
static_assert(offsetof(FUNCLIB_Combat_C_ApplyRadialDamageAndImpulse, K2Node_Select_Default_1) == 0x0004F8, "Member 'FUNCLIB_Combat_C_ApplyRadialDamageAndImpulse::K2Node_Select_Default_1' has a wrong offset!");
static_assert(offsetof(FUNCLIB_Combat_C_ApplyRadialDamageAndImpulse, CallFunc_SpawnForceFeedbackAtLocation_ReturnValue) == 0x000500, "Member 'FUNCLIB_Combat_C_ApplyRadialDamageAndImpulse::CallFunc_SpawnForceFeedbackAtLocation_ReturnValue' has a wrong offset!");
static_assert(offsetof(FUNCLIB_Combat_C_ApplyRadialDamageAndImpulse, CallFunc_Multiply_VectorFloat_ReturnValue_3) == 0x000508, "Member 'FUNCLIB_Combat_C_ApplyRadialDamageAndImpulse::CallFunc_Multiply_VectorFloat_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(FUNCLIB_Combat_C_ApplyRadialDamageAndImpulse, CallFunc_Multiply_VectorFloat_ReturnValue_4) == 0x000514, "Member 'FUNCLIB_Combat_C_ApplyRadialDamageAndImpulse::CallFunc_Multiply_VectorFloat_ReturnValue_4' has a wrong offset!");
static_assert(offsetof(FUNCLIB_Combat_C_ApplyRadialDamageAndImpulse, CallFunc_SpawnObject_ReturnValue_1) == 0x000520, "Member 'FUNCLIB_Combat_C_ApplyRadialDamageAndImpulse::CallFunc_SpawnObject_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(FUNCLIB_Combat_C_ApplyRadialDamageAndImpulse, CallFunc_ApplyDamageMod_OutDamageInstance_1) == 0x000528, "Member 'FUNCLIB_Combat_C_ApplyRadialDamageAndImpulse::CallFunc_ApplyDamageMod_OutDamageInstance_1' has a wrong offset!");
static_assert(offsetof(FUNCLIB_Combat_C_ApplyRadialDamageAndImpulse, CallFunc_ApplyDamageMod_ReturnValue_1) == 0x000550, "Member 'FUNCLIB_Combat_C_ApplyRadialDamageAndImpulse::CallFunc_ApplyDamageMod_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(FUNCLIB_Combat_C_ApplyRadialDamageAndImpulse, K2Node_MakeArray_Array_1) == 0x000558, "Member 'FUNCLIB_Combat_C_ApplyRadialDamageAndImpulse::K2Node_MakeArray_Array_1' has a wrong offset!");
static_assert(offsetof(FUNCLIB_Combat_C_ApplyRadialDamageAndImpulse, CallFunc_SphereOverlapComponents_OutComponents) == 0x000568, "Member 'FUNCLIB_Combat_C_ApplyRadialDamageAndImpulse::CallFunc_SphereOverlapComponents_OutComponents' has a wrong offset!");
static_assert(offsetof(FUNCLIB_Combat_C_ApplyRadialDamageAndImpulse, CallFunc_SphereOverlapComponents_ReturnValue) == 0x000578, "Member 'FUNCLIB_Combat_C_ApplyRadialDamageAndImpulse::CallFunc_SphereOverlapComponents_ReturnValue' has a wrong offset!");
static_assert(offsetof(FUNCLIB_Combat_C_ApplyRadialDamageAndImpulse, CallFunc_Array_Length_ReturnValue_2) == 0x00057C, "Member 'FUNCLIB_Combat_C_ApplyRadialDamageAndImpulse::CallFunc_Array_Length_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(FUNCLIB_Combat_C_ApplyRadialDamageAndImpulse, CallFunc_Array_Get_Item_1) == 0x000580, "Member 'FUNCLIB_Combat_C_ApplyRadialDamageAndImpulse::CallFunc_Array_Get_Item_1' has a wrong offset!");
static_assert(offsetof(FUNCLIB_Combat_C_ApplyRadialDamageAndImpulse, CallFunc_Less_IntInt_ReturnValue_1) == 0x000588, "Member 'FUNCLIB_Combat_C_ApplyRadialDamageAndImpulse::CallFunc_Less_IntInt_ReturnValue_1' has a wrong offset!");

// Function FUNCLIB_Combat.FUNCLIB_Combat_C.ComputeExplosiveDamageAtDistance
// 0x0030 (0x0030 - 0x0000)
struct FUNCLIB_Combat_C_ComputeExplosiveDamageAtDistance final
{
public:
	float                                         DistanceFromEpicenter;                             // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         BlastRadius;                                       // 0x0004(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         MinDamage;                                         // 0x0008(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         MaxDamage;                                         // 0x000C(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UObject*                                __WorldContext;                                    // 0x0010(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Damage;                                            // 0x0018(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_FloatFloat_ReturnValue;              // 0x001C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_1D[0x3];                                       // 0x001D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_Divide_FloatFloat_ReturnValue;            // 0x0020(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_FMin_ReturnValue;                         // 0x0024(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Ease_ReturnValue;                         // 0x0028(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(FUNCLIB_Combat_C_ComputeExplosiveDamageAtDistance) == 0x000008, "Wrong alignment on FUNCLIB_Combat_C_ComputeExplosiveDamageAtDistance");
static_assert(sizeof(FUNCLIB_Combat_C_ComputeExplosiveDamageAtDistance) == 0x000030, "Wrong size on FUNCLIB_Combat_C_ComputeExplosiveDamageAtDistance");
static_assert(offsetof(FUNCLIB_Combat_C_ComputeExplosiveDamageAtDistance, DistanceFromEpicenter) == 0x000000, "Member 'FUNCLIB_Combat_C_ComputeExplosiveDamageAtDistance::DistanceFromEpicenter' has a wrong offset!");
static_assert(offsetof(FUNCLIB_Combat_C_ComputeExplosiveDamageAtDistance, BlastRadius) == 0x000004, "Member 'FUNCLIB_Combat_C_ComputeExplosiveDamageAtDistance::BlastRadius' has a wrong offset!");
static_assert(offsetof(FUNCLIB_Combat_C_ComputeExplosiveDamageAtDistance, MinDamage) == 0x000008, "Member 'FUNCLIB_Combat_C_ComputeExplosiveDamageAtDistance::MinDamage' has a wrong offset!");
static_assert(offsetof(FUNCLIB_Combat_C_ComputeExplosiveDamageAtDistance, MaxDamage) == 0x00000C, "Member 'FUNCLIB_Combat_C_ComputeExplosiveDamageAtDistance::MaxDamage' has a wrong offset!");
static_assert(offsetof(FUNCLIB_Combat_C_ComputeExplosiveDamageAtDistance, __WorldContext) == 0x000010, "Member 'FUNCLIB_Combat_C_ComputeExplosiveDamageAtDistance::__WorldContext' has a wrong offset!");
static_assert(offsetof(FUNCLIB_Combat_C_ComputeExplosiveDamageAtDistance, Damage) == 0x000018, "Member 'FUNCLIB_Combat_C_ComputeExplosiveDamageAtDistance::Damage' has a wrong offset!");
static_assert(offsetof(FUNCLIB_Combat_C_ComputeExplosiveDamageAtDistance, CallFunc_Less_FloatFloat_ReturnValue) == 0x00001C, "Member 'FUNCLIB_Combat_C_ComputeExplosiveDamageAtDistance::CallFunc_Less_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(FUNCLIB_Combat_C_ComputeExplosiveDamageAtDistance, CallFunc_Divide_FloatFloat_ReturnValue) == 0x000020, "Member 'FUNCLIB_Combat_C_ComputeExplosiveDamageAtDistance::CallFunc_Divide_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(FUNCLIB_Combat_C_ComputeExplosiveDamageAtDistance, CallFunc_FMin_ReturnValue) == 0x000024, "Member 'FUNCLIB_Combat_C_ComputeExplosiveDamageAtDistance::CallFunc_FMin_ReturnValue' has a wrong offset!");
static_assert(offsetof(FUNCLIB_Combat_C_ComputeExplosiveDamageAtDistance, CallFunc_Ease_ReturnValue) == 0x000028, "Member 'FUNCLIB_Combat_C_ComputeExplosiveDamageAtDistance::CallFunc_Ease_ReturnValue' has a wrong offset!");

// Function FUNCLIB_Combat.FUNCLIB_Combat_C.ComputeExplosiveImpulseAtDistance
// 0x0030 (0x0030 - 0x0000)
struct FUNCLIB_Combat_C_ComputeExplosiveImpulseAtDistance final
{
public:
	float                                         DistanceFromEpicenter;                             // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         BlastRadius;                                       // 0x0004(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         BlastImpulse;                                      // 0x0008(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UObject*                                __WorldContext;                                    // 0x0010(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Impulse;                                           // 0x0018(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Divide_FloatFloat_ReturnValue;            // 0x001C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_FMin_ReturnValue;                         // 0x0020(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Greater_FloatFloat_ReturnValue;           // 0x0024(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_25[0x3];                                       // 0x0025(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_Ease_ReturnValue;                         // 0x0028(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(FUNCLIB_Combat_C_ComputeExplosiveImpulseAtDistance) == 0x000008, "Wrong alignment on FUNCLIB_Combat_C_ComputeExplosiveImpulseAtDistance");
static_assert(sizeof(FUNCLIB_Combat_C_ComputeExplosiveImpulseAtDistance) == 0x000030, "Wrong size on FUNCLIB_Combat_C_ComputeExplosiveImpulseAtDistance");
static_assert(offsetof(FUNCLIB_Combat_C_ComputeExplosiveImpulseAtDistance, DistanceFromEpicenter) == 0x000000, "Member 'FUNCLIB_Combat_C_ComputeExplosiveImpulseAtDistance::DistanceFromEpicenter' has a wrong offset!");
static_assert(offsetof(FUNCLIB_Combat_C_ComputeExplosiveImpulseAtDistance, BlastRadius) == 0x000004, "Member 'FUNCLIB_Combat_C_ComputeExplosiveImpulseAtDistance::BlastRadius' has a wrong offset!");
static_assert(offsetof(FUNCLIB_Combat_C_ComputeExplosiveImpulseAtDistance, BlastImpulse) == 0x000008, "Member 'FUNCLIB_Combat_C_ComputeExplosiveImpulseAtDistance::BlastImpulse' has a wrong offset!");
static_assert(offsetof(FUNCLIB_Combat_C_ComputeExplosiveImpulseAtDistance, __WorldContext) == 0x000010, "Member 'FUNCLIB_Combat_C_ComputeExplosiveImpulseAtDistance::__WorldContext' has a wrong offset!");
static_assert(offsetof(FUNCLIB_Combat_C_ComputeExplosiveImpulseAtDistance, Impulse) == 0x000018, "Member 'FUNCLIB_Combat_C_ComputeExplosiveImpulseAtDistance::Impulse' has a wrong offset!");
static_assert(offsetof(FUNCLIB_Combat_C_ComputeExplosiveImpulseAtDistance, CallFunc_Divide_FloatFloat_ReturnValue) == 0x00001C, "Member 'FUNCLIB_Combat_C_ComputeExplosiveImpulseAtDistance::CallFunc_Divide_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(FUNCLIB_Combat_C_ComputeExplosiveImpulseAtDistance, CallFunc_FMin_ReturnValue) == 0x000020, "Member 'FUNCLIB_Combat_C_ComputeExplosiveImpulseAtDistance::CallFunc_FMin_ReturnValue' has a wrong offset!");
static_assert(offsetof(FUNCLIB_Combat_C_ComputeExplosiveImpulseAtDistance, CallFunc_Greater_FloatFloat_ReturnValue) == 0x000024, "Member 'FUNCLIB_Combat_C_ComputeExplosiveImpulseAtDistance::CallFunc_Greater_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(FUNCLIB_Combat_C_ComputeExplosiveImpulseAtDistance, CallFunc_Ease_ReturnValue) == 0x000028, "Member 'FUNCLIB_Combat_C_ComputeExplosiveImpulseAtDistance::CallFunc_Ease_ReturnValue' has a wrong offset!");

// Function FUNCLIB_Combat.FUNCLIB_Combat_C.GetRequiredMuzzleSpeedForBullet
// 0x00C8 (0x00C8 - 0x0000)
struct FUNCLIB_Combat_C_GetRequiredMuzzleSpeedForBullet final
{
public:
	struct FVector                                BarrelDirection;                                   // 0x0000(0x000C)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                VectorToTarget;                                    // 0x000C(0x000C)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Gravity;                                           // 0x0018(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1C[0x4];                                       // 0x001C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UObject*                                __WorldContext;                                    // 0x0020(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Result;                                            // 0x0028(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         SpeedSquared;                                      // 0x002C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         AccTerm;                                           // 0x0030(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         PosTerm;                                           // 0x0034(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         HdV0_Sqr;                                          // 0x0038(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         HdV0;                                              // 0x003C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         BarrelPitchDegrees;                                // 0x0040(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         VerticalOffset;                                    // 0x0044(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector2D                              HorizontalDirection;                               // 0x0048(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         HorizontalDistance;                                // 0x0050(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector2D                              HorizontalVector;                                  // 0x0054(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector_X;                            // 0x005C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector_Y;                            // 0x0060(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector_Z;                            // 0x0064(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Square_ReturnValue;                       // 0x0068(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector2D                              CallFunc_MakeVector2D_ReturnValue;                 // 0x006C(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Divide_FloatFloat_ReturnValue;            // 0x0074(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Sqrt_ReturnValue;                         // 0x0078(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Multiply_FloatFloat_ReturnValue;          // 0x007C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Greater_FloatFloat_ReturnValue;           // 0x0080(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_81[0x3];                                       // 0x0081(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_Multiply_FloatFloat_ReturnValue_1;        // 0x0084(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_DegSin_ReturnValue;                       // 0x0088(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_DegCos_ReturnValue;                       // 0x008C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Multiply_FloatFloat_ReturnValue_2;        // 0x0090(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Subtract_FloatFloat_ReturnValue;          // 0x0094(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Divide_FloatFloat_ReturnValue_1;          // 0x0098(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Abs_ReturnValue;                          // 0x009C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector_X_1;                          // 0x00A0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector_Y_1;                          // 0x00A4(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector_Z_1;                          // 0x00A8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector_X_2;                          // 0x00AC(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector_Y_2;                          // 0x00B0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector_Z_2;                          // 0x00B4(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_DegAsin_ReturnValue;                      // 0x00B8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector2D                              CallFunc_ToDirectionAndLength2D_OutDir;            // 0x00BC(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_ToDirectionAndLength2D_OutLength;         // 0x00C4(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(FUNCLIB_Combat_C_GetRequiredMuzzleSpeedForBullet) == 0x000008, "Wrong alignment on FUNCLIB_Combat_C_GetRequiredMuzzleSpeedForBullet");
static_assert(sizeof(FUNCLIB_Combat_C_GetRequiredMuzzleSpeedForBullet) == 0x0000C8, "Wrong size on FUNCLIB_Combat_C_GetRequiredMuzzleSpeedForBullet");
static_assert(offsetof(FUNCLIB_Combat_C_GetRequiredMuzzleSpeedForBullet, BarrelDirection) == 0x000000, "Member 'FUNCLIB_Combat_C_GetRequiredMuzzleSpeedForBullet::BarrelDirection' has a wrong offset!");
static_assert(offsetof(FUNCLIB_Combat_C_GetRequiredMuzzleSpeedForBullet, VectorToTarget) == 0x00000C, "Member 'FUNCLIB_Combat_C_GetRequiredMuzzleSpeedForBullet::VectorToTarget' has a wrong offset!");
static_assert(offsetof(FUNCLIB_Combat_C_GetRequiredMuzzleSpeedForBullet, Gravity) == 0x000018, "Member 'FUNCLIB_Combat_C_GetRequiredMuzzleSpeedForBullet::Gravity' has a wrong offset!");
static_assert(offsetof(FUNCLIB_Combat_C_GetRequiredMuzzleSpeedForBullet, __WorldContext) == 0x000020, "Member 'FUNCLIB_Combat_C_GetRequiredMuzzleSpeedForBullet::__WorldContext' has a wrong offset!");
static_assert(offsetof(FUNCLIB_Combat_C_GetRequiredMuzzleSpeedForBullet, Result) == 0x000028, "Member 'FUNCLIB_Combat_C_GetRequiredMuzzleSpeedForBullet::Result' has a wrong offset!");
static_assert(offsetof(FUNCLIB_Combat_C_GetRequiredMuzzleSpeedForBullet, SpeedSquared) == 0x00002C, "Member 'FUNCLIB_Combat_C_GetRequiredMuzzleSpeedForBullet::SpeedSquared' has a wrong offset!");
static_assert(offsetof(FUNCLIB_Combat_C_GetRequiredMuzzleSpeedForBullet, AccTerm) == 0x000030, "Member 'FUNCLIB_Combat_C_GetRequiredMuzzleSpeedForBullet::AccTerm' has a wrong offset!");
static_assert(offsetof(FUNCLIB_Combat_C_GetRequiredMuzzleSpeedForBullet, PosTerm) == 0x000034, "Member 'FUNCLIB_Combat_C_GetRequiredMuzzleSpeedForBullet::PosTerm' has a wrong offset!");
static_assert(offsetof(FUNCLIB_Combat_C_GetRequiredMuzzleSpeedForBullet, HdV0_Sqr) == 0x000038, "Member 'FUNCLIB_Combat_C_GetRequiredMuzzleSpeedForBullet::HdV0_Sqr' has a wrong offset!");
static_assert(offsetof(FUNCLIB_Combat_C_GetRequiredMuzzleSpeedForBullet, HdV0) == 0x00003C, "Member 'FUNCLIB_Combat_C_GetRequiredMuzzleSpeedForBullet::HdV0' has a wrong offset!");
static_assert(offsetof(FUNCLIB_Combat_C_GetRequiredMuzzleSpeedForBullet, BarrelPitchDegrees) == 0x000040, "Member 'FUNCLIB_Combat_C_GetRequiredMuzzleSpeedForBullet::BarrelPitchDegrees' has a wrong offset!");
static_assert(offsetof(FUNCLIB_Combat_C_GetRequiredMuzzleSpeedForBullet, VerticalOffset) == 0x000044, "Member 'FUNCLIB_Combat_C_GetRequiredMuzzleSpeedForBullet::VerticalOffset' has a wrong offset!");
static_assert(offsetof(FUNCLIB_Combat_C_GetRequiredMuzzleSpeedForBullet, HorizontalDirection) == 0x000048, "Member 'FUNCLIB_Combat_C_GetRequiredMuzzleSpeedForBullet::HorizontalDirection' has a wrong offset!");
static_assert(offsetof(FUNCLIB_Combat_C_GetRequiredMuzzleSpeedForBullet, HorizontalDistance) == 0x000050, "Member 'FUNCLIB_Combat_C_GetRequiredMuzzleSpeedForBullet::HorizontalDistance' has a wrong offset!");
static_assert(offsetof(FUNCLIB_Combat_C_GetRequiredMuzzleSpeedForBullet, HorizontalVector) == 0x000054, "Member 'FUNCLIB_Combat_C_GetRequiredMuzzleSpeedForBullet::HorizontalVector' has a wrong offset!");
static_assert(offsetof(FUNCLIB_Combat_C_GetRequiredMuzzleSpeedForBullet, CallFunc_BreakVector_X) == 0x00005C, "Member 'FUNCLIB_Combat_C_GetRequiredMuzzleSpeedForBullet::CallFunc_BreakVector_X' has a wrong offset!");
static_assert(offsetof(FUNCLIB_Combat_C_GetRequiredMuzzleSpeedForBullet, CallFunc_BreakVector_Y) == 0x000060, "Member 'FUNCLIB_Combat_C_GetRequiredMuzzleSpeedForBullet::CallFunc_BreakVector_Y' has a wrong offset!");
static_assert(offsetof(FUNCLIB_Combat_C_GetRequiredMuzzleSpeedForBullet, CallFunc_BreakVector_Z) == 0x000064, "Member 'FUNCLIB_Combat_C_GetRequiredMuzzleSpeedForBullet::CallFunc_BreakVector_Z' has a wrong offset!");
static_assert(offsetof(FUNCLIB_Combat_C_GetRequiredMuzzleSpeedForBullet, CallFunc_Square_ReturnValue) == 0x000068, "Member 'FUNCLIB_Combat_C_GetRequiredMuzzleSpeedForBullet::CallFunc_Square_ReturnValue' has a wrong offset!");
static_assert(offsetof(FUNCLIB_Combat_C_GetRequiredMuzzleSpeedForBullet, CallFunc_MakeVector2D_ReturnValue) == 0x00006C, "Member 'FUNCLIB_Combat_C_GetRequiredMuzzleSpeedForBullet::CallFunc_MakeVector2D_ReturnValue' has a wrong offset!");
static_assert(offsetof(FUNCLIB_Combat_C_GetRequiredMuzzleSpeedForBullet, CallFunc_Divide_FloatFloat_ReturnValue) == 0x000074, "Member 'FUNCLIB_Combat_C_GetRequiredMuzzleSpeedForBullet::CallFunc_Divide_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(FUNCLIB_Combat_C_GetRequiredMuzzleSpeedForBullet, CallFunc_Sqrt_ReturnValue) == 0x000078, "Member 'FUNCLIB_Combat_C_GetRequiredMuzzleSpeedForBullet::CallFunc_Sqrt_ReturnValue' has a wrong offset!");
static_assert(offsetof(FUNCLIB_Combat_C_GetRequiredMuzzleSpeedForBullet, CallFunc_Multiply_FloatFloat_ReturnValue) == 0x00007C, "Member 'FUNCLIB_Combat_C_GetRequiredMuzzleSpeedForBullet::CallFunc_Multiply_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(FUNCLIB_Combat_C_GetRequiredMuzzleSpeedForBullet, CallFunc_Greater_FloatFloat_ReturnValue) == 0x000080, "Member 'FUNCLIB_Combat_C_GetRequiredMuzzleSpeedForBullet::CallFunc_Greater_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(FUNCLIB_Combat_C_GetRequiredMuzzleSpeedForBullet, CallFunc_Multiply_FloatFloat_ReturnValue_1) == 0x000084, "Member 'FUNCLIB_Combat_C_GetRequiredMuzzleSpeedForBullet::CallFunc_Multiply_FloatFloat_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(FUNCLIB_Combat_C_GetRequiredMuzzleSpeedForBullet, CallFunc_DegSin_ReturnValue) == 0x000088, "Member 'FUNCLIB_Combat_C_GetRequiredMuzzleSpeedForBullet::CallFunc_DegSin_ReturnValue' has a wrong offset!");
static_assert(offsetof(FUNCLIB_Combat_C_GetRequiredMuzzleSpeedForBullet, CallFunc_DegCos_ReturnValue) == 0x00008C, "Member 'FUNCLIB_Combat_C_GetRequiredMuzzleSpeedForBullet::CallFunc_DegCos_ReturnValue' has a wrong offset!");
static_assert(offsetof(FUNCLIB_Combat_C_GetRequiredMuzzleSpeedForBullet, CallFunc_Multiply_FloatFloat_ReturnValue_2) == 0x000090, "Member 'FUNCLIB_Combat_C_GetRequiredMuzzleSpeedForBullet::CallFunc_Multiply_FloatFloat_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(FUNCLIB_Combat_C_GetRequiredMuzzleSpeedForBullet, CallFunc_Subtract_FloatFloat_ReturnValue) == 0x000094, "Member 'FUNCLIB_Combat_C_GetRequiredMuzzleSpeedForBullet::CallFunc_Subtract_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(FUNCLIB_Combat_C_GetRequiredMuzzleSpeedForBullet, CallFunc_Divide_FloatFloat_ReturnValue_1) == 0x000098, "Member 'FUNCLIB_Combat_C_GetRequiredMuzzleSpeedForBullet::CallFunc_Divide_FloatFloat_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(FUNCLIB_Combat_C_GetRequiredMuzzleSpeedForBullet, CallFunc_Abs_ReturnValue) == 0x00009C, "Member 'FUNCLIB_Combat_C_GetRequiredMuzzleSpeedForBullet::CallFunc_Abs_ReturnValue' has a wrong offset!");
static_assert(offsetof(FUNCLIB_Combat_C_GetRequiredMuzzleSpeedForBullet, CallFunc_BreakVector_X_1) == 0x0000A0, "Member 'FUNCLIB_Combat_C_GetRequiredMuzzleSpeedForBullet::CallFunc_BreakVector_X_1' has a wrong offset!");
static_assert(offsetof(FUNCLIB_Combat_C_GetRequiredMuzzleSpeedForBullet, CallFunc_BreakVector_Y_1) == 0x0000A4, "Member 'FUNCLIB_Combat_C_GetRequiredMuzzleSpeedForBullet::CallFunc_BreakVector_Y_1' has a wrong offset!");
static_assert(offsetof(FUNCLIB_Combat_C_GetRequiredMuzzleSpeedForBullet, CallFunc_BreakVector_Z_1) == 0x0000A8, "Member 'FUNCLIB_Combat_C_GetRequiredMuzzleSpeedForBullet::CallFunc_BreakVector_Z_1' has a wrong offset!");
static_assert(offsetof(FUNCLIB_Combat_C_GetRequiredMuzzleSpeedForBullet, CallFunc_BreakVector_X_2) == 0x0000AC, "Member 'FUNCLIB_Combat_C_GetRequiredMuzzleSpeedForBullet::CallFunc_BreakVector_X_2' has a wrong offset!");
static_assert(offsetof(FUNCLIB_Combat_C_GetRequiredMuzzleSpeedForBullet, CallFunc_BreakVector_Y_2) == 0x0000B0, "Member 'FUNCLIB_Combat_C_GetRequiredMuzzleSpeedForBullet::CallFunc_BreakVector_Y_2' has a wrong offset!");
static_assert(offsetof(FUNCLIB_Combat_C_GetRequiredMuzzleSpeedForBullet, CallFunc_BreakVector_Z_2) == 0x0000B4, "Member 'FUNCLIB_Combat_C_GetRequiredMuzzleSpeedForBullet::CallFunc_BreakVector_Z_2' has a wrong offset!");
static_assert(offsetof(FUNCLIB_Combat_C_GetRequiredMuzzleSpeedForBullet, CallFunc_DegAsin_ReturnValue) == 0x0000B8, "Member 'FUNCLIB_Combat_C_GetRequiredMuzzleSpeedForBullet::CallFunc_DegAsin_ReturnValue' has a wrong offset!");
static_assert(offsetof(FUNCLIB_Combat_C_GetRequiredMuzzleSpeedForBullet, CallFunc_ToDirectionAndLength2D_OutDir) == 0x0000BC, "Member 'FUNCLIB_Combat_C_GetRequiredMuzzleSpeedForBullet::CallFunc_ToDirectionAndLength2D_OutDir' has a wrong offset!");
static_assert(offsetof(FUNCLIB_Combat_C_GetRequiredMuzzleSpeedForBullet, CallFunc_ToDirectionAndLength2D_OutLength) == 0x0000C4, "Member 'FUNCLIB_Combat_C_GetRequiredMuzzleSpeedForBullet::CallFunc_ToDirectionAndLength2D_OutLength' has a wrong offset!");

// Function FUNCLIB_Combat.FUNCLIB_Combat_C.DamageCharacterShieldsAlongRay
// 0x0270 (0x0270 - 0x0000)
struct FUNCLIB_Combat_C_DamageCharacterShieldsAlongRay final
{
public:
	struct FVector                                TraceLocation;                                     // 0x0000(0x000C)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                TraceDirection;                                    // 0x000C(0x000C)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         TraceDistance;                                     // 0x0018(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         ProjectileRadius;                                  // 0x001C(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         DamageValue;                                       // 0x0020(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_24[0x4];                                       // 0x0024(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class AActor*>                         IgnoreActors;                                      // 0x0028(0x0010)(BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
	class APAWN_SystemShockCharacter_C*           TraceHitCharacter;                                 // 0x0038(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TSet<class APAWN_SystemShockCharacter_C*>     InOutHitCharacters;                                // 0x0040(0x0050)(BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
	class UObject*                                __WorldContext;                                    // 0x0090(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          BlockingHit;                                       // 0x0098(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_99[0x3];                                       // 0x0099(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FHitResult                             HitResult;                                         // 0x009C(0x0088)(Parm, OutParm, IsPlainOldData, NoDestructor, ContainsInstancedReference)
	struct FVector                                TraceEndLocation;                                  // 0x0124(0x000C)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class APAWN_SystemShockCharacter_C*           CandidateCharacter;                                // 0x0130(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         ImpactRadius;                                      // 0x0138(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         MaxShieldBufferRadius;                             // 0x013C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Array_Index_Variable;                     // 0x0140(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_MapRangeClamped_ReturnValue;              // 0x0144(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Add_FloatFloat_ReturnValue;               // 0x0148(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_FMax_ReturnValue;                         // 0x014C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TArray<class UVoxelNavAgentComponent*>        K2Node_MakeArray_Array;                            // 0x0150(0x0010)(ConstParm, ReferenceParm, ContainsInstancedReference)
	bool                                          CallFunc_TryDamageSpecificCharacterShieldsAlongRay_ShieldHit; // 0x0160(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_TryDamageSpecificCharacterShieldsAlongRay_BlockingHit; // 0x0161(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_162[0x2];                                      // 0x0162(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	struct FHitResult                             CallFunc_TryDamageSpecificCharacterShieldsAlongRay_HitResult; // 0x0164(0x0088)(IsPlainOldData, NoDestructor, ContainsInstancedReference)
	struct FVector                                CallFunc_Multiply_VectorFloat_ReturnValue;         // 0x01EC(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Add_VectorVector_ReturnValue;             // 0x01F8(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Loop_Counter_Variable;                    // 0x0204(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue;                   // 0x0208(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_20C[0x4];                                      // 0x020C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UGameInstance*                          CallFunc_GetGameInstance_ReturnValue;              // 0x0210(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UGI_SinglePlayer_C*                     K2Node_DynamicCast_AsGI_Single_Player;             // 0x0218(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0220(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_221[0x7];                                      // 0x0221(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FVoxelNavAgentTraceResult>      CallFunc_GetNavigationAgentsUsingSphereTrace_ReturnValue; // 0x0228(0x0010)(ReferenceParm, ContainsInstancedReference)
	int32                                         CallFunc_Array_Length_ReturnValue;                 // 0x0238(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_23C[0x4];                                      // 0x023C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVoxelNavAgentTraceResult              CallFunc_Array_Get_Item;                           // 0x0240(0x0010)(NoDestructor, ContainsInstancedReference)
	bool                                          CallFunc_Less_IntInt_ReturnValue;                  // 0x0250(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_251[0x7];                                      // 0x0251(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class AActor*                                 CallFunc_GetOwner_ReturnValue;                     // 0x0258(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class APAWN_SystemShockCharacter_C*           K2Node_DynamicCast_AsPAWN_System_Shock_Character;  // 0x0260(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess_1;                     // 0x0268(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(FUNCLIB_Combat_C_DamageCharacterShieldsAlongRay) == 0x000008, "Wrong alignment on FUNCLIB_Combat_C_DamageCharacterShieldsAlongRay");
static_assert(sizeof(FUNCLIB_Combat_C_DamageCharacterShieldsAlongRay) == 0x000270, "Wrong size on FUNCLIB_Combat_C_DamageCharacterShieldsAlongRay");
static_assert(offsetof(FUNCLIB_Combat_C_DamageCharacterShieldsAlongRay, TraceLocation) == 0x000000, "Member 'FUNCLIB_Combat_C_DamageCharacterShieldsAlongRay::TraceLocation' has a wrong offset!");
static_assert(offsetof(FUNCLIB_Combat_C_DamageCharacterShieldsAlongRay, TraceDirection) == 0x00000C, "Member 'FUNCLIB_Combat_C_DamageCharacterShieldsAlongRay::TraceDirection' has a wrong offset!");
static_assert(offsetof(FUNCLIB_Combat_C_DamageCharacterShieldsAlongRay, TraceDistance) == 0x000018, "Member 'FUNCLIB_Combat_C_DamageCharacterShieldsAlongRay::TraceDistance' has a wrong offset!");
static_assert(offsetof(FUNCLIB_Combat_C_DamageCharacterShieldsAlongRay, ProjectileRadius) == 0x00001C, "Member 'FUNCLIB_Combat_C_DamageCharacterShieldsAlongRay::ProjectileRadius' has a wrong offset!");
static_assert(offsetof(FUNCLIB_Combat_C_DamageCharacterShieldsAlongRay, DamageValue) == 0x000020, "Member 'FUNCLIB_Combat_C_DamageCharacterShieldsAlongRay::DamageValue' has a wrong offset!");
static_assert(offsetof(FUNCLIB_Combat_C_DamageCharacterShieldsAlongRay, IgnoreActors) == 0x000028, "Member 'FUNCLIB_Combat_C_DamageCharacterShieldsAlongRay::IgnoreActors' has a wrong offset!");
static_assert(offsetof(FUNCLIB_Combat_C_DamageCharacterShieldsAlongRay, TraceHitCharacter) == 0x000038, "Member 'FUNCLIB_Combat_C_DamageCharacterShieldsAlongRay::TraceHitCharacter' has a wrong offset!");
static_assert(offsetof(FUNCLIB_Combat_C_DamageCharacterShieldsAlongRay, InOutHitCharacters) == 0x000040, "Member 'FUNCLIB_Combat_C_DamageCharacterShieldsAlongRay::InOutHitCharacters' has a wrong offset!");
static_assert(offsetof(FUNCLIB_Combat_C_DamageCharacterShieldsAlongRay, __WorldContext) == 0x000090, "Member 'FUNCLIB_Combat_C_DamageCharacterShieldsAlongRay::__WorldContext' has a wrong offset!");
static_assert(offsetof(FUNCLIB_Combat_C_DamageCharacterShieldsAlongRay, BlockingHit) == 0x000098, "Member 'FUNCLIB_Combat_C_DamageCharacterShieldsAlongRay::BlockingHit' has a wrong offset!");
static_assert(offsetof(FUNCLIB_Combat_C_DamageCharacterShieldsAlongRay, HitResult) == 0x00009C, "Member 'FUNCLIB_Combat_C_DamageCharacterShieldsAlongRay::HitResult' has a wrong offset!");
static_assert(offsetof(FUNCLIB_Combat_C_DamageCharacterShieldsAlongRay, TraceEndLocation) == 0x000124, "Member 'FUNCLIB_Combat_C_DamageCharacterShieldsAlongRay::TraceEndLocation' has a wrong offset!");
static_assert(offsetof(FUNCLIB_Combat_C_DamageCharacterShieldsAlongRay, CandidateCharacter) == 0x000130, "Member 'FUNCLIB_Combat_C_DamageCharacterShieldsAlongRay::CandidateCharacter' has a wrong offset!");
static_assert(offsetof(FUNCLIB_Combat_C_DamageCharacterShieldsAlongRay, ImpactRadius) == 0x000138, "Member 'FUNCLIB_Combat_C_DamageCharacterShieldsAlongRay::ImpactRadius' has a wrong offset!");
static_assert(offsetof(FUNCLIB_Combat_C_DamageCharacterShieldsAlongRay, MaxShieldBufferRadius) == 0x00013C, "Member 'FUNCLIB_Combat_C_DamageCharacterShieldsAlongRay::MaxShieldBufferRadius' has a wrong offset!");
static_assert(offsetof(FUNCLIB_Combat_C_DamageCharacterShieldsAlongRay, Temp_int_Array_Index_Variable) == 0x000140, "Member 'FUNCLIB_Combat_C_DamageCharacterShieldsAlongRay::Temp_int_Array_Index_Variable' has a wrong offset!");
static_assert(offsetof(FUNCLIB_Combat_C_DamageCharacterShieldsAlongRay, CallFunc_MapRangeClamped_ReturnValue) == 0x000144, "Member 'FUNCLIB_Combat_C_DamageCharacterShieldsAlongRay::CallFunc_MapRangeClamped_ReturnValue' has a wrong offset!");
static_assert(offsetof(FUNCLIB_Combat_C_DamageCharacterShieldsAlongRay, CallFunc_Add_FloatFloat_ReturnValue) == 0x000148, "Member 'FUNCLIB_Combat_C_DamageCharacterShieldsAlongRay::CallFunc_Add_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(FUNCLIB_Combat_C_DamageCharacterShieldsAlongRay, CallFunc_FMax_ReturnValue) == 0x00014C, "Member 'FUNCLIB_Combat_C_DamageCharacterShieldsAlongRay::CallFunc_FMax_ReturnValue' has a wrong offset!");
static_assert(offsetof(FUNCLIB_Combat_C_DamageCharacterShieldsAlongRay, K2Node_MakeArray_Array) == 0x000150, "Member 'FUNCLIB_Combat_C_DamageCharacterShieldsAlongRay::K2Node_MakeArray_Array' has a wrong offset!");
static_assert(offsetof(FUNCLIB_Combat_C_DamageCharacterShieldsAlongRay, CallFunc_TryDamageSpecificCharacterShieldsAlongRay_ShieldHit) == 0x000160, "Member 'FUNCLIB_Combat_C_DamageCharacterShieldsAlongRay::CallFunc_TryDamageSpecificCharacterShieldsAlongRay_ShieldHit' has a wrong offset!");
static_assert(offsetof(FUNCLIB_Combat_C_DamageCharacterShieldsAlongRay, CallFunc_TryDamageSpecificCharacterShieldsAlongRay_BlockingHit) == 0x000161, "Member 'FUNCLIB_Combat_C_DamageCharacterShieldsAlongRay::CallFunc_TryDamageSpecificCharacterShieldsAlongRay_BlockingHit' has a wrong offset!");
static_assert(offsetof(FUNCLIB_Combat_C_DamageCharacterShieldsAlongRay, CallFunc_TryDamageSpecificCharacterShieldsAlongRay_HitResult) == 0x000164, "Member 'FUNCLIB_Combat_C_DamageCharacterShieldsAlongRay::CallFunc_TryDamageSpecificCharacterShieldsAlongRay_HitResult' has a wrong offset!");
static_assert(offsetof(FUNCLIB_Combat_C_DamageCharacterShieldsAlongRay, CallFunc_Multiply_VectorFloat_ReturnValue) == 0x0001EC, "Member 'FUNCLIB_Combat_C_DamageCharacterShieldsAlongRay::CallFunc_Multiply_VectorFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(FUNCLIB_Combat_C_DamageCharacterShieldsAlongRay, CallFunc_Add_VectorVector_ReturnValue) == 0x0001F8, "Member 'FUNCLIB_Combat_C_DamageCharacterShieldsAlongRay::CallFunc_Add_VectorVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(FUNCLIB_Combat_C_DamageCharacterShieldsAlongRay, Temp_int_Loop_Counter_Variable) == 0x000204, "Member 'FUNCLIB_Combat_C_DamageCharacterShieldsAlongRay::Temp_int_Loop_Counter_Variable' has a wrong offset!");
static_assert(offsetof(FUNCLIB_Combat_C_DamageCharacterShieldsAlongRay, CallFunc_Add_IntInt_ReturnValue) == 0x000208, "Member 'FUNCLIB_Combat_C_DamageCharacterShieldsAlongRay::CallFunc_Add_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(FUNCLIB_Combat_C_DamageCharacterShieldsAlongRay, CallFunc_GetGameInstance_ReturnValue) == 0x000210, "Member 'FUNCLIB_Combat_C_DamageCharacterShieldsAlongRay::CallFunc_GetGameInstance_ReturnValue' has a wrong offset!");
static_assert(offsetof(FUNCLIB_Combat_C_DamageCharacterShieldsAlongRay, K2Node_DynamicCast_AsGI_Single_Player) == 0x000218, "Member 'FUNCLIB_Combat_C_DamageCharacterShieldsAlongRay::K2Node_DynamicCast_AsGI_Single_Player' has a wrong offset!");
static_assert(offsetof(FUNCLIB_Combat_C_DamageCharacterShieldsAlongRay, K2Node_DynamicCast_bSuccess) == 0x000220, "Member 'FUNCLIB_Combat_C_DamageCharacterShieldsAlongRay::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(FUNCLIB_Combat_C_DamageCharacterShieldsAlongRay, CallFunc_GetNavigationAgentsUsingSphereTrace_ReturnValue) == 0x000228, "Member 'FUNCLIB_Combat_C_DamageCharacterShieldsAlongRay::CallFunc_GetNavigationAgentsUsingSphereTrace_ReturnValue' has a wrong offset!");
static_assert(offsetof(FUNCLIB_Combat_C_DamageCharacterShieldsAlongRay, CallFunc_Array_Length_ReturnValue) == 0x000238, "Member 'FUNCLIB_Combat_C_DamageCharacterShieldsAlongRay::CallFunc_Array_Length_ReturnValue' has a wrong offset!");
static_assert(offsetof(FUNCLIB_Combat_C_DamageCharacterShieldsAlongRay, CallFunc_Array_Get_Item) == 0x000240, "Member 'FUNCLIB_Combat_C_DamageCharacterShieldsAlongRay::CallFunc_Array_Get_Item' has a wrong offset!");
static_assert(offsetof(FUNCLIB_Combat_C_DamageCharacterShieldsAlongRay, CallFunc_Less_IntInt_ReturnValue) == 0x000250, "Member 'FUNCLIB_Combat_C_DamageCharacterShieldsAlongRay::CallFunc_Less_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(FUNCLIB_Combat_C_DamageCharacterShieldsAlongRay, CallFunc_GetOwner_ReturnValue) == 0x000258, "Member 'FUNCLIB_Combat_C_DamageCharacterShieldsAlongRay::CallFunc_GetOwner_ReturnValue' has a wrong offset!");
static_assert(offsetof(FUNCLIB_Combat_C_DamageCharacterShieldsAlongRay, K2Node_DynamicCast_AsPAWN_System_Shock_Character) == 0x000260, "Member 'FUNCLIB_Combat_C_DamageCharacterShieldsAlongRay::K2Node_DynamicCast_AsPAWN_System_Shock_Character' has a wrong offset!");
static_assert(offsetof(FUNCLIB_Combat_C_DamageCharacterShieldsAlongRay, K2Node_DynamicCast_bSuccess_1) == 0x000268, "Member 'FUNCLIB_Combat_C_DamageCharacterShieldsAlongRay::K2Node_DynamicCast_bSuccess_1' has a wrong offset!");

// Function FUNCLIB_Combat.FUNCLIB_Combat_C.GetForceFeedbackExplosionAttenuation
// 0x0020 (0x0020 - 0x0000)
struct FUNCLIB_Combat_C_GetForceFeedbackExplosionAttenuation final
{
public:
	float                                         BlastRadius;                                       // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UObject*                                __WorldContext;                                    // 0x0008(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UForceFeedbackAttenuation*              Attenuation;                                       // 0x0010(0x0008)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_FloatFloat_ReturnValue;              // 0x0018(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Less_FloatFloat_ReturnValue_1;            // 0x0019(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(FUNCLIB_Combat_C_GetForceFeedbackExplosionAttenuation) == 0x000008, "Wrong alignment on FUNCLIB_Combat_C_GetForceFeedbackExplosionAttenuation");
static_assert(sizeof(FUNCLIB_Combat_C_GetForceFeedbackExplosionAttenuation) == 0x000020, "Wrong size on FUNCLIB_Combat_C_GetForceFeedbackExplosionAttenuation");
static_assert(offsetof(FUNCLIB_Combat_C_GetForceFeedbackExplosionAttenuation, BlastRadius) == 0x000000, "Member 'FUNCLIB_Combat_C_GetForceFeedbackExplosionAttenuation::BlastRadius' has a wrong offset!");
static_assert(offsetof(FUNCLIB_Combat_C_GetForceFeedbackExplosionAttenuation, __WorldContext) == 0x000008, "Member 'FUNCLIB_Combat_C_GetForceFeedbackExplosionAttenuation::__WorldContext' has a wrong offset!");
static_assert(offsetof(FUNCLIB_Combat_C_GetForceFeedbackExplosionAttenuation, Attenuation) == 0x000010, "Member 'FUNCLIB_Combat_C_GetForceFeedbackExplosionAttenuation::Attenuation' has a wrong offset!");
static_assert(offsetof(FUNCLIB_Combat_C_GetForceFeedbackExplosionAttenuation, CallFunc_Less_FloatFloat_ReturnValue) == 0x000018, "Member 'FUNCLIB_Combat_C_GetForceFeedbackExplosionAttenuation::CallFunc_Less_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(FUNCLIB_Combat_C_GetForceFeedbackExplosionAttenuation, CallFunc_Less_FloatFloat_ReturnValue_1) == 0x000019, "Member 'FUNCLIB_Combat_C_GetForceFeedbackExplosionAttenuation::CallFunc_Less_FloatFloat_ReturnValue_1' has a wrong offset!");

// Function FUNCLIB_Combat.FUNCLIB_Combat_C.GetComponentOriginForExplosiveDamage
// 0x0058 (0x0058 - 0x0000)
struct FUNCLIB_Combat_C_GetComponentOriginForExplosiveDamage final
{
public:
	class UPrimitiveComponent*                    PrimitiveComponent;                                // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UObject*                                __WorldContext;                                    // 0x0008(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                Origin;                                            // 0x0010(0x000C)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1C[0x4];                                       // 0x001C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UStaticMeshComponent*                   K2Node_DynamicCast_AsStatic_Mesh_Component;        // 0x0020(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0028(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_29[0x3];                                       // 0x0029(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                CallFunc_K2_GetComponentLocation_ReturnValue;      // 0x002C(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_GetComponentBounds_Origin;                // 0x0038(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_GetComponentBounds_BoxExtent;             // 0x0044(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_GetComponentBounds_SphereRadius;          // 0x0050(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(FUNCLIB_Combat_C_GetComponentOriginForExplosiveDamage) == 0x000008, "Wrong alignment on FUNCLIB_Combat_C_GetComponentOriginForExplosiveDamage");
static_assert(sizeof(FUNCLIB_Combat_C_GetComponentOriginForExplosiveDamage) == 0x000058, "Wrong size on FUNCLIB_Combat_C_GetComponentOriginForExplosiveDamage");
static_assert(offsetof(FUNCLIB_Combat_C_GetComponentOriginForExplosiveDamage, PrimitiveComponent) == 0x000000, "Member 'FUNCLIB_Combat_C_GetComponentOriginForExplosiveDamage::PrimitiveComponent' has a wrong offset!");
static_assert(offsetof(FUNCLIB_Combat_C_GetComponentOriginForExplosiveDamage, __WorldContext) == 0x000008, "Member 'FUNCLIB_Combat_C_GetComponentOriginForExplosiveDamage::__WorldContext' has a wrong offset!");
static_assert(offsetof(FUNCLIB_Combat_C_GetComponentOriginForExplosiveDamage, Origin) == 0x000010, "Member 'FUNCLIB_Combat_C_GetComponentOriginForExplosiveDamage::Origin' has a wrong offset!");
static_assert(offsetof(FUNCLIB_Combat_C_GetComponentOriginForExplosiveDamage, K2Node_DynamicCast_AsStatic_Mesh_Component) == 0x000020, "Member 'FUNCLIB_Combat_C_GetComponentOriginForExplosiveDamage::K2Node_DynamicCast_AsStatic_Mesh_Component' has a wrong offset!");
static_assert(offsetof(FUNCLIB_Combat_C_GetComponentOriginForExplosiveDamage, K2Node_DynamicCast_bSuccess) == 0x000028, "Member 'FUNCLIB_Combat_C_GetComponentOriginForExplosiveDamage::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(FUNCLIB_Combat_C_GetComponentOriginForExplosiveDamage, CallFunc_K2_GetComponentLocation_ReturnValue) == 0x00002C, "Member 'FUNCLIB_Combat_C_GetComponentOriginForExplosiveDamage::CallFunc_K2_GetComponentLocation_ReturnValue' has a wrong offset!");
static_assert(offsetof(FUNCLIB_Combat_C_GetComponentOriginForExplosiveDamage, CallFunc_GetComponentBounds_Origin) == 0x000038, "Member 'FUNCLIB_Combat_C_GetComponentOriginForExplosiveDamage::CallFunc_GetComponentBounds_Origin' has a wrong offset!");
static_assert(offsetof(FUNCLIB_Combat_C_GetComponentOriginForExplosiveDamage, CallFunc_GetComponentBounds_BoxExtent) == 0x000044, "Member 'FUNCLIB_Combat_C_GetComponentOriginForExplosiveDamage::CallFunc_GetComponentBounds_BoxExtent' has a wrong offset!");
static_assert(offsetof(FUNCLIB_Combat_C_GetComponentOriginForExplosiveDamage, CallFunc_GetComponentBounds_SphereRadius) == 0x000050, "Member 'FUNCLIB_Combat_C_GetComponentOriginForExplosiveDamage::CallFunc_GetComponentBounds_SphereRadius' has a wrong offset!");

// Function FUNCLIB_Combat.FUNCLIB_Combat_C.TryDamageSpecificCharacterShieldsAlongRay
// 0x0360 (0x0360 - 0x0000)
struct FUNCLIB_Combat_C_TryDamageSpecificCharacterShieldsAlongRay final
{
public:
	class APAWN_SystemShockCharacter_C*           Character;                                         // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                TraceLocation;                                     // 0x0008(0x000C)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                TraceDirection;                                    // 0x0014(0x000C)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         TraceDistance;                                     // 0x0020(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         ImpactRadius;                                      // 0x0024(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         DamageValue;                                       // 0x0028(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_2C[0x4];                                       // 0x002C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class APAWN_SystemShockCharacter_C*           TraceHitCharacter;                                 // 0x0030(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UObject*                                __WorldContext;                                    // 0x0038(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          ShieldHit;                                         // 0x0040(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          BlockingHit;                                       // 0x0041(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_42[0x2];                                       // 0x0042(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	struct FHitResult                             HitResult;                                         // 0x0044(0x0088)(Parm, OutParm, IsPlainOldData, NoDestructor, ContainsInstancedReference)
	struct FVector                                ImpactNormal;                                      // 0x00CC(0x000C)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                ImpactLocation;                                    // 0x00D8(0x000C)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_E4[0x4];                                       // 0x00E4(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FAttribModApplyData                    EnergyDamageModData;                               // 0x00E8(0x00A0)(Edit, BlueprintVisible)
	struct FVector2D                              RayIntersectInterval;                              // 0x0188(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         ShieldRadius;                                      // 0x0190(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         ScaledDamageToEnergy;                              // 0x0194(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         ShieldPercentage;                                  // 0x0198(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_ObjectObject_ReturnValue;      // 0x019C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_19D[0x3];                                      // 0x019D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class UAttributeDef*                          CallFunc_GetShieldAttrib_ReturnValue;              // 0x01A0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_GetAttribValue_ReturnValue;               // 0x01A8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_K2_GetActorLocation_ReturnValue;          // 0x01AC(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_GetAttribValue_ReturnValue_1;             // 0x01B8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Subtract_FloatFloat_ReturnValue;          // 0x01BC(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_GetShieldRadius_Radius;                   // 0x01C0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_K2_GetActorLocation_ReturnValue_1;        // 0x01C4(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Multiply_VectorFloat_ReturnValue;         // 0x01D0(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Add_VectorVector_ReturnValue;             // 0x01DC(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_GetShieldProtectionSpanDegrees_Result;    // 0x01E8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_GetActorForwardVector_ReturnValue;        // 0x01EC(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_GetShieldProtectionSpanDegrees_Result_1;  // 0x01F8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_GreaterEqual_FloatFloat_ReturnValue;      // 0x01FC(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_1FD[0x3];                                      // 0x01FD(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                CallFunc_K2_GetActorLocation_ReturnValue_2;        // 0x0200(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector2D_X;                          // 0x020C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector2D_Y;                          // 0x0210(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Divide_FloatFloat_ReturnValue;            // 0x0214(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UPhysicalMaterial*                      CallFunc_GetSolidShieldPhysicalMaterial_Result;    // 0x0218(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Subtract_VectorVector_ReturnValue;        // 0x0220(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector2D_X_1;                        // 0x022C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector2D_Y_1;                        // 0x0230(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Normal_ReturnValue;                       // 0x0234(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FHitResult                             CallFunc_MakeHitResult_ReturnValue;                // 0x0240(0x0088)(IsPlainOldData, NoDestructor, ContainsInstancedReference)
	float                                         CallFunc_BreakVector2D_X_2;                        // 0x02C8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector2D_Y_2;                        // 0x02CC(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Multiply_VectorFloat_ReturnValue_1;       // 0x02D0(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Add_VectorVector_ReturnValue_1;           // 0x02DC(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_GreaterEqual_FloatFloat_ReturnValue_1;    // 0x02E8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Greater_FloatFloat_ReturnValue;           // 0x02E9(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Greater_FloatFloat_ReturnValue_1;         // 0x02EA(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_2EB[0x1];                                      // 0x02EB(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                CallFunc_Multiply_VectorInt_ReturnValue;           // 0x02EC(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_AngleBetweenNormals_ReturnValue;          // 0x02F8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_LessEqual_FloatFloat_ReturnValue;         // 0x02FC(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_2FD[0x3];                                      // 0x02FD(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class UAttribMod*                             CallFunc_ApplyMod_ReturnValue;                     // 0x0300(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_FMin_ReturnValue;                         // 0x0308(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Multiply_VectorFloat_ReturnValue_2;       // 0x030C(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Multiply_FloatFloat_ReturnValue;          // 0x0318(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Add_VectorVector_ReturnValue_2;           // 0x031C(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Divide_FloatFloat_ReturnValue_1;          // 0x0328(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_FClamp_ReturnValue;                       // 0x032C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Multiply_FloatFloat_ReturnValue_1;        // 0x0330(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Subtract_VectorVector_ReturnValue_1;      // 0x0334(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Dot_VectorVector_ReturnValue;             // 0x0340(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Greater_FloatFloat_ReturnValue_2;         // 0x0344(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_345[0x3];                                      // 0x0345(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector2D                              CallFunc_IntersectRaySphere_OutTMinMax;            // 0x0348(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IntersectRaySphere_ReturnValue;           // 0x0350(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_351[0x3];                                      // 0x0351(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_BreakVector2D_X_3;                        // 0x0354(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector2D_Y_3;                        // 0x0358(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_LessEqual_FloatFloat_ReturnValue_1;       // 0x035C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Greater_FloatFloat_ReturnValue_3;         // 0x035D(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(FUNCLIB_Combat_C_TryDamageSpecificCharacterShieldsAlongRay) == 0x000008, "Wrong alignment on FUNCLIB_Combat_C_TryDamageSpecificCharacterShieldsAlongRay");
static_assert(sizeof(FUNCLIB_Combat_C_TryDamageSpecificCharacterShieldsAlongRay) == 0x000360, "Wrong size on FUNCLIB_Combat_C_TryDamageSpecificCharacterShieldsAlongRay");
static_assert(offsetof(FUNCLIB_Combat_C_TryDamageSpecificCharacterShieldsAlongRay, Character) == 0x000000, "Member 'FUNCLIB_Combat_C_TryDamageSpecificCharacterShieldsAlongRay::Character' has a wrong offset!");
static_assert(offsetof(FUNCLIB_Combat_C_TryDamageSpecificCharacterShieldsAlongRay, TraceLocation) == 0x000008, "Member 'FUNCLIB_Combat_C_TryDamageSpecificCharacterShieldsAlongRay::TraceLocation' has a wrong offset!");
static_assert(offsetof(FUNCLIB_Combat_C_TryDamageSpecificCharacterShieldsAlongRay, TraceDirection) == 0x000014, "Member 'FUNCLIB_Combat_C_TryDamageSpecificCharacterShieldsAlongRay::TraceDirection' has a wrong offset!");
static_assert(offsetof(FUNCLIB_Combat_C_TryDamageSpecificCharacterShieldsAlongRay, TraceDistance) == 0x000020, "Member 'FUNCLIB_Combat_C_TryDamageSpecificCharacterShieldsAlongRay::TraceDistance' has a wrong offset!");
static_assert(offsetof(FUNCLIB_Combat_C_TryDamageSpecificCharacterShieldsAlongRay, ImpactRadius) == 0x000024, "Member 'FUNCLIB_Combat_C_TryDamageSpecificCharacterShieldsAlongRay::ImpactRadius' has a wrong offset!");
static_assert(offsetof(FUNCLIB_Combat_C_TryDamageSpecificCharacterShieldsAlongRay, DamageValue) == 0x000028, "Member 'FUNCLIB_Combat_C_TryDamageSpecificCharacterShieldsAlongRay::DamageValue' has a wrong offset!");
static_assert(offsetof(FUNCLIB_Combat_C_TryDamageSpecificCharacterShieldsAlongRay, TraceHitCharacter) == 0x000030, "Member 'FUNCLIB_Combat_C_TryDamageSpecificCharacterShieldsAlongRay::TraceHitCharacter' has a wrong offset!");
static_assert(offsetof(FUNCLIB_Combat_C_TryDamageSpecificCharacterShieldsAlongRay, __WorldContext) == 0x000038, "Member 'FUNCLIB_Combat_C_TryDamageSpecificCharacterShieldsAlongRay::__WorldContext' has a wrong offset!");
static_assert(offsetof(FUNCLIB_Combat_C_TryDamageSpecificCharacterShieldsAlongRay, ShieldHit) == 0x000040, "Member 'FUNCLIB_Combat_C_TryDamageSpecificCharacterShieldsAlongRay::ShieldHit' has a wrong offset!");
static_assert(offsetof(FUNCLIB_Combat_C_TryDamageSpecificCharacterShieldsAlongRay, BlockingHit) == 0x000041, "Member 'FUNCLIB_Combat_C_TryDamageSpecificCharacterShieldsAlongRay::BlockingHit' has a wrong offset!");
static_assert(offsetof(FUNCLIB_Combat_C_TryDamageSpecificCharacterShieldsAlongRay, HitResult) == 0x000044, "Member 'FUNCLIB_Combat_C_TryDamageSpecificCharacterShieldsAlongRay::HitResult' has a wrong offset!");
static_assert(offsetof(FUNCLIB_Combat_C_TryDamageSpecificCharacterShieldsAlongRay, ImpactNormal) == 0x0000CC, "Member 'FUNCLIB_Combat_C_TryDamageSpecificCharacterShieldsAlongRay::ImpactNormal' has a wrong offset!");
static_assert(offsetof(FUNCLIB_Combat_C_TryDamageSpecificCharacterShieldsAlongRay, ImpactLocation) == 0x0000D8, "Member 'FUNCLIB_Combat_C_TryDamageSpecificCharacterShieldsAlongRay::ImpactLocation' has a wrong offset!");
static_assert(offsetof(FUNCLIB_Combat_C_TryDamageSpecificCharacterShieldsAlongRay, EnergyDamageModData) == 0x0000E8, "Member 'FUNCLIB_Combat_C_TryDamageSpecificCharacterShieldsAlongRay::EnergyDamageModData' has a wrong offset!");
static_assert(offsetof(FUNCLIB_Combat_C_TryDamageSpecificCharacterShieldsAlongRay, RayIntersectInterval) == 0x000188, "Member 'FUNCLIB_Combat_C_TryDamageSpecificCharacterShieldsAlongRay::RayIntersectInterval' has a wrong offset!");
static_assert(offsetof(FUNCLIB_Combat_C_TryDamageSpecificCharacterShieldsAlongRay, ShieldRadius) == 0x000190, "Member 'FUNCLIB_Combat_C_TryDamageSpecificCharacterShieldsAlongRay::ShieldRadius' has a wrong offset!");
static_assert(offsetof(FUNCLIB_Combat_C_TryDamageSpecificCharacterShieldsAlongRay, ScaledDamageToEnergy) == 0x000194, "Member 'FUNCLIB_Combat_C_TryDamageSpecificCharacterShieldsAlongRay::ScaledDamageToEnergy' has a wrong offset!");
static_assert(offsetof(FUNCLIB_Combat_C_TryDamageSpecificCharacterShieldsAlongRay, ShieldPercentage) == 0x000198, "Member 'FUNCLIB_Combat_C_TryDamageSpecificCharacterShieldsAlongRay::ShieldPercentage' has a wrong offset!");
static_assert(offsetof(FUNCLIB_Combat_C_TryDamageSpecificCharacterShieldsAlongRay, CallFunc_EqualEqual_ObjectObject_ReturnValue) == 0x00019C, "Member 'FUNCLIB_Combat_C_TryDamageSpecificCharacterShieldsAlongRay::CallFunc_EqualEqual_ObjectObject_ReturnValue' has a wrong offset!");
static_assert(offsetof(FUNCLIB_Combat_C_TryDamageSpecificCharacterShieldsAlongRay, CallFunc_GetShieldAttrib_ReturnValue) == 0x0001A0, "Member 'FUNCLIB_Combat_C_TryDamageSpecificCharacterShieldsAlongRay::CallFunc_GetShieldAttrib_ReturnValue' has a wrong offset!");
static_assert(offsetof(FUNCLIB_Combat_C_TryDamageSpecificCharacterShieldsAlongRay, CallFunc_GetAttribValue_ReturnValue) == 0x0001A8, "Member 'FUNCLIB_Combat_C_TryDamageSpecificCharacterShieldsAlongRay::CallFunc_GetAttribValue_ReturnValue' has a wrong offset!");
static_assert(offsetof(FUNCLIB_Combat_C_TryDamageSpecificCharacterShieldsAlongRay, CallFunc_K2_GetActorLocation_ReturnValue) == 0x0001AC, "Member 'FUNCLIB_Combat_C_TryDamageSpecificCharacterShieldsAlongRay::CallFunc_K2_GetActorLocation_ReturnValue' has a wrong offset!");
static_assert(offsetof(FUNCLIB_Combat_C_TryDamageSpecificCharacterShieldsAlongRay, CallFunc_GetAttribValue_ReturnValue_1) == 0x0001B8, "Member 'FUNCLIB_Combat_C_TryDamageSpecificCharacterShieldsAlongRay::CallFunc_GetAttribValue_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(FUNCLIB_Combat_C_TryDamageSpecificCharacterShieldsAlongRay, CallFunc_Subtract_FloatFloat_ReturnValue) == 0x0001BC, "Member 'FUNCLIB_Combat_C_TryDamageSpecificCharacterShieldsAlongRay::CallFunc_Subtract_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(FUNCLIB_Combat_C_TryDamageSpecificCharacterShieldsAlongRay, CallFunc_GetShieldRadius_Radius) == 0x0001C0, "Member 'FUNCLIB_Combat_C_TryDamageSpecificCharacterShieldsAlongRay::CallFunc_GetShieldRadius_Radius' has a wrong offset!");
static_assert(offsetof(FUNCLIB_Combat_C_TryDamageSpecificCharacterShieldsAlongRay, CallFunc_K2_GetActorLocation_ReturnValue_1) == 0x0001C4, "Member 'FUNCLIB_Combat_C_TryDamageSpecificCharacterShieldsAlongRay::CallFunc_K2_GetActorLocation_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(FUNCLIB_Combat_C_TryDamageSpecificCharacterShieldsAlongRay, CallFunc_Multiply_VectorFloat_ReturnValue) == 0x0001D0, "Member 'FUNCLIB_Combat_C_TryDamageSpecificCharacterShieldsAlongRay::CallFunc_Multiply_VectorFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(FUNCLIB_Combat_C_TryDamageSpecificCharacterShieldsAlongRay, CallFunc_Add_VectorVector_ReturnValue) == 0x0001DC, "Member 'FUNCLIB_Combat_C_TryDamageSpecificCharacterShieldsAlongRay::CallFunc_Add_VectorVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(FUNCLIB_Combat_C_TryDamageSpecificCharacterShieldsAlongRay, CallFunc_GetShieldProtectionSpanDegrees_Result) == 0x0001E8, "Member 'FUNCLIB_Combat_C_TryDamageSpecificCharacterShieldsAlongRay::CallFunc_GetShieldProtectionSpanDegrees_Result' has a wrong offset!");
static_assert(offsetof(FUNCLIB_Combat_C_TryDamageSpecificCharacterShieldsAlongRay, CallFunc_GetActorForwardVector_ReturnValue) == 0x0001EC, "Member 'FUNCLIB_Combat_C_TryDamageSpecificCharacterShieldsAlongRay::CallFunc_GetActorForwardVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(FUNCLIB_Combat_C_TryDamageSpecificCharacterShieldsAlongRay, CallFunc_GetShieldProtectionSpanDegrees_Result_1) == 0x0001F8, "Member 'FUNCLIB_Combat_C_TryDamageSpecificCharacterShieldsAlongRay::CallFunc_GetShieldProtectionSpanDegrees_Result_1' has a wrong offset!");
static_assert(offsetof(FUNCLIB_Combat_C_TryDamageSpecificCharacterShieldsAlongRay, CallFunc_GreaterEqual_FloatFloat_ReturnValue) == 0x0001FC, "Member 'FUNCLIB_Combat_C_TryDamageSpecificCharacterShieldsAlongRay::CallFunc_GreaterEqual_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(FUNCLIB_Combat_C_TryDamageSpecificCharacterShieldsAlongRay, CallFunc_K2_GetActorLocation_ReturnValue_2) == 0x000200, "Member 'FUNCLIB_Combat_C_TryDamageSpecificCharacterShieldsAlongRay::CallFunc_K2_GetActorLocation_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(FUNCLIB_Combat_C_TryDamageSpecificCharacterShieldsAlongRay, CallFunc_BreakVector2D_X) == 0x00020C, "Member 'FUNCLIB_Combat_C_TryDamageSpecificCharacterShieldsAlongRay::CallFunc_BreakVector2D_X' has a wrong offset!");
static_assert(offsetof(FUNCLIB_Combat_C_TryDamageSpecificCharacterShieldsAlongRay, CallFunc_BreakVector2D_Y) == 0x000210, "Member 'FUNCLIB_Combat_C_TryDamageSpecificCharacterShieldsAlongRay::CallFunc_BreakVector2D_Y' has a wrong offset!");
static_assert(offsetof(FUNCLIB_Combat_C_TryDamageSpecificCharacterShieldsAlongRay, CallFunc_Divide_FloatFloat_ReturnValue) == 0x000214, "Member 'FUNCLIB_Combat_C_TryDamageSpecificCharacterShieldsAlongRay::CallFunc_Divide_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(FUNCLIB_Combat_C_TryDamageSpecificCharacterShieldsAlongRay, CallFunc_GetSolidShieldPhysicalMaterial_Result) == 0x000218, "Member 'FUNCLIB_Combat_C_TryDamageSpecificCharacterShieldsAlongRay::CallFunc_GetSolidShieldPhysicalMaterial_Result' has a wrong offset!");
static_assert(offsetof(FUNCLIB_Combat_C_TryDamageSpecificCharacterShieldsAlongRay, CallFunc_Subtract_VectorVector_ReturnValue) == 0x000220, "Member 'FUNCLIB_Combat_C_TryDamageSpecificCharacterShieldsAlongRay::CallFunc_Subtract_VectorVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(FUNCLIB_Combat_C_TryDamageSpecificCharacterShieldsAlongRay, CallFunc_BreakVector2D_X_1) == 0x00022C, "Member 'FUNCLIB_Combat_C_TryDamageSpecificCharacterShieldsAlongRay::CallFunc_BreakVector2D_X_1' has a wrong offset!");
static_assert(offsetof(FUNCLIB_Combat_C_TryDamageSpecificCharacterShieldsAlongRay, CallFunc_BreakVector2D_Y_1) == 0x000230, "Member 'FUNCLIB_Combat_C_TryDamageSpecificCharacterShieldsAlongRay::CallFunc_BreakVector2D_Y_1' has a wrong offset!");
static_assert(offsetof(FUNCLIB_Combat_C_TryDamageSpecificCharacterShieldsAlongRay, CallFunc_Normal_ReturnValue) == 0x000234, "Member 'FUNCLIB_Combat_C_TryDamageSpecificCharacterShieldsAlongRay::CallFunc_Normal_ReturnValue' has a wrong offset!");
static_assert(offsetof(FUNCLIB_Combat_C_TryDamageSpecificCharacterShieldsAlongRay, CallFunc_MakeHitResult_ReturnValue) == 0x000240, "Member 'FUNCLIB_Combat_C_TryDamageSpecificCharacterShieldsAlongRay::CallFunc_MakeHitResult_ReturnValue' has a wrong offset!");
static_assert(offsetof(FUNCLIB_Combat_C_TryDamageSpecificCharacterShieldsAlongRay, CallFunc_BreakVector2D_X_2) == 0x0002C8, "Member 'FUNCLIB_Combat_C_TryDamageSpecificCharacterShieldsAlongRay::CallFunc_BreakVector2D_X_2' has a wrong offset!");
static_assert(offsetof(FUNCLIB_Combat_C_TryDamageSpecificCharacterShieldsAlongRay, CallFunc_BreakVector2D_Y_2) == 0x0002CC, "Member 'FUNCLIB_Combat_C_TryDamageSpecificCharacterShieldsAlongRay::CallFunc_BreakVector2D_Y_2' has a wrong offset!");
static_assert(offsetof(FUNCLIB_Combat_C_TryDamageSpecificCharacterShieldsAlongRay, CallFunc_Multiply_VectorFloat_ReturnValue_1) == 0x0002D0, "Member 'FUNCLIB_Combat_C_TryDamageSpecificCharacterShieldsAlongRay::CallFunc_Multiply_VectorFloat_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(FUNCLIB_Combat_C_TryDamageSpecificCharacterShieldsAlongRay, CallFunc_Add_VectorVector_ReturnValue_1) == 0x0002DC, "Member 'FUNCLIB_Combat_C_TryDamageSpecificCharacterShieldsAlongRay::CallFunc_Add_VectorVector_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(FUNCLIB_Combat_C_TryDamageSpecificCharacterShieldsAlongRay, CallFunc_GreaterEqual_FloatFloat_ReturnValue_1) == 0x0002E8, "Member 'FUNCLIB_Combat_C_TryDamageSpecificCharacterShieldsAlongRay::CallFunc_GreaterEqual_FloatFloat_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(FUNCLIB_Combat_C_TryDamageSpecificCharacterShieldsAlongRay, CallFunc_Greater_FloatFloat_ReturnValue) == 0x0002E9, "Member 'FUNCLIB_Combat_C_TryDamageSpecificCharacterShieldsAlongRay::CallFunc_Greater_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(FUNCLIB_Combat_C_TryDamageSpecificCharacterShieldsAlongRay, CallFunc_Greater_FloatFloat_ReturnValue_1) == 0x0002EA, "Member 'FUNCLIB_Combat_C_TryDamageSpecificCharacterShieldsAlongRay::CallFunc_Greater_FloatFloat_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(FUNCLIB_Combat_C_TryDamageSpecificCharacterShieldsAlongRay, CallFunc_Multiply_VectorInt_ReturnValue) == 0x0002EC, "Member 'FUNCLIB_Combat_C_TryDamageSpecificCharacterShieldsAlongRay::CallFunc_Multiply_VectorInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(FUNCLIB_Combat_C_TryDamageSpecificCharacterShieldsAlongRay, CallFunc_AngleBetweenNormals_ReturnValue) == 0x0002F8, "Member 'FUNCLIB_Combat_C_TryDamageSpecificCharacterShieldsAlongRay::CallFunc_AngleBetweenNormals_ReturnValue' has a wrong offset!");
static_assert(offsetof(FUNCLIB_Combat_C_TryDamageSpecificCharacterShieldsAlongRay, CallFunc_LessEqual_FloatFloat_ReturnValue) == 0x0002FC, "Member 'FUNCLIB_Combat_C_TryDamageSpecificCharacterShieldsAlongRay::CallFunc_LessEqual_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(FUNCLIB_Combat_C_TryDamageSpecificCharacterShieldsAlongRay, CallFunc_ApplyMod_ReturnValue) == 0x000300, "Member 'FUNCLIB_Combat_C_TryDamageSpecificCharacterShieldsAlongRay::CallFunc_ApplyMod_ReturnValue' has a wrong offset!");
static_assert(offsetof(FUNCLIB_Combat_C_TryDamageSpecificCharacterShieldsAlongRay, CallFunc_FMin_ReturnValue) == 0x000308, "Member 'FUNCLIB_Combat_C_TryDamageSpecificCharacterShieldsAlongRay::CallFunc_FMin_ReturnValue' has a wrong offset!");
static_assert(offsetof(FUNCLIB_Combat_C_TryDamageSpecificCharacterShieldsAlongRay, CallFunc_Multiply_VectorFloat_ReturnValue_2) == 0x00030C, "Member 'FUNCLIB_Combat_C_TryDamageSpecificCharacterShieldsAlongRay::CallFunc_Multiply_VectorFloat_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(FUNCLIB_Combat_C_TryDamageSpecificCharacterShieldsAlongRay, CallFunc_Multiply_FloatFloat_ReturnValue) == 0x000318, "Member 'FUNCLIB_Combat_C_TryDamageSpecificCharacterShieldsAlongRay::CallFunc_Multiply_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(FUNCLIB_Combat_C_TryDamageSpecificCharacterShieldsAlongRay, CallFunc_Add_VectorVector_ReturnValue_2) == 0x00031C, "Member 'FUNCLIB_Combat_C_TryDamageSpecificCharacterShieldsAlongRay::CallFunc_Add_VectorVector_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(FUNCLIB_Combat_C_TryDamageSpecificCharacterShieldsAlongRay, CallFunc_Divide_FloatFloat_ReturnValue_1) == 0x000328, "Member 'FUNCLIB_Combat_C_TryDamageSpecificCharacterShieldsAlongRay::CallFunc_Divide_FloatFloat_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(FUNCLIB_Combat_C_TryDamageSpecificCharacterShieldsAlongRay, CallFunc_FClamp_ReturnValue) == 0x00032C, "Member 'FUNCLIB_Combat_C_TryDamageSpecificCharacterShieldsAlongRay::CallFunc_FClamp_ReturnValue' has a wrong offset!");
static_assert(offsetof(FUNCLIB_Combat_C_TryDamageSpecificCharacterShieldsAlongRay, CallFunc_Multiply_FloatFloat_ReturnValue_1) == 0x000330, "Member 'FUNCLIB_Combat_C_TryDamageSpecificCharacterShieldsAlongRay::CallFunc_Multiply_FloatFloat_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(FUNCLIB_Combat_C_TryDamageSpecificCharacterShieldsAlongRay, CallFunc_Subtract_VectorVector_ReturnValue_1) == 0x000334, "Member 'FUNCLIB_Combat_C_TryDamageSpecificCharacterShieldsAlongRay::CallFunc_Subtract_VectorVector_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(FUNCLIB_Combat_C_TryDamageSpecificCharacterShieldsAlongRay, CallFunc_Dot_VectorVector_ReturnValue) == 0x000340, "Member 'FUNCLIB_Combat_C_TryDamageSpecificCharacterShieldsAlongRay::CallFunc_Dot_VectorVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(FUNCLIB_Combat_C_TryDamageSpecificCharacterShieldsAlongRay, CallFunc_Greater_FloatFloat_ReturnValue_2) == 0x000344, "Member 'FUNCLIB_Combat_C_TryDamageSpecificCharacterShieldsAlongRay::CallFunc_Greater_FloatFloat_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(FUNCLIB_Combat_C_TryDamageSpecificCharacterShieldsAlongRay, CallFunc_IntersectRaySphere_OutTMinMax) == 0x000348, "Member 'FUNCLIB_Combat_C_TryDamageSpecificCharacterShieldsAlongRay::CallFunc_IntersectRaySphere_OutTMinMax' has a wrong offset!");
static_assert(offsetof(FUNCLIB_Combat_C_TryDamageSpecificCharacterShieldsAlongRay, CallFunc_IntersectRaySphere_ReturnValue) == 0x000350, "Member 'FUNCLIB_Combat_C_TryDamageSpecificCharacterShieldsAlongRay::CallFunc_IntersectRaySphere_ReturnValue' has a wrong offset!");
static_assert(offsetof(FUNCLIB_Combat_C_TryDamageSpecificCharacterShieldsAlongRay, CallFunc_BreakVector2D_X_3) == 0x000354, "Member 'FUNCLIB_Combat_C_TryDamageSpecificCharacterShieldsAlongRay::CallFunc_BreakVector2D_X_3' has a wrong offset!");
static_assert(offsetof(FUNCLIB_Combat_C_TryDamageSpecificCharacterShieldsAlongRay, CallFunc_BreakVector2D_Y_3) == 0x000358, "Member 'FUNCLIB_Combat_C_TryDamageSpecificCharacterShieldsAlongRay::CallFunc_BreakVector2D_Y_3' has a wrong offset!");
static_assert(offsetof(FUNCLIB_Combat_C_TryDamageSpecificCharacterShieldsAlongRay, CallFunc_LessEqual_FloatFloat_ReturnValue_1) == 0x00035C, "Member 'FUNCLIB_Combat_C_TryDamageSpecificCharacterShieldsAlongRay::CallFunc_LessEqual_FloatFloat_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(FUNCLIB_Combat_C_TryDamageSpecificCharacterShieldsAlongRay, CallFunc_Greater_FloatFloat_ReturnValue_3) == 0x00035D, "Member 'FUNCLIB_Combat_C_TryDamageSpecificCharacterShieldsAlongRay::CallFunc_Greater_FloatFloat_ReturnValue_3' has a wrong offset!");

// Function FUNCLIB_Combat.FUNCLIB_Combat_C.GetBestAimTargetLocation
// 0x0170 (0x0170 - 0x0000)
struct FUNCLIB_Combat_C_GetBestAimTargetLocation final
{
public:
	struct FVector                                BarrelLocation;                                    // 0x0000(0x000C)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UOBJ_EnemyTarget_C*                     Target;                                            // 0x0010(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UObject*                                __WorldContext;                                    // 0x0018(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                BestTargetLocation;                                // 0x0020(0x000C)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                DetectedPawnLocation;                              // 0x002C(0x000C)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class APAWN_SystemShockCharacter_C*           DetectedPawn;                                      // 0x0038(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Get_Target_Location_Location;             // 0x0040(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsPlayerControlled_ReturnValue;           // 0x004C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_4D[0x3];                                       // 0x004D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                CallFunc_K2_GetActorLocation_ReturnValue;          // 0x0050(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x005C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_5D[0x3];                                       // 0x005D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class APAWN_SystemShockCharacter_C*           CallFunc_GetDetectedPawn_Pawn;                     // 0x0060(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue_1;                    // 0x0068(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_69[0x7];                                       // 0x0069(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTransform                             CallFunc_GetHeadTransform_Transform;               // 0x0070(0x0030)(IsPlainOldData, NoDestructor)
	struct FVector                                CallFunc_BreakTransform_Location;                  // 0x00A0(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               CallFunc_BreakTransform_Rotation;                  // 0x00AC(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FVector                                CallFunc_BreakTransform_Scale;                     // 0x00B8(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_C4[0x4];                                       // 0x00C4(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class AActor*>                         K2Node_MakeArray_Array;                            // 0x00C8(0x0010)(ConstParm, ReferenceParm)
	struct FHitResult                             CallFunc_LineTraceSingle_OutHit;                   // 0x00D8(0x0088)(IsPlainOldData, NoDestructor, ContainsInstancedReference)
	bool                                          CallFunc_LineTraceSingle_ReturnValue;              // 0x0160(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Not_PreBool_ReturnValue;                  // 0x0161(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsValid_ReturnValue_2;                    // 0x0162(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(FUNCLIB_Combat_C_GetBestAimTargetLocation) == 0x000010, "Wrong alignment on FUNCLIB_Combat_C_GetBestAimTargetLocation");
static_assert(sizeof(FUNCLIB_Combat_C_GetBestAimTargetLocation) == 0x000170, "Wrong size on FUNCLIB_Combat_C_GetBestAimTargetLocation");
static_assert(offsetof(FUNCLIB_Combat_C_GetBestAimTargetLocation, BarrelLocation) == 0x000000, "Member 'FUNCLIB_Combat_C_GetBestAimTargetLocation::BarrelLocation' has a wrong offset!");
static_assert(offsetof(FUNCLIB_Combat_C_GetBestAimTargetLocation, Target) == 0x000010, "Member 'FUNCLIB_Combat_C_GetBestAimTargetLocation::Target' has a wrong offset!");
static_assert(offsetof(FUNCLIB_Combat_C_GetBestAimTargetLocation, __WorldContext) == 0x000018, "Member 'FUNCLIB_Combat_C_GetBestAimTargetLocation::__WorldContext' has a wrong offset!");
static_assert(offsetof(FUNCLIB_Combat_C_GetBestAimTargetLocation, BestTargetLocation) == 0x000020, "Member 'FUNCLIB_Combat_C_GetBestAimTargetLocation::BestTargetLocation' has a wrong offset!");
static_assert(offsetof(FUNCLIB_Combat_C_GetBestAimTargetLocation, DetectedPawnLocation) == 0x00002C, "Member 'FUNCLIB_Combat_C_GetBestAimTargetLocation::DetectedPawnLocation' has a wrong offset!");
static_assert(offsetof(FUNCLIB_Combat_C_GetBestAimTargetLocation, DetectedPawn) == 0x000038, "Member 'FUNCLIB_Combat_C_GetBestAimTargetLocation::DetectedPawn' has a wrong offset!");
static_assert(offsetof(FUNCLIB_Combat_C_GetBestAimTargetLocation, CallFunc_Get_Target_Location_Location) == 0x000040, "Member 'FUNCLIB_Combat_C_GetBestAimTargetLocation::CallFunc_Get_Target_Location_Location' has a wrong offset!");
static_assert(offsetof(FUNCLIB_Combat_C_GetBestAimTargetLocation, CallFunc_IsPlayerControlled_ReturnValue) == 0x00004C, "Member 'FUNCLIB_Combat_C_GetBestAimTargetLocation::CallFunc_IsPlayerControlled_ReturnValue' has a wrong offset!");
static_assert(offsetof(FUNCLIB_Combat_C_GetBestAimTargetLocation, CallFunc_K2_GetActorLocation_ReturnValue) == 0x000050, "Member 'FUNCLIB_Combat_C_GetBestAimTargetLocation::CallFunc_K2_GetActorLocation_ReturnValue' has a wrong offset!");
static_assert(offsetof(FUNCLIB_Combat_C_GetBestAimTargetLocation, CallFunc_IsValid_ReturnValue) == 0x00005C, "Member 'FUNCLIB_Combat_C_GetBestAimTargetLocation::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(FUNCLIB_Combat_C_GetBestAimTargetLocation, CallFunc_GetDetectedPawn_Pawn) == 0x000060, "Member 'FUNCLIB_Combat_C_GetBestAimTargetLocation::CallFunc_GetDetectedPawn_Pawn' has a wrong offset!");
static_assert(offsetof(FUNCLIB_Combat_C_GetBestAimTargetLocation, CallFunc_IsValid_ReturnValue_1) == 0x000068, "Member 'FUNCLIB_Combat_C_GetBestAimTargetLocation::CallFunc_IsValid_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(FUNCLIB_Combat_C_GetBestAimTargetLocation, CallFunc_GetHeadTransform_Transform) == 0x000070, "Member 'FUNCLIB_Combat_C_GetBestAimTargetLocation::CallFunc_GetHeadTransform_Transform' has a wrong offset!");
static_assert(offsetof(FUNCLIB_Combat_C_GetBestAimTargetLocation, CallFunc_BreakTransform_Location) == 0x0000A0, "Member 'FUNCLIB_Combat_C_GetBestAimTargetLocation::CallFunc_BreakTransform_Location' has a wrong offset!");
static_assert(offsetof(FUNCLIB_Combat_C_GetBestAimTargetLocation, CallFunc_BreakTransform_Rotation) == 0x0000AC, "Member 'FUNCLIB_Combat_C_GetBestAimTargetLocation::CallFunc_BreakTransform_Rotation' has a wrong offset!");
static_assert(offsetof(FUNCLIB_Combat_C_GetBestAimTargetLocation, CallFunc_BreakTransform_Scale) == 0x0000B8, "Member 'FUNCLIB_Combat_C_GetBestAimTargetLocation::CallFunc_BreakTransform_Scale' has a wrong offset!");
static_assert(offsetof(FUNCLIB_Combat_C_GetBestAimTargetLocation, K2Node_MakeArray_Array) == 0x0000C8, "Member 'FUNCLIB_Combat_C_GetBestAimTargetLocation::K2Node_MakeArray_Array' has a wrong offset!");
static_assert(offsetof(FUNCLIB_Combat_C_GetBestAimTargetLocation, CallFunc_LineTraceSingle_OutHit) == 0x0000D8, "Member 'FUNCLIB_Combat_C_GetBestAimTargetLocation::CallFunc_LineTraceSingle_OutHit' has a wrong offset!");
static_assert(offsetof(FUNCLIB_Combat_C_GetBestAimTargetLocation, CallFunc_LineTraceSingle_ReturnValue) == 0x000160, "Member 'FUNCLIB_Combat_C_GetBestAimTargetLocation::CallFunc_LineTraceSingle_ReturnValue' has a wrong offset!");
static_assert(offsetof(FUNCLIB_Combat_C_GetBestAimTargetLocation, CallFunc_Not_PreBool_ReturnValue) == 0x000161, "Member 'FUNCLIB_Combat_C_GetBestAimTargetLocation::CallFunc_Not_PreBool_ReturnValue' has a wrong offset!");
static_assert(offsetof(FUNCLIB_Combat_C_GetBestAimTargetLocation, CallFunc_IsValid_ReturnValue_2) == 0x000162, "Member 'FUNCLIB_Combat_C_GetBestAimTargetLocation::CallFunc_IsValid_ReturnValue_2' has a wrong offset!");

// Function FUNCLIB_Combat.FUNCLIB_Combat_C.ClampDirectionInCone
// 0x0060 (0x0060 - 0x0000)
struct FUNCLIB_Combat_C_ClampDirectionInCone final
{
public:
	struct FVector                                TargetDirection;                                   // 0x0000(0x000C)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                ConeDirection;                                     // 0x000C(0x000C)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         ConeAngle;                                         // 0x0018(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1C[0x4];                                       // 0x001C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UObject*                                __WorldContext;                                    // 0x0020(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                ClampedDirection;                                  // 0x0028(0x000C)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Dot_VectorVector_ReturnValue;             // 0x0034(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_SignOfFloat_ReturnValue;                  // 0x0038(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Cross_VectorVector_ReturnValue;           // 0x003C(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Multiply_FloatFloat_ReturnValue;          // 0x0048(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_RotateAngleAxis_ReturnValue;              // 0x004C(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_AngleBetweenNormals_ReturnValue;          // 0x0058(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_LessEqual_FloatFloat_ReturnValue;         // 0x005C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(FUNCLIB_Combat_C_ClampDirectionInCone) == 0x000008, "Wrong alignment on FUNCLIB_Combat_C_ClampDirectionInCone");
static_assert(sizeof(FUNCLIB_Combat_C_ClampDirectionInCone) == 0x000060, "Wrong size on FUNCLIB_Combat_C_ClampDirectionInCone");
static_assert(offsetof(FUNCLIB_Combat_C_ClampDirectionInCone, TargetDirection) == 0x000000, "Member 'FUNCLIB_Combat_C_ClampDirectionInCone::TargetDirection' has a wrong offset!");
static_assert(offsetof(FUNCLIB_Combat_C_ClampDirectionInCone, ConeDirection) == 0x00000C, "Member 'FUNCLIB_Combat_C_ClampDirectionInCone::ConeDirection' has a wrong offset!");
static_assert(offsetof(FUNCLIB_Combat_C_ClampDirectionInCone, ConeAngle) == 0x000018, "Member 'FUNCLIB_Combat_C_ClampDirectionInCone::ConeAngle' has a wrong offset!");
static_assert(offsetof(FUNCLIB_Combat_C_ClampDirectionInCone, __WorldContext) == 0x000020, "Member 'FUNCLIB_Combat_C_ClampDirectionInCone::__WorldContext' has a wrong offset!");
static_assert(offsetof(FUNCLIB_Combat_C_ClampDirectionInCone, ClampedDirection) == 0x000028, "Member 'FUNCLIB_Combat_C_ClampDirectionInCone::ClampedDirection' has a wrong offset!");
static_assert(offsetof(FUNCLIB_Combat_C_ClampDirectionInCone, CallFunc_Dot_VectorVector_ReturnValue) == 0x000034, "Member 'FUNCLIB_Combat_C_ClampDirectionInCone::CallFunc_Dot_VectorVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(FUNCLIB_Combat_C_ClampDirectionInCone, CallFunc_SignOfFloat_ReturnValue) == 0x000038, "Member 'FUNCLIB_Combat_C_ClampDirectionInCone::CallFunc_SignOfFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(FUNCLIB_Combat_C_ClampDirectionInCone, CallFunc_Cross_VectorVector_ReturnValue) == 0x00003C, "Member 'FUNCLIB_Combat_C_ClampDirectionInCone::CallFunc_Cross_VectorVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(FUNCLIB_Combat_C_ClampDirectionInCone, CallFunc_Multiply_FloatFloat_ReturnValue) == 0x000048, "Member 'FUNCLIB_Combat_C_ClampDirectionInCone::CallFunc_Multiply_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(FUNCLIB_Combat_C_ClampDirectionInCone, CallFunc_RotateAngleAxis_ReturnValue) == 0x00004C, "Member 'FUNCLIB_Combat_C_ClampDirectionInCone::CallFunc_RotateAngleAxis_ReturnValue' has a wrong offset!");
static_assert(offsetof(FUNCLIB_Combat_C_ClampDirectionInCone, CallFunc_AngleBetweenNormals_ReturnValue) == 0x000058, "Member 'FUNCLIB_Combat_C_ClampDirectionInCone::CallFunc_AngleBetweenNormals_ReturnValue' has a wrong offset!");
static_assert(offsetof(FUNCLIB_Combat_C_ClampDirectionInCone, CallFunc_LessEqual_FloatFloat_ReturnValue) == 0x00005C, "Member 'FUNCLIB_Combat_C_ClampDirectionInCone::CallFunc_LessEqual_FloatFloat_ReturnValue' has a wrong offset!");

}

