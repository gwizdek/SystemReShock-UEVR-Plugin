#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: ITEM_WeaponModKit_Base

#include "Basic.hpp"

#include "CoreUObject_structs.hpp"
#include "Engine_structs.hpp"
#include "STRUCT_WeaponMode_structs.hpp"


namespace SDK::Params
{

// Function ITEM_WeaponModKit_Base.ITEM_WeaponModKit_Base_C.ExecuteUbergraph_ITEM_WeaponModKit_Base
// 0x0018 (0x0018 - 0x0000)
struct ITEM_WeaponModKit_Base_C_ExecuteUbergraph_ITEM_WeaponModKit_Base final
{
public:
	int32                                         EntryPoint;                                        // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UWIDGET_PlayerHUD_C*                    K2Node_CustomEvent_NeuralHUD;                      // 0x0008(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0010(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(ITEM_WeaponModKit_Base_C_ExecuteUbergraph_ITEM_WeaponModKit_Base) == 0x000008, "Wrong alignment on ITEM_WeaponModKit_Base_C_ExecuteUbergraph_ITEM_WeaponModKit_Base");
static_assert(sizeof(ITEM_WeaponModKit_Base_C_ExecuteUbergraph_ITEM_WeaponModKit_Base) == 0x000018, "Wrong size on ITEM_WeaponModKit_Base_C_ExecuteUbergraph_ITEM_WeaponModKit_Base");
static_assert(offsetof(ITEM_WeaponModKit_Base_C_ExecuteUbergraph_ITEM_WeaponModKit_Base, EntryPoint) == 0x000000, "Member 'ITEM_WeaponModKit_Base_C_ExecuteUbergraph_ITEM_WeaponModKit_Base::EntryPoint' has a wrong offset!");
static_assert(offsetof(ITEM_WeaponModKit_Base_C_ExecuteUbergraph_ITEM_WeaponModKit_Base, K2Node_CustomEvent_NeuralHUD) == 0x000008, "Member 'ITEM_WeaponModKit_Base_C_ExecuteUbergraph_ITEM_WeaponModKit_Base::K2Node_CustomEvent_NeuralHUD' has a wrong offset!");
static_assert(offsetof(ITEM_WeaponModKit_Base_C_ExecuteUbergraph_ITEM_WeaponModKit_Base, CallFunc_IsValid_ReturnValue) == 0x000010, "Member 'ITEM_WeaponModKit_Base_C_ExecuteUbergraph_ITEM_WeaponModKit_Base::CallFunc_IsValid_ReturnValue' has a wrong offset!");

// Function ITEM_WeaponModKit_Base.ITEM_WeaponModKit_Base_C.HandleDeferredCursorUpdate
// 0x0008 (0x0008 - 0x0000)
struct ITEM_WeaponModKit_Base_C_HandleDeferredCursorUpdate final
{
public:
	class UWIDGET_PlayerHUD_C*                    NeuralHUD;                                         // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(ITEM_WeaponModKit_Base_C_HandleDeferredCursorUpdate) == 0x000008, "Wrong alignment on ITEM_WeaponModKit_Base_C_HandleDeferredCursorUpdate");
static_assert(sizeof(ITEM_WeaponModKit_Base_C_HandleDeferredCursorUpdate) == 0x000008, "Wrong size on ITEM_WeaponModKit_Base_C_HandleDeferredCursorUpdate");
static_assert(offsetof(ITEM_WeaponModKit_Base_C_HandleDeferredCursorUpdate, NeuralHUD) == 0x000000, "Member 'ITEM_WeaponModKit_Base_C_HandleDeferredCursorUpdate::NeuralHUD' has a wrong offset!");

// Function ITEM_WeaponModKit_Base.ITEM_WeaponModKit_Base_C.CanModifyWeapon
// 0x0060 (0x0060 - 0x0000)
struct ITEM_WeaponModKit_Base_C_CanModifyWeapon final
{
public:
	class UITEM_WeaponBase_C*                     Weapon;                                            // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Result;                                            // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0009(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_A[0x6];                                        // 0x000A(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class UClass*                                 CallFunc_GetObjectClass_ReturnValue;               // 0x0010(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_HasInstalledModKitClass_Result;           // 0x0018(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_19[0x7];                                       // 0x0019(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UClass*                                 CallFunc_GetObjectClass_ReturnValue_1;             // 0x0020(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Not_PreBool_ReturnValue;                  // 0x0028(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_29[0x7];                                       // 0x0029(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TSoftClassPtr<class UClass>                   CallFunc_Conv_ClassToSoftClassReference_ReturnValue; // 0x0030(0x0028)(UObjectWrapper, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_SoftClassReference_ReturnValue; // 0x0058(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(ITEM_WeaponModKit_Base_C_CanModifyWeapon) == 0x000008, "Wrong alignment on ITEM_WeaponModKit_Base_C_CanModifyWeapon");
static_assert(sizeof(ITEM_WeaponModKit_Base_C_CanModifyWeapon) == 0x000060, "Wrong size on ITEM_WeaponModKit_Base_C_CanModifyWeapon");
static_assert(offsetof(ITEM_WeaponModKit_Base_C_CanModifyWeapon, Weapon) == 0x000000, "Member 'ITEM_WeaponModKit_Base_C_CanModifyWeapon::Weapon' has a wrong offset!");
static_assert(offsetof(ITEM_WeaponModKit_Base_C_CanModifyWeapon, Result) == 0x000008, "Member 'ITEM_WeaponModKit_Base_C_CanModifyWeapon::Result' has a wrong offset!");
static_assert(offsetof(ITEM_WeaponModKit_Base_C_CanModifyWeapon, CallFunc_IsValid_ReturnValue) == 0x000009, "Member 'ITEM_WeaponModKit_Base_C_CanModifyWeapon::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(ITEM_WeaponModKit_Base_C_CanModifyWeapon, CallFunc_GetObjectClass_ReturnValue) == 0x000010, "Member 'ITEM_WeaponModKit_Base_C_CanModifyWeapon::CallFunc_GetObjectClass_ReturnValue' has a wrong offset!");
static_assert(offsetof(ITEM_WeaponModKit_Base_C_CanModifyWeapon, CallFunc_HasInstalledModKitClass_Result) == 0x000018, "Member 'ITEM_WeaponModKit_Base_C_CanModifyWeapon::CallFunc_HasInstalledModKitClass_Result' has a wrong offset!");
static_assert(offsetof(ITEM_WeaponModKit_Base_C_CanModifyWeapon, CallFunc_GetObjectClass_ReturnValue_1) == 0x000020, "Member 'ITEM_WeaponModKit_Base_C_CanModifyWeapon::CallFunc_GetObjectClass_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(ITEM_WeaponModKit_Base_C_CanModifyWeapon, CallFunc_Not_PreBool_ReturnValue) == 0x000028, "Member 'ITEM_WeaponModKit_Base_C_CanModifyWeapon::CallFunc_Not_PreBool_ReturnValue' has a wrong offset!");
static_assert(offsetof(ITEM_WeaponModKit_Base_C_CanModifyWeapon, CallFunc_Conv_ClassToSoftClassReference_ReturnValue) == 0x000030, "Member 'ITEM_WeaponModKit_Base_C_CanModifyWeapon::CallFunc_Conv_ClassToSoftClassReference_ReturnValue' has a wrong offset!");
static_assert(offsetof(ITEM_WeaponModKit_Base_C_CanModifyWeapon, CallFunc_EqualEqual_SoftClassReference_ReturnValue) == 0x000058, "Member 'ITEM_WeaponModKit_Base_C_CanModifyWeapon::CallFunc_EqualEqual_SoftClassReference_ReturnValue' has a wrong offset!");

// Function ITEM_WeaponModKit_Base.ITEM_WeaponModKit_Base_C.TryInstallOnSpecificWeapon
// 0x0068 (0x0068 - 0x0000)
struct ITEM_WeaponModKit_Base_C_TryInstallOnSpecificWeapon final
{
public:
	class UITEM_WeaponBase_C*                     Weapon;                                            // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Result;                                            // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class APAWN_Hacker_Simple_C*                  HackerPawn;                                        // 0x0010(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class APAWN_SystemShockCharacter_C*           CharacterOwner;                                    // 0x0018(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_CanModifyWeapon_Result;                   // 0x0020(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_AreTutorialsEnabled_TutorialsEnabled;     // 0x0021(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_CanActivate_Result;                       // 0x0022(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_NotEqual_NameName_ReturnValue;            // 0x0023(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_24[0x4];                                       // 0x0024(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UWIDGET_PlayerHUD_C*                    K2Node_DynamicCast_AsWIDGET_Player_HUD;            // 0x0028(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0030(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_ShowMultiFunctionDisplay_MainDisplayVisible; // 0x0031(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_32[0x6];                                       // 0x0032(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class APAWN_Hacker_Simple_C*                  K2Node_DynamicCast_AsPAWN_Hacker_Simple;           // 0x0038(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess_1;                     // 0x0040(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_41[0x7];                                       // 0x0041(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class APAWN_SystemShockCharacter_C*           CallFunc_GetOwnerCharacter_Character;              // 0x0048(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UITEM_ConsumableBase_C*                 CallFunc_RemoveConsumableFromInventory_RemovedItem; // 0x0050(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UITEM_WeaponModKit_Base_C*              K2Node_DynamicCast_AsITEM_Weapon_Mod_Kit_Base;     // 0x0058(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess_2;                     // 0x0060(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_TryInstallWeaponModKit_Result;            // 0x0061(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(ITEM_WeaponModKit_Base_C_TryInstallOnSpecificWeapon) == 0x000008, "Wrong alignment on ITEM_WeaponModKit_Base_C_TryInstallOnSpecificWeapon");
static_assert(sizeof(ITEM_WeaponModKit_Base_C_TryInstallOnSpecificWeapon) == 0x000068, "Wrong size on ITEM_WeaponModKit_Base_C_TryInstallOnSpecificWeapon");
static_assert(offsetof(ITEM_WeaponModKit_Base_C_TryInstallOnSpecificWeapon, Weapon) == 0x000000, "Member 'ITEM_WeaponModKit_Base_C_TryInstallOnSpecificWeapon::Weapon' has a wrong offset!");
static_assert(offsetof(ITEM_WeaponModKit_Base_C_TryInstallOnSpecificWeapon, Result) == 0x000008, "Member 'ITEM_WeaponModKit_Base_C_TryInstallOnSpecificWeapon::Result' has a wrong offset!");
static_assert(offsetof(ITEM_WeaponModKit_Base_C_TryInstallOnSpecificWeapon, HackerPawn) == 0x000010, "Member 'ITEM_WeaponModKit_Base_C_TryInstallOnSpecificWeapon::HackerPawn' has a wrong offset!");
static_assert(offsetof(ITEM_WeaponModKit_Base_C_TryInstallOnSpecificWeapon, CharacterOwner) == 0x000018, "Member 'ITEM_WeaponModKit_Base_C_TryInstallOnSpecificWeapon::CharacterOwner' has a wrong offset!");
static_assert(offsetof(ITEM_WeaponModKit_Base_C_TryInstallOnSpecificWeapon, CallFunc_CanModifyWeapon_Result) == 0x000020, "Member 'ITEM_WeaponModKit_Base_C_TryInstallOnSpecificWeapon::CallFunc_CanModifyWeapon_Result' has a wrong offset!");
static_assert(offsetof(ITEM_WeaponModKit_Base_C_TryInstallOnSpecificWeapon, CallFunc_AreTutorialsEnabled_TutorialsEnabled) == 0x000021, "Member 'ITEM_WeaponModKit_Base_C_TryInstallOnSpecificWeapon::CallFunc_AreTutorialsEnabled_TutorialsEnabled' has a wrong offset!");
static_assert(offsetof(ITEM_WeaponModKit_Base_C_TryInstallOnSpecificWeapon, CallFunc_CanActivate_Result) == 0x000022, "Member 'ITEM_WeaponModKit_Base_C_TryInstallOnSpecificWeapon::CallFunc_CanActivate_Result' has a wrong offset!");
static_assert(offsetof(ITEM_WeaponModKit_Base_C_TryInstallOnSpecificWeapon, CallFunc_NotEqual_NameName_ReturnValue) == 0x000023, "Member 'ITEM_WeaponModKit_Base_C_TryInstallOnSpecificWeapon::CallFunc_NotEqual_NameName_ReturnValue' has a wrong offset!");
static_assert(offsetof(ITEM_WeaponModKit_Base_C_TryInstallOnSpecificWeapon, K2Node_DynamicCast_AsWIDGET_Player_HUD) == 0x000028, "Member 'ITEM_WeaponModKit_Base_C_TryInstallOnSpecificWeapon::K2Node_DynamicCast_AsWIDGET_Player_HUD' has a wrong offset!");
static_assert(offsetof(ITEM_WeaponModKit_Base_C_TryInstallOnSpecificWeapon, K2Node_DynamicCast_bSuccess) == 0x000030, "Member 'ITEM_WeaponModKit_Base_C_TryInstallOnSpecificWeapon::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(ITEM_WeaponModKit_Base_C_TryInstallOnSpecificWeapon, CallFunc_ShowMultiFunctionDisplay_MainDisplayVisible) == 0x000031, "Member 'ITEM_WeaponModKit_Base_C_TryInstallOnSpecificWeapon::CallFunc_ShowMultiFunctionDisplay_MainDisplayVisible' has a wrong offset!");
static_assert(offsetof(ITEM_WeaponModKit_Base_C_TryInstallOnSpecificWeapon, K2Node_DynamicCast_AsPAWN_Hacker_Simple) == 0x000038, "Member 'ITEM_WeaponModKit_Base_C_TryInstallOnSpecificWeapon::K2Node_DynamicCast_AsPAWN_Hacker_Simple' has a wrong offset!");
static_assert(offsetof(ITEM_WeaponModKit_Base_C_TryInstallOnSpecificWeapon, K2Node_DynamicCast_bSuccess_1) == 0x000040, "Member 'ITEM_WeaponModKit_Base_C_TryInstallOnSpecificWeapon::K2Node_DynamicCast_bSuccess_1' has a wrong offset!");
static_assert(offsetof(ITEM_WeaponModKit_Base_C_TryInstallOnSpecificWeapon, CallFunc_GetOwnerCharacter_Character) == 0x000048, "Member 'ITEM_WeaponModKit_Base_C_TryInstallOnSpecificWeapon::CallFunc_GetOwnerCharacter_Character' has a wrong offset!");
static_assert(offsetof(ITEM_WeaponModKit_Base_C_TryInstallOnSpecificWeapon, CallFunc_RemoveConsumableFromInventory_RemovedItem) == 0x000050, "Member 'ITEM_WeaponModKit_Base_C_TryInstallOnSpecificWeapon::CallFunc_RemoveConsumableFromInventory_RemovedItem' has a wrong offset!");
static_assert(offsetof(ITEM_WeaponModKit_Base_C_TryInstallOnSpecificWeapon, K2Node_DynamicCast_AsITEM_Weapon_Mod_Kit_Base) == 0x000058, "Member 'ITEM_WeaponModKit_Base_C_TryInstallOnSpecificWeapon::K2Node_DynamicCast_AsITEM_Weapon_Mod_Kit_Base' has a wrong offset!");
static_assert(offsetof(ITEM_WeaponModKit_Base_C_TryInstallOnSpecificWeapon, K2Node_DynamicCast_bSuccess_2) == 0x000060, "Member 'ITEM_WeaponModKit_Base_C_TryInstallOnSpecificWeapon::K2Node_DynamicCast_bSuccess_2' has a wrong offset!");
static_assert(offsetof(ITEM_WeaponModKit_Base_C_TryInstallOnSpecificWeapon, CallFunc_TryInstallWeaponModKit_Result) == 0x000061, "Member 'ITEM_WeaponModKit_Base_C_TryInstallOnSpecificWeapon::CallFunc_TryInstallWeaponModKit_Result' has a wrong offset!");

// Function ITEM_WeaponModKit_Base.ITEM_WeaponModKit_Base_C.TryApplyWeaponModifications
// 0x0010 (0x0010 - 0x0000)
struct ITEM_WeaponModKit_Base_C_TryApplyWeaponModifications final
{
public:
	class UITEM_WeaponBase_C*                     Weapon;                                            // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          DuringInitialization;                              // 0x0008(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Result;                                            // 0x0009(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_CanModifyWeapon_Result;                   // 0x000A(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(ITEM_WeaponModKit_Base_C_TryApplyWeaponModifications) == 0x000008, "Wrong alignment on ITEM_WeaponModKit_Base_C_TryApplyWeaponModifications");
static_assert(sizeof(ITEM_WeaponModKit_Base_C_TryApplyWeaponModifications) == 0x000010, "Wrong size on ITEM_WeaponModKit_Base_C_TryApplyWeaponModifications");
static_assert(offsetof(ITEM_WeaponModKit_Base_C_TryApplyWeaponModifications, Weapon) == 0x000000, "Member 'ITEM_WeaponModKit_Base_C_TryApplyWeaponModifications::Weapon' has a wrong offset!");
static_assert(offsetof(ITEM_WeaponModKit_Base_C_TryApplyWeaponModifications, DuringInitialization) == 0x000008, "Member 'ITEM_WeaponModKit_Base_C_TryApplyWeaponModifications::DuringInitialization' has a wrong offset!");
static_assert(offsetof(ITEM_WeaponModKit_Base_C_TryApplyWeaponModifications, Result) == 0x000009, "Member 'ITEM_WeaponModKit_Base_C_TryApplyWeaponModifications::Result' has a wrong offset!");
static_assert(offsetof(ITEM_WeaponModKit_Base_C_TryApplyWeaponModifications, CallFunc_CanModifyWeapon_Result) == 0x00000A, "Member 'ITEM_WeaponModKit_Base_C_TryApplyWeaponModifications::CallFunc_CanModifyWeapon_Result' has a wrong offset!");

// Function ITEM_WeaponModKit_Base.ITEM_WeaponModKit_Base_C.TryModifyPickupAppearance
// 0x0010 (0x0010 - 0x0000)
struct ITEM_WeaponModKit_Base_C_TryModifyPickupAppearance final
{
public:
	class APICKUP_Weapon_Base_C*                  WeaponPickup;                                      // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Result;                                            // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(ITEM_WeaponModKit_Base_C_TryModifyPickupAppearance) == 0x000008, "Wrong alignment on ITEM_WeaponModKit_Base_C_TryModifyPickupAppearance");
static_assert(sizeof(ITEM_WeaponModKit_Base_C_TryModifyPickupAppearance) == 0x000010, "Wrong size on ITEM_WeaponModKit_Base_C_TryModifyPickupAppearance");
static_assert(offsetof(ITEM_WeaponModKit_Base_C_TryModifyPickupAppearance, WeaponPickup) == 0x000000, "Member 'ITEM_WeaponModKit_Base_C_TryModifyPickupAppearance::WeaponPickup' has a wrong offset!");
static_assert(offsetof(ITEM_WeaponModKit_Base_C_TryModifyPickupAppearance, Result) == 0x000008, "Member 'ITEM_WeaponModKit_Base_C_TryModifyPickupAppearance::Result' has a wrong offset!");

// Function ITEM_WeaponModKit_Base.ITEM_WeaponModKit_Base_C.TrySetWeaponItemGridSize
// 0x0098 (0x0098 - 0x0000)
struct ITEM_WeaponModKit_Base_C_TrySetWeaponItemGridSize final
{
public:
	class UITEM_WeaponBase_C*                     Weapon;                                            // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FIntPoint                              NewSize;                                           // 0x0008(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          DuringInitialization;                              // 0x0010(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Result;                                            // 0x0011(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_12[0x6];                                       // 0x0012(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class UWIDGET_PlayerHUD_C*                    NeuralHUD;                                         // 0x0018(0x0008)(Edit, BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class APAWN_Hacker_Implant_C*                 OwnerHacker;                                       // 0x0020(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         WeaponSlotIndex;                                   // 0x0028(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_2C[0x4];                                       // 0x002C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UInventoryBag_C*                        WeaponBag;                                         // 0x0030(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0038(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_39[0x7];                                       // 0x0039(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UWIDGET_PlayerHUD_C*                    CallFunc_GetNeuralHUD_Result;                      // 0x0040(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_TryDropAndPushItem_Result;                // 0x0048(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_49[0x7];                                       // 0x0049(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UCOMP_Inventory_C*                      CallFunc_GetInventory_Inventory;                   // 0x0050(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 CallFunc_GetOwner_ReturnValue;                     // 0x0058(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class APAWN_Hacker_Implant_C*                 K2Node_DynamicCast_AsPAWN_Hacker_Implant;          // 0x0060(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0068(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_SetItemGridSize_Result;                   // 0x0069(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_6A[0x6];                                       // 0x006A(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class UITEM_Base_C*                           CallFunc_RemoveItem_RemovedItem;                   // 0x0070(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue_1;                    // 0x0078(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_79[0x3];                                       // 0x0079(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FIntPoint                              CallFunc_GetRotatedGridSize_Result;                // 0x007C(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_GetSlotIndex_Result;                      // 0x0084(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UInventoryBag_C*                        CallFunc_GetBag_Result;                            // 0x0088(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_SetItemGridSize_Result_1;                 // 0x0090(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_AddItemToSlot_Result;                     // 0x0091(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_HasSlotSpaceForItemWithSize_Result;       // 0x0092(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_TryPickupItemFromGround_Result;           // 0x0093(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(ITEM_WeaponModKit_Base_C_TrySetWeaponItemGridSize) == 0x000008, "Wrong alignment on ITEM_WeaponModKit_Base_C_TrySetWeaponItemGridSize");
static_assert(sizeof(ITEM_WeaponModKit_Base_C_TrySetWeaponItemGridSize) == 0x000098, "Wrong size on ITEM_WeaponModKit_Base_C_TrySetWeaponItemGridSize");
static_assert(offsetof(ITEM_WeaponModKit_Base_C_TrySetWeaponItemGridSize, Weapon) == 0x000000, "Member 'ITEM_WeaponModKit_Base_C_TrySetWeaponItemGridSize::Weapon' has a wrong offset!");
static_assert(offsetof(ITEM_WeaponModKit_Base_C_TrySetWeaponItemGridSize, NewSize) == 0x000008, "Member 'ITEM_WeaponModKit_Base_C_TrySetWeaponItemGridSize::NewSize' has a wrong offset!");
static_assert(offsetof(ITEM_WeaponModKit_Base_C_TrySetWeaponItemGridSize, DuringInitialization) == 0x000010, "Member 'ITEM_WeaponModKit_Base_C_TrySetWeaponItemGridSize::DuringInitialization' has a wrong offset!");
static_assert(offsetof(ITEM_WeaponModKit_Base_C_TrySetWeaponItemGridSize, Result) == 0x000011, "Member 'ITEM_WeaponModKit_Base_C_TrySetWeaponItemGridSize::Result' has a wrong offset!");
static_assert(offsetof(ITEM_WeaponModKit_Base_C_TrySetWeaponItemGridSize, NeuralHUD) == 0x000018, "Member 'ITEM_WeaponModKit_Base_C_TrySetWeaponItemGridSize::NeuralHUD' has a wrong offset!");
static_assert(offsetof(ITEM_WeaponModKit_Base_C_TrySetWeaponItemGridSize, OwnerHacker) == 0x000020, "Member 'ITEM_WeaponModKit_Base_C_TrySetWeaponItemGridSize::OwnerHacker' has a wrong offset!");
static_assert(offsetof(ITEM_WeaponModKit_Base_C_TrySetWeaponItemGridSize, WeaponSlotIndex) == 0x000028, "Member 'ITEM_WeaponModKit_Base_C_TrySetWeaponItemGridSize::WeaponSlotIndex' has a wrong offset!");
static_assert(offsetof(ITEM_WeaponModKit_Base_C_TrySetWeaponItemGridSize, WeaponBag) == 0x000030, "Member 'ITEM_WeaponModKit_Base_C_TrySetWeaponItemGridSize::WeaponBag' has a wrong offset!");
static_assert(offsetof(ITEM_WeaponModKit_Base_C_TrySetWeaponItemGridSize, CallFunc_IsValid_ReturnValue) == 0x000038, "Member 'ITEM_WeaponModKit_Base_C_TrySetWeaponItemGridSize::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(ITEM_WeaponModKit_Base_C_TrySetWeaponItemGridSize, CallFunc_GetNeuralHUD_Result) == 0x000040, "Member 'ITEM_WeaponModKit_Base_C_TrySetWeaponItemGridSize::CallFunc_GetNeuralHUD_Result' has a wrong offset!");
static_assert(offsetof(ITEM_WeaponModKit_Base_C_TrySetWeaponItemGridSize, CallFunc_TryDropAndPushItem_Result) == 0x000048, "Member 'ITEM_WeaponModKit_Base_C_TrySetWeaponItemGridSize::CallFunc_TryDropAndPushItem_Result' has a wrong offset!");
static_assert(offsetof(ITEM_WeaponModKit_Base_C_TrySetWeaponItemGridSize, CallFunc_GetInventory_Inventory) == 0x000050, "Member 'ITEM_WeaponModKit_Base_C_TrySetWeaponItemGridSize::CallFunc_GetInventory_Inventory' has a wrong offset!");
static_assert(offsetof(ITEM_WeaponModKit_Base_C_TrySetWeaponItemGridSize, CallFunc_GetOwner_ReturnValue) == 0x000058, "Member 'ITEM_WeaponModKit_Base_C_TrySetWeaponItemGridSize::CallFunc_GetOwner_ReturnValue' has a wrong offset!");
static_assert(offsetof(ITEM_WeaponModKit_Base_C_TrySetWeaponItemGridSize, K2Node_DynamicCast_AsPAWN_Hacker_Implant) == 0x000060, "Member 'ITEM_WeaponModKit_Base_C_TrySetWeaponItemGridSize::K2Node_DynamicCast_AsPAWN_Hacker_Implant' has a wrong offset!");
static_assert(offsetof(ITEM_WeaponModKit_Base_C_TrySetWeaponItemGridSize, K2Node_DynamicCast_bSuccess) == 0x000068, "Member 'ITEM_WeaponModKit_Base_C_TrySetWeaponItemGridSize::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(ITEM_WeaponModKit_Base_C_TrySetWeaponItemGridSize, CallFunc_SetItemGridSize_Result) == 0x000069, "Member 'ITEM_WeaponModKit_Base_C_TrySetWeaponItemGridSize::CallFunc_SetItemGridSize_Result' has a wrong offset!");
static_assert(offsetof(ITEM_WeaponModKit_Base_C_TrySetWeaponItemGridSize, CallFunc_RemoveItem_RemovedItem) == 0x000070, "Member 'ITEM_WeaponModKit_Base_C_TrySetWeaponItemGridSize::CallFunc_RemoveItem_RemovedItem' has a wrong offset!");
static_assert(offsetof(ITEM_WeaponModKit_Base_C_TrySetWeaponItemGridSize, CallFunc_IsValid_ReturnValue_1) == 0x000078, "Member 'ITEM_WeaponModKit_Base_C_TrySetWeaponItemGridSize::CallFunc_IsValid_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(ITEM_WeaponModKit_Base_C_TrySetWeaponItemGridSize, CallFunc_GetRotatedGridSize_Result) == 0x00007C, "Member 'ITEM_WeaponModKit_Base_C_TrySetWeaponItemGridSize::CallFunc_GetRotatedGridSize_Result' has a wrong offset!");
static_assert(offsetof(ITEM_WeaponModKit_Base_C_TrySetWeaponItemGridSize, CallFunc_GetSlotIndex_Result) == 0x000084, "Member 'ITEM_WeaponModKit_Base_C_TrySetWeaponItemGridSize::CallFunc_GetSlotIndex_Result' has a wrong offset!");
static_assert(offsetof(ITEM_WeaponModKit_Base_C_TrySetWeaponItemGridSize, CallFunc_GetBag_Result) == 0x000088, "Member 'ITEM_WeaponModKit_Base_C_TrySetWeaponItemGridSize::CallFunc_GetBag_Result' has a wrong offset!");
static_assert(offsetof(ITEM_WeaponModKit_Base_C_TrySetWeaponItemGridSize, CallFunc_SetItemGridSize_Result_1) == 0x000090, "Member 'ITEM_WeaponModKit_Base_C_TrySetWeaponItemGridSize::CallFunc_SetItemGridSize_Result_1' has a wrong offset!");
static_assert(offsetof(ITEM_WeaponModKit_Base_C_TrySetWeaponItemGridSize, CallFunc_AddItemToSlot_Result) == 0x000091, "Member 'ITEM_WeaponModKit_Base_C_TrySetWeaponItemGridSize::CallFunc_AddItemToSlot_Result' has a wrong offset!");
static_assert(offsetof(ITEM_WeaponModKit_Base_C_TrySetWeaponItemGridSize, CallFunc_HasSlotSpaceForItemWithSize_Result) == 0x000092, "Member 'ITEM_WeaponModKit_Base_C_TrySetWeaponItemGridSize::CallFunc_HasSlotSpaceForItemWithSize_Result' has a wrong offset!");
static_assert(offsetof(ITEM_WeaponModKit_Base_C_TrySetWeaponItemGridSize, CallFunc_TryPickupItemFromGround_Result) == 0x000093, "Member 'ITEM_WeaponModKit_Base_C_TrySetWeaponItemGridSize::CallFunc_TryPickupItemFromGround_Result' has a wrong offset!");

// Function ITEM_WeaponModKit_Base.ITEM_WeaponModKit_Base_C.GetModifiedWeaponMode
// 0x0200 (0x0200 - 0x0000)
struct ITEM_WeaponModKit_Base_C_GetModifiedWeaponMode final
{
public:
	struct FSTRUCT_WeaponMode                     WeaponMode;                                        // 0x0000(0x0100)(BlueprintVisible, BlueprintReadOnly, Parm, HasGetValueTypeHash)
	struct FSTRUCT_WeaponMode                     ResultMode;                                        // 0x0100(0x0100)(Parm, OutParm, HasGetValueTypeHash)
};
static_assert(alignof(ITEM_WeaponModKit_Base_C_GetModifiedWeaponMode) == 0x000008, "Wrong alignment on ITEM_WeaponModKit_Base_C_GetModifiedWeaponMode");
static_assert(sizeof(ITEM_WeaponModKit_Base_C_GetModifiedWeaponMode) == 0x000200, "Wrong size on ITEM_WeaponModKit_Base_C_GetModifiedWeaponMode");
static_assert(offsetof(ITEM_WeaponModKit_Base_C_GetModifiedWeaponMode, WeaponMode) == 0x000000, "Member 'ITEM_WeaponModKit_Base_C_GetModifiedWeaponMode::WeaponMode' has a wrong offset!");
static_assert(offsetof(ITEM_WeaponModKit_Base_C_GetModifiedWeaponMode, ResultMode) == 0x000100, "Member 'ITEM_WeaponModKit_Base_C_GetModifiedWeaponMode::ResultMode' has a wrong offset!");

// Function ITEM_WeaponModKit_Base.ITEM_WeaponModKit_Base_C.UseConsumable
// 0x0050 (0x0050 - 0x0000)
struct ITEM_WeaponModKit_Base_C_UseConsumable final
{
public:
	class APAWN_SystemShockCharacter_C*           Character;                                         // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UITEM_ConsumableBase_C*                 ConsumedItem;                                      // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UITEM_WeaponModKit_Base_C*              ConsumedModKitItem;                                // 0x0010(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UITEM_ConsumableBase_C*                 CallFunc_UseConsumable_ConsumedItem;               // 0x0018(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UITEM_WeaponModKit_Base_C*              K2Node_DynamicCast_AsITEM_Weapon_Mod_Kit_Base;     // 0x0020(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0028(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_29[0x7];                                       // 0x0029(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UCOMP_Inventory_C*                      CallFunc_GetInventoryComponent_Inventory;          // 0x0030(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UITEM_Base_C*                           CallFunc_FindItemBySoftClass_FoundItem;            // 0x0038(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UITEM_WeaponBase_C*                     K2Node_DynamicCast_AsITEM_Weapon_Base;             // 0x0040(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess_1;                     // 0x0048(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_TryInstallWeaponModKit_Result;            // 0x0049(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(ITEM_WeaponModKit_Base_C_UseConsumable) == 0x000008, "Wrong alignment on ITEM_WeaponModKit_Base_C_UseConsumable");
static_assert(sizeof(ITEM_WeaponModKit_Base_C_UseConsumable) == 0x000050, "Wrong size on ITEM_WeaponModKit_Base_C_UseConsumable");
static_assert(offsetof(ITEM_WeaponModKit_Base_C_UseConsumable, Character) == 0x000000, "Member 'ITEM_WeaponModKit_Base_C_UseConsumable::Character' has a wrong offset!");
static_assert(offsetof(ITEM_WeaponModKit_Base_C_UseConsumable, ConsumedItem) == 0x000008, "Member 'ITEM_WeaponModKit_Base_C_UseConsumable::ConsumedItem' has a wrong offset!");
static_assert(offsetof(ITEM_WeaponModKit_Base_C_UseConsumable, ConsumedModKitItem) == 0x000010, "Member 'ITEM_WeaponModKit_Base_C_UseConsumable::ConsumedModKitItem' has a wrong offset!");
static_assert(offsetof(ITEM_WeaponModKit_Base_C_UseConsumable, CallFunc_UseConsumable_ConsumedItem) == 0x000018, "Member 'ITEM_WeaponModKit_Base_C_UseConsumable::CallFunc_UseConsumable_ConsumedItem' has a wrong offset!");
static_assert(offsetof(ITEM_WeaponModKit_Base_C_UseConsumable, K2Node_DynamicCast_AsITEM_Weapon_Mod_Kit_Base) == 0x000020, "Member 'ITEM_WeaponModKit_Base_C_UseConsumable::K2Node_DynamicCast_AsITEM_Weapon_Mod_Kit_Base' has a wrong offset!");
static_assert(offsetof(ITEM_WeaponModKit_Base_C_UseConsumable, K2Node_DynamicCast_bSuccess) == 0x000028, "Member 'ITEM_WeaponModKit_Base_C_UseConsumable::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(ITEM_WeaponModKit_Base_C_UseConsumable, CallFunc_GetInventoryComponent_Inventory) == 0x000030, "Member 'ITEM_WeaponModKit_Base_C_UseConsumable::CallFunc_GetInventoryComponent_Inventory' has a wrong offset!");
static_assert(offsetof(ITEM_WeaponModKit_Base_C_UseConsumable, CallFunc_FindItemBySoftClass_FoundItem) == 0x000038, "Member 'ITEM_WeaponModKit_Base_C_UseConsumable::CallFunc_FindItemBySoftClass_FoundItem' has a wrong offset!");
static_assert(offsetof(ITEM_WeaponModKit_Base_C_UseConsumable, K2Node_DynamicCast_AsITEM_Weapon_Base) == 0x000040, "Member 'ITEM_WeaponModKit_Base_C_UseConsumable::K2Node_DynamicCast_AsITEM_Weapon_Base' has a wrong offset!");
static_assert(offsetof(ITEM_WeaponModKit_Base_C_UseConsumable, K2Node_DynamicCast_bSuccess_1) == 0x000048, "Member 'ITEM_WeaponModKit_Base_C_UseConsumable::K2Node_DynamicCast_bSuccess_1' has a wrong offset!");
static_assert(offsetof(ITEM_WeaponModKit_Base_C_UseConsumable, CallFunc_TryInstallWeaponModKit_Result) == 0x000049, "Member 'ITEM_WeaponModKit_Base_C_UseConsumable::CallFunc_TryInstallWeaponModKit_Result' has a wrong offset!");

// Function ITEM_WeaponModKit_Base.ITEM_WeaponModKit_Base_C.GetEffects
// 0x00D8 (0x00D8 - 0x0000)
struct ITEM_WeaponModKit_Base_C_GetEffects final
{
public:
	class FText                                   EffectsText;                                       // 0x0000(0x0018)(Parm, OutParm)
	struct FFormatArgumentData                    K2Node_MakeStruct_FormatArgumentData;              // 0x0018(0x0040)(HasGetValueTypeHash)
	class UClass*                                 CallFunc_LoadClassAsset_Blocking_ReturnValue;      // 0x0058(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UClass*                                 K2Node_ClassDynamicCast_AsITEM_Weapon_Base;        // 0x0060(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_ClassDynamicCast_bSuccess;                  // 0x0068(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_69[0x7];                                       // 0x0069(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FFormatArgumentData                    K2Node_MakeStruct_FormatArgumentData_1;            // 0x0070(0x0040)(HasGetValueTypeHash)
	TArray<struct FFormatArgumentData>            K2Node_MakeArray_Array;                            // 0x00B0(0x0010)(ReferenceParm)
	class FText                                   CallFunc_Format_ReturnValue;                       // 0x00C0(0x0018)()
};
static_assert(alignof(ITEM_WeaponModKit_Base_C_GetEffects) == 0x000008, "Wrong alignment on ITEM_WeaponModKit_Base_C_GetEffects");
static_assert(sizeof(ITEM_WeaponModKit_Base_C_GetEffects) == 0x0000D8, "Wrong size on ITEM_WeaponModKit_Base_C_GetEffects");
static_assert(offsetof(ITEM_WeaponModKit_Base_C_GetEffects, EffectsText) == 0x000000, "Member 'ITEM_WeaponModKit_Base_C_GetEffects::EffectsText' has a wrong offset!");
static_assert(offsetof(ITEM_WeaponModKit_Base_C_GetEffects, K2Node_MakeStruct_FormatArgumentData) == 0x000018, "Member 'ITEM_WeaponModKit_Base_C_GetEffects::K2Node_MakeStruct_FormatArgumentData' has a wrong offset!");
static_assert(offsetof(ITEM_WeaponModKit_Base_C_GetEffects, CallFunc_LoadClassAsset_Blocking_ReturnValue) == 0x000058, "Member 'ITEM_WeaponModKit_Base_C_GetEffects::CallFunc_LoadClassAsset_Blocking_ReturnValue' has a wrong offset!");
static_assert(offsetof(ITEM_WeaponModKit_Base_C_GetEffects, K2Node_ClassDynamicCast_AsITEM_Weapon_Base) == 0x000060, "Member 'ITEM_WeaponModKit_Base_C_GetEffects::K2Node_ClassDynamicCast_AsITEM_Weapon_Base' has a wrong offset!");
static_assert(offsetof(ITEM_WeaponModKit_Base_C_GetEffects, K2Node_ClassDynamicCast_bSuccess) == 0x000068, "Member 'ITEM_WeaponModKit_Base_C_GetEffects::K2Node_ClassDynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(ITEM_WeaponModKit_Base_C_GetEffects, K2Node_MakeStruct_FormatArgumentData_1) == 0x000070, "Member 'ITEM_WeaponModKit_Base_C_GetEffects::K2Node_MakeStruct_FormatArgumentData_1' has a wrong offset!");
static_assert(offsetof(ITEM_WeaponModKit_Base_C_GetEffects, K2Node_MakeArray_Array) == 0x0000B0, "Member 'ITEM_WeaponModKit_Base_C_GetEffects::K2Node_MakeArray_Array' has a wrong offset!");
static_assert(offsetof(ITEM_WeaponModKit_Base_C_GetEffects, CallFunc_Format_ReturnValue) == 0x0000C0, "Member 'ITEM_WeaponModKit_Base_C_GetEffects::CallFunc_Format_ReturnValue' has a wrong offset!");

// Function ITEM_WeaponModKit_Base.ITEM_WeaponModKit_Base_C.GetTargetWeaponClass
// 0x0020 (0x0020 - 0x0000)
struct ITEM_WeaponModKit_Base_C_GetTargetWeaponClass final
{
public:
	class UClass*                                 Result;                                            // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UClass*                                 CallFunc_LoadClassAsset_Blocking_ReturnValue;      // 0x0008(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UClass*                                 K2Node_ClassDynamicCast_AsITEM_Weapon_Base;        // 0x0010(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_ClassDynamicCast_bSuccess;                  // 0x0018(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(ITEM_WeaponModKit_Base_C_GetTargetWeaponClass) == 0x000008, "Wrong alignment on ITEM_WeaponModKit_Base_C_GetTargetWeaponClass");
static_assert(sizeof(ITEM_WeaponModKit_Base_C_GetTargetWeaponClass) == 0x000020, "Wrong size on ITEM_WeaponModKit_Base_C_GetTargetWeaponClass");
static_assert(offsetof(ITEM_WeaponModKit_Base_C_GetTargetWeaponClass, Result) == 0x000000, "Member 'ITEM_WeaponModKit_Base_C_GetTargetWeaponClass::Result' has a wrong offset!");
static_assert(offsetof(ITEM_WeaponModKit_Base_C_GetTargetWeaponClass, CallFunc_LoadClassAsset_Blocking_ReturnValue) == 0x000008, "Member 'ITEM_WeaponModKit_Base_C_GetTargetWeaponClass::CallFunc_LoadClassAsset_Blocking_ReturnValue' has a wrong offset!");
static_assert(offsetof(ITEM_WeaponModKit_Base_C_GetTargetWeaponClass, K2Node_ClassDynamicCast_AsITEM_Weapon_Base) == 0x000010, "Member 'ITEM_WeaponModKit_Base_C_GetTargetWeaponClass::K2Node_ClassDynamicCast_AsITEM_Weapon_Base' has a wrong offset!");
static_assert(offsetof(ITEM_WeaponModKit_Base_C_GetTargetWeaponClass, K2Node_ClassDynamicCast_bSuccess) == 0x000018, "Member 'ITEM_WeaponModKit_Base_C_GetTargetWeaponClass::K2Node_ClassDynamicCast_bSuccess' has a wrong offset!");

// Function ITEM_WeaponModKit_Base.ITEM_WeaponModKit_Base_C.HasAppearanceChange
// 0x0001 (0x0001 - 0x0000)
struct ITEM_WeaponModKit_Base_C_HasAppearanceChange final
{
public:
	bool                                          Result;                                            // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(ITEM_WeaponModKit_Base_C_HasAppearanceChange) == 0x000001, "Wrong alignment on ITEM_WeaponModKit_Base_C_HasAppearanceChange");
static_assert(sizeof(ITEM_WeaponModKit_Base_C_HasAppearanceChange) == 0x000001, "Wrong size on ITEM_WeaponModKit_Base_C_HasAppearanceChange");
static_assert(offsetof(ITEM_WeaponModKit_Base_C_HasAppearanceChange, Result) == 0x000000, "Member 'ITEM_WeaponModKit_Base_C_HasAppearanceChange::Result' has a wrong offset!");

// Function ITEM_WeaponModKit_Base.ITEM_WeaponModKit_Base_C.GetFirstPersonAttachment
// 0x0050 (0x0050 - 0x0000)
struct ITEM_WeaponModKit_Base_C_GetFirstPersonAttachment final
{
public:
	class UStaticMesh*                            Mesh;                                              // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_8[0x8];                                        // 0x0008(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTransform                             Transform;                                         // 0x0010(0x0030)(Parm, OutParm, IsPlainOldData, NoDestructor)
	class FName                                   SocketName;                                        // 0x0040(0x0008)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(ITEM_WeaponModKit_Base_C_GetFirstPersonAttachment) == 0x000010, "Wrong alignment on ITEM_WeaponModKit_Base_C_GetFirstPersonAttachment");
static_assert(sizeof(ITEM_WeaponModKit_Base_C_GetFirstPersonAttachment) == 0x000050, "Wrong size on ITEM_WeaponModKit_Base_C_GetFirstPersonAttachment");
static_assert(offsetof(ITEM_WeaponModKit_Base_C_GetFirstPersonAttachment, Mesh) == 0x000000, "Member 'ITEM_WeaponModKit_Base_C_GetFirstPersonAttachment::Mesh' has a wrong offset!");
static_assert(offsetof(ITEM_WeaponModKit_Base_C_GetFirstPersonAttachment, Transform) == 0x000010, "Member 'ITEM_WeaponModKit_Base_C_GetFirstPersonAttachment::Transform' has a wrong offset!");
static_assert(offsetof(ITEM_WeaponModKit_Base_C_GetFirstPersonAttachment, SocketName) == 0x000040, "Member 'ITEM_WeaponModKit_Base_C_GetFirstPersonAttachment::SocketName' has a wrong offset!");

// Function ITEM_WeaponModKit_Base.ITEM_WeaponModKit_Base_C.CanActivate
// 0x0040 (0x0040 - 0x0000)
struct ITEM_WeaponModKit_Base_C_CanActivate final
{
public:
	class APAWN_SystemShockCharacter_C*           Character;                                         // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Result;                                            // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UITEM_Base_C*                           WeaponClass;                                       // 0x0010(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_CanActivate_Result;                       // 0x0018(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_19[0x7];                                       // 0x0019(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UCOMP_Inventory_C*                      CallFunc_GetInventoryComponent_Inventory;          // 0x0020(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UITEM_Base_C*                           CallFunc_FindItemBySoftClass_FoundItem;            // 0x0028(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UITEM_WeaponBase_C*                     K2Node_DynamicCast_AsITEM_Weapon_Base;             // 0x0030(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0038(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_CanModifyWeapon_Result;                   // 0x0039(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(ITEM_WeaponModKit_Base_C_CanActivate) == 0x000008, "Wrong alignment on ITEM_WeaponModKit_Base_C_CanActivate");
static_assert(sizeof(ITEM_WeaponModKit_Base_C_CanActivate) == 0x000040, "Wrong size on ITEM_WeaponModKit_Base_C_CanActivate");
static_assert(offsetof(ITEM_WeaponModKit_Base_C_CanActivate, Character) == 0x000000, "Member 'ITEM_WeaponModKit_Base_C_CanActivate::Character' has a wrong offset!");
static_assert(offsetof(ITEM_WeaponModKit_Base_C_CanActivate, Result) == 0x000008, "Member 'ITEM_WeaponModKit_Base_C_CanActivate::Result' has a wrong offset!");
static_assert(offsetof(ITEM_WeaponModKit_Base_C_CanActivate, WeaponClass) == 0x000010, "Member 'ITEM_WeaponModKit_Base_C_CanActivate::WeaponClass' has a wrong offset!");
static_assert(offsetof(ITEM_WeaponModKit_Base_C_CanActivate, CallFunc_CanActivate_Result) == 0x000018, "Member 'ITEM_WeaponModKit_Base_C_CanActivate::CallFunc_CanActivate_Result' has a wrong offset!");
static_assert(offsetof(ITEM_WeaponModKit_Base_C_CanActivate, CallFunc_GetInventoryComponent_Inventory) == 0x000020, "Member 'ITEM_WeaponModKit_Base_C_CanActivate::CallFunc_GetInventoryComponent_Inventory' has a wrong offset!");
static_assert(offsetof(ITEM_WeaponModKit_Base_C_CanActivate, CallFunc_FindItemBySoftClass_FoundItem) == 0x000028, "Member 'ITEM_WeaponModKit_Base_C_CanActivate::CallFunc_FindItemBySoftClass_FoundItem' has a wrong offset!");
static_assert(offsetof(ITEM_WeaponModKit_Base_C_CanActivate, K2Node_DynamicCast_AsITEM_Weapon_Base) == 0x000030, "Member 'ITEM_WeaponModKit_Base_C_CanActivate::K2Node_DynamicCast_AsITEM_Weapon_Base' has a wrong offset!");
static_assert(offsetof(ITEM_WeaponModKit_Base_C_CanActivate, K2Node_DynamicCast_bSuccess) == 0x000038, "Member 'ITEM_WeaponModKit_Base_C_CanActivate::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(ITEM_WeaponModKit_Base_C_CanActivate, CallFunc_CanModifyWeapon_Result) == 0x000039, "Member 'ITEM_WeaponModKit_Base_C_CanActivate::CallFunc_CanModifyWeapon_Result' has a wrong offset!");

}

