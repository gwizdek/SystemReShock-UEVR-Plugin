#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: WEAPON_Skorpion

#include "Basic.hpp"

#include "CoreUObject_structs.hpp"
#include "Engine_structs.hpp"
#include "STRUCT_WeaponMode_structs.hpp"


namespace SDK::Params
{

// Function WEAPON_Skorpion.WEAPON_Skorpion_C.FireProjectile
// 0x0050 (0x0050 - 0x0000)
struct WEAPON_Skorpion_C_FireProjectile final
{
public:
	class AActor*                                 FiredProjectile;                                   // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                Direction;                                         // 0x0008(0x000C)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FDataTableRowHandle                    DropoffTemplate;                                   // 0x0018(0x0010)(Edit, BlueprintVisible, NoDestructor)
	class AActor*                                 CallFunc_FireProjectile_FiredProjectile;           // 0x0028(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_FireProjectile_Direction;                 // 0x0030(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_3C[0x4];                                       // 0x003C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class ABulletProjectile_MachineGun_C*         K2Node_DynamicCast_AsBullet_Projectile_Machine_Gun; // 0x0040(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0048(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(WEAPON_Skorpion_C_FireProjectile) == 0x000008, "Wrong alignment on WEAPON_Skorpion_C_FireProjectile");
static_assert(sizeof(WEAPON_Skorpion_C_FireProjectile) == 0x000050, "Wrong size on WEAPON_Skorpion_C_FireProjectile");
static_assert(offsetof(WEAPON_Skorpion_C_FireProjectile, FiredProjectile) == 0x000000, "Member 'WEAPON_Skorpion_C_FireProjectile::FiredProjectile' has a wrong offset!");
static_assert(offsetof(WEAPON_Skorpion_C_FireProjectile, Direction) == 0x000008, "Member 'WEAPON_Skorpion_C_FireProjectile::Direction' has a wrong offset!");
static_assert(offsetof(WEAPON_Skorpion_C_FireProjectile, DropoffTemplate) == 0x000018, "Member 'WEAPON_Skorpion_C_FireProjectile::DropoffTemplate' has a wrong offset!");
static_assert(offsetof(WEAPON_Skorpion_C_FireProjectile, CallFunc_FireProjectile_FiredProjectile) == 0x000028, "Member 'WEAPON_Skorpion_C_FireProjectile::CallFunc_FireProjectile_FiredProjectile' has a wrong offset!");
static_assert(offsetof(WEAPON_Skorpion_C_FireProjectile, CallFunc_FireProjectile_Direction) == 0x000030, "Member 'WEAPON_Skorpion_C_FireProjectile::CallFunc_FireProjectile_Direction' has a wrong offset!");
static_assert(offsetof(WEAPON_Skorpion_C_FireProjectile, K2Node_DynamicCast_AsBullet_Projectile_Machine_Gun) == 0x000040, "Member 'WEAPON_Skorpion_C_FireProjectile::K2Node_DynamicCast_AsBullet_Projectile_Machine_Gun' has a wrong offset!");
static_assert(offsetof(WEAPON_Skorpion_C_FireProjectile, K2Node_DynamicCast_bSuccess) == 0x000048, "Member 'WEAPON_Skorpion_C_FireProjectile::K2Node_DynamicCast_bSuccess' has a wrong offset!");

// Function WEAPON_Skorpion.WEAPON_Skorpion_C.GetProjectileClass
// 0x0008 (0x0008 - 0x0000)
struct WEAPON_Skorpion_C_GetProjectileClass final
{
public:
	class UClass*                                 Result;                                            // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(WEAPON_Skorpion_C_GetProjectileClass) == 0x000008, "Wrong alignment on WEAPON_Skorpion_C_GetProjectileClass");
static_assert(sizeof(WEAPON_Skorpion_C_GetProjectileClass) == 0x000008, "Wrong size on WEAPON_Skorpion_C_GetProjectileClass");
static_assert(offsetof(WEAPON_Skorpion_C_GetProjectileClass, Result) == 0x000000, "Member 'WEAPON_Skorpion_C_GetProjectileClass::Result' has a wrong offset!");

// Function WEAPON_Skorpion.WEAPON_Skorpion_C.InitializeProjectile
// 0x0018 (0x0018 - 0x0000)
struct WEAPON_Skorpion_C_InitializeProjectile final
{
public:
	class ABulletProjectile_MachineGun_C*         Projectile;                                        // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Variable;                                // 0x0008(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         Temp_float_Variable;                               // 0x000C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Temp_float_Variable_1;                             // 0x0010(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         K2Node_Select_Default;                             // 0x0014(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(WEAPON_Skorpion_C_InitializeProjectile) == 0x000008, "Wrong alignment on WEAPON_Skorpion_C_InitializeProjectile");
static_assert(sizeof(WEAPON_Skorpion_C_InitializeProjectile) == 0x000018, "Wrong size on WEAPON_Skorpion_C_InitializeProjectile");
static_assert(offsetof(WEAPON_Skorpion_C_InitializeProjectile, Projectile) == 0x000000, "Member 'WEAPON_Skorpion_C_InitializeProjectile::Projectile' has a wrong offset!");
static_assert(offsetof(WEAPON_Skorpion_C_InitializeProjectile, Temp_bool_Variable) == 0x000008, "Member 'WEAPON_Skorpion_C_InitializeProjectile::Temp_bool_Variable' has a wrong offset!");
static_assert(offsetof(WEAPON_Skorpion_C_InitializeProjectile, Temp_float_Variable) == 0x00000C, "Member 'WEAPON_Skorpion_C_InitializeProjectile::Temp_float_Variable' has a wrong offset!");
static_assert(offsetof(WEAPON_Skorpion_C_InitializeProjectile, Temp_float_Variable_1) == 0x000010, "Member 'WEAPON_Skorpion_C_InitializeProjectile::Temp_float_Variable_1' has a wrong offset!");
static_assert(offsetof(WEAPON_Skorpion_C_InitializeProjectile, K2Node_Select_Default) == 0x000014, "Member 'WEAPON_Skorpion_C_InitializeProjectile::K2Node_Select_Default' has a wrong offset!");

// Function WEAPON_Skorpion.WEAPON_Skorpion_C.AddHeat
// 0x0118 (0x0118 - 0x0000)
struct WEAPON_Skorpion_C_AddHeat final
{
public:
	float                                         CallFunc_GetPlayTimeInSeconds_ReturnValue;         // 0x0000(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Add_FloatFloat_ReturnValue;               // 0x0004(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FSTRUCT_WeaponMode                     CallFunc_GetCurrentMode_Mode;                      // 0x0008(0x0100)(HasGetValueTypeHash)
	int32                                         CallFunc_GetWeaponPropertyValueByType_Value;       // 0x0108(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Conv_IntToFloat_ReturnValue;              // 0x010C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Add_FloatFloat_ReturnValue_1;             // 0x0110(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_FMin_ReturnValue;                         // 0x0114(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(WEAPON_Skorpion_C_AddHeat) == 0x000008, "Wrong alignment on WEAPON_Skorpion_C_AddHeat");
static_assert(sizeof(WEAPON_Skorpion_C_AddHeat) == 0x000118, "Wrong size on WEAPON_Skorpion_C_AddHeat");
static_assert(offsetof(WEAPON_Skorpion_C_AddHeat, CallFunc_GetPlayTimeInSeconds_ReturnValue) == 0x000000, "Member 'WEAPON_Skorpion_C_AddHeat::CallFunc_GetPlayTimeInSeconds_ReturnValue' has a wrong offset!");
static_assert(offsetof(WEAPON_Skorpion_C_AddHeat, CallFunc_Add_FloatFloat_ReturnValue) == 0x000004, "Member 'WEAPON_Skorpion_C_AddHeat::CallFunc_Add_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(WEAPON_Skorpion_C_AddHeat, CallFunc_GetCurrentMode_Mode) == 0x000008, "Member 'WEAPON_Skorpion_C_AddHeat::CallFunc_GetCurrentMode_Mode' has a wrong offset!");
static_assert(offsetof(WEAPON_Skorpion_C_AddHeat, CallFunc_GetWeaponPropertyValueByType_Value) == 0x000108, "Member 'WEAPON_Skorpion_C_AddHeat::CallFunc_GetWeaponPropertyValueByType_Value' has a wrong offset!");
static_assert(offsetof(WEAPON_Skorpion_C_AddHeat, CallFunc_Conv_IntToFloat_ReturnValue) == 0x00010C, "Member 'WEAPON_Skorpion_C_AddHeat::CallFunc_Conv_IntToFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(WEAPON_Skorpion_C_AddHeat, CallFunc_Add_FloatFloat_ReturnValue_1) == 0x000110, "Member 'WEAPON_Skorpion_C_AddHeat::CallFunc_Add_FloatFloat_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(WEAPON_Skorpion_C_AddHeat, CallFunc_FMin_ReturnValue) == 0x000114, "Member 'WEAPON_Skorpion_C_AddHeat::CallFunc_FMin_ReturnValue' has a wrong offset!");

// Function WEAPON_Skorpion.WEAPON_Skorpion_C.UpdateHeat
// 0x0024 (0x0024 - 0x0000)
struct WEAPON_Skorpion_C_UpdateHeat final
{
public:
	float                                         ElapsedTime;                                       // 0x0000(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CurrentTimestamp;                                  // 0x0004(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Multiply_IntFloat_ReturnValue;            // 0x0008(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_LessEqual_FloatFloat_ReturnValue;         // 0x000C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Greater_FloatFloat_ReturnValue;           // 0x000D(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_E[0x2];                                        // 0x000E(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_Subtract_FloatFloat_ReturnValue;          // 0x0010(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Subtract_FloatFloat_ReturnValue_1;        // 0x0014(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_FMax_ReturnValue;                         // 0x0018(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_GetPlayTimeInSeconds_ReturnValue;         // 0x001C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Greater_FloatFloat_ReturnValue_1;         // 0x0020(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Greater_FloatFloat_ReturnValue_2;         // 0x0021(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(WEAPON_Skorpion_C_UpdateHeat) == 0x000004, "Wrong alignment on WEAPON_Skorpion_C_UpdateHeat");
static_assert(sizeof(WEAPON_Skorpion_C_UpdateHeat) == 0x000024, "Wrong size on WEAPON_Skorpion_C_UpdateHeat");
static_assert(offsetof(WEAPON_Skorpion_C_UpdateHeat, ElapsedTime) == 0x000000, "Member 'WEAPON_Skorpion_C_UpdateHeat::ElapsedTime' has a wrong offset!");
static_assert(offsetof(WEAPON_Skorpion_C_UpdateHeat, CurrentTimestamp) == 0x000004, "Member 'WEAPON_Skorpion_C_UpdateHeat::CurrentTimestamp' has a wrong offset!");
static_assert(offsetof(WEAPON_Skorpion_C_UpdateHeat, CallFunc_Multiply_IntFloat_ReturnValue) == 0x000008, "Member 'WEAPON_Skorpion_C_UpdateHeat::CallFunc_Multiply_IntFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(WEAPON_Skorpion_C_UpdateHeat, CallFunc_LessEqual_FloatFloat_ReturnValue) == 0x00000C, "Member 'WEAPON_Skorpion_C_UpdateHeat::CallFunc_LessEqual_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(WEAPON_Skorpion_C_UpdateHeat, CallFunc_Greater_FloatFloat_ReturnValue) == 0x00000D, "Member 'WEAPON_Skorpion_C_UpdateHeat::CallFunc_Greater_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(WEAPON_Skorpion_C_UpdateHeat, CallFunc_Subtract_FloatFloat_ReturnValue) == 0x000010, "Member 'WEAPON_Skorpion_C_UpdateHeat::CallFunc_Subtract_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(WEAPON_Skorpion_C_UpdateHeat, CallFunc_Subtract_FloatFloat_ReturnValue_1) == 0x000014, "Member 'WEAPON_Skorpion_C_UpdateHeat::CallFunc_Subtract_FloatFloat_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(WEAPON_Skorpion_C_UpdateHeat, CallFunc_FMax_ReturnValue) == 0x000018, "Member 'WEAPON_Skorpion_C_UpdateHeat::CallFunc_FMax_ReturnValue' has a wrong offset!");
static_assert(offsetof(WEAPON_Skorpion_C_UpdateHeat, CallFunc_GetPlayTimeInSeconds_ReturnValue) == 0x00001C, "Member 'WEAPON_Skorpion_C_UpdateHeat::CallFunc_GetPlayTimeInSeconds_ReturnValue' has a wrong offset!");
static_assert(offsetof(WEAPON_Skorpion_C_UpdateHeat, CallFunc_Greater_FloatFloat_ReturnValue_1) == 0x000020, "Member 'WEAPON_Skorpion_C_UpdateHeat::CallFunc_Greater_FloatFloat_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(WEAPON_Skorpion_C_UpdateHeat, CallFunc_Greater_FloatFloat_ReturnValue_2) == 0x000021, "Member 'WEAPON_Skorpion_C_UpdateHeat::CallFunc_Greater_FloatFloat_ReturnValue_2' has a wrong offset!");

// Function WEAPON_Skorpion.WEAPON_Skorpion_C.OnUpdateHeat
// 0x0001 (0x0001 - 0x0000)
struct WEAPON_Skorpion_C_OnUpdateHeat final
{
public:
	bool                                          CallFunc_LessEqual_FloatFloat_ReturnValue;         // 0x0000(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(WEAPON_Skorpion_C_OnUpdateHeat) == 0x000001, "Wrong alignment on WEAPON_Skorpion_C_OnUpdateHeat");
static_assert(sizeof(WEAPON_Skorpion_C_OnUpdateHeat) == 0x000001, "Wrong size on WEAPON_Skorpion_C_OnUpdateHeat");
static_assert(offsetof(WEAPON_Skorpion_C_OnUpdateHeat, CallFunc_LessEqual_FloatFloat_ReturnValue) == 0x000000, "Member 'WEAPON_Skorpion_C_OnUpdateHeat::CallFunc_LessEqual_FloatFloat_ReturnValue' has a wrong offset!");

// Function WEAPON_Skorpion.WEAPON_Skorpion_C.PrecomputeHeatSideEffects
// 0x0028 (0x0028 - 0x0000)
struct WEAPON_Skorpion_C_PrecomputeHeatSideEffects final
{
public:
	float                                         CallFunc_RandomFloat_ReturnValue;                  // 0x0000(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Subtract_IntInt_ReturnValue;              // 0x0004(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Conv_IntToFloat_ReturnValue;              // 0x0008(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Conv_IntToFloat_ReturnValue_1;            // 0x000C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Conv_IntToFloat_ReturnValue_2;            // 0x0010(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Subtract_FloatFloat_ReturnValue;          // 0x0014(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Divide_FloatFloat_ReturnValue;            // 0x0018(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_GreaterEqual_FloatFloat_ReturnValue;      // 0x001C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_1D[0x3];                                       // 0x001D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_Lerp_ReturnValue;                         // 0x0020(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_LessEqual_FloatFloat_ReturnValue;         // 0x0024(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(WEAPON_Skorpion_C_PrecomputeHeatSideEffects) == 0x000004, "Wrong alignment on WEAPON_Skorpion_C_PrecomputeHeatSideEffects");
static_assert(sizeof(WEAPON_Skorpion_C_PrecomputeHeatSideEffects) == 0x000028, "Wrong size on WEAPON_Skorpion_C_PrecomputeHeatSideEffects");
static_assert(offsetof(WEAPON_Skorpion_C_PrecomputeHeatSideEffects, CallFunc_RandomFloat_ReturnValue) == 0x000000, "Member 'WEAPON_Skorpion_C_PrecomputeHeatSideEffects::CallFunc_RandomFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(WEAPON_Skorpion_C_PrecomputeHeatSideEffects, CallFunc_Subtract_IntInt_ReturnValue) == 0x000004, "Member 'WEAPON_Skorpion_C_PrecomputeHeatSideEffects::CallFunc_Subtract_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(WEAPON_Skorpion_C_PrecomputeHeatSideEffects, CallFunc_Conv_IntToFloat_ReturnValue) == 0x000008, "Member 'WEAPON_Skorpion_C_PrecomputeHeatSideEffects::CallFunc_Conv_IntToFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(WEAPON_Skorpion_C_PrecomputeHeatSideEffects, CallFunc_Conv_IntToFloat_ReturnValue_1) == 0x00000C, "Member 'WEAPON_Skorpion_C_PrecomputeHeatSideEffects::CallFunc_Conv_IntToFloat_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(WEAPON_Skorpion_C_PrecomputeHeatSideEffects, CallFunc_Conv_IntToFloat_ReturnValue_2) == 0x000010, "Member 'WEAPON_Skorpion_C_PrecomputeHeatSideEffects::CallFunc_Conv_IntToFloat_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(WEAPON_Skorpion_C_PrecomputeHeatSideEffects, CallFunc_Subtract_FloatFloat_ReturnValue) == 0x000014, "Member 'WEAPON_Skorpion_C_PrecomputeHeatSideEffects::CallFunc_Subtract_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(WEAPON_Skorpion_C_PrecomputeHeatSideEffects, CallFunc_Divide_FloatFloat_ReturnValue) == 0x000018, "Member 'WEAPON_Skorpion_C_PrecomputeHeatSideEffects::CallFunc_Divide_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(WEAPON_Skorpion_C_PrecomputeHeatSideEffects, CallFunc_GreaterEqual_FloatFloat_ReturnValue) == 0x00001C, "Member 'WEAPON_Skorpion_C_PrecomputeHeatSideEffects::CallFunc_GreaterEqual_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(WEAPON_Skorpion_C_PrecomputeHeatSideEffects, CallFunc_Lerp_ReturnValue) == 0x000020, "Member 'WEAPON_Skorpion_C_PrecomputeHeatSideEffects::CallFunc_Lerp_ReturnValue' has a wrong offset!");
static_assert(offsetof(WEAPON_Skorpion_C_PrecomputeHeatSideEffects, CallFunc_LessEqual_FloatFloat_ReturnValue) == 0x000024, "Member 'WEAPON_Skorpion_C_PrecomputeHeatSideEffects::CallFunc_LessEqual_FloatFloat_ReturnValue' has a wrong offset!");

// Function WEAPON_Skorpion.WEAPON_Skorpion_C.TryStartHeatTimer
// 0x0020 (0x0020 - 0x0000)
struct WEAPON_Skorpion_C_TryStartHeatTimer final
{
public:
	TDelegate<void()>                             K2Node_CreateDelegate_OutputDelegate;              // 0x0000(0x0010)(ZeroConstructor, NoDestructor)
	struct FTimerHandle                           CallFunc_K2_SetTimerDelegate_ReturnValue;          // 0x0010(0x0008)(NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Greater_FloatFloat_ReturnValue;           // 0x0018(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_K2_IsTimerActiveHandle_ReturnValue;       // 0x0019(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Not_PreBool_ReturnValue;                  // 0x001A(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(WEAPON_Skorpion_C_TryStartHeatTimer) == 0x000008, "Wrong alignment on WEAPON_Skorpion_C_TryStartHeatTimer");
static_assert(sizeof(WEAPON_Skorpion_C_TryStartHeatTimer) == 0x000020, "Wrong size on WEAPON_Skorpion_C_TryStartHeatTimer");
static_assert(offsetof(WEAPON_Skorpion_C_TryStartHeatTimer, K2Node_CreateDelegate_OutputDelegate) == 0x000000, "Member 'WEAPON_Skorpion_C_TryStartHeatTimer::K2Node_CreateDelegate_OutputDelegate' has a wrong offset!");
static_assert(offsetof(WEAPON_Skorpion_C_TryStartHeatTimer, CallFunc_K2_SetTimerDelegate_ReturnValue) == 0x000010, "Member 'WEAPON_Skorpion_C_TryStartHeatTimer::CallFunc_K2_SetTimerDelegate_ReturnValue' has a wrong offset!");
static_assert(offsetof(WEAPON_Skorpion_C_TryStartHeatTimer, CallFunc_Greater_FloatFloat_ReturnValue) == 0x000018, "Member 'WEAPON_Skorpion_C_TryStartHeatTimer::CallFunc_Greater_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(WEAPON_Skorpion_C_TryStartHeatTimer, CallFunc_K2_IsTimerActiveHandle_ReturnValue) == 0x000019, "Member 'WEAPON_Skorpion_C_TryStartHeatTimer::CallFunc_K2_IsTimerActiveHandle_ReturnValue' has a wrong offset!");
static_assert(offsetof(WEAPON_Skorpion_C_TryStartHeatTimer, CallFunc_Not_PreBool_ReturnValue) == 0x00001A, "Member 'WEAPON_Skorpion_C_TryStartHeatTimer::CallFunc_Not_PreBool_ReturnValue' has a wrong offset!");

// Function WEAPON_Skorpion.WEAPON_Skorpion_C.SetHasBarrelAttachment
// 0x0001 (0x0001 - 0x0000)
struct WEAPON_Skorpion_C_SetHasBarrelAttachment final
{
public:
	bool                                          State;                                             // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(WEAPON_Skorpion_C_SetHasBarrelAttachment) == 0x000001, "Wrong alignment on WEAPON_Skorpion_C_SetHasBarrelAttachment");
static_assert(sizeof(WEAPON_Skorpion_C_SetHasBarrelAttachment) == 0x000001, "Wrong size on WEAPON_Skorpion_C_SetHasBarrelAttachment");
static_assert(offsetof(WEAPON_Skorpion_C_SetHasBarrelAttachment, State) == 0x000000, "Member 'WEAPON_Skorpion_C_SetHasBarrelAttachment::State' has a wrong offset!");

// Function WEAPON_Skorpion.WEAPON_Skorpion_C.GetHeatPercentage
// 0x0004 (0x0004 - 0x0000)
struct WEAPON_Skorpion_C_GetHeatPercentage final
{
public:
	float                                         Result;                                            // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(WEAPON_Skorpion_C_GetHeatPercentage) == 0x000004, "Wrong alignment on WEAPON_Skorpion_C_GetHeatPercentage");
static_assert(sizeof(WEAPON_Skorpion_C_GetHeatPercentage) == 0x000004, "Wrong size on WEAPON_Skorpion_C_GetHeatPercentage");
static_assert(offsetof(WEAPON_Skorpion_C_GetHeatPercentage, Result) == 0x000000, "Member 'WEAPON_Skorpion_C_GetHeatPercentage::Result' has a wrong offset!");

// Function WEAPON_Skorpion.WEAPON_Skorpion_C.OnWeaponBecameActivatable
// 0x0010 (0x0010 - 0x0000)
struct WEAPON_Skorpion_C_OnWeaponBecameActivatable final
{
public:
	class APAWN_SystemShockCharacter_C*           Character;                                         // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          ShowImmediately;                                   // 0x0008(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(WEAPON_Skorpion_C_OnWeaponBecameActivatable) == 0x000008, "Wrong alignment on WEAPON_Skorpion_C_OnWeaponBecameActivatable");
static_assert(sizeof(WEAPON_Skorpion_C_OnWeaponBecameActivatable) == 0x000010, "Wrong size on WEAPON_Skorpion_C_OnWeaponBecameActivatable");
static_assert(offsetof(WEAPON_Skorpion_C_OnWeaponBecameActivatable, Character) == 0x000000, "Member 'WEAPON_Skorpion_C_OnWeaponBecameActivatable::Character' has a wrong offset!");
static_assert(offsetof(WEAPON_Skorpion_C_OnWeaponBecameActivatable, ShowImmediately) == 0x000008, "Member 'WEAPON_Skorpion_C_OnWeaponBecameActivatable::ShowImmediately' has a wrong offset!");

// Function WEAPON_Skorpion.WEAPON_Skorpion_C.OnBecomeUnactivatable
// 0x0002 (0x0002 - 0x0000)
struct WEAPON_Skorpion_C_OnBecomeUnactivatable final
{
public:
	bool                                          Result;                                            // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_OnBecomeUnactivatable_Result;             // 0x0001(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(WEAPON_Skorpion_C_OnBecomeUnactivatable) == 0x000001, "Wrong alignment on WEAPON_Skorpion_C_OnBecomeUnactivatable");
static_assert(sizeof(WEAPON_Skorpion_C_OnBecomeUnactivatable) == 0x000002, "Wrong size on WEAPON_Skorpion_C_OnBecomeUnactivatable");
static_assert(offsetof(WEAPON_Skorpion_C_OnBecomeUnactivatable, Result) == 0x000000, "Member 'WEAPON_Skorpion_C_OnBecomeUnactivatable::Result' has a wrong offset!");
static_assert(offsetof(WEAPON_Skorpion_C_OnBecomeUnactivatable, CallFunc_OnBecomeUnactivatable_Result) == 0x000001, "Member 'WEAPON_Skorpion_C_OnBecomeUnactivatable::CallFunc_OnBecomeUnactivatable_Result' has a wrong offset!");

// Function WEAPON_Skorpion.WEAPON_Skorpion_C.ComputeSpreadDirection
// 0x0044 (0x0044 - 0x0000)
struct WEAPON_Skorpion_C_ComputeSpreadDirection final
{
public:
	struct FVector                                BarrelDirection;                                   // 0x0000(0x000C)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                SpreadDirection;                                   // 0x000C(0x000C)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         SpreadHalfAngle;                                   // 0x0018(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_ComputeSpreadDirection_SpreadDirection;   // 0x001C(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Multiply_FloatFloat_ReturnValue;          // 0x0028(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Multiply_FloatFloat_ReturnValue_1;        // 0x002C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_RandomFloatInRange_ReturnValue;           // 0x0030(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_GetSpreadHalfAngle_Result;                // 0x0034(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_GetExactWeaponSpreadDirection_SpreadDirection; // 0x0038(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(WEAPON_Skorpion_C_ComputeSpreadDirection) == 0x000004, "Wrong alignment on WEAPON_Skorpion_C_ComputeSpreadDirection");
static_assert(sizeof(WEAPON_Skorpion_C_ComputeSpreadDirection) == 0x000044, "Wrong size on WEAPON_Skorpion_C_ComputeSpreadDirection");
static_assert(offsetof(WEAPON_Skorpion_C_ComputeSpreadDirection, BarrelDirection) == 0x000000, "Member 'WEAPON_Skorpion_C_ComputeSpreadDirection::BarrelDirection' has a wrong offset!");
static_assert(offsetof(WEAPON_Skorpion_C_ComputeSpreadDirection, SpreadDirection) == 0x00000C, "Member 'WEAPON_Skorpion_C_ComputeSpreadDirection::SpreadDirection' has a wrong offset!");
static_assert(offsetof(WEAPON_Skorpion_C_ComputeSpreadDirection, SpreadHalfAngle) == 0x000018, "Member 'WEAPON_Skorpion_C_ComputeSpreadDirection::SpreadHalfAngle' has a wrong offset!");
static_assert(offsetof(WEAPON_Skorpion_C_ComputeSpreadDirection, CallFunc_ComputeSpreadDirection_SpreadDirection) == 0x00001C, "Member 'WEAPON_Skorpion_C_ComputeSpreadDirection::CallFunc_ComputeSpreadDirection_SpreadDirection' has a wrong offset!");
static_assert(offsetof(WEAPON_Skorpion_C_ComputeSpreadDirection, CallFunc_Multiply_FloatFloat_ReturnValue) == 0x000028, "Member 'WEAPON_Skorpion_C_ComputeSpreadDirection::CallFunc_Multiply_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(WEAPON_Skorpion_C_ComputeSpreadDirection, CallFunc_Multiply_FloatFloat_ReturnValue_1) == 0x00002C, "Member 'WEAPON_Skorpion_C_ComputeSpreadDirection::CallFunc_Multiply_FloatFloat_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(WEAPON_Skorpion_C_ComputeSpreadDirection, CallFunc_RandomFloatInRange_ReturnValue) == 0x000030, "Member 'WEAPON_Skorpion_C_ComputeSpreadDirection::CallFunc_RandomFloatInRange_ReturnValue' has a wrong offset!");
static_assert(offsetof(WEAPON_Skorpion_C_ComputeSpreadDirection, CallFunc_GetSpreadHalfAngle_Result) == 0x000034, "Member 'WEAPON_Skorpion_C_ComputeSpreadDirection::CallFunc_GetSpreadHalfAngle_Result' has a wrong offset!");
static_assert(offsetof(WEAPON_Skorpion_C_ComputeSpreadDirection, CallFunc_GetExactWeaponSpreadDirection_SpreadDirection) == 0x000038, "Member 'WEAPON_Skorpion_C_ComputeSpreadDirection::CallFunc_GetExactWeaponSpreadDirection_SpreadDirection' has a wrong offset!");

}

