#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: WIDGET_Compass

#include "Basic.hpp"

#include "UMG_structs.hpp"
#include "CoreUObject_structs.hpp"
#include "SlateCore_structs.hpp"


namespace SDK::Params
{

// Function WIDGET_Compass.WIDGET_Compass_C.ExecuteUbergraph_WIDGET_Compass
// 0x0040 (0x0040 - 0x0000)
struct WIDGET_Compass_C_ExecuteUbergraph_WIDGET_Compass final
{
public:
	int32                                         EntryPoint;                                        // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FGeometry                              K2Node_Event_MyGeometry;                           // 0x0004(0x0038)(IsPlainOldData, NoDestructor)
	float                                         K2Node_Event_InDeltaTime;                          // 0x003C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(WIDGET_Compass_C_ExecuteUbergraph_WIDGET_Compass) == 0x000004, "Wrong alignment on WIDGET_Compass_C_ExecuteUbergraph_WIDGET_Compass");
static_assert(sizeof(WIDGET_Compass_C_ExecuteUbergraph_WIDGET_Compass) == 0x000040, "Wrong size on WIDGET_Compass_C_ExecuteUbergraph_WIDGET_Compass");
static_assert(offsetof(WIDGET_Compass_C_ExecuteUbergraph_WIDGET_Compass, EntryPoint) == 0x000000, "Member 'WIDGET_Compass_C_ExecuteUbergraph_WIDGET_Compass::EntryPoint' has a wrong offset!");
static_assert(offsetof(WIDGET_Compass_C_ExecuteUbergraph_WIDGET_Compass, K2Node_Event_MyGeometry) == 0x000004, "Member 'WIDGET_Compass_C_ExecuteUbergraph_WIDGET_Compass::K2Node_Event_MyGeometry' has a wrong offset!");
static_assert(offsetof(WIDGET_Compass_C_ExecuteUbergraph_WIDGET_Compass, K2Node_Event_InDeltaTime) == 0x00003C, "Member 'WIDGET_Compass_C_ExecuteUbergraph_WIDGET_Compass::K2Node_Event_InDeltaTime' has a wrong offset!");

// Function WIDGET_Compass.WIDGET_Compass_C.Tick
// 0x003C (0x003C - 0x0000)
struct WIDGET_Compass_C_Tick final
{
public:
	struct FGeometry                              MyGeometry;                                        // 0x0000(0x0038)(BlueprintVisible, BlueprintReadOnly, Parm, IsPlainOldData, NoDestructor)
	float                                         InDeltaTime;                                       // 0x0038(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(WIDGET_Compass_C_Tick) == 0x000004, "Wrong alignment on WIDGET_Compass_C_Tick");
static_assert(sizeof(WIDGET_Compass_C_Tick) == 0x00003C, "Wrong size on WIDGET_Compass_C_Tick");
static_assert(offsetof(WIDGET_Compass_C_Tick, MyGeometry) == 0x000000, "Member 'WIDGET_Compass_C_Tick::MyGeometry' has a wrong offset!");
static_assert(offsetof(WIDGET_Compass_C_Tick, InDeltaTime) == 0x000038, "Member 'WIDGET_Compass_C_Tick::InDeltaTime' has a wrong offset!");

// Function WIDGET_Compass.WIDGET_Compass_C.UpdateCompass
// 0x0088 (0x0088 - 0x0000)
struct WIDGET_Compass_C_UpdateCompass final
{
public:
	float                                         DeltaTime;                                         // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         FadeInProgress;                                    // 0x0004(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FText                                   CardinalLetter;                                    // 0x0008(0x0018)(Edit, BlueprintVisible)
	int32                                         CurrentYaw;                                        // 0x0020(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         NewYawAngle;                                       // 0x0024(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_FTrunc_ReturnValue;                       // 0x0028(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_WrapIntUpperbound_ReturnValue;            // 0x002C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Divide_FloatFloat_ReturnValue;            // 0x0030(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_GreaterEqual_FloatFloat_ReturnValue;      // 0x0034(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_35[0x3];                                       // 0x0035(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_GetGameTimeInSeconds_ReturnValue;         // 0x0038(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Subtract_FloatFloat_ReturnValue;          // 0x003C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Greater_FloatFloat_ReturnValue;           // 0x0040(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_41[0x3];                                       // 0x0041(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_Divide_FloatFloat_ReturnValue_1;          // 0x0044(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_FMin_ReturnValue;                         // 0x0048(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Conv_IntToFloat_ReturnValue;              // 0x004C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_GridSnap_Float_ReturnValue;               // 0x0050(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Divide_FloatFloat_ReturnValue_2;          // 0x0054(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               CallFunc_K2_GetActorRotation_ReturnValue;          // 0x0058(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor)
	int32                                         CallFunc_FTrunc_ReturnValue_1;                     // 0x0064(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakRotator_Roll;                        // 0x0068(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakRotator_Pitch;                       // 0x006C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakRotator_Yaw;                         // 0x0070(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_WrapIntUpperbound_ReturnValue_1;          // 0x0074(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Add_FloatFloat_ReturnValue;               // 0x0078(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_ClampAxis_ReturnValue;                    // 0x007C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UMaterialInstanceDynamic*               CallFunc_ConvertToDynamicMaterialInstance_ReturnValue; // 0x0080(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(WIDGET_Compass_C_UpdateCompass) == 0x000008, "Wrong alignment on WIDGET_Compass_C_UpdateCompass");
static_assert(sizeof(WIDGET_Compass_C_UpdateCompass) == 0x000088, "Wrong size on WIDGET_Compass_C_UpdateCompass");
static_assert(offsetof(WIDGET_Compass_C_UpdateCompass, DeltaTime) == 0x000000, "Member 'WIDGET_Compass_C_UpdateCompass::DeltaTime' has a wrong offset!");
static_assert(offsetof(WIDGET_Compass_C_UpdateCompass, FadeInProgress) == 0x000004, "Member 'WIDGET_Compass_C_UpdateCompass::FadeInProgress' has a wrong offset!");
static_assert(offsetof(WIDGET_Compass_C_UpdateCompass, CardinalLetter) == 0x000008, "Member 'WIDGET_Compass_C_UpdateCompass::CardinalLetter' has a wrong offset!");
static_assert(offsetof(WIDGET_Compass_C_UpdateCompass, CurrentYaw) == 0x000020, "Member 'WIDGET_Compass_C_UpdateCompass::CurrentYaw' has a wrong offset!");
static_assert(offsetof(WIDGET_Compass_C_UpdateCompass, NewYawAngle) == 0x000024, "Member 'WIDGET_Compass_C_UpdateCompass::NewYawAngle' has a wrong offset!");
static_assert(offsetof(WIDGET_Compass_C_UpdateCompass, CallFunc_FTrunc_ReturnValue) == 0x000028, "Member 'WIDGET_Compass_C_UpdateCompass::CallFunc_FTrunc_ReturnValue' has a wrong offset!");
static_assert(offsetof(WIDGET_Compass_C_UpdateCompass, CallFunc_WrapIntUpperbound_ReturnValue) == 0x00002C, "Member 'WIDGET_Compass_C_UpdateCompass::CallFunc_WrapIntUpperbound_ReturnValue' has a wrong offset!");
static_assert(offsetof(WIDGET_Compass_C_UpdateCompass, CallFunc_Divide_FloatFloat_ReturnValue) == 0x000030, "Member 'WIDGET_Compass_C_UpdateCompass::CallFunc_Divide_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(WIDGET_Compass_C_UpdateCompass, CallFunc_GreaterEqual_FloatFloat_ReturnValue) == 0x000034, "Member 'WIDGET_Compass_C_UpdateCompass::CallFunc_GreaterEqual_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(WIDGET_Compass_C_UpdateCompass, CallFunc_GetGameTimeInSeconds_ReturnValue) == 0x000038, "Member 'WIDGET_Compass_C_UpdateCompass::CallFunc_GetGameTimeInSeconds_ReturnValue' has a wrong offset!");
static_assert(offsetof(WIDGET_Compass_C_UpdateCompass, CallFunc_Subtract_FloatFloat_ReturnValue) == 0x00003C, "Member 'WIDGET_Compass_C_UpdateCompass::CallFunc_Subtract_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(WIDGET_Compass_C_UpdateCompass, CallFunc_Greater_FloatFloat_ReturnValue) == 0x000040, "Member 'WIDGET_Compass_C_UpdateCompass::CallFunc_Greater_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(WIDGET_Compass_C_UpdateCompass, CallFunc_Divide_FloatFloat_ReturnValue_1) == 0x000044, "Member 'WIDGET_Compass_C_UpdateCompass::CallFunc_Divide_FloatFloat_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(WIDGET_Compass_C_UpdateCompass, CallFunc_FMin_ReturnValue) == 0x000048, "Member 'WIDGET_Compass_C_UpdateCompass::CallFunc_FMin_ReturnValue' has a wrong offset!");
static_assert(offsetof(WIDGET_Compass_C_UpdateCompass, CallFunc_Conv_IntToFloat_ReturnValue) == 0x00004C, "Member 'WIDGET_Compass_C_UpdateCompass::CallFunc_Conv_IntToFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(WIDGET_Compass_C_UpdateCompass, CallFunc_GridSnap_Float_ReturnValue) == 0x000050, "Member 'WIDGET_Compass_C_UpdateCompass::CallFunc_GridSnap_Float_ReturnValue' has a wrong offset!");
static_assert(offsetof(WIDGET_Compass_C_UpdateCompass, CallFunc_Divide_FloatFloat_ReturnValue_2) == 0x000054, "Member 'WIDGET_Compass_C_UpdateCompass::CallFunc_Divide_FloatFloat_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(WIDGET_Compass_C_UpdateCompass, CallFunc_K2_GetActorRotation_ReturnValue) == 0x000058, "Member 'WIDGET_Compass_C_UpdateCompass::CallFunc_K2_GetActorRotation_ReturnValue' has a wrong offset!");
static_assert(offsetof(WIDGET_Compass_C_UpdateCompass, CallFunc_FTrunc_ReturnValue_1) == 0x000064, "Member 'WIDGET_Compass_C_UpdateCompass::CallFunc_FTrunc_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(WIDGET_Compass_C_UpdateCompass, CallFunc_BreakRotator_Roll) == 0x000068, "Member 'WIDGET_Compass_C_UpdateCompass::CallFunc_BreakRotator_Roll' has a wrong offset!");
static_assert(offsetof(WIDGET_Compass_C_UpdateCompass, CallFunc_BreakRotator_Pitch) == 0x00006C, "Member 'WIDGET_Compass_C_UpdateCompass::CallFunc_BreakRotator_Pitch' has a wrong offset!");
static_assert(offsetof(WIDGET_Compass_C_UpdateCompass, CallFunc_BreakRotator_Yaw) == 0x000070, "Member 'WIDGET_Compass_C_UpdateCompass::CallFunc_BreakRotator_Yaw' has a wrong offset!");
static_assert(offsetof(WIDGET_Compass_C_UpdateCompass, CallFunc_WrapIntUpperbound_ReturnValue_1) == 0x000074, "Member 'WIDGET_Compass_C_UpdateCompass::CallFunc_WrapIntUpperbound_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(WIDGET_Compass_C_UpdateCompass, CallFunc_Add_FloatFloat_ReturnValue) == 0x000078, "Member 'WIDGET_Compass_C_UpdateCompass::CallFunc_Add_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(WIDGET_Compass_C_UpdateCompass, CallFunc_ClampAxis_ReturnValue) == 0x00007C, "Member 'WIDGET_Compass_C_UpdateCompass::CallFunc_ClampAxis_ReturnValue' has a wrong offset!");
static_assert(offsetof(WIDGET_Compass_C_UpdateCompass, CallFunc_ConvertToDynamicMaterialInstance_ReturnValue) == 0x000080, "Member 'WIDGET_Compass_C_UpdateCompass::CallFunc_ConvertToDynamicMaterialInstance_ReturnValue' has a wrong offset!");

// Function WIDGET_Compass.WIDGET_Compass_C.InitializeCompass
// 0x0038 (0x0038 - 0x0000)
struct WIDGET_Compass_C_InitializeCompass final
{
public:
	class UWIDGET_PlayerHUD_C*                    HUD;                                               // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TDelegate<void(int32 SlotIndex)>              K2Node_CreateDelegate_OutputDelegate;              // 0x0008(0x0010)(ZeroConstructor, NoDestructor)
	class UITEM_Base_C*                           CallFunc_FindItem_FoundItem;                       // 0x0018(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UHARDWARE_NavUnit_Base_C*               K2Node_DynamicCast_AsHARDWARE_Nav_Unit_Base;       // 0x0020(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0028(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_29[0x7];                                       // 0x0029(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UInventoryBag_C*                        CallFunc_GetBagByType_Bag;                         // 0x0030(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(WIDGET_Compass_C_InitializeCompass) == 0x000008, "Wrong alignment on WIDGET_Compass_C_InitializeCompass");
static_assert(sizeof(WIDGET_Compass_C_InitializeCompass) == 0x000038, "Wrong size on WIDGET_Compass_C_InitializeCompass");
static_assert(offsetof(WIDGET_Compass_C_InitializeCompass, HUD) == 0x000000, "Member 'WIDGET_Compass_C_InitializeCompass::HUD' has a wrong offset!");
static_assert(offsetof(WIDGET_Compass_C_InitializeCompass, K2Node_CreateDelegate_OutputDelegate) == 0x000008, "Member 'WIDGET_Compass_C_InitializeCompass::K2Node_CreateDelegate_OutputDelegate' has a wrong offset!");
static_assert(offsetof(WIDGET_Compass_C_InitializeCompass, CallFunc_FindItem_FoundItem) == 0x000018, "Member 'WIDGET_Compass_C_InitializeCompass::CallFunc_FindItem_FoundItem' has a wrong offset!");
static_assert(offsetof(WIDGET_Compass_C_InitializeCompass, K2Node_DynamicCast_AsHARDWARE_Nav_Unit_Base) == 0x000020, "Member 'WIDGET_Compass_C_InitializeCompass::K2Node_DynamicCast_AsHARDWARE_Nav_Unit_Base' has a wrong offset!");
static_assert(offsetof(WIDGET_Compass_C_InitializeCompass, K2Node_DynamicCast_bSuccess) == 0x000028, "Member 'WIDGET_Compass_C_InitializeCompass::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(WIDGET_Compass_C_InitializeCompass, CallFunc_GetBagByType_Bag) == 0x000030, "Member 'WIDGET_Compass_C_InitializeCompass::CallFunc_GetBagByType_Bag' has a wrong offset!");

// Function WIDGET_Compass.WIDGET_Compass_C.SetHardwareItem
// 0x0038 (0x0038 - 0x0000)
struct WIDGET_Compass_C_SetHardwareItem final
{
public:
	class UHARDWARE_NavUnit_Base_C*               Item;                                              // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          ShouldBeVisible;                                   // 0x0008(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	TDelegate<void(bool Activated, bool MagLocked)> K2Node_CreateDelegate_OutputDelegate;              // 0x000C(0x0010)(ZeroConstructor, NoDestructor)
	bool                                          CallFunc_GetIsActivated_Result;                    // 0x001C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x001D(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_1E[0x2];                                       // 0x001E(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	TDelegate<void(bool Activated, bool MagLocked)> K2Node_CreateDelegate_OutputDelegate_1;            // 0x0020(0x0010)(ZeroConstructor, NoDestructor)
	bool                                          CallFunc_IsValid_ReturnValue_1;                    // 0x0030(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(WIDGET_Compass_C_SetHardwareItem) == 0x000008, "Wrong alignment on WIDGET_Compass_C_SetHardwareItem");
static_assert(sizeof(WIDGET_Compass_C_SetHardwareItem) == 0x000038, "Wrong size on WIDGET_Compass_C_SetHardwareItem");
static_assert(offsetof(WIDGET_Compass_C_SetHardwareItem, Item) == 0x000000, "Member 'WIDGET_Compass_C_SetHardwareItem::Item' has a wrong offset!");
static_assert(offsetof(WIDGET_Compass_C_SetHardwareItem, ShouldBeVisible) == 0x000008, "Member 'WIDGET_Compass_C_SetHardwareItem::ShouldBeVisible' has a wrong offset!");
static_assert(offsetof(WIDGET_Compass_C_SetHardwareItem, K2Node_CreateDelegate_OutputDelegate) == 0x00000C, "Member 'WIDGET_Compass_C_SetHardwareItem::K2Node_CreateDelegate_OutputDelegate' has a wrong offset!");
static_assert(offsetof(WIDGET_Compass_C_SetHardwareItem, CallFunc_GetIsActivated_Result) == 0x00001C, "Member 'WIDGET_Compass_C_SetHardwareItem::CallFunc_GetIsActivated_Result' has a wrong offset!");
static_assert(offsetof(WIDGET_Compass_C_SetHardwareItem, CallFunc_IsValid_ReturnValue) == 0x00001D, "Member 'WIDGET_Compass_C_SetHardwareItem::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(WIDGET_Compass_C_SetHardwareItem, K2Node_CreateDelegate_OutputDelegate_1) == 0x000020, "Member 'WIDGET_Compass_C_SetHardwareItem::K2Node_CreateDelegate_OutputDelegate_1' has a wrong offset!");
static_assert(offsetof(WIDGET_Compass_C_SetHardwareItem, CallFunc_IsValid_ReturnValue_1) == 0x000030, "Member 'WIDGET_Compass_C_SetHardwareItem::CallFunc_IsValid_ReturnValue_1' has a wrong offset!");

// Function WIDGET_Compass.WIDGET_Compass_C.EVENT_OnHardwareBagChanged
// 0x0020 (0x0020 - 0x0000)
struct WIDGET_Compass_C_EVENT_OnHardwareBagChanged final
{
public:
	int32                                         SlotIndex;                                         // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UITEM_Base_C*                           CallFunc_GetSlotItem_Item;                         // 0x0008(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UHARDWARE_NavUnit_Base_C*               K2Node_DynamicCast_AsHARDWARE_Nav_Unit_Base;       // 0x0010(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0018(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(WIDGET_Compass_C_EVENT_OnHardwareBagChanged) == 0x000008, "Wrong alignment on WIDGET_Compass_C_EVENT_OnHardwareBagChanged");
static_assert(sizeof(WIDGET_Compass_C_EVENT_OnHardwareBagChanged) == 0x000020, "Wrong size on WIDGET_Compass_C_EVENT_OnHardwareBagChanged");
static_assert(offsetof(WIDGET_Compass_C_EVENT_OnHardwareBagChanged, SlotIndex) == 0x000000, "Member 'WIDGET_Compass_C_EVENT_OnHardwareBagChanged::SlotIndex' has a wrong offset!");
static_assert(offsetof(WIDGET_Compass_C_EVENT_OnHardwareBagChanged, CallFunc_GetSlotItem_Item) == 0x000008, "Member 'WIDGET_Compass_C_EVENT_OnHardwareBagChanged::CallFunc_GetSlotItem_Item' has a wrong offset!");
static_assert(offsetof(WIDGET_Compass_C_EVENT_OnHardwareBagChanged, K2Node_DynamicCast_AsHARDWARE_Nav_Unit_Base) == 0x000010, "Member 'WIDGET_Compass_C_EVENT_OnHardwareBagChanged::K2Node_DynamicCast_AsHARDWARE_Nav_Unit_Base' has a wrong offset!");
static_assert(offsetof(WIDGET_Compass_C_EVENT_OnHardwareBagChanged, K2Node_DynamicCast_bSuccess) == 0x000018, "Member 'WIDGET_Compass_C_EVENT_OnHardwareBagChanged::K2Node_DynamicCast_bSuccess' has a wrong offset!");

// Function WIDGET_Compass.WIDGET_Compass_C.EVENT_OnHardwareStateChanged
// 0x0004 (0x0004 - 0x0000)
struct WIDGET_Compass_C_EVENT_OnHardwareStateChanged final
{
public:
	bool                                          Activated;                                         // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          MagLocked;                                         // 0x0001(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Not_PreBool_ReturnValue;                  // 0x0002(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BooleanAND_ReturnValue;                   // 0x0003(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(WIDGET_Compass_C_EVENT_OnHardwareStateChanged) == 0x000001, "Wrong alignment on WIDGET_Compass_C_EVENT_OnHardwareStateChanged");
static_assert(sizeof(WIDGET_Compass_C_EVENT_OnHardwareStateChanged) == 0x000004, "Wrong size on WIDGET_Compass_C_EVENT_OnHardwareStateChanged");
static_assert(offsetof(WIDGET_Compass_C_EVENT_OnHardwareStateChanged, Activated) == 0x000000, "Member 'WIDGET_Compass_C_EVENT_OnHardwareStateChanged::Activated' has a wrong offset!");
static_assert(offsetof(WIDGET_Compass_C_EVENT_OnHardwareStateChanged, MagLocked) == 0x000001, "Member 'WIDGET_Compass_C_EVENT_OnHardwareStateChanged::MagLocked' has a wrong offset!");
static_assert(offsetof(WIDGET_Compass_C_EVENT_OnHardwareStateChanged, CallFunc_Not_PreBool_ReturnValue) == 0x000002, "Member 'WIDGET_Compass_C_EVENT_OnHardwareStateChanged::CallFunc_Not_PreBool_ReturnValue' has a wrong offset!");
static_assert(offsetof(WIDGET_Compass_C_EVENT_OnHardwareStateChanged, CallFunc_BooleanAND_ReturnValue) == 0x000003, "Member 'WIDGET_Compass_C_EVENT_OnHardwareStateChanged::CallFunc_BooleanAND_ReturnValue' has a wrong offset!");

// Function WIDGET_Compass.WIDGET_Compass_C.SetCompassVisibility
// 0x0010 (0x0010 - 0x0000)
struct WIDGET_Compass_C_SetCompassVisibility final
{
public:
	bool                                          Visible;                                           // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Temp_bool_Variable;                                // 0x0001(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	ESlateVisibility                              Temp_byte_Variable;                                // 0x0002(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ESlateVisibility                              Temp_byte_Variable_1;                              // 0x0003(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ESlateVisibility                              K2Node_Select_Default;                             // 0x0004(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_GetGameTimeInSeconds_ReturnValue;         // 0x0008(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BooleanAND_ReturnValue;                   // 0x000C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(WIDGET_Compass_C_SetCompassVisibility) == 0x000004, "Wrong alignment on WIDGET_Compass_C_SetCompassVisibility");
static_assert(sizeof(WIDGET_Compass_C_SetCompassVisibility) == 0x000010, "Wrong size on WIDGET_Compass_C_SetCompassVisibility");
static_assert(offsetof(WIDGET_Compass_C_SetCompassVisibility, Visible) == 0x000000, "Member 'WIDGET_Compass_C_SetCompassVisibility::Visible' has a wrong offset!");
static_assert(offsetof(WIDGET_Compass_C_SetCompassVisibility, Temp_bool_Variable) == 0x000001, "Member 'WIDGET_Compass_C_SetCompassVisibility::Temp_bool_Variable' has a wrong offset!");
static_assert(offsetof(WIDGET_Compass_C_SetCompassVisibility, Temp_byte_Variable) == 0x000002, "Member 'WIDGET_Compass_C_SetCompassVisibility::Temp_byte_Variable' has a wrong offset!");
static_assert(offsetof(WIDGET_Compass_C_SetCompassVisibility, Temp_byte_Variable_1) == 0x000003, "Member 'WIDGET_Compass_C_SetCompassVisibility::Temp_byte_Variable_1' has a wrong offset!");
static_assert(offsetof(WIDGET_Compass_C_SetCompassVisibility, K2Node_Select_Default) == 0x000004, "Member 'WIDGET_Compass_C_SetCompassVisibility::K2Node_Select_Default' has a wrong offset!");
static_assert(offsetof(WIDGET_Compass_C_SetCompassVisibility, CallFunc_GetGameTimeInSeconds_ReturnValue) == 0x000008, "Member 'WIDGET_Compass_C_SetCompassVisibility::CallFunc_GetGameTimeInSeconds_ReturnValue' has a wrong offset!");
static_assert(offsetof(WIDGET_Compass_C_SetCompassVisibility, CallFunc_BooleanAND_ReturnValue) == 0x00000C, "Member 'WIDGET_Compass_C_SetCompassVisibility::CallFunc_BooleanAND_ReturnValue' has a wrong offset!");

// Function WIDGET_Compass.WIDGET_Compass_C.DisableFlickerEffect
// 0x0001 (0x0001 - 0x0000)
struct WIDGET_Compass_C_DisableFlickerEffect final
{
public:
	bool                                          Result;                                            // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(WIDGET_Compass_C_DisableFlickerEffect) == 0x000001, "Wrong alignment on WIDGET_Compass_C_DisableFlickerEffect");
static_assert(sizeof(WIDGET_Compass_C_DisableFlickerEffect) == 0x000001, "Wrong size on WIDGET_Compass_C_DisableFlickerEffect");
static_assert(offsetof(WIDGET_Compass_C_DisableFlickerEffect, Result) == 0x000000, "Member 'WIDGET_Compass_C_DisableFlickerEffect::Result' has a wrong offset!");

// Function WIDGET_Compass.WIDGET_Compass_C.EnableFlickerEffect
// 0x0001 (0x0001 - 0x0000)
struct WIDGET_Compass_C_EnableFlickerEffect final
{
public:
	bool                                          Result;                                            // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(WIDGET_Compass_C_EnableFlickerEffect) == 0x000001, "Wrong alignment on WIDGET_Compass_C_EnableFlickerEffect");
static_assert(sizeof(WIDGET_Compass_C_EnableFlickerEffect) == 0x000001, "Wrong size on WIDGET_Compass_C_EnableFlickerEffect");
static_assert(offsetof(WIDGET_Compass_C_EnableFlickerEffect, Result) == 0x000000, "Member 'WIDGET_Compass_C_EnableFlickerEffect::Result' has a wrong offset!");

// Function WIDGET_Compass.WIDGET_Compass_C.OnMouseExit
// 0x0001 (0x0001 - 0x0000)
struct WIDGET_Compass_C_OnMouseExit final
{
public:
	bool                                          Result;                                            // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(WIDGET_Compass_C_OnMouseExit) == 0x000001, "Wrong alignment on WIDGET_Compass_C_OnMouseExit");
static_assert(sizeof(WIDGET_Compass_C_OnMouseExit) == 0x000001, "Wrong size on WIDGET_Compass_C_OnMouseExit");
static_assert(offsetof(WIDGET_Compass_C_OnMouseExit, Result) == 0x000000, "Member 'WIDGET_Compass_C_OnMouseExit::Result' has a wrong offset!");

// Function WIDGET_Compass.WIDGET_Compass_C.OnMouseOver
// 0x0001 (0x0001 - 0x0000)
struct WIDGET_Compass_C_OnMouseOver final
{
public:
	bool                                          Result;                                            // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(WIDGET_Compass_C_OnMouseOver) == 0x000001, "Wrong alignment on WIDGET_Compass_C_OnMouseOver");
static_assert(sizeof(WIDGET_Compass_C_OnMouseOver) == 0x000001, "Wrong size on WIDGET_Compass_C_OnMouseOver");
static_assert(offsetof(WIDGET_Compass_C_OnMouseOver, Result) == 0x000000, "Member 'WIDGET_Compass_C_OnMouseOver::Result' has a wrong offset!");

// Function WIDGET_Compass.WIDGET_Compass_C.GetMeshWidget
// 0x0008 (0x0008 - 0x0000)
struct WIDGET_Compass_C_GetMeshWidget final
{
public:
	class UGridMeshWidget*                        Result;                                            // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(WIDGET_Compass_C_GetMeshWidget) == 0x000008, "Wrong alignment on WIDGET_Compass_C_GetMeshWidget");
static_assert(sizeof(WIDGET_Compass_C_GetMeshWidget) == 0x000008, "Wrong size on WIDGET_Compass_C_GetMeshWidget");
static_assert(offsetof(WIDGET_Compass_C_GetMeshWidget, Result) == 0x000000, "Member 'WIDGET_Compass_C_GetMeshWidget::Result' has a wrong offset!");

}

