#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: TASK_Move

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "ENUM_FailSucceedIgnore_structs.hpp"
#include "CoreUObject_structs.hpp"
#include "ENUM_MoveSpeed_structs.hpp"
#include "ENUM_SpeedType_structs.hpp"
#include "AIModule_classes.hpp"


namespace SDK
{

// BlueprintGeneratedClass TASK_Move.TASK_Move_C
// 0x0048 (0x00F0 - 0x00A8)
class UTASK_Move_C final : public UBTTask_BlueprintBase
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x00A8(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	class APAWN_Enemy_C*                          EnemyPawn;                                         // 0x00B0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UCOMP_EnemyMovement_C*                  EnemyMovementComponent;                            // 0x00B8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ENUM_MoveSpeed                                MoveSpeed;                                         // 0x00C0(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ENUM_SpeedType                                MoveSpeed_ChangeRate;                              // 0x00C1(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ENUM_FailSucceedIgnore                        Navigation_ArrivalBehavior;                        // 0x00C2(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ENUM_FailSucceedIgnore                        Navigation_PartialPathBehavior;                    // 0x00C3(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ENUM_SpeedType                                MoveDirection_RotateRate;                          // 0x00C4(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ENUM_FailSucceedIgnore                        MoveSpeed_FinishedBehavior;                        // 0x00C5(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ENUM_SpeedType                                BodyRotation_Speed;                                // 0x00C6(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          AutoStop;                                          // 0x00C7(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	ENUM_FailSucceedIgnore                        ImmediateBehavior;                                 // 0x00C8(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ENUM_FailSucceedIgnore                        BodyRotation_FinishedBehavior;                     // 0x00C9(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_CA[0x2];                                       // 0x00CA(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         BodyRotation_FinishedAngle;                        // 0x00CC(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         AcceptanceRadius;                                  // 0x00D0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ENUM_FailSucceedIgnore                        NavigationArrivalBehaviorToFollow;                 // 0x00D4(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ENUM_FailSucceedIgnore                        MoveSpeedFinishedBehaviorToFollow;                 // 0x00D5(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ENUM_MoveSpeed                                MoveSpeedToTarget;                                 // 0x00D6(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_D7[0x1];                                       // 0x00D7(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         MoveWarningTimestamp;                              // 0x00D8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                PreviousLocation;                                  // 0x00DC(0x000C)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          ShowDebugPrintWarnings;                            // 0x00E8(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)

public:
	void ExecuteUbergraph_TASK_Move(int32 EntryPoint);
	void ReceiveTickAI(class AAIController* OwnerController, class APawn* ControlledPawn, float DeltaSeconds);
	void ReceiveAbortAI(class AAIController* OwnerController, class APawn* ControlledPawn);
	void ReceiveExecuteAI(class AAIController* OwnerController, class APawn* ControlledPawn);
	void Zero_Stop();
	void One_Walk();
	void Two_Jog();
	void Three_Sprint();
	void Four_Turn();

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"TASK_Move_C">();
	}
	static class UTASK_Move_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<UTASK_Move_C>();
	}
};
static_assert(alignof(UTASK_Move_C) == 0x000008, "Wrong alignment on UTASK_Move_C");
static_assert(sizeof(UTASK_Move_C) == 0x0000F0, "Wrong size on UTASK_Move_C");
static_assert(offsetof(UTASK_Move_C, UberGraphFrame) == 0x0000A8, "Member 'UTASK_Move_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(UTASK_Move_C, EnemyPawn) == 0x0000B0, "Member 'UTASK_Move_C::EnemyPawn' has a wrong offset!");
static_assert(offsetof(UTASK_Move_C, EnemyMovementComponent) == 0x0000B8, "Member 'UTASK_Move_C::EnemyMovementComponent' has a wrong offset!");
static_assert(offsetof(UTASK_Move_C, MoveSpeed) == 0x0000C0, "Member 'UTASK_Move_C::MoveSpeed' has a wrong offset!");
static_assert(offsetof(UTASK_Move_C, MoveSpeed_ChangeRate) == 0x0000C1, "Member 'UTASK_Move_C::MoveSpeed_ChangeRate' has a wrong offset!");
static_assert(offsetof(UTASK_Move_C, Navigation_ArrivalBehavior) == 0x0000C2, "Member 'UTASK_Move_C::Navigation_ArrivalBehavior' has a wrong offset!");
static_assert(offsetof(UTASK_Move_C, Navigation_PartialPathBehavior) == 0x0000C3, "Member 'UTASK_Move_C::Navigation_PartialPathBehavior' has a wrong offset!");
static_assert(offsetof(UTASK_Move_C, MoveDirection_RotateRate) == 0x0000C4, "Member 'UTASK_Move_C::MoveDirection_RotateRate' has a wrong offset!");
static_assert(offsetof(UTASK_Move_C, MoveSpeed_FinishedBehavior) == 0x0000C5, "Member 'UTASK_Move_C::MoveSpeed_FinishedBehavior' has a wrong offset!");
static_assert(offsetof(UTASK_Move_C, BodyRotation_Speed) == 0x0000C6, "Member 'UTASK_Move_C::BodyRotation_Speed' has a wrong offset!");
static_assert(offsetof(UTASK_Move_C, AutoStop) == 0x0000C7, "Member 'UTASK_Move_C::AutoStop' has a wrong offset!");
static_assert(offsetof(UTASK_Move_C, ImmediateBehavior) == 0x0000C8, "Member 'UTASK_Move_C::ImmediateBehavior' has a wrong offset!");
static_assert(offsetof(UTASK_Move_C, BodyRotation_FinishedBehavior) == 0x0000C9, "Member 'UTASK_Move_C::BodyRotation_FinishedBehavior' has a wrong offset!");
static_assert(offsetof(UTASK_Move_C, BodyRotation_FinishedAngle) == 0x0000CC, "Member 'UTASK_Move_C::BodyRotation_FinishedAngle' has a wrong offset!");
static_assert(offsetof(UTASK_Move_C, AcceptanceRadius) == 0x0000D0, "Member 'UTASK_Move_C::AcceptanceRadius' has a wrong offset!");
static_assert(offsetof(UTASK_Move_C, NavigationArrivalBehaviorToFollow) == 0x0000D4, "Member 'UTASK_Move_C::NavigationArrivalBehaviorToFollow' has a wrong offset!");
static_assert(offsetof(UTASK_Move_C, MoveSpeedFinishedBehaviorToFollow) == 0x0000D5, "Member 'UTASK_Move_C::MoveSpeedFinishedBehaviorToFollow' has a wrong offset!");
static_assert(offsetof(UTASK_Move_C, MoveSpeedToTarget) == 0x0000D6, "Member 'UTASK_Move_C::MoveSpeedToTarget' has a wrong offset!");
static_assert(offsetof(UTASK_Move_C, MoveWarningTimestamp) == 0x0000D8, "Member 'UTASK_Move_C::MoveWarningTimestamp' has a wrong offset!");
static_assert(offsetof(UTASK_Move_C, PreviousLocation) == 0x0000DC, "Member 'UTASK_Move_C::PreviousLocation' has a wrong offset!");
static_assert(offsetof(UTASK_Move_C, ShowDebugPrintWarnings) == 0x0000E8, "Member 'UTASK_Move_C::ShowDebugPrintWarnings' has a wrong offset!");

}

