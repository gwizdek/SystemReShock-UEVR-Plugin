#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: COMP_EnemySensingComponent

#include "Basic.hpp"

#include "CoreUObject_structs.hpp"
#include "Engine_structs.hpp"
#include "ENUM_VisionTraceType_structs.hpp"


namespace SDK::Params
{

// Function COMP_EnemySensingComponent.COMP_EnemySensingComponent_C.OnSeePawn__DelegateSignature
// 0x0018 (0x0018 - 0x0000)
struct COMP_EnemySensingComponent_C_OnSeePawn__DelegateSignature final
{
public:
	class APAWN_SystemShockCharacter_C*           Pawn;                                              // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                Location;                                          // 0x0008(0x000C)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(COMP_EnemySensingComponent_C_OnSeePawn__DelegateSignature) == 0x000008, "Wrong alignment on COMP_EnemySensingComponent_C_OnSeePawn__DelegateSignature");
static_assert(sizeof(COMP_EnemySensingComponent_C_OnSeePawn__DelegateSignature) == 0x000018, "Wrong size on COMP_EnemySensingComponent_C_OnSeePawn__DelegateSignature");
static_assert(offsetof(COMP_EnemySensingComponent_C_OnSeePawn__DelegateSignature, Pawn) == 0x000000, "Member 'COMP_EnemySensingComponent_C_OnSeePawn__DelegateSignature::Pawn' has a wrong offset!");
static_assert(offsetof(COMP_EnemySensingComponent_C_OnSeePawn__DelegateSignature, Location) == 0x000008, "Member 'COMP_EnemySensingComponent_C_OnSeePawn__DelegateSignature::Location' has a wrong offset!");

// Function COMP_EnemySensingComponent.COMP_EnemySensingComponent_C.OnHearPawn__DelegateSignature
// 0x0018 (0x0018 - 0x0000)
struct COMP_EnemySensingComponent_C_OnHearPawn__DelegateSignature final
{
public:
	class APAWN_SystemShockCharacter_C*           Pawn;                                              // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                Location;                                          // 0x0008(0x000C)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Loudness;                                          // 0x0014(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(COMP_EnemySensingComponent_C_OnHearPawn__DelegateSignature) == 0x000008, "Wrong alignment on COMP_EnemySensingComponent_C_OnHearPawn__DelegateSignature");
static_assert(sizeof(COMP_EnemySensingComponent_C_OnHearPawn__DelegateSignature) == 0x000018, "Wrong size on COMP_EnemySensingComponent_C_OnHearPawn__DelegateSignature");
static_assert(offsetof(COMP_EnemySensingComponent_C_OnHearPawn__DelegateSignature, Pawn) == 0x000000, "Member 'COMP_EnemySensingComponent_C_OnHearPawn__DelegateSignature::Pawn' has a wrong offset!");
static_assert(offsetof(COMP_EnemySensingComponent_C_OnHearPawn__DelegateSignature, Location) == 0x000008, "Member 'COMP_EnemySensingComponent_C_OnHearPawn__DelegateSignature::Location' has a wrong offset!");
static_assert(offsetof(COMP_EnemySensingComponent_C_OnHearPawn__DelegateSignature, Loudness) == 0x000014, "Member 'COMP_EnemySensingComponent_C_OnHearPawn__DelegateSignature::Loudness' has a wrong offset!");

// Function COMP_EnemySensingComponent.COMP_EnemySensingComponent_C.ExecuteUbergraph_COMP_EnemySensingComponent
// 0x0008 (0x0008 - 0x0000)
struct COMP_EnemySensingComponent_C_ExecuteUbergraph_COMP_EnemySensingComponent final
{
public:
	int32                                         EntryPoint;                                        // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         K2Node_Event_DeltaSeconds;                         // 0x0004(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(COMP_EnemySensingComponent_C_ExecuteUbergraph_COMP_EnemySensingComponent) == 0x000004, "Wrong alignment on COMP_EnemySensingComponent_C_ExecuteUbergraph_COMP_EnemySensingComponent");
static_assert(sizeof(COMP_EnemySensingComponent_C_ExecuteUbergraph_COMP_EnemySensingComponent) == 0x000008, "Wrong size on COMP_EnemySensingComponent_C_ExecuteUbergraph_COMP_EnemySensingComponent");
static_assert(offsetof(COMP_EnemySensingComponent_C_ExecuteUbergraph_COMP_EnemySensingComponent, EntryPoint) == 0x000000, "Member 'COMP_EnemySensingComponent_C_ExecuteUbergraph_COMP_EnemySensingComponent::EntryPoint' has a wrong offset!");
static_assert(offsetof(COMP_EnemySensingComponent_C_ExecuteUbergraph_COMP_EnemySensingComponent, K2Node_Event_DeltaSeconds) == 0x000004, "Member 'COMP_EnemySensingComponent_C_ExecuteUbergraph_COMP_EnemySensingComponent::K2Node_Event_DeltaSeconds' has a wrong offset!");

// Function COMP_EnemySensingComponent.COMP_EnemySensingComponent_C.ReceiveTick
// 0x0004 (0x0004 - 0x0000)
struct COMP_EnemySensingComponent_C_ReceiveTick final
{
public:
	float                                         DeltaSeconds;                                      // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(COMP_EnemySensingComponent_C_ReceiveTick) == 0x000004, "Wrong alignment on COMP_EnemySensingComponent_C_ReceiveTick");
static_assert(sizeof(COMP_EnemySensingComponent_C_ReceiveTick) == 0x000004, "Wrong size on COMP_EnemySensingComponent_C_ReceiveTick");
static_assert(offsetof(COMP_EnemySensingComponent_C_ReceiveTick, DeltaSeconds) == 0x000000, "Member 'COMP_EnemySensingComponent_C_ReceiveTick::DeltaSeconds' has a wrong offset!");

// Function COMP_EnemySensingComponent.COMP_EnemySensingComponent_C.InitializeSensingComponent
// 0x0050 (0x0050 - 0x0000)
struct COMP_EnemySensingComponent_C_InitializeSensingComponent final
{
public:
	class UCOMP_EnemyDetection_C*                 DetectionComponent;                                // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class USceneComponent*                        BodyComponent_0;                                   // 0x0008(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FName                                   BodySocketName_0;                                  // 0x0010(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               LocalBodyRotation_0;                               // 0x0018(0x000C)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_24[0x4];                                       // 0x0024(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class USceneComponent*                        HeadComponent_0;                                   // 0x0028(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FName                                   HeadSocketName_0;                                  // 0x0030(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                LocalHeadOffset_0;                                 // 0x0038(0x000C)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_DegCos_ReturnValue;                       // 0x0044(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Square_ReturnValue;                       // 0x0048(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(COMP_EnemySensingComponent_C_InitializeSensingComponent) == 0x000008, "Wrong alignment on COMP_EnemySensingComponent_C_InitializeSensingComponent");
static_assert(sizeof(COMP_EnemySensingComponent_C_InitializeSensingComponent) == 0x000050, "Wrong size on COMP_EnemySensingComponent_C_InitializeSensingComponent");
static_assert(offsetof(COMP_EnemySensingComponent_C_InitializeSensingComponent, DetectionComponent) == 0x000000, "Member 'COMP_EnemySensingComponent_C_InitializeSensingComponent::DetectionComponent' has a wrong offset!");
static_assert(offsetof(COMP_EnemySensingComponent_C_InitializeSensingComponent, BodyComponent_0) == 0x000008, "Member 'COMP_EnemySensingComponent_C_InitializeSensingComponent::BodyComponent_0' has a wrong offset!");
static_assert(offsetof(COMP_EnemySensingComponent_C_InitializeSensingComponent, BodySocketName_0) == 0x000010, "Member 'COMP_EnemySensingComponent_C_InitializeSensingComponent::BodySocketName_0' has a wrong offset!");
static_assert(offsetof(COMP_EnemySensingComponent_C_InitializeSensingComponent, LocalBodyRotation_0) == 0x000018, "Member 'COMP_EnemySensingComponent_C_InitializeSensingComponent::LocalBodyRotation_0' has a wrong offset!");
static_assert(offsetof(COMP_EnemySensingComponent_C_InitializeSensingComponent, HeadComponent_0) == 0x000028, "Member 'COMP_EnemySensingComponent_C_InitializeSensingComponent::HeadComponent_0' has a wrong offset!");
static_assert(offsetof(COMP_EnemySensingComponent_C_InitializeSensingComponent, HeadSocketName_0) == 0x000030, "Member 'COMP_EnemySensingComponent_C_InitializeSensingComponent::HeadSocketName_0' has a wrong offset!");
static_assert(offsetof(COMP_EnemySensingComponent_C_InitializeSensingComponent, LocalHeadOffset_0) == 0x000038, "Member 'COMP_EnemySensingComponent_C_InitializeSensingComponent::LocalHeadOffset_0' has a wrong offset!");
static_assert(offsetof(COMP_EnemySensingComponent_C_InitializeSensingComponent, CallFunc_DegCos_ReturnValue) == 0x000044, "Member 'COMP_EnemySensingComponent_C_InitializeSensingComponent::CallFunc_DegCos_ReturnValue' has a wrong offset!");
static_assert(offsetof(COMP_EnemySensingComponent_C_InitializeSensingComponent, CallFunc_Square_ReturnValue) == 0x000048, "Member 'COMP_EnemySensingComponent_C_InitializeSensingComponent::CallFunc_Square_ReturnValue' has a wrong offset!");

// Function COMP_EnemySensingComponent.COMP_EnemySensingComponent_C.BindAttributeEvents
// 0x0068 (0x0068 - 0x0000)
struct COMP_EnemySensingComponent_C_BindAttributeEvents final
{
public:
	class UAttribInstance*                        SightDistanceAtribInstance;                        // 0x0000(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UAttribInstance*                        SightConeAttribInstance;                           // 0x0008(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class APAWN_SystemShockCharacter_C*           Character;                                         // 0x0010(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash)
	float                                         CallFunc_GetValue_ReturnValue;                     // 0x0018(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_GetValue_ReturnValue_1;                   // 0x001C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TDelegate<void(float CurrValue, float LastValue)> K2Node_CreateDelegate_OutputDelegate;              // 0x0020(0x0010)(ZeroConstructor, NoDestructor)
	TDelegate<void(float CurrValue, float LastValue)> K2Node_CreateDelegate_OutputDelegate_1;            // 0x0030(0x0010)(ZeroConstructor, NoDestructor)
	class UAttribInstance*                        CallFunc_GetOrCreateAttribInstance_ReturnValue;    // 0x0040(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 CallFunc_GetOwner_ReturnValue;                     // 0x0048(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class APAWN_SystemShockCharacter_C*           K2Node_DynamicCast_AsPAWN_System_Shock_Character;  // 0x0050(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0058(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_59[0x7];                                       // 0x0059(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UAttribInstance*                        CallFunc_GetOrCreateAttribInstance_ReturnValue_1;  // 0x0060(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(COMP_EnemySensingComponent_C_BindAttributeEvents) == 0x000008, "Wrong alignment on COMP_EnemySensingComponent_C_BindAttributeEvents");
static_assert(sizeof(COMP_EnemySensingComponent_C_BindAttributeEvents) == 0x000068, "Wrong size on COMP_EnemySensingComponent_C_BindAttributeEvents");
static_assert(offsetof(COMP_EnemySensingComponent_C_BindAttributeEvents, SightDistanceAtribInstance) == 0x000000, "Member 'COMP_EnemySensingComponent_C_BindAttributeEvents::SightDistanceAtribInstance' has a wrong offset!");
static_assert(offsetof(COMP_EnemySensingComponent_C_BindAttributeEvents, SightConeAttribInstance) == 0x000008, "Member 'COMP_EnemySensingComponent_C_BindAttributeEvents::SightConeAttribInstance' has a wrong offset!");
static_assert(offsetof(COMP_EnemySensingComponent_C_BindAttributeEvents, Character) == 0x000010, "Member 'COMP_EnemySensingComponent_C_BindAttributeEvents::Character' has a wrong offset!");
static_assert(offsetof(COMP_EnemySensingComponent_C_BindAttributeEvents, CallFunc_GetValue_ReturnValue) == 0x000018, "Member 'COMP_EnemySensingComponent_C_BindAttributeEvents::CallFunc_GetValue_ReturnValue' has a wrong offset!");
static_assert(offsetof(COMP_EnemySensingComponent_C_BindAttributeEvents, CallFunc_GetValue_ReturnValue_1) == 0x00001C, "Member 'COMP_EnemySensingComponent_C_BindAttributeEvents::CallFunc_GetValue_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(COMP_EnemySensingComponent_C_BindAttributeEvents, K2Node_CreateDelegate_OutputDelegate) == 0x000020, "Member 'COMP_EnemySensingComponent_C_BindAttributeEvents::K2Node_CreateDelegate_OutputDelegate' has a wrong offset!");
static_assert(offsetof(COMP_EnemySensingComponent_C_BindAttributeEvents, K2Node_CreateDelegate_OutputDelegate_1) == 0x000030, "Member 'COMP_EnemySensingComponent_C_BindAttributeEvents::K2Node_CreateDelegate_OutputDelegate_1' has a wrong offset!");
static_assert(offsetof(COMP_EnemySensingComponent_C_BindAttributeEvents, CallFunc_GetOrCreateAttribInstance_ReturnValue) == 0x000040, "Member 'COMP_EnemySensingComponent_C_BindAttributeEvents::CallFunc_GetOrCreateAttribInstance_ReturnValue' has a wrong offset!");
static_assert(offsetof(COMP_EnemySensingComponent_C_BindAttributeEvents, CallFunc_GetOwner_ReturnValue) == 0x000048, "Member 'COMP_EnemySensingComponent_C_BindAttributeEvents::CallFunc_GetOwner_ReturnValue' has a wrong offset!");
static_assert(offsetof(COMP_EnemySensingComponent_C_BindAttributeEvents, K2Node_DynamicCast_AsPAWN_System_Shock_Character) == 0x000050, "Member 'COMP_EnemySensingComponent_C_BindAttributeEvents::K2Node_DynamicCast_AsPAWN_System_Shock_Character' has a wrong offset!");
static_assert(offsetof(COMP_EnemySensingComponent_C_BindAttributeEvents, K2Node_DynamicCast_bSuccess) == 0x000058, "Member 'COMP_EnemySensingComponent_C_BindAttributeEvents::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(COMP_EnemySensingComponent_C_BindAttributeEvents, CallFunc_GetOrCreateAttribInstance_ReturnValue_1) == 0x000060, "Member 'COMP_EnemySensingComponent_C_BindAttributeEvents::CallFunc_GetOrCreateAttribInstance_ReturnValue_1' has a wrong offset!");

// Function COMP_EnemySensingComponent.COMP_EnemySensingComponent_C.SetSensingUpdatesEnabled
// 0x0001 (0x0001 - 0x0000)
struct COMP_EnemySensingComponent_C_SetSensingUpdatesEnabled final
{
public:
	bool                                          Enabled;                                           // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(COMP_EnemySensingComponent_C_SetSensingUpdatesEnabled) == 0x000001, "Wrong alignment on COMP_EnemySensingComponent_C_SetSensingUpdatesEnabled");
static_assert(sizeof(COMP_EnemySensingComponent_C_SetSensingUpdatesEnabled) == 0x000001, "Wrong size on COMP_EnemySensingComponent_C_SetSensingUpdatesEnabled");
static_assert(offsetof(COMP_EnemySensingComponent_C_SetSensingUpdatesEnabled, Enabled) == 0x000000, "Member 'COMP_EnemySensingComponent_C_SetSensingUpdatesEnabled::Enabled' has a wrong offset!");

// Function COMP_EnemySensingComponent.COMP_EnemySensingComponent_C.SetSightDistance
// 0x0020 (0x0020 - 0x0000)
struct COMP_EnemySensingComponent_C_SetSightDistance final
{
public:
	float                                         NewDistance;                                       // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         SightDistanceScale;                                // 0x0004(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 CallFunc_GetOwner_ReturnValue;                     // 0x0008(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class APAWN_SystemShockCharacter_C*           K2Node_DynamicCast_AsPAWN_System_Shock_Character;  // 0x0010(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0018(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_19[0x3];                                       // 0x0019(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_GetAttribValue_ReturnValue;               // 0x001C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(COMP_EnemySensingComponent_C_SetSightDistance) == 0x000008, "Wrong alignment on COMP_EnemySensingComponent_C_SetSightDistance");
static_assert(sizeof(COMP_EnemySensingComponent_C_SetSightDistance) == 0x000020, "Wrong size on COMP_EnemySensingComponent_C_SetSightDistance");
static_assert(offsetof(COMP_EnemySensingComponent_C_SetSightDistance, NewDistance) == 0x000000, "Member 'COMP_EnemySensingComponent_C_SetSightDistance::NewDistance' has a wrong offset!");
static_assert(offsetof(COMP_EnemySensingComponent_C_SetSightDistance, SightDistanceScale) == 0x000004, "Member 'COMP_EnemySensingComponent_C_SetSightDistance::SightDistanceScale' has a wrong offset!");
static_assert(offsetof(COMP_EnemySensingComponent_C_SetSightDistance, CallFunc_GetOwner_ReturnValue) == 0x000008, "Member 'COMP_EnemySensingComponent_C_SetSightDistance::CallFunc_GetOwner_ReturnValue' has a wrong offset!");
static_assert(offsetof(COMP_EnemySensingComponent_C_SetSightDistance, K2Node_DynamicCast_AsPAWN_System_Shock_Character) == 0x000010, "Member 'COMP_EnemySensingComponent_C_SetSightDistance::K2Node_DynamicCast_AsPAWN_System_Shock_Character' has a wrong offset!");
static_assert(offsetof(COMP_EnemySensingComponent_C_SetSightDistance, K2Node_DynamicCast_bSuccess) == 0x000018, "Member 'COMP_EnemySensingComponent_C_SetSightDistance::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(COMP_EnemySensingComponent_C_SetSightDistance, CallFunc_GetAttribValue_ReturnValue) == 0x00001C, "Member 'COMP_EnemySensingComponent_C_SetSightDistance::CallFunc_GetAttribValue_ReturnValue' has a wrong offset!");

// Function COMP_EnemySensingComponent.COMP_EnemySensingComponent_C.UpdateVision
// 0x01E0 (0x01E0 - 0x0000)
struct COMP_EnemySensingComponent_C_UpdateVision final
{
public:
	struct FVector                                TargetHeadLocation;                                // 0x0000(0x000C)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                SourceHeadLocation;                                // 0x000C(0x000C)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CosAngleToTarget;                                  // 0x0018(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         DistanceToTarget;                                  // 0x001C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                TargetBodyLocation;                                // 0x0020(0x000C)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                SourceBodyLocation;                                // 0x002C(0x000C)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_38[0x8];                                       // 0x0038(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTransform                             SourceBodyTransform;                               // 0x0040(0x0030)(Edit, BlueprintVisible, DisableEditOnTemplate, IsPlainOldData, NoDestructor)
	class UGI_SinglePlayer_C*                     GameInstance;                                      // 0x0070(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TArray<class AActor*>                         ActorsToIgnore;                                    // 0x0078(0x0010)(Edit, BlueprintVisible, DisableEditOnTemplate)
	class APAWN_Hacker_Simple_C*                  HackerPawn;                                        // 0x0088(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class APawn*                                  PlayerPawn;                                        // 0x0090(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 OwnerActor;                                        // 0x0098(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FTransform                             CallFunc_GetBodyTransform_Result;                  // 0x00A0(0x0030)(IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsLocationInVisionConeInternal_Result;    // 0x00D0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_D1[0x3];                                       // 0x00D1(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_IsLocationInVisionConeInternal_DistanceToTarget; // 0x00D4(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_IsLocationInVisionConeInternal_CosAngleToTarget; // 0x00D8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_DC[0x4];                                       // 0x00DC(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class AActor*                                 CallFunc_GetOwner_ReturnValue;                     // 0x00E0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Greater_IntInt_ReturnValue;               // 0x00E8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x00E9(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_EA[0x2];                                       // 0x00EA(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Subtract_IntInt_ReturnValue;              // 0x00EC(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Max_ReturnValue;                          // 0x00F0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakTransform_Location;                  // 0x00F4(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               CallFunc_BreakTransform_Rotation;                  // 0x0100(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FVector                                CallFunc_BreakTransform_Scale;                     // 0x010C(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_GetHeadLocation_Result;                   // 0x0118(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_PerformVisionTrace_Result;                // 0x0124(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_125[0x3];                                      // 0x0125(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class APAWN_SystemShockCharacter_C*           K2Node_DynamicCast_AsPAWN_System_Shock_Character;  // 0x0128(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0130(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsDetectable_IsDetectable;                // 0x0131(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_132[0x2];                                      // 0x0132(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                CallFunc_K2_GetActorLocation_ReturnValue;          // 0x0134(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_FloatFloat_ReturnValue;              // 0x0140(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_141[0x3];                                      // 0x0141(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                CallFunc_K2_GetComponentLocation_ReturnValue;      // 0x0144(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_GetDetectionRatingForPawn_DetectionRating; // 0x0150(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Greater_FloatFloat_ReturnValue;           // 0x0154(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BooleanOR_ReturnValue;                    // 0x0155(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_156[0x2];                                      // 0x0156(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class AActor*>                         K2Node_MakeArray_Array;                            // 0x0158(0x0010)(ReferenceParm)
	class APAWN_SystemShockCharacter_C*           K2Node_DynamicCast_AsPAWN_System_Shock_Character_1; // 0x0168(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess_1;                     // 0x0170(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_171[0x7];                                      // 0x0171(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class APawn*                                  CallFunc_GetPlayerPawn_ReturnValue;                // 0x0178(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class APAWN_Hacker_Simple_C*                  K2Node_DynamicCast_AsPAWN_Hacker_Simple;           // 0x0180(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess_2;                     // 0x0188(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_189[0x7];                                      // 0x0189(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UGameInstance*                          CallFunc_GetGameInstance_ReturnValue;              // 0x0190(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UGI_SinglePlayer_C*                     K2Node_DynamicCast_AsGI_Single_Player;             // 0x0198(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess_3;                     // 0x01A0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_PerformVisionTrace_Result_1;              // 0x01A1(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_PerformVisionTrace_Result_2;              // 0x01A2(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_GetRoomVisibilityBetweenPoints_ReturnValue; // 0x01A3(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_PerformVisionTrace_Result_3;              // 0x01A4(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_GetRoomVisibilityBetweenPoints_ReturnValue_1; // 0x01A5(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Temp_bool_Variable;                                // 0x01A6(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_PerformVisionTrace_Result_4;              // 0x01A7(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_GetRoomVisibilityBetweenPoints_ReturnValue_2; // 0x01A8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_GetRoomVisibilityBetweenPoints_ReturnValue_3; // 0x01A9(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_1AA[0x2];                                      // 0x01AA(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_GetScaledCapsuleHalfHeight_ReturnValue;   // 0x01AC(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Multiply_FloatFloat_ReturnValue;          // 0x01B0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_MakeVector_ReturnValue;                   // 0x01B4(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Add_VectorVector_ReturnValue;             // 0x01C0(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                K2Node_Select_Default;                             // 0x01CC(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(COMP_EnemySensingComponent_C_UpdateVision) == 0x000010, "Wrong alignment on COMP_EnemySensingComponent_C_UpdateVision");
static_assert(sizeof(COMP_EnemySensingComponent_C_UpdateVision) == 0x0001E0, "Wrong size on COMP_EnemySensingComponent_C_UpdateVision");
static_assert(offsetof(COMP_EnemySensingComponent_C_UpdateVision, TargetHeadLocation) == 0x000000, "Member 'COMP_EnemySensingComponent_C_UpdateVision::TargetHeadLocation' has a wrong offset!");
static_assert(offsetof(COMP_EnemySensingComponent_C_UpdateVision, SourceHeadLocation) == 0x00000C, "Member 'COMP_EnemySensingComponent_C_UpdateVision::SourceHeadLocation' has a wrong offset!");
static_assert(offsetof(COMP_EnemySensingComponent_C_UpdateVision, CosAngleToTarget) == 0x000018, "Member 'COMP_EnemySensingComponent_C_UpdateVision::CosAngleToTarget' has a wrong offset!");
static_assert(offsetof(COMP_EnemySensingComponent_C_UpdateVision, DistanceToTarget) == 0x00001C, "Member 'COMP_EnemySensingComponent_C_UpdateVision::DistanceToTarget' has a wrong offset!");
static_assert(offsetof(COMP_EnemySensingComponent_C_UpdateVision, TargetBodyLocation) == 0x000020, "Member 'COMP_EnemySensingComponent_C_UpdateVision::TargetBodyLocation' has a wrong offset!");
static_assert(offsetof(COMP_EnemySensingComponent_C_UpdateVision, SourceBodyLocation) == 0x00002C, "Member 'COMP_EnemySensingComponent_C_UpdateVision::SourceBodyLocation' has a wrong offset!");
static_assert(offsetof(COMP_EnemySensingComponent_C_UpdateVision, SourceBodyTransform) == 0x000040, "Member 'COMP_EnemySensingComponent_C_UpdateVision::SourceBodyTransform' has a wrong offset!");
static_assert(offsetof(COMP_EnemySensingComponent_C_UpdateVision, GameInstance) == 0x000070, "Member 'COMP_EnemySensingComponent_C_UpdateVision::GameInstance' has a wrong offset!");
static_assert(offsetof(COMP_EnemySensingComponent_C_UpdateVision, ActorsToIgnore) == 0x000078, "Member 'COMP_EnemySensingComponent_C_UpdateVision::ActorsToIgnore' has a wrong offset!");
static_assert(offsetof(COMP_EnemySensingComponent_C_UpdateVision, HackerPawn) == 0x000088, "Member 'COMP_EnemySensingComponent_C_UpdateVision::HackerPawn' has a wrong offset!");
static_assert(offsetof(COMP_EnemySensingComponent_C_UpdateVision, PlayerPawn) == 0x000090, "Member 'COMP_EnemySensingComponent_C_UpdateVision::PlayerPawn' has a wrong offset!");
static_assert(offsetof(COMP_EnemySensingComponent_C_UpdateVision, OwnerActor) == 0x000098, "Member 'COMP_EnemySensingComponent_C_UpdateVision::OwnerActor' has a wrong offset!");
static_assert(offsetof(COMP_EnemySensingComponent_C_UpdateVision, CallFunc_GetBodyTransform_Result) == 0x0000A0, "Member 'COMP_EnemySensingComponent_C_UpdateVision::CallFunc_GetBodyTransform_Result' has a wrong offset!");
static_assert(offsetof(COMP_EnemySensingComponent_C_UpdateVision, CallFunc_IsLocationInVisionConeInternal_Result) == 0x0000D0, "Member 'COMP_EnemySensingComponent_C_UpdateVision::CallFunc_IsLocationInVisionConeInternal_Result' has a wrong offset!");
static_assert(offsetof(COMP_EnemySensingComponent_C_UpdateVision, CallFunc_IsLocationInVisionConeInternal_DistanceToTarget) == 0x0000D4, "Member 'COMP_EnemySensingComponent_C_UpdateVision::CallFunc_IsLocationInVisionConeInternal_DistanceToTarget' has a wrong offset!");
static_assert(offsetof(COMP_EnemySensingComponent_C_UpdateVision, CallFunc_IsLocationInVisionConeInternal_CosAngleToTarget) == 0x0000D8, "Member 'COMP_EnemySensingComponent_C_UpdateVision::CallFunc_IsLocationInVisionConeInternal_CosAngleToTarget' has a wrong offset!");
static_assert(offsetof(COMP_EnemySensingComponent_C_UpdateVision, CallFunc_GetOwner_ReturnValue) == 0x0000E0, "Member 'COMP_EnemySensingComponent_C_UpdateVision::CallFunc_GetOwner_ReturnValue' has a wrong offset!");
static_assert(offsetof(COMP_EnemySensingComponent_C_UpdateVision, CallFunc_Greater_IntInt_ReturnValue) == 0x0000E8, "Member 'COMP_EnemySensingComponent_C_UpdateVision::CallFunc_Greater_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(COMP_EnemySensingComponent_C_UpdateVision, CallFunc_IsValid_ReturnValue) == 0x0000E9, "Member 'COMP_EnemySensingComponent_C_UpdateVision::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(COMP_EnemySensingComponent_C_UpdateVision, CallFunc_Subtract_IntInt_ReturnValue) == 0x0000EC, "Member 'COMP_EnemySensingComponent_C_UpdateVision::CallFunc_Subtract_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(COMP_EnemySensingComponent_C_UpdateVision, CallFunc_Max_ReturnValue) == 0x0000F0, "Member 'COMP_EnemySensingComponent_C_UpdateVision::CallFunc_Max_ReturnValue' has a wrong offset!");
static_assert(offsetof(COMP_EnemySensingComponent_C_UpdateVision, CallFunc_BreakTransform_Location) == 0x0000F4, "Member 'COMP_EnemySensingComponent_C_UpdateVision::CallFunc_BreakTransform_Location' has a wrong offset!");
static_assert(offsetof(COMP_EnemySensingComponent_C_UpdateVision, CallFunc_BreakTransform_Rotation) == 0x000100, "Member 'COMP_EnemySensingComponent_C_UpdateVision::CallFunc_BreakTransform_Rotation' has a wrong offset!");
static_assert(offsetof(COMP_EnemySensingComponent_C_UpdateVision, CallFunc_BreakTransform_Scale) == 0x00010C, "Member 'COMP_EnemySensingComponent_C_UpdateVision::CallFunc_BreakTransform_Scale' has a wrong offset!");
static_assert(offsetof(COMP_EnemySensingComponent_C_UpdateVision, CallFunc_GetHeadLocation_Result) == 0x000118, "Member 'COMP_EnemySensingComponent_C_UpdateVision::CallFunc_GetHeadLocation_Result' has a wrong offset!");
static_assert(offsetof(COMP_EnemySensingComponent_C_UpdateVision, CallFunc_PerformVisionTrace_Result) == 0x000124, "Member 'COMP_EnemySensingComponent_C_UpdateVision::CallFunc_PerformVisionTrace_Result' has a wrong offset!");
static_assert(offsetof(COMP_EnemySensingComponent_C_UpdateVision, K2Node_DynamicCast_AsPAWN_System_Shock_Character) == 0x000128, "Member 'COMP_EnemySensingComponent_C_UpdateVision::K2Node_DynamicCast_AsPAWN_System_Shock_Character' has a wrong offset!");
static_assert(offsetof(COMP_EnemySensingComponent_C_UpdateVision, K2Node_DynamicCast_bSuccess) == 0x000130, "Member 'COMP_EnemySensingComponent_C_UpdateVision::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(COMP_EnemySensingComponent_C_UpdateVision, CallFunc_IsDetectable_IsDetectable) == 0x000131, "Member 'COMP_EnemySensingComponent_C_UpdateVision::CallFunc_IsDetectable_IsDetectable' has a wrong offset!");
static_assert(offsetof(COMP_EnemySensingComponent_C_UpdateVision, CallFunc_K2_GetActorLocation_ReturnValue) == 0x000134, "Member 'COMP_EnemySensingComponent_C_UpdateVision::CallFunc_K2_GetActorLocation_ReturnValue' has a wrong offset!");
static_assert(offsetof(COMP_EnemySensingComponent_C_UpdateVision, CallFunc_Less_FloatFloat_ReturnValue) == 0x000140, "Member 'COMP_EnemySensingComponent_C_UpdateVision::CallFunc_Less_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(COMP_EnemySensingComponent_C_UpdateVision, CallFunc_K2_GetComponentLocation_ReturnValue) == 0x000144, "Member 'COMP_EnemySensingComponent_C_UpdateVision::CallFunc_K2_GetComponentLocation_ReturnValue' has a wrong offset!");
static_assert(offsetof(COMP_EnemySensingComponent_C_UpdateVision, CallFunc_GetDetectionRatingForPawn_DetectionRating) == 0x000150, "Member 'COMP_EnemySensingComponent_C_UpdateVision::CallFunc_GetDetectionRatingForPawn_DetectionRating' has a wrong offset!");
static_assert(offsetof(COMP_EnemySensingComponent_C_UpdateVision, CallFunc_Greater_FloatFloat_ReturnValue) == 0x000154, "Member 'COMP_EnemySensingComponent_C_UpdateVision::CallFunc_Greater_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(COMP_EnemySensingComponent_C_UpdateVision, CallFunc_BooleanOR_ReturnValue) == 0x000155, "Member 'COMP_EnemySensingComponent_C_UpdateVision::CallFunc_BooleanOR_ReturnValue' has a wrong offset!");
static_assert(offsetof(COMP_EnemySensingComponent_C_UpdateVision, K2Node_MakeArray_Array) == 0x000158, "Member 'COMP_EnemySensingComponent_C_UpdateVision::K2Node_MakeArray_Array' has a wrong offset!");
static_assert(offsetof(COMP_EnemySensingComponent_C_UpdateVision, K2Node_DynamicCast_AsPAWN_System_Shock_Character_1) == 0x000168, "Member 'COMP_EnemySensingComponent_C_UpdateVision::K2Node_DynamicCast_AsPAWN_System_Shock_Character_1' has a wrong offset!");
static_assert(offsetof(COMP_EnemySensingComponent_C_UpdateVision, K2Node_DynamicCast_bSuccess_1) == 0x000170, "Member 'COMP_EnemySensingComponent_C_UpdateVision::K2Node_DynamicCast_bSuccess_1' has a wrong offset!");
static_assert(offsetof(COMP_EnemySensingComponent_C_UpdateVision, CallFunc_GetPlayerPawn_ReturnValue) == 0x000178, "Member 'COMP_EnemySensingComponent_C_UpdateVision::CallFunc_GetPlayerPawn_ReturnValue' has a wrong offset!");
static_assert(offsetof(COMP_EnemySensingComponent_C_UpdateVision, K2Node_DynamicCast_AsPAWN_Hacker_Simple) == 0x000180, "Member 'COMP_EnemySensingComponent_C_UpdateVision::K2Node_DynamicCast_AsPAWN_Hacker_Simple' has a wrong offset!");
static_assert(offsetof(COMP_EnemySensingComponent_C_UpdateVision, K2Node_DynamicCast_bSuccess_2) == 0x000188, "Member 'COMP_EnemySensingComponent_C_UpdateVision::K2Node_DynamicCast_bSuccess_2' has a wrong offset!");
static_assert(offsetof(COMP_EnemySensingComponent_C_UpdateVision, CallFunc_GetGameInstance_ReturnValue) == 0x000190, "Member 'COMP_EnemySensingComponent_C_UpdateVision::CallFunc_GetGameInstance_ReturnValue' has a wrong offset!");
static_assert(offsetof(COMP_EnemySensingComponent_C_UpdateVision, K2Node_DynamicCast_AsGI_Single_Player) == 0x000198, "Member 'COMP_EnemySensingComponent_C_UpdateVision::K2Node_DynamicCast_AsGI_Single_Player' has a wrong offset!");
static_assert(offsetof(COMP_EnemySensingComponent_C_UpdateVision, K2Node_DynamicCast_bSuccess_3) == 0x0001A0, "Member 'COMP_EnemySensingComponent_C_UpdateVision::K2Node_DynamicCast_bSuccess_3' has a wrong offset!");
static_assert(offsetof(COMP_EnemySensingComponent_C_UpdateVision, CallFunc_PerformVisionTrace_Result_1) == 0x0001A1, "Member 'COMP_EnemySensingComponent_C_UpdateVision::CallFunc_PerformVisionTrace_Result_1' has a wrong offset!");
static_assert(offsetof(COMP_EnemySensingComponent_C_UpdateVision, CallFunc_PerformVisionTrace_Result_2) == 0x0001A2, "Member 'COMP_EnemySensingComponent_C_UpdateVision::CallFunc_PerformVisionTrace_Result_2' has a wrong offset!");
static_assert(offsetof(COMP_EnemySensingComponent_C_UpdateVision, CallFunc_GetRoomVisibilityBetweenPoints_ReturnValue) == 0x0001A3, "Member 'COMP_EnemySensingComponent_C_UpdateVision::CallFunc_GetRoomVisibilityBetweenPoints_ReturnValue' has a wrong offset!");
static_assert(offsetof(COMP_EnemySensingComponent_C_UpdateVision, CallFunc_PerformVisionTrace_Result_3) == 0x0001A4, "Member 'COMP_EnemySensingComponent_C_UpdateVision::CallFunc_PerformVisionTrace_Result_3' has a wrong offset!");
static_assert(offsetof(COMP_EnemySensingComponent_C_UpdateVision, CallFunc_GetRoomVisibilityBetweenPoints_ReturnValue_1) == 0x0001A5, "Member 'COMP_EnemySensingComponent_C_UpdateVision::CallFunc_GetRoomVisibilityBetweenPoints_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(COMP_EnemySensingComponent_C_UpdateVision, Temp_bool_Variable) == 0x0001A6, "Member 'COMP_EnemySensingComponent_C_UpdateVision::Temp_bool_Variable' has a wrong offset!");
static_assert(offsetof(COMP_EnemySensingComponent_C_UpdateVision, CallFunc_PerformVisionTrace_Result_4) == 0x0001A7, "Member 'COMP_EnemySensingComponent_C_UpdateVision::CallFunc_PerformVisionTrace_Result_4' has a wrong offset!");
static_assert(offsetof(COMP_EnemySensingComponent_C_UpdateVision, CallFunc_GetRoomVisibilityBetweenPoints_ReturnValue_2) == 0x0001A8, "Member 'COMP_EnemySensingComponent_C_UpdateVision::CallFunc_GetRoomVisibilityBetweenPoints_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(COMP_EnemySensingComponent_C_UpdateVision, CallFunc_GetRoomVisibilityBetweenPoints_ReturnValue_3) == 0x0001A9, "Member 'COMP_EnemySensingComponent_C_UpdateVision::CallFunc_GetRoomVisibilityBetweenPoints_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(COMP_EnemySensingComponent_C_UpdateVision, CallFunc_GetScaledCapsuleHalfHeight_ReturnValue) == 0x0001AC, "Member 'COMP_EnemySensingComponent_C_UpdateVision::CallFunc_GetScaledCapsuleHalfHeight_ReturnValue' has a wrong offset!");
static_assert(offsetof(COMP_EnemySensingComponent_C_UpdateVision, CallFunc_Multiply_FloatFloat_ReturnValue) == 0x0001B0, "Member 'COMP_EnemySensingComponent_C_UpdateVision::CallFunc_Multiply_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(COMP_EnemySensingComponent_C_UpdateVision, CallFunc_MakeVector_ReturnValue) == 0x0001B4, "Member 'COMP_EnemySensingComponent_C_UpdateVision::CallFunc_MakeVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(COMP_EnemySensingComponent_C_UpdateVision, CallFunc_Add_VectorVector_ReturnValue) == 0x0001C0, "Member 'COMP_EnemySensingComponent_C_UpdateVision::CallFunc_Add_VectorVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(COMP_EnemySensingComponent_C_UpdateVision, K2Node_Select_Default) == 0x0001CC, "Member 'COMP_EnemySensingComponent_C_UpdateVision::K2Node_Select_Default' has a wrong offset!");

// Function COMP_EnemySensingComponent.COMP_EnemySensingComponent_C.OnHearSound
// 0x0038 (0x0038 - 0x0000)
struct COMP_EnemySensingComponent_C_OnHearSound final
{
public:
	class APAWN_SystemShockCharacter_C*           SourcePawn;                                        // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                SourceLocation;                                    // 0x0008(0x000C)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                TargetLocation;                                    // 0x0014(0x000C)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         SoundRange;                                        // 0x0020(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Obstruction;                                       // 0x0024(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Occlusion;                                         // 0x0028(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Loudness;                                          // 0x002C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_GetSoundLoudness_Result;                  // 0x0030(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Greater_FloatFloat_ReturnValue;           // 0x0034(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(COMP_EnemySensingComponent_C_OnHearSound) == 0x000008, "Wrong alignment on COMP_EnemySensingComponent_C_OnHearSound");
static_assert(sizeof(COMP_EnemySensingComponent_C_OnHearSound) == 0x000038, "Wrong size on COMP_EnemySensingComponent_C_OnHearSound");
static_assert(offsetof(COMP_EnemySensingComponent_C_OnHearSound, SourcePawn) == 0x000000, "Member 'COMP_EnemySensingComponent_C_OnHearSound::SourcePawn' has a wrong offset!");
static_assert(offsetof(COMP_EnemySensingComponent_C_OnHearSound, SourceLocation) == 0x000008, "Member 'COMP_EnemySensingComponent_C_OnHearSound::SourceLocation' has a wrong offset!");
static_assert(offsetof(COMP_EnemySensingComponent_C_OnHearSound, TargetLocation) == 0x000014, "Member 'COMP_EnemySensingComponent_C_OnHearSound::TargetLocation' has a wrong offset!");
static_assert(offsetof(COMP_EnemySensingComponent_C_OnHearSound, SoundRange) == 0x000020, "Member 'COMP_EnemySensingComponent_C_OnHearSound::SoundRange' has a wrong offset!");
static_assert(offsetof(COMP_EnemySensingComponent_C_OnHearSound, Obstruction) == 0x000024, "Member 'COMP_EnemySensingComponent_C_OnHearSound::Obstruction' has a wrong offset!");
static_assert(offsetof(COMP_EnemySensingComponent_C_OnHearSound, Occlusion) == 0x000028, "Member 'COMP_EnemySensingComponent_C_OnHearSound::Occlusion' has a wrong offset!");
static_assert(offsetof(COMP_EnemySensingComponent_C_OnHearSound, Loudness) == 0x00002C, "Member 'COMP_EnemySensingComponent_C_OnHearSound::Loudness' has a wrong offset!");
static_assert(offsetof(COMP_EnemySensingComponent_C_OnHearSound, CallFunc_GetSoundLoudness_Result) == 0x000030, "Member 'COMP_EnemySensingComponent_C_OnHearSound::CallFunc_GetSoundLoudness_Result' has a wrong offset!");
static_assert(offsetof(COMP_EnemySensingComponent_C_OnHearSound, CallFunc_Greater_FloatFloat_ReturnValue) == 0x000034, "Member 'COMP_EnemySensingComponent_C_OnHearSound::CallFunc_Greater_FloatFloat_ReturnValue' has a wrong offset!");

// Function COMP_EnemySensingComponent.COMP_EnemySensingComponent_C.GetBodyTransform
// 0x0140 (0x0140 - 0x0000)
struct COMP_EnemySensingComponent_C_GetBodyTransform final
{
public:
	struct FTransform                             Result;                                            // 0x0000(0x0030)(Parm, OutParm, IsPlainOldData, NoDestructor)
	struct FTransform                             BodyTransform;                                     // 0x0030(0x0030)(Edit, BlueprintVisible, IsPlainOldData, NoDestructor)
	class AActor*                                 CallFunc_GetOwner_ReturnValue;                     // 0x0060(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_68[0x8];                                       // 0x0068(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTransform                             CallFunc_GetTransform_ReturnValue;                 // 0x0070(0x0030)(ConstParm, IsPlainOldData, NoDestructor)
	struct FVector                                CallFunc_BreakTransform_Location;                  // 0x00A0(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               CallFunc_BreakTransform_Rotation;                  // 0x00AC(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FVector                                CallFunc_BreakTransform_Scale;                     // 0x00B8(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               CallFunc_TransformRotation_ReturnValue;            // 0x00C4(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FTransform                             CallFunc_MakeTransform_ReturnValue;                // 0x00D0(0x0030)(IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0100(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_101[0xF];                                      // 0x0101(0x000F)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTransform                             CallFunc_GetSocketTransform_ReturnValue;           // 0x0110(0x0030)(IsPlainOldData, NoDestructor)
};
static_assert(alignof(COMP_EnemySensingComponent_C_GetBodyTransform) == 0x000010, "Wrong alignment on COMP_EnemySensingComponent_C_GetBodyTransform");
static_assert(sizeof(COMP_EnemySensingComponent_C_GetBodyTransform) == 0x000140, "Wrong size on COMP_EnemySensingComponent_C_GetBodyTransform");
static_assert(offsetof(COMP_EnemySensingComponent_C_GetBodyTransform, Result) == 0x000000, "Member 'COMP_EnemySensingComponent_C_GetBodyTransform::Result' has a wrong offset!");
static_assert(offsetof(COMP_EnemySensingComponent_C_GetBodyTransform, BodyTransform) == 0x000030, "Member 'COMP_EnemySensingComponent_C_GetBodyTransform::BodyTransform' has a wrong offset!");
static_assert(offsetof(COMP_EnemySensingComponent_C_GetBodyTransform, CallFunc_GetOwner_ReturnValue) == 0x000060, "Member 'COMP_EnemySensingComponent_C_GetBodyTransform::CallFunc_GetOwner_ReturnValue' has a wrong offset!");
static_assert(offsetof(COMP_EnemySensingComponent_C_GetBodyTransform, CallFunc_GetTransform_ReturnValue) == 0x000070, "Member 'COMP_EnemySensingComponent_C_GetBodyTransform::CallFunc_GetTransform_ReturnValue' has a wrong offset!");
static_assert(offsetof(COMP_EnemySensingComponent_C_GetBodyTransform, CallFunc_BreakTransform_Location) == 0x0000A0, "Member 'COMP_EnemySensingComponent_C_GetBodyTransform::CallFunc_BreakTransform_Location' has a wrong offset!");
static_assert(offsetof(COMP_EnemySensingComponent_C_GetBodyTransform, CallFunc_BreakTransform_Rotation) == 0x0000AC, "Member 'COMP_EnemySensingComponent_C_GetBodyTransform::CallFunc_BreakTransform_Rotation' has a wrong offset!");
static_assert(offsetof(COMP_EnemySensingComponent_C_GetBodyTransform, CallFunc_BreakTransform_Scale) == 0x0000B8, "Member 'COMP_EnemySensingComponent_C_GetBodyTransform::CallFunc_BreakTransform_Scale' has a wrong offset!");
static_assert(offsetof(COMP_EnemySensingComponent_C_GetBodyTransform, CallFunc_TransformRotation_ReturnValue) == 0x0000C4, "Member 'COMP_EnemySensingComponent_C_GetBodyTransform::CallFunc_TransformRotation_ReturnValue' has a wrong offset!");
static_assert(offsetof(COMP_EnemySensingComponent_C_GetBodyTransform, CallFunc_MakeTransform_ReturnValue) == 0x0000D0, "Member 'COMP_EnemySensingComponent_C_GetBodyTransform::CallFunc_MakeTransform_ReturnValue' has a wrong offset!");
static_assert(offsetof(COMP_EnemySensingComponent_C_GetBodyTransform, CallFunc_IsValid_ReturnValue) == 0x000100, "Member 'COMP_EnemySensingComponent_C_GetBodyTransform::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(COMP_EnemySensingComponent_C_GetBodyTransform, CallFunc_GetSocketTransform_ReturnValue) == 0x000110, "Member 'COMP_EnemySensingComponent_C_GetBodyTransform::CallFunc_GetSocketTransform_ReturnValue' has a wrong offset!");

// Function COMP_EnemySensingComponent.COMP_EnemySensingComponent_C.GetHeadLocation
// 0x0050 (0x0050 - 0x0000)
struct COMP_EnemySensingComponent_C_GetHeadLocation final
{
public:
	struct FVector                                Result;                                            // 0x0000(0x000C)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTransform                             CallFunc_GetSocketTransform_ReturnValue;           // 0x0010(0x0030)(IsPlainOldData, NoDestructor)
	struct FVector                                CallFunc_TransformLocation_ReturnValue;            // 0x0040(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(COMP_EnemySensingComponent_C_GetHeadLocation) == 0x000010, "Wrong alignment on COMP_EnemySensingComponent_C_GetHeadLocation");
static_assert(sizeof(COMP_EnemySensingComponent_C_GetHeadLocation) == 0x000050, "Wrong size on COMP_EnemySensingComponent_C_GetHeadLocation");
static_assert(offsetof(COMP_EnemySensingComponent_C_GetHeadLocation, Result) == 0x000000, "Member 'COMP_EnemySensingComponent_C_GetHeadLocation::Result' has a wrong offset!");
static_assert(offsetof(COMP_EnemySensingComponent_C_GetHeadLocation, CallFunc_GetSocketTransform_ReturnValue) == 0x000010, "Member 'COMP_EnemySensingComponent_C_GetHeadLocation::CallFunc_GetSocketTransform_ReturnValue' has a wrong offset!");
static_assert(offsetof(COMP_EnemySensingComponent_C_GetHeadLocation, CallFunc_TransformLocation_ReturnValue) == 0x000040, "Member 'COMP_EnemySensingComponent_C_GetHeadLocation::CallFunc_TransformLocation_ReturnValue' has a wrong offset!");

// Function COMP_EnemySensingComponent.COMP_EnemySensingComponent_C.HadVisionToTargetLastTick
// 0x0003 (0x0003 - 0x0000)
struct COMP_EnemySensingComponent_C_HadVisionToTargetLastTick final
{
public:
	bool                                          Visible;                                           // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	ENUM_VisionTraceType                          SightingType;                                      // 0x0001(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_GreaterEqual_IntInt_ReturnValue;          // 0x0002(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(COMP_EnemySensingComponent_C_HadVisionToTargetLastTick) == 0x000001, "Wrong alignment on COMP_EnemySensingComponent_C_HadVisionToTargetLastTick");
static_assert(sizeof(COMP_EnemySensingComponent_C_HadVisionToTargetLastTick) == 0x000003, "Wrong size on COMP_EnemySensingComponent_C_HadVisionToTargetLastTick");
static_assert(offsetof(COMP_EnemySensingComponent_C_HadVisionToTargetLastTick, Visible) == 0x000000, "Member 'COMP_EnemySensingComponent_C_HadVisionToTargetLastTick::Visible' has a wrong offset!");
static_assert(offsetof(COMP_EnemySensingComponent_C_HadVisionToTargetLastTick, SightingType) == 0x000001, "Member 'COMP_EnemySensingComponent_C_HadVisionToTargetLastTick::SightingType' has a wrong offset!");
static_assert(offsetof(COMP_EnemySensingComponent_C_HadVisionToTargetLastTick, CallFunc_GreaterEqual_IntInt_ReturnValue) == 0x000002, "Member 'COMP_EnemySensingComponent_C_HadVisionToTargetLastTick::CallFunc_GreaterEqual_IntInt_ReturnValue' has a wrong offset!");

// Function COMP_EnemySensingComponent.COMP_EnemySensingComponent_C.IsLocationInVisionCone
// 0x0090 (0x0090 - 0x0000)
struct COMP_EnemySensingComponent_C_IsLocationInVisionCone final
{
public:
	struct FVector                                Location;                                          // 0x0000(0x000C)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Result;                                            // 0x000C(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_D[0x3];                                        // 0x000D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         DistanceToTarget;                                  // 0x0010(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CosAngleToTarget;                                  // 0x0014(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CosAngleBetween;                                   // 0x0018(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         DistanceBetween;                                   // 0x001C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         DistanceSquaredToTarget;                           // 0x0020(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                VisionDirection;                                   // 0x0024(0x000C)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                SightSegment;                                      // 0x0030(0x000C)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                SourceBodyLocation;                                // 0x003C(0x000C)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 OwnerActor;                                        // 0x0048(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FTransform                             CallFunc_GetBodyTransform_Result;                  // 0x0050(0x0030)(IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsLocationInVisionConeInternal_Result;    // 0x0080(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_81[0x3];                                       // 0x0081(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_IsLocationInVisionConeInternal_DistanceToTarget; // 0x0084(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_IsLocationInVisionConeInternal_CosAngleToTarget; // 0x0088(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(COMP_EnemySensingComponent_C_IsLocationInVisionCone) == 0x000010, "Wrong alignment on COMP_EnemySensingComponent_C_IsLocationInVisionCone");
static_assert(sizeof(COMP_EnemySensingComponent_C_IsLocationInVisionCone) == 0x000090, "Wrong size on COMP_EnemySensingComponent_C_IsLocationInVisionCone");
static_assert(offsetof(COMP_EnemySensingComponent_C_IsLocationInVisionCone, Location) == 0x000000, "Member 'COMP_EnemySensingComponent_C_IsLocationInVisionCone::Location' has a wrong offset!");
static_assert(offsetof(COMP_EnemySensingComponent_C_IsLocationInVisionCone, Result) == 0x00000C, "Member 'COMP_EnemySensingComponent_C_IsLocationInVisionCone::Result' has a wrong offset!");
static_assert(offsetof(COMP_EnemySensingComponent_C_IsLocationInVisionCone, DistanceToTarget) == 0x000010, "Member 'COMP_EnemySensingComponent_C_IsLocationInVisionCone::DistanceToTarget' has a wrong offset!");
static_assert(offsetof(COMP_EnemySensingComponent_C_IsLocationInVisionCone, CosAngleToTarget) == 0x000014, "Member 'COMP_EnemySensingComponent_C_IsLocationInVisionCone::CosAngleToTarget' has a wrong offset!");
static_assert(offsetof(COMP_EnemySensingComponent_C_IsLocationInVisionCone, CosAngleBetween) == 0x000018, "Member 'COMP_EnemySensingComponent_C_IsLocationInVisionCone::CosAngleBetween' has a wrong offset!");
static_assert(offsetof(COMP_EnemySensingComponent_C_IsLocationInVisionCone, DistanceBetween) == 0x00001C, "Member 'COMP_EnemySensingComponent_C_IsLocationInVisionCone::DistanceBetween' has a wrong offset!");
static_assert(offsetof(COMP_EnemySensingComponent_C_IsLocationInVisionCone, DistanceSquaredToTarget) == 0x000020, "Member 'COMP_EnemySensingComponent_C_IsLocationInVisionCone::DistanceSquaredToTarget' has a wrong offset!");
static_assert(offsetof(COMP_EnemySensingComponent_C_IsLocationInVisionCone, VisionDirection) == 0x000024, "Member 'COMP_EnemySensingComponent_C_IsLocationInVisionCone::VisionDirection' has a wrong offset!");
static_assert(offsetof(COMP_EnemySensingComponent_C_IsLocationInVisionCone, SightSegment) == 0x000030, "Member 'COMP_EnemySensingComponent_C_IsLocationInVisionCone::SightSegment' has a wrong offset!");
static_assert(offsetof(COMP_EnemySensingComponent_C_IsLocationInVisionCone, SourceBodyLocation) == 0x00003C, "Member 'COMP_EnemySensingComponent_C_IsLocationInVisionCone::SourceBodyLocation' has a wrong offset!");
static_assert(offsetof(COMP_EnemySensingComponent_C_IsLocationInVisionCone, OwnerActor) == 0x000048, "Member 'COMP_EnemySensingComponent_C_IsLocationInVisionCone::OwnerActor' has a wrong offset!");
static_assert(offsetof(COMP_EnemySensingComponent_C_IsLocationInVisionCone, CallFunc_GetBodyTransform_Result) == 0x000050, "Member 'COMP_EnemySensingComponent_C_IsLocationInVisionCone::CallFunc_GetBodyTransform_Result' has a wrong offset!");
static_assert(offsetof(COMP_EnemySensingComponent_C_IsLocationInVisionCone, CallFunc_IsLocationInVisionConeInternal_Result) == 0x000080, "Member 'COMP_EnemySensingComponent_C_IsLocationInVisionCone::CallFunc_IsLocationInVisionConeInternal_Result' has a wrong offset!");
static_assert(offsetof(COMP_EnemySensingComponent_C_IsLocationInVisionCone, CallFunc_IsLocationInVisionConeInternal_DistanceToTarget) == 0x000084, "Member 'COMP_EnemySensingComponent_C_IsLocationInVisionCone::CallFunc_IsLocationInVisionConeInternal_DistanceToTarget' has a wrong offset!");
static_assert(offsetof(COMP_EnemySensingComponent_C_IsLocationInVisionCone, CallFunc_IsLocationInVisionConeInternal_CosAngleToTarget) == 0x000088, "Member 'COMP_EnemySensingComponent_C_IsLocationInVisionCone::CallFunc_IsLocationInVisionConeInternal_CosAngleToTarget' has a wrong offset!");

// Function COMP_EnemySensingComponent.COMP_EnemySensingComponent_C.EVENT_OnSightConeScaleChanged
// 0x0014 (0x0014 - 0x0000)
struct COMP_EnemySensingComponent_C_EVENT_OnSightConeScaleChanged final
{
public:
	float                                         CurrValue;                                         // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         LastValue;                                         // 0x0004(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Multiply_FloatFloat_ReturnValue;          // 0x0008(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_FClamp_ReturnValue;                       // 0x000C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_DegCos_ReturnValue;                       // 0x0010(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(COMP_EnemySensingComponent_C_EVENT_OnSightConeScaleChanged) == 0x000004, "Wrong alignment on COMP_EnemySensingComponent_C_EVENT_OnSightConeScaleChanged");
static_assert(sizeof(COMP_EnemySensingComponent_C_EVENT_OnSightConeScaleChanged) == 0x000014, "Wrong size on COMP_EnemySensingComponent_C_EVENT_OnSightConeScaleChanged");
static_assert(offsetof(COMP_EnemySensingComponent_C_EVENT_OnSightConeScaleChanged, CurrValue) == 0x000000, "Member 'COMP_EnemySensingComponent_C_EVENT_OnSightConeScaleChanged::CurrValue' has a wrong offset!");
static_assert(offsetof(COMP_EnemySensingComponent_C_EVENT_OnSightConeScaleChanged, LastValue) == 0x000004, "Member 'COMP_EnemySensingComponent_C_EVENT_OnSightConeScaleChanged::LastValue' has a wrong offset!");
static_assert(offsetof(COMP_EnemySensingComponent_C_EVENT_OnSightConeScaleChanged, CallFunc_Multiply_FloatFloat_ReturnValue) == 0x000008, "Member 'COMP_EnemySensingComponent_C_EVENT_OnSightConeScaleChanged::CallFunc_Multiply_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(COMP_EnemySensingComponent_C_EVENT_OnSightConeScaleChanged, CallFunc_FClamp_ReturnValue) == 0x00000C, "Member 'COMP_EnemySensingComponent_C_EVENT_OnSightConeScaleChanged::CallFunc_FClamp_ReturnValue' has a wrong offset!");
static_assert(offsetof(COMP_EnemySensingComponent_C_EVENT_OnSightConeScaleChanged, CallFunc_DegCos_ReturnValue) == 0x000010, "Member 'COMP_EnemySensingComponent_C_EVENT_OnSightConeScaleChanged::CallFunc_DegCos_ReturnValue' has a wrong offset!");

// Function COMP_EnemySensingComponent.COMP_EnemySensingComponent_C.EVENT_OnSightDistanceScaleChanged
// 0x0010 (0x0010 - 0x0000)
struct COMP_EnemySensingComponent_C_EVENT_OnSightDistanceScaleChanged final
{
public:
	float                                         CurrValue;                                         // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         LastValue;                                         // 0x0004(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Multiply_FloatFloat_ReturnValue;          // 0x0008(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Square_ReturnValue;                       // 0x000C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(COMP_EnemySensingComponent_C_EVENT_OnSightDistanceScaleChanged) == 0x000004, "Wrong alignment on COMP_EnemySensingComponent_C_EVENT_OnSightDistanceScaleChanged");
static_assert(sizeof(COMP_EnemySensingComponent_C_EVENT_OnSightDistanceScaleChanged) == 0x000010, "Wrong size on COMP_EnemySensingComponent_C_EVENT_OnSightDistanceScaleChanged");
static_assert(offsetof(COMP_EnemySensingComponent_C_EVENT_OnSightDistanceScaleChanged, CurrValue) == 0x000000, "Member 'COMP_EnemySensingComponent_C_EVENT_OnSightDistanceScaleChanged::CurrValue' has a wrong offset!");
static_assert(offsetof(COMP_EnemySensingComponent_C_EVENT_OnSightDistanceScaleChanged, LastValue) == 0x000004, "Member 'COMP_EnemySensingComponent_C_EVENT_OnSightDistanceScaleChanged::LastValue' has a wrong offset!");
static_assert(offsetof(COMP_EnemySensingComponent_C_EVENT_OnSightDistanceScaleChanged, CallFunc_Multiply_FloatFloat_ReturnValue) == 0x000008, "Member 'COMP_EnemySensingComponent_C_EVENT_OnSightDistanceScaleChanged::CallFunc_Multiply_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(COMP_EnemySensingComponent_C_EVENT_OnSightDistanceScaleChanged, CallFunc_Square_ReturnValue) == 0x00000C, "Member 'COMP_EnemySensingComponent_C_EVENT_OnSightDistanceScaleChanged::CallFunc_Square_ReturnValue' has a wrong offset!");

// Function COMP_EnemySensingComponent.COMP_EnemySensingComponent_C.PerformVisionTrace
// 0x0108 (0x0108 - 0x0000)
struct COMP_EnemySensingComponent_C_PerformVisionTrace final
{
public:
	struct FVector                                SourceLocation;                                    // 0x0000(0x000C)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                TargetLocation;                                    // 0x000C(0x000C)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         DistanceToTarget;                                  // 0x0018(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CosAngleToTarget;                                  // 0x001C(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class APAWN_SystemShockCharacter_C*           PlayerPawn;                                        // 0x0020(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TArray<class AActor*>                         ActorsToIgnore;                                    // 0x0028(0x0010)(BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
	bool                                          Result;                                            // 0x0038(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_39[0x3];                                       // 0x0039(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         NoticePercentage;                                  // 0x003C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         AngleRatio;                                        // 0x0040(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         AngleToTarget;                                     // 0x0044(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         DistanceRatio;                                     // 0x0048(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          HasVisionOfTarget;                                 // 0x004C(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_LessEqual_FloatFloat_ReturnValue;         // 0x004D(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Temp_bool_Variable;                                // 0x004E(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	EDrawDebugTrace                               Temp_byte_Variable;                                // 0x004F(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EDrawDebugTrace                               Temp_byte_Variable_1;                              // 0x0050(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_LessEqual_FloatFloat_ReturnValue_1;       // 0x0051(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_52[0x2];                                       // 0x0052(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Add_IntInt_ReturnValue;                   // 0x0054(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Multiply_FloatFloat_ReturnValue;          // 0x0058(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Add_FloatFloat_ReturnValue;               // 0x005C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Divide_FloatFloat_ReturnValue;            // 0x0060(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Divide_FloatFloat_ReturnValue_1;          // 0x0064(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_LessEqual_FloatFloat_ReturnValue_2;       // 0x0068(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_GreaterEqual_IntInt_ReturnValue;          // 0x0069(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_6A[0x2];                                       // 0x006A(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_Divide_FloatFloat_ReturnValue_2;          // 0x006C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_DegAcos_ReturnValue;                      // 0x0070(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EDrawDebugTrace                               K2Node_Select_Default;                             // 0x0074(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_75[0x3];                                       // 0x0075(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FHitResult                             CallFunc_LineTraceSingle_OutHit;                   // 0x0078(0x0088)(IsPlainOldData, NoDestructor, ContainsInstancedReference)
	bool                                          CallFunc_LineTraceSingle_ReturnValue;              // 0x0100(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Not_PreBool_ReturnValue;                  // 0x0101(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(COMP_EnemySensingComponent_C_PerformVisionTrace) == 0x000008, "Wrong alignment on COMP_EnemySensingComponent_C_PerformVisionTrace");
static_assert(sizeof(COMP_EnemySensingComponent_C_PerformVisionTrace) == 0x000108, "Wrong size on COMP_EnemySensingComponent_C_PerformVisionTrace");
static_assert(offsetof(COMP_EnemySensingComponent_C_PerformVisionTrace, SourceLocation) == 0x000000, "Member 'COMP_EnemySensingComponent_C_PerformVisionTrace::SourceLocation' has a wrong offset!");
static_assert(offsetof(COMP_EnemySensingComponent_C_PerformVisionTrace, TargetLocation) == 0x00000C, "Member 'COMP_EnemySensingComponent_C_PerformVisionTrace::TargetLocation' has a wrong offset!");
static_assert(offsetof(COMP_EnemySensingComponent_C_PerformVisionTrace, DistanceToTarget) == 0x000018, "Member 'COMP_EnemySensingComponent_C_PerformVisionTrace::DistanceToTarget' has a wrong offset!");
static_assert(offsetof(COMP_EnemySensingComponent_C_PerformVisionTrace, CosAngleToTarget) == 0x00001C, "Member 'COMP_EnemySensingComponent_C_PerformVisionTrace::CosAngleToTarget' has a wrong offset!");
static_assert(offsetof(COMP_EnemySensingComponent_C_PerformVisionTrace, PlayerPawn) == 0x000020, "Member 'COMP_EnemySensingComponent_C_PerformVisionTrace::PlayerPawn' has a wrong offset!");
static_assert(offsetof(COMP_EnemySensingComponent_C_PerformVisionTrace, ActorsToIgnore) == 0x000028, "Member 'COMP_EnemySensingComponent_C_PerformVisionTrace::ActorsToIgnore' has a wrong offset!");
static_assert(offsetof(COMP_EnemySensingComponent_C_PerformVisionTrace, Result) == 0x000038, "Member 'COMP_EnemySensingComponent_C_PerformVisionTrace::Result' has a wrong offset!");
static_assert(offsetof(COMP_EnemySensingComponent_C_PerformVisionTrace, NoticePercentage) == 0x00003C, "Member 'COMP_EnemySensingComponent_C_PerformVisionTrace::NoticePercentage' has a wrong offset!");
static_assert(offsetof(COMP_EnemySensingComponent_C_PerformVisionTrace, AngleRatio) == 0x000040, "Member 'COMP_EnemySensingComponent_C_PerformVisionTrace::AngleRatio' has a wrong offset!");
static_assert(offsetof(COMP_EnemySensingComponent_C_PerformVisionTrace, AngleToTarget) == 0x000044, "Member 'COMP_EnemySensingComponent_C_PerformVisionTrace::AngleToTarget' has a wrong offset!");
static_assert(offsetof(COMP_EnemySensingComponent_C_PerformVisionTrace, DistanceRatio) == 0x000048, "Member 'COMP_EnemySensingComponent_C_PerformVisionTrace::DistanceRatio' has a wrong offset!");
static_assert(offsetof(COMP_EnemySensingComponent_C_PerformVisionTrace, HasVisionOfTarget) == 0x00004C, "Member 'COMP_EnemySensingComponent_C_PerformVisionTrace::HasVisionOfTarget' has a wrong offset!");
static_assert(offsetof(COMP_EnemySensingComponent_C_PerformVisionTrace, CallFunc_LessEqual_FloatFloat_ReturnValue) == 0x00004D, "Member 'COMP_EnemySensingComponent_C_PerformVisionTrace::CallFunc_LessEqual_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(COMP_EnemySensingComponent_C_PerformVisionTrace, Temp_bool_Variable) == 0x00004E, "Member 'COMP_EnemySensingComponent_C_PerformVisionTrace::Temp_bool_Variable' has a wrong offset!");
static_assert(offsetof(COMP_EnemySensingComponent_C_PerformVisionTrace, Temp_byte_Variable) == 0x00004F, "Member 'COMP_EnemySensingComponent_C_PerformVisionTrace::Temp_byte_Variable' has a wrong offset!");
static_assert(offsetof(COMP_EnemySensingComponent_C_PerformVisionTrace, Temp_byte_Variable_1) == 0x000050, "Member 'COMP_EnemySensingComponent_C_PerformVisionTrace::Temp_byte_Variable_1' has a wrong offset!");
static_assert(offsetof(COMP_EnemySensingComponent_C_PerformVisionTrace, CallFunc_LessEqual_FloatFloat_ReturnValue_1) == 0x000051, "Member 'COMP_EnemySensingComponent_C_PerformVisionTrace::CallFunc_LessEqual_FloatFloat_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(COMP_EnemySensingComponent_C_PerformVisionTrace, CallFunc_Add_IntInt_ReturnValue) == 0x000054, "Member 'COMP_EnemySensingComponent_C_PerformVisionTrace::CallFunc_Add_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(COMP_EnemySensingComponent_C_PerformVisionTrace, CallFunc_Multiply_FloatFloat_ReturnValue) == 0x000058, "Member 'COMP_EnemySensingComponent_C_PerformVisionTrace::CallFunc_Multiply_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(COMP_EnemySensingComponent_C_PerformVisionTrace, CallFunc_Add_FloatFloat_ReturnValue) == 0x00005C, "Member 'COMP_EnemySensingComponent_C_PerformVisionTrace::CallFunc_Add_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(COMP_EnemySensingComponent_C_PerformVisionTrace, CallFunc_Divide_FloatFloat_ReturnValue) == 0x000060, "Member 'COMP_EnemySensingComponent_C_PerformVisionTrace::CallFunc_Divide_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(COMP_EnemySensingComponent_C_PerformVisionTrace, CallFunc_Divide_FloatFloat_ReturnValue_1) == 0x000064, "Member 'COMP_EnemySensingComponent_C_PerformVisionTrace::CallFunc_Divide_FloatFloat_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(COMP_EnemySensingComponent_C_PerformVisionTrace, CallFunc_LessEqual_FloatFloat_ReturnValue_2) == 0x000068, "Member 'COMP_EnemySensingComponent_C_PerformVisionTrace::CallFunc_LessEqual_FloatFloat_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(COMP_EnemySensingComponent_C_PerformVisionTrace, CallFunc_GreaterEqual_IntInt_ReturnValue) == 0x000069, "Member 'COMP_EnemySensingComponent_C_PerformVisionTrace::CallFunc_GreaterEqual_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(COMP_EnemySensingComponent_C_PerformVisionTrace, CallFunc_Divide_FloatFloat_ReturnValue_2) == 0x00006C, "Member 'COMP_EnemySensingComponent_C_PerformVisionTrace::CallFunc_Divide_FloatFloat_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(COMP_EnemySensingComponent_C_PerformVisionTrace, CallFunc_DegAcos_ReturnValue) == 0x000070, "Member 'COMP_EnemySensingComponent_C_PerformVisionTrace::CallFunc_DegAcos_ReturnValue' has a wrong offset!");
static_assert(offsetof(COMP_EnemySensingComponent_C_PerformVisionTrace, K2Node_Select_Default) == 0x000074, "Member 'COMP_EnemySensingComponent_C_PerformVisionTrace::K2Node_Select_Default' has a wrong offset!");
static_assert(offsetof(COMP_EnemySensingComponent_C_PerformVisionTrace, CallFunc_LineTraceSingle_OutHit) == 0x000078, "Member 'COMP_EnemySensingComponent_C_PerformVisionTrace::CallFunc_LineTraceSingle_OutHit' has a wrong offset!");
static_assert(offsetof(COMP_EnemySensingComponent_C_PerformVisionTrace, CallFunc_LineTraceSingle_ReturnValue) == 0x000100, "Member 'COMP_EnemySensingComponent_C_PerformVisionTrace::CallFunc_LineTraceSingle_ReturnValue' has a wrong offset!");
static_assert(offsetof(COMP_EnemySensingComponent_C_PerformVisionTrace, CallFunc_Not_PreBool_ReturnValue) == 0x000101, "Member 'COMP_EnemySensingComponent_C_PerformVisionTrace::CallFunc_Not_PreBool_ReturnValue' has a wrong offset!");

// Function COMP_EnemySensingComponent.COMP_EnemySensingComponent_C.IsLocationInVisionConeInternal
// 0x00E0 (0x00E0 - 0x0000)
struct COMP_EnemySensingComponent_C_IsLocationInVisionConeInternal final
{
public:
	struct FTransform                             VisionTransform;                                   // 0x0000(0x0030)(BlueprintVisible, BlueprintReadOnly, Parm, IsPlainOldData, NoDestructor)
	struct FVector                                TargetLocation;                                    // 0x0030(0x000C)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Result;                                            // 0x003C(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_3D[0x3];                                       // 0x003D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         DistanceToTarget;                                  // 0x0040(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CosAngleToTarget;                                  // 0x0044(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CosAngleBetween;                                   // 0x0048(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         DistanceBetween;                                   // 0x004C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         DistanceSquaredToTarget;                           // 0x0050(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                VisionDirection;                                   // 0x0054(0x000C)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                SightSegment;                                      // 0x0060(0x000C)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_6C[0x4];                                       // 0x006C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class AActor*                                 OwnerActor;                                        // 0x0070(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakTransform_Location;                  // 0x0078(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               CallFunc_BreakTransform_Rotation;                  // 0x0084(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FVector                                CallFunc_BreakTransform_Scale;                     // 0x0090(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Subtract_VectorVector_ReturnValue;        // 0x009C(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_TransformDirection_ReturnValue;           // 0x00A8(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_GreaterEqual_FloatFloat_ReturnValue;      // 0x00B4(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_B5[0x3];                                       // 0x00B5(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_GetVectorNormalAndLength_OutLength;       // 0x00B8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_GetVectorNormalAndLength_ReturnValue;     // 0x00BC(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Dot_VectorVector_ReturnValue;             // 0x00C8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_FloatFloat_ReturnValue;              // 0x00CC(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_CD[0x3];                                       // 0x00CD(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_VSizeSquared_ReturnValue;                 // 0x00D0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(COMP_EnemySensingComponent_C_IsLocationInVisionConeInternal) == 0x000010, "Wrong alignment on COMP_EnemySensingComponent_C_IsLocationInVisionConeInternal");
static_assert(sizeof(COMP_EnemySensingComponent_C_IsLocationInVisionConeInternal) == 0x0000E0, "Wrong size on COMP_EnemySensingComponent_C_IsLocationInVisionConeInternal");
static_assert(offsetof(COMP_EnemySensingComponent_C_IsLocationInVisionConeInternal, VisionTransform) == 0x000000, "Member 'COMP_EnemySensingComponent_C_IsLocationInVisionConeInternal::VisionTransform' has a wrong offset!");
static_assert(offsetof(COMP_EnemySensingComponent_C_IsLocationInVisionConeInternal, TargetLocation) == 0x000030, "Member 'COMP_EnemySensingComponent_C_IsLocationInVisionConeInternal::TargetLocation' has a wrong offset!");
static_assert(offsetof(COMP_EnemySensingComponent_C_IsLocationInVisionConeInternal, Result) == 0x00003C, "Member 'COMP_EnemySensingComponent_C_IsLocationInVisionConeInternal::Result' has a wrong offset!");
static_assert(offsetof(COMP_EnemySensingComponent_C_IsLocationInVisionConeInternal, DistanceToTarget) == 0x000040, "Member 'COMP_EnemySensingComponent_C_IsLocationInVisionConeInternal::DistanceToTarget' has a wrong offset!");
static_assert(offsetof(COMP_EnemySensingComponent_C_IsLocationInVisionConeInternal, CosAngleToTarget) == 0x000044, "Member 'COMP_EnemySensingComponent_C_IsLocationInVisionConeInternal::CosAngleToTarget' has a wrong offset!");
static_assert(offsetof(COMP_EnemySensingComponent_C_IsLocationInVisionConeInternal, CosAngleBetween) == 0x000048, "Member 'COMP_EnemySensingComponent_C_IsLocationInVisionConeInternal::CosAngleBetween' has a wrong offset!");
static_assert(offsetof(COMP_EnemySensingComponent_C_IsLocationInVisionConeInternal, DistanceBetween) == 0x00004C, "Member 'COMP_EnemySensingComponent_C_IsLocationInVisionConeInternal::DistanceBetween' has a wrong offset!");
static_assert(offsetof(COMP_EnemySensingComponent_C_IsLocationInVisionConeInternal, DistanceSquaredToTarget) == 0x000050, "Member 'COMP_EnemySensingComponent_C_IsLocationInVisionConeInternal::DistanceSquaredToTarget' has a wrong offset!");
static_assert(offsetof(COMP_EnemySensingComponent_C_IsLocationInVisionConeInternal, VisionDirection) == 0x000054, "Member 'COMP_EnemySensingComponent_C_IsLocationInVisionConeInternal::VisionDirection' has a wrong offset!");
static_assert(offsetof(COMP_EnemySensingComponent_C_IsLocationInVisionConeInternal, SightSegment) == 0x000060, "Member 'COMP_EnemySensingComponent_C_IsLocationInVisionConeInternal::SightSegment' has a wrong offset!");
static_assert(offsetof(COMP_EnemySensingComponent_C_IsLocationInVisionConeInternal, OwnerActor) == 0x000070, "Member 'COMP_EnemySensingComponent_C_IsLocationInVisionConeInternal::OwnerActor' has a wrong offset!");
static_assert(offsetof(COMP_EnemySensingComponent_C_IsLocationInVisionConeInternal, CallFunc_BreakTransform_Location) == 0x000078, "Member 'COMP_EnemySensingComponent_C_IsLocationInVisionConeInternal::CallFunc_BreakTransform_Location' has a wrong offset!");
static_assert(offsetof(COMP_EnemySensingComponent_C_IsLocationInVisionConeInternal, CallFunc_BreakTransform_Rotation) == 0x000084, "Member 'COMP_EnemySensingComponent_C_IsLocationInVisionConeInternal::CallFunc_BreakTransform_Rotation' has a wrong offset!");
static_assert(offsetof(COMP_EnemySensingComponent_C_IsLocationInVisionConeInternal, CallFunc_BreakTransform_Scale) == 0x000090, "Member 'COMP_EnemySensingComponent_C_IsLocationInVisionConeInternal::CallFunc_BreakTransform_Scale' has a wrong offset!");
static_assert(offsetof(COMP_EnemySensingComponent_C_IsLocationInVisionConeInternal, CallFunc_Subtract_VectorVector_ReturnValue) == 0x00009C, "Member 'COMP_EnemySensingComponent_C_IsLocationInVisionConeInternal::CallFunc_Subtract_VectorVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(COMP_EnemySensingComponent_C_IsLocationInVisionConeInternal, CallFunc_TransformDirection_ReturnValue) == 0x0000A8, "Member 'COMP_EnemySensingComponent_C_IsLocationInVisionConeInternal::CallFunc_TransformDirection_ReturnValue' has a wrong offset!");
static_assert(offsetof(COMP_EnemySensingComponent_C_IsLocationInVisionConeInternal, CallFunc_GreaterEqual_FloatFloat_ReturnValue) == 0x0000B4, "Member 'COMP_EnemySensingComponent_C_IsLocationInVisionConeInternal::CallFunc_GreaterEqual_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(COMP_EnemySensingComponent_C_IsLocationInVisionConeInternal, CallFunc_GetVectorNormalAndLength_OutLength) == 0x0000B8, "Member 'COMP_EnemySensingComponent_C_IsLocationInVisionConeInternal::CallFunc_GetVectorNormalAndLength_OutLength' has a wrong offset!");
static_assert(offsetof(COMP_EnemySensingComponent_C_IsLocationInVisionConeInternal, CallFunc_GetVectorNormalAndLength_ReturnValue) == 0x0000BC, "Member 'COMP_EnemySensingComponent_C_IsLocationInVisionConeInternal::CallFunc_GetVectorNormalAndLength_ReturnValue' has a wrong offset!");
static_assert(offsetof(COMP_EnemySensingComponent_C_IsLocationInVisionConeInternal, CallFunc_Dot_VectorVector_ReturnValue) == 0x0000C8, "Member 'COMP_EnemySensingComponent_C_IsLocationInVisionConeInternal::CallFunc_Dot_VectorVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(COMP_EnemySensingComponent_C_IsLocationInVisionConeInternal, CallFunc_Less_FloatFloat_ReturnValue) == 0x0000CC, "Member 'COMP_EnemySensingComponent_C_IsLocationInVisionConeInternal::CallFunc_Less_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(COMP_EnemySensingComponent_C_IsLocationInVisionConeInternal, CallFunc_VSizeSquared_ReturnValue) == 0x0000D0, "Member 'COMP_EnemySensingComponent_C_IsLocationInVisionConeInternal::CallFunc_VSizeSquared_ReturnValue' has a wrong offset!");

}

