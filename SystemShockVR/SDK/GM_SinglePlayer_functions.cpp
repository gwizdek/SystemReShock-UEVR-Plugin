#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: GM_SinglePlayer

#include "Basic.hpp"

#include "GM_SinglePlayer_classes.hpp"
#include "GM_SinglePlayer_parameters.hpp"


namespace SDK
{

// Function GM_SinglePlayer.GM_SinglePlayer_C.ExecuteUbergraph_GM_SinglePlayer
// (Final, UbergraphFunction, HasDefaults)
// Parameters:
// int32                                   EntryPoint                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void AGM_SinglePlayer_C::ExecuteUbergraph_GM_SinglePlayer(int32 EntryPoint)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GM_SinglePlayer_C", "ExecuteUbergraph_GM_SinglePlayer");

	Params::GM_SinglePlayer_C_ExecuteUbergraph_GM_SinglePlayer Parms{};

	Parms.EntryPoint = EntryPoint;

	UObject::ProcessEvent(Func, &Parms);
}


// Function GM_SinglePlayer.GM_SinglePlayer_C.K2_PostLogin
// (Event, Public, BlueprintEvent)
// Parameters:
// class APlayerController*                NewPlayer                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void AGM_SinglePlayer_C::K2_PostLogin(class APlayerController* NewPlayer)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GM_SinglePlayer_C", "K2_PostLogin");

	Params::GM_SinglePlayer_C_K2_PostLogin Parms{};

	Parms.NewPlayer = NewPlayer;

	UObject::ProcessEvent(Func, &Parms);
}


// Function GM_SinglePlayer.GM_SinglePlayer_C.K2_OnLogout
// (Event, Public, BlueprintEvent)
// Parameters:
// class AController*                      ExitingController                                      (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void AGM_SinglePlayer_C::K2_OnLogout(class AController* ExitingController)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GM_SinglePlayer_C", "K2_OnLogout");

	Params::GM_SinglePlayer_C_K2_OnLogout Parms{};

	Parms.ExitingController = ExitingController;

	UObject::ProcessEvent(Func, &Parms);
}


// Function GM_SinglePlayer.GM_SinglePlayer_C.HandleStartingNewPlayer
// (Event, Public, BlueprintEvent)
// Parameters:
// class APlayerController*                NewPlayer                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void AGM_SinglePlayer_C::HandleStartingNewPlayer(class APlayerController* NewPlayer)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GM_SinglePlayer_C", "HandleStartingNewPlayer");

	Params::GM_SinglePlayer_C_HandleStartingNewPlayer Parms{};

	Parms.NewPlayer = NewPlayer;

	UObject::ProcessEvent(Func, &Parms);
}


// Function GM_SinglePlayer.GM_SinglePlayer_C.ReceiveTick
// (Event, Public, BlueprintEvent)
// Parameters:
// float                                   DeltaSeconds                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void AGM_SinglePlayer_C::ReceiveTick(float DeltaSeconds)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GM_SinglePlayer_C", "ReceiveTick");

	Params::GM_SinglePlayer_C_ReceiveTick Parms{};

	Parms.DeltaSeconds = DeltaSeconds;

	UObject::ProcessEvent(Func, &Parms);
}


// Function GM_SinglePlayer.GM_SinglePlayer_C.ReceiveBeginPlay
// (Event, Protected, BlueprintEvent)

void AGM_SinglePlayer_C::ReceiveBeginPlay()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GM_SinglePlayer_C", "ReceiveBeginPlay");

	UObject::ProcessEvent(Func, nullptr);
}


// Function GM_SinglePlayer.GM_SinglePlayer_C.CmdEnableDamageLog
// (BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    Enable                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)

void AGM_SinglePlayer_C::CmdEnableDamageLog(bool Enable)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GM_SinglePlayer_C", "CmdEnableDamageLog");

	Params::GM_SinglePlayer_C_CmdEnableDamageLog Parms{};

	Parms.Enable = Enable;

	UObject::ProcessEvent(Func, &Parms);
}


// Function GM_SinglePlayer.GM_SinglePlayer_C.CmdPlayMusicForlevel
// (BlueprintCallable, BlueprintEvent)
// Parameters:
// class FString                           LevelName                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, HasGetValueTypeHash)

void AGM_SinglePlayer_C::CmdPlayMusicForlevel(const class FString& LevelName)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GM_SinglePlayer_C", "CmdPlayMusicForlevel");

	Params::GM_SinglePlayer_C_CmdPlayMusicForlevel Parms{};

	Parms.LevelName = std::move(LevelName);

	UObject::ProcessEvent(Func, &Parms);
}


// Function GM_SinglePlayer.GM_SinglePlayer_C.CmdKillCameras
// (BlueprintCallable, BlueprintEvent)

void AGM_SinglePlayer_C::CmdKillCameras()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GM_SinglePlayer_C", "CmdKillCameras");

	UObject::ProcessEvent(Func, nullptr);
}


// Function GM_SinglePlayer.GM_SinglePlayer_C.CmdKillEnemies
// (BlueprintCallable, BlueprintEvent)

void AGM_SinglePlayer_C::CmdKillEnemies()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GM_SinglePlayer_C", "CmdKillEnemies");

	UObject::ProcessEvent(Func, nullptr);
}


// Function GM_SinglePlayer.GM_SinglePlayer_C.CmdRefillVitals
// (BlueprintCallable, BlueprintEvent)

void AGM_SinglePlayer_C::CmdRefillVitals()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GM_SinglePlayer_C", "CmdRefillVitals");

	UObject::ProcessEvent(Func, nullptr);
}


// Function GM_SinglePlayer.GM_SinglePlayer_C.CmdRoomCulling
// (BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    Enable                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)

void AGM_SinglePlayer_C::CmdRoomCulling(bool Enable)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GM_SinglePlayer_C", "CmdRoomCulling");

	Params::GM_SinglePlayer_C_CmdRoomCulling Parms{};

	Parms.Enable = Enable;

	UObject::ProcessEvent(Func, &Parms);
}


// Function GM_SinglePlayer.GM_SinglePlayer_C.CmdGodMode
// (BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    State                                                  (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)

void AGM_SinglePlayer_C::CmdGodMode(bool State)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GM_SinglePlayer_C", "CmdGodMode");

	Params::GM_SinglePlayer_C_CmdGodMode Parms{};

	Parms.State = State;

	UObject::ProcessEvent(Func, &Parms);
}


// Function GM_SinglePlayer.GM_SinglePlayer_C.CmdDetectable
// (BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    State                                                  (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)

void AGM_SinglePlayer_C::CmdDetectable(bool State)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GM_SinglePlayer_C", "CmdDetectable");

	Params::GM_SinglePlayer_C_CmdDetectable Parms{};

	Parms.State = State;

	UObject::ProcessEvent(Func, &Parms);
}


// Function GM_SinglePlayer.GM_SinglePlayer_C.CmdDestroyComputerNodes
// (BlueprintCallable, BlueprintEvent)

void AGM_SinglePlayer_C::CmdDestroyComputerNodes()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GM_SinglePlayer_C", "CmdDestroyComputerNodes");

	UObject::ProcessEvent(Func, nullptr);
}


// Function GM_SinglePlayer.GM_SinglePlayer_C.CmdCompleteQuest
// (BlueprintCallable, BlueprintEvent)
// Parameters:
// class FString                           Name_0                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, HasGetValueTypeHash)

void AGM_SinglePlayer_C::CmdCompleteQuest(const class FString& Name_0)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GM_SinglePlayer_C", "CmdCompleteQuest");

	Params::GM_SinglePlayer_C_CmdCompleteQuest Parms{};

	Parms.Name_0 = std::move(Name_0);

	UObject::ProcessEvent(Func, &Parms);
}


// Function GM_SinglePlayer.GM_SinglePlayer_C.CmdGrantItem
// (BlueprintCallable, BlueprintEvent)
// Parameters:
// class FString                           ItemWithCount                                          (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, HasGetValueTypeHash)

void AGM_SinglePlayer_C::CmdGrantItem(const class FString& ItemWithCount)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GM_SinglePlayer_C", "CmdGrantItem");

	Params::GM_SinglePlayer_C_CmdGrantItem Parms{};

	Parms.ItemWithCount = std::move(ItemWithCount);

	UObject::ProcessEvent(Func, &Parms);
}


// Function GM_SinglePlayer.GM_SinglePlayer_C.CmdGrantLoadout
// (BlueprintCallable, BlueprintEvent)
// Parameters:
// class FString                           LoadoutName                                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, HasGetValueTypeHash)

void AGM_SinglePlayer_C::CmdGrantLoadout(const class FString& LoadoutName)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GM_SinglePlayer_C", "CmdGrantLoadout");

	Params::GM_SinglePlayer_C_CmdGrantLoadout Parms{};

	Parms.LoadoutName = std::move(LoadoutName);

	UObject::ProcessEvent(Func, &Parms);
}


// Function GM_SinglePlayer.GM_SinglePlayer_C.OnSuccess_64CD9C604309A4B08B9E89B0560E87C2
// (BlueprintCallable, BlueprintEvent)

void AGM_SinglePlayer_C::OnSuccess_64CD9C604309A4B08B9E89B0560E87C2()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GM_SinglePlayer_C", "OnSuccess_64CD9C604309A4B08B9E89B0560E87C2");

	UObject::ProcessEvent(Func, nullptr);
}


// Function GM_SinglePlayer.GM_SinglePlayer_C.OnFailure_64CD9C604309A4B08B9E89B0560E87C2
// (BlueprintCallable, BlueprintEvent)

void AGM_SinglePlayer_C::OnFailure_64CD9C604309A4B08B9E89B0560E87C2()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GM_SinglePlayer_C", "OnFailure_64CD9C604309A4B08B9E89B0560E87C2");

	UObject::ProcessEvent(Func, nullptr);
}


// Function GM_SinglePlayer.GM_SinglePlayer_C.AcquireAndPossessPawn
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// class UClass*                           PawnClass                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class APawn*                            PossessedPawn                                          (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void AGM_SinglePlayer_C::AcquireAndPossessPawn(class UClass* PawnClass, class APawn** PossessedPawn)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GM_SinglePlayer_C", "AcquireAndPossessPawn");

	Params::GM_SinglePlayer_C_AcquireAndPossessPawn Parms{};

	Parms.PawnClass = PawnClass;

	UObject::ProcessEvent(Func, &Parms);

	if (PossessedPawn != nullptr)
		*PossessedPawn = Parms.PossessedPawn;
}


// Function GM_SinglePlayer.GM_SinglePlayer_C.TickCyberspace
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// float                                   DeltaSeconds                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void AGM_SinglePlayer_C::TickCyberspace(float DeltaSeconds)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GM_SinglePlayer_C", "TickCyberspace");

	Params::GM_SinglePlayer_C_TickCyberspace Parms{};

	Parms.DeltaSeconds = DeltaSeconds;

	UObject::ProcessEvent(Func, &Parms);
}


// Function GM_SinglePlayer.GM_SinglePlayer_C.TickGameOfLife
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// class APAWN_SystemShockCharacter_C*     PlayerPawn                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// float                                   DeltaSeconds                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void AGM_SinglePlayer_C::TickGameOfLife(class APAWN_SystemShockCharacter_C* PlayerPawn, float DeltaSeconds)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GM_SinglePlayer_C", "TickGameOfLife");

	Params::GM_SinglePlayer_C_TickGameOfLife Parms{};

	Parms.PlayerPawn = PlayerPawn;
	Parms.DeltaSeconds = DeltaSeconds;

	UObject::ProcessEvent(Func, &Parms);
}


// Function GM_SinglePlayer.GM_SinglePlayer_C.TickCyberBehaviorCulling
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// class APAWN_SystemShockCharacter_C*     PlayerPawn                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// float                                   DeltaSeconds                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void AGM_SinglePlayer_C::TickCyberBehaviorCulling(class APAWN_SystemShockCharacter_C* PlayerPawn, float DeltaSeconds)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GM_SinglePlayer_C", "TickCyberBehaviorCulling");

	Params::GM_SinglePlayer_C_TickCyberBehaviorCulling Parms{};

	Parms.PlayerPawn = PlayerPawn;
	Parms.DeltaSeconds = DeltaSeconds;

	UObject::ProcessEvent(Func, &Parms);
}


// Function GM_SinglePlayer.GM_SinglePlayer_C.UpdateCyberBehaviorCullState
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// class APAWN_SystemShockCharacter_C*     PlayerPawn                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class AActor*                           Actor                                                  (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void AGM_SinglePlayer_C::UpdateCyberBehaviorCullState(class APAWN_SystemShockCharacter_C* PlayerPawn, class AActor* Actor)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GM_SinglePlayer_C", "UpdateCyberBehaviorCullState");

	Params::GM_SinglePlayer_C_UpdateCyberBehaviorCullState Parms{};

	Parms.PlayerPawn = PlayerPawn;
	Parms.Actor = Actor;

	UObject::ProcessEvent(Func, &Parms);
}


// Function GM_SinglePlayer.GM_SinglePlayer_C.ActivateGameOfLifeCell
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// struct FVoxelWallLocation               WallLocation                                           (BlueprintVisible, BlueprintReadOnly, Parm, NoDestructor, HasGetValueTypeHash)
// float                                   MinCellLifetime                                        (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    Result                                                 (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void AGM_SinglePlayer_C::ActivateGameOfLifeCell(const struct FVoxelWallLocation& WallLocation, float MinCellLifetime, bool* Result)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GM_SinglePlayer_C", "ActivateGameOfLifeCell");

	Params::GM_SinglePlayer_C_ActivateGameOfLifeCell Parms{};

	Parms.WallLocation = std::move(WallLocation);
	Parms.MinCellLifetime = MinCellLifetime;

	UObject::ProcessEvent(Func, &Parms);

	if (Result != nullptr)
		*Result = Parms.Result;
}


// Function GM_SinglePlayer.GM_SinglePlayer_C.ActivateGameOfLifeCellFromRaycast
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// struct FHitResult                       RayHitResult                                           (BlueprintVisible, BlueprintReadOnly, Parm, IsPlainOldData, NoDestructor, ContainsInstancedReference)

void AGM_SinglePlayer_C::ActivateGameOfLifeCellFromRaycast(const struct FHitResult& RayHitResult)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GM_SinglePlayer_C", "ActivateGameOfLifeCellFromRaycast");

	Params::GM_SinglePlayer_C_ActivateGameOfLifeCellFromRaycast Parms{};

	Parms.RayHitResult = std::move(RayHitResult);

	UObject::ProcessEvent(Func, &Parms);
}


// Function GM_SinglePlayer.GM_SinglePlayer_C.GetBestWallLocationFromHitResult
// (Private, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// struct FHitResult                       HitResult                                              (BlueprintVisible, BlueprintReadOnly, Parm, IsPlainOldData, NoDestructor, ContainsInstancedReference)
// bool                                    Result                                                 (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
// struct FVoxelWallLocation               WallLocation                                           (Parm, OutParm, NoDestructor, HasGetValueTypeHash)

void AGM_SinglePlayer_C::GetBestWallLocationFromHitResult(const struct FHitResult& HitResult, bool* Result, struct FVoxelWallLocation* WallLocation)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GM_SinglePlayer_C", "GetBestWallLocationFromHitResult");

	Params::GM_SinglePlayer_C_GetBestWallLocationFromHitResult Parms{};

	Parms.HitResult = std::move(HitResult);

	UObject::ProcessEvent(Func, &Parms);

	if (Result != nullptr)
		*Result = Parms.Result;

	if (WallLocation != nullptr)
		*WallLocation = std::move(Parms.WallLocation);
}


// Function GM_SinglePlayer.GM_SinglePlayer_C.DebugDrawAllNeighborCounts
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)

void AGM_SinglePlayer_C::DebugDrawAllNeighborCounts()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GM_SinglePlayer_C", "DebugDrawAllNeighborCounts");

	UObject::ProcessEvent(Func, nullptr);
}


// Function GM_SinglePlayer.GM_SinglePlayer_C.DebugDrawCellNeighborCounts
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// struct FVoxelWallLocation               WallLocation                                           (BlueprintVisible, BlueprintReadOnly, Parm, NoDestructor, HasGetValueTypeHash)
// float                                   Duration                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void AGM_SinglePlayer_C::DebugDrawCellNeighborCounts(const struct FVoxelWallLocation& WallLocation, float Duration)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GM_SinglePlayer_C", "DebugDrawCellNeighborCounts");

	Params::GM_SinglePlayer_C_DebugDrawCellNeighborCounts Parms{};

	Parms.WallLocation = std::move(WallLocation);
	Parms.Duration = Duration;

	UObject::ProcessEvent(Func, &Parms);
}


// Function GM_SinglePlayer.GM_SinglePlayer_C.UpdateCurrentLevelData
// (Public, BlueprintCallable, BlueprintEvent)

void AGM_SinglePlayer_C::UpdateCurrentLevelData()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GM_SinglePlayer_C", "UpdateCurrentLevelData");

	UObject::ProcessEvent(Func, nullptr);
}


// Function GM_SinglePlayer.GM_SinglePlayer_C.DebugDrawIslandBounds
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)

void AGM_SinglePlayer_C::DebugDrawIslandBounds()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GM_SinglePlayer_C", "DebugDrawIslandBounds");

	UObject::ProcessEvent(Func, nullptr);
}


// Function GM_SinglePlayer.GM_SinglePlayer_C.RegisterCyberActorWithBehavior
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// class AActor*                           Actor                                                  (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void AGM_SinglePlayer_C::RegisterCyberActorWithBehavior(class AActor* Actor)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GM_SinglePlayer_C", "RegisterCyberActorWithBehavior");

	Params::GM_SinglePlayer_C_RegisterCyberActorWithBehavior Parms{};

	Parms.Actor = Actor;

	UObject::ProcessEvent(Func, &Parms);
}


// Function GM_SinglePlayer.GM_SinglePlayer_C.UnregisterCyberActorWithBehavior
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// class AActor*                           Actor                                                  (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void AGM_SinglePlayer_C::UnregisterCyberActorWithBehavior(class AActor* Actor)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GM_SinglePlayer_C", "UnregisterCyberActorWithBehavior");

	Params::GM_SinglePlayer_C_UnregisterCyberActorWithBehavior Parms{};

	Parms.Actor = Actor;

	UObject::ProcessEvent(Func, &Parms);
}


// Function GM_SinglePlayer.GM_SinglePlayer_C.GetCyberActorsInSphere
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// struct FVector                          Location                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// float                                   Radius                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// TArray<class AActor*>                   Result                                                 (Parm, OutParm)

void AGM_SinglePlayer_C::GetCyberActorsInSphere(const struct FVector& Location, float Radius, TArray<class AActor*>* Result)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GM_SinglePlayer_C", "GetCyberActorsInSphere");

	Params::GM_SinglePlayer_C_GetCyberActorsInSphere Parms{};

	Parms.Location = std::move(Location);
	Parms.Radius = Radius;

	UObject::ProcessEvent(Func, &Parms);

	if (Result != nullptr)
		*Result = std::move(Parms.Result);
}


// Function GM_SinglePlayer.GM_SinglePlayer_C.AddManagedDebrisFragment
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// class UStaticMeshComponent*             DebrisFragment                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void AGM_SinglePlayer_C::AddManagedDebrisFragment(class UStaticMeshComponent* DebrisFragment)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GM_SinglePlayer_C", "AddManagedDebrisFragment");

	Params::GM_SinglePlayer_C_AddManagedDebrisFragment Parms{};

	Parms.DebrisFragment = DebrisFragment;

	UObject::ProcessEvent(Func, &Parms);
}


// Function GM_SinglePlayer.GM_SinglePlayer_C.TryStartManagedDebrisFragmentTick
// (Protected, HasDefaults, BlueprintCallable, BlueprintEvent)

void AGM_SinglePlayer_C::TryStartManagedDebrisFragmentTick()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GM_SinglePlayer_C", "TryStartManagedDebrisFragmentTick");

	UObject::ProcessEvent(Func, nullptr);
}


// Function GM_SinglePlayer.GM_SinglePlayer_C.OnTickDebrisFragmentCleanup
// (Protected, BlueprintCallable, BlueprintEvent)

void AGM_SinglePlayer_C::OnTickDebrisFragmentCleanup()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GM_SinglePlayer_C", "OnTickDebrisFragmentCleanup");

	UObject::ProcessEvent(Func, nullptr);
}

}

