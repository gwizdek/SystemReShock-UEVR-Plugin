#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: VOLUME_Tutorial

#include "Basic.hpp"

#include "STRUCT_TutorialVolumeData_structs.hpp"
#include "Engine_structs.hpp"


namespace SDK::Params
{

// Function VOLUME_Tutorial.VOLUME_Tutorial_C.ExecuteUbergraph_VOLUME_Tutorial
// 0x00F0 (0x00F0 - 0x0000)
struct VOLUME_Tutorial_C_ExecuteUbergraph_VOLUME_Tutorial final
{
public:
	int32                                         EntryPoint;                                        // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UPrimitiveComponent*                    K2Node_ComponentBoundEvent_OverlappedComponent;    // 0x0008(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 K2Node_ComponentBoundEvent_OtherActor;             // 0x0010(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UPrimitiveComponent*                    K2Node_ComponentBoundEvent_OtherComp;              // 0x0018(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         K2Node_ComponentBoundEvent_OtherBodyIndex;         // 0x0020(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_24[0x4];                                       // 0x0024(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class APAWN_Hacker_Simple_C*                  K2Node_DynamicCast_AsPAWN_Hacker_Simple;           // 0x0028(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0030(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_31[0x7];                                       // 0x0031(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UPrimitiveComponent*                    K2Node_ComponentBoundEvent_OverlappedComponent_1;  // 0x0038(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 K2Node_ComponentBoundEvent_OtherActor_1;           // 0x0040(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UPrimitiveComponent*                    K2Node_ComponentBoundEvent_OtherComp_1;            // 0x0048(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         K2Node_ComponentBoundEvent_OtherBodyIndex_1;       // 0x0050(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_ComponentBoundEvent_bFromSweep;             // 0x0054(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_55[0x3];                                       // 0x0055(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FHitResult                             K2Node_ComponentBoundEvent_SweepResult;            // 0x0058(0x0088)(ConstParm, IsPlainOldData, NoDestructor, ContainsInstancedReference)
	class APAWN_Hacker_Simple_C*                  K2Node_DynamicCast_AsPAWN_Hacker_Simple_1;         // 0x00E0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess_1;                     // 0x00E8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(VOLUME_Tutorial_C_ExecuteUbergraph_VOLUME_Tutorial) == 0x000008, "Wrong alignment on VOLUME_Tutorial_C_ExecuteUbergraph_VOLUME_Tutorial");
static_assert(sizeof(VOLUME_Tutorial_C_ExecuteUbergraph_VOLUME_Tutorial) == 0x0000F0, "Wrong size on VOLUME_Tutorial_C_ExecuteUbergraph_VOLUME_Tutorial");
static_assert(offsetof(VOLUME_Tutorial_C_ExecuteUbergraph_VOLUME_Tutorial, EntryPoint) == 0x000000, "Member 'VOLUME_Tutorial_C_ExecuteUbergraph_VOLUME_Tutorial::EntryPoint' has a wrong offset!");
static_assert(offsetof(VOLUME_Tutorial_C_ExecuteUbergraph_VOLUME_Tutorial, K2Node_ComponentBoundEvent_OverlappedComponent) == 0x000008, "Member 'VOLUME_Tutorial_C_ExecuteUbergraph_VOLUME_Tutorial::K2Node_ComponentBoundEvent_OverlappedComponent' has a wrong offset!");
static_assert(offsetof(VOLUME_Tutorial_C_ExecuteUbergraph_VOLUME_Tutorial, K2Node_ComponentBoundEvent_OtherActor) == 0x000010, "Member 'VOLUME_Tutorial_C_ExecuteUbergraph_VOLUME_Tutorial::K2Node_ComponentBoundEvent_OtherActor' has a wrong offset!");
static_assert(offsetof(VOLUME_Tutorial_C_ExecuteUbergraph_VOLUME_Tutorial, K2Node_ComponentBoundEvent_OtherComp) == 0x000018, "Member 'VOLUME_Tutorial_C_ExecuteUbergraph_VOLUME_Tutorial::K2Node_ComponentBoundEvent_OtherComp' has a wrong offset!");
static_assert(offsetof(VOLUME_Tutorial_C_ExecuteUbergraph_VOLUME_Tutorial, K2Node_ComponentBoundEvent_OtherBodyIndex) == 0x000020, "Member 'VOLUME_Tutorial_C_ExecuteUbergraph_VOLUME_Tutorial::K2Node_ComponentBoundEvent_OtherBodyIndex' has a wrong offset!");
static_assert(offsetof(VOLUME_Tutorial_C_ExecuteUbergraph_VOLUME_Tutorial, K2Node_DynamicCast_AsPAWN_Hacker_Simple) == 0x000028, "Member 'VOLUME_Tutorial_C_ExecuteUbergraph_VOLUME_Tutorial::K2Node_DynamicCast_AsPAWN_Hacker_Simple' has a wrong offset!");
static_assert(offsetof(VOLUME_Tutorial_C_ExecuteUbergraph_VOLUME_Tutorial, K2Node_DynamicCast_bSuccess) == 0x000030, "Member 'VOLUME_Tutorial_C_ExecuteUbergraph_VOLUME_Tutorial::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(VOLUME_Tutorial_C_ExecuteUbergraph_VOLUME_Tutorial, K2Node_ComponentBoundEvent_OverlappedComponent_1) == 0x000038, "Member 'VOLUME_Tutorial_C_ExecuteUbergraph_VOLUME_Tutorial::K2Node_ComponentBoundEvent_OverlappedComponent_1' has a wrong offset!");
static_assert(offsetof(VOLUME_Tutorial_C_ExecuteUbergraph_VOLUME_Tutorial, K2Node_ComponentBoundEvent_OtherActor_1) == 0x000040, "Member 'VOLUME_Tutorial_C_ExecuteUbergraph_VOLUME_Tutorial::K2Node_ComponentBoundEvent_OtherActor_1' has a wrong offset!");
static_assert(offsetof(VOLUME_Tutorial_C_ExecuteUbergraph_VOLUME_Tutorial, K2Node_ComponentBoundEvent_OtherComp_1) == 0x000048, "Member 'VOLUME_Tutorial_C_ExecuteUbergraph_VOLUME_Tutorial::K2Node_ComponentBoundEvent_OtherComp_1' has a wrong offset!");
static_assert(offsetof(VOLUME_Tutorial_C_ExecuteUbergraph_VOLUME_Tutorial, K2Node_ComponentBoundEvent_OtherBodyIndex_1) == 0x000050, "Member 'VOLUME_Tutorial_C_ExecuteUbergraph_VOLUME_Tutorial::K2Node_ComponentBoundEvent_OtherBodyIndex_1' has a wrong offset!");
static_assert(offsetof(VOLUME_Tutorial_C_ExecuteUbergraph_VOLUME_Tutorial, K2Node_ComponentBoundEvent_bFromSweep) == 0x000054, "Member 'VOLUME_Tutorial_C_ExecuteUbergraph_VOLUME_Tutorial::K2Node_ComponentBoundEvent_bFromSweep' has a wrong offset!");
static_assert(offsetof(VOLUME_Tutorial_C_ExecuteUbergraph_VOLUME_Tutorial, K2Node_ComponentBoundEvent_SweepResult) == 0x000058, "Member 'VOLUME_Tutorial_C_ExecuteUbergraph_VOLUME_Tutorial::K2Node_ComponentBoundEvent_SweepResult' has a wrong offset!");
static_assert(offsetof(VOLUME_Tutorial_C_ExecuteUbergraph_VOLUME_Tutorial, K2Node_DynamicCast_AsPAWN_Hacker_Simple_1) == 0x0000E0, "Member 'VOLUME_Tutorial_C_ExecuteUbergraph_VOLUME_Tutorial::K2Node_DynamicCast_AsPAWN_Hacker_Simple_1' has a wrong offset!");
static_assert(offsetof(VOLUME_Tutorial_C_ExecuteUbergraph_VOLUME_Tutorial, K2Node_DynamicCast_bSuccess_1) == 0x0000E8, "Member 'VOLUME_Tutorial_C_ExecuteUbergraph_VOLUME_Tutorial::K2Node_DynamicCast_bSuccess_1' has a wrong offset!");

// Function VOLUME_Tutorial.VOLUME_Tutorial_C.BndEvt__Box_K2Node_ComponentBoundEvent_1_ComponentEndOverlapSignature__DelegateSignature
// 0x0020 (0x0020 - 0x0000)
struct VOLUME_Tutorial_C_BndEvt__Box_K2Node_ComponentBoundEvent_1_ComponentEndOverlapSignature__DelegateSignature final
{
public:
	class UPrimitiveComponent*                    OverlappedComponent;                               // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 OtherActor;                                        // 0x0008(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UPrimitiveComponent*                    OtherComp;                                         // 0x0010(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         OtherBodyIndex;                                    // 0x0018(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(VOLUME_Tutorial_C_BndEvt__Box_K2Node_ComponentBoundEvent_1_ComponentEndOverlapSignature__DelegateSignature) == 0x000008, "Wrong alignment on VOLUME_Tutorial_C_BndEvt__Box_K2Node_ComponentBoundEvent_1_ComponentEndOverlapSignature__DelegateSignature");
static_assert(sizeof(VOLUME_Tutorial_C_BndEvt__Box_K2Node_ComponentBoundEvent_1_ComponentEndOverlapSignature__DelegateSignature) == 0x000020, "Wrong size on VOLUME_Tutorial_C_BndEvt__Box_K2Node_ComponentBoundEvent_1_ComponentEndOverlapSignature__DelegateSignature");
static_assert(offsetof(VOLUME_Tutorial_C_BndEvt__Box_K2Node_ComponentBoundEvent_1_ComponentEndOverlapSignature__DelegateSignature, OverlappedComponent) == 0x000000, "Member 'VOLUME_Tutorial_C_BndEvt__Box_K2Node_ComponentBoundEvent_1_ComponentEndOverlapSignature__DelegateSignature::OverlappedComponent' has a wrong offset!");
static_assert(offsetof(VOLUME_Tutorial_C_BndEvt__Box_K2Node_ComponentBoundEvent_1_ComponentEndOverlapSignature__DelegateSignature, OtherActor) == 0x000008, "Member 'VOLUME_Tutorial_C_BndEvt__Box_K2Node_ComponentBoundEvent_1_ComponentEndOverlapSignature__DelegateSignature::OtherActor' has a wrong offset!");
static_assert(offsetof(VOLUME_Tutorial_C_BndEvt__Box_K2Node_ComponentBoundEvent_1_ComponentEndOverlapSignature__DelegateSignature, OtherComp) == 0x000010, "Member 'VOLUME_Tutorial_C_BndEvt__Box_K2Node_ComponentBoundEvent_1_ComponentEndOverlapSignature__DelegateSignature::OtherComp' has a wrong offset!");
static_assert(offsetof(VOLUME_Tutorial_C_BndEvt__Box_K2Node_ComponentBoundEvent_1_ComponentEndOverlapSignature__DelegateSignature, OtherBodyIndex) == 0x000018, "Member 'VOLUME_Tutorial_C_BndEvt__Box_K2Node_ComponentBoundEvent_1_ComponentEndOverlapSignature__DelegateSignature::OtherBodyIndex' has a wrong offset!");

// Function VOLUME_Tutorial.VOLUME_Tutorial_C.BndEvt__Box_K2Node_ComponentBoundEvent_0_ComponentBeginOverlapSignature__DelegateSignature
// 0x00A8 (0x00A8 - 0x0000)
struct VOLUME_Tutorial_C_BndEvt__Box_K2Node_ComponentBoundEvent_0_ComponentBeginOverlapSignature__DelegateSignature final
{
public:
	class UPrimitiveComponent*                    OverlappedComponent;                               // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 OtherActor;                                        // 0x0008(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UPrimitiveComponent*                    OtherComp;                                         // 0x0010(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         OtherBodyIndex;                                    // 0x0018(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          bFromSweep;                                        // 0x001C(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_1D[0x3];                                       // 0x001D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FHitResult                             SweepResult;                                       // 0x0020(0x0088)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, ContainsInstancedReference)
};
static_assert(alignof(VOLUME_Tutorial_C_BndEvt__Box_K2Node_ComponentBoundEvent_0_ComponentBeginOverlapSignature__DelegateSignature) == 0x000008, "Wrong alignment on VOLUME_Tutorial_C_BndEvt__Box_K2Node_ComponentBoundEvent_0_ComponentBeginOverlapSignature__DelegateSignature");
static_assert(sizeof(VOLUME_Tutorial_C_BndEvt__Box_K2Node_ComponentBoundEvent_0_ComponentBeginOverlapSignature__DelegateSignature) == 0x0000A8, "Wrong size on VOLUME_Tutorial_C_BndEvt__Box_K2Node_ComponentBoundEvent_0_ComponentBeginOverlapSignature__DelegateSignature");
static_assert(offsetof(VOLUME_Tutorial_C_BndEvt__Box_K2Node_ComponentBoundEvent_0_ComponentBeginOverlapSignature__DelegateSignature, OverlappedComponent) == 0x000000, "Member 'VOLUME_Tutorial_C_BndEvt__Box_K2Node_ComponentBoundEvent_0_ComponentBeginOverlapSignature__DelegateSignature::OverlappedComponent' has a wrong offset!");
static_assert(offsetof(VOLUME_Tutorial_C_BndEvt__Box_K2Node_ComponentBoundEvent_0_ComponentBeginOverlapSignature__DelegateSignature, OtherActor) == 0x000008, "Member 'VOLUME_Tutorial_C_BndEvt__Box_K2Node_ComponentBoundEvent_0_ComponentBeginOverlapSignature__DelegateSignature::OtherActor' has a wrong offset!");
static_assert(offsetof(VOLUME_Tutorial_C_BndEvt__Box_K2Node_ComponentBoundEvent_0_ComponentBeginOverlapSignature__DelegateSignature, OtherComp) == 0x000010, "Member 'VOLUME_Tutorial_C_BndEvt__Box_K2Node_ComponentBoundEvent_0_ComponentBeginOverlapSignature__DelegateSignature::OtherComp' has a wrong offset!");
static_assert(offsetof(VOLUME_Tutorial_C_BndEvt__Box_K2Node_ComponentBoundEvent_0_ComponentBeginOverlapSignature__DelegateSignature, OtherBodyIndex) == 0x000018, "Member 'VOLUME_Tutorial_C_BndEvt__Box_K2Node_ComponentBoundEvent_0_ComponentBeginOverlapSignature__DelegateSignature::OtherBodyIndex' has a wrong offset!");
static_assert(offsetof(VOLUME_Tutorial_C_BndEvt__Box_K2Node_ComponentBoundEvent_0_ComponentBeginOverlapSignature__DelegateSignature, bFromSweep) == 0x00001C, "Member 'VOLUME_Tutorial_C_BndEvt__Box_K2Node_ComponentBoundEvent_0_ComponentBeginOverlapSignature__DelegateSignature::bFromSweep' has a wrong offset!");
static_assert(offsetof(VOLUME_Tutorial_C_BndEvt__Box_K2Node_ComponentBoundEvent_0_ComponentBeginOverlapSignature__DelegateSignature, SweepResult) == 0x000020, "Member 'VOLUME_Tutorial_C_BndEvt__Box_K2Node_ComponentBoundEvent_0_ComponentBeginOverlapSignature__DelegateSignature::SweepResult' has a wrong offset!");

// Function VOLUME_Tutorial.VOLUME_Tutorial_C.OnEnterTutorialVolume
// 0x0008 (0x0008 - 0x0000)
struct VOLUME_Tutorial_C_OnEnterTutorialVolume final
{
public:
	class APAWN_Hacker_Simple_C*                  Player;                                            // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(VOLUME_Tutorial_C_OnEnterTutorialVolume) == 0x000008, "Wrong alignment on VOLUME_Tutorial_C_OnEnterTutorialVolume");
static_assert(sizeof(VOLUME_Tutorial_C_OnEnterTutorialVolume) == 0x000008, "Wrong size on VOLUME_Tutorial_C_OnEnterTutorialVolume");
static_assert(offsetof(VOLUME_Tutorial_C_OnEnterTutorialVolume, Player) == 0x000000, "Member 'VOLUME_Tutorial_C_OnEnterTutorialVolume::Player' has a wrong offset!");

// Function VOLUME_Tutorial.VOLUME_Tutorial_C.OnLeaveTutorialVolume
// 0x0048 (0x0048 - 0x0000)
struct VOLUME_Tutorial_C_OnLeaveTutorialVolume final
{
public:
	class APAWN_Hacker_Simple_C*                  Player;                                            // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Array_Index_Variable;                     // 0x0008(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Loop_Counter_Variable;                    // 0x000C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue;                   // 0x0010(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Length_ReturnValue;                 // 0x0014(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FSTRUCT_TutorialVolumeData             CallFunc_Array_Get_Item;                           // 0x0018(0x0028)(NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue;                  // 0x0040(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(VOLUME_Tutorial_C_OnLeaveTutorialVolume) == 0x000008, "Wrong alignment on VOLUME_Tutorial_C_OnLeaveTutorialVolume");
static_assert(sizeof(VOLUME_Tutorial_C_OnLeaveTutorialVolume) == 0x000048, "Wrong size on VOLUME_Tutorial_C_OnLeaveTutorialVolume");
static_assert(offsetof(VOLUME_Tutorial_C_OnLeaveTutorialVolume, Player) == 0x000000, "Member 'VOLUME_Tutorial_C_OnLeaveTutorialVolume::Player' has a wrong offset!");
static_assert(offsetof(VOLUME_Tutorial_C_OnLeaveTutorialVolume, Temp_int_Array_Index_Variable) == 0x000008, "Member 'VOLUME_Tutorial_C_OnLeaveTutorialVolume::Temp_int_Array_Index_Variable' has a wrong offset!");
static_assert(offsetof(VOLUME_Tutorial_C_OnLeaveTutorialVolume, Temp_int_Loop_Counter_Variable) == 0x00000C, "Member 'VOLUME_Tutorial_C_OnLeaveTutorialVolume::Temp_int_Loop_Counter_Variable' has a wrong offset!");
static_assert(offsetof(VOLUME_Tutorial_C_OnLeaveTutorialVolume, CallFunc_Add_IntInt_ReturnValue) == 0x000010, "Member 'VOLUME_Tutorial_C_OnLeaveTutorialVolume::CallFunc_Add_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(VOLUME_Tutorial_C_OnLeaveTutorialVolume, CallFunc_Array_Length_ReturnValue) == 0x000014, "Member 'VOLUME_Tutorial_C_OnLeaveTutorialVolume::CallFunc_Array_Length_ReturnValue' has a wrong offset!");
static_assert(offsetof(VOLUME_Tutorial_C_OnLeaveTutorialVolume, CallFunc_Array_Get_Item) == 0x000018, "Member 'VOLUME_Tutorial_C_OnLeaveTutorialVolume::CallFunc_Array_Get_Item' has a wrong offset!");
static_assert(offsetof(VOLUME_Tutorial_C_OnLeaveTutorialVolume, CallFunc_Less_IntInt_ReturnValue) == 0x000040, "Member 'VOLUME_Tutorial_C_OnLeaveTutorialVolume::CallFunc_Less_IntInt_ReturnValue' has a wrong offset!");

}

