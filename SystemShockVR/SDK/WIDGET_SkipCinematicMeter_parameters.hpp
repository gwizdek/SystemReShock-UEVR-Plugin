#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: WIDGET_SkipCinematicMeter

#include "Basic.hpp"

#include "SlateCore_structs.hpp"


namespace SDK::Params
{

// Function WIDGET_SkipCinematicMeter.WIDGET_SkipCinematicMeter_C.ExecuteUbergraph_WIDGET_SkipCinematicMeter
// 0x0040 (0x0040 - 0x0000)
struct WIDGET_SkipCinematicMeter_C_ExecuteUbergraph_WIDGET_SkipCinematicMeter final
{
public:
	int32                                         EntryPoint;                                        // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FGeometry                              K2Node_Event_MyGeometry;                           // 0x0004(0x0038)(IsPlainOldData, NoDestructor)
	float                                         K2Node_Event_InDeltaTime;                          // 0x003C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(WIDGET_SkipCinematicMeter_C_ExecuteUbergraph_WIDGET_SkipCinematicMeter) == 0x000004, "Wrong alignment on WIDGET_SkipCinematicMeter_C_ExecuteUbergraph_WIDGET_SkipCinematicMeter");
static_assert(sizeof(WIDGET_SkipCinematicMeter_C_ExecuteUbergraph_WIDGET_SkipCinematicMeter) == 0x000040, "Wrong size on WIDGET_SkipCinematicMeter_C_ExecuteUbergraph_WIDGET_SkipCinematicMeter");
static_assert(offsetof(WIDGET_SkipCinematicMeter_C_ExecuteUbergraph_WIDGET_SkipCinematicMeter, EntryPoint) == 0x000000, "Member 'WIDGET_SkipCinematicMeter_C_ExecuteUbergraph_WIDGET_SkipCinematicMeter::EntryPoint' has a wrong offset!");
static_assert(offsetof(WIDGET_SkipCinematicMeter_C_ExecuteUbergraph_WIDGET_SkipCinematicMeter, K2Node_Event_MyGeometry) == 0x000004, "Member 'WIDGET_SkipCinematicMeter_C_ExecuteUbergraph_WIDGET_SkipCinematicMeter::K2Node_Event_MyGeometry' has a wrong offset!");
static_assert(offsetof(WIDGET_SkipCinematicMeter_C_ExecuteUbergraph_WIDGET_SkipCinematicMeter, K2Node_Event_InDeltaTime) == 0x00003C, "Member 'WIDGET_SkipCinematicMeter_C_ExecuteUbergraph_WIDGET_SkipCinematicMeter::K2Node_Event_InDeltaTime' has a wrong offset!");

// Function WIDGET_SkipCinematicMeter.WIDGET_SkipCinematicMeter_C.Tick
// 0x003C (0x003C - 0x0000)
struct WIDGET_SkipCinematicMeter_C_Tick final
{
public:
	struct FGeometry                              MyGeometry;                                        // 0x0000(0x0038)(BlueprintVisible, BlueprintReadOnly, Parm, IsPlainOldData, NoDestructor)
	float                                         InDeltaTime;                                       // 0x0038(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(WIDGET_SkipCinematicMeter_C_Tick) == 0x000004, "Wrong alignment on WIDGET_SkipCinematicMeter_C_Tick");
static_assert(sizeof(WIDGET_SkipCinematicMeter_C_Tick) == 0x00003C, "Wrong size on WIDGET_SkipCinematicMeter_C_Tick");
static_assert(offsetof(WIDGET_SkipCinematicMeter_C_Tick, MyGeometry) == 0x000000, "Member 'WIDGET_SkipCinematicMeter_C_Tick::MyGeometry' has a wrong offset!");
static_assert(offsetof(WIDGET_SkipCinematicMeter_C_Tick, InDeltaTime) == 0x000038, "Member 'WIDGET_SkipCinematicMeter_C_Tick::InDeltaTime' has a wrong offset!");

// Function WIDGET_SkipCinematicMeter.WIDGET_SkipCinematicMeter_C.InitializeSkipCinematicMeter
// 0x0008 (0x0008 - 0x0000)
struct WIDGET_SkipCinematicMeter_C_InitializeSkipCinematicMeter final
{
public:
	class UMaterialInstanceDynamic*               CallFunc_GetDynamicMaterial_ReturnValue;           // 0x0000(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(WIDGET_SkipCinematicMeter_C_InitializeSkipCinematicMeter) == 0x000008, "Wrong alignment on WIDGET_SkipCinematicMeter_C_InitializeSkipCinematicMeter");
static_assert(sizeof(WIDGET_SkipCinematicMeter_C_InitializeSkipCinematicMeter) == 0x000008, "Wrong size on WIDGET_SkipCinematicMeter_C_InitializeSkipCinematicMeter");
static_assert(offsetof(WIDGET_SkipCinematicMeter_C_InitializeSkipCinematicMeter, CallFunc_GetDynamicMaterial_ReturnValue) == 0x000000, "Member 'WIDGET_SkipCinematicMeter_C_InitializeSkipCinematicMeter::CallFunc_GetDynamicMaterial_ReturnValue' has a wrong offset!");

// Function WIDGET_SkipCinematicMeter.WIDGET_SkipCinematicMeter_C.BeginSkipCounter
// 0x0008 (0x0008 - 0x0000)
struct WIDGET_SkipCinematicMeter_C_BeginSkipCounter final
{
public:
	float                                         HoldLength_0;                                      // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Not_PreBool_ReturnValue;                  // 0x0004(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(WIDGET_SkipCinematicMeter_C_BeginSkipCounter) == 0x000004, "Wrong alignment on WIDGET_SkipCinematicMeter_C_BeginSkipCounter");
static_assert(sizeof(WIDGET_SkipCinematicMeter_C_BeginSkipCounter) == 0x000008, "Wrong size on WIDGET_SkipCinematicMeter_C_BeginSkipCounter");
static_assert(offsetof(WIDGET_SkipCinematicMeter_C_BeginSkipCounter, HoldLength_0) == 0x000000, "Member 'WIDGET_SkipCinematicMeter_C_BeginSkipCounter::HoldLength_0' has a wrong offset!");
static_assert(offsetof(WIDGET_SkipCinematicMeter_C_BeginSkipCounter, CallFunc_Not_PreBool_ReturnValue) == 0x000004, "Member 'WIDGET_SkipCinematicMeter_C_BeginSkipCounter::CallFunc_Not_PreBool_ReturnValue' has a wrong offset!");

// Function WIDGET_SkipCinematicMeter.WIDGET_SkipCinematicMeter_C.UpdateSkipMeter
// 0x0020 (0x0020 - 0x0000)
struct WIDGET_SkipCinematicMeter_C_UpdateSkipMeter final
{
public:
	float                                         ElapsedTime;                                       // 0x0000(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         TimeProgressPercentage;                            // 0x0004(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Not_PreBool_ReturnValue;                  // 0x0008(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_GreaterEqual_FloatFloat_ReturnValue;      // 0x0009(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_A[0x2];                                        // 0x000A(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_GetPlayTimeInSeconds_ReturnValue;         // 0x000C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Subtract_FloatFloat_ReturnValue;          // 0x0010(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Divide_FloatFloat_ReturnValue;            // 0x0014(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_FloatFloat_ReturnValue;        // 0x0018(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_19[0x3];                                       // 0x0019(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_GetPlayTimeInSeconds_ReturnValue_1;       // 0x001C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(WIDGET_SkipCinematicMeter_C_UpdateSkipMeter) == 0x000004, "Wrong alignment on WIDGET_SkipCinematicMeter_C_UpdateSkipMeter");
static_assert(sizeof(WIDGET_SkipCinematicMeter_C_UpdateSkipMeter) == 0x000020, "Wrong size on WIDGET_SkipCinematicMeter_C_UpdateSkipMeter");
static_assert(offsetof(WIDGET_SkipCinematicMeter_C_UpdateSkipMeter, ElapsedTime) == 0x000000, "Member 'WIDGET_SkipCinematicMeter_C_UpdateSkipMeter::ElapsedTime' has a wrong offset!");
static_assert(offsetof(WIDGET_SkipCinematicMeter_C_UpdateSkipMeter, TimeProgressPercentage) == 0x000004, "Member 'WIDGET_SkipCinematicMeter_C_UpdateSkipMeter::TimeProgressPercentage' has a wrong offset!");
static_assert(offsetof(WIDGET_SkipCinematicMeter_C_UpdateSkipMeter, CallFunc_Not_PreBool_ReturnValue) == 0x000008, "Member 'WIDGET_SkipCinematicMeter_C_UpdateSkipMeter::CallFunc_Not_PreBool_ReturnValue' has a wrong offset!");
static_assert(offsetof(WIDGET_SkipCinematicMeter_C_UpdateSkipMeter, CallFunc_GreaterEqual_FloatFloat_ReturnValue) == 0x000009, "Member 'WIDGET_SkipCinematicMeter_C_UpdateSkipMeter::CallFunc_GreaterEqual_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(WIDGET_SkipCinematicMeter_C_UpdateSkipMeter, CallFunc_GetPlayTimeInSeconds_ReturnValue) == 0x00000C, "Member 'WIDGET_SkipCinematicMeter_C_UpdateSkipMeter::CallFunc_GetPlayTimeInSeconds_ReturnValue' has a wrong offset!");
static_assert(offsetof(WIDGET_SkipCinematicMeter_C_UpdateSkipMeter, CallFunc_Subtract_FloatFloat_ReturnValue) == 0x000010, "Member 'WIDGET_SkipCinematicMeter_C_UpdateSkipMeter::CallFunc_Subtract_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(WIDGET_SkipCinematicMeter_C_UpdateSkipMeter, CallFunc_Divide_FloatFloat_ReturnValue) == 0x000014, "Member 'WIDGET_SkipCinematicMeter_C_UpdateSkipMeter::CallFunc_Divide_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(WIDGET_SkipCinematicMeter_C_UpdateSkipMeter, CallFunc_EqualEqual_FloatFloat_ReturnValue) == 0x000018, "Member 'WIDGET_SkipCinematicMeter_C_UpdateSkipMeter::CallFunc_EqualEqual_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(WIDGET_SkipCinematicMeter_C_UpdateSkipMeter, CallFunc_GetPlayTimeInSeconds_ReturnValue_1) == 0x00001C, "Member 'WIDGET_SkipCinematicMeter_C_UpdateSkipMeter::CallFunc_GetPlayTimeInSeconds_ReturnValue_1' has a wrong offset!");

// Function WIDGET_SkipCinematicMeter.WIDGET_SkipCinematicMeter_C.TriggerSkipScene
// 0x0008 (0x0008 - 0x0000)
struct WIDGET_SkipCinematicMeter_C_TriggerSkipScene final
{
public:
	class UUMGSequencePlayer*                     CallFunc_PlayAnimation_ReturnValue;                // 0x0000(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(WIDGET_SkipCinematicMeter_C_TriggerSkipScene) == 0x000008, "Wrong alignment on WIDGET_SkipCinematicMeter_C_TriggerSkipScene");
static_assert(sizeof(WIDGET_SkipCinematicMeter_C_TriggerSkipScene) == 0x000008, "Wrong size on WIDGET_SkipCinematicMeter_C_TriggerSkipScene");
static_assert(offsetof(WIDGET_SkipCinematicMeter_C_TriggerSkipScene, CallFunc_PlayAnimation_ReturnValue) == 0x000000, "Member 'WIDGET_SkipCinematicMeter_C_TriggerSkipScene::CallFunc_PlayAnimation_ReturnValue' has a wrong offset!");

// Function WIDGET_SkipCinematicMeter.WIDGET_SkipCinematicMeter_C.CancelSkipCounter
// 0x0001 (0x0001 - 0x0000)
struct WIDGET_SkipCinematicMeter_C_CancelSkipCounter final
{
public:
	bool                                          CallFunc_Not_PreBool_ReturnValue;                  // 0x0000(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(WIDGET_SkipCinematicMeter_C_CancelSkipCounter) == 0x000001, "Wrong alignment on WIDGET_SkipCinematicMeter_C_CancelSkipCounter");
static_assert(sizeof(WIDGET_SkipCinematicMeter_C_CancelSkipCounter) == 0x000001, "Wrong size on WIDGET_SkipCinematicMeter_C_CancelSkipCounter");
static_assert(offsetof(WIDGET_SkipCinematicMeter_C_CancelSkipCounter, CallFunc_Not_PreBool_ReturnValue) == 0x000000, "Member 'WIDGET_SkipCinematicMeter_C_CancelSkipCounter::CallFunc_Not_PreBool_ReturnValue' has a wrong offset!");

}

