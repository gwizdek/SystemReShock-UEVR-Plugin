#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: GM_SinglePlayer

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "STRUCT_DebrisFragmentInstance_structs.hpp"
#include "CoreUObject_structs.hpp"
#include "LevelVoxelization_structs.hpp"
#include "ENUM_Axis_structs.hpp"
#include "AttributeSystem_structs.hpp"


namespace SDK::Params
{

// Function GM_SinglePlayer.GM_SinglePlayer_C.ExecuteUbergraph_GM_SinglePlayer
// 0x03A8 (0x03A8 - 0x0000)
struct GM_SinglePlayer_C_ExecuteUbergraph_GM_SinglePlayer final
{
public:
	int32                                         EntryPoint;                                        // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Loop_Counter_Variable;                    // 0x0004(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Loop_Counter_Variable_1;                  // 0x0008(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue;                   // 0x000C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue_1;                 // 0x0010(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Array_Index_Variable;                     // 0x0014(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Variable;                                // 0x0018(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_19[0x3];                                       // 0x0019(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Temp_int_Loop_Counter_Variable_2;                  // 0x001C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue_2;                 // 0x0020(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_24[0x4];                                       // 0x0024(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 K2Node_CustomEvent_LoadoutName;                    // 0x0028(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	class FString                                 K2Node_CustomEvent_ItemWithCount;                  // 0x0038(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	class FString                                 K2Node_CustomEvent_Name;                           // 0x0048(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	bool                                          K2Node_CustomEvent_State_1;                        // 0x0058(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_59[0x7];                                       // 0x0059(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class AINTERACT_ComputerNode_C*>       CallFunc_GetAllActorsOfClass_OutActors;            // 0x0060(0x0010)(ReferenceParm)
	struct FAttribModApplyData                    K2Node_MakeStruct_AttribModApplyData;              // 0x0070(0x00A0)()
	int32                                         CallFunc_Array_Length_ReturnValue;                 // 0x0110(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_CustomEvent_State;                          // 0x0114(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Less_IntInt_ReturnValue;                  // 0x0115(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          K2Node_CustomEvent_Enable_1;                       // 0x0116(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_117[0x1];                                      // 0x0117(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	class UGameInstance*                          CallFunc_GetGameInstance_ReturnValue;              // 0x0118(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UGI_SinglePlayer_C*                     K2Node_DynamicCast_AsGI_Single_Player;             // 0x0120(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0128(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_129[0x3];                                      // 0x0129(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   CallFunc_GetCurrentLevelName_Result;               // 0x012C(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_134[0x4];                                      // 0x0134(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class APAWN_Enemy_C*>                  CallFunc_GetAllActorsOfClass_OutActors_1;          // 0x0138(0x0010)(ReferenceParm)
	int32                                         CallFunc_Array_Length_ReturnValue_1;               // 0x0148(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FName                                   Temp_name_Variable;                                // 0x014C(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue_1;                // 0x0154(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_155[0x3];                                      // 0x0155(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   K2Node_Select_Default;                             // 0x0158(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Vector_Zero_ReturnValue;                  // 0x0160(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_16C[0x4];                                      // 0x016C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class APlayerController*                      CallFunc_GetPlayerController_ReturnValue;          // 0x0170(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_SetCurrentLevel_ReturnValue;              // 0x0178(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_179[0x7];                                      // 0x0179(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class ACON_Hacker_C*                          K2Node_DynamicCast_AsCON_Hacker;                   // 0x0180(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess_1;                     // 0x0188(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_189[0x7];                                      // 0x0189(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class APlayerController*                      CallFunc_GetPlayerController_ReturnValue_1;        // 0x0190(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class ACON_Hacker_C*                          K2Node_DynamicCast_AsCON_Hacker_1;                 // 0x0198(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess_2;                     // 0x01A0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_1A1[0x3];                                      // 0x01A1(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Temp_int_Array_Index_Variable_1;                   // 0x01A4(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class APAWN_Enemy_C*                          CallFunc_Array_Get_Item;                           // 0x01A8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UAttribMod*                             CallFunc_ApplyMod_ReturnValue;                     // 0x01B0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x01B8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_1B9[0x7];                                      // 0x01B9(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class APlayerController*                      CallFunc_GetPlayerController_ReturnValue_2;        // 0x01C0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class ACON_Hacker_C*                          K2Node_DynamicCast_AsCON_Hacker_2;                 // 0x01C8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess_3;                     // 0x01D0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_1D1[0x7];                                      // 0x01D1(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class APlayerController*                      CallFunc_GetPlayerController_ReturnValue_3;        // 0x01D8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class APlayerController*                      CallFunc_GetPlayerController_ReturnValue_4;        // 0x01E0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class ACON_Hacker_C*                          K2Node_DynamicCast_AsCON_Hacker_3;                 // 0x01E8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess_4;                     // 0x01F0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_1F1[0x7];                                      // 0x01F1(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class ACON_Hacker_C*                          K2Node_DynamicCast_AsCON_Hacker_4;                 // 0x01F8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess_5;                     // 0x0200(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_201[0x7];                                      // 0x0201(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class APlayerController*                      CallFunc_GetPlayerController_ReturnValue_5;        // 0x0208(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class ACON_Hacker_C*                          K2Node_DynamicCast_AsCON_Hacker_5;                 // 0x0210(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess_6;                     // 0x0218(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_219[0x7];                                      // 0x0219(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class AINTERACT_SecurityCamera_C*>     CallFunc_GetAllActorsOfClass_OutActors_2;          // 0x0220(0x0010)(ReferenceParm)
	class AINTERACT_SecurityCamera_C*             CallFunc_Array_Get_Item_1;                         // 0x0230(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Length_ReturnValue_2;               // 0x0238(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue_2;                // 0x023C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsValid_ReturnValue_1;                    // 0x023D(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_23E[0x2];                                      // 0x023E(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Temp_int_Array_Index_Variable_2;                   // 0x0240(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_244[0x4];                                      // 0x0244(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class AINTERACT_ComputerNode_C*               CallFunc_Array_Get_Item_2;                         // 0x0248(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UAttribMod*                             CallFunc_ApplyMod_ReturnValue_1;                   // 0x0250(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UAttribMod*                             CallFunc_ApplyMod_ReturnValue_2;                   // 0x0258(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FString                                 K2Node_CustomEvent_LevelName;                      // 0x0260(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	TDelegate<void()>                             K2Node_CreateDelegate_OutputDelegate;              // 0x0270(0x0010)(ZeroConstructor, NoDestructor)
	class FName                                   CallFunc_Conv_StringToName_ReturnValue;            // 0x0280(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UGameInstance*                          CallFunc_GetGameInstance_ReturnValue_1;            // 0x0288(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_CustomEvent_Enable;                         // 0x0290(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_291[0x7];                                      // 0x0291(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UGI_SinglePlayer_C*                     K2Node_DynamicCast_AsGI_Single_Player_1;           // 0x0298(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess_7;                     // 0x02A0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_2A1[0x7];                                      // 0x02A1(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class APlayerController*                      CallFunc_GetPlayerController_ReturnValue_6;        // 0x02A8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_SetMusicLevelOverride_Result;             // 0x02B0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_2B1[0x7];                                      // 0x02B1(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class ACON_Hacker_C*                          K2Node_DynamicCast_AsCON_Hacker_6;                 // 0x02B8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess_8;                     // 0x02C0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_2C1[0x3];                                      // 0x02C1(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         K2Node_Event_DeltaSeconds;                         // 0x02C4(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UGameInstance*                          CallFunc_GetGameInstance_ReturnValue_2;            // 0x02C8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UGI_SinglePlayer_C*                     K2Node_DynamicCast_AsGI_Single_Player_2;           // 0x02D0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess_9;                     // 0x02D8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_2D9[0x3];                                      // 0x02D9(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	TDelegate<void()>                             K2Node_CreateDelegate_OutputDelegate_1;            // 0x02DC(0x0010)(ZeroConstructor, NoDestructor)
	uint8                                         Pad_2EC[0x4];                                      // 0x02EC(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UCyberspaceLifeSimulation_C*            CallFunc_SpawnObject_ReturnValue;                  // 0x02F0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class APlayerController*                      K2Node_Event_NewPlayer_1;                          // 0x02F8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UGameInstance*                          CallFunc_GetGameInstance_ReturnValue_3;            // 0x0300(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class APawn*                                  CallFunc_K2_GetPawn_ReturnValue;                   // 0x0308(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UGI_SinglePlayer_C*                     K2Node_DynamicCast_AsGI_Single_Player_3;           // 0x0310(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess_10;                    // 0x0318(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_HasAssignedCurrentLevel_Result;           // 0x0319(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Not_PreBool_ReturnValue;                  // 0x031A(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_31B[0x1];                                      // 0x031B(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                CallFunc_Vector_Zero_ReturnValue_1;                // 0x031C(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TDelegate<void()>                             K2Node_CreateDelegate_OutputDelegate_2;            // 0x0328(0x0010)(ZeroConstructor, NoDestructor)
	class FString                                 CallFunc_GetCurrentLevelName_ReturnValue;          // 0x0338(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	class FName                                   CallFunc_Conv_StringToName_ReturnValue_1;          // 0x0348(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_NotEqual_StrStr_ReturnValue;              // 0x0350(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_SetCurrentLevel_ReturnValue_1;            // 0x0351(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_352[0x2];                                      // 0x0352(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   CallFunc_Conv_StringToName_ReturnValue_2;          // 0x0354(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_35C[0x4];                                      // 0x035C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class AController*                            K2Node_Event_ExitingController;                    // 0x0360(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FDataTableRowHandle                    K2Node_MakeStruct_DataTableRowHandle;              // 0x0368(0x0010)(NoDestructor)
	class UGameInstance*                          CallFunc_GetGameInstance_ReturnValue_4;            // 0x0378(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UGI_SinglePlayer_C*                     K2Node_DynamicCast_AsGI_Single_Player_4;           // 0x0380(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess_11;                    // 0x0388(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_389[0x7];                                      // 0x0389(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class APlayerController*                      K2Node_Event_NewPlayer;                            // 0x0390(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UAchievementQueryCallbackProxy*         CallFunc_CacheAchievements_ReturnValue;            // 0x0398(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue_2;                    // 0x03A0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(GM_SinglePlayer_C_ExecuteUbergraph_GM_SinglePlayer) == 0x000008, "Wrong alignment on GM_SinglePlayer_C_ExecuteUbergraph_GM_SinglePlayer");
static_assert(sizeof(GM_SinglePlayer_C_ExecuteUbergraph_GM_SinglePlayer) == 0x0003A8, "Wrong size on GM_SinglePlayer_C_ExecuteUbergraph_GM_SinglePlayer");
static_assert(offsetof(GM_SinglePlayer_C_ExecuteUbergraph_GM_SinglePlayer, EntryPoint) == 0x000000, "Member 'GM_SinglePlayer_C_ExecuteUbergraph_GM_SinglePlayer::EntryPoint' has a wrong offset!");
static_assert(offsetof(GM_SinglePlayer_C_ExecuteUbergraph_GM_SinglePlayer, Temp_int_Loop_Counter_Variable) == 0x000004, "Member 'GM_SinglePlayer_C_ExecuteUbergraph_GM_SinglePlayer::Temp_int_Loop_Counter_Variable' has a wrong offset!");
static_assert(offsetof(GM_SinglePlayer_C_ExecuteUbergraph_GM_SinglePlayer, Temp_int_Loop_Counter_Variable_1) == 0x000008, "Member 'GM_SinglePlayer_C_ExecuteUbergraph_GM_SinglePlayer::Temp_int_Loop_Counter_Variable_1' has a wrong offset!");
static_assert(offsetof(GM_SinglePlayer_C_ExecuteUbergraph_GM_SinglePlayer, CallFunc_Add_IntInt_ReturnValue) == 0x00000C, "Member 'GM_SinglePlayer_C_ExecuteUbergraph_GM_SinglePlayer::CallFunc_Add_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(GM_SinglePlayer_C_ExecuteUbergraph_GM_SinglePlayer, CallFunc_Add_IntInt_ReturnValue_1) == 0x000010, "Member 'GM_SinglePlayer_C_ExecuteUbergraph_GM_SinglePlayer::CallFunc_Add_IntInt_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(GM_SinglePlayer_C_ExecuteUbergraph_GM_SinglePlayer, Temp_int_Array_Index_Variable) == 0x000014, "Member 'GM_SinglePlayer_C_ExecuteUbergraph_GM_SinglePlayer::Temp_int_Array_Index_Variable' has a wrong offset!");
static_assert(offsetof(GM_SinglePlayer_C_ExecuteUbergraph_GM_SinglePlayer, Temp_bool_Variable) == 0x000018, "Member 'GM_SinglePlayer_C_ExecuteUbergraph_GM_SinglePlayer::Temp_bool_Variable' has a wrong offset!");
static_assert(offsetof(GM_SinglePlayer_C_ExecuteUbergraph_GM_SinglePlayer, Temp_int_Loop_Counter_Variable_2) == 0x00001C, "Member 'GM_SinglePlayer_C_ExecuteUbergraph_GM_SinglePlayer::Temp_int_Loop_Counter_Variable_2' has a wrong offset!");
static_assert(offsetof(GM_SinglePlayer_C_ExecuteUbergraph_GM_SinglePlayer, CallFunc_Add_IntInt_ReturnValue_2) == 0x000020, "Member 'GM_SinglePlayer_C_ExecuteUbergraph_GM_SinglePlayer::CallFunc_Add_IntInt_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(GM_SinglePlayer_C_ExecuteUbergraph_GM_SinglePlayer, K2Node_CustomEvent_LoadoutName) == 0x000028, "Member 'GM_SinglePlayer_C_ExecuteUbergraph_GM_SinglePlayer::K2Node_CustomEvent_LoadoutName' has a wrong offset!");
static_assert(offsetof(GM_SinglePlayer_C_ExecuteUbergraph_GM_SinglePlayer, K2Node_CustomEvent_ItemWithCount) == 0x000038, "Member 'GM_SinglePlayer_C_ExecuteUbergraph_GM_SinglePlayer::K2Node_CustomEvent_ItemWithCount' has a wrong offset!");
static_assert(offsetof(GM_SinglePlayer_C_ExecuteUbergraph_GM_SinglePlayer, K2Node_CustomEvent_Name) == 0x000048, "Member 'GM_SinglePlayer_C_ExecuteUbergraph_GM_SinglePlayer::K2Node_CustomEvent_Name' has a wrong offset!");
static_assert(offsetof(GM_SinglePlayer_C_ExecuteUbergraph_GM_SinglePlayer, K2Node_CustomEvent_State_1) == 0x000058, "Member 'GM_SinglePlayer_C_ExecuteUbergraph_GM_SinglePlayer::K2Node_CustomEvent_State_1' has a wrong offset!");
static_assert(offsetof(GM_SinglePlayer_C_ExecuteUbergraph_GM_SinglePlayer, CallFunc_GetAllActorsOfClass_OutActors) == 0x000060, "Member 'GM_SinglePlayer_C_ExecuteUbergraph_GM_SinglePlayer::CallFunc_GetAllActorsOfClass_OutActors' has a wrong offset!");
static_assert(offsetof(GM_SinglePlayer_C_ExecuteUbergraph_GM_SinglePlayer, K2Node_MakeStruct_AttribModApplyData) == 0x000070, "Member 'GM_SinglePlayer_C_ExecuteUbergraph_GM_SinglePlayer::K2Node_MakeStruct_AttribModApplyData' has a wrong offset!");
static_assert(offsetof(GM_SinglePlayer_C_ExecuteUbergraph_GM_SinglePlayer, CallFunc_Array_Length_ReturnValue) == 0x000110, "Member 'GM_SinglePlayer_C_ExecuteUbergraph_GM_SinglePlayer::CallFunc_Array_Length_ReturnValue' has a wrong offset!");
static_assert(offsetof(GM_SinglePlayer_C_ExecuteUbergraph_GM_SinglePlayer, K2Node_CustomEvent_State) == 0x000114, "Member 'GM_SinglePlayer_C_ExecuteUbergraph_GM_SinglePlayer::K2Node_CustomEvent_State' has a wrong offset!");
static_assert(offsetof(GM_SinglePlayer_C_ExecuteUbergraph_GM_SinglePlayer, CallFunc_Less_IntInt_ReturnValue) == 0x000115, "Member 'GM_SinglePlayer_C_ExecuteUbergraph_GM_SinglePlayer::CallFunc_Less_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(GM_SinglePlayer_C_ExecuteUbergraph_GM_SinglePlayer, K2Node_CustomEvent_Enable_1) == 0x000116, "Member 'GM_SinglePlayer_C_ExecuteUbergraph_GM_SinglePlayer::K2Node_CustomEvent_Enable_1' has a wrong offset!");
static_assert(offsetof(GM_SinglePlayer_C_ExecuteUbergraph_GM_SinglePlayer, CallFunc_GetGameInstance_ReturnValue) == 0x000118, "Member 'GM_SinglePlayer_C_ExecuteUbergraph_GM_SinglePlayer::CallFunc_GetGameInstance_ReturnValue' has a wrong offset!");
static_assert(offsetof(GM_SinglePlayer_C_ExecuteUbergraph_GM_SinglePlayer, K2Node_DynamicCast_AsGI_Single_Player) == 0x000120, "Member 'GM_SinglePlayer_C_ExecuteUbergraph_GM_SinglePlayer::K2Node_DynamicCast_AsGI_Single_Player' has a wrong offset!");
static_assert(offsetof(GM_SinglePlayer_C_ExecuteUbergraph_GM_SinglePlayer, K2Node_DynamicCast_bSuccess) == 0x000128, "Member 'GM_SinglePlayer_C_ExecuteUbergraph_GM_SinglePlayer::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(GM_SinglePlayer_C_ExecuteUbergraph_GM_SinglePlayer, CallFunc_GetCurrentLevelName_Result) == 0x00012C, "Member 'GM_SinglePlayer_C_ExecuteUbergraph_GM_SinglePlayer::CallFunc_GetCurrentLevelName_Result' has a wrong offset!");
static_assert(offsetof(GM_SinglePlayer_C_ExecuteUbergraph_GM_SinglePlayer, CallFunc_GetAllActorsOfClass_OutActors_1) == 0x000138, "Member 'GM_SinglePlayer_C_ExecuteUbergraph_GM_SinglePlayer::CallFunc_GetAllActorsOfClass_OutActors_1' has a wrong offset!");
static_assert(offsetof(GM_SinglePlayer_C_ExecuteUbergraph_GM_SinglePlayer, CallFunc_Array_Length_ReturnValue_1) == 0x000148, "Member 'GM_SinglePlayer_C_ExecuteUbergraph_GM_SinglePlayer::CallFunc_Array_Length_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(GM_SinglePlayer_C_ExecuteUbergraph_GM_SinglePlayer, Temp_name_Variable) == 0x00014C, "Member 'GM_SinglePlayer_C_ExecuteUbergraph_GM_SinglePlayer::Temp_name_Variable' has a wrong offset!");
static_assert(offsetof(GM_SinglePlayer_C_ExecuteUbergraph_GM_SinglePlayer, CallFunc_Less_IntInt_ReturnValue_1) == 0x000154, "Member 'GM_SinglePlayer_C_ExecuteUbergraph_GM_SinglePlayer::CallFunc_Less_IntInt_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(GM_SinglePlayer_C_ExecuteUbergraph_GM_SinglePlayer, K2Node_Select_Default) == 0x000158, "Member 'GM_SinglePlayer_C_ExecuteUbergraph_GM_SinglePlayer::K2Node_Select_Default' has a wrong offset!");
static_assert(offsetof(GM_SinglePlayer_C_ExecuteUbergraph_GM_SinglePlayer, CallFunc_Vector_Zero_ReturnValue) == 0x000160, "Member 'GM_SinglePlayer_C_ExecuteUbergraph_GM_SinglePlayer::CallFunc_Vector_Zero_ReturnValue' has a wrong offset!");
static_assert(offsetof(GM_SinglePlayer_C_ExecuteUbergraph_GM_SinglePlayer, CallFunc_GetPlayerController_ReturnValue) == 0x000170, "Member 'GM_SinglePlayer_C_ExecuteUbergraph_GM_SinglePlayer::CallFunc_GetPlayerController_ReturnValue' has a wrong offset!");
static_assert(offsetof(GM_SinglePlayer_C_ExecuteUbergraph_GM_SinglePlayer, CallFunc_SetCurrentLevel_ReturnValue) == 0x000178, "Member 'GM_SinglePlayer_C_ExecuteUbergraph_GM_SinglePlayer::CallFunc_SetCurrentLevel_ReturnValue' has a wrong offset!");
static_assert(offsetof(GM_SinglePlayer_C_ExecuteUbergraph_GM_SinglePlayer, K2Node_DynamicCast_AsCON_Hacker) == 0x000180, "Member 'GM_SinglePlayer_C_ExecuteUbergraph_GM_SinglePlayer::K2Node_DynamicCast_AsCON_Hacker' has a wrong offset!");
static_assert(offsetof(GM_SinglePlayer_C_ExecuteUbergraph_GM_SinglePlayer, K2Node_DynamicCast_bSuccess_1) == 0x000188, "Member 'GM_SinglePlayer_C_ExecuteUbergraph_GM_SinglePlayer::K2Node_DynamicCast_bSuccess_1' has a wrong offset!");
static_assert(offsetof(GM_SinglePlayer_C_ExecuteUbergraph_GM_SinglePlayer, CallFunc_GetPlayerController_ReturnValue_1) == 0x000190, "Member 'GM_SinglePlayer_C_ExecuteUbergraph_GM_SinglePlayer::CallFunc_GetPlayerController_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(GM_SinglePlayer_C_ExecuteUbergraph_GM_SinglePlayer, K2Node_DynamicCast_AsCON_Hacker_1) == 0x000198, "Member 'GM_SinglePlayer_C_ExecuteUbergraph_GM_SinglePlayer::K2Node_DynamicCast_AsCON_Hacker_1' has a wrong offset!");
static_assert(offsetof(GM_SinglePlayer_C_ExecuteUbergraph_GM_SinglePlayer, K2Node_DynamicCast_bSuccess_2) == 0x0001A0, "Member 'GM_SinglePlayer_C_ExecuteUbergraph_GM_SinglePlayer::K2Node_DynamicCast_bSuccess_2' has a wrong offset!");
static_assert(offsetof(GM_SinglePlayer_C_ExecuteUbergraph_GM_SinglePlayer, Temp_int_Array_Index_Variable_1) == 0x0001A4, "Member 'GM_SinglePlayer_C_ExecuteUbergraph_GM_SinglePlayer::Temp_int_Array_Index_Variable_1' has a wrong offset!");
static_assert(offsetof(GM_SinglePlayer_C_ExecuteUbergraph_GM_SinglePlayer, CallFunc_Array_Get_Item) == 0x0001A8, "Member 'GM_SinglePlayer_C_ExecuteUbergraph_GM_SinglePlayer::CallFunc_Array_Get_Item' has a wrong offset!");
static_assert(offsetof(GM_SinglePlayer_C_ExecuteUbergraph_GM_SinglePlayer, CallFunc_ApplyMod_ReturnValue) == 0x0001B0, "Member 'GM_SinglePlayer_C_ExecuteUbergraph_GM_SinglePlayer::CallFunc_ApplyMod_ReturnValue' has a wrong offset!");
static_assert(offsetof(GM_SinglePlayer_C_ExecuteUbergraph_GM_SinglePlayer, CallFunc_IsValid_ReturnValue) == 0x0001B8, "Member 'GM_SinglePlayer_C_ExecuteUbergraph_GM_SinglePlayer::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(GM_SinglePlayer_C_ExecuteUbergraph_GM_SinglePlayer, CallFunc_GetPlayerController_ReturnValue_2) == 0x0001C0, "Member 'GM_SinglePlayer_C_ExecuteUbergraph_GM_SinglePlayer::CallFunc_GetPlayerController_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(GM_SinglePlayer_C_ExecuteUbergraph_GM_SinglePlayer, K2Node_DynamicCast_AsCON_Hacker_2) == 0x0001C8, "Member 'GM_SinglePlayer_C_ExecuteUbergraph_GM_SinglePlayer::K2Node_DynamicCast_AsCON_Hacker_2' has a wrong offset!");
static_assert(offsetof(GM_SinglePlayer_C_ExecuteUbergraph_GM_SinglePlayer, K2Node_DynamicCast_bSuccess_3) == 0x0001D0, "Member 'GM_SinglePlayer_C_ExecuteUbergraph_GM_SinglePlayer::K2Node_DynamicCast_bSuccess_3' has a wrong offset!");
static_assert(offsetof(GM_SinglePlayer_C_ExecuteUbergraph_GM_SinglePlayer, CallFunc_GetPlayerController_ReturnValue_3) == 0x0001D8, "Member 'GM_SinglePlayer_C_ExecuteUbergraph_GM_SinglePlayer::CallFunc_GetPlayerController_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(GM_SinglePlayer_C_ExecuteUbergraph_GM_SinglePlayer, CallFunc_GetPlayerController_ReturnValue_4) == 0x0001E0, "Member 'GM_SinglePlayer_C_ExecuteUbergraph_GM_SinglePlayer::CallFunc_GetPlayerController_ReturnValue_4' has a wrong offset!");
static_assert(offsetof(GM_SinglePlayer_C_ExecuteUbergraph_GM_SinglePlayer, K2Node_DynamicCast_AsCON_Hacker_3) == 0x0001E8, "Member 'GM_SinglePlayer_C_ExecuteUbergraph_GM_SinglePlayer::K2Node_DynamicCast_AsCON_Hacker_3' has a wrong offset!");
static_assert(offsetof(GM_SinglePlayer_C_ExecuteUbergraph_GM_SinglePlayer, K2Node_DynamicCast_bSuccess_4) == 0x0001F0, "Member 'GM_SinglePlayer_C_ExecuteUbergraph_GM_SinglePlayer::K2Node_DynamicCast_bSuccess_4' has a wrong offset!");
static_assert(offsetof(GM_SinglePlayer_C_ExecuteUbergraph_GM_SinglePlayer, K2Node_DynamicCast_AsCON_Hacker_4) == 0x0001F8, "Member 'GM_SinglePlayer_C_ExecuteUbergraph_GM_SinglePlayer::K2Node_DynamicCast_AsCON_Hacker_4' has a wrong offset!");
static_assert(offsetof(GM_SinglePlayer_C_ExecuteUbergraph_GM_SinglePlayer, K2Node_DynamicCast_bSuccess_5) == 0x000200, "Member 'GM_SinglePlayer_C_ExecuteUbergraph_GM_SinglePlayer::K2Node_DynamicCast_bSuccess_5' has a wrong offset!");
static_assert(offsetof(GM_SinglePlayer_C_ExecuteUbergraph_GM_SinglePlayer, CallFunc_GetPlayerController_ReturnValue_5) == 0x000208, "Member 'GM_SinglePlayer_C_ExecuteUbergraph_GM_SinglePlayer::CallFunc_GetPlayerController_ReturnValue_5' has a wrong offset!");
static_assert(offsetof(GM_SinglePlayer_C_ExecuteUbergraph_GM_SinglePlayer, K2Node_DynamicCast_AsCON_Hacker_5) == 0x000210, "Member 'GM_SinglePlayer_C_ExecuteUbergraph_GM_SinglePlayer::K2Node_DynamicCast_AsCON_Hacker_5' has a wrong offset!");
static_assert(offsetof(GM_SinglePlayer_C_ExecuteUbergraph_GM_SinglePlayer, K2Node_DynamicCast_bSuccess_6) == 0x000218, "Member 'GM_SinglePlayer_C_ExecuteUbergraph_GM_SinglePlayer::K2Node_DynamicCast_bSuccess_6' has a wrong offset!");
static_assert(offsetof(GM_SinglePlayer_C_ExecuteUbergraph_GM_SinglePlayer, CallFunc_GetAllActorsOfClass_OutActors_2) == 0x000220, "Member 'GM_SinglePlayer_C_ExecuteUbergraph_GM_SinglePlayer::CallFunc_GetAllActorsOfClass_OutActors_2' has a wrong offset!");
static_assert(offsetof(GM_SinglePlayer_C_ExecuteUbergraph_GM_SinglePlayer, CallFunc_Array_Get_Item_1) == 0x000230, "Member 'GM_SinglePlayer_C_ExecuteUbergraph_GM_SinglePlayer::CallFunc_Array_Get_Item_1' has a wrong offset!");
static_assert(offsetof(GM_SinglePlayer_C_ExecuteUbergraph_GM_SinglePlayer, CallFunc_Array_Length_ReturnValue_2) == 0x000238, "Member 'GM_SinglePlayer_C_ExecuteUbergraph_GM_SinglePlayer::CallFunc_Array_Length_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(GM_SinglePlayer_C_ExecuteUbergraph_GM_SinglePlayer, CallFunc_Less_IntInt_ReturnValue_2) == 0x00023C, "Member 'GM_SinglePlayer_C_ExecuteUbergraph_GM_SinglePlayer::CallFunc_Less_IntInt_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(GM_SinglePlayer_C_ExecuteUbergraph_GM_SinglePlayer, CallFunc_IsValid_ReturnValue_1) == 0x00023D, "Member 'GM_SinglePlayer_C_ExecuteUbergraph_GM_SinglePlayer::CallFunc_IsValid_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(GM_SinglePlayer_C_ExecuteUbergraph_GM_SinglePlayer, Temp_int_Array_Index_Variable_2) == 0x000240, "Member 'GM_SinglePlayer_C_ExecuteUbergraph_GM_SinglePlayer::Temp_int_Array_Index_Variable_2' has a wrong offset!");
static_assert(offsetof(GM_SinglePlayer_C_ExecuteUbergraph_GM_SinglePlayer, CallFunc_Array_Get_Item_2) == 0x000248, "Member 'GM_SinglePlayer_C_ExecuteUbergraph_GM_SinglePlayer::CallFunc_Array_Get_Item_2' has a wrong offset!");
static_assert(offsetof(GM_SinglePlayer_C_ExecuteUbergraph_GM_SinglePlayer, CallFunc_ApplyMod_ReturnValue_1) == 0x000250, "Member 'GM_SinglePlayer_C_ExecuteUbergraph_GM_SinglePlayer::CallFunc_ApplyMod_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(GM_SinglePlayer_C_ExecuteUbergraph_GM_SinglePlayer, CallFunc_ApplyMod_ReturnValue_2) == 0x000258, "Member 'GM_SinglePlayer_C_ExecuteUbergraph_GM_SinglePlayer::CallFunc_ApplyMod_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(GM_SinglePlayer_C_ExecuteUbergraph_GM_SinglePlayer, K2Node_CustomEvent_LevelName) == 0x000260, "Member 'GM_SinglePlayer_C_ExecuteUbergraph_GM_SinglePlayer::K2Node_CustomEvent_LevelName' has a wrong offset!");
static_assert(offsetof(GM_SinglePlayer_C_ExecuteUbergraph_GM_SinglePlayer, K2Node_CreateDelegate_OutputDelegate) == 0x000270, "Member 'GM_SinglePlayer_C_ExecuteUbergraph_GM_SinglePlayer::K2Node_CreateDelegate_OutputDelegate' has a wrong offset!");
static_assert(offsetof(GM_SinglePlayer_C_ExecuteUbergraph_GM_SinglePlayer, CallFunc_Conv_StringToName_ReturnValue) == 0x000280, "Member 'GM_SinglePlayer_C_ExecuteUbergraph_GM_SinglePlayer::CallFunc_Conv_StringToName_ReturnValue' has a wrong offset!");
static_assert(offsetof(GM_SinglePlayer_C_ExecuteUbergraph_GM_SinglePlayer, CallFunc_GetGameInstance_ReturnValue_1) == 0x000288, "Member 'GM_SinglePlayer_C_ExecuteUbergraph_GM_SinglePlayer::CallFunc_GetGameInstance_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(GM_SinglePlayer_C_ExecuteUbergraph_GM_SinglePlayer, K2Node_CustomEvent_Enable) == 0x000290, "Member 'GM_SinglePlayer_C_ExecuteUbergraph_GM_SinglePlayer::K2Node_CustomEvent_Enable' has a wrong offset!");
static_assert(offsetof(GM_SinglePlayer_C_ExecuteUbergraph_GM_SinglePlayer, K2Node_DynamicCast_AsGI_Single_Player_1) == 0x000298, "Member 'GM_SinglePlayer_C_ExecuteUbergraph_GM_SinglePlayer::K2Node_DynamicCast_AsGI_Single_Player_1' has a wrong offset!");
static_assert(offsetof(GM_SinglePlayer_C_ExecuteUbergraph_GM_SinglePlayer, K2Node_DynamicCast_bSuccess_7) == 0x0002A0, "Member 'GM_SinglePlayer_C_ExecuteUbergraph_GM_SinglePlayer::K2Node_DynamicCast_bSuccess_7' has a wrong offset!");
static_assert(offsetof(GM_SinglePlayer_C_ExecuteUbergraph_GM_SinglePlayer, CallFunc_GetPlayerController_ReturnValue_6) == 0x0002A8, "Member 'GM_SinglePlayer_C_ExecuteUbergraph_GM_SinglePlayer::CallFunc_GetPlayerController_ReturnValue_6' has a wrong offset!");
static_assert(offsetof(GM_SinglePlayer_C_ExecuteUbergraph_GM_SinglePlayer, CallFunc_SetMusicLevelOverride_Result) == 0x0002B0, "Member 'GM_SinglePlayer_C_ExecuteUbergraph_GM_SinglePlayer::CallFunc_SetMusicLevelOverride_Result' has a wrong offset!");
static_assert(offsetof(GM_SinglePlayer_C_ExecuteUbergraph_GM_SinglePlayer, K2Node_DynamicCast_AsCON_Hacker_6) == 0x0002B8, "Member 'GM_SinglePlayer_C_ExecuteUbergraph_GM_SinglePlayer::K2Node_DynamicCast_AsCON_Hacker_6' has a wrong offset!");
static_assert(offsetof(GM_SinglePlayer_C_ExecuteUbergraph_GM_SinglePlayer, K2Node_DynamicCast_bSuccess_8) == 0x0002C0, "Member 'GM_SinglePlayer_C_ExecuteUbergraph_GM_SinglePlayer::K2Node_DynamicCast_bSuccess_8' has a wrong offset!");
static_assert(offsetof(GM_SinglePlayer_C_ExecuteUbergraph_GM_SinglePlayer, K2Node_Event_DeltaSeconds) == 0x0002C4, "Member 'GM_SinglePlayer_C_ExecuteUbergraph_GM_SinglePlayer::K2Node_Event_DeltaSeconds' has a wrong offset!");
static_assert(offsetof(GM_SinglePlayer_C_ExecuteUbergraph_GM_SinglePlayer, CallFunc_GetGameInstance_ReturnValue_2) == 0x0002C8, "Member 'GM_SinglePlayer_C_ExecuteUbergraph_GM_SinglePlayer::CallFunc_GetGameInstance_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(GM_SinglePlayer_C_ExecuteUbergraph_GM_SinglePlayer, K2Node_DynamicCast_AsGI_Single_Player_2) == 0x0002D0, "Member 'GM_SinglePlayer_C_ExecuteUbergraph_GM_SinglePlayer::K2Node_DynamicCast_AsGI_Single_Player_2' has a wrong offset!");
static_assert(offsetof(GM_SinglePlayer_C_ExecuteUbergraph_GM_SinglePlayer, K2Node_DynamicCast_bSuccess_9) == 0x0002D8, "Member 'GM_SinglePlayer_C_ExecuteUbergraph_GM_SinglePlayer::K2Node_DynamicCast_bSuccess_9' has a wrong offset!");
static_assert(offsetof(GM_SinglePlayer_C_ExecuteUbergraph_GM_SinglePlayer, K2Node_CreateDelegate_OutputDelegate_1) == 0x0002DC, "Member 'GM_SinglePlayer_C_ExecuteUbergraph_GM_SinglePlayer::K2Node_CreateDelegate_OutputDelegate_1' has a wrong offset!");
static_assert(offsetof(GM_SinglePlayer_C_ExecuteUbergraph_GM_SinglePlayer, CallFunc_SpawnObject_ReturnValue) == 0x0002F0, "Member 'GM_SinglePlayer_C_ExecuteUbergraph_GM_SinglePlayer::CallFunc_SpawnObject_ReturnValue' has a wrong offset!");
static_assert(offsetof(GM_SinglePlayer_C_ExecuteUbergraph_GM_SinglePlayer, K2Node_Event_NewPlayer_1) == 0x0002F8, "Member 'GM_SinglePlayer_C_ExecuteUbergraph_GM_SinglePlayer::K2Node_Event_NewPlayer_1' has a wrong offset!");
static_assert(offsetof(GM_SinglePlayer_C_ExecuteUbergraph_GM_SinglePlayer, CallFunc_GetGameInstance_ReturnValue_3) == 0x000300, "Member 'GM_SinglePlayer_C_ExecuteUbergraph_GM_SinglePlayer::CallFunc_GetGameInstance_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(GM_SinglePlayer_C_ExecuteUbergraph_GM_SinglePlayer, CallFunc_K2_GetPawn_ReturnValue) == 0x000308, "Member 'GM_SinglePlayer_C_ExecuteUbergraph_GM_SinglePlayer::CallFunc_K2_GetPawn_ReturnValue' has a wrong offset!");
static_assert(offsetof(GM_SinglePlayer_C_ExecuteUbergraph_GM_SinglePlayer, K2Node_DynamicCast_AsGI_Single_Player_3) == 0x000310, "Member 'GM_SinglePlayer_C_ExecuteUbergraph_GM_SinglePlayer::K2Node_DynamicCast_AsGI_Single_Player_3' has a wrong offset!");
static_assert(offsetof(GM_SinglePlayer_C_ExecuteUbergraph_GM_SinglePlayer, K2Node_DynamicCast_bSuccess_10) == 0x000318, "Member 'GM_SinglePlayer_C_ExecuteUbergraph_GM_SinglePlayer::K2Node_DynamicCast_bSuccess_10' has a wrong offset!");
static_assert(offsetof(GM_SinglePlayer_C_ExecuteUbergraph_GM_SinglePlayer, CallFunc_HasAssignedCurrentLevel_Result) == 0x000319, "Member 'GM_SinglePlayer_C_ExecuteUbergraph_GM_SinglePlayer::CallFunc_HasAssignedCurrentLevel_Result' has a wrong offset!");
static_assert(offsetof(GM_SinglePlayer_C_ExecuteUbergraph_GM_SinglePlayer, CallFunc_Not_PreBool_ReturnValue) == 0x00031A, "Member 'GM_SinglePlayer_C_ExecuteUbergraph_GM_SinglePlayer::CallFunc_Not_PreBool_ReturnValue' has a wrong offset!");
static_assert(offsetof(GM_SinglePlayer_C_ExecuteUbergraph_GM_SinglePlayer, CallFunc_Vector_Zero_ReturnValue_1) == 0x00031C, "Member 'GM_SinglePlayer_C_ExecuteUbergraph_GM_SinglePlayer::CallFunc_Vector_Zero_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(GM_SinglePlayer_C_ExecuteUbergraph_GM_SinglePlayer, K2Node_CreateDelegate_OutputDelegate_2) == 0x000328, "Member 'GM_SinglePlayer_C_ExecuteUbergraph_GM_SinglePlayer::K2Node_CreateDelegate_OutputDelegate_2' has a wrong offset!");
static_assert(offsetof(GM_SinglePlayer_C_ExecuteUbergraph_GM_SinglePlayer, CallFunc_GetCurrentLevelName_ReturnValue) == 0x000338, "Member 'GM_SinglePlayer_C_ExecuteUbergraph_GM_SinglePlayer::CallFunc_GetCurrentLevelName_ReturnValue' has a wrong offset!");
static_assert(offsetof(GM_SinglePlayer_C_ExecuteUbergraph_GM_SinglePlayer, CallFunc_Conv_StringToName_ReturnValue_1) == 0x000348, "Member 'GM_SinglePlayer_C_ExecuteUbergraph_GM_SinglePlayer::CallFunc_Conv_StringToName_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(GM_SinglePlayer_C_ExecuteUbergraph_GM_SinglePlayer, CallFunc_NotEqual_StrStr_ReturnValue) == 0x000350, "Member 'GM_SinglePlayer_C_ExecuteUbergraph_GM_SinglePlayer::CallFunc_NotEqual_StrStr_ReturnValue' has a wrong offset!");
static_assert(offsetof(GM_SinglePlayer_C_ExecuteUbergraph_GM_SinglePlayer, CallFunc_SetCurrentLevel_ReturnValue_1) == 0x000351, "Member 'GM_SinglePlayer_C_ExecuteUbergraph_GM_SinglePlayer::CallFunc_SetCurrentLevel_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(GM_SinglePlayer_C_ExecuteUbergraph_GM_SinglePlayer, CallFunc_Conv_StringToName_ReturnValue_2) == 0x000354, "Member 'GM_SinglePlayer_C_ExecuteUbergraph_GM_SinglePlayer::CallFunc_Conv_StringToName_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(GM_SinglePlayer_C_ExecuteUbergraph_GM_SinglePlayer, K2Node_Event_ExitingController) == 0x000360, "Member 'GM_SinglePlayer_C_ExecuteUbergraph_GM_SinglePlayer::K2Node_Event_ExitingController' has a wrong offset!");
static_assert(offsetof(GM_SinglePlayer_C_ExecuteUbergraph_GM_SinglePlayer, K2Node_MakeStruct_DataTableRowHandle) == 0x000368, "Member 'GM_SinglePlayer_C_ExecuteUbergraph_GM_SinglePlayer::K2Node_MakeStruct_DataTableRowHandle' has a wrong offset!");
static_assert(offsetof(GM_SinglePlayer_C_ExecuteUbergraph_GM_SinglePlayer, CallFunc_GetGameInstance_ReturnValue_4) == 0x000378, "Member 'GM_SinglePlayer_C_ExecuteUbergraph_GM_SinglePlayer::CallFunc_GetGameInstance_ReturnValue_4' has a wrong offset!");
static_assert(offsetof(GM_SinglePlayer_C_ExecuteUbergraph_GM_SinglePlayer, K2Node_DynamicCast_AsGI_Single_Player_4) == 0x000380, "Member 'GM_SinglePlayer_C_ExecuteUbergraph_GM_SinglePlayer::K2Node_DynamicCast_AsGI_Single_Player_4' has a wrong offset!");
static_assert(offsetof(GM_SinglePlayer_C_ExecuteUbergraph_GM_SinglePlayer, K2Node_DynamicCast_bSuccess_11) == 0x000388, "Member 'GM_SinglePlayer_C_ExecuteUbergraph_GM_SinglePlayer::K2Node_DynamicCast_bSuccess_11' has a wrong offset!");
static_assert(offsetof(GM_SinglePlayer_C_ExecuteUbergraph_GM_SinglePlayer, K2Node_Event_NewPlayer) == 0x000390, "Member 'GM_SinglePlayer_C_ExecuteUbergraph_GM_SinglePlayer::K2Node_Event_NewPlayer' has a wrong offset!");
static_assert(offsetof(GM_SinglePlayer_C_ExecuteUbergraph_GM_SinglePlayer, CallFunc_CacheAchievements_ReturnValue) == 0x000398, "Member 'GM_SinglePlayer_C_ExecuteUbergraph_GM_SinglePlayer::CallFunc_CacheAchievements_ReturnValue' has a wrong offset!");
static_assert(offsetof(GM_SinglePlayer_C_ExecuteUbergraph_GM_SinglePlayer, CallFunc_IsValid_ReturnValue_2) == 0x0003A0, "Member 'GM_SinglePlayer_C_ExecuteUbergraph_GM_SinglePlayer::CallFunc_IsValid_ReturnValue_2' has a wrong offset!");

// Function GM_SinglePlayer.GM_SinglePlayer_C.K2_PostLogin
// 0x0008 (0x0008 - 0x0000)
struct GM_SinglePlayer_C_K2_PostLogin final
{
public:
	class APlayerController*                      NewPlayer;                                         // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(GM_SinglePlayer_C_K2_PostLogin) == 0x000008, "Wrong alignment on GM_SinglePlayer_C_K2_PostLogin");
static_assert(sizeof(GM_SinglePlayer_C_K2_PostLogin) == 0x000008, "Wrong size on GM_SinglePlayer_C_K2_PostLogin");
static_assert(offsetof(GM_SinglePlayer_C_K2_PostLogin, NewPlayer) == 0x000000, "Member 'GM_SinglePlayer_C_K2_PostLogin::NewPlayer' has a wrong offset!");

// Function GM_SinglePlayer.GM_SinglePlayer_C.K2_OnLogout
// 0x0008 (0x0008 - 0x0000)
struct GM_SinglePlayer_C_K2_OnLogout final
{
public:
	class AController*                            ExitingController;                                 // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(GM_SinglePlayer_C_K2_OnLogout) == 0x000008, "Wrong alignment on GM_SinglePlayer_C_K2_OnLogout");
static_assert(sizeof(GM_SinglePlayer_C_K2_OnLogout) == 0x000008, "Wrong size on GM_SinglePlayer_C_K2_OnLogout");
static_assert(offsetof(GM_SinglePlayer_C_K2_OnLogout, ExitingController) == 0x000000, "Member 'GM_SinglePlayer_C_K2_OnLogout::ExitingController' has a wrong offset!");

// Function GM_SinglePlayer.GM_SinglePlayer_C.HandleStartingNewPlayer
// 0x0008 (0x0008 - 0x0000)
struct GM_SinglePlayer_C_HandleStartingNewPlayer final
{
public:
	class APlayerController*                      NewPlayer;                                         // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(GM_SinglePlayer_C_HandleStartingNewPlayer) == 0x000008, "Wrong alignment on GM_SinglePlayer_C_HandleStartingNewPlayer");
static_assert(sizeof(GM_SinglePlayer_C_HandleStartingNewPlayer) == 0x000008, "Wrong size on GM_SinglePlayer_C_HandleStartingNewPlayer");
static_assert(offsetof(GM_SinglePlayer_C_HandleStartingNewPlayer, NewPlayer) == 0x000000, "Member 'GM_SinglePlayer_C_HandleStartingNewPlayer::NewPlayer' has a wrong offset!");

// Function GM_SinglePlayer.GM_SinglePlayer_C.ReceiveTick
// 0x0004 (0x0004 - 0x0000)
struct GM_SinglePlayer_C_ReceiveTick final
{
public:
	float                                         DeltaSeconds;                                      // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(GM_SinglePlayer_C_ReceiveTick) == 0x000004, "Wrong alignment on GM_SinglePlayer_C_ReceiveTick");
static_assert(sizeof(GM_SinglePlayer_C_ReceiveTick) == 0x000004, "Wrong size on GM_SinglePlayer_C_ReceiveTick");
static_assert(offsetof(GM_SinglePlayer_C_ReceiveTick, DeltaSeconds) == 0x000000, "Member 'GM_SinglePlayer_C_ReceiveTick::DeltaSeconds' has a wrong offset!");

// Function GM_SinglePlayer.GM_SinglePlayer_C.CmdEnableDamageLog
// 0x0001 (0x0001 - 0x0000)
struct GM_SinglePlayer_C_CmdEnableDamageLog final
{
public:
	bool                                          Enable;                                            // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(GM_SinglePlayer_C_CmdEnableDamageLog) == 0x000001, "Wrong alignment on GM_SinglePlayer_C_CmdEnableDamageLog");
static_assert(sizeof(GM_SinglePlayer_C_CmdEnableDamageLog) == 0x000001, "Wrong size on GM_SinglePlayer_C_CmdEnableDamageLog");
static_assert(offsetof(GM_SinglePlayer_C_CmdEnableDamageLog, Enable) == 0x000000, "Member 'GM_SinglePlayer_C_CmdEnableDamageLog::Enable' has a wrong offset!");

// Function GM_SinglePlayer.GM_SinglePlayer_C.CmdPlayMusicForlevel
// 0x0010 (0x0010 - 0x0000)
struct GM_SinglePlayer_C_CmdPlayMusicForlevel final
{
public:
	class FString                                 LevelName;                                         // 0x0000(0x0010)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, HasGetValueTypeHash)
};
static_assert(alignof(GM_SinglePlayer_C_CmdPlayMusicForlevel) == 0x000008, "Wrong alignment on GM_SinglePlayer_C_CmdPlayMusicForlevel");
static_assert(sizeof(GM_SinglePlayer_C_CmdPlayMusicForlevel) == 0x000010, "Wrong size on GM_SinglePlayer_C_CmdPlayMusicForlevel");
static_assert(offsetof(GM_SinglePlayer_C_CmdPlayMusicForlevel, LevelName) == 0x000000, "Member 'GM_SinglePlayer_C_CmdPlayMusicForlevel::LevelName' has a wrong offset!");

// Function GM_SinglePlayer.GM_SinglePlayer_C.CmdRoomCulling
// 0x0001 (0x0001 - 0x0000)
struct GM_SinglePlayer_C_CmdRoomCulling final
{
public:
	bool                                          Enable;                                            // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(GM_SinglePlayer_C_CmdRoomCulling) == 0x000001, "Wrong alignment on GM_SinglePlayer_C_CmdRoomCulling");
static_assert(sizeof(GM_SinglePlayer_C_CmdRoomCulling) == 0x000001, "Wrong size on GM_SinglePlayer_C_CmdRoomCulling");
static_assert(offsetof(GM_SinglePlayer_C_CmdRoomCulling, Enable) == 0x000000, "Member 'GM_SinglePlayer_C_CmdRoomCulling::Enable' has a wrong offset!");

// Function GM_SinglePlayer.GM_SinglePlayer_C.CmdGodMode
// 0x0001 (0x0001 - 0x0000)
struct GM_SinglePlayer_C_CmdGodMode final
{
public:
	bool                                          State;                                             // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(GM_SinglePlayer_C_CmdGodMode) == 0x000001, "Wrong alignment on GM_SinglePlayer_C_CmdGodMode");
static_assert(sizeof(GM_SinglePlayer_C_CmdGodMode) == 0x000001, "Wrong size on GM_SinglePlayer_C_CmdGodMode");
static_assert(offsetof(GM_SinglePlayer_C_CmdGodMode, State) == 0x000000, "Member 'GM_SinglePlayer_C_CmdGodMode::State' has a wrong offset!");

// Function GM_SinglePlayer.GM_SinglePlayer_C.CmdDetectable
// 0x0001 (0x0001 - 0x0000)
struct GM_SinglePlayer_C_CmdDetectable final
{
public:
	bool                                          State;                                             // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(GM_SinglePlayer_C_CmdDetectable) == 0x000001, "Wrong alignment on GM_SinglePlayer_C_CmdDetectable");
static_assert(sizeof(GM_SinglePlayer_C_CmdDetectable) == 0x000001, "Wrong size on GM_SinglePlayer_C_CmdDetectable");
static_assert(offsetof(GM_SinglePlayer_C_CmdDetectable, State) == 0x000000, "Member 'GM_SinglePlayer_C_CmdDetectable::State' has a wrong offset!");

// Function GM_SinglePlayer.GM_SinglePlayer_C.CmdCompleteQuest
// 0x0010 (0x0010 - 0x0000)
struct GM_SinglePlayer_C_CmdCompleteQuest final
{
public:
	class FString                                 Name_0;                                            // 0x0000(0x0010)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, HasGetValueTypeHash)
};
static_assert(alignof(GM_SinglePlayer_C_CmdCompleteQuest) == 0x000008, "Wrong alignment on GM_SinglePlayer_C_CmdCompleteQuest");
static_assert(sizeof(GM_SinglePlayer_C_CmdCompleteQuest) == 0x000010, "Wrong size on GM_SinglePlayer_C_CmdCompleteQuest");
static_assert(offsetof(GM_SinglePlayer_C_CmdCompleteQuest, Name_0) == 0x000000, "Member 'GM_SinglePlayer_C_CmdCompleteQuest::Name_0' has a wrong offset!");

// Function GM_SinglePlayer.GM_SinglePlayer_C.CmdGrantItem
// 0x0010 (0x0010 - 0x0000)
struct GM_SinglePlayer_C_CmdGrantItem final
{
public:
	class FString                                 ItemWithCount;                                     // 0x0000(0x0010)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, HasGetValueTypeHash)
};
static_assert(alignof(GM_SinglePlayer_C_CmdGrantItem) == 0x000008, "Wrong alignment on GM_SinglePlayer_C_CmdGrantItem");
static_assert(sizeof(GM_SinglePlayer_C_CmdGrantItem) == 0x000010, "Wrong size on GM_SinglePlayer_C_CmdGrantItem");
static_assert(offsetof(GM_SinglePlayer_C_CmdGrantItem, ItemWithCount) == 0x000000, "Member 'GM_SinglePlayer_C_CmdGrantItem::ItemWithCount' has a wrong offset!");

// Function GM_SinglePlayer.GM_SinglePlayer_C.CmdGrantLoadout
// 0x0010 (0x0010 - 0x0000)
struct GM_SinglePlayer_C_CmdGrantLoadout final
{
public:
	class FString                                 LoadoutName;                                       // 0x0000(0x0010)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, HasGetValueTypeHash)
};
static_assert(alignof(GM_SinglePlayer_C_CmdGrantLoadout) == 0x000008, "Wrong alignment on GM_SinglePlayer_C_CmdGrantLoadout");
static_assert(sizeof(GM_SinglePlayer_C_CmdGrantLoadout) == 0x000010, "Wrong size on GM_SinglePlayer_C_CmdGrantLoadout");
static_assert(offsetof(GM_SinglePlayer_C_CmdGrantLoadout, LoadoutName) == 0x000000, "Member 'GM_SinglePlayer_C_CmdGrantLoadout::LoadoutName' has a wrong offset!");

// Function GM_SinglePlayer.GM_SinglePlayer_C.AcquireAndPossessPawn
// 0x0180 (0x0180 - 0x0000)
struct GM_SinglePlayer_C_AcquireAndPossessPawn final
{
public:
	class UClass*                                 PawnClass;                                         // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class APawn*                                  PossessedPawn;                                     // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          FoundGoodStart;                                    // 0x0010(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class APlayerStart*                           CurrentStart;                                      // 0x0018(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TArray<class APlayerStart*>                   PlayerStarts;                                      // 0x0020(0x0010)(Edit, BlueprintVisible, DisableEditOnTemplate)
	TArray<class AActor*>                         PlayerPawns;                                       // 0x0030(0x0010)(Edit, BlueprintVisible, DisableEditOnTemplate)
	struct FTransform                             PlayerTransform;                                   // 0x0040(0x0030)(Edit, BlueprintVisible, IsPlainOldData, NoDestructor)
	class APawn*                                  NewPlayerPawn;                                     // 0x0070(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Array_Index_Variable;                     // 0x0078(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_7C[0x4];                                       // 0x007C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class APawn*>                          CallFunc_GetAllActorsOfClass_OutActors;            // 0x0080(0x0010)(ReferenceParm)
	struct FTransform                             CallFunc_GetTransform_ReturnValue;                 // 0x0090(0x0030)(ConstParm, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Not_PreBool_ReturnValue;                  // 0x00C0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_C1[0xF];                                       // 0x00C1(0x000F)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTransform                             CallFunc_GetTransform_ReturnValue_1;               // 0x00D0(0x0030)(ConstParm, IsPlainOldData, NoDestructor)
	int32                                         Temp_int_Loop_Counter_Variable;                    // 0x0100(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_104[0x4];                                      // 0x0104(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class APlayerStart*                           CallFunc_Array_Get_Item;                           // 0x0108(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Length_ReturnValue;                 // 0x0110(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue;                  // 0x0114(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_115[0x3];                                      // 0x0115(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Add_IntInt_ReturnValue;                   // 0x0118(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_11C[0x4];                                      // 0x011C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class AActor*                                 CallFunc_Array_Get_Item_1;                         // 0x0120(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Length_ReturnValue_1;               // 0x0128(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_12C[0x4];                                      // 0x012C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class APawn*                                  K2Node_DynamicCast_AsPawn;                         // 0x0130(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0138(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Greater_IntInt_ReturnValue;               // 0x0139(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_13A[0x6];                                      // 0x013A(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class APlayerController*                      CallFunc_GetPlayerController_ReturnValue;          // 0x0140(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class APlayerStartPIE*                        K2Node_DynamicCast_AsPlayer_Start_PIE;             // 0x0148(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess_1;                     // 0x0150(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_151[0x7];                                      // 0x0151(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class APlayerStart*>                   CallFunc_GetAllActorsOfClass_OutActors_1;          // 0x0158(0x0010)(ReferenceParm)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0168(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_169[0x7];                                      // 0x0169(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class AActor*                                 CallFunc_BeginDeferredActorSpawnFromClass_ReturnValue; // 0x0170(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class APawn*                                  CallFunc_FinishSpawningActor_ReturnValue;          // 0x0178(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(GM_SinglePlayer_C_AcquireAndPossessPawn) == 0x000010, "Wrong alignment on GM_SinglePlayer_C_AcquireAndPossessPawn");
static_assert(sizeof(GM_SinglePlayer_C_AcquireAndPossessPawn) == 0x000180, "Wrong size on GM_SinglePlayer_C_AcquireAndPossessPawn");
static_assert(offsetof(GM_SinglePlayer_C_AcquireAndPossessPawn, PawnClass) == 0x000000, "Member 'GM_SinglePlayer_C_AcquireAndPossessPawn::PawnClass' has a wrong offset!");
static_assert(offsetof(GM_SinglePlayer_C_AcquireAndPossessPawn, PossessedPawn) == 0x000008, "Member 'GM_SinglePlayer_C_AcquireAndPossessPawn::PossessedPawn' has a wrong offset!");
static_assert(offsetof(GM_SinglePlayer_C_AcquireAndPossessPawn, FoundGoodStart) == 0x000010, "Member 'GM_SinglePlayer_C_AcquireAndPossessPawn::FoundGoodStart' has a wrong offset!");
static_assert(offsetof(GM_SinglePlayer_C_AcquireAndPossessPawn, CurrentStart) == 0x000018, "Member 'GM_SinglePlayer_C_AcquireAndPossessPawn::CurrentStart' has a wrong offset!");
static_assert(offsetof(GM_SinglePlayer_C_AcquireAndPossessPawn, PlayerStarts) == 0x000020, "Member 'GM_SinglePlayer_C_AcquireAndPossessPawn::PlayerStarts' has a wrong offset!");
static_assert(offsetof(GM_SinglePlayer_C_AcquireAndPossessPawn, PlayerPawns) == 0x000030, "Member 'GM_SinglePlayer_C_AcquireAndPossessPawn::PlayerPawns' has a wrong offset!");
static_assert(offsetof(GM_SinglePlayer_C_AcquireAndPossessPawn, PlayerTransform) == 0x000040, "Member 'GM_SinglePlayer_C_AcquireAndPossessPawn::PlayerTransform' has a wrong offset!");
static_assert(offsetof(GM_SinglePlayer_C_AcquireAndPossessPawn, NewPlayerPawn) == 0x000070, "Member 'GM_SinglePlayer_C_AcquireAndPossessPawn::NewPlayerPawn' has a wrong offset!");
static_assert(offsetof(GM_SinglePlayer_C_AcquireAndPossessPawn, Temp_int_Array_Index_Variable) == 0x000078, "Member 'GM_SinglePlayer_C_AcquireAndPossessPawn::Temp_int_Array_Index_Variable' has a wrong offset!");
static_assert(offsetof(GM_SinglePlayer_C_AcquireAndPossessPawn, CallFunc_GetAllActorsOfClass_OutActors) == 0x000080, "Member 'GM_SinglePlayer_C_AcquireAndPossessPawn::CallFunc_GetAllActorsOfClass_OutActors' has a wrong offset!");
static_assert(offsetof(GM_SinglePlayer_C_AcquireAndPossessPawn, CallFunc_GetTransform_ReturnValue) == 0x000090, "Member 'GM_SinglePlayer_C_AcquireAndPossessPawn::CallFunc_GetTransform_ReturnValue' has a wrong offset!");
static_assert(offsetof(GM_SinglePlayer_C_AcquireAndPossessPawn, CallFunc_Not_PreBool_ReturnValue) == 0x0000C0, "Member 'GM_SinglePlayer_C_AcquireAndPossessPawn::CallFunc_Not_PreBool_ReturnValue' has a wrong offset!");
static_assert(offsetof(GM_SinglePlayer_C_AcquireAndPossessPawn, CallFunc_GetTransform_ReturnValue_1) == 0x0000D0, "Member 'GM_SinglePlayer_C_AcquireAndPossessPawn::CallFunc_GetTransform_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(GM_SinglePlayer_C_AcquireAndPossessPawn, Temp_int_Loop_Counter_Variable) == 0x000100, "Member 'GM_SinglePlayer_C_AcquireAndPossessPawn::Temp_int_Loop_Counter_Variable' has a wrong offset!");
static_assert(offsetof(GM_SinglePlayer_C_AcquireAndPossessPawn, CallFunc_Array_Get_Item) == 0x000108, "Member 'GM_SinglePlayer_C_AcquireAndPossessPawn::CallFunc_Array_Get_Item' has a wrong offset!");
static_assert(offsetof(GM_SinglePlayer_C_AcquireAndPossessPawn, CallFunc_Array_Length_ReturnValue) == 0x000110, "Member 'GM_SinglePlayer_C_AcquireAndPossessPawn::CallFunc_Array_Length_ReturnValue' has a wrong offset!");
static_assert(offsetof(GM_SinglePlayer_C_AcquireAndPossessPawn, CallFunc_Less_IntInt_ReturnValue) == 0x000114, "Member 'GM_SinglePlayer_C_AcquireAndPossessPawn::CallFunc_Less_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(GM_SinglePlayer_C_AcquireAndPossessPawn, CallFunc_Add_IntInt_ReturnValue) == 0x000118, "Member 'GM_SinglePlayer_C_AcquireAndPossessPawn::CallFunc_Add_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(GM_SinglePlayer_C_AcquireAndPossessPawn, CallFunc_Array_Get_Item_1) == 0x000120, "Member 'GM_SinglePlayer_C_AcquireAndPossessPawn::CallFunc_Array_Get_Item_1' has a wrong offset!");
static_assert(offsetof(GM_SinglePlayer_C_AcquireAndPossessPawn, CallFunc_Array_Length_ReturnValue_1) == 0x000128, "Member 'GM_SinglePlayer_C_AcquireAndPossessPawn::CallFunc_Array_Length_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(GM_SinglePlayer_C_AcquireAndPossessPawn, K2Node_DynamicCast_AsPawn) == 0x000130, "Member 'GM_SinglePlayer_C_AcquireAndPossessPawn::K2Node_DynamicCast_AsPawn' has a wrong offset!");
static_assert(offsetof(GM_SinglePlayer_C_AcquireAndPossessPawn, K2Node_DynamicCast_bSuccess) == 0x000138, "Member 'GM_SinglePlayer_C_AcquireAndPossessPawn::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(GM_SinglePlayer_C_AcquireAndPossessPawn, CallFunc_Greater_IntInt_ReturnValue) == 0x000139, "Member 'GM_SinglePlayer_C_AcquireAndPossessPawn::CallFunc_Greater_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(GM_SinglePlayer_C_AcquireAndPossessPawn, CallFunc_GetPlayerController_ReturnValue) == 0x000140, "Member 'GM_SinglePlayer_C_AcquireAndPossessPawn::CallFunc_GetPlayerController_ReturnValue' has a wrong offset!");
static_assert(offsetof(GM_SinglePlayer_C_AcquireAndPossessPawn, K2Node_DynamicCast_AsPlayer_Start_PIE) == 0x000148, "Member 'GM_SinglePlayer_C_AcquireAndPossessPawn::K2Node_DynamicCast_AsPlayer_Start_PIE' has a wrong offset!");
static_assert(offsetof(GM_SinglePlayer_C_AcquireAndPossessPawn, K2Node_DynamicCast_bSuccess_1) == 0x000150, "Member 'GM_SinglePlayer_C_AcquireAndPossessPawn::K2Node_DynamicCast_bSuccess_1' has a wrong offset!");
static_assert(offsetof(GM_SinglePlayer_C_AcquireAndPossessPawn, CallFunc_GetAllActorsOfClass_OutActors_1) == 0x000158, "Member 'GM_SinglePlayer_C_AcquireAndPossessPawn::CallFunc_GetAllActorsOfClass_OutActors_1' has a wrong offset!");
static_assert(offsetof(GM_SinglePlayer_C_AcquireAndPossessPawn, CallFunc_IsValid_ReturnValue) == 0x000168, "Member 'GM_SinglePlayer_C_AcquireAndPossessPawn::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(GM_SinglePlayer_C_AcquireAndPossessPawn, CallFunc_BeginDeferredActorSpawnFromClass_ReturnValue) == 0x000170, "Member 'GM_SinglePlayer_C_AcquireAndPossessPawn::CallFunc_BeginDeferredActorSpawnFromClass_ReturnValue' has a wrong offset!");
static_assert(offsetof(GM_SinglePlayer_C_AcquireAndPossessPawn, CallFunc_FinishSpawningActor_ReturnValue) == 0x000178, "Member 'GM_SinglePlayer_C_AcquireAndPossessPawn::CallFunc_FinishSpawningActor_ReturnValue' has a wrong offset!");

// Function GM_SinglePlayer.GM_SinglePlayer_C.TickCyberspace
// 0x0038 (0x0038 - 0x0000)
struct GM_SinglePlayer_C_TickCyberspace final
{
public:
	float                                         DeltaSeconds;                                      // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class APAWN_SystemShockCharacter_C*           PlayerPawn;                                        // 0x0008(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class APAWN_Hacker_Simple_C*                  K2Node_DynamicCast_AsPAWN_Hacker_Simple;           // 0x0010(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0018(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Not_PreBool_ReturnValue;                  // 0x0019(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_1A[0x6];                                       // 0x001A(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class APawn*                                  CallFunc_GetPlayerPawn_ReturnValue;                // 0x0020(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class APAWN_SystemShockCharacter_C*           K2Node_DynamicCast_AsPAWN_System_Shock_Character;  // 0x0028(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess_1;                     // 0x0030(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(GM_SinglePlayer_C_TickCyberspace) == 0x000008, "Wrong alignment on GM_SinglePlayer_C_TickCyberspace");
static_assert(sizeof(GM_SinglePlayer_C_TickCyberspace) == 0x000038, "Wrong size on GM_SinglePlayer_C_TickCyberspace");
static_assert(offsetof(GM_SinglePlayer_C_TickCyberspace, DeltaSeconds) == 0x000000, "Member 'GM_SinglePlayer_C_TickCyberspace::DeltaSeconds' has a wrong offset!");
static_assert(offsetof(GM_SinglePlayer_C_TickCyberspace, PlayerPawn) == 0x000008, "Member 'GM_SinglePlayer_C_TickCyberspace::PlayerPawn' has a wrong offset!");
static_assert(offsetof(GM_SinglePlayer_C_TickCyberspace, K2Node_DynamicCast_AsPAWN_Hacker_Simple) == 0x000010, "Member 'GM_SinglePlayer_C_TickCyberspace::K2Node_DynamicCast_AsPAWN_Hacker_Simple' has a wrong offset!");
static_assert(offsetof(GM_SinglePlayer_C_TickCyberspace, K2Node_DynamicCast_bSuccess) == 0x000018, "Member 'GM_SinglePlayer_C_TickCyberspace::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(GM_SinglePlayer_C_TickCyberspace, CallFunc_Not_PreBool_ReturnValue) == 0x000019, "Member 'GM_SinglePlayer_C_TickCyberspace::CallFunc_Not_PreBool_ReturnValue' has a wrong offset!");
static_assert(offsetof(GM_SinglePlayer_C_TickCyberspace, CallFunc_GetPlayerPawn_ReturnValue) == 0x000020, "Member 'GM_SinglePlayer_C_TickCyberspace::CallFunc_GetPlayerPawn_ReturnValue' has a wrong offset!");
static_assert(offsetof(GM_SinglePlayer_C_TickCyberspace, K2Node_DynamicCast_AsPAWN_System_Shock_Character) == 0x000028, "Member 'GM_SinglePlayer_C_TickCyberspace::K2Node_DynamicCast_AsPAWN_System_Shock_Character' has a wrong offset!");
static_assert(offsetof(GM_SinglePlayer_C_TickCyberspace, K2Node_DynamicCast_bSuccess_1) == 0x000030, "Member 'GM_SinglePlayer_C_TickCyberspace::K2Node_DynamicCast_bSuccess_1' has a wrong offset!");

// Function GM_SinglePlayer.GM_SinglePlayer_C.TickGameOfLife
// 0x0040 (0x0040 - 0x0000)
struct GM_SinglePlayer_C_TickGameOfLife final
{
public:
	class APAWN_SystemShockCharacter_C*           PlayerPawn;                                        // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         DeltaSeconds;                                      // 0x0008(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_K2_GetActorLocation_ReturnValue;          // 0x000C(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Vector_Zero_ReturnValue;                  // 0x0018(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FIntVector                             CallFunc_GetVoxelLocationFromWorldLocation_ReturnValue; // 0x0024(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Subtract_FloatFloat_ReturnValue;          // 0x0030(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Add_FloatFloat_ReturnValue;               // 0x0034(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_GreaterEqual_FloatFloat_ReturnValue;      // 0x0038(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(GM_SinglePlayer_C_TickGameOfLife) == 0x000008, "Wrong alignment on GM_SinglePlayer_C_TickGameOfLife");
static_assert(sizeof(GM_SinglePlayer_C_TickGameOfLife) == 0x000040, "Wrong size on GM_SinglePlayer_C_TickGameOfLife");
static_assert(offsetof(GM_SinglePlayer_C_TickGameOfLife, PlayerPawn) == 0x000000, "Member 'GM_SinglePlayer_C_TickGameOfLife::PlayerPawn' has a wrong offset!");
static_assert(offsetof(GM_SinglePlayer_C_TickGameOfLife, DeltaSeconds) == 0x000008, "Member 'GM_SinglePlayer_C_TickGameOfLife::DeltaSeconds' has a wrong offset!");
static_assert(offsetof(GM_SinglePlayer_C_TickGameOfLife, CallFunc_K2_GetActorLocation_ReturnValue) == 0x00000C, "Member 'GM_SinglePlayer_C_TickGameOfLife::CallFunc_K2_GetActorLocation_ReturnValue' has a wrong offset!");
static_assert(offsetof(GM_SinglePlayer_C_TickGameOfLife, CallFunc_Vector_Zero_ReturnValue) == 0x000018, "Member 'GM_SinglePlayer_C_TickGameOfLife::CallFunc_Vector_Zero_ReturnValue' has a wrong offset!");
static_assert(offsetof(GM_SinglePlayer_C_TickGameOfLife, CallFunc_GetVoxelLocationFromWorldLocation_ReturnValue) == 0x000024, "Member 'GM_SinglePlayer_C_TickGameOfLife::CallFunc_GetVoxelLocationFromWorldLocation_ReturnValue' has a wrong offset!");
static_assert(offsetof(GM_SinglePlayer_C_TickGameOfLife, CallFunc_Subtract_FloatFloat_ReturnValue) == 0x000030, "Member 'GM_SinglePlayer_C_TickGameOfLife::CallFunc_Subtract_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(GM_SinglePlayer_C_TickGameOfLife, CallFunc_Add_FloatFloat_ReturnValue) == 0x000034, "Member 'GM_SinglePlayer_C_TickGameOfLife::CallFunc_Add_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(GM_SinglePlayer_C_TickGameOfLife, CallFunc_GreaterEqual_FloatFloat_ReturnValue) == 0x000038, "Member 'GM_SinglePlayer_C_TickGameOfLife::CallFunc_GreaterEqual_FloatFloat_ReturnValue' has a wrong offset!");

// Function GM_SinglePlayer.GM_SinglePlayer_C.TickCyberBehaviorCulling
// 0x0038 (0x0038 - 0x0000)
struct GM_SinglePlayer_C_TickCyberBehaviorCulling final
{
public:
	class APAWN_SystemShockCharacter_C*           PlayerPawn;                                        // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         DeltaSeconds;                                      // 0x0008(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Variable;                                 // 0x000C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 CallFunc_Array_Get_Item;                           // 0x0010(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Length_ReturnValue;                 // 0x0018(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_GreaterEqual_IntInt_ReturnValue;          // 0x001C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_1D[0x3];                                       // 0x001D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Array_Length_ReturnValue_1;               // 0x0020(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Greater_IntInt_ReturnValue;               // 0x0024(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_25[0x3];                                       // 0x0025(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Add_IntInt_ReturnValue;                   // 0x0028(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Subtract_FloatFloat_ReturnValue;          // 0x002C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Add_FloatFloat_ReturnValue;               // 0x0030(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_GreaterEqual_FloatFloat_ReturnValue;      // 0x0034(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(GM_SinglePlayer_C_TickCyberBehaviorCulling) == 0x000008, "Wrong alignment on GM_SinglePlayer_C_TickCyberBehaviorCulling");
static_assert(sizeof(GM_SinglePlayer_C_TickCyberBehaviorCulling) == 0x000038, "Wrong size on GM_SinglePlayer_C_TickCyberBehaviorCulling");
static_assert(offsetof(GM_SinglePlayer_C_TickCyberBehaviorCulling, PlayerPawn) == 0x000000, "Member 'GM_SinglePlayer_C_TickCyberBehaviorCulling::PlayerPawn' has a wrong offset!");
static_assert(offsetof(GM_SinglePlayer_C_TickCyberBehaviorCulling, DeltaSeconds) == 0x000008, "Member 'GM_SinglePlayer_C_TickCyberBehaviorCulling::DeltaSeconds' has a wrong offset!");
static_assert(offsetof(GM_SinglePlayer_C_TickCyberBehaviorCulling, Temp_int_Variable) == 0x00000C, "Member 'GM_SinglePlayer_C_TickCyberBehaviorCulling::Temp_int_Variable' has a wrong offset!");
static_assert(offsetof(GM_SinglePlayer_C_TickCyberBehaviorCulling, CallFunc_Array_Get_Item) == 0x000010, "Member 'GM_SinglePlayer_C_TickCyberBehaviorCulling::CallFunc_Array_Get_Item' has a wrong offset!");
static_assert(offsetof(GM_SinglePlayer_C_TickCyberBehaviorCulling, CallFunc_Array_Length_ReturnValue) == 0x000018, "Member 'GM_SinglePlayer_C_TickCyberBehaviorCulling::CallFunc_Array_Length_ReturnValue' has a wrong offset!");
static_assert(offsetof(GM_SinglePlayer_C_TickCyberBehaviorCulling, CallFunc_GreaterEqual_IntInt_ReturnValue) == 0x00001C, "Member 'GM_SinglePlayer_C_TickCyberBehaviorCulling::CallFunc_GreaterEqual_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(GM_SinglePlayer_C_TickCyberBehaviorCulling, CallFunc_Array_Length_ReturnValue_1) == 0x000020, "Member 'GM_SinglePlayer_C_TickCyberBehaviorCulling::CallFunc_Array_Length_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(GM_SinglePlayer_C_TickCyberBehaviorCulling, CallFunc_Greater_IntInt_ReturnValue) == 0x000024, "Member 'GM_SinglePlayer_C_TickCyberBehaviorCulling::CallFunc_Greater_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(GM_SinglePlayer_C_TickCyberBehaviorCulling, CallFunc_Add_IntInt_ReturnValue) == 0x000028, "Member 'GM_SinglePlayer_C_TickCyberBehaviorCulling::CallFunc_Add_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(GM_SinglePlayer_C_TickCyberBehaviorCulling, CallFunc_Subtract_FloatFloat_ReturnValue) == 0x00002C, "Member 'GM_SinglePlayer_C_TickCyberBehaviorCulling::CallFunc_Subtract_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(GM_SinglePlayer_C_TickCyberBehaviorCulling, CallFunc_Add_FloatFloat_ReturnValue) == 0x000030, "Member 'GM_SinglePlayer_C_TickCyberBehaviorCulling::CallFunc_Add_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(GM_SinglePlayer_C_TickCyberBehaviorCulling, CallFunc_GreaterEqual_FloatFloat_ReturnValue) == 0x000034, "Member 'GM_SinglePlayer_C_TickCyberBehaviorCulling::CallFunc_GreaterEqual_FloatFloat_ReturnValue' has a wrong offset!");

// Function GM_SinglePlayer.GM_SinglePlayer_C.UpdateCyberBehaviorCullState
// 0x0078 (0x0078 - 0x0000)
struct GM_SinglePlayer_C_UpdateCyberBehaviorCullState final
{
public:
	class APAWN_SystemShockCharacter_C*           PlayerPawn;                                        // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 Actor;                                             // 0x0008(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          NewLowFiState;                                     // 0x0010(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_11[0x3];                                       // 0x0011(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         SquareDistanceToAvatar;                            // 0x0014(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0018(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_19[0x3];                                       // 0x0019(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                CallFunc_K2_GetActorLocation_ReturnValue;          // 0x001C(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Square_ReturnValue;                       // 0x0028(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_2C[0x4];                                       // 0x002C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class ACYBR_StaticWall_C*                     K2Node_DynamicCast_AsCYBR_Static_Wall;             // 0x0030(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0038(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Greater_FloatFloat_ReturnValue;           // 0x0039(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_3A[0x2];                                       // 0x003A(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                CallFunc_K2_GetActorLocation_ReturnValue_1;        // 0x003C(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class APAWN_CyberEnemy_C*                     K2Node_DynamicCast_AsPAWN_Cyber_Enemy;             // 0x0048(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess_1;                     // 0x0050(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_51[0x3];                                       // 0x0051(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_Vector_DistanceSquared_ReturnValue;       // 0x0054(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Square_ReturnValue_1;                     // 0x0058(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_5C[0x4];                                       // 0x005C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class ACYBR_InteractBase_C*                   K2Node_DynamicCast_AsCYBR_Interact_Base;           // 0x0060(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess_2;                     // 0x0068(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_69[0x3];                                       // 0x0069(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_GetSquareDistanceToPawn_Result;           // 0x006C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Greater_FloatFloat_ReturnValue_1;         // 0x0070(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(GM_SinglePlayer_C_UpdateCyberBehaviorCullState) == 0x000008, "Wrong alignment on GM_SinglePlayer_C_UpdateCyberBehaviorCullState");
static_assert(sizeof(GM_SinglePlayer_C_UpdateCyberBehaviorCullState) == 0x000078, "Wrong size on GM_SinglePlayer_C_UpdateCyberBehaviorCullState");
static_assert(offsetof(GM_SinglePlayer_C_UpdateCyberBehaviorCullState, PlayerPawn) == 0x000000, "Member 'GM_SinglePlayer_C_UpdateCyberBehaviorCullState::PlayerPawn' has a wrong offset!");
static_assert(offsetof(GM_SinglePlayer_C_UpdateCyberBehaviorCullState, Actor) == 0x000008, "Member 'GM_SinglePlayer_C_UpdateCyberBehaviorCullState::Actor' has a wrong offset!");
static_assert(offsetof(GM_SinglePlayer_C_UpdateCyberBehaviorCullState, NewLowFiState) == 0x000010, "Member 'GM_SinglePlayer_C_UpdateCyberBehaviorCullState::NewLowFiState' has a wrong offset!");
static_assert(offsetof(GM_SinglePlayer_C_UpdateCyberBehaviorCullState, SquareDistanceToAvatar) == 0x000014, "Member 'GM_SinglePlayer_C_UpdateCyberBehaviorCullState::SquareDistanceToAvatar' has a wrong offset!");
static_assert(offsetof(GM_SinglePlayer_C_UpdateCyberBehaviorCullState, CallFunc_IsValid_ReturnValue) == 0x000018, "Member 'GM_SinglePlayer_C_UpdateCyberBehaviorCullState::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(GM_SinglePlayer_C_UpdateCyberBehaviorCullState, CallFunc_K2_GetActorLocation_ReturnValue) == 0x00001C, "Member 'GM_SinglePlayer_C_UpdateCyberBehaviorCullState::CallFunc_K2_GetActorLocation_ReturnValue' has a wrong offset!");
static_assert(offsetof(GM_SinglePlayer_C_UpdateCyberBehaviorCullState, CallFunc_Square_ReturnValue) == 0x000028, "Member 'GM_SinglePlayer_C_UpdateCyberBehaviorCullState::CallFunc_Square_ReturnValue' has a wrong offset!");
static_assert(offsetof(GM_SinglePlayer_C_UpdateCyberBehaviorCullState, K2Node_DynamicCast_AsCYBR_Static_Wall) == 0x000030, "Member 'GM_SinglePlayer_C_UpdateCyberBehaviorCullState::K2Node_DynamicCast_AsCYBR_Static_Wall' has a wrong offset!");
static_assert(offsetof(GM_SinglePlayer_C_UpdateCyberBehaviorCullState, K2Node_DynamicCast_bSuccess) == 0x000038, "Member 'GM_SinglePlayer_C_UpdateCyberBehaviorCullState::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(GM_SinglePlayer_C_UpdateCyberBehaviorCullState, CallFunc_Greater_FloatFloat_ReturnValue) == 0x000039, "Member 'GM_SinglePlayer_C_UpdateCyberBehaviorCullState::CallFunc_Greater_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(GM_SinglePlayer_C_UpdateCyberBehaviorCullState, CallFunc_K2_GetActorLocation_ReturnValue_1) == 0x00003C, "Member 'GM_SinglePlayer_C_UpdateCyberBehaviorCullState::CallFunc_K2_GetActorLocation_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(GM_SinglePlayer_C_UpdateCyberBehaviorCullState, K2Node_DynamicCast_AsPAWN_Cyber_Enemy) == 0x000048, "Member 'GM_SinglePlayer_C_UpdateCyberBehaviorCullState::K2Node_DynamicCast_AsPAWN_Cyber_Enemy' has a wrong offset!");
static_assert(offsetof(GM_SinglePlayer_C_UpdateCyberBehaviorCullState, K2Node_DynamicCast_bSuccess_1) == 0x000050, "Member 'GM_SinglePlayer_C_UpdateCyberBehaviorCullState::K2Node_DynamicCast_bSuccess_1' has a wrong offset!");
static_assert(offsetof(GM_SinglePlayer_C_UpdateCyberBehaviorCullState, CallFunc_Vector_DistanceSquared_ReturnValue) == 0x000054, "Member 'GM_SinglePlayer_C_UpdateCyberBehaviorCullState::CallFunc_Vector_DistanceSquared_ReturnValue' has a wrong offset!");
static_assert(offsetof(GM_SinglePlayer_C_UpdateCyberBehaviorCullState, CallFunc_Square_ReturnValue_1) == 0x000058, "Member 'GM_SinglePlayer_C_UpdateCyberBehaviorCullState::CallFunc_Square_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(GM_SinglePlayer_C_UpdateCyberBehaviorCullState, K2Node_DynamicCast_AsCYBR_Interact_Base) == 0x000060, "Member 'GM_SinglePlayer_C_UpdateCyberBehaviorCullState::K2Node_DynamicCast_AsCYBR_Interact_Base' has a wrong offset!");
static_assert(offsetof(GM_SinglePlayer_C_UpdateCyberBehaviorCullState, K2Node_DynamicCast_bSuccess_2) == 0x000068, "Member 'GM_SinglePlayer_C_UpdateCyberBehaviorCullState::K2Node_DynamicCast_bSuccess_2' has a wrong offset!");
static_assert(offsetof(GM_SinglePlayer_C_UpdateCyberBehaviorCullState, CallFunc_GetSquareDistanceToPawn_Result) == 0x00006C, "Member 'GM_SinglePlayer_C_UpdateCyberBehaviorCullState::CallFunc_GetSquareDistanceToPawn_Result' has a wrong offset!");
static_assert(offsetof(GM_SinglePlayer_C_UpdateCyberBehaviorCullState, CallFunc_Greater_FloatFloat_ReturnValue_1) == 0x000070, "Member 'GM_SinglePlayer_C_UpdateCyberBehaviorCullState::CallFunc_Greater_FloatFloat_ReturnValue_1' has a wrong offset!");

// Function GM_SinglePlayer.GM_SinglePlayer_C.ActivateGameOfLifeCell
// 0x0018 (0x0018 - 0x0000)
struct GM_SinglePlayer_C_ActivateGameOfLifeCell final
{
public:
	struct FVoxelWallLocation                     WallLocation;                                      // 0x0000(0x0010)(BlueprintVisible, BlueprintReadOnly, Parm, NoDestructor, HasGetValueTypeHash)
	float                                         MinCellLifetime;                                   // 0x0010(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Result;                                            // 0x0014(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_TryActivateCellAtLocation_ReturnValue;    // 0x0015(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(GM_SinglePlayer_C_ActivateGameOfLifeCell) == 0x000004, "Wrong alignment on GM_SinglePlayer_C_ActivateGameOfLifeCell");
static_assert(sizeof(GM_SinglePlayer_C_ActivateGameOfLifeCell) == 0x000018, "Wrong size on GM_SinglePlayer_C_ActivateGameOfLifeCell");
static_assert(offsetof(GM_SinglePlayer_C_ActivateGameOfLifeCell, WallLocation) == 0x000000, "Member 'GM_SinglePlayer_C_ActivateGameOfLifeCell::WallLocation' has a wrong offset!");
static_assert(offsetof(GM_SinglePlayer_C_ActivateGameOfLifeCell, MinCellLifetime) == 0x000010, "Member 'GM_SinglePlayer_C_ActivateGameOfLifeCell::MinCellLifetime' has a wrong offset!");
static_assert(offsetof(GM_SinglePlayer_C_ActivateGameOfLifeCell, Result) == 0x000014, "Member 'GM_SinglePlayer_C_ActivateGameOfLifeCell::Result' has a wrong offset!");
static_assert(offsetof(GM_SinglePlayer_C_ActivateGameOfLifeCell, CallFunc_TryActivateCellAtLocation_ReturnValue) == 0x000015, "Member 'GM_SinglePlayer_C_ActivateGameOfLifeCell::CallFunc_TryActivateCellAtLocation_ReturnValue' has a wrong offset!");

// Function GM_SinglePlayer.GM_SinglePlayer_C.ActivateGameOfLifeCellFromRaycast
// 0x00A0 (0x00A0 - 0x0000)
struct GM_SinglePlayer_C_ActivateGameOfLifeCellFromRaycast final
{
public:
	struct FHitResult                             RayHitResult;                                      // 0x0000(0x0088)(BlueprintVisible, BlueprintReadOnly, Parm, IsPlainOldData, NoDestructor, ContainsInstancedReference)
	bool                                          CallFunc_GetBestWallLocationFromHitResult_Result;  // 0x0088(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_89[0x3];                                       // 0x0089(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVoxelWallLocation                     CallFunc_GetBestWallLocationFromHitResult_WallLocation; // 0x008C(0x0010)(NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x009C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_ActivateGameOfLifeCell_Result;            // 0x009D(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsValid_ReturnValue_1;                    // 0x009E(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(GM_SinglePlayer_C_ActivateGameOfLifeCellFromRaycast) == 0x000004, "Wrong alignment on GM_SinglePlayer_C_ActivateGameOfLifeCellFromRaycast");
static_assert(sizeof(GM_SinglePlayer_C_ActivateGameOfLifeCellFromRaycast) == 0x0000A0, "Wrong size on GM_SinglePlayer_C_ActivateGameOfLifeCellFromRaycast");
static_assert(offsetof(GM_SinglePlayer_C_ActivateGameOfLifeCellFromRaycast, RayHitResult) == 0x000000, "Member 'GM_SinglePlayer_C_ActivateGameOfLifeCellFromRaycast::RayHitResult' has a wrong offset!");
static_assert(offsetof(GM_SinglePlayer_C_ActivateGameOfLifeCellFromRaycast, CallFunc_GetBestWallLocationFromHitResult_Result) == 0x000088, "Member 'GM_SinglePlayer_C_ActivateGameOfLifeCellFromRaycast::CallFunc_GetBestWallLocationFromHitResult_Result' has a wrong offset!");
static_assert(offsetof(GM_SinglePlayer_C_ActivateGameOfLifeCellFromRaycast, CallFunc_GetBestWallLocationFromHitResult_WallLocation) == 0x00008C, "Member 'GM_SinglePlayer_C_ActivateGameOfLifeCellFromRaycast::CallFunc_GetBestWallLocationFromHitResult_WallLocation' has a wrong offset!");
static_assert(offsetof(GM_SinglePlayer_C_ActivateGameOfLifeCellFromRaycast, CallFunc_IsValid_ReturnValue) == 0x00009C, "Member 'GM_SinglePlayer_C_ActivateGameOfLifeCellFromRaycast::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(GM_SinglePlayer_C_ActivateGameOfLifeCellFromRaycast, CallFunc_ActivateGameOfLifeCell_Result) == 0x00009D, "Member 'GM_SinglePlayer_C_ActivateGameOfLifeCellFromRaycast::CallFunc_ActivateGameOfLifeCell_Result' has a wrong offset!");
static_assert(offsetof(GM_SinglePlayer_C_ActivateGameOfLifeCellFromRaycast, CallFunc_IsValid_ReturnValue_1) == 0x00009E, "Member 'GM_SinglePlayer_C_ActivateGameOfLifeCellFromRaycast::CallFunc_IsValid_ReturnValue_1' has a wrong offset!");

// Function GM_SinglePlayer.GM_SinglePlayer_C.GetBestWallLocationFromHitResult
// 0x02E0 (0x02E0 - 0x0000)
struct GM_SinglePlayer_C_GetBestWallLocationFromHitResult final
{
public:
	struct FHitResult                             HitResult;                                         // 0x0000(0x0088)(BlueprintVisible, BlueprintReadOnly, Parm, IsPlainOldData, NoDestructor, ContainsInstancedReference)
	bool                                          Result;                                            // 0x0088(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_89[0x3];                                       // 0x0089(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVoxelWallLocation                     WallLocation;                                      // 0x008C(0x0010)(Parm, OutParm, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_9C[0x4];                                       // 0x009C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FVoxelWallLocation>             BestWallLocations;                                 // 0x00A0(0x0010)(Edit, BlueprintVisible)
	TArray<struct FIntVector>                     SortedVoxelLocations;                              // 0x00B0(0x0010)(Edit, BlueprintVisible)
	struct FVector                                ImpactNormal;                                      // 0x00C0(0x000C)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FIntVector                             HitVoxelLocation;                                  // 0x00CC(0x000C)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Length_ReturnValue;                 // 0x00D8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Greater_IntInt_ReturnValue;               // 0x00DC(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BreakHitResult_bBlockingHit;              // 0x00DD(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BreakHitResult_bInitialOverlap;           // 0x00DE(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_DF[0x1];                                       // 0x00DF(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_BreakHitResult_Time;                      // 0x00E0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakHitResult_Distance;                  // 0x00E4(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakHitResult_Location;                  // 0x00E8(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakHitResult_ImpactPoint;               // 0x00F4(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakHitResult_Normal;                    // 0x0100(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakHitResult_ImpactNormal;              // 0x010C(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UPhysicalMaterial*                      CallFunc_BreakHitResult_PhysMat;                   // 0x0118(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 CallFunc_BreakHitResult_HitActor;                  // 0x0120(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UPrimitiveComponent*                    CallFunc_BreakHitResult_HitComponent;              // 0x0128(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FName                                   CallFunc_BreakHitResult_HitBoneName;               // 0x0130(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_BreakHitResult_HitItem;                   // 0x0138(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_BreakHitResult_ElementIndex;              // 0x013C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_BreakHitResult_FaceIndex;                 // 0x0140(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakHitResult_TraceStart;                // 0x0144(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakHitResult_TraceEnd;                  // 0x0150(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Add_ReturnValue;                    // 0x015C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BreakHitResult_bBlockingHit_1;            // 0x0160(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BreakHitResult_bInitialOverlap_1;         // 0x0161(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_162[0x2];                                      // 0x0162(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_BreakHitResult_Time_1;                    // 0x0164(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakHitResult_Distance_1;                // 0x0168(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakHitResult_Location_1;                // 0x016C(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakHitResult_ImpactPoint_1;             // 0x0178(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakHitResult_Normal_1;                  // 0x0184(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakHitResult_ImpactNormal_1;            // 0x0190(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_19C[0x4];                                      // 0x019C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UPhysicalMaterial*                      CallFunc_BreakHitResult_PhysMat_1;                 // 0x01A0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 CallFunc_BreakHitResult_HitActor_1;                // 0x01A8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UPrimitiveComponent*                    CallFunc_BreakHitResult_HitComponent_1;            // 0x01B0(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FName                                   CallFunc_BreakHitResult_HitBoneName_1;             // 0x01B8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_BreakHitResult_HitItem_1;                 // 0x01C0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_BreakHitResult_ElementIndex_1;            // 0x01C4(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_BreakHitResult_FaceIndex_1;               // 0x01C8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakHitResult_TraceStart_1;              // 0x01CC(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakHitResult_TraceEnd_1;                // 0x01D8(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ENUM_Axis                                     CallFunc_GetLargestAxesFromVector_AxisA;           // 0x01E4(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ENUM_Axis                                     CallFunc_GetLargestAxesFromVector_AxisB;           // 0x01E5(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ENUM_Axis                                     CallFunc_GetLargestAxesFromVector_AxisC;           // 0x01E6(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1E7[0x1];                                      // 0x01E7(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVoxelWallLocation                     CallFunc_Array_Get_Item;                           // 0x01E8(0x0010)(NoDestructor, HasGetValueTypeHash)
	struct FIntVector                             CallFunc_GetUnitIntVectorFromVectorAxis_Result;    // 0x01F8(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FIntVector                             CallFunc_AddIntVectors_Result;                     // 0x0204(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FIntVector                             CallFunc_GetUnitIntVectorFromVectorAxis_Result_1;  // 0x0210(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_AddUnique_ReturnValue;              // 0x021C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FIntVector                             CallFunc_AddIntVectors_Result_1;                   // 0x0220(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_AddUnique_ReturnValue_1;            // 0x022C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BreakHitResult_bBlockingHit_2;            // 0x0230(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BreakHitResult_bInitialOverlap_2;         // 0x0231(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_232[0x2];                                      // 0x0232(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_BreakHitResult_Time_2;                    // 0x0234(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakHitResult_Distance_2;                // 0x0238(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakHitResult_Location_2;                // 0x023C(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakHitResult_ImpactPoint_2;             // 0x0248(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakHitResult_Normal_2;                  // 0x0254(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakHitResult_ImpactNormal_2;            // 0x0260(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_26C[0x4];                                      // 0x026C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UPhysicalMaterial*                      CallFunc_BreakHitResult_PhysMat_2;                 // 0x0270(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 CallFunc_BreakHitResult_HitActor_2;                // 0x0278(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UPrimitiveComponent*                    CallFunc_BreakHitResult_HitComponent_2;            // 0x0280(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FName                                   CallFunc_BreakHitResult_HitBoneName_2;             // 0x0288(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_BreakHitResult_HitItem_2;                 // 0x0290(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_BreakHitResult_ElementIndex_2;            // 0x0294(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_BreakHitResult_FaceIndex_2;               // 0x0298(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakHitResult_TraceStart_2;              // 0x029C(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakHitResult_TraceEnd_2;                // 0x02A8(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Vector_Zero_ReturnValue;                  // 0x02B4(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FIntVector                             CallFunc_GetVoxelLocationFromWorldLocation_ReturnValue; // 0x02C0(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_2CC[0x4];                                      // 0x02CC(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FVoxelWallLocation>             CallFunc_GetWallLocationsForPrimitiveComponentAtVoxelLocations_ReturnValue; // 0x02D0(0x0010)(ReferenceParm)
};
static_assert(alignof(GM_SinglePlayer_C_GetBestWallLocationFromHitResult) == 0x000008, "Wrong alignment on GM_SinglePlayer_C_GetBestWallLocationFromHitResult");
static_assert(sizeof(GM_SinglePlayer_C_GetBestWallLocationFromHitResult) == 0x0002E0, "Wrong size on GM_SinglePlayer_C_GetBestWallLocationFromHitResult");
static_assert(offsetof(GM_SinglePlayer_C_GetBestWallLocationFromHitResult, HitResult) == 0x000000, "Member 'GM_SinglePlayer_C_GetBestWallLocationFromHitResult::HitResult' has a wrong offset!");
static_assert(offsetof(GM_SinglePlayer_C_GetBestWallLocationFromHitResult, Result) == 0x000088, "Member 'GM_SinglePlayer_C_GetBestWallLocationFromHitResult::Result' has a wrong offset!");
static_assert(offsetof(GM_SinglePlayer_C_GetBestWallLocationFromHitResult, WallLocation) == 0x00008C, "Member 'GM_SinglePlayer_C_GetBestWallLocationFromHitResult::WallLocation' has a wrong offset!");
static_assert(offsetof(GM_SinglePlayer_C_GetBestWallLocationFromHitResult, BestWallLocations) == 0x0000A0, "Member 'GM_SinglePlayer_C_GetBestWallLocationFromHitResult::BestWallLocations' has a wrong offset!");
static_assert(offsetof(GM_SinglePlayer_C_GetBestWallLocationFromHitResult, SortedVoxelLocations) == 0x0000B0, "Member 'GM_SinglePlayer_C_GetBestWallLocationFromHitResult::SortedVoxelLocations' has a wrong offset!");
static_assert(offsetof(GM_SinglePlayer_C_GetBestWallLocationFromHitResult, ImpactNormal) == 0x0000C0, "Member 'GM_SinglePlayer_C_GetBestWallLocationFromHitResult::ImpactNormal' has a wrong offset!");
static_assert(offsetof(GM_SinglePlayer_C_GetBestWallLocationFromHitResult, HitVoxelLocation) == 0x0000CC, "Member 'GM_SinglePlayer_C_GetBestWallLocationFromHitResult::HitVoxelLocation' has a wrong offset!");
static_assert(offsetof(GM_SinglePlayer_C_GetBestWallLocationFromHitResult, CallFunc_Array_Length_ReturnValue) == 0x0000D8, "Member 'GM_SinglePlayer_C_GetBestWallLocationFromHitResult::CallFunc_Array_Length_ReturnValue' has a wrong offset!");
static_assert(offsetof(GM_SinglePlayer_C_GetBestWallLocationFromHitResult, CallFunc_Greater_IntInt_ReturnValue) == 0x0000DC, "Member 'GM_SinglePlayer_C_GetBestWallLocationFromHitResult::CallFunc_Greater_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(GM_SinglePlayer_C_GetBestWallLocationFromHitResult, CallFunc_BreakHitResult_bBlockingHit) == 0x0000DD, "Member 'GM_SinglePlayer_C_GetBestWallLocationFromHitResult::CallFunc_BreakHitResult_bBlockingHit' has a wrong offset!");
static_assert(offsetof(GM_SinglePlayer_C_GetBestWallLocationFromHitResult, CallFunc_BreakHitResult_bInitialOverlap) == 0x0000DE, "Member 'GM_SinglePlayer_C_GetBestWallLocationFromHitResult::CallFunc_BreakHitResult_bInitialOverlap' has a wrong offset!");
static_assert(offsetof(GM_SinglePlayer_C_GetBestWallLocationFromHitResult, CallFunc_BreakHitResult_Time) == 0x0000E0, "Member 'GM_SinglePlayer_C_GetBestWallLocationFromHitResult::CallFunc_BreakHitResult_Time' has a wrong offset!");
static_assert(offsetof(GM_SinglePlayer_C_GetBestWallLocationFromHitResult, CallFunc_BreakHitResult_Distance) == 0x0000E4, "Member 'GM_SinglePlayer_C_GetBestWallLocationFromHitResult::CallFunc_BreakHitResult_Distance' has a wrong offset!");
static_assert(offsetof(GM_SinglePlayer_C_GetBestWallLocationFromHitResult, CallFunc_BreakHitResult_Location) == 0x0000E8, "Member 'GM_SinglePlayer_C_GetBestWallLocationFromHitResult::CallFunc_BreakHitResult_Location' has a wrong offset!");
static_assert(offsetof(GM_SinglePlayer_C_GetBestWallLocationFromHitResult, CallFunc_BreakHitResult_ImpactPoint) == 0x0000F4, "Member 'GM_SinglePlayer_C_GetBestWallLocationFromHitResult::CallFunc_BreakHitResult_ImpactPoint' has a wrong offset!");
static_assert(offsetof(GM_SinglePlayer_C_GetBestWallLocationFromHitResult, CallFunc_BreakHitResult_Normal) == 0x000100, "Member 'GM_SinglePlayer_C_GetBestWallLocationFromHitResult::CallFunc_BreakHitResult_Normal' has a wrong offset!");
static_assert(offsetof(GM_SinglePlayer_C_GetBestWallLocationFromHitResult, CallFunc_BreakHitResult_ImpactNormal) == 0x00010C, "Member 'GM_SinglePlayer_C_GetBestWallLocationFromHitResult::CallFunc_BreakHitResult_ImpactNormal' has a wrong offset!");
static_assert(offsetof(GM_SinglePlayer_C_GetBestWallLocationFromHitResult, CallFunc_BreakHitResult_PhysMat) == 0x000118, "Member 'GM_SinglePlayer_C_GetBestWallLocationFromHitResult::CallFunc_BreakHitResult_PhysMat' has a wrong offset!");
static_assert(offsetof(GM_SinglePlayer_C_GetBestWallLocationFromHitResult, CallFunc_BreakHitResult_HitActor) == 0x000120, "Member 'GM_SinglePlayer_C_GetBestWallLocationFromHitResult::CallFunc_BreakHitResult_HitActor' has a wrong offset!");
static_assert(offsetof(GM_SinglePlayer_C_GetBestWallLocationFromHitResult, CallFunc_BreakHitResult_HitComponent) == 0x000128, "Member 'GM_SinglePlayer_C_GetBestWallLocationFromHitResult::CallFunc_BreakHitResult_HitComponent' has a wrong offset!");
static_assert(offsetof(GM_SinglePlayer_C_GetBestWallLocationFromHitResult, CallFunc_BreakHitResult_HitBoneName) == 0x000130, "Member 'GM_SinglePlayer_C_GetBestWallLocationFromHitResult::CallFunc_BreakHitResult_HitBoneName' has a wrong offset!");
static_assert(offsetof(GM_SinglePlayer_C_GetBestWallLocationFromHitResult, CallFunc_BreakHitResult_HitItem) == 0x000138, "Member 'GM_SinglePlayer_C_GetBestWallLocationFromHitResult::CallFunc_BreakHitResult_HitItem' has a wrong offset!");
static_assert(offsetof(GM_SinglePlayer_C_GetBestWallLocationFromHitResult, CallFunc_BreakHitResult_ElementIndex) == 0x00013C, "Member 'GM_SinglePlayer_C_GetBestWallLocationFromHitResult::CallFunc_BreakHitResult_ElementIndex' has a wrong offset!");
static_assert(offsetof(GM_SinglePlayer_C_GetBestWallLocationFromHitResult, CallFunc_BreakHitResult_FaceIndex) == 0x000140, "Member 'GM_SinglePlayer_C_GetBestWallLocationFromHitResult::CallFunc_BreakHitResult_FaceIndex' has a wrong offset!");
static_assert(offsetof(GM_SinglePlayer_C_GetBestWallLocationFromHitResult, CallFunc_BreakHitResult_TraceStart) == 0x000144, "Member 'GM_SinglePlayer_C_GetBestWallLocationFromHitResult::CallFunc_BreakHitResult_TraceStart' has a wrong offset!");
static_assert(offsetof(GM_SinglePlayer_C_GetBestWallLocationFromHitResult, CallFunc_BreakHitResult_TraceEnd) == 0x000150, "Member 'GM_SinglePlayer_C_GetBestWallLocationFromHitResult::CallFunc_BreakHitResult_TraceEnd' has a wrong offset!");
static_assert(offsetof(GM_SinglePlayer_C_GetBestWallLocationFromHitResult, CallFunc_Array_Add_ReturnValue) == 0x00015C, "Member 'GM_SinglePlayer_C_GetBestWallLocationFromHitResult::CallFunc_Array_Add_ReturnValue' has a wrong offset!");
static_assert(offsetof(GM_SinglePlayer_C_GetBestWallLocationFromHitResult, CallFunc_BreakHitResult_bBlockingHit_1) == 0x000160, "Member 'GM_SinglePlayer_C_GetBestWallLocationFromHitResult::CallFunc_BreakHitResult_bBlockingHit_1' has a wrong offset!");
static_assert(offsetof(GM_SinglePlayer_C_GetBestWallLocationFromHitResult, CallFunc_BreakHitResult_bInitialOverlap_1) == 0x000161, "Member 'GM_SinglePlayer_C_GetBestWallLocationFromHitResult::CallFunc_BreakHitResult_bInitialOverlap_1' has a wrong offset!");
static_assert(offsetof(GM_SinglePlayer_C_GetBestWallLocationFromHitResult, CallFunc_BreakHitResult_Time_1) == 0x000164, "Member 'GM_SinglePlayer_C_GetBestWallLocationFromHitResult::CallFunc_BreakHitResult_Time_1' has a wrong offset!");
static_assert(offsetof(GM_SinglePlayer_C_GetBestWallLocationFromHitResult, CallFunc_BreakHitResult_Distance_1) == 0x000168, "Member 'GM_SinglePlayer_C_GetBestWallLocationFromHitResult::CallFunc_BreakHitResult_Distance_1' has a wrong offset!");
static_assert(offsetof(GM_SinglePlayer_C_GetBestWallLocationFromHitResult, CallFunc_BreakHitResult_Location_1) == 0x00016C, "Member 'GM_SinglePlayer_C_GetBestWallLocationFromHitResult::CallFunc_BreakHitResult_Location_1' has a wrong offset!");
static_assert(offsetof(GM_SinglePlayer_C_GetBestWallLocationFromHitResult, CallFunc_BreakHitResult_ImpactPoint_1) == 0x000178, "Member 'GM_SinglePlayer_C_GetBestWallLocationFromHitResult::CallFunc_BreakHitResult_ImpactPoint_1' has a wrong offset!");
static_assert(offsetof(GM_SinglePlayer_C_GetBestWallLocationFromHitResult, CallFunc_BreakHitResult_Normal_1) == 0x000184, "Member 'GM_SinglePlayer_C_GetBestWallLocationFromHitResult::CallFunc_BreakHitResult_Normal_1' has a wrong offset!");
static_assert(offsetof(GM_SinglePlayer_C_GetBestWallLocationFromHitResult, CallFunc_BreakHitResult_ImpactNormal_1) == 0x000190, "Member 'GM_SinglePlayer_C_GetBestWallLocationFromHitResult::CallFunc_BreakHitResult_ImpactNormal_1' has a wrong offset!");
static_assert(offsetof(GM_SinglePlayer_C_GetBestWallLocationFromHitResult, CallFunc_BreakHitResult_PhysMat_1) == 0x0001A0, "Member 'GM_SinglePlayer_C_GetBestWallLocationFromHitResult::CallFunc_BreakHitResult_PhysMat_1' has a wrong offset!");
static_assert(offsetof(GM_SinglePlayer_C_GetBestWallLocationFromHitResult, CallFunc_BreakHitResult_HitActor_1) == 0x0001A8, "Member 'GM_SinglePlayer_C_GetBestWallLocationFromHitResult::CallFunc_BreakHitResult_HitActor_1' has a wrong offset!");
static_assert(offsetof(GM_SinglePlayer_C_GetBestWallLocationFromHitResult, CallFunc_BreakHitResult_HitComponent_1) == 0x0001B0, "Member 'GM_SinglePlayer_C_GetBestWallLocationFromHitResult::CallFunc_BreakHitResult_HitComponent_1' has a wrong offset!");
static_assert(offsetof(GM_SinglePlayer_C_GetBestWallLocationFromHitResult, CallFunc_BreakHitResult_HitBoneName_1) == 0x0001B8, "Member 'GM_SinglePlayer_C_GetBestWallLocationFromHitResult::CallFunc_BreakHitResult_HitBoneName_1' has a wrong offset!");
static_assert(offsetof(GM_SinglePlayer_C_GetBestWallLocationFromHitResult, CallFunc_BreakHitResult_HitItem_1) == 0x0001C0, "Member 'GM_SinglePlayer_C_GetBestWallLocationFromHitResult::CallFunc_BreakHitResult_HitItem_1' has a wrong offset!");
static_assert(offsetof(GM_SinglePlayer_C_GetBestWallLocationFromHitResult, CallFunc_BreakHitResult_ElementIndex_1) == 0x0001C4, "Member 'GM_SinglePlayer_C_GetBestWallLocationFromHitResult::CallFunc_BreakHitResult_ElementIndex_1' has a wrong offset!");
static_assert(offsetof(GM_SinglePlayer_C_GetBestWallLocationFromHitResult, CallFunc_BreakHitResult_FaceIndex_1) == 0x0001C8, "Member 'GM_SinglePlayer_C_GetBestWallLocationFromHitResult::CallFunc_BreakHitResult_FaceIndex_1' has a wrong offset!");
static_assert(offsetof(GM_SinglePlayer_C_GetBestWallLocationFromHitResult, CallFunc_BreakHitResult_TraceStart_1) == 0x0001CC, "Member 'GM_SinglePlayer_C_GetBestWallLocationFromHitResult::CallFunc_BreakHitResult_TraceStart_1' has a wrong offset!");
static_assert(offsetof(GM_SinglePlayer_C_GetBestWallLocationFromHitResult, CallFunc_BreakHitResult_TraceEnd_1) == 0x0001D8, "Member 'GM_SinglePlayer_C_GetBestWallLocationFromHitResult::CallFunc_BreakHitResult_TraceEnd_1' has a wrong offset!");
static_assert(offsetof(GM_SinglePlayer_C_GetBestWallLocationFromHitResult, CallFunc_GetLargestAxesFromVector_AxisA) == 0x0001E4, "Member 'GM_SinglePlayer_C_GetBestWallLocationFromHitResult::CallFunc_GetLargestAxesFromVector_AxisA' has a wrong offset!");
static_assert(offsetof(GM_SinglePlayer_C_GetBestWallLocationFromHitResult, CallFunc_GetLargestAxesFromVector_AxisB) == 0x0001E5, "Member 'GM_SinglePlayer_C_GetBestWallLocationFromHitResult::CallFunc_GetLargestAxesFromVector_AxisB' has a wrong offset!");
static_assert(offsetof(GM_SinglePlayer_C_GetBestWallLocationFromHitResult, CallFunc_GetLargestAxesFromVector_AxisC) == 0x0001E6, "Member 'GM_SinglePlayer_C_GetBestWallLocationFromHitResult::CallFunc_GetLargestAxesFromVector_AxisC' has a wrong offset!");
static_assert(offsetof(GM_SinglePlayer_C_GetBestWallLocationFromHitResult, CallFunc_Array_Get_Item) == 0x0001E8, "Member 'GM_SinglePlayer_C_GetBestWallLocationFromHitResult::CallFunc_Array_Get_Item' has a wrong offset!");
static_assert(offsetof(GM_SinglePlayer_C_GetBestWallLocationFromHitResult, CallFunc_GetUnitIntVectorFromVectorAxis_Result) == 0x0001F8, "Member 'GM_SinglePlayer_C_GetBestWallLocationFromHitResult::CallFunc_GetUnitIntVectorFromVectorAxis_Result' has a wrong offset!");
static_assert(offsetof(GM_SinglePlayer_C_GetBestWallLocationFromHitResult, CallFunc_AddIntVectors_Result) == 0x000204, "Member 'GM_SinglePlayer_C_GetBestWallLocationFromHitResult::CallFunc_AddIntVectors_Result' has a wrong offset!");
static_assert(offsetof(GM_SinglePlayer_C_GetBestWallLocationFromHitResult, CallFunc_GetUnitIntVectorFromVectorAxis_Result_1) == 0x000210, "Member 'GM_SinglePlayer_C_GetBestWallLocationFromHitResult::CallFunc_GetUnitIntVectorFromVectorAxis_Result_1' has a wrong offset!");
static_assert(offsetof(GM_SinglePlayer_C_GetBestWallLocationFromHitResult, CallFunc_Array_AddUnique_ReturnValue) == 0x00021C, "Member 'GM_SinglePlayer_C_GetBestWallLocationFromHitResult::CallFunc_Array_AddUnique_ReturnValue' has a wrong offset!");
static_assert(offsetof(GM_SinglePlayer_C_GetBestWallLocationFromHitResult, CallFunc_AddIntVectors_Result_1) == 0x000220, "Member 'GM_SinglePlayer_C_GetBestWallLocationFromHitResult::CallFunc_AddIntVectors_Result_1' has a wrong offset!");
static_assert(offsetof(GM_SinglePlayer_C_GetBestWallLocationFromHitResult, CallFunc_Array_AddUnique_ReturnValue_1) == 0x00022C, "Member 'GM_SinglePlayer_C_GetBestWallLocationFromHitResult::CallFunc_Array_AddUnique_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(GM_SinglePlayer_C_GetBestWallLocationFromHitResult, CallFunc_BreakHitResult_bBlockingHit_2) == 0x000230, "Member 'GM_SinglePlayer_C_GetBestWallLocationFromHitResult::CallFunc_BreakHitResult_bBlockingHit_2' has a wrong offset!");
static_assert(offsetof(GM_SinglePlayer_C_GetBestWallLocationFromHitResult, CallFunc_BreakHitResult_bInitialOverlap_2) == 0x000231, "Member 'GM_SinglePlayer_C_GetBestWallLocationFromHitResult::CallFunc_BreakHitResult_bInitialOverlap_2' has a wrong offset!");
static_assert(offsetof(GM_SinglePlayer_C_GetBestWallLocationFromHitResult, CallFunc_BreakHitResult_Time_2) == 0x000234, "Member 'GM_SinglePlayer_C_GetBestWallLocationFromHitResult::CallFunc_BreakHitResult_Time_2' has a wrong offset!");
static_assert(offsetof(GM_SinglePlayer_C_GetBestWallLocationFromHitResult, CallFunc_BreakHitResult_Distance_2) == 0x000238, "Member 'GM_SinglePlayer_C_GetBestWallLocationFromHitResult::CallFunc_BreakHitResult_Distance_2' has a wrong offset!");
static_assert(offsetof(GM_SinglePlayer_C_GetBestWallLocationFromHitResult, CallFunc_BreakHitResult_Location_2) == 0x00023C, "Member 'GM_SinglePlayer_C_GetBestWallLocationFromHitResult::CallFunc_BreakHitResult_Location_2' has a wrong offset!");
static_assert(offsetof(GM_SinglePlayer_C_GetBestWallLocationFromHitResult, CallFunc_BreakHitResult_ImpactPoint_2) == 0x000248, "Member 'GM_SinglePlayer_C_GetBestWallLocationFromHitResult::CallFunc_BreakHitResult_ImpactPoint_2' has a wrong offset!");
static_assert(offsetof(GM_SinglePlayer_C_GetBestWallLocationFromHitResult, CallFunc_BreakHitResult_Normal_2) == 0x000254, "Member 'GM_SinglePlayer_C_GetBestWallLocationFromHitResult::CallFunc_BreakHitResult_Normal_2' has a wrong offset!");
static_assert(offsetof(GM_SinglePlayer_C_GetBestWallLocationFromHitResult, CallFunc_BreakHitResult_ImpactNormal_2) == 0x000260, "Member 'GM_SinglePlayer_C_GetBestWallLocationFromHitResult::CallFunc_BreakHitResult_ImpactNormal_2' has a wrong offset!");
static_assert(offsetof(GM_SinglePlayer_C_GetBestWallLocationFromHitResult, CallFunc_BreakHitResult_PhysMat_2) == 0x000270, "Member 'GM_SinglePlayer_C_GetBestWallLocationFromHitResult::CallFunc_BreakHitResult_PhysMat_2' has a wrong offset!");
static_assert(offsetof(GM_SinglePlayer_C_GetBestWallLocationFromHitResult, CallFunc_BreakHitResult_HitActor_2) == 0x000278, "Member 'GM_SinglePlayer_C_GetBestWallLocationFromHitResult::CallFunc_BreakHitResult_HitActor_2' has a wrong offset!");
static_assert(offsetof(GM_SinglePlayer_C_GetBestWallLocationFromHitResult, CallFunc_BreakHitResult_HitComponent_2) == 0x000280, "Member 'GM_SinglePlayer_C_GetBestWallLocationFromHitResult::CallFunc_BreakHitResult_HitComponent_2' has a wrong offset!");
static_assert(offsetof(GM_SinglePlayer_C_GetBestWallLocationFromHitResult, CallFunc_BreakHitResult_HitBoneName_2) == 0x000288, "Member 'GM_SinglePlayer_C_GetBestWallLocationFromHitResult::CallFunc_BreakHitResult_HitBoneName_2' has a wrong offset!");
static_assert(offsetof(GM_SinglePlayer_C_GetBestWallLocationFromHitResult, CallFunc_BreakHitResult_HitItem_2) == 0x000290, "Member 'GM_SinglePlayer_C_GetBestWallLocationFromHitResult::CallFunc_BreakHitResult_HitItem_2' has a wrong offset!");
static_assert(offsetof(GM_SinglePlayer_C_GetBestWallLocationFromHitResult, CallFunc_BreakHitResult_ElementIndex_2) == 0x000294, "Member 'GM_SinglePlayer_C_GetBestWallLocationFromHitResult::CallFunc_BreakHitResult_ElementIndex_2' has a wrong offset!");
static_assert(offsetof(GM_SinglePlayer_C_GetBestWallLocationFromHitResult, CallFunc_BreakHitResult_FaceIndex_2) == 0x000298, "Member 'GM_SinglePlayer_C_GetBestWallLocationFromHitResult::CallFunc_BreakHitResult_FaceIndex_2' has a wrong offset!");
static_assert(offsetof(GM_SinglePlayer_C_GetBestWallLocationFromHitResult, CallFunc_BreakHitResult_TraceStart_2) == 0x00029C, "Member 'GM_SinglePlayer_C_GetBestWallLocationFromHitResult::CallFunc_BreakHitResult_TraceStart_2' has a wrong offset!");
static_assert(offsetof(GM_SinglePlayer_C_GetBestWallLocationFromHitResult, CallFunc_BreakHitResult_TraceEnd_2) == 0x0002A8, "Member 'GM_SinglePlayer_C_GetBestWallLocationFromHitResult::CallFunc_BreakHitResult_TraceEnd_2' has a wrong offset!");
static_assert(offsetof(GM_SinglePlayer_C_GetBestWallLocationFromHitResult, CallFunc_Vector_Zero_ReturnValue) == 0x0002B4, "Member 'GM_SinglePlayer_C_GetBestWallLocationFromHitResult::CallFunc_Vector_Zero_ReturnValue' has a wrong offset!");
static_assert(offsetof(GM_SinglePlayer_C_GetBestWallLocationFromHitResult, CallFunc_GetVoxelLocationFromWorldLocation_ReturnValue) == 0x0002C0, "Member 'GM_SinglePlayer_C_GetBestWallLocationFromHitResult::CallFunc_GetVoxelLocationFromWorldLocation_ReturnValue' has a wrong offset!");
static_assert(offsetof(GM_SinglePlayer_C_GetBestWallLocationFromHitResult, CallFunc_GetWallLocationsForPrimitiveComponentAtVoxelLocations_ReturnValue) == 0x0002D0, "Member 'GM_SinglePlayer_C_GetBestWallLocationFromHitResult::CallFunc_GetWallLocationsForPrimitiveComponentAtVoxelLocations_ReturnValue' has a wrong offset!");

// Function GM_SinglePlayer.GM_SinglePlayer_C.DebugDrawAllNeighborCounts
// 0x0048 (0x0048 - 0x0000)
struct GM_SinglePlayer_C_DebugDrawAllNeighborCounts final
{
public:
	TArray<struct FVoxelWallLocation>             WallLocationsWithNeighbors;                        // 0x0000(0x0010)(Edit, BlueprintVisible)
	int32                                         Temp_int_Array_Index_Variable;                     // 0x0010(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Loop_Counter_Variable;                    // 0x0014(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue;                   // 0x0018(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVoxelWallLocation                     CallFunc_Array_Get_Item;                           // 0x001C(0x0010)(NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_2C[0x4];                                       // 0x002C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FVoxelWallLocation>             CallFunc_GetCellLocationsWithNeighbors_ReturnValue; // 0x0030(0x0010)(ReferenceParm)
	int32                                         CallFunc_Array_Length_ReturnValue;                 // 0x0040(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue;                  // 0x0044(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(GM_SinglePlayer_C_DebugDrawAllNeighborCounts) == 0x000008, "Wrong alignment on GM_SinglePlayer_C_DebugDrawAllNeighborCounts");
static_assert(sizeof(GM_SinglePlayer_C_DebugDrawAllNeighborCounts) == 0x000048, "Wrong size on GM_SinglePlayer_C_DebugDrawAllNeighborCounts");
static_assert(offsetof(GM_SinglePlayer_C_DebugDrawAllNeighborCounts, WallLocationsWithNeighbors) == 0x000000, "Member 'GM_SinglePlayer_C_DebugDrawAllNeighborCounts::WallLocationsWithNeighbors' has a wrong offset!");
static_assert(offsetof(GM_SinglePlayer_C_DebugDrawAllNeighborCounts, Temp_int_Array_Index_Variable) == 0x000010, "Member 'GM_SinglePlayer_C_DebugDrawAllNeighborCounts::Temp_int_Array_Index_Variable' has a wrong offset!");
static_assert(offsetof(GM_SinglePlayer_C_DebugDrawAllNeighborCounts, Temp_int_Loop_Counter_Variable) == 0x000014, "Member 'GM_SinglePlayer_C_DebugDrawAllNeighborCounts::Temp_int_Loop_Counter_Variable' has a wrong offset!");
static_assert(offsetof(GM_SinglePlayer_C_DebugDrawAllNeighborCounts, CallFunc_Add_IntInt_ReturnValue) == 0x000018, "Member 'GM_SinglePlayer_C_DebugDrawAllNeighborCounts::CallFunc_Add_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(GM_SinglePlayer_C_DebugDrawAllNeighborCounts, CallFunc_Array_Get_Item) == 0x00001C, "Member 'GM_SinglePlayer_C_DebugDrawAllNeighborCounts::CallFunc_Array_Get_Item' has a wrong offset!");
static_assert(offsetof(GM_SinglePlayer_C_DebugDrawAllNeighborCounts, CallFunc_GetCellLocationsWithNeighbors_ReturnValue) == 0x000030, "Member 'GM_SinglePlayer_C_DebugDrawAllNeighborCounts::CallFunc_GetCellLocationsWithNeighbors_ReturnValue' has a wrong offset!");
static_assert(offsetof(GM_SinglePlayer_C_DebugDrawAllNeighborCounts, CallFunc_Array_Length_ReturnValue) == 0x000040, "Member 'GM_SinglePlayer_C_DebugDrawAllNeighborCounts::CallFunc_Array_Length_ReturnValue' has a wrong offset!");
static_assert(offsetof(GM_SinglePlayer_C_DebugDrawAllNeighborCounts, CallFunc_Less_IntInt_ReturnValue) == 0x000044, "Member 'GM_SinglePlayer_C_DebugDrawAllNeighborCounts::CallFunc_Less_IntInt_ReturnValue' has a wrong offset!");

// Function GM_SinglePlayer.GM_SinglePlayer_C.DebugDrawCellNeighborCounts
// 0x00B8 (0x00B8 - 0x0000)
struct GM_SinglePlayer_C_DebugDrawCellNeighborCounts final
{
public:
	struct FVoxelWallLocation                     WallLocation;                                      // 0x0000(0x0010)(BlueprintVisible, BlueprintReadOnly, Parm, NoDestructor, HasGetValueTypeHash)
	float                                         Duration;                                          // 0x0010(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         NeighborCount;                                     // 0x0014(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Variable;                                 // 0x0018(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Variable_1;                               // 0x001C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Variable_2;                               // 0x0020(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Variable_3;                               // 0x0024(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                Temp_struct_Variable;                              // 0x0028(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                Temp_struct_Variable_1;                            // 0x0034(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                Temp_struct_Variable_2;                            // 0x0040(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                Temp_struct_Variable_3;                            // 0x004C(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_And_IntInt_ReturnValue;                   // 0x0058(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_GetCellNeighborCount_ReturnValue;         // 0x005C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         K2Node_Select_Default;                             // 0x0060(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Divide_IntInt_ReturnValue;                // 0x0064(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Vector_Zero_ReturnValue;                  // 0x0068(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Min_ReturnValue;                          // 0x0074(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_GetWorldCenterLocationFromVoxelLocation_ReturnValue; // 0x0078(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                K2Node_Select_Default_1;                           // 0x0084(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FString                                 CallFunc_Conv_IntToString_ReturnValue;             // 0x0090(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Multiply_VectorInt_ReturnValue;           // 0x00A0(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Add_VectorVector_ReturnValue;             // 0x00AC(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(GM_SinglePlayer_C_DebugDrawCellNeighborCounts) == 0x000008, "Wrong alignment on GM_SinglePlayer_C_DebugDrawCellNeighborCounts");
static_assert(sizeof(GM_SinglePlayer_C_DebugDrawCellNeighborCounts) == 0x0000B8, "Wrong size on GM_SinglePlayer_C_DebugDrawCellNeighborCounts");
static_assert(offsetof(GM_SinglePlayer_C_DebugDrawCellNeighborCounts, WallLocation) == 0x000000, "Member 'GM_SinglePlayer_C_DebugDrawCellNeighborCounts::WallLocation' has a wrong offset!");
static_assert(offsetof(GM_SinglePlayer_C_DebugDrawCellNeighborCounts, Duration) == 0x000010, "Member 'GM_SinglePlayer_C_DebugDrawCellNeighborCounts::Duration' has a wrong offset!");
static_assert(offsetof(GM_SinglePlayer_C_DebugDrawCellNeighborCounts, NeighborCount) == 0x000014, "Member 'GM_SinglePlayer_C_DebugDrawCellNeighborCounts::NeighborCount' has a wrong offset!");
static_assert(offsetof(GM_SinglePlayer_C_DebugDrawCellNeighborCounts, Temp_int_Variable) == 0x000018, "Member 'GM_SinglePlayer_C_DebugDrawCellNeighborCounts::Temp_int_Variable' has a wrong offset!");
static_assert(offsetof(GM_SinglePlayer_C_DebugDrawCellNeighborCounts, Temp_int_Variable_1) == 0x00001C, "Member 'GM_SinglePlayer_C_DebugDrawCellNeighborCounts::Temp_int_Variable_1' has a wrong offset!");
static_assert(offsetof(GM_SinglePlayer_C_DebugDrawCellNeighborCounts, Temp_int_Variable_2) == 0x000020, "Member 'GM_SinglePlayer_C_DebugDrawCellNeighborCounts::Temp_int_Variable_2' has a wrong offset!");
static_assert(offsetof(GM_SinglePlayer_C_DebugDrawCellNeighborCounts, Temp_int_Variable_3) == 0x000024, "Member 'GM_SinglePlayer_C_DebugDrawCellNeighborCounts::Temp_int_Variable_3' has a wrong offset!");
static_assert(offsetof(GM_SinglePlayer_C_DebugDrawCellNeighborCounts, Temp_struct_Variable) == 0x000028, "Member 'GM_SinglePlayer_C_DebugDrawCellNeighborCounts::Temp_struct_Variable' has a wrong offset!");
static_assert(offsetof(GM_SinglePlayer_C_DebugDrawCellNeighborCounts, Temp_struct_Variable_1) == 0x000034, "Member 'GM_SinglePlayer_C_DebugDrawCellNeighborCounts::Temp_struct_Variable_1' has a wrong offset!");
static_assert(offsetof(GM_SinglePlayer_C_DebugDrawCellNeighborCounts, Temp_struct_Variable_2) == 0x000040, "Member 'GM_SinglePlayer_C_DebugDrawCellNeighborCounts::Temp_struct_Variable_2' has a wrong offset!");
static_assert(offsetof(GM_SinglePlayer_C_DebugDrawCellNeighborCounts, Temp_struct_Variable_3) == 0x00004C, "Member 'GM_SinglePlayer_C_DebugDrawCellNeighborCounts::Temp_struct_Variable_3' has a wrong offset!");
static_assert(offsetof(GM_SinglePlayer_C_DebugDrawCellNeighborCounts, CallFunc_And_IntInt_ReturnValue) == 0x000058, "Member 'GM_SinglePlayer_C_DebugDrawCellNeighborCounts::CallFunc_And_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(GM_SinglePlayer_C_DebugDrawCellNeighborCounts, CallFunc_GetCellNeighborCount_ReturnValue) == 0x00005C, "Member 'GM_SinglePlayer_C_DebugDrawCellNeighborCounts::CallFunc_GetCellNeighborCount_ReturnValue' has a wrong offset!");
static_assert(offsetof(GM_SinglePlayer_C_DebugDrawCellNeighborCounts, K2Node_Select_Default) == 0x000060, "Member 'GM_SinglePlayer_C_DebugDrawCellNeighborCounts::K2Node_Select_Default' has a wrong offset!");
static_assert(offsetof(GM_SinglePlayer_C_DebugDrawCellNeighborCounts, CallFunc_Divide_IntInt_ReturnValue) == 0x000064, "Member 'GM_SinglePlayer_C_DebugDrawCellNeighborCounts::CallFunc_Divide_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(GM_SinglePlayer_C_DebugDrawCellNeighborCounts, CallFunc_Vector_Zero_ReturnValue) == 0x000068, "Member 'GM_SinglePlayer_C_DebugDrawCellNeighborCounts::CallFunc_Vector_Zero_ReturnValue' has a wrong offset!");
static_assert(offsetof(GM_SinglePlayer_C_DebugDrawCellNeighborCounts, CallFunc_Min_ReturnValue) == 0x000074, "Member 'GM_SinglePlayer_C_DebugDrawCellNeighborCounts::CallFunc_Min_ReturnValue' has a wrong offset!");
static_assert(offsetof(GM_SinglePlayer_C_DebugDrawCellNeighborCounts, CallFunc_GetWorldCenterLocationFromVoxelLocation_ReturnValue) == 0x000078, "Member 'GM_SinglePlayer_C_DebugDrawCellNeighborCounts::CallFunc_GetWorldCenterLocationFromVoxelLocation_ReturnValue' has a wrong offset!");
static_assert(offsetof(GM_SinglePlayer_C_DebugDrawCellNeighborCounts, K2Node_Select_Default_1) == 0x000084, "Member 'GM_SinglePlayer_C_DebugDrawCellNeighborCounts::K2Node_Select_Default_1' has a wrong offset!");
static_assert(offsetof(GM_SinglePlayer_C_DebugDrawCellNeighborCounts, CallFunc_Conv_IntToString_ReturnValue) == 0x000090, "Member 'GM_SinglePlayer_C_DebugDrawCellNeighborCounts::CallFunc_Conv_IntToString_ReturnValue' has a wrong offset!");
static_assert(offsetof(GM_SinglePlayer_C_DebugDrawCellNeighborCounts, CallFunc_Multiply_VectorInt_ReturnValue) == 0x0000A0, "Member 'GM_SinglePlayer_C_DebugDrawCellNeighborCounts::CallFunc_Multiply_VectorInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(GM_SinglePlayer_C_DebugDrawCellNeighborCounts, CallFunc_Add_VectorVector_ReturnValue) == 0x0000AC, "Member 'GM_SinglePlayer_C_DebugDrawCellNeighborCounts::CallFunc_Add_VectorVector_ReturnValue' has a wrong offset!");

// Function GM_SinglePlayer.GM_SinglePlayer_C.UpdateCurrentLevelData
// 0x0038 (0x0038 - 0x0000)
struct GM_SinglePlayer_C_UpdateCurrentLevelData final
{
public:
	class ULevelVoxelizationData*                 CurrentLevelVoxelData;                             // 0x0000(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0008(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsValid_ReturnValue_1;                    // 0x0009(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_A[0x6];                                        // 0x000A(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class UGameInstance*                          CallFunc_GetGameInstance_ReturnValue;              // 0x0010(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UGI_SinglePlayer_C*                     K2Node_DynamicCast_AsGI_Single_Player;             // 0x0018(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0020(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_21[0x3];                                       // 0x0021(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   CallFunc_GetCurrentLevelName_Result;               // 0x0024(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_2C[0x4];                                       // 0x002C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class ULevelVoxelizationData*                 CallFunc_GetVoxelDataForLevelByName_ReturnValue;   // 0x0030(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(GM_SinglePlayer_C_UpdateCurrentLevelData) == 0x000008, "Wrong alignment on GM_SinglePlayer_C_UpdateCurrentLevelData");
static_assert(sizeof(GM_SinglePlayer_C_UpdateCurrentLevelData) == 0x000038, "Wrong size on GM_SinglePlayer_C_UpdateCurrentLevelData");
static_assert(offsetof(GM_SinglePlayer_C_UpdateCurrentLevelData, CurrentLevelVoxelData) == 0x000000, "Member 'GM_SinglePlayer_C_UpdateCurrentLevelData::CurrentLevelVoxelData' has a wrong offset!");
static_assert(offsetof(GM_SinglePlayer_C_UpdateCurrentLevelData, CallFunc_IsValid_ReturnValue) == 0x000008, "Member 'GM_SinglePlayer_C_UpdateCurrentLevelData::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(GM_SinglePlayer_C_UpdateCurrentLevelData, CallFunc_IsValid_ReturnValue_1) == 0x000009, "Member 'GM_SinglePlayer_C_UpdateCurrentLevelData::CallFunc_IsValid_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(GM_SinglePlayer_C_UpdateCurrentLevelData, CallFunc_GetGameInstance_ReturnValue) == 0x000010, "Member 'GM_SinglePlayer_C_UpdateCurrentLevelData::CallFunc_GetGameInstance_ReturnValue' has a wrong offset!");
static_assert(offsetof(GM_SinglePlayer_C_UpdateCurrentLevelData, K2Node_DynamicCast_AsGI_Single_Player) == 0x000018, "Member 'GM_SinglePlayer_C_UpdateCurrentLevelData::K2Node_DynamicCast_AsGI_Single_Player' has a wrong offset!");
static_assert(offsetof(GM_SinglePlayer_C_UpdateCurrentLevelData, K2Node_DynamicCast_bSuccess) == 0x000020, "Member 'GM_SinglePlayer_C_UpdateCurrentLevelData::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(GM_SinglePlayer_C_UpdateCurrentLevelData, CallFunc_GetCurrentLevelName_Result) == 0x000024, "Member 'GM_SinglePlayer_C_UpdateCurrentLevelData::CallFunc_GetCurrentLevelName_Result' has a wrong offset!");
static_assert(offsetof(GM_SinglePlayer_C_UpdateCurrentLevelData, CallFunc_GetVoxelDataForLevelByName_ReturnValue) == 0x000030, "Member 'GM_SinglePlayer_C_UpdateCurrentLevelData::CallFunc_GetVoxelDataForLevelByName_ReturnValue' has a wrong offset!");

// Function GM_SinglePlayer.GM_SinglePlayer_C.DebugDrawIslandBounds
// 0x0090 (0x0090 - 0x0000)
struct GM_SinglePlayer_C_DebugDrawIslandBounds final
{
public:
	TArray<struct FBox>                           IslandBoundingBoxes;                               // 0x0000(0x0010)(Edit, BlueprintVisible)
	int32                                         Temp_int_Array_Index_Variable;                     // 0x0010(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Loop_Counter_Variable;                    // 0x0014(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue;                   // 0x0018(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FBox                                   CallFunc_Array_Get_Item;                           // 0x001C(0x001C)(ZeroConstructor, IsPlainOldData, NoDestructor)
	int32                                         CallFunc_Array_Length_ReturnValue;                 // 0x0038(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue;                  // 0x003C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_3D[0x3];                                       // 0x003D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                CallFunc_Subtract_VectorVector_ReturnValue;        // 0x0040(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Divide_VectorInt_ReturnValue;             // 0x004C(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Add_VectorVector_ReturnValue;             // 0x0058(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Vector_Zero_ReturnValue;                  // 0x0064(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Divide_VectorInt_ReturnValue_1;           // 0x0070(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_7C[0x4];                                       // 0x007C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FBox>                           CallFunc_GetIslandWorldBoundingBoxes_ReturnValue;  // 0x0080(0x0010)(ReferenceParm)
};
static_assert(alignof(GM_SinglePlayer_C_DebugDrawIslandBounds) == 0x000008, "Wrong alignment on GM_SinglePlayer_C_DebugDrawIslandBounds");
static_assert(sizeof(GM_SinglePlayer_C_DebugDrawIslandBounds) == 0x000090, "Wrong size on GM_SinglePlayer_C_DebugDrawIslandBounds");
static_assert(offsetof(GM_SinglePlayer_C_DebugDrawIslandBounds, IslandBoundingBoxes) == 0x000000, "Member 'GM_SinglePlayer_C_DebugDrawIslandBounds::IslandBoundingBoxes' has a wrong offset!");
static_assert(offsetof(GM_SinglePlayer_C_DebugDrawIslandBounds, Temp_int_Array_Index_Variable) == 0x000010, "Member 'GM_SinglePlayer_C_DebugDrawIslandBounds::Temp_int_Array_Index_Variable' has a wrong offset!");
static_assert(offsetof(GM_SinglePlayer_C_DebugDrawIslandBounds, Temp_int_Loop_Counter_Variable) == 0x000014, "Member 'GM_SinglePlayer_C_DebugDrawIslandBounds::Temp_int_Loop_Counter_Variable' has a wrong offset!");
static_assert(offsetof(GM_SinglePlayer_C_DebugDrawIslandBounds, CallFunc_Add_IntInt_ReturnValue) == 0x000018, "Member 'GM_SinglePlayer_C_DebugDrawIslandBounds::CallFunc_Add_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(GM_SinglePlayer_C_DebugDrawIslandBounds, CallFunc_Array_Get_Item) == 0x00001C, "Member 'GM_SinglePlayer_C_DebugDrawIslandBounds::CallFunc_Array_Get_Item' has a wrong offset!");
static_assert(offsetof(GM_SinglePlayer_C_DebugDrawIslandBounds, CallFunc_Array_Length_ReturnValue) == 0x000038, "Member 'GM_SinglePlayer_C_DebugDrawIslandBounds::CallFunc_Array_Length_ReturnValue' has a wrong offset!");
static_assert(offsetof(GM_SinglePlayer_C_DebugDrawIslandBounds, CallFunc_Less_IntInt_ReturnValue) == 0x00003C, "Member 'GM_SinglePlayer_C_DebugDrawIslandBounds::CallFunc_Less_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(GM_SinglePlayer_C_DebugDrawIslandBounds, CallFunc_Subtract_VectorVector_ReturnValue) == 0x000040, "Member 'GM_SinglePlayer_C_DebugDrawIslandBounds::CallFunc_Subtract_VectorVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(GM_SinglePlayer_C_DebugDrawIslandBounds, CallFunc_Divide_VectorInt_ReturnValue) == 0x00004C, "Member 'GM_SinglePlayer_C_DebugDrawIslandBounds::CallFunc_Divide_VectorInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(GM_SinglePlayer_C_DebugDrawIslandBounds, CallFunc_Add_VectorVector_ReturnValue) == 0x000058, "Member 'GM_SinglePlayer_C_DebugDrawIslandBounds::CallFunc_Add_VectorVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(GM_SinglePlayer_C_DebugDrawIslandBounds, CallFunc_Vector_Zero_ReturnValue) == 0x000064, "Member 'GM_SinglePlayer_C_DebugDrawIslandBounds::CallFunc_Vector_Zero_ReturnValue' has a wrong offset!");
static_assert(offsetof(GM_SinglePlayer_C_DebugDrawIslandBounds, CallFunc_Divide_VectorInt_ReturnValue_1) == 0x000070, "Member 'GM_SinglePlayer_C_DebugDrawIslandBounds::CallFunc_Divide_VectorInt_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(GM_SinglePlayer_C_DebugDrawIslandBounds, CallFunc_GetIslandWorldBoundingBoxes_ReturnValue) == 0x000080, "Member 'GM_SinglePlayer_C_DebugDrawIslandBounds::CallFunc_GetIslandWorldBoundingBoxes_ReturnValue' has a wrong offset!");

// Function GM_SinglePlayer.GM_SinglePlayer_C.RegisterCyberActorWithBehavior
// 0x0010 (0x0010 - 0x0000)
struct GM_SinglePlayer_C_RegisterCyberActorWithBehavior final
{
public:
	class AActor*                                 Actor;                                             // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Add_ReturnValue;                    // 0x0008(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Array_Contains_ReturnValue;               // 0x000C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Not_PreBool_ReturnValue;                  // 0x000D(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(GM_SinglePlayer_C_RegisterCyberActorWithBehavior) == 0x000008, "Wrong alignment on GM_SinglePlayer_C_RegisterCyberActorWithBehavior");
static_assert(sizeof(GM_SinglePlayer_C_RegisterCyberActorWithBehavior) == 0x000010, "Wrong size on GM_SinglePlayer_C_RegisterCyberActorWithBehavior");
static_assert(offsetof(GM_SinglePlayer_C_RegisterCyberActorWithBehavior, Actor) == 0x000000, "Member 'GM_SinglePlayer_C_RegisterCyberActorWithBehavior::Actor' has a wrong offset!");
static_assert(offsetof(GM_SinglePlayer_C_RegisterCyberActorWithBehavior, CallFunc_Array_Add_ReturnValue) == 0x000008, "Member 'GM_SinglePlayer_C_RegisterCyberActorWithBehavior::CallFunc_Array_Add_ReturnValue' has a wrong offset!");
static_assert(offsetof(GM_SinglePlayer_C_RegisterCyberActorWithBehavior, CallFunc_Array_Contains_ReturnValue) == 0x00000C, "Member 'GM_SinglePlayer_C_RegisterCyberActorWithBehavior::CallFunc_Array_Contains_ReturnValue' has a wrong offset!");
static_assert(offsetof(GM_SinglePlayer_C_RegisterCyberActorWithBehavior, CallFunc_Not_PreBool_ReturnValue) == 0x00000D, "Member 'GM_SinglePlayer_C_RegisterCyberActorWithBehavior::CallFunc_Not_PreBool_ReturnValue' has a wrong offset!");

// Function GM_SinglePlayer.GM_SinglePlayer_C.UnregisterCyberActorWithBehavior
// 0x0010 (0x0010 - 0x0000)
struct GM_SinglePlayer_C_UnregisterCyberActorWithBehavior final
{
public:
	class AActor*                                 Actor;                                             // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Array_RemoveItem_ReturnValue;             // 0x0008(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(GM_SinglePlayer_C_UnregisterCyberActorWithBehavior) == 0x000008, "Wrong alignment on GM_SinglePlayer_C_UnregisterCyberActorWithBehavior");
static_assert(sizeof(GM_SinglePlayer_C_UnregisterCyberActorWithBehavior) == 0x000010, "Wrong size on GM_SinglePlayer_C_UnregisterCyberActorWithBehavior");
static_assert(offsetof(GM_SinglePlayer_C_UnregisterCyberActorWithBehavior, Actor) == 0x000000, "Member 'GM_SinglePlayer_C_UnregisterCyberActorWithBehavior::Actor' has a wrong offset!");
static_assert(offsetof(GM_SinglePlayer_C_UnregisterCyberActorWithBehavior, CallFunc_Array_RemoveItem_ReturnValue) == 0x000008, "Member 'GM_SinglePlayer_C_UnregisterCyberActorWithBehavior::CallFunc_Array_RemoveItem_ReturnValue' has a wrong offset!");

// Function GM_SinglePlayer.GM_SinglePlayer_C.GetCyberActorsInSphere
// 0x0078 (0x0078 - 0x0000)
struct GM_SinglePlayer_C_GetCyberActorsInSphere final
{
public:
	struct FVector                                Location;                                          // 0x0000(0x000C)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Radius;                                            // 0x000C(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TArray<class AActor*>                         Result;                                            // 0x0010(0x0010)(Parm, OutParm)
	class AActor*                                 CurrentActor;                                      // 0x0020(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TArray<class AActor*>                         ActorsInSphere;                                    // 0x0028(0x0010)(Edit, BlueprintVisible, DisableEditOnTemplate)
	float                                         RadiusSquared;                                     // 0x0038(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Square_ReturnValue;                       // 0x003C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Array_Index_Variable;                     // 0x0040(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Loop_Counter_Variable;                    // 0x0044(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_K2_GetActorLocation_ReturnValue;          // 0x0048(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue;                   // 0x0054(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Add_ReturnValue;                    // 0x0058(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Vector_DistanceSquared_ReturnValue;       // 0x005C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 CallFunc_Array_Get_Item;                           // 0x0060(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_LessEqual_FloatFloat_ReturnValue;         // 0x0068(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_69[0x3];                                       // 0x0069(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Array_Length_ReturnValue;                 // 0x006C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue;                  // 0x0070(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(GM_SinglePlayer_C_GetCyberActorsInSphere) == 0x000008, "Wrong alignment on GM_SinglePlayer_C_GetCyberActorsInSphere");
static_assert(sizeof(GM_SinglePlayer_C_GetCyberActorsInSphere) == 0x000078, "Wrong size on GM_SinglePlayer_C_GetCyberActorsInSphere");
static_assert(offsetof(GM_SinglePlayer_C_GetCyberActorsInSphere, Location) == 0x000000, "Member 'GM_SinglePlayer_C_GetCyberActorsInSphere::Location' has a wrong offset!");
static_assert(offsetof(GM_SinglePlayer_C_GetCyberActorsInSphere, Radius) == 0x00000C, "Member 'GM_SinglePlayer_C_GetCyberActorsInSphere::Radius' has a wrong offset!");
static_assert(offsetof(GM_SinglePlayer_C_GetCyberActorsInSphere, Result) == 0x000010, "Member 'GM_SinglePlayer_C_GetCyberActorsInSphere::Result' has a wrong offset!");
static_assert(offsetof(GM_SinglePlayer_C_GetCyberActorsInSphere, CurrentActor) == 0x000020, "Member 'GM_SinglePlayer_C_GetCyberActorsInSphere::CurrentActor' has a wrong offset!");
static_assert(offsetof(GM_SinglePlayer_C_GetCyberActorsInSphere, ActorsInSphere) == 0x000028, "Member 'GM_SinglePlayer_C_GetCyberActorsInSphere::ActorsInSphere' has a wrong offset!");
static_assert(offsetof(GM_SinglePlayer_C_GetCyberActorsInSphere, RadiusSquared) == 0x000038, "Member 'GM_SinglePlayer_C_GetCyberActorsInSphere::RadiusSquared' has a wrong offset!");
static_assert(offsetof(GM_SinglePlayer_C_GetCyberActorsInSphere, CallFunc_Square_ReturnValue) == 0x00003C, "Member 'GM_SinglePlayer_C_GetCyberActorsInSphere::CallFunc_Square_ReturnValue' has a wrong offset!");
static_assert(offsetof(GM_SinglePlayer_C_GetCyberActorsInSphere, Temp_int_Array_Index_Variable) == 0x000040, "Member 'GM_SinglePlayer_C_GetCyberActorsInSphere::Temp_int_Array_Index_Variable' has a wrong offset!");
static_assert(offsetof(GM_SinglePlayer_C_GetCyberActorsInSphere, Temp_int_Loop_Counter_Variable) == 0x000044, "Member 'GM_SinglePlayer_C_GetCyberActorsInSphere::Temp_int_Loop_Counter_Variable' has a wrong offset!");
static_assert(offsetof(GM_SinglePlayer_C_GetCyberActorsInSphere, CallFunc_K2_GetActorLocation_ReturnValue) == 0x000048, "Member 'GM_SinglePlayer_C_GetCyberActorsInSphere::CallFunc_K2_GetActorLocation_ReturnValue' has a wrong offset!");
static_assert(offsetof(GM_SinglePlayer_C_GetCyberActorsInSphere, CallFunc_Add_IntInt_ReturnValue) == 0x000054, "Member 'GM_SinglePlayer_C_GetCyberActorsInSphere::CallFunc_Add_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(GM_SinglePlayer_C_GetCyberActorsInSphere, CallFunc_Array_Add_ReturnValue) == 0x000058, "Member 'GM_SinglePlayer_C_GetCyberActorsInSphere::CallFunc_Array_Add_ReturnValue' has a wrong offset!");
static_assert(offsetof(GM_SinglePlayer_C_GetCyberActorsInSphere, CallFunc_Vector_DistanceSquared_ReturnValue) == 0x00005C, "Member 'GM_SinglePlayer_C_GetCyberActorsInSphere::CallFunc_Vector_DistanceSquared_ReturnValue' has a wrong offset!");
static_assert(offsetof(GM_SinglePlayer_C_GetCyberActorsInSphere, CallFunc_Array_Get_Item) == 0x000060, "Member 'GM_SinglePlayer_C_GetCyberActorsInSphere::CallFunc_Array_Get_Item' has a wrong offset!");
static_assert(offsetof(GM_SinglePlayer_C_GetCyberActorsInSphere, CallFunc_LessEqual_FloatFloat_ReturnValue) == 0x000068, "Member 'GM_SinglePlayer_C_GetCyberActorsInSphere::CallFunc_LessEqual_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(GM_SinglePlayer_C_GetCyberActorsInSphere, CallFunc_Array_Length_ReturnValue) == 0x00006C, "Member 'GM_SinglePlayer_C_GetCyberActorsInSphere::CallFunc_Array_Length_ReturnValue' has a wrong offset!");
static_assert(offsetof(GM_SinglePlayer_C_GetCyberActorsInSphere, CallFunc_Less_IntInt_ReturnValue) == 0x000070, "Member 'GM_SinglePlayer_C_GetCyberActorsInSphere::CallFunc_Less_IntInt_ReturnValue' has a wrong offset!");

// Function GM_SinglePlayer.GM_SinglePlayer_C.AddManagedDebrisFragment
// 0x0048 (0x0048 - 0x0000)
struct GM_SinglePlayer_C_AddManagedDebrisFragment final
{
public:
	class UStaticMeshComponent*                   DebrisFragment;                                    // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         ExpireTimestamp;                                   // 0x0008(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x000C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_D[0x3];                                        // 0x000D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Array_LastIndex_ReturnValue;              // 0x0010(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Length_ReturnValue;                 // 0x0014(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Greater_IntInt_ReturnValue;               // 0x0018(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_19[0x3];                                       // 0x0019(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_Add_FloatFloat_ReturnValue;               // 0x001C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_FMax_ReturnValue;                         // 0x0020(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_K2_IsTimerActiveHandle_ReturnValue;       // 0x0024(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_25[0x3];                                       // 0x0025(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FSTRUCT_DebrisFragmentInstance         K2Node_MakeStruct_STRUCT_DebrisFragmentInstance;   // 0x0028(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, ContainsInstancedReference, HasGetValueTypeHash)
	bool                                          CallFunc_Not_PreBool_ReturnValue;                  // 0x0038(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_39[0x3];                                       // 0x0039(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_GetGameTimeInSeconds_ReturnValue;         // 0x003C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Add_FloatFloat_ReturnValue_1;             // 0x0040(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Add_ReturnValue;                    // 0x0044(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(GM_SinglePlayer_C_AddManagedDebrisFragment) == 0x000008, "Wrong alignment on GM_SinglePlayer_C_AddManagedDebrisFragment");
static_assert(sizeof(GM_SinglePlayer_C_AddManagedDebrisFragment) == 0x000048, "Wrong size on GM_SinglePlayer_C_AddManagedDebrisFragment");
static_assert(offsetof(GM_SinglePlayer_C_AddManagedDebrisFragment, DebrisFragment) == 0x000000, "Member 'GM_SinglePlayer_C_AddManagedDebrisFragment::DebrisFragment' has a wrong offset!");
static_assert(offsetof(GM_SinglePlayer_C_AddManagedDebrisFragment, ExpireTimestamp) == 0x000008, "Member 'GM_SinglePlayer_C_AddManagedDebrisFragment::ExpireTimestamp' has a wrong offset!");
static_assert(offsetof(GM_SinglePlayer_C_AddManagedDebrisFragment, CallFunc_IsValid_ReturnValue) == 0x00000C, "Member 'GM_SinglePlayer_C_AddManagedDebrisFragment::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(GM_SinglePlayer_C_AddManagedDebrisFragment, CallFunc_Array_LastIndex_ReturnValue) == 0x000010, "Member 'GM_SinglePlayer_C_AddManagedDebrisFragment::CallFunc_Array_LastIndex_ReturnValue' has a wrong offset!");
static_assert(offsetof(GM_SinglePlayer_C_AddManagedDebrisFragment, CallFunc_Array_Length_ReturnValue) == 0x000014, "Member 'GM_SinglePlayer_C_AddManagedDebrisFragment::CallFunc_Array_Length_ReturnValue' has a wrong offset!");
static_assert(offsetof(GM_SinglePlayer_C_AddManagedDebrisFragment, CallFunc_Greater_IntInt_ReturnValue) == 0x000018, "Member 'GM_SinglePlayer_C_AddManagedDebrisFragment::CallFunc_Greater_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(GM_SinglePlayer_C_AddManagedDebrisFragment, CallFunc_Add_FloatFloat_ReturnValue) == 0x00001C, "Member 'GM_SinglePlayer_C_AddManagedDebrisFragment::CallFunc_Add_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(GM_SinglePlayer_C_AddManagedDebrisFragment, CallFunc_FMax_ReturnValue) == 0x000020, "Member 'GM_SinglePlayer_C_AddManagedDebrisFragment::CallFunc_FMax_ReturnValue' has a wrong offset!");
static_assert(offsetof(GM_SinglePlayer_C_AddManagedDebrisFragment, CallFunc_K2_IsTimerActiveHandle_ReturnValue) == 0x000024, "Member 'GM_SinglePlayer_C_AddManagedDebrisFragment::CallFunc_K2_IsTimerActiveHandle_ReturnValue' has a wrong offset!");
static_assert(offsetof(GM_SinglePlayer_C_AddManagedDebrisFragment, K2Node_MakeStruct_STRUCT_DebrisFragmentInstance) == 0x000028, "Member 'GM_SinglePlayer_C_AddManagedDebrisFragment::K2Node_MakeStruct_STRUCT_DebrisFragmentInstance' has a wrong offset!");
static_assert(offsetof(GM_SinglePlayer_C_AddManagedDebrisFragment, CallFunc_Not_PreBool_ReturnValue) == 0x000038, "Member 'GM_SinglePlayer_C_AddManagedDebrisFragment::CallFunc_Not_PreBool_ReturnValue' has a wrong offset!");
static_assert(offsetof(GM_SinglePlayer_C_AddManagedDebrisFragment, CallFunc_GetGameTimeInSeconds_ReturnValue) == 0x00003C, "Member 'GM_SinglePlayer_C_AddManagedDebrisFragment::CallFunc_GetGameTimeInSeconds_ReturnValue' has a wrong offset!");
static_assert(offsetof(GM_SinglePlayer_C_AddManagedDebrisFragment, CallFunc_Add_FloatFloat_ReturnValue_1) == 0x000040, "Member 'GM_SinglePlayer_C_AddManagedDebrisFragment::CallFunc_Add_FloatFloat_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(GM_SinglePlayer_C_AddManagedDebrisFragment, CallFunc_Array_Add_ReturnValue) == 0x000044, "Member 'GM_SinglePlayer_C_AddManagedDebrisFragment::CallFunc_Array_Add_ReturnValue' has a wrong offset!");

// Function GM_SinglePlayer.GM_SinglePlayer_C.TryStartManagedDebrisFragmentTick
// 0x0038 (0x0038 - 0x0000)
struct GM_SinglePlayer_C_TryStartManagedDebrisFragmentTick final
{
public:
	float                                         DelayTime;                                         // 0x0000(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_GetGameTimeInSeconds_ReturnValue;         // 0x0004(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Length_ReturnValue;                 // 0x0008(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Greater_IntInt_ReturnValue;               // 0x000C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_D[0x3];                                        // 0x000D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_Subtract_FloatFloat_ReturnValue;          // 0x0010(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_FMax_ReturnValue;                         // 0x0014(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0018(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_19[0x3];                                       // 0x0019(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	TDelegate<void()>                             K2Node_CreateDelegate_OutputDelegate;              // 0x001C(0x0010)(ZeroConstructor, NoDestructor)
	uint8                                         Pad_2C[0x4];                                       // 0x002C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTimerHandle                           CallFunc_K2_SetTimerDelegate_ReturnValue;          // 0x0030(0x0008)(NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(GM_SinglePlayer_C_TryStartManagedDebrisFragmentTick) == 0x000008, "Wrong alignment on GM_SinglePlayer_C_TryStartManagedDebrisFragmentTick");
static_assert(sizeof(GM_SinglePlayer_C_TryStartManagedDebrisFragmentTick) == 0x000038, "Wrong size on GM_SinglePlayer_C_TryStartManagedDebrisFragmentTick");
static_assert(offsetof(GM_SinglePlayer_C_TryStartManagedDebrisFragmentTick, DelayTime) == 0x000000, "Member 'GM_SinglePlayer_C_TryStartManagedDebrisFragmentTick::DelayTime' has a wrong offset!");
static_assert(offsetof(GM_SinglePlayer_C_TryStartManagedDebrisFragmentTick, CallFunc_GetGameTimeInSeconds_ReturnValue) == 0x000004, "Member 'GM_SinglePlayer_C_TryStartManagedDebrisFragmentTick::CallFunc_GetGameTimeInSeconds_ReturnValue' has a wrong offset!");
static_assert(offsetof(GM_SinglePlayer_C_TryStartManagedDebrisFragmentTick, CallFunc_Array_Length_ReturnValue) == 0x000008, "Member 'GM_SinglePlayer_C_TryStartManagedDebrisFragmentTick::CallFunc_Array_Length_ReturnValue' has a wrong offset!");
static_assert(offsetof(GM_SinglePlayer_C_TryStartManagedDebrisFragmentTick, CallFunc_Greater_IntInt_ReturnValue) == 0x00000C, "Member 'GM_SinglePlayer_C_TryStartManagedDebrisFragmentTick::CallFunc_Greater_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(GM_SinglePlayer_C_TryStartManagedDebrisFragmentTick, CallFunc_Subtract_FloatFloat_ReturnValue) == 0x000010, "Member 'GM_SinglePlayer_C_TryStartManagedDebrisFragmentTick::CallFunc_Subtract_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(GM_SinglePlayer_C_TryStartManagedDebrisFragmentTick, CallFunc_FMax_ReturnValue) == 0x000014, "Member 'GM_SinglePlayer_C_TryStartManagedDebrisFragmentTick::CallFunc_FMax_ReturnValue' has a wrong offset!");
static_assert(offsetof(GM_SinglePlayer_C_TryStartManagedDebrisFragmentTick, CallFunc_IsValid_ReturnValue) == 0x000018, "Member 'GM_SinglePlayer_C_TryStartManagedDebrisFragmentTick::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(GM_SinglePlayer_C_TryStartManagedDebrisFragmentTick, K2Node_CreateDelegate_OutputDelegate) == 0x00001C, "Member 'GM_SinglePlayer_C_TryStartManagedDebrisFragmentTick::K2Node_CreateDelegate_OutputDelegate' has a wrong offset!");
static_assert(offsetof(GM_SinglePlayer_C_TryStartManagedDebrisFragmentTick, CallFunc_K2_SetTimerDelegate_ReturnValue) == 0x000030, "Member 'GM_SinglePlayer_C_TryStartManagedDebrisFragmentTick::CallFunc_K2_SetTimerDelegate_ReturnValue' has a wrong offset!");

// Function GM_SinglePlayer.GM_SinglePlayer_C.OnTickDebrisFragmentCleanup
// 0x0028 (0x0028 - 0x0000)
struct GM_SinglePlayer_C_OnTickDebrisFragmentCleanup final
{
public:
	class UStaticMeshComponent*                   DebrisFragment;                                    // 0x0000(0x0008)(Edit, BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0008(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FSTRUCT_DebrisFragmentInstance         CallFunc_Array_Get_Item;                           // 0x0010(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, ContainsInstancedReference, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Length_ReturnValue;                 // 0x0020(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Greater_IntInt_ReturnValue;               // 0x0024(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(GM_SinglePlayer_C_OnTickDebrisFragmentCleanup) == 0x000008, "Wrong alignment on GM_SinglePlayer_C_OnTickDebrisFragmentCleanup");
static_assert(sizeof(GM_SinglePlayer_C_OnTickDebrisFragmentCleanup) == 0x000028, "Wrong size on GM_SinglePlayer_C_OnTickDebrisFragmentCleanup");
static_assert(offsetof(GM_SinglePlayer_C_OnTickDebrisFragmentCleanup, DebrisFragment) == 0x000000, "Member 'GM_SinglePlayer_C_OnTickDebrisFragmentCleanup::DebrisFragment' has a wrong offset!");
static_assert(offsetof(GM_SinglePlayer_C_OnTickDebrisFragmentCleanup, CallFunc_IsValid_ReturnValue) == 0x000008, "Member 'GM_SinglePlayer_C_OnTickDebrisFragmentCleanup::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(GM_SinglePlayer_C_OnTickDebrisFragmentCleanup, CallFunc_Array_Get_Item) == 0x000010, "Member 'GM_SinglePlayer_C_OnTickDebrisFragmentCleanup::CallFunc_Array_Get_Item' has a wrong offset!");
static_assert(offsetof(GM_SinglePlayer_C_OnTickDebrisFragmentCleanup, CallFunc_Array_Length_ReturnValue) == 0x000020, "Member 'GM_SinglePlayer_C_OnTickDebrisFragmentCleanup::CallFunc_Array_Length_ReturnValue' has a wrong offset!");
static_assert(offsetof(GM_SinglePlayer_C_OnTickDebrisFragmentCleanup, CallFunc_Greater_IntInt_ReturnValue) == 0x000024, "Member 'GM_SinglePlayer_C_OnTickDebrisFragmentCleanup::CallFunc_Greater_IntInt_ReturnValue' has a wrong offset!");

}

