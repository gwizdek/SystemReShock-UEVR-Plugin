#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: INTERACT_SecurityCamera

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "CoreUObject_structs.hpp"
#include "INTERACT_DestructibleBase_classes.hpp"
#include "ENUM_DetectionState_structs.hpp"


namespace SDK
{

// BlueprintGeneratedClass INTERACT_SecurityCamera.INTERACT_SecurityCamera_C
// 0x01A0 (0x04E8 - 0x0348)
class AINTERACT_SecurityCamera_C final : public AINTERACT_DestructibleBase_C
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame_INTERACT_SecurityCamera_C;          // 0x0348(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	class UCOMP_EnemySensingComponent_C*          COMP_EnemySensingComponent;                        // 0x0350(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UCOMP_EnemyDetection_C*                 COMP_EnemyDetection;                               // 0x0358(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UCOMP_VoxelAudio_C*                     ServoAudio;                                        // 0x0360(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UArrowComponent*                        Arrow;                                             // 0x0368(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UCOMP_VoxelCullable_C*                  COMP_VoxelCullable;                                // 0x0370(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UCOMP_ScannableObject_C*                COMP_ScannableObject;                              // 0x0378(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USphereComponent*                       ScanShape;                                         // 0x0380(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USphereComponent*                       TargetShape;                                       // 0x0388(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USpotLightComponent*                    SpotLight;                                         // 0x0390(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USkeletalMeshComponent*                 SkeletalMesh;                                      // 0x0398(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	int32                                         SecurityValue;                                     // 0x03A0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         EyeScanMinRange;                                   // 0x03A4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         EyeScanMaxRange;                                   // 0x03A8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         EyeScanDuration;                                   // 0x03AC(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Tilt;                                              // 0x03B0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Rotation;                                          // 0x03B4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         LastScanTimestamp;                                 // 0x03B8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CurrentScanDuration;                               // 0x03BC(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                LastScanLocation;                                  // 0x03C0(0x000C)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_3CC[0x4];                                      // 0x03CC(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTimerHandle                           CheckPhysicsTimerHandle;                           // 0x03D0(0x0008)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	TSoftObjectPtr<class USoundCue>               ServoCue;                                          // 0x03D8(0x0028)(Edit, BlueprintVisible, DisableEditOnInstance, HasGetValueTypeHash)
	TSoftObjectPtr<class USoundCue>               SpottedCue;                                        // 0x0400(0x0028)(Edit, BlueprintVisible, DisableEditOnInstance, HasGetValueTypeHash)
	TSoftObjectPtr<class USoundCue>               LostCue;                                           // 0x0428(0x0028)(Edit, BlueprintVisible, DisableEditOnInstance, HasGetValueTypeHash)
	TSoftObjectPtr<class USoundCue>               DestroyCue;                                        // 0x0450(0x0028)(Edit, BlueprintVisible, DisableEditOnInstance, HasGetValueTypeHash)
	struct FTimerHandle                           AlertNearbyTimerHandle;                            // 0x0478(0x0008)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	struct FTimerHandle                           AwarenessTimerHandle;                              // 0x0480(0x0008)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	float                                         AlertDelayTime;                                    // 0x0488(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_48C[0x4];                                      // 0x048C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TSoftObjectPtr<class UNiagaraSystem>          ScanFX;                                            // 0x0490(0x0028)(Edit, BlueprintVisible, DisableEditOnInstance, HasGetValueTypeHash)
	TSoftObjectPtr<class UNiagaraSystem>          DeathFX;                                           // 0x04B8(0x0028)(Edit, BlueprintVisible, DisableEditOnInstance, HasGetValueTypeHash)
	bool                                          IsCameraAware;                                     // 0x04E0(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          IsCameraRotating;                                  // 0x04E1(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)

public:
	void ExecuteUbergraph_INTERACT_SecurityCamera(int32 EntryPoint);
	void BndEvt__INTERACT_SentryTurret_HostileBase_COMP_EnemyDetection_K2Node_ComponentBoundEvent_2_OnDetectionStateChanged__DelegateSignature(class APAWN_SystemShockCharacter_C* Character, const struct FVector& EventLocation, ENUM_DetectionState NewState, ENUM_DetectionState OldState);
	void BndEvt__INTERACT_SentryTurret_HostileBase_COMP_EnemySensingComponent_K2Node_ComponentBoundEvent_1_OnHearPawn__DelegateSignature(class APAWN_SystemShockCharacter_C* Pawn, const struct FVector& Location, float Loudness);
	void BndEvt__INTERACT_SentryTurret_HostileBase_COMP_EnemySensingComponent_K2Node_ComponentBoundEvent_0_OnSeePawn__DelegateSignature(class APAWN_SystemShockCharacter_C* Pawn, const struct FVector& Location);
	void ReceiveTick(float DeltaSeconds);
	void BndEvt__COMP_VoxelCullable_K2Node_ComponentBoundEvent_0_CullableVisibilitySignature__DelegateSignature(bool bVisibleState);
	void OnLoaded_4C2C4C564E0DC948B0D6B7848445A4D6(class UObject* Loaded);
	void UserConstructionScript();
	void InitializeCameraState();
	void InitializeSensingComponent();
	void InitializeRotationPreview();
	void OnDetectionStateChanged(class APAWN_SystemShockCharacter_C* Character, const struct FVector& EventLocation, ENUM_DetectionState DetectionState);
	void UpdateLookDirection();
	void GetRandomScanLocation(class APAWN_Hacker_Simple_C* PlayerHacker, struct FVector* Result);
	void GetTargetShape(class UPrimitiveComponent* CursorPrimitive, class UShapeComponent** ShapeComponent);
	void GetCameraLookTargetLocation(int32 DetectRange, struct FVector* LookTargetLocation);
	void LowerStationSecurity();
	void EVENT_TryDisablePhysics();
	void UpdateServoNoise(float DeltaTime);
	void UpdateVisibilityState(bool VisibilityState);
	void UpdateMeshComponentTicks(bool State);
	void TrySetActorTickEnabled(bool State, bool* Result);
	void TryAlertNearbyEnemies();
	void TryStartAlertTimer(float DelayTime, bool* Result);
	void TrySetSecurityCameraIsAware(bool State, bool* Result);
	void EVENT_OnTryMakeUnawareTick();
	void ReceiveBeginPlay();
	void UpdateDeathSettings(bool DuringBeginPlay, bool* Result);
	void OnDeath(class AActor* SourceActor, bool* Result);
	void CanHackDestructible(class APAWN_SystemShockCharacter_C* SourceCharacter, bool* Result);

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"INTERACT_SecurityCamera_C">();
	}
	static class AINTERACT_SecurityCamera_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<AINTERACT_SecurityCamera_C>();
	}
};
static_assert(alignof(AINTERACT_SecurityCamera_C) == 0x000008, "Wrong alignment on AINTERACT_SecurityCamera_C");
static_assert(sizeof(AINTERACT_SecurityCamera_C) == 0x0004E8, "Wrong size on AINTERACT_SecurityCamera_C");
static_assert(offsetof(AINTERACT_SecurityCamera_C, UberGraphFrame_INTERACT_SecurityCamera_C) == 0x000348, "Member 'AINTERACT_SecurityCamera_C::UberGraphFrame_INTERACT_SecurityCamera_C' has a wrong offset!");
static_assert(offsetof(AINTERACT_SecurityCamera_C, COMP_EnemySensingComponent) == 0x000350, "Member 'AINTERACT_SecurityCamera_C::COMP_EnemySensingComponent' has a wrong offset!");
static_assert(offsetof(AINTERACT_SecurityCamera_C, COMP_EnemyDetection) == 0x000358, "Member 'AINTERACT_SecurityCamera_C::COMP_EnemyDetection' has a wrong offset!");
static_assert(offsetof(AINTERACT_SecurityCamera_C, ServoAudio) == 0x000360, "Member 'AINTERACT_SecurityCamera_C::ServoAudio' has a wrong offset!");
static_assert(offsetof(AINTERACT_SecurityCamera_C, Arrow) == 0x000368, "Member 'AINTERACT_SecurityCamera_C::Arrow' has a wrong offset!");
static_assert(offsetof(AINTERACT_SecurityCamera_C, COMP_VoxelCullable) == 0x000370, "Member 'AINTERACT_SecurityCamera_C::COMP_VoxelCullable' has a wrong offset!");
static_assert(offsetof(AINTERACT_SecurityCamera_C, COMP_ScannableObject) == 0x000378, "Member 'AINTERACT_SecurityCamera_C::COMP_ScannableObject' has a wrong offset!");
static_assert(offsetof(AINTERACT_SecurityCamera_C, ScanShape) == 0x000380, "Member 'AINTERACT_SecurityCamera_C::ScanShape' has a wrong offset!");
static_assert(offsetof(AINTERACT_SecurityCamera_C, TargetShape) == 0x000388, "Member 'AINTERACT_SecurityCamera_C::TargetShape' has a wrong offset!");
static_assert(offsetof(AINTERACT_SecurityCamera_C, SpotLight) == 0x000390, "Member 'AINTERACT_SecurityCamera_C::SpotLight' has a wrong offset!");
static_assert(offsetof(AINTERACT_SecurityCamera_C, SkeletalMesh) == 0x000398, "Member 'AINTERACT_SecurityCamera_C::SkeletalMesh' has a wrong offset!");
static_assert(offsetof(AINTERACT_SecurityCamera_C, SecurityValue) == 0x0003A0, "Member 'AINTERACT_SecurityCamera_C::SecurityValue' has a wrong offset!");
static_assert(offsetof(AINTERACT_SecurityCamera_C, EyeScanMinRange) == 0x0003A4, "Member 'AINTERACT_SecurityCamera_C::EyeScanMinRange' has a wrong offset!");
static_assert(offsetof(AINTERACT_SecurityCamera_C, EyeScanMaxRange) == 0x0003A8, "Member 'AINTERACT_SecurityCamera_C::EyeScanMaxRange' has a wrong offset!");
static_assert(offsetof(AINTERACT_SecurityCamera_C, EyeScanDuration) == 0x0003AC, "Member 'AINTERACT_SecurityCamera_C::EyeScanDuration' has a wrong offset!");
static_assert(offsetof(AINTERACT_SecurityCamera_C, Tilt) == 0x0003B0, "Member 'AINTERACT_SecurityCamera_C::Tilt' has a wrong offset!");
static_assert(offsetof(AINTERACT_SecurityCamera_C, Rotation) == 0x0003B4, "Member 'AINTERACT_SecurityCamera_C::Rotation' has a wrong offset!");
static_assert(offsetof(AINTERACT_SecurityCamera_C, LastScanTimestamp) == 0x0003B8, "Member 'AINTERACT_SecurityCamera_C::LastScanTimestamp' has a wrong offset!");
static_assert(offsetof(AINTERACT_SecurityCamera_C, CurrentScanDuration) == 0x0003BC, "Member 'AINTERACT_SecurityCamera_C::CurrentScanDuration' has a wrong offset!");
static_assert(offsetof(AINTERACT_SecurityCamera_C, LastScanLocation) == 0x0003C0, "Member 'AINTERACT_SecurityCamera_C::LastScanLocation' has a wrong offset!");
static_assert(offsetof(AINTERACT_SecurityCamera_C, CheckPhysicsTimerHandle) == 0x0003D0, "Member 'AINTERACT_SecurityCamera_C::CheckPhysicsTimerHandle' has a wrong offset!");
static_assert(offsetof(AINTERACT_SecurityCamera_C, ServoCue) == 0x0003D8, "Member 'AINTERACT_SecurityCamera_C::ServoCue' has a wrong offset!");
static_assert(offsetof(AINTERACT_SecurityCamera_C, SpottedCue) == 0x000400, "Member 'AINTERACT_SecurityCamera_C::SpottedCue' has a wrong offset!");
static_assert(offsetof(AINTERACT_SecurityCamera_C, LostCue) == 0x000428, "Member 'AINTERACT_SecurityCamera_C::LostCue' has a wrong offset!");
static_assert(offsetof(AINTERACT_SecurityCamera_C, DestroyCue) == 0x000450, "Member 'AINTERACT_SecurityCamera_C::DestroyCue' has a wrong offset!");
static_assert(offsetof(AINTERACT_SecurityCamera_C, AlertNearbyTimerHandle) == 0x000478, "Member 'AINTERACT_SecurityCamera_C::AlertNearbyTimerHandle' has a wrong offset!");
static_assert(offsetof(AINTERACT_SecurityCamera_C, AwarenessTimerHandle) == 0x000480, "Member 'AINTERACT_SecurityCamera_C::AwarenessTimerHandle' has a wrong offset!");
static_assert(offsetof(AINTERACT_SecurityCamera_C, AlertDelayTime) == 0x000488, "Member 'AINTERACT_SecurityCamera_C::AlertDelayTime' has a wrong offset!");
static_assert(offsetof(AINTERACT_SecurityCamera_C, ScanFX) == 0x000490, "Member 'AINTERACT_SecurityCamera_C::ScanFX' has a wrong offset!");
static_assert(offsetof(AINTERACT_SecurityCamera_C, DeathFX) == 0x0004B8, "Member 'AINTERACT_SecurityCamera_C::DeathFX' has a wrong offset!");
static_assert(offsetof(AINTERACT_SecurityCamera_C, IsCameraAware) == 0x0004E0, "Member 'AINTERACT_SecurityCamera_C::IsCameraAware' has a wrong offset!");
static_assert(offsetof(AINTERACT_SecurityCamera_C, IsCameraRotating) == 0x0004E1, "Member 'AINTERACT_SecurityCamera_C::IsCameraRotating' has a wrong offset!");

}

