#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: WIDGET_SplashScreen_Title

#include "Basic.hpp"

#include "SlateCore_structs.hpp"
#include "ENUM_MenuNavigationInput_structs.hpp"


namespace SDK::Params
{

// Function WIDGET_SplashScreen_Title.WIDGET_SplashScreen_Title_C.ExecuteUbergraph_WIDGET_SplashScreen_Title
// 0x01D0 (0x01D0 - 0x0000)
struct WIDGET_SplashScreen_Title_C_ExecuteUbergraph_WIDGET_SplashScreen_Title final
{
public:
	int32                                         EntryPoint;                                        // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 K2Node_ComponentBoundEvent_Message;                // 0x0008(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	bool                                          K2Node_SwitchString_CmpSuccess;                    // 0x0018(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_19[0x7];                                       // 0x0019(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   CallFunc_GetEmptyText_ReturnValue;                 // 0x0020(0x0018)()
	class UWIDGET_MenuBase_C*                     K2Node_ComponentBoundEvent_Menu_5;                 // 0x0038(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FText                                   CallFunc_GetMenuLabel_Page;                        // 0x0040(0x0018)()
	class UWIDGET_MenuBase_C*                     K2Node_ComponentBoundEvent_Menu_4;                 // 0x0058(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UWIDGET_MenuBase_C*                     K2Node_ComponentBoundEvent_Menu_3;                 // 0x0060(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FText                                   CallFunc_GetMenuLabel_Page_1;                      // 0x0068(0x0018)()
	class UWIDGET_MenuBase_C*                     K2Node_ComponentBoundEvent_Menu_2;                 // 0x0080(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UWIDGET_MenuBase_C*                     K2Node_ComponentBoundEvent_SubMenu_1;              // 0x0088(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UWIDGET_MenuBase_C*                     K2Node_ComponentBoundEvent_SubMenu;                // 0x0090(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FText                                   CallFunc_GetMenuLabel_Page_2;                      // 0x0098(0x0018)()
	class FText                                   CallFunc_GetEmptyText_ReturnValue_1;               // 0x00B0(0x0018)()
	class FText                                   CallFunc_GetEmptyText_ReturnValue_2;               // 0x00C8(0x0018)()
	class FText                                   CallFunc_GetEmptyText_ReturnValue_3;               // 0x00E0(0x0018)()
	class UWIDGET_MenuBase_C*                     K2Node_ComponentBoundEvent_Menu_1;                 // 0x00F8(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UWIDGET_MenuBase_C*                     K2Node_ComponentBoundEvent_Menu;                   // 0x0100(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FText                                   CallFunc_GetMenuLabel_Page_3;                      // 0x0108(0x0018)()
	class FText                                   CallFunc_GetEmptyText_ReturnValue_4;               // 0x0120(0x0018)()
	class UGameInstance*                          CallFunc_GetGameInstance_ReturnValue;              // 0x0138(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UGI_SinglePlayer_C*                     K2Node_DynamicCast_AsGI_Single_Player;             // 0x0140(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0148(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0149(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Not_PreBool_ReturnValue;                  // 0x014A(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsMedicalDemo_Result;                     // 0x014B(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FGeometry                              K2Node_Event_MyGeometry;                           // 0x014C(0x0038)(IsPlainOldData, NoDestructor)
	float                                         K2Node_Event_InDeltaTime;                          // 0x0184(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class APlayerController*                      CallFunc_GetPlayerController_ReturnValue;          // 0x0188(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TDelegate<void(bool IsUsingGamepad)>          K2Node_CreateDelegate_OutputDelegate;              // 0x0190(0x0010)(ZeroConstructor, NoDestructor)
	class ACON_Hacker_C*                          K2Node_DynamicCast_AsCON_Hacker;                   // 0x01A0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess_1;                     // 0x01A8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_1A9[0x7];                                      // 0x01A9(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UUMGSequencePlayer*                     CallFunc_PlayAnimation_ReturnValue;                // 0x01B0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TDelegate<void()>                             K2Node_CreateDelegate_OutputDelegate_1;            // 0x01B8(0x0010)(ZeroConstructor, NoDestructor)
	class APlayerController*                      CallFunc_GetPlayerController_ReturnValue_1;        // 0x01C8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(WIDGET_SplashScreen_Title_C_ExecuteUbergraph_WIDGET_SplashScreen_Title) == 0x000008, "Wrong alignment on WIDGET_SplashScreen_Title_C_ExecuteUbergraph_WIDGET_SplashScreen_Title");
static_assert(sizeof(WIDGET_SplashScreen_Title_C_ExecuteUbergraph_WIDGET_SplashScreen_Title) == 0x0001D0, "Wrong size on WIDGET_SplashScreen_Title_C_ExecuteUbergraph_WIDGET_SplashScreen_Title");
static_assert(offsetof(WIDGET_SplashScreen_Title_C_ExecuteUbergraph_WIDGET_SplashScreen_Title, EntryPoint) == 0x000000, "Member 'WIDGET_SplashScreen_Title_C_ExecuteUbergraph_WIDGET_SplashScreen_Title::EntryPoint' has a wrong offset!");
static_assert(offsetof(WIDGET_SplashScreen_Title_C_ExecuteUbergraph_WIDGET_SplashScreen_Title, K2Node_ComponentBoundEvent_Message) == 0x000008, "Member 'WIDGET_SplashScreen_Title_C_ExecuteUbergraph_WIDGET_SplashScreen_Title::K2Node_ComponentBoundEvent_Message' has a wrong offset!");
static_assert(offsetof(WIDGET_SplashScreen_Title_C_ExecuteUbergraph_WIDGET_SplashScreen_Title, K2Node_SwitchString_CmpSuccess) == 0x000018, "Member 'WIDGET_SplashScreen_Title_C_ExecuteUbergraph_WIDGET_SplashScreen_Title::K2Node_SwitchString_CmpSuccess' has a wrong offset!");
static_assert(offsetof(WIDGET_SplashScreen_Title_C_ExecuteUbergraph_WIDGET_SplashScreen_Title, CallFunc_GetEmptyText_ReturnValue) == 0x000020, "Member 'WIDGET_SplashScreen_Title_C_ExecuteUbergraph_WIDGET_SplashScreen_Title::CallFunc_GetEmptyText_ReturnValue' has a wrong offset!");
static_assert(offsetof(WIDGET_SplashScreen_Title_C_ExecuteUbergraph_WIDGET_SplashScreen_Title, K2Node_ComponentBoundEvent_Menu_5) == 0x000038, "Member 'WIDGET_SplashScreen_Title_C_ExecuteUbergraph_WIDGET_SplashScreen_Title::K2Node_ComponentBoundEvent_Menu_5' has a wrong offset!");
static_assert(offsetof(WIDGET_SplashScreen_Title_C_ExecuteUbergraph_WIDGET_SplashScreen_Title, CallFunc_GetMenuLabel_Page) == 0x000040, "Member 'WIDGET_SplashScreen_Title_C_ExecuteUbergraph_WIDGET_SplashScreen_Title::CallFunc_GetMenuLabel_Page' has a wrong offset!");
static_assert(offsetof(WIDGET_SplashScreen_Title_C_ExecuteUbergraph_WIDGET_SplashScreen_Title, K2Node_ComponentBoundEvent_Menu_4) == 0x000058, "Member 'WIDGET_SplashScreen_Title_C_ExecuteUbergraph_WIDGET_SplashScreen_Title::K2Node_ComponentBoundEvent_Menu_4' has a wrong offset!");
static_assert(offsetof(WIDGET_SplashScreen_Title_C_ExecuteUbergraph_WIDGET_SplashScreen_Title, K2Node_ComponentBoundEvent_Menu_3) == 0x000060, "Member 'WIDGET_SplashScreen_Title_C_ExecuteUbergraph_WIDGET_SplashScreen_Title::K2Node_ComponentBoundEvent_Menu_3' has a wrong offset!");
static_assert(offsetof(WIDGET_SplashScreen_Title_C_ExecuteUbergraph_WIDGET_SplashScreen_Title, CallFunc_GetMenuLabel_Page_1) == 0x000068, "Member 'WIDGET_SplashScreen_Title_C_ExecuteUbergraph_WIDGET_SplashScreen_Title::CallFunc_GetMenuLabel_Page_1' has a wrong offset!");
static_assert(offsetof(WIDGET_SplashScreen_Title_C_ExecuteUbergraph_WIDGET_SplashScreen_Title, K2Node_ComponentBoundEvent_Menu_2) == 0x000080, "Member 'WIDGET_SplashScreen_Title_C_ExecuteUbergraph_WIDGET_SplashScreen_Title::K2Node_ComponentBoundEvent_Menu_2' has a wrong offset!");
static_assert(offsetof(WIDGET_SplashScreen_Title_C_ExecuteUbergraph_WIDGET_SplashScreen_Title, K2Node_ComponentBoundEvent_SubMenu_1) == 0x000088, "Member 'WIDGET_SplashScreen_Title_C_ExecuteUbergraph_WIDGET_SplashScreen_Title::K2Node_ComponentBoundEvent_SubMenu_1' has a wrong offset!");
static_assert(offsetof(WIDGET_SplashScreen_Title_C_ExecuteUbergraph_WIDGET_SplashScreen_Title, K2Node_ComponentBoundEvent_SubMenu) == 0x000090, "Member 'WIDGET_SplashScreen_Title_C_ExecuteUbergraph_WIDGET_SplashScreen_Title::K2Node_ComponentBoundEvent_SubMenu' has a wrong offset!");
static_assert(offsetof(WIDGET_SplashScreen_Title_C_ExecuteUbergraph_WIDGET_SplashScreen_Title, CallFunc_GetMenuLabel_Page_2) == 0x000098, "Member 'WIDGET_SplashScreen_Title_C_ExecuteUbergraph_WIDGET_SplashScreen_Title::CallFunc_GetMenuLabel_Page_2' has a wrong offset!");
static_assert(offsetof(WIDGET_SplashScreen_Title_C_ExecuteUbergraph_WIDGET_SplashScreen_Title, CallFunc_GetEmptyText_ReturnValue_1) == 0x0000B0, "Member 'WIDGET_SplashScreen_Title_C_ExecuteUbergraph_WIDGET_SplashScreen_Title::CallFunc_GetEmptyText_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(WIDGET_SplashScreen_Title_C_ExecuteUbergraph_WIDGET_SplashScreen_Title, CallFunc_GetEmptyText_ReturnValue_2) == 0x0000C8, "Member 'WIDGET_SplashScreen_Title_C_ExecuteUbergraph_WIDGET_SplashScreen_Title::CallFunc_GetEmptyText_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(WIDGET_SplashScreen_Title_C_ExecuteUbergraph_WIDGET_SplashScreen_Title, CallFunc_GetEmptyText_ReturnValue_3) == 0x0000E0, "Member 'WIDGET_SplashScreen_Title_C_ExecuteUbergraph_WIDGET_SplashScreen_Title::CallFunc_GetEmptyText_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(WIDGET_SplashScreen_Title_C_ExecuteUbergraph_WIDGET_SplashScreen_Title, K2Node_ComponentBoundEvent_Menu_1) == 0x0000F8, "Member 'WIDGET_SplashScreen_Title_C_ExecuteUbergraph_WIDGET_SplashScreen_Title::K2Node_ComponentBoundEvent_Menu_1' has a wrong offset!");
static_assert(offsetof(WIDGET_SplashScreen_Title_C_ExecuteUbergraph_WIDGET_SplashScreen_Title, K2Node_ComponentBoundEvent_Menu) == 0x000100, "Member 'WIDGET_SplashScreen_Title_C_ExecuteUbergraph_WIDGET_SplashScreen_Title::K2Node_ComponentBoundEvent_Menu' has a wrong offset!");
static_assert(offsetof(WIDGET_SplashScreen_Title_C_ExecuteUbergraph_WIDGET_SplashScreen_Title, CallFunc_GetMenuLabel_Page_3) == 0x000108, "Member 'WIDGET_SplashScreen_Title_C_ExecuteUbergraph_WIDGET_SplashScreen_Title::CallFunc_GetMenuLabel_Page_3' has a wrong offset!");
static_assert(offsetof(WIDGET_SplashScreen_Title_C_ExecuteUbergraph_WIDGET_SplashScreen_Title, CallFunc_GetEmptyText_ReturnValue_4) == 0x000120, "Member 'WIDGET_SplashScreen_Title_C_ExecuteUbergraph_WIDGET_SplashScreen_Title::CallFunc_GetEmptyText_ReturnValue_4' has a wrong offset!");
static_assert(offsetof(WIDGET_SplashScreen_Title_C_ExecuteUbergraph_WIDGET_SplashScreen_Title, CallFunc_GetGameInstance_ReturnValue) == 0x000138, "Member 'WIDGET_SplashScreen_Title_C_ExecuteUbergraph_WIDGET_SplashScreen_Title::CallFunc_GetGameInstance_ReturnValue' has a wrong offset!");
static_assert(offsetof(WIDGET_SplashScreen_Title_C_ExecuteUbergraph_WIDGET_SplashScreen_Title, K2Node_DynamicCast_AsGI_Single_Player) == 0x000140, "Member 'WIDGET_SplashScreen_Title_C_ExecuteUbergraph_WIDGET_SplashScreen_Title::K2Node_DynamicCast_AsGI_Single_Player' has a wrong offset!");
static_assert(offsetof(WIDGET_SplashScreen_Title_C_ExecuteUbergraph_WIDGET_SplashScreen_Title, K2Node_DynamicCast_bSuccess) == 0x000148, "Member 'WIDGET_SplashScreen_Title_C_ExecuteUbergraph_WIDGET_SplashScreen_Title::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(WIDGET_SplashScreen_Title_C_ExecuteUbergraph_WIDGET_SplashScreen_Title, CallFunc_IsValid_ReturnValue) == 0x000149, "Member 'WIDGET_SplashScreen_Title_C_ExecuteUbergraph_WIDGET_SplashScreen_Title::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(WIDGET_SplashScreen_Title_C_ExecuteUbergraph_WIDGET_SplashScreen_Title, CallFunc_Not_PreBool_ReturnValue) == 0x00014A, "Member 'WIDGET_SplashScreen_Title_C_ExecuteUbergraph_WIDGET_SplashScreen_Title::CallFunc_Not_PreBool_ReturnValue' has a wrong offset!");
static_assert(offsetof(WIDGET_SplashScreen_Title_C_ExecuteUbergraph_WIDGET_SplashScreen_Title, CallFunc_IsMedicalDemo_Result) == 0x00014B, "Member 'WIDGET_SplashScreen_Title_C_ExecuteUbergraph_WIDGET_SplashScreen_Title::CallFunc_IsMedicalDemo_Result' has a wrong offset!");
static_assert(offsetof(WIDGET_SplashScreen_Title_C_ExecuteUbergraph_WIDGET_SplashScreen_Title, K2Node_Event_MyGeometry) == 0x00014C, "Member 'WIDGET_SplashScreen_Title_C_ExecuteUbergraph_WIDGET_SplashScreen_Title::K2Node_Event_MyGeometry' has a wrong offset!");
static_assert(offsetof(WIDGET_SplashScreen_Title_C_ExecuteUbergraph_WIDGET_SplashScreen_Title, K2Node_Event_InDeltaTime) == 0x000184, "Member 'WIDGET_SplashScreen_Title_C_ExecuteUbergraph_WIDGET_SplashScreen_Title::K2Node_Event_InDeltaTime' has a wrong offset!");
static_assert(offsetof(WIDGET_SplashScreen_Title_C_ExecuteUbergraph_WIDGET_SplashScreen_Title, CallFunc_GetPlayerController_ReturnValue) == 0x000188, "Member 'WIDGET_SplashScreen_Title_C_ExecuteUbergraph_WIDGET_SplashScreen_Title::CallFunc_GetPlayerController_ReturnValue' has a wrong offset!");
static_assert(offsetof(WIDGET_SplashScreen_Title_C_ExecuteUbergraph_WIDGET_SplashScreen_Title, K2Node_CreateDelegate_OutputDelegate) == 0x000190, "Member 'WIDGET_SplashScreen_Title_C_ExecuteUbergraph_WIDGET_SplashScreen_Title::K2Node_CreateDelegate_OutputDelegate' has a wrong offset!");
static_assert(offsetof(WIDGET_SplashScreen_Title_C_ExecuteUbergraph_WIDGET_SplashScreen_Title, K2Node_DynamicCast_AsCON_Hacker) == 0x0001A0, "Member 'WIDGET_SplashScreen_Title_C_ExecuteUbergraph_WIDGET_SplashScreen_Title::K2Node_DynamicCast_AsCON_Hacker' has a wrong offset!");
static_assert(offsetof(WIDGET_SplashScreen_Title_C_ExecuteUbergraph_WIDGET_SplashScreen_Title, K2Node_DynamicCast_bSuccess_1) == 0x0001A8, "Member 'WIDGET_SplashScreen_Title_C_ExecuteUbergraph_WIDGET_SplashScreen_Title::K2Node_DynamicCast_bSuccess_1' has a wrong offset!");
static_assert(offsetof(WIDGET_SplashScreen_Title_C_ExecuteUbergraph_WIDGET_SplashScreen_Title, CallFunc_PlayAnimation_ReturnValue) == 0x0001B0, "Member 'WIDGET_SplashScreen_Title_C_ExecuteUbergraph_WIDGET_SplashScreen_Title::CallFunc_PlayAnimation_ReturnValue' has a wrong offset!");
static_assert(offsetof(WIDGET_SplashScreen_Title_C_ExecuteUbergraph_WIDGET_SplashScreen_Title, K2Node_CreateDelegate_OutputDelegate_1) == 0x0001B8, "Member 'WIDGET_SplashScreen_Title_C_ExecuteUbergraph_WIDGET_SplashScreen_Title::K2Node_CreateDelegate_OutputDelegate_1' has a wrong offset!");
static_assert(offsetof(WIDGET_SplashScreen_Title_C_ExecuteUbergraph_WIDGET_SplashScreen_Title, CallFunc_GetPlayerController_ReturnValue_1) == 0x0001C8, "Member 'WIDGET_SplashScreen_Title_C_ExecuteUbergraph_WIDGET_SplashScreen_Title::CallFunc_GetPlayerController_ReturnValue_1' has a wrong offset!");

// Function WIDGET_SplashScreen_Title.WIDGET_SplashScreen_Title_C.Tick
// 0x003C (0x003C - 0x0000)
struct WIDGET_SplashScreen_Title_C_Tick final
{
public:
	struct FGeometry                              MyGeometry;                                        // 0x0000(0x0038)(BlueprintVisible, BlueprintReadOnly, Parm, IsPlainOldData, NoDestructor)
	float                                         InDeltaTime;                                       // 0x0038(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(WIDGET_SplashScreen_Title_C_Tick) == 0x000004, "Wrong alignment on WIDGET_SplashScreen_Title_C_Tick");
static_assert(sizeof(WIDGET_SplashScreen_Title_C_Tick) == 0x00003C, "Wrong size on WIDGET_SplashScreen_Title_C_Tick");
static_assert(offsetof(WIDGET_SplashScreen_Title_C_Tick, MyGeometry) == 0x000000, "Member 'WIDGET_SplashScreen_Title_C_Tick::MyGeometry' has a wrong offset!");
static_assert(offsetof(WIDGET_SplashScreen_Title_C_Tick, InDeltaTime) == 0x000038, "Member 'WIDGET_SplashScreen_Title_C_Tick::InDeltaTime' has a wrong offset!");

// Function WIDGET_SplashScreen_Title.WIDGET_SplashScreen_Title_C.BndEvt__WIDGET_SplashScreen_Title_WIDGET_DifficultyConfigScreen_K2Node_ComponentBoundEvent_11_OnMenuClosed__DelegateSignature
// 0x0008 (0x0008 - 0x0000)
struct WIDGET_SplashScreen_Title_C_BndEvt__WIDGET_SplashScreen_Title_WIDGET_DifficultyConfigScreen_K2Node_ComponentBoundEvent_11_OnMenuClosed__DelegateSignature final
{
public:
	class UWIDGET_MenuBase_C*                     Menu;                                              // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(WIDGET_SplashScreen_Title_C_BndEvt__WIDGET_SplashScreen_Title_WIDGET_DifficultyConfigScreen_K2Node_ComponentBoundEvent_11_OnMenuClosed__DelegateSignature) == 0x000008, "Wrong alignment on WIDGET_SplashScreen_Title_C_BndEvt__WIDGET_SplashScreen_Title_WIDGET_DifficultyConfigScreen_K2Node_ComponentBoundEvent_11_OnMenuClosed__DelegateSignature");
static_assert(sizeof(WIDGET_SplashScreen_Title_C_BndEvt__WIDGET_SplashScreen_Title_WIDGET_DifficultyConfigScreen_K2Node_ComponentBoundEvent_11_OnMenuClosed__DelegateSignature) == 0x000008, "Wrong size on WIDGET_SplashScreen_Title_C_BndEvt__WIDGET_SplashScreen_Title_WIDGET_DifficultyConfigScreen_K2Node_ComponentBoundEvent_11_OnMenuClosed__DelegateSignature");
static_assert(offsetof(WIDGET_SplashScreen_Title_C_BndEvt__WIDGET_SplashScreen_Title_WIDGET_DifficultyConfigScreen_K2Node_ComponentBoundEvent_11_OnMenuClosed__DelegateSignature, Menu) == 0x000000, "Member 'WIDGET_SplashScreen_Title_C_BndEvt__WIDGET_SplashScreen_Title_WIDGET_DifficultyConfigScreen_K2Node_ComponentBoundEvent_11_OnMenuClosed__DelegateSignature::Menu' has a wrong offset!");

// Function WIDGET_SplashScreen_Title.WIDGET_SplashScreen_Title_C.BndEvt__WIDGET_SplashScreen_Title_WIDGET_DifficultyConfigScreen_K2Node_ComponentBoundEvent_10_OnMenuOpened__DelegateSignature
// 0x0008 (0x0008 - 0x0000)
struct WIDGET_SplashScreen_Title_C_BndEvt__WIDGET_SplashScreen_Title_WIDGET_DifficultyConfigScreen_K2Node_ComponentBoundEvent_10_OnMenuOpened__DelegateSignature final
{
public:
	class UWIDGET_MenuBase_C*                     Menu;                                              // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(WIDGET_SplashScreen_Title_C_BndEvt__WIDGET_SplashScreen_Title_WIDGET_DifficultyConfigScreen_K2Node_ComponentBoundEvent_10_OnMenuOpened__DelegateSignature) == 0x000008, "Wrong alignment on WIDGET_SplashScreen_Title_C_BndEvt__WIDGET_SplashScreen_Title_WIDGET_DifficultyConfigScreen_K2Node_ComponentBoundEvent_10_OnMenuOpened__DelegateSignature");
static_assert(sizeof(WIDGET_SplashScreen_Title_C_BndEvt__WIDGET_SplashScreen_Title_WIDGET_DifficultyConfigScreen_K2Node_ComponentBoundEvent_10_OnMenuOpened__DelegateSignature) == 0x000008, "Wrong size on WIDGET_SplashScreen_Title_C_BndEvt__WIDGET_SplashScreen_Title_WIDGET_DifficultyConfigScreen_K2Node_ComponentBoundEvent_10_OnMenuOpened__DelegateSignature");
static_assert(offsetof(WIDGET_SplashScreen_Title_C_BndEvt__WIDGET_SplashScreen_Title_WIDGET_DifficultyConfigScreen_K2Node_ComponentBoundEvent_10_OnMenuOpened__DelegateSignature, Menu) == 0x000000, "Member 'WIDGET_SplashScreen_Title_C_BndEvt__WIDGET_SplashScreen_Title_WIDGET_DifficultyConfigScreen_K2Node_ComponentBoundEvent_10_OnMenuOpened__DelegateSignature::Menu' has a wrong offset!");

// Function WIDGET_SplashScreen_Title.WIDGET_SplashScreen_Title_C.BndEvt__WIDGET_SplashScreen_Title_WIDGET_OptionsScreen_K2Node_ComponentBoundEvent_9_OnSubMenuClosed__DelegateSignature
// 0x0008 (0x0008 - 0x0000)
struct WIDGET_SplashScreen_Title_C_BndEvt__WIDGET_SplashScreen_Title_WIDGET_OptionsScreen_K2Node_ComponentBoundEvent_9_OnSubMenuClosed__DelegateSignature final
{
public:
	class UWIDGET_MenuBase_C*                     SubMenu;                                           // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(WIDGET_SplashScreen_Title_C_BndEvt__WIDGET_SplashScreen_Title_WIDGET_OptionsScreen_K2Node_ComponentBoundEvent_9_OnSubMenuClosed__DelegateSignature) == 0x000008, "Wrong alignment on WIDGET_SplashScreen_Title_C_BndEvt__WIDGET_SplashScreen_Title_WIDGET_OptionsScreen_K2Node_ComponentBoundEvent_9_OnSubMenuClosed__DelegateSignature");
static_assert(sizeof(WIDGET_SplashScreen_Title_C_BndEvt__WIDGET_SplashScreen_Title_WIDGET_OptionsScreen_K2Node_ComponentBoundEvent_9_OnSubMenuClosed__DelegateSignature) == 0x000008, "Wrong size on WIDGET_SplashScreen_Title_C_BndEvt__WIDGET_SplashScreen_Title_WIDGET_OptionsScreen_K2Node_ComponentBoundEvent_9_OnSubMenuClosed__DelegateSignature");
static_assert(offsetof(WIDGET_SplashScreen_Title_C_BndEvt__WIDGET_SplashScreen_Title_WIDGET_OptionsScreen_K2Node_ComponentBoundEvent_9_OnSubMenuClosed__DelegateSignature, SubMenu) == 0x000000, "Member 'WIDGET_SplashScreen_Title_C_BndEvt__WIDGET_SplashScreen_Title_WIDGET_OptionsScreen_K2Node_ComponentBoundEvent_9_OnSubMenuClosed__DelegateSignature::SubMenu' has a wrong offset!");

// Function WIDGET_SplashScreen_Title.WIDGET_SplashScreen_Title_C.BndEvt__WIDGET_SplashScreen_Title_WIDGET_OptionsScreen_K2Node_ComponentBoundEvent_8_OnSubMenuOpened__DelegateSignature
// 0x0008 (0x0008 - 0x0000)
struct WIDGET_SplashScreen_Title_C_BndEvt__WIDGET_SplashScreen_Title_WIDGET_OptionsScreen_K2Node_ComponentBoundEvent_8_OnSubMenuOpened__DelegateSignature final
{
public:
	class UWIDGET_MenuBase_C*                     SubMenu;                                           // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(WIDGET_SplashScreen_Title_C_BndEvt__WIDGET_SplashScreen_Title_WIDGET_OptionsScreen_K2Node_ComponentBoundEvent_8_OnSubMenuOpened__DelegateSignature) == 0x000008, "Wrong alignment on WIDGET_SplashScreen_Title_C_BndEvt__WIDGET_SplashScreen_Title_WIDGET_OptionsScreen_K2Node_ComponentBoundEvent_8_OnSubMenuOpened__DelegateSignature");
static_assert(sizeof(WIDGET_SplashScreen_Title_C_BndEvt__WIDGET_SplashScreen_Title_WIDGET_OptionsScreen_K2Node_ComponentBoundEvent_8_OnSubMenuOpened__DelegateSignature) == 0x000008, "Wrong size on WIDGET_SplashScreen_Title_C_BndEvt__WIDGET_SplashScreen_Title_WIDGET_OptionsScreen_K2Node_ComponentBoundEvent_8_OnSubMenuOpened__DelegateSignature");
static_assert(offsetof(WIDGET_SplashScreen_Title_C_BndEvt__WIDGET_SplashScreen_Title_WIDGET_OptionsScreen_K2Node_ComponentBoundEvent_8_OnSubMenuOpened__DelegateSignature, SubMenu) == 0x000000, "Member 'WIDGET_SplashScreen_Title_C_BndEvt__WIDGET_SplashScreen_Title_WIDGET_OptionsScreen_K2Node_ComponentBoundEvent_8_OnSubMenuOpened__DelegateSignature::SubMenu' has a wrong offset!");

// Function WIDGET_SplashScreen_Title.WIDGET_SplashScreen_Title_C.BndEvt__WIDGET_SplashScreen_Title_WIDGET_OptionsScreen_K2Node_ComponentBoundEvent_7_OnMenuClosed__DelegateSignature
// 0x0008 (0x0008 - 0x0000)
struct WIDGET_SplashScreen_Title_C_BndEvt__WIDGET_SplashScreen_Title_WIDGET_OptionsScreen_K2Node_ComponentBoundEvent_7_OnMenuClosed__DelegateSignature final
{
public:
	class UWIDGET_MenuBase_C*                     Menu;                                              // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(WIDGET_SplashScreen_Title_C_BndEvt__WIDGET_SplashScreen_Title_WIDGET_OptionsScreen_K2Node_ComponentBoundEvent_7_OnMenuClosed__DelegateSignature) == 0x000008, "Wrong alignment on WIDGET_SplashScreen_Title_C_BndEvt__WIDGET_SplashScreen_Title_WIDGET_OptionsScreen_K2Node_ComponentBoundEvent_7_OnMenuClosed__DelegateSignature");
static_assert(sizeof(WIDGET_SplashScreen_Title_C_BndEvt__WIDGET_SplashScreen_Title_WIDGET_OptionsScreen_K2Node_ComponentBoundEvent_7_OnMenuClosed__DelegateSignature) == 0x000008, "Wrong size on WIDGET_SplashScreen_Title_C_BndEvt__WIDGET_SplashScreen_Title_WIDGET_OptionsScreen_K2Node_ComponentBoundEvent_7_OnMenuClosed__DelegateSignature");
static_assert(offsetof(WIDGET_SplashScreen_Title_C_BndEvt__WIDGET_SplashScreen_Title_WIDGET_OptionsScreen_K2Node_ComponentBoundEvent_7_OnMenuClosed__DelegateSignature, Menu) == 0x000000, "Member 'WIDGET_SplashScreen_Title_C_BndEvt__WIDGET_SplashScreen_Title_WIDGET_OptionsScreen_K2Node_ComponentBoundEvent_7_OnMenuClosed__DelegateSignature::Menu' has a wrong offset!");

// Function WIDGET_SplashScreen_Title.WIDGET_SplashScreen_Title_C.BndEvt__WIDGET_SplashScreen_Title_WIDGET_OptionsScreen_K2Node_ComponentBoundEvent_4_OnMenuOpened__DelegateSignature
// 0x0008 (0x0008 - 0x0000)
struct WIDGET_SplashScreen_Title_C_BndEvt__WIDGET_SplashScreen_Title_WIDGET_OptionsScreen_K2Node_ComponentBoundEvent_4_OnMenuOpened__DelegateSignature final
{
public:
	class UWIDGET_MenuBase_C*                     Menu;                                              // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(WIDGET_SplashScreen_Title_C_BndEvt__WIDGET_SplashScreen_Title_WIDGET_OptionsScreen_K2Node_ComponentBoundEvent_4_OnMenuOpened__DelegateSignature) == 0x000008, "Wrong alignment on WIDGET_SplashScreen_Title_C_BndEvt__WIDGET_SplashScreen_Title_WIDGET_OptionsScreen_K2Node_ComponentBoundEvent_4_OnMenuOpened__DelegateSignature");
static_assert(sizeof(WIDGET_SplashScreen_Title_C_BndEvt__WIDGET_SplashScreen_Title_WIDGET_OptionsScreen_K2Node_ComponentBoundEvent_4_OnMenuOpened__DelegateSignature) == 0x000008, "Wrong size on WIDGET_SplashScreen_Title_C_BndEvt__WIDGET_SplashScreen_Title_WIDGET_OptionsScreen_K2Node_ComponentBoundEvent_4_OnMenuOpened__DelegateSignature");
static_assert(offsetof(WIDGET_SplashScreen_Title_C_BndEvt__WIDGET_SplashScreen_Title_WIDGET_OptionsScreen_K2Node_ComponentBoundEvent_4_OnMenuOpened__DelegateSignature, Menu) == 0x000000, "Member 'WIDGET_SplashScreen_Title_C_BndEvt__WIDGET_SplashScreen_Title_WIDGET_OptionsScreen_K2Node_ComponentBoundEvent_4_OnMenuOpened__DelegateSignature::Menu' has a wrong offset!");

// Function WIDGET_SplashScreen_Title.WIDGET_SplashScreen_Title_C.BndEvt__WIDGET_SplashScreen_Title_WIDGET_SaveLoadMenu_K2Node_ComponentBoundEvent_1_OnMenuClosed__DelegateSignature
// 0x0008 (0x0008 - 0x0000)
struct WIDGET_SplashScreen_Title_C_BndEvt__WIDGET_SplashScreen_Title_WIDGET_SaveLoadMenu_K2Node_ComponentBoundEvent_1_OnMenuClosed__DelegateSignature final
{
public:
	class UWIDGET_MenuBase_C*                     Menu;                                              // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(WIDGET_SplashScreen_Title_C_BndEvt__WIDGET_SplashScreen_Title_WIDGET_SaveLoadMenu_K2Node_ComponentBoundEvent_1_OnMenuClosed__DelegateSignature) == 0x000008, "Wrong alignment on WIDGET_SplashScreen_Title_C_BndEvt__WIDGET_SplashScreen_Title_WIDGET_SaveLoadMenu_K2Node_ComponentBoundEvent_1_OnMenuClosed__DelegateSignature");
static_assert(sizeof(WIDGET_SplashScreen_Title_C_BndEvt__WIDGET_SplashScreen_Title_WIDGET_SaveLoadMenu_K2Node_ComponentBoundEvent_1_OnMenuClosed__DelegateSignature) == 0x000008, "Wrong size on WIDGET_SplashScreen_Title_C_BndEvt__WIDGET_SplashScreen_Title_WIDGET_SaveLoadMenu_K2Node_ComponentBoundEvent_1_OnMenuClosed__DelegateSignature");
static_assert(offsetof(WIDGET_SplashScreen_Title_C_BndEvt__WIDGET_SplashScreen_Title_WIDGET_SaveLoadMenu_K2Node_ComponentBoundEvent_1_OnMenuClosed__DelegateSignature, Menu) == 0x000000, "Member 'WIDGET_SplashScreen_Title_C_BndEvt__WIDGET_SplashScreen_Title_WIDGET_SaveLoadMenu_K2Node_ComponentBoundEvent_1_OnMenuClosed__DelegateSignature::Menu' has a wrong offset!");

// Function WIDGET_SplashScreen_Title.WIDGET_SplashScreen_Title_C.BndEvt__WIDGET_SplashScreen_Title_WIDGET_SaveLoadMenu_K2Node_ComponentBoundEvent_0_OnMenuOpened__DelegateSignature
// 0x0008 (0x0008 - 0x0000)
struct WIDGET_SplashScreen_Title_C_BndEvt__WIDGET_SplashScreen_Title_WIDGET_SaveLoadMenu_K2Node_ComponentBoundEvent_0_OnMenuOpened__DelegateSignature final
{
public:
	class UWIDGET_MenuBase_C*                     Menu;                                              // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(WIDGET_SplashScreen_Title_C_BndEvt__WIDGET_SplashScreen_Title_WIDGET_SaveLoadMenu_K2Node_ComponentBoundEvent_0_OnMenuOpened__DelegateSignature) == 0x000008, "Wrong alignment on WIDGET_SplashScreen_Title_C_BndEvt__WIDGET_SplashScreen_Title_WIDGET_SaveLoadMenu_K2Node_ComponentBoundEvent_0_OnMenuOpened__DelegateSignature");
static_assert(sizeof(WIDGET_SplashScreen_Title_C_BndEvt__WIDGET_SplashScreen_Title_WIDGET_SaveLoadMenu_K2Node_ComponentBoundEvent_0_OnMenuOpened__DelegateSignature) == 0x000008, "Wrong size on WIDGET_SplashScreen_Title_C_BndEvt__WIDGET_SplashScreen_Title_WIDGET_SaveLoadMenu_K2Node_ComponentBoundEvent_0_OnMenuOpened__DelegateSignature");
static_assert(offsetof(WIDGET_SplashScreen_Title_C_BndEvt__WIDGET_SplashScreen_Title_WIDGET_SaveLoadMenu_K2Node_ComponentBoundEvent_0_OnMenuOpened__DelegateSignature, Menu) == 0x000000, "Member 'WIDGET_SplashScreen_Title_C_BndEvt__WIDGET_SplashScreen_Title_WIDGET_SaveLoadMenu_K2Node_ComponentBoundEvent_0_OnMenuOpened__DelegateSignature::Menu' has a wrong offset!");

// Function WIDGET_SplashScreen_Title.WIDGET_SplashScreen_Title_C.BndEvt__WIDGET_SplashScreen_Title_WIDGET_MainMenu_SplashScreenList_K2Node_ComponentBoundEvent_6_OnMenuAction__DelegateSignature
// 0x0010 (0x0010 - 0x0000)
struct WIDGET_SplashScreen_Title_C_BndEvt__WIDGET_SplashScreen_Title_WIDGET_MainMenu_SplashScreenList_K2Node_ComponentBoundEvent_6_OnMenuAction__DelegateSignature final
{
public:
	class FString                                 Message;                                           // 0x0000(0x0010)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, HasGetValueTypeHash)
};
static_assert(alignof(WIDGET_SplashScreen_Title_C_BndEvt__WIDGET_SplashScreen_Title_WIDGET_MainMenu_SplashScreenList_K2Node_ComponentBoundEvent_6_OnMenuAction__DelegateSignature) == 0x000008, "Wrong alignment on WIDGET_SplashScreen_Title_C_BndEvt__WIDGET_SplashScreen_Title_WIDGET_MainMenu_SplashScreenList_K2Node_ComponentBoundEvent_6_OnMenuAction__DelegateSignature");
static_assert(sizeof(WIDGET_SplashScreen_Title_C_BndEvt__WIDGET_SplashScreen_Title_WIDGET_MainMenu_SplashScreenList_K2Node_ComponentBoundEvent_6_OnMenuAction__DelegateSignature) == 0x000010, "Wrong size on WIDGET_SplashScreen_Title_C_BndEvt__WIDGET_SplashScreen_Title_WIDGET_MainMenu_SplashScreenList_K2Node_ComponentBoundEvent_6_OnMenuAction__DelegateSignature");
static_assert(offsetof(WIDGET_SplashScreen_Title_C_BndEvt__WIDGET_SplashScreen_Title_WIDGET_MainMenu_SplashScreenList_K2Node_ComponentBoundEvent_6_OnMenuAction__DelegateSignature, Message) == 0x000000, "Member 'WIDGET_SplashScreen_Title_C_BndEvt__WIDGET_SplashScreen_Title_WIDGET_MainMenu_SplashScreenList_K2Node_ComponentBoundEvent_6_OnMenuAction__DelegateSignature::Message' has a wrong offset!");

// Function WIDGET_SplashScreen_Title.WIDGET_SplashScreen_Title_C.InvokeNavManager
// 0x0098 (0x0098 - 0x0000)
struct WIDGET_SplashScreen_Title_C_InvokeNavManager final
{
public:
	ENUM_MenuNavigationInput                      InputType;                                         // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          InputState;                                        // 0x0001(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_EqualEqual_ByteByte_ReturnValue;          // 0x0002(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_EqualEqual_ByteByte_ReturnValue_1;        // 0x0003(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Not_PreBool_ReturnValue;                  // 0x0004(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_EqualEqual_ByteByte_ReturnValue_2;        // 0x0005(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          K2Node_SwitchEnum_CmpSuccess;                      // 0x0006(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_7[0x1];                                        // 0x0007(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	TScriptInterface<class IBPI_MenuNavigationRecipient_C> K2Node_DynamicCast_AsBPI_Menu_Navigation_Recipient; // 0x0008(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0018(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_ReceiveNavAlt2_Result;                    // 0x0019(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_1A[0x6];                                       // 0x001A(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	TScriptInterface<class IBPI_MenuNavigationRecipient_C> K2Node_DynamicCast_AsBPI_Menu_Navigation_Recipient_1; // 0x0020(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          K2Node_DynamicCast_bSuccess_1;                     // 0x0030(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_ReceiveNavAlt1_Result;                    // 0x0031(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          K2Node_SwitchEnum_CmpSuccess_1;                    // 0x0032(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          K2Node_SwitchEnum_CmpSuccess_2;                    // 0x0033(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_34[0x4];                                       // 0x0034(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TScriptInterface<class IBPI_MenuNavigationRecipient_C> K2Node_DynamicCast_AsBPI_Menu_Navigation_Recipient_2; // 0x0038(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          K2Node_DynamicCast_bSuccess_2;                     // 0x0048(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_ReceiveNavUp_Result;                      // 0x0049(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_4A[0x6];                                       // 0x004A(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	TScriptInterface<class IBPI_MenuNavigationRecipient_C> K2Node_DynamicCast_AsBPI_Menu_Navigation_Recipient_3; // 0x0050(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          K2Node_DynamicCast_bSuccess_3;                     // 0x0060(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_ReceiveNavDown_Result;                    // 0x0061(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_62[0x6];                                       // 0x0062(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	TScriptInterface<class IBPI_MenuNavigationRecipient_C> K2Node_DynamicCast_AsBPI_Menu_Navigation_Recipient_4; // 0x0068(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          K2Node_DynamicCast_bSuccess_4;                     // 0x0078(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_ReceiveNavBack_Result;                    // 0x0079(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_7A[0x6];                                       // 0x007A(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	TScriptInterface<class IBPI_MenuNavigationRecipient_C> K2Node_DynamicCast_AsBPI_Menu_Navigation_Recipient_5; // 0x0080(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          K2Node_DynamicCast_bSuccess_5;                     // 0x0090(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_ReceiveNavAccept_Result;                  // 0x0091(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          K2Node_SwitchEnum_CmpSuccess_3;                    // 0x0092(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          K2Node_SwitchEnum_CmpSuccess_4;                    // 0x0093(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          K2Node_SwitchEnum_CmpSuccess_5;                    // 0x0094(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          K2Node_SwitchEnum_CmpSuccess_6;                    // 0x0095(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          K2Node_SwitchEnum_CmpSuccess_7;                    // 0x0096(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          K2Node_SwitchEnum_CmpSuccess_8;                    // 0x0097(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(WIDGET_SplashScreen_Title_C_InvokeNavManager) == 0x000008, "Wrong alignment on WIDGET_SplashScreen_Title_C_InvokeNavManager");
static_assert(sizeof(WIDGET_SplashScreen_Title_C_InvokeNavManager) == 0x000098, "Wrong size on WIDGET_SplashScreen_Title_C_InvokeNavManager");
static_assert(offsetof(WIDGET_SplashScreen_Title_C_InvokeNavManager, InputType) == 0x000000, "Member 'WIDGET_SplashScreen_Title_C_InvokeNavManager::InputType' has a wrong offset!");
static_assert(offsetof(WIDGET_SplashScreen_Title_C_InvokeNavManager, InputState) == 0x000001, "Member 'WIDGET_SplashScreen_Title_C_InvokeNavManager::InputState' has a wrong offset!");
static_assert(offsetof(WIDGET_SplashScreen_Title_C_InvokeNavManager, CallFunc_EqualEqual_ByteByte_ReturnValue) == 0x000002, "Member 'WIDGET_SplashScreen_Title_C_InvokeNavManager::CallFunc_EqualEqual_ByteByte_ReturnValue' has a wrong offset!");
static_assert(offsetof(WIDGET_SplashScreen_Title_C_InvokeNavManager, CallFunc_EqualEqual_ByteByte_ReturnValue_1) == 0x000003, "Member 'WIDGET_SplashScreen_Title_C_InvokeNavManager::CallFunc_EqualEqual_ByteByte_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(WIDGET_SplashScreen_Title_C_InvokeNavManager, CallFunc_Not_PreBool_ReturnValue) == 0x000004, "Member 'WIDGET_SplashScreen_Title_C_InvokeNavManager::CallFunc_Not_PreBool_ReturnValue' has a wrong offset!");
static_assert(offsetof(WIDGET_SplashScreen_Title_C_InvokeNavManager, CallFunc_EqualEqual_ByteByte_ReturnValue_2) == 0x000005, "Member 'WIDGET_SplashScreen_Title_C_InvokeNavManager::CallFunc_EqualEqual_ByteByte_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(WIDGET_SplashScreen_Title_C_InvokeNavManager, K2Node_SwitchEnum_CmpSuccess) == 0x000006, "Member 'WIDGET_SplashScreen_Title_C_InvokeNavManager::K2Node_SwitchEnum_CmpSuccess' has a wrong offset!");
static_assert(offsetof(WIDGET_SplashScreen_Title_C_InvokeNavManager, K2Node_DynamicCast_AsBPI_Menu_Navigation_Recipient) == 0x000008, "Member 'WIDGET_SplashScreen_Title_C_InvokeNavManager::K2Node_DynamicCast_AsBPI_Menu_Navigation_Recipient' has a wrong offset!");
static_assert(offsetof(WIDGET_SplashScreen_Title_C_InvokeNavManager, K2Node_DynamicCast_bSuccess) == 0x000018, "Member 'WIDGET_SplashScreen_Title_C_InvokeNavManager::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(WIDGET_SplashScreen_Title_C_InvokeNavManager, CallFunc_ReceiveNavAlt2_Result) == 0x000019, "Member 'WIDGET_SplashScreen_Title_C_InvokeNavManager::CallFunc_ReceiveNavAlt2_Result' has a wrong offset!");
static_assert(offsetof(WIDGET_SplashScreen_Title_C_InvokeNavManager, K2Node_DynamicCast_AsBPI_Menu_Navigation_Recipient_1) == 0x000020, "Member 'WIDGET_SplashScreen_Title_C_InvokeNavManager::K2Node_DynamicCast_AsBPI_Menu_Navigation_Recipient_1' has a wrong offset!");
static_assert(offsetof(WIDGET_SplashScreen_Title_C_InvokeNavManager, K2Node_DynamicCast_bSuccess_1) == 0x000030, "Member 'WIDGET_SplashScreen_Title_C_InvokeNavManager::K2Node_DynamicCast_bSuccess_1' has a wrong offset!");
static_assert(offsetof(WIDGET_SplashScreen_Title_C_InvokeNavManager, CallFunc_ReceiveNavAlt1_Result) == 0x000031, "Member 'WIDGET_SplashScreen_Title_C_InvokeNavManager::CallFunc_ReceiveNavAlt1_Result' has a wrong offset!");
static_assert(offsetof(WIDGET_SplashScreen_Title_C_InvokeNavManager, K2Node_SwitchEnum_CmpSuccess_1) == 0x000032, "Member 'WIDGET_SplashScreen_Title_C_InvokeNavManager::K2Node_SwitchEnum_CmpSuccess_1' has a wrong offset!");
static_assert(offsetof(WIDGET_SplashScreen_Title_C_InvokeNavManager, K2Node_SwitchEnum_CmpSuccess_2) == 0x000033, "Member 'WIDGET_SplashScreen_Title_C_InvokeNavManager::K2Node_SwitchEnum_CmpSuccess_2' has a wrong offset!");
static_assert(offsetof(WIDGET_SplashScreen_Title_C_InvokeNavManager, K2Node_DynamicCast_AsBPI_Menu_Navigation_Recipient_2) == 0x000038, "Member 'WIDGET_SplashScreen_Title_C_InvokeNavManager::K2Node_DynamicCast_AsBPI_Menu_Navigation_Recipient_2' has a wrong offset!");
static_assert(offsetof(WIDGET_SplashScreen_Title_C_InvokeNavManager, K2Node_DynamicCast_bSuccess_2) == 0x000048, "Member 'WIDGET_SplashScreen_Title_C_InvokeNavManager::K2Node_DynamicCast_bSuccess_2' has a wrong offset!");
static_assert(offsetof(WIDGET_SplashScreen_Title_C_InvokeNavManager, CallFunc_ReceiveNavUp_Result) == 0x000049, "Member 'WIDGET_SplashScreen_Title_C_InvokeNavManager::CallFunc_ReceiveNavUp_Result' has a wrong offset!");
static_assert(offsetof(WIDGET_SplashScreen_Title_C_InvokeNavManager, K2Node_DynamicCast_AsBPI_Menu_Navigation_Recipient_3) == 0x000050, "Member 'WIDGET_SplashScreen_Title_C_InvokeNavManager::K2Node_DynamicCast_AsBPI_Menu_Navigation_Recipient_3' has a wrong offset!");
static_assert(offsetof(WIDGET_SplashScreen_Title_C_InvokeNavManager, K2Node_DynamicCast_bSuccess_3) == 0x000060, "Member 'WIDGET_SplashScreen_Title_C_InvokeNavManager::K2Node_DynamicCast_bSuccess_3' has a wrong offset!");
static_assert(offsetof(WIDGET_SplashScreen_Title_C_InvokeNavManager, CallFunc_ReceiveNavDown_Result) == 0x000061, "Member 'WIDGET_SplashScreen_Title_C_InvokeNavManager::CallFunc_ReceiveNavDown_Result' has a wrong offset!");
static_assert(offsetof(WIDGET_SplashScreen_Title_C_InvokeNavManager, K2Node_DynamicCast_AsBPI_Menu_Navigation_Recipient_4) == 0x000068, "Member 'WIDGET_SplashScreen_Title_C_InvokeNavManager::K2Node_DynamicCast_AsBPI_Menu_Navigation_Recipient_4' has a wrong offset!");
static_assert(offsetof(WIDGET_SplashScreen_Title_C_InvokeNavManager, K2Node_DynamicCast_bSuccess_4) == 0x000078, "Member 'WIDGET_SplashScreen_Title_C_InvokeNavManager::K2Node_DynamicCast_bSuccess_4' has a wrong offset!");
static_assert(offsetof(WIDGET_SplashScreen_Title_C_InvokeNavManager, CallFunc_ReceiveNavBack_Result) == 0x000079, "Member 'WIDGET_SplashScreen_Title_C_InvokeNavManager::CallFunc_ReceiveNavBack_Result' has a wrong offset!");
static_assert(offsetof(WIDGET_SplashScreen_Title_C_InvokeNavManager, K2Node_DynamicCast_AsBPI_Menu_Navigation_Recipient_5) == 0x000080, "Member 'WIDGET_SplashScreen_Title_C_InvokeNavManager::K2Node_DynamicCast_AsBPI_Menu_Navigation_Recipient_5' has a wrong offset!");
static_assert(offsetof(WIDGET_SplashScreen_Title_C_InvokeNavManager, K2Node_DynamicCast_bSuccess_5) == 0x000090, "Member 'WIDGET_SplashScreen_Title_C_InvokeNavManager::K2Node_DynamicCast_bSuccess_5' has a wrong offset!");
static_assert(offsetof(WIDGET_SplashScreen_Title_C_InvokeNavManager, CallFunc_ReceiveNavAccept_Result) == 0x000091, "Member 'WIDGET_SplashScreen_Title_C_InvokeNavManager::CallFunc_ReceiveNavAccept_Result' has a wrong offset!");
static_assert(offsetof(WIDGET_SplashScreen_Title_C_InvokeNavManager, K2Node_SwitchEnum_CmpSuccess_3) == 0x000092, "Member 'WIDGET_SplashScreen_Title_C_InvokeNavManager::K2Node_SwitchEnum_CmpSuccess_3' has a wrong offset!");
static_assert(offsetof(WIDGET_SplashScreen_Title_C_InvokeNavManager, K2Node_SwitchEnum_CmpSuccess_4) == 0x000093, "Member 'WIDGET_SplashScreen_Title_C_InvokeNavManager::K2Node_SwitchEnum_CmpSuccess_4' has a wrong offset!");
static_assert(offsetof(WIDGET_SplashScreen_Title_C_InvokeNavManager, K2Node_SwitchEnum_CmpSuccess_5) == 0x000094, "Member 'WIDGET_SplashScreen_Title_C_InvokeNavManager::K2Node_SwitchEnum_CmpSuccess_5' has a wrong offset!");
static_assert(offsetof(WIDGET_SplashScreen_Title_C_InvokeNavManager, K2Node_SwitchEnum_CmpSuccess_6) == 0x000095, "Member 'WIDGET_SplashScreen_Title_C_InvokeNavManager::K2Node_SwitchEnum_CmpSuccess_6' has a wrong offset!");
static_assert(offsetof(WIDGET_SplashScreen_Title_C_InvokeNavManager, K2Node_SwitchEnum_CmpSuccess_7) == 0x000096, "Member 'WIDGET_SplashScreen_Title_C_InvokeNavManager::K2Node_SwitchEnum_CmpSuccess_7' has a wrong offset!");
static_assert(offsetof(WIDGET_SplashScreen_Title_C_InvokeNavManager, K2Node_SwitchEnum_CmpSuccess_8) == 0x000097, "Member 'WIDGET_SplashScreen_Title_C_InvokeNavManager::K2Node_SwitchEnum_CmpSuccess_8' has a wrong offset!");

// Function WIDGET_SplashScreen_Title.WIDGET_SplashScreen_Title_C.SetSelectedItem
// 0x0004 (0x0004 - 0x0000)
struct WIDGET_SplashScreen_Title_C_SetSelectedItem final
{
public:
	int32                                         SelectedIndex;                                     // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(WIDGET_SplashScreen_Title_C_SetSelectedItem) == 0x000004, "Wrong alignment on WIDGET_SplashScreen_Title_C_SetSelectedItem");
static_assert(sizeof(WIDGET_SplashScreen_Title_C_SetSelectedItem) == 0x000004, "Wrong size on WIDGET_SplashScreen_Title_C_SetSelectedItem");
static_assert(offsetof(WIDGET_SplashScreen_Title_C_SetSelectedItem, SelectedIndex) == 0x000000, "Member 'WIDGET_SplashScreen_Title_C_SetSelectedItem::SelectedIndex' has a wrong offset!");

// Function WIDGET_SplashScreen_Title.WIDGET_SplashScreen_Title_C.PlayPressAnyKeyAnimation
// 0x0018 (0x0018 - 0x0000)
struct WIDGET_SplashScreen_Title_C_PlayPressAnyKeyAnimation final
{
public:
	bool                                          CallFunc_IsAnimationPlaying_ReturnValue;           // 0x0000(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UUMGSequencePlayer*                     CallFunc_PlayAnimation_ReturnValue;                // 0x0008(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Not_PreBool_ReturnValue;                  // 0x0010(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(WIDGET_SplashScreen_Title_C_PlayPressAnyKeyAnimation) == 0x000008, "Wrong alignment on WIDGET_SplashScreen_Title_C_PlayPressAnyKeyAnimation");
static_assert(sizeof(WIDGET_SplashScreen_Title_C_PlayPressAnyKeyAnimation) == 0x000018, "Wrong size on WIDGET_SplashScreen_Title_C_PlayPressAnyKeyAnimation");
static_assert(offsetof(WIDGET_SplashScreen_Title_C_PlayPressAnyKeyAnimation, CallFunc_IsAnimationPlaying_ReturnValue) == 0x000000, "Member 'WIDGET_SplashScreen_Title_C_PlayPressAnyKeyAnimation::CallFunc_IsAnimationPlaying_ReturnValue' has a wrong offset!");
static_assert(offsetof(WIDGET_SplashScreen_Title_C_PlayPressAnyKeyAnimation, CallFunc_PlayAnimation_ReturnValue) == 0x000008, "Member 'WIDGET_SplashScreen_Title_C_PlayPressAnyKeyAnimation::CallFunc_PlayAnimation_ReturnValue' has a wrong offset!");
static_assert(offsetof(WIDGET_SplashScreen_Title_C_PlayPressAnyKeyAnimation, CallFunc_Not_PreBool_ReturnValue) == 0x000010, "Member 'WIDGET_SplashScreen_Title_C_PlayPressAnyKeyAnimation::CallFunc_Not_PreBool_ReturnValue' has a wrong offset!");

// Function WIDGET_SplashScreen_Title.WIDGET_SplashScreen_Title_C.ShowMainMenu
// 0x0040 (0x0040 - 0x0000)
struct WIDGET_SplashScreen_Title_C_ShowMainMenu final
{
public:
	class APlayerController*                      CallFunc_GetPlayerController_ReturnValue;          // 0x0000(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class ACON_Hacker_C*                          K2Node_DynamicCast_AsCON_Hacker;                   // 0x0008(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0010(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsUsingGamepad_Result;                    // 0x0011(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Not_PreBool_ReturnValue;                  // 0x0012(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_13[0x5];                                       // 0x0013(0x0005)(Fixing Size After Last Property [ Dumper-7 ])
	class APlayerController*                      CallFunc_GetPlayerController_ReturnValue_1;        // 0x0018(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class ACON_Hacker_C*                          K2Node_DynamicCast_AsCON_Hacker_1;                 // 0x0020(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess_1;                     // 0x0028(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsUsingGamepad_Result_1;                  // 0x0029(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_2A[0x6];                                       // 0x002A(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class UUMGSequencePlayer*                     CallFunc_PlayAnimation_ReturnValue;                // 0x0030(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Not_PreBool_ReturnValue_1;                // 0x0038(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(WIDGET_SplashScreen_Title_C_ShowMainMenu) == 0x000008, "Wrong alignment on WIDGET_SplashScreen_Title_C_ShowMainMenu");
static_assert(sizeof(WIDGET_SplashScreen_Title_C_ShowMainMenu) == 0x000040, "Wrong size on WIDGET_SplashScreen_Title_C_ShowMainMenu");
static_assert(offsetof(WIDGET_SplashScreen_Title_C_ShowMainMenu, CallFunc_GetPlayerController_ReturnValue) == 0x000000, "Member 'WIDGET_SplashScreen_Title_C_ShowMainMenu::CallFunc_GetPlayerController_ReturnValue' has a wrong offset!");
static_assert(offsetof(WIDGET_SplashScreen_Title_C_ShowMainMenu, K2Node_DynamicCast_AsCON_Hacker) == 0x000008, "Member 'WIDGET_SplashScreen_Title_C_ShowMainMenu::K2Node_DynamicCast_AsCON_Hacker' has a wrong offset!");
static_assert(offsetof(WIDGET_SplashScreen_Title_C_ShowMainMenu, K2Node_DynamicCast_bSuccess) == 0x000010, "Member 'WIDGET_SplashScreen_Title_C_ShowMainMenu::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(WIDGET_SplashScreen_Title_C_ShowMainMenu, CallFunc_IsUsingGamepad_Result) == 0x000011, "Member 'WIDGET_SplashScreen_Title_C_ShowMainMenu::CallFunc_IsUsingGamepad_Result' has a wrong offset!");
static_assert(offsetof(WIDGET_SplashScreen_Title_C_ShowMainMenu, CallFunc_Not_PreBool_ReturnValue) == 0x000012, "Member 'WIDGET_SplashScreen_Title_C_ShowMainMenu::CallFunc_Not_PreBool_ReturnValue' has a wrong offset!");
static_assert(offsetof(WIDGET_SplashScreen_Title_C_ShowMainMenu, CallFunc_GetPlayerController_ReturnValue_1) == 0x000018, "Member 'WIDGET_SplashScreen_Title_C_ShowMainMenu::CallFunc_GetPlayerController_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(WIDGET_SplashScreen_Title_C_ShowMainMenu, K2Node_DynamicCast_AsCON_Hacker_1) == 0x000020, "Member 'WIDGET_SplashScreen_Title_C_ShowMainMenu::K2Node_DynamicCast_AsCON_Hacker_1' has a wrong offset!");
static_assert(offsetof(WIDGET_SplashScreen_Title_C_ShowMainMenu, K2Node_DynamicCast_bSuccess_1) == 0x000028, "Member 'WIDGET_SplashScreen_Title_C_ShowMainMenu::K2Node_DynamicCast_bSuccess_1' has a wrong offset!");
static_assert(offsetof(WIDGET_SplashScreen_Title_C_ShowMainMenu, CallFunc_IsUsingGamepad_Result_1) == 0x000029, "Member 'WIDGET_SplashScreen_Title_C_ShowMainMenu::CallFunc_IsUsingGamepad_Result_1' has a wrong offset!");
static_assert(offsetof(WIDGET_SplashScreen_Title_C_ShowMainMenu, CallFunc_PlayAnimation_ReturnValue) == 0x000030, "Member 'WIDGET_SplashScreen_Title_C_ShowMainMenu::CallFunc_PlayAnimation_ReturnValue' has a wrong offset!");
static_assert(offsetof(WIDGET_SplashScreen_Title_C_ShowMainMenu, CallFunc_Not_PreBool_ReturnValue_1) == 0x000038, "Member 'WIDGET_SplashScreen_Title_C_ShowMainMenu::CallFunc_Not_PreBool_ReturnValue_1' has a wrong offset!");

// Function WIDGET_SplashScreen_Title.WIDGET_SplashScreen_Title_C.TryAnyKey
// 0x0020 (0x0020 - 0x0000)
struct WIDGET_SplashScreen_Title_C_TryAnyKey final
{
public:
	class FString                                 InputKey;                                          // 0x0000(0x0010)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, HasGetValueTypeHash)
	class UUMGSequencePlayer*                     CallFunc_PlayAnimation_ReturnValue;                // 0x0010(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_ByteByte_ReturnValue;          // 0x0018(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(WIDGET_SplashScreen_Title_C_TryAnyKey) == 0x000008, "Wrong alignment on WIDGET_SplashScreen_Title_C_TryAnyKey");
static_assert(sizeof(WIDGET_SplashScreen_Title_C_TryAnyKey) == 0x000020, "Wrong size on WIDGET_SplashScreen_Title_C_TryAnyKey");
static_assert(offsetof(WIDGET_SplashScreen_Title_C_TryAnyKey, InputKey) == 0x000000, "Member 'WIDGET_SplashScreen_Title_C_TryAnyKey::InputKey' has a wrong offset!");
static_assert(offsetof(WIDGET_SplashScreen_Title_C_TryAnyKey, CallFunc_PlayAnimation_ReturnValue) == 0x000010, "Member 'WIDGET_SplashScreen_Title_C_TryAnyKey::CallFunc_PlayAnimation_ReturnValue' has a wrong offset!");
static_assert(offsetof(WIDGET_SplashScreen_Title_C_TryAnyKey, CallFunc_EqualEqual_ByteByte_ReturnValue) == 0x000018, "Member 'WIDGET_SplashScreen_Title_C_TryAnyKey::CallFunc_EqualEqual_ByteByte_ReturnValue' has a wrong offset!");

// Function WIDGET_SplashScreen_Title.WIDGET_SplashScreen_Title_C.ToggleCursor
// 0x0050 (0x0050 - 0x0000)
struct WIDGET_SplashScreen_Title_C_ToggleCursor final
{
public:
	bool                                          CursorEnabled;                                     // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class APlayerController*                      CallFunc_GetPlayerController_ReturnValue;          // 0x0008(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class APlayerController*                      CallFunc_GetPlayerController_ReturnValue_1;        // 0x0010(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class APlayerController*                      CallFunc_GetPlayerController_ReturnValue_2;        // 0x0018(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class APlayerController*                      CallFunc_GetPlayerController_ReturnValue_3;        // 0x0020(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_GetViewportSize_SizeX;                    // 0x0028(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_GetViewportSize_SizeY;                    // 0x002C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Divide_IntInt_ReturnValue;                // 0x0030(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Divide_IntInt_ReturnValue_1;              // 0x0034(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class APlayerController*                      CallFunc_GetPlayerController_ReturnValue_4;        // 0x0038(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class APlayerController*                      CallFunc_GetPlayerController_ReturnValue_5;        // 0x0040(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class APlayerController*                      CallFunc_GetPlayerController_ReturnValue_6;        // 0x0048(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(WIDGET_SplashScreen_Title_C_ToggleCursor) == 0x000008, "Wrong alignment on WIDGET_SplashScreen_Title_C_ToggleCursor");
static_assert(sizeof(WIDGET_SplashScreen_Title_C_ToggleCursor) == 0x000050, "Wrong size on WIDGET_SplashScreen_Title_C_ToggleCursor");
static_assert(offsetof(WIDGET_SplashScreen_Title_C_ToggleCursor, CursorEnabled) == 0x000000, "Member 'WIDGET_SplashScreen_Title_C_ToggleCursor::CursorEnabled' has a wrong offset!");
static_assert(offsetof(WIDGET_SplashScreen_Title_C_ToggleCursor, CallFunc_GetPlayerController_ReturnValue) == 0x000008, "Member 'WIDGET_SplashScreen_Title_C_ToggleCursor::CallFunc_GetPlayerController_ReturnValue' has a wrong offset!");
static_assert(offsetof(WIDGET_SplashScreen_Title_C_ToggleCursor, CallFunc_GetPlayerController_ReturnValue_1) == 0x000010, "Member 'WIDGET_SplashScreen_Title_C_ToggleCursor::CallFunc_GetPlayerController_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(WIDGET_SplashScreen_Title_C_ToggleCursor, CallFunc_GetPlayerController_ReturnValue_2) == 0x000018, "Member 'WIDGET_SplashScreen_Title_C_ToggleCursor::CallFunc_GetPlayerController_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(WIDGET_SplashScreen_Title_C_ToggleCursor, CallFunc_GetPlayerController_ReturnValue_3) == 0x000020, "Member 'WIDGET_SplashScreen_Title_C_ToggleCursor::CallFunc_GetPlayerController_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(WIDGET_SplashScreen_Title_C_ToggleCursor, CallFunc_GetViewportSize_SizeX) == 0x000028, "Member 'WIDGET_SplashScreen_Title_C_ToggleCursor::CallFunc_GetViewportSize_SizeX' has a wrong offset!");
static_assert(offsetof(WIDGET_SplashScreen_Title_C_ToggleCursor, CallFunc_GetViewportSize_SizeY) == 0x00002C, "Member 'WIDGET_SplashScreen_Title_C_ToggleCursor::CallFunc_GetViewportSize_SizeY' has a wrong offset!");
static_assert(offsetof(WIDGET_SplashScreen_Title_C_ToggleCursor, CallFunc_Divide_IntInt_ReturnValue) == 0x000030, "Member 'WIDGET_SplashScreen_Title_C_ToggleCursor::CallFunc_Divide_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(WIDGET_SplashScreen_Title_C_ToggleCursor, CallFunc_Divide_IntInt_ReturnValue_1) == 0x000034, "Member 'WIDGET_SplashScreen_Title_C_ToggleCursor::CallFunc_Divide_IntInt_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(WIDGET_SplashScreen_Title_C_ToggleCursor, CallFunc_GetPlayerController_ReturnValue_4) == 0x000038, "Member 'WIDGET_SplashScreen_Title_C_ToggleCursor::CallFunc_GetPlayerController_ReturnValue_4' has a wrong offset!");
static_assert(offsetof(WIDGET_SplashScreen_Title_C_ToggleCursor, CallFunc_GetPlayerController_ReturnValue_5) == 0x000040, "Member 'WIDGET_SplashScreen_Title_C_ToggleCursor::CallFunc_GetPlayerController_ReturnValue_5' has a wrong offset!");
static_assert(offsetof(WIDGET_SplashScreen_Title_C_ToggleCursor, CallFunc_GetPlayerController_ReturnValue_6) == 0x000048, "Member 'WIDGET_SplashScreen_Title_C_ToggleCursor::CallFunc_GetPlayerController_ReturnValue_6' has a wrong offset!");

// Function WIDGET_SplashScreen_Title.WIDGET_SplashScreen_Title_C.ShowSubscreen
// 0x0010 (0x0010 - 0x0000)
struct WIDGET_SplashScreen_Title_C_ShowSubscreen final
{
public:
	class UUMGSequencePlayer*                     CallFunc_PlayAnimation_ReturnValue;                // 0x0000(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_SwitchEnum_CmpSuccess;                      // 0x0008(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(WIDGET_SplashScreen_Title_C_ShowSubscreen) == 0x000008, "Wrong alignment on WIDGET_SplashScreen_Title_C_ShowSubscreen");
static_assert(sizeof(WIDGET_SplashScreen_Title_C_ShowSubscreen) == 0x000010, "Wrong size on WIDGET_SplashScreen_Title_C_ShowSubscreen");
static_assert(offsetof(WIDGET_SplashScreen_Title_C_ShowSubscreen, CallFunc_PlayAnimation_ReturnValue) == 0x000000, "Member 'WIDGET_SplashScreen_Title_C_ShowSubscreen::CallFunc_PlayAnimation_ReturnValue' has a wrong offset!");
static_assert(offsetof(WIDGET_SplashScreen_Title_C_ShowSubscreen, K2Node_SwitchEnum_CmpSuccess) == 0x000008, "Member 'WIDGET_SplashScreen_Title_C_ShowSubscreen::K2Node_SwitchEnum_CmpSuccess' has a wrong offset!");

// Function WIDGET_SplashScreen_Title.WIDGET_SplashScreen_Title_C.ReturnFromSubScreen
// 0x0048 (0x0048 - 0x0000)
struct WIDGET_SplashScreen_Title_C_ReturnFromSubScreen final
{
public:
	class APlayerController*                      CallFunc_GetPlayerController_ReturnValue;          // 0x0000(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class ACON_Hacker_C*                          K2Node_DynamicCast_AsCON_Hacker;                   // 0x0008(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0010(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TScriptInterface<class IBPI_MenuNavigationRecipient_C> CallFunc_ReceiveNavUp_self_CastInput;              // 0x0018(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_ReceiveNavUp_Result;                      // 0x0028(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsUsingGamepad_Result;                    // 0x0029(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_GetIsEnabled_ReturnValue;                 // 0x002A(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_2B[0x5];                                       // 0x002B(0x0005)(Fixing Size After Last Property [ Dumper-7 ])
	class UUMGSequencePlayer*                     CallFunc_PlayAnimation_ReturnValue;                // 0x0030(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UWIDGET_MenuBase_C*                     K2Node_DynamicCast_AsWIDGET_Menu_Base;             // 0x0038(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess_1;                     // 0x0040(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(WIDGET_SplashScreen_Title_C_ReturnFromSubScreen) == 0x000008, "Wrong alignment on WIDGET_SplashScreen_Title_C_ReturnFromSubScreen");
static_assert(sizeof(WIDGET_SplashScreen_Title_C_ReturnFromSubScreen) == 0x000048, "Wrong size on WIDGET_SplashScreen_Title_C_ReturnFromSubScreen");
static_assert(offsetof(WIDGET_SplashScreen_Title_C_ReturnFromSubScreen, CallFunc_GetPlayerController_ReturnValue) == 0x000000, "Member 'WIDGET_SplashScreen_Title_C_ReturnFromSubScreen::CallFunc_GetPlayerController_ReturnValue' has a wrong offset!");
static_assert(offsetof(WIDGET_SplashScreen_Title_C_ReturnFromSubScreen, K2Node_DynamicCast_AsCON_Hacker) == 0x000008, "Member 'WIDGET_SplashScreen_Title_C_ReturnFromSubScreen::K2Node_DynamicCast_AsCON_Hacker' has a wrong offset!");
static_assert(offsetof(WIDGET_SplashScreen_Title_C_ReturnFromSubScreen, K2Node_DynamicCast_bSuccess) == 0x000010, "Member 'WIDGET_SplashScreen_Title_C_ReturnFromSubScreen::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(WIDGET_SplashScreen_Title_C_ReturnFromSubScreen, CallFunc_ReceiveNavUp_self_CastInput) == 0x000018, "Member 'WIDGET_SplashScreen_Title_C_ReturnFromSubScreen::CallFunc_ReceiveNavUp_self_CastInput' has a wrong offset!");
static_assert(offsetof(WIDGET_SplashScreen_Title_C_ReturnFromSubScreen, CallFunc_ReceiveNavUp_Result) == 0x000028, "Member 'WIDGET_SplashScreen_Title_C_ReturnFromSubScreen::CallFunc_ReceiveNavUp_Result' has a wrong offset!");
static_assert(offsetof(WIDGET_SplashScreen_Title_C_ReturnFromSubScreen, CallFunc_IsUsingGamepad_Result) == 0x000029, "Member 'WIDGET_SplashScreen_Title_C_ReturnFromSubScreen::CallFunc_IsUsingGamepad_Result' has a wrong offset!");
static_assert(offsetof(WIDGET_SplashScreen_Title_C_ReturnFromSubScreen, CallFunc_GetIsEnabled_ReturnValue) == 0x00002A, "Member 'WIDGET_SplashScreen_Title_C_ReturnFromSubScreen::CallFunc_GetIsEnabled_ReturnValue' has a wrong offset!");
static_assert(offsetof(WIDGET_SplashScreen_Title_C_ReturnFromSubScreen, CallFunc_PlayAnimation_ReturnValue) == 0x000030, "Member 'WIDGET_SplashScreen_Title_C_ReturnFromSubScreen::CallFunc_PlayAnimation_ReturnValue' has a wrong offset!");
static_assert(offsetof(WIDGET_SplashScreen_Title_C_ReturnFromSubScreen, K2Node_DynamicCast_AsWIDGET_Menu_Base) == 0x000038, "Member 'WIDGET_SplashScreen_Title_C_ReturnFromSubScreen::K2Node_DynamicCast_AsWIDGET_Menu_Base' has a wrong offset!");
static_assert(offsetof(WIDGET_SplashScreen_Title_C_ReturnFromSubScreen, K2Node_DynamicCast_bSuccess_1) == 0x000040, "Member 'WIDGET_SplashScreen_Title_C_ReturnFromSubScreen::K2Node_DynamicCast_bSuccess_1' has a wrong offset!");

// Function WIDGET_SplashScreen_Title.WIDGET_SplashScreen_Title_C.SetPressKeyPromptText
// 0x00A8 (0x00A8 - 0x0000)
struct WIDGET_SplashScreen_Title_C_SetPressKeyPromptText final
{
public:
	class FText                                   ButtonPrompt_Switch;                               // 0x0000(0x0018)(Edit, BlueprintVisible)
	class FText                                   ButtonPrompt_PlayStation;                          // 0x0018(0x0018)(Edit, BlueprintVisible)
	class FText                                   ButtonPrompt_Xbox;                                 // 0x0030(0x0018)(Edit, BlueprintVisible)
	class FText                                   ButtonPrompt_PC_Gamepad;                           // 0x0048(0x0018)(Edit, BlueprintVisible)
	class FText                                   ButtonPrompt_PC_MK;                                // 0x0060(0x0018)(Edit, BlueprintVisible)
	class FString                                 CallFunc_GetPlatformName_ReturnValue;              // 0x0078(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	bool                                          K2Node_SwitchString_CmpSuccess;                    // 0x0088(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_89[0x7];                                       // 0x0089(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class APlayerController*                      CallFunc_GetPlayerController_ReturnValue;          // 0x0090(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class ACON_Hacker_C*                          K2Node_DynamicCast_AsCON_Hacker;                   // 0x0098(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x00A0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsUsingGamepad_Result;                    // 0x00A1(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(WIDGET_SplashScreen_Title_C_SetPressKeyPromptText) == 0x000008, "Wrong alignment on WIDGET_SplashScreen_Title_C_SetPressKeyPromptText");
static_assert(sizeof(WIDGET_SplashScreen_Title_C_SetPressKeyPromptText) == 0x0000A8, "Wrong size on WIDGET_SplashScreen_Title_C_SetPressKeyPromptText");
static_assert(offsetof(WIDGET_SplashScreen_Title_C_SetPressKeyPromptText, ButtonPrompt_Switch) == 0x000000, "Member 'WIDGET_SplashScreen_Title_C_SetPressKeyPromptText::ButtonPrompt_Switch' has a wrong offset!");
static_assert(offsetof(WIDGET_SplashScreen_Title_C_SetPressKeyPromptText, ButtonPrompt_PlayStation) == 0x000018, "Member 'WIDGET_SplashScreen_Title_C_SetPressKeyPromptText::ButtonPrompt_PlayStation' has a wrong offset!");
static_assert(offsetof(WIDGET_SplashScreen_Title_C_SetPressKeyPromptText, ButtonPrompt_Xbox) == 0x000030, "Member 'WIDGET_SplashScreen_Title_C_SetPressKeyPromptText::ButtonPrompt_Xbox' has a wrong offset!");
static_assert(offsetof(WIDGET_SplashScreen_Title_C_SetPressKeyPromptText, ButtonPrompt_PC_Gamepad) == 0x000048, "Member 'WIDGET_SplashScreen_Title_C_SetPressKeyPromptText::ButtonPrompt_PC_Gamepad' has a wrong offset!");
static_assert(offsetof(WIDGET_SplashScreen_Title_C_SetPressKeyPromptText, ButtonPrompt_PC_MK) == 0x000060, "Member 'WIDGET_SplashScreen_Title_C_SetPressKeyPromptText::ButtonPrompt_PC_MK' has a wrong offset!");
static_assert(offsetof(WIDGET_SplashScreen_Title_C_SetPressKeyPromptText, CallFunc_GetPlatformName_ReturnValue) == 0x000078, "Member 'WIDGET_SplashScreen_Title_C_SetPressKeyPromptText::CallFunc_GetPlatformName_ReturnValue' has a wrong offset!");
static_assert(offsetof(WIDGET_SplashScreen_Title_C_SetPressKeyPromptText, K2Node_SwitchString_CmpSuccess) == 0x000088, "Member 'WIDGET_SplashScreen_Title_C_SetPressKeyPromptText::K2Node_SwitchString_CmpSuccess' has a wrong offset!");
static_assert(offsetof(WIDGET_SplashScreen_Title_C_SetPressKeyPromptText, CallFunc_GetPlayerController_ReturnValue) == 0x000090, "Member 'WIDGET_SplashScreen_Title_C_SetPressKeyPromptText::CallFunc_GetPlayerController_ReturnValue' has a wrong offset!");
static_assert(offsetof(WIDGET_SplashScreen_Title_C_SetPressKeyPromptText, K2Node_DynamicCast_AsCON_Hacker) == 0x000098, "Member 'WIDGET_SplashScreen_Title_C_SetPressKeyPromptText::K2Node_DynamicCast_AsCON_Hacker' has a wrong offset!");
static_assert(offsetof(WIDGET_SplashScreen_Title_C_SetPressKeyPromptText, K2Node_DynamicCast_bSuccess) == 0x0000A0, "Member 'WIDGET_SplashScreen_Title_C_SetPressKeyPromptText::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(WIDGET_SplashScreen_Title_C_SetPressKeyPromptText, CallFunc_IsUsingGamepad_Result) == 0x0000A1, "Member 'WIDGET_SplashScreen_Title_C_SetPressKeyPromptText::CallFunc_IsUsingGamepad_Result' has a wrong offset!");

// Function WIDGET_SplashScreen_Title.WIDGET_SplashScreen_Title_C.RefreshContinueAutosave
// 0x0038 (0x0038 - 0x0000)
struct WIDGET_SplashScreen_Title_C_RefreshContinueAutosave final
{
public:
	TArray<class FString>                         CallFunc_GetExistingSaveGameNames_ReturnValue;     // 0x0000(0x0010)(ReferenceParm)
	bool                                          CallFunc_Array_IsValidIndex_ReturnValue;           // 0x0010(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 CallFunc_Array_Get_Item;                           // 0x0018(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	class UStreamingSaveGameProfile*              CallFunc_LoadGameProfile_ReturnValue;              // 0x0028(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0030(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(WIDGET_SplashScreen_Title_C_RefreshContinueAutosave) == 0x000008, "Wrong alignment on WIDGET_SplashScreen_Title_C_RefreshContinueAutosave");
static_assert(sizeof(WIDGET_SplashScreen_Title_C_RefreshContinueAutosave) == 0x000038, "Wrong size on WIDGET_SplashScreen_Title_C_RefreshContinueAutosave");
static_assert(offsetof(WIDGET_SplashScreen_Title_C_RefreshContinueAutosave, CallFunc_GetExistingSaveGameNames_ReturnValue) == 0x000000, "Member 'WIDGET_SplashScreen_Title_C_RefreshContinueAutosave::CallFunc_GetExistingSaveGameNames_ReturnValue' has a wrong offset!");
static_assert(offsetof(WIDGET_SplashScreen_Title_C_RefreshContinueAutosave, CallFunc_Array_IsValidIndex_ReturnValue) == 0x000010, "Member 'WIDGET_SplashScreen_Title_C_RefreshContinueAutosave::CallFunc_Array_IsValidIndex_ReturnValue' has a wrong offset!");
static_assert(offsetof(WIDGET_SplashScreen_Title_C_RefreshContinueAutosave, CallFunc_Array_Get_Item) == 0x000018, "Member 'WIDGET_SplashScreen_Title_C_RefreshContinueAutosave::CallFunc_Array_Get_Item' has a wrong offset!");
static_assert(offsetof(WIDGET_SplashScreen_Title_C_RefreshContinueAutosave, CallFunc_LoadGameProfile_ReturnValue) == 0x000028, "Member 'WIDGET_SplashScreen_Title_C_RefreshContinueAutosave::CallFunc_LoadGameProfile_ReturnValue' has a wrong offset!");
static_assert(offsetof(WIDGET_SplashScreen_Title_C_RefreshContinueAutosave, CallFunc_IsValid_ReturnValue) == 0x000030, "Member 'WIDGET_SplashScreen_Title_C_RefreshContinueAutosave::CallFunc_IsValid_ReturnValue' has a wrong offset!");

// Function WIDGET_SplashScreen_Title.WIDGET_SplashScreen_Title_C.EVENT_OnUsingGamepadChanged
// 0x0001 (0x0001 - 0x0000)
struct WIDGET_SplashScreen_Title_C_EVENT_OnUsingGamepadChanged final
{
public:
	bool                                          IsUsingGamepad;                                    // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(WIDGET_SplashScreen_Title_C_EVENT_OnUsingGamepadChanged) == 0x000001, "Wrong alignment on WIDGET_SplashScreen_Title_C_EVENT_OnUsingGamepadChanged");
static_assert(sizeof(WIDGET_SplashScreen_Title_C_EVENT_OnUsingGamepadChanged) == 0x000001, "Wrong size on WIDGET_SplashScreen_Title_C_EVENT_OnUsingGamepadChanged");
static_assert(offsetof(WIDGET_SplashScreen_Title_C_EVENT_OnUsingGamepadChanged, IsUsingGamepad) == 0x000000, "Member 'WIDGET_SplashScreen_Title_C_EVENT_OnUsingGamepadChanged::IsUsingGamepad' has a wrong offset!");

// Function WIDGET_SplashScreen_Title.WIDGET_SplashScreen_Title_C.ShowPlayerUsername
// 0x0048 (0x0048 - 0x0000)
struct WIDGET_SplashScreen_Title_C_ShowPlayerUsername final
{
public:
	class FString                                 CallFunc_GetPlatformName_ReturnValue;              // 0x0000(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	class APlayerController*                      CallFunc_GetPlayerController_ReturnValue;          // 0x0010(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_SwitchString_CmpSuccess;                    // 0x0018(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_19[0x7];                                       // 0x0019(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 CallFunc_GetPlayerName_ReturnValue;                // 0x0020(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	class FText                                   CallFunc_Conv_StringToText_ReturnValue;            // 0x0030(0x0018)()
};
static_assert(alignof(WIDGET_SplashScreen_Title_C_ShowPlayerUsername) == 0x000008, "Wrong alignment on WIDGET_SplashScreen_Title_C_ShowPlayerUsername");
static_assert(sizeof(WIDGET_SplashScreen_Title_C_ShowPlayerUsername) == 0x000048, "Wrong size on WIDGET_SplashScreen_Title_C_ShowPlayerUsername");
static_assert(offsetof(WIDGET_SplashScreen_Title_C_ShowPlayerUsername, CallFunc_GetPlatformName_ReturnValue) == 0x000000, "Member 'WIDGET_SplashScreen_Title_C_ShowPlayerUsername::CallFunc_GetPlatformName_ReturnValue' has a wrong offset!");
static_assert(offsetof(WIDGET_SplashScreen_Title_C_ShowPlayerUsername, CallFunc_GetPlayerController_ReturnValue) == 0x000010, "Member 'WIDGET_SplashScreen_Title_C_ShowPlayerUsername::CallFunc_GetPlayerController_ReturnValue' has a wrong offset!");
static_assert(offsetof(WIDGET_SplashScreen_Title_C_ShowPlayerUsername, K2Node_SwitchString_CmpSuccess) == 0x000018, "Member 'WIDGET_SplashScreen_Title_C_ShowPlayerUsername::K2Node_SwitchString_CmpSuccess' has a wrong offset!");
static_assert(offsetof(WIDGET_SplashScreen_Title_C_ShowPlayerUsername, CallFunc_GetPlayerName_ReturnValue) == 0x000020, "Member 'WIDGET_SplashScreen_Title_C_ShowPlayerUsername::CallFunc_GetPlayerName_ReturnValue' has a wrong offset!");
static_assert(offsetof(WIDGET_SplashScreen_Title_C_ShowPlayerUsername, CallFunc_Conv_StringToText_ReturnValue) == 0x000030, "Member 'WIDGET_SplashScreen_Title_C_ShowPlayerUsername::CallFunc_Conv_StringToText_ReturnValue' has a wrong offset!");

// Function WIDGET_SplashScreen_Title.WIDGET_SplashScreen_Title_C.GetFadeOutDuration
// 0x0004 (0x0004 - 0x0000)
struct WIDGET_SplashScreen_Title_C_GetFadeOutDuration final
{
public:
	float                                         Duration;                                          // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(WIDGET_SplashScreen_Title_C_GetFadeOutDuration) == 0x000004, "Wrong alignment on WIDGET_SplashScreen_Title_C_GetFadeOutDuration");
static_assert(sizeof(WIDGET_SplashScreen_Title_C_GetFadeOutDuration) == 0x000004, "Wrong size on WIDGET_SplashScreen_Title_C_GetFadeOutDuration");
static_assert(offsetof(WIDGET_SplashScreen_Title_C_GetFadeOutDuration, Duration) == 0x000000, "Member 'WIDGET_SplashScreen_Title_C_GetFadeOutDuration::Duration' has a wrong offset!");

// Function WIDGET_SplashScreen_Title.WIDGET_SplashScreen_Title_C.GetSplashDuration
// 0x0004 (0x0004 - 0x0000)
struct WIDGET_SplashScreen_Title_C_GetSplashDuration final
{
public:
	float                                         Duration;                                          // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(WIDGET_SplashScreen_Title_C_GetSplashDuration) == 0x000004, "Wrong alignment on WIDGET_SplashScreen_Title_C_GetSplashDuration");
static_assert(sizeof(WIDGET_SplashScreen_Title_C_GetSplashDuration) == 0x000004, "Wrong size on WIDGET_SplashScreen_Title_C_GetSplashDuration");
static_assert(offsetof(WIDGET_SplashScreen_Title_C_GetSplashDuration, Duration) == 0x000000, "Member 'WIDGET_SplashScreen_Title_C_GetSplashDuration::Duration' has a wrong offset!");

// Function WIDGET_SplashScreen_Title.WIDGET_SplashScreen_Title_C.GetFadeInDuration
// 0x0004 (0x0004 - 0x0000)
struct WIDGET_SplashScreen_Title_C_GetFadeInDuration final
{
public:
	float                                         Duration;                                          // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(WIDGET_SplashScreen_Title_C_GetFadeInDuration) == 0x000004, "Wrong alignment on WIDGET_SplashScreen_Title_C_GetFadeInDuration");
static_assert(sizeof(WIDGET_SplashScreen_Title_C_GetFadeInDuration) == 0x000004, "Wrong size on WIDGET_SplashScreen_Title_C_GetFadeInDuration");
static_assert(offsetof(WIDGET_SplashScreen_Title_C_GetFadeInDuration, Duration) == 0x000000, "Member 'WIDGET_SplashScreen_Title_C_GetFadeInDuration::Duration' has a wrong offset!");

// Function WIDGET_SplashScreen_Title.WIDGET_SplashScreen_Title_C.CanSkipSplash
// 0x0001 (0x0001 - 0x0000)
struct WIDGET_SplashScreen_Title_C_CanSkipSplash final
{
public:
	bool                                          Result;                                            // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(WIDGET_SplashScreen_Title_C_CanSkipSplash) == 0x000001, "Wrong alignment on WIDGET_SplashScreen_Title_C_CanSkipSplash");
static_assert(sizeof(WIDGET_SplashScreen_Title_C_CanSkipSplash) == 0x000001, "Wrong size on WIDGET_SplashScreen_Title_C_CanSkipSplash");
static_assert(offsetof(WIDGET_SplashScreen_Title_C_CanSkipSplash, Result) == 0x000000, "Member 'WIDGET_SplashScreen_Title_C_CanSkipSplash::Result' has a wrong offset!");

// Function WIDGET_SplashScreen_Title.WIDGET_SplashScreen_Title_C.CanSkipFadeIn
// 0x0001 (0x0001 - 0x0000)
struct WIDGET_SplashScreen_Title_C_CanSkipFadeIn final
{
public:
	bool                                          Result;                                            // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(WIDGET_SplashScreen_Title_C_CanSkipFadeIn) == 0x000001, "Wrong alignment on WIDGET_SplashScreen_Title_C_CanSkipFadeIn");
static_assert(sizeof(WIDGET_SplashScreen_Title_C_CanSkipFadeIn) == 0x000001, "Wrong size on WIDGET_SplashScreen_Title_C_CanSkipFadeIn");
static_assert(offsetof(WIDGET_SplashScreen_Title_C_CanSkipFadeIn, Result) == 0x000000, "Member 'WIDGET_SplashScreen_Title_C_CanSkipFadeIn::Result' has a wrong offset!");

// Function WIDGET_SplashScreen_Title.WIDGET_SplashScreen_Title_C.UpdateFadeIn
// 0x000C (0x000C - 0x0000)
struct WIDGET_SplashScreen_Title_C_UpdateFadeIn final
{
public:
	float                                         Progress;                                          // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Result;                                            // 0x0004(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_Ease_ReturnValue;                         // 0x0008(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(WIDGET_SplashScreen_Title_C_UpdateFadeIn) == 0x000004, "Wrong alignment on WIDGET_SplashScreen_Title_C_UpdateFadeIn");
static_assert(sizeof(WIDGET_SplashScreen_Title_C_UpdateFadeIn) == 0x00000C, "Wrong size on WIDGET_SplashScreen_Title_C_UpdateFadeIn");
static_assert(offsetof(WIDGET_SplashScreen_Title_C_UpdateFadeIn, Progress) == 0x000000, "Member 'WIDGET_SplashScreen_Title_C_UpdateFadeIn::Progress' has a wrong offset!");
static_assert(offsetof(WIDGET_SplashScreen_Title_C_UpdateFadeIn, Result) == 0x000004, "Member 'WIDGET_SplashScreen_Title_C_UpdateFadeIn::Result' has a wrong offset!");
static_assert(offsetof(WIDGET_SplashScreen_Title_C_UpdateFadeIn, CallFunc_Ease_ReturnValue) == 0x000008, "Member 'WIDGET_SplashScreen_Title_C_UpdateFadeIn::CallFunc_Ease_ReturnValue' has a wrong offset!");

// Function WIDGET_SplashScreen_Title.WIDGET_SplashScreen_Title_C.UpdateSplash
// 0x0024 (0x0024 - 0x0000)
struct WIDGET_SplashScreen_Title_C_UpdateSplash final
{
public:
	float                                         Progress;                                          // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Result;                                            // 0x0004(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         KeyPromptFadeProgress;                             // 0x0008(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_GetRenderOpacity_ReturnValue;             // 0x000C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_GetRenderOpacity_ReturnValue_1;           // 0x0010(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_GreaterEqual_FloatFloat_ReturnValue;      // 0x0014(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_EqualEqual_ByteByte_ReturnValue;          // 0x0015(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_16[0x2];                                       // 0x0016(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_GetWorldDeltaSeconds_ReturnValue;         // 0x0018(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Add_FloatFloat_ReturnValue;               // 0x001C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_FClamp_ReturnValue;                       // 0x0020(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(WIDGET_SplashScreen_Title_C_UpdateSplash) == 0x000004, "Wrong alignment on WIDGET_SplashScreen_Title_C_UpdateSplash");
static_assert(sizeof(WIDGET_SplashScreen_Title_C_UpdateSplash) == 0x000024, "Wrong size on WIDGET_SplashScreen_Title_C_UpdateSplash");
static_assert(offsetof(WIDGET_SplashScreen_Title_C_UpdateSplash, Progress) == 0x000000, "Member 'WIDGET_SplashScreen_Title_C_UpdateSplash::Progress' has a wrong offset!");
static_assert(offsetof(WIDGET_SplashScreen_Title_C_UpdateSplash, Result) == 0x000004, "Member 'WIDGET_SplashScreen_Title_C_UpdateSplash::Result' has a wrong offset!");
static_assert(offsetof(WIDGET_SplashScreen_Title_C_UpdateSplash, KeyPromptFadeProgress) == 0x000008, "Member 'WIDGET_SplashScreen_Title_C_UpdateSplash::KeyPromptFadeProgress' has a wrong offset!");
static_assert(offsetof(WIDGET_SplashScreen_Title_C_UpdateSplash, CallFunc_GetRenderOpacity_ReturnValue) == 0x00000C, "Member 'WIDGET_SplashScreen_Title_C_UpdateSplash::CallFunc_GetRenderOpacity_ReturnValue' has a wrong offset!");
static_assert(offsetof(WIDGET_SplashScreen_Title_C_UpdateSplash, CallFunc_GetRenderOpacity_ReturnValue_1) == 0x000010, "Member 'WIDGET_SplashScreen_Title_C_UpdateSplash::CallFunc_GetRenderOpacity_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(WIDGET_SplashScreen_Title_C_UpdateSplash, CallFunc_GreaterEqual_FloatFloat_ReturnValue) == 0x000014, "Member 'WIDGET_SplashScreen_Title_C_UpdateSplash::CallFunc_GreaterEqual_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(WIDGET_SplashScreen_Title_C_UpdateSplash, CallFunc_EqualEqual_ByteByte_ReturnValue) == 0x000015, "Member 'WIDGET_SplashScreen_Title_C_UpdateSplash::CallFunc_EqualEqual_ByteByte_ReturnValue' has a wrong offset!");
static_assert(offsetof(WIDGET_SplashScreen_Title_C_UpdateSplash, CallFunc_GetWorldDeltaSeconds_ReturnValue) == 0x000018, "Member 'WIDGET_SplashScreen_Title_C_UpdateSplash::CallFunc_GetWorldDeltaSeconds_ReturnValue' has a wrong offset!");
static_assert(offsetof(WIDGET_SplashScreen_Title_C_UpdateSplash, CallFunc_Add_FloatFloat_ReturnValue) == 0x00001C, "Member 'WIDGET_SplashScreen_Title_C_UpdateSplash::CallFunc_Add_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(WIDGET_SplashScreen_Title_C_UpdateSplash, CallFunc_FClamp_ReturnValue) == 0x000020, "Member 'WIDGET_SplashScreen_Title_C_UpdateSplash::CallFunc_FClamp_ReturnValue' has a wrong offset!");

// Function WIDGET_SplashScreen_Title.WIDGET_SplashScreen_Title_C.UpdateFadeOut
// 0x0008 (0x0008 - 0x0000)
struct WIDGET_SplashScreen_Title_C_UpdateFadeOut final
{
public:
	float                                         Progress;                                          // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Result;                                            // 0x0004(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsAnimationPlaying_ReturnValue;           // 0x0005(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(WIDGET_SplashScreen_Title_C_UpdateFadeOut) == 0x000004, "Wrong alignment on WIDGET_SplashScreen_Title_C_UpdateFadeOut");
static_assert(sizeof(WIDGET_SplashScreen_Title_C_UpdateFadeOut) == 0x000008, "Wrong size on WIDGET_SplashScreen_Title_C_UpdateFadeOut");
static_assert(offsetof(WIDGET_SplashScreen_Title_C_UpdateFadeOut, Progress) == 0x000000, "Member 'WIDGET_SplashScreen_Title_C_UpdateFadeOut::Progress' has a wrong offset!");
static_assert(offsetof(WIDGET_SplashScreen_Title_C_UpdateFadeOut, Result) == 0x000004, "Member 'WIDGET_SplashScreen_Title_C_UpdateFadeOut::Result' has a wrong offset!");
static_assert(offsetof(WIDGET_SplashScreen_Title_C_UpdateFadeOut, CallFunc_IsAnimationPlaying_ReturnValue) == 0x000005, "Member 'WIDGET_SplashScreen_Title_C_UpdateFadeOut::CallFunc_IsAnimationPlaying_ReturnValue' has a wrong offset!");

// Function WIDGET_SplashScreen_Title.WIDGET_SplashScreen_Title_C.SetPreGameScreen
// 0x0010 (0x0010 - 0x0000)
struct WIDGET_SplashScreen_Title_C_SetPreGameScreen final
{
public:
	class UWIDGET_PreGameScreen_C*                PreGameScreen;                                     // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Result;                                            // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(WIDGET_SplashScreen_Title_C_SetPreGameScreen) == 0x000008, "Wrong alignment on WIDGET_SplashScreen_Title_C_SetPreGameScreen");
static_assert(sizeof(WIDGET_SplashScreen_Title_C_SetPreGameScreen) == 0x000010, "Wrong size on WIDGET_SplashScreen_Title_C_SetPreGameScreen");
static_assert(offsetof(WIDGET_SplashScreen_Title_C_SetPreGameScreen, PreGameScreen) == 0x000000, "Member 'WIDGET_SplashScreen_Title_C_SetPreGameScreen::PreGameScreen' has a wrong offset!");
static_assert(offsetof(WIDGET_SplashScreen_Title_C_SetPreGameScreen, Result) == 0x000008, "Member 'WIDGET_SplashScreen_Title_C_SetPreGameScreen::Result' has a wrong offset!");

// Function WIDGET_SplashScreen_Title.WIDGET_SplashScreen_Title_C.OnSplashVisible
// 0x0001 (0x0001 - 0x0000)
struct WIDGET_SplashScreen_Title_C_OnSplashVisible final
{
public:
	bool                                          Result;                                            // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(WIDGET_SplashScreen_Title_C_OnSplashVisible) == 0x000001, "Wrong alignment on WIDGET_SplashScreen_Title_C_OnSplashVisible");
static_assert(sizeof(WIDGET_SplashScreen_Title_C_OnSplashVisible) == 0x000001, "Wrong size on WIDGET_SplashScreen_Title_C_OnSplashVisible");
static_assert(offsetof(WIDGET_SplashScreen_Title_C_OnSplashVisible, Result) == 0x000000, "Member 'WIDGET_SplashScreen_Title_C_OnSplashVisible::Result' has a wrong offset!");

// Function WIDGET_SplashScreen_Title.WIDGET_SplashScreen_Title_C.OnSplashHidden
// 0x0001 (0x0001 - 0x0000)
struct WIDGET_SplashScreen_Title_C_OnSplashHidden final
{
public:
	bool                                          Result;                                            // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(WIDGET_SplashScreen_Title_C_OnSplashHidden) == 0x000001, "Wrong alignment on WIDGET_SplashScreen_Title_C_OnSplashHidden");
static_assert(sizeof(WIDGET_SplashScreen_Title_C_OnSplashHidden) == 0x000001, "Wrong size on WIDGET_SplashScreen_Title_C_OnSplashHidden");
static_assert(offsetof(WIDGET_SplashScreen_Title_C_OnSplashHidden, Result) == 0x000000, "Member 'WIDGET_SplashScreen_Title_C_OnSplashHidden::Result' has a wrong offset!");

}

