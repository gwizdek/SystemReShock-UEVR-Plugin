#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_AlarmLight

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "BP_AlarmSpeaker_Base_classes.hpp"


namespace SDK
{

// BlueprintGeneratedClass BP_AlarmLight.BP_AlarmLight_C
// 0x0028 (0x02B0 - 0x0288)
class ABP_AlarmLight_C final : public ABP_AlarmSpeaker_Base_C
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame_BP_AlarmLight_C;                    // 0x0288(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	class USpotLightComponent*                    FrontLight;                                        // 0x0290(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UCOMP_AttribManager_C*                  COMP_AttribManager;                                // 0x0298(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UCOMP_Descriptor_C*                     COMP_Descriptor;                                   // 0x02A0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	float                                         CurrentRotation;                                   // 0x02A8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         RotationSpeed;                                     // 0x02AC(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

public:
	void ExecuteUbergraph_BP_AlarmLight(int32 EntryPoint);
	void BndEvt__BP_AlarmLight_COMP_VoxelCullable_K2Node_ComponentBoundEvent_2_CullableVisibilitySignature__DelegateSignature(bool bVisibleState);
	void ReceiveBeginPlay();
	void UserConstructionScript();
	void InitializeAttributes();
	void UpdateEmissiveStrength(float Scale);
	void UpdateAlarmLightVisibility(bool VisibilityState);
	void EVENT_OnDisableAttribChanged(float CurrValue, float LastValue);
	void IsAlarmFunctional(bool* Result);
	void InitializeAlarmSpeaker();
	void OnAlarmActivated();
	void GetAlarmSpeakerPosition(struct FVector* Result);

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"BP_AlarmLight_C">();
	}
	static class ABP_AlarmLight_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<ABP_AlarmLight_C>();
	}
};
static_assert(alignof(ABP_AlarmLight_C) == 0x000008, "Wrong alignment on ABP_AlarmLight_C");
static_assert(sizeof(ABP_AlarmLight_C) == 0x0002B0, "Wrong size on ABP_AlarmLight_C");
static_assert(offsetof(ABP_AlarmLight_C, UberGraphFrame_BP_AlarmLight_C) == 0x000288, "Member 'ABP_AlarmLight_C::UberGraphFrame_BP_AlarmLight_C' has a wrong offset!");
static_assert(offsetof(ABP_AlarmLight_C, FrontLight) == 0x000290, "Member 'ABP_AlarmLight_C::FrontLight' has a wrong offset!");
static_assert(offsetof(ABP_AlarmLight_C, COMP_AttribManager) == 0x000298, "Member 'ABP_AlarmLight_C::COMP_AttribManager' has a wrong offset!");
static_assert(offsetof(ABP_AlarmLight_C, COMP_Descriptor) == 0x0002A0, "Member 'ABP_AlarmLight_C::COMP_Descriptor' has a wrong offset!");
static_assert(offsetof(ABP_AlarmLight_C, CurrentRotation) == 0x0002A8, "Member 'ABP_AlarmLight_C::CurrentRotation' has a wrong offset!");
static_assert(offsetof(ABP_AlarmLight_C, RotationSpeed) == 0x0002AC, "Member 'ABP_AlarmLight_C::RotationSpeed' has a wrong offset!");

}

