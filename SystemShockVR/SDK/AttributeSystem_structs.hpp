#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: AttributeSystem

#include "Basic.hpp"


namespace SDK
{

// Enum AttributeSystem.EModApplyType
// NumValues: 0x0005
enum class EModApplyType : uint8
{
	Rate                                     = 0,
	Value                                    = 1,
	Damage                                   = 2,
	Bonus                                    = 3,
	EModApplyType_MAX                        = 4,
};

// Enum AttributeSystem.EAttribModifyType
// NumValues: 0x0003
enum class EAttribModifyType : uint8
{
	Absolute                                 = 0,
	Relative                                 = 1,
	EAttribModifyType_MAX                    = 2,
};

// Enum AttributeSystem.EAttribModFlags
// NumValues: 0x0009
enum class EAttribModFlags : uint8
{
	None                                     = 0,
	Mirror                                   = 1,
	UseSoftMinValue                          = 2,
	UseSoftMaxValue                          = 4,
	Expiring                                 = 8,
	Expired                                  = 16,
	Transient                                = 32,
	IgnoreShieldsOverride                    = 64,
	EAttribModFlags_MAX                      = 65,
};

// Enum AttributeSystem.EModContinuousFuncType
// NumValues: 0x0008
enum class EModContinuousFuncType : uint8
{
	Constant                                 = 0,
	LinearGrowth                             = 1,
	LinearDecay                              = 2,
	ExponentialGrowth                        = 3,
	ExponentialDecay                         = 4,
	SmoothGrowth                             = 5,
	SmoothDecay                              = 6,
	EModContinuousFuncType_MAX               = 7,
};

// Enum AttributeSystem.EModNormalizedFuncType
// NumValues: 0x0005
enum class EModNormalizedFuncType : uint8
{
	Constant                                 = 0,
	Linear                                   = 1,
	Exponential                              = 2,
	Smooth                                   = 3,
	EModNormalizedFuncType_MAX               = 4,
};

// Enum AttributeSystem.EModExpireFlags
// NumValues: 0x0005
enum class EModExpireFlags : uint8
{
	None                                     = 0,
	Duration                                 = 1,
	MinValue                                 = 2,
	MaxValue                                 = 4,
	EModExpireFlags_MAX                      = 5,
};

// Enum AttributeSystem.EModExpireType
// NumValues: 0x0004
enum class EModExpireType : uint8
{
	Duration                                 = 0,
	MinValue                                 = 1,
	MaxValue                                 = 2,
	EModExpireType_MAX                       = 3,
};

// Enum AttributeSystem.EModOpType
// NumValues: 0x0003
enum class EModOpType : uint8
{
	Add                                      = 0,
	Scale                                    = 1,
	EModOpType_MAX                           = 2,
};

// Enum AttributeSystem.EModStackType
// NumValues: 0x0004
enum class EModStackType : uint8
{
	Stack                                    = 0,
	Replace                                  = 1,
	Exclusive                                = 2,
	EModStackType_MAX                        = 3,
};

// ScriptStruct AttributeSystem.AttribModResult
// 0x0005 (0x0005 - 0x0000)
struct FAttribModResult final
{
public:
	bool                                          bValueChanged;                                     // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bMinValue;                                         // 0x0001(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bMaxValue;                                         // 0x0002(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bSoftMinValue;                                     // 0x0003(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bSoftMaxValue;                                     // 0x0004(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FAttribModResult) == 0x000001, "Wrong alignment on FAttribModResult");
static_assert(sizeof(FAttribModResult) == 0x000005, "Wrong size on FAttribModResult");
static_assert(offsetof(FAttribModResult, bValueChanged) == 0x000000, "Member 'FAttribModResult::bValueChanged' has a wrong offset!");
static_assert(offsetof(FAttribModResult, bMinValue) == 0x000001, "Member 'FAttribModResult::bMinValue' has a wrong offset!");
static_assert(offsetof(FAttribModResult, bMaxValue) == 0x000002, "Member 'FAttribModResult::bMaxValue' has a wrong offset!");
static_assert(offsetof(FAttribModResult, bSoftMinValue) == 0x000003, "Member 'FAttribModResult::bSoftMinValue' has a wrong offset!");
static_assert(offsetof(FAttribModResult, bSoftMaxValue) == 0x000004, "Member 'FAttribModResult::bSoftMaxValue' has a wrong offset!");

// ScriptStruct AttributeSystem.AttribDamageTickResult
// 0x0024 (0x0024 - 0x0000)
struct FAttribDamageTickResult final
{
public:
	float                                         BaseDamage;                                        // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         DamageBlockedByShields;                            // 0x0004(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         TickRate;                                          // 0x0008(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ArmorPenetration;                                  // 0x000C(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Armor;                                             // 0x0010(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ExploitPercent;                                    // 0x0014(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         CriticalPercent;                                   // 0x0018(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ResistPercent;                                     // 0x001C(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ResistPierce;                                      // 0x0020(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FAttribDamageTickResult) == 0x000004, "Wrong alignment on FAttribDamageTickResult");
static_assert(sizeof(FAttribDamageTickResult) == 0x000024, "Wrong size on FAttribDamageTickResult");
static_assert(offsetof(FAttribDamageTickResult, BaseDamage) == 0x000000, "Member 'FAttribDamageTickResult::BaseDamage' has a wrong offset!");
static_assert(offsetof(FAttribDamageTickResult, DamageBlockedByShields) == 0x000004, "Member 'FAttribDamageTickResult::DamageBlockedByShields' has a wrong offset!");
static_assert(offsetof(FAttribDamageTickResult, TickRate) == 0x000008, "Member 'FAttribDamageTickResult::TickRate' has a wrong offset!");
static_assert(offsetof(FAttribDamageTickResult, ArmorPenetration) == 0x00000C, "Member 'FAttribDamageTickResult::ArmorPenetration' has a wrong offset!");
static_assert(offsetof(FAttribDamageTickResult, Armor) == 0x000010, "Member 'FAttribDamageTickResult::Armor' has a wrong offset!");
static_assert(offsetof(FAttribDamageTickResult, ExploitPercent) == 0x000014, "Member 'FAttribDamageTickResult::ExploitPercent' has a wrong offset!");
static_assert(offsetof(FAttribDamageTickResult, CriticalPercent) == 0x000018, "Member 'FAttribDamageTickResult::CriticalPercent' has a wrong offset!");
static_assert(offsetof(FAttribDamageTickResult, ResistPercent) == 0x00001C, "Member 'FAttribDamageTickResult::ResistPercent' has a wrong offset!");
static_assert(offsetof(FAttribDamageTickResult, ResistPierce) == 0x000020, "Member 'FAttribDamageTickResult::ResistPierce' has a wrong offset!");

// ScriptStruct AttributeSystem.AttribDamageInstance
// 0x0028 (0x0028 - 0x0000)
struct FAttribDamageInstance final
{
public:
	class UAttributeDef*                          TargetAttrib;                                      // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UAttribDamageType*                      DamageType;                                        // 0x0008(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         NetDamage;                                         // 0x0010(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         OverkillDamage;                                    // 0x0014(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FAttribDamageTickResult>        DamagePerTick;                                     // 0x0018(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FAttribDamageInstance) == 0x000008, "Wrong alignment on FAttribDamageInstance");
static_assert(sizeof(FAttribDamageInstance) == 0x000028, "Wrong size on FAttribDamageInstance");
static_assert(offsetof(FAttribDamageInstance, TargetAttrib) == 0x000000, "Member 'FAttribDamageInstance::TargetAttrib' has a wrong offset!");
static_assert(offsetof(FAttribDamageInstance, DamageType) == 0x000008, "Member 'FAttribDamageInstance::DamageType' has a wrong offset!");
static_assert(offsetof(FAttribDamageInstance, NetDamage) == 0x000010, "Member 'FAttribDamageInstance::NetDamage' has a wrong offset!");
static_assert(offsetof(FAttribDamageInstance, OverkillDamage) == 0x000014, "Member 'FAttribDamageInstance::OverkillDamage' has a wrong offset!");
static_assert(offsetof(FAttribDamageInstance, DamagePerTick) == 0x000018, "Member 'FAttribDamageInstance::DamagePerTick' has a wrong offset!");

// ScriptStruct AttributeSystem.AttribModApplyDataBase
// 0x0090 (0x0090 - 0x0000)
struct FAttribModApplyDataBase
{
public:
	class UAttributeDef*                          TargetAttribute;                                   // 0x0000(0x0008)(Edit, BlueprintVisible, ZeroConstructor, SaveGame, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UAttributeDef*                          DependsOnAttribute;                                // 0x0008(0x0008)(Edit, BlueprintVisible, ZeroConstructor, SaveGame, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UAttributeDef*                          ScaleAttribute;                                    // 0x0010(0x0008)(Edit, BlueprintVisible, ZeroConstructor, SaveGame, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UCurveFloat*                            TickRateCurve;                                     // 0x0018(0x0008)(Edit, BlueprintVisible, ZeroConstructor, SaveGame, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class FName>                           ExpireModCategoriesOnApply;                        // 0x0020(0x0010)(Edit, BlueprintVisible, ZeroConstructor, SaveGame, NativeAccessSpecifierPublic)
	EModApplyType                                 ApplyType;                                         // 0x0030(0x0001)(Edit, BlueprintVisible, ZeroConstructor, SaveGame, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EModStackType                                 StackType;                                         // 0x0031(0x0001)(Edit, BlueprintVisible, ZeroConstructor, SaveGame, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_32[0x2];                                       // 0x0032(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         ExpireFlags;                                       // 0x0034(0x0004)(Edit, BlueprintVisible, ZeroConstructor, SaveGame, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UAttribDamageType*                      DamageType;                                        // 0x0038(0x0008)(Edit, BlueprintVisible, ZeroConstructor, SaveGame, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EModOpType                                    BonusType;                                         // 0x0040(0x0001)(Edit, BlueprintVisible, ZeroConstructor, SaveGame, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EModContinuousFuncType                        FunctionType;                                      // 0x0041(0x0001)(Edit, BlueprintVisible, ZeroConstructor, SaveGame, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_42[0x2];                                       // 0x0042(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   Category;                                          // 0x0044(0x0008)(Edit, BlueprintVisible, ZeroConstructor, SaveGame, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Value;                                             // 0x004C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, SaveGame, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Duration;                                          // 0x0050(0x0004)(Edit, BlueprintVisible, ZeroConstructor, SaveGame, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         TickRate;                                          // 0x0054(0x0004)(Edit, BlueprintVisible, ZeroConstructor, SaveGame, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         TickCount;                                         // 0x0058(0x0004)(Edit, BlueprintVisible, ZeroConstructor, SaveGame, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         RampUpTime;                                        // 0x005C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, SaveGame, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         RampDownTime;                                      // 0x0060(0x0004)(Edit, BlueprintVisible, ZeroConstructor, SaveGame, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ArmorPenetration;                                  // 0x0064(0x0004)(Edit, BlueprintVisible, ZeroConstructor, SaveGame, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         PierceResistance;                                  // 0x0068(0x0004)(Edit, BlueprintVisible, ZeroConstructor, SaveGame, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         CriticalChance;                                    // 0x006C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, SaveGame, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         CriticalDamage;                                    // 0x0070(0x0004)(Edit, BlueprintVisible, ZeroConstructor, SaveGame, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIgnoreShieldsOverride;                            // 0x0074(0x0001)(Edit, BlueprintVisible, ZeroConstructor, SaveGame, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bRecomputeScalePerTick;                            // 0x0075(0x0001)(Edit, BlueprintVisible, ZeroConstructor, SaveGame, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bTransient;                                        // 0x0076(0x0001)(Edit, BlueprintVisible, ZeroConstructor, SaveGame, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bUseSoftMinValue;                                  // 0x0077(0x0001)(Edit, BlueprintVisible, ZeroConstructor, SaveGame, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         SoftMinValue;                                      // 0x0078(0x0004)(Edit, BlueprintVisible, ZeroConstructor, SaveGame, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bUseSoftMaxValue;                                  // 0x007C(0x0001)(Edit, BlueprintVisible, ZeroConstructor, SaveGame, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_7D[0x3];                                       // 0x007D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         SoftMaxValue;                                      // 0x0080(0x0004)(Edit, BlueprintVisible, ZeroConstructor, SaveGame, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_84[0x4];                                       // 0x0084(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UObject*                                UserParams;                                        // 0x0088(0x0008)(BlueprintVisible, ZeroConstructor, SaveGame, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FAttribModApplyDataBase) == 0x000008, "Wrong alignment on FAttribModApplyDataBase");
static_assert(sizeof(FAttribModApplyDataBase) == 0x000090, "Wrong size on FAttribModApplyDataBase");
static_assert(offsetof(FAttribModApplyDataBase, TargetAttribute) == 0x000000, "Member 'FAttribModApplyDataBase::TargetAttribute' has a wrong offset!");
static_assert(offsetof(FAttribModApplyDataBase, DependsOnAttribute) == 0x000008, "Member 'FAttribModApplyDataBase::DependsOnAttribute' has a wrong offset!");
static_assert(offsetof(FAttribModApplyDataBase, ScaleAttribute) == 0x000010, "Member 'FAttribModApplyDataBase::ScaleAttribute' has a wrong offset!");
static_assert(offsetof(FAttribModApplyDataBase, TickRateCurve) == 0x000018, "Member 'FAttribModApplyDataBase::TickRateCurve' has a wrong offset!");
static_assert(offsetof(FAttribModApplyDataBase, ExpireModCategoriesOnApply) == 0x000020, "Member 'FAttribModApplyDataBase::ExpireModCategoriesOnApply' has a wrong offset!");
static_assert(offsetof(FAttribModApplyDataBase, ApplyType) == 0x000030, "Member 'FAttribModApplyDataBase::ApplyType' has a wrong offset!");
static_assert(offsetof(FAttribModApplyDataBase, StackType) == 0x000031, "Member 'FAttribModApplyDataBase::StackType' has a wrong offset!");
static_assert(offsetof(FAttribModApplyDataBase, ExpireFlags) == 0x000034, "Member 'FAttribModApplyDataBase::ExpireFlags' has a wrong offset!");
static_assert(offsetof(FAttribModApplyDataBase, DamageType) == 0x000038, "Member 'FAttribModApplyDataBase::DamageType' has a wrong offset!");
static_assert(offsetof(FAttribModApplyDataBase, BonusType) == 0x000040, "Member 'FAttribModApplyDataBase::BonusType' has a wrong offset!");
static_assert(offsetof(FAttribModApplyDataBase, FunctionType) == 0x000041, "Member 'FAttribModApplyDataBase::FunctionType' has a wrong offset!");
static_assert(offsetof(FAttribModApplyDataBase, Category) == 0x000044, "Member 'FAttribModApplyDataBase::Category' has a wrong offset!");
static_assert(offsetof(FAttribModApplyDataBase, Value) == 0x00004C, "Member 'FAttribModApplyDataBase::Value' has a wrong offset!");
static_assert(offsetof(FAttribModApplyDataBase, Duration) == 0x000050, "Member 'FAttribModApplyDataBase::Duration' has a wrong offset!");
static_assert(offsetof(FAttribModApplyDataBase, TickRate) == 0x000054, "Member 'FAttribModApplyDataBase::TickRate' has a wrong offset!");
static_assert(offsetof(FAttribModApplyDataBase, TickCount) == 0x000058, "Member 'FAttribModApplyDataBase::TickCount' has a wrong offset!");
static_assert(offsetof(FAttribModApplyDataBase, RampUpTime) == 0x00005C, "Member 'FAttribModApplyDataBase::RampUpTime' has a wrong offset!");
static_assert(offsetof(FAttribModApplyDataBase, RampDownTime) == 0x000060, "Member 'FAttribModApplyDataBase::RampDownTime' has a wrong offset!");
static_assert(offsetof(FAttribModApplyDataBase, ArmorPenetration) == 0x000064, "Member 'FAttribModApplyDataBase::ArmorPenetration' has a wrong offset!");
static_assert(offsetof(FAttribModApplyDataBase, PierceResistance) == 0x000068, "Member 'FAttribModApplyDataBase::PierceResistance' has a wrong offset!");
static_assert(offsetof(FAttribModApplyDataBase, CriticalChance) == 0x00006C, "Member 'FAttribModApplyDataBase::CriticalChance' has a wrong offset!");
static_assert(offsetof(FAttribModApplyDataBase, CriticalDamage) == 0x000070, "Member 'FAttribModApplyDataBase::CriticalDamage' has a wrong offset!");
static_assert(offsetof(FAttribModApplyDataBase, bIgnoreShieldsOverride) == 0x000074, "Member 'FAttribModApplyDataBase::bIgnoreShieldsOverride' has a wrong offset!");
static_assert(offsetof(FAttribModApplyDataBase, bRecomputeScalePerTick) == 0x000075, "Member 'FAttribModApplyDataBase::bRecomputeScalePerTick' has a wrong offset!");
static_assert(offsetof(FAttribModApplyDataBase, bTransient) == 0x000076, "Member 'FAttribModApplyDataBase::bTransient' has a wrong offset!");
static_assert(offsetof(FAttribModApplyDataBase, bUseSoftMinValue) == 0x000077, "Member 'FAttribModApplyDataBase::bUseSoftMinValue' has a wrong offset!");
static_assert(offsetof(FAttribModApplyDataBase, SoftMinValue) == 0x000078, "Member 'FAttribModApplyDataBase::SoftMinValue' has a wrong offset!");
static_assert(offsetof(FAttribModApplyDataBase, bUseSoftMaxValue) == 0x00007C, "Member 'FAttribModApplyDataBase::bUseSoftMaxValue' has a wrong offset!");
static_assert(offsetof(FAttribModApplyDataBase, SoftMaxValue) == 0x000080, "Member 'FAttribModApplyDataBase::SoftMaxValue' has a wrong offset!");
static_assert(offsetof(FAttribModApplyDataBase, UserParams) == 0x000088, "Member 'FAttribModApplyDataBase::UserParams' has a wrong offset!");

// ScriptStruct AttributeSystem.AttribModApplyData
// 0x0010 (0x00A0 - 0x0090)
struct FAttribModApplyData final : public FAttribModApplyDataBase
{
public:
	TArray<struct FAttribModApplyDataBase>        ApplyModsOnExpire;                                 // 0x0090(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FAttribModApplyData) == 0x000008, "Wrong alignment on FAttribModApplyData");
static_assert(sizeof(FAttribModApplyData) == 0x0000A0, "Wrong size on FAttribModApplyData");
static_assert(offsetof(FAttribModApplyData, ApplyModsOnExpire) == 0x000090, "Member 'FAttribModApplyData::ApplyModsOnExpire' has a wrong offset!");

// ScriptStruct AttributeSystem.AttribInstanceMap
// 0x0050 (0x0050 - 0x0000)
struct FAttribInstanceMap final
{
public:
	TMap<class UAttributeDef*, class UAttribInstance*> Map;                                               // 0x0000(0x0050)(NativeAccessSpecifierPublic)
};
static_assert(alignof(FAttribInstanceMap) == 0x000008, "Wrong alignment on FAttribInstanceMap");
static_assert(sizeof(FAttribInstanceMap) == 0x000050, "Wrong size on FAttribInstanceMap");
static_assert(offsetof(FAttribInstanceMap, Map) == 0x000000, "Member 'FAttribInstanceMap::Map' has a wrong offset!");

// ScriptStruct AttributeSystem.DefaultAttribute
// 0x0048 (0x0048 - 0x0000)
struct FDefaultAttribute final
{
public:
	TSoftObjectPtr<class UAttributeDef>           Attrib;                                            // 0x0000(0x0028)(Edit, BlueprintVisible, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UEnum*                                  TierEnum;                                          // 0x0028(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<float>                                 ValuePerTier;                                      // 0x0030(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)
	float                                         Value;                                             // 0x0040(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bSetMaxAttrib;                                     // 0x0044(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_45[0x3];                                       // 0x0045(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FDefaultAttribute) == 0x000008, "Wrong alignment on FDefaultAttribute");
static_assert(sizeof(FDefaultAttribute) == 0x000048, "Wrong size on FDefaultAttribute");
static_assert(offsetof(FDefaultAttribute, Attrib) == 0x000000, "Member 'FDefaultAttribute::Attrib' has a wrong offset!");
static_assert(offsetof(FDefaultAttribute, TierEnum) == 0x000028, "Member 'FDefaultAttribute::TierEnum' has a wrong offset!");
static_assert(offsetof(FDefaultAttribute, ValuePerTier) == 0x000030, "Member 'FDefaultAttribute::ValuePerTier' has a wrong offset!");
static_assert(offsetof(FDefaultAttribute, Value) == 0x000040, "Member 'FDefaultAttribute::Value' has a wrong offset!");
static_assert(offsetof(FDefaultAttribute, bSetMaxAttrib) == 0x000044, "Member 'FDefaultAttribute::bSetMaxAttrib' has a wrong offset!");

}

