#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: CH_Huminoid_AnimBP_Stripped

#include "Basic.hpp"

#include "ControlRig_structs.hpp"
#include "Engine_structs.hpp"
#include "Engine_classes.hpp"
#include "AnimGraphRuntime_structs.hpp"
#include "CoreUObject_structs.hpp"
#include "ENUM_DeathBlowType_structs.hpp"
#include "ENUM_Emotions_structs.hpp"


namespace SDK
{

// AnimBlueprintGeneratedClass CH_Huminoid_AnimBP_Stripped.CH_Huminoid_AnimBP_Stripped_C
// 0x1830 (0x1AF0 - 0x02C0)
class UCH_Huminoid_AnimBP_Stripped_C : public UAnimInstance
{
public:
	uint8                                         Pad_2B8[0x8];                                      // 0x02B8(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x02C0(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	struct FAnimNode_Slot                         AnimGraphNode_Slot_5;                              // 0x02C8(0x0048)()
	struct FAnimNode_PoseSnapshot                 AnimGraphNode_PoseSnapshot;                        // 0x0310(0x0090)()
	struct FAnimNode_Slot                         AnimGraphNode_Slot_4;                              // 0x03A0(0x0048)()
	struct FAnimNode_Slot                         AnimGraphNode_Slot_3;                              // 0x03E8(0x0048)()
	struct FAnimNode_BlendSpacePlayer             AnimGraphNode_BlendSpacePlayer_2;                  // 0x0430(0x00E8)()
	struct FAnimNode_BlendListByBool              AnimGraphNode_BlendListByBool_4;                   // 0x0518(0x00A0)()
	struct FAnimNode_SaveCachedPose               AnimGraphNode_SaveCachedPose_1;                    // 0x05B8(0x0158)()
	struct FAnimNode_LayeredBoneBlend             AnimGraphNode_LayeredBoneBlend_1;                  // 0x0710(0x00C0)()
	struct FAnimNode_BlendListByBool              AnimGraphNode_BlendListByBool_3;                   // 0x07D0(0x00A0)()
	struct FAnimNode_Slot                         AnimGraphNode_Slot_2;                              // 0x0870(0x0048)()
	struct FAnimNode_BlendSpacePlayer             AnimGraphNode_BlendSpacePlayer_1;                  // 0x08B8(0x00E8)()
	struct FAnimNode_BlendListByBool              AnimGraphNode_BlendListByBool_2;                   // 0x09A0(0x00A0)()
	struct FAnimNode_UseCachedPose                AnimGraphNode_UseCachedPose_3;                     // 0x0A40(0x0028)()
	struct FAnimNode_Slot                         AnimGraphNode_Slot_1;                              // 0x0A68(0x0048)()
	struct FAnimNode_UseCachedPose                AnimGraphNode_UseCachedPose_2;                     // 0x0AB0(0x0028)()
	struct FAnimNode_ControlRig                   AnimGraphNode_ControlRig_1;                        // 0x0AD8(0x0368)()
	struct FAnimNode_SequencePlayer               AnimGraphNode_SequencePlayer_2;                    // 0x0E40(0x0080)()
	struct FAnimNode_BlendListByBool              AnimGraphNode_BlendListByBool_1;                   // 0x0EC0(0x00A0)()
	struct FAnimNode_Root                         AnimGraphNode_Root;                                // 0x0F60(0x0030)()
	struct FAnimNode_SaveCachedPose               AnimGraphNode_SaveCachedPose;                      // 0x0F90(0x0158)()
	struct FAnimNode_UseCachedPose                AnimGraphNode_UseCachedPose_1;                     // 0x10E8(0x0028)()
	struct FAnimNode_UseCachedPose                AnimGraphNode_UseCachedPose;                       // 0x1110(0x0028)()
	struct FAnimNode_Slot                         AnimGraphNode_Slot;                                // 0x1138(0x0048)()
	struct FAnimNode_LayeredBoneBlend             AnimGraphNode_LayeredBoneBlend;                    // 0x1180(0x00C0)()
	struct FAnimNode_TransitionResult             AnimGraphNode_TransitionResult_1;                  // 0x1240(0x0028)()
	struct FAnimNode_TransitionResult             AnimGraphNode_TransitionResult;                    // 0x1268(0x0028)()
	struct FAnimNode_BlendSpacePlayer             AnimGraphNode_BlendSpacePlayer;                    // 0x1290(0x00E8)()
	struct FAnimNode_StateResult                  AnimGraphNode_StateResult_1;                       // 0x1378(0x0030)()
	struct FAnimNode_SequencePlayer               AnimGraphNode_SequencePlayer_1;                    // 0x13A8(0x0080)()
	struct FAnimNode_SequencePlayer               AnimGraphNode_SequencePlayer;                      // 0x1428(0x0080)()
	struct FAnimNode_BlendListByBool              AnimGraphNode_BlendListByBool;                     // 0x14A8(0x00A0)()
	struct FAnimNode_StateResult                  AnimGraphNode_StateResult;                         // 0x1548(0x0030)()
	struct FAnimNode_StateMachine                 AnimGraphNode_StateMachine;                        // 0x1578(0x00B0)()
	struct FAnimNode_ControlRig                   AnimGraphNode_ControlRig;                          // 0x1628(0x0368)()
	float                                         __CustomProperty_HeadMultiply_54976D47487C3E96675E04B89A7AE3A4; // 0x1990(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         __CustomProperty_NoiseAmplitude_54976D47487C3E96675E04B89A7AE3A4; // 0x1994(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         __CustomProperty_VoiceAmplitude_54976D47487C3E96675E04B89A7AE3A4; // 0x1998(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                __CustomProperty_ImpactImpulse_7779510B4BAAAE749F5B59BBD91CB263; // 0x199C(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         __CustomProperty_ImpactStrength_7779510B4BAAAE749F5B59BBD91CB263; // 0x19A8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                __CustomProperty_ImpactLocation_7779510B4BAAAE749F5B59BBD91CB263; // 0x19AC(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          __CustomProperty_weapon_7779510B4BAAAE749F5B59BBD91CB263; // 0x19B8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_19B9[0x3];                                     // 0x19B9(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                __CustomProperty_MovementVector_7779510B4BAAAE749F5B59BBD91CB263; // 0x19BC(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          __CustomProperty_rifle_7779510B4BAAAE749F5B59BBD91CB263; // 0x19C8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_19C9[0x3];                                     // 0x19C9(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                __CustomProperty_LookAtLocation_7779510B4BAAAE749F5B59BBD91CB263; // 0x19CC(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         __CustomProperty_LookAtAlpha_7779510B4BAAAE749F5B59BBD91CB263; // 0x19D8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ENUM_DeathBlowType                            DeathBlow;                                         // 0x19DC(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          IsAlive;                                           // 0x19DD(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_19DE[0x2];                                     // 0x19DE(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         MovementSpeed;                                     // 0x19E0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         MovementAngle;                                     // 0x19E4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                SmoothLookAtLocation;                              // 0x19E8(0x000C)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          EnableLookAt;                                      // 0x19F4(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_19F5[0x3];                                     // 0x19F5(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                LookAtLocation;                                    // 0x19F8(0x000C)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         LookAtAlpha;                                       // 0x1A04(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         VoiceAmplitude;                                    // 0x1A08(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1A0C[0x4];                                     // 0x1A0C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class APAWN_Enemy_C*                          PawnEnemy;                                         // 0x1A10(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         DeltaSeconds;                                      // 0x1A18(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         LookAtLerpRate;                                    // 0x1A1C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class USkeletalMeshComponent*                 Mesh;                                              // 0x1A20(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UCapsuleComponent*                      CapsuleComponent;                                  // 0x1A28(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               CurrentRotation;                                   // 0x1A30(0x000C)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	ENUM_Emotions                                 Stance;                                            // 0x1A3C(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          IsMoving;                                          // 0x1A3D(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          UseIdleOverride;                                   // 0x1A3E(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_1A3F[0x1];                                     // 0x1A3F(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	class UAnimSequenceBase*                      Idle_Override;                                     // 0x1A40(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          HasRifle;                                          // 0x1A48(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          HasWeapon;                                         // 0x1A49(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_1A4A[0x2];                                     // 0x1A4A(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         ControlRigAlpha;                                   // 0x1A4C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          IsCatatonic;                                       // 0x1A50(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_1A51[0x3];                                     // 0x1A51(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                Velocity;                                          // 0x1A54(0x000C)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          IsSprinting;                                       // 0x1A60(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_1A61[0x7];                                     // 0x1A61(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UBlendSpaceBase*                        LocomotionBlendspace;                              // 0x1A68(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UBlendSpaceBase*                        Sprinting_Blendspace;                              // 0x1A70(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1A78[0x8];                                     // 0x1A78(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FQuat                                  FinalRotation;                                     // 0x1A80(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	struct FVector                                Impulse;                                           // 0x1A90(0x000C)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                Impact_Location;                                   // 0x1A9C(0x000C)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Damage_Amount;                                     // 0x1AA8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1AAC[0x4];                                     // 0x1AAC(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UAnimSequenceBase*                      StunnedAnimSequence;                               // 0x1AB0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          UseStunnedSequence;                                // 0x1AB8(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_1AB9[0x3];                                     // 0x1AB9(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         DesiredTurnAngle;                                  // 0x1ABC(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CanTurn;                                           // 0x1AC0(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_1AC1[0x3];                                     // 0x1AC1(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         TurnDelta;                                         // 0x1AC4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         TurnDeltaCached;                                   // 0x1AC8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         TurnTarget;                                        // 0x1ACC(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         TurnTargetChached;                                 // 0x1AD0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         TurnTargetError;                                   // 0x1AD4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UBlendSpaceBase*                        Turning_BlendSpace;                                // 0x1AD8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UAnimSequenceBase*                      Idle_Sequence;                                     // 0x1AE0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Noise_Amplitude;                                   // 0x1AE8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Head_Multiply;                                     // 0x1AEC(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

public:
	void ExecuteUbergraph_CH_Huminoid_AnimBP_Stripped(int32 EntryPoint);
	void AnimNotify_SetDeathPose();
	void GetReferences();
	void BlueprintBeginPlay();
	void BlueprintUpdateAnimation(float DeltaTimeX);
	void EvaluateGraphExposedInputs_ExecuteUbergraph_CH_Huminoid_AnimBP_Stripped_AnimGraphNode_TransitionResult_1A71C1AC4C4E45626AE340A347E2AE2C();
	void EvaluateGraphExposedInputs_ExecuteUbergraph_CH_Huminoid_AnimBP_Stripped_AnimGraphNode_TransitionResult_3B3A3A964E40948AC56E44A4C34F1025();
	void AnimGraph(struct FPoseLink* AnimGraph_0);
	void ReceiveImpact(const struct FVector& Impulse_0, const struct FVector& ImpactLocation, const struct FVector& ImpactNormal, class FName BoneName, const class FString& DamageType, float DamageAmount, float FlinchTime, bool* Result);
	void SetIsAlive(bool IsAlive_0, bool* Result);
	void SetMovementParameters(const struct FVector& Velocity_0, const struct FRotator& Rotation, const struct FRotator& DesiredRotation, bool* Result);
	void SetLookAtAlpha(float Alpha, bool* Result);
	void SetLookAtLocation(const struct FVector& Location, bool* Result);
	void ReceiveDeathBlow(ENUM_DeathBlowType BodyPart, bool* Result);
	void SetStandingTurn(float SignedAngleToTarget, bool IsStanding, bool* Result);
	void SetCatatonic(bool State, bool* Result);
	void SetStance(ENUM_Emotions Stance_0, bool* Result);
	void GetStance(ENUM_Emotions* Stance_0);
	void GetRotation(struct FRotator* AnimRotationPerSecond, float* AnimRotationAlpha);
	void SetRelativeAimAngleOffset(float YawOffset, float PitchOffset, float Alpha, bool* Result);
	void SetIdleOverrideSequence(class UAnimSequenceBase* IdleOverride, bool* Result);
	void GetIdleOverrideSequence(class UAnimSequenceBase** IdleOverride);
	void SetAimTarget(class UOBJ_EnemyTarget_C* Target, bool* Result);
	void GetAimTarget(class UOBJ_EnemyTarget_C** Target);
	void SetTravelMode(bool TravelModeOn, bool* Result);
	void SetSprintEnabled(bool SprintEnabled, bool* Result);
	void SetStunnedSequence(class UAnimSequence* StunnedSequence, bool* Result);
	void IsStunned(bool* Result);
	void SetVoiceAmplitude(float VoiceAmplitude_0, bool* Result);

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"CH_Huminoid_AnimBP_Stripped_C">();
	}
	static class UCH_Huminoid_AnimBP_Stripped_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<UCH_Huminoid_AnimBP_Stripped_C>();
	}
};
static_assert(alignof(UCH_Huminoid_AnimBP_Stripped_C) == 0x000010, "Wrong alignment on UCH_Huminoid_AnimBP_Stripped_C");
static_assert(sizeof(UCH_Huminoid_AnimBP_Stripped_C) == 0x001AF0, "Wrong size on UCH_Huminoid_AnimBP_Stripped_C");
static_assert(offsetof(UCH_Huminoid_AnimBP_Stripped_C, UberGraphFrame) == 0x0002C0, "Member 'UCH_Huminoid_AnimBP_Stripped_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(UCH_Huminoid_AnimBP_Stripped_C, AnimGraphNode_Slot_5) == 0x0002C8, "Member 'UCH_Huminoid_AnimBP_Stripped_C::AnimGraphNode_Slot_5' has a wrong offset!");
static_assert(offsetof(UCH_Huminoid_AnimBP_Stripped_C, AnimGraphNode_PoseSnapshot) == 0x000310, "Member 'UCH_Huminoid_AnimBP_Stripped_C::AnimGraphNode_PoseSnapshot' has a wrong offset!");
static_assert(offsetof(UCH_Huminoid_AnimBP_Stripped_C, AnimGraphNode_Slot_4) == 0x0003A0, "Member 'UCH_Huminoid_AnimBP_Stripped_C::AnimGraphNode_Slot_4' has a wrong offset!");
static_assert(offsetof(UCH_Huminoid_AnimBP_Stripped_C, AnimGraphNode_Slot_3) == 0x0003E8, "Member 'UCH_Huminoid_AnimBP_Stripped_C::AnimGraphNode_Slot_3' has a wrong offset!");
static_assert(offsetof(UCH_Huminoid_AnimBP_Stripped_C, AnimGraphNode_BlendSpacePlayer_2) == 0x000430, "Member 'UCH_Huminoid_AnimBP_Stripped_C::AnimGraphNode_BlendSpacePlayer_2' has a wrong offset!");
static_assert(offsetof(UCH_Huminoid_AnimBP_Stripped_C, AnimGraphNode_BlendListByBool_4) == 0x000518, "Member 'UCH_Huminoid_AnimBP_Stripped_C::AnimGraphNode_BlendListByBool_4' has a wrong offset!");
static_assert(offsetof(UCH_Huminoid_AnimBP_Stripped_C, AnimGraphNode_SaveCachedPose_1) == 0x0005B8, "Member 'UCH_Huminoid_AnimBP_Stripped_C::AnimGraphNode_SaveCachedPose_1' has a wrong offset!");
static_assert(offsetof(UCH_Huminoid_AnimBP_Stripped_C, AnimGraphNode_LayeredBoneBlend_1) == 0x000710, "Member 'UCH_Huminoid_AnimBP_Stripped_C::AnimGraphNode_LayeredBoneBlend_1' has a wrong offset!");
static_assert(offsetof(UCH_Huminoid_AnimBP_Stripped_C, AnimGraphNode_BlendListByBool_3) == 0x0007D0, "Member 'UCH_Huminoid_AnimBP_Stripped_C::AnimGraphNode_BlendListByBool_3' has a wrong offset!");
static_assert(offsetof(UCH_Huminoid_AnimBP_Stripped_C, AnimGraphNode_Slot_2) == 0x000870, "Member 'UCH_Huminoid_AnimBP_Stripped_C::AnimGraphNode_Slot_2' has a wrong offset!");
static_assert(offsetof(UCH_Huminoid_AnimBP_Stripped_C, AnimGraphNode_BlendSpacePlayer_1) == 0x0008B8, "Member 'UCH_Huminoid_AnimBP_Stripped_C::AnimGraphNode_BlendSpacePlayer_1' has a wrong offset!");
static_assert(offsetof(UCH_Huminoid_AnimBP_Stripped_C, AnimGraphNode_BlendListByBool_2) == 0x0009A0, "Member 'UCH_Huminoid_AnimBP_Stripped_C::AnimGraphNode_BlendListByBool_2' has a wrong offset!");
static_assert(offsetof(UCH_Huminoid_AnimBP_Stripped_C, AnimGraphNode_UseCachedPose_3) == 0x000A40, "Member 'UCH_Huminoid_AnimBP_Stripped_C::AnimGraphNode_UseCachedPose_3' has a wrong offset!");
static_assert(offsetof(UCH_Huminoid_AnimBP_Stripped_C, AnimGraphNode_Slot_1) == 0x000A68, "Member 'UCH_Huminoid_AnimBP_Stripped_C::AnimGraphNode_Slot_1' has a wrong offset!");
static_assert(offsetof(UCH_Huminoid_AnimBP_Stripped_C, AnimGraphNode_UseCachedPose_2) == 0x000AB0, "Member 'UCH_Huminoid_AnimBP_Stripped_C::AnimGraphNode_UseCachedPose_2' has a wrong offset!");
static_assert(offsetof(UCH_Huminoid_AnimBP_Stripped_C, AnimGraphNode_ControlRig_1) == 0x000AD8, "Member 'UCH_Huminoid_AnimBP_Stripped_C::AnimGraphNode_ControlRig_1' has a wrong offset!");
static_assert(offsetof(UCH_Huminoid_AnimBP_Stripped_C, AnimGraphNode_SequencePlayer_2) == 0x000E40, "Member 'UCH_Huminoid_AnimBP_Stripped_C::AnimGraphNode_SequencePlayer_2' has a wrong offset!");
static_assert(offsetof(UCH_Huminoid_AnimBP_Stripped_C, AnimGraphNode_BlendListByBool_1) == 0x000EC0, "Member 'UCH_Huminoid_AnimBP_Stripped_C::AnimGraphNode_BlendListByBool_1' has a wrong offset!");
static_assert(offsetof(UCH_Huminoid_AnimBP_Stripped_C, AnimGraphNode_Root) == 0x000F60, "Member 'UCH_Huminoid_AnimBP_Stripped_C::AnimGraphNode_Root' has a wrong offset!");
static_assert(offsetof(UCH_Huminoid_AnimBP_Stripped_C, AnimGraphNode_SaveCachedPose) == 0x000F90, "Member 'UCH_Huminoid_AnimBP_Stripped_C::AnimGraphNode_SaveCachedPose' has a wrong offset!");
static_assert(offsetof(UCH_Huminoid_AnimBP_Stripped_C, AnimGraphNode_UseCachedPose_1) == 0x0010E8, "Member 'UCH_Huminoid_AnimBP_Stripped_C::AnimGraphNode_UseCachedPose_1' has a wrong offset!");
static_assert(offsetof(UCH_Huminoid_AnimBP_Stripped_C, AnimGraphNode_UseCachedPose) == 0x001110, "Member 'UCH_Huminoid_AnimBP_Stripped_C::AnimGraphNode_UseCachedPose' has a wrong offset!");
static_assert(offsetof(UCH_Huminoid_AnimBP_Stripped_C, AnimGraphNode_Slot) == 0x001138, "Member 'UCH_Huminoid_AnimBP_Stripped_C::AnimGraphNode_Slot' has a wrong offset!");
static_assert(offsetof(UCH_Huminoid_AnimBP_Stripped_C, AnimGraphNode_LayeredBoneBlend) == 0x001180, "Member 'UCH_Huminoid_AnimBP_Stripped_C::AnimGraphNode_LayeredBoneBlend' has a wrong offset!");
static_assert(offsetof(UCH_Huminoid_AnimBP_Stripped_C, AnimGraphNode_TransitionResult_1) == 0x001240, "Member 'UCH_Huminoid_AnimBP_Stripped_C::AnimGraphNode_TransitionResult_1' has a wrong offset!");
static_assert(offsetof(UCH_Huminoid_AnimBP_Stripped_C, AnimGraphNode_TransitionResult) == 0x001268, "Member 'UCH_Huminoid_AnimBP_Stripped_C::AnimGraphNode_TransitionResult' has a wrong offset!");
static_assert(offsetof(UCH_Huminoid_AnimBP_Stripped_C, AnimGraphNode_BlendSpacePlayer) == 0x001290, "Member 'UCH_Huminoid_AnimBP_Stripped_C::AnimGraphNode_BlendSpacePlayer' has a wrong offset!");
static_assert(offsetof(UCH_Huminoid_AnimBP_Stripped_C, AnimGraphNode_StateResult_1) == 0x001378, "Member 'UCH_Huminoid_AnimBP_Stripped_C::AnimGraphNode_StateResult_1' has a wrong offset!");
static_assert(offsetof(UCH_Huminoid_AnimBP_Stripped_C, AnimGraphNode_SequencePlayer_1) == 0x0013A8, "Member 'UCH_Huminoid_AnimBP_Stripped_C::AnimGraphNode_SequencePlayer_1' has a wrong offset!");
static_assert(offsetof(UCH_Huminoid_AnimBP_Stripped_C, AnimGraphNode_SequencePlayer) == 0x001428, "Member 'UCH_Huminoid_AnimBP_Stripped_C::AnimGraphNode_SequencePlayer' has a wrong offset!");
static_assert(offsetof(UCH_Huminoid_AnimBP_Stripped_C, AnimGraphNode_BlendListByBool) == 0x0014A8, "Member 'UCH_Huminoid_AnimBP_Stripped_C::AnimGraphNode_BlendListByBool' has a wrong offset!");
static_assert(offsetof(UCH_Huminoid_AnimBP_Stripped_C, AnimGraphNode_StateResult) == 0x001548, "Member 'UCH_Huminoid_AnimBP_Stripped_C::AnimGraphNode_StateResult' has a wrong offset!");
static_assert(offsetof(UCH_Huminoid_AnimBP_Stripped_C, AnimGraphNode_StateMachine) == 0x001578, "Member 'UCH_Huminoid_AnimBP_Stripped_C::AnimGraphNode_StateMachine' has a wrong offset!");
static_assert(offsetof(UCH_Huminoid_AnimBP_Stripped_C, AnimGraphNode_ControlRig) == 0x001628, "Member 'UCH_Huminoid_AnimBP_Stripped_C::AnimGraphNode_ControlRig' has a wrong offset!");
static_assert(offsetof(UCH_Huminoid_AnimBP_Stripped_C, __CustomProperty_HeadMultiply_54976D47487C3E96675E04B89A7AE3A4) == 0x001990, "Member 'UCH_Huminoid_AnimBP_Stripped_C::__CustomProperty_HeadMultiply_54976D47487C3E96675E04B89A7AE3A4' has a wrong offset!");
static_assert(offsetof(UCH_Huminoid_AnimBP_Stripped_C, __CustomProperty_NoiseAmplitude_54976D47487C3E96675E04B89A7AE3A4) == 0x001994, "Member 'UCH_Huminoid_AnimBP_Stripped_C::__CustomProperty_NoiseAmplitude_54976D47487C3E96675E04B89A7AE3A4' has a wrong offset!");
static_assert(offsetof(UCH_Huminoid_AnimBP_Stripped_C, __CustomProperty_VoiceAmplitude_54976D47487C3E96675E04B89A7AE3A4) == 0x001998, "Member 'UCH_Huminoid_AnimBP_Stripped_C::__CustomProperty_VoiceAmplitude_54976D47487C3E96675E04B89A7AE3A4' has a wrong offset!");
static_assert(offsetof(UCH_Huminoid_AnimBP_Stripped_C, __CustomProperty_ImpactImpulse_7779510B4BAAAE749F5B59BBD91CB263) == 0x00199C, "Member 'UCH_Huminoid_AnimBP_Stripped_C::__CustomProperty_ImpactImpulse_7779510B4BAAAE749F5B59BBD91CB263' has a wrong offset!");
static_assert(offsetof(UCH_Huminoid_AnimBP_Stripped_C, __CustomProperty_ImpactStrength_7779510B4BAAAE749F5B59BBD91CB263) == 0x0019A8, "Member 'UCH_Huminoid_AnimBP_Stripped_C::__CustomProperty_ImpactStrength_7779510B4BAAAE749F5B59BBD91CB263' has a wrong offset!");
static_assert(offsetof(UCH_Huminoid_AnimBP_Stripped_C, __CustomProperty_ImpactLocation_7779510B4BAAAE749F5B59BBD91CB263) == 0x0019AC, "Member 'UCH_Huminoid_AnimBP_Stripped_C::__CustomProperty_ImpactLocation_7779510B4BAAAE749F5B59BBD91CB263' has a wrong offset!");
static_assert(offsetof(UCH_Huminoid_AnimBP_Stripped_C, __CustomProperty_weapon_7779510B4BAAAE749F5B59BBD91CB263) == 0x0019B8, "Member 'UCH_Huminoid_AnimBP_Stripped_C::__CustomProperty_weapon_7779510B4BAAAE749F5B59BBD91CB263' has a wrong offset!");
static_assert(offsetof(UCH_Huminoid_AnimBP_Stripped_C, __CustomProperty_MovementVector_7779510B4BAAAE749F5B59BBD91CB263) == 0x0019BC, "Member 'UCH_Huminoid_AnimBP_Stripped_C::__CustomProperty_MovementVector_7779510B4BAAAE749F5B59BBD91CB263' has a wrong offset!");
static_assert(offsetof(UCH_Huminoid_AnimBP_Stripped_C, __CustomProperty_rifle_7779510B4BAAAE749F5B59BBD91CB263) == 0x0019C8, "Member 'UCH_Huminoid_AnimBP_Stripped_C::__CustomProperty_rifle_7779510B4BAAAE749F5B59BBD91CB263' has a wrong offset!");
static_assert(offsetof(UCH_Huminoid_AnimBP_Stripped_C, __CustomProperty_LookAtLocation_7779510B4BAAAE749F5B59BBD91CB263) == 0x0019CC, "Member 'UCH_Huminoid_AnimBP_Stripped_C::__CustomProperty_LookAtLocation_7779510B4BAAAE749F5B59BBD91CB263' has a wrong offset!");
static_assert(offsetof(UCH_Huminoid_AnimBP_Stripped_C, __CustomProperty_LookAtAlpha_7779510B4BAAAE749F5B59BBD91CB263) == 0x0019D8, "Member 'UCH_Huminoid_AnimBP_Stripped_C::__CustomProperty_LookAtAlpha_7779510B4BAAAE749F5B59BBD91CB263' has a wrong offset!");
static_assert(offsetof(UCH_Huminoid_AnimBP_Stripped_C, DeathBlow) == 0x0019DC, "Member 'UCH_Huminoid_AnimBP_Stripped_C::DeathBlow' has a wrong offset!");
static_assert(offsetof(UCH_Huminoid_AnimBP_Stripped_C, IsAlive) == 0x0019DD, "Member 'UCH_Huminoid_AnimBP_Stripped_C::IsAlive' has a wrong offset!");
static_assert(offsetof(UCH_Huminoid_AnimBP_Stripped_C, MovementSpeed) == 0x0019E0, "Member 'UCH_Huminoid_AnimBP_Stripped_C::MovementSpeed' has a wrong offset!");
static_assert(offsetof(UCH_Huminoid_AnimBP_Stripped_C, MovementAngle) == 0x0019E4, "Member 'UCH_Huminoid_AnimBP_Stripped_C::MovementAngle' has a wrong offset!");
static_assert(offsetof(UCH_Huminoid_AnimBP_Stripped_C, SmoothLookAtLocation) == 0x0019E8, "Member 'UCH_Huminoid_AnimBP_Stripped_C::SmoothLookAtLocation' has a wrong offset!");
static_assert(offsetof(UCH_Huminoid_AnimBP_Stripped_C, EnableLookAt) == 0x0019F4, "Member 'UCH_Huminoid_AnimBP_Stripped_C::EnableLookAt' has a wrong offset!");
static_assert(offsetof(UCH_Huminoid_AnimBP_Stripped_C, LookAtLocation) == 0x0019F8, "Member 'UCH_Huminoid_AnimBP_Stripped_C::LookAtLocation' has a wrong offset!");
static_assert(offsetof(UCH_Huminoid_AnimBP_Stripped_C, LookAtAlpha) == 0x001A04, "Member 'UCH_Huminoid_AnimBP_Stripped_C::LookAtAlpha' has a wrong offset!");
static_assert(offsetof(UCH_Huminoid_AnimBP_Stripped_C, VoiceAmplitude) == 0x001A08, "Member 'UCH_Huminoid_AnimBP_Stripped_C::VoiceAmplitude' has a wrong offset!");
static_assert(offsetof(UCH_Huminoid_AnimBP_Stripped_C, PawnEnemy) == 0x001A10, "Member 'UCH_Huminoid_AnimBP_Stripped_C::PawnEnemy' has a wrong offset!");
static_assert(offsetof(UCH_Huminoid_AnimBP_Stripped_C, DeltaSeconds) == 0x001A18, "Member 'UCH_Huminoid_AnimBP_Stripped_C::DeltaSeconds' has a wrong offset!");
static_assert(offsetof(UCH_Huminoid_AnimBP_Stripped_C, LookAtLerpRate) == 0x001A1C, "Member 'UCH_Huminoid_AnimBP_Stripped_C::LookAtLerpRate' has a wrong offset!");
static_assert(offsetof(UCH_Huminoid_AnimBP_Stripped_C, Mesh) == 0x001A20, "Member 'UCH_Huminoid_AnimBP_Stripped_C::Mesh' has a wrong offset!");
static_assert(offsetof(UCH_Huminoid_AnimBP_Stripped_C, CapsuleComponent) == 0x001A28, "Member 'UCH_Huminoid_AnimBP_Stripped_C::CapsuleComponent' has a wrong offset!");
static_assert(offsetof(UCH_Huminoid_AnimBP_Stripped_C, CurrentRotation) == 0x001A30, "Member 'UCH_Huminoid_AnimBP_Stripped_C::CurrentRotation' has a wrong offset!");
static_assert(offsetof(UCH_Huminoid_AnimBP_Stripped_C, Stance) == 0x001A3C, "Member 'UCH_Huminoid_AnimBP_Stripped_C::Stance' has a wrong offset!");
static_assert(offsetof(UCH_Huminoid_AnimBP_Stripped_C, IsMoving) == 0x001A3D, "Member 'UCH_Huminoid_AnimBP_Stripped_C::IsMoving' has a wrong offset!");
static_assert(offsetof(UCH_Huminoid_AnimBP_Stripped_C, UseIdleOverride) == 0x001A3E, "Member 'UCH_Huminoid_AnimBP_Stripped_C::UseIdleOverride' has a wrong offset!");
static_assert(offsetof(UCH_Huminoid_AnimBP_Stripped_C, Idle_Override) == 0x001A40, "Member 'UCH_Huminoid_AnimBP_Stripped_C::Idle_Override' has a wrong offset!");
static_assert(offsetof(UCH_Huminoid_AnimBP_Stripped_C, HasRifle) == 0x001A48, "Member 'UCH_Huminoid_AnimBP_Stripped_C::HasRifle' has a wrong offset!");
static_assert(offsetof(UCH_Huminoid_AnimBP_Stripped_C, HasWeapon) == 0x001A49, "Member 'UCH_Huminoid_AnimBP_Stripped_C::HasWeapon' has a wrong offset!");
static_assert(offsetof(UCH_Huminoid_AnimBP_Stripped_C, ControlRigAlpha) == 0x001A4C, "Member 'UCH_Huminoid_AnimBP_Stripped_C::ControlRigAlpha' has a wrong offset!");
static_assert(offsetof(UCH_Huminoid_AnimBP_Stripped_C, IsCatatonic) == 0x001A50, "Member 'UCH_Huminoid_AnimBP_Stripped_C::IsCatatonic' has a wrong offset!");
static_assert(offsetof(UCH_Huminoid_AnimBP_Stripped_C, Velocity) == 0x001A54, "Member 'UCH_Huminoid_AnimBP_Stripped_C::Velocity' has a wrong offset!");
static_assert(offsetof(UCH_Huminoid_AnimBP_Stripped_C, IsSprinting) == 0x001A60, "Member 'UCH_Huminoid_AnimBP_Stripped_C::IsSprinting' has a wrong offset!");
static_assert(offsetof(UCH_Huminoid_AnimBP_Stripped_C, LocomotionBlendspace) == 0x001A68, "Member 'UCH_Huminoid_AnimBP_Stripped_C::LocomotionBlendspace' has a wrong offset!");
static_assert(offsetof(UCH_Huminoid_AnimBP_Stripped_C, Sprinting_Blendspace) == 0x001A70, "Member 'UCH_Huminoid_AnimBP_Stripped_C::Sprinting_Blendspace' has a wrong offset!");
static_assert(offsetof(UCH_Huminoid_AnimBP_Stripped_C, FinalRotation) == 0x001A80, "Member 'UCH_Huminoid_AnimBP_Stripped_C::FinalRotation' has a wrong offset!");
static_assert(offsetof(UCH_Huminoid_AnimBP_Stripped_C, Impulse) == 0x001A90, "Member 'UCH_Huminoid_AnimBP_Stripped_C::Impulse' has a wrong offset!");
static_assert(offsetof(UCH_Huminoid_AnimBP_Stripped_C, Impact_Location) == 0x001A9C, "Member 'UCH_Huminoid_AnimBP_Stripped_C::Impact_Location' has a wrong offset!");
static_assert(offsetof(UCH_Huminoid_AnimBP_Stripped_C, Damage_Amount) == 0x001AA8, "Member 'UCH_Huminoid_AnimBP_Stripped_C::Damage_Amount' has a wrong offset!");
static_assert(offsetof(UCH_Huminoid_AnimBP_Stripped_C, StunnedAnimSequence) == 0x001AB0, "Member 'UCH_Huminoid_AnimBP_Stripped_C::StunnedAnimSequence' has a wrong offset!");
static_assert(offsetof(UCH_Huminoid_AnimBP_Stripped_C, UseStunnedSequence) == 0x001AB8, "Member 'UCH_Huminoid_AnimBP_Stripped_C::UseStunnedSequence' has a wrong offset!");
static_assert(offsetof(UCH_Huminoid_AnimBP_Stripped_C, DesiredTurnAngle) == 0x001ABC, "Member 'UCH_Huminoid_AnimBP_Stripped_C::DesiredTurnAngle' has a wrong offset!");
static_assert(offsetof(UCH_Huminoid_AnimBP_Stripped_C, CanTurn) == 0x001AC0, "Member 'UCH_Huminoid_AnimBP_Stripped_C::CanTurn' has a wrong offset!");
static_assert(offsetof(UCH_Huminoid_AnimBP_Stripped_C, TurnDelta) == 0x001AC4, "Member 'UCH_Huminoid_AnimBP_Stripped_C::TurnDelta' has a wrong offset!");
static_assert(offsetof(UCH_Huminoid_AnimBP_Stripped_C, TurnDeltaCached) == 0x001AC8, "Member 'UCH_Huminoid_AnimBP_Stripped_C::TurnDeltaCached' has a wrong offset!");
static_assert(offsetof(UCH_Huminoid_AnimBP_Stripped_C, TurnTarget) == 0x001ACC, "Member 'UCH_Huminoid_AnimBP_Stripped_C::TurnTarget' has a wrong offset!");
static_assert(offsetof(UCH_Huminoid_AnimBP_Stripped_C, TurnTargetChached) == 0x001AD0, "Member 'UCH_Huminoid_AnimBP_Stripped_C::TurnTargetChached' has a wrong offset!");
static_assert(offsetof(UCH_Huminoid_AnimBP_Stripped_C, TurnTargetError) == 0x001AD4, "Member 'UCH_Huminoid_AnimBP_Stripped_C::TurnTargetError' has a wrong offset!");
static_assert(offsetof(UCH_Huminoid_AnimBP_Stripped_C, Turning_BlendSpace) == 0x001AD8, "Member 'UCH_Huminoid_AnimBP_Stripped_C::Turning_BlendSpace' has a wrong offset!");
static_assert(offsetof(UCH_Huminoid_AnimBP_Stripped_C, Idle_Sequence) == 0x001AE0, "Member 'UCH_Huminoid_AnimBP_Stripped_C::Idle_Sequence' has a wrong offset!");
static_assert(offsetof(UCH_Huminoid_AnimBP_Stripped_C, Noise_Amplitude) == 0x001AE8, "Member 'UCH_Huminoid_AnimBP_Stripped_C::Noise_Amplitude' has a wrong offset!");
static_assert(offsetof(UCH_Huminoid_AnimBP_Stripped_C, Head_Multiply) == 0x001AEC, "Member 'UCH_Huminoid_AnimBP_Stripped_C::Head_Multiply' has a wrong offset!");

}

