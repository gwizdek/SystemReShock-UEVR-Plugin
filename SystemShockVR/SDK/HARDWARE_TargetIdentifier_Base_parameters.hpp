#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: HARDWARE_TargetIdentifier_Base

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "STRUCT_HardwareFeature_structs.hpp"
#include "CoreUObject_structs.hpp"
#include "AttributeSystem_structs.hpp"
#include "ENUM_EnemyType_structs.hpp"


namespace SDK::Params
{

// Function HARDWARE_TargetIdentifier_Base.HARDWARE_TargetIdentifier_Base_C.OnAcquiredTargetChanged__DelegateSignature
// 0x0008 (0x0008 - 0x0000)
struct HARDWARE_TargetIdentifier_Base_C_OnAcquiredTargetChanged__DelegateSignature final
{
public:
	class AActor*                                 Actor;                                             // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(HARDWARE_TargetIdentifier_Base_C_OnAcquiredTargetChanged__DelegateSignature) == 0x000008, "Wrong alignment on HARDWARE_TargetIdentifier_Base_C_OnAcquiredTargetChanged__DelegateSignature");
static_assert(sizeof(HARDWARE_TargetIdentifier_Base_C_OnAcquiredTargetChanged__DelegateSignature) == 0x000008, "Wrong size on HARDWARE_TargetIdentifier_Base_C_OnAcquiredTargetChanged__DelegateSignature");
static_assert(offsetof(HARDWARE_TargetIdentifier_Base_C_OnAcquiredTargetChanged__DelegateSignature, Actor) == 0x000000, "Member 'HARDWARE_TargetIdentifier_Base_C_OnAcquiredTargetChanged__DelegateSignature::Actor' has a wrong offset!");

// Function HARDWARE_TargetIdentifier_Base.HARDWARE_TargetIdentifier_Base_C.OnCandidateTargetChanged__DelegateSignature
// 0x0008 (0x0008 - 0x0000)
struct HARDWARE_TargetIdentifier_Base_C_OnCandidateTargetChanged__DelegateSignature final
{
public:
	class AActor*                                 Actor;                                             // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(HARDWARE_TargetIdentifier_Base_C_OnCandidateTargetChanged__DelegateSignature) == 0x000008, "Wrong alignment on HARDWARE_TargetIdentifier_Base_C_OnCandidateTargetChanged__DelegateSignature");
static_assert(sizeof(HARDWARE_TargetIdentifier_Base_C_OnCandidateTargetChanged__DelegateSignature) == 0x000008, "Wrong size on HARDWARE_TargetIdentifier_Base_C_OnCandidateTargetChanged__DelegateSignature");
static_assert(offsetof(HARDWARE_TargetIdentifier_Base_C_OnCandidateTargetChanged__DelegateSignature, Actor) == 0x000000, "Member 'HARDWARE_TargetIdentifier_Base_C_OnCandidateTargetChanged__DelegateSignature::Actor' has a wrong offset!");

// Function HARDWARE_TargetIdentifier_Base.HARDWARE_TargetIdentifier_Base_C.OnHackingProgressChanged__DelegateSignature
// 0x0004 (0x0004 - 0x0000)
struct HARDWARE_TargetIdentifier_Base_C_OnHackingProgressChanged__DelegateSignature final
{
public:
	float                                         Progress;                                          // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(HARDWARE_TargetIdentifier_Base_C_OnHackingProgressChanged__DelegateSignature) == 0x000004, "Wrong alignment on HARDWARE_TargetIdentifier_Base_C_OnHackingProgressChanged__DelegateSignature");
static_assert(sizeof(HARDWARE_TargetIdentifier_Base_C_OnHackingProgressChanged__DelegateSignature) == 0x000004, "Wrong size on HARDWARE_TargetIdentifier_Base_C_OnHackingProgressChanged__DelegateSignature");
static_assert(offsetof(HARDWARE_TargetIdentifier_Base_C_OnHackingProgressChanged__DelegateSignature, Progress) == 0x000000, "Member 'HARDWARE_TargetIdentifier_Base_C_OnHackingProgressChanged__DelegateSignature::Progress' has a wrong offset!");

// Function HARDWARE_TargetIdentifier_Base.HARDWARE_TargetIdentifier_Base_C.HasEnergyForHack
// 0x0020 (0x0020 - 0x0000)
struct HARDWARE_TargetIdentifier_Base_C_HasEnergyForHack final
{
public:
	bool                                          Result;                                            // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class APAWN_SystemShockCharacter_C*           CallFunc_GetOwnerCharacter_Character;              // 0x0008(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Conv_IntToFloat_ReturnValue;              // 0x0010(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_GetAttribValue_ReturnValue;               // 0x0014(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_GreaterEqual_FloatFloat_ReturnValue;      // 0x0018(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(HARDWARE_TargetIdentifier_Base_C_HasEnergyForHack) == 0x000008, "Wrong alignment on HARDWARE_TargetIdentifier_Base_C_HasEnergyForHack");
static_assert(sizeof(HARDWARE_TargetIdentifier_Base_C_HasEnergyForHack) == 0x000020, "Wrong size on HARDWARE_TargetIdentifier_Base_C_HasEnergyForHack");
static_assert(offsetof(HARDWARE_TargetIdentifier_Base_C_HasEnergyForHack, Result) == 0x000000, "Member 'HARDWARE_TargetIdentifier_Base_C_HasEnergyForHack::Result' has a wrong offset!");
static_assert(offsetof(HARDWARE_TargetIdentifier_Base_C_HasEnergyForHack, CallFunc_GetOwnerCharacter_Character) == 0x000008, "Member 'HARDWARE_TargetIdentifier_Base_C_HasEnergyForHack::CallFunc_GetOwnerCharacter_Character' has a wrong offset!");
static_assert(offsetof(HARDWARE_TargetIdentifier_Base_C_HasEnergyForHack, CallFunc_Conv_IntToFloat_ReturnValue) == 0x000010, "Member 'HARDWARE_TargetIdentifier_Base_C_HasEnergyForHack::CallFunc_Conv_IntToFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(HARDWARE_TargetIdentifier_Base_C_HasEnergyForHack, CallFunc_GetAttribValue_ReturnValue) == 0x000014, "Member 'HARDWARE_TargetIdentifier_Base_C_HasEnergyForHack::CallFunc_GetAttribValue_ReturnValue' has a wrong offset!");
static_assert(offsetof(HARDWARE_TargetIdentifier_Base_C_HasEnergyForHack, CallFunc_GreaterEqual_FloatFloat_ReturnValue) == 0x000018, "Member 'HARDWARE_TargetIdentifier_Base_C_HasEnergyForHack::CallFunc_GreaterEqual_FloatFloat_ReturnValue' has a wrong offset!");

// Function HARDWARE_TargetIdentifier_Base.HARDWARE_TargetIdentifier_Base_C.IsHackingSupported
// 0x000C (0x000C - 0x0000)
struct HARDWARE_TargetIdentifier_Base_C_IsHackingSupported final
{
public:
	bool                                          Result;                                            // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_GetVersionNumber_Version;                 // 0x0004(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_GreaterEqual_IntInt_ReturnValue;          // 0x0008(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(HARDWARE_TargetIdentifier_Base_C_IsHackingSupported) == 0x000004, "Wrong alignment on HARDWARE_TargetIdentifier_Base_C_IsHackingSupported");
static_assert(sizeof(HARDWARE_TargetIdentifier_Base_C_IsHackingSupported) == 0x00000C, "Wrong size on HARDWARE_TargetIdentifier_Base_C_IsHackingSupported");
static_assert(offsetof(HARDWARE_TargetIdentifier_Base_C_IsHackingSupported, Result) == 0x000000, "Member 'HARDWARE_TargetIdentifier_Base_C_IsHackingSupported::Result' has a wrong offset!");
static_assert(offsetof(HARDWARE_TargetIdentifier_Base_C_IsHackingSupported, CallFunc_GetVersionNumber_Version) == 0x000004, "Member 'HARDWARE_TargetIdentifier_Base_C_IsHackingSupported::CallFunc_GetVersionNumber_Version' has a wrong offset!");
static_assert(offsetof(HARDWARE_TargetIdentifier_Base_C_IsHackingSupported, CallFunc_GreaterEqual_IntInt_ReturnValue) == 0x000008, "Member 'HARDWARE_TargetIdentifier_Base_C_IsHackingSupported::CallFunc_GreaterEqual_IntInt_ReturnValue' has a wrong offset!");

// Function HARDWARE_TargetIdentifier_Base.HARDWARE_TargetIdentifier_Base_C.CanHackAcquiredTarget
// 0x0040 (0x0040 - 0x0000)
struct HARDWARE_TargetIdentifier_Base_C_CanHackAcquiredTarget final
{
public:
	bool                                          Result;                                            // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UCOMP_AttribManager_C*                  AcquiredAttribManager;                             // 0x0008(0x0008)(Edit, BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class APAWN_SystemShockCharacter_C*           CallFunc_GetOwnerCharacter_Character;              // 0x0010(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class APAWN_SystemShockCharacter_C*           CallFunc_GetOwnerCharacter_Character_1;            // 0x0018(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AINTERACT_DestructibleBase_C*           K2Node_DynamicCast_AsINTERACT_Destructible_Base;   // 0x0020(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0028(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_CanHackDestructible_Result;               // 0x0029(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_HasEnergyForHack_Result;                  // 0x002A(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsActorInTargetingCone_Result;            // 0x002B(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_HasActiveModWithCategory_ReturnValue;     // 0x002C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsHackingSupported_Result;                // 0x002D(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Not_PreBool_ReturnValue;                  // 0x002E(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_2F[0x1];                                       // 0x002F(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	class APAWN_Enemy_C*                          K2Node_DynamicCast_AsPAWN_Enemy;                   // 0x0030(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess_1;                     // 0x0038(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_CanHackEnemy_Result;                      // 0x0039(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(HARDWARE_TargetIdentifier_Base_C_CanHackAcquiredTarget) == 0x000008, "Wrong alignment on HARDWARE_TargetIdentifier_Base_C_CanHackAcquiredTarget");
static_assert(sizeof(HARDWARE_TargetIdentifier_Base_C_CanHackAcquiredTarget) == 0x000040, "Wrong size on HARDWARE_TargetIdentifier_Base_C_CanHackAcquiredTarget");
static_assert(offsetof(HARDWARE_TargetIdentifier_Base_C_CanHackAcquiredTarget, Result) == 0x000000, "Member 'HARDWARE_TargetIdentifier_Base_C_CanHackAcquiredTarget::Result' has a wrong offset!");
static_assert(offsetof(HARDWARE_TargetIdentifier_Base_C_CanHackAcquiredTarget, AcquiredAttribManager) == 0x000008, "Member 'HARDWARE_TargetIdentifier_Base_C_CanHackAcquiredTarget::AcquiredAttribManager' has a wrong offset!");
static_assert(offsetof(HARDWARE_TargetIdentifier_Base_C_CanHackAcquiredTarget, CallFunc_GetOwnerCharacter_Character) == 0x000010, "Member 'HARDWARE_TargetIdentifier_Base_C_CanHackAcquiredTarget::CallFunc_GetOwnerCharacter_Character' has a wrong offset!");
static_assert(offsetof(HARDWARE_TargetIdentifier_Base_C_CanHackAcquiredTarget, CallFunc_GetOwnerCharacter_Character_1) == 0x000018, "Member 'HARDWARE_TargetIdentifier_Base_C_CanHackAcquiredTarget::CallFunc_GetOwnerCharacter_Character_1' has a wrong offset!");
static_assert(offsetof(HARDWARE_TargetIdentifier_Base_C_CanHackAcquiredTarget, K2Node_DynamicCast_AsINTERACT_Destructible_Base) == 0x000020, "Member 'HARDWARE_TargetIdentifier_Base_C_CanHackAcquiredTarget::K2Node_DynamicCast_AsINTERACT_Destructible_Base' has a wrong offset!");
static_assert(offsetof(HARDWARE_TargetIdentifier_Base_C_CanHackAcquiredTarget, K2Node_DynamicCast_bSuccess) == 0x000028, "Member 'HARDWARE_TargetIdentifier_Base_C_CanHackAcquiredTarget::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(HARDWARE_TargetIdentifier_Base_C_CanHackAcquiredTarget, CallFunc_CanHackDestructible_Result) == 0x000029, "Member 'HARDWARE_TargetIdentifier_Base_C_CanHackAcquiredTarget::CallFunc_CanHackDestructible_Result' has a wrong offset!");
static_assert(offsetof(HARDWARE_TargetIdentifier_Base_C_CanHackAcquiredTarget, CallFunc_HasEnergyForHack_Result) == 0x00002A, "Member 'HARDWARE_TargetIdentifier_Base_C_CanHackAcquiredTarget::CallFunc_HasEnergyForHack_Result' has a wrong offset!");
static_assert(offsetof(HARDWARE_TargetIdentifier_Base_C_CanHackAcquiredTarget, CallFunc_IsActorInTargetingCone_Result) == 0x00002B, "Member 'HARDWARE_TargetIdentifier_Base_C_CanHackAcquiredTarget::CallFunc_IsActorInTargetingCone_Result' has a wrong offset!");
static_assert(offsetof(HARDWARE_TargetIdentifier_Base_C_CanHackAcquiredTarget, CallFunc_HasActiveModWithCategory_ReturnValue) == 0x00002C, "Member 'HARDWARE_TargetIdentifier_Base_C_CanHackAcquiredTarget::CallFunc_HasActiveModWithCategory_ReturnValue' has a wrong offset!");
static_assert(offsetof(HARDWARE_TargetIdentifier_Base_C_CanHackAcquiredTarget, CallFunc_IsHackingSupported_Result) == 0x00002D, "Member 'HARDWARE_TargetIdentifier_Base_C_CanHackAcquiredTarget::CallFunc_IsHackingSupported_Result' has a wrong offset!");
static_assert(offsetof(HARDWARE_TargetIdentifier_Base_C_CanHackAcquiredTarget, CallFunc_Not_PreBool_ReturnValue) == 0x00002E, "Member 'HARDWARE_TargetIdentifier_Base_C_CanHackAcquiredTarget::CallFunc_Not_PreBool_ReturnValue' has a wrong offset!");
static_assert(offsetof(HARDWARE_TargetIdentifier_Base_C_CanHackAcquiredTarget, K2Node_DynamicCast_AsPAWN_Enemy) == 0x000030, "Member 'HARDWARE_TargetIdentifier_Base_C_CanHackAcquiredTarget::K2Node_DynamicCast_AsPAWN_Enemy' has a wrong offset!");
static_assert(offsetof(HARDWARE_TargetIdentifier_Base_C_CanHackAcquiredTarget, K2Node_DynamicCast_bSuccess_1) == 0x000038, "Member 'HARDWARE_TargetIdentifier_Base_C_CanHackAcquiredTarget::K2Node_DynamicCast_bSuccess_1' has a wrong offset!");
static_assert(offsetof(HARDWARE_TargetIdentifier_Base_C_CanHackAcquiredTarget, CallFunc_CanHackEnemy_Result) == 0x000039, "Member 'HARDWARE_TargetIdentifier_Base_C_CanHackAcquiredTarget::CallFunc_CanHackEnemy_Result' has a wrong offset!");

// Function HARDWARE_TargetIdentifier_Base.HARDWARE_TargetIdentifier_Base_C.IsActorInTargetingRange
// 0x0050 (0x0050 - 0x0000)
struct HARDWARE_TargetIdentifier_Base_C_IsActorInTargetingRange final
{
public:
	class AActor*                                 TargetActor;                                       // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Result;                                            // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class APAWN_SystemShockCharacter_C*           CharacterOwner;                                    // 0x0010(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_K2_GetActorLocation_ReturnValue;          // 0x0018(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_K2_GetActorLocation_ReturnValue_1;        // 0x0024(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Vector_DistanceSquared_ReturnValue;       // 0x0030(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_34[0x4];                                       // 0x0034(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class APAWN_SystemShockCharacter_C*           CallFunc_GetOwnerCharacter_Character;              // 0x0038(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0040(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_41[0x3];                                       // 0x0041(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_Add_FloatFloat_ReturnValue;               // 0x0044(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Square_ReturnValue;                       // 0x0048(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_LessEqual_FloatFloat_ReturnValue;         // 0x004C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(HARDWARE_TargetIdentifier_Base_C_IsActorInTargetingRange) == 0x000008, "Wrong alignment on HARDWARE_TargetIdentifier_Base_C_IsActorInTargetingRange");
static_assert(sizeof(HARDWARE_TargetIdentifier_Base_C_IsActorInTargetingRange) == 0x000050, "Wrong size on HARDWARE_TargetIdentifier_Base_C_IsActorInTargetingRange");
static_assert(offsetof(HARDWARE_TargetIdentifier_Base_C_IsActorInTargetingRange, TargetActor) == 0x000000, "Member 'HARDWARE_TargetIdentifier_Base_C_IsActorInTargetingRange::TargetActor' has a wrong offset!");
static_assert(offsetof(HARDWARE_TargetIdentifier_Base_C_IsActorInTargetingRange, Result) == 0x000008, "Member 'HARDWARE_TargetIdentifier_Base_C_IsActorInTargetingRange::Result' has a wrong offset!");
static_assert(offsetof(HARDWARE_TargetIdentifier_Base_C_IsActorInTargetingRange, CharacterOwner) == 0x000010, "Member 'HARDWARE_TargetIdentifier_Base_C_IsActorInTargetingRange::CharacterOwner' has a wrong offset!");
static_assert(offsetof(HARDWARE_TargetIdentifier_Base_C_IsActorInTargetingRange, CallFunc_K2_GetActorLocation_ReturnValue) == 0x000018, "Member 'HARDWARE_TargetIdentifier_Base_C_IsActorInTargetingRange::CallFunc_K2_GetActorLocation_ReturnValue' has a wrong offset!");
static_assert(offsetof(HARDWARE_TargetIdentifier_Base_C_IsActorInTargetingRange, CallFunc_K2_GetActorLocation_ReturnValue_1) == 0x000024, "Member 'HARDWARE_TargetIdentifier_Base_C_IsActorInTargetingRange::CallFunc_K2_GetActorLocation_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(HARDWARE_TargetIdentifier_Base_C_IsActorInTargetingRange, CallFunc_Vector_DistanceSquared_ReturnValue) == 0x000030, "Member 'HARDWARE_TargetIdentifier_Base_C_IsActorInTargetingRange::CallFunc_Vector_DistanceSquared_ReturnValue' has a wrong offset!");
static_assert(offsetof(HARDWARE_TargetIdentifier_Base_C_IsActorInTargetingRange, CallFunc_GetOwnerCharacter_Character) == 0x000038, "Member 'HARDWARE_TargetIdentifier_Base_C_IsActorInTargetingRange::CallFunc_GetOwnerCharacter_Character' has a wrong offset!");
static_assert(offsetof(HARDWARE_TargetIdentifier_Base_C_IsActorInTargetingRange, CallFunc_IsValid_ReturnValue) == 0x000040, "Member 'HARDWARE_TargetIdentifier_Base_C_IsActorInTargetingRange::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(HARDWARE_TargetIdentifier_Base_C_IsActorInTargetingRange, CallFunc_Add_FloatFloat_ReturnValue) == 0x000044, "Member 'HARDWARE_TargetIdentifier_Base_C_IsActorInTargetingRange::CallFunc_Add_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(HARDWARE_TargetIdentifier_Base_C_IsActorInTargetingRange, CallFunc_Square_ReturnValue) == 0x000048, "Member 'HARDWARE_TargetIdentifier_Base_C_IsActorInTargetingRange::CallFunc_Square_ReturnValue' has a wrong offset!");
static_assert(offsetof(HARDWARE_TargetIdentifier_Base_C_IsActorInTargetingRange, CallFunc_LessEqual_FloatFloat_ReturnValue) == 0x00004C, "Member 'HARDWARE_TargetIdentifier_Base_C_IsActorInTargetingRange::CallFunc_LessEqual_FloatFloat_ReturnValue' has a wrong offset!");

// Function HARDWARE_TargetIdentifier_Base.HARDWARE_TargetIdentifier_Base_C.IsActorInTargetingCone
// 0x0068 (0x0068 - 0x0000)
struct HARDWARE_TargetIdentifier_Base_C_IsActorInTargetingCone final
{
public:
	class AActor*                                 TargetActor;                                       // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Result;                                            // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class APAWN_Hacker_Simple_C*                  HackerOwner;                                       // 0x0010(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_K2_GetActorLocation_ReturnValue;          // 0x0018(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_K2_GetComponentLocation_ReturnValue;      // 0x0024(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_GetForwardVector_ReturnValue;             // 0x0030(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Subtract_VectorVector_ReturnValue;        // 0x003C(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_AngleBetweenVectors_ReturnValue;          // 0x0048(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_LessEqual_FloatFloat_ReturnValue;         // 0x004C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_4D[0x3];                                       // 0x004D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class APAWN_SystemShockCharacter_C*           CallFunc_GetOwnerCharacter_Character;              // 0x0050(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class APAWN_Hacker_Simple_C*                  K2Node_DynamicCast_AsPAWN_Hacker_Simple;           // 0x0058(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0060(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(HARDWARE_TargetIdentifier_Base_C_IsActorInTargetingCone) == 0x000008, "Wrong alignment on HARDWARE_TargetIdentifier_Base_C_IsActorInTargetingCone");
static_assert(sizeof(HARDWARE_TargetIdentifier_Base_C_IsActorInTargetingCone) == 0x000068, "Wrong size on HARDWARE_TargetIdentifier_Base_C_IsActorInTargetingCone");
static_assert(offsetof(HARDWARE_TargetIdentifier_Base_C_IsActorInTargetingCone, TargetActor) == 0x000000, "Member 'HARDWARE_TargetIdentifier_Base_C_IsActorInTargetingCone::TargetActor' has a wrong offset!");
static_assert(offsetof(HARDWARE_TargetIdentifier_Base_C_IsActorInTargetingCone, Result) == 0x000008, "Member 'HARDWARE_TargetIdentifier_Base_C_IsActorInTargetingCone::Result' has a wrong offset!");
static_assert(offsetof(HARDWARE_TargetIdentifier_Base_C_IsActorInTargetingCone, HackerOwner) == 0x000010, "Member 'HARDWARE_TargetIdentifier_Base_C_IsActorInTargetingCone::HackerOwner' has a wrong offset!");
static_assert(offsetof(HARDWARE_TargetIdentifier_Base_C_IsActorInTargetingCone, CallFunc_K2_GetActorLocation_ReturnValue) == 0x000018, "Member 'HARDWARE_TargetIdentifier_Base_C_IsActorInTargetingCone::CallFunc_K2_GetActorLocation_ReturnValue' has a wrong offset!");
static_assert(offsetof(HARDWARE_TargetIdentifier_Base_C_IsActorInTargetingCone, CallFunc_K2_GetComponentLocation_ReturnValue) == 0x000024, "Member 'HARDWARE_TargetIdentifier_Base_C_IsActorInTargetingCone::CallFunc_K2_GetComponentLocation_ReturnValue' has a wrong offset!");
static_assert(offsetof(HARDWARE_TargetIdentifier_Base_C_IsActorInTargetingCone, CallFunc_GetForwardVector_ReturnValue) == 0x000030, "Member 'HARDWARE_TargetIdentifier_Base_C_IsActorInTargetingCone::CallFunc_GetForwardVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(HARDWARE_TargetIdentifier_Base_C_IsActorInTargetingCone, CallFunc_Subtract_VectorVector_ReturnValue) == 0x00003C, "Member 'HARDWARE_TargetIdentifier_Base_C_IsActorInTargetingCone::CallFunc_Subtract_VectorVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(HARDWARE_TargetIdentifier_Base_C_IsActorInTargetingCone, CallFunc_AngleBetweenVectors_ReturnValue) == 0x000048, "Member 'HARDWARE_TargetIdentifier_Base_C_IsActorInTargetingCone::CallFunc_AngleBetweenVectors_ReturnValue' has a wrong offset!");
static_assert(offsetof(HARDWARE_TargetIdentifier_Base_C_IsActorInTargetingCone, CallFunc_LessEqual_FloatFloat_ReturnValue) == 0x00004C, "Member 'HARDWARE_TargetIdentifier_Base_C_IsActorInTargetingCone::CallFunc_LessEqual_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(HARDWARE_TargetIdentifier_Base_C_IsActorInTargetingCone, CallFunc_GetOwnerCharacter_Character) == 0x000050, "Member 'HARDWARE_TargetIdentifier_Base_C_IsActorInTargetingCone::CallFunc_GetOwnerCharacter_Character' has a wrong offset!");
static_assert(offsetof(HARDWARE_TargetIdentifier_Base_C_IsActorInTargetingCone, K2Node_DynamicCast_AsPAWN_Hacker_Simple) == 0x000058, "Member 'HARDWARE_TargetIdentifier_Base_C_IsActorInTargetingCone::K2Node_DynamicCast_AsPAWN_Hacker_Simple' has a wrong offset!");
static_assert(offsetof(HARDWARE_TargetIdentifier_Base_C_IsActorInTargetingCone, K2Node_DynamicCast_bSuccess) == 0x000060, "Member 'HARDWARE_TargetIdentifier_Base_C_IsActorInTargetingCone::K2Node_DynamicCast_bSuccess' has a wrong offset!");

// Function HARDWARE_TargetIdentifier_Base.HARDWARE_TargetIdentifier_Base_C.GetTargetIdentifierRange
// 0x0004 (0x0004 - 0x0000)
struct HARDWARE_TargetIdentifier_Base_C_GetTargetIdentifierRange final
{
public:
	float                                         Range;                                             // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(HARDWARE_TargetIdentifier_Base_C_GetTargetIdentifierRange) == 0x000004, "Wrong alignment on HARDWARE_TargetIdentifier_Base_C_GetTargetIdentifierRange");
static_assert(sizeof(HARDWARE_TargetIdentifier_Base_C_GetTargetIdentifierRange) == 0x000004, "Wrong size on HARDWARE_TargetIdentifier_Base_C_GetTargetIdentifierRange");
static_assert(offsetof(HARDWARE_TargetIdentifier_Base_C_GetTargetIdentifierRange, Range) == 0x000000, "Member 'HARDWARE_TargetIdentifier_Base_C_GetTargetIdentifierRange::Range' has a wrong offset!");

// Function HARDWARE_TargetIdentifier_Base.HARDWARE_TargetIdentifier_Base_C.GetAcquiredTargetActor
// 0x0008 (0x0008 - 0x0000)
struct HARDWARE_TargetIdentifier_Base_C_GetAcquiredTargetActor final
{
public:
	class AActor*                                 Result;                                            // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(HARDWARE_TargetIdentifier_Base_C_GetAcquiredTargetActor) == 0x000008, "Wrong alignment on HARDWARE_TargetIdentifier_Base_C_GetAcquiredTargetActor");
static_assert(sizeof(HARDWARE_TargetIdentifier_Base_C_GetAcquiredTargetActor) == 0x000008, "Wrong size on HARDWARE_TargetIdentifier_Base_C_GetAcquiredTargetActor");
static_assert(offsetof(HARDWARE_TargetIdentifier_Base_C_GetAcquiredTargetActor, Result) == 0x000000, "Member 'HARDWARE_TargetIdentifier_Base_C_GetAcquiredTargetActor::Result' has a wrong offset!");

// Function HARDWARE_TargetIdentifier_Base.HARDWARE_TargetIdentifier_Base_C.GetCandidateTargetActor
// 0x0008 (0x0008 - 0x0000)
struct HARDWARE_TargetIdentifier_Base_C_GetCandidateTargetActor final
{
public:
	class AActor*                                 Result;                                            // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(HARDWARE_TargetIdentifier_Base_C_GetCandidateTargetActor) == 0x000008, "Wrong alignment on HARDWARE_TargetIdentifier_Base_C_GetCandidateTargetActor");
static_assert(sizeof(HARDWARE_TargetIdentifier_Base_C_GetCandidateTargetActor) == 0x000008, "Wrong size on HARDWARE_TargetIdentifier_Base_C_GetCandidateTargetActor");
static_assert(offsetof(HARDWARE_TargetIdentifier_Base_C_GetCandidateTargetActor, Result) == 0x000000, "Member 'HARDWARE_TargetIdentifier_Base_C_GetCandidateTargetActor::Result' has a wrong offset!");

// Function HARDWARE_TargetIdentifier_Base.HARDWARE_TargetIdentifier_Base_C.GetTargetAcquireHoldDuration
// 0x0004 (0x0004 - 0x0000)
struct HARDWARE_TargetIdentifier_Base_C_GetTargetAcquireHoldDuration final
{
public:
	float                                         Duration;                                          // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(HARDWARE_TargetIdentifier_Base_C_GetTargetAcquireHoldDuration) == 0x000004, "Wrong alignment on HARDWARE_TargetIdentifier_Base_C_GetTargetAcquireHoldDuration");
static_assert(sizeof(HARDWARE_TargetIdentifier_Base_C_GetTargetAcquireHoldDuration) == 0x000004, "Wrong size on HARDWARE_TargetIdentifier_Base_C_GetTargetAcquireHoldDuration");
static_assert(offsetof(HARDWARE_TargetIdentifier_Base_C_GetTargetAcquireHoldDuration, Duration) == 0x000000, "Member 'HARDWARE_TargetIdentifier_Base_C_GetTargetAcquireHoldDuration::Duration' has a wrong offset!");

// Function HARDWARE_TargetIdentifier_Base.HARDWARE_TargetIdentifier_Base_C.GetTargetHackHoldDuration
// 0x0004 (0x0004 - 0x0000)
struct HARDWARE_TargetIdentifier_Base_C_GetTargetHackHoldDuration final
{
public:
	float                                         Duration;                                          // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(HARDWARE_TargetIdentifier_Base_C_GetTargetHackHoldDuration) == 0x000004, "Wrong alignment on HARDWARE_TargetIdentifier_Base_C_GetTargetHackHoldDuration");
static_assert(sizeof(HARDWARE_TargetIdentifier_Base_C_GetTargetHackHoldDuration) == 0x000004, "Wrong size on HARDWARE_TargetIdentifier_Base_C_GetTargetHackHoldDuration");
static_assert(offsetof(HARDWARE_TargetIdentifier_Base_C_GetTargetHackHoldDuration, Duration) == 0x000000, "Member 'HARDWARE_TargetIdentifier_Base_C_GetTargetHackHoldDuration::Duration' has a wrong offset!");

// Function HARDWARE_TargetIdentifier_Base.HARDWARE_TargetIdentifier_Base_C.TryAcquireCandidateActor
// 0x0007 (0x0007 - 0x0000)
struct HARDWARE_TargetIdentifier_Base_C_TryAcquireCandidateActor final
{
public:
	bool                                          Result;                                            // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0001(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsHardwareMagneticallyDisabled_Result;    // 0x0002(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_NotEqual_ObjectObject_ReturnValue;        // 0x0003(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Not_PreBool_ReturnValue;                  // 0x0004(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_GetIsActivated_Result;                    // 0x0005(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BooleanAND_ReturnValue;                   // 0x0006(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(HARDWARE_TargetIdentifier_Base_C_TryAcquireCandidateActor) == 0x000001, "Wrong alignment on HARDWARE_TargetIdentifier_Base_C_TryAcquireCandidateActor");
static_assert(sizeof(HARDWARE_TargetIdentifier_Base_C_TryAcquireCandidateActor) == 0x000007, "Wrong size on HARDWARE_TargetIdentifier_Base_C_TryAcquireCandidateActor");
static_assert(offsetof(HARDWARE_TargetIdentifier_Base_C_TryAcquireCandidateActor, Result) == 0x000000, "Member 'HARDWARE_TargetIdentifier_Base_C_TryAcquireCandidateActor::Result' has a wrong offset!");
static_assert(offsetof(HARDWARE_TargetIdentifier_Base_C_TryAcquireCandidateActor, CallFunc_IsValid_ReturnValue) == 0x000001, "Member 'HARDWARE_TargetIdentifier_Base_C_TryAcquireCandidateActor::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(HARDWARE_TargetIdentifier_Base_C_TryAcquireCandidateActor, CallFunc_IsHardwareMagneticallyDisabled_Result) == 0x000002, "Member 'HARDWARE_TargetIdentifier_Base_C_TryAcquireCandidateActor::CallFunc_IsHardwareMagneticallyDisabled_Result' has a wrong offset!");
static_assert(offsetof(HARDWARE_TargetIdentifier_Base_C_TryAcquireCandidateActor, CallFunc_NotEqual_ObjectObject_ReturnValue) == 0x000003, "Member 'HARDWARE_TargetIdentifier_Base_C_TryAcquireCandidateActor::CallFunc_NotEqual_ObjectObject_ReturnValue' has a wrong offset!");
static_assert(offsetof(HARDWARE_TargetIdentifier_Base_C_TryAcquireCandidateActor, CallFunc_Not_PreBool_ReturnValue) == 0x000004, "Member 'HARDWARE_TargetIdentifier_Base_C_TryAcquireCandidateActor::CallFunc_Not_PreBool_ReturnValue' has a wrong offset!");
static_assert(offsetof(HARDWARE_TargetIdentifier_Base_C_TryAcquireCandidateActor, CallFunc_GetIsActivated_Result) == 0x000005, "Member 'HARDWARE_TargetIdentifier_Base_C_TryAcquireCandidateActor::CallFunc_GetIsActivated_Result' has a wrong offset!");
static_assert(offsetof(HARDWARE_TargetIdentifier_Base_C_TryAcquireCandidateActor, CallFunc_BooleanAND_ReturnValue) == 0x000006, "Member 'HARDWARE_TargetIdentifier_Base_C_TryAcquireCandidateActor::CallFunc_BooleanAND_ReturnValue' has a wrong offset!");

// Function HARDWARE_TargetIdentifier_Base.HARDWARE_TargetIdentifier_Base_C.TryUnacquireTargetActor
// 0x0002 (0x0002 - 0x0000)
struct HARDWARE_TargetIdentifier_Base_C_TryUnacquireTargetActor final
{
public:
	bool                                          Result;                                            // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0001(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(HARDWARE_TargetIdentifier_Base_C_TryUnacquireTargetActor) == 0x000001, "Wrong alignment on HARDWARE_TargetIdentifier_Base_C_TryUnacquireTargetActor");
static_assert(sizeof(HARDWARE_TargetIdentifier_Base_C_TryUnacquireTargetActor) == 0x000002, "Wrong size on HARDWARE_TargetIdentifier_Base_C_TryUnacquireTargetActor");
static_assert(offsetof(HARDWARE_TargetIdentifier_Base_C_TryUnacquireTargetActor, Result) == 0x000000, "Member 'HARDWARE_TargetIdentifier_Base_C_TryUnacquireTargetActor::Result' has a wrong offset!");
static_assert(offsetof(HARDWARE_TargetIdentifier_Base_C_TryUnacquireTargetActor, CallFunc_IsValid_ReturnValue) == 0x000001, "Member 'HARDWARE_TargetIdentifier_Base_C_TryUnacquireTargetActor::CallFunc_IsValid_ReturnValue' has a wrong offset!");

// Function HARDWARE_TargetIdentifier_Base.HARDWARE_TargetIdentifier_Base_C.TryStartUploadingHackToAcquiredTarget
// 0x0002 (0x0002 - 0x0000)
struct HARDWARE_TargetIdentifier_Base_C_TryStartUploadingHackToAcquiredTarget final
{
public:
	bool                                          Result;                                            // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_CanHackAcquiredTarget_Result;             // 0x0001(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(HARDWARE_TargetIdentifier_Base_C_TryStartUploadingHackToAcquiredTarget) == 0x000001, "Wrong alignment on HARDWARE_TargetIdentifier_Base_C_TryStartUploadingHackToAcquiredTarget");
static_assert(sizeof(HARDWARE_TargetIdentifier_Base_C_TryStartUploadingHackToAcquiredTarget) == 0x000002, "Wrong size on HARDWARE_TargetIdentifier_Base_C_TryStartUploadingHackToAcquiredTarget");
static_assert(offsetof(HARDWARE_TargetIdentifier_Base_C_TryStartUploadingHackToAcquiredTarget, Result) == 0x000000, "Member 'HARDWARE_TargetIdentifier_Base_C_TryStartUploadingHackToAcquiredTarget::Result' has a wrong offset!");
static_assert(offsetof(HARDWARE_TargetIdentifier_Base_C_TryStartUploadingHackToAcquiredTarget, CallFunc_CanHackAcquiredTarget_Result) == 0x000001, "Member 'HARDWARE_TargetIdentifier_Base_C_TryStartUploadingHackToAcquiredTarget::CallFunc_CanHackAcquiredTarget_Result' has a wrong offset!");

// Function HARDWARE_TargetIdentifier_Base.HARDWARE_TargetIdentifier_Base_C.TryStopUploadingHackToCurrentTarget
// 0x0002 (0x0002 - 0x0000)
struct HARDWARE_TargetIdentifier_Base_C_TryStopUploadingHackToCurrentTarget final
{
public:
	bool                                          Result;                                            // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_GreaterEqual_FloatFloat_ReturnValue;      // 0x0001(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(HARDWARE_TargetIdentifier_Base_C_TryStopUploadingHackToCurrentTarget) == 0x000001, "Wrong alignment on HARDWARE_TargetIdentifier_Base_C_TryStopUploadingHackToCurrentTarget");
static_assert(sizeof(HARDWARE_TargetIdentifier_Base_C_TryStopUploadingHackToCurrentTarget) == 0x000002, "Wrong size on HARDWARE_TargetIdentifier_Base_C_TryStopUploadingHackToCurrentTarget");
static_assert(offsetof(HARDWARE_TargetIdentifier_Base_C_TryStopUploadingHackToCurrentTarget, Result) == 0x000000, "Member 'HARDWARE_TargetIdentifier_Base_C_TryStopUploadingHackToCurrentTarget::Result' has a wrong offset!");
static_assert(offsetof(HARDWARE_TargetIdentifier_Base_C_TryStopUploadingHackToCurrentTarget, CallFunc_GreaterEqual_FloatFloat_ReturnValue) == 0x000001, "Member 'HARDWARE_TargetIdentifier_Base_C_TryStopUploadingHackToCurrentTarget::CallFunc_GreaterEqual_FloatFloat_ReturnValue' has a wrong offset!");

// Function HARDWARE_TargetIdentifier_Base.HARDWARE_TargetIdentifier_Base_C.ApplyHackToAcquiredTarget
// 0x02A0 (0x02A0 - 0x0000)
struct HARDWARE_TargetIdentifier_Base_C_ApplyHackToAcquiredTarget final
{
public:
	struct FAttribModApplyData                    DestroyModApplyData;                               // 0x0000(0x00A0)(Edit, BlueprintVisible)
	class UVoxelSpatialNavigationQuery*           SpatialQuery;                                      // 0x00A0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AINTERACT_DestructibleBase_C*           AcquiredDestructibleActor;                         // 0x00A8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class APAWN_Enemy_C*                          AcquiredEnemyPawn;                                 // 0x00B0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FAttribModApplyData                    EnergyApplyData;                                   // 0x00B8(0x00A0)(Edit, BlueprintVisible)
	class APAWN_SystemShockCharacter_C*           CallFunc_GetOwnerCharacter_Character;              // 0x0158(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UAttribMod*                             CallFunc_ApplyMod_ReturnValue;                     // 0x0160(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UAttributeDef*                          CallFunc_GetHealthAttrib_ReturnValue;              // 0x0168(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_GetAttribValue_ReturnValue;               // 0x0170(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_LessEqual_FloatFloat_ReturnValue;         // 0x0174(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_175[0x3];                                      // 0x0175(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class APAWN_SystemShockCharacter_C*           CallFunc_GetOwnerCharacter_Character_1;            // 0x0178(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UAttribMod*                             CallFunc_ApplyMod_ReturnValue_1;                   // 0x0180(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ENUM_EnemyType                                CallFunc_GetEnemyType_Result;                      // 0x0188(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_ByteByte_ReturnValue;          // 0x0189(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_18A[0x6];                                      // 0x018A(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class UAttributeDef*                          CallFunc_GetHealthAttrib_ReturnValue_1;            // 0x0190(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_GetAttribValue_ReturnValue_1;             // 0x0198(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_LessEqual_FloatFloat_ReturnValue_1;       // 0x019C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_19D[0x3];                                      // 0x019D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class UGameInstance*                          CallFunc_GetGameInstance_ReturnValue;              // 0x01A0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UGI_SinglePlayer_C*                     K2Node_DynamicCast_AsGI_Single_Player;             // 0x01A8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x01B0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_1B1[0x7];                                      // 0x01B1(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class APAWN_SystemShockCharacter_C*           CallFunc_GetOwnerCharacter_Character_2;            // 0x01B8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UAttribMod*                             CallFunc_ApplyMod_ReturnValue_2;                   // 0x01C0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AINTERACT_DestructibleBase_C*           K2Node_DynamicCast_AsINTERACT_Destructible_Base;   // 0x01C8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess_1;                     // 0x01D0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_TryIncrementOrderedAchievement_Result;    // 0x01D1(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_1D2[0x6];                                      // 0x01D2(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class UVoxelSpatialNavigationQuery*           CallFunc_CreateSpatialNavigationQuery_ReturnValue; // 0x01D8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Conv_IntToFloat_ReturnValue;              // 0x01E0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1E4[0x4];                                      // 0x01E4(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class APAWN_SystemShockCharacter_C*           CallFunc_GetOwnerCharacter_Character_3;            // 0x01E8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TDelegate<void(bool bResult, TArray<struct FVector4>& WeightedWorldLocations)> K2Node_CreateDelegate_OutputDelegate;              // 0x01F0(0x0010)(ZeroConstructor, NoDestructor)
	class UAttribMod*                             CallFunc_ApplyMod_ReturnValue_3;                   // 0x0200(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_ExecuteQueryInBackground_ReturnValue;     // 0x0208(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_209[0x7];                                      // 0x0209(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class APAWN_SystemShockCharacter_C*           CallFunc_GetOwnerCharacter_Character_4;            // 0x0210(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_K2_GetActorLocation_ReturnValue;          // 0x0218(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_K2_GetActorLocation_ReturnValue_1;        // 0x0224(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Subtract_VectorVector_ReturnValue;        // 0x0230(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_K2_GetActorLocation_ReturnValue_2;        // 0x023C(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Normal_ReturnValue;                       // 0x0248(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_WeightByAngleFromViewpoint_ReturnValue;   // 0x0254(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_255[0x3];                                      // 0x0255(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                CallFunc_K2_GetActorLocation_ReturnValue_3;        // 0x0258(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_WeightByDistanceFromPoint_ReturnValue;    // 0x0264(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_265[0x3];                                      // 0x0265(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                CallFunc_K2_GetActorLocation_ReturnValue_4;        // 0x0268(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_274[0x4];                                      // 0x0274(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class APAWN_SystemShockCharacter_C*           CallFunc_GetOwnerCharacter_Character_5;            // 0x0278(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_AddPathableVoxelsInBox_ReturnValue;       // 0x0280(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_281[0x7];                                      // 0x0281(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class APAWN_Enemy_C*                          K2Node_DynamicCast_AsPAWN_Enemy;                   // 0x0288(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess_2;                     // 0x0290(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_291[0x7];                                      // 0x0291(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UAttribMod*                             CallFunc_ApplyMod_ReturnValue_4;                   // 0x0298(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(HARDWARE_TargetIdentifier_Base_C_ApplyHackToAcquiredTarget) == 0x000008, "Wrong alignment on HARDWARE_TargetIdentifier_Base_C_ApplyHackToAcquiredTarget");
static_assert(sizeof(HARDWARE_TargetIdentifier_Base_C_ApplyHackToAcquiredTarget) == 0x0002A0, "Wrong size on HARDWARE_TargetIdentifier_Base_C_ApplyHackToAcquiredTarget");
static_assert(offsetof(HARDWARE_TargetIdentifier_Base_C_ApplyHackToAcquiredTarget, DestroyModApplyData) == 0x000000, "Member 'HARDWARE_TargetIdentifier_Base_C_ApplyHackToAcquiredTarget::DestroyModApplyData' has a wrong offset!");
static_assert(offsetof(HARDWARE_TargetIdentifier_Base_C_ApplyHackToAcquiredTarget, SpatialQuery) == 0x0000A0, "Member 'HARDWARE_TargetIdentifier_Base_C_ApplyHackToAcquiredTarget::SpatialQuery' has a wrong offset!");
static_assert(offsetof(HARDWARE_TargetIdentifier_Base_C_ApplyHackToAcquiredTarget, AcquiredDestructibleActor) == 0x0000A8, "Member 'HARDWARE_TargetIdentifier_Base_C_ApplyHackToAcquiredTarget::AcquiredDestructibleActor' has a wrong offset!");
static_assert(offsetof(HARDWARE_TargetIdentifier_Base_C_ApplyHackToAcquiredTarget, AcquiredEnemyPawn) == 0x0000B0, "Member 'HARDWARE_TargetIdentifier_Base_C_ApplyHackToAcquiredTarget::AcquiredEnemyPawn' has a wrong offset!");
static_assert(offsetof(HARDWARE_TargetIdentifier_Base_C_ApplyHackToAcquiredTarget, EnergyApplyData) == 0x0000B8, "Member 'HARDWARE_TargetIdentifier_Base_C_ApplyHackToAcquiredTarget::EnergyApplyData' has a wrong offset!");
static_assert(offsetof(HARDWARE_TargetIdentifier_Base_C_ApplyHackToAcquiredTarget, CallFunc_GetOwnerCharacter_Character) == 0x000158, "Member 'HARDWARE_TargetIdentifier_Base_C_ApplyHackToAcquiredTarget::CallFunc_GetOwnerCharacter_Character' has a wrong offset!");
static_assert(offsetof(HARDWARE_TargetIdentifier_Base_C_ApplyHackToAcquiredTarget, CallFunc_ApplyMod_ReturnValue) == 0x000160, "Member 'HARDWARE_TargetIdentifier_Base_C_ApplyHackToAcquiredTarget::CallFunc_ApplyMod_ReturnValue' has a wrong offset!");
static_assert(offsetof(HARDWARE_TargetIdentifier_Base_C_ApplyHackToAcquiredTarget, CallFunc_GetHealthAttrib_ReturnValue) == 0x000168, "Member 'HARDWARE_TargetIdentifier_Base_C_ApplyHackToAcquiredTarget::CallFunc_GetHealthAttrib_ReturnValue' has a wrong offset!");
static_assert(offsetof(HARDWARE_TargetIdentifier_Base_C_ApplyHackToAcquiredTarget, CallFunc_GetAttribValue_ReturnValue) == 0x000170, "Member 'HARDWARE_TargetIdentifier_Base_C_ApplyHackToAcquiredTarget::CallFunc_GetAttribValue_ReturnValue' has a wrong offset!");
static_assert(offsetof(HARDWARE_TargetIdentifier_Base_C_ApplyHackToAcquiredTarget, CallFunc_LessEqual_FloatFloat_ReturnValue) == 0x000174, "Member 'HARDWARE_TargetIdentifier_Base_C_ApplyHackToAcquiredTarget::CallFunc_LessEqual_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(HARDWARE_TargetIdentifier_Base_C_ApplyHackToAcquiredTarget, CallFunc_GetOwnerCharacter_Character_1) == 0x000178, "Member 'HARDWARE_TargetIdentifier_Base_C_ApplyHackToAcquiredTarget::CallFunc_GetOwnerCharacter_Character_1' has a wrong offset!");
static_assert(offsetof(HARDWARE_TargetIdentifier_Base_C_ApplyHackToAcquiredTarget, CallFunc_ApplyMod_ReturnValue_1) == 0x000180, "Member 'HARDWARE_TargetIdentifier_Base_C_ApplyHackToAcquiredTarget::CallFunc_ApplyMod_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(HARDWARE_TargetIdentifier_Base_C_ApplyHackToAcquiredTarget, CallFunc_GetEnemyType_Result) == 0x000188, "Member 'HARDWARE_TargetIdentifier_Base_C_ApplyHackToAcquiredTarget::CallFunc_GetEnemyType_Result' has a wrong offset!");
static_assert(offsetof(HARDWARE_TargetIdentifier_Base_C_ApplyHackToAcquiredTarget, CallFunc_EqualEqual_ByteByte_ReturnValue) == 0x000189, "Member 'HARDWARE_TargetIdentifier_Base_C_ApplyHackToAcquiredTarget::CallFunc_EqualEqual_ByteByte_ReturnValue' has a wrong offset!");
static_assert(offsetof(HARDWARE_TargetIdentifier_Base_C_ApplyHackToAcquiredTarget, CallFunc_GetHealthAttrib_ReturnValue_1) == 0x000190, "Member 'HARDWARE_TargetIdentifier_Base_C_ApplyHackToAcquiredTarget::CallFunc_GetHealthAttrib_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(HARDWARE_TargetIdentifier_Base_C_ApplyHackToAcquiredTarget, CallFunc_GetAttribValue_ReturnValue_1) == 0x000198, "Member 'HARDWARE_TargetIdentifier_Base_C_ApplyHackToAcquiredTarget::CallFunc_GetAttribValue_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(HARDWARE_TargetIdentifier_Base_C_ApplyHackToAcquiredTarget, CallFunc_LessEqual_FloatFloat_ReturnValue_1) == 0x00019C, "Member 'HARDWARE_TargetIdentifier_Base_C_ApplyHackToAcquiredTarget::CallFunc_LessEqual_FloatFloat_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(HARDWARE_TargetIdentifier_Base_C_ApplyHackToAcquiredTarget, CallFunc_GetGameInstance_ReturnValue) == 0x0001A0, "Member 'HARDWARE_TargetIdentifier_Base_C_ApplyHackToAcquiredTarget::CallFunc_GetGameInstance_ReturnValue' has a wrong offset!");
static_assert(offsetof(HARDWARE_TargetIdentifier_Base_C_ApplyHackToAcquiredTarget, K2Node_DynamicCast_AsGI_Single_Player) == 0x0001A8, "Member 'HARDWARE_TargetIdentifier_Base_C_ApplyHackToAcquiredTarget::K2Node_DynamicCast_AsGI_Single_Player' has a wrong offset!");
static_assert(offsetof(HARDWARE_TargetIdentifier_Base_C_ApplyHackToAcquiredTarget, K2Node_DynamicCast_bSuccess) == 0x0001B0, "Member 'HARDWARE_TargetIdentifier_Base_C_ApplyHackToAcquiredTarget::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(HARDWARE_TargetIdentifier_Base_C_ApplyHackToAcquiredTarget, CallFunc_GetOwnerCharacter_Character_2) == 0x0001B8, "Member 'HARDWARE_TargetIdentifier_Base_C_ApplyHackToAcquiredTarget::CallFunc_GetOwnerCharacter_Character_2' has a wrong offset!");
static_assert(offsetof(HARDWARE_TargetIdentifier_Base_C_ApplyHackToAcquiredTarget, CallFunc_ApplyMod_ReturnValue_2) == 0x0001C0, "Member 'HARDWARE_TargetIdentifier_Base_C_ApplyHackToAcquiredTarget::CallFunc_ApplyMod_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(HARDWARE_TargetIdentifier_Base_C_ApplyHackToAcquiredTarget, K2Node_DynamicCast_AsINTERACT_Destructible_Base) == 0x0001C8, "Member 'HARDWARE_TargetIdentifier_Base_C_ApplyHackToAcquiredTarget::K2Node_DynamicCast_AsINTERACT_Destructible_Base' has a wrong offset!");
static_assert(offsetof(HARDWARE_TargetIdentifier_Base_C_ApplyHackToAcquiredTarget, K2Node_DynamicCast_bSuccess_1) == 0x0001D0, "Member 'HARDWARE_TargetIdentifier_Base_C_ApplyHackToAcquiredTarget::K2Node_DynamicCast_bSuccess_1' has a wrong offset!");
static_assert(offsetof(HARDWARE_TargetIdentifier_Base_C_ApplyHackToAcquiredTarget, CallFunc_TryIncrementOrderedAchievement_Result) == 0x0001D1, "Member 'HARDWARE_TargetIdentifier_Base_C_ApplyHackToAcquiredTarget::CallFunc_TryIncrementOrderedAchievement_Result' has a wrong offset!");
static_assert(offsetof(HARDWARE_TargetIdentifier_Base_C_ApplyHackToAcquiredTarget, CallFunc_CreateSpatialNavigationQuery_ReturnValue) == 0x0001D8, "Member 'HARDWARE_TargetIdentifier_Base_C_ApplyHackToAcquiredTarget::CallFunc_CreateSpatialNavigationQuery_ReturnValue' has a wrong offset!");
static_assert(offsetof(HARDWARE_TargetIdentifier_Base_C_ApplyHackToAcquiredTarget, CallFunc_Conv_IntToFloat_ReturnValue) == 0x0001E0, "Member 'HARDWARE_TargetIdentifier_Base_C_ApplyHackToAcquiredTarget::CallFunc_Conv_IntToFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(HARDWARE_TargetIdentifier_Base_C_ApplyHackToAcquiredTarget, CallFunc_GetOwnerCharacter_Character_3) == 0x0001E8, "Member 'HARDWARE_TargetIdentifier_Base_C_ApplyHackToAcquiredTarget::CallFunc_GetOwnerCharacter_Character_3' has a wrong offset!");
static_assert(offsetof(HARDWARE_TargetIdentifier_Base_C_ApplyHackToAcquiredTarget, K2Node_CreateDelegate_OutputDelegate) == 0x0001F0, "Member 'HARDWARE_TargetIdentifier_Base_C_ApplyHackToAcquiredTarget::K2Node_CreateDelegate_OutputDelegate' has a wrong offset!");
static_assert(offsetof(HARDWARE_TargetIdentifier_Base_C_ApplyHackToAcquiredTarget, CallFunc_ApplyMod_ReturnValue_3) == 0x000200, "Member 'HARDWARE_TargetIdentifier_Base_C_ApplyHackToAcquiredTarget::CallFunc_ApplyMod_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(HARDWARE_TargetIdentifier_Base_C_ApplyHackToAcquiredTarget, CallFunc_ExecuteQueryInBackground_ReturnValue) == 0x000208, "Member 'HARDWARE_TargetIdentifier_Base_C_ApplyHackToAcquiredTarget::CallFunc_ExecuteQueryInBackground_ReturnValue' has a wrong offset!");
static_assert(offsetof(HARDWARE_TargetIdentifier_Base_C_ApplyHackToAcquiredTarget, CallFunc_GetOwnerCharacter_Character_4) == 0x000210, "Member 'HARDWARE_TargetIdentifier_Base_C_ApplyHackToAcquiredTarget::CallFunc_GetOwnerCharacter_Character_4' has a wrong offset!");
static_assert(offsetof(HARDWARE_TargetIdentifier_Base_C_ApplyHackToAcquiredTarget, CallFunc_K2_GetActorLocation_ReturnValue) == 0x000218, "Member 'HARDWARE_TargetIdentifier_Base_C_ApplyHackToAcquiredTarget::CallFunc_K2_GetActorLocation_ReturnValue' has a wrong offset!");
static_assert(offsetof(HARDWARE_TargetIdentifier_Base_C_ApplyHackToAcquiredTarget, CallFunc_K2_GetActorLocation_ReturnValue_1) == 0x000224, "Member 'HARDWARE_TargetIdentifier_Base_C_ApplyHackToAcquiredTarget::CallFunc_K2_GetActorLocation_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(HARDWARE_TargetIdentifier_Base_C_ApplyHackToAcquiredTarget, CallFunc_Subtract_VectorVector_ReturnValue) == 0x000230, "Member 'HARDWARE_TargetIdentifier_Base_C_ApplyHackToAcquiredTarget::CallFunc_Subtract_VectorVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(HARDWARE_TargetIdentifier_Base_C_ApplyHackToAcquiredTarget, CallFunc_K2_GetActorLocation_ReturnValue_2) == 0x00023C, "Member 'HARDWARE_TargetIdentifier_Base_C_ApplyHackToAcquiredTarget::CallFunc_K2_GetActorLocation_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(HARDWARE_TargetIdentifier_Base_C_ApplyHackToAcquiredTarget, CallFunc_Normal_ReturnValue) == 0x000248, "Member 'HARDWARE_TargetIdentifier_Base_C_ApplyHackToAcquiredTarget::CallFunc_Normal_ReturnValue' has a wrong offset!");
static_assert(offsetof(HARDWARE_TargetIdentifier_Base_C_ApplyHackToAcquiredTarget, CallFunc_WeightByAngleFromViewpoint_ReturnValue) == 0x000254, "Member 'HARDWARE_TargetIdentifier_Base_C_ApplyHackToAcquiredTarget::CallFunc_WeightByAngleFromViewpoint_ReturnValue' has a wrong offset!");
static_assert(offsetof(HARDWARE_TargetIdentifier_Base_C_ApplyHackToAcquiredTarget, CallFunc_K2_GetActorLocation_ReturnValue_3) == 0x000258, "Member 'HARDWARE_TargetIdentifier_Base_C_ApplyHackToAcquiredTarget::CallFunc_K2_GetActorLocation_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(HARDWARE_TargetIdentifier_Base_C_ApplyHackToAcquiredTarget, CallFunc_WeightByDistanceFromPoint_ReturnValue) == 0x000264, "Member 'HARDWARE_TargetIdentifier_Base_C_ApplyHackToAcquiredTarget::CallFunc_WeightByDistanceFromPoint_ReturnValue' has a wrong offset!");
static_assert(offsetof(HARDWARE_TargetIdentifier_Base_C_ApplyHackToAcquiredTarget, CallFunc_K2_GetActorLocation_ReturnValue_4) == 0x000268, "Member 'HARDWARE_TargetIdentifier_Base_C_ApplyHackToAcquiredTarget::CallFunc_K2_GetActorLocation_ReturnValue_4' has a wrong offset!");
static_assert(offsetof(HARDWARE_TargetIdentifier_Base_C_ApplyHackToAcquiredTarget, CallFunc_GetOwnerCharacter_Character_5) == 0x000278, "Member 'HARDWARE_TargetIdentifier_Base_C_ApplyHackToAcquiredTarget::CallFunc_GetOwnerCharacter_Character_5' has a wrong offset!");
static_assert(offsetof(HARDWARE_TargetIdentifier_Base_C_ApplyHackToAcquiredTarget, CallFunc_AddPathableVoxelsInBox_ReturnValue) == 0x000280, "Member 'HARDWARE_TargetIdentifier_Base_C_ApplyHackToAcquiredTarget::CallFunc_AddPathableVoxelsInBox_ReturnValue' has a wrong offset!");
static_assert(offsetof(HARDWARE_TargetIdentifier_Base_C_ApplyHackToAcquiredTarget, K2Node_DynamicCast_AsPAWN_Enemy) == 0x000288, "Member 'HARDWARE_TargetIdentifier_Base_C_ApplyHackToAcquiredTarget::K2Node_DynamicCast_AsPAWN_Enemy' has a wrong offset!");
static_assert(offsetof(HARDWARE_TargetIdentifier_Base_C_ApplyHackToAcquiredTarget, K2Node_DynamicCast_bSuccess_2) == 0x000290, "Member 'HARDWARE_TargetIdentifier_Base_C_ApplyHackToAcquiredTarget::K2Node_DynamicCast_bSuccess_2' has a wrong offset!");
static_assert(offsetof(HARDWARE_TargetIdentifier_Base_C_ApplyHackToAcquiredTarget, CallFunc_ApplyMod_ReturnValue_4) == 0x000298, "Member 'HARDWARE_TargetIdentifier_Base_C_ApplyHackToAcquiredTarget::CallFunc_ApplyMod_ReturnValue_4' has a wrong offset!");

// Function HARDWARE_TargetIdentifier_Base.HARDWARE_TargetIdentifier_Base_C.PerformTargetTrace
// 0x0208 (0x0208 - 0x0000)
struct HARDWARE_TargetIdentifier_Base_C_PerformTargetTrace final
{
public:
	class AActor*                                 ResultActor;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 HitActor;                                          // 0x0008(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                HitLocation;                                       // 0x0010(0x000C)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1C[0x4];                                       // 0x001C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class AINTERACT_DestructibleBase_C*           HitDestructibleActor;                              // 0x0020(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class APAWN_Enemy_C*                          HitEnemyPawn;                                      // 0x0028(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 LastCursorActor;                                   // 0x0030(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class APAWN_Hacker_Simple_C*                  HackerPawn;                                        // 0x0038(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_K2_GetComponentLocation_ReturnValue;      // 0x0040(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x004C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsActorInTargetingRange_Result;           // 0x004D(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_4E[0x2];                                       // 0x004E(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	class AActor*                                 CallFunc_GetLastCursorActor_Actor;                 // 0x0050(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AINTERACT_DestructibleBase_C*           K2Node_DynamicCast_AsINTERACT_Destructible_Base;   // 0x0058(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0060(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_61[0x7];                                       // 0x0061(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class APAWN_Enemy_C*                          K2Node_DynamicCast_AsPAWN_Enemy;                   // 0x0068(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess_1;                     // 0x0070(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsAlive_Result;                           // 0x0071(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_72[0x6];                                       // 0x0072(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<TSubclassOf<class AActor>>             K2Node_MakeArray_Array;                            // 0x0078(0x0010)(ConstParm, ReferenceParm)
	bool                                          CallFunc_IsValid_ReturnValue_1;                    // 0x0088(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_89[0x7];                                       // 0x0089(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class AINTERACT_DestructibleBase_C*           K2Node_DynamicCast_AsINTERACT_Destructible_Base_1; // 0x0090(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess_2;                     // 0x0098(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_99[0x7];                                       // 0x0099(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class APAWN_Enemy_C*                          K2Node_DynamicCast_AsPAWN_Enemy_1;                 // 0x00A0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess_3;                     // 0x00A8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsTargetIdentifiable_Result;              // 0x00A9(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsValid_ReturnValue_2;                    // 0x00AA(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsAlive_Result_1;                         // 0x00AB(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BooleanAND_ReturnValue;                   // 0x00AC(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_AD[0x3];                                       // 0x00AD(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class AActor*>                         Temp_object_Variable;                              // 0x00B0(0x0010)(ConstParm, ReferenceParm)
	struct FHitResult                             CallFunc_LineTraceSingle_OutHit;                   // 0x00C0(0x0088)(IsPlainOldData, NoDestructor, ContainsInstancedReference)
	bool                                          CallFunc_LineTraceSingle_ReturnValue;              // 0x0148(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Not_PreBool_ReturnValue;                  // 0x0149(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BreakHitResult_bBlockingHit;              // 0x014A(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BreakHitResult_bInitialOverlap;           // 0x014B(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                         CallFunc_BreakHitResult_Time;                      // 0x014C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakHitResult_Distance;                  // 0x0150(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakHitResult_Location;                  // 0x0154(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakHitResult_ImpactPoint;               // 0x0160(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakHitResult_Normal;                    // 0x016C(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakHitResult_ImpactNormal;              // 0x0178(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_184[0x4];                                      // 0x0184(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UPhysicalMaterial*                      CallFunc_BreakHitResult_PhysMat;                   // 0x0188(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 CallFunc_BreakHitResult_HitActor;                  // 0x0190(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UPrimitiveComponent*                    CallFunc_BreakHitResult_HitComponent;              // 0x0198(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FName                                   CallFunc_BreakHitResult_HitBoneName;               // 0x01A0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_BreakHitResult_HitItem;                   // 0x01A8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_BreakHitResult_ElementIndex;              // 0x01AC(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_BreakHitResult_FaceIndex;                 // 0x01B0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakHitResult_TraceStart;                // 0x01B4(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakHitResult_TraceEnd;                  // 0x01C0(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_ObjectObject_ReturnValue;      // 0x01CC(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BooleanOR_ReturnValue;                    // 0x01CD(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_1CE[0x2];                                      // 0x01CE(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                CallFunc_GetFirstCullableActorInLineOfSight_OutTraceHitLocation; // 0x01D0(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1DC[0x4];                                      // 0x01DC(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class AActor*                                 CallFunc_GetFirstCullableActorInLineOfSight_ReturnValue; // 0x01E0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class APAWN_SystemShockCharacter_C*           CallFunc_GetOwnerCharacter_Character;              // 0x01E8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue_3;                    // 0x01F0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_1F1[0x7];                                      // 0x01F1(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class APAWN_Hacker_Simple_C*                  K2Node_DynamicCast_AsPAWN_Hacker_Simple;           // 0x01F8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess_4;                     // 0x0200(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(HARDWARE_TargetIdentifier_Base_C_PerformTargetTrace) == 0x000008, "Wrong alignment on HARDWARE_TargetIdentifier_Base_C_PerformTargetTrace");
static_assert(sizeof(HARDWARE_TargetIdentifier_Base_C_PerformTargetTrace) == 0x000208, "Wrong size on HARDWARE_TargetIdentifier_Base_C_PerformTargetTrace");
static_assert(offsetof(HARDWARE_TargetIdentifier_Base_C_PerformTargetTrace, ResultActor) == 0x000000, "Member 'HARDWARE_TargetIdentifier_Base_C_PerformTargetTrace::ResultActor' has a wrong offset!");
static_assert(offsetof(HARDWARE_TargetIdentifier_Base_C_PerformTargetTrace, HitActor) == 0x000008, "Member 'HARDWARE_TargetIdentifier_Base_C_PerformTargetTrace::HitActor' has a wrong offset!");
static_assert(offsetof(HARDWARE_TargetIdentifier_Base_C_PerformTargetTrace, HitLocation) == 0x000010, "Member 'HARDWARE_TargetIdentifier_Base_C_PerformTargetTrace::HitLocation' has a wrong offset!");
static_assert(offsetof(HARDWARE_TargetIdentifier_Base_C_PerformTargetTrace, HitDestructibleActor) == 0x000020, "Member 'HARDWARE_TargetIdentifier_Base_C_PerformTargetTrace::HitDestructibleActor' has a wrong offset!");
static_assert(offsetof(HARDWARE_TargetIdentifier_Base_C_PerformTargetTrace, HitEnemyPawn) == 0x000028, "Member 'HARDWARE_TargetIdentifier_Base_C_PerformTargetTrace::HitEnemyPawn' has a wrong offset!");
static_assert(offsetof(HARDWARE_TargetIdentifier_Base_C_PerformTargetTrace, LastCursorActor) == 0x000030, "Member 'HARDWARE_TargetIdentifier_Base_C_PerformTargetTrace::LastCursorActor' has a wrong offset!");
static_assert(offsetof(HARDWARE_TargetIdentifier_Base_C_PerformTargetTrace, HackerPawn) == 0x000038, "Member 'HARDWARE_TargetIdentifier_Base_C_PerformTargetTrace::HackerPawn' has a wrong offset!");
static_assert(offsetof(HARDWARE_TargetIdentifier_Base_C_PerformTargetTrace, CallFunc_K2_GetComponentLocation_ReturnValue) == 0x000040, "Member 'HARDWARE_TargetIdentifier_Base_C_PerformTargetTrace::CallFunc_K2_GetComponentLocation_ReturnValue' has a wrong offset!");
static_assert(offsetof(HARDWARE_TargetIdentifier_Base_C_PerformTargetTrace, CallFunc_IsValid_ReturnValue) == 0x00004C, "Member 'HARDWARE_TargetIdentifier_Base_C_PerformTargetTrace::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(HARDWARE_TargetIdentifier_Base_C_PerformTargetTrace, CallFunc_IsActorInTargetingRange_Result) == 0x00004D, "Member 'HARDWARE_TargetIdentifier_Base_C_PerformTargetTrace::CallFunc_IsActorInTargetingRange_Result' has a wrong offset!");
static_assert(offsetof(HARDWARE_TargetIdentifier_Base_C_PerformTargetTrace, CallFunc_GetLastCursorActor_Actor) == 0x000050, "Member 'HARDWARE_TargetIdentifier_Base_C_PerformTargetTrace::CallFunc_GetLastCursorActor_Actor' has a wrong offset!");
static_assert(offsetof(HARDWARE_TargetIdentifier_Base_C_PerformTargetTrace, K2Node_DynamicCast_AsINTERACT_Destructible_Base) == 0x000058, "Member 'HARDWARE_TargetIdentifier_Base_C_PerformTargetTrace::K2Node_DynamicCast_AsINTERACT_Destructible_Base' has a wrong offset!");
static_assert(offsetof(HARDWARE_TargetIdentifier_Base_C_PerformTargetTrace, K2Node_DynamicCast_bSuccess) == 0x000060, "Member 'HARDWARE_TargetIdentifier_Base_C_PerformTargetTrace::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(HARDWARE_TargetIdentifier_Base_C_PerformTargetTrace, K2Node_DynamicCast_AsPAWN_Enemy) == 0x000068, "Member 'HARDWARE_TargetIdentifier_Base_C_PerformTargetTrace::K2Node_DynamicCast_AsPAWN_Enemy' has a wrong offset!");
static_assert(offsetof(HARDWARE_TargetIdentifier_Base_C_PerformTargetTrace, K2Node_DynamicCast_bSuccess_1) == 0x000070, "Member 'HARDWARE_TargetIdentifier_Base_C_PerformTargetTrace::K2Node_DynamicCast_bSuccess_1' has a wrong offset!");
static_assert(offsetof(HARDWARE_TargetIdentifier_Base_C_PerformTargetTrace, CallFunc_IsAlive_Result) == 0x000071, "Member 'HARDWARE_TargetIdentifier_Base_C_PerformTargetTrace::CallFunc_IsAlive_Result' has a wrong offset!");
static_assert(offsetof(HARDWARE_TargetIdentifier_Base_C_PerformTargetTrace, K2Node_MakeArray_Array) == 0x000078, "Member 'HARDWARE_TargetIdentifier_Base_C_PerformTargetTrace::K2Node_MakeArray_Array' has a wrong offset!");
static_assert(offsetof(HARDWARE_TargetIdentifier_Base_C_PerformTargetTrace, CallFunc_IsValid_ReturnValue_1) == 0x000088, "Member 'HARDWARE_TargetIdentifier_Base_C_PerformTargetTrace::CallFunc_IsValid_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(HARDWARE_TargetIdentifier_Base_C_PerformTargetTrace, K2Node_DynamicCast_AsINTERACT_Destructible_Base_1) == 0x000090, "Member 'HARDWARE_TargetIdentifier_Base_C_PerformTargetTrace::K2Node_DynamicCast_AsINTERACT_Destructible_Base_1' has a wrong offset!");
static_assert(offsetof(HARDWARE_TargetIdentifier_Base_C_PerformTargetTrace, K2Node_DynamicCast_bSuccess_2) == 0x000098, "Member 'HARDWARE_TargetIdentifier_Base_C_PerformTargetTrace::K2Node_DynamicCast_bSuccess_2' has a wrong offset!");
static_assert(offsetof(HARDWARE_TargetIdentifier_Base_C_PerformTargetTrace, K2Node_DynamicCast_AsPAWN_Enemy_1) == 0x0000A0, "Member 'HARDWARE_TargetIdentifier_Base_C_PerformTargetTrace::K2Node_DynamicCast_AsPAWN_Enemy_1' has a wrong offset!");
static_assert(offsetof(HARDWARE_TargetIdentifier_Base_C_PerformTargetTrace, K2Node_DynamicCast_bSuccess_3) == 0x0000A8, "Member 'HARDWARE_TargetIdentifier_Base_C_PerformTargetTrace::K2Node_DynamicCast_bSuccess_3' has a wrong offset!");
static_assert(offsetof(HARDWARE_TargetIdentifier_Base_C_PerformTargetTrace, CallFunc_IsTargetIdentifiable_Result) == 0x0000A9, "Member 'HARDWARE_TargetIdentifier_Base_C_PerformTargetTrace::CallFunc_IsTargetIdentifiable_Result' has a wrong offset!");
static_assert(offsetof(HARDWARE_TargetIdentifier_Base_C_PerformTargetTrace, CallFunc_IsValid_ReturnValue_2) == 0x0000AA, "Member 'HARDWARE_TargetIdentifier_Base_C_PerformTargetTrace::CallFunc_IsValid_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(HARDWARE_TargetIdentifier_Base_C_PerformTargetTrace, CallFunc_IsAlive_Result_1) == 0x0000AB, "Member 'HARDWARE_TargetIdentifier_Base_C_PerformTargetTrace::CallFunc_IsAlive_Result_1' has a wrong offset!");
static_assert(offsetof(HARDWARE_TargetIdentifier_Base_C_PerformTargetTrace, CallFunc_BooleanAND_ReturnValue) == 0x0000AC, "Member 'HARDWARE_TargetIdentifier_Base_C_PerformTargetTrace::CallFunc_BooleanAND_ReturnValue' has a wrong offset!");
static_assert(offsetof(HARDWARE_TargetIdentifier_Base_C_PerformTargetTrace, Temp_object_Variable) == 0x0000B0, "Member 'HARDWARE_TargetIdentifier_Base_C_PerformTargetTrace::Temp_object_Variable' has a wrong offset!");
static_assert(offsetof(HARDWARE_TargetIdentifier_Base_C_PerformTargetTrace, CallFunc_LineTraceSingle_OutHit) == 0x0000C0, "Member 'HARDWARE_TargetIdentifier_Base_C_PerformTargetTrace::CallFunc_LineTraceSingle_OutHit' has a wrong offset!");
static_assert(offsetof(HARDWARE_TargetIdentifier_Base_C_PerformTargetTrace, CallFunc_LineTraceSingle_ReturnValue) == 0x000148, "Member 'HARDWARE_TargetIdentifier_Base_C_PerformTargetTrace::CallFunc_LineTraceSingle_ReturnValue' has a wrong offset!");
static_assert(offsetof(HARDWARE_TargetIdentifier_Base_C_PerformTargetTrace, CallFunc_Not_PreBool_ReturnValue) == 0x000149, "Member 'HARDWARE_TargetIdentifier_Base_C_PerformTargetTrace::CallFunc_Not_PreBool_ReturnValue' has a wrong offset!");
static_assert(offsetof(HARDWARE_TargetIdentifier_Base_C_PerformTargetTrace, CallFunc_BreakHitResult_bBlockingHit) == 0x00014A, "Member 'HARDWARE_TargetIdentifier_Base_C_PerformTargetTrace::CallFunc_BreakHitResult_bBlockingHit' has a wrong offset!");
static_assert(offsetof(HARDWARE_TargetIdentifier_Base_C_PerformTargetTrace, CallFunc_BreakHitResult_bInitialOverlap) == 0x00014B, "Member 'HARDWARE_TargetIdentifier_Base_C_PerformTargetTrace::CallFunc_BreakHitResult_bInitialOverlap' has a wrong offset!");
static_assert(offsetof(HARDWARE_TargetIdentifier_Base_C_PerformTargetTrace, CallFunc_BreakHitResult_Time) == 0x00014C, "Member 'HARDWARE_TargetIdentifier_Base_C_PerformTargetTrace::CallFunc_BreakHitResult_Time' has a wrong offset!");
static_assert(offsetof(HARDWARE_TargetIdentifier_Base_C_PerformTargetTrace, CallFunc_BreakHitResult_Distance) == 0x000150, "Member 'HARDWARE_TargetIdentifier_Base_C_PerformTargetTrace::CallFunc_BreakHitResult_Distance' has a wrong offset!");
static_assert(offsetof(HARDWARE_TargetIdentifier_Base_C_PerformTargetTrace, CallFunc_BreakHitResult_Location) == 0x000154, "Member 'HARDWARE_TargetIdentifier_Base_C_PerformTargetTrace::CallFunc_BreakHitResult_Location' has a wrong offset!");
static_assert(offsetof(HARDWARE_TargetIdentifier_Base_C_PerformTargetTrace, CallFunc_BreakHitResult_ImpactPoint) == 0x000160, "Member 'HARDWARE_TargetIdentifier_Base_C_PerformTargetTrace::CallFunc_BreakHitResult_ImpactPoint' has a wrong offset!");
static_assert(offsetof(HARDWARE_TargetIdentifier_Base_C_PerformTargetTrace, CallFunc_BreakHitResult_Normal) == 0x00016C, "Member 'HARDWARE_TargetIdentifier_Base_C_PerformTargetTrace::CallFunc_BreakHitResult_Normal' has a wrong offset!");
static_assert(offsetof(HARDWARE_TargetIdentifier_Base_C_PerformTargetTrace, CallFunc_BreakHitResult_ImpactNormal) == 0x000178, "Member 'HARDWARE_TargetIdentifier_Base_C_PerformTargetTrace::CallFunc_BreakHitResult_ImpactNormal' has a wrong offset!");
static_assert(offsetof(HARDWARE_TargetIdentifier_Base_C_PerformTargetTrace, CallFunc_BreakHitResult_PhysMat) == 0x000188, "Member 'HARDWARE_TargetIdentifier_Base_C_PerformTargetTrace::CallFunc_BreakHitResult_PhysMat' has a wrong offset!");
static_assert(offsetof(HARDWARE_TargetIdentifier_Base_C_PerformTargetTrace, CallFunc_BreakHitResult_HitActor) == 0x000190, "Member 'HARDWARE_TargetIdentifier_Base_C_PerformTargetTrace::CallFunc_BreakHitResult_HitActor' has a wrong offset!");
static_assert(offsetof(HARDWARE_TargetIdentifier_Base_C_PerformTargetTrace, CallFunc_BreakHitResult_HitComponent) == 0x000198, "Member 'HARDWARE_TargetIdentifier_Base_C_PerformTargetTrace::CallFunc_BreakHitResult_HitComponent' has a wrong offset!");
static_assert(offsetof(HARDWARE_TargetIdentifier_Base_C_PerformTargetTrace, CallFunc_BreakHitResult_HitBoneName) == 0x0001A0, "Member 'HARDWARE_TargetIdentifier_Base_C_PerformTargetTrace::CallFunc_BreakHitResult_HitBoneName' has a wrong offset!");
static_assert(offsetof(HARDWARE_TargetIdentifier_Base_C_PerformTargetTrace, CallFunc_BreakHitResult_HitItem) == 0x0001A8, "Member 'HARDWARE_TargetIdentifier_Base_C_PerformTargetTrace::CallFunc_BreakHitResult_HitItem' has a wrong offset!");
static_assert(offsetof(HARDWARE_TargetIdentifier_Base_C_PerformTargetTrace, CallFunc_BreakHitResult_ElementIndex) == 0x0001AC, "Member 'HARDWARE_TargetIdentifier_Base_C_PerformTargetTrace::CallFunc_BreakHitResult_ElementIndex' has a wrong offset!");
static_assert(offsetof(HARDWARE_TargetIdentifier_Base_C_PerformTargetTrace, CallFunc_BreakHitResult_FaceIndex) == 0x0001B0, "Member 'HARDWARE_TargetIdentifier_Base_C_PerformTargetTrace::CallFunc_BreakHitResult_FaceIndex' has a wrong offset!");
static_assert(offsetof(HARDWARE_TargetIdentifier_Base_C_PerformTargetTrace, CallFunc_BreakHitResult_TraceStart) == 0x0001B4, "Member 'HARDWARE_TargetIdentifier_Base_C_PerformTargetTrace::CallFunc_BreakHitResult_TraceStart' has a wrong offset!");
static_assert(offsetof(HARDWARE_TargetIdentifier_Base_C_PerformTargetTrace, CallFunc_BreakHitResult_TraceEnd) == 0x0001C0, "Member 'HARDWARE_TargetIdentifier_Base_C_PerformTargetTrace::CallFunc_BreakHitResult_TraceEnd' has a wrong offset!");
static_assert(offsetof(HARDWARE_TargetIdentifier_Base_C_PerformTargetTrace, CallFunc_EqualEqual_ObjectObject_ReturnValue) == 0x0001CC, "Member 'HARDWARE_TargetIdentifier_Base_C_PerformTargetTrace::CallFunc_EqualEqual_ObjectObject_ReturnValue' has a wrong offset!");
static_assert(offsetof(HARDWARE_TargetIdentifier_Base_C_PerformTargetTrace, CallFunc_BooleanOR_ReturnValue) == 0x0001CD, "Member 'HARDWARE_TargetIdentifier_Base_C_PerformTargetTrace::CallFunc_BooleanOR_ReturnValue' has a wrong offset!");
static_assert(offsetof(HARDWARE_TargetIdentifier_Base_C_PerformTargetTrace, CallFunc_GetFirstCullableActorInLineOfSight_OutTraceHitLocation) == 0x0001D0, "Member 'HARDWARE_TargetIdentifier_Base_C_PerformTargetTrace::CallFunc_GetFirstCullableActorInLineOfSight_OutTraceHitLocation' has a wrong offset!");
static_assert(offsetof(HARDWARE_TargetIdentifier_Base_C_PerformTargetTrace, CallFunc_GetFirstCullableActorInLineOfSight_ReturnValue) == 0x0001E0, "Member 'HARDWARE_TargetIdentifier_Base_C_PerformTargetTrace::CallFunc_GetFirstCullableActorInLineOfSight_ReturnValue' has a wrong offset!");
static_assert(offsetof(HARDWARE_TargetIdentifier_Base_C_PerformTargetTrace, CallFunc_GetOwnerCharacter_Character) == 0x0001E8, "Member 'HARDWARE_TargetIdentifier_Base_C_PerformTargetTrace::CallFunc_GetOwnerCharacter_Character' has a wrong offset!");
static_assert(offsetof(HARDWARE_TargetIdentifier_Base_C_PerformTargetTrace, CallFunc_IsValid_ReturnValue_3) == 0x0001F0, "Member 'HARDWARE_TargetIdentifier_Base_C_PerformTargetTrace::CallFunc_IsValid_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(HARDWARE_TargetIdentifier_Base_C_PerformTargetTrace, K2Node_DynamicCast_AsPAWN_Hacker_Simple) == 0x0001F8, "Member 'HARDWARE_TargetIdentifier_Base_C_PerformTargetTrace::K2Node_DynamicCast_AsPAWN_Hacker_Simple' has a wrong offset!");
static_assert(offsetof(HARDWARE_TargetIdentifier_Base_C_PerformTargetTrace, K2Node_DynamicCast_bSuccess_4) == 0x000200, "Member 'HARDWARE_TargetIdentifier_Base_C_PerformTargetTrace::K2Node_DynamicCast_bSuccess_4' has a wrong offset!");

// Function HARDWARE_TargetIdentifier_Base.HARDWARE_TargetIdentifier_Base_C.SetTargetHackProgress
// 0x0008 (0x0008 - 0x0000)
struct HARDWARE_TargetIdentifier_Base_C_SetTargetHackProgress final
{
public:
	float                                         Progress;                                          // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_FClamp_ReturnValue;                       // 0x0004(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(HARDWARE_TargetIdentifier_Base_C_SetTargetHackProgress) == 0x000004, "Wrong alignment on HARDWARE_TargetIdentifier_Base_C_SetTargetHackProgress");
static_assert(sizeof(HARDWARE_TargetIdentifier_Base_C_SetTargetHackProgress) == 0x000008, "Wrong size on HARDWARE_TargetIdentifier_Base_C_SetTargetHackProgress");
static_assert(offsetof(HARDWARE_TargetIdentifier_Base_C_SetTargetHackProgress, Progress) == 0x000000, "Member 'HARDWARE_TargetIdentifier_Base_C_SetTargetHackProgress::Progress' has a wrong offset!");
static_assert(offsetof(HARDWARE_TargetIdentifier_Base_C_SetTargetHackProgress, CallFunc_FClamp_ReturnValue) == 0x000004, "Member 'HARDWARE_TargetIdentifier_Base_C_SetTargetHackProgress::CallFunc_FClamp_ReturnValue' has a wrong offset!");

// Function HARDWARE_TargetIdentifier_Base.HARDWARE_TargetIdentifier_Base_C.ForceStartNextTargetTick
// 0x0018 (0x0018 - 0x0000)
struct HARDWARE_TargetIdentifier_Base_C_ForceStartNextTargetTick final
{
public:
	TDelegate<void()>                             K2Node_CreateDelegate_OutputDelegate;              // 0x0000(0x0010)(ZeroConstructor, NoDestructor)
	struct FTimerHandle                           CallFunc_K2_SetTimerDelegate_ReturnValue;          // 0x0010(0x0008)(NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(HARDWARE_TargetIdentifier_Base_C_ForceStartNextTargetTick) == 0x000008, "Wrong alignment on HARDWARE_TargetIdentifier_Base_C_ForceStartNextTargetTick");
static_assert(sizeof(HARDWARE_TargetIdentifier_Base_C_ForceStartNextTargetTick) == 0x000018, "Wrong size on HARDWARE_TargetIdentifier_Base_C_ForceStartNextTargetTick");
static_assert(offsetof(HARDWARE_TargetIdentifier_Base_C_ForceStartNextTargetTick, K2Node_CreateDelegate_OutputDelegate) == 0x000000, "Member 'HARDWARE_TargetIdentifier_Base_C_ForceStartNextTargetTick::K2Node_CreateDelegate_OutputDelegate' has a wrong offset!");
static_assert(offsetof(HARDWARE_TargetIdentifier_Base_C_ForceStartNextTargetTick, CallFunc_K2_SetTimerDelegate_ReturnValue) == 0x000010, "Member 'HARDWARE_TargetIdentifier_Base_C_ForceStartNextTargetTick::CallFunc_K2_SetTimerDelegate_ReturnValue' has a wrong offset!");

// Function HARDWARE_TargetIdentifier_Base.HARDWARE_TargetIdentifier_Base_C.TryStartTargetTicks
// 0x0002 (0x0002 - 0x0000)
struct HARDWARE_TargetIdentifier_Base_C_TryStartTargetTicks final
{
public:
	bool                                          CallFunc_K2_IsTimerActiveHandle_ReturnValue;       // 0x0000(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Not_PreBool_ReturnValue;                  // 0x0001(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(HARDWARE_TargetIdentifier_Base_C_TryStartTargetTicks) == 0x000001, "Wrong alignment on HARDWARE_TargetIdentifier_Base_C_TryStartTargetTicks");
static_assert(sizeof(HARDWARE_TargetIdentifier_Base_C_TryStartTargetTicks) == 0x000002, "Wrong size on HARDWARE_TargetIdentifier_Base_C_TryStartTargetTicks");
static_assert(offsetof(HARDWARE_TargetIdentifier_Base_C_TryStartTargetTicks, CallFunc_K2_IsTimerActiveHandle_ReturnValue) == 0x000000, "Member 'HARDWARE_TargetIdentifier_Base_C_TryStartTargetTicks::CallFunc_K2_IsTimerActiveHandle_ReturnValue' has a wrong offset!");
static_assert(offsetof(HARDWARE_TargetIdentifier_Base_C_TryStartTargetTicks, CallFunc_Not_PreBool_ReturnValue) == 0x000001, "Member 'HARDWARE_TargetIdentifier_Base_C_TryStartTargetTicks::CallFunc_Not_PreBool_ReturnValue' has a wrong offset!");

// Function HARDWARE_TargetIdentifier_Base.HARDWARE_TargetIdentifier_Base_C.TryStopTargetTicks
// 0x0001 (0x0001 - 0x0000)
struct HARDWARE_TargetIdentifier_Base_C_TryStopTargetTicks final
{
public:
	bool                                          CallFunc_K2_IsValidTimerHandle_ReturnValue;        // 0x0000(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(HARDWARE_TargetIdentifier_Base_C_TryStopTargetTicks) == 0x000001, "Wrong alignment on HARDWARE_TargetIdentifier_Base_C_TryStopTargetTicks");
static_assert(sizeof(HARDWARE_TargetIdentifier_Base_C_TryStopTargetTicks) == 0x000001, "Wrong size on HARDWARE_TargetIdentifier_Base_C_TryStopTargetTicks");
static_assert(offsetof(HARDWARE_TargetIdentifier_Base_C_TryStopTargetTicks, CallFunc_K2_IsValidTimerHandle_ReturnValue) == 0x000000, "Member 'HARDWARE_TargetIdentifier_Base_C_TryStopTargetTicks::CallFunc_K2_IsValidTimerHandle_ReturnValue' has a wrong offset!");

// Function HARDWARE_TargetIdentifier_Base.HARDWARE_TargetIdentifier_Base_C.OnUpgradedItem
// 0x0020 (0x0020 - 0x0000)
struct HARDWARE_TargetIdentifier_Base_C_OnUpgradedItem final
{
public:
	class UITEM_UpgradeBase_C*                    PreviousItem;                                      // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Result;                                            // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_GetIsActivated_Result;                    // 0x0009(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_OnUpgradedItem_Result;                    // 0x000A(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_B[0x5];                                        // 0x000B(0x0005)(Fixing Size After Last Property [ Dumper-7 ])
	class UHARDWARE_TargetIdentifier_Base_C*      K2Node_DynamicCast_AsHARDWARE_Target_Identifier_Base; // 0x0010(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0018(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(HARDWARE_TargetIdentifier_Base_C_OnUpgradedItem) == 0x000008, "Wrong alignment on HARDWARE_TargetIdentifier_Base_C_OnUpgradedItem");
static_assert(sizeof(HARDWARE_TargetIdentifier_Base_C_OnUpgradedItem) == 0x000020, "Wrong size on HARDWARE_TargetIdentifier_Base_C_OnUpgradedItem");
static_assert(offsetof(HARDWARE_TargetIdentifier_Base_C_OnUpgradedItem, PreviousItem) == 0x000000, "Member 'HARDWARE_TargetIdentifier_Base_C_OnUpgradedItem::PreviousItem' has a wrong offset!");
static_assert(offsetof(HARDWARE_TargetIdentifier_Base_C_OnUpgradedItem, Result) == 0x000008, "Member 'HARDWARE_TargetIdentifier_Base_C_OnUpgradedItem::Result' has a wrong offset!");
static_assert(offsetof(HARDWARE_TargetIdentifier_Base_C_OnUpgradedItem, CallFunc_GetIsActivated_Result) == 0x000009, "Member 'HARDWARE_TargetIdentifier_Base_C_OnUpgradedItem::CallFunc_GetIsActivated_Result' has a wrong offset!");
static_assert(offsetof(HARDWARE_TargetIdentifier_Base_C_OnUpgradedItem, CallFunc_OnUpgradedItem_Result) == 0x00000A, "Member 'HARDWARE_TargetIdentifier_Base_C_OnUpgradedItem::CallFunc_OnUpgradedItem_Result' has a wrong offset!");
static_assert(offsetof(HARDWARE_TargetIdentifier_Base_C_OnUpgradedItem, K2Node_DynamicCast_AsHARDWARE_Target_Identifier_Base) == 0x000010, "Member 'HARDWARE_TargetIdentifier_Base_C_OnUpgradedItem::K2Node_DynamicCast_AsHARDWARE_Target_Identifier_Base' has a wrong offset!");
static_assert(offsetof(HARDWARE_TargetIdentifier_Base_C_OnUpgradedItem, K2Node_DynamicCast_bSuccess) == 0x000018, "Member 'HARDWARE_TargetIdentifier_Base_C_OnUpgradedItem::K2Node_DynamicCast_bSuccess' has a wrong offset!");

// Function HARDWARE_TargetIdentifier_Base.HARDWARE_TargetIdentifier_Base_C.EVENT_OnTargetTick
// 0x0030 (0x0030 - 0x0000)
struct HARDWARE_TargetIdentifier_Base_C_EVENT_OnTargetTick final
{
public:
	class AActor*                                 NewCandidateTargetActor;                           // 0x0000(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_TryStopUploadingHackToCurrentTarget_Result; // 0x0008(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_HasEnergyForHack_Result;                  // 0x0009(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_A[0x2];                                        // 0x000A(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_GetWorldDeltaSeconds_ReturnValue;         // 0x000C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_GreaterEqual_FloatFloat_ReturnValue;      // 0x0010(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_11[0x3];                                       // 0x0011(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_Divide_FloatFloat_ReturnValue;            // 0x0014(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Add_FloatFloat_ReturnValue;               // 0x0018(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_GreaterEqual_FloatFloat_ReturnValue_1;    // 0x001C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_TryUnacquireTargetActor_Result;           // 0x001D(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsActorInTargetingRange_Result;           // 0x001E(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_1F[0x1];                                       // 0x001F(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	class AActor*                                 CallFunc_PerformTargetTrace_ResultActor;           // 0x0020(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_NotEqual_ObjectObject_ReturnValue;        // 0x0028(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0029(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(HARDWARE_TargetIdentifier_Base_C_EVENT_OnTargetTick) == 0x000008, "Wrong alignment on HARDWARE_TargetIdentifier_Base_C_EVENT_OnTargetTick");
static_assert(sizeof(HARDWARE_TargetIdentifier_Base_C_EVENT_OnTargetTick) == 0x000030, "Wrong size on HARDWARE_TargetIdentifier_Base_C_EVENT_OnTargetTick");
static_assert(offsetof(HARDWARE_TargetIdentifier_Base_C_EVENT_OnTargetTick, NewCandidateTargetActor) == 0x000000, "Member 'HARDWARE_TargetIdentifier_Base_C_EVENT_OnTargetTick::NewCandidateTargetActor' has a wrong offset!");
static_assert(offsetof(HARDWARE_TargetIdentifier_Base_C_EVENT_OnTargetTick, CallFunc_TryStopUploadingHackToCurrentTarget_Result) == 0x000008, "Member 'HARDWARE_TargetIdentifier_Base_C_EVENT_OnTargetTick::CallFunc_TryStopUploadingHackToCurrentTarget_Result' has a wrong offset!");
static_assert(offsetof(HARDWARE_TargetIdentifier_Base_C_EVENT_OnTargetTick, CallFunc_HasEnergyForHack_Result) == 0x000009, "Member 'HARDWARE_TargetIdentifier_Base_C_EVENT_OnTargetTick::CallFunc_HasEnergyForHack_Result' has a wrong offset!");
static_assert(offsetof(HARDWARE_TargetIdentifier_Base_C_EVENT_OnTargetTick, CallFunc_GetWorldDeltaSeconds_ReturnValue) == 0x00000C, "Member 'HARDWARE_TargetIdentifier_Base_C_EVENT_OnTargetTick::CallFunc_GetWorldDeltaSeconds_ReturnValue' has a wrong offset!");
static_assert(offsetof(HARDWARE_TargetIdentifier_Base_C_EVENT_OnTargetTick, CallFunc_GreaterEqual_FloatFloat_ReturnValue) == 0x000010, "Member 'HARDWARE_TargetIdentifier_Base_C_EVENT_OnTargetTick::CallFunc_GreaterEqual_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(HARDWARE_TargetIdentifier_Base_C_EVENT_OnTargetTick, CallFunc_Divide_FloatFloat_ReturnValue) == 0x000014, "Member 'HARDWARE_TargetIdentifier_Base_C_EVENT_OnTargetTick::CallFunc_Divide_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(HARDWARE_TargetIdentifier_Base_C_EVENT_OnTargetTick, CallFunc_Add_FloatFloat_ReturnValue) == 0x000018, "Member 'HARDWARE_TargetIdentifier_Base_C_EVENT_OnTargetTick::CallFunc_Add_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(HARDWARE_TargetIdentifier_Base_C_EVENT_OnTargetTick, CallFunc_GreaterEqual_FloatFloat_ReturnValue_1) == 0x00001C, "Member 'HARDWARE_TargetIdentifier_Base_C_EVENT_OnTargetTick::CallFunc_GreaterEqual_FloatFloat_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(HARDWARE_TargetIdentifier_Base_C_EVENT_OnTargetTick, CallFunc_TryUnacquireTargetActor_Result) == 0x00001D, "Member 'HARDWARE_TargetIdentifier_Base_C_EVENT_OnTargetTick::CallFunc_TryUnacquireTargetActor_Result' has a wrong offset!");
static_assert(offsetof(HARDWARE_TargetIdentifier_Base_C_EVENT_OnTargetTick, CallFunc_IsActorInTargetingRange_Result) == 0x00001E, "Member 'HARDWARE_TargetIdentifier_Base_C_EVENT_OnTargetTick::CallFunc_IsActorInTargetingRange_Result' has a wrong offset!");
static_assert(offsetof(HARDWARE_TargetIdentifier_Base_C_EVENT_OnTargetTick, CallFunc_PerformTargetTrace_ResultActor) == 0x000020, "Member 'HARDWARE_TargetIdentifier_Base_C_EVENT_OnTargetTick::CallFunc_PerformTargetTrace_ResultActor' has a wrong offset!");
static_assert(offsetof(HARDWARE_TargetIdentifier_Base_C_EVENT_OnTargetTick, CallFunc_NotEqual_ObjectObject_ReturnValue) == 0x000028, "Member 'HARDWARE_TargetIdentifier_Base_C_EVENT_OnTargetTick::CallFunc_NotEqual_ObjectObject_ReturnValue' has a wrong offset!");
static_assert(offsetof(HARDWARE_TargetIdentifier_Base_C_EVENT_OnTargetTick, CallFunc_IsValid_ReturnValue) == 0x000029, "Member 'HARDWARE_TargetIdentifier_Base_C_EVENT_OnTargetTick::CallFunc_IsValid_ReturnValue' has a wrong offset!");

// Function HARDWARE_TargetIdentifier_Base.HARDWARE_TargetIdentifier_Base_C.UpdateHardwareState
// 0x0004 (0x0004 - 0x0000)
struct HARDWARE_TargetIdentifier_Base_C_UpdateHardwareState final
{
public:
	bool                                          IsEnabled;                                         // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Result;                                            // 0x0001(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_UpdateHardwareState_Result;               // 0x0002(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_TryUnacquireTargetActor_Result;           // 0x0003(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(HARDWARE_TargetIdentifier_Base_C_UpdateHardwareState) == 0x000001, "Wrong alignment on HARDWARE_TargetIdentifier_Base_C_UpdateHardwareState");
static_assert(sizeof(HARDWARE_TargetIdentifier_Base_C_UpdateHardwareState) == 0x000004, "Wrong size on HARDWARE_TargetIdentifier_Base_C_UpdateHardwareState");
static_assert(offsetof(HARDWARE_TargetIdentifier_Base_C_UpdateHardwareState, IsEnabled) == 0x000000, "Member 'HARDWARE_TargetIdentifier_Base_C_UpdateHardwareState::IsEnabled' has a wrong offset!");
static_assert(offsetof(HARDWARE_TargetIdentifier_Base_C_UpdateHardwareState, Result) == 0x000001, "Member 'HARDWARE_TargetIdentifier_Base_C_UpdateHardwareState::Result' has a wrong offset!");
static_assert(offsetof(HARDWARE_TargetIdentifier_Base_C_UpdateHardwareState, CallFunc_UpdateHardwareState_Result) == 0x000002, "Member 'HARDWARE_TargetIdentifier_Base_C_UpdateHardwareState::CallFunc_UpdateHardwareState_Result' has a wrong offset!");
static_assert(offsetof(HARDWARE_TargetIdentifier_Base_C_UpdateHardwareState, CallFunc_TryUnacquireTargetActor_Result) == 0x000003, "Member 'HARDWARE_TargetIdentifier_Base_C_UpdateHardwareState::CallFunc_TryUnacquireTargetActor_Result' has a wrong offset!");

// Function HARDWARE_TargetIdentifier_Base.HARDWARE_TargetIdentifier_Base_C.EVENT_OnHackQueryFinished
// 0x0050 (0x0050 - 0x0000)
struct HARDWARE_TargetIdentifier_Base_C_EVENT_OnHackQueryFinished final
{
public:
	bool                                          bResult;                                           // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FVector4>                       WeightedWorldLocations;                            // 0x0008(0x0010)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
	uint8                                         Pad_18[0x8];                                       // 0x0018(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector4                               CallFunc_Array_Get_Item;                           // 0x0020(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class APAWN_Enemy_C*                          K2Node_DynamicCast_AsPAWN_Enemy;                   // 0x0030(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0038(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_39[0x3];                                       // 0x0039(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                CallFunc_Conv_Vector4ToVector_ReturnValue;         // 0x003C(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(HARDWARE_TargetIdentifier_Base_C_EVENT_OnHackQueryFinished) == 0x000010, "Wrong alignment on HARDWARE_TargetIdentifier_Base_C_EVENT_OnHackQueryFinished");
static_assert(sizeof(HARDWARE_TargetIdentifier_Base_C_EVENT_OnHackQueryFinished) == 0x000050, "Wrong size on HARDWARE_TargetIdentifier_Base_C_EVENT_OnHackQueryFinished");
static_assert(offsetof(HARDWARE_TargetIdentifier_Base_C_EVENT_OnHackQueryFinished, bResult) == 0x000000, "Member 'HARDWARE_TargetIdentifier_Base_C_EVENT_OnHackQueryFinished::bResult' has a wrong offset!");
static_assert(offsetof(HARDWARE_TargetIdentifier_Base_C_EVENT_OnHackQueryFinished, WeightedWorldLocations) == 0x000008, "Member 'HARDWARE_TargetIdentifier_Base_C_EVENT_OnHackQueryFinished::WeightedWorldLocations' has a wrong offset!");
static_assert(offsetof(HARDWARE_TargetIdentifier_Base_C_EVENT_OnHackQueryFinished, CallFunc_Array_Get_Item) == 0x000020, "Member 'HARDWARE_TargetIdentifier_Base_C_EVENT_OnHackQueryFinished::CallFunc_Array_Get_Item' has a wrong offset!");
static_assert(offsetof(HARDWARE_TargetIdentifier_Base_C_EVENT_OnHackQueryFinished, K2Node_DynamicCast_AsPAWN_Enemy) == 0x000030, "Member 'HARDWARE_TargetIdentifier_Base_C_EVENT_OnHackQueryFinished::K2Node_DynamicCast_AsPAWN_Enemy' has a wrong offset!");
static_assert(offsetof(HARDWARE_TargetIdentifier_Base_C_EVENT_OnHackQueryFinished, K2Node_DynamicCast_bSuccess) == 0x000038, "Member 'HARDWARE_TargetIdentifier_Base_C_EVENT_OnHackQueryFinished::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(HARDWARE_TargetIdentifier_Base_C_EVENT_OnHackQueryFinished, CallFunc_Conv_Vector4ToVector_ReturnValue) == 0x00003C, "Member 'HARDWARE_TargetIdentifier_Base_C_EVENT_OnHackQueryFinished::CallFunc_Conv_Vector4ToVector_ReturnValue' has a wrong offset!");

// Function HARDWARE_TargetIdentifier_Base.HARDWARE_TargetIdentifier_Base_C.GetHackModCategoryName
// 0x0008 (0x0008 - 0x0000)
struct HARDWARE_TargetIdentifier_Base_C_GetHackModCategoryName final
{
public:
	class FName                                   Result;                                            // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(HARDWARE_TargetIdentifier_Base_C_GetHackModCategoryName) == 0x000004, "Wrong alignment on HARDWARE_TargetIdentifier_Base_C_GetHackModCategoryName");
static_assert(sizeof(HARDWARE_TargetIdentifier_Base_C_GetHackModCategoryName) == 0x000008, "Wrong size on HARDWARE_TargetIdentifier_Base_C_GetHackModCategoryName");
static_assert(offsetof(HARDWARE_TargetIdentifier_Base_C_GetHackModCategoryName, Result) == 0x000000, "Member 'HARDWARE_TargetIdentifier_Base_C_GetHackModCategoryName::Result' has a wrong offset!");

// Function HARDWARE_TargetIdentifier_Base.HARDWARE_TargetIdentifier_Base_C.GetHardwareFeatures
// 0x0078 (0x0078 - 0x0000)
struct HARDWARE_TargetIdentifier_Base_C_GetHardwareFeatures final
{
public:
	TArray<struct FSTRUCT_HardwareFeature>        Result;                                            // 0x0000(0x0010)(Parm, OutParm)
	TArray<struct FSTRUCT_HardwareFeature>        HardwareFeatures;                                  // 0x0010(0x0010)(Edit, BlueprintVisible)
	struct FSTRUCT_HardwareFeature                K2Node_MakeStruct_STRUCT_HardwareFeature;          // 0x0020(0x0020)(HasGetValueTypeHash)
	int32                                         CallFunc_GetVersionNumber_Version;                 // 0x0040(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Greater_IntInt_ReturnValue;               // 0x0044(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_45[0x3];                                       // 0x0045(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Array_Add_ReturnValue;                    // 0x0048(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_4C[0x4];                                       // 0x004C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FSTRUCT_HardwareFeature                K2Node_MakeStruct_STRUCT_HardwareFeature_1;        // 0x0050(0x0020)(HasGetValueTypeHash)
	int32                                         CallFunc_Array_Add_ReturnValue_1;                  // 0x0070(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(HARDWARE_TargetIdentifier_Base_C_GetHardwareFeatures) == 0x000008, "Wrong alignment on HARDWARE_TargetIdentifier_Base_C_GetHardwareFeatures");
static_assert(sizeof(HARDWARE_TargetIdentifier_Base_C_GetHardwareFeatures) == 0x000078, "Wrong size on HARDWARE_TargetIdentifier_Base_C_GetHardwareFeatures");
static_assert(offsetof(HARDWARE_TargetIdentifier_Base_C_GetHardwareFeatures, Result) == 0x000000, "Member 'HARDWARE_TargetIdentifier_Base_C_GetHardwareFeatures::Result' has a wrong offset!");
static_assert(offsetof(HARDWARE_TargetIdentifier_Base_C_GetHardwareFeatures, HardwareFeatures) == 0x000010, "Member 'HARDWARE_TargetIdentifier_Base_C_GetHardwareFeatures::HardwareFeatures' has a wrong offset!");
static_assert(offsetof(HARDWARE_TargetIdentifier_Base_C_GetHardwareFeatures, K2Node_MakeStruct_STRUCT_HardwareFeature) == 0x000020, "Member 'HARDWARE_TargetIdentifier_Base_C_GetHardwareFeatures::K2Node_MakeStruct_STRUCT_HardwareFeature' has a wrong offset!");
static_assert(offsetof(HARDWARE_TargetIdentifier_Base_C_GetHardwareFeatures, CallFunc_GetVersionNumber_Version) == 0x000040, "Member 'HARDWARE_TargetIdentifier_Base_C_GetHardwareFeatures::CallFunc_GetVersionNumber_Version' has a wrong offset!");
static_assert(offsetof(HARDWARE_TargetIdentifier_Base_C_GetHardwareFeatures, CallFunc_Greater_IntInt_ReturnValue) == 0x000044, "Member 'HARDWARE_TargetIdentifier_Base_C_GetHardwareFeatures::CallFunc_Greater_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(HARDWARE_TargetIdentifier_Base_C_GetHardwareFeatures, CallFunc_Array_Add_ReturnValue) == 0x000048, "Member 'HARDWARE_TargetIdentifier_Base_C_GetHardwareFeatures::CallFunc_Array_Add_ReturnValue' has a wrong offset!");
static_assert(offsetof(HARDWARE_TargetIdentifier_Base_C_GetHardwareFeatures, K2Node_MakeStruct_STRUCT_HardwareFeature_1) == 0x000050, "Member 'HARDWARE_TargetIdentifier_Base_C_GetHardwareFeatures::K2Node_MakeStruct_STRUCT_HardwareFeature_1' has a wrong offset!");
static_assert(offsetof(HARDWARE_TargetIdentifier_Base_C_GetHardwareFeatures, CallFunc_Array_Add_ReturnValue_1) == 0x000070, "Member 'HARDWARE_TargetIdentifier_Base_C_GetHardwareFeatures::CallFunc_Array_Add_ReturnValue_1' has a wrong offset!");

// Function HARDWARE_TargetIdentifier_Base.HARDWARE_TargetIdentifier_Base_C.OnBeginPlay
// 0x0001 (0x0001 - 0x0000)
struct HARDWARE_TargetIdentifier_Base_C_OnBeginPlay final
{
public:
	bool                                          CallFunc_GetIsActivated_Result;                    // 0x0000(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(HARDWARE_TargetIdentifier_Base_C_OnBeginPlay) == 0x000001, "Wrong alignment on HARDWARE_TargetIdentifier_Base_C_OnBeginPlay");
static_assert(sizeof(HARDWARE_TargetIdentifier_Base_C_OnBeginPlay) == 0x000001, "Wrong size on HARDWARE_TargetIdentifier_Base_C_OnBeginPlay");
static_assert(offsetof(HARDWARE_TargetIdentifier_Base_C_OnBeginPlay, CallFunc_GetIsActivated_Result) == 0x000000, "Member 'HARDWARE_TargetIdentifier_Base_C_OnBeginPlay::CallFunc_GetIsActivated_Result' has a wrong offset!");

}

