#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: SKILL_HitScan

#include "Basic.hpp"

#include "Skill_classes.hpp"


namespace SDK
{

// BlueprintGeneratedClass SKILL_HitScan.SKILL_HitScan_C
// 0x0030 (0x00C0 - 0x0090)
class USKILL_HitScan_C : public USkill_C
{
public:
	float                                         SpreadRadiusMin;                                   // 0x0090(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         SpreadRadiusMax;                                   // 0x0094(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         MinAngleToTarget;                                  // 0x0098(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FName                                   BarrelSocketName;                                  // 0x009C(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_A4[0x4];                                       // 0x00A4(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UFXSystemAsset*                         HitScanFX;                                         // 0x00A8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         TraceRadius;                                       // 0x00B0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         ArmorPenetration;                                  // 0x00B4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UDataTable*                             ImpactTable;                                       // 0x00B8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

public:
	void TryUseSkill(class UCharacterAction_C** Result);
	void PerformDamageLineTrace();
	void CreateBeamEffects(const struct FVector& SourceLocation, const struct FVector& TargetLocation);
	void OnActivateSkill(bool* Result);
	void CanUseSkill(bool* Result);
	void GetBarrelLocation(struct FVector* StartLocation);

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"SKILL_HitScan_C">();
	}
	static class USKILL_HitScan_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<USKILL_HitScan_C>();
	}
};
static_assert(alignof(USKILL_HitScan_C) == 0x000008, "Wrong alignment on USKILL_HitScan_C");
static_assert(sizeof(USKILL_HitScan_C) == 0x0000C0, "Wrong size on USKILL_HitScan_C");
static_assert(offsetof(USKILL_HitScan_C, SpreadRadiusMin) == 0x000090, "Member 'USKILL_HitScan_C::SpreadRadiusMin' has a wrong offset!");
static_assert(offsetof(USKILL_HitScan_C, SpreadRadiusMax) == 0x000094, "Member 'USKILL_HitScan_C::SpreadRadiusMax' has a wrong offset!");
static_assert(offsetof(USKILL_HitScan_C, MinAngleToTarget) == 0x000098, "Member 'USKILL_HitScan_C::MinAngleToTarget' has a wrong offset!");
static_assert(offsetof(USKILL_HitScan_C, BarrelSocketName) == 0x00009C, "Member 'USKILL_HitScan_C::BarrelSocketName' has a wrong offset!");
static_assert(offsetof(USKILL_HitScan_C, HitScanFX) == 0x0000A8, "Member 'USKILL_HitScan_C::HitScanFX' has a wrong offset!");
static_assert(offsetof(USKILL_HitScan_C, TraceRadius) == 0x0000B0, "Member 'USKILL_HitScan_C::TraceRadius' has a wrong offset!");
static_assert(offsetof(USKILL_HitScan_C, ArmorPenetration) == 0x0000B4, "Member 'USKILL_HitScan_C::ArmorPenetration' has a wrong offset!");
static_assert(offsetof(USKILL_HitScan_C, ImpactTable) == 0x0000B8, "Member 'USKILL_HitScan_C::ImpactTable' has a wrong offset!");

}

