#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: PAWN_Avatar

#include "Basic.hpp"

#include "AttributeSystem_structs.hpp"
#include "CoreUObject_structs.hpp"
#include "STRUCT_CameraEffectInstance_structs.hpp"
#include "STRUCT_ScannableRegionData_structs.hpp"
#include "UMG_structs.hpp"
#include "ENUM_GameDifficulty_structs.hpp"
#include "ENUM_PrimarySecondary_structs.hpp"
#include "Engine_structs.hpp"
#include "InputCore_structs.hpp"


namespace SDK::Params
{

// Function PAWN_Avatar.PAWN_Avatar_C.ExecuteUbergraph_PAWN_Avatar
// 0x0D28 (0x0D28 - 0x0000)
struct PAWN_Avatar_C_ExecuteUbergraph_PAWN_Avatar final
{
public:
	int32                                         EntryPoint;                                        // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FKey                                   Temp_struct_Variable;                              // 0x0008(0x0018)(HasGetValueTypeHash)
	struct FKey                                   K2Node_InputActionEvent_Key_61;                    // 0x0020(0x0018)(HasGetValueTypeHash)
	struct FKey                                   K2Node_InputActionEvent_Key_60;                    // 0x0038(0x0018)(HasGetValueTypeHash)
	struct FKey                                   Temp_struct_Variable_1;                            // 0x0050(0x0018)(HasGetValueTypeHash)
	struct FKey                                   K2Node_InputActionEvent_Key_59;                    // 0x0068(0x0018)(HasGetValueTypeHash)
	struct FKey                                   K2Node_InputActionEvent_Key_58;                    // 0x0080(0x0018)(HasGetValueTypeHash)
	struct FKey                                   Temp_struct_Variable_2;                            // 0x0098(0x0018)(HasGetValueTypeHash)
	struct FKey                                   K2Node_InputActionEvent_Key_57;                    // 0x00B0(0x0018)(HasGetValueTypeHash)
	struct FKey                                   K2Node_InputActionEvent_Key_56;                    // 0x00C8(0x0018)(HasGetValueTypeHash)
	struct FKey                                   Temp_struct_Variable_3;                            // 0x00E0(0x0018)(HasGetValueTypeHash)
	struct FKey                                   K2Node_InputActionEvent_Key_55;                    // 0x00F8(0x0018)(HasGetValueTypeHash)
	struct FKey                                   K2Node_InputActionEvent_Key_54;                    // 0x0110(0x0018)(HasGetValueTypeHash)
	struct FKey                                   Temp_struct_Variable_4;                            // 0x0128(0x0018)(HasGetValueTypeHash)
	struct FKey                                   K2Node_InputActionEvent_Key_53;                    // 0x0140(0x0018)(HasGetValueTypeHash)
	struct FKey                                   K2Node_InputActionEvent_Key_52;                    // 0x0158(0x0018)(HasGetValueTypeHash)
	struct FKey                                   K2Node_InputActionEvent_Key_51;                    // 0x0170(0x0018)(HasGetValueTypeHash)
	struct FKey                                   K2Node_InputActionEvent_Key_50;                    // 0x0188(0x0018)(HasGetValueTypeHash)
	struct FKey                                   Temp_struct_Variable_5;                            // 0x01A0(0x0018)(HasGetValueTypeHash)
	struct FKey                                   K2Node_InputActionEvent_Key_49;                    // 0x01B8(0x0018)(HasGetValueTypeHash)
	struct FKey                                   K2Node_InputActionEvent_Key_48;                    // 0x01D0(0x0018)(HasGetValueTypeHash)
	struct FKey                                   Temp_struct_Variable_6;                            // 0x01E8(0x0018)(HasGetValueTypeHash)
	struct FKey                                   K2Node_InputActionEvent_Key_47;                    // 0x0200(0x0018)(HasGetValueTypeHash)
	struct FKey                                   K2Node_InputActionEvent_Key_46;                    // 0x0218(0x0018)(HasGetValueTypeHash)
	struct FKey                                   Temp_struct_Variable_7;                            // 0x0230(0x0018)(HasGetValueTypeHash)
	struct FKey                                   K2Node_InputActionEvent_Key_45;                    // 0x0248(0x0018)(HasGetValueTypeHash)
	struct FKey                                   K2Node_InputActionEvent_Key_44;                    // 0x0260(0x0018)(HasGetValueTypeHash)
	struct FKey                                   Temp_struct_Variable_8;                            // 0x0278(0x0018)(HasGetValueTypeHash)
	struct FKey                                   K2Node_InputActionEvent_Key_43;                    // 0x0290(0x0018)(HasGetValueTypeHash)
	struct FKey                                   K2Node_InputActionEvent_Key_42;                    // 0x02A8(0x0018)(HasGetValueTypeHash)
	struct FKey                                   Temp_struct_Variable_9;                            // 0x02C0(0x0018)(HasGetValueTypeHash)
	struct FKey                                   K2Node_InputActionEvent_Key_41;                    // 0x02D8(0x0018)(HasGetValueTypeHash)
	struct FKey                                   K2Node_InputActionEvent_Key_40;                    // 0x02F0(0x0018)(HasGetValueTypeHash)
	struct FKey                                   Temp_struct_Variable_10;                           // 0x0308(0x0018)(HasGetValueTypeHash)
	struct FKey                                   K2Node_InputActionEvent_Key_39;                    // 0x0320(0x0018)(HasGetValueTypeHash)
	struct FKey                                   K2Node_InputActionEvent_Key_38;                    // 0x0338(0x0018)(HasGetValueTypeHash)
	struct FKey                                   Temp_struct_Variable_11;                           // 0x0350(0x0018)(HasGetValueTypeHash)
	struct FKey                                   K2Node_InputActionEvent_Key_37;                    // 0x0368(0x0018)(HasGetValueTypeHash)
	struct FKey                                   K2Node_InputActionEvent_Key_36;                    // 0x0380(0x0018)(HasGetValueTypeHash)
	struct FKey                                   Temp_struct_Variable_12;                           // 0x0398(0x0018)(HasGetValueTypeHash)
	struct FKey                                   K2Node_InputActionEvent_Key_35;                    // 0x03B0(0x0018)(HasGetValueTypeHash)
	struct FKey                                   K2Node_InputActionEvent_Key_34;                    // 0x03C8(0x0018)(HasGetValueTypeHash)
	struct FKey                                   Temp_struct_Variable_13;                           // 0x03E0(0x0018)(HasGetValueTypeHash)
	struct FKey                                   K2Node_InputActionEvent_Key_33;                    // 0x03F8(0x0018)(HasGetValueTypeHash)
	struct FKey                                   K2Node_InputActionEvent_Key_32;                    // 0x0410(0x0018)(HasGetValueTypeHash)
	struct FKey                                   Temp_struct_Variable_14;                           // 0x0428(0x0018)(HasGetValueTypeHash)
	struct FKey                                   K2Node_InputActionEvent_Key_31;                    // 0x0440(0x0018)(HasGetValueTypeHash)
	struct FKey                                   K2Node_InputActionEvent_Key_30;                    // 0x0458(0x0018)(HasGetValueTypeHash)
	struct FKey                                   Temp_struct_Variable_15;                           // 0x0470(0x0018)(HasGetValueTypeHash)
	struct FKey                                   K2Node_InputActionEvent_Key_29;                    // 0x0488(0x0018)(HasGetValueTypeHash)
	struct FKey                                   K2Node_InputActionEvent_Key_28;                    // 0x04A0(0x0018)(HasGetValueTypeHash)
	struct FKey                                   Temp_struct_Variable_16;                           // 0x04B8(0x0018)(HasGetValueTypeHash)
	struct FKey                                   K2Node_InputActionEvent_Key_27;                    // 0x04D0(0x0018)(HasGetValueTypeHash)
	struct FKey                                   K2Node_InputActionEvent_Key_26;                    // 0x04E8(0x0018)(HasGetValueTypeHash)
	struct FKey                                   Temp_struct_Variable_17;                           // 0x0500(0x0018)(HasGetValueTypeHash)
	struct FKey                                   K2Node_InputActionEvent_Key_25;                    // 0x0518(0x0018)(HasGetValueTypeHash)
	struct FKey                                   K2Node_InputActionEvent_Key_24;                    // 0x0530(0x0018)(HasGetValueTypeHash)
	struct FKey                                   Temp_struct_Variable_18;                           // 0x0548(0x0018)(HasGetValueTypeHash)
	struct FKey                                   K2Node_InputActionEvent_Key_23;                    // 0x0560(0x0018)(HasGetValueTypeHash)
	struct FKey                                   K2Node_InputActionEvent_Key_22;                    // 0x0578(0x0018)(HasGetValueTypeHash)
	struct FKey                                   Temp_struct_Variable_19;                           // 0x0590(0x0018)(HasGetValueTypeHash)
	struct FKey                                   K2Node_InputActionEvent_Key_21;                    // 0x05A8(0x0018)(HasGetValueTypeHash)
	struct FKey                                   K2Node_InputActionEvent_Key_20;                    // 0x05C0(0x0018)(HasGetValueTypeHash)
	struct FKey                                   Temp_struct_Variable_20;                           // 0x05D8(0x0018)(HasGetValueTypeHash)
	struct FKey                                   K2Node_InputActionEvent_Key_19;                    // 0x05F0(0x0018)(HasGetValueTypeHash)
	struct FKey                                   K2Node_InputActionEvent_Key_18;                    // 0x0608(0x0018)(HasGetValueTypeHash)
	struct FKey                                   Temp_struct_Variable_21;                           // 0x0620(0x0018)(HasGetValueTypeHash)
	struct FKey                                   K2Node_InputActionEvent_Key_17;                    // 0x0638(0x0018)(HasGetValueTypeHash)
	struct FKey                                   K2Node_InputActionEvent_Key_16;                    // 0x0650(0x0018)(HasGetValueTypeHash)
	struct FKey                                   Temp_struct_Variable_22;                           // 0x0668(0x0018)(HasGetValueTypeHash)
	struct FKey                                   K2Node_InputKeyEvent_Key;                          // 0x0680(0x0018)(HasGetValueTypeHash)
	struct FKey                                   K2Node_InputActionEvent_Key_15;                    // 0x0698(0x0018)(HasGetValueTypeHash)
	struct FKey                                   K2Node_InputActionEvent_Key_14;                    // 0x06B0(0x0018)(HasGetValueTypeHash)
	struct FKey                                   Temp_struct_Variable_23;                           // 0x06C8(0x0018)(HasGetValueTypeHash)
	struct FKey                                   K2Node_InputActionEvent_Key_13;                    // 0x06E0(0x0018)(HasGetValueTypeHash)
	struct FKey                                   K2Node_InputActionEvent_Key_12;                    // 0x06F8(0x0018)(HasGetValueTypeHash)
	struct FKey                                   Temp_struct_Variable_24;                           // 0x0710(0x0018)(HasGetValueTypeHash)
	struct FKey                                   K2Node_InputActionEvent_Key_11;                    // 0x0728(0x0018)(HasGetValueTypeHash)
	struct FKey                                   K2Node_InputActionEvent_Key_10;                    // 0x0740(0x0018)(HasGetValueTypeHash)
	struct FKey                                   Temp_struct_Variable_25;                           // 0x0758(0x0018)(HasGetValueTypeHash)
	struct FKey                                   K2Node_InputActionEvent_Key_9;                     // 0x0770(0x0018)(HasGetValueTypeHash)
	struct FKey                                   K2Node_InputActionEvent_Key_8;                     // 0x0788(0x0018)(HasGetValueTypeHash)
	struct FKey                                   Temp_struct_Variable_26;                           // 0x07A0(0x0018)(HasGetValueTypeHash)
	struct FKey                                   K2Node_InputActionEvent_Key_7;                     // 0x07B8(0x0018)(HasGetValueTypeHash)
	struct FKey                                   K2Node_InputActionEvent_Key_6;                     // 0x07D0(0x0018)(HasGetValueTypeHash)
	struct FKey                                   Temp_struct_Variable_27;                           // 0x07E8(0x0018)(HasGetValueTypeHash)
	struct FKey                                   K2Node_InputActionEvent_Key_5;                     // 0x0800(0x0018)(HasGetValueTypeHash)
	struct FKey                                   K2Node_InputActionEvent_Key_4;                     // 0x0818(0x0018)(HasGetValueTypeHash)
	struct FKey                                   Temp_struct_Variable_28;                           // 0x0830(0x0018)(HasGetValueTypeHash)
	struct FKey                                   K2Node_InputActionEvent_Key_3;                     // 0x0848(0x0018)(HasGetValueTypeHash)
	struct FKey                                   K2Node_InputActionEvent_Key_2;                     // 0x0860(0x0018)(HasGetValueTypeHash)
	struct FKey                                   Temp_struct_Variable_29;                           // 0x0878(0x0018)(HasGetValueTypeHash)
	struct FKey                                   K2Node_InputActionEvent_Key_1;                     // 0x0890(0x0018)(HasGetValueTypeHash)
	struct FKey                                   K2Node_InputActionEvent_Key;                       // 0x08A8(0x0018)(HasGetValueTypeHash)
	struct FKey                                   Temp_struct_Variable_30;                           // 0x08C0(0x0018)(HasGetValueTypeHash)
	class UMaterialInstanceDynamic*               CallFunc_CreateDynamicMaterialInstance_ReturnValue; // 0x08D8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UPrimitiveComponent*                    K2Node_ComponentBoundEvent_HitComponent;           // 0x08E0(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 K2Node_ComponentBoundEvent_OtherActor;             // 0x08E8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UPrimitiveComponent*                    K2Node_ComponentBoundEvent_OtherComp;              // 0x08F0(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                K2Node_ComponentBoundEvent_NormalImpulse;          // 0x08F8(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FHitResult                             K2Node_ComponentBoundEvent_Hit;                    // 0x0904(0x0088)(ConstParm, IsPlainOldData, NoDestructor, ContainsInstancedReference)
	uint8                                         Pad_98C[0x4];                                      // 0x098C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TScriptInterface<class IBlendableInterface>   CallFunc_AddOrUpdateBlendable_InBlendableObject_CastInput; // 0x0990(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper)
	bool                                          CallFunc_ShouldBounce_Result;                      // 0x09A0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_9A1[0x7];                                      // 0x09A1(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FKey                                   K2Node_InputActionEvent_Key_62;                    // 0x09A8(0x0018)(HasGetValueTypeHash)
	struct FKey                                   K2Node_InputActionEvent_Key_65;                    // 0x09C0(0x0018)(HasGetValueTypeHash)
	float                                         CallFunc_GetGlobalTimeDilation_ReturnValue;        // 0x09D8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_FloatFloat_ReturnValue;        // 0x09DC(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_9DD[0x3];                                      // 0x09DD(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_SelectFloat_ReturnValue;                  // 0x09E0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_ComponentBoundEvent_bVisibleState;          // 0x09E4(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsPackagedForDistribution_ReturnValue;    // 0x09E5(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Not_PreBool_ReturnValue;                  // 0x09E6(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_9E7[0x1];                                      // 0x09E7(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	struct FKey                                   Temp_struct_Variable_31;                           // 0x09E8(0x0018)(HasGetValueTypeHash)
	struct FKey                                   K2Node_InputActionEvent_Key_66;                    // 0x0A00(0x0018)(HasGetValueTypeHash)
	struct FKey                                   K2Node_InputActionEvent_Key_67;                    // 0x0A18(0x0018)(HasGetValueTypeHash)
	struct FKey                                   Temp_struct_Variable_32;                           // 0x0A30(0x0018)(HasGetValueTypeHash)
	float                                         K2Node_InputAxisEvent_AxisValue_7;                 // 0x0A48(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         K2Node_InputAxisEvent_AxisValue_6;                 // 0x0A4C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FKey                                   K2Node_InputActionEvent_Key_68;                    // 0x0A50(0x0018)(HasGetValueTypeHash)
	float                                         K2Node_InputAxisEvent_AxisValue_5;                 // 0x0A68(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         K2Node_InputAxisEvent_AxisValue_4;                 // 0x0A6C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FKey                                   K2Node_InputActionEvent_Key_69;                    // 0x0A70(0x0018)(HasGetValueTypeHash)
	float                                         K2Node_InputAxisEvent_AxisValue_3;                 // 0x0A88(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         K2Node_InputAxisEvent_AxisValue_2;                 // 0x0A8C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FKey                                   Temp_struct_Variable_33;                           // 0x0A90(0x0018)(HasGetValueTypeHash)
	struct FKey                                   K2Node_InputActionEvent_Key_70;                    // 0x0AA8(0x0018)(HasGetValueTypeHash)
	struct FKey                                   K2Node_InputActionEvent_Key_71;                    // 0x0AC0(0x0018)(HasGetValueTypeHash)
	struct FKey                                   Temp_struct_Variable_34;                           // 0x0AD8(0x0018)(HasGetValueTypeHash)
	struct FKey                                   K2Node_InputActionEvent_Key_72;                    // 0x0AF0(0x0018)(HasGetValueTypeHash)
	struct FKey                                   K2Node_InputActionEvent_Key_73;                    // 0x0B08(0x0018)(HasGetValueTypeHash)
	struct FKey                                   Temp_struct_Variable_35;                           // 0x0B20(0x0018)(HasGetValueTypeHash)
	float                                         K2Node_InputAxisEvent_AxisValue_1;                 // 0x0B38(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         K2Node_InputAxisEvent_AxisValue;                   // 0x0B3C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_FloatFloat_ReturnValue;              // 0x0B40(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Less_FloatFloat_ReturnValue_1;            // 0x0B41(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Greater_FloatFloat_ReturnValue;           // 0x0B42(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Greater_FloatFloat_ReturnValue_1;         // 0x0B43(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_B44[0x4];                                      // 0x0B44(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FKey                                   K2Node_InputActionEvent_Key_74;                    // 0x0B48(0x0018)(HasGetValueTypeHash)
	struct FKey                                   K2Node_InputActionEvent_Key_75;                    // 0x0B60(0x0018)(HasGetValueTypeHash)
	struct FKey                                   Temp_struct_Variable_36;                           // 0x0B78(0x0018)(HasGetValueTypeHash)
	struct FKey                                   K2Node_InputActionEvent_Key_76;                    // 0x0B90(0x0018)(HasGetValueTypeHash)
	struct FKey                                   K2Node_InputActionEvent_Key_77;                    // 0x0BA8(0x0018)(HasGetValueTypeHash)
	struct FKey                                   Temp_struct_Variable_37;                           // 0x0BC0(0x0018)(HasGetValueTypeHash)
	struct FKey                                   K2Node_InputActionEvent_Key_78;                    // 0x0BD8(0x0018)(HasGetValueTypeHash)
	struct FKey                                   K2Node_InputActionEvent_Key_79;                    // 0x0BF0(0x0018)(HasGetValueTypeHash)
	struct FKey                                   Temp_struct_Variable_38;                           // 0x0C08(0x0018)(HasGetValueTypeHash)
	struct FKey                                   K2Node_InputActionEvent_Key_80;                    // 0x0C20(0x0018)(HasGetValueTypeHash)
	bool                                          CallFunc_IsPackagedForDistribution_ReturnValue_1;  // 0x0C38(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Not_PreBool_ReturnValue_1;                // 0x0C39(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_C3A[0x6];                                      // 0x0C3A(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	struct FKey                                   K2Node_InputActionEvent_Key_81;                    // 0x0C40(0x0018)(HasGetValueTypeHash)
	struct FKey                                   K2Node_InputKeyEvent_Key_1;                        // 0x0C58(0x0018)(HasGetValueTypeHash)
	TScriptInterface<class IBlendableInterface>   CallFunc_AddOrUpdateBlendable_InBlendableObject_CastInput_1; // 0x0C70(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper)
	float                                         K2Node_Event_DeltaSeconds;                         // 0x0C80(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_C84[0x4];                                      // 0x0C84(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FKey                                   K2Node_InputActionEvent_Key_63;                    // 0x0C88(0x0018)(HasGetValueTypeHash)
	class AController*                            K2Node_Event_NewController;                        // 0x0CA0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AController*                            K2Node_Event_OldController;                        // 0x0CA8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UGameInstance*                          CallFunc_GetGameInstance_ReturnValue;              // 0x0CB0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UGI_SinglePlayer_C*                     K2Node_DynamicCast_AsGI_Single_Player;             // 0x0CB8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0CC0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_CC1[0x7];                                      // 0x0CC1(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FKey                                   Temp_struct_Variable_39;                           // 0x0CC8(0x0018)(HasGetValueTypeHash)
	class UBP_MusicCue_C*                         CallFunc_SetMusicState_MusicCue;                   // 0x0CE0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UGameInstance*                          CallFunc_GetGameInstance_ReturnValue_1;            // 0x0CE8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UGI_SinglePlayer_C*                     K2Node_DynamicCast_AsGI_Single_Player_1;           // 0x0CF0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess_1;                     // 0x0CF8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_CF9[0x7];                                      // 0x0CF9(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FKey                                   K2Node_InputActionEvent_Key_64;                    // 0x0D00(0x0018)(HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0D18(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsValid_ReturnValue_1;                    // 0x0D19(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsValid_ReturnValue_2;                    // 0x0D1A(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_StartTrackingLocation_ReturnValue;        // 0x0D1B(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_StopTrackingLocation_ReturnValue;         // 0x0D1C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_D1D[0x3];                                      // 0x0D1D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class USAVE_Settings_C*                       CallFunc_GetShockSettingsForCurrentUser_Settings;  // 0x0D20(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(PAWN_Avatar_C_ExecuteUbergraph_PAWN_Avatar) == 0x000008, "Wrong alignment on PAWN_Avatar_C_ExecuteUbergraph_PAWN_Avatar");
static_assert(sizeof(PAWN_Avatar_C_ExecuteUbergraph_PAWN_Avatar) == 0x000D28, "Wrong size on PAWN_Avatar_C_ExecuteUbergraph_PAWN_Avatar");
static_assert(offsetof(PAWN_Avatar_C_ExecuteUbergraph_PAWN_Avatar, EntryPoint) == 0x000000, "Member 'PAWN_Avatar_C_ExecuteUbergraph_PAWN_Avatar::EntryPoint' has a wrong offset!");
static_assert(offsetof(PAWN_Avatar_C_ExecuteUbergraph_PAWN_Avatar, Temp_struct_Variable) == 0x000008, "Member 'PAWN_Avatar_C_ExecuteUbergraph_PAWN_Avatar::Temp_struct_Variable' has a wrong offset!");
static_assert(offsetof(PAWN_Avatar_C_ExecuteUbergraph_PAWN_Avatar, K2Node_InputActionEvent_Key_61) == 0x000020, "Member 'PAWN_Avatar_C_ExecuteUbergraph_PAWN_Avatar::K2Node_InputActionEvent_Key_61' has a wrong offset!");
static_assert(offsetof(PAWN_Avatar_C_ExecuteUbergraph_PAWN_Avatar, K2Node_InputActionEvent_Key_60) == 0x000038, "Member 'PAWN_Avatar_C_ExecuteUbergraph_PAWN_Avatar::K2Node_InputActionEvent_Key_60' has a wrong offset!");
static_assert(offsetof(PAWN_Avatar_C_ExecuteUbergraph_PAWN_Avatar, Temp_struct_Variable_1) == 0x000050, "Member 'PAWN_Avatar_C_ExecuteUbergraph_PAWN_Avatar::Temp_struct_Variable_1' has a wrong offset!");
static_assert(offsetof(PAWN_Avatar_C_ExecuteUbergraph_PAWN_Avatar, K2Node_InputActionEvent_Key_59) == 0x000068, "Member 'PAWN_Avatar_C_ExecuteUbergraph_PAWN_Avatar::K2Node_InputActionEvent_Key_59' has a wrong offset!");
static_assert(offsetof(PAWN_Avatar_C_ExecuteUbergraph_PAWN_Avatar, K2Node_InputActionEvent_Key_58) == 0x000080, "Member 'PAWN_Avatar_C_ExecuteUbergraph_PAWN_Avatar::K2Node_InputActionEvent_Key_58' has a wrong offset!");
static_assert(offsetof(PAWN_Avatar_C_ExecuteUbergraph_PAWN_Avatar, Temp_struct_Variable_2) == 0x000098, "Member 'PAWN_Avatar_C_ExecuteUbergraph_PAWN_Avatar::Temp_struct_Variable_2' has a wrong offset!");
static_assert(offsetof(PAWN_Avatar_C_ExecuteUbergraph_PAWN_Avatar, K2Node_InputActionEvent_Key_57) == 0x0000B0, "Member 'PAWN_Avatar_C_ExecuteUbergraph_PAWN_Avatar::K2Node_InputActionEvent_Key_57' has a wrong offset!");
static_assert(offsetof(PAWN_Avatar_C_ExecuteUbergraph_PAWN_Avatar, K2Node_InputActionEvent_Key_56) == 0x0000C8, "Member 'PAWN_Avatar_C_ExecuteUbergraph_PAWN_Avatar::K2Node_InputActionEvent_Key_56' has a wrong offset!");
static_assert(offsetof(PAWN_Avatar_C_ExecuteUbergraph_PAWN_Avatar, Temp_struct_Variable_3) == 0x0000E0, "Member 'PAWN_Avatar_C_ExecuteUbergraph_PAWN_Avatar::Temp_struct_Variable_3' has a wrong offset!");
static_assert(offsetof(PAWN_Avatar_C_ExecuteUbergraph_PAWN_Avatar, K2Node_InputActionEvent_Key_55) == 0x0000F8, "Member 'PAWN_Avatar_C_ExecuteUbergraph_PAWN_Avatar::K2Node_InputActionEvent_Key_55' has a wrong offset!");
static_assert(offsetof(PAWN_Avatar_C_ExecuteUbergraph_PAWN_Avatar, K2Node_InputActionEvent_Key_54) == 0x000110, "Member 'PAWN_Avatar_C_ExecuteUbergraph_PAWN_Avatar::K2Node_InputActionEvent_Key_54' has a wrong offset!");
static_assert(offsetof(PAWN_Avatar_C_ExecuteUbergraph_PAWN_Avatar, Temp_struct_Variable_4) == 0x000128, "Member 'PAWN_Avatar_C_ExecuteUbergraph_PAWN_Avatar::Temp_struct_Variable_4' has a wrong offset!");
static_assert(offsetof(PAWN_Avatar_C_ExecuteUbergraph_PAWN_Avatar, K2Node_InputActionEvent_Key_53) == 0x000140, "Member 'PAWN_Avatar_C_ExecuteUbergraph_PAWN_Avatar::K2Node_InputActionEvent_Key_53' has a wrong offset!");
static_assert(offsetof(PAWN_Avatar_C_ExecuteUbergraph_PAWN_Avatar, K2Node_InputActionEvent_Key_52) == 0x000158, "Member 'PAWN_Avatar_C_ExecuteUbergraph_PAWN_Avatar::K2Node_InputActionEvent_Key_52' has a wrong offset!");
static_assert(offsetof(PAWN_Avatar_C_ExecuteUbergraph_PAWN_Avatar, K2Node_InputActionEvent_Key_51) == 0x000170, "Member 'PAWN_Avatar_C_ExecuteUbergraph_PAWN_Avatar::K2Node_InputActionEvent_Key_51' has a wrong offset!");
static_assert(offsetof(PAWN_Avatar_C_ExecuteUbergraph_PAWN_Avatar, K2Node_InputActionEvent_Key_50) == 0x000188, "Member 'PAWN_Avatar_C_ExecuteUbergraph_PAWN_Avatar::K2Node_InputActionEvent_Key_50' has a wrong offset!");
static_assert(offsetof(PAWN_Avatar_C_ExecuteUbergraph_PAWN_Avatar, Temp_struct_Variable_5) == 0x0001A0, "Member 'PAWN_Avatar_C_ExecuteUbergraph_PAWN_Avatar::Temp_struct_Variable_5' has a wrong offset!");
static_assert(offsetof(PAWN_Avatar_C_ExecuteUbergraph_PAWN_Avatar, K2Node_InputActionEvent_Key_49) == 0x0001B8, "Member 'PAWN_Avatar_C_ExecuteUbergraph_PAWN_Avatar::K2Node_InputActionEvent_Key_49' has a wrong offset!");
static_assert(offsetof(PAWN_Avatar_C_ExecuteUbergraph_PAWN_Avatar, K2Node_InputActionEvent_Key_48) == 0x0001D0, "Member 'PAWN_Avatar_C_ExecuteUbergraph_PAWN_Avatar::K2Node_InputActionEvent_Key_48' has a wrong offset!");
static_assert(offsetof(PAWN_Avatar_C_ExecuteUbergraph_PAWN_Avatar, Temp_struct_Variable_6) == 0x0001E8, "Member 'PAWN_Avatar_C_ExecuteUbergraph_PAWN_Avatar::Temp_struct_Variable_6' has a wrong offset!");
static_assert(offsetof(PAWN_Avatar_C_ExecuteUbergraph_PAWN_Avatar, K2Node_InputActionEvent_Key_47) == 0x000200, "Member 'PAWN_Avatar_C_ExecuteUbergraph_PAWN_Avatar::K2Node_InputActionEvent_Key_47' has a wrong offset!");
static_assert(offsetof(PAWN_Avatar_C_ExecuteUbergraph_PAWN_Avatar, K2Node_InputActionEvent_Key_46) == 0x000218, "Member 'PAWN_Avatar_C_ExecuteUbergraph_PAWN_Avatar::K2Node_InputActionEvent_Key_46' has a wrong offset!");
static_assert(offsetof(PAWN_Avatar_C_ExecuteUbergraph_PAWN_Avatar, Temp_struct_Variable_7) == 0x000230, "Member 'PAWN_Avatar_C_ExecuteUbergraph_PAWN_Avatar::Temp_struct_Variable_7' has a wrong offset!");
static_assert(offsetof(PAWN_Avatar_C_ExecuteUbergraph_PAWN_Avatar, K2Node_InputActionEvent_Key_45) == 0x000248, "Member 'PAWN_Avatar_C_ExecuteUbergraph_PAWN_Avatar::K2Node_InputActionEvent_Key_45' has a wrong offset!");
static_assert(offsetof(PAWN_Avatar_C_ExecuteUbergraph_PAWN_Avatar, K2Node_InputActionEvent_Key_44) == 0x000260, "Member 'PAWN_Avatar_C_ExecuteUbergraph_PAWN_Avatar::K2Node_InputActionEvent_Key_44' has a wrong offset!");
static_assert(offsetof(PAWN_Avatar_C_ExecuteUbergraph_PAWN_Avatar, Temp_struct_Variable_8) == 0x000278, "Member 'PAWN_Avatar_C_ExecuteUbergraph_PAWN_Avatar::Temp_struct_Variable_8' has a wrong offset!");
static_assert(offsetof(PAWN_Avatar_C_ExecuteUbergraph_PAWN_Avatar, K2Node_InputActionEvent_Key_43) == 0x000290, "Member 'PAWN_Avatar_C_ExecuteUbergraph_PAWN_Avatar::K2Node_InputActionEvent_Key_43' has a wrong offset!");
static_assert(offsetof(PAWN_Avatar_C_ExecuteUbergraph_PAWN_Avatar, K2Node_InputActionEvent_Key_42) == 0x0002A8, "Member 'PAWN_Avatar_C_ExecuteUbergraph_PAWN_Avatar::K2Node_InputActionEvent_Key_42' has a wrong offset!");
static_assert(offsetof(PAWN_Avatar_C_ExecuteUbergraph_PAWN_Avatar, Temp_struct_Variable_9) == 0x0002C0, "Member 'PAWN_Avatar_C_ExecuteUbergraph_PAWN_Avatar::Temp_struct_Variable_9' has a wrong offset!");
static_assert(offsetof(PAWN_Avatar_C_ExecuteUbergraph_PAWN_Avatar, K2Node_InputActionEvent_Key_41) == 0x0002D8, "Member 'PAWN_Avatar_C_ExecuteUbergraph_PAWN_Avatar::K2Node_InputActionEvent_Key_41' has a wrong offset!");
static_assert(offsetof(PAWN_Avatar_C_ExecuteUbergraph_PAWN_Avatar, K2Node_InputActionEvent_Key_40) == 0x0002F0, "Member 'PAWN_Avatar_C_ExecuteUbergraph_PAWN_Avatar::K2Node_InputActionEvent_Key_40' has a wrong offset!");
static_assert(offsetof(PAWN_Avatar_C_ExecuteUbergraph_PAWN_Avatar, Temp_struct_Variable_10) == 0x000308, "Member 'PAWN_Avatar_C_ExecuteUbergraph_PAWN_Avatar::Temp_struct_Variable_10' has a wrong offset!");
static_assert(offsetof(PAWN_Avatar_C_ExecuteUbergraph_PAWN_Avatar, K2Node_InputActionEvent_Key_39) == 0x000320, "Member 'PAWN_Avatar_C_ExecuteUbergraph_PAWN_Avatar::K2Node_InputActionEvent_Key_39' has a wrong offset!");
static_assert(offsetof(PAWN_Avatar_C_ExecuteUbergraph_PAWN_Avatar, K2Node_InputActionEvent_Key_38) == 0x000338, "Member 'PAWN_Avatar_C_ExecuteUbergraph_PAWN_Avatar::K2Node_InputActionEvent_Key_38' has a wrong offset!");
static_assert(offsetof(PAWN_Avatar_C_ExecuteUbergraph_PAWN_Avatar, Temp_struct_Variable_11) == 0x000350, "Member 'PAWN_Avatar_C_ExecuteUbergraph_PAWN_Avatar::Temp_struct_Variable_11' has a wrong offset!");
static_assert(offsetof(PAWN_Avatar_C_ExecuteUbergraph_PAWN_Avatar, K2Node_InputActionEvent_Key_37) == 0x000368, "Member 'PAWN_Avatar_C_ExecuteUbergraph_PAWN_Avatar::K2Node_InputActionEvent_Key_37' has a wrong offset!");
static_assert(offsetof(PAWN_Avatar_C_ExecuteUbergraph_PAWN_Avatar, K2Node_InputActionEvent_Key_36) == 0x000380, "Member 'PAWN_Avatar_C_ExecuteUbergraph_PAWN_Avatar::K2Node_InputActionEvent_Key_36' has a wrong offset!");
static_assert(offsetof(PAWN_Avatar_C_ExecuteUbergraph_PAWN_Avatar, Temp_struct_Variable_12) == 0x000398, "Member 'PAWN_Avatar_C_ExecuteUbergraph_PAWN_Avatar::Temp_struct_Variable_12' has a wrong offset!");
static_assert(offsetof(PAWN_Avatar_C_ExecuteUbergraph_PAWN_Avatar, K2Node_InputActionEvent_Key_35) == 0x0003B0, "Member 'PAWN_Avatar_C_ExecuteUbergraph_PAWN_Avatar::K2Node_InputActionEvent_Key_35' has a wrong offset!");
static_assert(offsetof(PAWN_Avatar_C_ExecuteUbergraph_PAWN_Avatar, K2Node_InputActionEvent_Key_34) == 0x0003C8, "Member 'PAWN_Avatar_C_ExecuteUbergraph_PAWN_Avatar::K2Node_InputActionEvent_Key_34' has a wrong offset!");
static_assert(offsetof(PAWN_Avatar_C_ExecuteUbergraph_PAWN_Avatar, Temp_struct_Variable_13) == 0x0003E0, "Member 'PAWN_Avatar_C_ExecuteUbergraph_PAWN_Avatar::Temp_struct_Variable_13' has a wrong offset!");
static_assert(offsetof(PAWN_Avatar_C_ExecuteUbergraph_PAWN_Avatar, K2Node_InputActionEvent_Key_33) == 0x0003F8, "Member 'PAWN_Avatar_C_ExecuteUbergraph_PAWN_Avatar::K2Node_InputActionEvent_Key_33' has a wrong offset!");
static_assert(offsetof(PAWN_Avatar_C_ExecuteUbergraph_PAWN_Avatar, K2Node_InputActionEvent_Key_32) == 0x000410, "Member 'PAWN_Avatar_C_ExecuteUbergraph_PAWN_Avatar::K2Node_InputActionEvent_Key_32' has a wrong offset!");
static_assert(offsetof(PAWN_Avatar_C_ExecuteUbergraph_PAWN_Avatar, Temp_struct_Variable_14) == 0x000428, "Member 'PAWN_Avatar_C_ExecuteUbergraph_PAWN_Avatar::Temp_struct_Variable_14' has a wrong offset!");
static_assert(offsetof(PAWN_Avatar_C_ExecuteUbergraph_PAWN_Avatar, K2Node_InputActionEvent_Key_31) == 0x000440, "Member 'PAWN_Avatar_C_ExecuteUbergraph_PAWN_Avatar::K2Node_InputActionEvent_Key_31' has a wrong offset!");
static_assert(offsetof(PAWN_Avatar_C_ExecuteUbergraph_PAWN_Avatar, K2Node_InputActionEvent_Key_30) == 0x000458, "Member 'PAWN_Avatar_C_ExecuteUbergraph_PAWN_Avatar::K2Node_InputActionEvent_Key_30' has a wrong offset!");
static_assert(offsetof(PAWN_Avatar_C_ExecuteUbergraph_PAWN_Avatar, Temp_struct_Variable_15) == 0x000470, "Member 'PAWN_Avatar_C_ExecuteUbergraph_PAWN_Avatar::Temp_struct_Variable_15' has a wrong offset!");
static_assert(offsetof(PAWN_Avatar_C_ExecuteUbergraph_PAWN_Avatar, K2Node_InputActionEvent_Key_29) == 0x000488, "Member 'PAWN_Avatar_C_ExecuteUbergraph_PAWN_Avatar::K2Node_InputActionEvent_Key_29' has a wrong offset!");
static_assert(offsetof(PAWN_Avatar_C_ExecuteUbergraph_PAWN_Avatar, K2Node_InputActionEvent_Key_28) == 0x0004A0, "Member 'PAWN_Avatar_C_ExecuteUbergraph_PAWN_Avatar::K2Node_InputActionEvent_Key_28' has a wrong offset!");
static_assert(offsetof(PAWN_Avatar_C_ExecuteUbergraph_PAWN_Avatar, Temp_struct_Variable_16) == 0x0004B8, "Member 'PAWN_Avatar_C_ExecuteUbergraph_PAWN_Avatar::Temp_struct_Variable_16' has a wrong offset!");
static_assert(offsetof(PAWN_Avatar_C_ExecuteUbergraph_PAWN_Avatar, K2Node_InputActionEvent_Key_27) == 0x0004D0, "Member 'PAWN_Avatar_C_ExecuteUbergraph_PAWN_Avatar::K2Node_InputActionEvent_Key_27' has a wrong offset!");
static_assert(offsetof(PAWN_Avatar_C_ExecuteUbergraph_PAWN_Avatar, K2Node_InputActionEvent_Key_26) == 0x0004E8, "Member 'PAWN_Avatar_C_ExecuteUbergraph_PAWN_Avatar::K2Node_InputActionEvent_Key_26' has a wrong offset!");
static_assert(offsetof(PAWN_Avatar_C_ExecuteUbergraph_PAWN_Avatar, Temp_struct_Variable_17) == 0x000500, "Member 'PAWN_Avatar_C_ExecuteUbergraph_PAWN_Avatar::Temp_struct_Variable_17' has a wrong offset!");
static_assert(offsetof(PAWN_Avatar_C_ExecuteUbergraph_PAWN_Avatar, K2Node_InputActionEvent_Key_25) == 0x000518, "Member 'PAWN_Avatar_C_ExecuteUbergraph_PAWN_Avatar::K2Node_InputActionEvent_Key_25' has a wrong offset!");
static_assert(offsetof(PAWN_Avatar_C_ExecuteUbergraph_PAWN_Avatar, K2Node_InputActionEvent_Key_24) == 0x000530, "Member 'PAWN_Avatar_C_ExecuteUbergraph_PAWN_Avatar::K2Node_InputActionEvent_Key_24' has a wrong offset!");
static_assert(offsetof(PAWN_Avatar_C_ExecuteUbergraph_PAWN_Avatar, Temp_struct_Variable_18) == 0x000548, "Member 'PAWN_Avatar_C_ExecuteUbergraph_PAWN_Avatar::Temp_struct_Variable_18' has a wrong offset!");
static_assert(offsetof(PAWN_Avatar_C_ExecuteUbergraph_PAWN_Avatar, K2Node_InputActionEvent_Key_23) == 0x000560, "Member 'PAWN_Avatar_C_ExecuteUbergraph_PAWN_Avatar::K2Node_InputActionEvent_Key_23' has a wrong offset!");
static_assert(offsetof(PAWN_Avatar_C_ExecuteUbergraph_PAWN_Avatar, K2Node_InputActionEvent_Key_22) == 0x000578, "Member 'PAWN_Avatar_C_ExecuteUbergraph_PAWN_Avatar::K2Node_InputActionEvent_Key_22' has a wrong offset!");
static_assert(offsetof(PAWN_Avatar_C_ExecuteUbergraph_PAWN_Avatar, Temp_struct_Variable_19) == 0x000590, "Member 'PAWN_Avatar_C_ExecuteUbergraph_PAWN_Avatar::Temp_struct_Variable_19' has a wrong offset!");
static_assert(offsetof(PAWN_Avatar_C_ExecuteUbergraph_PAWN_Avatar, K2Node_InputActionEvent_Key_21) == 0x0005A8, "Member 'PAWN_Avatar_C_ExecuteUbergraph_PAWN_Avatar::K2Node_InputActionEvent_Key_21' has a wrong offset!");
static_assert(offsetof(PAWN_Avatar_C_ExecuteUbergraph_PAWN_Avatar, K2Node_InputActionEvent_Key_20) == 0x0005C0, "Member 'PAWN_Avatar_C_ExecuteUbergraph_PAWN_Avatar::K2Node_InputActionEvent_Key_20' has a wrong offset!");
static_assert(offsetof(PAWN_Avatar_C_ExecuteUbergraph_PAWN_Avatar, Temp_struct_Variable_20) == 0x0005D8, "Member 'PAWN_Avatar_C_ExecuteUbergraph_PAWN_Avatar::Temp_struct_Variable_20' has a wrong offset!");
static_assert(offsetof(PAWN_Avatar_C_ExecuteUbergraph_PAWN_Avatar, K2Node_InputActionEvent_Key_19) == 0x0005F0, "Member 'PAWN_Avatar_C_ExecuteUbergraph_PAWN_Avatar::K2Node_InputActionEvent_Key_19' has a wrong offset!");
static_assert(offsetof(PAWN_Avatar_C_ExecuteUbergraph_PAWN_Avatar, K2Node_InputActionEvent_Key_18) == 0x000608, "Member 'PAWN_Avatar_C_ExecuteUbergraph_PAWN_Avatar::K2Node_InputActionEvent_Key_18' has a wrong offset!");
static_assert(offsetof(PAWN_Avatar_C_ExecuteUbergraph_PAWN_Avatar, Temp_struct_Variable_21) == 0x000620, "Member 'PAWN_Avatar_C_ExecuteUbergraph_PAWN_Avatar::Temp_struct_Variable_21' has a wrong offset!");
static_assert(offsetof(PAWN_Avatar_C_ExecuteUbergraph_PAWN_Avatar, K2Node_InputActionEvent_Key_17) == 0x000638, "Member 'PAWN_Avatar_C_ExecuteUbergraph_PAWN_Avatar::K2Node_InputActionEvent_Key_17' has a wrong offset!");
static_assert(offsetof(PAWN_Avatar_C_ExecuteUbergraph_PAWN_Avatar, K2Node_InputActionEvent_Key_16) == 0x000650, "Member 'PAWN_Avatar_C_ExecuteUbergraph_PAWN_Avatar::K2Node_InputActionEvent_Key_16' has a wrong offset!");
static_assert(offsetof(PAWN_Avatar_C_ExecuteUbergraph_PAWN_Avatar, Temp_struct_Variable_22) == 0x000668, "Member 'PAWN_Avatar_C_ExecuteUbergraph_PAWN_Avatar::Temp_struct_Variable_22' has a wrong offset!");
static_assert(offsetof(PAWN_Avatar_C_ExecuteUbergraph_PAWN_Avatar, K2Node_InputKeyEvent_Key) == 0x000680, "Member 'PAWN_Avatar_C_ExecuteUbergraph_PAWN_Avatar::K2Node_InputKeyEvent_Key' has a wrong offset!");
static_assert(offsetof(PAWN_Avatar_C_ExecuteUbergraph_PAWN_Avatar, K2Node_InputActionEvent_Key_15) == 0x000698, "Member 'PAWN_Avatar_C_ExecuteUbergraph_PAWN_Avatar::K2Node_InputActionEvent_Key_15' has a wrong offset!");
static_assert(offsetof(PAWN_Avatar_C_ExecuteUbergraph_PAWN_Avatar, K2Node_InputActionEvent_Key_14) == 0x0006B0, "Member 'PAWN_Avatar_C_ExecuteUbergraph_PAWN_Avatar::K2Node_InputActionEvent_Key_14' has a wrong offset!");
static_assert(offsetof(PAWN_Avatar_C_ExecuteUbergraph_PAWN_Avatar, Temp_struct_Variable_23) == 0x0006C8, "Member 'PAWN_Avatar_C_ExecuteUbergraph_PAWN_Avatar::Temp_struct_Variable_23' has a wrong offset!");
static_assert(offsetof(PAWN_Avatar_C_ExecuteUbergraph_PAWN_Avatar, K2Node_InputActionEvent_Key_13) == 0x0006E0, "Member 'PAWN_Avatar_C_ExecuteUbergraph_PAWN_Avatar::K2Node_InputActionEvent_Key_13' has a wrong offset!");
static_assert(offsetof(PAWN_Avatar_C_ExecuteUbergraph_PAWN_Avatar, K2Node_InputActionEvent_Key_12) == 0x0006F8, "Member 'PAWN_Avatar_C_ExecuteUbergraph_PAWN_Avatar::K2Node_InputActionEvent_Key_12' has a wrong offset!");
static_assert(offsetof(PAWN_Avatar_C_ExecuteUbergraph_PAWN_Avatar, Temp_struct_Variable_24) == 0x000710, "Member 'PAWN_Avatar_C_ExecuteUbergraph_PAWN_Avatar::Temp_struct_Variable_24' has a wrong offset!");
static_assert(offsetof(PAWN_Avatar_C_ExecuteUbergraph_PAWN_Avatar, K2Node_InputActionEvent_Key_11) == 0x000728, "Member 'PAWN_Avatar_C_ExecuteUbergraph_PAWN_Avatar::K2Node_InputActionEvent_Key_11' has a wrong offset!");
static_assert(offsetof(PAWN_Avatar_C_ExecuteUbergraph_PAWN_Avatar, K2Node_InputActionEvent_Key_10) == 0x000740, "Member 'PAWN_Avatar_C_ExecuteUbergraph_PAWN_Avatar::K2Node_InputActionEvent_Key_10' has a wrong offset!");
static_assert(offsetof(PAWN_Avatar_C_ExecuteUbergraph_PAWN_Avatar, Temp_struct_Variable_25) == 0x000758, "Member 'PAWN_Avatar_C_ExecuteUbergraph_PAWN_Avatar::Temp_struct_Variable_25' has a wrong offset!");
static_assert(offsetof(PAWN_Avatar_C_ExecuteUbergraph_PAWN_Avatar, K2Node_InputActionEvent_Key_9) == 0x000770, "Member 'PAWN_Avatar_C_ExecuteUbergraph_PAWN_Avatar::K2Node_InputActionEvent_Key_9' has a wrong offset!");
static_assert(offsetof(PAWN_Avatar_C_ExecuteUbergraph_PAWN_Avatar, K2Node_InputActionEvent_Key_8) == 0x000788, "Member 'PAWN_Avatar_C_ExecuteUbergraph_PAWN_Avatar::K2Node_InputActionEvent_Key_8' has a wrong offset!");
static_assert(offsetof(PAWN_Avatar_C_ExecuteUbergraph_PAWN_Avatar, Temp_struct_Variable_26) == 0x0007A0, "Member 'PAWN_Avatar_C_ExecuteUbergraph_PAWN_Avatar::Temp_struct_Variable_26' has a wrong offset!");
static_assert(offsetof(PAWN_Avatar_C_ExecuteUbergraph_PAWN_Avatar, K2Node_InputActionEvent_Key_7) == 0x0007B8, "Member 'PAWN_Avatar_C_ExecuteUbergraph_PAWN_Avatar::K2Node_InputActionEvent_Key_7' has a wrong offset!");
static_assert(offsetof(PAWN_Avatar_C_ExecuteUbergraph_PAWN_Avatar, K2Node_InputActionEvent_Key_6) == 0x0007D0, "Member 'PAWN_Avatar_C_ExecuteUbergraph_PAWN_Avatar::K2Node_InputActionEvent_Key_6' has a wrong offset!");
static_assert(offsetof(PAWN_Avatar_C_ExecuteUbergraph_PAWN_Avatar, Temp_struct_Variable_27) == 0x0007E8, "Member 'PAWN_Avatar_C_ExecuteUbergraph_PAWN_Avatar::Temp_struct_Variable_27' has a wrong offset!");
static_assert(offsetof(PAWN_Avatar_C_ExecuteUbergraph_PAWN_Avatar, K2Node_InputActionEvent_Key_5) == 0x000800, "Member 'PAWN_Avatar_C_ExecuteUbergraph_PAWN_Avatar::K2Node_InputActionEvent_Key_5' has a wrong offset!");
static_assert(offsetof(PAWN_Avatar_C_ExecuteUbergraph_PAWN_Avatar, K2Node_InputActionEvent_Key_4) == 0x000818, "Member 'PAWN_Avatar_C_ExecuteUbergraph_PAWN_Avatar::K2Node_InputActionEvent_Key_4' has a wrong offset!");
static_assert(offsetof(PAWN_Avatar_C_ExecuteUbergraph_PAWN_Avatar, Temp_struct_Variable_28) == 0x000830, "Member 'PAWN_Avatar_C_ExecuteUbergraph_PAWN_Avatar::Temp_struct_Variable_28' has a wrong offset!");
static_assert(offsetof(PAWN_Avatar_C_ExecuteUbergraph_PAWN_Avatar, K2Node_InputActionEvent_Key_3) == 0x000848, "Member 'PAWN_Avatar_C_ExecuteUbergraph_PAWN_Avatar::K2Node_InputActionEvent_Key_3' has a wrong offset!");
static_assert(offsetof(PAWN_Avatar_C_ExecuteUbergraph_PAWN_Avatar, K2Node_InputActionEvent_Key_2) == 0x000860, "Member 'PAWN_Avatar_C_ExecuteUbergraph_PAWN_Avatar::K2Node_InputActionEvent_Key_2' has a wrong offset!");
static_assert(offsetof(PAWN_Avatar_C_ExecuteUbergraph_PAWN_Avatar, Temp_struct_Variable_29) == 0x000878, "Member 'PAWN_Avatar_C_ExecuteUbergraph_PAWN_Avatar::Temp_struct_Variable_29' has a wrong offset!");
static_assert(offsetof(PAWN_Avatar_C_ExecuteUbergraph_PAWN_Avatar, K2Node_InputActionEvent_Key_1) == 0x000890, "Member 'PAWN_Avatar_C_ExecuteUbergraph_PAWN_Avatar::K2Node_InputActionEvent_Key_1' has a wrong offset!");
static_assert(offsetof(PAWN_Avatar_C_ExecuteUbergraph_PAWN_Avatar, K2Node_InputActionEvent_Key) == 0x0008A8, "Member 'PAWN_Avatar_C_ExecuteUbergraph_PAWN_Avatar::K2Node_InputActionEvent_Key' has a wrong offset!");
static_assert(offsetof(PAWN_Avatar_C_ExecuteUbergraph_PAWN_Avatar, Temp_struct_Variable_30) == 0x0008C0, "Member 'PAWN_Avatar_C_ExecuteUbergraph_PAWN_Avatar::Temp_struct_Variable_30' has a wrong offset!");
static_assert(offsetof(PAWN_Avatar_C_ExecuteUbergraph_PAWN_Avatar, CallFunc_CreateDynamicMaterialInstance_ReturnValue) == 0x0008D8, "Member 'PAWN_Avatar_C_ExecuteUbergraph_PAWN_Avatar::CallFunc_CreateDynamicMaterialInstance_ReturnValue' has a wrong offset!");
static_assert(offsetof(PAWN_Avatar_C_ExecuteUbergraph_PAWN_Avatar, K2Node_ComponentBoundEvent_HitComponent) == 0x0008E0, "Member 'PAWN_Avatar_C_ExecuteUbergraph_PAWN_Avatar::K2Node_ComponentBoundEvent_HitComponent' has a wrong offset!");
static_assert(offsetof(PAWN_Avatar_C_ExecuteUbergraph_PAWN_Avatar, K2Node_ComponentBoundEvent_OtherActor) == 0x0008E8, "Member 'PAWN_Avatar_C_ExecuteUbergraph_PAWN_Avatar::K2Node_ComponentBoundEvent_OtherActor' has a wrong offset!");
static_assert(offsetof(PAWN_Avatar_C_ExecuteUbergraph_PAWN_Avatar, K2Node_ComponentBoundEvent_OtherComp) == 0x0008F0, "Member 'PAWN_Avatar_C_ExecuteUbergraph_PAWN_Avatar::K2Node_ComponentBoundEvent_OtherComp' has a wrong offset!");
static_assert(offsetof(PAWN_Avatar_C_ExecuteUbergraph_PAWN_Avatar, K2Node_ComponentBoundEvent_NormalImpulse) == 0x0008F8, "Member 'PAWN_Avatar_C_ExecuteUbergraph_PAWN_Avatar::K2Node_ComponentBoundEvent_NormalImpulse' has a wrong offset!");
static_assert(offsetof(PAWN_Avatar_C_ExecuteUbergraph_PAWN_Avatar, K2Node_ComponentBoundEvent_Hit) == 0x000904, "Member 'PAWN_Avatar_C_ExecuteUbergraph_PAWN_Avatar::K2Node_ComponentBoundEvent_Hit' has a wrong offset!");
static_assert(offsetof(PAWN_Avatar_C_ExecuteUbergraph_PAWN_Avatar, CallFunc_AddOrUpdateBlendable_InBlendableObject_CastInput) == 0x000990, "Member 'PAWN_Avatar_C_ExecuteUbergraph_PAWN_Avatar::CallFunc_AddOrUpdateBlendable_InBlendableObject_CastInput' has a wrong offset!");
static_assert(offsetof(PAWN_Avatar_C_ExecuteUbergraph_PAWN_Avatar, CallFunc_ShouldBounce_Result) == 0x0009A0, "Member 'PAWN_Avatar_C_ExecuteUbergraph_PAWN_Avatar::CallFunc_ShouldBounce_Result' has a wrong offset!");
static_assert(offsetof(PAWN_Avatar_C_ExecuteUbergraph_PAWN_Avatar, K2Node_InputActionEvent_Key_62) == 0x0009A8, "Member 'PAWN_Avatar_C_ExecuteUbergraph_PAWN_Avatar::K2Node_InputActionEvent_Key_62' has a wrong offset!");
static_assert(offsetof(PAWN_Avatar_C_ExecuteUbergraph_PAWN_Avatar, K2Node_InputActionEvent_Key_65) == 0x0009C0, "Member 'PAWN_Avatar_C_ExecuteUbergraph_PAWN_Avatar::K2Node_InputActionEvent_Key_65' has a wrong offset!");
static_assert(offsetof(PAWN_Avatar_C_ExecuteUbergraph_PAWN_Avatar, CallFunc_GetGlobalTimeDilation_ReturnValue) == 0x0009D8, "Member 'PAWN_Avatar_C_ExecuteUbergraph_PAWN_Avatar::CallFunc_GetGlobalTimeDilation_ReturnValue' has a wrong offset!");
static_assert(offsetof(PAWN_Avatar_C_ExecuteUbergraph_PAWN_Avatar, CallFunc_EqualEqual_FloatFloat_ReturnValue) == 0x0009DC, "Member 'PAWN_Avatar_C_ExecuteUbergraph_PAWN_Avatar::CallFunc_EqualEqual_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(PAWN_Avatar_C_ExecuteUbergraph_PAWN_Avatar, CallFunc_SelectFloat_ReturnValue) == 0x0009E0, "Member 'PAWN_Avatar_C_ExecuteUbergraph_PAWN_Avatar::CallFunc_SelectFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(PAWN_Avatar_C_ExecuteUbergraph_PAWN_Avatar, K2Node_ComponentBoundEvent_bVisibleState) == 0x0009E4, "Member 'PAWN_Avatar_C_ExecuteUbergraph_PAWN_Avatar::K2Node_ComponentBoundEvent_bVisibleState' has a wrong offset!");
static_assert(offsetof(PAWN_Avatar_C_ExecuteUbergraph_PAWN_Avatar, CallFunc_IsPackagedForDistribution_ReturnValue) == 0x0009E5, "Member 'PAWN_Avatar_C_ExecuteUbergraph_PAWN_Avatar::CallFunc_IsPackagedForDistribution_ReturnValue' has a wrong offset!");
static_assert(offsetof(PAWN_Avatar_C_ExecuteUbergraph_PAWN_Avatar, CallFunc_Not_PreBool_ReturnValue) == 0x0009E6, "Member 'PAWN_Avatar_C_ExecuteUbergraph_PAWN_Avatar::CallFunc_Not_PreBool_ReturnValue' has a wrong offset!");
static_assert(offsetof(PAWN_Avatar_C_ExecuteUbergraph_PAWN_Avatar, Temp_struct_Variable_31) == 0x0009E8, "Member 'PAWN_Avatar_C_ExecuteUbergraph_PAWN_Avatar::Temp_struct_Variable_31' has a wrong offset!");
static_assert(offsetof(PAWN_Avatar_C_ExecuteUbergraph_PAWN_Avatar, K2Node_InputActionEvent_Key_66) == 0x000A00, "Member 'PAWN_Avatar_C_ExecuteUbergraph_PAWN_Avatar::K2Node_InputActionEvent_Key_66' has a wrong offset!");
static_assert(offsetof(PAWN_Avatar_C_ExecuteUbergraph_PAWN_Avatar, K2Node_InputActionEvent_Key_67) == 0x000A18, "Member 'PAWN_Avatar_C_ExecuteUbergraph_PAWN_Avatar::K2Node_InputActionEvent_Key_67' has a wrong offset!");
static_assert(offsetof(PAWN_Avatar_C_ExecuteUbergraph_PAWN_Avatar, Temp_struct_Variable_32) == 0x000A30, "Member 'PAWN_Avatar_C_ExecuteUbergraph_PAWN_Avatar::Temp_struct_Variable_32' has a wrong offset!");
static_assert(offsetof(PAWN_Avatar_C_ExecuteUbergraph_PAWN_Avatar, K2Node_InputAxisEvent_AxisValue_7) == 0x000A48, "Member 'PAWN_Avatar_C_ExecuteUbergraph_PAWN_Avatar::K2Node_InputAxisEvent_AxisValue_7' has a wrong offset!");
static_assert(offsetof(PAWN_Avatar_C_ExecuteUbergraph_PAWN_Avatar, K2Node_InputAxisEvent_AxisValue_6) == 0x000A4C, "Member 'PAWN_Avatar_C_ExecuteUbergraph_PAWN_Avatar::K2Node_InputAxisEvent_AxisValue_6' has a wrong offset!");
static_assert(offsetof(PAWN_Avatar_C_ExecuteUbergraph_PAWN_Avatar, K2Node_InputActionEvent_Key_68) == 0x000A50, "Member 'PAWN_Avatar_C_ExecuteUbergraph_PAWN_Avatar::K2Node_InputActionEvent_Key_68' has a wrong offset!");
static_assert(offsetof(PAWN_Avatar_C_ExecuteUbergraph_PAWN_Avatar, K2Node_InputAxisEvent_AxisValue_5) == 0x000A68, "Member 'PAWN_Avatar_C_ExecuteUbergraph_PAWN_Avatar::K2Node_InputAxisEvent_AxisValue_5' has a wrong offset!");
static_assert(offsetof(PAWN_Avatar_C_ExecuteUbergraph_PAWN_Avatar, K2Node_InputAxisEvent_AxisValue_4) == 0x000A6C, "Member 'PAWN_Avatar_C_ExecuteUbergraph_PAWN_Avatar::K2Node_InputAxisEvent_AxisValue_4' has a wrong offset!");
static_assert(offsetof(PAWN_Avatar_C_ExecuteUbergraph_PAWN_Avatar, K2Node_InputActionEvent_Key_69) == 0x000A70, "Member 'PAWN_Avatar_C_ExecuteUbergraph_PAWN_Avatar::K2Node_InputActionEvent_Key_69' has a wrong offset!");
static_assert(offsetof(PAWN_Avatar_C_ExecuteUbergraph_PAWN_Avatar, K2Node_InputAxisEvent_AxisValue_3) == 0x000A88, "Member 'PAWN_Avatar_C_ExecuteUbergraph_PAWN_Avatar::K2Node_InputAxisEvent_AxisValue_3' has a wrong offset!");
static_assert(offsetof(PAWN_Avatar_C_ExecuteUbergraph_PAWN_Avatar, K2Node_InputAxisEvent_AxisValue_2) == 0x000A8C, "Member 'PAWN_Avatar_C_ExecuteUbergraph_PAWN_Avatar::K2Node_InputAxisEvent_AxisValue_2' has a wrong offset!");
static_assert(offsetof(PAWN_Avatar_C_ExecuteUbergraph_PAWN_Avatar, Temp_struct_Variable_33) == 0x000A90, "Member 'PAWN_Avatar_C_ExecuteUbergraph_PAWN_Avatar::Temp_struct_Variable_33' has a wrong offset!");
static_assert(offsetof(PAWN_Avatar_C_ExecuteUbergraph_PAWN_Avatar, K2Node_InputActionEvent_Key_70) == 0x000AA8, "Member 'PAWN_Avatar_C_ExecuteUbergraph_PAWN_Avatar::K2Node_InputActionEvent_Key_70' has a wrong offset!");
static_assert(offsetof(PAWN_Avatar_C_ExecuteUbergraph_PAWN_Avatar, K2Node_InputActionEvent_Key_71) == 0x000AC0, "Member 'PAWN_Avatar_C_ExecuteUbergraph_PAWN_Avatar::K2Node_InputActionEvent_Key_71' has a wrong offset!");
static_assert(offsetof(PAWN_Avatar_C_ExecuteUbergraph_PAWN_Avatar, Temp_struct_Variable_34) == 0x000AD8, "Member 'PAWN_Avatar_C_ExecuteUbergraph_PAWN_Avatar::Temp_struct_Variable_34' has a wrong offset!");
static_assert(offsetof(PAWN_Avatar_C_ExecuteUbergraph_PAWN_Avatar, K2Node_InputActionEvent_Key_72) == 0x000AF0, "Member 'PAWN_Avatar_C_ExecuteUbergraph_PAWN_Avatar::K2Node_InputActionEvent_Key_72' has a wrong offset!");
static_assert(offsetof(PAWN_Avatar_C_ExecuteUbergraph_PAWN_Avatar, K2Node_InputActionEvent_Key_73) == 0x000B08, "Member 'PAWN_Avatar_C_ExecuteUbergraph_PAWN_Avatar::K2Node_InputActionEvent_Key_73' has a wrong offset!");
static_assert(offsetof(PAWN_Avatar_C_ExecuteUbergraph_PAWN_Avatar, Temp_struct_Variable_35) == 0x000B20, "Member 'PAWN_Avatar_C_ExecuteUbergraph_PAWN_Avatar::Temp_struct_Variable_35' has a wrong offset!");
static_assert(offsetof(PAWN_Avatar_C_ExecuteUbergraph_PAWN_Avatar, K2Node_InputAxisEvent_AxisValue_1) == 0x000B38, "Member 'PAWN_Avatar_C_ExecuteUbergraph_PAWN_Avatar::K2Node_InputAxisEvent_AxisValue_1' has a wrong offset!");
static_assert(offsetof(PAWN_Avatar_C_ExecuteUbergraph_PAWN_Avatar, K2Node_InputAxisEvent_AxisValue) == 0x000B3C, "Member 'PAWN_Avatar_C_ExecuteUbergraph_PAWN_Avatar::K2Node_InputAxisEvent_AxisValue' has a wrong offset!");
static_assert(offsetof(PAWN_Avatar_C_ExecuteUbergraph_PAWN_Avatar, CallFunc_Less_FloatFloat_ReturnValue) == 0x000B40, "Member 'PAWN_Avatar_C_ExecuteUbergraph_PAWN_Avatar::CallFunc_Less_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(PAWN_Avatar_C_ExecuteUbergraph_PAWN_Avatar, CallFunc_Less_FloatFloat_ReturnValue_1) == 0x000B41, "Member 'PAWN_Avatar_C_ExecuteUbergraph_PAWN_Avatar::CallFunc_Less_FloatFloat_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(PAWN_Avatar_C_ExecuteUbergraph_PAWN_Avatar, CallFunc_Greater_FloatFloat_ReturnValue) == 0x000B42, "Member 'PAWN_Avatar_C_ExecuteUbergraph_PAWN_Avatar::CallFunc_Greater_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(PAWN_Avatar_C_ExecuteUbergraph_PAWN_Avatar, CallFunc_Greater_FloatFloat_ReturnValue_1) == 0x000B43, "Member 'PAWN_Avatar_C_ExecuteUbergraph_PAWN_Avatar::CallFunc_Greater_FloatFloat_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(PAWN_Avatar_C_ExecuteUbergraph_PAWN_Avatar, K2Node_InputActionEvent_Key_74) == 0x000B48, "Member 'PAWN_Avatar_C_ExecuteUbergraph_PAWN_Avatar::K2Node_InputActionEvent_Key_74' has a wrong offset!");
static_assert(offsetof(PAWN_Avatar_C_ExecuteUbergraph_PAWN_Avatar, K2Node_InputActionEvent_Key_75) == 0x000B60, "Member 'PAWN_Avatar_C_ExecuteUbergraph_PAWN_Avatar::K2Node_InputActionEvent_Key_75' has a wrong offset!");
static_assert(offsetof(PAWN_Avatar_C_ExecuteUbergraph_PAWN_Avatar, Temp_struct_Variable_36) == 0x000B78, "Member 'PAWN_Avatar_C_ExecuteUbergraph_PAWN_Avatar::Temp_struct_Variable_36' has a wrong offset!");
static_assert(offsetof(PAWN_Avatar_C_ExecuteUbergraph_PAWN_Avatar, K2Node_InputActionEvent_Key_76) == 0x000B90, "Member 'PAWN_Avatar_C_ExecuteUbergraph_PAWN_Avatar::K2Node_InputActionEvent_Key_76' has a wrong offset!");
static_assert(offsetof(PAWN_Avatar_C_ExecuteUbergraph_PAWN_Avatar, K2Node_InputActionEvent_Key_77) == 0x000BA8, "Member 'PAWN_Avatar_C_ExecuteUbergraph_PAWN_Avatar::K2Node_InputActionEvent_Key_77' has a wrong offset!");
static_assert(offsetof(PAWN_Avatar_C_ExecuteUbergraph_PAWN_Avatar, Temp_struct_Variable_37) == 0x000BC0, "Member 'PAWN_Avatar_C_ExecuteUbergraph_PAWN_Avatar::Temp_struct_Variable_37' has a wrong offset!");
static_assert(offsetof(PAWN_Avatar_C_ExecuteUbergraph_PAWN_Avatar, K2Node_InputActionEvent_Key_78) == 0x000BD8, "Member 'PAWN_Avatar_C_ExecuteUbergraph_PAWN_Avatar::K2Node_InputActionEvent_Key_78' has a wrong offset!");
static_assert(offsetof(PAWN_Avatar_C_ExecuteUbergraph_PAWN_Avatar, K2Node_InputActionEvent_Key_79) == 0x000BF0, "Member 'PAWN_Avatar_C_ExecuteUbergraph_PAWN_Avatar::K2Node_InputActionEvent_Key_79' has a wrong offset!");
static_assert(offsetof(PAWN_Avatar_C_ExecuteUbergraph_PAWN_Avatar, Temp_struct_Variable_38) == 0x000C08, "Member 'PAWN_Avatar_C_ExecuteUbergraph_PAWN_Avatar::Temp_struct_Variable_38' has a wrong offset!");
static_assert(offsetof(PAWN_Avatar_C_ExecuteUbergraph_PAWN_Avatar, K2Node_InputActionEvent_Key_80) == 0x000C20, "Member 'PAWN_Avatar_C_ExecuteUbergraph_PAWN_Avatar::K2Node_InputActionEvent_Key_80' has a wrong offset!");
static_assert(offsetof(PAWN_Avatar_C_ExecuteUbergraph_PAWN_Avatar, CallFunc_IsPackagedForDistribution_ReturnValue_1) == 0x000C38, "Member 'PAWN_Avatar_C_ExecuteUbergraph_PAWN_Avatar::CallFunc_IsPackagedForDistribution_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(PAWN_Avatar_C_ExecuteUbergraph_PAWN_Avatar, CallFunc_Not_PreBool_ReturnValue_1) == 0x000C39, "Member 'PAWN_Avatar_C_ExecuteUbergraph_PAWN_Avatar::CallFunc_Not_PreBool_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(PAWN_Avatar_C_ExecuteUbergraph_PAWN_Avatar, K2Node_InputActionEvent_Key_81) == 0x000C40, "Member 'PAWN_Avatar_C_ExecuteUbergraph_PAWN_Avatar::K2Node_InputActionEvent_Key_81' has a wrong offset!");
static_assert(offsetof(PAWN_Avatar_C_ExecuteUbergraph_PAWN_Avatar, K2Node_InputKeyEvent_Key_1) == 0x000C58, "Member 'PAWN_Avatar_C_ExecuteUbergraph_PAWN_Avatar::K2Node_InputKeyEvent_Key_1' has a wrong offset!");
static_assert(offsetof(PAWN_Avatar_C_ExecuteUbergraph_PAWN_Avatar, CallFunc_AddOrUpdateBlendable_InBlendableObject_CastInput_1) == 0x000C70, "Member 'PAWN_Avatar_C_ExecuteUbergraph_PAWN_Avatar::CallFunc_AddOrUpdateBlendable_InBlendableObject_CastInput_1' has a wrong offset!");
static_assert(offsetof(PAWN_Avatar_C_ExecuteUbergraph_PAWN_Avatar, K2Node_Event_DeltaSeconds) == 0x000C80, "Member 'PAWN_Avatar_C_ExecuteUbergraph_PAWN_Avatar::K2Node_Event_DeltaSeconds' has a wrong offset!");
static_assert(offsetof(PAWN_Avatar_C_ExecuteUbergraph_PAWN_Avatar, K2Node_InputActionEvent_Key_63) == 0x000C88, "Member 'PAWN_Avatar_C_ExecuteUbergraph_PAWN_Avatar::K2Node_InputActionEvent_Key_63' has a wrong offset!");
static_assert(offsetof(PAWN_Avatar_C_ExecuteUbergraph_PAWN_Avatar, K2Node_Event_NewController) == 0x000CA0, "Member 'PAWN_Avatar_C_ExecuteUbergraph_PAWN_Avatar::K2Node_Event_NewController' has a wrong offset!");
static_assert(offsetof(PAWN_Avatar_C_ExecuteUbergraph_PAWN_Avatar, K2Node_Event_OldController) == 0x000CA8, "Member 'PAWN_Avatar_C_ExecuteUbergraph_PAWN_Avatar::K2Node_Event_OldController' has a wrong offset!");
static_assert(offsetof(PAWN_Avatar_C_ExecuteUbergraph_PAWN_Avatar, CallFunc_GetGameInstance_ReturnValue) == 0x000CB0, "Member 'PAWN_Avatar_C_ExecuteUbergraph_PAWN_Avatar::CallFunc_GetGameInstance_ReturnValue' has a wrong offset!");
static_assert(offsetof(PAWN_Avatar_C_ExecuteUbergraph_PAWN_Avatar, K2Node_DynamicCast_AsGI_Single_Player) == 0x000CB8, "Member 'PAWN_Avatar_C_ExecuteUbergraph_PAWN_Avatar::K2Node_DynamicCast_AsGI_Single_Player' has a wrong offset!");
static_assert(offsetof(PAWN_Avatar_C_ExecuteUbergraph_PAWN_Avatar, K2Node_DynamicCast_bSuccess) == 0x000CC0, "Member 'PAWN_Avatar_C_ExecuteUbergraph_PAWN_Avatar::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(PAWN_Avatar_C_ExecuteUbergraph_PAWN_Avatar, Temp_struct_Variable_39) == 0x000CC8, "Member 'PAWN_Avatar_C_ExecuteUbergraph_PAWN_Avatar::Temp_struct_Variable_39' has a wrong offset!");
static_assert(offsetof(PAWN_Avatar_C_ExecuteUbergraph_PAWN_Avatar, CallFunc_SetMusicState_MusicCue) == 0x000CE0, "Member 'PAWN_Avatar_C_ExecuteUbergraph_PAWN_Avatar::CallFunc_SetMusicState_MusicCue' has a wrong offset!");
static_assert(offsetof(PAWN_Avatar_C_ExecuteUbergraph_PAWN_Avatar, CallFunc_GetGameInstance_ReturnValue_1) == 0x000CE8, "Member 'PAWN_Avatar_C_ExecuteUbergraph_PAWN_Avatar::CallFunc_GetGameInstance_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(PAWN_Avatar_C_ExecuteUbergraph_PAWN_Avatar, K2Node_DynamicCast_AsGI_Single_Player_1) == 0x000CF0, "Member 'PAWN_Avatar_C_ExecuteUbergraph_PAWN_Avatar::K2Node_DynamicCast_AsGI_Single_Player_1' has a wrong offset!");
static_assert(offsetof(PAWN_Avatar_C_ExecuteUbergraph_PAWN_Avatar, K2Node_DynamicCast_bSuccess_1) == 0x000CF8, "Member 'PAWN_Avatar_C_ExecuteUbergraph_PAWN_Avatar::K2Node_DynamicCast_bSuccess_1' has a wrong offset!");
static_assert(offsetof(PAWN_Avatar_C_ExecuteUbergraph_PAWN_Avatar, K2Node_InputActionEvent_Key_64) == 0x000D00, "Member 'PAWN_Avatar_C_ExecuteUbergraph_PAWN_Avatar::K2Node_InputActionEvent_Key_64' has a wrong offset!");
static_assert(offsetof(PAWN_Avatar_C_ExecuteUbergraph_PAWN_Avatar, CallFunc_IsValid_ReturnValue) == 0x000D18, "Member 'PAWN_Avatar_C_ExecuteUbergraph_PAWN_Avatar::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(PAWN_Avatar_C_ExecuteUbergraph_PAWN_Avatar, CallFunc_IsValid_ReturnValue_1) == 0x000D19, "Member 'PAWN_Avatar_C_ExecuteUbergraph_PAWN_Avatar::CallFunc_IsValid_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(PAWN_Avatar_C_ExecuteUbergraph_PAWN_Avatar, CallFunc_IsValid_ReturnValue_2) == 0x000D1A, "Member 'PAWN_Avatar_C_ExecuteUbergraph_PAWN_Avatar::CallFunc_IsValid_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(PAWN_Avatar_C_ExecuteUbergraph_PAWN_Avatar, CallFunc_StartTrackingLocation_ReturnValue) == 0x000D1B, "Member 'PAWN_Avatar_C_ExecuteUbergraph_PAWN_Avatar::CallFunc_StartTrackingLocation_ReturnValue' has a wrong offset!");
static_assert(offsetof(PAWN_Avatar_C_ExecuteUbergraph_PAWN_Avatar, CallFunc_StopTrackingLocation_ReturnValue) == 0x000D1C, "Member 'PAWN_Avatar_C_ExecuteUbergraph_PAWN_Avatar::CallFunc_StopTrackingLocation_ReturnValue' has a wrong offset!");
static_assert(offsetof(PAWN_Avatar_C_ExecuteUbergraph_PAWN_Avatar, CallFunc_GetShockSettingsForCurrentUser_Settings) == 0x000D20, "Member 'PAWN_Avatar_C_ExecuteUbergraph_PAWN_Avatar::CallFunc_GetShockSettingsForCurrentUser_Settings' has a wrong offset!");

// Function PAWN_Avatar.PAWN_Avatar_C.ReceiveUnpossessed
// 0x0008 (0x0008 - 0x0000)
struct PAWN_Avatar_C_ReceiveUnpossessed final
{
public:
	class AController*                            OldController;                                     // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(PAWN_Avatar_C_ReceiveUnpossessed) == 0x000008, "Wrong alignment on PAWN_Avatar_C_ReceiveUnpossessed");
static_assert(sizeof(PAWN_Avatar_C_ReceiveUnpossessed) == 0x000008, "Wrong size on PAWN_Avatar_C_ReceiveUnpossessed");
static_assert(offsetof(PAWN_Avatar_C_ReceiveUnpossessed, OldController) == 0x000000, "Member 'PAWN_Avatar_C_ReceiveUnpossessed::OldController' has a wrong offset!");

// Function PAWN_Avatar.PAWN_Avatar_C.ReceivePossessed
// 0x0008 (0x0008 - 0x0000)
struct PAWN_Avatar_C_ReceivePossessed final
{
public:
	class AController*                            NewController;                                     // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(PAWN_Avatar_C_ReceivePossessed) == 0x000008, "Wrong alignment on PAWN_Avatar_C_ReceivePossessed");
static_assert(sizeof(PAWN_Avatar_C_ReceivePossessed) == 0x000008, "Wrong size on PAWN_Avatar_C_ReceivePossessed");
static_assert(offsetof(PAWN_Avatar_C_ReceivePossessed, NewController) == 0x000000, "Member 'PAWN_Avatar_C_ReceivePossessed::NewController' has a wrong offset!");

// Function PAWN_Avatar.PAWN_Avatar_C.ReceiveTick
// 0x0004 (0x0004 - 0x0000)
struct PAWN_Avatar_C_ReceiveTick final
{
public:
	float                                         DeltaSeconds;                                      // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(PAWN_Avatar_C_ReceiveTick) == 0x000004, "Wrong alignment on PAWN_Avatar_C_ReceiveTick");
static_assert(sizeof(PAWN_Avatar_C_ReceiveTick) == 0x000004, "Wrong size on PAWN_Avatar_C_ReceiveTick");
static_assert(offsetof(PAWN_Avatar_C_ReceiveTick, DeltaSeconds) == 0x000000, "Member 'PAWN_Avatar_C_ReceiveTick::DeltaSeconds' has a wrong offset!");

// Function PAWN_Avatar.PAWN_Avatar_C.InpAxisEvt_MenuNavAxis_Y_K2Node_InputAxisEvent_17
// 0x0004 (0x0004 - 0x0000)
struct PAWN_Avatar_C_InpAxisEvt_MenuNavAxis_Y_K2Node_InputAxisEvent_17 final
{
public:
	float                                         AxisValue;                                         // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(PAWN_Avatar_C_InpAxisEvt_MenuNavAxis_Y_K2Node_InputAxisEvent_17) == 0x000004, "Wrong alignment on PAWN_Avatar_C_InpAxisEvt_MenuNavAxis_Y_K2Node_InputAxisEvent_17");
static_assert(sizeof(PAWN_Avatar_C_InpAxisEvt_MenuNavAxis_Y_K2Node_InputAxisEvent_17) == 0x000004, "Wrong size on PAWN_Avatar_C_InpAxisEvt_MenuNavAxis_Y_K2Node_InputAxisEvent_17");
static_assert(offsetof(PAWN_Avatar_C_InpAxisEvt_MenuNavAxis_Y_K2Node_InputAxisEvent_17, AxisValue) == 0x000000, "Member 'PAWN_Avatar_C_InpAxisEvt_MenuNavAxis_Y_K2Node_InputAxisEvent_17::AxisValue' has a wrong offset!");

// Function PAWN_Avatar.PAWN_Avatar_C.InpAxisEvt_MenuNavAxis_X_K2Node_InputAxisEvent_16
// 0x0004 (0x0004 - 0x0000)
struct PAWN_Avatar_C_InpAxisEvt_MenuNavAxis_X_K2Node_InputAxisEvent_16 final
{
public:
	float                                         AxisValue;                                         // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(PAWN_Avatar_C_InpAxisEvt_MenuNavAxis_X_K2Node_InputAxisEvent_16) == 0x000004, "Wrong alignment on PAWN_Avatar_C_InpAxisEvt_MenuNavAxis_X_K2Node_InputAxisEvent_16");
static_assert(sizeof(PAWN_Avatar_C_InpAxisEvt_MenuNavAxis_X_K2Node_InputAxisEvent_16) == 0x000004, "Wrong size on PAWN_Avatar_C_InpAxisEvt_MenuNavAxis_X_K2Node_InputAxisEvent_16");
static_assert(offsetof(PAWN_Avatar_C_InpAxisEvt_MenuNavAxis_X_K2Node_InputAxisEvent_16, AxisValue) == 0x000000, "Member 'PAWN_Avatar_C_InpAxisEvt_MenuNavAxis_X_K2Node_InputAxisEvent_16::AxisValue' has a wrong offset!");

// Function PAWN_Avatar.PAWN_Avatar_C.InpAxisEvt_Locked_LookPitch_K2Node_InputAxisEvent_16
// 0x0004 (0x0004 - 0x0000)
struct PAWN_Avatar_C_InpAxisEvt_Locked_LookPitch_K2Node_InputAxisEvent_16 final
{
public:
	float                                         AxisValue;                                         // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(PAWN_Avatar_C_InpAxisEvt_Locked_LookPitch_K2Node_InputAxisEvent_16) == 0x000004, "Wrong alignment on PAWN_Avatar_C_InpAxisEvt_Locked_LookPitch_K2Node_InputAxisEvent_16");
static_assert(sizeof(PAWN_Avatar_C_InpAxisEvt_Locked_LookPitch_K2Node_InputAxisEvent_16) == 0x000004, "Wrong size on PAWN_Avatar_C_InpAxisEvt_Locked_LookPitch_K2Node_InputAxisEvent_16");
static_assert(offsetof(PAWN_Avatar_C_InpAxisEvt_Locked_LookPitch_K2Node_InputAxisEvent_16, AxisValue) == 0x000000, "Member 'PAWN_Avatar_C_InpAxisEvt_Locked_LookPitch_K2Node_InputAxisEvent_16::AxisValue' has a wrong offset!");

// Function PAWN_Avatar.PAWN_Avatar_C.InpAxisEvt_Locked_LookYaw_K2Node_InputAxisEvent_15
// 0x0004 (0x0004 - 0x0000)
struct PAWN_Avatar_C_InpAxisEvt_Locked_LookYaw_K2Node_InputAxisEvent_15 final
{
public:
	float                                         AxisValue;                                         // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(PAWN_Avatar_C_InpAxisEvt_Locked_LookYaw_K2Node_InputAxisEvent_15) == 0x000004, "Wrong alignment on PAWN_Avatar_C_InpAxisEvt_Locked_LookYaw_K2Node_InputAxisEvent_15");
static_assert(sizeof(PAWN_Avatar_C_InpAxisEvt_Locked_LookYaw_K2Node_InputAxisEvent_15) == 0x000004, "Wrong size on PAWN_Avatar_C_InpAxisEvt_Locked_LookYaw_K2Node_InputAxisEvent_15");
static_assert(offsetof(PAWN_Avatar_C_InpAxisEvt_Locked_LookYaw_K2Node_InputAxisEvent_15, AxisValue) == 0x000000, "Member 'PAWN_Avatar_C_InpAxisEvt_Locked_LookYaw_K2Node_InputAxisEvent_15::AxisValue' has a wrong offset!");

// Function PAWN_Avatar.PAWN_Avatar_C.InpAxisEvt_Gamepad_Cyber_MoveAxisX_K2Node_InputAxisEvent_14
// 0x0004 (0x0004 - 0x0000)
struct PAWN_Avatar_C_InpAxisEvt_Gamepad_Cyber_MoveAxisX_K2Node_InputAxisEvent_14 final
{
public:
	float                                         AxisValue;                                         // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(PAWN_Avatar_C_InpAxisEvt_Gamepad_Cyber_MoveAxisX_K2Node_InputAxisEvent_14) == 0x000004, "Wrong alignment on PAWN_Avatar_C_InpAxisEvt_Gamepad_Cyber_MoveAxisX_K2Node_InputAxisEvent_14");
static_assert(sizeof(PAWN_Avatar_C_InpAxisEvt_Gamepad_Cyber_MoveAxisX_K2Node_InputAxisEvent_14) == 0x000004, "Wrong size on PAWN_Avatar_C_InpAxisEvt_Gamepad_Cyber_MoveAxisX_K2Node_InputAxisEvent_14");
static_assert(offsetof(PAWN_Avatar_C_InpAxisEvt_Gamepad_Cyber_MoveAxisX_K2Node_InputAxisEvent_14, AxisValue) == 0x000000, "Member 'PAWN_Avatar_C_InpAxisEvt_Gamepad_Cyber_MoveAxisX_K2Node_InputAxisEvent_14::AxisValue' has a wrong offset!");

// Function PAWN_Avatar.PAWN_Avatar_C.InpAxisEvt_Gamepad_Cyber_MoveAxisY_K2Node_InputAxisEvent_13
// 0x0004 (0x0004 - 0x0000)
struct PAWN_Avatar_C_InpAxisEvt_Gamepad_Cyber_MoveAxisY_K2Node_InputAxisEvent_13 final
{
public:
	float                                         AxisValue;                                         // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(PAWN_Avatar_C_InpAxisEvt_Gamepad_Cyber_MoveAxisY_K2Node_InputAxisEvent_13) == 0x000004, "Wrong alignment on PAWN_Avatar_C_InpAxisEvt_Gamepad_Cyber_MoveAxisY_K2Node_InputAxisEvent_13");
static_assert(sizeof(PAWN_Avatar_C_InpAxisEvt_Gamepad_Cyber_MoveAxisY_K2Node_InputAxisEvent_13) == 0x000004, "Wrong size on PAWN_Avatar_C_InpAxisEvt_Gamepad_Cyber_MoveAxisY_K2Node_InputAxisEvent_13");
static_assert(offsetof(PAWN_Avatar_C_InpAxisEvt_Gamepad_Cyber_MoveAxisY_K2Node_InputAxisEvent_13, AxisValue) == 0x000000, "Member 'PAWN_Avatar_C_InpAxisEvt_Gamepad_Cyber_MoveAxisY_K2Node_InputAxisEvent_13::AxisValue' has a wrong offset!");

// Function PAWN_Avatar.PAWN_Avatar_C.InpAxisEvt_Gamepad_LookPitch_K2Node_InputAxisEvent_12
// 0x0004 (0x0004 - 0x0000)
struct PAWN_Avatar_C_InpAxisEvt_Gamepad_LookPitch_K2Node_InputAxisEvent_12 final
{
public:
	float                                         AxisValue;                                         // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(PAWN_Avatar_C_InpAxisEvt_Gamepad_LookPitch_K2Node_InputAxisEvent_12) == 0x000004, "Wrong alignment on PAWN_Avatar_C_InpAxisEvt_Gamepad_LookPitch_K2Node_InputAxisEvent_12");
static_assert(sizeof(PAWN_Avatar_C_InpAxisEvt_Gamepad_LookPitch_K2Node_InputAxisEvent_12) == 0x000004, "Wrong size on PAWN_Avatar_C_InpAxisEvt_Gamepad_LookPitch_K2Node_InputAxisEvent_12");
static_assert(offsetof(PAWN_Avatar_C_InpAxisEvt_Gamepad_LookPitch_K2Node_InputAxisEvent_12, AxisValue) == 0x000000, "Member 'PAWN_Avatar_C_InpAxisEvt_Gamepad_LookPitch_K2Node_InputAxisEvent_12::AxisValue' has a wrong offset!");

// Function PAWN_Avatar.PAWN_Avatar_C.InpAxisEvt_Gamepad_LookYaw_K2Node_InputAxisEvent_11
// 0x0004 (0x0004 - 0x0000)
struct PAWN_Avatar_C_InpAxisEvt_Gamepad_LookYaw_K2Node_InputAxisEvent_11 final
{
public:
	float                                         AxisValue;                                         // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(PAWN_Avatar_C_InpAxisEvt_Gamepad_LookYaw_K2Node_InputAxisEvent_11) == 0x000004, "Wrong alignment on PAWN_Avatar_C_InpAxisEvt_Gamepad_LookYaw_K2Node_InputAxisEvent_11");
static_assert(sizeof(PAWN_Avatar_C_InpAxisEvt_Gamepad_LookYaw_K2Node_InputAxisEvent_11) == 0x000004, "Wrong size on PAWN_Avatar_C_InpAxisEvt_Gamepad_LookYaw_K2Node_InputAxisEvent_11");
static_assert(offsetof(PAWN_Avatar_C_InpAxisEvt_Gamepad_LookYaw_K2Node_InputAxisEvent_11, AxisValue) == 0x000000, "Member 'PAWN_Avatar_C_InpAxisEvt_Gamepad_LookYaw_K2Node_InputAxisEvent_11::AxisValue' has a wrong offset!");

// Function PAWN_Avatar.PAWN_Avatar_C.BndEvt__COMP_VoxelCullableNavAgent_K2Node_ComponentBoundEvent_0_CullableVisibilitySignature__DelegateSignature
// 0x0001 (0x0001 - 0x0000)
struct PAWN_Avatar_C_BndEvt__COMP_VoxelCullableNavAgent_K2Node_ComponentBoundEvent_0_CullableVisibilitySignature__DelegateSignature final
{
public:
	bool                                          bVisibleState;                                     // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(PAWN_Avatar_C_BndEvt__COMP_VoxelCullableNavAgent_K2Node_ComponentBoundEvent_0_CullableVisibilitySignature__DelegateSignature) == 0x000001, "Wrong alignment on PAWN_Avatar_C_BndEvt__COMP_VoxelCullableNavAgent_K2Node_ComponentBoundEvent_0_CullableVisibilitySignature__DelegateSignature");
static_assert(sizeof(PAWN_Avatar_C_BndEvt__COMP_VoxelCullableNavAgent_K2Node_ComponentBoundEvent_0_CullableVisibilitySignature__DelegateSignature) == 0x000001, "Wrong size on PAWN_Avatar_C_BndEvt__COMP_VoxelCullableNavAgent_K2Node_ComponentBoundEvent_0_CullableVisibilitySignature__DelegateSignature");
static_assert(offsetof(PAWN_Avatar_C_BndEvt__COMP_VoxelCullableNavAgent_K2Node_ComponentBoundEvent_0_CullableVisibilitySignature__DelegateSignature, bVisibleState) == 0x000000, "Member 'PAWN_Avatar_C_BndEvt__COMP_VoxelCullableNavAgent_K2Node_ComponentBoundEvent_0_CullableVisibilitySignature__DelegateSignature::bVisibleState' has a wrong offset!");

// Function PAWN_Avatar.PAWN_Avatar_C.BndEvt__CapsuleComponent_K2Node_ComponentBoundEvent_0_ComponentHitSignature__DelegateSignature
// 0x00B0 (0x00B0 - 0x0000)
struct PAWN_Avatar_C_BndEvt__CapsuleComponent_K2Node_ComponentBoundEvent_0_ComponentHitSignature__DelegateSignature final
{
public:
	class UPrimitiveComponent*                    HitComponent;                                      // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 OtherActor;                                        // 0x0008(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UPrimitiveComponent*                    OtherComp;                                         // 0x0010(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                NormalImpulse;                                     // 0x0018(0x000C)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FHitResult                             Hit;                                               // 0x0024(0x0088)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, ContainsInstancedReference)
};
static_assert(alignof(PAWN_Avatar_C_BndEvt__CapsuleComponent_K2Node_ComponentBoundEvent_0_ComponentHitSignature__DelegateSignature) == 0x000008, "Wrong alignment on PAWN_Avatar_C_BndEvt__CapsuleComponent_K2Node_ComponentBoundEvent_0_ComponentHitSignature__DelegateSignature");
static_assert(sizeof(PAWN_Avatar_C_BndEvt__CapsuleComponent_K2Node_ComponentBoundEvent_0_ComponentHitSignature__DelegateSignature) == 0x0000B0, "Wrong size on PAWN_Avatar_C_BndEvt__CapsuleComponent_K2Node_ComponentBoundEvent_0_ComponentHitSignature__DelegateSignature");
static_assert(offsetof(PAWN_Avatar_C_BndEvt__CapsuleComponent_K2Node_ComponentBoundEvent_0_ComponentHitSignature__DelegateSignature, HitComponent) == 0x000000, "Member 'PAWN_Avatar_C_BndEvt__CapsuleComponent_K2Node_ComponentBoundEvent_0_ComponentHitSignature__DelegateSignature::HitComponent' has a wrong offset!");
static_assert(offsetof(PAWN_Avatar_C_BndEvt__CapsuleComponent_K2Node_ComponentBoundEvent_0_ComponentHitSignature__DelegateSignature, OtherActor) == 0x000008, "Member 'PAWN_Avatar_C_BndEvt__CapsuleComponent_K2Node_ComponentBoundEvent_0_ComponentHitSignature__DelegateSignature::OtherActor' has a wrong offset!");
static_assert(offsetof(PAWN_Avatar_C_BndEvt__CapsuleComponent_K2Node_ComponentBoundEvent_0_ComponentHitSignature__DelegateSignature, OtherComp) == 0x000010, "Member 'PAWN_Avatar_C_BndEvt__CapsuleComponent_K2Node_ComponentBoundEvent_0_ComponentHitSignature__DelegateSignature::OtherComp' has a wrong offset!");
static_assert(offsetof(PAWN_Avatar_C_BndEvt__CapsuleComponent_K2Node_ComponentBoundEvent_0_ComponentHitSignature__DelegateSignature, NormalImpulse) == 0x000018, "Member 'PAWN_Avatar_C_BndEvt__CapsuleComponent_K2Node_ComponentBoundEvent_0_ComponentHitSignature__DelegateSignature::NormalImpulse' has a wrong offset!");
static_assert(offsetof(PAWN_Avatar_C_BndEvt__CapsuleComponent_K2Node_ComponentBoundEvent_0_ComponentHitSignature__DelegateSignature, Hit) == 0x000024, "Member 'PAWN_Avatar_C_BndEvt__CapsuleComponent_K2Node_ComponentBoundEvent_0_ComponentHitSignature__DelegateSignature::Hit' has a wrong offset!");

// Function PAWN_Avatar.PAWN_Avatar_C.InpActEvt_MenuNav_Down_K2Node_InputActionEvent_0
// 0x0018 (0x0018 - 0x0000)
struct PAWN_Avatar_C_InpActEvt_MenuNav_Down_K2Node_InputActionEvent_0 final
{
public:
	struct FKey                                   Key;                                               // 0x0000(0x0018)(BlueprintVisible, BlueprintReadOnly, Parm, HasGetValueTypeHash)
};
static_assert(alignof(PAWN_Avatar_C_InpActEvt_MenuNav_Down_K2Node_InputActionEvent_0) == 0x000008, "Wrong alignment on PAWN_Avatar_C_InpActEvt_MenuNav_Down_K2Node_InputActionEvent_0");
static_assert(sizeof(PAWN_Avatar_C_InpActEvt_MenuNav_Down_K2Node_InputActionEvent_0) == 0x000018, "Wrong size on PAWN_Avatar_C_InpActEvt_MenuNav_Down_K2Node_InputActionEvent_0");
static_assert(offsetof(PAWN_Avatar_C_InpActEvt_MenuNav_Down_K2Node_InputActionEvent_0, Key) == 0x000000, "Member 'PAWN_Avatar_C_InpActEvt_MenuNav_Down_K2Node_InputActionEvent_0::Key' has a wrong offset!");

// Function PAWN_Avatar.PAWN_Avatar_C.InpActEvt_MenuNav_Down_K2Node_InputActionEvent_1
// 0x0018 (0x0018 - 0x0000)
struct PAWN_Avatar_C_InpActEvt_MenuNav_Down_K2Node_InputActionEvent_1 final
{
public:
	struct FKey                                   Key;                                               // 0x0000(0x0018)(BlueprintVisible, BlueprintReadOnly, Parm, HasGetValueTypeHash)
};
static_assert(alignof(PAWN_Avatar_C_InpActEvt_MenuNav_Down_K2Node_InputActionEvent_1) == 0x000008, "Wrong alignment on PAWN_Avatar_C_InpActEvt_MenuNav_Down_K2Node_InputActionEvent_1");
static_assert(sizeof(PAWN_Avatar_C_InpActEvt_MenuNav_Down_K2Node_InputActionEvent_1) == 0x000018, "Wrong size on PAWN_Avatar_C_InpActEvt_MenuNav_Down_K2Node_InputActionEvent_1");
static_assert(offsetof(PAWN_Avatar_C_InpActEvt_MenuNav_Down_K2Node_InputActionEvent_1, Key) == 0x000000, "Member 'PAWN_Avatar_C_InpActEvt_MenuNav_Down_K2Node_InputActionEvent_1::Key' has a wrong offset!");

// Function PAWN_Avatar.PAWN_Avatar_C.InpActEvt_MenuNav_Up_K2Node_InputActionEvent_2
// 0x0018 (0x0018 - 0x0000)
struct PAWN_Avatar_C_InpActEvt_MenuNav_Up_K2Node_InputActionEvent_2 final
{
public:
	struct FKey                                   Key;                                               // 0x0000(0x0018)(BlueprintVisible, BlueprintReadOnly, Parm, HasGetValueTypeHash)
};
static_assert(alignof(PAWN_Avatar_C_InpActEvt_MenuNav_Up_K2Node_InputActionEvent_2) == 0x000008, "Wrong alignment on PAWN_Avatar_C_InpActEvt_MenuNav_Up_K2Node_InputActionEvent_2");
static_assert(sizeof(PAWN_Avatar_C_InpActEvt_MenuNav_Up_K2Node_InputActionEvent_2) == 0x000018, "Wrong size on PAWN_Avatar_C_InpActEvt_MenuNav_Up_K2Node_InputActionEvent_2");
static_assert(offsetof(PAWN_Avatar_C_InpActEvt_MenuNav_Up_K2Node_InputActionEvent_2, Key) == 0x000000, "Member 'PAWN_Avatar_C_InpActEvt_MenuNav_Up_K2Node_InputActionEvent_2::Key' has a wrong offset!");

// Function PAWN_Avatar.PAWN_Avatar_C.InpActEvt_MenuNav_Up_K2Node_InputActionEvent_3
// 0x0018 (0x0018 - 0x0000)
struct PAWN_Avatar_C_InpActEvt_MenuNav_Up_K2Node_InputActionEvent_3 final
{
public:
	struct FKey                                   Key;                                               // 0x0000(0x0018)(BlueprintVisible, BlueprintReadOnly, Parm, HasGetValueTypeHash)
};
static_assert(alignof(PAWN_Avatar_C_InpActEvt_MenuNav_Up_K2Node_InputActionEvent_3) == 0x000008, "Wrong alignment on PAWN_Avatar_C_InpActEvt_MenuNav_Up_K2Node_InputActionEvent_3");
static_assert(sizeof(PAWN_Avatar_C_InpActEvt_MenuNav_Up_K2Node_InputActionEvent_3) == 0x000018, "Wrong size on PAWN_Avatar_C_InpActEvt_MenuNav_Up_K2Node_InputActionEvent_3");
static_assert(offsetof(PAWN_Avatar_C_InpActEvt_MenuNav_Up_K2Node_InputActionEvent_3, Key) == 0x000000, "Member 'PAWN_Avatar_C_InpActEvt_MenuNav_Up_K2Node_InputActionEvent_3::Key' has a wrong offset!");

// Function PAWN_Avatar.PAWN_Avatar_C.InpActEvt_MenuNav_Right_K2Node_InputActionEvent_4
// 0x0018 (0x0018 - 0x0000)
struct PAWN_Avatar_C_InpActEvt_MenuNav_Right_K2Node_InputActionEvent_4 final
{
public:
	struct FKey                                   Key;                                               // 0x0000(0x0018)(BlueprintVisible, BlueprintReadOnly, Parm, HasGetValueTypeHash)
};
static_assert(alignof(PAWN_Avatar_C_InpActEvt_MenuNav_Right_K2Node_InputActionEvent_4) == 0x000008, "Wrong alignment on PAWN_Avatar_C_InpActEvt_MenuNav_Right_K2Node_InputActionEvent_4");
static_assert(sizeof(PAWN_Avatar_C_InpActEvt_MenuNav_Right_K2Node_InputActionEvent_4) == 0x000018, "Wrong size on PAWN_Avatar_C_InpActEvt_MenuNav_Right_K2Node_InputActionEvent_4");
static_assert(offsetof(PAWN_Avatar_C_InpActEvt_MenuNav_Right_K2Node_InputActionEvent_4, Key) == 0x000000, "Member 'PAWN_Avatar_C_InpActEvt_MenuNav_Right_K2Node_InputActionEvent_4::Key' has a wrong offset!");

// Function PAWN_Avatar.PAWN_Avatar_C.InpActEvt_MenuNav_Right_K2Node_InputActionEvent_5
// 0x0018 (0x0018 - 0x0000)
struct PAWN_Avatar_C_InpActEvt_MenuNav_Right_K2Node_InputActionEvent_5 final
{
public:
	struct FKey                                   Key;                                               // 0x0000(0x0018)(BlueprintVisible, BlueprintReadOnly, Parm, HasGetValueTypeHash)
};
static_assert(alignof(PAWN_Avatar_C_InpActEvt_MenuNav_Right_K2Node_InputActionEvent_5) == 0x000008, "Wrong alignment on PAWN_Avatar_C_InpActEvt_MenuNav_Right_K2Node_InputActionEvent_5");
static_assert(sizeof(PAWN_Avatar_C_InpActEvt_MenuNav_Right_K2Node_InputActionEvent_5) == 0x000018, "Wrong size on PAWN_Avatar_C_InpActEvt_MenuNav_Right_K2Node_InputActionEvent_5");
static_assert(offsetof(PAWN_Avatar_C_InpActEvt_MenuNav_Right_K2Node_InputActionEvent_5, Key) == 0x000000, "Member 'PAWN_Avatar_C_InpActEvt_MenuNav_Right_K2Node_InputActionEvent_5::Key' has a wrong offset!");

// Function PAWN_Avatar.PAWN_Avatar_C.InpActEvt_MenuNav_Left_K2Node_InputActionEvent_6
// 0x0018 (0x0018 - 0x0000)
struct PAWN_Avatar_C_InpActEvt_MenuNav_Left_K2Node_InputActionEvent_6 final
{
public:
	struct FKey                                   Key;                                               // 0x0000(0x0018)(BlueprintVisible, BlueprintReadOnly, Parm, HasGetValueTypeHash)
};
static_assert(alignof(PAWN_Avatar_C_InpActEvt_MenuNav_Left_K2Node_InputActionEvent_6) == 0x000008, "Wrong alignment on PAWN_Avatar_C_InpActEvt_MenuNav_Left_K2Node_InputActionEvent_6");
static_assert(sizeof(PAWN_Avatar_C_InpActEvt_MenuNav_Left_K2Node_InputActionEvent_6) == 0x000018, "Wrong size on PAWN_Avatar_C_InpActEvt_MenuNav_Left_K2Node_InputActionEvent_6");
static_assert(offsetof(PAWN_Avatar_C_InpActEvt_MenuNav_Left_K2Node_InputActionEvent_6, Key) == 0x000000, "Member 'PAWN_Avatar_C_InpActEvt_MenuNav_Left_K2Node_InputActionEvent_6::Key' has a wrong offset!");

// Function PAWN_Avatar.PAWN_Avatar_C.InpActEvt_MenuNav_Left_K2Node_InputActionEvent_7
// 0x0018 (0x0018 - 0x0000)
struct PAWN_Avatar_C_InpActEvt_MenuNav_Left_K2Node_InputActionEvent_7 final
{
public:
	struct FKey                                   Key;                                               // 0x0000(0x0018)(BlueprintVisible, BlueprintReadOnly, Parm, HasGetValueTypeHash)
};
static_assert(alignof(PAWN_Avatar_C_InpActEvt_MenuNav_Left_K2Node_InputActionEvent_7) == 0x000008, "Wrong alignment on PAWN_Avatar_C_InpActEvt_MenuNav_Left_K2Node_InputActionEvent_7");
static_assert(sizeof(PAWN_Avatar_C_InpActEvt_MenuNav_Left_K2Node_InputActionEvent_7) == 0x000018, "Wrong size on PAWN_Avatar_C_InpActEvt_MenuNav_Left_K2Node_InputActionEvent_7");
static_assert(offsetof(PAWN_Avatar_C_InpActEvt_MenuNav_Left_K2Node_InputActionEvent_7, Key) == 0x000000, "Member 'PAWN_Avatar_C_InpActEvt_MenuNav_Left_K2Node_InputActionEvent_7::Key' has a wrong offset!");

// Function PAWN_Avatar.PAWN_Avatar_C.InpActEvt_Cyber_MoveBackward_K2Node_InputActionEvent_8
// 0x0018 (0x0018 - 0x0000)
struct PAWN_Avatar_C_InpActEvt_Cyber_MoveBackward_K2Node_InputActionEvent_8 final
{
public:
	struct FKey                                   Key;                                               // 0x0000(0x0018)(BlueprintVisible, BlueprintReadOnly, Parm, HasGetValueTypeHash)
};
static_assert(alignof(PAWN_Avatar_C_InpActEvt_Cyber_MoveBackward_K2Node_InputActionEvent_8) == 0x000008, "Wrong alignment on PAWN_Avatar_C_InpActEvt_Cyber_MoveBackward_K2Node_InputActionEvent_8");
static_assert(sizeof(PAWN_Avatar_C_InpActEvt_Cyber_MoveBackward_K2Node_InputActionEvent_8) == 0x000018, "Wrong size on PAWN_Avatar_C_InpActEvt_Cyber_MoveBackward_K2Node_InputActionEvent_8");
static_assert(offsetof(PAWN_Avatar_C_InpActEvt_Cyber_MoveBackward_K2Node_InputActionEvent_8, Key) == 0x000000, "Member 'PAWN_Avatar_C_InpActEvt_Cyber_MoveBackward_K2Node_InputActionEvent_8::Key' has a wrong offset!");

// Function PAWN_Avatar.PAWN_Avatar_C.InpActEvt_Cyber_MoveBackward_K2Node_InputActionEvent_9
// 0x0018 (0x0018 - 0x0000)
struct PAWN_Avatar_C_InpActEvt_Cyber_MoveBackward_K2Node_InputActionEvent_9 final
{
public:
	struct FKey                                   Key;                                               // 0x0000(0x0018)(BlueprintVisible, BlueprintReadOnly, Parm, HasGetValueTypeHash)
};
static_assert(alignof(PAWN_Avatar_C_InpActEvt_Cyber_MoveBackward_K2Node_InputActionEvent_9) == 0x000008, "Wrong alignment on PAWN_Avatar_C_InpActEvt_Cyber_MoveBackward_K2Node_InputActionEvent_9");
static_assert(sizeof(PAWN_Avatar_C_InpActEvt_Cyber_MoveBackward_K2Node_InputActionEvent_9) == 0x000018, "Wrong size on PAWN_Avatar_C_InpActEvt_Cyber_MoveBackward_K2Node_InputActionEvent_9");
static_assert(offsetof(PAWN_Avatar_C_InpActEvt_Cyber_MoveBackward_K2Node_InputActionEvent_9, Key) == 0x000000, "Member 'PAWN_Avatar_C_InpActEvt_Cyber_MoveBackward_K2Node_InputActionEvent_9::Key' has a wrong offset!");

// Function PAWN_Avatar.PAWN_Avatar_C.InpActEvt_Cyber_MoveLeft_K2Node_InputActionEvent_10
// 0x0018 (0x0018 - 0x0000)
struct PAWN_Avatar_C_InpActEvt_Cyber_MoveLeft_K2Node_InputActionEvent_10 final
{
public:
	struct FKey                                   Key;                                               // 0x0000(0x0018)(BlueprintVisible, BlueprintReadOnly, Parm, HasGetValueTypeHash)
};
static_assert(alignof(PAWN_Avatar_C_InpActEvt_Cyber_MoveLeft_K2Node_InputActionEvent_10) == 0x000008, "Wrong alignment on PAWN_Avatar_C_InpActEvt_Cyber_MoveLeft_K2Node_InputActionEvent_10");
static_assert(sizeof(PAWN_Avatar_C_InpActEvt_Cyber_MoveLeft_K2Node_InputActionEvent_10) == 0x000018, "Wrong size on PAWN_Avatar_C_InpActEvt_Cyber_MoveLeft_K2Node_InputActionEvent_10");
static_assert(offsetof(PAWN_Avatar_C_InpActEvt_Cyber_MoveLeft_K2Node_InputActionEvent_10, Key) == 0x000000, "Member 'PAWN_Avatar_C_InpActEvt_Cyber_MoveLeft_K2Node_InputActionEvent_10::Key' has a wrong offset!");

// Function PAWN_Avatar.PAWN_Avatar_C.InpActEvt_Cyber_MoveLeft_K2Node_InputActionEvent_11
// 0x0018 (0x0018 - 0x0000)
struct PAWN_Avatar_C_InpActEvt_Cyber_MoveLeft_K2Node_InputActionEvent_11 final
{
public:
	struct FKey                                   Key;                                               // 0x0000(0x0018)(BlueprintVisible, BlueprintReadOnly, Parm, HasGetValueTypeHash)
};
static_assert(alignof(PAWN_Avatar_C_InpActEvt_Cyber_MoveLeft_K2Node_InputActionEvent_11) == 0x000008, "Wrong alignment on PAWN_Avatar_C_InpActEvt_Cyber_MoveLeft_K2Node_InputActionEvent_11");
static_assert(sizeof(PAWN_Avatar_C_InpActEvt_Cyber_MoveLeft_K2Node_InputActionEvent_11) == 0x000018, "Wrong size on PAWN_Avatar_C_InpActEvt_Cyber_MoveLeft_K2Node_InputActionEvent_11");
static_assert(offsetof(PAWN_Avatar_C_InpActEvt_Cyber_MoveLeft_K2Node_InputActionEvent_11, Key) == 0x000000, "Member 'PAWN_Avatar_C_InpActEvt_Cyber_MoveLeft_K2Node_InputActionEvent_11::Key' has a wrong offset!");

// Function PAWN_Avatar.PAWN_Avatar_C.InpActEvt_MenuNav_Alt1_K2Node_InputActionEvent_12
// 0x0018 (0x0018 - 0x0000)
struct PAWN_Avatar_C_InpActEvt_MenuNav_Alt1_K2Node_InputActionEvent_12 final
{
public:
	struct FKey                                   Key;                                               // 0x0000(0x0018)(BlueprintVisible, BlueprintReadOnly, Parm, HasGetValueTypeHash)
};
static_assert(alignof(PAWN_Avatar_C_InpActEvt_MenuNav_Alt1_K2Node_InputActionEvent_12) == 0x000008, "Wrong alignment on PAWN_Avatar_C_InpActEvt_MenuNav_Alt1_K2Node_InputActionEvent_12");
static_assert(sizeof(PAWN_Avatar_C_InpActEvt_MenuNav_Alt1_K2Node_InputActionEvent_12) == 0x000018, "Wrong size on PAWN_Avatar_C_InpActEvt_MenuNav_Alt1_K2Node_InputActionEvent_12");
static_assert(offsetof(PAWN_Avatar_C_InpActEvt_MenuNav_Alt1_K2Node_InputActionEvent_12, Key) == 0x000000, "Member 'PAWN_Avatar_C_InpActEvt_MenuNav_Alt1_K2Node_InputActionEvent_12::Key' has a wrong offset!");

// Function PAWN_Avatar.PAWN_Avatar_C.InpActEvt_MenuNav_Alt1_K2Node_InputActionEvent_13
// 0x0018 (0x0018 - 0x0000)
struct PAWN_Avatar_C_InpActEvt_MenuNav_Alt1_K2Node_InputActionEvent_13 final
{
public:
	struct FKey                                   Key;                                               // 0x0000(0x0018)(BlueprintVisible, BlueprintReadOnly, Parm, HasGetValueTypeHash)
};
static_assert(alignof(PAWN_Avatar_C_InpActEvt_MenuNav_Alt1_K2Node_InputActionEvent_13) == 0x000008, "Wrong alignment on PAWN_Avatar_C_InpActEvt_MenuNav_Alt1_K2Node_InputActionEvent_13");
static_assert(sizeof(PAWN_Avatar_C_InpActEvt_MenuNav_Alt1_K2Node_InputActionEvent_13) == 0x000018, "Wrong size on PAWN_Avatar_C_InpActEvt_MenuNav_Alt1_K2Node_InputActionEvent_13");
static_assert(offsetof(PAWN_Avatar_C_InpActEvt_MenuNav_Alt1_K2Node_InputActionEvent_13, Key) == 0x000000, "Member 'PAWN_Avatar_C_InpActEvt_MenuNav_Alt1_K2Node_InputActionEvent_13::Key' has a wrong offset!");

// Function PAWN_Avatar.PAWN_Avatar_C.InpActEvt_MenuNav_Alt2_K2Node_InputActionEvent_14
// 0x0018 (0x0018 - 0x0000)
struct PAWN_Avatar_C_InpActEvt_MenuNav_Alt2_K2Node_InputActionEvent_14 final
{
public:
	struct FKey                                   Key;                                               // 0x0000(0x0018)(BlueprintVisible, BlueprintReadOnly, Parm, HasGetValueTypeHash)
};
static_assert(alignof(PAWN_Avatar_C_InpActEvt_MenuNav_Alt2_K2Node_InputActionEvent_14) == 0x000008, "Wrong alignment on PAWN_Avatar_C_InpActEvt_MenuNav_Alt2_K2Node_InputActionEvent_14");
static_assert(sizeof(PAWN_Avatar_C_InpActEvt_MenuNav_Alt2_K2Node_InputActionEvent_14) == 0x000018, "Wrong size on PAWN_Avatar_C_InpActEvt_MenuNav_Alt2_K2Node_InputActionEvent_14");
static_assert(offsetof(PAWN_Avatar_C_InpActEvt_MenuNav_Alt2_K2Node_InputActionEvent_14, Key) == 0x000000, "Member 'PAWN_Avatar_C_InpActEvt_MenuNav_Alt2_K2Node_InputActionEvent_14::Key' has a wrong offset!");

// Function PAWN_Avatar.PAWN_Avatar_C.InpActEvt_MenuNav_Alt2_K2Node_InputActionEvent_15
// 0x0018 (0x0018 - 0x0000)
struct PAWN_Avatar_C_InpActEvt_MenuNav_Alt2_K2Node_InputActionEvent_15 final
{
public:
	struct FKey                                   Key;                                               // 0x0000(0x0018)(BlueprintVisible, BlueprintReadOnly, Parm, HasGetValueTypeHash)
};
static_assert(alignof(PAWN_Avatar_C_InpActEvt_MenuNav_Alt2_K2Node_InputActionEvent_15) == 0x000008, "Wrong alignment on PAWN_Avatar_C_InpActEvt_MenuNav_Alt2_K2Node_InputActionEvent_15");
static_assert(sizeof(PAWN_Avatar_C_InpActEvt_MenuNav_Alt2_K2Node_InputActionEvent_15) == 0x000018, "Wrong size on PAWN_Avatar_C_InpActEvt_MenuNav_Alt2_K2Node_InputActionEvent_15");
static_assert(offsetof(PAWN_Avatar_C_InpActEvt_MenuNav_Alt2_K2Node_InputActionEvent_15, Key) == 0x000000, "Member 'PAWN_Avatar_C_InpActEvt_MenuNav_Alt2_K2Node_InputActionEvent_15::Key' has a wrong offset!");

// Function PAWN_Avatar.PAWN_Avatar_C.InpActEvt_PageUp_K2Node_InputKeyEvent_0
// 0x0018 (0x0018 - 0x0000)
struct PAWN_Avatar_C_InpActEvt_PageUp_K2Node_InputKeyEvent_0 final
{
public:
	struct FKey                                   Key;                                               // 0x0000(0x0018)(BlueprintVisible, BlueprintReadOnly, Parm, HasGetValueTypeHash)
};
static_assert(alignof(PAWN_Avatar_C_InpActEvt_PageUp_K2Node_InputKeyEvent_0) == 0x000008, "Wrong alignment on PAWN_Avatar_C_InpActEvt_PageUp_K2Node_InputKeyEvent_0");
static_assert(sizeof(PAWN_Avatar_C_InpActEvt_PageUp_K2Node_InputKeyEvent_0) == 0x000018, "Wrong size on PAWN_Avatar_C_InpActEvt_PageUp_K2Node_InputKeyEvent_0");
static_assert(offsetof(PAWN_Avatar_C_InpActEvt_PageUp_K2Node_InputKeyEvent_0, Key) == 0x000000, "Member 'PAWN_Avatar_C_InpActEvt_PageUp_K2Node_InputKeyEvent_0::Key' has a wrong offset!");

// Function PAWN_Avatar.PAWN_Avatar_C.InpActEvt_Gamepad_MenuNav_Back_K2Node_InputActionEvent_16
// 0x0018 (0x0018 - 0x0000)
struct PAWN_Avatar_C_InpActEvt_Gamepad_MenuNav_Back_K2Node_InputActionEvent_16 final
{
public:
	struct FKey                                   Key;                                               // 0x0000(0x0018)(BlueprintVisible, BlueprintReadOnly, Parm, HasGetValueTypeHash)
};
static_assert(alignof(PAWN_Avatar_C_InpActEvt_Gamepad_MenuNav_Back_K2Node_InputActionEvent_16) == 0x000008, "Wrong alignment on PAWN_Avatar_C_InpActEvt_Gamepad_MenuNav_Back_K2Node_InputActionEvent_16");
static_assert(sizeof(PAWN_Avatar_C_InpActEvt_Gamepad_MenuNav_Back_K2Node_InputActionEvent_16) == 0x000018, "Wrong size on PAWN_Avatar_C_InpActEvt_Gamepad_MenuNav_Back_K2Node_InputActionEvent_16");
static_assert(offsetof(PAWN_Avatar_C_InpActEvt_Gamepad_MenuNav_Back_K2Node_InputActionEvent_16, Key) == 0x000000, "Member 'PAWN_Avatar_C_InpActEvt_Gamepad_MenuNav_Back_K2Node_InputActionEvent_16::Key' has a wrong offset!");

// Function PAWN_Avatar.PAWN_Avatar_C.InpActEvt_Gamepad_MenuNav_Back_K2Node_InputActionEvent_17
// 0x0018 (0x0018 - 0x0000)
struct PAWN_Avatar_C_InpActEvt_Gamepad_MenuNav_Back_K2Node_InputActionEvent_17 final
{
public:
	struct FKey                                   Key;                                               // 0x0000(0x0018)(BlueprintVisible, BlueprintReadOnly, Parm, HasGetValueTypeHash)
};
static_assert(alignof(PAWN_Avatar_C_InpActEvt_Gamepad_MenuNav_Back_K2Node_InputActionEvent_17) == 0x000008, "Wrong alignment on PAWN_Avatar_C_InpActEvt_Gamepad_MenuNav_Back_K2Node_InputActionEvent_17");
static_assert(sizeof(PAWN_Avatar_C_InpActEvt_Gamepad_MenuNav_Back_K2Node_InputActionEvent_17) == 0x000018, "Wrong size on PAWN_Avatar_C_InpActEvt_Gamepad_MenuNav_Back_K2Node_InputActionEvent_17");
static_assert(offsetof(PAWN_Avatar_C_InpActEvt_Gamepad_MenuNav_Back_K2Node_InputActionEvent_17, Key) == 0x000000, "Member 'PAWN_Avatar_C_InpActEvt_Gamepad_MenuNav_Back_K2Node_InputActionEvent_17::Key' has a wrong offset!");

// Function PAWN_Avatar.PAWN_Avatar_C.InpActEvt_Gamepad_MenuNav_Accept_K2Node_InputActionEvent_18
// 0x0018 (0x0018 - 0x0000)
struct PAWN_Avatar_C_InpActEvt_Gamepad_MenuNav_Accept_K2Node_InputActionEvent_18 final
{
public:
	struct FKey                                   Key;                                               // 0x0000(0x0018)(BlueprintVisible, BlueprintReadOnly, Parm, HasGetValueTypeHash)
};
static_assert(alignof(PAWN_Avatar_C_InpActEvt_Gamepad_MenuNav_Accept_K2Node_InputActionEvent_18) == 0x000008, "Wrong alignment on PAWN_Avatar_C_InpActEvt_Gamepad_MenuNav_Accept_K2Node_InputActionEvent_18");
static_assert(sizeof(PAWN_Avatar_C_InpActEvt_Gamepad_MenuNav_Accept_K2Node_InputActionEvent_18) == 0x000018, "Wrong size on PAWN_Avatar_C_InpActEvt_Gamepad_MenuNav_Accept_K2Node_InputActionEvent_18");
static_assert(offsetof(PAWN_Avatar_C_InpActEvt_Gamepad_MenuNav_Accept_K2Node_InputActionEvent_18, Key) == 0x000000, "Member 'PAWN_Avatar_C_InpActEvt_Gamepad_MenuNav_Accept_K2Node_InputActionEvent_18::Key' has a wrong offset!");

// Function PAWN_Avatar.PAWN_Avatar_C.InpActEvt_Gamepad_MenuNav_Accept_K2Node_InputActionEvent_19
// 0x0018 (0x0018 - 0x0000)
struct PAWN_Avatar_C_InpActEvt_Gamepad_MenuNav_Accept_K2Node_InputActionEvent_19 final
{
public:
	struct FKey                                   Key;                                               // 0x0000(0x0018)(BlueprintVisible, BlueprintReadOnly, Parm, HasGetValueTypeHash)
};
static_assert(alignof(PAWN_Avatar_C_InpActEvt_Gamepad_MenuNav_Accept_K2Node_InputActionEvent_19) == 0x000008, "Wrong alignment on PAWN_Avatar_C_InpActEvt_Gamepad_MenuNav_Accept_K2Node_InputActionEvent_19");
static_assert(sizeof(PAWN_Avatar_C_InpActEvt_Gamepad_MenuNav_Accept_K2Node_InputActionEvent_19) == 0x000018, "Wrong size on PAWN_Avatar_C_InpActEvt_Gamepad_MenuNav_Accept_K2Node_InputActionEvent_19");
static_assert(offsetof(PAWN_Avatar_C_InpActEvt_Gamepad_MenuNav_Accept_K2Node_InputActionEvent_19, Key) == 0x000000, "Member 'PAWN_Avatar_C_InpActEvt_Gamepad_MenuNav_Accept_K2Node_InputActionEvent_19::Key' has a wrong offset!");

// Function PAWN_Avatar.PAWN_Avatar_C.InpActEvt_Gamepad_Cyber_Power_K2Node_InputActionEvent_20
// 0x0018 (0x0018 - 0x0000)
struct PAWN_Avatar_C_InpActEvt_Gamepad_Cyber_Power_K2Node_InputActionEvent_20 final
{
public:
	struct FKey                                   Key;                                               // 0x0000(0x0018)(BlueprintVisible, BlueprintReadOnly, Parm, HasGetValueTypeHash)
};
static_assert(alignof(PAWN_Avatar_C_InpActEvt_Gamepad_Cyber_Power_K2Node_InputActionEvent_20) == 0x000008, "Wrong alignment on PAWN_Avatar_C_InpActEvt_Gamepad_Cyber_Power_K2Node_InputActionEvent_20");
static_assert(sizeof(PAWN_Avatar_C_InpActEvt_Gamepad_Cyber_Power_K2Node_InputActionEvent_20) == 0x000018, "Wrong size on PAWN_Avatar_C_InpActEvt_Gamepad_Cyber_Power_K2Node_InputActionEvent_20");
static_assert(offsetof(PAWN_Avatar_C_InpActEvt_Gamepad_Cyber_Power_K2Node_InputActionEvent_20, Key) == 0x000000, "Member 'PAWN_Avatar_C_InpActEvt_Gamepad_Cyber_Power_K2Node_InputActionEvent_20::Key' has a wrong offset!");

// Function PAWN_Avatar.PAWN_Avatar_C.InpActEvt_Gamepad_Cyber_Power_K2Node_InputActionEvent_21
// 0x0018 (0x0018 - 0x0000)
struct PAWN_Avatar_C_InpActEvt_Gamepad_Cyber_Power_K2Node_InputActionEvent_21 final
{
public:
	struct FKey                                   Key;                                               // 0x0000(0x0018)(BlueprintVisible, BlueprintReadOnly, Parm, HasGetValueTypeHash)
};
static_assert(alignof(PAWN_Avatar_C_InpActEvt_Gamepad_Cyber_Power_K2Node_InputActionEvent_21) == 0x000008, "Wrong alignment on PAWN_Avatar_C_InpActEvt_Gamepad_Cyber_Power_K2Node_InputActionEvent_21");
static_assert(sizeof(PAWN_Avatar_C_InpActEvt_Gamepad_Cyber_Power_K2Node_InputActionEvent_21) == 0x000018, "Wrong size on PAWN_Avatar_C_InpActEvt_Gamepad_Cyber_Power_K2Node_InputActionEvent_21");
static_assert(offsetof(PAWN_Avatar_C_InpActEvt_Gamepad_Cyber_Power_K2Node_InputActionEvent_21, Key) == 0x000000, "Member 'PAWN_Avatar_C_InpActEvt_Gamepad_Cyber_Power_K2Node_InputActionEvent_21::Key' has a wrong offset!");

// Function PAWN_Avatar.PAWN_Avatar_C.InpActEvt_Cyber_Power_K2Node_InputActionEvent_22
// 0x0018 (0x0018 - 0x0000)
struct PAWN_Avatar_C_InpActEvt_Cyber_Power_K2Node_InputActionEvent_22 final
{
public:
	struct FKey                                   Key;                                               // 0x0000(0x0018)(BlueprintVisible, BlueprintReadOnly, Parm, HasGetValueTypeHash)
};
static_assert(alignof(PAWN_Avatar_C_InpActEvt_Cyber_Power_K2Node_InputActionEvent_22) == 0x000008, "Wrong alignment on PAWN_Avatar_C_InpActEvt_Cyber_Power_K2Node_InputActionEvent_22");
static_assert(sizeof(PAWN_Avatar_C_InpActEvt_Cyber_Power_K2Node_InputActionEvent_22) == 0x000018, "Wrong size on PAWN_Avatar_C_InpActEvt_Cyber_Power_K2Node_InputActionEvent_22");
static_assert(offsetof(PAWN_Avatar_C_InpActEvt_Cyber_Power_K2Node_InputActionEvent_22, Key) == 0x000000, "Member 'PAWN_Avatar_C_InpActEvt_Cyber_Power_K2Node_InputActionEvent_22::Key' has a wrong offset!");

// Function PAWN_Avatar.PAWN_Avatar_C.InpActEvt_Cyber_Power_K2Node_InputActionEvent_23
// 0x0018 (0x0018 - 0x0000)
struct PAWN_Avatar_C_InpActEvt_Cyber_Power_K2Node_InputActionEvent_23 final
{
public:
	struct FKey                                   Key;                                               // 0x0000(0x0018)(BlueprintVisible, BlueprintReadOnly, Parm, HasGetValueTypeHash)
};
static_assert(alignof(PAWN_Avatar_C_InpActEvt_Cyber_Power_K2Node_InputActionEvent_23) == 0x000008, "Wrong alignment on PAWN_Avatar_C_InpActEvt_Cyber_Power_K2Node_InputActionEvent_23");
static_assert(sizeof(PAWN_Avatar_C_InpActEvt_Cyber_Power_K2Node_InputActionEvent_23) == 0x000018, "Wrong size on PAWN_Avatar_C_InpActEvt_Cyber_Power_K2Node_InputActionEvent_23");
static_assert(offsetof(PAWN_Avatar_C_InpActEvt_Cyber_Power_K2Node_InputActionEvent_23, Key) == 0x000000, "Member 'PAWN_Avatar_C_InpActEvt_Cyber_Power_K2Node_InputActionEvent_23::Key' has a wrong offset!");

// Function PAWN_Avatar.PAWN_Avatar_C.InpActEvt_Gamepad_Cyber_Shield_K2Node_InputActionEvent_24
// 0x0018 (0x0018 - 0x0000)
struct PAWN_Avatar_C_InpActEvt_Gamepad_Cyber_Shield_K2Node_InputActionEvent_24 final
{
public:
	struct FKey                                   Key;                                               // 0x0000(0x0018)(BlueprintVisible, BlueprintReadOnly, Parm, HasGetValueTypeHash)
};
static_assert(alignof(PAWN_Avatar_C_InpActEvt_Gamepad_Cyber_Shield_K2Node_InputActionEvent_24) == 0x000008, "Wrong alignment on PAWN_Avatar_C_InpActEvt_Gamepad_Cyber_Shield_K2Node_InputActionEvent_24");
static_assert(sizeof(PAWN_Avatar_C_InpActEvt_Gamepad_Cyber_Shield_K2Node_InputActionEvent_24) == 0x000018, "Wrong size on PAWN_Avatar_C_InpActEvt_Gamepad_Cyber_Shield_K2Node_InputActionEvent_24");
static_assert(offsetof(PAWN_Avatar_C_InpActEvt_Gamepad_Cyber_Shield_K2Node_InputActionEvent_24, Key) == 0x000000, "Member 'PAWN_Avatar_C_InpActEvt_Gamepad_Cyber_Shield_K2Node_InputActionEvent_24::Key' has a wrong offset!");

// Function PAWN_Avatar.PAWN_Avatar_C.InpActEvt_Gamepad_Cyber_Shield_K2Node_InputActionEvent_25
// 0x0018 (0x0018 - 0x0000)
struct PAWN_Avatar_C_InpActEvt_Gamepad_Cyber_Shield_K2Node_InputActionEvent_25 final
{
public:
	struct FKey                                   Key;                                               // 0x0000(0x0018)(BlueprintVisible, BlueprintReadOnly, Parm, HasGetValueTypeHash)
};
static_assert(alignof(PAWN_Avatar_C_InpActEvt_Gamepad_Cyber_Shield_K2Node_InputActionEvent_25) == 0x000008, "Wrong alignment on PAWN_Avatar_C_InpActEvt_Gamepad_Cyber_Shield_K2Node_InputActionEvent_25");
static_assert(sizeof(PAWN_Avatar_C_InpActEvt_Gamepad_Cyber_Shield_K2Node_InputActionEvent_25) == 0x000018, "Wrong size on PAWN_Avatar_C_InpActEvt_Gamepad_Cyber_Shield_K2Node_InputActionEvent_25");
static_assert(offsetof(PAWN_Avatar_C_InpActEvt_Gamepad_Cyber_Shield_K2Node_InputActionEvent_25, Key) == 0x000000, "Member 'PAWN_Avatar_C_InpActEvt_Gamepad_Cyber_Shield_K2Node_InputActionEvent_25::Key' has a wrong offset!");

// Function PAWN_Avatar.PAWN_Avatar_C.InpActEvt_Cyber_Shield_K2Node_InputActionEvent_26
// 0x0018 (0x0018 - 0x0000)
struct PAWN_Avatar_C_InpActEvt_Cyber_Shield_K2Node_InputActionEvent_26 final
{
public:
	struct FKey                                   Key;                                               // 0x0000(0x0018)(BlueprintVisible, BlueprintReadOnly, Parm, HasGetValueTypeHash)
};
static_assert(alignof(PAWN_Avatar_C_InpActEvt_Cyber_Shield_K2Node_InputActionEvent_26) == 0x000008, "Wrong alignment on PAWN_Avatar_C_InpActEvt_Cyber_Shield_K2Node_InputActionEvent_26");
static_assert(sizeof(PAWN_Avatar_C_InpActEvt_Cyber_Shield_K2Node_InputActionEvent_26) == 0x000018, "Wrong size on PAWN_Avatar_C_InpActEvt_Cyber_Shield_K2Node_InputActionEvent_26");
static_assert(offsetof(PAWN_Avatar_C_InpActEvt_Cyber_Shield_K2Node_InputActionEvent_26, Key) == 0x000000, "Member 'PAWN_Avatar_C_InpActEvt_Cyber_Shield_K2Node_InputActionEvent_26::Key' has a wrong offset!");

// Function PAWN_Avatar.PAWN_Avatar_C.InpActEvt_Cyber_Shield_K2Node_InputActionEvent_27
// 0x0018 (0x0018 - 0x0000)
struct PAWN_Avatar_C_InpActEvt_Cyber_Shield_K2Node_InputActionEvent_27 final
{
public:
	struct FKey                                   Key;                                               // 0x0000(0x0018)(BlueprintVisible, BlueprintReadOnly, Parm, HasGetValueTypeHash)
};
static_assert(alignof(PAWN_Avatar_C_InpActEvt_Cyber_Shield_K2Node_InputActionEvent_27) == 0x000008, "Wrong alignment on PAWN_Avatar_C_InpActEvt_Cyber_Shield_K2Node_InputActionEvent_27");
static_assert(sizeof(PAWN_Avatar_C_InpActEvt_Cyber_Shield_K2Node_InputActionEvent_27) == 0x000018, "Wrong size on PAWN_Avatar_C_InpActEvt_Cyber_Shield_K2Node_InputActionEvent_27");
static_assert(offsetof(PAWN_Avatar_C_InpActEvt_Cyber_Shield_K2Node_InputActionEvent_27, Key) == 0x000000, "Member 'PAWN_Avatar_C_InpActEvt_Cyber_Shield_K2Node_InputActionEvent_27::Key' has a wrong offset!");

// Function PAWN_Avatar.PAWN_Avatar_C.InpActEvt_Gamepad_MenuNav_Alt2_K2Node_InputActionEvent_28
// 0x0018 (0x0018 - 0x0000)
struct PAWN_Avatar_C_InpActEvt_Gamepad_MenuNav_Alt2_K2Node_InputActionEvent_28 final
{
public:
	struct FKey                                   Key;                                               // 0x0000(0x0018)(BlueprintVisible, BlueprintReadOnly, Parm, HasGetValueTypeHash)
};
static_assert(alignof(PAWN_Avatar_C_InpActEvt_Gamepad_MenuNav_Alt2_K2Node_InputActionEvent_28) == 0x000008, "Wrong alignment on PAWN_Avatar_C_InpActEvt_Gamepad_MenuNav_Alt2_K2Node_InputActionEvent_28");
static_assert(sizeof(PAWN_Avatar_C_InpActEvt_Gamepad_MenuNav_Alt2_K2Node_InputActionEvent_28) == 0x000018, "Wrong size on PAWN_Avatar_C_InpActEvt_Gamepad_MenuNav_Alt2_K2Node_InputActionEvent_28");
static_assert(offsetof(PAWN_Avatar_C_InpActEvt_Gamepad_MenuNav_Alt2_K2Node_InputActionEvent_28, Key) == 0x000000, "Member 'PAWN_Avatar_C_InpActEvt_Gamepad_MenuNav_Alt2_K2Node_InputActionEvent_28::Key' has a wrong offset!");

// Function PAWN_Avatar.PAWN_Avatar_C.InpActEvt_Gamepad_MenuNav_Alt2_K2Node_InputActionEvent_29
// 0x0018 (0x0018 - 0x0000)
struct PAWN_Avatar_C_InpActEvt_Gamepad_MenuNav_Alt2_K2Node_InputActionEvent_29 final
{
public:
	struct FKey                                   Key;                                               // 0x0000(0x0018)(BlueprintVisible, BlueprintReadOnly, Parm, HasGetValueTypeHash)
};
static_assert(alignof(PAWN_Avatar_C_InpActEvt_Gamepad_MenuNav_Alt2_K2Node_InputActionEvent_29) == 0x000008, "Wrong alignment on PAWN_Avatar_C_InpActEvt_Gamepad_MenuNav_Alt2_K2Node_InputActionEvent_29");
static_assert(sizeof(PAWN_Avatar_C_InpActEvt_Gamepad_MenuNav_Alt2_K2Node_InputActionEvent_29) == 0x000018, "Wrong size on PAWN_Avatar_C_InpActEvt_Gamepad_MenuNav_Alt2_K2Node_InputActionEvent_29");
static_assert(offsetof(PAWN_Avatar_C_InpActEvt_Gamepad_MenuNav_Alt2_K2Node_InputActionEvent_29, Key) == 0x000000, "Member 'PAWN_Avatar_C_InpActEvt_Gamepad_MenuNav_Alt2_K2Node_InputActionEvent_29::Key' has a wrong offset!");

// Function PAWN_Avatar.PAWN_Avatar_C.InpActEvt_Gamepad_MenuNav_Alt1_K2Node_InputActionEvent_30
// 0x0018 (0x0018 - 0x0000)
struct PAWN_Avatar_C_InpActEvt_Gamepad_MenuNav_Alt1_K2Node_InputActionEvent_30 final
{
public:
	struct FKey                                   Key;                                               // 0x0000(0x0018)(BlueprintVisible, BlueprintReadOnly, Parm, HasGetValueTypeHash)
};
static_assert(alignof(PAWN_Avatar_C_InpActEvt_Gamepad_MenuNav_Alt1_K2Node_InputActionEvent_30) == 0x000008, "Wrong alignment on PAWN_Avatar_C_InpActEvt_Gamepad_MenuNav_Alt1_K2Node_InputActionEvent_30");
static_assert(sizeof(PAWN_Avatar_C_InpActEvt_Gamepad_MenuNav_Alt1_K2Node_InputActionEvent_30) == 0x000018, "Wrong size on PAWN_Avatar_C_InpActEvt_Gamepad_MenuNav_Alt1_K2Node_InputActionEvent_30");
static_assert(offsetof(PAWN_Avatar_C_InpActEvt_Gamepad_MenuNav_Alt1_K2Node_InputActionEvent_30, Key) == 0x000000, "Member 'PAWN_Avatar_C_InpActEvt_Gamepad_MenuNav_Alt1_K2Node_InputActionEvent_30::Key' has a wrong offset!");

// Function PAWN_Avatar.PAWN_Avatar_C.InpActEvt_Gamepad_MenuNav_Alt1_K2Node_InputActionEvent_31
// 0x0018 (0x0018 - 0x0000)
struct PAWN_Avatar_C_InpActEvt_Gamepad_MenuNav_Alt1_K2Node_InputActionEvent_31 final
{
public:
	struct FKey                                   Key;                                               // 0x0000(0x0018)(BlueprintVisible, BlueprintReadOnly, Parm, HasGetValueTypeHash)
};
static_assert(alignof(PAWN_Avatar_C_InpActEvt_Gamepad_MenuNav_Alt1_K2Node_InputActionEvent_31) == 0x000008, "Wrong alignment on PAWN_Avatar_C_InpActEvt_Gamepad_MenuNav_Alt1_K2Node_InputActionEvent_31");
static_assert(sizeof(PAWN_Avatar_C_InpActEvt_Gamepad_MenuNav_Alt1_K2Node_InputActionEvent_31) == 0x000018, "Wrong size on PAWN_Avatar_C_InpActEvt_Gamepad_MenuNav_Alt1_K2Node_InputActionEvent_31");
static_assert(offsetof(PAWN_Avatar_C_InpActEvt_Gamepad_MenuNav_Alt1_K2Node_InputActionEvent_31, Key) == 0x000000, "Member 'PAWN_Avatar_C_InpActEvt_Gamepad_MenuNav_Alt1_K2Node_InputActionEvent_31::Key' has a wrong offset!");

// Function PAWN_Avatar.PAWN_Avatar_C.InpActEvt_Gamepad_MenuNav_TabLeft_K2Node_InputActionEvent_32
// 0x0018 (0x0018 - 0x0000)
struct PAWN_Avatar_C_InpActEvt_Gamepad_MenuNav_TabLeft_K2Node_InputActionEvent_32 final
{
public:
	struct FKey                                   Key;                                               // 0x0000(0x0018)(BlueprintVisible, BlueprintReadOnly, Parm, HasGetValueTypeHash)
};
static_assert(alignof(PAWN_Avatar_C_InpActEvt_Gamepad_MenuNav_TabLeft_K2Node_InputActionEvent_32) == 0x000008, "Wrong alignment on PAWN_Avatar_C_InpActEvt_Gamepad_MenuNav_TabLeft_K2Node_InputActionEvent_32");
static_assert(sizeof(PAWN_Avatar_C_InpActEvt_Gamepad_MenuNav_TabLeft_K2Node_InputActionEvent_32) == 0x000018, "Wrong size on PAWN_Avatar_C_InpActEvt_Gamepad_MenuNav_TabLeft_K2Node_InputActionEvent_32");
static_assert(offsetof(PAWN_Avatar_C_InpActEvt_Gamepad_MenuNav_TabLeft_K2Node_InputActionEvent_32, Key) == 0x000000, "Member 'PAWN_Avatar_C_InpActEvt_Gamepad_MenuNav_TabLeft_K2Node_InputActionEvent_32::Key' has a wrong offset!");

// Function PAWN_Avatar.PAWN_Avatar_C.InpActEvt_Gamepad_MenuNav_TabLeft_K2Node_InputActionEvent_33
// 0x0018 (0x0018 - 0x0000)
struct PAWN_Avatar_C_InpActEvt_Gamepad_MenuNav_TabLeft_K2Node_InputActionEvent_33 final
{
public:
	struct FKey                                   Key;                                               // 0x0000(0x0018)(BlueprintVisible, BlueprintReadOnly, Parm, HasGetValueTypeHash)
};
static_assert(alignof(PAWN_Avatar_C_InpActEvt_Gamepad_MenuNav_TabLeft_K2Node_InputActionEvent_33) == 0x000008, "Wrong alignment on PAWN_Avatar_C_InpActEvt_Gamepad_MenuNav_TabLeft_K2Node_InputActionEvent_33");
static_assert(sizeof(PAWN_Avatar_C_InpActEvt_Gamepad_MenuNav_TabLeft_K2Node_InputActionEvent_33) == 0x000018, "Wrong size on PAWN_Avatar_C_InpActEvt_Gamepad_MenuNav_TabLeft_K2Node_InputActionEvent_33");
static_assert(offsetof(PAWN_Avatar_C_InpActEvt_Gamepad_MenuNav_TabLeft_K2Node_InputActionEvent_33, Key) == 0x000000, "Member 'PAWN_Avatar_C_InpActEvt_Gamepad_MenuNav_TabLeft_K2Node_InputActionEvent_33::Key' has a wrong offset!");

// Function PAWN_Avatar.PAWN_Avatar_C.InpActEvt_Gamepad_MenuNav_TabRight_K2Node_InputActionEvent_34
// 0x0018 (0x0018 - 0x0000)
struct PAWN_Avatar_C_InpActEvt_Gamepad_MenuNav_TabRight_K2Node_InputActionEvent_34 final
{
public:
	struct FKey                                   Key;                                               // 0x0000(0x0018)(BlueprintVisible, BlueprintReadOnly, Parm, HasGetValueTypeHash)
};
static_assert(alignof(PAWN_Avatar_C_InpActEvt_Gamepad_MenuNav_TabRight_K2Node_InputActionEvent_34) == 0x000008, "Wrong alignment on PAWN_Avatar_C_InpActEvt_Gamepad_MenuNav_TabRight_K2Node_InputActionEvent_34");
static_assert(sizeof(PAWN_Avatar_C_InpActEvt_Gamepad_MenuNav_TabRight_K2Node_InputActionEvent_34) == 0x000018, "Wrong size on PAWN_Avatar_C_InpActEvt_Gamepad_MenuNav_TabRight_K2Node_InputActionEvent_34");
static_assert(offsetof(PAWN_Avatar_C_InpActEvt_Gamepad_MenuNav_TabRight_K2Node_InputActionEvent_34, Key) == 0x000000, "Member 'PAWN_Avatar_C_InpActEvt_Gamepad_MenuNav_TabRight_K2Node_InputActionEvent_34::Key' has a wrong offset!");

// Function PAWN_Avatar.PAWN_Avatar_C.InpActEvt_Gamepad_MenuNav_TabRight_K2Node_InputActionEvent_35
// 0x0018 (0x0018 - 0x0000)
struct PAWN_Avatar_C_InpActEvt_Gamepad_MenuNav_TabRight_K2Node_InputActionEvent_35 final
{
public:
	struct FKey                                   Key;                                               // 0x0000(0x0018)(BlueprintVisible, BlueprintReadOnly, Parm, HasGetValueTypeHash)
};
static_assert(alignof(PAWN_Avatar_C_InpActEvt_Gamepad_MenuNav_TabRight_K2Node_InputActionEvent_35) == 0x000008, "Wrong alignment on PAWN_Avatar_C_InpActEvt_Gamepad_MenuNav_TabRight_K2Node_InputActionEvent_35");
static_assert(sizeof(PAWN_Avatar_C_InpActEvt_Gamepad_MenuNav_TabRight_K2Node_InputActionEvent_35) == 0x000018, "Wrong size on PAWN_Avatar_C_InpActEvt_Gamepad_MenuNav_TabRight_K2Node_InputActionEvent_35");
static_assert(offsetof(PAWN_Avatar_C_InpActEvt_Gamepad_MenuNav_TabRight_K2Node_InputActionEvent_35, Key) == 0x000000, "Member 'PAWN_Avatar_C_InpActEvt_Gamepad_MenuNav_TabRight_K2Node_InputActionEvent_35::Key' has a wrong offset!");

// Function PAWN_Avatar.PAWN_Avatar_C.InpActEvt_MenuNav_Back_K2Node_InputActionEvent_36
// 0x0018 (0x0018 - 0x0000)
struct PAWN_Avatar_C_InpActEvt_MenuNav_Back_K2Node_InputActionEvent_36 final
{
public:
	struct FKey                                   Key;                                               // 0x0000(0x0018)(BlueprintVisible, BlueprintReadOnly, Parm, HasGetValueTypeHash)
};
static_assert(alignof(PAWN_Avatar_C_InpActEvt_MenuNav_Back_K2Node_InputActionEvent_36) == 0x000008, "Wrong alignment on PAWN_Avatar_C_InpActEvt_MenuNav_Back_K2Node_InputActionEvent_36");
static_assert(sizeof(PAWN_Avatar_C_InpActEvt_MenuNav_Back_K2Node_InputActionEvent_36) == 0x000018, "Wrong size on PAWN_Avatar_C_InpActEvt_MenuNav_Back_K2Node_InputActionEvent_36");
static_assert(offsetof(PAWN_Avatar_C_InpActEvt_MenuNav_Back_K2Node_InputActionEvent_36, Key) == 0x000000, "Member 'PAWN_Avatar_C_InpActEvt_MenuNav_Back_K2Node_InputActionEvent_36::Key' has a wrong offset!");

// Function PAWN_Avatar.PAWN_Avatar_C.InpActEvt_MenuNav_Back_K2Node_InputActionEvent_37
// 0x0018 (0x0018 - 0x0000)
struct PAWN_Avatar_C_InpActEvt_MenuNav_Back_K2Node_InputActionEvent_37 final
{
public:
	struct FKey                                   Key;                                               // 0x0000(0x0018)(BlueprintVisible, BlueprintReadOnly, Parm, HasGetValueTypeHash)
};
static_assert(alignof(PAWN_Avatar_C_InpActEvt_MenuNav_Back_K2Node_InputActionEvent_37) == 0x000008, "Wrong alignment on PAWN_Avatar_C_InpActEvt_MenuNav_Back_K2Node_InputActionEvent_37");
static_assert(sizeof(PAWN_Avatar_C_InpActEvt_MenuNav_Back_K2Node_InputActionEvent_37) == 0x000018, "Wrong size on PAWN_Avatar_C_InpActEvt_MenuNav_Back_K2Node_InputActionEvent_37");
static_assert(offsetof(PAWN_Avatar_C_InpActEvt_MenuNav_Back_K2Node_InputActionEvent_37, Key) == 0x000000, "Member 'PAWN_Avatar_C_InpActEvt_MenuNav_Back_K2Node_InputActionEvent_37::Key' has a wrong offset!");

// Function PAWN_Avatar.PAWN_Avatar_C.InpActEvt_MenuNav_Accept_K2Node_InputActionEvent_38
// 0x0018 (0x0018 - 0x0000)
struct PAWN_Avatar_C_InpActEvt_MenuNav_Accept_K2Node_InputActionEvent_38 final
{
public:
	struct FKey                                   Key;                                               // 0x0000(0x0018)(BlueprintVisible, BlueprintReadOnly, Parm, HasGetValueTypeHash)
};
static_assert(alignof(PAWN_Avatar_C_InpActEvt_MenuNav_Accept_K2Node_InputActionEvent_38) == 0x000008, "Wrong alignment on PAWN_Avatar_C_InpActEvt_MenuNav_Accept_K2Node_InputActionEvent_38");
static_assert(sizeof(PAWN_Avatar_C_InpActEvt_MenuNav_Accept_K2Node_InputActionEvent_38) == 0x000018, "Wrong size on PAWN_Avatar_C_InpActEvt_MenuNav_Accept_K2Node_InputActionEvent_38");
static_assert(offsetof(PAWN_Avatar_C_InpActEvt_MenuNav_Accept_K2Node_InputActionEvent_38, Key) == 0x000000, "Member 'PAWN_Avatar_C_InpActEvt_MenuNav_Accept_K2Node_InputActionEvent_38::Key' has a wrong offset!");

// Function PAWN_Avatar.PAWN_Avatar_C.InpActEvt_MenuNav_Accept_K2Node_InputActionEvent_39
// 0x0018 (0x0018 - 0x0000)
struct PAWN_Avatar_C_InpActEvt_MenuNav_Accept_K2Node_InputActionEvent_39 final
{
public:
	struct FKey                                   Key;                                               // 0x0000(0x0018)(BlueprintVisible, BlueprintReadOnly, Parm, HasGetValueTypeHash)
};
static_assert(alignof(PAWN_Avatar_C_InpActEvt_MenuNav_Accept_K2Node_InputActionEvent_39) == 0x000008, "Wrong alignment on PAWN_Avatar_C_InpActEvt_MenuNav_Accept_K2Node_InputActionEvent_39");
static_assert(sizeof(PAWN_Avatar_C_InpActEvt_MenuNav_Accept_K2Node_InputActionEvent_39) == 0x000018, "Wrong size on PAWN_Avatar_C_InpActEvt_MenuNav_Accept_K2Node_InputActionEvent_39");
static_assert(offsetof(PAWN_Avatar_C_InpActEvt_MenuNav_Accept_K2Node_InputActionEvent_39, Key) == 0x000000, "Member 'PAWN_Avatar_C_InpActEvt_MenuNav_Accept_K2Node_InputActionEvent_39::Key' has a wrong offset!");

// Function PAWN_Avatar.PAWN_Avatar_C.InpActEvt_Gamepad_Cyber_Decoy_K2Node_InputActionEvent_40
// 0x0018 (0x0018 - 0x0000)
struct PAWN_Avatar_C_InpActEvt_Gamepad_Cyber_Decoy_K2Node_InputActionEvent_40 final
{
public:
	struct FKey                                   Key;                                               // 0x0000(0x0018)(BlueprintVisible, BlueprintReadOnly, Parm, HasGetValueTypeHash)
};
static_assert(alignof(PAWN_Avatar_C_InpActEvt_Gamepad_Cyber_Decoy_K2Node_InputActionEvent_40) == 0x000008, "Wrong alignment on PAWN_Avatar_C_InpActEvt_Gamepad_Cyber_Decoy_K2Node_InputActionEvent_40");
static_assert(sizeof(PAWN_Avatar_C_InpActEvt_Gamepad_Cyber_Decoy_K2Node_InputActionEvent_40) == 0x000018, "Wrong size on PAWN_Avatar_C_InpActEvt_Gamepad_Cyber_Decoy_K2Node_InputActionEvent_40");
static_assert(offsetof(PAWN_Avatar_C_InpActEvt_Gamepad_Cyber_Decoy_K2Node_InputActionEvent_40, Key) == 0x000000, "Member 'PAWN_Avatar_C_InpActEvt_Gamepad_Cyber_Decoy_K2Node_InputActionEvent_40::Key' has a wrong offset!");

// Function PAWN_Avatar.PAWN_Avatar_C.InpActEvt_Gamepad_Cyber_Decoy_K2Node_InputActionEvent_41
// 0x0018 (0x0018 - 0x0000)
struct PAWN_Avatar_C_InpActEvt_Gamepad_Cyber_Decoy_K2Node_InputActionEvent_41 final
{
public:
	struct FKey                                   Key;                                               // 0x0000(0x0018)(BlueprintVisible, BlueprintReadOnly, Parm, HasGetValueTypeHash)
};
static_assert(alignof(PAWN_Avatar_C_InpActEvt_Gamepad_Cyber_Decoy_K2Node_InputActionEvent_41) == 0x000008, "Wrong alignment on PAWN_Avatar_C_InpActEvt_Gamepad_Cyber_Decoy_K2Node_InputActionEvent_41");
static_assert(sizeof(PAWN_Avatar_C_InpActEvt_Gamepad_Cyber_Decoy_K2Node_InputActionEvent_41) == 0x000018, "Wrong size on PAWN_Avatar_C_InpActEvt_Gamepad_Cyber_Decoy_K2Node_InputActionEvent_41");
static_assert(offsetof(PAWN_Avatar_C_InpActEvt_Gamepad_Cyber_Decoy_K2Node_InputActionEvent_41, Key) == 0x000000, "Member 'PAWN_Avatar_C_InpActEvt_Gamepad_Cyber_Decoy_K2Node_InputActionEvent_41::Key' has a wrong offset!");

// Function PAWN_Avatar.PAWN_Avatar_C.InpActEvt_Cyber_Decoy_K2Node_InputActionEvent_42
// 0x0018 (0x0018 - 0x0000)
struct PAWN_Avatar_C_InpActEvt_Cyber_Decoy_K2Node_InputActionEvent_42 final
{
public:
	struct FKey                                   Key;                                               // 0x0000(0x0018)(BlueprintVisible, BlueprintReadOnly, Parm, HasGetValueTypeHash)
};
static_assert(alignof(PAWN_Avatar_C_InpActEvt_Cyber_Decoy_K2Node_InputActionEvent_42) == 0x000008, "Wrong alignment on PAWN_Avatar_C_InpActEvt_Cyber_Decoy_K2Node_InputActionEvent_42");
static_assert(sizeof(PAWN_Avatar_C_InpActEvt_Cyber_Decoy_K2Node_InputActionEvent_42) == 0x000018, "Wrong size on PAWN_Avatar_C_InpActEvt_Cyber_Decoy_K2Node_InputActionEvent_42");
static_assert(offsetof(PAWN_Avatar_C_InpActEvt_Cyber_Decoy_K2Node_InputActionEvent_42, Key) == 0x000000, "Member 'PAWN_Avatar_C_InpActEvt_Cyber_Decoy_K2Node_InputActionEvent_42::Key' has a wrong offset!");

// Function PAWN_Avatar.PAWN_Avatar_C.InpActEvt_Cyber_Decoy_K2Node_InputActionEvent_43
// 0x0018 (0x0018 - 0x0000)
struct PAWN_Avatar_C_InpActEvt_Cyber_Decoy_K2Node_InputActionEvent_43 final
{
public:
	struct FKey                                   Key;                                               // 0x0000(0x0018)(BlueprintVisible, BlueprintReadOnly, Parm, HasGetValueTypeHash)
};
static_assert(alignof(PAWN_Avatar_C_InpActEvt_Cyber_Decoy_K2Node_InputActionEvent_43) == 0x000008, "Wrong alignment on PAWN_Avatar_C_InpActEvt_Cyber_Decoy_K2Node_InputActionEvent_43");
static_assert(sizeof(PAWN_Avatar_C_InpActEvt_Cyber_Decoy_K2Node_InputActionEvent_43) == 0x000018, "Wrong size on PAWN_Avatar_C_InpActEvt_Cyber_Decoy_K2Node_InputActionEvent_43");
static_assert(offsetof(PAWN_Avatar_C_InpActEvt_Cyber_Decoy_K2Node_InputActionEvent_43, Key) == 0x000000, "Member 'PAWN_Avatar_C_InpActEvt_Cyber_Decoy_K2Node_InputActionEvent_43::Key' has a wrong offset!");

// Function PAWN_Avatar.PAWN_Avatar_C.InpActEvt_Gamepad_Cyber_Recall_K2Node_InputActionEvent_44
// 0x0018 (0x0018 - 0x0000)
struct PAWN_Avatar_C_InpActEvt_Gamepad_Cyber_Recall_K2Node_InputActionEvent_44 final
{
public:
	struct FKey                                   Key;                                               // 0x0000(0x0018)(BlueprintVisible, BlueprintReadOnly, Parm, HasGetValueTypeHash)
};
static_assert(alignof(PAWN_Avatar_C_InpActEvt_Gamepad_Cyber_Recall_K2Node_InputActionEvent_44) == 0x000008, "Wrong alignment on PAWN_Avatar_C_InpActEvt_Gamepad_Cyber_Recall_K2Node_InputActionEvent_44");
static_assert(sizeof(PAWN_Avatar_C_InpActEvt_Gamepad_Cyber_Recall_K2Node_InputActionEvent_44) == 0x000018, "Wrong size on PAWN_Avatar_C_InpActEvt_Gamepad_Cyber_Recall_K2Node_InputActionEvent_44");
static_assert(offsetof(PAWN_Avatar_C_InpActEvt_Gamepad_Cyber_Recall_K2Node_InputActionEvent_44, Key) == 0x000000, "Member 'PAWN_Avatar_C_InpActEvt_Gamepad_Cyber_Recall_K2Node_InputActionEvent_44::Key' has a wrong offset!");

// Function PAWN_Avatar.PAWN_Avatar_C.InpActEvt_Gamepad_Cyber_Recall_K2Node_InputActionEvent_45
// 0x0018 (0x0018 - 0x0000)
struct PAWN_Avatar_C_InpActEvt_Gamepad_Cyber_Recall_K2Node_InputActionEvent_45 final
{
public:
	struct FKey                                   Key;                                               // 0x0000(0x0018)(BlueprintVisible, BlueprintReadOnly, Parm, HasGetValueTypeHash)
};
static_assert(alignof(PAWN_Avatar_C_InpActEvt_Gamepad_Cyber_Recall_K2Node_InputActionEvent_45) == 0x000008, "Wrong alignment on PAWN_Avatar_C_InpActEvt_Gamepad_Cyber_Recall_K2Node_InputActionEvent_45");
static_assert(sizeof(PAWN_Avatar_C_InpActEvt_Gamepad_Cyber_Recall_K2Node_InputActionEvent_45) == 0x000018, "Wrong size on PAWN_Avatar_C_InpActEvt_Gamepad_Cyber_Recall_K2Node_InputActionEvent_45");
static_assert(offsetof(PAWN_Avatar_C_InpActEvt_Gamepad_Cyber_Recall_K2Node_InputActionEvent_45, Key) == 0x000000, "Member 'PAWN_Avatar_C_InpActEvt_Gamepad_Cyber_Recall_K2Node_InputActionEvent_45::Key' has a wrong offset!");

// Function PAWN_Avatar.PAWN_Avatar_C.InpActEvt_Cyber_Recall_K2Node_InputActionEvent_46
// 0x0018 (0x0018 - 0x0000)
struct PAWN_Avatar_C_InpActEvt_Cyber_Recall_K2Node_InputActionEvent_46 final
{
public:
	struct FKey                                   Key;                                               // 0x0000(0x0018)(BlueprintVisible, BlueprintReadOnly, Parm, HasGetValueTypeHash)
};
static_assert(alignof(PAWN_Avatar_C_InpActEvt_Cyber_Recall_K2Node_InputActionEvent_46) == 0x000008, "Wrong alignment on PAWN_Avatar_C_InpActEvt_Cyber_Recall_K2Node_InputActionEvent_46");
static_assert(sizeof(PAWN_Avatar_C_InpActEvt_Cyber_Recall_K2Node_InputActionEvent_46) == 0x000018, "Wrong size on PAWN_Avatar_C_InpActEvt_Cyber_Recall_K2Node_InputActionEvent_46");
static_assert(offsetof(PAWN_Avatar_C_InpActEvt_Cyber_Recall_K2Node_InputActionEvent_46, Key) == 0x000000, "Member 'PAWN_Avatar_C_InpActEvt_Cyber_Recall_K2Node_InputActionEvent_46::Key' has a wrong offset!");

// Function PAWN_Avatar.PAWN_Avatar_C.InpActEvt_Cyber_Recall_K2Node_InputActionEvent_47
// 0x0018 (0x0018 - 0x0000)
struct PAWN_Avatar_C_InpActEvt_Cyber_Recall_K2Node_InputActionEvent_47 final
{
public:
	struct FKey                                   Key;                                               // 0x0000(0x0018)(BlueprintVisible, BlueprintReadOnly, Parm, HasGetValueTypeHash)
};
static_assert(alignof(PAWN_Avatar_C_InpActEvt_Cyber_Recall_K2Node_InputActionEvent_47) == 0x000008, "Wrong alignment on PAWN_Avatar_C_InpActEvt_Cyber_Recall_K2Node_InputActionEvent_47");
static_assert(sizeof(PAWN_Avatar_C_InpActEvt_Cyber_Recall_K2Node_InputActionEvent_47) == 0x000018, "Wrong size on PAWN_Avatar_C_InpActEvt_Cyber_Recall_K2Node_InputActionEvent_47");
static_assert(offsetof(PAWN_Avatar_C_InpActEvt_Cyber_Recall_K2Node_InputActionEvent_47, Key) == 0x000000, "Member 'PAWN_Avatar_C_InpActEvt_Cyber_Recall_K2Node_InputActionEvent_47::Key' has a wrong offset!");

// Function PAWN_Avatar.PAWN_Avatar_C.InpActEvt_Cyber_MoveRight_K2Node_InputActionEvent_48
// 0x0018 (0x0018 - 0x0000)
struct PAWN_Avatar_C_InpActEvt_Cyber_MoveRight_K2Node_InputActionEvent_48 final
{
public:
	struct FKey                                   Key;                                               // 0x0000(0x0018)(BlueprintVisible, BlueprintReadOnly, Parm, HasGetValueTypeHash)
};
static_assert(alignof(PAWN_Avatar_C_InpActEvt_Cyber_MoveRight_K2Node_InputActionEvent_48) == 0x000008, "Wrong alignment on PAWN_Avatar_C_InpActEvt_Cyber_MoveRight_K2Node_InputActionEvent_48");
static_assert(sizeof(PAWN_Avatar_C_InpActEvt_Cyber_MoveRight_K2Node_InputActionEvent_48) == 0x000018, "Wrong size on PAWN_Avatar_C_InpActEvt_Cyber_MoveRight_K2Node_InputActionEvent_48");
static_assert(offsetof(PAWN_Avatar_C_InpActEvt_Cyber_MoveRight_K2Node_InputActionEvent_48, Key) == 0x000000, "Member 'PAWN_Avatar_C_InpActEvt_Cyber_MoveRight_K2Node_InputActionEvent_48::Key' has a wrong offset!");

// Function PAWN_Avatar.PAWN_Avatar_C.InpActEvt_Cyber_MoveRight_K2Node_InputActionEvent_49
// 0x0018 (0x0018 - 0x0000)
struct PAWN_Avatar_C_InpActEvt_Cyber_MoveRight_K2Node_InputActionEvent_49 final
{
public:
	struct FKey                                   Key;                                               // 0x0000(0x0018)(BlueprintVisible, BlueprintReadOnly, Parm, HasGetValueTypeHash)
};
static_assert(alignof(PAWN_Avatar_C_InpActEvt_Cyber_MoveRight_K2Node_InputActionEvent_49) == 0x000008, "Wrong alignment on PAWN_Avatar_C_InpActEvt_Cyber_MoveRight_K2Node_InputActionEvent_49");
static_assert(sizeof(PAWN_Avatar_C_InpActEvt_Cyber_MoveRight_K2Node_InputActionEvent_49) == 0x000018, "Wrong size on PAWN_Avatar_C_InpActEvt_Cyber_MoveRight_K2Node_InputActionEvent_49");
static_assert(offsetof(PAWN_Avatar_C_InpActEvt_Cyber_MoveRight_K2Node_InputActionEvent_49, Key) == 0x000000, "Member 'PAWN_Avatar_C_InpActEvt_Cyber_MoveRight_K2Node_InputActionEvent_49::Key' has a wrong offset!");

// Function PAWN_Avatar.PAWN_Avatar_C.InpActEvt_Cyber_MoveForward_K2Node_InputActionEvent_50
// 0x0018 (0x0018 - 0x0000)
struct PAWN_Avatar_C_InpActEvt_Cyber_MoveForward_K2Node_InputActionEvent_50 final
{
public:
	struct FKey                                   Key;                                               // 0x0000(0x0018)(BlueprintVisible, BlueprintReadOnly, Parm, HasGetValueTypeHash)
};
static_assert(alignof(PAWN_Avatar_C_InpActEvt_Cyber_MoveForward_K2Node_InputActionEvent_50) == 0x000008, "Wrong alignment on PAWN_Avatar_C_InpActEvt_Cyber_MoveForward_K2Node_InputActionEvent_50");
static_assert(sizeof(PAWN_Avatar_C_InpActEvt_Cyber_MoveForward_K2Node_InputActionEvent_50) == 0x000018, "Wrong size on PAWN_Avatar_C_InpActEvt_Cyber_MoveForward_K2Node_InputActionEvent_50");
static_assert(offsetof(PAWN_Avatar_C_InpActEvt_Cyber_MoveForward_K2Node_InputActionEvent_50, Key) == 0x000000, "Member 'PAWN_Avatar_C_InpActEvt_Cyber_MoveForward_K2Node_InputActionEvent_50::Key' has a wrong offset!");

// Function PAWN_Avatar.PAWN_Avatar_C.InpActEvt_Cyber_MoveForward_K2Node_InputActionEvent_51
// 0x0018 (0x0018 - 0x0000)
struct PAWN_Avatar_C_InpActEvt_Cyber_MoveForward_K2Node_InputActionEvent_51 final
{
public:
	struct FKey                                   Key;                                               // 0x0000(0x0018)(BlueprintVisible, BlueprintReadOnly, Parm, HasGetValueTypeHash)
};
static_assert(alignof(PAWN_Avatar_C_InpActEvt_Cyber_MoveForward_K2Node_InputActionEvent_51) == 0x000008, "Wrong alignment on PAWN_Avatar_C_InpActEvt_Cyber_MoveForward_K2Node_InputActionEvent_51");
static_assert(sizeof(PAWN_Avatar_C_InpActEvt_Cyber_MoveForward_K2Node_InputActionEvent_51) == 0x000018, "Wrong size on PAWN_Avatar_C_InpActEvt_Cyber_MoveForward_K2Node_InputActionEvent_51");
static_assert(offsetof(PAWN_Avatar_C_InpActEvt_Cyber_MoveForward_K2Node_InputActionEvent_51, Key) == 0x000000, "Member 'PAWN_Avatar_C_InpActEvt_Cyber_MoveForward_K2Node_InputActionEvent_51::Key' has a wrong offset!");

// Function PAWN_Avatar.PAWN_Avatar_C.InpActEvt_Gamepad_Escape_K2Node_InputActionEvent_52
// 0x0018 (0x0018 - 0x0000)
struct PAWN_Avatar_C_InpActEvt_Gamepad_Escape_K2Node_InputActionEvent_52 final
{
public:
	struct FKey                                   Key;                                               // 0x0000(0x0018)(BlueprintVisible, BlueprintReadOnly, Parm, HasGetValueTypeHash)
};
static_assert(alignof(PAWN_Avatar_C_InpActEvt_Gamepad_Escape_K2Node_InputActionEvent_52) == 0x000008, "Wrong alignment on PAWN_Avatar_C_InpActEvt_Gamepad_Escape_K2Node_InputActionEvent_52");
static_assert(sizeof(PAWN_Avatar_C_InpActEvt_Gamepad_Escape_K2Node_InputActionEvent_52) == 0x000018, "Wrong size on PAWN_Avatar_C_InpActEvt_Gamepad_Escape_K2Node_InputActionEvent_52");
static_assert(offsetof(PAWN_Avatar_C_InpActEvt_Gamepad_Escape_K2Node_InputActionEvent_52, Key) == 0x000000, "Member 'PAWN_Avatar_C_InpActEvt_Gamepad_Escape_K2Node_InputActionEvent_52::Key' has a wrong offset!");

// Function PAWN_Avatar.PAWN_Avatar_C.InpActEvt_Locked_Escape_K2Node_InputActionEvent_53
// 0x0018 (0x0018 - 0x0000)
struct PAWN_Avatar_C_InpActEvt_Locked_Escape_K2Node_InputActionEvent_53 final
{
public:
	struct FKey                                   Key;                                               // 0x0000(0x0018)(BlueprintVisible, BlueprintReadOnly, Parm, HasGetValueTypeHash)
};
static_assert(alignof(PAWN_Avatar_C_InpActEvt_Locked_Escape_K2Node_InputActionEvent_53) == 0x000008, "Wrong alignment on PAWN_Avatar_C_InpActEvt_Locked_Escape_K2Node_InputActionEvent_53");
static_assert(sizeof(PAWN_Avatar_C_InpActEvt_Locked_Escape_K2Node_InputActionEvent_53) == 0x000018, "Wrong size on PAWN_Avatar_C_InpActEvt_Locked_Escape_K2Node_InputActionEvent_53");
static_assert(offsetof(PAWN_Avatar_C_InpActEvt_Locked_Escape_K2Node_InputActionEvent_53, Key) == 0x000000, "Member 'PAWN_Avatar_C_InpActEvt_Locked_Escape_K2Node_InputActionEvent_53::Key' has a wrong offset!");

// Function PAWN_Avatar.PAWN_Avatar_C.InpActEvt_Gamepad_Cyber_Ascend_K2Node_InputActionEvent_54
// 0x0018 (0x0018 - 0x0000)
struct PAWN_Avatar_C_InpActEvt_Gamepad_Cyber_Ascend_K2Node_InputActionEvent_54 final
{
public:
	struct FKey                                   Key;                                               // 0x0000(0x0018)(BlueprintVisible, BlueprintReadOnly, Parm, HasGetValueTypeHash)
};
static_assert(alignof(PAWN_Avatar_C_InpActEvt_Gamepad_Cyber_Ascend_K2Node_InputActionEvent_54) == 0x000008, "Wrong alignment on PAWN_Avatar_C_InpActEvt_Gamepad_Cyber_Ascend_K2Node_InputActionEvent_54");
static_assert(sizeof(PAWN_Avatar_C_InpActEvt_Gamepad_Cyber_Ascend_K2Node_InputActionEvent_54) == 0x000018, "Wrong size on PAWN_Avatar_C_InpActEvt_Gamepad_Cyber_Ascend_K2Node_InputActionEvent_54");
static_assert(offsetof(PAWN_Avatar_C_InpActEvt_Gamepad_Cyber_Ascend_K2Node_InputActionEvent_54, Key) == 0x000000, "Member 'PAWN_Avatar_C_InpActEvt_Gamepad_Cyber_Ascend_K2Node_InputActionEvent_54::Key' has a wrong offset!");

// Function PAWN_Avatar.PAWN_Avatar_C.InpActEvt_Gamepad_Cyber_Ascend_K2Node_InputActionEvent_55
// 0x0018 (0x0018 - 0x0000)
struct PAWN_Avatar_C_InpActEvt_Gamepad_Cyber_Ascend_K2Node_InputActionEvent_55 final
{
public:
	struct FKey                                   Key;                                               // 0x0000(0x0018)(BlueprintVisible, BlueprintReadOnly, Parm, HasGetValueTypeHash)
};
static_assert(alignof(PAWN_Avatar_C_InpActEvt_Gamepad_Cyber_Ascend_K2Node_InputActionEvent_55) == 0x000008, "Wrong alignment on PAWN_Avatar_C_InpActEvt_Gamepad_Cyber_Ascend_K2Node_InputActionEvent_55");
static_assert(sizeof(PAWN_Avatar_C_InpActEvt_Gamepad_Cyber_Ascend_K2Node_InputActionEvent_55) == 0x000018, "Wrong size on PAWN_Avatar_C_InpActEvt_Gamepad_Cyber_Ascend_K2Node_InputActionEvent_55");
static_assert(offsetof(PAWN_Avatar_C_InpActEvt_Gamepad_Cyber_Ascend_K2Node_InputActionEvent_55, Key) == 0x000000, "Member 'PAWN_Avatar_C_InpActEvt_Gamepad_Cyber_Ascend_K2Node_InputActionEvent_55::Key' has a wrong offset!");

// Function PAWN_Avatar.PAWN_Avatar_C.InpActEvt_Gamepad_Cyber_PrimaryAttack_K2Node_InputActionEvent_56
// 0x0018 (0x0018 - 0x0000)
struct PAWN_Avatar_C_InpActEvt_Gamepad_Cyber_PrimaryAttack_K2Node_InputActionEvent_56 final
{
public:
	struct FKey                                   Key;                                               // 0x0000(0x0018)(BlueprintVisible, BlueprintReadOnly, Parm, HasGetValueTypeHash)
};
static_assert(alignof(PAWN_Avatar_C_InpActEvt_Gamepad_Cyber_PrimaryAttack_K2Node_InputActionEvent_56) == 0x000008, "Wrong alignment on PAWN_Avatar_C_InpActEvt_Gamepad_Cyber_PrimaryAttack_K2Node_InputActionEvent_56");
static_assert(sizeof(PAWN_Avatar_C_InpActEvt_Gamepad_Cyber_PrimaryAttack_K2Node_InputActionEvent_56) == 0x000018, "Wrong size on PAWN_Avatar_C_InpActEvt_Gamepad_Cyber_PrimaryAttack_K2Node_InputActionEvent_56");
static_assert(offsetof(PAWN_Avatar_C_InpActEvt_Gamepad_Cyber_PrimaryAttack_K2Node_InputActionEvent_56, Key) == 0x000000, "Member 'PAWN_Avatar_C_InpActEvt_Gamepad_Cyber_PrimaryAttack_K2Node_InputActionEvent_56::Key' has a wrong offset!");

// Function PAWN_Avatar.PAWN_Avatar_C.InpActEvt_Gamepad_Cyber_PrimaryAttack_K2Node_InputActionEvent_57
// 0x0018 (0x0018 - 0x0000)
struct PAWN_Avatar_C_InpActEvt_Gamepad_Cyber_PrimaryAttack_K2Node_InputActionEvent_57 final
{
public:
	struct FKey                                   Key;                                               // 0x0000(0x0018)(BlueprintVisible, BlueprintReadOnly, Parm, HasGetValueTypeHash)
};
static_assert(alignof(PAWN_Avatar_C_InpActEvt_Gamepad_Cyber_PrimaryAttack_K2Node_InputActionEvent_57) == 0x000008, "Wrong alignment on PAWN_Avatar_C_InpActEvt_Gamepad_Cyber_PrimaryAttack_K2Node_InputActionEvent_57");
static_assert(sizeof(PAWN_Avatar_C_InpActEvt_Gamepad_Cyber_PrimaryAttack_K2Node_InputActionEvent_57) == 0x000018, "Wrong size on PAWN_Avatar_C_InpActEvt_Gamepad_Cyber_PrimaryAttack_K2Node_InputActionEvent_57");
static_assert(offsetof(PAWN_Avatar_C_InpActEvt_Gamepad_Cyber_PrimaryAttack_K2Node_InputActionEvent_57, Key) == 0x000000, "Member 'PAWN_Avatar_C_InpActEvt_Gamepad_Cyber_PrimaryAttack_K2Node_InputActionEvent_57::Key' has a wrong offset!");

// Function PAWN_Avatar.PAWN_Avatar_C.InpActEvt_Gamepad_Cyber_SecondaryAttack_K2Node_InputActionEvent_58
// 0x0018 (0x0018 - 0x0000)
struct PAWN_Avatar_C_InpActEvt_Gamepad_Cyber_SecondaryAttack_K2Node_InputActionEvent_58 final
{
public:
	struct FKey                                   Key;                                               // 0x0000(0x0018)(BlueprintVisible, BlueprintReadOnly, Parm, HasGetValueTypeHash)
};
static_assert(alignof(PAWN_Avatar_C_InpActEvt_Gamepad_Cyber_SecondaryAttack_K2Node_InputActionEvent_58) == 0x000008, "Wrong alignment on PAWN_Avatar_C_InpActEvt_Gamepad_Cyber_SecondaryAttack_K2Node_InputActionEvent_58");
static_assert(sizeof(PAWN_Avatar_C_InpActEvt_Gamepad_Cyber_SecondaryAttack_K2Node_InputActionEvent_58) == 0x000018, "Wrong size on PAWN_Avatar_C_InpActEvt_Gamepad_Cyber_SecondaryAttack_K2Node_InputActionEvent_58");
static_assert(offsetof(PAWN_Avatar_C_InpActEvt_Gamepad_Cyber_SecondaryAttack_K2Node_InputActionEvent_58, Key) == 0x000000, "Member 'PAWN_Avatar_C_InpActEvt_Gamepad_Cyber_SecondaryAttack_K2Node_InputActionEvent_58::Key' has a wrong offset!");

// Function PAWN_Avatar.PAWN_Avatar_C.InpActEvt_Gamepad_Cyber_SecondaryAttack_K2Node_InputActionEvent_59
// 0x0018 (0x0018 - 0x0000)
struct PAWN_Avatar_C_InpActEvt_Gamepad_Cyber_SecondaryAttack_K2Node_InputActionEvent_59 final
{
public:
	struct FKey                                   Key;                                               // 0x0000(0x0018)(BlueprintVisible, BlueprintReadOnly, Parm, HasGetValueTypeHash)
};
static_assert(alignof(PAWN_Avatar_C_InpActEvt_Gamepad_Cyber_SecondaryAttack_K2Node_InputActionEvent_59) == 0x000008, "Wrong alignment on PAWN_Avatar_C_InpActEvt_Gamepad_Cyber_SecondaryAttack_K2Node_InputActionEvent_59");
static_assert(sizeof(PAWN_Avatar_C_InpActEvt_Gamepad_Cyber_SecondaryAttack_K2Node_InputActionEvent_59) == 0x000018, "Wrong size on PAWN_Avatar_C_InpActEvt_Gamepad_Cyber_SecondaryAttack_K2Node_InputActionEvent_59");
static_assert(offsetof(PAWN_Avatar_C_InpActEvt_Gamepad_Cyber_SecondaryAttack_K2Node_InputActionEvent_59, Key) == 0x000000, "Member 'PAWN_Avatar_C_InpActEvt_Gamepad_Cyber_SecondaryAttack_K2Node_InputActionEvent_59::Key' has a wrong offset!");

// Function PAWN_Avatar.PAWN_Avatar_C.InpActEvt_Gamepad_Cyber_TurboDash_K2Node_InputActionEvent_60
// 0x0018 (0x0018 - 0x0000)
struct PAWN_Avatar_C_InpActEvt_Gamepad_Cyber_TurboDash_K2Node_InputActionEvent_60 final
{
public:
	struct FKey                                   Key;                                               // 0x0000(0x0018)(BlueprintVisible, BlueprintReadOnly, Parm, HasGetValueTypeHash)
};
static_assert(alignof(PAWN_Avatar_C_InpActEvt_Gamepad_Cyber_TurboDash_K2Node_InputActionEvent_60) == 0x000008, "Wrong alignment on PAWN_Avatar_C_InpActEvt_Gamepad_Cyber_TurboDash_K2Node_InputActionEvent_60");
static_assert(sizeof(PAWN_Avatar_C_InpActEvt_Gamepad_Cyber_TurboDash_K2Node_InputActionEvent_60) == 0x000018, "Wrong size on PAWN_Avatar_C_InpActEvt_Gamepad_Cyber_TurboDash_K2Node_InputActionEvent_60");
static_assert(offsetof(PAWN_Avatar_C_InpActEvt_Gamepad_Cyber_TurboDash_K2Node_InputActionEvent_60, Key) == 0x000000, "Member 'PAWN_Avatar_C_InpActEvt_Gamepad_Cyber_TurboDash_K2Node_InputActionEvent_60::Key' has a wrong offset!");

// Function PAWN_Avatar.PAWN_Avatar_C.InpActEvt_Gamepad_Cyber_TurboDash_K2Node_InputActionEvent_61
// 0x0018 (0x0018 - 0x0000)
struct PAWN_Avatar_C_InpActEvt_Gamepad_Cyber_TurboDash_K2Node_InputActionEvent_61 final
{
public:
	struct FKey                                   Key;                                               // 0x0000(0x0018)(BlueprintVisible, BlueprintReadOnly, Parm, HasGetValueTypeHash)
};
static_assert(alignof(PAWN_Avatar_C_InpActEvt_Gamepad_Cyber_TurboDash_K2Node_InputActionEvent_61) == 0x000008, "Wrong alignment on PAWN_Avatar_C_InpActEvt_Gamepad_Cyber_TurboDash_K2Node_InputActionEvent_61");
static_assert(sizeof(PAWN_Avatar_C_InpActEvt_Gamepad_Cyber_TurboDash_K2Node_InputActionEvent_61) == 0x000018, "Wrong size on PAWN_Avatar_C_InpActEvt_Gamepad_Cyber_TurboDash_K2Node_InputActionEvent_61");
static_assert(offsetof(PAWN_Avatar_C_InpActEvt_Gamepad_Cyber_TurboDash_K2Node_InputActionEvent_61, Key) == 0x000000, "Member 'PAWN_Avatar_C_InpActEvt_Gamepad_Cyber_TurboDash_K2Node_InputActionEvent_61::Key' has a wrong offset!");

// Function PAWN_Avatar.PAWN_Avatar_C.InpActEvt_Gamepad_Cyber_RollLeft_K2Node_InputActionEvent_62
// 0x0018 (0x0018 - 0x0000)
struct PAWN_Avatar_C_InpActEvt_Gamepad_Cyber_RollLeft_K2Node_InputActionEvent_62 final
{
public:
	struct FKey                                   Key;                                               // 0x0000(0x0018)(BlueprintVisible, BlueprintReadOnly, Parm, HasGetValueTypeHash)
};
static_assert(alignof(PAWN_Avatar_C_InpActEvt_Gamepad_Cyber_RollLeft_K2Node_InputActionEvent_62) == 0x000008, "Wrong alignment on PAWN_Avatar_C_InpActEvt_Gamepad_Cyber_RollLeft_K2Node_InputActionEvent_62");
static_assert(sizeof(PAWN_Avatar_C_InpActEvt_Gamepad_Cyber_RollLeft_K2Node_InputActionEvent_62) == 0x000018, "Wrong size on PAWN_Avatar_C_InpActEvt_Gamepad_Cyber_RollLeft_K2Node_InputActionEvent_62");
static_assert(offsetof(PAWN_Avatar_C_InpActEvt_Gamepad_Cyber_RollLeft_K2Node_InputActionEvent_62, Key) == 0x000000, "Member 'PAWN_Avatar_C_InpActEvt_Gamepad_Cyber_RollLeft_K2Node_InputActionEvent_62::Key' has a wrong offset!");

// Function PAWN_Avatar.PAWN_Avatar_C.InpActEvt_Gamepad_Cyber_RollLeft_K2Node_InputActionEvent_63
// 0x0018 (0x0018 - 0x0000)
struct PAWN_Avatar_C_InpActEvt_Gamepad_Cyber_RollLeft_K2Node_InputActionEvent_63 final
{
public:
	struct FKey                                   Key;                                               // 0x0000(0x0018)(BlueprintVisible, BlueprintReadOnly, Parm, HasGetValueTypeHash)
};
static_assert(alignof(PAWN_Avatar_C_InpActEvt_Gamepad_Cyber_RollLeft_K2Node_InputActionEvent_63) == 0x000008, "Wrong alignment on PAWN_Avatar_C_InpActEvt_Gamepad_Cyber_RollLeft_K2Node_InputActionEvent_63");
static_assert(sizeof(PAWN_Avatar_C_InpActEvt_Gamepad_Cyber_RollLeft_K2Node_InputActionEvent_63) == 0x000018, "Wrong size on PAWN_Avatar_C_InpActEvt_Gamepad_Cyber_RollLeft_K2Node_InputActionEvent_63");
static_assert(offsetof(PAWN_Avatar_C_InpActEvt_Gamepad_Cyber_RollLeft_K2Node_InputActionEvent_63, Key) == 0x000000, "Member 'PAWN_Avatar_C_InpActEvt_Gamepad_Cyber_RollLeft_K2Node_InputActionEvent_63::Key' has a wrong offset!");

// Function PAWN_Avatar.PAWN_Avatar_C.InpActEvt_Gamepad_Cyber_RollRight_K2Node_InputActionEvent_64
// 0x0018 (0x0018 - 0x0000)
struct PAWN_Avatar_C_InpActEvt_Gamepad_Cyber_RollRight_K2Node_InputActionEvent_64 final
{
public:
	struct FKey                                   Key;                                               // 0x0000(0x0018)(BlueprintVisible, BlueprintReadOnly, Parm, HasGetValueTypeHash)
};
static_assert(alignof(PAWN_Avatar_C_InpActEvt_Gamepad_Cyber_RollRight_K2Node_InputActionEvent_64) == 0x000008, "Wrong alignment on PAWN_Avatar_C_InpActEvt_Gamepad_Cyber_RollRight_K2Node_InputActionEvent_64");
static_assert(sizeof(PAWN_Avatar_C_InpActEvt_Gamepad_Cyber_RollRight_K2Node_InputActionEvent_64) == 0x000018, "Wrong size on PAWN_Avatar_C_InpActEvt_Gamepad_Cyber_RollRight_K2Node_InputActionEvent_64");
static_assert(offsetof(PAWN_Avatar_C_InpActEvt_Gamepad_Cyber_RollRight_K2Node_InputActionEvent_64, Key) == 0x000000, "Member 'PAWN_Avatar_C_InpActEvt_Gamepad_Cyber_RollRight_K2Node_InputActionEvent_64::Key' has a wrong offset!");

// Function PAWN_Avatar.PAWN_Avatar_C.InpActEvt_Gamepad_Cyber_RollRight_K2Node_InputActionEvent_65
// 0x0018 (0x0018 - 0x0000)
struct PAWN_Avatar_C_InpActEvt_Gamepad_Cyber_RollRight_K2Node_InputActionEvent_65 final
{
public:
	struct FKey                                   Key;                                               // 0x0000(0x0018)(BlueprintVisible, BlueprintReadOnly, Parm, HasGetValueTypeHash)
};
static_assert(alignof(PAWN_Avatar_C_InpActEvt_Gamepad_Cyber_RollRight_K2Node_InputActionEvent_65) == 0x000008, "Wrong alignment on PAWN_Avatar_C_InpActEvt_Gamepad_Cyber_RollRight_K2Node_InputActionEvent_65");
static_assert(sizeof(PAWN_Avatar_C_InpActEvt_Gamepad_Cyber_RollRight_K2Node_InputActionEvent_65) == 0x000018, "Wrong size on PAWN_Avatar_C_InpActEvt_Gamepad_Cyber_RollRight_K2Node_InputActionEvent_65");
static_assert(offsetof(PAWN_Avatar_C_InpActEvt_Gamepad_Cyber_RollRight_K2Node_InputActionEvent_65, Key) == 0x000000, "Member 'PAWN_Avatar_C_InpActEvt_Gamepad_Cyber_RollRight_K2Node_InputActionEvent_65::Key' has a wrong offset!");

// Function PAWN_Avatar.PAWN_Avatar_C.InpActEvt_Gamepad_Cyber_Descend_K2Node_InputActionEvent_66
// 0x0018 (0x0018 - 0x0000)
struct PAWN_Avatar_C_InpActEvt_Gamepad_Cyber_Descend_K2Node_InputActionEvent_66 final
{
public:
	struct FKey                                   Key;                                               // 0x0000(0x0018)(BlueprintVisible, BlueprintReadOnly, Parm, HasGetValueTypeHash)
};
static_assert(alignof(PAWN_Avatar_C_InpActEvt_Gamepad_Cyber_Descend_K2Node_InputActionEvent_66) == 0x000008, "Wrong alignment on PAWN_Avatar_C_InpActEvt_Gamepad_Cyber_Descend_K2Node_InputActionEvent_66");
static_assert(sizeof(PAWN_Avatar_C_InpActEvt_Gamepad_Cyber_Descend_K2Node_InputActionEvent_66) == 0x000018, "Wrong size on PAWN_Avatar_C_InpActEvt_Gamepad_Cyber_Descend_K2Node_InputActionEvent_66");
static_assert(offsetof(PAWN_Avatar_C_InpActEvt_Gamepad_Cyber_Descend_K2Node_InputActionEvent_66, Key) == 0x000000, "Member 'PAWN_Avatar_C_InpActEvt_Gamepad_Cyber_Descend_K2Node_InputActionEvent_66::Key' has a wrong offset!");

// Function PAWN_Avatar.PAWN_Avatar_C.InpActEvt_Gamepad_Cyber_Descend_K2Node_InputActionEvent_67
// 0x0018 (0x0018 - 0x0000)
struct PAWN_Avatar_C_InpActEvt_Gamepad_Cyber_Descend_K2Node_InputActionEvent_67 final
{
public:
	struct FKey                                   Key;                                               // 0x0000(0x0018)(BlueprintVisible, BlueprintReadOnly, Parm, HasGetValueTypeHash)
};
static_assert(alignof(PAWN_Avatar_C_InpActEvt_Gamepad_Cyber_Descend_K2Node_InputActionEvent_67) == 0x000008, "Wrong alignment on PAWN_Avatar_C_InpActEvt_Gamepad_Cyber_Descend_K2Node_InputActionEvent_67");
static_assert(sizeof(PAWN_Avatar_C_InpActEvt_Gamepad_Cyber_Descend_K2Node_InputActionEvent_67) == 0x000018, "Wrong size on PAWN_Avatar_C_InpActEvt_Gamepad_Cyber_Descend_K2Node_InputActionEvent_67");
static_assert(offsetof(PAWN_Avatar_C_InpActEvt_Gamepad_Cyber_Descend_K2Node_InputActionEvent_67, Key) == 0x000000, "Member 'PAWN_Avatar_C_InpActEvt_Gamepad_Cyber_Descend_K2Node_InputActionEvent_67::Key' has a wrong offset!");

// Function PAWN_Avatar.PAWN_Avatar_C.InpActEvt_Cyber_Descend_K2Node_InputActionEvent_68
// 0x0018 (0x0018 - 0x0000)
struct PAWN_Avatar_C_InpActEvt_Cyber_Descend_K2Node_InputActionEvent_68 final
{
public:
	struct FKey                                   Key;                                               // 0x0000(0x0018)(BlueprintVisible, BlueprintReadOnly, Parm, HasGetValueTypeHash)
};
static_assert(alignof(PAWN_Avatar_C_InpActEvt_Cyber_Descend_K2Node_InputActionEvent_68) == 0x000008, "Wrong alignment on PAWN_Avatar_C_InpActEvt_Cyber_Descend_K2Node_InputActionEvent_68");
static_assert(sizeof(PAWN_Avatar_C_InpActEvt_Cyber_Descend_K2Node_InputActionEvent_68) == 0x000018, "Wrong size on PAWN_Avatar_C_InpActEvt_Cyber_Descend_K2Node_InputActionEvent_68");
static_assert(offsetof(PAWN_Avatar_C_InpActEvt_Cyber_Descend_K2Node_InputActionEvent_68, Key) == 0x000000, "Member 'PAWN_Avatar_C_InpActEvt_Cyber_Descend_K2Node_InputActionEvent_68::Key' has a wrong offset!");

// Function PAWN_Avatar.PAWN_Avatar_C.InpActEvt_Cyber_Descend_K2Node_InputActionEvent_69
// 0x0018 (0x0018 - 0x0000)
struct PAWN_Avatar_C_InpActEvt_Cyber_Descend_K2Node_InputActionEvent_69 final
{
public:
	struct FKey                                   Key;                                               // 0x0000(0x0018)(BlueprintVisible, BlueprintReadOnly, Parm, HasGetValueTypeHash)
};
static_assert(alignof(PAWN_Avatar_C_InpActEvt_Cyber_Descend_K2Node_InputActionEvent_69) == 0x000008, "Wrong alignment on PAWN_Avatar_C_InpActEvt_Cyber_Descend_K2Node_InputActionEvent_69");
static_assert(sizeof(PAWN_Avatar_C_InpActEvt_Cyber_Descend_K2Node_InputActionEvent_69) == 0x000018, "Wrong size on PAWN_Avatar_C_InpActEvt_Cyber_Descend_K2Node_InputActionEvent_69");
static_assert(offsetof(PAWN_Avatar_C_InpActEvt_Cyber_Descend_K2Node_InputActionEvent_69, Key) == 0x000000, "Member 'PAWN_Avatar_C_InpActEvt_Cyber_Descend_K2Node_InputActionEvent_69::Key' has a wrong offset!");

// Function PAWN_Avatar.PAWN_Avatar_C.InpActEvt_Cyber_RollRight_K2Node_InputActionEvent_70
// 0x0018 (0x0018 - 0x0000)
struct PAWN_Avatar_C_InpActEvt_Cyber_RollRight_K2Node_InputActionEvent_70 final
{
public:
	struct FKey                                   Key;                                               // 0x0000(0x0018)(BlueprintVisible, BlueprintReadOnly, Parm, HasGetValueTypeHash)
};
static_assert(alignof(PAWN_Avatar_C_InpActEvt_Cyber_RollRight_K2Node_InputActionEvent_70) == 0x000008, "Wrong alignment on PAWN_Avatar_C_InpActEvt_Cyber_RollRight_K2Node_InputActionEvent_70");
static_assert(sizeof(PAWN_Avatar_C_InpActEvt_Cyber_RollRight_K2Node_InputActionEvent_70) == 0x000018, "Wrong size on PAWN_Avatar_C_InpActEvt_Cyber_RollRight_K2Node_InputActionEvent_70");
static_assert(offsetof(PAWN_Avatar_C_InpActEvt_Cyber_RollRight_K2Node_InputActionEvent_70, Key) == 0x000000, "Member 'PAWN_Avatar_C_InpActEvt_Cyber_RollRight_K2Node_InputActionEvent_70::Key' has a wrong offset!");

// Function PAWN_Avatar.PAWN_Avatar_C.InpActEvt_Cyber_RollRight_K2Node_InputActionEvent_71
// 0x0018 (0x0018 - 0x0000)
struct PAWN_Avatar_C_InpActEvt_Cyber_RollRight_K2Node_InputActionEvent_71 final
{
public:
	struct FKey                                   Key;                                               // 0x0000(0x0018)(BlueprintVisible, BlueprintReadOnly, Parm, HasGetValueTypeHash)
};
static_assert(alignof(PAWN_Avatar_C_InpActEvt_Cyber_RollRight_K2Node_InputActionEvent_71) == 0x000008, "Wrong alignment on PAWN_Avatar_C_InpActEvt_Cyber_RollRight_K2Node_InputActionEvent_71");
static_assert(sizeof(PAWN_Avatar_C_InpActEvt_Cyber_RollRight_K2Node_InputActionEvent_71) == 0x000018, "Wrong size on PAWN_Avatar_C_InpActEvt_Cyber_RollRight_K2Node_InputActionEvent_71");
static_assert(offsetof(PAWN_Avatar_C_InpActEvt_Cyber_RollRight_K2Node_InputActionEvent_71, Key) == 0x000000, "Member 'PAWN_Avatar_C_InpActEvt_Cyber_RollRight_K2Node_InputActionEvent_71::Key' has a wrong offset!");

// Function PAWN_Avatar.PAWN_Avatar_C.InpActEvt_Cyber_RollLeft_K2Node_InputActionEvent_72
// 0x0018 (0x0018 - 0x0000)
struct PAWN_Avatar_C_InpActEvt_Cyber_RollLeft_K2Node_InputActionEvent_72 final
{
public:
	struct FKey                                   Key;                                               // 0x0000(0x0018)(BlueprintVisible, BlueprintReadOnly, Parm, HasGetValueTypeHash)
};
static_assert(alignof(PAWN_Avatar_C_InpActEvt_Cyber_RollLeft_K2Node_InputActionEvent_72) == 0x000008, "Wrong alignment on PAWN_Avatar_C_InpActEvt_Cyber_RollLeft_K2Node_InputActionEvent_72");
static_assert(sizeof(PAWN_Avatar_C_InpActEvt_Cyber_RollLeft_K2Node_InputActionEvent_72) == 0x000018, "Wrong size on PAWN_Avatar_C_InpActEvt_Cyber_RollLeft_K2Node_InputActionEvent_72");
static_assert(offsetof(PAWN_Avatar_C_InpActEvt_Cyber_RollLeft_K2Node_InputActionEvent_72, Key) == 0x000000, "Member 'PAWN_Avatar_C_InpActEvt_Cyber_RollLeft_K2Node_InputActionEvent_72::Key' has a wrong offset!");

// Function PAWN_Avatar.PAWN_Avatar_C.InpActEvt_Cyber_RollLeft_K2Node_InputActionEvent_73
// 0x0018 (0x0018 - 0x0000)
struct PAWN_Avatar_C_InpActEvt_Cyber_RollLeft_K2Node_InputActionEvent_73 final
{
public:
	struct FKey                                   Key;                                               // 0x0000(0x0018)(BlueprintVisible, BlueprintReadOnly, Parm, HasGetValueTypeHash)
};
static_assert(alignof(PAWN_Avatar_C_InpActEvt_Cyber_RollLeft_K2Node_InputActionEvent_73) == 0x000008, "Wrong alignment on PAWN_Avatar_C_InpActEvt_Cyber_RollLeft_K2Node_InputActionEvent_73");
static_assert(sizeof(PAWN_Avatar_C_InpActEvt_Cyber_RollLeft_K2Node_InputActionEvent_73) == 0x000018, "Wrong size on PAWN_Avatar_C_InpActEvt_Cyber_RollLeft_K2Node_InputActionEvent_73");
static_assert(offsetof(PAWN_Avatar_C_InpActEvt_Cyber_RollLeft_K2Node_InputActionEvent_73, Key) == 0x000000, "Member 'PAWN_Avatar_C_InpActEvt_Cyber_RollLeft_K2Node_InputActionEvent_73::Key' has a wrong offset!");

// Function PAWN_Avatar.PAWN_Avatar_C.InpActEvt_Cyber_TurboDash_K2Node_InputActionEvent_74
// 0x0018 (0x0018 - 0x0000)
struct PAWN_Avatar_C_InpActEvt_Cyber_TurboDash_K2Node_InputActionEvent_74 final
{
public:
	struct FKey                                   Key;                                               // 0x0000(0x0018)(BlueprintVisible, BlueprintReadOnly, Parm, HasGetValueTypeHash)
};
static_assert(alignof(PAWN_Avatar_C_InpActEvt_Cyber_TurboDash_K2Node_InputActionEvent_74) == 0x000008, "Wrong alignment on PAWN_Avatar_C_InpActEvt_Cyber_TurboDash_K2Node_InputActionEvent_74");
static_assert(sizeof(PAWN_Avatar_C_InpActEvt_Cyber_TurboDash_K2Node_InputActionEvent_74) == 0x000018, "Wrong size on PAWN_Avatar_C_InpActEvt_Cyber_TurboDash_K2Node_InputActionEvent_74");
static_assert(offsetof(PAWN_Avatar_C_InpActEvt_Cyber_TurboDash_K2Node_InputActionEvent_74, Key) == 0x000000, "Member 'PAWN_Avatar_C_InpActEvt_Cyber_TurboDash_K2Node_InputActionEvent_74::Key' has a wrong offset!");

// Function PAWN_Avatar.PAWN_Avatar_C.InpActEvt_Cyber_TurboDash_K2Node_InputActionEvent_75
// 0x0018 (0x0018 - 0x0000)
struct PAWN_Avatar_C_InpActEvt_Cyber_TurboDash_K2Node_InputActionEvent_75 final
{
public:
	struct FKey                                   Key;                                               // 0x0000(0x0018)(BlueprintVisible, BlueprintReadOnly, Parm, HasGetValueTypeHash)
};
static_assert(alignof(PAWN_Avatar_C_InpActEvt_Cyber_TurboDash_K2Node_InputActionEvent_75) == 0x000008, "Wrong alignment on PAWN_Avatar_C_InpActEvt_Cyber_TurboDash_K2Node_InputActionEvent_75");
static_assert(sizeof(PAWN_Avatar_C_InpActEvt_Cyber_TurboDash_K2Node_InputActionEvent_75) == 0x000018, "Wrong size on PAWN_Avatar_C_InpActEvt_Cyber_TurboDash_K2Node_InputActionEvent_75");
static_assert(offsetof(PAWN_Avatar_C_InpActEvt_Cyber_TurboDash_K2Node_InputActionEvent_75, Key) == 0x000000, "Member 'PAWN_Avatar_C_InpActEvt_Cyber_TurboDash_K2Node_InputActionEvent_75::Key' has a wrong offset!");

// Function PAWN_Avatar.PAWN_Avatar_C.InpActEvt_Cyber_PrimaryAttack_K2Node_InputActionEvent_76
// 0x0018 (0x0018 - 0x0000)
struct PAWN_Avatar_C_InpActEvt_Cyber_PrimaryAttack_K2Node_InputActionEvent_76 final
{
public:
	struct FKey                                   Key;                                               // 0x0000(0x0018)(BlueprintVisible, BlueprintReadOnly, Parm, HasGetValueTypeHash)
};
static_assert(alignof(PAWN_Avatar_C_InpActEvt_Cyber_PrimaryAttack_K2Node_InputActionEvent_76) == 0x000008, "Wrong alignment on PAWN_Avatar_C_InpActEvt_Cyber_PrimaryAttack_K2Node_InputActionEvent_76");
static_assert(sizeof(PAWN_Avatar_C_InpActEvt_Cyber_PrimaryAttack_K2Node_InputActionEvent_76) == 0x000018, "Wrong size on PAWN_Avatar_C_InpActEvt_Cyber_PrimaryAttack_K2Node_InputActionEvent_76");
static_assert(offsetof(PAWN_Avatar_C_InpActEvt_Cyber_PrimaryAttack_K2Node_InputActionEvent_76, Key) == 0x000000, "Member 'PAWN_Avatar_C_InpActEvt_Cyber_PrimaryAttack_K2Node_InputActionEvent_76::Key' has a wrong offset!");

// Function PAWN_Avatar.PAWN_Avatar_C.InpActEvt_Cyber_PrimaryAttack_K2Node_InputActionEvent_77
// 0x0018 (0x0018 - 0x0000)
struct PAWN_Avatar_C_InpActEvt_Cyber_PrimaryAttack_K2Node_InputActionEvent_77 final
{
public:
	struct FKey                                   Key;                                               // 0x0000(0x0018)(BlueprintVisible, BlueprintReadOnly, Parm, HasGetValueTypeHash)
};
static_assert(alignof(PAWN_Avatar_C_InpActEvt_Cyber_PrimaryAttack_K2Node_InputActionEvent_77) == 0x000008, "Wrong alignment on PAWN_Avatar_C_InpActEvt_Cyber_PrimaryAttack_K2Node_InputActionEvent_77");
static_assert(sizeof(PAWN_Avatar_C_InpActEvt_Cyber_PrimaryAttack_K2Node_InputActionEvent_77) == 0x000018, "Wrong size on PAWN_Avatar_C_InpActEvt_Cyber_PrimaryAttack_K2Node_InputActionEvent_77");
static_assert(offsetof(PAWN_Avatar_C_InpActEvt_Cyber_PrimaryAttack_K2Node_InputActionEvent_77, Key) == 0x000000, "Member 'PAWN_Avatar_C_InpActEvt_Cyber_PrimaryAttack_K2Node_InputActionEvent_77::Key' has a wrong offset!");

// Function PAWN_Avatar.PAWN_Avatar_C.InpActEvt_Cyber_SecondaryAttack_K2Node_InputActionEvent_78
// 0x0018 (0x0018 - 0x0000)
struct PAWN_Avatar_C_InpActEvt_Cyber_SecondaryAttack_K2Node_InputActionEvent_78 final
{
public:
	struct FKey                                   Key;                                               // 0x0000(0x0018)(BlueprintVisible, BlueprintReadOnly, Parm, HasGetValueTypeHash)
};
static_assert(alignof(PAWN_Avatar_C_InpActEvt_Cyber_SecondaryAttack_K2Node_InputActionEvent_78) == 0x000008, "Wrong alignment on PAWN_Avatar_C_InpActEvt_Cyber_SecondaryAttack_K2Node_InputActionEvent_78");
static_assert(sizeof(PAWN_Avatar_C_InpActEvt_Cyber_SecondaryAttack_K2Node_InputActionEvent_78) == 0x000018, "Wrong size on PAWN_Avatar_C_InpActEvt_Cyber_SecondaryAttack_K2Node_InputActionEvent_78");
static_assert(offsetof(PAWN_Avatar_C_InpActEvt_Cyber_SecondaryAttack_K2Node_InputActionEvent_78, Key) == 0x000000, "Member 'PAWN_Avatar_C_InpActEvt_Cyber_SecondaryAttack_K2Node_InputActionEvent_78::Key' has a wrong offset!");

// Function PAWN_Avatar.PAWN_Avatar_C.InpActEvt_Cyber_SecondaryAttack_K2Node_InputActionEvent_79
// 0x0018 (0x0018 - 0x0000)
struct PAWN_Avatar_C_InpActEvt_Cyber_SecondaryAttack_K2Node_InputActionEvent_79 final
{
public:
	struct FKey                                   Key;                                               // 0x0000(0x0018)(BlueprintVisible, BlueprintReadOnly, Parm, HasGetValueTypeHash)
};
static_assert(alignof(PAWN_Avatar_C_InpActEvt_Cyber_SecondaryAttack_K2Node_InputActionEvent_79) == 0x000008, "Wrong alignment on PAWN_Avatar_C_InpActEvt_Cyber_SecondaryAttack_K2Node_InputActionEvent_79");
static_assert(sizeof(PAWN_Avatar_C_InpActEvt_Cyber_SecondaryAttack_K2Node_InputActionEvent_79) == 0x000018, "Wrong size on PAWN_Avatar_C_InpActEvt_Cyber_SecondaryAttack_K2Node_InputActionEvent_79");
static_assert(offsetof(PAWN_Avatar_C_InpActEvt_Cyber_SecondaryAttack_K2Node_InputActionEvent_79, Key) == 0x000000, "Member 'PAWN_Avatar_C_InpActEvt_Cyber_SecondaryAttack_K2Node_InputActionEvent_79::Key' has a wrong offset!");

// Function PAWN_Avatar.PAWN_Avatar_C.InpActEvt_Cyber_Ascend_K2Node_InputActionEvent_80
// 0x0018 (0x0018 - 0x0000)
struct PAWN_Avatar_C_InpActEvt_Cyber_Ascend_K2Node_InputActionEvent_80 final
{
public:
	struct FKey                                   Key;                                               // 0x0000(0x0018)(BlueprintVisible, BlueprintReadOnly, Parm, HasGetValueTypeHash)
};
static_assert(alignof(PAWN_Avatar_C_InpActEvt_Cyber_Ascend_K2Node_InputActionEvent_80) == 0x000008, "Wrong alignment on PAWN_Avatar_C_InpActEvt_Cyber_Ascend_K2Node_InputActionEvent_80");
static_assert(sizeof(PAWN_Avatar_C_InpActEvt_Cyber_Ascend_K2Node_InputActionEvent_80) == 0x000018, "Wrong size on PAWN_Avatar_C_InpActEvt_Cyber_Ascend_K2Node_InputActionEvent_80");
static_assert(offsetof(PAWN_Avatar_C_InpActEvt_Cyber_Ascend_K2Node_InputActionEvent_80, Key) == 0x000000, "Member 'PAWN_Avatar_C_InpActEvt_Cyber_Ascend_K2Node_InputActionEvent_80::Key' has a wrong offset!");

// Function PAWN_Avatar.PAWN_Avatar_C.InpActEvt_Cyber_Ascend_K2Node_InputActionEvent_81
// 0x0018 (0x0018 - 0x0000)
struct PAWN_Avatar_C_InpActEvt_Cyber_Ascend_K2Node_InputActionEvent_81 final
{
public:
	struct FKey                                   Key;                                               // 0x0000(0x0018)(BlueprintVisible, BlueprintReadOnly, Parm, HasGetValueTypeHash)
};
static_assert(alignof(PAWN_Avatar_C_InpActEvt_Cyber_Ascend_K2Node_InputActionEvent_81) == 0x000008, "Wrong alignment on PAWN_Avatar_C_InpActEvt_Cyber_Ascend_K2Node_InputActionEvent_81");
static_assert(sizeof(PAWN_Avatar_C_InpActEvt_Cyber_Ascend_K2Node_InputActionEvent_81) == 0x000018, "Wrong size on PAWN_Avatar_C_InpActEvt_Cyber_Ascend_K2Node_InputActionEvent_81");
static_assert(offsetof(PAWN_Avatar_C_InpActEvt_Cyber_Ascend_K2Node_InputActionEvent_81, Key) == 0x000000, "Member 'PAWN_Avatar_C_InpActEvt_Cyber_Ascend_K2Node_InputActionEvent_81::Key' has a wrong offset!");

// Function PAWN_Avatar.PAWN_Avatar_C.InpActEvt_Z_K2Node_InputKeyEvent_1
// 0x0018 (0x0018 - 0x0000)
struct PAWN_Avatar_C_InpActEvt_Z_K2Node_InputKeyEvent_1 final
{
public:
	struct FKey                                   Key;                                               // 0x0000(0x0018)(BlueprintVisible, BlueprintReadOnly, Parm, HasGetValueTypeHash)
};
static_assert(alignof(PAWN_Avatar_C_InpActEvt_Z_K2Node_InputKeyEvent_1) == 0x000008, "Wrong alignment on PAWN_Avatar_C_InpActEvt_Z_K2Node_InputKeyEvent_1");
static_assert(sizeof(PAWN_Avatar_C_InpActEvt_Z_K2Node_InputKeyEvent_1) == 0x000018, "Wrong size on PAWN_Avatar_C_InpActEvt_Z_K2Node_InputKeyEvent_1");
static_assert(offsetof(PAWN_Avatar_C_InpActEvt_Z_K2Node_InputKeyEvent_1, Key) == 0x000000, "Member 'PAWN_Avatar_C_InpActEvt_Z_K2Node_InputKeyEvent_1::Key' has a wrong offset!");

// Function PAWN_Avatar.PAWN_Avatar_C.UpdateAvatar
// 0x0008 (0x0008 - 0x0000)
struct PAWN_Avatar_C_UpdateAvatar final
{
public:
	float                                         DeltaTime;                                         // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Not_PreBool_ReturnValue;                  // 0x0004(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(PAWN_Avatar_C_UpdateAvatar) == 0x000004, "Wrong alignment on PAWN_Avatar_C_UpdateAvatar");
static_assert(sizeof(PAWN_Avatar_C_UpdateAvatar) == 0x000008, "Wrong size on PAWN_Avatar_C_UpdateAvatar");
static_assert(offsetof(PAWN_Avatar_C_UpdateAvatar, DeltaTime) == 0x000000, "Member 'PAWN_Avatar_C_UpdateAvatar::DeltaTime' has a wrong offset!");
static_assert(offsetof(PAWN_Avatar_C_UpdateAvatar, CallFunc_Not_PreBool_ReturnValue) == 0x000004, "Member 'PAWN_Avatar_C_UpdateAvatar::CallFunc_Not_PreBool_ReturnValue' has a wrong offset!");

// Function PAWN_Avatar.PAWN_Avatar_C.UpdateMovement
// 0x0288 (0x0288 - 0x0000)
struct PAWN_Avatar_C_UpdateMovement final
{
public:
	float                                         DeltaTime;                                         // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         PreviousLinkDistance;                              // 0x0004(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CurrentLinkSpeedProgress;                          // 0x0008(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                DomainLinkDirection;                               // 0x000C(0x000C)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class ACYBR_DomainLink_C*                     DomainLink;                                        // 0x0018(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         BounceProgress;                                    // 0x0020(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         ForwardDeviationInputScale;                        // 0x0024(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         InputScale;                                        // 0x0028(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                InputDirection;                                    // 0x002C(0x000C)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Abs_ReturnValue;                          // 0x0038(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Abs_ReturnValue_1;                        // 0x003C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Multiply_FloatFloat_ReturnValue;          // 0x0040(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Multiply_FloatFloat_ReturnValue_1;        // 0x0044(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Multiply_FloatFloat_ReturnValue_2;        // 0x0048(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Subtract_FloatFloat_ReturnValue;          // 0x004C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_FMax_ReturnValue;                         // 0x0050(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Abs_ReturnValue_2;                        // 0x0054(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Abs_ReturnValue_3;                        // 0x0058(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Lerp_ReturnValue;                         // 0x005C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Add_FloatFloat_ReturnValue;               // 0x0060(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Add_FloatFloat_ReturnValue_1;             // 0x0064(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_GetActorForwardVector_ReturnValue;        // 0x0068(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Add_FloatFloat_ReturnValue_2;             // 0x0074(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Divide_FloatFloat_ReturnValue;            // 0x0078(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Dot_VectorVector_ReturnValue;             // 0x007C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Add_FloatFloat_ReturnValue_3;             // 0x0080(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Abs_ReturnValue_4;                        // 0x0084(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_FMin_ReturnValue;                         // 0x0088(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_FMax_ReturnValue_1;                       // 0x008C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Ease_ReturnValue;                         // 0x0090(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_GetActorForwardVector_ReturnValue_1;      // 0x0094(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Multiply_FloatFloat_ReturnValue_3;        // 0x00A0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Multiply_VectorFloat_ReturnValue;         // 0x00A4(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Add_VectorVector_ReturnValue;             // 0x00B0(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_GetMaxAvatarFlySpeed_Result;              // 0x00BC(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Divide_FloatFloat_ReturnValue_1;          // 0x00C0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_GetMaxAvatarFlySpeed_Result_1;            // 0x00C4(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Abs_ReturnValue_5;                        // 0x00C8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_GetAvatarAcceleration_Result;             // 0x00CC(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Add_VectorVector_ReturnValue_1;           // 0x00D0(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Multiply_FloatFloat_ReturnValue_4;        // 0x00DC(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Multiply_FloatFloat_ReturnValue_5;        // 0x00E0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Multiply_FloatFloat_ReturnValue_6;        // 0x00E4(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Divide_FloatFloat_ReturnValue_2;          // 0x00E8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Lerp_ReturnValue_1;                       // 0x00EC(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Dot_VectorVector_ReturnValue_1;           // 0x00F0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Abs_ReturnValue_6;                        // 0x00F4(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_VLerp_ReturnValue;                        // 0x00F8(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_FMin_ReturnValue_1;                       // 0x0104(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Lerp_ReturnValue_2;                       // 0x0108(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Vector_IsNearlyZero_ReturnValue;          // 0x010C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Not_PreBool_ReturnValue;                  // 0x010D(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_10E[0x2];                                      // 0x010E(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                CallFunc_K2_GetActorLocation_ReturnValue;          // 0x0110(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Dot_VectorVector_ReturnValue_2;           // 0x011C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_GetDomainLinkDirection_Direction;         // 0x0120(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_K2_GetActorLocation_ReturnValue_1;        // 0x012C(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0138(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Less_FloatFloat_ReturnValue;              // 0x0139(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_GreaterEqual_FloatFloat_ReturnValue;      // 0x013A(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_13B[0x1];                                      // 0x013B(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_Ease_ReturnValue_1;                       // 0x013C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Temp_float_Variable;                               // 0x0140(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Multiply_FloatFloat_ReturnValue_7;        // 0x0144(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_GetGameTimeInSeconds_ReturnValue;         // 0x0148(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Subtract_FloatFloat_ReturnValue_1;        // 0x014C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_GreaterEqual_FloatFloat_ReturnValue_1;    // 0x0150(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_151[0x3];                                      // 0x0151(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_Divide_FloatFloat_ReturnValue_3;          // 0x0154(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Temp_float_Variable_1;                             // 0x0158(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Multiply_FloatFloat_ReturnValue_8;        // 0x015C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Multiply_FloatFloat_ReturnValue_9;        // 0x0160(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Multiply_FloatFloat_ReturnValue_10;       // 0x0164(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Add_FloatFloat_ReturnValue_4;             // 0x0168(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Subtract_FloatFloat_ReturnValue_2;        // 0x016C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_FMin_ReturnValue_2;                       // 0x0170(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_FMax_ReturnValue_2;                       // 0x0174(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Greater_FloatFloat_ReturnValue;           // 0x0178(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_179[0x3];                                      // 0x0179(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                CallFunc_GetDomainLinkMoveLocation_ResultLocation; // 0x017C(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FHitResult                             CallFunc_K2_SetActorLocation_SweepHitResult;       // 0x0188(0x0088)(IsPlainOldData, NoDestructor, ContainsInstancedReference)
	bool                                          CallFunc_K2_SetActorLocation_ReturnValue;          // 0x0210(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Temp_bool_Variable;                                // 0x0211(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_212[0x2];                                      // 0x0212(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_VSizeSquared_ReturnValue;                 // 0x0214(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Greater_FloatFloat_ReturnValue_1;         // 0x0218(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_219[0x3];                                      // 0x0219(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         K2Node_Select_Default;                             // 0x021C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Multiply_FloatFloat_ReturnValue_11;       // 0x0220(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_GetActorForwardVector_ReturnValue_2;      // 0x0224(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Add_FloatFloat_ReturnValue_5;             // 0x0230(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Dot_VectorVector_ReturnValue_3;           // 0x0234(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Multiply_FloatFloat_ReturnValue_12;       // 0x0238(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               CallFunc_K2_GetActorRotation_ReturnValue;          // 0x023C(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                         CallFunc_Add_FloatFloat_ReturnValue_6;             // 0x0248(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Lerp_ReturnValue_3;                       // 0x024C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Normal_ReturnValue;                       // 0x0250(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               CallFunc_Conv_VectorToRotator_ReturnValue;         // 0x025C(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FRotator                               CallFunc_ComposeRotators_ReturnValue;              // 0x0268(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsValid_ReturnValue_1;                    // 0x0274(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_275[0x3];                                      // 0x0275(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                CallFunc_GetForwardVector_ReturnValue;             // 0x0278(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(PAWN_Avatar_C_UpdateMovement) == 0x000008, "Wrong alignment on PAWN_Avatar_C_UpdateMovement");
static_assert(sizeof(PAWN_Avatar_C_UpdateMovement) == 0x000288, "Wrong size on PAWN_Avatar_C_UpdateMovement");
static_assert(offsetof(PAWN_Avatar_C_UpdateMovement, DeltaTime) == 0x000000, "Member 'PAWN_Avatar_C_UpdateMovement::DeltaTime' has a wrong offset!");
static_assert(offsetof(PAWN_Avatar_C_UpdateMovement, PreviousLinkDistance) == 0x000004, "Member 'PAWN_Avatar_C_UpdateMovement::PreviousLinkDistance' has a wrong offset!");
static_assert(offsetof(PAWN_Avatar_C_UpdateMovement, CurrentLinkSpeedProgress) == 0x000008, "Member 'PAWN_Avatar_C_UpdateMovement::CurrentLinkSpeedProgress' has a wrong offset!");
static_assert(offsetof(PAWN_Avatar_C_UpdateMovement, DomainLinkDirection) == 0x00000C, "Member 'PAWN_Avatar_C_UpdateMovement::DomainLinkDirection' has a wrong offset!");
static_assert(offsetof(PAWN_Avatar_C_UpdateMovement, DomainLink) == 0x000018, "Member 'PAWN_Avatar_C_UpdateMovement::DomainLink' has a wrong offset!");
static_assert(offsetof(PAWN_Avatar_C_UpdateMovement, BounceProgress) == 0x000020, "Member 'PAWN_Avatar_C_UpdateMovement::BounceProgress' has a wrong offset!");
static_assert(offsetof(PAWN_Avatar_C_UpdateMovement, ForwardDeviationInputScale) == 0x000024, "Member 'PAWN_Avatar_C_UpdateMovement::ForwardDeviationInputScale' has a wrong offset!");
static_assert(offsetof(PAWN_Avatar_C_UpdateMovement, InputScale) == 0x000028, "Member 'PAWN_Avatar_C_UpdateMovement::InputScale' has a wrong offset!");
static_assert(offsetof(PAWN_Avatar_C_UpdateMovement, InputDirection) == 0x00002C, "Member 'PAWN_Avatar_C_UpdateMovement::InputDirection' has a wrong offset!");
static_assert(offsetof(PAWN_Avatar_C_UpdateMovement, CallFunc_Abs_ReturnValue) == 0x000038, "Member 'PAWN_Avatar_C_UpdateMovement::CallFunc_Abs_ReturnValue' has a wrong offset!");
static_assert(offsetof(PAWN_Avatar_C_UpdateMovement, CallFunc_Abs_ReturnValue_1) == 0x00003C, "Member 'PAWN_Avatar_C_UpdateMovement::CallFunc_Abs_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(PAWN_Avatar_C_UpdateMovement, CallFunc_Multiply_FloatFloat_ReturnValue) == 0x000040, "Member 'PAWN_Avatar_C_UpdateMovement::CallFunc_Multiply_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(PAWN_Avatar_C_UpdateMovement, CallFunc_Multiply_FloatFloat_ReturnValue_1) == 0x000044, "Member 'PAWN_Avatar_C_UpdateMovement::CallFunc_Multiply_FloatFloat_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(PAWN_Avatar_C_UpdateMovement, CallFunc_Multiply_FloatFloat_ReturnValue_2) == 0x000048, "Member 'PAWN_Avatar_C_UpdateMovement::CallFunc_Multiply_FloatFloat_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(PAWN_Avatar_C_UpdateMovement, CallFunc_Subtract_FloatFloat_ReturnValue) == 0x00004C, "Member 'PAWN_Avatar_C_UpdateMovement::CallFunc_Subtract_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(PAWN_Avatar_C_UpdateMovement, CallFunc_FMax_ReturnValue) == 0x000050, "Member 'PAWN_Avatar_C_UpdateMovement::CallFunc_FMax_ReturnValue' has a wrong offset!");
static_assert(offsetof(PAWN_Avatar_C_UpdateMovement, CallFunc_Abs_ReturnValue_2) == 0x000054, "Member 'PAWN_Avatar_C_UpdateMovement::CallFunc_Abs_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(PAWN_Avatar_C_UpdateMovement, CallFunc_Abs_ReturnValue_3) == 0x000058, "Member 'PAWN_Avatar_C_UpdateMovement::CallFunc_Abs_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(PAWN_Avatar_C_UpdateMovement, CallFunc_Lerp_ReturnValue) == 0x00005C, "Member 'PAWN_Avatar_C_UpdateMovement::CallFunc_Lerp_ReturnValue' has a wrong offset!");
static_assert(offsetof(PAWN_Avatar_C_UpdateMovement, CallFunc_Add_FloatFloat_ReturnValue) == 0x000060, "Member 'PAWN_Avatar_C_UpdateMovement::CallFunc_Add_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(PAWN_Avatar_C_UpdateMovement, CallFunc_Add_FloatFloat_ReturnValue_1) == 0x000064, "Member 'PAWN_Avatar_C_UpdateMovement::CallFunc_Add_FloatFloat_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(PAWN_Avatar_C_UpdateMovement, CallFunc_GetActorForwardVector_ReturnValue) == 0x000068, "Member 'PAWN_Avatar_C_UpdateMovement::CallFunc_GetActorForwardVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(PAWN_Avatar_C_UpdateMovement, CallFunc_Add_FloatFloat_ReturnValue_2) == 0x000074, "Member 'PAWN_Avatar_C_UpdateMovement::CallFunc_Add_FloatFloat_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(PAWN_Avatar_C_UpdateMovement, CallFunc_Divide_FloatFloat_ReturnValue) == 0x000078, "Member 'PAWN_Avatar_C_UpdateMovement::CallFunc_Divide_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(PAWN_Avatar_C_UpdateMovement, CallFunc_Dot_VectorVector_ReturnValue) == 0x00007C, "Member 'PAWN_Avatar_C_UpdateMovement::CallFunc_Dot_VectorVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(PAWN_Avatar_C_UpdateMovement, CallFunc_Add_FloatFloat_ReturnValue_3) == 0x000080, "Member 'PAWN_Avatar_C_UpdateMovement::CallFunc_Add_FloatFloat_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(PAWN_Avatar_C_UpdateMovement, CallFunc_Abs_ReturnValue_4) == 0x000084, "Member 'PAWN_Avatar_C_UpdateMovement::CallFunc_Abs_ReturnValue_4' has a wrong offset!");
static_assert(offsetof(PAWN_Avatar_C_UpdateMovement, CallFunc_FMin_ReturnValue) == 0x000088, "Member 'PAWN_Avatar_C_UpdateMovement::CallFunc_FMin_ReturnValue' has a wrong offset!");
static_assert(offsetof(PAWN_Avatar_C_UpdateMovement, CallFunc_FMax_ReturnValue_1) == 0x00008C, "Member 'PAWN_Avatar_C_UpdateMovement::CallFunc_FMax_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(PAWN_Avatar_C_UpdateMovement, CallFunc_Ease_ReturnValue) == 0x000090, "Member 'PAWN_Avatar_C_UpdateMovement::CallFunc_Ease_ReturnValue' has a wrong offset!");
static_assert(offsetof(PAWN_Avatar_C_UpdateMovement, CallFunc_GetActorForwardVector_ReturnValue_1) == 0x000094, "Member 'PAWN_Avatar_C_UpdateMovement::CallFunc_GetActorForwardVector_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(PAWN_Avatar_C_UpdateMovement, CallFunc_Multiply_FloatFloat_ReturnValue_3) == 0x0000A0, "Member 'PAWN_Avatar_C_UpdateMovement::CallFunc_Multiply_FloatFloat_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(PAWN_Avatar_C_UpdateMovement, CallFunc_Multiply_VectorFloat_ReturnValue) == 0x0000A4, "Member 'PAWN_Avatar_C_UpdateMovement::CallFunc_Multiply_VectorFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(PAWN_Avatar_C_UpdateMovement, CallFunc_Add_VectorVector_ReturnValue) == 0x0000B0, "Member 'PAWN_Avatar_C_UpdateMovement::CallFunc_Add_VectorVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(PAWN_Avatar_C_UpdateMovement, CallFunc_GetMaxAvatarFlySpeed_Result) == 0x0000BC, "Member 'PAWN_Avatar_C_UpdateMovement::CallFunc_GetMaxAvatarFlySpeed_Result' has a wrong offset!");
static_assert(offsetof(PAWN_Avatar_C_UpdateMovement, CallFunc_Divide_FloatFloat_ReturnValue_1) == 0x0000C0, "Member 'PAWN_Avatar_C_UpdateMovement::CallFunc_Divide_FloatFloat_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(PAWN_Avatar_C_UpdateMovement, CallFunc_GetMaxAvatarFlySpeed_Result_1) == 0x0000C4, "Member 'PAWN_Avatar_C_UpdateMovement::CallFunc_GetMaxAvatarFlySpeed_Result_1' has a wrong offset!");
static_assert(offsetof(PAWN_Avatar_C_UpdateMovement, CallFunc_Abs_ReturnValue_5) == 0x0000C8, "Member 'PAWN_Avatar_C_UpdateMovement::CallFunc_Abs_ReturnValue_5' has a wrong offset!");
static_assert(offsetof(PAWN_Avatar_C_UpdateMovement, CallFunc_GetAvatarAcceleration_Result) == 0x0000CC, "Member 'PAWN_Avatar_C_UpdateMovement::CallFunc_GetAvatarAcceleration_Result' has a wrong offset!");
static_assert(offsetof(PAWN_Avatar_C_UpdateMovement, CallFunc_Add_VectorVector_ReturnValue_1) == 0x0000D0, "Member 'PAWN_Avatar_C_UpdateMovement::CallFunc_Add_VectorVector_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(PAWN_Avatar_C_UpdateMovement, CallFunc_Multiply_FloatFloat_ReturnValue_4) == 0x0000DC, "Member 'PAWN_Avatar_C_UpdateMovement::CallFunc_Multiply_FloatFloat_ReturnValue_4' has a wrong offset!");
static_assert(offsetof(PAWN_Avatar_C_UpdateMovement, CallFunc_Multiply_FloatFloat_ReturnValue_5) == 0x0000E0, "Member 'PAWN_Avatar_C_UpdateMovement::CallFunc_Multiply_FloatFloat_ReturnValue_5' has a wrong offset!");
static_assert(offsetof(PAWN_Avatar_C_UpdateMovement, CallFunc_Multiply_FloatFloat_ReturnValue_6) == 0x0000E4, "Member 'PAWN_Avatar_C_UpdateMovement::CallFunc_Multiply_FloatFloat_ReturnValue_6' has a wrong offset!");
static_assert(offsetof(PAWN_Avatar_C_UpdateMovement, CallFunc_Divide_FloatFloat_ReturnValue_2) == 0x0000E8, "Member 'PAWN_Avatar_C_UpdateMovement::CallFunc_Divide_FloatFloat_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(PAWN_Avatar_C_UpdateMovement, CallFunc_Lerp_ReturnValue_1) == 0x0000EC, "Member 'PAWN_Avatar_C_UpdateMovement::CallFunc_Lerp_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(PAWN_Avatar_C_UpdateMovement, CallFunc_Dot_VectorVector_ReturnValue_1) == 0x0000F0, "Member 'PAWN_Avatar_C_UpdateMovement::CallFunc_Dot_VectorVector_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(PAWN_Avatar_C_UpdateMovement, CallFunc_Abs_ReturnValue_6) == 0x0000F4, "Member 'PAWN_Avatar_C_UpdateMovement::CallFunc_Abs_ReturnValue_6' has a wrong offset!");
static_assert(offsetof(PAWN_Avatar_C_UpdateMovement, CallFunc_VLerp_ReturnValue) == 0x0000F8, "Member 'PAWN_Avatar_C_UpdateMovement::CallFunc_VLerp_ReturnValue' has a wrong offset!");
static_assert(offsetof(PAWN_Avatar_C_UpdateMovement, CallFunc_FMin_ReturnValue_1) == 0x000104, "Member 'PAWN_Avatar_C_UpdateMovement::CallFunc_FMin_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(PAWN_Avatar_C_UpdateMovement, CallFunc_Lerp_ReturnValue_2) == 0x000108, "Member 'PAWN_Avatar_C_UpdateMovement::CallFunc_Lerp_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(PAWN_Avatar_C_UpdateMovement, CallFunc_Vector_IsNearlyZero_ReturnValue) == 0x00010C, "Member 'PAWN_Avatar_C_UpdateMovement::CallFunc_Vector_IsNearlyZero_ReturnValue' has a wrong offset!");
static_assert(offsetof(PAWN_Avatar_C_UpdateMovement, CallFunc_Not_PreBool_ReturnValue) == 0x00010D, "Member 'PAWN_Avatar_C_UpdateMovement::CallFunc_Not_PreBool_ReturnValue' has a wrong offset!");
static_assert(offsetof(PAWN_Avatar_C_UpdateMovement, CallFunc_K2_GetActorLocation_ReturnValue) == 0x000110, "Member 'PAWN_Avatar_C_UpdateMovement::CallFunc_K2_GetActorLocation_ReturnValue' has a wrong offset!");
static_assert(offsetof(PAWN_Avatar_C_UpdateMovement, CallFunc_Dot_VectorVector_ReturnValue_2) == 0x00011C, "Member 'PAWN_Avatar_C_UpdateMovement::CallFunc_Dot_VectorVector_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(PAWN_Avatar_C_UpdateMovement, CallFunc_GetDomainLinkDirection_Direction) == 0x000120, "Member 'PAWN_Avatar_C_UpdateMovement::CallFunc_GetDomainLinkDirection_Direction' has a wrong offset!");
static_assert(offsetof(PAWN_Avatar_C_UpdateMovement, CallFunc_K2_GetActorLocation_ReturnValue_1) == 0x00012C, "Member 'PAWN_Avatar_C_UpdateMovement::CallFunc_K2_GetActorLocation_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(PAWN_Avatar_C_UpdateMovement, CallFunc_IsValid_ReturnValue) == 0x000138, "Member 'PAWN_Avatar_C_UpdateMovement::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(PAWN_Avatar_C_UpdateMovement, CallFunc_Less_FloatFloat_ReturnValue) == 0x000139, "Member 'PAWN_Avatar_C_UpdateMovement::CallFunc_Less_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(PAWN_Avatar_C_UpdateMovement, CallFunc_GreaterEqual_FloatFloat_ReturnValue) == 0x00013A, "Member 'PAWN_Avatar_C_UpdateMovement::CallFunc_GreaterEqual_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(PAWN_Avatar_C_UpdateMovement, CallFunc_Ease_ReturnValue_1) == 0x00013C, "Member 'PAWN_Avatar_C_UpdateMovement::CallFunc_Ease_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(PAWN_Avatar_C_UpdateMovement, Temp_float_Variable) == 0x000140, "Member 'PAWN_Avatar_C_UpdateMovement::Temp_float_Variable' has a wrong offset!");
static_assert(offsetof(PAWN_Avatar_C_UpdateMovement, CallFunc_Multiply_FloatFloat_ReturnValue_7) == 0x000144, "Member 'PAWN_Avatar_C_UpdateMovement::CallFunc_Multiply_FloatFloat_ReturnValue_7' has a wrong offset!");
static_assert(offsetof(PAWN_Avatar_C_UpdateMovement, CallFunc_GetGameTimeInSeconds_ReturnValue) == 0x000148, "Member 'PAWN_Avatar_C_UpdateMovement::CallFunc_GetGameTimeInSeconds_ReturnValue' has a wrong offset!");
static_assert(offsetof(PAWN_Avatar_C_UpdateMovement, CallFunc_Subtract_FloatFloat_ReturnValue_1) == 0x00014C, "Member 'PAWN_Avatar_C_UpdateMovement::CallFunc_Subtract_FloatFloat_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(PAWN_Avatar_C_UpdateMovement, CallFunc_GreaterEqual_FloatFloat_ReturnValue_1) == 0x000150, "Member 'PAWN_Avatar_C_UpdateMovement::CallFunc_GreaterEqual_FloatFloat_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(PAWN_Avatar_C_UpdateMovement, CallFunc_Divide_FloatFloat_ReturnValue_3) == 0x000154, "Member 'PAWN_Avatar_C_UpdateMovement::CallFunc_Divide_FloatFloat_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(PAWN_Avatar_C_UpdateMovement, Temp_float_Variable_1) == 0x000158, "Member 'PAWN_Avatar_C_UpdateMovement::Temp_float_Variable_1' has a wrong offset!");
static_assert(offsetof(PAWN_Avatar_C_UpdateMovement, CallFunc_Multiply_FloatFloat_ReturnValue_8) == 0x00015C, "Member 'PAWN_Avatar_C_UpdateMovement::CallFunc_Multiply_FloatFloat_ReturnValue_8' has a wrong offset!");
static_assert(offsetof(PAWN_Avatar_C_UpdateMovement, CallFunc_Multiply_FloatFloat_ReturnValue_9) == 0x000160, "Member 'PAWN_Avatar_C_UpdateMovement::CallFunc_Multiply_FloatFloat_ReturnValue_9' has a wrong offset!");
static_assert(offsetof(PAWN_Avatar_C_UpdateMovement, CallFunc_Multiply_FloatFloat_ReturnValue_10) == 0x000164, "Member 'PAWN_Avatar_C_UpdateMovement::CallFunc_Multiply_FloatFloat_ReturnValue_10' has a wrong offset!");
static_assert(offsetof(PAWN_Avatar_C_UpdateMovement, CallFunc_Add_FloatFloat_ReturnValue_4) == 0x000168, "Member 'PAWN_Avatar_C_UpdateMovement::CallFunc_Add_FloatFloat_ReturnValue_4' has a wrong offset!");
static_assert(offsetof(PAWN_Avatar_C_UpdateMovement, CallFunc_Subtract_FloatFloat_ReturnValue_2) == 0x00016C, "Member 'PAWN_Avatar_C_UpdateMovement::CallFunc_Subtract_FloatFloat_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(PAWN_Avatar_C_UpdateMovement, CallFunc_FMin_ReturnValue_2) == 0x000170, "Member 'PAWN_Avatar_C_UpdateMovement::CallFunc_FMin_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(PAWN_Avatar_C_UpdateMovement, CallFunc_FMax_ReturnValue_2) == 0x000174, "Member 'PAWN_Avatar_C_UpdateMovement::CallFunc_FMax_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(PAWN_Avatar_C_UpdateMovement, CallFunc_Greater_FloatFloat_ReturnValue) == 0x000178, "Member 'PAWN_Avatar_C_UpdateMovement::CallFunc_Greater_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(PAWN_Avatar_C_UpdateMovement, CallFunc_GetDomainLinkMoveLocation_ResultLocation) == 0x00017C, "Member 'PAWN_Avatar_C_UpdateMovement::CallFunc_GetDomainLinkMoveLocation_ResultLocation' has a wrong offset!");
static_assert(offsetof(PAWN_Avatar_C_UpdateMovement, CallFunc_K2_SetActorLocation_SweepHitResult) == 0x000188, "Member 'PAWN_Avatar_C_UpdateMovement::CallFunc_K2_SetActorLocation_SweepHitResult' has a wrong offset!");
static_assert(offsetof(PAWN_Avatar_C_UpdateMovement, CallFunc_K2_SetActorLocation_ReturnValue) == 0x000210, "Member 'PAWN_Avatar_C_UpdateMovement::CallFunc_K2_SetActorLocation_ReturnValue' has a wrong offset!");
static_assert(offsetof(PAWN_Avatar_C_UpdateMovement, Temp_bool_Variable) == 0x000211, "Member 'PAWN_Avatar_C_UpdateMovement::Temp_bool_Variable' has a wrong offset!");
static_assert(offsetof(PAWN_Avatar_C_UpdateMovement, CallFunc_VSizeSquared_ReturnValue) == 0x000214, "Member 'PAWN_Avatar_C_UpdateMovement::CallFunc_VSizeSquared_ReturnValue' has a wrong offset!");
static_assert(offsetof(PAWN_Avatar_C_UpdateMovement, CallFunc_Greater_FloatFloat_ReturnValue_1) == 0x000218, "Member 'PAWN_Avatar_C_UpdateMovement::CallFunc_Greater_FloatFloat_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(PAWN_Avatar_C_UpdateMovement, K2Node_Select_Default) == 0x00021C, "Member 'PAWN_Avatar_C_UpdateMovement::K2Node_Select_Default' has a wrong offset!");
static_assert(offsetof(PAWN_Avatar_C_UpdateMovement, CallFunc_Multiply_FloatFloat_ReturnValue_11) == 0x000220, "Member 'PAWN_Avatar_C_UpdateMovement::CallFunc_Multiply_FloatFloat_ReturnValue_11' has a wrong offset!");
static_assert(offsetof(PAWN_Avatar_C_UpdateMovement, CallFunc_GetActorForwardVector_ReturnValue_2) == 0x000224, "Member 'PAWN_Avatar_C_UpdateMovement::CallFunc_GetActorForwardVector_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(PAWN_Avatar_C_UpdateMovement, CallFunc_Add_FloatFloat_ReturnValue_5) == 0x000230, "Member 'PAWN_Avatar_C_UpdateMovement::CallFunc_Add_FloatFloat_ReturnValue_5' has a wrong offset!");
static_assert(offsetof(PAWN_Avatar_C_UpdateMovement, CallFunc_Dot_VectorVector_ReturnValue_3) == 0x000234, "Member 'PAWN_Avatar_C_UpdateMovement::CallFunc_Dot_VectorVector_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(PAWN_Avatar_C_UpdateMovement, CallFunc_Multiply_FloatFloat_ReturnValue_12) == 0x000238, "Member 'PAWN_Avatar_C_UpdateMovement::CallFunc_Multiply_FloatFloat_ReturnValue_12' has a wrong offset!");
static_assert(offsetof(PAWN_Avatar_C_UpdateMovement, CallFunc_K2_GetActorRotation_ReturnValue) == 0x00023C, "Member 'PAWN_Avatar_C_UpdateMovement::CallFunc_K2_GetActorRotation_ReturnValue' has a wrong offset!");
static_assert(offsetof(PAWN_Avatar_C_UpdateMovement, CallFunc_Add_FloatFloat_ReturnValue_6) == 0x000248, "Member 'PAWN_Avatar_C_UpdateMovement::CallFunc_Add_FloatFloat_ReturnValue_6' has a wrong offset!");
static_assert(offsetof(PAWN_Avatar_C_UpdateMovement, CallFunc_Lerp_ReturnValue_3) == 0x00024C, "Member 'PAWN_Avatar_C_UpdateMovement::CallFunc_Lerp_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(PAWN_Avatar_C_UpdateMovement, CallFunc_Normal_ReturnValue) == 0x000250, "Member 'PAWN_Avatar_C_UpdateMovement::CallFunc_Normal_ReturnValue' has a wrong offset!");
static_assert(offsetof(PAWN_Avatar_C_UpdateMovement, CallFunc_Conv_VectorToRotator_ReturnValue) == 0x00025C, "Member 'PAWN_Avatar_C_UpdateMovement::CallFunc_Conv_VectorToRotator_ReturnValue' has a wrong offset!");
static_assert(offsetof(PAWN_Avatar_C_UpdateMovement, CallFunc_ComposeRotators_ReturnValue) == 0x000268, "Member 'PAWN_Avatar_C_UpdateMovement::CallFunc_ComposeRotators_ReturnValue' has a wrong offset!");
static_assert(offsetof(PAWN_Avatar_C_UpdateMovement, CallFunc_IsValid_ReturnValue_1) == 0x000274, "Member 'PAWN_Avatar_C_UpdateMovement::CallFunc_IsValid_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(PAWN_Avatar_C_UpdateMovement, CallFunc_GetForwardVector_ReturnValue) == 0x000278, "Member 'PAWN_Avatar_C_UpdateMovement::CallFunc_GetForwardVector_ReturnValue' has a wrong offset!");

// Function PAWN_Avatar.PAWN_Avatar_C.GetWeaponByType
// 0x0040 (0x0040 - 0x0000)
struct PAWN_Avatar_C_GetWeaponByType final
{
public:
	ENUM_PrimarySecondary                         Type;                                              // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UITEM_Base_C*                           Weapon;                                            // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UInventoryBag_C*                        CyberspaceBag;                                     // 0x0010(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UITEM_Base_C*                           CallFunc_FindItem_FoundItem;                       // 0x0018(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_SwitchEnum_CmpSuccess;                      // 0x0020(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_21[0x7];                                       // 0x0021(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UInventoryBag_C*                        CallFunc_GetBagByType_Bag;                         // 0x0028(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UITEM_Base_C*                           CallFunc_FindItem_FoundItem_1;                     // 0x0030(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0038(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(PAWN_Avatar_C_GetWeaponByType) == 0x000008, "Wrong alignment on PAWN_Avatar_C_GetWeaponByType");
static_assert(sizeof(PAWN_Avatar_C_GetWeaponByType) == 0x000040, "Wrong size on PAWN_Avatar_C_GetWeaponByType");
static_assert(offsetof(PAWN_Avatar_C_GetWeaponByType, Type) == 0x000000, "Member 'PAWN_Avatar_C_GetWeaponByType::Type' has a wrong offset!");
static_assert(offsetof(PAWN_Avatar_C_GetWeaponByType, Weapon) == 0x000008, "Member 'PAWN_Avatar_C_GetWeaponByType::Weapon' has a wrong offset!");
static_assert(offsetof(PAWN_Avatar_C_GetWeaponByType, CyberspaceBag) == 0x000010, "Member 'PAWN_Avatar_C_GetWeaponByType::CyberspaceBag' has a wrong offset!");
static_assert(offsetof(PAWN_Avatar_C_GetWeaponByType, CallFunc_FindItem_FoundItem) == 0x000018, "Member 'PAWN_Avatar_C_GetWeaponByType::CallFunc_FindItem_FoundItem' has a wrong offset!");
static_assert(offsetof(PAWN_Avatar_C_GetWeaponByType, K2Node_SwitchEnum_CmpSuccess) == 0x000020, "Member 'PAWN_Avatar_C_GetWeaponByType::K2Node_SwitchEnum_CmpSuccess' has a wrong offset!");
static_assert(offsetof(PAWN_Avatar_C_GetWeaponByType, CallFunc_GetBagByType_Bag) == 0x000028, "Member 'PAWN_Avatar_C_GetWeaponByType::CallFunc_GetBagByType_Bag' has a wrong offset!");
static_assert(offsetof(PAWN_Avatar_C_GetWeaponByType, CallFunc_FindItem_FoundItem_1) == 0x000030, "Member 'PAWN_Avatar_C_GetWeaponByType::CallFunc_FindItem_FoundItem_1' has a wrong offset!");
static_assert(offsetof(PAWN_Avatar_C_GetWeaponByType, CallFunc_IsValid_ReturnValue) == 0x000038, "Member 'PAWN_Avatar_C_GetWeaponByType::CallFunc_IsValid_ReturnValue' has a wrong offset!");

// Function PAWN_Avatar.PAWN_Avatar_C.ActivateWeapon
// 0x0020 (0x0020 - 0x0000)
struct PAWN_Avatar_C_ActivateWeapon final
{
public:
	ENUM_PrimarySecondary                         WeaponType;                                        // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UITEM_Base_C*                           Weapon;                                            // 0x0008(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UITEM_Base_C*                           CallFunc_GetWeaponByType_Weapon;                   // 0x0010(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Not_PreBool_ReturnValue;                  // 0x0018(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0019(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Activate_Result;                          // 0x001A(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(PAWN_Avatar_C_ActivateWeapon) == 0x000008, "Wrong alignment on PAWN_Avatar_C_ActivateWeapon");
static_assert(sizeof(PAWN_Avatar_C_ActivateWeapon) == 0x000020, "Wrong size on PAWN_Avatar_C_ActivateWeapon");
static_assert(offsetof(PAWN_Avatar_C_ActivateWeapon, WeaponType) == 0x000000, "Member 'PAWN_Avatar_C_ActivateWeapon::WeaponType' has a wrong offset!");
static_assert(offsetof(PAWN_Avatar_C_ActivateWeapon, Weapon) == 0x000008, "Member 'PAWN_Avatar_C_ActivateWeapon::Weapon' has a wrong offset!");
static_assert(offsetof(PAWN_Avatar_C_ActivateWeapon, CallFunc_GetWeaponByType_Weapon) == 0x000010, "Member 'PAWN_Avatar_C_ActivateWeapon::CallFunc_GetWeaponByType_Weapon' has a wrong offset!");
static_assert(offsetof(PAWN_Avatar_C_ActivateWeapon, CallFunc_Not_PreBool_ReturnValue) == 0x000018, "Member 'PAWN_Avatar_C_ActivateWeapon::CallFunc_Not_PreBool_ReturnValue' has a wrong offset!");
static_assert(offsetof(PAWN_Avatar_C_ActivateWeapon, CallFunc_IsValid_ReturnValue) == 0x000019, "Member 'PAWN_Avatar_C_ActivateWeapon::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(PAWN_Avatar_C_ActivateWeapon, CallFunc_Activate_Result) == 0x00001A, "Member 'PAWN_Avatar_C_ActivateWeapon::CallFunc_Activate_Result' has a wrong offset!");

// Function PAWN_Avatar.PAWN_Avatar_C.UpdateCameraShake
// 0x0140 (0x0140 - 0x0000)
struct PAWN_Avatar_C_UpdateCameraShake final
{
public:
	float                                         CallFunc_GetGameTimeInSeconds_ReturnValue;         // 0x0000(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_RandomPointInBoundingBox_ReturnValue;     // 0x0004(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FHitResult                             CallFunc_K2_SetRelativeLocation_SweepHitResult;    // 0x0010(0x0088)(IsPlainOldData, NoDestructor, ContainsInstancedReference)
	float                                         CallFunc_Subtract_FloatFloat_ReturnValue;          // 0x0098(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Greater_FloatFloat_ReturnValue;           // 0x009C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_9D[0x3];                                       // 0x009D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_Divide_FloatFloat_ReturnValue;            // 0x00A0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_FMin_ReturnValue;                         // 0x00A4(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Ease_ReturnValue;                         // 0x00A8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Multiply_VectorFloat_ReturnValue;         // 0x00AC(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FHitResult                             CallFunc_K2_SetRelativeLocation_SweepHitResult_1;  // 0x00B8(0x0088)(IsPlainOldData, NoDestructor, ContainsInstancedReference)
};
static_assert(alignof(PAWN_Avatar_C_UpdateCameraShake) == 0x000004, "Wrong alignment on PAWN_Avatar_C_UpdateCameraShake");
static_assert(sizeof(PAWN_Avatar_C_UpdateCameraShake) == 0x000140, "Wrong size on PAWN_Avatar_C_UpdateCameraShake");
static_assert(offsetof(PAWN_Avatar_C_UpdateCameraShake, CallFunc_GetGameTimeInSeconds_ReturnValue) == 0x000000, "Member 'PAWN_Avatar_C_UpdateCameraShake::CallFunc_GetGameTimeInSeconds_ReturnValue' has a wrong offset!");
static_assert(offsetof(PAWN_Avatar_C_UpdateCameraShake, CallFunc_RandomPointInBoundingBox_ReturnValue) == 0x000004, "Member 'PAWN_Avatar_C_UpdateCameraShake::CallFunc_RandomPointInBoundingBox_ReturnValue' has a wrong offset!");
static_assert(offsetof(PAWN_Avatar_C_UpdateCameraShake, CallFunc_K2_SetRelativeLocation_SweepHitResult) == 0x000010, "Member 'PAWN_Avatar_C_UpdateCameraShake::CallFunc_K2_SetRelativeLocation_SweepHitResult' has a wrong offset!");
static_assert(offsetof(PAWN_Avatar_C_UpdateCameraShake, CallFunc_Subtract_FloatFloat_ReturnValue) == 0x000098, "Member 'PAWN_Avatar_C_UpdateCameraShake::CallFunc_Subtract_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(PAWN_Avatar_C_UpdateCameraShake, CallFunc_Greater_FloatFloat_ReturnValue) == 0x00009C, "Member 'PAWN_Avatar_C_UpdateCameraShake::CallFunc_Greater_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(PAWN_Avatar_C_UpdateCameraShake, CallFunc_Divide_FloatFloat_ReturnValue) == 0x0000A0, "Member 'PAWN_Avatar_C_UpdateCameraShake::CallFunc_Divide_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(PAWN_Avatar_C_UpdateCameraShake, CallFunc_FMin_ReturnValue) == 0x0000A4, "Member 'PAWN_Avatar_C_UpdateCameraShake::CallFunc_FMin_ReturnValue' has a wrong offset!");
static_assert(offsetof(PAWN_Avatar_C_UpdateCameraShake, CallFunc_Ease_ReturnValue) == 0x0000A8, "Member 'PAWN_Avatar_C_UpdateCameraShake::CallFunc_Ease_ReturnValue' has a wrong offset!");
static_assert(offsetof(PAWN_Avatar_C_UpdateCameraShake, CallFunc_Multiply_VectorFloat_ReturnValue) == 0x0000AC, "Member 'PAWN_Avatar_C_UpdateCameraShake::CallFunc_Multiply_VectorFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(PAWN_Avatar_C_UpdateCameraShake, CallFunc_K2_SetRelativeLocation_SweepHitResult_1) == 0x0000B8, "Member 'PAWN_Avatar_C_UpdateCameraShake::CallFunc_K2_SetRelativeLocation_SweepHitResult_1' has a wrong offset!");

// Function PAWN_Avatar.PAWN_Avatar_C.DeactivateWeapon
// 0x0020 (0x0020 - 0x0000)
struct PAWN_Avatar_C_DeactivateWeapon final
{
public:
	ENUM_PrimarySecondary                         WeaponType;                                        // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UITEM_Base_C*                           Weapon;                                            // 0x0008(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UITEM_Base_C*                           CallFunc_GetWeaponByType_Weapon;                   // 0x0010(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Deactivate_Result;                        // 0x0018(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0019(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(PAWN_Avatar_C_DeactivateWeapon) == 0x000008, "Wrong alignment on PAWN_Avatar_C_DeactivateWeapon");
static_assert(sizeof(PAWN_Avatar_C_DeactivateWeapon) == 0x000020, "Wrong size on PAWN_Avatar_C_DeactivateWeapon");
static_assert(offsetof(PAWN_Avatar_C_DeactivateWeapon, WeaponType) == 0x000000, "Member 'PAWN_Avatar_C_DeactivateWeapon::WeaponType' has a wrong offset!");
static_assert(offsetof(PAWN_Avatar_C_DeactivateWeapon, Weapon) == 0x000008, "Member 'PAWN_Avatar_C_DeactivateWeapon::Weapon' has a wrong offset!");
static_assert(offsetof(PAWN_Avatar_C_DeactivateWeapon, CallFunc_GetWeaponByType_Weapon) == 0x000010, "Member 'PAWN_Avatar_C_DeactivateWeapon::CallFunc_GetWeaponByType_Weapon' has a wrong offset!");
static_assert(offsetof(PAWN_Avatar_C_DeactivateWeapon, CallFunc_Deactivate_Result) == 0x000018, "Member 'PAWN_Avatar_C_DeactivateWeapon::CallFunc_Deactivate_Result' has a wrong offset!");
static_assert(offsetof(PAWN_Avatar_C_DeactivateWeapon, CallFunc_IsValid_ReturnValue) == 0x000019, "Member 'PAWN_Avatar_C_DeactivateWeapon::CallFunc_IsValid_ReturnValue' has a wrong offset!");

// Function PAWN_Avatar.PAWN_Avatar_C.UpdateCameraPOV
// 0x0078 (0x0078 - 0x0000)
struct PAWN_Avatar_C_UpdateCameraPOV final
{
public:
	class UITEM_CyberDash_C*                      DashItem;                                          // 0x0000(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         TargetFOV;                                         // 0x0008(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         UserFOV;                                           // 0x000C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Progress;                                          // 0x0010(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Add_FloatFloat_ReturnValue;               // 0x0014(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_FMin_ReturnValue;                         // 0x0018(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_GetIsActivated_Result;                    // 0x001C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_1D[0x3];                                       // 0x001D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_Conv_BoolToFloat_ReturnValue;             // 0x0020(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_GetCurrentDashPowerRatio_Result;          // 0x0024(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UITEM_CyberDash_C*                      CallFunc_GetDashItem_DashItem;                     // 0x0028(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Multiply_FloatFloat_ReturnValue;          // 0x0030(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Lerp_ReturnValue;                         // 0x0034(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0038(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_39[0x7];                                       // 0x0039(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class USAVE_Settings_C*                       CallFunc_GetShockSettingsForCurrentUser_Settings;  // 0x0040(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_GetFOV_Result;                            // 0x0048(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_GetWorldDeltaSeconds_ReturnValue;         // 0x004C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Multiply_FloatFloat_ReturnValue_1;        // 0x0050(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Ease_ReturnValue;                         // 0x0054(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue_1;                    // 0x0058(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_NotEqual_FloatFloat_ReturnValue;          // 0x0059(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_5A[0x2];                                       // 0x005A(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_Ease_ReturnValue_1;                       // 0x005C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_GetGameTimeSinceCreation_ReturnValue;     // 0x0060(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Divide_FloatFloat_ReturnValue;            // 0x0064(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_GetGameTimeSinceCreation_ReturnValue_1;   // 0x0068(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_FClamp_ReturnValue;                       // 0x006C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_LessEqual_FloatFloat_ReturnValue;         // 0x0070(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(PAWN_Avatar_C_UpdateCameraPOV) == 0x000008, "Wrong alignment on PAWN_Avatar_C_UpdateCameraPOV");
static_assert(sizeof(PAWN_Avatar_C_UpdateCameraPOV) == 0x000078, "Wrong size on PAWN_Avatar_C_UpdateCameraPOV");
static_assert(offsetof(PAWN_Avatar_C_UpdateCameraPOV, DashItem) == 0x000000, "Member 'PAWN_Avatar_C_UpdateCameraPOV::DashItem' has a wrong offset!");
static_assert(offsetof(PAWN_Avatar_C_UpdateCameraPOV, TargetFOV) == 0x000008, "Member 'PAWN_Avatar_C_UpdateCameraPOV::TargetFOV' has a wrong offset!");
static_assert(offsetof(PAWN_Avatar_C_UpdateCameraPOV, UserFOV) == 0x00000C, "Member 'PAWN_Avatar_C_UpdateCameraPOV::UserFOV' has a wrong offset!");
static_assert(offsetof(PAWN_Avatar_C_UpdateCameraPOV, Progress) == 0x000010, "Member 'PAWN_Avatar_C_UpdateCameraPOV::Progress' has a wrong offset!");
static_assert(offsetof(PAWN_Avatar_C_UpdateCameraPOV, CallFunc_Add_FloatFloat_ReturnValue) == 0x000014, "Member 'PAWN_Avatar_C_UpdateCameraPOV::CallFunc_Add_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(PAWN_Avatar_C_UpdateCameraPOV, CallFunc_FMin_ReturnValue) == 0x000018, "Member 'PAWN_Avatar_C_UpdateCameraPOV::CallFunc_FMin_ReturnValue' has a wrong offset!");
static_assert(offsetof(PAWN_Avatar_C_UpdateCameraPOV, CallFunc_GetIsActivated_Result) == 0x00001C, "Member 'PAWN_Avatar_C_UpdateCameraPOV::CallFunc_GetIsActivated_Result' has a wrong offset!");
static_assert(offsetof(PAWN_Avatar_C_UpdateCameraPOV, CallFunc_Conv_BoolToFloat_ReturnValue) == 0x000020, "Member 'PAWN_Avatar_C_UpdateCameraPOV::CallFunc_Conv_BoolToFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(PAWN_Avatar_C_UpdateCameraPOV, CallFunc_GetCurrentDashPowerRatio_Result) == 0x000024, "Member 'PAWN_Avatar_C_UpdateCameraPOV::CallFunc_GetCurrentDashPowerRatio_Result' has a wrong offset!");
static_assert(offsetof(PAWN_Avatar_C_UpdateCameraPOV, CallFunc_GetDashItem_DashItem) == 0x000028, "Member 'PAWN_Avatar_C_UpdateCameraPOV::CallFunc_GetDashItem_DashItem' has a wrong offset!");
static_assert(offsetof(PAWN_Avatar_C_UpdateCameraPOV, CallFunc_Multiply_FloatFloat_ReturnValue) == 0x000030, "Member 'PAWN_Avatar_C_UpdateCameraPOV::CallFunc_Multiply_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(PAWN_Avatar_C_UpdateCameraPOV, CallFunc_Lerp_ReturnValue) == 0x000034, "Member 'PAWN_Avatar_C_UpdateCameraPOV::CallFunc_Lerp_ReturnValue' has a wrong offset!");
static_assert(offsetof(PAWN_Avatar_C_UpdateCameraPOV, CallFunc_IsValid_ReturnValue) == 0x000038, "Member 'PAWN_Avatar_C_UpdateCameraPOV::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(PAWN_Avatar_C_UpdateCameraPOV, CallFunc_GetShockSettingsForCurrentUser_Settings) == 0x000040, "Member 'PAWN_Avatar_C_UpdateCameraPOV::CallFunc_GetShockSettingsForCurrentUser_Settings' has a wrong offset!");
static_assert(offsetof(PAWN_Avatar_C_UpdateCameraPOV, CallFunc_GetFOV_Result) == 0x000048, "Member 'PAWN_Avatar_C_UpdateCameraPOV::CallFunc_GetFOV_Result' has a wrong offset!");
static_assert(offsetof(PAWN_Avatar_C_UpdateCameraPOV, CallFunc_GetWorldDeltaSeconds_ReturnValue) == 0x00004C, "Member 'PAWN_Avatar_C_UpdateCameraPOV::CallFunc_GetWorldDeltaSeconds_ReturnValue' has a wrong offset!");
static_assert(offsetof(PAWN_Avatar_C_UpdateCameraPOV, CallFunc_Multiply_FloatFloat_ReturnValue_1) == 0x000050, "Member 'PAWN_Avatar_C_UpdateCameraPOV::CallFunc_Multiply_FloatFloat_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(PAWN_Avatar_C_UpdateCameraPOV, CallFunc_Ease_ReturnValue) == 0x000054, "Member 'PAWN_Avatar_C_UpdateCameraPOV::CallFunc_Ease_ReturnValue' has a wrong offset!");
static_assert(offsetof(PAWN_Avatar_C_UpdateCameraPOV, CallFunc_IsValid_ReturnValue_1) == 0x000058, "Member 'PAWN_Avatar_C_UpdateCameraPOV::CallFunc_IsValid_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(PAWN_Avatar_C_UpdateCameraPOV, CallFunc_NotEqual_FloatFloat_ReturnValue) == 0x000059, "Member 'PAWN_Avatar_C_UpdateCameraPOV::CallFunc_NotEqual_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(PAWN_Avatar_C_UpdateCameraPOV, CallFunc_Ease_ReturnValue_1) == 0x00005C, "Member 'PAWN_Avatar_C_UpdateCameraPOV::CallFunc_Ease_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(PAWN_Avatar_C_UpdateCameraPOV, CallFunc_GetGameTimeSinceCreation_ReturnValue) == 0x000060, "Member 'PAWN_Avatar_C_UpdateCameraPOV::CallFunc_GetGameTimeSinceCreation_ReturnValue' has a wrong offset!");
static_assert(offsetof(PAWN_Avatar_C_UpdateCameraPOV, CallFunc_Divide_FloatFloat_ReturnValue) == 0x000064, "Member 'PAWN_Avatar_C_UpdateCameraPOV::CallFunc_Divide_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(PAWN_Avatar_C_UpdateCameraPOV, CallFunc_GetGameTimeSinceCreation_ReturnValue_1) == 0x000068, "Member 'PAWN_Avatar_C_UpdateCameraPOV::CallFunc_GetGameTimeSinceCreation_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(PAWN_Avatar_C_UpdateCameraPOV, CallFunc_FClamp_ReturnValue) == 0x00006C, "Member 'PAWN_Avatar_C_UpdateCameraPOV::CallFunc_FClamp_ReturnValue' has a wrong offset!");
static_assert(offsetof(PAWN_Avatar_C_UpdateCameraPOV, CallFunc_LessEqual_FloatFloat_ReturnValue) == 0x000070, "Member 'PAWN_Avatar_C_UpdateCameraPOV::CallFunc_LessEqual_FloatFloat_ReturnValue' has a wrong offset!");

// Function PAWN_Avatar.PAWN_Avatar_C.OnCharacterHurt
// 0x0060 (0x0060 - 0x0000)
struct PAWN_Avatar_C_OnCharacterHurt final
{
public:
	class AActor*                                 OtherActor;                                        // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FAttribDamageInstance                  DamageInstance;                                    // 0x0008(0x0028)(BlueprintVisible, BlueprintReadOnly, Parm)
	class UOBJ_ImpactData_C*                      ImpactData;                                        // 0x0030(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Result;                                            // 0x0038(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_39[0x7];                                       // 0x0039(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class APlayerCameraManager*                   CallFunc_GetPlayerCameraManager_ReturnValue;       // 0x0040(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_OnCharacterHurt_Result;                   // 0x0048(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_49[0x7];                                       // 0x0049(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UCameraShakeBase*                       CallFunc_StartCameraShake_ReturnValue;             // 0x0050(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Add_FloatFloat_ReturnValue;               // 0x0058(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(PAWN_Avatar_C_OnCharacterHurt) == 0x000008, "Wrong alignment on PAWN_Avatar_C_OnCharacterHurt");
static_assert(sizeof(PAWN_Avatar_C_OnCharacterHurt) == 0x000060, "Wrong size on PAWN_Avatar_C_OnCharacterHurt");
static_assert(offsetof(PAWN_Avatar_C_OnCharacterHurt, OtherActor) == 0x000000, "Member 'PAWN_Avatar_C_OnCharacterHurt::OtherActor' has a wrong offset!");
static_assert(offsetof(PAWN_Avatar_C_OnCharacterHurt, DamageInstance) == 0x000008, "Member 'PAWN_Avatar_C_OnCharacterHurt::DamageInstance' has a wrong offset!");
static_assert(offsetof(PAWN_Avatar_C_OnCharacterHurt, ImpactData) == 0x000030, "Member 'PAWN_Avatar_C_OnCharacterHurt::ImpactData' has a wrong offset!");
static_assert(offsetof(PAWN_Avatar_C_OnCharacterHurt, Result) == 0x000038, "Member 'PAWN_Avatar_C_OnCharacterHurt::Result' has a wrong offset!");
static_assert(offsetof(PAWN_Avatar_C_OnCharacterHurt, CallFunc_GetPlayerCameraManager_ReturnValue) == 0x000040, "Member 'PAWN_Avatar_C_OnCharacterHurt::CallFunc_GetPlayerCameraManager_ReturnValue' has a wrong offset!");
static_assert(offsetof(PAWN_Avatar_C_OnCharacterHurt, CallFunc_OnCharacterHurt_Result) == 0x000048, "Member 'PAWN_Avatar_C_OnCharacterHurt::CallFunc_OnCharacterHurt_Result' has a wrong offset!");
static_assert(offsetof(PAWN_Avatar_C_OnCharacterHurt, CallFunc_StartCameraShake_ReturnValue) == 0x000050, "Member 'PAWN_Avatar_C_OnCharacterHurt::CallFunc_StartCameraShake_ReturnValue' has a wrong offset!");
static_assert(offsetof(PAWN_Avatar_C_OnCharacterHurt, CallFunc_Add_FloatFloat_ReturnValue) == 0x000058, "Member 'PAWN_Avatar_C_OnCharacterHurt::CallFunc_Add_FloatFloat_ReturnValue' has a wrong offset!");

// Function PAWN_Avatar.PAWN_Avatar_C.UpdateRotation
// 0x0318 (0x0318 - 0x0000)
struct PAWN_Avatar_C_UpdateRotation final
{
public:
	float                                         DeltaTime;                                         // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                RollNormalVector;                                  // 0x0004(0x000C)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         AdjustmentAngle;                                   // 0x0010(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                IdealSignedRollAxis;                               // 0x0014(0x000C)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         DomainLinkRotationPower;                           // 0x0020(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               NewRotation;                                       // 0x0024(0x000C)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FVector                                DomainLinkDirection;                               // 0x0030(0x000C)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         RollScaleDelta;                                    // 0x003C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Temp_float_Variable;                               // 0x0040(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_K2_SetActorRotation_ReturnValue;          // 0x0044(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Temp_bool_Variable;                                // 0x0045(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_46[0x2];                                       // 0x0046(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         Temp_float_Variable_1;                             // 0x0048(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Temp_float_Variable_2;                             // 0x004C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Temp_float_Variable_3;                             // 0x0050(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_GetActorUpVector_ReturnValue;             // 0x0054(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0060(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_61[0x3];                                       // 0x0061(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_Vector_GetAbsMax_ReturnValue;             // 0x0064(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_GetActorForwardVector_ReturnValue;        // 0x0068(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Add_FloatFloat_ReturnValue;               // 0x0074(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Vector_GetAbsMax_ReturnValue_1;           // 0x0078(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_GreaterEqual_FloatFloat_ReturnValue;      // 0x007C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_7D[0x3];                                       // 0x007D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_Add_FloatFloat_ReturnValue_1;             // 0x0080(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_GreaterEqual_FloatFloat_ReturnValue_1;    // 0x0084(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsValid_ReturnValue_1;                    // 0x0085(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BooleanOR_ReturnValue;                    // 0x0086(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BooleanOR_ReturnValue_1;                  // 0x0087(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsValid_ReturnValue_2;                    // 0x0088(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_89[0x3];                                       // 0x0089(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                CallFunc_GetActorRightVector_ReturnValue;          // 0x008C(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector2D                              CallFunc_MakeVector2D_ReturnValue;                 // 0x0098(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector2D                              CallFunc_GetAcceleratedGamepadInputRotation_Result; // 0x00A0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector2D_X;                          // 0x00A8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector2D_Y;                          // 0x00AC(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Variable_1;                              // 0x00B0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_B1[0x3];                                       // 0x00B1(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         K2Node_Select_Default;                             // 0x00B4(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Multiply_FloatFloat_ReturnValue;          // 0x00B8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Multiply_FloatFloat_ReturnValue_1;        // 0x00BC(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_SignOfFloat_ReturnValue;                  // 0x00C0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Multiply_FloatFloat_ReturnValue_2;        // 0x00C4(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Multiply_VectorFloat_ReturnValue;         // 0x00C8(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Multiply_FloatFloat_ReturnValue_3;        // 0x00D4(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Abs_ReturnValue;                          // 0x00D8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_FMin_ReturnValue;                         // 0x00DC(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Multiply_FloatFloat_ReturnValue_4;        // 0x00E0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               CallFunc_MakeRotator_ReturnValue;                  // 0x00E4(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_EqualEqual_FloatFloat_ReturnValue;        // 0x00F0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_F1[0x3];                                       // 0x00F1(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FHitResult                             CallFunc_K2_AddActorLocalRotation_SweepHitResult;  // 0x00F4(0x0088)(IsPlainOldData, NoDestructor, ContainsInstancedReference)
	struct FVector                                CallFunc_K2_GetComponentLocation_ReturnValue;      // 0x017C(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_GetForwardVector_ReturnValue;             // 0x0188(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BooleanAND_ReturnValue;                   // 0x0194(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_195[0x3];                                      // 0x0195(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                CallFunc_Multiply_VectorFloat_ReturnValue_1;       // 0x0198(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Add_VectorVector_ReturnValue;             // 0x01A4(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_GetActorRightVector_ReturnValue_1;        // 0x01B0(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Add_VectorVector_ReturnValue_1;           // 0x01BC(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_GetActorForwardVector_ReturnValue_1;      // 0x01C8(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_SignedAngleBetweenOnPlane_ReturnValue;    // 0x01D4(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Multiply_FloatFloat_ReturnValue_5;        // 0x01D8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_K2_GetActorLocation_ReturnValue;          // 0x01DC(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_GetActorRightVector_ReturnValue_2;        // 0x01E8(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_GetTargetLookDirection_LookDirection;     // 0x01F4(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Cross_VectorVector_ReturnValue;           // 0x0200(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Add_FloatFloat_ReturnValue_2;             // 0x020C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Temp_float_Variable_4;                             // 0x0210(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Add_FloatFloat_ReturnValue_3;             // 0x0214(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               CallFunc_MakeRotator_ReturnValue_1;                // 0x0218(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FHitResult                             CallFunc_K2_AddActorLocalRotation_SweepHitResult_1; // 0x0224(0x0088)(IsPlainOldData, NoDestructor, ContainsInstancedReference)
	struct FRotator                               CallFunc_MakeRotFromXZ_ReturnValue;                // 0x02AC(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FRotator                               CallFunc_K2_GetActorRotation_ReturnValue;          // 0x02B8(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FRotator                               CallFunc_REase_ReturnValue;                        // 0x02C4(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Temp_bool_Variable_2;                              // 0x02D0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_2D1[0x3];                                      // 0x02D1(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         K2Node_Select_Default_1;                           // 0x02D4(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_GetBestAxisDirection_AxisDirection;       // 0x02D8(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Subtract_FloatFloat_ReturnValue;          // 0x02E4(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Abs_ReturnValue_1;                        // 0x02E8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Abs_ReturnValue_2;                        // 0x02EC(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_GreaterEqual_FloatFloat_ReturnValue_2;    // 0x02F0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_2F1[0x3];                                      // 0x02F1(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_Multiply_FloatFloat_ReturnValue_6;        // 0x02F4(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Multiply_FloatFloat_ReturnValue_7;        // 0x02F8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Greater_FloatFloat_ReturnValue;           // 0x02FC(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_2FD[0x3];                                      // 0x02FD(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         K2Node_Select_Default_2;                           // 0x0300(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_NotEqual_FloatFloat_ReturnValue;          // 0x0304(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_305[0x3];                                      // 0x0305(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_Add_FloatFloat_ReturnValue_4;             // 0x0308(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_FClamp_ReturnValue;                       // 0x030C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Multiply_FloatFloat_ReturnValue_8;        // 0x0310(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Multiply_FloatFloat_ReturnValue_9;        // 0x0314(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(PAWN_Avatar_C_UpdateRotation) == 0x000004, "Wrong alignment on PAWN_Avatar_C_UpdateRotation");
static_assert(sizeof(PAWN_Avatar_C_UpdateRotation) == 0x000318, "Wrong size on PAWN_Avatar_C_UpdateRotation");
static_assert(offsetof(PAWN_Avatar_C_UpdateRotation, DeltaTime) == 0x000000, "Member 'PAWN_Avatar_C_UpdateRotation::DeltaTime' has a wrong offset!");
static_assert(offsetof(PAWN_Avatar_C_UpdateRotation, RollNormalVector) == 0x000004, "Member 'PAWN_Avatar_C_UpdateRotation::RollNormalVector' has a wrong offset!");
static_assert(offsetof(PAWN_Avatar_C_UpdateRotation, AdjustmentAngle) == 0x000010, "Member 'PAWN_Avatar_C_UpdateRotation::AdjustmentAngle' has a wrong offset!");
static_assert(offsetof(PAWN_Avatar_C_UpdateRotation, IdealSignedRollAxis) == 0x000014, "Member 'PAWN_Avatar_C_UpdateRotation::IdealSignedRollAxis' has a wrong offset!");
static_assert(offsetof(PAWN_Avatar_C_UpdateRotation, DomainLinkRotationPower) == 0x000020, "Member 'PAWN_Avatar_C_UpdateRotation::DomainLinkRotationPower' has a wrong offset!");
static_assert(offsetof(PAWN_Avatar_C_UpdateRotation, NewRotation) == 0x000024, "Member 'PAWN_Avatar_C_UpdateRotation::NewRotation' has a wrong offset!");
static_assert(offsetof(PAWN_Avatar_C_UpdateRotation, DomainLinkDirection) == 0x000030, "Member 'PAWN_Avatar_C_UpdateRotation::DomainLinkDirection' has a wrong offset!");
static_assert(offsetof(PAWN_Avatar_C_UpdateRotation, RollScaleDelta) == 0x00003C, "Member 'PAWN_Avatar_C_UpdateRotation::RollScaleDelta' has a wrong offset!");
static_assert(offsetof(PAWN_Avatar_C_UpdateRotation, Temp_float_Variable) == 0x000040, "Member 'PAWN_Avatar_C_UpdateRotation::Temp_float_Variable' has a wrong offset!");
static_assert(offsetof(PAWN_Avatar_C_UpdateRotation, CallFunc_K2_SetActorRotation_ReturnValue) == 0x000044, "Member 'PAWN_Avatar_C_UpdateRotation::CallFunc_K2_SetActorRotation_ReturnValue' has a wrong offset!");
static_assert(offsetof(PAWN_Avatar_C_UpdateRotation, Temp_bool_Variable) == 0x000045, "Member 'PAWN_Avatar_C_UpdateRotation::Temp_bool_Variable' has a wrong offset!");
static_assert(offsetof(PAWN_Avatar_C_UpdateRotation, Temp_float_Variable_1) == 0x000048, "Member 'PAWN_Avatar_C_UpdateRotation::Temp_float_Variable_1' has a wrong offset!");
static_assert(offsetof(PAWN_Avatar_C_UpdateRotation, Temp_float_Variable_2) == 0x00004C, "Member 'PAWN_Avatar_C_UpdateRotation::Temp_float_Variable_2' has a wrong offset!");
static_assert(offsetof(PAWN_Avatar_C_UpdateRotation, Temp_float_Variable_3) == 0x000050, "Member 'PAWN_Avatar_C_UpdateRotation::Temp_float_Variable_3' has a wrong offset!");
static_assert(offsetof(PAWN_Avatar_C_UpdateRotation, CallFunc_GetActorUpVector_ReturnValue) == 0x000054, "Member 'PAWN_Avatar_C_UpdateRotation::CallFunc_GetActorUpVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(PAWN_Avatar_C_UpdateRotation, CallFunc_IsValid_ReturnValue) == 0x000060, "Member 'PAWN_Avatar_C_UpdateRotation::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(PAWN_Avatar_C_UpdateRotation, CallFunc_Vector_GetAbsMax_ReturnValue) == 0x000064, "Member 'PAWN_Avatar_C_UpdateRotation::CallFunc_Vector_GetAbsMax_ReturnValue' has a wrong offset!");
static_assert(offsetof(PAWN_Avatar_C_UpdateRotation, CallFunc_GetActorForwardVector_ReturnValue) == 0x000068, "Member 'PAWN_Avatar_C_UpdateRotation::CallFunc_GetActorForwardVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(PAWN_Avatar_C_UpdateRotation, CallFunc_Add_FloatFloat_ReturnValue) == 0x000074, "Member 'PAWN_Avatar_C_UpdateRotation::CallFunc_Add_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(PAWN_Avatar_C_UpdateRotation, CallFunc_Vector_GetAbsMax_ReturnValue_1) == 0x000078, "Member 'PAWN_Avatar_C_UpdateRotation::CallFunc_Vector_GetAbsMax_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(PAWN_Avatar_C_UpdateRotation, CallFunc_GreaterEqual_FloatFloat_ReturnValue) == 0x00007C, "Member 'PAWN_Avatar_C_UpdateRotation::CallFunc_GreaterEqual_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(PAWN_Avatar_C_UpdateRotation, CallFunc_Add_FloatFloat_ReturnValue_1) == 0x000080, "Member 'PAWN_Avatar_C_UpdateRotation::CallFunc_Add_FloatFloat_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(PAWN_Avatar_C_UpdateRotation, CallFunc_GreaterEqual_FloatFloat_ReturnValue_1) == 0x000084, "Member 'PAWN_Avatar_C_UpdateRotation::CallFunc_GreaterEqual_FloatFloat_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(PAWN_Avatar_C_UpdateRotation, CallFunc_IsValid_ReturnValue_1) == 0x000085, "Member 'PAWN_Avatar_C_UpdateRotation::CallFunc_IsValid_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(PAWN_Avatar_C_UpdateRotation, CallFunc_BooleanOR_ReturnValue) == 0x000086, "Member 'PAWN_Avatar_C_UpdateRotation::CallFunc_BooleanOR_ReturnValue' has a wrong offset!");
static_assert(offsetof(PAWN_Avatar_C_UpdateRotation, CallFunc_BooleanOR_ReturnValue_1) == 0x000087, "Member 'PAWN_Avatar_C_UpdateRotation::CallFunc_BooleanOR_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(PAWN_Avatar_C_UpdateRotation, CallFunc_IsValid_ReturnValue_2) == 0x000088, "Member 'PAWN_Avatar_C_UpdateRotation::CallFunc_IsValid_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(PAWN_Avatar_C_UpdateRotation, CallFunc_GetActorRightVector_ReturnValue) == 0x00008C, "Member 'PAWN_Avatar_C_UpdateRotation::CallFunc_GetActorRightVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(PAWN_Avatar_C_UpdateRotation, CallFunc_MakeVector2D_ReturnValue) == 0x000098, "Member 'PAWN_Avatar_C_UpdateRotation::CallFunc_MakeVector2D_ReturnValue' has a wrong offset!");
static_assert(offsetof(PAWN_Avatar_C_UpdateRotation, CallFunc_GetAcceleratedGamepadInputRotation_Result) == 0x0000A0, "Member 'PAWN_Avatar_C_UpdateRotation::CallFunc_GetAcceleratedGamepadInputRotation_Result' has a wrong offset!");
static_assert(offsetof(PAWN_Avatar_C_UpdateRotation, CallFunc_BreakVector2D_X) == 0x0000A8, "Member 'PAWN_Avatar_C_UpdateRotation::CallFunc_BreakVector2D_X' has a wrong offset!");
static_assert(offsetof(PAWN_Avatar_C_UpdateRotation, CallFunc_BreakVector2D_Y) == 0x0000AC, "Member 'PAWN_Avatar_C_UpdateRotation::CallFunc_BreakVector2D_Y' has a wrong offset!");
static_assert(offsetof(PAWN_Avatar_C_UpdateRotation, Temp_bool_Variable_1) == 0x0000B0, "Member 'PAWN_Avatar_C_UpdateRotation::Temp_bool_Variable_1' has a wrong offset!");
static_assert(offsetof(PAWN_Avatar_C_UpdateRotation, K2Node_Select_Default) == 0x0000B4, "Member 'PAWN_Avatar_C_UpdateRotation::K2Node_Select_Default' has a wrong offset!");
static_assert(offsetof(PAWN_Avatar_C_UpdateRotation, CallFunc_Multiply_FloatFloat_ReturnValue) == 0x0000B8, "Member 'PAWN_Avatar_C_UpdateRotation::CallFunc_Multiply_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(PAWN_Avatar_C_UpdateRotation, CallFunc_Multiply_FloatFloat_ReturnValue_1) == 0x0000BC, "Member 'PAWN_Avatar_C_UpdateRotation::CallFunc_Multiply_FloatFloat_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(PAWN_Avatar_C_UpdateRotation, CallFunc_SignOfFloat_ReturnValue) == 0x0000C0, "Member 'PAWN_Avatar_C_UpdateRotation::CallFunc_SignOfFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(PAWN_Avatar_C_UpdateRotation, CallFunc_Multiply_FloatFloat_ReturnValue_2) == 0x0000C4, "Member 'PAWN_Avatar_C_UpdateRotation::CallFunc_Multiply_FloatFloat_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(PAWN_Avatar_C_UpdateRotation, CallFunc_Multiply_VectorFloat_ReturnValue) == 0x0000C8, "Member 'PAWN_Avatar_C_UpdateRotation::CallFunc_Multiply_VectorFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(PAWN_Avatar_C_UpdateRotation, CallFunc_Multiply_FloatFloat_ReturnValue_3) == 0x0000D4, "Member 'PAWN_Avatar_C_UpdateRotation::CallFunc_Multiply_FloatFloat_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(PAWN_Avatar_C_UpdateRotation, CallFunc_Abs_ReturnValue) == 0x0000D8, "Member 'PAWN_Avatar_C_UpdateRotation::CallFunc_Abs_ReturnValue' has a wrong offset!");
static_assert(offsetof(PAWN_Avatar_C_UpdateRotation, CallFunc_FMin_ReturnValue) == 0x0000DC, "Member 'PAWN_Avatar_C_UpdateRotation::CallFunc_FMin_ReturnValue' has a wrong offset!");
static_assert(offsetof(PAWN_Avatar_C_UpdateRotation, CallFunc_Multiply_FloatFloat_ReturnValue_4) == 0x0000E0, "Member 'PAWN_Avatar_C_UpdateRotation::CallFunc_Multiply_FloatFloat_ReturnValue_4' has a wrong offset!");
static_assert(offsetof(PAWN_Avatar_C_UpdateRotation, CallFunc_MakeRotator_ReturnValue) == 0x0000E4, "Member 'PAWN_Avatar_C_UpdateRotation::CallFunc_MakeRotator_ReturnValue' has a wrong offset!");
static_assert(offsetof(PAWN_Avatar_C_UpdateRotation, CallFunc_EqualEqual_FloatFloat_ReturnValue) == 0x0000F0, "Member 'PAWN_Avatar_C_UpdateRotation::CallFunc_EqualEqual_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(PAWN_Avatar_C_UpdateRotation, CallFunc_K2_AddActorLocalRotation_SweepHitResult) == 0x0000F4, "Member 'PAWN_Avatar_C_UpdateRotation::CallFunc_K2_AddActorLocalRotation_SweepHitResult' has a wrong offset!");
static_assert(offsetof(PAWN_Avatar_C_UpdateRotation, CallFunc_K2_GetComponentLocation_ReturnValue) == 0x00017C, "Member 'PAWN_Avatar_C_UpdateRotation::CallFunc_K2_GetComponentLocation_ReturnValue' has a wrong offset!");
static_assert(offsetof(PAWN_Avatar_C_UpdateRotation, CallFunc_GetForwardVector_ReturnValue) == 0x000188, "Member 'PAWN_Avatar_C_UpdateRotation::CallFunc_GetForwardVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(PAWN_Avatar_C_UpdateRotation, CallFunc_BooleanAND_ReturnValue) == 0x000194, "Member 'PAWN_Avatar_C_UpdateRotation::CallFunc_BooleanAND_ReturnValue' has a wrong offset!");
static_assert(offsetof(PAWN_Avatar_C_UpdateRotation, CallFunc_Multiply_VectorFloat_ReturnValue_1) == 0x000198, "Member 'PAWN_Avatar_C_UpdateRotation::CallFunc_Multiply_VectorFloat_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(PAWN_Avatar_C_UpdateRotation, CallFunc_Add_VectorVector_ReturnValue) == 0x0001A4, "Member 'PAWN_Avatar_C_UpdateRotation::CallFunc_Add_VectorVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(PAWN_Avatar_C_UpdateRotation, CallFunc_GetActorRightVector_ReturnValue_1) == 0x0001B0, "Member 'PAWN_Avatar_C_UpdateRotation::CallFunc_GetActorRightVector_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(PAWN_Avatar_C_UpdateRotation, CallFunc_Add_VectorVector_ReturnValue_1) == 0x0001BC, "Member 'PAWN_Avatar_C_UpdateRotation::CallFunc_Add_VectorVector_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(PAWN_Avatar_C_UpdateRotation, CallFunc_GetActorForwardVector_ReturnValue_1) == 0x0001C8, "Member 'PAWN_Avatar_C_UpdateRotation::CallFunc_GetActorForwardVector_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(PAWN_Avatar_C_UpdateRotation, CallFunc_SignedAngleBetweenOnPlane_ReturnValue) == 0x0001D4, "Member 'PAWN_Avatar_C_UpdateRotation::CallFunc_SignedAngleBetweenOnPlane_ReturnValue' has a wrong offset!");
static_assert(offsetof(PAWN_Avatar_C_UpdateRotation, CallFunc_Multiply_FloatFloat_ReturnValue_5) == 0x0001D8, "Member 'PAWN_Avatar_C_UpdateRotation::CallFunc_Multiply_FloatFloat_ReturnValue_5' has a wrong offset!");
static_assert(offsetof(PAWN_Avatar_C_UpdateRotation, CallFunc_K2_GetActorLocation_ReturnValue) == 0x0001DC, "Member 'PAWN_Avatar_C_UpdateRotation::CallFunc_K2_GetActorLocation_ReturnValue' has a wrong offset!");
static_assert(offsetof(PAWN_Avatar_C_UpdateRotation, CallFunc_GetActorRightVector_ReturnValue_2) == 0x0001E8, "Member 'PAWN_Avatar_C_UpdateRotation::CallFunc_GetActorRightVector_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(PAWN_Avatar_C_UpdateRotation, CallFunc_GetTargetLookDirection_LookDirection) == 0x0001F4, "Member 'PAWN_Avatar_C_UpdateRotation::CallFunc_GetTargetLookDirection_LookDirection' has a wrong offset!");
static_assert(offsetof(PAWN_Avatar_C_UpdateRotation, CallFunc_Cross_VectorVector_ReturnValue) == 0x000200, "Member 'PAWN_Avatar_C_UpdateRotation::CallFunc_Cross_VectorVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(PAWN_Avatar_C_UpdateRotation, CallFunc_Add_FloatFloat_ReturnValue_2) == 0x00020C, "Member 'PAWN_Avatar_C_UpdateRotation::CallFunc_Add_FloatFloat_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(PAWN_Avatar_C_UpdateRotation, Temp_float_Variable_4) == 0x000210, "Member 'PAWN_Avatar_C_UpdateRotation::Temp_float_Variable_4' has a wrong offset!");
static_assert(offsetof(PAWN_Avatar_C_UpdateRotation, CallFunc_Add_FloatFloat_ReturnValue_3) == 0x000214, "Member 'PAWN_Avatar_C_UpdateRotation::CallFunc_Add_FloatFloat_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(PAWN_Avatar_C_UpdateRotation, CallFunc_MakeRotator_ReturnValue_1) == 0x000218, "Member 'PAWN_Avatar_C_UpdateRotation::CallFunc_MakeRotator_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(PAWN_Avatar_C_UpdateRotation, CallFunc_K2_AddActorLocalRotation_SweepHitResult_1) == 0x000224, "Member 'PAWN_Avatar_C_UpdateRotation::CallFunc_K2_AddActorLocalRotation_SweepHitResult_1' has a wrong offset!");
static_assert(offsetof(PAWN_Avatar_C_UpdateRotation, CallFunc_MakeRotFromXZ_ReturnValue) == 0x0002AC, "Member 'PAWN_Avatar_C_UpdateRotation::CallFunc_MakeRotFromXZ_ReturnValue' has a wrong offset!");
static_assert(offsetof(PAWN_Avatar_C_UpdateRotation, CallFunc_K2_GetActorRotation_ReturnValue) == 0x0002B8, "Member 'PAWN_Avatar_C_UpdateRotation::CallFunc_K2_GetActorRotation_ReturnValue' has a wrong offset!");
static_assert(offsetof(PAWN_Avatar_C_UpdateRotation, CallFunc_REase_ReturnValue) == 0x0002C4, "Member 'PAWN_Avatar_C_UpdateRotation::CallFunc_REase_ReturnValue' has a wrong offset!");
static_assert(offsetof(PAWN_Avatar_C_UpdateRotation, Temp_bool_Variable_2) == 0x0002D0, "Member 'PAWN_Avatar_C_UpdateRotation::Temp_bool_Variable_2' has a wrong offset!");
static_assert(offsetof(PAWN_Avatar_C_UpdateRotation, K2Node_Select_Default_1) == 0x0002D4, "Member 'PAWN_Avatar_C_UpdateRotation::K2Node_Select_Default_1' has a wrong offset!");
static_assert(offsetof(PAWN_Avatar_C_UpdateRotation, CallFunc_GetBestAxisDirection_AxisDirection) == 0x0002D8, "Member 'PAWN_Avatar_C_UpdateRotation::CallFunc_GetBestAxisDirection_AxisDirection' has a wrong offset!");
static_assert(offsetof(PAWN_Avatar_C_UpdateRotation, CallFunc_Subtract_FloatFloat_ReturnValue) == 0x0002E4, "Member 'PAWN_Avatar_C_UpdateRotation::CallFunc_Subtract_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(PAWN_Avatar_C_UpdateRotation, CallFunc_Abs_ReturnValue_1) == 0x0002E8, "Member 'PAWN_Avatar_C_UpdateRotation::CallFunc_Abs_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(PAWN_Avatar_C_UpdateRotation, CallFunc_Abs_ReturnValue_2) == 0x0002EC, "Member 'PAWN_Avatar_C_UpdateRotation::CallFunc_Abs_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(PAWN_Avatar_C_UpdateRotation, CallFunc_GreaterEqual_FloatFloat_ReturnValue_2) == 0x0002F0, "Member 'PAWN_Avatar_C_UpdateRotation::CallFunc_GreaterEqual_FloatFloat_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(PAWN_Avatar_C_UpdateRotation, CallFunc_Multiply_FloatFloat_ReturnValue_6) == 0x0002F4, "Member 'PAWN_Avatar_C_UpdateRotation::CallFunc_Multiply_FloatFloat_ReturnValue_6' has a wrong offset!");
static_assert(offsetof(PAWN_Avatar_C_UpdateRotation, CallFunc_Multiply_FloatFloat_ReturnValue_7) == 0x0002F8, "Member 'PAWN_Avatar_C_UpdateRotation::CallFunc_Multiply_FloatFloat_ReturnValue_7' has a wrong offset!");
static_assert(offsetof(PAWN_Avatar_C_UpdateRotation, CallFunc_Greater_FloatFloat_ReturnValue) == 0x0002FC, "Member 'PAWN_Avatar_C_UpdateRotation::CallFunc_Greater_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(PAWN_Avatar_C_UpdateRotation, K2Node_Select_Default_2) == 0x000300, "Member 'PAWN_Avatar_C_UpdateRotation::K2Node_Select_Default_2' has a wrong offset!");
static_assert(offsetof(PAWN_Avatar_C_UpdateRotation, CallFunc_NotEqual_FloatFloat_ReturnValue) == 0x000304, "Member 'PAWN_Avatar_C_UpdateRotation::CallFunc_NotEqual_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(PAWN_Avatar_C_UpdateRotation, CallFunc_Add_FloatFloat_ReturnValue_4) == 0x000308, "Member 'PAWN_Avatar_C_UpdateRotation::CallFunc_Add_FloatFloat_ReturnValue_4' has a wrong offset!");
static_assert(offsetof(PAWN_Avatar_C_UpdateRotation, CallFunc_FClamp_ReturnValue) == 0x00030C, "Member 'PAWN_Avatar_C_UpdateRotation::CallFunc_FClamp_ReturnValue' has a wrong offset!");
static_assert(offsetof(PAWN_Avatar_C_UpdateRotation, CallFunc_Multiply_FloatFloat_ReturnValue_8) == 0x000310, "Member 'PAWN_Avatar_C_UpdateRotation::CallFunc_Multiply_FloatFloat_ReturnValue_8' has a wrong offset!");
static_assert(offsetof(PAWN_Avatar_C_UpdateRotation, CallFunc_Multiply_FloatFloat_ReturnValue_9) == 0x000314, "Member 'PAWN_Avatar_C_UpdateRotation::CallFunc_Multiply_FloatFloat_ReturnValue_9' has a wrong offset!");

// Function PAWN_Avatar.PAWN_Avatar_C.HasCurrentDomainLink
// 0x0002 (0x0002 - 0x0000)
struct PAWN_Avatar_C_HasCurrentDomainLink final
{
public:
	bool                                          Result;                                            // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0001(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(PAWN_Avatar_C_HasCurrentDomainLink) == 0x000001, "Wrong alignment on PAWN_Avatar_C_HasCurrentDomainLink");
static_assert(sizeof(PAWN_Avatar_C_HasCurrentDomainLink) == 0x000002, "Wrong size on PAWN_Avatar_C_HasCurrentDomainLink");
static_assert(offsetof(PAWN_Avatar_C_HasCurrentDomainLink, Result) == 0x000000, "Member 'PAWN_Avatar_C_HasCurrentDomainLink::Result' has a wrong offset!");
static_assert(offsetof(PAWN_Avatar_C_HasCurrentDomainLink, CallFunc_IsValid_ReturnValue) == 0x000001, "Member 'PAWN_Avatar_C_HasCurrentDomainLink::CallFunc_IsValid_ReturnValue' has a wrong offset!");

// Function PAWN_Avatar.PAWN_Avatar_C.IsCurrentDomainLink
// 0x0010 (0x0010 - 0x0000)
struct PAWN_Avatar_C_IsCurrentDomainLink final
{
public:
	class ACYBR_DomainLink_C*                     DomainLink;                                        // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Result;                                            // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_EqualEqual_ObjectObject_ReturnValue;      // 0x0009(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(PAWN_Avatar_C_IsCurrentDomainLink) == 0x000008, "Wrong alignment on PAWN_Avatar_C_IsCurrentDomainLink");
static_assert(sizeof(PAWN_Avatar_C_IsCurrentDomainLink) == 0x000010, "Wrong size on PAWN_Avatar_C_IsCurrentDomainLink");
static_assert(offsetof(PAWN_Avatar_C_IsCurrentDomainLink, DomainLink) == 0x000000, "Member 'PAWN_Avatar_C_IsCurrentDomainLink::DomainLink' has a wrong offset!");
static_assert(offsetof(PAWN_Avatar_C_IsCurrentDomainLink, Result) == 0x000008, "Member 'PAWN_Avatar_C_IsCurrentDomainLink::Result' has a wrong offset!");
static_assert(offsetof(PAWN_Avatar_C_IsCurrentDomainLink, CallFunc_EqualEqual_ObjectObject_ReturnValue) == 0x000009, "Member 'PAWN_Avatar_C_IsCurrentDomainLink::CallFunc_EqualEqual_ObjectObject_ReturnValue' has a wrong offset!");

// Function PAWN_Avatar.PAWN_Avatar_C.SetDomainLink
// 0x00A8 (0x00A8 - 0x0000)
struct PAWN_Avatar_C_SetDomainLink final
{
public:
	class ACYBR_DomainLink_C*                     DomainLink;                                        // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          IsForward;                                         // 0x0008(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                DomainLinkDirection;                               // 0x000C(0x000C)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0018(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_19[0x7];                                       // 0x0019(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FSTRUCT_ScannableRegionData            CallFunc_GetDataTableRowFromName_OutRow;           // 0x0020(0x0030)(HasGetValueTypeHash)
	bool                                          CallFunc_GetDataTableRowFromName_ReturnValue;      // 0x0050(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Not_PreBool_ReturnValue;                  // 0x0051(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_52[0x2];                                       // 0x0052(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_GetMaxAvatarFlySpeed_Result;              // 0x0054(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Multiply_VectorFloat_ReturnValue;         // 0x0058(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Subtract_VectorVector_ReturnValue;        // 0x0064(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_K2_GetActorLocation_ReturnValue;          // 0x0070(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Dot_VectorVector_ReturnValue;             // 0x007C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_FMin_ReturnValue;                         // 0x0080(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_GetDomainLinkDirection_Direction;         // 0x0084(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_K2_GetActorLocation_ReturnValue_1;        // 0x0090(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_GetLinkDistanceClosestToWorldLocation_Distance; // 0x009C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue_1;                    // 0x00A0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(PAWN_Avatar_C_SetDomainLink) == 0x000008, "Wrong alignment on PAWN_Avatar_C_SetDomainLink");
static_assert(sizeof(PAWN_Avatar_C_SetDomainLink) == 0x0000A8, "Wrong size on PAWN_Avatar_C_SetDomainLink");
static_assert(offsetof(PAWN_Avatar_C_SetDomainLink, DomainLink) == 0x000000, "Member 'PAWN_Avatar_C_SetDomainLink::DomainLink' has a wrong offset!");
static_assert(offsetof(PAWN_Avatar_C_SetDomainLink, IsForward) == 0x000008, "Member 'PAWN_Avatar_C_SetDomainLink::IsForward' has a wrong offset!");
static_assert(offsetof(PAWN_Avatar_C_SetDomainLink, DomainLinkDirection) == 0x00000C, "Member 'PAWN_Avatar_C_SetDomainLink::DomainLinkDirection' has a wrong offset!");
static_assert(offsetof(PAWN_Avatar_C_SetDomainLink, CallFunc_IsValid_ReturnValue) == 0x000018, "Member 'PAWN_Avatar_C_SetDomainLink::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(PAWN_Avatar_C_SetDomainLink, CallFunc_GetDataTableRowFromName_OutRow) == 0x000020, "Member 'PAWN_Avatar_C_SetDomainLink::CallFunc_GetDataTableRowFromName_OutRow' has a wrong offset!");
static_assert(offsetof(PAWN_Avatar_C_SetDomainLink, CallFunc_GetDataTableRowFromName_ReturnValue) == 0x000050, "Member 'PAWN_Avatar_C_SetDomainLink::CallFunc_GetDataTableRowFromName_ReturnValue' has a wrong offset!");
static_assert(offsetof(PAWN_Avatar_C_SetDomainLink, CallFunc_Not_PreBool_ReturnValue) == 0x000051, "Member 'PAWN_Avatar_C_SetDomainLink::CallFunc_Not_PreBool_ReturnValue' has a wrong offset!");
static_assert(offsetof(PAWN_Avatar_C_SetDomainLink, CallFunc_GetMaxAvatarFlySpeed_Result) == 0x000054, "Member 'PAWN_Avatar_C_SetDomainLink::CallFunc_GetMaxAvatarFlySpeed_Result' has a wrong offset!");
static_assert(offsetof(PAWN_Avatar_C_SetDomainLink, CallFunc_Multiply_VectorFloat_ReturnValue) == 0x000058, "Member 'PAWN_Avatar_C_SetDomainLink::CallFunc_Multiply_VectorFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(PAWN_Avatar_C_SetDomainLink, CallFunc_Subtract_VectorVector_ReturnValue) == 0x000064, "Member 'PAWN_Avatar_C_SetDomainLink::CallFunc_Subtract_VectorVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(PAWN_Avatar_C_SetDomainLink, CallFunc_K2_GetActorLocation_ReturnValue) == 0x000070, "Member 'PAWN_Avatar_C_SetDomainLink::CallFunc_K2_GetActorLocation_ReturnValue' has a wrong offset!");
static_assert(offsetof(PAWN_Avatar_C_SetDomainLink, CallFunc_Dot_VectorVector_ReturnValue) == 0x00007C, "Member 'PAWN_Avatar_C_SetDomainLink::CallFunc_Dot_VectorVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(PAWN_Avatar_C_SetDomainLink, CallFunc_FMin_ReturnValue) == 0x000080, "Member 'PAWN_Avatar_C_SetDomainLink::CallFunc_FMin_ReturnValue' has a wrong offset!");
static_assert(offsetof(PAWN_Avatar_C_SetDomainLink, CallFunc_GetDomainLinkDirection_Direction) == 0x000084, "Member 'PAWN_Avatar_C_SetDomainLink::CallFunc_GetDomainLinkDirection_Direction' has a wrong offset!");
static_assert(offsetof(PAWN_Avatar_C_SetDomainLink, CallFunc_K2_GetActorLocation_ReturnValue_1) == 0x000090, "Member 'PAWN_Avatar_C_SetDomainLink::CallFunc_K2_GetActorLocation_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(PAWN_Avatar_C_SetDomainLink, CallFunc_GetLinkDistanceClosestToWorldLocation_Distance) == 0x00009C, "Member 'PAWN_Avatar_C_SetDomainLink::CallFunc_GetLinkDistanceClosestToWorldLocation_Distance' has a wrong offset!");
static_assert(offsetof(PAWN_Avatar_C_SetDomainLink, CallFunc_IsValid_ReturnValue_1) == 0x0000A0, "Member 'PAWN_Avatar_C_SetDomainLink::CallFunc_IsValid_ReturnValue_1' has a wrong offset!");

// Function PAWN_Avatar.PAWN_Avatar_C.UpdateCameraRotation
// 0x00E8 (0x00E8 - 0x0000)
struct PAWN_Avatar_C_UpdateCameraRotation final
{
public:
	float                                         DeltaTime;                                         // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         TargetPitch;                                       // 0x0004(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         TargetRoll;                                        // 0x0008(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_GetGameTimeInSeconds_ReturnValue;         // 0x000C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Multiply_FloatFloat_ReturnValue;          // 0x0010(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector_X;                            // 0x0014(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector_Y;                            // 0x0018(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector_Z;                            // 0x001C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_FClamp_ReturnValue;                       // 0x0020(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Multiply_FloatFloat_ReturnValue_1;        // 0x0024(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector_X_1;                          // 0x0028(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector_Y_1;                          // 0x002C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector_Z_1;                          // 0x0030(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_FClamp_ReturnValue_1;                     // 0x0034(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Multiply_FloatFloat_ReturnValue_2;        // 0x0038(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector2D                              CallFunc_MakeVector2D_ReturnValue;                 // 0x003C(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector2D                              CallFunc_GetSmoothedVec2_ReturnValue;              // 0x0044(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector2D_X;                          // 0x004C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector2D_Y;                          // 0x0050(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               CallFunc_MakeRotator_ReturnValue;                  // 0x0054(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FHitResult                             CallFunc_K2_SetRelativeRotation_SweepHitResult;    // 0x0060(0x0088)(IsPlainOldData, NoDestructor, ContainsInstancedReference)
};
static_assert(alignof(PAWN_Avatar_C_UpdateCameraRotation) == 0x000004, "Wrong alignment on PAWN_Avatar_C_UpdateCameraRotation");
static_assert(sizeof(PAWN_Avatar_C_UpdateCameraRotation) == 0x0000E8, "Wrong size on PAWN_Avatar_C_UpdateCameraRotation");
static_assert(offsetof(PAWN_Avatar_C_UpdateCameraRotation, DeltaTime) == 0x000000, "Member 'PAWN_Avatar_C_UpdateCameraRotation::DeltaTime' has a wrong offset!");
static_assert(offsetof(PAWN_Avatar_C_UpdateCameraRotation, TargetPitch) == 0x000004, "Member 'PAWN_Avatar_C_UpdateCameraRotation::TargetPitch' has a wrong offset!");
static_assert(offsetof(PAWN_Avatar_C_UpdateCameraRotation, TargetRoll) == 0x000008, "Member 'PAWN_Avatar_C_UpdateCameraRotation::TargetRoll' has a wrong offset!");
static_assert(offsetof(PAWN_Avatar_C_UpdateCameraRotation, CallFunc_GetGameTimeInSeconds_ReturnValue) == 0x00000C, "Member 'PAWN_Avatar_C_UpdateCameraRotation::CallFunc_GetGameTimeInSeconds_ReturnValue' has a wrong offset!");
static_assert(offsetof(PAWN_Avatar_C_UpdateCameraRotation, CallFunc_Multiply_FloatFloat_ReturnValue) == 0x000010, "Member 'PAWN_Avatar_C_UpdateCameraRotation::CallFunc_Multiply_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(PAWN_Avatar_C_UpdateCameraRotation, CallFunc_BreakVector_X) == 0x000014, "Member 'PAWN_Avatar_C_UpdateCameraRotation::CallFunc_BreakVector_X' has a wrong offset!");
static_assert(offsetof(PAWN_Avatar_C_UpdateCameraRotation, CallFunc_BreakVector_Y) == 0x000018, "Member 'PAWN_Avatar_C_UpdateCameraRotation::CallFunc_BreakVector_Y' has a wrong offset!");
static_assert(offsetof(PAWN_Avatar_C_UpdateCameraRotation, CallFunc_BreakVector_Z) == 0x00001C, "Member 'PAWN_Avatar_C_UpdateCameraRotation::CallFunc_BreakVector_Z' has a wrong offset!");
static_assert(offsetof(PAWN_Avatar_C_UpdateCameraRotation, CallFunc_FClamp_ReturnValue) == 0x000020, "Member 'PAWN_Avatar_C_UpdateCameraRotation::CallFunc_FClamp_ReturnValue' has a wrong offset!");
static_assert(offsetof(PAWN_Avatar_C_UpdateCameraRotation, CallFunc_Multiply_FloatFloat_ReturnValue_1) == 0x000024, "Member 'PAWN_Avatar_C_UpdateCameraRotation::CallFunc_Multiply_FloatFloat_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(PAWN_Avatar_C_UpdateCameraRotation, CallFunc_BreakVector_X_1) == 0x000028, "Member 'PAWN_Avatar_C_UpdateCameraRotation::CallFunc_BreakVector_X_1' has a wrong offset!");
static_assert(offsetof(PAWN_Avatar_C_UpdateCameraRotation, CallFunc_BreakVector_Y_1) == 0x00002C, "Member 'PAWN_Avatar_C_UpdateCameraRotation::CallFunc_BreakVector_Y_1' has a wrong offset!");
static_assert(offsetof(PAWN_Avatar_C_UpdateCameraRotation, CallFunc_BreakVector_Z_1) == 0x000030, "Member 'PAWN_Avatar_C_UpdateCameraRotation::CallFunc_BreakVector_Z_1' has a wrong offset!");
static_assert(offsetof(PAWN_Avatar_C_UpdateCameraRotation, CallFunc_FClamp_ReturnValue_1) == 0x000034, "Member 'PAWN_Avatar_C_UpdateCameraRotation::CallFunc_FClamp_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(PAWN_Avatar_C_UpdateCameraRotation, CallFunc_Multiply_FloatFloat_ReturnValue_2) == 0x000038, "Member 'PAWN_Avatar_C_UpdateCameraRotation::CallFunc_Multiply_FloatFloat_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(PAWN_Avatar_C_UpdateCameraRotation, CallFunc_MakeVector2D_ReturnValue) == 0x00003C, "Member 'PAWN_Avatar_C_UpdateCameraRotation::CallFunc_MakeVector2D_ReturnValue' has a wrong offset!");
static_assert(offsetof(PAWN_Avatar_C_UpdateCameraRotation, CallFunc_GetSmoothedVec2_ReturnValue) == 0x000044, "Member 'PAWN_Avatar_C_UpdateCameraRotation::CallFunc_GetSmoothedVec2_ReturnValue' has a wrong offset!");
static_assert(offsetof(PAWN_Avatar_C_UpdateCameraRotation, CallFunc_BreakVector2D_X) == 0x00004C, "Member 'PAWN_Avatar_C_UpdateCameraRotation::CallFunc_BreakVector2D_X' has a wrong offset!");
static_assert(offsetof(PAWN_Avatar_C_UpdateCameraRotation, CallFunc_BreakVector2D_Y) == 0x000050, "Member 'PAWN_Avatar_C_UpdateCameraRotation::CallFunc_BreakVector2D_Y' has a wrong offset!");
static_assert(offsetof(PAWN_Avatar_C_UpdateCameraRotation, CallFunc_MakeRotator_ReturnValue) == 0x000054, "Member 'PAWN_Avatar_C_UpdateCameraRotation::CallFunc_MakeRotator_ReturnValue' has a wrong offset!");
static_assert(offsetof(PAWN_Avatar_C_UpdateCameraRotation, CallFunc_K2_SetRelativeRotation_SweepHitResult) == 0x000060, "Member 'PAWN_Avatar_C_UpdateCameraRotation::CallFunc_K2_SetRelativeRotation_SweepHitResult' has a wrong offset!");

// Function PAWN_Avatar.PAWN_Avatar_C.GetAvatarVelocity
// 0x0098 (0x0098 - 0x0000)
struct PAWN_Avatar_C_GetAvatarVelocity final
{
public:
	bool                                          LastTick;                                          // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                Velocity;                                          // 0x0004(0x000C)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                DomainLinkVelocity;                                // 0x0010(0x000C)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                ThrusterVelocity;                                  // 0x001C(0x000C)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class ACYBR_DomainLink_C*                     DomainLink;                                        // 0x0028(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UITEM_CyberDash_C*                      DashItem;                                          // 0x0030(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Variable;                                // 0x0038(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Temp_bool_Variable_1;                              // 0x0039(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x003A(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_3B[0x1];                                       // 0x003B(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                CallFunc_Add_VectorVector_ReturnValue;             // 0x003C(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_K2_GetActorLocation_ReturnValue;          // 0x0048(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_GetDomainLinkDirection_Direction;         // 0x0054(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Multiply_VectorFloat_ReturnValue;         // 0x0060(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue_1;                    // 0x006C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_6D[0x3];                                       // 0x006D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                CallFunc_GetLastUpdateVelocity_ReturnValue;        // 0x0070(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_7C[0x4];                                       // 0x007C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class ACYBR_DomainLink_C*                     K2Node_Select_Default;                             // 0x0080(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                K2Node_Select_Default_1;                           // 0x0088(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Greater_FloatFloat_ReturnValue;           // 0x0094(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(PAWN_Avatar_C_GetAvatarVelocity) == 0x000008, "Wrong alignment on PAWN_Avatar_C_GetAvatarVelocity");
static_assert(sizeof(PAWN_Avatar_C_GetAvatarVelocity) == 0x000098, "Wrong size on PAWN_Avatar_C_GetAvatarVelocity");
static_assert(offsetof(PAWN_Avatar_C_GetAvatarVelocity, LastTick) == 0x000000, "Member 'PAWN_Avatar_C_GetAvatarVelocity::LastTick' has a wrong offset!");
static_assert(offsetof(PAWN_Avatar_C_GetAvatarVelocity, Velocity) == 0x000004, "Member 'PAWN_Avatar_C_GetAvatarVelocity::Velocity' has a wrong offset!");
static_assert(offsetof(PAWN_Avatar_C_GetAvatarVelocity, DomainLinkVelocity) == 0x000010, "Member 'PAWN_Avatar_C_GetAvatarVelocity::DomainLinkVelocity' has a wrong offset!");
static_assert(offsetof(PAWN_Avatar_C_GetAvatarVelocity, ThrusterVelocity) == 0x00001C, "Member 'PAWN_Avatar_C_GetAvatarVelocity::ThrusterVelocity' has a wrong offset!");
static_assert(offsetof(PAWN_Avatar_C_GetAvatarVelocity, DomainLink) == 0x000028, "Member 'PAWN_Avatar_C_GetAvatarVelocity::DomainLink' has a wrong offset!");
static_assert(offsetof(PAWN_Avatar_C_GetAvatarVelocity, DashItem) == 0x000030, "Member 'PAWN_Avatar_C_GetAvatarVelocity::DashItem' has a wrong offset!");
static_assert(offsetof(PAWN_Avatar_C_GetAvatarVelocity, Temp_bool_Variable) == 0x000038, "Member 'PAWN_Avatar_C_GetAvatarVelocity::Temp_bool_Variable' has a wrong offset!");
static_assert(offsetof(PAWN_Avatar_C_GetAvatarVelocity, Temp_bool_Variable_1) == 0x000039, "Member 'PAWN_Avatar_C_GetAvatarVelocity::Temp_bool_Variable_1' has a wrong offset!");
static_assert(offsetof(PAWN_Avatar_C_GetAvatarVelocity, CallFunc_IsValid_ReturnValue) == 0x00003A, "Member 'PAWN_Avatar_C_GetAvatarVelocity::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(PAWN_Avatar_C_GetAvatarVelocity, CallFunc_Add_VectorVector_ReturnValue) == 0x00003C, "Member 'PAWN_Avatar_C_GetAvatarVelocity::CallFunc_Add_VectorVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(PAWN_Avatar_C_GetAvatarVelocity, CallFunc_K2_GetActorLocation_ReturnValue) == 0x000048, "Member 'PAWN_Avatar_C_GetAvatarVelocity::CallFunc_K2_GetActorLocation_ReturnValue' has a wrong offset!");
static_assert(offsetof(PAWN_Avatar_C_GetAvatarVelocity, CallFunc_GetDomainLinkDirection_Direction) == 0x000054, "Member 'PAWN_Avatar_C_GetAvatarVelocity::CallFunc_GetDomainLinkDirection_Direction' has a wrong offset!");
static_assert(offsetof(PAWN_Avatar_C_GetAvatarVelocity, CallFunc_Multiply_VectorFloat_ReturnValue) == 0x000060, "Member 'PAWN_Avatar_C_GetAvatarVelocity::CallFunc_Multiply_VectorFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(PAWN_Avatar_C_GetAvatarVelocity, CallFunc_IsValid_ReturnValue_1) == 0x00006C, "Member 'PAWN_Avatar_C_GetAvatarVelocity::CallFunc_IsValid_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(PAWN_Avatar_C_GetAvatarVelocity, CallFunc_GetLastUpdateVelocity_ReturnValue) == 0x000070, "Member 'PAWN_Avatar_C_GetAvatarVelocity::CallFunc_GetLastUpdateVelocity_ReturnValue' has a wrong offset!");
static_assert(offsetof(PAWN_Avatar_C_GetAvatarVelocity, K2Node_Select_Default) == 0x000080, "Member 'PAWN_Avatar_C_GetAvatarVelocity::K2Node_Select_Default' has a wrong offset!");
static_assert(offsetof(PAWN_Avatar_C_GetAvatarVelocity, K2Node_Select_Default_1) == 0x000088, "Member 'PAWN_Avatar_C_GetAvatarVelocity::K2Node_Select_Default_1' has a wrong offset!");
static_assert(offsetof(PAWN_Avatar_C_GetAvatarVelocity, CallFunc_Greater_FloatFloat_ReturnValue) == 0x000094, "Member 'PAWN_Avatar_C_GetAvatarVelocity::CallFunc_Greater_FloatFloat_ReturnValue' has a wrong offset!");

// Function PAWN_Avatar.PAWN_Avatar_C.ApplyBounceImpulse
// 0x0180 (0x0180 - 0x0000)
struct PAWN_Avatar_C_ApplyBounceImpulse final
{
public:
	struct FHitResult                             HitResult;                                         // 0x0000(0x0088)(BlueprintVisible, BlueprintReadOnly, Parm, IsPlainOldData, NoDestructor, ContainsInstancedReference)
	class UITEM_CyberDash_C*                      DashItem;                                          // 0x0088(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         BounceSpeed;                                       // 0x0090(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                BounceVelocity;                                    // 0x0094(0x000C)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CurrentTimestamp;                                  // 0x00A0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_A4[0x4];                                       // 0x00A4(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class AGameModeBase*                          CallFunc_GetGameMode_ReturnValue;                  // 0x00A8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AGM_SinglePlayer_C*                     K2Node_DynamicCast_AsGM_Single_Player;             // 0x00B0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x00B8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BreakHitResult_bBlockingHit;              // 0x00B9(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BreakHitResult_bInitialOverlap;           // 0x00BA(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_BB[0x1];                                       // 0x00BB(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_BreakHitResult_Time;                      // 0x00BC(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakHitResult_Distance;                  // 0x00C0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakHitResult_Location;                  // 0x00C4(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakHitResult_ImpactPoint;               // 0x00D0(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakHitResult_Normal;                    // 0x00DC(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakHitResult_ImpactNormal;              // 0x00E8(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_F4[0x4];                                       // 0x00F4(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UPhysicalMaterial*                      CallFunc_BreakHitResult_PhysMat;                   // 0x00F8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 CallFunc_BreakHitResult_HitActor;                  // 0x0100(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UPrimitiveComponent*                    CallFunc_BreakHitResult_HitComponent;              // 0x0108(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FName                                   CallFunc_BreakHitResult_HitBoneName;               // 0x0110(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_BreakHitResult_HitItem;                   // 0x0118(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_BreakHitResult_ElementIndex;              // 0x011C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_BreakHitResult_FaceIndex;                 // 0x0120(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakHitResult_TraceStart;                // 0x0124(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakHitResult_TraceEnd;                  // 0x0130(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_NotEqual_FloatFloat_ReturnValue;          // 0x013C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_13D[0x3];                                      // 0x013D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                CallFunc_GetAvatarVelocity_Velocity;               // 0x0140(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_GetReflectionVector_ReturnValue;          // 0x014C(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Normal_ReturnValue;                       // 0x0158(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_VSize_ReturnValue;                        // 0x0164(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Multiply_VectorFloat_ReturnValue;         // 0x0168(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_FClamp_ReturnValue;                       // 0x0174(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_GetGameTimeInSeconds_ReturnValue;         // 0x0178(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(PAWN_Avatar_C_ApplyBounceImpulse) == 0x000008, "Wrong alignment on PAWN_Avatar_C_ApplyBounceImpulse");
static_assert(sizeof(PAWN_Avatar_C_ApplyBounceImpulse) == 0x000180, "Wrong size on PAWN_Avatar_C_ApplyBounceImpulse");
static_assert(offsetof(PAWN_Avatar_C_ApplyBounceImpulse, HitResult) == 0x000000, "Member 'PAWN_Avatar_C_ApplyBounceImpulse::HitResult' has a wrong offset!");
static_assert(offsetof(PAWN_Avatar_C_ApplyBounceImpulse, DashItem) == 0x000088, "Member 'PAWN_Avatar_C_ApplyBounceImpulse::DashItem' has a wrong offset!");
static_assert(offsetof(PAWN_Avatar_C_ApplyBounceImpulse, BounceSpeed) == 0x000090, "Member 'PAWN_Avatar_C_ApplyBounceImpulse::BounceSpeed' has a wrong offset!");
static_assert(offsetof(PAWN_Avatar_C_ApplyBounceImpulse, BounceVelocity) == 0x000094, "Member 'PAWN_Avatar_C_ApplyBounceImpulse::BounceVelocity' has a wrong offset!");
static_assert(offsetof(PAWN_Avatar_C_ApplyBounceImpulse, CurrentTimestamp) == 0x0000A0, "Member 'PAWN_Avatar_C_ApplyBounceImpulse::CurrentTimestamp' has a wrong offset!");
static_assert(offsetof(PAWN_Avatar_C_ApplyBounceImpulse, CallFunc_GetGameMode_ReturnValue) == 0x0000A8, "Member 'PAWN_Avatar_C_ApplyBounceImpulse::CallFunc_GetGameMode_ReturnValue' has a wrong offset!");
static_assert(offsetof(PAWN_Avatar_C_ApplyBounceImpulse, K2Node_DynamicCast_AsGM_Single_Player) == 0x0000B0, "Member 'PAWN_Avatar_C_ApplyBounceImpulse::K2Node_DynamicCast_AsGM_Single_Player' has a wrong offset!");
static_assert(offsetof(PAWN_Avatar_C_ApplyBounceImpulse, K2Node_DynamicCast_bSuccess) == 0x0000B8, "Member 'PAWN_Avatar_C_ApplyBounceImpulse::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(PAWN_Avatar_C_ApplyBounceImpulse, CallFunc_BreakHitResult_bBlockingHit) == 0x0000B9, "Member 'PAWN_Avatar_C_ApplyBounceImpulse::CallFunc_BreakHitResult_bBlockingHit' has a wrong offset!");
static_assert(offsetof(PAWN_Avatar_C_ApplyBounceImpulse, CallFunc_BreakHitResult_bInitialOverlap) == 0x0000BA, "Member 'PAWN_Avatar_C_ApplyBounceImpulse::CallFunc_BreakHitResult_bInitialOverlap' has a wrong offset!");
static_assert(offsetof(PAWN_Avatar_C_ApplyBounceImpulse, CallFunc_BreakHitResult_Time) == 0x0000BC, "Member 'PAWN_Avatar_C_ApplyBounceImpulse::CallFunc_BreakHitResult_Time' has a wrong offset!");
static_assert(offsetof(PAWN_Avatar_C_ApplyBounceImpulse, CallFunc_BreakHitResult_Distance) == 0x0000C0, "Member 'PAWN_Avatar_C_ApplyBounceImpulse::CallFunc_BreakHitResult_Distance' has a wrong offset!");
static_assert(offsetof(PAWN_Avatar_C_ApplyBounceImpulse, CallFunc_BreakHitResult_Location) == 0x0000C4, "Member 'PAWN_Avatar_C_ApplyBounceImpulse::CallFunc_BreakHitResult_Location' has a wrong offset!");
static_assert(offsetof(PAWN_Avatar_C_ApplyBounceImpulse, CallFunc_BreakHitResult_ImpactPoint) == 0x0000D0, "Member 'PAWN_Avatar_C_ApplyBounceImpulse::CallFunc_BreakHitResult_ImpactPoint' has a wrong offset!");
static_assert(offsetof(PAWN_Avatar_C_ApplyBounceImpulse, CallFunc_BreakHitResult_Normal) == 0x0000DC, "Member 'PAWN_Avatar_C_ApplyBounceImpulse::CallFunc_BreakHitResult_Normal' has a wrong offset!");
static_assert(offsetof(PAWN_Avatar_C_ApplyBounceImpulse, CallFunc_BreakHitResult_ImpactNormal) == 0x0000E8, "Member 'PAWN_Avatar_C_ApplyBounceImpulse::CallFunc_BreakHitResult_ImpactNormal' has a wrong offset!");
static_assert(offsetof(PAWN_Avatar_C_ApplyBounceImpulse, CallFunc_BreakHitResult_PhysMat) == 0x0000F8, "Member 'PAWN_Avatar_C_ApplyBounceImpulse::CallFunc_BreakHitResult_PhysMat' has a wrong offset!");
static_assert(offsetof(PAWN_Avatar_C_ApplyBounceImpulse, CallFunc_BreakHitResult_HitActor) == 0x000100, "Member 'PAWN_Avatar_C_ApplyBounceImpulse::CallFunc_BreakHitResult_HitActor' has a wrong offset!");
static_assert(offsetof(PAWN_Avatar_C_ApplyBounceImpulse, CallFunc_BreakHitResult_HitComponent) == 0x000108, "Member 'PAWN_Avatar_C_ApplyBounceImpulse::CallFunc_BreakHitResult_HitComponent' has a wrong offset!");
static_assert(offsetof(PAWN_Avatar_C_ApplyBounceImpulse, CallFunc_BreakHitResult_HitBoneName) == 0x000110, "Member 'PAWN_Avatar_C_ApplyBounceImpulse::CallFunc_BreakHitResult_HitBoneName' has a wrong offset!");
static_assert(offsetof(PAWN_Avatar_C_ApplyBounceImpulse, CallFunc_BreakHitResult_HitItem) == 0x000118, "Member 'PAWN_Avatar_C_ApplyBounceImpulse::CallFunc_BreakHitResult_HitItem' has a wrong offset!");
static_assert(offsetof(PAWN_Avatar_C_ApplyBounceImpulse, CallFunc_BreakHitResult_ElementIndex) == 0x00011C, "Member 'PAWN_Avatar_C_ApplyBounceImpulse::CallFunc_BreakHitResult_ElementIndex' has a wrong offset!");
static_assert(offsetof(PAWN_Avatar_C_ApplyBounceImpulse, CallFunc_BreakHitResult_FaceIndex) == 0x000120, "Member 'PAWN_Avatar_C_ApplyBounceImpulse::CallFunc_BreakHitResult_FaceIndex' has a wrong offset!");
static_assert(offsetof(PAWN_Avatar_C_ApplyBounceImpulse, CallFunc_BreakHitResult_TraceStart) == 0x000124, "Member 'PAWN_Avatar_C_ApplyBounceImpulse::CallFunc_BreakHitResult_TraceStart' has a wrong offset!");
static_assert(offsetof(PAWN_Avatar_C_ApplyBounceImpulse, CallFunc_BreakHitResult_TraceEnd) == 0x000130, "Member 'PAWN_Avatar_C_ApplyBounceImpulse::CallFunc_BreakHitResult_TraceEnd' has a wrong offset!");
static_assert(offsetof(PAWN_Avatar_C_ApplyBounceImpulse, CallFunc_NotEqual_FloatFloat_ReturnValue) == 0x00013C, "Member 'PAWN_Avatar_C_ApplyBounceImpulse::CallFunc_NotEqual_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(PAWN_Avatar_C_ApplyBounceImpulse, CallFunc_GetAvatarVelocity_Velocity) == 0x000140, "Member 'PAWN_Avatar_C_ApplyBounceImpulse::CallFunc_GetAvatarVelocity_Velocity' has a wrong offset!");
static_assert(offsetof(PAWN_Avatar_C_ApplyBounceImpulse, CallFunc_GetReflectionVector_ReturnValue) == 0x00014C, "Member 'PAWN_Avatar_C_ApplyBounceImpulse::CallFunc_GetReflectionVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(PAWN_Avatar_C_ApplyBounceImpulse, CallFunc_Normal_ReturnValue) == 0x000158, "Member 'PAWN_Avatar_C_ApplyBounceImpulse::CallFunc_Normal_ReturnValue' has a wrong offset!");
static_assert(offsetof(PAWN_Avatar_C_ApplyBounceImpulse, CallFunc_VSize_ReturnValue) == 0x000164, "Member 'PAWN_Avatar_C_ApplyBounceImpulse::CallFunc_VSize_ReturnValue' has a wrong offset!");
static_assert(offsetof(PAWN_Avatar_C_ApplyBounceImpulse, CallFunc_Multiply_VectorFloat_ReturnValue) == 0x000168, "Member 'PAWN_Avatar_C_ApplyBounceImpulse::CallFunc_Multiply_VectorFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(PAWN_Avatar_C_ApplyBounceImpulse, CallFunc_FClamp_ReturnValue) == 0x000174, "Member 'PAWN_Avatar_C_ApplyBounceImpulse::CallFunc_FClamp_ReturnValue' has a wrong offset!");
static_assert(offsetof(PAWN_Avatar_C_ApplyBounceImpulse, CallFunc_GetGameTimeInSeconds_ReturnValue) == 0x000178, "Member 'PAWN_Avatar_C_ApplyBounceImpulse::CallFunc_GetGameTimeInSeconds_ReturnValue' has a wrong offset!");

// Function PAWN_Avatar.PAWN_Avatar_C.ApplyBounceDamage
// 0x00F8 (0x00F8 - 0x0000)
struct PAWN_Avatar_C_ApplyBounceDamage final
{
public:
	float                                         Speed;                                             // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FAttribModApplyData                    BounceDamageMod;                                   // 0x0008(0x00A0)(Edit, BlueprintVisible)
	int32                                         BounceDamage;                                      // 0x00A8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ENUM_GameDifficulty                           Temp_byte_Variable;                                // 0x00AC(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_AD[0x3];                                       // 0x00AD(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Temp_int_Variable;                                 // 0x00B0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Variable_1;                               // 0x00B4(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Variable_2;                               // 0x00B8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Greater_IntInt_ReturnValue;               // 0x00BC(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_BD[0x3];                                       // 0x00BD(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_Conv_IntToFloat_ReturnValue;              // 0x00C0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_C4[0x4];                                       // 0x00C4(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UGameInstance*                          CallFunc_GetGameInstance_ReturnValue;              // 0x00C8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UGI_SinglePlayer_C*                     K2Node_DynamicCast_AsGI_Single_Player;             // 0x00D0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x00D8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Greater_FloatFloat_ReturnValue;           // 0x00D9(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	ENUM_GameDifficulty                           CallFunc_GetDifficultyByType_Difficulty;           // 0x00DA(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_DB[0x1];                                       // 0x00DB(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         K2Node_Select_Default;                             // 0x00DC(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Divide_FloatFloat_ReturnValue;            // 0x00E0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_FClamp_ReturnValue;                       // 0x00E4(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Round_ReturnValue;                        // 0x00E8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Subtract_IntInt_ReturnValue;              // 0x00EC(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UAttribMod*                             CallFunc_ApplyMod_ReturnValue;                     // 0x00F0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(PAWN_Avatar_C_ApplyBounceDamage) == 0x000008, "Wrong alignment on PAWN_Avatar_C_ApplyBounceDamage");
static_assert(sizeof(PAWN_Avatar_C_ApplyBounceDamage) == 0x0000F8, "Wrong size on PAWN_Avatar_C_ApplyBounceDamage");
static_assert(offsetof(PAWN_Avatar_C_ApplyBounceDamage, Speed) == 0x000000, "Member 'PAWN_Avatar_C_ApplyBounceDamage::Speed' has a wrong offset!");
static_assert(offsetof(PAWN_Avatar_C_ApplyBounceDamage, BounceDamageMod) == 0x000008, "Member 'PAWN_Avatar_C_ApplyBounceDamage::BounceDamageMod' has a wrong offset!");
static_assert(offsetof(PAWN_Avatar_C_ApplyBounceDamage, BounceDamage) == 0x0000A8, "Member 'PAWN_Avatar_C_ApplyBounceDamage::BounceDamage' has a wrong offset!");
static_assert(offsetof(PAWN_Avatar_C_ApplyBounceDamage, Temp_byte_Variable) == 0x0000AC, "Member 'PAWN_Avatar_C_ApplyBounceDamage::Temp_byte_Variable' has a wrong offset!");
static_assert(offsetof(PAWN_Avatar_C_ApplyBounceDamage, Temp_int_Variable) == 0x0000B0, "Member 'PAWN_Avatar_C_ApplyBounceDamage::Temp_int_Variable' has a wrong offset!");
static_assert(offsetof(PAWN_Avatar_C_ApplyBounceDamage, Temp_int_Variable_1) == 0x0000B4, "Member 'PAWN_Avatar_C_ApplyBounceDamage::Temp_int_Variable_1' has a wrong offset!");
static_assert(offsetof(PAWN_Avatar_C_ApplyBounceDamage, Temp_int_Variable_2) == 0x0000B8, "Member 'PAWN_Avatar_C_ApplyBounceDamage::Temp_int_Variable_2' has a wrong offset!");
static_assert(offsetof(PAWN_Avatar_C_ApplyBounceDamage, CallFunc_Greater_IntInt_ReturnValue) == 0x0000BC, "Member 'PAWN_Avatar_C_ApplyBounceDamage::CallFunc_Greater_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(PAWN_Avatar_C_ApplyBounceDamage, CallFunc_Conv_IntToFloat_ReturnValue) == 0x0000C0, "Member 'PAWN_Avatar_C_ApplyBounceDamage::CallFunc_Conv_IntToFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(PAWN_Avatar_C_ApplyBounceDamage, CallFunc_GetGameInstance_ReturnValue) == 0x0000C8, "Member 'PAWN_Avatar_C_ApplyBounceDamage::CallFunc_GetGameInstance_ReturnValue' has a wrong offset!");
static_assert(offsetof(PAWN_Avatar_C_ApplyBounceDamage, K2Node_DynamicCast_AsGI_Single_Player) == 0x0000D0, "Member 'PAWN_Avatar_C_ApplyBounceDamage::K2Node_DynamicCast_AsGI_Single_Player' has a wrong offset!");
static_assert(offsetof(PAWN_Avatar_C_ApplyBounceDamage, K2Node_DynamicCast_bSuccess) == 0x0000D8, "Member 'PAWN_Avatar_C_ApplyBounceDamage::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(PAWN_Avatar_C_ApplyBounceDamage, CallFunc_Greater_FloatFloat_ReturnValue) == 0x0000D9, "Member 'PAWN_Avatar_C_ApplyBounceDamage::CallFunc_Greater_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(PAWN_Avatar_C_ApplyBounceDamage, CallFunc_GetDifficultyByType_Difficulty) == 0x0000DA, "Member 'PAWN_Avatar_C_ApplyBounceDamage::CallFunc_GetDifficultyByType_Difficulty' has a wrong offset!");
static_assert(offsetof(PAWN_Avatar_C_ApplyBounceDamage, K2Node_Select_Default) == 0x0000DC, "Member 'PAWN_Avatar_C_ApplyBounceDamage::K2Node_Select_Default' has a wrong offset!");
static_assert(offsetof(PAWN_Avatar_C_ApplyBounceDamage, CallFunc_Divide_FloatFloat_ReturnValue) == 0x0000E0, "Member 'PAWN_Avatar_C_ApplyBounceDamage::CallFunc_Divide_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(PAWN_Avatar_C_ApplyBounceDamage, CallFunc_FClamp_ReturnValue) == 0x0000E4, "Member 'PAWN_Avatar_C_ApplyBounceDamage::CallFunc_FClamp_ReturnValue' has a wrong offset!");
static_assert(offsetof(PAWN_Avatar_C_ApplyBounceDamage, CallFunc_Round_ReturnValue) == 0x0000E8, "Member 'PAWN_Avatar_C_ApplyBounceDamage::CallFunc_Round_ReturnValue' has a wrong offset!");
static_assert(offsetof(PAWN_Avatar_C_ApplyBounceDamage, CallFunc_Subtract_IntInt_ReturnValue) == 0x0000EC, "Member 'PAWN_Avatar_C_ApplyBounceDamage::CallFunc_Subtract_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(PAWN_Avatar_C_ApplyBounceDamage, CallFunc_ApplyMod_ReturnValue) == 0x0000F0, "Member 'PAWN_Avatar_C_ApplyBounceDamage::CallFunc_ApplyMod_ReturnValue' has a wrong offset!");

// Function PAWN_Avatar.PAWN_Avatar_C.ShouldBounce
// 0x0058 (0x0058 - 0x0000)
struct PAWN_Avatar_C_ShouldBounce final
{
public:
	class AActor*                                 OtherActor;                                        // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UPrimitiveComponent*                    OtherComponent;                                    // 0x0008(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Result;                                            // 0x0010(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class ACYBR_Barrier_C*                        K2Node_DynamicCast_AsCYBR_Barrier;                 // 0x0018(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0020(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_21[0x7];                                       // 0x0021(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UModelComponent*                        K2Node_DynamicCast_AsModel_Component;              // 0x0028(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess_1;                     // 0x0030(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_31[0x7];                                       // 0x0031(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class ACYBR_Switch_C*                         K2Node_DynamicCast_AsCYBR_Switch;                  // 0x0038(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess_2;                     // 0x0040(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_41[0x7];                                       // 0x0041(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class ACYBR_StaticWall_C*                     K2Node_DynamicCast_AsCYBR_Static_Wall;             // 0x0048(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess_3;                     // 0x0050(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(PAWN_Avatar_C_ShouldBounce) == 0x000008, "Wrong alignment on PAWN_Avatar_C_ShouldBounce");
static_assert(sizeof(PAWN_Avatar_C_ShouldBounce) == 0x000058, "Wrong size on PAWN_Avatar_C_ShouldBounce");
static_assert(offsetof(PAWN_Avatar_C_ShouldBounce, OtherActor) == 0x000000, "Member 'PAWN_Avatar_C_ShouldBounce::OtherActor' has a wrong offset!");
static_assert(offsetof(PAWN_Avatar_C_ShouldBounce, OtherComponent) == 0x000008, "Member 'PAWN_Avatar_C_ShouldBounce::OtherComponent' has a wrong offset!");
static_assert(offsetof(PAWN_Avatar_C_ShouldBounce, Result) == 0x000010, "Member 'PAWN_Avatar_C_ShouldBounce::Result' has a wrong offset!");
static_assert(offsetof(PAWN_Avatar_C_ShouldBounce, K2Node_DynamicCast_AsCYBR_Barrier) == 0x000018, "Member 'PAWN_Avatar_C_ShouldBounce::K2Node_DynamicCast_AsCYBR_Barrier' has a wrong offset!");
static_assert(offsetof(PAWN_Avatar_C_ShouldBounce, K2Node_DynamicCast_bSuccess) == 0x000020, "Member 'PAWN_Avatar_C_ShouldBounce::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(PAWN_Avatar_C_ShouldBounce, K2Node_DynamicCast_AsModel_Component) == 0x000028, "Member 'PAWN_Avatar_C_ShouldBounce::K2Node_DynamicCast_AsModel_Component' has a wrong offset!");
static_assert(offsetof(PAWN_Avatar_C_ShouldBounce, K2Node_DynamicCast_bSuccess_1) == 0x000030, "Member 'PAWN_Avatar_C_ShouldBounce::K2Node_DynamicCast_bSuccess_1' has a wrong offset!");
static_assert(offsetof(PAWN_Avatar_C_ShouldBounce, K2Node_DynamicCast_AsCYBR_Switch) == 0x000038, "Member 'PAWN_Avatar_C_ShouldBounce::K2Node_DynamicCast_AsCYBR_Switch' has a wrong offset!");
static_assert(offsetof(PAWN_Avatar_C_ShouldBounce, K2Node_DynamicCast_bSuccess_2) == 0x000040, "Member 'PAWN_Avatar_C_ShouldBounce::K2Node_DynamicCast_bSuccess_2' has a wrong offset!");
static_assert(offsetof(PAWN_Avatar_C_ShouldBounce, K2Node_DynamicCast_AsCYBR_Static_Wall) == 0x000048, "Member 'PAWN_Avatar_C_ShouldBounce::K2Node_DynamicCast_AsCYBR_Static_Wall' has a wrong offset!");
static_assert(offsetof(PAWN_Avatar_C_ShouldBounce, K2Node_DynamicCast_bSuccess_3) == 0x000050, "Member 'PAWN_Avatar_C_ShouldBounce::K2Node_DynamicCast_bSuccess_3' has a wrong offset!");

// Function PAWN_Avatar.PAWN_Avatar_C.UpdateDashPower
// 0x0038 (0x0038 - 0x0000)
struct PAWN_Avatar_C_UpdateDashPower final
{
public:
	float                                         DeltaTime;                                         // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         DesiredDashSpeedScale;                             // 0x0004(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UITEM_CyberDash_C*                      DashItem;                                          // 0x0008(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0010(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_NotEqualExactly_VectorVector_ReturnValue; // 0x0011(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_12[0x2];                                       // 0x0012(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_Multiply_FloatFloat_ReturnValue;          // 0x0014(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Divide_FloatFloat_ReturnValue;            // 0x0018(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_FClamp_ReturnValue;                       // 0x001C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Ease_ReturnValue;                         // 0x0020(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_FMax_ReturnValue;                         // 0x0024(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Multiply_FloatFloat_ReturnValue_1;        // 0x0028(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_UpdateDashPower_SpeedScale;               // 0x002C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UITEM_CyberDash_C*                      CallFunc_GetDashItem_DashItem;                     // 0x0030(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(PAWN_Avatar_C_UpdateDashPower) == 0x000008, "Wrong alignment on PAWN_Avatar_C_UpdateDashPower");
static_assert(sizeof(PAWN_Avatar_C_UpdateDashPower) == 0x000038, "Wrong size on PAWN_Avatar_C_UpdateDashPower");
static_assert(offsetof(PAWN_Avatar_C_UpdateDashPower, DeltaTime) == 0x000000, "Member 'PAWN_Avatar_C_UpdateDashPower::DeltaTime' has a wrong offset!");
static_assert(offsetof(PAWN_Avatar_C_UpdateDashPower, DesiredDashSpeedScale) == 0x000004, "Member 'PAWN_Avatar_C_UpdateDashPower::DesiredDashSpeedScale' has a wrong offset!");
static_assert(offsetof(PAWN_Avatar_C_UpdateDashPower, DashItem) == 0x000008, "Member 'PAWN_Avatar_C_UpdateDashPower::DashItem' has a wrong offset!");
static_assert(offsetof(PAWN_Avatar_C_UpdateDashPower, CallFunc_IsValid_ReturnValue) == 0x000010, "Member 'PAWN_Avatar_C_UpdateDashPower::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(PAWN_Avatar_C_UpdateDashPower, CallFunc_NotEqualExactly_VectorVector_ReturnValue) == 0x000011, "Member 'PAWN_Avatar_C_UpdateDashPower::CallFunc_NotEqualExactly_VectorVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(PAWN_Avatar_C_UpdateDashPower, CallFunc_Multiply_FloatFloat_ReturnValue) == 0x000014, "Member 'PAWN_Avatar_C_UpdateDashPower::CallFunc_Multiply_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(PAWN_Avatar_C_UpdateDashPower, CallFunc_Divide_FloatFloat_ReturnValue) == 0x000018, "Member 'PAWN_Avatar_C_UpdateDashPower::CallFunc_Divide_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(PAWN_Avatar_C_UpdateDashPower, CallFunc_FClamp_ReturnValue) == 0x00001C, "Member 'PAWN_Avatar_C_UpdateDashPower::CallFunc_FClamp_ReturnValue' has a wrong offset!");
static_assert(offsetof(PAWN_Avatar_C_UpdateDashPower, CallFunc_Ease_ReturnValue) == 0x000020, "Member 'PAWN_Avatar_C_UpdateDashPower::CallFunc_Ease_ReturnValue' has a wrong offset!");
static_assert(offsetof(PAWN_Avatar_C_UpdateDashPower, CallFunc_FMax_ReturnValue) == 0x000024, "Member 'PAWN_Avatar_C_UpdateDashPower::CallFunc_FMax_ReturnValue' has a wrong offset!");
static_assert(offsetof(PAWN_Avatar_C_UpdateDashPower, CallFunc_Multiply_FloatFloat_ReturnValue_1) == 0x000028, "Member 'PAWN_Avatar_C_UpdateDashPower::CallFunc_Multiply_FloatFloat_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(PAWN_Avatar_C_UpdateDashPower, CallFunc_UpdateDashPower_SpeedScale) == 0x00002C, "Member 'PAWN_Avatar_C_UpdateDashPower::CallFunc_UpdateDashPower_SpeedScale' has a wrong offset!");
static_assert(offsetof(PAWN_Avatar_C_UpdateDashPower, CallFunc_GetDashItem_DashItem) == 0x000030, "Member 'PAWN_Avatar_C_UpdateDashPower::CallFunc_GetDashItem_DashItem' has a wrong offset!");

// Function PAWN_Avatar.PAWN_Avatar_C.GetDashItem
// 0x0030 (0x0030 - 0x0000)
struct PAWN_Avatar_C_GetDashItem final
{
public:
	class UITEM_CyberDash_C*                      DashItem;                                          // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UInventoryBag_C*                        CyberspaceBag;                                     // 0x0008(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UInventoryBag_C*                        CallFunc_GetBagByType_Bag;                         // 0x0010(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UITEM_Base_C*                           CallFunc_FindItem_FoundItem;                       // 0x0018(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UITEM_CyberDash_C*                      K2Node_DynamicCast_AsITEM_Cyber_Dash;              // 0x0020(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0028(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0029(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(PAWN_Avatar_C_GetDashItem) == 0x000008, "Wrong alignment on PAWN_Avatar_C_GetDashItem");
static_assert(sizeof(PAWN_Avatar_C_GetDashItem) == 0x000030, "Wrong size on PAWN_Avatar_C_GetDashItem");
static_assert(offsetof(PAWN_Avatar_C_GetDashItem, DashItem) == 0x000000, "Member 'PAWN_Avatar_C_GetDashItem::DashItem' has a wrong offset!");
static_assert(offsetof(PAWN_Avatar_C_GetDashItem, CyberspaceBag) == 0x000008, "Member 'PAWN_Avatar_C_GetDashItem::CyberspaceBag' has a wrong offset!");
static_assert(offsetof(PAWN_Avatar_C_GetDashItem, CallFunc_GetBagByType_Bag) == 0x000010, "Member 'PAWN_Avatar_C_GetDashItem::CallFunc_GetBagByType_Bag' has a wrong offset!");
static_assert(offsetof(PAWN_Avatar_C_GetDashItem, CallFunc_FindItem_FoundItem) == 0x000018, "Member 'PAWN_Avatar_C_GetDashItem::CallFunc_FindItem_FoundItem' has a wrong offset!");
static_assert(offsetof(PAWN_Avatar_C_GetDashItem, K2Node_DynamicCast_AsITEM_Cyber_Dash) == 0x000020, "Member 'PAWN_Avatar_C_GetDashItem::K2Node_DynamicCast_AsITEM_Cyber_Dash' has a wrong offset!");
static_assert(offsetof(PAWN_Avatar_C_GetDashItem, K2Node_DynamicCast_bSuccess) == 0x000028, "Member 'PAWN_Avatar_C_GetDashItem::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(PAWN_Avatar_C_GetDashItem, CallFunc_IsValid_ReturnValue) == 0x000029, "Member 'PAWN_Avatar_C_GetDashItem::CallFunc_IsValid_ReturnValue' has a wrong offset!");

// Function PAWN_Avatar.PAWN_Avatar_C.GetInventoryComponent
// 0x0008 (0x0008 - 0x0000)
struct PAWN_Avatar_C_GetInventoryComponent final
{
public:
	class UCOMP_Inventory_C*                      Inventory;                                         // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(PAWN_Avatar_C_GetInventoryComponent) == 0x000008, "Wrong alignment on PAWN_Avatar_C_GetInventoryComponent");
static_assert(sizeof(PAWN_Avatar_C_GetInventoryComponent) == 0x000008, "Wrong size on PAWN_Avatar_C_GetInventoryComponent");
static_assert(offsetof(PAWN_Avatar_C_GetInventoryComponent, Inventory) == 0x000000, "Member 'PAWN_Avatar_C_GetInventoryComponent::Inventory' has a wrong offset!");

// Function PAWN_Avatar.PAWN_Avatar_C.OnCharacterDied
// 0x0058 (0x0058 - 0x0000)
struct PAWN_Avatar_C_OnCharacterDied final
{
public:
	class UOBJ_ImpactData_C*                      ImpactData;                                        // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FAttribDamageInstance                  DamageInstance;                                    // 0x0008(0x0028)(BlueprintVisible, BlueprintReadOnly, Parm)
	class AActor*                                 OtherActor;                                        // 0x0030(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Result;                                            // 0x0038(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_OnCharacterDied_Result;                   // 0x0039(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_3A[0x6];                                       // 0x003A(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class AController*                            CallFunc_GetController_ReturnValue;                // 0x0040(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class ACON_Hacker_C*                          K2Node_DynamicCast_AsCON_Hacker;                   // 0x0048(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0050(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_TryOpenCyberRiftFromCyberspace_Result;    // 0x0051(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(PAWN_Avatar_C_OnCharacterDied) == 0x000008, "Wrong alignment on PAWN_Avatar_C_OnCharacterDied");
static_assert(sizeof(PAWN_Avatar_C_OnCharacterDied) == 0x000058, "Wrong size on PAWN_Avatar_C_OnCharacterDied");
static_assert(offsetof(PAWN_Avatar_C_OnCharacterDied, ImpactData) == 0x000000, "Member 'PAWN_Avatar_C_OnCharacterDied::ImpactData' has a wrong offset!");
static_assert(offsetof(PAWN_Avatar_C_OnCharacterDied, DamageInstance) == 0x000008, "Member 'PAWN_Avatar_C_OnCharacterDied::DamageInstance' has a wrong offset!");
static_assert(offsetof(PAWN_Avatar_C_OnCharacterDied, OtherActor) == 0x000030, "Member 'PAWN_Avatar_C_OnCharacterDied::OtherActor' has a wrong offset!");
static_assert(offsetof(PAWN_Avatar_C_OnCharacterDied, Result) == 0x000038, "Member 'PAWN_Avatar_C_OnCharacterDied::Result' has a wrong offset!");
static_assert(offsetof(PAWN_Avatar_C_OnCharacterDied, CallFunc_OnCharacterDied_Result) == 0x000039, "Member 'PAWN_Avatar_C_OnCharacterDied::CallFunc_OnCharacterDied_Result' has a wrong offset!");
static_assert(offsetof(PAWN_Avatar_C_OnCharacterDied, CallFunc_GetController_ReturnValue) == 0x000040, "Member 'PAWN_Avatar_C_OnCharacterDied::CallFunc_GetController_ReturnValue' has a wrong offset!");
static_assert(offsetof(PAWN_Avatar_C_OnCharacterDied, K2Node_DynamicCast_AsCON_Hacker) == 0x000048, "Member 'PAWN_Avatar_C_OnCharacterDied::K2Node_DynamicCast_AsCON_Hacker' has a wrong offset!");
static_assert(offsetof(PAWN_Avatar_C_OnCharacterDied, K2Node_DynamicCast_bSuccess) == 0x000050, "Member 'PAWN_Avatar_C_OnCharacterDied::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(PAWN_Avatar_C_OnCharacterDied, CallFunc_TryOpenCyberRiftFromCyberspace_Result) == 0x000051, "Member 'PAWN_Avatar_C_OnCharacterDied::CallFunc_TryOpenCyberRiftFromCyberspace_Result' has a wrong offset!");

// Function PAWN_Avatar.PAWN_Avatar_C.UpdateDamageEffects
// 0x0090 (0x0090 - 0x0000)
struct PAWN_Avatar_C_UpdateDamageEffects final
{
public:
	float                                         DeltaTime;                                         // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UWidget*                                DamageIndicator;                                   // 0x0008(0x0008)(Edit, BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          IsFinished;                                        // 0x0010(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_11[0x3];                                       // 0x0011(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CurrentValue;                                      // 0x0014(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FSTRUCT_CameraEffectInstance           CurrentInstance;                                   // 0x0018(0x000C)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         DirectionIndex;                                    // 0x0024(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ESlateVisibility                              Temp_byte_Variable;                                // 0x0028(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ESlateVisibility                              Temp_byte_Variable_1;                              // 0x0029(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Variable;                                // 0x002A(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	ESlateVisibility                              Temp_byte_Variable_2;                              // 0x002B(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ESlateVisibility                              Temp_byte_Variable_3;                              // 0x002C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_2D[0x3];                                       // 0x002D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Temp_int_Array_Index_Variable;                     // 0x0030(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Loop_Counter_Variable;                    // 0x0034(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue;                   // 0x0038(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Variable_1;                              // 0x003C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_3D[0x3];                                       // 0x003D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Map_Length_ReturnValue;                   // 0x0040(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Greater_IntInt_ReturnValue;               // 0x0044(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	ESlateVisibility                              K2Node_Select_Default;                             // 0x0045(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ESlateVisibility                              K2Node_Select_Default_1;                           // 0x0046(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_47[0x1];                                       // 0x0047(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	class UWidget*                                CallFunc_GetChildAt_ReturnValue;                   // 0x0048(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FSTRUCT_CameraEffectInstance           CallFunc_Map_Find_Value;                           // 0x0050(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Map_Find_ReturnValue;                     // 0x005C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_5D[0x3];                                       // 0x005D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Map_Length_ReturnValue_1;                 // 0x0060(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Greater_IntInt_ReturnValue_1;             // 0x0064(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_65[0x3];                                       // 0x0065(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<int32>                                 CallFunc_Map_Keys_Keys;                            // 0x0068(0x0010)(ReferenceParm)
	int32                                         CallFunc_Array_Get_Item;                           // 0x0078(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Length_ReturnValue;                 // 0x007C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue;                  // 0x0080(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_81[0x3];                                       // 0x0081(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_GetGameTimeInSeconds_ReturnValue;         // 0x0084(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_GetRampUpRampDown_NewValue;               // 0x0088(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_GetRampUpRampDown_IsFinished;             // 0x008C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Map_Remove_ReturnValue;                   // 0x008D(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(PAWN_Avatar_C_UpdateDamageEffects) == 0x000008, "Wrong alignment on PAWN_Avatar_C_UpdateDamageEffects");
static_assert(sizeof(PAWN_Avatar_C_UpdateDamageEffects) == 0x000090, "Wrong size on PAWN_Avatar_C_UpdateDamageEffects");
static_assert(offsetof(PAWN_Avatar_C_UpdateDamageEffects, DeltaTime) == 0x000000, "Member 'PAWN_Avatar_C_UpdateDamageEffects::DeltaTime' has a wrong offset!");
static_assert(offsetof(PAWN_Avatar_C_UpdateDamageEffects, DamageIndicator) == 0x000008, "Member 'PAWN_Avatar_C_UpdateDamageEffects::DamageIndicator' has a wrong offset!");
static_assert(offsetof(PAWN_Avatar_C_UpdateDamageEffects, IsFinished) == 0x000010, "Member 'PAWN_Avatar_C_UpdateDamageEffects::IsFinished' has a wrong offset!");
static_assert(offsetof(PAWN_Avatar_C_UpdateDamageEffects, CurrentValue) == 0x000014, "Member 'PAWN_Avatar_C_UpdateDamageEffects::CurrentValue' has a wrong offset!");
static_assert(offsetof(PAWN_Avatar_C_UpdateDamageEffects, CurrentInstance) == 0x000018, "Member 'PAWN_Avatar_C_UpdateDamageEffects::CurrentInstance' has a wrong offset!");
static_assert(offsetof(PAWN_Avatar_C_UpdateDamageEffects, DirectionIndex) == 0x000024, "Member 'PAWN_Avatar_C_UpdateDamageEffects::DirectionIndex' has a wrong offset!");
static_assert(offsetof(PAWN_Avatar_C_UpdateDamageEffects, Temp_byte_Variable) == 0x000028, "Member 'PAWN_Avatar_C_UpdateDamageEffects::Temp_byte_Variable' has a wrong offset!");
static_assert(offsetof(PAWN_Avatar_C_UpdateDamageEffects, Temp_byte_Variable_1) == 0x000029, "Member 'PAWN_Avatar_C_UpdateDamageEffects::Temp_byte_Variable_1' has a wrong offset!");
static_assert(offsetof(PAWN_Avatar_C_UpdateDamageEffects, Temp_bool_Variable) == 0x00002A, "Member 'PAWN_Avatar_C_UpdateDamageEffects::Temp_bool_Variable' has a wrong offset!");
static_assert(offsetof(PAWN_Avatar_C_UpdateDamageEffects, Temp_byte_Variable_2) == 0x00002B, "Member 'PAWN_Avatar_C_UpdateDamageEffects::Temp_byte_Variable_2' has a wrong offset!");
static_assert(offsetof(PAWN_Avatar_C_UpdateDamageEffects, Temp_byte_Variable_3) == 0x00002C, "Member 'PAWN_Avatar_C_UpdateDamageEffects::Temp_byte_Variable_3' has a wrong offset!");
static_assert(offsetof(PAWN_Avatar_C_UpdateDamageEffects, Temp_int_Array_Index_Variable) == 0x000030, "Member 'PAWN_Avatar_C_UpdateDamageEffects::Temp_int_Array_Index_Variable' has a wrong offset!");
static_assert(offsetof(PAWN_Avatar_C_UpdateDamageEffects, Temp_int_Loop_Counter_Variable) == 0x000034, "Member 'PAWN_Avatar_C_UpdateDamageEffects::Temp_int_Loop_Counter_Variable' has a wrong offset!");
static_assert(offsetof(PAWN_Avatar_C_UpdateDamageEffects, CallFunc_Add_IntInt_ReturnValue) == 0x000038, "Member 'PAWN_Avatar_C_UpdateDamageEffects::CallFunc_Add_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(PAWN_Avatar_C_UpdateDamageEffects, Temp_bool_Variable_1) == 0x00003C, "Member 'PAWN_Avatar_C_UpdateDamageEffects::Temp_bool_Variable_1' has a wrong offset!");
static_assert(offsetof(PAWN_Avatar_C_UpdateDamageEffects, CallFunc_Map_Length_ReturnValue) == 0x000040, "Member 'PAWN_Avatar_C_UpdateDamageEffects::CallFunc_Map_Length_ReturnValue' has a wrong offset!");
static_assert(offsetof(PAWN_Avatar_C_UpdateDamageEffects, CallFunc_Greater_IntInt_ReturnValue) == 0x000044, "Member 'PAWN_Avatar_C_UpdateDamageEffects::CallFunc_Greater_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(PAWN_Avatar_C_UpdateDamageEffects, K2Node_Select_Default) == 0x000045, "Member 'PAWN_Avatar_C_UpdateDamageEffects::K2Node_Select_Default' has a wrong offset!");
static_assert(offsetof(PAWN_Avatar_C_UpdateDamageEffects, K2Node_Select_Default_1) == 0x000046, "Member 'PAWN_Avatar_C_UpdateDamageEffects::K2Node_Select_Default_1' has a wrong offset!");
static_assert(offsetof(PAWN_Avatar_C_UpdateDamageEffects, CallFunc_GetChildAt_ReturnValue) == 0x000048, "Member 'PAWN_Avatar_C_UpdateDamageEffects::CallFunc_GetChildAt_ReturnValue' has a wrong offset!");
static_assert(offsetof(PAWN_Avatar_C_UpdateDamageEffects, CallFunc_Map_Find_Value) == 0x000050, "Member 'PAWN_Avatar_C_UpdateDamageEffects::CallFunc_Map_Find_Value' has a wrong offset!");
static_assert(offsetof(PAWN_Avatar_C_UpdateDamageEffects, CallFunc_Map_Find_ReturnValue) == 0x00005C, "Member 'PAWN_Avatar_C_UpdateDamageEffects::CallFunc_Map_Find_ReturnValue' has a wrong offset!");
static_assert(offsetof(PAWN_Avatar_C_UpdateDamageEffects, CallFunc_Map_Length_ReturnValue_1) == 0x000060, "Member 'PAWN_Avatar_C_UpdateDamageEffects::CallFunc_Map_Length_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(PAWN_Avatar_C_UpdateDamageEffects, CallFunc_Greater_IntInt_ReturnValue_1) == 0x000064, "Member 'PAWN_Avatar_C_UpdateDamageEffects::CallFunc_Greater_IntInt_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(PAWN_Avatar_C_UpdateDamageEffects, CallFunc_Map_Keys_Keys) == 0x000068, "Member 'PAWN_Avatar_C_UpdateDamageEffects::CallFunc_Map_Keys_Keys' has a wrong offset!");
static_assert(offsetof(PAWN_Avatar_C_UpdateDamageEffects, CallFunc_Array_Get_Item) == 0x000078, "Member 'PAWN_Avatar_C_UpdateDamageEffects::CallFunc_Array_Get_Item' has a wrong offset!");
static_assert(offsetof(PAWN_Avatar_C_UpdateDamageEffects, CallFunc_Array_Length_ReturnValue) == 0x00007C, "Member 'PAWN_Avatar_C_UpdateDamageEffects::CallFunc_Array_Length_ReturnValue' has a wrong offset!");
static_assert(offsetof(PAWN_Avatar_C_UpdateDamageEffects, CallFunc_Less_IntInt_ReturnValue) == 0x000080, "Member 'PAWN_Avatar_C_UpdateDamageEffects::CallFunc_Less_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(PAWN_Avatar_C_UpdateDamageEffects, CallFunc_GetGameTimeInSeconds_ReturnValue) == 0x000084, "Member 'PAWN_Avatar_C_UpdateDamageEffects::CallFunc_GetGameTimeInSeconds_ReturnValue' has a wrong offset!");
static_assert(offsetof(PAWN_Avatar_C_UpdateDamageEffects, CallFunc_GetRampUpRampDown_NewValue) == 0x000088, "Member 'PAWN_Avatar_C_UpdateDamageEffects::CallFunc_GetRampUpRampDown_NewValue' has a wrong offset!");
static_assert(offsetof(PAWN_Avatar_C_UpdateDamageEffects, CallFunc_GetRampUpRampDown_IsFinished) == 0x00008C, "Member 'PAWN_Avatar_C_UpdateDamageEffects::CallFunc_GetRampUpRampDown_IsFinished' has a wrong offset!");
static_assert(offsetof(PAWN_Avatar_C_UpdateDamageEffects, CallFunc_Map_Remove_ReturnValue) == 0x00008D, "Member 'PAWN_Avatar_C_UpdateDamageEffects::CallFunc_Map_Remove_ReturnValue' has a wrong offset!");

// Function PAWN_Avatar.PAWN_Avatar_C.Add Damage Effects
// 0x00A0 (0x00A0 - 0x0000)
struct PAWN_Avatar_C_Add_Damage_Effects final
{
public:
	float                                         Damage;                                            // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UOBJ_ImpactData_C*                      ImpactData;                                        // 0x0008(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 SourceActor;                                       // 0x0010(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         RelativeDamage;                                    // 0x0018(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Health_Max;                                        // 0x001C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Health_Current;                                    // 0x0020(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         DirectionIndex;                                    // 0x0024(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_GreaterEqual_IntInt_ReturnValue;          // 0x0028(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_29[0x7];                                       // 0x0029(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UAttribInstance*                        CallFunc_GetAttribInstance_ReturnValue;            // 0x0030(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_GetMaxValue_ReturnValue;                  // 0x0038(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_GetValue_ReturnValue;                     // 0x003C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_GetDamageDirectionIndex_Result;           // 0x0040(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Multiply_FloatFloat_ReturnValue;          // 0x0044(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_FClamp_ReturnValue;                       // 0x0048(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Lerp_ReturnValue;                         // 0x004C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Divide_FloatFloat_ReturnValue;            // 0x0050(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Multiply_FloatFloat_ReturnValue_1;        // 0x0054(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_FMin_ReturnValue;                         // 0x0058(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Multiply_FloatFloat_ReturnValue_2;        // 0x005C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Lerp_ReturnValue_1;                       // 0x0060(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Divide_FloatFloat_ReturnValue_1;          // 0x0064(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Divide_FloatFloat_ReturnValue_2;          // 0x0068(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Lerp_ReturnValue_2;                       // 0x006C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_FMin_ReturnValue_1;                       // 0x0070(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Lerp_ReturnValue_3;                       // 0x0074(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Divide_FloatFloat_ReturnValue_3;          // 0x0078(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_GetGameTimeInSeconds_ReturnValue;         // 0x007C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FSTRUCT_CameraEffectInstance           K2Node_MakeStruct_STRUCT_CameraEffectInstance;     // 0x0080(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_GetGameTimeInSeconds_ReturnValue_1;       // 0x008C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FSTRUCT_CameraEffectInstance           K2Node_MakeStruct_STRUCT_CameraEffectInstance_1;   // 0x0090(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Add_ReturnValue;                    // 0x009C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(PAWN_Avatar_C_Add_Damage_Effects) == 0x000008, "Wrong alignment on PAWN_Avatar_C_Add_Damage_Effects");
static_assert(sizeof(PAWN_Avatar_C_Add_Damage_Effects) == 0x0000A0, "Wrong size on PAWN_Avatar_C_Add_Damage_Effects");
static_assert(offsetof(PAWN_Avatar_C_Add_Damage_Effects, Damage) == 0x000000, "Member 'PAWN_Avatar_C_Add_Damage_Effects::Damage' has a wrong offset!");
static_assert(offsetof(PAWN_Avatar_C_Add_Damage_Effects, ImpactData) == 0x000008, "Member 'PAWN_Avatar_C_Add_Damage_Effects::ImpactData' has a wrong offset!");
static_assert(offsetof(PAWN_Avatar_C_Add_Damage_Effects, SourceActor) == 0x000010, "Member 'PAWN_Avatar_C_Add_Damage_Effects::SourceActor' has a wrong offset!");
static_assert(offsetof(PAWN_Avatar_C_Add_Damage_Effects, RelativeDamage) == 0x000018, "Member 'PAWN_Avatar_C_Add_Damage_Effects::RelativeDamage' has a wrong offset!");
static_assert(offsetof(PAWN_Avatar_C_Add_Damage_Effects, Health_Max) == 0x00001C, "Member 'PAWN_Avatar_C_Add_Damage_Effects::Health_Max' has a wrong offset!");
static_assert(offsetof(PAWN_Avatar_C_Add_Damage_Effects, Health_Current) == 0x000020, "Member 'PAWN_Avatar_C_Add_Damage_Effects::Health_Current' has a wrong offset!");
static_assert(offsetof(PAWN_Avatar_C_Add_Damage_Effects, DirectionIndex) == 0x000024, "Member 'PAWN_Avatar_C_Add_Damage_Effects::DirectionIndex' has a wrong offset!");
static_assert(offsetof(PAWN_Avatar_C_Add_Damage_Effects, CallFunc_GreaterEqual_IntInt_ReturnValue) == 0x000028, "Member 'PAWN_Avatar_C_Add_Damage_Effects::CallFunc_GreaterEqual_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(PAWN_Avatar_C_Add_Damage_Effects, CallFunc_GetAttribInstance_ReturnValue) == 0x000030, "Member 'PAWN_Avatar_C_Add_Damage_Effects::CallFunc_GetAttribInstance_ReturnValue' has a wrong offset!");
static_assert(offsetof(PAWN_Avatar_C_Add_Damage_Effects, CallFunc_GetMaxValue_ReturnValue) == 0x000038, "Member 'PAWN_Avatar_C_Add_Damage_Effects::CallFunc_GetMaxValue_ReturnValue' has a wrong offset!");
static_assert(offsetof(PAWN_Avatar_C_Add_Damage_Effects, CallFunc_GetValue_ReturnValue) == 0x00003C, "Member 'PAWN_Avatar_C_Add_Damage_Effects::CallFunc_GetValue_ReturnValue' has a wrong offset!");
static_assert(offsetof(PAWN_Avatar_C_Add_Damage_Effects, CallFunc_GetDamageDirectionIndex_Result) == 0x000040, "Member 'PAWN_Avatar_C_Add_Damage_Effects::CallFunc_GetDamageDirectionIndex_Result' has a wrong offset!");
static_assert(offsetof(PAWN_Avatar_C_Add_Damage_Effects, CallFunc_Multiply_FloatFloat_ReturnValue) == 0x000044, "Member 'PAWN_Avatar_C_Add_Damage_Effects::CallFunc_Multiply_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(PAWN_Avatar_C_Add_Damage_Effects, CallFunc_FClamp_ReturnValue) == 0x000048, "Member 'PAWN_Avatar_C_Add_Damage_Effects::CallFunc_FClamp_ReturnValue' has a wrong offset!");
static_assert(offsetof(PAWN_Avatar_C_Add_Damage_Effects, CallFunc_Lerp_ReturnValue) == 0x00004C, "Member 'PAWN_Avatar_C_Add_Damage_Effects::CallFunc_Lerp_ReturnValue' has a wrong offset!");
static_assert(offsetof(PAWN_Avatar_C_Add_Damage_Effects, CallFunc_Divide_FloatFloat_ReturnValue) == 0x000050, "Member 'PAWN_Avatar_C_Add_Damage_Effects::CallFunc_Divide_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(PAWN_Avatar_C_Add_Damage_Effects, CallFunc_Multiply_FloatFloat_ReturnValue_1) == 0x000054, "Member 'PAWN_Avatar_C_Add_Damage_Effects::CallFunc_Multiply_FloatFloat_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(PAWN_Avatar_C_Add_Damage_Effects, CallFunc_FMin_ReturnValue) == 0x000058, "Member 'PAWN_Avatar_C_Add_Damage_Effects::CallFunc_FMin_ReturnValue' has a wrong offset!");
static_assert(offsetof(PAWN_Avatar_C_Add_Damage_Effects, CallFunc_Multiply_FloatFloat_ReturnValue_2) == 0x00005C, "Member 'PAWN_Avatar_C_Add_Damage_Effects::CallFunc_Multiply_FloatFloat_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(PAWN_Avatar_C_Add_Damage_Effects, CallFunc_Lerp_ReturnValue_1) == 0x000060, "Member 'PAWN_Avatar_C_Add_Damage_Effects::CallFunc_Lerp_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(PAWN_Avatar_C_Add_Damage_Effects, CallFunc_Divide_FloatFloat_ReturnValue_1) == 0x000064, "Member 'PAWN_Avatar_C_Add_Damage_Effects::CallFunc_Divide_FloatFloat_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(PAWN_Avatar_C_Add_Damage_Effects, CallFunc_Divide_FloatFloat_ReturnValue_2) == 0x000068, "Member 'PAWN_Avatar_C_Add_Damage_Effects::CallFunc_Divide_FloatFloat_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(PAWN_Avatar_C_Add_Damage_Effects, CallFunc_Lerp_ReturnValue_2) == 0x00006C, "Member 'PAWN_Avatar_C_Add_Damage_Effects::CallFunc_Lerp_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(PAWN_Avatar_C_Add_Damage_Effects, CallFunc_FMin_ReturnValue_1) == 0x000070, "Member 'PAWN_Avatar_C_Add_Damage_Effects::CallFunc_FMin_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(PAWN_Avatar_C_Add_Damage_Effects, CallFunc_Lerp_ReturnValue_3) == 0x000074, "Member 'PAWN_Avatar_C_Add_Damage_Effects::CallFunc_Lerp_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(PAWN_Avatar_C_Add_Damage_Effects, CallFunc_Divide_FloatFloat_ReturnValue_3) == 0x000078, "Member 'PAWN_Avatar_C_Add_Damage_Effects::CallFunc_Divide_FloatFloat_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(PAWN_Avatar_C_Add_Damage_Effects, CallFunc_GetGameTimeInSeconds_ReturnValue) == 0x00007C, "Member 'PAWN_Avatar_C_Add_Damage_Effects::CallFunc_GetGameTimeInSeconds_ReturnValue' has a wrong offset!");
static_assert(offsetof(PAWN_Avatar_C_Add_Damage_Effects, K2Node_MakeStruct_STRUCT_CameraEffectInstance) == 0x000080, "Member 'PAWN_Avatar_C_Add_Damage_Effects::K2Node_MakeStruct_STRUCT_CameraEffectInstance' has a wrong offset!");
static_assert(offsetof(PAWN_Avatar_C_Add_Damage_Effects, CallFunc_GetGameTimeInSeconds_ReturnValue_1) == 0x00008C, "Member 'PAWN_Avatar_C_Add_Damage_Effects::CallFunc_GetGameTimeInSeconds_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(PAWN_Avatar_C_Add_Damage_Effects, K2Node_MakeStruct_STRUCT_CameraEffectInstance_1) == 0x000090, "Member 'PAWN_Avatar_C_Add_Damage_Effects::K2Node_MakeStruct_STRUCT_CameraEffectInstance_1' has a wrong offset!");
static_assert(offsetof(PAWN_Avatar_C_Add_Damage_Effects, CallFunc_Array_Add_ReturnValue) == 0x00009C, "Member 'PAWN_Avatar_C_Add_Damage_Effects::CallFunc_Array_Add_ReturnValue' has a wrong offset!");

// Function PAWN_Avatar.PAWN_Avatar_C.GetDamageDirectionIndex
// 0x0090 (0x0090 - 0x0000)
struct PAWN_Avatar_C_GetDamageDirectionIndex final
{
public:
	class UOBJ_ImpactData_C*                      ImpactData;                                        // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 SourceActor;                                       // 0x0008(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Result;                                            // 0x0010(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         SignedAngleFromUp;                                 // 0x0014(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                DamageDirection;                                   // 0x0018(0x000C)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_24[0x4];                                       // 0x0024(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class APAWN_Enemy_C*                          K2Node_DynamicCast_AsPAWN_Enemy;                   // 0x0028(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0030(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_31[0x3];                                       // 0x0031(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_Add_FloatFloat_ReturnValue;               // 0x0034(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_GetUpVector_ReturnValue;                  // 0x0038(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Divide_FloatFloat_ReturnValue;            // 0x0044(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Round_ReturnValue;                        // 0x0048(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_GetForwardVector_ReturnValue;             // 0x004C(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_WrapIntUpperbound_ReturnValue;            // 0x0058(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Multiply_VectorFloat_ReturnValue;         // 0x005C(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_SignedAngleBetweenOnPlane_ReturnValue;    // 0x0068(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_K2_GetComponentLocation_ReturnValue;      // 0x006C(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Subtract_VectorVector_ReturnValue;        // 0x0078(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Normal_ReturnValue;                       // 0x0084(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(PAWN_Avatar_C_GetDamageDirectionIndex) == 0x000008, "Wrong alignment on PAWN_Avatar_C_GetDamageDirectionIndex");
static_assert(sizeof(PAWN_Avatar_C_GetDamageDirectionIndex) == 0x000090, "Wrong size on PAWN_Avatar_C_GetDamageDirectionIndex");
static_assert(offsetof(PAWN_Avatar_C_GetDamageDirectionIndex, ImpactData) == 0x000000, "Member 'PAWN_Avatar_C_GetDamageDirectionIndex::ImpactData' has a wrong offset!");
static_assert(offsetof(PAWN_Avatar_C_GetDamageDirectionIndex, SourceActor) == 0x000008, "Member 'PAWN_Avatar_C_GetDamageDirectionIndex::SourceActor' has a wrong offset!");
static_assert(offsetof(PAWN_Avatar_C_GetDamageDirectionIndex, Result) == 0x000010, "Member 'PAWN_Avatar_C_GetDamageDirectionIndex::Result' has a wrong offset!");
static_assert(offsetof(PAWN_Avatar_C_GetDamageDirectionIndex, SignedAngleFromUp) == 0x000014, "Member 'PAWN_Avatar_C_GetDamageDirectionIndex::SignedAngleFromUp' has a wrong offset!");
static_assert(offsetof(PAWN_Avatar_C_GetDamageDirectionIndex, DamageDirection) == 0x000018, "Member 'PAWN_Avatar_C_GetDamageDirectionIndex::DamageDirection' has a wrong offset!");
static_assert(offsetof(PAWN_Avatar_C_GetDamageDirectionIndex, K2Node_DynamicCast_AsPAWN_Enemy) == 0x000028, "Member 'PAWN_Avatar_C_GetDamageDirectionIndex::K2Node_DynamicCast_AsPAWN_Enemy' has a wrong offset!");
static_assert(offsetof(PAWN_Avatar_C_GetDamageDirectionIndex, K2Node_DynamicCast_bSuccess) == 0x000030, "Member 'PAWN_Avatar_C_GetDamageDirectionIndex::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(PAWN_Avatar_C_GetDamageDirectionIndex, CallFunc_Add_FloatFloat_ReturnValue) == 0x000034, "Member 'PAWN_Avatar_C_GetDamageDirectionIndex::CallFunc_Add_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(PAWN_Avatar_C_GetDamageDirectionIndex, CallFunc_GetUpVector_ReturnValue) == 0x000038, "Member 'PAWN_Avatar_C_GetDamageDirectionIndex::CallFunc_GetUpVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(PAWN_Avatar_C_GetDamageDirectionIndex, CallFunc_Divide_FloatFloat_ReturnValue) == 0x000044, "Member 'PAWN_Avatar_C_GetDamageDirectionIndex::CallFunc_Divide_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(PAWN_Avatar_C_GetDamageDirectionIndex, CallFunc_Round_ReturnValue) == 0x000048, "Member 'PAWN_Avatar_C_GetDamageDirectionIndex::CallFunc_Round_ReturnValue' has a wrong offset!");
static_assert(offsetof(PAWN_Avatar_C_GetDamageDirectionIndex, CallFunc_GetForwardVector_ReturnValue) == 0x00004C, "Member 'PAWN_Avatar_C_GetDamageDirectionIndex::CallFunc_GetForwardVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(PAWN_Avatar_C_GetDamageDirectionIndex, CallFunc_WrapIntUpperbound_ReturnValue) == 0x000058, "Member 'PAWN_Avatar_C_GetDamageDirectionIndex::CallFunc_WrapIntUpperbound_ReturnValue' has a wrong offset!");
static_assert(offsetof(PAWN_Avatar_C_GetDamageDirectionIndex, CallFunc_Multiply_VectorFloat_ReturnValue) == 0x00005C, "Member 'PAWN_Avatar_C_GetDamageDirectionIndex::CallFunc_Multiply_VectorFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(PAWN_Avatar_C_GetDamageDirectionIndex, CallFunc_SignedAngleBetweenOnPlane_ReturnValue) == 0x000068, "Member 'PAWN_Avatar_C_GetDamageDirectionIndex::CallFunc_SignedAngleBetweenOnPlane_ReturnValue' has a wrong offset!");
static_assert(offsetof(PAWN_Avatar_C_GetDamageDirectionIndex, CallFunc_K2_GetComponentLocation_ReturnValue) == 0x00006C, "Member 'PAWN_Avatar_C_GetDamageDirectionIndex::CallFunc_K2_GetComponentLocation_ReturnValue' has a wrong offset!");
static_assert(offsetof(PAWN_Avatar_C_GetDamageDirectionIndex, CallFunc_Subtract_VectorVector_ReturnValue) == 0x000078, "Member 'PAWN_Avatar_C_GetDamageDirectionIndex::CallFunc_Subtract_VectorVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(PAWN_Avatar_C_GetDamageDirectionIndex, CallFunc_Normal_ReturnValue) == 0x000084, "Member 'PAWN_Avatar_C_GetDamageDirectionIndex::CallFunc_Normal_ReturnValue' has a wrong offset!");

// Function PAWN_Avatar.PAWN_Avatar_C.GetRampUpRampDown
// 0x0058 (0x0058 - 0x0000)
struct PAWN_Avatar_C_GetRampUpRampDown final
{
public:
	float                                         StartTime;                                         // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CurrentTime;                                       // 0x0004(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         MaintainDuration;                                  // 0x0008(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         RampUpDuration;                                    // 0x000C(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         RampDownDuration;                                  // 0x0010(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         TargetValue;                                       // 0x0014(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         NewValue;                                          // 0x0018(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          IsFinished;                                        // 0x001C(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_1D[0x3];                                       // 0x001D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         TimeSinceStart;                                    // 0x0020(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Subtract_FloatFloat_ReturnValue;          // 0x0024(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Add_FloatFloat_ReturnValue;               // 0x0028(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Greater_FloatFloat_ReturnValue;           // 0x002C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_2D[0x3];                                       // 0x002D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_Divide_FloatFloat_ReturnValue;            // 0x0030(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Ease_ReturnValue;                         // 0x0034(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_FloatFloat_ReturnValue;              // 0x0038(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_39[0x3];                                       // 0x0039(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_Subtract_FloatFloat_ReturnValue_1;        // 0x003C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Add_FloatFloat_ReturnValue_1;             // 0x0040(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Subtract_FloatFloat_ReturnValue_2;        // 0x0044(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Add_FloatFloat_ReturnValue_2;             // 0x0048(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Greater_FloatFloat_ReturnValue_1;         // 0x004C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_4D[0x3];                                       // 0x004D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_Divide_FloatFloat_ReturnValue_1;          // 0x0050(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Ease_ReturnValue_1;                       // 0x0054(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(PAWN_Avatar_C_GetRampUpRampDown) == 0x000004, "Wrong alignment on PAWN_Avatar_C_GetRampUpRampDown");
static_assert(sizeof(PAWN_Avatar_C_GetRampUpRampDown) == 0x000058, "Wrong size on PAWN_Avatar_C_GetRampUpRampDown");
static_assert(offsetof(PAWN_Avatar_C_GetRampUpRampDown, StartTime) == 0x000000, "Member 'PAWN_Avatar_C_GetRampUpRampDown::StartTime' has a wrong offset!");
static_assert(offsetof(PAWN_Avatar_C_GetRampUpRampDown, CurrentTime) == 0x000004, "Member 'PAWN_Avatar_C_GetRampUpRampDown::CurrentTime' has a wrong offset!");
static_assert(offsetof(PAWN_Avatar_C_GetRampUpRampDown, MaintainDuration) == 0x000008, "Member 'PAWN_Avatar_C_GetRampUpRampDown::MaintainDuration' has a wrong offset!");
static_assert(offsetof(PAWN_Avatar_C_GetRampUpRampDown, RampUpDuration) == 0x00000C, "Member 'PAWN_Avatar_C_GetRampUpRampDown::RampUpDuration' has a wrong offset!");
static_assert(offsetof(PAWN_Avatar_C_GetRampUpRampDown, RampDownDuration) == 0x000010, "Member 'PAWN_Avatar_C_GetRampUpRampDown::RampDownDuration' has a wrong offset!");
static_assert(offsetof(PAWN_Avatar_C_GetRampUpRampDown, TargetValue) == 0x000014, "Member 'PAWN_Avatar_C_GetRampUpRampDown::TargetValue' has a wrong offset!");
static_assert(offsetof(PAWN_Avatar_C_GetRampUpRampDown, NewValue) == 0x000018, "Member 'PAWN_Avatar_C_GetRampUpRampDown::NewValue' has a wrong offset!");
static_assert(offsetof(PAWN_Avatar_C_GetRampUpRampDown, IsFinished) == 0x00001C, "Member 'PAWN_Avatar_C_GetRampUpRampDown::IsFinished' has a wrong offset!");
static_assert(offsetof(PAWN_Avatar_C_GetRampUpRampDown, TimeSinceStart) == 0x000020, "Member 'PAWN_Avatar_C_GetRampUpRampDown::TimeSinceStart' has a wrong offset!");
static_assert(offsetof(PAWN_Avatar_C_GetRampUpRampDown, CallFunc_Subtract_FloatFloat_ReturnValue) == 0x000024, "Member 'PAWN_Avatar_C_GetRampUpRampDown::CallFunc_Subtract_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(PAWN_Avatar_C_GetRampUpRampDown, CallFunc_Add_FloatFloat_ReturnValue) == 0x000028, "Member 'PAWN_Avatar_C_GetRampUpRampDown::CallFunc_Add_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(PAWN_Avatar_C_GetRampUpRampDown, CallFunc_Greater_FloatFloat_ReturnValue) == 0x00002C, "Member 'PAWN_Avatar_C_GetRampUpRampDown::CallFunc_Greater_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(PAWN_Avatar_C_GetRampUpRampDown, CallFunc_Divide_FloatFloat_ReturnValue) == 0x000030, "Member 'PAWN_Avatar_C_GetRampUpRampDown::CallFunc_Divide_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(PAWN_Avatar_C_GetRampUpRampDown, CallFunc_Ease_ReturnValue) == 0x000034, "Member 'PAWN_Avatar_C_GetRampUpRampDown::CallFunc_Ease_ReturnValue' has a wrong offset!");
static_assert(offsetof(PAWN_Avatar_C_GetRampUpRampDown, CallFunc_Less_FloatFloat_ReturnValue) == 0x000038, "Member 'PAWN_Avatar_C_GetRampUpRampDown::CallFunc_Less_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(PAWN_Avatar_C_GetRampUpRampDown, CallFunc_Subtract_FloatFloat_ReturnValue_1) == 0x00003C, "Member 'PAWN_Avatar_C_GetRampUpRampDown::CallFunc_Subtract_FloatFloat_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(PAWN_Avatar_C_GetRampUpRampDown, CallFunc_Add_FloatFloat_ReturnValue_1) == 0x000040, "Member 'PAWN_Avatar_C_GetRampUpRampDown::CallFunc_Add_FloatFloat_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(PAWN_Avatar_C_GetRampUpRampDown, CallFunc_Subtract_FloatFloat_ReturnValue_2) == 0x000044, "Member 'PAWN_Avatar_C_GetRampUpRampDown::CallFunc_Subtract_FloatFloat_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(PAWN_Avatar_C_GetRampUpRampDown, CallFunc_Add_FloatFloat_ReturnValue_2) == 0x000048, "Member 'PAWN_Avatar_C_GetRampUpRampDown::CallFunc_Add_FloatFloat_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(PAWN_Avatar_C_GetRampUpRampDown, CallFunc_Greater_FloatFloat_ReturnValue_1) == 0x00004C, "Member 'PAWN_Avatar_C_GetRampUpRampDown::CallFunc_Greater_FloatFloat_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(PAWN_Avatar_C_GetRampUpRampDown, CallFunc_Divide_FloatFloat_ReturnValue_1) == 0x000050, "Member 'PAWN_Avatar_C_GetRampUpRampDown::CallFunc_Divide_FloatFloat_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(PAWN_Avatar_C_GetRampUpRampDown, CallFunc_Ease_ReturnValue_1) == 0x000054, "Member 'PAWN_Avatar_C_GetRampUpRampDown::CallFunc_Ease_ReturnValue_1' has a wrong offset!");

// Function PAWN_Avatar.PAWN_Avatar_C.HandleInputMoveAction
// 0x0034 (0x0034 - 0x0000)
struct PAWN_Avatar_C_HandleInputMoveAction final
{
public:
	struct FVector                                Direction;                                         // 0x0000(0x000C)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          IsDown;                                            // 0x000C(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_D[0x3];                                        // 0x000D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Temp_int_Variable;                                 // 0x0010(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Variable_1;                               // 0x0014(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Greater_IntInt_ReturnValue;               // 0x0018(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_19[0x3];                                       // 0x0019(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Subtract_IntInt_ReturnValue;              // 0x001C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Greater_IntInt_ReturnValue_1;             // 0x0020(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_21[0x3];                                       // 0x0021(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Add_IntInt_ReturnValue;                   // 0x0024(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Add_VectorVector_ReturnValue;             // 0x0028(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(PAWN_Avatar_C_HandleInputMoveAction) == 0x000004, "Wrong alignment on PAWN_Avatar_C_HandleInputMoveAction");
static_assert(sizeof(PAWN_Avatar_C_HandleInputMoveAction) == 0x000034, "Wrong size on PAWN_Avatar_C_HandleInputMoveAction");
static_assert(offsetof(PAWN_Avatar_C_HandleInputMoveAction, Direction) == 0x000000, "Member 'PAWN_Avatar_C_HandleInputMoveAction::Direction' has a wrong offset!");
static_assert(offsetof(PAWN_Avatar_C_HandleInputMoveAction, IsDown) == 0x00000C, "Member 'PAWN_Avatar_C_HandleInputMoveAction::IsDown' has a wrong offset!");
static_assert(offsetof(PAWN_Avatar_C_HandleInputMoveAction, Temp_int_Variable) == 0x000010, "Member 'PAWN_Avatar_C_HandleInputMoveAction::Temp_int_Variable' has a wrong offset!");
static_assert(offsetof(PAWN_Avatar_C_HandleInputMoveAction, Temp_int_Variable_1) == 0x000014, "Member 'PAWN_Avatar_C_HandleInputMoveAction::Temp_int_Variable_1' has a wrong offset!");
static_assert(offsetof(PAWN_Avatar_C_HandleInputMoveAction, CallFunc_Greater_IntInt_ReturnValue) == 0x000018, "Member 'PAWN_Avatar_C_HandleInputMoveAction::CallFunc_Greater_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(PAWN_Avatar_C_HandleInputMoveAction, CallFunc_Subtract_IntInt_ReturnValue) == 0x00001C, "Member 'PAWN_Avatar_C_HandleInputMoveAction::CallFunc_Subtract_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(PAWN_Avatar_C_HandleInputMoveAction, CallFunc_Greater_IntInt_ReturnValue_1) == 0x000020, "Member 'PAWN_Avatar_C_HandleInputMoveAction::CallFunc_Greater_IntInt_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(PAWN_Avatar_C_HandleInputMoveAction, CallFunc_Add_IntInt_ReturnValue) == 0x000024, "Member 'PAWN_Avatar_C_HandleInputMoveAction::CallFunc_Add_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(PAWN_Avatar_C_HandleInputMoveAction, CallFunc_Add_VectorVector_ReturnValue) == 0x000028, "Member 'PAWN_Avatar_C_HandleInputMoveAction::CallFunc_Add_VectorVector_ReturnValue' has a wrong offset!");

// Function PAWN_Avatar.PAWN_Avatar_C.HandleInputMoveAxisX
// 0x0020 (0x0020 - 0x0000)
struct PAWN_Avatar_C_HandleInputMoveAxisX final
{
public:
	float                                         Value;                                             // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector_X;                            // 0x0004(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector_Y;                            // 0x0008(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector_Z;                            // 0x000C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Add_FloatFloat_ReturnValue;               // 0x0010(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_MakeVector_ReturnValue;                   // 0x0014(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(PAWN_Avatar_C_HandleInputMoveAxisX) == 0x000004, "Wrong alignment on PAWN_Avatar_C_HandleInputMoveAxisX");
static_assert(sizeof(PAWN_Avatar_C_HandleInputMoveAxisX) == 0x000020, "Wrong size on PAWN_Avatar_C_HandleInputMoveAxisX");
static_assert(offsetof(PAWN_Avatar_C_HandleInputMoveAxisX, Value) == 0x000000, "Member 'PAWN_Avatar_C_HandleInputMoveAxisX::Value' has a wrong offset!");
static_assert(offsetof(PAWN_Avatar_C_HandleInputMoveAxisX, CallFunc_BreakVector_X) == 0x000004, "Member 'PAWN_Avatar_C_HandleInputMoveAxisX::CallFunc_BreakVector_X' has a wrong offset!");
static_assert(offsetof(PAWN_Avatar_C_HandleInputMoveAxisX, CallFunc_BreakVector_Y) == 0x000008, "Member 'PAWN_Avatar_C_HandleInputMoveAxisX::CallFunc_BreakVector_Y' has a wrong offset!");
static_assert(offsetof(PAWN_Avatar_C_HandleInputMoveAxisX, CallFunc_BreakVector_Z) == 0x00000C, "Member 'PAWN_Avatar_C_HandleInputMoveAxisX::CallFunc_BreakVector_Z' has a wrong offset!");
static_assert(offsetof(PAWN_Avatar_C_HandleInputMoveAxisX, CallFunc_Add_FloatFloat_ReturnValue) == 0x000010, "Member 'PAWN_Avatar_C_HandleInputMoveAxisX::CallFunc_Add_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(PAWN_Avatar_C_HandleInputMoveAxisX, CallFunc_MakeVector_ReturnValue) == 0x000014, "Member 'PAWN_Avatar_C_HandleInputMoveAxisX::CallFunc_MakeVector_ReturnValue' has a wrong offset!");

// Function PAWN_Avatar.PAWN_Avatar_C.HandleInputMoveAxisY
// 0x0020 (0x0020 - 0x0000)
struct PAWN_Avatar_C_HandleInputMoveAxisY final
{
public:
	float                                         Value;                                             // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector_X;                            // 0x0004(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector_Y;                            // 0x0008(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector_Z;                            // 0x000C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Add_FloatFloat_ReturnValue;               // 0x0010(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_MakeVector_ReturnValue;                   // 0x0014(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(PAWN_Avatar_C_HandleInputMoveAxisY) == 0x000004, "Wrong alignment on PAWN_Avatar_C_HandleInputMoveAxisY");
static_assert(sizeof(PAWN_Avatar_C_HandleInputMoveAxisY) == 0x000020, "Wrong size on PAWN_Avatar_C_HandleInputMoveAxisY");
static_assert(offsetof(PAWN_Avatar_C_HandleInputMoveAxisY, Value) == 0x000000, "Member 'PAWN_Avatar_C_HandleInputMoveAxisY::Value' has a wrong offset!");
static_assert(offsetof(PAWN_Avatar_C_HandleInputMoveAxisY, CallFunc_BreakVector_X) == 0x000004, "Member 'PAWN_Avatar_C_HandleInputMoveAxisY::CallFunc_BreakVector_X' has a wrong offset!");
static_assert(offsetof(PAWN_Avatar_C_HandleInputMoveAxisY, CallFunc_BreakVector_Y) == 0x000008, "Member 'PAWN_Avatar_C_HandleInputMoveAxisY::CallFunc_BreakVector_Y' has a wrong offset!");
static_assert(offsetof(PAWN_Avatar_C_HandleInputMoveAxisY, CallFunc_BreakVector_Z) == 0x00000C, "Member 'PAWN_Avatar_C_HandleInputMoveAxisY::CallFunc_BreakVector_Z' has a wrong offset!");
static_assert(offsetof(PAWN_Avatar_C_HandleInputMoveAxisY, CallFunc_Add_FloatFloat_ReturnValue) == 0x000010, "Member 'PAWN_Avatar_C_HandleInputMoveAxisY::CallFunc_Add_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(PAWN_Avatar_C_HandleInputMoveAxisY, CallFunc_MakeVector_ReturnValue) == 0x000014, "Member 'PAWN_Avatar_C_HandleInputMoveAxisY::CallFunc_MakeVector_ReturnValue' has a wrong offset!");

// Function PAWN_Avatar.PAWN_Avatar_C.HandleInputLookX
// 0x0028 (0x0028 - 0x0000)
struct PAWN_Avatar_C_HandleInputLookX final
{
public:
	float                                         Value;                                             // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class USAVE_Settings_C*                       CallFunc_GetShockSettingsForCurrentUser_Settings;  // 0x0008(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_GetCyberspaceLookSensitivity_Value;       // 0x0010(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Divide_FloatFloat_ReturnValue;            // 0x0014(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Not_PreBool_ReturnValue;                  // 0x0018(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_19[0x3];                                       // 0x0019(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_Multiply_FloatFloat_ReturnValue;          // 0x001C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Add_FloatFloat_ReturnValue;               // 0x0020(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(PAWN_Avatar_C_HandleInputLookX) == 0x000008, "Wrong alignment on PAWN_Avatar_C_HandleInputLookX");
static_assert(sizeof(PAWN_Avatar_C_HandleInputLookX) == 0x000028, "Wrong size on PAWN_Avatar_C_HandleInputLookX");
static_assert(offsetof(PAWN_Avatar_C_HandleInputLookX, Value) == 0x000000, "Member 'PAWN_Avatar_C_HandleInputLookX::Value' has a wrong offset!");
static_assert(offsetof(PAWN_Avatar_C_HandleInputLookX, CallFunc_GetShockSettingsForCurrentUser_Settings) == 0x000008, "Member 'PAWN_Avatar_C_HandleInputLookX::CallFunc_GetShockSettingsForCurrentUser_Settings' has a wrong offset!");
static_assert(offsetof(PAWN_Avatar_C_HandleInputLookX, CallFunc_GetCyberspaceLookSensitivity_Value) == 0x000010, "Member 'PAWN_Avatar_C_HandleInputLookX::CallFunc_GetCyberspaceLookSensitivity_Value' has a wrong offset!");
static_assert(offsetof(PAWN_Avatar_C_HandleInputLookX, CallFunc_Divide_FloatFloat_ReturnValue) == 0x000014, "Member 'PAWN_Avatar_C_HandleInputLookX::CallFunc_Divide_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(PAWN_Avatar_C_HandleInputLookX, CallFunc_Not_PreBool_ReturnValue) == 0x000018, "Member 'PAWN_Avatar_C_HandleInputLookX::CallFunc_Not_PreBool_ReturnValue' has a wrong offset!");
static_assert(offsetof(PAWN_Avatar_C_HandleInputLookX, CallFunc_Multiply_FloatFloat_ReturnValue) == 0x00001C, "Member 'PAWN_Avatar_C_HandleInputLookX::CallFunc_Multiply_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(PAWN_Avatar_C_HandleInputLookX, CallFunc_Add_FloatFloat_ReturnValue) == 0x000020, "Member 'PAWN_Avatar_C_HandleInputLookX::CallFunc_Add_FloatFloat_ReturnValue' has a wrong offset!");

// Function PAWN_Avatar.PAWN_Avatar_C.HandleInputLookY
// 0x0038 (0x0038 - 0x0000)
struct PAWN_Avatar_C_HandleInputLookY final
{
public:
	float                                         Value;                                             // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Variable;                                // 0x0004(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         Temp_float_Variable;                               // 0x0008(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Temp_float_Variable_1;                             // 0x000C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class USAVE_Settings_C*                       CallFunc_GetShockSettingsForCurrentUser_Settings;  // 0x0010(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_GetCyberspaceInvertY_Result;              // 0x0018(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Not_PreBool_ReturnValue;                  // 0x0019(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_1A[0x2];                                       // 0x001A(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         K2Node_Select_Default;                             // 0x001C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_GetCyberspaceLookSensitivity_Value;       // 0x0020(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Multiply_FloatFloat_ReturnValue;          // 0x0024(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Divide_FloatFloat_ReturnValue;            // 0x0028(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Multiply_FloatFloat_ReturnValue_1;        // 0x002C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Add_FloatFloat_ReturnValue;               // 0x0030(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(PAWN_Avatar_C_HandleInputLookY) == 0x000008, "Wrong alignment on PAWN_Avatar_C_HandleInputLookY");
static_assert(sizeof(PAWN_Avatar_C_HandleInputLookY) == 0x000038, "Wrong size on PAWN_Avatar_C_HandleInputLookY");
static_assert(offsetof(PAWN_Avatar_C_HandleInputLookY, Value) == 0x000000, "Member 'PAWN_Avatar_C_HandleInputLookY::Value' has a wrong offset!");
static_assert(offsetof(PAWN_Avatar_C_HandleInputLookY, Temp_bool_Variable) == 0x000004, "Member 'PAWN_Avatar_C_HandleInputLookY::Temp_bool_Variable' has a wrong offset!");
static_assert(offsetof(PAWN_Avatar_C_HandleInputLookY, Temp_float_Variable) == 0x000008, "Member 'PAWN_Avatar_C_HandleInputLookY::Temp_float_Variable' has a wrong offset!");
static_assert(offsetof(PAWN_Avatar_C_HandleInputLookY, Temp_float_Variable_1) == 0x00000C, "Member 'PAWN_Avatar_C_HandleInputLookY::Temp_float_Variable_1' has a wrong offset!");
static_assert(offsetof(PAWN_Avatar_C_HandleInputLookY, CallFunc_GetShockSettingsForCurrentUser_Settings) == 0x000010, "Member 'PAWN_Avatar_C_HandleInputLookY::CallFunc_GetShockSettingsForCurrentUser_Settings' has a wrong offset!");
static_assert(offsetof(PAWN_Avatar_C_HandleInputLookY, CallFunc_GetCyberspaceInvertY_Result) == 0x000018, "Member 'PAWN_Avatar_C_HandleInputLookY::CallFunc_GetCyberspaceInvertY_Result' has a wrong offset!");
static_assert(offsetof(PAWN_Avatar_C_HandleInputLookY, CallFunc_Not_PreBool_ReturnValue) == 0x000019, "Member 'PAWN_Avatar_C_HandleInputLookY::CallFunc_Not_PreBool_ReturnValue' has a wrong offset!");
static_assert(offsetof(PAWN_Avatar_C_HandleInputLookY, K2Node_Select_Default) == 0x00001C, "Member 'PAWN_Avatar_C_HandleInputLookY::K2Node_Select_Default' has a wrong offset!");
static_assert(offsetof(PAWN_Avatar_C_HandleInputLookY, CallFunc_GetCyberspaceLookSensitivity_Value) == 0x000020, "Member 'PAWN_Avatar_C_HandleInputLookY::CallFunc_GetCyberspaceLookSensitivity_Value' has a wrong offset!");
static_assert(offsetof(PAWN_Avatar_C_HandleInputLookY, CallFunc_Multiply_FloatFloat_ReturnValue) == 0x000024, "Member 'PAWN_Avatar_C_HandleInputLookY::CallFunc_Multiply_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(PAWN_Avatar_C_HandleInputLookY, CallFunc_Divide_FloatFloat_ReturnValue) == 0x000028, "Member 'PAWN_Avatar_C_HandleInputLookY::CallFunc_Divide_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(PAWN_Avatar_C_HandleInputLookY, CallFunc_Multiply_FloatFloat_ReturnValue_1) == 0x00002C, "Member 'PAWN_Avatar_C_HandleInputLookY::CallFunc_Multiply_FloatFloat_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(PAWN_Avatar_C_HandleInputLookY, CallFunc_Add_FloatFloat_ReturnValue) == 0x000030, "Member 'PAWN_Avatar_C_HandleInputLookY::CallFunc_Add_FloatFloat_ReturnValue' has a wrong offset!");

// Function PAWN_Avatar.PAWN_Avatar_C.SetNewSecurityTimer
// 0x0008 (0x0008 - 0x0000)
struct PAWN_Avatar_C_SetNewSecurityTimer final
{
public:
	float                                         SecurityTime;                                      // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Greater_FloatFloat_ReturnValue;           // 0x0004(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(PAWN_Avatar_C_SetNewSecurityTimer) == 0x000004, "Wrong alignment on PAWN_Avatar_C_SetNewSecurityTimer");
static_assert(sizeof(PAWN_Avatar_C_SetNewSecurityTimer) == 0x000008, "Wrong size on PAWN_Avatar_C_SetNewSecurityTimer");
static_assert(offsetof(PAWN_Avatar_C_SetNewSecurityTimer, SecurityTime) == 0x000000, "Member 'PAWN_Avatar_C_SetNewSecurityTimer::SecurityTime' has a wrong offset!");
static_assert(offsetof(PAWN_Avatar_C_SetNewSecurityTimer, CallFunc_Greater_FloatFloat_ReturnValue) == 0x000004, "Member 'PAWN_Avatar_C_SetNewSecurityTimer::CallFunc_Greater_FloatFloat_ReturnValue' has a wrong offset!");

// Function PAWN_Avatar.PAWN_Avatar_C.UpdateSecurityTimer
// 0x00E0 (0x00E0 - 0x0000)
struct PAWN_Avatar_C_UpdateSecurityTimer final
{
public:
	struct FAttribModApplyData                    OutOfTimeDamage;                                   // 0x0000(0x00A0)(Edit, BlueprintVisible)
	class UAttribMod*                             CallFunc_ApplyMod_ReturnValue;                     // 0x00A0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_GetWorldDeltaSeconds_ReturnValue;         // 0x00A8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Subtract_FloatFloat_ReturnValue;          // 0x00AC(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_LessEqual_FloatFloat_ReturnValue;         // 0x00B0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_B1[0x3];                                       // 0x00B1(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_Add_FloatFloat_ReturnValue;               // 0x00B4(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Subtract_FloatFloat_ReturnValue_1;        // 0x00B8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_GetWorldDeltaSeconds_ReturnValue_1;       // 0x00BC(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Add_FloatFloat_ReturnValue_1;             // 0x00C0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_GreaterEqual_FloatFloat_ReturnValue;      // 0x00C4(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_EqualEqual_FloatFloat_ReturnValue;        // 0x00C5(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_C6[0x2];                                       // 0x00C6(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_GetGameTimeInSeconds_ReturnValue;         // 0x00C8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Subtract_FloatFloat_ReturnValue_2;        // 0x00CC(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Greater_FloatFloat_ReturnValue;           // 0x00D0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_D1[0x3];                                       // 0x00D1(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_Subtract_FloatFloat_ReturnValue_3;        // 0x00D4(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_FClamp_ReturnValue;                       // 0x00D8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(PAWN_Avatar_C_UpdateSecurityTimer) == 0x000008, "Wrong alignment on PAWN_Avatar_C_UpdateSecurityTimer");
static_assert(sizeof(PAWN_Avatar_C_UpdateSecurityTimer) == 0x0000E0, "Wrong size on PAWN_Avatar_C_UpdateSecurityTimer");
static_assert(offsetof(PAWN_Avatar_C_UpdateSecurityTimer, OutOfTimeDamage) == 0x000000, "Member 'PAWN_Avatar_C_UpdateSecurityTimer::OutOfTimeDamage' has a wrong offset!");
static_assert(offsetof(PAWN_Avatar_C_UpdateSecurityTimer, CallFunc_ApplyMod_ReturnValue) == 0x0000A0, "Member 'PAWN_Avatar_C_UpdateSecurityTimer::CallFunc_ApplyMod_ReturnValue' has a wrong offset!");
static_assert(offsetof(PAWN_Avatar_C_UpdateSecurityTimer, CallFunc_GetWorldDeltaSeconds_ReturnValue) == 0x0000A8, "Member 'PAWN_Avatar_C_UpdateSecurityTimer::CallFunc_GetWorldDeltaSeconds_ReturnValue' has a wrong offset!");
static_assert(offsetof(PAWN_Avatar_C_UpdateSecurityTimer, CallFunc_Subtract_FloatFloat_ReturnValue) == 0x0000AC, "Member 'PAWN_Avatar_C_UpdateSecurityTimer::CallFunc_Subtract_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(PAWN_Avatar_C_UpdateSecurityTimer, CallFunc_LessEqual_FloatFloat_ReturnValue) == 0x0000B0, "Member 'PAWN_Avatar_C_UpdateSecurityTimer::CallFunc_LessEqual_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(PAWN_Avatar_C_UpdateSecurityTimer, CallFunc_Add_FloatFloat_ReturnValue) == 0x0000B4, "Member 'PAWN_Avatar_C_UpdateSecurityTimer::CallFunc_Add_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(PAWN_Avatar_C_UpdateSecurityTimer, CallFunc_Subtract_FloatFloat_ReturnValue_1) == 0x0000B8, "Member 'PAWN_Avatar_C_UpdateSecurityTimer::CallFunc_Subtract_FloatFloat_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(PAWN_Avatar_C_UpdateSecurityTimer, CallFunc_GetWorldDeltaSeconds_ReturnValue_1) == 0x0000BC, "Member 'PAWN_Avatar_C_UpdateSecurityTimer::CallFunc_GetWorldDeltaSeconds_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(PAWN_Avatar_C_UpdateSecurityTimer, CallFunc_Add_FloatFloat_ReturnValue_1) == 0x0000C0, "Member 'PAWN_Avatar_C_UpdateSecurityTimer::CallFunc_Add_FloatFloat_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(PAWN_Avatar_C_UpdateSecurityTimer, CallFunc_GreaterEqual_FloatFloat_ReturnValue) == 0x0000C4, "Member 'PAWN_Avatar_C_UpdateSecurityTimer::CallFunc_GreaterEqual_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(PAWN_Avatar_C_UpdateSecurityTimer, CallFunc_EqualEqual_FloatFloat_ReturnValue) == 0x0000C5, "Member 'PAWN_Avatar_C_UpdateSecurityTimer::CallFunc_EqualEqual_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(PAWN_Avatar_C_UpdateSecurityTimer, CallFunc_GetGameTimeInSeconds_ReturnValue) == 0x0000C8, "Member 'PAWN_Avatar_C_UpdateSecurityTimer::CallFunc_GetGameTimeInSeconds_ReturnValue' has a wrong offset!");
static_assert(offsetof(PAWN_Avatar_C_UpdateSecurityTimer, CallFunc_Subtract_FloatFloat_ReturnValue_2) == 0x0000CC, "Member 'PAWN_Avatar_C_UpdateSecurityTimer::CallFunc_Subtract_FloatFloat_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(PAWN_Avatar_C_UpdateSecurityTimer, CallFunc_Greater_FloatFloat_ReturnValue) == 0x0000D0, "Member 'PAWN_Avatar_C_UpdateSecurityTimer::CallFunc_Greater_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(PAWN_Avatar_C_UpdateSecurityTimer, CallFunc_Subtract_FloatFloat_ReturnValue_3) == 0x0000D4, "Member 'PAWN_Avatar_C_UpdateSecurityTimer::CallFunc_Subtract_FloatFloat_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(PAWN_Avatar_C_UpdateSecurityTimer, CallFunc_FClamp_ReturnValue) == 0x0000D8, "Member 'PAWN_Avatar_C_UpdateSecurityTimer::CallFunc_FClamp_ReturnValue' has a wrong offset!");

// Function PAWN_Avatar.PAWN_Avatar_C.AddTimeToTimer
// 0x000C (0x000C - 0x0000)
struct PAWN_Avatar_C_AddTimeToTimer final
{
public:
	float                                         PickUpTimestamp;                                   // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         TimeAddValue;                                      // 0x0004(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Add_FloatFloat_ReturnValue;               // 0x0008(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(PAWN_Avatar_C_AddTimeToTimer) == 0x000004, "Wrong alignment on PAWN_Avatar_C_AddTimeToTimer");
static_assert(sizeof(PAWN_Avatar_C_AddTimeToTimer) == 0x00000C, "Wrong size on PAWN_Avatar_C_AddTimeToTimer");
static_assert(offsetof(PAWN_Avatar_C_AddTimeToTimer, PickUpTimestamp) == 0x000000, "Member 'PAWN_Avatar_C_AddTimeToTimer::PickUpTimestamp' has a wrong offset!");
static_assert(offsetof(PAWN_Avatar_C_AddTimeToTimer, TimeAddValue) == 0x000004, "Member 'PAWN_Avatar_C_AddTimeToTimer::TimeAddValue' has a wrong offset!");
static_assert(offsetof(PAWN_Avatar_C_AddTimeToTimer, CallFunc_Add_FloatFloat_ReturnValue) == 0x000008, "Member 'PAWN_Avatar_C_AddTimeToTimer::CallFunc_Add_FloatFloat_ReturnValue' has a wrong offset!");

// Function PAWN_Avatar.PAWN_Avatar_C.HandleGamepadInputLookX
// 0x0028 (0x0028 - 0x0000)
struct PAWN_Avatar_C_HandleGamepadInputLookX final
{
public:
	float                                         Value;                                             // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class USAVE_Settings_C*                       CallFunc_GetShockSettingsForCurrentUser_Settings;  // 0x0008(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_GetCyberspaceLookSensitivity_Value;       // 0x0010(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Divide_FloatFloat_ReturnValue;            // 0x0014(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Not_PreBool_ReturnValue;                  // 0x0018(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_19[0x3];                                       // 0x0019(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_Multiply_FloatFloat_ReturnValue;          // 0x001C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Add_FloatFloat_ReturnValue;               // 0x0020(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(PAWN_Avatar_C_HandleGamepadInputLookX) == 0x000008, "Wrong alignment on PAWN_Avatar_C_HandleGamepadInputLookX");
static_assert(sizeof(PAWN_Avatar_C_HandleGamepadInputLookX) == 0x000028, "Wrong size on PAWN_Avatar_C_HandleGamepadInputLookX");
static_assert(offsetof(PAWN_Avatar_C_HandleGamepadInputLookX, Value) == 0x000000, "Member 'PAWN_Avatar_C_HandleGamepadInputLookX::Value' has a wrong offset!");
static_assert(offsetof(PAWN_Avatar_C_HandleGamepadInputLookX, CallFunc_GetShockSettingsForCurrentUser_Settings) == 0x000008, "Member 'PAWN_Avatar_C_HandleGamepadInputLookX::CallFunc_GetShockSettingsForCurrentUser_Settings' has a wrong offset!");
static_assert(offsetof(PAWN_Avatar_C_HandleGamepadInputLookX, CallFunc_GetCyberspaceLookSensitivity_Value) == 0x000010, "Member 'PAWN_Avatar_C_HandleGamepadInputLookX::CallFunc_GetCyberspaceLookSensitivity_Value' has a wrong offset!");
static_assert(offsetof(PAWN_Avatar_C_HandleGamepadInputLookX, CallFunc_Divide_FloatFloat_ReturnValue) == 0x000014, "Member 'PAWN_Avatar_C_HandleGamepadInputLookX::CallFunc_Divide_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(PAWN_Avatar_C_HandleGamepadInputLookX, CallFunc_Not_PreBool_ReturnValue) == 0x000018, "Member 'PAWN_Avatar_C_HandleGamepadInputLookX::CallFunc_Not_PreBool_ReturnValue' has a wrong offset!");
static_assert(offsetof(PAWN_Avatar_C_HandleGamepadInputLookX, CallFunc_Multiply_FloatFloat_ReturnValue) == 0x00001C, "Member 'PAWN_Avatar_C_HandleGamepadInputLookX::CallFunc_Multiply_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(PAWN_Avatar_C_HandleGamepadInputLookX, CallFunc_Add_FloatFloat_ReturnValue) == 0x000020, "Member 'PAWN_Avatar_C_HandleGamepadInputLookX::CallFunc_Add_FloatFloat_ReturnValue' has a wrong offset!");

// Function PAWN_Avatar.PAWN_Avatar_C.HandleGamepadInputLookY
// 0x0038 (0x0038 - 0x0000)
struct PAWN_Avatar_C_HandleGamepadInputLookY final
{
public:
	float                                         Value;                                             // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Variable;                                // 0x0004(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         Temp_float_Variable;                               // 0x0008(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Temp_float_Variable_1;                             // 0x000C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class USAVE_Settings_C*                       CallFunc_GetShockSettingsForCurrentUser_Settings;  // 0x0010(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_GetCyberspaceInvertY_Result;              // 0x0018(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Not_PreBool_ReturnValue;                  // 0x0019(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_1A[0x2];                                       // 0x001A(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         K2Node_Select_Default;                             // 0x001C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_GetCyberspaceLookSensitivity_Value;       // 0x0020(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Multiply_FloatFloat_ReturnValue;          // 0x0024(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Divide_FloatFloat_ReturnValue;            // 0x0028(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Multiply_FloatFloat_ReturnValue_1;        // 0x002C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Add_FloatFloat_ReturnValue;               // 0x0030(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(PAWN_Avatar_C_HandleGamepadInputLookY) == 0x000008, "Wrong alignment on PAWN_Avatar_C_HandleGamepadInputLookY");
static_assert(sizeof(PAWN_Avatar_C_HandleGamepadInputLookY) == 0x000038, "Wrong size on PAWN_Avatar_C_HandleGamepadInputLookY");
static_assert(offsetof(PAWN_Avatar_C_HandleGamepadInputLookY, Value) == 0x000000, "Member 'PAWN_Avatar_C_HandleGamepadInputLookY::Value' has a wrong offset!");
static_assert(offsetof(PAWN_Avatar_C_HandleGamepadInputLookY, Temp_bool_Variable) == 0x000004, "Member 'PAWN_Avatar_C_HandleGamepadInputLookY::Temp_bool_Variable' has a wrong offset!");
static_assert(offsetof(PAWN_Avatar_C_HandleGamepadInputLookY, Temp_float_Variable) == 0x000008, "Member 'PAWN_Avatar_C_HandleGamepadInputLookY::Temp_float_Variable' has a wrong offset!");
static_assert(offsetof(PAWN_Avatar_C_HandleGamepadInputLookY, Temp_float_Variable_1) == 0x00000C, "Member 'PAWN_Avatar_C_HandleGamepadInputLookY::Temp_float_Variable_1' has a wrong offset!");
static_assert(offsetof(PAWN_Avatar_C_HandleGamepadInputLookY, CallFunc_GetShockSettingsForCurrentUser_Settings) == 0x000010, "Member 'PAWN_Avatar_C_HandleGamepadInputLookY::CallFunc_GetShockSettingsForCurrentUser_Settings' has a wrong offset!");
static_assert(offsetof(PAWN_Avatar_C_HandleGamepadInputLookY, CallFunc_GetCyberspaceInvertY_Result) == 0x000018, "Member 'PAWN_Avatar_C_HandleGamepadInputLookY::CallFunc_GetCyberspaceInvertY_Result' has a wrong offset!");
static_assert(offsetof(PAWN_Avatar_C_HandleGamepadInputLookY, CallFunc_Not_PreBool_ReturnValue) == 0x000019, "Member 'PAWN_Avatar_C_HandleGamepadInputLookY::CallFunc_Not_PreBool_ReturnValue' has a wrong offset!");
static_assert(offsetof(PAWN_Avatar_C_HandleGamepadInputLookY, K2Node_Select_Default) == 0x00001C, "Member 'PAWN_Avatar_C_HandleGamepadInputLookY::K2Node_Select_Default' has a wrong offset!");
static_assert(offsetof(PAWN_Avatar_C_HandleGamepadInputLookY, CallFunc_GetCyberspaceLookSensitivity_Value) == 0x000020, "Member 'PAWN_Avatar_C_HandleGamepadInputLookY::CallFunc_GetCyberspaceLookSensitivity_Value' has a wrong offset!");
static_assert(offsetof(PAWN_Avatar_C_HandleGamepadInputLookY, CallFunc_Multiply_FloatFloat_ReturnValue) == 0x000024, "Member 'PAWN_Avatar_C_HandleGamepadInputLookY::CallFunc_Multiply_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(PAWN_Avatar_C_HandleGamepadInputLookY, CallFunc_Divide_FloatFloat_ReturnValue) == 0x000028, "Member 'PAWN_Avatar_C_HandleGamepadInputLookY::CallFunc_Divide_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(PAWN_Avatar_C_HandleGamepadInputLookY, CallFunc_Multiply_FloatFloat_ReturnValue_1) == 0x00002C, "Member 'PAWN_Avatar_C_HandleGamepadInputLookY::CallFunc_Multiply_FloatFloat_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(PAWN_Avatar_C_HandleGamepadInputLookY, CallFunc_Add_FloatFloat_ReturnValue) == 0x000030, "Member 'PAWN_Avatar_C_HandleGamepadInputLookY::CallFunc_Add_FloatFloat_ReturnValue' has a wrong offset!");

// Function PAWN_Avatar.PAWN_Avatar_C.HandleRollLeft
// 0x0008 (0x0008 - 0x0000)
struct PAWN_Avatar_C_HandleRollLeft final
{
public:
	float                                         CallFunc_Add_FloatFloat_ReturnValue;               // 0x0000(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_FMax_ReturnValue;                         // 0x0004(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(PAWN_Avatar_C_HandleRollLeft) == 0x000004, "Wrong alignment on PAWN_Avatar_C_HandleRollLeft");
static_assert(sizeof(PAWN_Avatar_C_HandleRollLeft) == 0x000008, "Wrong size on PAWN_Avatar_C_HandleRollLeft");
static_assert(offsetof(PAWN_Avatar_C_HandleRollLeft, CallFunc_Add_FloatFloat_ReturnValue) == 0x000000, "Member 'PAWN_Avatar_C_HandleRollLeft::CallFunc_Add_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(PAWN_Avatar_C_HandleRollLeft, CallFunc_FMax_ReturnValue) == 0x000004, "Member 'PAWN_Avatar_C_HandleRollLeft::CallFunc_FMax_ReturnValue' has a wrong offset!");

// Function PAWN_Avatar.PAWN_Avatar_C.HandleRollRight
// 0x0008 (0x0008 - 0x0000)
struct PAWN_Avatar_C_HandleRollRight final
{
public:
	float                                         CallFunc_Add_FloatFloat_ReturnValue;               // 0x0000(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_FMin_ReturnValue;                         // 0x0004(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(PAWN_Avatar_C_HandleRollRight) == 0x000004, "Wrong alignment on PAWN_Avatar_C_HandleRollRight");
static_assert(sizeof(PAWN_Avatar_C_HandleRollRight) == 0x000008, "Wrong size on PAWN_Avatar_C_HandleRollRight");
static_assert(offsetof(PAWN_Avatar_C_HandleRollRight, CallFunc_Add_FloatFloat_ReturnValue) == 0x000000, "Member 'PAWN_Avatar_C_HandleRollRight::CallFunc_Add_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(PAWN_Avatar_C_HandleRollRight, CallFunc_FMin_ReturnValue) == 0x000004, "Member 'PAWN_Avatar_C_HandleRollRight::CallFunc_FMin_ReturnValue' has a wrong offset!");

// Function PAWN_Avatar.PAWN_Avatar_C.HandleSoftware
// 0x0040 (0x0040 - 0x0000)
struct PAWN_Avatar_C_HandleSoftware final
{
public:
	class UClass*                                 SoftwareClass;                                     // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Activate;                                          // 0x0008(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UITEM_Base_C*                           SoftwareItem;                                      // 0x0010(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UInventoryBag_C*                        SoftwareBag;                                       // 0x0018(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Deactivate_Result;                        // 0x0020(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Not_PreBool_ReturnValue;                  // 0x0021(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0022(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Activate_Result;                          // 0x0023(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_24[0x4];                                       // 0x0024(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UITEM_Base_C*                           CallFunc_FindItem_FoundItem;                       // 0x0028(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue_1;                    // 0x0030(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_31[0x7];                                       // 0x0031(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UInventoryBag_C*                        CallFunc_GetBagByType_Bag;                         // 0x0038(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(PAWN_Avatar_C_HandleSoftware) == 0x000008, "Wrong alignment on PAWN_Avatar_C_HandleSoftware");
static_assert(sizeof(PAWN_Avatar_C_HandleSoftware) == 0x000040, "Wrong size on PAWN_Avatar_C_HandleSoftware");
static_assert(offsetof(PAWN_Avatar_C_HandleSoftware, SoftwareClass) == 0x000000, "Member 'PAWN_Avatar_C_HandleSoftware::SoftwareClass' has a wrong offset!");
static_assert(offsetof(PAWN_Avatar_C_HandleSoftware, Activate) == 0x000008, "Member 'PAWN_Avatar_C_HandleSoftware::Activate' has a wrong offset!");
static_assert(offsetof(PAWN_Avatar_C_HandleSoftware, SoftwareItem) == 0x000010, "Member 'PAWN_Avatar_C_HandleSoftware::SoftwareItem' has a wrong offset!");
static_assert(offsetof(PAWN_Avatar_C_HandleSoftware, SoftwareBag) == 0x000018, "Member 'PAWN_Avatar_C_HandleSoftware::SoftwareBag' has a wrong offset!");
static_assert(offsetof(PAWN_Avatar_C_HandleSoftware, CallFunc_Deactivate_Result) == 0x000020, "Member 'PAWN_Avatar_C_HandleSoftware::CallFunc_Deactivate_Result' has a wrong offset!");
static_assert(offsetof(PAWN_Avatar_C_HandleSoftware, CallFunc_Not_PreBool_ReturnValue) == 0x000021, "Member 'PAWN_Avatar_C_HandleSoftware::CallFunc_Not_PreBool_ReturnValue' has a wrong offset!");
static_assert(offsetof(PAWN_Avatar_C_HandleSoftware, CallFunc_IsValid_ReturnValue) == 0x000022, "Member 'PAWN_Avatar_C_HandleSoftware::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(PAWN_Avatar_C_HandleSoftware, CallFunc_Activate_Result) == 0x000023, "Member 'PAWN_Avatar_C_HandleSoftware::CallFunc_Activate_Result' has a wrong offset!");
static_assert(offsetof(PAWN_Avatar_C_HandleSoftware, CallFunc_FindItem_FoundItem) == 0x000028, "Member 'PAWN_Avatar_C_HandleSoftware::CallFunc_FindItem_FoundItem' has a wrong offset!");
static_assert(offsetof(PAWN_Avatar_C_HandleSoftware, CallFunc_IsValid_ReturnValue_1) == 0x000030, "Member 'PAWN_Avatar_C_HandleSoftware::CallFunc_IsValid_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(PAWN_Avatar_C_HandleSoftware, CallFunc_GetBagByType_Bag) == 0x000038, "Member 'PAWN_Avatar_C_HandleSoftware::CallFunc_GetBagByType_Bag' has a wrong offset!");

// Function PAWN_Avatar.PAWN_Avatar_C.Handle Menu Nav Up
// 0x0001 (0x0001 - 0x0000)
struct PAWN_Avatar_C_Handle_Menu_Nav_Up final
{
public:
	bool                                          ButtonDown;                                        // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(PAWN_Avatar_C_Handle_Menu_Nav_Up) == 0x000001, "Wrong alignment on PAWN_Avatar_C_Handle_Menu_Nav_Up");
static_assert(sizeof(PAWN_Avatar_C_Handle_Menu_Nav_Up) == 0x000001, "Wrong size on PAWN_Avatar_C_Handle_Menu_Nav_Up");
static_assert(offsetof(PAWN_Avatar_C_Handle_Menu_Nav_Up, ButtonDown) == 0x000000, "Member 'PAWN_Avatar_C_Handle_Menu_Nav_Up::ButtonDown' has a wrong offset!");

// Function PAWN_Avatar.PAWN_Avatar_C.Handle Menu Nav Down
// 0x0001 (0x0001 - 0x0000)
struct PAWN_Avatar_C_Handle_Menu_Nav_Down final
{
public:
	bool                                          ButtonDown;                                        // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(PAWN_Avatar_C_Handle_Menu_Nav_Down) == 0x000001, "Wrong alignment on PAWN_Avatar_C_Handle_Menu_Nav_Down");
static_assert(sizeof(PAWN_Avatar_C_Handle_Menu_Nav_Down) == 0x000001, "Wrong size on PAWN_Avatar_C_Handle_Menu_Nav_Down");
static_assert(offsetof(PAWN_Avatar_C_Handle_Menu_Nav_Down, ButtonDown) == 0x000000, "Member 'PAWN_Avatar_C_Handle_Menu_Nav_Down::ButtonDown' has a wrong offset!");

// Function PAWN_Avatar.PAWN_Avatar_C.Handle Menu Nav Right
// 0x0001 (0x0001 - 0x0000)
struct PAWN_Avatar_C_Handle_Menu_Nav_Right final
{
public:
	bool                                          ButtonDown;                                        // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(PAWN_Avatar_C_Handle_Menu_Nav_Right) == 0x000001, "Wrong alignment on PAWN_Avatar_C_Handle_Menu_Nav_Right");
static_assert(sizeof(PAWN_Avatar_C_Handle_Menu_Nav_Right) == 0x000001, "Wrong size on PAWN_Avatar_C_Handle_Menu_Nav_Right");
static_assert(offsetof(PAWN_Avatar_C_Handle_Menu_Nav_Right, ButtonDown) == 0x000000, "Member 'PAWN_Avatar_C_Handle_Menu_Nav_Right::ButtonDown' has a wrong offset!");

// Function PAWN_Avatar.PAWN_Avatar_C.Handle Menu Nav Left
// 0x0001 (0x0001 - 0x0000)
struct PAWN_Avatar_C_Handle_Menu_Nav_Left final
{
public:
	bool                                          ButtonDown;                                        // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(PAWN_Avatar_C_Handle_Menu_Nav_Left) == 0x000001, "Wrong alignment on PAWN_Avatar_C_Handle_Menu_Nav_Left");
static_assert(sizeof(PAWN_Avatar_C_Handle_Menu_Nav_Left) == 0x000001, "Wrong size on PAWN_Avatar_C_Handle_Menu_Nav_Left");
static_assert(offsetof(PAWN_Avatar_C_Handle_Menu_Nav_Left, ButtonDown) == 0x000000, "Member 'PAWN_Avatar_C_Handle_Menu_Nav_Left::ButtonDown' has a wrong offset!");

// Function PAWN_Avatar.PAWN_Avatar_C.HandleMenuNavTabLeft
// 0x0001 (0x0001 - 0x0000)
struct PAWN_Avatar_C_HandleMenuNavTabLeft final
{
public:
	bool                                          ButtonDown;                                        // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(PAWN_Avatar_C_HandleMenuNavTabLeft) == 0x000001, "Wrong alignment on PAWN_Avatar_C_HandleMenuNavTabLeft");
static_assert(sizeof(PAWN_Avatar_C_HandleMenuNavTabLeft) == 0x000001, "Wrong size on PAWN_Avatar_C_HandleMenuNavTabLeft");
static_assert(offsetof(PAWN_Avatar_C_HandleMenuNavTabLeft, ButtonDown) == 0x000000, "Member 'PAWN_Avatar_C_HandleMenuNavTabLeft::ButtonDown' has a wrong offset!");

// Function PAWN_Avatar.PAWN_Avatar_C.HandleMenuNavTabRight
// 0x0001 (0x0001 - 0x0000)
struct PAWN_Avatar_C_HandleMenuNavTabRight final
{
public:
	bool                                          ButtonDown;                                        // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(PAWN_Avatar_C_HandleMenuNavTabRight) == 0x000001, "Wrong alignment on PAWN_Avatar_C_HandleMenuNavTabRight");
static_assert(sizeof(PAWN_Avatar_C_HandleMenuNavTabRight) == 0x000001, "Wrong size on PAWN_Avatar_C_HandleMenuNavTabRight");
static_assert(offsetof(PAWN_Avatar_C_HandleMenuNavTabRight, ButtonDown) == 0x000000, "Member 'PAWN_Avatar_C_HandleMenuNavTabRight::ButtonDown' has a wrong offset!");

// Function PAWN_Avatar.PAWN_Avatar_C.HandleMenuNavAlt1
// 0x0001 (0x0001 - 0x0000)
struct PAWN_Avatar_C_HandleMenuNavAlt1 final
{
public:
	bool                                          ButtonDown;                                        // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(PAWN_Avatar_C_HandleMenuNavAlt1) == 0x000001, "Wrong alignment on PAWN_Avatar_C_HandleMenuNavAlt1");
static_assert(sizeof(PAWN_Avatar_C_HandleMenuNavAlt1) == 0x000001, "Wrong size on PAWN_Avatar_C_HandleMenuNavAlt1");
static_assert(offsetof(PAWN_Avatar_C_HandleMenuNavAlt1, ButtonDown) == 0x000000, "Member 'PAWN_Avatar_C_HandleMenuNavAlt1::ButtonDown' has a wrong offset!");

// Function PAWN_Avatar.PAWN_Avatar_C.HandleMenuNavAlt2
// 0x0001 (0x0001 - 0x0000)
struct PAWN_Avatar_C_HandleMenuNavAlt2 final
{
public:
	bool                                          ButtonDown;                                        // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(PAWN_Avatar_C_HandleMenuNavAlt2) == 0x000001, "Wrong alignment on PAWN_Avatar_C_HandleMenuNavAlt2");
static_assert(sizeof(PAWN_Avatar_C_HandleMenuNavAlt2) == 0x000001, "Wrong size on PAWN_Avatar_C_HandleMenuNavAlt2");
static_assert(offsetof(PAWN_Avatar_C_HandleMenuNavAlt2, ButtonDown) == 0x000000, "Member 'PAWN_Avatar_C_HandleMenuNavAlt2::ButtonDown' has a wrong offset!");

// Function PAWN_Avatar.PAWN_Avatar_C.HandleMenuNavAccept
// 0x0001 (0x0001 - 0x0000)
struct PAWN_Avatar_C_HandleMenuNavAccept final
{
public:
	bool                                          ButtonDown;                                        // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(PAWN_Avatar_C_HandleMenuNavAccept) == 0x000001, "Wrong alignment on PAWN_Avatar_C_HandleMenuNavAccept");
static_assert(sizeof(PAWN_Avatar_C_HandleMenuNavAccept) == 0x000001, "Wrong size on PAWN_Avatar_C_HandleMenuNavAccept");
static_assert(offsetof(PAWN_Avatar_C_HandleMenuNavAccept, ButtonDown) == 0x000000, "Member 'PAWN_Avatar_C_HandleMenuNavAccept::ButtonDown' has a wrong offset!");

// Function PAWN_Avatar.PAWN_Avatar_C.HandleMenuNavBack
// 0x0002 (0x0002 - 0x0000)
struct PAWN_Avatar_C_HandleMenuNavBack final
{
public:
	bool                                          ButtonDown;                                        // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          K2Node_SwitchEnum_CmpSuccess;                      // 0x0001(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(PAWN_Avatar_C_HandleMenuNavBack) == 0x000001, "Wrong alignment on PAWN_Avatar_C_HandleMenuNavBack");
static_assert(sizeof(PAWN_Avatar_C_HandleMenuNavBack) == 0x000002, "Wrong size on PAWN_Avatar_C_HandleMenuNavBack");
static_assert(offsetof(PAWN_Avatar_C_HandleMenuNavBack, ButtonDown) == 0x000000, "Member 'PAWN_Avatar_C_HandleMenuNavBack::ButtonDown' has a wrong offset!");
static_assert(offsetof(PAWN_Avatar_C_HandleMenuNavBack, K2Node_SwitchEnum_CmpSuccess) == 0x000001, "Member 'PAWN_Avatar_C_HandleMenuNavBack::K2Node_SwitchEnum_CmpSuccess' has a wrong offset!");

// Function PAWN_Avatar.PAWN_Avatar_C.InitializeCharacter
// 0x0030 (0x0030 - 0x0000)
struct PAWN_Avatar_C_InitializeCharacter final
{
public:
	bool                                          Result;                                            // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UWeightedAverageVec2*                   CallFunc_SpawnObject_ReturnValue;                  // 0x0008(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class APlayerController*                      CallFunc_GetPlayerController_ReturnValue;          // 0x0010(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UWIDGET_CyberspaceHUD_C*                CallFunc_Create_ReturnValue;                       // 0x0018(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UUMGSequencePlayer*                     CallFunc_PlayAnimation_ReturnValue;                // 0x0020(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_InitializeCharacter_Result;               // 0x0028(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(PAWN_Avatar_C_InitializeCharacter) == 0x000008, "Wrong alignment on PAWN_Avatar_C_InitializeCharacter");
static_assert(sizeof(PAWN_Avatar_C_InitializeCharacter) == 0x000030, "Wrong size on PAWN_Avatar_C_InitializeCharacter");
static_assert(offsetof(PAWN_Avatar_C_InitializeCharacter, Result) == 0x000000, "Member 'PAWN_Avatar_C_InitializeCharacter::Result' has a wrong offset!");
static_assert(offsetof(PAWN_Avatar_C_InitializeCharacter, CallFunc_SpawnObject_ReturnValue) == 0x000008, "Member 'PAWN_Avatar_C_InitializeCharacter::CallFunc_SpawnObject_ReturnValue' has a wrong offset!");
static_assert(offsetof(PAWN_Avatar_C_InitializeCharacter, CallFunc_GetPlayerController_ReturnValue) == 0x000010, "Member 'PAWN_Avatar_C_InitializeCharacter::CallFunc_GetPlayerController_ReturnValue' has a wrong offset!");
static_assert(offsetof(PAWN_Avatar_C_InitializeCharacter, CallFunc_Create_ReturnValue) == 0x000018, "Member 'PAWN_Avatar_C_InitializeCharacter::CallFunc_Create_ReturnValue' has a wrong offset!");
static_assert(offsetof(PAWN_Avatar_C_InitializeCharacter, CallFunc_PlayAnimation_ReturnValue) == 0x000020, "Member 'PAWN_Avatar_C_InitializeCharacter::CallFunc_PlayAnimation_ReturnValue' has a wrong offset!");
static_assert(offsetof(PAWN_Avatar_C_InitializeCharacter, CallFunc_InitializeCharacter_Result) == 0x000028, "Member 'PAWN_Avatar_C_InitializeCharacter::CallFunc_InitializeCharacter_Result' has a wrong offset!");

}

