#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: INTERACT_Channeling_Base

#include "Basic.hpp"

#include "INTERACT_Channeling_Base_classes.hpp"
#include "INTERACT_Channeling_Base_parameters.hpp"


namespace SDK
{

// Function INTERACT_Channeling_Base.INTERACT_Channeling_Base_C.OnChannelingInteractInitialized__DelegateSignature
// (Public, Delegate, BlueprintCallable, BlueprintEvent)

void AINTERACT_Channeling_Base_C::OnChannelingInteractInitialized__DelegateSignature()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("INTERACT_Channeling_Base_C", "OnChannelingInteractInitialized__DelegateSignature");

	UObject::ProcessEvent(Func, nullptr);
}


// Function INTERACT_Channeling_Base.INTERACT_Channeling_Base_C.HasInitializedChannelingInteract
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// bool                                    Result                                                 (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void AINTERACT_Channeling_Base_C::HasInitializedChannelingInteract(bool* Result)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("INTERACT_Channeling_Base_C", "HasInitializedChannelingInteract");

	Params::INTERACT_Channeling_Base_C_HasInitializedChannelingInteract Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (Result != nullptr)
		*Result = Parms.Result;
}


// Function INTERACT_Channeling_Base.INTERACT_Channeling_Base_C.HasActiveChannelingMoveControl
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// bool                                    Result                                                 (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void AINTERACT_Channeling_Base_C::HasActiveChannelingMoveControl(bool* Result)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("INTERACT_Channeling_Base_C", "HasActiveChannelingMoveControl");

	Params::INTERACT_Channeling_Base_C_HasActiveChannelingMoveControl Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (Result != nullptr)
		*Result = Parms.Result;
}


// Function INTERACT_Channeling_Base.INTERACT_Channeling_Base_C.CanResumeChannelingInteraction
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// bool                                    Result                                                 (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void AINTERACT_Channeling_Base_C::CanResumeChannelingInteraction(bool* Result)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("INTERACT_Channeling_Base_C", "CanResumeChannelingInteraction");

	Params::INTERACT_Channeling_Base_C_CanResumeChannelingInteraction Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (Result != nullptr)
		*Result = Parms.Result;
}


// Function INTERACT_Channeling_Base.INTERACT_Channeling_Base_C.CanPerformChannelingInteraction
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// class AActor*                           SourceActor                                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    Result                                                 (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void AINTERACT_Channeling_Base_C::CanPerformChannelingInteraction(class AActor* SourceActor, bool* Result)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("INTERACT_Channeling_Base_C", "CanPerformChannelingInteraction");

	Params::INTERACT_Channeling_Base_C_CanPerformChannelingInteraction Parms{};

	Parms.SourceActor = SourceActor;

	UObject::ProcessEvent(Func, &Parms);

	if (Result != nullptr)
		*Result = Parms.Result;
}


// Function INTERACT_Channeling_Base.INTERACT_Channeling_Base_C.CanPerformChannelingSequence
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// class APAWN_Hacker_Simple_C*            HackerPawn                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    Result                                                 (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void AINTERACT_Channeling_Base_C::CanPerformChannelingSequence(class APAWN_Hacker_Simple_C* HackerPawn, bool* Result)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("INTERACT_Channeling_Base_C", "CanPerformChannelingSequence");

	Params::INTERACT_Channeling_Base_C_CanPerformChannelingSequence Parms{};

	Parms.HackerPawn = HackerPawn;

	UObject::ProcessEvent(Func, &Parms);

	if (Result != nullptr)
		*Result = Parms.Result;
}


// Function INTERACT_Channeling_Base.INTERACT_Channeling_Base_C.InitializeChannelingInteract
// (Public, BlueprintCallable, BlueprintEvent)

void AINTERACT_Channeling_Base_C::InitializeChannelingInteract()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("INTERACT_Channeling_Base_C", "InitializeChannelingInteract");

	UObject::ProcessEvent(Func, nullptr);
}


// Function INTERACT_Channeling_Base.INTERACT_Channeling_Base_C.ResumeChannelingInteraction
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// class APAWN_Hacker_Simple_C*            HackerPawn                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void AINTERACT_Channeling_Base_C::ResumeChannelingInteraction(class APAWN_Hacker_Simple_C* HackerPawn)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("INTERACT_Channeling_Base_C", "ResumeChannelingInteraction");

	Params::INTERACT_Channeling_Base_C_ResumeChannelingInteraction Parms{};

	Parms.HackerPawn = HackerPawn;

	UObject::ProcessEvent(Func, &Parms);
}


// Function INTERACT_Channeling_Base.INTERACT_Channeling_Base_C.ReceiveAnimationMessage
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// class FString                           Message                                                (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, HasGetValueTypeHash)
// bool                                    Result                                                 (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void AINTERACT_Channeling_Base_C::ReceiveAnimationMessage(const class FString& Message, bool* Result)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("INTERACT_Channeling_Base_C", "ReceiveAnimationMessage");

	Params::INTERACT_Channeling_Base_C_ReceiveAnimationMessage Parms{};

	Parms.Message = std::move(Message);

	UObject::ProcessEvent(Func, &Parms);

	if (Result != nullptr)
		*Result = Parms.Result;
}


// Function INTERACT_Channeling_Base.INTERACT_Channeling_Base_C.TryBeginChannelingMovement
// (Protected, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// class APAWN_Hacker_Simple_C*            HackerPawn                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class UPrimitiveComponent*              CursorPrimitive                                        (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    Result                                                 (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void AINTERACT_Channeling_Base_C::TryBeginChannelingMovement(class APAWN_Hacker_Simple_C* HackerPawn, class UPrimitiveComponent* CursorPrimitive, bool* Result)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("INTERACT_Channeling_Base_C", "TryBeginChannelingMovement");

	Params::INTERACT_Channeling_Base_C_TryBeginChannelingMovement Parms{};

	Parms.HackerPawn = HackerPawn;
	Parms.CursorPrimitive = CursorPrimitive;

	UObject::ProcessEvent(Func, &Parms);

	if (Result != nullptr)
		*Result = Parms.Result;
}


// Function INTERACT_Channeling_Base.INTERACT_Channeling_Base_C.TryBeginChannelingSequence
// (Protected, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// class APAWN_Hacker_Simple_C*            HackerPawn                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class UPrimitiveComponent*              CursorPrimitive                                        (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    Result                                                 (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void AINTERACT_Channeling_Base_C::TryBeginChannelingSequence(class APAWN_Hacker_Simple_C* HackerPawn, class UPrimitiveComponent* CursorPrimitive, bool* Result)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("INTERACT_Channeling_Base_C", "TryBeginChannelingSequence");

	Params::INTERACT_Channeling_Base_C_TryBeginChannelingSequence Parms{};

	Parms.HackerPawn = HackerPawn;
	Parms.CursorPrimitive = CursorPrimitive;

	UObject::ProcessEvent(Func, &Parms);

	if (Result != nullptr)
		*Result = Parms.Result;
}


// Function INTERACT_Channeling_Base.INTERACT_Channeling_Base_C.ResumeChannelingSequence
// (Protected, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// class APAWN_Hacker_Simple_C*            HackerPawn                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    IsWaitingToHolster                                     (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void AINTERACT_Channeling_Base_C::ResumeChannelingSequence(class APAWN_Hacker_Simple_C* HackerPawn, bool* IsWaitingToHolster)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("INTERACT_Channeling_Base_C", "ResumeChannelingSequence");

	Params::INTERACT_Channeling_Base_C_ResumeChannelingSequence Parms{};

	Parms.HackerPawn = HackerPawn;

	UObject::ProcessEvent(Func, &Parms);

	if (IsWaitingToHolster != nullptr)
		*IsWaitingToHolster = Parms.IsWaitingToHolster;
}


// Function INTERACT_Channeling_Base.INTERACT_Channeling_Base_C.CreateChannelingMoveControl
// (Protected, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// class APAWN_Hacker_Simple_C*            HackerPawn                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class UMOVECONTROL_Base_C*              Result                                                 (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void AINTERACT_Channeling_Base_C::CreateChannelingMoveControl(class APAWN_Hacker_Simple_C* HackerPawn, class UMOVECONTROL_Base_C** Result)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("INTERACT_Channeling_Base_C", "CreateChannelingMoveControl");

	Params::INTERACT_Channeling_Base_C_CreateChannelingMoveControl Parms{};

	Parms.HackerPawn = HackerPawn;

	UObject::ProcessEvent(Func, &Parms);

	if (Result != nullptr)
		*Result = Parms.Result;
}


// Function INTERACT_Channeling_Base.INTERACT_Channeling_Base_C.TryPlayChannelingMontage
// (Protected, BlueprintCallable, BlueprintEvent)

void AINTERACT_Channeling_Base_C::TryPlayChannelingMontage()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("INTERACT_Channeling_Base_C", "TryPlayChannelingMontage");

	UObject::ProcessEvent(Func, nullptr);
}


// Function INTERACT_Channeling_Base.INTERACT_Channeling_Base_C.OnChannelingMontageStarted
// (Protected, BlueprintCallable, BlueprintEvent)
// Parameters:
// class APAWN_Hacker_Simple_C*            HackerPawn                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void AINTERACT_Channeling_Base_C::OnChannelingMontageStarted(class APAWN_Hacker_Simple_C* HackerPawn)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("INTERACT_Channeling_Base_C", "OnChannelingMontageStarted");

	Params::INTERACT_Channeling_Base_C_OnChannelingMontageStarted Parms{};

	Parms.HackerPawn = HackerPawn;

	UObject::ProcessEvent(Func, &Parms);
}


// Function INTERACT_Channeling_Base.INTERACT_Channeling_Base_C.OnChannelingMontageFinished
// (Protected, BlueprintCallable, BlueprintEvent)

void AINTERACT_Channeling_Base_C::OnChannelingMontageFinished()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("INTERACT_Channeling_Base_C", "OnChannelingMontageFinished");

	UObject::ProcessEvent(Func, nullptr);
}


// Function INTERACT_Channeling_Base.INTERACT_Channeling_Base_C.OnRestoreInventoryAfterSequence
// (Protected, BlueprintCallable, BlueprintEvent)
// Parameters:
// class APAWN_Hacker_Simple_C*            HackerPawn                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void AINTERACT_Channeling_Base_C::OnRestoreInventoryAfterSequence(class APAWN_Hacker_Simple_C* HackerPawn)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("INTERACT_Channeling_Base_C", "OnRestoreInventoryAfterSequence");

	Params::INTERACT_Channeling_Base_C_OnRestoreInventoryAfterSequence Parms{};

	Parms.HackerPawn = HackerPawn;

	UObject::ProcessEvent(Func, &Parms);
}


// Function INTERACT_Channeling_Base.INTERACT_Channeling_Base_C.GetChannelingMoveControl
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// class UMOVECONTROL_Base_C*              Result                                                 (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void AINTERACT_Channeling_Base_C::GetChannelingMoveControl(class UMOVECONTROL_Base_C** Result)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("INTERACT_Channeling_Base_C", "GetChannelingMoveControl");

	Params::INTERACT_Channeling_Base_C_GetChannelingMoveControl Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (Result != nullptr)
		*Result = Parms.Result;
}


// Function INTERACT_Channeling_Base.INTERACT_Channeling_Base_C.TryInteract
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// class AActor*                           SourceActor                                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class UPrimitiveComponent*              CursorPrimitive                                        (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// ENUM_InteractionType                    InteractionType                                        (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FSTRUCT_InteractResults          InteractResults                                        (Parm, OutParm, HasGetValueTypeHash)

void AINTERACT_Channeling_Base_C::TryInteract(class AActor* SourceActor, class UPrimitiveComponent* CursorPrimitive, ENUM_InteractionType InteractionType, struct FSTRUCT_InteractResults* InteractResults)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("INTERACT_Channeling_Base_C", "TryInteract");

	Params::INTERACT_Channeling_Base_C_TryInteract Parms{};

	Parms.SourceActor = SourceActor;
	Parms.CursorPrimitive = CursorPrimitive;
	Parms.InteractionType = InteractionType;

	UObject::ProcessEvent(Func, &Parms);

	if (InteractResults != nullptr)
		*InteractResults = std::move(Parms.InteractResults);
}

}

