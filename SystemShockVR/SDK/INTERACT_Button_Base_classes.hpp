#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: INTERACT_Button_Base

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "ENUM_InteractionType_structs.hpp"
#include "INTERACT_Channeling_Base_classes.hpp"


namespace SDK
{

// BlueprintGeneratedClass INTERACT_Button_Base.INTERACT_Button_Base_C
// 0x00B8 (0x0408 - 0x0350)
class AINTERACT_Button_Base_C : public AINTERACT_Channeling_Base_C
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame_INTERACT_Button_Base_C;             // 0x0350(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	class UCOMP_AttribManager_C*                  COMP_AttribManager;                                // 0x0358(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class AINTERACT_Base_C*                       TargetInteractable;                                // 0x0360(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AINTERACT_Base_C*                       OnLocked_TargetInteractable;                       // 0x0368(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash)
	class FText                                   ActivatedMessage;                                  // 0x0370(0x0018)(Edit, BlueprintVisible)
	TArray<class AINTERACT_Base_C*>               UnlockInteracts;                                   // 0x0388(0x0010)(Edit, BlueprintVisible, DisableEditOnTemplate)
	TArray<class AINTERACT_Base_C*>               AdditionalInteracts;                               // 0x0398(0x0010)(Edit, BlueprintVisible, DisableEditOnTemplate)
	ENUM_InteractionType                          TargetInteractType;                                // 0x03A8(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ENUM_InteractionType                          AdditionalInteractType;                            // 0x03A9(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          HasBeenActivated;                                  // 0x03AA(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, SaveGame, IsPlainOldData, NoDestructor)
	bool                                          IsPoweredOn;                                       // 0x03AB(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          IsEveryTargetUnlocked;                             // 0x03AC(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_3AD[0x3];                                      // 0x03AD(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   LastTargetLockMessage;                             // 0x03B0(0x0018)(Edit, BlueprintVisible, DisableEditOnInstance)
	TArray<struct FDataTableRowHandle>            CompleteGameEvents;                                // 0x03C8(0x0010)(Edit, BlueprintVisible)
	bool                                          ToggleQuestState;                                  // 0x03D8(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_3D9[0x7];                                      // 0x03D9(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TSoftObjectPtr<class USoundCue>               LockedSoundCue;                                    // 0x03E0(0x0028)(Edit, BlueprintVisible, DisableEditOnInstance, HasGetValueTypeHash)

public:
	void ExecuteUbergraph_INTERACT_Button_Base(int32 EntryPoint);
	void ReceiveBeginPlay();
	void UserConstructionScript();
	void OnInteractSuccess(class AActor* SourceActor);
	void OnBrokenInteraction(bool* Result);
	void InitializeButtonState();
	void IsButtonFunctional(bool CheckPower, bool* Result);
	void IsButtonPoweredOn(bool* Result);
	void HasButtonBeenActivated(bool* Result);
	void IsEveryTargetInteractUnlocked(bool* Result);
	void GetSuccessMessage(class FText* Result);
	void OnLockedInteraction(bool* Result);
	void InitializeAttributes();
	void UnlockSpecifiedInteracts(bool* Result);
	void UpdateButtonEmissiveStrength(float Scale, float* Strength);
	void MarkButtonHasBeenActivated();
	void UpdateTargetGameEventStates();
	void EVENT_OnTargetLockStateChanged(class AINTERACT_Base_C* Interact);
	void GetAlreadyActivatedMessage(class FText* Result);
	void IsInteractableFunctional(class AINTERACT_Base_C* Interactable, bool* Result);
	void CanInteractWithTargetInteractables(bool CheckBusy, bool* Result, class FText* FailMessage);
	void CanInteractWithInteractable(class AINTERACT_Base_C* Interactable, bool CheckBusy, bool* Result, class FText* FailMessage);
	void PerformTargetInteraction();
	void OnTargetLockStateChanged();
	void CanModifyInteractable(class AINTERACT_Base_C* Interactable, ENUM_InteractionType InteractType, bool* Result);
	void CanModifyGameState(bool* Result);
	void CanModifyAnyTargetState(bool* Result);
	void OnButtonBecameDysfunctional();
	void BindEventsForInteract(class AINTERACT_Base_C* Interactable);
	void EVENT_OnTargetInteractDestroyed(class AINTERACT_Base_C* Interact);
	void EVENT_OnDisableAttribChanged(float CurrValue, float LastValue);
	void GetTargetShape(class UPrimitiveComponent* CursorPrimitive, class UShapeComponent** ShapeComponent);
	bool ShouldSaveActor(struct FStreamingSaveGameActorParams* Params_0);
	void SetInteractPowered(bool State, bool* Result);
	void CanModifyInteractPower(bool* Result);
	void TryInteract(class AActor* SourceActor, class UPrimitiveComponent* CursorPrimitive, ENUM_InteractionType InteractionType, struct FSTRUCT_InteractResults* InteractResults);

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"INTERACT_Button_Base_C">();
	}
	static class AINTERACT_Button_Base_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<AINTERACT_Button_Base_C>();
	}
};
static_assert(alignof(AINTERACT_Button_Base_C) == 0x000008, "Wrong alignment on AINTERACT_Button_Base_C");
static_assert(sizeof(AINTERACT_Button_Base_C) == 0x000408, "Wrong size on AINTERACT_Button_Base_C");
static_assert(offsetof(AINTERACT_Button_Base_C, UberGraphFrame_INTERACT_Button_Base_C) == 0x000350, "Member 'AINTERACT_Button_Base_C::UberGraphFrame_INTERACT_Button_Base_C' has a wrong offset!");
static_assert(offsetof(AINTERACT_Button_Base_C, COMP_AttribManager) == 0x000358, "Member 'AINTERACT_Button_Base_C::COMP_AttribManager' has a wrong offset!");
static_assert(offsetof(AINTERACT_Button_Base_C, TargetInteractable) == 0x000360, "Member 'AINTERACT_Button_Base_C::TargetInteractable' has a wrong offset!");
static_assert(offsetof(AINTERACT_Button_Base_C, OnLocked_TargetInteractable) == 0x000368, "Member 'AINTERACT_Button_Base_C::OnLocked_TargetInteractable' has a wrong offset!");
static_assert(offsetof(AINTERACT_Button_Base_C, ActivatedMessage) == 0x000370, "Member 'AINTERACT_Button_Base_C::ActivatedMessage' has a wrong offset!");
static_assert(offsetof(AINTERACT_Button_Base_C, UnlockInteracts) == 0x000388, "Member 'AINTERACT_Button_Base_C::UnlockInteracts' has a wrong offset!");
static_assert(offsetof(AINTERACT_Button_Base_C, AdditionalInteracts) == 0x000398, "Member 'AINTERACT_Button_Base_C::AdditionalInteracts' has a wrong offset!");
static_assert(offsetof(AINTERACT_Button_Base_C, TargetInteractType) == 0x0003A8, "Member 'AINTERACT_Button_Base_C::TargetInteractType' has a wrong offset!");
static_assert(offsetof(AINTERACT_Button_Base_C, AdditionalInteractType) == 0x0003A9, "Member 'AINTERACT_Button_Base_C::AdditionalInteractType' has a wrong offset!");
static_assert(offsetof(AINTERACT_Button_Base_C, HasBeenActivated) == 0x0003AA, "Member 'AINTERACT_Button_Base_C::HasBeenActivated' has a wrong offset!");
static_assert(offsetof(AINTERACT_Button_Base_C, IsPoweredOn) == 0x0003AB, "Member 'AINTERACT_Button_Base_C::IsPoweredOn' has a wrong offset!");
static_assert(offsetof(AINTERACT_Button_Base_C, IsEveryTargetUnlocked) == 0x0003AC, "Member 'AINTERACT_Button_Base_C::IsEveryTargetUnlocked' has a wrong offset!");
static_assert(offsetof(AINTERACT_Button_Base_C, LastTargetLockMessage) == 0x0003B0, "Member 'AINTERACT_Button_Base_C::LastTargetLockMessage' has a wrong offset!");
static_assert(offsetof(AINTERACT_Button_Base_C, CompleteGameEvents) == 0x0003C8, "Member 'AINTERACT_Button_Base_C::CompleteGameEvents' has a wrong offset!");
static_assert(offsetof(AINTERACT_Button_Base_C, ToggleQuestState) == 0x0003D8, "Member 'AINTERACT_Button_Base_C::ToggleQuestState' has a wrong offset!");
static_assert(offsetof(AINTERACT_Button_Base_C, LockedSoundCue) == 0x0003E0, "Member 'AINTERACT_Button_Base_C::LockedSoundCue' has a wrong offset!");

}

