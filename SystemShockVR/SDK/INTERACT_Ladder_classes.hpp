#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: INTERACT_Ladder

#include "Basic.hpp"

#include "CoreUObject_structs.hpp"
#include "Engine_structs.hpp"
#include "INTERACT_Channeling_Base_classes.hpp"
#include "ENUM_InteractionType_structs.hpp"


namespace SDK
{

// BlueprintGeneratedClass INTERACT_Ladder.INTERACT_Ladder_C
// 0x00D8 (0x0428 - 0x0350)
class AINTERACT_Ladder_C final : public AINTERACT_Channeling_Base_C
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame_INTERACT_Ladder_C;                  // 0x0350(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	class USceneComponent*                        TopDismountNode;                                   // 0x0358(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USceneComponent*                        BotDismountNode;                                   // 0x0360(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UBoxComponent*                          GrabVolume;                                        // 0x0368(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USceneComponent*                        TopMountNode;                                      // 0x0370(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USceneComponent*                        BotMountNode;                                      // 0x0378(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	bool                                          IsLadderActive;                                    // 0x0380(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_381[0x3];                                      // 0x0381(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         ClimbApproachAngle;                                // 0x0384(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         RungSeparation;                                    // 0x0388(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         TraversableRungs;                                  // 0x038C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         SlowRungTraversalTime;                             // 0x0390(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         SlowClimbSpeed;                                    // 0x0394(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         FastClimbSpeed;                                    // 0x0398(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         DismountSpeed;                                     // 0x039C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         SlowMountSpeed;                                    // 0x03A0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         FastMountSpeed;                                    // 0x03A4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         MountHeightOffset;                                 // 0x03A8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         MountMaxFallSpeed;                                 // 0x03AC(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         JumpDismountSpeed;                                 // 0x03B0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         RungCount;                                         // 0x03B4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         RungHeight;                                        // 0x03B8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               RungRotation;                                      // 0x03BC(0x000C)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	class UStaticMesh*                            RungBottomMesh;                                    // 0x03C8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UStaticMesh*                            RungMiddleMesh;                                    // 0x03D0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UStaticMesh*                            RungTopMesh;                                       // 0x03D8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                BottomMiddleTopHeightOffsets;                      // 0x03E0(0x000C)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash)
	float                                         RungForwardOffset;                                 // 0x03EC(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash)
	struct FVector                                BottomMountOffset;                                 // 0x03F0(0x000C)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash)
	struct FVector                                BottomDismountOffset;                              // 0x03FC(0x000C)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash)
	struct FVector                                TopMountOffset;                                    // 0x0408(0x000C)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash)
	struct FVector                                TopDismountOffset;                                 // 0x0414(0x000C)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash)
	float                                         TriggerLengthOffset;                               // 0x0420(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash)
	float                                         FastRungTraversalTime;                             // 0x0424(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

public:
	void ExecuteUbergraph_INTERACT_Ladder(int32 EntryPoint);
	void ReceiveTick(float DeltaSeconds);
	void ReceiveBeginPlay();
	void InitializeLadder();
	void ResumeMounting(class APAWN_Hacker_Simple_C* Player);
	void BeginMounting(class APAWN_Hacker_Simple_C* Player, bool IsMountingFromTop);
	void FinishDismounting(class UMOVECONTROL_Base_C* MoveControl);
	void CreateLadderMoveControl(class APAWN_Hacker_Simple_C* Player, bool TurnToFaceLadder, const struct FVector& MountLocation, float MountDuration);
	void OnEnterGrabVolume(class UPrimitiveComponent* Overlapped_Component, class AActor* Other_Actor, class UPrimitiveComponent* Other_Comp, int32 Other_Body_Index, bool From_Sweep, struct FHitResult& Sweep_Result);
	void CanMountLadder(class APAWN_SystemShockCharacter_C* Character, bool IsMountingFromTop, bool* Result);
	void IsCharacterBusy(class APAWN_SystemShockCharacter_C* Character, bool* Result);
	void GetRungLocationFromIndex(int32 RungIndex, struct FVector* Result);
	void GetBestMountRungIndex(class APAWN_SystemShockCharacter_C* Character, int32* Rung_index);
	void FinishMounting(class UMOVECONTROL_Base_C* MoveControl);
	void FinishClimbing(class UMOVECONTROL_Base_C* MoveControl);
	void GetFallingMountTime(float Speed, float Height, float Gravity, float* Time);
	void GenerateLadderMeshes();
	void DestroyRungMeshComponents();
	void FinishInteracting(class APAWN_Hacker_Simple_C* Player);
	void ResumeChannelingInteraction(class APAWN_Hacker_Simple_C* HackerPawn);
	void GetMountHeightOffset(float* Result);
	void GetClimbSpeed(bool IsFastClimbing, float* Result);
	void GetRungTraversalTime(bool IsFastClimbing, float* Result);
	void GetJumpDismountSpeed(float* Result);
	void GetTargetShape(class UPrimitiveComponent* CursorPrimitive, class UShapeComponent** ShapeComponent);
	void StopChanneling(class AActor* NewChannelingInteract, bool* Result);
	void TryInteract(class AActor* SourceActor, class UPrimitiveComponent* CursorPrimitive, ENUM_InteractionType InteractionType, struct FSTRUCT_InteractResults* InteractResults);

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"INTERACT_Ladder_C">();
	}
	static class AINTERACT_Ladder_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<AINTERACT_Ladder_C>();
	}
};
static_assert(alignof(AINTERACT_Ladder_C) == 0x000008, "Wrong alignment on AINTERACT_Ladder_C");
static_assert(sizeof(AINTERACT_Ladder_C) == 0x000428, "Wrong size on AINTERACT_Ladder_C");
static_assert(offsetof(AINTERACT_Ladder_C, UberGraphFrame_INTERACT_Ladder_C) == 0x000350, "Member 'AINTERACT_Ladder_C::UberGraphFrame_INTERACT_Ladder_C' has a wrong offset!");
static_assert(offsetof(AINTERACT_Ladder_C, TopDismountNode) == 0x000358, "Member 'AINTERACT_Ladder_C::TopDismountNode' has a wrong offset!");
static_assert(offsetof(AINTERACT_Ladder_C, BotDismountNode) == 0x000360, "Member 'AINTERACT_Ladder_C::BotDismountNode' has a wrong offset!");
static_assert(offsetof(AINTERACT_Ladder_C, GrabVolume) == 0x000368, "Member 'AINTERACT_Ladder_C::GrabVolume' has a wrong offset!");
static_assert(offsetof(AINTERACT_Ladder_C, TopMountNode) == 0x000370, "Member 'AINTERACT_Ladder_C::TopMountNode' has a wrong offset!");
static_assert(offsetof(AINTERACT_Ladder_C, BotMountNode) == 0x000378, "Member 'AINTERACT_Ladder_C::BotMountNode' has a wrong offset!");
static_assert(offsetof(AINTERACT_Ladder_C, IsLadderActive) == 0x000380, "Member 'AINTERACT_Ladder_C::IsLadderActive' has a wrong offset!");
static_assert(offsetof(AINTERACT_Ladder_C, ClimbApproachAngle) == 0x000384, "Member 'AINTERACT_Ladder_C::ClimbApproachAngle' has a wrong offset!");
static_assert(offsetof(AINTERACT_Ladder_C, RungSeparation) == 0x000388, "Member 'AINTERACT_Ladder_C::RungSeparation' has a wrong offset!");
static_assert(offsetof(AINTERACT_Ladder_C, TraversableRungs) == 0x00038C, "Member 'AINTERACT_Ladder_C::TraversableRungs' has a wrong offset!");
static_assert(offsetof(AINTERACT_Ladder_C, SlowRungTraversalTime) == 0x000390, "Member 'AINTERACT_Ladder_C::SlowRungTraversalTime' has a wrong offset!");
static_assert(offsetof(AINTERACT_Ladder_C, SlowClimbSpeed) == 0x000394, "Member 'AINTERACT_Ladder_C::SlowClimbSpeed' has a wrong offset!");
static_assert(offsetof(AINTERACT_Ladder_C, FastClimbSpeed) == 0x000398, "Member 'AINTERACT_Ladder_C::FastClimbSpeed' has a wrong offset!");
static_assert(offsetof(AINTERACT_Ladder_C, DismountSpeed) == 0x00039C, "Member 'AINTERACT_Ladder_C::DismountSpeed' has a wrong offset!");
static_assert(offsetof(AINTERACT_Ladder_C, SlowMountSpeed) == 0x0003A0, "Member 'AINTERACT_Ladder_C::SlowMountSpeed' has a wrong offset!");
static_assert(offsetof(AINTERACT_Ladder_C, FastMountSpeed) == 0x0003A4, "Member 'AINTERACT_Ladder_C::FastMountSpeed' has a wrong offset!");
static_assert(offsetof(AINTERACT_Ladder_C, MountHeightOffset) == 0x0003A8, "Member 'AINTERACT_Ladder_C::MountHeightOffset' has a wrong offset!");
static_assert(offsetof(AINTERACT_Ladder_C, MountMaxFallSpeed) == 0x0003AC, "Member 'AINTERACT_Ladder_C::MountMaxFallSpeed' has a wrong offset!");
static_assert(offsetof(AINTERACT_Ladder_C, JumpDismountSpeed) == 0x0003B0, "Member 'AINTERACT_Ladder_C::JumpDismountSpeed' has a wrong offset!");
static_assert(offsetof(AINTERACT_Ladder_C, RungCount) == 0x0003B4, "Member 'AINTERACT_Ladder_C::RungCount' has a wrong offset!");
static_assert(offsetof(AINTERACT_Ladder_C, RungHeight) == 0x0003B8, "Member 'AINTERACT_Ladder_C::RungHeight' has a wrong offset!");
static_assert(offsetof(AINTERACT_Ladder_C, RungRotation) == 0x0003BC, "Member 'AINTERACT_Ladder_C::RungRotation' has a wrong offset!");
static_assert(offsetof(AINTERACT_Ladder_C, RungBottomMesh) == 0x0003C8, "Member 'AINTERACT_Ladder_C::RungBottomMesh' has a wrong offset!");
static_assert(offsetof(AINTERACT_Ladder_C, RungMiddleMesh) == 0x0003D0, "Member 'AINTERACT_Ladder_C::RungMiddleMesh' has a wrong offset!");
static_assert(offsetof(AINTERACT_Ladder_C, RungTopMesh) == 0x0003D8, "Member 'AINTERACT_Ladder_C::RungTopMesh' has a wrong offset!");
static_assert(offsetof(AINTERACT_Ladder_C, BottomMiddleTopHeightOffsets) == 0x0003E0, "Member 'AINTERACT_Ladder_C::BottomMiddleTopHeightOffsets' has a wrong offset!");
static_assert(offsetof(AINTERACT_Ladder_C, RungForwardOffset) == 0x0003EC, "Member 'AINTERACT_Ladder_C::RungForwardOffset' has a wrong offset!");
static_assert(offsetof(AINTERACT_Ladder_C, BottomMountOffset) == 0x0003F0, "Member 'AINTERACT_Ladder_C::BottomMountOffset' has a wrong offset!");
static_assert(offsetof(AINTERACT_Ladder_C, BottomDismountOffset) == 0x0003FC, "Member 'AINTERACT_Ladder_C::BottomDismountOffset' has a wrong offset!");
static_assert(offsetof(AINTERACT_Ladder_C, TopMountOffset) == 0x000408, "Member 'AINTERACT_Ladder_C::TopMountOffset' has a wrong offset!");
static_assert(offsetof(AINTERACT_Ladder_C, TopDismountOffset) == 0x000414, "Member 'AINTERACT_Ladder_C::TopDismountOffset' has a wrong offset!");
static_assert(offsetof(AINTERACT_Ladder_C, TriggerLengthOffset) == 0x000420, "Member 'AINTERACT_Ladder_C::TriggerLengthOffset' has a wrong offset!");
static_assert(offsetof(AINTERACT_Ladder_C, FastRungTraversalTime) == 0x000424, "Member 'AINTERACT_Ladder_C::FastRungTraversalTime' has a wrong offset!");

}

