#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: Skill

#include "Basic.hpp"

#include "Skill_classes.hpp"
#include "Skill_parameters.hpp"


namespace SDK
{

// Function Skill.Skill_C.SkillActivated__DelegateSignature
// (Public, Delegate, BlueprintCallable, BlueprintEvent)
// Parameters:
// class USkill_C*                         Skill                                                  (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void USkill_C::SkillActivated__DelegateSignature(class USkill_C* Skill)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("Skill_C", "SkillActivated__DelegateSignature");

	Params::Skill_C_SkillActivated__DelegateSignature Parms{};

	Parms.Skill = Skill;

	UObject::ProcessEvent(Func, &Parms);
}


// Function Skill.Skill_C.SkillDeactivated__DelegateSignature
// (Public, Delegate, BlueprintCallable, BlueprintEvent)
// Parameters:
// class USkill_C*                         Skill                                                  (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void USkill_C::SkillDeactivated__DelegateSignature(class USkill_C* Skill)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("Skill_C", "SkillDeactivated__DelegateSignature");

	Params::Skill_C_SkillDeactivated__DelegateSignature Parms{};

	Parms.Skill = Skill;

	UObject::ProcessEvent(Func, &Parms);
}


// Function Skill.Skill_C.InitializeSkill
// (Public, BlueprintCallable, BlueprintEvent)

void USkill_C::InitializeSkill()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("Skill_C", "InitializeSkill");

	UObject::ProcessEvent(Func, nullptr);
}


// Function Skill.Skill_C.TryUseSkill
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// class UCharacterAction_C*               Result                                                 (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void USkill_C::TryUseSkill(class UCharacterAction_C** Result)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("Skill_C", "TryUseSkill");

	Params::Skill_C_TryUseSkill Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (Result != nullptr)
		*Result = Parms.Result;
}


// Function Skill.Skill_C.ForceUseSkill
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// class UCharacterAction_C*               Result                                                 (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void USkill_C::ForceUseSkill(class UCharacterAction_C** Result)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("Skill_C", "ForceUseSkill");

	Params::Skill_C_ForceUseSkill Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (Result != nullptr)
		*Result = Parms.Result;
}


// Function Skill.Skill_C.ForceDeactivateSkill
// (Public, BlueprintCallable, BlueprintEvent)

void USkill_C::ForceDeactivateSkill()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("Skill_C", "ForceDeactivateSkill");

	UObject::ProcessEvent(Func, nullptr);
}


// Function Skill.Skill_C.OnActivateSkill
// (Protected, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    Result                                                 (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void USkill_C::OnActivateSkill(bool* Result)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("Skill_C", "OnActivateSkill");

	Params::Skill_C_OnActivateSkill Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (Result != nullptr)
		*Result = Parms.Result;
}


// Function Skill.Skill_C.OnDeactivateSkill
// (Protected, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    Result                                                 (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void USkill_C::OnDeactivateSkill(bool* Result)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("Skill_C", "OnDeactivateSkill");

	Params::Skill_C_OnDeactivateSkill Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (Result != nullptr)
		*Result = Parms.Result;
}


// Function Skill.Skill_C.IsSkillActivated
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// bool                                    Result                                                 (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void USkill_C::IsSkillActivated(bool* Result)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("Skill_C", "IsSkillActivated");

	Params::Skill_C_IsSkillActivated Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (Result != nullptr)
		*Result = Parms.Result;
}


// Function Skill.Skill_C.GetSkillManager
// (Protected, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// class UCOMP_SkillManager_C*             SkillManager                                           (Parm, OutParm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void USkill_C::GetSkillManager(class UCOMP_SkillManager_C** SkillManager)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("Skill_C", "GetSkillManager");

	Params::Skill_C_GetSkillManager Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (SkillManager != nullptr)
		*SkillManager = Parms.SkillManager;
}


// Function Skill.Skill_C.GetSkillPawn
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// class APAWN_Enemy_C*                    SkillPawn                                              (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void USkill_C::GetSkillPawn(class APAWN_Enemy_C** SkillPawn)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("Skill_C", "GetSkillPawn");

	Params::Skill_C_GetSkillPawn Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (SkillPawn != nullptr)
		*SkillPawn = Parms.SkillPawn;
}


// Function Skill.Skill_C.CanUseSkill
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// bool                                    Result                                                 (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void USkill_C::CanUseSkill(bool* Result)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("Skill_C", "CanUseSkill");

	Params::Skill_C_CanUseSkill Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (Result != nullptr)
		*Result = Parms.Result;
}


// Function Skill.Skill_C.IsMontageOptional
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// bool                                    Result                                                 (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void USkill_C::IsMontageOptional(bool* Result)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("Skill_C", "IsMontageOptional");

	Params::Skill_C_IsMontageOptional Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (Result != nullptr)
		*Result = Parms.Result;
}


// Function Skill.Skill_C.EVENT_OnActionFinished
// (Protected, BlueprintCallable, BlueprintEvent)

void USkill_C::EVENT_OnActionFinished()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("Skill_C", "EVENT_OnActionFinished");

	UObject::ProcessEvent(Func, nullptr);
}


// Function Skill.Skill_C.ReceiveAnimationMessage
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// class FString                           Message                                                (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, HasGetValueTypeHash)
// bool                                    Result                                                 (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void USkill_C::ReceiveAnimationMessage(const class FString& Message, bool* Result)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("Skill_C", "ReceiveAnimationMessage");

	Params::Skill_C_ReceiveAnimationMessage Parms{};

	Parms.Message = std::move(Message);

	UObject::ProcessEvent(Func, &Parms);

	if (Result != nullptr)
		*Result = Parms.Result;
}


// Function Skill.Skill_C.GetAngleToTarget
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// float                                   AngleToTarget                                          (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void USkill_C::GetAngleToTarget(float* AngleToTarget)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("Skill_C", "GetAngleToTarget");

	Params::Skill_C_GetAngleToTarget Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (AngleToTarget != nullptr)
		*AngleToTarget = Parms.AngleToTarget;
}


// Function Skill.Skill_C.GetSkillTargetLocations
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// TArray<struct FVector>                  Locations                                              (Parm, OutParm)

void USkill_C::GetSkillTargetLocations(TArray<struct FVector>* Locations)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("Skill_C", "GetSkillTargetLocations");

	Params::Skill_C_GetSkillTargetLocations Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (Locations != nullptr)
		*Locations = std::move(Parms.Locations);
}


// Function Skill.Skill_C.GetPredictedTargetLocation
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// float                                   TimeInFuture                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FVector                          PredictedLocation                                      (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void USkill_C::GetPredictedTargetLocation(float TimeInFuture, struct FVector* PredictedLocation)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("Skill_C", "GetPredictedTargetLocation");

	Params::Skill_C_GetPredictedTargetLocation Parms{};

	Parms.TimeInFuture = TimeInFuture;

	UObject::ProcessEvent(Func, &Parms);

	if (PredictedLocation != nullptr)
		*PredictedLocation = std::move(Parms.PredictedLocation);
}

}

