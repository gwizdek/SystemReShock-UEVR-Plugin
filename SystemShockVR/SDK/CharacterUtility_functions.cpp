#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: CharacterUtility

#include "Basic.hpp"

#include "CharacterUtility_classes.hpp"
#include "CharacterUtility_parameters.hpp"


namespace SDK
{

// Function CharacterUtility.CharacterUtility_C.GetDistanceToMoveLocation
// (Static, Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// class APAWN_Enemy_C*                    EnemyPawn                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class UObject*                          __WorldContext                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// float                                   Distance                                               (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UCharacterUtility_C::GetDistanceToMoveLocation(class APAWN_Enemy_C* EnemyPawn, class UObject* __WorldContext, float* Distance)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("CharacterUtility_C", "GetDistanceToMoveLocation");

	Params::CharacterUtility_C_GetDistanceToMoveLocation Parms{};

	Parms.EnemyPawn = EnemyPawn;
	Parms.__WorldContext = __WorldContext;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	if (Distance != nullptr)
		*Distance = Parms.Distance;
}


// Function CharacterUtility.CharacterUtility_C.IsCharacterLookingAt
// (Static, Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// class FName                             HeadSocketName                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class USkeletalMeshComponent*           CharacterMesh                                          (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FVector                          TargetLocation                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// ENUM_Axis                               ForwardAxis                                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    ForwardIsNegative                                      (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// float                                   AcceptableAngle                                        (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class UObject*                          __WorldContext                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    IsLookingAt                                            (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void UCharacterUtility_C::IsCharacterLookingAt(class FName HeadSocketName, class USkeletalMeshComponent* CharacterMesh, const struct FVector& TargetLocation, ENUM_Axis ForwardAxis, bool ForwardIsNegative, float AcceptableAngle, class UObject* __WorldContext, bool* IsLookingAt)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("CharacterUtility_C", "IsCharacterLookingAt");

	Params::CharacterUtility_C_IsCharacterLookingAt Parms{};

	Parms.HeadSocketName = HeadSocketName;
	Parms.CharacterMesh = CharacterMesh;
	Parms.TargetLocation = std::move(TargetLocation);
	Parms.ForwardAxis = ForwardAxis;
	Parms.ForwardIsNegative = ForwardIsNegative;
	Parms.AcceptableAngle = AcceptableAngle;
	Parms.__WorldContext = __WorldContext;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	if (IsLookingAt != nullptr)
		*IsLookingAt = Parms.IsLookingAt;
}


// Function CharacterUtility.CharacterUtility_C.GetScaledRoundedHealthValue
// (Static, Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// int32                                   BaseHealth                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// int32                                   ScalePercentage                                        (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// int32                                   RoundTo                                                (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class UObject*                          __WorldContext                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// int32                                   Result                                                 (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UCharacterUtility_C::GetScaledRoundedHealthValue(int32 BaseHealth, int32 ScalePercentage, int32 RoundTo, class UObject* __WorldContext, int32* Result)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("CharacterUtility_C", "GetScaledRoundedHealthValue");

	Params::CharacterUtility_C_GetScaledRoundedHealthValue Parms{};

	Parms.BaseHealth = BaseHealth;
	Parms.ScalePercentage = ScalePercentage;
	Parms.RoundTo = RoundTo;
	Parms.__WorldContext = __WorldContext;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	if (Result != nullptr)
		*Result = Parms.Result;
}

}

