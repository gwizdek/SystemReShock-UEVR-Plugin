#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: ANIMBP_Sparqbeam

#include "Basic.hpp"

#include "CoreUObject_structs.hpp"
#include "Engine_structs.hpp"


namespace SDK::Params
{

// Function ANIMBP_Sparqbeam.ANIMBP_Sparqbeam_C.SetHeatPercentage
// 0x0008 (0x0008 - 0x0000)
struct ANIMBP_Sparqbeam_C_SetHeatPercentage final
{
public:
	float                                         HeatPercentage;                                    // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Result;                                            // 0x0004(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(ANIMBP_Sparqbeam_C_SetHeatPercentage) == 0x000004, "Wrong alignment on ANIMBP_Sparqbeam_C_SetHeatPercentage");
static_assert(sizeof(ANIMBP_Sparqbeam_C_SetHeatPercentage) == 0x000008, "Wrong size on ANIMBP_Sparqbeam_C_SetHeatPercentage");
static_assert(offsetof(ANIMBP_Sparqbeam_C_SetHeatPercentage, HeatPercentage) == 0x000000, "Member 'ANIMBP_Sparqbeam_C_SetHeatPercentage::HeatPercentage' has a wrong offset!");
static_assert(offsetof(ANIMBP_Sparqbeam_C_SetHeatPercentage, Result) == 0x000004, "Member 'ANIMBP_Sparqbeam_C_SetHeatPercentage::Result' has a wrong offset!");

// Function ANIMBP_Sparqbeam.ANIMBP_Sparqbeam_C.SetTimeSinceFired
// 0x0008 (0x0008 - 0x0000)
struct ANIMBP_Sparqbeam_C_SetTimeSinceFired final
{
public:
	float                                         TimeSinceFired;                                    // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Result;                                            // 0x0004(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(ANIMBP_Sparqbeam_C_SetTimeSinceFired) == 0x000004, "Wrong alignment on ANIMBP_Sparqbeam_C_SetTimeSinceFired");
static_assert(sizeof(ANIMBP_Sparqbeam_C_SetTimeSinceFired) == 0x000008, "Wrong size on ANIMBP_Sparqbeam_C_SetTimeSinceFired");
static_assert(offsetof(ANIMBP_Sparqbeam_C_SetTimeSinceFired, TimeSinceFired) == 0x000000, "Member 'ANIMBP_Sparqbeam_C_SetTimeSinceFired::TimeSinceFired' has a wrong offset!");
static_assert(offsetof(ANIMBP_Sparqbeam_C_SetTimeSinceFired, Result) == 0x000004, "Member 'ANIMBP_Sparqbeam_C_SetTimeSinceFired::Result' has a wrong offset!");

// Function ANIMBP_Sparqbeam.ANIMBP_Sparqbeam_C.SetChargeValue
// 0x0008 (0x0008 - 0x0000)
struct ANIMBP_Sparqbeam_C_SetChargeValue final
{
public:
	float                                         NormalisedChargeValue;                             // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Result;                                            // 0x0004(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(ANIMBP_Sparqbeam_C_SetChargeValue) == 0x000004, "Wrong alignment on ANIMBP_Sparqbeam_C_SetChargeValue");
static_assert(sizeof(ANIMBP_Sparqbeam_C_SetChargeValue) == 0x000008, "Wrong size on ANIMBP_Sparqbeam_C_SetChargeValue");
static_assert(offsetof(ANIMBP_Sparqbeam_C_SetChargeValue, NormalisedChargeValue) == 0x000000, "Member 'ANIMBP_Sparqbeam_C_SetChargeValue::NormalisedChargeValue' has a wrong offset!");
static_assert(offsetof(ANIMBP_Sparqbeam_C_SetChargeValue, Result) == 0x000004, "Member 'ANIMBP_Sparqbeam_C_SetChargeValue::Result' has a wrong offset!");

// Function ANIMBP_Sparqbeam.ANIMBP_Sparqbeam_C.SetChargeMode
// 0x0028 (0x0028 - 0x0000)
struct ANIMBP_Sparqbeam_C_SetChargeMode final
{
public:
	int32                                         ModeIndex;                                         // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Result;                                            // 0x0004(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Temp_int_Variable;                                 // 0x0008(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Temp_float_Variable;                               // 0x000C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Temp_float_Variable_1;                             // 0x0010(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Temp_float_Variable_2;                             // 0x0014(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         K2Node_Select_Default;                             // 0x0018(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               CallFunc_MakeRotator_ReturnValue;                  // 0x001C(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(ANIMBP_Sparqbeam_C_SetChargeMode) == 0x000004, "Wrong alignment on ANIMBP_Sparqbeam_C_SetChargeMode");
static_assert(sizeof(ANIMBP_Sparqbeam_C_SetChargeMode) == 0x000028, "Wrong size on ANIMBP_Sparqbeam_C_SetChargeMode");
static_assert(offsetof(ANIMBP_Sparqbeam_C_SetChargeMode, ModeIndex) == 0x000000, "Member 'ANIMBP_Sparqbeam_C_SetChargeMode::ModeIndex' has a wrong offset!");
static_assert(offsetof(ANIMBP_Sparqbeam_C_SetChargeMode, Result) == 0x000004, "Member 'ANIMBP_Sparqbeam_C_SetChargeMode::Result' has a wrong offset!");
static_assert(offsetof(ANIMBP_Sparqbeam_C_SetChargeMode, Temp_int_Variable) == 0x000008, "Member 'ANIMBP_Sparqbeam_C_SetChargeMode::Temp_int_Variable' has a wrong offset!");
static_assert(offsetof(ANIMBP_Sparqbeam_C_SetChargeMode, Temp_float_Variable) == 0x00000C, "Member 'ANIMBP_Sparqbeam_C_SetChargeMode::Temp_float_Variable' has a wrong offset!");
static_assert(offsetof(ANIMBP_Sparqbeam_C_SetChargeMode, Temp_float_Variable_1) == 0x000010, "Member 'ANIMBP_Sparqbeam_C_SetChargeMode::Temp_float_Variable_1' has a wrong offset!");
static_assert(offsetof(ANIMBP_Sparqbeam_C_SetChargeMode, Temp_float_Variable_2) == 0x000014, "Member 'ANIMBP_Sparqbeam_C_SetChargeMode::Temp_float_Variable_2' has a wrong offset!");
static_assert(offsetof(ANIMBP_Sparqbeam_C_SetChargeMode, K2Node_Select_Default) == 0x000018, "Member 'ANIMBP_Sparqbeam_C_SetChargeMode::K2Node_Select_Default' has a wrong offset!");
static_assert(offsetof(ANIMBP_Sparqbeam_C_SetChargeMode, CallFunc_MakeRotator_ReturnValue) == 0x00001C, "Member 'ANIMBP_Sparqbeam_C_SetChargeMode::CallFunc_MakeRotator_ReturnValue' has a wrong offset!");

// Function ANIMBP_Sparqbeam.ANIMBP_Sparqbeam_C.AnimGraph
// 0x0010 (0x0010 - 0x0000)
struct ANIMBP_Sparqbeam_C_AnimGraph final
{
public:
	struct FPoseLink                              AnimGraph_0;                                       // 0x0000(0x0010)(Parm, OutParm, NoDestructor)
};
static_assert(alignof(ANIMBP_Sparqbeam_C_AnimGraph) == 0x000008, "Wrong alignment on ANIMBP_Sparqbeam_C_AnimGraph");
static_assert(sizeof(ANIMBP_Sparqbeam_C_AnimGraph) == 0x000010, "Wrong size on ANIMBP_Sparqbeam_C_AnimGraph");
static_assert(offsetof(ANIMBP_Sparqbeam_C_AnimGraph, AnimGraph_0) == 0x000000, "Member 'ANIMBP_Sparqbeam_C_AnimGraph::AnimGraph_0' has a wrong offset!");

// Function ANIMBP_Sparqbeam.ANIMBP_Sparqbeam_C.ExecuteUbergraph_ANIMBP_Sparqbeam
// 0x0004 (0x0004 - 0x0000)
struct ANIMBP_Sparqbeam_C_ExecuteUbergraph_ANIMBP_Sparqbeam final
{
public:
	int32                                         EntryPoint;                                        // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(ANIMBP_Sparqbeam_C_ExecuteUbergraph_ANIMBP_Sparqbeam) == 0x000004, "Wrong alignment on ANIMBP_Sparqbeam_C_ExecuteUbergraph_ANIMBP_Sparqbeam");
static_assert(sizeof(ANIMBP_Sparqbeam_C_ExecuteUbergraph_ANIMBP_Sparqbeam) == 0x000004, "Wrong size on ANIMBP_Sparqbeam_C_ExecuteUbergraph_ANIMBP_Sparqbeam");
static_assert(offsetof(ANIMBP_Sparqbeam_C_ExecuteUbergraph_ANIMBP_Sparqbeam, EntryPoint) == 0x000000, "Member 'ANIMBP_Sparqbeam_C_ExecuteUbergraph_ANIMBP_Sparqbeam::EntryPoint' has a wrong offset!");

}

