#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: ACTOR_Saturn

#include "Basic.hpp"

#include "CoreUObject_structs.hpp"
#include "Engine_structs.hpp"
#include "Engine_classes.hpp"


namespace SDK
{

// BlueprintGeneratedClass ACTOR_Saturn.ACTOR_Saturn_C
// 0x0158 (0x0378 - 0x0220)
class AACTOR_Saturn_C final : public AActor
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x0220(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	class UCOMP_ExteriorCullable_C*               COMP_ExteriorCullable;                             // 0x0228(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UStaticMeshComponent*                   RingsMesh4;                                        // 0x0230(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UStaticMeshComponent*                   RingsMesh3;                                        // 0x0238(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UStaticMeshComponent*                   RingsMesh2;                                        // 0x0240(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UStaticMeshComponent*                   RingsMesh1;                                        // 0x0248(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UStaticMeshComponent*                   AtmosphereMesh;                                    // 0x0250(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UStaticMeshComponent*                   SaturnMesh;                                        // 0x0258(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USceneComponent*                        DefaultSceneRoot;                                  // 0x0260(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	float                                         SaturnRadius;                                      // 0x0268(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         AtmosphereHeight;                                  // 0x026C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         AtmosphereIntensity;                               // 0x0270(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         RingsInnerRadius;                                  // 0x0274(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         RingsOuterRadius;                                  // 0x0278(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         RayleighHeight;                                    // 0x027C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           RayleighColor;                                     // 0x0280(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           SunRadiance;                                       // 0x0290(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           SunRadiance_Saturn;                                // 0x02A0(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                SunDirection;                                      // 0x02B0(0x000C)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         SunDistanceFromOrigin;                             // 0x02BC(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         SunIntensityScale;                                 // 0x02C0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         SunRotationSpeed;                                  // 0x02C4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         SaturnRotationSpeed;                               // 0x02C8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                SaturnOrbitCenter;                                 // 0x02CC(0x000C)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          EnableCulling;                                     // 0x02D8(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_2D9[0x7];                                      // 0x02D9(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class ADirectionalLight*                      SunLight;                                          // 0x02E0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class ANiagaraActor*                          SunLensFlare;                                      // 0x02E8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AStaticMeshActor*                       StarfieldActor;                                    // 0x02F0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               InitialSunRotation;                                // 0x02F8(0x000C)(Edit, BlueprintVisible, ZeroConstructor, Transient, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	struct FVector                                SunRotationAxis;                                   // 0x0304(0x000C)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                SaturnRotationAxisX;                               // 0x0310(0x000C)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                SaturnRotationAxisY;                               // 0x031C(0x000C)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                SaturnRotationNormal;                              // 0x0328(0x000C)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         SaturnOrbitRadius;                                 // 0x0334(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         RingPermeabilityResolution;                        // 0x0338(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         RingDensityMaxOffsetRatio;                         // 0x033C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UMaterialInstanceDynamic*               DynamicSaturnMaterial;                             // 0x0340(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UMaterialInstanceDynamic*               DynamicAtmosphereMaterial;                         // 0x0348(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UMaterialInstanceDynamic*               DynamicRingsMaterial;                              // 0x0350(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UMaterialInstanceDynamic*               DynamicRingDensityMaterial;                        // 0x0358(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UTexture2D*                             RingsTexture;                                      // 0x0360(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UTexture2D*                             RingDensityTexture;                                // 0x0368(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UTextureRenderTarget2D*                 RingDensityRenderTarget;                           // 0x0370(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

public:
	void ExecuteUbergraph_ACTOR_Saturn(int32 EntryPoint);
	void ReceiveTick(float DeltaSeconds);
	void BndEvt__ACTOR_Saturn_COMP_ExteriorCullable_K2Node_ComponentBoundEvent_0_CullableVisibilitySignature__DelegateSignature(bool bVisibleState);
	void ReceiveBeginPlay();
	void UserConstructionScript();
	void UpdateSunMaterialParameters(class UMaterialInstanceDynamic* Material);
	void InitializeMeshMaterials();
	void UpdateSunSettings();
	void UpdateMeshes();
	void UpdateAtmosphereSIze();
	void UpdateAtmosphere();
	void GetScaledSaturnRadius(float* Result);
	void CreateRingPermeabilityTexture();
	void UpdatePlanetaryRotation();
	void InitializePlanetRotationParameters();
	void SetOuterspaceVisibleThroughWindows(bool VisibleState);
	void SetSunSettingsFromLevelAtmosphere();
	void UpdateSaturnVisibility(bool VisibilityState);
	void UpdateRingVisibility(bool VisibilityState);
	bool ShouldSaveActor(struct FStreamingSaveGameActorParams* Params_0);
	bool ReceivePendingBodyTransforms(class USkeletalMeshComponent* SkeletalMeshComponent, const TArray<struct FTransform>& BodyTransforms);
	bool ReceivePendingCharacterVelocity(const struct FVector& Velocity);

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"ACTOR_Saturn_C">();
	}
	static class AACTOR_Saturn_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<AACTOR_Saturn_C>();
	}
};
static_assert(alignof(AACTOR_Saturn_C) == 0x000008, "Wrong alignment on AACTOR_Saturn_C");
static_assert(sizeof(AACTOR_Saturn_C) == 0x000378, "Wrong size on AACTOR_Saturn_C");
static_assert(offsetof(AACTOR_Saturn_C, UberGraphFrame) == 0x000220, "Member 'AACTOR_Saturn_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(AACTOR_Saturn_C, COMP_ExteriorCullable) == 0x000228, "Member 'AACTOR_Saturn_C::COMP_ExteriorCullable' has a wrong offset!");
static_assert(offsetof(AACTOR_Saturn_C, RingsMesh4) == 0x000230, "Member 'AACTOR_Saturn_C::RingsMesh4' has a wrong offset!");
static_assert(offsetof(AACTOR_Saturn_C, RingsMesh3) == 0x000238, "Member 'AACTOR_Saturn_C::RingsMesh3' has a wrong offset!");
static_assert(offsetof(AACTOR_Saturn_C, RingsMesh2) == 0x000240, "Member 'AACTOR_Saturn_C::RingsMesh2' has a wrong offset!");
static_assert(offsetof(AACTOR_Saturn_C, RingsMesh1) == 0x000248, "Member 'AACTOR_Saturn_C::RingsMesh1' has a wrong offset!");
static_assert(offsetof(AACTOR_Saturn_C, AtmosphereMesh) == 0x000250, "Member 'AACTOR_Saturn_C::AtmosphereMesh' has a wrong offset!");
static_assert(offsetof(AACTOR_Saturn_C, SaturnMesh) == 0x000258, "Member 'AACTOR_Saturn_C::SaturnMesh' has a wrong offset!");
static_assert(offsetof(AACTOR_Saturn_C, DefaultSceneRoot) == 0x000260, "Member 'AACTOR_Saturn_C::DefaultSceneRoot' has a wrong offset!");
static_assert(offsetof(AACTOR_Saturn_C, SaturnRadius) == 0x000268, "Member 'AACTOR_Saturn_C::SaturnRadius' has a wrong offset!");
static_assert(offsetof(AACTOR_Saturn_C, AtmosphereHeight) == 0x00026C, "Member 'AACTOR_Saturn_C::AtmosphereHeight' has a wrong offset!");
static_assert(offsetof(AACTOR_Saturn_C, AtmosphereIntensity) == 0x000270, "Member 'AACTOR_Saturn_C::AtmosphereIntensity' has a wrong offset!");
static_assert(offsetof(AACTOR_Saturn_C, RingsInnerRadius) == 0x000274, "Member 'AACTOR_Saturn_C::RingsInnerRadius' has a wrong offset!");
static_assert(offsetof(AACTOR_Saturn_C, RingsOuterRadius) == 0x000278, "Member 'AACTOR_Saturn_C::RingsOuterRadius' has a wrong offset!");
static_assert(offsetof(AACTOR_Saturn_C, RayleighHeight) == 0x00027C, "Member 'AACTOR_Saturn_C::RayleighHeight' has a wrong offset!");
static_assert(offsetof(AACTOR_Saturn_C, RayleighColor) == 0x000280, "Member 'AACTOR_Saturn_C::RayleighColor' has a wrong offset!");
static_assert(offsetof(AACTOR_Saturn_C, SunRadiance) == 0x000290, "Member 'AACTOR_Saturn_C::SunRadiance' has a wrong offset!");
static_assert(offsetof(AACTOR_Saturn_C, SunRadiance_Saturn) == 0x0002A0, "Member 'AACTOR_Saturn_C::SunRadiance_Saturn' has a wrong offset!");
static_assert(offsetof(AACTOR_Saturn_C, SunDirection) == 0x0002B0, "Member 'AACTOR_Saturn_C::SunDirection' has a wrong offset!");
static_assert(offsetof(AACTOR_Saturn_C, SunDistanceFromOrigin) == 0x0002BC, "Member 'AACTOR_Saturn_C::SunDistanceFromOrigin' has a wrong offset!");
static_assert(offsetof(AACTOR_Saturn_C, SunIntensityScale) == 0x0002C0, "Member 'AACTOR_Saturn_C::SunIntensityScale' has a wrong offset!");
static_assert(offsetof(AACTOR_Saturn_C, SunRotationSpeed) == 0x0002C4, "Member 'AACTOR_Saturn_C::SunRotationSpeed' has a wrong offset!");
static_assert(offsetof(AACTOR_Saturn_C, SaturnRotationSpeed) == 0x0002C8, "Member 'AACTOR_Saturn_C::SaturnRotationSpeed' has a wrong offset!");
static_assert(offsetof(AACTOR_Saturn_C, SaturnOrbitCenter) == 0x0002CC, "Member 'AACTOR_Saturn_C::SaturnOrbitCenter' has a wrong offset!");
static_assert(offsetof(AACTOR_Saturn_C, EnableCulling) == 0x0002D8, "Member 'AACTOR_Saturn_C::EnableCulling' has a wrong offset!");
static_assert(offsetof(AACTOR_Saturn_C, SunLight) == 0x0002E0, "Member 'AACTOR_Saturn_C::SunLight' has a wrong offset!");
static_assert(offsetof(AACTOR_Saturn_C, SunLensFlare) == 0x0002E8, "Member 'AACTOR_Saturn_C::SunLensFlare' has a wrong offset!");
static_assert(offsetof(AACTOR_Saturn_C, StarfieldActor) == 0x0002F0, "Member 'AACTOR_Saturn_C::StarfieldActor' has a wrong offset!");
static_assert(offsetof(AACTOR_Saturn_C, InitialSunRotation) == 0x0002F8, "Member 'AACTOR_Saturn_C::InitialSunRotation' has a wrong offset!");
static_assert(offsetof(AACTOR_Saturn_C, SunRotationAxis) == 0x000304, "Member 'AACTOR_Saturn_C::SunRotationAxis' has a wrong offset!");
static_assert(offsetof(AACTOR_Saturn_C, SaturnRotationAxisX) == 0x000310, "Member 'AACTOR_Saturn_C::SaturnRotationAxisX' has a wrong offset!");
static_assert(offsetof(AACTOR_Saturn_C, SaturnRotationAxisY) == 0x00031C, "Member 'AACTOR_Saturn_C::SaturnRotationAxisY' has a wrong offset!");
static_assert(offsetof(AACTOR_Saturn_C, SaturnRotationNormal) == 0x000328, "Member 'AACTOR_Saturn_C::SaturnRotationNormal' has a wrong offset!");
static_assert(offsetof(AACTOR_Saturn_C, SaturnOrbitRadius) == 0x000334, "Member 'AACTOR_Saturn_C::SaturnOrbitRadius' has a wrong offset!");
static_assert(offsetof(AACTOR_Saturn_C, RingPermeabilityResolution) == 0x000338, "Member 'AACTOR_Saturn_C::RingPermeabilityResolution' has a wrong offset!");
static_assert(offsetof(AACTOR_Saturn_C, RingDensityMaxOffsetRatio) == 0x00033C, "Member 'AACTOR_Saturn_C::RingDensityMaxOffsetRatio' has a wrong offset!");
static_assert(offsetof(AACTOR_Saturn_C, DynamicSaturnMaterial) == 0x000340, "Member 'AACTOR_Saturn_C::DynamicSaturnMaterial' has a wrong offset!");
static_assert(offsetof(AACTOR_Saturn_C, DynamicAtmosphereMaterial) == 0x000348, "Member 'AACTOR_Saturn_C::DynamicAtmosphereMaterial' has a wrong offset!");
static_assert(offsetof(AACTOR_Saturn_C, DynamicRingsMaterial) == 0x000350, "Member 'AACTOR_Saturn_C::DynamicRingsMaterial' has a wrong offset!");
static_assert(offsetof(AACTOR_Saturn_C, DynamicRingDensityMaterial) == 0x000358, "Member 'AACTOR_Saturn_C::DynamicRingDensityMaterial' has a wrong offset!");
static_assert(offsetof(AACTOR_Saturn_C, RingsTexture) == 0x000360, "Member 'AACTOR_Saturn_C::RingsTexture' has a wrong offset!");
static_assert(offsetof(AACTOR_Saturn_C, RingDensityTexture) == 0x000368, "Member 'AACTOR_Saturn_C::RingDensityTexture' has a wrong offset!");
static_assert(offsetof(AACTOR_Saturn_C, RingDensityRenderTarget) == 0x000370, "Member 'AACTOR_Saturn_C::RingDensityRenderTarget' has a wrong offset!");

}

