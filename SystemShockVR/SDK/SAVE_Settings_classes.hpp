#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: SAVE_Settings

#include "Basic.hpp"

#include "ENUM_InputCategory_structs.hpp"
#include "ENUM_OffLowMediumHigh_structs.hpp"
#include "ENUM_SmallMediumLarge_structs.hpp"
#include "DLSSBlueprint_structs.hpp"
#include "Engine_structs.hpp"
#include "Engine_classes.hpp"
#include "ENUM_HotbarStyle_structs.hpp"
#include "STRUCT_BoundInputActionPair_structs.hpp"
#include "CoreUObject_structs.hpp"
#include "ENUM_QualitySetting_structs.hpp"
#include "ENUM_OffReducedNormal_structs.hpp"


namespace SDK
{

// BlueprintGeneratedClass SAVE_Settings.SAVE_Settings_C
// 0x02B0 (0x02D8 - 0x0028)
class USAVE_Settings_C final : public USaveGame
{
public:
	ENUM_OffLowMediumHigh                         AmbientOcclusion;                                  // 0x0028(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, SaveGame, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_29[0x3];                                       // 0x0029(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   UserTint;                                          // 0x002C(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, SaveGame, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         RealspaceFOV;                                      // 0x0034(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, SaveGame, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CyberspaceFOV;                                     // 0x0038(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, SaveGame, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Volume_Master;                                     // 0x003C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, SaveGame, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Volume_Music;                                      // 0x0040(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, SaveGame, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Volume_Voice;                                      // 0x0044(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, SaveGame, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Volume_Effects;                                    // 0x0048(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, SaveGame, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Volume_Environment;                                // 0x004C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, SaveGame, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Volume_UI;                                         // 0x0050(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, SaveGame, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_54[0x4];                                       // 0x0054(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 Language;                                          // 0x0058(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, SaveGame, HasGetValueTypeHash)
	bool                                          SubtitlesEnabled;                                  // 0x0068(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, SaveGame, IsPlainOldData, NoDestructor)
	ENUM_SmallMediumLarge                         SubtitleSize;                                      // 0x0069(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, SaveGame, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          SoundEffectsCaptionsEnabled;                       // 0x006A(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, SaveGame, IsPlainOldData, NoDestructor)
	ENUM_SmallMediumLarge                         SoundEffectsCaptionsSize;                          // 0x006B(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, SaveGame, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         HudOpacity;                                        // 0x006C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, SaveGame, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         NormalizedHUDCurvature;                            // 0x0070(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, SaveGame, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         HudScale;                                          // 0x0074(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, SaveGame, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          AutoRotateMinimap;                                 // 0x0078(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, SaveGame, IsPlainOldData, NoDestructor)
	bool                                          AutoPlayMediaLogs;                                 // 0x0079(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, SaveGame, IsPlainOldData, NoDestructor)
	bool                                          ShowTutorials;                                     // 0x007A(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, SaveGame, IsPlainOldData, NoDestructor)
	bool                                          FocusOnPuzzles;                                    // 0x007B(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, SaveGame, IsPlainOldData, NoDestructor)
	bool                                          AutoSlotHotbar;                                    // 0x007C(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, SaveGame, IsPlainOldData, NoDestructor)
	bool                                          AutoReload;                                        // 0x007D(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, SaveGame, IsPlainOldData, NoDestructor)
	ENUM_HotbarStyle                              HotbarStyle;                                       // 0x007E(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, SaveGame, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          BatteryReload;                                     // 0x007F(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, SaveGame, IsPlainOldData, NoDestructor)
	float                                         ScanTextSpeed;                                     // 0x0080(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, SaveGame, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         RealspaceLookSensitivity;                          // 0x0084(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, SaveGame, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          RealspaceInvertY;                                  // 0x0088(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, SaveGame, IsPlainOldData, NoDestructor)
	uint8                                         Pad_89[0x3];                                       // 0x0089(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CyberspaceLookSensitivity;                         // 0x008C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, SaveGame, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CyberspaceInvertY;                                 // 0x0090(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, SaveGame, IsPlainOldData, NoDestructor)
	bool                                          MouseSmoothing;                                    // 0x0091(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, SaveGame, IsPlainOldData, NoDestructor)
	bool                                          CrouchToggle;                                      // 0x0092(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, SaveGame, IsPlainOldData, NoDestructor)
	bool                                          HasRunBenchmark;                                   // 0x0093(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, SaveGame, IsPlainOldData, NoDestructor)
	EUDLSSMode                                    DLSS;                                              // 0x0094(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_95[0x3];                                       // 0x0095(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class ACON_Hacker_C*                          HackerController;                                  // 0x0098(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, Transient, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class APAWN_Hacker_Simple_C*                  HackerPawn;                                        // 0x00A0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, Transient, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TScriptInterface<class IINTERF_HUD_C>         HackerHUD;                                         // 0x00A8(0x0010)(Edit, BlueprintVisible, ZeroConstructor, Transient, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	class UGI_SinglePlayer_C*                     SingleplayerGameInstance;                          // 0x00B8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, Transient, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         RealspaceBrightness;                               // 0x00C0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, SaveGame, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CyberspaceBrightness;                              // 0x00C4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, SaveGame, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EWindowMode                                   WindowMode;                                        // 0x00C8(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, SaveGame, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_C9[0x3];                                       // 0x00C9(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FIntPoint                              Resolution;                                        // 0x00CC(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, SaveGame, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         ResolutionScale;                                   // 0x00D4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, SaveGame, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          EnableHDR;                                         // 0x00D8(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, SaveGame, IsPlainOldData, NoDestructor)
	bool                                          MotionBlur;                                        // 0x00D9(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, SaveGame, IsPlainOldData, NoDestructor)
	bool                                          EnableVSync;                                       // 0x00DA(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, SaveGame, IsPlainOldData, NoDestructor)
	bool                                          AimAssist;                                         // 0x00DB(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, SaveGame, IsPlainOldData, NoDestructor)
	bool                                          FocusAimToggle;                                    // 0x00DC(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, SaveGame, IsPlainOldData, NoDestructor)
	uint8                                         Pad_DD[0x3];                                       // 0x00DD(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	TMap<class FName, struct FSTRUCT_BoundInputActionPair> RealspaceKeyActionMap;                             // 0x00E0(0x0050)(Edit, BlueprintVisible, DisableEditOnInstance)
	TMap<class FName, struct FSTRUCT_BoundInputActionPair> CyberspaceKeyActionMap;                            // 0x0130(0x0050)(Edit, BlueprintVisible, DisableEditOnInstance)
	TMap<class FName, struct FSTRUCT_BoundInputActionPair> MinigameKeyActionMap;                              // 0x0180(0x0050)(Edit, BlueprintVisible, DisableEditOnInstance)
	ENUM_QualitySetting                           FogQuality;                                        // 0x01D0(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, SaveGame, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ENUM_QualitySetting                           PostProccessingQuality;                            // 0x01D1(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, SaveGame, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ENUM_QualitySetting                           TextureQuality;                                    // 0x01D2(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, SaveGame, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ENUM_QualitySetting                           ShaderQuality;                                     // 0x01D3(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, SaveGame, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ENUM_QualitySetting                           ShadowQuality;                                     // 0x01D4(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, SaveGame, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ENUM_QualitySetting                           EffectsQuality;                                    // 0x01D5(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, SaveGame, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ENUM_QualitySetting                           FoliageQuality;                                    // 0x01D6(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, SaveGame, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ENUM_OffReducedNormal                         HeadBobAmount;                                     // 0x01D7(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, SaveGame, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ENUM_OffReducedNormal                         GoreAmount;                                        // 0x01D8(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, SaveGame, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          DismembermentEnabled;                              // 0x01D9(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, SaveGame, IsPlainOldData, NoDestructor)
	bool                                          ControllerVibrationEnabled;                        // 0x01DA(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, SaveGame, IsPlainOldData, NoDestructor)
	uint8                                         Pad_1DB[0x1];                                      // 0x01DB(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   HUDColorTheme;                                     // 0x01DC(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, SaveGame, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ENUM_SmallMediumLarge                         HUDTextSize;                                       // 0x01E4(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, SaveGame, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1E5[0x3];                                      // 0x01E5(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	TMap<class FName, struct FSTRUCT_BoundInputActionPair> GamepadRealspaceKeyActionMap;                      // 0x01E8(0x0050)(Edit, BlueprintVisible, DisableEditOnInstance)
	TMap<class FName, struct FSTRUCT_BoundInputActionPair> GamepadCyberspaceKeyActionMap;                     // 0x0238(0x0050)(Edit, BlueprintVisible, DisableEditOnInstance)
	TMap<class FName, struct FSTRUCT_BoundInputActionPair> GamepadMinigameKeyActionMap;                       // 0x0288(0x0050)(Edit, BlueprintVisible, DisableEditOnInstance)

public:
	void AreAllSettingsSaved(bool* IsDefault);
	void SetHUDCurvature(float NewValue);
	void GetHUDCurvature(float* Result);
	void InitializeSaveSettings(class ACON_Hacker_C* HackerCon, class UGI_SinglePlayer_C* SinglePlayer);
	void ApplyHUDCurvature(float NewValue);
	void SetMasterVolume(float NewValue);
	void GetMasterVolume(float* Result);
	void ApplyMasterVolume(float NewValue);
	void SetMusicVolume(float NewValue);
	void GetMusicVolume(float* Result);
	void ApplyMusicVolume(float NewValue);
	void SetVoiceVolume(float NewValue);
	void GetVoiceVolume(float* Result);
	void ApplyVoiceVolume(float NewValue);
	void SetEffectsVolume(float NewValue);
	void GetEffectsVolume(float* Result);
	void ApplyEffectsVolume(float NewValue);
	void SetEnvironmentVolume(float NewValue);
	void GetEnvironmentVolume(float* Volume);
	void ApplyEnvironmentVolume(float NewValue);
	void SetDefaultLanguage(const class FString& DefaultLanguage);
	void SetLanguage(const class FString& NewValue);
	void GetLanguage(class FString* Result);
	void ApplyLanguage(const class FString& NewValue);
	void SetUIVolume(float NewValue);
	void GetUIVolume(float* Result);
	void ApplyUIVolume(float NewValue);
	void SetDLSS(EUDLSSMode NewValue);
	void GetDLSS(EUDLSSMode* Result);
	void ApplyDLSS(EUDLSSMode NewValue);
	void SetSubtitlesEnabled(bool NewValue);
	void GetSubtitlesEnabled(bool* Result);
	void ApplySubtitlesEnabled(bool NewValue);
	void SetBrightness(float NewValue, bool IsRealspace);
	void GetBrightness(bool IsRealspace, float* Result);
	void GetGammaFromSpecificBrightness(class UCameraComponent* Camera, float Value, struct FVector4* Result);
	void GetDefaultGammaFromCurrentBrightness(struct FVector4* Result);
	void ApplyBrightness(float NewValue, bool IsRealspace);
	void SetWindowMode(EWindowMode NewValue);
	void GetWindowMode(EWindowMode* Result);
	void ApplyWindowMode(EWindowMode NewValue);
	void SetResolution(const struct FIntPoint& NewValue);
	void GetResolution(struct FIntPoint* Result);
	void ApplyResolution(const struct FIntPoint& NewValue);
	void SetResolutionScale(float NewValue);
	void GetResolutionScale(float* Result);
	void ApplyResolutionScale(float NewValue);
	void SetEnableHDR(bool NewValue);
	void GetEnableHDR(bool* Result);
	void ApplyEnableHDR(bool NewValue);
	void SetEnableMotionBlur(bool NewValue);
	void GetEnableMotionBlur(bool* Result);
	void ApplyEnableMotionBlur(bool NewValue);
	void SetFOV(float NewValue, bool IsRealspace);
	void GetFOV(bool IsRealspace, float* Result);
	void ApplyFOV(float NewValue, bool IsRealspace);
	void SetEnableVSync(bool NewValue);
	void GetEnableVSync(bool* Result);
	void ApplyEnableVSync(bool NewValue);
	void GetInputBindCountForCategory(ENUM_InputCategory InputCategory, bool IsGamepad, int32* Result);
	void GetInputKeyMapForCategory(ENUM_InputCategory InputCategory, bool IsGamepad, TMap<class FName, struct FSTRUCT_BoundInputActionPair>* Result);
	void GetDefaultBindPairForCategory(class FName InputAction, ENUM_InputCategory InputCategory, bool IsGamepad, struct FSTRUCT_BoundInputActionPair* Result);
	void ValidateAndFixInputBinds(const class FString& RealspacePrefix, const class FString& CyberspacePrefix, const class FString& MinigamePrefix);
	void BuildDefaultInputKeyMap(ENUM_InputCategory InputCategory, const class FString& InputActionPrefix, bool IsGamepad, TMap<class FName, struct FSTRUCT_BoundInputActionPair>* Result);
	void GetOrCreateInputKeyMapForCategory(ENUM_InputCategory InputCategory, const class FString& InputActionPrefix, bool IsGamepad, TMap<class FName, struct FSTRUCT_BoundInputActionPair>* Result, bool* IsDefault);
	void SetInputKeyMapForCategory(const TMap<class FName, struct FSTRUCT_BoundInputActionPair>& NewKeyMap, ENUM_InputCategory InputCategory, const class FString& InputActionPrefix, bool IsGamepad);
	void ApplySavedKeyActionsForCategory(ENUM_InputCategory InputCategory, const class FString& InputActionPrefix, bool IsGamepad);
	void SetAimAssist(bool NewValue);
	void GetAimAssist(bool* Result);
	void ApplyAimAssist(bool NewValue);
	void SetFocusAimToggle(bool NewValue);
	void GetFocusAimToggle(bool* Result);
	void ApplyFocusAimToggle(bool NewValue);
	void SetCrouchToggle(bool NewValue);
	void GetCrouchToggle(bool* Result);
	void ApplyCrouchToggle(bool NewValue);
	void SetAutoPlayMediaLogs(bool NewValue);
	void GetAutoPlayMediaLogs(bool* Result);
	void ApplyAutoPlayMediaLogs(bool NewValue);
	void SetAutoRotateMinimap(bool NewValue);
	void GetAutoRotateMinimap(bool* Result);
	void ApplyAutoRotateMinimap(bool NewValue);
	void SetShowTutorials(bool NewValue);
	void GetShowTutorials(bool* Result);
	void ApplyShowTutorials(bool NewValue);
	void SetFocusOnPuzzles(bool NewValue);
	void GetFocusOnPuzzles(bool* Result);
	void ApplyFocusOnPuzzles(bool NewValue);
	void SetAutoSlotHotbar(bool NewValue);
	void GetAutoSlotHotbar(bool* Result);
	void ApplyAutoSlotHotbar(bool NewValue);
	void SetAutoReload(bool NewValue);
	void GetAutoReload(bool* Result);
	void ApplyAutoReload(bool NewValue);
	void SetRealspaceLookSensitivity(float NewValue);
	void GetRealspaceLookSensitivity(float* Result);
	void ApplyRealspaceLookSensitivity(float NewValue);
	void SetRealspaceInvertY(bool NewValue);
	void GetRealspaceInvertY(bool* Result);
	void ApplyRealspaceInvertY(bool NewValue);
	void SetCyberspaceLookSensitivity(float NewValue);
	void GetCyberspaceLookSensitivity(float* Value);
	void ApplyCyberspaceLookSensitivity(float NewValue);
	void SetCyberspaceInvertY(bool NewValue);
	void GetCyberspaceInvertY(bool* Result);
	void ApplyCyberspaceInvertY(bool NewValue);
	void SetAmbientOcclusion(ENUM_OffLowMediumHigh NewValue);
	void GetAmbientOcclusion(ENUM_OffLowMediumHigh* Result);
	void ApplyAmbientOcclusion(ENUM_OffLowMediumHigh NewValue);
	void SetFogQuality(ENUM_QualitySetting NewValue);
	void GetFogQuality(ENUM_QualitySetting* Result);
	void ApplyFogQuality(ENUM_QualitySetting NewValue);
	void SetPostProccessingQuality(ENUM_QualitySetting NewValue);
	void GetPostProccessingQuality(ENUM_QualitySetting* Result);
	void ApplyPostProccessingQuality(ENUM_QualitySetting NewValue);
	void SetTextureQuality(ENUM_QualitySetting NewValue);
	void GetTextureQuality(ENUM_QualitySetting* Result);
	void ApplyTextureQuality(ENUM_QualitySetting NewValue);
	void SetShaderQuality(ENUM_QualitySetting NewValue);
	void GetShaderQuality(ENUM_QualitySetting* Result);
	void ApplyShaderQuality(ENUM_QualitySetting NewValue);
	void SetShadowQuality(ENUM_QualitySetting NewValue);
	void GetShadowQuality(ENUM_QualitySetting* Result);
	void ApplyShadowQuality(ENUM_QualitySetting NewValue);
	void SetEffectsQuality(ENUM_QualitySetting NewValue);
	void GetEffectsQuality(ENUM_QualitySetting* Result);
	void ApplyEffectsQuality(ENUM_QualitySetting NewValue);
	void SetFoliageQuality(ENUM_QualitySetting NewValue);
	void GetFoliageQuality(ENUM_QualitySetting* Result);
	void ApplyFoliageQuality(ENUM_QualitySetting NewValue);
	void SetHeadbobAmount(ENUM_OffReducedNormal NewValue);
	void GetHeadbobAmount(ENUM_OffReducedNormal* Result);
	void ApplyHeadbobAmount(ENUM_OffReducedNormal NewValue);
	void SetGoreAmount(ENUM_OffReducedNormal NewValue);
	void GetGoreAmount(ENUM_OffReducedNormal* Result);
	void ApplyGoreAmount(ENUM_OffReducedNormal NewValue);
	void SetDismembermentEnabled(bool NewValue);
	void GetDismembermentEnabled(bool* Result);
	void ApplyDismembermentEnabled(bool NewValue);
	void SetHUDOpacity(float NewValue);
	void GetHUDOpacity(float* Result);
	void ApplyHUDOpacity(float NewValue);
	void SetHotbarStyle(ENUM_HotbarStyle NewValue);
	void GetHotbarStyle(ENUM_HotbarStyle* Result);
	void ApplyHotbarStyle(ENUM_HotbarStyle NewValue);
	void SetSubtitleSize(ENUM_SmallMediumLarge NewValue);
	void GetSubtitleSize(ENUM_SmallMediumLarge* Result);
	void ApplySubtitleSize(ENUM_SmallMediumLarge NewValue);
	void SetSoundEffectCaptionsEnabled(bool NewValue);
	void GetSoundEffectCaptionsEnabled(bool* Result);
	void ApplySoundEffectCaptionsEnabled(bool NewValue);
	void SetSoundEffectCaptionsSize(ENUM_SmallMediumLarge NewValue);
	void GetSoundEffectCaptionsSize(ENUM_SmallMediumLarge* Result);
	void ApplySoundEffectCaptionsSize(ENUM_SmallMediumLarge NewValue);
	void SetHUDColorTheme(class FName NewValue);
	void GetHUDColorTheme(class FName* Result);
	void ApplyHUDColorTheme(class FName NewValue);
	void SetHUDTextSize(ENUM_SmallMediumLarge NewValue);
	void GetHUDTextSize(ENUM_SmallMediumLarge* Result);
	void ApplyHUDTextSize(ENUM_SmallMediumLarge NewValue);
	void InitializeSettingsForHacker(class APAWN_Hacker_Simple_C* PlayerPawn);
	void InitializeSettingsForPlayerHUD(TScriptInterface<class IINTERF_HUD_C> PlayerHUD);
	void GetMasterVolumeProfleValue(const class FString& Culture, const class FString& Platform, float* Result);
	void GetMusicVolumeProfleValue(const class FString& Culture, const class FString& Platform, float* Result);
	void GetVoiceVolumeProfleValue(const class FString& Culture, const class FString& Platform, float* Result);
	void GetEffectsVolumeProfleValue(const class FString& Culture, const class FString& Platform, float* Result);
	void GetEnvironmentVolumeProfleValue(const class FString& Culture, const class FString& Platform, float* Result);
	void GetAutoPlayMediaLogsProfileValue(const class FString& Culture, const class FString& Platform, bool* Result);
	void GetAutoRotateMinimapProfileValue(const class FString& Culture, const class FString& Platform, bool* Result);
	void GetShowTutorialsProfileValue(const class FString& Culture, const class FString& Platform, bool* Result);
	void GetFocusOnPuzzlesProfileValue(const class FString& Culture, const class FString& Platform, bool* Result);
	void GetAutoSlotHotbarProfileValue(const class FString& Culture, const class FString& Platform, bool* Result);
	void GetAutoReloadProfileValue(const class FString& Culture, const class FString& Platform, bool* Result);
	void GetAimAssistProfileValue(const class FString& Culture, const class FString& Platform, bool* Result);
	void GetFocusAimToggleProfileValue(const class FString& Culture, const class FString& Platform, bool* Result);
	void GetCrouchToggleProfileValue(const class FString& Culture, const class FString& Platform, bool* Result);
	void GetRealspaceLookSensitivityProfileValue(const class FString& Culture, const class FString& Platform, float* Result);
	void GetRealspaceInvertYProfileValue(const class FString& Culture, const class FString& Platform, bool* Result);
	void GetCyberspaceLookSensitivityProfileValue(const class FString& Culture, const class FString& Platform, float* Result);
	void GetCyberspaceInvertYProfileValue(const class FString& Culture, const class FString& Platform, bool* Result);
	void ApplyBrightnessForCharacter(float NewValue, class APAWN_SystemShockCharacter_C* Character);
	void GetBrightnessProfileValue(const class FString& Culture, const class FString& Platform, bool IsRealspace, float* Result);
	void GetWindowModeProfileValue(const class FString& Culture, const class FString& Platform, EWindowMode* Result);
	void GetResolutionProfileValue(const class FString& Culture, const class FString& Platform, struct FIntPoint* Result);
	void GetResolutionScaleProfileValue(const class FString& Culture, const class FString& Platform, float* Result);
	void GetEnableHDRProfileValue(const class FString& Culture, const class FString& Platform, bool* Result);
	void GetEnableMotionBlurProfileValue(const class FString& Culture, const class FString& Platform, bool* Result);
	void ApplyFOVForCharacter(float NewValue, class APAWN_SystemShockCharacter_C* Character);
	void GetFOVProfileValue(const class FString& Culture, const class FString& Platform, bool IsRealspace, float* Result);
	void GetEnableVSyncProfileValue(const class FString& Culture, const class FString& Platform, bool* Result);
	void GetDLSSProfileValue(const class FString& Culture, const class FString& Platform, EUDLSSMode* Result);
	void GetAmbientOcclusionProfileValue(const class FString& Culture, const class FString& Platform, ENUM_OffLowMediumHigh* Result);
	void GetFogQualityProfileValue(const class FString& Culture, const class FString& Platform, ENUM_QualitySetting* Result);
	void GetPostProccessingQualityProfileValue(const class FString& Culture, const class FString& Platform, ENUM_QualitySetting* Result);
	void GetTextureQualityProfileValue(const class FString& Culture, const class FString& Platform, ENUM_QualitySetting* Result);
	void GetShaderQualityProfileValue(const class FString& Culture, const class FString& Platform, ENUM_QualitySetting* Result);
	void GetShadowQualityProfileValue(const class FString& Culture, const class FString& Platform, ENUM_QualitySetting* Result);
	void GetEffectsQualityProfileValue(const class FString& Culture, const class FString& Platform, ENUM_QualitySetting* Result);
	void GetFoliageQualityProfileValue(const class FString& Culture, const class FString& Platform, ENUM_QualitySetting* Result);
	void GetUIVolumeProfleValue(const class FString& Culture, const class FString& Platform, float* Result);
	void GetHUDCurvatureProfleValue(const class FString& Culture, const class FString& Platform, float* Result);
	void GetSubtitlesEnabledProfleValue(const class FString& Culture, const class FString& Platform, bool* Result);
	void GetLanguageProfleValue(const class FString& Culture, const class FString& Platform, class FString* Result);
	void GetHeadbobAmountProfleValue(const class FString& Culture, const class FString& Platform, ENUM_OffReducedNormal* Result);
	void GetGoreAmountProfleValue(const class FString& Culture, const class FString& Platform, ENUM_OffReducedNormal* Result);
	void GetDismembermentEnabledProfleValue(const class FString& Culture, const class FString& Platform, bool* Result);
	void GetHUDOpacityProfleValue(const class FString& Culture, const class FString& Platform, float* Result);
	void GetHotbarStyleProfleValue(const class FString& Culture, const class FString& Platform, ENUM_HotbarStyle* Result);
	void GetSubtitleSizeProfleValue(const class FString& Culture, const class FString& Platform, ENUM_SmallMediumLarge* Result);
	void GetSoundEffectCaptionsEnabledProfleValue(const class FString& Culture, const class FString& Platform, bool* Result);
	void GetSoundEffectCaptionsSizeProfleValue(const class FString& Culture, const class FString& Platform, ENUM_SmallMediumLarge* Result);
	void GetHUDColorThemeProfleValue(const class FString& Culture, const class FString& Platform, class FName* Result);
	void GetHUDTextSizeProfleValue(const class FString& Culture, const class FString& Platform, ENUM_SmallMediumLarge* Result);
	void GetPlatformType(bool* IsConsole);
	void SetReloadCanUseBatteries(bool NewValue);
	void GetReloadCanUseBatteries(bool* Result);
	void ApplyReloadCanUseBatteries(bool NewValue);
	void GetReloadCanUseBatteriesProfileValue(const class FString& Culture, const class FString& Platform, bool* Result);
	void InitializeSettingsForCurrentSpace(class APAWN_SystemShockCharacter_C* ControlledCharacter);
	void SetControllerVibrationEnabled(bool NewValue);
	void GetControllerVibrationEnabled(bool* Result);
	void ApplyControllerVibrationSetting(bool NewValue);
	void GetControllerVibrationProfleValue(const class FString& Culture, const class FString& Platform, bool* Result);

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"SAVE_Settings_C">();
	}
	static class USAVE_Settings_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<USAVE_Settings_C>();
	}
};
static_assert(alignof(USAVE_Settings_C) == 0x000008, "Wrong alignment on USAVE_Settings_C");
static_assert(sizeof(USAVE_Settings_C) == 0x0002D8, "Wrong size on USAVE_Settings_C");
static_assert(offsetof(USAVE_Settings_C, AmbientOcclusion) == 0x000028, "Member 'USAVE_Settings_C::AmbientOcclusion' has a wrong offset!");
static_assert(offsetof(USAVE_Settings_C, UserTint) == 0x00002C, "Member 'USAVE_Settings_C::UserTint' has a wrong offset!");
static_assert(offsetof(USAVE_Settings_C, RealspaceFOV) == 0x000034, "Member 'USAVE_Settings_C::RealspaceFOV' has a wrong offset!");
static_assert(offsetof(USAVE_Settings_C, CyberspaceFOV) == 0x000038, "Member 'USAVE_Settings_C::CyberspaceFOV' has a wrong offset!");
static_assert(offsetof(USAVE_Settings_C, Volume_Master) == 0x00003C, "Member 'USAVE_Settings_C::Volume_Master' has a wrong offset!");
static_assert(offsetof(USAVE_Settings_C, Volume_Music) == 0x000040, "Member 'USAVE_Settings_C::Volume_Music' has a wrong offset!");
static_assert(offsetof(USAVE_Settings_C, Volume_Voice) == 0x000044, "Member 'USAVE_Settings_C::Volume_Voice' has a wrong offset!");
static_assert(offsetof(USAVE_Settings_C, Volume_Effects) == 0x000048, "Member 'USAVE_Settings_C::Volume_Effects' has a wrong offset!");
static_assert(offsetof(USAVE_Settings_C, Volume_Environment) == 0x00004C, "Member 'USAVE_Settings_C::Volume_Environment' has a wrong offset!");
static_assert(offsetof(USAVE_Settings_C, Volume_UI) == 0x000050, "Member 'USAVE_Settings_C::Volume_UI' has a wrong offset!");
static_assert(offsetof(USAVE_Settings_C, Language) == 0x000058, "Member 'USAVE_Settings_C::Language' has a wrong offset!");
static_assert(offsetof(USAVE_Settings_C, SubtitlesEnabled) == 0x000068, "Member 'USAVE_Settings_C::SubtitlesEnabled' has a wrong offset!");
static_assert(offsetof(USAVE_Settings_C, SubtitleSize) == 0x000069, "Member 'USAVE_Settings_C::SubtitleSize' has a wrong offset!");
static_assert(offsetof(USAVE_Settings_C, SoundEffectsCaptionsEnabled) == 0x00006A, "Member 'USAVE_Settings_C::SoundEffectsCaptionsEnabled' has a wrong offset!");
static_assert(offsetof(USAVE_Settings_C, SoundEffectsCaptionsSize) == 0x00006B, "Member 'USAVE_Settings_C::SoundEffectsCaptionsSize' has a wrong offset!");
static_assert(offsetof(USAVE_Settings_C, HudOpacity) == 0x00006C, "Member 'USAVE_Settings_C::HudOpacity' has a wrong offset!");
static_assert(offsetof(USAVE_Settings_C, NormalizedHUDCurvature) == 0x000070, "Member 'USAVE_Settings_C::NormalizedHUDCurvature' has a wrong offset!");
static_assert(offsetof(USAVE_Settings_C, HudScale) == 0x000074, "Member 'USAVE_Settings_C::HudScale' has a wrong offset!");
static_assert(offsetof(USAVE_Settings_C, AutoRotateMinimap) == 0x000078, "Member 'USAVE_Settings_C::AutoRotateMinimap' has a wrong offset!");
static_assert(offsetof(USAVE_Settings_C, AutoPlayMediaLogs) == 0x000079, "Member 'USAVE_Settings_C::AutoPlayMediaLogs' has a wrong offset!");
static_assert(offsetof(USAVE_Settings_C, ShowTutorials) == 0x00007A, "Member 'USAVE_Settings_C::ShowTutorials' has a wrong offset!");
static_assert(offsetof(USAVE_Settings_C, FocusOnPuzzles) == 0x00007B, "Member 'USAVE_Settings_C::FocusOnPuzzles' has a wrong offset!");
static_assert(offsetof(USAVE_Settings_C, AutoSlotHotbar) == 0x00007C, "Member 'USAVE_Settings_C::AutoSlotHotbar' has a wrong offset!");
static_assert(offsetof(USAVE_Settings_C, AutoReload) == 0x00007D, "Member 'USAVE_Settings_C::AutoReload' has a wrong offset!");
static_assert(offsetof(USAVE_Settings_C, HotbarStyle) == 0x00007E, "Member 'USAVE_Settings_C::HotbarStyle' has a wrong offset!");
static_assert(offsetof(USAVE_Settings_C, BatteryReload) == 0x00007F, "Member 'USAVE_Settings_C::BatteryReload' has a wrong offset!");
static_assert(offsetof(USAVE_Settings_C, ScanTextSpeed) == 0x000080, "Member 'USAVE_Settings_C::ScanTextSpeed' has a wrong offset!");
static_assert(offsetof(USAVE_Settings_C, RealspaceLookSensitivity) == 0x000084, "Member 'USAVE_Settings_C::RealspaceLookSensitivity' has a wrong offset!");
static_assert(offsetof(USAVE_Settings_C, RealspaceInvertY) == 0x000088, "Member 'USAVE_Settings_C::RealspaceInvertY' has a wrong offset!");
static_assert(offsetof(USAVE_Settings_C, CyberspaceLookSensitivity) == 0x00008C, "Member 'USAVE_Settings_C::CyberspaceLookSensitivity' has a wrong offset!");
static_assert(offsetof(USAVE_Settings_C, CyberspaceInvertY) == 0x000090, "Member 'USAVE_Settings_C::CyberspaceInvertY' has a wrong offset!");
static_assert(offsetof(USAVE_Settings_C, MouseSmoothing) == 0x000091, "Member 'USAVE_Settings_C::MouseSmoothing' has a wrong offset!");
static_assert(offsetof(USAVE_Settings_C, CrouchToggle) == 0x000092, "Member 'USAVE_Settings_C::CrouchToggle' has a wrong offset!");
static_assert(offsetof(USAVE_Settings_C, HasRunBenchmark) == 0x000093, "Member 'USAVE_Settings_C::HasRunBenchmark' has a wrong offset!");
static_assert(offsetof(USAVE_Settings_C, DLSS) == 0x000094, "Member 'USAVE_Settings_C::DLSS' has a wrong offset!");
static_assert(offsetof(USAVE_Settings_C, HackerController) == 0x000098, "Member 'USAVE_Settings_C::HackerController' has a wrong offset!");
static_assert(offsetof(USAVE_Settings_C, HackerPawn) == 0x0000A0, "Member 'USAVE_Settings_C::HackerPawn' has a wrong offset!");
static_assert(offsetof(USAVE_Settings_C, HackerHUD) == 0x0000A8, "Member 'USAVE_Settings_C::HackerHUD' has a wrong offset!");
static_assert(offsetof(USAVE_Settings_C, SingleplayerGameInstance) == 0x0000B8, "Member 'USAVE_Settings_C::SingleplayerGameInstance' has a wrong offset!");
static_assert(offsetof(USAVE_Settings_C, RealspaceBrightness) == 0x0000C0, "Member 'USAVE_Settings_C::RealspaceBrightness' has a wrong offset!");
static_assert(offsetof(USAVE_Settings_C, CyberspaceBrightness) == 0x0000C4, "Member 'USAVE_Settings_C::CyberspaceBrightness' has a wrong offset!");
static_assert(offsetof(USAVE_Settings_C, WindowMode) == 0x0000C8, "Member 'USAVE_Settings_C::WindowMode' has a wrong offset!");
static_assert(offsetof(USAVE_Settings_C, Resolution) == 0x0000CC, "Member 'USAVE_Settings_C::Resolution' has a wrong offset!");
static_assert(offsetof(USAVE_Settings_C, ResolutionScale) == 0x0000D4, "Member 'USAVE_Settings_C::ResolutionScale' has a wrong offset!");
static_assert(offsetof(USAVE_Settings_C, EnableHDR) == 0x0000D8, "Member 'USAVE_Settings_C::EnableHDR' has a wrong offset!");
static_assert(offsetof(USAVE_Settings_C, MotionBlur) == 0x0000D9, "Member 'USAVE_Settings_C::MotionBlur' has a wrong offset!");
static_assert(offsetof(USAVE_Settings_C, EnableVSync) == 0x0000DA, "Member 'USAVE_Settings_C::EnableVSync' has a wrong offset!");
static_assert(offsetof(USAVE_Settings_C, AimAssist) == 0x0000DB, "Member 'USAVE_Settings_C::AimAssist' has a wrong offset!");
static_assert(offsetof(USAVE_Settings_C, FocusAimToggle) == 0x0000DC, "Member 'USAVE_Settings_C::FocusAimToggle' has a wrong offset!");
static_assert(offsetof(USAVE_Settings_C, RealspaceKeyActionMap) == 0x0000E0, "Member 'USAVE_Settings_C::RealspaceKeyActionMap' has a wrong offset!");
static_assert(offsetof(USAVE_Settings_C, CyberspaceKeyActionMap) == 0x000130, "Member 'USAVE_Settings_C::CyberspaceKeyActionMap' has a wrong offset!");
static_assert(offsetof(USAVE_Settings_C, MinigameKeyActionMap) == 0x000180, "Member 'USAVE_Settings_C::MinigameKeyActionMap' has a wrong offset!");
static_assert(offsetof(USAVE_Settings_C, FogQuality) == 0x0001D0, "Member 'USAVE_Settings_C::FogQuality' has a wrong offset!");
static_assert(offsetof(USAVE_Settings_C, PostProccessingQuality) == 0x0001D1, "Member 'USAVE_Settings_C::PostProccessingQuality' has a wrong offset!");
static_assert(offsetof(USAVE_Settings_C, TextureQuality) == 0x0001D2, "Member 'USAVE_Settings_C::TextureQuality' has a wrong offset!");
static_assert(offsetof(USAVE_Settings_C, ShaderQuality) == 0x0001D3, "Member 'USAVE_Settings_C::ShaderQuality' has a wrong offset!");
static_assert(offsetof(USAVE_Settings_C, ShadowQuality) == 0x0001D4, "Member 'USAVE_Settings_C::ShadowQuality' has a wrong offset!");
static_assert(offsetof(USAVE_Settings_C, EffectsQuality) == 0x0001D5, "Member 'USAVE_Settings_C::EffectsQuality' has a wrong offset!");
static_assert(offsetof(USAVE_Settings_C, FoliageQuality) == 0x0001D6, "Member 'USAVE_Settings_C::FoliageQuality' has a wrong offset!");
static_assert(offsetof(USAVE_Settings_C, HeadBobAmount) == 0x0001D7, "Member 'USAVE_Settings_C::HeadBobAmount' has a wrong offset!");
static_assert(offsetof(USAVE_Settings_C, GoreAmount) == 0x0001D8, "Member 'USAVE_Settings_C::GoreAmount' has a wrong offset!");
static_assert(offsetof(USAVE_Settings_C, DismembermentEnabled) == 0x0001D9, "Member 'USAVE_Settings_C::DismembermentEnabled' has a wrong offset!");
static_assert(offsetof(USAVE_Settings_C, ControllerVibrationEnabled) == 0x0001DA, "Member 'USAVE_Settings_C::ControllerVibrationEnabled' has a wrong offset!");
static_assert(offsetof(USAVE_Settings_C, HUDColorTheme) == 0x0001DC, "Member 'USAVE_Settings_C::HUDColorTheme' has a wrong offset!");
static_assert(offsetof(USAVE_Settings_C, HUDTextSize) == 0x0001E4, "Member 'USAVE_Settings_C::HUDTextSize' has a wrong offset!");
static_assert(offsetof(USAVE_Settings_C, GamepadRealspaceKeyActionMap) == 0x0001E8, "Member 'USAVE_Settings_C::GamepadRealspaceKeyActionMap' has a wrong offset!");
static_assert(offsetof(USAVE_Settings_C, GamepadCyberspaceKeyActionMap) == 0x000238, "Member 'USAVE_Settings_C::GamepadCyberspaceKeyActionMap' has a wrong offset!");
static_assert(offsetof(USAVE_Settings_C, GamepadMinigameKeyActionMap) == 0x000288, "Member 'USAVE_Settings_C::GamepadMinigameKeyActionMap' has a wrong offset!");

}

