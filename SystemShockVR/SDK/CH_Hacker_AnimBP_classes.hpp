#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: CH_Hacker_AnimBP

#include "Basic.hpp"

#include "ControlRig_structs.hpp"
#include "Engine_structs.hpp"
#include "Engine_classes.hpp"
#include "ENUM_LeftRight_structs.hpp"
#include "AnimGraphRuntime_structs.hpp"
#include "CoreUObject_structs.hpp"


namespace SDK
{

// AnimBlueprintGeneratedClass CH_Hacker_AnimBP.CH_Hacker_AnimBP_C
// 0x4230 (0x44F0 - 0x02C0)
class UCH_Hacker_AnimBP_C final : public UAnimInstance
{
public:
	uint8                                         Pad_2B8[0x8];                                      // 0x02B8(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x02C0(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	struct FAnimNode_SaveCachedPose               AnimGraphNode_SaveCachedPose_6;                    // 0x02C8(0x0158)()
	struct FAnimNode_BlendListByBool              AnimGraphNode_BlendListByBool_12;                  // 0x0420(0x00A0)()
	struct FAnimNode_ModifyBone                   AnimGraphNode_ModifyBone_3;                        // 0x04C0(0x0108)()
	struct FAnimNode_CopyBone                     AnimGraphNode_CopyBone_1;                          // 0x05C8(0x00F0)()
	struct FAnimNode_CopyBone                     AnimGraphNode_CopyBone;                            // 0x06B8(0x00F0)()
	struct FAnimNode_ConvertComponentToLocalSpace AnimGraphNode_ComponentToLocalSpace_1;             // 0x07A8(0x0020)()
	struct FAnimNode_SaveCachedPose               AnimGraphNode_SaveCachedPose_5;                    // 0x07C8(0x0158)()
	struct FAnimNode_UseCachedPose                AnimGraphNode_UseCachedPose_9;                     // 0x0920(0x0028)()
	struct FAnimNode_ConvertComponentToLocalSpace AnimGraphNode_ComponentToLocalSpace;               // 0x0948(0x0020)()
	struct FAnimNode_TransitionResult             AnimGraphNode_TransitionResult_13;                 // 0x0968(0x0028)()
	struct FAnimNode_TransitionResult             AnimGraphNode_TransitionResult_12;                 // 0x0990(0x0028)()
	struct FAnimNode_TransitionResult             AnimGraphNode_TransitionResult_11;                 // 0x09B8(0x0028)()
	struct FAnimNode_TransitionResult             AnimGraphNode_TransitionResult_10;                 // 0x09E0(0x0028)()
	struct FAnimNode_TransitionResult             AnimGraphNode_TransitionResult_9;                  // 0x0A08(0x0028)()
	struct FAnimNode_TransitionResult             AnimGraphNode_TransitionResult_8;                  // 0x0A30(0x0028)()
	struct FAnimNode_TransitionResult             AnimGraphNode_TransitionResult_7;                  // 0x0A58(0x0028)()
	struct FAnimNode_TransitionResult             AnimGraphNode_TransitionResult_6;                  // 0x0A80(0x0028)()
	struct FAnimNode_TransitionResult             AnimGraphNode_TransitionResult_5;                  // 0x0AA8(0x0028)()
	struct FAnimNode_TransitionResult             AnimGraphNode_TransitionResult_4;                  // 0x0AD0(0x0028)()
	struct FAnimNode_TransitionResult             AnimGraphNode_TransitionResult_3;                  // 0x0AF8(0x0028)()
	struct FAnimNode_TransitionResult             AnimGraphNode_TransitionResult_2;                  // 0x0B20(0x0028)()
	struct FAnimNode_LayeredBoneBlend             AnimGraphNode_LayeredBoneBlend_3;                  // 0x0B48(0x00C0)()
	struct FAnimNode_SequencePlayer               AnimGraphNode_SequencePlayer_11;                   // 0x0C08(0x0080)()
	struct FAnimNode_SequencePlayer               AnimGraphNode_SequencePlayer_10;                   // 0x0C88(0x0080)()
	struct FAnimNode_TwoWayBlend                  AnimGraphNode_TwoWayBlend_3;                       // 0x0D08(0x00C8)()
	struct FAnimNode_SequencePlayer               AnimGraphNode_SequencePlayer_9;                    // 0x0DD0(0x0080)()
	struct FAnimNode_StateResult                  AnimGraphNode_StateResult_5;                       // 0x0E50(0x0030)()
	struct FAnimNode_SequencePlayer               AnimGraphNode_SequencePlayer_8;                    // 0x0E80(0x0080)()
	struct FAnimNode_TwoWayBlend                  AnimGraphNode_TwoWayBlend_2;                       // 0x0F00(0x00C8)()
	struct FAnimNode_SequencePlayer               AnimGraphNode_SequencePlayer_7;                    // 0x0FC8(0x0080)()
	struct FAnimNode_StateResult                  AnimGraphNode_StateResult_4;                       // 0x1048(0x0030)()
	struct FAnimNode_TwoWayBlend                  AnimGraphNode_TwoWayBlend_1;                       // 0x1078(0x00C8)()
	struct FAnimNode_BlendListByBool              AnimGraphNode_BlendListByBool_11;                  // 0x1140(0x00A0)()
	struct FAnimNode_SequenceEvaluator            AnimGraphNode_SequenceEvaluator_12;                // 0x11E0(0x0050)()
	struct FAnimNode_SequenceEvaluator            AnimGraphNode_SequenceEvaluator_11;                // 0x1230(0x0050)()
	struct FAnimNode_BlendListByBool              AnimGraphNode_BlendListByBool_10;                  // 0x1280(0x00A0)()
	struct FAnimNode_BlendListByBool              AnimGraphNode_BlendListByBool_9;                   // 0x1320(0x00A0)()
	struct FAnimNode_SequenceEvaluator            AnimGraphNode_SequenceEvaluator_10;                // 0x13C0(0x0050)()
	struct FAnimNode_SequenceEvaluator            AnimGraphNode_SequenceEvaluator_9;                 // 0x1410(0x0050)()
	struct FAnimNode_SequenceEvaluator            AnimGraphNode_SequenceEvaluator_8;                 // 0x1460(0x0050)()
	struct FAnimNode_SequenceEvaluator            AnimGraphNode_SequenceEvaluator_7;                 // 0x14B0(0x0050)()
	struct FAnimNode_BlendListByBool              AnimGraphNode_BlendListByBool_8;                   // 0x1500(0x00A0)()
	struct FAnimNode_StateResult                  AnimGraphNode_StateResult_3;                       // 0x15A0(0x0030)()
	struct FAnimNode_TwoWayBlend                  AnimGraphNode_TwoWayBlend;                         // 0x15D0(0x00C8)()
	struct FAnimNode_BlendListByBool              AnimGraphNode_BlendListByBool_7;                   // 0x1698(0x00A0)()
	struct FAnimNode_SequenceEvaluator            AnimGraphNode_SequenceEvaluator_6;                 // 0x1738(0x0050)()
	struct FAnimNode_SequenceEvaluator            AnimGraphNode_SequenceEvaluator_5;                 // 0x1788(0x0050)()
	struct FAnimNode_BlendListByBool              AnimGraphNode_BlendListByBool_6;                   // 0x17D8(0x00A0)()
	struct FAnimNode_BlendListByBool              AnimGraphNode_BlendListByBool_5;                   // 0x1878(0x00A0)()
	struct FAnimNode_SequenceEvaluator            AnimGraphNode_SequenceEvaluator_4;                 // 0x1918(0x0050)()
	struct FAnimNode_SequenceEvaluator            AnimGraphNode_SequenceEvaluator_3;                 // 0x1968(0x0050)()
	struct FAnimNode_SequenceEvaluator            AnimGraphNode_SequenceEvaluator_2;                 // 0x19B8(0x0050)()
	struct FAnimNode_SequenceEvaluator            AnimGraphNode_SequenceEvaluator_1;                 // 0x1A08(0x0050)()
	struct FAnimNode_BlendListByBool              AnimGraphNode_BlendListByBool_4;                   // 0x1A58(0x00A0)()
	struct FAnimNode_StateResult                  AnimGraphNode_StateResult_2;                       // 0x1AF8(0x0030)()
	struct FAnimNode_StateMachine                 AnimGraphNode_StateMachine_1;                      // 0x1B28(0x00B0)()
	struct FAnimNode_SaveCachedPose               AnimGraphNode_SaveCachedPose_4;                    // 0x1BD8(0x0158)()
	struct FAnimNode_UseCachedPose                AnimGraphNode_UseCachedPose_8;                     // 0x1D30(0x0028)()
	struct FAnimNode_ConvertLocalToComponentSpace AnimGraphNode_LocalToComponentSpace_1;             // 0x1D58(0x0020)()
	struct FAnimNode_UseCachedPose                AnimGraphNode_UseCachedPose_7;                     // 0x1D78(0x0028)()
	struct FAnimNode_LayeredBoneBlend             AnimGraphNode_LayeredBoneBlend_2;                  // 0x1DA0(0x00C0)()
	struct FAnimNode_LegIK                        AnimGraphNode_LegIK;                               // 0x1E60(0x00F8)()
	struct FAnimNode_ConvertLocalToComponentSpace AnimGraphNode_LocalToComponentSpace;               // 0x1F58(0x0020)()
	struct FAnimNode_ModifyBone                   AnimGraphNode_ModifyBone_2;                        // 0x1F78(0x0108)()
	struct FAnimNode_BoneDrivenController         AnimGraphNode_BoneDrivenController_5;              // 0x2080(0x0118)()
	struct FAnimNode_BoneDrivenController         AnimGraphNode_BoneDrivenController_4;              // 0x2198(0x0118)()
	struct FAnimNode_BoneDrivenController         AnimGraphNode_BoneDrivenController_3;              // 0x22B0(0x0118)()
	struct FAnimNode_BoneDrivenController         AnimGraphNode_BoneDrivenController_2;              // 0x23C8(0x0118)()
	struct FAnimNode_BoneDrivenController         AnimGraphNode_BoneDrivenController_1;              // 0x24E0(0x0118)()
	struct FAnimNode_BoneDrivenController         AnimGraphNode_BoneDrivenController;                // 0x25F8(0x0118)()
	struct FAnimNode_ModifyBone                   AnimGraphNode_ModifyBone_1;                        // 0x2710(0x0108)()
	struct FAnimNode_SaveCachedPose               AnimGraphNode_SaveCachedPose_3;                    // 0x2818(0x0158)()
	struct FAnimNode_Slot                         AnimGraphNode_Slot_4;                              // 0x2970(0x0048)()
	struct FAnimNode_SaveCachedPose               AnimGraphNode_SaveCachedPose_2;                    // 0x29B8(0x0158)()
	struct FAnimNode_ControlRig                   AnimGraphNode_ControlRig;                          // 0x2B10(0x0368)()
	struct FAnimNode_ModifyBone                   AnimGraphNode_ModifyBone;                          // 0x2E78(0x0108)()
	struct FAnimNode_BlendListByBool              AnimGraphNode_BlendListByBool_3;                   // 0x2F80(0x00A0)()
	struct FAnimNode_TwoBoneIK                    AnimGraphNode_TwoBoneIK_1;                         // 0x3020(0x01E0)()
	struct FAnimNode_SequencePlayer               AnimGraphNode_SequencePlayer_6;                    // 0x3200(0x0080)()
	struct FAnimNode_SequencePlayer               AnimGraphNode_SequencePlayer_5;                    // 0x3280(0x0080)()
	struct FAnimNode_UseCachedPose                AnimGraphNode_UseCachedPose_6;                     // 0x3300(0x0028)()
	struct FAnimNode_UseCachedPose                AnimGraphNode_UseCachedPose_5;                     // 0x3328(0x0028)()
	struct FAnimNode_Slot                         AnimGraphNode_Slot_3;                              // 0x3350(0x0048)()
	struct FAnimNode_UseCachedPose                AnimGraphNode_UseCachedPose_4;                     // 0x3398(0x0028)()
	struct FAnimNode_TwoBoneIK                    AnimGraphNode_TwoBoneIK;                           // 0x33C0(0x01E0)()
	struct FAnimNode_UseCachedPose                AnimGraphNode_UseCachedPose_3;                     // 0x35A0(0x0028)()
	struct FAnimNode_SaveCachedPose               AnimGraphNode_SaveCachedPose_1;                    // 0x35C8(0x0158)()
	struct FAnimNode_SaveCachedPose               AnimGraphNode_SaveCachedPose;                      // 0x3720(0x0158)()
	struct FAnimNode_Slot                         AnimGraphNode_Slot_2;                              // 0x3878(0x0048)()
	struct FAnimNode_UseCachedPose                AnimGraphNode_UseCachedPose_2;                     // 0x38C0(0x0028)()
	struct FAnimNode_UseCachedPose                AnimGraphNode_UseCachedPose_1;                     // 0x38E8(0x0028)()
	struct FAnimNode_LayeredBoneBlend             AnimGraphNode_LayeredBoneBlend_1;                  // 0x3910(0x00C0)()
	struct FAnimNode_TransitionResult             AnimGraphNode_TransitionResult_1;                  // 0x39D0(0x0028)()
	struct FAnimNode_TransitionResult             AnimGraphNode_TransitionResult;                    // 0x39F8(0x0028)()
	struct FAnimNode_SequencePlayer               AnimGraphNode_SequencePlayer_4;                    // 0x3A20(0x0080)()
	struct FAnimNode_BlendListByBool              AnimGraphNode_BlendListByBool_2;                   // 0x3AA0(0x00A0)()
	struct FAnimNode_ApplyAdditive                AnimGraphNode_ApplyAdditive;                       // 0x3B40(0x00C8)()
	struct FAnimNode_SequenceEvaluator            AnimGraphNode_SequenceEvaluator;                   // 0x3C08(0x0050)()
	struct FAnimNode_SequencePlayer               AnimGraphNode_SequencePlayer_3;                    // 0x3C58(0x0080)()
	struct FAnimNode_StateResult                  AnimGraphNode_StateResult_1;                       // 0x3CD8(0x0030)()
	struct FAnimNode_SequencePlayer               AnimGraphNode_SequencePlayer_2;                    // 0x3D08(0x0080)()
	struct FAnimNode_StateResult                  AnimGraphNode_StateResult;                         // 0x3D88(0x0030)()
	struct FAnimNode_StateMachine                 AnimGraphNode_StateMachine;                        // 0x3DB8(0x00B0)()
	struct FAnimNode_Slot                         AnimGraphNode_Slot_1;                              // 0x3E68(0x0048)()
	struct FAnimNode_Root                         AnimGraphNode_Root;                                // 0x3EB0(0x0030)()
	struct FAnimNode_BlendListByBool              AnimGraphNode_BlendListByBool_1;                   // 0x3EE0(0x00A0)()
	struct FAnimNode_SequencePlayer               AnimGraphNode_SequencePlayer_1;                    // 0x3F80(0x0080)()
	struct FAnimNode_SequencePlayer               AnimGraphNode_SequencePlayer;                      // 0x4000(0x0080)()
	struct FAnimNode_BlendListByEnum              AnimGraphNode_BlendListByEnum;                     // 0x4080(0x00B0)()
	struct FAnimNode_Slot                         AnimGraphNode_Slot;                                // 0x4130(0x0048)()
	struct FAnimNode_LayeredBoneBlend             AnimGraphNode_LayeredBoneBlend;                    // 0x4178(0x00C0)()
	struct FAnimNode_UseCachedPose                AnimGraphNode_UseCachedPose;                       // 0x4238(0x0028)()
	struct FAnimNode_BlendListByBool              AnimGraphNode_BlendListByBool;                     // 0x4260(0x00A0)()
	class UITEM_WeaponBase_C*                     EquippedWeapon;                                    // 0x4300(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               LastWeaponRotation;                                // 0x4308(0x000C)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	struct FVector                                LastWeaponLocation;                                // 0x4314(0x000C)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Delta;                                             // 0x4320(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          HasEquippedWeapon;                                 // 0x4324(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_4325[0x3];                                     // 0x4325(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         WalkProgress;                                      // 0x4328(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         RunProgress;                                       // 0x432C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CrawlProgress;                                     // 0x4330(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         MovementSpeed;                                     // 0x4334(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          WalkPhaseUpdate;                                   // 0x4338(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          IsSprinting;                                       // 0x4339(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_433A[0x6];                                     // 0x433A(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class USkeletalMeshComponent*                 Mesh;                                              // 0x4340(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_4348[0x8];                                     // 0x4348(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTransform                             GunTransform;                                      // 0x4350(0x0030)(Edit, BlueprintVisible, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	class UWeightedAverageVec3*                   WeaponSwaySmoothOffset;                            // 0x4380(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UWeightedAverageVec3*                   WeaponSwaySmoothRotation;                          // 0x4388(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                EyesOffset;                                        // 0x4390(0x000C)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_439C[0x4];                                     // 0x439C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UAnimSequenceBase*                      IdleSequence;                                      // 0x43A0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          IsMoving;                                          // 0x43A8(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_43A9[0x3];                                     // 0x43A9(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                GameplayWeaponViewOffset;                          // 0x43AC(0x000C)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UAnimSequenceBase*                      WalkSequence;                                      // 0x43B8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UAnimSequenceBase*                      SprintSequence;                                    // 0x43C0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UAnimSequenceBase*                      DefaultWeaponlessIdle;                             // 0x43C8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          UseIK;                                             // 0x43D0(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_43D1[0xF];                                     // 0x43D1(0x000F)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTransform                             LeaningLeftOffset;                                 // 0x43E0(0x0030)(Edit, BlueprintVisible, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	struct FTransform                             LeaningRightOffset;                                // 0x4410(0x0030)(Edit, BlueprintVisible, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	float                                         LeaningProgress;                                   // 0x4440(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                Camera_Location;                                   // 0x4444(0x000C)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                Forward_Vector;                                    // 0x4450(0x000C)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               Aim_Rotation;                                      // 0x445C(0x000C)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	struct FVector                                Prev_Camera_Location;                              // 0x4468(0x000C)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               WeaponSwayOffsetRotation;                          // 0x4474(0x000C)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	struct FVector                                WeaponSwayOffsetLocation;                          // 0x4480(0x000C)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               Aim_Rotation_WS;                                   // 0x448C(0x000C)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	struct FVector2D                              MovementDirection;                                 // 0x4498(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          MovingRight;                                       // 0x44A0(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          MovingForward;                                     // 0x44A1(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_44A2[0x2];                                     // 0x44A2(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CrouchAlpha;                                       // 0x44A4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         StandAlpha;                                        // 0x44A8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         ProceduralMovementAlpha;                           // 0x44AC(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UAnimSequenceBase*                      IdleOverride;                                      // 0x44B0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                WeaponViewOffset;                                  // 0x44B8(0x000C)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_44C4[0x4];                                     // 0x44C4(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class USkeletalMeshComponent*                 WeaponMesh;                                        // 0x44C8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         LegIKAlpha;                                        // 0x44D0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          IsGrounded;                                        // 0x44D4(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          IsStrafing;                                        // 0x44D5(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_44D6[0x2];                                     // 0x44D6(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         AirLandingAlpha;                                   // 0x44D8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          IsPlayingCinematic;                                // 0x44DC(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          IsMountedOnLadder;                                 // 0x44DD(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	ENUM_LeftRight                                LadderFootDown;                                    // 0x44DE(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_44DF[0x1];                                     // 0x44DF(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         AimingProgress;                                    // 0x44E0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          IsWeaponObstructed;                                // 0x44E4(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_44E5[0x3];                                     // 0x44E5(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class UAnimSequenceBase*                      WeaponObstructedSequence;                          // 0x44E8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

public:
	void ExecuteUbergraph_CH_Hacker_AnimBP(int32 EntryPoint);
	void BlueprintInitializeAnimation();
	void AnimNotify_WalkPhaseOff();
	void AnimNotify_WalkPhaseOn();
	void BlueprintBeginPlay();
	void BlueprintUpdateAnimation(float DeltaTimeX);
	void EvaluateGraphExposedInputs_ExecuteUbergraph_CH_Hacker_AnimBP_AnimGraphNode_TransitionResult_07F1F5D14ADDA07B22BA34AC2F03CE24();
	void EvaluateGraphExposedInputs_ExecuteUbergraph_CH_Hacker_AnimBP_AnimGraphNode_TransitionResult_2D96820E4C7BD40D1599FEA3E9ED5ACD();
	void EvaluateGraphExposedInputs_ExecuteUbergraph_CH_Hacker_AnimBP_AnimGraphNode_TransitionResult_A89D86844DFEAB17419958ADE2D81C1F();
	void EvaluateGraphExposedInputs_ExecuteUbergraph_CH_Hacker_AnimBP_AnimGraphNode_TransitionResult_2591FDC14440C038B762019D54B9BD26();
	void EvaluateGraphExposedInputs_ExecuteUbergraph_CH_Hacker_AnimBP_AnimGraphNode_TransitionResult_8310B53E46B3A5D7EE70459BF8BBC8B9();
	void EvaluateGraphExposedInputs_ExecuteUbergraph_CH_Hacker_AnimBP_AnimGraphNode_TransitionResult_8A2738374E0D3A66B1BF00924DCDE8B8();
	void EvaluateGraphExposedInputs_ExecuteUbergraph_CH_Hacker_AnimBP_AnimGraphNode_TransitionResult_625E37B34BFE4C5BC721E78B7FB37876();
	void EvaluateGraphExposedInputs_ExecuteUbergraph_CH_Hacker_AnimBP_AnimGraphNode_TransitionResult_3FD889EB45646CC5625BC4932FE0B6C6();
	void EvaluateGraphExposedInputs_ExecuteUbergraph_CH_Hacker_AnimBP_AnimGraphNode_TransitionResult_229F00B4403D7D0187E8E587DF8B50C6();
	void ApplyWeightedAverageSmoothing(const struct FVector& Location, const struct FRotator& Rotation, struct FVector* ResultLocation, struct FRotator* ResultRotation);
	void UpdateWeaponOffset(float DeltaTime);
	void UpdateIdleSequenceAssignment();
	void UpdateWeaponViewOffset();
	void IsMovingForwardOrBackward(bool* Result);
	void UpdateLocomotionSequences();
	void AnimGraph(struct FPoseLink* AnimGraph_0);
	void SetWalkPhase(float FootstepProgress, int32 FootstepSign, bool* Result);
	void SetEquippedItem(class UITEM_WeaponBase_C* Item, bool* Result);
	void SetMovementParameters(float Speed, const struct FVector2D& Direction, float CrouchProgress, bool* Result);
	void SetIsSprinting(bool State, bool* Result);
	void SetLeanProgress(float SignedProgress, bool* Result);
	void SetCameraTarget(const struct FRotator& LookRotation, const struct FVector& HeadLocation, bool* Result);
	void SetOverrideIdleSequence(class UAnimSequenceBase* OverrideIdleSequence, bool IsCinematic, bool* Result);
	void SetWeaponOffset(const struct FVector& Offset, bool* Result);
	void SetUseIK(bool UseIK_0, bool* Result);
	void GetCameraRootPos(struct FVector* Location);
	void SetLadderParams(bool IsMounted, ENUM_LeftRight RestingFootDown, bool* Result);
	void GetOverrideIdleSequence(class UAnimSequenceBase** Result);
	void SetIsGrounded(bool IsGrounded_0, bool* Result);
	void SetAirLandingScale(float Scale, bool* Result);
	void SetAimProgress(float Progress, bool* Result);
	void UpdateEquippedItemSequences(bool* Result);
	void SetWeaponObstructed(bool Obstructed, bool* Result);

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"CH_Hacker_AnimBP_C">();
	}
	static class UCH_Hacker_AnimBP_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<UCH_Hacker_AnimBP_C>();
	}
};
static_assert(alignof(UCH_Hacker_AnimBP_C) == 0x000010, "Wrong alignment on UCH_Hacker_AnimBP_C");
static_assert(sizeof(UCH_Hacker_AnimBP_C) == 0x0044F0, "Wrong size on UCH_Hacker_AnimBP_C");
static_assert(offsetof(UCH_Hacker_AnimBP_C, UberGraphFrame) == 0x0002C0, "Member 'UCH_Hacker_AnimBP_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(UCH_Hacker_AnimBP_C, AnimGraphNode_SaveCachedPose_6) == 0x0002C8, "Member 'UCH_Hacker_AnimBP_C::AnimGraphNode_SaveCachedPose_6' has a wrong offset!");
static_assert(offsetof(UCH_Hacker_AnimBP_C, AnimGraphNode_BlendListByBool_12) == 0x000420, "Member 'UCH_Hacker_AnimBP_C::AnimGraphNode_BlendListByBool_12' has a wrong offset!");
static_assert(offsetof(UCH_Hacker_AnimBP_C, AnimGraphNode_ModifyBone_3) == 0x0004C0, "Member 'UCH_Hacker_AnimBP_C::AnimGraphNode_ModifyBone_3' has a wrong offset!");
static_assert(offsetof(UCH_Hacker_AnimBP_C, AnimGraphNode_CopyBone_1) == 0x0005C8, "Member 'UCH_Hacker_AnimBP_C::AnimGraphNode_CopyBone_1' has a wrong offset!");
static_assert(offsetof(UCH_Hacker_AnimBP_C, AnimGraphNode_CopyBone) == 0x0006B8, "Member 'UCH_Hacker_AnimBP_C::AnimGraphNode_CopyBone' has a wrong offset!");
static_assert(offsetof(UCH_Hacker_AnimBP_C, AnimGraphNode_ComponentToLocalSpace_1) == 0x0007A8, "Member 'UCH_Hacker_AnimBP_C::AnimGraphNode_ComponentToLocalSpace_1' has a wrong offset!");
static_assert(offsetof(UCH_Hacker_AnimBP_C, AnimGraphNode_SaveCachedPose_5) == 0x0007C8, "Member 'UCH_Hacker_AnimBP_C::AnimGraphNode_SaveCachedPose_5' has a wrong offset!");
static_assert(offsetof(UCH_Hacker_AnimBP_C, AnimGraphNode_UseCachedPose_9) == 0x000920, "Member 'UCH_Hacker_AnimBP_C::AnimGraphNode_UseCachedPose_9' has a wrong offset!");
static_assert(offsetof(UCH_Hacker_AnimBP_C, AnimGraphNode_ComponentToLocalSpace) == 0x000948, "Member 'UCH_Hacker_AnimBP_C::AnimGraphNode_ComponentToLocalSpace' has a wrong offset!");
static_assert(offsetof(UCH_Hacker_AnimBP_C, AnimGraphNode_TransitionResult_13) == 0x000968, "Member 'UCH_Hacker_AnimBP_C::AnimGraphNode_TransitionResult_13' has a wrong offset!");
static_assert(offsetof(UCH_Hacker_AnimBP_C, AnimGraphNode_TransitionResult_12) == 0x000990, "Member 'UCH_Hacker_AnimBP_C::AnimGraphNode_TransitionResult_12' has a wrong offset!");
static_assert(offsetof(UCH_Hacker_AnimBP_C, AnimGraphNode_TransitionResult_11) == 0x0009B8, "Member 'UCH_Hacker_AnimBP_C::AnimGraphNode_TransitionResult_11' has a wrong offset!");
static_assert(offsetof(UCH_Hacker_AnimBP_C, AnimGraphNode_TransitionResult_10) == 0x0009E0, "Member 'UCH_Hacker_AnimBP_C::AnimGraphNode_TransitionResult_10' has a wrong offset!");
static_assert(offsetof(UCH_Hacker_AnimBP_C, AnimGraphNode_TransitionResult_9) == 0x000A08, "Member 'UCH_Hacker_AnimBP_C::AnimGraphNode_TransitionResult_9' has a wrong offset!");
static_assert(offsetof(UCH_Hacker_AnimBP_C, AnimGraphNode_TransitionResult_8) == 0x000A30, "Member 'UCH_Hacker_AnimBP_C::AnimGraphNode_TransitionResult_8' has a wrong offset!");
static_assert(offsetof(UCH_Hacker_AnimBP_C, AnimGraphNode_TransitionResult_7) == 0x000A58, "Member 'UCH_Hacker_AnimBP_C::AnimGraphNode_TransitionResult_7' has a wrong offset!");
static_assert(offsetof(UCH_Hacker_AnimBP_C, AnimGraphNode_TransitionResult_6) == 0x000A80, "Member 'UCH_Hacker_AnimBP_C::AnimGraphNode_TransitionResult_6' has a wrong offset!");
static_assert(offsetof(UCH_Hacker_AnimBP_C, AnimGraphNode_TransitionResult_5) == 0x000AA8, "Member 'UCH_Hacker_AnimBP_C::AnimGraphNode_TransitionResult_5' has a wrong offset!");
static_assert(offsetof(UCH_Hacker_AnimBP_C, AnimGraphNode_TransitionResult_4) == 0x000AD0, "Member 'UCH_Hacker_AnimBP_C::AnimGraphNode_TransitionResult_4' has a wrong offset!");
static_assert(offsetof(UCH_Hacker_AnimBP_C, AnimGraphNode_TransitionResult_3) == 0x000AF8, "Member 'UCH_Hacker_AnimBP_C::AnimGraphNode_TransitionResult_3' has a wrong offset!");
static_assert(offsetof(UCH_Hacker_AnimBP_C, AnimGraphNode_TransitionResult_2) == 0x000B20, "Member 'UCH_Hacker_AnimBP_C::AnimGraphNode_TransitionResult_2' has a wrong offset!");
static_assert(offsetof(UCH_Hacker_AnimBP_C, AnimGraphNode_LayeredBoneBlend_3) == 0x000B48, "Member 'UCH_Hacker_AnimBP_C::AnimGraphNode_LayeredBoneBlend_3' has a wrong offset!");
static_assert(offsetof(UCH_Hacker_AnimBP_C, AnimGraphNode_SequencePlayer_11) == 0x000C08, "Member 'UCH_Hacker_AnimBP_C::AnimGraphNode_SequencePlayer_11' has a wrong offset!");
static_assert(offsetof(UCH_Hacker_AnimBP_C, AnimGraphNode_SequencePlayer_10) == 0x000C88, "Member 'UCH_Hacker_AnimBP_C::AnimGraphNode_SequencePlayer_10' has a wrong offset!");
static_assert(offsetof(UCH_Hacker_AnimBP_C, AnimGraphNode_TwoWayBlend_3) == 0x000D08, "Member 'UCH_Hacker_AnimBP_C::AnimGraphNode_TwoWayBlend_3' has a wrong offset!");
static_assert(offsetof(UCH_Hacker_AnimBP_C, AnimGraphNode_SequencePlayer_9) == 0x000DD0, "Member 'UCH_Hacker_AnimBP_C::AnimGraphNode_SequencePlayer_9' has a wrong offset!");
static_assert(offsetof(UCH_Hacker_AnimBP_C, AnimGraphNode_StateResult_5) == 0x000E50, "Member 'UCH_Hacker_AnimBP_C::AnimGraphNode_StateResult_5' has a wrong offset!");
static_assert(offsetof(UCH_Hacker_AnimBP_C, AnimGraphNode_SequencePlayer_8) == 0x000E80, "Member 'UCH_Hacker_AnimBP_C::AnimGraphNode_SequencePlayer_8' has a wrong offset!");
static_assert(offsetof(UCH_Hacker_AnimBP_C, AnimGraphNode_TwoWayBlend_2) == 0x000F00, "Member 'UCH_Hacker_AnimBP_C::AnimGraphNode_TwoWayBlend_2' has a wrong offset!");
static_assert(offsetof(UCH_Hacker_AnimBP_C, AnimGraphNode_SequencePlayer_7) == 0x000FC8, "Member 'UCH_Hacker_AnimBP_C::AnimGraphNode_SequencePlayer_7' has a wrong offset!");
static_assert(offsetof(UCH_Hacker_AnimBP_C, AnimGraphNode_StateResult_4) == 0x001048, "Member 'UCH_Hacker_AnimBP_C::AnimGraphNode_StateResult_4' has a wrong offset!");
static_assert(offsetof(UCH_Hacker_AnimBP_C, AnimGraphNode_TwoWayBlend_1) == 0x001078, "Member 'UCH_Hacker_AnimBP_C::AnimGraphNode_TwoWayBlend_1' has a wrong offset!");
static_assert(offsetof(UCH_Hacker_AnimBP_C, AnimGraphNode_BlendListByBool_11) == 0x001140, "Member 'UCH_Hacker_AnimBP_C::AnimGraphNode_BlendListByBool_11' has a wrong offset!");
static_assert(offsetof(UCH_Hacker_AnimBP_C, AnimGraphNode_SequenceEvaluator_12) == 0x0011E0, "Member 'UCH_Hacker_AnimBP_C::AnimGraphNode_SequenceEvaluator_12' has a wrong offset!");
static_assert(offsetof(UCH_Hacker_AnimBP_C, AnimGraphNode_SequenceEvaluator_11) == 0x001230, "Member 'UCH_Hacker_AnimBP_C::AnimGraphNode_SequenceEvaluator_11' has a wrong offset!");
static_assert(offsetof(UCH_Hacker_AnimBP_C, AnimGraphNode_BlendListByBool_10) == 0x001280, "Member 'UCH_Hacker_AnimBP_C::AnimGraphNode_BlendListByBool_10' has a wrong offset!");
static_assert(offsetof(UCH_Hacker_AnimBP_C, AnimGraphNode_BlendListByBool_9) == 0x001320, "Member 'UCH_Hacker_AnimBP_C::AnimGraphNode_BlendListByBool_9' has a wrong offset!");
static_assert(offsetof(UCH_Hacker_AnimBP_C, AnimGraphNode_SequenceEvaluator_10) == 0x0013C0, "Member 'UCH_Hacker_AnimBP_C::AnimGraphNode_SequenceEvaluator_10' has a wrong offset!");
static_assert(offsetof(UCH_Hacker_AnimBP_C, AnimGraphNode_SequenceEvaluator_9) == 0x001410, "Member 'UCH_Hacker_AnimBP_C::AnimGraphNode_SequenceEvaluator_9' has a wrong offset!");
static_assert(offsetof(UCH_Hacker_AnimBP_C, AnimGraphNode_SequenceEvaluator_8) == 0x001460, "Member 'UCH_Hacker_AnimBP_C::AnimGraphNode_SequenceEvaluator_8' has a wrong offset!");
static_assert(offsetof(UCH_Hacker_AnimBP_C, AnimGraphNode_SequenceEvaluator_7) == 0x0014B0, "Member 'UCH_Hacker_AnimBP_C::AnimGraphNode_SequenceEvaluator_7' has a wrong offset!");
static_assert(offsetof(UCH_Hacker_AnimBP_C, AnimGraphNode_BlendListByBool_8) == 0x001500, "Member 'UCH_Hacker_AnimBP_C::AnimGraphNode_BlendListByBool_8' has a wrong offset!");
static_assert(offsetof(UCH_Hacker_AnimBP_C, AnimGraphNode_StateResult_3) == 0x0015A0, "Member 'UCH_Hacker_AnimBP_C::AnimGraphNode_StateResult_3' has a wrong offset!");
static_assert(offsetof(UCH_Hacker_AnimBP_C, AnimGraphNode_TwoWayBlend) == 0x0015D0, "Member 'UCH_Hacker_AnimBP_C::AnimGraphNode_TwoWayBlend' has a wrong offset!");
static_assert(offsetof(UCH_Hacker_AnimBP_C, AnimGraphNode_BlendListByBool_7) == 0x001698, "Member 'UCH_Hacker_AnimBP_C::AnimGraphNode_BlendListByBool_7' has a wrong offset!");
static_assert(offsetof(UCH_Hacker_AnimBP_C, AnimGraphNode_SequenceEvaluator_6) == 0x001738, "Member 'UCH_Hacker_AnimBP_C::AnimGraphNode_SequenceEvaluator_6' has a wrong offset!");
static_assert(offsetof(UCH_Hacker_AnimBP_C, AnimGraphNode_SequenceEvaluator_5) == 0x001788, "Member 'UCH_Hacker_AnimBP_C::AnimGraphNode_SequenceEvaluator_5' has a wrong offset!");
static_assert(offsetof(UCH_Hacker_AnimBP_C, AnimGraphNode_BlendListByBool_6) == 0x0017D8, "Member 'UCH_Hacker_AnimBP_C::AnimGraphNode_BlendListByBool_6' has a wrong offset!");
static_assert(offsetof(UCH_Hacker_AnimBP_C, AnimGraphNode_BlendListByBool_5) == 0x001878, "Member 'UCH_Hacker_AnimBP_C::AnimGraphNode_BlendListByBool_5' has a wrong offset!");
static_assert(offsetof(UCH_Hacker_AnimBP_C, AnimGraphNode_SequenceEvaluator_4) == 0x001918, "Member 'UCH_Hacker_AnimBP_C::AnimGraphNode_SequenceEvaluator_4' has a wrong offset!");
static_assert(offsetof(UCH_Hacker_AnimBP_C, AnimGraphNode_SequenceEvaluator_3) == 0x001968, "Member 'UCH_Hacker_AnimBP_C::AnimGraphNode_SequenceEvaluator_3' has a wrong offset!");
static_assert(offsetof(UCH_Hacker_AnimBP_C, AnimGraphNode_SequenceEvaluator_2) == 0x0019B8, "Member 'UCH_Hacker_AnimBP_C::AnimGraphNode_SequenceEvaluator_2' has a wrong offset!");
static_assert(offsetof(UCH_Hacker_AnimBP_C, AnimGraphNode_SequenceEvaluator_1) == 0x001A08, "Member 'UCH_Hacker_AnimBP_C::AnimGraphNode_SequenceEvaluator_1' has a wrong offset!");
static_assert(offsetof(UCH_Hacker_AnimBP_C, AnimGraphNode_BlendListByBool_4) == 0x001A58, "Member 'UCH_Hacker_AnimBP_C::AnimGraphNode_BlendListByBool_4' has a wrong offset!");
static_assert(offsetof(UCH_Hacker_AnimBP_C, AnimGraphNode_StateResult_2) == 0x001AF8, "Member 'UCH_Hacker_AnimBP_C::AnimGraphNode_StateResult_2' has a wrong offset!");
static_assert(offsetof(UCH_Hacker_AnimBP_C, AnimGraphNode_StateMachine_1) == 0x001B28, "Member 'UCH_Hacker_AnimBP_C::AnimGraphNode_StateMachine_1' has a wrong offset!");
static_assert(offsetof(UCH_Hacker_AnimBP_C, AnimGraphNode_SaveCachedPose_4) == 0x001BD8, "Member 'UCH_Hacker_AnimBP_C::AnimGraphNode_SaveCachedPose_4' has a wrong offset!");
static_assert(offsetof(UCH_Hacker_AnimBP_C, AnimGraphNode_UseCachedPose_8) == 0x001D30, "Member 'UCH_Hacker_AnimBP_C::AnimGraphNode_UseCachedPose_8' has a wrong offset!");
static_assert(offsetof(UCH_Hacker_AnimBP_C, AnimGraphNode_LocalToComponentSpace_1) == 0x001D58, "Member 'UCH_Hacker_AnimBP_C::AnimGraphNode_LocalToComponentSpace_1' has a wrong offset!");
static_assert(offsetof(UCH_Hacker_AnimBP_C, AnimGraphNode_UseCachedPose_7) == 0x001D78, "Member 'UCH_Hacker_AnimBP_C::AnimGraphNode_UseCachedPose_7' has a wrong offset!");
static_assert(offsetof(UCH_Hacker_AnimBP_C, AnimGraphNode_LayeredBoneBlend_2) == 0x001DA0, "Member 'UCH_Hacker_AnimBP_C::AnimGraphNode_LayeredBoneBlend_2' has a wrong offset!");
static_assert(offsetof(UCH_Hacker_AnimBP_C, AnimGraphNode_LegIK) == 0x001E60, "Member 'UCH_Hacker_AnimBP_C::AnimGraphNode_LegIK' has a wrong offset!");
static_assert(offsetof(UCH_Hacker_AnimBP_C, AnimGraphNode_LocalToComponentSpace) == 0x001F58, "Member 'UCH_Hacker_AnimBP_C::AnimGraphNode_LocalToComponentSpace' has a wrong offset!");
static_assert(offsetof(UCH_Hacker_AnimBP_C, AnimGraphNode_ModifyBone_2) == 0x001F78, "Member 'UCH_Hacker_AnimBP_C::AnimGraphNode_ModifyBone_2' has a wrong offset!");
static_assert(offsetof(UCH_Hacker_AnimBP_C, AnimGraphNode_BoneDrivenController_5) == 0x002080, "Member 'UCH_Hacker_AnimBP_C::AnimGraphNode_BoneDrivenController_5' has a wrong offset!");
static_assert(offsetof(UCH_Hacker_AnimBP_C, AnimGraphNode_BoneDrivenController_4) == 0x002198, "Member 'UCH_Hacker_AnimBP_C::AnimGraphNode_BoneDrivenController_4' has a wrong offset!");
static_assert(offsetof(UCH_Hacker_AnimBP_C, AnimGraphNode_BoneDrivenController_3) == 0x0022B0, "Member 'UCH_Hacker_AnimBP_C::AnimGraphNode_BoneDrivenController_3' has a wrong offset!");
static_assert(offsetof(UCH_Hacker_AnimBP_C, AnimGraphNode_BoneDrivenController_2) == 0x0023C8, "Member 'UCH_Hacker_AnimBP_C::AnimGraphNode_BoneDrivenController_2' has a wrong offset!");
static_assert(offsetof(UCH_Hacker_AnimBP_C, AnimGraphNode_BoneDrivenController_1) == 0x0024E0, "Member 'UCH_Hacker_AnimBP_C::AnimGraphNode_BoneDrivenController_1' has a wrong offset!");
static_assert(offsetof(UCH_Hacker_AnimBP_C, AnimGraphNode_BoneDrivenController) == 0x0025F8, "Member 'UCH_Hacker_AnimBP_C::AnimGraphNode_BoneDrivenController' has a wrong offset!");
static_assert(offsetof(UCH_Hacker_AnimBP_C, AnimGraphNode_ModifyBone_1) == 0x002710, "Member 'UCH_Hacker_AnimBP_C::AnimGraphNode_ModifyBone_1' has a wrong offset!");
static_assert(offsetof(UCH_Hacker_AnimBP_C, AnimGraphNode_SaveCachedPose_3) == 0x002818, "Member 'UCH_Hacker_AnimBP_C::AnimGraphNode_SaveCachedPose_3' has a wrong offset!");
static_assert(offsetof(UCH_Hacker_AnimBP_C, AnimGraphNode_Slot_4) == 0x002970, "Member 'UCH_Hacker_AnimBP_C::AnimGraphNode_Slot_4' has a wrong offset!");
static_assert(offsetof(UCH_Hacker_AnimBP_C, AnimGraphNode_SaveCachedPose_2) == 0x0029B8, "Member 'UCH_Hacker_AnimBP_C::AnimGraphNode_SaveCachedPose_2' has a wrong offset!");
static_assert(offsetof(UCH_Hacker_AnimBP_C, AnimGraphNode_ControlRig) == 0x002B10, "Member 'UCH_Hacker_AnimBP_C::AnimGraphNode_ControlRig' has a wrong offset!");
static_assert(offsetof(UCH_Hacker_AnimBP_C, AnimGraphNode_ModifyBone) == 0x002E78, "Member 'UCH_Hacker_AnimBP_C::AnimGraphNode_ModifyBone' has a wrong offset!");
static_assert(offsetof(UCH_Hacker_AnimBP_C, AnimGraphNode_BlendListByBool_3) == 0x002F80, "Member 'UCH_Hacker_AnimBP_C::AnimGraphNode_BlendListByBool_3' has a wrong offset!");
static_assert(offsetof(UCH_Hacker_AnimBP_C, AnimGraphNode_TwoBoneIK_1) == 0x003020, "Member 'UCH_Hacker_AnimBP_C::AnimGraphNode_TwoBoneIK_1' has a wrong offset!");
static_assert(offsetof(UCH_Hacker_AnimBP_C, AnimGraphNode_SequencePlayer_6) == 0x003200, "Member 'UCH_Hacker_AnimBP_C::AnimGraphNode_SequencePlayer_6' has a wrong offset!");
static_assert(offsetof(UCH_Hacker_AnimBP_C, AnimGraphNode_SequencePlayer_5) == 0x003280, "Member 'UCH_Hacker_AnimBP_C::AnimGraphNode_SequencePlayer_5' has a wrong offset!");
static_assert(offsetof(UCH_Hacker_AnimBP_C, AnimGraphNode_UseCachedPose_6) == 0x003300, "Member 'UCH_Hacker_AnimBP_C::AnimGraphNode_UseCachedPose_6' has a wrong offset!");
static_assert(offsetof(UCH_Hacker_AnimBP_C, AnimGraphNode_UseCachedPose_5) == 0x003328, "Member 'UCH_Hacker_AnimBP_C::AnimGraphNode_UseCachedPose_5' has a wrong offset!");
static_assert(offsetof(UCH_Hacker_AnimBP_C, AnimGraphNode_Slot_3) == 0x003350, "Member 'UCH_Hacker_AnimBP_C::AnimGraphNode_Slot_3' has a wrong offset!");
static_assert(offsetof(UCH_Hacker_AnimBP_C, AnimGraphNode_UseCachedPose_4) == 0x003398, "Member 'UCH_Hacker_AnimBP_C::AnimGraphNode_UseCachedPose_4' has a wrong offset!");
static_assert(offsetof(UCH_Hacker_AnimBP_C, AnimGraphNode_TwoBoneIK) == 0x0033C0, "Member 'UCH_Hacker_AnimBP_C::AnimGraphNode_TwoBoneIK' has a wrong offset!");
static_assert(offsetof(UCH_Hacker_AnimBP_C, AnimGraphNode_UseCachedPose_3) == 0x0035A0, "Member 'UCH_Hacker_AnimBP_C::AnimGraphNode_UseCachedPose_3' has a wrong offset!");
static_assert(offsetof(UCH_Hacker_AnimBP_C, AnimGraphNode_SaveCachedPose_1) == 0x0035C8, "Member 'UCH_Hacker_AnimBP_C::AnimGraphNode_SaveCachedPose_1' has a wrong offset!");
static_assert(offsetof(UCH_Hacker_AnimBP_C, AnimGraphNode_SaveCachedPose) == 0x003720, "Member 'UCH_Hacker_AnimBP_C::AnimGraphNode_SaveCachedPose' has a wrong offset!");
static_assert(offsetof(UCH_Hacker_AnimBP_C, AnimGraphNode_Slot_2) == 0x003878, "Member 'UCH_Hacker_AnimBP_C::AnimGraphNode_Slot_2' has a wrong offset!");
static_assert(offsetof(UCH_Hacker_AnimBP_C, AnimGraphNode_UseCachedPose_2) == 0x0038C0, "Member 'UCH_Hacker_AnimBP_C::AnimGraphNode_UseCachedPose_2' has a wrong offset!");
static_assert(offsetof(UCH_Hacker_AnimBP_C, AnimGraphNode_UseCachedPose_1) == 0x0038E8, "Member 'UCH_Hacker_AnimBP_C::AnimGraphNode_UseCachedPose_1' has a wrong offset!");
static_assert(offsetof(UCH_Hacker_AnimBP_C, AnimGraphNode_LayeredBoneBlend_1) == 0x003910, "Member 'UCH_Hacker_AnimBP_C::AnimGraphNode_LayeredBoneBlend_1' has a wrong offset!");
static_assert(offsetof(UCH_Hacker_AnimBP_C, AnimGraphNode_TransitionResult_1) == 0x0039D0, "Member 'UCH_Hacker_AnimBP_C::AnimGraphNode_TransitionResult_1' has a wrong offset!");
static_assert(offsetof(UCH_Hacker_AnimBP_C, AnimGraphNode_TransitionResult) == 0x0039F8, "Member 'UCH_Hacker_AnimBP_C::AnimGraphNode_TransitionResult' has a wrong offset!");
static_assert(offsetof(UCH_Hacker_AnimBP_C, AnimGraphNode_SequencePlayer_4) == 0x003A20, "Member 'UCH_Hacker_AnimBP_C::AnimGraphNode_SequencePlayer_4' has a wrong offset!");
static_assert(offsetof(UCH_Hacker_AnimBP_C, AnimGraphNode_BlendListByBool_2) == 0x003AA0, "Member 'UCH_Hacker_AnimBP_C::AnimGraphNode_BlendListByBool_2' has a wrong offset!");
static_assert(offsetof(UCH_Hacker_AnimBP_C, AnimGraphNode_ApplyAdditive) == 0x003B40, "Member 'UCH_Hacker_AnimBP_C::AnimGraphNode_ApplyAdditive' has a wrong offset!");
static_assert(offsetof(UCH_Hacker_AnimBP_C, AnimGraphNode_SequenceEvaluator) == 0x003C08, "Member 'UCH_Hacker_AnimBP_C::AnimGraphNode_SequenceEvaluator' has a wrong offset!");
static_assert(offsetof(UCH_Hacker_AnimBP_C, AnimGraphNode_SequencePlayer_3) == 0x003C58, "Member 'UCH_Hacker_AnimBP_C::AnimGraphNode_SequencePlayer_3' has a wrong offset!");
static_assert(offsetof(UCH_Hacker_AnimBP_C, AnimGraphNode_StateResult_1) == 0x003CD8, "Member 'UCH_Hacker_AnimBP_C::AnimGraphNode_StateResult_1' has a wrong offset!");
static_assert(offsetof(UCH_Hacker_AnimBP_C, AnimGraphNode_SequencePlayer_2) == 0x003D08, "Member 'UCH_Hacker_AnimBP_C::AnimGraphNode_SequencePlayer_2' has a wrong offset!");
static_assert(offsetof(UCH_Hacker_AnimBP_C, AnimGraphNode_StateResult) == 0x003D88, "Member 'UCH_Hacker_AnimBP_C::AnimGraphNode_StateResult' has a wrong offset!");
static_assert(offsetof(UCH_Hacker_AnimBP_C, AnimGraphNode_StateMachine) == 0x003DB8, "Member 'UCH_Hacker_AnimBP_C::AnimGraphNode_StateMachine' has a wrong offset!");
static_assert(offsetof(UCH_Hacker_AnimBP_C, AnimGraphNode_Slot_1) == 0x003E68, "Member 'UCH_Hacker_AnimBP_C::AnimGraphNode_Slot_1' has a wrong offset!");
static_assert(offsetof(UCH_Hacker_AnimBP_C, AnimGraphNode_Root) == 0x003EB0, "Member 'UCH_Hacker_AnimBP_C::AnimGraphNode_Root' has a wrong offset!");
static_assert(offsetof(UCH_Hacker_AnimBP_C, AnimGraphNode_BlendListByBool_1) == 0x003EE0, "Member 'UCH_Hacker_AnimBP_C::AnimGraphNode_BlendListByBool_1' has a wrong offset!");
static_assert(offsetof(UCH_Hacker_AnimBP_C, AnimGraphNode_SequencePlayer_1) == 0x003F80, "Member 'UCH_Hacker_AnimBP_C::AnimGraphNode_SequencePlayer_1' has a wrong offset!");
static_assert(offsetof(UCH_Hacker_AnimBP_C, AnimGraphNode_SequencePlayer) == 0x004000, "Member 'UCH_Hacker_AnimBP_C::AnimGraphNode_SequencePlayer' has a wrong offset!");
static_assert(offsetof(UCH_Hacker_AnimBP_C, AnimGraphNode_BlendListByEnum) == 0x004080, "Member 'UCH_Hacker_AnimBP_C::AnimGraphNode_BlendListByEnum' has a wrong offset!");
static_assert(offsetof(UCH_Hacker_AnimBP_C, AnimGraphNode_Slot) == 0x004130, "Member 'UCH_Hacker_AnimBP_C::AnimGraphNode_Slot' has a wrong offset!");
static_assert(offsetof(UCH_Hacker_AnimBP_C, AnimGraphNode_LayeredBoneBlend) == 0x004178, "Member 'UCH_Hacker_AnimBP_C::AnimGraphNode_LayeredBoneBlend' has a wrong offset!");
static_assert(offsetof(UCH_Hacker_AnimBP_C, AnimGraphNode_UseCachedPose) == 0x004238, "Member 'UCH_Hacker_AnimBP_C::AnimGraphNode_UseCachedPose' has a wrong offset!");
static_assert(offsetof(UCH_Hacker_AnimBP_C, AnimGraphNode_BlendListByBool) == 0x004260, "Member 'UCH_Hacker_AnimBP_C::AnimGraphNode_BlendListByBool' has a wrong offset!");
static_assert(offsetof(UCH_Hacker_AnimBP_C, EquippedWeapon) == 0x004300, "Member 'UCH_Hacker_AnimBP_C::EquippedWeapon' has a wrong offset!");
static_assert(offsetof(UCH_Hacker_AnimBP_C, LastWeaponRotation) == 0x004308, "Member 'UCH_Hacker_AnimBP_C::LastWeaponRotation' has a wrong offset!");
static_assert(offsetof(UCH_Hacker_AnimBP_C, LastWeaponLocation) == 0x004314, "Member 'UCH_Hacker_AnimBP_C::LastWeaponLocation' has a wrong offset!");
static_assert(offsetof(UCH_Hacker_AnimBP_C, Delta) == 0x004320, "Member 'UCH_Hacker_AnimBP_C::Delta' has a wrong offset!");
static_assert(offsetof(UCH_Hacker_AnimBP_C, HasEquippedWeapon) == 0x004324, "Member 'UCH_Hacker_AnimBP_C::HasEquippedWeapon' has a wrong offset!");
static_assert(offsetof(UCH_Hacker_AnimBP_C, WalkProgress) == 0x004328, "Member 'UCH_Hacker_AnimBP_C::WalkProgress' has a wrong offset!");
static_assert(offsetof(UCH_Hacker_AnimBP_C, RunProgress) == 0x00432C, "Member 'UCH_Hacker_AnimBP_C::RunProgress' has a wrong offset!");
static_assert(offsetof(UCH_Hacker_AnimBP_C, CrawlProgress) == 0x004330, "Member 'UCH_Hacker_AnimBP_C::CrawlProgress' has a wrong offset!");
static_assert(offsetof(UCH_Hacker_AnimBP_C, MovementSpeed) == 0x004334, "Member 'UCH_Hacker_AnimBP_C::MovementSpeed' has a wrong offset!");
static_assert(offsetof(UCH_Hacker_AnimBP_C, WalkPhaseUpdate) == 0x004338, "Member 'UCH_Hacker_AnimBP_C::WalkPhaseUpdate' has a wrong offset!");
static_assert(offsetof(UCH_Hacker_AnimBP_C, IsSprinting) == 0x004339, "Member 'UCH_Hacker_AnimBP_C::IsSprinting' has a wrong offset!");
static_assert(offsetof(UCH_Hacker_AnimBP_C, Mesh) == 0x004340, "Member 'UCH_Hacker_AnimBP_C::Mesh' has a wrong offset!");
static_assert(offsetof(UCH_Hacker_AnimBP_C, GunTransform) == 0x004350, "Member 'UCH_Hacker_AnimBP_C::GunTransform' has a wrong offset!");
static_assert(offsetof(UCH_Hacker_AnimBP_C, WeaponSwaySmoothOffset) == 0x004380, "Member 'UCH_Hacker_AnimBP_C::WeaponSwaySmoothOffset' has a wrong offset!");
static_assert(offsetof(UCH_Hacker_AnimBP_C, WeaponSwaySmoothRotation) == 0x004388, "Member 'UCH_Hacker_AnimBP_C::WeaponSwaySmoothRotation' has a wrong offset!");
static_assert(offsetof(UCH_Hacker_AnimBP_C, EyesOffset) == 0x004390, "Member 'UCH_Hacker_AnimBP_C::EyesOffset' has a wrong offset!");
static_assert(offsetof(UCH_Hacker_AnimBP_C, IdleSequence) == 0x0043A0, "Member 'UCH_Hacker_AnimBP_C::IdleSequence' has a wrong offset!");
static_assert(offsetof(UCH_Hacker_AnimBP_C, IsMoving) == 0x0043A8, "Member 'UCH_Hacker_AnimBP_C::IsMoving' has a wrong offset!");
static_assert(offsetof(UCH_Hacker_AnimBP_C, GameplayWeaponViewOffset) == 0x0043AC, "Member 'UCH_Hacker_AnimBP_C::GameplayWeaponViewOffset' has a wrong offset!");
static_assert(offsetof(UCH_Hacker_AnimBP_C, WalkSequence) == 0x0043B8, "Member 'UCH_Hacker_AnimBP_C::WalkSequence' has a wrong offset!");
static_assert(offsetof(UCH_Hacker_AnimBP_C, SprintSequence) == 0x0043C0, "Member 'UCH_Hacker_AnimBP_C::SprintSequence' has a wrong offset!");
static_assert(offsetof(UCH_Hacker_AnimBP_C, DefaultWeaponlessIdle) == 0x0043C8, "Member 'UCH_Hacker_AnimBP_C::DefaultWeaponlessIdle' has a wrong offset!");
static_assert(offsetof(UCH_Hacker_AnimBP_C, UseIK) == 0x0043D0, "Member 'UCH_Hacker_AnimBP_C::UseIK' has a wrong offset!");
static_assert(offsetof(UCH_Hacker_AnimBP_C, LeaningLeftOffset) == 0x0043E0, "Member 'UCH_Hacker_AnimBP_C::LeaningLeftOffset' has a wrong offset!");
static_assert(offsetof(UCH_Hacker_AnimBP_C, LeaningRightOffset) == 0x004410, "Member 'UCH_Hacker_AnimBP_C::LeaningRightOffset' has a wrong offset!");
static_assert(offsetof(UCH_Hacker_AnimBP_C, LeaningProgress) == 0x004440, "Member 'UCH_Hacker_AnimBP_C::LeaningProgress' has a wrong offset!");
static_assert(offsetof(UCH_Hacker_AnimBP_C, Camera_Location) == 0x004444, "Member 'UCH_Hacker_AnimBP_C::Camera_Location' has a wrong offset!");
static_assert(offsetof(UCH_Hacker_AnimBP_C, Forward_Vector) == 0x004450, "Member 'UCH_Hacker_AnimBP_C::Forward_Vector' has a wrong offset!");
static_assert(offsetof(UCH_Hacker_AnimBP_C, Aim_Rotation) == 0x00445C, "Member 'UCH_Hacker_AnimBP_C::Aim_Rotation' has a wrong offset!");
static_assert(offsetof(UCH_Hacker_AnimBP_C, Prev_Camera_Location) == 0x004468, "Member 'UCH_Hacker_AnimBP_C::Prev_Camera_Location' has a wrong offset!");
static_assert(offsetof(UCH_Hacker_AnimBP_C, WeaponSwayOffsetRotation) == 0x004474, "Member 'UCH_Hacker_AnimBP_C::WeaponSwayOffsetRotation' has a wrong offset!");
static_assert(offsetof(UCH_Hacker_AnimBP_C, WeaponSwayOffsetLocation) == 0x004480, "Member 'UCH_Hacker_AnimBP_C::WeaponSwayOffsetLocation' has a wrong offset!");
static_assert(offsetof(UCH_Hacker_AnimBP_C, Aim_Rotation_WS) == 0x00448C, "Member 'UCH_Hacker_AnimBP_C::Aim_Rotation_WS' has a wrong offset!");
static_assert(offsetof(UCH_Hacker_AnimBP_C, MovementDirection) == 0x004498, "Member 'UCH_Hacker_AnimBP_C::MovementDirection' has a wrong offset!");
static_assert(offsetof(UCH_Hacker_AnimBP_C, MovingRight) == 0x0044A0, "Member 'UCH_Hacker_AnimBP_C::MovingRight' has a wrong offset!");
static_assert(offsetof(UCH_Hacker_AnimBP_C, MovingForward) == 0x0044A1, "Member 'UCH_Hacker_AnimBP_C::MovingForward' has a wrong offset!");
static_assert(offsetof(UCH_Hacker_AnimBP_C, CrouchAlpha) == 0x0044A4, "Member 'UCH_Hacker_AnimBP_C::CrouchAlpha' has a wrong offset!");
static_assert(offsetof(UCH_Hacker_AnimBP_C, StandAlpha) == 0x0044A8, "Member 'UCH_Hacker_AnimBP_C::StandAlpha' has a wrong offset!");
static_assert(offsetof(UCH_Hacker_AnimBP_C, ProceduralMovementAlpha) == 0x0044AC, "Member 'UCH_Hacker_AnimBP_C::ProceduralMovementAlpha' has a wrong offset!");
static_assert(offsetof(UCH_Hacker_AnimBP_C, IdleOverride) == 0x0044B0, "Member 'UCH_Hacker_AnimBP_C::IdleOverride' has a wrong offset!");
static_assert(offsetof(UCH_Hacker_AnimBP_C, WeaponViewOffset) == 0x0044B8, "Member 'UCH_Hacker_AnimBP_C::WeaponViewOffset' has a wrong offset!");
static_assert(offsetof(UCH_Hacker_AnimBP_C, WeaponMesh) == 0x0044C8, "Member 'UCH_Hacker_AnimBP_C::WeaponMesh' has a wrong offset!");
static_assert(offsetof(UCH_Hacker_AnimBP_C, LegIKAlpha) == 0x0044D0, "Member 'UCH_Hacker_AnimBP_C::LegIKAlpha' has a wrong offset!");
static_assert(offsetof(UCH_Hacker_AnimBP_C, IsGrounded) == 0x0044D4, "Member 'UCH_Hacker_AnimBP_C::IsGrounded' has a wrong offset!");
static_assert(offsetof(UCH_Hacker_AnimBP_C, IsStrafing) == 0x0044D5, "Member 'UCH_Hacker_AnimBP_C::IsStrafing' has a wrong offset!");
static_assert(offsetof(UCH_Hacker_AnimBP_C, AirLandingAlpha) == 0x0044D8, "Member 'UCH_Hacker_AnimBP_C::AirLandingAlpha' has a wrong offset!");
static_assert(offsetof(UCH_Hacker_AnimBP_C, IsPlayingCinematic) == 0x0044DC, "Member 'UCH_Hacker_AnimBP_C::IsPlayingCinematic' has a wrong offset!");
static_assert(offsetof(UCH_Hacker_AnimBP_C, IsMountedOnLadder) == 0x0044DD, "Member 'UCH_Hacker_AnimBP_C::IsMountedOnLadder' has a wrong offset!");
static_assert(offsetof(UCH_Hacker_AnimBP_C, LadderFootDown) == 0x0044DE, "Member 'UCH_Hacker_AnimBP_C::LadderFootDown' has a wrong offset!");
static_assert(offsetof(UCH_Hacker_AnimBP_C, AimingProgress) == 0x0044E0, "Member 'UCH_Hacker_AnimBP_C::AimingProgress' has a wrong offset!");
static_assert(offsetof(UCH_Hacker_AnimBP_C, IsWeaponObstructed) == 0x0044E4, "Member 'UCH_Hacker_AnimBP_C::IsWeaponObstructed' has a wrong offset!");
static_assert(offsetof(UCH_Hacker_AnimBP_C, WeaponObstructedSequence) == 0x0044E8, "Member 'UCH_Hacker_AnimBP_C::WeaponObstructedSequence' has a wrong offset!");

}

