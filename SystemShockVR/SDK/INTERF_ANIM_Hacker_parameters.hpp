#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: INTERF_ANIM_Hacker

#include "Basic.hpp"

#include "ENUM_LeftRight_structs.hpp"
#include "CoreUObject_structs.hpp"


namespace SDK::Params
{

// Function INTERF_ANIM_Hacker.INTERF_ANIM_Hacker_C.SetWalkPhase
// 0x000C (0x000C - 0x0000)
struct INTERF_ANIM_Hacker_C_SetWalkPhase final
{
public:
	float                                         FootstepProgress;                                  // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         FootstepSign;                                      // 0x0004(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Result;                                            // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(INTERF_ANIM_Hacker_C_SetWalkPhase) == 0x000004, "Wrong alignment on INTERF_ANIM_Hacker_C_SetWalkPhase");
static_assert(sizeof(INTERF_ANIM_Hacker_C_SetWalkPhase) == 0x00000C, "Wrong size on INTERF_ANIM_Hacker_C_SetWalkPhase");
static_assert(offsetof(INTERF_ANIM_Hacker_C_SetWalkPhase, FootstepProgress) == 0x000000, "Member 'INTERF_ANIM_Hacker_C_SetWalkPhase::FootstepProgress' has a wrong offset!");
static_assert(offsetof(INTERF_ANIM_Hacker_C_SetWalkPhase, FootstepSign) == 0x000004, "Member 'INTERF_ANIM_Hacker_C_SetWalkPhase::FootstepSign' has a wrong offset!");
static_assert(offsetof(INTERF_ANIM_Hacker_C_SetWalkPhase, Result) == 0x000008, "Member 'INTERF_ANIM_Hacker_C_SetWalkPhase::Result' has a wrong offset!");

// Function INTERF_ANIM_Hacker.INTERF_ANIM_Hacker_C.SetEquippedItem
// 0x0010 (0x0010 - 0x0000)
struct INTERF_ANIM_Hacker_C_SetEquippedItem final
{
public:
	class UITEM_WeaponBase_C*                     Item;                                              // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Result;                                            // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(INTERF_ANIM_Hacker_C_SetEquippedItem) == 0x000008, "Wrong alignment on INTERF_ANIM_Hacker_C_SetEquippedItem");
static_assert(sizeof(INTERF_ANIM_Hacker_C_SetEquippedItem) == 0x000010, "Wrong size on INTERF_ANIM_Hacker_C_SetEquippedItem");
static_assert(offsetof(INTERF_ANIM_Hacker_C_SetEquippedItem, Item) == 0x000000, "Member 'INTERF_ANIM_Hacker_C_SetEquippedItem::Item' has a wrong offset!");
static_assert(offsetof(INTERF_ANIM_Hacker_C_SetEquippedItem, Result) == 0x000008, "Member 'INTERF_ANIM_Hacker_C_SetEquippedItem::Result' has a wrong offset!");

// Function INTERF_ANIM_Hacker.INTERF_ANIM_Hacker_C.SetMovementParameters
// 0x0014 (0x0014 - 0x0000)
struct INTERF_ANIM_Hacker_C_SetMovementParameters final
{
public:
	float                                         Speed;                                             // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector2D                              Direction;                                         // 0x0004(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CrouchProgress;                                    // 0x000C(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Result;                                            // 0x0010(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(INTERF_ANIM_Hacker_C_SetMovementParameters) == 0x000004, "Wrong alignment on INTERF_ANIM_Hacker_C_SetMovementParameters");
static_assert(sizeof(INTERF_ANIM_Hacker_C_SetMovementParameters) == 0x000014, "Wrong size on INTERF_ANIM_Hacker_C_SetMovementParameters");
static_assert(offsetof(INTERF_ANIM_Hacker_C_SetMovementParameters, Speed) == 0x000000, "Member 'INTERF_ANIM_Hacker_C_SetMovementParameters::Speed' has a wrong offset!");
static_assert(offsetof(INTERF_ANIM_Hacker_C_SetMovementParameters, Direction) == 0x000004, "Member 'INTERF_ANIM_Hacker_C_SetMovementParameters::Direction' has a wrong offset!");
static_assert(offsetof(INTERF_ANIM_Hacker_C_SetMovementParameters, CrouchProgress) == 0x00000C, "Member 'INTERF_ANIM_Hacker_C_SetMovementParameters::CrouchProgress' has a wrong offset!");
static_assert(offsetof(INTERF_ANIM_Hacker_C_SetMovementParameters, Result) == 0x000010, "Member 'INTERF_ANIM_Hacker_C_SetMovementParameters::Result' has a wrong offset!");

// Function INTERF_ANIM_Hacker.INTERF_ANIM_Hacker_C.SetIsSprinting
// 0x0002 (0x0002 - 0x0000)
struct INTERF_ANIM_Hacker_C_SetIsSprinting final
{
public:
	bool                                          State;                                             // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Result;                                            // 0x0001(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(INTERF_ANIM_Hacker_C_SetIsSprinting) == 0x000001, "Wrong alignment on INTERF_ANIM_Hacker_C_SetIsSprinting");
static_assert(sizeof(INTERF_ANIM_Hacker_C_SetIsSprinting) == 0x000002, "Wrong size on INTERF_ANIM_Hacker_C_SetIsSprinting");
static_assert(offsetof(INTERF_ANIM_Hacker_C_SetIsSprinting, State) == 0x000000, "Member 'INTERF_ANIM_Hacker_C_SetIsSprinting::State' has a wrong offset!");
static_assert(offsetof(INTERF_ANIM_Hacker_C_SetIsSprinting, Result) == 0x000001, "Member 'INTERF_ANIM_Hacker_C_SetIsSprinting::Result' has a wrong offset!");

// Function INTERF_ANIM_Hacker.INTERF_ANIM_Hacker_C.SetLeanProgress
// 0x0008 (0x0008 - 0x0000)
struct INTERF_ANIM_Hacker_C_SetLeanProgress final
{
public:
	float                                         SignedProgress;                                    // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Result;                                            // 0x0004(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(INTERF_ANIM_Hacker_C_SetLeanProgress) == 0x000004, "Wrong alignment on INTERF_ANIM_Hacker_C_SetLeanProgress");
static_assert(sizeof(INTERF_ANIM_Hacker_C_SetLeanProgress) == 0x000008, "Wrong size on INTERF_ANIM_Hacker_C_SetLeanProgress");
static_assert(offsetof(INTERF_ANIM_Hacker_C_SetLeanProgress, SignedProgress) == 0x000000, "Member 'INTERF_ANIM_Hacker_C_SetLeanProgress::SignedProgress' has a wrong offset!");
static_assert(offsetof(INTERF_ANIM_Hacker_C_SetLeanProgress, Result) == 0x000004, "Member 'INTERF_ANIM_Hacker_C_SetLeanProgress::Result' has a wrong offset!");

// Function INTERF_ANIM_Hacker.INTERF_ANIM_Hacker_C.SetCameraTarget
// 0x001C (0x001C - 0x0000)
struct INTERF_ANIM_Hacker_C_SetCameraTarget final
{
public:
	struct FRotator                               LookRotation;                                      // 0x0000(0x000C)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FVector                                HeadLocation;                                      // 0x000C(0x000C)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Result;                                            // 0x0018(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(INTERF_ANIM_Hacker_C_SetCameraTarget) == 0x000004, "Wrong alignment on INTERF_ANIM_Hacker_C_SetCameraTarget");
static_assert(sizeof(INTERF_ANIM_Hacker_C_SetCameraTarget) == 0x00001C, "Wrong size on INTERF_ANIM_Hacker_C_SetCameraTarget");
static_assert(offsetof(INTERF_ANIM_Hacker_C_SetCameraTarget, LookRotation) == 0x000000, "Member 'INTERF_ANIM_Hacker_C_SetCameraTarget::LookRotation' has a wrong offset!");
static_assert(offsetof(INTERF_ANIM_Hacker_C_SetCameraTarget, HeadLocation) == 0x00000C, "Member 'INTERF_ANIM_Hacker_C_SetCameraTarget::HeadLocation' has a wrong offset!");
static_assert(offsetof(INTERF_ANIM_Hacker_C_SetCameraTarget, Result) == 0x000018, "Member 'INTERF_ANIM_Hacker_C_SetCameraTarget::Result' has a wrong offset!");

// Function INTERF_ANIM_Hacker.INTERF_ANIM_Hacker_C.SetOverrideIdleSequence
// 0x0010 (0x0010 - 0x0000)
struct INTERF_ANIM_Hacker_C_SetOverrideIdleSequence final
{
public:
	class UAnimSequenceBase*                      OverrideIdleSequence;                              // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          IsCinematic;                                       // 0x0008(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Result;                                            // 0x0009(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(INTERF_ANIM_Hacker_C_SetOverrideIdleSequence) == 0x000008, "Wrong alignment on INTERF_ANIM_Hacker_C_SetOverrideIdleSequence");
static_assert(sizeof(INTERF_ANIM_Hacker_C_SetOverrideIdleSequence) == 0x000010, "Wrong size on INTERF_ANIM_Hacker_C_SetOverrideIdleSequence");
static_assert(offsetof(INTERF_ANIM_Hacker_C_SetOverrideIdleSequence, OverrideIdleSequence) == 0x000000, "Member 'INTERF_ANIM_Hacker_C_SetOverrideIdleSequence::OverrideIdleSequence' has a wrong offset!");
static_assert(offsetof(INTERF_ANIM_Hacker_C_SetOverrideIdleSequence, IsCinematic) == 0x000008, "Member 'INTERF_ANIM_Hacker_C_SetOverrideIdleSequence::IsCinematic' has a wrong offset!");
static_assert(offsetof(INTERF_ANIM_Hacker_C_SetOverrideIdleSequence, Result) == 0x000009, "Member 'INTERF_ANIM_Hacker_C_SetOverrideIdleSequence::Result' has a wrong offset!");

// Function INTERF_ANIM_Hacker.INTERF_ANIM_Hacker_C.SetWeaponOffset
// 0x0010 (0x0010 - 0x0000)
struct INTERF_ANIM_Hacker_C_SetWeaponOffset final
{
public:
	struct FVector                                Offset;                                            // 0x0000(0x000C)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Result;                                            // 0x000C(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(INTERF_ANIM_Hacker_C_SetWeaponOffset) == 0x000004, "Wrong alignment on INTERF_ANIM_Hacker_C_SetWeaponOffset");
static_assert(sizeof(INTERF_ANIM_Hacker_C_SetWeaponOffset) == 0x000010, "Wrong size on INTERF_ANIM_Hacker_C_SetWeaponOffset");
static_assert(offsetof(INTERF_ANIM_Hacker_C_SetWeaponOffset, Offset) == 0x000000, "Member 'INTERF_ANIM_Hacker_C_SetWeaponOffset::Offset' has a wrong offset!");
static_assert(offsetof(INTERF_ANIM_Hacker_C_SetWeaponOffset, Result) == 0x00000C, "Member 'INTERF_ANIM_Hacker_C_SetWeaponOffset::Result' has a wrong offset!");

// Function INTERF_ANIM_Hacker.INTERF_ANIM_Hacker_C.SetUseIK
// 0x0002 (0x0002 - 0x0000)
struct INTERF_ANIM_Hacker_C_SetUseIK final
{
public:
	bool                                          UseIK;                                             // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Result;                                            // 0x0001(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(INTERF_ANIM_Hacker_C_SetUseIK) == 0x000001, "Wrong alignment on INTERF_ANIM_Hacker_C_SetUseIK");
static_assert(sizeof(INTERF_ANIM_Hacker_C_SetUseIK) == 0x000002, "Wrong size on INTERF_ANIM_Hacker_C_SetUseIK");
static_assert(offsetof(INTERF_ANIM_Hacker_C_SetUseIK, UseIK) == 0x000000, "Member 'INTERF_ANIM_Hacker_C_SetUseIK::UseIK' has a wrong offset!");
static_assert(offsetof(INTERF_ANIM_Hacker_C_SetUseIK, Result) == 0x000001, "Member 'INTERF_ANIM_Hacker_C_SetUseIK::Result' has a wrong offset!");

// Function INTERF_ANIM_Hacker.INTERF_ANIM_Hacker_C.GetCameraRootPos
// 0x000C (0x000C - 0x0000)
struct INTERF_ANIM_Hacker_C_GetCameraRootPos final
{
public:
	struct FVector                                Location;                                          // 0x0000(0x000C)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(INTERF_ANIM_Hacker_C_GetCameraRootPos) == 0x000004, "Wrong alignment on INTERF_ANIM_Hacker_C_GetCameraRootPos");
static_assert(sizeof(INTERF_ANIM_Hacker_C_GetCameraRootPos) == 0x00000C, "Wrong size on INTERF_ANIM_Hacker_C_GetCameraRootPos");
static_assert(offsetof(INTERF_ANIM_Hacker_C_GetCameraRootPos, Location) == 0x000000, "Member 'INTERF_ANIM_Hacker_C_GetCameraRootPos::Location' has a wrong offset!");

// Function INTERF_ANIM_Hacker.INTERF_ANIM_Hacker_C.SetLadderParams
// 0x0003 (0x0003 - 0x0000)
struct INTERF_ANIM_Hacker_C_SetLadderParams final
{
public:
	bool                                          IsMounted;                                         // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	ENUM_LeftRight                                RestingFootDown;                                   // 0x0001(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Result;                                            // 0x0002(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(INTERF_ANIM_Hacker_C_SetLadderParams) == 0x000001, "Wrong alignment on INTERF_ANIM_Hacker_C_SetLadderParams");
static_assert(sizeof(INTERF_ANIM_Hacker_C_SetLadderParams) == 0x000003, "Wrong size on INTERF_ANIM_Hacker_C_SetLadderParams");
static_assert(offsetof(INTERF_ANIM_Hacker_C_SetLadderParams, IsMounted) == 0x000000, "Member 'INTERF_ANIM_Hacker_C_SetLadderParams::IsMounted' has a wrong offset!");
static_assert(offsetof(INTERF_ANIM_Hacker_C_SetLadderParams, RestingFootDown) == 0x000001, "Member 'INTERF_ANIM_Hacker_C_SetLadderParams::RestingFootDown' has a wrong offset!");
static_assert(offsetof(INTERF_ANIM_Hacker_C_SetLadderParams, Result) == 0x000002, "Member 'INTERF_ANIM_Hacker_C_SetLadderParams::Result' has a wrong offset!");

// Function INTERF_ANIM_Hacker.INTERF_ANIM_Hacker_C.GetOverrideIdleSequence
// 0x0008 (0x0008 - 0x0000)
struct INTERF_ANIM_Hacker_C_GetOverrideIdleSequence final
{
public:
	class UAnimSequenceBase*                      Result;                                            // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(INTERF_ANIM_Hacker_C_GetOverrideIdleSequence) == 0x000008, "Wrong alignment on INTERF_ANIM_Hacker_C_GetOverrideIdleSequence");
static_assert(sizeof(INTERF_ANIM_Hacker_C_GetOverrideIdleSequence) == 0x000008, "Wrong size on INTERF_ANIM_Hacker_C_GetOverrideIdleSequence");
static_assert(offsetof(INTERF_ANIM_Hacker_C_GetOverrideIdleSequence, Result) == 0x000000, "Member 'INTERF_ANIM_Hacker_C_GetOverrideIdleSequence::Result' has a wrong offset!");

// Function INTERF_ANIM_Hacker.INTERF_ANIM_Hacker_C.SetIsGrounded
// 0x0002 (0x0002 - 0x0000)
struct INTERF_ANIM_Hacker_C_SetIsGrounded final
{
public:
	bool                                          IsGrounded;                                        // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Result;                                            // 0x0001(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(INTERF_ANIM_Hacker_C_SetIsGrounded) == 0x000001, "Wrong alignment on INTERF_ANIM_Hacker_C_SetIsGrounded");
static_assert(sizeof(INTERF_ANIM_Hacker_C_SetIsGrounded) == 0x000002, "Wrong size on INTERF_ANIM_Hacker_C_SetIsGrounded");
static_assert(offsetof(INTERF_ANIM_Hacker_C_SetIsGrounded, IsGrounded) == 0x000000, "Member 'INTERF_ANIM_Hacker_C_SetIsGrounded::IsGrounded' has a wrong offset!");
static_assert(offsetof(INTERF_ANIM_Hacker_C_SetIsGrounded, Result) == 0x000001, "Member 'INTERF_ANIM_Hacker_C_SetIsGrounded::Result' has a wrong offset!");

// Function INTERF_ANIM_Hacker.INTERF_ANIM_Hacker_C.SetAirLandingScale
// 0x0008 (0x0008 - 0x0000)
struct INTERF_ANIM_Hacker_C_SetAirLandingScale final
{
public:
	float                                         Scale;                                             // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Result;                                            // 0x0004(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(INTERF_ANIM_Hacker_C_SetAirLandingScale) == 0x000004, "Wrong alignment on INTERF_ANIM_Hacker_C_SetAirLandingScale");
static_assert(sizeof(INTERF_ANIM_Hacker_C_SetAirLandingScale) == 0x000008, "Wrong size on INTERF_ANIM_Hacker_C_SetAirLandingScale");
static_assert(offsetof(INTERF_ANIM_Hacker_C_SetAirLandingScale, Scale) == 0x000000, "Member 'INTERF_ANIM_Hacker_C_SetAirLandingScale::Scale' has a wrong offset!");
static_assert(offsetof(INTERF_ANIM_Hacker_C_SetAirLandingScale, Result) == 0x000004, "Member 'INTERF_ANIM_Hacker_C_SetAirLandingScale::Result' has a wrong offset!");

// Function INTERF_ANIM_Hacker.INTERF_ANIM_Hacker_C.SetAimProgress
// 0x0008 (0x0008 - 0x0000)
struct INTERF_ANIM_Hacker_C_SetAimProgress final
{
public:
	float                                         Progress;                                          // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Result;                                            // 0x0004(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(INTERF_ANIM_Hacker_C_SetAimProgress) == 0x000004, "Wrong alignment on INTERF_ANIM_Hacker_C_SetAimProgress");
static_assert(sizeof(INTERF_ANIM_Hacker_C_SetAimProgress) == 0x000008, "Wrong size on INTERF_ANIM_Hacker_C_SetAimProgress");
static_assert(offsetof(INTERF_ANIM_Hacker_C_SetAimProgress, Progress) == 0x000000, "Member 'INTERF_ANIM_Hacker_C_SetAimProgress::Progress' has a wrong offset!");
static_assert(offsetof(INTERF_ANIM_Hacker_C_SetAimProgress, Result) == 0x000004, "Member 'INTERF_ANIM_Hacker_C_SetAimProgress::Result' has a wrong offset!");

// Function INTERF_ANIM_Hacker.INTERF_ANIM_Hacker_C.UpdateEquippedItemSequences
// 0x0001 (0x0001 - 0x0000)
struct INTERF_ANIM_Hacker_C_UpdateEquippedItemSequences final
{
public:
	bool                                          Result;                                            // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(INTERF_ANIM_Hacker_C_UpdateEquippedItemSequences) == 0x000001, "Wrong alignment on INTERF_ANIM_Hacker_C_UpdateEquippedItemSequences");
static_assert(sizeof(INTERF_ANIM_Hacker_C_UpdateEquippedItemSequences) == 0x000001, "Wrong size on INTERF_ANIM_Hacker_C_UpdateEquippedItemSequences");
static_assert(offsetof(INTERF_ANIM_Hacker_C_UpdateEquippedItemSequences, Result) == 0x000000, "Member 'INTERF_ANIM_Hacker_C_UpdateEquippedItemSequences::Result' has a wrong offset!");

// Function INTERF_ANIM_Hacker.INTERF_ANIM_Hacker_C.SetWeaponObstructed
// 0x0002 (0x0002 - 0x0000)
struct INTERF_ANIM_Hacker_C_SetWeaponObstructed final
{
public:
	bool                                          Obstructed;                                        // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Result;                                            // 0x0001(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(INTERF_ANIM_Hacker_C_SetWeaponObstructed) == 0x000001, "Wrong alignment on INTERF_ANIM_Hacker_C_SetWeaponObstructed");
static_assert(sizeof(INTERF_ANIM_Hacker_C_SetWeaponObstructed) == 0x000002, "Wrong size on INTERF_ANIM_Hacker_C_SetWeaponObstructed");
static_assert(offsetof(INTERF_ANIM_Hacker_C_SetWeaponObstructed, Obstructed) == 0x000000, "Member 'INTERF_ANIM_Hacker_C_SetWeaponObstructed::Obstructed' has a wrong offset!");
static_assert(offsetof(INTERF_ANIM_Hacker_C_SetWeaponObstructed, Result) == 0x000001, "Member 'INTERF_ANIM_Hacker_C_SetWeaponObstructed::Result' has a wrong offset!");

}

