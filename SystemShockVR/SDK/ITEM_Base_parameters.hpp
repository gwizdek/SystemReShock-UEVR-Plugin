#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: ITEM_Base

#include "Basic.hpp"

#include "CoreGame_structs.hpp"
#include "CoreUObject_structs.hpp"


namespace SDK::Params
{

// Function ITEM_Base.ITEM_Base_C.DropEvent__DelegateSignature
// 0x0008 (0x0008 - 0x0000)
struct ITEM_Base_C_DropEvent__DelegateSignature final
{
public:
	class APICKUP_Base_C*                         Pickup;                                            // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(ITEM_Base_C_DropEvent__DelegateSignature) == 0x000008, "Wrong alignment on ITEM_Base_C_DropEvent__DelegateSignature");
static_assert(sizeof(ITEM_Base_C_DropEvent__DelegateSignature) == 0x000008, "Wrong size on ITEM_Base_C_DropEvent__DelegateSignature");
static_assert(offsetof(ITEM_Base_C_DropEvent__DelegateSignature, Pickup) == 0x000000, "Member 'ITEM_Base_C_DropEvent__DelegateSignature::Pickup' has a wrong offset!");

// Function ITEM_Base.ITEM_Base_C.CountChanged__DelegateSignature
// 0x0010 (0x0010 - 0x0000)
struct ITEM_Base_C_CountChanged__DelegateSignature final
{
public:
	class UITEM_Base_C*                           Item;                                              // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Count_0;                                           // 0x0008(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(ITEM_Base_C_CountChanged__DelegateSignature) == 0x000008, "Wrong alignment on ITEM_Base_C_CountChanged__DelegateSignature");
static_assert(sizeof(ITEM_Base_C_CountChanged__DelegateSignature) == 0x000010, "Wrong size on ITEM_Base_C_CountChanged__DelegateSignature");
static_assert(offsetof(ITEM_Base_C_CountChanged__DelegateSignature, Item) == 0x000000, "Member 'ITEM_Base_C_CountChanged__DelegateSignature::Item' has a wrong offset!");
static_assert(offsetof(ITEM_Base_C_CountChanged__DelegateSignature, Count_0) == 0x000008, "Member 'ITEM_Base_C_CountChanged__DelegateSignature::Count_0' has a wrong offset!");

// Function ITEM_Base.ITEM_Base_C.GetInventory
// 0x0020 (0x0020 - 0x0000)
struct ITEM_Base_C_GetInventory final
{
public:
	class UCOMP_Inventory_C*                      Inventory;                                         // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UObject*                                CallFunc_GetOuterObject_ReturnValue;               // 0x0008(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UCOMP_Inventory_C*                      K2Node_DynamicCast_AsCOMP_Inventory;               // 0x0010(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0018(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(ITEM_Base_C_GetInventory) == 0x000008, "Wrong alignment on ITEM_Base_C_GetInventory");
static_assert(sizeof(ITEM_Base_C_GetInventory) == 0x000020, "Wrong size on ITEM_Base_C_GetInventory");
static_assert(offsetof(ITEM_Base_C_GetInventory, Inventory) == 0x000000, "Member 'ITEM_Base_C_GetInventory::Inventory' has a wrong offset!");
static_assert(offsetof(ITEM_Base_C_GetInventory, CallFunc_GetOuterObject_ReturnValue) == 0x000008, "Member 'ITEM_Base_C_GetInventory::CallFunc_GetOuterObject_ReturnValue' has a wrong offset!");
static_assert(offsetof(ITEM_Base_C_GetInventory, K2Node_DynamicCast_AsCOMP_Inventory) == 0x000010, "Member 'ITEM_Base_C_GetInventory::K2Node_DynamicCast_AsCOMP_Inventory' has a wrong offset!");
static_assert(offsetof(ITEM_Base_C_GetInventory, K2Node_DynamicCast_bSuccess) == 0x000018, "Member 'ITEM_Base_C_GetInventory::K2Node_DynamicCast_bSuccess' has a wrong offset!");

// Function ITEM_Base.ITEM_Base_C.IsStackable
// 0x0002 (0x0002 - 0x0000)
struct ITEM_Base_C_IsStackable final
{
public:
	bool                                          Result;                                            // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_NotEqual_IntInt_ReturnValue;              // 0x0001(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(ITEM_Base_C_IsStackable) == 0x000001, "Wrong alignment on ITEM_Base_C_IsStackable");
static_assert(sizeof(ITEM_Base_C_IsStackable) == 0x000002, "Wrong size on ITEM_Base_C_IsStackable");
static_assert(offsetof(ITEM_Base_C_IsStackable, Result) == 0x000000, "Member 'ITEM_Base_C_IsStackable::Result' has a wrong offset!");
static_assert(offsetof(ITEM_Base_C_IsStackable, CallFunc_NotEqual_IntInt_ReturnValue) == 0x000001, "Member 'ITEM_Base_C_IsStackable::CallFunc_NotEqual_IntInt_ReturnValue' has a wrong offset!");

// Function ITEM_Base.ITEM_Base_C.ShouldAutoEquip
// 0x0002 (0x0002 - 0x0000)
struct ITEM_Base_C_ShouldAutoEquip final
{
public:
	bool                                          Result;                                            // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BooleanOR_ReturnValue;                    // 0x0001(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(ITEM_Base_C_ShouldAutoEquip) == 0x000001, "Wrong alignment on ITEM_Base_C_ShouldAutoEquip");
static_assert(sizeof(ITEM_Base_C_ShouldAutoEquip) == 0x000002, "Wrong size on ITEM_Base_C_ShouldAutoEquip");
static_assert(offsetof(ITEM_Base_C_ShouldAutoEquip, Result) == 0x000000, "Member 'ITEM_Base_C_ShouldAutoEquip::Result' has a wrong offset!");
static_assert(offsetof(ITEM_Base_C_ShouldAutoEquip, CallFunc_BooleanOR_ReturnValue) == 0x000001, "Member 'ITEM_Base_C_ShouldAutoEquip::CallFunc_BooleanOR_ReturnValue' has a wrong offset!");

// Function ITEM_Base.ITEM_Base_C.HasLinkedPickup
// 0x0002 (0x0002 - 0x0000)
struct ITEM_Base_C_HasLinkedPickup final
{
public:
	bool                                          Result;                                            // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0001(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(ITEM_Base_C_HasLinkedPickup) == 0x000001, "Wrong alignment on ITEM_Base_C_HasLinkedPickup");
static_assert(sizeof(ITEM_Base_C_HasLinkedPickup) == 0x000002, "Wrong size on ITEM_Base_C_HasLinkedPickup");
static_assert(offsetof(ITEM_Base_C_HasLinkedPickup, Result) == 0x000000, "Member 'ITEM_Base_C_HasLinkedPickup::Result' has a wrong offset!");
static_assert(offsetof(ITEM_Base_C_HasLinkedPickup, CallFunc_IsValid_ReturnValue) == 0x000001, "Member 'ITEM_Base_C_HasLinkedPickup::CallFunc_IsValid_ReturnValue' has a wrong offset!");

// Function ITEM_Base.ITEM_Base_C.GetLinkedPickup
// 0x0008 (0x0008 - 0x0000)
struct ITEM_Base_C_GetLinkedPickup final
{
public:
	class APICKUP_Base_C*                         Result;                                            // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(ITEM_Base_C_GetLinkedPickup) == 0x000008, "Wrong alignment on ITEM_Base_C_GetLinkedPickup");
static_assert(sizeof(ITEM_Base_C_GetLinkedPickup) == 0x000008, "Wrong size on ITEM_Base_C_GetLinkedPickup");
static_assert(offsetof(ITEM_Base_C_GetLinkedPickup, Result) == 0x000000, "Member 'ITEM_Base_C_GetLinkedPickup::Result' has a wrong offset!");

// Function ITEM_Base.ITEM_Base_C.DestroyLinkedPickup
// 0x0001 (0x0001 - 0x0000)
struct ITEM_Base_C_DestroyLinkedPickup final
{
public:
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0000(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(ITEM_Base_C_DestroyLinkedPickup) == 0x000001, "Wrong alignment on ITEM_Base_C_DestroyLinkedPickup");
static_assert(sizeof(ITEM_Base_C_DestroyLinkedPickup) == 0x000001, "Wrong size on ITEM_Base_C_DestroyLinkedPickup");
static_assert(offsetof(ITEM_Base_C_DestroyLinkedPickup, CallFunc_IsValid_ReturnValue) == 0x000000, "Member 'ITEM_Base_C_DestroyLinkedPickup::CallFunc_IsValid_ReturnValue' has a wrong offset!");

// Function ITEM_Base.ITEM_Base_C.AddCount
// 0x0028 (0x0028 - 0x0000)
struct ITEM_Base_C_AddCount final
{
public:
	int32                                         CountToAdd;                                        // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UITEM_Base_C*                           SourceItem;                                        // 0x0008(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         ResultCount;                                       // 0x0010(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_GetCount_Result;                          // 0x0014(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0018(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_19[0x3];                                       // 0x0019(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Subtract_IntInt_ReturnValue;              // 0x001C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue;                   // 0x0020(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Greater_IntInt_ReturnValue;               // 0x0024(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(ITEM_Base_C_AddCount) == 0x000008, "Wrong alignment on ITEM_Base_C_AddCount");
static_assert(sizeof(ITEM_Base_C_AddCount) == 0x000028, "Wrong size on ITEM_Base_C_AddCount");
static_assert(offsetof(ITEM_Base_C_AddCount, CountToAdd) == 0x000000, "Member 'ITEM_Base_C_AddCount::CountToAdd' has a wrong offset!");
static_assert(offsetof(ITEM_Base_C_AddCount, SourceItem) == 0x000008, "Member 'ITEM_Base_C_AddCount::SourceItem' has a wrong offset!");
static_assert(offsetof(ITEM_Base_C_AddCount, ResultCount) == 0x000010, "Member 'ITEM_Base_C_AddCount::ResultCount' has a wrong offset!");
static_assert(offsetof(ITEM_Base_C_AddCount, CallFunc_GetCount_Result) == 0x000014, "Member 'ITEM_Base_C_AddCount::CallFunc_GetCount_Result' has a wrong offset!");
static_assert(offsetof(ITEM_Base_C_AddCount, CallFunc_IsValid_ReturnValue) == 0x000018, "Member 'ITEM_Base_C_AddCount::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(ITEM_Base_C_AddCount, CallFunc_Subtract_IntInt_ReturnValue) == 0x00001C, "Member 'ITEM_Base_C_AddCount::CallFunc_Subtract_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(ITEM_Base_C_AddCount, CallFunc_Add_IntInt_ReturnValue) == 0x000020, "Member 'ITEM_Base_C_AddCount::CallFunc_Add_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(ITEM_Base_C_AddCount, CallFunc_Greater_IntInt_ReturnValue) == 0x000024, "Member 'ITEM_Base_C_AddCount::CallFunc_Greater_IntInt_ReturnValue' has a wrong offset!");

// Function ITEM_Base.ITEM_Base_C.SetInventory
// 0x0040 (0x0040 - 0x0000)
struct ITEM_Base_C_SetInventory final
{
public:
	class UCOMP_Inventory_C*                      NewInventory;                                      // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Result;                                            // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UCOMP_Inventory_C*                      PrevInventory;                                     // 0x0010(0x0008)(Edit, BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 CallFunc_GetOwner_ReturnValue;                     // 0x0018(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UCOMP_Inventory_C*                      CallFunc_GetInventory_Inventory;                   // 0x0020(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0028(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_29[0x7];                                       // 0x0029(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UCOMP_Inventory_C*                      CallFunc_GetInventory_Inventory_1;                 // 0x0030(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue_1;                    // 0x0038(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_ShouldCreateLinkedPickups_Result;         // 0x0039(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_HasLinkedPickup_Result;                   // 0x003A(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_OnInventoryChanged_Result;                // 0x003B(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_NotEqual_ObjectObject_ReturnValue;        // 0x003C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(ITEM_Base_C_SetInventory) == 0x000008, "Wrong alignment on ITEM_Base_C_SetInventory");
static_assert(sizeof(ITEM_Base_C_SetInventory) == 0x000040, "Wrong size on ITEM_Base_C_SetInventory");
static_assert(offsetof(ITEM_Base_C_SetInventory, NewInventory) == 0x000000, "Member 'ITEM_Base_C_SetInventory::NewInventory' has a wrong offset!");
static_assert(offsetof(ITEM_Base_C_SetInventory, Result) == 0x000008, "Member 'ITEM_Base_C_SetInventory::Result' has a wrong offset!");
static_assert(offsetof(ITEM_Base_C_SetInventory, PrevInventory) == 0x000010, "Member 'ITEM_Base_C_SetInventory::PrevInventory' has a wrong offset!");
static_assert(offsetof(ITEM_Base_C_SetInventory, CallFunc_GetOwner_ReturnValue) == 0x000018, "Member 'ITEM_Base_C_SetInventory::CallFunc_GetOwner_ReturnValue' has a wrong offset!");
static_assert(offsetof(ITEM_Base_C_SetInventory, CallFunc_GetInventory_Inventory) == 0x000020, "Member 'ITEM_Base_C_SetInventory::CallFunc_GetInventory_Inventory' has a wrong offset!");
static_assert(offsetof(ITEM_Base_C_SetInventory, CallFunc_IsValid_ReturnValue) == 0x000028, "Member 'ITEM_Base_C_SetInventory::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(ITEM_Base_C_SetInventory, CallFunc_GetInventory_Inventory_1) == 0x000030, "Member 'ITEM_Base_C_SetInventory::CallFunc_GetInventory_Inventory_1' has a wrong offset!");
static_assert(offsetof(ITEM_Base_C_SetInventory, CallFunc_IsValid_ReturnValue_1) == 0x000038, "Member 'ITEM_Base_C_SetInventory::CallFunc_IsValid_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(ITEM_Base_C_SetInventory, CallFunc_ShouldCreateLinkedPickups_Result) == 0x000039, "Member 'ITEM_Base_C_SetInventory::CallFunc_ShouldCreateLinkedPickups_Result' has a wrong offset!");
static_assert(offsetof(ITEM_Base_C_SetInventory, CallFunc_HasLinkedPickup_Result) == 0x00003A, "Member 'ITEM_Base_C_SetInventory::CallFunc_HasLinkedPickup_Result' has a wrong offset!");
static_assert(offsetof(ITEM_Base_C_SetInventory, CallFunc_OnInventoryChanged_Result) == 0x00003B, "Member 'ITEM_Base_C_SetInventory::CallFunc_OnInventoryChanged_Result' has a wrong offset!");
static_assert(offsetof(ITEM_Base_C_SetInventory, CallFunc_NotEqual_ObjectObject_ReturnValue) == 0x00003C, "Member 'ITEM_Base_C_SetInventory::CallFunc_NotEqual_ObjectObject_ReturnValue' has a wrong offset!");

// Function ITEM_Base.ITEM_Base_C.OnInventoryChanged
// 0x0010 (0x0010 - 0x0000)
struct ITEM_Base_C_OnInventoryChanged final
{
public:
	class UCOMP_Inventory_C*                      PrevInventory;                                     // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Result;                                            // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(ITEM_Base_C_OnInventoryChanged) == 0x000008, "Wrong alignment on ITEM_Base_C_OnInventoryChanged");
static_assert(sizeof(ITEM_Base_C_OnInventoryChanged) == 0x000010, "Wrong size on ITEM_Base_C_OnInventoryChanged");
static_assert(offsetof(ITEM_Base_C_OnInventoryChanged, PrevInventory) == 0x000000, "Member 'ITEM_Base_C_OnInventoryChanged::PrevInventory' has a wrong offset!");
static_assert(offsetof(ITEM_Base_C_OnInventoryChanged, Result) == 0x000008, "Member 'ITEM_Base_C_OnInventoryChanged::Result' has a wrong offset!");

// Function ITEM_Base.ITEM_Base_C.InitializeItem
// 0x0008 (0x0008 - 0x0000)
struct ITEM_Base_C_InitializeItem final
{
public:
	class UInventoryBag_C*                        Bag_0;                                             // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(ITEM_Base_C_InitializeItem) == 0x000008, "Wrong alignment on ITEM_Base_C_InitializeItem");
static_assert(sizeof(ITEM_Base_C_InitializeItem) == 0x000008, "Wrong size on ITEM_Base_C_InitializeItem");
static_assert(offsetof(ITEM_Base_C_InitializeItem, Bag_0) == 0x000000, "Member 'ITEM_Base_C_InitializeItem::Bag_0' has a wrong offset!");

// Function ITEM_Base.ITEM_Base_C.SetInventoryLocation
// 0x0010 (0x0010 - 0x0000)
struct ITEM_Base_C_SetInventoryLocation final
{
public:
	class UInventoryBag_C*                        NewBag;                                            // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         NewSlotIndex;                                      // 0x0008(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(ITEM_Base_C_SetInventoryLocation) == 0x000008, "Wrong alignment on ITEM_Base_C_SetInventoryLocation");
static_assert(sizeof(ITEM_Base_C_SetInventoryLocation) == 0x000010, "Wrong size on ITEM_Base_C_SetInventoryLocation");
static_assert(offsetof(ITEM_Base_C_SetInventoryLocation, NewBag) == 0x000000, "Member 'ITEM_Base_C_SetInventoryLocation::NewBag' has a wrong offset!");
static_assert(offsetof(ITEM_Base_C_SetInventoryLocation, NewSlotIndex) == 0x000008, "Member 'ITEM_Base_C_SetInventoryLocation::NewSlotIndex' has a wrong offset!");

// Function ITEM_Base.ITEM_Base_C.GetCount
// 0x0004 (0x0004 - 0x0000)
struct ITEM_Base_C_GetCount final
{
public:
	int32                                         Result;                                            // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(ITEM_Base_C_GetCount) == 0x000004, "Wrong alignment on ITEM_Base_C_GetCount");
static_assert(sizeof(ITEM_Base_C_GetCount) == 0x000004, "Wrong size on ITEM_Base_C_GetCount");
static_assert(offsetof(ITEM_Base_C_GetCount, Result) == 0x000000, "Member 'ITEM_Base_C_GetCount::Result' has a wrong offset!");

// Function ITEM_Base.ITEM_Base_C.GetSlotIndex
// 0x0004 (0x0004 - 0x0000)
struct ITEM_Base_C_GetSlotIndex final
{
public:
	int32                                         Result;                                            // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(ITEM_Base_C_GetSlotIndex) == 0x000004, "Wrong alignment on ITEM_Base_C_GetSlotIndex");
static_assert(sizeof(ITEM_Base_C_GetSlotIndex) == 0x000004, "Wrong size on ITEM_Base_C_GetSlotIndex");
static_assert(offsetof(ITEM_Base_C_GetSlotIndex, Result) == 0x000000, "Member 'ITEM_Base_C_GetSlotIndex::Result' has a wrong offset!");

// Function ITEM_Base.ITEM_Base_C.GetBag
// 0x0008 (0x0008 - 0x0000)
struct ITEM_Base_C_GetBag final
{
public:
	class UInventoryBag_C*                        Result;                                            // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(ITEM_Base_C_GetBag) == 0x000008, "Wrong alignment on ITEM_Base_C_GetBag");
static_assert(sizeof(ITEM_Base_C_GetBag) == 0x000008, "Wrong size on ITEM_Base_C_GetBag");
static_assert(offsetof(ITEM_Base_C_GetBag, Result) == 0x000000, "Member 'ITEM_Base_C_GetBag::Result' has a wrong offset!");

// Function ITEM_Base.ITEM_Base_C.ShouldForceEquip
// 0x0001 (0x0001 - 0x0000)
struct ITEM_Base_C_ShouldForceEquip final
{
public:
	bool                                          Result;                                            // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(ITEM_Base_C_ShouldForceEquip) == 0x000001, "Wrong alignment on ITEM_Base_C_ShouldForceEquip");
static_assert(sizeof(ITEM_Base_C_ShouldForceEquip) == 0x000001, "Wrong size on ITEM_Base_C_ShouldForceEquip");
static_assert(offsetof(ITEM_Base_C_ShouldForceEquip, Result) == 0x000000, "Member 'ITEM_Base_C_ShouldForceEquip::Result' has a wrong offset!");

// Function ITEM_Base.ITEM_Base_C.CanUnslot
// 0x0002 (0x0002 - 0x0000)
struct ITEM_Base_C_CanUnslot final
{
public:
	bool                                          Result;                                            // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsSlotted_Result;                         // 0x0001(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(ITEM_Base_C_CanUnslot) == 0x000001, "Wrong alignment on ITEM_Base_C_CanUnslot");
static_assert(sizeof(ITEM_Base_C_CanUnslot) == 0x000002, "Wrong size on ITEM_Base_C_CanUnslot");
static_assert(offsetof(ITEM_Base_C_CanUnslot, Result) == 0x000000, "Member 'ITEM_Base_C_CanUnslot::Result' has a wrong offset!");
static_assert(offsetof(ITEM_Base_C_CanUnslot, CallFunc_IsSlotted_Result) == 0x000001, "Member 'ITEM_Base_C_CanUnslot::CallFunc_IsSlotted_Result' has a wrong offset!");

// Function ITEM_Base.ITEM_Base_C.CanDropItem
// 0x0018 (0x0018 - 0x0000)
struct ITEM_Base_C_CanDropItem final
{
public:
	bool                                          Result;                                            // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_CanUnslot_Result;                         // 0x0001(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_2[0x6];                                        // 0x0002(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class UCOMP_Inventory_C*                      CallFunc_GetInventory_Inventory;                   // 0x0008(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0010(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(ITEM_Base_C_CanDropItem) == 0x000008, "Wrong alignment on ITEM_Base_C_CanDropItem");
static_assert(sizeof(ITEM_Base_C_CanDropItem) == 0x000018, "Wrong size on ITEM_Base_C_CanDropItem");
static_assert(offsetof(ITEM_Base_C_CanDropItem, Result) == 0x000000, "Member 'ITEM_Base_C_CanDropItem::Result' has a wrong offset!");
static_assert(offsetof(ITEM_Base_C_CanDropItem, CallFunc_CanUnslot_Result) == 0x000001, "Member 'ITEM_Base_C_CanDropItem::CallFunc_CanUnslot_Result' has a wrong offset!");
static_assert(offsetof(ITEM_Base_C_CanDropItem, CallFunc_GetInventory_Inventory) == 0x000008, "Member 'ITEM_Base_C_CanDropItem::CallFunc_GetInventory_Inventory' has a wrong offset!");
static_assert(offsetof(ITEM_Base_C_CanDropItem, CallFunc_IsValid_ReturnValue) == 0x000010, "Member 'ITEM_Base_C_CanDropItem::CallFunc_IsValid_ReturnValue' has a wrong offset!");

// Function ITEM_Base.ITEM_Base_C.IsDestructible
// 0x0001 (0x0001 - 0x0000)
struct ITEM_Base_C_IsDestructible final
{
public:
	bool                                          Result;                                            // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(ITEM_Base_C_IsDestructible) == 0x000001, "Wrong alignment on ITEM_Base_C_IsDestructible");
static_assert(sizeof(ITEM_Base_C_IsDestructible) == 0x000001, "Wrong size on ITEM_Base_C_IsDestructible");
static_assert(offsetof(ITEM_Base_C_IsDestructible, Result) == 0x000000, "Member 'ITEM_Base_C_IsDestructible::Result' has a wrong offset!");

// Function ITEM_Base.ITEM_Base_C.DestroyItem
// 0x0028 (0x0028 - 0x0000)
struct ITEM_Base_C_DestroyItem final
{
public:
	bool                                          Result;                                            // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UInventoryBag_C*                        CallFunc_GetBag_Result;                            // 0x0008(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsDestructible_Result;                    // 0x0010(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_CleanupSlot_Result;                       // 0x0011(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_12[0x6];                                       // 0x0012(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class UInventoryBag_C*                        CallFunc_GetBag_Result_1;                          // 0x0018(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0020(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(ITEM_Base_C_DestroyItem) == 0x000008, "Wrong alignment on ITEM_Base_C_DestroyItem");
static_assert(sizeof(ITEM_Base_C_DestroyItem) == 0x000028, "Wrong size on ITEM_Base_C_DestroyItem");
static_assert(offsetof(ITEM_Base_C_DestroyItem, Result) == 0x000000, "Member 'ITEM_Base_C_DestroyItem::Result' has a wrong offset!");
static_assert(offsetof(ITEM_Base_C_DestroyItem, CallFunc_GetBag_Result) == 0x000008, "Member 'ITEM_Base_C_DestroyItem::CallFunc_GetBag_Result' has a wrong offset!");
static_assert(offsetof(ITEM_Base_C_DestroyItem, CallFunc_IsDestructible_Result) == 0x000010, "Member 'ITEM_Base_C_DestroyItem::CallFunc_IsDestructible_Result' has a wrong offset!");
static_assert(offsetof(ITEM_Base_C_DestroyItem, CallFunc_CleanupSlot_Result) == 0x000011, "Member 'ITEM_Base_C_DestroyItem::CallFunc_CleanupSlot_Result' has a wrong offset!");
static_assert(offsetof(ITEM_Base_C_DestroyItem, CallFunc_GetBag_Result_1) == 0x000018, "Member 'ITEM_Base_C_DestroyItem::CallFunc_GetBag_Result_1' has a wrong offset!");
static_assert(offsetof(ITEM_Base_C_DestroyItem, CallFunc_IsValid_ReturnValue) == 0x000020, "Member 'ITEM_Base_C_DestroyItem::CallFunc_IsValid_ReturnValue' has a wrong offset!");

// Function ITEM_Base.ITEM_Base_C.OnRemovedFromInventory
// 0x0005 (0x0005 - 0x0000)
struct ITEM_Base_C_OnRemovedFromInventory final
{
public:
	bool                                          CallFunc_Deactivate_Result;                        // 0x0000(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_GetIsActivated_Result;                    // 0x0001(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_SetEquipped_Result;                       // 0x0002(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsEquipped_Result;                        // 0x0003(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_SetInventory_Result;                      // 0x0004(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(ITEM_Base_C_OnRemovedFromInventory) == 0x000001, "Wrong alignment on ITEM_Base_C_OnRemovedFromInventory");
static_assert(sizeof(ITEM_Base_C_OnRemovedFromInventory) == 0x000005, "Wrong size on ITEM_Base_C_OnRemovedFromInventory");
static_assert(offsetof(ITEM_Base_C_OnRemovedFromInventory, CallFunc_Deactivate_Result) == 0x000000, "Member 'ITEM_Base_C_OnRemovedFromInventory::CallFunc_Deactivate_Result' has a wrong offset!");
static_assert(offsetof(ITEM_Base_C_OnRemovedFromInventory, CallFunc_GetIsActivated_Result) == 0x000001, "Member 'ITEM_Base_C_OnRemovedFromInventory::CallFunc_GetIsActivated_Result' has a wrong offset!");
static_assert(offsetof(ITEM_Base_C_OnRemovedFromInventory, CallFunc_SetEquipped_Result) == 0x000002, "Member 'ITEM_Base_C_OnRemovedFromInventory::CallFunc_SetEquipped_Result' has a wrong offset!");
static_assert(offsetof(ITEM_Base_C_OnRemovedFromInventory, CallFunc_IsEquipped_Result) == 0x000003, "Member 'ITEM_Base_C_OnRemovedFromInventory::CallFunc_IsEquipped_Result' has a wrong offset!");
static_assert(offsetof(ITEM_Base_C_OnRemovedFromInventory, CallFunc_SetInventory_Result) == 0x000004, "Member 'ITEM_Base_C_OnRemovedFromInventory::CallFunc_SetInventory_Result' has a wrong offset!");

// Function ITEM_Base.ITEM_Base_C.TryDropItem
// 0x0038 (0x0038 - 0x0000)
struct ITEM_Base_C_TryDropItem final
{
public:
	class USceneComponent*                        SceneComponent;                                    // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector2D                              RelativeOffset;                                    // 0x0008(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Result;                                            // 0x0010(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          WasItemRemoved;                                    // 0x0011(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_12[0x6];                                       // 0x0012(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class UCOMP_Inventory_C*                      CallFunc_GetInventory_Inventory;                   // 0x0018(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsEquipped_Result;                        // 0x0020(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0021(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_TryHandleDropEvent_Result;                // 0x0022(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsActivatable_Result;                     // 0x0023(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BooleanAND_ReturnValue;                   // 0x0024(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_CanDropItem_Result;                       // 0x0025(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_26[0x2];                                       // 0x0026(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	class UITEM_Base_C*                           CallFunc_RemoveItem_RemovedItem;                   // 0x0028(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue_1;                    // 0x0030(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(ITEM_Base_C_TryDropItem) == 0x000008, "Wrong alignment on ITEM_Base_C_TryDropItem");
static_assert(sizeof(ITEM_Base_C_TryDropItem) == 0x000038, "Wrong size on ITEM_Base_C_TryDropItem");
static_assert(offsetof(ITEM_Base_C_TryDropItem, SceneComponent) == 0x000000, "Member 'ITEM_Base_C_TryDropItem::SceneComponent' has a wrong offset!");
static_assert(offsetof(ITEM_Base_C_TryDropItem, RelativeOffset) == 0x000008, "Member 'ITEM_Base_C_TryDropItem::RelativeOffset' has a wrong offset!");
static_assert(offsetof(ITEM_Base_C_TryDropItem, Result) == 0x000010, "Member 'ITEM_Base_C_TryDropItem::Result' has a wrong offset!");
static_assert(offsetof(ITEM_Base_C_TryDropItem, WasItemRemoved) == 0x000011, "Member 'ITEM_Base_C_TryDropItem::WasItemRemoved' has a wrong offset!");
static_assert(offsetof(ITEM_Base_C_TryDropItem, CallFunc_GetInventory_Inventory) == 0x000018, "Member 'ITEM_Base_C_TryDropItem::CallFunc_GetInventory_Inventory' has a wrong offset!");
static_assert(offsetof(ITEM_Base_C_TryDropItem, CallFunc_IsEquipped_Result) == 0x000020, "Member 'ITEM_Base_C_TryDropItem::CallFunc_IsEquipped_Result' has a wrong offset!");
static_assert(offsetof(ITEM_Base_C_TryDropItem, CallFunc_IsValid_ReturnValue) == 0x000021, "Member 'ITEM_Base_C_TryDropItem::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(ITEM_Base_C_TryDropItem, CallFunc_TryHandleDropEvent_Result) == 0x000022, "Member 'ITEM_Base_C_TryDropItem::CallFunc_TryHandleDropEvent_Result' has a wrong offset!");
static_assert(offsetof(ITEM_Base_C_TryDropItem, CallFunc_IsActivatable_Result) == 0x000023, "Member 'ITEM_Base_C_TryDropItem::CallFunc_IsActivatable_Result' has a wrong offset!");
static_assert(offsetof(ITEM_Base_C_TryDropItem, CallFunc_BooleanAND_ReturnValue) == 0x000024, "Member 'ITEM_Base_C_TryDropItem::CallFunc_BooleanAND_ReturnValue' has a wrong offset!");
static_assert(offsetof(ITEM_Base_C_TryDropItem, CallFunc_CanDropItem_Result) == 0x000025, "Member 'ITEM_Base_C_TryDropItem::CallFunc_CanDropItem_Result' has a wrong offset!");
static_assert(offsetof(ITEM_Base_C_TryDropItem, CallFunc_RemoveItem_RemovedItem) == 0x000028, "Member 'ITEM_Base_C_TryDropItem::CallFunc_RemoveItem_RemovedItem' has a wrong offset!");
static_assert(offsetof(ITEM_Base_C_TryDropItem, CallFunc_IsValid_ReturnValue_1) == 0x000030, "Member 'ITEM_Base_C_TryDropItem::CallFunc_IsValid_ReturnValue_1' has a wrong offset!");

// Function ITEM_Base.ITEM_Base_C.IsDeployed
// 0x0001 (0x0001 - 0x0000)
struct ITEM_Base_C_IsDeployed final
{
public:
	bool                                          Result;                                            // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(ITEM_Base_C_IsDeployed) == 0x000001, "Wrong alignment on ITEM_Base_C_IsDeployed");
static_assert(sizeof(ITEM_Base_C_IsDeployed) == 0x000001, "Wrong size on ITEM_Base_C_IsDeployed");
static_assert(offsetof(ITEM_Base_C_IsDeployed, Result) == 0x000000, "Member 'ITEM_Base_C_IsDeployed::Result' has a wrong offset!");

// Function ITEM_Base.ITEM_Base_C.TryDropAndPushItem
// 0x0028 (0x0028 - 0x0000)
struct ITEM_Base_C_TryDropAndPushItem final
{
public:
	class USceneComponent*                        SceneComponent;                                    // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector2D                              RelativeOffset;                                    // 0x0008(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Result;                                            // 0x0010(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          WasItemRemoved;                                    // 0x0011(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_CanDropItem_Result;                       // 0x0012(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_TryDropItem_Result;                       // 0x0013(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	TDelegate<void(class APICKUP_Base_C* Pickup)> K2Node_CreateDelegate_OutputDelegate;              // 0x0014(0x0010)(ZeroConstructor, NoDestructor)
};
static_assert(alignof(ITEM_Base_C_TryDropAndPushItem) == 0x000008, "Wrong alignment on ITEM_Base_C_TryDropAndPushItem");
static_assert(sizeof(ITEM_Base_C_TryDropAndPushItem) == 0x000028, "Wrong size on ITEM_Base_C_TryDropAndPushItem");
static_assert(offsetof(ITEM_Base_C_TryDropAndPushItem, SceneComponent) == 0x000000, "Member 'ITEM_Base_C_TryDropAndPushItem::SceneComponent' has a wrong offset!");
static_assert(offsetof(ITEM_Base_C_TryDropAndPushItem, RelativeOffset) == 0x000008, "Member 'ITEM_Base_C_TryDropAndPushItem::RelativeOffset' has a wrong offset!");
static_assert(offsetof(ITEM_Base_C_TryDropAndPushItem, Result) == 0x000010, "Member 'ITEM_Base_C_TryDropAndPushItem::Result' has a wrong offset!");
static_assert(offsetof(ITEM_Base_C_TryDropAndPushItem, WasItemRemoved) == 0x000011, "Member 'ITEM_Base_C_TryDropAndPushItem::WasItemRemoved' has a wrong offset!");
static_assert(offsetof(ITEM_Base_C_TryDropAndPushItem, CallFunc_CanDropItem_Result) == 0x000012, "Member 'ITEM_Base_C_TryDropAndPushItem::CallFunc_CanDropItem_Result' has a wrong offset!");
static_assert(offsetof(ITEM_Base_C_TryDropAndPushItem, CallFunc_TryDropItem_Result) == 0x000013, "Member 'ITEM_Base_C_TryDropAndPushItem::CallFunc_TryDropItem_Result' has a wrong offset!");
static_assert(offsetof(ITEM_Base_C_TryDropAndPushItem, K2Node_CreateDelegate_OutputDelegate) == 0x000014, "Member 'ITEM_Base_C_TryDropAndPushItem::K2Node_CreateDelegate_OutputDelegate' has a wrong offset!");

// Function ITEM_Base.ITEM_Base_C.CreateDroppedPickupItem
// 0x01B0 (0x01B0 - 0x0000)
struct ITEM_Base_C_CreateDroppedPickupItem final
{
public:
	class USceneComponent*                        SceneComponent;                                    // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector2D                              RelativeOffset;                                    // 0x0008(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class APICKUP_Base_C*                         PickupActor;                                       // 0x0010(0x0008)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UCameraComponent*                       NewLocalVar_0;                                     // 0x0018(0x0008)(Edit, BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class APICKUP_Base_C*                         SpawnedPickup;                                     // 0x0020(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class ULevelStreaming*                        StreamingLevel;                                    // 0x0028(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FTransform                             PickupTransform;                                   // 0x0030(0x0030)(Edit, BlueprintVisible, IsPlainOldData, NoDestructor)
	struct FTransform                             CharacterTransform;                                // 0x0060(0x0030)(Edit, BlueprintVisible, IsPlainOldData, NoDestructor)
	class UCameraComponent*                       CameraComponent;                                   // 0x0090(0x0008)(Edit, BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class ULevel*                                 CallFunc_GetLoadedLevel_ReturnValue;               // 0x0098(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               CallFunc_K2_GetComponentRotation_ReturnValue;      // 0x00A0(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x00AC(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_AD[0x3];                                       // 0x00AD(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                CallFunc_K2_GetComponentLocation_ReturnValue;      // 0x00B0(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_GetForwardVector_ReturnValue;             // 0x00BC(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Add_VectorVector_ReturnValue;             // 0x00C8(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_GetRightVector_ReturnValue;               // 0x00D4(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_GetUpVector_ReturnValue;                  // 0x00E0(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_EC[0x4];                                       // 0x00EC(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UClass*                                 CallFunc_GetBestPickupClass_Result;                // 0x00F0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UClass*                                 CallFunc_GetBestPickupClass_Result_1;              // 0x00F8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 CallFunc_BeginDeferredActorSpawnFromClass_ReturnValue; // 0x0100(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class APICKUP_Base_C*                         CallFunc_FinishSpawningActor_ReturnValue;          // 0x0108(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class ULevel*                                 CallFunc_GetLoadedLevel_ReturnValue_1;             // 0x0110(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class APICKUP_Base_C*                         CallFunc_SpawnActorInLevel_ReturnValue;            // 0x0118(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UGameInstance*                          CallFunc_GetGameInstance_ReturnValue;              // 0x0120(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UGI_SinglePlayer_C*                     K2Node_DynamicCast_AsGI_Single_Player;             // 0x0128(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0130(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_131[0x7];                                      // 0x0131(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class ULevelStreaming*                        CallFunc_GetPrimaryStreamingLevel_Level;           // 0x0138(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue_1;                    // 0x0140(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_141[0x3];                                      // 0x0141(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_BreakVector2D_X;                          // 0x0144(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector2D_Y;                          // 0x0148(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Multiply_VectorFloat_ReturnValue;         // 0x014C(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Multiply_VectorFloat_ReturnValue_1;       // 0x0158(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Add_VectorVector_ReturnValue_1;           // 0x0164(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Add_VectorVector_ReturnValue_2;           // 0x0170(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_17C[0x4];                                      // 0x017C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTransform                             CallFunc_MakeTransform_ReturnValue;                // 0x0180(0x0030)(IsPlainOldData, NoDestructor)
};
static_assert(alignof(ITEM_Base_C_CreateDroppedPickupItem) == 0x000010, "Wrong alignment on ITEM_Base_C_CreateDroppedPickupItem");
static_assert(sizeof(ITEM_Base_C_CreateDroppedPickupItem) == 0x0001B0, "Wrong size on ITEM_Base_C_CreateDroppedPickupItem");
static_assert(offsetof(ITEM_Base_C_CreateDroppedPickupItem, SceneComponent) == 0x000000, "Member 'ITEM_Base_C_CreateDroppedPickupItem::SceneComponent' has a wrong offset!");
static_assert(offsetof(ITEM_Base_C_CreateDroppedPickupItem, RelativeOffset) == 0x000008, "Member 'ITEM_Base_C_CreateDroppedPickupItem::RelativeOffset' has a wrong offset!");
static_assert(offsetof(ITEM_Base_C_CreateDroppedPickupItem, PickupActor) == 0x000010, "Member 'ITEM_Base_C_CreateDroppedPickupItem::PickupActor' has a wrong offset!");
static_assert(offsetof(ITEM_Base_C_CreateDroppedPickupItem, NewLocalVar_0) == 0x000018, "Member 'ITEM_Base_C_CreateDroppedPickupItem::NewLocalVar_0' has a wrong offset!");
static_assert(offsetof(ITEM_Base_C_CreateDroppedPickupItem, SpawnedPickup) == 0x000020, "Member 'ITEM_Base_C_CreateDroppedPickupItem::SpawnedPickup' has a wrong offset!");
static_assert(offsetof(ITEM_Base_C_CreateDroppedPickupItem, StreamingLevel) == 0x000028, "Member 'ITEM_Base_C_CreateDroppedPickupItem::StreamingLevel' has a wrong offset!");
static_assert(offsetof(ITEM_Base_C_CreateDroppedPickupItem, PickupTransform) == 0x000030, "Member 'ITEM_Base_C_CreateDroppedPickupItem::PickupTransform' has a wrong offset!");
static_assert(offsetof(ITEM_Base_C_CreateDroppedPickupItem, CharacterTransform) == 0x000060, "Member 'ITEM_Base_C_CreateDroppedPickupItem::CharacterTransform' has a wrong offset!");
static_assert(offsetof(ITEM_Base_C_CreateDroppedPickupItem, CameraComponent) == 0x000090, "Member 'ITEM_Base_C_CreateDroppedPickupItem::CameraComponent' has a wrong offset!");
static_assert(offsetof(ITEM_Base_C_CreateDroppedPickupItem, CallFunc_GetLoadedLevel_ReturnValue) == 0x000098, "Member 'ITEM_Base_C_CreateDroppedPickupItem::CallFunc_GetLoadedLevel_ReturnValue' has a wrong offset!");
static_assert(offsetof(ITEM_Base_C_CreateDroppedPickupItem, CallFunc_K2_GetComponentRotation_ReturnValue) == 0x0000A0, "Member 'ITEM_Base_C_CreateDroppedPickupItem::CallFunc_K2_GetComponentRotation_ReturnValue' has a wrong offset!");
static_assert(offsetof(ITEM_Base_C_CreateDroppedPickupItem, CallFunc_IsValid_ReturnValue) == 0x0000AC, "Member 'ITEM_Base_C_CreateDroppedPickupItem::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(ITEM_Base_C_CreateDroppedPickupItem, CallFunc_K2_GetComponentLocation_ReturnValue) == 0x0000B0, "Member 'ITEM_Base_C_CreateDroppedPickupItem::CallFunc_K2_GetComponentLocation_ReturnValue' has a wrong offset!");
static_assert(offsetof(ITEM_Base_C_CreateDroppedPickupItem, CallFunc_GetForwardVector_ReturnValue) == 0x0000BC, "Member 'ITEM_Base_C_CreateDroppedPickupItem::CallFunc_GetForwardVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(ITEM_Base_C_CreateDroppedPickupItem, CallFunc_Add_VectorVector_ReturnValue) == 0x0000C8, "Member 'ITEM_Base_C_CreateDroppedPickupItem::CallFunc_Add_VectorVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(ITEM_Base_C_CreateDroppedPickupItem, CallFunc_GetRightVector_ReturnValue) == 0x0000D4, "Member 'ITEM_Base_C_CreateDroppedPickupItem::CallFunc_GetRightVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(ITEM_Base_C_CreateDroppedPickupItem, CallFunc_GetUpVector_ReturnValue) == 0x0000E0, "Member 'ITEM_Base_C_CreateDroppedPickupItem::CallFunc_GetUpVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(ITEM_Base_C_CreateDroppedPickupItem, CallFunc_GetBestPickupClass_Result) == 0x0000F0, "Member 'ITEM_Base_C_CreateDroppedPickupItem::CallFunc_GetBestPickupClass_Result' has a wrong offset!");
static_assert(offsetof(ITEM_Base_C_CreateDroppedPickupItem, CallFunc_GetBestPickupClass_Result_1) == 0x0000F8, "Member 'ITEM_Base_C_CreateDroppedPickupItem::CallFunc_GetBestPickupClass_Result_1' has a wrong offset!");
static_assert(offsetof(ITEM_Base_C_CreateDroppedPickupItem, CallFunc_BeginDeferredActorSpawnFromClass_ReturnValue) == 0x000100, "Member 'ITEM_Base_C_CreateDroppedPickupItem::CallFunc_BeginDeferredActorSpawnFromClass_ReturnValue' has a wrong offset!");
static_assert(offsetof(ITEM_Base_C_CreateDroppedPickupItem, CallFunc_FinishSpawningActor_ReturnValue) == 0x000108, "Member 'ITEM_Base_C_CreateDroppedPickupItem::CallFunc_FinishSpawningActor_ReturnValue' has a wrong offset!");
static_assert(offsetof(ITEM_Base_C_CreateDroppedPickupItem, CallFunc_GetLoadedLevel_ReturnValue_1) == 0x000110, "Member 'ITEM_Base_C_CreateDroppedPickupItem::CallFunc_GetLoadedLevel_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(ITEM_Base_C_CreateDroppedPickupItem, CallFunc_SpawnActorInLevel_ReturnValue) == 0x000118, "Member 'ITEM_Base_C_CreateDroppedPickupItem::CallFunc_SpawnActorInLevel_ReturnValue' has a wrong offset!");
static_assert(offsetof(ITEM_Base_C_CreateDroppedPickupItem, CallFunc_GetGameInstance_ReturnValue) == 0x000120, "Member 'ITEM_Base_C_CreateDroppedPickupItem::CallFunc_GetGameInstance_ReturnValue' has a wrong offset!");
static_assert(offsetof(ITEM_Base_C_CreateDroppedPickupItem, K2Node_DynamicCast_AsGI_Single_Player) == 0x000128, "Member 'ITEM_Base_C_CreateDroppedPickupItem::K2Node_DynamicCast_AsGI_Single_Player' has a wrong offset!");
static_assert(offsetof(ITEM_Base_C_CreateDroppedPickupItem, K2Node_DynamicCast_bSuccess) == 0x000130, "Member 'ITEM_Base_C_CreateDroppedPickupItem::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(ITEM_Base_C_CreateDroppedPickupItem, CallFunc_GetPrimaryStreamingLevel_Level) == 0x000138, "Member 'ITEM_Base_C_CreateDroppedPickupItem::CallFunc_GetPrimaryStreamingLevel_Level' has a wrong offset!");
static_assert(offsetof(ITEM_Base_C_CreateDroppedPickupItem, CallFunc_IsValid_ReturnValue_1) == 0x000140, "Member 'ITEM_Base_C_CreateDroppedPickupItem::CallFunc_IsValid_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(ITEM_Base_C_CreateDroppedPickupItem, CallFunc_BreakVector2D_X) == 0x000144, "Member 'ITEM_Base_C_CreateDroppedPickupItem::CallFunc_BreakVector2D_X' has a wrong offset!");
static_assert(offsetof(ITEM_Base_C_CreateDroppedPickupItem, CallFunc_BreakVector2D_Y) == 0x000148, "Member 'ITEM_Base_C_CreateDroppedPickupItem::CallFunc_BreakVector2D_Y' has a wrong offset!");
static_assert(offsetof(ITEM_Base_C_CreateDroppedPickupItem, CallFunc_Multiply_VectorFloat_ReturnValue) == 0x00014C, "Member 'ITEM_Base_C_CreateDroppedPickupItem::CallFunc_Multiply_VectorFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(ITEM_Base_C_CreateDroppedPickupItem, CallFunc_Multiply_VectorFloat_ReturnValue_1) == 0x000158, "Member 'ITEM_Base_C_CreateDroppedPickupItem::CallFunc_Multiply_VectorFloat_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(ITEM_Base_C_CreateDroppedPickupItem, CallFunc_Add_VectorVector_ReturnValue_1) == 0x000164, "Member 'ITEM_Base_C_CreateDroppedPickupItem::CallFunc_Add_VectorVector_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(ITEM_Base_C_CreateDroppedPickupItem, CallFunc_Add_VectorVector_ReturnValue_2) == 0x000170, "Member 'ITEM_Base_C_CreateDroppedPickupItem::CallFunc_Add_VectorVector_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(ITEM_Base_C_CreateDroppedPickupItem, CallFunc_MakeTransform_ReturnValue) == 0x000180, "Member 'ITEM_Base_C_CreateDroppedPickupItem::CallFunc_MakeTransform_ReturnValue' has a wrong offset!");

// Function ITEM_Base.ITEM_Base_C.CreateLinkedPickupItem
// 0x0090 (0x0090 - 0x0000)
struct ITEM_Base_C_CreateLinkedPickupItem final
{
public:
	struct FTransform                             PickupTransform;                                   // 0x0000(0x0030)(BlueprintVisible, BlueprintReadOnly, Parm, IsPlainOldData, NoDestructor)
	class APICKUP_Base_C*                         PickupActor;                                       // 0x0030(0x0008)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 OwnerActor;                                        // 0x0038(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class APICKUP_Base_C*                         SpawnedPickup;                                     // 0x0040(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class ULevelStreaming*                        StreamingLevel;                                    // 0x0048(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UClass*                                 CallFunc_GetBestPickupClass_Result;                // 0x0050(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UClass*                                 CallFunc_GetBestPickupClass_Result_1;              // 0x0058(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class ULevel*                                 CallFunc_GetActorLevel_ReturnValue;                // 0x0060(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 CallFunc_GetOwnerActor_Actor;                      // 0x0068(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0070(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_71[0x7];                                       // 0x0071(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class APICKUP_Base_C*                         CallFunc_SpawnActorInLevel_ReturnValue;            // 0x0078(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 CallFunc_BeginDeferredActorSpawnFromClass_ReturnValue; // 0x0080(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class APICKUP_Base_C*                         CallFunc_FinishSpawningActor_ReturnValue;          // 0x0088(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(ITEM_Base_C_CreateLinkedPickupItem) == 0x000010, "Wrong alignment on ITEM_Base_C_CreateLinkedPickupItem");
static_assert(sizeof(ITEM_Base_C_CreateLinkedPickupItem) == 0x000090, "Wrong size on ITEM_Base_C_CreateLinkedPickupItem");
static_assert(offsetof(ITEM_Base_C_CreateLinkedPickupItem, PickupTransform) == 0x000000, "Member 'ITEM_Base_C_CreateLinkedPickupItem::PickupTransform' has a wrong offset!");
static_assert(offsetof(ITEM_Base_C_CreateLinkedPickupItem, PickupActor) == 0x000030, "Member 'ITEM_Base_C_CreateLinkedPickupItem::PickupActor' has a wrong offset!");
static_assert(offsetof(ITEM_Base_C_CreateLinkedPickupItem, OwnerActor) == 0x000038, "Member 'ITEM_Base_C_CreateLinkedPickupItem::OwnerActor' has a wrong offset!");
static_assert(offsetof(ITEM_Base_C_CreateLinkedPickupItem, SpawnedPickup) == 0x000040, "Member 'ITEM_Base_C_CreateLinkedPickupItem::SpawnedPickup' has a wrong offset!");
static_assert(offsetof(ITEM_Base_C_CreateLinkedPickupItem, StreamingLevel) == 0x000048, "Member 'ITEM_Base_C_CreateLinkedPickupItem::StreamingLevel' has a wrong offset!");
static_assert(offsetof(ITEM_Base_C_CreateLinkedPickupItem, CallFunc_GetBestPickupClass_Result) == 0x000050, "Member 'ITEM_Base_C_CreateLinkedPickupItem::CallFunc_GetBestPickupClass_Result' has a wrong offset!");
static_assert(offsetof(ITEM_Base_C_CreateLinkedPickupItem, CallFunc_GetBestPickupClass_Result_1) == 0x000058, "Member 'ITEM_Base_C_CreateLinkedPickupItem::CallFunc_GetBestPickupClass_Result_1' has a wrong offset!");
static_assert(offsetof(ITEM_Base_C_CreateLinkedPickupItem, CallFunc_GetActorLevel_ReturnValue) == 0x000060, "Member 'ITEM_Base_C_CreateLinkedPickupItem::CallFunc_GetActorLevel_ReturnValue' has a wrong offset!");
static_assert(offsetof(ITEM_Base_C_CreateLinkedPickupItem, CallFunc_GetOwnerActor_Actor) == 0x000068, "Member 'ITEM_Base_C_CreateLinkedPickupItem::CallFunc_GetOwnerActor_Actor' has a wrong offset!");
static_assert(offsetof(ITEM_Base_C_CreateLinkedPickupItem, CallFunc_IsValid_ReturnValue) == 0x000070, "Member 'ITEM_Base_C_CreateLinkedPickupItem::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(ITEM_Base_C_CreateLinkedPickupItem, CallFunc_SpawnActorInLevel_ReturnValue) == 0x000078, "Member 'ITEM_Base_C_CreateLinkedPickupItem::CallFunc_SpawnActorInLevel_ReturnValue' has a wrong offset!");
static_assert(offsetof(ITEM_Base_C_CreateLinkedPickupItem, CallFunc_BeginDeferredActorSpawnFromClass_ReturnValue) == 0x000080, "Member 'ITEM_Base_C_CreateLinkedPickupItem::CallFunc_BeginDeferredActorSpawnFromClass_ReturnValue' has a wrong offset!");
static_assert(offsetof(ITEM_Base_C_CreateLinkedPickupItem, CallFunc_FinishSpawningActor_ReturnValue) == 0x000088, "Member 'ITEM_Base_C_CreateLinkedPickupItem::CallFunc_FinishSpawningActor_ReturnValue' has a wrong offset!");

// Function ITEM_Base.ITEM_Base_C.SetLinkedPickup
// 0x0008 (0x0008 - 0x0000)
struct ITEM_Base_C_SetLinkedPickup final
{
public:
	class APICKUP_Base_C*                         PickupActor;                                       // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(ITEM_Base_C_SetLinkedPickup) == 0x000008, "Wrong alignment on ITEM_Base_C_SetLinkedPickup");
static_assert(sizeof(ITEM_Base_C_SetLinkedPickup) == 0x000008, "Wrong size on ITEM_Base_C_SetLinkedPickup");
static_assert(offsetof(ITEM_Base_C_SetLinkedPickup, PickupActor) == 0x000000, "Member 'ITEM_Base_C_SetLinkedPickup::PickupActor' has a wrong offset!");

// Function ITEM_Base.ITEM_Base_C.IsSlotted
// 0x0018 (0x0018 - 0x0000)
struct ITEM_Base_C_IsSlotted final
{
public:
	bool                                          Result;                                            // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UCOMP_Inventory_C*                      CallFunc_GetInventory_Inventory;                   // 0x0008(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0010(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(ITEM_Base_C_IsSlotted) == 0x000008, "Wrong alignment on ITEM_Base_C_IsSlotted");
static_assert(sizeof(ITEM_Base_C_IsSlotted) == 0x000018, "Wrong size on ITEM_Base_C_IsSlotted");
static_assert(offsetof(ITEM_Base_C_IsSlotted, Result) == 0x000000, "Member 'ITEM_Base_C_IsSlotted::Result' has a wrong offset!");
static_assert(offsetof(ITEM_Base_C_IsSlotted, CallFunc_GetInventory_Inventory) == 0x000008, "Member 'ITEM_Base_C_IsSlotted::CallFunc_GetInventory_Inventory' has a wrong offset!");
static_assert(offsetof(ITEM_Base_C_IsSlotted, CallFunc_IsValid_ReturnValue) == 0x000010, "Member 'ITEM_Base_C_IsSlotted::CallFunc_IsValid_ReturnValue' has a wrong offset!");

// Function ITEM_Base.ITEM_Base_C.IsEquipped
// 0x0001 (0x0001 - 0x0000)
struct ITEM_Base_C_IsEquipped final
{
public:
	bool                                          Result;                                            // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(ITEM_Base_C_IsEquipped) == 0x000001, "Wrong alignment on ITEM_Base_C_IsEquipped");
static_assert(sizeof(ITEM_Base_C_IsEquipped) == 0x000001, "Wrong size on ITEM_Base_C_IsEquipped");
static_assert(offsetof(ITEM_Base_C_IsEquipped, Result) == 0x000000, "Member 'ITEM_Base_C_IsEquipped::Result' has a wrong offset!");

// Function ITEM_Base.ITEM_Base_C.IsActivatable
// 0x0001 (0x0001 - 0x0000)
struct ITEM_Base_C_IsActivatable final
{
public:
	bool                                          Result;                                            // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(ITEM_Base_C_IsActivatable) == 0x000001, "Wrong alignment on ITEM_Base_C_IsActivatable");
static_assert(sizeof(ITEM_Base_C_IsActivatable) == 0x000001, "Wrong size on ITEM_Base_C_IsActivatable");
static_assert(offsetof(ITEM_Base_C_IsActivatable, Result) == 0x000000, "Member 'ITEM_Base_C_IsActivatable::Result' has a wrong offset!");

// Function ITEM_Base.ITEM_Base_C.SetItemGridSize
// 0x0018 (0x0018 - 0x0000)
struct ITEM_Base_C_SetItemGridSize final
{
public:
	struct FIntPoint                              NewSize;                                           // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Result;                                            // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FIntPoint                              CallFunc_GetOriginalGridSize_Result;               // 0x000C(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_NotEqual_IntPointIntPoint_ReturnValue;    // 0x0014(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(ITEM_Base_C_SetItemGridSize) == 0x000004, "Wrong alignment on ITEM_Base_C_SetItemGridSize");
static_assert(sizeof(ITEM_Base_C_SetItemGridSize) == 0x000018, "Wrong size on ITEM_Base_C_SetItemGridSize");
static_assert(offsetof(ITEM_Base_C_SetItemGridSize, NewSize) == 0x000000, "Member 'ITEM_Base_C_SetItemGridSize::NewSize' has a wrong offset!");
static_assert(offsetof(ITEM_Base_C_SetItemGridSize, Result) == 0x000008, "Member 'ITEM_Base_C_SetItemGridSize::Result' has a wrong offset!");
static_assert(offsetof(ITEM_Base_C_SetItemGridSize, CallFunc_GetOriginalGridSize_Result) == 0x00000C, "Member 'ITEM_Base_C_SetItemGridSize::CallFunc_GetOriginalGridSize_Result' has a wrong offset!");
static_assert(offsetof(ITEM_Base_C_SetItemGridSize, CallFunc_NotEqual_IntPointIntPoint_ReturnValue) == 0x000014, "Member 'ITEM_Base_C_SetItemGridSize::CallFunc_NotEqual_IntPointIntPoint_ReturnValue' has a wrong offset!");

// Function ITEM_Base.ITEM_Base_C.OnBecomeActivatable
// 0x0001 (0x0001 - 0x0000)
struct ITEM_Base_C_OnBecomeActivatable final
{
public:
	bool                                          Result;                                            // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(ITEM_Base_C_OnBecomeActivatable) == 0x000001, "Wrong alignment on ITEM_Base_C_OnBecomeActivatable");
static_assert(sizeof(ITEM_Base_C_OnBecomeActivatable) == 0x000001, "Wrong size on ITEM_Base_C_OnBecomeActivatable");
static_assert(offsetof(ITEM_Base_C_OnBecomeActivatable, Result) == 0x000000, "Member 'ITEM_Base_C_OnBecomeActivatable::Result' has a wrong offset!");

// Function ITEM_Base.ITEM_Base_C.OnBecomeUnactivatable
// 0x0001 (0x0001 - 0x0000)
struct ITEM_Base_C_OnBecomeUnactivatable final
{
public:
	bool                                          Result;                                            // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(ITEM_Base_C_OnBecomeUnactivatable) == 0x000001, "Wrong alignment on ITEM_Base_C_OnBecomeUnactivatable");
static_assert(sizeof(ITEM_Base_C_OnBecomeUnactivatable) == 0x000001, "Wrong size on ITEM_Base_C_OnBecomeUnactivatable");
static_assert(offsetof(ITEM_Base_C_OnBecomeUnactivatable, Result) == 0x000000, "Member 'ITEM_Base_C_OnBecomeUnactivatable::Result' has a wrong offset!");

// Function ITEM_Base.ITEM_Base_C.SetEquipped
// 0x0002 (0x0002 - 0x0000)
struct ITEM_Base_C_SetEquipped final
{
public:
	bool                                          State;                                             // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Result;                                            // 0x0001(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(ITEM_Base_C_SetEquipped) == 0x000001, "Wrong alignment on ITEM_Base_C_SetEquipped");
static_assert(sizeof(ITEM_Base_C_SetEquipped) == 0x000002, "Wrong size on ITEM_Base_C_SetEquipped");
static_assert(offsetof(ITEM_Base_C_SetEquipped, State) == 0x000000, "Member 'ITEM_Base_C_SetEquipped::State' has a wrong offset!");
static_assert(offsetof(ITEM_Base_C_SetEquipped, Result) == 0x000001, "Member 'ITEM_Base_C_SetEquipped::Result' has a wrong offset!");

// Function ITEM_Base.ITEM_Base_C.SetActivatableInternal
// 0x0001 (0x0001 - 0x0000)
struct ITEM_Base_C_SetActivatableInternal final
{
public:
	bool                                          State;                                             // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(ITEM_Base_C_SetActivatableInternal) == 0x000001, "Wrong alignment on ITEM_Base_C_SetActivatableInternal");
static_assert(sizeof(ITEM_Base_C_SetActivatableInternal) == 0x000001, "Wrong size on ITEM_Base_C_SetActivatableInternal");
static_assert(offsetof(ITEM_Base_C_SetActivatableInternal, State) == 0x000000, "Member 'ITEM_Base_C_SetActivatableInternal::State' has a wrong offset!");

// Function ITEM_Base.ITEM_Base_C.Activate
// 0x0010 (0x0010 - 0x0000)
struct ITEM_Base_C_Activate final
{
public:
	class APAWN_SystemShockCharacter_C*           Character;                                         // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Result;                                            // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_CanActivate_Result;                       // 0x0009(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(ITEM_Base_C_Activate) == 0x000008, "Wrong alignment on ITEM_Base_C_Activate");
static_assert(sizeof(ITEM_Base_C_Activate) == 0x000010, "Wrong size on ITEM_Base_C_Activate");
static_assert(offsetof(ITEM_Base_C_Activate, Character) == 0x000000, "Member 'ITEM_Base_C_Activate::Character' has a wrong offset!");
static_assert(offsetof(ITEM_Base_C_Activate, Result) == 0x000008, "Member 'ITEM_Base_C_Activate::Result' has a wrong offset!");
static_assert(offsetof(ITEM_Base_C_Activate, CallFunc_CanActivate_Result) == 0x000009, "Member 'ITEM_Base_C_Activate::CallFunc_CanActivate_Result' has a wrong offset!");

// Function ITEM_Base.ITEM_Base_C.Deactivate
// 0x0018 (0x0018 - 0x0000)
struct ITEM_Base_C_Deactivate final
{
public:
	bool                                          Result;                                            // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsGamePaused_ReturnValue;                 // 0x0001(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_2[0x6];                                        // 0x0002(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class UCOMP_Inventory_C*                      CallFunc_GetInventory_Inventory;                   // 0x0008(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Not_PreBool_ReturnValue;                  // 0x0010(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0011(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BooleanAND_ReturnValue;                   // 0x0012(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BooleanAND_ReturnValue_1;                 // 0x0013(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(ITEM_Base_C_Deactivate) == 0x000008, "Wrong alignment on ITEM_Base_C_Deactivate");
static_assert(sizeof(ITEM_Base_C_Deactivate) == 0x000018, "Wrong size on ITEM_Base_C_Deactivate");
static_assert(offsetof(ITEM_Base_C_Deactivate, Result) == 0x000000, "Member 'ITEM_Base_C_Deactivate::Result' has a wrong offset!");
static_assert(offsetof(ITEM_Base_C_Deactivate, CallFunc_IsGamePaused_ReturnValue) == 0x000001, "Member 'ITEM_Base_C_Deactivate::CallFunc_IsGamePaused_ReturnValue' has a wrong offset!");
static_assert(offsetof(ITEM_Base_C_Deactivate, CallFunc_GetInventory_Inventory) == 0x000008, "Member 'ITEM_Base_C_Deactivate::CallFunc_GetInventory_Inventory' has a wrong offset!");
static_assert(offsetof(ITEM_Base_C_Deactivate, CallFunc_Not_PreBool_ReturnValue) == 0x000010, "Member 'ITEM_Base_C_Deactivate::CallFunc_Not_PreBool_ReturnValue' has a wrong offset!");
static_assert(offsetof(ITEM_Base_C_Deactivate, CallFunc_IsValid_ReturnValue) == 0x000011, "Member 'ITEM_Base_C_Deactivate::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(ITEM_Base_C_Deactivate, CallFunc_BooleanAND_ReturnValue) == 0x000012, "Member 'ITEM_Base_C_Deactivate::CallFunc_BooleanAND_ReturnValue' has a wrong offset!");
static_assert(offsetof(ITEM_Base_C_Deactivate, CallFunc_BooleanAND_ReturnValue_1) == 0x000013, "Member 'ITEM_Base_C_Deactivate::CallFunc_BooleanAND_ReturnValue_1' has a wrong offset!");

// Function ITEM_Base.ITEM_Base_C.IsEquippable
// 0x0001 (0x0001 - 0x0000)
struct ITEM_Base_C_IsEquippable final
{
public:
	bool                                          Result;                                            // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(ITEM_Base_C_IsEquippable) == 0x000001, "Wrong alignment on ITEM_Base_C_IsEquippable");
static_assert(sizeof(ITEM_Base_C_IsEquippable) == 0x000001, "Wrong size on ITEM_Base_C_IsEquippable");
static_assert(offsetof(ITEM_Base_C_IsEquippable, Result) == 0x000000, "Member 'ITEM_Base_C_IsEquippable::Result' has a wrong offset!");

// Function ITEM_Base.ITEM_Base_C.GetInventoryItemDetailsClass
// 0x0008 (0x0008 - 0x0000)
struct ITEM_Base_C_GetInventoryItemDetailsClass final
{
public:
	class UClass*                                 InventoryItemDetailsWidget;                        // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(ITEM_Base_C_GetInventoryItemDetailsClass) == 0x000008, "Wrong alignment on ITEM_Base_C_GetInventoryItemDetailsClass");
static_assert(sizeof(ITEM_Base_C_GetInventoryItemDetailsClass) == 0x000008, "Wrong size on ITEM_Base_C_GetInventoryItemDetailsClass");
static_assert(offsetof(ITEM_Base_C_GetInventoryItemDetailsClass, InventoryItemDetailsWidget) == 0x000000, "Member 'ITEM_Base_C_GetInventoryItemDetailsClass::InventoryItemDetailsWidget' has a wrong offset!");

// Function ITEM_Base.ITEM_Base_C.TryHandleDropEvent
// 0x0018 (0x0018 - 0x0000)
struct ITEM_Base_C_TryHandleDropEvent final
{
public:
	class USceneComponent*                        SceneComponent;                                    // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector2D                              RelativeOffset;                                    // 0x0008(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Result;                                            // 0x0010(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(ITEM_Base_C_TryHandleDropEvent) == 0x000008, "Wrong alignment on ITEM_Base_C_TryHandleDropEvent");
static_assert(sizeof(ITEM_Base_C_TryHandleDropEvent) == 0x000018, "Wrong size on ITEM_Base_C_TryHandleDropEvent");
static_assert(offsetof(ITEM_Base_C_TryHandleDropEvent, SceneComponent) == 0x000000, "Member 'ITEM_Base_C_TryHandleDropEvent::SceneComponent' has a wrong offset!");
static_assert(offsetof(ITEM_Base_C_TryHandleDropEvent, RelativeOffset) == 0x000008, "Member 'ITEM_Base_C_TryHandleDropEvent::RelativeOffset' has a wrong offset!");
static_assert(offsetof(ITEM_Base_C_TryHandleDropEvent, Result) == 0x000010, "Member 'ITEM_Base_C_TryHandleDropEvent::Result' has a wrong offset!");

// Function ITEM_Base.ITEM_Base_C.ForceHandleDropEvent
// 0x0018 (0x0018 - 0x0000)
struct ITEM_Base_C_ForceHandleDropEvent final
{
public:
	class USceneComponent*                        SceneComponent;                                    // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector2D                              RelativeOffset;                                    // 0x0008(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class APICKUP_Base_C*                         CallFunc_CreateDroppedPickupItem_PickupActor;      // 0x0010(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(ITEM_Base_C_ForceHandleDropEvent) == 0x000008, "Wrong alignment on ITEM_Base_C_ForceHandleDropEvent");
static_assert(sizeof(ITEM_Base_C_ForceHandleDropEvent) == 0x000018, "Wrong size on ITEM_Base_C_ForceHandleDropEvent");
static_assert(offsetof(ITEM_Base_C_ForceHandleDropEvent, SceneComponent) == 0x000000, "Member 'ITEM_Base_C_ForceHandleDropEvent::SceneComponent' has a wrong offset!");
static_assert(offsetof(ITEM_Base_C_ForceHandleDropEvent, RelativeOffset) == 0x000008, "Member 'ITEM_Base_C_ForceHandleDropEvent::RelativeOffset' has a wrong offset!");
static_assert(offsetof(ITEM_Base_C_ForceHandleDropEvent, CallFunc_CreateDroppedPickupItem_PickupActor) == 0x000010, "Member 'ITEM_Base_C_ForceHandleDropEvent::CallFunc_CreateDroppedPickupItem_PickupActor' has a wrong offset!");

// Function ITEM_Base.ITEM_Base_C.CanBecomeActivatable
// 0x0038 (0x0038 - 0x0000)
struct ITEM_Base_C_CanBecomeActivatable final
{
public:
	bool                                          Result;                                            // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UCOMP_Inventory_C*                      CallFunc_GetInventory_Inventory;                   // 0x0008(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UCOMP_Inventory_C*                      CallFunc_GetInventory_Inventory_1;                 // 0x0010(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 CallFunc_GetOwner_ReturnValue;                     // 0x0018(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0020(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_21[0x7];                                       // 0x0021(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class APAWN_SystemShockCharacter_C*           K2Node_DynamicCast_AsPAWN_System_Shock_Character;  // 0x0028(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0030(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(ITEM_Base_C_CanBecomeActivatable) == 0x000008, "Wrong alignment on ITEM_Base_C_CanBecomeActivatable");
static_assert(sizeof(ITEM_Base_C_CanBecomeActivatable) == 0x000038, "Wrong size on ITEM_Base_C_CanBecomeActivatable");
static_assert(offsetof(ITEM_Base_C_CanBecomeActivatable, Result) == 0x000000, "Member 'ITEM_Base_C_CanBecomeActivatable::Result' has a wrong offset!");
static_assert(offsetof(ITEM_Base_C_CanBecomeActivatable, CallFunc_GetInventory_Inventory) == 0x000008, "Member 'ITEM_Base_C_CanBecomeActivatable::CallFunc_GetInventory_Inventory' has a wrong offset!");
static_assert(offsetof(ITEM_Base_C_CanBecomeActivatable, CallFunc_GetInventory_Inventory_1) == 0x000010, "Member 'ITEM_Base_C_CanBecomeActivatable::CallFunc_GetInventory_Inventory_1' has a wrong offset!");
static_assert(offsetof(ITEM_Base_C_CanBecomeActivatable, CallFunc_GetOwner_ReturnValue) == 0x000018, "Member 'ITEM_Base_C_CanBecomeActivatable::CallFunc_GetOwner_ReturnValue' has a wrong offset!");
static_assert(offsetof(ITEM_Base_C_CanBecomeActivatable, CallFunc_IsValid_ReturnValue) == 0x000020, "Member 'ITEM_Base_C_CanBecomeActivatable::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(ITEM_Base_C_CanBecomeActivatable, K2Node_DynamicCast_AsPAWN_System_Shock_Character) == 0x000028, "Member 'ITEM_Base_C_CanBecomeActivatable::K2Node_DynamicCast_AsPAWN_System_Shock_Character' has a wrong offset!");
static_assert(offsetof(ITEM_Base_C_CanBecomeActivatable, K2Node_DynamicCast_bSuccess) == 0x000030, "Member 'ITEM_Base_C_CanBecomeActivatable::K2Node_DynamicCast_bSuccess' has a wrong offset!");

// Function ITEM_Base.ITEM_Base_C.GetHotbarSlottableObject
// 0x0018 (0x0018 - 0x0000)
struct ITEM_Base_C_GetHotbarSlottableObject final
{
public:
	bool                                          Valid;                                             // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TScriptInterface<class IINTERF_HotbarSlottable_C> SlottableObject;                                   // 0x0008(0x0010)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(ITEM_Base_C_GetHotbarSlottableObject) == 0x000008, "Wrong alignment on ITEM_Base_C_GetHotbarSlottableObject");
static_assert(sizeof(ITEM_Base_C_GetHotbarSlottableObject) == 0x000018, "Wrong size on ITEM_Base_C_GetHotbarSlottableObject");
static_assert(offsetof(ITEM_Base_C_GetHotbarSlottableObject, Valid) == 0x000000, "Member 'ITEM_Base_C_GetHotbarSlottableObject::Valid' has a wrong offset!");
static_assert(offsetof(ITEM_Base_C_GetHotbarSlottableObject, SlottableObject) == 0x000008, "Member 'ITEM_Base_C_GetHotbarSlottableObject::SlottableObject' has a wrong offset!");

// Function ITEM_Base.ITEM_Base_C.GetIsActivated
// 0x0001 (0x0001 - 0x0000)
struct ITEM_Base_C_GetIsActivated final
{
public:
	bool                                          Result;                                            // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(ITEM_Base_C_GetIsActivated) == 0x000001, "Wrong alignment on ITEM_Base_C_GetIsActivated");
static_assert(sizeof(ITEM_Base_C_GetIsActivated) == 0x000001, "Wrong size on ITEM_Base_C_GetIsActivated");
static_assert(offsetof(ITEM_Base_C_GetIsActivated, Result) == 0x000000, "Member 'ITEM_Base_C_GetIsActivated::Result' has a wrong offset!");

// Function ITEM_Base.ITEM_Base_C.GetDisplayName
// 0x0018 (0x0018 - 0x0000)
struct ITEM_Base_C_GetDisplayName final
{
public:
	class FText                                   Result;                                            // 0x0000(0x0018)(Parm, OutParm)
};
static_assert(alignof(ITEM_Base_C_GetDisplayName) == 0x000008, "Wrong alignment on ITEM_Base_C_GetDisplayName");
static_assert(sizeof(ITEM_Base_C_GetDisplayName) == 0x000018, "Wrong size on ITEM_Base_C_GetDisplayName");
static_assert(offsetof(ITEM_Base_C_GetDisplayName, Result) == 0x000000, "Member 'ITEM_Base_C_GetDisplayName::Result' has a wrong offset!");

// Function ITEM_Base.ITEM_Base_C.GetShortDisplayName
// 0x0018 (0x0018 - 0x0000)
struct ITEM_Base_C_GetShortDisplayName final
{
public:
	class FText                                   Result;                                            // 0x0000(0x0018)(Parm, OutParm)
};
static_assert(alignof(ITEM_Base_C_GetShortDisplayName) == 0x000008, "Wrong alignment on ITEM_Base_C_GetShortDisplayName");
static_assert(sizeof(ITEM_Base_C_GetShortDisplayName) == 0x000018, "Wrong size on ITEM_Base_C_GetShortDisplayName");
static_assert(offsetof(ITEM_Base_C_GetShortDisplayName, Result) == 0x000000, "Member 'ITEM_Base_C_GetShortDisplayName::Result' has a wrong offset!");

// Function ITEM_Base.ITEM_Base_C.GetDescription
// 0x0018 (0x0018 - 0x0000)
struct ITEM_Base_C_GetDescription final
{
public:
	class FText                                   Result;                                            // 0x0000(0x0018)(Parm, OutParm)
};
static_assert(alignof(ITEM_Base_C_GetDescription) == 0x000008, "Wrong alignment on ITEM_Base_C_GetDescription");
static_assert(sizeof(ITEM_Base_C_GetDescription) == 0x000018, "Wrong size on ITEM_Base_C_GetDescription");
static_assert(offsetof(ITEM_Base_C_GetDescription, Result) == 0x000000, "Member 'ITEM_Base_C_GetDescription::Result' has a wrong offset!");

// Function ITEM_Base.ITEM_Base_C.CanActivate
// 0x0040 (0x0040 - 0x0000)
struct ITEM_Base_C_CanActivate final
{
public:
	class APAWN_SystemShockCharacter_C*           Character;                                         // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Result;                                            // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsGamePaused_ReturnValue;                 // 0x0009(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_A[0x6];                                        // 0x000A(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class UCOMP_Inventory_C*                      CallFunc_GetInventory_Inventory;                   // 0x0010(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Not_PreBool_ReturnValue;                  // 0x0018(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0019(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_1A[0x6];                                       // 0x001A(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class UCOMP_Inventory_C*                      CallFunc_GetInventory_Inventory_1;                 // 0x0020(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 CallFunc_GetOwner_ReturnValue;                     // 0x0028(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class APAWN_SystemShockCharacter_C*           K2Node_DynamicCast_AsPAWN_System_Shock_Character;  // 0x0030(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0038(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsValid_ReturnValue_1;                    // 0x0039(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(ITEM_Base_C_CanActivate) == 0x000008, "Wrong alignment on ITEM_Base_C_CanActivate");
static_assert(sizeof(ITEM_Base_C_CanActivate) == 0x000040, "Wrong size on ITEM_Base_C_CanActivate");
static_assert(offsetof(ITEM_Base_C_CanActivate, Character) == 0x000000, "Member 'ITEM_Base_C_CanActivate::Character' has a wrong offset!");
static_assert(offsetof(ITEM_Base_C_CanActivate, Result) == 0x000008, "Member 'ITEM_Base_C_CanActivate::Result' has a wrong offset!");
static_assert(offsetof(ITEM_Base_C_CanActivate, CallFunc_IsGamePaused_ReturnValue) == 0x000009, "Member 'ITEM_Base_C_CanActivate::CallFunc_IsGamePaused_ReturnValue' has a wrong offset!");
static_assert(offsetof(ITEM_Base_C_CanActivate, CallFunc_GetInventory_Inventory) == 0x000010, "Member 'ITEM_Base_C_CanActivate::CallFunc_GetInventory_Inventory' has a wrong offset!");
static_assert(offsetof(ITEM_Base_C_CanActivate, CallFunc_Not_PreBool_ReturnValue) == 0x000018, "Member 'ITEM_Base_C_CanActivate::CallFunc_Not_PreBool_ReturnValue' has a wrong offset!");
static_assert(offsetof(ITEM_Base_C_CanActivate, CallFunc_IsValid_ReturnValue) == 0x000019, "Member 'ITEM_Base_C_CanActivate::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(ITEM_Base_C_CanActivate, CallFunc_GetInventory_Inventory_1) == 0x000020, "Member 'ITEM_Base_C_CanActivate::CallFunc_GetInventory_Inventory_1' has a wrong offset!");
static_assert(offsetof(ITEM_Base_C_CanActivate, CallFunc_GetOwner_ReturnValue) == 0x000028, "Member 'ITEM_Base_C_CanActivate::CallFunc_GetOwner_ReturnValue' has a wrong offset!");
static_assert(offsetof(ITEM_Base_C_CanActivate, K2Node_DynamicCast_AsPAWN_System_Shock_Character) == 0x000030, "Member 'ITEM_Base_C_CanActivate::K2Node_DynamicCast_AsPAWN_System_Shock_Character' has a wrong offset!");
static_assert(offsetof(ITEM_Base_C_CanActivate, K2Node_DynamicCast_bSuccess) == 0x000038, "Member 'ITEM_Base_C_CanActivate::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(ITEM_Base_C_CanActivate, CallFunc_IsValid_ReturnValue_1) == 0x000039, "Member 'ITEM_Base_C_CanActivate::CallFunc_IsValid_ReturnValue_1' has a wrong offset!");

// Function ITEM_Base.ITEM_Base_C.GetOwnerActor
// 0x0048 (0x0048 - 0x0000)
struct ITEM_Base_C_GetOwnerActor final
{
public:
	bool                                          PrevIfNoInventory;                                 // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class AActor*                                 Actor;                                             // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UObject*                                CallFunc_GetOuterObject_ReturnValue;               // 0x0010(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UCOMP_Inventory_C*                      CallFunc_GetInventory_Inventory;                   // 0x0018(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 K2Node_DynamicCast_AsActor;                        // 0x0020(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0028(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_29[0x7];                                       // 0x0029(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class AActor*                                 CallFunc_GetOwner_ReturnValue;                     // 0x0030(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UCOMP_Inventory_C*                      CallFunc_GetInventory_Inventory_1;                 // 0x0038(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0040(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(ITEM_Base_C_GetOwnerActor) == 0x000008, "Wrong alignment on ITEM_Base_C_GetOwnerActor");
static_assert(sizeof(ITEM_Base_C_GetOwnerActor) == 0x000048, "Wrong size on ITEM_Base_C_GetOwnerActor");
static_assert(offsetof(ITEM_Base_C_GetOwnerActor, PrevIfNoInventory) == 0x000000, "Member 'ITEM_Base_C_GetOwnerActor::PrevIfNoInventory' has a wrong offset!");
static_assert(offsetof(ITEM_Base_C_GetOwnerActor, Actor) == 0x000008, "Member 'ITEM_Base_C_GetOwnerActor::Actor' has a wrong offset!");
static_assert(offsetof(ITEM_Base_C_GetOwnerActor, CallFunc_GetOuterObject_ReturnValue) == 0x000010, "Member 'ITEM_Base_C_GetOwnerActor::CallFunc_GetOuterObject_ReturnValue' has a wrong offset!");
static_assert(offsetof(ITEM_Base_C_GetOwnerActor, CallFunc_GetInventory_Inventory) == 0x000018, "Member 'ITEM_Base_C_GetOwnerActor::CallFunc_GetInventory_Inventory' has a wrong offset!");
static_assert(offsetof(ITEM_Base_C_GetOwnerActor, K2Node_DynamicCast_AsActor) == 0x000020, "Member 'ITEM_Base_C_GetOwnerActor::K2Node_DynamicCast_AsActor' has a wrong offset!");
static_assert(offsetof(ITEM_Base_C_GetOwnerActor, K2Node_DynamicCast_bSuccess) == 0x000028, "Member 'ITEM_Base_C_GetOwnerActor::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(ITEM_Base_C_GetOwnerActor, CallFunc_GetOwner_ReturnValue) == 0x000030, "Member 'ITEM_Base_C_GetOwnerActor::CallFunc_GetOwner_ReturnValue' has a wrong offset!");
static_assert(offsetof(ITEM_Base_C_GetOwnerActor, CallFunc_GetInventory_Inventory_1) == 0x000038, "Member 'ITEM_Base_C_GetOwnerActor::CallFunc_GetInventory_Inventory_1' has a wrong offset!");
static_assert(offsetof(ITEM_Base_C_GetOwnerActor, CallFunc_IsValid_ReturnValue) == 0x000040, "Member 'ITEM_Base_C_GetOwnerActor::CallFunc_IsValid_ReturnValue' has a wrong offset!");

// Function ITEM_Base.ITEM_Base_C.GetOwnerCharacter
// 0x0020 (0x0020 - 0x0000)
struct ITEM_Base_C_GetOwnerCharacter final
{
public:
	class APAWN_SystemShockCharacter_C*           Character;                                         // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 CallFunc_GetOwnerActor_Actor;                      // 0x0008(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class APAWN_SystemShockCharacter_C*           K2Node_DynamicCast_AsPAWN_System_Shock_Character;  // 0x0010(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0018(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(ITEM_Base_C_GetOwnerCharacter) == 0x000008, "Wrong alignment on ITEM_Base_C_GetOwnerCharacter");
static_assert(sizeof(ITEM_Base_C_GetOwnerCharacter) == 0x000020, "Wrong size on ITEM_Base_C_GetOwnerCharacter");
static_assert(offsetof(ITEM_Base_C_GetOwnerCharacter, Character) == 0x000000, "Member 'ITEM_Base_C_GetOwnerCharacter::Character' has a wrong offset!");
static_assert(offsetof(ITEM_Base_C_GetOwnerCharacter, CallFunc_GetOwnerActor_Actor) == 0x000008, "Member 'ITEM_Base_C_GetOwnerCharacter::CallFunc_GetOwnerActor_Actor' has a wrong offset!");
static_assert(offsetof(ITEM_Base_C_GetOwnerCharacter, K2Node_DynamicCast_AsPAWN_System_Shock_Character) == 0x000010, "Member 'ITEM_Base_C_GetOwnerCharacter::K2Node_DynamicCast_AsPAWN_System_Shock_Character' has a wrong offset!");
static_assert(offsetof(ITEM_Base_C_GetOwnerCharacter, K2Node_DynamicCast_bSuccess) == 0x000018, "Member 'ITEM_Base_C_GetOwnerCharacter::K2Node_DynamicCast_bSuccess' has a wrong offset!");

// Function ITEM_Base.ITEM_Base_C.GetBestPickupClass
// 0x0020 (0x0020 - 0x0000)
struct ITEM_Base_C_GetBestPickupClass final
{
public:
	class UClass*                                 Result;                                            // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UClass*                                 CallFunc_LoadClassAsset_Blocking_ReturnValue;      // 0x0008(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UClass*                                 K2Node_ClassDynamicCast_AsPICKUP_Base;             // 0x0010(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_ClassDynamicCast_bSuccess;                  // 0x0018(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(ITEM_Base_C_GetBestPickupClass) == 0x000008, "Wrong alignment on ITEM_Base_C_GetBestPickupClass");
static_assert(sizeof(ITEM_Base_C_GetBestPickupClass) == 0x000020, "Wrong size on ITEM_Base_C_GetBestPickupClass");
static_assert(offsetof(ITEM_Base_C_GetBestPickupClass, Result) == 0x000000, "Member 'ITEM_Base_C_GetBestPickupClass::Result' has a wrong offset!");
static_assert(offsetof(ITEM_Base_C_GetBestPickupClass, CallFunc_LoadClassAsset_Blocking_ReturnValue) == 0x000008, "Member 'ITEM_Base_C_GetBestPickupClass::CallFunc_LoadClassAsset_Blocking_ReturnValue' has a wrong offset!");
static_assert(offsetof(ITEM_Base_C_GetBestPickupClass, K2Node_ClassDynamicCast_AsPICKUP_Base) == 0x000010, "Member 'ITEM_Base_C_GetBestPickupClass::K2Node_ClassDynamicCast_AsPICKUP_Base' has a wrong offset!");
static_assert(offsetof(ITEM_Base_C_GetBestPickupClass, K2Node_ClassDynamicCast_bSuccess) == 0x000018, "Member 'ITEM_Base_C_GetBestPickupClass::K2Node_ClassDynamicCast_bSuccess' has a wrong offset!");

// Function ITEM_Base.ITEM_Base_C.GetIconRenderClassCollection
// 0x0030 (0x0030 - 0x0000)
struct ITEM_Base_C_GetIconRenderClassCollection final
{
public:
	struct FObjectClassCollection                 Result;                                            // 0x0000(0x0010)(Parm, OutParm, HasGetValueTypeHash)
	TArray<TSoftClassPtr<class UClass>>           K2Node_MakeArray_Array;                            // 0x0010(0x0010)(ReferenceParm)
	struct FObjectClassCollection                 K2Node_MakeStruct_ObjectClassCollection;           // 0x0020(0x0010)(HasGetValueTypeHash)
};
static_assert(alignof(ITEM_Base_C_GetIconRenderClassCollection) == 0x000008, "Wrong alignment on ITEM_Base_C_GetIconRenderClassCollection");
static_assert(sizeof(ITEM_Base_C_GetIconRenderClassCollection) == 0x000030, "Wrong size on ITEM_Base_C_GetIconRenderClassCollection");
static_assert(offsetof(ITEM_Base_C_GetIconRenderClassCollection, Result) == 0x000000, "Member 'ITEM_Base_C_GetIconRenderClassCollection::Result' has a wrong offset!");
static_assert(offsetof(ITEM_Base_C_GetIconRenderClassCollection, K2Node_MakeArray_Array) == 0x000010, "Member 'ITEM_Base_C_GetIconRenderClassCollection::K2Node_MakeArray_Array' has a wrong offset!");
static_assert(offsetof(ITEM_Base_C_GetIconRenderClassCollection, K2Node_MakeStruct_ObjectClassCollection) == 0x000020, "Member 'ITEM_Base_C_GetIconRenderClassCollection::K2Node_MakeStruct_ObjectClassCollection' has a wrong offset!");

// Function ITEM_Base.ITEM_Base_C.TryRotateItem
// 0x0028 (0x0028 - 0x0000)
struct ITEM_Base_C_TryRotateItem final
{
public:
	bool                                          Result;                                            // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          RequiresUnslot;                                    // 0x0001(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_2[0x2];                                        // 0x0002(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         PreviousSlotIndex;                                 // 0x0004(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UInventoryBag_C*                        PreviousBag;                                       // 0x0008(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_AddItemToSlot_Result;                     // 0x0010(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Not_PreBool_ReturnValue;                  // 0x0011(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsOverflowBag_Result;                     // 0x0012(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_13[0x5];                                       // 0x0013(0x0005)(Fixing Size After Last Property [ Dumper-7 ])
	class UITEM_Base_C*                           CallFunc_RemoveItem_RemovedItem;                   // 0x0018(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Not_PreBool_ReturnValue_1;                // 0x0020(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_CanRotateItem_Result;                     // 0x0021(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_CanRotateItem_RequiresUnslot;             // 0x0022(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(ITEM_Base_C_TryRotateItem) == 0x000008, "Wrong alignment on ITEM_Base_C_TryRotateItem");
static_assert(sizeof(ITEM_Base_C_TryRotateItem) == 0x000028, "Wrong size on ITEM_Base_C_TryRotateItem");
static_assert(offsetof(ITEM_Base_C_TryRotateItem, Result) == 0x000000, "Member 'ITEM_Base_C_TryRotateItem::Result' has a wrong offset!");
static_assert(offsetof(ITEM_Base_C_TryRotateItem, RequiresUnslot) == 0x000001, "Member 'ITEM_Base_C_TryRotateItem::RequiresUnslot' has a wrong offset!");
static_assert(offsetof(ITEM_Base_C_TryRotateItem, PreviousSlotIndex) == 0x000004, "Member 'ITEM_Base_C_TryRotateItem::PreviousSlotIndex' has a wrong offset!");
static_assert(offsetof(ITEM_Base_C_TryRotateItem, PreviousBag) == 0x000008, "Member 'ITEM_Base_C_TryRotateItem::PreviousBag' has a wrong offset!");
static_assert(offsetof(ITEM_Base_C_TryRotateItem, CallFunc_AddItemToSlot_Result) == 0x000010, "Member 'ITEM_Base_C_TryRotateItem::CallFunc_AddItemToSlot_Result' has a wrong offset!");
static_assert(offsetof(ITEM_Base_C_TryRotateItem, CallFunc_Not_PreBool_ReturnValue) == 0x000011, "Member 'ITEM_Base_C_TryRotateItem::CallFunc_Not_PreBool_ReturnValue' has a wrong offset!");
static_assert(offsetof(ITEM_Base_C_TryRotateItem, CallFunc_IsOverflowBag_Result) == 0x000012, "Member 'ITEM_Base_C_TryRotateItem::CallFunc_IsOverflowBag_Result' has a wrong offset!");
static_assert(offsetof(ITEM_Base_C_TryRotateItem, CallFunc_RemoveItem_RemovedItem) == 0x000018, "Member 'ITEM_Base_C_TryRotateItem::CallFunc_RemoveItem_RemovedItem' has a wrong offset!");
static_assert(offsetof(ITEM_Base_C_TryRotateItem, CallFunc_Not_PreBool_ReturnValue_1) == 0x000020, "Member 'ITEM_Base_C_TryRotateItem::CallFunc_Not_PreBool_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(ITEM_Base_C_TryRotateItem, CallFunc_CanRotateItem_Result) == 0x000021, "Member 'ITEM_Base_C_TryRotateItem::CallFunc_CanRotateItem_Result' has a wrong offset!");
static_assert(offsetof(ITEM_Base_C_TryRotateItem, CallFunc_CanRotateItem_RequiresUnslot) == 0x000022, "Member 'ITEM_Base_C_TryRotateItem::CallFunc_CanRotateItem_RequiresUnslot' has a wrong offset!");

// Function ITEM_Base.ITEM_Base_C.SetIsRotated
// 0x0003 (0x0003 - 0x0000)
struct ITEM_Base_C_SetIsRotated final
{
public:
	bool                                          NewIsRotated;                                      // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Success;                                           // 0x0001(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_NotEqual_IntInt_ReturnValue;              // 0x0002(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(ITEM_Base_C_SetIsRotated) == 0x000001, "Wrong alignment on ITEM_Base_C_SetIsRotated");
static_assert(sizeof(ITEM_Base_C_SetIsRotated) == 0x000003, "Wrong size on ITEM_Base_C_SetIsRotated");
static_assert(offsetof(ITEM_Base_C_SetIsRotated, NewIsRotated) == 0x000000, "Member 'ITEM_Base_C_SetIsRotated::NewIsRotated' has a wrong offset!");
static_assert(offsetof(ITEM_Base_C_SetIsRotated, Success) == 0x000001, "Member 'ITEM_Base_C_SetIsRotated::Success' has a wrong offset!");
static_assert(offsetof(ITEM_Base_C_SetIsRotated, CallFunc_NotEqual_IntInt_ReturnValue) == 0x000002, "Member 'ITEM_Base_C_SetIsRotated::CallFunc_NotEqual_IntInt_ReturnValue' has a wrong offset!");

// Function ITEM_Base.ITEM_Base_C.CanRotateItem
// 0x001C (0x001C - 0x0000)
struct ITEM_Base_C_CanRotateItem final
{
public:
	bool                                          Result;                                            // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          RequiresUnslot;                                    // 0x0001(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_CanUnslot_Result;                         // 0x0002(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsSlotTypeSingle_Result;                  // 0x0003(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_NotEqual_IntInt_ReturnValue;              // 0x0004(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsOverflowBag_Result;                     // 0x0005(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_6[0x2];                                        // 0x0006(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	struct FIntPoint                              CallFunc_GetRotatedGridSize_Result;                // 0x0008(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FIntPoint                              K2Node_MakeStruct_IntPoint;                        // 0x0010(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0018(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_HasGridSpaceForItemWithSize_Result;       // 0x0019(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(ITEM_Base_C_CanRotateItem) == 0x000004, "Wrong alignment on ITEM_Base_C_CanRotateItem");
static_assert(sizeof(ITEM_Base_C_CanRotateItem) == 0x00001C, "Wrong size on ITEM_Base_C_CanRotateItem");
static_assert(offsetof(ITEM_Base_C_CanRotateItem, Result) == 0x000000, "Member 'ITEM_Base_C_CanRotateItem::Result' has a wrong offset!");
static_assert(offsetof(ITEM_Base_C_CanRotateItem, RequiresUnslot) == 0x000001, "Member 'ITEM_Base_C_CanRotateItem::RequiresUnslot' has a wrong offset!");
static_assert(offsetof(ITEM_Base_C_CanRotateItem, CallFunc_CanUnslot_Result) == 0x000002, "Member 'ITEM_Base_C_CanRotateItem::CallFunc_CanUnslot_Result' has a wrong offset!");
static_assert(offsetof(ITEM_Base_C_CanRotateItem, CallFunc_IsSlotTypeSingle_Result) == 0x000003, "Member 'ITEM_Base_C_CanRotateItem::CallFunc_IsSlotTypeSingle_Result' has a wrong offset!");
static_assert(offsetof(ITEM_Base_C_CanRotateItem, CallFunc_NotEqual_IntInt_ReturnValue) == 0x000004, "Member 'ITEM_Base_C_CanRotateItem::CallFunc_NotEqual_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(ITEM_Base_C_CanRotateItem, CallFunc_IsOverflowBag_Result) == 0x000005, "Member 'ITEM_Base_C_CanRotateItem::CallFunc_IsOverflowBag_Result' has a wrong offset!");
static_assert(offsetof(ITEM_Base_C_CanRotateItem, CallFunc_GetRotatedGridSize_Result) == 0x000008, "Member 'ITEM_Base_C_CanRotateItem::CallFunc_GetRotatedGridSize_Result' has a wrong offset!");
static_assert(offsetof(ITEM_Base_C_CanRotateItem, K2Node_MakeStruct_IntPoint) == 0x000010, "Member 'ITEM_Base_C_CanRotateItem::K2Node_MakeStruct_IntPoint' has a wrong offset!");
static_assert(offsetof(ITEM_Base_C_CanRotateItem, CallFunc_IsValid_ReturnValue) == 0x000018, "Member 'ITEM_Base_C_CanRotateItem::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(ITEM_Base_C_CanRotateItem, CallFunc_HasGridSpaceForItemWithSize_Result) == 0x000019, "Member 'ITEM_Base_C_CanRotateItem::CallFunc_HasGridSpaceForItemWithSize_Result' has a wrong offset!");

// Function ITEM_Base.ITEM_Base_C.IsItemRotated
// 0x0001 (0x0001 - 0x0000)
struct ITEM_Base_C_IsItemRotated final
{
public:
	bool                                          Result;                                            // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(ITEM_Base_C_IsItemRotated) == 0x000001, "Wrong alignment on ITEM_Base_C_IsItemRotated");
static_assert(sizeof(ITEM_Base_C_IsItemRotated) == 0x000001, "Wrong size on ITEM_Base_C_IsItemRotated");
static_assert(offsetof(ITEM_Base_C_IsItemRotated, Result) == 0x000000, "Member 'ITEM_Base_C_IsItemRotated::Result' has a wrong offset!");

// Function ITEM_Base.ITEM_Base_C.GetOriginalGridSize
// 0x0010 (0x0010 - 0x0000)
struct ITEM_Base_C_GetOriginalGridSize final
{
public:
	struct FIntPoint                              Result;                                            // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FIntPoint                              K2Node_MakeStruct_IntPoint;                        // 0x0008(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(ITEM_Base_C_GetOriginalGridSize) == 0x000004, "Wrong alignment on ITEM_Base_C_GetOriginalGridSize");
static_assert(sizeof(ITEM_Base_C_GetOriginalGridSize) == 0x000010, "Wrong size on ITEM_Base_C_GetOriginalGridSize");
static_assert(offsetof(ITEM_Base_C_GetOriginalGridSize, Result) == 0x000000, "Member 'ITEM_Base_C_GetOriginalGridSize::Result' has a wrong offset!");
static_assert(offsetof(ITEM_Base_C_GetOriginalGridSize, K2Node_MakeStruct_IntPoint) == 0x000008, "Member 'ITEM_Base_C_GetOriginalGridSize::K2Node_MakeStruct_IntPoint' has a wrong offset!");

// Function ITEM_Base.ITEM_Base_C.GetRotatedGridSize
// 0x0018 (0x0018 - 0x0000)
struct ITEM_Base_C_GetRotatedGridSize final
{
public:
	struct FIntPoint                              Result;                                            // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FIntPoint                              K2Node_MakeStruct_IntPoint;                        // 0x0008(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FIntPoint                              K2Node_MakeStruct_IntPoint_1;                      // 0x0010(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(ITEM_Base_C_GetRotatedGridSize) == 0x000004, "Wrong alignment on ITEM_Base_C_GetRotatedGridSize");
static_assert(sizeof(ITEM_Base_C_GetRotatedGridSize) == 0x000018, "Wrong size on ITEM_Base_C_GetRotatedGridSize");
static_assert(offsetof(ITEM_Base_C_GetRotatedGridSize, Result) == 0x000000, "Member 'ITEM_Base_C_GetRotatedGridSize::Result' has a wrong offset!");
static_assert(offsetof(ITEM_Base_C_GetRotatedGridSize, K2Node_MakeStruct_IntPoint) == 0x000008, "Member 'ITEM_Base_C_GetRotatedGridSize::K2Node_MakeStruct_IntPoint' has a wrong offset!");
static_assert(offsetof(ITEM_Base_C_GetRotatedGridSize, K2Node_MakeStruct_IntPoint_1) == 0x000010, "Member 'ITEM_Base_C_GetRotatedGridSize::K2Node_MakeStruct_IntPoint_1' has a wrong offset!");

// Function ITEM_Base.ITEM_Base_C.EVENT_OnPushDroppedPickup
// 0x0070 (0x0070 - 0x0000)
struct ITEM_Base_C_EVENT_OnPushDroppedPickup final
{
public:
	class APICKUP_Base_C*                         Pickup;                                            // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                ThrowDirection;                                    // 0x0008(0x000C)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class APlayerController*                      PlayerController;                                  // 0x0018(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash)
	bool                                          CallFunc_K2_IsPhysicsCollisionEnabled_ReturnValue; // 0x0020(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_21[0x7];                                       // 0x0021(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class APlayerController*                      CallFunc_GetPlayerController_ReturnValue;          // 0x0028(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_K2_GetComponentLocation_ReturnValue;      // 0x0030(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Multiply_VectorFloat_ReturnValue;         // 0x003C(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector2D                              CallFunc_ProjectWorldToScreen_ScreenPosition;      // 0x0048(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_ProjectWorldToScreen_ReturnValue;         // 0x0050(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_51[0x3];                                       // 0x0051(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                CallFunc_DeprojectScreenToWorld_WorldPosition;     // 0x0054(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_DeprojectScreenToWorld_WorldDirection;    // 0x0060(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_DeprojectScreenToWorld_ReturnValue;       // 0x006C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(ITEM_Base_C_EVENT_OnPushDroppedPickup) == 0x000008, "Wrong alignment on ITEM_Base_C_EVENT_OnPushDroppedPickup");
static_assert(sizeof(ITEM_Base_C_EVENT_OnPushDroppedPickup) == 0x000070, "Wrong size on ITEM_Base_C_EVENT_OnPushDroppedPickup");
static_assert(offsetof(ITEM_Base_C_EVENT_OnPushDroppedPickup, Pickup) == 0x000000, "Member 'ITEM_Base_C_EVENT_OnPushDroppedPickup::Pickup' has a wrong offset!");
static_assert(offsetof(ITEM_Base_C_EVENT_OnPushDroppedPickup, ThrowDirection) == 0x000008, "Member 'ITEM_Base_C_EVENT_OnPushDroppedPickup::ThrowDirection' has a wrong offset!");
static_assert(offsetof(ITEM_Base_C_EVENT_OnPushDroppedPickup, PlayerController) == 0x000018, "Member 'ITEM_Base_C_EVENT_OnPushDroppedPickup::PlayerController' has a wrong offset!");
static_assert(offsetof(ITEM_Base_C_EVENT_OnPushDroppedPickup, CallFunc_K2_IsPhysicsCollisionEnabled_ReturnValue) == 0x000020, "Member 'ITEM_Base_C_EVENT_OnPushDroppedPickup::CallFunc_K2_IsPhysicsCollisionEnabled_ReturnValue' has a wrong offset!");
static_assert(offsetof(ITEM_Base_C_EVENT_OnPushDroppedPickup, CallFunc_GetPlayerController_ReturnValue) == 0x000028, "Member 'ITEM_Base_C_EVENT_OnPushDroppedPickup::CallFunc_GetPlayerController_ReturnValue' has a wrong offset!");
static_assert(offsetof(ITEM_Base_C_EVENT_OnPushDroppedPickup, CallFunc_K2_GetComponentLocation_ReturnValue) == 0x000030, "Member 'ITEM_Base_C_EVENT_OnPushDroppedPickup::CallFunc_K2_GetComponentLocation_ReturnValue' has a wrong offset!");
static_assert(offsetof(ITEM_Base_C_EVENT_OnPushDroppedPickup, CallFunc_Multiply_VectorFloat_ReturnValue) == 0x00003C, "Member 'ITEM_Base_C_EVENT_OnPushDroppedPickup::CallFunc_Multiply_VectorFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(ITEM_Base_C_EVENT_OnPushDroppedPickup, CallFunc_ProjectWorldToScreen_ScreenPosition) == 0x000048, "Member 'ITEM_Base_C_EVENT_OnPushDroppedPickup::CallFunc_ProjectWorldToScreen_ScreenPosition' has a wrong offset!");
static_assert(offsetof(ITEM_Base_C_EVENT_OnPushDroppedPickup, CallFunc_ProjectWorldToScreen_ReturnValue) == 0x000050, "Member 'ITEM_Base_C_EVENT_OnPushDroppedPickup::CallFunc_ProjectWorldToScreen_ReturnValue' has a wrong offset!");
static_assert(offsetof(ITEM_Base_C_EVENT_OnPushDroppedPickup, CallFunc_DeprojectScreenToWorld_WorldPosition) == 0x000054, "Member 'ITEM_Base_C_EVENT_OnPushDroppedPickup::CallFunc_DeprojectScreenToWorld_WorldPosition' has a wrong offset!");
static_assert(offsetof(ITEM_Base_C_EVENT_OnPushDroppedPickup, CallFunc_DeprojectScreenToWorld_WorldDirection) == 0x000060, "Member 'ITEM_Base_C_EVENT_OnPushDroppedPickup::CallFunc_DeprojectScreenToWorld_WorldDirection' has a wrong offset!");
static_assert(offsetof(ITEM_Base_C_EVENT_OnPushDroppedPickup, CallFunc_DeprojectScreenToWorld_ReturnValue) == 0x00006C, "Member 'ITEM_Base_C_EVENT_OnPushDroppedPickup::CallFunc_DeprojectScreenToWorld_ReturnValue' has a wrong offset!");

// Function ITEM_Base.ITEM_Base_C.GetGridSizeForDesiredRotation
// 0x001C (0x001C - 0x0000)
struct ITEM_Base_C_GetGridSizeForDesiredRotation final
{
public:
	bool                                          DesiredState;                                      // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FIntPoint                              Result;                                            // 0x0004(0x0008)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FIntPoint                              K2Node_MakeStruct_IntPoint;                        // 0x000C(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FIntPoint                              K2Node_MakeStruct_IntPoint_1;                      // 0x0014(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(ITEM_Base_C_GetGridSizeForDesiredRotation) == 0x000004, "Wrong alignment on ITEM_Base_C_GetGridSizeForDesiredRotation");
static_assert(sizeof(ITEM_Base_C_GetGridSizeForDesiredRotation) == 0x00001C, "Wrong size on ITEM_Base_C_GetGridSizeForDesiredRotation");
static_assert(offsetof(ITEM_Base_C_GetGridSizeForDesiredRotation, DesiredState) == 0x000000, "Member 'ITEM_Base_C_GetGridSizeForDesiredRotation::DesiredState' has a wrong offset!");
static_assert(offsetof(ITEM_Base_C_GetGridSizeForDesiredRotation, Result) == 0x000004, "Member 'ITEM_Base_C_GetGridSizeForDesiredRotation::Result' has a wrong offset!");
static_assert(offsetof(ITEM_Base_C_GetGridSizeForDesiredRotation, K2Node_MakeStruct_IntPoint) == 0x00000C, "Member 'ITEM_Base_C_GetGridSizeForDesiredRotation::K2Node_MakeStruct_IntPoint' has a wrong offset!");
static_assert(offsetof(ITEM_Base_C_GetGridSizeForDesiredRotation, K2Node_MakeStruct_IntPoint_1) == 0x000014, "Member 'ITEM_Base_C_GetGridSizeForDesiredRotation::K2Node_MakeStruct_IntPoint_1' has a wrong offset!");

// Function ITEM_Base.ITEM_Base_C.HasWorldInteraction
// 0x0001 (0x0001 - 0x0000)
struct ITEM_Base_C_HasWorldInteraction final
{
public:
	bool                                          Result;                                            // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(ITEM_Base_C_HasWorldInteraction) == 0x000001, "Wrong alignment on ITEM_Base_C_HasWorldInteraction");
static_assert(sizeof(ITEM_Base_C_HasWorldInteraction) == 0x000001, "Wrong size on ITEM_Base_C_HasWorldInteraction");
static_assert(offsetof(ITEM_Base_C_HasWorldInteraction, Result) == 0x000000, "Member 'ITEM_Base_C_HasWorldInteraction::Result' has a wrong offset!");

}

