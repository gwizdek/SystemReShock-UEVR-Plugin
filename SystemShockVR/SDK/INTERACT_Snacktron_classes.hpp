#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: INTERACT_Snacktron

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "INTERACT_Focusable_Base_classes.hpp"
#include "ENUM_FailSucceedIgnore_structs.hpp"
#include "ENUM_InteractionType_structs.hpp"


namespace SDK
{

// BlueprintGeneratedClass INTERACT_Snacktron.INTERACT_Snacktron_C
// 0x0400 (0x0788 - 0x0388)
class AINTERACT_Snacktron_C final : public AINTERACT_Focusable_Base_C
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame_INTERACT_Snacktron_C;               // 0x0388(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	class USpotLightComponent*                    SpotLight;                                         // 0x0390(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UCOMP_VoxelAudio_C*                     VoiceOverAudio;                                    // 0x0398(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UCOMP_ScannableObject_C*                COMP_ScannableObject;                              // 0x03A0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UPointOfInterestComponent_C*            PointOfInterestComponent;                          // 0x03A8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USceneComponent*                        FocusNode;                                         // 0x03B0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UBoxComponent*                          KeypadTargetBox;                                   // 0x03B8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UBoxComponent*                          ProximityDetector;                                 // 0x03C0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UAudioComponent*                        PrepareSnackAudio;                                 // 0x03C8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UBoxComponent*                          SnacktronScreenCollision;                          // 0x03D0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UBoxComponent*                          SmallScreenCollision;                              // 0x03D8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UBoxComponent*                          StockScreenCollision;                              // 0x03E0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UCOMP_AttribManager_C*                  COMP_AttribManager;                                // 0x03E8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USceneComponent*                        SnackSpawnNode;                                    // 0x03F0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UBoxComponent*                          Scan_CoinSlot;                                     // 0x03F8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UBoxComponent*                          Scan_KeyClear;                                     // 0x0400(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UBoxComponent*                          Scan_Key0;                                         // 0x0408(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UBoxComponent*                          Scan_Key9;                                         // 0x0410(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UBoxComponent*                          Scan_Key8;                                         // 0x0418(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UBoxComponent*                          Scan_Key7;                                         // 0x0420(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UBoxComponent*                          Scan_Key6;                                         // 0x0428(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UBoxComponent*                          Scan_Key5;                                         // 0x0430(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UBoxComponent*                          Scan_Key4;                                         // 0x0438(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UBoxComponent*                          Scan_Key3;                                         // 0x0440(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UBoxComponent*                          Scan_Key2;                                         // 0x0448(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UBoxComponent*                          Scan_Key1;                                         // 0x0450(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UCOMP_VoxelCullable_C*                  COMP_VoxelCullable;                                // 0x0458(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UStaticMeshComponent*                   StaticMesh;                                        // 0x0460(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	bool                                          StartsBroken;                                      // 0x0468(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          IsGoldVersion;                                     // 0x0469(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          IsPoweredOn;                                       // 0x046A(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          HasBeenInitialized;                                // 0x046B(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, SaveGame, IsPlainOldData, NoDestructor)
	bool                                          SmallScreenEnabled;                                // 0x046C(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, SaveGame, IsPlainOldData, NoDestructor)
	bool                                          StockScreenEnabled;                                // 0x046D(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, SaveGame, IsPlainOldData, NoDestructor)
	bool                                          SnacktronScreenEnabled;                            // 0x046E(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, SaveGame, IsPlainOldData, NoDestructor)
	bool                                          HasAcceptedCoin;                                   // 0x046F(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, SaveGame, IsPlainOldData, NoDestructor)
	float                                         LastGreetingTimestamp;                             // 0x0470(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         GreetingCooldownDuration;                          // 0x0474(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         PrepareSnackDuration;                              // 0x0478(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         LastEnteredKey;                                    // 0x047C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         LastHighlightedKey;                                // 0x0480(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         AvailableSnackBits;                                // 0x0484(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, SaveGame, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         MinStock;                                          // 0x0488(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         MaxStock;                                          // 0x048C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UClass*                                 CoinClass;                                         // 0x0490(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TArray<class UClass*>                         StockItemClasses;                                  // 0x0498(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance)
	class UClass*                                 SpecialItemClass;                                  // 0x04A8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         SpecialItemSlot;                                   // 0x04B0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_4B4[0x4];                                      // 0x04B4(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   RequiresCreditsMessage;                            // 0x04B8(0x0018)(Edit, BlueprintVisible, DisableEditOnInstance)
	class FText                                   ClearKeycodeMessage;                               // 0x04D0(0x0018)(Edit, BlueprintVisible, DisableEditOnInstance)
	class FText                                   AcceptedCreditMessage;                             // 0x04E8(0x0018)(Edit, BlueprintVisible, DisableEditOnInstance)
	class FText                                   AlreadyPaidMessage;                                // 0x0500(0x0018)(Edit, BlueprintVisible, DisableEditOnInstance)
	class FText                                   DispensedSnackMessage;                             // 0x0518(0x0018)(Edit, BlueprintVisible, DisableEditOnInstance)
	class FText                                   InvalidCodeMessage;                                // 0x0530(0x0018)(Edit, BlueprintVisible, DisableEditOnInstance)
	TSoftObjectPtr<class USoundCue>               CoinAcceptedSoundCue;                              // 0x0548(0x0028)(Edit, BlueprintVisible, DisableEditOnInstance, HasGetValueTypeHash)
	TSoftObjectPtr<class USoundCue>               KeypadEntrySoundCue;                               // 0x0570(0x0028)(Edit, BlueprintVisible, DisableEditOnInstance, HasGetValueTypeHash)
	TSoftObjectPtr<class USoundCue>               KeypadSuccessSoundCue;                             // 0x0598(0x0028)(Edit, BlueprintVisible, DisableEditOnInstance, HasGetValueTypeHash)
	TSoftObjectPtr<class USoundCue>               KeypadFailSoundCue;                                // 0x05C0(0x0028)(Edit, BlueprintVisible, DisableEditOnInstance, HasGetValueTypeHash)
	TSoftObjectPtr<class USoundCue>               PrepareSnackLoopSoundCue;                          // 0x05E8(0x0028)(Edit, BlueprintVisible, DisableEditOnInstance, HasGetValueTypeHash)
	TSoftObjectPtr<class USoundCue>               DispenseSnackASoundCue;                            // 0x0610(0x0028)(Edit, BlueprintVisible, DisableEditOnInstance, HasGetValueTypeHash)
	class ATRIGGER_TauntVolume_C*                 SpecialItemTauntTrigger;                           // 0x0638(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FDataTableRowHandle                    SpecialItemAchievementHandle;                      // 0x0640(0x0010)(Edit, BlueprintVisible, NoDestructor)
	struct FTimerHandle                           VoiceOverTimerHandle;                              // 0x0650(0x0008)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	struct FTimerHandle                           HighlightTimerHandle;                              // 0x0658(0x0008)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	struct FTimerHandle                           PrepareSnackTimerHandle;                           // 0x0660(0x0008)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	class APICKUP_Base_C*                         PreparingSnackPickupActor;                         // 0x0668(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, SaveGame, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FText                                   BusyMessage;                                       // 0x0670(0x0018)(Edit, BlueprintVisible, DisableEditOnInstance)
	TSoftObjectPtr<class USoundCue>               DispenseSnackBSoundCue;                            // 0x0688(0x0028)(Edit, BlueprintVisible, DisableEditOnInstance, HasGetValueTypeHash)
	TSoftObjectPtr<class USoundCue>               DispenseSnackCSoundCue;                            // 0x06B0(0x0028)(Edit, BlueprintVisible, DisableEditOnInstance, HasGetValueTypeHash)
	TSoftObjectPtr<class USoundCue>               GreetingVoiceOverCue;                              // 0x06D8(0x0028)(Edit, BlueprintVisible, DisableEditOnInstance, HasGetValueTypeHash)
	TSoftObjectPtr<class USoundCue>               MakeSelectionVoiceOverCue;                         // 0x0700(0x0028)(Edit, BlueprintVisible, DisableEditOnInstance, HasGetValueTypeHash)
	TSoftObjectPtr<class USoundCue>               NoFundsVoiceOverCue;                               // 0x0728(0x0028)(Edit, BlueprintVisible, DisableEditOnInstance, HasGetValueTypeHash)
	TSoftObjectPtr<class USoundCue>               GoodbyeVoiceOverCue;                               // 0x0750(0x0028)(Edit, BlueprintVisible, DisableEditOnInstance, HasGetValueTypeHash)
	TArray<class UPrimitiveComponent*>            KeypadComponents;                                  // 0x0778(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance, ContainsInstancedReference)

public:
	void ExecuteUbergraph_INTERACT_Snacktron(int32 EntryPoint);
	void BndEvt__ProximityDetector_K2Node_ComponentBoundEvent_2_ComponentBeginOverlapSignature__DelegateSignature(class UPrimitiveComponent* OverlappedComponent, class AActor* OtherActor, class UPrimitiveComponent* OtherComp, int32 OtherBodyIndex, bool bFromSweep, const struct FHitResult& SweepResult);
	void BndEvt__COMP_AttribManager_K2Node_ComponentBoundEvent_1_OnDamageSignature__DelegateSignature(class AActor* OtherActor, const struct FAttribDamageInstance& DamageInstance, class UObject* UserParams);
	void BndEvt__COMP_VoxelCullable_K2Node_ComponentBoundEvent_0_CullableVisibilitySignature__DelegateSignature(bool bVisibleState);
	void ReceiveBeginPlay();
	void UserConstructionScript();
	void InitializeVendingMachine();
	void InitializeKeypadComponents();
	void InitializeAttributes();
	void UpdateSmallScreen(bool State);
	void UpdateStockScreen(bool State);
	void UpdateSnacktronScreen(bool State);
	void IsSnacktronFunctional(bool* Result);
	void IsSnacktronDisabled(bool* Result);
	void IsSnackInStockByIndex(int32 SnackIndex, bool* Result);
	void HasAnyAvailableSnacks(bool* Result);
	void GetStockItemClassByIndex(int32 StockIndex, class UClass** StockClass);
	void UpdateKeypad();
	void UpdateLightVisibility(bool State);
	void UpdateVendingMachineVisibility(bool VisibleState);
	void GetTargetShape(class UPrimitiveComponent* CursorPrimitive, class UShapeComponent** ShapeComponent);
	void TryInteract(class AActor* SourceActor, class UPrimitiveComponent* CursorPrimitive, ENUM_InteractionType InteractionType, struct FSTRUCT_InteractResults* InteractResults);
	void UpdateMeshEmissiveStrength(float Scale);
	void ClearKeycode(bool ClearHighlight);
	void GetKeyFromPrimitive(class UPrimitiveComponent* CursorPrimitive, int32* Key);
	void HandleKeypadClearEntry();
	void HandleKeypadNumEntry(class UPrimitiveComponent* KeyPrimitive, ENUM_FailSucceedIgnore* DispensedSnack);
	void TryFindAndAcceptCoin(class APAWN_SystemShockCharacter_C* Character, bool* Success);
	void TryAcceptCoin(class UITEM_Coin_C* CoinItem, bool* Success);
	void TryDamageScreen(const struct FAttribDamageInstance& DamageInstance, class UOBJ_ImpactData_C* ImpactData);
	void EVENT_OnHighlightFinished();
	void TryReceiveItem(class UITEM_Base_C* Item, bool* Result);
	void EVENT_OnDispenseSnack();
	void EVENT_OnPlayGreetingVoiceOver();
	void EVENT_OnPlayGoodbyeVoiceOver();
	void EVENT_OnPlaySelectionVoiceOver();
	void EVENT_OnPlayNoFundsVoiceOver();
	void GetDispenseSoundCueForPickup(class APICKUP_Base_C* PickupActor, TSoftObjectPtr<class USoundCue>* SoundCue);
	void GetFocusWorldTransform(struct FTransform* Transform);
	void CycleFocusedPrimitiveComponent(class UPrimitiveComponent* CursorPrimitive, bool Vertical, bool Previous);
	void OnFinishedFocusing();
	void TryDispenseSpecialSnack();
	void CanReceiveItem(class UITEM_Base_C* Item, bool* Result);
	void EVENT_OnDisableAttribChanged(float CurrValue, float LastValue);
	void TryToggleSpecialTrigger(class UClass* PurchasedItemClass);
	void TryPlayVoiceOverAudio(TSoftObjectPtr<class USoundCue> SoundCue, bool* Result);
	void SetInteractPowered(bool State, bool* Result);
	void CanModifyInteractPower(bool* Result);

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"INTERACT_Snacktron_C">();
	}
	static class AINTERACT_Snacktron_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<AINTERACT_Snacktron_C>();
	}
};
static_assert(alignof(AINTERACT_Snacktron_C) == 0x000008, "Wrong alignment on AINTERACT_Snacktron_C");
static_assert(sizeof(AINTERACT_Snacktron_C) == 0x000788, "Wrong size on AINTERACT_Snacktron_C");
static_assert(offsetof(AINTERACT_Snacktron_C, UberGraphFrame_INTERACT_Snacktron_C) == 0x000388, "Member 'AINTERACT_Snacktron_C::UberGraphFrame_INTERACT_Snacktron_C' has a wrong offset!");
static_assert(offsetof(AINTERACT_Snacktron_C, SpotLight) == 0x000390, "Member 'AINTERACT_Snacktron_C::SpotLight' has a wrong offset!");
static_assert(offsetof(AINTERACT_Snacktron_C, VoiceOverAudio) == 0x000398, "Member 'AINTERACT_Snacktron_C::VoiceOverAudio' has a wrong offset!");
static_assert(offsetof(AINTERACT_Snacktron_C, COMP_ScannableObject) == 0x0003A0, "Member 'AINTERACT_Snacktron_C::COMP_ScannableObject' has a wrong offset!");
static_assert(offsetof(AINTERACT_Snacktron_C, PointOfInterestComponent) == 0x0003A8, "Member 'AINTERACT_Snacktron_C::PointOfInterestComponent' has a wrong offset!");
static_assert(offsetof(AINTERACT_Snacktron_C, FocusNode) == 0x0003B0, "Member 'AINTERACT_Snacktron_C::FocusNode' has a wrong offset!");
static_assert(offsetof(AINTERACT_Snacktron_C, KeypadTargetBox) == 0x0003B8, "Member 'AINTERACT_Snacktron_C::KeypadTargetBox' has a wrong offset!");
static_assert(offsetof(AINTERACT_Snacktron_C, ProximityDetector) == 0x0003C0, "Member 'AINTERACT_Snacktron_C::ProximityDetector' has a wrong offset!");
static_assert(offsetof(AINTERACT_Snacktron_C, PrepareSnackAudio) == 0x0003C8, "Member 'AINTERACT_Snacktron_C::PrepareSnackAudio' has a wrong offset!");
static_assert(offsetof(AINTERACT_Snacktron_C, SnacktronScreenCollision) == 0x0003D0, "Member 'AINTERACT_Snacktron_C::SnacktronScreenCollision' has a wrong offset!");
static_assert(offsetof(AINTERACT_Snacktron_C, SmallScreenCollision) == 0x0003D8, "Member 'AINTERACT_Snacktron_C::SmallScreenCollision' has a wrong offset!");
static_assert(offsetof(AINTERACT_Snacktron_C, StockScreenCollision) == 0x0003E0, "Member 'AINTERACT_Snacktron_C::StockScreenCollision' has a wrong offset!");
static_assert(offsetof(AINTERACT_Snacktron_C, COMP_AttribManager) == 0x0003E8, "Member 'AINTERACT_Snacktron_C::COMP_AttribManager' has a wrong offset!");
static_assert(offsetof(AINTERACT_Snacktron_C, SnackSpawnNode) == 0x0003F0, "Member 'AINTERACT_Snacktron_C::SnackSpawnNode' has a wrong offset!");
static_assert(offsetof(AINTERACT_Snacktron_C, Scan_CoinSlot) == 0x0003F8, "Member 'AINTERACT_Snacktron_C::Scan_CoinSlot' has a wrong offset!");
static_assert(offsetof(AINTERACT_Snacktron_C, Scan_KeyClear) == 0x000400, "Member 'AINTERACT_Snacktron_C::Scan_KeyClear' has a wrong offset!");
static_assert(offsetof(AINTERACT_Snacktron_C, Scan_Key0) == 0x000408, "Member 'AINTERACT_Snacktron_C::Scan_Key0' has a wrong offset!");
static_assert(offsetof(AINTERACT_Snacktron_C, Scan_Key9) == 0x000410, "Member 'AINTERACT_Snacktron_C::Scan_Key9' has a wrong offset!");
static_assert(offsetof(AINTERACT_Snacktron_C, Scan_Key8) == 0x000418, "Member 'AINTERACT_Snacktron_C::Scan_Key8' has a wrong offset!");
static_assert(offsetof(AINTERACT_Snacktron_C, Scan_Key7) == 0x000420, "Member 'AINTERACT_Snacktron_C::Scan_Key7' has a wrong offset!");
static_assert(offsetof(AINTERACT_Snacktron_C, Scan_Key6) == 0x000428, "Member 'AINTERACT_Snacktron_C::Scan_Key6' has a wrong offset!");
static_assert(offsetof(AINTERACT_Snacktron_C, Scan_Key5) == 0x000430, "Member 'AINTERACT_Snacktron_C::Scan_Key5' has a wrong offset!");
static_assert(offsetof(AINTERACT_Snacktron_C, Scan_Key4) == 0x000438, "Member 'AINTERACT_Snacktron_C::Scan_Key4' has a wrong offset!");
static_assert(offsetof(AINTERACT_Snacktron_C, Scan_Key3) == 0x000440, "Member 'AINTERACT_Snacktron_C::Scan_Key3' has a wrong offset!");
static_assert(offsetof(AINTERACT_Snacktron_C, Scan_Key2) == 0x000448, "Member 'AINTERACT_Snacktron_C::Scan_Key2' has a wrong offset!");
static_assert(offsetof(AINTERACT_Snacktron_C, Scan_Key1) == 0x000450, "Member 'AINTERACT_Snacktron_C::Scan_Key1' has a wrong offset!");
static_assert(offsetof(AINTERACT_Snacktron_C, COMP_VoxelCullable) == 0x000458, "Member 'AINTERACT_Snacktron_C::COMP_VoxelCullable' has a wrong offset!");
static_assert(offsetof(AINTERACT_Snacktron_C, StaticMesh) == 0x000460, "Member 'AINTERACT_Snacktron_C::StaticMesh' has a wrong offset!");
static_assert(offsetof(AINTERACT_Snacktron_C, StartsBroken) == 0x000468, "Member 'AINTERACT_Snacktron_C::StartsBroken' has a wrong offset!");
static_assert(offsetof(AINTERACT_Snacktron_C, IsGoldVersion) == 0x000469, "Member 'AINTERACT_Snacktron_C::IsGoldVersion' has a wrong offset!");
static_assert(offsetof(AINTERACT_Snacktron_C, IsPoweredOn) == 0x00046A, "Member 'AINTERACT_Snacktron_C::IsPoweredOn' has a wrong offset!");
static_assert(offsetof(AINTERACT_Snacktron_C, HasBeenInitialized) == 0x00046B, "Member 'AINTERACT_Snacktron_C::HasBeenInitialized' has a wrong offset!");
static_assert(offsetof(AINTERACT_Snacktron_C, SmallScreenEnabled) == 0x00046C, "Member 'AINTERACT_Snacktron_C::SmallScreenEnabled' has a wrong offset!");
static_assert(offsetof(AINTERACT_Snacktron_C, StockScreenEnabled) == 0x00046D, "Member 'AINTERACT_Snacktron_C::StockScreenEnabled' has a wrong offset!");
static_assert(offsetof(AINTERACT_Snacktron_C, SnacktronScreenEnabled) == 0x00046E, "Member 'AINTERACT_Snacktron_C::SnacktronScreenEnabled' has a wrong offset!");
static_assert(offsetof(AINTERACT_Snacktron_C, HasAcceptedCoin) == 0x00046F, "Member 'AINTERACT_Snacktron_C::HasAcceptedCoin' has a wrong offset!");
static_assert(offsetof(AINTERACT_Snacktron_C, LastGreetingTimestamp) == 0x000470, "Member 'AINTERACT_Snacktron_C::LastGreetingTimestamp' has a wrong offset!");
static_assert(offsetof(AINTERACT_Snacktron_C, GreetingCooldownDuration) == 0x000474, "Member 'AINTERACT_Snacktron_C::GreetingCooldownDuration' has a wrong offset!");
static_assert(offsetof(AINTERACT_Snacktron_C, PrepareSnackDuration) == 0x000478, "Member 'AINTERACT_Snacktron_C::PrepareSnackDuration' has a wrong offset!");
static_assert(offsetof(AINTERACT_Snacktron_C, LastEnteredKey) == 0x00047C, "Member 'AINTERACT_Snacktron_C::LastEnteredKey' has a wrong offset!");
static_assert(offsetof(AINTERACT_Snacktron_C, LastHighlightedKey) == 0x000480, "Member 'AINTERACT_Snacktron_C::LastHighlightedKey' has a wrong offset!");
static_assert(offsetof(AINTERACT_Snacktron_C, AvailableSnackBits) == 0x000484, "Member 'AINTERACT_Snacktron_C::AvailableSnackBits' has a wrong offset!");
static_assert(offsetof(AINTERACT_Snacktron_C, MinStock) == 0x000488, "Member 'AINTERACT_Snacktron_C::MinStock' has a wrong offset!");
static_assert(offsetof(AINTERACT_Snacktron_C, MaxStock) == 0x00048C, "Member 'AINTERACT_Snacktron_C::MaxStock' has a wrong offset!");
static_assert(offsetof(AINTERACT_Snacktron_C, CoinClass) == 0x000490, "Member 'AINTERACT_Snacktron_C::CoinClass' has a wrong offset!");
static_assert(offsetof(AINTERACT_Snacktron_C, StockItemClasses) == 0x000498, "Member 'AINTERACT_Snacktron_C::StockItemClasses' has a wrong offset!");
static_assert(offsetof(AINTERACT_Snacktron_C, SpecialItemClass) == 0x0004A8, "Member 'AINTERACT_Snacktron_C::SpecialItemClass' has a wrong offset!");
static_assert(offsetof(AINTERACT_Snacktron_C, SpecialItemSlot) == 0x0004B0, "Member 'AINTERACT_Snacktron_C::SpecialItemSlot' has a wrong offset!");
static_assert(offsetof(AINTERACT_Snacktron_C, RequiresCreditsMessage) == 0x0004B8, "Member 'AINTERACT_Snacktron_C::RequiresCreditsMessage' has a wrong offset!");
static_assert(offsetof(AINTERACT_Snacktron_C, ClearKeycodeMessage) == 0x0004D0, "Member 'AINTERACT_Snacktron_C::ClearKeycodeMessage' has a wrong offset!");
static_assert(offsetof(AINTERACT_Snacktron_C, AcceptedCreditMessage) == 0x0004E8, "Member 'AINTERACT_Snacktron_C::AcceptedCreditMessage' has a wrong offset!");
static_assert(offsetof(AINTERACT_Snacktron_C, AlreadyPaidMessage) == 0x000500, "Member 'AINTERACT_Snacktron_C::AlreadyPaidMessage' has a wrong offset!");
static_assert(offsetof(AINTERACT_Snacktron_C, DispensedSnackMessage) == 0x000518, "Member 'AINTERACT_Snacktron_C::DispensedSnackMessage' has a wrong offset!");
static_assert(offsetof(AINTERACT_Snacktron_C, InvalidCodeMessage) == 0x000530, "Member 'AINTERACT_Snacktron_C::InvalidCodeMessage' has a wrong offset!");
static_assert(offsetof(AINTERACT_Snacktron_C, CoinAcceptedSoundCue) == 0x000548, "Member 'AINTERACT_Snacktron_C::CoinAcceptedSoundCue' has a wrong offset!");
static_assert(offsetof(AINTERACT_Snacktron_C, KeypadEntrySoundCue) == 0x000570, "Member 'AINTERACT_Snacktron_C::KeypadEntrySoundCue' has a wrong offset!");
static_assert(offsetof(AINTERACT_Snacktron_C, KeypadSuccessSoundCue) == 0x000598, "Member 'AINTERACT_Snacktron_C::KeypadSuccessSoundCue' has a wrong offset!");
static_assert(offsetof(AINTERACT_Snacktron_C, KeypadFailSoundCue) == 0x0005C0, "Member 'AINTERACT_Snacktron_C::KeypadFailSoundCue' has a wrong offset!");
static_assert(offsetof(AINTERACT_Snacktron_C, PrepareSnackLoopSoundCue) == 0x0005E8, "Member 'AINTERACT_Snacktron_C::PrepareSnackLoopSoundCue' has a wrong offset!");
static_assert(offsetof(AINTERACT_Snacktron_C, DispenseSnackASoundCue) == 0x000610, "Member 'AINTERACT_Snacktron_C::DispenseSnackASoundCue' has a wrong offset!");
static_assert(offsetof(AINTERACT_Snacktron_C, SpecialItemTauntTrigger) == 0x000638, "Member 'AINTERACT_Snacktron_C::SpecialItemTauntTrigger' has a wrong offset!");
static_assert(offsetof(AINTERACT_Snacktron_C, SpecialItemAchievementHandle) == 0x000640, "Member 'AINTERACT_Snacktron_C::SpecialItemAchievementHandle' has a wrong offset!");
static_assert(offsetof(AINTERACT_Snacktron_C, VoiceOverTimerHandle) == 0x000650, "Member 'AINTERACT_Snacktron_C::VoiceOverTimerHandle' has a wrong offset!");
static_assert(offsetof(AINTERACT_Snacktron_C, HighlightTimerHandle) == 0x000658, "Member 'AINTERACT_Snacktron_C::HighlightTimerHandle' has a wrong offset!");
static_assert(offsetof(AINTERACT_Snacktron_C, PrepareSnackTimerHandle) == 0x000660, "Member 'AINTERACT_Snacktron_C::PrepareSnackTimerHandle' has a wrong offset!");
static_assert(offsetof(AINTERACT_Snacktron_C, PreparingSnackPickupActor) == 0x000668, "Member 'AINTERACT_Snacktron_C::PreparingSnackPickupActor' has a wrong offset!");
static_assert(offsetof(AINTERACT_Snacktron_C, BusyMessage) == 0x000670, "Member 'AINTERACT_Snacktron_C::BusyMessage' has a wrong offset!");
static_assert(offsetof(AINTERACT_Snacktron_C, DispenseSnackBSoundCue) == 0x000688, "Member 'AINTERACT_Snacktron_C::DispenseSnackBSoundCue' has a wrong offset!");
static_assert(offsetof(AINTERACT_Snacktron_C, DispenseSnackCSoundCue) == 0x0006B0, "Member 'AINTERACT_Snacktron_C::DispenseSnackCSoundCue' has a wrong offset!");
static_assert(offsetof(AINTERACT_Snacktron_C, GreetingVoiceOverCue) == 0x0006D8, "Member 'AINTERACT_Snacktron_C::GreetingVoiceOverCue' has a wrong offset!");
static_assert(offsetof(AINTERACT_Snacktron_C, MakeSelectionVoiceOverCue) == 0x000700, "Member 'AINTERACT_Snacktron_C::MakeSelectionVoiceOverCue' has a wrong offset!");
static_assert(offsetof(AINTERACT_Snacktron_C, NoFundsVoiceOverCue) == 0x000728, "Member 'AINTERACT_Snacktron_C::NoFundsVoiceOverCue' has a wrong offset!");
static_assert(offsetof(AINTERACT_Snacktron_C, GoodbyeVoiceOverCue) == 0x000750, "Member 'AINTERACT_Snacktron_C::GoodbyeVoiceOverCue' has a wrong offset!");
static_assert(offsetof(AINTERACT_Snacktron_C, KeypadComponents) == 0x000778, "Member 'AINTERACT_Snacktron_C::KeypadComponents' has a wrong offset!");

}

