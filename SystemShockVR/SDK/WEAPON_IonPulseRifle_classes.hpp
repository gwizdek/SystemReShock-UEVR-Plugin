#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: WEAPON_IonPulseRifle

#include "Basic.hpp"

#include "ENUM_IonChargedBeamType_structs.hpp"
#include "Engine_structs.hpp"
#include "ITEM_EnergyWeapon_Base_classes.hpp"
#include "PhysicsCore_structs.hpp"


namespace SDK
{

// BlueprintGeneratedClass WEAPON_IonPulseRifle.WEAPON_IonPulseRifle_C
// 0x0258 (0x0620 - 0x03C8)
class UWEAPON_IonPulseRifle_C final : public UITEM_EnergyWeapon_Base_C
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame_WEAPON_IonPulseRifle_C;             // 0x03C8(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	bool                                          IsCharging;                                        // 0x03D0(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          IsStoppingCharge;                                  // 0x03D1(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_3D2[0x6];                                      // 0x03D2(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	TSoftObjectPtr<class UAnimMontage>            ChargeStartMontage;                                // 0x03D8(0x0028)(Edit, BlueprintVisible, DisableEditOnInstance, HasGetValueTypeHash)
	TSoftObjectPtr<class UAnimMontage>            DischargeLowMontage;                               // 0x0400(0x0028)(Edit, BlueprintVisible, DisableEditOnInstance, HasGetValueTypeHash)
	class UAnimSequenceBase*                      ChargingLoopSequence;                              // 0x0428(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FDataTableRowHandle                    BounceKillAchievementHandle;                       // 0x0430(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor)
	struct FTimerHandle                           UpdateChargeTimerHandle;                           // 0x0440(0x0008)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	float                                         ChargeStartTimestamp;                              // 0x0448(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_44C[0x4];                                      // 0x044C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UAttribMod*                             ChargeEnergyDrainMod;                              // 0x0450(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UNiagaraComponent*                      ChargeEffectsComponent;                            // 0x0458(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UAudioComponent*                        ChargeStartAudioComponent;                         // 0x0460(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UAudioComponent*                        ChargeFullAudioComponent;                          // 0x0468(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         MaxTraceDistance;                                  // 0x0470(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         MinChargeImpulseStrength;                          // 0x0474(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UAnimMontage*                           CachedChargeStartMontage;                          // 0x0478(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UAnimMontage*                           CachedDischargeLowMontage;                         // 0x0480(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TSoftObjectPtr<class USoundCue>               ChargeStartSoundCue;                               // 0x0488(0x0028)(Edit, BlueprintVisible, DisableEditOnInstance, HasGetValueTypeHash)
	TSoftObjectPtr<class USoundCue>               ChargeFullSoundCue;                                // 0x04B0(0x0028)(Edit, BlueprintVisible, DisableEditOnInstance, HasGetValueTypeHash)
	class UAnimMontage*                           CachedDischargeMedMontage;                         // 0x04D8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UAnimMontage*                           CachedDischargeHighMontage;                        // 0x04E0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class USoundCue*                              CachedChargeStartSoundCue;                         // 0x04E8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class USoundCue*                              CachedChargeFullSoundCue;                          // 0x04F0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         MaxChargeHeatIncreaseRate;                         // 0x04F8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_4FC[0x4];                                      // 0x04FC(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TSoftObjectPtr<class UAnimMontage>            DischargeMedMontage;                               // 0x0500(0x0028)(Edit, BlueprintVisible, DisableEditOnInstance, HasGetValueTypeHash)
	TSoftObjectPtr<class UAnimMontage>            DischargeHighMontage;                              // 0x0528(0x0028)(Edit, BlueprintVisible, DisableEditOnInstance, HasGetValueTypeHash)
	float                                         MaxOverchargeDamagePerSecond;                      // 0x0550(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_554[0x4];                                      // 0x0554(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TSoftObjectPtr<class UNiagaraSystem>          IonBeamFX;                                         // 0x0558(0x0028)(Edit, BlueprintVisible, DisableEditOnInstance, HasGetValueTypeHash)
	class UNiagaraSystem*                         CachedBeamFX;                                      // 0x0580(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UForceFeedbackEffect*                   CachedDischargeLowForceFeedback;                   // 0x0588(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UForceFeedbackEffect*                   CachedDischargeMidForceFeedback;                   // 0x0590(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UForceFeedbackEffect*                   CachedDischargeHighForceFeedback;                  // 0x0598(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UNiagaraComponent*                      WeaponMainFX;                                      // 0x05A0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TSoftObjectPtr<class UForceFeedbackEffect>    DischargeLowForceFeedback;                         // 0x05A8(0x0028)(Edit, BlueprintVisible, DisableEditOnInstance, HasGetValueTypeHash)
	TSoftObjectPtr<class UForceFeedbackEffect>    DischargeMidForceFeedback;                         // 0x05D0(0x0028)(Edit, BlueprintVisible, DisableEditOnInstance, HasGetValueTypeHash)
	TSoftObjectPtr<class UForceFeedbackEffect>    DischargeHighForceFeedback;                        // 0x05F8(0x0028)(Edit, BlueprintVisible, DisableEditOnInstance, HasGetValueTypeHash)

public:
	void ExecuteUbergraph_WEAPON_IonPulseRifle(int32 EntryPoint);
	void StreamWeaponAssets();
	void StreamWeaponMontages();
	void OnLoaded_FF9E235148FC867D6DEB3BA47A521CE4(class UObject* Loaded);
	void OnLoaded_C9C6266F4695E530B12EE9891AFF049B(class UObject* Loaded);
	void OnLoaded_8EF3A359490A637DA4A310A4F7D96B09(class UObject* Loaded);
	void OnLoaded_CD69C5494A86D5F07CAB9C8622D628DB(class UObject* Loaded);
	void OnLoaded_615E8328463F46FE8BB727A0EA83FCD9(class UObject* Loaded);
	void OnLoaded_7C2F215149D6D7C6CFF9009641C41CC6(class UObject* Loaded);
	void OnLoaded_0588E56D4D1DCF9CCD4DD4B5FBFF5F20(class UObject* Loaded);
	void OnLoaded_76BD371E42A51692AA80A7A93DD7B834(class UObject* Loaded);
	void OnLoaded_6366B05B452B4B0F22FFFEB05DC9C551(class UObject* Loaded);
	void OnLoaded_A152499A464E718E1950958E67FCF392(class UObject* Loaded);
	void Activate(class APAWN_SystemShockCharacter_C* Character, bool* Result);
	void Deactivate(bool* Result);
	void UpdateEnergyEventBindings(bool BindsEnabled);
	void EVENT_OnEnergyDepleted();
	void CanActivate(class APAWN_SystemShockCharacter_C* Character, bool* Result);
	void EVENT_UpdateCharge();
	void GetBeamSurfaceResponseVectors(const struct FVector& ImpactLocation, const struct FVector& BeamDirection, const struct FVector& SurfaceNormal, EPhysicalSurface SurfaceType, float BeamRadius, bool IsStrongestBeam, bool* Reflection, float* Intensity, struct FVector* Origin, TArray<struct FVector>* Directions);
	void FireChargedShot(int32 EnergyCost);
	void TraceChargedShotRecurse(const struct FVector& SourceLocation, const struct FVector& TargetLocation, const struct FVector& BeamDirection, int32 EnergyCost, float ChargeProgress, float OverchargeTime, float BeamIntensity, class APAWN_SystemShockCharacter_C* LastHitCharacter, ENUM_IonChargedBeamType BeamType);
	void TryStopChargingBeam(bool FireBeamIfCharging);
	void UpdateChargeFX(float ChargeProgress);
	void UpdateChargeForceFeedback(bool IsStarting);
	void SetChargeEnergyDrain(bool DrainEnabled);
	void HasEnoughEnergyToActivate(bool* Result);
	void GetDischargeMontage(class UAnimMontage** Montage);
	void OnBecomeUnactivatable(bool* Result);
	void OnDischargeMontageStarted();
	void EVENT_OnStopCharging();
	void StopChargeEffects(bool HasFired);
	void PlayIonBeamFX(const struct FVector& SourceLocation, const struct FVector& TargetLocation, float Intensity);
	void GetDamageValueForEnergyCost(int32 EnergyCost, float* Result);
	void GetArmorPenetrationValueForEnergyCost(int32 EnergyCost, float* Result);
	void GetUpfrontChargeEnergyCost(int32* Result);
	void OnEnergyModeChanged();
	void InitializeEnergyWeaponState();
	void SetCurrentMode(int32 Mode, bool* Result);
	void EVENT_OnHolsterFinished();
	void UpdateMainFX();
	void OnUpdateHeat();
	void GetMaintainChargeEnergyCost(int32* Result);
	void UpdateLastDamageValue(float DamageValue);

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"WEAPON_IonPulseRifle_C">();
	}
	static class UWEAPON_IonPulseRifle_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<UWEAPON_IonPulseRifle_C>();
	}
};
static_assert(alignof(UWEAPON_IonPulseRifle_C) == 0x000008, "Wrong alignment on UWEAPON_IonPulseRifle_C");
static_assert(sizeof(UWEAPON_IonPulseRifle_C) == 0x000620, "Wrong size on UWEAPON_IonPulseRifle_C");
static_assert(offsetof(UWEAPON_IonPulseRifle_C, UberGraphFrame_WEAPON_IonPulseRifle_C) == 0x0003C8, "Member 'UWEAPON_IonPulseRifle_C::UberGraphFrame_WEAPON_IonPulseRifle_C' has a wrong offset!");
static_assert(offsetof(UWEAPON_IonPulseRifle_C, IsCharging) == 0x0003D0, "Member 'UWEAPON_IonPulseRifle_C::IsCharging' has a wrong offset!");
static_assert(offsetof(UWEAPON_IonPulseRifle_C, IsStoppingCharge) == 0x0003D1, "Member 'UWEAPON_IonPulseRifle_C::IsStoppingCharge' has a wrong offset!");
static_assert(offsetof(UWEAPON_IonPulseRifle_C, ChargeStartMontage) == 0x0003D8, "Member 'UWEAPON_IonPulseRifle_C::ChargeStartMontage' has a wrong offset!");
static_assert(offsetof(UWEAPON_IonPulseRifle_C, DischargeLowMontage) == 0x000400, "Member 'UWEAPON_IonPulseRifle_C::DischargeLowMontage' has a wrong offset!");
static_assert(offsetof(UWEAPON_IonPulseRifle_C, ChargingLoopSequence) == 0x000428, "Member 'UWEAPON_IonPulseRifle_C::ChargingLoopSequence' has a wrong offset!");
static_assert(offsetof(UWEAPON_IonPulseRifle_C, BounceKillAchievementHandle) == 0x000430, "Member 'UWEAPON_IonPulseRifle_C::BounceKillAchievementHandle' has a wrong offset!");
static_assert(offsetof(UWEAPON_IonPulseRifle_C, UpdateChargeTimerHandle) == 0x000440, "Member 'UWEAPON_IonPulseRifle_C::UpdateChargeTimerHandle' has a wrong offset!");
static_assert(offsetof(UWEAPON_IonPulseRifle_C, ChargeStartTimestamp) == 0x000448, "Member 'UWEAPON_IonPulseRifle_C::ChargeStartTimestamp' has a wrong offset!");
static_assert(offsetof(UWEAPON_IonPulseRifle_C, ChargeEnergyDrainMod) == 0x000450, "Member 'UWEAPON_IonPulseRifle_C::ChargeEnergyDrainMod' has a wrong offset!");
static_assert(offsetof(UWEAPON_IonPulseRifle_C, ChargeEffectsComponent) == 0x000458, "Member 'UWEAPON_IonPulseRifle_C::ChargeEffectsComponent' has a wrong offset!");
static_assert(offsetof(UWEAPON_IonPulseRifle_C, ChargeStartAudioComponent) == 0x000460, "Member 'UWEAPON_IonPulseRifle_C::ChargeStartAudioComponent' has a wrong offset!");
static_assert(offsetof(UWEAPON_IonPulseRifle_C, ChargeFullAudioComponent) == 0x000468, "Member 'UWEAPON_IonPulseRifle_C::ChargeFullAudioComponent' has a wrong offset!");
static_assert(offsetof(UWEAPON_IonPulseRifle_C, MaxTraceDistance) == 0x000470, "Member 'UWEAPON_IonPulseRifle_C::MaxTraceDistance' has a wrong offset!");
static_assert(offsetof(UWEAPON_IonPulseRifle_C, MinChargeImpulseStrength) == 0x000474, "Member 'UWEAPON_IonPulseRifle_C::MinChargeImpulseStrength' has a wrong offset!");
static_assert(offsetof(UWEAPON_IonPulseRifle_C, CachedChargeStartMontage) == 0x000478, "Member 'UWEAPON_IonPulseRifle_C::CachedChargeStartMontage' has a wrong offset!");
static_assert(offsetof(UWEAPON_IonPulseRifle_C, CachedDischargeLowMontage) == 0x000480, "Member 'UWEAPON_IonPulseRifle_C::CachedDischargeLowMontage' has a wrong offset!");
static_assert(offsetof(UWEAPON_IonPulseRifle_C, ChargeStartSoundCue) == 0x000488, "Member 'UWEAPON_IonPulseRifle_C::ChargeStartSoundCue' has a wrong offset!");
static_assert(offsetof(UWEAPON_IonPulseRifle_C, ChargeFullSoundCue) == 0x0004B0, "Member 'UWEAPON_IonPulseRifle_C::ChargeFullSoundCue' has a wrong offset!");
static_assert(offsetof(UWEAPON_IonPulseRifle_C, CachedDischargeMedMontage) == 0x0004D8, "Member 'UWEAPON_IonPulseRifle_C::CachedDischargeMedMontage' has a wrong offset!");
static_assert(offsetof(UWEAPON_IonPulseRifle_C, CachedDischargeHighMontage) == 0x0004E0, "Member 'UWEAPON_IonPulseRifle_C::CachedDischargeHighMontage' has a wrong offset!");
static_assert(offsetof(UWEAPON_IonPulseRifle_C, CachedChargeStartSoundCue) == 0x0004E8, "Member 'UWEAPON_IonPulseRifle_C::CachedChargeStartSoundCue' has a wrong offset!");
static_assert(offsetof(UWEAPON_IonPulseRifle_C, CachedChargeFullSoundCue) == 0x0004F0, "Member 'UWEAPON_IonPulseRifle_C::CachedChargeFullSoundCue' has a wrong offset!");
static_assert(offsetof(UWEAPON_IonPulseRifle_C, MaxChargeHeatIncreaseRate) == 0x0004F8, "Member 'UWEAPON_IonPulseRifle_C::MaxChargeHeatIncreaseRate' has a wrong offset!");
static_assert(offsetof(UWEAPON_IonPulseRifle_C, DischargeMedMontage) == 0x000500, "Member 'UWEAPON_IonPulseRifle_C::DischargeMedMontage' has a wrong offset!");
static_assert(offsetof(UWEAPON_IonPulseRifle_C, DischargeHighMontage) == 0x000528, "Member 'UWEAPON_IonPulseRifle_C::DischargeHighMontage' has a wrong offset!");
static_assert(offsetof(UWEAPON_IonPulseRifle_C, MaxOverchargeDamagePerSecond) == 0x000550, "Member 'UWEAPON_IonPulseRifle_C::MaxOverchargeDamagePerSecond' has a wrong offset!");
static_assert(offsetof(UWEAPON_IonPulseRifle_C, IonBeamFX) == 0x000558, "Member 'UWEAPON_IonPulseRifle_C::IonBeamFX' has a wrong offset!");
static_assert(offsetof(UWEAPON_IonPulseRifle_C, CachedBeamFX) == 0x000580, "Member 'UWEAPON_IonPulseRifle_C::CachedBeamFX' has a wrong offset!");
static_assert(offsetof(UWEAPON_IonPulseRifle_C, CachedDischargeLowForceFeedback) == 0x000588, "Member 'UWEAPON_IonPulseRifle_C::CachedDischargeLowForceFeedback' has a wrong offset!");
static_assert(offsetof(UWEAPON_IonPulseRifle_C, CachedDischargeMidForceFeedback) == 0x000590, "Member 'UWEAPON_IonPulseRifle_C::CachedDischargeMidForceFeedback' has a wrong offset!");
static_assert(offsetof(UWEAPON_IonPulseRifle_C, CachedDischargeHighForceFeedback) == 0x000598, "Member 'UWEAPON_IonPulseRifle_C::CachedDischargeHighForceFeedback' has a wrong offset!");
static_assert(offsetof(UWEAPON_IonPulseRifle_C, WeaponMainFX) == 0x0005A0, "Member 'UWEAPON_IonPulseRifle_C::WeaponMainFX' has a wrong offset!");
static_assert(offsetof(UWEAPON_IonPulseRifle_C, DischargeLowForceFeedback) == 0x0005A8, "Member 'UWEAPON_IonPulseRifle_C::DischargeLowForceFeedback' has a wrong offset!");
static_assert(offsetof(UWEAPON_IonPulseRifle_C, DischargeMidForceFeedback) == 0x0005D0, "Member 'UWEAPON_IonPulseRifle_C::DischargeMidForceFeedback' has a wrong offset!");
static_assert(offsetof(UWEAPON_IonPulseRifle_C, DischargeHighForceFeedback) == 0x0005F8, "Member 'UWEAPON_IonPulseRifle_C::DischargeHighForceFeedback' has a wrong offset!");

}

