#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: ITEM_HardwareBase

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "ITEM_UpgradeBase_classes.hpp"


namespace SDK
{

// BlueprintGeneratedClass ITEM_HardwareBase.ITEM_HardwareBase_C
// 0x00D0 (0x0280 - 0x01B0)
class UITEM_HardwareBase_C : public UITEM_UpgradeBase_C
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x01B0(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	TSoftObjectPtr<class USkeletalMesh>           DisplayMesh;                                       // 0x01B8(0x0028)(Edit, BlueprintVisible, DisableEditOnInstance, HasGetValueTypeHash)
	class UMaterialInterface*                     DisplayMeshMaterial;                               // 0x01E0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TSoftClassPtr<class UClass>                   AnimBP;                                            // 0x01E8(0x0028)(Edit, BlueprintVisible, DisableEditOnInstance, HasGetValueTypeHash)
	class UTexture2D*                             HardwareIconTexture;                               // 0x0210(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          IsActivated;                                       // 0x0218(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, SaveGame, IsPlainOldData, NoDestructor)
	uint8                                         Pad_219[0x7];                                      // 0x0219(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	FMulticastInlineDelegateProperty_             OnHardwareStateChanged;                            // 0x0220(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)
	bool                                          DisableWhenMagnetized;                             // 0x0230(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          IsMagneticallyDisabled;                            // 0x0231(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_232[0x6];                                      // 0x0232(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	TSoftClassPtr<class UClass>                   MaxVersionHardwareClass;                           // 0x0238(0x0028)(Edit, BlueprintVisible, DisableEditOnInstance, HasGetValueTypeHash)
	struct FDataTableRowHandle                    MaxVersionAchievementHandle;                       // 0x0260(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor)
	class FString                                 DefaultToggleInputAction;                          // 0x0270(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, HasGetValueTypeHash)

public:
	void OnHardwareStateChanged__DelegateSignature(bool Activated, bool MagLocked);
	void ExecuteUbergraph_ITEM_HardwareBase(int32 EntryPoint);
	void CanActivateHardware(bool* Result);
	void GetHardwareFeatures(TArray<struct FSTRUCT_HardwareFeature>* Result);
	void IsHardwareMagneticallyDisabled(bool* Result);
	void IsMaxHardwareVersion(bool* Result);
	void ComputeJpmFromTickRate(float TickRate, int32* Result);
	void ActivateHardware(bool Active, bool* Result);
	void ToggleHardware(bool* State);
	void UpdateHardwareState(bool IsEnabled, bool* Result);
	void OnUpgradedItem(class UITEM_UpgradeBase_C* PreviousItem, bool* Result);
	void UpdateMagneticResist(int32 ValueChange);
	void BindMagneticDisableEvents();
	void EVENT_OnMagneticDisableValueChanged(float CurrValue, float LastValue);
	void TryCompleteEquipAchievement();
	void GetHardwareToggleInputActionString(class FString* Result);
	void ReplaceHardwareInputActionStringInText(const class FText& Text, class FText* Result);
	void ReceiveAnimationMessage(const class FString& Message, bool* Result);
	void GetDisplayProperties(class USkeletalMesh** SkeletalMesh, class UClass** AnimInstanceClass, class UMaterialInterface** OverrideMaterial);
	void OnAddedToInventory();
	void OnBeginPlay();
	void Activate(class APAWN_SystemShockCharacter_C* Character, bool* Result);
	void Deactivate(bool* Result);
	void GetIsActivated(bool* Result);

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"ITEM_HardwareBase_C">();
	}
	static class UITEM_HardwareBase_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<UITEM_HardwareBase_C>();
	}
};
static_assert(alignof(UITEM_HardwareBase_C) == 0x000008, "Wrong alignment on UITEM_HardwareBase_C");
static_assert(sizeof(UITEM_HardwareBase_C) == 0x000280, "Wrong size on UITEM_HardwareBase_C");
static_assert(offsetof(UITEM_HardwareBase_C, UberGraphFrame) == 0x0001B0, "Member 'UITEM_HardwareBase_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(UITEM_HardwareBase_C, DisplayMesh) == 0x0001B8, "Member 'UITEM_HardwareBase_C::DisplayMesh' has a wrong offset!");
static_assert(offsetof(UITEM_HardwareBase_C, DisplayMeshMaterial) == 0x0001E0, "Member 'UITEM_HardwareBase_C::DisplayMeshMaterial' has a wrong offset!");
static_assert(offsetof(UITEM_HardwareBase_C, AnimBP) == 0x0001E8, "Member 'UITEM_HardwareBase_C::AnimBP' has a wrong offset!");
static_assert(offsetof(UITEM_HardwareBase_C, HardwareIconTexture) == 0x000210, "Member 'UITEM_HardwareBase_C::HardwareIconTexture' has a wrong offset!");
static_assert(offsetof(UITEM_HardwareBase_C, IsActivated) == 0x000218, "Member 'UITEM_HardwareBase_C::IsActivated' has a wrong offset!");
static_assert(offsetof(UITEM_HardwareBase_C, OnHardwareStateChanged) == 0x000220, "Member 'UITEM_HardwareBase_C::OnHardwareStateChanged' has a wrong offset!");
static_assert(offsetof(UITEM_HardwareBase_C, DisableWhenMagnetized) == 0x000230, "Member 'UITEM_HardwareBase_C::DisableWhenMagnetized' has a wrong offset!");
static_assert(offsetof(UITEM_HardwareBase_C, IsMagneticallyDisabled) == 0x000231, "Member 'UITEM_HardwareBase_C::IsMagneticallyDisabled' has a wrong offset!");
static_assert(offsetof(UITEM_HardwareBase_C, MaxVersionHardwareClass) == 0x000238, "Member 'UITEM_HardwareBase_C::MaxVersionHardwareClass' has a wrong offset!");
static_assert(offsetof(UITEM_HardwareBase_C, MaxVersionAchievementHandle) == 0x000260, "Member 'UITEM_HardwareBase_C::MaxVersionAchievementHandle' has a wrong offset!");
static_assert(offsetof(UITEM_HardwareBase_C, DefaultToggleInputAction) == 0x000270, "Member 'UITEM_HardwareBase_C::DefaultToggleInputAction' has a wrong offset!");

}

