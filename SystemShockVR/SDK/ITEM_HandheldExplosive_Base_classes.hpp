#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: ITEM_HandheldExplosive_Base

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "ITEM_HandheldConsumable_Base_classes.hpp"
#include "ENUM_GameDifficulty_structs.hpp"


namespace SDK
{

// BlueprintGeneratedClass ITEM_HandheldExplosive_Base.ITEM_HandheldExplosive_Base_C
// 0x0118 (0x04E8 - 0x03D0)
class UITEM_HandheldExplosive_Base_C : public UITEM_HandheldConsumable_Base_C
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame_ITEM_HandheldExplosive_Base_C;      // 0x03D0(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	FMulticastInlineDelegateProperty_             ExplosiveCountChanged;                             // 0x03D8(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)
	TSoftObjectPtr<class UAnimMontage>            ArmExplosiveMontage;                               // 0x03E8(0x0028)(Edit, BlueprintVisible, DisableEditOnInstance, HasGetValueTypeHash)
	TSoftObjectPtr<class UAnimMontage>            ThrowHighMontage;                                  // 0x0410(0x0028)(Edit, BlueprintVisible, DisableEditOnInstance, HasGetValueTypeHash)
	TSoftObjectPtr<class UAnimMontage>            TossInterruptMontage;                              // 0x0438(0x0028)(Edit, BlueprintVisible, DisableEditOnInstance, HasGetValueTypeHash)
	class UAnimMontage*                           CachedArmExplosiveMontage;                         // 0x0460(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UAnimMontage*                           CachedThrowHighMontage;                            // 0x0468(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UAnimMontage*                           CachedTossInterruptMontage;                        // 0x0470(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         ThrowChargeDuration;                               // 0x0478(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         ArmTimestamp;                                      // 0x047C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, SaveGame, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FTimerHandle                           FuseTimerHandle;                                   // 0x0480(0x0008)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	class FString                                 ArmExplosiveMessage;                               // 0x0488(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, HasGetValueTypeHash)
	class FString                                 TossExplosiveMessage;                              // 0x0498(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, HasGetValueTypeHash)
	class FString                                 ThrowExplosiveMessage;                             // 0x04A8(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, HasGetValueTypeHash)
	TSoftObjectPtr<class UAnimComposite>          ReadyOverrideIdle;                                 // 0x04B8(0x0028)(Edit, BlueprintVisible, DisableEditOnInstance, HasGetValueTypeHash)
	class UAnimComposite*                         CachedReadyOverrideIdle;                           // 0x04E0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

public:
	void ExplosiveCountChanged__DelegateSignature(class UITEM_Base_C* ExplosiveWeapon, int32 Count_0);
	void ExecuteUbergraph_ITEM_HandheldExplosive_Base(int32 EntryPoint);
	void StreamWeaponMontages();
	void OnLoaded_96417AC94DDC661C84B1E4954ECF6B32(class UObject* Loaded);
	void OnLoaded_308BA8074E3CAD8DAF0C8BB53922EEB2(class UObject* Loaded);
	void OnLoaded_48F107AB4173F6C0C5BE7C84FBE53010(class UObject* Loaded);
	void OnLoaded_AC8957D747F4B1E491AD66B72F6EA99C(class UObject* Loaded);
	void GetArmTimestamp(float* Timestamp);
	void GetArmedExplosiveItem(class UITEM_ExplosiveBase_C** Result);
	void GetElapsedTimeSinceExplosiveArmed(float* Result);
	void IsThrowingExplosive(bool* Result);
	void IsArmingOrThrowingExplosive(bool* Result);
	void TryArmExplosive(bool* Result);
	void ThrowExplosive(float Speed);
	void EVENT_OnThrowFinished();
	void TryDisarmExplosive(bool* Success);
	void TryStartFuseTimer();
	void LaunchExplosiveFromCamera(class UCameraComponent* CameraComponent, class AExplosiveProjectile_Base_C* ExplosiveProjectile, class UITEM_ExplosiveBase_C* RemovedExplosiveItem, float Speed);
	void EVENT_OnFuseTimeExpired();
	void ReceiveAnimationMessage(const class FString& Message, bool* Result);
	void TryBecomeActivatableImmediately(bool ShowImmediately, bool* Result);
	void OnBecomeUnactivatable(bool* Result);
	void Activate(class APAWN_SystemShockCharacter_C* Character, bool* Result);
	void Deactivate(bool* Result);

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"ITEM_HandheldExplosive_Base_C">();
	}
	static class UITEM_HandheldExplosive_Base_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<UITEM_HandheldExplosive_Base_C>();
	}
};
static_assert(alignof(UITEM_HandheldExplosive_Base_C) == 0x000008, "Wrong alignment on UITEM_HandheldExplosive_Base_C");
static_assert(sizeof(UITEM_HandheldExplosive_Base_C) == 0x0004E8, "Wrong size on UITEM_HandheldExplosive_Base_C");
static_assert(offsetof(UITEM_HandheldExplosive_Base_C, UberGraphFrame_ITEM_HandheldExplosive_Base_C) == 0x0003D0, "Member 'UITEM_HandheldExplosive_Base_C::UberGraphFrame_ITEM_HandheldExplosive_Base_C' has a wrong offset!");
static_assert(offsetof(UITEM_HandheldExplosive_Base_C, ExplosiveCountChanged) == 0x0003D8, "Member 'UITEM_HandheldExplosive_Base_C::ExplosiveCountChanged' has a wrong offset!");
static_assert(offsetof(UITEM_HandheldExplosive_Base_C, ArmExplosiveMontage) == 0x0003E8, "Member 'UITEM_HandheldExplosive_Base_C::ArmExplosiveMontage' has a wrong offset!");
static_assert(offsetof(UITEM_HandheldExplosive_Base_C, ThrowHighMontage) == 0x000410, "Member 'UITEM_HandheldExplosive_Base_C::ThrowHighMontage' has a wrong offset!");
static_assert(offsetof(UITEM_HandheldExplosive_Base_C, TossInterruptMontage) == 0x000438, "Member 'UITEM_HandheldExplosive_Base_C::TossInterruptMontage' has a wrong offset!");
static_assert(offsetof(UITEM_HandheldExplosive_Base_C, CachedArmExplosiveMontage) == 0x000460, "Member 'UITEM_HandheldExplosive_Base_C::CachedArmExplosiveMontage' has a wrong offset!");
static_assert(offsetof(UITEM_HandheldExplosive_Base_C, CachedThrowHighMontage) == 0x000468, "Member 'UITEM_HandheldExplosive_Base_C::CachedThrowHighMontage' has a wrong offset!");
static_assert(offsetof(UITEM_HandheldExplosive_Base_C, CachedTossInterruptMontage) == 0x000470, "Member 'UITEM_HandheldExplosive_Base_C::CachedTossInterruptMontage' has a wrong offset!");
static_assert(offsetof(UITEM_HandheldExplosive_Base_C, ThrowChargeDuration) == 0x000478, "Member 'UITEM_HandheldExplosive_Base_C::ThrowChargeDuration' has a wrong offset!");
static_assert(offsetof(UITEM_HandheldExplosive_Base_C, ArmTimestamp) == 0x00047C, "Member 'UITEM_HandheldExplosive_Base_C::ArmTimestamp' has a wrong offset!");
static_assert(offsetof(UITEM_HandheldExplosive_Base_C, FuseTimerHandle) == 0x000480, "Member 'UITEM_HandheldExplosive_Base_C::FuseTimerHandle' has a wrong offset!");
static_assert(offsetof(UITEM_HandheldExplosive_Base_C, ArmExplosiveMessage) == 0x000488, "Member 'UITEM_HandheldExplosive_Base_C::ArmExplosiveMessage' has a wrong offset!");
static_assert(offsetof(UITEM_HandheldExplosive_Base_C, TossExplosiveMessage) == 0x000498, "Member 'UITEM_HandheldExplosive_Base_C::TossExplosiveMessage' has a wrong offset!");
static_assert(offsetof(UITEM_HandheldExplosive_Base_C, ThrowExplosiveMessage) == 0x0004A8, "Member 'UITEM_HandheldExplosive_Base_C::ThrowExplosiveMessage' has a wrong offset!");
static_assert(offsetof(UITEM_HandheldExplosive_Base_C, ReadyOverrideIdle) == 0x0004B8, "Member 'UITEM_HandheldExplosive_Base_C::ReadyOverrideIdle' has a wrong offset!");
static_assert(offsetof(UITEM_HandheldExplosive_Base_C, CachedReadyOverrideIdle) == 0x0004E0, "Member 'UITEM_HandheldExplosive_Base_C::CachedReadyOverrideIdle' has a wrong offset!");

}

