#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: ITEM_DermalPatch_Base

#include "Basic.hpp"

#include "Engine_structs.hpp"


namespace SDK::Params
{

// Function ITEM_DermalPatch_Base.ITEM_DermalPatch_Base_C.GetDefaultPatchSideEffectText
// 0x0098 (0x0098 - 0x0000)
struct ITEM_DermalPatch_Base_C_GetDefaultPatchSideEffectText final
{
public:
	class FText                                   AttributeText;                                     // 0x0000(0x0018)(BlueprintVisible, BlueprintReadOnly, Parm)
	class FText                                   Result;                                            // 0x0018(0x0018)(Parm, OutParm)
	struct FFormatArgumentData                    K2Node_MakeStruct_FormatArgumentData;              // 0x0030(0x0040)(HasGetValueTypeHash)
	TArray<struct FFormatArgumentData>            K2Node_MakeArray_Array;                            // 0x0070(0x0010)(ReferenceParm)
	class FText                                   CallFunc_Format_ReturnValue;                       // 0x0080(0x0018)()
};
static_assert(alignof(ITEM_DermalPatch_Base_C_GetDefaultPatchSideEffectText) == 0x000008, "Wrong alignment on ITEM_DermalPatch_Base_C_GetDefaultPatchSideEffectText");
static_assert(sizeof(ITEM_DermalPatch_Base_C_GetDefaultPatchSideEffectText) == 0x000098, "Wrong size on ITEM_DermalPatch_Base_C_GetDefaultPatchSideEffectText");
static_assert(offsetof(ITEM_DermalPatch_Base_C_GetDefaultPatchSideEffectText, AttributeText) == 0x000000, "Member 'ITEM_DermalPatch_Base_C_GetDefaultPatchSideEffectText::AttributeText' has a wrong offset!");
static_assert(offsetof(ITEM_DermalPatch_Base_C_GetDefaultPatchSideEffectText, Result) == 0x000018, "Member 'ITEM_DermalPatch_Base_C_GetDefaultPatchSideEffectText::Result' has a wrong offset!");
static_assert(offsetof(ITEM_DermalPatch_Base_C_GetDefaultPatchSideEffectText, K2Node_MakeStruct_FormatArgumentData) == 0x000030, "Member 'ITEM_DermalPatch_Base_C_GetDefaultPatchSideEffectText::K2Node_MakeStruct_FormatArgumentData' has a wrong offset!");
static_assert(offsetof(ITEM_DermalPatch_Base_C_GetDefaultPatchSideEffectText, K2Node_MakeArray_Array) == 0x000070, "Member 'ITEM_DermalPatch_Base_C_GetDefaultPatchSideEffectText::K2Node_MakeArray_Array' has a wrong offset!");
static_assert(offsetof(ITEM_DermalPatch_Base_C_GetDefaultPatchSideEffectText, CallFunc_Format_ReturnValue) == 0x000080, "Member 'ITEM_DermalPatch_Base_C_GetDefaultPatchSideEffectText::CallFunc_Format_ReturnValue' has a wrong offset!");

// Function ITEM_DermalPatch_Base.ITEM_DermalPatch_Base_C.GetDefaultPatchDurationText
// 0x00E0 (0x00E0 - 0x0000)
struct ITEM_DermalPatch_Base_C_GetDefaultPatchDurationText final
{
public:
	int32                                         Seconds;                                           // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   Text;                                              // 0x0008(0x0018)(Parm, OutParm)
	class FText                                   Temp_text_Variable;                                // 0x0020(0x0018)()
	class FText                                   Temp_text_Variable_1;                              // 0x0038(0x0018)()
	bool                                          Temp_bool_Variable;                                // 0x0050(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Greater_IntInt_ReturnValue;               // 0x0051(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_52[0x6];                                       // 0x0052(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	struct FFormatArgumentData                    K2Node_MakeStruct_FormatArgumentData;              // 0x0058(0x0040)(HasGetValueTypeHash)
	class FText                                   K2Node_Select_Default;                             // 0x0098(0x0018)()
	TArray<struct FFormatArgumentData>            K2Node_MakeArray_Array;                            // 0x00B0(0x0010)(ReferenceParm)
	class FText                                   CallFunc_Format_ReturnValue;                       // 0x00C0(0x0018)()
	bool                                          CallFunc_ShouldShowDetailedEffects_Result;         // 0x00D8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(ITEM_DermalPatch_Base_C_GetDefaultPatchDurationText) == 0x000008, "Wrong alignment on ITEM_DermalPatch_Base_C_GetDefaultPatchDurationText");
static_assert(sizeof(ITEM_DermalPatch_Base_C_GetDefaultPatchDurationText) == 0x0000E0, "Wrong size on ITEM_DermalPatch_Base_C_GetDefaultPatchDurationText");
static_assert(offsetof(ITEM_DermalPatch_Base_C_GetDefaultPatchDurationText, Seconds) == 0x000000, "Member 'ITEM_DermalPatch_Base_C_GetDefaultPatchDurationText::Seconds' has a wrong offset!");
static_assert(offsetof(ITEM_DermalPatch_Base_C_GetDefaultPatchDurationText, Text) == 0x000008, "Member 'ITEM_DermalPatch_Base_C_GetDefaultPatchDurationText::Text' has a wrong offset!");
static_assert(offsetof(ITEM_DermalPatch_Base_C_GetDefaultPatchDurationText, Temp_text_Variable) == 0x000020, "Member 'ITEM_DermalPatch_Base_C_GetDefaultPatchDurationText::Temp_text_Variable' has a wrong offset!");
static_assert(offsetof(ITEM_DermalPatch_Base_C_GetDefaultPatchDurationText, Temp_text_Variable_1) == 0x000038, "Member 'ITEM_DermalPatch_Base_C_GetDefaultPatchDurationText::Temp_text_Variable_1' has a wrong offset!");
static_assert(offsetof(ITEM_DermalPatch_Base_C_GetDefaultPatchDurationText, Temp_bool_Variable) == 0x000050, "Member 'ITEM_DermalPatch_Base_C_GetDefaultPatchDurationText::Temp_bool_Variable' has a wrong offset!");
static_assert(offsetof(ITEM_DermalPatch_Base_C_GetDefaultPatchDurationText, CallFunc_Greater_IntInt_ReturnValue) == 0x000051, "Member 'ITEM_DermalPatch_Base_C_GetDefaultPatchDurationText::CallFunc_Greater_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(ITEM_DermalPatch_Base_C_GetDefaultPatchDurationText, K2Node_MakeStruct_FormatArgumentData) == 0x000058, "Member 'ITEM_DermalPatch_Base_C_GetDefaultPatchDurationText::K2Node_MakeStruct_FormatArgumentData' has a wrong offset!");
static_assert(offsetof(ITEM_DermalPatch_Base_C_GetDefaultPatchDurationText, K2Node_Select_Default) == 0x000098, "Member 'ITEM_DermalPatch_Base_C_GetDefaultPatchDurationText::K2Node_Select_Default' has a wrong offset!");
static_assert(offsetof(ITEM_DermalPatch_Base_C_GetDefaultPatchDurationText, K2Node_MakeArray_Array) == 0x0000B0, "Member 'ITEM_DermalPatch_Base_C_GetDefaultPatchDurationText::K2Node_MakeArray_Array' has a wrong offset!");
static_assert(offsetof(ITEM_DermalPatch_Base_C_GetDefaultPatchDurationText, CallFunc_Format_ReturnValue) == 0x0000C0, "Member 'ITEM_DermalPatch_Base_C_GetDefaultPatchDurationText::CallFunc_Format_ReturnValue' has a wrong offset!");
static_assert(offsetof(ITEM_DermalPatch_Base_C_GetDefaultPatchDurationText, CallFunc_ShouldShowDetailedEffects_Result) == 0x0000D8, "Member 'ITEM_DermalPatch_Base_C_GetDefaultPatchDurationText::CallFunc_ShouldShowDetailedEffects_Result' has a wrong offset!");

// Function ITEM_DermalPatch_Base.ITEM_DermalPatch_Base_C.UseConsumable
// 0x0038 (0x0038 - 0x0000)
struct ITEM_DermalPatch_Base_C_UseConsumable final
{
public:
	class APAWN_SystemShockCharacter_C*           Character;                                         // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UITEM_ConsumableBase_C*                 ConsumedItem;                                      // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UGameInstance*                          CallFunc_GetGameInstance_ReturnValue;              // 0x0010(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UClass*                                 CallFunc_GetObjectClass_ReturnValue;               // 0x0018(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UGI_SinglePlayer_C*                     K2Node_DynamicCast_AsGI_Single_Player;             // 0x0020(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0028(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_TryIncrementUnorderedAchievement_Result;  // 0x0029(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_2A[0x6];                                       // 0x002A(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class UITEM_ConsumableBase_C*                 CallFunc_UseConsumable_ConsumedItem;               // 0x0030(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(ITEM_DermalPatch_Base_C_UseConsumable) == 0x000008, "Wrong alignment on ITEM_DermalPatch_Base_C_UseConsumable");
static_assert(sizeof(ITEM_DermalPatch_Base_C_UseConsumable) == 0x000038, "Wrong size on ITEM_DermalPatch_Base_C_UseConsumable");
static_assert(offsetof(ITEM_DermalPatch_Base_C_UseConsumable, Character) == 0x000000, "Member 'ITEM_DermalPatch_Base_C_UseConsumable::Character' has a wrong offset!");
static_assert(offsetof(ITEM_DermalPatch_Base_C_UseConsumable, ConsumedItem) == 0x000008, "Member 'ITEM_DermalPatch_Base_C_UseConsumable::ConsumedItem' has a wrong offset!");
static_assert(offsetof(ITEM_DermalPatch_Base_C_UseConsumable, CallFunc_GetGameInstance_ReturnValue) == 0x000010, "Member 'ITEM_DermalPatch_Base_C_UseConsumable::CallFunc_GetGameInstance_ReturnValue' has a wrong offset!");
static_assert(offsetof(ITEM_DermalPatch_Base_C_UseConsumable, CallFunc_GetObjectClass_ReturnValue) == 0x000018, "Member 'ITEM_DermalPatch_Base_C_UseConsumable::CallFunc_GetObjectClass_ReturnValue' has a wrong offset!");
static_assert(offsetof(ITEM_DermalPatch_Base_C_UseConsumable, K2Node_DynamicCast_AsGI_Single_Player) == 0x000020, "Member 'ITEM_DermalPatch_Base_C_UseConsumable::K2Node_DynamicCast_AsGI_Single_Player' has a wrong offset!");
static_assert(offsetof(ITEM_DermalPatch_Base_C_UseConsumable, K2Node_DynamicCast_bSuccess) == 0x000028, "Member 'ITEM_DermalPatch_Base_C_UseConsumable::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(ITEM_DermalPatch_Base_C_UseConsumable, CallFunc_TryIncrementUnorderedAchievement_Result) == 0x000029, "Member 'ITEM_DermalPatch_Base_C_UseConsumable::CallFunc_TryIncrementUnorderedAchievement_Result' has a wrong offset!");
static_assert(offsetof(ITEM_DermalPatch_Base_C_UseConsumable, CallFunc_UseConsumable_ConsumedItem) == 0x000030, "Member 'ITEM_DermalPatch_Base_C_UseConsumable::CallFunc_UseConsumable_ConsumedItem' has a wrong offset!");

// Function ITEM_DermalPatch_Base.ITEM_DermalPatch_Base_C.GetOwner
// 0x0010 (0x0010 - 0x0000)
struct ITEM_DermalPatch_Base_C_GetOwner final
{
public:
	class AActor*                                 Owner;                                             // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 CallFunc_GetOwnerActor_Actor;                      // 0x0008(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(ITEM_DermalPatch_Base_C_GetOwner) == 0x000008, "Wrong alignment on ITEM_DermalPatch_Base_C_GetOwner");
static_assert(sizeof(ITEM_DermalPatch_Base_C_GetOwner) == 0x000010, "Wrong size on ITEM_DermalPatch_Base_C_GetOwner");
static_assert(offsetof(ITEM_DermalPatch_Base_C_GetOwner, Owner) == 0x000000, "Member 'ITEM_DermalPatch_Base_C_GetOwner::Owner' has a wrong offset!");
static_assert(offsetof(ITEM_DermalPatch_Base_C_GetOwner, CallFunc_GetOwnerActor_Actor) == 0x000008, "Member 'ITEM_DermalPatch_Base_C_GetOwner::CallFunc_GetOwnerActor_Actor' has a wrong offset!");

// Function ITEM_DermalPatch_Base.ITEM_DermalPatch_Base_C.GetEquipState
// 0x0001 (0x0001 - 0x0000)
struct ITEM_DermalPatch_Base_C_GetEquipState final
{
public:
	bool                                          Result;                                            // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(ITEM_DermalPatch_Base_C_GetEquipState) == 0x000001, "Wrong alignment on ITEM_DermalPatch_Base_C_GetEquipState");
static_assert(sizeof(ITEM_DermalPatch_Base_C_GetEquipState) == 0x000001, "Wrong size on ITEM_DermalPatch_Base_C_GetEquipState");
static_assert(offsetof(ITEM_DermalPatch_Base_C_GetEquipState, Result) == 0x000000, "Member 'ITEM_DermalPatch_Base_C_GetEquipState::Result' has a wrong offset!");

// Function ITEM_DermalPatch_Base.ITEM_DermalPatch_Base_C.GetHotbarDisplayName
// 0x0018 (0x0018 - 0x0000)
struct ITEM_DermalPatch_Base_C_GetHotbarDisplayName final
{
public:
	class FText                                   Result;                                            // 0x0000(0x0018)(Parm, OutParm)
};
static_assert(alignof(ITEM_DermalPatch_Base_C_GetHotbarDisplayName) == 0x000008, "Wrong alignment on ITEM_DermalPatch_Base_C_GetHotbarDisplayName");
static_assert(sizeof(ITEM_DermalPatch_Base_C_GetHotbarDisplayName) == 0x000018, "Wrong size on ITEM_DermalPatch_Base_C_GetHotbarDisplayName");
static_assert(offsetof(ITEM_DermalPatch_Base_C_GetHotbarDisplayName, Result) == 0x000000, "Member 'ITEM_DermalPatch_Base_C_GetHotbarDisplayName::Result' has a wrong offset!");

// Function ITEM_DermalPatch_Base.ITEM_DermalPatch_Base_C.GetHotbarCount
// 0x0008 (0x0008 - 0x0000)
struct ITEM_DermalPatch_Base_C_GetHotbarCount final
{
public:
	int32                                         ResultCount;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_GetCount_Result;                          // 0x0004(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(ITEM_DermalPatch_Base_C_GetHotbarCount) == 0x000004, "Wrong alignment on ITEM_DermalPatch_Base_C_GetHotbarCount");
static_assert(sizeof(ITEM_DermalPatch_Base_C_GetHotbarCount) == 0x000008, "Wrong size on ITEM_DermalPatch_Base_C_GetHotbarCount");
static_assert(offsetof(ITEM_DermalPatch_Base_C_GetHotbarCount, ResultCount) == 0x000000, "Member 'ITEM_DermalPatch_Base_C_GetHotbarCount::ResultCount' has a wrong offset!");
static_assert(offsetof(ITEM_DermalPatch_Base_C_GetHotbarCount, CallFunc_GetCount_Result) == 0x000004, "Member 'ITEM_DermalPatch_Base_C_GetHotbarCount::CallFunc_GetCount_Result' has a wrong offset!");

// Function ITEM_DermalPatch_Base.ITEM_DermalPatch_Base_C.GetHotbarIcon
// 0x0028 (0x0028 - 0x0000)
struct ITEM_DermalPatch_Base_C_GetHotbarIcon final
{
public:
	class UTexture*                               ResultIcon;                                        // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UGameInstance*                          CallFunc_GetGameInstance_ReturnValue;              // 0x0008(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UGI_SinglePlayer_C*                     K2Node_DynamicCast_AsGI_Single_Player;             // 0x0010(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0018(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_19[0x7];                                       // 0x0019(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UTextureRenderTarget2D*                 CallFunc_GetItemHotbarRenderTarget_Result;         // 0x0020(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(ITEM_DermalPatch_Base_C_GetHotbarIcon) == 0x000008, "Wrong alignment on ITEM_DermalPatch_Base_C_GetHotbarIcon");
static_assert(sizeof(ITEM_DermalPatch_Base_C_GetHotbarIcon) == 0x000028, "Wrong size on ITEM_DermalPatch_Base_C_GetHotbarIcon");
static_assert(offsetof(ITEM_DermalPatch_Base_C_GetHotbarIcon, ResultIcon) == 0x000000, "Member 'ITEM_DermalPatch_Base_C_GetHotbarIcon::ResultIcon' has a wrong offset!");
static_assert(offsetof(ITEM_DermalPatch_Base_C_GetHotbarIcon, CallFunc_GetGameInstance_ReturnValue) == 0x000008, "Member 'ITEM_DermalPatch_Base_C_GetHotbarIcon::CallFunc_GetGameInstance_ReturnValue' has a wrong offset!");
static_assert(offsetof(ITEM_DermalPatch_Base_C_GetHotbarIcon, K2Node_DynamicCast_AsGI_Single_Player) == 0x000010, "Member 'ITEM_DermalPatch_Base_C_GetHotbarIcon::K2Node_DynamicCast_AsGI_Single_Player' has a wrong offset!");
static_assert(offsetof(ITEM_DermalPatch_Base_C_GetHotbarIcon, K2Node_DynamicCast_bSuccess) == 0x000018, "Member 'ITEM_DermalPatch_Base_C_GetHotbarIcon::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(ITEM_DermalPatch_Base_C_GetHotbarIcon, CallFunc_GetItemHotbarRenderTarget_Result) == 0x000020, "Member 'ITEM_DermalPatch_Base_C_GetHotbarIcon::CallFunc_GetItemHotbarRenderTarget_Result' has a wrong offset!");

// Function ITEM_DermalPatch_Base.ITEM_DermalPatch_Base_C.DeactivateHotbarSlot
// 0x0002 (0x0002 - 0x0000)
struct ITEM_DermalPatch_Base_C_DeactivateHotbarSlot final
{
public:
	bool                                          Result;                                            // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Deactivate_Result;                        // 0x0001(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(ITEM_DermalPatch_Base_C_DeactivateHotbarSlot) == 0x000001, "Wrong alignment on ITEM_DermalPatch_Base_C_DeactivateHotbarSlot");
static_assert(sizeof(ITEM_DermalPatch_Base_C_DeactivateHotbarSlot) == 0x000002, "Wrong size on ITEM_DermalPatch_Base_C_DeactivateHotbarSlot");
static_assert(offsetof(ITEM_DermalPatch_Base_C_DeactivateHotbarSlot, Result) == 0x000000, "Member 'ITEM_DermalPatch_Base_C_DeactivateHotbarSlot::Result' has a wrong offset!");
static_assert(offsetof(ITEM_DermalPatch_Base_C_DeactivateHotbarSlot, CallFunc_Deactivate_Result) == 0x000001, "Member 'ITEM_DermalPatch_Base_C_DeactivateHotbarSlot::CallFunc_Deactivate_Result' has a wrong offset!");

// Function ITEM_DermalPatch_Base.ITEM_DermalPatch_Base_C.ActivateHotbarSlot
// 0x0018 (0x0018 - 0x0000)
struct ITEM_DermalPatch_Base_C_ActivateHotbarSlot final
{
public:
	bool                                          Result;                                            // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class APAWN_SystemShockCharacter_C*           CallFunc_GetOwnerCharacter_Character;              // 0x0008(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Activate_Result;                          // 0x0010(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(ITEM_DermalPatch_Base_C_ActivateHotbarSlot) == 0x000008, "Wrong alignment on ITEM_DermalPatch_Base_C_ActivateHotbarSlot");
static_assert(sizeof(ITEM_DermalPatch_Base_C_ActivateHotbarSlot) == 0x000018, "Wrong size on ITEM_DermalPatch_Base_C_ActivateHotbarSlot");
static_assert(offsetof(ITEM_DermalPatch_Base_C_ActivateHotbarSlot, Result) == 0x000000, "Member 'ITEM_DermalPatch_Base_C_ActivateHotbarSlot::Result' has a wrong offset!");
static_assert(offsetof(ITEM_DermalPatch_Base_C_ActivateHotbarSlot, CallFunc_GetOwnerCharacter_Character) == 0x000008, "Member 'ITEM_DermalPatch_Base_C_ActivateHotbarSlot::CallFunc_GetOwnerCharacter_Character' has a wrong offset!");
static_assert(offsetof(ITEM_DermalPatch_Base_C_ActivateHotbarSlot, CallFunc_Activate_Result) == 0x000010, "Member 'ITEM_DermalPatch_Base_C_ActivateHotbarSlot::CallFunc_Activate_Result' has a wrong offset!");

// Function ITEM_DermalPatch_Base.ITEM_DermalPatch_Base_C.TryUseConsumable
// 0x0001 (0x0001 - 0x0000)
struct ITEM_DermalPatch_Base_C_TryUseConsumable final
{
public:
	bool                                          Result;                                            // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(ITEM_DermalPatch_Base_C_TryUseConsumable) == 0x000001, "Wrong alignment on ITEM_DermalPatch_Base_C_TryUseConsumable");
static_assert(sizeof(ITEM_DermalPatch_Base_C_TryUseConsumable) == 0x000001, "Wrong size on ITEM_DermalPatch_Base_C_TryUseConsumable");
static_assert(offsetof(ITEM_DermalPatch_Base_C_TryUseConsumable, Result) == 0x000000, "Member 'ITEM_DermalPatch_Base_C_TryUseConsumable::Result' has a wrong offset!");

}

