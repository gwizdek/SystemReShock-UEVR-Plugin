#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: DismembermentLimb_Base

#include "Basic.hpp"

#include "CoreUObject_structs.hpp"
#include "Engine_structs.hpp"
#include "StreamingSaveGameSystem_structs.hpp"
#include "AttributeSystem_structs.hpp"


namespace SDK::Params
{

// Function DismembermentLimb_Base.DismembermentLimb_Base_C.ExecuteUbergraph_DismembermentLimb_Base
// 0x0030 (0x0030 - 0x0000)
struct DismembermentLimb_Base_C_ExecuteUbergraph_DismembermentLimb_Base final
{
public:
	int32                                         EntryPoint;                                        // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FName                                   CallFunc_GetLimbName_Limb;                         // 0x0004(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_NotEqual_NameName_ReturnValue;            // 0x000C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          K2Node_ComponentBoundEvent_bVisibleState;          // 0x000D(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_E[0x2];                                        // 0x000E(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         K2Node_Event_DeltaSeconds;                         // 0x0010(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FName                                   K2Node_ComponentBoundEvent_DynaElementName;        // 0x0014(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_ComponentBoundEvent_OnBeginPlay;            // 0x001C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_1D[0x3];                                       // 0x001D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	TDelegate<void(class AActor* OtherActor, const struct FAttribDamageInstance& DamageInstance, class UObject* UserParams)> K2Node_CreateDelegate_OutputDelegate;              // 0x0020(0x0010)(ZeroConstructor, NoDestructor)
};
static_assert(alignof(DismembermentLimb_Base_C_ExecuteUbergraph_DismembermentLimb_Base) == 0x000004, "Wrong alignment on DismembermentLimb_Base_C_ExecuteUbergraph_DismembermentLimb_Base");
static_assert(sizeof(DismembermentLimb_Base_C_ExecuteUbergraph_DismembermentLimb_Base) == 0x000030, "Wrong size on DismembermentLimb_Base_C_ExecuteUbergraph_DismembermentLimb_Base");
static_assert(offsetof(DismembermentLimb_Base_C_ExecuteUbergraph_DismembermentLimb_Base, EntryPoint) == 0x000000, "Member 'DismembermentLimb_Base_C_ExecuteUbergraph_DismembermentLimb_Base::EntryPoint' has a wrong offset!");
static_assert(offsetof(DismembermentLimb_Base_C_ExecuteUbergraph_DismembermentLimb_Base, CallFunc_GetLimbName_Limb) == 0x000004, "Member 'DismembermentLimb_Base_C_ExecuteUbergraph_DismembermentLimb_Base::CallFunc_GetLimbName_Limb' has a wrong offset!");
static_assert(offsetof(DismembermentLimb_Base_C_ExecuteUbergraph_DismembermentLimb_Base, CallFunc_NotEqual_NameName_ReturnValue) == 0x00000C, "Member 'DismembermentLimb_Base_C_ExecuteUbergraph_DismembermentLimb_Base::CallFunc_NotEqual_NameName_ReturnValue' has a wrong offset!");
static_assert(offsetof(DismembermentLimb_Base_C_ExecuteUbergraph_DismembermentLimb_Base, K2Node_ComponentBoundEvent_bVisibleState) == 0x00000D, "Member 'DismembermentLimb_Base_C_ExecuteUbergraph_DismembermentLimb_Base::K2Node_ComponentBoundEvent_bVisibleState' has a wrong offset!");
static_assert(offsetof(DismembermentLimb_Base_C_ExecuteUbergraph_DismembermentLimb_Base, K2Node_Event_DeltaSeconds) == 0x000010, "Member 'DismembermentLimb_Base_C_ExecuteUbergraph_DismembermentLimb_Base::K2Node_Event_DeltaSeconds' has a wrong offset!");
static_assert(offsetof(DismembermentLimb_Base_C_ExecuteUbergraph_DismembermentLimb_Base, K2Node_ComponentBoundEvent_DynaElementName) == 0x000014, "Member 'DismembermentLimb_Base_C_ExecuteUbergraph_DismembermentLimb_Base::K2Node_ComponentBoundEvent_DynaElementName' has a wrong offset!");
static_assert(offsetof(DismembermentLimb_Base_C_ExecuteUbergraph_DismembermentLimb_Base, K2Node_ComponentBoundEvent_OnBeginPlay) == 0x00001C, "Member 'DismembermentLimb_Base_C_ExecuteUbergraph_DismembermentLimb_Base::K2Node_ComponentBoundEvent_OnBeginPlay' has a wrong offset!");
static_assert(offsetof(DismembermentLimb_Base_C_ExecuteUbergraph_DismembermentLimb_Base, K2Node_CreateDelegate_OutputDelegate) == 0x000020, "Member 'DismembermentLimb_Base_C_ExecuteUbergraph_DismembermentLimb_Base::K2Node_CreateDelegate_OutputDelegate' has a wrong offset!");

// Function DismembermentLimb_Base.DismembermentLimb_Base_C.BndEvt__DismembermentLimb_Base_COMP_DismembermentManager_K2Node_ComponentBoundEvent_1_OnDynaDamage__DelegateSignature
// 0x000C (0x000C - 0x0000)
struct DismembermentLimb_Base_C_BndEvt__DismembermentLimb_Base_COMP_DismembermentManager_K2Node_ComponentBoundEvent_1_OnDynaDamage__DelegateSignature final
{
public:
	class FName                                   DynaElementName;                                   // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          OnBeginPlay;                                       // 0x0008(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(DismembermentLimb_Base_C_BndEvt__DismembermentLimb_Base_COMP_DismembermentManager_K2Node_ComponentBoundEvent_1_OnDynaDamage__DelegateSignature) == 0x000004, "Wrong alignment on DismembermentLimb_Base_C_BndEvt__DismembermentLimb_Base_COMP_DismembermentManager_K2Node_ComponentBoundEvent_1_OnDynaDamage__DelegateSignature");
static_assert(sizeof(DismembermentLimb_Base_C_BndEvt__DismembermentLimb_Base_COMP_DismembermentManager_K2Node_ComponentBoundEvent_1_OnDynaDamage__DelegateSignature) == 0x00000C, "Wrong size on DismembermentLimb_Base_C_BndEvt__DismembermentLimb_Base_COMP_DismembermentManager_K2Node_ComponentBoundEvent_1_OnDynaDamage__DelegateSignature");
static_assert(offsetof(DismembermentLimb_Base_C_BndEvt__DismembermentLimb_Base_COMP_DismembermentManager_K2Node_ComponentBoundEvent_1_OnDynaDamage__DelegateSignature, DynaElementName) == 0x000000, "Member 'DismembermentLimb_Base_C_BndEvt__DismembermentLimb_Base_COMP_DismembermentManager_K2Node_ComponentBoundEvent_1_OnDynaDamage__DelegateSignature::DynaElementName' has a wrong offset!");
static_assert(offsetof(DismembermentLimb_Base_C_BndEvt__DismembermentLimb_Base_COMP_DismembermentManager_K2Node_ComponentBoundEvent_1_OnDynaDamage__DelegateSignature, OnBeginPlay) == 0x000008, "Member 'DismembermentLimb_Base_C_BndEvt__DismembermentLimb_Base_COMP_DismembermentManager_K2Node_ComponentBoundEvent_1_OnDynaDamage__DelegateSignature::OnBeginPlay' has a wrong offset!");

// Function DismembermentLimb_Base.DismembermentLimb_Base_C.ReceiveTick
// 0x0004 (0x0004 - 0x0000)
struct DismembermentLimb_Base_C_ReceiveTick final
{
public:
	float                                         DeltaSeconds;                                      // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(DismembermentLimb_Base_C_ReceiveTick) == 0x000004, "Wrong alignment on DismembermentLimb_Base_C_ReceiveTick");
static_assert(sizeof(DismembermentLimb_Base_C_ReceiveTick) == 0x000004, "Wrong size on DismembermentLimb_Base_C_ReceiveTick");
static_assert(offsetof(DismembermentLimb_Base_C_ReceiveTick, DeltaSeconds) == 0x000000, "Member 'DismembermentLimb_Base_C_ReceiveTick::DeltaSeconds' has a wrong offset!");

// Function DismembermentLimb_Base.DismembermentLimb_Base_C.BndEvt__COMP_VoxelCullable_K2Node_ComponentBoundEvent_0_CullableVisibilitySignature__DelegateSignature
// 0x0001 (0x0001 - 0x0000)
struct DismembermentLimb_Base_C_BndEvt__COMP_VoxelCullable_K2Node_ComponentBoundEvent_0_CullableVisibilitySignature__DelegateSignature final
{
public:
	bool                                          bVisibleState;                                     // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(DismembermentLimb_Base_C_BndEvt__COMP_VoxelCullable_K2Node_ComponentBoundEvent_0_CullableVisibilitySignature__DelegateSignature) == 0x000001, "Wrong alignment on DismembermentLimb_Base_C_BndEvt__COMP_VoxelCullable_K2Node_ComponentBoundEvent_0_CullableVisibilitySignature__DelegateSignature");
static_assert(sizeof(DismembermentLimb_Base_C_BndEvt__COMP_VoxelCullable_K2Node_ComponentBoundEvent_0_CullableVisibilitySignature__DelegateSignature) == 0x000001, "Wrong size on DismembermentLimb_Base_C_BndEvt__COMP_VoxelCullable_K2Node_ComponentBoundEvent_0_CullableVisibilitySignature__DelegateSignature");
static_assert(offsetof(DismembermentLimb_Base_C_BndEvt__COMP_VoxelCullable_K2Node_ComponentBoundEvent_0_CullableVisibilitySignature__DelegateSignature, bVisibleState) == 0x000000, "Member 'DismembermentLimb_Base_C_BndEvt__COMP_VoxelCullable_K2Node_ComponentBoundEvent_0_CullableVisibilitySignature__DelegateSignature::bVisibleState' has a wrong offset!");

// Function DismembermentLimb_Base.DismembermentLimb_Base_C.InitializeLimbActor
// 0x0020 (0x0020 - 0x0000)
struct DismembermentLimb_Base_C_InitializeLimbActor final
{
public:
	class USkeletalMesh*                          DisplayMesh;                                       // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class USkeletalMeshComponent*                 SourcePoseMesh;                                    // 0x0008(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UOBJ_ImpactData_C*                      ImpactData;                                        // 0x0010(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0018(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(DismembermentLimb_Base_C_InitializeLimbActor) == 0x000008, "Wrong alignment on DismembermentLimb_Base_C_InitializeLimbActor");
static_assert(sizeof(DismembermentLimb_Base_C_InitializeLimbActor) == 0x000020, "Wrong size on DismembermentLimb_Base_C_InitializeLimbActor");
static_assert(offsetof(DismembermentLimb_Base_C_InitializeLimbActor, DisplayMesh) == 0x000000, "Member 'DismembermentLimb_Base_C_InitializeLimbActor::DisplayMesh' has a wrong offset!");
static_assert(offsetof(DismembermentLimb_Base_C_InitializeLimbActor, SourcePoseMesh) == 0x000008, "Member 'DismembermentLimb_Base_C_InitializeLimbActor::SourcePoseMesh' has a wrong offset!");
static_assert(offsetof(DismembermentLimb_Base_C_InitializeLimbActor, ImpactData) == 0x000010, "Member 'DismembermentLimb_Base_C_InitializeLimbActor::ImpactData' has a wrong offset!");
static_assert(offsetof(DismembermentLimb_Base_C_InitializeLimbActor, CallFunc_IsValid_ReturnValue) == 0x000018, "Member 'DismembermentLimb_Base_C_InitializeLimbActor::CallFunc_IsValid_ReturnValue' has a wrong offset!");

// Function DismembermentLimb_Base.DismembermentLimb_Base_C.UpdateVisibility
// 0x0060 (0x0060 - 0x0000)
struct DismembermentLimb_Base_C_UpdateVisibility final
{
public:
	bool                                          VisibilityState;                                   // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class USceneComponent*>                ChildrenComponents;                                // 0x0008(0x0010)(Edit, BlueprintVisible, ContainsInstancedReference)
	int32                                         Temp_int_Array_Index_Variable;                     // 0x0018(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Loop_Counter_Variable;                    // 0x001C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue;                   // 0x0020(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_24[0x4];                                       // 0x0024(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class USceneComponent*                        CallFunc_Array_Get_Item;                           // 0x0028(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UNiagaraComponent*                      K2Node_DynamicCast_AsNiagara_Particle_System;      // 0x0030(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0038(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_39[0x3];                                       // 0x0039(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Array_Length_ReturnValue;                 // 0x003C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue;                  // 0x0040(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsTeleporting_Result;                     // 0x0041(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Not_PreBool_ReturnValue;                  // 0x0042(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Not_PreBool_ReturnValue_1;                // 0x0043(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_44[0x4];                                       // 0x0044(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class USceneComponent*>                CallFunc_GetChildrenComponents_Children;           // 0x0048(0x0010)(ReferenceParm, ContainsInstancedReference)
	bool                                          CallFunc_BooleanAND_ReturnValue;                   // 0x0058(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(DismembermentLimb_Base_C_UpdateVisibility) == 0x000008, "Wrong alignment on DismembermentLimb_Base_C_UpdateVisibility");
static_assert(sizeof(DismembermentLimb_Base_C_UpdateVisibility) == 0x000060, "Wrong size on DismembermentLimb_Base_C_UpdateVisibility");
static_assert(offsetof(DismembermentLimb_Base_C_UpdateVisibility, VisibilityState) == 0x000000, "Member 'DismembermentLimb_Base_C_UpdateVisibility::VisibilityState' has a wrong offset!");
static_assert(offsetof(DismembermentLimb_Base_C_UpdateVisibility, ChildrenComponents) == 0x000008, "Member 'DismembermentLimb_Base_C_UpdateVisibility::ChildrenComponents' has a wrong offset!");
static_assert(offsetof(DismembermentLimb_Base_C_UpdateVisibility, Temp_int_Array_Index_Variable) == 0x000018, "Member 'DismembermentLimb_Base_C_UpdateVisibility::Temp_int_Array_Index_Variable' has a wrong offset!");
static_assert(offsetof(DismembermentLimb_Base_C_UpdateVisibility, Temp_int_Loop_Counter_Variable) == 0x00001C, "Member 'DismembermentLimb_Base_C_UpdateVisibility::Temp_int_Loop_Counter_Variable' has a wrong offset!");
static_assert(offsetof(DismembermentLimb_Base_C_UpdateVisibility, CallFunc_Add_IntInt_ReturnValue) == 0x000020, "Member 'DismembermentLimb_Base_C_UpdateVisibility::CallFunc_Add_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(DismembermentLimb_Base_C_UpdateVisibility, CallFunc_Array_Get_Item) == 0x000028, "Member 'DismembermentLimb_Base_C_UpdateVisibility::CallFunc_Array_Get_Item' has a wrong offset!");
static_assert(offsetof(DismembermentLimb_Base_C_UpdateVisibility, K2Node_DynamicCast_AsNiagara_Particle_System) == 0x000030, "Member 'DismembermentLimb_Base_C_UpdateVisibility::K2Node_DynamicCast_AsNiagara_Particle_System' has a wrong offset!");
static_assert(offsetof(DismembermentLimb_Base_C_UpdateVisibility, K2Node_DynamicCast_bSuccess) == 0x000038, "Member 'DismembermentLimb_Base_C_UpdateVisibility::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(DismembermentLimb_Base_C_UpdateVisibility, CallFunc_Array_Length_ReturnValue) == 0x00003C, "Member 'DismembermentLimb_Base_C_UpdateVisibility::CallFunc_Array_Length_ReturnValue' has a wrong offset!");
static_assert(offsetof(DismembermentLimb_Base_C_UpdateVisibility, CallFunc_Less_IntInt_ReturnValue) == 0x000040, "Member 'DismembermentLimb_Base_C_UpdateVisibility::CallFunc_Less_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(DismembermentLimb_Base_C_UpdateVisibility, CallFunc_IsTeleporting_Result) == 0x000041, "Member 'DismembermentLimb_Base_C_UpdateVisibility::CallFunc_IsTeleporting_Result' has a wrong offset!");
static_assert(offsetof(DismembermentLimb_Base_C_UpdateVisibility, CallFunc_Not_PreBool_ReturnValue) == 0x000042, "Member 'DismembermentLimb_Base_C_UpdateVisibility::CallFunc_Not_PreBool_ReturnValue' has a wrong offset!");
static_assert(offsetof(DismembermentLimb_Base_C_UpdateVisibility, CallFunc_Not_PreBool_ReturnValue_1) == 0x000043, "Member 'DismembermentLimb_Base_C_UpdateVisibility::CallFunc_Not_PreBool_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(DismembermentLimb_Base_C_UpdateVisibility, CallFunc_GetChildrenComponents_Children) == 0x000048, "Member 'DismembermentLimb_Base_C_UpdateVisibility::CallFunc_GetChildrenComponents_Children' has a wrong offset!");
static_assert(offsetof(DismembermentLimb_Base_C_UpdateVisibility, CallFunc_BooleanAND_ReturnValue) == 0x000058, "Member 'DismembermentLimb_Base_C_UpdateVisibility::CallFunc_BooleanAND_ReturnValue' has a wrong offset!");

// Function DismembermentLimb_Base.DismembermentLimb_Base_C.OnDynaDamage
// 0x0030 (0x0030 - 0x0000)
struct DismembermentLimb_Base_C_OnDynaDamage final
{
public:
	class FName                                   DynaElement;                                       // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          OnBeginPlay;                                       // 0x0008(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UGroomComponent*                        Groom;                                             // 0x0010(0x0008)(Edit, BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_NameName_ReturnValue;          // 0x0018(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_19[0x7];                                       // 0x0019(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UGroomComponent*                        CallFunc_GetComponentByClass_ReturnValue;          // 0x0020(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0028(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(DismembermentLimb_Base_C_OnDynaDamage) == 0x000008, "Wrong alignment on DismembermentLimb_Base_C_OnDynaDamage");
static_assert(sizeof(DismembermentLimb_Base_C_OnDynaDamage) == 0x000030, "Wrong size on DismembermentLimb_Base_C_OnDynaDamage");
static_assert(offsetof(DismembermentLimb_Base_C_OnDynaDamage, DynaElement) == 0x000000, "Member 'DismembermentLimb_Base_C_OnDynaDamage::DynaElement' has a wrong offset!");
static_assert(offsetof(DismembermentLimb_Base_C_OnDynaDamage, OnBeginPlay) == 0x000008, "Member 'DismembermentLimb_Base_C_OnDynaDamage::OnBeginPlay' has a wrong offset!");
static_assert(offsetof(DismembermentLimb_Base_C_OnDynaDamage, Groom) == 0x000010, "Member 'DismembermentLimb_Base_C_OnDynaDamage::Groom' has a wrong offset!");
static_assert(offsetof(DismembermentLimb_Base_C_OnDynaDamage, CallFunc_EqualEqual_NameName_ReturnValue) == 0x000018, "Member 'DismembermentLimb_Base_C_OnDynaDamage::CallFunc_EqualEqual_NameName_ReturnValue' has a wrong offset!");
static_assert(offsetof(DismembermentLimb_Base_C_OnDynaDamage, CallFunc_GetComponentByClass_ReturnValue) == 0x000020, "Member 'DismembermentLimb_Base_C_OnDynaDamage::CallFunc_GetComponentByClass_ReturnValue' has a wrong offset!");
static_assert(offsetof(DismembermentLimb_Base_C_OnDynaDamage, CallFunc_IsValid_ReturnValue) == 0x000028, "Member 'DismembermentLimb_Base_C_OnDynaDamage::CallFunc_IsValid_ReturnValue' has a wrong offset!");

// Function DismembermentLimb_Base.DismembermentLimb_Base_C.UpdateMeshComponentTicks
// 0x0003 (0x0003 - 0x0000)
struct DismembermentLimb_Base_C_UpdateMeshComponentTicks final
{
public:
	bool                                          State;                                             // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsAnySimulatingPhysics_ReturnValue;       // 0x0001(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BooleanAND_ReturnValue;                   // 0x0002(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(DismembermentLimb_Base_C_UpdateMeshComponentTicks) == 0x000001, "Wrong alignment on DismembermentLimb_Base_C_UpdateMeshComponentTicks");
static_assert(sizeof(DismembermentLimb_Base_C_UpdateMeshComponentTicks) == 0x000003, "Wrong size on DismembermentLimb_Base_C_UpdateMeshComponentTicks");
static_assert(offsetof(DismembermentLimb_Base_C_UpdateMeshComponentTicks, State) == 0x000000, "Member 'DismembermentLimb_Base_C_UpdateMeshComponentTicks::State' has a wrong offset!");
static_assert(offsetof(DismembermentLimb_Base_C_UpdateMeshComponentTicks, CallFunc_IsAnySimulatingPhysics_ReturnValue) == 0x000001, "Member 'DismembermentLimb_Base_C_UpdateMeshComponentTicks::CallFunc_IsAnySimulatingPhysics_ReturnValue' has a wrong offset!");
static_assert(offsetof(DismembermentLimb_Base_C_UpdateMeshComponentTicks, CallFunc_BooleanAND_ReturnValue) == 0x000002, "Member 'DismembermentLimb_Base_C_UpdateMeshComponentTicks::CallFunc_BooleanAND_ReturnValue' has a wrong offset!");

// Function DismembermentLimb_Base.DismembermentLimb_Base_C.InitDismembermentForce
// 0x0008 (0x0008 - 0x0000)
struct DismembermentLimb_Base_C_InitDismembermentForce final
{
public:
	class UOBJ_ImpactData_C*                      ImpactData;                                        // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(DismembermentLimb_Base_C_InitDismembermentForce) == 0x000008, "Wrong alignment on DismembermentLimb_Base_C_InitDismembermentForce");
static_assert(sizeof(DismembermentLimb_Base_C_InitDismembermentForce) == 0x000008, "Wrong size on DismembermentLimb_Base_C_InitDismembermentForce");
static_assert(offsetof(DismembermentLimb_Base_C_InitDismembermentForce, ImpactData) == 0x000000, "Member 'DismembermentLimb_Base_C_InitDismembermentForce::ImpactData' has a wrong offset!");

// Function DismembermentLimb_Base.DismembermentLimb_Base_C.ApplyDismembermentForce
// 0x001C (0x001C - 0x0000)
struct DismembermentLimb_Base_C_ApplyDismembermentForce final
{
public:
	bool                                          CallFunc_IsSimulatingPhysics_ReturnValue;          // 0x0000(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_GetGameTimeSinceCreation_ReturnValue;     // 0x0004(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_FloatFloat_ReturnValue;              // 0x0008(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BooleanAND_ReturnValue;                   // 0x0009(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_A[0x2];                                        // 0x000A(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_GetMass_ReturnValue;                      // 0x000C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Multiply_VectorFloat_ReturnValue;         // 0x0010(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(DismembermentLimb_Base_C_ApplyDismembermentForce) == 0x000004, "Wrong alignment on DismembermentLimb_Base_C_ApplyDismembermentForce");
static_assert(sizeof(DismembermentLimb_Base_C_ApplyDismembermentForce) == 0x00001C, "Wrong size on DismembermentLimb_Base_C_ApplyDismembermentForce");
static_assert(offsetof(DismembermentLimb_Base_C_ApplyDismembermentForce, CallFunc_IsSimulatingPhysics_ReturnValue) == 0x000000, "Member 'DismembermentLimb_Base_C_ApplyDismembermentForce::CallFunc_IsSimulatingPhysics_ReturnValue' has a wrong offset!");
static_assert(offsetof(DismembermentLimb_Base_C_ApplyDismembermentForce, CallFunc_GetGameTimeSinceCreation_ReturnValue) == 0x000004, "Member 'DismembermentLimb_Base_C_ApplyDismembermentForce::CallFunc_GetGameTimeSinceCreation_ReturnValue' has a wrong offset!");
static_assert(offsetof(DismembermentLimb_Base_C_ApplyDismembermentForce, CallFunc_Less_FloatFloat_ReturnValue) == 0x000008, "Member 'DismembermentLimb_Base_C_ApplyDismembermentForce::CallFunc_Less_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(DismembermentLimb_Base_C_ApplyDismembermentForce, CallFunc_BooleanAND_ReturnValue) == 0x000009, "Member 'DismembermentLimb_Base_C_ApplyDismembermentForce::CallFunc_BooleanAND_ReturnValue' has a wrong offset!");
static_assert(offsetof(DismembermentLimb_Base_C_ApplyDismembermentForce, CallFunc_GetMass_ReturnValue) == 0x00000C, "Member 'DismembermentLimb_Base_C_ApplyDismembermentForce::CallFunc_GetMass_ReturnValue' has a wrong offset!");
static_assert(offsetof(DismembermentLimb_Base_C_ApplyDismembermentForce, CallFunc_Multiply_VectorFloat_ReturnValue) == 0x000010, "Member 'DismembermentLimb_Base_C_ApplyDismembermentForce::CallFunc_Multiply_VectorFloat_ReturnValue' has a wrong offset!");

// Function DismembermentLimb_Base.DismembermentLimb_Base_C.IsTeleporting
// 0x0002 (0x0002 - 0x0000)
struct DismembermentLimb_Base_C_IsTeleporting final
{
public:
	bool                                          Result;                                            // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_K2_IsTimerActiveHandle_ReturnValue;       // 0x0001(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(DismembermentLimb_Base_C_IsTeleporting) == 0x000001, "Wrong alignment on DismembermentLimb_Base_C_IsTeleporting");
static_assert(sizeof(DismembermentLimb_Base_C_IsTeleporting) == 0x000002, "Wrong size on DismembermentLimb_Base_C_IsTeleporting");
static_assert(offsetof(DismembermentLimb_Base_C_IsTeleporting, Result) == 0x000000, "Member 'DismembermentLimb_Base_C_IsTeleporting::Result' has a wrong offset!");
static_assert(offsetof(DismembermentLimb_Base_C_IsTeleporting, CallFunc_K2_IsTimerActiveHandle_ReturnValue) == 0x000001, "Member 'DismembermentLimb_Base_C_IsTeleporting::CallFunc_K2_IsTimerActiveHandle_ReturnValue' has a wrong offset!");

// Function DismembermentLimb_Base.DismembermentLimb_Base_C.CanTeleportLimb
// 0x0005 (0x0005 - 0x0000)
struct DismembermentLimb_Base_C_CanTeleportLimb final
{
public:
	bool                                          Result;                                            // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsTeleporting_Result;                     // 0x0001(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Not_PreBool_ReturnValue;                  // 0x0002(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Not_PreBool_ReturnValue_1;                // 0x0003(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BooleanAND_ReturnValue;                   // 0x0004(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(DismembermentLimb_Base_C_CanTeleportLimb) == 0x000001, "Wrong alignment on DismembermentLimb_Base_C_CanTeleportLimb");
static_assert(sizeof(DismembermentLimb_Base_C_CanTeleportLimb) == 0x000005, "Wrong size on DismembermentLimb_Base_C_CanTeleportLimb");
static_assert(offsetof(DismembermentLimb_Base_C_CanTeleportLimb, Result) == 0x000000, "Member 'DismembermentLimb_Base_C_CanTeleportLimb::Result' has a wrong offset!");
static_assert(offsetof(DismembermentLimb_Base_C_CanTeleportLimb, CallFunc_IsTeleporting_Result) == 0x000001, "Member 'DismembermentLimb_Base_C_CanTeleportLimb::CallFunc_IsTeleporting_Result' has a wrong offset!");
static_assert(offsetof(DismembermentLimb_Base_C_CanTeleportLimb, CallFunc_Not_PreBool_ReturnValue) == 0x000002, "Member 'DismembermentLimb_Base_C_CanTeleportLimb::CallFunc_Not_PreBool_ReturnValue' has a wrong offset!");
static_assert(offsetof(DismembermentLimb_Base_C_CanTeleportLimb, CallFunc_Not_PreBool_ReturnValue_1) == 0x000003, "Member 'DismembermentLimb_Base_C_CanTeleportLimb::CallFunc_Not_PreBool_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(DismembermentLimb_Base_C_CanTeleportLimb, CallFunc_BooleanAND_ReturnValue) == 0x000004, "Member 'DismembermentLimb_Base_C_CanTeleportLimb::CallFunc_BooleanAND_ReturnValue' has a wrong offset!");

// Function DismembermentLimb_Base.DismembermentLimb_Base_C.TryTeleportLimb
// 0x0160 (0x0160 - 0x0000)
struct DismembermentLimb_Base_C_TryTeleportLimb final
{
public:
	struct FVector                                Location;                                          // 0x0000(0x000C)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               Rotation;                                          // 0x000C(0x000C)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                         MaterializeDuration;                               // 0x0018(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1C[0x4];                                       // 0x001C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class USoundCue*                              SoundCue;                                          // 0x0020(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UNiagaraSystem*                         TeleportFX;                                        // 0x0028(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Result;                                            // 0x0030(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_31[0x7];                                       // 0x0031(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UNiagaraComponent*                      SpawnedTeleportFX;                                 // 0x0038(0x0008)(Edit, BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                BoundsHalfExtent;                                  // 0x0040(0x000C)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                BoundsOrigin;                                      // 0x004C(0x000C)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_GetActorBounds_Origin;                    // 0x0058(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_GetActorBounds_BoxExtent;                 // 0x0064(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UNiagaraComponent*                      CallFunc_SpawnSystemAttached_ReturnValue;          // 0x0070(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_78[0x8];                                       // 0x0078(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTransform                             CallFunc_MakeTransform_ReturnValue;                // 0x0080(0x0030)(IsPlainOldData, NoDestructor)
	struct FHitResult                             CallFunc_K2_SetWorldTransform_SweepHitResult;      // 0x00B0(0x0088)(IsPlainOldData, NoDestructor, ContainsInstancedReference)
	struct FVector                                CallFunc_K2_GetComponentLocation_ReturnValue;      // 0x0138(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_CanTeleportLimb_Result;                   // 0x0144(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_145[0x3];                                      // 0x0145(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	TDelegate<void()>                             K2Node_CreateDelegate_OutputDelegate;              // 0x0148(0x0010)(ZeroConstructor, NoDestructor)
	struct FTimerHandle                           CallFunc_K2_SetTimerDelegate_ReturnValue;          // 0x0158(0x0008)(NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(DismembermentLimb_Base_C_TryTeleportLimb) == 0x000010, "Wrong alignment on DismembermentLimb_Base_C_TryTeleportLimb");
static_assert(sizeof(DismembermentLimb_Base_C_TryTeleportLimb) == 0x000160, "Wrong size on DismembermentLimb_Base_C_TryTeleportLimb");
static_assert(offsetof(DismembermentLimb_Base_C_TryTeleportLimb, Location) == 0x000000, "Member 'DismembermentLimb_Base_C_TryTeleportLimb::Location' has a wrong offset!");
static_assert(offsetof(DismembermentLimb_Base_C_TryTeleportLimb, Rotation) == 0x00000C, "Member 'DismembermentLimb_Base_C_TryTeleportLimb::Rotation' has a wrong offset!");
static_assert(offsetof(DismembermentLimb_Base_C_TryTeleportLimb, MaterializeDuration) == 0x000018, "Member 'DismembermentLimb_Base_C_TryTeleportLimb::MaterializeDuration' has a wrong offset!");
static_assert(offsetof(DismembermentLimb_Base_C_TryTeleportLimb, SoundCue) == 0x000020, "Member 'DismembermentLimb_Base_C_TryTeleportLimb::SoundCue' has a wrong offset!");
static_assert(offsetof(DismembermentLimb_Base_C_TryTeleportLimb, TeleportFX) == 0x000028, "Member 'DismembermentLimb_Base_C_TryTeleportLimb::TeleportFX' has a wrong offset!");
static_assert(offsetof(DismembermentLimb_Base_C_TryTeleportLimb, Result) == 0x000030, "Member 'DismembermentLimb_Base_C_TryTeleportLimb::Result' has a wrong offset!");
static_assert(offsetof(DismembermentLimb_Base_C_TryTeleportLimb, SpawnedTeleportFX) == 0x000038, "Member 'DismembermentLimb_Base_C_TryTeleportLimb::SpawnedTeleportFX' has a wrong offset!");
static_assert(offsetof(DismembermentLimb_Base_C_TryTeleportLimb, BoundsHalfExtent) == 0x000040, "Member 'DismembermentLimb_Base_C_TryTeleportLimb::BoundsHalfExtent' has a wrong offset!");
static_assert(offsetof(DismembermentLimb_Base_C_TryTeleportLimb, BoundsOrigin) == 0x00004C, "Member 'DismembermentLimb_Base_C_TryTeleportLimb::BoundsOrigin' has a wrong offset!");
static_assert(offsetof(DismembermentLimb_Base_C_TryTeleportLimb, CallFunc_GetActorBounds_Origin) == 0x000058, "Member 'DismembermentLimb_Base_C_TryTeleportLimb::CallFunc_GetActorBounds_Origin' has a wrong offset!");
static_assert(offsetof(DismembermentLimb_Base_C_TryTeleportLimb, CallFunc_GetActorBounds_BoxExtent) == 0x000064, "Member 'DismembermentLimb_Base_C_TryTeleportLimb::CallFunc_GetActorBounds_BoxExtent' has a wrong offset!");
static_assert(offsetof(DismembermentLimb_Base_C_TryTeleportLimb, CallFunc_SpawnSystemAttached_ReturnValue) == 0x000070, "Member 'DismembermentLimb_Base_C_TryTeleportLimb::CallFunc_SpawnSystemAttached_ReturnValue' has a wrong offset!");
static_assert(offsetof(DismembermentLimb_Base_C_TryTeleportLimb, CallFunc_MakeTransform_ReturnValue) == 0x000080, "Member 'DismembermentLimb_Base_C_TryTeleportLimb::CallFunc_MakeTransform_ReturnValue' has a wrong offset!");
static_assert(offsetof(DismembermentLimb_Base_C_TryTeleportLimb, CallFunc_K2_SetWorldTransform_SweepHitResult) == 0x0000B0, "Member 'DismembermentLimb_Base_C_TryTeleportLimb::CallFunc_K2_SetWorldTransform_SweepHitResult' has a wrong offset!");
static_assert(offsetof(DismembermentLimb_Base_C_TryTeleportLimb, CallFunc_K2_GetComponentLocation_ReturnValue) == 0x000138, "Member 'DismembermentLimb_Base_C_TryTeleportLimb::CallFunc_K2_GetComponentLocation_ReturnValue' has a wrong offset!");
static_assert(offsetof(DismembermentLimb_Base_C_TryTeleportLimb, CallFunc_CanTeleportLimb_Result) == 0x000144, "Member 'DismembermentLimb_Base_C_TryTeleportLimb::CallFunc_CanTeleportLimb_Result' has a wrong offset!");
static_assert(offsetof(DismembermentLimb_Base_C_TryTeleportLimb, K2Node_CreateDelegate_OutputDelegate) == 0x000148, "Member 'DismembermentLimb_Base_C_TryTeleportLimb::K2Node_CreateDelegate_OutputDelegate' has a wrong offset!");
static_assert(offsetof(DismembermentLimb_Base_C_TryTeleportLimb, CallFunc_K2_SetTimerDelegate_ReturnValue) == 0x000158, "Member 'DismembermentLimb_Base_C_TryTeleportLimb::CallFunc_K2_SetTimerDelegate_ReturnValue' has a wrong offset!");

// Function DismembermentLimb_Base.DismembermentLimb_Base_C.EVENT_OnDamageReceived
// 0x0058 (0x0058 - 0x0000)
struct DismembermentLimb_Base_C_EVENT_OnDamageReceived final
{
public:
	class AActor*                                 OtherActor;                                        // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FAttribDamageInstance                  DamageInstance;                                    // 0x0008(0x0028)(BlueprintVisible, BlueprintReadOnly, Parm)
	class UObject*                                UserParams;                                        // 0x0030(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          HasImpulse;                                        // 0x0038(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_39[0x7];                                       // 0x0039(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UOBJ_ImpactData_C*                      ImpactData;                                        // 0x0040(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UOBJ_ImpactData_C*                      K2Node_DynamicCast_AsOBJ_Impact_Data;              // 0x0048(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0050(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Vector_IsZero_ReturnValue;                // 0x0051(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Not_PreBool_ReturnValue;                  // 0x0052(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_ReceiveDamage_LegDismembered;             // 0x0053(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_ReceiveDamage_LimbDismembered;            // 0x0054(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_ShouldDestroyLimbActor_Result;            // 0x0055(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(DismembermentLimb_Base_C_EVENT_OnDamageReceived) == 0x000008, "Wrong alignment on DismembermentLimb_Base_C_EVENT_OnDamageReceived");
static_assert(sizeof(DismembermentLimb_Base_C_EVENT_OnDamageReceived) == 0x000058, "Wrong size on DismembermentLimb_Base_C_EVENT_OnDamageReceived");
static_assert(offsetof(DismembermentLimb_Base_C_EVENT_OnDamageReceived, OtherActor) == 0x000000, "Member 'DismembermentLimb_Base_C_EVENT_OnDamageReceived::OtherActor' has a wrong offset!");
static_assert(offsetof(DismembermentLimb_Base_C_EVENT_OnDamageReceived, DamageInstance) == 0x000008, "Member 'DismembermentLimb_Base_C_EVENT_OnDamageReceived::DamageInstance' has a wrong offset!");
static_assert(offsetof(DismembermentLimb_Base_C_EVENT_OnDamageReceived, UserParams) == 0x000030, "Member 'DismembermentLimb_Base_C_EVENT_OnDamageReceived::UserParams' has a wrong offset!");
static_assert(offsetof(DismembermentLimb_Base_C_EVENT_OnDamageReceived, HasImpulse) == 0x000038, "Member 'DismembermentLimb_Base_C_EVENT_OnDamageReceived::HasImpulse' has a wrong offset!");
static_assert(offsetof(DismembermentLimb_Base_C_EVENT_OnDamageReceived, ImpactData) == 0x000040, "Member 'DismembermentLimb_Base_C_EVENT_OnDamageReceived::ImpactData' has a wrong offset!");
static_assert(offsetof(DismembermentLimb_Base_C_EVENT_OnDamageReceived, K2Node_DynamicCast_AsOBJ_Impact_Data) == 0x000048, "Member 'DismembermentLimb_Base_C_EVENT_OnDamageReceived::K2Node_DynamicCast_AsOBJ_Impact_Data' has a wrong offset!");
static_assert(offsetof(DismembermentLimb_Base_C_EVENT_OnDamageReceived, K2Node_DynamicCast_bSuccess) == 0x000050, "Member 'DismembermentLimb_Base_C_EVENT_OnDamageReceived::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(DismembermentLimb_Base_C_EVENT_OnDamageReceived, CallFunc_Vector_IsZero_ReturnValue) == 0x000051, "Member 'DismembermentLimb_Base_C_EVENT_OnDamageReceived::CallFunc_Vector_IsZero_ReturnValue' has a wrong offset!");
static_assert(offsetof(DismembermentLimb_Base_C_EVENT_OnDamageReceived, CallFunc_Not_PreBool_ReturnValue) == 0x000052, "Member 'DismembermentLimb_Base_C_EVENT_OnDamageReceived::CallFunc_Not_PreBool_ReturnValue' has a wrong offset!");
static_assert(offsetof(DismembermentLimb_Base_C_EVENT_OnDamageReceived, CallFunc_ReceiveDamage_LegDismembered) == 0x000053, "Member 'DismembermentLimb_Base_C_EVENT_OnDamageReceived::CallFunc_ReceiveDamage_LegDismembered' has a wrong offset!");
static_assert(offsetof(DismembermentLimb_Base_C_EVENT_OnDamageReceived, CallFunc_ReceiveDamage_LimbDismembered) == 0x000054, "Member 'DismembermentLimb_Base_C_EVENT_OnDamageReceived::CallFunc_ReceiveDamage_LimbDismembered' has a wrong offset!");
static_assert(offsetof(DismembermentLimb_Base_C_EVENT_OnDamageReceived, CallFunc_ShouldDestroyLimbActor_Result) == 0x000055, "Member 'DismembermentLimb_Base_C_EVENT_OnDamageReceived::CallFunc_ShouldDestroyLimbActor_Result' has a wrong offset!");

// Function DismembermentLimb_Base.DismembermentLimb_Base_C.EVENT_OnTryStopPhysics
// 0x0002 (0x0002 - 0x0000)
struct DismembermentLimb_Base_C_EVENT_OnTryStopPhysics final
{
public:
	bool                                          CallFunc_IsAnyRigidBodyAwake_ReturnValue;          // 0x0000(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Not_PreBool_ReturnValue;                  // 0x0001(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(DismembermentLimb_Base_C_EVENT_OnTryStopPhysics) == 0x000001, "Wrong alignment on DismembermentLimb_Base_C_EVENT_OnTryStopPhysics");
static_assert(sizeof(DismembermentLimb_Base_C_EVENT_OnTryStopPhysics) == 0x000002, "Wrong size on DismembermentLimb_Base_C_EVENT_OnTryStopPhysics");
static_assert(offsetof(DismembermentLimb_Base_C_EVENT_OnTryStopPhysics, CallFunc_IsAnyRigidBodyAwake_ReturnValue) == 0x000000, "Member 'DismembermentLimb_Base_C_EVENT_OnTryStopPhysics::CallFunc_IsAnyRigidBodyAwake_ReturnValue' has a wrong offset!");
static_assert(offsetof(DismembermentLimb_Base_C_EVENT_OnTryStopPhysics, CallFunc_Not_PreBool_ReturnValue) == 0x000001, "Member 'DismembermentLimb_Base_C_EVENT_OnTryStopPhysics::CallFunc_Not_PreBool_ReturnValue' has a wrong offset!");

// Function DismembermentLimb_Base.DismembermentLimb_Base_C.TryStartPhysicsSleepTimer
// 0x0028 (0x0028 - 0x0000)
struct DismembermentLimb_Base_C_TryStartPhysicsSleepTimer final
{
public:
	TDelegate<void()>                             K2Node_CreateDelegate_OutputDelegate;              // 0x0000(0x0010)(ZeroConstructor, NoDestructor)
	bool                                          CallFunc_K2_IsTimerActiveHandle_ReturnValue;       // 0x0010(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTimerHandle                           CallFunc_K2_SetTimerDelegate_ReturnValue;          // 0x0018(0x0008)(NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Not_PreBool_ReturnValue;                  // 0x0020(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(DismembermentLimb_Base_C_TryStartPhysicsSleepTimer) == 0x000008, "Wrong alignment on DismembermentLimb_Base_C_TryStartPhysicsSleepTimer");
static_assert(sizeof(DismembermentLimb_Base_C_TryStartPhysicsSleepTimer) == 0x000028, "Wrong size on DismembermentLimb_Base_C_TryStartPhysicsSleepTimer");
static_assert(offsetof(DismembermentLimb_Base_C_TryStartPhysicsSleepTimer, K2Node_CreateDelegate_OutputDelegate) == 0x000000, "Member 'DismembermentLimb_Base_C_TryStartPhysicsSleepTimer::K2Node_CreateDelegate_OutputDelegate' has a wrong offset!");
static_assert(offsetof(DismembermentLimb_Base_C_TryStartPhysicsSleepTimer, CallFunc_K2_IsTimerActiveHandle_ReturnValue) == 0x000010, "Member 'DismembermentLimb_Base_C_TryStartPhysicsSleepTimer::CallFunc_K2_IsTimerActiveHandle_ReturnValue' has a wrong offset!");
static_assert(offsetof(DismembermentLimb_Base_C_TryStartPhysicsSleepTimer, CallFunc_K2_SetTimerDelegate_ReturnValue) == 0x000018, "Member 'DismembermentLimb_Base_C_TryStartPhysicsSleepTimer::CallFunc_K2_SetTimerDelegate_ReturnValue' has a wrong offset!");
static_assert(offsetof(DismembermentLimb_Base_C_TryStartPhysicsSleepTimer, CallFunc_Not_PreBool_ReturnValue) == 0x000020, "Member 'DismembermentLimb_Base_C_TryStartPhysicsSleepTimer::CallFunc_Not_PreBool_ReturnValue' has a wrong offset!");

// Function DismembermentLimb_Base.DismembermentLimb_Base_C.TryEnablePhysics
// 0x0002 (0x0002 - 0x0000)
struct DismembermentLimb_Base_C_TryEnablePhysics final
{
public:
	bool                                          CallFunc_IsAnySimulatingPhysics_ReturnValue;       // 0x0000(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Not_PreBool_ReturnValue;                  // 0x0001(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(DismembermentLimb_Base_C_TryEnablePhysics) == 0x000001, "Wrong alignment on DismembermentLimb_Base_C_TryEnablePhysics");
static_assert(sizeof(DismembermentLimb_Base_C_TryEnablePhysics) == 0x000002, "Wrong size on DismembermentLimb_Base_C_TryEnablePhysics");
static_assert(offsetof(DismembermentLimb_Base_C_TryEnablePhysics, CallFunc_IsAnySimulatingPhysics_ReturnValue) == 0x000000, "Member 'DismembermentLimb_Base_C_TryEnablePhysics::CallFunc_IsAnySimulatingPhysics_ReturnValue' has a wrong offset!");
static_assert(offsetof(DismembermentLimb_Base_C_TryEnablePhysics, CallFunc_Not_PreBool_ReturnValue) == 0x000001, "Member 'DismembermentLimb_Base_C_TryEnablePhysics::CallFunc_Not_PreBool_ReturnValue' has a wrong offset!");

// Function DismembermentLimb_Base.DismembermentLimb_Base_C.ShouldSaveActor
// 0x0038 (0x0038 - 0x0000)
struct DismembermentLimb_Base_C_ShouldSaveActor final
{
public:
	struct FStreamingSaveGameActorParams          Params_0;                                          // 0x0000(0x0018)(Parm, OutParm)
	bool                                          ReturnValue;                                       // 0x0018(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor)
	uint8                                         Pad_19[0x7];                                       // 0x0019(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FStreamingSaveGameActorParams          K2Node_MakeStruct_StreamingSaveGameActorParams;    // 0x0020(0x0018)()
};
static_assert(alignof(DismembermentLimb_Base_C_ShouldSaveActor) == 0x000008, "Wrong alignment on DismembermentLimb_Base_C_ShouldSaveActor");
static_assert(sizeof(DismembermentLimb_Base_C_ShouldSaveActor) == 0x000038, "Wrong size on DismembermentLimb_Base_C_ShouldSaveActor");
static_assert(offsetof(DismembermentLimb_Base_C_ShouldSaveActor, Params_0) == 0x000000, "Member 'DismembermentLimb_Base_C_ShouldSaveActor::Params_0' has a wrong offset!");
static_assert(offsetof(DismembermentLimb_Base_C_ShouldSaveActor, ReturnValue) == 0x000018, "Member 'DismembermentLimb_Base_C_ShouldSaveActor::ReturnValue' has a wrong offset!");
static_assert(offsetof(DismembermentLimb_Base_C_ShouldSaveActor, K2Node_MakeStruct_StreamingSaveGameActorParams) == 0x000020, "Member 'DismembermentLimb_Base_C_ShouldSaveActor::K2Node_MakeStruct_StreamingSaveGameActorParams' has a wrong offset!");

// Function DismembermentLimb_Base.DismembermentLimb_Base_C.ReceivePendingBodyTransforms
// 0x0020 (0x0020 - 0x0000)
struct DismembermentLimb_Base_C_ReceivePendingBodyTransforms final
{
public:
	class USkeletalMeshComponent*                 SkeletalMeshComponent;                             // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TArray<struct FTransform>                     BodyTransforms;                                    // 0x0008(0x0010)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
	bool                                          ReturnValue;                                       // 0x0018(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor)
};
static_assert(alignof(DismembermentLimb_Base_C_ReceivePendingBodyTransforms) == 0x000008, "Wrong alignment on DismembermentLimb_Base_C_ReceivePendingBodyTransforms");
static_assert(sizeof(DismembermentLimb_Base_C_ReceivePendingBodyTransforms) == 0x000020, "Wrong size on DismembermentLimb_Base_C_ReceivePendingBodyTransforms");
static_assert(offsetof(DismembermentLimb_Base_C_ReceivePendingBodyTransforms, SkeletalMeshComponent) == 0x000000, "Member 'DismembermentLimb_Base_C_ReceivePendingBodyTransforms::SkeletalMeshComponent' has a wrong offset!");
static_assert(offsetof(DismembermentLimb_Base_C_ReceivePendingBodyTransforms, BodyTransforms) == 0x000008, "Member 'DismembermentLimb_Base_C_ReceivePendingBodyTransforms::BodyTransforms' has a wrong offset!");
static_assert(offsetof(DismembermentLimb_Base_C_ReceivePendingBodyTransforms, ReturnValue) == 0x000018, "Member 'DismembermentLimb_Base_C_ReceivePendingBodyTransforms::ReturnValue' has a wrong offset!");

// Function DismembermentLimb_Base.DismembermentLimb_Base_C.ReceivePendingCharacterVelocity
// 0x0010 (0x0010 - 0x0000)
struct DismembermentLimb_Base_C_ReceivePendingCharacterVelocity final
{
public:
	struct FVector                                Velocity;                                          // 0x0000(0x000C)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          ReturnValue;                                       // 0x000C(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor)
};
static_assert(alignof(DismembermentLimb_Base_C_ReceivePendingCharacterVelocity) == 0x000004, "Wrong alignment on DismembermentLimb_Base_C_ReceivePendingCharacterVelocity");
static_assert(sizeof(DismembermentLimb_Base_C_ReceivePendingCharacterVelocity) == 0x000010, "Wrong size on DismembermentLimb_Base_C_ReceivePendingCharacterVelocity");
static_assert(offsetof(DismembermentLimb_Base_C_ReceivePendingCharacterVelocity, Velocity) == 0x000000, "Member 'DismembermentLimb_Base_C_ReceivePendingCharacterVelocity::Velocity' has a wrong offset!");
static_assert(offsetof(DismembermentLimb_Base_C_ReceivePendingCharacterVelocity, ReturnValue) == 0x00000C, "Member 'DismembermentLimb_Base_C_ReceivePendingCharacterVelocity::ReturnValue' has a wrong offset!");

}

