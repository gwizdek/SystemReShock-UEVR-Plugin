#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: ANIMBP_SecBot

#include "Basic.hpp"

#include "AnimGraphRuntime_structs.hpp"
#include "Engine_structs.hpp"
#include "Engine_classes.hpp"
#include "CoreUObject_structs.hpp"
#include "ENUM_DeathBlowType_structs.hpp"
#include "ENUM_Emotions_structs.hpp"


namespace SDK
{

// AnimBlueprintGeneratedClass ANIMBP_SecBot.ANIMBP_SecBot_C
// 0x07A0 (0x0A60 - 0x02C0)
class UANIMBP_SecBot_C final : public UAnimInstance
{
public:
	uint8                                         Pad_2B8[0x8];                                      // 0x02B8(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x02C0(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	struct FAnimNode_Root                         AnimGraphNode_Root;                                // 0x02C8(0x0030)()
	struct FAnimNode_Slot                         AnimGraphNode_Slot_1;                              // 0x02F8(0x0048)()
	struct FAnimNode_BlendListByBool              AnimGraphNode_BlendListByBool_2;                   // 0x0340(0x00A0)()
	struct FAnimNode_PoseSnapshot                 AnimGraphNode_PoseSnapshot;                        // 0x03E0(0x0090)()
	struct FAnimNode_Slot                         AnimGraphNode_Slot;                                // 0x0470(0x0048)()
	struct FAnimNode_ModifyBone                   AnimGraphNode_ModifyBone;                          // 0x04B8(0x0108)()
	struct FAnimNode_ConvertLocalToComponentSpace AnimGraphNode_LocalToComponentSpace;               // 0x05C0(0x0020)()
	struct FAnimNode_ConvertComponentToLocalSpace AnimGraphNode_ComponentToLocalSpace;               // 0x05E0(0x0020)()
	struct FAnimNode_BlendSpacePlayer             AnimGraphNode_BlendSpacePlayer;                    // 0x0600(0x00E8)()
	struct FAnimNode_ApplyAdditive                AnimGraphNode_ApplyAdditive;                       // 0x06E8(0x00C8)()
	struct FAnimNode_RefPose                      AnimGraphNode_LocalRefPose;                        // 0x07B0(0x0018)()
	struct FAnimNode_BlendListByBool              AnimGraphNode_BlendListByBool_1;                   // 0x07C8(0x00A0)()
	struct FAnimNode_SequencePlayer               AnimGraphNode_SequencePlayer_1;                    // 0x0868(0x0080)()
	struct FAnimNode_BlendListByBool              AnimGraphNode_BlendListByBool;                     // 0x08E8(0x00A0)()
	struct FAnimNode_SequencePlayer               AnimGraphNode_SequencePlayer;                      // 0x0988(0x0080)()
	class UAnimSequence*                          StunnedAnimSequence;                               // 0x0A08(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          UseStunnedSequence;                                // 0x0A10(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          IsAlive;                                           // 0x0A11(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_A12[0x6];                                      // 0x0A12(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class UOBJ_EnemyTarget_C*                     AimTarget;                                         // 0x0A18(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FName                                   AimSocketName;                                     // 0x0A20(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               CurrentAimLocalRotation;                           // 0x0A28(0x000C)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	struct FVector                                CurrentAimLocalDirection;                          // 0x0A34(0x000C)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         TurretRotationSpeed;                               // 0x0A40(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         HorizontalSpeedFactor;                             // 0x0A44(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         VerticalSpeedFactor;                               // 0x0A48(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_A4C[0x4];                                      // 0x0A4C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UAnimSequenceBase*                      IdleOverride;                                      // 0x0A50(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          UseIdleOverride;                                   // 0x0A58(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)

public:
	void ExecuteUbergraph_ANIMBP_SecBot(int32 EntryPoint);
	void BlueprintUpdateAnimation(float DeltaTimeX);
	void UpdateAiming(float DeltaSeconds);
	void AnimGraph(struct FPoseLink* AnimGraph_0);
	void SetVoiceAmplitude(float VoiceAmplitude, bool* Result);
	void IsStunned(bool* Result);
	void SetStunnedSequence(class UAnimSequence* StunnedSequence, bool* Result);
	void SetSprintEnabled(bool SprintEnabled, bool* Result);
	void SetTravelMode(bool TravelModeOn, bool* Result);
	void GetAimTarget(class UOBJ_EnemyTarget_C** Target);
	void SetAimTarget(class UOBJ_EnemyTarget_C* Target, bool* Result);
	void GetIdleOverrideSequence(class UAnimSequenceBase** IdleOverride_0);
	void SetIdleOverrideSequence(class UAnimSequenceBase* IdleOverride_0, bool* Result);
	void SetRelativeAimAngleOffset(float YawOffset, float PitchOffset, float Alpha, bool* Result);
	void GetRotation(struct FRotator* AnimRotationPerSecond, float* AnimRotationAlpha);
	void GetStance(ENUM_Emotions* Stance);
	void SetStance(ENUM_Emotions Stance, bool* Result);
	void SetCatatonic(bool State, bool* Result);
	void SetStandingTurn(float SignedAngleToTarget, bool IsStanding, bool* Result);
	void ReceiveDeathBlow(ENUM_DeathBlowType BodyPart, bool* Result);
	void ReceiveImpact(const struct FVector& Impulse, const struct FVector& ImpactLocation, const struct FVector& ImpactNormal, class FName BoneName, const class FString& DamageType, float DamageAmount, float FlinchTime, bool* Result);
	void SetIsAlive(bool IsAlive_0, bool* Result);
	void SetMovementParameters(const struct FVector& Velocity, const struct FRotator& Rotation, const struct FRotator& DesiredRotation, bool* Result);
	void SetLookAtAlpha(float Alpha, bool* Result);
	void SetLookAtLocation(const struct FVector& Location, bool* Result);

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"ANIMBP_SecBot_C">();
	}
	static class UANIMBP_SecBot_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<UANIMBP_SecBot_C>();
	}
};
static_assert(alignof(UANIMBP_SecBot_C) == 0x000010, "Wrong alignment on UANIMBP_SecBot_C");
static_assert(sizeof(UANIMBP_SecBot_C) == 0x000A60, "Wrong size on UANIMBP_SecBot_C");
static_assert(offsetof(UANIMBP_SecBot_C, UberGraphFrame) == 0x0002C0, "Member 'UANIMBP_SecBot_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(UANIMBP_SecBot_C, AnimGraphNode_Root) == 0x0002C8, "Member 'UANIMBP_SecBot_C::AnimGraphNode_Root' has a wrong offset!");
static_assert(offsetof(UANIMBP_SecBot_C, AnimGraphNode_Slot_1) == 0x0002F8, "Member 'UANIMBP_SecBot_C::AnimGraphNode_Slot_1' has a wrong offset!");
static_assert(offsetof(UANIMBP_SecBot_C, AnimGraphNode_BlendListByBool_2) == 0x000340, "Member 'UANIMBP_SecBot_C::AnimGraphNode_BlendListByBool_2' has a wrong offset!");
static_assert(offsetof(UANIMBP_SecBot_C, AnimGraphNode_PoseSnapshot) == 0x0003E0, "Member 'UANIMBP_SecBot_C::AnimGraphNode_PoseSnapshot' has a wrong offset!");
static_assert(offsetof(UANIMBP_SecBot_C, AnimGraphNode_Slot) == 0x000470, "Member 'UANIMBP_SecBot_C::AnimGraphNode_Slot' has a wrong offset!");
static_assert(offsetof(UANIMBP_SecBot_C, AnimGraphNode_ModifyBone) == 0x0004B8, "Member 'UANIMBP_SecBot_C::AnimGraphNode_ModifyBone' has a wrong offset!");
static_assert(offsetof(UANIMBP_SecBot_C, AnimGraphNode_LocalToComponentSpace) == 0x0005C0, "Member 'UANIMBP_SecBot_C::AnimGraphNode_LocalToComponentSpace' has a wrong offset!");
static_assert(offsetof(UANIMBP_SecBot_C, AnimGraphNode_ComponentToLocalSpace) == 0x0005E0, "Member 'UANIMBP_SecBot_C::AnimGraphNode_ComponentToLocalSpace' has a wrong offset!");
static_assert(offsetof(UANIMBP_SecBot_C, AnimGraphNode_BlendSpacePlayer) == 0x000600, "Member 'UANIMBP_SecBot_C::AnimGraphNode_BlendSpacePlayer' has a wrong offset!");
static_assert(offsetof(UANIMBP_SecBot_C, AnimGraphNode_ApplyAdditive) == 0x0006E8, "Member 'UANIMBP_SecBot_C::AnimGraphNode_ApplyAdditive' has a wrong offset!");
static_assert(offsetof(UANIMBP_SecBot_C, AnimGraphNode_LocalRefPose) == 0x0007B0, "Member 'UANIMBP_SecBot_C::AnimGraphNode_LocalRefPose' has a wrong offset!");
static_assert(offsetof(UANIMBP_SecBot_C, AnimGraphNode_BlendListByBool_1) == 0x0007C8, "Member 'UANIMBP_SecBot_C::AnimGraphNode_BlendListByBool_1' has a wrong offset!");
static_assert(offsetof(UANIMBP_SecBot_C, AnimGraphNode_SequencePlayer_1) == 0x000868, "Member 'UANIMBP_SecBot_C::AnimGraphNode_SequencePlayer_1' has a wrong offset!");
static_assert(offsetof(UANIMBP_SecBot_C, AnimGraphNode_BlendListByBool) == 0x0008E8, "Member 'UANIMBP_SecBot_C::AnimGraphNode_BlendListByBool' has a wrong offset!");
static_assert(offsetof(UANIMBP_SecBot_C, AnimGraphNode_SequencePlayer) == 0x000988, "Member 'UANIMBP_SecBot_C::AnimGraphNode_SequencePlayer' has a wrong offset!");
static_assert(offsetof(UANIMBP_SecBot_C, StunnedAnimSequence) == 0x000A08, "Member 'UANIMBP_SecBot_C::StunnedAnimSequence' has a wrong offset!");
static_assert(offsetof(UANIMBP_SecBot_C, UseStunnedSequence) == 0x000A10, "Member 'UANIMBP_SecBot_C::UseStunnedSequence' has a wrong offset!");
static_assert(offsetof(UANIMBP_SecBot_C, IsAlive) == 0x000A11, "Member 'UANIMBP_SecBot_C::IsAlive' has a wrong offset!");
static_assert(offsetof(UANIMBP_SecBot_C, AimTarget) == 0x000A18, "Member 'UANIMBP_SecBot_C::AimTarget' has a wrong offset!");
static_assert(offsetof(UANIMBP_SecBot_C, AimSocketName) == 0x000A20, "Member 'UANIMBP_SecBot_C::AimSocketName' has a wrong offset!");
static_assert(offsetof(UANIMBP_SecBot_C, CurrentAimLocalRotation) == 0x000A28, "Member 'UANIMBP_SecBot_C::CurrentAimLocalRotation' has a wrong offset!");
static_assert(offsetof(UANIMBP_SecBot_C, CurrentAimLocalDirection) == 0x000A34, "Member 'UANIMBP_SecBot_C::CurrentAimLocalDirection' has a wrong offset!");
static_assert(offsetof(UANIMBP_SecBot_C, TurretRotationSpeed) == 0x000A40, "Member 'UANIMBP_SecBot_C::TurretRotationSpeed' has a wrong offset!");
static_assert(offsetof(UANIMBP_SecBot_C, HorizontalSpeedFactor) == 0x000A44, "Member 'UANIMBP_SecBot_C::HorizontalSpeedFactor' has a wrong offset!");
static_assert(offsetof(UANIMBP_SecBot_C, VerticalSpeedFactor) == 0x000A48, "Member 'UANIMBP_SecBot_C::VerticalSpeedFactor' has a wrong offset!");
static_assert(offsetof(UANIMBP_SecBot_C, IdleOverride) == 0x000A50, "Member 'UANIMBP_SecBot_C::IdleOverride' has a wrong offset!");
static_assert(offsetof(UANIMBP_SecBot_C, UseIdleOverride) == 0x000A58, "Member 'UANIMBP_SecBot_C::UseIdleOverride' has a wrong offset!");

}

