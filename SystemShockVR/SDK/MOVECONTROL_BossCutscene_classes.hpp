#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: MOVECONTROL_BossCutscene

#include "Basic.hpp"

#include "CoreUObject_structs.hpp"
#include "MOVECONTROL_Base_classes.hpp"


namespace SDK
{

// BlueprintGeneratedClass MOVECONTROL_BossCutscene.MOVECONTROL_BossCutscene_C
// 0x0028 (0x00C0 - 0x0098)
class UMOVECONTROL_BossCutscene_C final : public UMOVECONTROL_Base_C
{
public:
	struct FVector                                BossFocusLocation;                                 // 0x0094(0x000C)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash)
	float                                         CutsceneDuration;                                  // 0x00A0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         TransitionDuration;                                // 0x00A4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               SourceRotation;                                    // 0x00A8(0x000C)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	struct FVector2D                              RelativeYawPitchOffset;                            // 0x00B4(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

public:
	void InitializeMoveControl(class APAWN_Hacker_Simple_C* Player_0, float GameTime, const struct FSTRUCT_MoveControlParams& InitialControlParams, bool* Result);
	void UpdateMoveControl(const struct FVector2D& MoveInput, const struct FVector2D& LookInput, const struct FSTRUCT_MoveControlParams& ControlParams, TArray<float>& ActionInputValues, float MoveInputScale, float Delta_Time, bool* ShouldExpire);

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"MOVECONTROL_BossCutscene_C">();
	}
	static class UMOVECONTROL_BossCutscene_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMOVECONTROL_BossCutscene_C>();
	}
};
static_assert(alignof(UMOVECONTROL_BossCutscene_C) == 0x000008, "Wrong alignment on UMOVECONTROL_BossCutscene_C");
static_assert(sizeof(UMOVECONTROL_BossCutscene_C) == 0x0000C0, "Wrong size on UMOVECONTROL_BossCutscene_C");
static_assert(offsetof(UMOVECONTROL_BossCutscene_C, BossFocusLocation) == 0x000094, "Member 'UMOVECONTROL_BossCutscene_C::BossFocusLocation' has a wrong offset!");
static_assert(offsetof(UMOVECONTROL_BossCutscene_C, CutsceneDuration) == 0x0000A0, "Member 'UMOVECONTROL_BossCutscene_C::CutsceneDuration' has a wrong offset!");
static_assert(offsetof(UMOVECONTROL_BossCutscene_C, TransitionDuration) == 0x0000A4, "Member 'UMOVECONTROL_BossCutscene_C::TransitionDuration' has a wrong offset!");
static_assert(offsetof(UMOVECONTROL_BossCutscene_C, SourceRotation) == 0x0000A8, "Member 'UMOVECONTROL_BossCutscene_C::SourceRotation' has a wrong offset!");
static_assert(offsetof(UMOVECONTROL_BossCutscene_C, RelativeYawPitchOffset) == 0x0000B4, "Member 'UMOVECONTROL_BossCutscene_C::RelativeYawPitchOffset' has a wrong offset!");

}

