#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: SKILL_ShootBullet

#include "Basic.hpp"

#include "AttributeSystem_structs.hpp"
#include "SKILL_Projectile_Base_classes.hpp"


namespace SDK
{

// BlueprintGeneratedClass SKILL_ShootBullet.SKILL_ShootBullet_C
// 0x0028 (0x00D8 - 0x00B0)
#pragma pack(push, 0x1)
class alignas(0x08) USKILL_ShootBullet_C : public USKILL_Projectile_Base_C
{
public:
	class UClass*                                 BulletClass;                                       // 0x00B0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TArray<struct FAttribModApplyData>            AdditionalMods;                                    // 0x00B8(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance)
	float                                         SpreadRadiusMin;                                   // 0x00C8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         SpreadRadiusMax;                                   // 0x00CC(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         ArmorPenetration;                                  // 0x00D0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

public:
	void SpawnBullet(class FName SocketName, const struct FVector& Location, const struct FVector& Direction, class ABulletProjectile_Base_C** Result);
	void OnActivateSkill(bool* Result);
	void SpawnBulletWithDamage(class FName SocketName, const struct FVector& Location, const struct FVector& Direction, int32 DamageValue, class ABulletProjectile_Base_C** Result);
	void SpawnBulletWithWeightedRandomDamage(class FName SocketName, const struct FVector& Location, const struct FVector& Direction, float DamageValue, class ABulletProjectile_Base_C** Result);
	void GetBulletSpawnParameters(int32 BarrelIndex, class FName* SocketName, struct FVector* Location, struct FVector* Direction);
	void GetProjectileSpeed(float* Speed);

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"SKILL_ShootBullet_C">();
	}
	static class USKILL_ShootBullet_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<USKILL_ShootBullet_C>();
	}
};
#pragma pack(pop)
static_assert(alignof(USKILL_ShootBullet_C) == 0x000008, "Wrong alignment on USKILL_ShootBullet_C");
static_assert(sizeof(USKILL_ShootBullet_C) == 0x0000D8, "Wrong size on USKILL_ShootBullet_C");
static_assert(offsetof(USKILL_ShootBullet_C, BulletClass) == 0x0000B0, "Member 'USKILL_ShootBullet_C::BulletClass' has a wrong offset!");
static_assert(offsetof(USKILL_ShootBullet_C, AdditionalMods) == 0x0000B8, "Member 'USKILL_ShootBullet_C::AdditionalMods' has a wrong offset!");
static_assert(offsetof(USKILL_ShootBullet_C, SpreadRadiusMin) == 0x0000C8, "Member 'USKILL_ShootBullet_C::SpreadRadiusMin' has a wrong offset!");
static_assert(offsetof(USKILL_ShootBullet_C, SpreadRadiusMax) == 0x0000CC, "Member 'USKILL_ShootBullet_C::SpreadRadiusMax' has a wrong offset!");
static_assert(offsetof(USKILL_ShootBullet_C, ArmorPenetration) == 0x0000D0, "Member 'USKILL_ShootBullet_C::ArmorPenetration' has a wrong offset!");

}

