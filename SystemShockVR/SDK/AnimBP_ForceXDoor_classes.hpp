#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: AnimBP_ForceXDoor

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "Engine_classes.hpp"
#include "AnimGraphRuntime_structs.hpp"
#include "CoreUObject_structs.hpp"


namespace SDK
{

// AnimBlueprintGeneratedClass AnimBP_ForceXDoor.AnimBP_ForceXDoor_C
// 0x06A0 (0x0960 - 0x02C0)
class UAnimBP_ForceXDoor_C final : public UAnimInstance
{
public:
	uint8                                         Pad_2B8[0x8];                                      // 0x02B8(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x02C0(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	struct FAnimNode_Root                         AnimGraphNode_Root;                                // 0x02C8(0x0030)()
	struct FAnimNode_Slot                         AnimGraphNode_Slot;                                // 0x02F8(0x0048)()
	struct FAnimNode_BlendListByBool              AnimGraphNode_BlendListByBool;                     // 0x0340(0x00A0)()
	struct FAnimNode_SequencePlayer               AnimGraphNode_SequencePlayer_1;                    // 0x03E0(0x0080)()
	struct FAnimNode_SequencePlayer               AnimGraphNode_SequencePlayer;                      // 0x0460(0x0080)()
	struct FAnimNode_ModifyBone                   AnimGraphNode_ModifyBone_3;                        // 0x04E0(0x0108)()
	struct FAnimNode_ConvertLocalToComponentSpace AnimGraphNode_LocalToComponentSpace;               // 0x05E8(0x0020)()
	struct FAnimNode_ConvertComponentToLocalSpace AnimGraphNode_ComponentToLocalSpace;               // 0x0608(0x0020)()
	struct FAnimNode_ModifyBone                   AnimGraphNode_ModifyBone_2;                        // 0x0628(0x0108)()
	struct FAnimNode_ModifyBone                   AnimGraphNode_ModifyBone_1;                        // 0x0730(0x0108)()
	struct FAnimNode_ModifyBone                   AnimGraphNode_ModifyBone;                          // 0x0838(0x0108)()
	bool                                          IsOpen;                                            // 0x0940(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_941[0x3];                                      // 0x0941(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         MaxSpeedScale;                                     // 0x0944(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               GeneratorRotation;                                 // 0x0948(0x000C)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	float                                         ToggleTimestamp;                                   // 0x0954(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         ToggleDuration;                                    // 0x0958(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         SpinProgress;                                      // 0x095C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

public:
	void ExecuteUbergraph_AnimBP_ForceXDoor(int32 EntryPoint);
	void BlueprintUpdateAnimation(float DeltaTimeX);
	void UpdateSpin();
	void AnimGraph(struct FPoseLink* AnimGraph_0);
	void UnlockDoor(bool* Result);
	void HideBackButton(bool HideState, bool* Result);
	void HideFrontButton(bool HideState, bool* Result);
	void SetLocked(bool LockedState, bool* Result);
	void IsLocked(bool* Result);
	void CloseDoor(bool* Result);
	void OpenDoor(bool* Result);

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"AnimBP_ForceXDoor_C">();
	}
	static class UAnimBP_ForceXDoor_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<UAnimBP_ForceXDoor_C>();
	}
};
static_assert(alignof(UAnimBP_ForceXDoor_C) == 0x000010, "Wrong alignment on UAnimBP_ForceXDoor_C");
static_assert(sizeof(UAnimBP_ForceXDoor_C) == 0x000960, "Wrong size on UAnimBP_ForceXDoor_C");
static_assert(offsetof(UAnimBP_ForceXDoor_C, UberGraphFrame) == 0x0002C0, "Member 'UAnimBP_ForceXDoor_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(UAnimBP_ForceXDoor_C, AnimGraphNode_Root) == 0x0002C8, "Member 'UAnimBP_ForceXDoor_C::AnimGraphNode_Root' has a wrong offset!");
static_assert(offsetof(UAnimBP_ForceXDoor_C, AnimGraphNode_Slot) == 0x0002F8, "Member 'UAnimBP_ForceXDoor_C::AnimGraphNode_Slot' has a wrong offset!");
static_assert(offsetof(UAnimBP_ForceXDoor_C, AnimGraphNode_BlendListByBool) == 0x000340, "Member 'UAnimBP_ForceXDoor_C::AnimGraphNode_BlendListByBool' has a wrong offset!");
static_assert(offsetof(UAnimBP_ForceXDoor_C, AnimGraphNode_SequencePlayer_1) == 0x0003E0, "Member 'UAnimBP_ForceXDoor_C::AnimGraphNode_SequencePlayer_1' has a wrong offset!");
static_assert(offsetof(UAnimBP_ForceXDoor_C, AnimGraphNode_SequencePlayer) == 0x000460, "Member 'UAnimBP_ForceXDoor_C::AnimGraphNode_SequencePlayer' has a wrong offset!");
static_assert(offsetof(UAnimBP_ForceXDoor_C, AnimGraphNode_ModifyBone_3) == 0x0004E0, "Member 'UAnimBP_ForceXDoor_C::AnimGraphNode_ModifyBone_3' has a wrong offset!");
static_assert(offsetof(UAnimBP_ForceXDoor_C, AnimGraphNode_LocalToComponentSpace) == 0x0005E8, "Member 'UAnimBP_ForceXDoor_C::AnimGraphNode_LocalToComponentSpace' has a wrong offset!");
static_assert(offsetof(UAnimBP_ForceXDoor_C, AnimGraphNode_ComponentToLocalSpace) == 0x000608, "Member 'UAnimBP_ForceXDoor_C::AnimGraphNode_ComponentToLocalSpace' has a wrong offset!");
static_assert(offsetof(UAnimBP_ForceXDoor_C, AnimGraphNode_ModifyBone_2) == 0x000628, "Member 'UAnimBP_ForceXDoor_C::AnimGraphNode_ModifyBone_2' has a wrong offset!");
static_assert(offsetof(UAnimBP_ForceXDoor_C, AnimGraphNode_ModifyBone_1) == 0x000730, "Member 'UAnimBP_ForceXDoor_C::AnimGraphNode_ModifyBone_1' has a wrong offset!");
static_assert(offsetof(UAnimBP_ForceXDoor_C, AnimGraphNode_ModifyBone) == 0x000838, "Member 'UAnimBP_ForceXDoor_C::AnimGraphNode_ModifyBone' has a wrong offset!");
static_assert(offsetof(UAnimBP_ForceXDoor_C, IsOpen) == 0x000940, "Member 'UAnimBP_ForceXDoor_C::IsOpen' has a wrong offset!");
static_assert(offsetof(UAnimBP_ForceXDoor_C, MaxSpeedScale) == 0x000944, "Member 'UAnimBP_ForceXDoor_C::MaxSpeedScale' has a wrong offset!");
static_assert(offsetof(UAnimBP_ForceXDoor_C, GeneratorRotation) == 0x000948, "Member 'UAnimBP_ForceXDoor_C::GeneratorRotation' has a wrong offset!");
static_assert(offsetof(UAnimBP_ForceXDoor_C, ToggleTimestamp) == 0x000954, "Member 'UAnimBP_ForceXDoor_C::ToggleTimestamp' has a wrong offset!");
static_assert(offsetof(UAnimBP_ForceXDoor_C, ToggleDuration) == 0x000958, "Member 'UAnimBP_ForceXDoor_C::ToggleDuration' has a wrong offset!");
static_assert(offsetof(UAnimBP_ForceXDoor_C, SpinProgress) == 0x00095C, "Member 'UAnimBP_ForceXDoor_C::SpinProgress' has a wrong offset!");

}

