#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: INTERACT_BreakableSharedLightPanel

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "INTERACT_BreakablePanel_classes.hpp"
#include "CoreUObject_structs.hpp"
#include "ENUM_LightPanelState_structs.hpp"


namespace SDK
{

// BlueprintGeneratedClass INTERACT_BreakableSharedLightPanel.INTERACT_BreakableSharedLightPanel_C
// 0x00F0 (0x0440 - 0x0350)
class AINTERACT_BreakableSharedLightPanel_C : public AINTERACT_BreakablePanel_C
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame_INTERACT_BreakableSharedLightPanel_C; // 0x0350(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	class UStaticMeshComponent*                   LightPanel;                                        // 0x0358(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	ENUM_LightPanelState                          LightPanelState;                                   // 0x0360(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_361[0x3];                                      // 0x0361(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FLinearColor                           LightColor;                                        // 0x0364(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         BrokenLightBits;                                   // 0x0374(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, SaveGame, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         SharedLightCount;                                  // 0x0378(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_37C[0x4];                                      // 0x037C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 BreakablePrefix;                                   // 0x0380(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, HasGetValueTypeHash)
	float                                         MaxLightIntensity;                                 // 0x0390(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         BreakImpulse;                                      // 0x0394(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         BreakConeDegrees;                                  // 0x0398(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         DebrisAmount;                                      // 0x039C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                DebrisVolume;                                      // 0x03A0(0x000C)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_3AC[0x4];                                      // 0x03AC(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TSoftObjectPtr<class USoundCue>               BreakSoundCue_Spark;                               // 0x03B0(0x0028)(Edit, BlueprintVisible, DisableEditOnInstance, HasGetValueTypeHash)
	TSoftObjectPtr<class USoundCue>               BreakSoundCue_Glass;                               // 0x03D8(0x0028)(Edit, BlueprintVisible, DisableEditOnInstance, HasGetValueTypeHash)
	TSoftObjectPtr<class UNiagaraSystem>          BreakEffects;                                      // 0x0400(0x0028)(Edit, BlueprintVisible, DisableEditOnInstance, HasGetValueTypeHash)
	struct FDataTableRowHandle                    DebrisTemplate;                                    // 0x0428(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor)
	class ULightTransitionManager_C*              LightTransitionManager;                            // 0x0438(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

public:
	void ExecuteUbergraph_INTERACT_BreakableSharedLightPanel(int32 EntryPoint);
	void ReceiveBeginPlay();
	void UserConstructionScript();
	void CanTakeDamage(class UAttribDamageType* DamageType, class UOBJ_ImpactData_C* ImpactData, bool* Result);
	void OnDamageReceived(class AActor* SourceActor, class UAttribDamageType* DamageType, int32 DamageValue, class UPrimitiveComponent* HitComponent, int32 HitFaceIndex, const struct FVector& HitLocation, const struct FVector& HitNormal, float ImpactRadius, bool* Result);
	void GetLightComponent(class ULightComponent** LightComponent);
	void GetLightIndexFromComponent(class USceneComponent* Component, int32* LightIndex);
	void InitializeBreakableLightPanel();
	void ForceUpdateLightParameters(bool ActivationState);
	void TryDestroyLightComponent();
	void UpdateLightIntensity(class ULightComponent* LightComponent);
	void SetLightIntensity(class ULightComponent* LightComponent, float LightIntensity);
	void SetFlickeringMeshParameter(bool State);
	void UpdateMaterialLightIntensity(class UStaticMeshComponent* LightPanelGlassComponent, bool ActivationState);
	void OnLightPanelGlassBroken(class UStaticMeshComponent* LightPanelGlass, class AActor* SourceActor, const struct FVector& NormalVector, bool* Result);
	void OnUpdateLightVisibility(bool ActivationState);
	void OnActivationStateChanged(bool State, bool OnBeginPlay);
	void SetShouldBeVisible(bool VisibleState, bool* Result);
	void OnUpdateLightColor();
	void GetInteractDestroyed(bool* Result);
	void HasBrokenAllLights(bool* Result);

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"INTERACT_BreakableSharedLightPanel_C">();
	}
	static class AINTERACT_BreakableSharedLightPanel_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<AINTERACT_BreakableSharedLightPanel_C>();
	}
};
static_assert(alignof(AINTERACT_BreakableSharedLightPanel_C) == 0x000008, "Wrong alignment on AINTERACT_BreakableSharedLightPanel_C");
static_assert(sizeof(AINTERACT_BreakableSharedLightPanel_C) == 0x000440, "Wrong size on AINTERACT_BreakableSharedLightPanel_C");
static_assert(offsetof(AINTERACT_BreakableSharedLightPanel_C, UberGraphFrame_INTERACT_BreakableSharedLightPanel_C) == 0x000350, "Member 'AINTERACT_BreakableSharedLightPanel_C::UberGraphFrame_INTERACT_BreakableSharedLightPanel_C' has a wrong offset!");
static_assert(offsetof(AINTERACT_BreakableSharedLightPanel_C, LightPanel) == 0x000358, "Member 'AINTERACT_BreakableSharedLightPanel_C::LightPanel' has a wrong offset!");
static_assert(offsetof(AINTERACT_BreakableSharedLightPanel_C, LightPanelState) == 0x000360, "Member 'AINTERACT_BreakableSharedLightPanel_C::LightPanelState' has a wrong offset!");
static_assert(offsetof(AINTERACT_BreakableSharedLightPanel_C, LightColor) == 0x000364, "Member 'AINTERACT_BreakableSharedLightPanel_C::LightColor' has a wrong offset!");
static_assert(offsetof(AINTERACT_BreakableSharedLightPanel_C, BrokenLightBits) == 0x000374, "Member 'AINTERACT_BreakableSharedLightPanel_C::BrokenLightBits' has a wrong offset!");
static_assert(offsetof(AINTERACT_BreakableSharedLightPanel_C, SharedLightCount) == 0x000378, "Member 'AINTERACT_BreakableSharedLightPanel_C::SharedLightCount' has a wrong offset!");
static_assert(offsetof(AINTERACT_BreakableSharedLightPanel_C, BreakablePrefix) == 0x000380, "Member 'AINTERACT_BreakableSharedLightPanel_C::BreakablePrefix' has a wrong offset!");
static_assert(offsetof(AINTERACT_BreakableSharedLightPanel_C, MaxLightIntensity) == 0x000390, "Member 'AINTERACT_BreakableSharedLightPanel_C::MaxLightIntensity' has a wrong offset!");
static_assert(offsetof(AINTERACT_BreakableSharedLightPanel_C, BreakImpulse) == 0x000394, "Member 'AINTERACT_BreakableSharedLightPanel_C::BreakImpulse' has a wrong offset!");
static_assert(offsetof(AINTERACT_BreakableSharedLightPanel_C, BreakConeDegrees) == 0x000398, "Member 'AINTERACT_BreakableSharedLightPanel_C::BreakConeDegrees' has a wrong offset!");
static_assert(offsetof(AINTERACT_BreakableSharedLightPanel_C, DebrisAmount) == 0x00039C, "Member 'AINTERACT_BreakableSharedLightPanel_C::DebrisAmount' has a wrong offset!");
static_assert(offsetof(AINTERACT_BreakableSharedLightPanel_C, DebrisVolume) == 0x0003A0, "Member 'AINTERACT_BreakableSharedLightPanel_C::DebrisVolume' has a wrong offset!");
static_assert(offsetof(AINTERACT_BreakableSharedLightPanel_C, BreakSoundCue_Spark) == 0x0003B0, "Member 'AINTERACT_BreakableSharedLightPanel_C::BreakSoundCue_Spark' has a wrong offset!");
static_assert(offsetof(AINTERACT_BreakableSharedLightPanel_C, BreakSoundCue_Glass) == 0x0003D8, "Member 'AINTERACT_BreakableSharedLightPanel_C::BreakSoundCue_Glass' has a wrong offset!");
static_assert(offsetof(AINTERACT_BreakableSharedLightPanel_C, BreakEffects) == 0x000400, "Member 'AINTERACT_BreakableSharedLightPanel_C::BreakEffects' has a wrong offset!");
static_assert(offsetof(AINTERACT_BreakableSharedLightPanel_C, DebrisTemplate) == 0x000428, "Member 'AINTERACT_BreakableSharedLightPanel_C::DebrisTemplate' has a wrong offset!");
static_assert(offsetof(AINTERACT_BreakableSharedLightPanel_C, LightTransitionManager) == 0x000438, "Member 'AINTERACT_BreakableSharedLightPanel_C::LightTransitionManager' has a wrong offset!");

}

