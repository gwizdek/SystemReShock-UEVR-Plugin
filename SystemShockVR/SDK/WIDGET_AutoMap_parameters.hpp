#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: WIDGET_AutoMap

#include "Basic.hpp"

#include "STRUCT_UserTintOption_structs.hpp"
#include "ENUM_MenuNavigationInput_structs.hpp"
#include "SlateCore_structs.hpp"
#include "STRUCT_LevelInfo_structs.hpp"
#include "ENUM_CursorMode_structs.hpp"
#include "ENUM_CardinalDirection_structs.hpp"
#include "STRUCT_MissionWaypointData_structs.hpp"
#include "UMG_structs.hpp"
#include "CoreUObject_structs.hpp"
#include "Engine_structs.hpp"
#include "STRUCT_ScannableRegionData_structs.hpp"
#include "InputCore_structs.hpp"
#include "ENUM_GameDifficulty_structs.hpp"


namespace SDK::Params
{

// Function WIDGET_AutoMap.WIDGET_AutoMap_C.ExecuteUbergraph_WIDGET_AutoMap
// 0x0070 (0x0070 - 0x0000)
struct WIDGET_AutoMap_C_ExecuteUbergraph_WIDGET_AutoMap final
{
public:
	int32                                         EntryPoint;                                        // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_NotEqual_IntInt_ReturnValue;              // 0x0004(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class UCanvasPanelSlot*                       CallFunc_SlotAsCanvasSlot_ReturnValue;             // 0x0008(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UMaterialInstanceDynamic*               CallFunc_ConvertToDynamicMaterialInstance_ReturnValue; // 0x0010(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector2D                              CallFunc_GetSize_ReturnValue;                      // 0x0018(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector2D_X;                          // 0x0020(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector2D_Y;                          // 0x0024(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Divide_FloatFloat_ReturnValue;            // 0x0028(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsScannerEnabled_Result;                  // 0x002C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_2D[0x3];                                       // 0x002D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FGeometry                              K2Node_Event_MyGeometry;                           // 0x0030(0x0038)(IsPlainOldData, NoDestructor)
	float                                         K2Node_Event_InDeltaTime;                          // 0x0068(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(WIDGET_AutoMap_C_ExecuteUbergraph_WIDGET_AutoMap) == 0x000008, "Wrong alignment on WIDGET_AutoMap_C_ExecuteUbergraph_WIDGET_AutoMap");
static_assert(sizeof(WIDGET_AutoMap_C_ExecuteUbergraph_WIDGET_AutoMap) == 0x000070, "Wrong size on WIDGET_AutoMap_C_ExecuteUbergraph_WIDGET_AutoMap");
static_assert(offsetof(WIDGET_AutoMap_C_ExecuteUbergraph_WIDGET_AutoMap, EntryPoint) == 0x000000, "Member 'WIDGET_AutoMap_C_ExecuteUbergraph_WIDGET_AutoMap::EntryPoint' has a wrong offset!");
static_assert(offsetof(WIDGET_AutoMap_C_ExecuteUbergraph_WIDGET_AutoMap, CallFunc_NotEqual_IntInt_ReturnValue) == 0x000004, "Member 'WIDGET_AutoMap_C_ExecuteUbergraph_WIDGET_AutoMap::CallFunc_NotEqual_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(WIDGET_AutoMap_C_ExecuteUbergraph_WIDGET_AutoMap, CallFunc_SlotAsCanvasSlot_ReturnValue) == 0x000008, "Member 'WIDGET_AutoMap_C_ExecuteUbergraph_WIDGET_AutoMap::CallFunc_SlotAsCanvasSlot_ReturnValue' has a wrong offset!");
static_assert(offsetof(WIDGET_AutoMap_C_ExecuteUbergraph_WIDGET_AutoMap, CallFunc_ConvertToDynamicMaterialInstance_ReturnValue) == 0x000010, "Member 'WIDGET_AutoMap_C_ExecuteUbergraph_WIDGET_AutoMap::CallFunc_ConvertToDynamicMaterialInstance_ReturnValue' has a wrong offset!");
static_assert(offsetof(WIDGET_AutoMap_C_ExecuteUbergraph_WIDGET_AutoMap, CallFunc_GetSize_ReturnValue) == 0x000018, "Member 'WIDGET_AutoMap_C_ExecuteUbergraph_WIDGET_AutoMap::CallFunc_GetSize_ReturnValue' has a wrong offset!");
static_assert(offsetof(WIDGET_AutoMap_C_ExecuteUbergraph_WIDGET_AutoMap, CallFunc_BreakVector2D_X) == 0x000020, "Member 'WIDGET_AutoMap_C_ExecuteUbergraph_WIDGET_AutoMap::CallFunc_BreakVector2D_X' has a wrong offset!");
static_assert(offsetof(WIDGET_AutoMap_C_ExecuteUbergraph_WIDGET_AutoMap, CallFunc_BreakVector2D_Y) == 0x000024, "Member 'WIDGET_AutoMap_C_ExecuteUbergraph_WIDGET_AutoMap::CallFunc_BreakVector2D_Y' has a wrong offset!");
static_assert(offsetof(WIDGET_AutoMap_C_ExecuteUbergraph_WIDGET_AutoMap, CallFunc_Divide_FloatFloat_ReturnValue) == 0x000028, "Member 'WIDGET_AutoMap_C_ExecuteUbergraph_WIDGET_AutoMap::CallFunc_Divide_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(WIDGET_AutoMap_C_ExecuteUbergraph_WIDGET_AutoMap, CallFunc_IsScannerEnabled_Result) == 0x00002C, "Member 'WIDGET_AutoMap_C_ExecuteUbergraph_WIDGET_AutoMap::CallFunc_IsScannerEnabled_Result' has a wrong offset!");
static_assert(offsetof(WIDGET_AutoMap_C_ExecuteUbergraph_WIDGET_AutoMap, K2Node_Event_MyGeometry) == 0x000030, "Member 'WIDGET_AutoMap_C_ExecuteUbergraph_WIDGET_AutoMap::K2Node_Event_MyGeometry' has a wrong offset!");
static_assert(offsetof(WIDGET_AutoMap_C_ExecuteUbergraph_WIDGET_AutoMap, K2Node_Event_InDeltaTime) == 0x000068, "Member 'WIDGET_AutoMap_C_ExecuteUbergraph_WIDGET_AutoMap::K2Node_Event_InDeltaTime' has a wrong offset!");

// Function WIDGET_AutoMap.WIDGET_AutoMap_C.Tick
// 0x003C (0x003C - 0x0000)
struct WIDGET_AutoMap_C_Tick final
{
public:
	struct FGeometry                              MyGeometry;                                        // 0x0000(0x0038)(BlueprintVisible, BlueprintReadOnly, Parm, IsPlainOldData, NoDestructor)
	float                                         InDeltaTime;                                       // 0x0038(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(WIDGET_AutoMap_C_Tick) == 0x000004, "Wrong alignment on WIDGET_AutoMap_C_Tick");
static_assert(sizeof(WIDGET_AutoMap_C_Tick) == 0x00003C, "Wrong size on WIDGET_AutoMap_C_Tick");
static_assert(offsetof(WIDGET_AutoMap_C_Tick, MyGeometry) == 0x000000, "Member 'WIDGET_AutoMap_C_Tick::MyGeometry' has a wrong offset!");
static_assert(offsetof(WIDGET_AutoMap_C_Tick, InDeltaTime) == 0x000038, "Member 'WIDGET_AutoMap_C_Tick::InDeltaTime' has a wrong offset!");

// Function WIDGET_AutoMap.WIDGET_AutoMap_C.ReceiveMouseZoomInput
// 0x0008 (0x0008 - 0x0000)
struct WIDGET_AutoMap_C_ReceiveMouseZoomInput final
{
public:
	float                                         ZoomDelta;                                         // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_NotEqual_FloatFloat_ReturnValue;          // 0x0004(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(WIDGET_AutoMap_C_ReceiveMouseZoomInput) == 0x000004, "Wrong alignment on WIDGET_AutoMap_C_ReceiveMouseZoomInput");
static_assert(sizeof(WIDGET_AutoMap_C_ReceiveMouseZoomInput) == 0x000008, "Wrong size on WIDGET_AutoMap_C_ReceiveMouseZoomInput");
static_assert(offsetof(WIDGET_AutoMap_C_ReceiveMouseZoomInput, ZoomDelta) == 0x000000, "Member 'WIDGET_AutoMap_C_ReceiveMouseZoomInput::ZoomDelta' has a wrong offset!");
static_assert(offsetof(WIDGET_AutoMap_C_ReceiveMouseZoomInput, CallFunc_NotEqual_FloatFloat_ReturnValue) == 0x000004, "Member 'WIDGET_AutoMap_C_ReceiveMouseZoomInput::CallFunc_NotEqual_FloatFloat_ReturnValue' has a wrong offset!");

// Function WIDGET_AutoMap.WIDGET_AutoMap_C.UpdateAutoMapMousePanning
// 0x0018 (0x0018 - 0x0000)
struct WIDGET_AutoMap_C_UpdateAutoMapMousePanning final
{
public:
	struct FVector2D                              PanDriftTexCoordDelta;                             // 0x0000(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector2D                              CallFunc_Add_Vector2DVector2D_ReturnValue;         // 0x0008(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector2D                              CallFunc_Subtract_Vector2DVector2D_ReturnValue;    // 0x0010(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(WIDGET_AutoMap_C_UpdateAutoMapMousePanning) == 0x000004, "Wrong alignment on WIDGET_AutoMap_C_UpdateAutoMapMousePanning");
static_assert(sizeof(WIDGET_AutoMap_C_UpdateAutoMapMousePanning) == 0x000018, "Wrong size on WIDGET_AutoMap_C_UpdateAutoMapMousePanning");
static_assert(offsetof(WIDGET_AutoMap_C_UpdateAutoMapMousePanning, PanDriftTexCoordDelta) == 0x000000, "Member 'WIDGET_AutoMap_C_UpdateAutoMapMousePanning::PanDriftTexCoordDelta' has a wrong offset!");
static_assert(offsetof(WIDGET_AutoMap_C_UpdateAutoMapMousePanning, CallFunc_Add_Vector2DVector2D_ReturnValue) == 0x000008, "Member 'WIDGET_AutoMap_C_UpdateAutoMapMousePanning::CallFunc_Add_Vector2DVector2D_ReturnValue' has a wrong offset!");
static_assert(offsetof(WIDGET_AutoMap_C_UpdateAutoMapMousePanning, CallFunc_Subtract_Vector2DVector2D_ReturnValue) == 0x000010, "Member 'WIDGET_AutoMap_C_UpdateAutoMapMousePanning::CallFunc_Subtract_Vector2DVector2D_ReturnValue' has a wrong offset!");

// Function WIDGET_AutoMap.WIDGET_AutoMap_C.ReceiveGamepadZoomInput
// 0x0028 (0x0028 - 0x0000)
struct WIDGET_AutoMap_C_ReceiveGamepadZoomInput final
{
public:
	bool                                          ZoomIn;                                            // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Temp_bool_Variable;                                // 0x0001(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_2[0x2];                                        // 0x0002(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         Temp_float_Variable;                               // 0x0004(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Temp_float_Variable_1;                             // 0x0008(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         K2Node_Select_Default;                             // 0x000C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Add_FloatFloat_ReturnValue;               // 0x0010(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_FClamp_ReturnValue;                       // 0x0014(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Ease_ReturnValue;                         // 0x0018(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1C[0x4];                                       // 0x001C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class USceneCaptureComponent2D*               CallFunc_GetCaptureComponent_CaptureComponent;     // 0x0020(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(WIDGET_AutoMap_C_ReceiveGamepadZoomInput) == 0x000008, "Wrong alignment on WIDGET_AutoMap_C_ReceiveGamepadZoomInput");
static_assert(sizeof(WIDGET_AutoMap_C_ReceiveGamepadZoomInput) == 0x000028, "Wrong size on WIDGET_AutoMap_C_ReceiveGamepadZoomInput");
static_assert(offsetof(WIDGET_AutoMap_C_ReceiveGamepadZoomInput, ZoomIn) == 0x000000, "Member 'WIDGET_AutoMap_C_ReceiveGamepadZoomInput::ZoomIn' has a wrong offset!");
static_assert(offsetof(WIDGET_AutoMap_C_ReceiveGamepadZoomInput, Temp_bool_Variable) == 0x000001, "Member 'WIDGET_AutoMap_C_ReceiveGamepadZoomInput::Temp_bool_Variable' has a wrong offset!");
static_assert(offsetof(WIDGET_AutoMap_C_ReceiveGamepadZoomInput, Temp_float_Variable) == 0x000004, "Member 'WIDGET_AutoMap_C_ReceiveGamepadZoomInput::Temp_float_Variable' has a wrong offset!");
static_assert(offsetof(WIDGET_AutoMap_C_ReceiveGamepadZoomInput, Temp_float_Variable_1) == 0x000008, "Member 'WIDGET_AutoMap_C_ReceiveGamepadZoomInput::Temp_float_Variable_1' has a wrong offset!");
static_assert(offsetof(WIDGET_AutoMap_C_ReceiveGamepadZoomInput, K2Node_Select_Default) == 0x00000C, "Member 'WIDGET_AutoMap_C_ReceiveGamepadZoomInput::K2Node_Select_Default' has a wrong offset!");
static_assert(offsetof(WIDGET_AutoMap_C_ReceiveGamepadZoomInput, CallFunc_Add_FloatFloat_ReturnValue) == 0x000010, "Member 'WIDGET_AutoMap_C_ReceiveGamepadZoomInput::CallFunc_Add_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(WIDGET_AutoMap_C_ReceiveGamepadZoomInput, CallFunc_FClamp_ReturnValue) == 0x000014, "Member 'WIDGET_AutoMap_C_ReceiveGamepadZoomInput::CallFunc_FClamp_ReturnValue' has a wrong offset!");
static_assert(offsetof(WIDGET_AutoMap_C_ReceiveGamepadZoomInput, CallFunc_Ease_ReturnValue) == 0x000018, "Member 'WIDGET_AutoMap_C_ReceiveGamepadZoomInput::CallFunc_Ease_ReturnValue' has a wrong offset!");
static_assert(offsetof(WIDGET_AutoMap_C_ReceiveGamepadZoomInput, CallFunc_GetCaptureComponent_CaptureComponent) == 0x000020, "Member 'WIDGET_AutoMap_C_ReceiveGamepadZoomInput::CallFunc_GetCaptureComponent_CaptureComponent' has a wrong offset!");

// Function WIDGET_AutoMap.WIDGET_AutoMap_C.UpdateAutoMapMouseZoom
// 0x0110 (0x0110 - 0x0000)
struct WIDGET_AutoMap_C_UpdateAutoMapMouseZoom final
{
public:
	float                                         DeltaTime;                                         // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          ValidZoomTexCoords;                                // 0x0004(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                TargetZoomWorldLocation;                           // 0x0008(0x000C)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                SourceZoomWorldLocation;                           // 0x0014(0x000C)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector2D                              ZoomPositionTexCoord;                              // 0x0020(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class USceneCaptureComponent2D*               CallFunc_GetCaptureComponent_CaptureComponent;     // 0x0028(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_FInterpTo_ReturnValue;                    // 0x0030(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_GetWorldLocationFromTextureCoords_WorldLocation; // 0x0034(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_NearlyEqual_FloatFloat_ReturnValue;       // 0x0040(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_41[0x3];                                       // 0x0041(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                CallFunc_Subtract_VectorVector_ReturnValue;        // 0x0044(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_GetWorldLocationFromTextureCoords_WorldLocation_1; // 0x0050(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FHitResult                             CallFunc_K2_AddWorldOffset_SweepHitResult;         // 0x005C(0x0088)(IsPlainOldData, NoDestructor, ContainsInstancedReference)
	bool                                          CallFunc_GetTextureCoordsFromScreenPoint_ValidCoords; // 0x00E4(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_E5[0x3];                                       // 0x00E5(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector2D                              CallFunc_GetTextureCoordsFromScreenPoint_TexCoords; // 0x00E8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Ease_ReturnValue;                         // 0x00F0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_F4[0x4];                                       // 0x00F4(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class USceneCaptureComponent2D*               CallFunc_GetCaptureComponent_CaptureComponent_1;   // 0x00F8(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Multiply_FloatFloat_ReturnValue;          // 0x0100(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Add_FloatFloat_ReturnValue;               // 0x0104(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_FClamp_ReturnValue;                       // 0x0108(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(WIDGET_AutoMap_C_UpdateAutoMapMouseZoom) == 0x000008, "Wrong alignment on WIDGET_AutoMap_C_UpdateAutoMapMouseZoom");
static_assert(sizeof(WIDGET_AutoMap_C_UpdateAutoMapMouseZoom) == 0x000110, "Wrong size on WIDGET_AutoMap_C_UpdateAutoMapMouseZoom");
static_assert(offsetof(WIDGET_AutoMap_C_UpdateAutoMapMouseZoom, DeltaTime) == 0x000000, "Member 'WIDGET_AutoMap_C_UpdateAutoMapMouseZoom::DeltaTime' has a wrong offset!");
static_assert(offsetof(WIDGET_AutoMap_C_UpdateAutoMapMouseZoom, ValidZoomTexCoords) == 0x000004, "Member 'WIDGET_AutoMap_C_UpdateAutoMapMouseZoom::ValidZoomTexCoords' has a wrong offset!");
static_assert(offsetof(WIDGET_AutoMap_C_UpdateAutoMapMouseZoom, TargetZoomWorldLocation) == 0x000008, "Member 'WIDGET_AutoMap_C_UpdateAutoMapMouseZoom::TargetZoomWorldLocation' has a wrong offset!");
static_assert(offsetof(WIDGET_AutoMap_C_UpdateAutoMapMouseZoom, SourceZoomWorldLocation) == 0x000014, "Member 'WIDGET_AutoMap_C_UpdateAutoMapMouseZoom::SourceZoomWorldLocation' has a wrong offset!");
static_assert(offsetof(WIDGET_AutoMap_C_UpdateAutoMapMouseZoom, ZoomPositionTexCoord) == 0x000020, "Member 'WIDGET_AutoMap_C_UpdateAutoMapMouseZoom::ZoomPositionTexCoord' has a wrong offset!");
static_assert(offsetof(WIDGET_AutoMap_C_UpdateAutoMapMouseZoom, CallFunc_GetCaptureComponent_CaptureComponent) == 0x000028, "Member 'WIDGET_AutoMap_C_UpdateAutoMapMouseZoom::CallFunc_GetCaptureComponent_CaptureComponent' has a wrong offset!");
static_assert(offsetof(WIDGET_AutoMap_C_UpdateAutoMapMouseZoom, CallFunc_FInterpTo_ReturnValue) == 0x000030, "Member 'WIDGET_AutoMap_C_UpdateAutoMapMouseZoom::CallFunc_FInterpTo_ReturnValue' has a wrong offset!");
static_assert(offsetof(WIDGET_AutoMap_C_UpdateAutoMapMouseZoom, CallFunc_GetWorldLocationFromTextureCoords_WorldLocation) == 0x000034, "Member 'WIDGET_AutoMap_C_UpdateAutoMapMouseZoom::CallFunc_GetWorldLocationFromTextureCoords_WorldLocation' has a wrong offset!");
static_assert(offsetof(WIDGET_AutoMap_C_UpdateAutoMapMouseZoom, CallFunc_NearlyEqual_FloatFloat_ReturnValue) == 0x000040, "Member 'WIDGET_AutoMap_C_UpdateAutoMapMouseZoom::CallFunc_NearlyEqual_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(WIDGET_AutoMap_C_UpdateAutoMapMouseZoom, CallFunc_Subtract_VectorVector_ReturnValue) == 0x000044, "Member 'WIDGET_AutoMap_C_UpdateAutoMapMouseZoom::CallFunc_Subtract_VectorVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(WIDGET_AutoMap_C_UpdateAutoMapMouseZoom, CallFunc_GetWorldLocationFromTextureCoords_WorldLocation_1) == 0x000050, "Member 'WIDGET_AutoMap_C_UpdateAutoMapMouseZoom::CallFunc_GetWorldLocationFromTextureCoords_WorldLocation_1' has a wrong offset!");
static_assert(offsetof(WIDGET_AutoMap_C_UpdateAutoMapMouseZoom, CallFunc_K2_AddWorldOffset_SweepHitResult) == 0x00005C, "Member 'WIDGET_AutoMap_C_UpdateAutoMapMouseZoom::CallFunc_K2_AddWorldOffset_SweepHitResult' has a wrong offset!");
static_assert(offsetof(WIDGET_AutoMap_C_UpdateAutoMapMouseZoom, CallFunc_GetTextureCoordsFromScreenPoint_ValidCoords) == 0x0000E4, "Member 'WIDGET_AutoMap_C_UpdateAutoMapMouseZoom::CallFunc_GetTextureCoordsFromScreenPoint_ValidCoords' has a wrong offset!");
static_assert(offsetof(WIDGET_AutoMap_C_UpdateAutoMapMouseZoom, CallFunc_GetTextureCoordsFromScreenPoint_TexCoords) == 0x0000E8, "Member 'WIDGET_AutoMap_C_UpdateAutoMapMouseZoom::CallFunc_GetTextureCoordsFromScreenPoint_TexCoords' has a wrong offset!");
static_assert(offsetof(WIDGET_AutoMap_C_UpdateAutoMapMouseZoom, CallFunc_Ease_ReturnValue) == 0x0000F0, "Member 'WIDGET_AutoMap_C_UpdateAutoMapMouseZoom::CallFunc_Ease_ReturnValue' has a wrong offset!");
static_assert(offsetof(WIDGET_AutoMap_C_UpdateAutoMapMouseZoom, CallFunc_GetCaptureComponent_CaptureComponent_1) == 0x0000F8, "Member 'WIDGET_AutoMap_C_UpdateAutoMapMouseZoom::CallFunc_GetCaptureComponent_CaptureComponent_1' has a wrong offset!");
static_assert(offsetof(WIDGET_AutoMap_C_UpdateAutoMapMouseZoom, CallFunc_Multiply_FloatFloat_ReturnValue) == 0x000100, "Member 'WIDGET_AutoMap_C_UpdateAutoMapMouseZoom::CallFunc_Multiply_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(WIDGET_AutoMap_C_UpdateAutoMapMouseZoom, CallFunc_Add_FloatFloat_ReturnValue) == 0x000104, "Member 'WIDGET_AutoMap_C_UpdateAutoMapMouseZoom::CallFunc_Add_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(WIDGET_AutoMap_C_UpdateAutoMapMouseZoom, CallFunc_FClamp_ReturnValue) == 0x000108, "Member 'WIDGET_AutoMap_C_UpdateAutoMapMouseZoom::CallFunc_FClamp_ReturnValue' has a wrong offset!");

// Function WIDGET_AutoMap.WIDGET_AutoMap_C.InitializeAutoMap
// 0x0040 (0x0040 - 0x0000)
struct WIDGET_AutoMap_C_InitializeAutoMap final
{
public:
	class UWIDGET_PlayerHUD_C*                    HUD;                                               // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UGI_SinglePlayer_C*                     GameInstance;                                      // 0x0008(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TDelegate<void(class FName StoryQuestName, bool Value)> K2Node_CreateDelegate_OutputDelegate;              // 0x0010(0x0010)(ZeroConstructor, NoDestructor)
	ENUM_GameDifficulty                           CallFunc_GetDifficultyByType_Difficulty;           // 0x0020(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_ByteByte_ReturnValue;          // 0x0021(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_22[0x6];                                       // 0x0022(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class UGameInstance*                          CallFunc_GetGameInstance_ReturnValue;              // 0x0028(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UGI_SinglePlayer_C*                     K2Node_DynamicCast_AsGI_Single_Player;             // 0x0030(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0038(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(WIDGET_AutoMap_C_InitializeAutoMap) == 0x000008, "Wrong alignment on WIDGET_AutoMap_C_InitializeAutoMap");
static_assert(sizeof(WIDGET_AutoMap_C_InitializeAutoMap) == 0x000040, "Wrong size on WIDGET_AutoMap_C_InitializeAutoMap");
static_assert(offsetof(WIDGET_AutoMap_C_InitializeAutoMap, HUD) == 0x000000, "Member 'WIDGET_AutoMap_C_InitializeAutoMap::HUD' has a wrong offset!");
static_assert(offsetof(WIDGET_AutoMap_C_InitializeAutoMap, GameInstance) == 0x000008, "Member 'WIDGET_AutoMap_C_InitializeAutoMap::GameInstance' has a wrong offset!");
static_assert(offsetof(WIDGET_AutoMap_C_InitializeAutoMap, K2Node_CreateDelegate_OutputDelegate) == 0x000010, "Member 'WIDGET_AutoMap_C_InitializeAutoMap::K2Node_CreateDelegate_OutputDelegate' has a wrong offset!");
static_assert(offsetof(WIDGET_AutoMap_C_InitializeAutoMap, CallFunc_GetDifficultyByType_Difficulty) == 0x000020, "Member 'WIDGET_AutoMap_C_InitializeAutoMap::CallFunc_GetDifficultyByType_Difficulty' has a wrong offset!");
static_assert(offsetof(WIDGET_AutoMap_C_InitializeAutoMap, CallFunc_EqualEqual_ByteByte_ReturnValue) == 0x000021, "Member 'WIDGET_AutoMap_C_InitializeAutoMap::CallFunc_EqualEqual_ByteByte_ReturnValue' has a wrong offset!");
static_assert(offsetof(WIDGET_AutoMap_C_InitializeAutoMap, CallFunc_GetGameInstance_ReturnValue) == 0x000028, "Member 'WIDGET_AutoMap_C_InitializeAutoMap::CallFunc_GetGameInstance_ReturnValue' has a wrong offset!");
static_assert(offsetof(WIDGET_AutoMap_C_InitializeAutoMap, K2Node_DynamicCast_AsGI_Single_Player) == 0x000030, "Member 'WIDGET_AutoMap_C_InitializeAutoMap::K2Node_DynamicCast_AsGI_Single_Player' has a wrong offset!");
static_assert(offsetof(WIDGET_AutoMap_C_InitializeAutoMap, K2Node_DynamicCast_bSuccess) == 0x000038, "Member 'WIDGET_AutoMap_C_InitializeAutoMap::K2Node_DynamicCast_bSuccess' has a wrong offset!");

// Function WIDGET_AutoMap.WIDGET_AutoMap_C.SetAutoMapVisibility
// 0x0030 (0x0030 - 0x0000)
struct WIDGET_AutoMap_C_SetAutoMapVisibility final
{
public:
	bool                                          Visibility_0;                                      // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UGI_SinglePlayer_C*                     GameInstance;                                      // 0x0008(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FName                                   CallFunc_GetCurrentLevelName_Result;               // 0x0010(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UGameInstance*                          CallFunc_GetGameInstance_ReturnValue;              // 0x0018(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UGI_SinglePlayer_C*                     K2Node_DynamicCast_AsGI_Single_Player;             // 0x0020(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0028(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsScannerEnabled_Result;                  // 0x0029(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(WIDGET_AutoMap_C_SetAutoMapVisibility) == 0x000008, "Wrong alignment on WIDGET_AutoMap_C_SetAutoMapVisibility");
static_assert(sizeof(WIDGET_AutoMap_C_SetAutoMapVisibility) == 0x000030, "Wrong size on WIDGET_AutoMap_C_SetAutoMapVisibility");
static_assert(offsetof(WIDGET_AutoMap_C_SetAutoMapVisibility, Visibility_0) == 0x000000, "Member 'WIDGET_AutoMap_C_SetAutoMapVisibility::Visibility_0' has a wrong offset!");
static_assert(offsetof(WIDGET_AutoMap_C_SetAutoMapVisibility, GameInstance) == 0x000008, "Member 'WIDGET_AutoMap_C_SetAutoMapVisibility::GameInstance' has a wrong offset!");
static_assert(offsetof(WIDGET_AutoMap_C_SetAutoMapVisibility, CallFunc_GetCurrentLevelName_Result) == 0x000010, "Member 'WIDGET_AutoMap_C_SetAutoMapVisibility::CallFunc_GetCurrentLevelName_Result' has a wrong offset!");
static_assert(offsetof(WIDGET_AutoMap_C_SetAutoMapVisibility, CallFunc_GetGameInstance_ReturnValue) == 0x000018, "Member 'WIDGET_AutoMap_C_SetAutoMapVisibility::CallFunc_GetGameInstance_ReturnValue' has a wrong offset!");
static_assert(offsetof(WIDGET_AutoMap_C_SetAutoMapVisibility, K2Node_DynamicCast_AsGI_Single_Player) == 0x000020, "Member 'WIDGET_AutoMap_C_SetAutoMapVisibility::K2Node_DynamicCast_AsGI_Single_Player' has a wrong offset!");
static_assert(offsetof(WIDGET_AutoMap_C_SetAutoMapVisibility, K2Node_DynamicCast_bSuccess) == 0x000028, "Member 'WIDGET_AutoMap_C_SetAutoMapVisibility::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(WIDGET_AutoMap_C_SetAutoMapVisibility, CallFunc_IsScannerEnabled_Result) == 0x000029, "Member 'WIDGET_AutoMap_C_SetAutoMapVisibility::CallFunc_IsScannerEnabled_Result' has a wrong offset!");

// Function WIDGET_AutoMap.WIDGET_AutoMap_C.GetCaptureComponent
// 0x0028 (0x0028 - 0x0000)
struct WIDGET_AutoMap_C_GetCaptureComponent final
{
public:
	class USceneCaptureComponent2D*               CaptureComponent;                                  // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class APawn*                                  CallFunc_GetPlayerPawn_ReturnValue;                // 0x0008(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class APAWN_Hacker_Implant_C*                 K2Node_DynamicCast_AsPAWN_Hacker_Implant;          // 0x0010(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0018(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_19[0x7];                                       // 0x0019(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class USceneCaptureComponent2D*               CallFunc_GetSceneCaptureComponent_ReturnValue;     // 0x0020(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(WIDGET_AutoMap_C_GetCaptureComponent) == 0x000008, "Wrong alignment on WIDGET_AutoMap_C_GetCaptureComponent");
static_assert(sizeof(WIDGET_AutoMap_C_GetCaptureComponent) == 0x000028, "Wrong size on WIDGET_AutoMap_C_GetCaptureComponent");
static_assert(offsetof(WIDGET_AutoMap_C_GetCaptureComponent, CaptureComponent) == 0x000000, "Member 'WIDGET_AutoMap_C_GetCaptureComponent::CaptureComponent' has a wrong offset!");
static_assert(offsetof(WIDGET_AutoMap_C_GetCaptureComponent, CallFunc_GetPlayerPawn_ReturnValue) == 0x000008, "Member 'WIDGET_AutoMap_C_GetCaptureComponent::CallFunc_GetPlayerPawn_ReturnValue' has a wrong offset!");
static_assert(offsetof(WIDGET_AutoMap_C_GetCaptureComponent, K2Node_DynamicCast_AsPAWN_Hacker_Implant) == 0x000010, "Member 'WIDGET_AutoMap_C_GetCaptureComponent::K2Node_DynamicCast_AsPAWN_Hacker_Implant' has a wrong offset!");
static_assert(offsetof(WIDGET_AutoMap_C_GetCaptureComponent, K2Node_DynamicCast_bSuccess) == 0x000018, "Member 'WIDGET_AutoMap_C_GetCaptureComponent::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(WIDGET_AutoMap_C_GetCaptureComponent, CallFunc_GetSceneCaptureComponent_ReturnValue) == 0x000020, "Member 'WIDGET_AutoMap_C_GetCaptureComponent::CallFunc_GetSceneCaptureComponent_ReturnValue' has a wrong offset!");

// Function WIDGET_AutoMap.WIDGET_AutoMap_C.EVENT_OnMouseDown
// 0x0340 (0x0340 - 0x0000)
struct WIDGET_AutoMap_C_EVENT_OnMouseDown final
{
public:
	struct FGeometry                              MyGeometry;                                        // 0x0000(0x0038)(BlueprintVisible, BlueprintReadOnly, Parm, IsPlainOldData, NoDestructor)
	struct FPointerEvent                          MouseEvent;                                        // 0x0038(0x0070)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
	struct FEventReply                            ReturnValue;                                       // 0x00A8(0x00B8)(Parm, OutParm, ReturnParm)
	struct FVector2D                              CallFunc_PointerEvent_GetScreenSpacePosition_ReturnValue; // 0x0160(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_GetWorldPositionFromMousePosition_WorldLocation; // 0x0168(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_174[0x4];                                      // 0x0174(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FEventReply                            CallFunc_Handled_ReturnValue;                      // 0x0178(0x00B8)()
	bool                                          CallFunc_Not_PreBool_ReturnValue;                  // 0x0230(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_231[0x7];                                      // 0x0231(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FKey                                   CallFunc_PointerEvent_GetEffectingButton_ReturnValue; // 0x0238(0x0018)(HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_KeyKey_ReturnValue;            // 0x0250(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_251[0x7];                                      // 0x0251(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FKey                                   CallFunc_PointerEvent_GetEffectingButton_ReturnValue_1; // 0x0258(0x0018)(HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_KeyKey_ReturnValue_1;          // 0x0270(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BooleanOR_ReturnValue;                    // 0x0271(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_272[0x2];                                      // 0x0272(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector2D                              CallFunc_PointerEvent_GetScreenSpacePosition_ReturnValue_1; // 0x0274(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_GetTextureCoordsFromScreenPoint_ValidCoords; // 0x027C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_27D[0x3];                                      // 0x027D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector2D                              CallFunc_GetTextureCoordsFromScreenPoint_TexCoords; // 0x0280(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FEventReply                            CallFunc_Unhandled_ReturnValue;                    // 0x0288(0x00B8)()
};
static_assert(alignof(WIDGET_AutoMap_C_EVENT_OnMouseDown) == 0x000008, "Wrong alignment on WIDGET_AutoMap_C_EVENT_OnMouseDown");
static_assert(sizeof(WIDGET_AutoMap_C_EVENT_OnMouseDown) == 0x000340, "Wrong size on WIDGET_AutoMap_C_EVENT_OnMouseDown");
static_assert(offsetof(WIDGET_AutoMap_C_EVENT_OnMouseDown, MyGeometry) == 0x000000, "Member 'WIDGET_AutoMap_C_EVENT_OnMouseDown::MyGeometry' has a wrong offset!");
static_assert(offsetof(WIDGET_AutoMap_C_EVENT_OnMouseDown, MouseEvent) == 0x000038, "Member 'WIDGET_AutoMap_C_EVENT_OnMouseDown::MouseEvent' has a wrong offset!");
static_assert(offsetof(WIDGET_AutoMap_C_EVENT_OnMouseDown, ReturnValue) == 0x0000A8, "Member 'WIDGET_AutoMap_C_EVENT_OnMouseDown::ReturnValue' has a wrong offset!");
static_assert(offsetof(WIDGET_AutoMap_C_EVENT_OnMouseDown, CallFunc_PointerEvent_GetScreenSpacePosition_ReturnValue) == 0x000160, "Member 'WIDGET_AutoMap_C_EVENT_OnMouseDown::CallFunc_PointerEvent_GetScreenSpacePosition_ReturnValue' has a wrong offset!");
static_assert(offsetof(WIDGET_AutoMap_C_EVENT_OnMouseDown, CallFunc_GetWorldPositionFromMousePosition_WorldLocation) == 0x000168, "Member 'WIDGET_AutoMap_C_EVENT_OnMouseDown::CallFunc_GetWorldPositionFromMousePosition_WorldLocation' has a wrong offset!");
static_assert(offsetof(WIDGET_AutoMap_C_EVENT_OnMouseDown, CallFunc_Handled_ReturnValue) == 0x000178, "Member 'WIDGET_AutoMap_C_EVENT_OnMouseDown::CallFunc_Handled_ReturnValue' has a wrong offset!");
static_assert(offsetof(WIDGET_AutoMap_C_EVENT_OnMouseDown, CallFunc_Not_PreBool_ReturnValue) == 0x000230, "Member 'WIDGET_AutoMap_C_EVENT_OnMouseDown::CallFunc_Not_PreBool_ReturnValue' has a wrong offset!");
static_assert(offsetof(WIDGET_AutoMap_C_EVENT_OnMouseDown, CallFunc_PointerEvent_GetEffectingButton_ReturnValue) == 0x000238, "Member 'WIDGET_AutoMap_C_EVENT_OnMouseDown::CallFunc_PointerEvent_GetEffectingButton_ReturnValue' has a wrong offset!");
static_assert(offsetof(WIDGET_AutoMap_C_EVENT_OnMouseDown, CallFunc_EqualEqual_KeyKey_ReturnValue) == 0x000250, "Member 'WIDGET_AutoMap_C_EVENT_OnMouseDown::CallFunc_EqualEqual_KeyKey_ReturnValue' has a wrong offset!");
static_assert(offsetof(WIDGET_AutoMap_C_EVENT_OnMouseDown, CallFunc_PointerEvent_GetEffectingButton_ReturnValue_1) == 0x000258, "Member 'WIDGET_AutoMap_C_EVENT_OnMouseDown::CallFunc_PointerEvent_GetEffectingButton_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(WIDGET_AutoMap_C_EVENT_OnMouseDown, CallFunc_EqualEqual_KeyKey_ReturnValue_1) == 0x000270, "Member 'WIDGET_AutoMap_C_EVENT_OnMouseDown::CallFunc_EqualEqual_KeyKey_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(WIDGET_AutoMap_C_EVENT_OnMouseDown, CallFunc_BooleanOR_ReturnValue) == 0x000271, "Member 'WIDGET_AutoMap_C_EVENT_OnMouseDown::CallFunc_BooleanOR_ReturnValue' has a wrong offset!");
static_assert(offsetof(WIDGET_AutoMap_C_EVENT_OnMouseDown, CallFunc_PointerEvent_GetScreenSpacePosition_ReturnValue_1) == 0x000274, "Member 'WIDGET_AutoMap_C_EVENT_OnMouseDown::CallFunc_PointerEvent_GetScreenSpacePosition_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(WIDGET_AutoMap_C_EVENT_OnMouseDown, CallFunc_GetTextureCoordsFromScreenPoint_ValidCoords) == 0x00027C, "Member 'WIDGET_AutoMap_C_EVENT_OnMouseDown::CallFunc_GetTextureCoordsFromScreenPoint_ValidCoords' has a wrong offset!");
static_assert(offsetof(WIDGET_AutoMap_C_EVENT_OnMouseDown, CallFunc_GetTextureCoordsFromScreenPoint_TexCoords) == 0x000280, "Member 'WIDGET_AutoMap_C_EVENT_OnMouseDown::CallFunc_GetTextureCoordsFromScreenPoint_TexCoords' has a wrong offset!");
static_assert(offsetof(WIDGET_AutoMap_C_EVENT_OnMouseDown, CallFunc_Unhandled_ReturnValue) == 0x000288, "Member 'WIDGET_AutoMap_C_EVENT_OnMouseDown::CallFunc_Unhandled_ReturnValue' has a wrong offset!");

// Function WIDGET_AutoMap.WIDGET_AutoMap_C.EVENT_OnMouseUp
// 0x0318 (0x0318 - 0x0000)
struct WIDGET_AutoMap_C_EVENT_OnMouseUp final
{
public:
	struct FGeometry                              MyGeometry;                                        // 0x0000(0x0038)(BlueprintVisible, BlueprintReadOnly, Parm, IsPlainOldData, NoDestructor)
	struct FPointerEvent                          MouseEvent;                                        // 0x0038(0x0070)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
	struct FEventReply                            ReturnValue;                                       // 0x00A8(0x00B8)(Parm, OutParm, ReturnParm)
	struct FEventReply                            CallFunc_Handled_ReturnValue;                      // 0x0160(0x00B8)()
	bool                                          CallFunc_PointerEvent_IsMouseButtonDown_ReturnValue; // 0x0218(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Not_PreBool_ReturnValue;                  // 0x0219(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_PointerEvent_IsMouseButtonDown_ReturnValue_1; // 0x021A(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Not_PreBool_ReturnValue_1;                // 0x021B(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_21C[0x4];                                      // 0x021C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FKey                                   CallFunc_PointerEvent_GetEffectingButton_ReturnValue; // 0x0220(0x0018)(HasGetValueTypeHash)
	bool                                          CallFunc_BooleanAND_ReturnValue;                   // 0x0238(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_EqualEqual_KeyKey_ReturnValue;            // 0x0239(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_23A[0x6];                                      // 0x023A(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	struct FKey                                   CallFunc_PointerEvent_GetEffectingButton_ReturnValue_1; // 0x0240(0x0018)(HasGetValueTypeHash)
	struct FEventReply                            CallFunc_Unhandled_ReturnValue;                    // 0x0258(0x00B8)()
	bool                                          CallFunc_EqualEqual_KeyKey_ReturnValue_1;          // 0x0310(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BooleanOR_ReturnValue;                    // 0x0311(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BooleanAND_ReturnValue_1;                 // 0x0312(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(WIDGET_AutoMap_C_EVENT_OnMouseUp) == 0x000008, "Wrong alignment on WIDGET_AutoMap_C_EVENT_OnMouseUp");
static_assert(sizeof(WIDGET_AutoMap_C_EVENT_OnMouseUp) == 0x000318, "Wrong size on WIDGET_AutoMap_C_EVENT_OnMouseUp");
static_assert(offsetof(WIDGET_AutoMap_C_EVENT_OnMouseUp, MyGeometry) == 0x000000, "Member 'WIDGET_AutoMap_C_EVENT_OnMouseUp::MyGeometry' has a wrong offset!");
static_assert(offsetof(WIDGET_AutoMap_C_EVENT_OnMouseUp, MouseEvent) == 0x000038, "Member 'WIDGET_AutoMap_C_EVENT_OnMouseUp::MouseEvent' has a wrong offset!");
static_assert(offsetof(WIDGET_AutoMap_C_EVENT_OnMouseUp, ReturnValue) == 0x0000A8, "Member 'WIDGET_AutoMap_C_EVENT_OnMouseUp::ReturnValue' has a wrong offset!");
static_assert(offsetof(WIDGET_AutoMap_C_EVENT_OnMouseUp, CallFunc_Handled_ReturnValue) == 0x000160, "Member 'WIDGET_AutoMap_C_EVENT_OnMouseUp::CallFunc_Handled_ReturnValue' has a wrong offset!");
static_assert(offsetof(WIDGET_AutoMap_C_EVENT_OnMouseUp, CallFunc_PointerEvent_IsMouseButtonDown_ReturnValue) == 0x000218, "Member 'WIDGET_AutoMap_C_EVENT_OnMouseUp::CallFunc_PointerEvent_IsMouseButtonDown_ReturnValue' has a wrong offset!");
static_assert(offsetof(WIDGET_AutoMap_C_EVENT_OnMouseUp, CallFunc_Not_PreBool_ReturnValue) == 0x000219, "Member 'WIDGET_AutoMap_C_EVENT_OnMouseUp::CallFunc_Not_PreBool_ReturnValue' has a wrong offset!");
static_assert(offsetof(WIDGET_AutoMap_C_EVENT_OnMouseUp, CallFunc_PointerEvent_IsMouseButtonDown_ReturnValue_1) == 0x00021A, "Member 'WIDGET_AutoMap_C_EVENT_OnMouseUp::CallFunc_PointerEvent_IsMouseButtonDown_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(WIDGET_AutoMap_C_EVENT_OnMouseUp, CallFunc_Not_PreBool_ReturnValue_1) == 0x00021B, "Member 'WIDGET_AutoMap_C_EVENT_OnMouseUp::CallFunc_Not_PreBool_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(WIDGET_AutoMap_C_EVENT_OnMouseUp, CallFunc_PointerEvent_GetEffectingButton_ReturnValue) == 0x000220, "Member 'WIDGET_AutoMap_C_EVENT_OnMouseUp::CallFunc_PointerEvent_GetEffectingButton_ReturnValue' has a wrong offset!");
static_assert(offsetof(WIDGET_AutoMap_C_EVENT_OnMouseUp, CallFunc_BooleanAND_ReturnValue) == 0x000238, "Member 'WIDGET_AutoMap_C_EVENT_OnMouseUp::CallFunc_BooleanAND_ReturnValue' has a wrong offset!");
static_assert(offsetof(WIDGET_AutoMap_C_EVENT_OnMouseUp, CallFunc_EqualEqual_KeyKey_ReturnValue) == 0x000239, "Member 'WIDGET_AutoMap_C_EVENT_OnMouseUp::CallFunc_EqualEqual_KeyKey_ReturnValue' has a wrong offset!");
static_assert(offsetof(WIDGET_AutoMap_C_EVENT_OnMouseUp, CallFunc_PointerEvent_GetEffectingButton_ReturnValue_1) == 0x000240, "Member 'WIDGET_AutoMap_C_EVENT_OnMouseUp::CallFunc_PointerEvent_GetEffectingButton_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(WIDGET_AutoMap_C_EVENT_OnMouseUp, CallFunc_Unhandled_ReturnValue) == 0x000258, "Member 'WIDGET_AutoMap_C_EVENT_OnMouseUp::CallFunc_Unhandled_ReturnValue' has a wrong offset!");
static_assert(offsetof(WIDGET_AutoMap_C_EVENT_OnMouseUp, CallFunc_EqualEqual_KeyKey_ReturnValue_1) == 0x000310, "Member 'WIDGET_AutoMap_C_EVENT_OnMouseUp::CallFunc_EqualEqual_KeyKey_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(WIDGET_AutoMap_C_EVENT_OnMouseUp, CallFunc_BooleanOR_ReturnValue) == 0x000311, "Member 'WIDGET_AutoMap_C_EVENT_OnMouseUp::CallFunc_BooleanOR_ReturnValue' has a wrong offset!");
static_assert(offsetof(WIDGET_AutoMap_C_EVENT_OnMouseUp, CallFunc_BooleanAND_ReturnValue_1) == 0x000312, "Member 'WIDGET_AutoMap_C_EVENT_OnMouseUp::CallFunc_BooleanAND_ReturnValue_1' has a wrong offset!");

// Function WIDGET_AutoMap.WIDGET_AutoMap_C.EVENT_OnDragRegionMouseMove
// 0x04A8 (0x04A8 - 0x0000)
struct WIDGET_AutoMap_C_EVENT_OnDragRegionMouseMove final
{
public:
	struct FGeometry                              MyGeometry;                                        // 0x0000(0x0038)(BlueprintVisible, BlueprintReadOnly, Parm, IsPlainOldData, NoDestructor)
	struct FPointerEvent                          MouseEvent;                                        // 0x0038(0x0070)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
	struct FEventReply                            ReturnValue;                                       // 0x00A8(0x00B8)(Parm, OutParm, ReturnParm)
	struct FVector2D                              CursorOffsetOnWidget;                              // 0x0160(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FEventReply                            CallFunc_Handled_ReturnValue;                      // 0x0168(0x00B8)()
	struct FEventReply                            CallFunc_Handled_ReturnValue_1;                    // 0x0220(0x00B8)()
	struct FDataTableRowHandle                    K2Node_MakeStruct_DataTableRowHandle;              // 0x02D8(0x0010)(NoDestructor)
	struct FVector2D                              CallFunc_GetWindowPointFromScreenPoint_ReturnValue; // 0x02E8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_GetTriangleIndexAtWindowPointForAnyMesh_OutSubMeshIndex; // 0x02F0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_GetTriangleIndexAtWindowPointForAnyMesh_OutBarycentricCoords; // 0x02F4(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_GetTriangleIndexAtWindowPointForAnyMesh_ReturnValue; // 0x0300(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector2D                              CallFunc_GetUnprojectedTrianglePoint_ReturnValue;  // 0x0304(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector2D_X;                          // 0x030C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector2D_Y;                          // 0x0310(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Multiply_FloatFloat_ReturnValue;          // 0x0314(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector2D                              CallFunc_MakeVector2D_ReturnValue;                 // 0x0318(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_GetTextureCoordsFromScreenPoint_ValidCoords; // 0x0320(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_321[0x3];                                      // 0x0321(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector2D                              CallFunc_GetTextureCoordsFromScreenPoint_TexCoords; // 0x0324(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsScannerEnabled_Result;                  // 0x032C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_32D[0x3];                                      // 0x032D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector2D                              CallFunc_PointerEvent_GetScreenSpacePosition_ReturnValue; // 0x0330(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FEventReply                            CallFunc_Unhandled_ReturnValue;                    // 0x0338(0x00B8)()
	struct FEventReply                            CallFunc_Handled_ReturnValue_2;                    // 0x03F0(0x00B8)()
};
static_assert(alignof(WIDGET_AutoMap_C_EVENT_OnDragRegionMouseMove) == 0x000008, "Wrong alignment on WIDGET_AutoMap_C_EVENT_OnDragRegionMouseMove");
static_assert(sizeof(WIDGET_AutoMap_C_EVENT_OnDragRegionMouseMove) == 0x0004A8, "Wrong size on WIDGET_AutoMap_C_EVENT_OnDragRegionMouseMove");
static_assert(offsetof(WIDGET_AutoMap_C_EVENT_OnDragRegionMouseMove, MyGeometry) == 0x000000, "Member 'WIDGET_AutoMap_C_EVENT_OnDragRegionMouseMove::MyGeometry' has a wrong offset!");
static_assert(offsetof(WIDGET_AutoMap_C_EVENT_OnDragRegionMouseMove, MouseEvent) == 0x000038, "Member 'WIDGET_AutoMap_C_EVENT_OnDragRegionMouseMove::MouseEvent' has a wrong offset!");
static_assert(offsetof(WIDGET_AutoMap_C_EVENT_OnDragRegionMouseMove, ReturnValue) == 0x0000A8, "Member 'WIDGET_AutoMap_C_EVENT_OnDragRegionMouseMove::ReturnValue' has a wrong offset!");
static_assert(offsetof(WIDGET_AutoMap_C_EVENT_OnDragRegionMouseMove, CursorOffsetOnWidget) == 0x000160, "Member 'WIDGET_AutoMap_C_EVENT_OnDragRegionMouseMove::CursorOffsetOnWidget' has a wrong offset!");
static_assert(offsetof(WIDGET_AutoMap_C_EVENT_OnDragRegionMouseMove, CallFunc_Handled_ReturnValue) == 0x000168, "Member 'WIDGET_AutoMap_C_EVENT_OnDragRegionMouseMove::CallFunc_Handled_ReturnValue' has a wrong offset!");
static_assert(offsetof(WIDGET_AutoMap_C_EVENT_OnDragRegionMouseMove, CallFunc_Handled_ReturnValue_1) == 0x000220, "Member 'WIDGET_AutoMap_C_EVENT_OnDragRegionMouseMove::CallFunc_Handled_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(WIDGET_AutoMap_C_EVENT_OnDragRegionMouseMove, K2Node_MakeStruct_DataTableRowHandle) == 0x0002D8, "Member 'WIDGET_AutoMap_C_EVENT_OnDragRegionMouseMove::K2Node_MakeStruct_DataTableRowHandle' has a wrong offset!");
static_assert(offsetof(WIDGET_AutoMap_C_EVENT_OnDragRegionMouseMove, CallFunc_GetWindowPointFromScreenPoint_ReturnValue) == 0x0002E8, "Member 'WIDGET_AutoMap_C_EVENT_OnDragRegionMouseMove::CallFunc_GetWindowPointFromScreenPoint_ReturnValue' has a wrong offset!");
static_assert(offsetof(WIDGET_AutoMap_C_EVENT_OnDragRegionMouseMove, CallFunc_GetTriangleIndexAtWindowPointForAnyMesh_OutSubMeshIndex) == 0x0002F0, "Member 'WIDGET_AutoMap_C_EVENT_OnDragRegionMouseMove::CallFunc_GetTriangleIndexAtWindowPointForAnyMesh_OutSubMeshIndex' has a wrong offset!");
static_assert(offsetof(WIDGET_AutoMap_C_EVENT_OnDragRegionMouseMove, CallFunc_GetTriangleIndexAtWindowPointForAnyMesh_OutBarycentricCoords) == 0x0002F4, "Member 'WIDGET_AutoMap_C_EVENT_OnDragRegionMouseMove::CallFunc_GetTriangleIndexAtWindowPointForAnyMesh_OutBarycentricCoords' has a wrong offset!");
static_assert(offsetof(WIDGET_AutoMap_C_EVENT_OnDragRegionMouseMove, CallFunc_GetTriangleIndexAtWindowPointForAnyMesh_ReturnValue) == 0x000300, "Member 'WIDGET_AutoMap_C_EVENT_OnDragRegionMouseMove::CallFunc_GetTriangleIndexAtWindowPointForAnyMesh_ReturnValue' has a wrong offset!");
static_assert(offsetof(WIDGET_AutoMap_C_EVENT_OnDragRegionMouseMove, CallFunc_GetUnprojectedTrianglePoint_ReturnValue) == 0x000304, "Member 'WIDGET_AutoMap_C_EVENT_OnDragRegionMouseMove::CallFunc_GetUnprojectedTrianglePoint_ReturnValue' has a wrong offset!");
static_assert(offsetof(WIDGET_AutoMap_C_EVENT_OnDragRegionMouseMove, CallFunc_BreakVector2D_X) == 0x00030C, "Member 'WIDGET_AutoMap_C_EVENT_OnDragRegionMouseMove::CallFunc_BreakVector2D_X' has a wrong offset!");
static_assert(offsetof(WIDGET_AutoMap_C_EVENT_OnDragRegionMouseMove, CallFunc_BreakVector2D_Y) == 0x000310, "Member 'WIDGET_AutoMap_C_EVENT_OnDragRegionMouseMove::CallFunc_BreakVector2D_Y' has a wrong offset!");
static_assert(offsetof(WIDGET_AutoMap_C_EVENT_OnDragRegionMouseMove, CallFunc_Multiply_FloatFloat_ReturnValue) == 0x000314, "Member 'WIDGET_AutoMap_C_EVENT_OnDragRegionMouseMove::CallFunc_Multiply_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(WIDGET_AutoMap_C_EVENT_OnDragRegionMouseMove, CallFunc_MakeVector2D_ReturnValue) == 0x000318, "Member 'WIDGET_AutoMap_C_EVENT_OnDragRegionMouseMove::CallFunc_MakeVector2D_ReturnValue' has a wrong offset!");
static_assert(offsetof(WIDGET_AutoMap_C_EVENT_OnDragRegionMouseMove, CallFunc_GetTextureCoordsFromScreenPoint_ValidCoords) == 0x000320, "Member 'WIDGET_AutoMap_C_EVENT_OnDragRegionMouseMove::CallFunc_GetTextureCoordsFromScreenPoint_ValidCoords' has a wrong offset!");
static_assert(offsetof(WIDGET_AutoMap_C_EVENT_OnDragRegionMouseMove, CallFunc_GetTextureCoordsFromScreenPoint_TexCoords) == 0x000324, "Member 'WIDGET_AutoMap_C_EVENT_OnDragRegionMouseMove::CallFunc_GetTextureCoordsFromScreenPoint_TexCoords' has a wrong offset!");
static_assert(offsetof(WIDGET_AutoMap_C_EVENT_OnDragRegionMouseMove, CallFunc_IsScannerEnabled_Result) == 0x00032C, "Member 'WIDGET_AutoMap_C_EVENT_OnDragRegionMouseMove::CallFunc_IsScannerEnabled_Result' has a wrong offset!");
static_assert(offsetof(WIDGET_AutoMap_C_EVENT_OnDragRegionMouseMove, CallFunc_PointerEvent_GetScreenSpacePosition_ReturnValue) == 0x000330, "Member 'WIDGET_AutoMap_C_EVENT_OnDragRegionMouseMove::CallFunc_PointerEvent_GetScreenSpacePosition_ReturnValue' has a wrong offset!");
static_assert(offsetof(WIDGET_AutoMap_C_EVENT_OnDragRegionMouseMove, CallFunc_Unhandled_ReturnValue) == 0x000338, "Member 'WIDGET_AutoMap_C_EVENT_OnDragRegionMouseMove::CallFunc_Unhandled_ReturnValue' has a wrong offset!");
static_assert(offsetof(WIDGET_AutoMap_C_EVENT_OnDragRegionMouseMove, CallFunc_Handled_ReturnValue_2) == 0x0003F0, "Member 'WIDGET_AutoMap_C_EVENT_OnDragRegionMouseMove::CallFunc_Handled_ReturnValue_2' has a wrong offset!");

// Function WIDGET_AutoMap.WIDGET_AutoMap_C.ResetMouseDetectorSize
// 0x0048 (0x0048 - 0x0000)
struct WIDGET_AutoMap_C_ResetMouseDetectorSize final
{
public:
	class UCanvasPanelSlot*                       CallFunc_SlotAsCanvasSlot_ReturnValue;             // 0x0000(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector2D                              CallFunc_GetSize_ReturnValue;                      // 0x0008(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Conv_IntToFloat_ReturnValue;              // 0x0010(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector2D_X;                          // 0x0014(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector2D_Y;                          // 0x0018(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Conv_IntToFloat_ReturnValue_1;            // 0x001C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Divide_FloatFloat_ReturnValue;            // 0x0020(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Divide_FloatFloat_ReturnValue_1;          // 0x0024(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector2D                              CallFunc_MakeVector2D_ReturnValue;                 // 0x0028(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UCanvasPanelSlot*                       CallFunc_SlotAsCanvasSlot_ReturnValue_1;           // 0x0030(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector2D                              CallFunc_GetViewportSize_ReturnValue;              // 0x0038(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector2D                              CallFunc_Multiply_Vector2DFloat_ReturnValue;       // 0x0040(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(WIDGET_AutoMap_C_ResetMouseDetectorSize) == 0x000008, "Wrong alignment on WIDGET_AutoMap_C_ResetMouseDetectorSize");
static_assert(sizeof(WIDGET_AutoMap_C_ResetMouseDetectorSize) == 0x000048, "Wrong size on WIDGET_AutoMap_C_ResetMouseDetectorSize");
static_assert(offsetof(WIDGET_AutoMap_C_ResetMouseDetectorSize, CallFunc_SlotAsCanvasSlot_ReturnValue) == 0x000000, "Member 'WIDGET_AutoMap_C_ResetMouseDetectorSize::CallFunc_SlotAsCanvasSlot_ReturnValue' has a wrong offset!");
static_assert(offsetof(WIDGET_AutoMap_C_ResetMouseDetectorSize, CallFunc_GetSize_ReturnValue) == 0x000008, "Member 'WIDGET_AutoMap_C_ResetMouseDetectorSize::CallFunc_GetSize_ReturnValue' has a wrong offset!");
static_assert(offsetof(WIDGET_AutoMap_C_ResetMouseDetectorSize, CallFunc_Conv_IntToFloat_ReturnValue) == 0x000010, "Member 'WIDGET_AutoMap_C_ResetMouseDetectorSize::CallFunc_Conv_IntToFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(WIDGET_AutoMap_C_ResetMouseDetectorSize, CallFunc_BreakVector2D_X) == 0x000014, "Member 'WIDGET_AutoMap_C_ResetMouseDetectorSize::CallFunc_BreakVector2D_X' has a wrong offset!");
static_assert(offsetof(WIDGET_AutoMap_C_ResetMouseDetectorSize, CallFunc_BreakVector2D_Y) == 0x000018, "Member 'WIDGET_AutoMap_C_ResetMouseDetectorSize::CallFunc_BreakVector2D_Y' has a wrong offset!");
static_assert(offsetof(WIDGET_AutoMap_C_ResetMouseDetectorSize, CallFunc_Conv_IntToFloat_ReturnValue_1) == 0x00001C, "Member 'WIDGET_AutoMap_C_ResetMouseDetectorSize::CallFunc_Conv_IntToFloat_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(WIDGET_AutoMap_C_ResetMouseDetectorSize, CallFunc_Divide_FloatFloat_ReturnValue) == 0x000020, "Member 'WIDGET_AutoMap_C_ResetMouseDetectorSize::CallFunc_Divide_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(WIDGET_AutoMap_C_ResetMouseDetectorSize, CallFunc_Divide_FloatFloat_ReturnValue_1) == 0x000024, "Member 'WIDGET_AutoMap_C_ResetMouseDetectorSize::CallFunc_Divide_FloatFloat_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(WIDGET_AutoMap_C_ResetMouseDetectorSize, CallFunc_MakeVector2D_ReturnValue) == 0x000028, "Member 'WIDGET_AutoMap_C_ResetMouseDetectorSize::CallFunc_MakeVector2D_ReturnValue' has a wrong offset!");
static_assert(offsetof(WIDGET_AutoMap_C_ResetMouseDetectorSize, CallFunc_SlotAsCanvasSlot_ReturnValue_1) == 0x000030, "Member 'WIDGET_AutoMap_C_ResetMouseDetectorSize::CallFunc_SlotAsCanvasSlot_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(WIDGET_AutoMap_C_ResetMouseDetectorSize, CallFunc_GetViewportSize_ReturnValue) == 0x000038, "Member 'WIDGET_AutoMap_C_ResetMouseDetectorSize::CallFunc_GetViewportSize_ReturnValue' has a wrong offset!");
static_assert(offsetof(WIDGET_AutoMap_C_ResetMouseDetectorSize, CallFunc_Multiply_Vector2DFloat_ReturnValue) == 0x000040, "Member 'WIDGET_AutoMap_C_ResetMouseDetectorSize::CallFunc_Multiply_Vector2DFloat_ReturnValue' has a wrong offset!");

// Function WIDGET_AutoMap.WIDGET_AutoMap_C.EVENT_OnAutoMapMouseEnter
// 0x00A8 (0x00A8 - 0x0000)
struct WIDGET_AutoMap_C_EVENT_OnAutoMapMouseEnter final
{
public:
	struct FGeometry                              MyGeometry;                                        // 0x0000(0x0038)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor)
	struct FPointerEvent                          MouseEvent;                                        // 0x0038(0x0070)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
};
static_assert(alignof(WIDGET_AutoMap_C_EVENT_OnAutoMapMouseEnter) == 0x000008, "Wrong alignment on WIDGET_AutoMap_C_EVENT_OnAutoMapMouseEnter");
static_assert(sizeof(WIDGET_AutoMap_C_EVENT_OnAutoMapMouseEnter) == 0x0000A8, "Wrong size on WIDGET_AutoMap_C_EVENT_OnAutoMapMouseEnter");
static_assert(offsetof(WIDGET_AutoMap_C_EVENT_OnAutoMapMouseEnter, MyGeometry) == 0x000000, "Member 'WIDGET_AutoMap_C_EVENT_OnAutoMapMouseEnter::MyGeometry' has a wrong offset!");
static_assert(offsetof(WIDGET_AutoMap_C_EVENT_OnAutoMapMouseEnter, MouseEvent) == 0x000038, "Member 'WIDGET_AutoMap_C_EVENT_OnAutoMapMouseEnter::MouseEvent' has a wrong offset!");

// Function WIDGET_AutoMap.WIDGET_AutoMap_C.EVENT_OnAutoMapMouseLeave
// 0x0070 (0x0070 - 0x0000)
struct WIDGET_AutoMap_C_EVENT_OnAutoMapMouseLeave final
{
public:
	struct FPointerEvent                          MouseEvent;                                        // 0x0000(0x0070)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
};
static_assert(alignof(WIDGET_AutoMap_C_EVENT_OnAutoMapMouseLeave) == 0x000008, "Wrong alignment on WIDGET_AutoMap_C_EVENT_OnAutoMapMouseLeave");
static_assert(sizeof(WIDGET_AutoMap_C_EVENT_OnAutoMapMouseLeave) == 0x000070, "Wrong size on WIDGET_AutoMap_C_EVENT_OnAutoMapMouseLeave");
static_assert(offsetof(WIDGET_AutoMap_C_EVENT_OnAutoMapMouseLeave, MouseEvent) == 0x000000, "Member 'WIDGET_AutoMap_C_EVENT_OnAutoMapMouseLeave::MouseEvent' has a wrong offset!");

// Function WIDGET_AutoMap.WIDGET_AutoMap_C.UpdateMapRegionPopup
// 0x0150 (0x0150 - 0x0000)
struct WIDGET_AutoMap_C_UpdateMapRegionPopup final
{
public:
	struct FVector2D                              CursorOffsetOnWidget;                              // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector2D                              CursorLocationOnWidget;                            // 0x0008(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FSTRUCT_ScannableRegionData            RegionData;                                        // 0x0010(0x0030)(Edit, BlueprintVisible, HasGetValueTypeHash)
	struct FVector                                CursorWorldLocation;                               // 0x0040(0x000C)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_4C[0x4];                                       // 0x004C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UPanelWidget*                           CallFunc_GetParent_ReturnValue;                    // 0x0050(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FGeometry                              CallFunc_GetCachedGeometry_ReturnValue;            // 0x0058(0x0038)(ConstParm, IsPlainOldData, NoDestructor)
	struct FVector2D                              CallFunc_GetLocalSize_ReturnValue;                 // 0x0090(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UCanvasPanelSlot*                       CallFunc_SlotAsCanvasSlot_ReturnValue;             // 0x0098(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector2D                              CallFunc_Divide_Vector2DFloat_ReturnValue;         // 0x00A0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector2D                              CallFunc_GetBestRegionLabelOffset_Alignment;       // 0x00A8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector2D                              CallFunc_GetBestRegionLabelOffset_Offset;          // 0x00B0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector2D                              CallFunc_Add_Vector2DVector2D_ReturnValue;         // 0x00B8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UCanvasPanelSlot*                       CallFunc_SlotAsCanvasSlot_ReturnValue_1;           // 0x00C0(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector2D                              CallFunc_Add_Vector2DVector2D_ReturnValue_1;       // 0x00C8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class APawn*                                  CallFunc_GetPlayerPawn_ReturnValue;                // 0x00D0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class APAWN_Hacker_Implant_C*                 K2Node_DynamicCast_AsPAWN_Hacker_Implant;          // 0x00D8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x00E0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_E1[0x7];                                       // 0x00E1(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FSTRUCT_ScannableRegionData            CallFunc_GetDataTableRowFromName_OutRow;           // 0x00E8(0x0030)(HasGetValueTypeHash)
	bool                                          CallFunc_GetDataTableRowFromName_ReturnValue;      // 0x0118(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_119[0x7];                                      // 0x0119(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FDataTableRowHandle                    CallFunc_GetRegionAtWorldLocation_ReturnValue;     // 0x0120(0x0010)(NoDestructor)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0130(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_GetTextureCoordsFromScreenPoint_ValidCoords; // 0x0131(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_132[0x2];                                      // 0x0132(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector2D                              CallFunc_GetTextureCoordsFromScreenPoint_TexCoords; // 0x0134(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_GetWorldLocationFromTextureCoords_WorldLocation; // 0x013C(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UCanvasPanelSlot*                       CallFunc_SlotAsCanvasSlot_ReturnValue_2;           // 0x0148(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(WIDGET_AutoMap_C_UpdateMapRegionPopup) == 0x000008, "Wrong alignment on WIDGET_AutoMap_C_UpdateMapRegionPopup");
static_assert(sizeof(WIDGET_AutoMap_C_UpdateMapRegionPopup) == 0x000150, "Wrong size on WIDGET_AutoMap_C_UpdateMapRegionPopup");
static_assert(offsetof(WIDGET_AutoMap_C_UpdateMapRegionPopup, CursorOffsetOnWidget) == 0x000000, "Member 'WIDGET_AutoMap_C_UpdateMapRegionPopup::CursorOffsetOnWidget' has a wrong offset!");
static_assert(offsetof(WIDGET_AutoMap_C_UpdateMapRegionPopup, CursorLocationOnWidget) == 0x000008, "Member 'WIDGET_AutoMap_C_UpdateMapRegionPopup::CursorLocationOnWidget' has a wrong offset!");
static_assert(offsetof(WIDGET_AutoMap_C_UpdateMapRegionPopup, RegionData) == 0x000010, "Member 'WIDGET_AutoMap_C_UpdateMapRegionPopup::RegionData' has a wrong offset!");
static_assert(offsetof(WIDGET_AutoMap_C_UpdateMapRegionPopup, CursorWorldLocation) == 0x000040, "Member 'WIDGET_AutoMap_C_UpdateMapRegionPopup::CursorWorldLocation' has a wrong offset!");
static_assert(offsetof(WIDGET_AutoMap_C_UpdateMapRegionPopup, CallFunc_GetParent_ReturnValue) == 0x000050, "Member 'WIDGET_AutoMap_C_UpdateMapRegionPopup::CallFunc_GetParent_ReturnValue' has a wrong offset!");
static_assert(offsetof(WIDGET_AutoMap_C_UpdateMapRegionPopup, CallFunc_GetCachedGeometry_ReturnValue) == 0x000058, "Member 'WIDGET_AutoMap_C_UpdateMapRegionPopup::CallFunc_GetCachedGeometry_ReturnValue' has a wrong offset!");
static_assert(offsetof(WIDGET_AutoMap_C_UpdateMapRegionPopup, CallFunc_GetLocalSize_ReturnValue) == 0x000090, "Member 'WIDGET_AutoMap_C_UpdateMapRegionPopup::CallFunc_GetLocalSize_ReturnValue' has a wrong offset!");
static_assert(offsetof(WIDGET_AutoMap_C_UpdateMapRegionPopup, CallFunc_SlotAsCanvasSlot_ReturnValue) == 0x000098, "Member 'WIDGET_AutoMap_C_UpdateMapRegionPopup::CallFunc_SlotAsCanvasSlot_ReturnValue' has a wrong offset!");
static_assert(offsetof(WIDGET_AutoMap_C_UpdateMapRegionPopup, CallFunc_Divide_Vector2DFloat_ReturnValue) == 0x0000A0, "Member 'WIDGET_AutoMap_C_UpdateMapRegionPopup::CallFunc_Divide_Vector2DFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(WIDGET_AutoMap_C_UpdateMapRegionPopup, CallFunc_GetBestRegionLabelOffset_Alignment) == 0x0000A8, "Member 'WIDGET_AutoMap_C_UpdateMapRegionPopup::CallFunc_GetBestRegionLabelOffset_Alignment' has a wrong offset!");
static_assert(offsetof(WIDGET_AutoMap_C_UpdateMapRegionPopup, CallFunc_GetBestRegionLabelOffset_Offset) == 0x0000B0, "Member 'WIDGET_AutoMap_C_UpdateMapRegionPopup::CallFunc_GetBestRegionLabelOffset_Offset' has a wrong offset!");
static_assert(offsetof(WIDGET_AutoMap_C_UpdateMapRegionPopup, CallFunc_Add_Vector2DVector2D_ReturnValue) == 0x0000B8, "Member 'WIDGET_AutoMap_C_UpdateMapRegionPopup::CallFunc_Add_Vector2DVector2D_ReturnValue' has a wrong offset!");
static_assert(offsetof(WIDGET_AutoMap_C_UpdateMapRegionPopup, CallFunc_SlotAsCanvasSlot_ReturnValue_1) == 0x0000C0, "Member 'WIDGET_AutoMap_C_UpdateMapRegionPopup::CallFunc_SlotAsCanvasSlot_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(WIDGET_AutoMap_C_UpdateMapRegionPopup, CallFunc_Add_Vector2DVector2D_ReturnValue_1) == 0x0000C8, "Member 'WIDGET_AutoMap_C_UpdateMapRegionPopup::CallFunc_Add_Vector2DVector2D_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(WIDGET_AutoMap_C_UpdateMapRegionPopup, CallFunc_GetPlayerPawn_ReturnValue) == 0x0000D0, "Member 'WIDGET_AutoMap_C_UpdateMapRegionPopup::CallFunc_GetPlayerPawn_ReturnValue' has a wrong offset!");
static_assert(offsetof(WIDGET_AutoMap_C_UpdateMapRegionPopup, K2Node_DynamicCast_AsPAWN_Hacker_Implant) == 0x0000D8, "Member 'WIDGET_AutoMap_C_UpdateMapRegionPopup::K2Node_DynamicCast_AsPAWN_Hacker_Implant' has a wrong offset!");
static_assert(offsetof(WIDGET_AutoMap_C_UpdateMapRegionPopup, K2Node_DynamicCast_bSuccess) == 0x0000E0, "Member 'WIDGET_AutoMap_C_UpdateMapRegionPopup::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(WIDGET_AutoMap_C_UpdateMapRegionPopup, CallFunc_GetDataTableRowFromName_OutRow) == 0x0000E8, "Member 'WIDGET_AutoMap_C_UpdateMapRegionPopup::CallFunc_GetDataTableRowFromName_OutRow' has a wrong offset!");
static_assert(offsetof(WIDGET_AutoMap_C_UpdateMapRegionPopup, CallFunc_GetDataTableRowFromName_ReturnValue) == 0x000118, "Member 'WIDGET_AutoMap_C_UpdateMapRegionPopup::CallFunc_GetDataTableRowFromName_ReturnValue' has a wrong offset!");
static_assert(offsetof(WIDGET_AutoMap_C_UpdateMapRegionPopup, CallFunc_GetRegionAtWorldLocation_ReturnValue) == 0x000120, "Member 'WIDGET_AutoMap_C_UpdateMapRegionPopup::CallFunc_GetRegionAtWorldLocation_ReturnValue' has a wrong offset!");
static_assert(offsetof(WIDGET_AutoMap_C_UpdateMapRegionPopup, CallFunc_IsValid_ReturnValue) == 0x000130, "Member 'WIDGET_AutoMap_C_UpdateMapRegionPopup::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(WIDGET_AutoMap_C_UpdateMapRegionPopup, CallFunc_GetTextureCoordsFromScreenPoint_ValidCoords) == 0x000131, "Member 'WIDGET_AutoMap_C_UpdateMapRegionPopup::CallFunc_GetTextureCoordsFromScreenPoint_ValidCoords' has a wrong offset!");
static_assert(offsetof(WIDGET_AutoMap_C_UpdateMapRegionPopup, CallFunc_GetTextureCoordsFromScreenPoint_TexCoords) == 0x000134, "Member 'WIDGET_AutoMap_C_UpdateMapRegionPopup::CallFunc_GetTextureCoordsFromScreenPoint_TexCoords' has a wrong offset!");
static_assert(offsetof(WIDGET_AutoMap_C_UpdateMapRegionPopup, CallFunc_GetWorldLocationFromTextureCoords_WorldLocation) == 0x00013C, "Member 'WIDGET_AutoMap_C_UpdateMapRegionPopup::CallFunc_GetWorldLocationFromTextureCoords_WorldLocation' has a wrong offset!");
static_assert(offsetof(WIDGET_AutoMap_C_UpdateMapRegionPopup, CallFunc_SlotAsCanvasSlot_ReturnValue_2) == 0x000148, "Member 'WIDGET_AutoMap_C_UpdateMapRegionPopup::CallFunc_SlotAsCanvasSlot_ReturnValue_2' has a wrong offset!");

// Function WIDGET_AutoMap.WIDGET_AutoMap_C.IsScannerEnabled
// 0x0020 (0x0020 - 0x0000)
struct WIDGET_AutoMap_C_IsScannerEnabled final
{
public:
	bool                                          Result;                                            // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class APawn*                                  CallFunc_GetPlayerPawn_ReturnValue;                // 0x0008(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class APAWN_Hacker_Implant_C*                 K2Node_DynamicCast_AsPAWN_Hacker_Implant;          // 0x0010(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0018(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(WIDGET_AutoMap_C_IsScannerEnabled) == 0x000008, "Wrong alignment on WIDGET_AutoMap_C_IsScannerEnabled");
static_assert(sizeof(WIDGET_AutoMap_C_IsScannerEnabled) == 0x000020, "Wrong size on WIDGET_AutoMap_C_IsScannerEnabled");
static_assert(offsetof(WIDGET_AutoMap_C_IsScannerEnabled, Result) == 0x000000, "Member 'WIDGET_AutoMap_C_IsScannerEnabled::Result' has a wrong offset!");
static_assert(offsetof(WIDGET_AutoMap_C_IsScannerEnabled, CallFunc_GetPlayerPawn_ReturnValue) == 0x000008, "Member 'WIDGET_AutoMap_C_IsScannerEnabled::CallFunc_GetPlayerPawn_ReturnValue' has a wrong offset!");
static_assert(offsetof(WIDGET_AutoMap_C_IsScannerEnabled, K2Node_DynamicCast_AsPAWN_Hacker_Implant) == 0x000010, "Member 'WIDGET_AutoMap_C_IsScannerEnabled::K2Node_DynamicCast_AsPAWN_Hacker_Implant' has a wrong offset!");
static_assert(offsetof(WIDGET_AutoMap_C_IsScannerEnabled, K2Node_DynamicCast_bSuccess) == 0x000018, "Member 'WIDGET_AutoMap_C_IsScannerEnabled::K2Node_DynamicCast_bSuccess' has a wrong offset!");

// Function WIDGET_AutoMap.WIDGET_AutoMap_C.UpdateMapRegionVisibility
// 0x0020 (0x0020 - 0x0000)
struct WIDGET_AutoMap_C_UpdateMapRegionVisibility final
{
public:
	bool                                          Show;                                              // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   CallFunc_GetEmptyText_ReturnValue;                 // 0x0008(0x0018)()
};
static_assert(alignof(WIDGET_AutoMap_C_UpdateMapRegionVisibility) == 0x000008, "Wrong alignment on WIDGET_AutoMap_C_UpdateMapRegionVisibility");
static_assert(sizeof(WIDGET_AutoMap_C_UpdateMapRegionVisibility) == 0x000020, "Wrong size on WIDGET_AutoMap_C_UpdateMapRegionVisibility");
static_assert(offsetof(WIDGET_AutoMap_C_UpdateMapRegionVisibility, Show) == 0x000000, "Member 'WIDGET_AutoMap_C_UpdateMapRegionVisibility::Show' has a wrong offset!");
static_assert(offsetof(WIDGET_AutoMap_C_UpdateMapRegionVisibility, CallFunc_GetEmptyText_ReturnValue) == 0x000008, "Member 'WIDGET_AutoMap_C_UpdateMapRegionVisibility::CallFunc_GetEmptyText_ReturnValue' has a wrong offset!");

// Function WIDGET_AutoMap.WIDGET_AutoMap_C.ChangeCursorMode
// 0x0010 (0x0010 - 0x0000)
struct WIDGET_AutoMap_C_ChangeCursorMode final
{
public:
	class UWIDGET_CrosshairCursor_C*              CrosshairCursor;                                   // 0x0000(0x0008)(Edit, BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Variable;                                // 0x0008(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	ENUM_CursorMode                               Temp_byte_Variable;                                // 0x0009(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ENUM_CursorMode                               Temp_byte_Variable_1;                              // 0x000A(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Not_PreBool_ReturnValue;                  // 0x000B(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	ENUM_CursorMode                               K2Node_Select_Default;                             // 0x000C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(WIDGET_AutoMap_C_ChangeCursorMode) == 0x000008, "Wrong alignment on WIDGET_AutoMap_C_ChangeCursorMode");
static_assert(sizeof(WIDGET_AutoMap_C_ChangeCursorMode) == 0x000010, "Wrong size on WIDGET_AutoMap_C_ChangeCursorMode");
static_assert(offsetof(WIDGET_AutoMap_C_ChangeCursorMode, CrosshairCursor) == 0x000000, "Member 'WIDGET_AutoMap_C_ChangeCursorMode::CrosshairCursor' has a wrong offset!");
static_assert(offsetof(WIDGET_AutoMap_C_ChangeCursorMode, Temp_bool_Variable) == 0x000008, "Member 'WIDGET_AutoMap_C_ChangeCursorMode::Temp_bool_Variable' has a wrong offset!");
static_assert(offsetof(WIDGET_AutoMap_C_ChangeCursorMode, Temp_byte_Variable) == 0x000009, "Member 'WIDGET_AutoMap_C_ChangeCursorMode::Temp_byte_Variable' has a wrong offset!");
static_assert(offsetof(WIDGET_AutoMap_C_ChangeCursorMode, Temp_byte_Variable_1) == 0x00000A, "Member 'WIDGET_AutoMap_C_ChangeCursorMode::Temp_byte_Variable_1' has a wrong offset!");
static_assert(offsetof(WIDGET_AutoMap_C_ChangeCursorMode, CallFunc_Not_PreBool_ReturnValue) == 0x00000B, "Member 'WIDGET_AutoMap_C_ChangeCursorMode::CallFunc_Not_PreBool_ReturnValue' has a wrong offset!");
static_assert(offsetof(WIDGET_AutoMap_C_ChangeCursorMode, K2Node_Select_Default) == 0x00000C, "Member 'WIDGET_AutoMap_C_ChangeCursorMode::K2Node_Select_Default' has a wrong offset!");

// Function WIDGET_AutoMap.WIDGET_AutoMap_C.GetTextureCoordsFromScreenPoint
// 0x0068 (0x0068 - 0x0000)
struct WIDGET_AutoMap_C_GetTextureCoordsFromScreenPoint final
{
public:
	struct FVector2D                              ScreenPosition;                                    // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          EntireViewport;                                    // 0x0008(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          ValidCoords;                                       // 0x0009(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_A[0x2];                                        // 0x000A(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector2D                              TexCoords;                                         // 0x000C(0x0008)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         TexCoordIndex;                                     // 0x0014(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UGridMeshWidget*                        GridMeshWidget;                                    // 0x0018(0x0008)(Edit, BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Variable;                                // 0x0020(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_21[0x3];                                       // 0x0021(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Temp_int_Variable;                                 // 0x0024(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Variable_1;                               // 0x0028(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Variable_1;                              // 0x002C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_2D[0x3];                                       // 0x002D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         K2Node_Select_Default;                             // 0x0030(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector2D                              CallFunc_GetWindowPointFromScreenPoint_ReturnValue; // 0x0034(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_3C[0x4];                                       // 0x003C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UGridMeshWidget*                        K2Node_Select_Default_1;                           // 0x0040(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_GetTriangleIndexAtWindowPointForAnyMesh_OutSubMeshIndex; // 0x0048(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_GetTriangleIndexAtWindowPointForAnyMesh_OutBarycentricCoords; // 0x004C(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_GetTriangleIndexAtWindowPointForAnyMesh_ReturnValue; // 0x0058(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector2D                              CallFunc_GetTextureCoordinatesForTrianglePoint_ReturnValue; // 0x005C(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_GreaterEqual_IntInt_ReturnValue;          // 0x0064(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(WIDGET_AutoMap_C_GetTextureCoordsFromScreenPoint) == 0x000008, "Wrong alignment on WIDGET_AutoMap_C_GetTextureCoordsFromScreenPoint");
static_assert(sizeof(WIDGET_AutoMap_C_GetTextureCoordsFromScreenPoint) == 0x000068, "Wrong size on WIDGET_AutoMap_C_GetTextureCoordsFromScreenPoint");
static_assert(offsetof(WIDGET_AutoMap_C_GetTextureCoordsFromScreenPoint, ScreenPosition) == 0x000000, "Member 'WIDGET_AutoMap_C_GetTextureCoordsFromScreenPoint::ScreenPosition' has a wrong offset!");
static_assert(offsetof(WIDGET_AutoMap_C_GetTextureCoordsFromScreenPoint, EntireViewport) == 0x000008, "Member 'WIDGET_AutoMap_C_GetTextureCoordsFromScreenPoint::EntireViewport' has a wrong offset!");
static_assert(offsetof(WIDGET_AutoMap_C_GetTextureCoordsFromScreenPoint, ValidCoords) == 0x000009, "Member 'WIDGET_AutoMap_C_GetTextureCoordsFromScreenPoint::ValidCoords' has a wrong offset!");
static_assert(offsetof(WIDGET_AutoMap_C_GetTextureCoordsFromScreenPoint, TexCoords) == 0x00000C, "Member 'WIDGET_AutoMap_C_GetTextureCoordsFromScreenPoint::TexCoords' has a wrong offset!");
static_assert(offsetof(WIDGET_AutoMap_C_GetTextureCoordsFromScreenPoint, TexCoordIndex) == 0x000014, "Member 'WIDGET_AutoMap_C_GetTextureCoordsFromScreenPoint::TexCoordIndex' has a wrong offset!");
static_assert(offsetof(WIDGET_AutoMap_C_GetTextureCoordsFromScreenPoint, GridMeshWidget) == 0x000018, "Member 'WIDGET_AutoMap_C_GetTextureCoordsFromScreenPoint::GridMeshWidget' has a wrong offset!");
static_assert(offsetof(WIDGET_AutoMap_C_GetTextureCoordsFromScreenPoint, Temp_bool_Variable) == 0x000020, "Member 'WIDGET_AutoMap_C_GetTextureCoordsFromScreenPoint::Temp_bool_Variable' has a wrong offset!");
static_assert(offsetof(WIDGET_AutoMap_C_GetTextureCoordsFromScreenPoint, Temp_int_Variable) == 0x000024, "Member 'WIDGET_AutoMap_C_GetTextureCoordsFromScreenPoint::Temp_int_Variable' has a wrong offset!");
static_assert(offsetof(WIDGET_AutoMap_C_GetTextureCoordsFromScreenPoint, Temp_int_Variable_1) == 0x000028, "Member 'WIDGET_AutoMap_C_GetTextureCoordsFromScreenPoint::Temp_int_Variable_1' has a wrong offset!");
static_assert(offsetof(WIDGET_AutoMap_C_GetTextureCoordsFromScreenPoint, Temp_bool_Variable_1) == 0x00002C, "Member 'WIDGET_AutoMap_C_GetTextureCoordsFromScreenPoint::Temp_bool_Variable_1' has a wrong offset!");
static_assert(offsetof(WIDGET_AutoMap_C_GetTextureCoordsFromScreenPoint, K2Node_Select_Default) == 0x000030, "Member 'WIDGET_AutoMap_C_GetTextureCoordsFromScreenPoint::K2Node_Select_Default' has a wrong offset!");
static_assert(offsetof(WIDGET_AutoMap_C_GetTextureCoordsFromScreenPoint, CallFunc_GetWindowPointFromScreenPoint_ReturnValue) == 0x000034, "Member 'WIDGET_AutoMap_C_GetTextureCoordsFromScreenPoint::CallFunc_GetWindowPointFromScreenPoint_ReturnValue' has a wrong offset!");
static_assert(offsetof(WIDGET_AutoMap_C_GetTextureCoordsFromScreenPoint, K2Node_Select_Default_1) == 0x000040, "Member 'WIDGET_AutoMap_C_GetTextureCoordsFromScreenPoint::K2Node_Select_Default_1' has a wrong offset!");
static_assert(offsetof(WIDGET_AutoMap_C_GetTextureCoordsFromScreenPoint, CallFunc_GetTriangleIndexAtWindowPointForAnyMesh_OutSubMeshIndex) == 0x000048, "Member 'WIDGET_AutoMap_C_GetTextureCoordsFromScreenPoint::CallFunc_GetTriangleIndexAtWindowPointForAnyMesh_OutSubMeshIndex' has a wrong offset!");
static_assert(offsetof(WIDGET_AutoMap_C_GetTextureCoordsFromScreenPoint, CallFunc_GetTriangleIndexAtWindowPointForAnyMesh_OutBarycentricCoords) == 0x00004C, "Member 'WIDGET_AutoMap_C_GetTextureCoordsFromScreenPoint::CallFunc_GetTriangleIndexAtWindowPointForAnyMesh_OutBarycentricCoords' has a wrong offset!");
static_assert(offsetof(WIDGET_AutoMap_C_GetTextureCoordsFromScreenPoint, CallFunc_GetTriangleIndexAtWindowPointForAnyMesh_ReturnValue) == 0x000058, "Member 'WIDGET_AutoMap_C_GetTextureCoordsFromScreenPoint::CallFunc_GetTriangleIndexAtWindowPointForAnyMesh_ReturnValue' has a wrong offset!");
static_assert(offsetof(WIDGET_AutoMap_C_GetTextureCoordsFromScreenPoint, CallFunc_GetTextureCoordinatesForTrianglePoint_ReturnValue) == 0x00005C, "Member 'WIDGET_AutoMap_C_GetTextureCoordsFromScreenPoint::CallFunc_GetTextureCoordinatesForTrianglePoint_ReturnValue' has a wrong offset!");
static_assert(offsetof(WIDGET_AutoMap_C_GetTextureCoordsFromScreenPoint, CallFunc_GreaterEqual_IntInt_ReturnValue) == 0x000064, "Member 'WIDGET_AutoMap_C_GetTextureCoordsFromScreenPoint::CallFunc_GreaterEqual_IntInt_ReturnValue' has a wrong offset!");

// Function WIDGET_AutoMap.WIDGET_AutoMap_C.GetWorldLocationFromTextureCoords
// 0x0060 (0x0060 - 0x0000)
struct WIDGET_AutoMap_C_GetWorldLocationFromTextureCoords final
{
public:
	struct FVector2D                              TexCoords;                                         // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                WorldLocation;                                     // 0x0008(0x000C)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         VisibleOrthoHeight;                                // 0x0014(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         OrthoWidth;                                        // 0x0018(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_GetMapCornerWorldLocation_CornerLocation; // 0x001C(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector2D_X;                          // 0x0028(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector2D_Y;                          // 0x002C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Multiply_FloatFloat_ReturnValue;          // 0x0030(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Multiply_FloatFloat_ReturnValue_1;        // 0x0034(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_MakeVector_ReturnValue;                   // 0x0038(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Add_VectorVector_ReturnValue;             // 0x0044(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Divide_FloatFloat_ReturnValue;            // 0x0050(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_54[0x4];                                       // 0x0054(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class USceneCaptureComponent2D*               CallFunc_GetCaptureComponent_CaptureComponent;     // 0x0058(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(WIDGET_AutoMap_C_GetWorldLocationFromTextureCoords) == 0x000008, "Wrong alignment on WIDGET_AutoMap_C_GetWorldLocationFromTextureCoords");
static_assert(sizeof(WIDGET_AutoMap_C_GetWorldLocationFromTextureCoords) == 0x000060, "Wrong size on WIDGET_AutoMap_C_GetWorldLocationFromTextureCoords");
static_assert(offsetof(WIDGET_AutoMap_C_GetWorldLocationFromTextureCoords, TexCoords) == 0x000000, "Member 'WIDGET_AutoMap_C_GetWorldLocationFromTextureCoords::TexCoords' has a wrong offset!");
static_assert(offsetof(WIDGET_AutoMap_C_GetWorldLocationFromTextureCoords, WorldLocation) == 0x000008, "Member 'WIDGET_AutoMap_C_GetWorldLocationFromTextureCoords::WorldLocation' has a wrong offset!");
static_assert(offsetof(WIDGET_AutoMap_C_GetWorldLocationFromTextureCoords, VisibleOrthoHeight) == 0x000014, "Member 'WIDGET_AutoMap_C_GetWorldLocationFromTextureCoords::VisibleOrthoHeight' has a wrong offset!");
static_assert(offsetof(WIDGET_AutoMap_C_GetWorldLocationFromTextureCoords, OrthoWidth) == 0x000018, "Member 'WIDGET_AutoMap_C_GetWorldLocationFromTextureCoords::OrthoWidth' has a wrong offset!");
static_assert(offsetof(WIDGET_AutoMap_C_GetWorldLocationFromTextureCoords, CallFunc_GetMapCornerWorldLocation_CornerLocation) == 0x00001C, "Member 'WIDGET_AutoMap_C_GetWorldLocationFromTextureCoords::CallFunc_GetMapCornerWorldLocation_CornerLocation' has a wrong offset!");
static_assert(offsetof(WIDGET_AutoMap_C_GetWorldLocationFromTextureCoords, CallFunc_BreakVector2D_X) == 0x000028, "Member 'WIDGET_AutoMap_C_GetWorldLocationFromTextureCoords::CallFunc_BreakVector2D_X' has a wrong offset!");
static_assert(offsetof(WIDGET_AutoMap_C_GetWorldLocationFromTextureCoords, CallFunc_BreakVector2D_Y) == 0x00002C, "Member 'WIDGET_AutoMap_C_GetWorldLocationFromTextureCoords::CallFunc_BreakVector2D_Y' has a wrong offset!");
static_assert(offsetof(WIDGET_AutoMap_C_GetWorldLocationFromTextureCoords, CallFunc_Multiply_FloatFloat_ReturnValue) == 0x000030, "Member 'WIDGET_AutoMap_C_GetWorldLocationFromTextureCoords::CallFunc_Multiply_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(WIDGET_AutoMap_C_GetWorldLocationFromTextureCoords, CallFunc_Multiply_FloatFloat_ReturnValue_1) == 0x000034, "Member 'WIDGET_AutoMap_C_GetWorldLocationFromTextureCoords::CallFunc_Multiply_FloatFloat_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(WIDGET_AutoMap_C_GetWorldLocationFromTextureCoords, CallFunc_MakeVector_ReturnValue) == 0x000038, "Member 'WIDGET_AutoMap_C_GetWorldLocationFromTextureCoords::CallFunc_MakeVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(WIDGET_AutoMap_C_GetWorldLocationFromTextureCoords, CallFunc_Add_VectorVector_ReturnValue) == 0x000044, "Member 'WIDGET_AutoMap_C_GetWorldLocationFromTextureCoords::CallFunc_Add_VectorVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(WIDGET_AutoMap_C_GetWorldLocationFromTextureCoords, CallFunc_Divide_FloatFloat_ReturnValue) == 0x000050, "Member 'WIDGET_AutoMap_C_GetWorldLocationFromTextureCoords::CallFunc_Divide_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(WIDGET_AutoMap_C_GetWorldLocationFromTextureCoords, CallFunc_GetCaptureComponent_CaptureComponent) == 0x000058, "Member 'WIDGET_AutoMap_C_GetWorldLocationFromTextureCoords::CallFunc_GetCaptureComponent_CaptureComponent' has a wrong offset!");

// Function WIDGET_AutoMap.WIDGET_AutoMap_C.UpdateMapCrosshairs
// 0x0038 (0x0038 - 0x0000)
struct WIDGET_AutoMap_C_UpdateMapCrosshairs final
{
public:
	struct FVector2D                              CursorScreenPosition;                              // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector2D                              CursorTexCoord;                                    // 0x0008(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UMaterialInstanceDynamic*               MapDynamicMaterial;                                // 0x0010(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector2D_X;                          // 0x0018(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector2D_Y;                          // 0x001C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UMaterialInstanceDynamic*               CallFunc_ConvertToDynamicMaterialInstance_ReturnValue; // 0x0020(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_GetTextureCoordsFromScreenPoint_ValidCoords; // 0x0028(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_29[0x3];                                       // 0x0029(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector2D                              CallFunc_GetTextureCoordsFromScreenPoint_TexCoords; // 0x002C(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(WIDGET_AutoMap_C_UpdateMapCrosshairs) == 0x000008, "Wrong alignment on WIDGET_AutoMap_C_UpdateMapCrosshairs");
static_assert(sizeof(WIDGET_AutoMap_C_UpdateMapCrosshairs) == 0x000038, "Wrong size on WIDGET_AutoMap_C_UpdateMapCrosshairs");
static_assert(offsetof(WIDGET_AutoMap_C_UpdateMapCrosshairs, CursorScreenPosition) == 0x000000, "Member 'WIDGET_AutoMap_C_UpdateMapCrosshairs::CursorScreenPosition' has a wrong offset!");
static_assert(offsetof(WIDGET_AutoMap_C_UpdateMapCrosshairs, CursorTexCoord) == 0x000008, "Member 'WIDGET_AutoMap_C_UpdateMapCrosshairs::CursorTexCoord' has a wrong offset!");
static_assert(offsetof(WIDGET_AutoMap_C_UpdateMapCrosshairs, MapDynamicMaterial) == 0x000010, "Member 'WIDGET_AutoMap_C_UpdateMapCrosshairs::MapDynamicMaterial' has a wrong offset!");
static_assert(offsetof(WIDGET_AutoMap_C_UpdateMapCrosshairs, CallFunc_BreakVector2D_X) == 0x000018, "Member 'WIDGET_AutoMap_C_UpdateMapCrosshairs::CallFunc_BreakVector2D_X' has a wrong offset!");
static_assert(offsetof(WIDGET_AutoMap_C_UpdateMapCrosshairs, CallFunc_BreakVector2D_Y) == 0x00001C, "Member 'WIDGET_AutoMap_C_UpdateMapCrosshairs::CallFunc_BreakVector2D_Y' has a wrong offset!");
static_assert(offsetof(WIDGET_AutoMap_C_UpdateMapCrosshairs, CallFunc_ConvertToDynamicMaterialInstance_ReturnValue) == 0x000020, "Member 'WIDGET_AutoMap_C_UpdateMapCrosshairs::CallFunc_ConvertToDynamicMaterialInstance_ReturnValue' has a wrong offset!");
static_assert(offsetof(WIDGET_AutoMap_C_UpdateMapCrosshairs, CallFunc_GetTextureCoordsFromScreenPoint_ValidCoords) == 0x000028, "Member 'WIDGET_AutoMap_C_UpdateMapCrosshairs::CallFunc_GetTextureCoordsFromScreenPoint_ValidCoords' has a wrong offset!");
static_assert(offsetof(WIDGET_AutoMap_C_UpdateMapCrosshairs, CallFunc_GetTextureCoordsFromScreenPoint_TexCoords) == 0x00002C, "Member 'WIDGET_AutoMap_C_UpdateMapCrosshairs::CallFunc_GetTextureCoordsFromScreenPoint_TexCoords' has a wrong offset!");

// Function WIDGET_AutoMap.WIDGET_AutoMap_C.HideMapCrosshairs
// 0x0008 (0x0008 - 0x0000)
struct WIDGET_AutoMap_C_HideMapCrosshairs final
{
public:
	class UMaterialInstanceDynamic*               CallFunc_ConvertToDynamicMaterialInstance_ReturnValue; // 0x0000(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(WIDGET_AutoMap_C_HideMapCrosshairs) == 0x000008, "Wrong alignment on WIDGET_AutoMap_C_HideMapCrosshairs");
static_assert(sizeof(WIDGET_AutoMap_C_HideMapCrosshairs) == 0x000008, "Wrong size on WIDGET_AutoMap_C_HideMapCrosshairs");
static_assert(offsetof(WIDGET_AutoMap_C_HideMapCrosshairs, CallFunc_ConvertToDynamicMaterialInstance_ReturnValue) == 0x000000, "Member 'WIDGET_AutoMap_C_HideMapCrosshairs::CallFunc_ConvertToDynamicMaterialInstance_ReturnValue' has a wrong offset!");

// Function WIDGET_AutoMap.WIDGET_AutoMap_C.UpdateAutoMapMousePanDrift
// 0x003C (0x003C - 0x0000)
struct WIDGET_AutoMap_C_UpdateAutoMapMousePanDrift final
{
public:
	float                                         DeltaTime;                                         // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector2D                              NewSourcePanDriftTexCoord;                         // 0x0004(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_NotEqual_Vector2DVector2D_ReturnValue;    // 0x000C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_D[0x3];                                        // 0x000D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                CallFunc_Conv_Vector2DToVector_ReturnValue;        // 0x0010(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Conv_Vector2DToVector_ReturnValue_1;      // 0x001C(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_VInterpTo_ReturnValue;                    // 0x0028(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector2D                              CallFunc_Conv_VectorToVector2D_ReturnValue;        // 0x0034(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(WIDGET_AutoMap_C_UpdateAutoMapMousePanDrift) == 0x000004, "Wrong alignment on WIDGET_AutoMap_C_UpdateAutoMapMousePanDrift");
static_assert(sizeof(WIDGET_AutoMap_C_UpdateAutoMapMousePanDrift) == 0x00003C, "Wrong size on WIDGET_AutoMap_C_UpdateAutoMapMousePanDrift");
static_assert(offsetof(WIDGET_AutoMap_C_UpdateAutoMapMousePanDrift, DeltaTime) == 0x000000, "Member 'WIDGET_AutoMap_C_UpdateAutoMapMousePanDrift::DeltaTime' has a wrong offset!");
static_assert(offsetof(WIDGET_AutoMap_C_UpdateAutoMapMousePanDrift, NewSourcePanDriftTexCoord) == 0x000004, "Member 'WIDGET_AutoMap_C_UpdateAutoMapMousePanDrift::NewSourcePanDriftTexCoord' has a wrong offset!");
static_assert(offsetof(WIDGET_AutoMap_C_UpdateAutoMapMousePanDrift, CallFunc_NotEqual_Vector2DVector2D_ReturnValue) == 0x00000C, "Member 'WIDGET_AutoMap_C_UpdateAutoMapMousePanDrift::CallFunc_NotEqual_Vector2DVector2D_ReturnValue' has a wrong offset!");
static_assert(offsetof(WIDGET_AutoMap_C_UpdateAutoMapMousePanDrift, CallFunc_Conv_Vector2DToVector_ReturnValue) == 0x000010, "Member 'WIDGET_AutoMap_C_UpdateAutoMapMousePanDrift::CallFunc_Conv_Vector2DToVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(WIDGET_AutoMap_C_UpdateAutoMapMousePanDrift, CallFunc_Conv_Vector2DToVector_ReturnValue_1) == 0x00001C, "Member 'WIDGET_AutoMap_C_UpdateAutoMapMousePanDrift::CallFunc_Conv_Vector2DToVector_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(WIDGET_AutoMap_C_UpdateAutoMapMousePanDrift, CallFunc_VInterpTo_ReturnValue) == 0x000028, "Member 'WIDGET_AutoMap_C_UpdateAutoMapMousePanDrift::CallFunc_VInterpTo_ReturnValue' has a wrong offset!");
static_assert(offsetof(WIDGET_AutoMap_C_UpdateAutoMapMousePanDrift, CallFunc_Conv_VectorToVector2D_ReturnValue) == 0x000034, "Member 'WIDGET_AutoMap_C_UpdateAutoMapMousePanDrift::CallFunc_Conv_VectorToVector2D_ReturnValue' has a wrong offset!");

// Function WIDGET_AutoMap.WIDGET_AutoMap_C.UpdateAutoMapGamepadPanning
// 0x0100 (0x0100 - 0x0000)
struct WIDGET_AutoMap_C_UpdateAutoMapGamepadPanning final
{
public:
	float                                         DeltaTime;                                         // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FIntPoint                              PanIntPoint;                                       // 0x0004(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Array_Index_Variable;                     // 0x000C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Loop_Counter_Variable;                    // 0x0010(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue;                   // 0x0014(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class USceneCaptureComponent2D*               CallFunc_GetCaptureComponent_CaptureComponent;     // 0x0018(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Multiply_FloatFloat_ReturnValue;          // 0x0020(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector2D                              CallFunc_Conv_IntPointToVector2D_ReturnValue;      // 0x0024(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Conv_Vector2DToVector_ReturnValue;        // 0x002C(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TArray<int32>                                 CallFunc_GetSetBitIndices_ReturnValue;             // 0x0038(0x0010)(ReferenceParm)
	struct FVector                                CallFunc_Multiply_VectorFloat_ReturnValue;         // 0x0048(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Get_Item;                           // 0x0054(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FHitResult                             CallFunc_K2_AddWorldOffset_SweepHitResult;         // 0x0058(0x0088)(IsPlainOldData, NoDestructor, ContainsInstancedReference)
	uint8                                         CallFunc_Conv_IntToByte_ReturnValue;               // 0x00E0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_E1[0x3];                                       // 0x00E1(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Array_Length_ReturnValue;                 // 0x00E4(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         CallFunc_GetValidValue_ReturnValue;                // 0x00E8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue;                  // 0x00E9(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_EA[0x2];                                       // 0x00EA(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	struct FIntPoint                              CallFunc_GetIntPointFromCardinalDirection_Point;   // 0x00EC(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FIntPoint                              CallFunc_Add_IntPointIntPoint_ReturnValue;         // 0x00F4(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(WIDGET_AutoMap_C_UpdateAutoMapGamepadPanning) == 0x000008, "Wrong alignment on WIDGET_AutoMap_C_UpdateAutoMapGamepadPanning");
static_assert(sizeof(WIDGET_AutoMap_C_UpdateAutoMapGamepadPanning) == 0x000100, "Wrong size on WIDGET_AutoMap_C_UpdateAutoMapGamepadPanning");
static_assert(offsetof(WIDGET_AutoMap_C_UpdateAutoMapGamepadPanning, DeltaTime) == 0x000000, "Member 'WIDGET_AutoMap_C_UpdateAutoMapGamepadPanning::DeltaTime' has a wrong offset!");
static_assert(offsetof(WIDGET_AutoMap_C_UpdateAutoMapGamepadPanning, PanIntPoint) == 0x000004, "Member 'WIDGET_AutoMap_C_UpdateAutoMapGamepadPanning::PanIntPoint' has a wrong offset!");
static_assert(offsetof(WIDGET_AutoMap_C_UpdateAutoMapGamepadPanning, Temp_int_Array_Index_Variable) == 0x00000C, "Member 'WIDGET_AutoMap_C_UpdateAutoMapGamepadPanning::Temp_int_Array_Index_Variable' has a wrong offset!");
static_assert(offsetof(WIDGET_AutoMap_C_UpdateAutoMapGamepadPanning, Temp_int_Loop_Counter_Variable) == 0x000010, "Member 'WIDGET_AutoMap_C_UpdateAutoMapGamepadPanning::Temp_int_Loop_Counter_Variable' has a wrong offset!");
static_assert(offsetof(WIDGET_AutoMap_C_UpdateAutoMapGamepadPanning, CallFunc_Add_IntInt_ReturnValue) == 0x000014, "Member 'WIDGET_AutoMap_C_UpdateAutoMapGamepadPanning::CallFunc_Add_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(WIDGET_AutoMap_C_UpdateAutoMapGamepadPanning, CallFunc_GetCaptureComponent_CaptureComponent) == 0x000018, "Member 'WIDGET_AutoMap_C_UpdateAutoMapGamepadPanning::CallFunc_GetCaptureComponent_CaptureComponent' has a wrong offset!");
static_assert(offsetof(WIDGET_AutoMap_C_UpdateAutoMapGamepadPanning, CallFunc_Multiply_FloatFloat_ReturnValue) == 0x000020, "Member 'WIDGET_AutoMap_C_UpdateAutoMapGamepadPanning::CallFunc_Multiply_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(WIDGET_AutoMap_C_UpdateAutoMapGamepadPanning, CallFunc_Conv_IntPointToVector2D_ReturnValue) == 0x000024, "Member 'WIDGET_AutoMap_C_UpdateAutoMapGamepadPanning::CallFunc_Conv_IntPointToVector2D_ReturnValue' has a wrong offset!");
static_assert(offsetof(WIDGET_AutoMap_C_UpdateAutoMapGamepadPanning, CallFunc_Conv_Vector2DToVector_ReturnValue) == 0x00002C, "Member 'WIDGET_AutoMap_C_UpdateAutoMapGamepadPanning::CallFunc_Conv_Vector2DToVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(WIDGET_AutoMap_C_UpdateAutoMapGamepadPanning, CallFunc_GetSetBitIndices_ReturnValue) == 0x000038, "Member 'WIDGET_AutoMap_C_UpdateAutoMapGamepadPanning::CallFunc_GetSetBitIndices_ReturnValue' has a wrong offset!");
static_assert(offsetof(WIDGET_AutoMap_C_UpdateAutoMapGamepadPanning, CallFunc_Multiply_VectorFloat_ReturnValue) == 0x000048, "Member 'WIDGET_AutoMap_C_UpdateAutoMapGamepadPanning::CallFunc_Multiply_VectorFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(WIDGET_AutoMap_C_UpdateAutoMapGamepadPanning, CallFunc_Array_Get_Item) == 0x000054, "Member 'WIDGET_AutoMap_C_UpdateAutoMapGamepadPanning::CallFunc_Array_Get_Item' has a wrong offset!");
static_assert(offsetof(WIDGET_AutoMap_C_UpdateAutoMapGamepadPanning, CallFunc_K2_AddWorldOffset_SweepHitResult) == 0x000058, "Member 'WIDGET_AutoMap_C_UpdateAutoMapGamepadPanning::CallFunc_K2_AddWorldOffset_SweepHitResult' has a wrong offset!");
static_assert(offsetof(WIDGET_AutoMap_C_UpdateAutoMapGamepadPanning, CallFunc_Conv_IntToByte_ReturnValue) == 0x0000E0, "Member 'WIDGET_AutoMap_C_UpdateAutoMapGamepadPanning::CallFunc_Conv_IntToByte_ReturnValue' has a wrong offset!");
static_assert(offsetof(WIDGET_AutoMap_C_UpdateAutoMapGamepadPanning, CallFunc_Array_Length_ReturnValue) == 0x0000E4, "Member 'WIDGET_AutoMap_C_UpdateAutoMapGamepadPanning::CallFunc_Array_Length_ReturnValue' has a wrong offset!");
static_assert(offsetof(WIDGET_AutoMap_C_UpdateAutoMapGamepadPanning, CallFunc_GetValidValue_ReturnValue) == 0x0000E8, "Member 'WIDGET_AutoMap_C_UpdateAutoMapGamepadPanning::CallFunc_GetValidValue_ReturnValue' has a wrong offset!");
static_assert(offsetof(WIDGET_AutoMap_C_UpdateAutoMapGamepadPanning, CallFunc_Less_IntInt_ReturnValue) == 0x0000E9, "Member 'WIDGET_AutoMap_C_UpdateAutoMapGamepadPanning::CallFunc_Less_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(WIDGET_AutoMap_C_UpdateAutoMapGamepadPanning, CallFunc_GetIntPointFromCardinalDirection_Point) == 0x0000EC, "Member 'WIDGET_AutoMap_C_UpdateAutoMapGamepadPanning::CallFunc_GetIntPointFromCardinalDirection_Point' has a wrong offset!");
static_assert(offsetof(WIDGET_AutoMap_C_UpdateAutoMapGamepadPanning, CallFunc_Add_IntPointIntPoint_ReturnValue) == 0x0000F4, "Member 'WIDGET_AutoMap_C_UpdateAutoMapGamepadPanning::CallFunc_Add_IntPointIntPoint_ReturnValue' has a wrong offset!");

// Function WIDGET_AutoMap.WIDGET_AutoMap_C.PanCameraUsingTextureCoordinates
// 0x00C8 (0x00C8 - 0x0000)
struct WIDGET_AutoMap_C_PanCameraUsingTextureCoordinates final
{
public:
	struct FVector2D                              SourceTexCoord;                                    // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector2D                              TargetTexCoord;                                    // 0x0008(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class USceneCaptureComponent2D*               CallFunc_GetCaptureComponent_CaptureComponent;     // 0x0010(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_GetWorldLocationFromTextureCoords_WorldLocation; // 0x0018(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_GetWorldLocationFromTextureCoords_WorldLocation_1; // 0x0024(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Subtract_VectorVector_ReturnValue;        // 0x0030(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FHitResult                             CallFunc_K2_AddWorldOffset_SweepHitResult;         // 0x003C(0x0088)(IsPlainOldData, NoDestructor, ContainsInstancedReference)
};
static_assert(alignof(WIDGET_AutoMap_C_PanCameraUsingTextureCoordinates) == 0x000008, "Wrong alignment on WIDGET_AutoMap_C_PanCameraUsingTextureCoordinates");
static_assert(sizeof(WIDGET_AutoMap_C_PanCameraUsingTextureCoordinates) == 0x0000C8, "Wrong size on WIDGET_AutoMap_C_PanCameraUsingTextureCoordinates");
static_assert(offsetof(WIDGET_AutoMap_C_PanCameraUsingTextureCoordinates, SourceTexCoord) == 0x000000, "Member 'WIDGET_AutoMap_C_PanCameraUsingTextureCoordinates::SourceTexCoord' has a wrong offset!");
static_assert(offsetof(WIDGET_AutoMap_C_PanCameraUsingTextureCoordinates, TargetTexCoord) == 0x000008, "Member 'WIDGET_AutoMap_C_PanCameraUsingTextureCoordinates::TargetTexCoord' has a wrong offset!");
static_assert(offsetof(WIDGET_AutoMap_C_PanCameraUsingTextureCoordinates, CallFunc_GetCaptureComponent_CaptureComponent) == 0x000010, "Member 'WIDGET_AutoMap_C_PanCameraUsingTextureCoordinates::CallFunc_GetCaptureComponent_CaptureComponent' has a wrong offset!");
static_assert(offsetof(WIDGET_AutoMap_C_PanCameraUsingTextureCoordinates, CallFunc_GetWorldLocationFromTextureCoords_WorldLocation) == 0x000018, "Member 'WIDGET_AutoMap_C_PanCameraUsingTextureCoordinates::CallFunc_GetWorldLocationFromTextureCoords_WorldLocation' has a wrong offset!");
static_assert(offsetof(WIDGET_AutoMap_C_PanCameraUsingTextureCoordinates, CallFunc_GetWorldLocationFromTextureCoords_WorldLocation_1) == 0x000024, "Member 'WIDGET_AutoMap_C_PanCameraUsingTextureCoordinates::CallFunc_GetWorldLocationFromTextureCoords_WorldLocation_1' has a wrong offset!");
static_assert(offsetof(WIDGET_AutoMap_C_PanCameraUsingTextureCoordinates, CallFunc_Subtract_VectorVector_ReturnValue) == 0x000030, "Member 'WIDGET_AutoMap_C_PanCameraUsingTextureCoordinates::CallFunc_Subtract_VectorVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(WIDGET_AutoMap_C_PanCameraUsingTextureCoordinates, CallFunc_K2_AddWorldOffset_SweepHitResult) == 0x00003C, "Member 'WIDGET_AutoMap_C_PanCameraUsingTextureCoordinates::CallFunc_K2_AddWorldOffset_SweepHitResult' has a wrong offset!");

// Function WIDGET_AutoMap.WIDGET_AutoMap_C.CaptureAutomapScene
// 0x0030 (0x0030 - 0x0000)
struct WIDGET_AutoMap_C_CaptureAutomapScene final
{
public:
	class APAWN_Hacker_Implant_C*                 HackerPawn;                                        // 0x0000(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class APawn*                                  CallFunc_GetPlayerPawn_ReturnValue;                // 0x0008(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Lerp_ReturnValue;                         // 0x0010(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class APAWN_Hacker_Implant_C*                 K2Node_DynamicCast_AsPAWN_Hacker_Implant;          // 0x0018(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0020(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_21[0x7];                                       // 0x0021(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class USceneCaptureComponent2D*               CallFunc_GetCaptureComponent_CaptureComponent;     // 0x0028(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(WIDGET_AutoMap_C_CaptureAutomapScene) == 0x000008, "Wrong alignment on WIDGET_AutoMap_C_CaptureAutomapScene");
static_assert(sizeof(WIDGET_AutoMap_C_CaptureAutomapScene) == 0x000030, "Wrong size on WIDGET_AutoMap_C_CaptureAutomapScene");
static_assert(offsetof(WIDGET_AutoMap_C_CaptureAutomapScene, HackerPawn) == 0x000000, "Member 'WIDGET_AutoMap_C_CaptureAutomapScene::HackerPawn' has a wrong offset!");
static_assert(offsetof(WIDGET_AutoMap_C_CaptureAutomapScene, CallFunc_GetPlayerPawn_ReturnValue) == 0x000008, "Member 'WIDGET_AutoMap_C_CaptureAutomapScene::CallFunc_GetPlayerPawn_ReturnValue' has a wrong offset!");
static_assert(offsetof(WIDGET_AutoMap_C_CaptureAutomapScene, CallFunc_Lerp_ReturnValue) == 0x000010, "Member 'WIDGET_AutoMap_C_CaptureAutomapScene::CallFunc_Lerp_ReturnValue' has a wrong offset!");
static_assert(offsetof(WIDGET_AutoMap_C_CaptureAutomapScene, K2Node_DynamicCast_AsPAWN_Hacker_Implant) == 0x000018, "Member 'WIDGET_AutoMap_C_CaptureAutomapScene::K2Node_DynamicCast_AsPAWN_Hacker_Implant' has a wrong offset!");
static_assert(offsetof(WIDGET_AutoMap_C_CaptureAutomapScene, K2Node_DynamicCast_bSuccess) == 0x000020, "Member 'WIDGET_AutoMap_C_CaptureAutomapScene::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(WIDGET_AutoMap_C_CaptureAutomapScene, CallFunc_GetCaptureComponent_CaptureComponent) == 0x000028, "Member 'WIDGET_AutoMap_C_CaptureAutomapScene::CallFunc_GetCaptureComponent_CaptureComponent' has a wrong offset!");

// Function WIDGET_AutoMap.WIDGET_AutoMap_C.UpdateMapGrid
// 0x00D0 (0x00D0 - 0x0000)
struct WIDGET_AutoMap_C_UpdateMapGrid final
{
public:
	float                                         MapGridCellSize;                                   // 0x0000(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UMaterialInstanceDynamic*               DynamicMaterial;                                   // 0x0008(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UBatchedLevelVoxelization*              BatchedLevelVoxelization;                          // 0x0010(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UGameInstance*                          CallFunc_GetGameInstance_ReturnValue;              // 0x0018(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0020(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_21[0x7];                                       // 0x0021(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UGI_SinglePlayer_C*                     K2Node_DynamicCast_AsGI_Single_Player;             // 0x0028(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0030(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsScannerEnabled_Result;                  // 0x0031(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsValid_ReturnValue_1;                    // 0x0032(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_33[0x1];                                       // 0x0033(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                CallFunc_GetMapCornerWorldLocation_CornerLocation; // 0x0034(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector2D                              CallFunc_Conv_VectorToVector2D_ReturnValue;        // 0x0040(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector2D                              CallFunc_Divide_Vector2DFloat_ReturnValue;         // 0x0048(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector2D_X;                          // 0x0050(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector2D_Y;                          // 0x0054(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_FFloor_ReturnValue;                       // 0x0058(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_FFloor_ReturnValue_1;                     // 0x005C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Conv_IntToFloat_ReturnValue;              // 0x0060(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Conv_IntToFloat_ReturnValue_1;            // 0x0064(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector2D                              CallFunc_MakeVector2D_ReturnValue;                 // 0x0068(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector2D                              CallFunc_Add_Vector2DVector2D_ReturnValue;         // 0x0070(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Conv_IntToFloat_ReturnValue_2;            // 0x0078(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector2D                              CallFunc_Multiply_Vector2DFloat_ReturnValue;       // 0x007C(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Multiply_FloatFloat_ReturnValue;          // 0x0084(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector2D_X_1;                        // 0x0088(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector2D_Y_1;                        // 0x008C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_MakeVector_ReturnValue;                   // 0x0090(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_9C[0x4];                                       // 0x009C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class USceneCaptureComponent2D*               CallFunc_GetCaptureComponent_CaptureComponent;     // 0x00A0(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector2D                              CallFunc_GetTextureCoordsFromWorldLocation_TexCoords; // 0x00A8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector2D                              CallFunc_Multiply_Vector2DFloat_ReturnValue_1;     // 0x00B0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Divide_FloatFloat_ReturnValue;            // 0x00B8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector2D_X_2;                        // 0x00BC(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector2D_Y_2;                        // 0x00C0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_C4[0x4];                                       // 0x00C4(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UMaterialInstanceDynamic*               CallFunc_ConvertToDynamicMaterialInstance_ReturnValue; // 0x00C8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(WIDGET_AutoMap_C_UpdateMapGrid) == 0x000008, "Wrong alignment on WIDGET_AutoMap_C_UpdateMapGrid");
static_assert(sizeof(WIDGET_AutoMap_C_UpdateMapGrid) == 0x0000D0, "Wrong size on WIDGET_AutoMap_C_UpdateMapGrid");
static_assert(offsetof(WIDGET_AutoMap_C_UpdateMapGrid, MapGridCellSize) == 0x000000, "Member 'WIDGET_AutoMap_C_UpdateMapGrid::MapGridCellSize' has a wrong offset!");
static_assert(offsetof(WIDGET_AutoMap_C_UpdateMapGrid, DynamicMaterial) == 0x000008, "Member 'WIDGET_AutoMap_C_UpdateMapGrid::DynamicMaterial' has a wrong offset!");
static_assert(offsetof(WIDGET_AutoMap_C_UpdateMapGrid, BatchedLevelVoxelization) == 0x000010, "Member 'WIDGET_AutoMap_C_UpdateMapGrid::BatchedLevelVoxelization' has a wrong offset!");
static_assert(offsetof(WIDGET_AutoMap_C_UpdateMapGrid, CallFunc_GetGameInstance_ReturnValue) == 0x000018, "Member 'WIDGET_AutoMap_C_UpdateMapGrid::CallFunc_GetGameInstance_ReturnValue' has a wrong offset!");
static_assert(offsetof(WIDGET_AutoMap_C_UpdateMapGrid, CallFunc_IsValid_ReturnValue) == 0x000020, "Member 'WIDGET_AutoMap_C_UpdateMapGrid::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(WIDGET_AutoMap_C_UpdateMapGrid, K2Node_DynamicCast_AsGI_Single_Player) == 0x000028, "Member 'WIDGET_AutoMap_C_UpdateMapGrid::K2Node_DynamicCast_AsGI_Single_Player' has a wrong offset!");
static_assert(offsetof(WIDGET_AutoMap_C_UpdateMapGrid, K2Node_DynamicCast_bSuccess) == 0x000030, "Member 'WIDGET_AutoMap_C_UpdateMapGrid::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(WIDGET_AutoMap_C_UpdateMapGrid, CallFunc_IsScannerEnabled_Result) == 0x000031, "Member 'WIDGET_AutoMap_C_UpdateMapGrid::CallFunc_IsScannerEnabled_Result' has a wrong offset!");
static_assert(offsetof(WIDGET_AutoMap_C_UpdateMapGrid, CallFunc_IsValid_ReturnValue_1) == 0x000032, "Member 'WIDGET_AutoMap_C_UpdateMapGrid::CallFunc_IsValid_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(WIDGET_AutoMap_C_UpdateMapGrid, CallFunc_GetMapCornerWorldLocation_CornerLocation) == 0x000034, "Member 'WIDGET_AutoMap_C_UpdateMapGrid::CallFunc_GetMapCornerWorldLocation_CornerLocation' has a wrong offset!");
static_assert(offsetof(WIDGET_AutoMap_C_UpdateMapGrid, CallFunc_Conv_VectorToVector2D_ReturnValue) == 0x000040, "Member 'WIDGET_AutoMap_C_UpdateMapGrid::CallFunc_Conv_VectorToVector2D_ReturnValue' has a wrong offset!");
static_assert(offsetof(WIDGET_AutoMap_C_UpdateMapGrid, CallFunc_Divide_Vector2DFloat_ReturnValue) == 0x000048, "Member 'WIDGET_AutoMap_C_UpdateMapGrid::CallFunc_Divide_Vector2DFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(WIDGET_AutoMap_C_UpdateMapGrid, CallFunc_BreakVector2D_X) == 0x000050, "Member 'WIDGET_AutoMap_C_UpdateMapGrid::CallFunc_BreakVector2D_X' has a wrong offset!");
static_assert(offsetof(WIDGET_AutoMap_C_UpdateMapGrid, CallFunc_BreakVector2D_Y) == 0x000054, "Member 'WIDGET_AutoMap_C_UpdateMapGrid::CallFunc_BreakVector2D_Y' has a wrong offset!");
static_assert(offsetof(WIDGET_AutoMap_C_UpdateMapGrid, CallFunc_FFloor_ReturnValue) == 0x000058, "Member 'WIDGET_AutoMap_C_UpdateMapGrid::CallFunc_FFloor_ReturnValue' has a wrong offset!");
static_assert(offsetof(WIDGET_AutoMap_C_UpdateMapGrid, CallFunc_FFloor_ReturnValue_1) == 0x00005C, "Member 'WIDGET_AutoMap_C_UpdateMapGrid::CallFunc_FFloor_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(WIDGET_AutoMap_C_UpdateMapGrid, CallFunc_Conv_IntToFloat_ReturnValue) == 0x000060, "Member 'WIDGET_AutoMap_C_UpdateMapGrid::CallFunc_Conv_IntToFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(WIDGET_AutoMap_C_UpdateMapGrid, CallFunc_Conv_IntToFloat_ReturnValue_1) == 0x000064, "Member 'WIDGET_AutoMap_C_UpdateMapGrid::CallFunc_Conv_IntToFloat_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(WIDGET_AutoMap_C_UpdateMapGrid, CallFunc_MakeVector2D_ReturnValue) == 0x000068, "Member 'WIDGET_AutoMap_C_UpdateMapGrid::CallFunc_MakeVector2D_ReturnValue' has a wrong offset!");
static_assert(offsetof(WIDGET_AutoMap_C_UpdateMapGrid, CallFunc_Add_Vector2DVector2D_ReturnValue) == 0x000070, "Member 'WIDGET_AutoMap_C_UpdateMapGrid::CallFunc_Add_Vector2DVector2D_ReturnValue' has a wrong offset!");
static_assert(offsetof(WIDGET_AutoMap_C_UpdateMapGrid, CallFunc_Conv_IntToFloat_ReturnValue_2) == 0x000078, "Member 'WIDGET_AutoMap_C_UpdateMapGrid::CallFunc_Conv_IntToFloat_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(WIDGET_AutoMap_C_UpdateMapGrid, CallFunc_Multiply_Vector2DFloat_ReturnValue) == 0x00007C, "Member 'WIDGET_AutoMap_C_UpdateMapGrid::CallFunc_Multiply_Vector2DFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(WIDGET_AutoMap_C_UpdateMapGrid, CallFunc_Multiply_FloatFloat_ReturnValue) == 0x000084, "Member 'WIDGET_AutoMap_C_UpdateMapGrid::CallFunc_Multiply_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(WIDGET_AutoMap_C_UpdateMapGrid, CallFunc_BreakVector2D_X_1) == 0x000088, "Member 'WIDGET_AutoMap_C_UpdateMapGrid::CallFunc_BreakVector2D_X_1' has a wrong offset!");
static_assert(offsetof(WIDGET_AutoMap_C_UpdateMapGrid, CallFunc_BreakVector2D_Y_1) == 0x00008C, "Member 'WIDGET_AutoMap_C_UpdateMapGrid::CallFunc_BreakVector2D_Y_1' has a wrong offset!");
static_assert(offsetof(WIDGET_AutoMap_C_UpdateMapGrid, CallFunc_MakeVector_ReturnValue) == 0x000090, "Member 'WIDGET_AutoMap_C_UpdateMapGrid::CallFunc_MakeVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(WIDGET_AutoMap_C_UpdateMapGrid, CallFunc_GetCaptureComponent_CaptureComponent) == 0x0000A0, "Member 'WIDGET_AutoMap_C_UpdateMapGrid::CallFunc_GetCaptureComponent_CaptureComponent' has a wrong offset!");
static_assert(offsetof(WIDGET_AutoMap_C_UpdateMapGrid, CallFunc_GetTextureCoordsFromWorldLocation_TexCoords) == 0x0000A8, "Member 'WIDGET_AutoMap_C_UpdateMapGrid::CallFunc_GetTextureCoordsFromWorldLocation_TexCoords' has a wrong offset!");
static_assert(offsetof(WIDGET_AutoMap_C_UpdateMapGrid, CallFunc_Multiply_Vector2DFloat_ReturnValue_1) == 0x0000B0, "Member 'WIDGET_AutoMap_C_UpdateMapGrid::CallFunc_Multiply_Vector2DFloat_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(WIDGET_AutoMap_C_UpdateMapGrid, CallFunc_Divide_FloatFloat_ReturnValue) == 0x0000B8, "Member 'WIDGET_AutoMap_C_UpdateMapGrid::CallFunc_Divide_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(WIDGET_AutoMap_C_UpdateMapGrid, CallFunc_BreakVector2D_X_2) == 0x0000BC, "Member 'WIDGET_AutoMap_C_UpdateMapGrid::CallFunc_BreakVector2D_X_2' has a wrong offset!");
static_assert(offsetof(WIDGET_AutoMap_C_UpdateMapGrid, CallFunc_BreakVector2D_Y_2) == 0x0000C0, "Member 'WIDGET_AutoMap_C_UpdateMapGrid::CallFunc_BreakVector2D_Y_2' has a wrong offset!");
static_assert(offsetof(WIDGET_AutoMap_C_UpdateMapGrid, CallFunc_ConvertToDynamicMaterialInstance_ReturnValue) == 0x0000C8, "Member 'WIDGET_AutoMap_C_UpdateMapGrid::CallFunc_ConvertToDynamicMaterialInstance_ReturnValue' has a wrong offset!");

// Function WIDGET_AutoMap.WIDGET_AutoMap_C.GetTextureCoordsFromWorldLocation
// 0x0070 (0x0070 - 0x0000)
struct WIDGET_AutoMap_C_GetTextureCoordsFromWorldLocation final
{
public:
	struct FVector                                WorldLocation;                                     // 0x0000(0x000C)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          ScaleByVisibleHeight;                              // 0x000C(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_D[0x3];                                        // 0x000D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector2D                              TexCoords;                                         // 0x0010(0x0008)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                WorldOffset;                                       // 0x0018(0x000C)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         OrthoHeight;                                       // 0x0024(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         OrthoWidth;                                        // 0x0028(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Variable;                                // 0x002C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_2D[0x3];                                       // 0x002D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                CallFunc_GetMapCornerWorldLocation_CornerLocation; // 0x0030(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector2D                              CallFunc_Conv_VectorToVector2D_ReturnValue;        // 0x003C(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector2D                              CallFunc_MakeVector2D_ReturnValue;                 // 0x0044(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Subtract_VectorVector_ReturnValue;        // 0x004C(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector2D                              CallFunc_Divide_Vector2DVector2D_ReturnValue;      // 0x0058(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class USceneCaptureComponent2D*               CallFunc_GetCaptureComponent_CaptureComponent;     // 0x0060(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Divide_FloatFloat_ReturnValue;            // 0x0068(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         K2Node_Select_Default;                             // 0x006C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(WIDGET_AutoMap_C_GetTextureCoordsFromWorldLocation) == 0x000008, "Wrong alignment on WIDGET_AutoMap_C_GetTextureCoordsFromWorldLocation");
static_assert(sizeof(WIDGET_AutoMap_C_GetTextureCoordsFromWorldLocation) == 0x000070, "Wrong size on WIDGET_AutoMap_C_GetTextureCoordsFromWorldLocation");
static_assert(offsetof(WIDGET_AutoMap_C_GetTextureCoordsFromWorldLocation, WorldLocation) == 0x000000, "Member 'WIDGET_AutoMap_C_GetTextureCoordsFromWorldLocation::WorldLocation' has a wrong offset!");
static_assert(offsetof(WIDGET_AutoMap_C_GetTextureCoordsFromWorldLocation, ScaleByVisibleHeight) == 0x00000C, "Member 'WIDGET_AutoMap_C_GetTextureCoordsFromWorldLocation::ScaleByVisibleHeight' has a wrong offset!");
static_assert(offsetof(WIDGET_AutoMap_C_GetTextureCoordsFromWorldLocation, TexCoords) == 0x000010, "Member 'WIDGET_AutoMap_C_GetTextureCoordsFromWorldLocation::TexCoords' has a wrong offset!");
static_assert(offsetof(WIDGET_AutoMap_C_GetTextureCoordsFromWorldLocation, WorldOffset) == 0x000018, "Member 'WIDGET_AutoMap_C_GetTextureCoordsFromWorldLocation::WorldOffset' has a wrong offset!");
static_assert(offsetof(WIDGET_AutoMap_C_GetTextureCoordsFromWorldLocation, OrthoHeight) == 0x000024, "Member 'WIDGET_AutoMap_C_GetTextureCoordsFromWorldLocation::OrthoHeight' has a wrong offset!");
static_assert(offsetof(WIDGET_AutoMap_C_GetTextureCoordsFromWorldLocation, OrthoWidth) == 0x000028, "Member 'WIDGET_AutoMap_C_GetTextureCoordsFromWorldLocation::OrthoWidth' has a wrong offset!");
static_assert(offsetof(WIDGET_AutoMap_C_GetTextureCoordsFromWorldLocation, Temp_bool_Variable) == 0x00002C, "Member 'WIDGET_AutoMap_C_GetTextureCoordsFromWorldLocation::Temp_bool_Variable' has a wrong offset!");
static_assert(offsetof(WIDGET_AutoMap_C_GetTextureCoordsFromWorldLocation, CallFunc_GetMapCornerWorldLocation_CornerLocation) == 0x000030, "Member 'WIDGET_AutoMap_C_GetTextureCoordsFromWorldLocation::CallFunc_GetMapCornerWorldLocation_CornerLocation' has a wrong offset!");
static_assert(offsetof(WIDGET_AutoMap_C_GetTextureCoordsFromWorldLocation, CallFunc_Conv_VectorToVector2D_ReturnValue) == 0x00003C, "Member 'WIDGET_AutoMap_C_GetTextureCoordsFromWorldLocation::CallFunc_Conv_VectorToVector2D_ReturnValue' has a wrong offset!");
static_assert(offsetof(WIDGET_AutoMap_C_GetTextureCoordsFromWorldLocation, CallFunc_MakeVector2D_ReturnValue) == 0x000044, "Member 'WIDGET_AutoMap_C_GetTextureCoordsFromWorldLocation::CallFunc_MakeVector2D_ReturnValue' has a wrong offset!");
static_assert(offsetof(WIDGET_AutoMap_C_GetTextureCoordsFromWorldLocation, CallFunc_Subtract_VectorVector_ReturnValue) == 0x00004C, "Member 'WIDGET_AutoMap_C_GetTextureCoordsFromWorldLocation::CallFunc_Subtract_VectorVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(WIDGET_AutoMap_C_GetTextureCoordsFromWorldLocation, CallFunc_Divide_Vector2DVector2D_ReturnValue) == 0x000058, "Member 'WIDGET_AutoMap_C_GetTextureCoordsFromWorldLocation::CallFunc_Divide_Vector2DVector2D_ReturnValue' has a wrong offset!");
static_assert(offsetof(WIDGET_AutoMap_C_GetTextureCoordsFromWorldLocation, CallFunc_GetCaptureComponent_CaptureComponent) == 0x000060, "Member 'WIDGET_AutoMap_C_GetTextureCoordsFromWorldLocation::CallFunc_GetCaptureComponent_CaptureComponent' has a wrong offset!");
static_assert(offsetof(WIDGET_AutoMap_C_GetTextureCoordsFromWorldLocation, CallFunc_Divide_FloatFloat_ReturnValue) == 0x000068, "Member 'WIDGET_AutoMap_C_GetTextureCoordsFromWorldLocation::CallFunc_Divide_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(WIDGET_AutoMap_C_GetTextureCoordsFromWorldLocation, K2Node_Select_Default) == 0x00006C, "Member 'WIDGET_AutoMap_C_GetTextureCoordsFromWorldLocation::K2Node_Select_Default' has a wrong offset!");

// Function WIDGET_AutoMap.WIDGET_AutoMap_C.GetMapCornerWorldLocation
// 0x0068 (0x0068 - 0x0000)
struct WIDGET_AutoMap_C_GetMapCornerWorldLocation final
{
public:
	bool                                          ScaleByVisibleHeight;                              // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                CornerLocation;                                    // 0x0004(0x000C)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         OrthoHeight;                                       // 0x0010(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         OrthoWidth;                                        // 0x0014(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Variable;                                // 0x0018(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_19[0x7];                                       // 0x0019(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class USceneCaptureComponent2D*               CallFunc_GetCaptureComponent_CaptureComponent;     // 0x0020(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_K2_GetComponentLocation_ReturnValue;      // 0x0028(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Divide_FloatFloat_ReturnValue;            // 0x0034(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         K2Node_Select_Default;                             // 0x0038(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Multiply_FloatFloat_ReturnValue;          // 0x003C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class USceneCaptureComponent2D*               CallFunc_GetCaptureComponent_CaptureComponent_1;   // 0x0040(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Multiply_FloatFloat_ReturnValue_1;        // 0x0048(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_MakeVector_ReturnValue;                   // 0x004C(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Subtract_VectorVector_ReturnValue;        // 0x0058(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(WIDGET_AutoMap_C_GetMapCornerWorldLocation) == 0x000008, "Wrong alignment on WIDGET_AutoMap_C_GetMapCornerWorldLocation");
static_assert(sizeof(WIDGET_AutoMap_C_GetMapCornerWorldLocation) == 0x000068, "Wrong size on WIDGET_AutoMap_C_GetMapCornerWorldLocation");
static_assert(offsetof(WIDGET_AutoMap_C_GetMapCornerWorldLocation, ScaleByVisibleHeight) == 0x000000, "Member 'WIDGET_AutoMap_C_GetMapCornerWorldLocation::ScaleByVisibleHeight' has a wrong offset!");
static_assert(offsetof(WIDGET_AutoMap_C_GetMapCornerWorldLocation, CornerLocation) == 0x000004, "Member 'WIDGET_AutoMap_C_GetMapCornerWorldLocation::CornerLocation' has a wrong offset!");
static_assert(offsetof(WIDGET_AutoMap_C_GetMapCornerWorldLocation, OrthoHeight) == 0x000010, "Member 'WIDGET_AutoMap_C_GetMapCornerWorldLocation::OrthoHeight' has a wrong offset!");
static_assert(offsetof(WIDGET_AutoMap_C_GetMapCornerWorldLocation, OrthoWidth) == 0x000014, "Member 'WIDGET_AutoMap_C_GetMapCornerWorldLocation::OrthoWidth' has a wrong offset!");
static_assert(offsetof(WIDGET_AutoMap_C_GetMapCornerWorldLocation, Temp_bool_Variable) == 0x000018, "Member 'WIDGET_AutoMap_C_GetMapCornerWorldLocation::Temp_bool_Variable' has a wrong offset!");
static_assert(offsetof(WIDGET_AutoMap_C_GetMapCornerWorldLocation, CallFunc_GetCaptureComponent_CaptureComponent) == 0x000020, "Member 'WIDGET_AutoMap_C_GetMapCornerWorldLocation::CallFunc_GetCaptureComponent_CaptureComponent' has a wrong offset!");
static_assert(offsetof(WIDGET_AutoMap_C_GetMapCornerWorldLocation, CallFunc_K2_GetComponentLocation_ReturnValue) == 0x000028, "Member 'WIDGET_AutoMap_C_GetMapCornerWorldLocation::CallFunc_K2_GetComponentLocation_ReturnValue' has a wrong offset!");
static_assert(offsetof(WIDGET_AutoMap_C_GetMapCornerWorldLocation, CallFunc_Divide_FloatFloat_ReturnValue) == 0x000034, "Member 'WIDGET_AutoMap_C_GetMapCornerWorldLocation::CallFunc_Divide_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(WIDGET_AutoMap_C_GetMapCornerWorldLocation, K2Node_Select_Default) == 0x000038, "Member 'WIDGET_AutoMap_C_GetMapCornerWorldLocation::K2Node_Select_Default' has a wrong offset!");
static_assert(offsetof(WIDGET_AutoMap_C_GetMapCornerWorldLocation, CallFunc_Multiply_FloatFloat_ReturnValue) == 0x00003C, "Member 'WIDGET_AutoMap_C_GetMapCornerWorldLocation::CallFunc_Multiply_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(WIDGET_AutoMap_C_GetMapCornerWorldLocation, CallFunc_GetCaptureComponent_CaptureComponent_1) == 0x000040, "Member 'WIDGET_AutoMap_C_GetMapCornerWorldLocation::CallFunc_GetCaptureComponent_CaptureComponent_1' has a wrong offset!");
static_assert(offsetof(WIDGET_AutoMap_C_GetMapCornerWorldLocation, CallFunc_Multiply_FloatFloat_ReturnValue_1) == 0x000048, "Member 'WIDGET_AutoMap_C_GetMapCornerWorldLocation::CallFunc_Multiply_FloatFloat_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(WIDGET_AutoMap_C_GetMapCornerWorldLocation, CallFunc_MakeVector_ReturnValue) == 0x00004C, "Member 'WIDGET_AutoMap_C_GetMapCornerWorldLocation::CallFunc_MakeVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(WIDGET_AutoMap_C_GetMapCornerWorldLocation, CallFunc_Subtract_VectorVector_ReturnValue) == 0x000058, "Member 'WIDGET_AutoMap_C_GetMapCornerWorldLocation::CallFunc_Subtract_VectorVector_ReturnValue' has a wrong offset!");

// Function WIDGET_AutoMap.WIDGET_AutoMap_C.GetBestRegionLabelOffset
// 0x0120 (0x0120 - 0x0000)
struct WIDGET_AutoMap_C_GetBestRegionLabelOffset final
{
public:
	struct FVector2D                              CursorOffsetOnWidget;                              // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector2D                              Alignment;                                         // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector2D                              Offset;                                            // 0x0010(0x0008)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector2D                              RegionDimensions;                                  // 0x0018(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                ContainmentOffset;                                 // 0x0020(0x000C)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Variable;                                // 0x002C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_2D[0x3];                                       // 0x002D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         Temp_float_Variable;                               // 0x0030(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Temp_float_Variable_1;                             // 0x0034(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Variable_1;                              // 0x0038(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_39[0x3];                                       // 0x0039(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         Temp_float_Variable_2;                             // 0x003C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Temp_float_Variable_3;                             // 0x0040(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Conv_Vector2DToVector_ReturnValue;        // 0x0044(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector2D_X;                          // 0x0050(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector2D_Y;                          // 0x0054(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FText                                   CallFunc_GetTargetMessage_Message;                 // 0x0058(0x0018)()
	struct FVector2D                              CallFunc_GetDimensionsForNewText_ReturnValue;      // 0x0070(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector_X;                            // 0x0078(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector_Y;                            // 0x007C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector_Z;                            // 0x0080(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector2D                              CallFunc_Add_Vector2DVector2D_ReturnValue;         // 0x0084(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_GreaterEqual_FloatFloat_ReturnValue;      // 0x008C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Not_PreBool_ReturnValue;                  // 0x008D(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_8E[0x2];                                       // 0x008E(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         K2Node_Select_Default;                             // 0x0090(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Conv_BoolToFloat_ReturnValue;             // 0x0094(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Multiply_FloatFloat_ReturnValue;          // 0x0098(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector_X_1;                          // 0x009C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector_Y_1;                          // 0x00A0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector_Z_1;                          // 0x00A4(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector2D                              CallFunc_Add_Vector2DVector2D_ReturnValue_1;       // 0x00A8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_GreaterEqual_FloatFloat_ReturnValue_1;    // 0x00B0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_B1[0x3];                                       // 0x00B1(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                CallFunc_Conv_Vector2DToVector_ReturnValue_1;      // 0x00B4(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Not_PreBool_ReturnValue_1;                // 0x00C0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_C1[0x3];                                       // 0x00C1(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         K2Node_Select_Default_1;                           // 0x00C4(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Conv_BoolToFloat_ReturnValue_1;           // 0x00C8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Multiply_FloatFloat_ReturnValue_1;        // 0x00CC(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector2D                              CallFunc_MakeVector2D_ReturnValue;                 // 0x00D0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector2D                              CallFunc_MakeVector2D_ReturnValue_1;               // 0x00D8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FBox2D                                 CallFunc_GetProjectedWindowBounds_ReturnValue;     // 0x00E0(0x0014)(ConstParm, ZeroConstructor, NoDestructor)
	struct FVector2D                              CallFunc_Subtract_Vector2DVector2D_ReturnValue;    // 0x00F4(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector2D                              CallFunc_Multiply_Vector2DFloat_ReturnValue;       // 0x00FC(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Conv_Vector2DToVector_ReturnValue_2;      // 0x0104(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_GetBoxContainmentOffset_ReturnValue;      // 0x0110(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(WIDGET_AutoMap_C_GetBestRegionLabelOffset) == 0x000008, "Wrong alignment on WIDGET_AutoMap_C_GetBestRegionLabelOffset");
static_assert(sizeof(WIDGET_AutoMap_C_GetBestRegionLabelOffset) == 0x000120, "Wrong size on WIDGET_AutoMap_C_GetBestRegionLabelOffset");
static_assert(offsetof(WIDGET_AutoMap_C_GetBestRegionLabelOffset, CursorOffsetOnWidget) == 0x000000, "Member 'WIDGET_AutoMap_C_GetBestRegionLabelOffset::CursorOffsetOnWidget' has a wrong offset!");
static_assert(offsetof(WIDGET_AutoMap_C_GetBestRegionLabelOffset, Alignment) == 0x000008, "Member 'WIDGET_AutoMap_C_GetBestRegionLabelOffset::Alignment' has a wrong offset!");
static_assert(offsetof(WIDGET_AutoMap_C_GetBestRegionLabelOffset, Offset) == 0x000010, "Member 'WIDGET_AutoMap_C_GetBestRegionLabelOffset::Offset' has a wrong offset!");
static_assert(offsetof(WIDGET_AutoMap_C_GetBestRegionLabelOffset, RegionDimensions) == 0x000018, "Member 'WIDGET_AutoMap_C_GetBestRegionLabelOffset::RegionDimensions' has a wrong offset!");
static_assert(offsetof(WIDGET_AutoMap_C_GetBestRegionLabelOffset, ContainmentOffset) == 0x000020, "Member 'WIDGET_AutoMap_C_GetBestRegionLabelOffset::ContainmentOffset' has a wrong offset!");
static_assert(offsetof(WIDGET_AutoMap_C_GetBestRegionLabelOffset, Temp_bool_Variable) == 0x00002C, "Member 'WIDGET_AutoMap_C_GetBestRegionLabelOffset::Temp_bool_Variable' has a wrong offset!");
static_assert(offsetof(WIDGET_AutoMap_C_GetBestRegionLabelOffset, Temp_float_Variable) == 0x000030, "Member 'WIDGET_AutoMap_C_GetBestRegionLabelOffset::Temp_float_Variable' has a wrong offset!");
static_assert(offsetof(WIDGET_AutoMap_C_GetBestRegionLabelOffset, Temp_float_Variable_1) == 0x000034, "Member 'WIDGET_AutoMap_C_GetBestRegionLabelOffset::Temp_float_Variable_1' has a wrong offset!");
static_assert(offsetof(WIDGET_AutoMap_C_GetBestRegionLabelOffset, Temp_bool_Variable_1) == 0x000038, "Member 'WIDGET_AutoMap_C_GetBestRegionLabelOffset::Temp_bool_Variable_1' has a wrong offset!");
static_assert(offsetof(WIDGET_AutoMap_C_GetBestRegionLabelOffset, Temp_float_Variable_2) == 0x00003C, "Member 'WIDGET_AutoMap_C_GetBestRegionLabelOffset::Temp_float_Variable_2' has a wrong offset!");
static_assert(offsetof(WIDGET_AutoMap_C_GetBestRegionLabelOffset, Temp_float_Variable_3) == 0x000040, "Member 'WIDGET_AutoMap_C_GetBestRegionLabelOffset::Temp_float_Variable_3' has a wrong offset!");
static_assert(offsetof(WIDGET_AutoMap_C_GetBestRegionLabelOffset, CallFunc_Conv_Vector2DToVector_ReturnValue) == 0x000044, "Member 'WIDGET_AutoMap_C_GetBestRegionLabelOffset::CallFunc_Conv_Vector2DToVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(WIDGET_AutoMap_C_GetBestRegionLabelOffset, CallFunc_BreakVector2D_X) == 0x000050, "Member 'WIDGET_AutoMap_C_GetBestRegionLabelOffset::CallFunc_BreakVector2D_X' has a wrong offset!");
static_assert(offsetof(WIDGET_AutoMap_C_GetBestRegionLabelOffset, CallFunc_BreakVector2D_Y) == 0x000054, "Member 'WIDGET_AutoMap_C_GetBestRegionLabelOffset::CallFunc_BreakVector2D_Y' has a wrong offset!");
static_assert(offsetof(WIDGET_AutoMap_C_GetBestRegionLabelOffset, CallFunc_GetTargetMessage_Message) == 0x000058, "Member 'WIDGET_AutoMap_C_GetBestRegionLabelOffset::CallFunc_GetTargetMessage_Message' has a wrong offset!");
static_assert(offsetof(WIDGET_AutoMap_C_GetBestRegionLabelOffset, CallFunc_GetDimensionsForNewText_ReturnValue) == 0x000070, "Member 'WIDGET_AutoMap_C_GetBestRegionLabelOffset::CallFunc_GetDimensionsForNewText_ReturnValue' has a wrong offset!");
static_assert(offsetof(WIDGET_AutoMap_C_GetBestRegionLabelOffset, CallFunc_BreakVector_X) == 0x000078, "Member 'WIDGET_AutoMap_C_GetBestRegionLabelOffset::CallFunc_BreakVector_X' has a wrong offset!");
static_assert(offsetof(WIDGET_AutoMap_C_GetBestRegionLabelOffset, CallFunc_BreakVector_Y) == 0x00007C, "Member 'WIDGET_AutoMap_C_GetBestRegionLabelOffset::CallFunc_BreakVector_Y' has a wrong offset!");
static_assert(offsetof(WIDGET_AutoMap_C_GetBestRegionLabelOffset, CallFunc_BreakVector_Z) == 0x000080, "Member 'WIDGET_AutoMap_C_GetBestRegionLabelOffset::CallFunc_BreakVector_Z' has a wrong offset!");
static_assert(offsetof(WIDGET_AutoMap_C_GetBestRegionLabelOffset, CallFunc_Add_Vector2DVector2D_ReturnValue) == 0x000084, "Member 'WIDGET_AutoMap_C_GetBestRegionLabelOffset::CallFunc_Add_Vector2DVector2D_ReturnValue' has a wrong offset!");
static_assert(offsetof(WIDGET_AutoMap_C_GetBestRegionLabelOffset, CallFunc_GreaterEqual_FloatFloat_ReturnValue) == 0x00008C, "Member 'WIDGET_AutoMap_C_GetBestRegionLabelOffset::CallFunc_GreaterEqual_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(WIDGET_AutoMap_C_GetBestRegionLabelOffset, CallFunc_Not_PreBool_ReturnValue) == 0x00008D, "Member 'WIDGET_AutoMap_C_GetBestRegionLabelOffset::CallFunc_Not_PreBool_ReturnValue' has a wrong offset!");
static_assert(offsetof(WIDGET_AutoMap_C_GetBestRegionLabelOffset, K2Node_Select_Default) == 0x000090, "Member 'WIDGET_AutoMap_C_GetBestRegionLabelOffset::K2Node_Select_Default' has a wrong offset!");
static_assert(offsetof(WIDGET_AutoMap_C_GetBestRegionLabelOffset, CallFunc_Conv_BoolToFloat_ReturnValue) == 0x000094, "Member 'WIDGET_AutoMap_C_GetBestRegionLabelOffset::CallFunc_Conv_BoolToFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(WIDGET_AutoMap_C_GetBestRegionLabelOffset, CallFunc_Multiply_FloatFloat_ReturnValue) == 0x000098, "Member 'WIDGET_AutoMap_C_GetBestRegionLabelOffset::CallFunc_Multiply_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(WIDGET_AutoMap_C_GetBestRegionLabelOffset, CallFunc_BreakVector_X_1) == 0x00009C, "Member 'WIDGET_AutoMap_C_GetBestRegionLabelOffset::CallFunc_BreakVector_X_1' has a wrong offset!");
static_assert(offsetof(WIDGET_AutoMap_C_GetBestRegionLabelOffset, CallFunc_BreakVector_Y_1) == 0x0000A0, "Member 'WIDGET_AutoMap_C_GetBestRegionLabelOffset::CallFunc_BreakVector_Y_1' has a wrong offset!");
static_assert(offsetof(WIDGET_AutoMap_C_GetBestRegionLabelOffset, CallFunc_BreakVector_Z_1) == 0x0000A4, "Member 'WIDGET_AutoMap_C_GetBestRegionLabelOffset::CallFunc_BreakVector_Z_1' has a wrong offset!");
static_assert(offsetof(WIDGET_AutoMap_C_GetBestRegionLabelOffset, CallFunc_Add_Vector2DVector2D_ReturnValue_1) == 0x0000A8, "Member 'WIDGET_AutoMap_C_GetBestRegionLabelOffset::CallFunc_Add_Vector2DVector2D_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(WIDGET_AutoMap_C_GetBestRegionLabelOffset, CallFunc_GreaterEqual_FloatFloat_ReturnValue_1) == 0x0000B0, "Member 'WIDGET_AutoMap_C_GetBestRegionLabelOffset::CallFunc_GreaterEqual_FloatFloat_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(WIDGET_AutoMap_C_GetBestRegionLabelOffset, CallFunc_Conv_Vector2DToVector_ReturnValue_1) == 0x0000B4, "Member 'WIDGET_AutoMap_C_GetBestRegionLabelOffset::CallFunc_Conv_Vector2DToVector_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(WIDGET_AutoMap_C_GetBestRegionLabelOffset, CallFunc_Not_PreBool_ReturnValue_1) == 0x0000C0, "Member 'WIDGET_AutoMap_C_GetBestRegionLabelOffset::CallFunc_Not_PreBool_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(WIDGET_AutoMap_C_GetBestRegionLabelOffset, K2Node_Select_Default_1) == 0x0000C4, "Member 'WIDGET_AutoMap_C_GetBestRegionLabelOffset::K2Node_Select_Default_1' has a wrong offset!");
static_assert(offsetof(WIDGET_AutoMap_C_GetBestRegionLabelOffset, CallFunc_Conv_BoolToFloat_ReturnValue_1) == 0x0000C8, "Member 'WIDGET_AutoMap_C_GetBestRegionLabelOffset::CallFunc_Conv_BoolToFloat_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(WIDGET_AutoMap_C_GetBestRegionLabelOffset, CallFunc_Multiply_FloatFloat_ReturnValue_1) == 0x0000CC, "Member 'WIDGET_AutoMap_C_GetBestRegionLabelOffset::CallFunc_Multiply_FloatFloat_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(WIDGET_AutoMap_C_GetBestRegionLabelOffset, CallFunc_MakeVector2D_ReturnValue) == 0x0000D0, "Member 'WIDGET_AutoMap_C_GetBestRegionLabelOffset::CallFunc_MakeVector2D_ReturnValue' has a wrong offset!");
static_assert(offsetof(WIDGET_AutoMap_C_GetBestRegionLabelOffset, CallFunc_MakeVector2D_ReturnValue_1) == 0x0000D8, "Member 'WIDGET_AutoMap_C_GetBestRegionLabelOffset::CallFunc_MakeVector2D_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(WIDGET_AutoMap_C_GetBestRegionLabelOffset, CallFunc_GetProjectedWindowBounds_ReturnValue) == 0x0000E0, "Member 'WIDGET_AutoMap_C_GetBestRegionLabelOffset::CallFunc_GetProjectedWindowBounds_ReturnValue' has a wrong offset!");
static_assert(offsetof(WIDGET_AutoMap_C_GetBestRegionLabelOffset, CallFunc_Subtract_Vector2DVector2D_ReturnValue) == 0x0000F4, "Member 'WIDGET_AutoMap_C_GetBestRegionLabelOffset::CallFunc_Subtract_Vector2DVector2D_ReturnValue' has a wrong offset!");
static_assert(offsetof(WIDGET_AutoMap_C_GetBestRegionLabelOffset, CallFunc_Multiply_Vector2DFloat_ReturnValue) == 0x0000FC, "Member 'WIDGET_AutoMap_C_GetBestRegionLabelOffset::CallFunc_Multiply_Vector2DFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(WIDGET_AutoMap_C_GetBestRegionLabelOffset, CallFunc_Conv_Vector2DToVector_ReturnValue_2) == 0x000104, "Member 'WIDGET_AutoMap_C_GetBestRegionLabelOffset::CallFunc_Conv_Vector2DToVector_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(WIDGET_AutoMap_C_GetBestRegionLabelOffset, CallFunc_GetBoxContainmentOffset_ReturnValue) == 0x000110, "Member 'WIDGET_AutoMap_C_GetBestRegionLabelOffset::CallFunc_GetBoxContainmentOffset_ReturnValue' has a wrong offset!");

// Function WIDGET_AutoMap.WIDGET_AutoMap_C.SetAutomapLevel
// 0x0018 (0x0018 - 0x0000)
struct WIDGET_AutoMap_C_SetAutomapLevel final
{
public:
	class FName                                   LevelName;                                         // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FName                                   CurrentLevelName;                                  // 0x0008(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UGI_SinglePlayer_C*                     GameInstance;                                      // 0x0010(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(WIDGET_AutoMap_C_SetAutomapLevel) == 0x000008, "Wrong alignment on WIDGET_AutoMap_C_SetAutomapLevel");
static_assert(sizeof(WIDGET_AutoMap_C_SetAutomapLevel) == 0x000018, "Wrong size on WIDGET_AutoMap_C_SetAutomapLevel");
static_assert(offsetof(WIDGET_AutoMap_C_SetAutomapLevel, LevelName) == 0x000000, "Member 'WIDGET_AutoMap_C_SetAutomapLevel::LevelName' has a wrong offset!");
static_assert(offsetof(WIDGET_AutoMap_C_SetAutomapLevel, CurrentLevelName) == 0x000008, "Member 'WIDGET_AutoMap_C_SetAutomapLevel::CurrentLevelName' has a wrong offset!");
static_assert(offsetof(WIDGET_AutoMap_C_SetAutomapLevel, GameInstance) == 0x000010, "Member 'WIDGET_AutoMap_C_SetAutomapLevel::GameInstance' has a wrong offset!");

// Function WIDGET_AutoMap.WIDGET_AutoMap_C.DisplayNameToLevelName
// 0x0148 (0x0148 - 0x0000)
struct WIDGET_AutoMap_C_DisplayNameToLevelName final
{
public:
	class FText                                   DisplayName;                                       // 0x0000(0x0018)(BlueprintVisible, BlueprintReadOnly, Parm)
	class FName                                   LevelName;                                         // 0x0018(0x0008)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FName                                   CurrentLevelName;                                  // 0x0020(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UGI_SinglePlayer_C*                     GameInstance;                                      // 0x0028(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Array_Index_Variable;                     // 0x0030(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Loop_Counter_Variable;                    // 0x0034(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue;                   // 0x0038(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_3C[0x4];                                       // 0x003C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class FName>                           CallFunc_GetVisitedLevels_VisitedLevels;           // 0x0040(0x0010)(ReferenceParm)
	struct FSTRUCT_LevelInfo                      CallFunc_GetDataTableRowFromName_OutRow;           // 0x0050(0x00C8)(HasGetValueTypeHash)
	bool                                          CallFunc_GetDataTableRowFromName_ReturnValue;      // 0x0118(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_119[0x3];                                      // 0x0119(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   CallFunc_Array_Get_Item;                           // 0x011C(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Length_ReturnValue;                 // 0x0124(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_TextText_ReturnValue;          // 0x0128(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Less_IntInt_ReturnValue;                  // 0x0129(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_12A[0x6];                                      // 0x012A(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class UGameInstance*                          CallFunc_GetGameInstance_ReturnValue;              // 0x0130(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UGI_SinglePlayer_C*                     K2Node_DynamicCast_AsGI_Single_Player;             // 0x0138(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0140(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(WIDGET_AutoMap_C_DisplayNameToLevelName) == 0x000008, "Wrong alignment on WIDGET_AutoMap_C_DisplayNameToLevelName");
static_assert(sizeof(WIDGET_AutoMap_C_DisplayNameToLevelName) == 0x000148, "Wrong size on WIDGET_AutoMap_C_DisplayNameToLevelName");
static_assert(offsetof(WIDGET_AutoMap_C_DisplayNameToLevelName, DisplayName) == 0x000000, "Member 'WIDGET_AutoMap_C_DisplayNameToLevelName::DisplayName' has a wrong offset!");
static_assert(offsetof(WIDGET_AutoMap_C_DisplayNameToLevelName, LevelName) == 0x000018, "Member 'WIDGET_AutoMap_C_DisplayNameToLevelName::LevelName' has a wrong offset!");
static_assert(offsetof(WIDGET_AutoMap_C_DisplayNameToLevelName, CurrentLevelName) == 0x000020, "Member 'WIDGET_AutoMap_C_DisplayNameToLevelName::CurrentLevelName' has a wrong offset!");
static_assert(offsetof(WIDGET_AutoMap_C_DisplayNameToLevelName, GameInstance) == 0x000028, "Member 'WIDGET_AutoMap_C_DisplayNameToLevelName::GameInstance' has a wrong offset!");
static_assert(offsetof(WIDGET_AutoMap_C_DisplayNameToLevelName, Temp_int_Array_Index_Variable) == 0x000030, "Member 'WIDGET_AutoMap_C_DisplayNameToLevelName::Temp_int_Array_Index_Variable' has a wrong offset!");
static_assert(offsetof(WIDGET_AutoMap_C_DisplayNameToLevelName, Temp_int_Loop_Counter_Variable) == 0x000034, "Member 'WIDGET_AutoMap_C_DisplayNameToLevelName::Temp_int_Loop_Counter_Variable' has a wrong offset!");
static_assert(offsetof(WIDGET_AutoMap_C_DisplayNameToLevelName, CallFunc_Add_IntInt_ReturnValue) == 0x000038, "Member 'WIDGET_AutoMap_C_DisplayNameToLevelName::CallFunc_Add_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(WIDGET_AutoMap_C_DisplayNameToLevelName, CallFunc_GetVisitedLevels_VisitedLevels) == 0x000040, "Member 'WIDGET_AutoMap_C_DisplayNameToLevelName::CallFunc_GetVisitedLevels_VisitedLevels' has a wrong offset!");
static_assert(offsetof(WIDGET_AutoMap_C_DisplayNameToLevelName, CallFunc_GetDataTableRowFromName_OutRow) == 0x000050, "Member 'WIDGET_AutoMap_C_DisplayNameToLevelName::CallFunc_GetDataTableRowFromName_OutRow' has a wrong offset!");
static_assert(offsetof(WIDGET_AutoMap_C_DisplayNameToLevelName, CallFunc_GetDataTableRowFromName_ReturnValue) == 0x000118, "Member 'WIDGET_AutoMap_C_DisplayNameToLevelName::CallFunc_GetDataTableRowFromName_ReturnValue' has a wrong offset!");
static_assert(offsetof(WIDGET_AutoMap_C_DisplayNameToLevelName, CallFunc_Array_Get_Item) == 0x00011C, "Member 'WIDGET_AutoMap_C_DisplayNameToLevelName::CallFunc_Array_Get_Item' has a wrong offset!");
static_assert(offsetof(WIDGET_AutoMap_C_DisplayNameToLevelName, CallFunc_Array_Length_ReturnValue) == 0x000124, "Member 'WIDGET_AutoMap_C_DisplayNameToLevelName::CallFunc_Array_Length_ReturnValue' has a wrong offset!");
static_assert(offsetof(WIDGET_AutoMap_C_DisplayNameToLevelName, CallFunc_EqualEqual_TextText_ReturnValue) == 0x000128, "Member 'WIDGET_AutoMap_C_DisplayNameToLevelName::CallFunc_EqualEqual_TextText_ReturnValue' has a wrong offset!");
static_assert(offsetof(WIDGET_AutoMap_C_DisplayNameToLevelName, CallFunc_Less_IntInt_ReturnValue) == 0x000129, "Member 'WIDGET_AutoMap_C_DisplayNameToLevelName::CallFunc_Less_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(WIDGET_AutoMap_C_DisplayNameToLevelName, CallFunc_GetGameInstance_ReturnValue) == 0x000130, "Member 'WIDGET_AutoMap_C_DisplayNameToLevelName::CallFunc_GetGameInstance_ReturnValue' has a wrong offset!");
static_assert(offsetof(WIDGET_AutoMap_C_DisplayNameToLevelName, K2Node_DynamicCast_AsGI_Single_Player) == 0x000138, "Member 'WIDGET_AutoMap_C_DisplayNameToLevelName::K2Node_DynamicCast_AsGI_Single_Player' has a wrong offset!");
static_assert(offsetof(WIDGET_AutoMap_C_DisplayNameToLevelName, K2Node_DynamicCast_bSuccess) == 0x000140, "Member 'WIDGET_AutoMap_C_DisplayNameToLevelName::K2Node_DynamicCast_bSuccess' has a wrong offset!");

// Function WIDGET_AutoMap.WIDGET_AutoMap_C.CenterCaptureCameraOnPlayer
// 0x00E0 (0x00E0 - 0x0000)
struct WIDGET_AutoMap_C_CenterCaptureCameraOnPlayer final
{
public:
	class USceneCaptureComponent2D*               CaptureComponent;                                  // 0x0000(0x0008)(Edit, BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class USceneCaptureComponent2D*               CallFunc_GetCaptureComponent_CaptureComponent;     // 0x0008(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_K2_GetComponentLocation_ReturnValue;      // 0x0010(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector_X;                            // 0x001C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector_Y;                            // 0x0020(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector_Z;                            // 0x0024(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class APawn*                                  CallFunc_GetPlayerPawn_ReturnValue;                // 0x0028(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_K2_GetActorLocation_ReturnValue;          // 0x0030(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector_X_1;                          // 0x003C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector_Y_1;                          // 0x0040(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector_Z_1;                          // 0x0044(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_MakeVector_ReturnValue;                   // 0x0048(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FHitResult                             CallFunc_K2_SetWorldLocation_SweepHitResult;       // 0x0054(0x0088)(IsPlainOldData, NoDestructor, ContainsInstancedReference)
};
static_assert(alignof(WIDGET_AutoMap_C_CenterCaptureCameraOnPlayer) == 0x000008, "Wrong alignment on WIDGET_AutoMap_C_CenterCaptureCameraOnPlayer");
static_assert(sizeof(WIDGET_AutoMap_C_CenterCaptureCameraOnPlayer) == 0x0000E0, "Wrong size on WIDGET_AutoMap_C_CenterCaptureCameraOnPlayer");
static_assert(offsetof(WIDGET_AutoMap_C_CenterCaptureCameraOnPlayer, CaptureComponent) == 0x000000, "Member 'WIDGET_AutoMap_C_CenterCaptureCameraOnPlayer::CaptureComponent' has a wrong offset!");
static_assert(offsetof(WIDGET_AutoMap_C_CenterCaptureCameraOnPlayer, CallFunc_GetCaptureComponent_CaptureComponent) == 0x000008, "Member 'WIDGET_AutoMap_C_CenterCaptureCameraOnPlayer::CallFunc_GetCaptureComponent_CaptureComponent' has a wrong offset!");
static_assert(offsetof(WIDGET_AutoMap_C_CenterCaptureCameraOnPlayer, CallFunc_K2_GetComponentLocation_ReturnValue) == 0x000010, "Member 'WIDGET_AutoMap_C_CenterCaptureCameraOnPlayer::CallFunc_K2_GetComponentLocation_ReturnValue' has a wrong offset!");
static_assert(offsetof(WIDGET_AutoMap_C_CenterCaptureCameraOnPlayer, CallFunc_BreakVector_X) == 0x00001C, "Member 'WIDGET_AutoMap_C_CenterCaptureCameraOnPlayer::CallFunc_BreakVector_X' has a wrong offset!");
static_assert(offsetof(WIDGET_AutoMap_C_CenterCaptureCameraOnPlayer, CallFunc_BreakVector_Y) == 0x000020, "Member 'WIDGET_AutoMap_C_CenterCaptureCameraOnPlayer::CallFunc_BreakVector_Y' has a wrong offset!");
static_assert(offsetof(WIDGET_AutoMap_C_CenterCaptureCameraOnPlayer, CallFunc_BreakVector_Z) == 0x000024, "Member 'WIDGET_AutoMap_C_CenterCaptureCameraOnPlayer::CallFunc_BreakVector_Z' has a wrong offset!");
static_assert(offsetof(WIDGET_AutoMap_C_CenterCaptureCameraOnPlayer, CallFunc_GetPlayerPawn_ReturnValue) == 0x000028, "Member 'WIDGET_AutoMap_C_CenterCaptureCameraOnPlayer::CallFunc_GetPlayerPawn_ReturnValue' has a wrong offset!");
static_assert(offsetof(WIDGET_AutoMap_C_CenterCaptureCameraOnPlayer, CallFunc_K2_GetActorLocation_ReturnValue) == 0x000030, "Member 'WIDGET_AutoMap_C_CenterCaptureCameraOnPlayer::CallFunc_K2_GetActorLocation_ReturnValue' has a wrong offset!");
static_assert(offsetof(WIDGET_AutoMap_C_CenterCaptureCameraOnPlayer, CallFunc_BreakVector_X_1) == 0x00003C, "Member 'WIDGET_AutoMap_C_CenterCaptureCameraOnPlayer::CallFunc_BreakVector_X_1' has a wrong offset!");
static_assert(offsetof(WIDGET_AutoMap_C_CenterCaptureCameraOnPlayer, CallFunc_BreakVector_Y_1) == 0x000040, "Member 'WIDGET_AutoMap_C_CenterCaptureCameraOnPlayer::CallFunc_BreakVector_Y_1' has a wrong offset!");
static_assert(offsetof(WIDGET_AutoMap_C_CenterCaptureCameraOnPlayer, CallFunc_BreakVector_Z_1) == 0x000044, "Member 'WIDGET_AutoMap_C_CenterCaptureCameraOnPlayer::CallFunc_BreakVector_Z_1' has a wrong offset!");
static_assert(offsetof(WIDGET_AutoMap_C_CenterCaptureCameraOnPlayer, CallFunc_MakeVector_ReturnValue) == 0x000048, "Member 'WIDGET_AutoMap_C_CenterCaptureCameraOnPlayer::CallFunc_MakeVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(WIDGET_AutoMap_C_CenterCaptureCameraOnPlayer, CallFunc_K2_SetWorldLocation_SweepHitResult) == 0x000054, "Member 'WIDGET_AutoMap_C_CenterCaptureCameraOnPlayer::CallFunc_K2_SetWorldLocation_SweepHitResult' has a wrong offset!");

// Function WIDGET_AutoMap.WIDGET_AutoMap_C.SetListeningForWaypointInput
// 0x0005 (0x0005 - 0x0000)
struct WIDGET_AutoMap_C_SetListeningForWaypointInput final
{
public:
	bool                                          IsAddingWaypoint;                                  // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Temp_bool_Variable;                                // 0x0001(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	ESlateVisibility                              Temp_byte_Variable;                                // 0x0002(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ESlateVisibility                              Temp_byte_Variable_1;                              // 0x0003(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ESlateVisibility                              K2Node_Select_Default;                             // 0x0004(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(WIDGET_AutoMap_C_SetListeningForWaypointInput) == 0x000001, "Wrong alignment on WIDGET_AutoMap_C_SetListeningForWaypointInput");
static_assert(sizeof(WIDGET_AutoMap_C_SetListeningForWaypointInput) == 0x000005, "Wrong size on WIDGET_AutoMap_C_SetListeningForWaypointInput");
static_assert(offsetof(WIDGET_AutoMap_C_SetListeningForWaypointInput, IsAddingWaypoint) == 0x000000, "Member 'WIDGET_AutoMap_C_SetListeningForWaypointInput::IsAddingWaypoint' has a wrong offset!");
static_assert(offsetof(WIDGET_AutoMap_C_SetListeningForWaypointInput, Temp_bool_Variable) == 0x000001, "Member 'WIDGET_AutoMap_C_SetListeningForWaypointInput::Temp_bool_Variable' has a wrong offset!");
static_assert(offsetof(WIDGET_AutoMap_C_SetListeningForWaypointInput, Temp_byte_Variable) == 0x000002, "Member 'WIDGET_AutoMap_C_SetListeningForWaypointInput::Temp_byte_Variable' has a wrong offset!");
static_assert(offsetof(WIDGET_AutoMap_C_SetListeningForWaypointInput, Temp_byte_Variable_1) == 0x000003, "Member 'WIDGET_AutoMap_C_SetListeningForWaypointInput::Temp_byte_Variable_1' has a wrong offset!");
static_assert(offsetof(WIDGET_AutoMap_C_SetListeningForWaypointInput, K2Node_Select_Default) == 0x000004, "Member 'WIDGET_AutoMap_C_SetListeningForWaypointInput::K2Node_Select_Default' has a wrong offset!");

// Function WIDGET_AutoMap.WIDGET_AutoMap_C.GetWorldPositionFromMousePosition
// 0x002C (0x002C - 0x0000)
struct WIDGET_AutoMap_C_GetWorldPositionFromMousePosition final
{
public:
	struct FVector2D                              ScreenPosition;                                    // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                WorldLocation;                                     // 0x0008(0x000C)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_GetTextureCoordsFromScreenPoint_ValidCoords; // 0x0014(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_15[0x3];                                       // 0x0015(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector2D                              CallFunc_GetTextureCoordsFromScreenPoint_TexCoords; // 0x0018(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_GetWorldLocationFromTextureCoords_WorldLocation; // 0x0020(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(WIDGET_AutoMap_C_GetWorldPositionFromMousePosition) == 0x000004, "Wrong alignment on WIDGET_AutoMap_C_GetWorldPositionFromMousePosition");
static_assert(sizeof(WIDGET_AutoMap_C_GetWorldPositionFromMousePosition) == 0x00002C, "Wrong size on WIDGET_AutoMap_C_GetWorldPositionFromMousePosition");
static_assert(offsetof(WIDGET_AutoMap_C_GetWorldPositionFromMousePosition, ScreenPosition) == 0x000000, "Member 'WIDGET_AutoMap_C_GetWorldPositionFromMousePosition::ScreenPosition' has a wrong offset!");
static_assert(offsetof(WIDGET_AutoMap_C_GetWorldPositionFromMousePosition, WorldLocation) == 0x000008, "Member 'WIDGET_AutoMap_C_GetWorldPositionFromMousePosition::WorldLocation' has a wrong offset!");
static_assert(offsetof(WIDGET_AutoMap_C_GetWorldPositionFromMousePosition, CallFunc_GetTextureCoordsFromScreenPoint_ValidCoords) == 0x000014, "Member 'WIDGET_AutoMap_C_GetWorldPositionFromMousePosition::CallFunc_GetTextureCoordsFromScreenPoint_ValidCoords' has a wrong offset!");
static_assert(offsetof(WIDGET_AutoMap_C_GetWorldPositionFromMousePosition, CallFunc_GetTextureCoordsFromScreenPoint_TexCoords) == 0x000018, "Member 'WIDGET_AutoMap_C_GetWorldPositionFromMousePosition::CallFunc_GetTextureCoordsFromScreenPoint_TexCoords' has a wrong offset!");
static_assert(offsetof(WIDGET_AutoMap_C_GetWorldPositionFromMousePosition, CallFunc_GetWorldLocationFromTextureCoords_WorldLocation) == 0x000020, "Member 'WIDGET_AutoMap_C_GetWorldPositionFromMousePosition::CallFunc_GetWorldLocationFromTextureCoords_WorldLocation' has a wrong offset!");

// Function WIDGET_AutoMap.WIDGET_AutoMap_C.EVENT_WaypointRegion_OnMouseButtonDown
// 0x0218 (0x0218 - 0x0000)
struct WIDGET_AutoMap_C_EVENT_WaypointRegion_OnMouseButtonDown final
{
public:
	struct FGeometry                              MyGeometry;                                        // 0x0000(0x0038)(BlueprintVisible, BlueprintReadOnly, Parm, IsPlainOldData, NoDestructor)
	struct FPointerEvent                          MouseEvent;                                        // 0x0038(0x0070)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
	struct FEventReply                            ReturnValue;                                       // 0x00A8(0x00B8)(Parm, OutParm, ReturnParm)
	struct FEventReply                            CallFunc_Handled_ReturnValue;                      // 0x0160(0x00B8)()
};
static_assert(alignof(WIDGET_AutoMap_C_EVENT_WaypointRegion_OnMouseButtonDown) == 0x000008, "Wrong alignment on WIDGET_AutoMap_C_EVENT_WaypointRegion_OnMouseButtonDown");
static_assert(sizeof(WIDGET_AutoMap_C_EVENT_WaypointRegion_OnMouseButtonDown) == 0x000218, "Wrong size on WIDGET_AutoMap_C_EVENT_WaypointRegion_OnMouseButtonDown");
static_assert(offsetof(WIDGET_AutoMap_C_EVENT_WaypointRegion_OnMouseButtonDown, MyGeometry) == 0x000000, "Member 'WIDGET_AutoMap_C_EVENT_WaypointRegion_OnMouseButtonDown::MyGeometry' has a wrong offset!");
static_assert(offsetof(WIDGET_AutoMap_C_EVENT_WaypointRegion_OnMouseButtonDown, MouseEvent) == 0x000038, "Member 'WIDGET_AutoMap_C_EVENT_WaypointRegion_OnMouseButtonDown::MouseEvent' has a wrong offset!");
static_assert(offsetof(WIDGET_AutoMap_C_EVENT_WaypointRegion_OnMouseButtonDown, ReturnValue) == 0x0000A8, "Member 'WIDGET_AutoMap_C_EVENT_WaypointRegion_OnMouseButtonDown::ReturnValue' has a wrong offset!");
static_assert(offsetof(WIDGET_AutoMap_C_EVENT_WaypointRegion_OnMouseButtonDown, CallFunc_Handled_ReturnValue) == 0x000160, "Member 'WIDGET_AutoMap_C_EVENT_WaypointRegion_OnMouseButtonDown::CallFunc_Handled_ReturnValue' has a wrong offset!");

// Function WIDGET_AutoMap.WIDGET_AutoMap_C.RefreshCurrentMissionWaypointIcon
// 0x01A0 (0x01A0 - 0x0000)
struct WIDGET_AutoMap_C_RefreshCurrentMissionWaypointIcon final
{
public:
	TArray<class FString>                         WaypointLevelDisplayNames;                         // 0x0000(0x0010)(Edit, BlueprintVisible)
	struct FSTRUCT_MissionWaypointData            CurrentMissionWaypointEntry;                       // 0x0010(0x0030)(Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash)
	class UGI_SinglePlayer_C*                     GameInstance;                                      // 0x0040(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UDataTable*                             MissionWaypointDT;                                 // 0x0048(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Array_Index_Variable;                     // 0x0050(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Loop_Counter_Variable;                    // 0x0054(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue;                   // 0x0058(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_5C[0x4];                                       // 0x005C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FSTRUCT_LevelInfo                      CallFunc_GetDataTableRowFromName_OutRow;           // 0x0060(0x00C8)(HasGetValueTypeHash)
	bool                                          CallFunc_GetDataTableRowFromName_ReturnValue;      // 0x0128(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_HasCompletedStoryQuest_Completed;         // 0x0129(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_12A[0x2];                                      // 0x012A(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Array_AddUnique_ReturnValue;              // 0x012C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UGameInstance*                          CallFunc_GetGameInstance_ReturnValue;              // 0x0130(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UGI_SinglePlayer_C*                     K2Node_DynamicCast_AsGI_Single_Player;             // 0x0138(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0140(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_HasCompletedStoryQuest_Completed_1;       // 0x0141(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Not_PreBool_ReturnValue;                  // 0x0142(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_143[0x5];                                      // 0x0143(0x0005)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class FName>                           CallFunc_GetDataTableRowNames_OutRowNames;         // 0x0148(0x0010)(ReferenceParm)
	int32                                         CallFunc_Array_Length_ReturnValue;                 // 0x0158(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FName                                   CallFunc_Array_Get_Item;                           // 0x015C(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue;                  // 0x0164(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_165[0x3];                                      // 0x0165(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FSTRUCT_MissionWaypointData            CallFunc_GetDataTableRowFromName_OutRow_1;         // 0x0168(0x0030)(NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_GetDataTableRowFromName_ReturnValue_1;    // 0x0198(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(WIDGET_AutoMap_C_RefreshCurrentMissionWaypointIcon) == 0x000008, "Wrong alignment on WIDGET_AutoMap_C_RefreshCurrentMissionWaypointIcon");
static_assert(sizeof(WIDGET_AutoMap_C_RefreshCurrentMissionWaypointIcon) == 0x0001A0, "Wrong size on WIDGET_AutoMap_C_RefreshCurrentMissionWaypointIcon");
static_assert(offsetof(WIDGET_AutoMap_C_RefreshCurrentMissionWaypointIcon, WaypointLevelDisplayNames) == 0x000000, "Member 'WIDGET_AutoMap_C_RefreshCurrentMissionWaypointIcon::WaypointLevelDisplayNames' has a wrong offset!");
static_assert(offsetof(WIDGET_AutoMap_C_RefreshCurrentMissionWaypointIcon, CurrentMissionWaypointEntry) == 0x000010, "Member 'WIDGET_AutoMap_C_RefreshCurrentMissionWaypointIcon::CurrentMissionWaypointEntry' has a wrong offset!");
static_assert(offsetof(WIDGET_AutoMap_C_RefreshCurrentMissionWaypointIcon, GameInstance) == 0x000040, "Member 'WIDGET_AutoMap_C_RefreshCurrentMissionWaypointIcon::GameInstance' has a wrong offset!");
static_assert(offsetof(WIDGET_AutoMap_C_RefreshCurrentMissionWaypointIcon, MissionWaypointDT) == 0x000048, "Member 'WIDGET_AutoMap_C_RefreshCurrentMissionWaypointIcon::MissionWaypointDT' has a wrong offset!");
static_assert(offsetof(WIDGET_AutoMap_C_RefreshCurrentMissionWaypointIcon, Temp_int_Array_Index_Variable) == 0x000050, "Member 'WIDGET_AutoMap_C_RefreshCurrentMissionWaypointIcon::Temp_int_Array_Index_Variable' has a wrong offset!");
static_assert(offsetof(WIDGET_AutoMap_C_RefreshCurrentMissionWaypointIcon, Temp_int_Loop_Counter_Variable) == 0x000054, "Member 'WIDGET_AutoMap_C_RefreshCurrentMissionWaypointIcon::Temp_int_Loop_Counter_Variable' has a wrong offset!");
static_assert(offsetof(WIDGET_AutoMap_C_RefreshCurrentMissionWaypointIcon, CallFunc_Add_IntInt_ReturnValue) == 0x000058, "Member 'WIDGET_AutoMap_C_RefreshCurrentMissionWaypointIcon::CallFunc_Add_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(WIDGET_AutoMap_C_RefreshCurrentMissionWaypointIcon, CallFunc_GetDataTableRowFromName_OutRow) == 0x000060, "Member 'WIDGET_AutoMap_C_RefreshCurrentMissionWaypointIcon::CallFunc_GetDataTableRowFromName_OutRow' has a wrong offset!");
static_assert(offsetof(WIDGET_AutoMap_C_RefreshCurrentMissionWaypointIcon, CallFunc_GetDataTableRowFromName_ReturnValue) == 0x000128, "Member 'WIDGET_AutoMap_C_RefreshCurrentMissionWaypointIcon::CallFunc_GetDataTableRowFromName_ReturnValue' has a wrong offset!");
static_assert(offsetof(WIDGET_AutoMap_C_RefreshCurrentMissionWaypointIcon, CallFunc_HasCompletedStoryQuest_Completed) == 0x000129, "Member 'WIDGET_AutoMap_C_RefreshCurrentMissionWaypointIcon::CallFunc_HasCompletedStoryQuest_Completed' has a wrong offset!");
static_assert(offsetof(WIDGET_AutoMap_C_RefreshCurrentMissionWaypointIcon, CallFunc_Array_AddUnique_ReturnValue) == 0x00012C, "Member 'WIDGET_AutoMap_C_RefreshCurrentMissionWaypointIcon::CallFunc_Array_AddUnique_ReturnValue' has a wrong offset!");
static_assert(offsetof(WIDGET_AutoMap_C_RefreshCurrentMissionWaypointIcon, CallFunc_GetGameInstance_ReturnValue) == 0x000130, "Member 'WIDGET_AutoMap_C_RefreshCurrentMissionWaypointIcon::CallFunc_GetGameInstance_ReturnValue' has a wrong offset!");
static_assert(offsetof(WIDGET_AutoMap_C_RefreshCurrentMissionWaypointIcon, K2Node_DynamicCast_AsGI_Single_Player) == 0x000138, "Member 'WIDGET_AutoMap_C_RefreshCurrentMissionWaypointIcon::K2Node_DynamicCast_AsGI_Single_Player' has a wrong offset!");
static_assert(offsetof(WIDGET_AutoMap_C_RefreshCurrentMissionWaypointIcon, K2Node_DynamicCast_bSuccess) == 0x000140, "Member 'WIDGET_AutoMap_C_RefreshCurrentMissionWaypointIcon::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(WIDGET_AutoMap_C_RefreshCurrentMissionWaypointIcon, CallFunc_HasCompletedStoryQuest_Completed_1) == 0x000141, "Member 'WIDGET_AutoMap_C_RefreshCurrentMissionWaypointIcon::CallFunc_HasCompletedStoryQuest_Completed_1' has a wrong offset!");
static_assert(offsetof(WIDGET_AutoMap_C_RefreshCurrentMissionWaypointIcon, CallFunc_Not_PreBool_ReturnValue) == 0x000142, "Member 'WIDGET_AutoMap_C_RefreshCurrentMissionWaypointIcon::CallFunc_Not_PreBool_ReturnValue' has a wrong offset!");
static_assert(offsetof(WIDGET_AutoMap_C_RefreshCurrentMissionWaypointIcon, CallFunc_GetDataTableRowNames_OutRowNames) == 0x000148, "Member 'WIDGET_AutoMap_C_RefreshCurrentMissionWaypointIcon::CallFunc_GetDataTableRowNames_OutRowNames' has a wrong offset!");
static_assert(offsetof(WIDGET_AutoMap_C_RefreshCurrentMissionWaypointIcon, CallFunc_Array_Length_ReturnValue) == 0x000158, "Member 'WIDGET_AutoMap_C_RefreshCurrentMissionWaypointIcon::CallFunc_Array_Length_ReturnValue' has a wrong offset!");
static_assert(offsetof(WIDGET_AutoMap_C_RefreshCurrentMissionWaypointIcon, CallFunc_Array_Get_Item) == 0x00015C, "Member 'WIDGET_AutoMap_C_RefreshCurrentMissionWaypointIcon::CallFunc_Array_Get_Item' has a wrong offset!");
static_assert(offsetof(WIDGET_AutoMap_C_RefreshCurrentMissionWaypointIcon, CallFunc_Less_IntInt_ReturnValue) == 0x000164, "Member 'WIDGET_AutoMap_C_RefreshCurrentMissionWaypointIcon::CallFunc_Less_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(WIDGET_AutoMap_C_RefreshCurrentMissionWaypointIcon, CallFunc_GetDataTableRowFromName_OutRow_1) == 0x000168, "Member 'WIDGET_AutoMap_C_RefreshCurrentMissionWaypointIcon::CallFunc_GetDataTableRowFromName_OutRow_1' has a wrong offset!");
static_assert(offsetof(WIDGET_AutoMap_C_RefreshCurrentMissionWaypointIcon, CallFunc_GetDataTableRowFromName_ReturnValue_1) == 0x000198, "Member 'WIDGET_AutoMap_C_RefreshCurrentMissionWaypointIcon::CallFunc_GetDataTableRowFromName_ReturnValue_1' has a wrong offset!");

// Function WIDGET_AutoMap.WIDGET_AutoMap_C.EVENT_OnStoryQuestStateChanged
// 0x000C (0x000C - 0x0000)
struct WIDGET_AutoMap_C_EVENT_OnStoryQuestStateChanged final
{
public:
	class FName                                   StoryQuestName;                                    // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Value;                                             // 0x0008(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(WIDGET_AutoMap_C_EVENT_OnStoryQuestStateChanged) == 0x000004, "Wrong alignment on WIDGET_AutoMap_C_EVENT_OnStoryQuestStateChanged");
static_assert(sizeof(WIDGET_AutoMap_C_EVENT_OnStoryQuestStateChanged) == 0x00000C, "Wrong size on WIDGET_AutoMap_C_EVENT_OnStoryQuestStateChanged");
static_assert(offsetof(WIDGET_AutoMap_C_EVENT_OnStoryQuestStateChanged, StoryQuestName) == 0x000000, "Member 'WIDGET_AutoMap_C_EVENT_OnStoryQuestStateChanged::StoryQuestName' has a wrong offset!");
static_assert(offsetof(WIDGET_AutoMap_C_EVENT_OnStoryQuestStateChanged, Value) == 0x000008, "Member 'WIDGET_AutoMap_C_EVENT_OnStoryQuestStateChanged::Value' has a wrong offset!");

// Function WIDGET_AutoMap.WIDGET_AutoMap_C.InvokeNavManager
// 0x0028 (0x0028 - 0x0000)
struct WIDGET_AutoMap_C_InvokeNavManager final
{
public:
	bool                                          InputState;                                        // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	ENUM_MenuNavigationInput                      InputType;                                         // 0x0001(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_2[0x2];                                        // 0x0002(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         PanDirectionBit;                                   // 0x0004(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ENUM_CardinalDirection                        PanDirection;                                      // 0x0008(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Not_Int_ReturnValue;                      // 0x000C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_And_IntInt_ReturnValue;                   // 0x0010(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Or_IntInt_ReturnValue;                    // 0x0014(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_NotEqual_IntInt_ReturnValue;              // 0x0018(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_19[0x3];                                       // 0x0019(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Conv_ByteToInt_ReturnValue;               // 0x001C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_BitShiftLeft_ReturnValue;                 // 0x0020(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_SwitchEnum_CmpSuccess;                      // 0x0024(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(WIDGET_AutoMap_C_InvokeNavManager) == 0x000004, "Wrong alignment on WIDGET_AutoMap_C_InvokeNavManager");
static_assert(sizeof(WIDGET_AutoMap_C_InvokeNavManager) == 0x000028, "Wrong size on WIDGET_AutoMap_C_InvokeNavManager");
static_assert(offsetof(WIDGET_AutoMap_C_InvokeNavManager, InputState) == 0x000000, "Member 'WIDGET_AutoMap_C_InvokeNavManager::InputState' has a wrong offset!");
static_assert(offsetof(WIDGET_AutoMap_C_InvokeNavManager, InputType) == 0x000001, "Member 'WIDGET_AutoMap_C_InvokeNavManager::InputType' has a wrong offset!");
static_assert(offsetof(WIDGET_AutoMap_C_InvokeNavManager, PanDirectionBit) == 0x000004, "Member 'WIDGET_AutoMap_C_InvokeNavManager::PanDirectionBit' has a wrong offset!");
static_assert(offsetof(WIDGET_AutoMap_C_InvokeNavManager, PanDirection) == 0x000008, "Member 'WIDGET_AutoMap_C_InvokeNavManager::PanDirection' has a wrong offset!");
static_assert(offsetof(WIDGET_AutoMap_C_InvokeNavManager, CallFunc_Not_Int_ReturnValue) == 0x00000C, "Member 'WIDGET_AutoMap_C_InvokeNavManager::CallFunc_Not_Int_ReturnValue' has a wrong offset!");
static_assert(offsetof(WIDGET_AutoMap_C_InvokeNavManager, CallFunc_And_IntInt_ReturnValue) == 0x000010, "Member 'WIDGET_AutoMap_C_InvokeNavManager::CallFunc_And_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(WIDGET_AutoMap_C_InvokeNavManager, CallFunc_Or_IntInt_ReturnValue) == 0x000014, "Member 'WIDGET_AutoMap_C_InvokeNavManager::CallFunc_Or_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(WIDGET_AutoMap_C_InvokeNavManager, CallFunc_NotEqual_IntInt_ReturnValue) == 0x000018, "Member 'WIDGET_AutoMap_C_InvokeNavManager::CallFunc_NotEqual_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(WIDGET_AutoMap_C_InvokeNavManager, CallFunc_Conv_ByteToInt_ReturnValue) == 0x00001C, "Member 'WIDGET_AutoMap_C_InvokeNavManager::CallFunc_Conv_ByteToInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(WIDGET_AutoMap_C_InvokeNavManager, CallFunc_BitShiftLeft_ReturnValue) == 0x000020, "Member 'WIDGET_AutoMap_C_InvokeNavManager::CallFunc_BitShiftLeft_ReturnValue' has a wrong offset!");
static_assert(offsetof(WIDGET_AutoMap_C_InvokeNavManager, K2Node_SwitchEnum_CmpSuccess) == 0x000024, "Member 'WIDGET_AutoMap_C_InvokeNavManager::K2Node_SwitchEnum_CmpSuccess' has a wrong offset!");

// Function WIDGET_AutoMap.WIDGET_AutoMap_C.SetEditWaypointIndex
// 0x0A28 (0x0A28 - 0x0000)
struct WIDGET_AutoMap_C_SetEditWaypointIndex final
{
public:
	int32                                         WaypointIndex;                                     // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_GreaterEqual_IntInt_ReturnValue;          // 0x0004(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class USAVE_Settings_C*                       CallFunc_GetShockSettingsForCurrentUser_Settings;  // 0x0008(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FName                                   CallFunc_GetHUDColorTheme_Result;                  // 0x0010(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FSTRUCT_UserTintOption                 CallFunc_GetDataTableRowFromName_OutRow;           // 0x0018(0x0148)(HasGetValueTypeHash)
	bool                                          CallFunc_GetDataTableRowFromName_ReturnValue;      // 0x0160(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_161[0x3];                                      // 0x0161(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	TDelegate<void(class FText& Text, ETextCommit CommitMethod)> K2Node_CreateDelegate_OutputDelegate;              // 0x0164(0x0010)(ZeroConstructor, NoDestructor)
	uint8                                         Pad_174[0x4];                                      // 0x0174(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FSlateColor                            K2Node_MakeStruct_SlateColor;                      // 0x0178(0x0028)()
	struct FEditableTextBoxStyle                  K2Node_MakeStruct_EditableTextBoxStyle;            // 0x01A0(0x07F8)()
	TDelegate<void(class FText& Text, ETextCommit CommitMethod)> K2Node_CreateDelegate_OutputDelegate_1;            // 0x0998(0x0010)(ZeroConstructor, NoDestructor)
	TDelegate<void(class FText& Text)>            K2Node_CreateDelegate_OutputDelegate_2;            // 0x09A8(0x0010)(ZeroConstructor, NoDestructor)
	class FText                                   CallFunc_GetEmptyText_ReturnValue;                 // 0x09B8(0x0018)()
	TDelegate<void(class FText& Text)>            K2Node_CreateDelegate_OutputDelegate_3;            // 0x09D0(0x0010)(ZeroConstructor, NoDestructor)
	class APawn*                                  CallFunc_GetPlayerPawn_ReturnValue;                // 0x09E0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class APAWN_Hacker_Implant_C*                 K2Node_DynamicCast_AsPAWN_Hacker_Implant;          // 0x09E8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x09F0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_9F1[0x7];                                      // 0x09F1(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 CallFunc_GetWaypointMessageByIndex_OutMessage;     // 0x09F8(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	bool                                          CallFunc_GetWaypointMessageByIndex_ReturnValue;    // 0x0A08(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_A09[0x7];                                      // 0x0A09(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   CallFunc_Conv_StringToText_ReturnValue;            // 0x0A10(0x0018)()
};
static_assert(alignof(WIDGET_AutoMap_C_SetEditWaypointIndex) == 0x000008, "Wrong alignment on WIDGET_AutoMap_C_SetEditWaypointIndex");
static_assert(sizeof(WIDGET_AutoMap_C_SetEditWaypointIndex) == 0x000A28, "Wrong size on WIDGET_AutoMap_C_SetEditWaypointIndex");
static_assert(offsetof(WIDGET_AutoMap_C_SetEditWaypointIndex, WaypointIndex) == 0x000000, "Member 'WIDGET_AutoMap_C_SetEditWaypointIndex::WaypointIndex' has a wrong offset!");
static_assert(offsetof(WIDGET_AutoMap_C_SetEditWaypointIndex, CallFunc_GreaterEqual_IntInt_ReturnValue) == 0x000004, "Member 'WIDGET_AutoMap_C_SetEditWaypointIndex::CallFunc_GreaterEqual_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(WIDGET_AutoMap_C_SetEditWaypointIndex, CallFunc_GetShockSettingsForCurrentUser_Settings) == 0x000008, "Member 'WIDGET_AutoMap_C_SetEditWaypointIndex::CallFunc_GetShockSettingsForCurrentUser_Settings' has a wrong offset!");
static_assert(offsetof(WIDGET_AutoMap_C_SetEditWaypointIndex, CallFunc_GetHUDColorTheme_Result) == 0x000010, "Member 'WIDGET_AutoMap_C_SetEditWaypointIndex::CallFunc_GetHUDColorTheme_Result' has a wrong offset!");
static_assert(offsetof(WIDGET_AutoMap_C_SetEditWaypointIndex, CallFunc_GetDataTableRowFromName_OutRow) == 0x000018, "Member 'WIDGET_AutoMap_C_SetEditWaypointIndex::CallFunc_GetDataTableRowFromName_OutRow' has a wrong offset!");
static_assert(offsetof(WIDGET_AutoMap_C_SetEditWaypointIndex, CallFunc_GetDataTableRowFromName_ReturnValue) == 0x000160, "Member 'WIDGET_AutoMap_C_SetEditWaypointIndex::CallFunc_GetDataTableRowFromName_ReturnValue' has a wrong offset!");
static_assert(offsetof(WIDGET_AutoMap_C_SetEditWaypointIndex, K2Node_CreateDelegate_OutputDelegate) == 0x000164, "Member 'WIDGET_AutoMap_C_SetEditWaypointIndex::K2Node_CreateDelegate_OutputDelegate' has a wrong offset!");
static_assert(offsetof(WIDGET_AutoMap_C_SetEditWaypointIndex, K2Node_MakeStruct_SlateColor) == 0x000178, "Member 'WIDGET_AutoMap_C_SetEditWaypointIndex::K2Node_MakeStruct_SlateColor' has a wrong offset!");
static_assert(offsetof(WIDGET_AutoMap_C_SetEditWaypointIndex, K2Node_MakeStruct_EditableTextBoxStyle) == 0x0001A0, "Member 'WIDGET_AutoMap_C_SetEditWaypointIndex::K2Node_MakeStruct_EditableTextBoxStyle' has a wrong offset!");
static_assert(offsetof(WIDGET_AutoMap_C_SetEditWaypointIndex, K2Node_CreateDelegate_OutputDelegate_1) == 0x000998, "Member 'WIDGET_AutoMap_C_SetEditWaypointIndex::K2Node_CreateDelegate_OutputDelegate_1' has a wrong offset!");
static_assert(offsetof(WIDGET_AutoMap_C_SetEditWaypointIndex, K2Node_CreateDelegate_OutputDelegate_2) == 0x0009A8, "Member 'WIDGET_AutoMap_C_SetEditWaypointIndex::K2Node_CreateDelegate_OutputDelegate_2' has a wrong offset!");
static_assert(offsetof(WIDGET_AutoMap_C_SetEditWaypointIndex, CallFunc_GetEmptyText_ReturnValue) == 0x0009B8, "Member 'WIDGET_AutoMap_C_SetEditWaypointIndex::CallFunc_GetEmptyText_ReturnValue' has a wrong offset!");
static_assert(offsetof(WIDGET_AutoMap_C_SetEditWaypointIndex, K2Node_CreateDelegate_OutputDelegate_3) == 0x0009D0, "Member 'WIDGET_AutoMap_C_SetEditWaypointIndex::K2Node_CreateDelegate_OutputDelegate_3' has a wrong offset!");
static_assert(offsetof(WIDGET_AutoMap_C_SetEditWaypointIndex, CallFunc_GetPlayerPawn_ReturnValue) == 0x0009E0, "Member 'WIDGET_AutoMap_C_SetEditWaypointIndex::CallFunc_GetPlayerPawn_ReturnValue' has a wrong offset!");
static_assert(offsetof(WIDGET_AutoMap_C_SetEditWaypointIndex, K2Node_DynamicCast_AsPAWN_Hacker_Implant) == 0x0009E8, "Member 'WIDGET_AutoMap_C_SetEditWaypointIndex::K2Node_DynamicCast_AsPAWN_Hacker_Implant' has a wrong offset!");
static_assert(offsetof(WIDGET_AutoMap_C_SetEditWaypointIndex, K2Node_DynamicCast_bSuccess) == 0x0009F0, "Member 'WIDGET_AutoMap_C_SetEditWaypointIndex::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(WIDGET_AutoMap_C_SetEditWaypointIndex, CallFunc_GetWaypointMessageByIndex_OutMessage) == 0x0009F8, "Member 'WIDGET_AutoMap_C_SetEditWaypointIndex::CallFunc_GetWaypointMessageByIndex_OutMessage' has a wrong offset!");
static_assert(offsetof(WIDGET_AutoMap_C_SetEditWaypointIndex, CallFunc_GetWaypointMessageByIndex_ReturnValue) == 0x000A08, "Member 'WIDGET_AutoMap_C_SetEditWaypointIndex::CallFunc_GetWaypointMessageByIndex_ReturnValue' has a wrong offset!");
static_assert(offsetof(WIDGET_AutoMap_C_SetEditWaypointIndex, CallFunc_Conv_StringToText_ReturnValue) == 0x000A10, "Member 'WIDGET_AutoMap_C_SetEditWaypointIndex::CallFunc_Conv_StringToText_ReturnValue' has a wrong offset!");

// Function WIDGET_AutoMap.WIDGET_AutoMap_C.OnWaypointTextChanged
// 0x0040 (0x0040 - 0x0000)
struct WIDGET_AutoMap_C_OnWaypointTextChanged final
{
public:
	class FText                                   Text;                                              // 0x0000(0x0018)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
	class FString                                 CallFunc_Conv_TextToString_ReturnValue;            // 0x0018(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	class APawn*                                  CallFunc_GetPlayerPawn_ReturnValue;                // 0x0028(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class APAWN_Hacker_Implant_C*                 K2Node_DynamicCast_AsPAWN_Hacker_Implant;          // 0x0030(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0038(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_SetWaypointMessageByIndex_ReturnValue;    // 0x0039(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(WIDGET_AutoMap_C_OnWaypointTextChanged) == 0x000008, "Wrong alignment on WIDGET_AutoMap_C_OnWaypointTextChanged");
static_assert(sizeof(WIDGET_AutoMap_C_OnWaypointTextChanged) == 0x000040, "Wrong size on WIDGET_AutoMap_C_OnWaypointTextChanged");
static_assert(offsetof(WIDGET_AutoMap_C_OnWaypointTextChanged, Text) == 0x000000, "Member 'WIDGET_AutoMap_C_OnWaypointTextChanged::Text' has a wrong offset!");
static_assert(offsetof(WIDGET_AutoMap_C_OnWaypointTextChanged, CallFunc_Conv_TextToString_ReturnValue) == 0x000018, "Member 'WIDGET_AutoMap_C_OnWaypointTextChanged::CallFunc_Conv_TextToString_ReturnValue' has a wrong offset!");
static_assert(offsetof(WIDGET_AutoMap_C_OnWaypointTextChanged, CallFunc_GetPlayerPawn_ReturnValue) == 0x000028, "Member 'WIDGET_AutoMap_C_OnWaypointTextChanged::CallFunc_GetPlayerPawn_ReturnValue' has a wrong offset!");
static_assert(offsetof(WIDGET_AutoMap_C_OnWaypointTextChanged, K2Node_DynamicCast_AsPAWN_Hacker_Implant) == 0x000030, "Member 'WIDGET_AutoMap_C_OnWaypointTextChanged::K2Node_DynamicCast_AsPAWN_Hacker_Implant' has a wrong offset!");
static_assert(offsetof(WIDGET_AutoMap_C_OnWaypointTextChanged, K2Node_DynamicCast_bSuccess) == 0x000038, "Member 'WIDGET_AutoMap_C_OnWaypointTextChanged::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(WIDGET_AutoMap_C_OnWaypointTextChanged, CallFunc_SetWaypointMessageByIndex_ReturnValue) == 0x000039, "Member 'WIDGET_AutoMap_C_OnWaypointTextChanged::CallFunc_SetWaypointMessageByIndex_ReturnValue' has a wrong offset!");

// Function WIDGET_AutoMap.WIDGET_AutoMap_C.OnWaypointMessageCommitted
// 0x0020 (0x0020 - 0x0000)
struct WIDGET_AutoMap_C_OnWaypointMessageCommitted final
{
public:
	class FText                                   Text;                                              // 0x0000(0x0018)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
	ETextCommit                                   CommitMethod;                                      // 0x0018(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(WIDGET_AutoMap_C_OnWaypointMessageCommitted) == 0x000008, "Wrong alignment on WIDGET_AutoMap_C_OnWaypointMessageCommitted");
static_assert(sizeof(WIDGET_AutoMap_C_OnWaypointMessageCommitted) == 0x000020, "Wrong size on WIDGET_AutoMap_C_OnWaypointMessageCommitted");
static_assert(offsetof(WIDGET_AutoMap_C_OnWaypointMessageCommitted, Text) == 0x000000, "Member 'WIDGET_AutoMap_C_OnWaypointMessageCommitted::Text' has a wrong offset!");
static_assert(offsetof(WIDGET_AutoMap_C_OnWaypointMessageCommitted, CommitMethod) == 0x000018, "Member 'WIDGET_AutoMap_C_OnWaypointMessageCommitted::CommitMethod' has a wrong offset!");

}

