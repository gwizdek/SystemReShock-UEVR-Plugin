#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: FUNCLIB_CoreUtility

#include "Basic.hpp"

#include "FUNCLIB_CoreUtility_classes.hpp"
#include "FUNCLIB_CoreUtility_parameters.hpp"


namespace SDK
{

// Function FUNCLIB_CoreUtility.FUNCLIB_CoreUtility_C.GetStandardName
// (Static, Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// class FText                             FirstName                                              (BlueprintVisible, BlueprintReadOnly, Parm)
// class FText                             MiddleOrNickname                                       (BlueprintVisible, BlueprintReadOnly, Parm)
// class FText                             LastName                                               (BlueprintVisible, BlueprintReadOnly, Parm)
// class FText                             Title                                                  (BlueprintVisible, BlueprintReadOnly, Parm)
// class UObject*                          __WorldContext                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class FText                             Result                                                 (Parm, OutParm)

void UFUNCLIB_CoreUtility_C::GetStandardName(const class FText& FirstName, const class FText& MiddleOrNickname, const class FText& LastName, const class FText& Title, class UObject* __WorldContext, class FText* Result)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("FUNCLIB_CoreUtility_C", "GetStandardName");

	Params::FUNCLIB_CoreUtility_C_GetStandardName Parms{};

	Parms.FirstName = std::move(FirstName);
	Parms.MiddleOrNickname = std::move(MiddleOrNickname);
	Parms.LastName = std::move(LastName);
	Parms.Title = std::move(Title);
	Parms.__WorldContext = __WorldContext;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	if (Result != nullptr)
		*Result = std::move(Parms.Result);
}


// Function FUNCLIB_CoreUtility.FUNCLIB_CoreUtility_C.GetFullName
// (Static, Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// class FText                             FirstName                                              (BlueprintVisible, BlueprintReadOnly, Parm)
// class FText                             MiddleOrNickname                                       (BlueprintVisible, BlueprintReadOnly, Parm)
// class FText                             LastName                                               (BlueprintVisible, BlueprintReadOnly, Parm)
// class FText                             Title                                                  (BlueprintVisible, BlueprintReadOnly, Parm)
// class UObject*                          __WorldContext                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class FText                             Result                                                 (Parm, OutParm)

void UFUNCLIB_CoreUtility_C::GetFullName(const class FText& FirstName, const class FText& MiddleOrNickname, const class FText& LastName, const class FText& Title, class UObject* __WorldContext, class FText* Result)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("FUNCLIB_CoreUtility_C", "GetFullName");

	Params::FUNCLIB_CoreUtility_C_GetFullName Parms{};

	Parms.FirstName = std::move(FirstName);
	Parms.MiddleOrNickname = std::move(MiddleOrNickname);
	Parms.LastName = std::move(LastName);
	Parms.Title = std::move(Title);
	Parms.__WorldContext = __WorldContext;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	if (Result != nullptr)
		*Result = std::move(Parms.Result);
}


// Function FUNCLIB_CoreUtility.FUNCLIB_CoreUtility_C.SetVectorElementFromAxis
// (Static, Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// struct FVector                          Vector                                                 (BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// float                                   Value                                                  (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// ENUM_Axis                               Axis                                                   (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class UObject*                          __WorldContext                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UFUNCLIB_CoreUtility_C::SetVectorElementFromAxis(struct FVector& Vector, float Value, ENUM_Axis Axis, class UObject* __WorldContext)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("FUNCLIB_CoreUtility_C", "SetVectorElementFromAxis");

	Params::FUNCLIB_CoreUtility_C_SetVectorElementFromAxis Parms{};

	Parms.Vector = std::move(Vector);
	Parms.Value = Value;
	Parms.Axis = Axis;
	Parms.__WorldContext = __WorldContext;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Vector = std::move(Parms.Vector);
}


// Function FUNCLIB_CoreUtility.FUNCLIB_CoreUtility_C.GetVectorElementFromAxis
// (Static, Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// struct FVector                          Vector                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// ENUM_Axis                               Axis                                                   (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class UObject*                          __WorldContext                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// float                                   Result                                                 (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UFUNCLIB_CoreUtility_C::GetVectorElementFromAxis(const struct FVector& Vector, ENUM_Axis Axis, class UObject* __WorldContext, float* Result)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("FUNCLIB_CoreUtility_C", "GetVectorElementFromAxis");

	Params::FUNCLIB_CoreUtility_C_GetVectorElementFromAxis Parms{};

	Parms.Vector = std::move(Vector);
	Parms.Axis = Axis;
	Parms.__WorldContext = __WorldContext;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	if (Result != nullptr)
		*Result = Parms.Result;
}


// Function FUNCLIB_CoreUtility.FUNCLIB_CoreUtility_C.SetVector4ElementByIndex
// (Static, Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// struct FVector4                         Vector                                                 (BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// float                                   Element                                                (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// int32                                   Index_0                                                (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class UObject*                          __WorldContext                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UFUNCLIB_CoreUtility_C::SetVector4ElementByIndex(struct FVector4& Vector, float Element, int32 Index_0, class UObject* __WorldContext)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("FUNCLIB_CoreUtility_C", "SetVector4ElementByIndex");

	Params::FUNCLIB_CoreUtility_C_SetVector4ElementByIndex Parms{};

	Parms.Vector = std::move(Vector);
	Parms.Element = Element;
	Parms.Index_0 = Index_0;
	Parms.__WorldContext = __WorldContext;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Vector = std::move(Parms.Vector);
}


// Function FUNCLIB_CoreUtility.FUNCLIB_CoreUtility_C.GetBestAxisDirection
// (Static, Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// struct FVector                          InputDirection                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// float                                   Threshold                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class UObject*                          __WorldContext                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FVector                          AxisDirection                                          (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UFUNCLIB_CoreUtility_C::GetBestAxisDirection(const struct FVector& InputDirection, float Threshold, class UObject* __WorldContext, struct FVector* AxisDirection)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("FUNCLIB_CoreUtility_C", "GetBestAxisDirection");

	Params::FUNCLIB_CoreUtility_C_GetBestAxisDirection Parms{};

	Parms.InputDirection = std::move(InputDirection);
	Parms.Threshold = Threshold;
	Parms.__WorldContext = __WorldContext;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	if (AxisDirection != nullptr)
		*AxisDirection = std::move(Parms.AxisDirection);
}


// Function FUNCLIB_CoreUtility.FUNCLIB_CoreUtility_C.GetLargestAxesFromVector
// (Static, Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// struct FVector                          Vector                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class UObject*                          __WorldContext                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// ENUM_Axis                               AxisA                                                  (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// ENUM_Axis                               AxisB                                                  (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// ENUM_Axis                               AxisC                                                  (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UFUNCLIB_CoreUtility_C::GetLargestAxesFromVector(const struct FVector& Vector, class UObject* __WorldContext, ENUM_Axis* AxisA, ENUM_Axis* AxisB, ENUM_Axis* AxisC)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("FUNCLIB_CoreUtility_C", "GetLargestAxesFromVector");

	Params::FUNCLIB_CoreUtility_C_GetLargestAxesFromVector Parms{};

	Parms.Vector = std::move(Vector);
	Parms.__WorldContext = __WorldContext;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	if (AxisA != nullptr)
		*AxisA = Parms.AxisA;

	if (AxisB != nullptr)
		*AxisB = Parms.AxisB;

	if (AxisC != nullptr)
		*AxisC = Parms.AxisC;
}


// Function FUNCLIB_CoreUtility.FUNCLIB_CoreUtility_C.GetUnitVectorFromAxis
// (Static, Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// ENUM_Axis                               Axis                                                   (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class UObject*                          __WorldContext                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FVector                          Result                                                 (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UFUNCLIB_CoreUtility_C::GetUnitVectorFromAxis(ENUM_Axis Axis, class UObject* __WorldContext, struct FVector* Result)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("FUNCLIB_CoreUtility_C", "GetUnitVectorFromAxis");

	Params::FUNCLIB_CoreUtility_C_GetUnitVectorFromAxis Parms{};

	Parms.Axis = Axis;
	Parms.__WorldContext = __WorldContext;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	if (Result != nullptr)
		*Result = std::move(Parms.Result);
}


// Function FUNCLIB_CoreUtility.FUNCLIB_CoreUtility_C.GetTextureSizeX
// (Static, Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// class UTexture*                         Texture                                                (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class UObject*                          __WorldContext                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// int32                                   SizeX                                                  (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UFUNCLIB_CoreUtility_C::GetTextureSizeX(class UTexture* Texture, class UObject* __WorldContext, int32* SizeX)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("FUNCLIB_CoreUtility_C", "GetTextureSizeX");

	Params::FUNCLIB_CoreUtility_C_GetTextureSizeX Parms{};

	Parms.Texture = Texture;
	Parms.__WorldContext = __WorldContext;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	if (SizeX != nullptr)
		*SizeX = Parms.SizeX;
}


// Function FUNCLIB_CoreUtility.FUNCLIB_CoreUtility_C.GetTextureSizeY
// (Static, Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// class UTexture*                         Texture                                                (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class UObject*                          __WorldContext                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// int32                                   SizeY                                                  (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UFUNCLIB_CoreUtility_C::GetTextureSizeY(class UTexture* Texture, class UObject* __WorldContext, int32* SizeY)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("FUNCLIB_CoreUtility_C", "GetTextureSizeY");

	Params::FUNCLIB_CoreUtility_C_GetTextureSizeY Parms{};

	Parms.Texture = Texture;
	Parms.__WorldContext = __WorldContext;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	if (SizeY != nullptr)
		*SizeY = Parms.SizeY;
}


// Function FUNCLIB_CoreUtility.FUNCLIB_CoreUtility_C.GetSoundLoudness
// (Static, Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// struct FVector                          SourceLocation                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FVector                          TargetLocation                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// float                                   SoundRange                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// float                                   Obstruction                                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// float                                   Occlusion                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class UObject*                          __WorldContext                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// float                                   Result                                                 (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UFUNCLIB_CoreUtility_C::GetSoundLoudness(const struct FVector& SourceLocation, const struct FVector& TargetLocation, float SoundRange, float Obstruction, float Occlusion, class UObject* __WorldContext, float* Result)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("FUNCLIB_CoreUtility_C", "GetSoundLoudness");

	Params::FUNCLIB_CoreUtility_C_GetSoundLoudness Parms{};

	Parms.SourceLocation = std::move(SourceLocation);
	Parms.TargetLocation = std::move(TargetLocation);
	Parms.SoundRange = SoundRange;
	Parms.Obstruction = Obstruction;
	Parms.Occlusion = Occlusion;
	Parms.__WorldContext = __WorldContext;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	if (Result != nullptr)
		*Result = Parms.Result;
}


// Function FUNCLIB_CoreUtility.FUNCLIB_CoreUtility_C.SetSoundEffectParameters
// (Static, Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// class UAudioComponent*                  AudioComponent                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FSTRUCT_EffectParams             SoundParameters                                        (BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm, HasGetValueTypeHash)
// class UObject*                          __WorldContext                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UFUNCLIB_CoreUtility_C::SetSoundEffectParameters(class UAudioComponent* AudioComponent, struct FSTRUCT_EffectParams& SoundParameters, class UObject* __WorldContext)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("FUNCLIB_CoreUtility_C", "SetSoundEffectParameters");

	Params::FUNCLIB_CoreUtility_C_SetSoundEffectParameters Parms{};

	Parms.AudioComponent = AudioComponent;
	Parms.SoundParameters = std::move(SoundParameters);
	Parms.__WorldContext = __WorldContext;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	SoundParameters = std::move(Parms.SoundParameters);
}


// Function FUNCLIB_CoreUtility.FUNCLIB_CoreUtility_C.SetVoxelSoundEffectParameters
// (Static, Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// class UVoxelAudioComponent*             AudioComponent                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FSTRUCT_EffectParams             SoundParameters                                        (BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm, HasGetValueTypeHash)
// class UObject*                          __WorldContext                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UFUNCLIB_CoreUtility_C::SetVoxelSoundEffectParameters(class UVoxelAudioComponent* AudioComponent, struct FSTRUCT_EffectParams& SoundParameters, class UObject* __WorldContext)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("FUNCLIB_CoreUtility_C", "SetVoxelSoundEffectParameters");

	Params::FUNCLIB_CoreUtility_C_SetVoxelSoundEffectParameters Parms{};

	Parms.AudioComponent = AudioComponent;
	Parms.SoundParameters = std::move(SoundParameters);
	Parms.__WorldContext = __WorldContext;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	SoundParameters = std::move(Parms.SoundParameters);
}


// Function FUNCLIB_CoreUtility.FUNCLIB_CoreUtility_C.SetParticleEffectParameters
// (Static, Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// class UFXSystemComponent*               EffectsComponent                                       (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FSTRUCT_EffectParams             EffectParameters                                       (BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm, HasGetValueTypeHash)
// class UObject*                          __WorldContext                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UFUNCLIB_CoreUtility_C::SetParticleEffectParameters(class UFXSystemComponent* EffectsComponent, struct FSTRUCT_EffectParams& EffectParameters, class UObject* __WorldContext)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("FUNCLIB_CoreUtility_C", "SetParticleEffectParameters");

	Params::FUNCLIB_CoreUtility_C_SetParticleEffectParameters Parms{};

	Parms.EffectsComponent = EffectsComponent;
	Parms.EffectParameters = std::move(EffectParameters);
	Parms.__WorldContext = __WorldContext;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	EffectParameters = std::move(Parms.EffectParameters);
}


// Function FUNCLIB_CoreUtility.FUNCLIB_CoreUtility_C.GetClosestActor
// (Static, Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// class AActor*                           Actor                                                  (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// TArray<class AActor*>                   OtherActors                                            (BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
// class UObject*                          __WorldContext                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class AActor*                           ClosestActor                                           (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// float                                   DistanceSquared                                        (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UFUNCLIB_CoreUtility_C::GetClosestActor(class AActor* Actor, TArray<class AActor*>& OtherActors, class UObject* __WorldContext, class AActor** ClosestActor, float* DistanceSquared)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("FUNCLIB_CoreUtility_C", "GetClosestActor");

	Params::FUNCLIB_CoreUtility_C_GetClosestActor Parms{};

	Parms.Actor = Actor;
	Parms.OtherActors = std::move(OtherActors);
	Parms.__WorldContext = __WorldContext;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	OtherActors = std::move(Parms.OtherActors);

	if (ClosestActor != nullptr)
		*ClosestActor = Parms.ClosestActor;

	if (DistanceSquared != nullptr)
		*DistanceSquared = Parms.DistanceSquared;
}


// Function FUNCLIB_CoreUtility.FUNCLIB_CoreUtility_C.CreateRandomSeedForContext
// (Static, Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// class FString                           Context                                                (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, HasGetValueTypeHash)
// class UObject*                          __WorldContext                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// int32                                   Seed                                                   (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UFUNCLIB_CoreUtility_C::CreateRandomSeedForContext(const class FString& Context, class UObject* __WorldContext, int32* Seed)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("FUNCLIB_CoreUtility_C", "CreateRandomSeedForContext");

	Params::FUNCLIB_CoreUtility_C_CreateRandomSeedForContext Parms{};

	Parms.Context = std::move(Context);
	Parms.__WorldContext = __WorldContext;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	if (Seed != nullptr)
		*Seed = Parms.Seed;
}


// Function FUNCLIB_CoreUtility.FUNCLIB_CoreUtility_C.GetEnumText_GameDifficultyConfigCategory
// (Static, Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// ENUM_GameDifficultyConfigCategory       EnumGameDifficultyConfigCategory                       (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class UObject*                          __WorldContext                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class FText                             EnumText                                               (Parm, OutParm)

void UFUNCLIB_CoreUtility_C::GetEnumText_GameDifficultyConfigCategory(ENUM_GameDifficultyConfigCategory EnumGameDifficultyConfigCategory, class UObject* __WorldContext, class FText* EnumText)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("FUNCLIB_CoreUtility_C", "GetEnumText_GameDifficultyConfigCategory");

	Params::FUNCLIB_CoreUtility_C_GetEnumText_GameDifficultyConfigCategory Parms{};

	Parms.EnumGameDifficultyConfigCategory = EnumGameDifficultyConfigCategory;
	Parms.__WorldContext = __WorldContext;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	if (EnumText != nullptr)
		*EnumText = std::move(Parms.EnumText);
}


// Function FUNCLIB_CoreUtility.FUNCLIB_CoreUtility_C.GetEnumText_HotbarStyle
// (Static, Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// ENUM_HotbarStyle                        EnumHotbarStyle                                        (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class UObject*                          __WorldContext                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class FText                             EnumText                                               (Parm, OutParm)

void UFUNCLIB_CoreUtility_C::GetEnumText_HotbarStyle(ENUM_HotbarStyle EnumHotbarStyle, class UObject* __WorldContext, class FText* EnumText)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("FUNCLIB_CoreUtility_C", "GetEnumText_HotbarStyle");

	Params::FUNCLIB_CoreUtility_C_GetEnumText_HotbarStyle Parms{};

	Parms.EnumHotbarStyle = EnumHotbarStyle;
	Parms.__WorldContext = __WorldContext;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	if (EnumText != nullptr)
		*EnumText = std::move(Parms.EnumText);
}


// Function FUNCLIB_CoreUtility.FUNCLIB_CoreUtility_C.GetEnumText_LaserRapierColor
// (Static, Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// ENUM_LaserRapierColor                   EnumLaserRapierColor                                   (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class UObject*                          __WorldContext                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class FText                             EnumText                                               (Parm, OutParm)

void UFUNCLIB_CoreUtility_C::GetEnumText_LaserRapierColor(ENUM_LaserRapierColor EnumLaserRapierColor, class UObject* __WorldContext, class FText* EnumText)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("FUNCLIB_CoreUtility_C", "GetEnumText_LaserRapierColor");

	Params::FUNCLIB_CoreUtility_C_GetEnumText_LaserRapierColor Parms{};

	Parms.EnumLaserRapierColor = EnumLaserRapierColor;
	Parms.__WorldContext = __WorldContext;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	if (EnumText != nullptr)
		*EnumText = std::move(Parms.EnumText);
}


// Function FUNCLIB_CoreUtility.FUNCLIB_CoreUtility_C.GetEnumText_MediaTabFilterType
// (Static, Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// ENUM_MediaTabFilterType                 EnumMediaTabFilterType                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class UObject*                          __WorldContext                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class FText                             EnumText                                               (Parm, OutParm)

void UFUNCLIB_CoreUtility_C::GetEnumText_MediaTabFilterType(ENUM_MediaTabFilterType EnumMediaTabFilterType, class UObject* __WorldContext, class FText* EnumText)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("FUNCLIB_CoreUtility_C", "GetEnumText_MediaTabFilterType");

	Params::FUNCLIB_CoreUtility_C_GetEnumText_MediaTabFilterType Parms{};

	Parms.EnumMediaTabFilterType = EnumMediaTabFilterType;
	Parms.__WorldContext = __WorldContext;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	if (EnumText != nullptr)
		*EnumText = std::move(Parms.EnumText);
}


// Function FUNCLIB_CoreUtility.FUNCLIB_CoreUtility_C.GetEnumText_OffReducedNormal
// (Static, Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// ENUM_OffReducedNormal                   ENUM_OffReducedNormal                                  (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class UObject*                          __WorldContext                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class FText                             EnumText                                               (Parm, OutParm)

void UFUNCLIB_CoreUtility_C::GetEnumText_OffReducedNormal(ENUM_OffReducedNormal ENUM_OffReducedNormal, class UObject* __WorldContext, class FText* EnumText)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("FUNCLIB_CoreUtility_C", "GetEnumText_OffReducedNormal");

	Params::FUNCLIB_CoreUtility_C_GetEnumText_OffReducedNormal Parms{};

	Parms.ENUM_OffReducedNormal = ENUM_OffReducedNormal;
	Parms.__WorldContext = __WorldContext;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	if (EnumText != nullptr)
		*EnumText = std::move(Parms.EnumText);
}


// Function FUNCLIB_CoreUtility.FUNCLIB_CoreUtility_C.GetEnumText_OffLowMediumHigh
// (Static, Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// ENUM_OffLowMediumHigh                   EnumOffLowMediumHigh                                   (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class UObject*                          __WorldContext                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class FText                             EnumText                                               (Parm, OutParm)

void UFUNCLIB_CoreUtility_C::GetEnumText_OffLowMediumHigh(ENUM_OffLowMediumHigh EnumOffLowMediumHigh, class UObject* __WorldContext, class FText* EnumText)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("FUNCLIB_CoreUtility_C", "GetEnumText_OffLowMediumHigh");

	Params::FUNCLIB_CoreUtility_C_GetEnumText_OffLowMediumHigh Parms{};

	Parms.EnumOffLowMediumHigh = EnumOffLowMediumHigh;
	Parms.__WorldContext = __WorldContext;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	if (EnumText != nullptr)
		*EnumText = std::move(Parms.EnumText);
}


// Function FUNCLIB_CoreUtility.FUNCLIB_CoreUtility_C.GetEnumText_SaveLoad
// (Static, Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// ENUM_SaveLoad                           EnumSaveLoad                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class UObject*                          __WorldContext                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class FText                             EnumText                                               (Parm, OutParm)

void UFUNCLIB_CoreUtility_C::GetEnumText_SaveLoad(ENUM_SaveLoad EnumSaveLoad, class UObject* __WorldContext, class FText* EnumText)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("FUNCLIB_CoreUtility_C", "GetEnumText_SaveLoad");

	Params::FUNCLIB_CoreUtility_C_GetEnumText_SaveLoad Parms{};

	Parms.EnumSaveLoad = EnumSaveLoad;
	Parms.__WorldContext = __WorldContext;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	if (EnumText != nullptr)
		*EnumText = std::move(Parms.EnumText);
}


// Function FUNCLIB_CoreUtility.FUNCLIB_CoreUtility_C.GetEnumText_TargetIDTargetStatus
// (Static, Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// ENUM_TargetID_TargetStatus              EnumTargetIDTargetStatus                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class UObject*                          __WorldContext                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class FText                             EnumText                                               (Parm, OutParm)

void UFUNCLIB_CoreUtility_C::GetEnumText_TargetIDTargetStatus(ENUM_TargetID_TargetStatus EnumTargetIDTargetStatus, class UObject* __WorldContext, class FText* EnumText)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("FUNCLIB_CoreUtility_C", "GetEnumText_TargetIDTargetStatus");

	Params::FUNCLIB_CoreUtility_C_GetEnumText_TargetIDTargetStatus Parms{};

	Parms.EnumTargetIDTargetStatus = EnumTargetIDTargetStatus;
	Parms.__WorldContext = __WorldContext;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	if (EnumText != nullptr)
		*EnumText = std::move(Parms.EnumText);
}


// Function FUNCLIB_CoreUtility.FUNCLIB_CoreUtility_C.IsCinematicMontage
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// class UAnimMontage*                     Montage                                                (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class UObject*                          __WorldContext                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    Result                                                 (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void UFUNCLIB_CoreUtility_C::IsCinematicMontage(class UAnimMontage* Montage, class UObject* __WorldContext, bool* Result)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("FUNCLIB_CoreUtility_C", "IsCinematicMontage");

	Params::FUNCLIB_CoreUtility_C_IsCinematicMontage Parms{};

	Parms.Montage = Montage;
	Parms.__WorldContext = __WorldContext;

	UObject::ProcessEvent(Func, &Parms);

	if (Result != nullptr)
		*Result = Parms.Result;
}


// Function FUNCLIB_CoreUtility.FUNCLIB_CoreUtility_C.GetLevelNameByDeckSymbol
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// class FString                           DeckSymbol                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, HasGetValueTypeHash)
// class UObject*                          __WorldContext                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class FName                             LevelName                                              (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UFUNCLIB_CoreUtility_C::GetLevelNameByDeckSymbol(const class FString& DeckSymbol, class UObject* __WorldContext, class FName* LevelName)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("FUNCLIB_CoreUtility_C", "GetLevelNameByDeckSymbol");

	Params::FUNCLIB_CoreUtility_C_GetLevelNameByDeckSymbol Parms{};

	Parms.DeckSymbol = std::move(DeckSymbol);
	Parms.__WorldContext = __WorldContext;

	UObject::ProcessEvent(Func, &Parms);

	if (LevelName != nullptr)
		*LevelName = Parms.LevelName;
}

}

