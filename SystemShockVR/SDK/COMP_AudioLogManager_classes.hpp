#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: COMP_AudioLogManager

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "Engine_classes.hpp"
#include "ENUM_HackerGender_structs.hpp"


namespace SDK
{

// BlueprintGeneratedClass COMP_AudioLogManager.COMP_AudioLogManager_C
// 0x00A0 (0x0150 - 0x00B0)
class UCOMP_AudioLogManager_C final : public UActorComponent
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x00B0(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	class UAudioComponent*                        AudioComponent;                                    // 0x00B8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TMap<class USoundCue*, float>                 PlayingSoundCueTimestamps;                         // 0x00C0(0x0050)(Edit, BlueprintVisible, DisableEditOnInstance, SaveGame)
	float                                         PromptMediaTimestamp;                              // 0x0110(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, SaveGame, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_114[0x4];                                      // 0x0114(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UClass*                                 ActiveMediaItemClass;                              // 0x0118(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, SaveGame, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FName                                   TauntMediaRowName;                                 // 0x0120(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, SaveGame, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	FMulticastInlineDelegateProperty_             AudioLogCueStarted;                                // 0x0128(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)
	FMulticastInlineDelegateProperty_             AudioLogCueFinished;                               // 0x0138(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)
	struct FTimerHandle                           DisplayNoteTimerHandle;                            // 0x0148(0x0008)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)

public:
	void AudioLogCueFinished__DelegateSignature(class USoundCue* SoundCue);
	void AudioLogCueStarted__DelegateSignature(class USoundCue* SoundCue, float StartTime);
	void ExecuteUbergraph_COMP_AudioLogManager(int32 EntryPoint);
	void AsyncPlayAudioLogCue(TSoftObjectPtr<class USoundCue> SoundCue);
	void OnLoaded_9E3D1CD743D02197C125BF926FE28325(class UObject* Loaded);
	void TryResumeMedia();
	void PlayMediaFromItem(class UITEM_MediaBase_C* MediaItem, bool* Result);
	void PlayMediaFromTrap(const struct FDataTableRowHandle& MediaDataHandle, bool* Result);
	void CanPlayMedia(bool* Result);
	void OnMediaPromptOpened(class UClass* MediaItemClass);
	void OnMediaPromptClosed();
	void PlayAudioLogCue(class USoundCue* AudioLogCue);
	void ResumeAudioLogCue(class USoundCue* SoundCue, float StartTime);
	void ResumePreviousAudioLogCues();
	void TryResumeSubtitlesForActiveMedia(float StartTime);
	void TryStopCurrentAudioLogCue(bool* Result);
	void EVENT_OnAudioLogCueFinished();
	void ForceStopCurrentAudioLogCue(class APAWN_Hacker_Implant_C* HackerPawn);
	void CanStopCurrentMedia(class UAudioComponent* AudioComponent_0, bool* Result);
	void GetSoundCueFromActiveMedia(TSoftObjectPtr<class USoundCue>* SoundCue);
	void EVENT_OnNoteFinishedDisplaying();
	bool ShouldSaveComponent(struct FStreamingSaveGameComponentParams* Params_0);

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"COMP_AudioLogManager_C">();
	}
	static class UCOMP_AudioLogManager_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<UCOMP_AudioLogManager_C>();
	}
};
static_assert(alignof(UCOMP_AudioLogManager_C) == 0x000008, "Wrong alignment on UCOMP_AudioLogManager_C");
static_assert(sizeof(UCOMP_AudioLogManager_C) == 0x000150, "Wrong size on UCOMP_AudioLogManager_C");
static_assert(offsetof(UCOMP_AudioLogManager_C, UberGraphFrame) == 0x0000B0, "Member 'UCOMP_AudioLogManager_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(UCOMP_AudioLogManager_C, AudioComponent) == 0x0000B8, "Member 'UCOMP_AudioLogManager_C::AudioComponent' has a wrong offset!");
static_assert(offsetof(UCOMP_AudioLogManager_C, PlayingSoundCueTimestamps) == 0x0000C0, "Member 'UCOMP_AudioLogManager_C::PlayingSoundCueTimestamps' has a wrong offset!");
static_assert(offsetof(UCOMP_AudioLogManager_C, PromptMediaTimestamp) == 0x000110, "Member 'UCOMP_AudioLogManager_C::PromptMediaTimestamp' has a wrong offset!");
static_assert(offsetof(UCOMP_AudioLogManager_C, ActiveMediaItemClass) == 0x000118, "Member 'UCOMP_AudioLogManager_C::ActiveMediaItemClass' has a wrong offset!");
static_assert(offsetof(UCOMP_AudioLogManager_C, TauntMediaRowName) == 0x000120, "Member 'UCOMP_AudioLogManager_C::TauntMediaRowName' has a wrong offset!");
static_assert(offsetof(UCOMP_AudioLogManager_C, AudioLogCueStarted) == 0x000128, "Member 'UCOMP_AudioLogManager_C::AudioLogCueStarted' has a wrong offset!");
static_assert(offsetof(UCOMP_AudioLogManager_C, AudioLogCueFinished) == 0x000138, "Member 'UCOMP_AudioLogManager_C::AudioLogCueFinished' has a wrong offset!");
static_assert(offsetof(UCOMP_AudioLogManager_C, DisplayNoteTimerHandle) == 0x000148, "Member 'UCOMP_AudioLogManager_C::DisplayNoteTimerHandle' has a wrong offset!");

}

