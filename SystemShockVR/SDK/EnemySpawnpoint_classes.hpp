#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: EnemySpawnpoint

#include "Basic.hpp"

#include "ENUM_GameDifficulty_structs.hpp"
#include "STRUCT_EnemyClassWeight_structs.hpp"
#include "Engine_classes.hpp"


namespace SDK
{

// BlueprintGeneratedClass EnemySpawnpoint.EnemySpawnPoint_C
// 0x0058 (0x0278 - 0x0220)
class AEnemySpawnPoint_C final : public AActor
{
public:
	class UArrowComponent*                        Arrow;                                             // 0x0220(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UBillboardComponent*                    Billboard;                                         // 0x0228(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class APatrolNode_C*                          PatrolNode;                                        // 0x0230(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TSoftClassPtr<class UClass>                   LootItem;                                          // 0x0238(0x0028)(Edit, BlueprintVisible, HasGetValueTypeHash)
	ENUM_GameDifficulty                           MinCombatDifficulty;                               // 0x0260(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_261[0x7];                                      // 0x0261(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FSTRUCT_EnemyClassWeight>       EnemyTypes;                                        // 0x0268(0x0010)(Edit, BlueprintVisible)

public:
	void SpawnEnemy(class APAWN_Enemy_C** Enemy);
	void SpawnEnemyFromClass(class UClass* EnemyClass, class APAWN_Enemy_C** Enemy);
	void SpawnEnemyFromTypes(TArray<struct FSTRUCT_EnemyClassWeight>& ChosenEnemyTypes, class APAWN_Enemy_C** Enemy);
	void CanSpawnEnemies(bool* Result);
	void GetRandomEnemyIndex(TArray<struct FSTRUCT_EnemyClassWeight>& ChosenEnemyTypes, int32* EnemyIndex);
	void GetSpawnedEnemyName(class UClass* EnemyClass, class FName* EnemyName);

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"EnemySpawnPoint_C">();
	}
	static class AEnemySpawnPoint_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<AEnemySpawnPoint_C>();
	}
};
static_assert(alignof(AEnemySpawnPoint_C) == 0x000008, "Wrong alignment on AEnemySpawnPoint_C");
static_assert(sizeof(AEnemySpawnPoint_C) == 0x000278, "Wrong size on AEnemySpawnPoint_C");
static_assert(offsetof(AEnemySpawnPoint_C, Arrow) == 0x000220, "Member 'AEnemySpawnPoint_C::Arrow' has a wrong offset!");
static_assert(offsetof(AEnemySpawnPoint_C, Billboard) == 0x000228, "Member 'AEnemySpawnPoint_C::Billboard' has a wrong offset!");
static_assert(offsetof(AEnemySpawnPoint_C, PatrolNode) == 0x000230, "Member 'AEnemySpawnPoint_C::PatrolNode' has a wrong offset!");
static_assert(offsetof(AEnemySpawnPoint_C, LootItem) == 0x000238, "Member 'AEnemySpawnPoint_C::LootItem' has a wrong offset!");
static_assert(offsetof(AEnemySpawnPoint_C, MinCombatDifficulty) == 0x000260, "Member 'AEnemySpawnPoint_C::MinCombatDifficulty' has a wrong offset!");
static_assert(offsetof(AEnemySpawnPoint_C, EnemyTypes) == 0x000268, "Member 'AEnemySpawnPoint_C::EnemyTypes' has a wrong offset!");

}

