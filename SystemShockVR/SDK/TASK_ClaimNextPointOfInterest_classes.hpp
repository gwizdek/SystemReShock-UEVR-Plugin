#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: TASK_ClaimNextPointOfInterest

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "AIModule_classes.hpp"


namespace SDK
{

// BlueprintGeneratedClass TASK_ClaimNextPointOfInterest.TASK_ClaimNextPointOfInterest_C
// 0x0020 (0x00C8 - 0x00A8)
class UTASK_ClaimNextPointOfInterest_C final : public UBTTask_BlueprintBase
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x00A8(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	class APAWN_Enemy_C*                          EnemyPawn;                                         // 0x00B0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash)
	class ULocalBehaviorComponent_C*              NewLBC;                                            // 0x00B8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class ULocalBehaviorComponent_C*              OldLBC;                                            // 0x00C0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

public:
	void ExecuteUbergraph_TASK_ClaimNextPointOfInterest(int32 EntryPoint);
	void ReceiveExecuteAI(class AAIController* OwnerController, class APawn* ControlledPawn);

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"TASK_ClaimNextPointOfInterest_C">();
	}
	static class UTASK_ClaimNextPointOfInterest_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<UTASK_ClaimNextPointOfInterest_C>();
	}
};
static_assert(alignof(UTASK_ClaimNextPointOfInterest_C) == 0x000008, "Wrong alignment on UTASK_ClaimNextPointOfInterest_C");
static_assert(sizeof(UTASK_ClaimNextPointOfInterest_C) == 0x0000C8, "Wrong size on UTASK_ClaimNextPointOfInterest_C");
static_assert(offsetof(UTASK_ClaimNextPointOfInterest_C, UberGraphFrame) == 0x0000A8, "Member 'UTASK_ClaimNextPointOfInterest_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(UTASK_ClaimNextPointOfInterest_C, EnemyPawn) == 0x0000B0, "Member 'UTASK_ClaimNextPointOfInterest_C::EnemyPawn' has a wrong offset!");
static_assert(offsetof(UTASK_ClaimNextPointOfInterest_C, NewLBC) == 0x0000B8, "Member 'UTASK_ClaimNextPointOfInterest_C::NewLBC' has a wrong offset!");
static_assert(offsetof(UTASK_ClaimNextPointOfInterest_C, OldLBC) == 0x0000C0, "Member 'UTASK_ClaimNextPointOfInterest_C::OldLBC' has a wrong offset!");

}

