#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: COMP_PlayerCameraEffects

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "Engine_classes.hpp"
#include "STRUCT_CameraEffectInstance_structs.hpp"
#include "CoreUObject_structs.hpp"
#include "AttributeSystem_structs.hpp"
#include "UMG_structs.hpp"


namespace SDK
{

// BlueprintGeneratedClass COMP_PlayerCameraEffects.COMP_PlayerCameraEffects_C
// 0x01D8 (0x0288 - 0x00B0)
class UCOMP_PlayerCameraEffects_C final : public UActorComponent
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x00B0(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	class UCameraComponent*                       PlayerCamera;                                      // 0x00B8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class APAWN_Hacker_Simple_C*                  PlayerHackerPawn;                                  // 0x00C0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TArray<struct FSTRUCT_CameraEffectInstance>   BloodEffectInstances;                              // 0x00C8(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance)
	float                                         Blood__RampUp_Duration;                            // 0x00D8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Blood_RampDown_Duration;                           // 0x00DC(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Blood_Maintain_Duration;                           // 0x00E0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_E4[0x4];                                       // 0x00E4(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TMap<int32, struct FSTRUCT_CameraEffectInstance> DamageIndicatorInstances;                          // 0x00E8(0x0050)(Edit, BlueprintVisible, DisableEditOnInstance)
	float                                         DamageIndicator_RampUp_Duration;                   // 0x0138(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         DamageIndicator_RampDown_Duration;                 // 0x013C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         DamageIndicator_Maintain_Duration_Min;             // 0x0140(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         BlackVignette_RampUp_Duration;                     // 0x0144(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         BlackVignette_RampDown_Duration;                   // 0x0148(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         BlackVignette_Maintain_Duration;                   // 0x014C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         DeathVignette_StartTimestamp;                      // 0x0150(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         DeathVignette_Duration;                            // 0x0154(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         DeathVignette_StartValue;                          // 0x0158(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         LowHealthPulse_ThresholdRatio;                     // 0x015C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         LowHealthPulse_ValueAtZeroHealth;                  // 0x0160(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         LowHealthPulse_RelaxScale;                         // 0x0164(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         LowHealthPulse_RelaxTime;                          // 0x0168(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         LowHealthPulse_CurrentValue;                       // 0x016C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         LowHealthPulse_Velocity_In;                        // 0x0170(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         LowHealthPulse_Velocity_Out;                       // 0x0174(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         LowHealthPulse_DamageTimestamp;                    // 0x0178(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         DamageIndicator_Maintain_Duration_Max;             // 0x017C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         LowHealthPulse_TargetValue;                        // 0x0180(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_184[0x4];                                      // 0x0184(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FSTRUCT_CameraEffectInstance>   CameraShakeInstances;                              // 0x0188(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance)
	TArray<struct FVector>                        CameraShakeSinOffsets;                             // 0x0198(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance)
	float                                         CameraShakeFrequency;                              // 0x01A8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         MaxCameraShakeMagnitude;                           // 0x01AC(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         MaxCameraShakeDuration;                            // 0x01B0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          NeedsLookTranslationReset;                         // 0x01B4(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_1B5[0x3];                                      // 0x01B5(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FSTRUCT_CameraEffectInstance>   CameraHitReactInstances;                           // 0x01B8(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance)
	TArray<struct FVector>                        CameraHitReactRotAxes;                             // 0x01C8(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance)
	float                                         MaxCameraHitReactDuration;                         // 0x01D8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         MaxCameraHitReactAngle;                            // 0x01DC(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UCurveFloat*                            HitReactCurve;                                     // 0x01E0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          NeedsLookRotationReset;                            // 0x01E8(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_1E9[0x7];                                      // 0x01E9(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UCOMP_AttribManager_C*                  AttribManager;                                     // 0x01F0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TMap<class FName, class UAttribMod*>          PatchEffectMods;                                   // 0x01F8(0x0050)(Edit, BlueprintVisible, DisableEditOnInstance)
	bool                                          CyberspaceGreenGrid_IsReversed;                    // 0x0248(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_249[0x3];                                      // 0x0249(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CyberspaceGreenGrid_StartTimestamp;                // 0x024C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CyberspaceGreenGrid_Duration;                      // 0x0250(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_254[0x4];                                      // 0x0254(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UMaterialInstanceDynamic*               CyberspaceGreenGridMaterialInstance;               // 0x0258(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UCurveFloat*                            OriginalSceneAlphaCurve;                           // 0x0260(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UCurveFloat*                            SphereMaskRadiusCurve;                             // 0x0268(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         DisruptionGlitchAmount;                            // 0x0270(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         HealthGlitchAmount;                                // 0x0274(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         TeleportGlitchAmount;                              // 0x0278(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         LastHealthRatio;                                   // 0x027C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          WasGlitching;                                      // 0x0280(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)

public:
	void ExecuteUbergraph_COMP_PlayerCameraEffects(int32 EntryPoint);
	void ReceiveTick(float DeltaSeconds);
	void ReceiveBeginPlay();
	void BlindnessExpired();
	void BlindnessApplied();
	void BeginCyberspaceGreenGrid(bool Reversed);
	void VisionExpired();
	void VisionApplied();
	void MedipatchExpired();
	void MedipatchApplied();
	void DetoxExpired();
	void DetoxApplied();
	void StaminupExpired();
	void StaminupApplied();
	void BerserkApplied();
	void ClumsyExpired();
	void ClumsyApplied();
	void ReflexExpired();
	void ReflexApplied();
	void PsychosisExpired();
	void PsychosisApplied();
	void BerserkExpired();
	void AddScreenShakeEffect(float Scale, const struct FVector& Direction);
	void UpdateBloodEffects(bool ForceUpdate);
	void AddDamageEffects(float Damage, class UAttribDamageType* DamageType, class UOBJ_ImpactData_C* ImpactData, class AActor* SourceActor);
	void SetupAttribEvents();
	void GetRampUpRampDown(float StartTime, float CurrentTime, float MaintainDuration, float RampUpDuration, float RampDownDuration, float TargetValue, float* NewValue, bool* IsFinished);
	void UpdateDamageDirectionEffects();
	void UpdateDeathVignette();
	void GetRampUp(float StartTime, float CurrentTime, float MaintainTime, float RampUpTime, float TargetValue, float* NewValue, bool* IsFinished);
	void UpdateLowHealthPulse();
	void GetDamageDirectionIndex(class UOBJ_ImpactData_C* ImpactData, class AActor* SourceActor, int32* Result);
	void InitializeAttributeEvents();
	void EVENT_OnHealthChanged(float CurrValue, float LastValue, float MaxValue, EModApplyType ApplyType);
	void UpdateCameraShakeEffects(float DeltaTime);
	void AddScreenShakeEffectWithDuration(float Scale, float Duration, const struct FVector& Direction);
	void AddScreenHitReactEffect(float Scale, const struct FVector& Direction, bool IsHeadHit);
	void UpdateCameraHitReacts(float DeltaTime);
	void GetAttribRatio(class UAttributeDef* Attrib, float* Ratio);
	void GetAttribBonus(class UAttributeDef* Attrib, float* Bonus);
	void EVENT_OnDisableAttribChanged(float CurrValue, float LastValue);
	void EVENT_OnModApplied(class UAttribMod* AttribMod);
	void EVENT_OnModExpired(class UAttribMod* AttribMod);
	void BindAttributeApplyExpireEvents(class UAttributeDef* Attribute, class FName CategoryName);
	void OnPatchEffectAppliedOrExpired(class FName EffectCategory, bool Expired);
	void UpdateCyberspaceGreenGrid();
	void UpdateScreenGlitch(float DeltaTime);
	void AddTeleportScreenEffect();
	void ClearBloodEffects();

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"COMP_PlayerCameraEffects_C">();
	}
	static class UCOMP_PlayerCameraEffects_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<UCOMP_PlayerCameraEffects_C>();
	}
};
static_assert(alignof(UCOMP_PlayerCameraEffects_C) == 0x000008, "Wrong alignment on UCOMP_PlayerCameraEffects_C");
static_assert(sizeof(UCOMP_PlayerCameraEffects_C) == 0x000288, "Wrong size on UCOMP_PlayerCameraEffects_C");
static_assert(offsetof(UCOMP_PlayerCameraEffects_C, UberGraphFrame) == 0x0000B0, "Member 'UCOMP_PlayerCameraEffects_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(UCOMP_PlayerCameraEffects_C, PlayerCamera) == 0x0000B8, "Member 'UCOMP_PlayerCameraEffects_C::PlayerCamera' has a wrong offset!");
static_assert(offsetof(UCOMP_PlayerCameraEffects_C, PlayerHackerPawn) == 0x0000C0, "Member 'UCOMP_PlayerCameraEffects_C::PlayerHackerPawn' has a wrong offset!");
static_assert(offsetof(UCOMP_PlayerCameraEffects_C, BloodEffectInstances) == 0x0000C8, "Member 'UCOMP_PlayerCameraEffects_C::BloodEffectInstances' has a wrong offset!");
static_assert(offsetof(UCOMP_PlayerCameraEffects_C, Blood__RampUp_Duration) == 0x0000D8, "Member 'UCOMP_PlayerCameraEffects_C::Blood__RampUp_Duration' has a wrong offset!");
static_assert(offsetof(UCOMP_PlayerCameraEffects_C, Blood_RampDown_Duration) == 0x0000DC, "Member 'UCOMP_PlayerCameraEffects_C::Blood_RampDown_Duration' has a wrong offset!");
static_assert(offsetof(UCOMP_PlayerCameraEffects_C, Blood_Maintain_Duration) == 0x0000E0, "Member 'UCOMP_PlayerCameraEffects_C::Blood_Maintain_Duration' has a wrong offset!");
static_assert(offsetof(UCOMP_PlayerCameraEffects_C, DamageIndicatorInstances) == 0x0000E8, "Member 'UCOMP_PlayerCameraEffects_C::DamageIndicatorInstances' has a wrong offset!");
static_assert(offsetof(UCOMP_PlayerCameraEffects_C, DamageIndicator_RampUp_Duration) == 0x000138, "Member 'UCOMP_PlayerCameraEffects_C::DamageIndicator_RampUp_Duration' has a wrong offset!");
static_assert(offsetof(UCOMP_PlayerCameraEffects_C, DamageIndicator_RampDown_Duration) == 0x00013C, "Member 'UCOMP_PlayerCameraEffects_C::DamageIndicator_RampDown_Duration' has a wrong offset!");
static_assert(offsetof(UCOMP_PlayerCameraEffects_C, DamageIndicator_Maintain_Duration_Min) == 0x000140, "Member 'UCOMP_PlayerCameraEffects_C::DamageIndicator_Maintain_Duration_Min' has a wrong offset!");
static_assert(offsetof(UCOMP_PlayerCameraEffects_C, BlackVignette_RampUp_Duration) == 0x000144, "Member 'UCOMP_PlayerCameraEffects_C::BlackVignette_RampUp_Duration' has a wrong offset!");
static_assert(offsetof(UCOMP_PlayerCameraEffects_C, BlackVignette_RampDown_Duration) == 0x000148, "Member 'UCOMP_PlayerCameraEffects_C::BlackVignette_RampDown_Duration' has a wrong offset!");
static_assert(offsetof(UCOMP_PlayerCameraEffects_C, BlackVignette_Maintain_Duration) == 0x00014C, "Member 'UCOMP_PlayerCameraEffects_C::BlackVignette_Maintain_Duration' has a wrong offset!");
static_assert(offsetof(UCOMP_PlayerCameraEffects_C, DeathVignette_StartTimestamp) == 0x000150, "Member 'UCOMP_PlayerCameraEffects_C::DeathVignette_StartTimestamp' has a wrong offset!");
static_assert(offsetof(UCOMP_PlayerCameraEffects_C, DeathVignette_Duration) == 0x000154, "Member 'UCOMP_PlayerCameraEffects_C::DeathVignette_Duration' has a wrong offset!");
static_assert(offsetof(UCOMP_PlayerCameraEffects_C, DeathVignette_StartValue) == 0x000158, "Member 'UCOMP_PlayerCameraEffects_C::DeathVignette_StartValue' has a wrong offset!");
static_assert(offsetof(UCOMP_PlayerCameraEffects_C, LowHealthPulse_ThresholdRatio) == 0x00015C, "Member 'UCOMP_PlayerCameraEffects_C::LowHealthPulse_ThresholdRatio' has a wrong offset!");
static_assert(offsetof(UCOMP_PlayerCameraEffects_C, LowHealthPulse_ValueAtZeroHealth) == 0x000160, "Member 'UCOMP_PlayerCameraEffects_C::LowHealthPulse_ValueAtZeroHealth' has a wrong offset!");
static_assert(offsetof(UCOMP_PlayerCameraEffects_C, LowHealthPulse_RelaxScale) == 0x000164, "Member 'UCOMP_PlayerCameraEffects_C::LowHealthPulse_RelaxScale' has a wrong offset!");
static_assert(offsetof(UCOMP_PlayerCameraEffects_C, LowHealthPulse_RelaxTime) == 0x000168, "Member 'UCOMP_PlayerCameraEffects_C::LowHealthPulse_RelaxTime' has a wrong offset!");
static_assert(offsetof(UCOMP_PlayerCameraEffects_C, LowHealthPulse_CurrentValue) == 0x00016C, "Member 'UCOMP_PlayerCameraEffects_C::LowHealthPulse_CurrentValue' has a wrong offset!");
static_assert(offsetof(UCOMP_PlayerCameraEffects_C, LowHealthPulse_Velocity_In) == 0x000170, "Member 'UCOMP_PlayerCameraEffects_C::LowHealthPulse_Velocity_In' has a wrong offset!");
static_assert(offsetof(UCOMP_PlayerCameraEffects_C, LowHealthPulse_Velocity_Out) == 0x000174, "Member 'UCOMP_PlayerCameraEffects_C::LowHealthPulse_Velocity_Out' has a wrong offset!");
static_assert(offsetof(UCOMP_PlayerCameraEffects_C, LowHealthPulse_DamageTimestamp) == 0x000178, "Member 'UCOMP_PlayerCameraEffects_C::LowHealthPulse_DamageTimestamp' has a wrong offset!");
static_assert(offsetof(UCOMP_PlayerCameraEffects_C, DamageIndicator_Maintain_Duration_Max) == 0x00017C, "Member 'UCOMP_PlayerCameraEffects_C::DamageIndicator_Maintain_Duration_Max' has a wrong offset!");
static_assert(offsetof(UCOMP_PlayerCameraEffects_C, LowHealthPulse_TargetValue) == 0x000180, "Member 'UCOMP_PlayerCameraEffects_C::LowHealthPulse_TargetValue' has a wrong offset!");
static_assert(offsetof(UCOMP_PlayerCameraEffects_C, CameraShakeInstances) == 0x000188, "Member 'UCOMP_PlayerCameraEffects_C::CameraShakeInstances' has a wrong offset!");
static_assert(offsetof(UCOMP_PlayerCameraEffects_C, CameraShakeSinOffsets) == 0x000198, "Member 'UCOMP_PlayerCameraEffects_C::CameraShakeSinOffsets' has a wrong offset!");
static_assert(offsetof(UCOMP_PlayerCameraEffects_C, CameraShakeFrequency) == 0x0001A8, "Member 'UCOMP_PlayerCameraEffects_C::CameraShakeFrequency' has a wrong offset!");
static_assert(offsetof(UCOMP_PlayerCameraEffects_C, MaxCameraShakeMagnitude) == 0x0001AC, "Member 'UCOMP_PlayerCameraEffects_C::MaxCameraShakeMagnitude' has a wrong offset!");
static_assert(offsetof(UCOMP_PlayerCameraEffects_C, MaxCameraShakeDuration) == 0x0001B0, "Member 'UCOMP_PlayerCameraEffects_C::MaxCameraShakeDuration' has a wrong offset!");
static_assert(offsetof(UCOMP_PlayerCameraEffects_C, NeedsLookTranslationReset) == 0x0001B4, "Member 'UCOMP_PlayerCameraEffects_C::NeedsLookTranslationReset' has a wrong offset!");
static_assert(offsetof(UCOMP_PlayerCameraEffects_C, CameraHitReactInstances) == 0x0001B8, "Member 'UCOMP_PlayerCameraEffects_C::CameraHitReactInstances' has a wrong offset!");
static_assert(offsetof(UCOMP_PlayerCameraEffects_C, CameraHitReactRotAxes) == 0x0001C8, "Member 'UCOMP_PlayerCameraEffects_C::CameraHitReactRotAxes' has a wrong offset!");
static_assert(offsetof(UCOMP_PlayerCameraEffects_C, MaxCameraHitReactDuration) == 0x0001D8, "Member 'UCOMP_PlayerCameraEffects_C::MaxCameraHitReactDuration' has a wrong offset!");
static_assert(offsetof(UCOMP_PlayerCameraEffects_C, MaxCameraHitReactAngle) == 0x0001DC, "Member 'UCOMP_PlayerCameraEffects_C::MaxCameraHitReactAngle' has a wrong offset!");
static_assert(offsetof(UCOMP_PlayerCameraEffects_C, HitReactCurve) == 0x0001E0, "Member 'UCOMP_PlayerCameraEffects_C::HitReactCurve' has a wrong offset!");
static_assert(offsetof(UCOMP_PlayerCameraEffects_C, NeedsLookRotationReset) == 0x0001E8, "Member 'UCOMP_PlayerCameraEffects_C::NeedsLookRotationReset' has a wrong offset!");
static_assert(offsetof(UCOMP_PlayerCameraEffects_C, AttribManager) == 0x0001F0, "Member 'UCOMP_PlayerCameraEffects_C::AttribManager' has a wrong offset!");
static_assert(offsetof(UCOMP_PlayerCameraEffects_C, PatchEffectMods) == 0x0001F8, "Member 'UCOMP_PlayerCameraEffects_C::PatchEffectMods' has a wrong offset!");
static_assert(offsetof(UCOMP_PlayerCameraEffects_C, CyberspaceGreenGrid_IsReversed) == 0x000248, "Member 'UCOMP_PlayerCameraEffects_C::CyberspaceGreenGrid_IsReversed' has a wrong offset!");
static_assert(offsetof(UCOMP_PlayerCameraEffects_C, CyberspaceGreenGrid_StartTimestamp) == 0x00024C, "Member 'UCOMP_PlayerCameraEffects_C::CyberspaceGreenGrid_StartTimestamp' has a wrong offset!");
static_assert(offsetof(UCOMP_PlayerCameraEffects_C, CyberspaceGreenGrid_Duration) == 0x000250, "Member 'UCOMP_PlayerCameraEffects_C::CyberspaceGreenGrid_Duration' has a wrong offset!");
static_assert(offsetof(UCOMP_PlayerCameraEffects_C, CyberspaceGreenGridMaterialInstance) == 0x000258, "Member 'UCOMP_PlayerCameraEffects_C::CyberspaceGreenGridMaterialInstance' has a wrong offset!");
static_assert(offsetof(UCOMP_PlayerCameraEffects_C, OriginalSceneAlphaCurve) == 0x000260, "Member 'UCOMP_PlayerCameraEffects_C::OriginalSceneAlphaCurve' has a wrong offset!");
static_assert(offsetof(UCOMP_PlayerCameraEffects_C, SphereMaskRadiusCurve) == 0x000268, "Member 'UCOMP_PlayerCameraEffects_C::SphereMaskRadiusCurve' has a wrong offset!");
static_assert(offsetof(UCOMP_PlayerCameraEffects_C, DisruptionGlitchAmount) == 0x000270, "Member 'UCOMP_PlayerCameraEffects_C::DisruptionGlitchAmount' has a wrong offset!");
static_assert(offsetof(UCOMP_PlayerCameraEffects_C, HealthGlitchAmount) == 0x000274, "Member 'UCOMP_PlayerCameraEffects_C::HealthGlitchAmount' has a wrong offset!");
static_assert(offsetof(UCOMP_PlayerCameraEffects_C, TeleportGlitchAmount) == 0x000278, "Member 'UCOMP_PlayerCameraEffects_C::TeleportGlitchAmount' has a wrong offset!");
static_assert(offsetof(UCOMP_PlayerCameraEffects_C, LastHealthRatio) == 0x00027C, "Member 'UCOMP_PlayerCameraEffects_C::LastHealthRatio' has a wrong offset!");
static_assert(offsetof(UCOMP_PlayerCameraEffects_C, WasGlitching) == 0x000280, "Member 'UCOMP_PlayerCameraEffects_C::WasGlitching' has a wrong offset!");

}

