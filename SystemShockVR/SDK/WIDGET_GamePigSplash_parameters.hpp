#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: WIDGET_GamePigSplash

#include "Basic.hpp"

#include "SlateCore_structs.hpp"


namespace SDK::Params
{

// Function WIDGET_GamePigSplash.WIDGET_GamePigSplash_C.ExecuteUbergraph_WIDGET_GamePigSplash
// 0x0044 (0x0044 - 0x0000)
struct WIDGET_GamePigSplash_C_ExecuteUbergraph_WIDGET_GamePigSplash final
{
public:
	int32                                         EntryPoint;                                        // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Not_PreBool_ReturnValue;                  // 0x0004(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FGeometry                              K2Node_Event_MyGeometry;                           // 0x0008(0x0038)(IsPlainOldData, NoDestructor)
	float                                         K2Node_Event_InDeltaTime;                          // 0x0040(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(WIDGET_GamePigSplash_C_ExecuteUbergraph_WIDGET_GamePigSplash) == 0x000004, "Wrong alignment on WIDGET_GamePigSplash_C_ExecuteUbergraph_WIDGET_GamePigSplash");
static_assert(sizeof(WIDGET_GamePigSplash_C_ExecuteUbergraph_WIDGET_GamePigSplash) == 0x000044, "Wrong size on WIDGET_GamePigSplash_C_ExecuteUbergraph_WIDGET_GamePigSplash");
static_assert(offsetof(WIDGET_GamePigSplash_C_ExecuteUbergraph_WIDGET_GamePigSplash, EntryPoint) == 0x000000, "Member 'WIDGET_GamePigSplash_C_ExecuteUbergraph_WIDGET_GamePigSplash::EntryPoint' has a wrong offset!");
static_assert(offsetof(WIDGET_GamePigSplash_C_ExecuteUbergraph_WIDGET_GamePigSplash, CallFunc_Not_PreBool_ReturnValue) == 0x000004, "Member 'WIDGET_GamePigSplash_C_ExecuteUbergraph_WIDGET_GamePigSplash::CallFunc_Not_PreBool_ReturnValue' has a wrong offset!");
static_assert(offsetof(WIDGET_GamePigSplash_C_ExecuteUbergraph_WIDGET_GamePigSplash, K2Node_Event_MyGeometry) == 0x000008, "Member 'WIDGET_GamePigSplash_C_ExecuteUbergraph_WIDGET_GamePigSplash::K2Node_Event_MyGeometry' has a wrong offset!");
static_assert(offsetof(WIDGET_GamePigSplash_C_ExecuteUbergraph_WIDGET_GamePigSplash, K2Node_Event_InDeltaTime) == 0x000040, "Member 'WIDGET_GamePigSplash_C_ExecuteUbergraph_WIDGET_GamePigSplash::K2Node_Event_InDeltaTime' has a wrong offset!");

// Function WIDGET_GamePigSplash.WIDGET_GamePigSplash_C.Tick
// 0x003C (0x003C - 0x0000)
struct WIDGET_GamePigSplash_C_Tick final
{
public:
	struct FGeometry                              MyGeometry;                                        // 0x0000(0x0038)(BlueprintVisible, BlueprintReadOnly, Parm, IsPlainOldData, NoDestructor)
	float                                         InDeltaTime;                                       // 0x0038(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(WIDGET_GamePigSplash_C_Tick) == 0x000004, "Wrong alignment on WIDGET_GamePigSplash_C_Tick");
static_assert(sizeof(WIDGET_GamePigSplash_C_Tick) == 0x00003C, "Wrong size on WIDGET_GamePigSplash_C_Tick");
static_assert(offsetof(WIDGET_GamePigSplash_C_Tick, MyGeometry) == 0x000000, "Member 'WIDGET_GamePigSplash_C_Tick::MyGeometry' has a wrong offset!");
static_assert(offsetof(WIDGET_GamePigSplash_C_Tick, InDeltaTime) == 0x000038, "Member 'WIDGET_GamePigSplash_C_Tick::InDeltaTime' has a wrong offset!");

// Function WIDGET_GamePigSplash.WIDGET_GamePigSplash_C.UpdateSplashScreen
// 0x0028 (0x0028 - 0x0000)
struct WIDGET_GamePigSplash_C_UpdateSplashScreen final
{
public:
	float                                         Progress;                                          // 0x0000(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_GreaterEqual_FloatFloat_ReturnValue;      // 0x0004(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_Subtract_FloatFloat_ReturnValue;          // 0x0008(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_GetWorldDeltaSeconds_ReturnValue;         // 0x000C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Ease_ReturnValue;                         // 0x0010(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Subtract_FloatFloat_ReturnValue_1;        // 0x0014(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Divide_FloatFloat_ReturnValue;            // 0x0018(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_FMin_ReturnValue;                         // 0x001C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Greater_FloatFloat_ReturnValue;           // 0x0020(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_21[0x3];                                       // 0x0021(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_Add_FloatFloat_ReturnValue;               // 0x0024(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(WIDGET_GamePigSplash_C_UpdateSplashScreen) == 0x000004, "Wrong alignment on WIDGET_GamePigSplash_C_UpdateSplashScreen");
static_assert(sizeof(WIDGET_GamePigSplash_C_UpdateSplashScreen) == 0x000028, "Wrong size on WIDGET_GamePigSplash_C_UpdateSplashScreen");
static_assert(offsetof(WIDGET_GamePigSplash_C_UpdateSplashScreen, Progress) == 0x000000, "Member 'WIDGET_GamePigSplash_C_UpdateSplashScreen::Progress' has a wrong offset!");
static_assert(offsetof(WIDGET_GamePigSplash_C_UpdateSplashScreen, CallFunc_GreaterEqual_FloatFloat_ReturnValue) == 0x000004, "Member 'WIDGET_GamePigSplash_C_UpdateSplashScreen::CallFunc_GreaterEqual_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(WIDGET_GamePigSplash_C_UpdateSplashScreen, CallFunc_Subtract_FloatFloat_ReturnValue) == 0x000008, "Member 'WIDGET_GamePigSplash_C_UpdateSplashScreen::CallFunc_Subtract_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(WIDGET_GamePigSplash_C_UpdateSplashScreen, CallFunc_GetWorldDeltaSeconds_ReturnValue) == 0x00000C, "Member 'WIDGET_GamePigSplash_C_UpdateSplashScreen::CallFunc_GetWorldDeltaSeconds_ReturnValue' has a wrong offset!");
static_assert(offsetof(WIDGET_GamePigSplash_C_UpdateSplashScreen, CallFunc_Ease_ReturnValue) == 0x000010, "Member 'WIDGET_GamePigSplash_C_UpdateSplashScreen::CallFunc_Ease_ReturnValue' has a wrong offset!");
static_assert(offsetof(WIDGET_GamePigSplash_C_UpdateSplashScreen, CallFunc_Subtract_FloatFloat_ReturnValue_1) == 0x000014, "Member 'WIDGET_GamePigSplash_C_UpdateSplashScreen::CallFunc_Subtract_FloatFloat_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(WIDGET_GamePigSplash_C_UpdateSplashScreen, CallFunc_Divide_FloatFloat_ReturnValue) == 0x000018, "Member 'WIDGET_GamePigSplash_C_UpdateSplashScreen::CallFunc_Divide_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(WIDGET_GamePigSplash_C_UpdateSplashScreen, CallFunc_FMin_ReturnValue) == 0x00001C, "Member 'WIDGET_GamePigSplash_C_UpdateSplashScreen::CallFunc_FMin_ReturnValue' has a wrong offset!");
static_assert(offsetof(WIDGET_GamePigSplash_C_UpdateSplashScreen, CallFunc_Greater_FloatFloat_ReturnValue) == 0x000020, "Member 'WIDGET_GamePigSplash_C_UpdateSplashScreen::CallFunc_Greater_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(WIDGET_GamePigSplash_C_UpdateSplashScreen, CallFunc_Add_FloatFloat_ReturnValue) == 0x000024, "Member 'WIDGET_GamePigSplash_C_UpdateSplashScreen::CallFunc_Add_FloatFloat_ReturnValue' has a wrong offset!");

// Function WIDGET_GamePigSplash.WIDGET_GamePigSplash_C.ResetSplashScreen
// 0x0008 (0x0008 - 0x0000)
struct WIDGET_GamePigSplash_C_ResetSplashScreen final
{
public:
	class AACTOR_GamePigSplashScreenManager_C*    GamePigSplashActor;                                // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(WIDGET_GamePigSplash_C_ResetSplashScreen) == 0x000008, "Wrong alignment on WIDGET_GamePigSplash_C_ResetSplashScreen");
static_assert(sizeof(WIDGET_GamePigSplash_C_ResetSplashScreen) == 0x000008, "Wrong size on WIDGET_GamePigSplash_C_ResetSplashScreen");
static_assert(offsetof(WIDGET_GamePigSplash_C_ResetSplashScreen, GamePigSplashActor) == 0x000000, "Member 'WIDGET_GamePigSplash_C_ResetSplashScreen::GamePigSplashActor' has a wrong offset!");

}

