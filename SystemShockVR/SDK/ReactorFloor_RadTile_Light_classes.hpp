#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: ReactorFloor_RadTile_Light

#include "Basic.hpp"

#include "Engine_classes.hpp"


namespace SDK
{

// BlueprintGeneratedClass ReactorFloor_RadTile_Light.ReactorFloor_RadTile_Light_C
// 0x0030 (0x0260 - 0x0230)
class AReactorFloor_RadTile_Light_C final : public AStaticMeshActor
{
public:
	class UCOMP_VoxelCullable_C*                  COMP_VoxelCullable;                                // 0x0230(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UNiagaraComponent*                      NS_HeatColomn;                                     // 0x0238(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UObject*                                COMP_StaticHazardVolume;                           // 0x0240(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UCOMP_Descriptor_C*                     COMP_Descriptor;                                   // 0x0248(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UPointLightComponent*                   PointLight;                                        // 0x0250(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	bool                                          IsAlwaysLeakingRadiation;                          // 0x0258(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         RadiationLevel;                                    // 0x0259(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

public:
	void UserConstructionScript();

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"ReactorFloor_RadTile_Light_C">();
	}
	static class AReactorFloor_RadTile_Light_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<AReactorFloor_RadTile_Light_C>();
	}
};
static_assert(alignof(AReactorFloor_RadTile_Light_C) == 0x000008, "Wrong alignment on AReactorFloor_RadTile_Light_C");
static_assert(sizeof(AReactorFloor_RadTile_Light_C) == 0x000260, "Wrong size on AReactorFloor_RadTile_Light_C");
static_assert(offsetof(AReactorFloor_RadTile_Light_C, COMP_VoxelCullable) == 0x000230, "Member 'AReactorFloor_RadTile_Light_C::COMP_VoxelCullable' has a wrong offset!");
static_assert(offsetof(AReactorFloor_RadTile_Light_C, NS_HeatColomn) == 0x000238, "Member 'AReactorFloor_RadTile_Light_C::NS_HeatColomn' has a wrong offset!");
static_assert(offsetof(AReactorFloor_RadTile_Light_C, COMP_StaticHazardVolume) == 0x000240, "Member 'AReactorFloor_RadTile_Light_C::COMP_StaticHazardVolume' has a wrong offset!");
static_assert(offsetof(AReactorFloor_RadTile_Light_C, COMP_Descriptor) == 0x000248, "Member 'AReactorFloor_RadTile_Light_C::COMP_Descriptor' has a wrong offset!");
static_assert(offsetof(AReactorFloor_RadTile_Light_C, PointLight) == 0x000250, "Member 'AReactorFloor_RadTile_Light_C::PointLight' has a wrong offset!");
static_assert(offsetof(AReactorFloor_RadTile_Light_C, IsAlwaysLeakingRadiation) == 0x000258, "Member 'AReactorFloor_RadTile_Light_C::IsAlwaysLeakingRadiation' has a wrong offset!");
static_assert(offsetof(AReactorFloor_RadTile_Light_C, RadiationLevel) == 0x000259, "Member 'AReactorFloor_RadTile_Light_C::RadiationLevel' has a wrong offset!");

}

