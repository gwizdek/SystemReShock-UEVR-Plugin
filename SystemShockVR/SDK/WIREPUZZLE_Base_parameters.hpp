#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: WIREPUZZLE_Base

#include "Basic.hpp"

#include "ENUM_InteractResultType_structs.hpp"
#include "ENUM_PuzzleSolveType_structs.hpp"
#include "STRUCT_InteractResults_structs.hpp"
#include "CoreUObject_structs.hpp"
#include "Engine_structs.hpp"
#include "STRUCT_WirePuzzleData_structs.hpp"


namespace SDK::Params
{

// Function WIREPUZZLE_Base.WIREPUZZLE_Base_C.OnPowerLevelChanged__DelegateSignature
// 0x0004 (0x0004 - 0x0000)
struct WIREPUZZLE_Base_C_OnPowerLevelChanged__DelegateSignature final
{
public:
	int32                                         TotalPowerLevel;                                   // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(WIREPUZZLE_Base_C_OnPowerLevelChanged__DelegateSignature) == 0x000004, "Wrong alignment on WIREPUZZLE_Base_C_OnPowerLevelChanged__DelegateSignature");
static_assert(sizeof(WIREPUZZLE_Base_C_OnPowerLevelChanged__DelegateSignature) == 0x000004, "Wrong size on WIREPUZZLE_Base_C_OnPowerLevelChanged__DelegateSignature");
static_assert(offsetof(WIREPUZZLE_Base_C_OnPowerLevelChanged__DelegateSignature, TotalPowerLevel) == 0x000000, "Member 'WIREPUZZLE_Base_C_OnPowerLevelChanged__DelegateSignature::TotalPowerLevel' has a wrong offset!");

// Function WIREPUZZLE_Base.WIREPUZZLE_Base_C.ExecuteUbergraph_WIREPUZZLE_Base
// 0x0008 (0x0008 - 0x0000)
struct WIREPUZZLE_Base_C_ExecuteUbergraph_WIREPUZZLE_Base final
{
public:
	int32                                         EntryPoint;                                        // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         K2Node_Event_DeltaSeconds;                         // 0x0004(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(WIREPUZZLE_Base_C_ExecuteUbergraph_WIREPUZZLE_Base) == 0x000004, "Wrong alignment on WIREPUZZLE_Base_C_ExecuteUbergraph_WIREPUZZLE_Base");
static_assert(sizeof(WIREPUZZLE_Base_C_ExecuteUbergraph_WIREPUZZLE_Base) == 0x000008, "Wrong size on WIREPUZZLE_Base_C_ExecuteUbergraph_WIREPUZZLE_Base");
static_assert(offsetof(WIREPUZZLE_Base_C_ExecuteUbergraph_WIREPUZZLE_Base, EntryPoint) == 0x000000, "Member 'WIREPUZZLE_Base_C_ExecuteUbergraph_WIREPUZZLE_Base::EntryPoint' has a wrong offset!");
static_assert(offsetof(WIREPUZZLE_Base_C_ExecuteUbergraph_WIREPUZZLE_Base, K2Node_Event_DeltaSeconds) == 0x000004, "Member 'WIREPUZZLE_Base_C_ExecuteUbergraph_WIREPUZZLE_Base::K2Node_Event_DeltaSeconds' has a wrong offset!");

// Function WIREPUZZLE_Base.WIREPUZZLE_Base_C.ReceiveTick
// 0x0004 (0x0004 - 0x0000)
struct WIREPUZZLE_Base_C_ReceiveTick final
{
public:
	float                                         DeltaSeconds;                                      // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(WIREPUZZLE_Base_C_ReceiveTick) == 0x000004, "Wrong alignment on WIREPUZZLE_Base_C_ReceiveTick");
static_assert(sizeof(WIREPUZZLE_Base_C_ReceiveTick) == 0x000004, "Wrong size on WIREPUZZLE_Base_C_ReceiveTick");
static_assert(offsetof(WIREPUZZLE_Base_C_ReceiveTick, DeltaSeconds) == 0x000000, "Member 'WIREPUZZLE_Base_C_ReceiveTick::DeltaSeconds' has a wrong offset!");

// Function WIREPUZZLE_Base.WIREPUZZLE_Base_C.RegisterActiveTrace
// 0x0008 (0x0008 - 0x0000)
struct WIREPUZZLE_Base_C_RegisterActiveTrace final
{
public:
	int32                                         Temp_int_Variable;                                 // 0x0000(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue;                   // 0x0004(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(WIREPUZZLE_Base_C_RegisterActiveTrace) == 0x000004, "Wrong alignment on WIREPUZZLE_Base_C_RegisterActiveTrace");
static_assert(sizeof(WIREPUZZLE_Base_C_RegisterActiveTrace) == 0x000008, "Wrong size on WIREPUZZLE_Base_C_RegisterActiveTrace");
static_assert(offsetof(WIREPUZZLE_Base_C_RegisterActiveTrace, Temp_int_Variable) == 0x000000, "Member 'WIREPUZZLE_Base_C_RegisterActiveTrace::Temp_int_Variable' has a wrong offset!");
static_assert(offsetof(WIREPUZZLE_Base_C_RegisterActiveTrace, CallFunc_Add_IntInt_ReturnValue) == 0x000004, "Member 'WIREPUZZLE_Base_C_RegisterActiveTrace::CallFunc_Add_IntInt_ReturnValue' has a wrong offset!");

// Function WIREPUZZLE_Base.WIREPUZZLE_Base_C.UpdatePropagationAudio
// 0x0068 (0x0068 - 0x0000)
struct WIREPUZZLE_Base_C_UpdatePropagationAudio final
{
public:
	bool                                          CallFunc_IsPuzzleSolved_Result;                    // 0x0000(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Not_PreBool_ReturnValue;                  // 0x0001(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_2[0x2];                                        // 0x0002(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Max_ReturnValue;                          // 0x0004(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Length_ReturnValue;                 // 0x0008(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_IntInt_ReturnValue;            // 0x000C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_D[0x3];                                        // 0x000D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Array_LastIndex_ReturnValue;              // 0x0010(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UAudioComponent*                        CallFunc_Array_Get_Item;                           // 0x0018(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_K2_GetActorLocation_ReturnValue;          // 0x0020(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_2C[0x4];                                       // 0x002C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UObject*                                CallFunc_LoadAsset_Blocking_ReturnValue;           // 0x0030(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class USoundCue*                              K2Node_DynamicCast_AsSound_Cue;                    // 0x0038(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0040(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_41[0x7];                                       // 0x0041(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UAudioComponent*                        CallFunc_SpawnSoundAtLocation_ReturnValue;         // 0x0048(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Length_ReturnValue_1;               // 0x0050(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Add_ReturnValue;                    // 0x0054(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue;                  // 0x0058(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_59[0x3];                                       // 0x0059(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Array_Length_ReturnValue_2;               // 0x005C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Greater_IntInt_ReturnValue;               // 0x0060(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(WIREPUZZLE_Base_C_UpdatePropagationAudio) == 0x000008, "Wrong alignment on WIREPUZZLE_Base_C_UpdatePropagationAudio");
static_assert(sizeof(WIREPUZZLE_Base_C_UpdatePropagationAudio) == 0x000068, "Wrong size on WIREPUZZLE_Base_C_UpdatePropagationAudio");
static_assert(offsetof(WIREPUZZLE_Base_C_UpdatePropagationAudio, CallFunc_IsPuzzleSolved_Result) == 0x000000, "Member 'WIREPUZZLE_Base_C_UpdatePropagationAudio::CallFunc_IsPuzzleSolved_Result' has a wrong offset!");
static_assert(offsetof(WIREPUZZLE_Base_C_UpdatePropagationAudio, CallFunc_Not_PreBool_ReturnValue) == 0x000001, "Member 'WIREPUZZLE_Base_C_UpdatePropagationAudio::CallFunc_Not_PreBool_ReturnValue' has a wrong offset!");
static_assert(offsetof(WIREPUZZLE_Base_C_UpdatePropagationAudio, CallFunc_Max_ReturnValue) == 0x000004, "Member 'WIREPUZZLE_Base_C_UpdatePropagationAudio::CallFunc_Max_ReturnValue' has a wrong offset!");
static_assert(offsetof(WIREPUZZLE_Base_C_UpdatePropagationAudio, CallFunc_Array_Length_ReturnValue) == 0x000008, "Member 'WIREPUZZLE_Base_C_UpdatePropagationAudio::CallFunc_Array_Length_ReturnValue' has a wrong offset!");
static_assert(offsetof(WIREPUZZLE_Base_C_UpdatePropagationAudio, CallFunc_EqualEqual_IntInt_ReturnValue) == 0x00000C, "Member 'WIREPUZZLE_Base_C_UpdatePropagationAudio::CallFunc_EqualEqual_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(WIREPUZZLE_Base_C_UpdatePropagationAudio, CallFunc_Array_LastIndex_ReturnValue) == 0x000010, "Member 'WIREPUZZLE_Base_C_UpdatePropagationAudio::CallFunc_Array_LastIndex_ReturnValue' has a wrong offset!");
static_assert(offsetof(WIREPUZZLE_Base_C_UpdatePropagationAudio, CallFunc_Array_Get_Item) == 0x000018, "Member 'WIREPUZZLE_Base_C_UpdatePropagationAudio::CallFunc_Array_Get_Item' has a wrong offset!");
static_assert(offsetof(WIREPUZZLE_Base_C_UpdatePropagationAudio, CallFunc_K2_GetActorLocation_ReturnValue) == 0x000020, "Member 'WIREPUZZLE_Base_C_UpdatePropagationAudio::CallFunc_K2_GetActorLocation_ReturnValue' has a wrong offset!");
static_assert(offsetof(WIREPUZZLE_Base_C_UpdatePropagationAudio, CallFunc_LoadAsset_Blocking_ReturnValue) == 0x000030, "Member 'WIREPUZZLE_Base_C_UpdatePropagationAudio::CallFunc_LoadAsset_Blocking_ReturnValue' has a wrong offset!");
static_assert(offsetof(WIREPUZZLE_Base_C_UpdatePropagationAudio, K2Node_DynamicCast_AsSound_Cue) == 0x000038, "Member 'WIREPUZZLE_Base_C_UpdatePropagationAudio::K2Node_DynamicCast_AsSound_Cue' has a wrong offset!");
static_assert(offsetof(WIREPUZZLE_Base_C_UpdatePropagationAudio, K2Node_DynamicCast_bSuccess) == 0x000040, "Member 'WIREPUZZLE_Base_C_UpdatePropagationAudio::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(WIREPUZZLE_Base_C_UpdatePropagationAudio, CallFunc_SpawnSoundAtLocation_ReturnValue) == 0x000048, "Member 'WIREPUZZLE_Base_C_UpdatePropagationAudio::CallFunc_SpawnSoundAtLocation_ReturnValue' has a wrong offset!");
static_assert(offsetof(WIREPUZZLE_Base_C_UpdatePropagationAudio, CallFunc_Array_Length_ReturnValue_1) == 0x000050, "Member 'WIREPUZZLE_Base_C_UpdatePropagationAudio::CallFunc_Array_Length_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(WIREPUZZLE_Base_C_UpdatePropagationAudio, CallFunc_Array_Add_ReturnValue) == 0x000054, "Member 'WIREPUZZLE_Base_C_UpdatePropagationAudio::CallFunc_Array_Add_ReturnValue' has a wrong offset!");
static_assert(offsetof(WIREPUZZLE_Base_C_UpdatePropagationAudio, CallFunc_Less_IntInt_ReturnValue) == 0x000058, "Member 'WIREPUZZLE_Base_C_UpdatePropagationAudio::CallFunc_Less_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(WIREPUZZLE_Base_C_UpdatePropagationAudio, CallFunc_Array_Length_ReturnValue_2) == 0x00005C, "Member 'WIREPUZZLE_Base_C_UpdatePropagationAudio::CallFunc_Array_Length_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(WIREPUZZLE_Base_C_UpdatePropagationAudio, CallFunc_Greater_IntInt_ReturnValue) == 0x000060, "Member 'WIREPUZZLE_Base_C_UpdatePropagationAudio::CallFunc_Greater_IntInt_ReturnValue' has a wrong offset!");

// Function WIREPUZZLE_Base.WIREPUZZLE_Base_C.UnregisterActiveTrace
// 0x0008 (0x0008 - 0x0000)
struct WIREPUZZLE_Base_C_UnregisterActiveTrace final
{
public:
	int32                                         Temp_int_Variable;                                 // 0x0000(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Subtract_IntInt_ReturnValue;              // 0x0004(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(WIREPUZZLE_Base_C_UnregisterActiveTrace) == 0x000004, "Wrong alignment on WIREPUZZLE_Base_C_UnregisterActiveTrace");
static_assert(sizeof(WIREPUZZLE_Base_C_UnregisterActiveTrace) == 0x000008, "Wrong size on WIREPUZZLE_Base_C_UnregisterActiveTrace");
static_assert(offsetof(WIREPUZZLE_Base_C_UnregisterActiveTrace, Temp_int_Variable) == 0x000000, "Member 'WIREPUZZLE_Base_C_UnregisterActiveTrace::Temp_int_Variable' has a wrong offset!");
static_assert(offsetof(WIREPUZZLE_Base_C_UnregisterActiveTrace, CallFunc_Subtract_IntInt_ReturnValue) == 0x000004, "Member 'WIREPUZZLE_Base_C_UnregisterActiveTrace::CallFunc_Subtract_IntInt_ReturnValue' has a wrong offset!");

// Function WIREPUZZLE_Base.WIREPUZZLE_Base_C.SetBatteryInput
// 0x0060 (0x0060 - 0x0000)
struct WIREPUZZLE_Base_C_SetBatteryInput final
{
public:
	struct FIntPoint                              BatteryLocation;                                   // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         BatteryInputSocket;                                // 0x0008(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         PowerLevel;                                        // 0x000C(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         NewTotalPower;                                     // 0x0010(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Array_Index_Variable;                     // 0x0014(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Loop_Counter_Variable;                    // 0x0018(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue;                   // 0x001C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TArray<struct FIntVector>                     CallFunc_Map_Keys_Keys;                            // 0x0020(0x0010)(ReferenceParm)
	struct FIntVector                             CallFunc_Array_Get_Item;                           // 0x0030(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Length_ReturnValue;                 // 0x003C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Map_Find_Value;                           // 0x0040(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Map_Find_ReturnValue;                     // 0x0044(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Less_IntInt_ReturnValue;                  // 0x0045(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_46[0x2];                                       // 0x0046(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_Conv_IntToFloat_ReturnValue;              // 0x0048(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Add_FloatFloat_ReturnValue;               // 0x004C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FIntVector                             K2Node_MakeStruct_IntVector;                       // 0x0050(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(WIREPUZZLE_Base_C_SetBatteryInput) == 0x000008, "Wrong alignment on WIREPUZZLE_Base_C_SetBatteryInput");
static_assert(sizeof(WIREPUZZLE_Base_C_SetBatteryInput) == 0x000060, "Wrong size on WIREPUZZLE_Base_C_SetBatteryInput");
static_assert(offsetof(WIREPUZZLE_Base_C_SetBatteryInput, BatteryLocation) == 0x000000, "Member 'WIREPUZZLE_Base_C_SetBatteryInput::BatteryLocation' has a wrong offset!");
static_assert(offsetof(WIREPUZZLE_Base_C_SetBatteryInput, BatteryInputSocket) == 0x000008, "Member 'WIREPUZZLE_Base_C_SetBatteryInput::BatteryInputSocket' has a wrong offset!");
static_assert(offsetof(WIREPUZZLE_Base_C_SetBatteryInput, PowerLevel) == 0x00000C, "Member 'WIREPUZZLE_Base_C_SetBatteryInput::PowerLevel' has a wrong offset!");
static_assert(offsetof(WIREPUZZLE_Base_C_SetBatteryInput, NewTotalPower) == 0x000010, "Member 'WIREPUZZLE_Base_C_SetBatteryInput::NewTotalPower' has a wrong offset!");
static_assert(offsetof(WIREPUZZLE_Base_C_SetBatteryInput, Temp_int_Array_Index_Variable) == 0x000014, "Member 'WIREPUZZLE_Base_C_SetBatteryInput::Temp_int_Array_Index_Variable' has a wrong offset!");
static_assert(offsetof(WIREPUZZLE_Base_C_SetBatteryInput, Temp_int_Loop_Counter_Variable) == 0x000018, "Member 'WIREPUZZLE_Base_C_SetBatteryInput::Temp_int_Loop_Counter_Variable' has a wrong offset!");
static_assert(offsetof(WIREPUZZLE_Base_C_SetBatteryInput, CallFunc_Add_IntInt_ReturnValue) == 0x00001C, "Member 'WIREPUZZLE_Base_C_SetBatteryInput::CallFunc_Add_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(WIREPUZZLE_Base_C_SetBatteryInput, CallFunc_Map_Keys_Keys) == 0x000020, "Member 'WIREPUZZLE_Base_C_SetBatteryInput::CallFunc_Map_Keys_Keys' has a wrong offset!");
static_assert(offsetof(WIREPUZZLE_Base_C_SetBatteryInput, CallFunc_Array_Get_Item) == 0x000030, "Member 'WIREPUZZLE_Base_C_SetBatteryInput::CallFunc_Array_Get_Item' has a wrong offset!");
static_assert(offsetof(WIREPUZZLE_Base_C_SetBatteryInput, CallFunc_Array_Length_ReturnValue) == 0x00003C, "Member 'WIREPUZZLE_Base_C_SetBatteryInput::CallFunc_Array_Length_ReturnValue' has a wrong offset!");
static_assert(offsetof(WIREPUZZLE_Base_C_SetBatteryInput, CallFunc_Map_Find_Value) == 0x000040, "Member 'WIREPUZZLE_Base_C_SetBatteryInput::CallFunc_Map_Find_Value' has a wrong offset!");
static_assert(offsetof(WIREPUZZLE_Base_C_SetBatteryInput, CallFunc_Map_Find_ReturnValue) == 0x000044, "Member 'WIREPUZZLE_Base_C_SetBatteryInput::CallFunc_Map_Find_ReturnValue' has a wrong offset!");
static_assert(offsetof(WIREPUZZLE_Base_C_SetBatteryInput, CallFunc_Less_IntInt_ReturnValue) == 0x000045, "Member 'WIREPUZZLE_Base_C_SetBatteryInput::CallFunc_Less_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(WIREPUZZLE_Base_C_SetBatteryInput, CallFunc_Conv_IntToFloat_ReturnValue) == 0x000048, "Member 'WIREPUZZLE_Base_C_SetBatteryInput::CallFunc_Conv_IntToFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(WIREPUZZLE_Base_C_SetBatteryInput, CallFunc_Add_FloatFloat_ReturnValue) == 0x00004C, "Member 'WIREPUZZLE_Base_C_SetBatteryInput::CallFunc_Add_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(WIREPUZZLE_Base_C_SetBatteryInput, K2Node_MakeStruct_IntVector) == 0x000050, "Member 'WIREPUZZLE_Base_C_SetBatteryInput::K2Node_MakeStruct_IntVector' has a wrong offset!");

// Function WIREPUZZLE_Base.WIREPUZZLE_Base_C.UpdateBatteryPower
// 0x0068 (0x0068 - 0x0000)
struct WIREPUZZLE_Base_C_UpdateBatteryPower final
{
public:
	float                                         DeltaSeconds;                                      // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         NewPowerLevel;                                     // 0x0004(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         OldPowerLevel;                                     // 0x0008(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue;                   // 0x000C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsJunctionBoxFunctional_Result;           // 0x0010(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UCOMP_WirePuzzle_Cell_Base_C*           CallFunc_GetSelectedWireSourceCell_SelectedCell;   // 0x0018(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UCOMP_WirePuzzle_Cell_Base_C*           CallFunc_GetSelectedWireSourceCell_SelectedCell_1; // 0x0020(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FSTRUCT_InteractResults                CallFunc_TryInteract_InteractResults;              // 0x0028(0x0020)(HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0048(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_LessEqual_IntInt_ReturnValue;             // 0x0049(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_4A[0x2];                                       // 0x004A(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Temp_int_Variable;                                 // 0x004C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_GreaterEqual_IntInt_ReturnValue;          // 0x0050(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_GreaterEqual_IntInt_ReturnValue_1;        // 0x0051(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BooleanAND_ReturnValue;                   // 0x0052(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_EqualEqual_FloatFloat_ReturnValue;        // 0x0053(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_NotEqual_IntInt_ReturnValue;              // 0x0054(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_55[0x3];                                       // 0x0055(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_FFloor_ReturnValue;                       // 0x0058(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_FInterpTo_Constant_ReturnValue;           // 0x005C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_FFloor_ReturnValue_1;                     // 0x0060(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(WIREPUZZLE_Base_C_UpdateBatteryPower) == 0x000008, "Wrong alignment on WIREPUZZLE_Base_C_UpdateBatteryPower");
static_assert(sizeof(WIREPUZZLE_Base_C_UpdateBatteryPower) == 0x000068, "Wrong size on WIREPUZZLE_Base_C_UpdateBatteryPower");
static_assert(offsetof(WIREPUZZLE_Base_C_UpdateBatteryPower, DeltaSeconds) == 0x000000, "Member 'WIREPUZZLE_Base_C_UpdateBatteryPower::DeltaSeconds' has a wrong offset!");
static_assert(offsetof(WIREPUZZLE_Base_C_UpdateBatteryPower, NewPowerLevel) == 0x000004, "Member 'WIREPUZZLE_Base_C_UpdateBatteryPower::NewPowerLevel' has a wrong offset!");
static_assert(offsetof(WIREPUZZLE_Base_C_UpdateBatteryPower, OldPowerLevel) == 0x000008, "Member 'WIREPUZZLE_Base_C_UpdateBatteryPower::OldPowerLevel' has a wrong offset!");
static_assert(offsetof(WIREPUZZLE_Base_C_UpdateBatteryPower, CallFunc_Add_IntInt_ReturnValue) == 0x00000C, "Member 'WIREPUZZLE_Base_C_UpdateBatteryPower::CallFunc_Add_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(WIREPUZZLE_Base_C_UpdateBatteryPower, CallFunc_IsJunctionBoxFunctional_Result) == 0x000010, "Member 'WIREPUZZLE_Base_C_UpdateBatteryPower::CallFunc_IsJunctionBoxFunctional_Result' has a wrong offset!");
static_assert(offsetof(WIREPUZZLE_Base_C_UpdateBatteryPower, CallFunc_GetSelectedWireSourceCell_SelectedCell) == 0x000018, "Member 'WIREPUZZLE_Base_C_UpdateBatteryPower::CallFunc_GetSelectedWireSourceCell_SelectedCell' has a wrong offset!");
static_assert(offsetof(WIREPUZZLE_Base_C_UpdateBatteryPower, CallFunc_GetSelectedWireSourceCell_SelectedCell_1) == 0x000020, "Member 'WIREPUZZLE_Base_C_UpdateBatteryPower::CallFunc_GetSelectedWireSourceCell_SelectedCell_1' has a wrong offset!");
static_assert(offsetof(WIREPUZZLE_Base_C_UpdateBatteryPower, CallFunc_TryInteract_InteractResults) == 0x000028, "Member 'WIREPUZZLE_Base_C_UpdateBatteryPower::CallFunc_TryInteract_InteractResults' has a wrong offset!");
static_assert(offsetof(WIREPUZZLE_Base_C_UpdateBatteryPower, CallFunc_IsValid_ReturnValue) == 0x000048, "Member 'WIREPUZZLE_Base_C_UpdateBatteryPower::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(WIREPUZZLE_Base_C_UpdateBatteryPower, CallFunc_LessEqual_IntInt_ReturnValue) == 0x000049, "Member 'WIREPUZZLE_Base_C_UpdateBatteryPower::CallFunc_LessEqual_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(WIREPUZZLE_Base_C_UpdateBatteryPower, Temp_int_Variable) == 0x00004C, "Member 'WIREPUZZLE_Base_C_UpdateBatteryPower::Temp_int_Variable' has a wrong offset!");
static_assert(offsetof(WIREPUZZLE_Base_C_UpdateBatteryPower, CallFunc_GreaterEqual_IntInt_ReturnValue) == 0x000050, "Member 'WIREPUZZLE_Base_C_UpdateBatteryPower::CallFunc_GreaterEqual_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(WIREPUZZLE_Base_C_UpdateBatteryPower, CallFunc_GreaterEqual_IntInt_ReturnValue_1) == 0x000051, "Member 'WIREPUZZLE_Base_C_UpdateBatteryPower::CallFunc_GreaterEqual_IntInt_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(WIREPUZZLE_Base_C_UpdateBatteryPower, CallFunc_BooleanAND_ReturnValue) == 0x000052, "Member 'WIREPUZZLE_Base_C_UpdateBatteryPower::CallFunc_BooleanAND_ReturnValue' has a wrong offset!");
static_assert(offsetof(WIREPUZZLE_Base_C_UpdateBatteryPower, CallFunc_EqualEqual_FloatFloat_ReturnValue) == 0x000053, "Member 'WIREPUZZLE_Base_C_UpdateBatteryPower::CallFunc_EqualEqual_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(WIREPUZZLE_Base_C_UpdateBatteryPower, CallFunc_NotEqual_IntInt_ReturnValue) == 0x000054, "Member 'WIREPUZZLE_Base_C_UpdateBatteryPower::CallFunc_NotEqual_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(WIREPUZZLE_Base_C_UpdateBatteryPower, CallFunc_FFloor_ReturnValue) == 0x000058, "Member 'WIREPUZZLE_Base_C_UpdateBatteryPower::CallFunc_FFloor_ReturnValue' has a wrong offset!");
static_assert(offsetof(WIREPUZZLE_Base_C_UpdateBatteryPower, CallFunc_FInterpTo_Constant_ReturnValue) == 0x00005C, "Member 'WIREPUZZLE_Base_C_UpdateBatteryPower::CallFunc_FInterpTo_Constant_ReturnValue' has a wrong offset!");
static_assert(offsetof(WIREPUZZLE_Base_C_UpdateBatteryPower, CallFunc_FFloor_ReturnValue_1) == 0x000060, "Member 'WIREPUZZLE_Base_C_UpdateBatteryPower::CallFunc_FFloor_ReturnValue_1' has a wrong offset!");

// Function WIREPUZZLE_Base.WIREPUZZLE_Base_C.GetSelectedWireSourceCell
// 0x0008 (0x0008 - 0x0000)
struct WIREPUZZLE_Base_C_GetSelectedWireSourceCell final
{
public:
	class UCOMP_WirePuzzle_Cell_Base_C*           SelectedCell;                                      // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(WIREPUZZLE_Base_C_GetSelectedWireSourceCell) == 0x000008, "Wrong alignment on WIREPUZZLE_Base_C_GetSelectedWireSourceCell");
static_assert(sizeof(WIREPUZZLE_Base_C_GetSelectedWireSourceCell) == 0x000008, "Wrong size on WIREPUZZLE_Base_C_GetSelectedWireSourceCell");
static_assert(offsetof(WIREPUZZLE_Base_C_GetSelectedWireSourceCell, SelectedCell) == 0x000000, "Member 'WIREPUZZLE_Base_C_GetSelectedWireSourceCell::SelectedCell' has a wrong offset!");

// Function WIREPUZZLE_Base.WIREPUZZLE_Base_C.SetSelectedWireSourceCell
// 0x0008 (0x0008 - 0x0000)
struct WIREPUZZLE_Base_C_SetSelectedWireSourceCell final
{
public:
	class UCOMP_WirePuzzle_Cell_Base_C*           NewSelection;                                      // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(WIREPUZZLE_Base_C_SetSelectedWireSourceCell) == 0x000008, "Wrong alignment on WIREPUZZLE_Base_C_SetSelectedWireSourceCell");
static_assert(sizeof(WIREPUZZLE_Base_C_SetSelectedWireSourceCell) == 0x000008, "Wrong size on WIREPUZZLE_Base_C_SetSelectedWireSourceCell");
static_assert(offsetof(WIREPUZZLE_Base_C_SetSelectedWireSourceCell, NewSelection) == 0x000000, "Member 'WIREPUZZLE_Base_C_SetSelectedWireSourceCell::NewSelection' has a wrong offset!");

// Function WIREPUZZLE_Base.WIREPUZZLE_Base_C.ReserveWireDepthOffset
// 0x0048 (0x0048 - 0x0000)
struct WIREPUZZLE_Base_C_ReserveWireDepthOffset final
{
public:
	class AWIREPUZZLE_WirePlug_C*                 Plug;                                              // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Offset;                                            // 0x0008(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Array_Index_Variable;                     // 0x000C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Loop_Counter_Variable;                    // 0x0010(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue;                   // 0x0014(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TArray<int32>                                 CallFunc_Map_Keys_Keys;                            // 0x0018(0x0010)(ReferenceParm)
	int32                                         CallFunc_Array_Length_ReturnValue;                 // 0x0028(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Get_Item;                           // 0x002C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue;                  // 0x0030(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_31[0x3];                                       // 0x0031(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_Multiply_IntFloat_ReturnValue;            // 0x0034(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AWIREPUZZLE_WirePlug_C*                 CallFunc_Map_Find_Value;                           // 0x0038(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Map_Find_ReturnValue;                     // 0x0040(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0041(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Not_PreBool_ReturnValue;                  // 0x0042(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(WIREPUZZLE_Base_C_ReserveWireDepthOffset) == 0x000008, "Wrong alignment on WIREPUZZLE_Base_C_ReserveWireDepthOffset");
static_assert(sizeof(WIREPUZZLE_Base_C_ReserveWireDepthOffset) == 0x000048, "Wrong size on WIREPUZZLE_Base_C_ReserveWireDepthOffset");
static_assert(offsetof(WIREPUZZLE_Base_C_ReserveWireDepthOffset, Plug) == 0x000000, "Member 'WIREPUZZLE_Base_C_ReserveWireDepthOffset::Plug' has a wrong offset!");
static_assert(offsetof(WIREPUZZLE_Base_C_ReserveWireDepthOffset, Offset) == 0x000008, "Member 'WIREPUZZLE_Base_C_ReserveWireDepthOffset::Offset' has a wrong offset!");
static_assert(offsetof(WIREPUZZLE_Base_C_ReserveWireDepthOffset, Temp_int_Array_Index_Variable) == 0x00000C, "Member 'WIREPUZZLE_Base_C_ReserveWireDepthOffset::Temp_int_Array_Index_Variable' has a wrong offset!");
static_assert(offsetof(WIREPUZZLE_Base_C_ReserveWireDepthOffset, Temp_int_Loop_Counter_Variable) == 0x000010, "Member 'WIREPUZZLE_Base_C_ReserveWireDepthOffset::Temp_int_Loop_Counter_Variable' has a wrong offset!");
static_assert(offsetof(WIREPUZZLE_Base_C_ReserveWireDepthOffset, CallFunc_Add_IntInt_ReturnValue) == 0x000014, "Member 'WIREPUZZLE_Base_C_ReserveWireDepthOffset::CallFunc_Add_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(WIREPUZZLE_Base_C_ReserveWireDepthOffset, CallFunc_Map_Keys_Keys) == 0x000018, "Member 'WIREPUZZLE_Base_C_ReserveWireDepthOffset::CallFunc_Map_Keys_Keys' has a wrong offset!");
static_assert(offsetof(WIREPUZZLE_Base_C_ReserveWireDepthOffset, CallFunc_Array_Length_ReturnValue) == 0x000028, "Member 'WIREPUZZLE_Base_C_ReserveWireDepthOffset::CallFunc_Array_Length_ReturnValue' has a wrong offset!");
static_assert(offsetof(WIREPUZZLE_Base_C_ReserveWireDepthOffset, CallFunc_Array_Get_Item) == 0x00002C, "Member 'WIREPUZZLE_Base_C_ReserveWireDepthOffset::CallFunc_Array_Get_Item' has a wrong offset!");
static_assert(offsetof(WIREPUZZLE_Base_C_ReserveWireDepthOffset, CallFunc_Less_IntInt_ReturnValue) == 0x000030, "Member 'WIREPUZZLE_Base_C_ReserveWireDepthOffset::CallFunc_Less_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(WIREPUZZLE_Base_C_ReserveWireDepthOffset, CallFunc_Multiply_IntFloat_ReturnValue) == 0x000034, "Member 'WIREPUZZLE_Base_C_ReserveWireDepthOffset::CallFunc_Multiply_IntFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(WIREPUZZLE_Base_C_ReserveWireDepthOffset, CallFunc_Map_Find_Value) == 0x000038, "Member 'WIREPUZZLE_Base_C_ReserveWireDepthOffset::CallFunc_Map_Find_Value' has a wrong offset!");
static_assert(offsetof(WIREPUZZLE_Base_C_ReserveWireDepthOffset, CallFunc_Map_Find_ReturnValue) == 0x000040, "Member 'WIREPUZZLE_Base_C_ReserveWireDepthOffset::CallFunc_Map_Find_ReturnValue' has a wrong offset!");
static_assert(offsetof(WIREPUZZLE_Base_C_ReserveWireDepthOffset, CallFunc_IsValid_ReturnValue) == 0x000041, "Member 'WIREPUZZLE_Base_C_ReserveWireDepthOffset::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(WIREPUZZLE_Base_C_ReserveWireDepthOffset, CallFunc_Not_PreBool_ReturnValue) == 0x000042, "Member 'WIREPUZZLE_Base_C_ReserveWireDepthOffset::CallFunc_Not_PreBool_ReturnValue' has a wrong offset!");

// Function WIREPUZZLE_Base.WIREPUZZLE_Base_C.ReleaseWireDepthOffset
// 0x0050 (0x0050 - 0x0000)
struct WIREPUZZLE_Base_C_ReleaseWireDepthOffset final
{
public:
	class AWIREPUZZLE_WirePlug_C*                 Plug;                                              // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Array_Index_Variable;                     // 0x0008(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Loop_Counter_Variable;                    // 0x000C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue;                   // 0x0010(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	const class AWIREPUZZLE_WirePlug_C*           Temp_object_Variable;                              // 0x0018(0x0008)(ConstParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TArray<int32>                                 CallFunc_Map_Keys_Keys;                            // 0x0020(0x0010)(ReferenceParm)
	int32                                         CallFunc_Array_Length_ReturnValue;                 // 0x0030(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Get_Item;                           // 0x0034(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue;                  // 0x0038(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_39[0x7];                                       // 0x0039(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class AWIREPUZZLE_WirePlug_C*                 CallFunc_Map_Find_Value;                           // 0x0040(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Map_Find_ReturnValue;                     // 0x0048(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_EqualEqual_ObjectObject_ReturnValue;      // 0x0049(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(WIREPUZZLE_Base_C_ReleaseWireDepthOffset) == 0x000008, "Wrong alignment on WIREPUZZLE_Base_C_ReleaseWireDepthOffset");
static_assert(sizeof(WIREPUZZLE_Base_C_ReleaseWireDepthOffset) == 0x000050, "Wrong size on WIREPUZZLE_Base_C_ReleaseWireDepthOffset");
static_assert(offsetof(WIREPUZZLE_Base_C_ReleaseWireDepthOffset, Plug) == 0x000000, "Member 'WIREPUZZLE_Base_C_ReleaseWireDepthOffset::Plug' has a wrong offset!");
static_assert(offsetof(WIREPUZZLE_Base_C_ReleaseWireDepthOffset, Temp_int_Array_Index_Variable) == 0x000008, "Member 'WIREPUZZLE_Base_C_ReleaseWireDepthOffset::Temp_int_Array_Index_Variable' has a wrong offset!");
static_assert(offsetof(WIREPUZZLE_Base_C_ReleaseWireDepthOffset, Temp_int_Loop_Counter_Variable) == 0x00000C, "Member 'WIREPUZZLE_Base_C_ReleaseWireDepthOffset::Temp_int_Loop_Counter_Variable' has a wrong offset!");
static_assert(offsetof(WIREPUZZLE_Base_C_ReleaseWireDepthOffset, CallFunc_Add_IntInt_ReturnValue) == 0x000010, "Member 'WIREPUZZLE_Base_C_ReleaseWireDepthOffset::CallFunc_Add_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(WIREPUZZLE_Base_C_ReleaseWireDepthOffset, Temp_object_Variable) == 0x000018, "Member 'WIREPUZZLE_Base_C_ReleaseWireDepthOffset::Temp_object_Variable' has a wrong offset!");
static_assert(offsetof(WIREPUZZLE_Base_C_ReleaseWireDepthOffset, CallFunc_Map_Keys_Keys) == 0x000020, "Member 'WIREPUZZLE_Base_C_ReleaseWireDepthOffset::CallFunc_Map_Keys_Keys' has a wrong offset!");
static_assert(offsetof(WIREPUZZLE_Base_C_ReleaseWireDepthOffset, CallFunc_Array_Length_ReturnValue) == 0x000030, "Member 'WIREPUZZLE_Base_C_ReleaseWireDepthOffset::CallFunc_Array_Length_ReturnValue' has a wrong offset!");
static_assert(offsetof(WIREPUZZLE_Base_C_ReleaseWireDepthOffset, CallFunc_Array_Get_Item) == 0x000034, "Member 'WIREPUZZLE_Base_C_ReleaseWireDepthOffset::CallFunc_Array_Get_Item' has a wrong offset!");
static_assert(offsetof(WIREPUZZLE_Base_C_ReleaseWireDepthOffset, CallFunc_Less_IntInt_ReturnValue) == 0x000038, "Member 'WIREPUZZLE_Base_C_ReleaseWireDepthOffset::CallFunc_Less_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(WIREPUZZLE_Base_C_ReleaseWireDepthOffset, CallFunc_Map_Find_Value) == 0x000040, "Member 'WIREPUZZLE_Base_C_ReleaseWireDepthOffset::CallFunc_Map_Find_Value' has a wrong offset!");
static_assert(offsetof(WIREPUZZLE_Base_C_ReleaseWireDepthOffset, CallFunc_Map_Find_ReturnValue) == 0x000048, "Member 'WIREPUZZLE_Base_C_ReleaseWireDepthOffset::CallFunc_Map_Find_ReturnValue' has a wrong offset!");
static_assert(offsetof(WIREPUZZLE_Base_C_ReleaseWireDepthOffset, CallFunc_EqualEqual_ObjectObject_ReturnValue) == 0x000049, "Member 'WIREPUZZLE_Base_C_ReleaseWireDepthOffset::CallFunc_EqualEqual_ObjectObject_ReturnValue' has a wrong offset!");

// Function WIREPUZZLE_Base.WIREPUZZLE_Base_C.GetBatteryCells
// 0x0068 (0x0068 - 0x0000)
struct WIREPUZZLE_Base_C_GetBatteryCells final
{
public:
	TArray<class UCOMP_WirePuzzle_Cell_Base_C*>   Cells;                                             // 0x0000(0x0010)(Parm, OutParm, ContainsInstancedReference)
	TArray<class UCOMP_WirePuzzle_Cell_Base_C*>   Batteries;                                         // 0x0010(0x0010)(Edit, BlueprintVisible, ContainsInstancedReference)
	int32                                         Temp_int_Array_Index_Variable;                     // 0x0020(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Loop_Counter_Variable;                    // 0x0024(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue;                   // 0x0028(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TDelegate<void(class UObject* ObjectA, class UObject* ObjectB)> K2Node_CreateDelegate_OutputDelegate;              // 0x002C(0x0010)(ZeroConstructor, NoDestructor)
	uint8                                         Pad_3C[0x4];                                       // 0x003C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UCOMP_PuzzleCell_Base_C*                CallFunc_Array_Get_Item;                           // 0x0040(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Length_ReturnValue;                 // 0x0048(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_4C[0x4];                                       // 0x004C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UCOMP_WirePuzzle_Cell_Base_C*           K2Node_DynamicCast_AsCOMP_Wire_Puzzle_Cell_Base;   // 0x0050(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0058(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Less_IntInt_ReturnValue;                  // 0x0059(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_5A[0x2];                                       // 0x005A(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Array_Add_ReturnValue;                    // 0x005C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_ByteByte_ReturnValue;          // 0x0060(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(WIREPUZZLE_Base_C_GetBatteryCells) == 0x000008, "Wrong alignment on WIREPUZZLE_Base_C_GetBatteryCells");
static_assert(sizeof(WIREPUZZLE_Base_C_GetBatteryCells) == 0x000068, "Wrong size on WIREPUZZLE_Base_C_GetBatteryCells");
static_assert(offsetof(WIREPUZZLE_Base_C_GetBatteryCells, Cells) == 0x000000, "Member 'WIREPUZZLE_Base_C_GetBatteryCells::Cells' has a wrong offset!");
static_assert(offsetof(WIREPUZZLE_Base_C_GetBatteryCells, Batteries) == 0x000010, "Member 'WIREPUZZLE_Base_C_GetBatteryCells::Batteries' has a wrong offset!");
static_assert(offsetof(WIREPUZZLE_Base_C_GetBatteryCells, Temp_int_Array_Index_Variable) == 0x000020, "Member 'WIREPUZZLE_Base_C_GetBatteryCells::Temp_int_Array_Index_Variable' has a wrong offset!");
static_assert(offsetof(WIREPUZZLE_Base_C_GetBatteryCells, Temp_int_Loop_Counter_Variable) == 0x000024, "Member 'WIREPUZZLE_Base_C_GetBatteryCells::Temp_int_Loop_Counter_Variable' has a wrong offset!");
static_assert(offsetof(WIREPUZZLE_Base_C_GetBatteryCells, CallFunc_Add_IntInt_ReturnValue) == 0x000028, "Member 'WIREPUZZLE_Base_C_GetBatteryCells::CallFunc_Add_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(WIREPUZZLE_Base_C_GetBatteryCells, K2Node_CreateDelegate_OutputDelegate) == 0x00002C, "Member 'WIREPUZZLE_Base_C_GetBatteryCells::K2Node_CreateDelegate_OutputDelegate' has a wrong offset!");
static_assert(offsetof(WIREPUZZLE_Base_C_GetBatteryCells, CallFunc_Array_Get_Item) == 0x000040, "Member 'WIREPUZZLE_Base_C_GetBatteryCells::CallFunc_Array_Get_Item' has a wrong offset!");
static_assert(offsetof(WIREPUZZLE_Base_C_GetBatteryCells, CallFunc_Array_Length_ReturnValue) == 0x000048, "Member 'WIREPUZZLE_Base_C_GetBatteryCells::CallFunc_Array_Length_ReturnValue' has a wrong offset!");
static_assert(offsetof(WIREPUZZLE_Base_C_GetBatteryCells, K2Node_DynamicCast_AsCOMP_Wire_Puzzle_Cell_Base) == 0x000050, "Member 'WIREPUZZLE_Base_C_GetBatteryCells::K2Node_DynamicCast_AsCOMP_Wire_Puzzle_Cell_Base' has a wrong offset!");
static_assert(offsetof(WIREPUZZLE_Base_C_GetBatteryCells, K2Node_DynamicCast_bSuccess) == 0x000058, "Member 'WIREPUZZLE_Base_C_GetBatteryCells::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(WIREPUZZLE_Base_C_GetBatteryCells, CallFunc_Less_IntInt_ReturnValue) == 0x000059, "Member 'WIREPUZZLE_Base_C_GetBatteryCells::CallFunc_Less_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(WIREPUZZLE_Base_C_GetBatteryCells, CallFunc_Array_Add_ReturnValue) == 0x00005C, "Member 'WIREPUZZLE_Base_C_GetBatteryCells::CallFunc_Array_Add_ReturnValue' has a wrong offset!");
static_assert(offsetof(WIREPUZZLE_Base_C_GetBatteryCells, CallFunc_EqualEqual_ByteByte_ReturnValue) == 0x000060, "Member 'WIREPUZZLE_Base_C_GetBatteryCells::CallFunc_EqualEqual_ByteByte_ReturnValue' has a wrong offset!");

// Function WIREPUZZLE_Base.WIREPUZZLE_Base_C.UpdateWireRetraction
// 0x0070 (0x0070 - 0x0000)
struct WIREPUZZLE_Base_C_UpdateWireRetraction final
{
public:
	int32                                         Temp_int_Loop_Counter_Variable;                    // 0x0000(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue;                   // 0x0004(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Array_Index_Variable;                     // 0x0008(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Loop_Counter_Variable_1;                  // 0x000C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue_1;                 // 0x0010(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TDelegate<void()>                             K2Node_CreateDelegate_OutputDelegate;              // 0x0014(0x0010)(ZeroConstructor, NoDestructor)
	int32                                         CallFunc_Array_Length_ReturnValue;                 // 0x0024(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FTimerHandle                           CallFunc_K2_SetTimerDelegate_ReturnValue;          // 0x0028(0x0008)(NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue;                  // 0x0030(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_31[0x3];                                       // 0x0031(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_GetGameTimeInSeconds_ReturnValue;         // 0x0034(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_GetWorldDeltaSeconds_ReturnValue;         // 0x0038(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Subtract_FloatFloat_ReturnValue;          // 0x003C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Array_Index_Variable_1;                   // 0x0040(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_FloatFloat_ReturnValue;              // 0x0044(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_45[0x3];                                       // 0x0045(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class AWIREPUZZLE_WirePlug_C*                 CallFunc_Array_Get_Item;                           // 0x0048(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_GetGameTimeInSeconds_ReturnValue_1;       // 0x0050(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Greater_FloatFloat_ReturnValue;           // 0x0054(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_55[0x3];                                       // 0x0055(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class AWIREPUZZLE_WirePlug_C*                 CallFunc_Array_Get_Item_1;                         // 0x0058(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Length_ReturnValue_1;               // 0x0060(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue_1;                // 0x0064(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_65[0x3];                                       // 0x0065(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_GetConnectionDepthOffset_Result;          // 0x0068(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_FInterpTo_Constant_ReturnValue;           // 0x006C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(WIREPUZZLE_Base_C_UpdateWireRetraction) == 0x000008, "Wrong alignment on WIREPUZZLE_Base_C_UpdateWireRetraction");
static_assert(sizeof(WIREPUZZLE_Base_C_UpdateWireRetraction) == 0x000070, "Wrong size on WIREPUZZLE_Base_C_UpdateWireRetraction");
static_assert(offsetof(WIREPUZZLE_Base_C_UpdateWireRetraction, Temp_int_Loop_Counter_Variable) == 0x000000, "Member 'WIREPUZZLE_Base_C_UpdateWireRetraction::Temp_int_Loop_Counter_Variable' has a wrong offset!");
static_assert(offsetof(WIREPUZZLE_Base_C_UpdateWireRetraction, CallFunc_Add_IntInt_ReturnValue) == 0x000004, "Member 'WIREPUZZLE_Base_C_UpdateWireRetraction::CallFunc_Add_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(WIREPUZZLE_Base_C_UpdateWireRetraction, Temp_int_Array_Index_Variable) == 0x000008, "Member 'WIREPUZZLE_Base_C_UpdateWireRetraction::Temp_int_Array_Index_Variable' has a wrong offset!");
static_assert(offsetof(WIREPUZZLE_Base_C_UpdateWireRetraction, Temp_int_Loop_Counter_Variable_1) == 0x00000C, "Member 'WIREPUZZLE_Base_C_UpdateWireRetraction::Temp_int_Loop_Counter_Variable_1' has a wrong offset!");
static_assert(offsetof(WIREPUZZLE_Base_C_UpdateWireRetraction, CallFunc_Add_IntInt_ReturnValue_1) == 0x000010, "Member 'WIREPUZZLE_Base_C_UpdateWireRetraction::CallFunc_Add_IntInt_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(WIREPUZZLE_Base_C_UpdateWireRetraction, K2Node_CreateDelegate_OutputDelegate) == 0x000014, "Member 'WIREPUZZLE_Base_C_UpdateWireRetraction::K2Node_CreateDelegate_OutputDelegate' has a wrong offset!");
static_assert(offsetof(WIREPUZZLE_Base_C_UpdateWireRetraction, CallFunc_Array_Length_ReturnValue) == 0x000024, "Member 'WIREPUZZLE_Base_C_UpdateWireRetraction::CallFunc_Array_Length_ReturnValue' has a wrong offset!");
static_assert(offsetof(WIREPUZZLE_Base_C_UpdateWireRetraction, CallFunc_K2_SetTimerDelegate_ReturnValue) == 0x000028, "Member 'WIREPUZZLE_Base_C_UpdateWireRetraction::CallFunc_K2_SetTimerDelegate_ReturnValue' has a wrong offset!");
static_assert(offsetof(WIREPUZZLE_Base_C_UpdateWireRetraction, CallFunc_Less_IntInt_ReturnValue) == 0x000030, "Member 'WIREPUZZLE_Base_C_UpdateWireRetraction::CallFunc_Less_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(WIREPUZZLE_Base_C_UpdateWireRetraction, CallFunc_GetGameTimeInSeconds_ReturnValue) == 0x000034, "Member 'WIREPUZZLE_Base_C_UpdateWireRetraction::CallFunc_GetGameTimeInSeconds_ReturnValue' has a wrong offset!");
static_assert(offsetof(WIREPUZZLE_Base_C_UpdateWireRetraction, CallFunc_GetWorldDeltaSeconds_ReturnValue) == 0x000038, "Member 'WIREPUZZLE_Base_C_UpdateWireRetraction::CallFunc_GetWorldDeltaSeconds_ReturnValue' has a wrong offset!");
static_assert(offsetof(WIREPUZZLE_Base_C_UpdateWireRetraction, CallFunc_Subtract_FloatFloat_ReturnValue) == 0x00003C, "Member 'WIREPUZZLE_Base_C_UpdateWireRetraction::CallFunc_Subtract_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(WIREPUZZLE_Base_C_UpdateWireRetraction, Temp_int_Array_Index_Variable_1) == 0x000040, "Member 'WIREPUZZLE_Base_C_UpdateWireRetraction::Temp_int_Array_Index_Variable_1' has a wrong offset!");
static_assert(offsetof(WIREPUZZLE_Base_C_UpdateWireRetraction, CallFunc_Less_FloatFloat_ReturnValue) == 0x000044, "Member 'WIREPUZZLE_Base_C_UpdateWireRetraction::CallFunc_Less_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(WIREPUZZLE_Base_C_UpdateWireRetraction, CallFunc_Array_Get_Item) == 0x000048, "Member 'WIREPUZZLE_Base_C_UpdateWireRetraction::CallFunc_Array_Get_Item' has a wrong offset!");
static_assert(offsetof(WIREPUZZLE_Base_C_UpdateWireRetraction, CallFunc_GetGameTimeInSeconds_ReturnValue_1) == 0x000050, "Member 'WIREPUZZLE_Base_C_UpdateWireRetraction::CallFunc_GetGameTimeInSeconds_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(WIREPUZZLE_Base_C_UpdateWireRetraction, CallFunc_Greater_FloatFloat_ReturnValue) == 0x000054, "Member 'WIREPUZZLE_Base_C_UpdateWireRetraction::CallFunc_Greater_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(WIREPUZZLE_Base_C_UpdateWireRetraction, CallFunc_Array_Get_Item_1) == 0x000058, "Member 'WIREPUZZLE_Base_C_UpdateWireRetraction::CallFunc_Array_Get_Item_1' has a wrong offset!");
static_assert(offsetof(WIREPUZZLE_Base_C_UpdateWireRetraction, CallFunc_Array_Length_ReturnValue_1) == 0x000060, "Member 'WIREPUZZLE_Base_C_UpdateWireRetraction::CallFunc_Array_Length_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(WIREPUZZLE_Base_C_UpdateWireRetraction, CallFunc_Less_IntInt_ReturnValue_1) == 0x000064, "Member 'WIREPUZZLE_Base_C_UpdateWireRetraction::CallFunc_Less_IntInt_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(WIREPUZZLE_Base_C_UpdateWireRetraction, CallFunc_GetConnectionDepthOffset_Result) == 0x000068, "Member 'WIREPUZZLE_Base_C_UpdateWireRetraction::CallFunc_GetConnectionDepthOffset_Result' has a wrong offset!");
static_assert(offsetof(WIREPUZZLE_Base_C_UpdateWireRetraction, CallFunc_FInterpTo_Constant_ReturnValue) == 0x00006C, "Member 'WIREPUZZLE_Base_C_UpdateWireRetraction::CallFunc_FInterpTo_Constant_ReturnValue' has a wrong offset!");

// Function WIREPUZZLE_Base.WIREPUZZLE_Base_C.StopChanneling
// 0x0028 (0x0028 - 0x0000)
struct WIREPUZZLE_Base_C_StopChanneling final
{
public:
	class AActor*                                 NewChannelingInteract;                             // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Result;                                            // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_StopChanneling_Result;                    // 0x0009(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x000A(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	ENUM_InteractResultType                       CallFunc_InteractWithPuzzlePrimitive_Result;       // 0x000B(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   CallFunc_InteractWithPuzzlePrimitive_ResultText;   // 0x0010(0x0018)()
};
static_assert(alignof(WIREPUZZLE_Base_C_StopChanneling) == 0x000008, "Wrong alignment on WIREPUZZLE_Base_C_StopChanneling");
static_assert(sizeof(WIREPUZZLE_Base_C_StopChanneling) == 0x000028, "Wrong size on WIREPUZZLE_Base_C_StopChanneling");
static_assert(offsetof(WIREPUZZLE_Base_C_StopChanneling, NewChannelingInteract) == 0x000000, "Member 'WIREPUZZLE_Base_C_StopChanneling::NewChannelingInteract' has a wrong offset!");
static_assert(offsetof(WIREPUZZLE_Base_C_StopChanneling, Result) == 0x000008, "Member 'WIREPUZZLE_Base_C_StopChanneling::Result' has a wrong offset!");
static_assert(offsetof(WIREPUZZLE_Base_C_StopChanneling, CallFunc_StopChanneling_Result) == 0x000009, "Member 'WIREPUZZLE_Base_C_StopChanneling::CallFunc_StopChanneling_Result' has a wrong offset!");
static_assert(offsetof(WIREPUZZLE_Base_C_StopChanneling, CallFunc_IsValid_ReturnValue) == 0x00000A, "Member 'WIREPUZZLE_Base_C_StopChanneling::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(WIREPUZZLE_Base_C_StopChanneling, CallFunc_InteractWithPuzzlePrimitive_Result) == 0x00000B, "Member 'WIREPUZZLE_Base_C_StopChanneling::CallFunc_InteractWithPuzzlePrimitive_Result' has a wrong offset!");
static_assert(offsetof(WIREPUZZLE_Base_C_StopChanneling, CallFunc_InteractWithPuzzlePrimitive_ResultText) == 0x000010, "Member 'WIREPUZZLE_Base_C_StopChanneling::CallFunc_InteractWithPuzzlePrimitive_ResultText' has a wrong offset!");

// Function WIREPUZZLE_Base.WIREPUZZLE_Base_C.SortBatteries
// 0x0050 (0x0050 - 0x0000)
struct WIREPUZZLE_Base_C_SortBatteries final
{
public:
	const class UObject*                          ObjectA;                                           // 0x0000(0x0008)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	const class UObject*                          ObjectB;                                           // 0x0008(0x0008)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          ReturnValue;                                       // 0x0010(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor)
	uint8                                         Pad_11[0x3];                                       // 0x0011(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FIntPoint                              LocationB;                                         // 0x0014(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FIntPoint                              LocationA;                                         // 0x001C(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_24[0x4];                                       // 0x0024(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UCOMP_WirePuzzle_Cell_Base_C*           K2Node_DynamicCast_AsCOMP_Wire_Puzzle_Cell_Base;   // 0x0028(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0030(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_31[0x7];                                       // 0x0031(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UCOMP_WirePuzzle_Cell_Base_C*           K2Node_DynamicCast_AsCOMP_Wire_Puzzle_Cell_Base_1; // 0x0038(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess_1;                     // 0x0040(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Greater_IntInt_ReturnValue;               // 0x0041(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Less_IntInt_ReturnValue;                  // 0x0042(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_43[0x1];                                       // 0x0043(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	struct FIntPoint                              CallFunc_Subtract_IntPointIntPoint_ReturnValue;    // 0x0044(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_NotEqual_IntInt_ReturnValue;              // 0x004C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(WIREPUZZLE_Base_C_SortBatteries) == 0x000008, "Wrong alignment on WIREPUZZLE_Base_C_SortBatteries");
static_assert(sizeof(WIREPUZZLE_Base_C_SortBatteries) == 0x000050, "Wrong size on WIREPUZZLE_Base_C_SortBatteries");
static_assert(offsetof(WIREPUZZLE_Base_C_SortBatteries, ObjectA) == 0x000000, "Member 'WIREPUZZLE_Base_C_SortBatteries::ObjectA' has a wrong offset!");
static_assert(offsetof(WIREPUZZLE_Base_C_SortBatteries, ObjectB) == 0x000008, "Member 'WIREPUZZLE_Base_C_SortBatteries::ObjectB' has a wrong offset!");
static_assert(offsetof(WIREPUZZLE_Base_C_SortBatteries, ReturnValue) == 0x000010, "Member 'WIREPUZZLE_Base_C_SortBatteries::ReturnValue' has a wrong offset!");
static_assert(offsetof(WIREPUZZLE_Base_C_SortBatteries, LocationB) == 0x000014, "Member 'WIREPUZZLE_Base_C_SortBatteries::LocationB' has a wrong offset!");
static_assert(offsetof(WIREPUZZLE_Base_C_SortBatteries, LocationA) == 0x00001C, "Member 'WIREPUZZLE_Base_C_SortBatteries::LocationA' has a wrong offset!");
static_assert(offsetof(WIREPUZZLE_Base_C_SortBatteries, K2Node_DynamicCast_AsCOMP_Wire_Puzzle_Cell_Base) == 0x000028, "Member 'WIREPUZZLE_Base_C_SortBatteries::K2Node_DynamicCast_AsCOMP_Wire_Puzzle_Cell_Base' has a wrong offset!");
static_assert(offsetof(WIREPUZZLE_Base_C_SortBatteries, K2Node_DynamicCast_bSuccess) == 0x000030, "Member 'WIREPUZZLE_Base_C_SortBatteries::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(WIREPUZZLE_Base_C_SortBatteries, K2Node_DynamicCast_AsCOMP_Wire_Puzzle_Cell_Base_1) == 0x000038, "Member 'WIREPUZZLE_Base_C_SortBatteries::K2Node_DynamicCast_AsCOMP_Wire_Puzzle_Cell_Base_1' has a wrong offset!");
static_assert(offsetof(WIREPUZZLE_Base_C_SortBatteries, K2Node_DynamicCast_bSuccess_1) == 0x000040, "Member 'WIREPUZZLE_Base_C_SortBatteries::K2Node_DynamicCast_bSuccess_1' has a wrong offset!");
static_assert(offsetof(WIREPUZZLE_Base_C_SortBatteries, CallFunc_Greater_IntInt_ReturnValue) == 0x000041, "Member 'WIREPUZZLE_Base_C_SortBatteries::CallFunc_Greater_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(WIREPUZZLE_Base_C_SortBatteries, CallFunc_Less_IntInt_ReturnValue) == 0x000042, "Member 'WIREPUZZLE_Base_C_SortBatteries::CallFunc_Less_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(WIREPUZZLE_Base_C_SortBatteries, CallFunc_Subtract_IntPointIntPoint_ReturnValue) == 0x000044, "Member 'WIREPUZZLE_Base_C_SortBatteries::CallFunc_Subtract_IntPointIntPoint_ReturnValue' has a wrong offset!");
static_assert(offsetof(WIREPUZZLE_Base_C_SortBatteries, CallFunc_NotEqual_IntInt_ReturnValue) == 0x00004C, "Member 'WIREPUZZLE_Base_C_SortBatteries::CallFunc_NotEqual_IntInt_ReturnValue' has a wrong offset!");

// Function WIREPUZZLE_Base.WIREPUZZLE_Base_C.EVENT_OnPuzzleBoxClosed
// 0x0020 (0x0020 - 0x0000)
struct WIREPUZZLE_Base_C_EVENT_OnPuzzleBoxClosed final
{
public:
	int32                                         Temp_int_Array_Index_Variable;                     // 0x0000(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Loop_Counter_Variable;                    // 0x0004(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue;                   // 0x0008(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class AWIREPUZZLE_WirePlug_C*                 CallFunc_Array_Get_Item;                           // 0x0010(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Length_ReturnValue;                 // 0x0018(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue;                  // 0x001C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(WIREPUZZLE_Base_C_EVENT_OnPuzzleBoxClosed) == 0x000008, "Wrong alignment on WIREPUZZLE_Base_C_EVENT_OnPuzzleBoxClosed");
static_assert(sizeof(WIREPUZZLE_Base_C_EVENT_OnPuzzleBoxClosed) == 0x000020, "Wrong size on WIREPUZZLE_Base_C_EVENT_OnPuzzleBoxClosed");
static_assert(offsetof(WIREPUZZLE_Base_C_EVENT_OnPuzzleBoxClosed, Temp_int_Array_Index_Variable) == 0x000000, "Member 'WIREPUZZLE_Base_C_EVENT_OnPuzzleBoxClosed::Temp_int_Array_Index_Variable' has a wrong offset!");
static_assert(offsetof(WIREPUZZLE_Base_C_EVENT_OnPuzzleBoxClosed, Temp_int_Loop_Counter_Variable) == 0x000004, "Member 'WIREPUZZLE_Base_C_EVENT_OnPuzzleBoxClosed::Temp_int_Loop_Counter_Variable' has a wrong offset!");
static_assert(offsetof(WIREPUZZLE_Base_C_EVENT_OnPuzzleBoxClosed, CallFunc_Add_IntInt_ReturnValue) == 0x000008, "Member 'WIREPUZZLE_Base_C_EVENT_OnPuzzleBoxClosed::CallFunc_Add_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(WIREPUZZLE_Base_C_EVENT_OnPuzzleBoxClosed, CallFunc_Array_Get_Item) == 0x000010, "Member 'WIREPUZZLE_Base_C_EVENT_OnPuzzleBoxClosed::CallFunc_Array_Get_Item' has a wrong offset!");
static_assert(offsetof(WIREPUZZLE_Base_C_EVENT_OnPuzzleBoxClosed, CallFunc_Array_Length_ReturnValue) == 0x000018, "Member 'WIREPUZZLE_Base_C_EVENT_OnPuzzleBoxClosed::CallFunc_Array_Length_ReturnValue' has a wrong offset!");
static_assert(offsetof(WIREPUZZLE_Base_C_EVENT_OnPuzzleBoxClosed, CallFunc_Less_IntInt_ReturnValue) == 0x00001C, "Member 'WIREPUZZLE_Base_C_EVENT_OnPuzzleBoxClosed::CallFunc_Less_IntInt_ReturnValue' has a wrong offset!");

// Function WIREPUZZLE_Base.WIREPUZZLE_Base_C.InteractWithPuzzlePrimitive
// 0x0040 (0x0040 - 0x0000)
struct WIREPUZZLE_Base_C_InteractWithPuzzlePrimitive final
{
public:
	class UPrimitiveComponent*                    CursorPrimitive;                                   // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ENUM_InteractResultType                       Result;                                            // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   ResultText;                                        // 0x0010(0x0018)(Parm, OutParm)
	bool                                          CallFunc_IsPuzzleSolved_Result;                    // 0x0028(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_29[0x7];                                       // 0x0029(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UCOMP_WirePuzzle_Cell_Base_C*           K2Node_DynamicCast_AsCOMP_Wire_Puzzle_Cell_Base;   // 0x0030(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0038(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Not_PreBool_ReturnValue;                  // 0x0039(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(WIREPUZZLE_Base_C_InteractWithPuzzlePrimitive) == 0x000008, "Wrong alignment on WIREPUZZLE_Base_C_InteractWithPuzzlePrimitive");
static_assert(sizeof(WIREPUZZLE_Base_C_InteractWithPuzzlePrimitive) == 0x000040, "Wrong size on WIREPUZZLE_Base_C_InteractWithPuzzlePrimitive");
static_assert(offsetof(WIREPUZZLE_Base_C_InteractWithPuzzlePrimitive, CursorPrimitive) == 0x000000, "Member 'WIREPUZZLE_Base_C_InteractWithPuzzlePrimitive::CursorPrimitive' has a wrong offset!");
static_assert(offsetof(WIREPUZZLE_Base_C_InteractWithPuzzlePrimitive, Result) == 0x000008, "Member 'WIREPUZZLE_Base_C_InteractWithPuzzlePrimitive::Result' has a wrong offset!");
static_assert(offsetof(WIREPUZZLE_Base_C_InteractWithPuzzlePrimitive, ResultText) == 0x000010, "Member 'WIREPUZZLE_Base_C_InteractWithPuzzlePrimitive::ResultText' has a wrong offset!");
static_assert(offsetof(WIREPUZZLE_Base_C_InteractWithPuzzlePrimitive, CallFunc_IsPuzzleSolved_Result) == 0x000028, "Member 'WIREPUZZLE_Base_C_InteractWithPuzzlePrimitive::CallFunc_IsPuzzleSolved_Result' has a wrong offset!");
static_assert(offsetof(WIREPUZZLE_Base_C_InteractWithPuzzlePrimitive, K2Node_DynamicCast_AsCOMP_Wire_Puzzle_Cell_Base) == 0x000030, "Member 'WIREPUZZLE_Base_C_InteractWithPuzzlePrimitive::K2Node_DynamicCast_AsCOMP_Wire_Puzzle_Cell_Base' has a wrong offset!");
static_assert(offsetof(WIREPUZZLE_Base_C_InteractWithPuzzlePrimitive, K2Node_DynamicCast_bSuccess) == 0x000038, "Member 'WIREPUZZLE_Base_C_InteractWithPuzzlePrimitive::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(WIREPUZZLE_Base_C_InteractWithPuzzlePrimitive, CallFunc_Not_PreBool_ReturnValue) == 0x000039, "Member 'WIREPUZZLE_Base_C_InteractWithPuzzlePrimitive::CallFunc_Not_PreBool_ReturnValue' has a wrong offset!");

// Function WIREPUZZLE_Base.WIREPUZZLE_Base_C.GetPuzzleShape
// 0x0150 (0x0150 - 0x0000)
struct WIREPUZZLE_Base_C_GetPuzzleShape final
{
public:
	class UPrimitiveComponent*                    CursorPrimitive;                                   // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UShapeComponent*                        TargetShape;                                       // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UCOMP_WirePuzzle_Cell_Base_C*           Cell;                                              // 0x0010(0x0008)(Edit, BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash)
	class UShapeComponent*                        CallFunc_GetPuzzleShape_TargetShape;               // 0x0018(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UCOMP_WirePuzzle_Cell_Base_C*           K2Node_DynamicCast_AsCOMP_Wire_Puzzle_Cell_Base;   // 0x0020(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0028(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0029(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_2A[0x6];                                       // 0x002A(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTransform                             CallFunc_K2_GetComponentToWorld_ReturnValue;       // 0x0030(0x0030)(IsPlainOldData, NoDestructor)
	struct FVector                                CallFunc_BreakTransform_Location;                  // 0x0060(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               CallFunc_BreakTransform_Rotation;                  // 0x006C(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FVector                                CallFunc_BreakTransform_Scale;                     // 0x0078(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_ByteByte_ReturnValue;          // 0x0084(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_85[0xB];                                       // 0x0085(0x000B)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTransform                             CallFunc_MakeTransform_ReturnValue;                // 0x0090(0x0030)(IsPlainOldData, NoDestructor)
	bool                                          CallFunc_EqualEqual_ByteByte_ReturnValue_1;        // 0x00C0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_EqualEqual_ByteByte_ReturnValue_2;        // 0x00C1(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_EqualEqual_ByteByte_ReturnValue_3;        // 0x00C2(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BooleanOR_ReturnValue;                    // 0x00C3(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FHitResult                             CallFunc_K2_SetWorldTransform_SweepHitResult;      // 0x00C4(0x0088)(IsPlainOldData, NoDestructor, ContainsInstancedReference)
	bool                                          CallFunc_BooleanOR_ReturnValue_1;                  // 0x014C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BooleanOR_ReturnValue_2;                  // 0x014D(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(WIREPUZZLE_Base_C_GetPuzzleShape) == 0x000010, "Wrong alignment on WIREPUZZLE_Base_C_GetPuzzleShape");
static_assert(sizeof(WIREPUZZLE_Base_C_GetPuzzleShape) == 0x000150, "Wrong size on WIREPUZZLE_Base_C_GetPuzzleShape");
static_assert(offsetof(WIREPUZZLE_Base_C_GetPuzzleShape, CursorPrimitive) == 0x000000, "Member 'WIREPUZZLE_Base_C_GetPuzzleShape::CursorPrimitive' has a wrong offset!");
static_assert(offsetof(WIREPUZZLE_Base_C_GetPuzzleShape, TargetShape) == 0x000008, "Member 'WIREPUZZLE_Base_C_GetPuzzleShape::TargetShape' has a wrong offset!");
static_assert(offsetof(WIREPUZZLE_Base_C_GetPuzzleShape, Cell) == 0x000010, "Member 'WIREPUZZLE_Base_C_GetPuzzleShape::Cell' has a wrong offset!");
static_assert(offsetof(WIREPUZZLE_Base_C_GetPuzzleShape, CallFunc_GetPuzzleShape_TargetShape) == 0x000018, "Member 'WIREPUZZLE_Base_C_GetPuzzleShape::CallFunc_GetPuzzleShape_TargetShape' has a wrong offset!");
static_assert(offsetof(WIREPUZZLE_Base_C_GetPuzzleShape, K2Node_DynamicCast_AsCOMP_Wire_Puzzle_Cell_Base) == 0x000020, "Member 'WIREPUZZLE_Base_C_GetPuzzleShape::K2Node_DynamicCast_AsCOMP_Wire_Puzzle_Cell_Base' has a wrong offset!");
static_assert(offsetof(WIREPUZZLE_Base_C_GetPuzzleShape, K2Node_DynamicCast_bSuccess) == 0x000028, "Member 'WIREPUZZLE_Base_C_GetPuzzleShape::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(WIREPUZZLE_Base_C_GetPuzzleShape, CallFunc_IsValid_ReturnValue) == 0x000029, "Member 'WIREPUZZLE_Base_C_GetPuzzleShape::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(WIREPUZZLE_Base_C_GetPuzzleShape, CallFunc_K2_GetComponentToWorld_ReturnValue) == 0x000030, "Member 'WIREPUZZLE_Base_C_GetPuzzleShape::CallFunc_K2_GetComponentToWorld_ReturnValue' has a wrong offset!");
static_assert(offsetof(WIREPUZZLE_Base_C_GetPuzzleShape, CallFunc_BreakTransform_Location) == 0x000060, "Member 'WIREPUZZLE_Base_C_GetPuzzleShape::CallFunc_BreakTransform_Location' has a wrong offset!");
static_assert(offsetof(WIREPUZZLE_Base_C_GetPuzzleShape, CallFunc_BreakTransform_Rotation) == 0x00006C, "Member 'WIREPUZZLE_Base_C_GetPuzzleShape::CallFunc_BreakTransform_Rotation' has a wrong offset!");
static_assert(offsetof(WIREPUZZLE_Base_C_GetPuzzleShape, CallFunc_BreakTransform_Scale) == 0x000078, "Member 'WIREPUZZLE_Base_C_GetPuzzleShape::CallFunc_BreakTransform_Scale' has a wrong offset!");
static_assert(offsetof(WIREPUZZLE_Base_C_GetPuzzleShape, CallFunc_EqualEqual_ByteByte_ReturnValue) == 0x000084, "Member 'WIREPUZZLE_Base_C_GetPuzzleShape::CallFunc_EqualEqual_ByteByte_ReturnValue' has a wrong offset!");
static_assert(offsetof(WIREPUZZLE_Base_C_GetPuzzleShape, CallFunc_MakeTransform_ReturnValue) == 0x000090, "Member 'WIREPUZZLE_Base_C_GetPuzzleShape::CallFunc_MakeTransform_ReturnValue' has a wrong offset!");
static_assert(offsetof(WIREPUZZLE_Base_C_GetPuzzleShape, CallFunc_EqualEqual_ByteByte_ReturnValue_1) == 0x0000C0, "Member 'WIREPUZZLE_Base_C_GetPuzzleShape::CallFunc_EqualEqual_ByteByte_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(WIREPUZZLE_Base_C_GetPuzzleShape, CallFunc_EqualEqual_ByteByte_ReturnValue_2) == 0x0000C1, "Member 'WIREPUZZLE_Base_C_GetPuzzleShape::CallFunc_EqualEqual_ByteByte_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(WIREPUZZLE_Base_C_GetPuzzleShape, CallFunc_EqualEqual_ByteByte_ReturnValue_3) == 0x0000C2, "Member 'WIREPUZZLE_Base_C_GetPuzzleShape::CallFunc_EqualEqual_ByteByte_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(WIREPUZZLE_Base_C_GetPuzzleShape, CallFunc_BooleanOR_ReturnValue) == 0x0000C3, "Member 'WIREPUZZLE_Base_C_GetPuzzleShape::CallFunc_BooleanOR_ReturnValue' has a wrong offset!");
static_assert(offsetof(WIREPUZZLE_Base_C_GetPuzzleShape, CallFunc_K2_SetWorldTransform_SweepHitResult) == 0x0000C4, "Member 'WIREPUZZLE_Base_C_GetPuzzleShape::CallFunc_K2_SetWorldTransform_SweepHitResult' has a wrong offset!");
static_assert(offsetof(WIREPUZZLE_Base_C_GetPuzzleShape, CallFunc_BooleanOR_ReturnValue_1) == 0x00014C, "Member 'WIREPUZZLE_Base_C_GetPuzzleShape::CallFunc_BooleanOR_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(WIREPUZZLE_Base_C_GetPuzzleShape, CallFunc_BooleanOR_ReturnValue_2) == 0x00014D, "Member 'WIREPUZZLE_Base_C_GetPuzzleShape::CallFunc_BooleanOR_ReturnValue_2' has a wrong offset!");

// Function WIREPUZZLE_Base.WIREPUZZLE_Base_C.SetPuzzleSolved
// 0x0001 (0x0001 - 0x0000)
struct WIREPUZZLE_Base_C_SetPuzzleSolved final
{
public:
	ENUM_PuzzleSolveType                          SolveType;                                         // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(WIREPUZZLE_Base_C_SetPuzzleSolved) == 0x000001, "Wrong alignment on WIREPUZZLE_Base_C_SetPuzzleSolved");
static_assert(sizeof(WIREPUZZLE_Base_C_SetPuzzleSolved) == 0x000001, "Wrong size on WIREPUZZLE_Base_C_SetPuzzleSolved");
static_assert(offsetof(WIREPUZZLE_Base_C_SetPuzzleSolved, SolveType) == 0x000000, "Member 'WIREPUZZLE_Base_C_SetPuzzleSolved::SolveType' has a wrong offset!");

// Function WIREPUZZLE_Base.WIREPUZZLE_Base_C.LoadPuzzleFromDataTable
// 0x0640 (0x0640 - 0x0000)
struct WIREPUZZLE_Base_C_LoadPuzzleFromDataTable final
{
public:
	class UPoseableMeshComponent*                 LaserMeshComponent;                                // 0x0000(0x0008)(Edit, BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         BracketOffsetY;                                    // 0x0008(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         BracketOffsetX;                                    // 0x000C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         BracketRotation;                                   // 0x0010(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          IsOnMaxSide;                                       // 0x0014(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          IsBatteryVertical;                                 // 0x0015(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_16[0x2];                                       // 0x0016(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CellSize;                                          // 0x0018(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CurrentCellMax;                                    // 0x001C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CurrentCellMin;                                    // 0x0020(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_24[0x4];                                       // 0x0024(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class UCOMP_WirePuzzle_Cell_Base_C*>   Batteries;                                         // 0x0028(0x0010)(Edit, BlueprintVisible, ContainsInstancedReference)
	class UCOMP_WirePuzzle_Cell_Base_C*           CurrentWireCell;                                   // 0x0038(0x0008)(Edit, BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CellIsMirrored;                                    // 0x0040(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          IsAlternate;                                       // 0x0041(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_42[0x2];                                       // 0x0042(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CellRotations;                                     // 0x0044(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         OrientationBits;                                   // 0x0048(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CellLookupTypeIndex;                               // 0x004C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FTransform                             CurrentCellTransform;                              // 0x0050(0x0030)(Edit, BlueprintVisible, IsPlainOldData, NoDestructor)
	struct FIntPoint                              CurrentLocation;                                   // 0x0080(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CurrentIndex;                                      // 0x0088(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_8C[0x4];                                       // 0x008C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FSTRUCT_WirePuzzleData                 PuzzleData;                                        // 0x0090(0x0028)(Edit, BlueprintVisible, HasGetValueTypeHash)
	float                                         Temp_float_Variable;                               // 0x00B8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Temp_float_Variable_1;                             // 0x00BC(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Variable;                                // 0x00C0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Temp_bool_Variable_1;                              // 0x00C1(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Temp_bool_Variable_2;                              // 0x00C2(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_C3[0x1];                                       // 0x00C3(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                Temp_struct_Variable;                              // 0x00C4(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                Temp_struct_Variable_1;                            // 0x00D0(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Variable_3;                              // 0x00DC(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_DD[0x3];                                       // 0x00DD(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                Temp_struct_Variable_2;                            // 0x00E0(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                Temp_struct_Variable_3;                            // 0x00EC(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Variable_4;                              // 0x00F8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_F9[0x3];                                       // 0x00F9(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         Temp_float_Variable_2;                             // 0x00FC(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Temp_float_Variable_3;                             // 0x0100(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Variable_5;                              // 0x0104(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_105[0x3];                                      // 0x0105(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         Temp_float_Variable_4;                             // 0x0108(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Temp_float_Variable_5;                             // 0x010C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_SetStaticMesh_ReturnValue;                // 0x0110(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_SetStaticMesh_ReturnValue_1;              // 0x0111(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_112[0x2];                                      // 0x0112(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	struct FIntPoint                              CallFunc_GetCellLocationFromIndex_CellLocation;    // 0x0114(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Array_Index_Variable;                     // 0x011C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Variable_6;                              // 0x0120(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_121[0x3];                                      // 0x0121(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Temp_int_Variable;                                 // 0x0124(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue;                   // 0x0128(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_12C[0x4];                                      // 0x012C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTransform                             CallFunc_K2_GetComponentToWorld_ReturnValue;       // 0x0130(0x0030)(IsPlainOldData, NoDestructor)
	struct FVector                                CallFunc_BreakTransform_Location;                  // 0x0160(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               CallFunc_BreakTransform_Rotation;                  // 0x016C(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FVector                                CallFunc_BreakTransform_Scale;                     // 0x0178(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_184[0xC];                                      // 0x0184(0x000C)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTransform                             CallFunc_GetRelativeTransform_ReturnValue;         // 0x0190(0x0030)(IsPlainOldData, NoDestructor)
	float                                         CallFunc_BreakVector_X;                            // 0x01C0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector_Y;                            // 0x01C4(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector_Z;                            // 0x01C8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1CC[0x4];                                      // 0x01CC(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UPoseableMeshComponent*                 CallFunc_AddComponent_ReturnValue;                 // 0x01D0(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Multiply_FloatFloat_ReturnValue;          // 0x01D8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_MakeVector_ReturnValue;                   // 0x01DC(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1E8[0x8];                                      // 0x01E8(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTransform                             CallFunc_MakeTransform_ReturnValue;                // 0x01F0(0x0030)(IsPlainOldData, NoDestructor)
	bool                                          CallFunc_GreaterEqual_IntInt_ReturnValue;          // 0x0220(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Not_PreBool_ReturnValue;                  // 0x0221(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BooleanAND_ReturnValue;                   // 0x0222(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_223[0x1];                                      // 0x0223(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Conv_BoolToInt_ReturnValue;               // 0x0224(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Multiply_FloatFloat_ReturnValue_1;        // 0x0228(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Multiply_FloatFloat_ReturnValue_2;        // 0x022C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Multiply_FloatFloat_ReturnValue_3;        // 0x0230(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         K2Node_Select_Default;                             // 0x0234(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         K2Node_Select_Default_1;                           // 0x0238(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         K2Node_Select_Default_2;                           // 0x023C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                K2Node_Select_Default_3;                           // 0x0240(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_MakeVector_ReturnValue_1;                 // 0x024C(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               CallFunc_MakeRotator_ReturnValue;                  // 0x0258(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FVector                                K2Node_Select_Default_4;                           // 0x0264(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               CallFunc_MakeRotator_ReturnValue_1;                // 0x0270(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                         K2Node_Select_Default_5;                           // 0x027C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         K2Node_Select_Default_6;                           // 0x0280(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Add_FloatFloat_ReturnValue;               // 0x0284(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UCOMP_WirePuzzle_Cell_Base_C*           CallFunc_Array_Get_Item;                           // 0x0288(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Variable_7;                              // 0x0290(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_291[0x3];                                      // 0x0291(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_SelectInt_ReturnValue;                    // 0x0294(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         K2Node_Select_Default_7;                           // 0x0298(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_GreaterEqual_IntInt_ReturnValue_1;        // 0x029C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_29D[0x3];                                      // 0x029D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class UCOMP_WirePuzzle_Cell_Base_C*           CallFunc_Array_Get_Item_1;                         // 0x02A0(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UCOMP_WirePuzzle_Cell_Base_C*           CallFunc_Array_Get_Item_2;                         // 0x02A8(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FIntPoint                              CallFunc_Subtract_IntPointIntPoint_ReturnValue;    // 0x02B0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UCOMP_WirePuzzle_Cell_Base_C*           CallFunc_Array_Get_Item_3;                         // 0x02B8(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_NotEqual_IntInt_ReturnValue;              // 0x02C0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_2C1[0x3];                                      // 0x02C1(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Array_Length_ReturnValue;                 // 0x02C4(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_GetGridDimensions_Result;                 // 0x02C8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_GetGridDimensions_Result_1;               // 0x02CC(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Conv_IntToFloat_ReturnValue;              // 0x02D0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Multiply_IntInt_ReturnValue;              // 0x02D4(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_GetGridDimensions_Result_2;               // 0x02D8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Subtract_IntInt_ReturnValue;              // 0x02DC(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Conv_IntToFloat_ReturnValue_1;            // 0x02E0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_LessEqual_IntInt_ReturnValue;             // 0x02E4(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_2E5[0x3];                                      // 0x02E5(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_Multiply_FloatFloat_ReturnValue_4;        // 0x02E8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Multiply_FloatFloat_ReturnValue_5;        // 0x02EC(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FDataTableRowHandle                    CallFunc_GetPuzzleRowToUse_PuzzleRow;              // 0x02F0(0x0010)(NoDestructor)
	struct FSTRUCT_WirePuzzleData                 CallFunc_GetDataTableRowFromName_OutRow;           // 0x0300(0x0028)(HasGetValueTypeHash)
	bool                                          CallFunc_GetDataTableRowFromName_ReturnValue;      // 0x0328(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_329[0x3];                                      // 0x0329(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_Multiply_FloatFloat_ReturnValue_6;        // 0x032C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Multiply_FloatFloat_ReturnValue_7;        // 0x0330(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_334[0x4];                                      // 0x0334(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class AWIREPUZZLE_WirePlug_C*                 CallFunc_GetWirePlug_Plug;                         // 0x0338(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash)
	int32                                         CallFunc_Array_AddUnique_ReturnValue;              // 0x0340(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_344[0x4];                                      // 0x0344(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class AWIREPUZZLE_WirePlug_C*                 CallFunc_GetWirePlug_Plug_1;                       // 0x0348(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0350(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_351[0x3];                                      // 0x0351(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Array_LastIndex_ReturnValue;              // 0x0354(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Variable_8;                              // 0x0358(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_EqualEqual_IntInt_ReturnValue;            // 0x0359(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_35A[0x2];                                      // 0x035A(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_SelectInt_ReturnValue_1;                  // 0x035C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         K2Node_Select_Default_8;                           // 0x0360(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_MakeVector_ReturnValue_2;                 // 0x0364(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_LastIndex_ReturnValue_1;            // 0x0370(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_IntInt_ReturnValue_1;          // 0x0374(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_375[0x3];                                      // 0x0375(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_SelectInt_ReturnValue_2;                  // 0x0378(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_LessEqual_IntInt_ReturnValue_1;           // 0x037C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_GreaterEqual_IntInt_ReturnValue_2;        // 0x037D(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BooleanAND_ReturnValue_1;                 // 0x037E(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_LessEqual_IntInt_ReturnValue_2;           // 0x037F(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	int32                                         CallFunc_Add_IntInt_ReturnValue_1;                 // 0x0380(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_IntInt_ReturnValue_2;          // 0x0384(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_385[0x3];                                      // 0x0385(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_SelectInt_ReturnValue_3;                  // 0x0388(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_IntInt_ReturnValue_3;          // 0x038C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_38D[0x3];                                      // 0x038D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class UCOMP_WirePuzzle_Cell_Base_C*>   CallFunc_GetBatteryCells_Cells;                    // 0x0390(0x0010)(ReferenceParm, ContainsInstancedReference)
	int32                                         CallFunc_Multiply_IntInt_ReturnValue_1;            // 0x03A0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_SelectInt_ReturnValue_4;                  // 0x03A4(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Loop_Counter_Variable;                    // 0x03A8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue;                  // 0x03AC(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_3AD[0x3];                                      // 0x03AD(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Add_IntInt_ReturnValue_2;                 // 0x03B0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Percent_IntInt_ReturnValue;               // 0x03B4(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Multiply_IntInt_ReturnValue_2;            // 0x03B8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_3BC[0x4];                                      // 0x03BC(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTransform                             CallFunc_GetRelativeTransform_ReturnValue_1;       // 0x03C0(0x0030)(IsPlainOldData, NoDestructor)
	int32                                         CallFunc_Add_IntInt_ReturnValue_3;                 // 0x03F0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakTransform_Location_1;                // 0x03F4(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               CallFunc_BreakTransform_Rotation_1;                // 0x0400(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FVector                                CallFunc_BreakTransform_Scale_1;                   // 0x040C(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue_4;                 // 0x0418(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Add_VectorVector_ReturnValue;             // 0x041C(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Subtract_IntInt_ReturnValue_1;            // 0x0428(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_42C[0x4];                                      // 0x042C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTransform                             CallFunc_MakeTransform_ReturnValue_1;              // 0x0430(0x0030)(IsPlainOldData, NoDestructor)
	float                                         CallFunc_Conv_IntToFloat_ReturnValue_2;            // 0x0460(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_464[0x4];                                      // 0x0464(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UUserStaticMeshComponent*               CallFunc_AddComponent_ReturnValue_1;               // 0x0468(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Multiply_FloatFloat_ReturnValue_8;        // 0x0470(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue_1;                    // 0x0474(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Not_PreBool_ReturnValue_1;                // 0x0475(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsValid_ReturnValue_2;                    // 0x0476(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Not_PreBool_ReturnValue_2;                // 0x0477(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	int32                                         CallFunc_Percent_IntInt_ReturnValue_1;             // 0x0478(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Temp_float_Variable_6;                             // 0x047C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Multiply_IntInt_ReturnValue_3;            // 0x0480(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue_5;                 // 0x0484(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Subtract_IntInt_ReturnValue_2;            // 0x0488(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Conv_IntToFloat_ReturnValue_3;            // 0x048C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FTransform                             CallFunc_GetRelativeTransform_ReturnValue_2;       // 0x0490(0x0030)(IsPlainOldData, NoDestructor)
	float                                         CallFunc_Multiply_FloatFloat_ReturnValue_9;        // 0x04C0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakTransform_Location_2;                // 0x04C4(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               CallFunc_BreakTransform_Rotation_2;                // 0x04D0(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FVector                                CallFunc_BreakTransform_Scale_2;                   // 0x04DC(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Add_VectorVector_ReturnValue_1;           // 0x04E8(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_4F4[0xC];                                      // 0x04F4(0x000C)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTransform                             CallFunc_MakeTransform_ReturnValue_2;              // 0x0500(0x0030)(IsPlainOldData, NoDestructor)
	bool                                          CallFunc_GreaterEqual_IntInt_ReturnValue_3;        // 0x0530(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_531[0x7];                                      // 0x0531(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UUserStaticMeshComponent*               CallFunc_AddComponent_ReturnValue_2;               // 0x0538(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BooleanAND_ReturnValue_2;                 // 0x0540(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_541[0x3];                                      // 0x0541(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_And_IntInt_ReturnValue;                   // 0x0544(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Conv_IntToBool_ReturnValue;               // 0x0548(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_549[0x3];                                      // 0x0549(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_BitShiftRight_ReturnValue;                // 0x054C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_BitShiftRight_ReturnValue_1;              // 0x0550(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_And_IntInt_ReturnValue_1;                 // 0x0554(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Conv_IntToBool_ReturnValue_1;             // 0x0558(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_559[0x3];                                      // 0x0559(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_Conv_IntToFloat_ReturnValue_4;            // 0x055C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Conv_IntToFloat_ReturnValue_5;            // 0x0560(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_564[0x4];                                      // 0x0564(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UCOMP_WirePuzzle_Cell_Base_C*           CallFunc_AddComponent_ReturnValue_3;               // 0x0568(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Conv_ByteToInt_ReturnValue;               // 0x0570(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Conv_ByteToInt_ReturnValue_1;             // 0x0574(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Multiply_FloatFloat_ReturnValue_10;       // 0x0578(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_MakeVector_ReturnValue_3;                 // 0x057C(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Multiply_FloatFloat_ReturnValue_11;       // 0x0588(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Multiply_FloatFloat_ReturnValue_12;       // 0x058C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Multiply_FloatFloat_ReturnValue_13;       // 0x0590(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Multiply_FloatFloat_ReturnValue_14;       // 0x0594(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Multiply_FloatFloat_ReturnValue_15;       // 0x0598(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_MakeVector_ReturnValue_4;                 // 0x059C(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_MakeVector_ReturnValue_5;                 // 0x05A8(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Temp_float_Variable_7;                             // 0x05B4(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Multiply_FloatFloat_ReturnValue_16;       // 0x05B8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Multiply_FloatFloat_ReturnValue_17;       // 0x05BC(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Variable_9;                              // 0x05C0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_5C1[0x3];                                      // 0x05C1(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                CallFunc_MakeVector_ReturnValue_6;                 // 0x05C4(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Add_VectorVector_ReturnValue_2;           // 0x05D0(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         K2Node_Select_Default_9;                           // 0x05DC(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Add_VectorVector_ReturnValue_3;           // 0x05E0(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Multiply_FloatFloat_ReturnValue_18;       // 0x05EC(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Add_VectorVector_ReturnValue_4;           // 0x05F0(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Add_VectorVector_ReturnValue_5;           // 0x05FC(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_608[0x8];                                      // 0x0608(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTransform                             CallFunc_MakeTransform_ReturnValue_3;              // 0x0610(0x0030)(IsPlainOldData, NoDestructor)
};
static_assert(alignof(WIREPUZZLE_Base_C_LoadPuzzleFromDataTable) == 0x000010, "Wrong alignment on WIREPUZZLE_Base_C_LoadPuzzleFromDataTable");
static_assert(sizeof(WIREPUZZLE_Base_C_LoadPuzzleFromDataTable) == 0x000640, "Wrong size on WIREPUZZLE_Base_C_LoadPuzzleFromDataTable");
static_assert(offsetof(WIREPUZZLE_Base_C_LoadPuzzleFromDataTable, LaserMeshComponent) == 0x000000, "Member 'WIREPUZZLE_Base_C_LoadPuzzleFromDataTable::LaserMeshComponent' has a wrong offset!");
static_assert(offsetof(WIREPUZZLE_Base_C_LoadPuzzleFromDataTable, BracketOffsetY) == 0x000008, "Member 'WIREPUZZLE_Base_C_LoadPuzzleFromDataTable::BracketOffsetY' has a wrong offset!");
static_assert(offsetof(WIREPUZZLE_Base_C_LoadPuzzleFromDataTable, BracketOffsetX) == 0x00000C, "Member 'WIREPUZZLE_Base_C_LoadPuzzleFromDataTable::BracketOffsetX' has a wrong offset!");
static_assert(offsetof(WIREPUZZLE_Base_C_LoadPuzzleFromDataTable, BracketRotation) == 0x000010, "Member 'WIREPUZZLE_Base_C_LoadPuzzleFromDataTable::BracketRotation' has a wrong offset!");
static_assert(offsetof(WIREPUZZLE_Base_C_LoadPuzzleFromDataTable, IsOnMaxSide) == 0x000014, "Member 'WIREPUZZLE_Base_C_LoadPuzzleFromDataTable::IsOnMaxSide' has a wrong offset!");
static_assert(offsetof(WIREPUZZLE_Base_C_LoadPuzzleFromDataTable, IsBatteryVertical) == 0x000015, "Member 'WIREPUZZLE_Base_C_LoadPuzzleFromDataTable::IsBatteryVertical' has a wrong offset!");
static_assert(offsetof(WIREPUZZLE_Base_C_LoadPuzzleFromDataTable, CellSize) == 0x000018, "Member 'WIREPUZZLE_Base_C_LoadPuzzleFromDataTable::CellSize' has a wrong offset!");
static_assert(offsetof(WIREPUZZLE_Base_C_LoadPuzzleFromDataTable, CurrentCellMax) == 0x00001C, "Member 'WIREPUZZLE_Base_C_LoadPuzzleFromDataTable::CurrentCellMax' has a wrong offset!");
static_assert(offsetof(WIREPUZZLE_Base_C_LoadPuzzleFromDataTable, CurrentCellMin) == 0x000020, "Member 'WIREPUZZLE_Base_C_LoadPuzzleFromDataTable::CurrentCellMin' has a wrong offset!");
static_assert(offsetof(WIREPUZZLE_Base_C_LoadPuzzleFromDataTable, Batteries) == 0x000028, "Member 'WIREPUZZLE_Base_C_LoadPuzzleFromDataTable::Batteries' has a wrong offset!");
static_assert(offsetof(WIREPUZZLE_Base_C_LoadPuzzleFromDataTable, CurrentWireCell) == 0x000038, "Member 'WIREPUZZLE_Base_C_LoadPuzzleFromDataTable::CurrentWireCell' has a wrong offset!");
static_assert(offsetof(WIREPUZZLE_Base_C_LoadPuzzleFromDataTable, CellIsMirrored) == 0x000040, "Member 'WIREPUZZLE_Base_C_LoadPuzzleFromDataTable::CellIsMirrored' has a wrong offset!");
static_assert(offsetof(WIREPUZZLE_Base_C_LoadPuzzleFromDataTable, IsAlternate) == 0x000041, "Member 'WIREPUZZLE_Base_C_LoadPuzzleFromDataTable::IsAlternate' has a wrong offset!");
static_assert(offsetof(WIREPUZZLE_Base_C_LoadPuzzleFromDataTable, CellRotations) == 0x000044, "Member 'WIREPUZZLE_Base_C_LoadPuzzleFromDataTable::CellRotations' has a wrong offset!");
static_assert(offsetof(WIREPUZZLE_Base_C_LoadPuzzleFromDataTable, OrientationBits) == 0x000048, "Member 'WIREPUZZLE_Base_C_LoadPuzzleFromDataTable::OrientationBits' has a wrong offset!");
static_assert(offsetof(WIREPUZZLE_Base_C_LoadPuzzleFromDataTable, CellLookupTypeIndex) == 0x00004C, "Member 'WIREPUZZLE_Base_C_LoadPuzzleFromDataTable::CellLookupTypeIndex' has a wrong offset!");
static_assert(offsetof(WIREPUZZLE_Base_C_LoadPuzzleFromDataTable, CurrentCellTransform) == 0x000050, "Member 'WIREPUZZLE_Base_C_LoadPuzzleFromDataTable::CurrentCellTransform' has a wrong offset!");
static_assert(offsetof(WIREPUZZLE_Base_C_LoadPuzzleFromDataTable, CurrentLocation) == 0x000080, "Member 'WIREPUZZLE_Base_C_LoadPuzzleFromDataTable::CurrentLocation' has a wrong offset!");
static_assert(offsetof(WIREPUZZLE_Base_C_LoadPuzzleFromDataTable, CurrentIndex) == 0x000088, "Member 'WIREPUZZLE_Base_C_LoadPuzzleFromDataTable::CurrentIndex' has a wrong offset!");
static_assert(offsetof(WIREPUZZLE_Base_C_LoadPuzzleFromDataTable, PuzzleData) == 0x000090, "Member 'WIREPUZZLE_Base_C_LoadPuzzleFromDataTable::PuzzleData' has a wrong offset!");
static_assert(offsetof(WIREPUZZLE_Base_C_LoadPuzzleFromDataTable, Temp_float_Variable) == 0x0000B8, "Member 'WIREPUZZLE_Base_C_LoadPuzzleFromDataTable::Temp_float_Variable' has a wrong offset!");
static_assert(offsetof(WIREPUZZLE_Base_C_LoadPuzzleFromDataTable, Temp_float_Variable_1) == 0x0000BC, "Member 'WIREPUZZLE_Base_C_LoadPuzzleFromDataTable::Temp_float_Variable_1' has a wrong offset!");
static_assert(offsetof(WIREPUZZLE_Base_C_LoadPuzzleFromDataTable, Temp_bool_Variable) == 0x0000C0, "Member 'WIREPUZZLE_Base_C_LoadPuzzleFromDataTable::Temp_bool_Variable' has a wrong offset!");
static_assert(offsetof(WIREPUZZLE_Base_C_LoadPuzzleFromDataTable, Temp_bool_Variable_1) == 0x0000C1, "Member 'WIREPUZZLE_Base_C_LoadPuzzleFromDataTable::Temp_bool_Variable_1' has a wrong offset!");
static_assert(offsetof(WIREPUZZLE_Base_C_LoadPuzzleFromDataTable, Temp_bool_Variable_2) == 0x0000C2, "Member 'WIREPUZZLE_Base_C_LoadPuzzleFromDataTable::Temp_bool_Variable_2' has a wrong offset!");
static_assert(offsetof(WIREPUZZLE_Base_C_LoadPuzzleFromDataTable, Temp_struct_Variable) == 0x0000C4, "Member 'WIREPUZZLE_Base_C_LoadPuzzleFromDataTable::Temp_struct_Variable' has a wrong offset!");
static_assert(offsetof(WIREPUZZLE_Base_C_LoadPuzzleFromDataTable, Temp_struct_Variable_1) == 0x0000D0, "Member 'WIREPUZZLE_Base_C_LoadPuzzleFromDataTable::Temp_struct_Variable_1' has a wrong offset!");
static_assert(offsetof(WIREPUZZLE_Base_C_LoadPuzzleFromDataTable, Temp_bool_Variable_3) == 0x0000DC, "Member 'WIREPUZZLE_Base_C_LoadPuzzleFromDataTable::Temp_bool_Variable_3' has a wrong offset!");
static_assert(offsetof(WIREPUZZLE_Base_C_LoadPuzzleFromDataTable, Temp_struct_Variable_2) == 0x0000E0, "Member 'WIREPUZZLE_Base_C_LoadPuzzleFromDataTable::Temp_struct_Variable_2' has a wrong offset!");
static_assert(offsetof(WIREPUZZLE_Base_C_LoadPuzzleFromDataTable, Temp_struct_Variable_3) == 0x0000EC, "Member 'WIREPUZZLE_Base_C_LoadPuzzleFromDataTable::Temp_struct_Variable_3' has a wrong offset!");
static_assert(offsetof(WIREPUZZLE_Base_C_LoadPuzzleFromDataTable, Temp_bool_Variable_4) == 0x0000F8, "Member 'WIREPUZZLE_Base_C_LoadPuzzleFromDataTable::Temp_bool_Variable_4' has a wrong offset!");
static_assert(offsetof(WIREPUZZLE_Base_C_LoadPuzzleFromDataTable, Temp_float_Variable_2) == 0x0000FC, "Member 'WIREPUZZLE_Base_C_LoadPuzzleFromDataTable::Temp_float_Variable_2' has a wrong offset!");
static_assert(offsetof(WIREPUZZLE_Base_C_LoadPuzzleFromDataTable, Temp_float_Variable_3) == 0x000100, "Member 'WIREPUZZLE_Base_C_LoadPuzzleFromDataTable::Temp_float_Variable_3' has a wrong offset!");
static_assert(offsetof(WIREPUZZLE_Base_C_LoadPuzzleFromDataTable, Temp_bool_Variable_5) == 0x000104, "Member 'WIREPUZZLE_Base_C_LoadPuzzleFromDataTable::Temp_bool_Variable_5' has a wrong offset!");
static_assert(offsetof(WIREPUZZLE_Base_C_LoadPuzzleFromDataTable, Temp_float_Variable_4) == 0x000108, "Member 'WIREPUZZLE_Base_C_LoadPuzzleFromDataTable::Temp_float_Variable_4' has a wrong offset!");
static_assert(offsetof(WIREPUZZLE_Base_C_LoadPuzzleFromDataTable, Temp_float_Variable_5) == 0x00010C, "Member 'WIREPUZZLE_Base_C_LoadPuzzleFromDataTable::Temp_float_Variable_5' has a wrong offset!");
static_assert(offsetof(WIREPUZZLE_Base_C_LoadPuzzleFromDataTable, CallFunc_SetStaticMesh_ReturnValue) == 0x000110, "Member 'WIREPUZZLE_Base_C_LoadPuzzleFromDataTable::CallFunc_SetStaticMesh_ReturnValue' has a wrong offset!");
static_assert(offsetof(WIREPUZZLE_Base_C_LoadPuzzleFromDataTable, CallFunc_SetStaticMesh_ReturnValue_1) == 0x000111, "Member 'WIREPUZZLE_Base_C_LoadPuzzleFromDataTable::CallFunc_SetStaticMesh_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(WIREPUZZLE_Base_C_LoadPuzzleFromDataTable, CallFunc_GetCellLocationFromIndex_CellLocation) == 0x000114, "Member 'WIREPUZZLE_Base_C_LoadPuzzleFromDataTable::CallFunc_GetCellLocationFromIndex_CellLocation' has a wrong offset!");
static_assert(offsetof(WIREPUZZLE_Base_C_LoadPuzzleFromDataTable, Temp_int_Array_Index_Variable) == 0x00011C, "Member 'WIREPUZZLE_Base_C_LoadPuzzleFromDataTable::Temp_int_Array_Index_Variable' has a wrong offset!");
static_assert(offsetof(WIREPUZZLE_Base_C_LoadPuzzleFromDataTable, Temp_bool_Variable_6) == 0x000120, "Member 'WIREPUZZLE_Base_C_LoadPuzzleFromDataTable::Temp_bool_Variable_6' has a wrong offset!");
static_assert(offsetof(WIREPUZZLE_Base_C_LoadPuzzleFromDataTable, Temp_int_Variable) == 0x000124, "Member 'WIREPUZZLE_Base_C_LoadPuzzleFromDataTable::Temp_int_Variable' has a wrong offset!");
static_assert(offsetof(WIREPUZZLE_Base_C_LoadPuzzleFromDataTable, CallFunc_Add_IntInt_ReturnValue) == 0x000128, "Member 'WIREPUZZLE_Base_C_LoadPuzzleFromDataTable::CallFunc_Add_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(WIREPUZZLE_Base_C_LoadPuzzleFromDataTable, CallFunc_K2_GetComponentToWorld_ReturnValue) == 0x000130, "Member 'WIREPUZZLE_Base_C_LoadPuzzleFromDataTable::CallFunc_K2_GetComponentToWorld_ReturnValue' has a wrong offset!");
static_assert(offsetof(WIREPUZZLE_Base_C_LoadPuzzleFromDataTable, CallFunc_BreakTransform_Location) == 0x000160, "Member 'WIREPUZZLE_Base_C_LoadPuzzleFromDataTable::CallFunc_BreakTransform_Location' has a wrong offset!");
static_assert(offsetof(WIREPUZZLE_Base_C_LoadPuzzleFromDataTable, CallFunc_BreakTransform_Rotation) == 0x00016C, "Member 'WIREPUZZLE_Base_C_LoadPuzzleFromDataTable::CallFunc_BreakTransform_Rotation' has a wrong offset!");
static_assert(offsetof(WIREPUZZLE_Base_C_LoadPuzzleFromDataTable, CallFunc_BreakTransform_Scale) == 0x000178, "Member 'WIREPUZZLE_Base_C_LoadPuzzleFromDataTable::CallFunc_BreakTransform_Scale' has a wrong offset!");
static_assert(offsetof(WIREPUZZLE_Base_C_LoadPuzzleFromDataTable, CallFunc_GetRelativeTransform_ReturnValue) == 0x000190, "Member 'WIREPUZZLE_Base_C_LoadPuzzleFromDataTable::CallFunc_GetRelativeTransform_ReturnValue' has a wrong offset!");
static_assert(offsetof(WIREPUZZLE_Base_C_LoadPuzzleFromDataTable, CallFunc_BreakVector_X) == 0x0001C0, "Member 'WIREPUZZLE_Base_C_LoadPuzzleFromDataTable::CallFunc_BreakVector_X' has a wrong offset!");
static_assert(offsetof(WIREPUZZLE_Base_C_LoadPuzzleFromDataTable, CallFunc_BreakVector_Y) == 0x0001C4, "Member 'WIREPUZZLE_Base_C_LoadPuzzleFromDataTable::CallFunc_BreakVector_Y' has a wrong offset!");
static_assert(offsetof(WIREPUZZLE_Base_C_LoadPuzzleFromDataTable, CallFunc_BreakVector_Z) == 0x0001C8, "Member 'WIREPUZZLE_Base_C_LoadPuzzleFromDataTable::CallFunc_BreakVector_Z' has a wrong offset!");
static_assert(offsetof(WIREPUZZLE_Base_C_LoadPuzzleFromDataTable, CallFunc_AddComponent_ReturnValue) == 0x0001D0, "Member 'WIREPUZZLE_Base_C_LoadPuzzleFromDataTable::CallFunc_AddComponent_ReturnValue' has a wrong offset!");
static_assert(offsetof(WIREPUZZLE_Base_C_LoadPuzzleFromDataTable, CallFunc_Multiply_FloatFloat_ReturnValue) == 0x0001D8, "Member 'WIREPUZZLE_Base_C_LoadPuzzleFromDataTable::CallFunc_Multiply_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(WIREPUZZLE_Base_C_LoadPuzzleFromDataTable, CallFunc_MakeVector_ReturnValue) == 0x0001DC, "Member 'WIREPUZZLE_Base_C_LoadPuzzleFromDataTable::CallFunc_MakeVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(WIREPUZZLE_Base_C_LoadPuzzleFromDataTable, CallFunc_MakeTransform_ReturnValue) == 0x0001F0, "Member 'WIREPUZZLE_Base_C_LoadPuzzleFromDataTable::CallFunc_MakeTransform_ReturnValue' has a wrong offset!");
static_assert(offsetof(WIREPUZZLE_Base_C_LoadPuzzleFromDataTable, CallFunc_GreaterEqual_IntInt_ReturnValue) == 0x000220, "Member 'WIREPUZZLE_Base_C_LoadPuzzleFromDataTable::CallFunc_GreaterEqual_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(WIREPUZZLE_Base_C_LoadPuzzleFromDataTable, CallFunc_Not_PreBool_ReturnValue) == 0x000221, "Member 'WIREPUZZLE_Base_C_LoadPuzzleFromDataTable::CallFunc_Not_PreBool_ReturnValue' has a wrong offset!");
static_assert(offsetof(WIREPUZZLE_Base_C_LoadPuzzleFromDataTable, CallFunc_BooleanAND_ReturnValue) == 0x000222, "Member 'WIREPUZZLE_Base_C_LoadPuzzleFromDataTable::CallFunc_BooleanAND_ReturnValue' has a wrong offset!");
static_assert(offsetof(WIREPUZZLE_Base_C_LoadPuzzleFromDataTable, CallFunc_Conv_BoolToInt_ReturnValue) == 0x000224, "Member 'WIREPUZZLE_Base_C_LoadPuzzleFromDataTable::CallFunc_Conv_BoolToInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(WIREPUZZLE_Base_C_LoadPuzzleFromDataTable, CallFunc_Multiply_FloatFloat_ReturnValue_1) == 0x000228, "Member 'WIREPUZZLE_Base_C_LoadPuzzleFromDataTable::CallFunc_Multiply_FloatFloat_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(WIREPUZZLE_Base_C_LoadPuzzleFromDataTable, CallFunc_Multiply_FloatFloat_ReturnValue_2) == 0x00022C, "Member 'WIREPUZZLE_Base_C_LoadPuzzleFromDataTable::CallFunc_Multiply_FloatFloat_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(WIREPUZZLE_Base_C_LoadPuzzleFromDataTable, CallFunc_Multiply_FloatFloat_ReturnValue_3) == 0x000230, "Member 'WIREPUZZLE_Base_C_LoadPuzzleFromDataTable::CallFunc_Multiply_FloatFloat_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(WIREPUZZLE_Base_C_LoadPuzzleFromDataTable, K2Node_Select_Default) == 0x000234, "Member 'WIREPUZZLE_Base_C_LoadPuzzleFromDataTable::K2Node_Select_Default' has a wrong offset!");
static_assert(offsetof(WIREPUZZLE_Base_C_LoadPuzzleFromDataTable, K2Node_Select_Default_1) == 0x000238, "Member 'WIREPUZZLE_Base_C_LoadPuzzleFromDataTable::K2Node_Select_Default_1' has a wrong offset!");
static_assert(offsetof(WIREPUZZLE_Base_C_LoadPuzzleFromDataTable, K2Node_Select_Default_2) == 0x00023C, "Member 'WIREPUZZLE_Base_C_LoadPuzzleFromDataTable::K2Node_Select_Default_2' has a wrong offset!");
static_assert(offsetof(WIREPUZZLE_Base_C_LoadPuzzleFromDataTable, K2Node_Select_Default_3) == 0x000240, "Member 'WIREPUZZLE_Base_C_LoadPuzzleFromDataTable::K2Node_Select_Default_3' has a wrong offset!");
static_assert(offsetof(WIREPUZZLE_Base_C_LoadPuzzleFromDataTable, CallFunc_MakeVector_ReturnValue_1) == 0x00024C, "Member 'WIREPUZZLE_Base_C_LoadPuzzleFromDataTable::CallFunc_MakeVector_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(WIREPUZZLE_Base_C_LoadPuzzleFromDataTable, CallFunc_MakeRotator_ReturnValue) == 0x000258, "Member 'WIREPUZZLE_Base_C_LoadPuzzleFromDataTable::CallFunc_MakeRotator_ReturnValue' has a wrong offset!");
static_assert(offsetof(WIREPUZZLE_Base_C_LoadPuzzleFromDataTable, K2Node_Select_Default_4) == 0x000264, "Member 'WIREPUZZLE_Base_C_LoadPuzzleFromDataTable::K2Node_Select_Default_4' has a wrong offset!");
static_assert(offsetof(WIREPUZZLE_Base_C_LoadPuzzleFromDataTable, CallFunc_MakeRotator_ReturnValue_1) == 0x000270, "Member 'WIREPUZZLE_Base_C_LoadPuzzleFromDataTable::CallFunc_MakeRotator_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(WIREPUZZLE_Base_C_LoadPuzzleFromDataTable, K2Node_Select_Default_5) == 0x00027C, "Member 'WIREPUZZLE_Base_C_LoadPuzzleFromDataTable::K2Node_Select_Default_5' has a wrong offset!");
static_assert(offsetof(WIREPUZZLE_Base_C_LoadPuzzleFromDataTable, K2Node_Select_Default_6) == 0x000280, "Member 'WIREPUZZLE_Base_C_LoadPuzzleFromDataTable::K2Node_Select_Default_6' has a wrong offset!");
static_assert(offsetof(WIREPUZZLE_Base_C_LoadPuzzleFromDataTable, CallFunc_Add_FloatFloat_ReturnValue) == 0x000284, "Member 'WIREPUZZLE_Base_C_LoadPuzzleFromDataTable::CallFunc_Add_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(WIREPUZZLE_Base_C_LoadPuzzleFromDataTable, CallFunc_Array_Get_Item) == 0x000288, "Member 'WIREPUZZLE_Base_C_LoadPuzzleFromDataTable::CallFunc_Array_Get_Item' has a wrong offset!");
static_assert(offsetof(WIREPUZZLE_Base_C_LoadPuzzleFromDataTable, Temp_bool_Variable_7) == 0x000290, "Member 'WIREPUZZLE_Base_C_LoadPuzzleFromDataTable::Temp_bool_Variable_7' has a wrong offset!");
static_assert(offsetof(WIREPUZZLE_Base_C_LoadPuzzleFromDataTable, CallFunc_SelectInt_ReturnValue) == 0x000294, "Member 'WIREPUZZLE_Base_C_LoadPuzzleFromDataTable::CallFunc_SelectInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(WIREPUZZLE_Base_C_LoadPuzzleFromDataTable, K2Node_Select_Default_7) == 0x000298, "Member 'WIREPUZZLE_Base_C_LoadPuzzleFromDataTable::K2Node_Select_Default_7' has a wrong offset!");
static_assert(offsetof(WIREPUZZLE_Base_C_LoadPuzzleFromDataTable, CallFunc_GreaterEqual_IntInt_ReturnValue_1) == 0x00029C, "Member 'WIREPUZZLE_Base_C_LoadPuzzleFromDataTable::CallFunc_GreaterEqual_IntInt_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(WIREPUZZLE_Base_C_LoadPuzzleFromDataTable, CallFunc_Array_Get_Item_1) == 0x0002A0, "Member 'WIREPUZZLE_Base_C_LoadPuzzleFromDataTable::CallFunc_Array_Get_Item_1' has a wrong offset!");
static_assert(offsetof(WIREPUZZLE_Base_C_LoadPuzzleFromDataTable, CallFunc_Array_Get_Item_2) == 0x0002A8, "Member 'WIREPUZZLE_Base_C_LoadPuzzleFromDataTable::CallFunc_Array_Get_Item_2' has a wrong offset!");
static_assert(offsetof(WIREPUZZLE_Base_C_LoadPuzzleFromDataTable, CallFunc_Subtract_IntPointIntPoint_ReturnValue) == 0x0002B0, "Member 'WIREPUZZLE_Base_C_LoadPuzzleFromDataTable::CallFunc_Subtract_IntPointIntPoint_ReturnValue' has a wrong offset!");
static_assert(offsetof(WIREPUZZLE_Base_C_LoadPuzzleFromDataTable, CallFunc_Array_Get_Item_3) == 0x0002B8, "Member 'WIREPUZZLE_Base_C_LoadPuzzleFromDataTable::CallFunc_Array_Get_Item_3' has a wrong offset!");
static_assert(offsetof(WIREPUZZLE_Base_C_LoadPuzzleFromDataTable, CallFunc_NotEqual_IntInt_ReturnValue) == 0x0002C0, "Member 'WIREPUZZLE_Base_C_LoadPuzzleFromDataTable::CallFunc_NotEqual_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(WIREPUZZLE_Base_C_LoadPuzzleFromDataTable, CallFunc_Array_Length_ReturnValue) == 0x0002C4, "Member 'WIREPUZZLE_Base_C_LoadPuzzleFromDataTable::CallFunc_Array_Length_ReturnValue' has a wrong offset!");
static_assert(offsetof(WIREPUZZLE_Base_C_LoadPuzzleFromDataTable, CallFunc_GetGridDimensions_Result) == 0x0002C8, "Member 'WIREPUZZLE_Base_C_LoadPuzzleFromDataTable::CallFunc_GetGridDimensions_Result' has a wrong offset!");
static_assert(offsetof(WIREPUZZLE_Base_C_LoadPuzzleFromDataTable, CallFunc_GetGridDimensions_Result_1) == 0x0002CC, "Member 'WIREPUZZLE_Base_C_LoadPuzzleFromDataTable::CallFunc_GetGridDimensions_Result_1' has a wrong offset!");
static_assert(offsetof(WIREPUZZLE_Base_C_LoadPuzzleFromDataTable, CallFunc_Conv_IntToFloat_ReturnValue) == 0x0002D0, "Member 'WIREPUZZLE_Base_C_LoadPuzzleFromDataTable::CallFunc_Conv_IntToFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(WIREPUZZLE_Base_C_LoadPuzzleFromDataTable, CallFunc_Multiply_IntInt_ReturnValue) == 0x0002D4, "Member 'WIREPUZZLE_Base_C_LoadPuzzleFromDataTable::CallFunc_Multiply_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(WIREPUZZLE_Base_C_LoadPuzzleFromDataTable, CallFunc_GetGridDimensions_Result_2) == 0x0002D8, "Member 'WIREPUZZLE_Base_C_LoadPuzzleFromDataTable::CallFunc_GetGridDimensions_Result_2' has a wrong offset!");
static_assert(offsetof(WIREPUZZLE_Base_C_LoadPuzzleFromDataTable, CallFunc_Subtract_IntInt_ReturnValue) == 0x0002DC, "Member 'WIREPUZZLE_Base_C_LoadPuzzleFromDataTable::CallFunc_Subtract_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(WIREPUZZLE_Base_C_LoadPuzzleFromDataTable, CallFunc_Conv_IntToFloat_ReturnValue_1) == 0x0002E0, "Member 'WIREPUZZLE_Base_C_LoadPuzzleFromDataTable::CallFunc_Conv_IntToFloat_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(WIREPUZZLE_Base_C_LoadPuzzleFromDataTable, CallFunc_LessEqual_IntInt_ReturnValue) == 0x0002E4, "Member 'WIREPUZZLE_Base_C_LoadPuzzleFromDataTable::CallFunc_LessEqual_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(WIREPUZZLE_Base_C_LoadPuzzleFromDataTable, CallFunc_Multiply_FloatFloat_ReturnValue_4) == 0x0002E8, "Member 'WIREPUZZLE_Base_C_LoadPuzzleFromDataTable::CallFunc_Multiply_FloatFloat_ReturnValue_4' has a wrong offset!");
static_assert(offsetof(WIREPUZZLE_Base_C_LoadPuzzleFromDataTable, CallFunc_Multiply_FloatFloat_ReturnValue_5) == 0x0002EC, "Member 'WIREPUZZLE_Base_C_LoadPuzzleFromDataTable::CallFunc_Multiply_FloatFloat_ReturnValue_5' has a wrong offset!");
static_assert(offsetof(WIREPUZZLE_Base_C_LoadPuzzleFromDataTable, CallFunc_GetPuzzleRowToUse_PuzzleRow) == 0x0002F0, "Member 'WIREPUZZLE_Base_C_LoadPuzzleFromDataTable::CallFunc_GetPuzzleRowToUse_PuzzleRow' has a wrong offset!");
static_assert(offsetof(WIREPUZZLE_Base_C_LoadPuzzleFromDataTable, CallFunc_GetDataTableRowFromName_OutRow) == 0x000300, "Member 'WIREPUZZLE_Base_C_LoadPuzzleFromDataTable::CallFunc_GetDataTableRowFromName_OutRow' has a wrong offset!");
static_assert(offsetof(WIREPUZZLE_Base_C_LoadPuzzleFromDataTable, CallFunc_GetDataTableRowFromName_ReturnValue) == 0x000328, "Member 'WIREPUZZLE_Base_C_LoadPuzzleFromDataTable::CallFunc_GetDataTableRowFromName_ReturnValue' has a wrong offset!");
static_assert(offsetof(WIREPUZZLE_Base_C_LoadPuzzleFromDataTable, CallFunc_Multiply_FloatFloat_ReturnValue_6) == 0x00032C, "Member 'WIREPUZZLE_Base_C_LoadPuzzleFromDataTable::CallFunc_Multiply_FloatFloat_ReturnValue_6' has a wrong offset!");
static_assert(offsetof(WIREPUZZLE_Base_C_LoadPuzzleFromDataTable, CallFunc_Multiply_FloatFloat_ReturnValue_7) == 0x000330, "Member 'WIREPUZZLE_Base_C_LoadPuzzleFromDataTable::CallFunc_Multiply_FloatFloat_ReturnValue_7' has a wrong offset!");
static_assert(offsetof(WIREPUZZLE_Base_C_LoadPuzzleFromDataTable, CallFunc_GetWirePlug_Plug) == 0x000338, "Member 'WIREPUZZLE_Base_C_LoadPuzzleFromDataTable::CallFunc_GetWirePlug_Plug' has a wrong offset!");
static_assert(offsetof(WIREPUZZLE_Base_C_LoadPuzzleFromDataTable, CallFunc_Array_AddUnique_ReturnValue) == 0x000340, "Member 'WIREPUZZLE_Base_C_LoadPuzzleFromDataTable::CallFunc_Array_AddUnique_ReturnValue' has a wrong offset!");
static_assert(offsetof(WIREPUZZLE_Base_C_LoadPuzzleFromDataTable, CallFunc_GetWirePlug_Plug_1) == 0x000348, "Member 'WIREPUZZLE_Base_C_LoadPuzzleFromDataTable::CallFunc_GetWirePlug_Plug_1' has a wrong offset!");
static_assert(offsetof(WIREPUZZLE_Base_C_LoadPuzzleFromDataTable, CallFunc_IsValid_ReturnValue) == 0x000350, "Member 'WIREPUZZLE_Base_C_LoadPuzzleFromDataTable::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(WIREPUZZLE_Base_C_LoadPuzzleFromDataTable, CallFunc_Array_LastIndex_ReturnValue) == 0x000354, "Member 'WIREPUZZLE_Base_C_LoadPuzzleFromDataTable::CallFunc_Array_LastIndex_ReturnValue' has a wrong offset!");
static_assert(offsetof(WIREPUZZLE_Base_C_LoadPuzzleFromDataTable, Temp_bool_Variable_8) == 0x000358, "Member 'WIREPUZZLE_Base_C_LoadPuzzleFromDataTable::Temp_bool_Variable_8' has a wrong offset!");
static_assert(offsetof(WIREPUZZLE_Base_C_LoadPuzzleFromDataTable, CallFunc_EqualEqual_IntInt_ReturnValue) == 0x000359, "Member 'WIREPUZZLE_Base_C_LoadPuzzleFromDataTable::CallFunc_EqualEqual_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(WIREPUZZLE_Base_C_LoadPuzzleFromDataTable, CallFunc_SelectInt_ReturnValue_1) == 0x00035C, "Member 'WIREPUZZLE_Base_C_LoadPuzzleFromDataTable::CallFunc_SelectInt_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(WIREPUZZLE_Base_C_LoadPuzzleFromDataTable, K2Node_Select_Default_8) == 0x000360, "Member 'WIREPUZZLE_Base_C_LoadPuzzleFromDataTable::K2Node_Select_Default_8' has a wrong offset!");
static_assert(offsetof(WIREPUZZLE_Base_C_LoadPuzzleFromDataTable, CallFunc_MakeVector_ReturnValue_2) == 0x000364, "Member 'WIREPUZZLE_Base_C_LoadPuzzleFromDataTable::CallFunc_MakeVector_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(WIREPUZZLE_Base_C_LoadPuzzleFromDataTable, CallFunc_Array_LastIndex_ReturnValue_1) == 0x000370, "Member 'WIREPUZZLE_Base_C_LoadPuzzleFromDataTable::CallFunc_Array_LastIndex_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(WIREPUZZLE_Base_C_LoadPuzzleFromDataTable, CallFunc_EqualEqual_IntInt_ReturnValue_1) == 0x000374, "Member 'WIREPUZZLE_Base_C_LoadPuzzleFromDataTable::CallFunc_EqualEqual_IntInt_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(WIREPUZZLE_Base_C_LoadPuzzleFromDataTable, CallFunc_SelectInt_ReturnValue_2) == 0x000378, "Member 'WIREPUZZLE_Base_C_LoadPuzzleFromDataTable::CallFunc_SelectInt_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(WIREPUZZLE_Base_C_LoadPuzzleFromDataTable, CallFunc_LessEqual_IntInt_ReturnValue_1) == 0x00037C, "Member 'WIREPUZZLE_Base_C_LoadPuzzleFromDataTable::CallFunc_LessEqual_IntInt_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(WIREPUZZLE_Base_C_LoadPuzzleFromDataTable, CallFunc_GreaterEqual_IntInt_ReturnValue_2) == 0x00037D, "Member 'WIREPUZZLE_Base_C_LoadPuzzleFromDataTable::CallFunc_GreaterEqual_IntInt_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(WIREPUZZLE_Base_C_LoadPuzzleFromDataTable, CallFunc_BooleanAND_ReturnValue_1) == 0x00037E, "Member 'WIREPUZZLE_Base_C_LoadPuzzleFromDataTable::CallFunc_BooleanAND_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(WIREPUZZLE_Base_C_LoadPuzzleFromDataTable, CallFunc_LessEqual_IntInt_ReturnValue_2) == 0x00037F, "Member 'WIREPUZZLE_Base_C_LoadPuzzleFromDataTable::CallFunc_LessEqual_IntInt_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(WIREPUZZLE_Base_C_LoadPuzzleFromDataTable, CallFunc_Add_IntInt_ReturnValue_1) == 0x000380, "Member 'WIREPUZZLE_Base_C_LoadPuzzleFromDataTable::CallFunc_Add_IntInt_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(WIREPUZZLE_Base_C_LoadPuzzleFromDataTable, CallFunc_EqualEqual_IntInt_ReturnValue_2) == 0x000384, "Member 'WIREPUZZLE_Base_C_LoadPuzzleFromDataTable::CallFunc_EqualEqual_IntInt_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(WIREPUZZLE_Base_C_LoadPuzzleFromDataTable, CallFunc_SelectInt_ReturnValue_3) == 0x000388, "Member 'WIREPUZZLE_Base_C_LoadPuzzleFromDataTable::CallFunc_SelectInt_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(WIREPUZZLE_Base_C_LoadPuzzleFromDataTable, CallFunc_EqualEqual_IntInt_ReturnValue_3) == 0x00038C, "Member 'WIREPUZZLE_Base_C_LoadPuzzleFromDataTable::CallFunc_EqualEqual_IntInt_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(WIREPUZZLE_Base_C_LoadPuzzleFromDataTable, CallFunc_GetBatteryCells_Cells) == 0x000390, "Member 'WIREPUZZLE_Base_C_LoadPuzzleFromDataTable::CallFunc_GetBatteryCells_Cells' has a wrong offset!");
static_assert(offsetof(WIREPUZZLE_Base_C_LoadPuzzleFromDataTable, CallFunc_Multiply_IntInt_ReturnValue_1) == 0x0003A0, "Member 'WIREPUZZLE_Base_C_LoadPuzzleFromDataTable::CallFunc_Multiply_IntInt_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(WIREPUZZLE_Base_C_LoadPuzzleFromDataTable, CallFunc_SelectInt_ReturnValue_4) == 0x0003A4, "Member 'WIREPUZZLE_Base_C_LoadPuzzleFromDataTable::CallFunc_SelectInt_ReturnValue_4' has a wrong offset!");
static_assert(offsetof(WIREPUZZLE_Base_C_LoadPuzzleFromDataTable, Temp_int_Loop_Counter_Variable) == 0x0003A8, "Member 'WIREPUZZLE_Base_C_LoadPuzzleFromDataTable::Temp_int_Loop_Counter_Variable' has a wrong offset!");
static_assert(offsetof(WIREPUZZLE_Base_C_LoadPuzzleFromDataTable, CallFunc_Less_IntInt_ReturnValue) == 0x0003AC, "Member 'WIREPUZZLE_Base_C_LoadPuzzleFromDataTable::CallFunc_Less_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(WIREPUZZLE_Base_C_LoadPuzzleFromDataTable, CallFunc_Add_IntInt_ReturnValue_2) == 0x0003B0, "Member 'WIREPUZZLE_Base_C_LoadPuzzleFromDataTable::CallFunc_Add_IntInt_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(WIREPUZZLE_Base_C_LoadPuzzleFromDataTable, CallFunc_Percent_IntInt_ReturnValue) == 0x0003B4, "Member 'WIREPUZZLE_Base_C_LoadPuzzleFromDataTable::CallFunc_Percent_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(WIREPUZZLE_Base_C_LoadPuzzleFromDataTable, CallFunc_Multiply_IntInt_ReturnValue_2) == 0x0003B8, "Member 'WIREPUZZLE_Base_C_LoadPuzzleFromDataTable::CallFunc_Multiply_IntInt_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(WIREPUZZLE_Base_C_LoadPuzzleFromDataTable, CallFunc_GetRelativeTransform_ReturnValue_1) == 0x0003C0, "Member 'WIREPUZZLE_Base_C_LoadPuzzleFromDataTable::CallFunc_GetRelativeTransform_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(WIREPUZZLE_Base_C_LoadPuzzleFromDataTable, CallFunc_Add_IntInt_ReturnValue_3) == 0x0003F0, "Member 'WIREPUZZLE_Base_C_LoadPuzzleFromDataTable::CallFunc_Add_IntInt_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(WIREPUZZLE_Base_C_LoadPuzzleFromDataTable, CallFunc_BreakTransform_Location_1) == 0x0003F4, "Member 'WIREPUZZLE_Base_C_LoadPuzzleFromDataTable::CallFunc_BreakTransform_Location_1' has a wrong offset!");
static_assert(offsetof(WIREPUZZLE_Base_C_LoadPuzzleFromDataTable, CallFunc_BreakTransform_Rotation_1) == 0x000400, "Member 'WIREPUZZLE_Base_C_LoadPuzzleFromDataTable::CallFunc_BreakTransform_Rotation_1' has a wrong offset!");
static_assert(offsetof(WIREPUZZLE_Base_C_LoadPuzzleFromDataTable, CallFunc_BreakTransform_Scale_1) == 0x00040C, "Member 'WIREPUZZLE_Base_C_LoadPuzzleFromDataTable::CallFunc_BreakTransform_Scale_1' has a wrong offset!");
static_assert(offsetof(WIREPUZZLE_Base_C_LoadPuzzleFromDataTable, CallFunc_Add_IntInt_ReturnValue_4) == 0x000418, "Member 'WIREPUZZLE_Base_C_LoadPuzzleFromDataTable::CallFunc_Add_IntInt_ReturnValue_4' has a wrong offset!");
static_assert(offsetof(WIREPUZZLE_Base_C_LoadPuzzleFromDataTable, CallFunc_Add_VectorVector_ReturnValue) == 0x00041C, "Member 'WIREPUZZLE_Base_C_LoadPuzzleFromDataTable::CallFunc_Add_VectorVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(WIREPUZZLE_Base_C_LoadPuzzleFromDataTable, CallFunc_Subtract_IntInt_ReturnValue_1) == 0x000428, "Member 'WIREPUZZLE_Base_C_LoadPuzzleFromDataTable::CallFunc_Subtract_IntInt_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(WIREPUZZLE_Base_C_LoadPuzzleFromDataTable, CallFunc_MakeTransform_ReturnValue_1) == 0x000430, "Member 'WIREPUZZLE_Base_C_LoadPuzzleFromDataTable::CallFunc_MakeTransform_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(WIREPUZZLE_Base_C_LoadPuzzleFromDataTable, CallFunc_Conv_IntToFloat_ReturnValue_2) == 0x000460, "Member 'WIREPUZZLE_Base_C_LoadPuzzleFromDataTable::CallFunc_Conv_IntToFloat_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(WIREPUZZLE_Base_C_LoadPuzzleFromDataTable, CallFunc_AddComponent_ReturnValue_1) == 0x000468, "Member 'WIREPUZZLE_Base_C_LoadPuzzleFromDataTable::CallFunc_AddComponent_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(WIREPUZZLE_Base_C_LoadPuzzleFromDataTable, CallFunc_Multiply_FloatFloat_ReturnValue_8) == 0x000470, "Member 'WIREPUZZLE_Base_C_LoadPuzzleFromDataTable::CallFunc_Multiply_FloatFloat_ReturnValue_8' has a wrong offset!");
static_assert(offsetof(WIREPUZZLE_Base_C_LoadPuzzleFromDataTable, CallFunc_IsValid_ReturnValue_1) == 0x000474, "Member 'WIREPUZZLE_Base_C_LoadPuzzleFromDataTable::CallFunc_IsValid_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(WIREPUZZLE_Base_C_LoadPuzzleFromDataTable, CallFunc_Not_PreBool_ReturnValue_1) == 0x000475, "Member 'WIREPUZZLE_Base_C_LoadPuzzleFromDataTable::CallFunc_Not_PreBool_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(WIREPUZZLE_Base_C_LoadPuzzleFromDataTable, CallFunc_IsValid_ReturnValue_2) == 0x000476, "Member 'WIREPUZZLE_Base_C_LoadPuzzleFromDataTable::CallFunc_IsValid_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(WIREPUZZLE_Base_C_LoadPuzzleFromDataTable, CallFunc_Not_PreBool_ReturnValue_2) == 0x000477, "Member 'WIREPUZZLE_Base_C_LoadPuzzleFromDataTable::CallFunc_Not_PreBool_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(WIREPUZZLE_Base_C_LoadPuzzleFromDataTable, CallFunc_Percent_IntInt_ReturnValue_1) == 0x000478, "Member 'WIREPUZZLE_Base_C_LoadPuzzleFromDataTable::CallFunc_Percent_IntInt_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(WIREPUZZLE_Base_C_LoadPuzzleFromDataTable, Temp_float_Variable_6) == 0x00047C, "Member 'WIREPUZZLE_Base_C_LoadPuzzleFromDataTable::Temp_float_Variable_6' has a wrong offset!");
static_assert(offsetof(WIREPUZZLE_Base_C_LoadPuzzleFromDataTable, CallFunc_Multiply_IntInt_ReturnValue_3) == 0x000480, "Member 'WIREPUZZLE_Base_C_LoadPuzzleFromDataTable::CallFunc_Multiply_IntInt_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(WIREPUZZLE_Base_C_LoadPuzzleFromDataTable, CallFunc_Add_IntInt_ReturnValue_5) == 0x000484, "Member 'WIREPUZZLE_Base_C_LoadPuzzleFromDataTable::CallFunc_Add_IntInt_ReturnValue_5' has a wrong offset!");
static_assert(offsetof(WIREPUZZLE_Base_C_LoadPuzzleFromDataTable, CallFunc_Subtract_IntInt_ReturnValue_2) == 0x000488, "Member 'WIREPUZZLE_Base_C_LoadPuzzleFromDataTable::CallFunc_Subtract_IntInt_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(WIREPUZZLE_Base_C_LoadPuzzleFromDataTable, CallFunc_Conv_IntToFloat_ReturnValue_3) == 0x00048C, "Member 'WIREPUZZLE_Base_C_LoadPuzzleFromDataTable::CallFunc_Conv_IntToFloat_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(WIREPUZZLE_Base_C_LoadPuzzleFromDataTable, CallFunc_GetRelativeTransform_ReturnValue_2) == 0x000490, "Member 'WIREPUZZLE_Base_C_LoadPuzzleFromDataTable::CallFunc_GetRelativeTransform_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(WIREPUZZLE_Base_C_LoadPuzzleFromDataTable, CallFunc_Multiply_FloatFloat_ReturnValue_9) == 0x0004C0, "Member 'WIREPUZZLE_Base_C_LoadPuzzleFromDataTable::CallFunc_Multiply_FloatFloat_ReturnValue_9' has a wrong offset!");
static_assert(offsetof(WIREPUZZLE_Base_C_LoadPuzzleFromDataTable, CallFunc_BreakTransform_Location_2) == 0x0004C4, "Member 'WIREPUZZLE_Base_C_LoadPuzzleFromDataTable::CallFunc_BreakTransform_Location_2' has a wrong offset!");
static_assert(offsetof(WIREPUZZLE_Base_C_LoadPuzzleFromDataTable, CallFunc_BreakTransform_Rotation_2) == 0x0004D0, "Member 'WIREPUZZLE_Base_C_LoadPuzzleFromDataTable::CallFunc_BreakTransform_Rotation_2' has a wrong offset!");
static_assert(offsetof(WIREPUZZLE_Base_C_LoadPuzzleFromDataTable, CallFunc_BreakTransform_Scale_2) == 0x0004DC, "Member 'WIREPUZZLE_Base_C_LoadPuzzleFromDataTable::CallFunc_BreakTransform_Scale_2' has a wrong offset!");
static_assert(offsetof(WIREPUZZLE_Base_C_LoadPuzzleFromDataTable, CallFunc_Add_VectorVector_ReturnValue_1) == 0x0004E8, "Member 'WIREPUZZLE_Base_C_LoadPuzzleFromDataTable::CallFunc_Add_VectorVector_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(WIREPUZZLE_Base_C_LoadPuzzleFromDataTable, CallFunc_MakeTransform_ReturnValue_2) == 0x000500, "Member 'WIREPUZZLE_Base_C_LoadPuzzleFromDataTable::CallFunc_MakeTransform_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(WIREPUZZLE_Base_C_LoadPuzzleFromDataTable, CallFunc_GreaterEqual_IntInt_ReturnValue_3) == 0x000530, "Member 'WIREPUZZLE_Base_C_LoadPuzzleFromDataTable::CallFunc_GreaterEqual_IntInt_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(WIREPUZZLE_Base_C_LoadPuzzleFromDataTable, CallFunc_AddComponent_ReturnValue_2) == 0x000538, "Member 'WIREPUZZLE_Base_C_LoadPuzzleFromDataTable::CallFunc_AddComponent_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(WIREPUZZLE_Base_C_LoadPuzzleFromDataTable, CallFunc_BooleanAND_ReturnValue_2) == 0x000540, "Member 'WIREPUZZLE_Base_C_LoadPuzzleFromDataTable::CallFunc_BooleanAND_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(WIREPUZZLE_Base_C_LoadPuzzleFromDataTable, CallFunc_And_IntInt_ReturnValue) == 0x000544, "Member 'WIREPUZZLE_Base_C_LoadPuzzleFromDataTable::CallFunc_And_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(WIREPUZZLE_Base_C_LoadPuzzleFromDataTable, CallFunc_Conv_IntToBool_ReturnValue) == 0x000548, "Member 'WIREPUZZLE_Base_C_LoadPuzzleFromDataTable::CallFunc_Conv_IntToBool_ReturnValue' has a wrong offset!");
static_assert(offsetof(WIREPUZZLE_Base_C_LoadPuzzleFromDataTable, CallFunc_BitShiftRight_ReturnValue) == 0x00054C, "Member 'WIREPUZZLE_Base_C_LoadPuzzleFromDataTable::CallFunc_BitShiftRight_ReturnValue' has a wrong offset!");
static_assert(offsetof(WIREPUZZLE_Base_C_LoadPuzzleFromDataTable, CallFunc_BitShiftRight_ReturnValue_1) == 0x000550, "Member 'WIREPUZZLE_Base_C_LoadPuzzleFromDataTable::CallFunc_BitShiftRight_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(WIREPUZZLE_Base_C_LoadPuzzleFromDataTable, CallFunc_And_IntInt_ReturnValue_1) == 0x000554, "Member 'WIREPUZZLE_Base_C_LoadPuzzleFromDataTable::CallFunc_And_IntInt_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(WIREPUZZLE_Base_C_LoadPuzzleFromDataTable, CallFunc_Conv_IntToBool_ReturnValue_1) == 0x000558, "Member 'WIREPUZZLE_Base_C_LoadPuzzleFromDataTable::CallFunc_Conv_IntToBool_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(WIREPUZZLE_Base_C_LoadPuzzleFromDataTable, CallFunc_Conv_IntToFloat_ReturnValue_4) == 0x00055C, "Member 'WIREPUZZLE_Base_C_LoadPuzzleFromDataTable::CallFunc_Conv_IntToFloat_ReturnValue_4' has a wrong offset!");
static_assert(offsetof(WIREPUZZLE_Base_C_LoadPuzzleFromDataTable, CallFunc_Conv_IntToFloat_ReturnValue_5) == 0x000560, "Member 'WIREPUZZLE_Base_C_LoadPuzzleFromDataTable::CallFunc_Conv_IntToFloat_ReturnValue_5' has a wrong offset!");
static_assert(offsetof(WIREPUZZLE_Base_C_LoadPuzzleFromDataTable, CallFunc_AddComponent_ReturnValue_3) == 0x000568, "Member 'WIREPUZZLE_Base_C_LoadPuzzleFromDataTable::CallFunc_AddComponent_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(WIREPUZZLE_Base_C_LoadPuzzleFromDataTable, CallFunc_Conv_ByteToInt_ReturnValue) == 0x000570, "Member 'WIREPUZZLE_Base_C_LoadPuzzleFromDataTable::CallFunc_Conv_ByteToInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(WIREPUZZLE_Base_C_LoadPuzzleFromDataTable, CallFunc_Conv_ByteToInt_ReturnValue_1) == 0x000574, "Member 'WIREPUZZLE_Base_C_LoadPuzzleFromDataTable::CallFunc_Conv_ByteToInt_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(WIREPUZZLE_Base_C_LoadPuzzleFromDataTable, CallFunc_Multiply_FloatFloat_ReturnValue_10) == 0x000578, "Member 'WIREPUZZLE_Base_C_LoadPuzzleFromDataTable::CallFunc_Multiply_FloatFloat_ReturnValue_10' has a wrong offset!");
static_assert(offsetof(WIREPUZZLE_Base_C_LoadPuzzleFromDataTable, CallFunc_MakeVector_ReturnValue_3) == 0x00057C, "Member 'WIREPUZZLE_Base_C_LoadPuzzleFromDataTable::CallFunc_MakeVector_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(WIREPUZZLE_Base_C_LoadPuzzleFromDataTable, CallFunc_Multiply_FloatFloat_ReturnValue_11) == 0x000588, "Member 'WIREPUZZLE_Base_C_LoadPuzzleFromDataTable::CallFunc_Multiply_FloatFloat_ReturnValue_11' has a wrong offset!");
static_assert(offsetof(WIREPUZZLE_Base_C_LoadPuzzleFromDataTable, CallFunc_Multiply_FloatFloat_ReturnValue_12) == 0x00058C, "Member 'WIREPUZZLE_Base_C_LoadPuzzleFromDataTable::CallFunc_Multiply_FloatFloat_ReturnValue_12' has a wrong offset!");
static_assert(offsetof(WIREPUZZLE_Base_C_LoadPuzzleFromDataTable, CallFunc_Multiply_FloatFloat_ReturnValue_13) == 0x000590, "Member 'WIREPUZZLE_Base_C_LoadPuzzleFromDataTable::CallFunc_Multiply_FloatFloat_ReturnValue_13' has a wrong offset!");
static_assert(offsetof(WIREPUZZLE_Base_C_LoadPuzzleFromDataTable, CallFunc_Multiply_FloatFloat_ReturnValue_14) == 0x000594, "Member 'WIREPUZZLE_Base_C_LoadPuzzleFromDataTable::CallFunc_Multiply_FloatFloat_ReturnValue_14' has a wrong offset!");
static_assert(offsetof(WIREPUZZLE_Base_C_LoadPuzzleFromDataTable, CallFunc_Multiply_FloatFloat_ReturnValue_15) == 0x000598, "Member 'WIREPUZZLE_Base_C_LoadPuzzleFromDataTable::CallFunc_Multiply_FloatFloat_ReturnValue_15' has a wrong offset!");
static_assert(offsetof(WIREPUZZLE_Base_C_LoadPuzzleFromDataTable, CallFunc_MakeVector_ReturnValue_4) == 0x00059C, "Member 'WIREPUZZLE_Base_C_LoadPuzzleFromDataTable::CallFunc_MakeVector_ReturnValue_4' has a wrong offset!");
static_assert(offsetof(WIREPUZZLE_Base_C_LoadPuzzleFromDataTable, CallFunc_MakeVector_ReturnValue_5) == 0x0005A8, "Member 'WIREPUZZLE_Base_C_LoadPuzzleFromDataTable::CallFunc_MakeVector_ReturnValue_5' has a wrong offset!");
static_assert(offsetof(WIREPUZZLE_Base_C_LoadPuzzleFromDataTable, Temp_float_Variable_7) == 0x0005B4, "Member 'WIREPUZZLE_Base_C_LoadPuzzleFromDataTable::Temp_float_Variable_7' has a wrong offset!");
static_assert(offsetof(WIREPUZZLE_Base_C_LoadPuzzleFromDataTable, CallFunc_Multiply_FloatFloat_ReturnValue_16) == 0x0005B8, "Member 'WIREPUZZLE_Base_C_LoadPuzzleFromDataTable::CallFunc_Multiply_FloatFloat_ReturnValue_16' has a wrong offset!");
static_assert(offsetof(WIREPUZZLE_Base_C_LoadPuzzleFromDataTable, CallFunc_Multiply_FloatFloat_ReturnValue_17) == 0x0005BC, "Member 'WIREPUZZLE_Base_C_LoadPuzzleFromDataTable::CallFunc_Multiply_FloatFloat_ReturnValue_17' has a wrong offset!");
static_assert(offsetof(WIREPUZZLE_Base_C_LoadPuzzleFromDataTable, Temp_bool_Variable_9) == 0x0005C0, "Member 'WIREPUZZLE_Base_C_LoadPuzzleFromDataTable::Temp_bool_Variable_9' has a wrong offset!");
static_assert(offsetof(WIREPUZZLE_Base_C_LoadPuzzleFromDataTable, CallFunc_MakeVector_ReturnValue_6) == 0x0005C4, "Member 'WIREPUZZLE_Base_C_LoadPuzzleFromDataTable::CallFunc_MakeVector_ReturnValue_6' has a wrong offset!");
static_assert(offsetof(WIREPUZZLE_Base_C_LoadPuzzleFromDataTable, CallFunc_Add_VectorVector_ReturnValue_2) == 0x0005D0, "Member 'WIREPUZZLE_Base_C_LoadPuzzleFromDataTable::CallFunc_Add_VectorVector_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(WIREPUZZLE_Base_C_LoadPuzzleFromDataTable, K2Node_Select_Default_9) == 0x0005DC, "Member 'WIREPUZZLE_Base_C_LoadPuzzleFromDataTable::K2Node_Select_Default_9' has a wrong offset!");
static_assert(offsetof(WIREPUZZLE_Base_C_LoadPuzzleFromDataTable, CallFunc_Add_VectorVector_ReturnValue_3) == 0x0005E0, "Member 'WIREPUZZLE_Base_C_LoadPuzzleFromDataTable::CallFunc_Add_VectorVector_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(WIREPUZZLE_Base_C_LoadPuzzleFromDataTable, CallFunc_Multiply_FloatFloat_ReturnValue_18) == 0x0005EC, "Member 'WIREPUZZLE_Base_C_LoadPuzzleFromDataTable::CallFunc_Multiply_FloatFloat_ReturnValue_18' has a wrong offset!");
static_assert(offsetof(WIREPUZZLE_Base_C_LoadPuzzleFromDataTable, CallFunc_Add_VectorVector_ReturnValue_4) == 0x0005F0, "Member 'WIREPUZZLE_Base_C_LoadPuzzleFromDataTable::CallFunc_Add_VectorVector_ReturnValue_4' has a wrong offset!");
static_assert(offsetof(WIREPUZZLE_Base_C_LoadPuzzleFromDataTable, CallFunc_Add_VectorVector_ReturnValue_5) == 0x0005FC, "Member 'WIREPUZZLE_Base_C_LoadPuzzleFromDataTable::CallFunc_Add_VectorVector_ReturnValue_5' has a wrong offset!");
static_assert(offsetof(WIREPUZZLE_Base_C_LoadPuzzleFromDataTable, CallFunc_MakeTransform_ReturnValue_3) == 0x000610, "Member 'WIREPUZZLE_Base_C_LoadPuzzleFromDataTable::CallFunc_MakeTransform_ReturnValue_3' has a wrong offset!");

// Function WIREPUZZLE_Base.WIREPUZZLE_Base_C.IsVerticalAxisReversed
// 0x0001 (0x0001 - 0x0000)
struct WIREPUZZLE_Base_C_IsVerticalAxisReversed final
{
public:
	bool                                          Result;                                            // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(WIREPUZZLE_Base_C_IsVerticalAxisReversed) == 0x000001, "Wrong alignment on WIREPUZZLE_Base_C_IsVerticalAxisReversed");
static_assert(sizeof(WIREPUZZLE_Base_C_IsVerticalAxisReversed) == 0x000001, "Wrong size on WIREPUZZLE_Base_C_IsVerticalAxisReversed");
static_assert(offsetof(WIREPUZZLE_Base_C_IsVerticalAxisReversed, Result) == 0x000000, "Member 'WIREPUZZLE_Base_C_IsVerticalAxisReversed::Result' has a wrong offset!");

// Function WIREPUZZLE_Base.WIREPUZZLE_Base_C.GetCellComponentFromPrimitive
// 0x0048 (0x0048 - 0x0000)
struct WIREPUZZLE_Base_C_GetCellComponentFromPrimitive final
{
public:
	class UPrimitiveComponent*                    PrimitiveComponent;                                // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UCOMP_PuzzleCell_Base_C*                Result;                                            // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 CallFunc_GetOwner_ReturnValue;                     // 0x0010(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UCOMP_PuzzleCell_Base_C*                CallFunc_GetCellComponentFromPrimitive_Result;     // 0x0018(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AWIREPUZZLE_WirePlug_C*                 K2Node_DynamicCast_AsWIREPUZZLE_Wire_Plug;         // 0x0020(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0028(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0029(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_2A[0x6];                                       // 0x002A(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class UCOMP_WirePuzzle_Cell_Base_C*           CallFunc_GetConnectedCell_Cell;                    // 0x0030(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue_1;                    // 0x0038(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Temp_bool_Variable;                                // 0x0039(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_3A[0x6];                                       // 0x003A(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class UCOMP_PuzzleCell_Base_C*                K2Node_Select_Default;                             // 0x0040(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash)
};
static_assert(alignof(WIREPUZZLE_Base_C_GetCellComponentFromPrimitive) == 0x000008, "Wrong alignment on WIREPUZZLE_Base_C_GetCellComponentFromPrimitive");
static_assert(sizeof(WIREPUZZLE_Base_C_GetCellComponentFromPrimitive) == 0x000048, "Wrong size on WIREPUZZLE_Base_C_GetCellComponentFromPrimitive");
static_assert(offsetof(WIREPUZZLE_Base_C_GetCellComponentFromPrimitive, PrimitiveComponent) == 0x000000, "Member 'WIREPUZZLE_Base_C_GetCellComponentFromPrimitive::PrimitiveComponent' has a wrong offset!");
static_assert(offsetof(WIREPUZZLE_Base_C_GetCellComponentFromPrimitive, Result) == 0x000008, "Member 'WIREPUZZLE_Base_C_GetCellComponentFromPrimitive::Result' has a wrong offset!");
static_assert(offsetof(WIREPUZZLE_Base_C_GetCellComponentFromPrimitive, CallFunc_GetOwner_ReturnValue) == 0x000010, "Member 'WIREPUZZLE_Base_C_GetCellComponentFromPrimitive::CallFunc_GetOwner_ReturnValue' has a wrong offset!");
static_assert(offsetof(WIREPUZZLE_Base_C_GetCellComponentFromPrimitive, CallFunc_GetCellComponentFromPrimitive_Result) == 0x000018, "Member 'WIREPUZZLE_Base_C_GetCellComponentFromPrimitive::CallFunc_GetCellComponentFromPrimitive_Result' has a wrong offset!");
static_assert(offsetof(WIREPUZZLE_Base_C_GetCellComponentFromPrimitive, K2Node_DynamicCast_AsWIREPUZZLE_Wire_Plug) == 0x000020, "Member 'WIREPUZZLE_Base_C_GetCellComponentFromPrimitive::K2Node_DynamicCast_AsWIREPUZZLE_Wire_Plug' has a wrong offset!");
static_assert(offsetof(WIREPUZZLE_Base_C_GetCellComponentFromPrimitive, K2Node_DynamicCast_bSuccess) == 0x000028, "Member 'WIREPUZZLE_Base_C_GetCellComponentFromPrimitive::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(WIREPUZZLE_Base_C_GetCellComponentFromPrimitive, CallFunc_IsValid_ReturnValue) == 0x000029, "Member 'WIREPUZZLE_Base_C_GetCellComponentFromPrimitive::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(WIREPUZZLE_Base_C_GetCellComponentFromPrimitive, CallFunc_GetConnectedCell_Cell) == 0x000030, "Member 'WIREPUZZLE_Base_C_GetCellComponentFromPrimitive::CallFunc_GetConnectedCell_Cell' has a wrong offset!");
static_assert(offsetof(WIREPUZZLE_Base_C_GetCellComponentFromPrimitive, CallFunc_IsValid_ReturnValue_1) == 0x000038, "Member 'WIREPUZZLE_Base_C_GetCellComponentFromPrimitive::CallFunc_IsValid_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(WIREPUZZLE_Base_C_GetCellComponentFromPrimitive, Temp_bool_Variable) == 0x000039, "Member 'WIREPUZZLE_Base_C_GetCellComponentFromPrimitive::Temp_bool_Variable' has a wrong offset!");
static_assert(offsetof(WIREPUZZLE_Base_C_GetCellComponentFromPrimitive, K2Node_Select_Default) == 0x000040, "Member 'WIREPUZZLE_Base_C_GetCellComponentFromPrimitive::K2Node_Select_Default' has a wrong offset!");

}

