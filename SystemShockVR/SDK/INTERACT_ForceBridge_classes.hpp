#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: INTERACT_ForceBridge

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "INTERACT_Base_classes.hpp"
#include "LevelVoxelization_structs.hpp"
#include "ENUM_InteractionType_structs.hpp"


namespace SDK
{

// BlueprintGeneratedClass INTERACT_ForceBridge.INTERACT_ForceBridge_C
// 0x01A0 (0x04A8 - 0x0308)
class AINTERACT_ForceBridge_C final : public AINTERACT_Base_C
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame_INTERACT_ForceBridge_C;             // 0x0308(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	class UCOMP_AttribManager_C*                  COMP_AttribManager;                                // 0x0310(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UCOMP_VoxelAudio_C*                     SpinLoopAudioB;                                    // 0x0318(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UCOMP_VoxelAudio_C*                     SpinLoopAudioA;                                    // 0x0320(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UBoxComponent*                          ForceBridgeEmitterCollisionB;                      // 0x0328(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UBoxComponent*                          ForceBridgeEmitterCollisionA;                      // 0x0330(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USkeletalMeshComponent*                 ForceBridgeEmitterB;                               // 0x0338(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USkeletalMeshComponent*                 ForceBridgeEmitterA;                               // 0x0340(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UBoxComponent*                          BridgeForcefieldCollision;                         // 0x0348(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UCOMP_CullableNavModifier_C*            COMP_CullableNavModifier;                          // 0x0350(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UCOMP_ScannableObject_C*                COMP_ScannableObject;                              // 0x0358(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	int32                                         ForceBridgeLength;                                 // 0x0360(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_364[0x4];                                      // 0x0364(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TSoftObjectPtr<class UAnimMontage>            ForceBridgeExtendMontage;                          // 0x0368(0x0028)(Edit, BlueprintVisible, DisableEditOnInstance, HasGetValueTypeHash)
	TSoftObjectPtr<class UAnimMontage>            ForceBridgeRetractMontage;                         // 0x0390(0x0028)(Edit, BlueprintVisible, DisableEditOnInstance, HasGetValueTypeHash)
	bool                                          ForceBridgeStartsActive;                           // 0x03B8(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          ForceBridgeStartsLocked;                           // 0x03B9(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          IsForceBridgeMalfunctioning;                       // 0x03BA(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          IsForceBridgePowered;                              // 0x03BB(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          IsForceBridgeActive;                               // 0x03BC(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, SaveGame, IsPlainOldData, NoDestructor)
	bool                                          IsForceBridgeLocked;                               // 0x03BD(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, SaveGame, IsPlainOldData, NoDestructor)
	bool                                          HasInitializedForceBridge;                         // 0x03BE(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, SaveGame, IsPlainOldData, NoDestructor)
	uint8                                         Pad_3BF[0x1];                                      // 0x03BF(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         TransitionStartTimestamp;                          // 0x03C0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, SaveGame, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         MalfunctionPhaseOffset;                            // 0x03C4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         MalfunctionToggleDuration;                         // 0x03C8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_3CC[0x4];                                      // 0x03CC(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TSoftObjectPtr<class UNiagaraSystem>          BridgeLoopFX;                                      // 0x03D0(0x0028)(Edit, BlueprintVisible, DisableEditOnInstance, HasGetValueTypeHash)
	TSoftObjectPtr<class USoundCue>               BridgeActivateCue;                                 // 0x03F8(0x0028)(Edit, BlueprintVisible, HasGetValueTypeHash)
	TSoftObjectPtr<class USoundCue>               BridgeDeactivateCue;                               // 0x0420(0x0028)(Edit, BlueprintVisible, HasGetValueTypeHash)
	class FText                                   ForceBridgeLockedMessage;                          // 0x0448(0x0018)(Edit, BlueprintVisible, DisableEditOnInstance)
	class FText                                   ForceBridgeBusyMessage;                            // 0x0460(0x0018)(Edit, BlueprintVisible, DisableEditOnInstance)
	TSoftObjectPtr<class UNiagaraSystem>          BridgeMalfunctionLoopFX;                           // 0x0478(0x0028)(Edit, BlueprintVisible, DisableEditOnInstance, HasGetValueTypeHash)
	struct FTimerHandle                           MalfunctionTimerHandle;                            // 0x04A0(0x0008)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)

public:
	void ExecuteUbergraph_INTERACT_ForceBridge(int32 EntryPoint);
	void AsyncPlayTransitionMontage(TSoftObjectPtr<class UAnimMontage> Montage, float StartTimeOffset);
	void BndEvt__COMP_CullableNavModifier_K2Node_ComponentBoundEvent_0_CullableVisibilitySignature__DelegateSignature(bool bVisibleState);
	void ReceiveBeginPlay();
	void OnLoaded_AA4375064551318CF74DA5B12F09C1A1(class UObject* Loaded);
	void UserConstructionScript();
	void InitializeForceBridge();
	void InitializeAttributes();
	void UpdateForceBridgeCollisionState();
	void UpdateForceBridgeAnimState();
	void IsForceBridgeActivated(bool* Result);
	void IsForceBridgePoweredOn(bool* Result);
	void IsForceBridgeActivatedAndPowered(bool* Result);
	void IsForceBridgeEnabled(bool* Result);
	void HasFinishedForceBridgeTransition(bool* Result);
	void TryResumeForceBridgeTransition();
	void StartForceBridgeTransition(bool State);
	void PlayForceBridgeTransitionMontage(class UAnimMontage* Montage, float StartTimeOffset);
	void SetForceBridgeVisibility(bool VisibilityState);
	void EVENT_OnTransitionMontageEnded();
	void OnForceBridgeStateChanged(bool State);
	void UpdateNavAgentMutability();
	void UpdateForceBridgeEffects();
	void EVENT_OnBridgeEffectsSpawned(class UObject* Object);
	void UpdateForceBridgeEmissive(float Scale);
	void UpdateForceBridgeSpinSounds(bool State, bool OnBeginPlay);
	void UpdateForceBridgeMalfunctionTimer(bool State);
	void EVENT_OnMalfunctionDelayFinished();
	void GetMalfunctionPhaseOffset(float* Result);
	void GetElapsedMalfunctionTime(float* Result);
	void GetMalfunctionEnableState(bool* Result);
	void EVENT_OnDisableAttribChanged(float CurrValue, float LastValue);
	void TryInteract(class AActor* SourceActor, class UPrimitiveComponent* CursorPrimitive, ENUM_InteractionType InteractionType, struct FSTRUCT_InteractResults* InteractResults);
	void IsInteractActivated(bool* Result);
	void SetInteractLocked(bool Locked, bool* Result);
	void GetInteractLocked(class AActor* SourceActor, bool* Result, class FText* LockMessage);
	void GetInteractBusy(bool* Result, class FText* BusyMessage);
	void SetInteractPowered(bool State, bool* Result);
	void CanModifyInteractPower(bool* Result);

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"INTERACT_ForceBridge_C">();
	}
	static class AINTERACT_ForceBridge_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<AINTERACT_ForceBridge_C>();
	}
};
static_assert(alignof(AINTERACT_ForceBridge_C) == 0x000008, "Wrong alignment on AINTERACT_ForceBridge_C");
static_assert(sizeof(AINTERACT_ForceBridge_C) == 0x0004A8, "Wrong size on AINTERACT_ForceBridge_C");
static_assert(offsetof(AINTERACT_ForceBridge_C, UberGraphFrame_INTERACT_ForceBridge_C) == 0x000308, "Member 'AINTERACT_ForceBridge_C::UberGraphFrame_INTERACT_ForceBridge_C' has a wrong offset!");
static_assert(offsetof(AINTERACT_ForceBridge_C, COMP_AttribManager) == 0x000310, "Member 'AINTERACT_ForceBridge_C::COMP_AttribManager' has a wrong offset!");
static_assert(offsetof(AINTERACT_ForceBridge_C, SpinLoopAudioB) == 0x000318, "Member 'AINTERACT_ForceBridge_C::SpinLoopAudioB' has a wrong offset!");
static_assert(offsetof(AINTERACT_ForceBridge_C, SpinLoopAudioA) == 0x000320, "Member 'AINTERACT_ForceBridge_C::SpinLoopAudioA' has a wrong offset!");
static_assert(offsetof(AINTERACT_ForceBridge_C, ForceBridgeEmitterCollisionB) == 0x000328, "Member 'AINTERACT_ForceBridge_C::ForceBridgeEmitterCollisionB' has a wrong offset!");
static_assert(offsetof(AINTERACT_ForceBridge_C, ForceBridgeEmitterCollisionA) == 0x000330, "Member 'AINTERACT_ForceBridge_C::ForceBridgeEmitterCollisionA' has a wrong offset!");
static_assert(offsetof(AINTERACT_ForceBridge_C, ForceBridgeEmitterB) == 0x000338, "Member 'AINTERACT_ForceBridge_C::ForceBridgeEmitterB' has a wrong offset!");
static_assert(offsetof(AINTERACT_ForceBridge_C, ForceBridgeEmitterA) == 0x000340, "Member 'AINTERACT_ForceBridge_C::ForceBridgeEmitterA' has a wrong offset!");
static_assert(offsetof(AINTERACT_ForceBridge_C, BridgeForcefieldCollision) == 0x000348, "Member 'AINTERACT_ForceBridge_C::BridgeForcefieldCollision' has a wrong offset!");
static_assert(offsetof(AINTERACT_ForceBridge_C, COMP_CullableNavModifier) == 0x000350, "Member 'AINTERACT_ForceBridge_C::COMP_CullableNavModifier' has a wrong offset!");
static_assert(offsetof(AINTERACT_ForceBridge_C, COMP_ScannableObject) == 0x000358, "Member 'AINTERACT_ForceBridge_C::COMP_ScannableObject' has a wrong offset!");
static_assert(offsetof(AINTERACT_ForceBridge_C, ForceBridgeLength) == 0x000360, "Member 'AINTERACT_ForceBridge_C::ForceBridgeLength' has a wrong offset!");
static_assert(offsetof(AINTERACT_ForceBridge_C, ForceBridgeExtendMontage) == 0x000368, "Member 'AINTERACT_ForceBridge_C::ForceBridgeExtendMontage' has a wrong offset!");
static_assert(offsetof(AINTERACT_ForceBridge_C, ForceBridgeRetractMontage) == 0x000390, "Member 'AINTERACT_ForceBridge_C::ForceBridgeRetractMontage' has a wrong offset!");
static_assert(offsetof(AINTERACT_ForceBridge_C, ForceBridgeStartsActive) == 0x0003B8, "Member 'AINTERACT_ForceBridge_C::ForceBridgeStartsActive' has a wrong offset!");
static_assert(offsetof(AINTERACT_ForceBridge_C, ForceBridgeStartsLocked) == 0x0003B9, "Member 'AINTERACT_ForceBridge_C::ForceBridgeStartsLocked' has a wrong offset!");
static_assert(offsetof(AINTERACT_ForceBridge_C, IsForceBridgeMalfunctioning) == 0x0003BA, "Member 'AINTERACT_ForceBridge_C::IsForceBridgeMalfunctioning' has a wrong offset!");
static_assert(offsetof(AINTERACT_ForceBridge_C, IsForceBridgePowered) == 0x0003BB, "Member 'AINTERACT_ForceBridge_C::IsForceBridgePowered' has a wrong offset!");
static_assert(offsetof(AINTERACT_ForceBridge_C, IsForceBridgeActive) == 0x0003BC, "Member 'AINTERACT_ForceBridge_C::IsForceBridgeActive' has a wrong offset!");
static_assert(offsetof(AINTERACT_ForceBridge_C, IsForceBridgeLocked) == 0x0003BD, "Member 'AINTERACT_ForceBridge_C::IsForceBridgeLocked' has a wrong offset!");
static_assert(offsetof(AINTERACT_ForceBridge_C, HasInitializedForceBridge) == 0x0003BE, "Member 'AINTERACT_ForceBridge_C::HasInitializedForceBridge' has a wrong offset!");
static_assert(offsetof(AINTERACT_ForceBridge_C, TransitionStartTimestamp) == 0x0003C0, "Member 'AINTERACT_ForceBridge_C::TransitionStartTimestamp' has a wrong offset!");
static_assert(offsetof(AINTERACT_ForceBridge_C, MalfunctionPhaseOffset) == 0x0003C4, "Member 'AINTERACT_ForceBridge_C::MalfunctionPhaseOffset' has a wrong offset!");
static_assert(offsetof(AINTERACT_ForceBridge_C, MalfunctionToggleDuration) == 0x0003C8, "Member 'AINTERACT_ForceBridge_C::MalfunctionToggleDuration' has a wrong offset!");
static_assert(offsetof(AINTERACT_ForceBridge_C, BridgeLoopFX) == 0x0003D0, "Member 'AINTERACT_ForceBridge_C::BridgeLoopFX' has a wrong offset!");
static_assert(offsetof(AINTERACT_ForceBridge_C, BridgeActivateCue) == 0x0003F8, "Member 'AINTERACT_ForceBridge_C::BridgeActivateCue' has a wrong offset!");
static_assert(offsetof(AINTERACT_ForceBridge_C, BridgeDeactivateCue) == 0x000420, "Member 'AINTERACT_ForceBridge_C::BridgeDeactivateCue' has a wrong offset!");
static_assert(offsetof(AINTERACT_ForceBridge_C, ForceBridgeLockedMessage) == 0x000448, "Member 'AINTERACT_ForceBridge_C::ForceBridgeLockedMessage' has a wrong offset!");
static_assert(offsetof(AINTERACT_ForceBridge_C, ForceBridgeBusyMessage) == 0x000460, "Member 'AINTERACT_ForceBridge_C::ForceBridgeBusyMessage' has a wrong offset!");
static_assert(offsetof(AINTERACT_ForceBridge_C, BridgeMalfunctionLoopFX) == 0x000478, "Member 'AINTERACT_ForceBridge_C::BridgeMalfunctionLoopFX' has a wrong offset!");
static_assert(offsetof(AINTERACT_ForceBridge_C, MalfunctionTimerHandle) == 0x0004A0, "Member 'AINTERACT_ForceBridge_C::MalfunctionTimerHandle' has a wrong offset!");

}

